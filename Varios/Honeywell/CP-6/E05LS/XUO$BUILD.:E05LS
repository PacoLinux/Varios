VERSION E05

PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:1    
        1        1        /*M*     XUO$DNAME -- THIS MODULE WILL BUILD OBJECT UNIT NAME RECORDS*/
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=4,STI=0,IND=4,CTI=3,DCI=4,ECI=4,CSI=0,THI=0,DTI=0,
        8        8             ENI=4,CLM=0,SQB,NTB,MOC,CCI=3,NLB,MCL=0,EDMC */
        9        9        /*P*     NAME:     XUO$NAME
       10       10                 PURPOSE:  THIS MODULE WILL BUILD AND OUTPUT OBJECT UNIT NAME RECORDS.
       11       11                 DESCRIPTION:   THE XUO$NAME MODULE WILL BUILD AND OUTPUT THE
       12       12                      FOLLOWING NAME RECORDS:
       13       13                           1.   DEF NAMES
       14       14                           2.   REF NAMES
       15       15                           3.   DEBUG NAMES
       16       16                      THE MODULE WILL RETURN A 'NAME POINTER' TO THE CALLER.
       17       17        */
       18       18        /*D*
       19       19
       20       20        XUO$DNAME -- Externally Defined Names (Record Type 1)
       21       21
       22       22        NAME:  XUO$DNAME
       23       23
       24       24        PURPOSE:  To build an entry in the Externally Defined Names Record
       25       25
       26       26        DESCRIPTION:  This routine is used to build an entry in the
       27       27             Externally Defined Names record (Type 1).  The record
       28       28             is the collection of names pointed to by the following
       29       29             records:  Sections   (type 3)
       30       30                       ENTDEF     (type 4)
       31       31                       SYMDEF     (type 6)
       32       32                       SEGDEF     (type 8)
       33       33
       34       34        */
       35       35        /*D*
       36       36        CALL:  CALL XUO$DNAME (Name,
       37       37                        Name Pointer)
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:2    
       38       38
       39       39        INPUT:
       40       40            Name                Structure ALIGNED
       41       41                .Size           UBIN HALF UNALIGNED
       42       42                                The number of characters in the name.
       43       43                .Text           CHAR (Size)
       44       44                                The character string that is the
       45       45                                externally defined name.
       46       46
       47       47        OUTPUT:
       48       48            Name Pointer        UBIN
       49       49                                The value that represents the word
       50       50                                offset to the entry in the Defined
       51       51                                Names Text record.
       52       52
       53       53        B$OBJECT REFERENCE:  B$DNAME
       54       54
       55       55        */
       56       56        /*B*
       57       57        GLOBAL DATA:
       58       58             B_DNAME_CUR$
       59       59             B_DNAME_COUNT
       60       60             B_DNAME_PAGE
       61       61
       62       62        INTERFACE:
       63       63             XUO$OUWRITE
       64       64
       65       65        */
       66       66
       67       67        XUO$DNAME: PROC (P_NAME,P_NAME_POINTER);
       68       68         /*
       69       69            */
       70       70        %INCLUDE ZVA_SYSTEM_FILE;
       71     6321        %PAGE (ARG=INCLUDES);

              6334    1   /*******************************************************************************
              6335    1   *                                                                              *
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:3    
              6336    1   *        INCLUDES              INCLUDES                                            *
              6337    1   *                                                                              *
              6338    1   *******************************************************************************/

       72     6342        %INCLUDE B$OBJECT_C;
       73     9772        %INCLUDE XUO$OBJ_C;
       74    10182        %PAGE(ARG=SUBS);

             10195    1   /*******************************************************************************
             10196    1   *                                                                              *
             10197    1   *        SUBS              SUBS                                                  *
             10198    1   *                                                                              *
             10199    1   *******************************************************************************/

       75    10203        %B$RECORDSUBS;
       76    10231        %PLIST;
       77    10232        %PAGE (ARG=PARAMETERS);

             10245    1   /*******************************************************************************
             10246    1   *                                                                              *
             10247    1   *        PARAMETERS              PARAMETERS                                        *
             10248    1   *                                                                              *
             10249    1   *******************************************************************************/

       78    10253    1   DCL 1 P_NAME ALIGNED,
       79    10254    1         2 SIZE UBIN HALF UNAL,
       80    10255    1         2 TEXT CHAR(P_NAME.SIZE);
       81    10256         /*
       82    10257            */
       83    10258    1   DCL P_NAME_POINTER UBIN;
       84    10259         /*
       85    10260            */
       86    10261        %PAGE (ARG=DEF NAME DATA);

             10274    1   /*******************************************************************************
             10275    1   *                                                                              *
             10276    1   *        DEF NAME DATA              DEF NAME DATA                                  *
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:4    
             10277    1   *                                                                              *
             10278    1   *******************************************************************************/

       87    10282        %B$DNAME (NAME=B$DNAME,STCLASS="BASED(B_DNAME_CUR$)");
       88    10301        %B_DNAME_POINTERS;
       89    10321        %PLIST;
       90    10322        %PAGE (ARG=REF NAME DATA);

             10335    1   /*******************************************************************************
             10336    1   *                                                                              *
             10337    1   *        REF NAME DATA              REF NAME DATA                                  *
             10338    1   *                                                                              *
             10339    1   *******************************************************************************/

       91    10343        %B$DNAME (NAME=B$RNAME,STCLASS="BASED(B_RNAME_CUR$)");
       92    10362        %B_RNAME_POINTERS;
       93    10382        %PLIST;
       94    10383        %PAGE (ARG=DBG NAME DATA);

             10396    1   /*******************************************************************************
             10397    1   *                                                                              *
             10398    1   *        DBG NAME DATA              DBG NAME DATA                                  *
             10399    1   *                                                                              *
             10400    1   *******************************************************************************/

       95    10404        %B$DNAME (NAME=B$DBGNAME,STCLASS="BASED(B_DBGNAME_CUR$)");
       96    10423        %B_DBGNAME_POINTERS;
       97    10443        %PLIST;
       98    10444        %PAGE (ARG=ENTRY DCLS);

             10457    1   /*******************************************************************************
             10458    1   *                                                                              *
             10459    1   *        ENTRY DCLS              ENTRY DCLS                                        *
             10460    1   *                                                                              *
             10461    1   *******************************************************************************/

       99    10465    1   DCL XUO$OUWRITE ENTRY(2);
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:5    
      100    10466        %PAGE (ARG=LOCAL DATA);

             10479    1   /*******************************************************************************
             10480    1   *                                                                              *
             10481    1   *        LOCAL DATA              LOCAL DATA                                        *
             10482    1   *                                                                              *
             10483    1   *******************************************************************************/

      101    10487    1   DCL NAME_SIZE_TEMP UBIN;
      102    10488        %PAGE (ARG=DEF CODE);

             10501    1   /*******************************************************************************
             10502    1   *                                                                              *
             10503    1   *        DEF CODE              DEF CODE                                            *
             10504    1   *                                                                              *
             10505    1   *******************************************************************************/

      103    10509         /*
      104    10510         The following will check to see if the passed name will fit in the current
      105    10511         record.  If not the current record will be written and the pointer
      106    10512         re-initialized.  Then the text will be moved to the buffer.
      107    10513         */
      108    10514    1       NAME_SIZE_TEMP=SIZEW(P_NAME);
      109    10515    1       IF PINCRW(B_DNAME_CUR$,NAME_SIZE_TEMP)>=B_DNAME_END$ THEN
      110    10516    2       DO;
      111    10517         /*
      112    10518         Always write a full page of data
      113    10519         */
      114    10520    2           B_DNAME_CUR$=B_DNAME_END$;
      115    10521    2           CALL XUO$OUWRITE(%TYPDNAM);
      116    10522    2           B_DNAME_PAGE=B_DNAME_PAGE+1;
      117    10523    2           B_DNAME_COUNT=B_DNAME_PAGE*B_DNAME_PAGE_SIZE;
      118    10524    2           B_DNAME_CUR$=B_DNAME_BASE$;
      119    10525    2           END;
      120    10526         /*
      121    10527         The following section will add the text to the record
      122    10528         */
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:6    
      123    10529    1       P_NAME_POINTER=B_DNAME_COUNT;
      124    10530    1       B$DNAME.COUNT=P_NAME.SIZE;
      125    10531    1       B$DNAME.TEXT=P_NAME.TEXT;
      126    10532    1       B_DNAME_COUNT=B_DNAME_COUNT+NAME_SIZE_TEMP;
      127    10533    1       B_DNAME_CUR$=PINCRW(B_DNAME_CUR$,NAME_SIZE_TEMP);
      128    10534    1       RETURN;
      129    10535            %PAGE (ARG=REF CODE);

             10548    1   /*******************************************************************************
             10549    1   *                                                                              *
             10550    1   *        REF CODE              REF CODE                                            *
             10551    1   *                                                                              *
             10552    1   *******************************************************************************/

      130    10556        /*D*
      131    10557
      132    10558        XUO$RNAME --Externally Referenced Names Record (Record Type 2)
      133    10559
      134    10560        NAME:  XUO$RNAME
      135    10561
      136    10562        PURPOSE:  To build an entry into the Externally Referenced
      137    10563              Names Record.  (type 2)
      138    10564
      139    10565        DESCRIPTION:  This routine builds an entry in the Externally
      140    10566             Referenced Names Record. (type 2)  The record is the
      141    10567             collection of names pointed to by the following
      142    10568             records:   ENTREF    (type 5)
      143    10569                        SYMREF    (type 7)
      144    10570                        SEGREF    (type 9)
      145    10571
      146    10572        CALL:  CALL XUO$RNAME (Name,
      147    10573                         Name Pointer)
      148    10574
      149    10575        INPUT:
      150    10576            Name
      151    10577                .Size           UBIN HALF UNALIGNED
      152    10578                                The number of characters in the name.
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:7    
      153    10579                .Text           CHAR(Size)
      154    10580                                The character string that is the
      155    10581                                externally referenced name.
      156    10582
      157    10583        OUTPUT:
      158    10584            Name Pointer       UBIN ALIGNED
      159    10585                               The word offset to the entry in the
      160    10586                               Externally Referenced Names record
      161    10587                               locating the added text.
      162    10588
      163    10589        B$OBJECT REFERENCE:  B$RNAME
      164    10590        */
      165    10591        /*B*
      166    10592        GLOBAL DATA:
      167    10593            B_RNAME_CUR$
      168    10594            B_RNAME_COUNT
      169    10595            B_RNAME_PAGE
      170    10596
      171    10597        INTERFACE:
      172    10598            XUO$OUWRITE
      173    10599
      174    10600        */
      175    10601
      176    10602    1   XUO$RNAME: ENTRY (P_NAME,P_NAME_POINTER);
      177    10603         /*
      178    10604         The following will check to see if the passed name will fit in the current
      179    10605         record.  If not the current record will be written and the pointer
      180    10606         re-initialized.  Then the text will be moved to the buffer.
      181    10607         */
      182    10608    1       NAME_SIZE_TEMP=SIZEW(P_NAME);
      183    10609    1       IF PINCRW(B_RNAME_CUR$,NAME_SIZE_TEMP)>=B_RNAME_END$ THEN
      184    10610    2       DO;
      185    10611         /*
      186    10612         Always write a full page of data
      187    10613         */
      188    10614    2           B_RNAME_CUR$=B_RNAME_END$;
      189    10615    2           CALL XUO$OUWRITE(%TYPRNAM);
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:8    
      190    10616    2           B_RNAME_PAGE=B_RNAME_PAGE+1;
      191    10617    2           B_RNAME_COUNT=B_RNAME_PAGE*B_RNAME_PAGE_SIZE;
      192    10618    2           B_RNAME_CUR$=B_RNAME_BASE$;
      193    10619    2           END;
      194    10620         /*
      195    10621         The following section will add the text to the record
      196    10622         */
      197    10623    1       P_NAME_POINTER=B_RNAME_COUNT;
      198    10624    1       B$RNAME.COUNT=P_NAME.SIZE;
      199    10625    1       B$RNAME.TEXT=P_NAME.TEXT;
      200    10626    1       B_RNAME_COUNT=B_RNAME_COUNT+NAME_SIZE_TEMP;
      201    10627    1       B_RNAME_CUR$=PINCRW(B_RNAME_CUR$,NAME_SIZE_TEMP);
      202    10628    1       RETURN;
      203    10629            %PAGE (ARG=REF CODE);

             10642    1   /*******************************************************************************
             10643    1   *                                                                              *
             10644    1   *        REF CODE              REF CODE                                            *
             10645    1   *                                                                              *
             10646    1   *******************************************************************************/

      204    10650        /*D*
      205    10651
      206    10652        XUO$DBGNAME --Procedure Names Debug Record (Record Type 15)
      207    10653
      208    10654        NAME:  XUO$DBGNAME
      209    10655
      210    10656        PURPOSE:  To build an entry in the Procedure Names Debug
      211    10657            Record (Record Type 15).
      212    10658
      213    10659        DESCRIPTION:  This routine builds entries in the Procedure
      214    10660             Names Debug Record.  This record contains all debug
      215    10661             names; that is, all procedure names, entry names,
      216    10662             statement labels, and variable names.
      217    10663
      218    10664        CALL:  CALL XUO$DBGNAME (Name,
      219    10665                          Name Pointer)
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:9    
      220    10666
      221    10667        INPUT:
      222    10668            Name
      223    10669                .Size           UBIN HALF UNALIGNED
      224    10670                                The number of characters in the name.
      225    10671                .Text           CHAR(Size)
      226    10672                                The character string that is the
      227    10673                                name.
      228    10674
      229    10675        OUTPUT:
      230    10676            Name Pointer       UBIN ALIGNED
      231    10677                               The word offset to the entry in the
      232    10678                               Procedure Names Debug record
      233    10679                               locating the added text.
      234    10680
      235    10681        B$OBJECT REFERENCE:  B$DNAME
      236    10682        */
      237    10683        /*B*
      238    10684        GLOBAL DATA:
      239    10685            B_DBGNAME_CUR$
      240    10686            B_DBGNAME_COUNT
      241    10687            B_DBGNAME_PAGE
      242    10688
      243    10689        INTERFACE:
      244    10690            XUO$OUWRITE
      245    10691
      246    10692        */
      247    10693
      248    10694    1   XUO$DBGNAME: ENTRY (P_NAME,P_NAME_POINTER);
      249    10695         /*
      250    10696         The following will check to see if the passed name will fit in the current
      251    10697         record.  If not the current record will be written and the pointer
      252    10698         re-initialized.  Then the text will be moved to the buffer.
      253    10699         */
      254    10700    1       NAME_SIZE_TEMP=SIZEW(P_NAME);
      255    10701    1       IF PINCRW(B_DBGNAME_CUR$,NAME_SIZE_TEMP)>=B_DBGNAME_END$ THEN
      256    10702    2       DO;
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:10   
      257    10703         /*
      258    10704         Always write a full page of data
      259    10705         */
      260    10706    2           B_DBGNAME_CUR$=B_DBGNAME_END$;
      261    10707    2           CALL XUO$OUWRITE(%TYPDBGNAM);
      262    10708    2           B_DBGNAME_PAGE=B_DBGNAME_PAGE+1;
      263    10709    2           B_DBGNAME_COUNT=B_DBGNAME_PAGE*B_DBGNAME_PAGE_SIZE;
      264    10710    2           B_DBGNAME_CUR$=B_DBGNAME_BASE$;
      265    10711    2           END;
      266    10712         /*
      267    10713         The following section will add the text to the record
      268    10714         */
      269    10715    1       P_NAME_POINTER=B_DBGNAME_COUNT;
      270    10716    1       B$DBGNAME.COUNT=P_NAME.SIZE;
      271    10717    1       B$DBGNAME.TEXT=P_NAME.TEXT;
      272    10718    1       B_DBGNAME_COUNT=B_DBGNAME_COUNT+NAME_SIZE_TEMP;
      273    10719    1       B_DBGNAME_CUR$=PINCRW(B_DBGNAME_CUR$,NAME_SIZE_TEMP);
      274    10720    1       RETURN;
      275    10721    1   END XUO$DNAME;
      276    10722        %EOD;

PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:11   
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$DNAME.

   Procedure XUO$DNAME requires 144 words for executable code.
   Procedure XUO$DNAME requires 6 words of local(AUTO) storage.

PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:12   

 Object Unit name= XUO$DNAME                                  File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:23:32.52 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   144    220  XUO$DNAME
    2  RoData even  none     4      4  XUO$DNAME

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        2  XUO$DNAME
     1     60                  yes      Std        2  XUO$RNAME
     1    140                  yes      Std        2  XUO$DBGNAME

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:13   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_DNAME_BASE$                         B_DNAME_CUR$
     B_DNAME_END$                          B_DNAME_COUNT                         B_DNAME_PAGE
     B_DNAME_PAGE_SIZE                     B_RNAME_BASE$                         B_RNAME_CUR$
     B_RNAME_END$                          B_RNAME_COUNT                         B_RNAME_PAGE
     B_RNAME_PAGE_SIZE                     B_DBGNAME_BASE$                       B_DBGNAME_CUR$
     B_DBGNAME_END$                        B_DBGNAME_COUNT                       B_DBGNAME_PAGE
     B_DBGNAME_PAGE_SIZE                   B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:14   


        1        1        /*M*     XUO$DNAME -- THIS MODULE WILL BUILD OBJECT UNIT NAME RECORDS*/
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=4,STI=0,IND=4,CTI=3,DCI=4,ECI=4,CSI=0,THI=0,DTI=0,
        8        8             ENI=4,CLM=0,SQB,NTB,MOC,CCI=3,NLB,MCL=0,EDMC */
        9        9        /*P*     NAME:     XUO$NAME
       10       10                 PURPOSE:  THIS MODULE WILL BUILD AND OUTPUT OBJECT UNIT NAME RECORDS.
       11       11                 DESCRIPTION:   THE XUO$NAME MODULE WILL BUILD AND OUTPUT THE
       12       12                      FOLLOWING NAME RECORDS:
       13       13                           1.   DEF NAMES
       14       14                           2.   REF NAMES
       15       15                           3.   DEBUG NAMES
       16       16                      THE MODULE WILL RETURN A 'NAME POINTER' TO THE CALLER.
       17       17        */
       18       18        /*D*
       19       19
       20       20        XUO$DNAME -- Externally Defined Names (Record Type 1)
       21       21
       22       22        NAME:  XUO$DNAME
       23       23
       24       24        PURPOSE:  To build an entry in the Externally Defined Names Record
       25       25
       26       26        DESCRIPTION:  This routine is used to build an entry in the
       27       27             Externally Defined Names record (Type 1).  The record
       28       28             is the collection of names pointed to by the following
       29       29             records:  Sections   (type 3)
       30       30                       ENTDEF     (type 4)
       31       31                       SYMDEF     (type 6)
       32       32                       SEGDEF     (type 8)
       33       33
       34       34        */
       35       35        /*D*
       36       36        CALL:  CALL XUO$DNAME (Name,
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:15   
       37       37                        Name Pointer)
       38       38
       39       39        INPUT:
       40       40            Name                Structure ALIGNED
       41       41                .Size           UBIN HALF UNALIGNED
       42       42                                The number of characters in the name.
       43       43                .Text           CHAR (Size)
       44       44                                The character string that is the
       45       45                                externally defined name.
       46       46
       47       47        OUTPUT:
       48       48            Name Pointer        UBIN
       49       49                                The value that represents the word
       50       50                                offset to the entry in the Defined
       51       51                                Names Text record.
       52       52
       53       53        B$OBJECT REFERENCE:  B$DNAME
       54       54
       55       55        */
       56       56        /*B*
       57       57        GLOBAL DATA:
       58       58             B_DNAME_CUR$
       59       59             B_DNAME_COUNT
       60       60             B_DNAME_PAGE
       61       61
       62       62        INTERFACE:
       63       63             XUO$OUWRITE
       64       64
       65       65        */
       66       66
       67       67        XUO$DNAME: PROC (P_NAME,P_NAME_POINTER);

     67  1 000000   000000 700200 xent  XUO$DNAME    TSX0  ! X66_AUTO_2
         1 000001   000006 000002                    ZERO    6,2

       68       68         /*
       69       69            */
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:16   
       70       70        %INCLUDE ZVA_SYSTEM_FILE;
       71     6321        %PAGE (ARG=INCLUDES);

              6334    1   /*******************************************************************************
              6335    1   *                                                                              *
              6336    1   *        INCLUDES              INCLUDES                                           *
              6337    1   *                                                                              *
              6338    1   *******************************************************************************/

       72     6342        %INCLUDE B$OBJECT_C;
       73     9772        %INCLUDE XUO$OBJ_C;
       74    10182        %PAGE(ARG=SUBS);

             10195    1   /*******************************************************************************
             10196    1   *                                                                              *
             10197    1   *        SUBS              SUBS                                                  *
             10198    1   *                                                                              *
             10199    1   *******************************************************************************/

       75    10203        %B$RECORDSUBS;
       76    10231        %PLIST;
       77    10232        %PAGE (ARG=PARAMETERS);

             10245    1   /*******************************************************************************
             10246    1   *                                                                              *
             10247    1   *        PARAMETERS              PARAMETERS                                       *
             10248    1   *                                                                              *
             10249    1   *******************************************************************************/

       78    10253    1   DCL 1 P_NAME ALIGNED,
       79    10254    1         2 SIZE UBIN HALF UNAL,
       80    10255    1         2 TEXT CHAR(P_NAME.SIZE);
       81    10256         /*
       82    10257            */
       83    10258    1   DCL P_NAME_POINTER UBIN;
       84    10259         /*
       85    10260            */
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:17   
       86    10261        %PAGE (ARG=DEF NAME DATA);

             10274    1   /*******************************************************************************
             10275    1   *                                                                              *
             10276    1   *        DEF NAME DATA              DEF NAME DATA                                 *
             10277    1   *                                                                              *
             10278    1   *******************************************************************************/

       87    10282        %B$DNAME (NAME=B$DNAME,STCLASS="BASED(B_DNAME_CUR$)");
       88    10301        %B_DNAME_POINTERS;
       89    10321        %PLIST;
       90    10322        %PAGE (ARG=REF NAME DATA);

             10335    1   /*******************************************************************************
             10336    1   *                                                                              *
             10337    1   *        REF NAME DATA              REF NAME DATA                                 *
             10338    1   *                                                                              *
             10339    1   *******************************************************************************/

       91    10343        %B$DNAME (NAME=B$RNAME,STCLASS="BASED(B_RNAME_CUR$)");
       92    10362        %B_RNAME_POINTERS;
       93    10382        %PLIST;
       94    10383        %PAGE (ARG=DBG NAME DATA);

             10396    1   /*******************************************************************************
             10397    1   *                                                                              *
             10398    1   *        DBG NAME DATA              DBG NAME DATA                                 *
             10399    1   *                                                                              *
             10400    1   *******************************************************************************/

       95    10404        %B$DNAME (NAME=B$DBGNAME,STCLASS="BASED(B_DBGNAME_CUR$)");
       96    10423        %B_DBGNAME_POINTERS;
       97    10443        %PLIST;
       98    10444        %PAGE (ARG=ENTRY DCLS);

             10457    1   /*******************************************************************************
             10458    1   *                                                                              *
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:18   
             10459    1   *        ENTRY DCLS              ENTRY DCLS                                       *
             10460    1   *                                                                              *
             10461    1   *******************************************************************************/

       99    10465    1   DCL XUO$OUWRITE ENTRY(2);
      100    10466        %PAGE (ARG=LOCAL DATA);

             10479    1   /*******************************************************************************
             10480    1   *                                                                              *
             10481    1   *        LOCAL DATA              LOCAL DATA                                       *
             10482    1   *                                                                              *
             10483    1   *******************************************************************************/

      101    10487    1   DCL NAME_SIZE_TEMP UBIN;
      102    10488        %PAGE (ARG=DEF CODE);

             10501    1   /*******************************************************************************
             10502    1   *                                                                              *
             10503    1   *        DEF CODE              DEF CODE                                           *
             10504    1   *                                                                              *
             10505    1   *******************************************************************************/

      103    10509         /*
      104    10510         The following will check to see if the passed name will fit in the current
      105    10511         record.  If not the current record will be written and the pointer
      106    10512         re-initialized.  Then the text will be moved to the buffer.
      107    10513         */
      108    10514    1       NAME_SIZE_TEMP=SIZEW(P_NAME);

  10514  1 000002   200003 470500                    LDP0    @P_NAME,,AUTO
         1 000003   000000 220100                    LDX0    0,,PR0
         1 000004   000002 621010                    EAX1    2,X0
         1 000005   000000 636011                    EAQ     0,X1
         1 000006   000022 772000                    QRL     18
         1 000007   000011 402007                    MPY     9,DL
         1 000010   000043 036007                    ADLQ    35,DL
         1 000011   000044 506007                    DIV     36,DL
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:19   
         1 000012   200005 756100                    STQ     NAME_SIZE_TEMP,,AUTO

      109    10515    1       IF PINCRW(B_DNAME_CUR$,NAME_SIZE_TEMP)>=B_DNAME_END$ THEN

  10515  1 000013   000022 736000                    QLS     18
         1 000014   000000 036000 xsym               ADLQ    B_DNAME_CUR$
         1 000015   000000 116000 xsym               CMPQ    B_DNAME_END$
         1 000016   000033 602000 1                  TNC     s:10529

      110    10516    2       DO;

      111    10517         /*
      112    10518         Always write a full page of data
      113    10519         */
      114    10520    2           B_DNAME_CUR$=B_DNAME_END$;

  10520  1 000017   000000 236000 xsym               LDQ     B_DNAME_END$
         1 000020   000000 756000 xsym               STQ     B_DNAME_CUR$

      115    10521    2           CALL XUO$OUWRITE(%TYPDNAM);

  10521  1 000021   000000 630400 2                  EPPR0   0
         1 000022   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000023   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000024   000000 011000                    NOP     0

      116    10522    2           B_DNAME_PAGE=B_DNAME_PAGE+1;

  10522  1 000025   000000 054000 xsym               AOS     B_DNAME_PAGE

      117    10523    2           B_DNAME_COUNT=B_DNAME_PAGE*B_DNAME_PAGE_SIZE;

  10523  1 000026   000000 236000 xsym               LDQ     B_DNAME_PAGE
         1 000027   000000 402000 xsym               MPY     B_DNAME_PAGE_SIZE
         1 000030   000000 756000 xsym               STQ     B_DNAME_COUNT

      118    10524    2           B_DNAME_CUR$=B_DNAME_BASE$;
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:20   

  10524  1 000031   000000 236000 xsym               LDQ     B_DNAME_BASE$
         1 000032   000000 756000 xsym               STQ     B_DNAME_CUR$

      119    10525    2           END;

      120    10526         /*
      121    10527         The following section will add the text to the record
      122    10528         */
      123    10529    1       P_NAME_POINTER=B_DNAME_COUNT;

  10529  1 000033   000000 235000 xsym               LDA     B_DNAME_COUNT
         1 000034   200004 470500                    LDP0    @P_NAME_POINTER,,AUTO
         1 000035   000000 755100                    STA     0,,PR0

      124    10530    1       B$DNAME.COUNT=P_NAME.SIZE;

  10530  1 000036   200003 471500                    LDP1    @P_NAME,,AUTO
         1 000037   100000 220100                    LDX0    0,,PR1
         1 000040   000000 473400 xsym               LDP3    B_DNAME_CUR$
         1 000041   300000 740100                    STX0    0,,PR3

      125    10531    1       B$DNAME.TEXT=P_NAME.TEXT;

  10531  1 000042   000000 473400 xsym               LDP3    B_DNAME_CUR$
         1 000043   300000 220100                    LDX0    0,,PR3
         1 000044   100000 221100                    LDX1    0,,PR1
         1 000045   040140 100540                    MLR     fill='040'O
         1 000046   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         1 000047   300000 400010                    ADSC9   0,,PR3                   cn=2,n=*X0

      126    10532    1       B_DNAME_COUNT=B_DNAME_COUNT+NAME_SIZE_TEMP;

  10532  1 000050   000000 236000 xsym               LDQ     B_DNAME_COUNT
         1 000051   200005 036100                    ADLQ    NAME_SIZE_TEMP,,AUTO
         1 000052   000000 756000 xsym               STQ     B_DNAME_COUNT

PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:21   
      127    10533    1       B_DNAME_CUR$=PINCRW(B_DNAME_CUR$,NAME_SIZE_TEMP);

  10533  1 000053   200005 236100                    LDQ     NAME_SIZE_TEMP,,AUTO
         1 000054   000022 736000                    QLS     18
         1 000055   000000 036000 xsym               ADLQ    B_DNAME_CUR$
         1 000056   000000 756000 xsym               STQ     B_DNAME_CUR$

      128    10534    1       RETURN;

  10534  1 000057   000000 702200 xent               TSX2  ! X66_ARET

      129    10535            %PAGE (ARG=REF CODE);

             10548    1   /*******************************************************************************
             10549    1   *                                                                              *
             10550    1   *        REF CODE              REF CODE                                           *
             10551    1   *                                                                              *
             10552    1   *******************************************************************************/

      130    10556        /*D*
      131    10557
      132    10558        XUO$RNAME --Externally Referenced Names Record (Record Type 2)
      133    10559
      134    10560        NAME:  XUO$RNAME
      135    10561
      136    10562        PURPOSE:  To build an entry into the Externally Referenced
      137    10563              Names Record.  (type 2)
      138    10564
      139    10565        DESCRIPTION:  This routine builds an entry in the Externally
      140    10566             Referenced Names Record. (type 2)  The record is the
      141    10567             collection of names pointed to by the following
      142    10568             records:   ENTREF    (type 5)
      143    10569                        SYMREF    (type 7)
      144    10570                        SEGREF    (type 9)
      145    10571
      146    10572        CALL:  CALL XUO$RNAME (Name,
      147    10573                         Name Pointer)
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:22   
      148    10574
      149    10575        INPUT:
      150    10576            Name
      151    10577                .Size           UBIN HALF UNALIGNED
      152    10578                                The number of characters in the name.
      153    10579                .Text           CHAR(Size)
      154    10580                                The character string that is the
      155    10581                                externally referenced name.
      156    10582
      157    10583        OUTPUT:
      158    10584            Name Pointer       UBIN ALIGNED
      159    10585                               The word offset to the entry in the
      160    10586                               Externally Referenced Names record
      161    10587                               locating the added text.
      162    10588
      163    10589        B$OBJECT REFERENCE:  B$RNAME
      164    10590        */
      165    10591        /*B*
      166    10592        GLOBAL DATA:
      167    10593            B_RNAME_CUR$
      168    10594            B_RNAME_COUNT
      169    10595            B_RNAME_PAGE
      170    10596
      171    10597        INTERFACE:
      172    10598            XUO$OUWRITE
      173    10599
      174    10600        */
      175    10601
      176    10602    1   XUO$RNAME: ENTRY (P_NAME,P_NAME_POINTER);

  10602  1 000060   000000 700200 xent  XUO$RNAME    TSX0  ! X66_AUTO_2
         1 000061   000006 000002                    ZERO    6,2

      177    10603         /*
      178    10604         The following will check to see if the passed name will fit in the current
      179    10605         record.  If not the current record will be written and the pointer
      180    10606         re-initialized.  Then the text will be moved to the buffer.
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:23   
      181    10607         */
      182    10608    1       NAME_SIZE_TEMP=SIZEW(P_NAME);

  10608  1 000062   200003 470500                    LDP0    @P_NAME,,AUTO
         1 000063   000000 220100                    LDX0    0,,PR0
         1 000064   000002 621010                    EAX1    2,X0
         1 000065   000000 636011                    EAQ     0,X1
         1 000066   000022 772000                    QRL     18
         1 000067   000011 402007                    MPY     9,DL
         1 000070   000043 036007                    ADLQ    35,DL
         1 000071   000044 506007                    DIV     36,DL
         1 000072   200005 756100                    STQ     NAME_SIZE_TEMP,,AUTO

      183    10609    1       IF PINCRW(B_RNAME_CUR$,NAME_SIZE_TEMP)>=B_RNAME_END$ THEN

  10609  1 000073   000022 736000                    QLS     18
         1 000074   000000 036000 xsym               ADLQ    B_RNAME_CUR$
         1 000075   000000 116000 xsym               CMPQ    B_RNAME_END$
         1 000076   000113 602000 1                  TNC     s:10623

      184    10610    2       DO;

      185    10611         /*
      186    10612         Always write a full page of data
      187    10613         */
      188    10614    2           B_RNAME_CUR$=B_RNAME_END$;

  10614  1 000077   000000 236000 xsym               LDQ     B_RNAME_END$
         1 000100   000000 756000 xsym               STQ     B_RNAME_CUR$

      189    10615    2           CALL XUO$OUWRITE(%TYPRNAM);

  10615  1 000101   000001 630400 2                  EPPR0   1
         1 000102   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000103   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000104   000000 011000                    NOP     0

PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:24   
      190    10616    2           B_RNAME_PAGE=B_RNAME_PAGE+1;

  10616  1 000105   000000 054000 xsym               AOS     B_RNAME_PAGE

      191    10617    2           B_RNAME_COUNT=B_RNAME_PAGE*B_RNAME_PAGE_SIZE;

  10617  1 000106   000000 236000 xsym               LDQ     B_RNAME_PAGE
         1 000107   000000 402000 xsym               MPY     B_RNAME_PAGE_SIZE
         1 000110   000000 756000 xsym               STQ     B_RNAME_COUNT

      192    10618    2           B_RNAME_CUR$=B_RNAME_BASE$;

  10618  1 000111   000000 236000 xsym               LDQ     B_RNAME_BASE$
         1 000112   000000 756000 xsym               STQ     B_RNAME_CUR$

      193    10619    2           END;

      194    10620         /*
      195    10621         The following section will add the text to the record
      196    10622         */
      197    10623    1       P_NAME_POINTER=B_RNAME_COUNT;

  10623  1 000113   000000 235000 xsym               LDA     B_RNAME_COUNT
         1 000114   200004 470500                    LDP0    @P_NAME_POINTER,,AUTO
         1 000115   000000 755100                    STA     0,,PR0

      198    10624    1       B$RNAME.COUNT=P_NAME.SIZE;

  10624  1 000116   200003 471500                    LDP1    @P_NAME,,AUTO
         1 000117   100000 220100                    LDX0    0,,PR1
         1 000120   000000 473400 xsym               LDP3    B_RNAME_CUR$
         1 000121   300000 740100                    STX0    0,,PR3

      199    10625    1       B$RNAME.TEXT=P_NAME.TEXT;

  10625  1 000122   000000 473400 xsym               LDP3    B_RNAME_CUR$
         1 000123   300000 220100                    LDX0    0,,PR3
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:25   
         1 000124   100000 221100                    LDX1    0,,PR1
         1 000125   040140 100540                    MLR     fill='040'O
         1 000126   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         1 000127   300000 400010                    ADSC9   0,,PR3                   cn=2,n=*X0

      200    10626    1       B_RNAME_COUNT=B_RNAME_COUNT+NAME_SIZE_TEMP;

  10626  1 000130   000000 236000 xsym               LDQ     B_RNAME_COUNT
         1 000131   200005 036100                    ADLQ    NAME_SIZE_TEMP,,AUTO
         1 000132   000000 756000 xsym               STQ     B_RNAME_COUNT

      201    10627    1       B_RNAME_CUR$=PINCRW(B_RNAME_CUR$,NAME_SIZE_TEMP);

  10627  1 000133   200005 236100                    LDQ     NAME_SIZE_TEMP,,AUTO
         1 000134   000022 736000                    QLS     18
         1 000135   000000 036000 xsym               ADLQ    B_RNAME_CUR$
         1 000136   000000 756000 xsym               STQ     B_RNAME_CUR$

      202    10628    1       RETURN;

  10628  1 000137   000000 702200 xent               TSX2  ! X66_ARET

      203    10629            %PAGE (ARG=REF CODE);

             10642    1   /*******************************************************************************
             10643    1   *                                                                              *
             10644    1   *        REF CODE              REF CODE                                           *
             10645    1   *                                                                              *
             10646    1   *******************************************************************************/

      204    10650        /*D*
      205    10651
      206    10652        XUO$DBGNAME --Procedure Names Debug Record (Record Type 15)
      207    10653
      208    10654        NAME:  XUO$DBGNAME
      209    10655
      210    10656        PURPOSE:  To build an entry in the Procedure Names Debug
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:26   
      211    10657            Record (Record Type 15).
      212    10658
      213    10659        DESCRIPTION:  This routine builds entries in the Procedure
      214    10660             Names Debug Record.  This record contains all debug
      215    10661             names; that is, all procedure names, entry names,
      216    10662             statement labels, and variable names.
      217    10663
      218    10664        CALL:  CALL XUO$DBGNAME (Name,
      219    10665                          Name Pointer)
      220    10666
      221    10667        INPUT:
      222    10668            Name
      223    10669                .Size           UBIN HALF UNALIGNED
      224    10670                                The number of characters in the name.
      225    10671                .Text           CHAR(Size)
      226    10672                                The character string that is the
      227    10673                                name.
      228    10674
      229    10675        OUTPUT:
      230    10676            Name Pointer       UBIN ALIGNED
      231    10677                               The word offset to the entry in the
      232    10678                               Procedure Names Debug record
      233    10679                               locating the added text.
      234    10680
      235    10681        B$OBJECT REFERENCE:  B$DNAME
      236    10682        */
      237    10683        /*B*
      238    10684        GLOBAL DATA:
      239    10685            B_DBGNAME_CUR$
      240    10686            B_DBGNAME_COUNT
      241    10687            B_DBGNAME_PAGE
      242    10688
      243    10689        INTERFACE:
      244    10690            XUO$OUWRITE
      245    10691
      246    10692        */
      247    10693
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:27   
      248    10694    1   XUO$DBGNAME: ENTRY (P_NAME,P_NAME_POINTER);

  10694  1 000140   000000 700200 xent  XUO$DBGNAME  TSX0  ! X66_AUTO_2
         1 000141   000006 000002                    ZERO    6,2

      249    10695         /*
      250    10696         The following will check to see if the passed name will fit in the current
      251    10697         record.  If not the current record will be written and the pointer
      252    10698         re-initialized.  Then the text will be moved to the buffer.
      253    10699         */
      254    10700    1       NAME_SIZE_TEMP=SIZEW(P_NAME);

  10700  1 000142   200003 470500                    LDP0    @P_NAME,,AUTO
         1 000143   000000 220100                    LDX0    0,,PR0
         1 000144   000002 621010                    EAX1    2,X0
         1 000145   000000 636011                    EAQ     0,X1
         1 000146   000022 772000                    QRL     18
         1 000147   000011 402007                    MPY     9,DL
         1 000150   000043 036007                    ADLQ    35,DL
         1 000151   000044 506007                    DIV     36,DL
         1 000152   200005 756100                    STQ     NAME_SIZE_TEMP,,AUTO

      255    10701    1       IF PINCRW(B_DBGNAME_CUR$,NAME_SIZE_TEMP)>=B_DBGNAME_END$ THEN

  10701  1 000153   000022 736000                    QLS     18
         1 000154   000000 036000 xsym               ADLQ    B_DBGNAME_CUR$
         1 000155   000000 116000 xsym               CMPQ    B_DBGNAME_END$
         1 000156   000173 602000 1                  TNC     s:10715

      256    10702    2       DO;

      257    10703         /*
      258    10704         Always write a full page of data
      259    10705         */
      260    10706    2           B_DBGNAME_CUR$=B_DBGNAME_END$;

  10706  1 000157   000000 236000 xsym               LDQ     B_DBGNAME_END$
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:28   
         1 000160   000000 756000 xsym               STQ     B_DBGNAME_CUR$

      261    10707    2           CALL XUO$OUWRITE(%TYPDBGNAM);

  10707  1 000161   000003 630400 2                  EPPR0   3
         1 000162   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000163   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000164   000000 011000                    NOP     0

      262    10708    2           B_DBGNAME_PAGE=B_DBGNAME_PAGE+1;

  10708  1 000165   000000 054000 xsym               AOS     B_DBGNAME_PAGE

      263    10709    2           B_DBGNAME_COUNT=B_DBGNAME_PAGE*B_DBGNAME_PAGE_SIZE;

  10709  1 000166   000000 236000 xsym               LDQ     B_DBGNAME_PAGE
         1 000167   000000 402000 xsym               MPY     B_DBGNAME_PAGE_SIZE
         1 000170   000000 756000 xsym               STQ     B_DBGNAME_COUNT

      264    10710    2           B_DBGNAME_CUR$=B_DBGNAME_BASE$;

  10710  1 000171   000000 236000 xsym               LDQ     B_DBGNAME_BASE$
         1 000172   000000 756000 xsym               STQ     B_DBGNAME_CUR$

      265    10711    2           END;

      266    10712         /*
      267    10713         The following section will add the text to the record
      268    10714         */
      269    10715    1       P_NAME_POINTER=B_DBGNAME_COUNT;

  10715  1 000173   000000 235000 xsym               LDA     B_DBGNAME_COUNT
         1 000174   200004 470500                    LDP0    @P_NAME_POINTER,,AUTO
         1 000175   000000 755100                    STA     0,,PR0

      270    10716    1       B$DBGNAME.COUNT=P_NAME.SIZE;

PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:29   
  10716  1 000176   200003 471500                    LDP1    @P_NAME,,AUTO
         1 000177   100000 220100                    LDX0    0,,PR1
         1 000200   000000 473400 xsym               LDP3    B_DBGNAME_CUR$
         1 000201   300000 740100                    STX0    0,,PR3

      271    10717    1       B$DBGNAME.TEXT=P_NAME.TEXT;

  10717  1 000202   000000 473400 xsym               LDP3    B_DBGNAME_CUR$
         1 000203   300000 220100                    LDX0    0,,PR3
         1 000204   100000 221100                    LDX1    0,,PR1
         1 000205   040140 100540                    MLR     fill='040'O
         1 000206   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         1 000207   300000 400010                    ADSC9   0,,PR3                   cn=2,n=*X0

      272    10718    1       B_DBGNAME_COUNT=B_DBGNAME_COUNT+NAME_SIZE_TEMP;

  10718  1 000210   000000 236000 xsym               LDQ     B_DBGNAME_COUNT
         1 000211   200005 036100                    ADLQ    NAME_SIZE_TEMP,,AUTO
         1 000212   000000 756000 xsym               STQ     B_DBGNAME_COUNT

      273    10719    1       B_DBGNAME_CUR$=PINCRW(B_DBGNAME_CUR$,NAME_SIZE_TEMP);

  10719  1 000213   200005 236100                    LDQ     NAME_SIZE_TEMP,,AUTO
         1 000214   000022 736000                    QLS     18
         1 000215   000000 036000 xsym               ADLQ    B_DBGNAME_CUR$
         1 000216   000000 756000 xsym               STQ     B_DBGNAME_CUR$

      274    10720    1       RETURN;

  10720  1 000217   000000 702200 xent               TSX2  ! X66_ARET
      275    10721    1   END XUO$DNAME;
      276    10722        %EOD;

PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:30   
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$DNAME.
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:31   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @P_NAME                    4-0-0/w PTR         r     1 @P_NAME_POINTER
     5-0-0/w UBIN        r     1 NAME_SIZE_TEMP            *0-0-0/w ASTR(18)    r     1 P_NAME
    *0-0-0/w UBIN        r     1 P_NAME_POINTER

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_DBGNAME_BASE$            0-0-0/w SBIN        r     1 B_DBGNAME_COUNT
     0-0-0/w PTR         r     1 B_DBGNAME_CUR$             0-0-0/w PTR         r     1 B_DBGNAME_END$
     0-0-0/w SBIN        r     1 B_DBGNAME_PAGE             0-0-0/w UBIN        r     1 B_DBGNAME_PAGE_SIZE
     0-0-0/w PTR         r     1 B_DNAME_BASE$              0-0-0/w SBIN        r     1 B_DNAME_COUNT
     0-0-0/w PTR         r     1 B_DNAME_CUR$               0-0-0/w PTR         r     1 B_DNAME_END$
     0-0-0/w SBIN        r     1 B_DNAME_PAGE               0-0-0/w UBIN        r     1 B_DNAME_PAGE_SIZE
     0-0-0/w PTR         r     1 B_RNAME_BASE$              0-0-0/w SBIN        r     1 B_RNAME_COUNT
     0-0-0/w PTR         r     1 B_RNAME_CUR$               0-0-0/w PTR         r     1 B_RNAME_END$
     0-0-0/w SBIN        r     1 B_RNAME_PAGE               0-0-0/w UBIN        r     1 B_RNAME_PAGE_SIZE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(18)    r     1 B$DBGNAME                  0-0-0/w ASTR(18)    r     1 B$DNAME
     0-0-0/w ASTR(18)    r     1 B$RNAME


   Procedure XUO$DNAME requires 144 words for executable code.
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:32   
   Procedure XUO$DNAME requires 6 words of local(AUTO) storage.
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:33   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:34   
          MINI XREF LISTING

B$DBGNAME.COUNT
     10413**DCL     10420--IMP-SIZ 10716<<ASSIGN  10717>>ASSIGN
B$DBGNAME.TEXT
     10420**DCL     10717<<ASSIGN
B$DNAME.COUNT
     10291**DCL     10298--IMP-SIZ 10530<<ASSIGN  10531>>ASSIGN
B$DNAME.TEXT
     10298**DCL     10531<<ASSIGN
B$RNAME.COUNT
     10352**DCL     10359--IMP-SIZ 10624<<ASSIGN  10625>>ASSIGN
B$RNAME.TEXT
     10359**DCL     10625<<ASSIGN
B_DBGNAME_BASE$
     10435**DCL     10710>>ASSIGN
B_DBGNAME_COUNT
     10438**DCL     10709<<ASSIGN  10715>>ASSIGN  10718<<ASSIGN  10718>>ASSIGN
B_DBGNAME_CUR$
     10436**DCL     10412--IMP-PTR 10701>>IF      10706<<ASSIGN  10710<<ASSIGN  10716>>ASSIGN  10717>>ASSIGN
     10717>>ASSIGN  10719<<ASSIGN  10719>>ASSIGN
B_DBGNAME_END$
     10437**DCL     10701>>IF      10706>>ASSIGN
B_DBGNAME_PAGE
     10439**DCL     10708<<ASSIGN  10708>>ASSIGN  10709>>ASSIGN
B_DBGNAME_PAGE_SIZE
     10441**DCL     10709>>ASSIGN
B_DNAME_BASE$
     10313**DCL     10524>>ASSIGN
B_DNAME_COUNT
     10316**DCL     10523<<ASSIGN  10529>>ASSIGN  10532<<ASSIGN  10532>>ASSIGN
B_DNAME_CUR$
     10314**DCL     10290--IMP-PTR 10515>>IF      10520<<ASSIGN  10524<<ASSIGN  10530>>ASSIGN  10531>>ASSIGN
     10531>>ASSIGN  10533<<ASSIGN  10533>>ASSIGN
PL6.E3A0      #001=XUO$DNAME File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:23 Page:35   
B_DNAME_END$
     10315**DCL     10515>>IF      10520>>ASSIGN
B_DNAME_PAGE
     10317**DCL     10522<<ASSIGN  10522>>ASSIGN  10523>>ASSIGN
B_DNAME_PAGE_SIZE
     10319**DCL     10523>>ASSIGN
B_RNAME_BASE$
     10374**DCL     10618>>ASSIGN
B_RNAME_COUNT
     10377**DCL     10617<<ASSIGN  10623>>ASSIGN  10626<<ASSIGN  10626>>ASSIGN
B_RNAME_CUR$
     10375**DCL     10351--IMP-PTR 10609>>IF      10614<<ASSIGN  10618<<ASSIGN  10624>>ASSIGN  10625>>ASSIGN
     10625>>ASSIGN  10627<<ASSIGN  10627>>ASSIGN
B_RNAME_END$
     10376**DCL     10609>>IF      10614>>ASSIGN
B_RNAME_PAGE
     10378**DCL     10616<<ASSIGN  10616>>ASSIGN  10617>>ASSIGN
B_RNAME_PAGE_SIZE
     10380**DCL     10617>>ASSIGN
NAME_SIZE_TEMP
     10487**DCL     10514<<ASSIGN  10515>>IF      10532>>ASSIGN  10533>>ASSIGN  10608<<ASSIGN  10609>>IF
     10626>>ASSIGN  10627>>ASSIGN  10700<<ASSIGN  10701>>IF      10718>>ASSIGN  10719>>ASSIGN
P_NAME
     10253**DCL        67--PROC    10514--ASSIGN  10602--ENTRY   10608--ASSIGN  10694--ENTRY   10700--ASSIGN
P_NAME.SIZE
     10254**DCL     10255--IMP-SIZ 10514>>ASSIGN  10530>>ASSIGN  10531>>ASSIGN  10608>>ASSIGN  10624>>ASSIGN
     10625>>ASSIGN  10700>>ASSIGN  10716>>ASSIGN  10717>>ASSIGN
P_NAME.TEXT
     10255**DCL     10531>>ASSIGN  10625>>ASSIGN  10717>>ASSIGN
P_NAME_POINTER
     10258**DCL        67--PROC    10529<<ASSIGN  10602--ENTRY   10623<<ASSIGN  10694--ENTRY   10715<<ASSIGN
XUO$OUWRITE
     10465**DCL-ENT 10521--CALL    10615--CALL    10707--CALL

PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:36   
      277        1        /*M*     XUO$SECTBUILD -- THIS MODULE WILL ADD ENTRY TO SECTION TABLE */
      278        2        /*T***********************************************************/
      279        3        /*T*                                                         */
      280        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      281        5        /*T*                                                         */
      282        6        /*T***********************************************************/
      283        7        /*P*     NAME:     XUO$SECTBUILD
      284        8                 PURPOSE:  THIS MODULE WILL BUILD ENTRIES IN THE SECTION
      285        9                      RECORD.
      286       10                 DESCRIPTION:   THIS MODUE HAS THREE ENTRY POINTS THAT ARE CALLED WHICH ARE:
      287       11                      1.   XUO$SECTBUILD
      288       12                      2.   XUO$SECTSIZE
      289       13                      3.   XUO$SECTNAME
      290       14        */
      291       15        /*P*
      292       16
      293       17        NAME:  XUO$SECTBUILD
      294       18               XUO$SECTBUILD --Section Record (Record Type 3)
      295       19
      296       20        PURPOSE:  To build an entry in the Section Record.
      297       21
      298       22        DESCRIPTION:  This routine builds a new entry in the
      299       23            Section Record and returns the number of the section.
      300       24            This routine will altreturn if a new section cannot be
      301       25            allocated.  There is one record per object unit
      302       26            which defines the size and type of sections.  The
      303       27            section record contains one entry per section within
      304       28            the object unit.
      305       29
      306       30        */
      307       31        /*D*
      308       32
      309       33        CALL:  CALL XUO$SECTBUILD (Section Type,
      310       34                            Name Pointer,
      311       35                            Section Number,
      312       36                            Init,
      313       37                            Bound,
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:37   
      314       38                            Segment Name Pointer)
      315       39
      316       40        INPUT:
      317       41            Section Type        UBIN ALIGNED
      318       42                                The code specifying the type of
      319       43                                section.
      320       44                                  0 - Data control section with
      321       45                                      write access
      322       46                                  1 - Procedure control section
      323       47                                  2 - Unlabeled common section
      324       48                                      The name pointer must be zero.
      325       49                                  3 - Labeled common section with
      326       50                                      mandatory name pointer.  This
      327       51                                      is for labeled common which
      328       52                                      must be in the root.
      329       53                                  4 - Labeled common section with
      330       54                                      mandatory name pointer.  This
      331       55                                      is for labeled common which
      332       56                                      need not be in the root.
      333       57                                  5 - DCB, word 1 is name pointer.
      334       58                                  6 - Data control section with read
      335       59                                      only access.  Word 1 = 0 or
      336       60                                      name pointer.
      337       61            Name Pointer        SBIN ALIGNED
      338       62                                Word offset into the Externally
      339       63                                Defined Names record (Type 1)
      340       64                                locating the name of this
      341       65                                control section.  If the field is
      342       66                                negative, the section has no name.
      343       67            Init                BIT(3) UNALIGNED where
      344       68                .Zero           BIT(1) UNALIGNED
      345       69                                Initialize with zero.
      346       70                .UTS            BIT(1) UNALIGNED
      347       71                                Initialize with UTS.
      348       72                .Segment        BIT(1) UNALIGNED
      349       73                                Indicates that this section is
      350       74                                to be placed in the segment specified
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:38   
      351       75                                by Segment Name Pointer.
      352       76            Bound               UBIN ALIGNED
      353       77                                Represents the bound field of the
      354       78                                section.  This is optional and if
      355       79                                not specified will default to even
      356       80                                boundary.
      357       81                                  00 - starts on even word
      358       82                                  01 - starts on odd word
      359       83                                  10 - starts on multiple of 8
      360       84                                  11 - starts on page boundary
      361       85            Segment Name Pointer SBIN
      362       86                                Word offset into the Externally
      363       87                                Defined Names record (type 1).  The
      364       88                                name defined must match one of the
      365       89                                legal names recognized by the linker.
      366       90                                If Segment Name Pointer is not
      367       91                                specified, the linker will allocate
      368       92                                the control section in the 'default
      369       93                                data segment'.
      370       94        OUTPUT:
      371       95            Section Number      UBIN ALIGNED
      372       96                                The number of the newly created
      373       97                                section entry in the Section Record
      374       98
      375       99        B$OBJECT REFERENCE:  B$SECTION
      376      100        */
      377      101        /*B*
      378      102        GLOBAL DATA:
      379      103             B_SECTION_COUNT
      380      104             B_SECTION_CUR$
      381      105
      382      106        INTERFACE:  none
      383      107
      384      108        */
      385      109
      386      110        XUO$SECTBUILD: PROC(P_PARAM1,P_PARAM2,P_PARAM3,P_INIT_UTS_SEGMENT_ZERO,P_BOUND,
               110            P_SEG_NPOINTER) ALTRET;
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:39   
      387      111         /*
      388      112            */
      389      113        %INCLUDE ZVA_SYSTEM_FILE;
      390     6364        %PAGE (ARG=INCLUDES);

              6377    1   /*******************************************************************************
              6378    1   *                                                                              *
              6379    1   *        INCLUDES              INCLUDES                                            *
              6380    1   *                                                                              *
              6381    1   *******************************************************************************/

      391     6385        %INCLUDE B$OBJECT_C;
      392     9815        %INCLUDE XUO$OBJ_C;
      393    10225        %INCLUDE XU_PERR_C;
      394    10416        %PAGE(ARG=SUBS);

             10429    1   /*******************************************************************************
             10430    1   *                                                                              *
             10431    1   *        SUBS              SUBS                                                  *
             10432    1   *                                                                              *
             10433    1   *******************************************************************************/

      395    10437        %B$SECTIONSUBS;
      396    10452        %PAGE (ARG=PARAMETERS);

             10465    1   /*******************************************************************************
             10466    1   *                                                                              *
             10467    1   *        PARAMETERS              PARAMETERS                                        *
             10468    1   *                                                                              *
             10469    1   *******************************************************************************/

      397    10473    1   DCL P_PARAM1 UBIN;
      398    10474         /*
      399    10475         The following defintion is for sectbuild
      400    10476            */
      401    10477    1   DCL P_SECTION_TYPE REDEF P_PARAM1 UBIN;
      402    10478         /*
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:40   
      403    10479         The following defintion is for sectname/sectsize
      404    10480         */
      405    10481    1   DCL P_SECTION_NUMBER_IN REDEF P_PARAM1 UBIN;
      406    10482         /*
      407    10483            */
      408    10484    1   DCL P_PARAM2 UBIN;
      409    10485         /*
      410    10486         The following defintion is for sectbuild/sectname
      411    10487         */
      412    10488    1   DCL P_NAME_POINTER REDEF P_PARAM2 SBIN;
      413    10489         /*
      414    10490         The following definition is for sectsize
      415    10491            */
      416    10492    1   DCL P_SECTION_SIZE REDEF P_PARAM2 UBIN;
      417    10493         /*
      418    10494            */
      419    10495    1   DCL P_PARAM3 UBIN;
      420    10496         /*
      421    10497         The following defintion is for sectbuild
      422    10498            */
      423    10499    1   DCL P_SECTION_NUMBER_OUT REDEF P_PARAM3 UBIN;
      424    10500         /*
      425    10501         The following definition is for sectbuild
      426    10502         */
      427    10503    1   DCL 1 P_INIT_UTS_SEGMENT_ZERO UNAL PARAM,
      428    10504    1         2 ZERO BIT(1),
      429    10505    1         2 UTS BIT(1),
      430    10506    1         2 SEGMENT BIT(1);
      431    10507         /*
      432    10508         The following definition is for sectbuild
      433    10509         */
      434    10510    1   DCL P_BOUND UBIN;
      435    10511         /*
      436    10512         The following definition is for sectbuild
      437    10513         */
      438    10514    1   DCL P_SEG_NPOINTER SBIN;
      439    10515        %PAGE (ARG=SECTION DATA);
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:41   

             10528    1   /*******************************************************************************
             10529    1   *                                                                              *
             10530    1   *        SECTION DATA              SECTION DATA                                    *
             10531    1   *                                                                              *
             10532    1   *******************************************************************************/

      440    10536        %B$SECTION (STCLASS="BASED(B_SECTION_CUR$)");
      441    10595        %B_SECTION_POINTERS;
      442    10614        %PLIST;
      443    10615        %PAGE (ARG=LOCAL);

             10628    1   /*******************************************************************************
             10629    1   *                                                                              *
             10630    1   *        LOCAL              LOCAL                                                  *
             10631    1   *                                                                              *
             10632    1   *******************************************************************************/

      444    10636    1   DCL SECTION_TEMP$ PTR;
      445    10637
      446    10638        %IF CP6;
      447    10639        %VLP_ERRCODE (FPTN=SECTION_TOO_BIG,
      448    10640         STCLASS=CONSTANT,
      449    10641         FCG=XU, MID=O, ERR#=%E$XUO#SECT_GE_256K, SEV=4);
      450    10686        %VLP_ERRCODE (FPTN=SECT_RECORD_FULL, STCLASS=CONSTANT,
      451    10687         FCG=XU,MID=O,ERR#=%E$XUO#SECT_RECORD_FULL, SEV=4);
      452    10732        %VLP_ERRCODE (FPTN=GT_512_SECTIONS, STCLASS=CONSTANT,
      453    10733         FCG=XU,MID=O,ERR#=%E$XUO#GT_512_SECTIONS, SEV=4);
      454    10778        %ENDIF;
      455    10779         /*
      456    10780            */
      457    10781        %PAGE (ARG=MISC);

             10794    1   /*******************************************************************************
             10795    1   *                                                                              *
             10796    1   *        MISC              MISC                                                  *
             10797    1   *                                                                              *
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:42   
             10798    1   *******************************************************************************/

      458    10802    1   DCL XUO_ERROR_ROUTINE EPTR SYMREF;
      459    10803
      460    10804
      461    10805        %PAGE (ARG=SECTION BUILD);

             10818    1   /*******************************************************************************
             10819    1   *                                                                              *
             10820    1   *        SECTION BUILD              SECTION BUILD                                  *
             10821    1   *                                                                              *
             10822    1   *******************************************************************************/

      462    10826         /*
      463    10827         The following section will build a section entry
      464    10828         */
      465    10829    1       IF B_SECTION_CUR$<B_SECTION_END$ THEN
      466    10830    2       DO;
      467    10831    2           B$SECTION.TYPE=P_SECTION_TYPE;
      468    10832    2           IF ADDR(P_INIT_UTS_SEGMENT_ZERO)~=ADDR(NIL) THEN
      469    10833    3           DO;
      470    10834    3               B$SECTION.INITZERO=P_INIT_UTS_SEGMENT_ZERO.ZERO;
      471    10835    3               B$SECTION.INITUTS=P_INIT_UTS_SEGMENT_ZERO.UTS;
      472    10836    3               B$SECTION.SEGMENT=P_INIT_UTS_SEGMENT_ZERO.SEGMENT;
      473    10837    3               END;
      474    10838    2           IF ADDR(P_BOUND)~=ADDR(NIL) THEN
      475    10839    2               B$SECTION.BOUND=P_BOUND;
      476    10840    2           IF ADDR(P_SEG_NPOINTER)~=ADDR(NIL) THEN
      477    10841    2               B$SECTION.SEG_NPOINTER=P_SEG_NPOINTER;
      478    10842    2           B$SECTION.NPOINTER=P_NAME_POINTER;
      479    10843    2           B_SECTION_COUNT=B_SECTION_COUNT+1;
      480    10844    2           P_SECTION_NUMBER_OUT=B_SECTION_COUNT;
      481    10845    2           B_SECTION_CUR$=PINCRW(B_SECTION_CUR$,SIZEW(B$SECTION));
      482    10846    2           RETURN;
      483    10847    2           END;
      484    10848    2       ELSE DO;
      485    10849         /*
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:43   
      486    10850         We cannot allocate any more sections--therefore give an altreturn.
      487    10851         */
      488    10852        %IF CP6;
      489    10853    2           IF XUO_ERROR_ROUTINE ~= ENTADDR(NIL)
      490    10854    2           THEN
      491    10855    2               IF B_SECTION_COUNT = 512
      492    10856    2               THEN
      493    10857    2                   CALL XUO_ERROR_ROUTINE (GT_512_SECTIONS);
      494    10858    2               ELSE
      495    10859    2                   CALL XUO_ERROR_ROUTINE (SECT_RECORD_FULL);
      496    10860
      497    10861        /*E*  ERROR:   XUO-E$XUO#GT_512_SECTIONS
      498    10862              MESSAGE:A fatal error has occurred while building an object unit.  An
      499    10863                      attempt has been made to create an object unit with more than 512
      500    10864                      control sections.  This exceeds the design capacity of CP-6
      501    10865                      object unit files.
      502    10866        */
      503    10867
      504    10868        /*E*  ERROR:   XUO-E$XUO#SECT_RECORD_FULL
      505    10869              MESSAGE:A fatal error has occurred while building an object unit.  The
      506    10870                      control-section record has overflowed, due to an attempt to
      507    10871                      build more control sections than were specified when the
      508    10872                      XUO$BUFINIT routine was called (or, if XUO$BUFINIT was not called,
      509    10873                      the default limit of 10 control sections).
      510    10874        */
      511    10875
      512    10876        %ENDIF;
      513    10877    2           ALTRETURN;
      514    10878    2           END;
      515    10879
      516    10880        %PAGE (ARG=Section build);

             10893    2   /*******************************************************************************
             10894    2   *                                                                              *
             10895    2   *        Section build              Section build                                  *
             10896    2   *                                                                              *
             10897    2   *******************************************************************************/
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:44   

      517    10901        /*D*  NAME:    XUO$SECTNAME
      518    10902
      519    10903                                 PURPOSE:  This routine enters the section name pointer
      520    10904                                 into a previously created section record entry.
      521    10905
      522    10906                            DESCRIPTION:  This routine enters the section name pointer
      523    10907                            into the previously created section record entry.  If
      524    10908                            an invalid section number is passed in, this routine
      525    10909                            will altreturn.
      526    10910
      527    10911                            CALL:  Call XUO$SECTNAME (section number,
      528    10912                            name pointer)
      529    10913                            altreturn (label)
      530    10914
      531    10915                            INPUT:
      532    10916                            Section number      ubin aligned
      533    10917                            the number of the section record entry
      534    10918                            that is to be modified.
      535    10919                            Name pointer        sbin aligned
      536    10920                            word displacement into the externally
      537    10921                            defined names record (type 1) locating
      538    10922                            the name of this section.  If the field
      539    10923                            is negative, the section has no name.
      540    10924
      541    10925                            OUTPUT:
      542    10926                            updated entry in the section record
      543    10927
      544    10928                            global DATA:  none
      545    10929
      546    10930                            B$OBJECT REFERENCE:  B$SECTION
      547    10931                            */
      548    10932        /*B*
      549    10933        INTERFACE:
      550    10934             XUO$ERROR_ROUTINE
      551    10935
      552    10936        */
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:45   
      553    10937
      554    10938    1   XUO$SECTNAME: ENTRY(P_PARAM1,P_PARAM2) ALTRET;
      555    10939         /*
      556    10940         This section will add the name pointer to the appropriate section
      557    10941         */
      558    10942    1       SECTION_TEMP$=PINCRW(B_SECTION_BASE$,P_SECTION_NUMBER_IN*SIZEW(B$SECTION));
      559    10943    1       IF SECTION_TEMP$<B_SECTION_CUR$ THEN
      560    10944    2       DO;
      561    10945    2           SECTION_TEMP$->B$SECTION.NPOINTER=P_NAME_POINTER;
      562    10946    2           RETURN;
      563    10947    2           END;
      564    10948    1       ELSE
      565    10949         /*
      566    10950         Give altreturn on invalid section number
      567    10951            */
      568    10952    1           ALTRETURN;
      569    10953        %PAGE (arg= section size add );

             10966    1   /*******************************************************************************
             10967    1   *                                                                              *
             10968    1   *        section size add              section size add                            *
             10969    1   *                                                                              *
             10970    1   *******************************************************************************/

      570    10974        /*D*
      571    10975
      572    10976        XUO$SECTSIZE --section record (record type 3)
      573    10977
      574    10978        NAME:  XUO$SECTSIZE
      575    10979
      576    10980        PURPOSE:  To enter the section size into a previously created
      577    10981                  entry in the section record.
      578    10982
      579    10983        DESCRIPTION:  This routine is used to enter the size of a
      580    10984                      section into a previously created entry in the section
      581    10985                      record.  This routine will altreturn if an invalid
      582    10986                      section number is passed.
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:46   
      583    10987
      584    10988        CALL:  Call XUO$SECTSIZE (section number,
      585    10989                                  section size)
      586    10990                   altreturn (label)
      587    10991
      588    10992        INPUT:
      589    10993              Section number      ubin aligned
      590    10994                       the number of the section record entry
      591    10995                       that is to be modified.
      592    10996              Section size        ubin aligned
      593    10997                       the size in words of the section.
      594    10998
      595    10999        OUTPUT:
      596    11000              updated section record entry
      597    11001
      598    11002        B$OBJECT REFERENCE:  B$SECTION
      599    11003        */
      600    11004        /*B*
      601    11005        GLOBAL DATA:  none
      602    11006
      603    11007        INTERFACE:  none
      604    11008
      605    11009
      606    11010        */
      607    11011    1   XUO$SECTSIZE: ENTRY(P_PARAM1,P_PARAM2) ALTRET;
      608    11012         /*
      609    11013         This section will add the passed size to the appropriate section
      610    11014         */
      611    11015    1       SECTION_TEMP$=PINCRW(B_SECTION_BASE$,P_SECTION_NUMBER_IN*SIZEW(B$SECTION));
      612    11016    1       IF SECTION_TEMP$<B_SECTION_CUR$ THEN
      613    11017    2       DO;
      614    11018    2           IF P_SECTION_SIZE > 262143 /* 256k - 1 */
      615    11019    2           THEN
      616    11020         %IF CP6;
      617    11021    2               IF XUO_ERROR_ROUTINE = ENTADDR(NIL)
      618    11022    2               THEN
      619    11023    2                   ALTRETURN;
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:47   
      620    11024    2               ELSE
      621    11025    2                   CALL XUO_ERROR_ROUTINE (SECTION_TOO_BIG);
      622    11026        %ELSE;
      623    11027 C              ALTRETURN;
      624    11028        %ENDIF;
      625    11029        /*E*  ERROR:   XUO-E$XUO#SECT_GE_256K
      626    11030              MESSAGE: You tried to build a control section of more than 262143 words.
      627    11031        */
      628    11032    2           SECTION_TEMP$->B$SECTION.SIZE=P_SECTION_SIZE;
      629    11033    2           RETURN;
      630    11034    2           END;
      631    11035    1       ELSE
      632    11036         /*
      633    11037         Give altreturn on invalid section number
      634    11038            */
      635    11039    1           ALTRETURN;
      636    11040         /*
      637    11041            */
      638    11042    1   END XUO$SECTBUILD;
      639    11043        %EOD;

PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:48   
--  Include file information  --

   XU_PERR_C.:E05TOU  is referenced.
   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$SECTBUILD.

   Procedure XUO$SECTBUILD requires 118 words for executable code.
   Procedure XUO$SECTBUILD requires 10 words of local(AUTO) storage.

PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:49   

 Object Unit name= XUO$SECTBUILD                              File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:24:06.40 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      3      3  XUO$SECTBUILD
    2   Proc  even  none   118    166  XUO$SECTBUILD
    3  RoData even  none     3      3  XUO$SECTBUILD

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        6  XUO$SECTBUILD
     2    111          yes     yes      Std        2  XUO$SECTNAME
     2    131          yes     yes      Std        2  XUO$SECTSIZE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:50   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_SECTION_BASE$                       B_SECTION_CUR$
     B_SECTION_END$                        B_SECTION_COUNT                       XUO_ERROR_ROUTINE
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:51   


      277        1        /*M*     XUO$SECTBUILD -- THIS MODULE WILL ADD ENTRY TO SECTION TABLE */
      278        2        /*T***********************************************************/
      279        3        /*T*                                                         */
      280        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      281        5        /*T*                                                         */
      282        6        /*T***********************************************************/
      283        7        /*P*     NAME:     XUO$SECTBUILD
      284        8                 PURPOSE:  THIS MODULE WILL BUILD ENTRIES IN THE SECTION
      285        9                      RECORD.
      286       10                 DESCRIPTION:  THIS MODUE HAS THREE ENTRY POINTS THAT ARE CALLED WHICH ARE:
      287       11                      1.   XUO$SECTBUILD
      288       12                      2.   XUO$SECTSIZE
      289       13                      3.   XUO$SECTNAME
      290       14        */
      291       15        /*P*
      292       16
      293       17        NAME:  XUO$SECTBUILD
      294       18               XUO$SECTBUILD --Section Record (Record Type 3)
      295       19
      296       20        PURPOSE:  To build an entry in the Section Record.
      297       21
      298       22        DESCRIPTION:  This routine builds a new entry in the
      299       23            Section Record and returns the number of the section.
      300       24            This routine will altreturn if a new section cannot be
      301       25            allocated.  There is one record per object unit
      302       26            which defines the size and type of sections.  The
      303       27            section record contains one entry per section within
      304       28            the object unit.
      305       29
      306       30        */
      307       31        /*D*
      308       32
      309       33        CALL:  CALL XUO$SECTBUILD (Section Type,
      310       34                            Name Pointer,
      311       35                            Section Number,
      312       36                            Init,
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:52   
      313       37                            Bound,
      314       38                            Segment Name Pointer)
      315       39
      316       40        INPUT:
      317       41            Section Type        UBIN ALIGNED
      318       42                                The code specifying the type of
      319       43                                section.
      320       44                                  0 - Data control section with
      321       45                                      write access
      322       46                                  1 - Procedure control section
      323       47                                  2 - Unlabeled common section
      324       48                                      The name pointer must be zero.
      325       49                                  3 - Labeled common section with
      326       50                                      mandatory name pointer.  This
      327       51                                      is for labeled common which
      328       52                                      must be in the root.
      329       53                                  4 - Labeled common section with
      330       54                                      mandatory name pointer.  This
      331       55                                      is for labeled common which
      332       56                                      need not be in the root.
      333       57                                  5 - DCB, word 1 is name pointer.
      334       58                                  6 - Data control section with read
      335       59                                      only access.  Word 1 = 0 or
      336       60                                      name pointer.
      337       61            Name Pointer        SBIN ALIGNED
      338       62                                Word offset into the Externally
      339       63                                Defined Names record (Type 1)
      340       64                                locating the name of this
      341       65                                control section.  If the field is
      342       66                                negative, the section has no name.
      343       67            Init                BIT(3) UNALIGNED where
      344       68                .Zero           BIT(1) UNALIGNED
      345       69                                Initialize with zero.
      346       70                .UTS            BIT(1) UNALIGNED
      347       71                                Initialize with UTS.
      348       72                .Segment        BIT(1) UNALIGNED
      349       73                                Indicates that this section is
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:53   
      350       74                                to be placed in the segment specified
      351       75                                by Segment Name Pointer.
      352       76            Bound               UBIN ALIGNED
      353       77                                Represents the bound field of the
      354       78                                section.  This is optional and if
      355       79                                not specified will default to even
      356       80                                boundary.
      357       81                                  00 - starts on even word
      358       82                                  01 - starts on odd word
      359       83                                  10 - starts on multiple of 8
      360       84                                  11 - starts on page boundary
      361       85            Segment Name Pointer SBIN
      362       86                                Word offset into the Externally
      363       87                                Defined Names record (type 1).  The
      364       88                                name defined must match one of the
      365       89                                legal names recognized by the linker.
      366       90                                If Segment Name Pointer is not
      367       91                                specified, the linker will allocate
      368       92                                the control section in the 'default
      369       93                                data segment'.
      370       94        OUTPUT:
      371       95            Section Number      UBIN ALIGNED
      372       96                                The number of the newly created
      373       97                                section entry in the Section Record
      374       98
      375       99        B$OBJECT REFERENCE:  B$SECTION
      376      100        */
      377      101        /*B*
      378      102        GLOBAL DATA:
      379      103             B_SECTION_COUNT
      380      104             B_SECTION_CUR$
      381      105
      382      106        INTERFACE:  none
      383      107
      384      108        */
      385      109
      386      110        XUO$SECTBUILD: PROC(P_PARAM1,P_PARAM2,P_PARAM3,P_INIT_UTS_SEGMENT_ZERO,P_BOUND,
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:54   
               110            P_SEG_NPOINTER) ALTRET;

    110  2 000000   000000 700200 xent  XUO$SECTBUI* TSX0  ! X66_AUTO_N
         2 000001   000012 000006                    ZERO    10,6

      387      111         /*
      388      112            */
      389      113        %INCLUDE ZVA_SYSTEM_FILE;
      390     6364        %PAGE (ARG=INCLUDES);

              6377    1   /*******************************************************************************
              6378    1   *                                                                              *
              6379    1   *        INCLUDES              INCLUDES                                           *
              6380    1   *                                                                              *
              6381    1   *******************************************************************************/

      391     6385        %INCLUDE B$OBJECT_C;
      392     9815        %INCLUDE XUO$OBJ_C;
      393    10225        %INCLUDE XU_PERR_C;
      394    10416        %PAGE(ARG=SUBS);

             10429    1   /*******************************************************************************
             10430    1   *                                                                              *
             10431    1   *        SUBS              SUBS                                                  *
             10432    1   *                                                                              *
             10433    1   *******************************************************************************/

      395    10437        %B$SECTIONSUBS;
      396    10452        %PAGE (ARG=PARAMETERS);

             10465    1   /*******************************************************************************
             10466    1   *                                                                              *
             10467    1   *        PARAMETERS              PARAMETERS                                       *
             10468    1   *                                                                              *
             10469    1   *******************************************************************************/

      397    10473    1   DCL P_PARAM1 UBIN;
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:55   
      398    10474         /*
      399    10475         The following defintion is for sectbuild
      400    10476            */
      401    10477    1   DCL P_SECTION_TYPE REDEF P_PARAM1 UBIN;
      402    10478         /*
      403    10479         The following defintion is for sectname/sectsize
      404    10480         */
      405    10481    1   DCL P_SECTION_NUMBER_IN REDEF P_PARAM1 UBIN;
      406    10482         /*
      407    10483            */
      408    10484    1   DCL P_PARAM2 UBIN;
      409    10485         /*
      410    10486         The following defintion is for sectbuild/sectname
      411    10487         */
      412    10488    1   DCL P_NAME_POINTER REDEF P_PARAM2 SBIN;
      413    10489         /*
      414    10490         The following definition is for sectsize
      415    10491            */
      416    10492    1   DCL P_SECTION_SIZE REDEF P_PARAM2 UBIN;
      417    10493         /*
      418    10494            */
      419    10495    1   DCL P_PARAM3 UBIN;
      420    10496         /*
      421    10497         The following defintion is for sectbuild
      422    10498            */
      423    10499    1   DCL P_SECTION_NUMBER_OUT REDEF P_PARAM3 UBIN;
      424    10500         /*
      425    10501         The following definition is for sectbuild
      426    10502         */
      427    10503    1   DCL 1 P_INIT_UTS_SEGMENT_ZERO UNAL PARAM,
      428    10504    1         2 ZERO BIT(1),
      429    10505    1         2 UTS BIT(1),
      430    10506    1         2 SEGMENT BIT(1);
      431    10507         /*
      432    10508         The following definition is for sectbuild
      433    10509         */
      434    10510    1   DCL P_BOUND UBIN;
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:56   
      435    10511         /*
      436    10512         The following definition is for sectbuild
      437    10513         */
      438    10514    1   DCL P_SEG_NPOINTER SBIN;
      439    10515        %PAGE (ARG=SECTION DATA);

             10528    1   /*******************************************************************************
             10529    1   *                                                                              *
             10530    1   *        SECTION DATA              SECTION DATA                                   *
             10531    1   *                                                                              *
             10532    1   *******************************************************************************/

      440    10536        %B$SECTION (STCLASS="BASED(B_SECTION_CUR$)");
      441    10595        %B_SECTION_POINTERS;
      442    10614        %PLIST;
      443    10615        %PAGE (ARG=LOCAL);

             10628    1   /*******************************************************************************
             10629    1   *                                                                              *
             10630    1   *        LOCAL              LOCAL                                                 *
             10631    1   *                                                                              *
             10632    1   *******************************************************************************/

      444    10636    1   DCL SECTION_TEMP$ PTR;
      445    10637
      446    10638        %IF CP6;
      447    10639        %VLP_ERRCODE (FPTN=SECTION_TOO_BIG,
      448    10640         STCLASS=CONSTANT,
      449    10641         FCG=XU, MID=O, ERR#=%E$XUO#SECT_GE_256K, SEV=4);
      450    10686        %VLP_ERRCODE (FPTN=SECT_RECORD_FULL, STCLASS=CONSTANT,
      451    10687         FCG=XU,MID=O,ERR#=%E$XUO#SECT_RECORD_FULL, SEV=4);
      452    10732        %VLP_ERRCODE (FPTN=GT_512_SECTIONS, STCLASS=CONSTANT,
      453    10733         FCG=XU,MID=O,ERR#=%E$XUO#GT_512_SECTIONS, SEV=4);
      454    10778        %ENDIF;
      455    10779         /*
      456    10780            */
      457    10781        %PAGE (ARG=MISC);
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:57   

             10794    1   /*******************************************************************************
             10795    1   *                                                                              *
             10796    1   *        MISC              MISC                                                  *
             10797    1   *                                                                              *
             10798    1   *******************************************************************************/

      458    10802    1   DCL XUO_ERROR_ROUTINE EPTR SYMREF;
      459    10803
      460    10804
      461    10805        %PAGE (ARG=SECTION BUILD);

             10818    1   /*******************************************************************************
             10819    1   *                                                                              *
             10820    1   *        SECTION BUILD              SECTION BUILD                                 *
             10821    1   *                                                                              *
             10822    1   *******************************************************************************/

      462    10826         /*
      463    10827         The following section will build a section entry
      464    10828         */
      465    10829    1       IF B_SECTION_CUR$<B_SECTION_END$ THEN

  10829  2 000002   000000 236000 xsym               LDQ     B_SECTION_CUR$
         2 000003   000000 116000 xsym               CMPQ    B_SECTION_END$
         2 000004   000067 603000 2                  TRC     s:10853

      466    10830    2       DO;

      467    10831    2           B$SECTION.TYPE=P_SECTION_TYPE;

  10831  2 000005   200003 470500                    LDP0    @P_PARAM1,,AUTO
         2 000006   000000 471400 xsym               LDP1    B_SECTION_CUR$
         2 000007   000000 236100                    LDQ     0,,PR0
         2 000010   000033 736000                    QLS     27
         2 000011   100000 552140                    STBQ    0,'40'O,PR1

PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:58   
      468    10832    2           IF ADDR(P_INIT_UTS_SEGMENT_ZERO)~=ADDR(NIL) THEN

  10832  2 000012   200006 236100                    LDQ     @P_INIT_UTS_SEGMENT_ZERO,,AUTO
         2 000013   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000014   000032 600000 2                  TZE     s:10838

      469    10833    3           DO;

      470    10834    3               B$SECTION.INITZERO=P_INIT_UTS_SEGMENT_ZERO.ZERO;

  10834  2 000015   200006 471500                    LDP1    @P_INIT_UTS_SEGMENT_ZERO,,AUTO
         2 000016   000000 473400 xsym               LDP3    B_SECTION_CUR$
         2 000017   003100 060500                    CSL     bolr='003'O
         2 000020   100000 000001                    BDSC    0,,PR1                   by=0,bit=0,n=1
         2 000021   300000 210001                    BDSC    0,,PR3                   by=1,bit=1,n=1

      471    10835    3               B$SECTION.INITUTS=P_INIT_UTS_SEGMENT_ZERO.UTS;

  10835  2 000022   000000 473400 xsym               LDP3    B_SECTION_CUR$
         2 000023   003100 060500                    CSL     bolr='003'O
         2 000024   100000 010001                    BDSC    0,,PR1                   by=0,bit=1,n=1
         2 000025   300000 220001                    BDSC    0,,PR3                   by=1,bit=2,n=1

      472    10836    3               B$SECTION.SEGMENT=P_INIT_UTS_SEGMENT_ZERO.SEGMENT;

  10836  2 000026   000000 473400 xsym               LDP3    B_SECTION_CUR$
         2 000027   003100 060500                    CSL     bolr='003'O
         2 000030   100000 020001                    BDSC    0,,PR1                   by=0,bit=2,n=1
         2 000031   300000 230001                    BDSC    0,,PR3                   by=1,bit=3,n=1

      473    10837    3               END;

      474    10838    2           IF ADDR(P_BOUND)~=ADDR(NIL) THEN

  10838  2 000032   200007 236100                    LDQ     @P_BOUND,,AUTO
         2 000033   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000034   000044 600000 2                  TZE     s:10840
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:59   

      475    10839    2               B$SECTION.BOUND=P_BOUND;

  10839  2 000035   200007 471500                    LDP1    @P_BOUND,,AUTO
         2 000036   000000 473400 xsym               LDP3    B_SECTION_CUR$
         2 000037   100000 236100                    LDQ     0,,PR1
         2 000040   000022 736000                    QLS     18
         2 000041   300000 676100                    ERQ     0,,PR3
         2 000042   000003 376003                    ANQ     3,DU
         2 000043   300000 656100                    ERSQ    0,,PR3

      476    10840    2           IF ADDR(P_SEG_NPOINTER)~=ADDR(NIL) THEN

  10840  2 000044   200010 236100                    LDQ     @P_SEG_NPOINTER,,AUTO
         2 000045   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000046   000053 600000 2                  TZE     s:10842

      477    10841    2               B$SECTION.SEG_NPOINTER=P_SEG_NPOINTER;

  10841  2 000047   200010 471500                    LDP1    @P_SEG_NPOINTER,,AUTO
         2 000050   100000 720100                    LXL0    0,,PR1
         2 000051   000000 473400 xsym               LDP3    B_SECTION_CUR$
         2 000052   300001 440100                    SXL0    1,,PR3

      478    10842    2           B$SECTION.NPOINTER=P_NAME_POINTER;

  10842  2 000053   200004 471500                    LDP1    @P_PARAM2,,AUTO
         2 000054   100000 720100                    LXL0    0,,PR1
         2 000055   000000 473400 xsym               LDP3    B_SECTION_CUR$
         2 000056   300001 740100                    STX0    1,,PR3

      479    10843    2           B_SECTION_COUNT=B_SECTION_COUNT+1;

  10843  2 000057   000000 054000 xsym               AOS     B_SECTION_COUNT

      480    10844    2           P_SECTION_NUMBER_OUT=B_SECTION_COUNT;

PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:60   
  10844  2 000060   000000 235000 xsym               LDA     B_SECTION_COUNT
         2 000061   200005 474500                    LDP4    @P_PARAM3,,AUTO
         2 000062   400000 755100                    STA     0,,PR4

      481    10845    2           B_SECTION_CUR$=PINCRW(B_SECTION_CUR$,SIZEW(B$SECTION));

  10845  2 000063   000000 236000 xsym               LDQ     B_SECTION_CUR$
         2 000064   000002 036003                    ADLQ    2,DU
         2 000065   000000 756000 xsym               STQ     B_SECTION_CUR$

      482    10846    2           RETURN;

  10846  2 000066   000000 702200 xent               TSX2  ! X66_ARET

      483    10847    2           END;
      484    10848    2       ELSE DO;

      485    10849         /*
      486    10850         We cannot allocate any more sections--therefore give an altreturn.
      487    10851         */
      488    10852        %IF CP6;
      489    10853    2           IF XUO_ERROR_ROUTINE ~= ENTADDR(NIL)

  10853  2 000067   000000 236000 xsym               LDQ     XUO_ERROR_ROUTINE
         2 000070   000002 116000 xsym               CMPQ    B_VECTNIL+2
         2 000071   000110 600000 2                  TZE     s:10877

      490    10854    2           THEN
      491    10855    2               IF B_SECTION_COUNT = 512

  10855  2 000072   000000 235000 xsym               LDA     B_SECTION_COUNT
         2 000073   001000 115007                    CMPA    512,DL
         2 000074   000103 601000 2                  TNZ     s:10859

      492    10856    2               THEN
      493    10857    2                   CALL XUO_ERROR_ROUTINE (GT_512_SECTIONS);

PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:61   
  10857  2 000075   000000 630400 3                  EPPR0   0
         2 000076   000000 220000 xsym               LDX0    XUO_ERROR_ROUTINE
         2 000077   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000100   000000 701010                    TSX1    0,X0
         2 000101   000000 011000                    NOP     0
         2 000102   000110 710000 2                  TRA     s:10877

      494    10858    2               ELSE
      495    10859    2                   CALL XUO_ERROR_ROUTINE (SECT_RECORD_FULL);

  10859  2 000103   000001 630400 3                  EPPR0   1
         2 000104   000000 220000 xsym               LDX0    XUO_ERROR_ROUTINE
         2 000105   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000106   000000 701010                    TSX1    0,X0
         2 000107   000000 011000                    NOP     0

      496    10860
      497    10861        /*E*  ERROR:   XUO-E$XUO#GT_512_SECTIONS
      498    10862              MESSAGE:A fatal error has occurred while building an object unit.  An
      499    10863                      attempt has been made to create an object unit with more than 512
      500    10864                      control sections.  This exceeds the design capacity of CP-6
      501    10865                      object unit files.
      502    10866        */
      503    10867
      504    10868        /*E*  ERROR:   XUO-E$XUO#SECT_RECORD_FULL
      505    10869              MESSAGE:A fatal error has occurred while building an object unit.  The
      506    10870                      control-section record has overflowed, due to an attempt to
      507    10871                      build more control sections than were specified when the
      508    10872                      XUO$BUFINIT routine was called (or, if XUO$BUFINIT was not called,
      509    10873                      the default limit of 10 control sections).
      510    10874        */
      511    10875
      512    10876        %ENDIF;
      513    10877    2           ALTRETURN;

  10877  2 000110   000000 702200 xent               TSX2  ! X66_AALT

PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:62   
      514    10878    2           END;
      515    10879
      516    10880        %PAGE (ARG=Section build);

             10893    2   /*******************************************************************************
             10894    2   *                                                                              *
             10895    2   *        Section build              Section build                                 *
             10896    2   *                                                                              *
             10897    2   *******************************************************************************/

      517    10901        /*D*  NAME:    XUO$SECTNAME
      518    10902
      519    10903                                 PURPOSE:  This routine enters the section name pointer
      520    10904                                 into a previously created section record entry.
      521    10905
      522    10906                            DESCRIPTION:  This routine enters the section name pointer
      523    10907                            into the previously created section record entry.  If
      524    10908                            an invalid section number is passed in, this routine
      525    10909                            will altreturn.
      526    10910
      527    10911                            CALL:  Call XUO$SECTNAME (section number,
      528    10912                            name pointer)
      529    10913                            altreturn (label)
      530    10914
      531    10915                            INPUT:
      532    10916                            Section number      ubin aligned
      533    10917                            the number of the section record entry
      534    10918                            that is to be modified.
      535    10919                            Name pointer        sbin aligned
      536    10920                            word displacement into the externally
      537    10921                            defined names record (type 1) locating
      538    10922                            the name of this section.  If the field
      539    10923                            is negative, the section has no name.
      540    10924
      541    10925                            OUTPUT:
      542    10926                            updated entry in the section record
      543    10927
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:63   
      544    10928                            global DATA:  none
      545    10929
      546    10930                            B$OBJECT REFERENCE:  B$SECTION
      547    10931                            */
      548    10932        /*B*
      549    10933        INTERFACE:
      550    10934             XUO$ERROR_ROUTINE
      551    10935
      552    10936        */
      553    10937
      554    10938    1   XUO$SECTNAME: ENTRY(P_PARAM1,P_PARAM2) ALTRET;

  10938  2 000111   000000 700200 xent  XUO$SECTNAME TSX0  ! X66_AUTO_N
         2 000112   000012 000006                    ZERO    10,6

      555    10939         /*
      556    10940         This section will add the name pointer to the appropriate section
      557    10941         */
      558    10942    1       SECTION_TEMP$=PINCRW(B_SECTION_BASE$,P_SECTION_NUMBER_IN*SIZEW(B$SECTION));

  10942  2 000113   200003 470500                    LDP0    @P_PARAM1,,AUTO
         2 000114   000000 720100                    LXL0    0,,PR0
         2 000115   000000 636010                    EAQ     0,X0
         2 000116   000001 736000                    QLS     1
         2 000117   000000 036000 xsym               ADLQ    B_SECTION_BASE$
         2 000120   200011 756100                    STQ     SECTION_TEMP$,,AUTO

      559    10943    1       IF SECTION_TEMP$<B_SECTION_CUR$ THEN

  10943  2 000121   000000 116000 xsym               CMPQ    B_SECTION_CUR$
         2 000122   000130 603000 2                  TRC     s:10952

      560    10944    2       DO;

      561    10945    2           SECTION_TEMP$->B$SECTION.NPOINTER=P_NAME_POINTER;

  10945  2 000123   200004 471500                    LDP1    @P_PARAM2,,AUTO
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:64   
         2 000124   100000 721100                    LXL1    0,,PR1
         2 000125   200011 473500                    LDP3    SECTION_TEMP$,,AUTO
         2 000126   300001 741100                    STX1    1,,PR3

      562    10946    2           RETURN;

  10946  2 000127   000000 702200 xent               TSX2  ! X66_ARET

      563    10947    2           END;
      564    10948    1       ELSE
      565    10949         /*
      566    10950         Give altreturn on invalid section number
      567    10951            */
      568    10952    1           ALTRETURN;

  10952  2 000130   000000 702200 xent               TSX2  ! X66_AALT

      569    10953        %PAGE (arg= section size add );

             10966    1   /*******************************************************************************
             10967    1   *                                                                              *
             10968    1   *        section size add              section size add                           *
             10969    1   *                                                                              *
             10970    1   *******************************************************************************/

      570    10974        /*D*
      571    10975
      572    10976        XUO$SECTSIZE --section record (record type 3)
      573    10977
      574    10978        NAME:  XUO$SECTSIZE
      575    10979
      576    10980        PURPOSE:  To enter the section size into a previously created
      577    10981                  entry in the section record.
      578    10982
      579    10983        DESCRIPTION:  This routine is used to enter the size of a
      580    10984                      section into a previously created entry in the section
      581    10985                      record.  This routine will altreturn if an invalid
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:65   
      582    10986                      section number is passed.
      583    10987
      584    10988        CALL:  Call XUO$SECTSIZE (section number,
      585    10989                                  section size)
      586    10990                   altreturn (label)
      587    10991
      588    10992        INPUT:
      589    10993              Section number      ubin aligned
      590    10994                       the number of the section record entry
      591    10995                       that is to be modified.
      592    10996              Section size        ubin aligned
      593    10997                       the size in words of the section.
      594    10998
      595    10999        OUTPUT:
      596    11000              updated section record entry
      597    11001
      598    11002        B$OBJECT REFERENCE:  B$SECTION
      599    11003        */
      600    11004        /*B*
      601    11005        GLOBAL DATA:  none
      602    11006
      603    11007        INTERFACE:  none
      604    11008
      605    11009
      606    11010        */
      607    11011    1   XUO$SECTSIZE: ENTRY(P_PARAM1,P_PARAM2) ALTRET;

  11011  2 000131   000000 700200 xent  XUO$SECTSIZE TSX0  ! X66_AUTO_N
         2 000132   000012 000006                    ZERO    10,6

      608    11012         /*
      609    11013         This section will add the passed size to the appropriate section
      610    11014         */
      611    11015    1       SECTION_TEMP$=PINCRW(B_SECTION_BASE$,P_SECTION_NUMBER_IN*SIZEW(B$SECTION));

  11015  2 000133   200003 470500                    LDP0    @P_PARAM1,,AUTO
         2 000134   000000 720100                    LXL0    0,,PR0
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:66   
         2 000135   000000 636010                    EAQ     0,X0
         2 000136   000001 736000                    QLS     1
         2 000137   000000 036000 xsym               ADLQ    B_SECTION_BASE$
         2 000140   200011 756100                    STQ     SECTION_TEMP$,,AUTO

      612    11016    1       IF SECTION_TEMP$<B_SECTION_CUR$ THEN

  11016  2 000141   000000 116000 xsym               CMPQ    B_SECTION_CUR$
         2 000142   000165 603000 2                  TRC     s:11039

      613    11017    2       DO;

      614    11018    2           IF P_SECTION_SIZE > 262143 /* 256k - 1 */

  11018  2 000143   200004 471500                    LDP1    @P_PARAM2,,AUTO
         2 000144   100000 235100                    LDA     0,,PR1
         2 000145   000001 115003                    CMPA    1,DU
         2 000146   000160 602000 2                  TNC     s:11032

      615    11019    2           THEN
      616    11020         %IF CP6;
      617    11021    2               IF XUO_ERROR_ROUTINE = ENTADDR(NIL)

  11021  2 000147   000000 236000 xsym               LDQ     XUO_ERROR_ROUTINE
         2 000150   000002 116000 xsym               CMPQ    B_VECTNIL+2
         2 000151   000153 601000 2                  TNZ     s:11025

      618    11022    2               THEN
      619    11023    2                   ALTRETURN;

  11023  2 000152   000000 702200 xent               TSX2  ! X66_AALT

      620    11024    2               ELSE
      621    11025    2                   CALL XUO_ERROR_ROUTINE (SECTION_TOO_BIG);

  11025  2 000153   000002 630400 3                  EPPR0   2
         2 000154   000000 220000 xsym               LDX0    XUO_ERROR_ROUTINE
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:67   
         2 000155   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000156   000000 701010                    TSX1    0,X0
         2 000157   000000 011000                    NOP     0

      622    11026        %ELSE;
      623    11027 C              ALTRETURN;
      624    11028        %ENDIF;
      625    11029        /*E*  ERROR:   XUO-E$XUO#SECT_GE_256K
      626    11030              MESSAGE: You tried to build a control section of more than 262143 words.
      627    11031        */
      628    11032    2           SECTION_TEMP$->B$SECTION.SIZE=P_SECTION_SIZE;

  11032  2 000160   200004 470500                    LDP0    @P_PARAM2,,AUTO
         2 000161   000000 720100                    LXL0    0,,PR0
         2 000162   200011 471500                    LDP1    SECTION_TEMP$,,AUTO
         2 000163   100000 440100                    SXL0    0,,PR1

      629    11033    2           RETURN;

  11033  2 000164   000000 702200 xent               TSX2  ! X66_ARET

      630    11034    2           END;
      631    11035    1       ELSE
      632    11036         /*
      633    11037         Give altreturn on invalid section number
      634    11038            */
      635    11039    1           ALTRETURN;

  11039  2 000165   000000 702200 xent               TSX2  ! X66_AALT
      636    11040         /*
      637    11041            */
      638    11042    1   END XUO$SECTBUILD;
      639    11043        %EOD;

PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:68   
--  Include file information  --

   XU_PERR_C.:E05TOU  is referenced.
   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$SECTBUILD.
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:69   

 **** Variables and constants ****

  ****  Section 001 RoData XUO$SECTBUILD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     2-0-0/w STRC        r     1 GT_512_SECTIONS            0-0-0/w STRC        r     1 SECTION_TOO_BIG
     1-0-0/w STRC        r     1 SECT_RECORD_FULL

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     7-0-0/w PTR         r     1 @P_BOUND
     6-0-0/w PTR         r     1 @P_INIT_UTS_SEGMENT_ZERO
     3-0-0/w PTR         r     1 @P_PARAM1                  4-0-0/w PTR         r     1 @P_PARAM2
     5-0-0/w PTR         r     1 @P_PARAM3                 10-0-0/w PTR         r     1 @P_SEG_NPOINTER
    *0-0-0/w UBIN        r     1 P_BOUND
    *0-0-0/b STRC(3)     r     1 P_INIT_UTS_SEGMENT_ZERO
    *0-0-0/w SBIN        r     1 P_NAME_POINTER            *0-0-0/w UBIN        r     1 P_PARAM1
    *0-0-0/w UBIN        r     1 P_PARAM2                  *0-0-0/w UBIN        r     1 P_PARAM3
    *0-0-0/w UBIN        r     1 P_SECTION_NUMBER_IN       *0-0-0/w UBIN        r     1 P_SECTION_NUMBER_OUT
    *0-0-0/w UBIN        r     1 P_SECTION_SIZE            *0-0-0/w UBIN        r     1 P_SECTION_TYPE
    *0-0-0/w SBIN        r     1 P_SEG_NPOINTER            11-0-0/w PTR         r     1 SECTION_TEMP$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_SECTION_BASE$            0-0-0/w SBIN        r     1 B_SECTION_COUNT
     0-0-0/w PTR         r     1 B_SECTION_CUR$             0-0-0/w PTR         r     1 B_SECTION_END$
     0-0-0/w EPTR        r     1 XUO_ERROR_ROUTINE

  ****  BASED and DCB variables  ****
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:70   

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 B$SECTION


   Procedure XUO$SECTBUILD requires 118 words for executable code.
   Procedure XUO$SECTBUILD requires 10 words of local(AUTO) storage.
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:71   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:72   
          MINI XREF LISTING

B$SECTION
     10537**DCL     10845--ASSIGN  10942--ASSIGN  11015--ASSIGN
B$SECTION.BOUND
     10572**DCL     10839<<ASSIGN
B$SECTION.INITUTS
     10564**DCL     10835<<ASSIGN
B$SECTION.INITZERO
     10562**DCL     10834<<ASSIGN
B$SECTION.MBZ
     10584**DCL     10586--REDEF   10590--REDEF
B$SECTION.NPOINTER
     10580**DCL     10842<<ASSIGN  10945<<ASSIGN
B$SECTION.SEGMENT
     10566**DCL     10836<<ASSIGN
B$SECTION.SEG_NPOINTER
     10586**DCL     10841<<ASSIGN
B$SECTION.SIZE
     10578**DCL     11032<<ASSIGN
B$SECTION.TYPE
     10538**DCL     10831<<ASSIGN
B_SECTION_BASE$
     10607**DCL     10942>>ASSIGN  11015>>ASSIGN
B_SECTION_COUNT
     10610**DCL     10843<<ASSIGN  10843>>ASSIGN  10844>>ASSIGN  10855>>IF
B_SECTION_CUR$
     10608**DCL     10537--IMP-PTR 10829>>IF      10831>>ASSIGN  10834>>ASSIGN  10835>>ASSIGN  10836>>ASSIGN
     10839>>ASSIGN  10841>>ASSIGN  10842>>ASSIGN  10845<<ASSIGN  10845>>ASSIGN  10943>>IF      11016>>IF
B_SECTION_END$
     10609**DCL     10829>>IF
GT_512_SECTIONS
     10745**DCL     10857<>CALL
P_BOUND
PL6.E3A0      #002=XUO$SECTBUILD File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:24 Page:73   
     10510**DCL       110--PROC    10838--IF      10839>>ASSIGN
P_INIT_UTS_SEGMENT_ZERO
     10503**DCL       110--PROC    10832--IF
P_INIT_UTS_SEGMENT_ZERO.SEGMENT
     10506**DCL     10836>>ASSIGN
P_INIT_UTS_SEGMENT_ZERO.UTS
     10505**DCL     10835>>ASSIGN
P_INIT_UTS_SEGMENT_ZERO.ZERO
     10504**DCL     10834>>ASSIGN
P_NAME_POINTER
     10488**DCL     10842>>ASSIGN  10945>>ASSIGN
P_PARAM1
     10473**DCL       110--PROC    10477--REDEF   10481--REDEF   10938--ENTRY   11011--ENTRY
P_PARAM2
     10484**DCL       110--PROC    10488--REDEF   10492--REDEF   10938--ENTRY   11011--ENTRY
P_PARAM3
     10495**DCL       110--PROC    10499--REDEF
P_SECTION_NUMBER_IN
     10481**DCL     10942>>ASSIGN  11015>>ASSIGN
P_SECTION_NUMBER_OUT
     10499**DCL     10844<<ASSIGN
P_SECTION_SIZE
     10492**DCL     11018>>IF      11032>>ASSIGN
P_SECTION_TYPE
     10477**DCL     10831>>ASSIGN
P_SEG_NPOINTER
     10514**DCL       110--PROC    10840--IF      10841>>ASSIGN
SECTION_TEMP$
     10636**DCL     10942<<ASSIGN  10943>>IF      10945>>ASSIGN  11015<<ASSIGN  11016>>IF      11032>>ASSIGN
SECTION_TOO_BIG
     10653**DCL     11025<>CALL
SECT_RECORD_FULL
     10699**DCL     10859<>CALL
XUO_ERROR_ROUTINE
     10802**DCL     10853>>IF      10857>>CALL    10859>>CALL    11021>>IF      11025>>CALL

PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:74   
      640        1        /*M*     XUO$EDEF -- THIS MODULE WILL BUILD OBJECT UNIT ENTDEF RECORDS*/
      641        2        /*T***********************************************************/
      642        3        /*T*                                                         */
      643        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      644        5        /*T*                                                         */
      645        6        /*T***********************************************************/
      646        7        /*P*
      647        8
      648        9
      649       10        NAME:  XUO$EDEF
      650       11               XUO$EDEF --External Procedure Definition (Record Type 4)
      651       12
      652       13        PURPOSE:  To build an entry in the External Procedure Definition Record
      653       14
      654       15        DESCRIPTION:  This routine builds an entry in the External
      655       16                  Procedure Definition Record.  There is one record
      656       17                  per object unit which defines the external
      657       18                  procedure definitions.  The record for External
      658       19                  Procedure Definition contains one entry
      659       20                  per external procedure name within the object unit.
      660       21                  A PL6 module with no ENTRY statements will contain one
      661       22                  entry.  Three level-0 ENTRY statements would produce an
      662       23                  ENTDEF record with four entries (one for the primary
      663       24                  procedure name, three for the three ENTRY names).
      664       25        */
      665       26        /*D*
      666       27
      667       28        CALL:  CALL XUO$EDEF(Section Number,
      668       29                      Section Offset,
      669       30                      Name Pointer,
      670       31                      Entry Flags,
      671       32                      Altreturn Flag,
      672       33                      Argument Check Flag,
      673       34                      Call Type,
      674       35                      Number Arguments)
      675       36
      676       37        INPUT:
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:75   
      677       38            Section Number      UBIN
      678       39                                Contains an entry number into the section
      679       40                                table (type 3).
      680       41            Section Offset      UBIN
      681       42                                Word offset from the origin of the section.
      682       43            Name Pointer        SBIN ALIGNED
      683       44                                The word displacement into the name record
      684       45                                (type 1) locating the name of this entry.
      685       46            Entry Flag          BIT (1) UNALIGNED
      686       47                                A flag denoting primary entry definition.
      687       48                                   0 = not a primary name
      688       49                                   1 = a primary name (object unit name)
      689       50            Altreturn Flag      BIT (1) UNALIGNED
      690       51                                A flag denoting permissible alternate
      691       52                                return.
      692       53                                   0 = alternate return not allowed
      693       54                                   1 = alternate return allowed
      694       55            Argument Check Flag BIT (1) UNALIGNED
      695       56                                CHECK is a one-bit flag denoting
      696       57                                arguments/parameters check and alternate
      697       58                                return specification check.
      698       59                                   0 = do not check for matching
      699       60                                       arguments/parameters and alternate
      700       61                                       return specification check.
      701       62                                   1 = check for matching arguments/parameters
      702       63            Call Type           UBIN
      703       64                                Denotes the calling sequence type
      704       65                                   0 = Standard CP-6 Callable Procedure
      705       66                                   1 = Nonstandard Call Type
      706       67                                   2 = Standard CP-6 Procedure with
      707       68                                       MAIN attribute
      708       69                                   3 = Standard CP-6 Procedure with
      709       70                                        ASYNC attribute
      710       71                                   4 = Standard CP-6 Function Procedure;
      711       72                                        a variable table entry will be
      712       73                                        present to define the attributes
      713       74                                        of the function.
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:76   
      714       75                                   5 = Same as 0, except USE, AVOID, or
      715       76                                       MATERIALIZE attributes specified
      716       77                                   7 = Same as 2, except USE, AVOID, or
      717       78                                       MATERIALIZE attributes specified
      718       79                                   8 = Same as 3, except USE, AVOID, or
      719       80                                       MATERIALIZE attributes specified
      720       81                                   9 = Same as 4, except USE, AVOID, or
      721       82                                       MATERIALIZE attributes specified
      722       83                                  13 = GCOS domain, save
      723       84                                  14 = GCOS domain, no save
      724       85                                  15 = Non-Callable Procedure.
      725       86            Number Arguments    UBIN
      726       87                                Denotes the number of parameters.
      727       88
      728       89        OUTPUT:  none
      729       90
      730       91        B$OBJECT REFERENCE:  B$EDEF
      731       92        */
      732       93        /*B*
      733       94
      734       95        GLOBAL DATA:
      735       96            B_EDEF_CUR$
      736       97            B_EDEF_COUNT
      737       98            B_EDEF_PAGE
      738       99        INTERFACE:
      739      100            XUO$WRITE
      740      101
      741      102        */
      742      103
      743      104        XUO$EDEF: PROC(P_SECTION_NUMBER,P_SECTION_OFFSET,P_NAME_POINTER,P_ENTRY_FLAG,
               104            P_ALTRETURN_FLAG,
      744      105               P_ARGUMENT_CHECK_FLAG,P_CALL_TYPE,P_NUMBER_ARGUMENTS);
      745      106         /*
      746      107            */
      747      108        %INCLUDE ZVA_SYSTEM_FILE;
      748     6359            %PAGE (ARG=INCLUDES);

PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:77   
              6372    1   /*******************************************************************************
              6373    1   *                                                                              *
              6374    1   *        INCLUDES              INCLUDES                                            *
              6375    1   *                                                                              *
              6376    1   *******************************************************************************/

      749     6380        %INCLUDE B$OBJECT_C;
      750     9810        %INCLUDE XUO$OBJ_C;
      751    10220            %PAGE (ARG=SUBS);

             10233    1   /*******************************************************************************
             10234    1   *                                                                              *
             10235    1   *        SUBS              SUBS                                                  *
             10236    1   *                                                                              *
             10237    1   *******************************************************************************/

      752    10241            %B$RECORDSUBS;
      753    10269        %PLIST;
      754    10270            %PAGE (ARG=PARAMETERS);

             10283    1   /*******************************************************************************
             10284    1   *                                                                              *
             10285    1   *        PARAMETERS              PARAMETERS                                        *
             10286    1   *                                                                              *
             10287    1   *******************************************************************************/

      755    10291    1   DCL P_SECTION_NUMBER UBIN;
      756    10292    1   DCL P_SECTION_OFFSET UBIN;
      757    10293    1   DCL P_NAME_POINTER SBIN;
      758    10294    1   DCL P_ENTRY_FLAG BIT(1) UNAL;
      759    10295    1   DCL P_ALTRETURN_FLAG BIT(1) UNAL;
      760    10296    1   DCL P_ARGUMENT_CHECK_FLAG BIT(1) UNAL;
      761    10297    1   DCL P_CALL_TYPE UBIN;
      762    10298    1   DCL P_NUMBER_ARGUMENTS UBIN;
      763    10299         /*
      764    10300            */
      765    10301        %PAGE (ARG=PROC DEF DATA);
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:78   

             10314    1   /*******************************************************************************
             10315    1   *                                                                              *
             10316    1   *        PROC DEF DATA              PROC DEF DATA                                  *
             10317    1   *                                                                              *
             10318    1   *******************************************************************************/

      766    10322        %B$EDEF (STCLASS="BASED(EDEF_CUR$)");
      767    10392        %B_EDEF_POINTERS;
      768    10412    1   DCL EDEF_CUR$ PTR;
      769    10413        %PLIST;
      770    10414        %PAGE (ARG=ENTRY DCLS);

             10427    1   /*******************************************************************************
             10428    1   *                                                                              *
             10429    1   *        ENTRY DCLS              ENTRY DCLS                                        *
             10430    1   *                                                                              *
             10431    1   *******************************************************************************/

      771    10435    1   DCL XUO$OUWRITE ENTRY(2);
      772    10436        %PAGE (ARG=CODE);

             10449    1   /*******************************************************************************
             10450    1   *                                                                              *
             10451    1   *        CODE              CODE                                                  *
             10452    1   *                                                                              *
             10453    1   *******************************************************************************/

      773    10457         /*
      774    10458         The following will check to see if the passed information will
      775    10459         fit in the current record.  If not, the current record will be
      776    10460         written and the pointer re-initialized.  Then the text will be moved to
      777    10461         the buffer.
      778    10462         */
      779    10463    1       IF B_EDEF_CUR$>=B_EDEF_END$ THEN
      780    10464    2       DO;
      781    10465    2           CALL XUO$OUWRITE(%TYPEDEF);
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:79   
      782    10466    2           B_EDEF_PAGE=B_EDEF_PAGE+1;
      783    10467    2           B_EDEF_CUR$=B_EDEF_BASE$;
      784    10468    2           END;
      785    10469         /*
      786    10470         The following will build the procedure entry definition.
      787    10471         */
      788    10472    1       EDEF_CUR$=B_EDEF_CUR$;
      789    10473    1       B$EDEF.OU.SECTNUM=P_SECTION_NUMBER;
      790    10474    1       B$EDEF.OU.OFFSET=P_SECTION_OFFSET;
      791    10475    1       B$EDEF.NPOINTER=P_NAME_POINTER;
      792    10476    1       B$EDEF.PRI=P_ENTRY_FLAG;
      793    10477    1       B$EDEF.ALT=P_ALTRETURN_FLAG;
      794    10478    1       B$EDEF.CHECK=P_ARGUMENT_CHECK_FLAG;
      795    10479    1       B$EDEF.CST=P_CALL_TYPE;
      796    10480    1       B$EDEF.NPARAM=P_NUMBER_ARGUMENTS;
      797    10481    1       B_EDEF_COUNT=B_EDEF_COUNT+1;
      798    10482    1       B_EDEF_CUR$=PINCRW(B_EDEF_CUR$,SIZEW(B$EDEF));
      799    10483    1       RETURN;
      800    10484    1   END XUO$EDEF;
      801    10485        %EOD;

PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:80   
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$EDEF.

   Procedure XUO$EDEF requires 52 words for executable code.
   Procedure XUO$EDEF requires 12 words of local(AUTO) storage.

PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:81   

 Object Unit name= XUO$EDEF                                   File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:24:42.00 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    52     64  XUO$EDEF
    2  RoData even  none     1      1  XUO$EDEF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        8  XUO$EDEF

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_EDEF_BASE$                          B_EDEF_CUR$
     B_EDEF_END$                           B_EDEF_COUNT                          B_EDEF_PAGE
     B_VECTNIL
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:82   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:83   


      640        1        /*M*     XUO$EDEF -- THIS MODULE WILL BUILD OBJECT UNIT ENTDEF RECORDS*/
      641        2        /*T***********************************************************/
      642        3        /*T*                                                         */
      643        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      644        5        /*T*                                                         */
      645        6        /*T***********************************************************/
      646        7        /*P*
      647        8
      648        9
      649       10        NAME:  XUO$EDEF
      650       11               XUO$EDEF --External Procedure Definition (Record Type 4)
      651       12
      652       13        PURPOSE:  To build an entry in the External Procedure Definition Record
      653       14
      654       15        DESCRIPTION:  This routine builds an entry in the External
      655       16                  Procedure Definition Record.  There is one record
      656       17                  per object unit which defines the external
      657       18                  procedure definitions.  The record for External
      658       19                  Procedure Definition contains one entry
      659       20                  per external procedure name within the object unit.
      660       21                  A PL6 module with no ENTRY statements will contain one
      661       22                  entry.  Three level-0 ENTRY statements would produce an
      662       23                  ENTDEF record with four entries (one for the primary
      663       24                  procedure name, three for the three ENTRY names).
      664       25        */
      665       26        /*D*
      666       27
      667       28        CALL:  CALL XUO$EDEF(Section Number,
      668       29                      Section Offset,
      669       30                      Name Pointer,
      670       31                      Entry Flags,
      671       32                      Altreturn Flag,
      672       33                      Argument Check Flag,
      673       34                      Call Type,
      674       35                      Number Arguments)
      675       36
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:84   
      676       37        INPUT:
      677       38            Section Number      UBIN
      678       39                                Contains an entry number into the section
      679       40                                table (type 3).
      680       41            Section Offset      UBIN
      681       42                                Word offset from the origin of the section.
      682       43            Name Pointer        SBIN ALIGNED
      683       44                                The word displacement into the name record
      684       45                                (type 1) locating the name of this entry.
      685       46            Entry Flag          BIT (1) UNALIGNED
      686       47                                A flag denoting primary entry definition.
      687       48                                   0 = not a primary name
      688       49                                   1 = a primary name (object unit name)
      689       50            Altreturn Flag      BIT (1) UNALIGNED
      690       51                                A flag denoting permissible alternate
      691       52                                return.
      692       53                                   0 = alternate return not allowed
      693       54                                   1 = alternate return allowed
      694       55            Argument Check Flag BIT (1) UNALIGNED
      695       56                                CHECK is a one-bit flag denoting
      696       57                                arguments/parameters check and alternate
      697       58                                return specification check.
      698       59                                   0 = do not check for matching
      699       60                                       arguments/parameters and alternate
      700       61                                       return specification check.
      701       62                                   1 = check for matching arguments/parameters
      702       63            Call Type           UBIN
      703       64                                Denotes the calling sequence type
      704       65                                   0 = Standard CP-6 Callable Procedure
      705       66                                   1 = Nonstandard Call Type
      706       67                                   2 = Standard CP-6 Procedure with
      707       68                                       MAIN attribute
      708       69                                   3 = Standard CP-6 Procedure with
      709       70                                        ASYNC attribute
      710       71                                   4 = Standard CP-6 Function Procedure;
      711       72                                        a variable table entry will be
      712       73                                        present to define the attributes
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:85   
      713       74                                        of the function.
      714       75                                   5 = Same as 0, except USE, AVOID, or
      715       76                                       MATERIALIZE attributes specified
      716       77                                   7 = Same as 2, except USE, AVOID, or
      717       78                                       MATERIALIZE attributes specified
      718       79                                   8 = Same as 3, except USE, AVOID, or
      719       80                                       MATERIALIZE attributes specified
      720       81                                   9 = Same as 4, except USE, AVOID, or
      721       82                                       MATERIALIZE attributes specified
      722       83                                  13 = GCOS domain, save
      723       84                                  14 = GCOS domain, no save
      724       85                                  15 = Non-Callable Procedure.
      725       86            Number Arguments    UBIN
      726       87                                Denotes the number of parameters.
      727       88
      728       89        OUTPUT:  none
      729       90
      730       91        B$OBJECT REFERENCE:  B$EDEF
      731       92        */
      732       93        /*B*
      733       94
      734       95        GLOBAL DATA:
      735       96            B_EDEF_CUR$
      736       97            B_EDEF_COUNT
      737       98            B_EDEF_PAGE
      738       99        INTERFACE:
      739      100            XUO$WRITE
      740      101
      741      102        */
      742      103
      743      104        XUO$EDEF: PROC(P_SECTION_NUMBER,P_SECTION_OFFSET,P_NAME_POINTER,P_ENTRY_FLAG,
               104            P_ALTRETURN_FLAG,

    104  1 000000   000000 700200 xent  XUO$EDEF     TSX0  ! X66_AUTO_N
         1 000001   000014 000010                    ZERO    12,8

      744      105               P_ARGUMENT_CHECK_FLAG,P_CALL_TYPE,P_NUMBER_ARGUMENTS);
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:86   
      745      106         /*
      746      107            */
      747      108        %INCLUDE ZVA_SYSTEM_FILE;
      748     6359            %PAGE (ARG=INCLUDES);

              6372    1   /*******************************************************************************
              6373    1   *                                                                              *
              6374    1   *        INCLUDES              INCLUDES                                           *
              6375    1   *                                                                              *
              6376    1   *******************************************************************************/

      749     6380        %INCLUDE B$OBJECT_C;
      750     9810        %INCLUDE XUO$OBJ_C;
      751    10220            %PAGE (ARG=SUBS);

             10233    1   /*******************************************************************************
             10234    1   *                                                                              *
             10235    1   *        SUBS              SUBS                                                  *
             10236    1   *                                                                              *
             10237    1   *******************************************************************************/

      752    10241            %B$RECORDSUBS;
      753    10269        %PLIST;
      754    10270            %PAGE (ARG=PARAMETERS);

             10283    1   /*******************************************************************************
             10284    1   *                                                                              *
             10285    1   *        PARAMETERS              PARAMETERS                                       *
             10286    1   *                                                                              *
             10287    1   *******************************************************************************/

      755    10291    1   DCL P_SECTION_NUMBER UBIN;
      756    10292    1   DCL P_SECTION_OFFSET UBIN;
      757    10293    1   DCL P_NAME_POINTER SBIN;
      758    10294    1   DCL P_ENTRY_FLAG BIT(1) UNAL;
      759    10295    1   DCL P_ALTRETURN_FLAG BIT(1) UNAL;
      760    10296    1   DCL P_ARGUMENT_CHECK_FLAG BIT(1) UNAL;
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:87   
      761    10297    1   DCL P_CALL_TYPE UBIN;
      762    10298    1   DCL P_NUMBER_ARGUMENTS UBIN;
      763    10299         /*
      764    10300            */
      765    10301        %PAGE (ARG=PROC DEF DATA);

             10314    1   /*******************************************************************************
             10315    1   *                                                                              *
             10316    1   *        PROC DEF DATA              PROC DEF DATA                                 *
             10317    1   *                                                                              *
             10318    1   *******************************************************************************/

      766    10322        %B$EDEF (STCLASS="BASED(EDEF_CUR$)");
      767    10392        %B_EDEF_POINTERS;
      768    10412    1   DCL EDEF_CUR$ PTR;
      769    10413        %PLIST;
      770    10414        %PAGE (ARG=ENTRY DCLS);

             10427    1   /*******************************************************************************
             10428    1   *                                                                              *
             10429    1   *        ENTRY DCLS              ENTRY DCLS                                       *
             10430    1   *                                                                              *
             10431    1   *******************************************************************************/

      771    10435    1   DCL XUO$OUWRITE ENTRY(2);
      772    10436        %PAGE (ARG=CODE);

             10449    1   /*******************************************************************************
             10450    1   *                                                                              *
             10451    1   *        CODE              CODE                                                  *
             10452    1   *                                                                              *
             10453    1   *******************************************************************************/

      773    10457         /*
      774    10458         The following will check to see if the passed information will
      775    10459         fit in the current record.  If not, the current record will be
      776    10460         written and the pointer re-initialized.  Then the text will be moved to
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:88   
      777    10461         the buffer.
      778    10462         */
      779    10463    1       IF B_EDEF_CUR$>=B_EDEF_END$ THEN

  10463  1 000002   000000 236000 xsym               LDQ     B_EDEF_CUR$
         1 000003   000000 116000 xsym               CMPQ    B_EDEF_END$
         1 000004   000014 602000 1                  TNC     s:10472

      780    10464    2       DO;

      781    10465    2           CALL XUO$OUWRITE(%TYPEDEF);

  10465  1 000005   000000 630400 2                  EPPR0   0
         1 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000007   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000010   000000 011000                    NOP     0

      782    10466    2           B_EDEF_PAGE=B_EDEF_PAGE+1;

  10466  1 000011   000000 054000 xsym               AOS     B_EDEF_PAGE

      783    10467    2           B_EDEF_CUR$=B_EDEF_BASE$;

  10467  1 000012   000000 236000 xsym               LDQ     B_EDEF_BASE$
         1 000013   000000 756000 xsym               STQ     B_EDEF_CUR$

      784    10468    2           END;

      785    10469         /*
      786    10470         The following will build the procedure entry definition.
      787    10471         */
      788    10472    1       EDEF_CUR$=B_EDEF_CUR$;

  10472  1 000014   200013 756100                    STQ     EDEF_CUR$,,AUTO

      789    10473    1       B$EDEF.OU.SECTNUM=P_SECTION_NUMBER;

PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:89   
  10473  1 000015   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         1 000016   200013 471500                    LDP1    EDEF_CUR$,,AUTO
         1 000017   000000 236100                    LDQ     0,,PR0
         1 000020   000022 736000                    QLS     18
         1 000021   100000 552120                    STBQ    0,'20'O,PR1

      790    10474    1       B$EDEF.OU.OFFSET=P_SECTION_OFFSET;

  10474  1 000022   200004 473500                    LDP3    @P_SECTION_OFFSET,,AUTO
         1 000023   300000 720100                    LXL0    0,,PR3
         1 000024   100000 440100                    SXL0    0,,PR1

      791    10475    1       B$EDEF.NPOINTER=P_NAME_POINTER;

  10475  1 000025   200005 474500                    LDP4    @P_NAME_POINTER,,AUTO
         1 000026   400000 721100                    LXL1    0,,PR4
         1 000027   100001 741100                    STX1    1,,PR1

      792    10476    1       B$EDEF.PRI=P_ENTRY_FLAG;

  10476  1 000030   200006 475500                    LDP5    @P_ENTRY_FLAG,,AUTO
         1 000031   003100 060500                    CSL     bolr='003'O
         1 000032   500000 000001                    BDSC    0,,PR5                   by=0,bit=0,n=1
         1 000033   100001 400001                    BDSC    1,,PR1                   by=2,bit=0,n=1

      793    10477    1       B$EDEF.ALT=P_ALTRETURN_FLAG;

  10477  1 000034   200007 476500                    LDP6    @P_ALTRETURN_FLAG,,AUTO
         1 000035   003100 060500                    CSL     bolr='003'O
         1 000036   600000 000001                    BDSC    0,,PR6                   by=0,bit=0,n=1
         1 000037   100001 410001                    BDSC    1,,PR1                   by=2,bit=1,n=1

      794    10478    1       B$EDEF.CHECK=P_ARGUMENT_CHECK_FLAG;

  10478  1 000040   200010 477500                    LDP7    @P_ARGUMENT_CHECK_FLAG,,AUTO
         1 000041   003100 060500                    CSL     bolr='003'O
         1 000042   700000 000001                    BDSC    0,,PR7                   by=0,bit=0,n=1
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:90   
         1 000043   100001 420001                    BDSC    1,,PR1                   by=2,bit=2,n=1

      795    10479    1       B$EDEF.CST=P_CALL_TYPE;

  10479  1 000044   200011 470500                    LDP0    @P_CALL_TYPE,,AUTO
         1 000045   000000 236100                    LDQ     0,,PR0
         1 000046   000013 736000                    QLS     11
         1 000047   100001 676100                    ERQ     1,,PR1
         1 000050   074000 376007                    ANQ     30720,DL
         1 000051   100001 656100                    ERSQ    1,,PR1

      796    10480    1       B$EDEF.NPARAM=P_NUMBER_ARGUMENTS;

  10480  1 000052   200012 470500                    LDP0    @P_NUMBER_ARGUMENTS,,AUTO
         1 000053   000000 236100                    LDQ     0,,PR0
         1 000054   100001 676100                    ERQ     1,,PR1
         1 000055   003777 376007                    ANQ     2047,DL
         1 000056   100001 656100                    ERSQ    1,,PR1

      797    10481    1       B_EDEF_COUNT=B_EDEF_COUNT+1;

  10481  1 000057   000000 054000 xsym               AOS     B_EDEF_COUNT

      798    10482    1       B_EDEF_CUR$=PINCRW(B_EDEF_CUR$,SIZEW(B$EDEF));

  10482  1 000060   000000 236000 xsym               LDQ     B_EDEF_CUR$
         1 000061   000002 036003                    ADLQ    2,DU
         1 000062   000000 756000 xsym               STQ     B_EDEF_CUR$

      799    10483    1       RETURN;

  10483  1 000063   000000 702200 xent               TSX2  ! X66_ARET
      800    10484    1   END XUO$EDEF;
      801    10485        %EOD;

PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:91   
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$EDEF.
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:92   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     7-0-0/w PTR         r     1 @P_ALTRETURN_FLAG
    10-0-0/w PTR         r     1 @P_ARGUMENT_CHECK_FLAG
    11-0-0/w PTR         r     1 @P_CALL_TYPE               6-0-0/w PTR         r     1 @P_ENTRY_FLAG
     5-0-0/w PTR         r     1 @P_NAME_POINTER           12-0-0/w PTR         r     1 @P_NUMBER_ARGUMENTS
     3-0-0/w PTR         r     1 @P_SECTION_NUMBER          4-0-0/w PTR         r     1 @P_SECTION_OFFSET
    13-0-0/w PTR         r     1 EDEF_CUR$                 *0-0-0/b BIT         r     1 P_ALTRETURN_FLAG
    *0-0-0/b BIT         r     1 P_ARGUMENT_CHECK_FLAG
    *0-0-0/w UBIN        r     1 P_CALL_TYPE               *0-0-0/b BIT         r     1 P_ENTRY_FLAG
    *0-0-0/w SBIN        r     1 P_NAME_POINTER            *0-0-0/w UBIN        r     1 P_NUMBER_ARGUMENTS
    *0-0-0/w UBIN        r     1 P_SECTION_NUMBER          *0-0-0/w UBIN        r     1 P_SECTION_OFFSET

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_EDEF_BASE$               0-0-0/w SBIN        r     1 B_EDEF_COUNT
     0-0-0/w PTR         r     1 B_EDEF_CUR$                0-0-0/w PTR         r     1 B_EDEF_END$
     0-0-0/w SBIN        r     1 B_EDEF_PAGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 B$EDEF


   Procedure XUO$EDEF requires 52 words for executable code.
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:93   
   Procedure XUO$EDEF requires 12 words of local(AUTO) storage.
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:94   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:95   
          MINI XREF LISTING

B$EDEF
     10323**DCL     10482--ASSIGN
B$EDEF.ALT
     10356**DCL     10477<<ASSIGN
B$EDEF.CHECK
     10361**DCL     10478<<ASSIGN
B$EDEF.CST
     10369**DCL     10479<<ASSIGN
B$EDEF.NPARAM
     10389**DCL     10480<<ASSIGN
B$EDEF.NPOINTER
     10348**DCL     10475<<ASSIGN
B$EDEF.OU
     10340**DCL     10346--REDEF
B$EDEF.OU.OFFSET
     10344**DCL     10474<<ASSIGN
B$EDEF.OU.SECTNUM
     10341**DCL     10473<<ASSIGN
B$EDEF.PRI
     10351**DCL     10476<<ASSIGN
B_EDEF_BASE$
     10404**DCL     10467>>ASSIGN
B_EDEF_COUNT
     10407**DCL     10481<<ASSIGN  10481>>ASSIGN
B_EDEF_CUR$
     10405**DCL     10463>>IF      10467<<ASSIGN  10472>>ASSIGN  10482<<ASSIGN  10482>>ASSIGN
B_EDEF_END$
     10406**DCL     10463>>IF
B_EDEF_PAGE
     10408**DCL     10466<<ASSIGN  10466>>ASSIGN
EDEF_CUR$
     10412**DCL     10323--IMP-PTR 10472<<ASSIGN  10473>>ASSIGN  10474>>ASSIGN  10475>>ASSIGN  10476>>ASSIGN
PL6.E3A0      #003=XUO$EDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:24 Page:96   
     10477>>ASSIGN  10478>>ASSIGN  10479>>ASSIGN  10480>>ASSIGN
P_ALTRETURN_FLAG
     10295**DCL       104--PROC    10477>>ASSIGN
P_ARGUMENT_CHECK_FLAG
     10296**DCL       104--PROC    10478>>ASSIGN
P_CALL_TYPE
     10297**DCL       104--PROC    10479>>ASSIGN
P_ENTRY_FLAG
     10294**DCL       104--PROC    10476>>ASSIGN
P_NAME_POINTER
     10293**DCL       104--PROC    10475>>ASSIGN
P_NUMBER_ARGUMENTS
     10298**DCL       104--PROC    10480>>ASSIGN
P_SECTION_NUMBER
     10291**DCL       104--PROC    10473>>ASSIGN
P_SECTION_OFFSET
     10292**DCL       104--PROC    10474>>ASSIGN
XUO$OUWRITE
     10435**DCL-ENT 10465--CALL

PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:97   
      802        1        /*M*     XUO$EREF -- THIS MODULE WILL BUILD OBJECT UNIT ENTREF RECORDS*/
      803        2        /*T***********************************************************/
      804        3        /*T*                                                         */
      805        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      806        5        /*T*                                                         */
      807        6        /*T***********************************************************/
      808        7        /*P*
      809        8
      810        9
      811       10        NAME:  XUO$EREF
      812       11               XUO$EREF --External Procedure Reference (Record Type 5)
      813       12
      814       13        PURPOSE:  To build an entry in the External Procedure Reference record
      815       14
      816       15        DESCRIPTION:  This routine builds an entry in the External
      817       16             Procedure Reference Record.  There is one record
      818       17             per object unit for external procedure references.
      819       18             There is one entry per name.
      820       19
      821       20        */
      822       21        /*D*
      823       22        CALL:  CALL XUO$EREF(Name Pointer,
      824       23                      Secondary Reference Flag,
      825       24                      Altreturn Flag,
      826       25                      Argument Check Flag,
      827       26                      Call Type,
      828       27                      Number Arguments,
      829       28                      Eref Number)
      830       29
      831       30        INPUT:
      832       31            Name Pointer        SBIN
      833       32                                The word displacement into the record of
      834       33                                referenced names (Record Type 2) locating
      835       34                                the name.
      836       35            Secondary Reference Flag BIT(1) UNALIGNED
      837       36                                Indicates that the reference is a secondary
      838       37                                reference and should not cause loading of a
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:98   
      839       38                                library routine.
      840       39            Altreturn Flag      BIT(1) UNALIGNED
      841       40                                Denotes permissible alternate return.
      842       41                                   0 - alternate return not allowed
      843       42                                   1 - alternate return allowed
      844       43            Argument Check Flag BIT(1) UNALIGNED
      845       44                                Denotes arguments/parameter check and alternate
      846       45                                return specification check.
      847       46                                   0 - do not check for matching arguments/
      848       47                                       parameters and alternate return
      849       48                                       specification
      850       49                                   1 - check for matching arguments/parameters
      851       50                                       and alternate return specification
      852       51           Call Type            UBIN
      853       52                                Denotes the calling sequence type
      854       53                                   0 = Standard CP-6 Callable Procedure
      855       54                                   1 = Nonstandard Call Type
      856       55                                   2 = Standard CP-6 Procedure with
      857       56                                       MAIN attribute
      858       57                                   3 = Standard CP-6 Procedure with
      859       58                                        ASYNC attribute
      860       59                                   4 = Standard CP-6 Function Procedure;
      861       60                                        a variable table entry will be
      862       61                                        present to define the attributes
      863       62                                        of the function.
      864       63                                   5 = Same as 0, except USE, AVOID, or
      865       64                                       MATERIALIZE attributes specified
      866       65                                   7 = Same as 2, except USE, AVOID, or
      867       66                                       MATERIALIZE attributes specified
      868       67                                   8 = Same as 3, except USE, AVOID, or
      869       68                                       MATERIALIZE attributes specified
      870       69                                   9 = Same as 4, except USE, AVOID, or
      871       70                                       MATERIALIZE attributes specified
      872       71                                  13 = GCOS domain, save
      873       72                                  14 = GCOS domain, no save
      874       73                                  15 = Non-Callable Procedure.
      875       74           Number Arguments    UBIN
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:99   
      876       75                               Denotes the number of parameters
      877       76
      878       77        OUTPUT:
      879       78           Eref Number         UBIN
      880       79                               The table entry number for the current External
      881       80                               Procedure Reference to be entered into the
      882       81                               External Procedure Reference record.  This value
      883       82                               is returned by the called routine.
      884       83
      885       84        B$OBJECT REFERENCE:  B$EREF
      886       85        */
      887       86        /*B*
      888       87        GLOBAL DATA:
      889       88            B_EREF_CUR$
      890       89            B_EREF_COUNT
      891       90            B_EREF_PAGE
      892       91
      893       92        INTERFACE:
      894       93            XUO$OUWRITE
      895       94
      896       95        */
      897       96
      898       97        XUO$EREF: PROC (P_NAME_POINTER,P_SREF_FLAG,P_ALTRETURN_FLAG,P_ARGUMENT_CHECK_FLAG,
                97            P_CALL_TYPE,
      899       98               P_NUMBER_ARGUMENTS,P_EREF_NUMBER);
      900       99         /*
      901      100            */
      902      101        %INCLUDE ZVA_SYSTEM_FILE;
      903     6352            %PAGE (ARG=INCLUDE);

              6365    1   /*******************************************************************************
              6366    1   *                                                                              *
              6367    1   *        INCLUDE              INCLUDE                                              *
              6368    1   *                                                                              *
              6369    1   *******************************************************************************/

      904     6373        %INCLUDE B$OBJECT_C;
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:100  
      905     9803        %INCLUDE XUO$OBJ_C;
      906    10213            %PAGE (ARG=SUBS);

             10226    1   /*******************************************************************************
             10227    1   *                                                                              *
             10228    1   *        SUBS              SUBS                                                  *
             10229    1   *                                                                              *
             10230    1   *******************************************************************************/

      907    10234            %B$RECORDSUBS;
      908    10262        %PLIST;
      909    10263            %PAGE (ARG=PARAMETERS);

             10276    1   /*******************************************************************************
             10277    1   *                                                                              *
             10278    1   *        PARAMETERS              PARAMETERS                                        *
             10279    1   *                                                                              *
             10280    1   *******************************************************************************/

      910    10284    1   DCL P_NAME_POINTER SBIN;
      911    10285    1   DCL P_SREF_FLAG BIT(1) UNAL;
      912    10286    1   DCL P_ALTRETURN_FLAG BIT(1) UNAL;
      913    10287    1   DCL P_ARGUMENT_CHECK_FLAG BIT(1) UNAL;
      914    10288    1   DCL P_CALL_TYPE UBIN;
      915    10289    1   DCL P_NUMBER_ARGUMENTS UBIN;
      916    10290    1   DCL P_EREF_NUMBER UBIN;
      917    10291         /*
      918    10292            */
      919    10293        %PAGE (ARG=PROC REF DATA);

             10306    1   /*******************************************************************************
             10307    1   *                                                                              *
             10308    1   *        PROC REF DATA              PROC REF DATA                                  *
             10309    1   *                                                                              *
             10310    1   *******************************************************************************/

      920    10314        %B$EREF (STCLASS="BASED(EREF_CUR$)");
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:101  
      921    10357        %B_EREF_POINTERS;
      922    10377    1   DCL EREF_CUR$ PTR;
      923    10378        %PLIST;
      924    10379        %PAGE (ARG=ENTRY DCLS);

             10392    1   /*******************************************************************************
             10393    1   *                                                                              *
             10394    1   *        ENTRY DCLS              ENTRY DCLS                                        *
             10395    1   *                                                                              *
             10396    1   *******************************************************************************/

      925    10400    1   DCL XUO$OUWRITE ENTRY(2);
      926    10401        %PAGE (ARG=CODE);

             10414    1   /*******************************************************************************
             10415    1   *                                                                              *
             10416    1   *        CODE              CODE                                                  *
             10417    1   *                                                                              *
             10418    1   *******************************************************************************/

      927    10422         /*
      928    10423         The following will check to see if the passed information will
      929    10424         fit in the current record. If not, the current record will be
      930    10425         written and pointer re-initialized. Then the text will be moved
      931    10426         to the buffer.
      932    10427         */
      933    10428    1       IF B_EREF_CUR$>=B_EREF_END$ THEN
      934    10429    2       DO;
      935    10430    2           CALL XUO$OUWRITE(%TYPEREF);
      936    10431    2           B_EREF_PAGE=B_EREF_PAGE+1;
      937    10432    2           B_EREF_CUR$=B_EREF_BASE$;
      938    10433    2           END;
      939    10434         /*
      940    10435         The following will build the procedure entry reference.
      941    10436         */
      942    10437    1       EREF_CUR$=B_EREF_CUR$;
      943    10438    1       B$EREF.NPOINTER=P_NAME_POINTER;
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:102  
      944    10439    1       B$EREF.SREF=P_SREF_FLAG;
      945    10440    1       B$EREF.ALT=P_ALTRETURN_FLAG;
      946    10441    1       B$EREF.CHECK=P_ARGUMENT_CHECK_FLAG;
      947    10442    1       B$EREF.CST=P_CALL_TYPE;
      948    10443    1       B$EREF.NPARAM=P_NUMBER_ARGUMENTS;
      949    10444    1       B_EREF_COUNT=B_EREF_COUNT+1;
      950    10445    1       P_EREF_NUMBER=B_EREF_COUNT;
      951    10446    1       B_EREF_CUR$=PINCRW(B_EREF_CUR$,SIZEW(B$EREF));
      952    10447    1       RETURN;
      953    10448    1   END XUO$EREF;
      954    10449        %EOD;

PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:103  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$EREF.

   Procedure XUO$EREF requires 48 words for executable code.
   Procedure XUO$EREF requires 12 words of local(AUTO) storage.

PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:104  

 Object Unit name= XUO$EREF                                   File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:25:17.64 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    48     60  XUO$EREF
    2  RoData even  none     1      1  XUO$EREF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        7  XUO$EREF

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_EREF_BASE$                          B_EREF_CUR$
     B_EREF_END$                           B_EREF_COUNT                          B_EREF_PAGE
     B_VECTNIL
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:105  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:106  


      802        1        /*M*     XUO$EREF -- THIS MODULE WILL BUILD OBJECT UNIT ENTREF RECORDS*/
      803        2        /*T***********************************************************/
      804        3        /*T*                                                         */
      805        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      806        5        /*T*                                                         */
      807        6        /*T***********************************************************/
      808        7        /*P*
      809        8
      810        9
      811       10        NAME:  XUO$EREF
      812       11               XUO$EREF --External Procedure Reference (Record Type 5)
      813       12
      814       13        PURPOSE:  To build an entry in the External Procedure Reference record
      815       14
      816       15        DESCRIPTION:  This routine builds an entry in the External
      817       16             Procedure Reference Record.  There is one record
      818       17             per object unit for external procedure references.
      819       18             There is one entry per name.
      820       19
      821       20        */
      822       21        /*D*
      823       22        CALL:  CALL XUO$EREF(Name Pointer,
      824       23                      Secondary Reference Flag,
      825       24                      Altreturn Flag,
      826       25                      Argument Check Flag,
      827       26                      Call Type,
      828       27                      Number Arguments,
      829       28                      Eref Number)
      830       29
      831       30        INPUT:
      832       31            Name Pointer        SBIN
      833       32                                The word displacement into the record of
      834       33                                referenced names (Record Type 2) locating
      835       34                                the name.
      836       35            Secondary Reference Flag BIT(1) UNALIGNED
      837       36                                Indicates that the reference is a secondary
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:107  
      838       37                                reference and should not cause loading of a
      839       38                                library routine.
      840       39            Altreturn Flag      BIT(1) UNALIGNED
      841       40                                Denotes permissible alternate return.
      842       41                                   0 - alternate return not allowed
      843       42                                   1 - alternate return allowed
      844       43            Argument Check Flag BIT(1) UNALIGNED
      845       44                                Denotes arguments/parameter check and alternate
      846       45                                return specification check.
      847       46                                   0 - do not check for matching arguments/
      848       47                                       parameters and alternate return
      849       48                                       specification
      850       49                                   1 - check for matching arguments/parameters
      851       50                                       and alternate return specification
      852       51           Call Type            UBIN
      853       52                                Denotes the calling sequence type
      854       53                                   0 = Standard CP-6 Callable Procedure
      855       54                                   1 = Nonstandard Call Type
      856       55                                   2 = Standard CP-6 Procedure with
      857       56                                       MAIN attribute
      858       57                                   3 = Standard CP-6 Procedure with
      859       58                                        ASYNC attribute
      860       59                                   4 = Standard CP-6 Function Procedure;
      861       60                                        a variable table entry will be
      862       61                                        present to define the attributes
      863       62                                        of the function.
      864       63                                   5 = Same as 0, except USE, AVOID, or
      865       64                                       MATERIALIZE attributes specified
      866       65                                   7 = Same as 2, except USE, AVOID, or
      867       66                                       MATERIALIZE attributes specified
      868       67                                   8 = Same as 3, except USE, AVOID, or
      869       68                                       MATERIALIZE attributes specified
      870       69                                   9 = Same as 4, except USE, AVOID, or
      871       70                                       MATERIALIZE attributes specified
      872       71                                  13 = GCOS domain, save
      873       72                                  14 = GCOS domain, no save
      874       73                                  15 = Non-Callable Procedure.
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:108  
      875       74           Number Arguments    UBIN
      876       75                               Denotes the number of parameters
      877       76
      878       77        OUTPUT:
      879       78           Eref Number         UBIN
      880       79                               The table entry number for the current External
      881       80                               Procedure Reference to be entered into the
      882       81                               External Procedure Reference record.  This value
      883       82                               is returned by the called routine.
      884       83
      885       84        B$OBJECT REFERENCE:  B$EREF
      886       85        */
      887       86        /*B*
      888       87        GLOBAL DATA:
      889       88            B_EREF_CUR$
      890       89            B_EREF_COUNT
      891       90            B_EREF_PAGE
      892       91
      893       92        INTERFACE:
      894       93            XUO$OUWRITE
      895       94
      896       95        */
      897       96
      898       97        XUO$EREF: PROC (P_NAME_POINTER,P_SREF_FLAG,P_ALTRETURN_FLAG,P_ARGUMENT_CHECK_FLAG,
                97            P_CALL_TYPE,

     97  1 000000   000000 700200 xent  XUO$EREF     TSX0  ! X66_AUTO_N
         1 000001   000014 000007                    ZERO    12,7

      899       98               P_NUMBER_ARGUMENTS,P_EREF_NUMBER);
      900       99         /*
      901      100            */
      902      101        %INCLUDE ZVA_SYSTEM_FILE;
      903     6352            %PAGE (ARG=INCLUDE);

              6365    1   /*******************************************************************************
              6366    1   *                                                                              *
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:109  
              6367    1   *        INCLUDE              INCLUDE                                             *
              6368    1   *                                                                              *
              6369    1   *******************************************************************************/

      904     6373        %INCLUDE B$OBJECT_C;
      905     9803        %INCLUDE XUO$OBJ_C;
      906    10213            %PAGE (ARG=SUBS);

             10226    1   /*******************************************************************************
             10227    1   *                                                                              *
             10228    1   *        SUBS              SUBS                                                  *
             10229    1   *                                                                              *
             10230    1   *******************************************************************************/

      907    10234            %B$RECORDSUBS;
      908    10262        %PLIST;
      909    10263            %PAGE (ARG=PARAMETERS);

             10276    1   /*******************************************************************************
             10277    1   *                                                                              *
             10278    1   *        PARAMETERS              PARAMETERS                                       *
             10279    1   *                                                                              *
             10280    1   *******************************************************************************/

      910    10284    1   DCL P_NAME_POINTER SBIN;
      911    10285    1   DCL P_SREF_FLAG BIT(1) UNAL;
      912    10286    1   DCL P_ALTRETURN_FLAG BIT(1) UNAL;
      913    10287    1   DCL P_ARGUMENT_CHECK_FLAG BIT(1) UNAL;
      914    10288    1   DCL P_CALL_TYPE UBIN;
      915    10289    1   DCL P_NUMBER_ARGUMENTS UBIN;
      916    10290    1   DCL P_EREF_NUMBER UBIN;
      917    10291         /*
      918    10292            */
      919    10293        %PAGE (ARG=PROC REF DATA);

             10306    1   /*******************************************************************************
             10307    1   *                                                                              *
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:110  
             10308    1   *        PROC REF DATA              PROC REF DATA                                 *
             10309    1   *                                                                              *
             10310    1   *******************************************************************************/

      920    10314        %B$EREF (STCLASS="BASED(EREF_CUR$)");
      921    10357        %B_EREF_POINTERS;
      922    10377    1   DCL EREF_CUR$ PTR;
      923    10378        %PLIST;
      924    10379        %PAGE (ARG=ENTRY DCLS);

             10392    1   /*******************************************************************************
             10393    1   *                                                                              *
             10394    1   *        ENTRY DCLS              ENTRY DCLS                                       *
             10395    1   *                                                                              *
             10396    1   *******************************************************************************/

      925    10400    1   DCL XUO$OUWRITE ENTRY(2);
      926    10401        %PAGE (ARG=CODE);

             10414    1   /*******************************************************************************
             10415    1   *                                                                              *
             10416    1   *        CODE              CODE                                                  *
             10417    1   *                                                                              *
             10418    1   *******************************************************************************/

      927    10422         /*
      928    10423         The following will check to see if the passed information will
      929    10424         fit in the current record. If not, the current record will be
      930    10425         written and pointer re-initialized. Then the text will be moved
      931    10426         to the buffer.
      932    10427         */
      933    10428    1       IF B_EREF_CUR$>=B_EREF_END$ THEN

  10428  1 000002   000000 236000 xsym               LDQ     B_EREF_CUR$
         1 000003   000000 116000 xsym               CMPQ    B_EREF_END$
         1 000004   000014 602000 1                  TNC     s:10437

PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:111  
      934    10429    2       DO;

      935    10430    2           CALL XUO$OUWRITE(%TYPEREF);

  10430  1 000005   000000 630400 2                  EPPR0   0
         1 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000007   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000010   000000 011000                    NOP     0

      936    10431    2           B_EREF_PAGE=B_EREF_PAGE+1;

  10431  1 000011   000000 054000 xsym               AOS     B_EREF_PAGE

      937    10432    2           B_EREF_CUR$=B_EREF_BASE$;

  10432  1 000012   000000 236000 xsym               LDQ     B_EREF_BASE$
         1 000013   000000 756000 xsym               STQ     B_EREF_CUR$

      938    10433    2           END;

      939    10434         /*
      940    10435         The following will build the procedure entry reference.
      941    10436         */
      942    10437    1       EREF_CUR$=B_EREF_CUR$;

  10437  1 000014   200012 756100                    STQ     EREF_CUR$,,AUTO

      943    10438    1       B$EREF.NPOINTER=P_NAME_POINTER;

  10438  1 000015   200003 470500                    LDP0    @P_NAME_POINTER,,AUTO
         1 000016   000000 720100                    LXL0    0,,PR0
         1 000017   200012 471500                    LDP1    EREF_CUR$,,AUTO
         1 000020   100000 740100                    STX0    0,,PR1

      944    10439    1       B$EREF.SREF=P_SREF_FLAG;

  10439  1 000021   200004 473500                    LDP3    @P_SREF_FLAG,,AUTO
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:112  
         1 000022   003100 060500                    CSL     bolr='003'O
         1 000023   300000 000001                    BDSC    0,,PR3                   by=0,bit=0,n=1
         1 000024   100000 400001                    BDSC    0,,PR1                   by=2,bit=0,n=1

      945    10440    1       B$EREF.ALT=P_ALTRETURN_FLAG;

  10440  1 000025   200005 474500                    LDP4    @P_ALTRETURN_FLAG,,AUTO
         1 000026   003100 060500                    CSL     bolr='003'O
         1 000027   400000 000001                    BDSC    0,,PR4                   by=0,bit=0,n=1
         1 000030   100000 410001                    BDSC    0,,PR1                   by=2,bit=1,n=1

      946    10441    1       B$EREF.CHECK=P_ARGUMENT_CHECK_FLAG;

  10441  1 000031   200006 475500                    LDP5    @P_ARGUMENT_CHECK_FLAG,,AUTO
         1 000032   003100 060500                    CSL     bolr='003'O
         1 000033   500000 000001                    BDSC    0,,PR5                   by=0,bit=0,n=1
         1 000034   100000 420001                    BDSC    0,,PR1                   by=2,bit=2,n=1

      947    10442    1       B$EREF.CST=P_CALL_TYPE;

  10442  1 000035   200007 476500                    LDP6    @P_CALL_TYPE,,AUTO
         1 000036   600000 236100                    LDQ     0,,PR6
         1 000037   000013 736000                    QLS     11
         1 000040   100000 676100                    ERQ     0,,PR1
         1 000041   074000 376007                    ANQ     30720,DL
         1 000042   100000 656100                    ERSQ    0,,PR1

      948    10443    1       B$EREF.NPARAM=P_NUMBER_ARGUMENTS;

  10443  1 000043   200010 477500                    LDP7    @P_NUMBER_ARGUMENTS,,AUTO
         1 000044   700000 236100                    LDQ     0,,PR7
         1 000045   100000 676100                    ERQ     0,,PR1
         1 000046   003777 376007                    ANQ     2047,DL
         1 000047   100000 656100                    ERSQ    0,,PR1

      949    10444    1       B_EREF_COUNT=B_EREF_COUNT+1;

PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:113  
  10444  1 000050   000000 054000 xsym               AOS     B_EREF_COUNT

      950    10445    1       P_EREF_NUMBER=B_EREF_COUNT;

  10445  1 000051   000000 235000 xsym               LDA     B_EREF_COUNT
         1 000052   200011 470500                    LDP0    @P_EREF_NUMBER,,AUTO
         1 000053   000000 755100                    STA     0,,PR0

      951    10446    1       B_EREF_CUR$=PINCRW(B_EREF_CUR$,SIZEW(B$EREF));

  10446  1 000054   000000 236000 xsym               LDQ     B_EREF_CUR$
         1 000055   000001 036003                    ADLQ    1,DU
         1 000056   000000 756000 xsym               STQ     B_EREF_CUR$

      952    10447    1       RETURN;

  10447  1 000057   000000 702200 xent               TSX2  ! X66_ARET
      953    10448    1   END XUO$EREF;
      954    10449        %EOD;

PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:114  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$EREF.
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:115  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @P_ALTRETURN_FLAG
     6-0-0/w PTR         r     1 @P_ARGUMENT_CHECK_FLAG
     7-0-0/w PTR         r     1 @P_CALL_TYPE              11-0-0/w PTR         r     1 @P_EREF_NUMBER
     3-0-0/w PTR         r     1 @P_NAME_POINTER           10-0-0/w PTR         r     1 @P_NUMBER_ARGUMENTS
     4-0-0/w PTR         r     1 @P_SREF_FLAG              12-0-0/w PTR         r     1 EREF_CUR$
    *0-0-0/b BIT         r     1 P_ALTRETURN_FLAG
    *0-0-0/b BIT         r     1 P_ARGUMENT_CHECK_FLAG
    *0-0-0/w UBIN        r     1 P_CALL_TYPE               *0-0-0/w UBIN        r     1 P_EREF_NUMBER
    *0-0-0/w SBIN        r     1 P_NAME_POINTER            *0-0-0/w UBIN        r     1 P_NUMBER_ARGUMENTS
    *0-0-0/b BIT         r     1 P_SREF_FLAG

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_EREF_BASE$               0-0-0/w SBIN        r     1 B_EREF_COUNT
     0-0-0/w PTR         r     1 B_EREF_CUR$                0-0-0/w PTR         r     1 B_EREF_END$
     0-0-0/w SBIN        r     1 B_EREF_PAGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 B$EREF


   Procedure XUO$EREF requires 48 words for executable code.
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:116  
   Procedure XUO$EREF requires 12 words of local(AUTO) storage.
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:117  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:118  
          MINI XREF LISTING

B$EREF
     10315**DCL     10446--ASSIGN
B$EREF.ALT
     10322**DCL     10440<<ASSIGN
B$EREF.CHECK
     10326**DCL     10441<<ASSIGN
B$EREF.CST
     10334**DCL     10442<<ASSIGN
B$EREF.NPARAM
     10354**DCL     10443<<ASSIGN
B$EREF.NPOINTER
     10316**DCL     10438<<ASSIGN
B$EREF.SREF
     10319**DCL     10439<<ASSIGN
B_EREF_BASE$
     10369**DCL     10432>>ASSIGN
B_EREF_COUNT
     10372**DCL     10444<<ASSIGN  10444>>ASSIGN  10445>>ASSIGN
B_EREF_CUR$
     10370**DCL     10428>>IF      10432<<ASSIGN  10437>>ASSIGN  10446<<ASSIGN  10446>>ASSIGN
B_EREF_END$
     10371**DCL     10428>>IF
B_EREF_PAGE
     10373**DCL     10431<<ASSIGN  10431>>ASSIGN
EREF_CUR$
     10377**DCL     10315--IMP-PTR 10437<<ASSIGN  10438>>ASSIGN  10439>>ASSIGN  10440>>ASSIGN  10441>>ASSIGN
     10442>>ASSIGN  10443>>ASSIGN
P_ALTRETURN_FLAG
     10286**DCL        97--PROC    10440>>ASSIGN
P_ARGUMENT_CHECK_FLAG
     10287**DCL        97--PROC    10441>>ASSIGN
P_CALL_TYPE
PL6.E3A0      #004=XUO$EREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:119  
     10288**DCL        97--PROC    10442>>ASSIGN
P_EREF_NUMBER
     10290**DCL        97--PROC    10445<<ASSIGN
P_NAME_POINTER
     10284**DCL        97--PROC    10438>>ASSIGN
P_NUMBER_ARGUMENTS
     10289**DCL        97--PROC    10443>>ASSIGN
P_SREF_FLAG
     10285**DCL        97--PROC    10439>>ASSIGN
XUO$OUWRITE
     10400**DCL-ENT 10430--CALL

PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:120  
      955        1        /*M*     XUO$SDEF -- THIS MODULE WILL BUILD OBJECT UNIT SYMDEF RECORDS*/
      956        2        /*T***********************************************************/
      957        3        /*T*                                                         */
      958        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      959        5        /*T*                                                         */
      960        6        /*T***********************************************************/
      961        7        /*P*
      962        8
      963        9
      964       10        NAME:  XUO$SDEF
      965       11               XUO$SDEF --External Data Definition Record (Record Type 6)
      966       12
      967       13        PURPOSE:  To build an entry in the External Data Definition Record
      968       14
      969       15        DESCRIPTION:  This routine builds an entry in the External
      970       16            Data Definition record for NON constant entries.
      971       17
      972       18        */
      973       19        /*D*
      974       20
      975       21        CALL:  CALL XUO$SDEF (Name Pointer,
      976       22                       Section  Number,
      977       23                       Section Offset)
      978       24
      979       25        INPUT:
      980       26            Name Pointer        UBIN ALIGNED
      981       27                                Word offset into the Externally
      982       28                                Defined names record (type 1)
      983       29                                locating the name.
      984       30            Section Number      UBIN ALIGNED
      985       31                                An entry into the Control Section
      986       32                                record.
      987       33            Section Offset      UBIN ALIGNED
      988       34                                Word offset from the origin of
      989       35                                the section.
      990       36
      991       37        OUTPUT:  none
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:121  
      992       38
      993       39        B$OBJECT REFERENCE:  B$SDEF
      994       40        */
      995       41        /*B*
      996       42        GLOBAL DATA:
      997       43            B_SDEF_CUR$
      998       44            B_SDEF_COUNT
      999       45            B_SDEF_PAGE
     1000       46
     1001       47        INTERFACE:
     1002       48            XUO$OUWRITE
     1003       49
     1004       50        */
     1005       51
     1006       52        XUO$SDEF: PROC(P_NAME_POINTER,P_PARAM2,P_SECTION_OFFSET);
     1007       53         /*
     1008       54            */
     1009       55        %INCLUDE ZVA_SYSTEM_FILE;
     1010     6306        %PAGE (ARG=INCLUDES);

              6319    1   /*******************************************************************************
              6320    1   *                                                                              *
              6321    1   *        INCLUDES              INCLUDES                                            *
              6322    1   *                                                                              *
              6323    1   *******************************************************************************/

     1011     6327        %INCLUDE B$OBJECT_C;
     1012     9757        %INCLUDE XUO$OBJ_C;
     1013    10167        %PAGE (ARG=SUBS);

             10180    1   /*******************************************************************************
             10181    1   *                                                                              *
             10182    1   *        SUBS              SUBS                                                  *
             10183    1   *                                                                              *
             10184    1   *******************************************************************************/

     1014    10188        %B$RECORDSUBS;
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:122  
     1015    10216        %PLIST;
     1016    10217        %PAGE (ARG=PARAMTERS);

             10230    1   /*******************************************************************************
             10231    1   *                                                                              *
             10232    1   *        PARAMTERS              PARAMTERS                                          *
             10233    1   *                                                                              *
             10234    1   *******************************************************************************/

     1017    10238    1   DCL P_NAME_POINTER SBIN;
     1018    10239    1   DCL P_PARAM2 UBIN;
     1019    10240         /*
     1020    10241         The following definition is for XUO$SDEF
     1021    10242            */
     1022    10243    1   DCL P_SECTION_NUMBER REDEF P_PARAM2 UBIN;
     1023    10244         /*
     1024    10245         The following definition is for XUO$SDEF_CONST
     1025    10246         */
     1026    10247    1   DCL P_CONST_VALUE REDEF P_PARAM2 UBIN;
     1027    10248         /**/
     1028    10249    1   DCL P_SECTION_OFFSET UBIN;
     1029    10250         /*
     1030    10251            */
     1031    10252        %PAGE (ARG=SDEF DATA);

             10265    1   /*******************************************************************************
             10266    1   *                                                                              *
             10267    1   *        SDEF DATA              SDEF DATA                                          *
             10268    1   *                                                                              *
             10269    1   *******************************************************************************/

     1032    10273        %B$SDEF (STCLASS="BASED(B_SDEF_CUR$)");
     1033    10327        %B_SDEF_POINTERS;
     1034    10347        %PLIST;
     1035    10348        %PAGE (ARG=ENTRY DCLS);

             10361    1   /*******************************************************************************
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:123  
             10362    1   *                                                                              *
             10363    1   *        ENTRY DCLS              ENTRY DCLS                                        *
             10364    1   *                                                                              *
             10365    1   *******************************************************************************/

     1036    10369    1   DCL XUO$OUWRITE ENTRY(2);
     1037    10370        %PAGE (ARG=LOCAL DATA);

             10383    1   /*******************************************************************************
             10384    1   *                                                                              *
             10385    1   *        LOCAL DATA              LOCAL DATA                                        *
             10386    1   *                                                                              *
             10387    1   *******************************************************************************/

     1038    10391    1   DCL SDEF_CONSTANT_FLAG BIT(1); /*0->XUO$SDEF*/
     1039    10392         /*1->XUO$SDEF_CONST*/
     1040    10393        %PAGE (ARG=CODE);

             10406    1   /*******************************************************************************
             10407    1   *                                                                              *
             10408    1   *        CODE              CODE                                                  *
             10409    1   *                                                                              *
             10410    1   *******************************************************************************/

     1041    10414    1       SDEF_CONSTANT_FLAG='0'B;
     1042    10415    1       GOTO SDEF_COMMON;
     1043    10416        /*D*
     1044    10417
     1045    10418        XUO$SDEF_CONST --External Data Definition Record (Record Type 6)
     1046    10419
     1047    10420        NAME:  XUO$SDEF_CONST
     1048    10421
     1049    10422        PURPOSE:  To build an entry in the External Data Definition Record
     1050    10423
     1051    10424        DESCRIPTION:  This routine generates entries in the External
     1052    10425            Data Definition record for constant entries.
     1053    10426
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:124  
     1054    10427        CALL:  CALL XUO$SDEF_CONST (Name Pointer,
     1055    10428                             Constant Value)
     1056    10429
     1057    10430        INPUT:
     1058    10431            Name Pointer        UBIN ALIGNED
     1059    10432                                Word offset into the Externally
     1060    10433                                Defined names record (type 1)
     1061    10434                                locating the name.
     1062    10435            Constant Value      UBIN ALIGNED
     1063    10436                                The constant SYMDEF
     1064    10437
     1065    10438        OUTPUT:  none
     1066    10439
     1067    10440        B$OBJECT REFERENCE:  B$SDEF
     1068    10441        */
     1069    10442
     1070    10443        /*B*
     1071    10444        GLOBAL DATA:
     1072    10445            B_SDEF_CUR$
     1073    10446            B_SDEF_COUNT
     1074    10447            B_SDEF_PAGE
     1075    10448
     1076    10449        INTERFACE:
     1077    10450            XUO$OUWRITE
     1078    10451
     1079    10452        */
     1080    10453
     1081    10454    1   XUO$SDEF_CONST: ENTRY(P_NAME_POINTER,P_PARAM2);
     1082    10455         /*
     1083    10456            */
     1084    10457    1       SDEF_CONSTANT_FLAG='1'B;
     1085    10458         /*
     1086    10459            */
     1087    10460    1   SDEF_COMMON: ;
     1088    10461         /*
     1089    10462         The following will check to see if the passed information will
     1090    10463         fit in the current record. If not, the current record will be
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:125  
     1091    10464         written and pointer re-initialized. Then the text will be moved
     1092    10465         to the buffer.
     1093    10466         */
     1094    10467    1       IF B_SDEF_CUR$>=B_SDEF_END$ THEN
     1095    10468    2       DO;
     1096    10469    2           CALL XUO$OUWRITE(%TYPSDEF);
     1097    10470    2           B_SDEF_PAGE=B_SDEF_PAGE+1;
     1098    10471    2           B_SDEF_CUR$=B_SDEF_BASE$;
     1099    10472    2           END;
     1100    10473         /*
     1101    10474         The following will build the symdef data table.
     1102    10475         */
     1103    10476    1       IF SDEF_CONSTANT_FLAG THEN
     1104    10477    2       DO;
     1105    10478    2           B$SDEF.VALUE=P_CONST_VALUE;
     1106    10479    2           B$SDEF.CONSTNT='1'B;
     1107    10480    2           END;
     1108    10481    1       ELSE
     1109    10482    2       DO;
     1110    10483    2           B$SDEF.AD.OU.SECTNUM=P_SECTION_NUMBER;
     1111    10484    2           B$SDEF.AD.OU.OFFSET=P_SECTION_OFFSET;
     1112    10485    2           END;
     1113    10486    1       B$SDEF.NPOINTER=P_NAME_POINTER;
     1114    10487    1       B_SDEF_COUNT=B_SDEF_COUNT+1;
     1115    10488    1       B_SDEF_CUR$=PINCRW(B_SDEF_CUR$,SIZEW(B$SDEF));
     1116    10489    1       RETURN;
     1117    10490    1   END XUO$SDEF;
     1118    10491        %EOD;

PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:126  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$SDEF.

   Procedure XUO$SDEF requires 46 words for executable code.
   Procedure XUO$SDEF requires 8 words of local(AUTO) storage.

PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:127  

 Object Unit name= XUO$SDEF                                   File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:25:48.48 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    46     56  XUO$SDEF
    2  RoData even  none     1      1  XUO$SDEF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        3  XUO$SDEF
     1      4                  yes      Std        2  XUO$SDEF_CONST

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:128  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_SDEF_BASE$                          B_SDEF_CUR$
     B_SDEF_END$                           B_SDEF_COUNT                          B_SDEF_PAGE
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:129  


      955        1        /*M*     XUO$SDEF -- THIS MODULE WILL BUILD OBJECT UNIT SYMDEF RECORDS*/
      956        2        /*T***********************************************************/
      957        3        /*T*                                                         */
      958        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      959        5        /*T*                                                         */
      960        6        /*T***********************************************************/
      961        7        /*P*
      962        8
      963        9
      964       10        NAME:  XUO$SDEF
      965       11               XUO$SDEF --External Data Definition Record (Record Type 6)
      966       12
      967       13        PURPOSE:  To build an entry in the External Data Definition Record
      968       14
      969       15        DESCRIPTION:  This routine builds an entry in the External
      970       16            Data Definition record for NON constant entries.
      971       17
      972       18        */
      973       19        /*D*
      974       20
      975       21        CALL:  CALL XUO$SDEF (Name Pointer,
      976       22                       Section  Number,
      977       23                       Section Offset)
      978       24
      979       25        INPUT:
      980       26            Name Pointer        UBIN ALIGNED
      981       27                                Word offset into the Externally
      982       28                                Defined names record (type 1)
      983       29                                locating the name.
      984       30            Section Number      UBIN ALIGNED
      985       31                                An entry into the Control Section
      986       32                                record.
      987       33            Section Offset      UBIN ALIGNED
      988       34                                Word offset from the origin of
      989       35                                the section.
      990       36
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:130  
      991       37        OUTPUT:  none
      992       38
      993       39        B$OBJECT REFERENCE:  B$SDEF
      994       40        */
      995       41        /*B*
      996       42        GLOBAL DATA:
      997       43            B_SDEF_CUR$
      998       44            B_SDEF_COUNT
      999       45            B_SDEF_PAGE
     1000       46
     1001       47        INTERFACE:
     1002       48            XUO$OUWRITE
     1003       49
     1004       50        */
     1005       51
     1006       52        XUO$SDEF: PROC(P_NAME_POINTER,P_PARAM2,P_SECTION_OFFSET);

     52  1 000000   000000 700200 xent  XUO$SDEF     TSX0  ! X66_AUTO_3
         1 000001   000010 000003                    ZERO    8,3

     1007       53         /*
     1008       54            */
     1009       55        %INCLUDE ZVA_SYSTEM_FILE;
     1010     6306        %PAGE (ARG=INCLUDES);

              6319    1   /*******************************************************************************
              6320    1   *                                                                              *
              6321    1   *        INCLUDES              INCLUDES                                           *
              6322    1   *                                                                              *
              6323    1   *******************************************************************************/

     1011     6327        %INCLUDE B$OBJECT_C;
     1012     9757        %INCLUDE XUO$OBJ_C;
     1013    10167        %PAGE (ARG=SUBS);

             10180    1   /*******************************************************************************
             10181    1   *                                                                              *
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:131  
             10182    1   *        SUBS              SUBS                                                  *
             10183    1   *                                                                              *
             10184    1   *******************************************************************************/

     1014    10188        %B$RECORDSUBS;
     1015    10216        %PLIST;
     1016    10217        %PAGE (ARG=PARAMTERS);

             10230    1   /*******************************************************************************
             10231    1   *                                                                              *
             10232    1   *        PARAMTERS              PARAMTERS                                         *
             10233    1   *                                                                              *
             10234    1   *******************************************************************************/

     1017    10238    1   DCL P_NAME_POINTER SBIN;
     1018    10239    1   DCL P_PARAM2 UBIN;
     1019    10240         /*
     1020    10241         The following definition is for XUO$SDEF
     1021    10242            */
     1022    10243    1   DCL P_SECTION_NUMBER REDEF P_PARAM2 UBIN;
     1023    10244         /*
     1024    10245         The following definition is for XUO$SDEF_CONST
     1025    10246         */
     1026    10247    1   DCL P_CONST_VALUE REDEF P_PARAM2 UBIN;
     1027    10248         /**/
     1028    10249    1   DCL P_SECTION_OFFSET UBIN;
     1029    10250         /*
     1030    10251            */
     1031    10252        %PAGE (ARG=SDEF DATA);

             10265    1   /*******************************************************************************
             10266    1   *                                                                              *
             10267    1   *        SDEF DATA              SDEF DATA                                         *
             10268    1   *                                                                              *
             10269    1   *******************************************************************************/

     1032    10273        %B$SDEF (STCLASS="BASED(B_SDEF_CUR$)");
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:132  
     1033    10327        %B_SDEF_POINTERS;
     1034    10347        %PLIST;
     1035    10348        %PAGE (ARG=ENTRY DCLS);

             10361    1   /*******************************************************************************
             10362    1   *                                                                              *
             10363    1   *        ENTRY DCLS              ENTRY DCLS                                       *
             10364    1   *                                                                              *
             10365    1   *******************************************************************************/

     1036    10369    1   DCL XUO$OUWRITE ENTRY(2);
     1037    10370        %PAGE (ARG=LOCAL DATA);

             10383    1   /*******************************************************************************
             10384    1   *                                                                              *
             10385    1   *        LOCAL DATA              LOCAL DATA                                       *
             10386    1   *                                                                              *
             10387    1   *******************************************************************************/

     1038    10391    1   DCL SDEF_CONSTANT_FLAG BIT(1); /*0->XUO$SDEF*/
     1039    10392         /*1->XUO$SDEF_CONST*/
     1040    10393        %PAGE (ARG=CODE);

             10406    1   /*******************************************************************************
             10407    1   *                                                                              *
             10408    1   *        CODE              CODE                                                  *
             10409    1   *                                                                              *
             10410    1   *******************************************************************************/

     1041    10414    1       SDEF_CONSTANT_FLAG='0'B;

  10414  1 000002   200006 450100                    STZ     SDEF_CONSTANT_FLAG,,AUTO

     1042    10415    1       GOTO SDEF_COMMON;

  10415  1 000003   000010 710000 1                  TRA     SDEF_COMMON

PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:133  
     1043    10416        /*D*
     1044    10417
     1045    10418        XUO$SDEF_CONST --External Data Definition Record (Record Type 6)
     1046    10419
     1047    10420        NAME:  XUO$SDEF_CONST
     1048    10421
     1049    10422        PURPOSE:  To build an entry in the External Data Definition Record
     1050    10423
     1051    10424        DESCRIPTION:  This routine generates entries in the External
     1052    10425            Data Definition record for constant entries.
     1053    10426
     1054    10427        CALL:  CALL XUO$SDEF_CONST (Name Pointer,
     1055    10428                             Constant Value)
     1056    10429
     1057    10430        INPUT:
     1058    10431            Name Pointer        UBIN ALIGNED
     1059    10432                                Word offset into the Externally
     1060    10433                                Defined names record (type 1)
     1061    10434                                locating the name.
     1062    10435            Constant Value      UBIN ALIGNED
     1063    10436                                The constant SYMDEF
     1064    10437
     1065    10438        OUTPUT:  none
     1066    10439
     1067    10440        B$OBJECT REFERENCE:  B$SDEF
     1068    10441        */
     1069    10442
     1070    10443        /*B*
     1071    10444        GLOBAL DATA:
     1072    10445            B_SDEF_CUR$
     1073    10446            B_SDEF_COUNT
     1074    10447            B_SDEF_PAGE
     1075    10448
     1076    10449        INTERFACE:
     1077    10450            XUO$OUWRITE
     1078    10451
     1079    10452        */
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:134  
     1080    10453
     1081    10454    1   XUO$SDEF_CONST: ENTRY(P_NAME_POINTER,P_PARAM2);

  10454  1 000004   000000 700200 xent  XUO$SDEF_CO* TSX0  ! X66_AUTO_3
         1 000005   000010 000003                    ZERO    8,3

     1082    10455         /*
     1083    10456            */
     1084    10457    1       SDEF_CONSTANT_FLAG='1'B;

  10457  1 000006   400000 236003                    LDQ     -131072,DU
         1 000007   200006 756100                    STQ     SDEF_CONSTANT_FLAG,,AUTO

  10457  1 000010                       SDEF_COMMON  null
     1085    10458         /*
     1086    10459            */
     1087    10460    1   SDEF_COMMON: ;
     1088    10461         /*
     1089    10462         The following will check to see if the passed information will
     1090    10463         fit in the current record. If not, the current record will be
     1091    10464         written and pointer re-initialized. Then the text will be moved
     1092    10465         to the buffer.
     1093    10466         */
     1094    10467    1       IF B_SDEF_CUR$>=B_SDEF_END$ THEN

  10467  1 000010   000000 236000 xsym               LDQ     B_SDEF_CUR$
         1 000011   000000 116000 xsym               CMPQ    B_SDEF_END$
         1 000012   000022 602000 1                  TNC     s:10476

     1095    10468    2       DO;

     1096    10469    2           CALL XUO$OUWRITE(%TYPSDEF);

  10469  1 000013   000000 630400 2                  EPPR0   0
         1 000014   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000015   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000016   000000 011000                    NOP     0
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:135  

     1097    10470    2           B_SDEF_PAGE=B_SDEF_PAGE+1;

  10470  1 000017   000000 054000 xsym               AOS     B_SDEF_PAGE

     1098    10471    2           B_SDEF_CUR$=B_SDEF_BASE$;

  10471  1 000020   000000 236000 xsym               LDQ     B_SDEF_BASE$
         1 000021   000000 756000 xsym               STQ     B_SDEF_CUR$

     1099    10472    2           END;

     1100    10473         /*
     1101    10474         The following will build the symdef data table.
     1102    10475         */
     1103    10476    1       IF SDEF_CONSTANT_FLAG THEN

  10476  1 000022   200006 234100                    SZN     SDEF_CONSTANT_FLAG,,AUTO
         1 000023   000034 605000 1                  TPL     s:10483

     1104    10477    2       DO;

     1105    10478    2           B$SDEF.VALUE=P_CONST_VALUE;

  10478  1 000024   200004 470500                    LDP0    @P_PARAM2,,AUTO
         1 000025   000000 235100                    LDA     0,,PR0
         1 000026   000000 471400 xsym               LDP1    B_SDEF_CUR$
         1 000027   100000 755100                    STA     0,,PR1

     1106    10479    2           B$SDEF.CONSTNT='1'B;

  10479  1 000030   000000 471400 xsym               LDP1    B_SDEF_CUR$
         1 000031   400000 236007                    LDQ     -131072,DL
         1 000032   100001 256100                    ORSQ    1,,PR1

     1107    10480    2           END;

PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:136  
  10480  1 000033   000045 710000 1                  TRA     s:10486

     1108    10481    1       ELSE
     1109    10482    2       DO;

     1110    10483    2           B$SDEF.AD.OU.SECTNUM=P_SECTION_NUMBER;

  10483  1 000034   200004 470500                    LDP0    @P_PARAM2,,AUTO
         1 000035   000000 471400 xsym               LDP1    B_SDEF_CUR$
         1 000036   000000 236100                    LDQ     0,,PR0
         1 000037   000022 736000                    QLS     18
         1 000040   100000 552120                    STBQ    0,'20'O,PR1

     1111    10484    2           B$SDEF.AD.OU.OFFSET=P_SECTION_OFFSET;

  10484  1 000041   200005 471500                    LDP1    @P_SECTION_OFFSET,,AUTO
         1 000042   100000 720100                    LXL0    0,,PR1
         1 000043   000000 473400 xsym               LDP3    B_SDEF_CUR$
         1 000044   300000 440100                    SXL0    0,,PR3

     1112    10485    2           END;

     1113    10486    1       B$SDEF.NPOINTER=P_NAME_POINTER;

  10486  1 000045   200003 471500                    LDP1    @P_NAME_POINTER,,AUTO
         1 000046   100000 720100                    LXL0    0,,PR1
         1 000047   000000 473400 xsym               LDP3    B_SDEF_CUR$
         1 000050   300001 740100                    STX0    1,,PR3

     1114    10487    1       B_SDEF_COUNT=B_SDEF_COUNT+1;

  10487  1 000051   000000 054000 xsym               AOS     B_SDEF_COUNT

     1115    10488    1       B_SDEF_CUR$=PINCRW(B_SDEF_CUR$,SIZEW(B$SDEF));

  10488  1 000052   000000 236000 xsym               LDQ     B_SDEF_CUR$
         1 000053   000002 036003                    ADLQ    2,DU
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:137  
         1 000054   000000 756000 xsym               STQ     B_SDEF_CUR$

     1116    10489    1       RETURN;

  10489  1 000055   000000 702200 xent               TSX2  ! X66_ARET
     1117    10490    1   END XUO$SDEF;
     1118    10491        %EOD;

PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:138  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$SDEF.
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:139  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @P_NAME_POINTER            4-0-0/w PTR         r     1 @P_PARAM2
     5-0-0/w PTR         r     1 @P_SECTION_OFFSET         *0-0-0/w UBIN        r     1 P_CONST_VALUE
    *0-0-0/w SBIN        r     1 P_NAME_POINTER            *0-0-0/w UBIN        r     1 P_PARAM2
    *0-0-0/w UBIN        r     1 P_SECTION_NUMBER          *0-0-0/w UBIN        r     1 P_SECTION_OFFSET
     6-0-0/b BIT         r     1 SDEF_CONSTANT_FLAG

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_SDEF_BASE$               0-0-0/w SBIN        r     1 B_SDEF_COUNT
     0-0-0/w PTR         r     1 B_SDEF_CUR$                0-0-0/w PTR         r     1 B_SDEF_END$
     0-0-0/w SBIN        r     1 B_SDEF_PAGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 B$SDEF


   Procedure XUO$SDEF requires 46 words for executable code.
   Procedure XUO$SDEF requires 8 words of local(AUTO) storage.
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:140  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:141  
          MINI XREF LISTING

B$SDEF
     10274**DCL     10488--ASSIGN
B$SDEF.AD.OU
     10294**DCL     10300--REDEF
B$SDEF.AD.OU.OFFSET
     10298**DCL     10484<<ASSIGN
B$SDEF.AD.OU.SECTNUM
     10295**DCL     10483<<ASSIGN
B$SDEF.CONSTNT
     10305**DCL     10479<<ASSIGN
B$SDEF.NPOINTER
     10302**DCL     10486<<ASSIGN
B$SDEF.VALUE
     10275**DCL     10278--REDEF   10478<<ASSIGN
B_SDEF_BASE$
     10339**DCL     10471>>ASSIGN
B_SDEF_COUNT
     10342**DCL     10487<<ASSIGN  10487>>ASSIGN
B_SDEF_CUR$
     10340**DCL     10274--IMP-PTR 10467>>IF      10471<<ASSIGN  10478>>ASSIGN  10479>>ASSIGN  10483>>ASSIGN
     10484>>ASSIGN  10486>>ASSIGN  10488<<ASSIGN  10488>>ASSIGN
B_SDEF_END$
     10341**DCL     10467>>IF
B_SDEF_PAGE
     10343**DCL     10470<<ASSIGN  10470>>ASSIGN
P_CONST_VALUE
     10247**DCL     10478>>ASSIGN
P_NAME_POINTER
     10238**DCL        52--PROC    10454--ENTRY   10486>>ASSIGN
P_PARAM2
     10239**DCL        52--PROC    10243--REDEF   10247--REDEF   10454--ENTRY
P_SECTION_NUMBER
PL6.E3A0      #005=XUO$SDEF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:25 Page:142  
     10243**DCL     10483>>ASSIGN
P_SECTION_OFFSET
     10249**DCL        52--PROC    10484>>ASSIGN
SDEF_COMMON
     10457**LABEL   10415--GOTO
SDEF_CONSTANT_FLAG
     10391**DCL     10414<<ASSIGN  10457<<ASSIGN  10476>>IF
XUO$OUWRITE
     10369**DCL-ENT 10469--CALL

PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:143  
     1119        1        /*M*     XUO$SREF -- THIS MODULE WILL BUILD OBJECT UNIT SYMREF RECORDS*/
     1120        2        /*T***********************************************************/
     1121        3        /*T*                                                         */
     1122        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1123        5        /*T*                                                         */
     1124        6        /*T***********************************************************/
     1125        7        /*P*
     1126        8
     1127        9
     1128       10        NAME:  XUO$SREF
     1129       11               XUO$SREF --External Data Reference Record (Record Type 7)
     1130       12
     1131       13        PURPOSE:  To build an entry in the External Data Reference
     1132       14            Record (Record Type 7)
     1133       15
     1134       16        DESCRIPTION:  This routine adds an entry to the External
     1135       17            Data Reference Record (type 7).  There is one record per
     1136       18            object unit for external data references (i.e. SYMREF).
     1137       19            There is one entry per name.
     1138       20
     1139       21        */
     1140       22        /*D*
     1141       23        CALL:  CALL XUO$SREF (Name Pointer,
     1142       24                       Secondary Reference Flag,
     1143       25                       SYMREF Number,
     1144       26                       Read Only Flag)
     1145       27
     1146       28        INPUT:
     1147       29            Name Pointer        UBIN ALIGNED
     1148       30                                The word displacement into the
     1149       31                                record of Externally Referenced
     1150       32                                Names (type 2) locating the name.
     1151       33            Secondary Reference Flag BIT(1) UNALIGNED
     1152       34                                Indicates that the reference is a
     1153       35                                secondary reference and should not
     1154       36                                cause loading of a library routine.
     1155       37            Read Only Flag      BIT(1)
PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:144  
     1156       38                                Indicates that the corresponding
     1157       39                                SYMDEF item is in a read only section.
     1158       40                                If the section that the SYMREF applies
     1159       41                                to is not of type 1 (procedure) or
     1160       42                                type 6 (read only data) the linker will
     1161       43                                issue a warning diagnostic.
     1162       44
     1163       45        OUTPUT:
     1164       46            SYMREF Number       UBIN ALIGNED
     1165       47                                The entry number of the External Data
     1166       48                                Reference that was just added to the
     1167       49                                External Data Reference Record.
     1168       50
     1169       51        B$OBJECT REFERENCE:  B$SREF
     1170       52        */
     1171       53        /*B*
     1172       54        GLOBAL DATA:
     1173       55            B_SREF_CUR$
     1174       56            B_SREF_COUNT
     1175       57            B_SREF_PAGE
     1176       58
     1177       59        INTERFACE:
     1178       60            XUO$OUWRITE
     1179       61
     1180       62        */
     1181       63
     1182       64        XUO$SREF: PROC (P_NAME_POINTER,P_SREF_FLAG,P_SREF_NUMBER,P_READ_ONLY_FLAG);
     1183       65         /*
     1184       66            */
     1185       67        %INCLUDE ZVA_SYSTEM_FILE;
     1186     6318        %PAGE (ARG=INCLUDES);

              6331    1   /*******************************************************************************
              6332    1   *                                                                              *
              6333    1   *        INCLUDES              INCLUDES                                            *
              6334    1   *                                                                              *
              6335    1   *******************************************************************************/
PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:145  

     1187     6339        %INCLUDE B$OBJECT_C;
     1188     9769        %INCLUDE XUO$OBJ_C;
     1189    10179        %PAGE (ARG=SUBS);

             10192    1   /*******************************************************************************
             10193    1   *                                                                              *
             10194    1   *        SUBS              SUBS                                                  *
             10195    1   *                                                                              *
             10196    1   *******************************************************************************/

     1190    10200        %B$RECORDSUBS;
     1191    10228        %PLIST;
     1192    10229        %PAGE (ARG=PARAMETERS);

             10242    1   /*******************************************************************************
             10243    1   *                                                                              *
             10244    1   *        PARAMETERS              PARAMETERS                                        *
             10245    1   *                                                                              *
             10246    1   *******************************************************************************/

     1193    10250    1   DCL P_NAME_POINTER SBIN;
     1194    10251    1   DCL P_SREF_FLAG BIT(1) UNAL;
     1195    10252    1   DCL P_SREF_NUMBER UBIN;
     1196    10253    1   DCL P_READ_ONLY_FLAG BIT(1) UNAL;
     1197    10254         /*
     1198    10255            */
     1199    10256        %PAGE (ARG=SREF DATA);

             10269    1   /*******************************************************************************
             10270    1   *                                                                              *
             10271    1   *        SREF DATA              SREF DATA                                          *
             10272    1   *                                                                              *
             10273    1   *******************************************************************************/

     1200    10277        %B$SREF (STCLASS="BASED(B_SREF_CUR$)");
     1201    10291        %B_SREF_POINTERS;
PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:146  
     1202    10311        %PLIST;
     1203    10312        %PAGE (ARG=ENTRY DCLS);

             10325    1   /*******************************************************************************
             10326    1   *                                                                              *
             10327    1   *        ENTRY DCLS              ENTRY DCLS                                        *
             10328    1   *                                                                              *
             10329    1   *******************************************************************************/

     1204    10333    1   DCL XUO$OUWRITE ENTRY(2);
     1205    10334        %PAGE (ARG=CODE);

             10347    1   /*******************************************************************************
             10348    1   *                                                                              *
             10349    1   *        CODE              CODE                                                  *
             10350    1   *                                                                              *
             10351    1   *******************************************************************************/

     1206    10355         /*
     1207    10356         The following code will check to see if the passed information will fit
     1208    10357         in the current record. If not, the current record will be
     1209    10358         written and the pointer to it re-initialized. Then the text will
     1210    10359         be moved to the buffer.
     1211    10360         */
     1212    10361    1       IF B_SREF_CUR$>=B_SREF_END$ THEN
     1213    10362    2       DO;
     1214    10363    2           CALL XUO$OUWRITE(%TYPSREF);
     1215    10364    2           B_SREF_PAGE=B_SREF_PAGE+1;
     1216    10365    2           B_SREF_CUR$=B_SREF_BASE$;
     1217    10366    2           END;
     1218    10367         /*
     1219    10368         The following will build the symref data entry.
     1220    10369         */
     1221    10370    1       B$SREF.NPOINTER=P_NAME_POINTER;
     1222    10371    1       B$SREF.SREF=P_SREF_FLAG;
     1223    10372    1       IF ADDR(P_READ_ONLY_FLAG)~=ADDR(NIL) THEN
     1224    10373    1           B$SREF.READ_ONLY=P_READ_ONLY_FLAG;
PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:147  
     1225    10374    1       B_SREF_COUNT=B_SREF_COUNT+1;
     1226    10375    1       P_SREF_NUMBER=B_SREF_COUNT;
     1227    10376    1       B_SREF_CUR$=PINCRW(B_SREF_CUR$,SIZEW(B$SREF));
     1228    10377    1       RETURN;
     1229    10378    1   END XUO$SREF;
     1230    10379        %EOD;

PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:148  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$SREF.

   Procedure XUO$SREF requires 37 words for executable code.
   Procedure XUO$SREF requires 8 words of local(AUTO) storage.

PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:149  

 Object Unit name= XUO$SREF                                   File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:26:19.56 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    37     45  XUO$SREF
    2  RoData even  none     1      1  XUO$SREF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        4  XUO$SREF

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_SREF_BASE$                          B_SREF_CUR$
     B_SREF_END$                           B_SREF_COUNT                          B_SREF_PAGE
     B_VECTNIL
PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:150  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:151  


     1119        1        /*M*     XUO$SREF -- THIS MODULE WILL BUILD OBJECT UNIT SYMREF RECORDS*/
     1120        2        /*T***********************************************************/
     1121        3        /*T*                                                         */
     1122        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1123        5        /*T*                                                         */
     1124        6        /*T***********************************************************/
     1125        7        /*P*
     1126        8
     1127        9
     1128       10        NAME:  XUO$SREF
     1129       11               XUO$SREF --External Data Reference Record (Record Type 7)
     1130       12
     1131       13        PURPOSE:  To build an entry in the External Data Reference
     1132       14            Record (Record Type 7)
     1133       15
     1134       16        DESCRIPTION:  This routine adds an entry to the External
     1135       17            Data Reference Record (type 7).  There is one record per
     1136       18            object unit for external data references (i.e. SYMREF).
     1137       19            There is one entry per name.
     1138       20
     1139       21        */
     1140       22        /*D*
     1141       23        CALL:  CALL XUO$SREF (Name Pointer,
     1142       24                       Secondary Reference Flag,
     1143       25                       SYMREF Number,
     1144       26                       Read Only Flag)
     1145       27
     1146       28        INPUT:
     1147       29            Name Pointer        UBIN ALIGNED
     1148       30                                The word displacement into the
     1149       31                                record of Externally Referenced
     1150       32                                Names (type 2) locating the name.
     1151       33            Secondary Reference Flag BIT(1) UNALIGNED
     1152       34                                Indicates that the reference is a
     1153       35                                secondary reference and should not
     1154       36                                cause loading of a library routine.
PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:152  
     1155       37            Read Only Flag      BIT(1)
     1156       38                                Indicates that the corresponding
     1157       39                                SYMDEF item is in a read only section.
     1158       40                                If the section that the SYMREF applies
     1159       41                                to is not of type 1 (procedure) or
     1160       42                                type 6 (read only data) the linker will
     1161       43                                issue a warning diagnostic.
     1162       44
     1163       45        OUTPUT:
     1164       46            SYMREF Number       UBIN ALIGNED
     1165       47                                The entry number of the External Data
     1166       48                                Reference that was just added to the
     1167       49                                External Data Reference Record.
     1168       50
     1169       51        B$OBJECT REFERENCE:  B$SREF
     1170       52        */
     1171       53        /*B*
     1172       54        GLOBAL DATA:
     1173       55            B_SREF_CUR$
     1174       56            B_SREF_COUNT
     1175       57            B_SREF_PAGE
     1176       58
     1177       59        INTERFACE:
     1178       60            XUO$OUWRITE
     1179       61
     1180       62        */
     1181       63
     1182       64        XUO$SREF: PROC (P_NAME_POINTER,P_SREF_FLAG,P_SREF_NUMBER,P_READ_ONLY_FLAG);

     64  1 000000   000000 700200 xent  XUO$SREF     TSX0  ! X66_AUTO_4
         1 000001   000010 000004                    ZERO    8,4

     1183       65         /*
     1184       66            */
     1185       67        %INCLUDE ZVA_SYSTEM_FILE;
     1186     6318        %PAGE (ARG=INCLUDES);

PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:153  
              6331    1   /*******************************************************************************
              6332    1   *                                                                              *
              6333    1   *        INCLUDES              INCLUDES                                           *
              6334    1   *                                                                              *
              6335    1   *******************************************************************************/

     1187     6339        %INCLUDE B$OBJECT_C;
     1188     9769        %INCLUDE XUO$OBJ_C;
     1189    10179        %PAGE (ARG=SUBS);

             10192    1   /*******************************************************************************
             10193    1   *                                                                              *
             10194    1   *        SUBS              SUBS                                                  *
             10195    1   *                                                                              *
             10196    1   *******************************************************************************/

     1190    10200        %B$RECORDSUBS;
     1191    10228        %PLIST;
     1192    10229        %PAGE (ARG=PARAMETERS);

             10242    1   /*******************************************************************************
             10243    1   *                                                                              *
             10244    1   *        PARAMETERS              PARAMETERS                                       *
             10245    1   *                                                                              *
             10246    1   *******************************************************************************/

     1193    10250    1   DCL P_NAME_POINTER SBIN;
     1194    10251    1   DCL P_SREF_FLAG BIT(1) UNAL;
     1195    10252    1   DCL P_SREF_NUMBER UBIN;
     1196    10253    1   DCL P_READ_ONLY_FLAG BIT(1) UNAL;
     1197    10254         /*
     1198    10255            */
     1199    10256        %PAGE (ARG=SREF DATA);

             10269    1   /*******************************************************************************
             10270    1   *                                                                              *
             10271    1   *        SREF DATA              SREF DATA                                         *
PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:154  
             10272    1   *                                                                              *
             10273    1   *******************************************************************************/

     1200    10277        %B$SREF (STCLASS="BASED(B_SREF_CUR$)");
     1201    10291        %B_SREF_POINTERS;
     1202    10311        %PLIST;
     1203    10312        %PAGE (ARG=ENTRY DCLS);

             10325    1   /*******************************************************************************
             10326    1   *                                                                              *
             10327    1   *        ENTRY DCLS              ENTRY DCLS                                       *
             10328    1   *                                                                              *
             10329    1   *******************************************************************************/

     1204    10333    1   DCL XUO$OUWRITE ENTRY(2);
     1205    10334        %PAGE (ARG=CODE);

             10347    1   /*******************************************************************************
             10348    1   *                                                                              *
             10349    1   *        CODE              CODE                                                  *
             10350    1   *                                                                              *
             10351    1   *******************************************************************************/

     1206    10355         /*
     1207    10356         The following code will check to see if the passed information will fit
     1208    10357         in the current record. If not, the current record will be
     1209    10358         written and the pointer to it re-initialized. Then the text will
     1210    10359         be moved to the buffer.
     1211    10360         */
     1212    10361    1       IF B_SREF_CUR$>=B_SREF_END$ THEN

  10361  1 000002   000000 236000 xsym               LDQ     B_SREF_CUR$
         1 000003   000000 116000 xsym               CMPQ    B_SREF_END$
         1 000004   000014 602000 1                  TNC     s:10370

     1213    10362    2       DO;

PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:155  
     1214    10363    2           CALL XUO$OUWRITE(%TYPSREF);

  10363  1 000005   000000 630400 2                  EPPR0   0
         1 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000007   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000010   000000 011000                    NOP     0

     1215    10364    2           B_SREF_PAGE=B_SREF_PAGE+1;

  10364  1 000011   000000 054000 xsym               AOS     B_SREF_PAGE

     1216    10365    2           B_SREF_CUR$=B_SREF_BASE$;

  10365  1 000012   000000 236000 xsym               LDQ     B_SREF_BASE$
         1 000013   000000 756000 xsym               STQ     B_SREF_CUR$

     1217    10366    2           END;

     1218    10367         /*
     1219    10368         The following will build the symref data entry.
     1220    10369         */
     1221    10370    1       B$SREF.NPOINTER=P_NAME_POINTER;

  10370  1 000014   200003 470500                    LDP0    @P_NAME_POINTER,,AUTO
         1 000015   000000 720100                    LXL0    0,,PR0
         1 000016   000000 471400 xsym               LDP1    B_SREF_CUR$
         1 000017   100000 740100                    STX0    0,,PR1

     1222    10371    1       B$SREF.SREF=P_SREF_FLAG;

  10371  1 000020   200004 471500                    LDP1    @P_SREF_FLAG,,AUTO
         1 000021   000000 473400 xsym               LDP3    B_SREF_CUR$
         1 000022   003100 060500                    CSL     bolr='003'O
         1 000023   100000 000001                    BDSC    0,,PR1                   by=0,bit=0,n=1
         1 000024   300000 400001                    BDSC    0,,PR3                   by=2,bit=0,n=1

     1223    10372    1       IF ADDR(P_READ_ONLY_FLAG)~=ADDR(NIL) THEN
PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:156  

  10372  1 000025   200006 236100                    LDQ     @P_READ_ONLY_FLAG,,AUTO
         1 000026   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000027   000035 600000 1                  TZE     s:10374

     1224    10373    1           B$SREF.READ_ONLY=P_READ_ONLY_FLAG;

  10373  1 000030   200006 473500                    LDP3    @P_READ_ONLY_FLAG,,AUTO
         1 000031   000000 474400 xsym               LDP4    B_SREF_CUR$
         1 000032   003100 060500                    CSL     bolr='003'O
         1 000033   300000 000001                    BDSC    0,,PR3                   by=0,bit=0,n=1
         1 000034   400000 410001                    BDSC    0,,PR4                   by=2,bit=1,n=1

     1225    10374    1       B_SREF_COUNT=B_SREF_COUNT+1;

  10374  1 000035   000000 054000 xsym               AOS     B_SREF_COUNT

     1226    10375    1       P_SREF_NUMBER=B_SREF_COUNT;

  10375  1 000036   000000 235000 xsym               LDA     B_SREF_COUNT
         1 000037   200005 473500                    LDP3    @P_SREF_NUMBER,,AUTO
         1 000040   300000 755100                    STA     0,,PR3

     1227    10376    1       B_SREF_CUR$=PINCRW(B_SREF_CUR$,SIZEW(B$SREF));

  10376  1 000041   000000 236000 xsym               LDQ     B_SREF_CUR$
         1 000042   000001 036003                    ADLQ    1,DU
         1 000043   000000 756000 xsym               STQ     B_SREF_CUR$

     1228    10377    1       RETURN;

  10377  1 000044   000000 702200 xent               TSX2  ! X66_ARET
     1229    10378    1   END XUO$SREF;
     1230    10379        %EOD;

PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:157  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$SREF.
PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:158  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @P_NAME_POINTER            6-0-0/w PTR         r     1 @P_READ_ONLY_FLAG
     4-0-0/w PTR         r     1 @P_SREF_FLAG               5-0-0/w PTR         r     1 @P_SREF_NUMBER
    *0-0-0/w SBIN        r     1 P_NAME_POINTER            *0-0-0/b BIT         r     1 P_READ_ONLY_FLAG
    *0-0-0/b BIT         r     1 P_SREF_FLAG               *0-0-0/w UBIN        r     1 P_SREF_NUMBER

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_SREF_BASE$               0-0-0/w SBIN        r     1 B_SREF_COUNT
     0-0-0/w PTR         r     1 B_SREF_CUR$                0-0-0/w PTR         r     1 B_SREF_END$
     0-0-0/w SBIN        r     1 B_SREF_PAGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 B$SREF


   Procedure XUO$SREF requires 37 words for executable code.
   Procedure XUO$SREF requires 8 words of local(AUTO) storage.
PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:159  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=XUO$SREF File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:26 Page:160  
          MINI XREF LISTING

B$SREF
     10278**DCL     10376--ASSIGN
B$SREF.NPOINTER
     10279**DCL     10370<<ASSIGN
B$SREF.READ_ONLY
     10285**DCL     10373<<ASSIGN
B$SREF.SREF
     10282**DCL     10371<<ASSIGN
B_SREF_BASE$
     10303**DCL     10365>>ASSIGN
B_SREF_COUNT
     10306**DCL     10374<<ASSIGN  10374>>ASSIGN  10375>>ASSIGN
B_SREF_CUR$
     10304**DCL     10278--IMP-PTR 10361>>IF      10365<<ASSIGN  10370>>ASSIGN  10371>>ASSIGN  10373>>ASSIGN
     10376<<ASSIGN  10376>>ASSIGN
B_SREF_END$
     10305**DCL     10361>>IF
B_SREF_PAGE
     10307**DCL     10364<<ASSIGN  10364>>ASSIGN
P_NAME_POINTER
     10250**DCL        64--PROC    10370>>ASSIGN
P_READ_ONLY_FLAG
     10253**DCL        64--PROC    10372--IF      10373>>ASSIGN
P_SREF_FLAG
     10251**DCL        64--PROC    10371>>ASSIGN
P_SREF_NUMBER
     10252**DCL        64--PROC    10375<<ASSIGN
XUO$OUWRITE
     10333**DCL-ENT 10363--CALL

PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:161  
     1231        1        /*M*     XUO$SEGDEF -- THIS MODULE WILL BUILD OBJECT UNIT SEGDEF RECORDS*/
     1232        2        /*T***********************************************************/
     1233        3        /*T*                                                         */
     1234        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1235        5        /*T*                                                         */
     1236        6        /*T***********************************************************/
     1237        7        /*P*
     1238        8
     1239        9
     1240       10        NAME:  XUO$SEGDEF
     1241       11               XUO$SEGDEF --External Segment Definition (Record Type 8)
     1242       12
     1243       13        PURPOSE:  To build an entry in the External Segment Definition
     1244       14            Record (Record Type 8)
     1245       15
     1246       16        DESCRIPTION:  This routine builds a NON-constant entry
     1247       17            in the External Segment Definition Record (type 8).
     1248       18            There is one record per object unit for Initialized
     1249       19            Segment Definitions.
     1250       20
     1251       21        */
     1252       22        /*D*
     1253       23
     1254       24        CALL:  CALL XUO$SEGDEF (Name Pointer,
     1255       25                         Section Number,
     1256       26                         Section Offset)
     1257       27
     1258       28        INPUT:
     1259       29            Name Pointer        UBIN ALIGNED
     1260       30                                The word offset into the Externally
     1261       31                                Defined Names Record (type 1).
     1262       32            Section Number      UBIN ALIGNED
     1263       33                                The control Section number.
     1264       34            Section Offset      UBIN ALIGNED
     1265       35                                Offset from the origin of the section.
     1266       36
     1267       37        OUTPUT:  none
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:162  
     1268       38
     1269       39        B$OBJECT REFERENCE:  B$SEGDEF
     1270       40        */
     1271       41        /*B*
     1272       42
     1273       43        GLOBAL DATA:
     1274       44            B_SEGDEF_CUR$
     1275       45            B_SEGDEF_COUNT
     1276       46            B_SEGDEF_PAGE
     1277       47
     1278       48        INTERFACE:
     1279       49            XUO$OUWRITE
     1280       50
     1281       51        */
     1282       52
     1283       53        XUO$SEGDEF: PROC(P_NAME_POINTER,P_PARAM2,P_SECTION_OFFSET);
     1284       54         /*
     1285       55            */
     1286       56        %INCLUDE ZVA_SYSTEM_FILE;
     1287     6307        %PAGE (ARG=INCLUDES);

              6320    1   /*******************************************************************************
              6321    1   *                                                                              *
              6322    1   *        INCLUDES              INCLUDES                                            *
              6323    1   *                                                                              *
              6324    1   *******************************************************************************/

     1288     6328        %INCLUDE B$OBJECT_C;
     1289     9758        %INCLUDE XUO$OBJ_C;
     1290    10168        %PAGE (ARG=SUBS);

             10181    1   /*******************************************************************************
             10182    1   *                                                                              *
             10183    1   *        SUBS              SUBS                                                  *
             10184    1   *                                                                              *
             10185    1   *******************************************************************************/

PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:163  
     1291    10189        %B$RECORDSUBS;
     1292    10217        %PLIST;
     1293    10218        %PAGE (ARG=PARAMTERS);

             10231    1   /*******************************************************************************
             10232    1   *                                                                              *
             10233    1   *        PARAMTERS              PARAMTERS                                          *
             10234    1   *                                                                              *
             10235    1   *******************************************************************************/

     1294    10239    1   DCL P_NAME_POINTER SBIN;
     1295    10240    1   DCL P_PARAM2 UBIN;
     1296    10241         /*
     1297    10242         The following definition is for XUO$SEGDEF
     1298    10243         */
     1299    10244    1   DCL P_SECTION_NUMBER REDEF P_PARAM2 UBIN;
     1300    10245         /*
     1301    10246         The following definition is for XUO$SEGDEF_CONST
     1302    10247         */
     1303    10248    1   DCL P_CONST_VALUE REDEF P_PARAM2 UBIN;
     1304    10249         /**/
     1305    10250    1   DCL P_SECTION_OFFSET UBIN;
     1306    10251         /*
     1307    10252            */
     1308    10253        %PAGE (ARG=SEGDEF DATA);

             10266    1   /*******************************************************************************
             10267    1   *                                                                              *
             10268    1   *        SEGDEF DATA              SEGDEF DATA                                      *
             10269    1   *                                                                              *
             10270    1   *******************************************************************************/

     1309    10274        %B$SEGDEF (STCLASS="BASED(B_SEGDEF_CUR$)");
     1310    10329        %B_SEGDEF_POINTERS;
     1311    10349        %PLIST;
     1312    10350        %PAGE (ARG=ENTRY DCLS);

PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:164  
             10363    1   /*******************************************************************************
             10364    1   *                                                                              *
             10365    1   *        ENTRY DCLS              ENTRY DCLS                                        *
             10366    1   *                                                                              *
             10367    1   *******************************************************************************/

     1313    10371    1   DCL XUO$OUWRITE ENTRY(2);
     1314    10372        %PAGE (ARG=LOCAL DATA);

             10385    1   /*******************************************************************************
             10386    1   *                                                                              *
             10387    1   *        LOCAL DATA              LOCAL DATA                                        *
             10388    1   *                                                                              *
             10389    1   *******************************************************************************/

     1315    10393    1   DCL SEGDEF_CONSTANT_FLAG BIT(1); /*0->XUO$SEGDEF*/
     1316    10394         /*1->XUO$SEGDEF_CONST*/
     1317    10395        %PAGE (ARG=CODE);

             10408    1   /*******************************************************************************
             10409    1   *                                                                              *
             10410    1   *        CODE              CODE                                                  *
             10411    1   *                                                                              *
             10412    1   *******************************************************************************/

     1318    10416    1       SEGDEF_CONSTANT_FLAG='0'B;
     1319    10417    1       GOTO SEGDEF_COMMON;
     1320    10418        /*P*
     1321    10419
     1322    10420
     1323    10421        NAME:  XUO$SEGDEF_CONST
     1324    10422        XUO$SEGDEF_CONST --External Segment Definition Record (Record Type 8)
     1325    10423
     1326    10424        PURPOSE:  To build an entry in the External Segment
     1327    10425            Definition Record (Type 8)
     1328    10426
     1329    10427        DESCRIPTION:  This routine builds a constant entry in the
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:165  
     1330    10428            External Segment Definition Record (Record Type 8).
     1331    10429            There is one record per object unit for Initialized
     1332    10430            Segment Definitions.
     1333    10431
     1334    10432        */
     1335    10433        /*D*
     1336    10434
     1337    10435        CALL:  CALL XUO$SEGDEF_CONST (Name Pointer,
     1338    10436                               Constant Value)
     1339    10437
     1340    10438        INPUT:
     1341    10439            Name Pointer        UBIN ALIGNED
     1342    10440                                The word displacement into the
     1343    10441                                Externally Defined Names Record
     1344    10442                                (type 1).
     1345    10443            Constant Value      UBIN ALIGNED
     1346    10444                                The value of the constant segment
     1347    10445                                definition pointer.
     1348    10446
     1349    10447        OUTPUT:  none
     1350    10448
     1351    10449        B$OBJECT REFERENCE:  B$SEGDEF
     1352    10450        */
     1353    10451        /*B*
     1354    10452        GLOBAL DATA:
     1355    10453            B_SEGDEF_CUR$
     1356    10454            B_SEGDEF_COUNT
     1357    10455            B_SEGDEF_PAGE
     1358    10456
     1359    10457        INTERFACE:
     1360    10458            XUO$OUWRITE
     1361    10459
     1362    10460        */
     1363    10461
     1364    10462    1   XUO$SEGDEF_CONST: ENTRY(P_NAME_POINTER,P_PARAM2);
     1365    10463         /*
     1366    10464            */
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:166  
     1367    10465    1       SEGDEF_CONSTANT_FLAG='1'B;
     1368    10466         /*
     1369    10467            */
     1370    10468    1   SEGDEF_COMMON: ;
     1371    10469         /*
     1372    10470         The following will check to see if the passed information will
     1373    10471         fit in the current record. If not, the current record will be
     1374    10472         written and pointer re-initialized. Then the text will be moved
     1375    10473         to the buffer.
     1376    10474         */
     1377    10475    1       IF B_SEGDEF_CUR$>=B_SEGDEF_END$ THEN
     1378    10476    2       DO;
     1379    10477    2           CALL XUO$OUWRITE(%TYPSEGDEF);
     1380    10478    2           B_SEGDEF_PAGE=B_SEGDEF_PAGE+1;
     1381    10479    2           B_SEGDEF_CUR$=B_SEGDEF_BASE$;
     1382    10480    2           END;
     1383    10481         /*
     1384    10482         The following will build the segdef data table.
     1385    10483         */
     1386    10484    1       IF SEGDEF_CONSTANT_FLAG THEN
     1387    10485    2       DO;
     1388    10486    2           B$SEGDEF.VALUE=P_CONST_VALUE;
     1389    10487    2           B$SEGDEF.CONSTNT='1'B;
     1390    10488    2           END;
     1391    10489    1       ELSE
     1392    10490    2       DO;
     1393    10491    2           B$SEGDEF.AD.OU.SECTNUM=P_SECTION_NUMBER;
     1394    10492    2           B$SEGDEF.AD.OU.OFFSET=P_SECTION_OFFSET;
     1395    10493    2           END;
     1396    10494    1       B$SEGDEF.NPOINTER=P_NAME_POINTER;
     1397    10495    1       B_SEGDEF_COUNT=B_SEGDEF_COUNT+1;
     1398    10496    1       B_SEGDEF_CUR$=PINCRW(B_SEGDEF_CUR$,SIZEW(B$SEGDEF));
     1399    10497    1       RETURN;
     1400    10498    1   END XUO$SEGDEF;
     1401    10499        %EOD;

PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:167  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$SEGDEF.

   Procedure XUO$SEGDEF requires 46 words for executable code.
   Procedure XUO$SEGDEF requires 8 words of local(AUTO) storage.

PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:168  

 Object Unit name= XUO$SEGDEF                                 File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:26:46.28 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    46     56  XUO$SEGDEF
    2  RoData even  none     1      1  XUO$SEGDEF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        3  XUO$SEGDEF
     1      4                  yes      Std        2  XUO$SEGDEF_CONST

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:169  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_SEGDEF_BASE$                        B_SEGDEF_CUR$
     B_SEGDEF_END$                         B_SEGDEF_COUNT                        B_SEGDEF_PAGE
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:170  


     1231        1        /*M*     XUO$SEGDEF -- THIS MODULE WILL BUILD OBJECT UNIT SEGDEF RECORDS*/
     1232        2        /*T***********************************************************/
     1233        3        /*T*                                                         */
     1234        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1235        5        /*T*                                                         */
     1236        6        /*T***********************************************************/
     1237        7        /*P*
     1238        8
     1239        9
     1240       10        NAME:  XUO$SEGDEF
     1241       11               XUO$SEGDEF --External Segment Definition (Record Type 8)
     1242       12
     1243       13        PURPOSE:  To build an entry in the External Segment Definition
     1244       14            Record (Record Type 8)
     1245       15
     1246       16        DESCRIPTION:  This routine builds a NON-constant entry
     1247       17            in the External Segment Definition Record (type 8).
     1248       18            There is one record per object unit for Initialized
     1249       19            Segment Definitions.
     1250       20
     1251       21        */
     1252       22        /*D*
     1253       23
     1254       24        CALL:  CALL XUO$SEGDEF (Name Pointer,
     1255       25                         Section Number,
     1256       26                         Section Offset)
     1257       27
     1258       28        INPUT:
     1259       29            Name Pointer        UBIN ALIGNED
     1260       30                                The word offset into the Externally
     1261       31                                Defined Names Record (type 1).
     1262       32            Section Number      UBIN ALIGNED
     1263       33                                The control Section number.
     1264       34            Section Offset      UBIN ALIGNED
     1265       35                                Offset from the origin of the section.
     1266       36
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:171  
     1267       37        OUTPUT:  none
     1268       38
     1269       39        B$OBJECT REFERENCE:  B$SEGDEF
     1270       40        */
     1271       41        /*B*
     1272       42
     1273       43        GLOBAL DATA:
     1274       44            B_SEGDEF_CUR$
     1275       45            B_SEGDEF_COUNT
     1276       46            B_SEGDEF_PAGE
     1277       47
     1278       48        INTERFACE:
     1279       49            XUO$OUWRITE
     1280       50
     1281       51        */
     1282       52
     1283       53        XUO$SEGDEF: PROC(P_NAME_POINTER,P_PARAM2,P_SECTION_OFFSET);

     53  1 000000   000000 700200 xent  XUO$SEGDEF   TSX0  ! X66_AUTO_3
         1 000001   000010 000003                    ZERO    8,3

     1284       54         /*
     1285       55            */
     1286       56        %INCLUDE ZVA_SYSTEM_FILE;
     1287     6307        %PAGE (ARG=INCLUDES);

              6320    1   /*******************************************************************************
              6321    1   *                                                                              *
              6322    1   *        INCLUDES              INCLUDES                                           *
              6323    1   *                                                                              *
              6324    1   *******************************************************************************/

     1288     6328        %INCLUDE B$OBJECT_C;
     1289     9758        %INCLUDE XUO$OBJ_C;
     1290    10168        %PAGE (ARG=SUBS);

             10181    1   /*******************************************************************************
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:172  
             10182    1   *                                                                              *
             10183    1   *        SUBS              SUBS                                                  *
             10184    1   *                                                                              *
             10185    1   *******************************************************************************/

     1291    10189        %B$RECORDSUBS;
     1292    10217        %PLIST;
     1293    10218        %PAGE (ARG=PARAMTERS);

             10231    1   /*******************************************************************************
             10232    1   *                                                                              *
             10233    1   *        PARAMTERS              PARAMTERS                                         *
             10234    1   *                                                                              *
             10235    1   *******************************************************************************/

     1294    10239    1   DCL P_NAME_POINTER SBIN;
     1295    10240    1   DCL P_PARAM2 UBIN;
     1296    10241         /*
     1297    10242         The following definition is for XUO$SEGDEF
     1298    10243         */
     1299    10244    1   DCL P_SECTION_NUMBER REDEF P_PARAM2 UBIN;
     1300    10245         /*
     1301    10246         The following definition is for XUO$SEGDEF_CONST
     1302    10247         */
     1303    10248    1   DCL P_CONST_VALUE REDEF P_PARAM2 UBIN;
     1304    10249         /**/
     1305    10250    1   DCL P_SECTION_OFFSET UBIN;
     1306    10251         /*
     1307    10252            */
     1308    10253        %PAGE (ARG=SEGDEF DATA);

             10266    1   /*******************************************************************************
             10267    1   *                                                                              *
             10268    1   *        SEGDEF DATA              SEGDEF DATA                                     *
             10269    1   *                                                                              *
             10270    1   *******************************************************************************/

PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:173  
     1309    10274        %B$SEGDEF (STCLASS="BASED(B_SEGDEF_CUR$)");
     1310    10329        %B_SEGDEF_POINTERS;
     1311    10349        %PLIST;
     1312    10350        %PAGE (ARG=ENTRY DCLS);

             10363    1   /*******************************************************************************
             10364    1   *                                                                              *
             10365    1   *        ENTRY DCLS              ENTRY DCLS                                       *
             10366    1   *                                                                              *
             10367    1   *******************************************************************************/

     1313    10371    1   DCL XUO$OUWRITE ENTRY(2);
     1314    10372        %PAGE (ARG=LOCAL DATA);

             10385    1   /*******************************************************************************
             10386    1   *                                                                              *
             10387    1   *        LOCAL DATA              LOCAL DATA                                       *
             10388    1   *                                                                              *
             10389    1   *******************************************************************************/

     1315    10393    1   DCL SEGDEF_CONSTANT_FLAG BIT(1); /*0->XUO$SEGDEF*/
     1316    10394         /*1->XUO$SEGDEF_CONST*/
     1317    10395        %PAGE (ARG=CODE);

             10408    1   /*******************************************************************************
             10409    1   *                                                                              *
             10410    1   *        CODE              CODE                                                  *
             10411    1   *                                                                              *
             10412    1   *******************************************************************************/

     1318    10416    1       SEGDEF_CONSTANT_FLAG='0'B;

  10416  1 000002   200006 450100                    STZ     SEGDEF_CONSTANT_FLAG,,AUTO

     1319    10417    1       GOTO SEGDEF_COMMON;

  10417  1 000003   000010 710000 1                  TRA     SEGDEF_COMMON
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:174  

     1320    10418        /*P*
     1321    10419
     1322    10420
     1323    10421        NAME:  XUO$SEGDEF_CONST
     1324    10422        XUO$SEGDEF_CONST --External Segment Definition Record (Record Type 8)
     1325    10423
     1326    10424        PURPOSE:  To build an entry in the External Segment
     1327    10425            Definition Record (Type 8)
     1328    10426
     1329    10427        DESCRIPTION:  This routine builds a constant entry in the
     1330    10428            External Segment Definition Record (Record Type 8).
     1331    10429            There is one record per object unit for Initialized
     1332    10430            Segment Definitions.
     1333    10431
     1334    10432        */
     1335    10433        /*D*
     1336    10434
     1337    10435        CALL:  CALL XUO$SEGDEF_CONST (Name Pointer,
     1338    10436                               Constant Value)
     1339    10437
     1340    10438        INPUT:
     1341    10439            Name Pointer        UBIN ALIGNED
     1342    10440                                The word displacement into the
     1343    10441                                Externally Defined Names Record
     1344    10442                                (type 1).
     1345    10443            Constant Value      UBIN ALIGNED
     1346    10444                                The value of the constant segment
     1347    10445                                definition pointer.
     1348    10446
     1349    10447        OUTPUT:  none
     1350    10448
     1351    10449        B$OBJECT REFERENCE:  B$SEGDEF
     1352    10450        */
     1353    10451        /*B*
     1354    10452        GLOBAL DATA:
     1355    10453            B_SEGDEF_CUR$
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:175  
     1356    10454            B_SEGDEF_COUNT
     1357    10455            B_SEGDEF_PAGE
     1358    10456
     1359    10457        INTERFACE:
     1360    10458            XUO$OUWRITE
     1361    10459
     1362    10460        */
     1363    10461
     1364    10462    1   XUO$SEGDEF_CONST: ENTRY(P_NAME_POINTER,P_PARAM2);

  10462  1 000004   000000 700200 xent  XUO$SEGDEF_* TSX0  ! X66_AUTO_3
         1 000005   000010 000003                    ZERO    8,3

     1365    10463         /*
     1366    10464            */
     1367    10465    1       SEGDEF_CONSTANT_FLAG='1'B;

  10465  1 000006   400000 236003                    LDQ     -131072,DU
         1 000007   200006 756100                    STQ     SEGDEF_CONSTANT_FLAG,,AUTO

  10465  1 000010                       SEGDEF_COMM* null
     1368    10466         /*
     1369    10467            */
     1370    10468    1   SEGDEF_COMMON: ;
     1371    10469         /*
     1372    10470         The following will check to see if the passed information will
     1373    10471         fit in the current record. If not, the current record will be
     1374    10472         written and pointer re-initialized. Then the text will be moved
     1375    10473         to the buffer.
     1376    10474         */
     1377    10475    1       IF B_SEGDEF_CUR$>=B_SEGDEF_END$ THEN

  10475  1 000010   000000 236000 xsym               LDQ     B_SEGDEF_CUR$
         1 000011   000000 116000 xsym               CMPQ    B_SEGDEF_END$
         1 000012   000022 602000 1                  TNC     s:10484

     1378    10476    2       DO;
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:176  

     1379    10477    2           CALL XUO$OUWRITE(%TYPSEGDEF);

  10477  1 000013   000000 630400 2                  EPPR0   0
         1 000014   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000015   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000016   000000 011000                    NOP     0

     1380    10478    2           B_SEGDEF_PAGE=B_SEGDEF_PAGE+1;

  10478  1 000017   000000 054000 xsym               AOS     B_SEGDEF_PAGE

     1381    10479    2           B_SEGDEF_CUR$=B_SEGDEF_BASE$;

  10479  1 000020   000000 236000 xsym               LDQ     B_SEGDEF_BASE$
         1 000021   000000 756000 xsym               STQ     B_SEGDEF_CUR$

     1382    10480    2           END;

     1383    10481         /*
     1384    10482         The following will build the segdef data table.
     1385    10483         */
     1386    10484    1       IF SEGDEF_CONSTANT_FLAG THEN

  10484  1 000022   200006 234100                    SZN     SEGDEF_CONSTANT_FLAG,,AUTO
         1 000023   000034 605000 1                  TPL     s:10491

     1387    10485    2       DO;

     1388    10486    2           B$SEGDEF.VALUE=P_CONST_VALUE;

  10486  1 000024   200004 470500                    LDP0    @P_PARAM2,,AUTO
         1 000025   000000 235100                    LDA     0,,PR0
         1 000026   000000 471400 xsym               LDP1    B_SEGDEF_CUR$
         1 000027   100000 755100                    STA     0,,PR1

     1389    10487    2           B$SEGDEF.CONSTNT='1'B;
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:177  

  10487  1 000030   000000 471400 xsym               LDP1    B_SEGDEF_CUR$
         1 000031   400000 236007                    LDQ     -131072,DL
         1 000032   100001 256100                    ORSQ    1,,PR1

     1390    10488    2           END;

  10488  1 000033   000045 710000 1                  TRA     s:10494

     1391    10489    1       ELSE
     1392    10490    2       DO;

     1393    10491    2           B$SEGDEF.AD.OU.SECTNUM=P_SECTION_NUMBER;

  10491  1 000034   200004 470500                    LDP0    @P_PARAM2,,AUTO
         1 000035   000000 471400 xsym               LDP1    B_SEGDEF_CUR$
         1 000036   000000 236100                    LDQ     0,,PR0
         1 000037   000022 736000                    QLS     18
         1 000040   100000 552120                    STBQ    0,'20'O,PR1

     1394    10492    2           B$SEGDEF.AD.OU.OFFSET=P_SECTION_OFFSET;

  10492  1 000041   200005 471500                    LDP1    @P_SECTION_OFFSET,,AUTO
         1 000042   100000 720100                    LXL0    0,,PR1
         1 000043   000000 473400 xsym               LDP3    B_SEGDEF_CUR$
         1 000044   300000 440100                    SXL0    0,,PR3

     1395    10493    2           END;

     1396    10494    1       B$SEGDEF.NPOINTER=P_NAME_POINTER;

  10494  1 000045   200003 471500                    LDP1    @P_NAME_POINTER,,AUTO
         1 000046   100000 720100                    LXL0    0,,PR1
         1 000047   000000 473400 xsym               LDP3    B_SEGDEF_CUR$
         1 000050   300001 740100                    STX0    1,,PR3

     1397    10495    1       B_SEGDEF_COUNT=B_SEGDEF_COUNT+1;
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:178  

  10495  1 000051   000000 054000 xsym               AOS     B_SEGDEF_COUNT

     1398    10496    1       B_SEGDEF_CUR$=PINCRW(B_SEGDEF_CUR$,SIZEW(B$SEGDEF));

  10496  1 000052   000000 236000 xsym               LDQ     B_SEGDEF_CUR$
         1 000053   000002 036003                    ADLQ    2,DU
         1 000054   000000 756000 xsym               STQ     B_SEGDEF_CUR$

     1399    10497    1       RETURN;

  10497  1 000055   000000 702200 xent               TSX2  ! X66_ARET
     1400    10498    1   END XUO$SEGDEF;
     1401    10499        %EOD;

PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:179  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$SEGDEF.
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:180  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @P_NAME_POINTER            4-0-0/w PTR         r     1 @P_PARAM2
     5-0-0/w PTR         r     1 @P_SECTION_OFFSET         *0-0-0/w UBIN        r     1 P_CONST_VALUE
    *0-0-0/w SBIN        r     1 P_NAME_POINTER            *0-0-0/w UBIN        r     1 P_PARAM2
    *0-0-0/w UBIN        r     1 P_SECTION_NUMBER          *0-0-0/w UBIN        r     1 P_SECTION_OFFSET
     6-0-0/b BIT         r     1 SEGDEF_CONSTANT_FLAG

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_SEGDEF_BASE$             0-0-0/w SBIN        r     1 B_SEGDEF_COUNT
     0-0-0/w PTR         r     1 B_SEGDEF_CUR$              0-0-0/w PTR         r     1 B_SEGDEF_END$
     0-0-0/w SBIN        r     1 B_SEGDEF_PAGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 B$SEGDEF


   Procedure XUO$SEGDEF requires 46 words for executable code.
   Procedure XUO$SEGDEF requires 8 words of local(AUTO) storage.
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:181  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:182  
          MINI XREF LISTING

B$SEGDEF
     10275**DCL     10496--ASSIGN
B$SEGDEF.AD.OU
     10299**DCL     10304--REDEF
B$SEGDEF.AD.OU.OFFSET
     10302**DCL     10492<<ASSIGN
B$SEGDEF.AD.OU.SECTNUM
     10300**DCL     10491<<ASSIGN
B$SEGDEF.CONSTNT
     10308**DCL     10487<<ASSIGN
B$SEGDEF.LFLAGS
     10314**DCL     10325--REDEF
B$SEGDEF.NPOINTER
     10306**DCL     10494<<ASSIGN
B$SEGDEF.VALUE
     10276**DCL     10279--REDEF   10283--REDEF   10486<<ASSIGN
B_SEGDEF_BASE$
     10341**DCL     10479>>ASSIGN
B_SEGDEF_COUNT
     10344**DCL     10495<<ASSIGN  10495>>ASSIGN
B_SEGDEF_CUR$
     10342**DCL     10275--IMP-PTR 10475>>IF      10479<<ASSIGN  10486>>ASSIGN  10487>>ASSIGN  10491>>ASSIGN
     10492>>ASSIGN  10494>>ASSIGN  10496<<ASSIGN  10496>>ASSIGN
B_SEGDEF_END$
     10343**DCL     10475>>IF
B_SEGDEF_PAGE
     10345**DCL     10478<<ASSIGN  10478>>ASSIGN
P_CONST_VALUE
     10248**DCL     10486>>ASSIGN
P_NAME_POINTER
     10239**DCL        53--PROC    10462--ENTRY   10494>>ASSIGN
P_PARAM2
PL6.E3A0      #007=XUO$SEGDEF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:26 Page:183  
     10240**DCL        53--PROC    10244--REDEF   10248--REDEF   10462--ENTRY
P_SECTION_NUMBER
     10244**DCL     10491>>ASSIGN
P_SECTION_OFFSET
     10250**DCL        53--PROC    10492>>ASSIGN
SEGDEF_COMMON
     10465**LABEL   10417--GOTO
SEGDEF_CONSTANT_FLAG
     10393**DCL     10416<<ASSIGN  10465<<ASSIGN  10484>>IF
XUO$OUWRITE
     10371**DCL-ENT 10477--CALL

PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:184  
     1402        1        /*M*     XUO$SEGREF -- THIS MODULE WILL BUILD OBJECT UNIT SEGREF RECORDS*/
     1403        2        /*T***********************************************************/
     1404        3        /*T*                                                         */
     1405        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1406        5        /*T*                                                         */
     1407        6        /*T***********************************************************/
     1408        7        /*P*
     1409        8
     1410        9
     1411       10        NAME:  XUO$SEGREF
     1412       11        XUO$SEGREF --External Segment Reference Record (Record Type 9)
     1413       12
     1414       13        PURPOSE:  To build an entry in the External Segment Reference
     1415       14            Record (Record Type 9).
     1416       15
     1417       16        DESCRIPTION:  This routine adds an entry to the External
     1418       17            Segment Reference Record.  There is one record per object
     1419       18            unit for external references to segment names.  The value
     1420       19            of a segment name is a segment id.  The definitions of all
     1421       20            referenced segment ids will be provided by the linker.  A
     1422       21            set of conventional, non-conflicting segment names will
     1423       22            be established for such things as dcb segment, automatic
     1424       23            segment, instruction segment, JIT segment, etc.
     1425       24
     1426       25        */
     1427       26        /*D*
     1428       27
     1429       28        CALL:  CALL XUO$SEGREF (Name Pointer,
     1430       29                         Segment Reference Number,
     1431       30                         Nsab,
     1432       31                         Segment Reference Flag,
     1433       32                         Read Only Flag)
     1434       33
     1435       34        INPUT:
     1436       35            Name Pointer        SBIN
     1437       36                                The word displacement into the
     1438       37                                Externally Referenced Names Record
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:185  
     1439       38                                (type 2) locating the segment
     1440       39                                reference name.
     1441       40            Nsab                BIT(4) UNALIGNED  optional
     1442       41                                Not used for CP6
     1443       42            Segment Reference Flag  BIT(1) UNALIGNED
     1444       43                                Indicates that the reference is a
     1445       44                                secondary reference and should not
     1446       45                                cause loading of a library routine.
     1447       46            Read Only Flag      BIT(1) UNALIGNED
     1448       47                                Specifies that the corresponding
     1449       48                                SEGDEF must be in a constant section.
     1450       49                                If the section that the Segment
     1451       50                                Definition applies to is not of
     1452       51                                type 1 (procedure) or type 6 (read
     1453       52                                only data) the linker will issue a
     1454       53                                warning diagnostic.
     1455       54
     1456       55
     1457       56        OUTPUT:
     1458       57            Segment Reference Number  UBIN ALIGNED
     1459       58                                It is the number of the entry that
     1460       59                                was just added to the External
     1461       60                                Segment Reference Record.
     1462       61
     1463       62        B$OBJECT REFERENCE:  B$SEGREF
     1464       63        */
     1465       64        /*B*
     1466       65
     1467       66        GLOBAL DATA:
     1468       67            B_SEGREF_CUR$
     1469       68            B_SEGREF_COUNT
     1470       69            B_SEGREF_PAGE
     1471       70
     1472       71        INTERFACE:
     1473       72            XUO$OUWRITE
     1474       73
     1475       74        */
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:186  
     1476       75
     1477       76        XUO$SEGREF: PROC (P_NAME_POINTER,P_SEGREF_NUMBER,P_NSAB,P_SREF_FLAG,P_READ_ONLY_FLAG
                76            );
     1478       77         /*
     1479       78            */
     1480       79        %INCLUDE ZVA_SYSTEM_FILE;
     1481     6330        %PAGE (ARG=INCLUDES);

              6343    1   /*******************************************************************************
              6344    1   *                                                                              *
              6345    1   *        INCLUDES              INCLUDES                                            *
              6346    1   *                                                                              *
              6347    1   *******************************************************************************/

     1482     6351        %INCLUDE B$OBJECT_C;
     1483     9781        %INCLUDE XUO$OBJ_C;
     1484    10191        %PAGE (ARG=SUBS);

             10204    1   /*******************************************************************************
             10205    1   *                                                                              *
             10206    1   *        SUBS              SUBS                                                  *
             10207    1   *                                                                              *
             10208    1   *******************************************************************************/

     1485    10212        %B$RECORDSUBS;
     1486    10240        %PLIST;
     1487    10241        %PAGE (ARG=PARAMETERS);

             10254    1   /*******************************************************************************
             10255    1   *                                                                              *
             10256    1   *        PARAMETERS              PARAMETERS                                        *
             10257    1   *                                                                              *
             10258    1   *******************************************************************************/

     1488    10262    1   DCL P_NAME_POINTER SBIN;
     1489    10263    1   DCL P_NSAB BIT(4) UNAL;
     1490    10264         /**/
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:187  
     1491    10265    1   DCL P_SREF_FLAG BIT(1) UNAL;
     1492    10266         /**/
     1493    10267    1   DCL P_READ_ONLY_FLAG BIT(1) UNAL PARAM;
     1494    10268    1   DCL P_SEGREF_NUMBER UBIN;
     1495    10269         /*
     1496    10270            */
     1497    10271        %PAGE (ARG=SEGREF DATA);

             10284    1   /*******************************************************************************
             10285    1   *                                                                              *
             10286    1   *        SEGREF DATA              SEGREF DATA                                      *
             10287    1   *                                                                              *
             10288    1   *******************************************************************************/

     1498    10292        %B$SEGREF (STCLASS="BASED(B_SEGREF_CUR$)");
     1499    10309        %B_SEGREF_POINTERS;
     1500    10329        %PLIST;
     1501    10330        %PAGE (ARG=ENTRY DCLS);

             10343    1   /*******************************************************************************
             10344    1   *                                                                              *
             10345    1   *        ENTRY DCLS              ENTRY DCLS                                        *
             10346    1   *                                                                              *
             10347    1   *******************************************************************************/

     1502    10351    1   DCL XUO$OUWRITE ENTRY(2);
     1503    10352        %PAGE (ARG=CODE);

             10365    1   /*******************************************************************************
             10366    1   *                                                                              *
             10367    1   *        CODE              CODE                                                  *
             10368    1   *                                                                              *
             10369    1   *******************************************************************************/

     1504    10373         /*
     1505    10374         The following code will check to see if the passed information will fit
     1506    10375         in the current record. If not, the current record will be
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:188  
     1507    10376         written and the pointer to it re-initialized. Then the text will
     1508    10377         be moved to the buffer.
     1509    10378         */
     1510    10379    1       IF B_SEGREF_CUR$>=B_SEGREF_END$ THEN
     1511    10380    2       DO;
     1512    10381    2           CALL XUO$OUWRITE(%TYPSEGREF);
     1513    10382    2           B_SEGREF_PAGE=B_SEGREF_PAGE+1;
     1514    10383    2           B_SEGREF_CUR$=B_SEGREF_BASE$;
     1515    10384    2           END;
     1516    10385         /*
     1517    10386         The following will build the symref data entry.
     1518    10387         */
     1519    10388    1       B$SEGREF.NPOINTER=P_NAME_POINTER;
     1520    10389    1       IF ADDR(P_NSAB)~=ADDR(NIL) THEN
     1521    10390    1           B$SEGREF.G66_NSAB=P_NSAB;
     1522    10391    1       IF ADDR(P_SREF_FLAG)~=ADDR(NIL) THEN
     1523    10392    1           B$SEGREF.SREF=P_SREF_FLAG;
     1524    10393    1       IF ADDR(P_READ_ONLY_FLAG)~=ADDR(NIL) THEN
     1525    10394    1           B$SEGREF.READ_ONLY=P_READ_ONLY_FLAG;
     1526    10395    1       B_SEGREF_COUNT=B_SEGREF_COUNT+1;
     1527    10396    1       P_SEGREF_NUMBER=B_SEGREF_COUNT;
     1528    10397    1       B_SEGREF_CUR$=PINCRW(B_SEGREF_CUR$,SIZEW(B$SEGREF));
     1529    10398    1       RETURN;
     1530    10399    1   END XUO$SEGREF;
     1531    10400        %EOD;

PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:189  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$SEGREF.

   Procedure XUO$SEGREF requires 48 words for executable code.
   Procedure XUO$SEGREF requires 8 words of local(AUTO) storage.

PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:190  

 Object Unit name= XUO$SEGREF                                 File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:27:16.68 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    48     60  XUO$SEGREF
    2  RoData even  none     1      1  XUO$SEGREF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        5  XUO$SEGREF

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_SEGREF_BASE$                        B_SEGREF_CUR$
     B_SEGREF_END$                         B_SEGREF_COUNT                        B_SEGREF_PAGE
     B_VECTNIL
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:191  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:192  


     1402        1        /*M*     XUO$SEGREF -- THIS MODULE WILL BUILD OBJECT UNIT SEGREF RECORDS*/
     1403        2        /*T***********************************************************/
     1404        3        /*T*                                                         */
     1405        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1406        5        /*T*                                                         */
     1407        6        /*T***********************************************************/
     1408        7        /*P*
     1409        8
     1410        9
     1411       10        NAME:  XUO$SEGREF
     1412       11        XUO$SEGREF --External Segment Reference Record (Record Type 9)
     1413       12
     1414       13        PURPOSE:  To build an entry in the External Segment Reference
     1415       14            Record (Record Type 9).
     1416       15
     1417       16        DESCRIPTION:  This routine adds an entry to the External
     1418       17            Segment Reference Record.  There is one record per object
     1419       18            unit for external references to segment names.  The value
     1420       19            of a segment name is a segment id.  The definitions of all
     1421       20            referenced segment ids will be provided by the linker.  A
     1422       21            set of conventional, non-conflicting segment names will
     1423       22            be established for such things as dcb segment, automatic
     1424       23            segment, instruction segment, JIT segment, etc.
     1425       24
     1426       25        */
     1427       26        /*D*
     1428       27
     1429       28        CALL:  CALL XUO$SEGREF (Name Pointer,
     1430       29                         Segment Reference Number,
     1431       30                         Nsab,
     1432       31                         Segment Reference Flag,
     1433       32                         Read Only Flag)
     1434       33
     1435       34        INPUT:
     1436       35            Name Pointer        SBIN
     1437       36                                The word displacement into the
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:193  
     1438       37                                Externally Referenced Names Record
     1439       38                                (type 2) locating the segment
     1440       39                                reference name.
     1441       40            Nsab                BIT(4) UNALIGNED  optional
     1442       41                                Not used for CP6
     1443       42            Segment Reference Flag  BIT(1) UNALIGNED
     1444       43                                Indicates that the reference is a
     1445       44                                secondary reference and should not
     1446       45                                cause loading of a library routine.
     1447       46            Read Only Flag      BIT(1) UNALIGNED
     1448       47                                Specifies that the corresponding
     1449       48                                SEGDEF must be in a constant section.
     1450       49                                If the section that the Segment
     1451       50                                Definition applies to is not of
     1452       51                                type 1 (procedure) or type 6 (read
     1453       52                                only data) the linker will issue a
     1454       53                                warning diagnostic.
     1455       54
     1456       55
     1457       56        OUTPUT:
     1458       57            Segment Reference Number  UBIN ALIGNED
     1459       58                                It is the number of the entry that
     1460       59                                was just added to the External
     1461       60                                Segment Reference Record.
     1462       61
     1463       62        B$OBJECT REFERENCE:  B$SEGREF
     1464       63        */
     1465       64        /*B*
     1466       65
     1467       66        GLOBAL DATA:
     1468       67            B_SEGREF_CUR$
     1469       68            B_SEGREF_COUNT
     1470       69            B_SEGREF_PAGE
     1471       70
     1472       71        INTERFACE:
     1473       72            XUO$OUWRITE
     1474       73
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:194  
     1475       74        */
     1476       75
     1477       76       XUO$SEGREF: PROC (P_NAME_POINTER,P_SEGREF_NUMBER,P_NSAB,P_SREF_FLAG,P_READ_ONLY_FLAG
                76            );

     76  1 000000   000000 700200 xent  XUO$SEGREF   TSX0  ! X66_AUTO_5
         1 000001   000010 000005                    ZERO    8,5

     1478       77         /*
     1479       78            */
     1480       79        %INCLUDE ZVA_SYSTEM_FILE;
     1481     6330        %PAGE (ARG=INCLUDES);

              6343    1   /*******************************************************************************
              6344    1   *                                                                              *
              6345    1   *        INCLUDES              INCLUDES                                           *
              6346    1   *                                                                              *
              6347    1   *******************************************************************************/

     1482     6351        %INCLUDE B$OBJECT_C;
     1483     9781        %INCLUDE XUO$OBJ_C;
     1484    10191        %PAGE (ARG=SUBS);

             10204    1   /*******************************************************************************
             10205    1   *                                                                              *
             10206    1   *        SUBS              SUBS                                                  *
             10207    1   *                                                                              *
             10208    1   *******************************************************************************/

     1485    10212        %B$RECORDSUBS;
     1486    10240        %PLIST;
     1487    10241        %PAGE (ARG=PARAMETERS);

             10254    1   /*******************************************************************************
             10255    1   *                                                                              *
             10256    1   *        PARAMETERS              PARAMETERS                                       *
             10257    1   *                                                                              *
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:195  
             10258    1   *******************************************************************************/

     1488    10262    1   DCL P_NAME_POINTER SBIN;
     1489    10263    1   DCL P_NSAB BIT(4) UNAL;
     1490    10264         /**/
     1491    10265    1   DCL P_SREF_FLAG BIT(1) UNAL;
     1492    10266         /**/
     1493    10267    1   DCL P_READ_ONLY_FLAG BIT(1) UNAL PARAM;
     1494    10268    1   DCL P_SEGREF_NUMBER UBIN;
     1495    10269         /*
     1496    10270            */
     1497    10271        %PAGE (ARG=SEGREF DATA);

             10284    1   /*******************************************************************************
             10285    1   *                                                                              *
             10286    1   *        SEGREF DATA              SEGREF DATA                                     *
             10287    1   *                                                                              *
             10288    1   *******************************************************************************/

     1498    10292        %B$SEGREF (STCLASS="BASED(B_SEGREF_CUR$)");
     1499    10309        %B_SEGREF_POINTERS;
     1500    10329        %PLIST;
     1501    10330        %PAGE (ARG=ENTRY DCLS);

             10343    1   /*******************************************************************************
             10344    1   *                                                                              *
             10345    1   *        ENTRY DCLS              ENTRY DCLS                                       *
             10346    1   *                                                                              *
             10347    1   *******************************************************************************/

     1502    10351    1   DCL XUO$OUWRITE ENTRY(2);
     1503    10352        %PAGE (ARG=CODE);

             10365    1   /*******************************************************************************
             10366    1   *                                                                              *
             10367    1   *        CODE              CODE                                                  *
             10368    1   *                                                                              *
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:196  
             10369    1   *******************************************************************************/

     1504    10373         /*
     1505    10374         The following code will check to see if the passed information will fit
     1506    10375         in the current record. If not, the current record will be
     1507    10376         written and the pointer to it re-initialized. Then the text will
     1508    10377         be moved to the buffer.
     1509    10378         */
     1510    10379    1       IF B_SEGREF_CUR$>=B_SEGREF_END$ THEN

  10379  1 000002   000000 236000 xsym               LDQ     B_SEGREF_CUR$
         1 000003   000000 116000 xsym               CMPQ    B_SEGREF_END$
         1 000004   000014 602000 1                  TNC     s:10388

     1511    10380    2       DO;

     1512    10381    2           CALL XUO$OUWRITE(%TYPSEGREF);

  10381  1 000005   000000 630400 2                  EPPR0   0
         1 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000007   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000010   000000 011000                    NOP     0

     1513    10382    2           B_SEGREF_PAGE=B_SEGREF_PAGE+1;

  10382  1 000011   000000 054000 xsym               AOS     B_SEGREF_PAGE

     1514    10383    2           B_SEGREF_CUR$=B_SEGREF_BASE$;

  10383  1 000012   000000 236000 xsym               LDQ     B_SEGREF_BASE$
         1 000013   000000 756000 xsym               STQ     B_SEGREF_CUR$

     1515    10384    2           END;

     1516    10385         /*
     1517    10386         The following will build the symref data entry.
     1518    10387         */
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:197  
     1519    10388    1       B$SEGREF.NPOINTER=P_NAME_POINTER;

  10388  1 000014   200003 470500                    LDP0    @P_NAME_POINTER,,AUTO
         1 000015   000000 720100                    LXL0    0,,PR0
         1 000016   000000 471400 xsym               LDP1    B_SEGREF_CUR$
         1 000017   100000 740100                    STX0    0,,PR1

     1520    10389    1       IF ADDR(P_NSAB)~=ADDR(NIL) THEN

  10389  1 000020   200005 236100                    LDQ     @P_NSAB,,AUTO
         1 000021   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000022   000030 600000 1                  TZE     s:10391

     1521    10390    1           B$SEGREF.G66_NSAB=P_NSAB;

  10390  1 000023   200005 471500                    LDP1    @P_NSAB,,AUTO
         1 000024   000000 473400 xsym               LDP3    B_SEGREF_CUR$
         1 000025   003100 060500                    CSL     bolr='003'O
         1 000026   100000 000004                    BDSC    0,,PR1                   by=0,bit=0,n=4
         1 000027   300000 420004                    BDSC    0,,PR3                   by=2,bit=2,n=4

     1522    10391    1       IF ADDR(P_SREF_FLAG)~=ADDR(NIL) THEN

  10391  1 000030   200006 236100                    LDQ     @P_SREF_FLAG,,AUTO
         1 000031   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000032   000040 600000 1                  TZE     s:10393

     1523    10392    1           B$SEGREF.SREF=P_SREF_FLAG;

  10392  1 000033   200006 471500                    LDP1    @P_SREF_FLAG,,AUTO
         1 000034   000000 473400 xsym               LDP3    B_SEGREF_CUR$
         1 000035   003100 060500                    CSL     bolr='003'O
         1 000036   100000 000001                    BDSC    0,,PR1                   by=0,bit=0,n=1
         1 000037   300000 400001                    BDSC    0,,PR3                   by=2,bit=0,n=1

     1524    10393    1       IF ADDR(P_READ_ONLY_FLAG)~=ADDR(NIL) THEN

PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:198  
  10393  1 000040   200007 236100                    LDQ     @P_READ_ONLY_FLAG,,AUTO
         1 000041   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000042   000050 600000 1                  TZE     s:10395

     1525    10394    1           B$SEGREF.READ_ONLY=P_READ_ONLY_FLAG;

  10394  1 000043   200007 471500                    LDP1    @P_READ_ONLY_FLAG,,AUTO
         1 000044   000000 473400 xsym               LDP3    B_SEGREF_CUR$
         1 000045   003100 060500                    CSL     bolr='003'O
         1 000046   100000 000001                    BDSC    0,,PR1                   by=0,bit=0,n=1
         1 000047   300000 410001                    BDSC    0,,PR3                   by=2,bit=1,n=1

     1526    10395    1       B_SEGREF_COUNT=B_SEGREF_COUNT+1;

  10395  1 000050   000000 054000 xsym               AOS     B_SEGREF_COUNT

     1527    10396    1       P_SEGREF_NUMBER=B_SEGREF_COUNT;

  10396  1 000051   000000 235000 xsym               LDA     B_SEGREF_COUNT
         1 000052   200004 471500                    LDP1    @P_SEGREF_NUMBER,,AUTO
         1 000053   100000 755100                    STA     0,,PR1

     1528    10397    1       B_SEGREF_CUR$=PINCRW(B_SEGREF_CUR$,SIZEW(B$SEGREF));

  10397  1 000054   000000 236000 xsym               LDQ     B_SEGREF_CUR$
         1 000055   000001 036003                    ADLQ    1,DU
         1 000056   000000 756000 xsym               STQ     B_SEGREF_CUR$

     1529    10398    1       RETURN;

  10398  1 000057   000000 702200 xent               TSX2  ! X66_ARET
     1530    10399    1   END XUO$SEGREF;
     1531    10400        %EOD;

PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:199  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$SEGREF.
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:200  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @P_NAME_POINTER            5-0-0/w PTR         r     1 @P_NSAB
     7-0-0/w PTR         r     1 @P_READ_ONLY_FLAG          4-0-0/w PTR         r     1 @P_SEGREF_NUMBER
     6-0-0/w PTR         r     1 @P_SREF_FLAG              *0-0-0/w SBIN        r     1 P_NAME_POINTER
    *0-0-0/b BIT (4)     r     1 P_NSAB                    *0-0-0/b BIT         r     1 P_READ_ONLY_FLAG
    *0-0-0/w UBIN        r     1 P_SEGREF_NUMBER           *0-0-0/b BIT         r     1 P_SREF_FLAG

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_SEGREF_BASE$             0-0-0/w SBIN        r     1 B_SEGREF_COUNT
     0-0-0/w PTR         r     1 B_SEGREF_CUR$              0-0-0/w PTR         r     1 B_SEGREF_END$
     0-0-0/w SBIN        r     1 B_SEGREF_PAGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(24)    r     1 B$SEGREF


   Procedure XUO$SEGREF requires 48 words for executable code.
   Procedure XUO$SEGREF requires 8 words of local(AUTO) storage.
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:201  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:202  
          MINI XREF LISTING

B$SEGREF
     10293**DCL     10397--ASSIGN
B$SEGREF.G66_NSAB
     10304**DCL     10390<<ASSIGN
B$SEGREF.NPOINTER
     10294**DCL     10388<<ASSIGN
B$SEGREF.READ_ONLY
     10301**DCL     10394<<ASSIGN
B$SEGREF.SREF
     10297**DCL     10392<<ASSIGN
B_SEGREF_BASE$
     10321**DCL     10383>>ASSIGN
B_SEGREF_COUNT
     10324**DCL     10395<<ASSIGN  10395>>ASSIGN  10396>>ASSIGN
B_SEGREF_CUR$
     10322**DCL     10293--IMP-PTR 10379>>IF      10383<<ASSIGN  10388>>ASSIGN  10390>>ASSIGN  10392>>ASSIGN
     10394>>ASSIGN  10397<<ASSIGN  10397>>ASSIGN
B_SEGREF_END$
     10323**DCL     10379>>IF
B_SEGREF_PAGE
     10325**DCL     10382<<ASSIGN  10382>>ASSIGN
P_NAME_POINTER
     10262**DCL        76--PROC    10388>>ASSIGN
P_NSAB
     10263**DCL        76--PROC    10389--IF      10390>>ASSIGN
P_READ_ONLY_FLAG
     10267**DCL        76--PROC    10393--IF      10394>>ASSIGN
P_SEGREF_NUMBER
     10268**DCL        76--PROC    10396<<ASSIGN
P_SREF_FLAG
     10265**DCL        76--PROC    10391--IF      10392>>ASSIGN
XUO$OUWRITE
PL6.E3A0      #008=XUO$SEGREF File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:27 Page:203  
     10351**DCL-ENT 10381--CALL

PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:204  
     1532        1        /*M*     XUO$INTNTRY -- THIS MODULE WILL BUILD OBJECT UNIT INTNTRY RECORDS*/
     1533        2        /*T***********************************************************/
     1534        3        /*T*                                                         */
     1535        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1536        5        /*T*                                                         */
     1537        6        /*T***********************************************************/
     1538        7        /*P*
     1539        8
     1540        9
     1541       10        NAME:  XUO$INTNTRY
     1542       11        XUO$INTNTRY --Internal Entry Debug Record (Record Type 12)
     1543       12
     1544       13        PURPOSE:  To add entries to the Internal Entry Debug Record
     1545       14
     1546       15        DESCRIPTION:  This routine adds entries to the Internal
     1547       16            Entry Debug Record.  There is one entry for every
     1548       17            internal procedure entry point within the program.
     1549       18            In PL6 these are generated by PROC and ENTRY statements.
     1550       19            Entries are ordered such that the internal logical
     1551       20            block structure of the module is reflected.
     1552       21
     1553       22        */
     1554       23        /*D*
     1555       24
     1556       25        CALL:  CALL XUO$INTNTRY(Logical Block Number,
     1557       26                         Section Number,
     1558       27                         Section Offset,
     1559       28                         Name Pointer,
     1560       29                         Entry Flag,
     1561       30                         Altreturn Flag,
     1562       31                         Argument Check Flag,
     1563       32                         Call Type,
     1564       33                         Number of Arguments)
     1565       34
     1566       35
     1567       36        INPUT:
     1568       37            Logical Block Number UBIN
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:205  
     1569       38                                The entry number of the logical block
     1570       39                                table entry which describes this
     1571       40                                procedure.
     1572       41            Section Number      UBIN
     1573       42                                The entry number into the control
     1574       43                                section table (type 3) (OU only).
     1575       44            Section Offset      UBIN
     1576       45                                The word offset from the origin of
     1577       46                                the section.
     1578       47            Name Pointer        SBIN
     1579       48                                The word displacement into the debug
     1580       49                                name record (type 15) locating the
     1581       50                                name of this entry.
     1582       51            Entry Flag          BIT (1) UNALIGNED
     1583       52                                A flag denoting primary entry definition.
     1584       53                                   0 = not a primary name
     1585       54                                   1 = a primary name (object unit name)
     1586       55            Altreturn Flag      BIT (1) UNALIGNED
     1587       56                                A flag denoting permissible alternate
     1588       57                                return.
     1589       58                                   0 = alternate return not allowed
     1590       59                                   1 = alternate return allowed
     1591       60            Argument Check Flag BIT (1) UNALIGNED
     1592       61                                CHECK is a one-bit flag denoting
     1593       62                                arguments/parameters check and alternate
     1594       63                                return specification check.
     1595       64                                   0 = do not check for matching
     1596       65                                       arguments/parameters and alternate
     1597       66                                       return specification check.
     1598       67                                   1 = check for matching arguments/parameters
     1599       68            Call Type           UBIN
     1600       69                                Denotes the calling sequence type
     1601       70                                   0 = Standard CP-6 Callable Procedure
     1602       71                                   1 = Nonstandard Call Type
     1603       72                                   2 = Standard CP-6 Procedure with
     1604       73                                       MAIN attribute
     1605       74                                   3 = Standard CP-6 Procedure with
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:206  
     1606       75                                        ASYNC attribute
     1607       76                                   4 = Standard CP-6 Function Procedure;
     1608       77                                        a variable table entry will be
     1609       78                                        present to define the attributes
     1610       79                                        of the function.
     1611       80                                   5 = Same as 0, except USE, AVOID, or
     1612       81                                       MATERIALIZE attributes specified
     1613       82                                   7 = Same as 2, except USE, AVOID, or
     1614       83                                       MATERIALIZE attributes specified
     1615       84                                   8 = Same as 3, except USE, AVOID, or
     1616       85                                       MATERIALIZE attributes specified
     1617       86                                   9 = Same as 4, except USE, AVOID, or
     1618       87                                       MATERIALIZE attributes specified
     1619       88                                  13 = GCOS domain, save
     1620       89                                  14 = GCOS domain, no save
     1621       90                                  15 = Non-Callable Procedure.
     1622       91            Number Arguments    UBIN
     1623       92                                Denotes the number of parameters.
     1624       93        OUTPUT:
     1625       94            none
     1626       95
     1627       96        B$OBJECT REFERENCE:  B$INTNTRY
     1628       97        */
     1629       98        /*B*
     1630       99
     1631      100        GLOBAL DATA:
     1632      101            B_INTNTRY_CUR$
     1633      102            B_INTNTRY_COUNT
     1634      103            B_INTNTRY_PAGE
     1635      104
     1636      105        INTERFACE:
     1637      106            XUO$OUWRITE
     1638      107
     1639      108        */
     1640      109
     1641      110
     1642      111        XUO$INTNTRY: PROC(P_LOGICAL_BLOCK_NUMBER,P_SECTION_NUMBER,P_SECTION_OFFSET,
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:207  
               111            P_NAME_POINTER,
     1643      112               P_ENTRY_FLAG,P_ALTRETURN_FLAG,P_ARGUMENT_CHECK_FLAG,P_CALL_TYPE,
               112                   P_NUMBER_ARGUMENTS);
     1644      113         /*
     1645      114            */
     1646      115        %INCLUDE ZVA_SYSTEM_FILE;
     1647     6366            %PAGE (ARG=INCLUDES);

              6379    1   /*******************************************************************************
              6380    1   *                                                                              *
              6381    1   *        INCLUDES              INCLUDES                                            *
              6382    1   *                                                                              *
              6383    1   *******************************************************************************/

     1648     6387        %INCLUDE B$OBJECT_C;
     1649     9817        %INCLUDE XUO$OBJ_C;
     1650    10227            %PAGE (ARG=SUBS);

             10240    1   /*******************************************************************************
             10241    1   *                                                                              *
             10242    1   *        SUBS              SUBS                                                  *
             10243    1   *                                                                              *
             10244    1   *******************************************************************************/

     1651    10248            %B$RECORDSUBS;
     1652    10276        %PLIST;
     1653    10277            %PAGE (ARG=PARAMTERS);

             10290    1   /*******************************************************************************
             10291    1   *                                                                              *
             10292    1   *        PARAMTERS              PARAMTERS                                          *
             10293    1   *                                                                              *
             10294    1   *******************************************************************************/

     1654    10298    1   DCL P_LOGICAL_BLOCK_NUMBER UBIN;
     1655    10299    1   DCL P_SECTION_NUMBER UBIN;
     1656    10300    1   DCL P_SECTION_OFFSET UBIN;
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:208  
     1657    10301    1   DCL P_NAME_POINTER SBIN;
     1658    10302    1   DCL P_ENTRY_FLAG BIT(1) UNAL;
     1659    10303    1   DCL P_ALTRETURN_FLAG BIT(1) UNAL;
     1660    10304    1   DCL P_ARGUMENT_CHECK_FLAG BIT(1) UNAL;
     1661    10305    1   DCL P_CALL_TYPE UBIN;
     1662    10306    1   DCL P_NUMBER_ARGUMENTS UBIN;
     1663    10307        %PAGE (ARG=INTNTRY DATA);

             10320    1   /*******************************************************************************
             10321    1   *                                                                              *
             10322    1   *        INTNTRY DATA              INTNTRY DATA                                    *
             10323    1   *                                                                              *
             10324    1   *******************************************************************************/

     1664    10328        %B$INTNTRY (STCLASS="BASED(INTNTRY_CUR$)");
     1665    10386        %B_INTNTRY_POINTERS;
     1666    10406    1   DCL INTNTRY_CUR$ PTR;
     1667    10407        %PLIST;
     1668    10408        %PAGE (ARG=ENTRY DCLS);

             10421    1   /*******************************************************************************
             10422    1   *                                                                              *
             10423    1   *        ENTRY DCLS              ENTRY DCLS                                        *
             10424    1   *                                                                              *
             10425    1   *******************************************************************************/

     1669    10429    1   DCL XUO$OUWRITE ENTRY(2);
     1670    10430        %PAGE (ARG=CODE);

             10443    1   /*******************************************************************************
             10444    1   *                                                                              *
             10445    1   *        CODE              CODE                                                  *
             10446    1   *                                                                              *
             10447    1   *******************************************************************************/

     1671    10451         /*
     1672    10452         The following will check to see if the passed information will
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:209  
     1673    10453         fit in the current record.  If not, the current record will be
     1674    10454         written and the pointer re-initialized.  Then the text will be moved to
     1675    10455         the buffer.
     1676    10456         */
     1677    10457    1       IF B_INTNTRY_CUR$>=B_INTNTRY_END$ THEN
     1678    10458    2       DO;
     1679    10459    2           CALL XUO$OUWRITE(%TYPINTNTRY);
     1680    10460    2           B_INTNTRY_PAGE=B_INTNTRY_PAGE+1;
     1681    10461    2           B_INTNTRY_CUR$=B_INTNTRY_BASE$;
     1682    10462    2           END;
     1683    10463         /*
     1684    10464         The following will build the procedure entry definition.
     1685    10465         */
     1686    10466    1       INTNTRY_CUR$=B_INTNTRY_CUR$;
     1687    10467    1       B$INTNTRY.LBE=P_LOGICAL_BLOCK_NUMBER;
     1688    10468    1       B$INTNTRY.OU.SECTNUM=P_SECTION_NUMBER;
     1689    10469    1       B$INTNTRY.OU.OFFSET=P_SECTION_OFFSET;
     1690    10470    1       B$INTNTRY.NPOINTER=P_NAME_POINTER;
     1691    10471    1       B$INTNTRY.PRI=P_ENTRY_FLAG;
     1692    10472    1       B$INTNTRY.ALT=P_ALTRETURN_FLAG;
     1693    10473    1       B$INTNTRY.CHECK=P_ARGUMENT_CHECK_FLAG;
     1694    10474    1       B$INTNTRY.CST=P_CALL_TYPE;
     1695    10475    1       B$INTNTRY.NPARAM=P_NUMBER_ARGUMENTS;
     1696    10476    1       B_INTNTRY_COUNT=B_INTNTRY_COUNT+1;
     1697    10477    1       B_INTNTRY_CUR$=PINCRW(B_INTNTRY_CUR$,SIZEW(B$INTNTRY));
     1698    10478    1       RETURN;
     1699    10479    1   END XUO$INTNTRY;
     1700    10480        %EOD;

PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:210  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$INTNTRY.

   Procedure XUO$INTNTRY requires 54 words for executable code.
   Procedure XUO$INTNTRY requires 14 words of local(AUTO) storage.

PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:211  

 Object Unit name= XUO$INTNTRY                                File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:27:44.12 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    54     66  XUO$INTNTRY
    2  RoData even  none     2      2  XUO$INTNTRY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        9  XUO$INTNTRY

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_INTNTRY_BASE$                       B_INTNTRY_CUR$
     B_INTNTRY_END$                        B_INTNTRY_COUNT                       B_INTNTRY_PAGE
     B_VECTNIL
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:212  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:213  


     1532        1        /*M*     XUO$INTNTRY -- THIS MODULE WILL BUILD OBJECT UNIT INTNTRY RECORDS*/
     1533        2        /*T***********************************************************/
     1534        3        /*T*                                                         */
     1535        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1536        5        /*T*                                                         */
     1537        6        /*T***********************************************************/
     1538        7        /*P*
     1539        8
     1540        9
     1541       10        NAME:  XUO$INTNTRY
     1542       11        XUO$INTNTRY --Internal Entry Debug Record (Record Type 12)
     1543       12
     1544       13        PURPOSE:  To add entries to the Internal Entry Debug Record
     1545       14
     1546       15        DESCRIPTION:  This routine adds entries to the Internal
     1547       16            Entry Debug Record.  There is one entry for every
     1548       17            internal procedure entry point within the program.
     1549       18            In PL6 these are generated by PROC and ENTRY statements.
     1550       19            Entries are ordered such that the internal logical
     1551       20            block structure of the module is reflected.
     1552       21
     1553       22        */
     1554       23        /*D*
     1555       24
     1556       25        CALL:  CALL XUO$INTNTRY(Logical Block Number,
     1557       26                         Section Number,
     1558       27                         Section Offset,
     1559       28                         Name Pointer,
     1560       29                         Entry Flag,
     1561       30                         Altreturn Flag,
     1562       31                         Argument Check Flag,
     1563       32                         Call Type,
     1564       33                         Number of Arguments)
     1565       34
     1566       35
     1567       36        INPUT:
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:214  
     1568       37            Logical Block Number UBIN
     1569       38                                The entry number of the logical block
     1570       39                                table entry which describes this
     1571       40                                procedure.
     1572       41            Section Number      UBIN
     1573       42                                The entry number into the control
     1574       43                                section table (type 3) (OU only).
     1575       44            Section Offset      UBIN
     1576       45                                The word offset from the origin of
     1577       46                                the section.
     1578       47            Name Pointer        SBIN
     1579       48                                The word displacement into the debug
     1580       49                                name record (type 15) locating the
     1581       50                                name of this entry.
     1582       51            Entry Flag          BIT (1) UNALIGNED
     1583       52                                A flag denoting primary entry definition.
     1584       53                                   0 = not a primary name
     1585       54                                   1 = a primary name (object unit name)
     1586       55            Altreturn Flag      BIT (1) UNALIGNED
     1587       56                                A flag denoting permissible alternate
     1588       57                                return.
     1589       58                                   0 = alternate return not allowed
     1590       59                                   1 = alternate return allowed
     1591       60            Argument Check Flag BIT (1) UNALIGNED
     1592       61                                CHECK is a one-bit flag denoting
     1593       62                                arguments/parameters check and alternate
     1594       63                                return specification check.
     1595       64                                   0 = do not check for matching
     1596       65                                       arguments/parameters and alternate
     1597       66                                       return specification check.
     1598       67                                   1 = check for matching arguments/parameters
     1599       68            Call Type           UBIN
     1600       69                                Denotes the calling sequence type
     1601       70                                   0 = Standard CP-6 Callable Procedure
     1602       71                                   1 = Nonstandard Call Type
     1603       72                                   2 = Standard CP-6 Procedure with
     1604       73                                       MAIN attribute
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:215  
     1605       74                                   3 = Standard CP-6 Procedure with
     1606       75                                        ASYNC attribute
     1607       76                                   4 = Standard CP-6 Function Procedure;
     1608       77                                        a variable table entry will be
     1609       78                                        present to define the attributes
     1610       79                                        of the function.
     1611       80                                   5 = Same as 0, except USE, AVOID, or
     1612       81                                       MATERIALIZE attributes specified
     1613       82                                   7 = Same as 2, except USE, AVOID, or
     1614       83                                       MATERIALIZE attributes specified
     1615       84                                   8 = Same as 3, except USE, AVOID, or
     1616       85                                       MATERIALIZE attributes specified
     1617       86                                   9 = Same as 4, except USE, AVOID, or
     1618       87                                       MATERIALIZE attributes specified
     1619       88                                  13 = GCOS domain, save
     1620       89                                  14 = GCOS domain, no save
     1621       90                                  15 = Non-Callable Procedure.
     1622       91            Number Arguments    UBIN
     1623       92                                Denotes the number of parameters.
     1624       93        OUTPUT:
     1625       94            none
     1626       95
     1627       96        B$OBJECT REFERENCE:  B$INTNTRY
     1628       97        */
     1629       98        /*B*
     1630       99
     1631      100        GLOBAL DATA:
     1632      101            B_INTNTRY_CUR$
     1633      102            B_INTNTRY_COUNT
     1634      103            B_INTNTRY_PAGE
     1635      104
     1636      105        INTERFACE:
     1637      106            XUO$OUWRITE
     1638      107
     1639      108        */
     1640      109
     1641      110
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:216  
     1642      111        XUO$INTNTRY: PROC(P_LOGICAL_BLOCK_NUMBER,P_SECTION_NUMBER,P_SECTION_OFFSET,
               111            P_NAME_POINTER,

    111  1 000000   000000 700200 xent  XUO$INTNTRY  TSX0  ! X66_AUTO_N
         1 000001   000016 000011                    ZERO    14,9

     1643      112               P_ENTRY_FLAG,P_ALTRETURN_FLAG,P_ARGUMENT_CHECK_FLAG,P_CALL_TYPE,
               112                   P_NUMBER_ARGUMENTS);
     1644      113         /*
     1645      114            */
     1646      115        %INCLUDE ZVA_SYSTEM_FILE;
     1647     6366            %PAGE (ARG=INCLUDES);

              6379    1   /*******************************************************************************
              6380    1   *                                                                              *
              6381    1   *        INCLUDES              INCLUDES                                           *
              6382    1   *                                                                              *
              6383    1   *******************************************************************************/

     1648     6387        %INCLUDE B$OBJECT_C;
     1649     9817        %INCLUDE XUO$OBJ_C;
     1650    10227            %PAGE (ARG=SUBS);

             10240    1   /*******************************************************************************
             10241    1   *                                                                              *
             10242    1   *        SUBS              SUBS                                                  *
             10243    1   *                                                                              *
             10244    1   *******************************************************************************/

     1651    10248            %B$RECORDSUBS;
     1652    10276        %PLIST;
     1653    10277            %PAGE (ARG=PARAMTERS);

             10290    1   /*******************************************************************************
             10291    1   *                                                                              *
             10292    1   *        PARAMTERS              PARAMTERS                                         *
             10293    1   *                                                                              *
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:217  
             10294    1   *******************************************************************************/

     1654    10298    1   DCL P_LOGICAL_BLOCK_NUMBER UBIN;
     1655    10299    1   DCL P_SECTION_NUMBER UBIN;
     1656    10300    1   DCL P_SECTION_OFFSET UBIN;
     1657    10301    1   DCL P_NAME_POINTER SBIN;
     1658    10302    1   DCL P_ENTRY_FLAG BIT(1) UNAL;
     1659    10303    1   DCL P_ALTRETURN_FLAG BIT(1) UNAL;
     1660    10304    1   DCL P_ARGUMENT_CHECK_FLAG BIT(1) UNAL;
     1661    10305    1   DCL P_CALL_TYPE UBIN;
     1662    10306    1   DCL P_NUMBER_ARGUMENTS UBIN;
     1663    10307        %PAGE (ARG=INTNTRY DATA);

             10320    1   /*******************************************************************************
             10321    1   *                                                                              *
             10322    1   *        INTNTRY DATA              INTNTRY DATA                                   *
             10323    1   *                                                                              *
             10324    1   *******************************************************************************/

     1664    10328        %B$INTNTRY (STCLASS="BASED(INTNTRY_CUR$)");
     1665    10386        %B_INTNTRY_POINTERS;
     1666    10406    1   DCL INTNTRY_CUR$ PTR;
     1667    10407        %PLIST;
     1668    10408        %PAGE (ARG=ENTRY DCLS);

             10421    1   /*******************************************************************************
             10422    1   *                                                                              *
             10423    1   *        ENTRY DCLS              ENTRY DCLS                                       *
             10424    1   *                                                                              *
             10425    1   *******************************************************************************/

     1669    10429    1   DCL XUO$OUWRITE ENTRY(2);
     1670    10430        %PAGE (ARG=CODE);

             10443    1   /*******************************************************************************
             10444    1   *                                                                              *
             10445    1   *        CODE              CODE                                                  *
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:218  
             10446    1   *                                                                              *
             10447    1   *******************************************************************************/

     1671    10451         /*
     1672    10452         The following will check to see if the passed information will
     1673    10453         fit in the current record.  If not, the current record will be
     1674    10454         written and the pointer re-initialized.  Then the text will be moved to
     1675    10455         the buffer.
     1676    10456         */
     1677    10457    1       IF B_INTNTRY_CUR$>=B_INTNTRY_END$ THEN

  10457  1 000002   000000 236000 xsym               LDQ     B_INTNTRY_CUR$
         1 000003   000000 116000 xsym               CMPQ    B_INTNTRY_END$
         1 000004   000014 602000 1                  TNC     s:10466

     1678    10458    2       DO;

     1679    10459    2           CALL XUO$OUWRITE(%TYPINTNTRY);

  10459  1 000005   000001 630400 2                  EPPR0   1
         1 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000007   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000010   000000 011000                    NOP     0

     1680    10460    2           B_INTNTRY_PAGE=B_INTNTRY_PAGE+1;

  10460  1 000011   000000 054000 xsym               AOS     B_INTNTRY_PAGE

     1681    10461    2           B_INTNTRY_CUR$=B_INTNTRY_BASE$;

  10461  1 000012   000000 236000 xsym               LDQ     B_INTNTRY_BASE$
         1 000013   000000 756000 xsym               STQ     B_INTNTRY_CUR$

     1682    10462    2           END;

     1683    10463         /*
     1684    10464         The following will build the procedure entry definition.
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:219  
     1685    10465         */
     1686    10466    1       INTNTRY_CUR$=B_INTNTRY_CUR$;

  10466  1 000014   200014 756100                    STQ     INTNTRY_CUR$,,AUTO

     1687    10467    1       B$INTNTRY.LBE=P_LOGICAL_BLOCK_NUMBER;

  10467  1 000015   200003 470500                    LDP0    @P_LOGICAL_BLOCK_NUMBER,,AUTO
         1 000016   200014 471500                    LDP1    INTNTRY_CUR$,,AUTO
         1 000017   000000 236100                    LDQ     0,,PR0
         1 000020   000033 736000                    QLS     27
         1 000021   100000 552140                    STBQ    0,'40'O,PR1

     1688    10468    1       B$INTNTRY.OU.SECTNUM=P_SECTION_NUMBER;

  10468  1 000022   200004 473500                    LDP3    @P_SECTION_NUMBER,,AUTO
         1 000023   300000 236100                    LDQ     0,,PR3
         1 000024   000022 736000                    QLS     18
         1 000025   100000 552120                    STBQ    0,'20'O,PR1

     1689    10469    1       B$INTNTRY.OU.OFFSET=P_SECTION_OFFSET;

  10469  1 000026   200005 474500                    LDP4    @P_SECTION_OFFSET,,AUTO
         1 000027   400000 720100                    LXL0    0,,PR4
         1 000030   100000 440100                    SXL0    0,,PR1

     1690    10470    1       B$INTNTRY.NPOINTER=P_NAME_POINTER;

  10470  1 000031   200006 475500                    LDP5    @P_NAME_POINTER,,AUTO
         1 000032   500000 721100                    LXL1    0,,PR5
         1 000033   100001 741100                    STX1    1,,PR1

     1691    10471    1       B$INTNTRY.PRI=P_ENTRY_FLAG;

  10471  1 000034   200007 476500                    LDP6    @P_ENTRY_FLAG,,AUTO
         1 000035   003100 060500                    CSL     bolr='003'O
         1 000036   600000 000001                    BDSC    0,,PR6                   by=0,bit=0,n=1
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:220  
         1 000037   100001 400001                    BDSC    1,,PR1                   by=2,bit=0,n=1

     1692    10472    1       B$INTNTRY.ALT=P_ALTRETURN_FLAG;

  10472  1 000040   200010 477500                    LDP7    @P_ALTRETURN_FLAG,,AUTO
         1 000041   003100 060500                    CSL     bolr='003'O
         1 000042   700000 000001                    BDSC    0,,PR7                   by=0,bit=0,n=1
         1 000043   100001 410001                    BDSC    1,,PR1                   by=2,bit=1,n=1

     1693    10473    1       B$INTNTRY.CHECK=P_ARGUMENT_CHECK_FLAG;

  10473  1 000044   200011 470500                    LDP0    @P_ARGUMENT_CHECK_FLAG,,AUTO
         1 000045   003100 060500                    CSL     bolr='003'O
         1 000046   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
         1 000047   100001 420001                    BDSC    1,,PR1                   by=2,bit=2,n=1

     1694    10474    1       B$INTNTRY.CST=P_CALL_TYPE;

  10474  1 000050   200012 470500                    LDP0    @P_CALL_TYPE,,AUTO
         1 000051   000000 236100                    LDQ     0,,PR0
         1 000052   000011 736000                    QLS     9
         1 000053   100001 676100                    ERQ     1,,PR1
         1 000054   077000 376007                    ANQ     32256,DL
         1 000055   100001 656100                    ERSQ    1,,PR1

     1695    10475    1       B$INTNTRY.NPARAM=P_NUMBER_ARGUMENTS;

  10475  1 000056   200013 470500                    LDP0    @P_NUMBER_ARGUMENTS,,AUTO
         1 000057   000000 236100                    LDQ     0,,PR0
         1 000060   100001 552104                    STBQ    1,'04'O,PR1

     1696    10476    1       B_INTNTRY_COUNT=B_INTNTRY_COUNT+1;

  10476  1 000061   000000 054000 xsym               AOS     B_INTNTRY_COUNT

     1697    10477    1       B_INTNTRY_CUR$=PINCRW(B_INTNTRY_CUR$,SIZEW(B$INTNTRY));

PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:221  
  10477  1 000062   000000 236000 xsym               LDQ     B_INTNTRY_CUR$
         1 000063   000002 036003                    ADLQ    2,DU
         1 000064   000000 756000 xsym               STQ     B_INTNTRY_CUR$

     1698    10478    1       RETURN;

  10478  1 000065   000000 702200 xent               TSX2  ! X66_ARET
     1699    10479    1   END XUO$INTNTRY;
     1700    10480        %EOD;

PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:222  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$INTNTRY.
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:223  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    10-0-0/w PTR         r     1 @P_ALTRETURN_FLAG
    11-0-0/w PTR         r     1 @P_ARGUMENT_CHECK_FLAG
    12-0-0/w PTR         r     1 @P_CALL_TYPE               7-0-0/w PTR         r     1 @P_ENTRY_FLAG
     3-0-0/w PTR         r     1 @P_LOGICAL_BLOCK_NUMBER
     6-0-0/w PTR         r     1 @P_NAME_POINTER           13-0-0/w PTR         r     1 @P_NUMBER_ARGUMENTS
     4-0-0/w PTR         r     1 @P_SECTION_NUMBER          5-0-0/w PTR         r     1 @P_SECTION_OFFSET
    14-0-0/w PTR         r     1 INTNTRY_CUR$              *0-0-0/b BIT         r     1 P_ALTRETURN_FLAG
    *0-0-0/b BIT         r     1 P_ARGUMENT_CHECK_FLAG
    *0-0-0/w UBIN        r     1 P_CALL_TYPE               *0-0-0/b BIT         r     1 P_ENTRY_FLAG
    *0-0-0/w UBIN        r     1 P_LOGICAL_BLOCK_NUMBER
    *0-0-0/w SBIN        r     1 P_NAME_POINTER            *0-0-0/w UBIN        r     1 P_NUMBER_ARGUMENTS
    *0-0-0/w UBIN        r     1 P_SECTION_NUMBER          *0-0-0/w UBIN        r     1 P_SECTION_OFFSET

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_INTNTRY_BASE$            0-0-0/w SBIN        r     1 B_INTNTRY_COUNT
     0-0-0/w PTR         r     1 B_INTNTRY_CUR$             0-0-0/w PTR         r     1 B_INTNTRY_END$
     0-0-0/w SBIN        r     1 B_INTNTRY_PAGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 B$INTNTRY

PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:224  

   Procedure XUO$INTNTRY requires 54 words for executable code.
   Procedure XUO$INTNTRY requires 14 words of local(AUTO) storage.
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:225  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:226  
          MINI XREF LISTING

B$INTNTRY
     10329**DCL     10477--ASSIGN
B$INTNTRY.ALT
     10351**DCL     10472<<ASSIGN
B$INTNTRY.CHECK
     10355**DCL     10473<<ASSIGN
B$INTNTRY.CST
     10363**DCL     10474<<ASSIGN
B$INTNTRY.LBE
     10330**DCL     10467<<ASSIGN
B$INTNTRY.NPARAM
     10383**DCL     10475<<ASSIGN
B$INTNTRY.NPOINTER
     10343**DCL     10470<<ASSIGN
B$INTNTRY.OU
     10333**DCL     10340--REDEF
B$INTNTRY.OU.OFFSET
     10337**DCL     10469<<ASSIGN
B$INTNTRY.OU.SECTNUM
     10334**DCL     10468<<ASSIGN
B$INTNTRY.PRI
     10346**DCL     10471<<ASSIGN
B_INTNTRY_BASE$
     10398**DCL     10461>>ASSIGN
B_INTNTRY_COUNT
     10401**DCL     10476<<ASSIGN  10476>>ASSIGN
B_INTNTRY_CUR$
     10399**DCL     10457>>IF      10461<<ASSIGN  10466>>ASSIGN  10477<<ASSIGN  10477>>ASSIGN
B_INTNTRY_END$
     10400**DCL     10457>>IF
B_INTNTRY_PAGE
     10402**DCL     10460<<ASSIGN  10460>>ASSIGN
PL6.E3A0      #009=XUO$INTNTRY File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:27 Page:227  
INTNTRY_CUR$
     10406**DCL     10329--IMP-PTR 10466<<ASSIGN  10467>>ASSIGN  10468>>ASSIGN  10469>>ASSIGN  10470>>ASSIGN
     10471>>ASSIGN  10472>>ASSIGN  10473>>ASSIGN  10474>>ASSIGN  10475>>ASSIGN
P_ALTRETURN_FLAG
     10303**DCL       111--PROC    10472>>ASSIGN
P_ARGUMENT_CHECK_FLAG
     10304**DCL       111--PROC    10473>>ASSIGN
P_CALL_TYPE
     10305**DCL       111--PROC    10474>>ASSIGN
P_ENTRY_FLAG
     10302**DCL       111--PROC    10471>>ASSIGN
P_LOGICAL_BLOCK_NUMBER
     10298**DCL       111--PROC    10467>>ASSIGN
P_NAME_POINTER
     10301**DCL       111--PROC    10470>>ASSIGN
P_NUMBER_ARGUMENTS
     10306**DCL       111--PROC    10475>>ASSIGN
P_SECTION_NUMBER
     10299**DCL       111--PROC    10468>>ASSIGN
P_SECTION_OFFSET
     10300**DCL       111--PROC    10469>>ASSIGN
XUO$OUWRITE
     10429**DCL-ENT 10459--CALL

PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:228  
     1701        1        /*M*     XUO$EXST -- THIS MODULE WILL BUILD OBJECT UNIT EXST RECORDS*/
     1702        2        /*T***********************************************************/
     1703        3        /*T*                                                         */
     1704        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1705        5        /*T*                                                         */
     1706        6        /*T***********************************************************/
     1707        7        /*P*
     1708        8
     1709        9
     1710       10        NAME:  XUO$EXST
     1711       11        XUO$EXST --Executable Statement Debug Record (Record Type 13)
     1712       12
     1713       13        PURPOSE:  To build an entry in the Executable Statements
     1714       14                  Debug record.
     1715       15
     1716       16        DESCRIPTION:  The record contains one entry for every executable
     1717       17              statement and substatement in the module.  Note that the
     1718       18              logical block table scopes the statement set for every
     1719       19              logical block.  The statement table must be in order of
     1720       20              ascending line numbers, and includes all labeled statements
     1721       21              that can be branched to.
     1722       22
     1723       23        */
     1724       24        /*D*
     1725       25
     1726       26        CALL:  CALL XUO$EXST(Section Number,
     1727       27                      Offset,
     1728       28                      Name Pointer,
     1729       29                      Logical Block Entry Number,
     1730       30                      Compiler Optimized Flag,
     1731       31                      Statement Type,
     1732       32                      Line Number,
     1733       33                      Label Array Flag,
     1734       34                      Label Index)
     1735       35
     1736       36        INPUT:
     1737       37            Section Number      UBIN
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:229  
     1738       38                                Contains an entry number into the
     1739       39                                  control section table (type 3)
     1740       40                                (OU only).
     1741       41            Offset              UBIN
     1742       42                                Word offset from the origin of the
     1743       43                                section. (OU)
     1744       44            Name Pointer        SBIN
     1745       45                                The word displacement into the debug
     1746       46                                name record (type 15) locating the
     1747       47                                statement label.  A value of -1
     1748       48                                indicates no label.
     1749       49            Logical Block Entry Number  UBIN
     1750       50                                This is the entry number in the logical
     1751       51                                block table of the logical block of the
     1752       52                                highest lexical level containing this
     1753       53                                statement.
     1754       54            Compiler Optimized Flag  BIT (1) UNALIGNED
     1755       55                                This flag indicates a compiler optimized
     1756       56                                statement;  when set, it indicates this
     1757       57                                statement may not produce correct results
     1758       58                                if the compiled in program flow has been
     1759       59                                altered.
     1760       60            Statement Type      UBIN
     1761       61                    This is the code which indicates the
     1762       62                      generic class of statement for use by the dubugger.
     1763       63
     1764       64                      The statement types and their value for STTYPE are:
     1765       65
     1766       66                       0 - Null Statement
     1767       67                       1 - Assignments
     1768       68                       2 - Call
     1769       69                       3 - Monitor Call
     1770       70                       4 - Alternate Shared Library Call
     1771       71                       5 - If
     1772       72                       6 - Else
     1773       73                       7 - Case
     1774       74                       8 - GOTO
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:230  
     1775       75                       9 - Return
     1776       76                      10 - Altreturn
     1777       77                      11 - Remember
     1778       78                      12 - Unwind
     1779       79                      13 - Report Writer
     1780       80                      14 - Alter
     1781       81                      15 - Evaluate
     1782       82                      16 - Intrinsic Call
     1783       83                      17 - Spoil
     1784       84                      18 - GOTO Subscripted
     1785       85                      19 - Assigned GOTO
     1786       86                      20 - If Logical
     1787       87                      21 - If Arithmetic
     1788       88                      22 - Pause
     1789       89                      23 - Perform
     1790       90                      24 - Stop Program
     1791       91                      25 - I/O Statement
     1792       92                      26 - Else If
     1793       93                      27 - Assigned
     1794       94                      28 - Do Select
     1795       95                      29 - Do Select End
     1796       96                      30 - Select
     1797       97                      31 - Do Uninhibit
     1798       98                      32 - Inspect
     1799       99                      33 - Do Until
     1800      100                      34 - Do Index
     1801      101                      35 - Do While
     1802      102                      36 - Do Case
     1803      103                      37 - DO
     1804      104                      38 - DO INHIBIT
     1805      105                      39 - Set
     1806      106                      40 - Exit
     1807      107                      41 - Do Uninhibit End
     1808      108                      42 - Purge
     1809      109                      43 - Do Until End
     1810      110                      44 - Do Index End
     1811      111                      45 - Do While End
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:231  
     1812      112                      46 - Do Case End
     1813      113                      47 - DO END
     1814      114                      48 - DO INHIBIT END
     1815      115                      49 - Release
     1816      116                      50 - Send
     1817      117                      51 - Data Base
     1818      118                      52 - Cancel
     1819      119                      53 - Initialize
     1820      120                      54 - Merge
     1821      121                      55 - Receive
     1822      122                      56 - Search
     1823      123                      57 - Sort
     1824      124                      58 - String
     1825      125                      59 - Unstring
     1826      126                      60 - Use
     1827      127                      61 - 100 Reserved for future use
     1828      128                     101 - Proc
     1829      129                     102 - Proc End
     1830      130                     103 - Entry
     1831      131                     104 - Compiler Miscellaneous
     1832      132            Line Number         UBIN
     1833      133                                The line number of this executable
     1834      134                                statement.
     1835      135            Label Array Flag    UBIN
     1836      136                                This flag is the label array indicator.
     1837      137                                When it is set to 1 the Subscript field
     1838      138                                contains the associated subscript value,
     1839      139                                otherwise the Subscript field contains
     1840      140                                all zeros.
     1841      141            Label Index         UBIN
     1842      142                                When the Label Array Flag is 1, this
     1843      143                                field contains the associated subscript
     1844      144                                value; otherwise, it contains all zeros.
     1845      145
     1846      146        OUTPUT:
     1847      147           none
     1848      148
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:232  
     1849      149        B$OBJECT REFERENCE:  B$EXST
     1850      150        */
     1851      151        /*B*
     1852      152
     1853      153        GLOBAL DATA:
     1854      154           B_EXST_CUR$
     1855      155           B_EXST_COUNT
     1856      156           B_EXST_PAGE
     1857      157
     1858      158        INTERFACE:
     1859      159            XUO$OUWRITE
     1860      160
     1861      161        */
     1862      162
     1863      163        XUO$EXST: PROC(P_PARAM1,P_OFFSET,P_NAME_POINTER,P_LOGICAL_BLOCK_ENTRY_NUMBER,
     1864      164               P_COMPILER_OPTIMIZED_FLAG,P_STATEMENT_TYPE,P_LINE_NUMBER,P_LABEL_ARRAY_FLAG,
               164                   P_LABEL_INDEX);
     1865      165         /*
     1866      166            */
     1867      167        %INCLUDE ZVA_SYSTEM_FILE;
     1868     6418            %PAGE (ARG=INCLUDES);

              6431    1   /*******************************************************************************
              6432    1   *                                                                              *
              6433    1   *        INCLUDES              INCLUDES                                            *
              6434    1   *                                                                              *
              6435    1   *******************************************************************************/

     1869     6439        %INCLUDE B$OBJECT_C;
     1870     9869        %INCLUDE XUO$OBJ_C;
     1871    10279            %PAGE (ARG=SUBS);

             10292    1   /*******************************************************************************
             10293    1   *                                                                              *
             10294    1   *        SUBS              SUBS                                                  *
             10295    1   *                                                                              *
             10296    1   *******************************************************************************/
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:233  

     1872    10300            %B$RECORDSUBS;
     1873    10328        %PLIST;
     1874    10329            %PAGE (ARG=PARAMETERS);

             10342    1   /*******************************************************************************
             10343    1   *                                                                              *
             10344    1   *        PARAMETERS              PARAMETERS                                        *
             10345    1   *                                                                              *
             10346    1   *******************************************************************************/

     1875    10350    1   DCL P_PARAM1 UBIN;
     1876    10351         /*
     1877    10352         The following definition is for XUO$EXST.
     1878    10353         */
     1879    10354    1   DCL P_SECTION_NUMBER REDEF P_PARAM1 UBIN;
     1880    10355         /*
     1881    10356         The following definition if for XUO$EXSTNUM.
     1882    10357         */
     1883    10358    1   DCL P_EXST_NUMBER REDEF P_PARAM1 UBIN;
     1884    10359    1   DCL P_OFFSET UBIN;
     1885    10360    1   DCL P_NAME_POINTER SBIN;
     1886    10361    1   DCL P_LOGICAL_BLOCK_ENTRY_NUMBER UBIN;
     1887    10362    1   DCL P_COMPILER_OPTIMIZED_FLAG BIT(1) UNAL;
     1888    10363    1   DCL P_STATEMENT_TYPE UBIN;
     1889    10364    1   DCL P_LINE_NUMBER UBIN;
     1890    10365    1   DCL P_LABEL_ARRAY_FLAG BIT(1) ALIGNED;
     1891    10366    1   DCL P_LABEL_INDEX UBIN;
     1892    10367         /*
     1893    10368            */
     1894    10369        %PAGE (ARG=EXST DATA);

             10382    1   /*******************************************************************************
             10383    1   *                                                                              *
             10384    1   *        EXST DATA              EXST DATA                                          *
             10385    1   *                                                                              *
             10386    1   *******************************************************************************/
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:234  

     1895    10390        %B$EXST (STCLASS="BASED(EXST_CUR$)");
     1896    10497        %B_EXST_POINTERS;
     1897    10517    1   DCL EXST_CUR$ PTR;
     1898    10518        %PLIST;
     1899    10519        %PAGE (ARG=ENTRY DCLS);

             10532    1   /*******************************************************************************
             10533    1   *                                                                              *
             10534    1   *        ENTRY DCLS              ENTRY DCLS                                        *
             10535    1   *                                                                              *
             10536    1   *******************************************************************************/

     1900    10540    1   DCL XUO$OUWRITE ENTRY(2);
     1901    10541        %PAGE (ARG=XUO$EXST);

             10554    1   /*******************************************************************************
             10555    1   *                                                                              *
             10556    1   *        XUO$EXST              XUO$EXST                                            *
             10557    1   *                                                                              *
             10558    1   *******************************************************************************/

     1902    10562         /*
     1903    10563         The following will check to see if the passed information will
     1904    10564         fit in the current record.  If not, the current record will be
     1905    10565         written and the pointer re-initialized.  Then the text will be moved
     1906    10566         to the buffer.
     1907    10567         */
     1908    10568    1       IF B_EXST_CUR$>=B_EXST_END$ THEN
     1909    10569    2       DO;
     1910    10570    2           CALL XUO$OUWRITE(%TYPEXST);
     1911    10571    2           B_EXST_PAGE=B_EXST_PAGE+1;
     1912    10572    2           B_EXST_CUR$=B_EXST_BASE$;
     1913    10573    2           END;
     1914    10574         /*
     1915    10575         The following will build the executable statement entry.
     1916    10576         */
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:235  
     1917    10577    1       EXST_CUR$=B_EXST_CUR$;
     1918    10578    1       IF ADDR(P_LABEL_ARRAY_FLAG)~=ADDR(NIL) THEN
     1919    10579    2       DO;
     1920    10580    2           B$EXST.LA=P_LABEL_ARRAY_FLAG;
     1921    10581    2           B$EXST.SUBSCRIPT=P_LABEL_INDEX;
     1922    10582    2           END;
     1923    10583    1       B$EXST.OU.SECTNUM=P_SECTION_NUMBER;
     1924    10584    1       B$EXST.OU.OFFSET=P_OFFSET;
     1925    10585    1       B$EXST.NPOINTER=P_NAME_POINTER;
     1926    10586    1       B$EXST.LBE=P_LOGICAL_BLOCK_ENTRY_NUMBER;
     1927    10587    1       B$EXST.COS=P_COMPILER_OPTIMIZED_FLAG;
     1928    10588    1       B$EXST.STTYPE=P_STATEMENT_TYPE;
     1929    10589    1       B$EXST.LINENUM=P_LINE_NUMBER;
     1930    10590    1       B_EXST_COUNT=B_EXST_COUNT+1;
     1931    10591    1       B_EXST_CUR$=PINCRW(B_EXST_CUR$,SIZEW(B$EXST));
     1932    10592    1       RETURN;
     1933    10593            %PAGE (ARG=XUO$EXSTNUM);

             10606    1   /*******************************************************************************
             10607    1   *                                                                              *
             10608    1   *        XUO$EXSTNUM              XUO$EXSTNUM                                      *
             10609    1   *                                                                              *
             10610    1   *******************************************************************************/

     1934    10614        /*P*
     1935    10615
     1936    10616
     1937    10617        NAME:  XUO$EXSTNUM
     1938    10618        XUO$EXSTNUM --Executable Statement Debug Record (Record Type 13)
     1939    10619
     1940    10620        PURPOSE:  To return the number of the next executable
     1941    10621                  statement debug entry.
     1942    10622
     1943    10623        DESCRIPTION:  This routine returns the number of the next
     1944    10624                  Executable Statement Debug entry to be allocated.
     1945    10625                  The returned value is used as input in the calls
     1946    10626                  to XUO$LOGBLKEXSTINIT and XUO$LOGBLKEXSTTERM
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:236  
     1947    10627                  where starting and ending Executable Statement
     1948    10628                  debug entry number is required.
     1949    10629
     1950    10630        */
     1951    10631        /*D*
     1952    10632
     1953    10633        CALL:  CALL XUO$EXSTNUM (Executable Statement Number)
     1954    10634
     1955    10635        INPUT:
     1956    10636           none
     1957    10637
     1958    10638        OUTPUT:
     1959    10639           Executable Statement number  UBIN
     1960    10640                                The number of the next executable
     1961    10641                                statement entry to be allocated.
     1962    10642
     1963    10643        B$OBJECT REFERENCE:  none
     1964    10644        */
     1965    10645        /*B*
     1966    10646
     1967    10647        GLOBAL DATA:  none
     1968    10648
     1969    10649        INTERFACE:  none
     1970    10650
     1971    10651
     1972    10652        */
     1973    10653
     1974    10654    1   XUO$EXSTNUM: ENTRY(P_PARAM1);
     1975    10655         /*
     1976    10656            */
     1977    10657    1       P_EXST_NUMBER=B_EXST_COUNT+1;
     1978    10658    1       RETURN;
     1979    10659    1   END XUO$EXST;
     1980    10660        %EOD;

PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:237  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$EXST.

   Procedure XUO$EXST requires 67 words for executable code.
   Procedure XUO$EXST requires 14 words of local(AUTO) storage.

PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:238  

 Object Unit name= XUO$EXST                                   File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:28:13.80 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    67    103  XUO$EXST
    2  RoData even  none     2      2  XUO$EXST

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        9  XUO$EXST
     1     74                  yes      Std        1  XUO$EXSTNUM

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:239  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_EXST_BASE$                          B_EXST_CUR$
     B_EXST_END$                           B_EXST_COUNT                          B_EXST_PAGE
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:240  


     1701        1        /*M*     XUO$EXST -- THIS MODULE WILL BUILD OBJECT UNIT EXST RECORDS*/
     1702        2        /*T***********************************************************/
     1703        3        /*T*                                                         */
     1704        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1705        5        /*T*                                                         */
     1706        6        /*T***********************************************************/
     1707        7        /*P*
     1708        8
     1709        9
     1710       10        NAME:  XUO$EXST
     1711       11        XUO$EXST --Executable Statement Debug Record (Record Type 13)
     1712       12
     1713       13        PURPOSE:  To build an entry in the Executable Statements
     1714       14                  Debug record.
     1715       15
     1716       16        DESCRIPTION:  The record contains one entry for every executable
     1717       17              statement and substatement in the module.  Note that the
     1718       18              logical block table scopes the statement set for every
     1719       19              logical block.  The statement table must be in order of
     1720       20              ascending line numbers, and includes all labeled statements
     1721       21              that can be branched to.
     1722       22
     1723       23        */
     1724       24        /*D*
     1725       25
     1726       26        CALL:  CALL XUO$EXST(Section Number,
     1727       27                      Offset,
     1728       28                      Name Pointer,
     1729       29                      Logical Block Entry Number,
     1730       30                      Compiler Optimized Flag,
     1731       31                      Statement Type,
     1732       32                      Line Number,
     1733       33                      Label Array Flag,
     1734       34                      Label Index)
     1735       35
     1736       36        INPUT:
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:241  
     1737       37            Section Number      UBIN
     1738       38                                Contains an entry number into the
     1739       39                                  control section table (type 3)
     1740       40                                (OU only).
     1741       41            Offset              UBIN
     1742       42                                Word offset from the origin of the
     1743       43                                section. (OU)
     1744       44            Name Pointer        SBIN
     1745       45                                The word displacement into the debug
     1746       46                                name record (type 15) locating the
     1747       47                                statement label.  A value of -1
     1748       48                                indicates no label.
     1749       49            Logical Block Entry Number  UBIN
     1750       50                                This is the entry number in the logical
     1751       51                                block table of the logical block of the
     1752       52                                highest lexical level containing this
     1753       53                                statement.
     1754       54            Compiler Optimized Flag  BIT (1) UNALIGNED
     1755       55                                This flag indicates a compiler optimized
     1756       56                                statement;  when set, it indicates this
     1757       57                                statement may not produce correct results
     1758       58                                if the compiled in program flow has been
     1759       59                                altered.
     1760       60            Statement Type      UBIN
     1761       61                    This is the code which indicates the
     1762       62                      generic class of statement for use by the dubugger.
     1763       63
     1764       64                      The statement types and their value for STTYPE are:
     1765       65
     1766       66                       0 - Null Statement
     1767       67                       1 - Assignments
     1768       68                       2 - Call
     1769       69                       3 - Monitor Call
     1770       70                       4 - Alternate Shared Library Call
     1771       71                       5 - If
     1772       72                       6 - Else
     1773       73                       7 - Case
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:242  
     1774       74                       8 - GOTO
     1775       75                       9 - Return
     1776       76                      10 - Altreturn
     1777       77                      11 - Remember
     1778       78                      12 - Unwind
     1779       79                      13 - Report Writer
     1780       80                      14 - Alter
     1781       81                      15 - Evaluate
     1782       82                      16 - Intrinsic Call
     1783       83                      17 - Spoil
     1784       84                      18 - GOTO Subscripted
     1785       85                      19 - Assigned GOTO
     1786       86                      20 - If Logical
     1787       87                      21 - If Arithmetic
     1788       88                      22 - Pause
     1789       89                      23 - Perform
     1790       90                      24 - Stop Program
     1791       91                      25 - I/O Statement
     1792       92                      26 - Else If
     1793       93                      27 - Assigned
     1794       94                      28 - Do Select
     1795       95                      29 - Do Select End
     1796       96                      30 - Select
     1797       97                      31 - Do Uninhibit
     1798       98                      32 - Inspect
     1799       99                      33 - Do Until
     1800      100                      34 - Do Index
     1801      101                      35 - Do While
     1802      102                      36 - Do Case
     1803      103                      37 - DO
     1804      104                      38 - DO INHIBIT
     1805      105                      39 - Set
     1806      106                      40 - Exit
     1807      107                      41 - Do Uninhibit End
     1808      108                      42 - Purge
     1809      109                      43 - Do Until End
     1810      110                      44 - Do Index End
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:243  
     1811      111                      45 - Do While End
     1812      112                      46 - Do Case End
     1813      113                      47 - DO END
     1814      114                      48 - DO INHIBIT END
     1815      115                      49 - Release
     1816      116                      50 - Send
     1817      117                      51 - Data Base
     1818      118                      52 - Cancel
     1819      119                      53 - Initialize
     1820      120                      54 - Merge
     1821      121                      55 - Receive
     1822      122                      56 - Search
     1823      123                      57 - Sort
     1824      124                      58 - String
     1825      125                      59 - Unstring
     1826      126                      60 - Use
     1827      127                      61 - 100 Reserved for future use
     1828      128                     101 - Proc
     1829      129                     102 - Proc End
     1830      130                     103 - Entry
     1831      131                     104 - Compiler Miscellaneous
     1832      132            Line Number         UBIN
     1833      133                                The line number of this executable
     1834      134                                statement.
     1835      135            Label Array Flag    UBIN
     1836      136                                This flag is the label array indicator.
     1837      137                                When it is set to 1 the Subscript field
     1838      138                                contains the associated subscript value,
     1839      139                                otherwise the Subscript field contains
     1840      140                                all zeros.
     1841      141            Label Index         UBIN
     1842      142                                When the Label Array Flag is 1, this
     1843      143                                field contains the associated subscript
     1844      144                                value; otherwise, it contains all zeros.
     1845      145
     1846      146        OUTPUT:
     1847      147           none
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:244  
     1848      148
     1849      149        B$OBJECT REFERENCE:  B$EXST
     1850      150        */
     1851      151        /*B*
     1852      152
     1853      153        GLOBAL DATA:
     1854      154           B_EXST_CUR$
     1855      155           B_EXST_COUNT
     1856      156           B_EXST_PAGE
     1857      157
     1858      158        INTERFACE:
     1859      159            XUO$OUWRITE
     1860      160
     1861      161        */
     1862      162
     1863      163        XUO$EXST: PROC(P_PARAM1,P_OFFSET,P_NAME_POINTER,P_LOGICAL_BLOCK_ENTRY_NUMBER,

    163  1 000000   000000 700200 xent  XUO$EXST     TSX0  ! X66_AUTO_N
         1 000001   000016 000011                    ZERO    14,9

     1864      164               P_COMPILER_OPTIMIZED_FLAG,P_STATEMENT_TYPE,P_LINE_NUMBER,P_LABEL_ARRAY_FLAG,
               164                   P_LABEL_INDEX);
     1865      165         /*
     1866      166            */
     1867      167        %INCLUDE ZVA_SYSTEM_FILE;
     1868     6418            %PAGE (ARG=INCLUDES);

              6431    1   /*******************************************************************************
              6432    1   *                                                                              *
              6433    1   *        INCLUDES              INCLUDES                                           *
              6434    1   *                                                                              *
              6435    1   *******************************************************************************/

     1869     6439        %INCLUDE B$OBJECT_C;
     1870     9869        %INCLUDE XUO$OBJ_C;
     1871    10279            %PAGE (ARG=SUBS);

PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:245  
             10292    1   /*******************************************************************************
             10293    1   *                                                                              *
             10294    1   *        SUBS              SUBS                                                  *
             10295    1   *                                                                              *
             10296    1   *******************************************************************************/

     1872    10300            %B$RECORDSUBS;
     1873    10328        %PLIST;
     1874    10329            %PAGE (ARG=PARAMETERS);

             10342    1   /*******************************************************************************
             10343    1   *                                                                              *
             10344    1   *        PARAMETERS              PARAMETERS                                       *
             10345    1   *                                                                              *
             10346    1   *******************************************************************************/

     1875    10350    1   DCL P_PARAM1 UBIN;
     1876    10351         /*
     1877    10352         The following definition is for XUO$EXST.
     1878    10353         */
     1879    10354    1   DCL P_SECTION_NUMBER REDEF P_PARAM1 UBIN;
     1880    10355         /*
     1881    10356         The following definition if for XUO$EXSTNUM.
     1882    10357         */
     1883    10358    1   DCL P_EXST_NUMBER REDEF P_PARAM1 UBIN;
     1884    10359    1   DCL P_OFFSET UBIN;
     1885    10360    1   DCL P_NAME_POINTER SBIN;
     1886    10361    1   DCL P_LOGICAL_BLOCK_ENTRY_NUMBER UBIN;
     1887    10362    1   DCL P_COMPILER_OPTIMIZED_FLAG BIT(1) UNAL;
     1888    10363    1   DCL P_STATEMENT_TYPE UBIN;
     1889    10364    1   DCL P_LINE_NUMBER UBIN;
     1890    10365    1   DCL P_LABEL_ARRAY_FLAG BIT(1) ALIGNED;
     1891    10366    1   DCL P_LABEL_INDEX UBIN;
     1892    10367         /*
     1893    10368            */
     1894    10369        %PAGE (ARG=EXST DATA);

PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:246  
             10382    1   /*******************************************************************************
             10383    1   *                                                                              *
             10384    1   *        EXST DATA              EXST DATA                                         *
             10385    1   *                                                                              *
             10386    1   *******************************************************************************/

     1895    10390        %B$EXST (STCLASS="BASED(EXST_CUR$)");
     1896    10497        %B_EXST_POINTERS;
     1897    10517    1   DCL EXST_CUR$ PTR;
     1898    10518        %PLIST;
     1899    10519        %PAGE (ARG=ENTRY DCLS);

             10532    1   /*******************************************************************************
             10533    1   *                                                                              *
             10534    1   *        ENTRY DCLS              ENTRY DCLS                                       *
             10535    1   *                                                                              *
             10536    1   *******************************************************************************/

     1900    10540    1   DCL XUO$OUWRITE ENTRY(2);
     1901    10541        %PAGE (ARG=XUO$EXST);

             10554    1   /*******************************************************************************
             10555    1   *                                                                              *
             10556    1   *        XUO$EXST              XUO$EXST                                           *
             10557    1   *                                                                              *
             10558    1   *******************************************************************************/

     1902    10562         /*
     1903    10563         The following will check to see if the passed information will
     1904    10564         fit in the current record.  If not, the current record will be
     1905    10565         written and the pointer re-initialized.  Then the text will be moved
     1906    10566         to the buffer.
     1907    10567         */
     1908    10568    1       IF B_EXST_CUR$>=B_EXST_END$ THEN

  10568  1 000002   000000 236000 xsym               LDQ     B_EXST_CUR$
         1 000003   000000 116000 xsym               CMPQ    B_EXST_END$
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:247  
         1 000004   000014 602000 1                  TNC     s:10577

     1909    10569    2       DO;

     1910    10570    2           CALL XUO$OUWRITE(%TYPEXST);

  10570  1 000005   000001 630400 2                  EPPR0   1
         1 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000007   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000010   000000 011000                    NOP     0

     1911    10571    2           B_EXST_PAGE=B_EXST_PAGE+1;

  10571  1 000011   000000 054000 xsym               AOS     B_EXST_PAGE

     1912    10572    2           B_EXST_CUR$=B_EXST_BASE$;

  10572  1 000012   000000 236000 xsym               LDQ     B_EXST_BASE$
         1 000013   000000 756000 xsym               STQ     B_EXST_CUR$

     1913    10573    2           END;

     1914    10574         /*
     1915    10575         The following will build the executable statement entry.
     1916    10576         */
     1917    10577    1       EXST_CUR$=B_EXST_CUR$;

  10577  1 000014   200014 756100                    STQ     EXST_CUR$,,AUTO

     1918    10578    1       IF ADDR(P_LABEL_ARRAY_FLAG)~=ADDR(NIL) THEN

  10578  1 000015   200012 236100                    LDQ     @P_LABEL_ARRAY_FLAG,,AUTO
         1 000016   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000017   000034 600000 1                  TZE     s:10583

     1919    10579    2       DO;

PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:248  
     1920    10580    2           B$EXST.LA=P_LABEL_ARRAY_FLAG;

  10580  1 000020   200014 470500                    LDP0    EXST_CUR$,,AUTO
         1 000021   200012 471500                    LDP1    @P_LABEL_ARRAY_FLAG,,AUTO
         1 000022   100000 236100                    LDQ     0,,PR1
         1 000023   000000 676100                    ERQ     0,,PR0
         1 000024   400000 376003                    ANQ     -131072,DU
         1 000025   000000 656100                    ERSQ    0,,PR0

     1921    10581    2           B$EXST.SUBSCRIPT=P_LABEL_INDEX;

  10581  1 000026   200013 473500                    LDP3    @P_LABEL_INDEX,,AUTO
         1 000027   300000 236100                    LDQ     0,,PR3
         1 000030   000033 736000                    QLS     27
         1 000031   000000 676100                    ERQ     0,,PR0
         1 000032   377000 376003                    ANQ     130560,DU
         1 000033   000000 656100                    ERSQ    0,,PR0

     1922    10582    2           END;

     1923    10583    1       B$EXST.OU.SECTNUM=P_SECTION_NUMBER;

  10583  1 000034   200003 470500                    LDP0    @P_PARAM1,,AUTO
         1 000035   200014 471500                    LDP1    EXST_CUR$,,AUTO
         1 000036   000000 236100                    LDQ     0,,PR0
         1 000037   000022 736000                    QLS     18
         1 000040   100000 552120                    STBQ    0,'20'O,PR1

     1924    10584    1       B$EXST.OU.OFFSET=P_OFFSET;

  10584  1 000041   200004 473500                    LDP3    @P_OFFSET,,AUTO
         1 000042   300000 720100                    LXL0    0,,PR3
         1 000043   100000 440100                    SXL0    0,,PR1

     1925    10585    1       B$EXST.NPOINTER=P_NAME_POINTER;

  10585  1 000044   200005 474500                    LDP4    @P_NAME_POINTER,,AUTO
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:249  
         1 000045   400000 721100                    LXL1    0,,PR4
         1 000046   100001 741100                    STX1    1,,PR1

     1926    10586    1       B$EXST.LBE=P_LOGICAL_BLOCK_ENTRY_NUMBER;

  10586  1 000047   200006 475500                    LDP5    @P_LOGICAL_BLOCK_ENTRY_NUMBER,,AUTO
         1 000050   500000 722100                    LXL2    0,,PR5
         1 000051   100001 442100                    SXL2    1,,PR1

     1927    10587    1       B$EXST.COS=P_COMPILER_OPTIMIZED_FLAG;

  10587  1 000052   200007 476500                    LDP6    @P_COMPILER_OPTIMIZED_FLAG,,AUTO
         1 000053   003100 060500                    CSL     bolr='003'O
         1 000054   600000 000001                    BDSC    0,,PR6                   by=0,bit=0,n=1
         1 000055   100002 000001                    BDSC    2,,PR1                   by=0,bit=0,n=1

     1928    10588    1       B$EXST.STTYPE=P_STATEMENT_TYPE;

  10588  1 000056   200010 477500                    LDP7    @P_STATEMENT_TYPE,,AUTO
         1 000057   700000 236100                    LDQ     0,,PR7
         1 000060   000022 736000                    QLS     18
         1 000061   100002 676100                    ERQ     2,,PR1
         1 000062   000177 376003                    ANQ     127,DU
         1 000063   100002 656100                    ERSQ    2,,PR1

     1929    10589    1       B$EXST.LINENUM=P_LINE_NUMBER;

  10589  1 000064   200011 470500                    LDP0    @P_LINE_NUMBER,,AUTO
         1 000065   000000 723100                    LXL3    0,,PR0
         1 000066   100002 443100                    SXL3    2,,PR1

     1930    10590    1       B_EXST_COUNT=B_EXST_COUNT+1;

  10590  1 000067   000000 054000 xsym               AOS     B_EXST_COUNT

     1931    10591    1       B_EXST_CUR$=PINCRW(B_EXST_CUR$,SIZEW(B$EXST));

PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:250  
  10591  1 000070   000000 236000 xsym               LDQ     B_EXST_CUR$
         1 000071   000003 036003                    ADLQ    3,DU
         1 000072   000000 756000 xsym               STQ     B_EXST_CUR$

     1932    10592    1       RETURN;

  10592  1 000073   000000 702200 xent               TSX2  ! X66_ARET

     1933    10593            %PAGE (ARG=XUO$EXSTNUM);

             10606    1   /*******************************************************************************
             10607    1   *                                                                              *
             10608    1   *        XUO$EXSTNUM              XUO$EXSTNUM                                     *
             10609    1   *                                                                              *
             10610    1   *******************************************************************************/

     1934    10614        /*P*
     1935    10615
     1936    10616
     1937    10617        NAME:  XUO$EXSTNUM
     1938    10618        XUO$EXSTNUM --Executable Statement Debug Record (Record Type 13)
     1939    10619
     1940    10620        PURPOSE:  To return the number of the next executable
     1941    10621                  statement debug entry.
     1942    10622
     1943    10623        DESCRIPTION:  This routine returns the number of the next
     1944    10624                  Executable Statement Debug entry to be allocated.
     1945    10625                  The returned value is used as input in the calls
     1946    10626                  to XUO$LOGBLKEXSTINIT and XUO$LOGBLKEXSTTERM
     1947    10627                  where starting and ending Executable Statement
     1948    10628                  debug entry number is required.
     1949    10629
     1950    10630        */
     1951    10631        /*D*
     1952    10632
     1953    10633        CALL:  CALL XUO$EXSTNUM (Executable Statement Number)
     1954    10634
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:251  
     1955    10635        INPUT:
     1956    10636           none
     1957    10637
     1958    10638        OUTPUT:
     1959    10639           Executable Statement number  UBIN
     1960    10640                                The number of the next executable
     1961    10641                                statement entry to be allocated.
     1962    10642
     1963    10643        B$OBJECT REFERENCE:  none
     1964    10644        */
     1965    10645        /*B*
     1966    10646
     1967    10647        GLOBAL DATA:  none
     1968    10648
     1969    10649        INTERFACE:  none
     1970    10650
     1971    10651
     1972    10652        */
     1973    10653
     1974    10654    1   XUO$EXSTNUM: ENTRY(P_PARAM1);

  10654  1 000074   000000 700200 xent  XUO$EXSTNUM  TSX0  ! X66_AUTO_N
         1 000075   000016 000011                    ZERO    14,9

     1975    10655         /*
     1976    10656            */
     1977    10657    1       P_EXST_NUMBER=B_EXST_COUNT+1;

  10657  1 000076   000000 235000 xsym               LDA     B_EXST_COUNT
         1 000077   000001 035007                    ADLA    1,DL
         1 000100   200003 470500                    LDP0    @P_PARAM1,,AUTO
         1 000101   000000 755100                    STA     0,,PR0

     1978    10658    1       RETURN;

  10658  1 000102   000000 702200 xent               TSX2  ! X66_ARET
     1979    10659    1   END XUO$EXST;
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:252  
     1980    10660        %EOD;

PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:253  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$EXST.
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:254  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     7-0-0/w PTR         r     1 @P_COMPILER_OPTIMIZED_FLAG
    12-0-0/w PTR         r     1 @P_LABEL_ARRAY_FLAG       13-0-0/w PTR         r     1 @P_LABEL_INDEX
    11-0-0/w PTR         r     1 @P_LINE_NUMBER
     6-0-0/w PTR         r     1 @P_LOGICAL_BLOCK_ENTRY_NUMBER
     5-0-0/w PTR         r     1 @P_NAME_POINTER            4-0-0/w PTR         r     1 @P_OFFSET
     3-0-0/w PTR         r     1 @P_PARAM1                 10-0-0/w PTR         r     1 @P_STATEMENT_TYPE
    14-0-0/w PTR         r     1 EXST_CUR$
    *0-0-0/b BIT         r     1 P_COMPILER_OPTIMIZED_FLAG
    *0-0-0/w UBIN        r     1 P_EXST_NUMBER             *0-0-0/w BIT         r     1 P_LABEL_ARRAY_FLAG
    *0-0-0/w UBIN        r     1 P_LABEL_INDEX             *0-0-0/w UBIN        r     1 P_LINE_NUMBER
    *0-0-0/w UBIN        r     1 P_LOGICAL_BLOCK_ENTRY_NUMBER
    *0-0-0/w SBIN        r     1 P_NAME_POINTER            *0-0-0/w UBIN        r     1 P_OFFSET
    *0-0-0/w UBIN        r     1 P_PARAM1                  *0-0-0/w UBIN        r     1 P_SECTION_NUMBER
    *0-0-0/w UBIN        r     1 P_STATEMENT_TYPE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_EXST_BASE$               0-0-0/w SBIN        r     1 B_EXST_COUNT
     0-0-0/w PTR         r     1 B_EXST_CUR$                0-0-0/w PTR         r     1 B_EXST_END$
     0-0-0/w SBIN        r     1 B_EXST_PAGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(108)   r     1 B$EXST
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:255  


   Procedure XUO$EXST requires 67 words for executable code.
   Procedure XUO$EXST requires 14 words of local(AUTO) storage.
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:256  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:257  
          MINI XREF LISTING

B$EXST
     10391**DCL     10591--ASSIGN
B$EXST.COS
     10416**DCL     10587<<ASSIGN
B$EXST.LA
     10392**DCL     10580<<ASSIGN
B$EXST.LBE
     10412**DCL     10586<<ASSIGN
B$EXST.LINENUM
     10494**DCL     10589<<ASSIGN
B$EXST.NPOINTER
     10408**DCL     10585<<ASSIGN
B$EXST.OU
     10400**DCL     10406--REDEF
B$EXST.OU.OFFSET
     10404**DCL     10584<<ASSIGN
B$EXST.OU.SECTNUM
     10401**DCL     10583<<ASSIGN
B$EXST.STTYPE
     10424**DCL     10588<<ASSIGN
B$EXST.SUBSCRIPT
     10396**DCL     10581<<ASSIGN
B_EXST_BASE$
     10509**DCL     10572>>ASSIGN
B_EXST_COUNT
     10512**DCL     10590<<ASSIGN  10590>>ASSIGN  10657>>ASSIGN
B_EXST_CUR$
     10510**DCL     10568>>IF      10572<<ASSIGN  10577>>ASSIGN  10591<<ASSIGN  10591>>ASSIGN
B_EXST_END$
     10511**DCL     10568>>IF
B_EXST_PAGE
     10513**DCL     10571<<ASSIGN  10571>>ASSIGN
PL6.E3A0      #010=XUO$EXST File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:28 Page:258  
EXST_CUR$
     10517**DCL     10391--IMP-PTR 10577<<ASSIGN  10580>>ASSIGN  10581>>ASSIGN  10583>>ASSIGN  10584>>ASSIGN
     10585>>ASSIGN  10586>>ASSIGN  10587>>ASSIGN  10588>>ASSIGN  10589>>ASSIGN
P_COMPILER_OPTIMIZED_FLAG
     10362**DCL       163--PROC    10587>>ASSIGN
P_EXST_NUMBER
     10358**DCL     10657<<ASSIGN
P_LABEL_ARRAY_FLAG
     10365**DCL       163--PROC    10578--IF      10580>>ASSIGN
P_LABEL_INDEX
     10366**DCL       163--PROC    10581>>ASSIGN
P_LINE_NUMBER
     10364**DCL       163--PROC    10589>>ASSIGN
P_LOGICAL_BLOCK_ENTRY_NUMBER
     10361**DCL       163--PROC    10586>>ASSIGN
P_NAME_POINTER
     10360**DCL       163--PROC    10585>>ASSIGN
P_OFFSET
     10359**DCL       163--PROC    10584>>ASSIGN
P_PARAM1
     10350**DCL       163--PROC    10354--REDEF   10358--REDEF   10654--ENTRY
P_SECTION_NUMBER
     10354**DCL     10583>>ASSIGN
P_STATEMENT_TYPE
     10363**DCL       163--PROC    10588>>ASSIGN
XUO$OUWRITE
     10540**DCL-ENT 10570--CALL

PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:259  
     1981        1        /*M*     XUO$VREBL -- THIS MODULE WILL BUILD OBJECT UNIT VREBL RECORDS*/
     1982        2        /*T***********************************************************/
     1983        3        /*T*                                                         */
     1984        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1985        5        /*T*                                                         */
     1986        6        /*T***********************************************************/
     1987        7        /*P*
     1988        8
     1989        9
     1990       10        NAME:  XUO$VREBL
     1991       11        XUO$VREBL --Variable Debug Record (Record Type 14)
     1992       12
     1993       13        PURPOSE:  To build entries in the Variable Debug Record
     1994       14            (Record Type 14).
     1995       15
     1996       16        DESCRIPTION:  This routine builds an entry into the Variable
     1997       17            Debug Record (type 14).  The record contains descriptions
     1998       18            for every variable in the module.  Note that the logical
     1999       19            block table scopes the variable set for each logical
     2000       20            block.  A complete variable description may require more
     2001       21            than one entry.
     2002       22
     2003       23        */
     2004       24        /*D*
     2005       25
     2006       26        CALL:  CALL XUO$VREBL (Address,
     2007       27                        Address Type,
     2008       28                        Data Type,
     2009       29                        Reference Flag,
     2010       30                        Modified Flag,
     2011       31                        Logical Size,
     2012       32                        Level Number,
     2013       33                        Alignment Type,
     2014       34                        Size Type Flag,
     2015       35                        Array Type,
     2016       36                        Operand Type,
     2017       37                        Implied Pointer,
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:260  
     2018       38                        Operand,
     2019       39                        Element Size,
     2020       40                        Scale Factor,
     2021       41                        Dimensions,
     2022       42                        Name Pointer,
     2023       43                        Entry Number,
     2024       44                       *Status Exists)
     2025       45
     2026       46        INPUT:
     2027       47            Address             UBIN ALIGNED
     2028       48                                Address of the variable.
     2029       49            Address Type        UBIN ALIGNED
     2030       50                                The address type determines how to
     2031       51                                use the address and possible other
     2032       52                                information to locate the data described
     2033       53                                by the entry.  Address type can have
     2034       54                                the following values:
     2035       55                                  1 - Static data - address is an offset
     2036       56                                      within ISR.
     2037       57                                  2 - Automatic Data - address is an offset
     2038       58                                      within the current
     2039       59                                      AUTO frame located by PR2.
     2040       60                                  3 - Based data - address is an offset
     2041       61                                      from user pointer
     2042       62                                      (possibly defined by implied pointer).
     2043       63                                  4 - DCB - address is an offset from the
     2044       64                                      beginning of the DCB
     2045       65                                      (which is located by implied pointer).
     2046       66                                  5 - Parameter - address is an offset
     2047       67                                      from the data located
     2048       68                                      by the Implied Pointer into
     2049       69                                      Automatic Storage.
     2050       70                                  6 - Constant - address is an 18 bit constant.
     2051       71                                  7 - Parameter in static - address is an
     2052       72                                      offset from the data located by
     2053       73                                      the Implied Pointer into Static
     2054       74                                      Storage.  In this case relocation
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:261  
     2055       75                                      information applies to implied pointer.
     2056       76                                  8 - AREADEF - address is the offset into
     2057       77                                      the segment for this item.
     2058       78                                  9 - Virtual array - address is the IS
     2059       79                                      IS offset in static of the descriptor
     2060       80                                      block for this virtual array.
     2061       81                                 10 - 15 - Reserved for future use.
     2062       82            Data Type           UBIN ALIGNED
     2063       83                                Indicates the type of data described
     2064       84                                by this entry.  The defined data type
     2065       85                                codes are as follows:
     2066       86                      0              Type not specified.
     2067       87                      1              Real binary fixed single precision
     2068       88                                     (SBIN, INTEGER, COMP-6).
     2069       89                      2              Real binary fixed double precision.
     2070       90                      3              Real binary float single precision
     2071       91                                     (REAL).
     2072       92                      4              Real binary float double precision
     2073       93                                     (DOUBLE PRECISION).
     2074       94                      5              Complex binary fixed single precision.
     2075       95                      6              Complex binary fixed double precision.
     2076       96                      7              Complex binary float single precision
     2077       97                                     (COMPLEX).
     2078       98                      8              Complex binary float double precision
     2079       99                                     (DOUBLE COMPLEX).
     2080      100                      9              Packed decimal fixed, lead ASCII sign
     2081      101                                     (COMP-4).
     2082      102                     10              Packed decimal float.
     2083      103                     11              Packed decimal fixed complex,
     2084      104                                     lead ASCII sign.
     2085      105                     12              Packed decimal float complex.
     2086      106                     13              Pointer
     2087      107                     14              Offset
     2088      108                     15              Label
     2089      109                     16              Entry
     2090      110                     17              Structure
     2091      111                     18              Area
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:262  
     2092      112                     19              Bit string
     2093      113                     20              Varying bit string
     2094      114                     21              Character string
     2095      115                     22              Varying character string
     2096      116                     23              File
     2097      117                     24              UBIN
     2098      118                     25              Packed decimal fixed, trail ASCII sign
     2099      119                                     (COMP, COMP-4).
     2100      120                     26              Adjustable character string
     2101      121                     27              Adjustable bit string
     2102      122                     28              EPTR
     2103      123                     29              16 bit signed integer (COMP-1).
     2104      124                     30              32 bit signed integer (COMP-2).
     2105      125                     31              Packed decimal fixed, trail EBCDIC sign
     2106      126                                     (COMP-3).
     2107      127                     32              INDEX-1
     2108      128                     33              INDEX-2
     2109      129                     34              FORTRAN Every
     2110      130                     35              FORTRAN Logical
     2111      131                     36              FORTRAN Any (Never Passed)
     2112      132                     37              FORTRAN Label
     2113      133                     38              FORTRAN UCB
     2114      134                     39              Intrinsic Constant
     2115      135                     40              Packed decimal fixed, no sign (COMP,
     2116      136                                     COMP-3, COMP-4).
     2117      137                     41              Unpacked decimal fixed, no sign
     2118      138                     42              Unpacked decimal fixed lead sign
     2119      139                     43              Unpacked decimal fixed trail sign
     2120      140                     44              Unpacked decimal fixed lead over
     2121      141                                     punched sign
     2122      142                     45              Unpacked decimal fixed trail over
     2123      143                                     punched sign
     2124      144                     46              Adjustable structure
     2125      145                     47              Vector
     2126      146                     48              Remember
     2127      147                     49              Descriptor
     2128      148                     50              Unpacked decimal float
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:263  
     2129      149                     51              Packed decimal fixed,
     2130      150                                     Lead EBCDIC sign
     2131      151                     52              Enumerated Type
     2132      152                     53              Set
     2133      153                     54 - 59         Reserved
     2134      154                     60              Null entry
     2135      155                     61              Virtual array dimension entry
     2136      156                     62              Array dimension entry
     2137      157                     63              Reserved
     2138      158            Reference Flag      BIT(1) UNALIGNED
     2139      159                                Indicates whether the variable is
     2140      160                                referenced or is not referenced by
     2141      161                                this module.
     2142      162            Modified Flag       BIT(1) UNALIGNED
     2143      163                                Indicates whether the variable is
     2144      164                                explicitly modified or not modified
     2145      165                                by this module.
     2146      166            Logical Size        UBIN ALIGNED
     2147      167                                Contains the size of the data item or
     2148      168                                a locator of the variable containing the
     2149      169                                size.  If the Size Type Flag = '0'B, this
     2150      170                                field contains the number of basic
     2151      171                                elements of this data type contained in
     2152      172                                the variable, e.g., the field contains
     2153      173                                five for a CHAR(5) variable.  If the Size
     2154      174                                Type Flag = '1'B this field contains the
     2155      175                                entry number of the variable which
     2156      176                                contains the size.
     2157      177            Level Number        UBIN ALIGNED
     2158      178                                Contains the level number of the data
     2159      179                                item (for structures).
     2160      180            Alignment Type      UBIN ALIGNED
     2161      181                                Defines the explicit alignment of the
     2162      182                                data item.  The possible alignment type
     2163      183                                values are:
     2164      184                                   0 = Double Word Aligned
     2165      185                                   1 = Word Aligned
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:264  
     2166      186                                   2 = Half Word Aligned
     2167      187                                   3 = Byte Aligned
     2168      188                                   4 = Bit Aligned
     2169      189                                   5 = Digit Aligned
     2170      190            Size Type Flag      BIT(1) UNALIGNED
     2171      191                                If Size Type Flag = '0'B then Logical
     2172      192                                Size contains the number of basic elements
     2173      193                                of this data type contained in the variable,
     2174      194                                e.g., the field contains five for a CHAR(5)
     2175      195                                variable.  If Size Type Flag = '1'B
     2176      196                                then Logical Size contains the entry
     2177      197                                number of the variable which contains
     2178      198                                the size.
     2179      199            Array Type          UBIN ALIGNED
     2180      200                                Determines the array characteristics
     2181      201                                of this variable and thus determines
     2182      202                                whether continuation entry(ies) exist
     2183      203                                for this item.  The defined array
     2184      204                                types are:
     2185      205                                  0 - The item is not dimensioned.
     2186      206                                  1 - The item is a single dimensional
     2187      207                                      array with offset=0.  Dimensions
     2188      208                                      contains the number of elements.
     2189      209                                      No continuation entry exists.
     2190      210                                  2 - Same as type 1 except the offset
     2191      211                                      (to be subtracted) is 1.
     2192      212                                  3 - All other arrays except virtual
     2193      213                                      arrays.  Dimensions, Elements,
     2194      214                                      Element Size, and Offset must be
     2195      215                                      defined.  As many continuation
     2196      216                                      entries as required will be present
     2197      217                                      to accommodate the number of dimensions
     2198      218                                      of the array with indeterminate number
     2199      219                                      of elements, the Elements field will
     2200      220                                      contain 0.
     2201      221                                  4 - Virtual Array.  Dimensions, Elements,
     2202      222                                      Element Size, and Offset must be
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:265  
     2203      223                                      defined.  As many continuation entries
     2204      224                                      as required will be present to
     2205      225                                      accommodate the number of dimensions
     2206      226                                      of the array.
     2207      227                                  5 - Adjustable dimensioned array.
     2208      228
     2209      229            Operand Type        UBIN ALIGNED
     2210      230                                The type of operand defined as follows:
     2211      231                                     1 = section
     2212      232                                     2 = ENTREF
     2213      233                                     3 = SYMREF
     2214      234                                     4 = CONSTANT
     2215      235                                     5 = SEGDEF
     2216      236                                     6 = SEGREF
     2217      237            Implied Pointer     SBIN ALILGNED
     2218      238                                This is unused for Address Types 1, 2,
     2219      239                                and 6.
     2220      240                                If Address Type is 3 (Based) and bit 0
     2221      241                                = 1, this based variable has no implied
     2222      242                                pointer.  If Address Type is 3 (Based)
     2223      243                                and bit 0 = 0, then the remaining bits
     2224      244                                contain the entry number of the variable
     2225      245                                table entry for the implied pointer
     2226      246                                to this variable.
     2227      247                                If Address Type is 4 (DCB) then this field
     2228      248                                contains the SYMREF number of the DCB.
     2229      249                                If Address Type is 5 this field contains
     2230      250                                the offset in the current automatic frame
     2231      251                                of the pointer to this parameter.
     2232      252                                If Address Type is 7, this field contains
     2233      253                                the address in the Instruction Segment
     2234      254                                of the pointer to this parameter.
     2235      255            Operand             UBIN ALIGNED
     2236      256                                If Operand Type is 4, the Operand is
     2237      257                                an unsigned constant.
     2238      258                                If Operand Type is not 4 (or 0) the
     2239      259                                Operand is an entry number in the table
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:266  
     2240      260                                specified by type.
     2241      261            Element Size        UBIN ALIGNED
     2242      262                                This defines the physical size (in bits)
     2243      263                                of the item or of an element of the item,
     2244      264                                if an array.  This includes all slack bits.
     2245      265                                This is the multiplier needed to determine
     2246      266                                the bit offset in an array given the
     2247      267                                element offset.
     2248      268            Scale Factor        SBIN ALIGNED
     2249      269                                The number of units by which this data
     2250      270                                is assumed to be scaled.  The units depend
     2251      271                                on the data type.  If this is a binary
     2252      272                                data type, the units are binary digits.
     2253      273                                If this is a decimal data type, the units
     2254      274                                are decimal digits.  The field is meaningless
     2255      275                                for other data types.
     2256      276            Dimensions          UBIN ALIGNED
     2257      277                                Contains the number of dimensions for an
     2258      278                                array if Array Type is either 3 or 4.  If
     2259      279                                Array Type is 1 or 2, this contains the
     2260      280                                number of elements in the array.
     2261      281            Name Pointer        UBIN ALIGNED
     2262      282                                Contains the word offset into the
     2263      283                                Procedure Names Debug Record (type 15)
     2264      284                                locating the name of this variable.
     2265      285            Status Exists       BIT (1) UNALIGNED
     2266      286                                Status Exists = '1'B indicates this variable
     2267      287                                has a Status Variable associated with it.
     2268      288
     2269      289        OUTPUT:
     2270      290            Entry Number        UBIN ALIGNED  optional
     2271      291                                The entry number of the Variable
     2272      292                                Debug entry just created.  This value
     2273      293                                must be used to determine the entry
     2274      294                                number of variables that have dimension
     2275      295                                greater than 1 and an array type other
     2276      296                                than 1 or 2.  In other cases the entry
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:267  
     2277      297                                number of the next Variable Debug Record
     2278      298                                to be allocated can be determined by
     2279      299                                calling XUO$VREBLNUM.
     2280      300
     2281      301        B$OBJECT REFERENCE:  B$VREBL
     2282      302        */
     2283      303        /*B*
     2284      304
     2285      305        GLOBAL DATA:
     2286      306            B_VREBL_CUR$
     2287      307            B_VREBL_COUNT
     2288      308            B_VREBL_PAGE
     2289      309
     2290      310        INTERFACE:
     2291      311            XUO$OUWRITE
     2292      312
     2293      313        */
     2294      314
     2295      315        XUO$VREBL: PROC (P_PARAM1,P_ADDRESS_TYPE,P_DATA_TYPE,P_REFERENCED_FLAG,
               315            P_MODIFIED_FLAG,
     2296      316               P_LOGICAL_SIZE,P_LEVEL_NUMBER,P_ALIGNMENT_TYPE,P_SIZE_TYPE_FLAG,P_ARRAY_TYPE,
     2297      317               P_OPERAND_TYPE,P_IMPLIED_POINTER,P_OPERAND,P_ELEMENT_SIZE,
     2298      318               P_SCALE_FACTOR,P_DIMENSIONS,P_NAME_POINTER,
     2299      319               P_ENTRY_NUMBER,P_STATUS_EXISTS);
     2300      320         /*
     2301      321            */
     2302      322        %INCLUDE ZVA_SYSTEM_FILE;
     2303     6573            %PAGE (ARG=INCLUDES);

              6586    1   /*******************************************************************************
              6587    1   *                                                                              *
              6588    1   *        INCLUDES              INCLUDES                                            *
              6589    1   *                                                                              *
              6590    1   *******************************************************************************/

     2304     6594        %INCLUDE B$OBJECT_C;
     2305    10024        %INCLUDE XUO$OBJ_C;
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:268  
     2306    10434            %PAGE (ARG=SUBS);

             10447    1   /*******************************************************************************
             10448    1   *                                                                              *
             10449    1   *        SUBS              SUBS                                                  *
             10450    1   *                                                                              *
             10451    1   *******************************************************************************/

     2307    10455            %B$RECORDSUBS;
     2308    10483            %VREBLSUBS;
     2309    10491            %VREBL_DATATYPES;
     2310    10566        %PLIST;
     2311    10567            %PAGE (ARG=PARAMETERS);

             10580    1   /*******************************************************************************
             10581    1   *                                                                              *
             10582    1   *        PARAMETERS              PARAMETERS                                        *
             10583    1   *                                                                              *
             10584    1   *******************************************************************************/

     2312    10588    1   DCL P_PARAM1 UBIN;
     2313    10589         /*
     2314    10590         The following definition is for XUO$VREBL.
     2315    10591         */
     2316    10592    1   DCL P_ADDRESS REDEF P_PARAM1 SBIN;
     2317    10593         /*
     2318    10594         The following definition is for XUO$VREBLNUM.
     2319    10595         */
     2320    10596    1   DCL P_VREBL_NUMBER REDEF P_PARAM1 UBIN;
     2321    10597    1   DCL P_ADDRESS_TYPE UBIN;
     2322    10598    1   DCL P_DATA_TYPE UBIN;
     2323    10599    1   DCL P_REFERENCED_FLAG BIT(1) UNAL PARAM;
     2324    10600    1   DCL P_MODIFIED_FLAG BIT(1) UNAL;
     2325    10601    1   DCL P_LOGICAL_SIZE UBIN;
     2326    10602    1   DCL P_LEVEL_NUMBER UBIN;
     2327    10603    1   DCL P_ALIGNMENT_TYPE UBIN;
     2328    10604    1   DCL P_SIZE_TYPE_FLAG BIT(1) UNAL PARAM;
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:269  
     2329    10605    1   DCL P_ARRAY_TYPE UBIN;
     2330    10606    1   DCL P_OPERAND_TYPE UBIN;
     2331    10607    1   DCL P_IMPLIED_POINTER SBIN;
     2332    10608    1   DCL P_OPERAND UBIN;
     2333    10609    1   DCL P_ELEMENT_SIZE UBIN;
     2334    10610    1   DCL P_SCALE_FACTOR UBIN;
     2335    10611    1   DCL P_DIMENSIONS SBIN PARAM;
     2336    10612    1   DCL P_NAME_POINTER SBIN;
     2337    10613    1   DCL P_ENTRY_NUMBER UBIN;
     2338    10614    1   DCL P_STATUS_EXISTS BIT(1) UNAL PARAM;
     2339    10615        %PAGE (ARG=VREBL DATA);

             10628    1   /*******************************************************************************
             10629    1   *                                                                              *
             10630    1   *        VREBL DATA              VREBL DATA                                        *
             10631    1   *                                                                              *
             10632    1   *******************************************************************************/

     2340    10636        %B$VREBL (STCLASS="BASED(VREBL_CUR$)");
     2341    10800        %B_VREBL_POINTERS;
     2342    10820    1   DCL VREBL_CUR$ PTR;
     2343    10821        %PLIST;
     2344    10822        %PAGE (ARG=MISC DATA);

             10835    1   /*******************************************************************************
             10836    1   *                                                                              *
             10837    1   *        MISC DATA              MISC DATA                                          *
             10838    1   *                                                                              *
             10839    1   *******************************************************************************/

     2345    10843    1   DCL XUO_WORDSIZE SYMREF SBIN;
     2346    10844    1   DCL XUO_CHARSIZE SYMREF SBIN;
     2347    10845    1   DCL TEMP SBIN;
     2348    10846        %PAGE (ARG=ENTRY DCLS);

             10859    1   /*******************************************************************************
             10860    1   *                                                                              *
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:270  
             10861    1   *        ENTRY DCLS              ENTRY DCLS                                        *
             10862    1   *                                                                              *
             10863    1   *******************************************************************************/

     2349    10867    1   DCL XUO$OUWRITE ENTRY(2);
     2350    10868        %PAGE (ARG=XUO$VREBL);

             10881    1   /*******************************************************************************
             10882    1   *                                                                              *
             10883    1   *        XUO$VREBL              XUO$VREBL                                          *
             10884    1   *                                                                              *
             10885    1   *******************************************************************************/

     2351    10889         /*
     2352    10890         Always allow for only 3 entries per continuation record
     2353    10891         */
     2354    10892    1       IF P_ARRAY_TYPE=%REAL_ARRAY OR P_ARRAY_TYPE=%VIRTUAL_ARRAY OR
     2355    10893    1          P_ARRAY_TYPE=5 /*Adjustable*/ THEN
     2356    10894    1           TEMP=(P_DIMENSIONS+2)/3;
     2357    10895    1       ELSE
     2358    10896    1           TEMP=0;
     2359    10897         /* If this variable has a status variable associated with
     2360    10898            it, ensure room for the vrebl entry and continuation
     2361    10899            entry.
     2362    10900         */
     2363    10901    1       IF ADDR(P_STATUS_EXISTS) ~= ADDR(NIL) THEN
     2364    10902    2       DO;
     2365    10903    2           IF P_STATUS_EXISTS
     2366    10904    2           THEN TEMP = TEMP + 2;
     2367    10905    2           END;
     2368    10906         /* If this variable has a data type set or data type
     2369    10907            enumerated type, ensure room for the continuation
     2370    10908            entry.
     2371    10909         */
     2372    10910    1       IF (P_DATA_TYPE = %SET_DATATYPE) OR
     2373    10911    1          (P_DATA_TYPE = %ENUMTYPE_DATATYPE) THEN
     2374    10912    2       DO;
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:271  
     2375    10913    2           TEMP = TEMP + 1;
     2376    10914    2           END;
     2377    10915         /*
     2378    10916         The following section will check to see if the passed information will
     2379    10917         fit in the current record. If not, the current record will be
     2380    10918         written and pointer re-initialized.  Then the text will be moved to
     2381    10919         the buffer.
     2382    10920         */
     2383    10921    1       IF PINCRW(B_VREBL_CUR$,SIZEW(B$VREBL)*TEMP)>=B_VREBL_END$ THEN
     2384    10922    2       DO;
     2385    10923         /*
     2386    10924            Generate null entires to
     2387    10925            fill up to the end of
     2388    10926            the page
     2389    10927            */
     2390    10928    3           DO WHILE(B_VREBL_CUR$<B_VREBL_END$);
     2391    10929    3               B_VREBL_CUR$ -> B$VREBL.DATATYP=%NULL_DATATYPE;
     2392    10930    3               B_VREBL_COUNT=B_VREBL_COUNT+1;
     2393    10931    3               B_VREBL_CUR$=PINCRW(B_VREBL_CUR$,SIZEW(B$VREBL));
     2394    10932    3               END;
     2395    10933    2           CALL XUO$OUWRITE(%TYPVREBL);
     2396    10934    2           B_VREBL_PAGE=B_VREBL_PAGE+1;
     2397    10935    2           B_VREBL_CUR$=B_VREBL_BASE$;
     2398    10936    2           END;
     2399    10937         /*
     2400    10938         The following will build the vrebl data table.
     2401    10939         */
     2402    10940    1       VREBL_CUR$=B_VREBL_CUR$;
     2403    10941    1       B$VREBL.ADR.W=P_ADDRESS/XUO_WORDSIZE;
     2404    10942    1       TEMP=MOD(P_ADDRESS,XUO_WORDSIZE);
     2405    10943    1       B$VREBL.ADR.C=TEMP/XUO_CHARSIZE;
     2406    10944    1       B$VREBL.ADR.B=MOD(TEMP,XUO_CHARSIZE);
     2407    10945    1       B$VREBL.ADDRTYP=P_ADDRESS_TYPE;
     2408    10946    1       B$VREBL.DATATYP=P_DATA_TYPE;
     2409    10947    1       B$VREBL.REF=P_REFERENCED_FLAG;
     2410    10948    1       B$VREBL.MODF=P_MODIFIED_FLAG;
     2411    10949    1       B$VREBL.LOGSIZ=P_LOGICAL_SIZE;
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:272  
     2412    10950    1       B$VREBL.LEVEL=P_LEVEL_NUMBER;
     2413    10951    1       B$VREBL.ALIGNTYP=P_ALIGNMENT_TYPE;
     2414    10952    1       B$VREBL.SZTYP=P_SIZE_TYPE_FLAG;
     2415    10953    1       B$VREBL.ARRAYTYP=P_ARRAY_TYPE;
     2416    10954    1       B$VREBL.OPNDTYP=P_OPERAND_TYPE;
     2417    10955    1       B$VREBL.IMPTR=P_IMPLIED_POINTER;
     2418    10956    1       B$VREBL.OPERAND=P_OPERAND;
     2419    10957    1       B$VREBL.ELMNTSIZ=P_ELEMENT_SIZE;
     2420    10958    1       B$VREBL.SCALE=P_SCALE_FACTOR;
     2421    10959    1       B$VREBL.DIMS=P_DIMENSIONS;
     2422    10960    1       B$VREBL.NPOINTER=P_NAME_POINTER;
     2423    10961    1       B_VREBL_COUNT=B_VREBL_COUNT+1;
     2424    10962    1       IF ADDR(P_ENTRY_NUMBER)~=ADDR(NIL) THEN
     2425    10963    1           P_ENTRY_NUMBER=B_VREBL_COUNT;
     2426    10964    1       IF ADDR(P_STATUS_EXISTS) ~= ADDR(NIL)
     2427    10965    2       THEN DO;
     2428    10966    2           B$VREBL.STATUS_EXISTS = P_STATUS_EXISTS;
     2429    10967    2           END;
     2430    10968    1       B_VREBL_CUR$=PINCRW(B_VREBL_CUR$,SIZEW(B$VREBL));
     2431    10969    1       RETURN;
     2432    10970            %PAGE (ARG=XUO$VREBLNUM);

             10983    1   /*******************************************************************************
             10984    1   *                                                                              *
             10985    1   *        XUO$VREBLNUM              XUO$VREBLNUM                                    *
             10986    1   *                                                                              *
             10987    1   *******************************************************************************/

     2433    10991        /*D*
     2434    10992
     2435    10993        XUO$VREBLNUM --Variable Debug Records (Record Type 14)
     2436    10994
     2437    10995        NAME:  XUO$VREBLNUM
     2438    10996
     2439    10997        PURPOSE:  To return the number of the next entry in the
     2440    10998                  Variable Debug Record
     2441    10999
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:273  
     2442    11000        DESCRIPTION:  This routine returns the number of the next
     2443    11001            Variable Debug Record entry.  The returned value is used
     2444    11002            in the calls to XUO$LOGBLKVREBLINIT and
     2445    11003            XUO$LOGBLKVREBLTERM where starting and ending Variable
     2446    11004            Debug Record entry numbers are required.  This routine
     2447    11005            is used only in the case of getting the next number
     2448    11006            for the logical block calls.  In all other cases, the
     2449    11007            entry number should be obtained by use of the parameter
     2450    11008            Entry Number returned by the call to XUO$VREBL.
     2451    11009
     2452    11010        CALL:  CALL XUO$VREBLNUM (Variable Debug Record entry number)
     2453    11011
     2454    11012        INPUT:  none
     2455    11013
     2456    11014        OUTPUT:
     2457    11015
     2458    11016            Variable Debug Record entry number  UBIN ALIGNED
     2459    11017                                The number of the next entry in
     2460    11018                                the Variable Debug Record.
     2461    11019
     2462    11020        B$OBJECT REFERENCE:  B$VREBL
     2463    11021        */
     2464    11022        /*B*
     2465    11023
     2466    11024        GLOBAL DATA:
     2467    11025            B_VREBL_COUNT
     2468    11026
     2469    11027        INTERFACE:
     2470    11028            XUO$OUWRITE
     2471    11029
     2472    11030        */
     2473    11031
     2474    11032    1   XUO$VREBLNUM: ENTRY(P_PARAM1);
     2475    11033         /*
     2476    11034            */
     2477    11035    1       P_VREBL_NUMBER=B_VREBL_COUNT+1;
     2478    11036    1       RETURN;
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:274  
     2479    11037    1   END XUO$VREBL;
     2480    11038        %EOD;

PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:275  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$VREBL.

   Procedure XUO$VREBL requires 178 words for executable code.
   Procedure XUO$VREBL requires 24 words of local(AUTO) storage.

PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:276  

 Object Unit name= XUO$VREBL                                  File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:28:45.08 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   178    262  XUO$VREBL
    2  RoData even  none     3      3  XUO$VREBL

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std       19  XUO$VREBL
     1    253                  yes      Std        1  XUO$VREBLNUM

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:277  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_VREBL_BASE$                         B_VREBL_CUR$
     B_VREBL_END$                          B_VREBL_COUNT                         B_VREBL_PAGE
     XUO_WORDSIZE                          XUO_CHARSIZE                          B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:278  


     1981        1        /*M*     XUO$VREBL -- THIS MODULE WILL BUILD OBJECT UNIT VREBL RECORDS*/
     1982        2        /*T***********************************************************/
     1983        3        /*T*                                                         */
     1984        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1985        5        /*T*                                                         */
     1986        6        /*T***********************************************************/
     1987        7        /*P*
     1988        8
     1989        9
     1990       10        NAME:  XUO$VREBL
     1991       11        XUO$VREBL --Variable Debug Record (Record Type 14)
     1992       12
     1993       13        PURPOSE:  To build entries in the Variable Debug Record
     1994       14            (Record Type 14).
     1995       15
     1996       16        DESCRIPTION:  This routine builds an entry into the Variable
     1997       17            Debug Record (type 14).  The record contains descriptions
     1998       18            for every variable in the module.  Note that the logical
     1999       19            block table scopes the variable set for each logical
     2000       20            block.  A complete variable description may require more
     2001       21            than one entry.
     2002       22
     2003       23        */
     2004       24        /*D*
     2005       25
     2006       26        CALL:  CALL XUO$VREBL (Address,
     2007       27                        Address Type,
     2008       28                        Data Type,
     2009       29                        Reference Flag,
     2010       30                        Modified Flag,
     2011       31                        Logical Size,
     2012       32                        Level Number,
     2013       33                        Alignment Type,
     2014       34                        Size Type Flag,
     2015       35                        Array Type,
     2016       36                        Operand Type,
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:279  
     2017       37                        Implied Pointer,
     2018       38                        Operand,
     2019       39                        Element Size,
     2020       40                        Scale Factor,
     2021       41                        Dimensions,
     2022       42                        Name Pointer,
     2023       43                        Entry Number,
     2024       44                       *Status Exists)
     2025       45
     2026       46        INPUT:
     2027       47            Address             UBIN ALIGNED
     2028       48                                Address of the variable.
     2029       49            Address Type        UBIN ALIGNED
     2030       50                                The address type determines how to
     2031       51                                use the address and possible other
     2032       52                                information to locate the data described
     2033       53                                by the entry.  Address type can have
     2034       54                                the following values:
     2035       55                                  1 - Static data - address is an offset
     2036       56                                      within ISR.
     2037       57                                  2 - Automatic Data - address is an offset
     2038       58                                      within the current
     2039       59                                      AUTO frame located by PR2.
     2040       60                                  3 - Based data - address is an offset
     2041       61                                      from user pointer
     2042       62                                      (possibly defined by implied pointer).
     2043       63                                  4 - DCB - address is an offset from the
     2044       64                                      beginning of the DCB
     2045       65                                      (which is located by implied pointer).
     2046       66                                  5 - Parameter - address is an offset
     2047       67                                      from the data located
     2048       68                                      by the Implied Pointer into
     2049       69                                      Automatic Storage.
     2050       70                                  6 - Constant - address is an 18 bit constant.
     2051       71                                  7 - Parameter in static - address is an
     2052       72                                      offset from the data located by
     2053       73                                      the Implied Pointer into Static
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:280  
     2054       74                                      Storage.  In this case relocation
     2055       75                                      information applies to implied pointer.
     2056       76                                  8 - AREADEF - address is the offset into
     2057       77                                      the segment for this item.
     2058       78                                  9 - Virtual array - address is the IS
     2059       79                                      IS offset in static of the descriptor
     2060       80                                      block for this virtual array.
     2061       81                                 10 - 15 - Reserved for future use.
     2062       82            Data Type           UBIN ALIGNED
     2063       83                                Indicates the type of data described
     2064       84                                by this entry.  The defined data type
     2065       85                                codes are as follows:
     2066       86                      0              Type not specified.
     2067       87                      1              Real binary fixed single precision
     2068       88                                     (SBIN, INTEGER, COMP-6).
     2069       89                      2              Real binary fixed double precision.
     2070       90                      3              Real binary float single precision
     2071       91                                     (REAL).
     2072       92                      4              Real binary float double precision
     2073       93                                     (DOUBLE PRECISION).
     2074       94                      5              Complex binary fixed single precision.
     2075       95                      6              Complex binary fixed double precision.
     2076       96                      7              Complex binary float single precision
     2077       97                                     (COMPLEX).
     2078       98                      8              Complex binary float double precision
     2079       99                                     (DOUBLE COMPLEX).
     2080      100                      9              Packed decimal fixed, lead ASCII sign
     2081      101                                     (COMP-4).
     2082      102                     10              Packed decimal float.
     2083      103                     11              Packed decimal fixed complex,
     2084      104                                     lead ASCII sign.
     2085      105                     12              Packed decimal float complex.
     2086      106                     13              Pointer
     2087      107                     14              Offset
     2088      108                     15              Label
     2089      109                     16              Entry
     2090      110                     17              Structure
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:281  
     2091      111                     18              Area
     2092      112                     19              Bit string
     2093      113                     20              Varying bit string
     2094      114                     21              Character string
     2095      115                     22              Varying character string
     2096      116                     23              File
     2097      117                     24              UBIN
     2098      118                     25              Packed decimal fixed, trail ASCII sign
     2099      119                                     (COMP, COMP-4).
     2100      120                     26              Adjustable character string
     2101      121                     27              Adjustable bit string
     2102      122                     28              EPTR
     2103      123                     29              16 bit signed integer (COMP-1).
     2104      124                     30              32 bit signed integer (COMP-2).
     2105      125                     31              Packed decimal fixed, trail EBCDIC sign
     2106      126                                     (COMP-3).
     2107      127                     32              INDEX-1
     2108      128                     33              INDEX-2
     2109      129                     34              FORTRAN Every
     2110      130                     35              FORTRAN Logical
     2111      131                     36              FORTRAN Any (Never Passed)
     2112      132                     37              FORTRAN Label
     2113      133                     38              FORTRAN UCB
     2114      134                     39              Intrinsic Constant
     2115      135                     40              Packed decimal fixed, no sign (COMP,
     2116      136                                     COMP-3, COMP-4).
     2117      137                     41              Unpacked decimal fixed, no sign
     2118      138                     42              Unpacked decimal fixed lead sign
     2119      139                     43              Unpacked decimal fixed trail sign
     2120      140                     44              Unpacked decimal fixed lead over
     2121      141                                     punched sign
     2122      142                     45              Unpacked decimal fixed trail over
     2123      143                                     punched sign
     2124      144                     46              Adjustable structure
     2125      145                     47              Vector
     2126      146                     48              Remember
     2127      147                     49              Descriptor
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:282  
     2128      148                     50              Unpacked decimal float
     2129      149                     51              Packed decimal fixed,
     2130      150                                     Lead EBCDIC sign
     2131      151                     52              Enumerated Type
     2132      152                     53              Set
     2133      153                     54 - 59         Reserved
     2134      154                     60              Null entry
     2135      155                     61              Virtual array dimension entry
     2136      156                     62              Array dimension entry
     2137      157                     63              Reserved
     2138      158            Reference Flag      BIT(1) UNALIGNED
     2139      159                                Indicates whether the variable is
     2140      160                                referenced or is not referenced by
     2141      161                                this module.
     2142      162            Modified Flag       BIT(1) UNALIGNED
     2143      163                                Indicates whether the variable is
     2144      164                                explicitly modified or not modified
     2145      165                                by this module.
     2146      166            Logical Size        UBIN ALIGNED
     2147      167                                Contains the size of the data item or
     2148      168                                a locator of the variable containing the
     2149      169                                size.  If the Size Type Flag = '0'B, this
     2150      170                                field contains the number of basic
     2151      171                                elements of this data type contained in
     2152      172                                the variable, e.g., the field contains
     2153      173                                five for a CHAR(5) variable.  If the Size
     2154      174                                Type Flag = '1'B this field contains the
     2155      175                                entry number of the variable which
     2156      176                                contains the size.
     2157      177            Level Number        UBIN ALIGNED
     2158      178                                Contains the level number of the data
     2159      179                                item (for structures).
     2160      180            Alignment Type      UBIN ALIGNED
     2161      181                                Defines the explicit alignment of the
     2162      182                                data item.  The possible alignment type
     2163      183                                values are:
     2164      184                                   0 = Double Word Aligned
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:283  
     2165      185                                   1 = Word Aligned
     2166      186                                   2 = Half Word Aligned
     2167      187                                   3 = Byte Aligned
     2168      188                                   4 = Bit Aligned
     2169      189                                   5 = Digit Aligned
     2170      190            Size Type Flag      BIT(1) UNALIGNED
     2171      191                                If Size Type Flag = '0'B then Logical
     2172      192                                Size contains the number of basic elements
     2173      193                                of this data type contained in the variable,
     2174      194                                e.g., the field contains five for a CHAR(5)
     2175      195                                variable.  If Size Type Flag = '1'B
     2176      196                                then Logical Size contains the entry
     2177      197                                number of the variable which contains
     2178      198                                the size.
     2179      199            Array Type          UBIN ALIGNED
     2180      200                                Determines the array characteristics
     2181      201                                of this variable and thus determines
     2182      202                                whether continuation entry(ies) exist
     2183      203                                for this item.  The defined array
     2184      204                                types are:
     2185      205                                  0 - The item is not dimensioned.
     2186      206                                  1 - The item is a single dimensional
     2187      207                                      array with offset=0.  Dimensions
     2188      208                                      contains the number of elements.
     2189      209                                      No continuation entry exists.
     2190      210                                  2 - Same as type 1 except the offset
     2191      211                                      (to be subtracted) is 1.
     2192      212                                  3 - All other arrays except virtual
     2193      213                                      arrays.  Dimensions, Elements,
     2194      214                                      Element Size, and Offset must be
     2195      215                                      defined.  As many continuation
     2196      216                                      entries as required will be present
     2197      217                                      to accommodate the number of dimensions
     2198      218                                      of the array with indeterminate number
     2199      219                                      of elements, the Elements field will
     2200      220                                      contain 0.
     2201      221                                  4 - Virtual Array.  Dimensions, Elements,
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:284  
     2202      222                                      Element Size, and Offset must be
     2203      223                                      defined.  As many continuation entries
     2204      224                                      as required will be present to
     2205      225                                      accommodate the number of dimensions
     2206      226                                      of the array.
     2207      227                                  5 - Adjustable dimensioned array.
     2208      228
     2209      229            Operand Type        UBIN ALIGNED
     2210      230                                The type of operand defined as follows:
     2211      231                                     1 = section
     2212      232                                     2 = ENTREF
     2213      233                                     3 = SYMREF
     2214      234                                     4 = CONSTANT
     2215      235                                     5 = SEGDEF
     2216      236                                     6 = SEGREF
     2217      237            Implied Pointer     SBIN ALILGNED
     2218      238                                This is unused for Address Types 1, 2,
     2219      239                                and 6.
     2220      240                                If Address Type is 3 (Based) and bit 0
     2221      241                                = 1, this based variable has no implied
     2222      242                                pointer.  If Address Type is 3 (Based)
     2223      243                                and bit 0 = 0, then the remaining bits
     2224      244                                contain the entry number of the variable
     2225      245                                table entry for the implied pointer
     2226      246                                to this variable.
     2227      247                                If Address Type is 4 (DCB) then this field
     2228      248                                contains the SYMREF number of the DCB.
     2229      249                                If Address Type is 5 this field contains
     2230      250                                the offset in the current automatic frame
     2231      251                                of the pointer to this parameter.
     2232      252                                If Address Type is 7, this field contains
     2233      253                                the address in the Instruction Segment
     2234      254                                of the pointer to this parameter.
     2235      255            Operand             UBIN ALIGNED
     2236      256                                If Operand Type is 4, the Operand is
     2237      257                                an unsigned constant.
     2238      258                                If Operand Type is not 4 (or 0) the
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:285  
     2239      259                                Operand is an entry number in the table
     2240      260                                specified by type.
     2241      261            Element Size        UBIN ALIGNED
     2242      262                                This defines the physical size (in bits)
     2243      263                                of the item or of an element of the item,
     2244      264                                if an array.  This includes all slack bits.
     2245      265                                This is the multiplier needed to determine
     2246      266                                the bit offset in an array given the
     2247      267                                element offset.
     2248      268            Scale Factor        SBIN ALIGNED
     2249      269                                The number of units by which this data
     2250      270                                is assumed to be scaled.  The units depend
     2251      271                                on the data type.  If this is a binary
     2252      272                                data type, the units are binary digits.
     2253      273                                If this is a decimal data type, the units
     2254      274                                are decimal digits.  The field is meaningless
     2255      275                                for other data types.
     2256      276            Dimensions          UBIN ALIGNED
     2257      277                                Contains the number of dimensions for an
     2258      278                                array if Array Type is either 3 or 4.  If
     2259      279                                Array Type is 1 or 2, this contains the
     2260      280                                number of elements in the array.
     2261      281            Name Pointer        UBIN ALIGNED
     2262      282                                Contains the word offset into the
     2263      283                                Procedure Names Debug Record (type 15)
     2264      284                                locating the name of this variable.
     2265      285            Status Exists       BIT (1) UNALIGNED
     2266      286                                Status Exists = '1'B indicates this variable
     2267      287                                has a Status Variable associated with it.
     2268      288
     2269      289        OUTPUT:
     2270      290            Entry Number        UBIN ALIGNED  optional
     2271      291                                The entry number of the Variable
     2272      292                                Debug entry just created.  This value
     2273      293                                must be used to determine the entry
     2274      294                                number of variables that have dimension
     2275      295                                greater than 1 and an array type other
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:286  
     2276      296                                than 1 or 2.  In other cases the entry
     2277      297                                number of the next Variable Debug Record
     2278      298                                to be allocated can be determined by
     2279      299                                calling XUO$VREBLNUM.
     2280      300
     2281      301        B$OBJECT REFERENCE:  B$VREBL
     2282      302        */
     2283      303        /*B*
     2284      304
     2285      305        GLOBAL DATA:
     2286      306            B_VREBL_CUR$
     2287      307            B_VREBL_COUNT
     2288      308            B_VREBL_PAGE
     2289      309
     2290      310        INTERFACE:
     2291      311            XUO$OUWRITE
     2292      312
     2293      313        */
     2294      314
     2295      315        XUO$VREBL: PROC (P_PARAM1,P_ADDRESS_TYPE,P_DATA_TYPE,P_REFERENCED_FLAG,
               315            P_MODIFIED_FLAG,

    315  1 000000   000000 700200 xent  XUO$VREBL    TSX0  ! X66_AUTO_N
         1 000001   000030 000023                    ZERO    24,19

     2296      316              P_LOGICAL_SIZE,P_LEVEL_NUMBER,P_ALIGNMENT_TYPE,P_SIZE_TYPE_FLAG,P_ARRAY_TYPE,
     2297      317               P_OPERAND_TYPE,P_IMPLIED_POINTER,P_OPERAND,P_ELEMENT_SIZE,
     2298      318               P_SCALE_FACTOR,P_DIMENSIONS,P_NAME_POINTER,
     2299      319               P_ENTRY_NUMBER,P_STATUS_EXISTS);
     2300      320         /*
     2301      321            */
     2302      322        %INCLUDE ZVA_SYSTEM_FILE;
     2303     6573            %PAGE (ARG=INCLUDES);

              6586    1   /*******************************************************************************
              6587    1   *                                                                              *
              6588    1   *        INCLUDES              INCLUDES                                           *
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:287  
              6589    1   *                                                                              *
              6590    1   *******************************************************************************/

     2304     6594        %INCLUDE B$OBJECT_C;
     2305    10024        %INCLUDE XUO$OBJ_C;
     2306    10434            %PAGE (ARG=SUBS);

             10447    1   /*******************************************************************************
             10448    1   *                                                                              *
             10449    1   *        SUBS              SUBS                                                  *
             10450    1   *                                                                              *
             10451    1   *******************************************************************************/

     2307    10455            %B$RECORDSUBS;
     2308    10483            %VREBLSUBS;
     2309    10491            %VREBL_DATATYPES;
     2310    10566        %PLIST;
     2311    10567            %PAGE (ARG=PARAMETERS);

             10580    1   /*******************************************************************************
             10581    1   *                                                                              *
             10582    1   *        PARAMETERS              PARAMETERS                                       *
             10583    1   *                                                                              *
             10584    1   *******************************************************************************/

     2312    10588    1   DCL P_PARAM1 UBIN;
     2313    10589         /*
     2314    10590         The following definition is for XUO$VREBL.
     2315    10591         */
     2316    10592    1   DCL P_ADDRESS REDEF P_PARAM1 SBIN;
     2317    10593         /*
     2318    10594         The following definition is for XUO$VREBLNUM.
     2319    10595         */
     2320    10596    1   DCL P_VREBL_NUMBER REDEF P_PARAM1 UBIN;
     2321    10597    1   DCL P_ADDRESS_TYPE UBIN;
     2322    10598    1   DCL P_DATA_TYPE UBIN;
     2323    10599    1   DCL P_REFERENCED_FLAG BIT(1) UNAL PARAM;
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:288  
     2324    10600    1   DCL P_MODIFIED_FLAG BIT(1) UNAL;
     2325    10601    1   DCL P_LOGICAL_SIZE UBIN;
     2326    10602    1   DCL P_LEVEL_NUMBER UBIN;
     2327    10603    1   DCL P_ALIGNMENT_TYPE UBIN;
     2328    10604    1   DCL P_SIZE_TYPE_FLAG BIT(1) UNAL PARAM;
     2329    10605    1   DCL P_ARRAY_TYPE UBIN;
     2330    10606    1   DCL P_OPERAND_TYPE UBIN;
     2331    10607    1   DCL P_IMPLIED_POINTER SBIN;
     2332    10608    1   DCL P_OPERAND UBIN;
     2333    10609    1   DCL P_ELEMENT_SIZE UBIN;
     2334    10610    1   DCL P_SCALE_FACTOR UBIN;
     2335    10611    1   DCL P_DIMENSIONS SBIN PARAM;
     2336    10612    1   DCL P_NAME_POINTER SBIN;
     2337    10613    1   DCL P_ENTRY_NUMBER UBIN;
     2338    10614    1   DCL P_STATUS_EXISTS BIT(1) UNAL PARAM;
     2339    10615        %PAGE (ARG=VREBL DATA);

             10628    1   /*******************************************************************************
             10629    1   *                                                                              *
             10630    1   *        VREBL DATA              VREBL DATA                                       *
             10631    1   *                                                                              *
             10632    1   *******************************************************************************/

     2340    10636        %B$VREBL (STCLASS="BASED(VREBL_CUR$)");
     2341    10800        %B_VREBL_POINTERS;
     2342    10820    1   DCL VREBL_CUR$ PTR;
     2343    10821        %PLIST;
     2344    10822        %PAGE (ARG=MISC DATA);

             10835    1   /*******************************************************************************
             10836    1   *                                                                              *
             10837    1   *        MISC DATA              MISC DATA                                         *
             10838    1   *                                                                              *
             10839    1   *******************************************************************************/

     2345    10843    1   DCL XUO_WORDSIZE SYMREF SBIN;
     2346    10844    1   DCL XUO_CHARSIZE SYMREF SBIN;
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:289  
     2347    10845    1   DCL TEMP SBIN;
     2348    10846        %PAGE (ARG=ENTRY DCLS);

             10859    1   /*******************************************************************************
             10860    1   *                                                                              *
             10861    1   *        ENTRY DCLS              ENTRY DCLS                                       *
             10862    1   *                                                                              *
             10863    1   *******************************************************************************/

     2349    10867    1   DCL XUO$OUWRITE ENTRY(2);
     2350    10868        %PAGE (ARG=XUO$VREBL);

             10881    1   /*******************************************************************************
             10882    1   *                                                                              *
             10883    1   *        XUO$VREBL              XUO$VREBL                                         *
             10884    1   *                                                                              *
             10885    1   *******************************************************************************/

     2351    10889         /*
     2352    10890         Always allow for only 3 entries per continuation record
     2353    10891         */
     2354    10892    1       IF P_ARRAY_TYPE=%REAL_ARRAY OR P_ARRAY_TYPE=%VIRTUAL_ARRAY OR

  10892  1 000002   200014 470500                    LDP0    @P_ARRAY_TYPE,,AUTO
         1 000003   000000 235100                    LDA     0,,PR0
         1 000004   000003 115007                    CMPA    3,DL
         1 000005   000012 600000 1                  TZE     s:10894
         1 000006   000004 115007                    CMPA    4,DL
         1 000007   000012 600000 1                  TZE     s:10894
         1 000010   000005 115007                    CMPA    5,DL
         1 000011   000020 601000 1                  TNZ     s:10896

     2355    10893    1          P_ARRAY_TYPE=5 /*Adjustable*/ THEN
     2356    10894    1           TEMP=(P_DIMENSIONS+2)/3;

  10894  1 000012   200022 471500                    LDP1    @P_DIMENSIONS,,AUTO
         1 000013   100000 236100                    LDQ     0,,PR1
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:290  
         1 000014   000002 036007                    ADLQ    2,DL
         1 000015   000003 506007                    DIV     3,DL
         1 000016   200027 756100                    STQ     TEMP,,AUTO
         1 000017   000021 710000 1                  TRA     s:10901

     2357    10895    1       ELSE
     2358    10896    1           TEMP=0;

  10896  1 000020   200027 450100                    STZ     TEMP,,AUTO

     2359    10897         /* If this variable has a status variable associated with
     2360    10898            it, ensure room for the vrebl entry and continuation
     2361    10899            entry.
     2362    10900         */
     2363    10901    1       IF ADDR(P_STATUS_EXISTS) ~= ADDR(NIL) THEN

  10901  1 000021   200025 236100                    LDQ     @P_STATUS_EXISTS,,AUTO
         1 000022   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000023   000033 600000 1                  TZE     s:10910

     2364    10902    2       DO;

     2365    10903    2           IF P_STATUS_EXISTS

  10903  1 000024   200025 471500                    LDP1    @P_STATUS_EXISTS,,AUTO
         1 000025   000000 066500                    CMPB    filb='0'B
         1 000026   100000 000001                    BDSC    0,,PR1                   by=0,bit=0,n=1
         1 000027   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         1 000030   000033 600000 1                  TZE     s:10910

     2366    10904    2           THEN TEMP = TEMP + 2;

  10904  1 000031   000002 236007                    LDQ     2,DL
         1 000032   200027 056100                    ASQ     TEMP,,AUTO

     2367    10905    2           END;

PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:291  
     2368    10906         /* If this variable has a data type set or data type
     2369    10907            enumerated type, ensure room for the continuation
     2370    10908            entry.
     2371    10909         */
     2372    10910    1       IF (P_DATA_TYPE = %SET_DATATYPE) OR

  10910  1 000033   200005 471500                    LDP1    @P_DATA_TYPE,,AUTO
         1 000034   100000 235100                    LDA     0,,PR1
         1 000035   000065 115007                    CMPA    53,DL
         1 000036   000041 600000 1                  TZE     s:10913
         1 000037   000064 115007                    CMPA    52,DL
         1 000040   000042 601000 1                  TNZ     s:10921

     2373    10911    1          (P_DATA_TYPE = %ENUMTYPE_DATATYPE) THEN
     2374    10912    2       DO;

     2375    10913    2           TEMP = TEMP + 1;

  10913  1 000041   200027 054100                    AOS     TEMP,,AUTO

     2376    10914    2           END;

     2377    10915         /*
     2378    10916         The following section will check to see if the passed information will
     2379    10917         fit in the current record. If not, the current record will be
     2380    10918         written and pointer re-initialized.  Then the text will be moved to
     2381    10919         the buffer.
     2382    10920         */
     2383    10921    1       IF PINCRW(B_VREBL_CUR$,SIZEW(B$VREBL)*TEMP)>=B_VREBL_END$ THEN

  10921  1 000042   200027 236100                    LDQ     TEMP,,AUTO
         1 000043   000005 402003                    MPY     5,DU
         1 000044   000000 036000 xsym               ADLQ    B_VREBL_CUR$
         1 000045   000000 116000 xsym               CMPQ    B_VREBL_END$
         1 000046   000074 602000 1                  TNC     s:10940

     2384    10922    2       DO;
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:292  

     2385    10923         /*
     2386    10924            Generate null entires to
     2387    10925            fill up to the end of
     2388    10926            the page
     2389    10927            */
     2390    10928    3           DO WHILE(B_VREBL_CUR$<B_VREBL_END$);

  10928  1 000047   000000 236000 xsym               LDQ     B_VREBL_CUR$
         1 000050   000000 116000 xsym               CMPQ    B_VREBL_END$
         1 000051   000065 603000 1                  TRC     s:10933

     2391    10929    3               B_VREBL_CUR$ -> B$VREBL.DATATYP=%NULL_DATATYPE;

  10929  1 000052   000000 470400 xsym               LDP0    B_VREBL_CUR$
         1 000053   000000 236100                    LDQ     0,,PR0
         1 000054   000000 376000 2                  ANQ     0
         1 000055   000360 276007                    ORQ     240,DL
         1 000056   000000 756100                    STQ     0,,PR0

     2392    10930    3               B_VREBL_COUNT=B_VREBL_COUNT+1;

  10930  1 000057   000000 054000 xsym               AOS     B_VREBL_COUNT

     2393    10931    3               B_VREBL_CUR$=PINCRW(B_VREBL_CUR$,SIZEW(B$VREBL));

  10931  1 000060   000000 236000 xsym               LDQ     B_VREBL_CUR$
         1 000061   000005 036003                    ADLQ    5,DU
         1 000062   000000 756000 xsym               STQ     B_VREBL_CUR$

     2394    10932    3               END;

  10932  1 000063   000000 116000 xsym               CMPQ    B_VREBL_END$
         1 000064   000052 602000 1                  TNC     s:10929

     2395    10933    2           CALL XUO$OUWRITE(%TYPVREBL);

PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:293  
  10933  1 000065   000002 630400 2                  EPPR0   2
         1 000066   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000067   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000070   000000 011000                    NOP     0

     2396    10934    2           B_VREBL_PAGE=B_VREBL_PAGE+1;

  10934  1 000071   000000 054000 xsym               AOS     B_VREBL_PAGE

     2397    10935    2           B_VREBL_CUR$=B_VREBL_BASE$;

  10935  1 000072   000000 236000 xsym               LDQ     B_VREBL_BASE$
         1 000073   000000 756000 xsym               STQ     B_VREBL_CUR$

     2398    10936    2           END;

     2399    10937         /*
     2400    10938         The following will build the vrebl data table.
     2401    10939         */
     2402    10940    1       VREBL_CUR$=B_VREBL_CUR$;

  10940  1 000074   000000 236000 xsym               LDQ     B_VREBL_CUR$
         1 000075   200026 756100                    STQ     VREBL_CUR$,,AUTO

     2403    10941    1       B$VREBL.ADR.W=P_ADDRESS/XUO_WORDSIZE;

  10941  1 000076   200003 470500                    LDP0    @P_PARAM1,,AUTO
         1 000077   000000 236100                    LDQ     0,,PR0
         1 000100   000000 506000 xsym               DIV     XUO_WORDSIZE
         1 000101   000000 620006                    EAX0    0,QL
         1 000102   200026 471500                    LDP1    VREBL_CUR$,,AUTO
         1 000103   100000 740100                    STX0    0,,PR1

     2404    10942    1       TEMP=MOD(P_ADDRESS,XUO_WORDSIZE);

  10942  1 000104   000000 236100                    LDQ     0,,PR0
         1 000105   000000 506000 xsym               DIV     XUO_WORDSIZE
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:294  
         1 000106   200027 755100                    STA     TEMP,,AUTO

     2405    10943    1       B$VREBL.ADR.C=TEMP/XUO_CHARSIZE;

  10943  1 000107   200027 236100                    LDQ     TEMP,,AUTO
         1 000110   000000 506000 xsym               DIV     XUO_CHARSIZE
         1 000111   000020 736000                    QLS     16
         1 000112   100000 676100                    ERQ     0,,PR1
         1 000113   600000 376007                    ANQ     -65536,DL
         1 000114   100000 656100                    ERSQ    0,,PR1

     2406    10944    1       B$VREBL.ADR.B=MOD(TEMP,XUO_CHARSIZE);

  10944  1 000115   200027 236100                    LDQ     TEMP,,AUTO
         1 000116   000000 506000 xsym               DIV     XUO_CHARSIZE
         1 000117   000044 733000                    LRS     36
         1 000120   000014 736000                    QLS     12
         1 000121   100000 676100                    ERQ     0,,PR1
         1 000122   170000 376007                    ANQ     61440,DL
         1 000123   100000 656100                    ERSQ    0,,PR1

     2407    10945    1       B$VREBL.ADDRTYP=P_ADDRESS_TYPE;

  10945  1 000124   200004 473500                    LDP3    @P_ADDRESS_TYPE,,AUTO
         1 000125   300000 236100                    LDQ     0,,PR3
         1 000126   000010 736000                    QLS     8
         1 000127   100000 676100                    ERQ     0,,PR1
         1 000130   007400 376007                    ANQ     3840,DL
         1 000131   100000 656100                    ERSQ    0,,PR1

     2408    10946    1       B$VREBL.DATATYP=P_DATA_TYPE;

  10946  1 000132   200005 474500                    LDP4    @P_DATA_TYPE,,AUTO
         1 000133   400000 236100                    LDQ     0,,PR4
         1 000134   000002 736000                    QLS     2
         1 000135   100000 676100                    ERQ     0,,PR1
         1 000136   000374 376007                    ANQ     252,DL
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:295  
         1 000137   100000 656100                    ERSQ    0,,PR1

     2409    10947    1       B$VREBL.REF=P_REFERENCED_FLAG;

  10947  1 000140   200006 475500                    LDP5    @P_REFERENCED_FLAG,,AUTO
         1 000141   003100 060500                    CSL     bolr='003'O
         1 000142   500000 000001                    BDSC    0,,PR5                   by=0,bit=0,n=1
         1 000143   100000 670001                    BDSC    0,,PR1                   by=3,bit=7,n=1

     2410    10948    1       B$VREBL.MODF=P_MODIFIED_FLAG;

  10948  1 000144   200007 476500                    LDP6    @P_MODIFIED_FLAG,,AUTO
         1 000145   003100 060500                    CSL     bolr='003'O
         1 000146   600000 000001                    BDSC    0,,PR6                   by=0,bit=0,n=1
         1 000147   100000 700001                    BDSC    0,,PR1                   by=3,bit=8,n=1

     2411    10949    1       B$VREBL.LOGSIZ=P_LOGICAL_SIZE;

  10949  1 000150   200010 477500                    LDP7    @P_LOGICAL_SIZE,,AUTO
         1 000151   700000 721100                    LXL1    0,,PR7
         1 000152   100001 741100                    STX1    1,,PR1

     2412    10950    1       B$VREBL.LEVEL=P_LEVEL_NUMBER;

  10950  1 000153   200011 470500                    LDP0    @P_LEVEL_NUMBER,,AUTO
         1 000154   000000 236100                    LDQ     0,,PR0
         1 000155   000014 736000                    QLS     12
         1 000156   100001 752104                    STCQ    1,'04'O,PR1

     2413    10951    1       B$VREBL.ALIGNTYP=P_ALIGNMENT_TYPE;

  10951  1 000157   200012 470500                    LDP0    @P_ALIGNMENT_TYPE,,AUTO
         1 000160   000000 236100                    LDQ     0,,PR0
         1 000161   000011 736000                    QLS     9
         1 000162   100001 676100                    ERQ     1,,PR1
         1 000163   007000 376007                    ANQ     3584,DL
         1 000164   100001 656100                    ERSQ    1,,PR1
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:296  

     2414    10952    1       B$VREBL.SZTYP=P_SIZE_TYPE_FLAG;

  10952  1 000165   200013 470500                    LDP0    @P_SIZE_TYPE_FLAG,,AUTO
         1 000166   003100 060500                    CSL     bolr='003'O
         1 000167   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
         1 000170   100001 600001                    BDSC    1,,PR1                   by=3,bit=0,n=1

     2415    10953    1       B$VREBL.ARRAYTYP=P_ARRAY_TYPE;

  10953  1 000171   200014 470500                    LDP0    @P_ARRAY_TYPE,,AUTO
         1 000172   000000 236100                    LDQ     0,,PR0
         1 000173   000004 736000                    QLS     4
         1 000174   100001 676100                    ERQ     1,,PR1
         1 000175   000360 376007                    ANQ     240,DL
         1 000176   100001 656100                    ERSQ    1,,PR1

     2416    10954    1       B$VREBL.OPNDTYP=P_OPERAND_TYPE;

  10954  1 000177   200015 470500                    LDP0    @P_OPERAND_TYPE,,AUTO
         1 000200   000000 236100                    LDQ     0,,PR0
         1 000201   100001 676100                    ERQ     1,,PR1
         1 000202   000017 376007                    ANQ     15,DL
         1 000203   100001 656100                    ERSQ    1,,PR1

     2417    10955    1       B$VREBL.IMPTR=P_IMPLIED_POINTER;

  10955  1 000204   200016 470500                    LDP0    @P_IMPLIED_POINTER,,AUTO
         1 000205   000000 721100                    LXL1    0,,PR0
         1 000206   100002 741100                    STX1    2,,PR1

     2418    10956    1       B$VREBL.OPERAND=P_OPERAND;

  10956  1 000207   200017 470500                    LDP0    @P_OPERAND,,AUTO
         1 000210   000000 722100                    LXL2    0,,PR0
         1 000211   100002 442100                    SXL2    2,,PR1

PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:297  
     2419    10957    1       B$VREBL.ELMNTSIZ=P_ELEMENT_SIZE;

  10957  1 000212   200020 470500                    LDP0    @P_ELEMENT_SIZE,,AUTO
         1 000213   000000 236100                    LDQ     0,,PR0
         1 000214   000014 736000                    QLS     12
         1 000215   100003 752174                    STCQ    3,'74'O,PR1

     2420    10958    1       B$VREBL.SCALE=P_SCALE_FACTOR;

  10958  1 000216   200021 470500                    LDP0    @P_SCALE_FACTOR,,AUTO
         1 000217   000000 236100                    LDQ     0,,PR0
         1 000220   100003 676100                    ERQ     3,,PR1
         1 000221   000377 376007                    ANQ     255,DL
         1 000222   100003 656100                    ERSQ    3,,PR1

     2421    10959    1       B$VREBL.DIMS=P_DIMENSIONS;

  10959  1 000223   200022 470500                    LDP0    @P_DIMENSIONS,,AUTO
         1 000224   000000 723100                    LXL3    0,,PR0
         1 000225   100004 743100                    STX3    4,,PR1

     2422    10960    1       B$VREBL.NPOINTER=P_NAME_POINTER;

  10960  1 000226   200023 470500                    LDP0    @P_NAME_POINTER,,AUTO
         1 000227   000000 724100                    LXL4    0,,PR0
         1 000230   100004 444100                    SXL4    4,,PR1

     2423    10961    1       B_VREBL_COUNT=B_VREBL_COUNT+1;

  10961  1 000231   000000 054000 xsym               AOS     B_VREBL_COUNT

     2424    10962    1       IF ADDR(P_ENTRY_NUMBER)~=ADDR(NIL) THEN

  10962  1 000232   200024 236100                    LDQ     @P_ENTRY_NUMBER,,AUTO
         1 000233   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000234   000240 600000 1                  TZE     s:10964

PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:298  
     2425    10963    1           P_ENTRY_NUMBER=B_VREBL_COUNT;

  10963  1 000235   000000 235000 xsym               LDA     B_VREBL_COUNT
         1 000236   200024 470500                    LDP0    @P_ENTRY_NUMBER,,AUTO
         1 000237   000000 755100                    STA     0,,PR0

     2426    10964    1       IF ADDR(P_STATUS_EXISTS) ~= ADDR(NIL)

  10964  1 000240   200025 236100                    LDQ     @P_STATUS_EXISTS,,AUTO
         1 000241   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000242   000247 600000 1                  TZE     s:10968

     2427    10965    2       THEN DO;

     2428    10966    2           B$VREBL.STATUS_EXISTS = P_STATUS_EXISTS;

  10966  1 000243   200025 470500                    LDP0    @P_STATUS_EXISTS,,AUTO
         1 000244   003100 060500                    CSL     bolr='003'O
         1 000245   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
         1 000246   100003 460001                    BDSC    3,,PR1                   by=2,bit=6,n=1

     2429    10967    2           END;

     2430    10968    1       B_VREBL_CUR$=PINCRW(B_VREBL_CUR$,SIZEW(B$VREBL));

  10968  1 000247   000000 236000 xsym               LDQ     B_VREBL_CUR$
         1 000250   000005 036003                    ADLQ    5,DU
         1 000251   000000 756000 xsym               STQ     B_VREBL_CUR$

     2431    10969    1       RETURN;

  10969  1 000252   000000 702200 xent               TSX2  ! X66_ARET

     2432    10970            %PAGE (ARG=XUO$VREBLNUM);

             10983    1   /*******************************************************************************
             10984    1   *                                                                              *
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:299  
             10985    1   *        XUO$VREBLNUM              XUO$VREBLNUM                                   *
             10986    1   *                                                                              *
             10987    1   *******************************************************************************/

     2433    10991        /*D*
     2434    10992
     2435    10993        XUO$VREBLNUM --Variable Debug Records (Record Type 14)
     2436    10994
     2437    10995        NAME:  XUO$VREBLNUM
     2438    10996
     2439    10997        PURPOSE:  To return the number of the next entry in the
     2440    10998                  Variable Debug Record
     2441    10999
     2442    11000        DESCRIPTION:  This routine returns the number of the next
     2443    11001            Variable Debug Record entry.  The returned value is used
     2444    11002            in the calls to XUO$LOGBLKVREBLINIT and
     2445    11003            XUO$LOGBLKVREBLTERM where starting and ending Variable
     2446    11004            Debug Record entry numbers are required.  This routine
     2447    11005            is used only in the case of getting the next number
     2448    11006            for the logical block calls.  In all other cases, the
     2449    11007            entry number should be obtained by use of the parameter
     2450    11008            Entry Number returned by the call to XUO$VREBL.
     2451    11009
     2452    11010        CALL:  CALL XUO$VREBLNUM (Variable Debug Record entry number)
     2453    11011
     2454    11012        INPUT:  none
     2455    11013
     2456    11014        OUTPUT:
     2457    11015
     2458    11016            Variable Debug Record entry number  UBIN ALIGNED
     2459    11017                                The number of the next entry in
     2460    11018                                the Variable Debug Record.
     2461    11019
     2462    11020        B$OBJECT REFERENCE:  B$VREBL
     2463    11021        */
     2464    11022        /*B*
     2465    11023
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:300  
     2466    11024        GLOBAL DATA:
     2467    11025            B_VREBL_COUNT
     2468    11026
     2469    11027        INTERFACE:
     2470    11028            XUO$OUWRITE
     2471    11029
     2472    11030        */
     2473    11031
     2474    11032    1   XUO$VREBLNUM: ENTRY(P_PARAM1);

  11032  1 000253   000000 700200 xent  XUO$VREBLNUM TSX0  ! X66_AUTO_N
         1 000254   000030 000023                    ZERO    24,19

     2475    11033         /*
     2476    11034            */
     2477    11035    1       P_VREBL_NUMBER=B_VREBL_COUNT+1;

  11035  1 000255   000000 235000 xsym               LDA     B_VREBL_COUNT
         1 000256   000001 035007                    ADLA    1,DL
         1 000257   200003 470500                    LDP0    @P_PARAM1,,AUTO
         1 000260   000000 755100                    STA     0,,PR0

     2478    11036    1       RETURN;

  11036  1 000261   000000 702200 xent               TSX2  ! X66_ARET
     2479    11037    1   END XUO$VREBL;
     2480    11038        %EOD;

PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:301  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$VREBL.
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:302  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @P_ADDRESS_TYPE           12-0-0/w PTR         r     1 @P_ALIGNMENT_TYPE
    14-0-0/w PTR         r     1 @P_ARRAY_TYPE              5-0-0/w PTR         r     1 @P_DATA_TYPE
    22-0-0/w PTR         r     1 @P_DIMENSIONS             20-0-0/w PTR         r     1 @P_ELEMENT_SIZE
    24-0-0/w PTR         r     1 @P_ENTRY_NUMBER           16-0-0/w PTR         r     1 @P_IMPLIED_POINTER
    11-0-0/w PTR         r     1 @P_LEVEL_NUMBER           10-0-0/w PTR         r     1 @P_LOGICAL_SIZE
     7-0-0/w PTR         r     1 @P_MODIFIED_FLAG          23-0-0/w PTR         r     1 @P_NAME_POINTER
    17-0-0/w PTR         r     1 @P_OPERAND                15-0-0/w PTR         r     1 @P_OPERAND_TYPE
     3-0-0/w PTR         r     1 @P_PARAM1                  6-0-0/w PTR         r     1 @P_REFERENCED_FLAG
    21-0-0/w PTR         r     1 @P_SCALE_FACTOR           13-0-0/w PTR         r     1 @P_SIZE_TYPE_FLAG
    25-0-0/w PTR         r     1 @P_STATUS_EXISTS          *0-0-0/w SBIN        r     1 P_ADDRESS
    *0-0-0/w UBIN        r     1 P_ADDRESS_TYPE            *0-0-0/w UBIN        r     1 P_ALIGNMENT_TYPE
    *0-0-0/w UBIN        r     1 P_ARRAY_TYPE              *0-0-0/w UBIN        r     1 P_DATA_TYPE
    *0-0-0/w SBIN        r     1 P_DIMENSIONS              *0-0-0/w UBIN        r     1 P_ELEMENT_SIZE
    *0-0-0/w UBIN        r     1 P_ENTRY_NUMBER            *0-0-0/w SBIN        r     1 P_IMPLIED_POINTER
    *0-0-0/w UBIN        r     1 P_LEVEL_NUMBER            *0-0-0/w UBIN        r     1 P_LOGICAL_SIZE
    *0-0-0/b BIT         r     1 P_MODIFIED_FLAG           *0-0-0/w SBIN        r     1 P_NAME_POINTER
    *0-0-0/w UBIN        r     1 P_OPERAND                 *0-0-0/w UBIN        r     1 P_OPERAND_TYPE
    *0-0-0/w UBIN        r     1 P_PARAM1                  *0-0-0/b BIT         r     1 P_REFERENCED_FLAG
    *0-0-0/w UBIN        r     1 P_SCALE_FACTOR            *0-0-0/b BIT         r     1 P_SIZE_TYPE_FLAG
    *0-0-0/b BIT         r     1 P_STATUS_EXISTS           *0-0-0/w UBIN        r     1 P_VREBL_NUMBER
    27-0-0/w SBIN        r     1 TEMP                      26-0-0/w PTR         r     1 VREBL_CUR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_VREBL_BASE$              0-0-0/w SBIN        r     1 B_VREBL_COUNT
     0-0-0/w PTR         r     1 B_VREBL_CUR$               0-0-0/w PTR         r     1 B_VREBL_END$
     0-0-0/w SBIN        r     1 B_VREBL_PAGE               0-0-0/w SBIN        r     1 XUO_CHARSIZE
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:303  
     0-0-0/w SBIN        r     1 XUO_WORDSIZE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 B$VREBL


   Procedure XUO$VREBL requires 178 words for executable code.
   Procedure XUO$VREBL requires 24 words of local(AUTO) storage.
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:304  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:305  
          MINI XREF LISTING

B$VREBL
     10637**DCL     10921--IF      10931--ASSIGN  10968--ASSIGN
B$VREBL.ADDRTYP
     10664**DCL     10945<<ASSIGN
B$VREBL.ADR
     10638**DCL     10650--REDEF
B$VREBL.ADR.B
     10648**DCL     10944<<ASSIGN
B$VREBL.ADR.C
     10646**DCL     10943<<ASSIGN
B$VREBL.ADR.W
     10644**DCL     10941<<ASSIGN
B$VREBL.ALIGNTYP
     10710**DCL     10951<<ASSIGN
B$VREBL.ARRAYTYP
     10725**DCL     10953<<ASSIGN
B$VREBL.DATATYP
     10688**DCL     10929<<ASSIGN  10946<<ASSIGN
B$VREBL.DIMS
     10791**DCL     10959<<ASSIGN
B$VREBL.ELMNTSIZ
     10773**DCL     10957<<ASSIGN
B$VREBL.IMPTR
     10755**DCL     10955<<ASSIGN
B$VREBL.LEVEL
     10707**DCL     10950<<ASSIGN
B$VREBL.LOGSIZ
     10699**DCL     10949<<ASSIGN
B$VREBL.MODF
     10695**DCL     10948<<ASSIGN
B$VREBL.NPOINTER
     10795**DCL     10960<<ASSIGN
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:306  
B$VREBL.OPERAND
     10768**DCL     10956<<ASSIGN
B$VREBL.OPNDTYP
     10747**DCL     10954<<ASSIGN
B$VREBL.REF
     10692**DCL     10947<<ASSIGN
B$VREBL.SCALE
     10783**DCL     10958<<ASSIGN
B$VREBL.STATUS_EXISTS
     10779**DCL     10966<<ASSIGN
B$VREBL.SZTYP
     10719**DCL     10952<<ASSIGN
B_VREBL_BASE$
     10812**DCL     10935>>ASSIGN
B_VREBL_COUNT
     10815**DCL     10930<<ASSIGN  10930>>ASSIGN  10961<<ASSIGN  10961>>ASSIGN  10963>>ASSIGN  11035>>ASSIGN
B_VREBL_CUR$
     10813**DCL     10921>>IF      10928>>DOWHILE 10929>>ASSIGN  10931<<ASSIGN  10931>>ASSIGN  10935<<ASSIGN
     10940>>ASSIGN  10968<<ASSIGN  10968>>ASSIGN
B_VREBL_END$
     10814**DCL     10921>>IF      10928>>DOWHILE
B_VREBL_PAGE
     10816**DCL     10934<<ASSIGN  10934>>ASSIGN
P_ADDRESS
     10592**DCL     10941>>ASSIGN  10942>>ASSIGN
P_ADDRESS_TYPE
     10597**DCL       315--PROC    10945>>ASSIGN
P_ALIGNMENT_TYPE
     10603**DCL       315--PROC    10951>>ASSIGN
P_ARRAY_TYPE
     10605**DCL       315--PROC    10892>>IF      10892>>IF      10892>>IF      10953>>ASSIGN
P_DATA_TYPE
     10598**DCL       315--PROC    10910>>IF      10910>>IF      10946>>ASSIGN
P_DIMENSIONS
     10611**DCL       315--PROC    10894>>ASSIGN  10959>>ASSIGN
P_ELEMENT_SIZE
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:307  
     10609**DCL       315--PROC    10957>>ASSIGN
P_ENTRY_NUMBER
     10613**DCL       315--PROC    10962--IF      10963<<ASSIGN
P_IMPLIED_POINTER
     10607**DCL       315--PROC    10955>>ASSIGN
P_LEVEL_NUMBER
     10602**DCL       315--PROC    10950>>ASSIGN
P_LOGICAL_SIZE
     10601**DCL       315--PROC    10949>>ASSIGN
P_MODIFIED_FLAG
     10600**DCL       315--PROC    10948>>ASSIGN
P_NAME_POINTER
     10612**DCL       315--PROC    10960>>ASSIGN
P_OPERAND
     10608**DCL       315--PROC    10956>>ASSIGN
P_OPERAND_TYPE
     10606**DCL       315--PROC    10954>>ASSIGN
P_PARAM1
     10588**DCL       315--PROC    10592--REDEF   10596--REDEF   11032--ENTRY
P_REFERENCED_FLAG
     10599**DCL       315--PROC    10947>>ASSIGN
P_SCALE_FACTOR
     10610**DCL       315--PROC    10958>>ASSIGN
P_SIZE_TYPE_FLAG
     10604**DCL       315--PROC    10952>>ASSIGN
P_STATUS_EXISTS
     10614**DCL       315--PROC    10901--IF      10903>>IF      10964--IF      10966>>ASSIGN
P_VREBL_NUMBER
     10596**DCL     11035<<ASSIGN
TEMP
     10845**DCL     10894<<ASSIGN  10896<<ASSIGN  10904<<ASSIGN  10904>>ASSIGN  10913<<ASSIGN  10913>>ASSIGN
     10921>>IF      10942<<ASSIGN  10943>>ASSIGN  10944>>ASSIGN
VREBL_CUR$
     10820**DCL     10637--IMP-PTR 10940<<ASSIGN  10941>>ASSIGN  10943>>ASSIGN  10944>>ASSIGN  10945>>ASSIGN
     10946>>ASSIGN  10947>>ASSIGN  10948>>ASSIGN  10949>>ASSIGN  10950>>ASSIGN  10951>>ASSIGN  10952>>ASSIGN
     10953>>ASSIGN  10954>>ASSIGN  10955>>ASSIGN  10956>>ASSIGN  10957>>ASSIGN  10958>>ASSIGN  10959>>ASSIGN
PL6.E3A0      #011=XUO$VREBL File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:28 Page:308  
     10960>>ASSIGN  10966>>ASSIGN
XUO$OUWRITE
     10867**DCL-ENT 10933--CALL
XUO_CHARSIZE
     10844**DCL     10943>>ASSIGN  10944>>ASSIGN
XUO_WORDSIZE
     10843**DCL     10941>>ASSIGN  10942>>ASSIGN

PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:309  
     2481        1        /*M*     XUO$VREBL_CONT -- THIS MODULE WILL BUILD OBJECT UNIT VREBL CONTINUATION REC
                 1        ORD*/
     2482        2        /*T***********************************************************/
     2483        3        /*T*                                                         */
     2484        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2485        5        /*T*                                                         */
     2486        6        /*T***********************************************************/
     2487        7        /*P*
     2488        8
     2489        9        NAME:  XUO$VREBL_CONT
     2490       10        XUO$VREBL_CONT --Variable Debug Record Continuation
     2491       11                         (Record Type 14)
     2492       12
     2493       13
     2494       14        PURPOSE:  To build continuation entries in the Variable
     2495       15            Debug Record (Record Type 14)
     2496       16
     2497       17        DESCRIPTION:  This routine builds continuation entries in the
     2498       18            Variable Debug Record.  It is used for dimensioned entries
     2499       19            of Array Type 3 or Array Type 4 (see XUO$VREBL - Array Type)
     2500       20            to describe the dimension attributes of the variable.
     2501       21
     2502       22        */
     2503       23        /*D*
     2504       24
     2505       25        CALL:  CALL XUO$VREBL_CONT (Offset,
     2506       26                             Data Type,
     2507       27                             Elements,
     2508       28                             Multiplier 1,
     2509       29                             Multiplier 2,
     2510       30                             Multiplier 3,
     2511       31                             Multiplier 4,
     2512       32                             Multiplier 5,
     2513       33                             Multiplier 6)
     2514       34
     2515       35        INPUT:
     2516       36            Offset              UBIN ALIGNED
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:310  
     2517       37                                Contains the value to be subtracted
     2518       38                                from the composite index calculated
     2519       39                                from index values and multipliers
     2520       40                                before multiplying by Element Size.
     2521       41            Data Type           UBIN ALIGNED
     2522       42                                Indicates the type of data described
     2523       43                                by this entry.  The defined data type
     2524       44                                codes are as follows:
     2525       45                      0              Type not specified.
     2526       46                      1              Real binary fixed single precision
     2527       47                                     (SBIN, INTEGER, COMP-6).
     2528       48                      2              Real binary fixed double precision.
     2529       49                      3              Real binary float single precision
     2530       50                                     (REAL).
     2531       51                      4              Real binary float double precision
     2532       52                                     (DOUBLE PRECISION).
     2533       53                      5              Complex binary fixed single precision.
     2534       54                      6              Complex binary fixed double precision.
     2535       55                      7              Complex binary float single precision
     2536       56                                     (COMPLEX).
     2537       57                      8              Complex binary float double precision
     2538       58                                     (DOUBLE COMPLEX).
     2539       59                      9              Packed decimal fixed, lead ASCII sign
     2540       60                                     (COMP-4).
     2541       61                     10              Packed decimal float.
     2542       62                     11              Packed decimal fixed complex,
     2543       63                                     lead ASCII sign.
     2544       64                     12              Packed decimal float complex.
     2545       65                     13              Pointer
     2546       66                     14              Offset
     2547       67                     15              Label
     2548       68                     16              Entry
     2549       69                     17              Structure
     2550       70                     18              Area
     2551       71                     19              Bit string
     2552       72                     20              Varying bit string
     2553       73                     21              Character string
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:311  
     2554       74                     22              Varying character string
     2555       75                     23              File
     2556       76                     24              UBIN
     2557       77                     25              Packed decimal fixed, trail ASCII sign
     2558       78                                     (COMP, COMP-4).
     2559       79                     26              Adjustable character string
     2560       80                     27              Adjustable bit string
     2561       81                     28              EPTR
     2562       82                     29              16 bit signed integer (COMP-1).
     2563       83                     30              32 bit signed integer (COMP-2).
     2564       84                     31              Packed decimal fixed, trail EBCDIC sign
     2565       85                                     (COMP-3).
     2566       86                     32              INDEX-1
     2567       87                     33              INDEX-2
     2568       88                     34              FORTRAN Every
     2569       89                     35              FORTRAN Logical
     2570       90                     36              FORTRAN Any (Never Passed)
     2571       91                     37              FORTRAN Label
     2572       92                     38              FORTRAN UCB
     2573       93                     39              Intrinsic Constant
     2574       94                     40              Packed decimal fixed, no sign (COMP,
     2575       95                                     COMP-3, COMP-4).
     2576       96                     41              Unpacked decimal fixed, no sign
     2577       97                     42              Unpacked decimal fixed lead sign
     2578       98                     43              Unpacked decimal fixed trail sign
     2579       99                     44              Unpacked decimal fixed lead over
     2580      100                                     punched sign
     2581      101                     45              Unpacked decimal fixed trail over
     2582      102                                     punched sign
     2583      103                     46              Adjustable structure
     2584      104                     47              Vector
     2585      105                     48              Remember
     2586      106                     49              Descriptor
     2587      107                     50              Unpacked decimal float
     2588      108                     51              Packed decimal fixed,
     2589      109                                     Lead EBCDIC sign
     2590      110                     52              Enumerated Type
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:312  
     2591      111                     53              Set
     2592      112                     54 - 59         Reserved
     2593      113                     60              Null entry
     2594      114                     61              Virtual array dimension entry
     2595      115                     62              Array dimension entry
     2596      116                     63              Reserved
     2597      117            Elements            UBIN ALIGNED
     2598      118                                Contains the total number of elements
     2599      119                                in the array, i.e., the product of all
     2600      120                                dimensions.
     2601      121            Multiplier N        UBIN ALIGNED
     2602      122                                The coefficient to be applied
     2603      123                                to index n in an array reference
     2604      124                                to be used in locating a particular
     2605      125                                element of an array.
     2606      126
     2607      127            The following example is included to clarify the use
     2608      128            of the various array parameters.
     2609      129
     2610      130            Assume an array A(LB1:UB1, LB2:UB2, ..., LBn:UBn).
     2611      131            Then for languages which vary the first dimension
     2612      132            most rapidly (e.g., FORTRAN):
     2613      133
     2614      134                 Multiplier(1)= 1
     2615      135                 Multiplier(j)= Multiplier(j-1) * (UB(j-1) -LB(j-1) +1)
     2616      136                                2 <= j <= N
     2617      137                 Elements = Multiplier n * (UBn -LBn *1)
     2618      138
     2619      139            And for languages which vary the last dimension most
     2620      140            rapidly (e.g., PL1):
     2621      141
     2622      142                 Multiplier(n)= 1
     2623      143                 Multiplier(j)= Multiplier(j+1) * (UB(j+1) -LB(j-1) +1)
     2624      144                                1 <= j <= N-1
     2625      145                 Elements = Multiplier(1) * (UB1 -LB1 +1)
     2626      146
     2627      147            In either case:
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:313  
     2628      148
     2629      149               Offset = The sum of (Multiplier(j) * LB(j))
     2630      150                        for j=1 to N
     2631      151
     2632      152            and the bit displacement from address to any element
     2633      153            A(x1, x2, ..., xn) is given by:
     2634      154
     2635      155             Bit displacement =
     2636      156
     2637      157                  The sum of (Multiplier(j)* X(j) -Offset)
     2638      158                              for j = 1 to N) * Element Size
     2639      159
     2640      160
     2641      161        OUTPUT:  none
     2642      162
     2643      163        B$OBJECT REFERENCE:  B$VREBLC
     2644      164        */
     2645      165        /*B*
     2646      166
     2647      167        GLOBAL DATA:
     2648      168            B_VREBL_CUR$
     2649      169            B_VREBL_COUNT
     2650      170            B_VREBL_PAGE
     2651      171
     2652      172        INTERFACE:
     2653      173             XUO$OUWRITE
     2654      174
     2655      175        */
     2656      176
     2657      177         /**/
     2658      178        XUO$VREBL_CONT: PROC(P_OFFSET,P_DATA_TYPE,P_ELEMENTS,P_MULTIPLIER_1,P_MULTIPLIER_2,
     2659      179               P_MULTIPLIER_3,P_MULTIPLIER_4,P_MULTIPLIER_5,P_MULTIPLIER_6);
     2660      180         /*
     2661      181            */
     2662      182        %INCLUDE ZVA_SYSTEM_FILE;
     2663     6433            %PAGE (ARG=INCLUDES);

PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:314  
              6446    1   /*******************************************************************************
              6447    1   *                                                                              *
              6448    1   *        INCLUDES              INCLUDES                                            *
              6449    1   *                                                                              *
              6450    1   *******************************************************************************/

     2664     6454        %INCLUDE B$OBJECT_C;
     2665     9884         %INCLUDE XUO$OBJ_C;
     2666    10294            %PAGE (ARG=SUBS);

             10307    1   /*******************************************************************************
             10308    1   *                                                                              *
             10309    1   *        SUBS              SUBS                                                  *
             10310    1   *                                                                              *
             10311    1   *******************************************************************************/

     2667    10315            %B$RECORDSUBS;
     2668    10343            %VREBLSUBS;
     2669    10351            %VREBL_DATATYPES;
     2670    10426            %B$RELOCSUBS;
     2671    10456        %PLIST;
     2672    10457            %PAGE (ARG=PARAMETERS);

             10470    1   /*******************************************************************************
             10471    1   *                                                                              *
             10472    1   *        PARAMETERS              PARAMETERS                                        *
             10473    1   *                                                                              *
             10474    1   *******************************************************************************/

     2673    10478    1   DCL P_OFFSET UBIN;
     2674    10479    1   DCL P_DATA_TYPE UBIN;
     2675    10480    1   DCL P_ELEMENTS UBIN;
     2676    10481    1   DCL P_MULTIPLIER_1 UBIN;
     2677    10482    1   DCL P_MULTIPLIER_2 UBIN;
     2678    10483    1   DCL P_MULTIPLIER_3 UBIN;
     2679    10484    1   DCL P_MULTIPLIER_4 UBIN;
     2680    10485    1   DCL P_MULTIPLIER_5 UBIN;
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:315  
     2681    10486    1   DCL P_MULTIPLIER_6 UBIN;
     2682    10487        %PAGE (ARG=VREBLC DATA);

             10500    1   /*******************************************************************************
             10501    1   *                                                                              *
             10502    1   *        VREBLC DATA              VREBLC DATA                                      *
             10503    1   *                                                                              *
             10504    1   *******************************************************************************/

     2683    10508        %B$VREBLC (STCLASS="BASED(VREBL_CUR$)");
     2684    10581        %B_VREBL_POINTERS;
     2685    10601    1   DCL VREBL_CUR$ PTR;
     2686    10602        %PLIST;
     2687    10603        %PAGE (ARG=ENTRY DCL);

             10616    1   /*******************************************************************************
             10617    1   *                                                                              *
             10618    1   *        ENTRY DCL              ENTRY DCL                                          *
             10619    1   *                                                                              *
             10620    1   *******************************************************************************/

     2688    10624    1   DCL XUO$OUWRITE ENTRY(2);
     2689    10625        %PAGE (ARG=XUO$VREBL_CONT);

             10638    1   /*******************************************************************************
             10639    1   *                                                                              *
             10640    1   *        XUO$VREBL_CONT              XUO$VREBL_CONT                                *
             10641    1   *                                                                              *
             10642    1   *******************************************************************************/

     2690    10646         /*
     2691    10647         The following section will check to see if the passed information will
     2692    10648         fit in the current record.  If not, the current record will be
     2693    10649         written and the pointer reinitialized.  Then the text will be moved to
     2694    10650         the buffer.
     2695    10651         NOTE:    This should not happen but better safe than sorry.
     2696    10652         */
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:316  
     2697    10653    1       IF B_VREBL_CUR$>=B_VREBL_END$ THEN
     2698    10654    2       DO;
     2699    10655    2           CALL XUO$OUWRITE(%TYPVREBL);
     2700    10656    2           B_VREBL_PAGE=B_VREBL_PAGE+1;
     2701    10657    2           B_VREBL_CUR$=B_VREBL_BASE$;
     2702    10658    2           END;
     2703    10659         /*
     2704    10660         The following will build the continuation entry.
     2705    10661         */
     2706    10662    1       VREBL_CUR$=B_VREBL_CUR$;
     2707    10663    1       B$VREBLC='0'B;
     2708    10664    1       B$VREBLC.OFFSET=P_OFFSET;
     2709    10665    1       B$VREBLC.DATATYP=P_DATA_TYPE;
     2710    10666    1       B$VREBLC.ELEMENTS=P_ELEMENTS;
     2711    10667    1       B$VREBLC.OPNDTYP=%OPERCONST;
     2712    10668    1       IF P_DATA_TYPE=%VIRTUAL_ARRAY_DATATYPE THEN
     2713    10669    2       DO;
     2714    10670    2           B$VREBLC.MULT_61(0)=P_MULTIPLIER_1;
     2715    10671    2           IF ADDR(P_MULTIPLIER_2)~=ADDR(NIL) THEN
     2716    10672    3           DO;
     2717    10673    3               B$VREBLC.MULT_61(1)=P_MULTIPLIER_2;
     2718    10674    3               IF ADDR(P_MULTIPLIER_3)~=ADDR(NIL) THEN
     2719    10675    3                   B$VREBLC.MULT_61(2)=P_MULTIPLIER_3;
     2720    10676    3               END;
     2721    10677    2           END;
     2722    10678    1       ELSE
     2723    10679    2       DO;
     2724    10680    2           B$VREBLC.MULT_62(0)=P_MULTIPLIER_1;
     2725    10681    2           IF ADDR(P_MULTIPLIER_2)~=ADDR(NIL) THEN
     2726    10682    3           DO;
     2727    10683    3               B$VREBLC.MULT_62(1)=P_MULTIPLIER_2;
     2728    10684    3               IF ADDR(P_MULTIPLIER_3)~=ADDR(NIL) THEN
     2729    10685    4               DO;
     2730    10686    4                   B$VREBLC.MULT_62(2)=P_MULTIPLIER_3;
     2731    10687    4                   IF ADDR(P_MULTIPLIER_4)~=ADDR(NIL) THEN
     2732    10688    5                   DO;
     2733    10689    5                       B$VREBLC.MULT_62(3)=P_MULTIPLIER_4;
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:317  
     2734    10690    5                       IF ADDR(P_MULTIPLIER_5)~=ADDR(NIL) THEN
     2735    10691    6                       DO;
     2736    10692    6                           B$VREBLC.MULT_62(4)=P_MULTIPLIER_5;
     2737    10693    6                           IF ADDR(P_MULTIPLIER_6)~=ADDR(NIL) THEN
     2738    10694    6                               B$VREBLC.MULT_62(5)=P_MULTIPLIER_6;
     2739    10695    6                           END; /*MULT_62(4)*/
     2740    10696    5                       END; /*MULT_62(3)*/
     2741    10697    4                   END; /*MULT_62(2)*/
     2742    10698    3               END; /*MULT_62(1)*/
     2743    10699    2           END; /*MULT_62(0)*/
     2744    10700    1       B_VREBL_COUNT=B_VREBL_COUNT+1;
     2745    10701    1       B_VREBL_CUR$=PINCRW(B_VREBL_CUR$,SIZEW(B$VREBLC));
     2746    10702    1       RETURN;
     2747    10703         /**/
     2748    10704    1   END XUO$VREBL_CONT;
     2749    10705        %EOD;

PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:318  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$VREBL_CONT.

   Procedure XUO$VREBL_CONT requires 99 words for executable code.
   Procedure XUO$VREBL_CONT requires 14 words of local(AUTO) storage.

PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:319  

 Object Unit name= XUO$VREBL_CONT                             File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:29:25.80 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    99    143  XUO$VREBL_CONT
    2  RoData even  none     4      4  XUO$VREBL_CONT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        9  XUO$VREBL_CONT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_VREBL_BASE$                         B_VREBL_CUR$
     B_VREBL_END$                          B_VREBL_COUNT                         B_VREBL_PAGE
     B_VECTNIL
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:320  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:321  


     2481        1        /*M*    XUO$VREBL_CONT -- THIS MODULE WILL BUILD OBJECT UNIT VREBL CONTINUATION REC
                 1        ORD*/
     2482        2        /*T***********************************************************/
     2483        3        /*T*                                                         */
     2484        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2485        5        /*T*                                                         */
     2486        6        /*T***********************************************************/
     2487        7        /*P*
     2488        8
     2489        9        NAME:  XUO$VREBL_CONT
     2490       10        XUO$VREBL_CONT --Variable Debug Record Continuation
     2491       11                         (Record Type 14)
     2492       12
     2493       13
     2494       14        PURPOSE:  To build continuation entries in the Variable
     2495       15            Debug Record (Record Type 14)
     2496       16
     2497       17        DESCRIPTION:  This routine builds continuation entries in the
     2498       18            Variable Debug Record.  It is used for dimensioned entries
     2499       19            of Array Type 3 or Array Type 4 (see XUO$VREBL - Array Type)
     2500       20            to describe the dimension attributes of the variable.
     2501       21
     2502       22        */
     2503       23        /*D*
     2504       24
     2505       25        CALL:  CALL XUO$VREBL_CONT (Offset,
     2506       26                             Data Type,
     2507       27                             Elements,
     2508       28                             Multiplier 1,
     2509       29                             Multiplier 2,
     2510       30                             Multiplier 3,
     2511       31                             Multiplier 4,
     2512       32                             Multiplier 5,
     2513       33                             Multiplier 6)
     2514       34
     2515       35        INPUT:
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:322  
     2516       36            Offset              UBIN ALIGNED
     2517       37                                Contains the value to be subtracted
     2518       38                                from the composite index calculated
     2519       39                                from index values and multipliers
     2520       40                                before multiplying by Element Size.
     2521       41            Data Type           UBIN ALIGNED
     2522       42                                Indicates the type of data described
     2523       43                                by this entry.  The defined data type
     2524       44                                codes are as follows:
     2525       45                      0              Type not specified.
     2526       46                      1              Real binary fixed single precision
     2527       47                                     (SBIN, INTEGER, COMP-6).
     2528       48                      2              Real binary fixed double precision.
     2529       49                      3              Real binary float single precision
     2530       50                                     (REAL).
     2531       51                      4              Real binary float double precision
     2532       52                                     (DOUBLE PRECISION).
     2533       53                      5              Complex binary fixed single precision.
     2534       54                      6              Complex binary fixed double precision.
     2535       55                      7              Complex binary float single precision
     2536       56                                     (COMPLEX).
     2537       57                      8              Complex binary float double precision
     2538       58                                     (DOUBLE COMPLEX).
     2539       59                      9              Packed decimal fixed, lead ASCII sign
     2540       60                                     (COMP-4).
     2541       61                     10              Packed decimal float.
     2542       62                     11              Packed decimal fixed complex,
     2543       63                                     lead ASCII sign.
     2544       64                     12              Packed decimal float complex.
     2545       65                     13              Pointer
     2546       66                     14              Offset
     2547       67                     15              Label
     2548       68                     16              Entry
     2549       69                     17              Structure
     2550       70                     18              Area
     2551       71                     19              Bit string
     2552       72                     20              Varying bit string
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:323  
     2553       73                     21              Character string
     2554       74                     22              Varying character string
     2555       75                     23              File
     2556       76                     24              UBIN
     2557       77                     25              Packed decimal fixed, trail ASCII sign
     2558       78                                     (COMP, COMP-4).
     2559       79                     26              Adjustable character string
     2560       80                     27              Adjustable bit string
     2561       81                     28              EPTR
     2562       82                     29              16 bit signed integer (COMP-1).
     2563       83                     30              32 bit signed integer (COMP-2).
     2564       84                     31              Packed decimal fixed, trail EBCDIC sign
     2565       85                                     (COMP-3).
     2566       86                     32              INDEX-1
     2567       87                     33              INDEX-2
     2568       88                     34              FORTRAN Every
     2569       89                     35              FORTRAN Logical
     2570       90                     36              FORTRAN Any (Never Passed)
     2571       91                     37              FORTRAN Label
     2572       92                     38              FORTRAN UCB
     2573       93                     39              Intrinsic Constant
     2574       94                     40              Packed decimal fixed, no sign (COMP,
     2575       95                                     COMP-3, COMP-4).
     2576       96                     41              Unpacked decimal fixed, no sign
     2577       97                     42              Unpacked decimal fixed lead sign
     2578       98                     43              Unpacked decimal fixed trail sign
     2579       99                     44              Unpacked decimal fixed lead over
     2580      100                                     punched sign
     2581      101                     45              Unpacked decimal fixed trail over
     2582      102                                     punched sign
     2583      103                     46              Adjustable structure
     2584      104                     47              Vector
     2585      105                     48              Remember
     2586      106                     49              Descriptor
     2587      107                     50              Unpacked decimal float
     2588      108                     51              Packed decimal fixed,
     2589      109                                     Lead EBCDIC sign
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:324  
     2590      110                     52              Enumerated Type
     2591      111                     53              Set
     2592      112                     54 - 59         Reserved
     2593      113                     60              Null entry
     2594      114                     61              Virtual array dimension entry
     2595      115                     62              Array dimension entry
     2596      116                     63              Reserved
     2597      117            Elements            UBIN ALIGNED
     2598      118                                Contains the total number of elements
     2599      119                                in the array, i.e., the product of all
     2600      120                                dimensions.
     2601      121            Multiplier N        UBIN ALIGNED
     2602      122                                The coefficient to be applied
     2603      123                                to index n in an array reference
     2604      124                                to be used in locating a particular
     2605      125                                element of an array.
     2606      126
     2607      127            The following example is included to clarify the use
     2608      128            of the various array parameters.
     2609      129
     2610      130            Assume an array A(LB1:UB1, LB2:UB2, ..., LBn:UBn).
     2611      131            Then for languages which vary the first dimension
     2612      132            most rapidly (e.g., FORTRAN):
     2613      133
     2614      134                 Multiplier(1)= 1
     2615      135                 Multiplier(j)= Multiplier(j-1) * (UB(j-1) -LB(j-1) +1)
     2616      136                                2 <= j <= N
     2617      137                 Elements = Multiplier n * (UBn -LBn *1)
     2618      138
     2619      139            And for languages which vary the last dimension most
     2620      140            rapidly (e.g., PL1):
     2621      141
     2622      142                 Multiplier(n)= 1
     2623      143                 Multiplier(j)= Multiplier(j+1) * (UB(j+1) -LB(j-1) +1)
     2624      144                                1 <= j <= N-1
     2625      145                 Elements = Multiplier(1) * (UB1 -LB1 +1)
     2626      146
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:325  
     2627      147            In either case:
     2628      148
     2629      149               Offset = The sum of (Multiplier(j) * LB(j))
     2630      150                        for j=1 to N
     2631      151
     2632      152            and the bit displacement from address to any element
     2633      153            A(x1, x2, ..., xn) is given by:
     2634      154
     2635      155             Bit displacement =
     2636      156
     2637      157                  The sum of (Multiplier(j)* X(j) -Offset)
     2638      158                              for j = 1 to N) * Element Size
     2639      159
     2640      160
     2641      161        OUTPUT:  none
     2642      162
     2643      163        B$OBJECT REFERENCE:  B$VREBLC
     2644      164        */
     2645      165        /*B*
     2646      166
     2647      167        GLOBAL DATA:
     2648      168            B_VREBL_CUR$
     2649      169            B_VREBL_COUNT
     2650      170            B_VREBL_PAGE
     2651      171
     2652      172        INTERFACE:
     2653      173             XUO$OUWRITE
     2654      174
     2655      175        */
     2656      176
     2657      177         /**/
     2658      178        XUO$VREBL_CONT: PROC(P_OFFSET,P_DATA_TYPE,P_ELEMENTS,P_MULTIPLIER_1,P_MULTIPLIER_2,

    178  1 000000   000000 700200 xent  XUO$VREBL_C* TSX0  ! X66_AUTO_N
         1 000001   000016 000011                    ZERO    14,9

     2659      179               P_MULTIPLIER_3,P_MULTIPLIER_4,P_MULTIPLIER_5,P_MULTIPLIER_6);
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:326  
     2660      180         /*
     2661      181            */
     2662      182        %INCLUDE ZVA_SYSTEM_FILE;
     2663     6433            %PAGE (ARG=INCLUDES);

              6446    1   /*******************************************************************************
              6447    1   *                                                                              *
              6448    1   *        INCLUDES              INCLUDES                                           *
              6449    1   *                                                                              *
              6450    1   *******************************************************************************/

     2664     6454        %INCLUDE B$OBJECT_C;
     2665     9884         %INCLUDE XUO$OBJ_C;
     2666    10294            %PAGE (ARG=SUBS);

             10307    1   /*******************************************************************************
             10308    1   *                                                                              *
             10309    1   *        SUBS              SUBS                                                  *
             10310    1   *                                                                              *
             10311    1   *******************************************************************************/

     2667    10315            %B$RECORDSUBS;
     2668    10343            %VREBLSUBS;
     2669    10351            %VREBL_DATATYPES;
     2670    10426            %B$RELOCSUBS;
     2671    10456        %PLIST;
     2672    10457            %PAGE (ARG=PARAMETERS);

             10470    1   /*******************************************************************************
             10471    1   *                                                                              *
             10472    1   *        PARAMETERS              PARAMETERS                                       *
             10473    1   *                                                                              *
             10474    1   *******************************************************************************/

     2673    10478    1   DCL P_OFFSET UBIN;
     2674    10479    1   DCL P_DATA_TYPE UBIN;
     2675    10480    1   DCL P_ELEMENTS UBIN;
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:327  
     2676    10481    1   DCL P_MULTIPLIER_1 UBIN;
     2677    10482    1   DCL P_MULTIPLIER_2 UBIN;
     2678    10483    1   DCL P_MULTIPLIER_3 UBIN;
     2679    10484    1   DCL P_MULTIPLIER_4 UBIN;
     2680    10485    1   DCL P_MULTIPLIER_5 UBIN;
     2681    10486    1   DCL P_MULTIPLIER_6 UBIN;
     2682    10487        %PAGE (ARG=VREBLC DATA);

             10500    1   /*******************************************************************************
             10501    1   *                                                                              *
             10502    1   *        VREBLC DATA              VREBLC DATA                                     *
             10503    1   *                                                                              *
             10504    1   *******************************************************************************/

     2683    10508        %B$VREBLC (STCLASS="BASED(VREBL_CUR$)");
     2684    10581        %B_VREBL_POINTERS;
     2685    10601    1   DCL VREBL_CUR$ PTR;
     2686    10602        %PLIST;
     2687    10603        %PAGE (ARG=ENTRY DCL);

             10616    1   /*******************************************************************************
             10617    1   *                                                                              *
             10618    1   *        ENTRY DCL              ENTRY DCL                                         *
             10619    1   *                                                                              *
             10620    1   *******************************************************************************/

     2688    10624    1   DCL XUO$OUWRITE ENTRY(2);
     2689    10625        %PAGE (ARG=XUO$VREBL_CONT);

             10638    1   /*******************************************************************************
             10639    1   *                                                                              *
             10640    1   *        XUO$VREBL_CONT              XUO$VREBL_CONT                               *
             10641    1   *                                                                              *
             10642    1   *******************************************************************************/

     2690    10646         /*
     2691    10647         The following section will check to see if the passed information will
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:328  
     2692    10648         fit in the current record.  If not, the current record will be
     2693    10649         written and the pointer reinitialized.  Then the text will be moved to
     2694    10650         the buffer.
     2695    10651         NOTE:    This should not happen but better safe than sorry.
     2696    10652         */
     2697    10653    1       IF B_VREBL_CUR$>=B_VREBL_END$ THEN

  10653  1 000002   000000 236000 xsym               LDQ     B_VREBL_CUR$
         1 000003   000000 116000 xsym               CMPQ    B_VREBL_END$
         1 000004   000014 602000 1                  TNC     s:10662

     2698    10654    2       DO;

     2699    10655    2           CALL XUO$OUWRITE(%TYPVREBL);

  10655  1 000005   000001 630400 2                  EPPR0   1
         1 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000007   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000010   000000 011000                    NOP     0

     2700    10656    2           B_VREBL_PAGE=B_VREBL_PAGE+1;

  10656  1 000011   000000 054000 xsym               AOS     B_VREBL_PAGE

     2701    10657    2           B_VREBL_CUR$=B_VREBL_BASE$;

  10657  1 000012   000000 236000 xsym               LDQ     B_VREBL_BASE$
         1 000013   000000 756000 xsym               STQ     B_VREBL_CUR$

     2702    10658    2           END;

     2703    10659         /*
     2704    10660         The following will build the continuation entry.
     2705    10661         */
     2706    10662    1       VREBL_CUR$=B_VREBL_CUR$;

  10662  1 000014   200014 756100                    STQ     VREBL_CUR$,,AUTO
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:329  

     2707    10663    1       B$VREBLC='0'B;

  10663  1 000015   200014 470500                    LDP0    VREBL_CUR$,,AUTO
         1 000016   000100 100400                    MLR     fill='000'O
         1 000017   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000020   000000 000024                    ADSC9   0,,PR0                   cn=0,n=20

     2708    10664    1       B$VREBLC.OFFSET=P_OFFSET;

  10664  1 000021   200003 471500                    LDP1    @P_OFFSET,,AUTO
         1 000022   100000 236100                    LDQ     0,,PR1
         1 000023   000010 736000                    QLS     8
         1 000024   000000 676100                    ERQ     0,,PR0
         1 000025   000002 376000 2                  ANQ     2
         1 000026   000000 656100                    ERSQ    0,,PR0

     2709    10665    1       B$VREBLC.DATATYP=P_DATA_TYPE;

  10665  1 000027   200004 473500                    LDP3    @P_DATA_TYPE,,AUTO
         1 000030   300000 236100                    LDQ     0,,PR3
         1 000031   000002 736000                    QLS     2
         1 000032   000000 676100                    ERQ     0,,PR0
         1 000033   000374 376007                    ANQ     252,DL
         1 000034   000000 656100                    ERSQ    0,,PR0

     2710    10666    1       B$VREBLC.ELEMENTS=P_ELEMENTS;

  10666  1 000035   200005 474500                    LDP4    @P_ELEMENTS,,AUTO
         1 000036   400000 236100                    LDQ     0,,PR4
         1 000037   000004 736000                    QLS     4
         1 000040   000001 676100                    ERQ     1,,PR0
         1 000041   000003 376000 2                  ANQ     3
         1 000042   000001 656100                    ERSQ    1,,PR0

     2711    10667    1       B$VREBLC.OPNDTYP=%OPERCONST;

PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:330  
  10667  1 000043   000001 236100                    LDQ     1,,PR0
         1 000044   000003 376000 2                  ANQ     3
         1 000045   000004 276007                    ORQ     4,DL
         1 000046   000001 756100                    STQ     1,,PR0

     2712    10668    1       IF P_DATA_TYPE=%VIRTUAL_ARRAY_DATATYPE THEN

  10668  1 000047   300000 235100                    LDA     0,,PR3
         1 000050   000075 115007                    CMPA    61,DL
         1 000051   000072 601000 1                  TNZ     s:10680

     2713    10669    2       DO;

     2714    10670    2           B$VREBLC.MULT_61(0)=P_MULTIPLIER_1;

  10670  1 000052   200006 475500                    LDP5    @P_MULTIPLIER_1,,AUTO
         1 000053   500000 235100                    LDA     0,,PR5
         1 000054   000002 755100                    STA     2,,PR0

     2715    10671    2           IF ADDR(P_MULTIPLIER_2)~=ADDR(NIL) THEN

  10671  1 000055   200007 236100                    LDQ     @P_MULTIPLIER_2,,AUTO
         1 000056   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000057   000136 600000 1                  TZE     s:10700

     2716    10672    3           DO;

     2717    10673    3               B$VREBLC.MULT_61(1)=P_MULTIPLIER_2;

  10673  1 000060   200007 476500                    LDP6    @P_MULTIPLIER_2,,AUTO
         1 000061   600000 235100                    LDA     0,,PR6
         1 000062   000003 755100                    STA     3,,PR0

     2718    10674    3               IF ADDR(P_MULTIPLIER_3)~=ADDR(NIL) THEN

  10674  1 000063   200010 236100                    LDQ     @P_MULTIPLIER_3,,AUTO
         1 000064   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:331  
         1 000065   000136 600000 1                  TZE     s:10700

     2719    10675    3                   B$VREBLC.MULT_61(2)=P_MULTIPLIER_3;

  10675  1 000066   200010 477500                    LDP7    @P_MULTIPLIER_3,,AUTO
         1 000067   700000 235100                    LDA     0,,PR7
         1 000070   000004 755100                    STA     4,,PR0

     2720    10676    3               END;

     2721    10677    2           END;

  10677  1 000071   000136 710000 1                  TRA     s:10700

     2722    10678    1       ELSE
     2723    10679    2       DO;

     2724    10680    2           B$VREBLC.MULT_62(0)=P_MULTIPLIER_1;

  10680  1 000072   200006 475500                    LDP5    @P_MULTIPLIER_1,,AUTO
         1 000073   500000 720100                    LXL0    0,,PR5
         1 000074   000002 740100                    STX0    2,,PR0

     2725    10681    2           IF ADDR(P_MULTIPLIER_2)~=ADDR(NIL) THEN

  10681  1 000075   200007 236100                    LDQ     @P_MULTIPLIER_2,,AUTO
         1 000076   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000077   000136 600000 1                  TZE     s:10700

     2726    10682    3           DO;

     2727    10683    3               B$VREBLC.MULT_62(1)=P_MULTIPLIER_2;

  10683  1 000100   200007 476500                    LDP6    @P_MULTIPLIER_2,,AUTO
         1 000101   600000 721100                    LXL1    0,,PR6
         1 000102   000002 441100                    SXL1    2,,PR0

PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:332  
     2728    10684    3               IF ADDR(P_MULTIPLIER_3)~=ADDR(NIL) THEN

  10684  1 000103   200010 236100                    LDQ     @P_MULTIPLIER_3,,AUTO
         1 000104   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000105   000136 600000 1                  TZE     s:10700

     2729    10685    4               DO;

     2730    10686    4                   B$VREBLC.MULT_62(2)=P_MULTIPLIER_3;

  10686  1 000106   200010 477500                    LDP7    @P_MULTIPLIER_3,,AUTO
         1 000107   700000 722100                    LXL2    0,,PR7
         1 000110   000003 742100                    STX2    3,,PR0

     2731    10687    4                   IF ADDR(P_MULTIPLIER_4)~=ADDR(NIL) THEN

  10687  1 000111   200011 236100                    LDQ     @P_MULTIPLIER_4,,AUTO
         1 000112   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000113   000136 600000 1                  TZE     s:10700

     2732    10688    5                   DO;

     2733    10689    5                       B$VREBLC.MULT_62(3)=P_MULTIPLIER_4;

  10689  1 000114   200011 470500                    LDP0    @P_MULTIPLIER_4,,AUTO
         1 000115   000000 720100                    LXL0    0,,PR0
         1 000116   200014 470500                    LDP0    VREBL_CUR$,,AUTO
         1 000117   000003 440100                    SXL0    3,,PR0

     2734    10690    5                       IF ADDR(P_MULTIPLIER_5)~=ADDR(NIL) THEN

  10690  1 000120   200012 236100                    LDQ     @P_MULTIPLIER_5,,AUTO
         1 000121   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000122   000136 600000 1                  TZE     s:10700

     2735    10691    6                       DO;

PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:333  
     2736    10692    6                           B$VREBLC.MULT_62(4)=P_MULTIPLIER_5;

  10692  1 000123   200012 470500                    LDP0    @P_MULTIPLIER_5,,AUTO
         1 000124   000000 720100                    LXL0    0,,PR0
         1 000125   200014 470500                    LDP0    VREBL_CUR$,,AUTO
         1 000126   000004 740100                    STX0    4,,PR0

     2737    10693    6                           IF ADDR(P_MULTIPLIER_6)~=ADDR(NIL) THEN

  10693  1 000127   200013 236100                    LDQ     @P_MULTIPLIER_6,,AUTO
         1 000130   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000131   000136 600000 1                  TZE     s:10700

     2738    10694    6                               B$VREBLC.MULT_62(5)=P_MULTIPLIER_6;

  10694  1 000132   200013 470500                    LDP0    @P_MULTIPLIER_6,,AUTO
         1 000133   000000 720100                    LXL0    0,,PR0
         1 000134   200014 470500                    LDP0    VREBL_CUR$,,AUTO
         1 000135   000004 440100                    SXL0    4,,PR0

     2739    10695    6                           END; /*MULT_62(4)*/

     2740    10696    5                       END; /*MULT_62(3)*/

     2741    10697    4                   END; /*MULT_62(2)*/

     2742    10698    3               END; /*MULT_62(1)*/

     2743    10699    2           END; /*MULT_62(0)*/

     2744    10700    1       B_VREBL_COUNT=B_VREBL_COUNT+1;

  10700  1 000136   000000 054000 xsym               AOS     B_VREBL_COUNT

     2745    10701    1       B_VREBL_CUR$=PINCRW(B_VREBL_CUR$,SIZEW(B$VREBLC));

  10701  1 000137   000000 236000 xsym               LDQ     B_VREBL_CUR$
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:334  
         1 000140   000005 036003                    ADLQ    5,DU
         1 000141   000000 756000 xsym               STQ     B_VREBL_CUR$

     2746    10702    1       RETURN;

  10702  1 000142   000000 702200 xent               TSX2  ! X66_ARET
     2747    10703         /**/
     2748    10704    1   END XUO$VREBL_CONT;
     2749    10705        %EOD;

PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:335  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$VREBL_CONT.
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:336  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @P_DATA_TYPE               5-0-0/w PTR         r     1 @P_ELEMENTS
     6-0-0/w PTR         r     1 @P_MULTIPLIER_1            7-0-0/w PTR         r     1 @P_MULTIPLIER_2
    10-0-0/w PTR         r     1 @P_MULTIPLIER_3           11-0-0/w PTR         r     1 @P_MULTIPLIER_4
    12-0-0/w PTR         r     1 @P_MULTIPLIER_5           13-0-0/w PTR         r     1 @P_MULTIPLIER_6
     3-0-0/w PTR         r     1 @P_OFFSET                 *0-0-0/w UBIN        r     1 P_DATA_TYPE
    *0-0-0/w UBIN        r     1 P_ELEMENTS                *0-0-0/w UBIN        r     1 P_MULTIPLIER_1
    *0-0-0/w UBIN        r     1 P_MULTIPLIER_2            *0-0-0/w UBIN        r     1 P_MULTIPLIER_3
    *0-0-0/w UBIN        r     1 P_MULTIPLIER_4            *0-0-0/w UBIN        r     1 P_MULTIPLIER_5
    *0-0-0/w UBIN        r     1 P_MULTIPLIER_6            *0-0-0/w UBIN        r     1 P_OFFSET
    14-0-0/w PTR         r     1 VREBL_CUR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_VREBL_BASE$              0-0-0/w SBIN        r     1 B_VREBL_COUNT
     0-0-0/w PTR         r     1 B_VREBL_CUR$               0-0-0/w PTR         r     1 B_VREBL_END$
     0-0-0/w SBIN        r     1 B_VREBL_PAGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 B$VREBLC


   Procedure XUO$VREBL_CONT requires 99 words for executable code.
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:337  
   Procedure XUO$VREBL_CONT requires 14 words of local(AUTO) storage.
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:338  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:339  
          MINI XREF LISTING

B$VREBLC
     10509**DCL     10663<<ASSIGN  10701--ASSIGN
B$VREBLC.DATATYP
     10515**DCL     10665<<ASSIGN
B$VREBLC.ELEMENTS
     10521**DCL     10666<<ASSIGN
B$VREBLC.MULT_61
     10532**DCL     10556--REDEF   10670<<ASSIGN  10673<<ASSIGN  10675<<ASSIGN
B$VREBLC.MULT_62
     10556**DCL     10680<<ASSIGN  10683<<ASSIGN  10686<<ASSIGN  10689<<ASSIGN  10692<<ASSIGN  10694<<ASSIGN
B$VREBLC.OFFSET
     10510**DCL     10664<<ASSIGN
B$VREBLC.OPNDTYP
     10524**DCL     10667<<ASSIGN
B_VREBL_BASE$
     10593**DCL     10657>>ASSIGN
B_VREBL_COUNT
     10596**DCL     10700<<ASSIGN  10700>>ASSIGN
B_VREBL_CUR$
     10594**DCL     10653>>IF      10657<<ASSIGN  10662>>ASSIGN  10701<<ASSIGN  10701>>ASSIGN
B_VREBL_END$
     10595**DCL     10653>>IF
B_VREBL_PAGE
     10597**DCL     10656<<ASSIGN  10656>>ASSIGN
P_DATA_TYPE
     10479**DCL       178--PROC    10665>>ASSIGN  10668>>IF
P_ELEMENTS
     10480**DCL       178--PROC    10666>>ASSIGN
P_MULTIPLIER_1
     10481**DCL       178--PROC    10670>>ASSIGN  10680>>ASSIGN
P_MULTIPLIER_2
     10482**DCL       178--PROC    10671--IF      10673>>ASSIGN  10681--IF      10683>>ASSIGN
PL6.E3A0      #012=XUO$VREBL_CONT File=XUO$BUILD.:E05TSI                         WED 07/30/97 09:29 Page:340  
P_MULTIPLIER_3
     10483**DCL       178--PROC    10674--IF      10675>>ASSIGN  10684--IF      10686>>ASSIGN
P_MULTIPLIER_4
     10484**DCL       178--PROC    10687--IF      10689>>ASSIGN
P_MULTIPLIER_5
     10485**DCL       178--PROC    10690--IF      10692>>ASSIGN
P_MULTIPLIER_6
     10486**DCL       178--PROC    10693--IF      10694>>ASSIGN
P_OFFSET
     10478**DCL       178--PROC    10664>>ASSIGN
VREBL_CUR$
     10601**DCL     10509--IMP-PTR 10662<<ASSIGN  10663>>ASSIGN  10664>>ASSIGN  10665>>ASSIGN  10666>>ASSIGN
     10667>>ASSIGN  10670>>ASSIGN  10673>>ASSIGN  10675>>ASSIGN  10680>>ASSIGN  10683>>ASSIGN  10686>>ASSIGN
     10689>>ASSIGN  10692>>ASSIGN  10694>>ASSIGN
XUO$OUWRITE
     10624**DCL-ENT 10655--CALL

PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:341  
     2750        1        /*M*     XUO$VREBL_CONT_ADJ -- THIS MODULE WILL BUILD OBJECT UNIT VREBL CONTINUATION
                 1         RECORD*/
     2751        2        /*T***********************************************************/
     2752        3        /*T*                                                         */
     2753        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2754        5        /*T*                                                         */
     2755        6        /*T***********************************************************/
     2756        7        /*P*
     2757        8
     2758        9
     2759       10        NAME:  XUO$VREBL_CONT_ADJ
     2760       11        XUO$VREBL_CONT_ADJ --Variable Debug Record Continuation
     2761       12                             (Record Type 14)
     2762       13
     2763       14
     2764       15        PURPOSE:  To build Variable Debug Record continuation entries
     2765       16                  (Record Type 14)
     2766       17
     2767       18        DESCRIPTION:  This routine builds continuation entries in the
     2768       19            Variable Debug Record.  It is used for dimensioned entries
     2769       20            of Array Type 5 (See XUO$VREBL - Array Type)
     2770       21            that have adjustable offsets, elements or multipliers,
     2771       22            to describe the dimension attributes of the variable.
     2772       23
     2773       24        */
     2774       25        /*D*
     2775       26
     2776       27        CALL:  CALL XUO$VREBL_CONT_ADJ (Offset Flag,
     2777       28                                 Offset,
     2778       29                                 Data Type,
     2779       30                                 Elements Flag,
     2780       31                                 Elements,
     2781       32                                 Multiplier 1 Flag,
     2782       33                                 Multiplier 1,
     2783       34                                 Multiplier 2 Flag,
     2784       35                                 Multiplier 2,
     2785       36                                 Multiplier 3 Flag,
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:342  
     2786       37                                 Multiplier 3)
     2787       38
     2788       39        INPUT:
     2789       40            Offset Flag         BIT(1) UNALIGNED
     2790       41                                Denotes the interpretation of the
     2791       42                                Offset field.  If the Flag = '0'B
     2792       43                                then Offset contains the value to
     2793       44                                be subtracted from the composite
     2794       45                                index calculated from index values
     2795       46                                and multipliers before multiplying
     2796       47                                by Element Size.  If the Flag = '1'B
     2797       48                                then Offset contains the variable
     2798       49                                table entry number of the variable
     2799       50                                containing the value to be subtracted
     2800       51                                from the composite index calculated
     2801       52                                from index values and multipliers
     2802       53                                before multiplying by Element Size.
     2803       54            Offset              UBIN ALIGNED
     2804       55                                Either a value or an entry number
     2805       56                                determined by the Offset Flag.
     2806       57            Data Type           UBIN ALIGNED
     2807       58                                Indicates the type of data described
     2808       59                                by this entry.  The defined data type
     2809       60                                codes are as follows:
     2810       61                      0              Type not specified.
     2811       62                      1              Real binary fixed single precision
     2812       63                                     (SBIN, INTEGER, COMP-6).
     2813       64                      2              Real binary fixed double precision.
     2814       65                      3              Real binary float single precision
     2815       66                                     (REAL).
     2816       67                      4              Real binary float double precision
     2817       68                                     (DOUBLE PRECISION).
     2818       69                      5              Complex binary fixed single precision.
     2819       70                      6              Complex binary fixed double precision.
     2820       71                      7              Complex binary float single precision
     2821       72                                     (COMPLEX).
     2822       73                      8              Complex binary float double precision
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:343  
     2823       74                                     (DOUBLE COMPLEX).
     2824       75                      9              Packed decimal fixed, lead ASCII sign
     2825       76                                     (COMP-4).
     2826       77                     10              Packed decimal float.
     2827       78                     11              Packed decimal fixed complex,
     2828       79                                     lead ASCII sign.
     2829       80                     12              Packed decimal float complex.
     2830       81                     13              Pointer
     2831       82                     14              Offset
     2832       83                     15              Label
     2833       84                     16              Entry
     2834       85                     17              Structure
     2835       86                     18              Area
     2836       87                     19              Bit string
     2837       88                     20              Varying bit string
     2838       89                     21              Character string
     2839       90                     22              Varying character string
     2840       91                     23              File
     2841       92                     24              UBIN
     2842       93                     25              Packed decimal fixed, trail ASCII sign
     2843       94                                     (COMP, COMP-4).
     2844       95                     26              Adjustable character string
     2845       96                     27              Adjustable bit string
     2846       97                     28              EPTR
     2847       98                     29              16 bit signed integer (COMP-1).
     2848       99                     30              32 bit signed integer (COMP-2).
     2849      100                     31              Packed decimal fixed, trail EBCDIC sign
     2850      101                                     (COMP-3).
     2851      102                     32              INDEX-1
     2852      103                     33              INDEX-2
     2853      104                     34              FORTRAN Every
     2854      105                     35              FORTRAN Logical
     2855      106                     36              FORTRAN Any (Never Passed)
     2856      107                     37              FORTRAN Label
     2857      108                     38              FORTRAN UCB
     2858      109                     39              Intrinsic Constant
     2859      110                     40              Packed decimal fixed, no sign (COMP,
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:344  
     2860      111                                     COMP-3, COMP-4).
     2861      112                     41              Unpacked decimal fixed, no sign
     2862      113                     42              Unpacked decimal fixed lead sign
     2863      114                     43              Unpacked decimal fixed trail sign
     2864      115                     44              Unpacked decimal fixed lead over
     2865      116                                     punched sign
     2866      117                     45              Unpacked decimal fixed trail over
     2867      118                                     punched sign
     2868      119                     46              Adjustable structure
     2869      120                     47              Vector
     2870      121                     48              Remember
     2871      122                     49              Descriptor
     2872      123                     50              Unpacked decimal float
     2873      124                     51              Packed decimal fixed,
     2874      125                                     Lead EBCDIC sign
     2875      126                     52              Enumerated Type
     2876      127                     53              Set
     2877      128                     54 - 59         Reserved
     2878      129                     60              Null entry
     2879      130                     61              Virtual array dimension entry
     2880      131                     62              Array dimension entry
     2881      132                     63              Reserved
     2882      133             Elements Flag       BIT(1) UNALIGNED
     2883      134                                 Denotes the interpretation of the
     2884      135                                 Elements field.  If Flag = '0'B
     2885      136                                 then Elements contains the total
     2886      137                                 number of elements in the array.
     2887      138                                 If Flag = '1'B then Elements contains
     2888      139                                 the variable record entry number
     2889      140                                 of the variable containing the
     2890      141                                 total number of elements in the array.
     2891      142             Elements            UBIN ALIGNED
     2892      143                                 Contains a value or an entry number
     2893      144                                 depending on the Elements Flag.
     2894      145             Multiplier Flag n   BIT(1) UNALIGNED
     2895      146                                 Denotes the interpretation of the
     2896      147                                 Multiplier n field.  If Flag = '0'B
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:345  
     2897      148                                 then the Multiplier field contains
     2898      149                                 the actual multiplier.  If Flag = '1'B
     2899      150                                 then the Multiplier field contains
     2900      151                                 the variable record entry number of
     2901      152                                 the variable containing the actual
     2902      153                                 multiplier.
     2903      154             Multiplier n        UBIN ALIGNED
     2904      155                                 Contains the multiplier for the array
     2905      156                                 or a variable record entry number
     2906      157                                 as determined by the Multiplier Flag.
     2907      158
     2908      159            The following example is included to clarify the use
     2909      160            of the various array parameters.
     2910      161
     2911      162            Assume an array A(LB1:UB1, LB2:UB2, ..., LBn:UBn).
     2912      163            Then for languages which vary the first dimension
     2913      164            most rapidly (e.g., FORTRAN):
     2914      165
     2915      166                 Multiplier(1)= 1
     2916      167                 Multiplier(j)= Multiplier(j-1) * (UB(j-1) -LB(j-1) +1)
     2917      168                                2 <= j <= N
     2918      169                 Elements = Multiplier(n) * (UBn -LBn *1)
     2919      170
     2920      171            And for languages which vary the last dimension most
     2921      172            rapidly (e.g., PL1):
     2922      173
     2923      174                 Multiplier(n)= 1
     2924      175                 Multiplier(j)= Multiplier(j+1) * (UB(j+1) -LB(j-1) +1)
     2925      176                                1 <= j <= N-1
     2926      177                 Elements = Multiplier 1 * (UB1 -LB1 +1)
     2927      178
     2928      179            In either case:
     2929      180
     2930      181               Offset = The sum of (Multiplier(j) * LB(j))
     2931      182                        for j=1 to N
     2932      183
     2933      184            and the bit displacement from address to any element
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:346  
     2934      185            A(x1, x2, ..., xn) is given by:
     2935      186
     2936      187             Bit displacement =
     2937      188
     2938      189                  The sum of (Multiplier(j)* X(j) -Offset)
     2939      190                              for j = 1 to N) * Element Size
     2940      191
     2941      192
     2942      193        OUTPUT:  none
     2943      194
     2944      195        B$OBJECT REFERENCE:  B$VREBLCA
     2945      196        */
     2946      197        /*B*
     2947      198
     2948      199        GLOBAL DATA:
     2949      200             B_VREBL_CUR$
     2950      201             B_VREBL_COUNT
     2951      202             B_VREBL_PAGE
     2952      203
     2953      204        INTERFACE:
     2954      205                 XUO$OUWRITE
     2955      206
     2956      207        */
     2957      208
     2958      209
     2959      210         /**/
     2960      211        XUO$VREBL_CONT_ADJ: PROC(P_OFFSET_ADJ_FLAG,P_OFFSET,
     2961      212               P_DATA_TYPE,
     2962      213               P_ELEMENTS_ADJ_FLAG,P_ELEMENTS,
     2963      214               P_MULTIPLIER_1_ADJ_FLAG,P_MULTIPLIER_1,
     2964      215               P_MULTIPLIER_2_ADJ_FLAG,P_MULTIPLIER_2,
     2965      216               P_MULTIPLIER_3_ADJ_FLAG,P_MULTIPLIER_3);
     2966      217         /**/
     2967      218        %INCLUDE ZVA_SYSTEM_FILE;
     2968     6469            %PAGE (ARG=INCLUDES);

              6482    1   /*******************************************************************************
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:347  
              6483    1   *                                                                              *
              6484    1   *        INCLUDES              INCLUDES                                            *
              6485    1   *                                                                              *
              6486    1   *******************************************************************************/

     2969     6490        %INCLUDE B$OBJECT_C;
     2970     9920        %INCLUDE XUO$OBJ_C;
     2971    10330            %PAGE (ARG=SUBS);

             10343    1   /*******************************************************************************
             10344    1   *                                                                              *
             10345    1   *        SUBS              SUBS                                                  *
             10346    1   *                                                                              *
             10347    1   *******************************************************************************/

     2972    10351            %B$RECORDSUBS;
     2973    10379            %VREBLSUBS;
     2974    10387            %B$RELOCSUBS;
     2975    10417            %PAGE (ARG=PARAMETERS);

             10430    1   /*******************************************************************************
             10431    1   *                                                                              *
             10432    1   *        PARAMETERS              PARAMETERS                                        *
             10433    1   *                                                                              *
             10434    1   *******************************************************************************/

     2976    10438    1   DCL P_OFFSET_ADJ_FLAG BIT(1) UNAL;
     2977    10439    1   DCL P_OFFSET UBIN;
     2978    10440    1   DCL P_DATA_TYPE UBIN;
     2979    10441    1   DCL P_ELEMENTS_ADJ_FLAG BIT(1) UNAL;
     2980    10442    1   DCL P_ELEMENTS UBIN;
     2981    10443    1   DCL P_MULTIPLIER_1_ADJ_FLAG BIT(1) UNAL;
     2982    10444    1   DCL P_MULTIPLIER_1 UBIN;
     2983    10445    1   DCL P_MULTIPLIER_2_ADJ_FLAG BIT(1) UNAL;
     2984    10446    1   DCL P_MULTIPLIER_2 UBIN;
     2985    10447    1   DCL P_MULTIPLIER_3_ADJ_FLAG BIT(1) UNAL;
     2986    10448    1   DCL P_MULTIPLIER_3 UBIN;
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:348  
     2987    10449        %PAGE (ARG=VREBLC DATA);

             10462    1   /*******************************************************************************
             10463    1   *                                                                              *
             10464    1   *        VREBLC DATA              VREBLC DATA                                      *
             10465    1   *                                                                              *
             10466    1   *******************************************************************************/

     2988    10470        %B$VREBLCA (STCLASS="BASED(VREBL_CUR$)");
     2989    10558        %B_VREBL_POINTERS;
     2990    10578    1   DCL VREBL_CUR$ PTR;
     2991    10579    1   DCL XUO$OUWRITE ENTRY(2);
     2992    10580        %PAGE (ARG=XUO$VREBL_CONT_ADJ);

             10593    1   /*******************************************************************************
             10594    1   *                                                                              *
             10595    1   *        XUO$VREBL_CONT_ADJ              XUO$VREBL_CONT_ADJ                        *
             10596    1   *                                                                              *
             10597    1   *******************************************************************************/

     2993    10601         /*
     2994    10602         The following section will check to see if the passed information will
     2995    10603         fit in the current record. If not, the current record will be
     2996    10604         written and the pointer reinitialized.  Then the text will be moved to
     2997    10605         the buffer.
     2998    10606         NOTE: This should not happen but better safe than sorry.
     2999    10607         */
     3000    10608    1       IF B_VREBL_CUR$>=B_VREBL_END$ THEN
     3001    10609    2       DO;
     3002    10610    2           CALL XUO$OUWRITE(%TYPVREBL);
     3003    10611    2           B_VREBL_PAGE=B_VREBL_PAGE+1;
     3004    10612    2           B_VREBL_CUR$=B_VREBL_BASE$;
     3005    10613    2           END;
     3006    10614         /*
     3007    10615         The following will build the continuation entry
     3008    10616         */
     3009    10617    1       VREBL_CUR$=B_VREBL_CUR$;
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:349  
     3010    10618    1       B$VREBLCA='0'B;
     3011    10619    1       B$VREBLCA.IOFFSET=P_OFFSET_ADJ_FLAG;
     3012    10620    1       B$VREBLCA.OFFSET=P_OFFSET;
     3013    10621    1       B$VREBLCA.DATATYP=P_DATA_TYPE;
     3014    10622    1       B$VREBLCA.IELEMENTS=P_ELEMENTS_ADJ_FLAG;
     3015    10623    1       B$VREBLCA.ELEMENTS=P_ELEMENTS;
     3016    10624    1       B$VREBLCA.OPNDTYP=%OPERCONST;
     3017    10625    1       B$VREBLCA.MULT_A.I(0)=P_MULTIPLIER_1_ADJ_FLAG;
     3018    10626    1       B$VREBLCA.MULT_A.N(0)=P_MULTIPLIER_1;
     3019    10627    1       IF ADDR(P_MULTIPLIER_2_ADJ_FLAG)~=ADDR(NIL) THEN
     3020    10628    2       DO;
     3021    10629    2           B$VREBLCA.MULT_A.I(1)=P_MULTIPLIER_2_ADJ_FLAG;
     3022    10630    2           B$VREBLCA.MULT_A.N(1)=P_MULTIPLIER_2;
     3023    10631    2           IF ADDR(P_MULTIPLIER_3_ADJ_FLAG)~=ADDR(NIL) THEN
     3024    10632    3           DO;
     3025    10633    3               B$VREBLCA.MULT_A.I(2)=P_MULTIPLIER_3_ADJ_FLAG;
     3026    10634    3               B$VREBLCA.MULT_A.N(2)=P_MULTIPLIER_3;
     3027    10635    3               END; /*MULT_3*/
     3028    10636    2           END; /*MULT_2*/
     3029    10637    1       B_VREBL_COUNT=B_VREBL_COUNT+1;
     3030    10638    1       B_VREBL_CUR$=PINCRW(B_VREBL_CUR$,SIZEW(B$VREBLCA));
     3031    10639    1       RETURN;
     3032    10640         /**/
     3033    10641    1   END XUO$VREBL_CONT_ADJ;
     3034    10642        %EOD;

PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:350  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$VREBL_CONT_ADJ.

   Procedure XUO$VREBL_CONT_ADJ requires 86 words for executable code.
   Procedure XUO$VREBL_CONT_ADJ requires 16 words of local(AUTO) storage.

PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:351  

 Object Unit name= XUO$VREBL_CONT_ADJ                         File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:29:57.96 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    86    126  XUO$VREBL_CONT_ADJ
    2  RoData even  none     5      5  XUO$VREBL_CONT_ADJ

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std       11  XUO$VREBL_CONT_ADJ

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_VREBL_BASE$                         B_VREBL_CUR$
     B_VREBL_END$                          B_VREBL_COUNT                         B_VREBL_PAGE
     B_VECTNIL
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:352  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:353  


     2750        1        /*M*    XUO$VREBL_CONT_ADJ -- THIS MODULE WILL BUILD OBJECT UNIT VREBL CONTINUATION
                 1         RECORD*/
     2751        2        /*T***********************************************************/
     2752        3        /*T*                                                         */
     2753        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2754        5        /*T*                                                         */
     2755        6        /*T***********************************************************/
     2756        7        /*P*
     2757        8
     2758        9
     2759       10        NAME:  XUO$VREBL_CONT_ADJ
     2760       11        XUO$VREBL_CONT_ADJ --Variable Debug Record Continuation
     2761       12                             (Record Type 14)
     2762       13
     2763       14
     2764       15        PURPOSE:  To build Variable Debug Record continuation entries
     2765       16                  (Record Type 14)
     2766       17
     2767       18        DESCRIPTION:  This routine builds continuation entries in the
     2768       19            Variable Debug Record.  It is used for dimensioned entries
     2769       20            of Array Type 5 (See XUO$VREBL - Array Type)
     2770       21            that have adjustable offsets, elements or multipliers,
     2771       22            to describe the dimension attributes of the variable.
     2772       23
     2773       24        */
     2774       25        /*D*
     2775       26
     2776       27        CALL:  CALL XUO$VREBL_CONT_ADJ (Offset Flag,
     2777       28                                 Offset,
     2778       29                                 Data Type,
     2779       30                                 Elements Flag,
     2780       31                                 Elements,
     2781       32                                 Multiplier 1 Flag,
     2782       33                                 Multiplier 1,
     2783       34                                 Multiplier 2 Flag,
     2784       35                                 Multiplier 2,
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:354  
     2785       36                                 Multiplier 3 Flag,
     2786       37                                 Multiplier 3)
     2787       38
     2788       39        INPUT:
     2789       40            Offset Flag         BIT(1) UNALIGNED
     2790       41                                Denotes the interpretation of the
     2791       42                                Offset field.  If the Flag = '0'B
     2792       43                                then Offset contains the value to
     2793       44                                be subtracted from the composite
     2794       45                                index calculated from index values
     2795       46                                and multipliers before multiplying
     2796       47                                by Element Size.  If the Flag = '1'B
     2797       48                                then Offset contains the variable
     2798       49                                table entry number of the variable
     2799       50                                containing the value to be subtracted
     2800       51                                from the composite index calculated
     2801       52                                from index values and multipliers
     2802       53                                before multiplying by Element Size.
     2803       54            Offset              UBIN ALIGNED
     2804       55                                Either a value or an entry number
     2805       56                                determined by the Offset Flag.
     2806       57            Data Type           UBIN ALIGNED
     2807       58                                Indicates the type of data described
     2808       59                                by this entry.  The defined data type
     2809       60                                codes are as follows:
     2810       61                      0              Type not specified.
     2811       62                      1              Real binary fixed single precision
     2812       63                                     (SBIN, INTEGER, COMP-6).
     2813       64                      2              Real binary fixed double precision.
     2814       65                      3              Real binary float single precision
     2815       66                                     (REAL).
     2816       67                      4              Real binary float double precision
     2817       68                                     (DOUBLE PRECISION).
     2818       69                      5              Complex binary fixed single precision.
     2819       70                      6              Complex binary fixed double precision.
     2820       71                      7              Complex binary float single precision
     2821       72                                     (COMPLEX).
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:355  
     2822       73                      8              Complex binary float double precision
     2823       74                                     (DOUBLE COMPLEX).
     2824       75                      9              Packed decimal fixed, lead ASCII sign
     2825       76                                     (COMP-4).
     2826       77                     10              Packed decimal float.
     2827       78                     11              Packed decimal fixed complex,
     2828       79                                     lead ASCII sign.
     2829       80                     12              Packed decimal float complex.
     2830       81                     13              Pointer
     2831       82                     14              Offset
     2832       83                     15              Label
     2833       84                     16              Entry
     2834       85                     17              Structure
     2835       86                     18              Area
     2836       87                     19              Bit string
     2837       88                     20              Varying bit string
     2838       89                     21              Character string
     2839       90                     22              Varying character string
     2840       91                     23              File
     2841       92                     24              UBIN
     2842       93                     25              Packed decimal fixed, trail ASCII sign
     2843       94                                     (COMP, COMP-4).
     2844       95                     26              Adjustable character string
     2845       96                     27              Adjustable bit string
     2846       97                     28              EPTR
     2847       98                     29              16 bit signed integer (COMP-1).
     2848       99                     30              32 bit signed integer (COMP-2).
     2849      100                     31              Packed decimal fixed, trail EBCDIC sign
     2850      101                                     (COMP-3).
     2851      102                     32              INDEX-1
     2852      103                     33              INDEX-2
     2853      104                     34              FORTRAN Every
     2854      105                     35              FORTRAN Logical
     2855      106                     36              FORTRAN Any (Never Passed)
     2856      107                     37              FORTRAN Label
     2857      108                     38              FORTRAN UCB
     2858      109                     39              Intrinsic Constant
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:356  
     2859      110                     40              Packed decimal fixed, no sign (COMP,
     2860      111                                     COMP-3, COMP-4).
     2861      112                     41              Unpacked decimal fixed, no sign
     2862      113                     42              Unpacked decimal fixed lead sign
     2863      114                     43              Unpacked decimal fixed trail sign
     2864      115                     44              Unpacked decimal fixed lead over
     2865      116                                     punched sign
     2866      117                     45              Unpacked decimal fixed trail over
     2867      118                                     punched sign
     2868      119                     46              Adjustable structure
     2869      120                     47              Vector
     2870      121                     48              Remember
     2871      122                     49              Descriptor
     2872      123                     50              Unpacked decimal float
     2873      124                     51              Packed decimal fixed,
     2874      125                                     Lead EBCDIC sign
     2875      126                     52              Enumerated Type
     2876      127                     53              Set
     2877      128                     54 - 59         Reserved
     2878      129                     60              Null entry
     2879      130                     61              Virtual array dimension entry
     2880      131                     62              Array dimension entry
     2881      132                     63              Reserved
     2882      133             Elements Flag       BIT(1) UNALIGNED
     2883      134                                 Denotes the interpretation of the
     2884      135                                 Elements field.  If Flag = '0'B
     2885      136                                 then Elements contains the total
     2886      137                                 number of elements in the array.
     2887      138                                 If Flag = '1'B then Elements contains
     2888      139                                 the variable record entry number
     2889      140                                 of the variable containing the
     2890      141                                 total number of elements in the array.
     2891      142             Elements            UBIN ALIGNED
     2892      143                                 Contains a value or an entry number
     2893      144                                 depending on the Elements Flag.
     2894      145             Multiplier Flag n   BIT(1) UNALIGNED
     2895      146                                 Denotes the interpretation of the
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:357  
     2896      147                                 Multiplier n field.  If Flag = '0'B
     2897      148                                 then the Multiplier field contains
     2898      149                                 the actual multiplier.  If Flag = '1'B
     2899      150                                 then the Multiplier field contains
     2900      151                                 the variable record entry number of
     2901      152                                 the variable containing the actual
     2902      153                                 multiplier.
     2903      154             Multiplier n        UBIN ALIGNED
     2904      155                                 Contains the multiplier for the array
     2905      156                                 or a variable record entry number
     2906      157                                 as determined by the Multiplier Flag.
     2907      158
     2908      159            The following example is included to clarify the use
     2909      160            of the various array parameters.
     2910      161
     2911      162            Assume an array A(LB1:UB1, LB2:UB2, ..., LBn:UBn).
     2912      163            Then for languages which vary the first dimension
     2913      164            most rapidly (e.g., FORTRAN):
     2914      165
     2915      166                 Multiplier(1)= 1
     2916      167                 Multiplier(j)= Multiplier(j-1) * (UB(j-1) -LB(j-1) +1)
     2917      168                                2 <= j <= N
     2918      169                 Elements = Multiplier(n) * (UBn -LBn *1)
     2919      170
     2920      171            And for languages which vary the last dimension most
     2921      172            rapidly (e.g., PL1):
     2922      173
     2923      174                 Multiplier(n)= 1
     2924      175                 Multiplier(j)= Multiplier(j+1) * (UB(j+1) -LB(j-1) +1)
     2925      176                                1 <= j <= N-1
     2926      177                 Elements = Multiplier 1 * (UB1 -LB1 +1)
     2927      178
     2928      179            In either case:
     2929      180
     2930      181               Offset = The sum of (Multiplier(j) * LB(j))
     2931      182                        for j=1 to N
     2932      183
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:358  
     2933      184            and the bit displacement from address to any element
     2934      185            A(x1, x2, ..., xn) is given by:
     2935      186
     2936      187             Bit displacement =
     2937      188
     2938      189                  The sum of (Multiplier(j)* X(j) -Offset)
     2939      190                              for j = 1 to N) * Element Size
     2940      191
     2941      192
     2942      193        OUTPUT:  none
     2943      194
     2944      195        B$OBJECT REFERENCE:  B$VREBLCA
     2945      196        */
     2946      197        /*B*
     2947      198
     2948      199        GLOBAL DATA:
     2949      200             B_VREBL_CUR$
     2950      201             B_VREBL_COUNT
     2951      202             B_VREBL_PAGE
     2952      203
     2953      204        INTERFACE:
     2954      205                 XUO$OUWRITE
     2955      206
     2956      207        */
     2957      208
     2958      209
     2959      210         /**/
     2960      211        XUO$VREBL_CONT_ADJ: PROC(P_OFFSET_ADJ_FLAG,P_OFFSET,

    211  1 000000   000000 700200 xent  XUO$VREBL_C* TSX0  ! X66_AUTO_N
         1 000001   000020 000013                    ZERO    16,11

     2961      212               P_DATA_TYPE,
     2962      213               P_ELEMENTS_ADJ_FLAG,P_ELEMENTS,
     2963      214               P_MULTIPLIER_1_ADJ_FLAG,P_MULTIPLIER_1,
     2964      215               P_MULTIPLIER_2_ADJ_FLAG,P_MULTIPLIER_2,
     2965      216               P_MULTIPLIER_3_ADJ_FLAG,P_MULTIPLIER_3);
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:359  
     2966      217         /**/
     2967      218        %INCLUDE ZVA_SYSTEM_FILE;
     2968     6469            %PAGE (ARG=INCLUDES);

              6482    1   /*******************************************************************************
              6483    1   *                                                                              *
              6484    1   *        INCLUDES              INCLUDES                                           *
              6485    1   *                                                                              *
              6486    1   *******************************************************************************/

     2969     6490        %INCLUDE B$OBJECT_C;
     2970     9920        %INCLUDE XUO$OBJ_C;
     2971    10330            %PAGE (ARG=SUBS);

             10343    1   /*******************************************************************************
             10344    1   *                                                                              *
             10345    1   *        SUBS              SUBS                                                  *
             10346    1   *                                                                              *
             10347    1   *******************************************************************************/

     2972    10351            %B$RECORDSUBS;
     2973    10379            %VREBLSUBS;
     2974    10387            %B$RELOCSUBS;
     2975    10417            %PAGE (ARG=PARAMETERS);

             10430    1   /*******************************************************************************
             10431    1   *                                                                              *
             10432    1   *        PARAMETERS              PARAMETERS                                       *
             10433    1   *                                                                              *
             10434    1   *******************************************************************************/

     2976    10438    1   DCL P_OFFSET_ADJ_FLAG BIT(1) UNAL;
     2977    10439    1   DCL P_OFFSET UBIN;
     2978    10440    1   DCL P_DATA_TYPE UBIN;
     2979    10441    1   DCL P_ELEMENTS_ADJ_FLAG BIT(1) UNAL;
     2980    10442    1   DCL P_ELEMENTS UBIN;
     2981    10443    1   DCL P_MULTIPLIER_1_ADJ_FLAG BIT(1) UNAL;
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:360  
     2982    10444    1   DCL P_MULTIPLIER_1 UBIN;
     2983    10445    1   DCL P_MULTIPLIER_2_ADJ_FLAG BIT(1) UNAL;
     2984    10446    1   DCL P_MULTIPLIER_2 UBIN;
     2985    10447    1   DCL P_MULTIPLIER_3_ADJ_FLAG BIT(1) UNAL;
     2986    10448    1   DCL P_MULTIPLIER_3 UBIN;
     2987    10449        %PAGE (ARG=VREBLC DATA);

             10462    1   /*******************************************************************************
             10463    1   *                                                                              *
             10464    1   *        VREBLC DATA              VREBLC DATA                                     *
             10465    1   *                                                                              *
             10466    1   *******************************************************************************/

     2988    10470        %B$VREBLCA (STCLASS="BASED(VREBL_CUR$)");
     2989    10558        %B_VREBL_POINTERS;
     2990    10578    1   DCL VREBL_CUR$ PTR;
     2991    10579    1   DCL XUO$OUWRITE ENTRY(2);
     2992    10580        %PAGE (ARG=XUO$VREBL_CONT_ADJ);

             10593    1   /*******************************************************************************
             10594    1   *                                                                              *
             10595    1   *        XUO$VREBL_CONT_ADJ              XUO$VREBL_CONT_ADJ                       *
             10596    1   *                                                                              *
             10597    1   *******************************************************************************/

     2993    10601         /*
     2994    10602         The following section will check to see if the passed information will
     2995    10603         fit in the current record. If not, the current record will be
     2996    10604         written and the pointer reinitialized.  Then the text will be moved to
     2997    10605         the buffer.
     2998    10606         NOTE: This should not happen but better safe than sorry.
     2999    10607         */
     3000    10608    1       IF B_VREBL_CUR$>=B_VREBL_END$ THEN

  10608  1 000002   000000 236000 xsym               LDQ     B_VREBL_CUR$
         1 000003   000000 116000 xsym               CMPQ    B_VREBL_END$
         1 000004   000014 602000 1                  TNC     s:10617
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:361  

     3001    10609    2       DO;

     3002    10610    2           CALL XUO$OUWRITE(%TYPVREBL);

  10610  1 000005   000001 630400 2                  EPPR0   1
         1 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000007   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000010   000000 011000                    NOP     0

     3003    10611    2           B_VREBL_PAGE=B_VREBL_PAGE+1;

  10611  1 000011   000000 054000 xsym               AOS     B_VREBL_PAGE

     3004    10612    2           B_VREBL_CUR$=B_VREBL_BASE$;

  10612  1 000012   000000 236000 xsym               LDQ     B_VREBL_BASE$
         1 000013   000000 756000 xsym               STQ     B_VREBL_CUR$

     3005    10613    2           END;

     3006    10614         /*
     3007    10615         The following will build the continuation entry
     3008    10616         */
     3009    10617    1       VREBL_CUR$=B_VREBL_CUR$;

  10617  1 000014   200016 756100                    STQ     VREBL_CUR$,,AUTO

     3010    10618    1       B$VREBLCA='0'B;

  10618  1 000015   200016 470500                    LDP0    VREBL_CUR$,,AUTO
         1 000016   000100 100400                    MLR     fill='000'O
         1 000017   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000020   000000 000024                    ADSC9   0,,PR0                   cn=0,n=20

     3011    10619    1       B$VREBLCA.IOFFSET=P_OFFSET_ADJ_FLAG;

PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:362  
  10619  1 000021   200003 471500                    LDP1    @P_OFFSET_ADJ_FLAG,,AUTO
         1 000022   003100 060500                    CSL     bolr='003'O
         1 000023   100000 000001                    BDSC    0,,PR1                   by=0,bit=0,n=1
         1 000024   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1

     3012    10620    1       B$VREBLCA.OFFSET=P_OFFSET;

  10620  1 000025   200004 473500                    LDP3    @P_OFFSET,,AUTO
         1 000026   300000 236100                    LDQ     0,,PR3
         1 000027   000010 736000                    QLS     8
         1 000030   000000 676100                    ERQ     0,,PR0
         1 000031   000002 376000 2                  ANQ     2
         1 000032   000000 656100                    ERSQ    0,,PR0

     3013    10621    1       B$VREBLCA.DATATYP=P_DATA_TYPE;

  10621  1 000033   200005 474500                    LDP4    @P_DATA_TYPE,,AUTO
         1 000034   400000 236100                    LDQ     0,,PR4
         1 000035   000002 736000                    QLS     2
         1 000036   000000 676100                    ERQ     0,,PR0
         1 000037   000374 376007                    ANQ     252,DL
         1 000040   000000 656100                    ERSQ    0,,PR0

     3014    10622    1       B$VREBLCA.IELEMENTS=P_ELEMENTS_ADJ_FLAG;

  10622  1 000041   200006 475500                    LDP5    @P_ELEMENTS_ADJ_FLAG,,AUTO
         1 000042   003100 060500                    CSL     bolr='003'O
         1 000043   500000 000001                    BDSC    0,,PR5                   by=0,bit=0,n=1
         1 000044   000001 000001                    BDSC    1,,PR0                   by=0,bit=0,n=1

     3015    10623    1       B$VREBLCA.ELEMENTS=P_ELEMENTS;

  10623  1 000045   200007 476500                    LDP6    @P_ELEMENTS,,AUTO
         1 000046   600000 236100                    LDQ     0,,PR6
         1 000047   000004 736000                    QLS     4
         1 000050   000001 676100                    ERQ     1,,PR0
         1 000051   000003 376000 2                  ANQ     3
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:363  
         1 000052   000001 656100                    ERSQ    1,,PR0

     3016    10624    1       B$VREBLCA.OPNDTYP=%OPERCONST;

  10624  1 000053   000001 236100                    LDQ     1,,PR0
         1 000054   000004 376000 2                  ANQ     4
         1 000055   000004 276007                    ORQ     4,DL
         1 000056   000001 756100                    STQ     1,,PR0

     3017    10625    1       B$VREBLCA.MULT_A.I(0)=P_MULTIPLIER_1_ADJ_FLAG;

  10625  1 000057   200010 477500                    LDP7    @P_MULTIPLIER_1_ADJ_FLAG,,AUTO
         1 000060   003100 060500                    CSL     bolr='003'O
         1 000061   700000 000001                    BDSC    0,,PR7                   by=0,bit=0,n=1
         1 000062   000002 000001                    BDSC    2,,PR0                   by=0,bit=0,n=1

     3018    10626    1       B$VREBLCA.MULT_A.N(0)=P_MULTIPLIER_1;

  10626  1 000063   200011 470500                    LDP0    @P_MULTIPLIER_1,,AUTO
         1 000064   200016 471500                    LDP1    VREBL_CUR$,,AUTO
         1 000065   000000 236100                    LDQ     0,,PR0
         1 000066   100002 676100                    ERQ     2,,PR1
         1 000067   000031 376000 xsym               ANQ     B_VECTNIL+25
         1 000070   100002 656100                    ERSQ    2,,PR1

     3019    10627    1       IF ADDR(P_MULTIPLIER_2_ADJ_FLAG)~=ADDR(NIL) THEN

  10627  1 000071   200012 236100                    LDQ     @P_MULTIPLIER_2_ADJ_FLAG,,AUTO
         1 000072   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000073   000121 600000 1                  TZE     s:10637

     3020    10628    2       DO;

     3021    10629    2           B$VREBLCA.MULT_A.I(1)=P_MULTIPLIER_2_ADJ_FLAG;

  10629  1 000074   200012 470500                    LDP0    @P_MULTIPLIER_2_ADJ_FLAG,,AUTO
         1 000075   003100 060500                    CSL     bolr='003'O
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:364  
         1 000076   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
         1 000077   100003 000001                    BDSC    3,,PR1                   by=0,bit=0,n=1

     3022    10630    2           B$VREBLCA.MULT_A.N(1)=P_MULTIPLIER_2;

  10630  1 000100   200013 470500                    LDP0    @P_MULTIPLIER_2,,AUTO
         1 000101   000000 236100                    LDQ     0,,PR0
         1 000102   100003 676100                    ERQ     3,,PR1
         1 000103   000031 376000 xsym               ANQ     B_VECTNIL+25
         1 000104   100003 656100                    ERSQ    3,,PR1

     3023    10631    2           IF ADDR(P_MULTIPLIER_3_ADJ_FLAG)~=ADDR(NIL) THEN

  10631  1 000105   200014 236100                    LDQ     @P_MULTIPLIER_3_ADJ_FLAG,,AUTO
         1 000106   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000107   000121 600000 1                  TZE     s:10637

     3024    10632    3           DO;

     3025    10633    3               B$VREBLCA.MULT_A.I(2)=P_MULTIPLIER_3_ADJ_FLAG;

  10633  1 000110   200014 470500                    LDP0    @P_MULTIPLIER_3_ADJ_FLAG,,AUTO
         1 000111   003100 060500                    CSL     bolr='003'O
         1 000112   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
         1 000113   100004 000001                    BDSC    4,,PR1                   by=0,bit=0,n=1

     3026    10634    3               B$VREBLCA.MULT_A.N(2)=P_MULTIPLIER_3;

  10634  1 000114   200015 470500                    LDP0    @P_MULTIPLIER_3,,AUTO
         1 000115   000000 236100                    LDQ     0,,PR0
         1 000116   100004 676100                    ERQ     4,,PR1
         1 000117   000031 376000 xsym               ANQ     B_VECTNIL+25
         1 000120   100004 656100                    ERSQ    4,,PR1

     3027    10635    3               END; /*MULT_3*/

     3028    10636    2           END; /*MULT_2*/
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:365  

     3029    10637    1       B_VREBL_COUNT=B_VREBL_COUNT+1;

  10637  1 000121   000000 054000 xsym               AOS     B_VREBL_COUNT

     3030    10638    1       B_VREBL_CUR$=PINCRW(B_VREBL_CUR$,SIZEW(B$VREBLCA));

  10638  1 000122   000000 236000 xsym               LDQ     B_VREBL_CUR$
         1 000123   000005 036003                    ADLQ    5,DU
         1 000124   000000 756000 xsym               STQ     B_VREBL_CUR$

     3031    10639    1       RETURN;

  10639  1 000125   000000 702200 xent               TSX2  ! X66_ARET
     3032    10640         /**/
     3033    10641    1   END XUO$VREBL_CONT_ADJ;
     3034    10642        %EOD;

PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:366  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$VREBL_CONT_ADJ.
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:367  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @P_DATA_TYPE               7-0-0/w PTR         r     1 @P_ELEMENTS
     6-0-0/w PTR         r     1 @P_ELEMENTS_ADJ_FLAG      11-0-0/w PTR         r     1 @P_MULTIPLIER_1
    10-0-0/w PTR         r     1 @P_MULTIPLIER_1_ADJ_FLAG
    13-0-0/w PTR         r     1 @P_MULTIPLIER_2
    12-0-0/w PTR         r     1 @P_MULTIPLIER_2_ADJ_FLAG
    15-0-0/w PTR         r     1 @P_MULTIPLIER_3
    14-0-0/w PTR         r     1 @P_MULTIPLIER_3_ADJ_FLAG
     4-0-0/w PTR         r     1 @P_OFFSET                  3-0-0/w PTR         r     1 @P_OFFSET_ADJ_FLAG
    *0-0-0/w UBIN        r     1 P_DATA_TYPE               *0-0-0/w UBIN        r     1 P_ELEMENTS
    *0-0-0/b BIT         r     1 P_ELEMENTS_ADJ_FLAG       *0-0-0/w UBIN        r     1 P_MULTIPLIER_1
    *0-0-0/b BIT         r     1 P_MULTIPLIER_1_ADJ_FLAG
    *0-0-0/w UBIN        r     1 P_MULTIPLIER_2
    *0-0-0/b BIT         r     1 P_MULTIPLIER_2_ADJ_FLAG
    *0-0-0/w UBIN        r     1 P_MULTIPLIER_3
    *0-0-0/b BIT         r     1 P_MULTIPLIER_3_ADJ_FLAG
    *0-0-0/w UBIN        r     1 P_OFFSET                  *0-0-0/b BIT         r     1 P_OFFSET_ADJ_FLAG
    16-0-0/w PTR         r     1 VREBL_CUR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_VREBL_BASE$              0-0-0/w SBIN        r     1 B_VREBL_COUNT
     0-0-0/w PTR         r     1 B_VREBL_CUR$               0-0-0/w PTR         r     1 B_VREBL_END$
     0-0-0/w SBIN        r     1 B_VREBL_PAGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:368  
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 B$VREBLCA


   Procedure XUO$VREBL_CONT_ADJ requires 86 words for executable code.
   Procedure XUO$VREBL_CONT_ADJ requires 16 words of local(AUTO) storage.
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:369  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:370  
          MINI XREF LISTING

B$VREBLCA
     10471**DCL     10618<<ASSIGN  10638--ASSIGN
B$VREBLCA.DATATYP
     10494**DCL     10621<<ASSIGN
B$VREBLCA.ELEMENTS
     10508**DCL     10511--REDEF   10623<<ASSIGN
B$VREBLCA.IELEMENTS
     10500**DCL     10622<<ASSIGN
B$VREBLCA.IOFFSET
     10472**DCL     10619<<ASSIGN
B$VREBLCA.MULT_A.I
     10547**DCL     10625<<ASSIGN  10629<<ASSIGN  10633<<ASSIGN
B$VREBLCA.MULT_A.N
     10552**DCL     10626<<ASSIGN  10630<<ASSIGN  10634<<ASSIGN
B$VREBLCA.OFFSET
     10484**DCL     10488--REDEF   10620<<ASSIGN
B$VREBLCA.OPNDTYP
     10515**DCL     10624<<ASSIGN
B_VREBL_BASE$
     10570**DCL     10612>>ASSIGN
B_VREBL_COUNT
     10573**DCL     10637<<ASSIGN  10637>>ASSIGN
B_VREBL_CUR$
     10571**DCL     10608>>IF      10612<<ASSIGN  10617>>ASSIGN  10638<<ASSIGN  10638>>ASSIGN
B_VREBL_END$
     10572**DCL     10608>>IF
B_VREBL_PAGE
     10574**DCL     10611<<ASSIGN  10611>>ASSIGN
P_DATA_TYPE
     10440**DCL       211--PROC    10621>>ASSIGN
P_ELEMENTS
     10442**DCL       211--PROC    10623>>ASSIGN
PL6.E3A0      #013=XUO$VREBL_CONT_ADJ File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:29 Page:371  
P_ELEMENTS_ADJ_FLAG
     10441**DCL       211--PROC    10622>>ASSIGN
P_MULTIPLIER_1
     10444**DCL       211--PROC    10626>>ASSIGN
P_MULTIPLIER_1_ADJ_FLAG
     10443**DCL       211--PROC    10625>>ASSIGN
P_MULTIPLIER_2
     10446**DCL       211--PROC    10630>>ASSIGN
P_MULTIPLIER_2_ADJ_FLAG
     10445**DCL       211--PROC    10627--IF      10629>>ASSIGN
P_MULTIPLIER_3
     10448**DCL       211--PROC    10634>>ASSIGN
P_MULTIPLIER_3_ADJ_FLAG
     10447**DCL       211--PROC    10631--IF      10633>>ASSIGN
P_OFFSET
     10439**DCL       211--PROC    10620>>ASSIGN
P_OFFSET_ADJ_FLAG
     10438**DCL       211--PROC    10619>>ASSIGN
VREBL_CUR$
     10578**DCL     10471--IMP-PTR 10617<<ASSIGN  10618>>ASSIGN  10619>>ASSIGN  10620>>ASSIGN  10621>>ASSIGN
     10622>>ASSIGN  10623>>ASSIGN  10624>>ASSIGN  10625>>ASSIGN  10626>>ASSIGN  10629>>ASSIGN  10630>>ASSIGN
     10633>>ASSIGN  10634>>ASSIGN
XUO$OUWRITE
     10579**DCL-ENT 10610--CALL

PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:372  
     3035        1        /*M*     XUO$VREBL_CONT_ET -- THIS MODULE WILL BUILD OBJECT UNIT
     3036        2                     VREBL CONTINUATION ENTRIES FOR ENUMERATED TYPES */
     3037        3        /*T***********************************************************/
     3038        4        /*T*                                                         */
     3039        5        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3040        6        /*T*                                                         */
     3041        7        /*T***********************************************************/
     3042        8        /*P*
     3043        9
     3044       10
     3045       11
     3046       12        NAME:  XUO$VREBL_CONT_ET
     3047       13
     3048       14        PURPOSE:  To build continuation entries in Variable Debug
     3049       15                  Record (Record Type 14) for variables with
     3050       16                  Data Type = Enumerated Type.
     3051       17
     3052       18        DESCRIPTION:  This routine builds continuation entries in
     3053       19             the Variable Debug Record (Type 14).  It is used to
     3054       20             show the correspondence between the value of an
     3055       21             enumerated type variable and the text string associated
     3056       22             with that value.  The continuation entry will describe
     3057       23             the minimum and maximum values of the enumerated type.
     3058       24             If this variable is also an array, this continuation
     3059       25             entry should be the first continuation entry.
     3060       26
     3061       27        */
     3062       28        /*D*
     3063       29
     3064       30        CALL:  CALL XUO$VREBL_CONT_ET (Minimum Value,
     3065       31                                Maximum Value,
     3066       32                                Name Pointer)
     3067       33
     3068       34        INPUT:
     3069       35            Minimum Value  UBIN ALIGNED
     3070       36                           The starting value for this variable.
     3071       37            Maximum Value  UBIN ALIGNED
PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:373  
     3072       38                           The maximum value for this variable.
     3073       39            Name Pointer   SBIN
     3074       40                           The word offset into the debug names
     3075       41                           record locating the start of the
     3076       42                           text strings for the values of this
     3077       43                           variable.  The text strings for the
     3078       44                           values must be in order in the debug
     3079       45                           names starting at Name Pointer.
     3080       46
     3081       47        OUTPUT:  none
     3082       48
     3083       49        B$OBJECT REFERENCE:  B$VREBLCET
     3084       50        */
     3085       51        /*B*
     3086       52
     3087       53        GLOBAL DATA:
     3088       54             B_VREBL_CUR$
     3089       55             B_VREBL_COUNT
     3090       56             B_VREBL_PAGE
     3091       57
     3092       58        INTERFACE:
     3093       59             XUO$OUWRITE
     3094       60
     3095       61        */
     3096       62
     3097       63        XUO$VREBL_CONT_ET: PROC(P_MINIMUM_VALUE,P_MAXIMUM_VALUE,P_NAME_POINTER);
     3098       64
     3099       65        %INCLUDE ZVA_SYSTEM_FILE;
     3100     6316         %PAGE (ARG=INCLUDES);

              6329    1   /*******************************************************************************
              6330    1   *                                                                              *
              6331    1   *        INCLUDES              INCLUDES                                            *
              6332    1   *                                                                              *
              6333    1   *******************************************************************************/

     3101     6337        %INCLUDE B$OBJECT_C;
PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:374  
     3102     9767        %INCLUDE XUO$OBJ_C;
     3103    10177
     3104    10178         %PAGE (ARG=SUBS);

             10191    1   /*******************************************************************************
             10192    1   *                                                                              *
             10193    1   *        SUBS              SUBS                                                  *
             10194    1   *                                                                              *
             10195    1   *******************************************************************************/

     3105    10199        %B$RECORDSUBS;
     3106    10227
     3107    10228        %PLIST;
     3108    10229         %PAGE (ARG=PARAMETERS);

             10242    1   /*******************************************************************************
             10243    1   *                                                                              *
             10244    1   *        PARAMETERS              PARAMETERS                                        *
             10245    1   *                                                                              *
             10246    1   *******************************************************************************/

     3109    10250    1   DCL P_MINIMUM_VALUE UBIN ALIGNED;
     3110    10251    1   DCL P_MAXIMUM_VALUE UBIN ALIGNED;
     3111    10252    1   DCL P_NAME_POINTER SBIN;
     3112    10253
     3113    10254        %PAGE (ARG=VREBLC DATA);

             10267    1   /*******************************************************************************
             10268    1   *                                                                              *
             10269    1   *        VREBLC DATA              VREBLC DATA                                      *
             10270    1   *                                                                              *
             10271    1   *******************************************************************************/

     3114    10275        %B$VREBLCET (STCLASS="BASED(VREBL_CUR$)");
     3115    10298        %B_VREBL_POINTERS;
     3116    10318    1   DCL VREBL_CUR$ PTR;
     3117    10319        %PLIST;
PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:375  
     3118    10320
     3119    10321        %PAGE (ARG=ENTRY DCL);

             10334    1   /*******************************************************************************
             10335    1   *                                                                              *
             10336    1   *        ENTRY DCL              ENTRY DCL                                          *
             10337    1   *                                                                              *
             10338    1   *******************************************************************************/

     3120    10342    1   DCL XUO$OUWRITE ENTRY(2);
     3121    10343
     3122    10344        %PAGE (ARG=XUO$VREBL_CONT_ET);

             10357    1   /*******************************************************************************
             10358    1   *                                                                              *
             10359    1   *        XUO$VREBL_CONT_ET              XUO$VREBL_CONT_ET                          *
             10360    1   *                                                                              *
             10361    1   *******************************************************************************/

     3123    10365
     3124    10366         /* The following section will check to see if the passed
     3125    10367            information will fit in the current record.  If not the
     3126    10368         current record will be written and the pointer reinitialized
     3127    10369         then the text will be moved to the buffer.
     3128    10370         NOTE:    This should not happen but better safe than sorry.
     3129    10371         */
     3130    10372    1       IF B_VREBL_CUR$>=B_VREBL_END$ THEN
     3131    10373    2       DO;
     3132    10374    2           CALL XUO$OUWRITE(%TYPVREBL);
     3133    10375    2           B_VREBL_PAGE=B_VREBL_PAGE+1;
     3134    10376    2           B_VREBL_CUR$=B_VREBL_BASE$;
     3135    10377    2           END;
     3136    10378         /*   The following will build the continuation entry. */
     3137    10379
     3138    10380    1       VREBL_CUR$=B_VREBL_CUR$;
     3139    10381    1       B$VREBLCET='0'B;
     3140    10382    1       B$VREBLCET.MIN_VALUE = P_MINIMUM_VALUE;
PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:376  
     3141    10383    1       B$VREBLCET.MAX_VALUE = P_MAXIMUM_VALUE;
     3142    10384    1       B$VREBLCET.NPOINTER = P_NAME_POINTER;
     3143    10385    1       B_VREBL_COUNT=B_VREBL_COUNT+1;
     3144    10386    1       B_VREBL_CUR$=PINCRW(B_VREBL_CUR$,SIZEW(B$VREBLCET));
     3145    10387    1       RETURN;
     3146    10388
     3147    10389    1   END XUO$VREBL_CONT_ET;
     3148    10390        %EOD;

PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:377  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$VREBL_CONT_ET.

   Procedure XUO$VREBL_CONT_ET requires 31 words for executable code.
   Procedure XUO$VREBL_CONT_ET requires 8 words of local(AUTO) storage.

PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:378  

 Object Unit name= XUO$VREBL_CONT_ET                          File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:30:56.84 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    31     37  XUO$VREBL_CONT_ET
    2  RoData even  none     2      2  XUO$VREBL_CONT_ET

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        3  XUO$VREBL_CONT_ET

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_VREBL_BASE$                         B_VREBL_CUR$
     B_VREBL_END$                          B_VREBL_COUNT                         B_VREBL_PAGE
     B_VECTNIL
PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:379  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:380  


     3035        1        /*M*     XUO$VREBL_CONT_ET -- THIS MODULE WILL BUILD OBJECT UNIT
     3036        2                     VREBL CONTINUATION ENTRIES FOR ENUMERATED TYPES */
     3037        3        /*T***********************************************************/
     3038        4        /*T*                                                         */
     3039        5        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3040        6        /*T*                                                         */
     3041        7        /*T***********************************************************/
     3042        8        /*P*
     3043        9
     3044       10
     3045       11
     3046       12        NAME:  XUO$VREBL_CONT_ET
     3047       13
     3048       14        PURPOSE:  To build continuation entries in Variable Debug
     3049       15                  Record (Record Type 14) for variables with
     3050       16                  Data Type = Enumerated Type.
     3051       17
     3052       18        DESCRIPTION:  This routine builds continuation entries in
     3053       19             the Variable Debug Record (Type 14).  It is used to
     3054       20             show the correspondence between the value of an
     3055       21             enumerated type variable and the text string associated
     3056       22             with that value.  The continuation entry will describe
     3057       23             the minimum and maximum values of the enumerated type.
     3058       24             If this variable is also an array, this continuation
     3059       25             entry should be the first continuation entry.
     3060       26
     3061       27        */
     3062       28        /*D*
     3063       29
     3064       30        CALL:  CALL XUO$VREBL_CONT_ET (Minimum Value,
     3065       31                                Maximum Value,
     3066       32                                Name Pointer)
     3067       33
     3068       34        INPUT:
     3069       35            Minimum Value  UBIN ALIGNED
     3070       36                           The starting value for this variable.
PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:381  
     3071       37            Maximum Value  UBIN ALIGNED
     3072       38                           The maximum value for this variable.
     3073       39            Name Pointer   SBIN
     3074       40                           The word offset into the debug names
     3075       41                           record locating the start of the
     3076       42                           text strings for the values of this
     3077       43                           variable.  The text strings for the
     3078       44                           values must be in order in the debug
     3079       45                           names starting at Name Pointer.
     3080       46
     3081       47        OUTPUT:  none
     3082       48
     3083       49        B$OBJECT REFERENCE:  B$VREBLCET
     3084       50        */
     3085       51        /*B*
     3086       52
     3087       53        GLOBAL DATA:
     3088       54             B_VREBL_CUR$
     3089       55             B_VREBL_COUNT
     3090       56             B_VREBL_PAGE
     3091       57
     3092       58        INTERFACE:
     3093       59             XUO$OUWRITE
     3094       60
     3095       61        */
     3096       62
     3097       63        XUO$VREBL_CONT_ET: PROC(P_MINIMUM_VALUE,P_MAXIMUM_VALUE,P_NAME_POINTER);

     63  1 000000   000000 700200 xent  XUO$VREBL_C* TSX0  ! X66_AUTO_3
         1 000001   000010 000003                    ZERO    8,3

     3098       64
     3099       65        %INCLUDE ZVA_SYSTEM_FILE;
     3100     6316         %PAGE (ARG=INCLUDES);

              6329    1   /*******************************************************************************
              6330    1   *                                                                              *
PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:382  
              6331    1   *        INCLUDES              INCLUDES                                           *
              6332    1   *                                                                              *
              6333    1   *******************************************************************************/

     3101     6337        %INCLUDE B$OBJECT_C;
     3102     9767        %INCLUDE XUO$OBJ_C;
     3103    10177
     3104    10178         %PAGE (ARG=SUBS);

             10191    1   /*******************************************************************************
             10192    1   *                                                                              *
             10193    1   *        SUBS              SUBS                                                  *
             10194    1   *                                                                              *
             10195    1   *******************************************************************************/

     3105    10199        %B$RECORDSUBS;
     3106    10227
     3107    10228        %PLIST;
     3108    10229         %PAGE (ARG=PARAMETERS);

             10242    1   /*******************************************************************************
             10243    1   *                                                                              *
             10244    1   *        PARAMETERS              PARAMETERS                                       *
             10245    1   *                                                                              *
             10246    1   *******************************************************************************/

     3109    10250    1   DCL P_MINIMUM_VALUE UBIN ALIGNED;
     3110    10251    1   DCL P_MAXIMUM_VALUE UBIN ALIGNED;
     3111    10252    1   DCL P_NAME_POINTER SBIN;
     3112    10253
     3113    10254        %PAGE (ARG=VREBLC DATA);

             10267    1   /*******************************************************************************
             10268    1   *                                                                              *
             10269    1   *        VREBLC DATA              VREBLC DATA                                     *
             10270    1   *                                                                              *
             10271    1   *******************************************************************************/
PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:383  

     3114    10275        %B$VREBLCET (STCLASS="BASED(VREBL_CUR$)");
     3115    10298        %B_VREBL_POINTERS;
     3116    10318    1   DCL VREBL_CUR$ PTR;
     3117    10319        %PLIST;
     3118    10320
     3119    10321        %PAGE (ARG=ENTRY DCL);

             10334    1   /*******************************************************************************
             10335    1   *                                                                              *
             10336    1   *        ENTRY DCL              ENTRY DCL                                         *
             10337    1   *                                                                              *
             10338    1   *******************************************************************************/

     3120    10342    1   DCL XUO$OUWRITE ENTRY(2);
     3121    10343
     3122    10344        %PAGE (ARG=XUO$VREBL_CONT_ET);

             10357    1   /*******************************************************************************
             10358    1   *                                                                              *
             10359    1   *        XUO$VREBL_CONT_ET              XUO$VREBL_CONT_ET                         *
             10360    1   *                                                                              *
             10361    1   *******************************************************************************/

     3123    10365
     3124    10366         /* The following section will check to see if the passed
     3125    10367            information will fit in the current record.  If not the
     3126    10368         current record will be written and the pointer reinitialized
     3127    10369         then the text will be moved to the buffer.
     3128    10370         NOTE:    This should not happen but better safe than sorry.
     3129    10371         */
     3130    10372    1       IF B_VREBL_CUR$>=B_VREBL_END$ THEN

  10372  1 000002   000000 236000 xsym               LDQ     B_VREBL_CUR$
         1 000003   000000 116000 xsym               CMPQ    B_VREBL_END$
         1 000004   000014 602000 1                  TNC     s:10380

PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:384  
     3131    10373    2       DO;

     3132    10374    2           CALL XUO$OUWRITE(%TYPVREBL);

  10374  1 000005   000001 630400 2                  EPPR0   1
         1 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000007   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000010   000000 011000                    NOP     0

     3133    10375    2           B_VREBL_PAGE=B_VREBL_PAGE+1;

  10375  1 000011   000000 054000 xsym               AOS     B_VREBL_PAGE

     3134    10376    2           B_VREBL_CUR$=B_VREBL_BASE$;

  10376  1 000012   000000 236000 xsym               LDQ     B_VREBL_BASE$
         1 000013   000000 756000 xsym               STQ     B_VREBL_CUR$

     3135    10377    2           END;

     3136    10378         /*   The following will build the continuation entry. */
     3137    10379
     3138    10380    1       VREBL_CUR$=B_VREBL_CUR$;

  10380  1 000014   200006 756100                    STQ     VREBL_CUR$,,AUTO

     3139    10381    1       B$VREBLCET='0'B;

  10381  1 000015   200006 470500                    LDP0    VREBL_CUR$,,AUTO
         1 000016   000100 100400                    MLR     fill='000'O
         1 000017   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000020   000000 000024                    ADSC9   0,,PR0                   cn=0,n=20

     3140    10382    1       B$VREBLCET.MIN_VALUE = P_MINIMUM_VALUE;

  10382  1 000021   200003 471500                    LDP1    @P_MINIMUM_VALUE,,AUTO
         1 000022   100000 235100                    LDA     0,,PR1
PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:385  
         1 000023   000001 755100                    STA     1,,PR0

     3141    10383    1       B$VREBLCET.MAX_VALUE = P_MAXIMUM_VALUE;

  10383  1 000024   200004 473500                    LDP3    @P_MAXIMUM_VALUE,,AUTO
         1 000025   300000 235100                    LDA     0,,PR3
         1 000026   000002 755100                    STA     2,,PR0

     3142    10384    1       B$VREBLCET.NPOINTER = P_NAME_POINTER;

  10384  1 000027   200005 474500                    LDP4    @P_NAME_POINTER,,AUTO
         1 000030   400000 720100                    LXL0    0,,PR4
         1 000031   000003 740100                    STX0    3,,PR0

     3143    10385    1       B_VREBL_COUNT=B_VREBL_COUNT+1;

  10385  1 000032   000000 054000 xsym               AOS     B_VREBL_COUNT

     3144    10386    1       B_VREBL_CUR$=PINCRW(B_VREBL_CUR$,SIZEW(B$VREBLCET));

  10386  1 000033   000000 236000 xsym               LDQ     B_VREBL_CUR$
         1 000034   000005 036003                    ADLQ    5,DU
         1 000035   000000 756000 xsym               STQ     B_VREBL_CUR$

     3145    10387    1       RETURN;

  10387  1 000036   000000 702200 xent               TSX2  ! X66_ARET
     3146    10388
     3147    10389    1   END XUO$VREBL_CONT_ET;
     3148    10390        %EOD;

PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:386  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$VREBL_CONT_ET.
PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:387  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @P_MAXIMUM_VALUE           3-0-0/w PTR         r     1 @P_MINIMUM_VALUE
     5-0-0/w PTR         r     1 @P_NAME_POINTER           *0-0-0/w UBIN        r     1 P_MAXIMUM_VALUE
    *0-0-0/w UBIN        r     1 P_MINIMUM_VALUE           *0-0-0/w SBIN        r     1 P_NAME_POINTER
     6-0-0/w PTR         r     1 VREBL_CUR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_VREBL_BASE$              0-0-0/w SBIN        r     1 B_VREBL_COUNT
     0-0-0/w PTR         r     1 B_VREBL_CUR$               0-0-0/w PTR         r     1 B_VREBL_END$
     0-0-0/w SBIN        r     1 B_VREBL_PAGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 B$VREBLCET


   Procedure XUO$VREBL_CONT_ET requires 31 words for executable code.
   Procedure XUO$VREBL_CONT_ET requires 8 words of local(AUTO) storage.
PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:388  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #014=XUO$VREBL_CONT_ET File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:30 Page:389  
          MINI XREF LISTING

B$VREBLCET
     10276**DCL     10381<<ASSIGN  10386--ASSIGN
B$VREBLCET.MAX_VALUE
     10287**DCL     10383<<ASSIGN
B$VREBLCET.MIN_VALUE
     10284**DCL     10382<<ASSIGN
B$VREBLCET.NPOINTER
     10289**DCL     10384<<ASSIGN
B_VREBL_BASE$
     10310**DCL     10376>>ASSIGN
B_VREBL_COUNT
     10313**DCL     10385<<ASSIGN  10385>>ASSIGN
B_VREBL_CUR$
     10311**DCL     10372>>IF      10376<<ASSIGN  10380>>ASSIGN  10386<<ASSIGN  10386>>ASSIGN
B_VREBL_END$
     10312**DCL     10372>>IF
B_VREBL_PAGE
     10314**DCL     10375<<ASSIGN  10375>>ASSIGN
P_MAXIMUM_VALUE
     10251**DCL        63--PROC    10383>>ASSIGN
P_MINIMUM_VALUE
     10250**DCL        63--PROC    10382>>ASSIGN
P_NAME_POINTER
     10252**DCL        63--PROC    10384>>ASSIGN
VREBL_CUR$
     10318**DCL     10276--IMP-PTR 10380<<ASSIGN  10381>>ASSIGN  10382>>ASSIGN  10383>>ASSIGN  10384>>ASSIGN
XUO$OUWRITE
     10342**DCL-ENT 10374--CALL

PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:390  
     3149        1        /*M*     XUO$VREBL_CONT_SET -- THIS MODULE WILL BUILD CONTINUATION
     3150        2                    ENTRIES FOR FOR VARIABLES WITH DATA TYPE = SET.  */
     3151        3        /*T***********************************************************/
     3152        4        /*T*                                                         */
     3153        5        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3154        6        /*T*                                                         */
     3155        7        /*T***********************************************************/
     3156        8        /*P*
     3157        9
     3158       10
     3159       11        NAME:  XUO$VREBL_CONT_SET
     3160       12
     3161       13        PURPOSE:  To build continuation entries in the Variable
     3162       14                  Debug Record (Record Type 14) for variables
     3163       15                  with Data Type = Set.
     3164       16
     3165       17        DESCRIPTION:  This routine builds continuation entries in
     3166       18             the Variable Debug Record.  It is used for FPL status
     3167       19             variables and for variables with Data Type = SET.  The
     3168       20             continuation entry locates the text strings associated
     3169       21             with the true and false settings of each bit.  If this
     3170       22             variable is also an array, this continuation entry
     3171       23             should be the first continuation entry.
     3172       24
     3173       25        */
     3174       26        /*D*
     3175       27
     3176       28        CALL:  CALL XUO$VREBL_CONT_SET (Significant Bits,
     3177       29                                 Data Type,
     3178       30                                 Minimum Value,
     3179       31                                 Pointer True,
     3180       32                                 Pointer False)
     3181       33
     3182       34        INPUT:
     3183       35            Significant Bits    UBIN ALIGNED
     3184       36                                The number of significant bits in
     3185       37                                the value of this data item if the
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:391  
     3186       38                                data type of the set is enumerated
     3187       39                                type.  For other data types, Significant
     3188       40                                Bits contains the maximum value for the
     3189       41                                Set.
     3190       42            Data Type           UBIN ALIGNED
     3191       43                                The data type of the elements of the
     3192       44                                Set.  The defined data type codes are
     3193       45                                as follows:
     3194       46                      0              Type not specified.
     3195       47                      1              Real binary fixed single precision
     3196       48                                     (SBIN, INTEGER, COMP-6).
     3197       49                      2              Real binary fixed double precision.
     3198       50                      3              Real binary float single precision
     3199       51                                     (REAL).
     3200       52                      4              Real binary float double precision
     3201       53                                     (DOUBLE PRECISION).
     3202       54                      5              Complex binary fixed single precision.
     3203       55                      6              Complex binary fixed double precision.
     3204       56                      7              Complex binary float single precision
     3205       57                                     (COMPLEX).
     3206       58                      8              Complex binary float double precision
     3207       59                                     (DOUBLE COMPLEX).
     3208       60                      9              Packed decimal fixed, lead ASCII sign
     3209       61                                     (COMP-4).
     3210       62                     10              Packed decimal float.
     3211       63                     11              Packed decimal fixed complex,
     3212       64                                     lead ASCII sign.
     3213       65                     12              Packed decimal float complex.
     3214       66                     13              Pointer
     3215       67                     14              Offset
     3216       68                     15              Label
     3217       69                     16              Entry
     3218       70                     17              Structure
     3219       71                     18              Area
     3220       72                     19              Bit string
     3221       73                     20              Varying bit string
     3222       74                     21              Character string
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:392  
     3223       75                     22              Varying character string
     3224       76                     23              File
     3225       77                     24              UBIN
     3226       78                     25              Packed decimal fixed, trail ASCII sign
     3227       79                                     (COMP, COMP-4).
     3228       80                     26              Adjustable character string
     3229       81                     27              Adjustable bit string
     3230       82                     28              EPTR
     3231       83                     29              16 bit signed integer (COMP-1).
     3232       84                     30              32 bit signed integer (COMP-2).
     3233       85                     31              Packed decimal fixed, trail EBCDIC sign
     3234       86                                     (COMP-3).
     3235       87                     32              INDEX-1
     3236       88                     33              INDEX-2
     3237       89                     34              FORTRAN Every
     3238       90                     35              FORTRAN Logical
     3239       91                     36              FORTRAN Any (Never Passed)
     3240       92                     37              FORTRAN Label
     3241       93                     38              FORTRAN UCB
     3242       94                     39              Intrinsic Constant
     3243       95                     40              Packed decimal fixed, no sign (COMP,
     3244       96                                     COMP-3, COMP-4).
     3245       97                     41              Unpacked decimal fixed, no sign
     3246       98                     42              Unpacked decimal fixed lead sign
     3247       99                     43              Unpacked decimal fixed trail sign
     3248      100                     44              Unpacked decimal fixed lead over
     3249      101                                     punched sign
     3250      102                     45              Unpacked decimal fixed trail over
     3251      103                                     punched sign
     3252      104                     46              Adjustable structure
     3253      105                     47              Vector
     3254      106                     48              Remember
     3255      107                     49              Descriptor
     3256      108                     50              Unpacked decimal float
     3257      109                     51              Packed decimal fixed,
     3258      110                                     Lead EBCDIC sign
     3259      111                     52              Enumerated Type
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:393  
     3260      112                     53              Set
     3261      113                     54 - 59         Reserved
     3262      114                     60              Null entry
     3263      115                     61              Virtual array dimension entry
     3264      116                     62              Array dimension entry
     3265      117                     63              Reserved
     3266      118            Minimum Value       UBIN ALIGNED
     3267      119                                Contains the minimum value for an
     3268      120                                element of the set.
     3269      121            Pointer True        SBIN ALIGNED
     3270      122                                Word offset into the Debug Names Record
     3271      123                                (Type 15) locating the start of the
     3272      124                                text string for the true value of each
     3273      125                                bit in the Set.  The text strings for
     3274      126                                all significant bits must be in order in
     3275      127                                the debug names starting at Pointer True.
     3276      128                                A value of -1 means not to print the
     3277      129                                text for the true value of each bit.
     3278      130            Pointer False       SBIN ALIGNED
     3279      131                                Word offset into the Debug Names Record
     3280      132                                (Type 15) locating the start of the
     3281      133                                text string for the false value of
     3282      134                                each bit in the Set.  The text strings
     3283      135                                for all significant bits must be in
     3284      136                                order in the Debug names starting at
     3285      137                                Pointer False.  A value of -1 means not
     3286      138                                to print the text for the false value of
     3287      139                                each bit.
     3288      140
     3289      141        OUTPUT:  none
     3290      142
     3291      143        B$OBJECT REFERENCE:  B$VREBLCSET
     3292      144        */
     3293      145        /*B*
     3294      146
     3295      147        GLOBAL DATA:
     3296      148            B_VREBL_CUR$
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:394  
     3297      149            B_VREBL_COUNT
     3298      150            B_VREBL_PAGE
     3299      151
     3300      152        INTERFACE:
     3301      153
     3302      154             XUO$OUWRITE
     3303      155        */
     3304      156
     3305      157
     3306      158        XUO$VREBL_CONT_SET: PROC(P_SIG_BITS,P_DATA_TYPE,P_MINIMUM_VALUE,
     3307      159               P_NAME_POINTER_TRUE,P_NAME_POINTER_FALSE);
     3308      160
     3309      161        %INCLUDE ZVA_SYSTEM_FILE;
     3310     6412            %PAGE (ARG=INCLUDES);

              6425    1   /*******************************************************************************
              6426    1   *                                                                              *
              6427    1   *        INCLUDES              INCLUDES                                            *
              6428    1   *                                                                              *
              6429    1   *******************************************************************************/

     3311     6433        %INCLUDE B$OBJECT_C;
     3312     9863        %INCLUDE XUO$OBJ_C;
     3313    10273            %PAGE (ARG=SUBS);

             10286    1   /*******************************************************************************
             10287    1   *                                                                              *
             10288    1   *        SUBS              SUBS                                                  *
             10289    1   *                                                                              *
             10290    1   *******************************************************************************/

     3314    10294        %B$RECORDSUBS;
     3315    10322        %PLIST;
     3316    10323
     3317    10324            %PAGE (ARG=PARAMETERS);

             10337    1   /*******************************************************************************
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:395  
             10338    1   *                                                                              *
             10339    1   *        PARAMETERS              PARAMETERS                                        *
             10340    1   *                                                                              *
             10341    1   *******************************************************************************/

     3318    10345    1   DCL P_SIG_BITS UBIN;
     3319    10346    1   DCL P_DATA_TYPE UBIN;
     3320    10347    1   DCL P_MINIMUM_VALUE UBIN;
     3321    10348    1   DCL P_NAME_POINTER_TRUE SBIN;
     3322    10349    1   DCL P_NAME_POINTER_FALSE SBIN;
     3323    10350
     3324    10351        %PAGE (ARG=VREBLCSET DATA);

             10364    1   /*******************************************************************************
             10365    1   *                                                                              *
             10366    1   *        VREBLCSET DATA              VREBLCSET DATA                                *
             10367    1   *                                                                              *
             10368    1   *******************************************************************************/

     3325    10372        %B$VREBLCSET (STCLASS="BASED(VREBL_CUR$)");
     3326    10415        %B_VREBL_POINTERS;
     3327    10435    1   DCL VREBL_CUR$ PTR;
     3328    10436        %PLIST;
     3329    10437
     3330    10438        %PAGE (ARG=ENTRY DCL);

             10451    1   /*******************************************************************************
             10452    1   *                                                                              *
             10453    1   *        ENTRY DCL              ENTRY DCL                                          *
             10454    1   *                                                                              *
             10455    1   *******************************************************************************/

     3331    10459    1   DCL XUO$OUWRITE ENTRY(2);
     3332    10460        %PAGE (ARG=XUO$VREBL_CONT_SET);

             10473    1   /*******************************************************************************
             10474    1   *                                                                              *
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:396  
             10475    1   *        XUO$VREBL_CONT_SET              XUO$VREBL_CONT_SET                        *
             10476    1   *                                                                              *
             10477    1   *******************************************************************************/

     3333    10481         /*   The following section will check to see if the passed
     3334    10482            information will fit in the current record.  If not, the
     3335    10483            current record will be written and the pointer reinitialized
     3336    10484            then the text will be moved to the buffer.
     3337    10485            NOTE:    This should not happen but better safe than sorry.
     3338    10486            */
     3339    10487    1       IF B_VREBL_CUR$>=B_VREBL_END$ THEN
     3340    10488    2       DO;
     3341    10489    2           CALL XUO$OUWRITE(%TYPVREBL);
     3342    10490    2           B_VREBL_PAGE=B_VREBL_PAGE+1;
     3343    10491    2           B_VREBL_CUR$=B_VREBL_BASE$;
     3344    10492    2           END;
     3345    10493
     3346    10494         /*  The following will build the continuation entry. */
     3347    10495    1       VREBL_CUR$=B_VREBL_CUR$;
     3348    10496    1       B$VREBLCSET='0'B;
     3349    10497    1       B$VREBLCSET.SIG_BITS = P_SIG_BITS;
     3350    10498    1       B$VREBLCSET.DATATYP=P_DATA_TYPE;
     3351    10499    1       B$VREBLCSET.MIN_VALUE = P_MINIMUM_VALUE;
     3352    10500    1       B$VREBLCSET.NPOINTER_TRUE = P_NAME_POINTER_TRUE;
     3353    10501    1       B$VREBLCSET.NPOINTER_FALSE = P_NAME_POINTER_FALSE;
     3354    10502    1       B_VREBL_COUNT=B_VREBL_COUNT+1;
     3355    10503    1       B_VREBL_CUR$=PINCRW(B_VREBL_CUR$,SIZEW(B$VREBLCSET));
     3356    10504    1       RETURN;
     3357    10505
     3358    10506    1   END XUO$VREBL_CONT_SET;
     3359    10507        %EOD;

PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:397  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$VREBL_CONT_SET.

   Procedure XUO$VREBL_CONT_SET requires 40 words for executable code.
   Procedure XUO$VREBL_CONT_SET requires 10 words of local(AUTO) storage.

PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:398  

 Object Unit name= XUO$VREBL_CONT_SET                         File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:31:33.84 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    40     50  XUO$VREBL_CONT_SET
    2  RoData even  none     2      2  XUO$VREBL_CONT_SET

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        5  XUO$VREBL_CONT_SET

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_VREBL_BASE$                         B_VREBL_CUR$
     B_VREBL_END$                          B_VREBL_COUNT                         B_VREBL_PAGE
     B_VECTNIL
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:399  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:400  


     3149        1        /*M*     XUO$VREBL_CONT_SET -- THIS MODULE WILL BUILD CONTINUATION
     3150        2                    ENTRIES FOR FOR VARIABLES WITH DATA TYPE = SET.  */
     3151        3        /*T***********************************************************/
     3152        4        /*T*                                                         */
     3153        5        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3154        6        /*T*                                                         */
     3155        7        /*T***********************************************************/
     3156        8        /*P*
     3157        9
     3158       10
     3159       11        NAME:  XUO$VREBL_CONT_SET
     3160       12
     3161       13        PURPOSE:  To build continuation entries in the Variable
     3162       14                  Debug Record (Record Type 14) for variables
     3163       15                  with Data Type = Set.
     3164       16
     3165       17        DESCRIPTION:  This routine builds continuation entries in
     3166       18             the Variable Debug Record.  It is used for FPL status
     3167       19             variables and for variables with Data Type = SET.  The
     3168       20             continuation entry locates the text strings associated
     3169       21             with the true and false settings of each bit.  If this
     3170       22             variable is also an array, this continuation entry
     3171       23             should be the first continuation entry.
     3172       24
     3173       25        */
     3174       26        /*D*
     3175       27
     3176       28        CALL:  CALL XUO$VREBL_CONT_SET (Significant Bits,
     3177       29                                 Data Type,
     3178       30                                 Minimum Value,
     3179       31                                 Pointer True,
     3180       32                                 Pointer False)
     3181       33
     3182       34        INPUT:
     3183       35            Significant Bits    UBIN ALIGNED
     3184       36                                The number of significant bits in
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:401  
     3185       37                                the value of this data item if the
     3186       38                                data type of the set is enumerated
     3187       39                                type.  For other data types, Significant
     3188       40                                Bits contains the maximum value for the
     3189       41                                Set.
     3190       42            Data Type           UBIN ALIGNED
     3191       43                                The data type of the elements of the
     3192       44                                Set.  The defined data type codes are
     3193       45                                as follows:
     3194       46                      0              Type not specified.
     3195       47                      1              Real binary fixed single precision
     3196       48                                     (SBIN, INTEGER, COMP-6).
     3197       49                      2              Real binary fixed double precision.
     3198       50                      3              Real binary float single precision
     3199       51                                     (REAL).
     3200       52                      4              Real binary float double precision
     3201       53                                     (DOUBLE PRECISION).
     3202       54                      5              Complex binary fixed single precision.
     3203       55                      6              Complex binary fixed double precision.
     3204       56                      7              Complex binary float single precision
     3205       57                                     (COMPLEX).
     3206       58                      8              Complex binary float double precision
     3207       59                                     (DOUBLE COMPLEX).
     3208       60                      9              Packed decimal fixed, lead ASCII sign
     3209       61                                     (COMP-4).
     3210       62                     10              Packed decimal float.
     3211       63                     11              Packed decimal fixed complex,
     3212       64                                     lead ASCII sign.
     3213       65                     12              Packed decimal float complex.
     3214       66                     13              Pointer
     3215       67                     14              Offset
     3216       68                     15              Label
     3217       69                     16              Entry
     3218       70                     17              Structure
     3219       71                     18              Area
     3220       72                     19              Bit string
     3221       73                     20              Varying bit string
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:402  
     3222       74                     21              Character string
     3223       75                     22              Varying character string
     3224       76                     23              File
     3225       77                     24              UBIN
     3226       78                     25              Packed decimal fixed, trail ASCII sign
     3227       79                                     (COMP, COMP-4).
     3228       80                     26              Adjustable character string
     3229       81                     27              Adjustable bit string
     3230       82                     28              EPTR
     3231       83                     29              16 bit signed integer (COMP-1).
     3232       84                     30              32 bit signed integer (COMP-2).
     3233       85                     31              Packed decimal fixed, trail EBCDIC sign
     3234       86                                     (COMP-3).
     3235       87                     32              INDEX-1
     3236       88                     33              INDEX-2
     3237       89                     34              FORTRAN Every
     3238       90                     35              FORTRAN Logical
     3239       91                     36              FORTRAN Any (Never Passed)
     3240       92                     37              FORTRAN Label
     3241       93                     38              FORTRAN UCB
     3242       94                     39              Intrinsic Constant
     3243       95                     40              Packed decimal fixed, no sign (COMP,
     3244       96                                     COMP-3, COMP-4).
     3245       97                     41              Unpacked decimal fixed, no sign
     3246       98                     42              Unpacked decimal fixed lead sign
     3247       99                     43              Unpacked decimal fixed trail sign
     3248      100                     44              Unpacked decimal fixed lead over
     3249      101                                     punched sign
     3250      102                     45              Unpacked decimal fixed trail over
     3251      103                                     punched sign
     3252      104                     46              Adjustable structure
     3253      105                     47              Vector
     3254      106                     48              Remember
     3255      107                     49              Descriptor
     3256      108                     50              Unpacked decimal float
     3257      109                     51              Packed decimal fixed,
     3258      110                                     Lead EBCDIC sign
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:403  
     3259      111                     52              Enumerated Type
     3260      112                     53              Set
     3261      113                     54 - 59         Reserved
     3262      114                     60              Null entry
     3263      115                     61              Virtual array dimension entry
     3264      116                     62              Array dimension entry
     3265      117                     63              Reserved
     3266      118            Minimum Value       UBIN ALIGNED
     3267      119                                Contains the minimum value for an
     3268      120                                element of the set.
     3269      121            Pointer True        SBIN ALIGNED
     3270      122                                Word offset into the Debug Names Record
     3271      123                                (Type 15) locating the start of the
     3272      124                                text string for the true value of each
     3273      125                                bit in the Set.  The text strings for
     3274      126                                all significant bits must be in order in
     3275      127                                the debug names starting at Pointer True.
     3276      128                                A value of -1 means not to print the
     3277      129                                text for the true value of each bit.
     3278      130            Pointer False       SBIN ALIGNED
     3279      131                                Word offset into the Debug Names Record
     3280      132                                (Type 15) locating the start of the
     3281      133                                text string for the false value of
     3282      134                                each bit in the Set.  The text strings
     3283      135                                for all significant bits must be in
     3284      136                                order in the Debug names starting at
     3285      137                                Pointer False.  A value of -1 means not
     3286      138                                to print the text for the false value of
     3287      139                                each bit.
     3288      140
     3289      141        OUTPUT:  none
     3290      142
     3291      143        B$OBJECT REFERENCE:  B$VREBLCSET
     3292      144        */
     3293      145        /*B*
     3294      146
     3295      147        GLOBAL DATA:
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:404  
     3296      148            B_VREBL_CUR$
     3297      149            B_VREBL_COUNT
     3298      150            B_VREBL_PAGE
     3299      151
     3300      152        INTERFACE:
     3301      153
     3302      154             XUO$OUWRITE
     3303      155        */
     3304      156
     3305      157
     3306      158        XUO$VREBL_CONT_SET: PROC(P_SIG_BITS,P_DATA_TYPE,P_MINIMUM_VALUE,

    158  1 000000   000000 700200 xent  XUO$VREBL_C* TSX0  ! X66_AUTO_5
         1 000001   000012 000005                    ZERO    10,5

     3307      159               P_NAME_POINTER_TRUE,P_NAME_POINTER_FALSE);
     3308      160
     3309      161        %INCLUDE ZVA_SYSTEM_FILE;
     3310     6412            %PAGE (ARG=INCLUDES);

              6425    1   /*******************************************************************************
              6426    1   *                                                                              *
              6427    1   *        INCLUDES              INCLUDES                                           *
              6428    1   *                                                                              *
              6429    1   *******************************************************************************/

     3311     6433        %INCLUDE B$OBJECT_C;
     3312     9863        %INCLUDE XUO$OBJ_C;
     3313    10273            %PAGE (ARG=SUBS);

             10286    1   /*******************************************************************************
             10287    1   *                                                                              *
             10288    1   *        SUBS              SUBS                                                  *
             10289    1   *                                                                              *
             10290    1   *******************************************************************************/

     3314    10294        %B$RECORDSUBS;
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:405  
     3315    10322        %PLIST;
     3316    10323
     3317    10324            %PAGE (ARG=PARAMETERS);

             10337    1   /*******************************************************************************
             10338    1   *                                                                              *
             10339    1   *        PARAMETERS              PARAMETERS                                       *
             10340    1   *                                                                              *
             10341    1   *******************************************************************************/

     3318    10345    1   DCL P_SIG_BITS UBIN;
     3319    10346    1   DCL P_DATA_TYPE UBIN;
     3320    10347    1   DCL P_MINIMUM_VALUE UBIN;
     3321    10348    1   DCL P_NAME_POINTER_TRUE SBIN;
     3322    10349    1   DCL P_NAME_POINTER_FALSE SBIN;
     3323    10350
     3324    10351        %PAGE (ARG=VREBLCSET DATA);

             10364    1   /*******************************************************************************
             10365    1   *                                                                              *
             10366    1   *        VREBLCSET DATA              VREBLCSET DATA                               *
             10367    1   *                                                                              *
             10368    1   *******************************************************************************/

     3325    10372        %B$VREBLCSET (STCLASS="BASED(VREBL_CUR$)");
     3326    10415        %B_VREBL_POINTERS;
     3327    10435    1   DCL VREBL_CUR$ PTR;
     3328    10436        %PLIST;
     3329    10437
     3330    10438        %PAGE (ARG=ENTRY DCL);

             10451    1   /*******************************************************************************
             10452    1   *                                                                              *
             10453    1   *        ENTRY DCL              ENTRY DCL                                         *
             10454    1   *                                                                              *
             10455    1   *******************************************************************************/

PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:406  
     3331    10459    1   DCL XUO$OUWRITE ENTRY(2);
     3332    10460        %PAGE (ARG=XUO$VREBL_CONT_SET);

             10473    1   /*******************************************************************************
             10474    1   *                                                                              *
             10475    1   *        XUO$VREBL_CONT_SET              XUO$VREBL_CONT_SET                       *
             10476    1   *                                                                              *
             10477    1   *******************************************************************************/

     3333    10481         /*   The following section will check to see if the passed
     3334    10482            information will fit in the current record.  If not, the
     3335    10483            current record will be written and the pointer reinitialized
     3336    10484            then the text will be moved to the buffer.
     3337    10485            NOTE:    This should not happen but better safe than sorry.
     3338    10486            */
     3339    10487    1       IF B_VREBL_CUR$>=B_VREBL_END$ THEN

  10487  1 000002   000000 236000 xsym               LDQ     B_VREBL_CUR$
         1 000003   000000 116000 xsym               CMPQ    B_VREBL_END$
         1 000004   000014 602000 1                  TNC     s:10495

     3340    10488    2       DO;

     3341    10489    2           CALL XUO$OUWRITE(%TYPVREBL);

  10489  1 000005   000001 630400 2                  EPPR0   1
         1 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000007   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000010   000000 011000                    NOP     0

     3342    10490    2           B_VREBL_PAGE=B_VREBL_PAGE+1;

  10490  1 000011   000000 054000 xsym               AOS     B_VREBL_PAGE

     3343    10491    2           B_VREBL_CUR$=B_VREBL_BASE$;

  10491  1 000012   000000 236000 xsym               LDQ     B_VREBL_BASE$
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:407  
         1 000013   000000 756000 xsym               STQ     B_VREBL_CUR$

     3344    10492    2           END;

     3345    10493
     3346    10494         /*  The following will build the continuation entry. */
     3347    10495    1       VREBL_CUR$=B_VREBL_CUR$;

  10495  1 000014   200010 756100                    STQ     VREBL_CUR$,,AUTO

     3348    10496    1       B$VREBLCSET='0'B;

  10496  1 000015   200010 470500                    LDP0    VREBL_CUR$,,AUTO
         1 000016   000100 100400                    MLR     fill='000'O
         1 000017   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000020   000000 000024                    ADSC9   0,,PR0                   cn=0,n=20

     3349    10497    1       B$VREBLCSET.SIG_BITS = P_SIG_BITS;

  10497  1 000021   200003 471500                    LDP1    @P_SIG_BITS,,AUTO
         1 000022   100000 720100                    LXL0    0,,PR1
         1 000023   000000 740100                    STX0    0,,PR0

     3350    10498    1       B$VREBLCSET.DATATYP=P_DATA_TYPE;

  10498  1 000024   200004 473500                    LDP3    @P_DATA_TYPE,,AUTO
         1 000025   300000 236100                    LDQ     0,,PR3
         1 000026   000002 736000                    QLS     2
         1 000027   000000 676100                    ERQ     0,,PR0
         1 000030   000374 376007                    ANQ     252,DL
         1 000031   000000 656100                    ERSQ    0,,PR0

     3351    10499    1       B$VREBLCSET.MIN_VALUE = P_MINIMUM_VALUE;

  10499  1 000032   200005 474500                    LDP4    @P_MINIMUM_VALUE,,AUTO
         1 000033   400000 235100                    LDA     0,,PR4
         1 000034   000001 755100                    STA     1,,PR0
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:408  

     3352    10500    1       B$VREBLCSET.NPOINTER_TRUE = P_NAME_POINTER_TRUE;

  10500  1 000035   200006 475500                    LDP5    @P_NAME_POINTER_TRUE,,AUTO
         1 000036   500000 721100                    LXL1    0,,PR5
         1 000037   000002 741100                    STX1    2,,PR0

     3353    10501    1       B$VREBLCSET.NPOINTER_FALSE = P_NAME_POINTER_FALSE;

  10501  1 000040   200007 476500                    LDP6    @P_NAME_POINTER_FALSE,,AUTO
         1 000041   600000 722100                    LXL2    0,,PR6
         1 000042   000002 442100                    SXL2    2,,PR0

     3354    10502    1       B_VREBL_COUNT=B_VREBL_COUNT+1;

  10502  1 000043   000000 054000 xsym               AOS     B_VREBL_COUNT

     3355    10503    1       B_VREBL_CUR$=PINCRW(B_VREBL_CUR$,SIZEW(B$VREBLCSET));

  10503  1 000044   000000 236000 xsym               LDQ     B_VREBL_CUR$
         1 000045   000005 036003                    ADLQ    5,DU
         1 000046   000000 756000 xsym               STQ     B_VREBL_CUR$

     3356    10504    1       RETURN;

  10504  1 000047   000000 702200 xent               TSX2  ! X66_ARET
     3357    10505
     3358    10506    1   END XUO$VREBL_CONT_SET;
     3359    10507        %EOD;

PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:409  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$VREBL_CONT_SET.
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:410  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @P_DATA_TYPE               5-0-0/w PTR         r     1 @P_MINIMUM_VALUE
     7-0-0/w PTR         r     1 @P_NAME_POINTER_FALSE
     6-0-0/w PTR         r     1 @P_NAME_POINTER_TRUE       3-0-0/w PTR         r     1 @P_SIG_BITS
    *0-0-0/w UBIN        r     1 P_DATA_TYPE               *0-0-0/w UBIN        r     1 P_MINIMUM_VALUE
    *0-0-0/w SBIN        r     1 P_NAME_POINTER_FALSE      *0-0-0/w SBIN        r     1 P_NAME_POINTER_TRUE
    *0-0-0/w UBIN        r     1 P_SIG_BITS                10-0-0/w PTR         r     1 VREBL_CUR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B_VREBL_BASE$              0-0-0/w SBIN        r     1 B_VREBL_COUNT
     0-0-0/w PTR         r     1 B_VREBL_CUR$               0-0-0/w PTR         r     1 B_VREBL_END$
     0-0-0/w SBIN        r     1 B_VREBL_PAGE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 B$VREBLCSET


   Procedure XUO$VREBL_CONT_SET requires 40 words for executable code.
   Procedure XUO$VREBL_CONT_SET requires 10 words of local(AUTO) storage.
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:411  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:412  
          MINI XREF LISTING

B$VREBLCSET
     10373**DCL     10496<<ASSIGN  10503--ASSIGN
B$VREBLCSET.DATATYP
     10384**DCL     10498<<ASSIGN
B$VREBLCSET.MIN_VALUE
     10389**DCL     10499<<ASSIGN
B$VREBLCSET.NPOINTER_FALSE
     10402**DCL     10501<<ASSIGN
B$VREBLCSET.NPOINTER_TRUE
     10392**DCL     10500<<ASSIGN
B$VREBLCSET.SIG_BITS
     10374**DCL     10497<<ASSIGN
B_VREBL_BASE$
     10427**DCL     10491>>ASSIGN
B_VREBL_COUNT
     10430**DCL     10502<<ASSIGN  10502>>ASSIGN
B_VREBL_CUR$
     10428**DCL     10487>>IF      10491<<ASSIGN  10495>>ASSIGN  10503<<ASSIGN  10503>>ASSIGN
B_VREBL_END$
     10429**DCL     10487>>IF
B_VREBL_PAGE
     10431**DCL     10490<<ASSIGN  10490>>ASSIGN
P_DATA_TYPE
     10346**DCL       158--PROC    10498>>ASSIGN
P_MINIMUM_VALUE
     10347**DCL       158--PROC    10499>>ASSIGN
P_NAME_POINTER_FALSE
     10349**DCL       158--PROC    10501>>ASSIGN
P_NAME_POINTER_TRUE
     10348**DCL       158--PROC    10500>>ASSIGN
P_SIG_BITS
     10345**DCL       158--PROC    10497>>ASSIGN
PL6.E3A0      #015=XUO$VREBL_CONT_SET File=XUO$BUILD.:E05TSI                     WED 07/30/97 09:31 Page:413  
VREBL_CUR$
     10435**DCL     10373--IMP-PTR 10495<<ASSIGN  10496>>ASSIGN  10497>>ASSIGN  10498>>ASSIGN  10499>>ASSIGN
     10500>>ASSIGN  10501>>ASSIGN
XUO$OUWRITE
     10459**DCL-ENT 10489--CALL

PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:414  
     3360        1        /*M*     XUO$LOGBLK  - THIS MODULE CONTAINS ROUTINES THAT BUILD LOGICAL BLOCK RECORD
                 1        */
     3361        2        /*T***********************************************************/
     3362        3        /*T*                                                         */
     3363        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3364        5        /*T*                                                         */
     3365        6        /*T***********************************************************/
     3366        7        /*P*
     3367        8
     3368        9               NAME:  XUO$LOGBLK
     3369       10               PURPOSE: This module contains the 6 entry points that are
     3370       11                        used to build a complete logical block record.
     3371       12
     3372       13                        XUO$LOGBLK is never called.
     3373       14        */
     3374       15        /*D*
     3375       16
     3376       17        XUO$LOGBLKALLOC --Logical Block Debug Records (Record Type 11)
     3377       18
     3378       19        NAME:  XUO$LOGBLKALLOC
     3379       20
     3380       21        PURPOSE:  Used in building Logical Block Debug Records
     3381       22
     3382       23        DESCRIPTION:  This routine is used in building Logical Block
     3383       24            Debug Records.  It must be called before any other of the
     3384       25            logical block creation routines are called.  It need not
     3385       26            be called before XUO$LOGBLKTERM, the termination routine.
     3386       27            This routine allocates a Logical Block entry.  If one is
     3387       28            not available it will altreturn.
     3388       29
     3389       30        CALL:  CALL XUO$LOGBLKALLOC(Logical Block Number)
     3390       31                  ALTRETURN (Label)
     3391       32
     3392       33        INPUT:
     3393       34            none
     3394       35
     3395       36        OUTPUT:
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:415  
     3396       37            Logical Block Number UBIN ALIGNED
     3397       38                                The entry number into the logical
     3398       39                                block debug record.
     3399       40
     3400       41        B$OBJECT REFERENCE:  B$LOGBLK
     3401       42        */
     3402       43
     3403       44        /*B*
     3404       45
     3405       46        GLOBAL DATA:
     3406       47             B_LOGBLK_COUNT
     3407       48
     3408       49        INTERFACE:  none
     3409       50
     3410       51        */
     3411       52
     3412       53        XUO$LOGBLK: PROC (P_LOGBLK_NUMBER,P_PARAM2,P_PARAM3,P_NAME_POINTER,P_LEXICAL_LEVEL)
                53            ALTRET;
     3413       54         /*
     3414       55            */
     3415       56        %INCLUDE ZVA_SYSTEM_FILE;
     3416     6307        %PAGE (ARG=INCLUDES);

              6320    1   /*******************************************************************************
              6321    1   *                                                                              *
              6322    1   *        INCLUDES              INCLUDES                                            *
              6323    1   *                                                                              *
              6324    1   *******************************************************************************/

     3417     6328        %INCLUDE B$OBJECT_C;
     3418     9758        %INCLUDE XUO$OBJ_C;
     3419    10168        %PAGE (ARG=SUBS);

             10181    1   /*******************************************************************************
             10182    1   *                                                                              *
             10183    1   *        SUBS              SUBS                                                  *
             10184    1   *                                                                              *
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:416  
             10185    1   *******************************************************************************/

     3420    10189        %COMPILERIDSUBS;
     3421    10205        %PAGE (ARG=PARAMETERS);

             10218    1   /*******************************************************************************
             10219    1   *                                                                              *
             10220    1   *        PARAMETERS              PARAMETERS                                        *
             10221    1   *                                                                              *
             10222    1   *******************************************************************************/

     3422    10226    1   DCL P_LOGBLK_NUMBER UBIN;
     3423    10227         /*
     3424    10228         The following definition is for logblknoauto
     3425    10229         */
     3426    10230    1   DCL P_OPNDTYP REDEF P_LOGBLK_NUMBER UBIN;
     3427    10231
     3428    10232    1   DCL P_PARAM2 UBIN;
     3429    10233         /*
     3430    10234         The following defintion is for logblkexstinit.
     3431    10235         */
     3432    10236    1   DCL P_STARTING_EXST_NUMBER REDEF P_PARAM2 UBIN;
     3433    10237         /*
     3434    10238         The following definition is for logblkexstterm.
     3435    10239         -1  -> that there are no exst entries
     3436    10240         */
     3437    10241    1   DCL P_ENDING_EXST_NUMBER REDEF P_PARAM2 SBIN;
     3438    10242         /*
     3439    10243         The following defintion is for logblkvreblinit.
     3440    10244         */
     3441    10245    1   DCL P_STARTING_VREBL_NUMBER REDEF P_PARAM2 UBIN;
     3442    10246         /*
     3443    10247         The following defintion is for logblkvreblterm.
     3444    10248         -1  -> that there are no vrebl entries
     3445    10249         */
     3446    10250    1   DCL P_ENDING_VREBL_NUMBER REDEF P_PARAM2 SBIN;
     3447    10251         /*
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:417  
     3448    10252         The following definition is for logblknoauto
     3449    10253         */
     3450    10254    1   DCL P_OPERAND REDEF P_PARAM2 UBIN;
     3451    10255         /*
     3452    10256            */
     3453    10257    1   DCL P_PARAM3 UBIN;
     3454    10258         /*
     3455    10259         The following defintion is for XUO$LOGBLKEXSTINIT.
     3456    10260         */
     3457    10261    1   DCL P_STARTING_LINE_NUMBER REDEF P_PARAM3 UBIN;
     3458    10262         /*
     3459    10263         The following definition is for XUO$LOGBLKEXSTTERM.
     3460    10264         */
     3461    10265    1   DCL P_ENDING_LINE_NUMBER REDEF P_PARAM3 UBIN;
     3462    10266         /*
     3463    10267         The following definition is for logblknoauto
     3464    10268         */
     3465    10269    1   DCL P_OFFSET REDEF P_PARAM3 UBIN;
     3466    10270
     3467    10271    1   DCL P_NAME_POINTER SBIN;
     3468    10272    1   DCL P_LEXICAL_LEVEL UBIN;
     3469    10273        %PAGE (ARG=LOGBLK DATA);

             10286    1   /*******************************************************************************
             10287    1   *                                                                              *
             10288    1   *        LOGBLK DATA              LOGBLK DATA                                      *
             10289    1   *                                                                              *
             10290    1   *******************************************************************************/

     3470    10294        %B$LBNTRY0 (STCLASS="BASED(B_LOGBLK_ENTRY0$)");
     3471    10330        %B$LBNTRY1 (STCLASS="BASED(B_LOGBLK_ENTRY1$)");
     3472    10357        %B$LOGBLK (STCLASS="BASED(LOGBLK_TEMP$)");
     3473    10388        %B_LOGBLK_POINTERS;
     3474    10410        %PLIST;
     3475    10411        %PAGE (ARG=DBGNAME DATA);

             10424    1   /*******************************************************************************
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:418  
             10425    1   *                                                                              *
             10426    1   *        DBGNAME DATA              DBGNAME DATA                                    *
             10427    1   *                                                                              *
             10428    1   *******************************************************************************/

     3476    10432        %B_DBGNAME_POINTERS;
     3477    10452        %PLIST;
     3478    10453        %PAGE (ARG=EXST DATA);

             10466    1   /*******************************************************************************
             10467    1   *                                                                              *
             10468    1   *        EXST DATA              EXST DATA                                          *
             10469    1   *                                                                              *
             10470    1   *******************************************************************************/

     3479    10474        %B$EXST;
     3480    10581        %B_EXST_POINTERS;
     3481    10601        %PLIST;
     3482    10602        %PAGE (ARG=VREBL DATA);

             10615    1   /*******************************************************************************
             10616    1   *                                                                              *
             10617    1   *        VREBL DATA              VREBL DATA                                        *
             10618    1   *                                                                              *
             10619    1   *******************************************************************************/

     3483    10623        %B$VREBL;
     3484    10787        %B_VREBL_POINTERS;
     3485    10807        %PLIST;
     3486    10808        %PAGE (ARG=INTNTRY DATA);

             10821    1   /*******************************************************************************
             10822    1   *                                                                              *
             10823    1   *        INTNTRY DATA              INTNTRY DATA                                    *
             10824    1   *                                                                              *
             10825    1   *******************************************************************************/

PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:419  
     3487    10829        %B$INTNTRY;
     3488    10887        %B_INTNTRY_POINTERS;
     3489    10907        %PLIST;
     3490    10908        %PAGE (ARG=MISC DATA);

             10921    1   /*******************************************************************************
             10922    1   *                                                                              *
             10923    1   *        MISC DATA              MISC DATA                                          *
             10924    1   *                                                                              *
             10925    1   *******************************************************************************/

     3491    10929    1   DCL XUO_COMPILER_ID SYMREF UBIN;
     3492    10930    1   DCL 1 XUO_VERSION_NUMBER SYMREF,
     3493    10931    1         2 LETTER CHAR(1) UNAL,
     3494    10932    1         2 NUMBER UBIN(9) UNAL;
     3495    10933    1   DCL XUO_OU_UTS SYMREF UBIN;
     3496    10934    1   DCL LOGBLK_TEMP$ PTR;
     3497    10935        %PAGE (ARG=XUO$LOGBLKALLOC);

             10948    1   /*******************************************************************************
             10949    1   *                                                                              *
             10950    1   *        XUO$LOGBLKALLOC              XUO$LOGBLKALLOC                              *
             10951    1   *                                                                              *
             10952    1   *******************************************************************************/

     3498    10956    1   XUO$LOGBLKALLOC: ENTRY (P_LOGBLK_NUMBER) ALTRET;
     3499    10957         /*
     3500    10958         The following section will allocate another logical block.  If no more
     3501    10959         available and altret will be taken.  The entry number for the allocated block is
     3502    10960         returned.
     3503    10961         */
     3504    10962    1       IF B_LOGBLK_CUR$<B_LOGBLK_END$ THEN
     3505    10963    2       DO;
     3506    10964    2           B_LOGBLK_COUNT=B_LOGBLK_COUNT+1;
     3507    10965    2           P_LOGBLK_NUMBER=B_LOGBLK_COUNT;
     3508    10966    2           B_LOGBLK_CUR$=PINCRW(B_LOGBLK_CUR$,SIZEW(B$LOGBLK));
     3509    10967    2           RETURN;
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:420  
     3510    10968    2           END;
     3511    10969         /*
     3512    10970         The following gives an error if cant allocate any more logcial blocks.
     3513    10971         */
     3514    10972    1       ALTRETURN;
     3515    10973            %PAGE (ARG=XUO$LOGBLKEXSTINIT);

             10986    1   /*******************************************************************************
             10987    1   *                                                                              *
             10988    1   *        XUO$LOGBLKEXSTINIT              XUO$LOGBLKEXSTINIT                        *
             10989    1   *                                                                              *
             10990    1   *******************************************************************************/

     3516    10994        /*D*
     3517    10995
     3518    10996        XUO$LOGBLKEXSTINIT --Logical Block Debug Records (Record Type 11)
     3519    10997
     3520    10998        NAME:  XUO$LOGBLKEXSTINIT
     3521    10999
     3522    11000        PURPOSE:  To build Logical Block Debug Records
     3523    11001
     3524    11002        DESCRIPTION:  This routine is used in building Logical Block
     3525    11003            Debug records.  It fills in initial data that relates to
     3526    11004            the executable information.  The routine altreturns if
     3527    11005            the logical block number is invalid.
     3528    11006
     3529    11007        CALL:  CALL XUO$LOGBLKEXSTINIT (Logical Block Number,
     3530    11008                                 Starting executable statement number,
     3531    11009                                 Starting line number,
     3532    11010                                 Name Pointer,
     3533    11011                                 Lexical Level)
     3534    11012
     3535    11013        INPUT:
     3536    11014            Logical Block Number UBIN
     3537    11015                                The number returned by the call to
     3538    11016                                XUO$LOGBLKALLOC.
     3539    11017            Starting executable statement number  UBIN
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:421  
     3540    11018                                The word offset into the statement
     3541    11019                                record (type 13) to the statement
     3542    11020                                descriptions for this logical block.
     3543    11021                                It is the starting number of the first
     3544    11022                                executable statement of the block.
     3545    11023            Starting Line number UBIN
     3546    11024                                The beginning line number of this
     3547    11025                                logical block.
     3548    11026            Name Pointer        SBIN
     3549    11027                                The word displacement into the debug
     3550    11028                                name record (type 15) locating the
     3551    11029                                name of this logical block.
     3552    11030            Lexical Level       UBIN
     3553    11031                                The nesting level of the block.
     3554    11032                                A contained procedure has a higher
     3555    11033                                lexical level than the procedure which
     3556    11034                                contains it.
     3557    11035
     3558    11036        OUTPUT:
     3559    11037            Updated logical block record
     3560    11038
     3561    11039        B$OBJECT REFERENCE:  B$LOGBLK
     3562    11040        */
     3563    11041        /*B*
     3564    11042
     3565    11043        GLOBAL DATA:  none
     3566    11044
     3567    11045        INTERFACE:  none
     3568    11046
     3569    11047        */
     3570    11048
     3571    11049    1   XUO$LOGBLKEXSTINIT: ENTRY(P_LOGBLK_NUMBER,P_PARAM2,P_PARAM3,P_NAME_POINTER,
             11049            P_LEXICAL_LEVEL) ALTRET;
     3572    11050         /*
     3573    11051         The following section will verify the logblk number to insure that it is valid.
     3574    11052         If not, an altreturn will be taken.
     3575    11053         */
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:422  
     3576    11054    1       LOGBLK_TEMP$=PINCRW(B_LOGBLK_BASE$,P_LOGBLK_NUMBER*SIZEW(B$LOGBLK));
     3577    11055    1       IF LOGBLK_TEMP$>=B_LOGBLK_CUR$ THEN
     3578    11056    1           ALTRETURN;
     3579    11057         /*
     3580    11058         The following section will partially fill in the exst portion of logblk.
     3581    11059         */
     3582    11060    1       B$LOGBLK.STLINE=P_STARTING_LINE_NUMBER;
     3583    11061    1       B$LOGBLK.NPOINTER=P_NAME_POINTER;
     3584    11062    1       B$LOGBLK.LEXLVL=P_LEXICAL_LEVEL;
     3585    11063    1       B$LOGBLK.STOFFST=P_STARTING_EXST_NUMBER*SIZEW(B$EXST);
     3586    11064    1       RETURN;
     3587    11065            %PAGE (ARG=XUO$LOGBLKEXSTTERM);

             11078    1   /*******************************************************************************
             11079    1   *                                                                              *
             11080    1   *        XUO$LOGBLKEXSTTERM              XUO$LOGBLKEXSTTERM                        *
             11081    1   *                                                                              *
             11082    1   *******************************************************************************/

     3588    11086        /*D*
     3589    11087
     3590    11088        XUO$LOGBLKEXSTTERM --Logical Block Debug Record (Record Type 11)
     3591    11089
     3592    11090        NAME:  XUO$LOGBLKEXSTTERM
     3593    11091
     3594    11092        PURPOSE:  To finish building the Logical Block Debug Record
     3595    11093
     3596    11094        DESCRIPTION:  This routine finishes setting up of the executable
     3597    11095            statement information in the Logical Block entry.  If the
     3598    11096            logical block number passed to it is not invalid, this
     3599    11097            routine will altreturn.
     3600    11098
     3601    11099        CALL:  CALL XUO$LOGBLKEXSTTERM (Logical Block Number,
     3602    11100                                 Ending Executable Statement Number,
     3603    11101                                 Ending Line Number)
     3604    11102                      ALTRETURN (Label)
     3605    11103
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:423  
     3606    11104        INPUT:
     3607    11105            Logical Block Number UBIN
     3608    11106                                The logical block number returned from
     3609    11107                                the call to XUO$LOGBLKALLOC.
     3610    11108            Ending Executable Statement Number  SBIN
     3611    11109                                This is the size in entries of the
     3612    11110                                statement descriptions for this logical
     3613    11111                                block.  It is used to calculate the
     3614    11112                                statements offset.
     3615    11113            Ending Line Number  UBIN
     3616    11114                                The ending line number for this logical
     3617    11115                                block.
     3618    11116        OUTPUT:
     3619    11117            Updated logical block record
     3620    11118
     3621    11119        B$OBJECT REFERENCE:  B$LOGBLK
     3622    11120        */
     3623    11121        /*B*
     3624    11122
     3625    11123        GLOBAL DATA:  none
     3626    11124
     3627    11125        INTERFACE:  none
     3628    11126
     3629    11127        */
     3630    11128
     3631    11129    1   XUO$LOGBLKEXSTTERM: ENTRY (P_LOGBLK_NUMBER,P_PARAM2,P_PARAM3) ALTRET;
     3632    11130         /*
     3633    11131         The following section will verify the logblk number.  If not valid, an
     3634    11132         altreturn will be taken.
     3635    11133         */
     3636    11134    1       LOGBLK_TEMP$=PINCRW(B_LOGBLK_BASE$,P_LOGBLK_NUMBER*SIZEW(B$LOGBLK));
     3637    11135    1       IF LOGBLK_TEMP$>=B_LOGBLK_CUR$ THEN
     3638    11136    1           ALTRETURN;
     3639    11137         /*
     3640    11138         The following section will fill in the final portion of the
     3641    11139         exst part of the logcial block entry.
     3642    11140         */
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:424  
     3643    11141    1       B$LOGBLK.ENLINE=P_ENDING_LINE_NUMBER;
     3644    11142    1       B$LOGBLK.STSIZE=P_ENDING_EXST_NUMBER-B$LOGBLK.STOFFST/SIZEW(B$EXST);
     3645    11143    1       RETURN;
     3646    11144            %PAGE (ARG=XUO$LOGBLKVREBLINIT);

             11157    1   /*******************************************************************************
             11158    1   *                                                                              *
             11159    1   *        XUO$LOGBLKVREBLINIT              XUO$LOGBLKVREBLINIT                      *
             11160    1   *                                                                              *
             11161    1   *******************************************************************************/

     3647    11165        /*D*
     3648    11166        XUO$LOGBLKVREBLINIT --Logical Block Debug Record (Record Type 11)
     3649    11167
     3650    11168        NAME:  XUO$LOGBLKVREBLINIT
     3651    11169
     3652    11170        PURPOSE:  Used in building the Logical Block Debug Records
     3653    11171                  (Record Type 11)
     3654    11172
     3655    11173        DESCRIPTION:  This routine fills in the initial data that
     3656    11174            relates to the variable records in the Logical Block
     3657    11175            Entry.  If the logical block number passed in is
     3658    11176            invalid, this routine will altreturn.
     3659    11177
     3660    11178        CALL:  CALL XUO$LOGBLKVREBLINIT (Logical Block Number,
     3661    11179                                  Starting Variable Number)
     3662    11180                       ALTRETURN (Label)
     3663    11181
     3664    11182        INPUT:
     3665    11183            Logical Block Number UBIN
     3666    11184                                The logical block number returned from
     3667    11185                                the call to XUO$LOGBLKALLOC.
     3668    11186            Starting Variable Number  UBIN
     3669    11187                                The word offset into the variable record
     3670    11188                                (type 14) to the variable descriptions
     3671    11189                                for this logical block.
     3672    11190        OUTPUT:
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:425  
     3673    11191            Updated logical block record
     3674    11192
     3675    11193        B$OBJECT REFERENCE:  B$LOGBLK
     3676    11194        */
     3677    11195        /*B*
     3678    11196
     3679    11197        GLOBAL DATA:  none
     3680    11198
     3681    11199        INTERFACE:  none
     3682    11200
     3683    11201        */
     3684    11202
     3685    11203    1   XUO$LOGBLKVREBLINIT: ENTRY (P_LOGBLK_NUMBER,P_PARAM2) ALTRET;
     3686    11204         /*
     3687    11205         The following section will verify the logblk number.  If not valid, an
     3688    11206         altreturn will be taken.
     3689    11207         */
     3690    11208    1       LOGBLK_TEMP$=PINCRW(B_LOGBLK_BASE$,P_LOGBLK_NUMBER*SIZEW(B$LOGBLK));
     3691    11209    1       IF LOGBLK_TEMP$>=B_LOGBLK_CUR$ THEN
     3692    11210    1           ALTRETURN;
     3693    11211         /*
     3694    11212         The following section will partially fill in the vrebl part of the logical block
     3695    11213         entry.
     3696    11214         */
     3697    11215    1       B$LOGBLK.VAOFFST=P_STARTING_VREBL_NUMBER*SIZEW(B$VREBL);
     3698    11216    1       RETURN;
     3699    11217            %PAGE (ARG=XUO$LOGBLKVREBLTERM);

             11230    1   /*******************************************************************************
             11231    1   *                                                                              *
             11232    1   *        XUO$LOGBLKVREBLTERM              XUO$LOGBLKVREBLTERM                      *
             11233    1   *                                                                              *
             11234    1   *******************************************************************************/

     3700    11238        /*D*
     3701    11239        XUO$LOGBLKVREBLTERM --Logical Block Debug Record (Record Type 11)
     3702    11240
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:426  
     3703    11241        NAME:  XUO$LOGBLKVREBLTERM
     3704    11242
     3705    11243        PURPOSE:  Used in building Logical Block Debug Records
     3706    11244                  (Record type 11)
     3707    11245
     3708    11246        DESCRIPTION:  This routine is used in building Logical Block
     3709    11247            Debug Records.  It finishes setting up the variable data
     3710    11248            information in the Logical Block entry.  If the logical
     3711    11249            block number passed is invalid, this routing will altreturn.
     3712    11250
     3713    11251        CALL:  CALL XUO$LOGBLKVREBLTERM (Logical Block Number,
     3714    11252                                  Ending Variable Number)
     3715    11253                       ALTRETURN (Label)
     3716    11254
     3717    11255        INPUT:
     3718    11256            Logical Block Number UBIN
     3719    11257                                The logical block number that is
     3720    11258                                returned from the call to XUO$LOGBLKALLOC.
     3721    11259            Ending Variable Number SBIN
     3722    11260                                The index number of the last variable
     3723    11261                                (type 14) for this logical block.
     3724    11262                                It is used to calculate the variable size.
     3725    11263        OUTPUT:
     3726    11264            Updated logical block record
     3727    11265
     3728    11266        B$OBJECT REFERENCE:  B$LOGBLK
     3729    11267        */
     3730    11268        /*B*
     3731    11269
     3732    11270        GLOBAL DATA:  none
     3733    11271
     3734    11272        INTERFACE:  none
     3735    11273
     3736    11274        */
     3737    11275
     3738    11276    1   XUO$LOGBLKVREBLTERM: ENTRY (P_LOGBLK_NUMBER,P_PARAM2) ALTRET;
     3739    11277         /*
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:427  
     3740    11278         The following section will verify the logblk number.  If not valid, an
     3741    11279         altreturn will be taken.
     3742    11280         */
     3743    11281    1       LOGBLK_TEMP$=PINCRW(B_LOGBLK_BASE$,P_LOGBLK_NUMBER*SIZEW(B$LOGBLK));
     3744    11282    1       IF LOGBLK_TEMP$>=B_LOGBLK_CUR$ THEN
     3745    11283    1           ALTRETURN;
     3746    11284         /*
     3747    11285         The following section will partially fill in the vrebl part of the logical block
     3748    11286         entry.
     3749    11287         */
     3750    11288    1       B$LOGBLK.VASIZE=P_ENDING_VREBL_NUMBER-B$LOGBLK.VAOFFST/SIZEW(B$VREBL);
     3751    11289    1       RETURN;
     3752    11290            %PAGE (ARG=LOGBLK 0/1 CODE);

             11303    1   /*******************************************************************************
             11304    1   *                                                                              *
             11305    1   *        LOGBLK 0/1 CODE              LOGBLK 0/1 CODE                              *
             11306    1   *                                                                              *
             11307    1   *******************************************************************************/

     3753    11311        /*D*
     3754    11312
     3755    11313        XUO$LOGBLKTERM --Logical Block Debug Records (Record Type 11)
     3756    11314
     3757    11315        NAME:  XUO$LOGBLKTERM
     3758    11316
     3759    11317        PURPOSE:  Used in building Logical Block Debug Records
     3760    11318                  (Record Type 11)
     3761    11319
     3762    11320        DESCRIPTION:  This routine must only be called after all logical
     3763    11321            blocks have been filled in.  It sets up the two headers
     3764    11322            that describe the total sizes of the debug records.
     3765    11323
     3766    11324        CALL:  CALL XUO$LOGBLKTERM  ALTRET (Label)
     3767    11325
     3768    11326        INPUT:
     3769    11327            none
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:428  
     3770    11328
     3771    11329        OUTPUT:
     3772    11330            Updated logical block headers
     3773    11331
     3774    11332        B$OBJECT REFERENCE:  B$LBNTRY0, B$LBNTRY1
     3775    11333        */
     3776    11334        /*B*
     3777    11335
     3778    11336        GLOBAL DATA:  none
     3779    11337
     3780    11338        INTERFACE:  none
     3781    11339
     3782    11340        */
     3783    11341
     3784    11342
     3785    11343    1   XUO$LOGBLKTERM: ENTRY ALTRET;
     3786    11344         /*
     3787    11345         The following section builds logical block entry number 0.
     3788    11346         */
     3789    11347    1       B$LBNTRY0.COMPILER=XUO_COMPILER_ID;
     3790    11348    1       B$LBNTRY0.VERS=XUO_VERSION_NUMBER;
     3791    11349    1       B$LBNTRY0.UTS=XUO_OU_UTS;
     3792    11350         /*
     3793    11351         The following section builds logical block entry number 1.
     3794    11352         */
     3795    11353    1       B$LBNTRY1.NAMESIZ=B_DBGNAME_COUNT;
     3796    11354    1       B$LBNTRY1.NAMPSIZ=B_DBGNAME_PAGE_SIZE;
     3797    11355    1       B$LBNTRY1.STMNTSIZ=(B_EXST_COUNT+1)*SIZEW(B$EXST);
     3798    11356    1       B$LBNTRY1.STMNTPSIZ=B_EXST_PAGE_SIZE;
     3799    11357    1       B$LBNTRY1.VREBLSIZ=(B_VREBL_COUNT+1)*SIZEW(B$VREBL);
     3800    11358    1       B$LBNTRY1.VREBLPSIZ=B_VREBL_PAGE_SIZE;
     3801    11359    1       B$LBNTRY1.INTRYSIZ=(B_INTNTRY_COUNT+1)*SIZEW(B$INTNTRY);
     3802    11360    1       B$LBNTRY1.INTRYPSIZ=B_INTNTRY_PAGE_SIZE;
     3803    11361    1       RETURN;
     3804    11362
     3805    11363            %PAGE(ARG=LOGBLK NOAUTO);

PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:429  
             11376    1   /*******************************************************************************
             11377    1   *                                                                              *
             11378    1   *        LOGBLK NOAUTO              LOGBLK NOAUTO                                  *
             11379    1   *                                                                              *
             11380    1   *******************************************************************************/

     3806    11384         /**/
     3807    11385    1   XUO$LOGBLKNOAUTO: ENTRY (P_LOGBLK_NUMBER,P_PARAM2,P_PARAM3) ALTRET;
     3808    11386         /*
     3809    11387         The following section fills in the static auto pointer
     3810    11388         */
     3811    11389    1       B$LBNTRY0.NO_AUTO.OPNDTYP=P_OPNDTYP;
     3812    11390    1       B$LBNTRY0.NO_AUTO.OPERAND=P_OPERAND;
     3813    11391    1       B$LBNTRY0.NO_AUTO.OFFSET=P_OFFSET;
     3814    11392    1       RETURN;
     3815    11393
     3816    11394    1   END XUO$LOGBLK;
     3817    11395        %EOD;

PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:430  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$LOGBLK.

   Procedure XUO$LOGBLK requires 164 words for executable code.
   Procedure XUO$LOGBLK requires 12 words of local(AUTO) storage.

PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:431  

 Object Unit name= XUO$LOGBLK                                 File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:32:06.00 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   164    244  XUO$LOGBLK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        5  XUO$LOGBLK
     1      3          yes     yes      Std        1  XUO$LOGBLKALLOC
     1     21          yes     yes      Std        5  XUO$LOGBLKEXSTINIT
     1     54          yes     yes      Std        3  XUO$LOGBLKEXSTTERM
     1    105          yes     yes      Std        2  XUO$LOGBLKVREBLINIT
     1    127          yes     yes      Std        2  XUO$LOGBLKVREBLTERM
     1    155          yes     yes      Std        0  XUO$LOGBLKTERM
     1    223          yes     yes      Std        3  XUO$LOGBLKNOAUTO

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:432  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_LOGBLK_BASE$                        B_LOGBLK_ENTRY0$
     B_LOGBLK_ENTRY1$                      B_LOGBLK_CUR$                         B_LOGBLK_END$
     B_LOGBLK_COUNT                        B_DBGNAME_COUNT                       B_DBGNAME_PAGE_SIZE
     B_EXST_COUNT                          B_EXST_PAGE_SIZE                      B_VREBL_COUNT
     B_VREBL_PAGE_SIZE                     B_INTNTRY_COUNT                       B_INTNTRY_PAGE_SIZE
     XUO_COMPILER_ID                       XUO_VERSION_NUMBER                    XUO_OU_UTS
     B_VECTNIL
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:433  


     3360        1        /*M*     XUO$LOGBLK - THIS MODULE CONTAINS ROUTINES THAT BUILD LOGICAL BLOCK RECORD
                 1        */
     3361        2        /*T***********************************************************/
     3362        3        /*T*                                                         */
     3363        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3364        5        /*T*                                                         */
     3365        6        /*T***********************************************************/
     3366        7        /*P*
     3367        8
     3368        9               NAME:  XUO$LOGBLK
     3369       10               PURPOSE: This module contains the 6 entry points that are
     3370       11                        used to build a complete logical block record.
     3371       12
     3372       13                        XUO$LOGBLK is never called.
     3373       14        */
     3374       15        /*D*
     3375       16
     3376       17        XUO$LOGBLKALLOC --Logical Block Debug Records (Record Type 11)
     3377       18
     3378       19        NAME:  XUO$LOGBLKALLOC
     3379       20
     3380       21        PURPOSE:  Used in building Logical Block Debug Records
     3381       22
     3382       23        DESCRIPTION:  This routine is used in building Logical Block
     3383       24            Debug Records.  It must be called before any other of the
     3384       25            logical block creation routines are called.  It need not
     3385       26            be called before XUO$LOGBLKTERM, the termination routine.
     3386       27            This routine allocates a Logical Block entry.  If one is
     3387       28            not available it will altreturn.
     3388       29
     3389       30        CALL:  CALL XUO$LOGBLKALLOC(Logical Block Number)
     3390       31                  ALTRETURN (Label)
     3391       32
     3392       33        INPUT:
     3393       34            none
     3394       35
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:434  
     3395       36        OUTPUT:
     3396       37            Logical Block Number UBIN ALIGNED
     3397       38                                The entry number into the logical
     3398       39                                block debug record.
     3399       40
     3400       41        B$OBJECT REFERENCE:  B$LOGBLK
     3401       42        */
     3402       43
     3403       44        /*B*
     3404       45
     3405       46        GLOBAL DATA:
     3406       47             B_LOGBLK_COUNT
     3407       48
     3408       49        INTERFACE:  none
     3409       50
     3410       51        */
     3411       52
     3412       53        XUO$LOGBLK: PROC (P_LOGBLK_NUMBER,P_PARAM2,P_PARAM3,P_NAME_POINTER,P_LEXICAL_LEVEL)
                53            ALTRET;

     53  1 000000   000000 700200 xent  XUO$LOGBLK   TSX0  ! X66_AUTO_5
         1 000001   000014 000005                    ZERO    12,5
         1 000002   000005 710000 1                  TRA     s:10962

     3413       54         /*
     3414       55            */
     3415       56        %INCLUDE ZVA_SYSTEM_FILE;
     3416     6307        %PAGE (ARG=INCLUDES);

              6320    1   /*******************************************************************************
              6321    1   *                                                                              *
              6322    1   *        INCLUDES              INCLUDES                                           *
              6323    1   *                                                                              *
              6324    1   *******************************************************************************/

     3417     6328        %INCLUDE B$OBJECT_C;
     3418     9758        %INCLUDE XUO$OBJ_C;
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:435  
     3419    10168        %PAGE (ARG=SUBS);

             10181    1   /*******************************************************************************
             10182    1   *                                                                              *
             10183    1   *        SUBS              SUBS                                                  *
             10184    1   *                                                                              *
             10185    1   *******************************************************************************/

     3420    10189        %COMPILERIDSUBS;
     3421    10205        %PAGE (ARG=PARAMETERS);

             10218    1   /*******************************************************************************
             10219    1   *                                                                              *
             10220    1   *        PARAMETERS              PARAMETERS                                       *
             10221    1   *                                                                              *
             10222    1   *******************************************************************************/

     3422    10226    1   DCL P_LOGBLK_NUMBER UBIN;
     3423    10227         /*
     3424    10228         The following definition is for logblknoauto
     3425    10229         */
     3426    10230    1   DCL P_OPNDTYP REDEF P_LOGBLK_NUMBER UBIN;
     3427    10231
     3428    10232    1   DCL P_PARAM2 UBIN;
     3429    10233         /*
     3430    10234         The following defintion is for logblkexstinit.
     3431    10235         */
     3432    10236    1   DCL P_STARTING_EXST_NUMBER REDEF P_PARAM2 UBIN;
     3433    10237         /*
     3434    10238         The following definition is for logblkexstterm.
     3435    10239         -1  -> that there are no exst entries
     3436    10240         */
     3437    10241    1   DCL P_ENDING_EXST_NUMBER REDEF P_PARAM2 SBIN;
     3438    10242         /*
     3439    10243         The following defintion is for logblkvreblinit.
     3440    10244         */
     3441    10245    1   DCL P_STARTING_VREBL_NUMBER REDEF P_PARAM2 UBIN;
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:436  
     3442    10246         /*
     3443    10247         The following defintion is for logblkvreblterm.
     3444    10248         -1  -> that there are no vrebl entries
     3445    10249         */
     3446    10250    1   DCL P_ENDING_VREBL_NUMBER REDEF P_PARAM2 SBIN;
     3447    10251         /*
     3448    10252         The following definition is for logblknoauto
     3449    10253         */
     3450    10254    1   DCL P_OPERAND REDEF P_PARAM2 UBIN;
     3451    10255         /*
     3452    10256            */
     3453    10257    1   DCL P_PARAM3 UBIN;
     3454    10258         /*
     3455    10259         The following defintion is for XUO$LOGBLKEXSTINIT.
     3456    10260         */
     3457    10261    1   DCL P_STARTING_LINE_NUMBER REDEF P_PARAM3 UBIN;
     3458    10262         /*
     3459    10263         The following definition is for XUO$LOGBLKEXSTTERM.
     3460    10264         */
     3461    10265    1   DCL P_ENDING_LINE_NUMBER REDEF P_PARAM3 UBIN;
     3462    10266         /*
     3463    10267         The following definition is for logblknoauto
     3464    10268         */
     3465    10269    1   DCL P_OFFSET REDEF P_PARAM3 UBIN;
     3466    10270
     3467    10271    1   DCL P_NAME_POINTER SBIN;
     3468    10272    1   DCL P_LEXICAL_LEVEL UBIN;
     3469    10273        %PAGE (ARG=LOGBLK DATA);

             10286    1   /*******************************************************************************
             10287    1   *                                                                              *
             10288    1   *        LOGBLK DATA              LOGBLK DATA                                     *
             10289    1   *                                                                              *
             10290    1   *******************************************************************************/

     3470    10294        %B$LBNTRY0 (STCLASS="BASED(B_LOGBLK_ENTRY0$)");
     3471    10330        %B$LBNTRY1 (STCLASS="BASED(B_LOGBLK_ENTRY1$)");
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:437  
     3472    10357        %B$LOGBLK (STCLASS="BASED(LOGBLK_TEMP$)");
     3473    10388        %B_LOGBLK_POINTERS;
     3474    10410        %PLIST;
     3475    10411        %PAGE (ARG=DBGNAME DATA);

             10424    1   /*******************************************************************************
             10425    1   *                                                                              *
             10426    1   *        DBGNAME DATA              DBGNAME DATA                                   *
             10427    1   *                                                                              *
             10428    1   *******************************************************************************/

     3476    10432        %B_DBGNAME_POINTERS;
     3477    10452        %PLIST;
     3478    10453        %PAGE (ARG=EXST DATA);

             10466    1   /*******************************************************************************
             10467    1   *                                                                              *
             10468    1   *        EXST DATA              EXST DATA                                         *
             10469    1   *                                                                              *
             10470    1   *******************************************************************************/

     3479    10474        %B$EXST;
     3480    10581        %B_EXST_POINTERS;
     3481    10601        %PLIST;
     3482    10602        %PAGE (ARG=VREBL DATA);

             10615    1   /*******************************************************************************
             10616    1   *                                                                              *
             10617    1   *        VREBL DATA              VREBL DATA                                       *
             10618    1   *                                                                              *
             10619    1   *******************************************************************************/

     3483    10623        %B$VREBL;
     3484    10787        %B_VREBL_POINTERS;
     3485    10807        %PLIST;
     3486    10808        %PAGE (ARG=INTNTRY DATA);

PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:438  
             10821    1   /*******************************************************************************
             10822    1   *                                                                              *
             10823    1   *        INTNTRY DATA              INTNTRY DATA                                   *
             10824    1   *                                                                              *
             10825    1   *******************************************************************************/

     3487    10829        %B$INTNTRY;
     3488    10887        %B_INTNTRY_POINTERS;
     3489    10907        %PLIST;
     3490    10908        %PAGE (ARG=MISC DATA);

             10921    1   /*******************************************************************************
             10922    1   *                                                                              *
             10923    1   *        MISC DATA              MISC DATA                                         *
             10924    1   *                                                                              *
             10925    1   *******************************************************************************/

     3491    10929    1   DCL XUO_COMPILER_ID SYMREF UBIN;
     3492    10930    1   DCL 1 XUO_VERSION_NUMBER SYMREF,
     3493    10931    1         2 LETTER CHAR(1) UNAL,
     3494    10932    1         2 NUMBER UBIN(9) UNAL;
     3495    10933    1   DCL XUO_OU_UTS SYMREF UBIN;
     3496    10934    1   DCL LOGBLK_TEMP$ PTR;
     3497    10935        %PAGE (ARG=XUO$LOGBLKALLOC);

             10948    1   /*******************************************************************************
             10949    1   *                                                                              *
             10950    1   *        XUO$LOGBLKALLOC              XUO$LOGBLKALLOC                             *
             10951    1   *                                                                              *
             10952    1   *******************************************************************************/

     3498    10956    1   XUO$LOGBLKALLOC: ENTRY (P_LOGBLK_NUMBER) ALTRET;

  10956  1 000003   000000 700200 xent  XUO$LOGBLKA* TSX0  ! X66_AUTO_5
         1 000004   000014 000005                    ZERO    12,5

     3499    10957         /*
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:439  
     3500    10958         The following section will allocate another logical block.  If no more
     3501    10959         available and altret will be taken.  The entry number for the allocated block is
     3502    10960         returned.
     3503    10961         */
     3504    10962    1       IF B_LOGBLK_CUR$<B_LOGBLK_END$ THEN

  10962  1 000005   000000 236000 xsym               LDQ     B_LOGBLK_CUR$
         1 000006   000000 116000 xsym               CMPQ    B_LOGBLK_END$
         1 000007   000020 603000 1                  TRC     s:10972

     3505    10963    2       DO;

     3506    10964    2           B_LOGBLK_COUNT=B_LOGBLK_COUNT+1;

  10964  1 000010   000000 054000 xsym               AOS     B_LOGBLK_COUNT

     3507    10965    2           P_LOGBLK_NUMBER=B_LOGBLK_COUNT;

  10965  1 000011   000000 235000 xsym               LDA     B_LOGBLK_COUNT
         1 000012   200003 470500                    LDP0    @P_LOGBLK_NUMBER,,AUTO
         1 000013   000000 755100                    STA     0,,PR0

     3508    10966    2           B_LOGBLK_CUR$=PINCRW(B_LOGBLK_CUR$,SIZEW(B$LOGBLK));

  10966  1 000014   000000 236000 xsym               LDQ     B_LOGBLK_CUR$
         1 000015   000004 036003                    ADLQ    4,DU
         1 000016   000000 756000 xsym               STQ     B_LOGBLK_CUR$

     3509    10967    2           RETURN;

  10967  1 000017   000000 702200 xent               TSX2  ! X66_ARET

     3510    10968    2           END;
     3511    10969         /*
     3512    10970         The following gives an error if cant allocate any more logcial blocks.
     3513    10971         */
     3514    10972    1       ALTRETURN;
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:440  

  10972  1 000020   000000 702200 xent               TSX2  ! X66_AALT

     3515    10973            %PAGE (ARG=XUO$LOGBLKEXSTINIT);

             10986    1   /*******************************************************************************
             10987    1   *                                                                              *
             10988    1   *        XUO$LOGBLKEXSTINIT              XUO$LOGBLKEXSTINIT                       *
             10989    1   *                                                                              *
             10990    1   *******************************************************************************/

     3516    10994        /*D*
     3517    10995
     3518    10996        XUO$LOGBLKEXSTINIT --Logical Block Debug Records (Record Type 11)
     3519    10997
     3520    10998        NAME:  XUO$LOGBLKEXSTINIT
     3521    10999
     3522    11000        PURPOSE:  To build Logical Block Debug Records
     3523    11001
     3524    11002        DESCRIPTION:  This routine is used in building Logical Block
     3525    11003            Debug records.  It fills in initial data that relates to
     3526    11004            the executable information.  The routine altreturns if
     3527    11005            the logical block number is invalid.
     3528    11006
     3529    11007        CALL:  CALL XUO$LOGBLKEXSTINIT (Logical Block Number,
     3530    11008                                 Starting executable statement number,
     3531    11009                                 Starting line number,
     3532    11010                                 Name Pointer,
     3533    11011                                 Lexical Level)
     3534    11012
     3535    11013        INPUT:
     3536    11014            Logical Block Number UBIN
     3537    11015                                The number returned by the call to
     3538    11016                                XUO$LOGBLKALLOC.
     3539    11017            Starting executable statement number  UBIN
     3540    11018                                The word offset into the statement
     3541    11019                                record (type 13) to the statement
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:441  
     3542    11020                                descriptions for this logical block.
     3543    11021                                It is the starting number of the first
     3544    11022                                executable statement of the block.
     3545    11023            Starting Line number UBIN
     3546    11024                                The beginning line number of this
     3547    11025                                logical block.
     3548    11026            Name Pointer        SBIN
     3549    11027                                The word displacement into the debug
     3550    11028                                name record (type 15) locating the
     3551    11029                                name of this logical block.
     3552    11030            Lexical Level       UBIN
     3553    11031                                The nesting level of the block.
     3554    11032                                A contained procedure has a higher
     3555    11033                                lexical level than the procedure which
     3556    11034                                contains it.
     3557    11035
     3558    11036        OUTPUT:
     3559    11037            Updated logical block record
     3560    11038
     3561    11039        B$OBJECT REFERENCE:  B$LOGBLK
     3562    11040        */
     3563    11041        /*B*
     3564    11042
     3565    11043        GLOBAL DATA:  none
     3566    11044
     3567    11045        INTERFACE:  none
     3568    11046
     3569    11047        */
     3570    11048
     3571    11049    1   XUO$LOGBLKEXSTINIT: ENTRY(P_LOGBLK_NUMBER,P_PARAM2,P_PARAM3,P_NAME_POINTER,
             11049            P_LEXICAL_LEVEL) ALTRET;

  11049  1 000021   000000 700200 xent  XUO$LOGBLKE* TSX0  ! X66_AUTO_5
         1 000022   000014 000005                    ZERO    12,5

     3572    11050         /*
     3573    11051         The following section will verify the logblk number to insure that it is valid.
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:442  
     3574    11052         If not, an altreturn will be taken.
     3575    11053         */
     3576    11054    1       LOGBLK_TEMP$=PINCRW(B_LOGBLK_BASE$,P_LOGBLK_NUMBER*SIZEW(B$LOGBLK));

  11054  1 000023   200003 470500                    LDP0    @P_LOGBLK_NUMBER,,AUTO
         1 000024   000000 720100                    LXL0    0,,PR0
         1 000025   000000 636010                    EAQ     0,X0
         1 000026   000002 736000                    QLS     2
         1 000027   000000 036000 xsym               ADLQ    B_LOGBLK_BASE$
         1 000030   200010 756100                    STQ     LOGBLK_TEMP$,,AUTO

     3577    11055    1       IF LOGBLK_TEMP$>=B_LOGBLK_CUR$ THEN

  11055  1 000031   000000 116000 xsym               CMPQ    B_LOGBLK_CUR$
         1 000032   000034 602000 1                  TNC     s:11060

     3578    11056    1           ALTRETURN;

  11056  1 000033   000000 702200 xent               TSX2  ! X66_AALT

     3579    11057         /*
     3580    11058         The following section will partially fill in the exst portion of logblk.
     3581    11059         */
     3582    11060    1       B$LOGBLK.STLINE=P_STARTING_LINE_NUMBER;

  11060  1 000034   200005 471500                    LDP1    @P_PARAM3,,AUTO
         1 000035   100000 721100                    LXL1    0,,PR1
         1 000036   200010 473500                    LDP3    LOGBLK_TEMP$,,AUTO
         1 000037   300000 741100                    STX1    0,,PR3

     3583    11061    1       B$LOGBLK.NPOINTER=P_NAME_POINTER;

  11061  1 000040   200006 474500                    LDP4    @P_NAME_POINTER,,AUTO
         1 000041   400000 720100                    LXL0    0,,PR4
         1 000042   300001 740100                    STX0    1,,PR3

     3584    11062    1       B$LOGBLK.LEXLVL=P_LEXICAL_LEVEL;
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:443  

  11062  1 000043   200007 475500                    LDP5    @P_LEXICAL_LEVEL,,AUTO
         1 000044   500000 236100                    LDQ     0,,PR5
         1 000045   300001 552104                    STBQ    1,'04'O,PR3

     3585    11063    1       B$LOGBLK.STOFFST=P_STARTING_EXST_NUMBER*SIZEW(B$EXST);

  11063  1 000046   200004 476500                    LDP6    @P_PARAM2,,AUTO
         1 000047   600000 236100                    LDQ     0,,PR6
         1 000050   000003 402007                    MPY     3,DL
         1 000051   000000 620006                    EAX0    0,QL
         1 000052   300002 740100                    STX0    2,,PR3

     3586    11064    1       RETURN;

  11064  1 000053   000000 702200 xent               TSX2  ! X66_ARET

     3587    11065            %PAGE (ARG=XUO$LOGBLKEXSTTERM);

             11078    1   /*******************************************************************************
             11079    1   *                                                                              *
             11080    1   *        XUO$LOGBLKEXSTTERM              XUO$LOGBLKEXSTTERM                       *
             11081    1   *                                                                              *
             11082    1   *******************************************************************************/

     3588    11086        /*D*
     3589    11087
     3590    11088        XUO$LOGBLKEXSTTERM --Logical Block Debug Record (Record Type 11)
     3591    11089
     3592    11090        NAME:  XUO$LOGBLKEXSTTERM
     3593    11091
     3594    11092        PURPOSE:  To finish building the Logical Block Debug Record
     3595    11093
     3596    11094        DESCRIPTION:  This routine finishes setting up of the executable
     3597    11095            statement information in the Logical Block entry.  If the
     3598    11096            logical block number passed to it is not invalid, this
     3599    11097            routine will altreturn.
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:444  
     3600    11098
     3601    11099        CALL:  CALL XUO$LOGBLKEXSTTERM (Logical Block Number,
     3602    11100                                 Ending Executable Statement Number,
     3603    11101                                 Ending Line Number)
     3604    11102                      ALTRETURN (Label)
     3605    11103
     3606    11104        INPUT:
     3607    11105            Logical Block Number UBIN
     3608    11106                                The logical block number returned from
     3609    11107                                the call to XUO$LOGBLKALLOC.
     3610    11108            Ending Executable Statement Number  SBIN
     3611    11109                                This is the size in entries of the
     3612    11110                                statement descriptions for this logical
     3613    11111                                block.  It is used to calculate the
     3614    11112                                statements offset.
     3615    11113            Ending Line Number  UBIN
     3616    11114                                The ending line number for this logical
     3617    11115                                block.
     3618    11116        OUTPUT:
     3619    11117            Updated logical block record
     3620    11118
     3621    11119        B$OBJECT REFERENCE:  B$LOGBLK
     3622    11120        */
     3623    11121        /*B*
     3624    11122
     3625    11123        GLOBAL DATA:  none
     3626    11124
     3627    11125        INTERFACE:  none
     3628    11126
     3629    11127        */
     3630    11128
     3631    11129    1   XUO$LOGBLKEXSTTERM: ENTRY (P_LOGBLK_NUMBER,P_PARAM2,P_PARAM3) ALTRET;

  11129  1 000054   000000 700200 xent  XUO$LOGBLKE* TSX0  ! X66_AUTO_5
         1 000055   000014 000005                    ZERO    12,5

     3632    11130         /*
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:445  
     3633    11131         The following section will verify the logblk number.  If not valid, an
     3634    11132         altreturn will be taken.
     3635    11133         */
     3636    11134    1       LOGBLK_TEMP$=PINCRW(B_LOGBLK_BASE$,P_LOGBLK_NUMBER*SIZEW(B$LOGBLK));

  11134  1 000056   200003 470500                    LDP0    @P_LOGBLK_NUMBER,,AUTO
         1 000057   000000 720100                    LXL0    0,,PR0
         1 000060   000000 636010                    EAQ     0,X0
         1 000061   000002 736000                    QLS     2
         1 000062   000000 036000 xsym               ADLQ    B_LOGBLK_BASE$
         1 000063   200010 756100                    STQ     LOGBLK_TEMP$,,AUTO

     3637    11135    1       IF LOGBLK_TEMP$>=B_LOGBLK_CUR$ THEN

  11135  1 000064   000000 116000 xsym               CMPQ    B_LOGBLK_CUR$
         1 000065   000067 602000 1                  TNC     s:11141

     3638    11136    1           ALTRETURN;

  11136  1 000066   000000 702200 xent               TSX2  ! X66_AALT

     3639    11137         /*
     3640    11138         The following section will fill in the final portion of the
     3641    11139         exst part of the logcial block entry.
     3642    11140         */
     3643    11141    1       B$LOGBLK.ENLINE=P_ENDING_LINE_NUMBER;

  11141  1 000067   200005 471500                    LDP1    @P_PARAM3,,AUTO
         1 000070   100000 721100                    LXL1    0,,PR1
         1 000071   200010 473500                    LDP3    LOGBLK_TEMP$,,AUTO
         1 000072   300000 441100                    SXL1    0,,PR3

     3644    11142    1       B$LOGBLK.STSIZE=P_ENDING_EXST_NUMBER-B$LOGBLK.STOFFST/SIZEW(B$EXST);

  11142  1 000073   300002 236100                    LDQ     2,,PR3
         1 000074   000022 772000                    QRL     18
         1 000075   000003 506007                    DIV     3,DL
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:446  
         1 000076   200012 756100                    STQ     LOGBLK_TEMP$+2,,AUTO
         1 000077   200004 474500                    LDP4    @P_PARAM2,,AUTO
         1 000100   400000 236100                    LDQ     0,,PR4
         1 000101   200012 136100                    SBLQ    LOGBLK_TEMP$+2,,AUTO
         1 000102   000000 620006                    EAX0    0,QL
         1 000103   300002 440100                    SXL0    2,,PR3

     3645    11143    1       RETURN;

  11143  1 000104   000000 702200 xent               TSX2  ! X66_ARET

     3646    11144            %PAGE (ARG=XUO$LOGBLKVREBLINIT);

             11157    1   /*******************************************************************************
             11158    1   *                                                                              *
             11159    1   *        XUO$LOGBLKVREBLINIT              XUO$LOGBLKVREBLINIT                     *
             11160    1   *                                                                              *
             11161    1   *******************************************************************************/

     3647    11165        /*D*
     3648    11166        XUO$LOGBLKVREBLINIT --Logical Block Debug Record (Record Type 11)
     3649    11167
     3650    11168        NAME:  XUO$LOGBLKVREBLINIT
     3651    11169
     3652    11170        PURPOSE:  Used in building the Logical Block Debug Records
     3653    11171                  (Record Type 11)
     3654    11172
     3655    11173        DESCRIPTION:  This routine fills in the initial data that
     3656    11174            relates to the variable records in the Logical Block
     3657    11175            Entry.  If the logical block number passed in is
     3658    11176            invalid, this routine will altreturn.
     3659    11177
     3660    11178        CALL:  CALL XUO$LOGBLKVREBLINIT (Logical Block Number,
     3661    11179                                  Starting Variable Number)
     3662    11180                       ALTRETURN (Label)
     3663    11181
     3664    11182        INPUT:
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:447  
     3665    11183            Logical Block Number UBIN
     3666    11184                                The logical block number returned from
     3667    11185                                the call to XUO$LOGBLKALLOC.
     3668    11186            Starting Variable Number  UBIN
     3669    11187                                The word offset into the variable record
     3670    11188                                (type 14) to the variable descriptions
     3671    11189                                for this logical block.
     3672    11190        OUTPUT:
     3673    11191            Updated logical block record
     3674    11192
     3675    11193        B$OBJECT REFERENCE:  B$LOGBLK
     3676    11194        */
     3677    11195        /*B*
     3678    11196
     3679    11197        GLOBAL DATA:  none
     3680    11198
     3681    11199        INTERFACE:  none
     3682    11200
     3683    11201        */
     3684    11202
     3685    11203    1   XUO$LOGBLKVREBLINIT: ENTRY (P_LOGBLK_NUMBER,P_PARAM2) ALTRET;

  11203  1 000105   000000 700200 xent  XUO$LOGBLKV* TSX0  ! X66_AUTO_5
         1 000106   000014 000005                    ZERO    12,5

     3686    11204         /*
     3687    11205         The following section will verify the logblk number.  If not valid, an
     3688    11206         altreturn will be taken.
     3689    11207         */
     3690    11208    1       LOGBLK_TEMP$=PINCRW(B_LOGBLK_BASE$,P_LOGBLK_NUMBER*SIZEW(B$LOGBLK));

  11208  1 000107   200003 470500                    LDP0    @P_LOGBLK_NUMBER,,AUTO
         1 000110   000000 720100                    LXL0    0,,PR0
         1 000111   000000 636010                    EAQ     0,X0
         1 000112   000002 736000                    QLS     2
         1 000113   000000 036000 xsym               ADLQ    B_LOGBLK_BASE$
         1 000114   200010 756100                    STQ     LOGBLK_TEMP$,,AUTO
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:448  

     3691    11209    1       IF LOGBLK_TEMP$>=B_LOGBLK_CUR$ THEN

  11209  1 000115   000000 116000 xsym               CMPQ    B_LOGBLK_CUR$
         1 000116   000120 602000 1                  TNC     s:11215

     3692    11210    1           ALTRETURN;

  11210  1 000117   000000 702200 xent               TSX2  ! X66_AALT

     3693    11211         /*
     3694    11212         The following section will partially fill in the vrebl part of the logical block
     3695    11213         entry.
     3696    11214         */
     3697    11215    1       B$LOGBLK.VAOFFST=P_STARTING_VREBL_NUMBER*SIZEW(B$VREBL);

  11215  1 000120   200004 471500                    LDP1    @P_PARAM2,,AUTO
         1 000121   100000 236100                    LDQ     0,,PR1
         1 000122   000005 402007                    MPY     5,DL
         1 000123   000000 621006                    EAX1    0,QL
         1 000124   200010 473500                    LDP3    LOGBLK_TEMP$,,AUTO
         1 000125   300003 741100                    STX1    3,,PR3

     3698    11216    1       RETURN;

  11216  1 000126   000000 702200 xent               TSX2  ! X66_ARET

     3699    11217            %PAGE (ARG=XUO$LOGBLKVREBLTERM);

             11230    1   /*******************************************************************************
             11231    1   *                                                                              *
             11232    1   *        XUO$LOGBLKVREBLTERM              XUO$LOGBLKVREBLTERM                     *
             11233    1   *                                                                              *
             11234    1   *******************************************************************************/

     3700    11238        /*D*
     3701    11239        XUO$LOGBLKVREBLTERM --Logical Block Debug Record (Record Type 11)
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:449  
     3702    11240
     3703    11241        NAME:  XUO$LOGBLKVREBLTERM
     3704    11242
     3705    11243        PURPOSE:  Used in building Logical Block Debug Records
     3706    11244                  (Record type 11)
     3707    11245
     3708    11246        DESCRIPTION:  This routine is used in building Logical Block
     3709    11247            Debug Records.  It finishes setting up the variable data
     3710    11248            information in the Logical Block entry.  If the logical
     3711    11249            block number passed is invalid, this routing will altreturn.
     3712    11250
     3713    11251        CALL:  CALL XUO$LOGBLKVREBLTERM (Logical Block Number,
     3714    11252                                  Ending Variable Number)
     3715    11253                       ALTRETURN (Label)
     3716    11254
     3717    11255        INPUT:
     3718    11256            Logical Block Number UBIN
     3719    11257                                The logical block number that is
     3720    11258                                returned from the call to XUO$LOGBLKALLOC.
     3721    11259            Ending Variable Number SBIN
     3722    11260                                The index number of the last variable
     3723    11261                                (type 14) for this logical block.
     3724    11262                                It is used to calculate the variable size.
     3725    11263        OUTPUT:
     3726    11264            Updated logical block record
     3727    11265
     3728    11266        B$OBJECT REFERENCE:  B$LOGBLK
     3729    11267        */
     3730    11268        /*B*
     3731    11269
     3732    11270        GLOBAL DATA:  none
     3733    11271
     3734    11272        INTERFACE:  none
     3735    11273
     3736    11274        */
     3737    11275
     3738    11276    1   XUO$LOGBLKVREBLTERM: ENTRY (P_LOGBLK_NUMBER,P_PARAM2) ALTRET;
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:450  

  11276  1 000127   000000 700200 xent  XUO$LOGBLKV* TSX0  ! X66_AUTO_5
         1 000130   000014 000005                    ZERO    12,5

     3739    11277         /*
     3740    11278         The following section will verify the logblk number.  If not valid, an
     3741    11279         altreturn will be taken.
     3742    11280         */
     3743    11281    1       LOGBLK_TEMP$=PINCRW(B_LOGBLK_BASE$,P_LOGBLK_NUMBER*SIZEW(B$LOGBLK));

  11281  1 000131   200003 470500                    LDP0    @P_LOGBLK_NUMBER,,AUTO
         1 000132   000000 720100                    LXL0    0,,PR0
         1 000133   000000 636010                    EAQ     0,X0
         1 000134   000002 736000                    QLS     2
         1 000135   000000 036000 xsym               ADLQ    B_LOGBLK_BASE$
         1 000136   200010 756100                    STQ     LOGBLK_TEMP$,,AUTO

     3744    11282    1       IF LOGBLK_TEMP$>=B_LOGBLK_CUR$ THEN

  11282  1 000137   000000 116000 xsym               CMPQ    B_LOGBLK_CUR$
         1 000140   000142 602000 1                  TNC     s:11288

     3745    11283    1           ALTRETURN;

  11283  1 000141   000000 702200 xent               TSX2  ! X66_AALT

     3746    11284         /*
     3747    11285         The following section will partially fill in the vrebl part of the logical block
     3748    11286         entry.
     3749    11287         */
     3750    11288    1       B$LOGBLK.VASIZE=P_ENDING_VREBL_NUMBER-B$LOGBLK.VAOFFST/SIZEW(B$VREBL);

  11288  1 000142   200010 471500                    LDP1    LOGBLK_TEMP$,,AUTO
         1 000143   100003 236100                    LDQ     3,,PR1
         1 000144   000022 772000                    QRL     18
         1 000145   000005 506007                    DIV     5,DL
         1 000146   200012 756100                    STQ     LOGBLK_TEMP$+2,,AUTO
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:451  
         1 000147   200004 473500                    LDP3    @P_PARAM2,,AUTO
         1 000150   300000 236100                    LDQ     0,,PR3
         1 000151   200012 136100                    SBLQ    LOGBLK_TEMP$+2,,AUTO
         1 000152   000000 620006                    EAX0    0,QL
         1 000153   100003 440100                    SXL0    3,,PR1

     3751    11289    1       RETURN;

  11289  1 000154   000000 702200 xent               TSX2  ! X66_ARET

     3752    11290            %PAGE (ARG=LOGBLK 0/1 CODE);

             11303    1   /*******************************************************************************
             11304    1   *                                                                              *
             11305    1   *        LOGBLK 0/1 CODE              LOGBLK 0/1 CODE                             *
             11306    1   *                                                                              *
             11307    1   *******************************************************************************/

     3753    11311        /*D*
     3754    11312
     3755    11313        XUO$LOGBLKTERM --Logical Block Debug Records (Record Type 11)
     3756    11314
     3757    11315        NAME:  XUO$LOGBLKTERM
     3758    11316
     3759    11317        PURPOSE:  Used in building Logical Block Debug Records
     3760    11318                  (Record Type 11)
     3761    11319
     3762    11320        DESCRIPTION:  This routine must only be called after all logical
     3763    11321            blocks have been filled in.  It sets up the two headers
     3764    11322            that describe the total sizes of the debug records.
     3765    11323
     3766    11324        CALL:  CALL XUO$LOGBLKTERM  ALTRET (Label)
     3767    11325
     3768    11326        INPUT:
     3769    11327            none
     3770    11328
     3771    11329        OUTPUT:
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:452  
     3772    11330            Updated logical block headers
     3773    11331
     3774    11332        B$OBJECT REFERENCE:  B$LBNTRY0, B$LBNTRY1
     3775    11333        */
     3776    11334        /*B*
     3777    11335
     3778    11336        GLOBAL DATA:  none
     3779    11337
     3780    11338        INTERFACE:  none
     3781    11339
     3782    11340        */
     3783    11341
     3784    11342
     3785    11343    1   XUO$LOGBLKTERM: ENTRY ALTRET;

  11343  1 000155   000000 700200 xent  XUO$LOGBLKT* TSX0  ! X66_AUTO_5
         1 000156   000014 000005                    ZERO    12,5

     3786    11344         /*
     3787    11345         The following section builds logical block entry number 0.
     3788    11346         */
     3789    11347    1       B$LBNTRY0.COMPILER=XUO_COMPILER_ID;

  11347  1 000157   000000 470400 xsym               LDP0    B_LOGBLK_ENTRY0$
         1 000160   000000 236000 xsym               LDQ     XUO_COMPILER_ID
         1 000161   000022 736000                    QLS     18
         1 000162   000000 552120                    STBQ    0,'20'O,PR0

     3790    11348    1       B$LBNTRY0.VERS=XUO_VERSION_NUMBER;

  11348  1 000163   000000 220000 xsym               LDX0    XUO_VERSION_NUMBER
         1 000164   000000 470400 xsym               LDP0    B_LOGBLK_ENTRY0$
         1 000165   000000 440100                    SXL0    0,,PR0

     3791    11349    1       B$LBNTRY0.UTS=XUO_OU_UTS;

  11349  1 000166   000000 470400 xsym               LDP0    B_LOGBLK_ENTRY0$
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:453  
         1 000167   000000 235000 xsym               LDA     XUO_OU_UTS
         1 000170   000001 755100                    STA     1,,PR0

     3792    11350         /*
     3793    11351         The following section builds logical block entry number 1.
     3794    11352         */
     3795    11353    1       B$LBNTRY1.NAMESIZ=B_DBGNAME_COUNT;

  11353  1 000171   000000 721000 xsym               LXL1    B_DBGNAME_COUNT
         1 000172   000000 471400 xsym               LDP1    B_LOGBLK_ENTRY1$
         1 000173   100000 741100                    STX1    0,,PR1

     3796    11354    1       B$LBNTRY1.NAMPSIZ=B_DBGNAME_PAGE_SIZE;

  11354  1 000174   000000 720000 xsym               LXL0    B_DBGNAME_PAGE_SIZE
         1 000175   000000 470400 xsym               LDP0    B_LOGBLK_ENTRY1$
         1 000176   000000 440100                    SXL0    0,,PR0

     3797    11355    1       B$LBNTRY1.STMNTSIZ=(B_EXST_COUNT+1)*SIZEW(B$EXST);

  11355  1 000177   000000 236000 xsym               LDQ     B_EXST_COUNT
         1 000200   000003 402007                    MPY     3,DL
         1 000201   000003 620006                    EAX0    3,QL
         1 000202   000000 470400 xsym               LDP0    B_LOGBLK_ENTRY1$
         1 000203   000001 740100                    STX0    1,,PR0

     3798    11356    1       B$LBNTRY1.STMNTPSIZ=B_EXST_PAGE_SIZE;

  11356  1 000204   000000 721000 xsym               LXL1    B_EXST_PAGE_SIZE
         1 000205   000001 441100                    SXL1    1,,PR0

     3799    11357    1       B$LBNTRY1.VREBLSIZ=(B_VREBL_COUNT+1)*SIZEW(B$VREBL);

  11357  1 000206   000000 236000 xsym               LDQ     B_VREBL_COUNT
         1 000207   000005 402007                    MPY     5,DL
         1 000210   000005 622006                    EAX2    5,QL
         1 000211   000002 742100                    STX2    2,,PR0
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:454  

     3800    11358    1       B$LBNTRY1.VREBLPSIZ=B_VREBL_PAGE_SIZE;

  11358  1 000212   000000 723000 xsym               LXL3    B_VREBL_PAGE_SIZE
         1 000213   000002 443100                    SXL3    2,,PR0

     3801    11359    1       B$LBNTRY1.INTRYSIZ=(B_INTNTRY_COUNT+1)*SIZEW(B$INTNTRY);

  11359  1 000214   000000 235000 xsym               LDA     B_INTNTRY_COUNT
         1 000215   000001 735000                    ALS     1
         1 000216   000002 624005                    EAX4    2,AL
         1 000217   000003 744100                    STX4    3,,PR0

     3802    11360    1       B$LBNTRY1.INTRYPSIZ=B_INTNTRY_PAGE_SIZE;

  11360  1 000220   000000 725000 xsym               LXL5    B_INTNTRY_PAGE_SIZE
         1 000221   000003 445100                    SXL5    3,,PR0

     3803    11361    1       RETURN;

  11361  1 000222   000000 702200 xent               TSX2  ! X66_ARET

     3804    11362
     3805    11363            %PAGE(ARG=LOGBLK NOAUTO);

             11376    1   /*******************************************************************************
             11377    1   *                                                                              *
             11378    1   *        LOGBLK NOAUTO              LOGBLK NOAUTO                                 *
             11379    1   *                                                                              *
             11380    1   *******************************************************************************/

     3806    11384         /**/
     3807    11385    1   XUO$LOGBLKNOAUTO: ENTRY (P_LOGBLK_NUMBER,P_PARAM2,P_PARAM3) ALTRET;

  11385  1 000223   000000 700200 xent  XUO$LOGBLKN* TSX0  ! X66_AUTO_5
         1 000224   000014 000005                    ZERO    12,5

PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:455  
     3808    11386         /*
     3809    11387         The following section fills in the static auto pointer
     3810    11388         */
     3811    11389    1       B$LBNTRY0.NO_AUTO.OPNDTYP=P_OPNDTYP;

  11389  1 000225   200003 470500                    LDP0    @P_LOGBLK_NUMBER,,AUTO
         1 000226   000000 471400 xsym               LDP1    B_LOGBLK_ENTRY0$
         1 000227   000000 236100                    LDQ     0,,PR0
         1 000230   000040 736000                    QLS     32
         1 000231   100002 676100                    ERQ     2,,PR1
         1 000232   740000 376003                    ANQ     -16384,DU
         1 000233   100002 656100                    ERSQ    2,,PR1

     3812    11390    1       B$LBNTRY0.NO_AUTO.OPERAND=P_OPERAND;

  11390  1 000234   200004 473500                    LDP3    @P_PARAM2,,AUTO
         1 000235   300000 236100                    LDQ     0,,PR3
         1 000236   000022 736000                    QLS     18
         1 000237   100002 552120                    STBQ    2,'20'O,PR1

     3813    11391    1       B$LBNTRY0.NO_AUTO.OFFSET=P_OFFSET;

  11391  1 000240   200005 474500                    LDP4    @P_PARAM3,,AUTO
         1 000241   400000 720100                    LXL0    0,,PR4
         1 000242   100002 440100                    SXL0    2,,PR1

     3814    11392    1       RETURN;

  11392  1 000243   000000 702200 xent               TSX2  ! X66_ARET
     3815    11393
     3816    11394    1   END XUO$LOGBLK;
     3817    11395        %EOD;

PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:456  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$LOGBLK.
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:457  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     7-0-0/w PTR         r     1 @P_LEXICAL_LEVEL           3-0-0/w PTR         r     1 @P_LOGBLK_NUMBER
     6-0-0/w PTR         r     1 @P_NAME_POINTER            4-0-0/w PTR         r     1 @P_PARAM2
     5-0-0/w PTR         r     1 @P_PARAM3                 10-0-0/w PTR         r     1 LOGBLK_TEMP$
    *0-0-0/w SBIN        r     1 P_ENDING_EXST_NUMBER      *0-0-0/w UBIN        r     1 P_ENDING_LINE_NUMBER
    *0-0-0/w SBIN        r     1 P_ENDING_VREBL_NUMBER
    *0-0-0/w UBIN        r     1 P_LEXICAL_LEVEL           *0-0-0/w UBIN        r     1 P_LOGBLK_NUMBER
    *0-0-0/w SBIN        r     1 P_NAME_POINTER            *0-0-0/w UBIN        r     1 P_OFFSET
    *0-0-0/w UBIN        r     1 P_OPERAND                 *0-0-0/w UBIN        r     1 P_OPNDTYP
    *0-0-0/w UBIN        r     1 P_PARAM2                  *0-0-0/w UBIN        r     1 P_PARAM3
    *0-0-0/w UBIN        r     1 P_STARTING_EXST_NUMBER
    *0-0-0/w UBIN        r     1 P_STARTING_LINE_NUMBER
    *0-0-0/w UBIN        r     1 P_STARTING_VREBL_NUMBER

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 B_DBGNAME_COUNT            0-0-0/w UBIN        r     1 B_DBGNAME_PAGE_SIZE
     0-0-0/w SBIN        r     1 B_EXST_COUNT               0-0-0/w UBIN        r     1 B_EXST_PAGE_SIZE
     0-0-0/w SBIN        r     1 B_INTNTRY_COUNT            0-0-0/w UBIN        r     1 B_INTNTRY_PAGE_SIZE
     0-0-0/w PTR         r     1 B_LOGBLK_BASE$             0-0-0/w SBIN        r     1 B_LOGBLK_COUNT
     0-0-0/w PTR         r     1 B_LOGBLK_CUR$              0-0-0/w PTR         r     1 B_LOGBLK_END$
     0-0-0/w PTR         r     1 B_LOGBLK_ENTRY0$           0-0-0/w PTR         r     1 B_LOGBLK_ENTRY1$
     0-0-0/w SBIN        r     1 B_VREBL_COUNT              0-0-0/w UBIN        r     1 B_VREBL_PAGE_SIZE
     0-0-0/w UBIN        r     1 XUO_COMPILER_ID            0-0-0/w UBIN        r     1 XUO_OU_UTS
     0-0-0/c STRC(18)    r     1 XUO_VERSION_NUMBER

  ****  BASED and DCB variables  ****

PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:458  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(108)   r     1 B$EXST                     0-0-0/w STRC(72)    r     1 B$INTNTRY
     0-0-0/w STRC(144)   r     1 B$LBNTRY0                  0-0-0/w STRC(144)   r     1 B$LBNTRY1
     0-0-0/w STRC(144)   r     1 B$LOGBLK                   0-0-0/w STRC(180)   r     1 B$VREBL


   Procedure XUO$LOGBLK requires 164 words for executable code.
   Procedure XUO$LOGBLK requires 12 words of local(AUTO) storage.
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:459  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:460  
          MINI XREF LISTING

B$EXST
     10475**DCL     11063--ASSIGN  11142--ASSIGN  11355--ASSIGN
B$EXST.OU
     10484**DCL     10490--REDEF
B$INTNTRY
     10830**DCL     11359--ASSIGN
B$INTNTRY.OU
     10834**DCL     10841--REDEF
B$LBNTRY0.COMPILER
     10298**DCL     11347<<ASSIGN
B$LBNTRY0.NO_AUTO
     10321**DCL     10326--REDEF
B$LBNTRY0.NO_AUTO.OFFSET
     10325**DCL     11391<<ASSIGN
B$LBNTRY0.NO_AUTO.OPERAND
     10324**DCL     11390<<ASSIGN
B$LBNTRY0.NO_AUTO.OPNDTYP
     10322**DCL     11389<<ASSIGN
B$LBNTRY0.UTS
     10318**DCL     11349<<ASSIGN
B$LBNTRY0.VERS
     10312**DCL     11348<<ASSIGN
B$LBNTRY0.VERSION
     10310**DCL     10312--REDEF
B$LBNTRY1.INTRYPSIZ
     10353**DCL     11360<<ASSIGN
B$LBNTRY1.INTRYSIZ
     10350**DCL     11359<<ASSIGN
B$LBNTRY1.NAMESIZ
     10332**DCL     11353<<ASSIGN
B$LBNTRY1.NAMPSIZ
     10335**DCL     11354<<ASSIGN
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:461  
B$LBNTRY1.STMNTPSIZ
     10341**DCL     11356<<ASSIGN
B$LBNTRY1.STMNTSIZ
     10338**DCL     11355<<ASSIGN
B$LBNTRY1.VREBLPSIZ
     10347**DCL     11358<<ASSIGN
B$LBNTRY1.VREBLSIZ
     10344**DCL     11357<<ASSIGN
B$LOGBLK
     10358**DCL     10966--ASSIGN  11054--ASSIGN  11134--ASSIGN  11208--ASSIGN  11281--ASSIGN
B$LOGBLK.ENLINE
     10362**DCL     11141<<ASSIGN
B$LOGBLK.LEXLVL
     10369**DCL     11062<<ASSIGN
B$LOGBLK.NPOINTER
     10364**DCL     11061<<ASSIGN
B$LOGBLK.STLINE
     10359**DCL     11060<<ASSIGN
B$LOGBLK.STOFFST
     10373**DCL     11063<<ASSIGN  11142>>ASSIGN
B$LOGBLK.STSIZE
     10377**DCL     11142<<ASSIGN
B$LOGBLK.VAOFFST
     10380**DCL     11215<<ASSIGN  11288>>ASSIGN
B$LOGBLK.VASIZE
     10384**DCL     11288<<ASSIGN
B$VREBL
     10624**DCL     11215--ASSIGN  11288--ASSIGN  11357--ASSIGN
B$VREBL.ADR
     10625**DCL     10637--REDEF
B_DBGNAME_COUNT
     10447**DCL     11353>>ASSIGN
B_DBGNAME_PAGE_SIZE
     10450**DCL     11354>>ASSIGN
B_EXST_COUNT
     10596**DCL     11355>>ASSIGN
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:462  
B_EXST_PAGE_SIZE
     10599**DCL     11356>>ASSIGN
B_INTNTRY_COUNT
     10902**DCL     11359>>ASSIGN
B_INTNTRY_PAGE_SIZE
     10905**DCL     11360>>ASSIGN
B_LOGBLK_BASE$
     10400**DCL     11054>>ASSIGN  11134>>ASSIGN  11208>>ASSIGN  11281>>ASSIGN
B_LOGBLK_COUNT
     10405**DCL     10964<<ASSIGN  10964>>ASSIGN  10965>>ASSIGN
B_LOGBLK_CUR$
     10403**DCL     10962>>IF      10966<<ASSIGN  10966>>ASSIGN  11055>>IF      11135>>IF      11209>>IF
     11282>>IF
B_LOGBLK_END$
     10404**DCL     10962>>IF
B_LOGBLK_ENTRY0$
     10401**DCL     10295--IMP-PTR 11347>>ASSIGN  11348>>ASSIGN  11349>>ASSIGN  11389>>ASSIGN  11390>>ASSIGN
     11391>>ASSIGN
B_LOGBLK_ENTRY1$
     10402**DCL     10331--IMP-PTR 11353>>ASSIGN  11354>>ASSIGN  11355>>ASSIGN  11356>>ASSIGN  11357>>ASSIGN
     11358>>ASSIGN  11359>>ASSIGN  11360>>ASSIGN
B_VREBL_COUNT
     10802**DCL     11357>>ASSIGN
B_VREBL_PAGE_SIZE
     10805**DCL     11358>>ASSIGN
LOGBLK_TEMP$
     10934**DCL     10358--IMP-PTR 11054<<ASSIGN  11055>>IF      11060>>ASSIGN  11061>>ASSIGN  11062>>ASSIGN
     11063>>ASSIGN  11134<<ASSIGN  11135>>IF      11141>>ASSIGN  11142>>ASSIGN  11142>>ASSIGN  11208<<ASSIGN
     11209>>IF      11215>>ASSIGN  11281<<ASSIGN  11282>>IF      11288>>ASSIGN  11288>>ASSIGN
P_ENDING_EXST_NUMBER
     10241**DCL     11142>>ASSIGN
P_ENDING_LINE_NUMBER
     10265**DCL     11141>>ASSIGN
P_ENDING_VREBL_NUMBER
     10250**DCL     11288>>ASSIGN
P_LEXICAL_LEVEL
PL6.E3A0      #016=XUO$LOGBLK File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:32 Page:463  
     10272**DCL        53--PROC    11049--ENTRY   11062>>ASSIGN
P_LOGBLK_NUMBER
     10226**DCL        53--PROC    10230--REDEF   10956--ENTRY   10965<<ASSIGN  11049--ENTRY   11054>>ASSIGN
     11129--ENTRY   11134>>ASSIGN  11203--ENTRY   11208>>ASSIGN  11276--ENTRY   11281>>ASSIGN  11385--ENTRY
P_NAME_POINTER
     10271**DCL        53--PROC    11049--ENTRY   11061>>ASSIGN
P_OFFSET
     10269**DCL     11391>>ASSIGN
P_OPERAND
     10254**DCL     11390>>ASSIGN
P_OPNDTYP
     10230**DCL     11389>>ASSIGN
P_PARAM2
     10232**DCL        53--PROC    10236--REDEF   10241--REDEF   10245--REDEF   10250--REDEF   10254--REDEF
     11049--ENTRY   11129--ENTRY   11203--ENTRY   11276--ENTRY   11385--ENTRY
P_PARAM3
     10257**DCL        53--PROC    10261--REDEF   10265--REDEF   10269--REDEF   11049--ENTRY   11129--ENTRY
     11385--ENTRY
P_STARTING_EXST_NUMBER
     10236**DCL     11063>>ASSIGN
P_STARTING_LINE_NUMBER
     10261**DCL     11060>>ASSIGN
P_STARTING_VREBL_NUMBER
     10245**DCL     11215>>ASSIGN
XUO_COMPILER_ID
     10929**DCL     11347>>ASSIGN
XUO_OU_UTS
     10933**DCL     11349>>ASSIGN
XUO_VERSION_NUMBER
     10930**DCL     11348>>ASSIGN

PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:464  
     3818        1        /*M*     XUO$HEADSTART  -- THIS MODULE CONTAINS ROUTINES THAT  BUILD THE HEAD */
     3819        2        /*T***********************************************************/
     3820        3        /*T*                                                         */
     3821        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3822        5        /*T*                                                         */
     3823        6        /*T***********************************************************/
     3824        7        /*P*
     3825        8
     3826        9        NAME:  XUO$HEADSTART
     3827       10
     3828       11
     3829       12        PURPOSE:  To build the start address field of the Head Record.
     3830       13
     3831       14        DESCRIPTION:  This routine will fill in the start address
     3832       15            of a module.  It should be called only in the case of
     3833       16            the MAIN program.  The remaining fields of the Head
     3834       17            Record are filled in by calling XUO$OUTERM after all
     3835       18            the records have been processed.
     3836       19
     3837       20        */
     3838       21        /*D*
     3839       22
     3840       23        NAME:  XUO$HEADSTART
     3841       24
     3842       25        CALL:  CALL XUO$HEADSTART(Operand Type,
     3843       26                           Operand,
     3844       27                           Offset)
     3845       28
     3846       29
     3847       30        INPUT:
     3848       31            Operand Type        UBIN
     3849       32                                An operand type of 0 indicates that
     3850       33                                the object unit is not the main
     3851       34                                program.  For the main program the
     3852       35                                fields are defined as follows:
     3853       36                                  1 - section
     3854       37                                  2 - entref
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:465  
     3855       38                                  3 - symref
     3856       39                                  4 - constant
     3857       40                                  5 - segdef
     3858       41                                  6 - segref
     3859       42
     3860       43            Operand             UBIN
     3861       44                                If the operand type = 4, the operand
     3862       45                                field is an unsigned constant.
     3863       46                                If the operand type is not equal 4 (or
     3864       47                                0), then the operand field is an entry
     3865       48                                number into the table specified by
     3866       49                                the operand type.
     3867       50
     3868       51            Offset              UBIN
     3869       52                                The word displacement from the offset
     3870       53                                found in the record key to the
     3871       54                                relocatable item.  (The offset found in
     3872       55                                the record key is the offset from the
     3873       56                                origin of the section.)
     3874       57
     3875       58        OUTPUT:
     3876       59            The updated head record.
     3877       60
     3878       61        B$OBJECT REFERENCE:  B$OUHEAD
     3879       62        */
     3880       63        /*B*
     3881       64
     3882       65        GLOBAL DATA:  none
     3883       66
     3884       67        INTERFACE:  none
     3885       68
     3886       69        */
     3887       70
     3888       71        XUO$HEADSTART: PROC (P_PARAM1,P_OPERAND,P_OFFSET);
     3889       72         /*
     3890       73            */
     3891       74        %INCLUDE ZVA_SYSTEM_FILE;
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:466  
     3892     6325        %PAGE (ARG=INCLUDES);

              6338    1   /*******************************************************************************
              6339    1   *                                                                              *
              6340    1   *        INCLUDES              INCLUDES                                            *
              6341    1   *                                                                              *
              6342    1   *******************************************************************************/

     3893     6346        %INCLUDE B$OBJECT_C;
     3894     9776        %INCLUDE XUO$OBJ_C;
     3895    10186        %PAGE (ARG=PARAMETERS);

             10199    1   /*******************************************************************************
             10200    1   *                                                                              *
             10201    1   *        PARAMETERS              PARAMETERS                                        *
             10202    1   *                                                                              *
             10203    1   *******************************************************************************/

     3896    10207    1   DCL P_PARAM1 UBIN;
     3897    10208         /*
     3898    10209         The following defintion is for XUO$HEADSTART
     3899    10210         */
     3900    10211    1   DCL P_OPERAND_TYPE REDEF P_PARAM1 UBIN;
     3901    10212         /*
     3902    10213         The following definition is for XUO$HEADNAME
     3903    10214         */
     3904    10215    1   DCL 1 P_NAME REDEF P_PARAM1 ALIGNED,
     3905    10216    1         2 SIZE UBIN HALF UNAL,
     3906    10217    1         2 TEXT CHAR(P_NAME.SIZE);
     3907    10218         /*
     3908    10219         The following definition is for XUO$HEAD_SEVERITY
     3909    10220         */
     3910    10221    1   DCL P_SEVERITY REDEF P_PARAM1 UBIN;
     3911    10222    1   DCL P_OPERAND UBIN;
     3912    10223    1   DCL P_OFFSET UBIN;
     3913    10224        %PAGE (ARG=HEAD DATA);

PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:467  
             10237    1   /*******************************************************************************
             10238    1   *                                                                              *
             10239    1   *        HEAD DATA              HEAD DATA                                          *
             10240    1   *                                                                              *
             10241    1   *******************************************************************************/

     3914    10245        %B$HEADKEY (STCLASS=SYMREF,HFLAGINIT=);
     3915    10257    1   DCL B$OUHEAD$ PTR SYMREF;
     3916    10258    1   DCL OUHEAD$ PTR;
     3917    10259        %B$OUHEAD (STCLASS="BASED(OUHEAD$)");
     3918    10377        %PLIST;
     3919    10378        %PAGE (ARG=RECORD POINTERS/DATA);

             10391    1   /*******************************************************************************
             10392    1   *                                                                              *
             10393    1   *        RECORD POINTERS/DATA              RECORD POINTERS/DATA                    *
             10394    1   *                                                                              *
             10395    1   *******************************************************************************/

     3920    10399        %B_PROGRAM_POINTERS;
     3921    10414        %B_RELOCATION_POINTERS;
     3922    10429        %B_DNAME_POINTERS;
     3923    10449        %B_RNAME_POINTERS;
     3924    10469        %B_EDEF_POINTERS;
     3925    10489        %B$EDEF;
     3926    10559        %B_EREF_POINTERS;
     3927    10579        %B$EREF;
     3928    10622        %B_SDEF_POINTERS;
     3929    10642        %B$SDEF;
     3930    10696        %B_SREF_POINTERS;
     3931    10716        %B$SREF;
     3932    10730        %B_SEGDEF_POINTERS;
     3933    10750        %B$SEGDEF;
     3934    10805        %B_SEGREF_POINTERS;
     3935    10825        %B$SEGREF;
     3936    10842        %B_LOGBLK_POINTERS;
     3937    10864        %B$LBNTRY0;
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:468  
     3938    10900        %B$LBNTRY1;
     3939    10927        %B$LOGBLK;
     3940    10958        %PLIST;
     3941    10959        %PAGE (ARG=MISC DATA);

             10972    1   /*******************************************************************************
             10973    1   *                                                                              *
             10974    1   *        MISC DATA              MISC DATA                                          *
             10975    1   *                                                                              *
             10976    1   *******************************************************************************/

     3942    10980    1   DCL XUO_SCHEMA_REQUIRED BIT(1) ALIGNED SYMREF;
     3943    10981    1   DCL XUO_COMPILER_ID UBIN SYMREF;
     3944    10982    1   DCL 1 XUO_VERSION_NUMBER SYMREF,
     3945    10983    1         2 LETTER CHAR(1) UNAL,
     3946    10984    1         2 NUMBER UBIN(9) UNAL;
     3947    10985    1   DCL XUO_OU_UTS SYMREF UBIN;
     3948    10986    1   DCL XUO_MAXIMUM_SEVERITY UBIN SYMREF;
     3949    10987    1   DCL XUO_WORDSIZE SYMREF UBIN;
     3950    10988
     3951    10989        %PAGE (ARG=CODE);

             11002    1   /*******************************************************************************
             11003    1   *                                                                              *
             11004    1   *        CODE              CODE                                                  *
             11005    1   *                                                                              *
             11006    1   *******************************************************************************/

     3952    11010    1       OUHEAD$=B$OUHEAD$;
     3953    11011    1       B$OUHEAD.START.OPNDTYP=P_OPERAND_TYPE;
     3954    11012    1       B$OUHEAD.START.OPERAND=P_OPERAND;
     3955    11013    1       B$OUHEAD.START.OFFSET=P_OFFSET;
     3956    11014    1       RETURN;
     3957    11015        %PAGE (ARG=XUO$HEADNAME);

             11028    1   /*******************************************************************************
             11029    1   *                                                                              *
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:469  
             11030    1   *        XUO$HEADNAME              XUO$HEADNAME                                    *
             11031    1   *                                                                              *
             11032    1   *******************************************************************************/

     3958    11036        /*D*
     3959    11037
     3960    11038        XUO$HEADNAME -- Head Record Key
     3961    11039
     3962    11040        NAME:  XUO$HEADNAME
     3963    11041
     3964    11042        PURPOSE:  To build the head record key.
     3965    11043
     3966    11044        DESCRIPTION:  This routine builds the Head Record Key.
     3967    11045             Each object unit is uniquely identified by it head
     3968    11046             record key.  Byte 0 of the key contains the name
     3969    11047             size followed by the character string which is
     3970    11048             the object unit name.
     3971    11049
     3972    11050        CALL:  CALL XUO$HEADNAME(Name)
     3973    11051
     3974    11052        INPUT:
     3975    11053            Name
     3976    11054              Size              UBIN HALF UNALIGNED
     3977    11055                                The number of bytes in the object unit
     3978    11056                                name.
     3979    11057              Text              CHAR( Size )
     3980    11058                                The character string which is the name
     3981    11059                                of the object unit.  This name is equal
     3982    11060                                to the entry definition name with the
     3983    11061                                attribute 'object unit name'.
     3984    11062
     3985    11063        OUTPUT:
     3986    11064            Updated head key
     3987    11065
     3988    11066        B$OBJECT REFERENCE:  B$HEADKEY
     3989    11067        */
     3990    11068        /*B*
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:470  
     3991    11069
     3992    11070        GLOBAL DATA:  none
     3993    11071
     3994    11072        INTERFACE:  none
     3995    11073
     3996    11074        */
     3997    11075
     3998    11076    1   XUO$HEADNAME: ENTRY(P_PARAM1);
     3999    11077         /*
     4000    11078         The following will set the size and the name in the head  key.
     4001    11079         */
     4002    11080    1       B$HEADKEY.KEYSIZ=P_NAME.SIZE+1;
     4003    11081    1       B$HEADKEY.TEXT=P_NAME.TEXT;
     4004    11082    1       RETURN;
     4005    11083            %PAGE (ARG=XUO$HEAD_SEVERITY);

             11096    1   /*******************************************************************************
             11097    1   *                                                                              *
             11098    1   *        XUO$HEAD_SEVERITY              XUO$HEAD_SEVERITY                          *
             11099    1   *                                                                              *
             11100    1   *******************************************************************************/

     4006    11104        /*D*
     4007    11105
     4008    11106        XUO$HEAD_SEVERITY --Head Record
     4009    11107
     4010    11108        NAME:  XUO$HEAD_SEVERITY
     4011    11109
     4012    11110        PURPOSE:  To build the severity level field of the head record.
     4013    11111
     4014    11112        DESCRIPTION:  This routine builds the severity level field
     4015    11113            in the head record.  The severity level indicates the
     4016    11114            maximum severity of errors encountered during compilation.
     4017    11115
     4018    11116        CALL:  CALL XUO$HEAD_SEVERITY( Severity )
     4019    11117
     4020    11118        INPUT:
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:471  
     4021    11119            Severity            UBIN ALIGNED
     4022    11120                                The value that represents the severity
     4023    11121                                to be associated with the object unit.
     4024    11122                                The routine will maintain the maximum
     4025    11123                                severity received.
     4026    11124
     4027    11125        OUTPUT:
     4028    11126            Updated head record
     4029    11127
     4030    11128        B$OBJECT REFERENCE:  B$OUHEAD
     4031    11129        */
     4032    11130        /*B*
     4033    11131
     4034    11132        GLOBAL DATA:  none
     4035    11133
     4036    11134        INTERFACE:  none
     4037    11135
     4038    11136        */
     4039    11137    1   XUO$HEAD_SEVERITY: ENTRY(P_PARAM1);
     4040    11138         /*
     4041    11139         The following will maintain the highest severity
     4042    11140         encountered in the object unit.
     4043    11141         */
     4044    11142    1       IF P_SEVERITY>XUO_MAXIMUM_SEVERITY THEN
     4045    11143    1           XUO_MAXIMUM_SEVERITY=P_SEVERITY;
     4046    11144    1       RETURN;
     4047    11145            %PAGE (ARG=XUO$HEADTERM);

             11158    1   /*******************************************************************************
             11159    1   *                                                                              *
             11160    1   *        XUO$HEADTERM              XUO$HEADTERM                                    *
             11161    1   *                                                                              *
             11162    1   *******************************************************************************/

     4048    11166    1   XUO$HEADTERM: ENTRY;
     4049    11167         /*
     4050    11168         The following fills in the final values of the head record
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:472  
     4051    11169         */
     4052    11170    1       OUHEAD$=B$OUHEAD$;
     4053    11171    1       B$OUHEAD.UTS=XUO_OU_UTS;
     4054    11172    1       B$OUHEAD.WORDSIZE=XUO_WORDSIZE;
     4055    11173    1       B$OUHEAD.COMPILER=XUO_COMPILER_ID;
     4056    11174    1       B$OUHEAD.VERS=XUO_VERSION_NUMBER;
     4057    11175    1       B$OUHEAD.SEVLEV=XUO_MAXIMUM_SEVERITY;
     4058    11176         /*
     4059    11177            Check to see if no logical blocks
     4060    11178            were output or the no
     4061    11179            debug option was specified.
     4062    11180            */
     4063    11181    1       IF B_LOGBLK_COUNT<0 OR XUO_SCHEMA_REQUIRED='0'B THEN
     4064    11182    1           B$OUHEAD.LOGBLKSIZ=0;
     4065    11183    1       ELSE
     4066    11184    1           B$OUHEAD.LOGBLKSIZ=(B_LOGBLK_COUNT+1)*SIZEW(B$LOGBLK)+SIZEW(B$LBNTRY0)+SIZEW
             11184                    (B$LBNTRY1);
     4067    11185    1       B$OUHEAD.PROGPSIZ=B_PROGRAM_PAGE_SIZE;
     4068    11186    1       B$OUHEAD.RELPSIZ=B_RELOCATION_PAGE_SIZE;
     4069    11187    1       B$OUHEAD.DNAMSIZ=B_DNAME_COUNT;
     4070    11188    1       B$OUHEAD.DNAMPSIZ=B_DNAME_PAGE_SIZE;
     4071    11189    1       B$OUHEAD.RNAMSIZ=B_RNAME_COUNT;
     4072    11190    1       B$OUHEAD.RNAMPSIZ=B_RNAME_PAGE_SIZE;
     4073    11191    1       B$OUHEAD.EDEFSIZ=(B_EDEF_COUNT+1)*SIZEW(B$EDEF);
     4074    11192    1       B$OUHEAD.EDEFPSIZ=B_EDEF_PAGE_SIZE;
     4075    11193    1       B$OUHEAD.EREFSIZ=(B_EREF_COUNT+1)*SIZEW(B$EREF);
     4076    11194    1       B$OUHEAD.EREFPSIZ=B_EREF_PAGE_SIZE;
     4077    11195    1       B$OUHEAD.SDEFSIZ=(B_SDEF_COUNT+1)*SIZEW(B$SDEF);
     4078    11196    1       B$OUHEAD.SDEFPSIZ=B_SDEF_PAGE_SIZE;
     4079    11197    1       B$OUHEAD.SREFSIZ=(B_SREF_COUNT+1)*SIZEW(B$SREF);
     4080    11198    1       B$OUHEAD.SREFPSIZ=B_SREF_PAGE_SIZE;
     4081    11199    1       B$OUHEAD.SEGDEFSIZ=(B_SEGDEF_COUNT+1)*SIZEW(B$SEGDEF);
     4082    11200    1       B$OUHEAD.SEGDEFPSIZ=B_SEGDEF_PAGE_SIZE;
     4083    11201    1       B$OUHEAD.SEGREFSIZ=(B_SEGREF_COUNT+1)*SIZEW(B$SEGREF);
     4084    11202    1       B$OUHEAD.SEGREFPSIZ=B_SEGREF_PAGE_SIZE;
     4085    11203    1       RETURN;
     4086    11204    1   END XUO$HEADSTART;
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:473  
     4087    11205        %EOD;

PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:474  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$HEADSTART.

   Procedure XUO$HEADSTART requires 115 words for executable code.
   Procedure XUO$HEADSTART requires 8 words of local(AUTO) storage.

PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:475  

 Object Unit name= XUO$HEADSTART                              File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:32:48.56 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   115    163  XUO$HEADSTART

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        3  XUO$HEADSTART
     1     23                  yes      Std        1  XUO$HEADNAME
     1     40                  yes      Std        1  XUO$HEAD_SEVERITY
     1     51                  yes      Std        0  XUO$HEADTERM

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:476  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$HEADKEY                             B$OUHEAD$
     B_PROGRAM_PAGE_SIZE                   B_RELOCATION_PAGE_SIZE                B_DNAME_COUNT
     B_DNAME_PAGE_SIZE                     B_RNAME_COUNT                         B_RNAME_PAGE_SIZE
     B_EDEF_COUNT                          B_EDEF_PAGE_SIZE                      B_EREF_COUNT
     B_EREF_PAGE_SIZE                      B_SDEF_COUNT                          B_SDEF_PAGE_SIZE
     B_SREF_COUNT                          B_SREF_PAGE_SIZE                      B_SEGDEF_COUNT
     B_SEGDEF_PAGE_SIZE                    B_SEGREF_COUNT                        B_SEGREF_PAGE_SIZE
     B_LOGBLK_COUNT                        XUO_SCHEMA_REQUIRED                   XUO_COMPILER_ID
     XUO_VERSION_NUMBER                    XUO_OU_UTS                            XUO_MAXIMUM_SEVERITY
     XUO_WORDSIZE                          B_VECTNIL
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:477  


     3818        1        /*M*     XUO$HEADSTART  -- THIS MODULE CONTAINS ROUTINES THAT  BUILD THE HEAD */
     3819        2        /*T***********************************************************/
     3820        3        /*T*                                                         */
     3821        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3822        5        /*T*                                                         */
     3823        6        /*T***********************************************************/
     3824        7        /*P*
     3825        8
     3826        9        NAME:  XUO$HEADSTART
     3827       10
     3828       11
     3829       12        PURPOSE:  To build the start address field of the Head Record.
     3830       13
     3831       14        DESCRIPTION:  This routine will fill in the start address
     3832       15            of a module.  It should be called only in the case of
     3833       16            the MAIN program.  The remaining fields of the Head
     3834       17            Record are filled in by calling XUO$OUTERM after all
     3835       18            the records have been processed.
     3836       19
     3837       20        */
     3838       21        /*D*
     3839       22
     3840       23        NAME:  XUO$HEADSTART
     3841       24
     3842       25        CALL:  CALL XUO$HEADSTART(Operand Type,
     3843       26                           Operand,
     3844       27                           Offset)
     3845       28
     3846       29
     3847       30        INPUT:
     3848       31            Operand Type        UBIN
     3849       32                                An operand type of 0 indicates that
     3850       33                                the object unit is not the main
     3851       34                                program.  For the main program the
     3852       35                                fields are defined as follows:
     3853       36                                  1 - section
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:478  
     3854       37                                  2 - entref
     3855       38                                  3 - symref
     3856       39                                  4 - constant
     3857       40                                  5 - segdef
     3858       41                                  6 - segref
     3859       42
     3860       43            Operand             UBIN
     3861       44                                If the operand type = 4, the operand
     3862       45                                field is an unsigned constant.
     3863       46                                If the operand type is not equal 4 (or
     3864       47                                0), then the operand field is an entry
     3865       48                                number into the table specified by
     3866       49                                the operand type.
     3867       50
     3868       51            Offset              UBIN
     3869       52                                The word displacement from the offset
     3870       53                                found in the record key to the
     3871       54                                relocatable item.  (The offset found in
     3872       55                                the record key is the offset from the
     3873       56                                origin of the section.)
     3874       57
     3875       58        OUTPUT:
     3876       59            The updated head record.
     3877       60
     3878       61        B$OBJECT REFERENCE:  B$OUHEAD
     3879       62        */
     3880       63        /*B*
     3881       64
     3882       65        GLOBAL DATA:  none
     3883       66
     3884       67        INTERFACE:  none
     3885       68
     3886       69        */
     3887       70
     3888       71        XUO$HEADSTART: PROC (P_PARAM1,P_OPERAND,P_OFFSET);

     71  1 000000   000000 700200 xent  XUO$HEADSTA* TSX0  ! X66_AUTO_3
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:479  
         1 000001   000010 000003                    ZERO    8,3

     3889       72         /*
     3890       73            */
     3891       74        %INCLUDE ZVA_SYSTEM_FILE;
     3892     6325        %PAGE (ARG=INCLUDES);

              6338    1   /*******************************************************************************
              6339    1   *                                                                              *
              6340    1   *        INCLUDES              INCLUDES                                           *
              6341    1   *                                                                              *
              6342    1   *******************************************************************************/

     3893     6346        %INCLUDE B$OBJECT_C;
     3894     9776        %INCLUDE XUO$OBJ_C;
     3895    10186        %PAGE (ARG=PARAMETERS);

             10199    1   /*******************************************************************************
             10200    1   *                                                                              *
             10201    1   *        PARAMETERS              PARAMETERS                                       *
             10202    1   *                                                                              *
             10203    1   *******************************************************************************/

     3896    10207    1   DCL P_PARAM1 UBIN;
     3897    10208         /*
     3898    10209         The following defintion is for XUO$HEADSTART
     3899    10210         */
     3900    10211    1   DCL P_OPERAND_TYPE REDEF P_PARAM1 UBIN;
     3901    10212         /*
     3902    10213         The following definition is for XUO$HEADNAME
     3903    10214         */
     3904    10215    1   DCL 1 P_NAME REDEF P_PARAM1 ALIGNED,
     3905    10216    1         2 SIZE UBIN HALF UNAL,
     3906    10217    1         2 TEXT CHAR(P_NAME.SIZE);
     3907    10218         /*
     3908    10219         The following definition is for XUO$HEAD_SEVERITY
     3909    10220         */
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:480  
     3910    10221    1   DCL P_SEVERITY REDEF P_PARAM1 UBIN;
     3911    10222    1   DCL P_OPERAND UBIN;
     3912    10223    1   DCL P_OFFSET UBIN;
     3913    10224        %PAGE (ARG=HEAD DATA);

             10237    1   /*******************************************************************************
             10238    1   *                                                                              *
             10239    1   *        HEAD DATA              HEAD DATA                                         *
             10240    1   *                                                                              *
             10241    1   *******************************************************************************/

     3914    10245        %B$HEADKEY (STCLASS=SYMREF,HFLAGINIT=);
     3915    10257    1   DCL B$OUHEAD$ PTR SYMREF;
     3916    10258    1   DCL OUHEAD$ PTR;
     3917    10259        %B$OUHEAD (STCLASS="BASED(OUHEAD$)");
     3918    10377        %PLIST;
     3919    10378        %PAGE (ARG=RECORD POINTERS/DATA);

             10391    1   /*******************************************************************************
             10392    1   *                                                                              *
             10393    1   *        RECORD POINTERS/DATA              RECORD POINTERS/DATA                   *
             10394    1   *                                                                              *
             10395    1   *******************************************************************************/

     3920    10399        %B_PROGRAM_POINTERS;
     3921    10414        %B_RELOCATION_POINTERS;
     3922    10429        %B_DNAME_POINTERS;
     3923    10449        %B_RNAME_POINTERS;
     3924    10469        %B_EDEF_POINTERS;
     3925    10489        %B$EDEF;
     3926    10559        %B_EREF_POINTERS;
     3927    10579        %B$EREF;
     3928    10622        %B_SDEF_POINTERS;
     3929    10642        %B$SDEF;
     3930    10696        %B_SREF_POINTERS;
     3931    10716        %B$SREF;
     3932    10730        %B_SEGDEF_POINTERS;
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:481  
     3933    10750        %B$SEGDEF;
     3934    10805        %B_SEGREF_POINTERS;
     3935    10825        %B$SEGREF;
     3936    10842        %B_LOGBLK_POINTERS;
     3937    10864        %B$LBNTRY0;
     3938    10900        %B$LBNTRY1;
     3939    10927        %B$LOGBLK;
     3940    10958        %PLIST;
     3941    10959        %PAGE (ARG=MISC DATA);

             10972    1   /*******************************************************************************
             10973    1   *                                                                              *
             10974    1   *        MISC DATA              MISC DATA                                         *
             10975    1   *                                                                              *
             10976    1   *******************************************************************************/

     3942    10980    1   DCL XUO_SCHEMA_REQUIRED BIT(1) ALIGNED SYMREF;
     3943    10981    1   DCL XUO_COMPILER_ID UBIN SYMREF;
     3944    10982    1   DCL 1 XUO_VERSION_NUMBER SYMREF,
     3945    10983    1         2 LETTER CHAR(1) UNAL,
     3946    10984    1         2 NUMBER UBIN(9) UNAL;
     3947    10985    1   DCL XUO_OU_UTS SYMREF UBIN;
     3948    10986    1   DCL XUO_MAXIMUM_SEVERITY UBIN SYMREF;
     3949    10987    1   DCL XUO_WORDSIZE SYMREF UBIN;
     3950    10988
     3951    10989        %PAGE (ARG=CODE);

             11002    1   /*******************************************************************************
             11003    1   *                                                                              *
             11004    1   *        CODE              CODE                                                  *
             11005    1   *                                                                              *
             11006    1   *******************************************************************************/

     3952    11010    1       OUHEAD$=B$OUHEAD$;

  11010  1 000002   000000 236000 xsym               LDQ     B$OUHEAD$
         1 000003   200006 756100                    STQ     OUHEAD$,,AUTO
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:482  

     3953    11011    1       B$OUHEAD.START.OPNDTYP=P_OPERAND_TYPE;

  11011  1 000004   200003 470500                    LDP0    @P_PARAM1,,AUTO
         1 000005   200006 471500                    LDP1    OUHEAD$,,AUTO
         1 000006   000000 236100                    LDQ     0,,PR0
         1 000007   000040 736000                    QLS     32
         1 000010   100002 676100                    ERQ     2,,PR1
         1 000011   740000 376003                    ANQ     -16384,DU
         1 000012   100002 656100                    ERSQ    2,,PR1

     3954    11012    1       B$OUHEAD.START.OPERAND=P_OPERAND;

  11012  1 000013   200004 473500                    LDP3    @P_OPERAND,,AUTO
         1 000014   300000 236100                    LDQ     0,,PR3
         1 000015   000022 736000                    QLS     18
         1 000016   100002 552120                    STBQ    2,'20'O,PR1

     3955    11013    1       B$OUHEAD.START.OFFSET=P_OFFSET;

  11013  1 000017   200005 474500                    LDP4    @P_OFFSET,,AUTO
         1 000020   400000 720100                    LXL0    0,,PR4
         1 000021   100002 440100                    SXL0    2,,PR1

     3956    11014    1       RETURN;

  11014  1 000022   000000 702200 xent               TSX2  ! X66_ARET

     3957    11015        %PAGE (ARG=XUO$HEADNAME);

             11028    1   /*******************************************************************************
             11029    1   *                                                                              *
             11030    1   *        XUO$HEADNAME              XUO$HEADNAME                                   *
             11031    1   *                                                                              *
             11032    1   *******************************************************************************/

     3958    11036        /*D*
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:483  
     3959    11037
     3960    11038        XUO$HEADNAME -- Head Record Key
     3961    11039
     3962    11040        NAME:  XUO$HEADNAME
     3963    11041
     3964    11042        PURPOSE:  To build the head record key.
     3965    11043
     3966    11044        DESCRIPTION:  This routine builds the Head Record Key.
     3967    11045             Each object unit is uniquely identified by it head
     3968    11046             record key.  Byte 0 of the key contains the name
     3969    11047             size followed by the character string which is
     3970    11048             the object unit name.
     3971    11049
     3972    11050        CALL:  CALL XUO$HEADNAME(Name)
     3973    11051
     3974    11052        INPUT:
     3975    11053            Name
     3976    11054              Size              UBIN HALF UNALIGNED
     3977    11055                                The number of bytes in the object unit
     3978    11056                                name.
     3979    11057              Text              CHAR( Size )
     3980    11058                                The character string which is the name
     3981    11059                                of the object unit.  This name is equal
     3982    11060                                to the entry definition name with the
     3983    11061                                attribute 'object unit name'.
     3984    11062
     3985    11063        OUTPUT:
     3986    11064            Updated head key
     3987    11065
     3988    11066        B$OBJECT REFERENCE:  B$HEADKEY
     3989    11067        */
     3990    11068        /*B*
     3991    11069
     3992    11070        GLOBAL DATA:  none
     3993    11071
     3994    11072        INTERFACE:  none
     3995    11073
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:484  
     3996    11074        */
     3997    11075
     3998    11076    1   XUO$HEADNAME: ENTRY(P_PARAM1);

  11076  1 000023   000000 700200 xent  XUO$HEADNAME TSX0  ! X66_AUTO_3
         1 000024   000010 000003                    ZERO    8,3

     3999    11077         /*
     4000    11078         The following will set the size and the name in the head  key.
     4001    11079         */
     4002    11080    1       B$HEADKEY.KEYSIZ=P_NAME.SIZE+1;

  11080  1 000025   200003 470500                    LDP0    @P_PARAM1,,AUTO
         1 000026   000000 236100                    LDQ     0,,PR0
         1 000027   000022 772000                    QRL     18
         1 000030   000001 036007                    ADLQ    1,DL
         1 000031   000033 736000                    QLS     27
         1 000032   000000 552040 xsym               STBQ    B$HEADKEY,'40'O

     4003    11081    1       B$HEADKEY.TEXT=P_NAME.TEXT;

  11081  1 000033   000000 220100                    LDX0    0,,PR0
         1 000034   040000 100540                    MLR     fill='040'O
         1 000035   000000 400010                    ADSC9   0,,PR0                   cn=2,n=*X0
         1 000036   000000 400037 xsym               ADSC9   B$HEADKEY                cn=2,n=31

     4004    11082    1       RETURN;

  11082  1 000037   000000 702200 xent               TSX2  ! X66_ARET

     4005    11083            %PAGE (ARG=XUO$HEAD_SEVERITY);

             11096    1   /*******************************************************************************
             11097    1   *                                                                              *
             11098    1   *        XUO$HEAD_SEVERITY              XUO$HEAD_SEVERITY                         *
             11099    1   *                                                                              *
             11100    1   *******************************************************************************/
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:485  

     4006    11104        /*D*
     4007    11105
     4008    11106        XUO$HEAD_SEVERITY --Head Record
     4009    11107
     4010    11108        NAME:  XUO$HEAD_SEVERITY
     4011    11109
     4012    11110        PURPOSE:  To build the severity level field of the head record.
     4013    11111
     4014    11112        DESCRIPTION:  This routine builds the severity level field
     4015    11113            in the head record.  The severity level indicates the
     4016    11114            maximum severity of errors encountered during compilation.
     4017    11115
     4018    11116        CALL:  CALL XUO$HEAD_SEVERITY( Severity )
     4019    11117
     4020    11118        INPUT:
     4021    11119            Severity            UBIN ALIGNED
     4022    11120                                The value that represents the severity
     4023    11121                                to be associated with the object unit.
     4024    11122                                The routine will maintain the maximum
     4025    11123                                severity received.
     4026    11124
     4027    11125        OUTPUT:
     4028    11126            Updated head record
     4029    11127
     4030    11128        B$OBJECT REFERENCE:  B$OUHEAD
     4031    11129        */
     4032    11130        /*B*
     4033    11131
     4034    11132        GLOBAL DATA:  none
     4035    11133
     4036    11134        INTERFACE:  none
     4037    11135
     4038    11136        */
     4039    11137    1   XUO$HEAD_SEVERITY: ENTRY(P_PARAM1);

  11137  1 000040   000000 700200 xent  XUO$HEAD_SE* TSX0  ! X66_AUTO_3
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:486  
         1 000041   000010 000003                    ZERO    8,3

     4040    11138         /*
     4041    11139         The following will maintain the highest severity
     4042    11140         encountered in the object unit.
     4043    11141         */
     4044    11142    1       IF P_SEVERITY>XUO_MAXIMUM_SEVERITY THEN

  11142  1 000042   200003 470500                    LDP0    @P_PARAM1,,AUTO
         1 000043   000000 236000 xsym               LDQ     XUO_MAXIMUM_SEVERITY
         1 000044   000000 116100                    CMPQ    0,,PR0
         1 000045   000050 603000 1                  TRC     s:11144

     4045    11143    1           XUO_MAXIMUM_SEVERITY=P_SEVERITY;

  11143  1 000046   000000 235100                    LDA     0,,PR0
         1 000047   000000 755000 xsym               STA     XUO_MAXIMUM_SEVERITY

     4046    11144    1       RETURN;

  11144  1 000050   000000 702200 xent               TSX2  ! X66_ARET

     4047    11145            %PAGE (ARG=XUO$HEADTERM);

             11158    1   /*******************************************************************************
             11159    1   *                                                                              *
             11160    1   *        XUO$HEADTERM              XUO$HEADTERM                                   *
             11161    1   *                                                                              *
             11162    1   *******************************************************************************/

     4048    11166    1   XUO$HEADTERM: ENTRY;

  11166  1 000051   000000 700200 xent  XUO$HEADTERM TSX0  ! X66_AUTO_3
         1 000052   000010 000003                    ZERO    8,3

     4049    11167         /*
     4050    11168         The following fills in the final values of the head record
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:487  
     4051    11169         */
     4052    11170    1       OUHEAD$=B$OUHEAD$;

  11170  1 000053   000000 236000 xsym               LDQ     B$OUHEAD$
         1 000054   200006 756100                    STQ     OUHEAD$,,AUTO

     4053    11171    1       B$OUHEAD.UTS=XUO_OU_UTS;

  11171  1 000055   200006 470500                    LDP0    OUHEAD$,,AUTO
         1 000056   000000 235000 xsym               LDA     XUO_OU_UTS
         1 000057   000000 755100                    STA     0,,PR0

     4054    11172    1       B$OUHEAD.WORDSIZE=XUO_WORDSIZE;

  11172  1 000060   000000 236000 xsym               LDQ     XUO_WORDSIZE
         1 000061   000033 736000                    QLS     27
         1 000062   000001 552140                    STBQ    1,'40'O,PR0

     4055    11173    1       B$OUHEAD.COMPILER=XUO_COMPILER_ID;

  11173  1 000063   000000 236000 xsym               LDQ     XUO_COMPILER_ID
         1 000064   000022 736000                    QLS     18
         1 000065   000001 552120                    STBQ    1,'20'O,PR0

     4056    11174    1       B$OUHEAD.VERS=XUO_VERSION_NUMBER;

  11174  1 000066   000000 220000 xsym               LDX0    XUO_VERSION_NUMBER
         1 000067   000001 440100                    SXL0    1,,PR0

     4057    11175    1       B$OUHEAD.SEVLEV=XUO_MAXIMUM_SEVERITY;

  11175  1 000070   000000 721000 xsym               LXL1    XUO_MAXIMUM_SEVERITY
         1 000071   000003 741100                    STX1    3,,PR0

     4058    11176         /*
     4059    11177            Check to see if no logical blocks
     4060    11178            were output or the no
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:488  
     4061    11179            debug option was specified.
     4062    11180            */
     4063    11181    1       IF B_LOGBLK_COUNT<0 OR XUO_SCHEMA_REQUIRED='0'B THEN

  11181  1 000072   000000 236000 xsym               LDQ     B_LOGBLK_COUNT
         1 000073   000076 604000 1                  TMI     s:11182
         1 000074   000000 234000 xsym               SZN     XUO_SCHEMA_REQUIRED
         1 000075   000101 604000 1                  TMI     s:11184

     4064    11182    1           B$OUHEAD.LOGBLKSIZ=0;

  11182  1 000076   000000 222003                    LDX2    0,DU
         1 000077   000003 442100                    SXL2    3,,PR0
         1 000100   000105 710000 1                  TRA     s:11185

     4065    11183    1       ELSE
     4066    11184    1          B$OUHEAD.LOGBLKSIZ=(B_LOGBLK_COUNT+1)*SIZEW(B$LOGBLK)+SIZEW(B$LBNTRY0)+SIZEW
             11184                    (B$LBNTRY1);

  11184  1 000101   000000 235000 xsym               LDA     B_LOGBLK_COUNT
         1 000102   000002 735000                    ALS     2
         1 000103   000014 622005                    EAX2    12,AL
         1 000104   000003 442100                    SXL2    3,,PR0

     4067    11185    1       B$OUHEAD.PROGPSIZ=B_PROGRAM_PAGE_SIZE;

  11185  1 000105   000000 723000 xsym               LXL3    B_PROGRAM_PAGE_SIZE
         1 000106   000004 743100                    STX3    4,,PR0

     4068    11186    1       B$OUHEAD.RELPSIZ=B_RELOCATION_PAGE_SIZE;

  11186  1 000107   000000 724000 xsym               LXL4    B_RELOCATION_PAGE_SIZE
         1 000110   000004 444100                    SXL4    4,,PR0

     4069    11187    1       B$OUHEAD.DNAMSIZ=B_DNAME_COUNT;

  11187  1 000111   000000 725000 xsym               LXL5    B_DNAME_COUNT
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:489  
         1 000112   000005 745100                    STX5    5,,PR0

     4070    11188    1       B$OUHEAD.DNAMPSIZ=B_DNAME_PAGE_SIZE;

  11188  1 000113   000000 726000 xsym               LXL6    B_DNAME_PAGE_SIZE
         1 000114   000005 446100                    SXL6    5,,PR0

     4071    11189    1       B$OUHEAD.RNAMSIZ=B_RNAME_COUNT;

  11189  1 000115   000000 727000 xsym               LXL7    B_RNAME_COUNT
         1 000116   000006 747100                    STX7    6,,PR0

     4072    11190    1       B$OUHEAD.RNAMPSIZ=B_RNAME_PAGE_SIZE;

  11190  1 000117   000000 720000 xsym               LXL0    B_RNAME_PAGE_SIZE
         1 000120   000006 440100                    SXL0    6,,PR0

     4073    11191    1       B$OUHEAD.EDEFSIZ=(B_EDEF_COUNT+1)*SIZEW(B$EDEF);

  11191  1 000121   000000 235000 xsym               LDA     B_EDEF_COUNT
         1 000122   000001 735000                    ALS     1
         1 000123   000002 620005                    EAX0    2,AL
         1 000124   000007 740100                    STX0    7,,PR0

     4074    11192    1       B$OUHEAD.EDEFPSIZ=B_EDEF_PAGE_SIZE;

  11192  1 000125   000000 720000 xsym               LXL0    B_EDEF_PAGE_SIZE
         1 000126   000007 440100                    SXL0    7,,PR0

     4075    11193    1       B$OUHEAD.EREFSIZ=(B_EREF_COUNT+1)*SIZEW(B$EREF);

  11193  1 000127   000000 720000 xsym               LXL0    B_EREF_COUNT
         1 000130   000001 621010                    EAX1    1,X0
         1 000131   000010 741100                    STX1    8,,PR0

     4076    11194    1       B$OUHEAD.EREFPSIZ=B_EREF_PAGE_SIZE;

PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:490  
  11194  1 000132   000000 720000 xsym               LXL0    B_EREF_PAGE_SIZE
         1 000133   000010 440100                    SXL0    8,,PR0

     4077    11195    1       B$OUHEAD.SDEFSIZ=(B_SDEF_COUNT+1)*SIZEW(B$SDEF);

  11195  1 000134   000000 235000 xsym               LDA     B_SDEF_COUNT
         1 000135   000001 735000                    ALS     1
         1 000136   000002 620005                    EAX0    2,AL
         1 000137   000011 740100                    STX0    9,,PR0

     4078    11196    1       B$OUHEAD.SDEFPSIZ=B_SDEF_PAGE_SIZE;

  11196  1 000140   000000 720000 xsym               LXL0    B_SDEF_PAGE_SIZE
         1 000141   000011 440100                    SXL0    9,,PR0

     4079    11197    1       B$OUHEAD.SREFSIZ=(B_SREF_COUNT+1)*SIZEW(B$SREF);

  11197  1 000142   000000 720000 xsym               LXL0    B_SREF_COUNT
         1 000143   000001 621010                    EAX1    1,X0
         1 000144   000012 741100                    STX1    10,,PR0

     4080    11198    1       B$OUHEAD.SREFPSIZ=B_SREF_PAGE_SIZE;

  11198  1 000145   000000 720000 xsym               LXL0    B_SREF_PAGE_SIZE
         1 000146   000012 440100                    SXL0    10,,PR0

     4081    11199    1       B$OUHEAD.SEGDEFSIZ=(B_SEGDEF_COUNT+1)*SIZEW(B$SEGDEF);

  11199  1 000147   000000 235000 xsym               LDA     B_SEGDEF_COUNT
         1 000150   000001 735000                    ALS     1
         1 000151   000002 620005                    EAX0    2,AL
         1 000152   000013 740100                    STX0    11,,PR0

     4082    11200    1       B$OUHEAD.SEGDEFPSIZ=B_SEGDEF_PAGE_SIZE;

  11200  1 000153   000000 720000 xsym               LXL0    B_SEGDEF_PAGE_SIZE
         1 000154   000013 440100                    SXL0    11,,PR0
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:491  

     4083    11201    1       B$OUHEAD.SEGREFSIZ=(B_SEGREF_COUNT+1)*SIZEW(B$SEGREF);

  11201  1 000155   000000 720000 xsym               LXL0    B_SEGREF_COUNT
         1 000156   000001 621010                    EAX1    1,X0
         1 000157   000014 741100                    STX1    12,,PR0

     4084    11202    1       B$OUHEAD.SEGREFPSIZ=B_SEGREF_PAGE_SIZE;

  11202  1 000160   000000 720000 xsym               LXL0    B_SEGREF_PAGE_SIZE
         1 000161   000014 440100                    SXL0    12,,PR0

     4085    11203    1       RETURN;

  11203  1 000162   000000 702200 xent               TSX2  ! X66_ARET
     4086    11204    1   END XUO$HEADSTART;
     4087    11205        %EOD;

PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:492  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$HEADSTART.
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:493  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @P_OFFSET                  4-0-0/w PTR         r     1 @P_OPERAND
     3-0-0/w PTR         r     1 @P_PARAM1                  6-0-0/w PTR         r     1 OUHEAD$
    *0-0-0/w ASTR(18)    r     1 P_NAME                    *0-0-0/w UBIN        r     1 P_OFFSET
    *0-0-0/w UBIN        r     1 P_OPERAND                 *0-0-0/w UBIN        r     1 P_OPERAND_TYPE
    *0-0-0/w UBIN        r     1 P_PARAM1                  *0-0-0/w UBIN        r     1 P_SEVERITY

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(297)   r     1 B$HEADKEY                  0-0-0/w PTR         r     1 B$OUHEAD$
     0-0-0/w SBIN        r     1 B_DNAME_COUNT              0-0-0/w UBIN        r     1 B_DNAME_PAGE_SIZE
     0-0-0/w SBIN        r     1 B_EDEF_COUNT               0-0-0/w UBIN        r     1 B_EDEF_PAGE_SIZE
     0-0-0/w SBIN        r     1 B_EREF_COUNT               0-0-0/w UBIN        r     1 B_EREF_PAGE_SIZE
     0-0-0/w SBIN        r     1 B_LOGBLK_COUNT             0-0-0/w SBIN        r     1 B_PROGRAM_PAGE_SIZE
     0-0-0/w SBIN        r     1 B_RELOCATION_PAGE_SIZE
     0-0-0/w SBIN        r     1 B_RNAME_COUNT              0-0-0/w UBIN        r     1 B_RNAME_PAGE_SIZE
     0-0-0/w SBIN        r     1 B_SDEF_COUNT               0-0-0/w UBIN        r     1 B_SDEF_PAGE_SIZE
     0-0-0/w SBIN        r     1 B_SEGDEF_COUNT             0-0-0/w UBIN        r     1 B_SEGDEF_PAGE_SIZE
     0-0-0/w SBIN        r     1 B_SEGREF_COUNT             0-0-0/w UBIN        r     1 B_SEGREF_PAGE_SIZE
     0-0-0/w SBIN        r     1 B_SREF_COUNT               0-0-0/w UBIN        r     1 B_SREF_PAGE_SIZE
     0-0-0/w UBIN        r     1 XUO_COMPILER_ID            0-0-0/w UBIN        r     1 XUO_MAXIMUM_SEVERITY
     0-0-0/w UBIN        r     1 XUO_OU_UTS                 0-0-0/w BIT         r     1 XUO_SCHEMA_REQUIRED
     0-0-0/c STRC(18)    r     1 XUO_VERSION_NUMBER         0-0-0/w UBIN        r     1 XUO_WORDSIZE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:494  

     0-0-0/w STRC(72)    r     1 B$EDEF                     0-0-0/w STRC        r     1 B$EREF
     0-0-0/w STRC(144)   r     1 B$LBNTRY0                  0-0-0/w STRC(144)   r     1 B$LBNTRY1
     0-0-0/w STRC(144)   r     1 B$LOGBLK                   0-0-0/w STRC(1044)  r     1 B$OUHEAD
     0-0-0/w STRC(72)    r     1 B$SDEF                     0-0-0/w STRC(72)    r     1 B$SEGDEF
     0-0-0/w STRC(24)    r     1 B$SEGREF                   0-0-0/w STRC        r     1 B$SREF


   Procedure XUO$HEADSTART requires 115 words for executable code.
   Procedure XUO$HEADSTART requires 8 words of local(AUTO) storage.
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:495  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:496  
          MINI XREF LISTING

B$EDEF
     10490**DCL     11191--ASSIGN
B$EDEF.OU
     10507**DCL     10513--REDEF
B$EREF
     10580**DCL     11193--ASSIGN
B$HEADKEY.KEYSIZ
     10247**DCL     11080<<ASSIGN
B$HEADKEY.TEXT
     10252**DCL     11081<<ASSIGN
B$LBNTRY0
     10865**DCL     11184--ASSIGN
B$LBNTRY0.NO_AUTO
     10891**DCL     10896--REDEF
B$LBNTRY0.VERSION
     10880**DCL     10882--REDEF
B$LBNTRY1
     10901**DCL     11184--ASSIGN
B$LOGBLK
     10928**DCL     11184--ASSIGN
B$OUHEAD.COMPILER
     10266**DCL     11173<<ASSIGN
B$OUHEAD.DNAMPSIZ
     10322**DCL     11188<<ASSIGN
B$OUHEAD.DNAMSIZ
     10319**DCL     11187<<ASSIGN
B$OUHEAD.EDEFPSIZ
     10333**DCL     11192<<ASSIGN
B$OUHEAD.EDEFSIZ
     10331**DCL     11191<<ASSIGN
B$OUHEAD.EREFPSIZ
     10338**DCL     11194<<ASSIGN
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:497  
B$OUHEAD.EREFSIZ
     10335**DCL     11193<<ASSIGN
B$OUHEAD.LOGBLKSIZ
     10312**DCL     11182<<ASSIGN  11184<<ASSIGN
B$OUHEAD.PROGPSIZ
     10315**DCL     11185<<ASSIGN
B$OUHEAD.RELPSIZ
     10317**DCL     11186<<ASSIGN
B$OUHEAD.RNAMPSIZ
     10328**DCL     11190<<ASSIGN
B$OUHEAD.RNAMSIZ
     10325**DCL     11189<<ASSIGN
B$OUHEAD.SDEFPSIZ
     10344**DCL     11196<<ASSIGN
B$OUHEAD.SDEFSIZ
     10341**DCL     11195<<ASSIGN
B$OUHEAD.SEGDEFPSIZ
     10356**DCL     11200<<ASSIGN
B$OUHEAD.SEGDEFSIZ
     10353**DCL     11199<<ASSIGN
B$OUHEAD.SEGREFPSIZ
     10362**DCL     11202<<ASSIGN
B$OUHEAD.SEGREFSIZ
     10359**DCL     11201<<ASSIGN
B$OUHEAD.SEVLEV
     10309**DCL     11175<<ASSIGN
B$OUHEAD.SREFPSIZ
     10350**DCL     11198<<ASSIGN
B$OUHEAD.SREFSIZ
     10347**DCL     11197<<ASSIGN
B$OUHEAD.START.OFFSET
     10306**DCL     11013<<ASSIGN
B$OUHEAD.START.OPERAND
     10300**DCL     11012<<ASSIGN
B$OUHEAD.START.OPNDTYP
     10290**DCL     11011<<ASSIGN
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:498  
B$OUHEAD.UTS
     10261**DCL     11171<<ASSIGN
B$OUHEAD.VERS
     10280**DCL     11174<<ASSIGN
B$OUHEAD.VERSION
     10278**DCL     10280--REDEF
B$OUHEAD.WORDSIZE
     10264**DCL     11172<<ASSIGN
B$OUHEAD$
     10257**DCL     11010>>ASSIGN  11170>>ASSIGN
B$SDEF
     10643**DCL     11195--ASSIGN
B$SDEF.AD.OU
     10663**DCL     10669--REDEF
B$SDEF.VALUE
     10644**DCL     10647--REDEF
B$SEGDEF
     10751**DCL     11199--ASSIGN
B$SEGDEF.AD.OU
     10775**DCL     10780--REDEF
B$SEGDEF.LFLAGS
     10790**DCL     10801--REDEF
B$SEGDEF.VALUE
     10752**DCL     10755--REDEF   10759--REDEF
B$SEGREF
     10826**DCL     11201--ASSIGN
B$SREF
     10717**DCL     11197--ASSIGN
B_DNAME_COUNT
     10444**DCL     11187>>ASSIGN
B_DNAME_PAGE_SIZE
     10447**DCL     11188>>ASSIGN
B_EDEF_COUNT
     10484**DCL     11191>>ASSIGN
B_EDEF_PAGE_SIZE
     10487**DCL     11192>>ASSIGN
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:499  
B_EREF_COUNT
     10574**DCL     11193>>ASSIGN
B_EREF_PAGE_SIZE
     10577**DCL     11194>>ASSIGN
B_LOGBLK_COUNT
     10859**DCL     11181>>IF      11184>>ASSIGN
B_PROGRAM_PAGE_SIZE
     10412**DCL     11185>>ASSIGN
B_RELOCATION_PAGE_SIZE
     10427**DCL     11186>>ASSIGN
B_RNAME_COUNT
     10464**DCL     11189>>ASSIGN
B_RNAME_PAGE_SIZE
     10467**DCL     11190>>ASSIGN
B_SDEF_COUNT
     10637**DCL     11195>>ASSIGN
B_SDEF_PAGE_SIZE
     10640**DCL     11196>>ASSIGN
B_SEGDEF_COUNT
     10745**DCL     11199>>ASSIGN
B_SEGDEF_PAGE_SIZE
     10748**DCL     11200>>ASSIGN
B_SEGREF_COUNT
     10820**DCL     11201>>ASSIGN
B_SEGREF_PAGE_SIZE
     10823**DCL     11202>>ASSIGN
B_SREF_COUNT
     10711**DCL     11197>>ASSIGN
B_SREF_PAGE_SIZE
     10714**DCL     11198>>ASSIGN
OUHEAD$
     10258**DCL     10260--IMP-PTR 11010<<ASSIGN  11011>>ASSIGN  11012>>ASSIGN  11013>>ASSIGN  11170<<ASSIGN
     11171>>ASSIGN  11172>>ASSIGN  11173>>ASSIGN  11174>>ASSIGN  11175>>ASSIGN  11182>>ASSIGN  11184>>ASSIGN
     11185>>ASSIGN  11186>>ASSIGN  11187>>ASSIGN  11188>>ASSIGN  11189>>ASSIGN  11190>>ASSIGN  11191>>ASSIGN
     11192>>ASSIGN  11193>>ASSIGN  11194>>ASSIGN  11195>>ASSIGN  11196>>ASSIGN  11197>>ASSIGN  11198>>ASSIGN
     11199>>ASSIGN  11200>>ASSIGN  11201>>ASSIGN  11202>>ASSIGN
PL6.E3A0      #017=XUO$HEADSTART File=XUO$BUILD.:E05TSI                          WED 07/30/97 09:32 Page:500  
P_NAME.SIZE
     10216**DCL     10217--IMP-SIZ 11080>>ASSIGN  11081>>ASSIGN
P_NAME.TEXT
     10217**DCL     11081>>ASSIGN
P_OFFSET
     10223**DCL        71--PROC    11013>>ASSIGN
P_OPERAND
     10222**DCL        71--PROC    11012>>ASSIGN
P_OPERAND_TYPE
     10211**DCL     11011>>ASSIGN
P_PARAM1
     10207**DCL        71--PROC    10211--REDEF   10215--REDEF   10221--REDEF   11076--ENTRY   11137--ENTRY
P_SEVERITY
     10221**DCL     11142>>IF      11143>>ASSIGN
XUO_COMPILER_ID
     10981**DCL     11173>>ASSIGN
XUO_MAXIMUM_SEVERITY
     10986**DCL     11142>>IF      11143<<ASSIGN  11175>>ASSIGN
XUO_OU_UTS
     10985**DCL     11171>>ASSIGN
XUO_SCHEMA_REQUIRED
     10980**DCL     11181>>IF
XUO_VERSION_NUMBER
     10982**DCL     11174>>ASSIGN
XUO_WORDSIZE
     10987**DCL     11172>>ASSIGN

PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:501  
     4088        1        /*M*     XUO$OUTERM -- THIS MODULE WILL FINISH WRITING OUT THE OBJECT UNIT*/
     4089        2        /*T***********************************************************/
     4090        3        /*T*                                                         */
     4091        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     4092        5        /*T*                                                         */
     4093        6        /*T***********************************************************/
     4094        7        /*P*
     4095        8
     4096        9        NAME:  XUO$OUTERM
     4097       10        XUO$OUTERM --Terminate object unit building
     4098       11
     4099       12        PURPOSE:  To terminate object unit generation.
     4100       13
     4101       14        DESCRIPTION:  This routine terminates object unit generation.
     4102       15            Any partially filled records will be written.  This
     4103       16            routine will call XUO$LOGBLKTERM to fill in the
     4104       17            Logical Block Record and write it out.  It will
     4105       18            then call XUO$HEADTERM to fill in the head record
     4106       19            and write it out.  The object unit is now complete.
     4107       20            XUO$OUCLOSE is called to close the current object
     4108       21            unit file if the OU Close Required Flag was set
     4109       22            in the initial call to XUO$INIT.  At this time
     4110       23            all the space for object unit buffers is released
     4111       24            back to the system.
     4112       25
     4113       26        */
     4114       27        /*D*
     4115       28
     4116       29        CALL:  CALL XUO$OUTERM    ALTRET (Label)
     4117       30
     4118       31        INPUT:  none
     4119       32
     4120       33        OUTPUT:  completed object unit
     4121       34
     4122       35        B$OBJECT REFERENCE:
     4123       36            B$DNAME
     4124       37            B$EDEF
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:502  
     4125       38            B$EREF
     4126       39            B$SDEF
     4127       40            B$SREF
     4128       41            B$SEGDEF
     4129       42            B$SEGREF
     4130       43            B$INTNTRY
     4131       44            B$EXST
     4132       45            B$VREBL
     4133       46        */
     4134       47        /*B*
     4135       48
     4136       49        GLOBAL DATA:
     4137       50            B_DNAME_BASE$
     4138       51            B_DNAME_CUR$
     4139       52            B_RNAME_BASE$
     4140       53            B_RNAME_CUR$
     4141       54            B_DBGNAME_BASE$
     4142       55            B_DBGNAME_CUR$
     4143       56            B_EDEF_BASE$
     4144       57            B_EDEF_CUR$
     4145       58            B_EREF_BASE$
     4146       59            B_EREF_CUR$
     4147       60            B_SDEF_BASE$
     4148       61            B_SDEF_CUR$
     4149       62            B_SREF_BASE$
     4150       63            B_SREF_CUR$
     4151       64            B_SEGDEF_BASE$
     4152       65            B_SEGDEF_CUR$
     4153       66            B_SEGREF_BASE$
     4154       67            B_SEGREF_CUR$
     4155       68            B_PROGRAM_BASE$
     4156       69            B_INTNTRY_BASE$
     4157       70            B_INTNTRY_CUR$
     4158       71            B_EXST_BASE$
     4159       72            B_EXST_CUR$
     4160       73            B_VREBL_BASE$
     4161       74            B_VREBL_CUR$
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:503  
     4162       75
     4163       76        INTERFACE:
     4164       77            XUO$OUWRITE
     4165       78            XUO$LOGBLKTERM
     4166       79            XUO$HEADTERM
     4167       80            XUO$PURGE_BUFFERS
     4168       81
     4169       82        */
     4170       83
     4171       84        XUO$OUTERM: PROC;
     4172       85         /*
     4173       86            */
     4174       87        %INCLUDE ZVA_SYSTEM_FILE;
     4175     6338        %PAGE (ARG=INCLUDES);

              6351    1   /*******************************************************************************
              6352    1   *                                                                              *
              6353    1   *        INCLUDES              INCLUDES                                            *
              6354    1   *                                                                              *
              6355    1   *******************************************************************************/

     4176     6359        %INCLUDE B$OBJECT_C;
     4177     9789        %INCLUDE XUO$OBJ_C;
     4178    10199        %PAGE (ARG=SUBS);

             10212    1   /*******************************************************************************
             10213    1   *                                                                              *
             10214    1   *        SUBS              SUBS                                                  *
             10215    1   *                                                                              *
             10216    1   *******************************************************************************/

     4179    10220        %B$RECORDSUBS;
     4180    10248        %B_MULTIBUF_VARS;
     4181    10275        %PLIST;
     4182    10276        %PAGE (ARG=RECORD POINTERS);

             10289    1   /*******************************************************************************
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:504  
             10290    1   *                                                                              *
             10291    1   *        RECORD POINTERS              RECORD POINTERS                              *
             10292    1   *                                                                              *
             10293    1   *******************************************************************************/

     4183    10297        %B_DNAME_POINTERS;
     4184    10317        %B_RNAME_POINTERS;
     4185    10337        %B_DBGNAME_POINTERS;
     4186    10357        %B_SECTION_POINTERS;
     4187    10376        %B_EDEF_POINTERS;
     4188    10396        %B_EREF_POINTERS;
     4189    10416        %B_SDEF_POINTERS;
     4190    10436        %B_SREF_POINTERS;
     4191    10456        %B_SEGDEF_POINTERS;
     4192    10476        %B_SEGREF_POINTERS;
     4193    10496        %B_PROGRAM_POINTERS;
     4194    10511        %B_RELOCATION_POINTERS;
     4195    10526        %B_LOGBLK_POINTERS;
     4196    10548        %B_INTNTRY_POINTERS;
     4197    10568        %B_EXST_POINTERS;
     4198    10588        %B_VREBL_POINTERS;
     4199    10608        %PLIST;
     4200    10609        %PAGE (ARG=ENTRY DCLS);

             10622    1   /*******************************************************************************
             10623    1   *                                                                              *
             10624    1   *        ENTRY DCLS              ENTRY DCLS                                        *
             10625    1   *                                                                              *
             10626    1   *******************************************************************************/

     4201    10630    1   DCL XUO$OUWRITE ENTRY(2);
     4202    10631    1   DCL XUO$OUCLOSE ENTRY;
     4203    10632    1   DCL XUO$LOGBLKTERM ENTRY ALTRET;
     4204    10633    1   DCL XUO$HEADTERM ENTRY;
     4205    10634    1   DCL XUO$PURGE_BUFFERS ENTRY (2) ALTRET;
     4206    10635    1   DCL I UBIN;
     4207    10636        %PAGE (ARG=FPTS);
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:505  

             10649    1   /*******************************************************************************
             10650    1   *                                                                              *
             10651    1   *        FPTS              FPTS                                                  *
             10652    1   *                                                                              *
             10653    1   *******************************************************************************/

     4208    10657        %FPT_FDS (FPTN=XUO_OU_GDS_FDS,STCLASS=SYMREF);
     4209    10672        %PAGE(ARG=ERROR_DATA);

             10685    1   /*******************************************************************************
             10686    1   *                                                                              *
             10687    1   *        ERROR_DATA              ERROR_DATA                                        *
             10688    1   *                                                                              *
             10689    1   *******************************************************************************/

     4210    10693        %B$TCB;
     4211    10696        %B$ALT;
     4212    10704
     4213    10705    1   DCL B$TCB$ PTR SYMREF;
     4214    10706
     4215    10707    1   DCL ERROR BIT(36);
     4216    10708
     4217    10709    1   DCL XUO_ERROR_ROUTINE EPTR SYMREF;
     4218    10710
     4219    10711        %PAGE (ARG=CODE);

             10724    1   /*******************************************************************************
             10725    1   *                                                                              *
             10726    1   *        CODE              CODE                                                  *
             10727    1   *                                                                              *
             10728    1   *******************************************************************************/

     4220    10732         /*
     4221    10733         The following code checks to determine if there are any partial records
     4222    10734         that need to be dumped.  If so, they are written out.  In addition,
     4223    10735         the section and logical block and head records are written.
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:506  
     4224    10736         */
     4225    10737    1       IF B_DNAME_CUR$>B_DNAME_BASE$ THEN
     4226    10738    1           CALL XUO$OUWRITE(%TYPDNAM);
     4227    10739    1       IF B_RNAME_CUR$>B_RNAME_BASE$ THEN
     4228    10740    1           CALL XUO$OUWRITE (%TYPRNAM);
     4229    10741    1       IF B_SECTION_CUR$>B_SECTION_BASE$ THEN
     4230    10742    1           CALL XUO$OUWRITE(%TYPSECT);
     4231    10743    1       IF B_EDEF_CUR$>B_EDEF_BASE$ THEN
     4232    10744    1           CALL XUO$OUWRITE(%TYPEDEF);
     4233    10745    1       IF B_EREF_CUR$>B_EREF_BASE$ THEN
     4234    10746    1           CALL XUO$OUWRITE(%TYPEREF);
     4235    10747    1       IF B_SDEF_CUR$>B_SDEF_BASE$ THEN
     4236    10748    1           CALL XUO$OUWRITE(%TYPSDEF);
     4237    10749    1       IF B_SREF_CUR$>B_SREF_BASE$ THEN
     4238    10750    1           CALL XUO$OUWRITE(%TYPSREF);
     4239    10751    1       IF B_SEGDEF_CUR$>B_SEGDEF_BASE$ THEN
     4240    10752    1           CALL XUO$OUWRITE(%TYPSEGDEF);
     4241    10753    1       IF B_SEGREF_CUR$>B_SEGREF_BASE$ THEN
     4242    10754    1           CALL XUO$OUWRITE(%TYPSEGREF);
     4243    10755    2       DO I = 0 TO B_NUMBER_OF_SECTIONS;
     4244    10756    2           CALL XUO$PURGE_BUFFERS (%TYPPROG, I);
     4245    10757    2           END;
     4246    10758    1       IF B_INTNTRY_CUR$>B_INTNTRY_BASE$ THEN
     4247    10759    1           CALL XUO$OUWRITE(%TYPINTNTRY);
     4248    10760    1       IF B_EXST_CUR$>B_EXST_BASE$ THEN
     4249    10761    1           CALL XUO$OUWRITE(%TYPEXST);
     4250    10762    1       IF B_VREBL_CUR$>B_VREBL_BASE$ THEN
     4251    10763    1           CALL XUO$OUWRITE(%TYPVREBL);
     4252    10764    1       IF B_DBGNAME_CUR$>B_DBGNAME_BASE$ THEN
     4253    10765    1           CALL XUO$OUWRITE(%TYPDBGNAM);
     4254    10766         /*
     4255    10767         Must make sure that the logical block has all the
     4256    10768         sizes filled in, therefore call XUO$LOGBLKTERM.
     4257    10769         Only if we have added an entry.
     4258    10770         */
     4259    10771    1       IF B_LOGBLK_COUNT>=0 THEN
     4260    10772    2       DO;
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:507  
     4261    10773    2           CALL XUO$LOGBLKTERM;
     4262    10774    2           CALL XUO$OUWRITE(%TYPLOGBLK);
     4263    10775    2           END;
     4264    10776         /*
     4265    10777            */
     4266    10778         /*
     4267    10779         We now have everything written out except the head record.
     4268    10780         Treat the head record as type 0.
     4269    10781         */
     4270    10782    1       CALL XUO$HEADTERM;
     4271    10783    1       CALL XUO$OUWRITE(0);
     4272    10784         /*
     4273    10785         Make the object unit complete by closing it
     4274    10786         */
     4275    10787    1       CALL XUO$OUCLOSE;
     4276    10788         /*
     4277    10789         Now free up all the space reserved for the ou
     4278    10790         */
     4279    10791    1       CALL M$FDS (XUO_OU_GDS_FDS) ALTRET(SPACE_ERROR);
     4280    10792    1       RETURN;
     4281    10793
     4282    10794            %PAGE(ARG=ERRORS);

             10807    1   /*******************************************************************************
             10808    1   *                                                                              *
             10809    1   *        ERRORS              ERRORS                                                *
             10810    1   *                                                                              *
             10811    1   *******************************************************************************/

     4283    10815
     4284    10816    1   SPACE_ERROR: ;
     4285    10817    1       IF XUO_ERROR_ROUTINE~=ENTADDR(NIL) THEN
     4286    10818    2       DO;
     4287    10819    2           ERROR=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
     4288    10820    2           CALL XUO_ERROR_ROUTINE(ERROR);
     4289    10821    2           END;
     4290    10822
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:508  
     4291    10823    1       RETURN;
     4292    10824
     4293    10825    1   END XUO$OUTERM;
     4294    10826        %EOD;

PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:509  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$OUTERM.

   Procedure XUO$OUTERM requires 148 words for executable code.
   Procedure XUO$OUTERM requires 8 words of local(AUTO) storage.

PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:510  

 Object Unit name= XUO$OUTERM                                 File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:33:09.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   148    224  XUO$OUTERM
    2  RoData even  none    20     24  XUO$OUTERM

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        0  XUO$OUTERM

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
 yes     yes           Std       0 XUO$LOGBLKTERM
         yes           Std       0 XUO$OUCLOSE
 yes     yes           Std       2 XUO$PURGE_BUFFERS
         yes           Std       0 XUO$HEADTERM
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:511  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  PTR2_SECTION_ARRAY$                   B_NUMBER_OF_SECTIONS
     B_DNAME_BASE$                         B_DNAME_CUR$                          B_RNAME_BASE$
     B_RNAME_CUR$                          B_DBGNAME_BASE$                       B_DBGNAME_CUR$
     B_SECTION_BASE$                       B_SECTION_CUR$                        B_EDEF_BASE$
     B_EDEF_CUR$                           B_EREF_BASE$                          B_EREF_CUR$
     B_SDEF_BASE$                          B_SDEF_CUR$                           B_SREF_BASE$
     B_SREF_CUR$                           B_SEGDEF_BASE$                        B_SEGDEF_CUR$
     B_SEGREF_BASE$                        B_SEGREF_CUR$                         B_LOGBLK_COUNT
     B_INTNTRY_BASE$                       B_INTNTRY_CUR$                        B_EXST_BASE$
     B_EXST_CUR$                           B_VREBL_BASE$                         B_VREBL_CUR$
     XUO_OU_GDS_FDS                        B$TCB$                                XUO_ERROR_ROUTINE
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:512  


     4088        1        /*M*     XUO$OUTERM -- THIS MODULE WILL FINISH WRITING OUT THE OBJECT UNIT*/
     4089        2        /*T***********************************************************/
     4090        3        /*T*                                                         */
     4091        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     4092        5        /*T*                                                         */
     4093        6        /*T***********************************************************/
     4094        7        /*P*
     4095        8
     4096        9        NAME:  XUO$OUTERM
     4097       10        XUO$OUTERM --Terminate object unit building
     4098       11
     4099       12        PURPOSE:  To terminate object unit generation.
     4100       13
     4101       14        DESCRIPTION:  This routine terminates object unit generation.
     4102       15            Any partially filled records will be written.  This
     4103       16            routine will call XUO$LOGBLKTERM to fill in the
     4104       17            Logical Block Record and write it out.  It will
     4105       18            then call XUO$HEADTERM to fill in the head record
     4106       19            and write it out.  The object unit is now complete.
     4107       20            XUO$OUCLOSE is called to close the current object
     4108       21            unit file if the OU Close Required Flag was set
     4109       22            in the initial call to XUO$INIT.  At this time
     4110       23            all the space for object unit buffers is released
     4111       24            back to the system.
     4112       25
     4113       26        */
     4114       27        /*D*
     4115       28
     4116       29        CALL:  CALL XUO$OUTERM    ALTRET (Label)
     4117       30
     4118       31        INPUT:  none
     4119       32
     4120       33        OUTPUT:  completed object unit
     4121       34
     4122       35        B$OBJECT REFERENCE:
     4123       36            B$DNAME
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:513  
     4124       37            B$EDEF
     4125       38            B$EREF
     4126       39            B$SDEF
     4127       40            B$SREF
     4128       41            B$SEGDEF
     4129       42            B$SEGREF
     4130       43            B$INTNTRY
     4131       44            B$EXST
     4132       45            B$VREBL
     4133       46        */
     4134       47        /*B*
     4135       48
     4136       49        GLOBAL DATA:
     4137       50            B_DNAME_BASE$
     4138       51            B_DNAME_CUR$
     4139       52            B_RNAME_BASE$
     4140       53            B_RNAME_CUR$
     4141       54            B_DBGNAME_BASE$
     4142       55            B_DBGNAME_CUR$
     4143       56            B_EDEF_BASE$
     4144       57            B_EDEF_CUR$
     4145       58            B_EREF_BASE$
     4146       59            B_EREF_CUR$
     4147       60            B_SDEF_BASE$
     4148       61            B_SDEF_CUR$
     4149       62            B_SREF_BASE$
     4150       63            B_SREF_CUR$
     4151       64            B_SEGDEF_BASE$
     4152       65            B_SEGDEF_CUR$
     4153       66            B_SEGREF_BASE$
     4154       67            B_SEGREF_CUR$
     4155       68            B_PROGRAM_BASE$
     4156       69            B_INTNTRY_BASE$
     4157       70            B_INTNTRY_CUR$
     4158       71            B_EXST_BASE$
     4159       72            B_EXST_CUR$
     4160       73            B_VREBL_BASE$
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:514  
     4161       74            B_VREBL_CUR$
     4162       75
     4163       76        INTERFACE:
     4164       77            XUO$OUWRITE
     4165       78            XUO$LOGBLKTERM
     4166       79            XUO$HEADTERM
     4167       80            XUO$PURGE_BUFFERS
     4168       81
     4169       82        */
     4170       83
     4171       84        XUO$OUTERM: PROC;

     84  1 000000   000000 700200 xent  XUO$OUTERM   TSX0  ! X66_AUTO_0
         1 000001   000010 000000                    ZERO    8,0

     4172       85         /*
     4173       86            */
     4174       87        %INCLUDE ZVA_SYSTEM_FILE;
     4175     6338        %PAGE (ARG=INCLUDES);

              6351    1   /*******************************************************************************
              6352    1   *                                                                              *
              6353    1   *        INCLUDES              INCLUDES                                           *
              6354    1   *                                                                              *
              6355    1   *******************************************************************************/

     4176     6359        %INCLUDE B$OBJECT_C;
     4177     9789        %INCLUDE XUO$OBJ_C;
     4178    10199        %PAGE (ARG=SUBS);

             10212    1   /*******************************************************************************
             10213    1   *                                                                              *
             10214    1   *        SUBS              SUBS                                                  *
             10215    1   *                                                                              *
             10216    1   *******************************************************************************/

     4179    10220        %B$RECORDSUBS;
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:515  
     4180    10248        %B_MULTIBUF_VARS;
     4181    10275        %PLIST;
     4182    10276        %PAGE (ARG=RECORD POINTERS);

             10289    1   /*******************************************************************************
             10290    1   *                                                                              *
             10291    1   *        RECORD POINTERS              RECORD POINTERS                             *
             10292    1   *                                                                              *
             10293    1   *******************************************************************************/

     4183    10297        %B_DNAME_POINTERS;
     4184    10317        %B_RNAME_POINTERS;
     4185    10337        %B_DBGNAME_POINTERS;
     4186    10357        %B_SECTION_POINTERS;
     4187    10376        %B_EDEF_POINTERS;
     4188    10396        %B_EREF_POINTERS;
     4189    10416        %B_SDEF_POINTERS;
     4190    10436        %B_SREF_POINTERS;
     4191    10456        %B_SEGDEF_POINTERS;
     4192    10476        %B_SEGREF_POINTERS;
     4193    10496        %B_PROGRAM_POINTERS;
     4194    10511        %B_RELOCATION_POINTERS;
     4195    10526        %B_LOGBLK_POINTERS;
     4196    10548        %B_INTNTRY_POINTERS;
     4197    10568        %B_EXST_POINTERS;
     4198    10588        %B_VREBL_POINTERS;
     4199    10608        %PLIST;
     4200    10609        %PAGE (ARG=ENTRY DCLS);

             10622    1   /*******************************************************************************
             10623    1   *                                                                              *
             10624    1   *        ENTRY DCLS              ENTRY DCLS                                       *
             10625    1   *                                                                              *
             10626    1   *******************************************************************************/

     4201    10630    1   DCL XUO$OUWRITE ENTRY(2);
     4202    10631    1   DCL XUO$OUCLOSE ENTRY;
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:516  
     4203    10632    1   DCL XUO$LOGBLKTERM ENTRY ALTRET;
     4204    10633    1   DCL XUO$HEADTERM ENTRY;
     4205    10634    1   DCL XUO$PURGE_BUFFERS ENTRY (2) ALTRET;
     4206    10635    1   DCL I UBIN;
     4207    10636        %PAGE (ARG=FPTS);

             10649    1   /*******************************************************************************
             10650    1   *                                                                              *
             10651    1   *        FPTS              FPTS                                                  *
             10652    1   *                                                                              *
             10653    1   *******************************************************************************/

     4208    10657        %FPT_FDS (FPTN=XUO_OU_GDS_FDS,STCLASS=SYMREF);
     4209    10672        %PAGE(ARG=ERROR_DATA);

             10685    1   /*******************************************************************************
             10686    1   *                                                                              *
             10687    1   *        ERROR_DATA              ERROR_DATA                                       *
             10688    1   *                                                                              *
             10689    1   *******************************************************************************/

     4210    10693        %B$TCB;
     4211    10696        %B$ALT;
     4212    10704
     4213    10705    1   DCL B$TCB$ PTR SYMREF;
     4214    10706
     4215    10707    1   DCL ERROR BIT(36);
     4216    10708
     4217    10709    1   DCL XUO_ERROR_ROUTINE EPTR SYMREF;
     4218    10710
     4219    10711        %PAGE (ARG=CODE);

             10724    1   /*******************************************************************************
             10725    1   *                                                                              *
             10726    1   *        CODE              CODE                                                  *
             10727    1   *                                                                              *
             10728    1   *******************************************************************************/
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:517  

     4220    10732         /*
     4221    10733         The following code checks to determine if there are any partial records
     4222    10734         that need to be dumped.  If so, they are written out.  In addition,
     4223    10735         the section and logical block and head records are written.
     4224    10736         */
     4225    10737    1       IF B_DNAME_CUR$>B_DNAME_BASE$ THEN

  10737  1 000002   000000 236000 xsym               LDQ     B_DNAME_BASE$
         1 000003   000000 116000 xsym               CMPQ    B_DNAME_CUR$
         1 000004   000011 603000 1                  TRC     s:10739

     4226    10738    1           CALL XUO$OUWRITE(%TYPDNAM);

  10738  1 000005   000000 630400 2                  EPPR0   0
         1 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000007   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000010   000000 011000                    NOP     0

     4227    10739    1       IF B_RNAME_CUR$>B_RNAME_BASE$ THEN

  10739  1 000011   000000 236000 xsym               LDQ     B_RNAME_BASE$
         1 000012   000000 116000 xsym               CMPQ    B_RNAME_CUR$
         1 000013   000020 603000 1                  TRC     s:10741

     4228    10740    1           CALL XUO$OUWRITE (%TYPRNAM);

  10740  1 000014   000001 630400 2                  EPPR0   1
         1 000015   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000016   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000017   000000 011000                    NOP     0

     4229    10741    1       IF B_SECTION_CUR$>B_SECTION_BASE$ THEN

  10741  1 000020   000000 236000 xsym               LDQ     B_SECTION_BASE$
         1 000021   000000 116000 xsym               CMPQ    B_SECTION_CUR$
         1 000022   000027 603000 1                  TRC     s:10743
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:518  

     4230    10742    1           CALL XUO$OUWRITE(%TYPSECT);

  10742  1 000023   000002 630400 2                  EPPR0   2
         1 000024   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000025   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000026   000000 011000                    NOP     0

     4231    10743    1       IF B_EDEF_CUR$>B_EDEF_BASE$ THEN

  10743  1 000027   000000 236000 xsym               LDQ     B_EDEF_BASE$
         1 000030   000000 116000 xsym               CMPQ    B_EDEF_CUR$
         1 000031   000036 603000 1                  TRC     s:10745

     4232    10744    1           CALL XUO$OUWRITE(%TYPEDEF);

  10744  1 000032   000003 630400 2                  EPPR0   3
         1 000033   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000034   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000035   000000 011000                    NOP     0

     4233    10745    1       IF B_EREF_CUR$>B_EREF_BASE$ THEN

  10745  1 000036   000000 236000 xsym               LDQ     B_EREF_BASE$
         1 000037   000000 116000 xsym               CMPQ    B_EREF_CUR$
         1 000040   000045 603000 1                  TRC     s:10747

     4234    10746    1           CALL XUO$OUWRITE(%TYPEREF);

  10746  1 000041   000004 630400 2                  EPPR0   4
         1 000042   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000043   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000044   000000 011000                    NOP     0

     4235    10747    1       IF B_SDEF_CUR$>B_SDEF_BASE$ THEN

  10747  1 000045   000000 236000 xsym               LDQ     B_SDEF_BASE$
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:519  
         1 000046   000000 116000 xsym               CMPQ    B_SDEF_CUR$
         1 000047   000054 603000 1                  TRC     s:10749

     4236    10748    1           CALL XUO$OUWRITE(%TYPSDEF);

  10748  1 000050   000005 630400 2                  EPPR0   5
         1 000051   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000052   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000053   000000 011000                    NOP     0

     4237    10749    1       IF B_SREF_CUR$>B_SREF_BASE$ THEN

  10749  1 000054   000000 236000 xsym               LDQ     B_SREF_BASE$
         1 000055   000000 116000 xsym               CMPQ    B_SREF_CUR$
         1 000056   000063 603000 1                  TRC     s:10751

     4238    10750    1           CALL XUO$OUWRITE(%TYPSREF);

  10750  1 000057   000006 630400 2                  EPPR0   6
         1 000060   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000061   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000062   000000 011000                    NOP     0

     4239    10751    1       IF B_SEGDEF_CUR$>B_SEGDEF_BASE$ THEN

  10751  1 000063   000000 236000 xsym               LDQ     B_SEGDEF_BASE$
         1 000064   000000 116000 xsym               CMPQ    B_SEGDEF_CUR$
         1 000065   000072 603000 1                  TRC     s:10753

     4240    10752    1           CALL XUO$OUWRITE(%TYPSEGDEF);

  10752  1 000066   000007 630400 2                  EPPR0   7
         1 000067   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000070   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000071   000000 011000                    NOP     0

     4241    10753    1       IF B_SEGREF_CUR$>B_SEGREF_BASE$ THEN
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:520  

  10753  1 000072   000000 236000 xsym               LDQ     B_SEGREF_BASE$
         1 000073   000000 116000 xsym               CMPQ    B_SEGREF_CUR$
         1 000074   000101 603000 1                  TRC     s:10755

     4242    10754    1           CALL XUO$OUWRITE(%TYPSEGREF);

  10754  1 000075   000010 630400 2                  EPPR0   8
         1 000076   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000077   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000100   000000 011000                    NOP     0

     4243    10755    2       DO I = 0 TO B_NUMBER_OF_SECTIONS;

  10755  1 000101   200003 450100                    STZ     I,,AUTO
         1 000102   000116 710000 1                  TRA     s:10757+3

     4244    10756    2           CALL XUO$PURGE_BUFFERS (%TYPPROG, I);

  10756  1 000103   200003 630500                    EPPR0   I,,AUTO
         1 000104   200007 450500                    STP0    ERROR+3,,AUTO
         1 000105   000011 236000 2                  LDQ     9
         1 000106   200006 756100                    STQ     ERROR+2,,AUTO
         1 000107   200006 630500                    EPPR0   ERROR+2,,AUTO
         1 000110   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000111   000000 701000 xent               TSX1    XUO$PURGE_BUFFERS
         1 000112   000000 011000                    NOP     0

     4245    10757    2           END;

  10757  1 000113   200003 235100                    LDA     I,,AUTO
         1 000114   000001 035007                    ADLA    1,DL
         1 000115   200003 755100                    STA     I,,AUTO
         1 000116   000000 236000 xsym               LDQ     B_NUMBER_OF_SECTIONS
         1 000117   200003 116100                    CMPQ    I,,AUTO
         1 000120   000103 603000 1                  TRC     s:10756

PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:521  
     4246    10758    1       IF B_INTNTRY_CUR$>B_INTNTRY_BASE$ THEN

  10758  1 000121   000000 236000 xsym               LDQ     B_INTNTRY_BASE$
         1 000122   000000 116000 xsym               CMPQ    B_INTNTRY_CUR$
         1 000123   000130 603000 1                  TRC     s:10760

     4247    10759    1           CALL XUO$OUWRITE(%TYPINTNTRY);

  10759  1 000124   000013 630400 2                  EPPR0   11
         1 000125   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000126   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000127   000000 011000                    NOP     0

     4248    10760    1       IF B_EXST_CUR$>B_EXST_BASE$ THEN

  10760  1 000130   000000 236000 xsym               LDQ     B_EXST_BASE$
         1 000131   000000 116000 xsym               CMPQ    B_EXST_CUR$
         1 000132   000137 603000 1                  TRC     s:10762

     4249    10761    1           CALL XUO$OUWRITE(%TYPEXST);

  10761  1 000133   000015 630400 2                  EPPR0   13
         1 000134   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000135   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000136   000000 011000                    NOP     0

     4250    10762    1       IF B_VREBL_CUR$>B_VREBL_BASE$ THEN

  10762  1 000137   000000 236000 xsym               LDQ     B_VREBL_BASE$
         1 000140   000000 116000 xsym               CMPQ    B_VREBL_CUR$
         1 000141   000146 603000 1                  TRC     s:10764

     4251    10763    1           CALL XUO$OUWRITE(%TYPVREBL);

  10763  1 000142   000017 630400 2                  EPPR0   15
         1 000143   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000144   000000 701000 xent               TSX1    XUO$OUWRITE
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:522  
         1 000145   000000 011000                    NOP     0

     4252    10764    1       IF B_DBGNAME_CUR$>B_DBGNAME_BASE$ THEN

  10764  1 000146   000000 236000 xsym               LDQ     B_DBGNAME_BASE$
         1 000147   000000 116000 xsym               CMPQ    B_DBGNAME_CUR$
         1 000150   000155 603000 1                  TRC     s:10771

     4253    10765    1           CALL XUO$OUWRITE(%TYPDBGNAM);

  10765  1 000151   000021 630400 2                  EPPR0   17
         1 000152   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000153   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000154   000000 011000                    NOP     0

     4254    10766         /*
     4255    10767         Must make sure that the logical block has all the
     4256    10768         sizes filled in, therefore call XUO$LOGBLKTERM.
     4257    10769         Only if we have added an entry.
     4258    10770         */
     4259    10771    1       IF B_LOGBLK_COUNT>=0 THEN

  10771  1 000155   000000 235000 xsym               LDA     B_LOGBLK_COUNT
         1 000156   000166 604000 1                  TMI     s:10782

     4260    10772    2       DO;

     4261    10773    2           CALL XUO$LOGBLKTERM;

  10773  1 000157   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000160   000000 701000 xent               TSX1    XUO$LOGBLKTERM
         1 000161   000000 011000                    NOP     0

     4262    10774    2           CALL XUO$OUWRITE(%TYPLOGBLK);

  10774  1 000162   000022 630400 2                  EPPR0   18
         1 000163   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:523  
         1 000164   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000165   000000 011000                    NOP     0

     4263    10775    2           END;

     4264    10776         /*
     4265    10777            */
     4266    10778         /*
     4267    10779         We now have everything written out except the head record.
     4268    10780         Treat the head record as type 0.
     4269    10781         */
     4270    10782    1       CALL XUO$HEADTERM;

  10782  1 000166   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000167   000000 701000 xent               TSX1    XUO$HEADTERM
         1 000170   000000 011000                    NOP     0

     4271    10783    1       CALL XUO$OUWRITE(0);

  10783  1 000171   000023 630400 2                  EPPR0   19
         1 000172   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000173   000000 701000 xent               TSX1    XUO$OUWRITE
         1 000174   000000 011000                    NOP     0

     4272    10784         /*
     4273    10785         Make the object unit complete by closing it
     4274    10786         */
     4275    10787    1       CALL XUO$OUCLOSE;

  10787  1 000175   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000176   000000 701000 xent               TSX1    XUO$OUCLOSE
         1 000177   000000 011000                    NOP     0

     4276    10788         /*
     4277    10789         Now free up all the space reserved for the ou
     4278    10790         */
     4279    10791    1       CALL M$FDS (XUO_OU_GDS_FDS) ALTRET(SPACE_ERROR);
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:524  

  10791  1 000200   000000 630400 xsym               EPPR0   XUO_OU_GDS_FDS
         1 000201   430002 713400                    CLIMB   alt,fds
         1 000202   400400 401760                    pmme    nvectors=2
         1 000203   000205 702000 1                  TSX2    SPACE_ERROR

     4280    10792    1       RETURN;

  10792  1 000204   000000 702200 xent               TSX2  ! X66_ARET

  10771  1 000205                       SPACE_ERROR  null
     4281    10793
     4282    10794            %PAGE(ARG=ERRORS);

             10807    1   /*******************************************************************************
             10808    1   *                                                                              *
             10809    1   *        ERRORS              ERRORS                                               *
             10810    1   *                                                                              *
             10811    1   *******************************************************************************/

     4283    10815
     4284    10816    1   SPACE_ERROR: ;
     4285    10817    1       IF XUO_ERROR_ROUTINE~=ENTADDR(NIL) THEN

  10817  1 000205   000000 236000 xsym               LDQ     XUO_ERROR_ROUTINE
         1 000206   000002 116000 xsym               CMPQ    B_VECTNIL+2
         1 000207   000223 600000 1                  TZE     s:10823

     4286    10818    2       DO;

     4287    10819    2           ERROR=B$TCB$->B$TCB.ALT$->B$ALT.ERR;

  10819  1 000210   000000 470400 xsym               LDP0    B$TCB$
         1 000211   000000 471500                    LDP1    0,,PR0
         1 000212   100102 236100                    LDQ     66,,PR1
         1 000213   200004 756100                    STQ     ERROR,,AUTO

PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:525  
     4288    10820    2           CALL XUO_ERROR_ROUTINE(ERROR);

  10820  1 000214   200004 631500                    EPPR1   ERROR,,AUTO
         1 000215   200006 451500                    STP1    ERROR+2,,AUTO
         1 000216   200006 630500                    EPPR0   ERROR+2,,AUTO
         1 000217   000000 220000 xsym               LDX0    XUO_ERROR_ROUTINE
         1 000220   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000221   000000 701010                    TSX1    0,X0
         1 000222   000000 011000                    NOP     0

     4289    10821    2           END;

     4290    10822
     4291    10823    1       RETURN;

  10823  1 000223   000000 702200 xent               TSX2  ! X66_ARET
     4292    10824
     4293    10825    1   END XUO$OUTERM;
     4294    10826        %EOD;

PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:526  
--  Include file information  --

   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$OUTERM.
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:527  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/b BIT         r     1 ERROR                      3-0-0/w UBIN        r     1 I

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w PTR         r     1 B_DBGNAME_BASE$
     0-0-0/w PTR         r     1 B_DBGNAME_CUR$             0-0-0/w PTR         r     1 B_DNAME_BASE$
     0-0-0/w PTR         r     1 B_DNAME_CUR$               0-0-0/w PTR         r     1 B_EDEF_BASE$
     0-0-0/w PTR         r     1 B_EDEF_CUR$                0-0-0/w PTR         r     1 B_EREF_BASE$
     0-0-0/w PTR         r     1 B_EREF_CUR$                0-0-0/w PTR         r     1 B_EXST_BASE$
     0-0-0/w PTR         r     1 B_EXST_CUR$                0-0-0/w PTR         r     1 B_INTNTRY_BASE$
     0-0-0/w PTR         r     1 B_INTNTRY_CUR$             0-0-0/w SBIN        r     1 B_LOGBLK_COUNT
     0-0-0/w UBIN        r     1 B_NUMBER_OF_SECTIONS       0-0-0/w PTR         r     1 B_RNAME_BASE$
     0-0-0/w PTR         r     1 B_RNAME_CUR$               0-0-0/w PTR         r     1 B_SDEF_BASE$
     0-0-0/w PTR         r     1 B_SDEF_CUR$                0-0-0/w PTR         r     1 B_SECTION_BASE$
     0-0-0/w PTR         r     1 B_SECTION_CUR$             0-0-0/w PTR         r     1 B_SEGDEF_BASE$
     0-0-0/w PTR         r     1 B_SEGDEF_CUR$              0-0-0/w PTR         r     1 B_SEGREF_BASE$
     0-0-0/w PTR         r     1 B_SEGREF_CUR$              0-0-0/w PTR         r     1 B_SREF_BASE$
     0-0-0/w PTR         r     1 B_SREF_CUR$                0-0-0/w PTR         r     1 B_VREBL_BASE$
     0-0-0/w PTR         r     1 B_VREBL_CUR$               0-0-0/w PTR         r     1 PTR2_SECTION_ARRAY$
     0-0-0/w EPTR        r     1 XUO_ERROR_ROUTINE          0-0-0/d STRC(216)   r     1 XUO_OU_GDS_FDS

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:528  


   Procedure XUO$OUTERM requires 148 words for executable code.
   Procedure XUO$OUTERM requires 8 words of local(AUTO) storage.
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:529  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:530  
          MINI XREF LISTING

B$ALT.CODE
     10698**DCL     10698--REDEF   10699--REDEF   10699--REDEF
B$ALT.ERR
     10699**DCL     10819>>ASSIGN
B$ALT.ERR.ERR#
     10700**DCL     10700--REDEF
B$ALT.EVID
     10699**DCL     10699--REDEF   10699--REDEF
B$TCB.ALT$
     10694**DCL     10819>>ASSIGN
B$TCB$
     10705**DCL     10819>>ASSIGN
B_DBGNAME_BASE$
     10349**DCL     10764>>IF
B_DBGNAME_CUR$
     10350**DCL     10764>>IF
B_DNAME_BASE$
     10309**DCL     10737>>IF
B_DNAME_CUR$
     10310**DCL     10737>>IF
B_EDEF_BASE$
     10388**DCL     10743>>IF
B_EDEF_CUR$
     10389**DCL     10743>>IF
B_EREF_BASE$
     10408**DCL     10745>>IF
B_EREF_CUR$
     10409**DCL     10745>>IF
B_EXST_BASE$
     10580**DCL     10760>>IF
B_EXST_CUR$
     10581**DCL     10760>>IF
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:531  
B_INTNTRY_BASE$
     10560**DCL     10758>>IF
B_INTNTRY_CUR$
     10561**DCL     10758>>IF
B_LOGBLK_COUNT
     10543**DCL     10771>>IF
B_NUMBER_OF_SECTIONS
     10263**DCL     10755>>DOINDEX
B_RNAME_BASE$
     10329**DCL     10739>>IF
B_RNAME_CUR$
     10330**DCL     10739>>IF
B_SDEF_BASE$
     10428**DCL     10747>>IF
B_SDEF_CUR$
     10429**DCL     10747>>IF
B_SECTION_BASE$
     10369**DCL     10741>>IF
B_SECTION_CUR$
     10370**DCL     10741>>IF
B_SEGDEF_BASE$
     10468**DCL     10751>>IF
B_SEGDEF_CUR$
     10469**DCL     10751>>IF
B_SEGREF_BASE$
     10488**DCL     10753>>IF
B_SEGREF_CUR$
     10489**DCL     10753>>IF
B_SREF_BASE$
     10448**DCL     10749>>IF
B_SREF_CUR$
     10449**DCL     10749>>IF
B_VREBL_BASE$
     10600**DCL     10762>>IF
B_VREBL_CUR$
     10601**DCL     10762>>IF
PL6.E3A0      #018=XUO$OUTERM File=XUO$BUILD.:E05TSI                             WED 07/30/97 09:33 Page:532  
ERROR
     10707**DCL     10819<<ASSIGN  10820<>CALL
I
     10635**DCL     10755<<DOINDEX 10756<>CALL
M$FDS
      5633**DCL-ENT 10791--CALL
PTR2_SECTION_ARRAY$
     10262**DCL     10265--IMP-PTR
SPACE_ERROR
     10771**LABEL   10791--CALLALT
XUO$HEADTERM
     10633**DCL-ENT 10782--CALL
XUO$LOGBLKTERM
     10632**DCL-ENT 10773--CALL
XUO$OUCLOSE
     10631**DCL-ENT 10787--CALL
XUO$OUWRITE
     10630**DCL-ENT 10738--CALL    10740--CALL    10742--CALL    10744--CALL    10746--CALL    10748--CALL
     10750--CALL    10752--CALL    10754--CALL    10759--CALL    10761--CALL    10763--CALL    10765--CALL
     10774--CALL    10783--CALL
XUO$PURGE_BUFFERS
     10634**DCL-ENT 10756--CALL
XUO_ERROR_ROUTINE
     10709**DCL     10817>>IF      10820>>CALL
XUO_OU_GDS_FDS
     10668**DCL     10791<>CALL

PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:533  
     4295        1        /*M*     XUO$OUWRITE - THIS MODULE OPENS, WRITES, AND CLOSES THE OBJECT UNIT*/
     4296        2        /*T***********************************************************/
     4297        3        /*T*                                                         */
     4298        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     4299        5        /*T*                                                         */
     4300        6        /*T***********************************************************/
     4301        7        /*P*     NAME:     XUO$OUWRITE
     4302        8                 PURPOSE:  THIS MODULE WILL PERFORM THE OPEN OF THE OBJECT UNIT
     4303        9                      FILE, WRITE OUT ALL RECORDS AND CLOSE THE OBJECT UNIT
     4304       10                      FILE.  IF A LO LISTING/DATA MAP IS REQUIRED AND NO
     4305       11                      GO FILE IS SPECIFIED AN OBJECT UNIT WILL BE WRITTEN TO
     4306       12                      A DUMMY FILE.
     4307       13                 DESCRIPTION:   THIS MODULE HAS THREE ENTRY POINTS WHICH ARE:
     4308       14                      1.   XUO$OUOPEN
     4309       15                      2.   XUO$OUWRITE
     4310       16                      3.   XUO$CLOSE
     4311       17                           IF AN I/O ERROR IS ENCOUNTERED, THE OU,LO,DMAP OPTIONS
     4312       18                      WILL BE TURNED OFF.
     4313       19        */
     4314       20        /*D*     NAME:     XUO$OUWRITE
     4315       21                 ENTRY POINT:   XUO$OUOPEN
     4316       22                      INPUT:
     4317       23                           NONE
     4318       24                      OUTPUT:
     4319       25                           OPEN DCB
     4320       26                 ENTRY POINT:   XUO$OUWRITE
     4321       27                      INPUT:
     4322       28                           P_RECORD_TYPE
     4323       29                           P_SECTION_NUMBER
     4324       30                           B_DNAME_BASE$
     4325       31                           B_DNAME_CUR$
     4326       32                           B_DNAME_PAGE
     4327       33                           B_RNAME_BASE$
     4328       34                           B_RNAME_CUR$
     4329       35                           B_RNAME_PAGE
     4330       36                           B_DBGNAME_BASE$
     4331       37                           B_DBGNAME_CUR$
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:534  
     4332       38                           B_DBGNAME_PAGE
     4333       39                           B_SECTION_BASE$
     4334       40                           B_SECTION_CUR$
     4335       41                           B_EDEF_BASE$
     4336       42                           B_EDEF_CUR$
     4337       43                           B_EDEF_PAGE
     4338       44                           B_EREF_BASE$
     4339       45                           B_EREF_CUR$
     4340       46                           B_EREF_PAGE
     4341       47                           B_SDEF_BASE$
     4342       48                           B_SDEF_CUR$
     4343       49                           B_SDEF_PAGE
     4344       50                           B_SREF_BASE$
     4345       51                           B_SREF_CUR$
     4346       52                           B_SREF_PAGE
     4347       53                           B_SEGDEF_BASE$
     4348       54                           B_SEGDEF_CUR$
     4349       55                           B_SEGREF_BASE$
     4350       56                           B_SEGREF_CUR$
     4351       57                           B_SEGREF_PAGE
     4352       58                           B_LOGBLK_BASE$
     4353       59                           B_LOGBLK_CUR$
     4354       60                           B_LOGBLK_PAGE
     4355       61                           B_INTNTRY_BASE$
     4356       62                           B_INTNTRY_CUR$
     4357       63                           B_INTNTRY_PAGE
     4358       64                           B_EXST_BASE$
     4359       65                           B_EXST_CUR$
     4360       66                           B_EXST_PAGE
     4361       67                           B_VREBL_BASE$
     4362       68                           B_VREBL_CUR$
     4363       69                           B_VREBL_PAGE
     4364       70                      OUTPUT:
     4365       71                           WRITTEN RECORD
     4366       72                 ENTRY POINT:   XUO$OUCLOSE
     4367       73                      INPUT:
     4368       74                           NONE
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:535  
     4369       75                      OUTPUT:
     4370       76                           CLOSED DCB
     4371       77                 DESCRIPTION:
     4372       78                           THE XUO$OUOPEN ROUTINE WILL DETERMINE IF THE
     4373       79                      OBJECT UNIT IS TO BE OPENED.  IF A DCB NUMBER
     4374       80                      WAS SPECIFIED, THE IT IS ASSUMED THAT THE CALLER
     4375       81                      WANTED TO WRITE AN OU.  IF ANY ERRORS OCCUR WHILE
     4376       82                      TRYING TO OPEN THE DCB OR NOT-HANDLED BY THE WRITE
     4377       83                      ROUTINE, THE OU DCB WILL BE CLOSED IF SPECIFIED
     4378       84                      BY THE CALLER.
     4379       85                           IF THE NO DEBUG OPTION IS SPECIFIED THEN
     4380       86                      ALL RECORDS WITH A RECORD TYPE GREATER THAN
     4381       87                      PROGRAM/RELOCATION (10) WILL NOT BE WRITTEN.
     4382       88                           THE XUO$OUWRITE ROUTINE WILL CHECK TO SEE IF
     4383       89                      A WRITE IS REQUIRED.  IF NOT A RETURN WILL BE MADE IMMEDIATELY.
     4384       90                      THE APPROPRIATE RECORD WILL THEN BE WRITTEN.  THE ONLY
     4385       91                      I/O ERROR THAT CAN OCCUR IS ON A RELOCATION RECORD WHERE
     4386       92                      A DUPLICATE KEY EXISTS.  IN THAT CASE THE SEQUENTIAL
     4387       93                      PART OF THE KEY IS UPDATED AND THE RECORD WRITTEN UNTIL
     4388       94                      A VALID WRITE OCCURS.  THEN THE APPROPRIATE BUFFER
     4389       95                      IS ZEROED OUT WITH THE EXCEPTION OF PROGRAM RECORDS WHICH
     4390       96                      ARE SET TO THE UTS VALUE.
     4391       97                           THE XUO$OUCLOSE ROUTINE WILL CLOSE THE OBJECT UNIT,
     4392       98                      IF REQUIRED.
     4393       99                           IF ANY ERRORS ARE ENCOUNTED THAT ARE NOT HANDLELED
     4394      100                      BY THE ROUTINE, AN ATTEMPT WILL BE MADE TO CALL THE
     4395      101                      CALLERS ERROR ROUTINE, IF SPECIFIED.
     4396      102        */
     4397      103        XUO$OUWRITE: PROC(P_RECORD_TYPE,P_SECTION_NUMBER);
     4398      104         /*
     4399      105            */
     4400      106        %INCLUDE ZVA_SYSTEM_FILE;
     4401     6357        %PAGE (ARG=INCLUDES);

              6370    1   /*******************************************************************************
              6371    1   *                                                                              *
              6372    1   *        INCLUDES              INCLUDES                                            *
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:536  
              6373    1   *                                                                              *
              6374    1   *******************************************************************************/

     4402     6378        %INCLUDE B$OBJECT_C;
     4403     9808        %INCLUDE XUO$OBJ_C;
     4404    10218        %INCLUDE XU_PERR_C;
     4405    10409        %INCLUDE B_ERRORS_C;
     4406    11536        %INCLUDE XUM_ENTRIES_C;
     4407    11556        %XUM_ENTRIES;
     4408    11565        %PAGE (ARG=SUBS);

             11578    1   /*******************************************************************************
             11579    1   *                                                                              *
             11580    1   *        SUBS              SUBS                                                  *
             11581    1   *                                                                              *
             11582    1   *******************************************************************************/

     4409    11586        %B$RECORDSUBS;
     4410    11614        %PLIST;
     4411    11615        %PAGE (ARG=RECORD POINTERS);

             11628    1   /*******************************************************************************
             11629    1   *                                                                              *
             11630    1   *        RECORD POINTERS              RECORD POINTERS                              *
             11631    1   *                                                                              *
             11632    1   *******************************************************************************/

     4412    11636        %B_DNAME_POINTERS;
     4413    11656        %B_RNAME_POINTERS;
     4414    11676        %B_DBGNAME_POINTERS;
     4415    11696        %B_SECTION_POINTERS;
     4416    11715        %B_EDEF_POINTERS;
     4417    11735        %B_EREF_POINTERS;
     4418    11755        %B_SDEF_POINTERS;
     4419    11775        %B_SREF_POINTERS;
     4420    11795        %B_SEGDEF_POINTERS;
     4421    11815        %B_SEGREF_POINTERS;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:537  
     4422    11835        %B_PROGRAM_POINTERS;
     4423    11850        %B_RELOCATION_POINTERS;
     4424    11865        %B_LOGBLK_POINTERS;
     4425    11887        %B_INTNTRY_POINTERS;
     4426    11907        %B_EXST_POINTERS;
     4427    11927        %B_VREBL_POINTERS;
     4428    11947        %PLIST;
     4429    11948        %PAGE (ARG=KEY DEFINTIONS);

             11961    1   /*******************************************************************************
             11962    1   *                                                                              *
             11963    1   *        KEY DEFINTIONS              KEY DEFINTIONS                                *
             11964    1   *                                                                              *
             11965    1   *******************************************************************************/

     4430    11969        %B$OUKEY (STCLASS=SYMREF,KEYSIZINIT=,NOTHDINIT=);
     4431    12005        %B$PRGRELKEY (NAME=B$RELKEY,STCLASS="BASED(B$RELKEY$)",KEYSIZINIT=,NOTHDINIT=,
             12005            TYPEINIT=);
     4432    12036    1   DCL B$RELKEY$ PTR SYMREF;
     4433    12037    1   DCL B$PRGKEY$ PTR SYMREF;
     4434    12038        %B$PRGRELKEY (NAME=B$PRGKEY,STCLASS="BASED(B$PRGKEY$)",KEYSIZINIT=,NOTHDINIT=,
             12038            TYPEINIT=);
     4435    12069    1   DCL RELKEY$ PTR;
     4436    12070        %PLIST;
     4437    12071        %PAGE (ARG=HEAD DATA);

             12084    1   /*******************************************************************************
             12085    1   *                                                                              *
             12086    1   *        HEAD DATA              HEAD DATA                                          *
             12087    1   *                                                                              *
             12088    1   *******************************************************************************/

     4438    12092    1   DCL B$OUHEAD$ PTR SYMREF;
     4439    12093        %B$OUHEAD (STCLASS="BASED(B$OUHEAD$)");
     4440    12211        %IF ~GCOS;
     4441    12212        %B$OUHEAD (NAME=OLD_HEAD_RECORD, STCLASS=AUTO);
     4442    12330        %B$OUKEY (NAME=FIRST_RECORD, STCLASS=AUTO, KEYSIZINIT=" ", NOTHDINIT=" ");
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:538  
     4443    12366        %B$OUKEY (NAME=LAST_RECORD, STCLASS=AUTO, KEYSIZINIT=" ", NOTHDINIT=" ");
     4444    12402        %VLP_ERRCODE (FPTN=PRGM_RECORD_CONFLICT, STCLASS=CONSTANT,
     4445    12403         FCG=XU,MID=O,ERR#=%E$XUO#PRGM_RECORD_CONFLICT, SEV=4);
     4446    12448        %VLP_ERRCODE (FPTN=RELOC_RECORD_CONFLICT, STCLASS=CONSTANT,
     4447    12449         FCG=XU,MID=O,ERR#=%E$XUO#RELOC_RECORD_CONFLICT, SEV=4);
     4448    12494        %VLP_ERRCODE (FPTN=ILLEGAL_OU_ASSIGNMENT, STCLASS=CONSTANT,
     4449    12495         FCG=XU,MID=O,ERR#=%E$XUO#ILLEGAL_OU_ASSIGNMENT, SEV=4);
     4450    12540        %ENDIF;
     4451    12541        %PLIST;
     4452    12542        %PAGE (ARG=FPTS);

             12555    1   /*******************************************************************************
             12556    1   *                                                                              *
             12557    1   *        FPTS              FPTS                                                  *
             12558    1   *                                                                              *
             12559    1   *******************************************************************************/

     4453    12563         /*
     4454    12564            The following fpt is to open the file
     4455    12565            */
     4456    12566    1   DCL XUO_OU_OPEN$ PTR SYMREF;
     4457    12567        %FPT_OPEN (FPTN=XUO_OU_OPEN,STCLASS="BASED(XUO_OU_OPEN$)");
     4458    12676         /*
     4459    12677         The following fpts are to write the file
     4460    12678            */
     4461    12679    1   DCL XUO_HEAD_WRITE$ PTR SYMREF;
     4462    12680        %FPT_WRITE (FPTN=XUO_HEAD_WRITE,STCLASS="BASED(XUO_HEAD_WRITE$)");
     4463    12711    1   DCL XUO_OU_WRITE$ PTR SYMREF;
     4464    12712        %FPT_WRITE (FPTN=XUO_OU_WRITE,STCLASS="BASED(XUO_OU_WRITE$)");
     4465    12743        %FPT_WRITE (FPTN=XUO_PROGRAM_WRITE,STCLASS="BASED(XUO_PROGRAM_WRITE$)");
     4466    12774        %FPT_READ (FPTN=CLEAN_READ, STCLASS=CONSTANT, KEYS=YES);
     4467    12813        %FPT_READ (FPTN=READ_OLD_HEAD, STCLASS=AUTO);
     4468    12852        %FPT_DELREC (FPTN=CLEAN_DELETE, STCLASS=CONSTANT);
     4469    12871        %FPT_DELREC (FPTN=DELETE_OLD, STCLASS=AUTO);
     4470    12890        %IF ~GCOS;
     4471    12891        %ENDIF;
     4472    12892    1   DCL XUO_PROGRAM_WRITE$ PTR SYMREF;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:539  
     4473    12893        %FPT_WRITE (FPTN=XUO_RELOCATION_WRITE,STCLASS="BASED(XUO_RELOCATION_WRITE$)");
     4474    12924    1   DCL XUO_RELOCATION_WRITE$ PTR SYMREF;
     4475    12925         /*
     4476    12926            The following fpt is to cose the file
     4477    12927            */
     4478    12928    1   DCL XUO_OU_CLOSE$ PTR SYMREF;
     4479    12929        %FPT_CLOSE (FPTN=XUO_OU_CLOSE,STCLASS="BASED(XUO_OU_CLOSE$)");
     4480    12971        %PAGE (ARG=PARAMETERS);

             12984    1   /*******************************************************************************
             12985    1   *                                                                              *
             12986    1   *        PARAMETERS              PARAMETERS                                        *
             12987    1   *                                                                              *
             12988    1   *******************************************************************************/

     4481    12992    1   DCL P_RECORD_TYPE UBIN;
     4482    12993    1   DCL P_SECTION_NUMBER UBIN;
     4483    12994        %PAGE (ARG=LOCAL DATA);

             13007    1   /*******************************************************************************
             13008    1   *                                                                              *
             13009    1   *        LOCAL DATA              LOCAL DATA                                        *
             13010    1   *                                                                              *
             13011    1   *******************************************************************************/

     4484    13015    1   DCL SECTION_NUMBER UBIN;
     4485    13016    1   DCL BOUND_TEMP UBIN;
     4486    13017    1   DCL BUF_TEMP$ PTR;
     4487    13018    1   DCL PAGE_TEMP UBIN;
     4488    13019    1   DCL RELOCATION_ERROR_FLAG BIT(1);
     4489    13020        %PAGE (ARG=TCB);

             13033    1   /*******************************************************************************
             13034    1   *                                                                              *
             13035    1   *        TCB              TCB                                                  *
             13036    1   *                                                                              *
             13037    1   *******************************************************************************/
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:540  

     4490    13041        %B$TCB;
     4491    13044        %B$ALT;
     4492    13052    1   DCL B$TCB$ PTR SYMREF;
     4493    13053         /**/
     4494    13054    1   DCL 1 ERROR,
     4495    13055    1         2 FCG_MID BIT(18),
     4496    13056    1         2 MON BIT(1),
     4497    13057    1         2 CODE UBIN(14) UNAL,
     4498    13058    1         2 SEV UBIN(3) UNAL;
     4499    13059         /**/
     4500    13060        %PAGE (ARG=BASED DATA);

             13073    1   /*******************************************************************************
             13074    1   *                                                                              *
             13075    1   *        BASED DATA              BASED DATA                                        *
             13076    1   *                                                                              *
             13077    1   *******************************************************************************/

     4501    13081    1   DCL 1 OU_CLEAR BASED(BUF_TEMP$),
     4502    13082    1         2 * CHAR(BOUND_TEMP);
     4503    13083        %F$DCB;
     4504    13140        %B_MULTIBUF_VARS;
     4505    13167        %PAGE (ARG=MISC DATA);

             13180    1   /*******************************************************************************
             13181    1   *                                                                              *
             13182    1   *        MISC DATA              MISC DATA                                          *
             13183    1   *                                                                              *
             13184    1   *******************************************************************************/

     4506    13188    1   DCL XUO_OU_DCB_NUMBER SBIN SYMREF;
     4507    13189    1   DCL XUO_OU_UTS UBIN SYMREF;
     4508    13190    1   DCL XUO_OU_WRITE_REQUIRED BIT(1) SYMREF;
     4509    13191    1   DCL XUO_SCHEMA_REQUIRED BIT(1) ALIGNED SYMREF;
     4510    13192    1   DCL XUO_ERROR_ROUTINE EPTR SYMREF;
     4511    13193    1   DCL XUO_CLOSE_REQUIRED BIT(1) ALIGNED SYMREF;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:541  
     4512    13194        %PAGE (ARG=CODE);

             13207    1   /*******************************************************************************
             13208    1   *                                                                              *
             13209    1   *        CODE              CODE                                                  *
             13210    1   *                                                                              *
             13211    1   *******************************************************************************/

     4513    13215         /*
     4514    13216            Check to see if we need to do a write
     4515    13217            */
     4516    13218    1       IF XUO_OU_WRITE_REQUIRED='0'B THEN
     4517    13219    1           RETURN;
     4518    13220         /**/
     4519    13221    1       IF ADDR(P_SECTION_NUMBER)=ADDR(NIL) THEN
     4520    13222    1           SECTION_NUMBER=0;
     4521    13223    1       ELSE
     4522    13224    1           SECTION_NUMBER=P_SECTION_NUMBER;
     4523    13225    2       DO CASE(P_RECORD_TYPE);
     4524    13226    2       CASE(0);
     4525    13227         /*
     4526    13228         The following handles the case of the head record
     4527    13229         */
     4528    13230    2           XUO_HEAD_WRITE.V.NEWKEY# = '1'B;
     4529    13231    2           XUO_HEAD_WRITE.V.ONEWKEY# = '0'B;
     4530    13232        %IF GCOS;
     4531    13233 C              CALL M$WRITE (XUO_HEAD_WRITE) ALTRET (WRITE_ERROR);
     4532    13234        %ELSE;
     4533    13235    2   WRITE_HEAD: CALL M$WRITE (XUO_HEAD_WRITE) ALTRET (HEAD_WRITE_ALTRET);
     4534    13236    2           RETURN;
     4535    13237    2   HEAD_WRITE_ALTRET: IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE ~= %E$OLDREC
     4536    13238    2           THEN GOTO WRITE_ERROR;
     4537    13239    2           XUO_HEAD_WRITE.V.NEWKEY# = '0'B;
     4538    13240    2           XUO_HEAD_WRITE.V.ONEWKEY# = '1'B;
     4539    13241    2           READ_OLD_HEAD = CLEAN_READ;
     4540    13242    2           READ_OLD_HEAD.V_ = VECTOR(READ_OLD_HEAD.V);
     4541    13243    2           READ_OLD_HEAD.V.DCB# = XUO_OU_DCB_NUMBER;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:542  
     4542    13244    2           READ_OLD_HEAD.BUF_ = VECTOR (OLD_HEAD_RECORD);
     4543    13245    2           READ_OLD_HEAD.KEY_ = XUO_HEAD_WRITE.KEY_;
     4544    13246    2           OLD_HEAD_RECORD.UTS = B$OUHEAD.UTS /* just in case */;
     4545    13247    2           CALL M$READ (READ_OLD_HEAD) ALTRET (WRITE_HEAD);
     4546    13248    2           CALL M$WRITE (XUO_HEAD_WRITE) ALTRET (WRITE_ERROR);
     4547    13249    2           IF B$OUHEAD.UTS ~= OLD_HEAD_RECORD.UTS
     4548    13250    3           THEN DO;
     4549    13251    3               FIRST_RECORD.KEYSIZ = 5;
     4550    13252    3               FIRST_RECORD.NOTHD = '777'O;
     4551    13253    3               FIRST_RECORD.UTS = OLD_HEAD_RECORD.UTS;
     4552    13254    3               LAST_RECORD.KEYSIZ = 7;
     4553    13255    3               LAST_RECORD.NOTHD = '777'O;
     4554    13256    3               LAST_RECORD.UTS = OLD_HEAD_RECORD.UTS;
     4555    13257    3               LAST_RECORD.TYPE = 255;
     4556    13258    3               LAST_RECORD.PAGE = 255;
     4557    13259    3               DELETE_OLD = CLEAN_DELETE;
     4558    13260    3               DELETE_OLD.V_ = VECTOR(DELETE_OLD.V);
     4559    13261    3               DELETE_OLD.V.DCB# = XUO_OU_DCB_NUMBER;
     4560    13262    3               DELETE_OLD.KEY_ = VECTOR(FIRST_RECORD);
     4561    13263    3               DELETE_OLD.LKEY_ = VECTOR(LAST_RECORD);
     4562    13264    3               CALL M$DELREC (DELETE_OLD) ALTRET (IGNORE_DELREC_ALTRET);
     4563    13265    3   IGNORE_DELREC_ALTRET: END;
     4564    13266        %ENDIF;
     4565    13267    2           RETURN;
     4566    13268    2       CASE(%TYPDNAM);
     4567    13269    2           BOUND_TEMP=POFFC(B_DNAME_CUR$,B_DNAME_BASE$);
     4568    13270    2           BUF_TEMP$=B_DNAME_BASE$;
     4569    13271    2           PAGE_TEMP=B_DNAME_PAGE;
     4570    13272    2       CASE(%TYPRNAM);
     4571    13273    2           BOUND_TEMP=POFFC(B_RNAME_CUR$,B_RNAME_BASE$);
     4572    13274    2           BUF_TEMP$=B_RNAME_BASE$;
     4573    13275    2           PAGE_TEMP=B_RNAME_PAGE;
     4574    13276    2       CASE(%TYPSECT);
     4575    13277    2           BOUND_TEMP=POFFC(B_SECTION_CUR$,B_SECTION_BASE$);
     4576    13278    2           BUF_TEMP$=B_SECTION_BASE$;
     4577    13279    2           PAGE_TEMP=0;
     4578    13280    2       CASE(%TYPEDEF);
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:543  
     4579    13281    2           BOUND_TEMP=POFFC(B_EDEF_CUR$,B_EDEF_BASE$);
     4580    13282    2           BUF_TEMP$=B_EDEF_BASE$;
     4581    13283    2           PAGE_TEMP=B_EDEF_PAGE;
     4582    13284    2       CASE(%TYPEREF);
     4583    13285    2           BOUND_TEMP=POFFC(B_EREF_CUR$,B_EREF_BASE$);
     4584    13286    2           BUF_TEMP$=B_EREF_BASE$;
     4585    13287    2           PAGE_TEMP=B_EREF_PAGE;
     4586    13288    2       CASE(%TYPSDEF);
     4587    13289    2           BOUND_TEMP=POFFC(B_SDEF_CUR$,B_SDEF_BASE$);
     4588    13290    2           BUF_TEMP$=B_SDEF_BASE$;
     4589    13291    2           PAGE_TEMP=B_SDEF_PAGE;
     4590    13292    2       CASE(%TYPSREF);
     4591    13293    2           BOUND_TEMP=POFFC(B_SREF_CUR$,B_SREF_BASE$);
     4592    13294    2           BUF_TEMP$=B_SREF_BASE$;
     4593    13295    2           PAGE_TEMP=B_SREF_PAGE;
     4594    13296    2       CASE(%TYPSEGDEF);
     4595    13297    2           BOUND_TEMP=POFFC(B_SEGDEF_CUR$,B_SEGDEF_BASE$);
     4596    13298    2           BUF_TEMP$=B_SEGDEF_BASE$;
     4597    13299    2           PAGE_TEMP=B_SEGDEF_PAGE;
     4598    13300    2       CASE(%TYPSEGREF);
     4599    13301    2           BOUND_TEMP=POFFC(B_SEGREF_CUR$,B_SEGREF_BASE$);
     4600    13302    2           BUF_TEMP$=B_SEGREF_BASE$;
     4601    13303    2           PAGE_TEMP=B_SEGREF_PAGE;
     4602    13304    2       CASE(%TYPPROG);
     4603    13305
     4604    13306    2           B$PRGKEY.OFFSET = SECTION_ARRAY.BUF_OFFSET (SECTION_NUMBER);
     4605    13307    2           B$PRGKEY.SECTNUM = SECTION_NUMBER;
     4606    13308
     4607    13309    2           BOUND_TEMP = SECTION_ARRAY.PROGRAM_CURS(SECTION_NUMBER) *4;
     4608    13310    2           BUF_TEMP$ =SECTION_ARRAY.PTR2_PROGRAM_BUF$(SECTION_NUMBER);
     4609    13311    2           XUO_PROGRAM_WRITE.BUF_.BOUND = BOUND_TEMP - 1;
     4610    13312    2           XUO_PROGRAM_WRITE.BUF_.BUF$ = BUF_TEMP$;
     4611    13313    2           CALL M$WRITE (XUO_PROGRAM_WRITE) ALTRET(WRITE_ERROR);
     4612    13314    2           OU_CLEAR='0'B;
     4613    13315
     4614    13316    2           RETURN;
     4615    13317    2       CASE(%TYPLOGBLK);
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:544  
     4616    13318    2           BOUND_TEMP=POFFC(B_LOGBLK_CUR$,B_LOGBLK_ENTRY0$);
     4617    13319    2           BUF_TEMP$=B_LOGBLK_ENTRY0$;
     4618    13320    2           PAGE_TEMP=B_LOGBLK_PAGE;
     4619    13321    2       CASE(%TYPINTNTRY);
     4620    13322    2           BOUND_TEMP=POFFC(B_INTNTRY_CUR$,B_INTNTRY_BASE$);
     4621    13323    2           BUF_TEMP$=B_INTNTRY_BASE$;
     4622    13324    2           PAGE_TEMP=B_INTNTRY_PAGE;
     4623    13325    2       CASE(%TYPEXST);
     4624    13326    2           BOUND_TEMP=POFFC(B_EXST_CUR$,B_EXST_BASE$);
     4625    13327    2           BUF_TEMP$=B_EXST_BASE$;
     4626    13328    2           PAGE_TEMP=B_EXST_PAGE;
     4627    13329    2       CASE(%TYPVREBL);
     4628    13330    2           BOUND_TEMP=POFFC(B_VREBL_CUR$,B_VREBL_BASE$);
     4629    13331    2           BUF_TEMP$=B_VREBL_BASE$;
     4630    13332    2           PAGE_TEMP=B_VREBL_PAGE;
     4631    13333    2       CASE(%TYPDBGNAM);
     4632    13334    2           BOUND_TEMP=POFFC(B_DBGNAME_CUR$,B_DBGNAME_BASE$);
     4633    13335    2           BUF_TEMP$=B_DBGNAME_BASE$;
     4634    13336    2           PAGE_TEMP=B_DBGNAME_PAGE;
     4635    13337    2       CASE(16);
     4636    13338         /*
     4637    13339            Handles relocation records
     4638    13340            */
     4639    13341    2           B$RELKEY.OFFSET = SECTION_ARRAY.BUF_OFFSET (SECTION_NUMBER);
     4640    13342    2           B$RELKEY.SECTNUM = SECTION_NUMBER;
     4641    13343
     4642    13344    2           BOUND_TEMP = SECTION_ARRAY.RELOCATION_CURS(SECTION_NUMBER)
     4643    13345    2              * 4;
     4644    13346    2           BUF_TEMP$ = SECTION_ARRAY.PTR2_RELOCATION_BUF$(SECTION_NUMBER);
     4645    13347    2           XUO_RELOCATION_WRITE.BUF_.BOUND = BOUND_TEMP - 1;
     4646    13348    2           XUO_RELOCATION_WRITE.BUF_.BUF$ = BUF_TEMP$;
     4647    13349         /*
     4648    13350         May get altret which is valid due to two keys the same.  If that
     4649    13351         happens  must use sequence field and bump key size.
     4650    13352         */
     4651    13353    2           CALL M$WRITE (XUO_RELOCATION_WRITE) ALTRET(XUO_RELOCATION_WRITE_ERROR);
     4652    13354    2           OU_CLEAR='0'B;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:545  
     4653    13355    2           RETURN;
     4654    13356    2           END;
     4655    13357         /*
     4656    13358         The following handles all records except head,program and relocation records.
     4657    13359         NOTE: The record area is zeroed after the write.
     4658    13360         */
     4659    13361    1       XUO_OU_WRITE.BUF_.BOUND=BOUND_TEMP-1;
     4660    13362    1       XUO_OU_WRITE.BUF_.BUF$=BUF_TEMP$;
     4661    13363    1       B$OUKEY.TYPE=P_RECORD_TYPE;
     4662    13364    1       B$OUKEY.PAGE=PAGE_TEMP;
     4663    13365         /*
     4664    13366            If no debug was specified dont
     4665    13367            output any debug records.
     4666    13368            NOTE:  It is not the most
     4667    13369            efficient place to check but is
     4668    13370            is the most reliable.  The overhead
     4669    13371            to build the debug records should
     4670    13372            be minimal.  If not, the person
     4671    13373            calling the routines that build them
     4672    13374            need not call them.
     4673    13375            */
     4674    13376    1       IF NOT (XUO_SCHEMA_REQUIRED='0'B AND P_RECORD_TYPE>10) THEN
     4675    13377    1           CALL M$WRITE (XUO_OU_WRITE) ALTRET(WRITE_ERROR);
     4676    13378    1       OU_CLEAR='0'B;
     4677    13379    1       RETURN;
     4678    13380            %PAGE (ARG=ERRORS);

             13393    1   /*******************************************************************************
             13394    1   *                                                                              *
             13395    1   *        ERRORS              ERRORS                                                *
             13396    1   *                                                                              *
             13397    1   *******************************************************************************/

     4679    13401         /*
     4680    13402         The following handles the case of an error on writeing ou
     4681    13403         */
     4682    13404    1   WRITE_ERROR: ;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:546  
     4683    13405         /*
     4684    13406         The following will return the error code
     4685    13407         to the appropriate routine.
     4686    13408         Further i/o will be inhibited;  if
     4687    13409         the "close DCB" flag is set, a default
     4688    13410         close will be performed.
     4689    13411            */
     4690    13412    1       XUO_OU_WRITE_REQUIRED='0'B;
     4691    13413    1       IF XUO_ERROR_ROUTINE~=ENTADDR(NIL) THEN
     4692    13414    2       DO;
     4693    13415    2           ERROR=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
     4694    13416        %IF CP6;
     4695    13417    2           IF P_RECORD_TYPE = %TYPPROG
     4696    13418    2              AND B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$OLDREC
     4697    13419    2           THEN
     4698    13420    2               CALL XUO_ERROR_ROUTINE (PRGM_RECORD_CONFLICT);
     4699    13421    2           ELSE
     4700    13422         %ENDIF;
     4701    13423    2               CALL XUO_ERROR_ROUTINE (ERROR);
     4702    13424        /*E*  ERROR:   XUO-E$XUO#PRGM_RECORD_CONFLICT
     4703    13425              MESSAGE:A fatal error has occurred while building an object unit.  An attempt
     4704    13426                      has been made to output two "program record" values for the
     4705    13427                      same location in some control section.  This is not permitted,
     4706    13428                      and has resulted in a file-management error.
     4707    13429
     4708    13430                      Note that this error can occur only if the "trust me!" flag was
     4709    13431                      set on the call to XUO$INIT;  otherwise, a "locations are being
     4710    13432                      written in nonascending order" error would have been reported
     4711    13433                      at some earlier time.  Trust is such a fragile thing...
     4712    13434        */
     4713    13435    2           END;
     4714    13436    1       IF XUO_CLOSE_REQUIRED THEN
     4715    13437    1           CALL M$CLOSE (XUO_OU_CLOSE) ALTRET(IGNORE_CLOSE_ERROR);
     4716    13438    1   IGNORE_CLOSE_ERROR: ;
     4717    13439    1       RETURN;
     4718    13440         /*
     4719    13441            */
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:547  
     4720    13442    1   XUO_RELOCATION_WRITE_ERROR: ;
     4721    13443         /*
     4722    13444         Check to see if relocation record with the same key exists. If so,
     4723    13445         it is not an error.
     4724    13446         NOTE: Flag is zero on entry.
     4725    13447         */
     4726    13448    1       IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$OLDREC THEN
     4727    13449         /*
     4728    13450         Handle the case of the error being a record exists
     4729    13451         */
     4730    13452    2       DO;
     4731    13453    2           IF B$RELKEY.KEYSIZ=11 THEN
     4732    13454    2               B$RELKEY.KEYSIZ=12;
     4733    13455        %IF CP6;
     4734    13456    2           IF B$RELKEY.SEQUENCE = 511
     4735    13457    3           THEN DO;
     4736    13458    3               IF XUO_ERROR_ROUTINE ~= ENTADDR(NIL)
     4737    13459    3               THEN
     4738    13460    3                   CALL XUO_ERROR_ROUTINE (RELOC_RECORD_CONFLICT);
     4739    13461        /*E*  ERROR:   XUO-E$XUO#RELOC_RECORD_CONFLICT
     4740    13462              MESSAGE:A fatal error has occurred while building an object unit.  An
     4741    13463                      attempt has been made to write more than 512 relocation records at
     4742    13464                      one location within a control section.  This error suggests that
     4743    13465                      an error may exist in the compiler/translator being used.
     4744    13466        */
     4745    13467    3               XUO_OU_WRITE_REQUIRED = '0'B;
     4746    13468    3               IF XUO_CLOSE_REQUIRED
     4747    13469    3               THEN
     4748    13470    3                   CALL M$CLOSE (XUO_OU_CLOSE) ALTRET (IGNORE_CLOSE_ERROR);
     4749    13471    3               RETURN;
     4750    13472    3               END;
     4751    13473        %ENDIF;
     4752    13474    2           B$RELKEY.SEQUENCE=B$RELKEY.SEQUENCE+1;
     4753    13475    2           CALL M$WRITE (XUO_RELOCATION_WRITE) ALTRET(XUO_RELOCATION_WRITE_ERROR);
     4754    13476    2           B$RELKEY.KEYSIZ=11;
     4755    13477    2           B$RELKEY.SEQUENCE=0;
     4756    13478    2           OU_CLEAR='0'B;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:548  
     4757    13479    2           RETURN;
     4758    13480    2           END;
     4759    13481    1       ELSE
     4760    13482         /*
     4761    13483         Indicate an error other than duplicate key.
     4762    13484         */
     4763    13485    1           GOTO WRITE_ERROR;
     4764    13486            %PAGE (ARG=XUO$OUOPEN);

             13499    1   /*******************************************************************************
             13500    1   *                                                                              *
             13501    1   *        XUO$OUOPEN              XUO$OUOPEN                                        *
             13502    1   *                                                                              *
             13503    1   *******************************************************************************/

     4765    13507    1   XUO$OUOPEN: ENTRY;
     4766    13508         /*
     4767    13509            The following sees if the
     4768    13510            ou file is to be output.  If not
     4769    13511            the file is not opened.
     4770    13512            */
     4771    13513    1       IF XUO_OU_DCB_NUMBER=DCBNUMNIL THEN
     4772    13514    1           RETURN;
     4773    13515        %IF CP6;
     4774    13516    1       IF DCBADDR(XUO_OU_DCB_NUMBER) -> F$DCB.ASN# ~= %FILE#
     4775    13517    1          AND (DCBADDR(XUO_OU_DCB_NUMBER) -> F$DCB.ASN# ~= %DEVICE# OR
     4776    13518    1          DCBADDR(XUO_OU_DCB_NUMBER) -> F$DCB.RES# ~= 'NO')
     4777    13519    2       THEN DO;
     4778    13520    2           IF XUO_ERROR_ROUTINE ~= ENTADDR(NIL)
     4779    13521    2           THEN
     4780    13522    2               CALL XUO_ERROR_ROUTINE (ILLEGAL_OU_ASSIGNMENT);
     4781    13523        /*E*  ERROR:   XUO-E$XUO#ILLEGAL_OU_ASSIGNMENT
     4782    13524              MESSAGE: An attempt has been made to create an object unit on some device
     4783    13525                       or medium that cannot be used in this way.  While it is possible
     4784    13526                       to store object units on tape once they have been created, all
     4785    13527                       object units must be initially built as CP-6 keyed disk files.
     4786    13528                       The only other "device" to which your object-unit DCB may be
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:549  
     4787    13529                       assigned is the "NO" device (the trashcan).
     4788    13530        */
     4789    13531    2           XUO_OU_WRITE_REQUIRED = %NO#;
     4790    13532    2           XUO_CLOSE_REQUIRED = %NO#;
     4791    13533    2           RETURN;
     4792    13534    2           END;
     4793    13535        %ENDIF;
     4794    13536    1       IF XUO_CLOSE_REQUIRED
     4795    13537         %IF ~GCOS;
     4796    13538    1          OR NOT DCBADDR(XUO_OU_DCB_NUMBER) -> F$DCB.FCD#
     4797    13539         %ENDIF;
     4798    13540    1       THEN
     4799    13541    1           CALL M$OPEN(XUO_OU_OPEN) ALTRET(XUO_OU_OPEN_ERROR);
     4800    13542    1       XUO_OU_WRITE_REQUIRED='1'B;
     4801    13543    1       RETURN;
     4802    13544         /*
     4803    13545         The following handles the case of an error on the open of
     4804    13546         the ou/oulo file.
     4805    13547         XUO_OU_OPEN_ERROR* ;
     4806    13548         */
     4807    13549    1   XUO_OU_OPEN_ERROR: ;
     4808    13550    1       IF XUO_ERROR_ROUTINE~=ENTADDR(NIL) THEN
     4809    13551    2       DO;
     4810    13552    2           ERROR=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
     4811    13553    2           CALL XUO_ERROR_ROUTINE(ERROR);
     4812    13554    2           END;
     4813    13555    1       RETURN;
     4814    13556            %PAGE (ARG=XUO$OUCLOSE);

             13569    1   /*******************************************************************************
             13570    1   *                                                                              *
             13571    1   *        XUO$OUCLOSE              XUO$OUCLOSE                                      *
             13572    1   *                                                                              *
             13573    1   *******************************************************************************/

     4815    13577    1   XUO$OUCLOSE: ENTRY;
     4816    13578         /*
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:550  
     4817    13579            See if need to do anything
     4818    13580         NOTE: Do not close lo FILE...IT will be closed later
     4819    13581         */
     4820    13582    1       IF XUO_OU_WRITE_REQUIRED='1'B AND XUO_CLOSE_REQUIRED='1'B THEN
     4821    13583    1           CALL M$CLOSE (XUO_OU_CLOSE) ALTRET(IGNORE_CLOSE_ERROR_1);
     4822    13584    1   IGNORE_CLOSE_ERROR_1: ;
     4823    13585    1       RETURN;
     4824    13586    1   END XUO$OUWRITE;
     4825    13587        %EOD;

PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:551  
--  Include file information  --

   XUM_ENTRIES_C.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   XU_PERR_C.:E05TOU  is referenced.
   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$OUWRITE.

   Procedure XUO$OUWRITE requires 561 words for executable code.
   Procedure XUO$OUWRITE requires 72 words of local(AUTO) storage.

PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:552  

 Object Unit name= XUO$OUWRITE                                File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:33:28.12 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     29     35  XUO$OUWRITE
    2   Proc  even  none   561   1061  XUO$OUWRITE
    3  RoData even  none     9     11  XUO$OUWRITE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        2  XUO$OUWRITE
     2    750                  yes      Std        0  XUO$OUOPEN
     2   1046                  yes      Std        0  XUO$OUCLOSE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:553  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_DNAME_BASE$                         B_DNAME_CUR$
     B_DNAME_PAGE                          B_RNAME_BASE$                         B_RNAME_CUR$
     B_RNAME_PAGE                          B_DBGNAME_BASE$                       B_DBGNAME_CUR$
     B_DBGNAME_PAGE                        B_SECTION_BASE$                       B_SECTION_CUR$
     B_EDEF_BASE$                          B_EDEF_CUR$                           B_EDEF_PAGE
     B_EREF_BASE$                          B_EREF_CUR$                           B_EREF_PAGE
     B_SDEF_BASE$                          B_SDEF_CUR$                           B_SDEF_PAGE
     B_SREF_BASE$                          B_SREF_CUR$                           B_SREF_PAGE
     B_SEGDEF_BASE$                        B_SEGDEF_CUR$                         B_SEGDEF_PAGE
     B_SEGREF_BASE$                        B_SEGREF_CUR$                         B_SEGREF_PAGE
     B_LOGBLK_ENTRY0$                      B_LOGBLK_CUR$                         B_LOGBLK_PAGE
     B_INTNTRY_BASE$                       B_INTNTRY_CUR$                        B_INTNTRY_PAGE
     B_EXST_BASE$                          B_EXST_CUR$                           B_EXST_PAGE
     B_VREBL_BASE$                         B_VREBL_CUR$                          B_VREBL_PAGE
     B$OUKEY                               B$RELKEY$                             B$PRGKEY$
     B$OUHEAD$                             XUO_OU_OPEN$                          XUO_HEAD_WRITE$
     XUO_OU_WRITE$                         XUO_PROGRAM_WRITE$                    XUO_RELOCATION_WRITE$
     XUO_OU_CLOSE$                         B$TCB$                                PTR2_SECTION_ARRAY$
     XUO_OU_DCB_NUMBER                     XUO_OU_WRITE_REQUIRED                 XUO_SCHEMA_REQUIRED
     XUO_ERROR_ROUTINE                     XUO_CLOSE_REQUIRED                    B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:554  


     4295        1        /*M*     XUO$OUWRITE - THIS MODULE OPENS, WRITES, AND CLOSES THE OBJECT UNIT*/
     4296        2        /*T***********************************************************/
     4297        3        /*T*                                                         */
     4298        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     4299        5        /*T*                                                         */
     4300        6        /*T***********************************************************/
     4301        7        /*P*     NAME:     XUO$OUWRITE
     4302        8                 PURPOSE:  THIS MODULE WILL PERFORM THE OPEN OF THE OBJECT UNIT
     4303        9                      FILE, WRITE OUT ALL RECORDS AND CLOSE THE OBJECT UNIT
     4304       10                      FILE.  IF A LO LISTING/DATA MAP IS REQUIRED AND NO
     4305       11                      GO FILE IS SPECIFIED AN OBJECT UNIT WILL BE WRITTEN TO
     4306       12                      A DUMMY FILE.
     4307       13                 DESCRIPTION:   THIS MODULE HAS THREE ENTRY POINTS WHICH ARE:
     4308       14                      1.   XUO$OUOPEN
     4309       15                      2.   XUO$OUWRITE
     4310       16                      3.   XUO$CLOSE
     4311       17                           IF AN I/O ERROR IS ENCOUNTERED, THE OU,LO,DMAP OPTIONS
     4312       18                      WILL BE TURNED OFF.
     4313       19        */
     4314       20        /*D*     NAME:     XUO$OUWRITE
     4315       21                 ENTRY POINT:   XUO$OUOPEN
     4316       22                      INPUT:
     4317       23                           NONE
     4318       24                      OUTPUT:
     4319       25                           OPEN DCB
     4320       26                 ENTRY POINT:   XUO$OUWRITE
     4321       27                      INPUT:
     4322       28                           P_RECORD_TYPE
     4323       29                           P_SECTION_NUMBER
     4324       30                           B_DNAME_BASE$
     4325       31                           B_DNAME_CUR$
     4326       32                           B_DNAME_PAGE
     4327       33                           B_RNAME_BASE$
     4328       34                           B_RNAME_CUR$
     4329       35                           B_RNAME_PAGE
     4330       36                           B_DBGNAME_BASE$
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:555  
     4331       37                           B_DBGNAME_CUR$
     4332       38                           B_DBGNAME_PAGE
     4333       39                           B_SECTION_BASE$
     4334       40                           B_SECTION_CUR$
     4335       41                           B_EDEF_BASE$
     4336       42                           B_EDEF_CUR$
     4337       43                           B_EDEF_PAGE
     4338       44                           B_EREF_BASE$
     4339       45                           B_EREF_CUR$
     4340       46                           B_EREF_PAGE
     4341       47                           B_SDEF_BASE$
     4342       48                           B_SDEF_CUR$
     4343       49                           B_SDEF_PAGE
     4344       50                           B_SREF_BASE$
     4345       51                           B_SREF_CUR$
     4346       52                           B_SREF_PAGE
     4347       53                           B_SEGDEF_BASE$
     4348       54                           B_SEGDEF_CUR$
     4349       55                           B_SEGREF_BASE$
     4350       56                           B_SEGREF_CUR$
     4351       57                           B_SEGREF_PAGE
     4352       58                           B_LOGBLK_BASE$
     4353       59                           B_LOGBLK_CUR$
     4354       60                           B_LOGBLK_PAGE
     4355       61                           B_INTNTRY_BASE$
     4356       62                           B_INTNTRY_CUR$
     4357       63                           B_INTNTRY_PAGE
     4358       64                           B_EXST_BASE$
     4359       65                           B_EXST_CUR$
     4360       66                           B_EXST_PAGE
     4361       67                           B_VREBL_BASE$
     4362       68                           B_VREBL_CUR$
     4363       69                           B_VREBL_PAGE
     4364       70                      OUTPUT:
     4365       71                           WRITTEN RECORD
     4366       72                 ENTRY POINT:   XUO$OUCLOSE
     4367       73                      INPUT:
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:556  
     4368       74                           NONE
     4369       75                      OUTPUT:
     4370       76                           CLOSED DCB
     4371       77                 DESCRIPTION:
     4372       78                           THE XUO$OUOPEN ROUTINE WILL DETERMINE IF THE
     4373       79                      OBJECT UNIT IS TO BE OPENED.  IF A DCB NUMBER
     4374       80                      WAS SPECIFIED, THE IT IS ASSUMED THAT THE CALLER
     4375       81                      WANTED TO WRITE AN OU.  IF ANY ERRORS OCCUR WHILE
     4376       82                      TRYING TO OPEN THE DCB OR NOT-HANDLED BY THE WRITE
     4377       83                      ROUTINE, THE OU DCB WILL BE CLOSED IF SPECIFIED
     4378       84                      BY THE CALLER.
     4379       85                           IF THE NO DEBUG OPTION IS SPECIFIED THEN
     4380       86                      ALL RECORDS WITH A RECORD TYPE GREATER THAN
     4381       87                      PROGRAM/RELOCATION (10) WILL NOT BE WRITTEN.
     4382       88                           THE XUO$OUWRITE ROUTINE WILL CHECK TO SEE IF
     4383       89                      A WRITE IS REQUIRED.  IF NOT A RETURN WILL BE MADE IMMEDIATELY.
     4384       90                      THE APPROPRIATE RECORD WILL THEN BE WRITTEN.  THE ONLY
     4385       91                      I/O ERROR THAT CAN OCCUR IS ON A RELOCATION RECORD WHERE
     4386       92                      A DUPLICATE KEY EXISTS.  IN THAT CASE THE SEQUENTIAL
     4387       93                      PART OF THE KEY IS UPDATED AND THE RECORD WRITTEN UNTIL
     4388       94                      A VALID WRITE OCCURS.  THEN THE APPROPRIATE BUFFER
     4389       95                      IS ZEROED OUT WITH THE EXCEPTION OF PROGRAM RECORDS WHICH
     4390       96                      ARE SET TO THE UTS VALUE.
     4391       97                           THE XUO$OUCLOSE ROUTINE WILL CLOSE THE OBJECT UNIT,
     4392       98                      IF REQUIRED.
     4393       99                           IF ANY ERRORS ARE ENCOUNTED THAT ARE NOT HANDLELED
     4394      100                      BY THE ROUTINE, AN ATTEMPT WILL BE MADE TO CALL THE
     4395      101                      CALLERS ERROR ROUTINE, IF SPECIFIED.
     4396      102        */
     4397      103        XUO$OUWRITE: PROC(P_RECORD_TYPE,P_SECTION_NUMBER);

    103  2 000000   000000 700200 xent  XUO$OUWRITE  TSX0  ! X66_AUTO_2
         2 000001   000110 000002                    ZERO    72,2

     4398      104         /*
     4399      105            */
     4400      106        %INCLUDE ZVA_SYSTEM_FILE;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:557  
     4401     6357        %PAGE (ARG=INCLUDES);

              6370    1   /*******************************************************************************
              6371    1   *                                                                              *
              6372    1   *        INCLUDES              INCLUDES                                           *
              6373    1   *                                                                              *
              6374    1   *******************************************************************************/

     4402     6378        %INCLUDE B$OBJECT_C;
     4403     9808        %INCLUDE XUO$OBJ_C;
     4404    10218        %INCLUDE XU_PERR_C;
     4405    10409        %INCLUDE B_ERRORS_C;
     4406    11536        %INCLUDE XUM_ENTRIES_C;
     4407    11556        %XUM_ENTRIES;
     4408    11565        %PAGE (ARG=SUBS);

             11578    1   /*******************************************************************************
             11579    1   *                                                                              *
             11580    1   *        SUBS              SUBS                                                  *
             11581    1   *                                                                              *
             11582    1   *******************************************************************************/

     4409    11586        %B$RECORDSUBS;
     4410    11614        %PLIST;
     4411    11615        %PAGE (ARG=RECORD POINTERS);

             11628    1   /*******************************************************************************
             11629    1   *                                                                              *
             11630    1   *        RECORD POINTERS              RECORD POINTERS                             *
             11631    1   *                                                                              *
             11632    1   *******************************************************************************/

     4412    11636        %B_DNAME_POINTERS;
     4413    11656        %B_RNAME_POINTERS;
     4414    11676        %B_DBGNAME_POINTERS;
     4415    11696        %B_SECTION_POINTERS;
     4416    11715        %B_EDEF_POINTERS;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:558  
     4417    11735        %B_EREF_POINTERS;
     4418    11755        %B_SDEF_POINTERS;
     4419    11775        %B_SREF_POINTERS;
     4420    11795        %B_SEGDEF_POINTERS;
     4421    11815        %B_SEGREF_POINTERS;
     4422    11835        %B_PROGRAM_POINTERS;
     4423    11850        %B_RELOCATION_POINTERS;
     4424    11865        %B_LOGBLK_POINTERS;
     4425    11887        %B_INTNTRY_POINTERS;
     4426    11907        %B_EXST_POINTERS;
     4427    11927        %B_VREBL_POINTERS;
     4428    11947        %PLIST;
     4429    11948        %PAGE (ARG=KEY DEFINTIONS);

             11961    1   /*******************************************************************************
             11962    1   *                                                                              *
             11963    1   *        KEY DEFINTIONS              KEY DEFINTIONS                               *
             11964    1   *                                                                              *
             11965    1   *******************************************************************************/

     4430    11969        %B$OUKEY (STCLASS=SYMREF,KEYSIZINIT=,NOTHDINIT=);
     4431    12005        %B$PRGRELKEY (NAME=B$RELKEY,STCLASS="BASED(B$RELKEY$)",KEYSIZINIT=,NOTHDINIT=,
             12005            TYPEINIT=);
     4432    12036    1   DCL B$RELKEY$ PTR SYMREF;
     4433    12037    1   DCL B$PRGKEY$ PTR SYMREF;
     4434    12038        %B$PRGRELKEY (NAME=B$PRGKEY,STCLASS="BASED(B$PRGKEY$)",KEYSIZINIT=,NOTHDINIT=,
             12038            TYPEINIT=);
     4435    12069    1   DCL RELKEY$ PTR;
     4436    12070        %PLIST;
     4437    12071        %PAGE (ARG=HEAD DATA);

             12084    1   /*******************************************************************************
             12085    1   *                                                                              *
             12086    1   *        HEAD DATA              HEAD DATA                                         *
             12087    1   *                                                                              *
             12088    1   *******************************************************************************/

PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:559  
     4438    12092    1   DCL B$OUHEAD$ PTR SYMREF;
     4439    12093        %B$OUHEAD (STCLASS="BASED(B$OUHEAD$)");
     4440    12211        %IF ~GCOS;
     4441    12212        %B$OUHEAD (NAME=OLD_HEAD_RECORD, STCLASS=AUTO);
     4442    12330        %B$OUKEY (NAME=FIRST_RECORD, STCLASS=AUTO, KEYSIZINIT=" ", NOTHDINIT=" ");
     4443    12366        %B$OUKEY (NAME=LAST_RECORD, STCLASS=AUTO, KEYSIZINIT=" ", NOTHDINIT=" ");
     4444    12402        %VLP_ERRCODE (FPTN=PRGM_RECORD_CONFLICT, STCLASS=CONSTANT,
     4445    12403         FCG=XU,MID=O,ERR#=%E$XUO#PRGM_RECORD_CONFLICT, SEV=4);
     4446    12448        %VLP_ERRCODE (FPTN=RELOC_RECORD_CONFLICT, STCLASS=CONSTANT,
     4447    12449         FCG=XU,MID=O,ERR#=%E$XUO#RELOC_RECORD_CONFLICT, SEV=4);
     4448    12494        %VLP_ERRCODE (FPTN=ILLEGAL_OU_ASSIGNMENT, STCLASS=CONSTANT,
     4449    12495         FCG=XU,MID=O,ERR#=%E$XUO#ILLEGAL_OU_ASSIGNMENT, SEV=4);
     4450    12540        %ENDIF;
     4451    12541        %PLIST;
     4452    12542        %PAGE (ARG=FPTS);

             12555    1   /*******************************************************************************
             12556    1   *                                                                              *
             12557    1   *        FPTS              FPTS                                                  *
             12558    1   *                                                                              *
             12559    1   *******************************************************************************/

     4453    12563         /*
     4454    12564            The following fpt is to open the file
     4455    12565            */
     4456    12566    1   DCL XUO_OU_OPEN$ PTR SYMREF;
     4457    12567        %FPT_OPEN (FPTN=XUO_OU_OPEN,STCLASS="BASED(XUO_OU_OPEN$)");
     4458    12676         /*
     4459    12677         The following fpts are to write the file
     4460    12678            */
     4461    12679    1   DCL XUO_HEAD_WRITE$ PTR SYMREF;
     4462    12680        %FPT_WRITE (FPTN=XUO_HEAD_WRITE,STCLASS="BASED(XUO_HEAD_WRITE$)");
     4463    12711    1   DCL XUO_OU_WRITE$ PTR SYMREF;
     4464    12712        %FPT_WRITE (FPTN=XUO_OU_WRITE,STCLASS="BASED(XUO_OU_WRITE$)");
     4465    12743        %FPT_WRITE (FPTN=XUO_PROGRAM_WRITE,STCLASS="BASED(XUO_PROGRAM_WRITE$)");
     4466    12774        %FPT_READ (FPTN=CLEAN_READ, STCLASS=CONSTANT, KEYS=YES);
     4467    12813        %FPT_READ (FPTN=READ_OLD_HEAD, STCLASS=AUTO);
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:560  
     4468    12852        %FPT_DELREC (FPTN=CLEAN_DELETE, STCLASS=CONSTANT);
     4469    12871        %FPT_DELREC (FPTN=DELETE_OLD, STCLASS=AUTO);
     4470    12890        %IF ~GCOS;
     4471    12891        %ENDIF;
     4472    12892    1   DCL XUO_PROGRAM_WRITE$ PTR SYMREF;
     4473    12893        %FPT_WRITE (FPTN=XUO_RELOCATION_WRITE,STCLASS="BASED(XUO_RELOCATION_WRITE$)");
     4474    12924    1   DCL XUO_RELOCATION_WRITE$ PTR SYMREF;
     4475    12925         /*
     4476    12926            The following fpt is to cose the file
     4477    12927            */
     4478    12928    1   DCL XUO_OU_CLOSE$ PTR SYMREF;
     4479    12929        %FPT_CLOSE (FPTN=XUO_OU_CLOSE,STCLASS="BASED(XUO_OU_CLOSE$)");
     4480    12971        %PAGE (ARG=PARAMETERS);

             12984    1   /*******************************************************************************
             12985    1   *                                                                              *
             12986    1   *        PARAMETERS              PARAMETERS                                       *
             12987    1   *                                                                              *
             12988    1   *******************************************************************************/

     4481    12992    1   DCL P_RECORD_TYPE UBIN;
     4482    12993    1   DCL P_SECTION_NUMBER UBIN;
     4483    12994        %PAGE (ARG=LOCAL DATA);

             13007    1   /*******************************************************************************
             13008    1   *                                                                              *
             13009    1   *        LOCAL DATA              LOCAL DATA                                       *
             13010    1   *                                                                              *
             13011    1   *******************************************************************************/

     4484    13015    1   DCL SECTION_NUMBER UBIN;
     4485    13016    1   DCL BOUND_TEMP UBIN;
     4486    13017    1   DCL BUF_TEMP$ PTR;
     4487    13018    1   DCL PAGE_TEMP UBIN;
     4488    13019    1   DCL RELOCATION_ERROR_FLAG BIT(1);
     4489    13020        %PAGE (ARG=TCB);

PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:561  
             13033    1   /*******************************************************************************
             13034    1   *                                                                              *
             13035    1   *        TCB              TCB                                                  *
             13036    1   *                                                                              *
             13037    1   *******************************************************************************/

     4490    13041        %B$TCB;
     4491    13044        %B$ALT;
     4492    13052    1   DCL B$TCB$ PTR SYMREF;
     4493    13053         /**/
     4494    13054    1   DCL 1 ERROR,
     4495    13055    1         2 FCG_MID BIT(18),
     4496    13056    1         2 MON BIT(1),
     4497    13057    1         2 CODE UBIN(14) UNAL,
     4498    13058    1         2 SEV UBIN(3) UNAL;
     4499    13059         /**/
     4500    13060        %PAGE (ARG=BASED DATA);

             13073    1   /*******************************************************************************
             13074    1   *                                                                              *
             13075    1   *        BASED DATA              BASED DATA                                       *
             13076    1   *                                                                              *
             13077    1   *******************************************************************************/

     4501    13081    1   DCL 1 OU_CLEAR BASED(BUF_TEMP$),
     4502    13082    1         2 * CHAR(BOUND_TEMP);
     4503    13083        %F$DCB;
     4504    13140        %B_MULTIBUF_VARS;
     4505    13167        %PAGE (ARG=MISC DATA);

             13180    1   /*******************************************************************************
             13181    1   *                                                                              *
             13182    1   *        MISC DATA              MISC DATA                                         *
             13183    1   *                                                                              *
             13184    1   *******************************************************************************/

     4506    13188    1   DCL XUO_OU_DCB_NUMBER SBIN SYMREF;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:562  
     4507    13189    1   DCL XUO_OU_UTS UBIN SYMREF;
     4508    13190    1   DCL XUO_OU_WRITE_REQUIRED BIT(1) SYMREF;
     4509    13191    1   DCL XUO_SCHEMA_REQUIRED BIT(1) ALIGNED SYMREF;
     4510    13192    1   DCL XUO_ERROR_ROUTINE EPTR SYMREF;
     4511    13193    1   DCL XUO_CLOSE_REQUIRED BIT(1) ALIGNED SYMREF;
     4512    13194        %PAGE (ARG=CODE);

             13207    1   /*******************************************************************************
             13208    1   *                                                                              *
             13209    1   *        CODE              CODE                                                  *
             13210    1   *                                                                              *
             13211    1   *******************************************************************************/

     4513    13215         /*
     4514    13216            Check to see if we need to do a write
     4515    13217            */
     4516    13218    1       IF XUO_OU_WRITE_REQUIRED='0'B THEN

  13218  2 000002   000000 234000 xsym               SZN     XUO_OU_WRITE_REQUIRED
         2 000003   000005 604000 2                  TMI     s:13221

     4517    13219    1           RETURN;

  13219  2 000004   000000 702200 xent               TSX2  ! X66_ARET

     4518    13220         /**/
     4519    13221    1       IF ADDR(P_SECTION_NUMBER)=ADDR(NIL) THEN

  13221  2 000005   200004 236100                    LDQ     @P_SECTION_NUMBER,,AUTO
         2 000006   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000007   000012 601000 2                  TNZ     s:13224

     4520    13222    1           SECTION_NUMBER=0;

  13222  2 000010   200100 450100                    STZ     SECTION_NUMBER,,AUTO
         2 000011   000015 710000 2                  TRA     s:13225

PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:563  
     4521    13223    1       ELSE
     4522    13224    1           SECTION_NUMBER=P_SECTION_NUMBER;

  13224  2 000012   200004 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         2 000013   000000 235100                    LDA     0,,PR0
         2 000014   200100 755100                    STA     SECTION_NUMBER,,AUTO

     4523    13225    2       DO CASE(P_RECORD_TYPE);

  13225  2 000015   200003 470500                    LDP0    @P_RECORD_TYPE,,AUTO
         2 000016   000000 235100                    LDA     0,,PR0
         2 000017   000021 115007                    CMPA    17,DL
         2 000020   000022 602005 2                  TNC     s:13225+5,AL
         2 000021   000562 710000 2                  TRA     s:13361
         2 000022   000043 710000 2                  TRA     s:13230
         2 000023   000203 710000 2                  TRA     s:13269
         2 000024   000217 710000 2                  TRA     s:13273
         2 000025   000233 710000 2                  TRA     s:13277
         2 000026   000246 710000 2                  TRA     s:13281
         2 000027   000262 710000 2                  TRA     s:13285
         2 000030   000276 710000 2                  TRA     s:13289
         2 000031   000312 710000 2                  TRA     s:13293
         2 000032   000326 710000 2                  TRA     s:13297
         2 000033   000342 710000 2                  TRA     s:13301
         2 000034   000356 710000 2                  TRA     s:13306
         2 000035   000422 710000 2                  TRA     s:13318
         2 000036   000436 710000 2                  TRA     s:13322
         2 000037   000452 710000 2                  TRA     s:13326
         2 000040   000466 710000 2                  TRA     s:13330
         2 000041   000502 710000 2                  TRA     s:13334
         2 000042   000516 710000 2                  TRA     s:13341

     4524    13226    2       CASE(0);

     4525    13227         /*
     4526    13228         The following handles the case of the head record
     4527    13229         */
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:564  
     4528    13230    2           XUO_HEAD_WRITE.V.NEWKEY# = '1'B;

  13230  2 000043   000000 471400 xsym               LDP1    XUO_HEAD_WRITE$
         2 000044   000200 236007                    LDQ     128,DL
         2 000045   100010 256100                    ORSQ    8,,PR1

     4529    13231    2           XUO_HEAD_WRITE.V.ONEWKEY# = '0'B;

  13231  2 000046   000000 236000 3                  LDQ     0
         2 000047   100010 356100                    ANSQ    8,,PR1

     4530    13232        %IF GCOS;
     4531    13233 C              CALL M$WRITE (XUO_HEAD_WRITE) ALTRET (WRITE_ERROR);
     4532    13234        %ELSE;
     4533    13235    2   WRITE_HEAD: CALL M$WRITE (XUO_HEAD_WRITE) ALTRET (HEAD_WRITE_ALTRET);

  13235  2 000050   000000 470400 xsym  WRITE_HEAD   LDP0    XUO_HEAD_WRITE$
         2 000051   440001 713400                    CLIMB   alt,write
         2 000052   401400 401760                    pmme    nvectors=4
         2 000053   000055 702000 2                  TSX2    HEAD_WRITE_ALTRET

     4534    13236    2           RETURN;

  13236  2 000054   000000 702200 xent               TSX2  ! X66_ARET

     4535    13237    2   HEAD_WRITE_ALTRET: IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE ~= %E$OLDREC

  13237  2 000055   000000 470400 xsym  HEAD_WRITE_* LDP0    B$TCB$
         2 000056   000000 471500                    LDP1    0,,PR0
         2 000057   100102 236100                    LDQ     66,,PR1
         2 000060   377770 376007                    ANQ     131064,DL
         2 000061   000750 116007                    CMPQ    488,DL
         2 000062   000617 601000 2                  TNZ     WRITE_ERROR

     4536    13238    2           THEN GOTO WRITE_ERROR;
     4537    13239    2           XUO_HEAD_WRITE.V.NEWKEY# = '0'B;

PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:565  
  13239  2 000063   000000 473400 xsym               LDP3    XUO_HEAD_WRITE$
         2 000064   000001 236000 3                  LDQ     1
         2 000065   300010 356100                    ANSQ    8,,PR3

     4538    13240    2           XUO_HEAD_WRITE.V.ONEWKEY# = '1'B;

  13240  2 000066   000400 236007                    LDQ     256,DL
         2 000067   300010 256100                    ORSQ    8,,PR3

     4539    13241    2           READ_OLD_HEAD = CLEAN_READ;

  13241  2 000070   000100 100400                    MLR     fill='000'O
         2 000071   000004 000070 1                  ADSC9   CLEAN_READ               cn=0,n=56
         2 000072   200050 000070                    ADSC9   READ_OLD_HEAD,,AUTO      cn=0,n=56

     4540    13242    2           READ_OLD_HEAD.V_ = VECTOR(READ_OLD_HEAD.V);

  13242  2 000073   000002 235000 3                  LDA     2
         2 000074   200106 452500                    STP2    ERROR+1,,AUTO
         2 000075   200106 236100                    LDQ     ERROR+1,,AUTO
         2 000076   000060 036003                    ADLQ    48,DU
         2 000077   200050 757100                    STAQ    READ_OLD_HEAD,,AUTO

     4541    13243    2           READ_OLD_HEAD.V.DCB# = XUO_OU_DCB_NUMBER;

  13243  2 000100   000000 720000 xsym               LXL0    XUO_OU_DCB_NUMBER
         2 000101   200060 740100                    STX0    READ_OLD_HEAD+8,,AUTO

     4542    13244    2           READ_OLD_HEAD.BUF_ = VECTOR (OLD_HEAD_RECORD);

  13244  2 000102   000003 235000 3                  LDA     3
         2 000103   200106 452500                    STP2    ERROR+1,,AUTO
         2 000104   200106 236100                    LDQ     ERROR+1,,AUTO
         2 000105   000006 036003                    ADLQ    6,DU
         2 000106   200054 757100                    STAQ    READ_OLD_HEAD+4,,AUTO

     4543    13245    2           READ_OLD_HEAD.KEY_ = XUO_HEAD_WRITE.KEY_;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:566  

  13245  2 000107   300002 237100                    LDAQ    2,,PR3
         2 000110   200052 757100                    STAQ    READ_OLD_HEAD+2,,AUTO

     4544    13246    2           OLD_HEAD_RECORD.UTS = B$OUHEAD.UTS /* just in case */;

  13246  2 000111   000000 471400 xsym               LDP1    B$OUHEAD$
         2 000112   100000 235100                    LDA     0,,PR1
         2 000113   200006 755100                    STA     OLD_HEAD_RECORD,,AUTO

     4545    13247    2           CALL M$READ (READ_OLD_HEAD) ALTRET (WRITE_HEAD);

  13247  2 000114   200050 630500                    EPPR0   READ_OLD_HEAD,,AUTO
         2 000115   440000 713400                    CLIMB   alt,read
         2 000116   401400 401760                    pmme    nvectors=4
         2 000117   000050 702000 2                  TSX2    WRITE_HEAD

     4546    13248    2           CALL M$WRITE (XUO_HEAD_WRITE) ALTRET (WRITE_ERROR);

  13248  2 000120   000000 470400 xsym               LDP0    XUO_HEAD_WRITE$
         2 000121   440001 713400                    CLIMB   alt,write
         2 000122   401400 401760                    pmme    nvectors=4
         2 000123   000617 702000 2                  TSX2    WRITE_ERROR

     4547    13249    2           IF B$OUHEAD.UTS ~= OLD_HEAD_RECORD.UTS

  13249  2 000124   000000 470400 xsym               LDP0    B$OUHEAD$
         2 000125   000000 236100                    LDQ     0,,PR0
         2 000126   200006 116100                    CMPQ    OLD_HEAD_RECORD,,AUTO
         2 000127   000202 600000 2                  TZE     IGNORE_DELREC_ALTRET

     4548    13250    3           THEN DO;

     4549    13251    3               FIRST_RECORD.KEYSIZ = 5;

  13251  2 000130   005000 236003                    LDQ     2560,DU
         2 000131   200043 552140                    STBQ    FIRST_RECORD,'40'O,AUTO
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:567  

     4550    13252    3               FIRST_RECORD.NOTHD = '777'O;

  13252  2 000132   000777 236003                    LDQ     511,DU
         2 000133   200043 552120                    STBQ    FIRST_RECORD,'20'O,AUTO

     4551    13253    3               FIRST_RECORD.UTS = OLD_HEAD_RECORD.UTS;

  13253  2 000134   000100 100500                    MLR     fill='000'O
         2 000135   200006 000004                    ADSC9   OLD_HEAD_RECORD,,AUTO    cn=0,n=4
         2 000136   200043 400004                    ADSC9   FIRST_RECORD,,AUTO       cn=2,n=4

     4552    13254    3               LAST_RECORD.KEYSIZ = 7;

  13254  2 000137   007000 236003                    LDQ     3584,DU
         2 000140   200045 552140                    STBQ    LAST_RECORD,'40'O,AUTO

     4553    13255    3               LAST_RECORD.NOTHD = '777'O;

  13255  2 000141   000777 236003                    LDQ     511,DU
         2 000142   200045 552120                    STBQ    LAST_RECORD,'20'O,AUTO

     4554    13256    3               LAST_RECORD.UTS = OLD_HEAD_RECORD.UTS;

  13256  2 000143   000100 100500                    MLR     fill='000'O
         2 000144   200006 000004                    ADSC9   OLD_HEAD_RECORD,,AUTO    cn=0,n=4
         2 000145   200045 400004                    ADSC9   LAST_RECORD,,AUTO        cn=2,n=4

     4555    13257    3               LAST_RECORD.TYPE = 255;

  13257  2 000146   377000 236007                    LDQ     130560,DL
         2 000147   200046 552110                    STBQ    LAST_RECORD+1,'10'O,AUTO

     4556    13258    3               LAST_RECORD.PAGE = 255;

  13258  2 000150   000377 236007                    LDQ     255,DL
         2 000151   200046 552104                    STBQ    LAST_RECORD+1,'04'O,AUTO
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:568  

     4557    13259    3               DELETE_OLD = CLEAN_DELETE;

  13259  2 000152   000100 100400                    MLR     fill='000'O
         2 000153   000022 000050 1                  ADSC9   CLEAN_DELETE             cn=0,n=40
         2 000154   200066 000050                    ADSC9   DELETE_OLD,,AUTO         cn=0,n=40

     4558    13260    3               DELETE_OLD.V_ = VECTOR(DELETE_OLD.V);

  13260  2 000155   000004 235000 3                  LDA     4
         2 000156   200106 452500                    STP2    ERROR+1,,AUTO
         2 000157   200106 236100                    LDQ     ERROR+1,,AUTO
         2 000160   000076 036003                    ADLQ    62,DU
         2 000161   200066 757100                    STAQ    DELETE_OLD,,AUTO

     4559    13261    3               DELETE_OLD.V.DCB# = XUO_OU_DCB_NUMBER;

  13261  2 000162   000000 720000 xsym               LXL0    XUO_OU_DCB_NUMBER
         2 000163   200076 740100                    STX0    DELETE_OLD+8,,AUTO

     4560    13262    3               DELETE_OLD.KEY_ = VECTOR(FIRST_RECORD);

  13262  2 000164   000004 235000 3                  LDA     4
         2 000165   200106 452500                    STP2    ERROR+1,,AUTO
         2 000166   200106 236100                    LDQ     ERROR+1,,AUTO
         2 000167   000043 036003                    ADLQ    35,DU
         2 000170   200070 757100                    STAQ    DELETE_OLD+2,,AUTO

     4561    13263    3               DELETE_OLD.LKEY_ = VECTOR(LAST_RECORD);

  13263  2 000171   000004 235000 3                  LDA     4
         2 000172   200106 452500                    STP2    ERROR+1,,AUTO
         2 000173   200106 236100                    LDQ     ERROR+1,,AUTO
         2 000174   000045 036003                    ADLQ    37,DU
         2 000175   200072 757100                    STAQ    DELETE_OLD+4,,AUTO

     4562    13264    3               CALL M$DELREC (DELETE_OLD) ALTRET (IGNORE_DELREC_ALTRET);
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:569  

  13264  2 000176   200066 630500                    EPPR0   DELETE_OLD,,AUTO
         2 000177   440002 713400                    CLIMB   alt,+16386
         2 000200   401400 401760                    pmme    nvectors=4
         2 000201   000202 702000 2                  TSX2    IGNORE_DELREC_ALTRET

     4563    13265    3   IGNORE_DELREC_ALTRET: END;

  13265  2 000202                       IGNORE_DELR* null
     4564    13266        %ENDIF;
     4565    13267    2           RETURN;

  13267  2 000202   000000 702200 xent               TSX2  ! X66_ARET

     4566    13268    2       CASE(%TYPDNAM);

     4567    13269    2           BOUND_TEMP=POFFC(B_DNAME_CUR$,B_DNAME_BASE$);

  13269  2 000203   000000 236000 xsym               LDQ     B_DNAME_BASE$
         2 000204   000020 772000                    QRL     16
         2 000205   200106 756100                    STQ     ERROR+1,,AUTO
         2 000206   000000 236000 xsym               LDQ     B_DNAME_CUR$
         2 000207   000020 772000                    QRL     16
         2 000210   200106 136100                    SBLQ    ERROR+1,,AUTO
         2 000211   200101 756100                    STQ     BOUND_TEMP,,AUTO

     4568    13270    2           BUF_TEMP$=B_DNAME_BASE$;

  13270  2 000212   000000 236000 xsym               LDQ     B_DNAME_BASE$
         2 000213   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4569    13271    2           PAGE_TEMP=B_DNAME_PAGE;

  13271  2 000214   000000 235000 xsym               LDA     B_DNAME_PAGE
         2 000215   200103 755100                    STA     PAGE_TEMP,,AUTO
         2 000216   000562 710000 2                  TRA     s:13361

PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:570  
     4570    13272    2       CASE(%TYPRNAM);

     4571    13273    2           BOUND_TEMP=POFFC(B_RNAME_CUR$,B_RNAME_BASE$);

  13273  2 000217   000000 236000 xsym               LDQ     B_RNAME_BASE$
         2 000220   000020 772000                    QRL     16
         2 000221   200106 756100                    STQ     ERROR+1,,AUTO
         2 000222   000000 236000 xsym               LDQ     B_RNAME_CUR$
         2 000223   000020 772000                    QRL     16
         2 000224   200106 136100                    SBLQ    ERROR+1,,AUTO
         2 000225   200101 756100                    STQ     BOUND_TEMP,,AUTO

     4572    13274    2           BUF_TEMP$=B_RNAME_BASE$;

  13274  2 000226   000000 236000 xsym               LDQ     B_RNAME_BASE$
         2 000227   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4573    13275    2           PAGE_TEMP=B_RNAME_PAGE;

  13275  2 000230   000000 235000 xsym               LDA     B_RNAME_PAGE
         2 000231   200103 755100                    STA     PAGE_TEMP,,AUTO
         2 000232   000562 710000 2                  TRA     s:13361

     4574    13276    2       CASE(%TYPSECT);

     4575    13277    2           BOUND_TEMP=POFFC(B_SECTION_CUR$,B_SECTION_BASE$);

  13277  2 000233   000000 236000 xsym               LDQ     B_SECTION_BASE$
         2 000234   000020 772000                    QRL     16
         2 000235   200106 756100                    STQ     ERROR+1,,AUTO
         2 000236   000000 236000 xsym               LDQ     B_SECTION_CUR$
         2 000237   000020 772000                    QRL     16
         2 000240   200106 136100                    SBLQ    ERROR+1,,AUTO
         2 000241   200101 756100                    STQ     BOUND_TEMP,,AUTO

     4576    13278    2           BUF_TEMP$=B_SECTION_BASE$;

PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:571  
  13278  2 000242   000000 236000 xsym               LDQ     B_SECTION_BASE$
         2 000243   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4577    13279    2           PAGE_TEMP=0;

  13279  2 000244   200103 450100                    STZ     PAGE_TEMP,,AUTO
         2 000245   000562 710000 2                  TRA     s:13361

     4578    13280    2       CASE(%TYPEDEF);

     4579    13281    2           BOUND_TEMP=POFFC(B_EDEF_CUR$,B_EDEF_BASE$);

  13281  2 000246   000000 236000 xsym               LDQ     B_EDEF_BASE$
         2 000247   000020 772000                    QRL     16
         2 000250   200106 756100                    STQ     ERROR+1,,AUTO
         2 000251   000000 236000 xsym               LDQ     B_EDEF_CUR$
         2 000252   000020 772000                    QRL     16
         2 000253   200106 136100                    SBLQ    ERROR+1,,AUTO
         2 000254   200101 756100                    STQ     BOUND_TEMP,,AUTO

     4580    13282    2           BUF_TEMP$=B_EDEF_BASE$;

  13282  2 000255   000000 236000 xsym               LDQ     B_EDEF_BASE$
         2 000256   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4581    13283    2           PAGE_TEMP=B_EDEF_PAGE;

  13283  2 000257   000000 235000 xsym               LDA     B_EDEF_PAGE
         2 000260   200103 755100                    STA     PAGE_TEMP,,AUTO
         2 000261   000562 710000 2                  TRA     s:13361

     4582    13284    2       CASE(%TYPEREF);

     4583    13285    2           BOUND_TEMP=POFFC(B_EREF_CUR$,B_EREF_BASE$);

  13285  2 000262   000000 236000 xsym               LDQ     B_EREF_BASE$
         2 000263   000020 772000                    QRL     16
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:572  
         2 000264   200106 756100                    STQ     ERROR+1,,AUTO
         2 000265   000000 236000 xsym               LDQ     B_EREF_CUR$
         2 000266   000020 772000                    QRL     16
         2 000267   200106 136100                    SBLQ    ERROR+1,,AUTO
         2 000270   200101 756100                    STQ     BOUND_TEMP,,AUTO

     4584    13286    2           BUF_TEMP$=B_EREF_BASE$;

  13286  2 000271   000000 236000 xsym               LDQ     B_EREF_BASE$
         2 000272   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4585    13287    2           PAGE_TEMP=B_EREF_PAGE;

  13287  2 000273   000000 235000 xsym               LDA     B_EREF_PAGE
         2 000274   200103 755100                    STA     PAGE_TEMP,,AUTO
         2 000275   000562 710000 2                  TRA     s:13361

     4586    13288    2       CASE(%TYPSDEF);

     4587    13289    2           BOUND_TEMP=POFFC(B_SDEF_CUR$,B_SDEF_BASE$);

  13289  2 000276   000000 236000 xsym               LDQ     B_SDEF_BASE$
         2 000277   000020 772000                    QRL     16
         2 000300   200106 756100                    STQ     ERROR+1,,AUTO
         2 000301   000000 236000 xsym               LDQ     B_SDEF_CUR$
         2 000302   000020 772000                    QRL     16
         2 000303   200106 136100                    SBLQ    ERROR+1,,AUTO
         2 000304   200101 756100                    STQ     BOUND_TEMP,,AUTO

     4588    13290    2           BUF_TEMP$=B_SDEF_BASE$;

  13290  2 000305   000000 236000 xsym               LDQ     B_SDEF_BASE$
         2 000306   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4589    13291    2           PAGE_TEMP=B_SDEF_PAGE;

  13291  2 000307   000000 235000 xsym               LDA     B_SDEF_PAGE
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:573  
         2 000310   200103 755100                    STA     PAGE_TEMP,,AUTO
         2 000311   000562 710000 2                  TRA     s:13361

     4590    13292    2       CASE(%TYPSREF);

     4591    13293    2           BOUND_TEMP=POFFC(B_SREF_CUR$,B_SREF_BASE$);

  13293  2 000312   000000 236000 xsym               LDQ     B_SREF_BASE$
         2 000313   000020 772000                    QRL     16
         2 000314   200106 756100                    STQ     ERROR+1,,AUTO
         2 000315   000000 236000 xsym               LDQ     B_SREF_CUR$
         2 000316   000020 772000                    QRL     16
         2 000317   200106 136100                    SBLQ    ERROR+1,,AUTO
         2 000320   200101 756100                    STQ     BOUND_TEMP,,AUTO

     4592    13294    2           BUF_TEMP$=B_SREF_BASE$;

  13294  2 000321   000000 236000 xsym               LDQ     B_SREF_BASE$
         2 000322   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4593    13295    2           PAGE_TEMP=B_SREF_PAGE;

  13295  2 000323   000000 235000 xsym               LDA     B_SREF_PAGE
         2 000324   200103 755100                    STA     PAGE_TEMP,,AUTO
         2 000325   000562 710000 2                  TRA     s:13361

     4594    13296    2       CASE(%TYPSEGDEF);

     4595    13297    2           BOUND_TEMP=POFFC(B_SEGDEF_CUR$,B_SEGDEF_BASE$);

  13297  2 000326   000000 236000 xsym               LDQ     B_SEGDEF_BASE$
         2 000327   000020 772000                    QRL     16
         2 000330   200106 756100                    STQ     ERROR+1,,AUTO
         2 000331   000000 236000 xsym               LDQ     B_SEGDEF_CUR$
         2 000332   000020 772000                    QRL     16
         2 000333   200106 136100                    SBLQ    ERROR+1,,AUTO
         2 000334   200101 756100                    STQ     BOUND_TEMP,,AUTO
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:574  

     4596    13298    2           BUF_TEMP$=B_SEGDEF_BASE$;

  13298  2 000335   000000 236000 xsym               LDQ     B_SEGDEF_BASE$
         2 000336   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4597    13299    2           PAGE_TEMP=B_SEGDEF_PAGE;

  13299  2 000337   000000 235000 xsym               LDA     B_SEGDEF_PAGE
         2 000340   200103 755100                    STA     PAGE_TEMP,,AUTO
         2 000341   000562 710000 2                  TRA     s:13361

     4598    13300    2       CASE(%TYPSEGREF);

     4599    13301    2           BOUND_TEMP=POFFC(B_SEGREF_CUR$,B_SEGREF_BASE$);

  13301  2 000342   000000 236000 xsym               LDQ     B_SEGREF_BASE$
         2 000343   000020 772000                    QRL     16
         2 000344   200106 756100                    STQ     ERROR+1,,AUTO
         2 000345   000000 236000 xsym               LDQ     B_SEGREF_CUR$
         2 000346   000020 772000                    QRL     16
         2 000347   200106 136100                    SBLQ    ERROR+1,,AUTO
         2 000350   200101 756100                    STQ     BOUND_TEMP,,AUTO

     4600    13302    2           BUF_TEMP$=B_SEGREF_BASE$;

  13302  2 000351   000000 236000 xsym               LDQ     B_SEGREF_BASE$
         2 000352   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4601    13303    2           PAGE_TEMP=B_SEGREF_PAGE;

  13303  2 000353   000000 235000 xsym               LDA     B_SEGREF_PAGE
         2 000354   200103 755100                    STA     PAGE_TEMP,,AUTO
         2 000355   000562 710000 2                  TRA     s:13361

     4602    13304    2       CASE(%TYPPROG);

PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:575  
     4603    13305
     4604    13306    2           B$PRGKEY.OFFSET = SECTION_ARRAY.BUF_OFFSET (SECTION_NUMBER);

  13306  2 000356   200100 235100                    LDA     SECTION_NUMBER,,AUTO
         2 000357   000003 735000                    ALS     3
         2 000360   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         2 000361   000000 473400 xsym               LDP3    B$PRGKEY$
         2 000362   100006 236105                    LDQ     6,AL,PR1
         2 000363   000011 736000                    QLS     9
         2 000364   300002 552130                    STBQ    2,'30'O,PR3

     4605    13307    2           B$PRGKEY.SECTNUM = SECTION_NUMBER;

  13307  2 000365   000100 101500                    MRL     fill='000'O
         2 000366   200100 000004                    ADSC9   SECTION_NUMBER,,AUTO     cn=0,n=4
         2 000367   300001 600002                    ADSC9   1,,PR3                   cn=3,n=2

     4606    13308
     4607    13309    2           BOUND_TEMP = SECTION_ARRAY.PROGRAM_CURS(SECTION_NUMBER) *4;

  13309  2 000370   100000 235105                    LDA     0,AL,PR1
         2 000371   000002 735000                    ALS     2
         2 000372   200101 755100                    STA     BOUND_TEMP,,AUTO

     4608    13310    2           BUF_TEMP$ =SECTION_ARRAY.PTR2_PROGRAM_BUF$(SECTION_NUMBER);

  13310  2 000373   200100 236100                    LDQ     SECTION_NUMBER,,AUTO
         2 000374   000003 736000                    QLS     3
         2 000375   100004 236106                    LDQ     4,QL,PR1
         2 000376   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4609    13311    2           XUO_PROGRAM_WRITE.BUF_.BOUND = BOUND_TEMP - 1;

  13311  2 000377   000000 474400 xsym               LDP4    XUO_PROGRAM_WRITE$
         2 000400   200101 236100                    LDQ     BOUND_TEMP,,AUTO
         2 000401   000001 136007                    SBLQ    1,DL
         2 000402   000020 736000                    QLS     16
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:576  
         2 000403   400004 676100                    ERQ     4,,PR4
         2 000404   000034 376000 xsym               ANQ     B_VECTNIL+28
         2 000405   400004 656100                    ERSQ    4,,PR4

     4610    13312    2           XUO_PROGRAM_WRITE.BUF_.BUF$ = BUF_TEMP$;

  13312  2 000406   200102 236100                    LDQ     BUF_TEMP$,,AUTO
         2 000407   400005 756100                    STQ     5,,PR4

     4611    13313    2           CALL M$WRITE (XUO_PROGRAM_WRITE) ALTRET(WRITE_ERROR);

  13313  2 000410   400000 630500                    EPPR0   0,,PR4
         2 000411   440001 713400                    CLIMB   alt,write
         2 000412   401400 401760                    pmme    nvectors=4
         2 000413   000617 702000 2                  TSX2    WRITE_ERROR

     4612    13314    2           OU_CLEAR='0'B;

  13314  2 000414   200102 470500                    LDP0    BUF_TEMP$,,AUTO
         2 000415   200101 720100                    LXL0    BOUND_TEMP,,AUTO
         2 000416   000140 100400                    MLR     fill='000'O
         2 000417   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 000420   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

     4613    13315
     4614    13316    2           RETURN;

  13316  2 000421   000000 702200 xent               TSX2  ! X66_ARET

     4615    13317    2       CASE(%TYPLOGBLK);

     4616    13318    2           BOUND_TEMP=POFFC(B_LOGBLK_CUR$,B_LOGBLK_ENTRY0$);

  13318  2 000422   000000 236000 xsym               LDQ     B_LOGBLK_ENTRY0$
         2 000423   000020 772000                    QRL     16
         2 000424   200106 756100                    STQ     ERROR+1,,AUTO
         2 000425   000000 236000 xsym               LDQ     B_LOGBLK_CUR$
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:577  
         2 000426   000020 772000                    QRL     16
         2 000427   200106 136100                    SBLQ    ERROR+1,,AUTO
         2 000430   200101 756100                    STQ     BOUND_TEMP,,AUTO

     4617    13319    2           BUF_TEMP$=B_LOGBLK_ENTRY0$;

  13319  2 000431   000000 236000 xsym               LDQ     B_LOGBLK_ENTRY0$
         2 000432   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4618    13320    2           PAGE_TEMP=B_LOGBLK_PAGE;

  13320  2 000433   000000 235000 xsym               LDA     B_LOGBLK_PAGE
         2 000434   200103 755100                    STA     PAGE_TEMP,,AUTO
         2 000435   000562 710000 2                  TRA     s:13361

     4619    13321    2       CASE(%TYPINTNTRY);

     4620    13322    2           BOUND_TEMP=POFFC(B_INTNTRY_CUR$,B_INTNTRY_BASE$);

  13322  2 000436   000000 236000 xsym               LDQ     B_INTNTRY_BASE$
         2 000437   000020 772000                    QRL     16
         2 000440   200106 756100                    STQ     ERROR+1,,AUTO
         2 000441   000000 236000 xsym               LDQ     B_INTNTRY_CUR$
         2 000442   000020 772000                    QRL     16
         2 000443   200106 136100                    SBLQ    ERROR+1,,AUTO
         2 000444   200101 756100                    STQ     BOUND_TEMP,,AUTO

     4621    13323    2           BUF_TEMP$=B_INTNTRY_BASE$;

  13323  2 000445   000000 236000 xsym               LDQ     B_INTNTRY_BASE$
         2 000446   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4622    13324    2           PAGE_TEMP=B_INTNTRY_PAGE;

  13324  2 000447   000000 235000 xsym               LDA     B_INTNTRY_PAGE
         2 000450   200103 755100                    STA     PAGE_TEMP,,AUTO
         2 000451   000562 710000 2                  TRA     s:13361
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:578  

     4623    13325    2       CASE(%TYPEXST);

     4624    13326    2           BOUND_TEMP=POFFC(B_EXST_CUR$,B_EXST_BASE$);

  13326  2 000452   000000 236000 xsym               LDQ     B_EXST_BASE$
         2 000453   000020 772000                    QRL     16
         2 000454   200106 756100                    STQ     ERROR+1,,AUTO
         2 000455   000000 236000 xsym               LDQ     B_EXST_CUR$
         2 000456   000020 772000                    QRL     16
         2 000457   200106 136100                    SBLQ    ERROR+1,,AUTO
         2 000460   200101 756100                    STQ     BOUND_TEMP,,AUTO

     4625    13327    2           BUF_TEMP$=B_EXST_BASE$;

  13327  2 000461   000000 236000 xsym               LDQ     B_EXST_BASE$
         2 000462   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4626    13328    2           PAGE_TEMP=B_EXST_PAGE;

  13328  2 000463   000000 235000 xsym               LDA     B_EXST_PAGE
         2 000464   200103 755100                    STA     PAGE_TEMP,,AUTO
         2 000465   000562 710000 2                  TRA     s:13361

     4627    13329    2       CASE(%TYPVREBL);

     4628    13330    2           BOUND_TEMP=POFFC(B_VREBL_CUR$,B_VREBL_BASE$);

  13330  2 000466   000000 236000 xsym               LDQ     B_VREBL_BASE$
         2 000467   000020 772000                    QRL     16
         2 000470   200106 756100                    STQ     ERROR+1,,AUTO
         2 000471   000000 236000 xsym               LDQ     B_VREBL_CUR$
         2 000472   000020 772000                    QRL     16
         2 000473   200106 136100                    SBLQ    ERROR+1,,AUTO
         2 000474   200101 756100                    STQ     BOUND_TEMP,,AUTO

     4629    13331    2           BUF_TEMP$=B_VREBL_BASE$;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:579  

  13331  2 000475   000000 236000 xsym               LDQ     B_VREBL_BASE$
         2 000476   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4630    13332    2           PAGE_TEMP=B_VREBL_PAGE;

  13332  2 000477   000000 235000 xsym               LDA     B_VREBL_PAGE
         2 000500   200103 755100                    STA     PAGE_TEMP,,AUTO
         2 000501   000562 710000 2                  TRA     s:13361

     4631    13333    2       CASE(%TYPDBGNAM);

     4632    13334    2           BOUND_TEMP=POFFC(B_DBGNAME_CUR$,B_DBGNAME_BASE$);

  13334  2 000502   000000 236000 xsym               LDQ     B_DBGNAME_BASE$
         2 000503   000020 772000                    QRL     16
         2 000504   200106 756100                    STQ     ERROR+1,,AUTO
         2 000505   000000 236000 xsym               LDQ     B_DBGNAME_CUR$
         2 000506   000020 772000                    QRL     16
         2 000507   200106 136100                    SBLQ    ERROR+1,,AUTO
         2 000510   200101 756100                    STQ     BOUND_TEMP,,AUTO

     4633    13335    2           BUF_TEMP$=B_DBGNAME_BASE$;

  13335  2 000511   000000 236000 xsym               LDQ     B_DBGNAME_BASE$
         2 000512   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4634    13336    2           PAGE_TEMP=B_DBGNAME_PAGE;

  13336  2 000513   000000 235000 xsym               LDA     B_DBGNAME_PAGE
         2 000514   200103 755100                    STA     PAGE_TEMP,,AUTO
         2 000515   000562 710000 2                  TRA     s:13361

     4635    13337    2       CASE(16);

     4636    13338         /*
     4637    13339            Handles relocation records
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:580  
     4638    13340            */
     4639    13341    2           B$RELKEY.OFFSET = SECTION_ARRAY.BUF_OFFSET (SECTION_NUMBER);

  13341  2 000516   200100 235100                    LDA     SECTION_NUMBER,,AUTO
         2 000517   000003 735000                    ALS     3
         2 000520   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         2 000521   000000 473400 xsym               LDP3    B$RELKEY$
         2 000522   100006 236105                    LDQ     6,AL,PR1
         2 000523   000011 736000                    QLS     9
         2 000524   300002 552130                    STBQ    2,'30'O,PR3

     4640    13342    2           B$RELKEY.SECTNUM = SECTION_NUMBER;

  13342  2 000525   000100 101500                    MRL     fill='000'O
         2 000526   200100 000004                    ADSC9   SECTION_NUMBER,,AUTO     cn=0,n=4
         2 000527   300001 600002                    ADSC9   1,,PR3                   cn=3,n=2

     4641    13343
     4642    13344    2           BOUND_TEMP = SECTION_ARRAY.RELOCATION_CURS(SECTION_NUMBER)

  13344  2 000530   100001 235105                    LDA     1,AL,PR1
         2 000531   000002 735000                    ALS     2
         2 000532   200101 755100                    STA     BOUND_TEMP,,AUTO

     4643    13345    2              * 4;
     4644    13346    2           BUF_TEMP$ = SECTION_ARRAY.PTR2_RELOCATION_BUF$(SECTION_NUMBER);

  13346  2 000533   200100 236100                    LDQ     SECTION_NUMBER,,AUTO
         2 000534   000003 736000                    QLS     3
         2 000535   100005 236106                    LDQ     5,QL,PR1
         2 000536   200102 756100                    STQ     BUF_TEMP$,,AUTO

     4645    13347    2           XUO_RELOCATION_WRITE.BUF_.BOUND = BOUND_TEMP - 1;

  13347  2 000537   000000 474400 xsym               LDP4    XUO_RELOCATION_WRITE$
         2 000540   200101 236100                    LDQ     BOUND_TEMP,,AUTO
         2 000541   000001 136007                    SBLQ    1,DL
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:581  
         2 000542   000020 736000                    QLS     16
         2 000543   400004 676100                    ERQ     4,,PR4
         2 000544   000034 376000 xsym               ANQ     B_VECTNIL+28
         2 000545   400004 656100                    ERSQ    4,,PR4

     4646    13348    2           XUO_RELOCATION_WRITE.BUF_.BUF$ = BUF_TEMP$;

  13348  2 000546   200102 236100                    LDQ     BUF_TEMP$,,AUTO
         2 000547   400005 756100                    STQ     5,,PR4

     4647    13349         /*
     4648    13350         May get altret which is valid due to two keys the same.  If that
     4649    13351         happens  must use sequence field and bump key size.
     4650    13352         */
     4651    13353    2           CALL M$WRITE (XUO_RELOCATION_WRITE) ALTRET(XUO_RELOCATION_WRITE_ERROR);

  13353  2 000550   400000 630500                    EPPR0   0,,PR4
         2 000551   440001 713400                    CLIMB   alt,write
         2 000552   401400 401760                    pmme    nvectors=4
         2 000553   000664 702000 2                  TSX2    XUO_RELOCATION_WRITE_ERROR

     4652    13354    2           OU_CLEAR='0'B;

  13354  2 000554   200102 470500                    LDP0    BUF_TEMP$,,AUTO
         2 000555   200101 720100                    LXL0    BOUND_TEMP,,AUTO
         2 000556   000140 100400                    MLR     fill='000'O
         2 000557   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 000560   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

     4653    13355    2           RETURN;

  13355  2 000561   000000 702200 xent               TSX2  ! X66_ARET

     4654    13356    2           END;

     4655    13357         /*
     4656    13358         The following handles all records except head,program and relocation records.
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:582  
     4657    13359         NOTE: The record area is zeroed after the write.
     4658    13360         */
     4659    13361    1       XUO_OU_WRITE.BUF_.BOUND=BOUND_TEMP-1;

  13361  2 000562   000000 471400 xsym               LDP1    XUO_OU_WRITE$
         2 000563   200101 236100                    LDQ     BOUND_TEMP,,AUTO
         2 000564   000001 136007                    SBLQ    1,DL
         2 000565   000020 736000                    QLS     16
         2 000566   100004 676100                    ERQ     4,,PR1
         2 000567   000034 376000 xsym               ANQ     B_VECTNIL+28
         2 000570   100004 656100                    ERSQ    4,,PR1

     4660    13362    1       XUO_OU_WRITE.BUF_.BUF$=BUF_TEMP$;

  13362  2 000571   200102 236100                    LDQ     BUF_TEMP$,,AUTO
         2 000572   100005 756100                    STQ     5,,PR1

     4661    13363    1       B$OUKEY.TYPE=P_RECORD_TYPE;

  13363  2 000573   000000 236100                    LDQ     0,,PR0
         2 000574   000011 736000                    QLS     9
         2 000575   000001 552010 xsym               STBQ    B$OUKEY+1,'10'O

     4662    13364    1       B$OUKEY.PAGE=PAGE_TEMP;

  13364  2 000576   200103 236100                    LDQ     PAGE_TEMP,,AUTO
         2 000577   000001 552004 xsym               STBQ    B$OUKEY+1,'04'O

     4663    13365         /*
     4664    13366            If no debug was specified dont
     4665    13367            output any debug records.
     4666    13368            NOTE:  It is not the most
     4667    13369            efficient place to check but is
     4668    13370            is the most reliable.  The overhead
     4669    13371            to build the debug records should
     4670    13372            be minimal.  If not, the person
     4671    13373            calling the routines that build them
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:583  
     4672    13374            need not call them.
     4673    13375            */
     4674    13376    1       IF NOT (XUO_SCHEMA_REQUIRED='0'B AND P_RECORD_TYPE>10) THEN

  13376  2 000600   000000 234000 xsym               SZN     XUO_SCHEMA_REQUIRED
         2 000601   000605 604000 2                  TMI     s:13377
         2 000602   000000 235100                    LDA     0,,PR0
         2 000603   000013 115007                    CMPA    11,DL
         2 000604   000611 603000 2                  TRC     s:13378

     4675    13377    1           CALL M$WRITE (XUO_OU_WRITE) ALTRET(WRITE_ERROR);

  13377  2 000605   100000 630500                    EPPR0   0,,PR1
         2 000606   440001 713400                    CLIMB   alt,write
         2 000607   401400 401760                    pmme    nvectors=4
         2 000610   000617 702000 2                  TSX2    WRITE_ERROR

     4676    13378    1       OU_CLEAR='0'B;

  13378  2 000611   200102 470500                    LDP0    BUF_TEMP$,,AUTO
         2 000612   200101 720100                    LXL0    BOUND_TEMP,,AUTO
         2 000613   000140 100400                    MLR     fill='000'O
         2 000614   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 000615   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

     4677    13379    1       RETURN;

  13379  2 000616   000000 702200 xent               TSX2  ! X66_ARET

  13378  2 000617                       WRITE_ERROR  null
     4678    13380            %PAGE (ARG=ERRORS);

             13393    1   /*******************************************************************************
             13394    1   *                                                                              *
             13395    1   *        ERRORS              ERRORS                                               *
             13396    1   *                                                                              *
             13397    1   *******************************************************************************/
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:584  

     4679    13401         /*
     4680    13402         The following handles the case of an error on writeing ou
     4681    13403         */
     4682    13404    1   WRITE_ERROR: ;
     4683    13405         /*
     4684    13406         The following will return the error code
     4685    13407         to the appropriate routine.
     4686    13408         Further i/o will be inhibited;  if
     4687    13409         the "close DCB" flag is set, a default
     4688    13410         close will be performed.
     4689    13411            */
     4690    13412    1       XUO_OU_WRITE_REQUIRED='0'B;

  13412  2 000617   000000 450000 xsym               STZ     XUO_OU_WRITE_REQUIRED

     4691    13413    1       IF XUO_ERROR_ROUTINE~=ENTADDR(NIL) THEN

  13413  2 000620   000000 236000 xsym               LDQ     XUO_ERROR_ROUTINE
         2 000621   000002 116000 xsym               CMPQ    B_VECTNIL+2
         2 000622   000655 600000 2                  TZE     s:13436

     4692    13414    2       DO;

     4693    13415    2           ERROR=B$TCB$->B$TCB.ALT$->B$ALT.ERR;

  13415  2 000623   000000 470400 xsym               LDP0    B$TCB$
         2 000624   000000 471500                    LDP1    0,,PR0
         2 000625   100102 236100                    LDQ     66,,PR1
         2 000626   200105 756100                    STQ     ERROR,,AUTO

     4694    13416        %IF CP6;
     4695    13417    2           IF P_RECORD_TYPE = %TYPPROG

  13417  2 000627   200003 471500                    LDP1    @P_RECORD_TYPE,,AUTO
         2 000630   100000 235100                    LDA     0,,PR1
         2 000631   000012 115007                    CMPA    10,DL
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:585  
         2 000632   000646 601000 2                  TNZ     s:13423
         2 000633   000000 473500                    LDP3    0,,PR0
         2 000634   300102 236100                    LDQ     66,,PR3
         2 000635   377770 376007                    ANQ     131064,DL
         2 000636   000750 116007                    CMPQ    488,DL
         2 000637   000646 601000 2                  TNZ     s:13423

     4696    13418    2              AND B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$OLDREC
     4697    13419    2           THEN
     4698    13420    2               CALL XUO_ERROR_ROUTINE (PRGM_RECORD_CONFLICT);

  13420  2 000640   000005 630400 3                  EPPR0   5
         2 000641   000000 220000 xsym               LDX0    XUO_ERROR_ROUTINE
         2 000642   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000643   000000 701010                    TSX1    0,X0
         2 000644   000000 011000                    NOP     0
         2 000645   000655 710000 2                  TRA     s:13436

     4699    13421    2           ELSE
     4700    13422         %ENDIF;
     4701    13423    2               CALL XUO_ERROR_ROUTINE (ERROR);

  13423  2 000646   200105 633500                    EPPR3   ERROR,,AUTO
         2 000647   200106 453500                    STP3    ERROR+1,,AUTO
         2 000650   200106 630500                    EPPR0   ERROR+1,,AUTO
         2 000651   000000 220000 xsym               LDX0    XUO_ERROR_ROUTINE
         2 000652   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000653   000000 701010                    TSX1    0,X0
         2 000654   000000 011000                    NOP     0

     4702    13424        /*E*  ERROR:   XUO-E$XUO#PRGM_RECORD_CONFLICT
     4703    13425              MESSAGE:A fatal error has occurred while building an object unit.  An attempt
     4704    13426                      has been made to output two "program record" values for the
     4705    13427                      same location in some control section.  This is not permitted,
     4706    13428                      and has resulted in a file-management error.
     4707    13429
     4708    13430                      Note that this error can occur only if the "trust me!" flag was
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:586  
     4709    13431                      set on the call to XUO$INIT;  otherwise, a "locations are being
     4710    13432                      written in nonascending order" error would have been reported
     4711    13433                      at some earlier time.  Trust is such a fragile thing...
     4712    13434        */
     4713    13435    2           END;

     4714    13436    1       IF XUO_CLOSE_REQUIRED THEN

  13436  2 000655   000000 234000 xsym               SZN     XUO_CLOSE_REQUIRED
         2 000656   000663 605000 2                  TPL     IGNORE_CLOSE_ERROR

     4715    13437    1           CALL M$CLOSE (XUO_OU_CLOSE) ALTRET(IGNORE_CLOSE_ERROR);

  13437  2 000657   000000 470400 xsym               LDP0    XUO_OU_CLOSE$
         2 000660   450001 713400                    CLIMB   alt,close
         2 000661   406000 401760                    pmme    nvectors=13
         2 000662   000663 702000 2                  TSX2    IGNORE_CLOSE_ERROR

  13436  2 000663                       IGNORE_CLOS* null
     4716    13438    1   IGNORE_CLOSE_ERROR: ;
     4717    13439    1       RETURN;

  13439  2 000663   000000 702200 xent               TSX2  ! X66_ARET

  13436  2 000664                       XUO_RELOCAT* null
     4718    13440         /*
     4719    13441            */
     4720    13442    1   XUO_RELOCATION_WRITE_ERROR: ;
     4721    13443         /*
     4722    13444         Check to see if relocation record with the same key exists. If so,
     4723    13445         it is not an error.
     4724    13446         NOTE: Flag is zero on entry.
     4725    13447         */
     4726    13448    1       IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$OLDREC THEN

  13448  2 000664   000000 470400 xsym               LDP0    B$TCB$
         2 000665   000000 471500                    LDP1    0,,PR0
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:587  
         2 000666   100102 236100                    LDQ     66,,PR1
         2 000667   377770 376007                    ANQ     131064,DL
         2 000670   000750 116007                    CMPQ    488,DL
         2 000671   000617 601000 2                  TNZ     WRITE_ERROR

     4727    13449         /*
     4728    13450         Handle the case of the error being a record exists
     4729    13451         */
     4730    13452    2       DO;

     4731    13453    2           IF B$RELKEY.KEYSIZ=11 THEN

  13453  2 000672   000000 473400 xsym               LDP3    B$RELKEY$
         2 000673   300000 236100                    LDQ     0,,PR3
         2 000674   777000 376003                    ANQ     -512,DU
         2 000675   013000 116003                    CMPQ    5632,DU
         2 000676   000701 601000 2                  TNZ     s:13456

     4732    13454    2               B$RELKEY.KEYSIZ=12;

  13454  2 000677   014000 236003                    LDQ     6144,DU
         2 000700   300000 552140                    STBQ    0,'40'O,PR3

     4733    13455        %IF CP6;
     4734    13456    2           IF B$RELKEY.SEQUENCE = 511

  13456  2 000701   000000 470400 xsym               LDP0    B$RELKEY$
         2 000702   000003 236100                    LDQ     3,,PR0
         2 000703   777000 376003                    ANQ     -512,DU
         2 000704   777000 116003                    CMPQ    -512,DU
         2 000705   000726 601000 2                  TNZ     s:13474

     4735    13457    3           THEN DO;

     4736    13458    3               IF XUO_ERROR_ROUTINE ~= ENTADDR(NIL)

  13458  2 000706   000000 236000 xsym               LDQ     XUO_ERROR_ROUTINE
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:588  
         2 000707   000002 116000 xsym               CMPQ    B_VECTNIL+2
         2 000710   000716 600000 2                  TZE     s:13467

     4737    13459    3               THEN
     4738    13460    3                   CALL XUO_ERROR_ROUTINE (RELOC_RECORD_CONFLICT);

  13460  2 000711   000006 630400 3                  EPPR0   6
         2 000712   000000 220000 xsym               LDX0    XUO_ERROR_ROUTINE
         2 000713   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000714   000000 701010                    TSX1    0,X0
         2 000715   000000 011000                    NOP     0

     4739    13461        /*E*  ERROR:   XUO-E$XUO#RELOC_RECORD_CONFLICT
     4740    13462              MESSAGE:A fatal error has occurred while building an object unit.  An
     4741    13463                      attempt has been made to write more than 512 relocation records at
     4742    13464                      one location within a control section.  This error suggests that
     4743    13465                      an error may exist in the compiler/translator being used.
     4744    13466        */
     4745    13467    3               XUO_OU_WRITE_REQUIRED = '0'B;

  13467  2 000716   000000 450000 xsym               STZ     XUO_OU_WRITE_REQUIRED

     4746    13468    3               IF XUO_CLOSE_REQUIRED

  13468  2 000717   000000 234000 xsym               SZN     XUO_CLOSE_REQUIRED
         2 000720   000725 605000 2                  TPL     s:13471

     4747    13469    3               THEN
     4748    13470    3                   CALL M$CLOSE (XUO_OU_CLOSE) ALTRET (IGNORE_CLOSE_ERROR);

  13470  2 000721   000000 470400 xsym               LDP0    XUO_OU_CLOSE$
         2 000722   450001 713400                    CLIMB   alt,close
         2 000723   406000 401760                    pmme    nvectors=13
         2 000724   000663 702000 2                  TSX2    IGNORE_CLOSE_ERROR

     4749    13471    3               RETURN;

PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:589  
  13471  2 000725   000000 702200 xent               TSX2  ! X66_ARET

     4750    13472    3               END;
     4751    13473        %ENDIF;
     4752    13474    2           B$RELKEY.SEQUENCE=B$RELKEY.SEQUENCE+1;

  13474  2 000726   000003 236100                    LDQ     3,,PR0
         2 000727   001000 036003                    ADLQ    512,DU
         2 000730   000003 552140                    STBQ    3,'40'O,PR0

     4753    13475    2           CALL M$WRITE (XUO_RELOCATION_WRITE) ALTRET(XUO_RELOCATION_WRITE_ERROR);

  13475  2 000731   000000 470400 xsym               LDP0    XUO_RELOCATION_WRITE$
         2 000732   440001 713400                    CLIMB   alt,write
         2 000733   401400 401760                    pmme    nvectors=4
         2 000734   000664 702000 2                  TSX2    XUO_RELOCATION_WRITE_ERROR

     4754    13476    2           B$RELKEY.KEYSIZ=11;

  13476  2 000735   000000 470400 xsym               LDP0    B$RELKEY$
         2 000736   013000 236003                    LDQ     5632,DU
         2 000737   000000 552140                    STBQ    0,'40'O,PR0

     4755    13477    2           B$RELKEY.SEQUENCE=0;

  13477  2 000740   000000 470400 xsym               LDP0    B$RELKEY$
         2 000741   000003 450100                    STZ     3,,PR0

     4756    13478    2           OU_CLEAR='0'B;

  13478  2 000742   200102 471500                    LDP1    BUF_TEMP$,,AUTO
         2 000743   200101 720100                    LXL0    BOUND_TEMP,,AUTO
         2 000744   000140 100400                    MLR     fill='000'O
         2 000745   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 000746   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0

     4757    13479    2           RETURN;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:590  

  13479  2 000747   000000 702200 xent               TSX2  ! X66_ARET

     4758    13480    2           END;
     4759    13481    1       ELSE
     4760    13482         /*
     4761    13483         Indicate an error other than duplicate key.
     4762    13484         */
     4763    13485    1           GOTO WRITE_ERROR;
     4764    13486            %PAGE (ARG=XUO$OUOPEN);

             13499    1   /*******************************************************************************
             13500    1   *                                                                              *
             13501    1   *        XUO$OUOPEN              XUO$OUOPEN                                       *
             13502    1   *                                                                              *
             13503    1   *******************************************************************************/

     4765    13507    1   XUO$OUOPEN: ENTRY;

  13507  2 000750   000000 700200 xent  XUO$OUOPEN   TSX0  ! X66_AUTO_2
         2 000751   000110 000002                    ZERO    72,2

     4766    13508         /*
     4767    13509            The following sees if the
     4768    13510            ou file is to be output.  If not
     4769    13511            the file is not opened.
     4770    13512            */
     4771    13513    1       IF XUO_OU_DCB_NUMBER=DCBNUMNIL THEN

  13513  2 000752   000000 235000 xsym               LDA     XUO_OU_DCB_NUMBER
         2 000753   000755 601000 2                  TNZ     s:13516

     4772    13514    1           RETURN;

  13514  2 000754   000000 702200 xent               TSX2  ! X66_ARET

     4773    13515        %IF CP6;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:591  
     4774    13516    1       IF DCBADDR(XUO_OU_DCB_NUMBER) -> F$DCB.ASN# ~= %FILE#

  13516  2 000755   000007 470400 3                  LDP0    7
         2 000756   000000 471500                    LDP1    0,,PR0
         2 000757   100000 473505                    LDP3    0,AL,PR1
         2 000760   300032 236100                    LDQ     26,,PR3
         2 000761   777000 376007                    ANQ     -512,DL
         2 000762   001000 116007                    CMPQ    512,DL
         2 000763   001011 600000 2                  TZE     s:13536
         2 000764   000000 720000 xsym               LXL0    XUO_OU_DCB_NUMBER
         2 000765   100000 473510                    LDP3    0,X0,PR1
         2 000766   300032 236100                    LDQ     26,,PR3
         2 000767   777000 376007                    ANQ     -512,DL
         2 000770   003000 116007                    CMPQ    1536,DL
         2 000771   000776 601000 2                  TNZ     s:13520
         2 000772   040000 106500                    CMPC    fill='040'O
         2 000773   300026 000004                    ADSC9   22,,PR3                  cn=0,n=4
         2 000774   000034 000002 1                  ADSC9   CLEAN_DELETE+10          cn=0,n=2
         2 000775   001011 600000 2                  TZE     s:13536

     4775    13517    1          AND (DCBADDR(XUO_OU_DCB_NUMBER) -> F$DCB.ASN# ~= %DEVICE# OR
     4776    13518    1          DCBADDR(XUO_OU_DCB_NUMBER) -> F$DCB.RES# ~= 'NO')
     4777    13519    2       THEN DO;

     4778    13520    2           IF XUO_ERROR_ROUTINE ~= ENTADDR(NIL)

  13520  2 000776   000000 236000 xsym               LDQ     XUO_ERROR_ROUTINE
         2 000777   000002 116000 xsym               CMPQ    B_VECTNIL+2
         2 001000   001006 600000 2                  TZE     s:13531

     4779    13521    2           THEN
     4780    13522    2               CALL XUO_ERROR_ROUTINE (ILLEGAL_OU_ASSIGNMENT);

  13522  2 001001   000010 630400 3                  EPPR0   8
         2 001002   000000 221000 xsym               LDX1    XUO_ERROR_ROUTINE
         2 001003   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001004   000000 701011                    TSX1    0,X1
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:592  
         2 001005   000000 011000                    NOP     0

     4781    13523        /*E*  ERROR:   XUO-E$XUO#ILLEGAL_OU_ASSIGNMENT
     4782    13524              MESSAGE: An attempt has been made to create an object unit on some device
     4783    13525                       or medium that cannot be used in this way.  While it is possible
     4784    13526                       to store object units on tape once they have been created, all
     4785    13527                       object units must be initially built as CP-6 keyed disk files.
     4786    13528                       The only other "device" to which your object-unit DCB may be
     4787    13529                       assigned is the "NO" device (the trashcan).
     4788    13530        */
     4789    13531    2           XUO_OU_WRITE_REQUIRED = %NO#;

  13531  2 001006   000000 450000 xsym               STZ     XUO_OU_WRITE_REQUIRED

     4790    13532    2           XUO_CLOSE_REQUIRED = %NO#;

  13532  2 001007   000000 450000 xsym               STZ     XUO_CLOSE_REQUIRED

     4791    13533    2           RETURN;

  13533  2 001010   000000 702200 xent               TSX2  ! X66_ARET

     4792    13534    2           END;
     4793    13535        %ENDIF;
     4794    13536    1       IF XUO_CLOSE_REQUIRED

  13536  2 001011   000000 234000 xsym               SZN     XUO_CLOSE_REQUIRED
         2 001012   001020 604000 2                  TMI     s:13541
         2 001013   000000 720000 xsym               LXL0    XUO_OU_DCB_NUMBER
         2 001014   100000 473510                    LDP3    0,X0,PR1
         2 001015   300031 236100                    LDQ     25,,PR3
         2 001016   020000 316007                    CANQ    8192,DL
         2 001017   001024 601000 2                  TNZ     s:13542

     4795    13537         %IF ~GCOS;
     4796    13538    1          OR NOT DCBADDR(XUO_OU_DCB_NUMBER) -> F$DCB.FCD#
     4797    13539         %ENDIF;
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:593  
     4798    13540    1       THEN
     4799    13541    1           CALL M$OPEN(XUO_OU_OPEN) ALTRET(XUO_OU_OPEN_ERROR);

  13541  2 001020   000000 470400 xsym               LDP0    XUO_OU_OPEN$
         2 001021   450000 713400                    CLIMB   alt,open
         2 001022   410400 401760                    pmme    nvectors=18
         2 001023   001027 702000 2                  TSX2    XUO_OU_OPEN_ERROR

     4800    13542    1       XUO_OU_WRITE_REQUIRED='1'B;

  13542  2 001024   400000 236003                    LDQ     -131072,DU
         2 001025   000000 756000 xsym               STQ     XUO_OU_WRITE_REQUIRED

     4801    13543    1       RETURN;

  13543  2 001026   000000 702200 xent               TSX2  ! X66_ARET

  13542  2 001027                       XUO_OU_OPEN* null
     4802    13544         /*
     4803    13545         The following handles the case of an error on the open of
     4804    13546         the ou/oulo file.
     4805    13547         XUO_OU_OPEN_ERROR* ;
     4806    13548         */
     4807    13549    1   XUO_OU_OPEN_ERROR: ;
     4808    13550    1       IF XUO_ERROR_ROUTINE~=ENTADDR(NIL) THEN

  13550  2 001027   000000 236000 xsym               LDQ     XUO_ERROR_ROUTINE
         2 001030   000002 116000 xsym               CMPQ    B_VECTNIL+2
         2 001031   001045 600000 2                  TZE     s:13555

     4809    13551    2       DO;

     4810    13552    2           ERROR=B$TCB$->B$TCB.ALT$->B$ALT.ERR;

  13552  2 001032   000000 470400 xsym               LDP0    B$TCB$
         2 001033   000000 471500                    LDP1    0,,PR0
         2 001034   100102 236100                    LDQ     66,,PR1
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:594  
         2 001035   200105 756100                    STQ     ERROR,,AUTO

     4811    13553    2           CALL XUO_ERROR_ROUTINE(ERROR);

  13553  2 001036   200105 631500                    EPPR1   ERROR,,AUTO
         2 001037   200106 451500                    STP1    ERROR+1,,AUTO
         2 001040   200106 630500                    EPPR0   ERROR+1,,AUTO
         2 001041   000000 220000 xsym               LDX0    XUO_ERROR_ROUTINE
         2 001042   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001043   000000 701010                    TSX1    0,X0
         2 001044   000000 011000                    NOP     0

     4812    13554    2           END;

     4813    13555    1       RETURN;

  13555  2 001045   000000 702200 xent               TSX2  ! X66_ARET

     4814    13556            %PAGE (ARG=XUO$OUCLOSE);

             13569    1   /*******************************************************************************
             13570    1   *                                                                              *
             13571    1   *        XUO$OUCLOSE              XUO$OUCLOSE                                     *
             13572    1   *                                                                              *
             13573    1   *******************************************************************************/

     4815    13577    1   XUO$OUCLOSE: ENTRY;

  13577  2 001046   000000 700200 xent  XUO$OUCLOSE  TSX0  ! X66_AUTO_2
         2 001047   000110 000002                    ZERO    72,2

     4816    13578         /*
     4817    13579            See if need to do anything
     4818    13580         NOTE: Do not close lo FILE...IT will be closed later
     4819    13581         */
     4820    13582    1       IF XUO_OU_WRITE_REQUIRED='1'B AND XUO_CLOSE_REQUIRED='1'B THEN

PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:595  
  13582  2 001050   000000 234000 xsym               SZN     XUO_OU_WRITE_REQUIRED
         2 001051   001060 605000 2                  TPL     IGNORE_CLOSE_ERROR_1
         2 001052   000000 234000 xsym               SZN     XUO_CLOSE_REQUIRED
         2 001053   001060 605000 2                  TPL     IGNORE_CLOSE_ERROR_1

     4821    13583    1           CALL M$CLOSE (XUO_OU_CLOSE) ALTRET(IGNORE_CLOSE_ERROR_1);

  13583  2 001054   000000 470400 xsym               LDP0    XUO_OU_CLOSE$
         2 001055   450001 713400                    CLIMB   alt,close
         2 001056   406000 401760                    pmme    nvectors=13
         2 001057   001060 702000 2                  TSX2    IGNORE_CLOSE_ERROR_1

  13582  2 001060                       IGNORE_CLOS* null
     4822    13584    1   IGNORE_CLOSE_ERROR_1: ;
     4823    13585    1       RETURN;

  13585  2 001060   000000 702200 xent               TSX2  ! X66_ARET
     4824    13586    1   END XUO$OUWRITE;
     4825    13587        %EOD;

PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:596  
--  Include file information  --

   XUM_ENTRIES_C.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   XU_PERR_C.:E05TOU  is referenced.
   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$OUWRITE.
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:597  

 **** Variables and constants ****

  ****  Section 001 RoData XUO$OUWRITE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    22-0-0/d STRC(360)   r     1 CLEAN_DELETE               4-0-0/d STRC(504)   r     1 CLEAN_READ
     2-0-0/w STRC        r     1 ILLEGAL_OU_ASSIGNMENT
     0-0-0/w STRC        r     1 PRGM_RECORD_CONFLICT
     1-0-0/w STRC        r     1 RELOC_RECORD_CONFLICT

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @P_RECORD_TYPE             4-0-0/w PTR         r     1 @P_SECTION_NUMBER
   101-0-0/w UBIN        r     1 BOUND_TEMP               102-0-0/w PTR         r     1 BUF_TEMP$
    66-0-0/d STRC(360)   r     1 DELETE_OLD               105-0-0/b STRC        r     1 ERROR
    43-0-0/w STRC(72)    r     1 FIRST_RECORD              45-0-0/w STRC(72)    r     1 LAST_RECORD
     6-0-0/w STRC(1044)  r     1 OLD_HEAD_RECORD          103-0-0/w UBIN        r     1 PAGE_TEMP
    *0-0-0/w UBIN        r     1 P_RECORD_TYPE             *0-0-0/w UBIN        r     1 P_SECTION_NUMBER
    50-0-0/d STRC(504)   r     1 READ_OLD_HEAD            100-0-0/w UBIN        r     1 SECTION_NUMBER

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$OUHEAD$                  0-0-0/w STRC(72)    r     1 B$OUKEY
     0-0-0/w PTR         r     1 B$PRGKEY$                  0-0-0/w PTR         r     1 B$RELKEY$
     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w PTR         r     1 B_DBGNAME_BASE$
     0-0-0/w PTR         r     1 B_DBGNAME_CUR$             0-0-0/w SBIN        r     1 B_DBGNAME_PAGE
     0-0-0/w PTR         r     1 B_DNAME_BASE$              0-0-0/w PTR         r     1 B_DNAME_CUR$
     0-0-0/w SBIN        r     1 B_DNAME_PAGE               0-0-0/w PTR         r     1 B_EDEF_BASE$
     0-0-0/w PTR         r     1 B_EDEF_CUR$                0-0-0/w SBIN        r     1 B_EDEF_PAGE
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:598  
     0-0-0/w PTR         r     1 B_EREF_BASE$               0-0-0/w PTR         r     1 B_EREF_CUR$
     0-0-0/w SBIN        r     1 B_EREF_PAGE                0-0-0/w PTR         r     1 B_EXST_BASE$
     0-0-0/w PTR         r     1 B_EXST_CUR$                0-0-0/w SBIN        r     1 B_EXST_PAGE
     0-0-0/w PTR         r     1 B_INTNTRY_BASE$            0-0-0/w PTR         r     1 B_INTNTRY_CUR$
     0-0-0/w SBIN        r     1 B_INTNTRY_PAGE             0-0-0/w PTR         r     1 B_LOGBLK_CUR$
     0-0-0/w PTR         r     1 B_LOGBLK_ENTRY0$           0-0-0/w SBIN        r     1 B_LOGBLK_PAGE
     0-0-0/w PTR         r     1 B_RNAME_BASE$              0-0-0/w PTR         r     1 B_RNAME_CUR$
     0-0-0/w SBIN        r     1 B_RNAME_PAGE               0-0-0/w PTR         r     1 B_SDEF_BASE$
     0-0-0/w PTR         r     1 B_SDEF_CUR$                0-0-0/w SBIN        r     1 B_SDEF_PAGE
     0-0-0/w PTR         r     1 B_SECTION_BASE$            0-0-0/w PTR         r     1 B_SECTION_CUR$
     0-0-0/w PTR         r     1 B_SEGDEF_BASE$             0-0-0/w PTR         r     1 B_SEGDEF_CUR$
     0-0-0/w SBIN        r     1 B_SEGDEF_PAGE              0-0-0/w PTR         r     1 B_SEGREF_BASE$
     0-0-0/w PTR         r     1 B_SEGREF_CUR$              0-0-0/w SBIN        r     1 B_SEGREF_PAGE
     0-0-0/w PTR         r     1 B_SREF_BASE$               0-0-0/w PTR         r     1 B_SREF_CUR$
     0-0-0/w SBIN        r     1 B_SREF_PAGE                0-0-0/w PTR         r     1 B_VREBL_BASE$
     0-0-0/w PTR         r     1 B_VREBL_CUR$               0-0-0/w SBIN        r     1 B_VREBL_PAGE
     0-0-0/w PTR         r     1 PTR2_SECTION_ARRAY$        0-0-0/w BIT         r     1 XUO_CLOSE_REQUIRED
     0-0-0/w EPTR        r     1 XUO_ERROR_ROUTINE          0-0-0/w PTR         r     1 XUO_HEAD_WRITE$
     0-0-0/w PTR         r     1 XUO_OU_CLOSE$              0-0-0/w SBIN        r     1 XUO_OU_DCB_NUMBER
     0-0-0/w PTR         r     1 XUO_OU_OPEN$               0-0-0/w PTR         r     1 XUO_OU_WRITE$
     0-0-0/b BIT         r     1 XUO_OU_WRITE_REQUIRED
     0-0-0/w PTR         r     1 XUO_PROGRAM_WRITE$
     0-0-0/w PTR         r     1 XUO_RELOCATION_WRITE$
     0-0-0/w BIT         r     1 XUO_SCHEMA_REQUIRED

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(1044)  r     1 B$OUHEAD
     0-0-0/w STRC(117)   r     1 B$PRGKEY                   0-0-0/w STRC(117)   r     1 B$RELKEY
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/c ASTR(0)     r     1 OU_CLEAR
     0-0-0/w STRC(288)   r     1 SECTION_ARRAY(0:0)
     0-0-0/d STRC(432)   r     1 XUO_HEAD_WRITE             0-0-0/d STRC(1080)  r     1 XUO_OU_CLOSE
     0-0-0/d STRC(2088)  r     1 XUO_OU_OPEN                0-0-0/d STRC(432)   r     1 XUO_OU_WRITE
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:599  
     0-0-0/d STRC(432)   r     1 XUO_PROGRAM_WRITE          0-0-0/d STRC(432)   r     1 XUO_RELOCATION_WRITE


   Procedure XUO$OUWRITE requires 561 words for executable code.
   Procedure XUO$OUWRITE requires 72 words of local(AUTO) storage.
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:600  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:601  
          MINI XREF LISTING

B$ALT.CODE
     13046**DCL     13046--REDEF   13047--REDEF   13047--REDEF
B$ALT.ERR
     13047**DCL     13415>>ASSIGN  13552>>ASSIGN
B$ALT.ERR.CODE
     13048**DCL     13237>>IF      13417>>IF      13448>>IF
B$ALT.ERR.ERR#
     13048**DCL     13048--REDEF
B$ALT.EVID
     13047**DCL     13047--REDEF   13047--REDEF
B$OUHEAD.UTS
     12095**DCL     13246>>ASSIGN  13249>>IF
B$OUHEAD.VERSION
     12112**DCL     12114--REDEF
B$OUHEAD$
     12092**DCL     12094--IMP-PTR 13246>>ASSIGN  13249>>IF
B$OUKEY.PAGE
     11997**DCL     13364<<ASSIGN
B$OUKEY.TYPE
     11979**DCL     13363<<ASSIGN
B$PRGKEY.OFFSET
     12054**DCL     13306<<ASSIGN
B$PRGKEY.SECTNUM
     12051**DCL     13307<<ASSIGN
B$PRGKEY$
     12037**DCL     12039--IMP-PTR 13306>>ASSIGN  13307>>ASSIGN
B$RELKEY.KEYSIZ
     12007**DCL     13453>>IF      13454<<ASSIGN  13476<<ASSIGN
B$RELKEY.OFFSET
     12021**DCL     13341<<ASSIGN
B$RELKEY.SECTNUM
     12018**DCL     13342<<ASSIGN
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:602  
B$RELKEY.SEQUENCE
     12029**DCL     13456>>IF      13474<<ASSIGN  13474>>ASSIGN  13477<<ASSIGN
B$RELKEY$
     12036**DCL     12006--IMP-PTR 13341>>ASSIGN  13342>>ASSIGN  13453>>IF      13454>>ASSIGN  13456>>IF
     13474>>ASSIGN  13474>>ASSIGN  13476>>ASSIGN  13477>>ASSIGN
B$TCB.ALT$
     13042**DCL     13237>>IF      13415>>ASSIGN  13417>>IF      13448>>IF      13552>>ASSIGN
B$TCB$
     13052**DCL     13237>>IF      13415>>ASSIGN  13417>>IF      13448>>IF      13552>>ASSIGN
BOUND_TEMP
     13016**DCL     13082--IMP-SIZ 13269<<ASSIGN  13273<<ASSIGN  13277<<ASSIGN  13281<<ASSIGN  13285<<ASSIGN
     13289<<ASSIGN  13293<<ASSIGN  13297<<ASSIGN  13301<<ASSIGN  13309<<ASSIGN  13311>>ASSIGN  13314>>ASSIGN
     13318<<ASSIGN  13322<<ASSIGN  13326<<ASSIGN  13330<<ASSIGN  13334<<ASSIGN  13344<<ASSIGN  13347>>ASSIGN
     13354>>ASSIGN  13361>>ASSIGN  13378>>ASSIGN  13478>>ASSIGN
BUF_TEMP$
     13017**DCL     13081--IMP-PTR 13270<<ASSIGN  13274<<ASSIGN  13278<<ASSIGN  13282<<ASSIGN  13286<<ASSIGN
     13290<<ASSIGN  13294<<ASSIGN  13298<<ASSIGN  13302<<ASSIGN  13310<<ASSIGN  13312>>ASSIGN  13314>>ASSIGN
     13319<<ASSIGN  13323<<ASSIGN  13327<<ASSIGN  13331<<ASSIGN  13335<<ASSIGN  13346<<ASSIGN  13348>>ASSIGN
     13354>>ASSIGN  13362>>ASSIGN  13378>>ASSIGN  13478>>ASSIGN
B_DBGNAME_BASE$
     11688**DCL     13334>>ASSIGN  13335>>ASSIGN
B_DBGNAME_CUR$
     11689**DCL     13334>>ASSIGN
B_DBGNAME_PAGE
     11692**DCL     13336>>ASSIGN
B_DNAME_BASE$
     11648**DCL     13269>>ASSIGN  13270>>ASSIGN
B_DNAME_CUR$
     11649**DCL     13269>>ASSIGN
B_DNAME_PAGE
     11652**DCL     13271>>ASSIGN
B_EDEF_BASE$
     11727**DCL     13281>>ASSIGN  13282>>ASSIGN
B_EDEF_CUR$
     11728**DCL     13281>>ASSIGN
B_EDEF_PAGE
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:603  
     11731**DCL     13283>>ASSIGN
B_EREF_BASE$
     11747**DCL     13285>>ASSIGN  13286>>ASSIGN
B_EREF_CUR$
     11748**DCL     13285>>ASSIGN
B_EREF_PAGE
     11751**DCL     13287>>ASSIGN
B_EXST_BASE$
     11919**DCL     13326>>ASSIGN  13327>>ASSIGN
B_EXST_CUR$
     11920**DCL     13326>>ASSIGN
B_EXST_PAGE
     11923**DCL     13328>>ASSIGN
B_INTNTRY_BASE$
     11899**DCL     13322>>ASSIGN  13323>>ASSIGN
B_INTNTRY_CUR$
     11900**DCL     13322>>ASSIGN
B_INTNTRY_PAGE
     11903**DCL     13324>>ASSIGN
B_LOGBLK_CUR$
     11880**DCL     13318>>ASSIGN
B_LOGBLK_ENTRY0$
     11878**DCL     13318>>ASSIGN  13319>>ASSIGN
B_LOGBLK_PAGE
     11883**DCL     13320>>ASSIGN
B_RNAME_BASE$
     11668**DCL     13273>>ASSIGN  13274>>ASSIGN
B_RNAME_CUR$
     11669**DCL     13273>>ASSIGN
B_RNAME_PAGE
     11672**DCL     13275>>ASSIGN
B_SDEF_BASE$
     11767**DCL     13289>>ASSIGN  13290>>ASSIGN
B_SDEF_CUR$
     11768**DCL     13289>>ASSIGN
B_SDEF_PAGE
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:604  
     11771**DCL     13291>>ASSIGN
B_SECTION_BASE$
     11708**DCL     13277>>ASSIGN  13278>>ASSIGN
B_SECTION_CUR$
     11709**DCL     13277>>ASSIGN
B_SEGDEF_BASE$
     11807**DCL     13297>>ASSIGN  13298>>ASSIGN
B_SEGDEF_CUR$
     11808**DCL     13297>>ASSIGN
B_SEGDEF_PAGE
     11811**DCL     13299>>ASSIGN
B_SEGREF_BASE$
     11827**DCL     13301>>ASSIGN  13302>>ASSIGN
B_SEGREF_CUR$
     11828**DCL     13301>>ASSIGN
B_SEGREF_PAGE
     11831**DCL     13303>>ASSIGN
B_SREF_BASE$
     11787**DCL     13293>>ASSIGN  13294>>ASSIGN
B_SREF_CUR$
     11788**DCL     13293>>ASSIGN
B_SREF_PAGE
     11791**DCL     13295>>ASSIGN
B_VREBL_BASE$
     11939**DCL     13330>>ASSIGN  13331>>ASSIGN
B_VREBL_CUR$
     11940**DCL     13330>>ASSIGN
B_VREBL_PAGE
     11943**DCL     13332>>ASSIGN
CLEAN_DELETE
     12863**DCL     13259>>ASSIGN
CLEAN_DELETE.V
     12866**DCL     12863--DCLINIT
CLEAN_READ
     12791**DCL     13241>>ASSIGN
CLEAN_READ.STATION_
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:605  
     12794**DCL     12795--REDEF
CLEAN_READ.V
     12795**DCL     12791--DCLINIT
CLEAN_READ.V.DVBYTE.REREAD#
     12806**DCL     12806--REDEF
CLEAN_READ.V.INDX#
     12804**DCL     12804--REDEF
DELETE_OLD
     12882**DCL     13259<<ASSIGN  13264<>CALL
DELETE_OLD.KEY_
     12882**DCL     13262<<ASSIGN
DELETE_OLD.LKEY_
     12884**DCL     13263<<ASSIGN
DELETE_OLD.V
     12885**DCL     13260--ASSIGN
DELETE_OLD.V.DCB#
     12886**DCL     13261<<ASSIGN
DELETE_OLD.V_
     12882**DCL     13260<<ASSIGN
ERROR
     13054**DCL     13415<<ASSIGN  13423<>CALL    13552<<ASSIGN  13553<>CALL
F$DCB.ACTPOS
     13116**DCL     13116--REDEF
F$DCB.ARS#
     13090**DCL     13090--REDEF
F$DCB.ASN#
     13105**DCL     13516>>IF      13516>>IF
F$DCB.ATTR
     13109**DCL     13110--REDEF
F$DCB.BORROW
     13124**DCL     13124--REDEF   13124--REDEF   13124--REDEF
F$DCB.DCBNAME.L
     13138**DCL     13138--IMP-SIZ
F$DCB.EOMCHAR#
     13094**DCL     13094--REDEF
F$DCB.FCD#
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:606  
     13103**DCL     13536>>IF
F$DCB.FLDID
     13119**DCL     13119--REDEF
F$DCB.FORM$
     13113**DCL     13113--REDEF
F$DCB.FSECT
     13129**DCL     13129--REDEF
F$DCB.FSN#
     13106**DCL     13106--REDEF   13106--REDEF   13107--REDEF
F$DCB.HEADER$
     13112**DCL     13112--REDEF
F$DCB.IXTNSIZE#
     13110**DCL     13110--REDEF
F$DCB.LASTSTA$
     13099**DCL     13099--REDEF
F$DCB.LVL
     13125**DCL     13125--REDEF
F$DCB.NAME#.C
     13100**DCL     13100--REDEF
F$DCB.NOEOF
     13122**DCL     13122--REDEF
F$DCB.NRECS#
     13111**DCL     13111--REDEF
F$DCB.NRECX
     13130**DCL     13130--REDEF
F$DCB.OHDR
     13122**DCL     13122--REDEF
F$DCB.ORG#
     13105**DCL     13105--REDEF
F$DCB.PRECNO
     13128**DCL     13128--REDEF
F$DCB.RCSZ
     13134**DCL     13134--REDEF
F$DCB.RES#
     13101**DCL     13101--REDEF   13516>>IF
F$DCB.SETX
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:607  
     13113**DCL     13113--REDEF
F$DCB.TAB$
     13113**DCL     13113--REDEF
F$DCB.TDA
     13127**DCL     13128--REDEF
F$DCB.WSN#
     13101**DCL     13101--REDEF
FIRST_RECORD
     12331**DCL     13262--ASSIGN
FIRST_RECORD.KEYSIZ
     12332**DCL     13251<<ASSIGN
FIRST_RECORD.NOTHD
     12335**DCL     13252<<ASSIGN
FIRST_RECORD.UTS
     12337**DCL     13253<<ASSIGN
HEAD_WRITE_ALTRET
     13237**LABEL   13235--CALLALT
IGNORE_CLOSE_ERROR
     13436**LABEL   13437--CALLALT 13470--CALLALT
IGNORE_CLOSE_ERROR_1
     13582**LABEL   13583--CALLALT
IGNORE_DELREC_ALTRET
     13265**LABEL   13264--CALLALT
ILLEGAL_OU_ASSIGNMENT
     12507**DCL     13522<>CALL
LAST_RECORD
     12367**DCL     13263--ASSIGN
LAST_RECORD.KEYSIZ
     12368**DCL     13254<<ASSIGN
LAST_RECORD.NOTHD
     12371**DCL     13255<<ASSIGN
LAST_RECORD.PAGE
     12394**DCL     13258<<ASSIGN
LAST_RECORD.TYPE
     12376**DCL     13257<<ASSIGN
LAST_RECORD.UTS
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:608  
     12373**DCL     13256<<ASSIGN
M$CLOSE
      5617**DCL-ENT 13437--CALL    13470--CALL    13583--CALL
M$DELREC
      5619**DCL-ENT 13264--CALL
M$OPEN
      5617**DCL-ENT 13541--CALL
M$READ
      5618**DCL-ENT 13247--CALL
M$WRITE
      5618**DCL-ENT 13235--CALL    13248--CALL    13313--CALL    13353--CALL    13377--CALL    13475--CALL
OLD_HEAD_RECORD
     12213**DCL     13244--ASSIGN
OLD_HEAD_RECORD.UTS
     12214**DCL     13246<<ASSIGN  13249>>IF      13253>>ASSIGN  13256>>ASSIGN
OLD_HEAD_RECORD.VERSION
     12231**DCL     12233--REDEF
OU_CLEAR
     13081**DCL     13314<<ASSIGN  13354<<ASSIGN  13378<<ASSIGN  13478<<ASSIGN
PAGE_TEMP
     13018**DCL     13271<<ASSIGN  13275<<ASSIGN  13279<<ASSIGN  13283<<ASSIGN  13287<<ASSIGN  13291<<ASSIGN
     13295<<ASSIGN  13299<<ASSIGN  13303<<ASSIGN  13320<<ASSIGN  13324<<ASSIGN  13328<<ASSIGN  13332<<ASSIGN
     13336<<ASSIGN  13364>>ASSIGN
PRGM_RECORD_CONFLICT
     12415**DCL     13420<>CALL
PTR2_SECTION_ARRAY$
     13154**DCL     13157--IMP-PTR 13306>>ASSIGN  13309>>ASSIGN  13310>>ASSIGN  13341>>ASSIGN  13344>>ASSIGN
     13346>>ASSIGN
P_RECORD_TYPE
     12992**DCL       103--PROC    13225>>DOCASE  13363>>ASSIGN  13376>>IF      13417>>IF
P_SECTION_NUMBER
     12993**DCL       103--PROC    13221--IF      13224>>ASSIGN
READ_OLD_HEAD
     12830**DCL     13241<<ASSIGN  13247<>CALL
READ_OLD_HEAD.BUF_
     12832**DCL     13244<<ASSIGN
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:609  
READ_OLD_HEAD.KEY_
     12830**DCL     13245<<ASSIGN
READ_OLD_HEAD.STATION_
     12833**DCL     12834--REDEF
READ_OLD_HEAD.V
     12834**DCL     13242--ASSIGN
READ_OLD_HEAD.V.DCB#
     12834**DCL     13243<<ASSIGN
READ_OLD_HEAD.V.DVBYTE.REREAD#
     12845**DCL     12845--REDEF
READ_OLD_HEAD.V.INDX#
     12843**DCL     12843--REDEF
READ_OLD_HEAD.V_
     12830**DCL     13242<<ASSIGN
RELOC_RECORD_CONFLICT
     12461**DCL     13460<>CALL
SECTION_ARRAY.BUF_OFFSET
     13164**DCL     13306>>ASSIGN  13341>>ASSIGN
SECTION_ARRAY.PROGRAM_CURS
     13158**DCL     13309>>ASSIGN
SECTION_ARRAY.PTR2_PROGRAM_BUF$
     13162**DCL     13310>>ASSIGN
SECTION_ARRAY.PTR2_RELOCATION_BUF$
     13163**DCL     13346>>ASSIGN
SECTION_ARRAY.RELOCATION_CURS
     13159**DCL     13344>>ASSIGN
SECTION_NUMBER
     13015**DCL     13222<<ASSIGN  13224<<ASSIGN  13306>>ASSIGN  13307>>ASSIGN  13309>>ASSIGN  13310>>ASSIGN
     13341>>ASSIGN  13342>>ASSIGN  13344>>ASSIGN  13346>>ASSIGN
WRITE_ERROR
     13378**LABEL   13238--GOTO    13248--CALLALT 13313--CALLALT 13377--CALLALT 13485--GOTO
WRITE_HEAD
     13235**LABEL   13247--CALLALT
XUO_CLOSE_REQUIRED
     13193**DCL     13436>>IF      13468>>IF      13532<<ASSIGN  13536>>IF      13582>>IF
XUO_ERROR_ROUTINE
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:610  
     13192**DCL     13413>>IF      13420>>CALL    13423>>CALL    13458>>IF      13460>>CALL    13520>>IF
     13522>>CALL    13550>>IF      13553>>CALL
XUO_HEAD_WRITE
     12697**DCL     13235<>CALL    13248<>CALL
XUO_HEAD_WRITE.KEY_
     12697**DCL     13245>>ASSIGN
XUO_HEAD_WRITE.STATION_
     12699**DCL     12699--REDEF
XUO_HEAD_WRITE.V.DVBYTE.VFC#
     12706**DCL     12706--REDEF
XUO_HEAD_WRITE.V.NEWKEY#
     12703**DCL     13230<<ASSIGN  13239<<ASSIGN
XUO_HEAD_WRITE.V.ONEWKEY#
     12702**DCL     13231<<ASSIGN  13240<<ASSIGN
XUO_HEAD_WRITE$
     12679**DCL     12697--IMP-PTR 13230>>ASSIGN  13231>>ASSIGN  13235>>CALL    13239>>ASSIGN  13240>>ASSIGN
     13245>>ASSIGN  13248>>CALL
XUO_OU_CLOSE
     12952**DCL     13437<>CALL    13470<>CALL    13583<>CALL
XUO_OU_CLOSE.SN_
     12952**DCL     12952--REDEF
XUO_OU_CLOSE.UTL_
     12953**DCL     12953--REDEF
XUO_OU_CLOSE.V.EXPIRE#
     12967**DCL     12967--REDEF
XUO_OU_CLOSE.V.TYPE#
     12965**DCL     12965--REDEF
XUO_OU_CLOSE.V.XTNSIZE#
     12962**DCL     12962--REDEF   12964--REDEF
XUO_OU_CLOSE$
     12928**DCL     12952--IMP-PTR 13437>>CALL    13470>>CALL    13583>>CALL
XUO_OU_DCB_NUMBER
     13188**DCL     13243>>ASSIGN  13261>>ASSIGN  13513>>IF      13516--IF      13516--IF      13516--IF
     13536--IF
XUO_OU_OPEN
     12632**DCL     13541<>CALL
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:611  
XUO_OU_OPEN.ACSVEH_
     12634**DCL     12635--REDEF
XUO_OU_OPEN.ALTKEYS_
     12640**DCL     12641--REDEF   12641--REDEF
XUO_OU_OPEN.HDR_
     12639**DCL     12640--REDEF
XUO_OU_OPEN.TAB_
     12638**DCL     12639--REDEF
XUO_OU_OPEN.UHL_
     12632**DCL     12633--REDEF   12633--REDEF
XUO_OU_OPEN.V.FSN#
     12672**DCL     12672--REDEF   12672--REDEF
XUO_OU_OPEN.WSN_
     12638**DCL     12638--REDEF
XUO_OU_OPEN$
     12566**DCL     12632--IMP-PTR 13541>>CALL
XUO_OU_OPEN_ERROR
     13542**LABEL   13541--CALLALT
XUO_OU_WRITE
     12729**DCL     13377<>CALL
XUO_OU_WRITE.BUF_.BOUND
     12729**DCL     13361<<ASSIGN
XUO_OU_WRITE.BUF_.BUF$
     12731**DCL     13362<<ASSIGN
XUO_OU_WRITE.STATION_
     12731**DCL     12731--REDEF
XUO_OU_WRITE.V.DVBYTE.VFC#
     12738**DCL     12738--REDEF
XUO_OU_WRITE$
     12711**DCL     12729--IMP-PTR 13361>>ASSIGN  13362>>ASSIGN  13377>>CALL
XUO_OU_WRITE_REQUIRED
     13190**DCL     13218>>IF      13412<<ASSIGN  13467<<ASSIGN  13531<<ASSIGN  13542<<ASSIGN  13582>>IF
XUO_PROGRAM_WRITE
     12760**DCL     13313<>CALL
XUO_PROGRAM_WRITE.BUF_.BOUND
     12760**DCL     13311<<ASSIGN
PL6.E3A0      #019=XUO$OUWRITE File=XUO$BUILD.:E05TSI                            WED 07/30/97 09:33 Page:612  
XUO_PROGRAM_WRITE.BUF_.BUF$
     12762**DCL     13312<<ASSIGN
XUO_PROGRAM_WRITE.STATION_
     12762**DCL     12762--REDEF
XUO_PROGRAM_WRITE.V.DVBYTE.VFC#
     12769**DCL     12769--REDEF
XUO_PROGRAM_WRITE$
     12892**DCL     12760--IMP-PTR 13311>>ASSIGN  13312>>ASSIGN  13313>>CALL
XUO_RELOCATION_WRITE
     12910**DCL     13353<>CALL    13475<>CALL
XUO_RELOCATION_WRITE.BUF_.BOUND
     12910**DCL     13347<<ASSIGN
XUO_RELOCATION_WRITE.BUF_.BUF$
     12912**DCL     13348<<ASSIGN
XUO_RELOCATION_WRITE.STATION_
     12912**DCL     12912--REDEF
XUO_RELOCATION_WRITE.V.DVBYTE.VFC#
     12919**DCL     12919--REDEF
XUO_RELOCATION_WRITE$
     12924**DCL     12910--IMP-PTR 13347>>ASSIGN  13348>>ASSIGN  13353>>CALL    13475>>CALL
XUO_RELOCATION_WRITE_ERROR
     13436**LABEL   13353--CALLALT 13475--CALLALT
XUO_SCHEMA_REQUIRED
     13191**DCL     13376>>IF

PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:613  
     4826        1        /*M*     XUO$PRGM - THIS MODULE WILL BUILD OBJECT UNIT PROGRAM RECORDS*/
     4827        2        /*T***********************************************************/
     4828        3        /*T*                                                         */
     4829        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     4830        5        /*T*                                                         */
     4831        6        /*T***********************************************************/
     4832        7        /*P*
     4833        8
     4834        9
     4835       10        NAME:  XUO$PRGM
     4836       11        XUO$PRGM --Program Record ( Record Type 10, Subtype 0)
     4837       12
     4838       13        PURPOSE:  To generate Program Record entries.
     4839       14
     4840       15        DESCRIPTION:  This routine generates Program record
     4841       16            entries.  The record contains pure program (no
     4842       17            control words).  This routine altreturns if the
     4843       18            Section Number is invalid.
     4844       19            The current program record is output if the
     4845       20            following conditions are met:
     4846       21              1.  The section number passed is not the
     4847       22                  same as the current record.
     4848       23              2.  The offset is not the next location in
     4849       24                  the current buffer.
     4850       25              3.  There is insufficient space to put the
     4851       26                  value in the current buffer.
     4852       27                  If the relocation buffer has any records
     4853       28                  in it, it will also be written.
     4854       29            The passed value is then added to the program
     4855       30            buffer.
     4856       31
     4857       32        */
     4858       33        /*D*
     4859       34
     4860       35        CALL:  CALL XUO$PRGM (Section Number,
     4861       36                       Offset,
     4862       37                       Value)
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:614  
     4863       38               ALTRET (Label)
     4864       39
     4865       40        INPUT:
     4866       41            Section Number      UBIN ALIGNED
     4867       42                                The section number to which the
     4868       43                                passed value is to be added.  The
     4869       44                                It is the Record Type 3 section
     4870       45                                entry number.
     4871       46             Offset              UBIN
     4872       47                                The value in words from the start
     4873       48                                of the section where the value is
     4874       49                                to be inserted
     4875       50            Value               BIT (36) ALIGNED
     4876       51                                The entity that is to be inserted
     4877       52                                into the specified section.
     4878       53
     4879       54        OUTPUT:
     4880       55            Value is stored in program record
     4881       56
     4882       57        B$OBJECT REFERENCE:  B$PRGKEY
     4883       58        */
     4884       59        /*B*
     4885       60
     4886       61        GLOBAL DATA:
     4887       62            B$PRGKEY
     4888       63
     4889       64        INTERFACE:
     4890       65            XUO$OUWRITE
     4891       66
     4892       67        */
     4893       68
     4894       69        XUO$PRGM: PROC(P_SECTION_NUMBER,P_OFFSET,P_VALUE) ALTRET;
     4895       70         /*
     4896       71            */
     4897       72        %INCLUDE ZVA_SYSTEM_FILE;
     4898     6323        %PAGE (ARG=INCLUDES);

PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:615  
              6336    1   /*******************************************************************************
              6337    1   *                                                                              *
              6338    1   *        INCLUDES              INCLUDES                                            *
              6339    1   *                                                                              *
              6340    1   *******************************************************************************/

     4899     6344        %INCLUDE B$OBJECT_C;
     4900     9774        %INCLUDE XUO$OBJ_C;
     4901    10184        %INCLUDE XUM_ENTRIES_C;
     4902    10204        %INCLUDE XU_PERR_C;
     4903    10395        %XUM_ENTRIES;
     4904    10404        %PAGE (ARG=SUBS);

             10417    1   /*******************************************************************************
             10418    1   *                                                                              *
             10419    1   *        SUBS              SUBS                                                  *
             10420    1   *                                                                              *
             10421    1   *******************************************************************************/

     4905    10425        %B$RECORDSUBS;
     4906    10453        %PLIST;
     4907    10454        %PAGE (ARG=PARAMETERS);

             10467    1   /*******************************************************************************
             10468    1   *                                                                              *
             10469    1   *        PARAMETERS              PARAMETERS                                        *
             10470    1   *                                                                              *
             10471    1   *******************************************************************************/

     4908    10475    1   DCL P_SECTION_NUMBER UBIN;
     4909    10476    1   DCL P_OFFSET SBIN;
     4910    10477    1   DCL P_VALUE BIT(36) ALIGNED;
     4911    10478        %PAGE (ARG=SECTION DATA);

             10491    1   /*******************************************************************************
             10492    1   *                                                                              *
             10493    1   *        SECTION DATA              SECTION DATA                                    *
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:616  
             10494    1   *                                                                              *
             10495    1   *******************************************************************************/

     4912    10499        %B_SECTION_POINTERS;
     4913    10518        %PLIST;
     4914    10519        %PAGE (ARG=PROGRAM DATA);

             10532    1   /*******************************************************************************
             10533    1   *                                                                              *
             10534    1   *        PROGRAM DATA              PROGRAM DATA                                    *
             10535    1   *                                                                              *
             10536    1   *******************************************************************************/

     4915    10540    1   DCL B$PRGKEY$ PTR SYMREF;
     4916    10541        %B$PRGRELKEY (NAME=B$PRGKEY,STCLASS="BASED(B$PRGKEY$)",KEYSIZINIT=,NOTHDINIT=,
             10541            TYPEINIT=);
     4917    10572    1   DCL XUO$PURGE_BUFFERS ENTRY (2) ALTRET;
     4918    10573        %B_PROGRAM_POINTERS;
     4919    10588        %B_MULTIBUF_VARS;
     4920    10615        %LOCAL_STUFF;
     4921    10621        %B_TRUST_ME;
     4922    10635        %IF CP6;
     4923    10636        %VLP_ERRCODE (FPTN=OUT_OF_ORDER, STCLASS="CONSTANT SYMDEF",
     4924    10637         FCG=XU, MID=O, ERR#=%E$XUO#OUT_OF_ORDER, SEV=4);
     4925    10682        %ENDIF;
     4926    10683    1   DCL PROGRAM_WORD BIT (36) ALIGNED BASED;
     4927    10684    1   DCL 1 PROGRAM_DWORD ALIGNED BASED,
     4928    10685    1         2 FIRST BIT (36),
     4929    10686    1         2 SECOND BIT (36);
     4930    10687    1   DCL TMP_PTR$ PTR;
     4931    10688    1   DCL ROOM_LEFT UBIN;
     4932    10689        %PLIST;
     4933    10690        %PAGE (ARG=RELOCATION DATA);

             10703    1   /*******************************************************************************
             10704    1   *                                                                              *
             10705    1   *        RELOCATION DATA              RELOCATION DATA                              *
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:617  
             10706    1   *                                                                              *
             10707    1   *******************************************************************************/

     4934    10711        %B_RELOCATION_POINTERS;
     4935    10726        %PAGE (ARG=ENTRY DCLS);

             10739    1   /*******************************************************************************
             10740    1   *                                                                              *
             10741    1   *        ENTRY DCLS              ENTRY DCLS                                        *
             10742    1   *                                                                              *
             10743    1   *******************************************************************************/

     4936    10747    1   DCL XUO$OUWRITE ENTRY(2);
     4937    10748        %PAGE (ARG=LOCAL DATA);

             10761    1   /*******************************************************************************
             10762    1   *                                                                              *
             10763    1   *        LOCAL DATA              LOCAL DATA                                        *
             10764    1   *                                                                              *
             10765    1   *******************************************************************************/

     4938    10769    1   DCL NUMBER_PROGRAM_WORDS UBIN;
     4939    10770    1   DCL PROGRAM_TEMP$ PTR;
     4940    10771    1   DCL DISPLACEMENT SBIN;
     4941    10772        %PAGE (ARG=MISC DATA);

             10785    1   /*******************************************************************************
             10786    1   *                                                                              *
             10787    1   *        MISC DATA              MISC DATA                                          *
             10788    1   *                                                                              *
             10789    1   *******************************************************************************/

     4942    10793    1   DCL XUO_MOST_RECENT_SECTION SBIN WORD SYMREF;
     4943    10794    1   DCL XUO_WORDSIZE UBIN SYMREF;
     4944    10795    1   DCL XUO_ERROR_ROUTINE EPTR SYMREF;
     4945    10796    1   DCL ADJUSTABLE_BIT BIT(XUO_WORDSIZE) UNAL BASED;
     4946    10797    1   DCL 1 VALUE_1,
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:618  
     4947    10798    1         2 FIRST_8 BIT(8),
     4948    10799    1         2 SECOND_8 BIT(8),
     4949    10800    1         2 LAST_20 BIT(20);
     4950    10801
     4951    10802    1   DCL 1 VALUE_2,
     4952    10803    1         2 THIRD_8 BIT(8),
     4953    10804    1         2 FOURTH_8 BIT(8),
     4954    10805    1         2 LAST_20 BIT(20);
     4955    10806
     4956    10807    1   DCL 1 TEXT,
     4957    10808    1         2 * BIT(1),
     4958    10809    1         2 FIRST_8 BIT(8),
     4959    10810    1         2 * BIT(1),
     4960    10811    1         2 SECOND_8 BIT(8),
     4961    10812    1         2 * BIT(1),
     4962    10813    1         2 THIRD_8 BIT(8),
     4963    10814    1         2 * BIT(1),
     4964    10815    1         2 FOURTH_8 BIT(8);
     4965    10816        %PAGE (ARG=CODE);

             10829    1   /*******************************************************************************
             10830    1   *                                                                              *
             10831    1   *        CODE              CODE                                                  *
             10832    1   *                                                                              *
             10833    1   *******************************************************************************/

     4966    10837    1       VALUE_1=ADDR(P_VALUE)->ADJUSTABLE_BIT;
     4967    10838    1       NUMBER_PROGRAM_WORDS=1;
     4968    10839    1       GOTO PRGM_COMMON;
     4969    10840
     4970    10841    1   XUO$PRGM_TEXT: ENTRY(P_SECTION_NUMBER,P_OFFSET,P_VALUE) ALTRET;
     4971    10842
     4972    10843    1       TEXT=P_VALUE;
     4973    10844    1       NUMBER_PROGRAM_WORDS=1;
     4974    10845    1       GOTO TEXT_COMMON;
     4975    10846         /*
     4976    10847         The following is for 36 bits of L66 text that needs
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:619  
     4977    10848         to be converted to 32 bits of char
     4978    10849         */
     4979    10850    1   XUO$PRGMDBL_TEXT: ENTRY(P_SECTION_NUMBER,P_OFFSET,P_VALUE) ALTRET;
     4980    10851    1       IF XUO_WORDSIZE = 36 /* L66 */
     4981    10852    2       THEN DO;
     4982    10853
     4983    10854    2           TEXT = P_VALUE;
     4984    10855    2           NUMBER_PROGRAM_WORDS = 1;
     4985    10856
     4986    10857    2           END;
     4987    10858
     4988    10859    2       ELSE DO /* L6 */;
     4989    10860
     4990    10861    2           TEXT = P_VALUE;
     4991    10862    2           NUMBER_PROGRAM_WORDS = 2;
     4992    10863    2           VALUE_2.THIRD_8 = TEXT.THIRD_8;
     4993    10864    2           VALUE_2.FOURTH_8 = TEXT.FOURTH_8;
     4994    10865
     4995    10866    2           END;
     4996    10867    1   TEXT_COMMON: ;
     4997    10868    1       IF XUO_WORDSIZE~=36 THEN
     4998    10869    2       DO; /*L6*/
     4999    10870    2           VALUE_1.FIRST_8=TEXT.FIRST_8;
     5000    10871    2           VALUE_1.SECOND_8=TEXT.SECOND_8;
     5001    10872    2           END;
     5002    10873    1       ELSE
     5003    10874    1           VALUE_1=TEXT; /*L66*/
     5004    10875    1       GOTO PRGM_COMMON;
     5005    10876
     5006    10877         /*
     5007    10878         The following entry is for 32 bits of l6 code
     5008    10879         */
     5009    10880    1   XUO$PRGMDBL: ENTRY (P_SECTION_NUMBER,P_OFFSET,P_VALUE) ALTRET;
     5010    10881
     5011    10882    1       IF XUO_WORDSIZE = 36
     5012    10883    2       THEN DO /* l66 */;
     5013    10884
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:620  
     5014    10885    2           VALUE_1 = P_VALUE;
     5015    10886    2           NUMBER_PROGRAM_WORDS = 1;
     5016    10887
     5017    10888    2           END;
     5018    10889
     5019    10890    2       ELSE DO /* l6 */;
     5020    10891
     5021    10892    2           VALUE_1 = ADDR(P_VALUE) -> ADJUSTABLE_BIT;
     5022    10893    2           VALUE_2 = PINCRB(ADDR(P_VALUE), XUO_WORDSIZE) -> ADJUSTABLE_BIT;
     5023    10894    2           NUMBER_PROGRAM_WORDS = 2;
     5024    10895
     5025    10896    2           END;
     5026    10897         /*
     5027    10898            Common code
     5028    10899            */
     5029    10900    1   PRGM_COMMON: ;
     5030    10901         /*
     5031    10902            Verify section number
     5032    10903            */
     5033    10904    1       IF P_SECTION_NUMBER>B_SECTION_COUNT THEN
     5034    10905    1           ALTRETURN;
     5035    10906
     5036    10907         /* We also have to see if the offset of the program word to be
     5037    10908            written is less than the max of prog and reloc.  We dont allow
     5038    10909            any backsliding here.
     5039    10910         */
     5040    10911    1       IF (NOT B_TRUST_ME) AND
     5041    10912    1          (P_OFFSET <= SECTION_ARRAY.MAX_PROG_RELOC (P_SECTION_NUMBER))
     5042    10913    2       THEN DO;
     5043    10914        %IF CP6;
     5044    10915    2           IF XUO_ERROR_ROUTINE ~= ENTADDR(NIL)
     5045    10916    2           THEN
     5046    10917    2               CALL XUO_ERROR_ROUTINE (OUT_OF_ORDER);
     5047    10918        /*E*  ERROR:   XUO-E$XUO#OUT_OF_ORDER
     5048    10919              MESSAGE: A context error has occurred while building an object unit.
     5049    10920                       A call has been made to XUO$PRGM (program-record builder) or
     5050    10921                       XUO$RELOC (relocation-record builder) which has requested that
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:621  
     5051    10922                       a program/relocation entry be output for some location in a
     5052    10923                       control section.  The specified offset in this control section
     5053    10924                       is less than (for XUO$RELOC), or not greater than (XUO$PRGM) the
     5054    10925                       offset of some previous location which has been written into
     5055    10926                       this control section.
     5056    10927
     5057    10928                       Under normal circumstances, each control section must be written
     5058    10929                       in increasing-offset order (lowest-numbered locations first), in
     5059    10930                       order to guarantee that relocation directives are applied in the
     5060    10931                       proper order.  This requirement may be over-ridden by setting
     5061    10932                       the "trust me!" flag on the initial call to XUO$OUINIT.  Note
     5062    10933                       that improper use of the "trust me!" flag may result in the
     5063    10934                       creation of an object unit in which relocation directives are
     5064    10935                       applied in some incorrect fashion; the results are unpredictable.
     5065    10936        */
     5066    10937        %ENDIF;
     5067    10938    2           ALTRETURN;
     5068    10939    2           END;
     5069    10940
     5070    10941         /* Set up a value with the amount of room left in the buffer. */
     5071    10942    1       ROOM_LEFT = B_PROGRAM_PAGE_SIZE-SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER);
     5072    10943
     5073    10944    1       IF SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER)=ADDR(NIL)
     5074    10945    2       THEN DO;
     5075    10946    2           CALL XUM$GET_LRU_ITEM (LRU_VECTOR, PTR2_LRU$) ALTRET (ERR_LRU);
     5076    10947    2           CALL XUO$PURGE_BUFFERS (%TYPPROG,PTR2_LRU$->BUBIN)ALTRET(ERR);
     5077    10948
     5078    10949    2           SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER) = SECTION_ARRAY.PTR2_LRU$
     5079    10950    2              (PTR2_LRU$->BUBIN);
     5080    10951    2           SECTION_ARRAY.PTR2_RELOCATION_BUF$ (P_SECTION_NUMBER) =
     5081    10952    2              SECTION_ARRAY.PTR2_RELOCATION_BUF$ (PTR2_LRU$->BUBIN);
     5082    10953    2           SECTION_ARRAY.PTR2_PROGRAM_BUF$ (P_SECTION_NUMBER) =
     5083    10954    2              SECTION_ARRAY.PTR2_PROGRAM_BUF$ (PTR2_LRU$->BUBIN);
     5084    10955
     5085    10956    2           SECTION_ARRAY.PROGRAM_CURS (PTR2_LRU$->BUBIN) = 0;
     5086    10957    2           SECTION_ARRAY.RELOCATION_CURS (PTR2_LRU$->BUBIN) = 0;
     5087    10958    2           SECTION_ARRAY.PTR2_PROGRAM_BUF$ (PTR2_LRU$->BUBIN) = ADDR(NIL);
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:622  
     5088    10959    2           SECTION_ARRAY.PTR2_RELOCATION_BUF$(PTR2_LRU$->BUBIN) = ADDR(NIL);
     5089    10960    2           SECTION_ARRAY.PTR2_LRU$ (PTR2_LRU$->BUBIN) = ADDR(NIL);
     5090    10961    2           SECTION_ARRAY.BUF_OFFSET(PTR2_LRU$->BUBIN) = 0;
     5091    10962
     5092    10963    2           PTR2_LRU$->BUBIN = P_SECTION_NUMBER;
     5093    10964    2           END;
     5094    10965         /*
     5095    10966         This is where we see about purging the buffer because the
     5096    10967         new data has more words than will fit in the buffer, or the
     5097    10968         offset is not more than one more than the previous max of prog
     5098    10969         or reloc.
     5099    10970         */
     5100    10971         /* If the words about to be written into the program buffer fill it
     5101    10972            up, then we look to see if we can fit 6 reloc words into the reloc
     5102    10973            buffer.  If we cant then we purge both buffers.  If we can, then
     5103    10974            we continue on and write the progam words into the buffer.
     5104    10975            This avoids (in most cases) have to write two reloc records that
     5105    10976            affect one program record.  It also avoids have very small reloc
     5106    10977            records.  The extremly rare occurences of having more then 6 reloc
     5107    10978            words on a given program word will still cause small reloc records
     5108    10979            to be written.
     5109    10980         */
     5110    10981    1       ELSE IF ((NUMBER_PROGRAM_WORDS > ROOM_LEFT)
     5111    10982    1              OR
     5112    10983    1              (P_OFFSET - SECTION_ARRAY.BUF_OFFSET (P_SECTION_NUMBER)
     5113    10984    1              ~= SECTION_ARRAY.PROGRAM_CURS (P_SECTION_NUMBER))
     5114    10985    1              OR
     5115    10986    1              (NUMBER_PROGRAM_WORDS + ROOM_LEFT = 0)
     5116    10987    1              AND
     5117    10988    1              (B_RELOCATION_PAGE_SIZE - SECTION_ARRAY.RELOCATION_CURS
     5118    10989    1              (P_SECTION_NUMBER) < 6))
     5119    10990    2           THEN DO;
     5120    10991    2               CALL XUO$PURGE_BUFFERS (%TYPPROG, P_SECTION_NUMBER) ALTRET (ERR);
     5121    10992    2               END;
     5122    10993
     5123    10994         /* If this is the first datum written to the buffer then set up min
     5124    10995            offset */
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:623  
     5125    10996    1       IF SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) = 0
     5126    10997    2       THEN DO;
     5127    10998         /* If there is an existing reloc record and the program buf is empty,
     5128    10999            then we have to purge the reloc record.  Otherwise the reloc would
     5129    11000            apply to the wrong program.
     5130    11001         */
     5131    11002    2           IF SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) > 0
     5132    11003    3           THEN DO;
     5133    11004    3               CALL XUO$PURGE_BUFFERS (%TYPPROG, P_SECTION_NUMBER) ALTRET (ERR);
     5134    11005    3               END;
     5135    11006    2           SECTION_ARRAY.BUF_OFFSET(P_SECTION_NUMBER) = P_OFFSET;
     5136    11007    2           END;
     5137    11008         /* Write data to the buffer */
     5138    11009    1       TMP_PTR$ = PINCRW(SECTION_ARRAY.PTR2_PROGRAM_BUF$(P_SECTION_NUMBER),
     5139    11010    1          SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER));
     5140    11011    1       IF NUMBER_PROGRAM_WORDS = 2
     5141    11012    2       THEN DO;
     5142    11013    2           TMP_PTR$->PROGRAM_DWORD.FIRST = VALUE_1;
     5143    11014    2           TMP_PTR$->PROGRAM_DWORD.SECOND = VALUE_2;
     5144    11015    2           SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) =
     5145    11016    2              SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) + 2;
     5146    11017    2           END;
     5147    11018    2       ELSE DO;
     5148    11019    2           TMP_PTR$->PROGRAM_WORD = VALUE_1;
     5149    11020    2           SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) =
     5150    11021    2              SECTION_ARRAY.PROGRAM_CURS (P_SECTION_NUMBER) + 1;
     5151    11022    2           END;
     5152    11023         /* Update the lru_list */
     5153    11024    1       IF XUO_MOST_RECENT_SECTION ~= P_SECTION_NUMBER
     5154    11025    2       THEN DO;
     5155    11026    2           CALL XUM$MAKE_ITEM_MRU (LRU_VECTOR, SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER
             11026                    )) ALTRET (ERR_LRU);
     5156    11027    2           XUO_MOST_RECENT_SECTION = P_SECTION_NUMBER;
     5157    11028    2           END;
     5158    11029    1       SECTION_ARRAY.MAX_PROG_RELOC(P_SECTION_NUMBER) = MAXIMUM
     5159    11030    1          (SECTION_ARRAY.MAX_PROG_RELOC(P_SECTION_NUMBER),P_OFFSET);
     5160    11031    1       SECTION_ARRAY.PROG_WORD_COUNT(P_SECTION_NUMBER) = P_OFFSET;
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:624  
     5161    11032    1       RETURN;
     5162    11033    1   ERR_LRU: ;
     5163    11034    1       ALTRETURN;
     5164    11035    1   ERR: ;
     5165    11036    1       ALTRETURN;
     5166    11037    1   END XUO$PRGM;
     5167    11038        %EOD;

PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:625  
--  Include file information  --

   XU_PERR_C.:E05TOU  is referenced.
   XUM_ENTRIES_C.:E05TOU  is referenced.
   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$PRGM.

   Procedure XUO$PRGM requires 312 words for executable code.
   Procedure XUO$PRGM requires 18 words of local(AUTO) storage.

PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:626  

 Object Unit name= XUO$PRGM                                   File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:34:06.48 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      1      1  XUO$PRGM
    2   Proc  even  none   312    470  XUO$PRGM
    3  RoData even  none     3      3  XUO$PRGM

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        3  XUO$PRGM
     2     12          yes     yes      Std        3  XUO$PRGM_TEXT
     2     22          yes     yes      Std        3  XUO$PRGMDBL_TEXT
     2     74          yes     yes      Std        3  XUO$PRGMDBL

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    1      0  OUT_OF_ORDER
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:627  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XUM$GET_LRU_ITEM
 yes     yes           Std       2 XUO$PURGE_BUFFERS
 yes     yes           Std       2 XUM$MAKE_ITEM_MRU
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_AALT
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_SECTION_COUNT                       B$PRGKEY$
     B_PROGRAM_PAGE_SIZE                   LRU_VECTOR                            PTR2_SECTION_ARRAY$
     B_TRUST_ME                            B_RELOCATION_PAGE_SIZE                XUO_MOST_RECENT_SECTION
     XUO_WORDSIZE                          XUO_ERROR_ROUTINE                     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:628  


     4826        1        /*M*     XUO$PRGM - THIS MODULE WILL BUILD OBJECT UNIT PROGRAM RECORDS*/
     4827        2        /*T***********************************************************/
     4828        3        /*T*                                                         */
     4829        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     4830        5        /*T*                                                         */
     4831        6        /*T***********************************************************/
     4832        7        /*P*
     4833        8
     4834        9
     4835       10        NAME:  XUO$PRGM
     4836       11        XUO$PRGM --Program Record ( Record Type 10, Subtype 0)
     4837       12
     4838       13        PURPOSE:  To generate Program Record entries.
     4839       14
     4840       15        DESCRIPTION:  This routine generates Program record
     4841       16            entries.  The record contains pure program (no
     4842       17            control words).  This routine altreturns if the
     4843       18            Section Number is invalid.
     4844       19            The current program record is output if the
     4845       20            following conditions are met:
     4846       21              1.  The section number passed is not the
     4847       22                  same as the current record.
     4848       23              2.  The offset is not the next location in
     4849       24                  the current buffer.
     4850       25              3.  There is insufficient space to put the
     4851       26                  value in the current buffer.
     4852       27                  If the relocation buffer has any records
     4853       28                  in it, it will also be written.
     4854       29            The passed value is then added to the program
     4855       30            buffer.
     4856       31
     4857       32        */
     4858       33        /*D*
     4859       34
     4860       35        CALL:  CALL XUO$PRGM (Section Number,
     4861       36                       Offset,
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:629  
     4862       37                       Value)
     4863       38               ALTRET (Label)
     4864       39
     4865       40        INPUT:
     4866       41            Section Number      UBIN ALIGNED
     4867       42                                The section number to which the
     4868       43                                passed value is to be added.  The
     4869       44                                It is the Record Type 3 section
     4870       45                                entry number.
     4871       46             Offset              UBIN
     4872       47                                The value in words from the start
     4873       48                                of the section where the value is
     4874       49                                to be inserted
     4875       50            Value               BIT (36) ALIGNED
     4876       51                                The entity that is to be inserted
     4877       52                                into the specified section.
     4878       53
     4879       54        OUTPUT:
     4880       55            Value is stored in program record
     4881       56
     4882       57        B$OBJECT REFERENCE:  B$PRGKEY
     4883       58        */
     4884       59        /*B*
     4885       60
     4886       61        GLOBAL DATA:
     4887       62            B$PRGKEY
     4888       63
     4889       64        INTERFACE:
     4890       65            XUO$OUWRITE
     4891       66
     4892       67        */
     4893       68
     4894       69        XUO$PRGM: PROC(P_SECTION_NUMBER,P_OFFSET,P_VALUE) ALTRET;

     69  2 000000   000000 700200 xent  XUO$PRGM     TSX0  ! X66_AUTO_3
         2 000001   000022 000003                    ZERO    18,3

PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:630  
     4895       70         /*
     4896       71            */
     4897       72        %INCLUDE ZVA_SYSTEM_FILE;
     4898     6323        %PAGE (ARG=INCLUDES);

              6336    1   /*******************************************************************************
              6337    1   *                                                                              *
              6338    1   *        INCLUDES              INCLUDES                                           *
              6339    1   *                                                                              *
              6340    1   *******************************************************************************/

     4899     6344        %INCLUDE B$OBJECT_C;
     4900     9774        %INCLUDE XUO$OBJ_C;
     4901    10184        %INCLUDE XUM_ENTRIES_C;
     4902    10204        %INCLUDE XU_PERR_C;
     4903    10395        %XUM_ENTRIES;
     4904    10404        %PAGE (ARG=SUBS);

             10417    1   /*******************************************************************************
             10418    1   *                                                                              *
             10419    1   *        SUBS              SUBS                                                  *
             10420    1   *                                                                              *
             10421    1   *******************************************************************************/

     4905    10425        %B$RECORDSUBS;
     4906    10453        %PLIST;
     4907    10454        %PAGE (ARG=PARAMETERS);

             10467    1   /*******************************************************************************
             10468    1   *                                                                              *
             10469    1   *        PARAMETERS              PARAMETERS                                       *
             10470    1   *                                                                              *
             10471    1   *******************************************************************************/

     4908    10475    1   DCL P_SECTION_NUMBER UBIN;
     4909    10476    1   DCL P_OFFSET SBIN;
     4910    10477    1   DCL P_VALUE BIT(36) ALIGNED;
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:631  
     4911    10478        %PAGE (ARG=SECTION DATA);

             10491    1   /*******************************************************************************
             10492    1   *                                                                              *
             10493    1   *        SECTION DATA              SECTION DATA                                   *
             10494    1   *                                                                              *
             10495    1   *******************************************************************************/

     4912    10499        %B_SECTION_POINTERS;
     4913    10518        %PLIST;
     4914    10519        %PAGE (ARG=PROGRAM DATA);

             10532    1   /*******************************************************************************
             10533    1   *                                                                              *
             10534    1   *        PROGRAM DATA              PROGRAM DATA                                   *
             10535    1   *                                                                              *
             10536    1   *******************************************************************************/

     4915    10540    1   DCL B$PRGKEY$ PTR SYMREF;
     4916    10541        %B$PRGRELKEY (NAME=B$PRGKEY,STCLASS="BASED(B$PRGKEY$)",KEYSIZINIT=,NOTHDINIT=,
             10541            TYPEINIT=);
     4917    10572    1   DCL XUO$PURGE_BUFFERS ENTRY (2) ALTRET;
     4918    10573        %B_PROGRAM_POINTERS;
     4919    10588        %B_MULTIBUF_VARS;
     4920    10615        %LOCAL_STUFF;
     4921    10621        %B_TRUST_ME;
     4922    10635        %IF CP6;
     4923    10636        %VLP_ERRCODE (FPTN=OUT_OF_ORDER, STCLASS="CONSTANT SYMDEF",
     4924    10637         FCG=XU, MID=O, ERR#=%E$XUO#OUT_OF_ORDER, SEV=4);
     4925    10682        %ENDIF;
     4926    10683    1   DCL PROGRAM_WORD BIT (36) ALIGNED BASED;
     4927    10684    1   DCL 1 PROGRAM_DWORD ALIGNED BASED,
     4928    10685    1         2 FIRST BIT (36),
     4929    10686    1         2 SECOND BIT (36);
     4930    10687    1   DCL TMP_PTR$ PTR;
     4931    10688    1   DCL ROOM_LEFT UBIN;
     4932    10689        %PLIST;
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:632  
     4933    10690        %PAGE (ARG=RELOCATION DATA);

             10703    1   /*******************************************************************************
             10704    1   *                                                                              *
             10705    1   *        RELOCATION DATA              RELOCATION DATA                             *
             10706    1   *                                                                              *
             10707    1   *******************************************************************************/

     4934    10711        %B_RELOCATION_POINTERS;
     4935    10726        %PAGE (ARG=ENTRY DCLS);

             10739    1   /*******************************************************************************
             10740    1   *                                                                              *
             10741    1   *        ENTRY DCLS              ENTRY DCLS                                       *
             10742    1   *                                                                              *
             10743    1   *******************************************************************************/

     4936    10747    1   DCL XUO$OUWRITE ENTRY(2);
     4937    10748        %PAGE (ARG=LOCAL DATA);

             10761    1   /*******************************************************************************
             10762    1   *                                                                              *
             10763    1   *        LOCAL DATA              LOCAL DATA                                       *
             10764    1   *                                                                              *
             10765    1   *******************************************************************************/

     4938    10769    1   DCL NUMBER_PROGRAM_WORDS UBIN;
     4939    10770    1   DCL PROGRAM_TEMP$ PTR;
     4940    10771    1   DCL DISPLACEMENT SBIN;
     4941    10772        %PAGE (ARG=MISC DATA);

             10785    1   /*******************************************************************************
             10786    1   *                                                                              *
             10787    1   *        MISC DATA              MISC DATA                                         *
             10788    1   *                                                                              *
             10789    1   *******************************************************************************/

PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:633  
     4942    10793    1   DCL XUO_MOST_RECENT_SECTION SBIN WORD SYMREF;
     4943    10794    1   DCL XUO_WORDSIZE UBIN SYMREF;
     4944    10795    1   DCL XUO_ERROR_ROUTINE EPTR SYMREF;
     4945    10796    1   DCL ADJUSTABLE_BIT BIT(XUO_WORDSIZE) UNAL BASED;
     4946    10797    1   DCL 1 VALUE_1,
     4947    10798    1         2 FIRST_8 BIT(8),
     4948    10799    1         2 SECOND_8 BIT(8),
     4949    10800    1         2 LAST_20 BIT(20);
     4950    10801
     4951    10802    1   DCL 1 VALUE_2,
     4952    10803    1         2 THIRD_8 BIT(8),
     4953    10804    1         2 FOURTH_8 BIT(8),
     4954    10805    1         2 LAST_20 BIT(20);
     4955    10806
     4956    10807    1   DCL 1 TEXT,
     4957    10808    1         2 * BIT(1),
     4958    10809    1         2 FIRST_8 BIT(8),
     4959    10810    1         2 * BIT(1),
     4960    10811    1         2 SECOND_8 BIT(8),
     4961    10812    1         2 * BIT(1),
     4962    10813    1         2 THIRD_8 BIT(8),
     4963    10814    1         2 * BIT(1),
     4964    10815    1         2 FOURTH_8 BIT(8);
     4965    10816        %PAGE (ARG=CODE);

             10829    1   /*******************************************************************************
             10830    1   *                                                                              *
             10831    1   *        CODE              CODE                                                  *
             10832    1   *                                                                              *
             10833    1   *******************************************************************************/

     4966    10837    1       VALUE_1=ADDR(P_VALUE)->ADJUSTABLE_BIT;

  10837  2 000002   200005 470500                    LDP0    @P_VALUE,,AUTO
         2 000003   000000 720000 xsym               LXL0    XUO_WORDSIZE
         2 000004   003100 060540                    CSL     bolr='003'O
         2 000005   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:634  
         2 000006   200015 000044                    BDSC    VALUE_1,,AUTO            by=0,bit=0,n=36

     4967    10838    1       NUMBER_PROGRAM_WORDS=1;

  10838  2 000007   000001 235007                    LDA     1,DL
         2 000010   200012 755100                    STA     NUMBER_PROGRAM_WORDS,,AUTO

     4968    10839    1       GOTO PRGM_COMMON;

  10839  2 000011   000123 710000 2                  TRA     PRGM_COMMON

     4969    10840
     4970    10841    1   XUO$PRGM_TEXT: ENTRY(P_SECTION_NUMBER,P_OFFSET,P_VALUE) ALTRET;

  10841  2 000012   000000 700200 xent  XUO$PRGM_TE* TSX0  ! X66_AUTO_3
         2 000013   000022 000003                    ZERO    18,3

     4971    10842
     4972    10843    1       TEXT=P_VALUE;

  10843  2 000014   200005 470500                    LDP0    @P_VALUE,,AUTO
         2 000015   000000 236100                    LDQ     0,,PR0
         2 000016   200017 756100                    STQ     TEXT,,AUTO

     4973    10844    1       NUMBER_PROGRAM_WORDS=1;

  10844  2 000017   000001 235007                    LDA     1,DL
         2 000020   200012 755100                    STA     NUMBER_PROGRAM_WORDS,,AUTO

     4974    10845    1       GOTO TEXT_COMMON;

  10845  2 000021   000053 710000 2                  TRA     TEXT_COMMON

     4975    10846         /*
     4976    10847         The following is for 36 bits of L66 text that needs
     4977    10848         to be converted to 32 bits of char
     4978    10849         */
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:635  
     4979    10850    1   XUO$PRGMDBL_TEXT: ENTRY(P_SECTION_NUMBER,P_OFFSET,P_VALUE) ALTRET;

  10850  2 000022   000000 700200 xent  XUO$PRGMDBL* TSX0  ! X66_AUTO_3
         2 000023   000022 000003                    ZERO    18,3

     4980    10851    1       IF XUO_WORDSIZE = 36 /* L66 */

  10851  2 000024   000000 235000 xsym               LDA     XUO_WORDSIZE
         2 000025   000044 115007                    CMPA    36,DL
         2 000026   000035 601000 2                  TNZ     s:10861

     4981    10852    2       THEN DO;

     4982    10853
     4983    10854    2           TEXT = P_VALUE;

  10854  2 000027   200005 470500                    LDP0    @P_VALUE,,AUTO
         2 000030   000000 236100                    LDQ     0,,PR0
         2 000031   200017 756100                    STQ     TEXT,,AUTO

     4984    10855    2           NUMBER_PROGRAM_WORDS = 1;

  10855  2 000032   000001 235007                    LDA     1,DL
         2 000033   200012 755100                    STA     NUMBER_PROGRAM_WORDS,,AUTO

     4985    10856
     4986    10857    2           END;

  10857  2 000034   000053 710000 2                  TRA     TEXT_COMMON

     4987    10858
     4988    10859    2       ELSE DO /* L6 */;

     4989    10860
     4990    10861    2           TEXT = P_VALUE;

  10861  2 000035   200005 470500                    LDP0    @P_VALUE,,AUTO
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:636  
         2 000036   000000 236100                    LDQ     0,,PR0
         2 000037   200017 756100                    STQ     TEXT,,AUTO

     4991    10862    2           NUMBER_PROGRAM_WORDS = 2;

  10862  2 000040   000002 235007                    LDA     2,DL
         2 000041   200012 755100                    STA     NUMBER_PROGRAM_WORDS,,AUTO

     4992    10863    2           VALUE_2.THIRD_8 = TEXT.THIRD_8;

  10863  2 000042   000023 736000                    QLS     19
         2 000043   200016 676100                    ERQ     VALUE_2,,AUTO
         2 000044   776000 376003                    ANQ     -1024,DU
         2 000045   200016 656100                    ERSQ    VALUE_2,,AUTO

     4993    10864    2           VALUE_2.FOURTH_8 = TEXT.FOURTH_8;

  10864  2 000046   200017 236100                    LDQ     TEXT,,AUTO
         2 000047   000024 736000                    QLS     20
         2 000050   200016 676100                    ERQ     VALUE_2,,AUTO
         2 000051   001774 376003                    ANQ     1020,DU
         2 000052   200016 656100                    ERSQ    VALUE_2,,AUTO

     4994    10865
     4995    10866    2           END;

  10851  2 000053                       TEXT_COMMON  null
     4996    10867    1   TEXT_COMMON: ;
     4997    10868    1       IF XUO_WORDSIZE~=36 THEN

  10868  2 000053   000000 236000 xsym               LDQ     XUO_WORDSIZE
         2 000054   000044 116007                    CMPQ    36,DL
         2 000055   000071 600000 2                  TZE     s:10874

     4998    10869    2       DO; /*L6*/

     4999    10870    2           VALUE_1.FIRST_8=TEXT.FIRST_8;
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:637  

  10870  2 000056   200017 236100                    LDQ     TEXT,,AUTO
         2 000057   000001 736000                    QLS     1
         2 000060   200015 676100                    ERQ     VALUE_1,,AUTO
         2 000061   776000 376003                    ANQ     -1024,DU
         2 000062   200015 656100                    ERSQ    VALUE_1,,AUTO

     5000    10871    2           VALUE_1.SECOND_8=TEXT.SECOND_8;

  10871  2 000063   200017 236100                    LDQ     TEXT,,AUTO
         2 000064   000002 736000                    QLS     2
         2 000065   200015 676100                    ERQ     VALUE_1,,AUTO
         2 000066   001774 376003                    ANQ     1020,DU
         2 000067   200015 656100                    ERSQ    VALUE_1,,AUTO

     5001    10872    2           END;

  10872  2 000070   000073 710000 2                  TRA     s:10875

     5002    10873    1       ELSE
     5003    10874    1           VALUE_1=TEXT; /*L66*/

  10874  2 000071   200017 236100                    LDQ     TEXT,,AUTO
         2 000072   200015 756100                    STQ     VALUE_1,,AUTO

     5004    10875    1       GOTO PRGM_COMMON;

  10875  2 000073   000123 710000 2                  TRA     PRGM_COMMON

     5005    10876
     5006    10877         /*
     5007    10878         The following entry is for 32 bits of l6 code
     5008    10879         */
     5009    10880    1   XUO$PRGMDBL: ENTRY (P_SECTION_NUMBER,P_OFFSET,P_VALUE) ALTRET;

  10880  2 000074   000000 700200 xent  XUO$PRGMDBL  TSX0  ! X66_AUTO_3
         2 000075   000022 000003                    ZERO    18,3
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:638  

     5010    10881
     5011    10882    1       IF XUO_WORDSIZE = 36

  10882  2 000076   000000 235000 xsym               LDA     XUO_WORDSIZE
         2 000077   000044 115007                    CMPA    36,DL
         2 000100   000107 601000 2                  TNZ     s:10892

     5012    10883    2       THEN DO /* l66 */;

     5013    10884
     5014    10885    2           VALUE_1 = P_VALUE;

  10885  2 000101   200005 470500                    LDP0    @P_VALUE,,AUTO
         2 000102   000000 236100                    LDQ     0,,PR0
         2 000103   200015 756100                    STQ     VALUE_1,,AUTO

     5015    10886    2           NUMBER_PROGRAM_WORDS = 1;

  10886  2 000104   000001 235007                    LDA     1,DL
         2 000105   200012 755100                    STA     NUMBER_PROGRAM_WORDS,,AUTO

     5016    10887
     5017    10888    2           END;

  10888  2 000106   000123 710000 2                  TRA     PRGM_COMMON

     5018    10889
     5019    10890    2       ELSE DO /* l6 */;

     5020    10891
     5021    10892    2           VALUE_1 = ADDR(P_VALUE) -> ADJUSTABLE_BIT;

  10892  2 000107   200005 470500                    LDP0    @P_VALUE,,AUTO
         2 000110   000000 620005                    EAX0    0,AL
         2 000111   003100 060540                    CSL     bolr='003'O
         2 000112   000000 000010                    BDSC    0,,PR0                   by=0,bit=0,n=*X0
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:639  
         2 000113   200015 000044                    BDSC    VALUE_1,,AUTO            by=0,bit=0,n=36

     5022    10893    2           VALUE_2 = PINCRB(ADDR(P_VALUE), XUO_WORDSIZE) -> ADJUSTABLE_BIT;

  10893  2 000114   000000 720000 xsym               LXL0    XUO_WORDSIZE
         2 000115   000000 235000 xsym               LDA     XUO_WORDSIZE
         2 000116   003100 060545                    CSL     bolr='003'O
         2 000117   000000 000010                    BDSC    0,A,PR0                  by=0,bit=0,n=*X0
         2 000120   200016 000044                    BDSC    VALUE_2,,AUTO            by=0,bit=0,n=36

     5023    10894    2           NUMBER_PROGRAM_WORDS = 2;

  10894  2 000121   000002 236007                    LDQ     2,DL
         2 000122   200012 756100                    STQ     NUMBER_PROGRAM_WORDS,,AUTO

     5024    10895
     5025    10896    2           END;

  10882  2 000123                       PRGM_COMMON  null
     5026    10897         /*
     5027    10898            Common code
     5028    10899            */
     5029    10900    1   PRGM_COMMON: ;
     5030    10901         /*
     5031    10902            Verify section number
     5032    10903            */
     5033    10904    1       IF P_SECTION_NUMBER>B_SECTION_COUNT THEN

  10904  2 000123   200003 471500                    LDP1    @P_SECTION_NUMBER,,AUTO
         2 000124   100000 236100                    LDQ     0,,PR1
         2 000125   000130 604000 2                  TMI     s:10905
         2 000126   000000 116000 xsym               CMPQ    B_SECTION_COUNT
         2 000127   000131 604400 2                  TMOZ    s:10911

     5034    10905    1           ALTRETURN;

  10905  2 000130   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:640  

     5035    10906
     5036    10907         /* We also have to see if the offset of the program word to be
     5037    10908            written is less than the max of prog and reloc.  We dont allow
     5038    10909            any backsliding here.
     5039    10910         */
     5040    10911    1       IF (NOT B_TRUST_ME) AND

  10911  2 000131   000000 234000 xsym               SZN     B_TRUST_ME
         2 000132   000153 604000 2                  TMI     s:10942
         2 000133   100000 235100                    LDA     0,,PR1
         2 000134   000003 735000                    ALS     3
         2 000135   200004 473500                    LDP3    @P_OFFSET,,AUTO
         2 000136   000000 474400 xsym               LDP4    PTR2_SECTION_ARRAY$
         2 000137   300000 236100                    LDQ     0,,PR3
         2 000140   400002 116105                    CMPQ    2,AL,PR4
         2 000141   000153 605400 2                  TPNZ    s:10942

     5041    10912    1          (P_OFFSET <= SECTION_ARRAY.MAX_PROG_RELOC (P_SECTION_NUMBER))
     5042    10913    2       THEN DO;

     5043    10914        %IF CP6;
     5044    10915    2           IF XUO_ERROR_ROUTINE ~= ENTADDR(NIL)

  10915  2 000142   000000 236000 xsym               LDQ     XUO_ERROR_ROUTINE
         2 000143   000002 116000 xsym               CMPQ    B_VECTNIL+2
         2 000144   000152 600000 2                  TZE     s:10938

     5045    10916    2           THEN
     5046    10917    2               CALL XUO_ERROR_ROUTINE (OUT_OF_ORDER);

  10917  2 000145   000000 630400 3                  EPPR0   0
         2 000146   000000 220000 xsym               LDX0    XUO_ERROR_ROUTINE
         2 000147   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000150   000000 701010                    TSX1    0,X0
         2 000151   000000 011000                    NOP     0

PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:641  
     5047    10918        /*E*  ERROR:   XUO-E$XUO#OUT_OF_ORDER
     5048    10919              MESSAGE: A context error has occurred while building an object unit.
     5049    10920                       A call has been made to XUO$PRGM (program-record builder) or
     5050    10921                       XUO$RELOC (relocation-record builder) which has requested that
     5051    10922                       a program/relocation entry be output for some location in a
     5052    10923                       control section.  The specified offset in this control section
     5053    10924                       is less than (for XUO$RELOC), or not greater than (XUO$PRGM) the
     5054    10925                       offset of some previous location which has been written into
     5055    10926                       this control section.
     5056    10927
     5057    10928                       Under normal circumstances, each control section must be written
     5058    10929                       in increasing-offset order (lowest-numbered locations first), in
     5059    10930                       order to guarantee that relocation directives are applied in the
     5060    10931                       proper order.  This requirement may be over-ridden by setting
     5061    10932                       the "trust me!" flag on the initial call to XUO$OUINIT.  Note
     5062    10933                       that improper use of the "trust me!" flag may result in the
     5063    10934                       creation of an object unit in which relocation directives are
     5064    10935                       applied in some incorrect fashion; the results are unpredictable.
     5065    10936        */
     5066    10937        %ENDIF;
     5067    10938    2           ALTRETURN;

  10938  2 000152   000000 702200 xent               TSX2  ! X66_AALT

     5068    10939    2           END;
     5069    10940
     5070    10941         /* Set up a value with the amount of room left in the buffer. */
     5071    10942    1       ROOM_LEFT = B_PROGRAM_PAGE_SIZE-SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER);

  10942  2 000153   100000 235100                    LDA     0,,PR1
         2 000154   000003 735000                    ALS     3
         2 000155   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         2 000156   000000 236000 xsym               LDQ     B_PROGRAM_PAGE_SIZE
         2 000157   300000 136105                    SBLQ    0,AL,PR3
         2 000160   200011 756100                    STQ     ROOM_LEFT,,AUTO

     5072    10943
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:642  
     5073    10944    1       IF SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER)=ADDR(NIL)

  10944  2 000161   300003 236105                    LDQ     3,AL,PR3
         2 000162   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000163   000304 601000 2                  TNZ     s:10981

     5074    10945    2       THEN DO;

     5075    10946    2           CALL XUM$GET_LRU_ITEM (LRU_VECTOR, PTR2_LRU$) ALTRET (ERR_LRU);

  10946  2 000164   200006 634500                    EPPR4   PTR2_LRU$,,AUTO
         2 000165   200021 454500                    STP4    TEXT+2,,AUTO
         2 000166   000001 236000 3                  LDQ     1
         2 000167   200020 756100                    STQ     TEXT+1,,AUTO
         2 000170   200020 630500                    EPPR0   TEXT+1,,AUTO
         2 000171   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000172   000000 701000 xent               TSX1    XUM$GET_LRU_ITEM
         2 000173   000466 702000 2                  TSX2    ERR_LRU

     5076    10947    2           CALL XUO$PURGE_BUFFERS (%TYPPROG,PTR2_LRU$->BUBIN)ALTRET(ERR);

  10947  2 000174   200006 236100                    LDQ     PTR2_LRU$,,AUTO
         2 000175   000002 235000 3                  LDA     2
         2 000176   200020 757100                    STAQ    TEXT+1,,AUTO
         2 000177   200020 630500                    EPPR0   TEXT+1,,AUTO
         2 000200   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000201   000000 701000 xent               TSX1    XUO$PURGE_BUFFERS
         2 000202   000467 702000 2                  TSX2    ERR

     5077    10948
     5078    10949    2           SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER) = SECTION_ARRAY.PTR2_LRU$

  10949  2 000203   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         2 000204   000000 235100                    LDA     0,,PR0
         2 000205   000003 735000                    ALS     3
         2 000206   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         2 000207   000000 620005                    EAX0    0,AL
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:643  
         2 000210   100000 235100                    LDA     0,,PR1
         2 000211   000003 735000                    ALS     3
         2 000212   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         2 000213   300003 236105                    LDQ     3,AL,PR3
         2 000214   300003 756110                    STQ     3,X0,PR3

     5079    10950    2              (PTR2_LRU$->BUBIN);
     5080    10951    2           SECTION_ARRAY.PTR2_RELOCATION_BUF$ (P_SECTION_NUMBER) =

  10951  2 000215   000000 235100                    LDA     0,,PR0
         2 000216   000003 735000                    ALS     3
         2 000217   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         2 000220   000000 620005                    EAX0    0,AL
         2 000221   100000 235100                    LDA     0,,PR1
         2 000222   000003 735000                    ALS     3
         2 000223   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         2 000224   300005 236105                    LDQ     5,AL,PR3
         2 000225   300005 756110                    STQ     5,X0,PR3

     5081    10952    2              SECTION_ARRAY.PTR2_RELOCATION_BUF$ (PTR2_LRU$->BUBIN);
     5082    10953    2           SECTION_ARRAY.PTR2_PROGRAM_BUF$ (P_SECTION_NUMBER) =

  10953  2 000226   000000 235100                    LDA     0,,PR0
         2 000227   000003 735000                    ALS     3
         2 000230   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         2 000231   000000 620005                    EAX0    0,AL
         2 000232   100000 235100                    LDA     0,,PR1
         2 000233   000003 735000                    ALS     3
         2 000234   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         2 000235   300004 236105                    LDQ     4,AL,PR3
         2 000236   300004 756110                    STQ     4,X0,PR3

     5083    10954    2              SECTION_ARRAY.PTR2_PROGRAM_BUF$ (PTR2_LRU$->BUBIN);
     5084    10955
     5085    10956    2           SECTION_ARRAY.PROGRAM_CURS (PTR2_LRU$->BUBIN) = 0;

  10956  2 000237   200006 471500                    LDP1    PTR2_LRU$,,AUTO
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:644  
         2 000240   100000 235100                    LDA     0,,PR1
         2 000241   000003 735000                    ALS     3
         2 000242   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         2 000243   300000 450105                    STZ     0,AL,PR3

     5086    10957    2           SECTION_ARRAY.RELOCATION_CURS (PTR2_LRU$->BUBIN) = 0;

  10957  2 000244   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         2 000245   100000 235100                    LDA     0,,PR1
         2 000246   000003 735000                    ALS     3
         2 000247   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         2 000250   300001 450105                    STZ     1,AL,PR3

     5087    10958    2           SECTION_ARRAY.PTR2_PROGRAM_BUF$ (PTR2_LRU$->BUBIN) = ADDR(NIL);

  10958  2 000251   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         2 000252   100000 235100                    LDA     0,,PR1
         2 000253   000003 735000                    ALS     3
         2 000254   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000255   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         2 000256   300004 756105                    STQ     4,AL,PR3

     5088    10959    2           SECTION_ARRAY.PTR2_RELOCATION_BUF$(PTR2_LRU$->BUBIN) = ADDR(NIL);

  10959  2 000257   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         2 000260   100000 235100                    LDA     0,,PR1
         2 000261   000003 735000                    ALS     3
         2 000262   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000263   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         2 000264   300005 756105                    STQ     5,AL,PR3

     5089    10960    2           SECTION_ARRAY.PTR2_LRU$ (PTR2_LRU$->BUBIN) = ADDR(NIL);

  10960  2 000265   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         2 000266   100000 235100                    LDA     0,,PR1
         2 000267   000003 735000                    ALS     3
         2 000270   000001 236000 xsym               LDQ     B_VECTNIL+1
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:645  
         2 000271   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         2 000272   300003 756105                    STQ     3,AL,PR3

     5090    10961    2           SECTION_ARRAY.BUF_OFFSET(PTR2_LRU$->BUBIN) = 0;

  10961  2 000273   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         2 000274   100000 235100                    LDA     0,,PR1
         2 000275   000003 735000                    ALS     3
         2 000276   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         2 000277   300006 450105                    STZ     6,AL,PR3

     5091    10962
     5092    10963    2           PTR2_LRU$->BUBIN = P_SECTION_NUMBER;

  10963  2 000300   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         2 000301   000000 235100                    LDA     0,,PR0
         2 000302   100000 755100                    STA     0,,PR1

     5093    10964    2           END;

  10964  2 000303   000333 710000 2                  TRA     s:10996

     5094    10965         /*
     5095    10966         This is where we see about purging the buffer because the
     5096    10967         new data has more words than will fit in the buffer, or the
     5097    10968         offset is not more than one more than the previous max of prog
     5098    10969         or reloc.
     5099    10970         */
     5100    10971         /* If the words about to be written into the program buffer fill it
     5101    10972            up, then we look to see if we can fit 6 reloc words into the reloc
     5102    10973            buffer.  If we cant then we purge both buffers.  If we can, then
     5103    10974            we continue on and write the progam words into the buffer.
     5104    10975            This avoids (in most cases) have to write two reloc records that
     5105    10976            affect one program record.  It also avoids have very small reloc
     5106    10977            records.  The extremly rare occurences of having more then 6 reloc
     5107    10978            words on a given program word will still cause small reloc records
     5108    10979            to be written.
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:646  
     5109    10980         */
     5110    10981    1       ELSE IF ((NUMBER_PROGRAM_WORDS > ROOM_LEFT)

  10981  2 000304   200011 236100                    LDQ     ROOM_LEFT,,AUTO
         2 000305   200012 116100                    CMPQ    NUMBER_PROGRAM_WORDS,,AUTO
         2 000306   000324 602000 2                  TNC     s:10991
         2 000307   200004 474500                    LDP4    @P_OFFSET,,AUTO
         2 000310   400000 236100                    LDQ     0,,PR4
         2 000311   300006 136105                    SBLQ    6,AL,PR3
         2 000312   000324 604000 2                  TMI     s:10991
         2 000313   300000 116105                    CMPQ    0,AL,PR3
         2 000314   000324 601000 2                  TNZ     s:10991
         2 000315   200012 236100                    LDQ     NUMBER_PROGRAM_WORDS,,AUTO
         2 000316   200011 036100                    ADLQ    ROOM_LEFT,,AUTO
         2 000317   000333 601000 2                  TNZ     s:10996
         2 000320   000000 236000 xsym               LDQ     B_RELOCATION_PAGE_SIZE
         2 000321   300001 136105                    SBLQ    1,AL,PR3
         2 000322   000006 116007                    CMPQ    6,DL
         2 000323   000333 605000 2                  TPL     s:10996

     5111    10982    1              OR
     5112    10983    1              (P_OFFSET - SECTION_ARRAY.BUF_OFFSET (P_SECTION_NUMBER)
     5113    10984    1              ~= SECTION_ARRAY.PROGRAM_CURS (P_SECTION_NUMBER))
     5114    10985    1              OR
     5115    10986    1              (NUMBER_PROGRAM_WORDS + ROOM_LEFT = 0)
     5116    10987    1              AND
     5117    10988    1              (B_RELOCATION_PAGE_SIZE - SECTION_ARRAY.RELOCATION_CURS
     5118    10989    1              (P_SECTION_NUMBER) < 6))
     5119    10990    2           THEN DO;

     5120    10991    2               CALL XUO$PURGE_BUFFERS (%TYPPROG, P_SECTION_NUMBER) ALTRET (ERR);

  10991  2 000324   200003 236100                    LDQ     @P_SECTION_NUMBER,,AUTO
         2 000325   000002 235000 3                  LDA     2
         2 000326   200020 757100                    STAQ    TEXT+1,,AUTO
         2 000327   200020 630500                    EPPR0   TEXT+1,,AUTO
         2 000330   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:647  
         2 000331   000000 701000 xent               TSX1    XUO$PURGE_BUFFERS
         2 000332   000467 702000 2                  TSX2    ERR

     5121    10992    2               END;

     5122    10993
     5123    10994         /* If this is the first datum written to the buffer then set up min
     5124    10995            offset */
     5125    10996    1       IF SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) = 0

  10996  2 000333   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         2 000334   000000 235100                    LDA     0,,PR0
         2 000335   000003 735000                    ALS     3
         2 000336   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         2 000337   100000 235105                    LDA     0,AL,PR1
         2 000340   000364 601000 2                  TNZ     s:11009

     5126    10997    2       THEN DO;

     5127    10998         /* If there is an existing reloc record and the program buf is empty,
     5128    10999            then we have to purge the reloc record.  Otherwise the reloc would
     5129    11000            apply to the wrong program.
     5130    11001         */
     5131    11002    2           IF SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) > 0

  11002  2 000341   000000 235100                    LDA     0,,PR0
         2 000342   000003 735000                    ALS     3
         2 000343   100001 235105                    LDA     1,AL,PR1
         2 000344   000354 600000 2                  TZE     s:11006

     5132    11003    3           THEN DO;

     5133    11004    3               CALL XUO$PURGE_BUFFERS (%TYPPROG, P_SECTION_NUMBER) ALTRET (ERR);

  11004  2 000345   200003 236100                    LDQ     @P_SECTION_NUMBER,,AUTO
         2 000346   000002 235000 3                  LDA     2
         2 000347   200020 757100                    STAQ    TEXT+1,,AUTO
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:648  
         2 000350   200020 630500                    EPPR0   TEXT+1,,AUTO
         2 000351   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000352   000000 701000 xent               TSX1    XUO$PURGE_BUFFERS
         2 000353   000467 702000 2                  TSX2    ERR

     5134    11005    3               END;

     5135    11006    2           SECTION_ARRAY.BUF_OFFSET(P_SECTION_NUMBER) = P_OFFSET;

  11006  2 000354   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         2 000355   000000 235100                    LDA     0,,PR0
         2 000356   000003 735000                    ALS     3
         2 000357   200004 471500                    LDP1    @P_OFFSET,,AUTO
         2 000360   000000 620005                    EAX0    0,AL
         2 000361   100000 235100                    LDA     0,,PR1
         2 000362   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         2 000363   300006 755110                    STA     6,X0,PR3

     5136    11007    2           END;

     5137    11008         /* Write data to the buffer */
     5138    11009    1       TMP_PTR$ = PINCRW(SECTION_ARRAY.PTR2_PROGRAM_BUF$(P_SECTION_NUMBER),

  11009  2 000364   000000 235100                    LDA     0,,PR0
         2 000365   000003 735000                    ALS     3
         2 000366   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         2 000367   100000 720105                    LXL0    0,AL,PR1
         2 000370   100004 473505                    LDP3    4,AL,PR1
         2 000371   300000 634510                    EPPR4   0,X0,PR3
         2 000372   200010 454500                    STP4    TMP_PTR$,,AUTO

     5139    11010    1          SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER));
     5140    11011    1       IF NUMBER_PROGRAM_WORDS = 2

  11011  2 000373   200012 236100                    LDQ     NUMBER_PROGRAM_WORDS,,AUTO
         2 000374   000002 116007                    CMPQ    2,DL
         2 000375   000412 601000 2                  TNZ     s:11019
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:649  

     5141    11012    2       THEN DO;

     5142    11013    2           TMP_PTR$->PROGRAM_DWORD.FIRST = VALUE_1;

  11013  2 000376   200015 236100                    LDQ     VALUE_1,,AUTO
         2 000377   400000 756100                    STQ     0,,PR4

     5143    11014    2           TMP_PTR$->PROGRAM_DWORD.SECOND = VALUE_2;

  11014  2 000400   200016 236100                    LDQ     VALUE_2,,AUTO
         2 000401   400001 756100                    STQ     1,,PR4

     5144    11015    2           SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) =

  11015  2 000402   000000 235100                    LDA     0,,PR0
         2 000403   000003 735000                    ALS     3
         2 000404   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         2 000405   000000 620005                    EAX0    0,AL
         2 000406   100000 235105                    LDA     0,AL,PR1
         2 000407   000002 035007                    ADLA    2,DL
         2 000410   100000 755110                    STA     0,X0,PR1

     5145    11016    2              SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) + 2;
     5146    11017    2           END;

  11017  2 000411   000423 710000 2                  TRA     s:11024

     5147    11018    2       ELSE DO;

     5148    11019    2           TMP_PTR$->PROGRAM_WORD = VALUE_1;

  11019  2 000412   200015 236100                    LDQ     VALUE_1,,AUTO
         2 000413   400000 756100                    STQ     0,,PR4

     5149    11020    2           SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) =

PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:650  
  11020  2 000414   000000 235100                    LDA     0,,PR0
         2 000415   000003 735000                    ALS     3
         2 000416   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         2 000417   000000 620005                    EAX0    0,AL
         2 000420   100000 235105                    LDA     0,AL,PR1
         2 000421   000001 035007                    ADLA    1,DL
         2 000422   100000 755110                    STA     0,X0,PR1

     5150    11021    2              SECTION_ARRAY.PROGRAM_CURS (P_SECTION_NUMBER) + 1;
     5151    11022    2           END;

     5152    11023         /* Update the lru_list */
     5153    11024    1       IF XUO_MOST_RECENT_SECTION ~= P_SECTION_NUMBER

  11024  2 000423   000000 236000 xsym               LDQ     XUO_MOST_RECENT_SECTION
         2 000424   000427 604000 2                  TMI     s:11026
         2 000425   000000 116100                    CMPQ    0,,PR0
         2 000426   000446 600000 2                  TZE     s:11029

     5154    11025    2       THEN DO;

     5155    11026    2          CALL XUM$MAKE_ITEM_MRU (LRU_VECTOR, SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER
             11026                    )) ALTRET (ERR_LRU);

  11026  2 000427   000000 235100                    LDA     0,,PR0
         2 000430   000003 735000                    ALS     3
         2 000431   000044 733000                    LRS     36
         2 000432   000022 736000                    QLS     18
         2 000433   000003 036003                    ADLQ    3,DU
         2 000434   000000 036000 xsym               ADLQ    PTR2_SECTION_ARRAY$
         2 000435   000001 235000 3                  LDA     1
         2 000436   200020 757100                    STAQ    TEXT+1,,AUTO
         2 000437   200020 630500                    EPPR0   TEXT+1,,AUTO
         2 000440   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000441   000000 701000 xent               TSX1    XUM$MAKE_ITEM_MRU
         2 000442   000466 702000 2                  TSX2    ERR_LRU

PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:651  
     5156    11027    2           XUO_MOST_RECENT_SECTION = P_SECTION_NUMBER;

  11027  2 000443   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         2 000444   000000 235100                    LDA     0,,PR0
         2 000445   000000 755000 xsym               STA     XUO_MOST_RECENT_SECTION

     5157    11028    2           END;

     5158    11029    1       SECTION_ARRAY.MAX_PROG_RELOC(P_SECTION_NUMBER) = MAXIMUM

  11029  2 000446   000000 235100                    LDA     0,,PR0
         2 000447   000003 735000                    ALS     3
         2 000450   200004 471500                    LDP1    @P_OFFSET,,AUTO
         2 000451   100000 236100                    LDQ     0,,PR1
         2 000452   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         2 000453   300002 116105                    CMPQ    2,AL,PR3
         2 000454   000456 605000 2                  TPL     s:11029+8
         2 000455   300002 236105                    LDQ     2,AL,PR3
         2 000456   300002 756105                    STQ     2,AL,PR3

     5159    11030    1          (SECTION_ARRAY.MAX_PROG_RELOC(P_SECTION_NUMBER),P_OFFSET);
     5160    11031    1       SECTION_ARRAY.PROG_WORD_COUNT(P_SECTION_NUMBER) = P_OFFSET;

  11031  2 000457   000000 235100                    LDA     0,,PR0
         2 000460   000003 735000                    ALS     3
         2 000461   000000 620005                    EAX0    0,AL
         2 000462   100000 235100                    LDA     0,,PR1
         2 000463   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         2 000464   300007 755110                    STA     7,X0,PR3

     5161    11032    1       RETURN;

  11032  2 000465   000000 702200 xent               TSX2  ! X66_ARET

  11031  2 000466                       ERR_LRU      null
     5162    11033    1   ERR_LRU: ;
     5163    11034    1       ALTRETURN;
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:652  

  11034  2 000466   000000 702200 xent               TSX2  ! X66_AALT

  11031  2 000467                       ERR          null
     5164    11035    1   ERR: ;
     5165    11036    1       ALTRETURN;

  11036  2 000467   000000 702200 xent               TSX2  ! X66_AALT
     5166    11037    1   END XUO$PRGM;
     5167    11038        %EOD;

PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:653  
--  Include file information  --

   XU_PERR_C.:E05TOU  is referenced.
   XUM_ENTRIES_C.:E05TOU  is referenced.
   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$PRGM.
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:654  

 **** Variables and constants ****

  ****  Section 001 RoData XUO$PRGM

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 OUT_OF_ORDER

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @P_OFFSET                  3-0-0/w PTR         r     1 @P_SECTION_NUMBER
     5-0-0/w PTR         r     1 @P_VALUE                  12-0-0/w UBIN        r     1 NUMBER_PROGRAM_WORDS
     6-0-0/w PTR         r     1 PTR2_LRU$                 *0-0-0/w SBIN        r     1 P_OFFSET
    *0-0-0/w UBIN        r     1 P_SECTION_NUMBER          *0-0-0/w BIT         r     1 P_VALUE
    11-0-0/w UBIN        r     1 ROOM_LEFT                 17-0-0/b STRC        r     1 TEXT
    10-0-0/w PTR         r     1 TMP_PTR$                  15-0-0/b STRC        r     1 VALUE_1
    16-0-0/b STRC        r     1 VALUE_2

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$PRGKEY$                  0-0-0/w SBIN        r     1 B_PROGRAM_PAGE_SIZE
     0-0-0/w SBIN        r     1 B_RELOCATION_PAGE_SIZE
     0-0-0/w SBIN        r     1 B_SECTION_COUNT            0-0-0/b BIT         r     1 B_TRUST_ME
     0-0-0/d VECT        r     1 LRU_VECTOR                 0-0-0/w PTR         r     1 PTR2_SECTION_ARRAY$
     0-0-0/w EPTR        r     1 XUO_ERROR_ROUTINE
     0-0-0/w SBIN        r     1 XUO_MOST_RECENT_SECTION
     0-0-0/w UBIN        r     1 XUO_WORDSIZE

  ****  BASED and DCB variables  ****

PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:655  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b ABIT        r     1 ADJUSTABLE_BIT             0-0-0/w UBIN        r     1 BUBIN
     0-0-0/w STRC(72)    r     1 PROGRAM_DWORD              0-0-0/w BIT         r     1 PROGRAM_WORD
     0-0-0/w STRC(288)   r     1 SECTION_ARRAY(0:0)


   Procedure XUO$PRGM requires 312 words for executable code.
   Procedure XUO$PRGM requires 18 words of local(AUTO) storage.
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:656  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:657  
          MINI XREF LISTING

ADJUSTABLE_BIT
     10796**DCL     10837>>ASSIGN  10892>>ASSIGN  10893>>ASSIGN
B$PRGKEY$
     10540**DCL     10542--IMP-PTR
BUBIN
     10616**DCL     10947<>CALL    10949>>ASSIGN  10951>>ASSIGN  10953>>ASSIGN  10956>>ASSIGN  10957>>ASSIGN
     10958>>ASSIGN  10959>>ASSIGN  10960>>ASSIGN  10961>>ASSIGN  10963<<ASSIGN
B_PROGRAM_PAGE_SIZE
     10586**DCL     10942>>ASSIGN
B_RELOCATION_PAGE_SIZE
     10724**DCL     10981>>IF
B_SECTION_COUNT
     10514**DCL     10904>>IF
B_TRUST_ME
     10633**DCL     10911>>IF
ERR
     11031**LABEL   10947--CALLALT 10991--CALLALT 11004--CALLALT
ERR_LRU
     11031**LABEL   10946--CALLALT 11026--CALLALT
LRU_VECTOR
     10601**DCL     10946<>CALL    11026<>CALL
NUMBER_PROGRAM_WORDS
     10769**DCL     10838<<ASSIGN  10844<<ASSIGN  10855<<ASSIGN  10862<<ASSIGN  10886<<ASSIGN  10894<<ASSIGN
     10981>>IF      10981>>IF      11011>>IF
OUT_OF_ORDER
     10649**DCL     10917<>CALL
PRGM_COMMON
     10882**LABEL   10839--GOTO    10875--GOTO
PROGRAM_DWORD.FIRST
     10685**DCL     11013<<ASSIGN
PROGRAM_DWORD.SECOND
     10686**DCL     11014<<ASSIGN
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:658  
PROGRAM_WORD
     10683**DCL     11019<<ASSIGN
PTR2_LRU$
     10618**DCL     10946<>CALL    10947>>CALL    10949>>ASSIGN  10951>>ASSIGN  10953>>ASSIGN  10956>>ASSIGN
     10957>>ASSIGN  10958>>ASSIGN  10959>>ASSIGN  10960>>ASSIGN  10961>>ASSIGN  10963>>ASSIGN
PTR2_SECTION_ARRAY$
     10602**DCL     10605--IMP-PTR 10911>>IF      10942>>ASSIGN  10944>>IF      10949>>ASSIGN  10949>>ASSIGN
     10951>>ASSIGN  10951>>ASSIGN  10953>>ASSIGN  10953>>ASSIGN  10956>>ASSIGN  10957>>ASSIGN  10958>>ASSIGN
     10959>>ASSIGN  10960>>ASSIGN  10961>>ASSIGN  10981>>IF      10981>>IF      10981>>IF      10996>>IF
     11002>>IF      11006>>ASSIGN  11009>>ASSIGN  11009>>ASSIGN  11015>>ASSIGN  11015>>ASSIGN  11020>>ASSIGN
     11020>>ASSIGN  11026>>CALL    11029>>ASSIGN  11029>>ASSIGN  11031>>ASSIGN
P_OFFSET
     10476**DCL        69--PROC    10841--ENTRY   10850--ENTRY   10880--ENTRY   10911>>IF      10981>>IF
     11006>>ASSIGN  11029>>ASSIGN  11031>>ASSIGN
P_SECTION_NUMBER
     10475**DCL        69--PROC    10841--ENTRY   10850--ENTRY   10880--ENTRY   10904>>IF      10911>>IF
     10942>>ASSIGN  10944>>IF      10949>>ASSIGN  10951>>ASSIGN  10953>>ASSIGN  10963>>ASSIGN  10981>>IF
     10981>>IF      10981>>IF      10991<>CALL    10996>>IF      11002>>IF      11004<>CALL    11006>>ASSIGN
     11009>>ASSIGN  11009>>ASSIGN  11015>>ASSIGN  11015>>ASSIGN  11020>>ASSIGN  11020>>ASSIGN  11024>>IF
     11026>>CALL    11027>>ASSIGN  11029>>ASSIGN  11029>>ASSIGN  11031>>ASSIGN
P_VALUE
     10477**DCL        69--PROC    10837--ASSIGN  10841--ENTRY   10843>>ASSIGN  10850--ENTRY   10854>>ASSIGN
     10861>>ASSIGN  10880--ENTRY   10885>>ASSIGN  10892--ASSIGN  10893--ASSIGN
ROOM_LEFT
     10688**DCL     10942<<ASSIGN  10981>>IF      10981>>IF
SECTION_ARRAY.BUF_OFFSET
     10612**DCL     10961<<ASSIGN  10981>>IF      11006<<ASSIGN
SECTION_ARRAY.MAX_PROG_RELOC
     10608**DCL     10911>>IF      11029<<ASSIGN  11029>>ASSIGN
SECTION_ARRAY.PROGRAM_CURS
     10606**DCL     10942>>ASSIGN  10956<<ASSIGN  10981>>IF      10996>>IF      11009>>ASSIGN  11015<<ASSIGN
     11015>>ASSIGN  11020<<ASSIGN  11020>>ASSIGN
SECTION_ARRAY.PROG_WORD_COUNT
     10613**DCL     11031<<ASSIGN
SECTION_ARRAY.PTR2_LRU$
     10609**DCL     10944>>IF      10949<<ASSIGN  10949>>ASSIGN  10960<<ASSIGN  11026<>CALL
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:659  
SECTION_ARRAY.PTR2_PROGRAM_BUF$
     10610**DCL     10953<<ASSIGN  10953>>ASSIGN  10958<<ASSIGN  11009>>ASSIGN
SECTION_ARRAY.PTR2_RELOCATION_BUF$
     10611**DCL     10951<<ASSIGN  10951>>ASSIGN  10959<<ASSIGN
SECTION_ARRAY.RELOCATION_CURS
     10607**DCL     10957<<ASSIGN  10981>>IF      11002>>IF
TEXT
     10807**DCL     10843<<ASSIGN  10854<<ASSIGN  10861<<ASSIGN  10874>>ASSIGN
TEXT.FIRST_8
     10809**DCL     10870>>ASSIGN
TEXT.FOURTH_8
     10815**DCL     10864>>ASSIGN
TEXT.SECOND_8
     10811**DCL     10871>>ASSIGN
TEXT.THIRD_8
     10813**DCL     10863>>ASSIGN
TEXT_COMMON
     10851**LABEL   10845--GOTO
TMP_PTR$
     10687**DCL     11009<<ASSIGN  11013>>ASSIGN  11014>>ASSIGN  11019>>ASSIGN
VALUE_1
     10797**DCL     10837<<ASSIGN  10874<<ASSIGN  10885<<ASSIGN  10892<<ASSIGN  11013>>ASSIGN  11019>>ASSIGN
VALUE_1.FIRST_8
     10798**DCL     10870<<ASSIGN
VALUE_1.SECOND_8
     10799**DCL     10871<<ASSIGN
VALUE_2
     10802**DCL     10893<<ASSIGN  11014>>ASSIGN
VALUE_2.FOURTH_8
     10804**DCL     10864<<ASSIGN
VALUE_2.THIRD_8
     10803**DCL     10863<<ASSIGN
XUM$GET_LRU_ITEM
     10398**DCL-ENT 10946--CALL
XUM$MAKE_ITEM_MRU
     10400**DCL-ENT 11026--CALL
PL6.E3A0      #020=XUO$PRGM File=XUO$BUILD.:E05TSI                               WED 07/30/97 09:34 Page:660  
XUO$PURGE_BUFFERS
     10572**DCL-ENT 10947--CALL    10991--CALL    11004--CALL
XUO_ERROR_ROUTINE
     10795**DCL     10915>>IF      10917>>CALL
XUO_MOST_RECENT_SECTION
     10793**DCL     11024>>IF      11027<<ASSIGN
XUO_WORDSIZE
     10794**DCL     10796--IMP-SIZ 10837>>ASSIGN  10851>>IF      10868>>IF      10882>>IF      10892>>ASSIGN
     10893>>ASSIGN  10893>>ASSIGN

PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:661  
     5168        1        /*M*     XUO$RELOC  - THIS MODULE WILL BUILD A PROGRAM RELOCATION RECORD*/
     5169        2        /*T***********************************************************/
     5170        3        /*T*                                                         */
     5171        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     5172        5        /*T*                                                         */
     5173        6        /*T***********************************************************/
     5174        7        /*P*
     5175        8
     5176        9        NAME:  XUO$RELOC
     5177       10        XUO$RELOC --Relocation Directives Record
     5178       11                    (Record Type 10, Subtype 1)
     5179       12
     5180       13
     5181       14        PURPOSE:  To generate Relocation Directives record entries.
     5182       15
     5183       16        DESCRIPTION:  This routine generates entries for the
     5184       17            Relocation Directives record.  The relocation buffer
     5185       18            will be flushed if the following conditions are met:
     5186       19              1.  There is insufficient room for 3 word entry
     5187       20                  in buffer.
     5188       21              2.  Relocating a new section
     5189       22              3.  The offset is less than the current key offset.
     5190       23            The program buffer will be flushed if the relocation
     5191       24            entry does not apply to the text buffer.   In addition,
     5192       25            any relocation records currently in the relocation
     5193       26            buffer will also be flushed.
     5194       27
     5195       28            Then either 1 one word, two word, or three word entry
     5196       29            will be made in the current buffer.
     5197       30            If the Eval  operator is passed, it is assumed that a
     5198       31            three word relocation entry is required.  Therefore
     5199       32            Value must also be passed.
     5200       33
     5201       34        */
     5202       35        /*D*
     5203       36
     5204       37        CALL:  CALL XUO$RELOC (Section Number,
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:662  
     5205       38                        Offset,
     5206       39                        Operand Type,
     5207       40                        Operand,
     5208       41                        Relocation Operator,
     5209       42                        Starting Bit,
     5210       43                        Ending Bit,
     5211       44                        Evaluation Operator,
     5212       45                        Value)
     5213       46
     5214       47        INPUT:
     5215       48            Section Number      UBIN ALIGNED
     5216       49                                The value representing the section
     5217       50                                number to which the relocatable
     5218       51                                record is to be applied.
     5219       52            Offset              UBIN ALIGNED
     5220       53                                The value representing the offset
     5221       54                                within the Control Section where
     5222       55                                the relocatable item is to be
     5223       56                                applied.
     5224       57            Operand Type        UBIN ALIGNED
     5225       58                                The type of operand
     5226       59                                  1 - section
     5227       60                                  2 - ENTREF
     5228       61                                  3 - SYMREF
     5229       62                                  4 - CONSTANT
     5230       63                                  5 - SEGDEF
     5231       64                                  6 - SEGREF
     5232       65            Operand             UBIN ALIGNED
     5233       66                                If the operand type = 4, the operand
     5234       67                                field is an unsigned constant.
     5235       68                                If the operand type is not equal 4 or
     5236       69                                0, then the operand field is an entry
     5237       70                                number into the table specified by
     5238       71                                the operand type.
     5239       72            Relocation Operator  UBIN ALIGNED
     5240       73                                The operator to be applied to the
     5241       74                                intermediate result and the field
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:663  
     5242       75                                defined by Starting Bit and Ending
     5243       76                                Bit within the current program
     5244       77                                record.
     5245       78                                  0 -     Undefined
     5246       79                                  1 -     Add
     5247       80                                  2 -     Subtract
     5248       81                                  3 -     Multiply
     5249       82                                  4 -     Divide
     5250       83                                 5-O'15'  Undefined
     5251       84                                   O'16'  Store right justified
     5252       85                                   O'17'  Store left justified
     5253       86            Starting Bit        UBIN ALIGNED
     5254       87                                The starting bit offset from the
     5255       88                                word locating the relocatable item.
     5256       89            Ending Bit          UBIN ALIGNED
     5257       90                                The ending bit offset from the
     5258       91                                word locating the relocatable item.
     5259       92            Evaluation  Operator UBIN ALIGNED  optional
     5260       93                                The operator to be applied to the
     5261       94                                value and the evaluation of the
     5262       95                                operand yielding an intermediate
     5263       96                                result, R.
     5264       97                                  0 - indicates Value is not present
     5265       98                                      r = E(operand)
     5266       99                                  1 - Add: r = E(operand)+Value
     5267      100                                  2 - Subtract: r = E(operand)-Value
     5268      101                                  3 - Multiply: r = E(operand)*Value
     5269      102                                  4 - Divide: r = E(operand)/Value
     5270      103                                  5 - Shift Right
     5271      104                                      r = E(operand) shifted right by
     5272      105                                          Value
     5273      106                                  6 - Shift Left
     5274      107                                      r = E(operand) shifted left
     5275      108                                          by Value
     5276      109                                  7 - Repeat:  The operand is a repeat
     5277      110                                      count.  Repeat Value n times.
     5278      111            Value               UBIN ALIGNED  optional
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:664  
     5279      112                                A constant to be used in the
     5280      113                                intermediate result.  This word is
     5281      114                                present only if the Evaluation
     5282      115                                Operator has been passed.
     5283      116
     5284      117        OUTPUT:
     5285      118            Relocation entry
     5286      119
     5287      120        B$OBJECT REFERENCE:  B$RELOC1, B$RELOC2
     5288      121        */
     5289      122        /*B*
     5290      123
     5291      124        GLOBAL DATA:
     5292      125            XUO_WORDSIZE
     5293      126
     5294      127        INTERFACE:
     5295      128            XUO$OUWRITE
     5296      129
     5297      130        */
     5298      131
     5299      132        XUO$RELOC: PROC (P_SECTION_NUMBER,P_OFFSET,P_OPERAND_TYPE,P_OPERAND,P_RELOC_OPERATOR
               132            ,P_STARTING_BIT,
     5300      133               P_ENDING_BIT,P_EVAL_OPERATOR,P_VALUE) ALTRET;
     5301      134         /*
     5302      135            */
     5303      136        %INCLUDE ZVA_SYSTEM_FILE;
     5304     6387            %PAGE (ARG=INCLUDES);

              6400    1   /*******************************************************************************
              6401    1   *                                                                              *
              6402    1   *        INCLUDES              INCLUDES                                            *
              6403    1   *                                                                              *
              6404    1   *******************************************************************************/

     5305     6408        %INCLUDE B$OBJECT_C;
     5306     9838        %INCLUDE XUO$OBJ_C;
     5307    10248        %INCLUDE XUM_ENTRIES_C;
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:665  
     5308    10268            %XUM_ENTRIES;
     5309    10277            %PAGE (ARG=SUBS);

             10290    1   /*******************************************************************************
             10291    1   *                                                                              *
             10292    1   *        SUBS              SUBS                                                  *
             10293    1   *                                                                              *
             10294    1   *******************************************************************************/

     5310    10298            %B$RELOCSUBS;
     5311    10328            %B$RECORDSUBS;
     5312    10356            %PAGE (ARG=PARAMETERS);

             10369    1   /*******************************************************************************
             10370    1   *                                                                              *
             10371    1   *        PARAMETERS              PARAMETERS                                        *
             10372    1   *                                                                              *
             10373    1   *******************************************************************************/

     5313    10377    1   DCL P_SECTION_NUMBER UBIN;
     5314    10378    1   DCL P_OFFSET SBIN;
     5315    10379    1   DCL P_OPERAND_TYPE UBIN;
     5316    10380    1   DCL P_OPERAND UBIN;
     5317    10381    1   DCL P_RELOC_OPERATOR UBIN;
     5318    10382    1   DCL P_STARTING_BIT UBIN;
     5319    10383    1   DCL P_ENDING_BIT UBIN;
     5320    10384    1   DCL P_EVAL_OPERATOR UBIN;
     5321    10385    1   DCL P_VALUE UBIN;
     5322    10386        %PAGE (ARG=SECTION DATA);

             10399    1   /*******************************************************************************
             10400    1   *                                                                              *
             10401    1   *        SECTION DATA              SECTION DATA                                    *
             10402    1   *                                                                              *
             10403    1   *******************************************************************************/

     5323    10407        %B_SECTION_POINTERS;
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:666  
     5324    10426        %PLIST;
     5325    10427        %PAGE (ARG=RELOCATION DATA);

             10440    1   /*******************************************************************************
             10441    1   *                                                                              *
             10442    1   *        RELOCATION DATA              RELOCATION DATA                              *
             10443    1   *                                                                              *
             10444    1   *******************************************************************************/

     5326    10448        %B_RELOCATION_POINTERS;
     5327    10463        %B$RELOC1 (STCLASS="BASED (BUF_PTR$)");
     5328    10494        %B$RELOC2 (STCLASS="BASED (BUF_PTR$)");
     5329    10561        %B_TRUST_ME;
     5330    10575        %PLIST;
     5331    10576        %PAGE (ARG=PROGRAM DATA);

             10589    1   /*******************************************************************************
             10590    1   *                                                                              *
             10591    1   *        PROGRAM DATA              PROGRAM DATA                                    *
             10592    1   *                                                                              *
             10593    1   *******************************************************************************/

     5332    10597        %B_PROGRAM_POINTERS;
     5333    10612        %B_MULTIBUF_VARS;
     5334    10639        %LOCAL_STUFF;
     5335    10645        %PAGE (ARG=LOCAL DATA);

             10658    1   /*******************************************************************************
             10659    1   *                                                                              *
             10660    1   *        LOCAL DATA              LOCAL DATA                                        *
             10661    1   *                                                                              *
             10662    1   *******************************************************************************/

     5336    10666    1   DCL DISPLACEMENT UBIN;
     5337    10667    1   DCL RELOCATION_CUR$ PTR;
     5338    10668    1   DCL BUF_PTR$ PTR;
     5339    10669    1   DCL TEMP UBIN;
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:667  
     5340    10670    1   DCL EVAL_OPERATOR UBIN;
     5341    10671    1   DCL COMPRESS_9_TO_8 BIT (1);
     5342    10672    1   DCL OPERAND UBIN;
     5343    10673        %PAGE (ARG=ENTRY DCLS);

             10686    1   /*******************************************************************************
             10687    1   *                                                                              *
             10688    1   *        ENTRY DCLS              ENTRY DCLS                                        *
             10689    1   *                                                                              *
             10690    1   *******************************************************************************/

     5344    10694    1   DCL XUO$PURGE_BUFFERS ENTRY(2) ALTRET;
     5345    10695        %PAGE (ARG=MISC DATA);

             10708    1   /*******************************************************************************
             10709    1   *                                                                              *
             10710    1   *        MISC DATA              MISC DATA                                          *
             10711    1   *                                                                              *
             10712    1   *******************************************************************************/

     5346    10716    1   DCL XUO_MOST_RECENT_SECTION SBIN WORD SYMREF;
     5347    10717    1   DCL XUO_WORDSIZE SBIN SYMREF;
     5348    10718    1   DCL XUO_ERROR_ROUTINE EPTR SYMREF;
     5349    10719        %IF CP6;
     5350    10720        %VLP_ERRCODE (FPTN=OUT_OF_ORDER, STCLASS=SYMREF READONLY);
     5351    10765        %ENDIF;
     5352    10766        %PAGE (ARG=CODE);

             10779    1   /*******************************************************************************
             10780    1   *                                                                              *
             10781    1   *        CODE              CODE                                                  *
             10782    1   *                                                                              *
             10783    1   *******************************************************************************/

     5353    10787    1       COMPRESS_9_TO_8 = '0'B;
     5354    10788
     5355    10789    1       GOTO RELOC_COMMON;
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:668  
     5356    10790
     5357    10791    1   XUO$RELOC_TEXT: ENTRY (P_SECTION_NUMBER, P_OFFSET, P_OPERAND_TYPE, P_OPERAND,
     5358    10792    1          P_RELOC_OPERATOR, P_STARTING_BIT, P_ENDING_BIT,
     5359    10793    1          P_EVAL_OPERATOR, P_VALUE) ALTRET;
     5360    10794
     5361    10795    1       IF XUO_WORDSIZE = 36
     5362    10796    1       THEN
     5363    10797    1           COMPRESS_9_TO_8 = '0'B;
     5364    10798    1       ELSE
     5365    10799    1           COMPRESS_9_TO_8 = '1'B;
     5366    10800
     5367    10801    1       GOTO RELOC_COMMON;
     5368    10802
     5369    10803        %EJECT;
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:669  
     5370    10804            %PAGE (ARG=COMMON RELOCATION ROUTINE);

             10817    1   /*******************************************************************************
             10818    1   *                                                                              *
             10819    1   *        COMMON RELOCATION ROUTINE              COMMON RELOCATION ROUTINE          *
             10820    1   *                                                                              *
             10821    1   *******************************************************************************/

     5371    10825    1   RELOC_COMMON: ;
     5372    10826    1       IF (NOT B_TRUST_ME) AND
     5373    10827    1          (P_OFFSET < SECTION_ARRAY.PROG_WORD_COUNT (P_SECTION_NUMBER))
     5374    10828    2       THEN DO;
     5375    10829        %IF CP6;
     5376    10830    2           IF XUO_ERROR_ROUTINE ~= ENTADDR(NIL)
     5377    10831    2           THEN
     5378    10832    2               CALL XUO_ERROR_ROUTINE (OUT_OF_ORDER);
     5379    10833        %ENDIF;
     5380    10834    2           ALTRETURN;
     5381    10835    2           END;
     5382    10836
     5383    10837    1       IF SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER)=ADDR(NIL)
     5384    10838    2       THEN DO;
     5385    10839    2           CALL XUM$GET_LRU_ITEM (LRU_VECTOR, PTR2_LRU$) ALTRET (ERR_LRU);
     5386    10840    2           CALL XUO$PURGE_BUFFERS (%TYPPROG,PTR2_LRU$->BUBIN)ALTRET(ERR);
     5387    10841
     5388    10842    2           SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER) = SECTION_ARRAY.PTR2_LRU$
     5389    10843    2              (PTR2_LRU$->BUBIN);
     5390    10844    2           SECTION_ARRAY.PTR2_RELOCATION_BUF$ (P_SECTION_NUMBER) =
     5391    10845    2              SECTION_ARRAY.PTR2_RELOCATION_BUF$ (PTR2_LRU$->BUBIN);
     5392    10846    2           SECTION_ARRAY.PTR2_PROGRAM_BUF$ (P_SECTION_NUMBER) =
     5393    10847    2              SECTION_ARRAY.PTR2_PROGRAM_BUF$ (PTR2_LRU$->BUBIN);
     5394    10848
     5395    10849    2           SECTION_ARRAY.RELOCATION_CURS (PTR2_LRU$->BUBIN) = 0;
     5396    10850    2           SECTION_ARRAY.PROGRAM_CURS (PTR2_LRU$->BUBIN) = 0;
     5397    10851    2           SECTION_ARRAY.PTR2_RELOCATION_BUF$ (PTR2_LRU$->BUBIN) = ADDR(NIL);
     5398    10852    2           SECTION_ARRAY.PTR2_PROGRAM_BUF$(PTR2_LRU$->BUBIN) = ADDR(NIL);
     5399    10853    2           SECTION_ARRAY.PTR2_LRU$ (PTR2_LRU$->BUBIN) = ADDR(NIL);
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:670  
     5400    10854    2           SECTION_ARRAY.BUF_OFFSET(PTR2_LRU$->BUBIN) = 0;
     5401    10855
     5402    10856    2           PTR2_LRU$->BUBIN = P_SECTION_NUMBER;
     5403    10857    2           END;
     5404    10858         /*  If the offset is not greater than or equal to the offset of the
     5405    10859            current section, we must purge! */
     5406    10860    1       IF (P_OFFSET < SECTION_ARRAY.BUF_OFFSET(P_SECTION_NUMBER))
     5407    10861    2       THEN DO;
     5408    10862    2           CALL XUO$PURGE_BUFFERS (%TYPPROG, P_SECTION_NUMBER) ALTRET (ERR);
     5409    10863    2           END;
     5410    10864         /*         This is where we see about purging the buffer because
     5411    10865            new data has more words than will fit in the buffer. */
     5412    10866    1       IF (B_RELOCATION_PAGE_SIZE -
     5413    10867    1          SECTION_ARRAY.RELOCATION_CURS(P_SECTION_NUMBER) < 3)
     5414    10868    2       THEN DO;
     5415    10869         /* If we have to purge the reloc buffer, we will first see if there
     5416    10870            is lots of program buffer still available and we are generating
     5417    10871            relocs for program words which are going in that buffer. Lots is 1/64 of
     5418    10872            the program buffers size.  64 is chosen since it is a power of 2 and
     5419    10873            a shift is faster than a divide.  If lots of program buffer is not
     5420    10874            available then we will purge both reloc and program buffers.  If
     5421    10875            lots of program is available then we will purge just the reloc
     5422    10876            buffer.
     5423    10877         */
     5424    10878
     5425    10879    2           IF (B_PROGRAM_PAGE_SIZE - SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) >
     5426    10880    2              B_PROGRAM_PAGE_SIZE / 64) AND
     5427    10881    2              ( ( SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) > 0 ) AND
     5428    10882    2              ( B_PROGRAM_PAGE_SIZE > P_OFFSET - SECTION_ARRAY.BUF_OFFSET(
             10882                       P_SECTION_NUMBER) ) )
     5429    10883
     5430    10884    3           THEN DO;
     5431    10885    3               CALL XUO$PURGE_BUFFERS (%TYPRELOC, P_SECTION_NUMBER) ALTRET(ERR);
     5432    10886    3               END;
     5433    10887    3           ELSE DO;
     5434    10888    3               CALL XUO$PURGE_BUFFERS (%TYPPROG, P_SECTION_NUMBER) ALTRET(ERR);
     5435    10889    3               END;
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:671  
     5436    10890    2           END;
     5437    10891
     5438    10892         /* If this is the first datum written to the buffer then set up min
     5439    10893            offset */
     5440    10894    1       IF (SECTION_ARRAY.RELOCATION_CURS(P_SECTION_NUMBER) = 0 AND
     5441    10895    1          SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) = 0)
     5442    10896    2       THEN DO;
     5443    10897    2           SECTION_ARRAY.BUF_OFFSET(P_SECTION_NUMBER) = P_OFFSET;
     5444    10898    2           END;
     5445    10899         /* Write data to the buffer */
     5446    10900         /*
     5447    10901         The following section will determine what kind of relocation
     5448    10902         record needs to be output. Ie.
     5449    10903         1.  One word
     5450    10904         2.  Two word
     5451    10905         3.  Three word
     5452    10906         */
     5453    10907    1       BUF_PTR$=PINCRW(SECTION_ARRAY.PTR2_RELOCATION_BUF$(P_SECTION_NUMBER)
     5454    10908    1          ,SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER));
     5455    10909    1       DISPLACEMENT = P_OFFSET - SECTION_ARRAY.BUF_OFFSET(P_SECTION_NUMBER);
     5456    10910    1       IF ADDR(P_EVAL_OPERATOR)=ADDR(NIL) THEN
     5457    10911    1           EVAL_OPERATOR=0;
     5458    10912    1       ELSE
     5459    10913    1           EVAL_OPERATOR=P_EVAL_OPERATOR;
     5460    10914         /**/
     5461    10915    1       IF EVAL_OPERATOR>0 OR P_RELOC_OPERATOR>2 OR P_OPERAND>BITBIN('777'O) OR
             10915                P_OPERAND_TYPE=%OPERFREF THEN
     5462    10916    2       DO;
     5463    10917    2           TEMP = 5;
     5464    10918    2           END;
     5465    10919         /*     Check for possible one word relocation */
     5466    10920    1       ELSE IF P_STARTING_BIT=0 AND P_ENDING_BIT=(XUO_WORDSIZE/2)-1
     5467    10921    2           THEN DO;
     5468    10922    2               TEMP = 0;
     5469    10923    2               END;
     5470    10924    1           ELSE
     5471    10925    1               IF P_STARTING_BIT=XUO_WORDSIZE/2 AND P_ENDING_BIT=XUO_WORDSIZE-1
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:672  
     5472    10926    2               THEN DO;
     5473    10927    2                   TEMP = 1;
     5474    10928    2                   END;
     5475    10929    1               ELSE
     5476    10930    1                   IF P_STARTING_BIT=24 AND P_ENDING_BIT=35 AND XUO_WORDSIZE=36
     5477    10931    2                   THEN DO;
     5478    10932    2                       TEMP = 2;
     5479    10933    2                       END;
     5480    10934    1                   ELSE
     5481    10935    1                       IF (P_STARTING_BIT=3 AND P_ENDING_BIT=17 AND XUO_WORDSIZE=36) OR
     5482    10936    1                          (P_STARTING_BIT=0 AND P_ENDING_BIT=31 AND XUO_WORDSIZE=16)
     5483    10937    2                       THEN DO;
     5484    10938    2                           TEMP = 3;
     5485    10939    2                           END;
     5486    10940    1                       ELSE
     5487    10941    1                           IF P_STARTING_BIT=0 AND P_ENDING_BIT=XUO_WORDSIZE-1
     5488    10942    2                           THEN DO;
     5489    10943    2                               TEMP = 4;
     5490    10944    2                               END;
     5491    10945    2                           ELSE DO;
     5492    10946    2                               TEMP = 5;
     5493    10947    2                               END; /* Of all this nonsense! */
     5494    10948    2       DO CASE (TEMP);
     5495    10949    2       CASE (0,1,2,3,4);
     5496    10950         /* The following handles the case of one word relocation. */
     5497    10951    2           B$RELOC1.FIELD = TEMP;
     5498    10952    2           B$RELOC1.OPNDTYP=P_OPERAND_TYPE;
     5499    10953    2           B$RELOC1.OP=BINBIT(P_RELOC_OPERATOR-1,1);
     5500    10954    2           IF COMPRESS_9_TO_8
     5501    10955    3           THEN DO;
     5502    10956    3               CALL COMPRESS (OPERAND, P_OPERAND);
     5503    10957    3               B$RELOC1.OPERAND = OPERAND; /* I doubt this will ever be used */
     5504    10958    3               END;
     5505    10959    3           ELSE DO;
     5506    10960    3               B$RELOC1.OPERAND = P_OPERAND;
     5507    10961    3               END;
     5508    10962    2           B$RELOC1.DISP = DISPLACEMENT;
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:673  
     5509    10963    2           SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) =
     5510    10964    2              SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) +1;
     5511    10965    2       CASE (5,ELSE);
     5512    10966         /*The following handles the case of two/three word relocation.*/
     5513    10967    2           B$RELOC2.MBZ = 0;
     5514    10968    2           B$RELOC2.OPNDTYP=P_OPERAND_TYPE;
     5515    10969    2           B$RELOC2.RELOCOP=P_RELOC_OPERATOR;
     5516    10970    2           IF COMPRESS_9_TO_8
     5517    10971    3           THEN DO;
     5518    10972    3               CALL COMPRESS (OPERAND, P_OPERAND);
     5519    10973    3               B$RELOC2.OPERAND = OPERAND;
     5520    10974    3               END;
     5521    10975    2           ELSE
     5522    10976    2               B$RELOC2.OPERAND = P_OPERAND;
     5523    10977    2           B$RELOC2.DISP = DISPLACEMENT;
     5524    10978    2           B$RELOC2.STBIT=P_STARTING_BIT;
     5525    10979    2           B$RELOC2.ENDBIT=P_ENDING_BIT;
     5526    10980    2           B$RELOC2.EVALOP=EVAL_OPERATOR;
     5527    10981    2           IF EVAL_OPERATOR=0 THEN
     5528    10982         /*
     5529    10983            Two word relocation.
     5530    10984            */
     5531    10985    3           DO;
     5532    10986    3               SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) =
     5533    10987    3                  SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) +2;
     5534    10988    3               END;
     5535    10989    2           ELSE
     5536    10990         /*      Three word relocation */
     5537    10991    3           DO;
     5538    10992    3               IF COMPRESS_9_TO_8
     5539    10993    3               THEN
     5540    10994    3                   CALL COMPRESS (B$RELOC2.VALUE, P_VALUE);
     5541    10995    3               ELSE
     5542    10996    3                   B$RELOC2.VALUE = P_VALUE;
     5543    10997    3               SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) =
     5544    10998    3                  SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) +3;
     5545    10999    3               END;
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:674  
     5546    11000    2           END; /* Do case */
     5547    11001         /* Update the lru_list */
     5548    11002    1       IF XUO_MOST_RECENT_SECTION ~= P_SECTION_NUMBER
     5549    11003    2       THEN DO;
     5550    11004    2           CALL XUM$MAKE_ITEM_MRU (LRU_VECTOR, SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER
             11004                    )) ALTRET (ERR_LRU);
     5551    11005    2           XUO_MOST_RECENT_SECTION = P_SECTION_NUMBER;
     5552    11006    2           END;
     5553    11007    1       SECTION_ARRAY.MAX_PROG_RELOC(P_SECTION_NUMBER) = MAXIMUM
     5554    11008    1          (SECTION_ARRAY.MAX_PROG_RELOC(P_SECTION_NUMBER),P_OFFSET);
     5555    11009    1       RETURN;
     5556    11010    1   ERR: ;
     5557    11011    1   ERR_LRU: ;
     5558    11012    1       RETURN;
     5559    11013        %EJECT;
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:675  
     5560    11014            %PAGE (ARG=COMPRESS 9 BIT TEXT TO 8 BITS);

             11027    1   /*******************************************************************************
             11028    1   *                                                                              *
             11029    1   *        COMPRESS 9 BIT TEXT TO 8 BITS              COMPRESS 9 BIT TEXT TO 8 BITS  *
             11030    1   *                                                                              *
             11031    1   *******************************************************************************/

     5561    11035    1   COMPRESS: PROC (EIGHT_BIT, NINE_BIT);
     5562    11036
     5563    11037    2   DCL 1 EIGHT_BIT ALIGNED,
     5564    11038    2         2 B1 UBIN (8) UNAL,
     5565    11039    2         2 B2 UBIN (8) UNAL,
     5566    11040    2         2 B3 UBIN (8) UNAL,
     5567    11041    2         2 B4 UBIN (8) UNAL,
     5568    11042    2         2 * BIT (4);
     5569    11043
     5570    11044    2   DCL 1 NINE_BIT ALIGNED,
     5571    11045    2         2 B1 UBIN BYTE CALIGNED,
     5572    11046    2         2 B2 UBIN BYTE CALIGNED,
     5573    11047    2         2 B3 UBIN BYTE CALIGNED,
     5574    11048    2         2 B4 UBIN BYTE CALIGNED;
     5575    11049
     5576    11050    2       EIGHT_BIT = '0'B;
     5577    11051
     5578    11052    2       EIGHT_BIT.B1 = NINE_BIT.B1;
     5579    11053    2       EIGHT_BIT.B2 = NINE_BIT.B2;
     5580    11054    2       EIGHT_BIT.B3 = NINE_BIT.B3;
     5581    11055    2       EIGHT_BIT.B4 = NINE_BIT.B4;
     5582    11056
     5583    11057    2       RETURN;
     5584    11058
     5585    11059    2   END COMPRESS;
     5586    11060
     5587    11061
     5588    11062    1   END XUO$RELOC;
     5589    11063        %EOD;
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:676  

PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:677  
--  Include file information  --

   XUM_ENTRIES_C.:E05TOU  is referenced.
   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$RELOC.

   Procedure XUO$RELOC requires 498 words for executable code.
   Procedure XUO$RELOC requires 28 words of local(AUTO) storage.

PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:678  

 Object Unit name= XUO$RELOC                                  File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:34:28.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   498    762  XUO$RELOC
    2  RoData even  none     6      6  XUO$RELOC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        9  XUO$RELOC
     1      4          yes     yes      Std        9  XUO$RELOC_TEXT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XUM$GET_LRU_ITEM
 yes     yes           Std       2 XUO$PURGE_BUFFERS
 yes     yes           Std       2 XUM$MAKE_ITEM_MRU
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:679  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_RELOCATION_PAGE_SIZE                B_TRUST_ME
     B_PROGRAM_PAGE_SIZE                   LRU_VECTOR                            PTR2_SECTION_ARRAY$
     XUO_MOST_RECENT_SECTION               XUO_WORDSIZE                          XUO_ERROR_ROUTINE
r    OUT_OF_ORDER                          B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:680  


     5168        1        /*M*     XUO$RELOC  - THIS MODULE WILL BUILD A PROGRAM RELOCATION RECORD*/
     5169        2        /*T***********************************************************/
     5170        3        /*T*                                                         */
     5171        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     5172        5        /*T*                                                         */
     5173        6        /*T***********************************************************/
     5174        7        /*P*
     5175        8
     5176        9        NAME:  XUO$RELOC
     5177       10        XUO$RELOC --Relocation Directives Record
     5178       11                    (Record Type 10, Subtype 1)
     5179       12
     5180       13
     5181       14        PURPOSE:  To generate Relocation Directives record entries.
     5182       15
     5183       16        DESCRIPTION:  This routine generates entries for the
     5184       17            Relocation Directives record.  The relocation buffer
     5185       18            will be flushed if the following conditions are met:
     5186       19              1.  There is insufficient room for 3 word entry
     5187       20                  in buffer.
     5188       21              2.  Relocating a new section
     5189       22              3.  The offset is less than the current key offset.
     5190       23            The program buffer will be flushed if the relocation
     5191       24            entry does not apply to the text buffer.   In addition,
     5192       25            any relocation records currently in the relocation
     5193       26            buffer will also be flushed.
     5194       27
     5195       28            Then either 1 one word, two word, or three word entry
     5196       29            will be made in the current buffer.
     5197       30            If the Eval  operator is passed, it is assumed that a
     5198       31            three word relocation entry is required.  Therefore
     5199       32            Value must also be passed.
     5200       33
     5201       34        */
     5202       35        /*D*
     5203       36
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:681  
     5204       37        CALL:  CALL XUO$RELOC (Section Number,
     5205       38                        Offset,
     5206       39                        Operand Type,
     5207       40                        Operand,
     5208       41                        Relocation Operator,
     5209       42                        Starting Bit,
     5210       43                        Ending Bit,
     5211       44                        Evaluation Operator,
     5212       45                        Value)
     5213       46
     5214       47        INPUT:
     5215       48            Section Number      UBIN ALIGNED
     5216       49                                The value representing the section
     5217       50                                number to which the relocatable
     5218       51                                record is to be applied.
     5219       52            Offset              UBIN ALIGNED
     5220       53                                The value representing the offset
     5221       54                                within the Control Section where
     5222       55                                the relocatable item is to be
     5223       56                                applied.
     5224       57            Operand Type        UBIN ALIGNED
     5225       58                                The type of operand
     5226       59                                  1 - section
     5227       60                                  2 - ENTREF
     5228       61                                  3 - SYMREF
     5229       62                                  4 - CONSTANT
     5230       63                                  5 - SEGDEF
     5231       64                                  6 - SEGREF
     5232       65            Operand             UBIN ALIGNED
     5233       66                                If the operand type = 4, the operand
     5234       67                                field is an unsigned constant.
     5235       68                                If the operand type is not equal 4 or
     5236       69                                0, then the operand field is an entry
     5237       70                                number into the table specified by
     5238       71                                the operand type.
     5239       72            Relocation Operator  UBIN ALIGNED
     5240       73                                The operator to be applied to the
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:682  
     5241       74                                intermediate result and the field
     5242       75                                defined by Starting Bit and Ending
     5243       76                                Bit within the current program
     5244       77                                record.
     5245       78                                  0 -     Undefined
     5246       79                                  1 -     Add
     5247       80                                  2 -     Subtract
     5248       81                                  3 -     Multiply
     5249       82                                  4 -     Divide
     5250       83                                 5-O'15'  Undefined
     5251       84                                   O'16'  Store right justified
     5252       85                                   O'17'  Store left justified
     5253       86            Starting Bit        UBIN ALIGNED
     5254       87                                The starting bit offset from the
     5255       88                                word locating the relocatable item.
     5256       89            Ending Bit          UBIN ALIGNED
     5257       90                                The ending bit offset from the
     5258       91                                word locating the relocatable item.
     5259       92            Evaluation  Operator UBIN ALIGNED  optional
     5260       93                                The operator to be applied to the
     5261       94                                value and the evaluation of the
     5262       95                                operand yielding an intermediate
     5263       96                                result, R.
     5264       97                                  0 - indicates Value is not present
     5265       98                                      r = E(operand)
     5266       99                                  1 - Add: r = E(operand)+Value
     5267      100                                  2 - Subtract: r = E(operand)-Value
     5268      101                                  3 - Multiply: r = E(operand)*Value
     5269      102                                  4 - Divide: r = E(operand)/Value
     5270      103                                  5 - Shift Right
     5271      104                                      r = E(operand) shifted right by
     5272      105                                          Value
     5273      106                                  6 - Shift Left
     5274      107                                      r = E(operand) shifted left
     5275      108                                          by Value
     5276      109                                  7 - Repeat:  The operand is a repeat
     5277      110                                      count.  Repeat Value n times.
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:683  
     5278      111            Value               UBIN ALIGNED  optional
     5279      112                                A constant to be used in the
     5280      113                                intermediate result.  This word is
     5281      114                                present only if the Evaluation
     5282      115                                Operator has been passed.
     5283      116
     5284      117        OUTPUT:
     5285      118            Relocation entry
     5286      119
     5287      120        B$OBJECT REFERENCE:  B$RELOC1, B$RELOC2
     5288      121        */
     5289      122        /*B*
     5290      123
     5291      124        GLOBAL DATA:
     5292      125            XUO_WORDSIZE
     5293      126
     5294      127        INTERFACE:
     5295      128            XUO$OUWRITE
     5296      129
     5297      130        */
     5298      131
     5299      132       XUO$RELOC: PROC (P_SECTION_NUMBER,P_OFFSET,P_OPERAND_TYPE,P_OPERAND,P_RELOC_OPERATOR
               132            ,P_STARTING_BIT,

    132  1 000000   000000 700200 xent  XUO$RELOC    TSX0  ! X66_AUTO_N
         1 000001   000034 000011                    ZERO    28,9

     5300      133               P_ENDING_BIT,P_EVAL_OPERATOR,P_VALUE) ALTRET;
     5301      134         /*
     5302      135            */
     5303      136        %INCLUDE ZVA_SYSTEM_FILE;
     5304     6387            %PAGE (ARG=INCLUDES);

              6400    1   /*******************************************************************************
              6401    1   *                                                                              *
              6402    1   *        INCLUDES              INCLUDES                                           *
              6403    1   *                                                                              *
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:684  
              6404    1   *******************************************************************************/

     5305     6408        %INCLUDE B$OBJECT_C;
     5306     9838        %INCLUDE XUO$OBJ_C;
     5307    10248        %INCLUDE XUM_ENTRIES_C;
     5308    10268            %XUM_ENTRIES;
     5309    10277            %PAGE (ARG=SUBS);

             10290    1   /*******************************************************************************
             10291    1   *                                                                              *
             10292    1   *        SUBS              SUBS                                                  *
             10293    1   *                                                                              *
             10294    1   *******************************************************************************/

     5310    10298            %B$RELOCSUBS;
     5311    10328            %B$RECORDSUBS;
     5312    10356            %PAGE (ARG=PARAMETERS);

             10369    1   /*******************************************************************************
             10370    1   *                                                                              *
             10371    1   *        PARAMETERS              PARAMETERS                                       *
             10372    1   *                                                                              *
             10373    1   *******************************************************************************/

     5313    10377    1   DCL P_SECTION_NUMBER UBIN;
     5314    10378    1   DCL P_OFFSET SBIN;
     5315    10379    1   DCL P_OPERAND_TYPE UBIN;
     5316    10380    1   DCL P_OPERAND UBIN;
     5317    10381    1   DCL P_RELOC_OPERATOR UBIN;
     5318    10382    1   DCL P_STARTING_BIT UBIN;
     5319    10383    1   DCL P_ENDING_BIT UBIN;
     5320    10384    1   DCL P_EVAL_OPERATOR UBIN;
     5321    10385    1   DCL P_VALUE UBIN;
     5322    10386        %PAGE (ARG=SECTION DATA);

             10399    1   /*******************************************************************************
             10400    1   *                                                                              *
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:685  
             10401    1   *        SECTION DATA              SECTION DATA                                   *
             10402    1   *                                                                              *
             10403    1   *******************************************************************************/

     5323    10407        %B_SECTION_POINTERS;
     5324    10426        %PLIST;
     5325    10427        %PAGE (ARG=RELOCATION DATA);

             10440    1   /*******************************************************************************
             10441    1   *                                                                              *
             10442    1   *        RELOCATION DATA              RELOCATION DATA                             *
             10443    1   *                                                                              *
             10444    1   *******************************************************************************/

     5326    10448        %B_RELOCATION_POINTERS;
     5327    10463        %B$RELOC1 (STCLASS="BASED (BUF_PTR$)");
     5328    10494        %B$RELOC2 (STCLASS="BASED (BUF_PTR$)");
     5329    10561        %B_TRUST_ME;
     5330    10575        %PLIST;
     5331    10576        %PAGE (ARG=PROGRAM DATA);

             10589    1   /*******************************************************************************
             10590    1   *                                                                              *
             10591    1   *        PROGRAM DATA              PROGRAM DATA                                   *
             10592    1   *                                                                              *
             10593    1   *******************************************************************************/

     5332    10597        %B_PROGRAM_POINTERS;
     5333    10612        %B_MULTIBUF_VARS;
     5334    10639        %LOCAL_STUFF;
     5335    10645        %PAGE (ARG=LOCAL DATA);

             10658    1   /*******************************************************************************
             10659    1   *                                                                              *
             10660    1   *        LOCAL DATA              LOCAL DATA                                       *
             10661    1   *                                                                              *
             10662    1   *******************************************************************************/
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:686  

     5336    10666    1   DCL DISPLACEMENT UBIN;
     5337    10667    1   DCL RELOCATION_CUR$ PTR;
     5338    10668    1   DCL BUF_PTR$ PTR;
     5339    10669    1   DCL TEMP UBIN;
     5340    10670    1   DCL EVAL_OPERATOR UBIN;
     5341    10671    1   DCL COMPRESS_9_TO_8 BIT (1);
     5342    10672    1   DCL OPERAND UBIN;
     5343    10673        %PAGE (ARG=ENTRY DCLS);

             10686    1   /*******************************************************************************
             10687    1   *                                                                              *
             10688    1   *        ENTRY DCLS              ENTRY DCLS                                       *
             10689    1   *                                                                              *
             10690    1   *******************************************************************************/

     5344    10694    1   DCL XUO$PURGE_BUFFERS ENTRY(2) ALTRET;
     5345    10695        %PAGE (ARG=MISC DATA);

             10708    1   /*******************************************************************************
             10709    1   *                                                                              *
             10710    1   *        MISC DATA              MISC DATA                                         *
             10711    1   *                                                                              *
             10712    1   *******************************************************************************/

     5346    10716    1   DCL XUO_MOST_RECENT_SECTION SBIN WORD SYMREF;
     5347    10717    1   DCL XUO_WORDSIZE SBIN SYMREF;
     5348    10718    1   DCL XUO_ERROR_ROUTINE EPTR SYMREF;
     5349    10719        %IF CP6;
     5350    10720        %VLP_ERRCODE (FPTN=OUT_OF_ORDER, STCLASS=SYMREF READONLY);
     5351    10765        %ENDIF;
     5352    10766        %PAGE (ARG=CODE);

             10779    1   /*******************************************************************************
             10780    1   *                                                                              *
             10781    1   *        CODE              CODE                                                  *
             10782    1   *                                                                              *
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:687  
             10783    1   *******************************************************************************/

     5353    10787    1       COMPRESS_9_TO_8 = '0'B;

  10787  1 000002   200023 450100                    STZ     COMPRESS_9_TO_8,,AUTO

     5354    10788
     5355    10789    1       GOTO RELOC_COMMON;

  10789  1 000003   000016 710000 1                  TRA     RELOC_COMMON

     5356    10790
     5357    10791    1   XUO$RELOC_TEXT: ENTRY (P_SECTION_NUMBER, P_OFFSET, P_OPERAND_TYPE, P_OPERAND,

  10791  1 000004   000000 700200 xent  XUO$RELOC_T* TSX0  ! X66_AUTO_N
         1 000005   000034 000011                    ZERO    28,9

     5358    10792    1          P_RELOC_OPERATOR, P_STARTING_BIT, P_ENDING_BIT,
     5359    10793    1          P_EVAL_OPERATOR, P_VALUE) ALTRET;
     5360    10794
     5361    10795    1       IF XUO_WORDSIZE = 36

  10795  1 000006   000000 235000 xsym               LDA     XUO_WORDSIZE
         1 000007   000044 115007                    CMPA    36,DL
         1 000010   000013 601000 1                  TNZ     s:10799

     5362    10796    1       THEN
     5363    10797    1           COMPRESS_9_TO_8 = '0'B;

  10797  1 000011   200023 450100                    STZ     COMPRESS_9_TO_8,,AUTO
         1 000012   000015 710000 1                  TRA     s:10801

     5364    10798    1       ELSE
     5365    10799    1           COMPRESS_9_TO_8 = '1'B;

  10799  1 000013   400000 236003                    LDQ     -131072,DU
         1 000014   200023 756100                    STQ     COMPRESS_9_TO_8,,AUTO
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:688  

     5366    10800
     5367    10801    1       GOTO RELOC_COMMON;

  10801  1 000015   000016 710000 1                  TRA     RELOC_COMMON

  10795  1 000016                       RELOC_COMMON null
     5368    10802
     5369    10803        %EJECT;
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:689  
     5370    10804            %PAGE (ARG=COMMON RELOCATION ROUTINE);

             10817    1   /*******************************************************************************
             10818    1   *                                                                              *
             10819    1   *        COMMON RELOCATION ROUTINE              COMMON RELOCATION ROUTINE         *
             10820    1   *                                                                              *
             10821    1   *******************************************************************************/

     5371    10825    1   RELOC_COMMON: ;
     5372    10826    1       IF (NOT B_TRUST_ME) AND

  10826  1 000016   000000 234000 xsym               SZN     B_TRUST_ME
         1 000017   000042 604000 1                  TMI     s:10837
         1 000020   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         1 000021   000000 235100                    LDA     0,,PR0
         1 000022   000003 735000                    ALS     3
         1 000023   200004 471500                    LDP1    @P_OFFSET,,AUTO
         1 000024   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000025   100000 236100                    LDQ     0,,PR1
         1 000026   000031 604000 1                  TMI     s:10830
         1 000027   300007 116105                    CMPQ    7,AL,PR3
         1 000030   000042 603000 1                  TRC     s:10837

     5373    10827    1          (P_OFFSET < SECTION_ARRAY.PROG_WORD_COUNT (P_SECTION_NUMBER))
     5374    10828    2       THEN DO;

     5375    10829        %IF CP6;
     5376    10830    2           IF XUO_ERROR_ROUTINE ~= ENTADDR(NIL)

  10830  1 000031   000000 236000 xsym               LDQ     XUO_ERROR_ROUTINE
         1 000032   000002 116000 xsym               CMPQ    B_VECTNIL+2
         1 000033   000041 600000 1                  TZE     s:10834

     5377    10831    2           THEN
     5378    10832    2               CALL XUO_ERROR_ROUTINE (OUT_OF_ORDER);

  10832  1 000034   000000 630400 2                  EPPR0   0
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:690  
         1 000035   000000 220000 xsym               LDX0    XUO_ERROR_ROUTINE
         1 000036   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000037   000000 701010                    TSX1    0,X0
         1 000040   000000 011000                    NOP     0

     5379    10833        %ENDIF;
     5380    10834    2           ALTRETURN;

  10834  1 000041   000000 702200 xent               TSX2  ! X66_AALT

     5381    10835    2           END;
     5382    10836
     5383    10837    1       IF SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER)=ADDR(NIL)

  10837  1 000042   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         1 000043   000000 235100                    LDA     0,,PR0
         1 000044   000003 735000                    ALS     3
         1 000045   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         1 000046   100003 236105                    LDQ     3,AL,PR1
         1 000047   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000050   000170 601000 1                  TNZ     s:10860

     5384    10838    2       THEN DO;

     5385    10839    2           CALL XUM$GET_LRU_ITEM (LRU_VECTOR, PTR2_LRU$) ALTRET (ERR_LRU);

  10839  1 000051   200014 633500                    EPPR3   PTR2_LRU$,,AUTO
         1 000052   200033 453500                    STP3    @NINE_BIT+3,,AUTO
         1 000053   000001 236000 2                  LDQ     1
         1 000054   200032 756100                    STQ     @NINE_BIT+2,,AUTO
         1 000055   200032 630500                    EPPR0   @NINE_BIT+2,,AUTO
         1 000056   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000057   000000 701000 xent               TSX1    XUM$GET_LRU_ITEM
         1 000060   000727 702000 1                  TSX2    ERR

     5386    10840    2           CALL XUO$PURGE_BUFFERS (%TYPPROG,PTR2_LRU$->BUBIN)ALTRET(ERR);

PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:691  
  10840  1 000061   200014 236100                    LDQ     PTR2_LRU$,,AUTO
         1 000062   000002 235000 2                  LDA     2
         1 000063   200032 757100                    STAQ    @NINE_BIT+2,,AUTO
         1 000064   200032 630500                    EPPR0   @NINE_BIT+2,,AUTO
         1 000065   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000066   000000 701000 xent               TSX1    XUO$PURGE_BUFFERS
         1 000067   000727 702000 1                  TSX2    ERR

     5387    10841
     5388    10842    2           SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER) = SECTION_ARRAY.PTR2_LRU$

  10842  1 000070   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         1 000071   000000 235100                    LDA     0,,PR0
         1 000072   000003 735000                    ALS     3
         1 000073   200014 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000074   000000 620005                    EAX0    0,AL
         1 000075   100000 235100                    LDA     0,,PR1
         1 000076   000003 735000                    ALS     3
         1 000077   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000100   300003 236105                    LDQ     3,AL,PR3
         1 000101   300003 756110                    STQ     3,X0,PR3

     5389    10843    2              (PTR2_LRU$->BUBIN);
     5390    10844    2           SECTION_ARRAY.PTR2_RELOCATION_BUF$ (P_SECTION_NUMBER) =

  10844  1 000102   000000 235100                    LDA     0,,PR0
         1 000103   000003 735000                    ALS     3
         1 000104   200014 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000105   000000 620005                    EAX0    0,AL
         1 000106   100000 235100                    LDA     0,,PR1
         1 000107   000003 735000                    ALS     3
         1 000110   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000111   300005 236105                    LDQ     5,AL,PR3
         1 000112   300005 756110                    STQ     5,X0,PR3

     5391    10845    2              SECTION_ARRAY.PTR2_RELOCATION_BUF$ (PTR2_LRU$->BUBIN);
     5392    10846    2           SECTION_ARRAY.PTR2_PROGRAM_BUF$ (P_SECTION_NUMBER) =
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:692  

  10846  1 000113   000000 235100                    LDA     0,,PR0
         1 000114   000003 735000                    ALS     3
         1 000115   200014 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000116   000000 620005                    EAX0    0,AL
         1 000117   100000 235100                    LDA     0,,PR1
         1 000120   000003 735000                    ALS     3
         1 000121   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000122   300004 236105                    LDQ     4,AL,PR3
         1 000123   300004 756110                    STQ     4,X0,PR3

     5393    10847    2              SECTION_ARRAY.PTR2_PROGRAM_BUF$ (PTR2_LRU$->BUBIN);
     5394    10848
     5395    10849    2           SECTION_ARRAY.RELOCATION_CURS (PTR2_LRU$->BUBIN) = 0;

  10849  1 000124   200014 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000125   100000 235100                    LDA     0,,PR1
         1 000126   000003 735000                    ALS     3
         1 000127   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000130   300001 450105                    STZ     1,AL,PR3

     5396    10850    2           SECTION_ARRAY.PROGRAM_CURS (PTR2_LRU$->BUBIN) = 0;

  10850  1 000131   200014 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000132   100000 235100                    LDA     0,,PR1
         1 000133   000003 735000                    ALS     3
         1 000134   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000135   300000 450105                    STZ     0,AL,PR3

     5397    10851    2           SECTION_ARRAY.PTR2_RELOCATION_BUF$ (PTR2_LRU$->BUBIN) = ADDR(NIL);

  10851  1 000136   200014 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000137   100000 235100                    LDA     0,,PR1
         1 000140   000003 735000                    ALS     3
         1 000141   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000142   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000143   300005 756105                    STQ     5,AL,PR3
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:693  

     5398    10852    2           SECTION_ARRAY.PTR2_PROGRAM_BUF$(PTR2_LRU$->BUBIN) = ADDR(NIL);

  10852  1 000144   200014 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000145   100000 235100                    LDA     0,,PR1
         1 000146   000003 735000                    ALS     3
         1 000147   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000150   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000151   300004 756105                    STQ     4,AL,PR3

     5399    10853    2           SECTION_ARRAY.PTR2_LRU$ (PTR2_LRU$->BUBIN) = ADDR(NIL);

  10853  1 000152   200014 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000153   100000 235100                    LDA     0,,PR1
         1 000154   000003 735000                    ALS     3
         1 000155   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000156   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000157   300003 756105                    STQ     3,AL,PR3

     5400    10854    2           SECTION_ARRAY.BUF_OFFSET(PTR2_LRU$->BUBIN) = 0;

  10854  1 000160   200014 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000161   100000 235100                    LDA     0,,PR1
         1 000162   000003 735000                    ALS     3
         1 000163   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000164   300006 450105                    STZ     6,AL,PR3

     5401    10855
     5402    10856    2           PTR2_LRU$->BUBIN = P_SECTION_NUMBER;

  10856  1 000165   200014 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000166   000000 235100                    LDA     0,,PR0
         1 000167   100000 755100                    STA     0,,PR1

     5403    10857    2           END;

     5404    10858         /*  If the offset is not greater than or equal to the offset of the
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:694  
     5405    10859            current section, we must purge! */
     5406    10860    1       IF (P_OFFSET < SECTION_ARRAY.BUF_OFFSET(P_SECTION_NUMBER))

  10860  1 000170   000000 235100                    LDA     0,,PR0
         1 000171   000003 735000                    ALS     3
         1 000172   200004 471500                    LDP1    @P_OFFSET,,AUTO
         1 000173   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000174   100000 236100                    LDQ     0,,PR1
         1 000175   000200 604000 1                  TMI     s:10862
         1 000176   300006 116105                    CMPQ    6,AL,PR3
         1 000177   000207 603000 1                  TRC     s:10866

     5407    10861    2       THEN DO;

     5408    10862    2           CALL XUO$PURGE_BUFFERS (%TYPPROG, P_SECTION_NUMBER) ALTRET (ERR);

  10862  1 000200   200003 236100                    LDQ     @P_SECTION_NUMBER,,AUTO
         1 000201   000002 235000 2                  LDA     2
         1 000202   200032 757100                    STAQ    @NINE_BIT+2,,AUTO
         1 000203   200032 630500                    EPPR0   @NINE_BIT+2,,AUTO
         1 000204   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000205   000000 701000 xent               TSX1    XUO$PURGE_BUFFERS
         1 000206   000727 702000 1                  TSX2    ERR

     5409    10863    2           END;

     5410    10864         /*         This is where we see about purging the buffer because
     5411    10865            new data has more words than will fit in the buffer. */
     5412    10866    1       IF (B_RELOCATION_PAGE_SIZE -

  10866  1 000207   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         1 000210   000000 235100                    LDA     0,,PR0
         1 000211   000003 735000                    ALS     3
         1 000212   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         1 000213   000000 236000 xsym               LDQ     B_RELOCATION_PAGE_SIZE
         1 000214   100001 136105                    SBLQ    1,AL,PR1
         1 000215   000003 116007                    CMPQ    3,DL
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:695  
         1 000216   000260 605000 1                  TPL     s:10894

     5413    10867    1          SECTION_ARRAY.RELOCATION_CURS(P_SECTION_NUMBER) < 3)
     5414    10868    2       THEN DO;

     5415    10869         /* If we have to purge the reloc buffer, we will first see if there
     5416    10870            is lots of program buffer still available and we are generating
     5417    10871            relocs for program words which are going in that buffer. Lots is 1/64 of
     5418    10872            the program buffers size.  64 is chosen since it is a power of 2 and
     5419    10873            a shift is faster than a divide.  If lots of program buffer is not
     5420    10874            available then we will purge both reloc and program buffers.  If
     5421    10875            lots of program is available then we will purge just the reloc
     5422    10876            buffer.
     5423    10877         */
     5424    10878
     5425    10879    2           IF (B_PROGRAM_PAGE_SIZE - SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) >

  10879  1 000217   000000 236000 xsym               LDQ     B_PROGRAM_PAGE_SIZE
         1 000220   100000 136105                    SBLQ    0,AL,PR1
         1 000221   200032 756100                    STQ     @NINE_BIT+2,,AUTO
         1 000222   000000 236000 xsym               LDQ     B_PROGRAM_PAGE_SIZE
         1 000223   000100 506007                    DIV     64,DL
         1 000224   200032 116100                    CMPQ    @NINE_BIT+2,,AUTO
         1 000225   000251 605000 1                  TPL     s:10888
         1 000226   000000 235100                    LDA     0,,PR0
         1 000227   000003 735000                    ALS     3
         1 000230   100000 235105                    LDA     0,AL,PR1
         1 000231   000251 600000 1                  TZE     s:10888
         1 000232   000000 235100                    LDA     0,,PR0
         1 000233   000003 735000                    ALS     3
         1 000234   200004 473500                    LDP3    @P_OFFSET,,AUTO
         1 000235   300000 236100                    LDQ     0,,PR3
         1 000236   100006 136105                    SBLQ    6,AL,PR1
         1 000237   000000 116000 xsym               CMPQ    B_PROGRAM_PAGE_SIZE
         1 000240   000251 605000 1                  TPL     s:10888

     5426    10880    2              B_PROGRAM_PAGE_SIZE / 64) AND
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:696  
     5427    10881    2              ( ( SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) > 0 ) AND
     5428    10882    2              ( B_PROGRAM_PAGE_SIZE > P_OFFSET - SECTION_ARRAY.BUF_OFFSET(
             10882                       P_SECTION_NUMBER) ) )
     5429    10883
     5430    10884    3           THEN DO;

     5431    10885    3               CALL XUO$PURGE_BUFFERS (%TYPRELOC, P_SECTION_NUMBER) ALTRET(ERR);

  10885  1 000241   200003 236100                    LDQ     @P_SECTION_NUMBER,,AUTO
         1 000242   000004 235000 2                  LDA     4
         1 000243   200032 757100                    STAQ    @NINE_BIT+2,,AUTO
         1 000244   200032 630500                    EPPR0   @NINE_BIT+2,,AUTO
         1 000245   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000246   000000 701000 xent               TSX1    XUO$PURGE_BUFFERS
         1 000247   000727 702000 1                  TSX2    ERR

     5432    10886    3               END;

  10886  1 000250   000260 710000 1                  TRA     s:10894

     5433    10887    3           ELSE DO;

     5434    10888    3               CALL XUO$PURGE_BUFFERS (%TYPPROG, P_SECTION_NUMBER) ALTRET(ERR);

  10888  1 000251   200003 236100                    LDQ     @P_SECTION_NUMBER,,AUTO
         1 000252   000002 235000 2                  LDA     2
         1 000253   200032 757100                    STAQ    @NINE_BIT+2,,AUTO
         1 000254   200032 630500                    EPPR0   @NINE_BIT+2,,AUTO
         1 000255   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000256   000000 701000 xent               TSX1    XUO$PURGE_BUFFERS
         1 000257   000727 702000 1                  TSX2    ERR

     5435    10889    3               END;

     5436    10890    2           END;

     5437    10891
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:697  
     5438    10892         /* If this is the first datum written to the buffer then set up min
     5439    10893            offset */
     5440    10894    1       IF (SECTION_ARRAY.RELOCATION_CURS(P_SECTION_NUMBER) = 0 AND

  10894  1 000260   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         1 000261   000000 235100                    LDA     0,,PR0
         1 000262   000003 735000                    ALS     3
         1 000263   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         1 000264   100001 235105                    LDA     1,AL,PR1
         1 000265   000300 601000 1                  TNZ     s:10907
         1 000266   000000 235100                    LDA     0,,PR0
         1 000267   000003 735000                    ALS     3
         1 000270   100000 235105                    LDA     0,AL,PR1
         1 000271   000300 601000 1                  TNZ     s:10907

     5441    10895    1          SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) = 0)
     5442    10896    2       THEN DO;

     5443    10897    2           SECTION_ARRAY.BUF_OFFSET(P_SECTION_NUMBER) = P_OFFSET;

  10897  1 000272   000000 235100                    LDA     0,,PR0
         1 000273   000003 735000                    ALS     3
         1 000274   200004 473500                    LDP3    @P_OFFSET,,AUTO
         1 000275   000000 620005                    EAX0    0,AL
         1 000276   300000 235100                    LDA     0,,PR3
         1 000277   100006 755110                    STA     6,X0,PR1

     5444    10898    2           END;

     5445    10899         /* Write data to the buffer */
     5446    10900         /*
     5447    10901         The following section will determine what kind of relocation
     5448    10902         record needs to be output. Ie.
     5449    10903         1.  One word
     5450    10904         2.  Two word
     5451    10905         3.  Three word
     5452    10906         */
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:698  
     5453    10907    1       BUF_PTR$=PINCRW(SECTION_ARRAY.PTR2_RELOCATION_BUF$(P_SECTION_NUMBER)

  10907  1 000300   000000 235100                    LDA     0,,PR0
         1 000301   000003 735000                    ALS     3
         1 000302   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         1 000303   100001 720105                    LXL0    1,AL,PR1
         1 000304   100005 473505                    LDP3    5,AL,PR1
         1 000305   300000 634510                    EPPR4   0,X0,PR3
         1 000306   200020 454500                    STP4    BUF_PTR$,,AUTO

     5454    10908    1          ,SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER));
     5455    10909    1       DISPLACEMENT = P_OFFSET - SECTION_ARRAY.BUF_OFFSET(P_SECTION_NUMBER);

  10909  1 000307   200004 475500                    LDP5    @P_OFFSET,,AUTO
         1 000310   500000 236100                    LDQ     0,,PR5
         1 000311   100006 136105                    SBLQ    6,AL,PR1
         1 000312   200016 756100                    STQ     DISPLACEMENT,,AUTO

     5456    10910    1       IF ADDR(P_EVAL_OPERATOR)=ADDR(NIL) THEN

  10910  1 000313   200012 236100                    LDQ     @P_EVAL_OPERATOR,,AUTO
         1 000314   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000315   000320 601000 1                  TNZ     s:10913

     5457    10911    1           EVAL_OPERATOR=0;

  10911  1 000316   200022 450100                    STZ     EVAL_OPERATOR,,AUTO
         1 000317   000323 710000 1                  TRA     s:10915

     5458    10912    1       ELSE
     5459    10913    1           EVAL_OPERATOR=P_EVAL_OPERATOR;

  10913  1 000320   200012 476500                    LDP6    @P_EVAL_OPERATOR,,AUTO
         1 000321   600000 235100                    LDA     0,,PR6
         1 000322   200022 755100                    STA     EVAL_OPERATOR,,AUTO

     5460    10914         /**/
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:699  
     5461    10915    1       IF EVAL_OPERATOR>0 OR P_RELOC_OPERATOR>2 OR P_OPERAND>BITBIN('777'O) OR
             10915                P_OPERAND_TYPE=%OPERFREF THEN

  10915  1 000323   200022 235100                    LDA     EVAL_OPERATOR,,AUTO
         1 000324   000341 601000 1                  TNZ     s:10917
         1 000325   200007 473500                    LDP3    @P_RELOC_OPERATOR,,AUTO
         1 000326   300000 235100                    LDA     0,,PR3
         1 000327   000003 115007                    CMPA    3,DL
         1 000330   000341 603000 1                  TRC     s:10917
         1 000331   200006 476500                    LDP6    @P_OPERAND,,AUTO
         1 000332   600000 235100                    LDA     0,,PR6
         1 000333   001000 115007                    CMPA    512,DL
         1 000334   000341 603000 1                  TRC     s:10917
         1 000335   200005 477500                    LDP7    @P_OPERAND_TYPE,,AUTO
         1 000336   700000 235100                    LDA     0,,PR7
         1 000337   000017 115007                    CMPA    15,DL
         1 000340   000344 601000 1                  TNZ     s:10920

     5462    10916    2       DO;

     5463    10917    2           TEMP = 5;

  10917  1 000341   000005 235007                    LDA     5,DL
         1 000342   200021 755100                    STA     TEMP,,AUTO

     5464    10918    2           END;

  10918  1 000343   000464 710000 1                  TRA     s:10948

     5465    10919         /*     Check for possible one word relocation */
     5466    10920    1       ELSE IF P_STARTING_BIT=0 AND P_ENDING_BIT=(XUO_WORDSIZE/2)-1

  10920  1 000344   200010 470500                    LDP0    @P_STARTING_BIT,,AUTO
         1 000345   000000 235100                    LDA     0,,PR0
         1 000346   000360 601000 1                  TNZ     s:10925
         1 000347   000000 236000 xsym               LDQ     XUO_WORDSIZE
         1 000350   000002 506007                    DIV     2,DL
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:700  
         1 000351   200011 470500                    LDP0    @P_ENDING_BIT,,AUTO
         1 000352   000001 136007                    SBLQ    1,DL
         1 000353   000360 604000 1                  TMI     s:10925
         1 000354   000000 116100                    CMPQ    0,,PR0
         1 000355   000360 601000 1                  TNZ     s:10925

     5467    10921    2           THEN DO;

     5468    10922    2               TEMP = 0;

  10922  1 000356   200021 450100                    STZ     TEMP,,AUTO

     5469    10923    2               END;

  10923  1 000357   000464 710000 1                  TRA     s:10948

     5470    10924    1           ELSE
     5471    10925    1               IF P_STARTING_BIT=XUO_WORDSIZE/2 AND P_ENDING_BIT=XUO_WORDSIZE-1

  10925  1 000360   000000 236000 xsym               LDQ     XUO_WORDSIZE
         1 000361   000002 506007                    DIV     2,DL
         1 000362   200010 470500                    LDP0    @P_STARTING_BIT,,AUTO
         1 000363   000000 116003                    CMPQ    0,DU
         1 000364   000400 604000 1                  TMI     s:10930
         1 000365   000000 116100                    CMPQ    0,,PR0
         1 000366   000400 601000 1                  TNZ     s:10930
         1 000367   200011 470500                    LDP0    @P_ENDING_BIT,,AUTO
         1 000370   000000 236000 xsym               LDQ     XUO_WORDSIZE
         1 000371   000001 136007                    SBLQ    1,DL
         1 000372   000400 604000 1                  TMI     s:10930
         1 000373   000000 116100                    CMPQ    0,,PR0
         1 000374   000400 601000 1                  TNZ     s:10930

     5472    10926    2               THEN DO;

     5473    10927    2                   TEMP = 1;

PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:701  
  10927  1 000375   000001 235007                    LDA     1,DL
         1 000376   200021 755100                    STA     TEMP,,AUTO

     5474    10928    2                   END;

  10928  1 000377   000464 710000 1                  TRA     s:10948

     5475    10929    1               ELSE
     5476    10930    1                   IF P_STARTING_BIT=24 AND P_ENDING_BIT=35 AND XUO_WORDSIZE=36

  10930  1 000400   200010 470500                    LDP0    @P_STARTING_BIT,,AUTO
         1 000401   000000 235100                    LDA     0,,PR0
         1 000402   000030 115007                    CMPA    24,DL
         1 000403   000416 601000 1                  TNZ     s:10935
         1 000404   200011 470500                    LDP0    @P_ENDING_BIT,,AUTO
         1 000405   000000 235100                    LDA     0,,PR0
         1 000406   000043 115007                    CMPA    35,DL
         1 000407   000416 601000 1                  TNZ     s:10935
         1 000410   000000 236000 xsym               LDQ     XUO_WORDSIZE
         1 000411   000044 116007                    CMPQ    36,DL
         1 000412   000416 601000 1                  TNZ     s:10935

     5477    10931    2                   THEN DO;

     5478    10932    2                       TEMP = 2;

  10932  1 000413   000002 235007                    LDA     2,DL
         1 000414   200021 755100                    STA     TEMP,,AUTO

     5479    10933    2                       END;

  10933  1 000415   000464 710000 1                  TRA     s:10948

     5480    10934    1                   ELSE
     5481    10935    1                      IF (P_STARTING_BIT=3 AND P_ENDING_BIT=17 AND XUO_WORDSIZE=36) OR

  10935  1 000416   200010 470500                    LDP0    @P_STARTING_BIT,,AUTO
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:702  
         1 000417   000000 235100                    LDA     0,,PR0
         1 000420   000003 115007                    CMPA    3,DL
         1 000421   000431 601000 1                  TNZ     s:10935+11
         1 000422   200011 470500                    LDP0    @P_ENDING_BIT,,AUTO
         1 000423   000000 235100                    LDA     0,,PR0
         1 000424   000021 115007                    CMPA    17,DL
         1 000425   000431 601000 1                  TNZ     s:10935+11
         1 000426   000000 236000 xsym               LDQ     XUO_WORDSIZE
         1 000427   000044 116007                    CMPQ    36,DL
         1 000430   000443 600000 1                  TZE     s:10938
         1 000431   200010 470500                    LDP0    @P_STARTING_BIT,,AUTO
         1 000432   000000 235100                    LDA     0,,PR0
         1 000433   000446 601000 1                  TNZ     s:10941
         1 000434   200011 470500                    LDP0    @P_ENDING_BIT,,AUTO
         1 000435   000000 235100                    LDA     0,,PR0
         1 000436   000037 115007                    CMPA    31,DL
         1 000437   000446 601000 1                  TNZ     s:10941
         1 000440   000000 236000 xsym               LDQ     XUO_WORDSIZE
         1 000441   000020 116007                    CMPQ    16,DL
         1 000442   000446 601000 1                  TNZ     s:10941

     5482    10936    1                          (P_STARTING_BIT=0 AND P_ENDING_BIT=31 AND XUO_WORDSIZE=16)
     5483    10937    2                       THEN DO;

     5484    10938    2                           TEMP = 3;

  10938  1 000443   000003 235007                    LDA     3,DL
         1 000444   200021 755100                    STA     TEMP,,AUTO

     5485    10939    2                           END;

  10939  1 000445   000464 710000 1                  TRA     s:10948

     5486    10940    1                       ELSE
     5487    10941    1                           IF P_STARTING_BIT=0 AND P_ENDING_BIT=XUO_WORDSIZE-1

  10941  1 000446   200010 470500                    LDP0    @P_STARTING_BIT,,AUTO
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:703  
         1 000447   000000 235100                    LDA     0,,PR0
         1 000450   000462 601000 1                  TNZ     s:10946
         1 000451   200011 470500                    LDP0    @P_ENDING_BIT,,AUTO
         1 000452   000000 236000 xsym               LDQ     XUO_WORDSIZE
         1 000453   000001 136007                    SBLQ    1,DL
         1 000454   000462 604000 1                  TMI     s:10946
         1 000455   000000 116100                    CMPQ    0,,PR0
         1 000456   000462 601000 1                  TNZ     s:10946

     5488    10942    2                           THEN DO;

     5489    10943    2                               TEMP = 4;

  10943  1 000457   000004 235007                    LDA     4,DL
         1 000460   200021 755100                    STA     TEMP,,AUTO

     5490    10944    2                               END;

  10944  1 000461   000464 710000 1                  TRA     s:10948

     5491    10945    2                           ELSE DO;

     5492    10946    2                               TEMP = 5;

  10946  1 000462   000005 235007                    LDA     5,DL
         1 000463   200021 755100                    STA     TEMP,,AUTO

     5493    10947    2                               END; /* Of all this nonsense! */

     5494    10948    2       DO CASE (TEMP);

  10948  1 000464   200021 235100                    LDA     TEMP,,AUTO
         1 000465   000005 115007                    CMPA    5,DL
         1 000466   000470 602005 1                  TNC     s:10948+4,AL
         1 000467   000555 710000 1                  TRA     s:10967
         1 000470   000475 710000 1                  TRA     s:10951
         1 000471   000475 710000 1                  TRA     s:10951
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:704  
         1 000472   000475 710000 1                  TRA     s:10951
         1 000473   000475 710000 1                  TRA     s:10951
         1 000474   000475 710000 1                  TRA     s:10951

     5495    10949    2       CASE (0,1,2,3,4);

     5496    10950         /* The following handles the case of one word relocation. */
     5497    10951    2           B$RELOC1.FIELD = TEMP;

  10951  1 000475   200021 236100                    LDQ     TEMP,,AUTO
         1 000476   000033 736000                    QLS     27
         1 000477   400000 676100                    ERQ     0,,PR4
         1 000500   017000 376003                    ANQ     7680,DU
         1 000501   400000 656100                    ERSQ    0,,PR4

     5498    10952    2           B$RELOC1.OPNDTYP=P_OPERAND_TYPE;

  10952  1 000502   200005 470500                    LDP0    @P_OPERAND_TYPE,,AUTO
         1 000503   000000 236100                    LDQ     0,,PR0
         1 000504   000040 736000                    QLS     32
         1 000505   400000 676100                    ERQ     0,,PR4
         1 000506   740000 376003                    ANQ     -16384,DU
         1 000507   400000 656100                    ERSQ    0,,PR4

     5499    10953    2           B$RELOC1.OP=BINBIT(P_RELOC_OPERATOR-1,1);

  10953  1 000510   200007 471500                    LDP1    @P_RELOC_OPERATOR,,AUTO
         1 000511   100000 236100                    LDQ     0,,PR1
         1 000512   000001 136007                    SBLQ    1,DL
         1 000513   000043 736000                    QLS     35
         1 000514   000004 772000                    QRL     4
         1 000515   400000 676100                    ERQ     0,,PR4
         1 000516   020000 376003                    ANQ     8192,DU
         1 000517   400000 656100                    ERSQ    0,,PR4

     5500    10954    2           IF COMPRESS_9_TO_8

PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:705  
  10954  1 000520   200023 234100                    SZN     COMPRESS_9_TO_8,,AUTO
         1 000521   000535 605000 1                  TPL     s:10960

     5501    10955    3           THEN DO;

     5502    10956    3               CALL COMPRESS (OPERAND, P_OPERAND);

  10956  1 000522   200006 236100                    LDQ     @P_OPERAND,,AUTO
         1 000523   200030 756100                    STQ     @EIGHT_BIT+1,,AUTO
         1 000524   200024 633500                    EPPR3   OPERAND,,AUTO
         1 000525   200027 453500                    STP3    OPERAND+3,,AUTO
         1 000526   000730 701000 1                  TSX1    COMPRESS
         1 000527   000000 011000                    NOP     0

     5503    10957    3               B$RELOC1.OPERAND = OPERAND; /* I doubt this will ever be used */

  10957  1 000530   200020 470500                    LDP0    BUF_PTR$,,AUTO
         1 000531   200024 236100                    LDQ     OPERAND,,AUTO
         1 000532   000022 736000                    QLS     18
         1 000533   000000 552120                    STBQ    0,'20'O,PR0

     5504    10958    3               END;

  10958  1 000534   000541 710000 1                  TRA     s:10962

     5505    10959    3           ELSE DO;

     5506    10960    3               B$RELOC1.OPERAND = P_OPERAND;

  10960  1 000535   200006 473500                    LDP3    @P_OPERAND,,AUTO
         1 000536   300000 236100                    LDQ     0,,PR3
         1 000537   000022 736000                    QLS     18
         1 000540   400000 552120                    STBQ    0,'20'O,PR4

     5507    10961    3               END;

     5508    10962    2           B$RELOC1.DISP = DISPLACEMENT;
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:706  

  10962  1 000541   200016 720100                    LXL0    DISPLACEMENT,,AUTO
         1 000542   200020 470500                    LDP0    BUF_PTR$,,AUTO
         1 000543   000000 440100                    SXL0    0,,PR0

     5509    10963    2           SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) =

  10963  1 000544   200003 471500                    LDP1    @P_SECTION_NUMBER,,AUTO
         1 000545   100000 235100                    LDA     0,,PR1
         1 000546   000003 735000                    ALS     3
         1 000547   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000550   000000 621005                    EAX1    0,AL
         1 000551   300001 235105                    LDA     1,AL,PR3
         1 000552   000001 035007                    ADLA    1,DL
         1 000553   300001 755111                    STA     1,X1,PR3
         1 000554   000671 710000 1                  TRA     s:11002

     5510    10964    2              SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) +1;
     5511    10965    2       CASE (5,ELSE);

     5512    10966         /*The following handles the case of two/three word relocation.*/
     5513    10967    2           B$RELOC2.MBZ = 0;

  10967  1 000555   000000 236003                    LDQ     0,DU
         1 000556   400000 752140                    STCQ    0,'40'O,PR4

     5514    10968    2           B$RELOC2.OPNDTYP=P_OPERAND_TYPE;

  10968  1 000557   200005 470500                    LDP0    @P_OPERAND_TYPE,,AUTO
         1 000560   000000 236100                    LDQ     0,,PR0
         1 000561   000032 736000                    QLS     26
         1 000562   400000 676100                    ERQ     0,,PR4
         1 000563   007400 376003                    ANQ     3840,DU
         1 000564   400000 656100                    ERSQ    0,,PR4

     5515    10969    2           B$RELOC2.RELOCOP=P_RELOC_OPERATOR;

PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:707  
  10969  1 000565   200007 471500                    LDP1    @P_RELOC_OPERATOR,,AUTO
         1 000566   100000 236100                    LDQ     0,,PR1
         1 000567   000022 736000                    QLS     18
         1 000570   400000 676100                    ERQ     0,,PR4
         1 000571   000017 376003                    ANQ     15,DU
         1 000572   400000 656100                    ERSQ    0,,PR4

     5516    10970    2           IF COMPRESS_9_TO_8

  10970  1 000573   200023 234100                    SZN     COMPRESS_9_TO_8,,AUTO
         1 000574   000607 605000 1                  TPL     s:10976

     5517    10971    3           THEN DO;

     5518    10972    3               CALL COMPRESS (OPERAND, P_OPERAND);

  10972  1 000575   200006 236100                    LDQ     @P_OPERAND,,AUTO
         1 000576   200030 756100                    STQ     @EIGHT_BIT+1,,AUTO
         1 000577   200024 633500                    EPPR3   OPERAND,,AUTO
         1 000600   200027 453500                    STP3    OPERAND+3,,AUTO
         1 000601   000730 701000 1                  TSX1    COMPRESS
         1 000602   000000 011000                    NOP     0

     5519    10973    3               B$RELOC2.OPERAND = OPERAND;

  10973  1 000603   200024 720100                    LXL0    OPERAND,,AUTO
         1 000604   200020 470500                    LDP0    BUF_PTR$,,AUTO
         1 000605   000000 440100                    SXL0    0,,PR0

     5520    10974    3               END;

  10974  1 000606   000612 710000 1                  TRA     s:10977

     5521    10975    2           ELSE
     5522    10976    2               B$RELOC2.OPERAND = P_OPERAND;

  10976  1 000607   200006 473500                    LDP3    @P_OPERAND,,AUTO
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:708  
         1 000610   300000 720100                    LXL0    0,,PR3
         1 000611   400000 440100                    SXL0    0,,PR4

     5523    10977    2           B$RELOC2.DISP = DISPLACEMENT;

  10977  1 000612   200016 720100                    LXL0    DISPLACEMENT,,AUTO
         1 000613   200020 470500                    LDP0    BUF_PTR$,,AUTO
         1 000614   000001 740100                    STX0    1,,PR0

     5524    10978    2           B$RELOC2.STBIT=P_STARTING_BIT;

  10978  1 000615   200010 471500                    LDP1    @P_STARTING_BIT,,AUTO
         1 000616   100000 236100                    LDQ     0,,PR1
         1 000617   000011 736000                    QLS     9
         1 000620   000001 552110                    STBQ    1,'10'O,PR0

     5525    10979    2           B$RELOC2.ENDBIT=P_ENDING_BIT;

  10979  1 000621   200011 473500                    LDP3    @P_ENDING_BIT,,AUTO
         1 000622   300000 236100                    LDQ     0,,PR3
         1 000623   000001 552104                    STBQ    1,'04'O,PR0

     5526    10980    2           B$RELOC2.EVALOP=EVAL_OPERATOR;

  10980  1 000624   200022 236100                    LDQ     EVAL_OPERATOR,,AUTO
         1 000625   000026 736000                    QLS     22
         1 000626   000000 676100                    ERQ     0,,PR0
         1 000627   000360 376003                    ANQ     240,DU
         1 000630   000000 656100                    ERSQ    0,,PR0

     5527    10981    2           IF EVAL_OPERATOR=0 THEN

  10981  1 000631   200022 235100                    LDA     EVAL_OPERATOR,,AUTO
         1 000632   000644 601000 1                  TNZ     s:10992

     5528    10982         /*
     5529    10983            Two word relocation.
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:709  
     5530    10984            */
     5531    10985    3           DO;

     5532    10986    3               SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) =

  10986  1 000633   200003 474500                    LDP4    @P_SECTION_NUMBER,,AUTO
         1 000634   400000 235100                    LDA     0,,PR4
         1 000635   000003 735000                    ALS     3
         1 000636   000000 475400 xsym               LDP5    PTR2_SECTION_ARRAY$
         1 000637   000000 621005                    EAX1    0,AL
         1 000640   500001 235105                    LDA     1,AL,PR5
         1 000641   000002 035007                    ADLA    2,DL
         1 000642   500001 755111                    STA     1,X1,PR5

     5533    10987    3                  SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) +2;
     5534    10988    3               END;

  10988  1 000643   000671 710000 1                  TRA     s:11002

     5535    10989    2           ELSE
     5536    10990         /*      Three word relocation */
     5537    10991    3           DO;

     5538    10992    3               IF COMPRESS_9_TO_8

  10992  1 000644   200023 234100                    SZN     COMPRESS_9_TO_8,,AUTO
         1 000645   000656 605000 1                  TPL     s:10996

     5539    10993    3               THEN
     5540    10994    3                   CALL COMPRESS (B$RELOC2.VALUE, P_VALUE);

  10994  1 000646   200013 236100                    LDQ     @P_VALUE,,AUTO
         1 000647   200030 756100                    STQ     @EIGHT_BIT+1,,AUTO
         1 000650   200020 236100                    LDQ     BUF_PTR$,,AUTO
         1 000651   000002 036003                    ADLQ    2,DU
         1 000652   200027 756100                    STQ     OPERAND+3,,AUTO
         1 000653   000730 701000 1                  TSX1    COMPRESS
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:710  
         1 000654   000000 011000                    NOP     0
         1 000655   000661 710000 1                  TRA     s:10997

     5541    10995    3               ELSE
     5542    10996    3                   B$RELOC2.VALUE = P_VALUE;

  10996  1 000656   200013 474500                    LDP4    @P_VALUE,,AUTO
         1 000657   400000 235100                    LDA     0,,PR4
         1 000660   000002 755100                    STA     2,,PR0

     5543    10997    3               SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) =

  10997  1 000661   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         1 000662   000000 235100                    LDA     0,,PR0
         1 000663   000003 735000                    ALS     3
         1 000664   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         1 000665   000000 620005                    EAX0    0,AL
         1 000666   100001 235105                    LDA     1,AL,PR1
         1 000667   000003 035007                    ADLA    3,DL
         1 000670   100001 755110                    STA     1,X0,PR1

     5544    10998    3                  SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) +3;
     5545    10999    3               END;

     5546    11000    2           END; /* Do case */

     5547    11001         /* Update the lru_list */
     5548    11002    1       IF XUO_MOST_RECENT_SECTION ~= P_SECTION_NUMBER

  11002  1 000671   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         1 000672   000000 236000 xsym               LDQ     XUO_MOST_RECENT_SECTION
         1 000673   000676 604000 1                  TMI     s:11004
         1 000674   000000 116100                    CMPQ    0,,PR0
         1 000675   000715 600000 1                  TZE     s:11007

     5549    11003    2       THEN DO;

PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:711  
     5550    11004    2          CALL XUM$MAKE_ITEM_MRU (LRU_VECTOR, SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER
             11004                    )) ALTRET (ERR_LRU);

  11004  1 000676   000000 235100                    LDA     0,,PR0
         1 000677   000003 735000                    ALS     3
         1 000700   000044 733000                    LRS     36
         1 000701   000022 736000                    QLS     18
         1 000702   000003 036003                    ADLQ    3,DU
         1 000703   000000 036000 xsym               ADLQ    PTR2_SECTION_ARRAY$
         1 000704   000001 235000 2                  LDA     1
         1 000705   200032 757100                    STAQ    @NINE_BIT+2,,AUTO
         1 000706   200032 630500                    EPPR0   @NINE_BIT+2,,AUTO
         1 000707   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000710   000000 701000 xent               TSX1    XUM$MAKE_ITEM_MRU
         1 000711   000727 702000 1                  TSX2    ERR

     5551    11005    2           XUO_MOST_RECENT_SECTION = P_SECTION_NUMBER;

  11005  1 000712   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         1 000713   000000 235100                    LDA     0,,PR0
         1 000714   000000 755000 xsym               STA     XUO_MOST_RECENT_SECTION

     5552    11006    2           END;

     5553    11007    1       SECTION_ARRAY.MAX_PROG_RELOC(P_SECTION_NUMBER) = MAXIMUM

  11007  1 000715   000000 235100                    LDA     0,,PR0
         1 000716   000003 735000                    ALS     3
         1 000717   200004 471500                    LDP1    @P_OFFSET,,AUTO
         1 000720   100000 236100                    LDQ     0,,PR1
         1 000721   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000722   300002 116105                    CMPQ    2,AL,PR3
         1 000723   000725 605000 1                  TPL     s:11007+8
         1 000724   300002 236105                    LDQ     2,AL,PR3
         1 000725   300002 756105                    STQ     2,AL,PR3

     5554    11008    1          (SECTION_ARRAY.MAX_PROG_RELOC(P_SECTION_NUMBER),P_OFFSET);
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:712  
     5555    11009    1       RETURN;

  11009  1 000726   000000 702200 xent               TSX2  ! X66_ARET

  11007  1 000727                       ERR          null
  11007  1 000727                       ERR_LRU      null
     5556    11010    1   ERR: ;
     5557    11011    1   ERR_LRU: ;
     5558    11012    1       RETURN;

  11012  1 000727   000000 702200 xent               TSX2  ! X66_ARET

     5559    11013        %EJECT;
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:713  
     5560    11014            %PAGE (ARG=COMPRESS 9 BIT TEXT TO 8 BITS);

             11027    1   /*******************************************************************************
             11028    1   *                                                                              *
             11029    1   *        COMPRESS 9 BIT TEXT TO 8 BITS              COMPRESS 9 BIT TEXT TO 8 BITS *
             11030    1   *                                                                              *
             11031    1   *******************************************************************************/

     5561    11035    1   COMPRESS: PROC (EIGHT_BIT, NINE_BIT);

  11035  1 000730   200026 741300       COMPRESS     STX1  ! OPERAND+2,,AUTO

     5562    11036
     5563    11037    2   DCL 1 EIGHT_BIT ALIGNED,
     5564    11038    2         2 B1 UBIN (8) UNAL,
     5565    11039    2         2 B2 UBIN (8) UNAL,
     5566    11040    2         2 B3 UBIN (8) UNAL,
     5567    11041    2         2 B4 UBIN (8) UNAL,
     5568    11042    2         2 * BIT (4);
     5569    11043
     5570    11044    2   DCL 1 NINE_BIT ALIGNED,
     5571    11045    2         2 B1 UBIN BYTE CALIGNED,
     5572    11046    2         2 B2 UBIN BYTE CALIGNED,
     5573    11047    2         2 B3 UBIN BYTE CALIGNED,
     5574    11048    2         2 B4 UBIN BYTE CALIGNED;
     5575    11049
     5576    11050    2       EIGHT_BIT = '0'B;

  11050  1 000731   200027 470500                    LDP0    @EIGHT_BIT,,AUTO
         1 000732   000000 450100                    STZ     0,,PR0

     5577    11051
     5578    11052    2       EIGHT_BIT.B1 = NINE_BIT.B1;

  11052  1 000733   200030 471500                    LDP1    @NINE_BIT,,AUTO
         1 000734   100000 236100                    LDQ     0,,PR1
         1 000735   000001 736000                    QLS     1
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:714  
         1 000736   000000 676100                    ERQ     0,,PR0
         1 000737   776000 376003                    ANQ     -1024,DU
         1 000740   000000 656100                    ERSQ    0,,PR0

     5579    11053    2       EIGHT_BIT.B2 = NINE_BIT.B2;

  11053  1 000741   100000 236100                    LDQ     0,,PR1
         1 000742   000002 736000                    QLS     2
         1 000743   000000 676100                    ERQ     0,,PR0
         1 000744   001774 376003                    ANQ     1020,DU
         1 000745   000000 656100                    ERSQ    0,,PR0

     5580    11054    2       EIGHT_BIT.B3 = NINE_BIT.B3;

  11054  1 000746   100000 236100                    LDQ     0,,PR1
         1 000747   000003 736000                    QLS     3
         1 000750   000000 676100                    ERQ     0,,PR0
         1 000751   000005 376000 2                  ANQ     5
         1 000752   000000 656100                    ERSQ    0,,PR0

     5581    11055    2       EIGHT_BIT.B4 = NINE_BIT.B4;

  11055  1 000753   100000 236100                    LDQ     0,,PR1
         1 000754   000004 736000                    QLS     4
         1 000755   000000 676100                    ERQ     0,,PR0
         1 000756   007760 376007                    ANQ     4080,DL
         1 000757   000000 656100                    ERSQ    0,,PR0

     5582    11056
     5583    11057    2       RETURN;

  11057  1 000760   200026 221300                    LDX1  ! OPERAND+2,,AUTO
         1 000761   000001 702211                    TSX2  ! 1,X1
     5584    11058
     5585    11059    2   END COMPRESS;
     5586    11060
     5587    11061
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:715  
     5588    11062    1   END XUO$RELOC;
     5589    11063        %EOD;

PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:716  
--  Include file information  --

   XUM_ENTRIES_C.:E05TOU  is referenced.
   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$RELOC.
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:717  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    27-0-0/w PTR         r     1 @EIGHT_BIT                30-0-0/w PTR         r     1 @NINE_BIT
    11-0-0/w PTR         r     1 @P_ENDING_BIT             12-0-0/w PTR         r     1 @P_EVAL_OPERATOR
     4-0-0/w PTR         r     1 @P_OFFSET                  6-0-0/w PTR         r     1 @P_OPERAND
     5-0-0/w PTR         r     1 @P_OPERAND_TYPE            7-0-0/w PTR         r     1 @P_RELOC_OPERATOR
     3-0-0/w PTR         r     1 @P_SECTION_NUMBER         10-0-0/w PTR         r     1 @P_STARTING_BIT
    13-0-0/w PTR         r     1 @P_VALUE                  20-0-0/w PTR         r     1 BUF_PTR$
    23-0-0/b BIT         r     1 COMPRESS_9_TO_8           16-0-0/w UBIN        r     1 DISPLACEMENT
    *0-0-0/w STRC        r     1 EIGHT_BIT                 22-0-0/w UBIN        r     1 EVAL_OPERATOR
    *0-0-0/w STRC        r     1 NINE_BIT                  24-0-0/w UBIN        r     1 OPERAND
    14-0-0/w PTR         r     1 PTR2_LRU$                 *0-0-0/w UBIN        r     1 P_ENDING_BIT
    *0-0-0/w UBIN        r     1 P_EVAL_OPERATOR           *0-0-0/w SBIN        r     1 P_OFFSET
    *0-0-0/w UBIN        r     1 P_OPERAND                 *0-0-0/w UBIN        r     1 P_OPERAND_TYPE
    *0-0-0/w UBIN        r     1 P_RELOC_OPERATOR          *0-0-0/w UBIN        r     1 P_SECTION_NUMBER
    *0-0-0/w UBIN        r     1 P_STARTING_BIT            *0-0-0/w UBIN        r     1 P_VALUE
    21-0-0/w UBIN        r     1 TEMP

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 B_PROGRAM_PAGE_SIZE
     0-0-0/w SBIN        r     1 B_RELOCATION_PAGE_SIZE
     0-0-0/b BIT         r     1 B_TRUST_ME                 0-0-0/d VECT        r     1 LRU_VECTOR
     0-0-0/w STRC        r     1 OUT_OF_ORDER               0-0-0/w PTR         r     1 PTR2_SECTION_ARRAY$
     0-0-0/w EPTR        r     1 XUO_ERROR_ROUTINE
     0-0-0/w SBIN        r     1 XUO_MOST_RECENT_SECTION
     0-0-0/w SBIN        r     1 XUO_WORDSIZE

  ****  BASED and DCB variables  ****
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:718  

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 B$RELOC1                   0-0-0/w STRC(108)   r     1 B$RELOC2
     0-0-0/w UBIN        r     1 BUBIN
     0-0-0/w STRC(288)   r     1 SECTION_ARRAY(0:0)


   Procedure XUO$RELOC requires 498 words for executable code.
   Procedure XUO$RELOC requires 28 words of local(AUTO) storage.
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:719  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:720  
          MINI XREF LISTING

B$RELOC1.DISP
     10490**DCL     10962<<ASSIGN
B$RELOC1.FIELD
     10478**DCL     10951<<ASSIGN
B$RELOC1.OP
     10473**DCL     10953<<ASSIGN
B$RELOC1.OPERAND
     10485**DCL     10957<<ASSIGN  10960<<ASSIGN
B$RELOC1.OPNDTYP
     10465**DCL     10952<<ASSIGN
B$RELOC2.DISP
     10547**DCL     10977<<ASSIGN
B$RELOC2.ENDBIT
     10553**DCL     10979<<ASSIGN
B$RELOC2.EVALOP
     10506**DCL     10980<<ASSIGN
B$RELOC2.MBZ
     10496**DCL     10967<<ASSIGN
B$RELOC2.OPERAND
     10542**DCL     10973<<ASSIGN  10976<<ASSIGN
B$RELOC2.OPNDTYP
     10498**DCL     10968<<ASSIGN
B$RELOC2.RELOCOP
     10526**DCL     10969<<ASSIGN
B$RELOC2.STBIT
     10550**DCL     10978<<ASSIGN
B$RELOC2.VALUE
     10556**DCL     10994<>CALL    10996<<ASSIGN
BUBIN
     10640**DCL     10840<>CALL    10842>>ASSIGN  10844>>ASSIGN  10846>>ASSIGN  10849>>ASSIGN  10850>>ASSIGN
     10851>>ASSIGN  10852>>ASSIGN  10853>>ASSIGN  10854>>ASSIGN  10856<<ASSIGN
BUF_PTR$
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:721  
     10668**DCL     10464--IMP-PTR 10495--IMP-PTR 10907<<ASSIGN  10951>>ASSIGN  10952>>ASSIGN  10953>>ASSIGN
     10957>>ASSIGN  10960>>ASSIGN  10962>>ASSIGN  10967>>ASSIGN  10968>>ASSIGN  10969>>ASSIGN  10973>>ASSIGN
     10976>>ASSIGN  10977>>ASSIGN  10978>>ASSIGN  10979>>ASSIGN  10980>>ASSIGN  10994>>CALL    10996>>ASSIGN
B_PROGRAM_PAGE_SIZE
     10610**DCL     10879>>IF      10879>>IF      10879>>IF
B_RELOCATION_PAGE_SIZE
     10461**DCL     10866>>IF
B_TRUST_ME
     10573**DCL     10826>>IF
COMPRESS
     11035**PROC    10956--CALL    10972--CALL    10994--CALL
COMPRESS_9_TO_8
     10671**DCL     10787<<ASSIGN  10797<<ASSIGN  10799<<ASSIGN  10954>>IF      10970>>IF      10992>>IF
DISPLACEMENT
     10666**DCL     10909<<ASSIGN  10962>>ASSIGN  10977>>ASSIGN
EIGHT_BIT IN PROCEDURE COMPRESS
     11037**DCL     11035--PROC    11050<<ASSIGN
EIGHT_BIT.B1 IN PROCEDURE COMPRESS
     11038**DCL     11052<<ASSIGN
EIGHT_BIT.B2 IN PROCEDURE COMPRESS
     11039**DCL     11053<<ASSIGN
EIGHT_BIT.B3 IN PROCEDURE COMPRESS
     11040**DCL     11054<<ASSIGN
EIGHT_BIT.B4 IN PROCEDURE COMPRESS
     11041**DCL     11055<<ASSIGN
ERR
     11007**LABEL   10840--CALLALT 10862--CALLALT 10885--CALLALT 10888--CALLALT
ERR_LRU
     11007**LABEL   10839--CALLALT 11004--CALLALT
EVAL_OPERATOR
     10670**DCL     10911<<ASSIGN  10913<<ASSIGN  10915>>IF      10980>>ASSIGN  10981>>IF
LRU_VECTOR
     10625**DCL     10839<>CALL    11004<>CALL
NINE_BIT IN PROCEDURE COMPRESS
     11044**DCL     11035--PROC
NINE_BIT.B1 IN PROCEDURE COMPRESS
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:722  
     11045**DCL     11052>>ASSIGN
NINE_BIT.B2 IN PROCEDURE COMPRESS
     11046**DCL     11053>>ASSIGN
NINE_BIT.B3 IN PROCEDURE COMPRESS
     11047**DCL     11054>>ASSIGN
NINE_BIT.B4 IN PROCEDURE COMPRESS
     11048**DCL     11055>>ASSIGN
OPERAND
     10672**DCL     10956<>CALL    10957>>ASSIGN  10972<>CALL    10973>>ASSIGN
OUT_OF_ORDER
     10732**DCL     10832<>CALL
PTR2_LRU$
     10642**DCL     10839<>CALL    10840>>CALL    10842>>ASSIGN  10844>>ASSIGN  10846>>ASSIGN  10849>>ASSIGN
     10850>>ASSIGN  10851>>ASSIGN  10852>>ASSIGN  10853>>ASSIGN  10854>>ASSIGN  10856>>ASSIGN
PTR2_SECTION_ARRAY$
     10626**DCL     10629--IMP-PTR 10826>>IF      10837>>IF      10842>>ASSIGN  10842>>ASSIGN  10844>>ASSIGN
     10844>>ASSIGN  10846>>ASSIGN  10846>>ASSIGN  10849>>ASSIGN  10850>>ASSIGN  10851>>ASSIGN  10852>>ASSIGN
     10853>>ASSIGN  10854>>ASSIGN  10860>>IF      10866>>IF      10879>>IF      10879>>IF      10879>>IF
     10894>>IF      10894>>IF      10897>>ASSIGN  10907>>ASSIGN  10907>>ASSIGN  10909>>ASSIGN  10963>>ASSIGN
     10963>>ASSIGN  10986>>ASSIGN  10986>>ASSIGN  10997>>ASSIGN  10997>>ASSIGN  11004>>CALL    11007>>ASSIGN
     11007>>ASSIGN
P_ENDING_BIT
     10383**DCL       132--PROC    10791--ENTRY   10920>>IF      10925>>IF      10930>>IF      10935>>IF
     10935>>IF      10941>>IF      10979>>ASSIGN
P_EVAL_OPERATOR
     10384**DCL       132--PROC    10791--ENTRY   10910--IF      10913>>ASSIGN
P_OFFSET
     10378**DCL       132--PROC    10791--ENTRY   10826>>IF      10860>>IF      10879>>IF      10897>>ASSIGN
     10909>>ASSIGN  11007>>ASSIGN
P_OPERAND
     10380**DCL       132--PROC    10791--ENTRY   10915>>IF      10956<>CALL    10960>>ASSIGN  10972<>CALL
     10976>>ASSIGN
P_OPERAND_TYPE
     10379**DCL       132--PROC    10791--ENTRY   10915>>IF      10952>>ASSIGN  10968>>ASSIGN
P_RELOC_OPERATOR
     10381**DCL       132--PROC    10791--ENTRY   10915>>IF      10953>>ASSIGN  10969>>ASSIGN
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:723  
P_SECTION_NUMBER
     10377**DCL       132--PROC    10791--ENTRY   10826>>IF      10837>>IF      10842>>ASSIGN  10844>>ASSIGN
     10846>>ASSIGN  10856>>ASSIGN  10860>>IF      10862<>CALL    10866>>IF      10879>>IF      10879>>IF
     10879>>IF      10885<>CALL    10888<>CALL    10894>>IF      10894>>IF      10897>>ASSIGN  10907>>ASSIGN
     10907>>ASSIGN  10909>>ASSIGN  10963>>ASSIGN  10963>>ASSIGN  10986>>ASSIGN  10986>>ASSIGN  10997>>ASSIGN
     10997>>ASSIGN  11002>>IF      11004>>CALL    11005>>ASSIGN  11007>>ASSIGN  11007>>ASSIGN
P_STARTING_BIT
     10382**DCL       132--PROC    10791--ENTRY   10920>>IF      10925>>IF      10930>>IF      10935>>IF
     10935>>IF      10941>>IF      10978>>ASSIGN
P_VALUE
     10385**DCL       132--PROC    10791--ENTRY   10994<>CALL    10996>>ASSIGN
RELOC_COMMON
     10795**LABEL   10789--GOTO    10801--GOTO
SECTION_ARRAY.BUF_OFFSET
     10636**DCL     10854<<ASSIGN  10860>>IF      10879>>IF      10897<<ASSIGN  10909>>ASSIGN
SECTION_ARRAY.MAX_PROG_RELOC
     10632**DCL     11007<<ASSIGN  11007>>ASSIGN
SECTION_ARRAY.PROGRAM_CURS
     10630**DCL     10850<<ASSIGN  10879>>IF      10879>>IF      10894>>IF
SECTION_ARRAY.PROG_WORD_COUNT
     10637**DCL     10826>>IF
SECTION_ARRAY.PTR2_LRU$
     10633**DCL     10837>>IF      10842<<ASSIGN  10842>>ASSIGN  10853<<ASSIGN  11004<>CALL
SECTION_ARRAY.PTR2_PROGRAM_BUF$
     10634**DCL     10846<<ASSIGN  10846>>ASSIGN  10852<<ASSIGN
SECTION_ARRAY.PTR2_RELOCATION_BUF$
     10635**DCL     10844<<ASSIGN  10844>>ASSIGN  10851<<ASSIGN  10907>>ASSIGN
SECTION_ARRAY.RELOCATION_CURS
     10631**DCL     10849<<ASSIGN  10866>>IF      10894>>IF      10907>>ASSIGN  10963<<ASSIGN  10963>>ASSIGN
     10986<<ASSIGN  10986>>ASSIGN  10997<<ASSIGN  10997>>ASSIGN
TEMP
     10669**DCL     10917<<ASSIGN  10922<<ASSIGN  10927<<ASSIGN  10932<<ASSIGN  10938<<ASSIGN  10943<<ASSIGN
     10946<<ASSIGN  10948>>DOCASE  10951>>ASSIGN
XUM$GET_LRU_ITEM
     10271**DCL-ENT 10839--CALL
XUM$MAKE_ITEM_MRU
PL6.E3A0      #021=XUO$RELOC File=XUO$BUILD.:E05TSI                              WED 07/30/97 09:34 Page:724  
     10273**DCL-ENT 11004--CALL
XUO$PURGE_BUFFERS
     10694**DCL-ENT 10840--CALL    10862--CALL    10885--CALL    10888--CALL
XUO_ERROR_ROUTINE
     10718**DCL     10830>>IF      10832>>CALL
XUO_MOST_RECENT_SECTION
     10716**DCL     11002>>IF      11005<<ASSIGN
XUO_WORDSIZE
     10717**DCL     10795>>IF      10920>>IF      10925>>IF      10925>>IF      10930>>IF      10935>>IF
     10935>>IF      10941>>IF

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:725  
     5590        1        /*M*     XUO$FRWD_REF   -- THIS MOUDLE WILL HANDLE FORWARD REFERENCE ITEMS*/
     5591        2        /*T***********************************************************/
     5592        3        /*T*                                                         */
     5593        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     5594        5        /*T*                                                         */
     5595        6        /*T***********************************************************/
     5596        7        /*P*
     5597        8
     5598        9        NAME:  XUO$FRWD_REF
     5599       10        XUO$FRWD_REF --Forward References
     5600       11
     5601       12        PURPOSE:  To resolve forward references.
     5602       13
     5603       14        DESCRIPTION:  This routine will position itself to the
     5604       15                  beginning of the control section indicated by
     5605       16                  the input parameter Section Number.  The control
     5606       17                  section will be read sequentially ignoring all
     5607       18                  program records.  When a relocation record is
     5608       19                  found, it will be searched for operands of type
     5609       20                  O'17'.  If no operands of that type are found,
     5610       21                  the next sequential record is read.  If an
     5611       22                  operand type of O'17' is found the routine
     5612       23                  specified by the parameter Lookup Routine will
     5613       24                  be called as follows:
     5614       25                      CALL:  CALL Lookup Routine( Old Operand    UBIN   input
     5615       26                                   Operand Type           UBIN   input
     5616       27                                   New Operand            UBIN   output
     5617       28                                   Relocation operator    SBIN   output
     5618       29                                   Starting Bit           SBIN   output
     5619       30                                   Ending Bit)            SBIN   output
     5620       31                  The called routine must return the correct operand
     5621       32                  value to be used and the correct operand type to be
     5622       33                  used.  If these fields are not modified an operand
     5623       34                  type of 6 (segref) and a value of 0 will be used.
     5624       35
     5625       36                  XUO$FRWD_REF routine will initialize the relocation
     5626       37                  operator, the starting bit and ending bit to -1.
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:726  
     5627       38                  If these fields contain values greater than -1
     5628       39                  then the fields in the relocation directive will be
     5629       40                  updated with the new data.
     5630       41
     5631       42                  If any relocation directives have changed due to
     5632       43                  calling the Lookup Routine, then the relocation
     5633       44                  directive buffer will be rewritten.
     5634       45
     5635       46                  This routine will continue until all relocation
     5636       47                  records have been processed for the specified
     5637       48                  control section.
     5638       49
     5639       50                  If calls to XUO$FRWD_REF are intermixed with calls to
     5640       51                  XUO$PRGM and XUO$RELOC then a minimum of two sets of
     5641       52                  buffers must be specified on the call to XUO$BUFINIT.
     5642       53
     5643       54        */
     5644       55        /*D*
     5645       56
     5646       57        CALL:  CALL XUO$FRWD_REF(Section Number,
     5647       58                          Lookup Routine,
     5648       59                          DCB Pointer)
     5649       60
     5650       61
     5651       62        INPUT:
     5652       63            Section Number      UBIN ALIGNED
     5653       64                                The number of the control section in
     5654       65                                which to resolve forward references.
     5655       66            Lookup Routine      EPTR
     5656       67                                The entry pointer to the routine
     5657       68                                which will look up the operand.
     5658       69            DCB Pointer         PTR
     5659       70                                Pointer to the DCB through which
     5660       71                                the object unit is being written.
     5661       72
     5662       73        OUTPUT:
     5663       74            none
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:727  
     5664       75
     5665       76        B$OBJECT REFERENCE:  none
     5666       77        */
     5667       78        /*B*
     5668       79        GLOBAL DATA:
     5669       80            .
     5670       81        INTERFACE:
     5671       82            XUO$PURGE_BUFFERS
     5672       83            XUO_ERROR_ROUTINE
     5673       84            Lookup Routine
     5674       85
     5675       86        */
     5676       87
     5677       88         /**/
     5678       89        XUO$FRWD_REF: PROC(P_SECTION_NUMBER,P_LOOKUP_ROUTINE,P_DCB_PTR$);
     5679       90         /**/
     5680       91        %INCLUDE ZVA_SYSTEM_FILE;
     5681     6342        %PAGE(ARG=INCLUDES);

              6355    1   /*******************************************************************************
              6356    1   *                                                                              *
              6357    1   *        INCLUDES              INCLUDES                                            *
              6358    1   *                                                                              *
              6359    1   *******************************************************************************/

     5682     6363        %INCLUDE B$OBJECT_C;
     5683     9793        %INCLUDE XUO$OBJ_C;
     5684    10203        %INCLUDE B_ERRORS_C;
     5685    11330        %INCLUDE XUM_ENTRIES_C;
     5686    11350        %XUM_ENTRIES;
     5687    11359        %PAGE(ARG=SUBS);

             11372    1   /*******************************************************************************
             11373    1   *                                                                              *
             11374    1   *        SUBS              SUBS                                                  *
             11375    1   *                                                                              *
             11376    1   *******************************************************************************/
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:728  

     5688    11380        %B$RECORDSUBS;
     5689    11408        %B$RELOCSUBS;
     5690    11438    1   DCL XUO$PURGE_BUFFERS ENTRY (2) ALTRET;
     5691    11439        %B_MULTIBUF_VARS;
     5692    11466        %LOCAL_STUFF;
     5693    11472        %PAGE(ARG=PARAMETERS);

             11485    1   /*******************************************************************************
             11486    1   *                                                                              *
             11487    1   *        PARAMETERS              PARAMETERS                                        *
             11488    1   *                                                                              *
             11489    1   *******************************************************************************/

     5694    11493    1   DCL P_SECTION_NUMBER UBIN;
     5695    11494         /**/
     5696    11495    1   DCL P_LOOKUP_ROUTINE EPTR;
     5697    11496         /**/
     5698    11497    1   DCL P_DCB_PTR$ PTR;
     5699    11498         /**/
     5700    11499        %PAGE(ARG=KEYS);

             11512    1   /*******************************************************************************
             11513    1   *                                                                              *
             11514    1   *        KEYS              KEYS                                                  *
             11515    1   *                                                                              *
             11516    1   *******************************************************************************/

     5701    11520    1   DCL B$FRWDKEY$ PTR SYMREF;
     5702    11521        %B$PRGRELKEY (NAME=B$FRWDKEY,STCLASS="BASED(B$FRWDKEY$)",KEYSIZINIT=,NOTHDINIT=,
             11521            TYPEINIT=);
     5703    11552        %PAGE(ARG=PROGRAM DATA);

             11565    1   /*******************************************************************************
             11566    1   *                                                                              *
             11567    1   *        PROGRAM DATA              PROGRAM DATA                                    *
             11568    1   *                                                                              *
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:729  
             11569    1   *******************************************************************************/

     5704    11573        %B_PROGRAM_POINTERS;
     5705    11588        %PAGE(ARG=RELOCATION DATA);

             11601    1   /*******************************************************************************
             11602    1   *                                                                              *
             11603    1   *        RELOCATION DATA              RELOCATION DATA                              *
             11604    1   *                                                                              *
             11605    1   *******************************************************************************/

     5706    11609        %B_RELOCATION_POINTERS;
     5707    11624        %B$RELOC1 (STCLASS="BASED(RELOCATION_CUR$)");
     5708    11655        %B$RELOC2 (STCLASS="BASED(RELOCATION_CUR$)");
     5709    11722        %PAGE(ARG=LOCAL DATA);

             11735    1   /*******************************************************************************
             11736    1   *                                                                              *
             11737    1   *        LOCAL DATA              LOCAL DATA                                        *
             11738    1   *                                                                              *
             11739    1   *******************************************************************************/

     5710    11743    1   DCL RELOCATION_BASE$ PTR;
     5711    11744         /**/
     5712    11745    1   DCL RELOCATION_CUR$ PTR;
     5713    11746         /**/
     5714    11747    1   DCL RELOCATION_END$ PTR;
     5715    11748         /**/
     5716    11749    1   DCL RELOCATION_SIZE_TIMES_FOUR UBIN;
     5717    11750         /**/
     5718    11751    1   DCL RELOCATION_SIZE UBIN;
     5719    11752         /**/
     5720    11753    1   DCL RELOCATION_WRITE_REQUIRED BIT(1);
     5721    11754         /**/
     5722    11755    1   DCL LOOKUP_ROUTINE EPTR;
     5723    11756         /**/
     5724    11757    1   DCL OLD_OPERAND UBIN;
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:730  
     5725    11758         /**/
     5726    11759    1   DCL A_OPERAND_TYPE UBIN;
     5727    11760         /**/
     5728    11761    1   DCL A_NEW_OPERAND UBIN;
     5729    11762         /**/
     5730    11763    1   DCL A_RELOC_OPERATOR SBIN;
     5731    11764         /**/
     5732    11765    1   DCL A_STARTING_BIT SBIN;
     5733    11766         /**/
     5734    11767    1   DCL A_ENDING_BIT SBIN;
     5735    11768         /**/
     5736    11769    1   DCL OLD_SECOFF UBIN;
     5737    11770
     5738    11771        %PAGE(ARG=FPT/DCB DATA);

             11784    1   /*******************************************************************************
             11785    1   *                                                                              *
             11786    1   *        FPT/DCB DATA              FPT/DCB DATA                                    *
             11787    1   *                                                                              *
             11788    1   *******************************************************************************/

     5739    11792    1   DCL XUO_RELOCATION_READ$ PTR SYMREF;
     5740    11793        %FPT_READ (FPTN=XUO_RELOCATION_READ,STCLASS="BASED(XUO_RELOCATION_READ$)");
     5741    11832    1   DCL XUO_RELOCATION_REWRITE$ PTR SYMREF;
     5742    11833        %FPT_WRITE (FPTN=XUO_RELOCATION_REWRITE,STCLASS="BASED(XUO_RELOCATION_REWRITE$)");
     5743    11864    1   DCL XUO_OU_CLOSE$ PTR SYMREF;
     5744    11865        %FPT_CLOSE (FPTN=XUO_OU_CLOSE,STCLASS="BASED(XUO_OU_CLOSE$)");
     5745    11907        %F$DCB;
     5746    11964         /**/
     5747    11965        %PAGE(ARG=ERROR DATA);

             11978    1   /*******************************************************************************
             11979    1   *                                                                              *
             11980    1   *        ERROR DATA              ERROR DATA                                        *
             11981    1   *                                                                              *
             11982    1   *******************************************************************************/

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:731  
     5748    11986        %B$TCB;
     5749    11989        %B$ALT;
     5750    11997         /**/
     5751    11998    1   DCL B$TCB$ PTR SYMREF;
     5752    11999         /**/
     5753    12000    1   DCL 1 ERROR_CODE,
     5754    12001    1         2 FCG_MID BIT(18),
     5755    12002    1         2 MON BIT(1),
     5756    12003    1         2 CODE UBIN(14) UNAL,
     5757    12004    1         2 SEV UBIN(3) UNAL;
     5758    12005         /**/
     5759    12006        %PAGE(ARG=BASED DATA);

             12019    1   /*******************************************************************************
             12020    1   *                                                                              *
             12021    1   *        BASED DATA              BASED DATA                                        *
             12022    1   *                                                                              *
             12023    1   *******************************************************************************/

     5760    12027    1   DCL 1 BUFFER_CLEAR BASED(RELOCATION_BASE$),
     5761    12028    1         2 * CHAR(RELOCATION_SIZE_TIMES_FOUR);
     5762    12029        %PAGE(ARG=GLOBAL DATA);

             12042    1   /*******************************************************************************
             12043    1   *                                                                              *
             12044    1   *        GLOBAL DATA              GLOBAL DATA                                      *
             12045    1   *                                                                              *
             12046    1   *******************************************************************************/

     5763    12050    1   DCL XUO_OU_UTS UBIN SYMREF;
     5764    12051    1   DCL XUO_ERROR_ROUTINE EPTR SYMREF;
     5765    12052    1   DCL XUO_CLOSE_REQUIRED BIT(1) ALIGNED SYMREF;
     5766    12053    1   DCL XUO_OU_WRITE_REQUIRED BIT(1) ALIGNED SYMREF;
     5767    12054    1   DCL XUO_MOST_RECENT_SECTION SBIN WORD SYMREF;
     5768    12055         /**/
     5769    12056        %PAGE(ARG=ENTRY DCLS);

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:732  
             12069    1   /*******************************************************************************
             12070    1   *                                                                              *
             12071    1   *        ENTRY DCLS              ENTRY DCLS                                        *
             12072    1   *                                                                              *
             12073    1   *******************************************************************************/

     5770    12077    1   DCL XUO$PURGE_PRGM ENTRY;
     5771    12078    1   DCL XUO$PURGE_RELOC ENTRY;
     5772    12079        %PAGE (ARG=CODE);

             12092    1   /*******************************************************************************
             12093    1   *                                                                              *
             12094    1   *        CODE              CODE                                                  *
             12095    1   *                                                                              *
             12096    1   *******************************************************************************/

     5773    12100         /*See if we need to write.
     5774    12101            If not then just exit.
     5775    12102         */
     5776    12103    1       IF NOT XUO_OU_WRITE_REQUIRED THEN
     5777    12104    1           RETURN;
     5778    12105         /*
     5779    12106         Make sure that both the program
     5780    12107         buffer and the relocation buffer
     5781    12108         are empty before we start.
     5782    12109         */
     5783    12110    1       IF SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER)=ADDR(NIL)
     5784    12111    2       THEN DO;
     5785    12112    2           CALL XUM$GET_LRU_ITEM (LRU_VECTOR, PTR2_LRU$) ALTRET (ERR_LRU);
     5786    12113    2           CALL XUO$PURGE_BUFFERS (%TYPPROG,PTR2_LRU$->BUBIN)ALTRET(ERR);
     5787    12114    2           SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER) = SECTION_ARRAY.PTR2_LRU$
     5788    12115    2              (PTR2_LRU$->BUBIN);
     5789    12116    2           SECTION_ARRAY.PTR2_RELOCATION_BUF$ (P_SECTION_NUMBER) =
     5790    12117    2              SECTION_ARRAY.PTR2_RELOCATION_BUF$ (PTR2_LRU$->BUBIN);
     5791    12118    2           SECTION_ARRAY.PTR2_PROGRAM_BUF$ (P_SECTION_NUMBER) =
     5792    12119    2              SECTION_ARRAY.PTR2_PROGRAM_BUF$ (PTR2_LRU$->BUBIN);
     5793    12120
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:733  
     5794    12121    2           SECTION_ARRAY.PROGRAM_CURS (PTR2_LRU$->BUBIN) = 0;
     5795    12122    2           SECTION_ARRAY.RELOCATION_CURS (PTR2_LRU$->BUBIN) = 0;
     5796    12123    2           SECTION_ARRAY.PTR2_PROGRAM_BUF$ (PTR2_LRU$->BUBIN) = ADDR(NIL);
     5797    12124    2           SECTION_ARRAY.PTR2_RELOCATION_BUF$(PTR2_LRU$->BUBIN) = ADDR(NIL);
     5798    12125    2           SECTION_ARRAY.PTR2_LRU$ (PTR2_LRU$->BUBIN) = ADDR(NIL);
     5799    12126    2           SECTION_ARRAY.BUF_OFFSET(PTR2_LRU$->BUBIN) = 0;
     5800    12127
     5801    12128    2           PTR2_LRU$->BUBIN = P_SECTION_NUMBER;
     5802    12129    2           END;
     5803    12130         /*
     5804    12131         This is where we see about purging the buffer because the
     5805    12132         forward ref routine needs this buffer to be empty.
     5806    12133         */
     5807    12134    1       ELSE IF SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) ~= 0
     5808    12135    2           THEN DO;
     5809    12136    2               CALL XUO$PURGE_BUFFERS (%TYPPROG, P_SECTION_NUMBER) ALTRET (ERR);
     5810    12137    2               END;
     5811    12138         /* Delete this buffer from the lru list and put it in
     5812    12139            the very last element of section array which can
     5813    12140            never be accessed since this array is of size = the
     5814    12141            number of sections plus one (I.E. 0 - # sections)
     5815    12142            this is to prevent the buffer being used in the
     5816    12143            middle of forward ref for program data.  The buffer
     5817    12144            is restored later for future use.
     5818    12145         */
     5819    12146    1       CALL XUM$DELETE_ITEM (LRU_VECTOR,SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER))
             12146                ALTRET (ERR_LRU);
     5820    12147
     5821    12148    1       XUO_MOST_RECENT_SECTION = -1;
     5822    12149    1       SECTION_ARRAY.PROGRAM_CURS (B_NUMBER_OF_SECTIONS) = 0;
     5823    12150    1       SECTION_ARRAY.RELOCATION_CURS (B_NUMBER_OF_SECTIONS) = 0;
     5824    12151    1       SECTION_ARRAY.PTR2_PROGRAM_BUF$ (B_NUMBER_OF_SECTIONS) = ADDR(NIL);
     5825    12152    1       SECTION_ARRAY.PTR2_RELOCATION_BUF$(B_NUMBER_OF_SECTIONS) = ADDR(NIL);
     5826    12153    1       SECTION_ARRAY.PTR2_LRU$ (B_NUMBER_OF_SECTIONS) = ADDR(NIL);
     5827    12154    1       SECTION_ARRAY.BUF_OFFSET(B_NUMBER_OF_SECTIONS) = 0;
     5828    12155
     5829    12156    1       SECTION_ARRAY.PTR2_RELOCATION_BUF$ (B_NUMBER_OF_SECTIONS) =
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:734  
     5830    12157    1          SECTION_ARRAY.PTR2_RELOCATION_BUF$ (P_SECTION_NUMBER);
     5831    12158    1       SECTION_ARRAY.PTR2_PROGRAM_BUF$ (B_NUMBER_OF_SECTIONS) =
     5832    12159    1          SECTION_ARRAY.PTR2_PROGRAM_BUF$ (P_SECTION_NUMBER);
     5833    12160
     5834    12161    1       SECTION_ARRAY.PROGRAM_CURS (P_SECTION_NUMBER) = 0;
     5835    12162    1       SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) = 0;
     5836    12163    1       SECTION_ARRAY.PTR2_PROGRAM_BUF$ (P_SECTION_NUMBER) = ADDR(NIL);
     5837    12164    1       SECTION_ARRAY.PTR2_RELOCATION_BUF$(P_SECTION_NUMBER) = ADDR(NIL);
     5838    12165    1       SECTION_ARRAY.PTR2_LRU$ (P_SECTION_NUMBER) = ADDR(NIL);
     5839    12166    1       SECTION_ARRAY.BUF_OFFSET(P_SECTION_NUMBER) = 0;
     5840    12167
     5841    12168    1       LOOKUP_ROUTINE=P_LOOKUP_ROUTINE; /*Localize eptr*/
     5842    12169         /*
     5843    12170         Set up the base key
     5844    12171         */
     5845    12172    1       B$FRWDKEY.KEYSIZ=11;
     5846    12173    1       B$FRWDKEY.NOTHD='777'O;
     5847    12174    1       B$FRWDKEY.UTS=XUO_OU_UTS;
     5848    12175    1       B$FRWDKEY.SECTNUM=P_SECTION_NUMBER;
     5849    12176    1       B$FRWDKEY.OFFSET=0;
     5850    12177    1       B$FRWDKEY.TYPE=%TYPPROG;
     5851    12178    1       B$FRWDKEY.SUBTYPE=%SUBTYPPROG;
     5852    12179    1       B$FRWDKEY.SEQUENCE=0;
     5853    12180         /**/
     5854    12181    1       RELOCATION_BASE$ = SECTION_ARRAY.PTR2_RELOCATION_BUF$(B_NUMBER_OF_SECTIONS);
     5855    12182    1       RELOCATION_SIZE = B_RELOCATION_PAGE_SIZE;
     5856    12183         /**/
     5857    12184         /*
     5858    12185         Set up the fpts
     5859    12186         */
     5860    12187    1       XUO_RELOCATION_READ.BUF_.BUF$=RELOCATION_BASE$;
     5861    12188    1       RELOCATION_SIZE_TIMES_FOUR=RELOCATION_SIZE*4;
     5862    12189    1       XUO_RELOCATION_READ.BUF_.BOUND=RELOCATION_SIZE_TIMES_FOUR-1;
     5863    12190         /**/
     5864    12191    1       XUO_RELOCATION_REWRITE.BUF_.BUF$=RELOCATION_BASE$;
     5865    12192         /**/
     5866    12193         /*
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:735  
     5867    12194         Now read the first record in.
     5868    12195         (using the key, of course)
     5869    12196         */
     5870    12197    1       XUO_RELOCATION_READ.V.KEYS#='1'B;
     5871    12198    1       CALL M$READ(XUO_RELOCATION_READ) ALTRET(IGNORE_ERROR);
     5872    12199    1   IGNORE_ERROR: ;
     5873    12200         /*
     5874    12201         Now we must read sequentially.
     5875    12202         */
     5876    12203    1       XUO_RELOCATION_READ.V.KEYS#='0'B;
     5877    12204         /**/
     5878    12205    2       DO WHILE(B$FRWDKEY.TYPE=%TYPPROG AND B$FRWDKEY.SECTNUM=P_SECTION_NUMBER AND
             12205                B$FRWDKEY.UTS=XUO_OU_UTS);
     5879    12206         /*
     5880    12207         Check to see if this is a program record.
     5881    12208         If not, just skip it.
     5882    12209         */
     5883    12210    2           IF B$FRWDKEY.SUBTYPE=%SUBTYPREL THEN
     5884    12211    3           DO;
     5885    12212    3               RELOCATION_WRITE_REQUIRED='0'B;
     5886    12213    3               RELOCATION_CUR$=RELOCATION_BASE$;
     5887    12214    3               RELOCATION_SIZE=P_DCB_PTR$->F$DCB.ARS#;
     5888    12215    3               RELOCATION_END$=PINCRW(RELOCATION_BASE$,(RELOCATION_SIZE+3)/4);
     5889    12216         /*
     5890    12217         Loop looking at all relocation
     5891    12218         records for an OPERAND_TYPE of
     5892    12219         O'17'.
     5893    12220         */
     5894    12221    4               DO WHILE(RELOCATION_CUR$<RELOCATION_END$);
     5895    12222         /*
     5896    12223         Only two or three word relocation
     5897    12224         directives can contain a  '17'o
     5898    12225         in the operand type.  Therefore,
     5899    12226         just skip any type one relocation
     5900    12227         directives.
     5901    12228         */
     5902    12229    4                   IF B$RELOC2.MBZ=0 THEN
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:736  
     5903    12230    5                   DO; /*Two/three word*/
     5904    12231    5                       IF B$RELOC2.OPNDTYP=%OPERFREF THEN
     5905    12232    6                       DO; /*We found one*/
     5906    12233    6                           OLD_OPERAND=B$RELOC2.OPERAND;
     5907    12234         /*
     5908    12235         Initialize returned variables to a known state
     5909    12236         */
     5910    12237    6                           A_OPERAND_TYPE=%OPERCONST;
     5911    12238    6                           A_NEW_OPERAND=0;
     5912    12239    6                           A_RELOC_OPERATOR=B$RELOC2.RELOCOP;
     5913    12240    6                           A_STARTING_BIT=B$RELOC2.STBIT;
     5914    12241    6                           A_ENDING_BIT=B$RELOC2.ENDBIT;
     5915    12242    6                           OLD_SECOFF=B$RELOC2.DISP+B$FRWDKEY.OFFSET;
     5916    12243
     5917    12244         /*
     5918    12245         Now call the guy and see what he has for us
     5919    12246         */
     5920    12247    6                           CALL LOOKUP_ROUTINE(OLD_OPERAND,A_OPERAND_TYPE,A_NEW_OPERAND
             12247                                    ,
     5921    12248    6                              A_RELOC_OPERATOR,A_STARTING_BIT,A_ENDING_BIT,
     5922    12249    6                              OLD_SECOFF);
     5923    12250         /*
     5924    12251         Build new relocation directive
     5925    12252         */
     5926    12253    6                           B$RELOC2.OPNDTYP=A_OPERAND_TYPE;
     5927    12254    6                           B$RELOC2.OPERAND=A_NEW_OPERAND;
     5928    12255    6                           B$RELOC2.RELOCOP=A_RELOC_OPERATOR;
     5929    12256    6                           B$RELOC2.STBIT=A_STARTING_BIT;
     5930    12257    6                           B$RELOC2.ENDBIT=A_ENDING_BIT;
     5931    12258    6                           RELOCATION_WRITE_REQUIRED='1'B;
     5932    12259         /**/
     5933    12260    6                           END; /*Found one*/
     5934    12261         /*
     5935    12262         Check for two or three words
     5936    12263         */
     5937    12264    5                       IF B$RELOC2.EVALOP>0 THEN
     5938    12265    5                           RELOCATION_CUR$=PINCRW(RELOCATION_CUR$,3);
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:737  
     5939    12266    5                       ELSE
     5940    12267    5                           RELOCATION_CUR$=PINCRW(RELOCATION_CUR$,2);
     5941    12268    5                       END; /*Two/three word*/
     5942    12269    4                   ELSE
     5943    12270         /*One word relocation directive*/
     5944    12271    4                       RELOCATION_CUR$=PINCRW(RELOCATION_CUR$,1);
     5945    12272         /**/
     5946    12273    4                   END; /*Relocation loop*/
     5947    12274         /* There might be someone building new reloc
     5948    12275         records in reloc buffer. If so, XUO$PURGE_RELOC
     5949    12276         will write the records out. If no one
     5950    12277         is building new reloc records, no harm is
     5951    12278         done. */
     5952    12279
     5953    12280    3               CALL XUO$PURGE_BUFFERS (%TYPPROG, P_SECTION_NUMBER);
     5954    12281         /**/
     5955    12282    3               IF RELOCATION_WRITE_REQUIRED THEN
     5956    12283    4               DO; /*Write out buffer*/
     5957    12284    4                   XUO_RELOCATION_REWRITE.BUF_.BOUND=RELOCATION_SIZE-1;
     5958    12285    4                   CALL M$WRITE(XUO_RELOCATION_REWRITE) ALTRET(WRITE_ERROR);
     5959    12286    4                   END;
     5960    12287         /**/
     5961    12288    3               END; /*Relocation processing*/
     5962    12289         /**/
     5963    12290    2           CALL M$READ(XUO_RELOCATION_READ) ALTRET(READ_ERROR);
     5964    12291         /**/
     5965    12292    2           END; /*Section loop*/
     5966    12293         /**/
     5967    12294    1       BUFFER_CLEAR='0'B;
     5968    12295         /**/
     5969    12296            %PAGE(ARG=ERROR_PROCESSING,PAGE=YES);

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:738  
             12309    1   /*******************************************************************************
             12310    1   *                                                                              *
             12311    1   *        ERROR_PROCESSING              ERROR_PROCESSING                            *
             12312    1   *                                                                              *
             12313    1   *******************************************************************************/

     5970    12317         /*
     5971    12318         We may get a read error for several reasons.
     5972    12319         If we get an eof, that is valid. If we get
     5973    12320         other that that then we got a
     5974    12321         problem.
     5975    12322         Dont give up on this ou though!!
     5976    12323         */
     5977    12324    2   READ_ERROR_PROCESSOR: DO WHILE '0'B;
     5978    12325    2   READ_ERROR: ;
     5979    12326    2           ERROR_CODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
     5980    12327    2           IF ERROR_CODE.CODE = %E$LD /* lost data, but on a record */
     5981    12328    2              AND B$FRWDKEY.TYPE ~= %TYPPROG /* other than a prog/reloc */
     5982    12329    3           THEN DO;
     5983    12330    3               BUFFER_CLEAR = '0'B;
     5984    12331    3               EXIT READ_ERROR_PROCESSOR;
     5985    12332    3               END;
     5986    12333    2           IF ERROR_CODE.CODE~=%E$EOF THEN
     5987    12334    3           DO;
     5988    12335    3               IF XUO_ERROR_ROUTINE~=ENTADDR(NIL) THEN
     5989    12336    3                   CALL XUO_ERROR_ROUTINE(ERROR_CODE);
     5990    12337    3               END;
     5991    12338         /**/
     5992    12339    2           BUFFER_CLEAR='0'B;
     5993    12340    2           END; /* Do while */
     5994    12341         /* Restore the buffer to active use in a section and the lru lust*/
     5995    12342    1       CALL XUM$CREATE_NEW_ITEM (LRU_VECTOR, PTR2_LRU$) ALTRET (ERR_LRU);
     5996    12343    1       SECTION_ARRAY.PROGRAM_CURS(B_NUMBER_OF_SECTIONS) = 0;
     5997    12344    1       SECTION_ARRAY.RELOCATION_CURS(B_NUMBER_OF_SECTIONS) = 0;
     5998    12345    1       SECTION_ARRAY.PTR2_LRU$(B_NUMBER_OF_SECTIONS) = PTR2_LRU$;
     5999    12346    1       PTR2_LRU$->BUBIN = B_NUMBER_OF_SECTIONS;
     6000    12347    1       SECTION_ARRAY.BUF_OFFSET(B_NUMBER_OF_SECTIONS) = 0;
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:739  
     6001    12348    1       RETURN;
     6002    12349         /**/
     6003    12350         /*
     6004    12351         There is no way that we should ever
     6005    12352         get a write error. If we do then there
     6006    12353         is something drastically wrong. Therefore
     6007    12354         in this case, check the close bit and close
     6008    12355         the file and lets not write any more.
     6009    12356         */
     6010    12357    1   WRITE_ERROR: ;
     6011    12358    1       ERROR_CODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
     6012    12359
     6013    12360    1       IF XUO_ERROR_ROUTINE~=ENTADDR(NIL) THEN
     6014    12361    1           CALL XUO_ERROR_ROUTINE(ERROR_CODE);
     6015    12362
     6016    12363    1       IF XUO_CLOSE_REQUIRED THEN
     6017    12364    1           CALL M$CLOSE (XUO_OU_CLOSE) ALTRET(IGNORE_CLOSE_ERROR);
     6018    12365    1   IGNORE_CLOSE_ERROR: ;
     6019    12366    1       XUO_OU_WRITE_REQUIRED='0'B;
     6020    12367         /**/
     6021    12368    1       BUFFER_CLEAR='0'B;
     6022    12369    1       RETURN;
     6023    12370         /**/
     6024    12371    1   ERR: ;
     6025    12372    1       RETURN;
     6026    12373    1   ERR_LRU: ;
     6027    12374    1       RETURN;
     6028    12375    1   END XUO$FRWD_REF;
     6029    12376        %EOD;

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:740  
--  Include file information  --

   XUM_ENTRIES_C.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$FRWD_REF.

   Procedure XUO$FRWD_REF requires 496 words for executable code.
   Procedure XUO$FRWD_REF requires 32 words of local(AUTO) storage.

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:741  

 Object Unit name= XUO$FRWD_REF                               File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:34:52.72 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   496    760  XUO$FRWD_REF
    2  RoData even  none     3      3  XUO$FRWD_REF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        3  XUO$FRWD_REF

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XUM$GET_LRU_ITEM
 yes     yes           Std       2 XUO$PURGE_BUFFERS
 yes     yes           Std       2 XUM$DELETE_ITEM
 yes     yes           Std       2 XUM$CREATE_NEW_ITEM
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:742  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  LRU_VECTOR                            PTR2_SECTION_ARRAY$
     B_NUMBER_OF_SECTIONS                  B$FRWDKEY$                            B_RELOCATION_PAGE_SIZE
     XUO_RELOCATION_READ$                  XUO_RELOCATION_REWRITE$               XUO_OU_CLOSE$
     B$TCB$                                XUO_OU_UTS                            XUO_ERROR_ROUTINE
     XUO_CLOSE_REQUIRED                    XUO_OU_WRITE_REQUIRED                 XUO_MOST_RECENT_SECTION
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:743  


     5590        1        /*M*     XUO$FRWD_REF   -- THIS MOUDLE WILL HANDLE FORWARD REFERENCE ITEMS*/
     5591        2        /*T***********************************************************/
     5592        3        /*T*                                                         */
     5593        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     5594        5        /*T*                                                         */
     5595        6        /*T***********************************************************/
     5596        7        /*P*
     5597        8
     5598        9        NAME:  XUO$FRWD_REF
     5599       10        XUO$FRWD_REF --Forward References
     5600       11
     5601       12        PURPOSE:  To resolve forward references.
     5602       13
     5603       14        DESCRIPTION:  This routine will position itself to the
     5604       15                  beginning of the control section indicated by
     5605       16                  the input parameter Section Number.  The control
     5606       17                  section will be read sequentially ignoring all
     5607       18                  program records.  When a relocation record is
     5608       19                  found, it will be searched for operands of type
     5609       20                  O'17'.  If no operands of that type are found,
     5610       21                  the next sequential record is read.  If an
     5611       22                  operand type of O'17' is found the routine
     5612       23                  specified by the parameter Lookup Routine will
     5613       24                  be called as follows:
     5614       25                      CALL:  CALL Lookup Routine( Old Operand    UBIN   input
     5615       26                                   Operand Type           UBIN   input
     5616       27                                   New Operand            UBIN   output
     5617       28                                   Relocation operator    SBIN   output
     5618       29                                   Starting Bit           SBIN   output
     5619       30                                   Ending Bit)            SBIN   output
     5620       31                  The called routine must return the correct operand
     5621       32                  value to be used and the correct operand type to be
     5622       33                  used.  If these fields are not modified an operand
     5623       34                  type of 6 (segref) and a value of 0 will be used.
     5624       35
     5625       36                  XUO$FRWD_REF routine will initialize the relocation
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:744  
     5626       37                  operator, the starting bit and ending bit to -1.
     5627       38                  If these fields contain values greater than -1
     5628       39                  then the fields in the relocation directive will be
     5629       40                  updated with the new data.
     5630       41
     5631       42                  If any relocation directives have changed due to
     5632       43                  calling the Lookup Routine, then the relocation
     5633       44                  directive buffer will be rewritten.
     5634       45
     5635       46                  This routine will continue until all relocation
     5636       47                  records have been processed for the specified
     5637       48                  control section.
     5638       49
     5639       50                  If calls to XUO$FRWD_REF are intermixed with calls to
     5640       51                  XUO$PRGM and XUO$RELOC then a minimum of two sets of
     5641       52                  buffers must be specified on the call to XUO$BUFINIT.
     5642       53
     5643       54        */
     5644       55        /*D*
     5645       56
     5646       57        CALL:  CALL XUO$FRWD_REF(Section Number,
     5647       58                          Lookup Routine,
     5648       59                          DCB Pointer)
     5649       60
     5650       61
     5651       62        INPUT:
     5652       63            Section Number      UBIN ALIGNED
     5653       64                                The number of the control section in
     5654       65                                which to resolve forward references.
     5655       66            Lookup Routine      EPTR
     5656       67                                The entry pointer to the routine
     5657       68                                which will look up the operand.
     5658       69            DCB Pointer         PTR
     5659       70                                Pointer to the DCB through which
     5660       71                                the object unit is being written.
     5661       72
     5662       73        OUTPUT:
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:745  
     5663       74            none
     5664       75
     5665       76        B$OBJECT REFERENCE:  none
     5666       77        */
     5667       78        /*B*
     5668       79        GLOBAL DATA:
     5669       80            .
     5670       81        INTERFACE:
     5671       82            XUO$PURGE_BUFFERS
     5672       83            XUO_ERROR_ROUTINE
     5673       84            Lookup Routine
     5674       85
     5675       86        */
     5676       87
     5677       88         /**/
     5678       89        XUO$FRWD_REF: PROC(P_SECTION_NUMBER,P_LOOKUP_ROUTINE,P_DCB_PTR$);

     89  1 000000   000000 700200 xent  XUO$FRWD_REF TSX0  ! X66_AUTO_3
         1 000001   000040 000003                    ZERO    32,3

     5679       90         /**/
     5680       91        %INCLUDE ZVA_SYSTEM_FILE;
     5681     6342        %PAGE(ARG=INCLUDES);

              6355    1   /*******************************************************************************
              6356    1   *                                                                              *
              6357    1   *        INCLUDES              INCLUDES                                           *
              6358    1   *                                                                              *
              6359    1   *******************************************************************************/

     5682     6363        %INCLUDE B$OBJECT_C;
     5683     9793        %INCLUDE XUO$OBJ_C;
     5684    10203        %INCLUDE B_ERRORS_C;
     5685    11330        %INCLUDE XUM_ENTRIES_C;
     5686    11350        %XUM_ENTRIES;
     5687    11359        %PAGE(ARG=SUBS);

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:746  
             11372    1   /*******************************************************************************
             11373    1   *                                                                              *
             11374    1   *        SUBS              SUBS                                                  *
             11375    1   *                                                                              *
             11376    1   *******************************************************************************/

     5688    11380        %B$RECORDSUBS;
     5689    11408        %B$RELOCSUBS;
     5690    11438    1   DCL XUO$PURGE_BUFFERS ENTRY (2) ALTRET;
     5691    11439        %B_MULTIBUF_VARS;
     5692    11466        %LOCAL_STUFF;
     5693    11472        %PAGE(ARG=PARAMETERS);

             11485    1   /*******************************************************************************
             11486    1   *                                                                              *
             11487    1   *        PARAMETERS              PARAMETERS                                       *
             11488    1   *                                                                              *
             11489    1   *******************************************************************************/

     5694    11493    1   DCL P_SECTION_NUMBER UBIN;
     5695    11494         /**/
     5696    11495    1   DCL P_LOOKUP_ROUTINE EPTR;
     5697    11496         /**/
     5698    11497    1   DCL P_DCB_PTR$ PTR;
     5699    11498         /**/
     5700    11499        %PAGE(ARG=KEYS);

             11512    1   /*******************************************************************************
             11513    1   *                                                                              *
             11514    1   *        KEYS              KEYS                                                  *
             11515    1   *                                                                              *
             11516    1   *******************************************************************************/

     5701    11520    1   DCL B$FRWDKEY$ PTR SYMREF;
     5702    11521        %B$PRGRELKEY (NAME=B$FRWDKEY,STCLASS="BASED(B$FRWDKEY$)",KEYSIZINIT=,NOTHDINIT=,
             11521            TYPEINIT=);
     5703    11552        %PAGE(ARG=PROGRAM DATA);
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:747  

             11565    1   /*******************************************************************************
             11566    1   *                                                                              *
             11567    1   *        PROGRAM DATA              PROGRAM DATA                                   *
             11568    1   *                                                                              *
             11569    1   *******************************************************************************/

     5704    11573        %B_PROGRAM_POINTERS;
     5705    11588        %PAGE(ARG=RELOCATION DATA);

             11601    1   /*******************************************************************************
             11602    1   *                                                                              *
             11603    1   *        RELOCATION DATA              RELOCATION DATA                             *
             11604    1   *                                                                              *
             11605    1   *******************************************************************************/

     5706    11609        %B_RELOCATION_POINTERS;
     5707    11624        %B$RELOC1 (STCLASS="BASED(RELOCATION_CUR$)");
     5708    11655        %B$RELOC2 (STCLASS="BASED(RELOCATION_CUR$)");
     5709    11722        %PAGE(ARG=LOCAL DATA);

             11735    1   /*******************************************************************************
             11736    1   *                                                                              *
             11737    1   *        LOCAL DATA              LOCAL DATA                                       *
             11738    1   *                                                                              *
             11739    1   *******************************************************************************/

     5710    11743    1   DCL RELOCATION_BASE$ PTR;
     5711    11744         /**/
     5712    11745    1   DCL RELOCATION_CUR$ PTR;
     5713    11746         /**/
     5714    11747    1   DCL RELOCATION_END$ PTR;
     5715    11748         /**/
     5716    11749    1   DCL RELOCATION_SIZE_TIMES_FOUR UBIN;
     5717    11750         /**/
     5718    11751    1   DCL RELOCATION_SIZE UBIN;
     5719    11752         /**/
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:748  
     5720    11753    1   DCL RELOCATION_WRITE_REQUIRED BIT(1);
     5721    11754         /**/
     5722    11755    1   DCL LOOKUP_ROUTINE EPTR;
     5723    11756         /**/
     5724    11757    1   DCL OLD_OPERAND UBIN;
     5725    11758         /**/
     5726    11759    1   DCL A_OPERAND_TYPE UBIN;
     5727    11760         /**/
     5728    11761    1   DCL A_NEW_OPERAND UBIN;
     5729    11762         /**/
     5730    11763    1   DCL A_RELOC_OPERATOR SBIN;
     5731    11764         /**/
     5732    11765    1   DCL A_STARTING_BIT SBIN;
     5733    11766         /**/
     5734    11767    1   DCL A_ENDING_BIT SBIN;
     5735    11768         /**/
     5736    11769    1   DCL OLD_SECOFF UBIN;
     5737    11770
     5738    11771        %PAGE(ARG=FPT/DCB DATA);

             11784    1   /*******************************************************************************
             11785    1   *                                                                              *
             11786    1   *        FPT/DCB DATA              FPT/DCB DATA                                   *
             11787    1   *                                                                              *
             11788    1   *******************************************************************************/

     5739    11792    1   DCL XUO_RELOCATION_READ$ PTR SYMREF;
     5740    11793        %FPT_READ (FPTN=XUO_RELOCATION_READ,STCLASS="BASED(XUO_RELOCATION_READ$)");
     5741    11832    1   DCL XUO_RELOCATION_REWRITE$ PTR SYMREF;
     5742    11833        %FPT_WRITE (FPTN=XUO_RELOCATION_REWRITE,STCLASS="BASED(XUO_RELOCATION_REWRITE$)");
     5743    11864    1   DCL XUO_OU_CLOSE$ PTR SYMREF;
     5744    11865        %FPT_CLOSE (FPTN=XUO_OU_CLOSE,STCLASS="BASED(XUO_OU_CLOSE$)");
     5745    11907        %F$DCB;
     5746    11964         /**/
     5747    11965        %PAGE(ARG=ERROR DATA);

             11978    1   /*******************************************************************************
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:749  
             11979    1   *                                                                              *
             11980    1   *        ERROR DATA              ERROR DATA                                       *
             11981    1   *                                                                              *
             11982    1   *******************************************************************************/

     5748    11986        %B$TCB;
     5749    11989        %B$ALT;
     5750    11997         /**/
     5751    11998    1   DCL B$TCB$ PTR SYMREF;
     5752    11999         /**/
     5753    12000    1   DCL 1 ERROR_CODE,
     5754    12001    1         2 FCG_MID BIT(18),
     5755    12002    1         2 MON BIT(1),
     5756    12003    1         2 CODE UBIN(14) UNAL,
     5757    12004    1         2 SEV UBIN(3) UNAL;
     5758    12005         /**/
     5759    12006        %PAGE(ARG=BASED DATA);

             12019    1   /*******************************************************************************
             12020    1   *                                                                              *
             12021    1   *        BASED DATA              BASED DATA                                       *
             12022    1   *                                                                              *
             12023    1   *******************************************************************************/

     5760    12027    1   DCL 1 BUFFER_CLEAR BASED(RELOCATION_BASE$),
     5761    12028    1         2 * CHAR(RELOCATION_SIZE_TIMES_FOUR);
     5762    12029        %PAGE(ARG=GLOBAL DATA);

             12042    1   /*******************************************************************************
             12043    1   *                                                                              *
             12044    1   *        GLOBAL DATA              GLOBAL DATA                                     *
             12045    1   *                                                                              *
             12046    1   *******************************************************************************/

     5763    12050    1   DCL XUO_OU_UTS UBIN SYMREF;
     5764    12051    1   DCL XUO_ERROR_ROUTINE EPTR SYMREF;
     5765    12052    1   DCL XUO_CLOSE_REQUIRED BIT(1) ALIGNED SYMREF;
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:750  
     5766    12053    1   DCL XUO_OU_WRITE_REQUIRED BIT(1) ALIGNED SYMREF;
     5767    12054    1   DCL XUO_MOST_RECENT_SECTION SBIN WORD SYMREF;
     5768    12055         /**/
     5769    12056        %PAGE(ARG=ENTRY DCLS);

             12069    1   /*******************************************************************************
             12070    1   *                                                                              *
             12071    1   *        ENTRY DCLS              ENTRY DCLS                                       *
             12072    1   *                                                                              *
             12073    1   *******************************************************************************/

     5770    12077    1   DCL XUO$PURGE_PRGM ENTRY;
     5771    12078    1   DCL XUO$PURGE_RELOC ENTRY;
     5772    12079        %PAGE (ARG=CODE);

             12092    1   /*******************************************************************************
             12093    1   *                                                                              *
             12094    1   *        CODE              CODE                                                  *
             12095    1   *                                                                              *
             12096    1   *******************************************************************************/

     5773    12100         /*See if we need to write.
     5774    12101            If not then just exit.
     5775    12102         */
     5776    12103    1       IF NOT XUO_OU_WRITE_REQUIRED THEN

  12103  1 000002   000000 234000 xsym               SZN     XUO_OU_WRITE_REQUIRED
         1 000003   000005 604000 1                  TMI     s:12110

     5777    12104    1           RETURN;

  12104  1 000004   000000 702200 xent               TSX2  ! X66_ARET

     5778    12105         /*
     5779    12106         Make sure that both the program
     5780    12107         buffer and the relocation buffer
     5781    12108         are empty before we start.
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:751  
     5782    12109         */
     5783    12110    1       IF SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER)=ADDR(NIL)

  12110  1 000005   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         1 000006   000000 235100                    LDA     0,,PR0
         1 000007   000003 735000                    ALS     3
         1 000010   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         1 000011   100003 236105                    LDQ     3,AL,PR1
         1 000012   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000013   000134 601000 1                  TNZ     s:12134

     5784    12111    2       THEN DO;

     5785    12112    2           CALL XUM$GET_LRU_ITEM (LRU_VECTOR, PTR2_LRU$) ALTRET (ERR_LRU);

  12112  1 000014   200006 633500                    EPPR3   PTR2_LRU$,,AUTO
         1 000015   200031 453500                    STP3    ERROR_CODE+3,,AUTO
         1 000016   000000 236000 2                  LDQ     0
         1 000017   200030 756100                    STQ     ERROR_CODE+2,,AUTO
         1 000020   200030 630500                    EPPR0   ERROR_CODE+2,,AUTO
         1 000021   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000022   000000 701000 xent               TSX1    XUM$GET_LRU_ITEM
         1 000023   000757 702000 1                  TSX2    ERR_LRU

     5786    12113    2           CALL XUO$PURGE_BUFFERS (%TYPPROG,PTR2_LRU$->BUBIN)ALTRET(ERR);

  12113  1 000024   200006 236100                    LDQ     PTR2_LRU$,,AUTO
         1 000025   000001 235000 2                  LDA     1
         1 000026   200030 757100                    STAQ    ERROR_CODE+2,,AUTO
         1 000027   200030 630500                    EPPR0   ERROR_CODE+2,,AUTO
         1 000030   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000031   000000 701000 xent               TSX1    XUO$PURGE_BUFFERS
         1 000032   000756 702000 1                  TSX2    ERR

     5787    12114    2           SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER) = SECTION_ARRAY.PTR2_LRU$

  12114  1 000033   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:752  
         1 000034   000000 235100                    LDA     0,,PR0
         1 000035   000003 735000                    ALS     3
         1 000036   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000037   000000 620005                    EAX0    0,AL
         1 000040   100000 235100                    LDA     0,,PR1
         1 000041   000003 735000                    ALS     3
         1 000042   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000043   300003 236105                    LDQ     3,AL,PR3
         1 000044   300003 756110                    STQ     3,X0,PR3

     5788    12115    2              (PTR2_LRU$->BUBIN);
     5789    12116    2           SECTION_ARRAY.PTR2_RELOCATION_BUF$ (P_SECTION_NUMBER) =

  12116  1 000045   000000 235100                    LDA     0,,PR0
         1 000046   000003 735000                    ALS     3
         1 000047   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000050   000000 620005                    EAX0    0,AL
         1 000051   100000 235100                    LDA     0,,PR1
         1 000052   000003 735000                    ALS     3
         1 000053   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000054   300005 236105                    LDQ     5,AL,PR3
         1 000055   300005 756110                    STQ     5,X0,PR3

     5790    12117    2              SECTION_ARRAY.PTR2_RELOCATION_BUF$ (PTR2_LRU$->BUBIN);
     5791    12118    2           SECTION_ARRAY.PTR2_PROGRAM_BUF$ (P_SECTION_NUMBER) =

  12118  1 000056   000000 235100                    LDA     0,,PR0
         1 000057   000003 735000                    ALS     3
         1 000060   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000061   000000 620005                    EAX0    0,AL
         1 000062   100000 235100                    LDA     0,,PR1
         1 000063   000003 735000                    ALS     3
         1 000064   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000065   300004 236105                    LDQ     4,AL,PR3
         1 000066   300004 756110                    STQ     4,X0,PR3

     5792    12119    2              SECTION_ARRAY.PTR2_PROGRAM_BUF$ (PTR2_LRU$->BUBIN);
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:753  
     5793    12120
     5794    12121    2           SECTION_ARRAY.PROGRAM_CURS (PTR2_LRU$->BUBIN) = 0;

  12121  1 000067   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000070   100000 235100                    LDA     0,,PR1
         1 000071   000003 735000                    ALS     3
         1 000072   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000073   300000 450105                    STZ     0,AL,PR3

     5795    12122    2           SECTION_ARRAY.RELOCATION_CURS (PTR2_LRU$->BUBIN) = 0;

  12122  1 000074   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000075   100000 235100                    LDA     0,,PR1
         1 000076   000003 735000                    ALS     3
         1 000077   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000100   300001 450105                    STZ     1,AL,PR3

     5796    12123    2           SECTION_ARRAY.PTR2_PROGRAM_BUF$ (PTR2_LRU$->BUBIN) = ADDR(NIL);

  12123  1 000101   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000102   100000 235100                    LDA     0,,PR1
         1 000103   000003 735000                    ALS     3
         1 000104   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000105   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000106   300004 756105                    STQ     4,AL,PR3

     5797    12124    2           SECTION_ARRAY.PTR2_RELOCATION_BUF$(PTR2_LRU$->BUBIN) = ADDR(NIL);

  12124  1 000107   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000110   100000 235100                    LDA     0,,PR1
         1 000111   000003 735000                    ALS     3
         1 000112   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000113   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000114   300005 756105                    STQ     5,AL,PR3

     5798    12125    2           SECTION_ARRAY.PTR2_LRU$ (PTR2_LRU$->BUBIN) = ADDR(NIL);

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:754  
  12125  1 000115   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000116   100000 235100                    LDA     0,,PR1
         1 000117   000003 735000                    ALS     3
         1 000120   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000121   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000122   300003 756105                    STQ     3,AL,PR3

     5799    12126    2           SECTION_ARRAY.BUF_OFFSET(PTR2_LRU$->BUBIN) = 0;

  12126  1 000123   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000124   100000 235100                    LDA     0,,PR1
         1 000125   000003 735000                    ALS     3
         1 000126   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         1 000127   300006 450105                    STZ     6,AL,PR3

     5800    12127
     5801    12128    2           PTR2_LRU$->BUBIN = P_SECTION_NUMBER;

  12128  1 000130   200006 471500                    LDP1    PTR2_LRU$,,AUTO
         1 000131   000000 235100                    LDA     0,,PR0
         1 000132   100000 755100                    STA     0,,PR1

     5802    12129    2           END;

  12129  1 000133   000145 710000 1                  TRA     s:12146

     5803    12130         /*
     5804    12131         This is where we see about purging the buffer because the
     5805    12132         forward ref routine needs this buffer to be empty.
     5806    12133         */
     5807    12134    1       ELSE IF SECTION_ARRAY.PROGRAM_CURS(P_SECTION_NUMBER) ~= 0

  12134  1 000134   100000 235105                    LDA     0,AL,PR1
         1 000135   000145 600000 1                  TZE     s:12146

     5808    12135    2           THEN DO;

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:755  
     5809    12136    2               CALL XUO$PURGE_BUFFERS (%TYPPROG, P_SECTION_NUMBER) ALTRET (ERR);

  12136  1 000136   200003 236100                    LDQ     @P_SECTION_NUMBER,,AUTO
         1 000137   000001 235000 2                  LDA     1
         1 000140   200030 757100                    STAQ    ERROR_CODE+2,,AUTO
         1 000141   200030 630500                    EPPR0   ERROR_CODE+2,,AUTO
         1 000142   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000143   000000 701000 xent               TSX1    XUO$PURGE_BUFFERS
         1 000144   000756 702000 1                  TSX2    ERR

     5810    12137    2               END;

     5811    12138         /* Delete this buffer from the lru list and put it in
     5812    12139            the very last element of section array which can
     5813    12140            never be accessed since this array is of size = the
     5814    12141            number of sections plus one (I.E. 0 - # sections)
     5815    12142            this is to prevent the buffer being used in the
     5816    12143            middle of forward ref for program data.  The buffer
     5817    12144            is restored later for future use.
     5818    12145         */
     5819    12146    1       CALL XUM$DELETE_ITEM (LRU_VECTOR,SECTION_ARRAY.PTR2_LRU$(P_SECTION_NUMBER))
             12146                ALTRET (ERR_LRU);

  12146  1 000145   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         1 000146   000000 235100                    LDA     0,,PR0
         1 000147   000003 735000                    ALS     3
         1 000150   000044 733000                    LRS     36
         1 000151   000022 736000                    QLS     18
         1 000152   000003 036003                    ADLQ    3,DU
         1 000153   000000 036000 xsym               ADLQ    PTR2_SECTION_ARRAY$
         1 000154   000000 235000 2                  LDA     0
         1 000155   200030 757100                    STAQ    ERROR_CODE+2,,AUTO
         1 000156   200030 630500                    EPPR0   ERROR_CODE+2,,AUTO
         1 000157   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000160   000000 701000 xent               TSX1    XUM$DELETE_ITEM
         1 000161   000757 702000 1                  TSX2    ERR_LRU

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:756  
     5820    12147
     5821    12148    1       XUO_MOST_RECENT_SECTION = -1;

  12148  1 000162   000001 335007                    LCA     1,DL
         1 000163   000000 755000 xsym               STA     XUO_MOST_RECENT_SECTION

     5822    12149    1       SECTION_ARRAY.PROGRAM_CURS (B_NUMBER_OF_SECTIONS) = 0;

  12149  1 000164   000000 236000 xsym               LDQ     B_NUMBER_OF_SECTIONS
         1 000165   000003 736000                    QLS     3
         1 000166   000000 470400 xsym               LDP0    PTR2_SECTION_ARRAY$
         1 000167   000000 450106                    STZ     0,QL,PR0

     5823    12150    1       SECTION_ARRAY.RELOCATION_CURS (B_NUMBER_OF_SECTIONS) = 0;

  12150  1 000170   000000 236000 xsym               LDQ     B_NUMBER_OF_SECTIONS
         1 000171   000003 736000                    QLS     3
         1 000172   000000 470400 xsym               LDP0    PTR2_SECTION_ARRAY$
         1 000173   000001 450106                    STZ     1,QL,PR0

     5824    12151    1       SECTION_ARRAY.PTR2_PROGRAM_BUF$ (B_NUMBER_OF_SECTIONS) = ADDR(NIL);

  12151  1 000174   000000 236000 xsym               LDQ     B_NUMBER_OF_SECTIONS
         1 000175   000003 736000                    QLS     3
         1 000176   000000 620006                    EAX0    0,QL
         1 000177   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000200   000000 470400 xsym               LDP0    PTR2_SECTION_ARRAY$
         1 000201   000004 756110                    STQ     4,X0,PR0

     5825    12152    1       SECTION_ARRAY.PTR2_RELOCATION_BUF$(B_NUMBER_OF_SECTIONS) = ADDR(NIL);

  12152  1 000202   000000 236000 xsym               LDQ     B_NUMBER_OF_SECTIONS
         1 000203   000003 736000                    QLS     3
         1 000204   000000 620006                    EAX0    0,QL
         1 000205   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000206   000000 470400 xsym               LDP0    PTR2_SECTION_ARRAY$
         1 000207   000005 756110                    STQ     5,X0,PR0
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:757  

     5826    12153    1       SECTION_ARRAY.PTR2_LRU$ (B_NUMBER_OF_SECTIONS) = ADDR(NIL);

  12153  1 000210   000000 236000 xsym               LDQ     B_NUMBER_OF_SECTIONS
         1 000211   000003 736000                    QLS     3
         1 000212   000000 620006                    EAX0    0,QL
         1 000213   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000214   000000 470400 xsym               LDP0    PTR2_SECTION_ARRAY$
         1 000215   000003 756110                    STQ     3,X0,PR0

     5827    12154    1       SECTION_ARRAY.BUF_OFFSET(B_NUMBER_OF_SECTIONS) = 0;

  12154  1 000216   000000 236000 xsym               LDQ     B_NUMBER_OF_SECTIONS
         1 000217   000003 736000                    QLS     3
         1 000220   000000 470400 xsym               LDP0    PTR2_SECTION_ARRAY$
         1 000221   000006 450106                    STZ     6,QL,PR0

     5828    12155
     5829    12156    1       SECTION_ARRAY.PTR2_RELOCATION_BUF$ (B_NUMBER_OF_SECTIONS) =

  12156  1 000222   000000 236000 xsym               LDQ     B_NUMBER_OF_SECTIONS
         1 000223   000003 736000                    QLS     3
         1 000224   200003 470500                    LDP0    @P_SECTION_NUMBER,,AUTO
         1 000225   000000 235100                    LDA     0,,PR0
         1 000226   000003 735000                    ALS     3
         1 000227   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         1 000230   000000 620006                    EAX0    0,QL
         1 000231   100005 236105                    LDQ     5,AL,PR1
         1 000232   100005 756110                    STQ     5,X0,PR1

     5830    12157    1          SECTION_ARRAY.PTR2_RELOCATION_BUF$ (P_SECTION_NUMBER);
     5831    12158    1       SECTION_ARRAY.PTR2_PROGRAM_BUF$ (B_NUMBER_OF_SECTIONS) =

  12158  1 000233   000000 235000 xsym               LDA     B_NUMBER_OF_SECTIONS
         1 000234   000003 735000                    ALS     3
         1 000235   000000 620005                    EAX0    0,AL
         1 000236   000000 235100                    LDA     0,,PR0
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:758  
         1 000237   000003 735000                    ALS     3
         1 000240   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         1 000241   100004 236105                    LDQ     4,AL,PR1
         1 000242   100004 756110                    STQ     4,X0,PR1

     5832    12159    1          SECTION_ARRAY.PTR2_PROGRAM_BUF$ (P_SECTION_NUMBER);
     5833    12160
     5834    12161    1       SECTION_ARRAY.PROGRAM_CURS (P_SECTION_NUMBER) = 0;

  12161  1 000243   000000 235100                    LDA     0,,PR0
         1 000244   000003 735000                    ALS     3
         1 000245   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         1 000246   100000 450105                    STZ     0,AL,PR1

     5835    12162    1       SECTION_ARRAY.RELOCATION_CURS (P_SECTION_NUMBER) = 0;

  12162  1 000247   000000 235100                    LDA     0,,PR0
         1 000250   000003 735000                    ALS     3
         1 000251   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         1 000252   100001 450105                    STZ     1,AL,PR1

     5836    12163    1       SECTION_ARRAY.PTR2_PROGRAM_BUF$ (P_SECTION_NUMBER) = ADDR(NIL);

  12163  1 000253   000000 235100                    LDA     0,,PR0
         1 000254   000003 735000                    ALS     3
         1 000255   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000256   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         1 000257   100004 756105                    STQ     4,AL,PR1

     5837    12164    1       SECTION_ARRAY.PTR2_RELOCATION_BUF$(P_SECTION_NUMBER) = ADDR(NIL);

  12164  1 000260   000000 235100                    LDA     0,,PR0
         1 000261   000003 735000                    ALS     3
         1 000262   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000263   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         1 000264   100005 756105                    STQ     5,AL,PR1

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:759  
     5838    12165    1       SECTION_ARRAY.PTR2_LRU$ (P_SECTION_NUMBER) = ADDR(NIL);

  12165  1 000265   000000 235100                    LDA     0,,PR0
         1 000266   000003 735000                    ALS     3
         1 000267   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000270   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         1 000271   100003 756105                    STQ     3,AL,PR1

     5839    12166    1       SECTION_ARRAY.BUF_OFFSET(P_SECTION_NUMBER) = 0;

  12166  1 000272   000000 235100                    LDA     0,,PR0
         1 000273   000003 735000                    ALS     3
         1 000274   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         1 000275   100006 450105                    STZ     6,AL,PR1

     5840    12167
     5841    12168    1       LOOKUP_ROUTINE=P_LOOKUP_ROUTINE; /*Localize eptr*/

  12168  1 000276   200004 471500                    LDP1    @P_LOOKUP_ROUTINE,,AUTO
         1 000277   100000 236100                    LDQ     0,,PR1
         1 000300   200016 756100                    STQ     LOOKUP_ROUTINE,,AUTO

     5842    12169         /*
     5843    12170         Set up the base key
     5844    12171         */
     5845    12172    1       B$FRWDKEY.KEYSIZ=11;

  12172  1 000301   000000 473400 xsym               LDP3    B$FRWDKEY$
         1 000302   013000 236003                    LDQ     5632,DU
         1 000303   300000 552140                    STBQ    0,'40'O,PR3

     5846    12173    1       B$FRWDKEY.NOTHD='777'O;

  12173  1 000304   000000 473400 xsym               LDP3    B$FRWDKEY$
         1 000305   000777 236003                    LDQ     511,DU
         1 000306   300000 552120                    STBQ    0,'20'O,PR3

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:760  
     5847    12174    1       B$FRWDKEY.UTS=XUO_OU_UTS;

  12174  1 000307   000000 473400 xsym               LDP3    B$FRWDKEY$
         1 000310   000100 100400                    MLR     fill='000'O
         1 000311   000000 000004 xsym               ADSC9   XUO_OU_UTS               cn=0,n=4
         1 000312   300000 400004                    ADSC9   0,,PR3                   cn=2,n=4

     5848    12175    1       B$FRWDKEY.SECTNUM=P_SECTION_NUMBER;

  12175  1 000313   000000 473400 xsym               LDP3    B$FRWDKEY$
         1 000314   000100 101500                    MRL     fill='000'O
         1 000315   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4
         1 000316   300001 600002                    ADSC9   1,,PR3                   cn=3,n=2

     5849    12176    1       B$FRWDKEY.OFFSET=0;

  12176  1 000317   000000 236003                    LDQ     0,DU
         1 000320   300002 552130                    STBQ    2,'30'O,PR3

     5850    12177    1       B$FRWDKEY.TYPE=%TYPPROG;

  12177  1 000321   012000 236007                    LDQ     5120,DL
         1 000322   300001 552110                    STBQ    1,'10'O,PR3

     5851    12178    1       B$FRWDKEY.SUBTYPE=%SUBTYPPROG;

  12178  1 000323   000000 236003                    LDQ     0,DU
         1 000324   300002 552104                    STBQ    2,'04'O,PR3

     5852    12179    1       B$FRWDKEY.SEQUENCE=0;

  12179  1 000325   300003 450100                    STZ     3,,PR3

     5853    12180         /**/
     5854    12181    1       RELOCATION_BASE$ = SECTION_ARRAY.PTR2_RELOCATION_BUF$(B_NUMBER_OF_SECTIONS);

  12181  1 000326   000000 235000 xsym               LDA     B_NUMBER_OF_SECTIONS
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:761  
         1 000327   000003 735000                    ALS     3
         1 000330   000000 474400 xsym               LDP4    PTR2_SECTION_ARRAY$
         1 000331   400005 236105                    LDQ     5,AL,PR4
         1 000332   200010 756100                    STQ     RELOCATION_BASE$,,AUTO

     5855    12182    1       RELOCATION_SIZE = B_RELOCATION_PAGE_SIZE;

  12182  1 000333   000000 235000 xsym               LDA     B_RELOCATION_PAGE_SIZE
         1 000334   200014 755100                    STA     RELOCATION_SIZE,,AUTO

     5856    12183         /**/
     5857    12184         /*
     5858    12185         Set up the fpts
     5859    12186         */
     5860    12187    1       XUO_RELOCATION_READ.BUF_.BUF$=RELOCATION_BASE$;

  12187  1 000335   000000 475400 xsym               LDP5    XUO_RELOCATION_READ$
         1 000336   500005 756100                    STQ     5,,PR5

     5861    12188    1       RELOCATION_SIZE_TIMES_FOUR=RELOCATION_SIZE*4;

  12188  1 000337   000002 735000                    ALS     2
         1 000340   200013 755100                    STA     RELOCATION_SIZE_TIMES_FOUR,,AUTO

     5862    12189    1       XUO_RELOCATION_READ.BUF_.BOUND=RELOCATION_SIZE_TIMES_FOUR-1;

  12189  1 000341   200013 236100                    LDQ     RELOCATION_SIZE_TIMES_FOUR,,AUTO
         1 000342   000001 136007                    SBLQ    1,DL
         1 000343   000020 736000                    QLS     16
         1 000344   500004 676100                    ERQ     4,,PR5
         1 000345   000034 376000 xsym               ANQ     B_VECTNIL+28
         1 000346   500004 656100                    ERSQ    4,,PR5

     5863    12190         /**/
     5864    12191    1       XUO_RELOCATION_REWRITE.BUF_.BUF$=RELOCATION_BASE$;

  12191  1 000347   200010 236100                    LDQ     RELOCATION_BASE$,,AUTO
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:762  
         1 000350   000000 476400 xsym               LDP6    XUO_RELOCATION_REWRITE$
         1 000351   600005 756100                    STQ     5,,PR6

     5865    12192         /**/
     5866    12193         /*
     5867    12194         Now read the first record in.
     5868    12195         (using the key, of course)
     5869    12196         */
     5870    12197    1       XUO_RELOCATION_READ.V.KEYS#='1'B;

  12197  1 000352   200000 236007                    LDQ     65536,DL
         1 000353   500010 256100                    ORSQ    8,,PR5

     5871    12198    1       CALL M$READ(XUO_RELOCATION_READ) ALTRET(IGNORE_ERROR);

  12198  1 000354   500000 630500                    EPPR0   0,,PR5
         1 000355   440000 713400                    CLIMB   alt,read
         1 000356   401400 401760                    pmme    nvectors=4
         1 000357   000360 702000 1                  TSX2    IGNORE_ERROR

  12197  1 000360                       IGNORE_ERROR null
     5872    12199    1   IGNORE_ERROR: ;
     5873    12200         /*
     5874    12201         Now we must read sequentially.
     5875    12202         */
     5876    12203    1       XUO_RELOCATION_READ.V.KEYS#='0'B;

  12203  1 000360   000000 470400 xsym               LDP0    XUO_RELOCATION_READ$
         1 000361   000002 236000 2                  LDQ     2
         1 000362   000010 356100                    ANSQ    8,,PR0

     5877    12204         /**/
     5878    12205    2       DO WHILE(B$FRWDKEY.TYPE=%TYPPROG AND B$FRWDKEY.SECTNUM=P_SECTION_NUMBER AND
             12205                B$FRWDKEY.UTS=XUO_OU_UTS);

  12205  1 000363   000571 710000 1                  TRA     s:12292

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:763  
     5879    12206         /*
     5880    12207         Check to see if this is a program record.
     5881    12208         If not, just skip it.
     5882    12209         */
     5883    12210    2           IF B$FRWDKEY.SUBTYPE=%SUBTYPREL THEN

  12210  1 000364   000000 470400 xsym               LDP0    B$FRWDKEY$
         1 000365   000002 236100                    LDQ     2,,PR0
         1 000366   000777 376007                    ANQ     511,DL
         1 000367   000001 116007                    CMPQ    1,DL
         1 000370   000565 601000 1                  TNZ     s:12290

     5884    12211    3           DO;

     5885    12212    3               RELOCATION_WRITE_REQUIRED='0'B;

  12212  1 000371   200015 450100                    STZ     RELOCATION_WRITE_REQUIRED,,AUTO

     5886    12213    3               RELOCATION_CUR$=RELOCATION_BASE$;

  12213  1 000372   200010 236100                    LDQ     RELOCATION_BASE$,,AUTO
         1 000373   200011 756100                    STQ     RELOCATION_CUR$,,AUTO

     5887    12214    3               RELOCATION_SIZE=P_DCB_PTR$->F$DCB.ARS#;

  12214  1 000374   200005 471500                    LDP1    @P_DCB_PTR$,,AUTO
         1 000375   100000 473500                    LDP3    0,,PR1
         1 000376   300000 235100                    LDA     0,,PR3
         1 000377   200014 755100                    STA     RELOCATION_SIZE,,AUTO

     5888    12215    3               RELOCATION_END$=PINCRW(RELOCATION_BASE$,(RELOCATION_SIZE+3)/4);

  12215  1 000400   200014 236100                    LDQ     RELOCATION_SIZE,,AUTO
         1 000401   000003 036007                    ADLQ    3,DL
         1 000402   000002 772000                    QRL     2
         1 000403   000022 736000                    QLS     18
         1 000404   200010 036100                    ADLQ    RELOCATION_BASE$,,AUTO
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:764  
         1 000405   200012 756100                    STQ     RELOCATION_END$,,AUTO

     5889    12216         /*
     5890    12217         Loop looking at all relocation
     5891    12218         records for an OPERAND_TYPE of
     5892    12219         O'17'.
     5893    12220         */
     5894    12221    4               DO WHILE(RELOCATION_CUR$<RELOCATION_END$);

  12221  1 000406   200011 116100                    CMPQ    RELOCATION_CUR$,,AUTO
         1 000407   000542 602000 1                  TNC     s:12280
         1 000410   000542 600000 1                  TZE     s:12280

     5895    12222         /*
     5896    12223         Only two or three word relocation
     5897    12224         directives can contain a  '17'o
     5898    12225         in the operand type.  Therefore,
     5899    12226         just skip any type one relocation
     5900    12227         directives.
     5901    12228         */
     5902    12229    4                   IF B$RELOC2.MBZ=0 THEN

  12229  1 000411   200011 470500                    LDP0    RELOCATION_CUR$,,AUTO
         1 000412   000000 236100                    LDQ     0,,PR0
         1 000413   770000 316003                    CANQ    -4096,DU
         1 000414   000535 601000 1                  TNZ     s:12271

     5903    12230    5                   DO; /*Two/three word*/

     5904    12231    5                       IF B$RELOC2.OPNDTYP=%OPERFREF THEN

  12231  1 000415   000000 236100                    LDQ     0,,PR0
         1 000416   007400 376003                    ANQ     3840,DU
         1 000417   007400 116003                    CMPQ    3840,DU
         1 000420   000522 601000 1                  TNZ     s:12264

     5905    12232    6                       DO; /*We found one*/
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:765  

     5906    12233    6                           OLD_OPERAND=B$RELOC2.OPERAND;

  12233  1 000421   000000 236100                    LDQ     0,,PR0
         1 000422   777777 376007                    ANQ     -1,DL
         1 000423   200017 756100                    STQ     OLD_OPERAND,,AUTO

     5907    12234         /*
     5908    12235         Initialize returned variables to a known state
     5909    12236         */
     5910    12237    6                           A_OPERAND_TYPE=%OPERCONST;

  12237  1 000424   000004 235007                    LDA     4,DL
         1 000425   200020 755100                    STA     A_OPERAND_TYPE,,AUTO

     5911    12238    6                           A_NEW_OPERAND=0;

  12238  1 000426   200021 450100                    STZ     A_NEW_OPERAND,,AUTO

     5912    12239    6                           A_RELOC_OPERATOR=B$RELOC2.RELOCOP;

  12239  1 000427   000000 236100                    LDQ     0,,PR0
         1 000430   000022 772000                    QRL     18
         1 000431   000017 376007                    ANQ     15,DL
         1 000432   200022 756100                    STQ     A_RELOC_OPERATOR,,AUTO

     5913    12240    6                           A_STARTING_BIT=B$RELOC2.STBIT;

  12240  1 000433   000001 236100                    LDQ     1,,PR0
         1 000434   000011 772000                    QRL     9
         1 000435   000777 376007                    ANQ     511,DL
         1 000436   200023 756100                    STQ     A_STARTING_BIT,,AUTO

     5914    12241    6                           A_ENDING_BIT=B$RELOC2.ENDBIT;

  12241  1 000437   000001 236100                    LDQ     1,,PR0
         1 000440   000777 376007                    ANQ     511,DL
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:766  
         1 000441   200024 756100                    STQ     A_ENDING_BIT,,AUTO

     5915    12242    6                           OLD_SECOFF=B$RELOC2.DISP+B$FRWDKEY.OFFSET;

  12242  1 000442   000000 471400 xsym               LDP1    B$FRWDKEY$
         1 000443   100002 236100                    LDQ     2,,PR1
         1 000444   000011 772000                    QRL     9
         1 000445   777777 376007                    ANQ     -1,DL
         1 000446   200030 756100                    STQ     ERROR_CODE+2,,AUTO
         1 000447   000001 236100                    LDQ     1,,PR0
         1 000450   000022 772000                    QRL     18
         1 000451   200030 036100                    ADLQ    ERROR_CODE+2,,AUTO
         1 000452   200025 756100                    STQ     OLD_SECOFF,,AUTO

     5916    12243
     5917    12244         /*
     5918    12245         Now call the guy and see what he has for us
     5919    12246         */
     5920    12247    6                          CALL LOOKUP_ROUTINE(OLD_OPERAND,A_OPERAND_TYPE,A_NEW_OPERAND
             12247                                    ,

  12247  1 000453   200025 633500                    EPPR3   OLD_SECOFF,,AUTO
         1 000454   200036 453500                    STP3    ERROR_CODE+8,,AUTO
         1 000455   200024 634500                    EPPR4   A_ENDING_BIT,,AUTO
         1 000456   200035 454500                    STP4    ERROR_CODE+7,,AUTO
         1 000457   200023 635500                    EPPR5   A_STARTING_BIT,,AUTO
         1 000460   200034 455500                    STP5    ERROR_CODE+6,,AUTO
         1 000461   200022 636500                    EPPR6   A_RELOC_OPERATOR,,AUTO
         1 000462   200033 456500                    STP6    ERROR_CODE+5,,AUTO
         1 000463   200021 637500                    EPPR7   A_NEW_OPERAND,,AUTO
         1 000464   200032 457500                    STP7    ERROR_CODE+4,,AUTO
         1 000465   200020 630500                    EPPR0   A_OPERAND_TYPE,,AUTO
         1 000466   200031 450500                    STP0    ERROR_CODE+3,,AUTO
         1 000467   200017 630500                    EPPR0   OLD_OPERAND,,AUTO
         1 000470   200030 450500                    STP0    ERROR_CODE+2,,AUTO
         1 000471   200030 630500                    EPPR0   ERROR_CODE+2,,AUTO
         1 000472   200016 220100                    LDX0    LOOKUP_ROUTINE,,AUTO
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:767  
         1 000473   000025 631400 xsym               EPPR1   B_VECTNIL+21
         1 000474   000000 701010                    TSX1    0,X0
         1 000475   000000 011000                    NOP     0

     5921    12248    6                              A_RELOC_OPERATOR,A_STARTING_BIT,A_ENDING_BIT,
     5922    12249    6                              OLD_SECOFF);
     5923    12250         /*
     5924    12251         Build new relocation directive
     5925    12252         */
     5926    12253    6                           B$RELOC2.OPNDTYP=A_OPERAND_TYPE;

  12253  1 000476   200011 470500                    LDP0    RELOCATION_CUR$,,AUTO
         1 000477   200020 236100                    LDQ     A_OPERAND_TYPE,,AUTO
         1 000500   000032 736000                    QLS     26
         1 000501   000000 676100                    ERQ     0,,PR0
         1 000502   007400 376003                    ANQ     3840,DU
         1 000503   000000 656100                    ERSQ    0,,PR0

     5927    12254    6                           B$RELOC2.OPERAND=A_NEW_OPERAND;

  12254  1 000504   200021 720100                    LXL0    A_NEW_OPERAND,,AUTO
         1 000505   000000 440100                    SXL0    0,,PR0

     5928    12255    6                           B$RELOC2.RELOCOP=A_RELOC_OPERATOR;

  12255  1 000506   200022 236100                    LDQ     A_RELOC_OPERATOR,,AUTO
         1 000507   000022 736000                    QLS     18
         1 000510   000000 676100                    ERQ     0,,PR0
         1 000511   000017 376003                    ANQ     15,DU
         1 000512   000000 656100                    ERSQ    0,,PR0

     5929    12256    6                           B$RELOC2.STBIT=A_STARTING_BIT;

  12256  1 000513   200023 236100                    LDQ     A_STARTING_BIT,,AUTO
         1 000514   000011 736000                    QLS     9
         1 000515   000001 552110                    STBQ    1,'10'O,PR0

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:768  
     5930    12257    6                           B$RELOC2.ENDBIT=A_ENDING_BIT;

  12257  1 000516   200024 236100                    LDQ     A_ENDING_BIT,,AUTO
         1 000517   000001 552104                    STBQ    1,'04'O,PR0

     5931    12258    6                           RELOCATION_WRITE_REQUIRED='1'B;

  12258  1 000520   400000 236003                    LDQ     -131072,DU
         1 000521   200015 756100                    STQ     RELOCATION_WRITE_REQUIRED,,AUTO

     5932    12259         /**/
     5933    12260    6                           END; /*Found one*/

     5934    12261         /*
     5935    12262         Check for two or three words
     5936    12263         */
     5937    12264    5                       IF B$RELOC2.EVALOP>0 THEN

  12264  1 000522   000000 236100                    LDQ     0,,PR0
         1 000523   000360 316003                    CANQ    240,DU
         1 000524   000531 600000 1                  TZE     s:12267

     5938    12265    5                           RELOCATION_CUR$=PINCRW(RELOCATION_CUR$,3);

  12265  1 000525   200011 236100                    LDQ     RELOCATION_CUR$,,AUTO
         1 000526   000003 036003                    ADLQ    3,DU
         1 000527   200011 756100                    STQ     RELOCATION_CUR$,,AUTO
         1 000530   000540 710000 1                  TRA     s:12273

     5939    12266    5                       ELSE
     5940    12267    5                           RELOCATION_CUR$=PINCRW(RELOCATION_CUR$,2);

  12267  1 000531   200011 236100                    LDQ     RELOCATION_CUR$,,AUTO
         1 000532   000002 036003                    ADLQ    2,DU
         1 000533   200011 756100                    STQ     RELOCATION_CUR$,,AUTO

     5941    12268    5                       END; /*Two/three word*/
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:769  

  12268  1 000534   000540 710000 1                  TRA     s:12273

     5942    12269    4                   ELSE
     5943    12270         /*One word relocation directive*/
     5944    12271    4                       RELOCATION_CUR$=PINCRW(RELOCATION_CUR$,1);

  12271  1 000535   200011 236100                    LDQ     RELOCATION_CUR$,,AUTO
         1 000536   000001 036003                    ADLQ    1,DU
         1 000537   200011 756100                    STQ     RELOCATION_CUR$,,AUTO

     5945    12272         /**/
     5946    12273    4                   END; /*Relocation loop*/

  12273  1 000540   200012 116100                    CMPQ    RELOCATION_END$,,AUTO
         1 000541   000411 602000 1                  TNC     s:12229

     5947    12274         /* There might be someone building new reloc
     5948    12275         records in reloc buffer. If so, XUO$PURGE_RELOC
     5949    12276         will write the records out. If no one
     5950    12277         is building new reloc records, no harm is
     5951    12278         done. */
     5952    12279
     5953    12280    3               CALL XUO$PURGE_BUFFERS (%TYPPROG, P_SECTION_NUMBER);

  12280  1 000542   200003 236100                    LDQ     @P_SECTION_NUMBER,,AUTO
         1 000543   000001 235000 2                  LDA     1
         1 000544   200030 757100                    STAQ    ERROR_CODE+2,,AUTO
         1 000545   200030 630500                    EPPR0   ERROR_CODE+2,,AUTO
         1 000546   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000547   000000 701000 xent               TSX1    XUO$PURGE_BUFFERS
         1 000550   000000 011000                    NOP     0

     5954    12281         /**/
     5955    12282    3               IF RELOCATION_WRITE_REQUIRED THEN

  12282  1 000551   200015 234100                    SZN     RELOCATION_WRITE_REQUIRED,,AUTO
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:770  
         1 000552   000565 605000 1                  TPL     s:12290

     5956    12283    4               DO; /*Write out buffer*/

     5957    12284    4                   XUO_RELOCATION_REWRITE.BUF_.BOUND=RELOCATION_SIZE-1;

  12284  1 000553   000000 470400 xsym               LDP0    XUO_RELOCATION_REWRITE$
         1 000554   200014 236100                    LDQ     RELOCATION_SIZE,,AUTO
         1 000555   000001 136007                    SBLQ    1,DL
         1 000556   000020 736000                    QLS     16
         1 000557   000004 676100                    ERQ     4,,PR0
         1 000560   000034 376000 xsym               ANQ     B_VECTNIL+28
         1 000561   000004 656100                    ERSQ    4,,PR0

     5958    12285    4                   CALL M$WRITE(XUO_RELOCATION_REWRITE) ALTRET(WRITE_ERROR);

  12285  1 000562   440001 713400                    CLIMB   alt,write
         1 000563   401400 401760                    pmme    nvectors=4
         1 000564   000723 702000 1                  TSX2    WRITE_ERROR

     5959    12286    4                   END;

     5960    12287         /**/
     5961    12288    3               END; /*Relocation processing*/

     5962    12289         /**/
     5963    12290    2           CALL M$READ(XUO_RELOCATION_READ) ALTRET(READ_ERROR);

  12290  1 000565   000000 470400 xsym               LDP0    XUO_RELOCATION_READ$
         1 000566   440000 713400                    CLIMB   alt,read
         1 000567   401400 401760                    pmme    nvectors=4
         1 000570   000620 702000 1                  TSX2    READ_ERROR

     5964    12291         /**/
     5965    12292    2           END; /*Section loop*/

  12292  1 000571   000000 470400 xsym               LDP0    B$FRWDKEY$
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:771  
         1 000572   000001 236100                    LDQ     1,,PR0
         1 000573   777000 376007                    ANQ     -512,DL
         1 000574   012000 116007                    CMPQ    5120,DL
         1 000575   000612 601000 1                  TNZ     s:12294
         1 000576   200003 471500                    LDP1    @P_SECTION_NUMBER,,AUTO
         1 000577   000001 235100                    LDA     1,,PR0
         1 000600   000002 236100                    LDQ     2,,PR0
         1 000601   000033 773000                    LRL     27
         1 000602   777777 376007                    ANQ     -1,DL
         1 000603   100000 116100                    CMPQ    0,,PR1
         1 000604   000612 601000 1                  TNZ     s:12294
         1 000605   000000 235100                    LDA     0,,PR0
         1 000606   000001 236100                    LDQ     1,,PR0
         1 000607   000022 773000                    LRL     18
         1 000610   000000 116000 xsym               CMPQ    XUO_OU_UTS
         1 000611   000364 600000 1                  TZE     s:12210

     5966    12293         /**/
     5967    12294    1       BUFFER_CLEAR='0'B;

  12294  1 000612   200010 471500                    LDP1    RELOCATION_BASE$,,AUTO
         1 000613   200013 720100                    LXL0    RELOCATION_SIZE_TIMES_FOUR,,AUTO
         1 000614   000140 100400                    MLR     fill='000'O
         1 000615   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000616   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0

     5968    12295         /**/
     5969    12296            %PAGE(ARG=ERROR_PROCESSING,PAGE=YES);

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:772  
             12309    1   /*******************************************************************************
             12310    1   *                                                                              *
             12311    1   *        ERROR_PROCESSING              ERROR_PROCESSING                           *
             12312    1   *                                                                              *
             12313    1   *******************************************************************************/

     5970    12317         /*
     5971    12318         We may get a read error for several reasons.
     5972    12319         If we get an eof, that is valid. If we get
     5973    12320         other that that then we got a
     5974    12321         problem.
     5975    12322         Dont give up on this ou though!!
     5976    12323         */
     5977    12324    2   READ_ERROR_PROCESSOR: DO WHILE '0'B;

  12324  1 000617   000666 710000 1     READ_ERROR_* TRA     s:12342

  12290  1 000620                       READ_ERROR   null
     5978    12325    2   READ_ERROR: ;
     5979    12326    2           ERROR_CODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR;

  12326  1 000620   000000 470400 xsym               LDP0    B$TCB$
         1 000621   000000 471500                    LDP1    0,,PR0
         1 000622   100102 236100                    LDQ     66,,PR1
         1 000623   200026 756100                    STQ     ERROR_CODE,,AUTO

     5980    12327    2           IF ERROR_CODE.CODE = %E$LD /* lost data, but on a record */

  12327  1 000624   200026 236100                    LDQ     ERROR_CODE,,AUTO
         1 000625   377770 376007                    ANQ     131064,DL
         1 000626   000070 116007                    CMPQ    56,DL
         1 000627   000643 601000 1                  TNZ     s:12333
         1 000630   000000 471400 xsym               LDP1    B$FRWDKEY$
         1 000631   100001 236100                    LDQ     1,,PR1
         1 000632   777000 376007                    ANQ     -512,DL
         1 000633   012000 116007                    CMPQ    5120,DL
         1 000634   000643 600000 1                  TZE     s:12333
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:773  

     5981    12328    2              AND B$FRWDKEY.TYPE ~= %TYPPROG /* other than a prog/reloc */
     5982    12329    3           THEN DO;

     5983    12330    3               BUFFER_CLEAR = '0'B;

  12330  1 000635   200010 473500                    LDP3    RELOCATION_BASE$,,AUTO
         1 000636   200013 720100                    LXL0    RELOCATION_SIZE_TIMES_FOUR,,AUTO
         1 000637   000140 100400                    MLR     fill='000'O
         1 000640   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000641   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0

     5984    12331    3               EXIT READ_ERROR_PROCESSOR;

  12331  1 000642   000666 710000 1                  TRA     s:12342

     5985    12332    3               END;
     5986    12333    2           IF ERROR_CODE.CODE~=%E$EOF THEN

  12333  1 000643   200026 236100                    LDQ     ERROR_CODE,,AUTO
         1 000644   377770 376007                    ANQ     131064,DL
         1 000645   000060 116007                    CMPQ    48,DL
         1 000646   000661 600000 1                  TZE     s:12339

     5987    12334    3           DO;

     5988    12335    3               IF XUO_ERROR_ROUTINE~=ENTADDR(NIL) THEN

  12335  1 000647   000000 236000 xsym               LDQ     XUO_ERROR_ROUTINE
         1 000650   000002 116000 xsym               CMPQ    B_VECTNIL+2
         1 000651   000661 600000 1                  TZE     s:12339

     5989    12336    3                   CALL XUO_ERROR_ROUTINE(ERROR_CODE);

  12336  1 000652   200026 631500                    EPPR1   ERROR_CODE,,AUTO
         1 000653   200030 451500                    STP1    ERROR_CODE+2,,AUTO
         1 000654   200030 630500                    EPPR0   ERROR_CODE+2,,AUTO
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:774  
         1 000655   000000 220000 xsym               LDX0    XUO_ERROR_ROUTINE
         1 000656   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000657   000000 701010                    TSX1    0,X0
         1 000660   000000 011000                    NOP     0

     5990    12337    3               END;

     5991    12338         /**/
     5992    12339    2           BUFFER_CLEAR='0'B;

  12339  1 000661   200010 470500                    LDP0    RELOCATION_BASE$,,AUTO
         1 000662   200013 720100                    LXL0    RELOCATION_SIZE_TIMES_FOUR,,AUTO
         1 000663   000140 100400                    MLR     fill='000'O
         1 000664   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000665   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

     5993    12340    2           END; /* Do while */

     5994    12341         /* Restore the buffer to active use in a section and the lru lust*/
     5995    12342    1       CALL XUM$CREATE_NEW_ITEM (LRU_VECTOR, PTR2_LRU$) ALTRET (ERR_LRU);

  12342  1 000666   200006 630500                    EPPR0   PTR2_LRU$,,AUTO
         1 000667   200031 450500                    STP0    ERROR_CODE+3,,AUTO
         1 000670   000000 236000 2                  LDQ     0
         1 000671   200030 756100                    STQ     ERROR_CODE+2,,AUTO
         1 000672   200030 630500                    EPPR0   ERROR_CODE+2,,AUTO
         1 000673   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000674   000000 701000 xent               TSX1    XUM$CREATE_NEW_ITEM
         1 000675   000757 702000 1                  TSX2    ERR_LRU

     5996    12343    1       SECTION_ARRAY.PROGRAM_CURS(B_NUMBER_OF_SECTIONS) = 0;

  12343  1 000676   000000 235000 xsym               LDA     B_NUMBER_OF_SECTIONS
         1 000677   000003 735000                    ALS     3
         1 000700   000000 470400 xsym               LDP0    PTR2_SECTION_ARRAY$
         1 000701   000000 450105                    STZ     0,AL,PR0

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:775  
     5997    12344    1       SECTION_ARRAY.RELOCATION_CURS(B_NUMBER_OF_SECTIONS) = 0;

  12344  1 000702   000000 235000 xsym               LDA     B_NUMBER_OF_SECTIONS
         1 000703   000003 735000                    ALS     3
         1 000704   000000 470400 xsym               LDP0    PTR2_SECTION_ARRAY$
         1 000705   000001 450105                    STZ     1,AL,PR0

     5998    12345    1       SECTION_ARRAY.PTR2_LRU$(B_NUMBER_OF_SECTIONS) = PTR2_LRU$;

  12345  1 000706   000000 235000 xsym               LDA     B_NUMBER_OF_SECTIONS
         1 000707   000003 735000                    ALS     3
         1 000710   200006 236100                    LDQ     PTR2_LRU$,,AUTO
         1 000711   000000 470400 xsym               LDP0    PTR2_SECTION_ARRAY$
         1 000712   000003 756105                    STQ     3,AL,PR0

     5999    12346    1       PTR2_LRU$->BUBIN = B_NUMBER_OF_SECTIONS;

  12346  1 000713   200006 470500                    LDP0    PTR2_LRU$,,AUTO
         1 000714   000000 235000 xsym               LDA     B_NUMBER_OF_SECTIONS
         1 000715   000000 755100                    STA     0,,PR0

     6000    12347    1       SECTION_ARRAY.BUF_OFFSET(B_NUMBER_OF_SECTIONS) = 0;

  12347  1 000716   000000 235000 xsym               LDA     B_NUMBER_OF_SECTIONS
         1 000717   000003 735000                    ALS     3
         1 000720   000000 470400 xsym               LDP0    PTR2_SECTION_ARRAY$
         1 000721   000006 450105                    STZ     6,AL,PR0

     6001    12348    1       RETURN;

  12348  1 000722   000000 702200 xent               TSX2  ! X66_ARET

  12347  1 000723                       WRITE_ERROR  null
     6002    12349         /**/
     6003    12350         /*
     6004    12351         There is no way that we should ever
     6005    12352         get a write error. If we do then there
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:776  
     6006    12353         is something drastically wrong. Therefore
     6007    12354         in this case, check the close bit and close
     6008    12355         the file and lets not write any more.
     6009    12356         */
     6010    12357    1   WRITE_ERROR: ;
     6011    12358    1       ERROR_CODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR;

  12358  1 000723   000000 470400 xsym               LDP0    B$TCB$
         1 000724   000000 471500                    LDP1    0,,PR0
         1 000725   100102 236100                    LDQ     66,,PR1
         1 000726   200026 756100                    STQ     ERROR_CODE,,AUTO

     6012    12359
     6013    12360    1       IF XUO_ERROR_ROUTINE~=ENTADDR(NIL) THEN

  12360  1 000727   000000 236000 xsym               LDQ     XUO_ERROR_ROUTINE
         1 000730   000002 116000 xsym               CMPQ    B_VECTNIL+2
         1 000731   000741 600000 1                  TZE     s:12363

     6014    12361    1           CALL XUO_ERROR_ROUTINE(ERROR_CODE);

  12361  1 000732   200026 631500                    EPPR1   ERROR_CODE,,AUTO
         1 000733   200030 451500                    STP1    ERROR_CODE+2,,AUTO
         1 000734   200030 630500                    EPPR0   ERROR_CODE+2,,AUTO
         1 000735   000000 220000 xsym               LDX0    XUO_ERROR_ROUTINE
         1 000736   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000737   000000 701010                    TSX1    0,X0
         1 000740   000000 011000                    NOP     0

     6015    12362
     6016    12363    1       IF XUO_CLOSE_REQUIRED THEN

  12363  1 000741   000000 234000 xsym               SZN     XUO_CLOSE_REQUIRED
         1 000742   000747 605000 1                  TPL     IGNORE_CLOSE_ERROR

     6017    12364    1           CALL M$CLOSE (XUO_OU_CLOSE) ALTRET(IGNORE_CLOSE_ERROR);

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:777  
  12364  1 000743   000000 470400 xsym               LDP0    XUO_OU_CLOSE$
         1 000744   450001 713400                    CLIMB   alt,close
         1 000745   406000 401760                    pmme    nvectors=13
         1 000746   000747 702000 1                  TSX2    IGNORE_CLOSE_ERROR

  12363  1 000747                       IGNORE_CLOS* null
     6018    12365    1   IGNORE_CLOSE_ERROR: ;
     6019    12366    1       XUO_OU_WRITE_REQUIRED='0'B;

  12366  1 000747   000000 450000 xsym               STZ     XUO_OU_WRITE_REQUIRED

     6020    12367         /**/
     6021    12368    1       BUFFER_CLEAR='0'B;

  12368  1 000750   200010 470500                    LDP0    RELOCATION_BASE$,,AUTO
         1 000751   200013 720100                    LXL0    RELOCATION_SIZE_TIMES_FOUR,,AUTO
         1 000752   000140 100400                    MLR     fill='000'O
         1 000753   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000754   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

     6022    12369    1       RETURN;

  12369  1 000755   000000 702200 xent               TSX2  ! X66_ARET

  12368  1 000756                       ERR          null
     6023    12370         /**/
     6024    12371    1   ERR: ;
     6025    12372    1       RETURN;

  12372  1 000756   000000 702200 xent               TSX2  ! X66_ARET

  12368  1 000757                       ERR_LRU      null
     6026    12373    1   ERR_LRU: ;
     6027    12374    1       RETURN;

  12374  1 000757   000000 702200 xent               TSX2  ! X66_ARET
     6028    12375    1   END XUO$FRWD_REF;
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:778  
     6029    12376        %EOD;

PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:779  
--  Include file information  --

   XUM_ENTRIES_C.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   XUO$OBJ_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   ZVA_FLAGS.:TOOLE04  is referenced.
   ZVA_SYSTEM_FILE.:TOOLE04  is referenced.
      No diagnostics issued in procedure XUO$FRWD_REF.
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:780  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @P_DCB_PTR$                4-0-0/w PTR         r     1 @P_LOOKUP_ROUTINE
     3-0-0/w PTR         r     1 @P_SECTION_NUMBER         24-0-0/w SBIN        r     1 A_ENDING_BIT
    21-0-0/w UBIN        r     1 A_NEW_OPERAND             20-0-0/w UBIN        r     1 A_OPERAND_TYPE
    22-0-0/w SBIN        r     1 A_RELOC_OPERATOR          23-0-0/w SBIN        r     1 A_STARTING_BIT
    26-0-0/b STRC        r     1 ERROR_CODE                16-0-0/w EPTR        r     1 LOOKUP_ROUTINE
    17-0-0/w UBIN        r     1 OLD_OPERAND               25-0-0/w UBIN        r     1 OLD_SECOFF
     6-0-0/w PTR         r     1 PTR2_LRU$                 *0-0-0/w PTR         r     1 P_DCB_PTR$
    *0-0-0/w EPTR        r     1 P_LOOKUP_ROUTINE          *0-0-0/w UBIN        r     1 P_SECTION_NUMBER
    10-0-0/w PTR         r     1 RELOCATION_BASE$          11-0-0/w PTR         r     1 RELOCATION_CUR$
    12-0-0/w PTR         r     1 RELOCATION_END$           14-0-0/w UBIN        r     1 RELOCATION_SIZE
    13-0-0/w UBIN        r     1 RELOCATION_SIZE_TIMES_FOUR
    15-0-0/b BIT         r     1 RELOCATION_WRITE_REQUIRED

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$FRWDKEY$                 0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w UBIN        r     1 B_NUMBER_OF_SECTIONS
     0-0-0/w SBIN        r     1 B_RELOCATION_PAGE_SIZE
     0-0-0/d VECT        r     1 LRU_VECTOR                 0-0-0/w PTR         r     1 PTR2_SECTION_ARRAY$
     0-0-0/w BIT         r     1 XUO_CLOSE_REQUIRED         0-0-0/w EPTR        r     1 XUO_ERROR_ROUTINE
     0-0-0/w SBIN        r     1 XUO_MOST_RECENT_SECTION
     0-0-0/w PTR         r     1 XUO_OU_CLOSE$              0-0-0/w UBIN        r     1 XUO_OU_UTS
     0-0-0/w BIT         r     1 XUO_OU_WRITE_REQUIRED
     0-0-0/w PTR         r     1 XUO_RELOCATION_READ$
     0-0-0/w PTR         r     1 XUO_RELOCATION_REWRITE$

  ****  BASED and DCB variables  ****
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:781  

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(117)   r     1 B$FRWDKEY
     0-0-0/w STRC(108)   r     1 B$RELOC2                   0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w UBIN        r     1 BUBIN                      0-0-0/c ASTR(0)     r     1 BUFFER_CLEAR
     0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/w STRC(288)   r     1 SECTION_ARRAY(0:0)
     0-0-0/d STRC(1080)  r     1 XUO_OU_CLOSE               0-0-0/d STRC(504)   r     1 XUO_RELOCATION_READ
     0-0-0/d STRC(432)   r     1 XUO_RELOCATION_REWRITE


   Procedure XUO$FRWD_REF requires 496 words for executable code.
   Procedure XUO$FRWD_REF requires 32 words of local(AUTO) storage.
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:782  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:783  
          MINI XREF LISTING

A_ENDING_BIT
     11767**DCL     12241<<ASSIGN  12247<>CALL    12257>>ASSIGN
A_NEW_OPERAND
     11761**DCL     12238<<ASSIGN  12247<>CALL    12254>>ASSIGN
A_OPERAND_TYPE
     11759**DCL     12237<<ASSIGN  12247<>CALL    12253>>ASSIGN
A_RELOC_OPERATOR
     11763**DCL     12239<<ASSIGN  12247<>CALL    12255>>ASSIGN
A_STARTING_BIT
     11765**DCL     12240<<ASSIGN  12247<>CALL    12256>>ASSIGN
B$ALT.CODE
     11991**DCL     11991--REDEF   11992--REDEF   11992--REDEF
B$ALT.ERR
     11992**DCL     12326>>ASSIGN  12358>>ASSIGN
B$ALT.ERR.ERR#
     11993**DCL     11993--REDEF
B$ALT.EVID
     11992**DCL     11992--REDEF   11992--REDEF
B$FRWDKEY.KEYSIZ
     11523**DCL     12172<<ASSIGN
B$FRWDKEY.NOTHD
     11527**DCL     12173<<ASSIGN
B$FRWDKEY.OFFSET
     11537**DCL     12176<<ASSIGN  12242>>ASSIGN
B$FRWDKEY.SECTNUM
     11534**DCL     12175<<ASSIGN  12205>>DOWHILE
B$FRWDKEY.SEQUENCE
     11545**DCL     12179<<ASSIGN
B$FRWDKEY.SUBTYPE
     11540**DCL     12178<<ASSIGN  12210>>IF
B$FRWDKEY.TYPE
     11532**DCL     12177<<ASSIGN  12205>>DOWHILE 12327>>IF
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:784  
B$FRWDKEY.UTS
     11529**DCL     12174<<ASSIGN  12205>>DOWHILE
B$FRWDKEY$
     11520**DCL     11522--IMP-PTR 12172>>ASSIGN  12173>>ASSIGN  12174>>ASSIGN  12175>>ASSIGN  12176>>ASSIGN
     12177>>ASSIGN  12178>>ASSIGN  12179>>ASSIGN  12205>>DOWHILE 12205>>DOWHILE 12205>>DOWHILE 12210>>IF
     12242>>ASSIGN  12327>>IF
B$RELOC2.DISP
     11708**DCL     12242>>ASSIGN
B$RELOC2.ENDBIT
     11714**DCL     12241>>ASSIGN  12257<<ASSIGN
B$RELOC2.EVALOP
     11667**DCL     12264>>IF
B$RELOC2.MBZ
     11657**DCL     12229>>IF
B$RELOC2.OPERAND
     11703**DCL     12233>>ASSIGN  12254<<ASSIGN
B$RELOC2.OPNDTYP
     11659**DCL     12231>>IF      12253<<ASSIGN
B$RELOC2.RELOCOP
     11687**DCL     12239>>ASSIGN  12255<<ASSIGN
B$RELOC2.STBIT
     11711**DCL     12240>>ASSIGN  12256<<ASSIGN
B$TCB.ALT$
     11987**DCL     12326>>ASSIGN  12358>>ASSIGN
B$TCB$
     11998**DCL     12326>>ASSIGN  12358>>ASSIGN
BUBIN
     11467**DCL     12113<>CALL    12114>>ASSIGN  12116>>ASSIGN  12118>>ASSIGN  12121>>ASSIGN  12122>>ASSIGN
     12123>>ASSIGN  12124>>ASSIGN  12125>>ASSIGN  12126>>ASSIGN  12128<<ASSIGN  12346<<ASSIGN
BUFFER_CLEAR
     12027**DCL     12294<<ASSIGN  12330<<ASSIGN  12339<<ASSIGN  12368<<ASSIGN
B_NUMBER_OF_SECTIONS
     11454**DCL     12149>>ASSIGN  12150>>ASSIGN  12151>>ASSIGN  12152>>ASSIGN  12153>>ASSIGN  12154>>ASSIGN
     12156>>ASSIGN  12158>>ASSIGN  12181>>ASSIGN  12343>>ASSIGN  12344>>ASSIGN  12345>>ASSIGN  12346>>ASSIGN
     12347>>ASSIGN
B_RELOCATION_PAGE_SIZE
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:785  
     11622**DCL     12182>>ASSIGN
ERR
     12368**LABEL   12113--CALLALT 12136--CALLALT
ERROR_CODE
     12000**DCL     12326<<ASSIGN  12336<>CALL    12358<<ASSIGN  12361<>CALL
ERROR_CODE.CODE
     12003**DCL     12327>>IF      12333>>IF
ERR_LRU
     12368**LABEL   12112--CALLALT 12146--CALLALT 12342--CALLALT
F$DCB.ACTPOS
     11940**DCL     11940--REDEF
F$DCB.ARS#
     11914**DCL     11914--REDEF   12214>>ASSIGN
F$DCB.ATTR
     11933**DCL     11934--REDEF
F$DCB.BORROW
     11948**DCL     11948--REDEF   11948--REDEF   11948--REDEF
F$DCB.DCBNAME.L
     11962**DCL     11962--IMP-SIZ
F$DCB.EOMCHAR#
     11918**DCL     11918--REDEF
F$DCB.FLDID
     11943**DCL     11943--REDEF
F$DCB.FORM$
     11937**DCL     11937--REDEF
F$DCB.FSECT
     11953**DCL     11953--REDEF
F$DCB.FSN#
     11930**DCL     11930--REDEF   11930--REDEF   11931--REDEF
F$DCB.HEADER$
     11936**DCL     11936--REDEF
F$DCB.IXTNSIZE#
     11934**DCL     11934--REDEF
F$DCB.LASTSTA$
     11923**DCL     11923--REDEF
F$DCB.LVL
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:786  
     11949**DCL     11949--REDEF
F$DCB.NAME#.C
     11924**DCL     11924--REDEF
F$DCB.NOEOF
     11946**DCL     11946--REDEF
F$DCB.NRECS#
     11935**DCL     11935--REDEF
F$DCB.NRECX
     11954**DCL     11954--REDEF
F$DCB.OHDR
     11946**DCL     11946--REDEF
F$DCB.ORG#
     11929**DCL     11929--REDEF
F$DCB.PRECNO
     11952**DCL     11952--REDEF
F$DCB.RCSZ
     11958**DCL     11958--REDEF
F$DCB.RES#
     11925**DCL     11925--REDEF
F$DCB.SETX
     11937**DCL     11937--REDEF
F$DCB.TAB$
     11937**DCL     11937--REDEF
F$DCB.TDA
     11951**DCL     11952--REDEF
F$DCB.WSN#
     11925**DCL     11925--REDEF
IGNORE_CLOSE_ERROR
     12363**LABEL   12364--CALLALT
IGNORE_ERROR
     12197**LABEL   12198--CALLALT
LOOKUP_ROUTINE
     11755**DCL     12168<<ASSIGN  12247>>CALL
LRU_VECTOR
     11452**DCL     12112<>CALL    12146<>CALL    12342<>CALL
M$CLOSE
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:787  
      5602**DCL-ENT 12364--CALL
M$READ
      5603**DCL-ENT 12198--CALL    12290--CALL
M$WRITE
      5603**DCL-ENT 12285--CALL
OLD_OPERAND
     11757**DCL     12233<<ASSIGN  12247<>CALL
OLD_SECOFF
     11769**DCL     12242<<ASSIGN  12247<>CALL
PTR2_LRU$
     11469**DCL     12112<>CALL    12113>>CALL    12114>>ASSIGN  12116>>ASSIGN  12118>>ASSIGN  12121>>ASSIGN
     12122>>ASSIGN  12123>>ASSIGN  12124>>ASSIGN  12125>>ASSIGN  12126>>ASSIGN  12128>>ASSIGN  12342<>CALL
     12345>>ASSIGN  12346>>ASSIGN
PTR2_SECTION_ARRAY$
     11453**DCL     11456--IMP-PTR 12110>>IF      12114>>ASSIGN  12114>>ASSIGN  12116>>ASSIGN  12116>>ASSIGN
     12118>>ASSIGN  12118>>ASSIGN  12121>>ASSIGN  12122>>ASSIGN  12123>>ASSIGN  12124>>ASSIGN  12125>>ASSIGN
     12126>>ASSIGN  12134>>IF      12146>>CALL    12149>>ASSIGN  12150>>ASSIGN  12151>>ASSIGN  12152>>ASSIGN
     12153>>ASSIGN  12154>>ASSIGN  12156>>ASSIGN  12156>>ASSIGN  12158>>ASSIGN  12158>>ASSIGN  12161>>ASSIGN
     12162>>ASSIGN  12163>>ASSIGN  12164>>ASSIGN  12165>>ASSIGN  12166>>ASSIGN  12181>>ASSIGN  12343>>ASSIGN
     12344>>ASSIGN  12345>>ASSIGN  12347>>ASSIGN
P_DCB_PTR$
     11497**DCL        89--PROC    12214>>ASSIGN
P_LOOKUP_ROUTINE
     11495**DCL        89--PROC    12168>>ASSIGN
P_SECTION_NUMBER
     11493**DCL        89--PROC    12110>>IF      12114>>ASSIGN  12116>>ASSIGN  12118>>ASSIGN  12128>>ASSIGN
     12134>>IF      12136<>CALL    12146>>CALL    12156>>ASSIGN  12158>>ASSIGN  12161>>ASSIGN  12162>>ASSIGN
     12163>>ASSIGN  12164>>ASSIGN  12165>>ASSIGN  12166>>ASSIGN  12175>>ASSIGN  12205>>DOWHILE 12280<>CALL
READ_ERROR
     12290**LABEL   12290--CALLALT
READ_ERROR_PROCESSOR
     12324**LABEL   12331--EXIT
RELOCATION_BASE$
     11743**DCL     12027--IMP-PTR 12181<<ASSIGN  12187>>ASSIGN  12191>>ASSIGN  12213>>ASSIGN  12215>>ASSIGN
     12294>>ASSIGN  12330>>ASSIGN  12339>>ASSIGN  12368>>ASSIGN
RELOCATION_CUR$
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:788  
     11745**DCL     11625--IMP-PTR 11656--IMP-PTR 12213<<ASSIGN  12221>>DOWHILE 12229>>IF      12231>>IF
     12233>>ASSIGN  12239>>ASSIGN  12240>>ASSIGN  12241>>ASSIGN  12242>>ASSIGN  12253>>ASSIGN  12254>>ASSIGN
     12255>>ASSIGN  12256>>ASSIGN  12257>>ASSIGN  12264>>IF      12265<<ASSIGN  12265>>ASSIGN  12267<<ASSIGN
     12267>>ASSIGN  12271<<ASSIGN  12271>>ASSIGN
RELOCATION_END$
     11747**DCL     12215<<ASSIGN  12221>>DOWHILE
RELOCATION_SIZE
     11751**DCL     12182<<ASSIGN  12188>>ASSIGN  12214<<ASSIGN  12215>>ASSIGN  12284>>ASSIGN
RELOCATION_SIZE_TIMES_FOUR
     11749**DCL     12028--IMP-SIZ 12188<<ASSIGN  12189>>ASSIGN  12294>>ASSIGN  12330>>ASSIGN  12339>>ASSIGN
     12368>>ASSIGN
RELOCATION_WRITE_REQUIRED
     11753**DCL     12212<<ASSIGN  12258<<ASSIGN  12282>>IF
SECTION_ARRAY.BUF_OFFSET
     11463**DCL     12126<<ASSIGN  12154<<ASSIGN  12166<<ASSIGN  12347<<ASSIGN
SECTION_ARRAY.PROGRAM_CURS
     11457**DCL     12121<<ASSIGN  12134>>IF      12149<<ASSIGN  12161<<ASSIGN  12343<<ASSIGN
SECTION_ARRAY.PTR2_LRU$
     11460**DCL     12110>>IF      12114<<ASSIGN  12114>>ASSIGN  12125<<ASSIGN  12146<>CALL    12153<<ASSIGN
     12165<<ASSIGN  12345<<ASSIGN
SECTION_ARRAY.PTR2_PROGRAM_BUF$
     11461**DCL     12118<<ASSIGN  12118>>ASSIGN  12123<<ASSIGN  12151<<ASSIGN  12158<<ASSIGN  12158>>ASSIGN
     12163<<ASSIGN
SECTION_ARRAY.PTR2_RELOCATION_BUF$
     11462**DCL     12116<<ASSIGN  12116>>ASSIGN  12124<<ASSIGN  12152<<ASSIGN  12156<<ASSIGN  12156>>ASSIGN
     12164<<ASSIGN  12181>>ASSIGN
SECTION_ARRAY.RELOCATION_CURS
     11458**DCL     12122<<ASSIGN  12150<<ASSIGN  12162<<ASSIGN  12344<<ASSIGN
WRITE_ERROR
     12347**LABEL   12285--CALLALT
XUM$CREATE_NEW_ITEM
     11352**DCL-ENT 12342--CALL
XUM$DELETE_ITEM
     11356**DCL-ENT 12146--CALL
XUM$GET_LRU_ITEM
     11353**DCL-ENT 12112--CALL
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:789  
XUO$PURGE_BUFFERS
     11438**DCL-ENT 12113--CALL    12136--CALL    12280--CALL
XUO_CLOSE_REQUIRED
     12052**DCL     12363>>IF
XUO_ERROR_ROUTINE
     12051**DCL     12335>>IF      12336>>CALL    12360>>IF      12361>>CALL
XUO_MOST_RECENT_SECTION
     12054**DCL     12148<<ASSIGN
XUO_OU_CLOSE
     11888**DCL     12364<>CALL
XUO_OU_CLOSE.SN_
     11888**DCL     11888--REDEF
XUO_OU_CLOSE.UTL_
     11889**DCL     11889--REDEF
XUO_OU_CLOSE.V.EXPIRE#
     11903**DCL     11903--REDEF
XUO_OU_CLOSE.V.TYPE#
     11901**DCL     11901--REDEF
XUO_OU_CLOSE.V.XTNSIZE#
     11898**DCL     11898--REDEF   11900--REDEF
XUO_OU_CLOSE$
     11864**DCL     11888--IMP-PTR 12364>>CALL
XUO_OU_UTS
     12050**DCL     12174>>ASSIGN  12205>>DOWHILE
XUO_OU_WRITE_REQUIRED
     12053**DCL     12103>>IF      12366<<ASSIGN
XUO_RELOCATION_READ
     11810**DCL     12198<>CALL    12290<>CALL
XUO_RELOCATION_READ.BUF_.BOUND
     11812**DCL     12189<<ASSIGN
XUO_RELOCATION_READ.BUF_.BUF$
     11813**DCL     12187<<ASSIGN
XUO_RELOCATION_READ.STATION_
     11813**DCL     11814--REDEF
XUO_RELOCATION_READ.V.DVBYTE.REREAD#
     11825**DCL     11825--REDEF
PL6.E3A0      #022=XUO$FRWD_REF File=XUO$BUILD.:E05TSI                           WED 07/30/97 09:34 Page:790  
XUO_RELOCATION_READ.V.INDX#
     11823**DCL     11823--REDEF
XUO_RELOCATION_READ.V.KEYS#
     11815**DCL     12197<<ASSIGN  12203<<ASSIGN
XUO_RELOCATION_READ$
     11792**DCL     11810--IMP-PTR 12187>>ASSIGN  12189>>ASSIGN  12197>>ASSIGN  12198>>CALL    12203>>ASSIGN
     12290>>CALL
XUO_RELOCATION_REWRITE
     11850**DCL     12285<>CALL
XUO_RELOCATION_REWRITE.BUF_.BOUND
     11850**DCL     12284<<ASSIGN
XUO_RELOCATION_REWRITE.BUF_.BUF$
     11852**DCL     12191<<ASSIGN
XUO_RELOCATION_REWRITE.STATION_
     11852**DCL     11852--REDEF
XUO_RELOCATION_REWRITE.V.DVBYTE.VFC#
     11859**DCL     11859--REDEF
XUO_RELOCATION_REWRITE$
     11832**DCL     11850--IMP-PTR 12191>>ASSIGN  12284>>ASSIGN  12285>>CALL

PL6.E3A0      #023=XUO$PURGE_BUFFERS File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:35 Page:791  
     6030        1        /*T***********************************************************/
     6031        2        /*T*                                                         */
     6032        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     6033        4        /*T*                                                         */
     6034        5        /*T***********************************************************/
     6035        6        XUO$PURGE_BUFFERS: PROC ( BUF_TYPE,BUF_NUM) ALTRET;
     6036        7        %INCLUDE XUO$OBJ_C;
     6037      417        %INCLUDE B$OBJECT_C;
     6038     3847
     6039     3848    1   DCL BUF_TYPE UBIN;
     6040     3849    1   DCL BUF_NUM UBIN;
     6041     3850
     6042     3851        %B$RECORDSUBS;
     6043     3879        %B_MULTIBUF_VARS;
     6044     3906
     6045     3907    1   DCL XUO$OUWRITE ENTRY (2);
     6046     3908
     6047     3909    1       IF BUF_TYPE = %TYPPROG
     6048     3910    2       THEN DO;
     6049     3911    2           IF SECTION_ARRAY.PROGRAM_CURS (BUF_NUM) > 0
     6050     3912    3           THEN DO;
     6051     3913    3               CALL XUO$OUWRITE (%TYPPROG, BUF_NUM);
     6052     3914    3               SECTION_ARRAY.PROGRAM_CURS (BUF_NUM) = 0;
     6053     3915    3               END;
     6054     3916    2           IF SECTION_ARRAY.RELOCATION_CURS (BUF_NUM) > 0
     6055     3917    3           THEN DO;
     6056     3918    3               CALL XUO$OUWRITE (%TYPRELOC, BUF_NUM);
     6057     3919    3               SECTION_ARRAY.RELOCATION_CURS (BUF_NUM) = 0;
     6058     3920    3               END;
     6059     3921    2           END;
     6060     3922    1       ELSE IF BUF_TYPE = %TYPRELOC
     6061     3923    2           THEN DO;
     6062     3924    2               IF SECTION_ARRAY.RELOCATION_CURS (BUF_NUM) > 0
     6063     3925    3               THEN DO;
     6064     3926    3                   CALL XUO$OUWRITE (%TYPRELOC, BUF_NUM);
     6065     3927    3                   SECTION_ARRAY.RELOCATION_CURS (BUF_NUM) = 0;
     6066     3928    3                   END;
PL6.E3A0      #023=XUO$PURGE_BUFFERS File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:35 Page:792  
     6067     3929    2               END;
     6068     3930    2           ELSE DO;
     6069     3931    2               ALTRETURN;
     6070     3932    2               END;
     6071     3933    1       RETURN;
     6072     3934    1   END XUO$PURGE_BUFFERS;

PL6.E3A0      #023=XUO$PURGE_BUFFERS File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:35 Page:793  
--  Include file information  --

   B$OBJECT_C.:E05TOU  is referenced.
   XUO$OBJ_C.:E05TOU  is referenced.
      No diagnostics issued in procedure XUO$PURGE_BUFFERS.

   Procedure XUO$PURGE_BUFFERS requires 66 words for executable code.
   Procedure XUO$PURGE_BUFFERS requires 8 words of local(AUTO) storage.

    No errors detected in file XUO$BUILD.:E05TSI    .

PL6.E3A0      #023=XUO$PURGE_BUFFERS File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:35 Page:794  

 Object Unit name= XUO$PURGE_BUFFERS                          File name= XUO$BUILD.:E05TOU
 UTS= JUL 30 '97 09:35:21.80 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    66    102  XUO$PURGE_BUFFERS
    1  RoData even  none     3      3  XUO$PURGE_BUFFERS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  XUO$PURGE_BUFFERS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XUO$OUWRITE
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     PTR2_SECTION_ARRAY$                   B_VECTNIL
PL6.E3A0      #023=XUO$PURGE_BUFFERS File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:35 Page:795  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #023=XUO$PURGE_BUFFERS File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:35 Page:796  


     6030        1        /*T***********************************************************/
     6031        2        /*T*                                                         */
     6032        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     6033        4        /*T*                                                         */
     6034        5        /*T***********************************************************/
     6035        6        XUO$PURGE_BUFFERS: PROC ( BUF_TYPE,BUF_NUM) ALTRET;

      6  0 000000   000000 700200 xent  XUO$PURGE_B* TSX0  ! X66_AUTO_2
         0 000001   000010 000002                    ZERO    8,2

     6036        7        %INCLUDE XUO$OBJ_C;
     6037      417        %INCLUDE B$OBJECT_C;
     6038     3847
     6039     3848    1   DCL BUF_TYPE UBIN;
     6040     3849    1   DCL BUF_NUM UBIN;
     6041     3850
     6042     3851        %B$RECORDSUBS;
     6043     3879        %B_MULTIBUF_VARS;
     6044     3906
     6045     3907    1   DCL XUO$OUWRITE ENTRY (2);
     6046     3908
     6047     3909    1       IF BUF_TYPE = %TYPPROG

   3909  0 000002   200003 470500                    LDP0    @BUF_TYPE,,AUTO
         0 000003   000000 235100                    LDA     0,,PR0
         0 000004   000012 115007                    CMPA    10,DL
         0 000005   000053 601000 0                  TNZ     s:3922

     6048     3910    2       THEN DO;

     6049     3911    2           IF SECTION_ARRAY.PROGRAM_CURS (BUF_NUM) > 0

   3911  0 000006   200004 471500                    LDP1    @BUF_NUM,,AUTO
         0 000007   100000 235100                    LDA     0,,PR1
         0 000010   000003 735000                    ALS     3
         0 000011   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
PL6.E3A0      #023=XUO$PURGE_BUFFERS File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:35 Page:797  
         0 000012   300000 235105                    LDA     0,AL,PR3
         0 000013   000030 600000 0                  TZE     s:3916

     6050     3912    3           THEN DO;

     6051     3913    3               CALL XUO$OUWRITE (%TYPPROG, BUF_NUM);

   3913  0 000014   200004 236100                    LDQ     @BUF_NUM,,AUTO
         0 000015   000000 235000 1                  LDA     0
         0 000016   200006 757100                    STAQ    @BUF_NUM+2,,AUTO
         0 000017   200006 630500                    EPPR0   @BUF_NUM+2,,AUTO
         0 000020   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000021   000000 701000 xent               TSX1    XUO$OUWRITE
         0 000022   000000 011000                    NOP     0

     6052     3914    3               SECTION_ARRAY.PROGRAM_CURS (BUF_NUM) = 0;

   3914  0 000023   200004 470500                    LDP0    @BUF_NUM,,AUTO
         0 000024   000000 235100                    LDA     0,,PR0
         0 000025   000003 735000                    ALS     3
         0 000026   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         0 000027   100000 450105                    STZ     0,AL,PR1

     6053     3915    3               END;

     6054     3916    2           IF SECTION_ARRAY.RELOCATION_CURS (BUF_NUM) > 0

   3916  0 000030   200004 470500                    LDP0    @BUF_NUM,,AUTO
         0 000031   000000 235100                    LDA     0,,PR0
         0 000032   000003 735000                    ALS     3
         0 000033   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         0 000034   100001 235105                    LDA     1,AL,PR1
         0 000035   000101 600000 0                  TZE     s:3933

     6055     3917    3           THEN DO;

     6056     3918    3               CALL XUO$OUWRITE (%TYPRELOC, BUF_NUM);
PL6.E3A0      #023=XUO$PURGE_BUFFERS File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:35 Page:798  

   3918  0 000036   200004 236100                    LDQ     @BUF_NUM,,AUTO
         0 000037   000002 235000 1                  LDA     2
         0 000040   200006 757100                    STAQ    @BUF_NUM+2,,AUTO
         0 000041   200006 630500                    EPPR0   @BUF_NUM+2,,AUTO
         0 000042   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000043   000000 701000 xent               TSX1    XUO$OUWRITE
         0 000044   000000 011000                    NOP     0

     6057     3919    3               SECTION_ARRAY.RELOCATION_CURS (BUF_NUM) = 0;

   3919  0 000045   200004 470500                    LDP0    @BUF_NUM,,AUTO
         0 000046   000000 235100                    LDA     0,,PR0
         0 000047   000003 735000                    ALS     3
         0 000050   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         0 000051   100001 450105                    STZ     1,AL,PR1

     6058     3920    3               END;

     6059     3921    2           END;

   3921  0 000052   000101 710000 0                  TRA     s:3933

     6060     3922    1       ELSE IF BUF_TYPE = %TYPRELOC

   3922  0 000053   000020 115007                    CMPA    16,DL
         0 000054   000100 601000 0                  TNZ     s:3931

     6061     3923    2           THEN DO;

     6062     3924    2               IF SECTION_ARRAY.RELOCATION_CURS (BUF_NUM) > 0

   3924  0 000055   200004 471500                    LDP1    @BUF_NUM,,AUTO
         0 000056   100000 235100                    LDA     0,,PR1
         0 000057   000003 735000                    ALS     3
         0 000060   000000 473400 xsym               LDP3    PTR2_SECTION_ARRAY$
         0 000061   300001 235105                    LDA     1,AL,PR3
PL6.E3A0      #023=XUO$PURGE_BUFFERS File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:35 Page:799  
         0 000062   000101 600000 0                  TZE     s:3933

     6063     3925    3               THEN DO;

     6064     3926    3                   CALL XUO$OUWRITE (%TYPRELOC, BUF_NUM);

   3926  0 000063   200004 236100                    LDQ     @BUF_NUM,,AUTO
         0 000064   000002 235000 1                  LDA     2
         0 000065   200006 757100                    STAQ    @BUF_NUM+2,,AUTO
         0 000066   200006 630500                    EPPR0   @BUF_NUM+2,,AUTO
         0 000067   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000070   000000 701000 xent               TSX1    XUO$OUWRITE
         0 000071   000000 011000                    NOP     0

     6065     3927    3                   SECTION_ARRAY.RELOCATION_CURS (BUF_NUM) = 0;

   3927  0 000072   200004 470500                    LDP0    @BUF_NUM,,AUTO
         0 000073   000000 235100                    LDA     0,,PR0
         0 000074   000003 735000                    ALS     3
         0 000075   000000 471400 xsym               LDP1    PTR2_SECTION_ARRAY$
         0 000076   100001 450105                    STZ     1,AL,PR1

     6066     3928    3                   END;

     6067     3929    2               END;

   3929  0 000077   000101 710000 0                  TRA     s:3933

     6068     3930    2           ELSE DO;

     6069     3931    2               ALTRETURN;

   3931  0 000100   000000 702200 xent               TSX2  ! X66_AALT

     6070     3932    2               END;
     6071     3933    1       RETURN;

PL6.E3A0      #023=XUO$PURGE_BUFFERS File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:35 Page:800  
   3933  0 000101   000000 702200 xent               TSX2  ! X66_ARET
     6072     3934    1   END XUO$PURGE_BUFFERS;

PL6.E3A0      #023=XUO$PURGE_BUFFERS File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:35 Page:801  
--  Include file information  --

   B$OBJECT_C.:E05TOU  is referenced.
   XUO$OBJ_C.:E05TOU  is referenced.
      No diagnostics issued in procedure XUO$PURGE_BUFFERS.
PL6.E3A0      #023=XUO$PURGE_BUFFERS File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:35 Page:802  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @BUF_NUM                   3-0-0/w PTR         r     1 @BUF_TYPE
    *0-0-0/w UBIN        r     1 BUF_NUM                   *0-0-0/w UBIN        r     1 BUF_TYPE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 PTR2_SECTION_ARRAY$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(288)   r     1 SECTION_ARRAY(0:0)


   Procedure XUO$PURGE_BUFFERS requires 66 words for executable code.
   Procedure XUO$PURGE_BUFFERS requires 8 words of local(AUTO) storage.

    No errors detected in file XUO$BUILD.:E05TSI    .
PL6.E3A0      #023=XUO$PURGE_BUFFERS File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:35 Page:803  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #023=XUO$PURGE_BUFFERS File=XUO$BUILD.:E05TSI                      WED 07/30/97 09:35 Page:804  
          MINI XREF LISTING

BUF_NUM
      3849**DCL         6--PROC     3911>>IF       3913<>CALL     3914>>ASSIGN   3916>>IF       3918<>CALL
      3919>>ASSIGN   3924>>IF       3926<>CALL     3927>>ASSIGN
BUF_TYPE
      3848**DCL         6--PROC     3909>>IF       3922>>IF
PTR2_SECTION_ARRAY$
      3893**DCL      3896--IMP-PTR  3911>>IF       3914>>ASSIGN   3916>>IF       3919>>ASSIGN   3924>>IF
      3927>>ASSIGN
SECTION_ARRAY.PROGRAM_CURS
      3897**DCL      3911>>IF       3914<<ASSIGN
SECTION_ARRAY.RELOCATION_CURS
      3898**DCL      3916>>IF       3919<<ASSIGN   3924>>IF       3927<<ASSIGN
XUO$OUWRITE
      3907**DCL-ENT  3913--CALL     3918--CALL     3926--CALL
