VERSION E05

PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:1    
        1        1        /*M* NMU$UTIL - Utility routines for MIRROR program.               */
        2        2        /*M* NMU$ABORT - Abort MIRROR COPY or COMPARE operation.           */
        3        3        /*T***********************************************************/
        4        4        /*T*                                                         */
        5        5        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        6        6        /*T*                                                         */
        7        7        /*T***********************************************************/
        8        8        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
        9        9        /*F*
       10       10        NAME:           NMU$ABORT
       11       11
       12       12        PURSPOSE:       To abort MIRROR program properly.
       13       13        */
       14       14        /*D*
       15       15        NAME:           NMU$ABORT
       16       16
       17       17        CALL:           CALL NMU$ABORT ( [newstate0], [newstate1] )
       18       18                        ALTRET ( error ) ;
       19       19
       20       20        PARAMETERS:
       21       21        */
       22       22        /*K*
       23       23        newstate0       is a UBIN WORD that defines the new state
       24       24                for device DPMM.
       25       25        */
       26       26        /*K*
       27       27        newstate1       is a UBIN WORD that defines the new state
       28       28                for device DPNN.
       29       29        */
       30       30        /*D*
       31       31        DESCRIPTION:
       32       32
       33       33        The NMU$ABORT procedure is used to abort the MIRROR
       34       34        operation.  LOCKed devices are UNLOCKed.  And
       35       35        devices are placed in the new state, if specified.
       36       36
       37       37        */
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:2    
       38       38        %EJECT ;
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:3    
       39       39        NMU$ABORT:    PROC ( NEWSTATE0, NEWSTATE1 ) ALTRET ;
       40       40        /*
       41       41                        Includes
       42       42        */
       43       43        %INCLUDE                CP_6 ;
       44     5602        %INCLUDE                B$JIT;
       45     6205        %INCLUDE                NI$TABLES ;
       46     6421        %INCLUDE                NM_MACRO_M ;
       47     7826        /*
       48     7827                        Parameters
       49     7828        */
       50     7829    1   DCL 1 NEWSTATE0         UBIN WORD ALIGNED PARAM ;
       51     7830    1   DCL 1 NEWSTATE1         UBIN WORD ALIGNED PARAM ;
       52     7831        /*
       53     7832                        Entries
       54     7833        */
       55     7834    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
       56     7835    1   DCL 1 NMU$CHGSTATE      ENTRY(3) ALTRET ;
       57     7836    1   DCL 1 NMU$FDS           ENTRY    ALTRET ;
       58     7837    1   DCL 1 NMU$UNLOCK        ENTRY(1) ALTRET ;
       59     7838        /*
       60     7839                        Variables
       61     7840        */
       62     7841    1   DCL 1 ALTERR            BIT(1) ALIGNED AUTO ;
       63     7842                                %B$ALT ( NAME =
       64     7843              B$ALT             , STCLASS = BASED
       65     7844                                                                        ) ;
       66     7852                                %B$TCB ( NAME =
       67     7853              B$TCB             , STCLASS = "BASED(B$TCB$)"
       68     7854                                                                        ) ;
       69     7857    1   DCL 1 B$TCB$            PTR SYMREF ;
       70     7858    1   DCL 1 B$JIT$            PTR SYMREF;
       71     7859                                %NI$DCT ( NAME =
       72     7860              DCT               , STCLASS = BASED
       73     7861                                                                        ) ;
       74     7909    1   DCL 1 I                 SBIN WORD ALIGNED AUTO ;
       75     7910                                %NMD_PIT ( FPTN =
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:4    
       76     7911              NMD_PIT           , STCLASS=SYMREF
       77     7912                                                                        ) ;
       78     8365                                %FPT_TIME ( FPTN =
       79     8366              TIME              , STCLASS = CONSTANT
       80     8367                                , DEST = UTS
       81     8368                                , SOURCE = CLOCK
       82     8369                                , TSTAMP = UTS
       83     8370                                                                        ) ;
       84     8389    1   DCL 1 UTS               UBIN WORD STATIC ;
       85     8390        %EJECT ;
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:5    
       86     8391        /*
       87     8392        Initialize error return flag.
       88     8393        */
       89     8394    1           ALTERR = '0'B ;
       90     8395        /*
       91     8396        Unlock any locked devices.
       92     8397        */
       93     8398    2           DO  I = 0 TO 1 ;
       94     8399    2               IF  NMD_PIT.DEV.DCT$(I) ~= ADDR(NIL)
       95     8400    2               AND NMD_PIT.DEV.DCT$(I) -> DCT.DP.MIRROR.LOCK
       96     8401    2               AND B$JIT$->B$JIT.USER = NMD_PIT.DEV.DCT$(I) -> DCT.DP.MIRROR.USER#
       97     8402    2               THEN
       98     8403    2                   CALL NMU$UNLOCK ( I ) ;
       99     8404    2               END ;
      100     8405        /*
      101     8406        Release any buffers obtained.
      102     8407        */
      103     8408    1           IF  NMD_PIT.FLAGS.BUF#
      104     8409    1           THEN
      105     8410    1               CALL NMU$FDS
      106     8411    2               WHENALTRETURN DO ;
      107     8412    2                   ALTERR = '1'B ;
      108     8413    2                   END ;
      109     8414        /*
      110     8415        If specified, change state of devices.  Do DEV(1) first.
      111     8416        */
      112     8417    1           IF  ADDR(NEWSTATE1) ~= ADDR(NIL)
      113     8418    1           THEN
      114     8419    1               CALL M$TIME ( TIME )
      115     8420    2               WHENRETURN DO ;
      116     8421    2                   CALL NMU$CHGSTATE ( 1, NEWSTATE1, UTS ) ;
      117     8422    2                   END ;
      118     8423    2               WHENALTRETURN DO ;
      119     8424    2                   ALTERR = '1'B ;
      120     8425    2                   CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR ) ;
      121     8426    2                   END ;
      122     8427
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:6    
      123     8428    1           IF  ADDR(NEWSTATE0) ~= ADDR(NIL)
      124     8429    1           THEN
      125     8430    1               CALL M$TIME ( TIME )
      126     8431    2               WHENRETURN DO ;
      127     8432    2                   CALL NMU$CHGSTATE ( 0, NEWSTATE0, UTS ) ;
      128     8433    2                   END ;
      129     8434    2               WHENALTRETURN DO ;
      130     8435    2                   ALTERR = '1'B ;
      131     8436    2                   CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR ) ;
      132     8437    2                   END ;
      133     8438        /*
      134     8439        Return to the calling procedure.
      135     8440        */
      136     8441    1           IF  ALTERR
      137     8442    1           THEN
      138     8443    1               ALTRETURN ;
      139     8444    1           ELSE
      140     8445    1               RETURN ;
      141     8446
      142     8447    1           END NMU$ABORT ;
      143     8448        %EOD ;

PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:7    
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   NI$TABLES.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$ABORT.

   Procedure NMU$ABORT requires 103 words for executable code.
   Procedure NMU$ABORT requires 12 words of local(AUTO) storage.

PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:8    

 Object Unit name= NMU$ABORT                                  File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:51:08.60 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     12     14  NMU$ABORT
    2   Data  even  none     1      1  NMU$ABORT
    3   Proc  even  none   103    147  NMU$ABORT
    4  RoData even  none     3      3  NMU$ABORT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        2  NMU$ABORT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 NMU$UNLOCK
 yes     yes           Std       0 NMU$FDS
 yes     yes           Std       3 NMU$CHGSTATE
         yes           Std       6 NME$ERRMSG
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:9    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                B$JIT$
     NMD_PIT                               B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:10   


        1        1        /*M* NMU$UTIL - Utility routines for MIRROR program.               */
        2        2        /*M* NMU$ABORT - Abort MIRROR COPY or COMPARE operation.           */
        3        3        /*T***********************************************************/
        4        4        /*T*                                                         */
        5        5        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        6        6        /*T*                                                         */
        7        7        /*T***********************************************************/
        8        8        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
        9        9        /*F*
       10       10        NAME:           NMU$ABORT
       11       11
       12       12        PURSPOSE:       To abort MIRROR program properly.
       13       13        */
       14       14        /*D*
       15       15        NAME:           NMU$ABORT
       16       16
       17       17        CALL:           CALL NMU$ABORT ( [newstate0], [newstate1] )
       18       18                        ALTRET ( error ) ;
       19       19
       20       20        PARAMETERS:
       21       21        */
       22       22        /*K*
       23       23        newstate0       is a UBIN WORD that defines the new state
       24       24                for device DPMM.
       25       25        */
       26       26        /*K*
       27       27        newstate1       is a UBIN WORD that defines the new state
       28       28                for device DPNN.
       29       29        */
       30       30        /*D*
       31       31        DESCRIPTION:
       32       32
       33       33        The NMU$ABORT procedure is used to abort the MIRROR
       34       34        operation.  LOCKed devices are UNLOCKed.  And
       35       35        devices are placed in the new state, if specified.
       36       36
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:11   
       37       37        */
       38       38        %EJECT ;
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:12   
       39       39        NMU$ABORT:    PROC ( NEWSTATE0, NEWSTATE1 ) ALTRET ;

     39  3 000000   000000 700200 xent  NMU$ABORT    TSX0  ! X66_AUTO_2
         3 000001   000014 000002                    ZERO    12,2

       40       40        /*
       41       41                        Includes
       42       42        */
       43       43        %INCLUDE                CP_6 ;
       44     5602        %INCLUDE                B$JIT;
       45     6205        %INCLUDE                NI$TABLES ;
       46     6421        %INCLUDE                NM_MACRO_M ;
       47     7826        /*
       48     7827                        Parameters
       49     7828        */
       50     7829    1   DCL 1 NEWSTATE0         UBIN WORD ALIGNED PARAM ;
       51     7830    1   DCL 1 NEWSTATE1         UBIN WORD ALIGNED PARAM ;
       52     7831        /*
       53     7832                        Entries
       54     7833        */
       55     7834    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
       56     7835    1   DCL 1 NMU$CHGSTATE      ENTRY(3) ALTRET ;
       57     7836    1   DCL 1 NMU$FDS           ENTRY    ALTRET ;
       58     7837    1   DCL 1 NMU$UNLOCK        ENTRY(1) ALTRET ;
       59     7838        /*
       60     7839                        Variables
       61     7840        */
       62     7841    1   DCL 1 ALTERR            BIT(1) ALIGNED AUTO ;
       63     7842                                %B$ALT ( NAME =
       64     7843              B$ALT             , STCLASS = BASED
       65     7844                                                                        ) ;
       66     7852                                %B$TCB ( NAME =
       67     7853              B$TCB             , STCLASS = "BASED(B$TCB$)"
       68     7854                                                                        ) ;
       69     7857    1   DCL 1 B$TCB$            PTR SYMREF ;
       70     7858    1   DCL 1 B$JIT$            PTR SYMREF;
       71     7859                                %NI$DCT ( NAME =
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:13   
       72     7860              DCT               , STCLASS = BASED
       73     7861                                                                        ) ;
       74     7909    1   DCL 1 I                 SBIN WORD ALIGNED AUTO ;
       75     7910                                %NMD_PIT ( FPTN =
       76     7911              NMD_PIT           , STCLASS=SYMREF
       77     7912                                                                        ) ;
       78     8365                                %FPT_TIME ( FPTN =
       79     8366              TIME              , STCLASS = CONSTANT
       80     8367                                , DEST = UTS
       81     8368                                , SOURCE = CLOCK
       82     8369                                , TSTAMP = UTS
       83     8370                                                                        ) ;
       84     8389    1   DCL 1 UTS               UBIN WORD STATIC ;
       85     8390        %EJECT ;
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:14   
       86     8391        /*
       87     8392        Initialize error return flag.
       88     8393        */
       89     8394    1           ALTERR = '0'B ;

   8394  3 000002   200005 450100                    STZ     ALTERR,,AUTO

       90     8395        /*
       91     8396        Unlock any locked devices.
       92     8397        */
       93     8398    2           DO  I = 0 TO 1 ;

   8398  3 000003   200006 450100                    STZ     I,,AUTO

       94     8399    2               IF  NMD_PIT.DEV.DCT$(I) ~= ADDR(NIL)

   8399  3 000004   200006 236100                    LDQ     I,,AUTO
         3 000005   000032 402007                    MPY     26,DL
         3 000006   000010 236006 xsym               LDQ     NMD_PIT+8,QL
         3 000007   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000010   000041 600000 3                  TZE     s:8404
         3 000011   200006 236100                    LDQ     I,,AUTO
         3 000012   000032 402007                    MPY     26,DL
         3 000013   000010 470406 xsym               LDP0    NMD_PIT+8,QL
         3 000014   000036 236100                    LDQ     30,,PR0
         3 000015   040000 316003                    CANQ    16384,DU
         3 000016   000041 600000 3                  TZE     s:8404
         3 000017   200006 236100                    LDQ     I,,AUTO
         3 000020   000032 402007                    MPY     26,DL
         3 000021   000010 470406 xsym               LDP0    NMD_PIT+8,QL
         3 000022   000036 236100                    LDQ     30,,PR0
         3 000023   000777 376007                    ANQ     511,DL
         3 000024   200010 756100                    STQ     I+2,,AUTO
         3 000025   000000 470400 xsym               LDP0    B$JIT$
         3 000026   000000 236100                    LDQ     0,,PR0
         3 000027   000022 772000                    QRL     18
         3 000030   000777 376007                    ANQ     511,DL
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:15   
         3 000031   200010 116100                    CMPQ    I+2,,AUTO
         3 000032   000041 601000 3                  TNZ     s:8404

       95     8400    2               AND NMD_PIT.DEV.DCT$(I) -> DCT.DP.MIRROR.LOCK
       96     8401    2               AND B$JIT$->B$JIT.USER = NMD_PIT.DEV.DCT$(I) -> DCT.DP.MIRROR.USER#
       97     8402    2               THEN
       98     8403    2                   CALL NMU$UNLOCK ( I ) ;

   8403  3 000033   200006 631500                    EPPR1   I,,AUTO
         3 000034   200010 451500                    STP1    I+2,,AUTO
         3 000035   200010 630500                    EPPR0   I+2,,AUTO
         3 000036   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000037   000000 701000 xent               TSX1    NMU$UNLOCK
         3 000040   000000 011000                    NOP     0

       99     8404    2               END ;

   8404  3 000041   200006 054100                    AOS     I,,AUTO
         3 000042   200006 235100                    LDA     I,,AUTO
         3 000043   000001 115007                    CMPA    1,DL
         3 000044   000004 604400 3                  TMOZ    s:8399

      100     8405        /*
      101     8406        Release any buffers obtained.
      102     8407        */
      103     8408    1           IF  NMD_PIT.FLAGS.BUF#

   8408  3 000045   000273 234000 xsym               SZN     NMD_PIT+187
         3 000046   000055 605000 3                  TPL     s:8417

      104     8409    1           THEN
      105     8410    1               CALL NMU$FDS

   8410  3 000047   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000050   000000 701000 xent               TSX1    NMU$FDS
         3 000051   000053 702000 3                  TSX2    s:8412
         3 000052   000055 710000 3                  TRA     s:8417
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:16   

      106     8411    2               WHENALTRETURN DO ;

      107     8412    2                   ALTERR = '1'B ;

   8412  3 000053   400000 236003                    LDQ     -131072,DU
         3 000054   200005 756100                    STQ     ALTERR,,AUTO

      108     8413    2                   END ;

      109     8414        /*
      110     8415        If specified, change state of devices.  Do DEV(1) first.
      111     8416        */
      112     8417    1           IF  ADDR(NEWSTATE1) ~= ADDR(NIL)

   8417  3 000055   200004 236100                    LDQ     @NEWSTATE1,,AUTO
         3 000056   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000057   000110 600000 3                  TZE     s:8428

      113     8418    1           THEN
      114     8419    1               CALL M$TIME ( TIME )

   8419  3 000060   000000 630400 1                  EPPR0   TIME
         3 000061   420004 713400                    CLIMB   alt,+8196
         3 000062   402000 401760                    pmme    nvectors=5
         3 000063   000076 702000 3                  TSX2    s:8424

      115     8420    2               WHENRETURN DO ;

      116     8421    2                   CALL NMU$CHGSTATE ( 1, NEWSTATE1, UTS ) ;

   8421  3 000064   000000 236000 4                  LDQ     0
         3 000065   200012 756100                    STQ     I+4,,AUTO
         3 000066   200004 236100                    LDQ     @NEWSTATE1,,AUTO
         3 000067   000001 235000 4                  LDA     1
         3 000070   200010 757100                    STAQ    I+2,,AUTO
         3 000071   200010 630500                    EPPR0   I+2,,AUTO
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:17   
         3 000072   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000073   000000 701000 xent               TSX1    NMU$CHGSTATE
         3 000074   000000 011000                    NOP     0

      117     8422    2                   END ;

   8422  3 000075   000110 710000 3                  TRA     s:8428

      118     8423    2               WHENALTRETURN DO ;

      119     8424    2                   ALTERR = '1'B ;

   8424  3 000076   400000 236003                    LDQ     -131072,DU
         3 000077   200005 756100                    STQ     ALTERR,,AUTO

      120     8425    2                   CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR ) ;

   8425  3 000100   000000 470400 xsym               LDP0    B$TCB$
         3 000101   000000 471500                    LDP1    0,,PR0
         3 000102   100102 633500                    EPPR3   66,,PR1
         3 000103   200010 453500                    STP3    I+2,,AUTO
         3 000104   200010 630500                    EPPR0   I+2,,AUTO
         3 000105   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000106   000000 701000 xent               TSX1    NME$ERRMSG
         3 000107   000000 011000                    NOP     0

      121     8426    2                   END ;

      122     8427
      123     8428    1           IF  ADDR(NEWSTATE0) ~= ADDR(NIL)

   8428  3 000110   200003 236100                    LDQ     @NEWSTATE0,,AUTO
         3 000111   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000112   000143 600000 3                  TZE     s:8441

      124     8429    1           THEN
      125     8430    1               CALL M$TIME ( TIME )
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:18   

   8430  3 000113   000000 630400 1                  EPPR0   TIME
         3 000114   420004 713400                    CLIMB   alt,+8196
         3 000115   402000 401760                    pmme    nvectors=5
         3 000116   000131 702000 3                  TSX2    s:8435

      126     8431    2               WHENRETURN DO ;

      127     8432    2                   CALL NMU$CHGSTATE ( 0, NEWSTATE0, UTS ) ;

   8432  3 000117   000000 236000 4                  LDQ     0
         3 000120   200012 756100                    STQ     I+4,,AUTO
         3 000121   200003 236100                    LDQ     @NEWSTATE0,,AUTO
         3 000122   000002 235000 4                  LDA     2
         3 000123   200010 757100                    STAQ    I+2,,AUTO
         3 000124   200010 630500                    EPPR0   I+2,,AUTO
         3 000125   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000126   000000 701000 xent               TSX1    NMU$CHGSTATE
         3 000127   000000 011000                    NOP     0

      128     8433    2                   END ;

   8433  3 000130   000143 710000 3                  TRA     s:8441

      129     8434    2               WHENALTRETURN DO ;

      130     8435    2                   ALTERR = '1'B ;

   8435  3 000131   400000 236003                    LDQ     -131072,DU
         3 000132   200005 756100                    STQ     ALTERR,,AUTO

      131     8436    2                   CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR ) ;

   8436  3 000133   000000 470400 xsym               LDP0    B$TCB$
         3 000134   000000 471500                    LDP1    0,,PR0
         3 000135   100102 633500                    EPPR3   66,,PR1
         3 000136   200010 453500                    STP3    I+2,,AUTO
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:19   
         3 000137   200010 630500                    EPPR0   I+2,,AUTO
         3 000140   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000141   000000 701000 xent               TSX1    NME$ERRMSG
         3 000142   000000 011000                    NOP     0

      132     8437    2                   END ;

      133     8438        /*
      134     8439        Return to the calling procedure.
      135     8440        */
      136     8441    1           IF  ALTERR

   8441  3 000143   200005 234100                    SZN     ALTERR,,AUTO
         3 000144   000146 605000 3                  TPL     s:8445

      137     8442    1           THEN
      138     8443    1               ALTRETURN ;

   8443  3 000145   000000 702200 xent               TSX2  ! X66_AALT

      139     8444    1           ELSE
      140     8445    1               RETURN ;

   8445  3 000146   000000 702200 xent               TSX2  ! X66_ARET
      141     8446
      142     8447    1           END NMU$ABORT ;
      143     8448        %EOD ;

PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:20   
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   NI$TABLES.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$ABORT.
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:21   

 **** Variables and constants ****

  ****  Section 001 RoData NMU$ABORT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 TIME

  ****  Section 002  Data  NMU$ABORT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 UTS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @NEWSTATE0                 4-0-0/w PTR         r     1 @NEWSTATE1
     5-0-0/w BIT         r     1 ALTERR                     6-0-0/w SBIN        r     1 I
    *0-0-0/w UBIN        r     1 NEWSTATE0                 *0-0-0/w UBIN        r     1 NEWSTATE1

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/d STRC(8892)  r     1 NMD_PIT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:22   

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/w STRC(1332)  r     1 DCT


   Procedure NMU$ABORT requires 103 words for executable code.
   Procedure NMU$ABORT requires 12 words of local(AUTO) storage.
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:23   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:24   
          MINI XREF LISTING

ALTERR
      7841**DCL      8394<<ASSIGN   8412<<ASSIGN   8424<<ASSIGN   8435<<ASSIGN   8441>>IF
B$ALT.CODE
      7846**DCL      7846--REDEF    7847--REDEF    7847--REDEF
B$ALT.ERR
      7847**DCL      8425<>CALL     8436<>CALL
B$ALT.ERR.ERR#
      7848**DCL      7848--REDEF
B$ALT.EVID
      7847**DCL      7847--REDEF    7847--REDEF
B$JIT.CPFLAGS1.SLEAZE
      6023**DCL      6023--REDEF
B$JIT.ERR.MID
      5930**DCL      5930--REDEF
B$JIT.JRESPEAK
      6091**DCL      6092--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      6200**DCL      6200--REDEF    6201--REDEF
B$JIT.PNR
      6104**DCL      6104--REDEF
B$JIT.TSLINE
      6198**DCL      6199--REDEF
B$JIT.USER
      5929**DCL      8399>>IF
B$JIT$
      7858**DCL      5924--IMP-PTR  8399>>IF
B$TCB.ALT$
      7855**DCL      8425>>CALL     8436>>CALL
B$TCB$
      7857**DCL      7855--IMP-PTR  8425>>CALL     8436>>CALL
DCT.DP
      7890**DCL      7897--REDEF    7900--REDEF    7901--REDEF    7903--REDEF    7903--REDEF    7904--REDEF
PL6.E3A0      #001=NMU$ABORT File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:51 Page:25   
      7905--REDEF    7905--REDEF
DCT.DP.MIRROR.LOCK
      7893**DCL      8399>>IF
DCT.DP.MIRROR.USER#
      7895**DCL      8399>>IF
DCT.MPC.IOCHANX
      7898**DCL      7898--REDEF
I
      7909**DCL      8398<<DOINDEX  8399>>IF       8399>>IF       8399>>IF       8403<>CALL
M$TIME
      5597**DCL-ENT  8419--CALL     8430--CALL
NEWSTATE0
      7829**DCL        39--PROC     8428--IF       8432<>CALL
NEWSTATE1
      7830**DCL        39--PROC     8417--IF       8421<>CALL
NMD_PIT.DEV.DCT$
      7973**DCL      8399>>IF       8399>>IF       8399>>IF
NMD_PIT.FLAGS.BUF#
      8159**DCL      8408>>IF
NME$ERRMSG
      7834**DCL-ENT  8425--CALL     8436--CALL
NMU$CHGSTATE
      7835**DCL-ENT  8421--CALL     8432--CALL
NMU$FDS
      7836**DCL-ENT  8410--CALL
NMU$UNLOCK
      7837**DCL-ENT  8403--CALL
TIME
      8381**DCL      8419<>CALL     8430<>CALL
TIME.V
      8385**DCL      8381--DCLINIT
UTS
      8389**DCL      8385--DCLINIT  8421<>CALL     8432<>CALL

PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:26   
      144        1        /*M* NMU$BUF - Get/release memory for IO buffers                   */
      145        2        /*T***********************************************************/
      146        3        /*T*                                                         */
      147        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      148        5        /*T*                                                         */
      149        6        /*T***********************************************************/
      150        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      151        8        /*F*
      152        9        NAME:           NMU$BUF
      153       10
      154       11        PURSPOSE:       To get/release memory for IO buffers
      155       12        */
      156       13        /*D*
      157       14        NAME:           NMU$GDS
      158       15
      159       16        CALL:           CALL NMU$GDS ALTRET ( error ) ;
      160       17
      161       18        PARAMETERS:     None.
      162       19
      163       20        DESCRIPTION:
      164       21
      165       22        The NMU$GDS procedure is used to get the memory buffers
      166       23        used for IO.  If this is a COPY operation, only one buffer
      167       24        is obtained.  The same buffer is used for both reading DPnn
      168       25        and writing DPmm.  If this is a COMPARE operation, two buffers
      169       26        are obtained.  One buffer for reading DPnn and one buffer for
      170       27        reading DPmm.
      171       28
      172       29        The buffers are obtained from the next available data segment
      173       30        using M$GDS.  The size of the buffers obtained is controlled
      174       31        by the GRANS option.  One page (1024 words) is obtained for
      175       32        each granule to be read/written.
      176       33
      177       34        If any attempt to get these buffers fail, an error mesage is
      178       35        printed an an ALTRETURN is made to the calling procedure.
      179       36        */
      180       37        %EJECT ;
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:27   
      181       38        NMU$BUF:        PROC            ALTRET ;
      182       39        /*
      183       40                        Includes
      184       41        */
      185       42        %INCLUDE                B_SEGIDS_C ;
      186      581        %INCLUDE                CP_6 ;
      187     6140        %INCLUDE                NM_MACRO_M ;
      188     7545        /*
      189     7546                        Entries
      190     7547        */
      191     7548    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
      192     7549        /*
      193     7550                        Variables
      194     7551        */
      195     7552                                %B$ALT ( NAME =
      196     7553              B$ALT             , STCLASS = BASED
      197     7554                                                                        ) ;
      198     7562                                %B$TCB ( NAME =
      199     7563              B$TCB             , STCLASS = "BASED(B$TCB$)"
      200     7564                                                                        ) ;
      201     7567    1   DCL 1 B$TCB$            PTR SYMREF ;
      202     7568                                %FPT_FDS ( FPTN =
      203     7569              FPT_FDS           , STCLASS = STATIC
      204     7570                                , RESULTS = VLP_VECTOR
      205     7571                                                                        ) ;
      206     7586                                %FPT_GDS ( FPTN =
      207     7587              FPT_GDS           , STCLASS = STATIC
      208     7588                                , FREE = YES
      209     7589                                , PROTECTION = DSWRITE
      210     7590                                , RESULTS = VLP_VECTOR
      211     7591                                                                        ) ;
      212     7607                                %NMD_PIT ( FPTN =
      213     7608              NMD_PIT           , STCLASS=SYMREF
      214     7609                                                                        ) ;
      215     8062    1   DCL 1 VECT              VECTOR ALIGNED BASED ;
      216     8063                                %VLP_VECTOR ( FPTN =
      217     8064              VLP_VECTOR        , STCLASS = STATIC
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:28   
      218     8065                                                                        ) ;
      219     8080                                %VLP_VECTOR ( FPTN =
      220     8081              VLP_VECTOR0       , STCLASS = CONSTANT
      221     8082                                                                        ) ;
      222     8097        %EJECT ;
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:29   
      223     8098    1   NMU$GDS:        ENTRY           ALTRET ;
      224     8099        /*
      225     8100        Calculate the segment size based upon the GRANS option.
      226     8101        */
      227     8102    1           FPT_GDS.V.SEGSIZE# = ( NMD_PIT.GRANS# * 1024 ) - 1 ;
      228     8103        /*
      229     8104        Get the first buffer for COPY and COMPARE operations.
      230     8105        */
      231     8106    1           CALL M$GDS ( FPT_GDS )                  ALTRET ( ALTERR ) ;
      232     8107    1           NMD_PIT.FLAGS.BUF#  = '1'B ;
      233     8108    1           NMD_PIT.DEV.BUF_(0) = ADDR(VLP_VECTOR)->VECT ;
      234     8109    1           NMD_PIT.DEV.BUF$(0) = VLP_VECTOR.PTR$ ;
      235     8110        /*
      236     8111        If this is a COMPARE operation, get another buffer.  Otherwise,
      237     8112        use the same buffer.
      238     8113        */
      239     8114    1           IF  NMD_PIT.COMMAND# = %NMC#KOMPARE
      240     8115    2           THEN DO ;
      241     8116    2               VLP_VECTOR = VLP_VECTOR0 ;
      242     8117    2               CALL M$GDS ( FPT_GDS )              ALTRET ( ALTERR ) ;
      243     8118    2               NMD_PIT.DEV.BUF_(1) = ADDR(VLP_VECTOR)->VECT ;
      244     8119    2               NMD_PIT.DEV.BUF$(1) = VLP_VECTOR.PTR$ ;
      245     8120    2               END ;
      246     8121    2           ELSE DO ;
      247     8122    2               NMD_PIT.DEV.BUF_(1) = NMD_PIT.DEV.BUF_(0) ;
      248     8123    2               NMD_PIT.DEV.BUF$(1) = NMD_PIT.DEV.BUF$(0) ;
      249     8124    2               END ;
      250     8125        /*
      251     8126        Return to the calling procedure.
      252     8127        */
      253     8128    1           RETURN ;
      254     8129
      255     8130    1   ALTERR: CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR ) ;
      256     8131
      257     8132    1   ERROR:  ALTRETURN ;
      258     8133
      259     8134        %EJECT ;
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:30   
      260     8135    1   NMU$FDS:        ENTRY           ALTRET ;
      261     8136        /*
      262     8137        Calculate the segment size based upon the GRANS option.
      263     8138        */
      264     8139    1           FPT_FDS.V.SEGSIZE# = ( NMD_PIT.GRANS# * 1024 ) - 1 ;
      265     8140
      266     8141        /*
      267     8142        Release the first buffer.
      268     8143        */
      269     8144    1           IF  NMD_PIT.DEV.BUF_(0) ~= VECTOR(NIL)
      270     8145    2           THEN DO ;
      271     8146    2               VLP_VECTOR = NMD_PIT.DEV.BUF_(0) ;
      272     8147    2               CALL M$FDS ( FPT_FDS )              ALTRET ( ALTERR ) ;
      273     8148    2               NMD_PIT.DEV.BUF_(0) = VECTOR(NIL) ;
      274     8149    2               NMD_PIT.DEV.BUF$(0) = ADDR(NIL) ;
      275     8150    2               END ;
      276     8151        /*
      277     8152        If this is a COMPARE operation, release the other buffer.  Otherwise,
      278     8153        the buffer has already been released.
      279     8154        */
      280     8155    1           IF  NMD_PIT.COMMAND#     = %NMC#KOMPARE
      281     8156    1           AND NMD_PIT.DEV.BUF_(1) ~= VECTOR(NIL)
      282     8157    2           THEN DO ;
      283     8158    2               VLP_VECTOR = NMD_PIT.DEV.BUF_(1) ;
      284     8159    2               CALL M$FDS ( FPT_FDS )              ALTRET ( ALTERR ) ;
      285     8160    2               END ;
      286     8161
      287     8162    1           NMD_PIT.DEV.BUF_(1) = VECTOR(NIL) ;
      288     8163    1           NMD_PIT.DEV.BUF$(1) = ADDR(NIL) ;
      289     8164
      290     8165    1           NMD_PIT.FLAGS.BUF# = '0'B ;
      291     8166        /*
      292     8167        Return to the calling procedure.
      293     8168        */
      294     8169    1           RETURN ;
      295     8170
      296     8171    1           END NMU$BUF ;
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:31   
      297     8172        %EOD ;

PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:32   
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure NMU$BUF.

   Procedure NMU$BUF requires 85 words for executable code.
   Procedure NMU$BUF requires 6 words of local(AUTO) storage.

PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:33   

 Object Unit name= NMU$BUF                                    File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:51:48.96 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    14     16  NMU$BUF
    2  RoData even  UTS      2      2  NMU$BUF
    3   Proc  even  none    85    125  NMU$BUF
    4  RoData even  none     2      2  NMU$BUF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        0  NMU$BUF
     3      3          yes     yes      Std        0  NMU$GDS
     3     57          yes     yes      Std        0  NMU$FDS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       6 NME$ERRMSG
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:34   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                NMD_PIT
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:35   


      144        1        /*M* NMU$BUF - Get/release memory for IO buffers                   */
      145        2        /*T***********************************************************/
      146        3        /*T*                                                         */
      147        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      148        5        /*T*                                                         */
      149        6        /*T***********************************************************/
      150        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      151        8        /*F*
      152        9        NAME:           NMU$BUF
      153       10
      154       11        PURSPOSE:       To get/release memory for IO buffers
      155       12        */
      156       13        /*D*
      157       14        NAME:           NMU$GDS
      158       15
      159       16        CALL:           CALL NMU$GDS ALTRET ( error ) ;
      160       17
      161       18        PARAMETERS:     None.
      162       19
      163       20        DESCRIPTION:
      164       21
      165       22        The NMU$GDS procedure is used to get the memory buffers
      166       23        used for IO.  If this is a COPY operation, only one buffer
      167       24        is obtained.  The same buffer is used for both reading DPnn
      168       25        and writing DPmm.  If this is a COMPARE operation, two buffers
      169       26        are obtained.  One buffer for reading DPnn and one buffer for
      170       27        reading DPmm.
      171       28
      172       29        The buffers are obtained from the next available data segment
      173       30        using M$GDS.  The size of the buffers obtained is controlled
      174       31        by the GRANS option.  One page (1024 words) is obtained for
      175       32        each granule to be read/written.
      176       33
      177       34        If any attempt to get these buffers fail, an error mesage is
      178       35        printed an an ALTRETURN is made to the calling procedure.
      179       36        */
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:36   
      180       37        %EJECT ;
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:37   
      181       38        NMU$BUF:        PROC            ALTRET ;

     38  3 000000   000000 700200 xent  NMU$BUF      TSX0  ! X66_AUTO_0
         3 000001   000006 000000                    ZERO    6,0
         3 000002   000005 710000 3                  TRA     s:8102

      182       39        /*
      183       40                        Includes
      184       41        */
      185       42        %INCLUDE                B_SEGIDS_C ;
      186      581        %INCLUDE                CP_6 ;
      187     6140        %INCLUDE                NM_MACRO_M ;
      188     7545        /*
      189     7546                        Entries
      190     7547        */
      191     7548    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
      192     7549        /*
      193     7550                        Variables
      194     7551        */
      195     7552                                %B$ALT ( NAME =
      196     7553              B$ALT             , STCLASS = BASED
      197     7554                                                                        ) ;
      198     7562                                %B$TCB ( NAME =
      199     7563              B$TCB             , STCLASS = "BASED(B$TCB$)"
      200     7564                                                                        ) ;
      201     7567    1   DCL 1 B$TCB$            PTR SYMREF ;
      202     7568                                %FPT_FDS ( FPTN =
      203     7569              FPT_FDS           , STCLASS = STATIC
      204     7570                                , RESULTS = VLP_VECTOR
      205     7571                                                                        ) ;
      206     7586                                %FPT_GDS ( FPTN =
      207     7587              FPT_GDS           , STCLASS = STATIC
      208     7588                                , FREE = YES
      209     7589                                , PROTECTION = DSWRITE
      210     7590                                , RESULTS = VLP_VECTOR
      211     7591                                                                        ) ;
      212     7607                                %NMD_PIT ( FPTN =
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:38   
      213     7608              NMD_PIT           , STCLASS=SYMREF
      214     7609                                                                        ) ;
      215     8062    1   DCL 1 VECT              VECTOR ALIGNED BASED ;
      216     8063                                %VLP_VECTOR ( FPTN =
      217     8064              VLP_VECTOR        , STCLASS = STATIC
      218     8065                                                                        ) ;
      219     8080                                %VLP_VECTOR ( FPTN =
      220     8081              VLP_VECTOR0       , STCLASS = CONSTANT
      221     8082                                                                        ) ;
      222     8097        %EJECT ;
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:39   
      223     8098    1   NMU$GDS:        ENTRY           ALTRET ;

   8098  3 000003   000000 700200 xent  NMU$GDS      TSX0  ! X66_AUTO_0
         3 000004   000006 000000                    ZERO    6,0

      224     8099        /*
      225     8100        Calculate the segment size based upon the GRANS option.
      226     8101        */
      227     8102    1           FPT_GDS.V.SEGSIZE# = ( NMD_PIT.GRANS# * 1024 ) - 1 ;

   8102  3 000005   000274 235000 xsym               LDA     NMD_PIT+188
         3 000006   000012 735000                    ALS     10
         3 000007   777777 620005                    EAX0    -1,AL
         3 000010   000012 440000 1                  SXL0    FPT_GDS+4

      228     8103        /*
      229     8104        Get the first buffer for COPY and COMPARE operations.
      230     8105        */
      231     8106    1           CALL M$GDS ( FPT_GDS )                  ALTRET ( ALTERR ) ;

   8106  3 000011   000006 630400 1                  EPPR0   FPT_GDS
         3 000012   430001 713400                    CLIMB   alt,gds
         3 000013   400400 401760                    pmme    nvectors=2
         3 000014   000046 702000 3                  TSX2    ALTERR

      232     8107    1           NMD_PIT.FLAGS.BUF#  = '1'B ;

   8107  3 000015   400000 236003                    LDQ     -131072,DU
         3 000016   000273 256000 xsym               ORSQ    NMD_PIT+187

      233     8108    1           NMD_PIT.DEV.BUF_(0) = ADDR(VLP_VECTOR)->VECT ;

   8108  3 000017   000014 237000 1                  LDAQ    VLP_VECTOR
         3 000020   000002 757000 xsym               STAQ    NMD_PIT+2

      234     8109    1           NMD_PIT.DEV.BUF$(0) = VLP_VECTOR.PTR$ ;

PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:40   
   8109  3 000021   000015 236000 1                  LDQ     VLP_VECTOR+1
         3 000022   000004 756000 xsym               STQ     NMD_PIT+4

      235     8110        /*
      236     8111        If this is a COMPARE operation, get another buffer.  Otherwise,
      237     8112        use the same buffer.
      238     8113        */
      239     8114    1           IF  NMD_PIT.COMMAND# = %NMC#KOMPARE

   8114  3 000023   000000 235000 xsym               LDA     NMD_PIT
         3 000024   000001 115007                    CMPA    1,DL
         3 000025   000041 601000 3                  TNZ     s:8122

      240     8115    2           THEN DO ;

      241     8116    2               VLP_VECTOR = VLP_VECTOR0 ;

   8116  3 000026   000000 237000 2                  LDAQ    VLP_VECTOR0
         3 000027   000014 757000 1                  STAQ    VLP_VECTOR

      242     8117    2               CALL M$GDS ( FPT_GDS )              ALTRET ( ALTERR ) ;

   8117  3 000030   000006 630400 1                  EPPR0   FPT_GDS
         3 000031   430001 713400                    CLIMB   alt,gds
         3 000032   400400 401760                    pmme    nvectors=2
         3 000033   000046 702000 3                  TSX2    ALTERR

      243     8118    2               NMD_PIT.DEV.BUF_(1) = ADDR(VLP_VECTOR)->VECT ;

   8118  3 000034   000014 237000 1                  LDAQ    VLP_VECTOR
         3 000035   000034 757000 xsym               STAQ    NMD_PIT+28

      244     8119    2               NMD_PIT.DEV.BUF$(1) = VLP_VECTOR.PTR$ ;

   8119  3 000036   000015 236000 1                  LDQ     VLP_VECTOR+1
         3 000037   000036 756000 xsym               STQ     NMD_PIT+30

PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:41   
      245     8120    2               END ;

   8120  3 000040   000045 710000 3                  TRA     s:8128

      246     8121    2           ELSE DO ;

      247     8122    2               NMD_PIT.DEV.BUF_(1) = NMD_PIT.DEV.BUF_(0) ;

   8122  3 000041   000002 237000 xsym               LDAQ    NMD_PIT+2
         3 000042   000034 757000 xsym               STAQ    NMD_PIT+28

      248     8123    2               NMD_PIT.DEV.BUF$(1) = NMD_PIT.DEV.BUF$(0) ;

   8123  3 000043   000004 236000 xsym               LDQ     NMD_PIT+4
         3 000044   000036 756000 xsym               STQ     NMD_PIT+30

      249     8124    2               END ;

      250     8125        /*
      251     8126        Return to the calling procedure.
      252     8127        */
      253     8128    1           RETURN ;

   8128  3 000045   000000 702200 xent               TSX2  ! X66_ARET

      254     8129
      255     8130    1   ALTERR: CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR ) ;

   8130  3 000046   000000 470400 xsym  ALTERR       LDP0    B$TCB$
         3 000047   000000 471500                    LDP1    0,,PR0
         3 000050   100102 633500                    EPPR3   66,,PR1
         3 000051   200004 453500                    STP3    4,,AUTO
         3 000052   200004 630500                    EPPR0   4,,AUTO
         3 000053   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000054   000000 701000 xent               TSX1    NME$ERRMSG
         3 000055   000000 011000                    NOP     0

PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:42   
      256     8131
      257     8132    1   ERROR:  ALTRETURN ;

   8132  3 000056   000000 702200 xent  ERROR        TSX2  ! X66_AALT

      258     8133
      259     8134        %EJECT ;
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:43   
      260     8135    1   NMU$FDS:        ENTRY           ALTRET ;

   8135  3 000057   000000 700200 xent  NMU$FDS      TSX0  ! X66_AUTO_0
         3 000060   000006 000000                    ZERO    6,0

      261     8136        /*
      262     8137        Calculate the segment size based upon the GRANS option.
      263     8138        */
      264     8139    1           FPT_FDS.V.SEGSIZE# = ( NMD_PIT.GRANS# * 1024 ) - 1 ;

   8139  3 000061   000274 235000 xsym               LDA     NMD_PIT+188
         3 000062   000012 735000                    ALS     10
         3 000063   777777 620005                    EAX0    -1,AL
         3 000064   000004 440000 1                  SXL0    FPT_FDS+4

      265     8140
      266     8141        /*
      267     8142        Release the first buffer.
      268     8143        */
      269     8144    1           IF  NMD_PIT.DEV.BUF_(0) ~= VECTOR(NIL)

   8144  3 000065   000002 237000 xsym               LDAQ    NMD_PIT+2
         3 000066   000000 117000 4                  CMPAQ   0
         3 000067   000102 600000 3                  TZE     s:8155

      270     8145    2           THEN DO ;

      271     8146    2               VLP_VECTOR = NMD_PIT.DEV.BUF_(0) ;

   8146  3 000070   000002 237000 xsym               LDAQ    NMD_PIT+2
         3 000071   000014 757000 1                  STAQ    VLP_VECTOR

      272     8147    2               CALL M$FDS ( FPT_FDS )              ALTRET ( ALTERR ) ;

   8147  3 000072   000000 630400 1                  EPPR0   FPT_FDS
         3 000073   430002 713400                    CLIMB   alt,fds
         3 000074   400400 401760                    pmme    nvectors=2
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:44   
         3 000075   000046 702000 3                  TSX2    ALTERR

      273     8148    2               NMD_PIT.DEV.BUF_(0) = VECTOR(NIL) ;

   8148  3 000076   000000 237000 4                  LDAQ    0
         3 000077   000002 757000 xsym               STAQ    NMD_PIT+2

      274     8149    2               NMD_PIT.DEV.BUF$(0) = ADDR(NIL) ;

   8149  3 000100   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000101   000004 756000 xsym               STQ     NMD_PIT+4

      275     8150    2               END ;

      276     8151        /*
      277     8152        If this is a COMPARE operation, release the other buffer.  Otherwise,
      278     8153        the buffer has already been released.
      279     8154        */
      280     8155    1           IF  NMD_PIT.COMMAND#     = %NMC#KOMPARE

   8155  3 000102   000000 236000 xsym               LDQ     NMD_PIT
         3 000103   000001 116007                    CMPQ    1,DL
         3 000104   000116 601000 3                  TNZ     s:8162
         3 000105   000034 237000 xsym               LDAQ    NMD_PIT+28
         3 000106   000000 117000 4                  CMPAQ   0
         3 000107   000116 600000 3                  TZE     s:8162

      281     8156    1           AND NMD_PIT.DEV.BUF_(1) ~= VECTOR(NIL)
      282     8157    2           THEN DO ;

      283     8158    2               VLP_VECTOR = NMD_PIT.DEV.BUF_(1) ;

   8158  3 000110   000034 237000 xsym               LDAQ    NMD_PIT+28
         3 000111   000014 757000 1                  STAQ    VLP_VECTOR

      284     8159    2               CALL M$FDS ( FPT_FDS )              ALTRET ( ALTERR ) ;

PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:45   
   8159  3 000112   000000 630400 1                  EPPR0   FPT_FDS
         3 000113   430002 713400                    CLIMB   alt,fds
         3 000114   400400 401760                    pmme    nvectors=2
         3 000115   000046 702000 3                  TSX2    ALTERR

      285     8160    2               END ;

      286     8161
      287     8162    1           NMD_PIT.DEV.BUF_(1) = VECTOR(NIL) ;

   8162  3 000116   000000 237000 4                  LDAQ    0
         3 000117   000034 757000 xsym               STAQ    NMD_PIT+28

      288     8163    1           NMD_PIT.DEV.BUF$(1) = ADDR(NIL) ;

   8163  3 000120   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000121   000036 756000 xsym               STQ     NMD_PIT+30

      289     8164
      290     8165    1           NMD_PIT.FLAGS.BUF# = '0'B ;

   8165  3 000122   000031 236000 xsym               LDQ     B_VECTNIL+25
         3 000123   000273 356000 xsym               ANSQ    NMD_PIT+187

      291     8166        /*
      292     8167        Return to the calling procedure.
      293     8168        */
      294     8169    1           RETURN ;

   8169  3 000124   000000 702200 xent               TSX2  ! X66_ARET
      295     8170
      296     8171    1           END NMU$BUF ;
      297     8172        %EOD ;

PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:46   
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure NMU$BUF.
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:47   

 **** Variables and constants ****

  ****  Section 001  Data  NMU$BUF

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 FPT_FDS                    6-0-0/d STRC(216)   r     1 FPT_GDS
    14-0-0/d STRC(72)    r     1 VLP_VECTOR

  ****  Section 002 RoData NMU$BUF

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(72)    r     1 VLP_VECTOR0

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/d STRC(8892)  r     1 NMD_PIT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w VECT        r     1 VECT


   Procedure NMU$BUF requires 85 words for executable code.
   Procedure NMU$BUF requires 6 words of local(AUTO) storage.
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:48   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:49   
          MINI XREF LISTING

ALTERR
      8130**LABEL    8106--CALLALT  8117--CALLALT  8147--CALLALT  8159--CALLALT
B$ALT.CODE
      7556**DCL      7556--REDEF    7557--REDEF    7557--REDEF
B$ALT.ERR
      7557**DCL      8130<>CALL
B$ALT.ERR.ERR#
      7558**DCL      7558--REDEF
B$ALT.EVID
      7557**DCL      7557--REDEF    7557--REDEF
B$TCB.ALT$
      7565**DCL      8130>>CALL
B$TCB$
      7567**DCL      7565--IMP-PTR  8130>>CALL
FPT_FDS
      7582**DCL      8147<>CALL     8159<>CALL
FPT_FDS.V
      7582**DCL      7582--DCLINIT
FPT_FDS.V.SEGSIZE#
      7584**DCL      8139<<ASSIGN
FPT_GDS
      7602**DCL      8106<>CALL     8117<>CALL
FPT_GDS.V
      7602**DCL      7602--DCLINIT
FPT_GDS.V.SEGSIZE#
      7605**DCL      8102<<ASSIGN
M$FDS
      6103**DCL-ENT  8147--CALL     8159--CALL
M$GDS
      6103**DCL-ENT  8106--CALL     8117--CALL
NMD_PIT.COMMAND#
      7628**DCL      8114>>IF       8155>>IF
PL6.E3A0      #002=NMU$BUF File=NMU$UTIL.:E05TSI                                 WED 07/30/97 03:51 Page:50   
NMD_PIT.DEV.BUF$
      7647**DCL      8109<<ASSIGN   8119<<ASSIGN   8123<<ASSIGN   8123>>ASSIGN   8149<<ASSIGN   8163<<ASSIGN
NMD_PIT.DEV.BUF_
      7642**DCL      8108<<ASSIGN   8118<<ASSIGN   8122<<ASSIGN   8122>>ASSIGN   8144>>IF       8146>>ASSIGN
      8148<<ASSIGN   8155>>IF       8158>>ASSIGN   8162<<ASSIGN
NMD_PIT.FLAGS.BUF#
      7856**DCL      8107<<ASSIGN   8165<<ASSIGN
NMD_PIT.GRANS#
      7898**DCL      8102>>ASSIGN   8139>>ASSIGN
NME$ERRMSG
      7548**DCL-ENT  8130--CALL
VECT
      8062**DCL      8108>>ASSIGN   8118>>ASSIGN
VLP_VECTOR
      8076**DCL      7582--DCLINIT  7602--DCLINIT  8108--ASSIGN   8116<<ASSIGN   8118--ASSIGN   8146<<ASSIGN
      8158<<ASSIGN
VLP_VECTOR.PTR$
      8078**DCL      8109>>ASSIGN   8119>>ASSIGN
VLP_VECTOR.W2
      8077**DCL      8078--REDEF
VLP_VECTOR0
      8093**DCL      8116>>ASSIGN
VLP_VECTOR0.W2
      8094**DCL      8095--REDEF

PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:51   
      298        1        /*M* NMU$CCCCHHSS - Calculate the cylinder, head, and sector       */
      299        2        /*T***********************************************************/
      300        3        /*T*                                                         */
      301        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      302        5        /*T*                                                         */
      303        6        /*T***********************************************************/
      304        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      305        8        /*F*
      306        9        NAME:           NMU$CCCCHHSS
      307       10
      308       11        PURPOSE:        To calculate the cylinder, head, and sector for
      309       12                        a specified device logical address.
      310       13
      311       14        DESCRIPTION:
      312       15
      313       16        The NMU$CCCCHHSS procedure is used to calculate the cylinder, head
      314       17        and sector for a specified device logical address.
      315       18        */
      316       19        /*D*
      317       20        NAME:           NMU$CCCCHHSS
      318       21
      319       22        CALL:           CALL NMU$CCCCHHSS ( cccc, hh, ss, dla ) ;
      320       23
      321       24        PARAMETERS:
      322       25         */
      323       26        /*K*
      324       27        cccc            is SBIN WORD that is returned with the cylinder number
      325       28                of the specified device logical address.
      326       29        */
      327       30        /*K*
      328       31        hh              is SBIN WORD that is returned with the head number
      329       32                of the specified device logical address.
      330       33        */
      331       34        /*K*
      332       35        ss              is SBIN WORD that is returned with the sector number
      333       36                of the specified device logical address.
      334       37        */
PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:52   
      335       38        /*K*
      336       39        dla             is SBIN WORD that specifies the device logical address
      337       40                to be converted to CCCC-HH-SS form.
      338       41        */
      339       42        /*D*
      340       43        DESCRIPTION:
      341       44
      342       45        The NMU$CCCCHHSS procedure is used to calculate the cylinder, head
      343       46        and sector for a specified device logical address.
      344       47        */
      345       48        %EJECT ;
PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:53   
      346       49        NMU$CCCCHHSS:   PROC ( CCCC, HH, SS, DLA ) ;
      347       50        /*
      348       51                        Includes
      349       52        */
      350       53        %INCLUDE                CP_6 ;
      351     5612        %INCLUDE                NM_MACRO_M ;
      352     7017        %INCLUDE                NM_PERR_C ;
      353     7094        /*
      354     7095                        Parameters
      355     7096        */
      356     7097    1   DCL 1 CCCC              SBIN WORD ALIGNED PARAM ;
      357     7098    1   DCL 1 HH                SBIN WORD ALIGNED PARAM ;
      358     7099    1   DCL 1 SS                SBIN WORD ALIGNED PARAM ;
      359     7100    1   DCL 1 DLA               SBIN WORD ALIGNED PARAM ;
      360     7101        /*
      361     7102                        Variables
      362     7103        */
      363     7104                                %NMD_PIT ( FPTN =
      364     7105              NMD_PIT           , STCLASS = SYMREF
      365     7106                                                                        ) ;
      366     7559    1   DCL 1 SEEK              SBIN WORD ALIGNED AUTO ;
      367     7560        %EJECT ;
PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:54   
      368     7561        /*
      369     7562        Calculate cylinder, head, and sector from specified device logical
      370     7563        address.
      371     7564        */
      372     7565    1           SEEK = DLA * NMD_PIT.DEV.GRANSIZE(0) ;
      373     7566    1           SS   = MOD ( SEEK, NMD_PIT.DEV.SECT(0) ) ;
      374     7567
      375     7568    1           SEEK = SEEK / NMD_PIT.DEV.SECT(0) ;
      376     7569    1           HH   = MOD ( SEEK, NMD_PIT.DEV.TRK(0) ) ;
      377     7570
      378     7571    1           SEEK = SEEK / NMD_PIT.DEV.TRK(0) ;
      379     7572    1           CCCC = SEEK ;
      380     7573
      381     7574    1           RETURN ;
      382     7575
      383     7576    1           END NMU$CCCCHHSS ;
      384     7577        %EOD ;

PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:55   
--  Include file information  --

   NM_PERR_C.:E05TOU  is referenced.
   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$CCCCHHSS.

   Procedure NMU$CCCCHHSS requires 21 words for executable code.
   Procedure NMU$CCCCHHSS requires 8 words of local(AUTO) storage.

PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:56   

 Object Unit name= NMU$CCCCHHSS                               File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:52:28.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    21     25  NMU$CCCCHHSS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        4  NMU$CCCCHHSS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_4
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  NMD_PIT
PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:57   


      298        1        /*M* NMU$CCCCHHSS - Calculate the cylinder, head, and sector       */
      299        2        /*T***********************************************************/
      300        3        /*T*                                                         */
      301        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      302        5        /*T*                                                         */
      303        6        /*T***********************************************************/
      304        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      305        8        /*F*
      306        9        NAME:           NMU$CCCCHHSS
      307       10
      308       11        PURPOSE:        To calculate the cylinder, head, and sector for
      309       12                        a specified device logical address.
      310       13
      311       14        DESCRIPTION:
      312       15
      313       16        The NMU$CCCCHHSS procedure is used to calculate the cylinder, head
      314       17        and sector for a specified device logical address.
      315       18        */
      316       19        /*D*
      317       20        NAME:           NMU$CCCCHHSS
      318       21
      319       22        CALL:           CALL NMU$CCCCHHSS ( cccc, hh, ss, dla ) ;
      320       23
      321       24        PARAMETERS:
      322       25         */
      323       26        /*K*
      324       27        cccc            is SBIN WORD that is returned with the cylinder number
      325       28                of the specified device logical address.
      326       29        */
      327       30        /*K*
      328       31        hh              is SBIN WORD that is returned with the head number
      329       32                of the specified device logical address.
      330       33        */
      331       34        /*K*
      332       35        ss              is SBIN WORD that is returned with the sector number
      333       36                of the specified device logical address.
PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:58   
      334       37        */
      335       38        /*K*
      336       39        dla             is SBIN WORD that specifies the device logical address
      337       40                to be converted to CCCC-HH-SS form.
      338       41        */
      339       42        /*D*
      340       43        DESCRIPTION:
      341       44
      342       45        The NMU$CCCCHHSS procedure is used to calculate the cylinder, head
      343       46        and sector for a specified device logical address.
      344       47        */
      345       48        %EJECT ;
PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:59   
      346       49        NMU$CCCCHHSS:   PROC ( CCCC, HH, SS, DLA ) ;

     49  1 000000   000000 700200 xent  NMU$CCCCHHSS TSX0  ! X66_AUTO_4
         1 000001   000010 000004                    ZERO    8,4

      347       50        /*
      348       51                        Includes
      349       52        */
      350       53        %INCLUDE                CP_6 ;
      351     5612        %INCLUDE                NM_MACRO_M ;
      352     7017        %INCLUDE                NM_PERR_C ;
      353     7094        /*
      354     7095                        Parameters
      355     7096        */
      356     7097    1   DCL 1 CCCC              SBIN WORD ALIGNED PARAM ;
      357     7098    1   DCL 1 HH                SBIN WORD ALIGNED PARAM ;
      358     7099    1   DCL 1 SS                SBIN WORD ALIGNED PARAM ;
      359     7100    1   DCL 1 DLA               SBIN WORD ALIGNED PARAM ;
      360     7101        /*
      361     7102                        Variables
      362     7103        */
      363     7104                                %NMD_PIT ( FPTN =
      364     7105              NMD_PIT           , STCLASS = SYMREF
      365     7106                                                                        ) ;
      366     7559    1   DCL 1 SEEK              SBIN WORD ALIGNED AUTO ;
      367     7560        %EJECT ;
PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:60   
      368     7561        /*
      369     7562        Calculate cylinder, head, and sector from specified device logical
      370     7563        address.
      371     7564        */
      372     7565    1           SEEK = DLA * NMD_PIT.DEV.GRANSIZE(0) ;

   7565  1 000002   200006 470500                    LDP0    @DLA,,AUTO
         1 000003   000000 236100                    LDQ     0,,PR0
         1 000004   000016 402000 xsym               MPY     NMD_PIT+14
         1 000005   200007 756100                    STQ     SEEK,,AUTO

      373     7566    1           SS   = MOD ( SEEK, NMD_PIT.DEV.SECT(0) ) ;

   7566  1 000006   000024 506000 xsym               DIV     NMD_PIT+20
         1 000007   200005 471500                    LDP1    @SS,,AUTO
         1 000010   100000 755100                    STA     0,,PR1

      374     7567
      375     7568    1           SEEK = SEEK / NMD_PIT.DEV.SECT(0) ;

   7568  1 000011   200007 236100                    LDQ     SEEK,,AUTO
         1 000012   000024 506000 xsym               DIV     NMD_PIT+20
         1 000013   200007 756100                    STQ     SEEK,,AUTO

      376     7569    1           HH   = MOD ( SEEK, NMD_PIT.DEV.TRK(0) ) ;

   7569  1 000014   000026 506000 xsym               DIV     NMD_PIT+22
         1 000015   200004 473500                    LDP3    @HH,,AUTO
         1 000016   300000 755100                    STA     0,,PR3

      377     7570
      378     7571    1           SEEK = SEEK / NMD_PIT.DEV.TRK(0) ;

   7571  1 000017   200007 236100                    LDQ     SEEK,,AUTO
         1 000020   000026 506000 xsym               DIV     NMD_PIT+22
         1 000021   200007 756100                    STQ     SEEK,,AUTO

PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:61   
      379     7572    1           CCCC = SEEK ;

   7572  1 000022   200003 474500                    LDP4    @CCCC,,AUTO
         1 000023   400000 756100                    STQ     0,,PR4

      380     7573
      381     7574    1           RETURN ;

   7574  1 000024   000000 702200 xent               TSX2  ! X66_ARET
      382     7575
      383     7576    1           END NMU$CCCCHHSS ;
      384     7577        %EOD ;

PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:62   
--  Include file information  --

   NM_PERR_C.:E05TOU  is referenced.
   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$CCCCHHSS.
PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:63   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @CCCC                      6-0-0/w PTR         r     1 @DLA
     4-0-0/w PTR         r     1 @HH                        5-0-0/w PTR         r     1 @SS
    *0-0-0/w SBIN        r     1 CCCC                      *0-0-0/w SBIN        r     1 DLA
    *0-0-0/w SBIN        r     1 HH                         7-0-0/w SBIN        r     1 SEEK
    *0-0-0/w SBIN        r     1 SS

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8892)  r     1 NMD_PIT


   Procedure NMU$CCCCHHSS requires 21 words for executable code.
   Procedure NMU$CCCCHHSS requires 8 words of local(AUTO) storage.
PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:64   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=NMU$CCCCHHSS File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:65   
          MINI XREF LISTING

CCCC
      7097**DCL        49--PROC     7572<<ASSIGN
DLA
      7100**DCL        49--PROC     7565>>ASSIGN
HH
      7098**DCL        49--PROC     7569<<ASSIGN
NMD_PIT.DEV.GRANSIZE
      7212**DCL      7565>>ASSIGN
NMD_PIT.DEV.SECT
      7242**DCL      7566>>ASSIGN   7568>>ASSIGN
NMD_PIT.DEV.TRK
      7252**DCL      7569>>ASSIGN   7571>>ASSIGN
SEEK
      7559**DCL      7565<<ASSIGN   7566>>ASSIGN   7568<<ASSIGN   7568>>ASSIGN   7569>>ASSIGN   7571<<ASSIGN
      7571>>ASSIGN   7572>>ASSIGN
SS
      7099**DCL        49--PROC     7566<<ASSIGN

PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:66   
      385        1        /*M* NMU$CHGSTATE - Change the state of the selected device.       */
      386        2        /*T***********************************************************/
      387        3        /*T*                                                         */
      388        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      389        5        /*T*                                                         */
      390        6        /*T***********************************************************/
      391        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      392        8        /*F*
      393        9        NAME:           NMU$CHGSTATE
      394       10
      395       11        PURPOSE:        To change the state of the specified device.
      396       12
      397       13        DESCRIPTION:
      398       14
      399       15        The NMU$CHGSTATE procedure is used to change the state of the
      400       16        specified device.
      401       17        */
      402       18        /*D*
      403       19        NAME:           NMU$CHGSTATE
      404       20
      405       21        CALL:           CALL NMU$CHGSTATE ( i, newstate, uts ) ALTRET ( error ) ;
      406       22
      407       23        PARAMETERS:
      408       24        */
      409       25        /*K*
      410       26        i               is UBIN WORD that is the index into NMD_PIT.DEV.
      411       27                i must be either 0 or 1.
      412       28        */
      413       29        /*K*
      414       30        newstate        is a UBIN WORD that specifies the new state for the
      415       31                specified device.
      416       32        */
      417       33        /*K*
      418       34        uts             is a UBIN WORD that specifies the new UTS value for the
      419       35                specified device.
      420       36        */
      421       37        /*D*
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:67   
      422       38        DESCRIPTION:
      423       39
      424       40        The NMU$CHGSTATE procedure is used to change the state of the
      425       41        specified device.
      426       42        */
      427       43        %EJECT ;
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:68   
      428       44        NMU$CHGSTATE:   PROC ( I, NEWSTATE, UTS ) ALTRET ;
      429       45        /*
      430       46                        Includes
      431       47        */
      432       48        %INCLUDE                CP_6 ;
      433     5607        %INCLUDE                NM_MACRO_M ;
      434     7012        %INCLUDE                NM_PERR_C ;
      435     7089        /*
      436     7090                        Parameters
      437     7091        */
      438     7092    1   DCL 1 I                 UBIN ALIGNED PARAM ;
      439     7093    1   DCL 1 NEWSTATE          UBIN ALIGNED PARAM ;
      440     7094    1   DCL 1 UTS               UBIN ALIGNED PARAM ;
      441     7095        /*
      442     7096                        Entries
      443     7097        */
      444     7098    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
      445     7099        /*
      446     7100                        Variables
      447     7101        */
      448     7102                                %B$ALT ( NAME =
      449     7103              B$ALT             ,     STCLASS=BASED
      450     7104                                                                        ) ;
      451     7112                                %B$TCB  ( NAME =
      452     7113              B$TCB             , STCLASS = "BASED(B$TCB$)"
      453     7114                                                                        ) ;
      454     7117    1   DCL 1 B$TCB$            PTR SYMREF ;
      455     7118                                %FPT_MIRROR ( FPTN =
      456     7119              CHGSTATE          , STCLASS = STATIC
      457     7120                                , FUNCTION = CHGSTATE
      458     7121                                                                        ) ;
      459     7144                                %NMD_PIT ( FPTN =
      460     7145              NMD_PIT           , STCLASS = SYMREF
      461     7146                                                                        ) ;
      462     7599                                %VLP_ERRCODE ( FPTN =
      463     7600              NMU#CHGSTATE      , STCLASS = CONSTANT
      464     7601                                , ERR# = %E$NMD#CHGSTATE
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:69   
      465     7602                                , FCG  = %NMD#FCG
      466     7603                                , MID  = 'U'
      467     7604                                , MON  = %NO#
      468     7605                                , SEV  = 0
      469     7606                                                                        ) ;
      470     7651        %EJECT ;
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:70   
      471     7652        /*
      472     7653        Change the specified device to the specified state.
      473     7654        */
      474     7655    1           CHGSTATE.V.DCTX#  = NMD_PIT.DEV.DCTX(I) ;
      475     7656    1           CHGSTATE.V.STATE# = NEWSTATE ;
      476     7657    1           CHGSTATE.V.UTS#   = UTS ;
      477     7658
      478     7659    1           CALL M$MIRROR ( CHGSTATE )              ALTRET ( ALTERR ) ;
      479     7660
      480     7661    1           NMD_PIT.DEV.STATE(I) = NEWSTATE ;
      481     7662    1           NMD_PIT.DEV.UTS(I)   = UTS ;
      482     7663        /*
      483     7664        Entry for Change State Message.
      484     7665        */
      485     7666    1   NMU$CHGSTATEMSG:        ENTRY ( I, NEWSTATE ) ALTRET ;
      486     7667        /*E*
      487     7668        ERROR:  NMU-E$NMD#CHGSTATE-0
      488     7669        MESSAGE:  %U1 Mirrored Disk device is now %U2
      489     7670        DESCRIPTION:  The specified Mirrored Disk device state has been changed
      490     7671                      to the specified value.
      491     7672        */
      492     7673    1           CALL NME$ERRMSG ( NMU#CHGSTATE, ,
      493     7674    1                             VECTOR(NMD_PIT.DEV.NAME(I)),
      494     7675    1                             NMD_PIT.STATE.V_(NEWSTATE) ) ;
      495     7676        /*
      496     7677        Return to the calling routine.
      497     7678        */
      498     7679    1           RETURN ;
      499     7680
      500     7681    1   ALTERR: CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR ) ;
      501     7682
      502     7683    1           ALTRETURN ;
      503     7684
      504     7685    1           END NMU$CHGSTATE ;
      505     7686        %EOD ;

PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:71   
--  Include file information  --

   NM_PERR_C.:E05TOU  is referenced.
   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$CHGSTATE.

   Procedure NMU$CHGSTATE requires 67 words for executable code.
   Procedure NMU$CHGSTATE requires 12 words of local(AUTO) storage.

PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:72   

 Object Unit name= NMU$CHGSTATE                               File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:52:56.28 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none     6      6  NMU$CHGSTATE
    2  RoData even  UTS      1      1  NMU$CHGSTATE
    3   Proc  even  none    67    103  NMU$CHGSTATE
    4  RoData even  none     4      4  NMU$CHGSTATE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        3  NMU$CHGSTATE
     3     41          yes     yes      Std        2  NMU$CHGSTATEMSG

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       6 NME$ERRMSG
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:73   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                NMD_PIT
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:74   


      385        1        /*M* NMU$CHGSTATE - Change the state of the selected device.       */
      386        2        /*T***********************************************************/
      387        3        /*T*                                                         */
      388        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      389        5        /*T*                                                         */
      390        6        /*T***********************************************************/
      391        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      392        8        /*F*
      393        9        NAME:           NMU$CHGSTATE
      394       10
      395       11        PURPOSE:        To change the state of the specified device.
      396       12
      397       13        DESCRIPTION:
      398       14
      399       15        The NMU$CHGSTATE procedure is used to change the state of the
      400       16        specified device.
      401       17        */
      402       18        /*D*
      403       19        NAME:           NMU$CHGSTATE
      404       20
      405       21        CALL:           CALL NMU$CHGSTATE ( i, newstate, uts ) ALTRET ( error ) ;
      406       22
      407       23        PARAMETERS:
      408       24        */
      409       25        /*K*
      410       26        i               is UBIN WORD that is the index into NMD_PIT.DEV.
      411       27                i must be either 0 or 1.
      412       28        */
      413       29        /*K*
      414       30        newstate        is a UBIN WORD that specifies the new state for the
      415       31                specified device.
      416       32        */
      417       33        /*K*
      418       34        uts             is a UBIN WORD that specifies the new UTS value for the
      419       35                specified device.
      420       36        */
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:75   
      421       37        /*D*
      422       38        DESCRIPTION:
      423       39
      424       40        The NMU$CHGSTATE procedure is used to change the state of the
      425       41        specified device.
      426       42        */
      427       43        %EJECT ;
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:76   
      428       44        NMU$CHGSTATE:   PROC ( I, NEWSTATE, UTS ) ALTRET ;

     44  3 000000   000000 700200 xent  NMU$CHGSTATE TSX0  ! X66_AUTO_3
         3 000001   000014 000003                    ZERO    12,3

      429       45        /*
      430       46                        Includes
      431       47        */
      432       48        %INCLUDE                CP_6 ;
      433     5607        %INCLUDE                NM_MACRO_M ;
      434     7012        %INCLUDE                NM_PERR_C ;
      435     7089        /*
      436     7090                        Parameters
      437     7091        */
      438     7092    1   DCL 1 I                 UBIN ALIGNED PARAM ;
      439     7093    1   DCL 1 NEWSTATE          UBIN ALIGNED PARAM ;
      440     7094    1   DCL 1 UTS               UBIN ALIGNED PARAM ;
      441     7095        /*
      442     7096                        Entries
      443     7097        */
      444     7098    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
      445     7099        /*
      446     7100                        Variables
      447     7101        */
      448     7102                                %B$ALT ( NAME =
      449     7103              B$ALT             ,     STCLASS=BASED
      450     7104                                                                        ) ;
      451     7112                                %B$TCB  ( NAME =
      452     7113              B$TCB             , STCLASS = "BASED(B$TCB$)"
      453     7114                                                                        ) ;
      454     7117    1   DCL 1 B$TCB$            PTR SYMREF ;
      455     7118                                %FPT_MIRROR ( FPTN =
      456     7119              CHGSTATE          , STCLASS = STATIC
      457     7120                                , FUNCTION = CHGSTATE
      458     7121                                                                        ) ;
      459     7144                                %NMD_PIT ( FPTN =
      460     7145              NMD_PIT           , STCLASS = SYMREF
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:77   
      461     7146                                                                        ) ;
      462     7599                                %VLP_ERRCODE ( FPTN =
      463     7600              NMU#CHGSTATE      , STCLASS = CONSTANT
      464     7601                                , ERR# = %E$NMD#CHGSTATE
      465     7602                                , FCG  = %NMD#FCG
      466     7603                                , MID  = 'U'
      467     7604                                , MON  = %NO#
      468     7605                                , SEV  = 0
      469     7606                                                                        ) ;
      470     7651        %EJECT ;
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:78   
      471     7652        /*
      472     7653        Change the specified device to the specified state.
      473     7654        */
      474     7655    1           CHGSTATE.V.DCTX#  = NMD_PIT.DEV.DCTX(I) ;

   7655  3 000002   200003 470500                    LDP0    @I,,AUTO
         3 000003   000000 236100                    LDQ     0,,PR0
         3 000004   000015 402007                    MPY     13,DL
         3 000005   000001 736000                    QLS     1
         3 000006   000011 720006 xsym               LXL0    NMD_PIT+9,QL
         3 000007   000002 440000 1                  SXL0    CHGSTATE+2

      475     7656    1           CHGSTATE.V.STATE# = NEWSTATE ;

   7656  3 000010   200004 471500                    LDP1    @NEWSTATE,,AUTO
         3 000011   100000 236100                    LDQ     0,,PR1
         3 000012   000030 736000                    QLS     24
         3 000013   000002 752020 1                  STCQ    CHGSTATE+2,'20'O

      476     7657    1           CHGSTATE.V.UTS#   = UTS ;

   7657  3 000014   200005 473500                    LDP3    @UTS,,AUTO
         3 000015   300000 235100                    LDA     0,,PR3
         3 000016   000005 755000 1                  STA     CHGSTATE+5

      477     7658
      478     7659    1           CALL M$MIRROR ( CHGSTATE )              ALTRET ( ALTERR ) ;

   7659  3 000017   000000 630400 1                  EPPR0   CHGSTATE
         3 000020   470010 713400                    CLIMB   alt,+28680
         3 000021   400000 401760                    pmme    nvectors=1
         3 000022   000072 702000 3                  TSX2    ALTERR

      479     7660
      480     7661    1           NMD_PIT.DEV.STATE(I) = NEWSTATE ;

   7661  3 000023   200003 470500                    LDP0    @I,,AUTO
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:79   
         3 000024   000000 236100                    LDQ     0,,PR0
         3 000025   000015 402007                    MPY     13,DL
         3 000026   000001 736000                    QLS     1
         3 000027   200004 471500                    LDP1    @NEWSTATE,,AUTO
         3 000030   100000 235100                    LDA     0,,PR1
         3 000031   000025 755006 xsym               STA     NMD_PIT+21,QL

      481     7662    1           NMD_PIT.DEV.UTS(I)   = UTS ;

   7662  3 000032   000000 236100                    LDQ     0,,PR0
         3 000033   000015 402007                    MPY     13,DL
         3 000034   000001 736000                    QLS     1
         3 000035   200005 473500                    LDP3    @UTS,,AUTO
         3 000036   300000 235100                    LDA     0,,PR3
         3 000037   000027 755006 xsym               STA     NMD_PIT+23,QL
         3 000040   000043 710000 3                  TRA     s:7673

      482     7663        /*
      483     7664        Entry for Change State Message.
      484     7665        */
      485     7666    1   NMU$CHGSTATEMSG:        ENTRY ( I, NEWSTATE ) ALTRET ;

   7666  3 000041   000000 700200 xent  NMU$CHGSTAT* TSX0  ! X66_AUTO_3
         3 000042   000014 000003                    ZERO    12,3

      486     7667        /*E*
      487     7668        ERROR:  NMU-E$NMD#CHGSTATE-0
      488     7669        MESSAGE:  %U1 Mirrored Disk device is now %U2
      489     7670        DESCRIPTION:  The specified Mirrored Disk device state has been changed
      490     7671                      to the specified value.
      491     7672        */
      492     7673    1           CALL NME$ERRMSG ( NMU#CHGSTATE, ,

   7673  3 000043   200003 470500                    LDP0    @I,,AUTO
         3 000044   000000 236100                    LDQ     0,,PR0
         3 000045   000015 402007                    MPY     13,DL
         3 000046   000000 235000 4                  LDA     0
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:80   
         3 000047   000023 736000                    QLS     19
         3 000050   000001 036000 4                  ADLQ    1
         3 000051   200004 471500                    LDP1    @NEWSTATE,,AUTO
         3 000052   100000 720100                    LXL0    0,,PR1
         3 000053   200006 757100                    STAQ    @UTS+1,,AUTO
         3 000054   000000 636010                    EAQ     0,X0
         3 000055   000001 736000                    QLS     1
         3 000056   000002 036000 4                  ADLQ    2
         3 000057   200013 756100                    STQ     @UTS+6,,AUTO
         3 000060   200006 633500                    EPPR3   @UTS+1,,AUTO
         3 000061   200012 453500                    STP3    @UTS+5,,AUTO
         3 000062   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000063   000003 235000 4                  LDA     3
         3 000064   200010 757100                    STAQ    @UTS+3,,AUTO
         3 000065   200010 630500                    EPPR0   @UTS+3,,AUTO
         3 000066   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000067   000000 701000 xent               TSX1    NME$ERRMSG
         3 000070   000000 011000                    NOP     0

      493     7674    1                             VECTOR(NMD_PIT.DEV.NAME(I)),
      494     7675    1                             NMD_PIT.STATE.V_(NEWSTATE) ) ;
      495     7676        /*
      496     7677        Return to the calling routine.
      497     7678        */
      498     7679    1           RETURN ;

   7679  3 000071   000000 702200 xent               TSX2  ! X66_ARET

      499     7680
      500     7681    1   ALTERR: CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR ) ;

   7681  3 000072   000000 470400 xsym  ALTERR       LDP0    B$TCB$
         3 000073   000000 471500                    LDP1    0,,PR0
         3 000074   100102 633500                    EPPR3   66,,PR1
         3 000075   200006 453500                    STP3    @UTS+1,,AUTO
         3 000076   200006 630500                    EPPR0   @UTS+1,,AUTO
         3 000077   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:81   
         3 000100   000000 701000 xent               TSX1    NME$ERRMSG
         3 000101   000000 011000                    NOP     0

      501     7682
      502     7683    1           ALTRETURN ;

   7683  3 000102   000000 702200 xent               TSX2  ! X66_AALT
      503     7684
      504     7685    1           END NMU$CHGSTATE ;
      505     7686        %EOD ;

PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:82   
--  Include file information  --

   NM_PERR_C.:E05TOU  is referenced.
   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$CHGSTATE.
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:83   

 **** Variables and constants ****

  ****  Section 001  Data  NMU$CHGSTATE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 CHGSTATE

  ****  Section 002 RoData NMU$CHGSTATE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 NMU#CHGSTATE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @I                         4-0-0/w PTR         r     1 @NEWSTATE
     5-0-0/w PTR         r     1 @UTS                      *0-0-0/w UBIN        r     1 I
    *0-0-0/w UBIN        r     1 NEWSTATE                  *0-0-0/w UBIN        r     1 UTS

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/d STRC(8892)  r     1 NMD_PIT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:84   
     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB


   Procedure NMU$CHGSTATE requires 67 words for executable code.
   Procedure NMU$CHGSTATE requires 12 words of local(AUTO) storage.
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:85   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:86   
          MINI XREF LISTING

ALTERR
      7681**LABEL    7659--CALLALT
B$ALT.CODE
      7106**DCL      7106--REDEF    7107--REDEF    7107--REDEF
B$ALT.ERR
      7107**DCL      7681<>CALL
B$ALT.ERR.ERR#
      7108**DCL      7108--REDEF
B$ALT.EVID
      7107**DCL      7107--REDEF    7107--REDEF
B$TCB.ALT$
      7115**DCL      7681>>CALL
B$TCB$
      7117**DCL      7115--IMP-PTR  7681>>CALL
CHGSTATE
      7138**DCL      7659<>CALL
CHGSTATE.V
      7138**DCL      7138--DCLINIT
CHGSTATE.V.DCTX#
      7140**DCL      7655<<ASSIGN
CHGSTATE.V.STATE#
      7139**DCL      7656<<ASSIGN
CHGSTATE.V.UTS#
      7142**DCL      7657<<ASSIGN
I
      7092**DCL        44--PROC     7655>>ASSIGN   7661>>ASSIGN   7662>>ASSIGN   7666--ENTRY    7673>>CALL
M$MIRROR
      5586**DCL-ENT  7659--CALL
NEWSTATE
      7093**DCL        44--PROC     7656>>ASSIGN   7661>>ASSIGN   7666--ENTRY    7673>>CALL
NMD_PIT.DEV.DCTX
      7212**DCL      7655>>ASSIGN
PL6.E3A0      #004=NMU$CHGSTATE File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:52 Page:87   
NMD_PIT.DEV.NAME
      7262**DCL      7673--CALL
NMD_PIT.DEV.STATE
      7287**DCL      7661<<ASSIGN
NMD_PIT.DEV.UTS
      7297**DCL      7662<<ASSIGN
NMD_PIT.STATE.V_
      7586**DCL      7673<>CALL
NME$ERRMSG
      7098**DCL-ENT  7673--CALL     7681--CALL
NMU#CHGSTATE
      7618**DCL      7673<>CALL
UTS
      7094**DCL        44--PROC     7657>>ASSIGN   7662>>ASSIGN

PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:88   
      506        1        /*M* NMU$CONVERT$ - Convert monitor pointer to user pointer.       */
      507        2        /*T***********************************************************/
      508        3        /*T*                                                         */
      509        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      510        5        /*T*                                                         */
      511        6        /*T***********************************************************/
      512        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      513        8        /*F*
      514        9        NAME:           NMU$CONVERT$
      515       10
      516       11        PURPOSE:        To convert a monitor pointer to a user pointer.
      517       12
      518       13        DESCRIPTION:
      519       14
      520       15        The NMU$CONVERT$ procedure is used to convert a monitor pointer
      521       16        into a user pointer.
      522       17        */
      523       18        /*D*
      524       19        NAME:           NMU$CONVERT$
      525       20
      526       21        CALL:           CALL NMU$CONVERT$ ( uptr, usid, mptr, msid ) ALTRET ( error ) ;
      527       22
      528       23        PARAMETERS:
      529       24        */
      530       25        /*K*
      531       26        uptr            is a user pointer that is returned to the caller.
      532       27        */
      533       28        /*K*
      534       29        usid            is the specified SEGID of the pointer to be returned.
      535       30        */
      536       31        /*K*
      537       32        mptr            is the monitor pointer to be converted.
      538       33        */
      539       34        /*K*
      540       35        msid            is the expected SEGID of the monitor pointer to be
      541       36                converted.
      542       37        */
PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:89   
      543       38        /*D*
      544       39        DESCRIPTION:
      545       40
      546       41        The NMU$CONVERT$ procedure is used to convert a monitor pointer
      547       42        to a user pointer.  The monitor pointer is only accessible by the
      548       43        monitor.  The user pointer is accessible by the user thru one of
      549       44        the user special SEGIDs.
      550       45        */
      551       46        %EJECT ;
PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:90   
      552       47        NMU$CONVERT$:   PROC ( UPTR, USID, MPTR, MSID ) ALTRET ;
      553       48        /*
      554       49                        Parameters
      555       50        */
      556       51    1   DCL 1 UPTR              PTR ALIGNED PARAM ;
      557       52    1   DCL 1 USID              UBIN WORD ALIGNED PARAM ;
      558       53    1   DCL 1 MPTR              PTR ALIGNED PARAM ;
      559       54    1   DCL 1 MSID              UBIN WORD ALIGNED PARAM ;
      560       55        /*
      561       56                        Variables
      562       57        */
      563       58    1   DCL 1 POINTER           ALIGNED BASED,
      564       59    1         2 OFFSET          UBIN(18) UNAL,
      565       60    1         2 SEGID           UBIN(18) UNAL ;
      566       61        %EJECT ;
PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:91   
      567       62        /*
      568       63        Determine if the monitor pointer is from the expected SEGID.  Make
      569       64        an ALTRETURN if it isn't.
      570       65        */
      571       66    1           IF  ADDR(MPTR)->POINTER.SEGID ~= MSID
      572       67    1           THEN
      573       68    1               ALTRETURN ;
      574       69        /*
      575       70        Convert the monitor pointer to a user pointer using the specified
      576       71        SEGID.
      577       72        */
      578       73    1           UPTR = MPTR ;
      579       74    1           ADDR(UPTR)->POINTER.SEGID = USID ;
      580       75        /*
      581       76        Return to the calling procedure.
      582       77        */
      583       78    1           RETURN ;
      584       79
      585       80    1           END NMU$CONVERT$ ;
      586       81        %EOD ;

PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:92   
      No diagnostics issued in procedure NMU$CONVERT$.

   Procedure NMU$CONVERT$ requires 16 words for executable code.
   Procedure NMU$CONVERT$ requires 8 words of local(AUTO) storage.

PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:93   

 Object Unit name= NMU$CONVERT$                               File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:53:29.92 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    16     20  NMU$CONVERT$

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        4  NMU$CONVERT$

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_4
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:94   


      506        1        /*M* NMU$CONVERT$ - Convert monitor pointer to user pointer.       */
      507        2        /*T***********************************************************/
      508        3        /*T*                                                         */
      509        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      510        5        /*T*                                                         */
      511        6        /*T***********************************************************/
      512        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      513        8        /*F*
      514        9        NAME:           NMU$CONVERT$
      515       10
      516       11        PURPOSE:        To convert a monitor pointer to a user pointer.
      517       12
      518       13        DESCRIPTION:
      519       14
      520       15        The NMU$CONVERT$ procedure is used to convert a monitor pointer
      521       16        into a user pointer.
      522       17        */
      523       18        /*D*
      524       19        NAME:           NMU$CONVERT$
      525       20
      526       21        CALL:           CALL NMU$CONVERT$ ( uptr, usid, mptr, msid ) ALTRET ( error ) ;
      527       22
      528       23        PARAMETERS:
      529       24        */
      530       25        /*K*
      531       26        uptr            is a user pointer that is returned to the caller.
      532       27        */
      533       28        /*K*
      534       29        usid            is the specified SEGID of the pointer to be returned.
      535       30        */
      536       31        /*K*
      537       32        mptr            is the monitor pointer to be converted.
      538       33        */
      539       34        /*K*
      540       35        msid            is the expected SEGID of the monitor pointer to be
      541       36                converted.
PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:95   
      542       37        */
      543       38        /*D*
      544       39        DESCRIPTION:
      545       40
      546       41        The NMU$CONVERT$ procedure is used to convert a monitor pointer
      547       42        to a user pointer.  The monitor pointer is only accessible by the
      548       43        monitor.  The user pointer is accessible by the user thru one of
      549       44        the user special SEGIDs.
      550       45        */
      551       46        %EJECT ;
PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:96   
      552       47        NMU$CONVERT$:   PROC ( UPTR, USID, MPTR, MSID ) ALTRET ;

     47  0 000000   000000 700200 xent  NMU$CONVERT$ TSX0  ! X66_AUTO_4
         0 000001   000010 000004                    ZERO    8,4

      553       48        /*
      554       49                        Parameters
      555       50        */
      556       51    1   DCL 1 UPTR              PTR ALIGNED PARAM ;
      557       52    1   DCL 1 USID              UBIN WORD ALIGNED PARAM ;
      558       53    1   DCL 1 MPTR              PTR ALIGNED PARAM ;
      559       54    1   DCL 1 MSID              UBIN WORD ALIGNED PARAM ;
      560       55        /*
      561       56                        Variables
      562       57        */
      563       58    1   DCL 1 POINTER           ALIGNED BASED,
      564       59    1         2 OFFSET          UBIN(18) UNAL,
      565       60    1         2 SEGID           UBIN(18) UNAL ;
      566       61        %EJECT ;
PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:97   
      567       62        /*
      568       63        Determine if the monitor pointer is from the expected SEGID.  Make
      569       64        an ALTRETURN if it isn't.
      570       65        */
      571       66    1           IF  ADDR(MPTR)->POINTER.SEGID ~= MSID

     66  0 000002   200006 470500                    LDP0    @MSID,,AUTO
         0 000003   200005 471500                    LDP1    @MPTR,,AUTO
         0 000004   100000 236100                    LDQ     0,,PR1
         0 000005   777777 376007                    ANQ     -1,DL
         0 000006   000000 116100                    CMPQ    0,,PR0
         0 000007   000011 600000 0                  TZE     s:73

      572       67    1           THEN
      573       68    1               ALTRETURN ;

     68  0 000010   000000 702200 xent               TSX2  ! X66_AALT

      574       69        /*
      575       70        Convert the monitor pointer to a user pointer using the specified
      576       71        SEGID.
      577       72        */
      578       73    1           UPTR = MPTR ;

     73  0 000011   100000 236100                    LDQ     0,,PR1
         0 000012   200003 473500                    LDP3    @UPTR,,AUTO
         0 000013   300000 756100                    STQ     0,,PR3

      579       74    1           ADDR(UPTR)->POINTER.SEGID = USID ;

     74  0 000014   200004 474500                    LDP4    @USID,,AUTO
         0 000015   400000 720100                    LXL0    0,,PR4
         0 000016   300000 440100                    SXL0    0,,PR3

      580       75        /*
      581       76        Return to the calling procedure.
      582       77        */
PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:98   
      583       78    1           RETURN ;

     78  0 000017   000000 702200 xent               TSX2  ! X66_ARET
      584       79
      585       80    1           END NMU$CONVERT$ ;
      586       81        %EOD ;

PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:99   
      No diagnostics issued in procedure NMU$CONVERT$.
PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:100  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @MPTR                      6-0-0/w PTR         r     1 @MSID
     3-0-0/w PTR         r     1 @UPTR                      4-0-0/w PTR         r     1 @USID
    *0-0-0/w PTR         r     1 MPTR                      *0-0-0/w UBIN        r     1 MSID
    *0-0-0/w PTR         r     1 UPTR                      *0-0-0/w UBIN        r     1 USID

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 POINTER


   Procedure NMU$CONVERT$ requires 16 words for executable code.
   Procedure NMU$CONVERT$ requires 8 words of local(AUTO) storage.
PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:101  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=NMU$CONVERT$ File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:102  
          MINI XREF LISTING

MPTR
        53**DCL        47--PROC       66--IF         73>>ASSIGN
MSID
        54**DCL        47--PROC       66>>IF
POINTER.SEGID
        60**DCL        66>>IF         74<<ASSIGN
UPTR
        51**DCL        47--PROC       73<<ASSIGN     74--ASSIGN
USID
        52**DCL        47--PROC       74>>ASSIGN

PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:103  
      587        1        /*M* NMU$GRANULES - To do granule calculations.                    */
      588        2        /*T***********************************************************/
      589        3        /*T*                                                         */
      590        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      591        5        /*T*                                                         */
      592        6        /*T***********************************************************/
      593        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      594        8        /*F*
      595        9        NAME:           NMU$GRANULES
      596       10
      597       11        PURSPOSE:       To do granule calulations.
      598       12        */
      599       13        NMU$GRANULES:   PROC ( FGRAN, LGRAN ) ;
      600       14        /*
      601       15                        Includes
      602       16        */
      603       17        %INCLUDE                CP_6 ;
      604     5576        %INCLUDE                NM_MACRO_M ;
      605     6981        /*
      606     6982                        Parameters
      607     6983        */
      608     6984    1   DCL 1 FGRAN             UBIN WORD ALIGNED PARAM ;
      609     6985    1   DCL 1 LGRAN             UBIN WORD ALIGNED PARAM ;
      610     6986        /*
      611     6987                        Variables
      612     6988        */
      613     6989    1   DCL 1 I                 SBIN WORD ALIGNED AUTO ;
      614     6990                                %NMD_PIT ( FPTN =
      615     6991              NMD_PIT           , STCLASS = SYMREF
      616     6992                                                                        ) ;
      617     7445        %EJECT ;
PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:104  
      618     7446        /*D*
      619     7447        NAME:           NMU$FGRAN
      620     7448
      621     7449        CALL:           CALL NMU$FGRAN ( fgran, lgran ) ;
      622     7450
      623     7451        PARAMETERS:
      624     7452        */
      625     7453        /*K*
      626     7454        fgran           is a UBIN WORD that is returned with the value
      627     7455                for the next first granule.
      628     7456        */
      629     7457        /*K*
      630     7458        lgran           is a UBIN WORD that specifies the value for the
      631     7459                for the last granule.
      632     7460        */
      633     7461        /*D*
      634     7462        DESCRIPTION:
      635     7463
      636     7464        The NMU$FGRAN procedure is used to calculate the
      637     7465        next first granule for the next read operation based upon
      638     7466        the last granule, the GRANS option value, and the
      639     7467        defective granule table (DGT) from the VID.
      640     7468
      641     7469        */
      642     7470        %EJECT ;
PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:105  
      643     7471    1   NMU$FGRAN:  ENTRY ( FGRAN, LGRAN ) ;
      644     7472        /*
      645     7473        Calculate the next first granule based upon the last granule,
      646     7474        the GRANS option value, and the size of the device.
      647     7475        */
      648     7476    1           FGRAN = MINIMUM ( LGRAN+1, NMD_PIT.PACKSIZE ) ;
      649     7477        /*
      650     7478        Check the first granule value against the defective granule table from
      651     7479        the VID.
      652     7480        */
      653     7481    2           DO  I = NMD_PIT.DGT.I TO 63 BY +1 ;
      654     7482
      655     7483    2               IF  FGRAN < NMD_PIT.DGT.FGRAN(I)
      656     7484    2               THEN
      657     7485    2                   EXIT ;
      658     7486
      659     7487    2               IF  FGRAN <= NMD_PIT.DGT.LGRAN(I)
      660     7488    2               THEN
      661     7489    2                   FGRAN = NMD_PIT.DGT.LGRAN(I) + 1 ;
      662     7490
      663     7491    2               NMD_PIT.DGT.I = I + 1 ;
      664     7492
      665     7493    2               END ;
      666     7494        /*
      667     7495        Return to the calling procedure.
      668     7496        */
      669     7497    1           RETURN ;
      670     7498
      671     7499        %EJECT ;
PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:106  
      672     7500        /*D*
      673     7501        NAME:           NMU$LGRAN
      674     7502
      675     7503        CALL:           CALL NMU$LGRAN ( fgran, lgran ) ;
      676     7504
      677     7505        PARAMETERS:
      678     7506        */
      679     7507        /*K*
      680     7508        fgran           is a UBIN WORD that specifies the first granule.
      681     7509        */
      682     7510        /*K*
      683     7511        lgran           is a UBIN WORD that is returned with the value
      684     7512                for the last granule.
      685     7513        */
      686     7514        /*D*
      687     7515        DESCRIPTION:
      688     7516
      689     7517        The NMU$LGRAN procedure is used to calculate the
      690     7518        last granule for the current read operation based upon
      691     7519        the first granule, the GRANS option value, and the
      692     7520        defective granule table (DGT) from the VID.
      693     7521
      694     7522        */
      695     7523        %EJECT ;
PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:107  
      696     7524    1   NMU$LGRAN:  ENTRY ( FGRAN, LGRAN ) ;
      697     7525        /*
      698     7526        Calculate the last granule based upon the first granule, the GRANS
      699     7527        option value, and the DGT.
      700     7528        */
      701     7529    1           I     = NMD_PIT.DGT.I ;
      702     7530    1           LGRAN = MINIMUM ( FGRAN+NMD_PIT.GRANS#-1,
      703     7531    1                             NMD_PIT.DGT.FGRAN(I)-1 ) ;
      704     7532        /*
      705     7533        Return to the calling routine.
      706     7534        */
      707     7535    1           RETURN ;
      708     7536
      709     7537    1           END NMU$GRANULES ;
      710     7538        %EOD ;

PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:108  
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$GRANULES.

   Procedure NMU$GRANULES requires 55 words for executable code.
   Procedure NMU$GRANULES requires 8 words of local(AUTO) storage.

PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:109  

 Object Unit name= NMU$GRANULES                               File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:53:34.88 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    55     67  NMU$GRANULES

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        2  NMU$GRANULES
     1      3                  yes      Std        2  NMU$FGRAN
     1     44                  yes      Std        2  NMU$LGRAN

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  NMD_PIT
PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:110  


      587        1        /*M* NMU$GRANULES - To do granule calculations.                    */
      588        2        /*T***********************************************************/
      589        3        /*T*                                                         */
      590        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      591        5        /*T*                                                         */
      592        6        /*T***********************************************************/
      593        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      594        8        /*F*
      595        9        NAME:           NMU$GRANULES
      596       10
      597       11        PURSPOSE:       To do granule calulations.
      598       12        */
      599       13        NMU$GRANULES:   PROC ( FGRAN, LGRAN ) ;

     13  1 000000   000000 700200 xent  NMU$GRANULES TSX0  ! X66_AUTO_2
         1 000001   000010 000002                    ZERO    8,2
         1 000002   000005 710000 1                  TRA     s:7476

      600       14        /*
      601       15                        Includes
      602       16        */
      603       17        %INCLUDE                CP_6 ;
      604     5576        %INCLUDE                NM_MACRO_M ;
      605     6981        /*
      606     6982                        Parameters
      607     6983        */
      608     6984    1   DCL 1 FGRAN             UBIN WORD ALIGNED PARAM ;
      609     6985    1   DCL 1 LGRAN             UBIN WORD ALIGNED PARAM ;
      610     6986        /*
      611     6987                        Variables
      612     6988        */
      613     6989    1   DCL 1 I                 SBIN WORD ALIGNED AUTO ;
      614     6990                                %NMD_PIT ( FPTN =
      615     6991              NMD_PIT           , STCLASS = SYMREF
      616     6992                                                                        ) ;
      617     7445        %EJECT ;
PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:111  
      618     7446        /*D*
      619     7447        NAME:           NMU$FGRAN
      620     7448
      621     7449        CALL:           CALL NMU$FGRAN ( fgran, lgran ) ;
      622     7450
      623     7451        PARAMETERS:
      624     7452        */
      625     7453        /*K*
      626     7454        fgran           is a UBIN WORD that is returned with the value
      627     7455                for the next first granule.
      628     7456        */
      629     7457        /*K*
      630     7458        lgran           is a UBIN WORD that specifies the value for the
      631     7459                for the last granule.
      632     7460        */
      633     7461        /*D*
      634     7462        DESCRIPTION:
      635     7463
      636     7464        The NMU$FGRAN procedure is used to calculate the
      637     7465        next first granule for the next read operation based upon
      638     7466        the last granule, the GRANS option value, and the
      639     7467        defective granule table (DGT) from the VID.
      640     7468
      641     7469        */
      642     7470        %EJECT ;
PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:112  
      643     7471    1   NMU$FGRAN:  ENTRY ( FGRAN, LGRAN ) ;

   7471  1 000003   000000 700200 xent  NMU$FGRAN    TSX0  ! X66_AUTO_2
         1 000004   000010 000002                    ZERO    8,2

      644     7472        /*
      645     7473        Calculate the next first granule based upon the last granule,
      646     7474        the GRANS option value, and the size of the device.
      647     7475        */
      648     7476    1           FGRAN = MINIMUM ( LGRAN+1, NMD_PIT.PACKSIZE ) ;

   7476  1 000005   200004 470500                    LDP0    @LGRAN,,AUTO
         1 000006   000000 236100                    LDQ     0,,PR0
         1 000007   000001 036007                    ADLQ    1,DL
         1 000010   000307 116000 xsym               CMPQ    NMD_PIT+199
         1 000011   000014 602000 1                  TNC     s:7476+7
         1 000012   000014 600000 1                  TZE     s:7476+7
         1 000013   000307 236000 xsym               LDQ     NMD_PIT+199
         1 000014   200003 471500                    LDP1    @FGRAN,,AUTO
         1 000015   100000 756100                    STQ     0,,PR1

      649     7477        /*
      650     7478        Check the first granule value against the defective granule table from
      651     7479        the VID.
      652     7480        */
      653     7481    2           DO  I = NMD_PIT.DGT.I TO 63 BY +1 ;

   7481  1 000016   000066 235000 xsym               LDA     NMD_PIT+54
         1 000017   200005 755100                    STA     I,,AUTO
         1 000020   000040 710000 1                  TRA     s:7493+1

      654     7482
      655     7483    2               IF  FGRAN < NMD_PIT.DGT.FGRAN(I)

   7483  1 000021   200003 470500                    LDP0    @FGRAN,,AUTO
         1 000022   200005 720100                    LXL0    I,,AUTO
         1 000023   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:113  
         1 000024   000067 116010 xsym               CMPQ    NMD_PIT+55,X0
         1 000025   000043 602000 1                  TNC     s:7497

      656     7484    2               THEN
      657     7485    2                   EXIT ;
      658     7486
      659     7487    2               IF  FGRAN <= NMD_PIT.DGT.LGRAN(I)

   7487  1 000026   000170 116010 xsym               CMPQ    NMD_PIT+120,X0
         1 000027   000031 600000 1                  TZE     s:7489
         1 000030   000034 603000 1                  TRC     s:7491

      660     7488    2               THEN
      661     7489    2                   FGRAN = NMD_PIT.DGT.LGRAN(I) + 1 ;

   7489  1 000031   000170 235010 xsym               LDA     NMD_PIT+120,X0
         1 000032   000001 035007                    ADLA    1,DL
         1 000033   000000 755100                    STA     0,,PR0

      662     7490
      663     7491    2               NMD_PIT.DGT.I = I + 1 ;

   7491  1 000034   200005 235100                    LDA     I,,AUTO
         1 000035   000001 035007                    ADLA    1,DL
         1 000036   000066 755000 xsym               STA     NMD_PIT+54

      664     7492
      665     7493    2               END ;

   7493  1 000037   200005 054100                    AOS     I,,AUTO
         1 000040   200005 236100                    LDQ     I,,AUTO
         1 000041   000077 116007                    CMPQ    63,DL
         1 000042   000021 604400 1                  TMOZ    s:7483

      666     7494        /*
      667     7495        Return to the calling procedure.
      668     7496        */
PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:114  
      669     7497    1           RETURN ;

   7497  1 000043   000000 702200 xent               TSX2  ! X66_ARET

      670     7498
      671     7499        %EJECT ;
PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:115  
      672     7500        /*D*
      673     7501        NAME:           NMU$LGRAN
      674     7502
      675     7503        CALL:           CALL NMU$LGRAN ( fgran, lgran ) ;
      676     7504
      677     7505        PARAMETERS:
      678     7506        */
      679     7507        /*K*
      680     7508        fgran           is a UBIN WORD that specifies the first granule.
      681     7509        */
      682     7510        /*K*
      683     7511        lgran           is a UBIN WORD that is returned with the value
      684     7512                for the last granule.
      685     7513        */
      686     7514        /*D*
      687     7515        DESCRIPTION:
      688     7516
      689     7517        The NMU$LGRAN procedure is used to calculate the
      690     7518        last granule for the current read operation based upon
      691     7519        the first granule, the GRANS option value, and the
      692     7520        defective granule table (DGT) from the VID.
      693     7521
      694     7522        */
      695     7523        %EJECT ;
PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:116  
      696     7524    1   NMU$LGRAN:  ENTRY ( FGRAN, LGRAN ) ;

   7524  1 000044   000000 700200 xent  NMU$LGRAN    TSX0  ! X66_AUTO_2
         1 000045   000010 000002                    ZERO    8,2

      697     7525        /*
      698     7526        Calculate the last granule based upon the first granule, the GRANS
      699     7527        option value, and the DGT.
      700     7528        */
      701     7529    1           I     = NMD_PIT.DGT.I ;

   7529  1 000046   000066 235000 xsym               LDA     NMD_PIT+54
         1 000047   200005 755100                    STA     I,,AUTO

      702     7530    1           LGRAN = MINIMUM ( FGRAN+NMD_PIT.GRANS#-1,

   7530  1 000050   200003 470500                    LDP0    @FGRAN,,AUTO
         1 000051   000000 236100                    LDQ     0,,PR0
         1 000052   000274 036000 xsym               ADLQ    NMD_PIT+188
         1 000053   200006 756100                    STQ     I+1,,AUTO
         1 000054   000067 236005 xsym               LDQ     NMD_PIT+55,AL
         1 000055   000001 136007                    SBLQ    1,DL
         1 000056   200007 756100                    STQ     I+2,,AUTO
         1 000057   200006 236100                    LDQ     I+1,,AUTO
         1 000060   000001 136007                    SBLQ    1,DL
         1 000061   200007 116100                    CMPQ    I+2,,AUTO
         1 000062   000064 604400 1                  TMOZ    s:7530+12
         1 000063   200007 236100                    LDQ     I+2,,AUTO
         1 000064   200004 471500                    LDP1    @LGRAN,,AUTO
         1 000065   100000 756100                    STQ     0,,PR1

      703     7531    1                             NMD_PIT.DGT.FGRAN(I)-1 ) ;
      704     7532        /*
      705     7533        Return to the calling routine.
      706     7534        */
      707     7535    1           RETURN ;

PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:117  
   7535  1 000066   000000 702200 xent               TSX2  ! X66_ARET
      708     7536
      709     7537    1           END NMU$GRANULES ;
      710     7538        %EOD ;

PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:118  
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$GRANULES.
PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:119  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @FGRAN                     4-0-0/w PTR         r     1 @LGRAN
    *0-0-0/w UBIN        r     1 FGRAN                      5-0-0/w SBIN        r     1 I
    *0-0-0/w UBIN        r     1 LGRAN

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8892)  r     1 NMD_PIT


   Procedure NMU$GRANULES requires 55 words for executable code.
   Procedure NMU$GRANULES requires 8 words of local(AUTO) storage.
PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:120  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=NMU$GRANULES File=NMU$UTIL.:E05TSI                            WED 07/30/97 03:53 Page:121  
          MINI XREF LISTING

FGRAN
      6984**DCL        13--PROC     7471--ENTRY    7476<<ASSIGN   7483>>IF       7487>>IF       7489<<ASSIGN
      7524--ENTRY    7530>>ASSIGN
I
      6989**DCL      7481<<DOINDEX  7483>>IF       7487>>IF       7489>>ASSIGN   7491>>ASSIGN   7529<<ASSIGN
      7530>>ASSIGN
LGRAN
      6985**DCL        13--PROC     7471--ENTRY    7476>>ASSIGN   7524--ENTRY    7530<<ASSIGN
NMD_PIT.DGT.FGRAN
      7168**DCL      7483>>IF       7530>>ASSIGN
NMD_PIT.DGT.I
      7167**DCL      7481>>DOINDEX  7491<<ASSIGN   7529>>ASSIGN
NMD_PIT.DGT.LGRAN
      7169**DCL      7487>>IF       7489>>ASSIGN
NMD_PIT.GRANS#
      7281**DCL      7530>>ASSIGN
NMD_PIT.PACKSIZE
      7377**DCL      7476>>ASSIGN

PL6.E3A0      #007=NMU$LOCK File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:53 Page:122  
      711        1        /*M* NMU$LOCK - LOCK the selected device.                          */
      712        2        /*T***********************************************************/
      713        3        /*T*                                                         */
      714        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      715        5        /*T*                                                         */
      716        6        /*T***********************************************************/
      717        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      718        8        /*F*
      719        9        NAME:           NMU$LOCK
      720       10
      721       11        PURPOSE:        To lock the specified device.
      722       12
      723       13        DESCRIPTION:
      724       14
      725       15        The NMU$LOCK procedure is used to lock the specified device.
      726       16        */
      727       17        /*D*
      728       18        NAME:           NMU$LOCK
      729       19
      730       20        CALL:           CALL NMU$LOCK ( i ) ALTRET ( error ) ;
      731       21
      732       22        PARAMETERS:
      733       23        */
      734       24        /*K*
      735       25        i               is UBIN WORD that is the index into NMD_PIT.DEV.
      736       26                i must be either 0 or 1.
      737       27        */
      738       28        /*D*
      739       29        DESCRIPTION:
      740       30
      741       31        The NMU$LOCK procedure is used to lock the specified device.
      742       32        */
      743       33        %EJECT ;
PL6.E3A0      #007=NMU$LOCK File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:53 Page:123  
      744       34        NMU$LOCK:       PROC ( I ) ALTRET ;
      745       35        /*
      746       36                        Includes
      747       37        */
      748       38        %INCLUDE                CP_6 ;
      749     5597        %INCLUDE                NM_MACRO_M ;
      750     7002        /*
      751     7003                        Parameters
      752     7004        */
      753     7005    1   DCL 1 I                 UBIN ALIGNED PARAM ;
      754     7006        /*
      755     7007                        Entries
      756     7008        */
      757     7009    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
      758     7010        /*
      759     7011                        Variables
      760     7012        */
      761     7013                                %B$ALT ( NAME =
      762     7014              B$ALT             ,     STCLASS=BASED
      763     7015                                                                        ) ;
      764     7023                                %B$TCB  ( NAME =
      765     7024              B$TCB             , STCLASS = "BASED(B$TCB$)"
      766     7025                                                                        ) ;
      767     7028    1   DCL 1 B$TCB$            PTR SYMREF ;
      768     7029                                %FPT_MIRROR ( FPTN =
      769     7030              LOCK              , STCLASS = STATIC
      770     7031                                , FUNCTION = LOCK
      771     7032                                                                        ) ;
      772     7055                                %NMD_PIT ( FPTN =
      773     7056              NMD_PIT           , STCLASS = SYMREF
      774     7057                                                                        ) ;
      775     7510        %EJECT ;
PL6.E3A0      #007=NMU$LOCK File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:53 Page:124  
      776     7511        /*
      777     7512        Set up the FPT to lock the specified device and lock the
      778     7513        device.
      779     7514        */
      780     7515    1           LOCK.V.DCTX# = NMD_PIT.DEV.DCTX(I) ;
      781     7516
      782     7517    1           CALL M$MIRROR ( LOCK )                  ALTRET ( ALTERR ) ;
      783     7518
      784     7519    1           NMD_PIT.DEV.FLAGS.LOCK(I) = '1'B ;
      785     7520        /*
      786     7521        Return to the calling routine.
      787     7522        */
      788     7523    1           RETURN ;
      789     7524
      790     7525    1   ALTERR: CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR ) ;
      791     7526
      792     7527    1           ALTRETURN ;
      793     7528
      794     7529    1           END NMU$LOCK ;
      795     7530        %EOD ;

PL6.E3A0      #007=NMU$LOCK File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:53 Page:125  
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$LOCK.

   Procedure NMU$LOCK requires 29 words for executable code.
   Procedure NMU$LOCK requires 6 words of local(AUTO) storage.

PL6.E3A0      #007=NMU$LOCK File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:53 Page:126  

 Object Unit name= NMU$LOCK                                   File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:53:59.96 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none     6      6  NMU$LOCK
    2   Proc  even  none    29     35  NMU$LOCK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        1  NMU$LOCK

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       6 NME$ERRMSG
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                NMD_PIT
     B_VECTNIL
PL6.E3A0      #007=NMU$LOCK File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:53 Page:127  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #007=NMU$LOCK File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:53 Page:128  


      711        1        /*M* NMU$LOCK - LOCK the selected device.                          */
      712        2        /*T***********************************************************/
      713        3        /*T*                                                         */
      714        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      715        5        /*T*                                                         */
      716        6        /*T***********************************************************/
      717        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      718        8        /*F*
      719        9        NAME:           NMU$LOCK
      720       10
      721       11        PURPOSE:        To lock the specified device.
      722       12
      723       13        DESCRIPTION:
      724       14
      725       15        The NMU$LOCK procedure is used to lock the specified device.
      726       16        */
      727       17        /*D*
      728       18        NAME:           NMU$LOCK
      729       19
      730       20        CALL:           CALL NMU$LOCK ( i ) ALTRET ( error ) ;
      731       21
      732       22        PARAMETERS:
      733       23        */
      734       24        /*K*
      735       25        i               is UBIN WORD that is the index into NMD_PIT.DEV.
      736       26                i must be either 0 or 1.
      737       27        */
      738       28        /*D*
      739       29        DESCRIPTION:
      740       30
      741       31        The NMU$LOCK procedure is used to lock the specified device.
      742       32        */
      743       33        %EJECT ;
PL6.E3A0      #007=NMU$LOCK File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:53 Page:129  
      744       34        NMU$LOCK:       PROC ( I ) ALTRET ;

     34  2 000000   000000 700200 xent  NMU$LOCK     TSX0  ! X66_AUTO_1
         2 000001   000006 000001                    ZERO    6,1

      745       35        /*
      746       36                        Includes
      747       37        */
      748       38        %INCLUDE                CP_6 ;
      749     5597        %INCLUDE                NM_MACRO_M ;
      750     7002        /*
      751     7003                        Parameters
      752     7004        */
      753     7005    1   DCL 1 I                 UBIN ALIGNED PARAM ;
      754     7006        /*
      755     7007                        Entries
      756     7008        */
      757     7009    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
      758     7010        /*
      759     7011                        Variables
      760     7012        */
      761     7013                                %B$ALT ( NAME =
      762     7014              B$ALT             ,     STCLASS=BASED
      763     7015                                                                        ) ;
      764     7023                                %B$TCB  ( NAME =
      765     7024              B$TCB             , STCLASS = "BASED(B$TCB$)"
      766     7025                                                                        ) ;
      767     7028    1   DCL 1 B$TCB$            PTR SYMREF ;
      768     7029                                %FPT_MIRROR ( FPTN =
      769     7030              LOCK              , STCLASS = STATIC
      770     7031                                , FUNCTION = LOCK
      771     7032                                                                        ) ;
      772     7055                                %NMD_PIT ( FPTN =
      773     7056              NMD_PIT           , STCLASS = SYMREF
      774     7057                                                                        ) ;
      775     7510        %EJECT ;
PL6.E3A0      #007=NMU$LOCK File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:53 Page:130  
      776     7511        /*
      777     7512        Set up the FPT to lock the specified device and lock the
      778     7513        device.
      779     7514        */
      780     7515    1           LOCK.V.DCTX# = NMD_PIT.DEV.DCTX(I) ;

   7515  2 000002   200003 470500                    LDP0    @I,,AUTO
         2 000003   000000 236100                    LDQ     0,,PR0
         2 000004   000015 402007                    MPY     13,DL
         2 000005   000001 736000                    QLS     1
         2 000006   000011 720006 xsym               LXL0    NMD_PIT+9,QL
         2 000007   000002 440000 1                  SXL0    LOCK+2

      781     7516
      782     7517    1           CALL M$MIRROR ( LOCK )                  ALTRET ( ALTERR ) ;

   7517  2 000010   000000 630400 1                  EPPR0   LOCK
         2 000011   470010 713400                    CLIMB   alt,+28680
         2 000012   400000 401760                    pmme    nvectors=1
         2 000013   000024 702000 2                  TSX2    ALTERR

      783     7518
      784     7519    1           NMD_PIT.DEV.FLAGS.LOCK(I) = '1'B ;

   7519  2 000014   200003 470500                    LDP0    @I,,AUTO
         2 000015   000000 236100                    LDQ     0,,PR0
         2 000016   000015 402007                    MPY     13,DL
         2 000017   000001 736000                    QLS     1
         2 000020   000000 620006                    EAX0    0,QL
         2 000021   400000 236003                    LDQ     -131072,DU
         2 000022   000014 256010 xsym               ORSQ    NMD_PIT+12,X0

      785     7520        /*
      786     7521        Return to the calling routine.
      787     7522        */
      788     7523    1           RETURN ;

PL6.E3A0      #007=NMU$LOCK File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:53 Page:131  
   7523  2 000023   000000 702200 xent               TSX2  ! X66_ARET

      789     7524
      790     7525    1   ALTERR: CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR ) ;

   7525  2 000024   000000 470400 xsym  ALTERR       LDP0    B$TCB$
         2 000025   000000 471500                    LDP1    0,,PR0
         2 000026   100102 633500                    EPPR3   66,,PR1
         2 000027   200004 453500                    STP3    @I+1,,AUTO
         2 000030   200004 630500                    EPPR0   @I+1,,AUTO
         2 000031   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000032   000000 701000 xent               TSX1    NME$ERRMSG
         2 000033   000000 011000                    NOP     0

      791     7526
      792     7527    1           ALTRETURN ;

   7527  2 000034   000000 702200 xent               TSX2  ! X66_AALT
      793     7528
      794     7529    1           END NMU$LOCK ;
      795     7530        %EOD ;

PL6.E3A0      #007=NMU$LOCK File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:53 Page:132  
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$LOCK.
PL6.E3A0      #007=NMU$LOCK File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:53 Page:133  

 **** Variables and constants ****

  ****  Section 001  Data  NMU$LOCK

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 LOCK

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @I                        *0-0-0/w UBIN        r     1 I

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/d STRC(8892)  r     1 NMD_PIT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB


   Procedure NMU$LOCK requires 29 words for executable code.
   Procedure NMU$LOCK requires 6 words of local(AUTO) storage.
PL6.E3A0      #007=NMU$LOCK File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:53 Page:134  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=NMU$LOCK File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:53 Page:135  
          MINI XREF LISTING

ALTERR
      7525**LABEL    7517--CALLALT
B$ALT.CODE
      7017**DCL      7017--REDEF    7018--REDEF    7018--REDEF
B$ALT.ERR
      7018**DCL      7525<>CALL
B$ALT.ERR.ERR#
      7019**DCL      7019--REDEF
B$ALT.EVID
      7018**DCL      7018--REDEF    7018--REDEF
B$TCB.ALT$
      7026**DCL      7525>>CALL
B$TCB$
      7028**DCL      7026--IMP-PTR  7525>>CALL
I
      7005**DCL        34--PROC     7515>>ASSIGN   7519>>ASSIGN
LOCK
      7049**DCL      7517<>CALL
LOCK.V
      7049**DCL      7049--DCLINIT
LOCK.V.DCTX#
      7051**DCL      7515<<ASSIGN
M$MIRROR
      5576**DCL-ENT  7517--CALL
NMD_PIT.DEV.DCTX
      7123**DCL      7515>>ASSIGN
NMD_PIT.DEV.FLAGS.LOCK
      7143**DCL      7519<<ASSIGN
NME$ERRMSG
      7009**DCL-ENT  7525--CALL

PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:136  
      796        1        /*M* NMU$MIRROR_VID - Set VID up for Mirrored Disk.                */
      797        2        /*T***********************************************************/
      798        3        /*T*                                                         */
      799        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      800        5        /*T*                                                         */
      801        6        /*T***********************************************************/
      802        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      803        8        /*F*
      804        9        NAME:           NMU$MIRROR_VID
      805       10
      806       11        PURPOSE:        To setup values in VID for Mirorred Disk.
      807       12
      808       13        DESCRIPTION:
      809       14
      810       15        The NMU$MIRROR_VID procedure is used to setup the values in the
      811       16        VID to establish Mirrored Disk operation.
      812       17        */
      813       18        /*D*
      814       19        NAME:           NMU$MIRROR_VID
      815       20
      816       21        CALL:           CALL NMU$MIRROR_VID ( i, uts ) ;
      817       22
      818       23        PARAMETERS:
      819       24        */
      820       25        /*K*
      821       26        i               is UBIN WORD that is the index into NMD_PIT.DEV.
      822       27                i must be either 0 or 1.
      823       28        */
      824       29        /*K*
      825       30        uts             is a UBIN WORD that specifies the new UTS value for the
      826       31                specified device.
      827       32        */
      828       33        /*D*
      829       34        DESCRIPTION:
      830       35
      831       36        The NMU$MIRROR_VID procedure is used to setup the values in the
      832       37        VID to establish Mirrored Disk operation.
PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:137  
      833       38        */
      834       39        %EJECT ;
PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:138  
      835       40        NMU$MIRROR_VID: PROC ( I, UTS ) ;
      836       41        /*
      837       42                        Includes
      838       43        */
      839       44        %INCLUDE                CP_6 ;
      840     5603        %INCLUDE                NM_MACRO_M ;
      841     7008        %INCLUDE                FM$GRAN ;
      842     7077        /*
      843     7078                        Parameters
      844     7079        */
      845     7080    1   DCL 1 I                 SBIN WORD ALIGNED PARAM ;
      846     7081    1   DCL 1 UTS               UBIN WORD ALIGNED PARAM ;
      847     7082        /*
      848     7083                        Variables
      849     7084        */
      850     7085                                %FM$VID ( FM$VID =
      851     7086              FM$VID            , BASED = BASED
      852     7087                                                                        ) ;
      853     7093                                %NMD_PIT ( FPTN =
      854     7094              NMD_PIT           , STCLASS = SYMREF
      855     7095                                                                        ) ;
      856     7548    1   DCL 1 VID$              PTR ALIGNED AUTO ;
      857     7549        %EJECT ;
PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:139  
      858     7550        /*
      859     7551        Setup the values in the VID to establish Mirorred Disk operation.
      860     7552        */
      861     7553    1           VID$ = NMD_PIT.DEV.VID$(I) ;
      862     7554
      863     7555    1           VID$->FM$VID.MIRROR.C        = 'MIRROR  ' ;
      864     7556    1           VID$->FM$VID.MIRROR.UTS      = UTS ;
      865     7557    1           VID$->FM$VID.MIRROR.STATE(0) = NMD_PIT.DEV.STATE(I) ;
      866     7558    1           VID$->FM$VID.MIRROR.STATE(1) = NMD_PIT.DEV.STATE(1-I) ;
      867     7559
      868     7560    1           RETURN ;
      869     7561
      870     7562    1           END NMU$MIRROR_VID ;
      871     7563        %EOD ;

PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:140  
--  Include file information  --

   FM$GRAN.:E05TOU  is referenced.
   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$MIRROR_VID.

   Procedure NMU$MIRROR_VID requires 28 words for executable code.
   Procedure NMU$MIRROR_VID requires 6 words of local(AUTO) storage.

PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:141  

 Object Unit name= NMU$MIRROR_VID                             File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:54:24.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      2      2  NMU$MIRROR_VID
    2   Proc  even  none    28     34  NMU$MIRROR_VID
    3  RoData even  none     1      1  NMU$MIRROR_VID

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        2  NMU$MIRROR_VID

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  NMD_PIT
PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:142  


      796        1        /*M* NMU$MIRROR_VID - Set VID up for Mirrored Disk.                */
      797        2        /*T***********************************************************/
      798        3        /*T*                                                         */
      799        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      800        5        /*T*                                                         */
      801        6        /*T***********************************************************/
      802        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      803        8        /*F*
      804        9        NAME:           NMU$MIRROR_VID
      805       10
      806       11        PURPOSE:        To setup values in VID for Mirorred Disk.
      807       12
      808       13        DESCRIPTION:
      809       14
      810       15        The NMU$MIRROR_VID procedure is used to setup the values in the
      811       16        VID to establish Mirrored Disk operation.
      812       17        */
      813       18        /*D*
      814       19        NAME:           NMU$MIRROR_VID
      815       20
      816       21        CALL:           CALL NMU$MIRROR_VID ( i, uts ) ;
      817       22
      818       23        PARAMETERS:
      819       24        */
      820       25        /*K*
      821       26        i               is UBIN WORD that is the index into NMD_PIT.DEV.
      822       27                i must be either 0 or 1.
      823       28        */
      824       29        /*K*
      825       30        uts             is a UBIN WORD that specifies the new UTS value for the
      826       31                specified device.
      827       32        */
      828       33        /*D*
      829       34        DESCRIPTION:
      830       35
      831       36        The NMU$MIRROR_VID procedure is used to setup the values in the
PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:143  
      832       37        VID to establish Mirrored Disk operation.
      833       38        */
      834       39        %EJECT ;
PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:144  
      835       40        NMU$MIRROR_VID: PROC ( I, UTS ) ;

     40  2 000000   000000 700200 xent  NMU$MIRROR_* TSX0  ! X66_AUTO_2
         2 000001   000006 000002                    ZERO    6,2

      836       41        /*
      837       42                        Includes
      838       43        */
      839       44        %INCLUDE                CP_6 ;
      840     5603        %INCLUDE                NM_MACRO_M ;
      841     7008        %INCLUDE                FM$GRAN ;
      842     7077        /*
      843     7078                        Parameters
      844     7079        */
      845     7080    1   DCL 1 I                 SBIN WORD ALIGNED PARAM ;
      846     7081    1   DCL 1 UTS               UBIN WORD ALIGNED PARAM ;
      847     7082        /*
      848     7083                        Variables
      849     7084        */
      850     7085                                %FM$VID ( FM$VID =
      851     7086              FM$VID            , BASED = BASED
      852     7087                                                                        ) ;
      853     7093                                %NMD_PIT ( FPTN =
      854     7094              NMD_PIT           , STCLASS = SYMREF
      855     7095                                                                        ) ;
      856     7548    1   DCL 1 VID$              PTR ALIGNED AUTO ;
      857     7549        %EJECT ;
PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:145  
      858     7550        /*
      859     7551        Setup the values in the VID to establish Mirorred Disk operation.
      860     7552        */
      861     7553    1           VID$ = NMD_PIT.DEV.VID$(I) ;

   7553  2 000002   200003 470500                    LDP0    @I,,AUTO
         2 000003   000000 236100                    LDQ     0,,PR0
         2 000004   000015 402007                    MPY     13,DL
         2 000005   000001 736000                    QLS     1
         2 000006   000032 236006 xsym               LDQ     NMD_PIT+26,QL
         2 000007   200005 756100                    STQ     VID$,,AUTO

      862     7554
      863     7555    1           VID$->FM$VID.MIRROR.C        = 'MIRROR  ' ;

   7555  2 000010   200005 471500                    LDP1    VID$,,AUTO
         2 000011   000000 237000 1                  LDAQ    0
         2 000012   100042 755100                    STA     34,,PR1
         2 000013   100043 756100                    STQ     35,,PR1

      864     7556    1           VID$->FM$VID.MIRROR.UTS      = UTS ;

   7556  2 000014   200004 473500                    LDP3    @UTS,,AUTO
         2 000015   300000 235100                    LDA     0,,PR3
         2 000016   100044 755100                    STA     36,,PR1

      865     7557    1           VID$->FM$VID.MIRROR.STATE(0) = NMD_PIT.DEV.STATE(I) ;

   7557  2 000017   000000 236100                    LDQ     0,,PR0
         2 000020   000015 402007                    MPY     13,DL
         2 000021   000001 736000                    QLS     1
         2 000022   000025 236006 xsym               LDQ     NMD_PIT+21,QL
         2 000023   000036 736000                    QLS     30
         2 000024   100045 752140                    STCQ    37,'40'O,PR1

      866     7558    1           VID$->FM$VID.MIRROR.STATE(1) = NMD_PIT.DEV.STATE(1-I) ;

PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:146  
   7558  2 000025   000000 236100                    LDQ     0,,PR0
         2 000026   000000 402000 3                  MPY     0
         2 000027   000001 736000                    QLS     1
         2 000030   000057 236006 xsym               LDQ     NMD_PIT+47,QL
         2 000031   000030 736000                    QLS     24
         2 000032   100045 752120                    STCQ    37,'20'O,PR1

      867     7559
      868     7560    1           RETURN ;

   7560  2 000033   000000 702200 xent               TSX2  ! X66_ARET
      869     7561
      870     7562    1           END NMU$MIRROR_VID ;
      871     7563        %EOD ;

PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:147  
--  Include file information  --

   FM$GRAN.:E05TOU  is referenced.
   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$MIRROR_VID.
PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:148  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @I                         4-0-0/w PTR         r     1 @UTS
    *0-0-0/w SBIN        r     1 I                         *0-0-0/w UBIN        r     1 UTS
     5-0-0/w PTR         r     1 VID$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8892)  r     1 NMD_PIT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(36864) r     1 FM$VID


   Procedure NMU$MIRROR_VID requires 28 words for executable code.
   Procedure NMU$MIRROR_VID requires 6 words of local(AUTO) storage.
PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:149  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=NMU$MIRROR_VID File=NMU$UTIL.:E05TSI                          WED 07/30/97 03:54 Page:150  
          MINI XREF LISTING

FM$VID.DTT
      7090**DCL      7090--REDEF
FM$VID.MIRROR.C
      7089**DCL      7555<<ASSIGN
FM$VID.MIRROR.STATE
      7089**DCL      7557<<ASSIGN   7558<<ASSIGN
FM$VID.MIRROR.UTS
      7089**DCL      7556<<ASSIGN
I
      7080**DCL        40--PROC     7553>>ASSIGN   7557>>ASSIGN   7558>>ASSIGN
NMD_PIT.DEV.STATE
      7236**DCL      7557>>ASSIGN   7558>>ASSIGN
NMD_PIT.DEV.VID$
      7258**DCL      7553>>ASSIGN
UTS
      7081**DCL        40--PROC     7556>>ASSIGN
VID$
      7548**DCL      7553<<ASSIGN   7555>>ASSIGN   7556>>ASSIGN   7557>>ASSIGN   7558>>ASSIGN

PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:151  
      872        1        /*M* NMU$QUIT - Termination procedure                              */
      873        2        /*T***********************************************************/
      874        3        /*T*                                                         */
      875        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      876        5        /*T*                                                         */
      877        6        /*T***********************************************************/
      878        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      879        8        /*F*
      880        9        NAME:           NMU$QUIT
      881       10
      882       11        PURPOSE:        To terminate the MIRROR program.
      883       12
      884       13        DESCRIPTION:
      885       14
      886       15        The NMU$QUIT procedure is used to terminate the MIRROR program.
      887       16        */
      888       17        /*D*
      889       18        NAME:           NMU$QUIT
      890       19
      891       20        CALL:           CALL NMU$QUIT ;
      892       21
      893       22        PARAMETERS:     None.
      894       23
      895       24        DESCRIPTION:
      896       25
      897       26        The NMU$QUIT procedure is used to terminate the MIRROR program.
      898       27        NMU$QUIT steps the step condition code to the value specified in
      899       28        NMD_PIT.STEPCC#.  NMU$QUIT also sets B$JIT.ERR to the error
      900       29        error code in NMD_PIT if an error was detected.  If no error
      901       30        was detected or the severity of the error was 3 or less, NMU$QUIT
      902       31        does an M$EXIT.  If an error was detected whose severity was
      903       32        between 4 and 5, NMU$QUIT does an M$ERR.  If an error was detected
      904       33        whose severity was 6 or greater, NMU$QUIT does an M$XXX.
      905       34        */
      906       35        %EJECT ;
PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:152  
      907       36        NMU$QUIT:       PROC ;
      908       37        /*
      909       38                        Includes
      910       39        */
      911       40        %INCLUDE                CP_6 ;
      912     5599        %INCLUDE                NM_MACRO_M ;
      913     7004        /*
      914     7005                        Variables
      915     7006        */
      916     7007                                %FPT_ERR ( FPTN =
      917     7008              ERR               , STCLASS = STATIC
      918     7009                                , CODE = NMD_PIT.ERRCODE
      919     7010                                , STEPCC = ERROR
      920     7011                                                                        ) ;
      921     7026                                %NMD_PIT ( FPTN =
      922     7027              NMD_PIT           , STCLASS = SYMREF
      923     7028                                                                        ) ;
      924     7481                                %FPT_EXIT ( FPTN =
      925     7482              XIT               , STCLASS = STATIC
      926     7483                                , CODE = NMD_PIT.ERRCODE
      927     7484                                , STEPCC = OK
      928     7485                                                                        ) ;
      929     7500                                %FPT_XXX ( FPTN =
      930     7501              XXX               , CODE = NMD_PIT.ERRCODE
      931     7502                                , STEPCC = ABORT
      932     7503                                , STCLASS = STATIC
      933     7504                                                                        ) ;
      934     7519        %EJECT ;
PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:153  
      935     7520        /*
      936     7521        Determine if an error has been detected.  If an error has not been
      937     7522        detected, merely do a M$EXIT without specifying a FPT_EXIT FPT.
      938     7523        */
      939     7524    1           IF  NMD_PIT.FLAGS.ERRCODE# = %NO#
      940     7525    1           THEN
      941     7526    1               CALL M$EXIT ;
      942     7527        /*
      943     7528        If the severity of the error was less than 4, do a M$EXIT that
      944     7529        sets the step condition code and the JIT error code.
      945     7530        */
      946     7531    1           ELSE IF  NMD_PIT.ERRCODE.SEV < 4
      947     7532    2           THEN DO ;
      948     7533    2               NMD_PIT.ERRCODE.SEV = 0 ;
      949     7534    2               XIT.CODE_ = VECTOR ( NMD_PIT.ERRCODE ) ;
      950     7535    2               XIT.V.STEPCC# = NMD_PIT.STEPCC# ;
      951     7536    2               CALL M$EXIT ( XIT ) ;
      952     7537    2               END ;
      953     7538        /*
      954     7539        If the severity of the error was between 4 and 5, do a M$ERR that
      955     7540        sets the step condition code and the JIT error code.
      956     7541        */
      957     7542    1           ELSE IF  NMD_PIT.ERRCODE.SEV < 6
      958     7543    2           THEN DO ;
      959     7544    2               NMD_PIT.ERRCODE.SEV = 0 ;
      960     7545    2               ERR.CODE_ = VECTOR ( NMD_PIT.ERRCODE ) ;
      961     7546    2               ERR.V.STEPCC# = NMD_PIT.STEPCC# ;
      962     7547    2               CALL M$ERR ( ERR ) ;
      963     7548    2               END ;
      964     7549        /*
      965     7550        If the severity of the error was 6 or greater, do a M$XXX that
      966     7551        sets the step condition code and the JIT error code.
      967     7552        */
      968     7553    2           ELSE DO ;
      969     7554    2               NMD_PIT.ERRCODE.SEV = 0 ;
      970     7555    2               XXX.CODE_ = VECTOR ( NMD_PIT.ERRCODE ) ;
      971     7556    2               XXX.V.STEPCC# = NMD_PIT.STEPCC# ;
PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:154  
      972     7557    2               CALL M$XXX ( XXX ) ;
      973     7558    2               END ;
      974     7559
      975     7560    1           END NMU$QUIT ;
      976     7561        %EOD ;

PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:155  
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$QUIT.

   Procedure NMU$QUIT requires 47 words for executable code.
   Procedure NMU$QUIT requires 4 words of local(AUTO) storage.

PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:156  

 Object Unit name= NMU$QUIT                                   File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:54:53.76 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    18     22  NMU$QUIT
    2   Proc  even  none    47     57  NMU$QUIT
    3  RoData even  none     4      4  NMU$QUIT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        0  NMU$QUIT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  NMD_PIT
PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:157  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:158  


      872        1        /*M* NMU$QUIT - Termination procedure                              */
      873        2        /*T***********************************************************/
      874        3        /*T*                                                         */
      875        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      876        5        /*T*                                                         */
      877        6        /*T***********************************************************/
      878        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      879        8        /*F*
      880        9        NAME:           NMU$QUIT
      881       10
      882       11        PURPOSE:        To terminate the MIRROR program.
      883       12
      884       13        DESCRIPTION:
      885       14
      886       15        The NMU$QUIT procedure is used to terminate the MIRROR program.
      887       16        */
      888       17        /*D*
      889       18        NAME:           NMU$QUIT
      890       19
      891       20        CALL:           CALL NMU$QUIT ;
      892       21
      893       22        PARAMETERS:     None.
      894       23
      895       24        DESCRIPTION:
      896       25
      897       26        The NMU$QUIT procedure is used to terminate the MIRROR program.
      898       27        NMU$QUIT steps the step condition code to the value specified in
      899       28        NMD_PIT.STEPCC#.  NMU$QUIT also sets B$JIT.ERR to the error
      900       29        error code in NMD_PIT if an error was detected.  If no error
      901       30        was detected or the severity of the error was 3 or less, NMU$QUIT
      902       31        does an M$EXIT.  If an error was detected whose severity was
      903       32        between 4 and 5, NMU$QUIT does an M$ERR.  If an error was detected
      904       33        whose severity was 6 or greater, NMU$QUIT does an M$XXX.
      905       34        */
      906       35        %EJECT ;
PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:159  
      907       36        NMU$QUIT:       PROC ;

     36  2 000000   000000 700200 xent  NMU$QUIT     TSX0  ! X66_AUTO_0
         2 000001   000004 000000                    ZERO    4,0

      908       37        /*
      909       38                        Includes
      910       39        */
      911       40        %INCLUDE                CP_6 ;
      912     5599        %INCLUDE                NM_MACRO_M ;
      913     7004        /*
      914     7005                        Variables
      915     7006        */
      916     7007                                %FPT_ERR ( FPTN =
      917     7008              ERR               , STCLASS = STATIC
      918     7009                                , CODE = NMD_PIT.ERRCODE
      919     7010                                , STEPCC = ERROR
      920     7011                                                                        ) ;
      921     7026                                %NMD_PIT ( FPTN =
      922     7027              NMD_PIT           , STCLASS = SYMREF
      923     7028                                                                        ) ;
      924     7481                                %FPT_EXIT ( FPTN =
      925     7482              XIT               , STCLASS = STATIC
      926     7483                                , CODE = NMD_PIT.ERRCODE
      927     7484                                , STEPCC = OK
      928     7485                                                                        ) ;
      929     7500                                %FPT_XXX ( FPTN =
      930     7501              XXX               , CODE = NMD_PIT.ERRCODE
      931     7502                                , STEPCC = ABORT
      932     7503                                , STCLASS = STATIC
      933     7504                                                                        ) ;
      934     7519        %EJECT ;
PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:160  
      935     7520        /*
      936     7521        Determine if an error has been detected.  If an error has not been
      937     7522        detected, merely do a M$EXIT without specifying a FPT_EXIT FPT.
      938     7523        */
      939     7524    1           IF  NMD_PIT.FLAGS.ERRCODE# = %NO#

   7524  2 000002   000273 236000 xsym               LDQ     NMD_PIT+187
         2 000003   100000 316003                    CANQ    32768,DU
         2 000004   000010 601000 2                  TNZ     s:7531

      940     7525    1           THEN
      941     7526    1               CALL M$EXIT ;

   7526  2 000005   000001 713400                    CLIMB   exit
         2 000006   000000 401760                    pmme    nvectors=0
         2 000007   000056 710000 2                  TRA     s:7560

      942     7527        /*
      943     7528        If the severity of the error was less than 4, do a M$EXIT that
      944     7529        sets the step condition code and the JIT error code.
      945     7530        */
      946     7531    1           ELSE IF  NMD_PIT.ERRCODE.SEV < 4

   7531  2 000010   000271 236000 xsym               LDQ     NMD_PIT+185
         2 000011   000007 376007                    ANQ     7,DL
         2 000012   000004 116007                    CMPQ    4,DL
         2 000013   000027 603000 2                  TRC     s:7542

      947     7532    2           THEN DO ;

      948     7533    2               NMD_PIT.ERRCODE.SEV = 0 ;

   7533  2 000014   000000 236000 3                  LDQ     0
         2 000015   000271 356000 xsym               ANSQ    NMD_PIT+185

      949     7534    2               XIT.CODE_ = VECTOR ( NMD_PIT.ERRCODE ) ;

PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:161  
   7534  2 000016   000002 237000 3                  LDAQ    2
         2 000017   000010 757000 1                  STAQ    XIT+2

      950     7535    2               XIT.V.STEPCC# = NMD_PIT.STEPCC# ;

   7535  2 000020   000366 236000 xsym               LDQ     NMD_PIT+246
         2 000021   000033 736000                    QLS     27
         2 000022   000012 552040 1                  STBQ    XIT+4,'40'O

      951     7536    2               CALL M$EXIT ( XIT ) ;

   7536  2 000023   000006 630400 1                  EPPR0   XIT
         2 000024   000001 713400                    CLIMB   exit
         2 000025   400400 401760                    pmme    nvectors=2

      952     7537    2               END ;

   7537  2 000026   000056 710000 2                  TRA     s:7560

      953     7538        /*
      954     7539        If the severity of the error was between 4 and 5, do a M$ERR that
      955     7540        sets the step condition code and the JIT error code.
      956     7541        */
      957     7542    1           ELSE IF  NMD_PIT.ERRCODE.SEV < 6

   7542  2 000027   000006 116007                    CMPQ    6,DL
         2 000030   000044 603000 2                  TRC     s:7554

      958     7543    2           THEN DO ;

      959     7544    2               NMD_PIT.ERRCODE.SEV = 0 ;

   7544  2 000031   000000 236000 3                  LDQ     0
         2 000032   000271 356000 xsym               ANSQ    NMD_PIT+185

      960     7545    2               ERR.CODE_ = VECTOR ( NMD_PIT.ERRCODE ) ;

PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:162  
   7545  2 000033   000002 237000 3                  LDAQ    2
         2 000034   000002 757000 1                  STAQ    ERR+2

      961     7546    2               ERR.V.STEPCC# = NMD_PIT.STEPCC# ;

   7546  2 000035   000366 236000 xsym               LDQ     NMD_PIT+246
         2 000036   000033 736000                    QLS     27
         2 000037   000004 552040 1                  STBQ    ERR+4,'40'O

      962     7547    2               CALL M$ERR ( ERR ) ;

   7547  2 000040   000000 630400 1                  EPPR0   ERR
         2 000041   000002 713400                    CLIMB   err
         2 000042   400400 401760                    pmme    nvectors=2

      963     7548    2               END ;

   7548  2 000043   000056 710000 2                  TRA     s:7560

      964     7549        /*
      965     7550        If the severity of the error was 6 or greater, do a M$XXX that
      966     7551        sets the step condition code and the JIT error code.
      967     7552        */
      968     7553    2           ELSE DO ;

      969     7554    2               NMD_PIT.ERRCODE.SEV = 0 ;

   7554  2 000044   000000 236000 3                  LDQ     0
         2 000045   000271 356000 xsym               ANSQ    NMD_PIT+185

      970     7555    2               XXX.CODE_ = VECTOR ( NMD_PIT.ERRCODE ) ;

   7555  2 000046   000002 237000 3                  LDAQ    2
         2 000047   000016 757000 1                  STAQ    XXX+2

      971     7556    2               XXX.V.STEPCC# = NMD_PIT.STEPCC# ;

PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:163  
   7556  2 000050   000366 236000 xsym               LDQ     NMD_PIT+246
         2 000051   000033 736000                    QLS     27
         2 000052   000020 552040 1                  STBQ    XXX+4,'40'O

      972     7557    2               CALL M$XXX ( XXX ) ;

   7557  2 000053   000014 630400 1                  EPPR0   XXX
         2 000054   000003 713400                    CLIMB   3
         2 000055   400400 401760                    pmme    nvectors=2

      973     7558    2               END ;

      974     7559
      975     7560    1           END NMU$QUIT ;

   7560  2 000056   000000 702200 xent               TSX2  ! X66_ARET
      976     7561        %EOD ;

PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:164  
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$QUIT.
PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:165  

 **** Variables and constants ****

  ****  Section 001  Data  NMU$QUIT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 ERR                        6-0-0/d STRC(216)   r     1 XIT
    14-0-0/d STRC(216)   r     1 XXX

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8892)  r     1 NMD_PIT


   Procedure NMU$QUIT requires 47 words for executable code.
   Procedure NMU$QUIT requires 4 words of local(AUTO) storage.
PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:166  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:167  
          MINI XREF LISTING

ERR
      7022**DCL      7547<>CALL
ERR.CODE_
      7022**DCL      7545<<ASSIGN
ERR.V
      7022**DCL      7022--DCLINIT
ERR.V.STEPCC#
      7023**DCL      7023--REDEF    7546<<ASSIGN
M$ERR
      5539**DCL-ENT  7547--CALL
M$EXIT
      5539**DCL-ENT  7526--CALL     7536--CALL
M$XXX
      5539**DCL-ENT  7557--CALL
NMD_PIT.ERRCODE
      7229**DCL      7022--DCLINIT  7496--DCLINIT  7515--DCLINIT  7534--ASSIGN   7545--ASSIGN   7555--ASSIGN
NMD_PIT.ERRCODE.SEV
      7257**DCL      7531>>IF       7533<<ASSIGN   7542>>IF       7544<<ASSIGN   7554<<ASSIGN
NMD_PIT.FLAGS.ERRCODE#
      7287**DCL      7524>>IF
NMD_PIT.STEPCC#
      7479**DCL      7535>>ASSIGN   7546>>ASSIGN   7556>>ASSIGN
XIT
      7496**DCL      7536<>CALL
XIT.CODE_
      7496**DCL      7534<<ASSIGN
XIT.V
      7496**DCL      7496--DCLINIT
XIT.V.STEPCC#
      7497**DCL      7497--REDEF    7535<<ASSIGN
XXX
      7515**DCL      7557<>CALL
PL6.E3A0      #009=NMU$QUIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:54 Page:168  
XXX.CODE_
      7515**DCL      7555<<ASSIGN
XXX.V
      7515**DCL      7515--DCLINIT
XXX.V.STEPCC#
      7516**DCL      7516--REDEF    7556<<ASSIGN

PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:169  
      977        1        /*M* NMU$READ - READ the selected device.                          */
      978        2        /*T***********************************************************/
      979        3        /*T*                                                         */
      980        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      981        5        /*T*                                                         */
      982        6        /*T***********************************************************/
      983        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      984        8        /*F*
      985        9        NAME:           NMU$READ
      986       10
      987       11        PURPOSE:        To read from the specified device.
      988       12
      989       13        DESCRIPTION:
      990       14
      991       15        The NMU$READ procedure is used to read from the specified device.
      992       16        */
      993       17        /*D*
      994       18        NAME:           NMU$READ
      995       19
      996       20        CALL:           CALL NMU$READ ( i, dreladdr, buf_ ) ALTRET ( error ) ;
      997       21
      998       22        PARAMETERS:
      999       23        */
     1000       24        /*K*
     1001       25        i               is the index into NMD_PIT.DEV.  i must be
     1002       26                either 0 or 1.
     1003       27        */
     1004       28        /*K*
     1005       29        dreladdr        is the device relative address used to do the read.
     1006       30                dreladdr must be between 0 and PACKSIZE-(SIZE/4096)-1.
     1007       31        */
     1008       32        /*K*
     1009       33        buf_            is a vector framing the buffer to be used when
     1010       34                doing the read.
     1011       35        */
     1012       36        /*D*
     1013       37        DESCRIPTION:
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:170  
     1014       38
     1015       39        The NMU$READ procedure is used to read from the specified device.
     1016       40        */
     1017       41        %EJECT ;
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:171  
     1018       42        NMU$READ:       PROC ( I, DRELADDR, BUF_ ) ALTRET ;
     1019       43        /*
     1020       44                        Includes
     1021       45        */
     1022       46        %INCLUDE                CP_6 ;
     1023     5605        %INCLUDE                NM_MACRO_M ;
     1024     7010        %INCLUDE                NM_PERR_C ;
     1025     7087        %INCLUDE                N_FC_C ;
     1026     7124        /*
     1027     7125                        Parameters
     1028     7126        */
     1029     7127    1   DCL 1 I                 UBIN ALIGNED PARAM ;
     1030     7128    1   DCL 1 DRELADDR          UBIN ALIGNED PARAM ;
     1031     7129    1   DCL 1 BUF_              VECTOR ALIGNED PARAM ;
     1032     7130        /*
     1033     7131                        Entries
     1034     7132        */
     1035     7133    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
     1036     7134        /*
     1037     7135                        Variables
     1038     7136        */
     1039     7137                                %B$ALT ( NAME =
     1040     7138              B$ALT             ,     STCLASS=BASED
     1041     7139                                                                        ) ;
     1042     7147                                %B$TCB  ( NAME =
     1043     7148              B$TCB             , STCLASS = "BASED(B$TCB$)"
     1044     7149                                                                        ) ;
     1045     7152    1   DCL 1 B$TCB$            PTR SYMREF ;
     1046     7153                                %NMD_ERRTEXT ( FPTN = READ
     1047     7154        /*    ERRTEXT  */       , FIRST = YES
     1048     7155                                , LAST  = YES
     1049     7156                                                                        ) ;
     1050     7222              %F$DCB ;
     1051     7279                                %NMD_PIT ( FPTN =
     1052     7280              NMD_PIT           , STCLASS = SYMREF
     1053     7281                                                                        ) ;
     1054     7734                                %VLP_ERRCODE ( FPTN =
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:172  
     1055     7735              NMU#IOQ_ERROR     , STCLASS = CONSTANT
     1056     7736                                , ERR# = %E$NMD#IOQ_ERROR
     1057     7737                                , FCG  = %NMD#FCG
     1058     7738                                , MID  = 'U'
     1059     7739                                , MON  = %NO#
     1060     7740                                , SEV  = 3
     1061     7741                                                                        ) ;
     1062     7786                                %FPT_IOQ ( FPTN =
     1063     7787              READ              , STCLASS = STATIC
     1064     7788                                , FC      = %N_RDBIN
     1065     7789                                , BPMIR   = YES
     1066     7790                                , WAIT    = YES
     1067     7791                                                                        ) ;
     1068     7809        %EJECT ;
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:173  
     1069     7810        /*
     1070     7811        Set up the FPT to read to the specified device and then read
     1071     7812        from the device.
     1072     7813        */
     1073     7814    1           READ.BUF_               = BUF_ ;
     1074     7815    1           READ.V.DCB#             = NMD_PIT.DEV.DCB#(I) ;
     1075     7816    1           READ.V.DLA.DCTX#        = NMD_PIT.DEV.DCTX(I) ;
     1076     7817    1           READ.V.DLA.DRELADDR#    = DRELADDR ;
     1077     7818
     1078     7819    1           CALL M$IOQ ( READ )                     ALTRET ( ALTERR ) ;
     1079     7820        /*
     1080     7821        Check for an IO error.
     1081     7822        */
     1082     7823    1           IF  NMD_PIT.DEV.DCB$(I)->F$DCB.TYC
     1083     7824    2           THEN DO ;
     1084     7825        /*E*
     1085     7826        ERROR:  NMU-E$NMD#IOQ_ERROR-3
     1086     7827        MESSAGE:  M$IOQ error on %U1 of device %U2.
     1087     7828        DESCRIPTION:  The TYC returned after the M$IOQ request to the
     1088     7829                      device indicated an error or abnormal end for the
     1089     7830                      IO request.
     1090     7831        */
     1091     7832    2               CALL NME$ERRMSG ( NMU#IOQ_ERROR,
     1092     7833    2                                 NMD_PIT.DEV.DCB#(I),
     1093     7834    2                                 ERRTEXT.READ_,
     1094     7835    2                                 VECTOR(NMD_PIT.DEV.NAME(I)) ) ;
     1095     7836    2               GOTO ERROR ;
     1096     7837    2               END ;
     1097     7838        /*
     1098     7839        Return to the calling routine.
     1099     7840        */
     1100     7841    1           RETURN ;
     1101     7842
     1102     7843    1   ALTERR: CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR,
     1103     7844    1                             NMD_PIT.DEV.DCB#(I)           ) ;
     1104     7845
     1105     7846    1   ERROR:  ALTRETURN ;
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:174  
     1106     7847
     1107     7848    1           END NMU$READ ;
     1108     7849        %EOD ;

PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:175  
--  Include file information  --

   N_FC_C.:E05TOU  is referenced.
   NM_PERR_C.:E05TOU  is referenced.
   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$READ.

   Procedure NMU$READ requires 73 words for executable code.
   Procedure NMU$READ requires 12 words of local(AUTO) storage.

PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:176  

 Object Unit name= NMU$READ                                   File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:55:20.00 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      5      5  NMU$READ
    2   Data  even  none     8     10  NMU$READ
    3   Proc  even  none    73    111  NMU$READ
    4  RoData even  none     6      6  NMU$READ

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        3  NMU$READ

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       6 NME$ERRMSG
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:177  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                NMD_PIT
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:178  


      977        1        /*M* NMU$READ - READ the selected device.                          */
      978        2        /*T***********************************************************/
      979        3        /*T*                                                         */
      980        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      981        5        /*T*                                                         */
      982        6        /*T***********************************************************/
      983        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
      984        8        /*F*
      985        9        NAME:           NMU$READ
      986       10
      987       11        PURPOSE:        To read from the specified device.
      988       12
      989       13        DESCRIPTION:
      990       14
      991       15        The NMU$READ procedure is used to read from the specified device.
      992       16        */
      993       17        /*D*
      994       18        NAME:           NMU$READ
      995       19
      996       20        CALL:           CALL NMU$READ ( i, dreladdr, buf_ ) ALTRET ( error ) ;
      997       21
      998       22        PARAMETERS:
      999       23        */
     1000       24        /*K*
     1001       25        i               is the index into NMD_PIT.DEV.  i must be
     1002       26                either 0 or 1.
     1003       27        */
     1004       28        /*K*
     1005       29        dreladdr        is the device relative address used to do the read.
     1006       30                dreladdr must be between 0 and PACKSIZE-(SIZE/4096)-1.
     1007       31        */
     1008       32        /*K*
     1009       33        buf_            is a vector framing the buffer to be used when
     1010       34                doing the read.
     1011       35        */
     1012       36        /*D*
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:179  
     1013       37        DESCRIPTION:
     1014       38
     1015       39        The NMU$READ procedure is used to read from the specified device.
     1016       40        */
     1017       41        %EJECT ;
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:180  
     1018       42        NMU$READ:       PROC ( I, DRELADDR, BUF_ ) ALTRET ;

     42  3 000000   000000 700200 xent  NMU$READ     TSX0  ! X66_AUTO_3
         3 000001   000014 000003                    ZERO    12,3

     1019       43        /*
     1020       44                        Includes
     1021       45        */
     1022       46        %INCLUDE                CP_6 ;
     1023     5605        %INCLUDE                NM_MACRO_M ;
     1024     7010        %INCLUDE                NM_PERR_C ;
     1025     7087        %INCLUDE                N_FC_C ;
     1026     7124        /*
     1027     7125                        Parameters
     1028     7126        */
     1029     7127    1   DCL 1 I                 UBIN ALIGNED PARAM ;
     1030     7128    1   DCL 1 DRELADDR          UBIN ALIGNED PARAM ;
     1031     7129    1   DCL 1 BUF_              VECTOR ALIGNED PARAM ;
     1032     7130        /*
     1033     7131                        Entries
     1034     7132        */
     1035     7133    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
     1036     7134        /*
     1037     7135                        Variables
     1038     7136        */
     1039     7137                                %B$ALT ( NAME =
     1040     7138              B$ALT             ,     STCLASS=BASED
     1041     7139                                                                        ) ;
     1042     7147                                %B$TCB  ( NAME =
     1043     7148              B$TCB             , STCLASS = "BASED(B$TCB$)"
     1044     7149                                                                        ) ;
     1045     7152    1   DCL 1 B$TCB$            PTR SYMREF ;
     1046     7153                                %NMD_ERRTEXT ( FPTN = READ
     1047     7154        /*    ERRTEXT  */       , FIRST = YES
     1048     7155                                , LAST  = YES
     1049     7156                                                                        ) ;
     1050     7222              %F$DCB ;
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:181  
     1051     7279                                %NMD_PIT ( FPTN =
     1052     7280              NMD_PIT           , STCLASS = SYMREF
     1053     7281                                                                        ) ;
     1054     7734                                %VLP_ERRCODE ( FPTN =
     1055     7735              NMU#IOQ_ERROR     , STCLASS = CONSTANT
     1056     7736                                , ERR# = %E$NMD#IOQ_ERROR
     1057     7737                                , FCG  = %NMD#FCG
     1058     7738                                , MID  = 'U'
     1059     7739                                , MON  = %NO#
     1060     7740                                , SEV  = 3
     1061     7741                                                                        ) ;
     1062     7786                                %FPT_IOQ ( FPTN =
     1063     7787              READ              , STCLASS = STATIC
     1064     7788                                , FC      = %N_RDBIN
     1065     7789                                , BPMIR   = YES
     1066     7790                                , WAIT    = YES
     1067     7791                                                                        ) ;
     1068     7809        %EJECT ;
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:182  
     1069     7810        /*
     1070     7811        Set up the FPT to read to the specified device and then read
     1071     7812        from the device.
     1072     7813        */
     1073     7814    1           READ.BUF_               = BUF_ ;

   7814  3 000002   200005 470500                    LDP0    @BUF_,,AUTO
         3 000003   000000 100500                    MLR     fill='000'O
         3 000004   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         3 000005   000002 000010 2                  ADSC9   READ+2                   cn=0,n=8

     1074     7815    1           READ.V.DCB#             = NMD_PIT.DEV.DCB#(I) ;

   7815  3 000006   200003 471500                    LDP1    @I,,AUTO
         3 000007   100000 236100                    LDQ     0,,PR1
         3 000010   000015 402007                    MPY     13,DL
         3 000011   000001 736000                    QLS     1
         3 000012   000006 720006 xsym               LXL0    NMD_PIT+6,QL
         3 000013   000004 740000 2                  STX0    READ+4

     1075     7816    1           READ.V.DLA.DCTX#        = NMD_PIT.DEV.DCTX(I) ;

   7816  3 000014   100000 236100                    LDQ     0,,PR1
         3 000015   000015 402007                    MPY     13,DL
         3 000016   000001 736000                    QLS     1
         3 000017   000011 236006 xsym               LDQ     NMD_PIT+9,QL
         3 000020   000025 736000                    QLS     21
         3 000021   000005 676000 2                  ERQ     READ+5
         3 000022   777770 376003                    ANQ     -8,DU
         3 000023   000005 656000 2                  ERSQ    READ+5

     1076     7817    1           READ.V.DLA.DRELADDR#    = DRELADDR ;

   7817  3 000024   200004 473500                    LDP3    @DRELADDR,,AUTO
         3 000025   300000 236100                    LDQ     0,,PR3
         3 000026   000005 676000 2                  ERQ     READ+5
         3 000027   000000 376000 4                  ANQ     0
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:183  
         3 000030   000005 656000 2                  ERSQ    READ+5

     1077     7818
     1078     7819    1           CALL M$IOQ ( READ )                     ALTRET ( ALTERR ) ;

   7819  3 000031   000000 630400 2                  EPPR0   READ
         3 000032   470006 713400                    CLIMB   alt,+28678
         3 000033   400400 401760                    pmme    nvectors=2
         3 000034   000072 702000 3                  TSX2    ALTERR

     1079     7820        /*
     1080     7821        Check for an IO error.
     1081     7822        */
     1082     7823    1           IF  NMD_PIT.DEV.DCB$(I)->F$DCB.TYC

   7823  3 000035   200003 470500                    LDP0    @I,,AUTO
         3 000036   000000 236100                    LDQ     0,,PR0
         3 000037   000015 402007                    MPY     13,DL
         3 000040   000001 736000                    QLS     1
         3 000041   000007 471406 xsym               LDP1    NMD_PIT+7,QL
         3 000042   100002 235100                    LDA     2,,PR1
         3 000043   000071 600000 3                  TZE     s:7841

     1083     7824    2           THEN DO ;

     1084     7825        /*E*
     1085     7826        ERROR:  NMU-E$NMD#IOQ_ERROR-3
     1086     7827        MESSAGE:  M$IOQ error on %U1 of device %U2.
     1087     7828        DESCRIPTION:  The TYC returned after the M$IOQ request to the
     1088     7829                      device indicated an error or abnormal end for the
     1089     7830                      IO request.
     1090     7831        */
     1091     7832    2               CALL NME$ERRMSG ( NMU#IOQ_ERROR,

   7832  3 000044   000000 236100                    LDQ     0,,PR0
         3 000045   000015 402007                    MPY     13,DL
         3 000046   000001 235000 4                  LDA     1
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:184  
         3 000047   000000 620006                    EAX0    0,QL
         3 000050   000023 736000                    QLS     19
         3 000051   000002 036000 4                  ADLQ    2
         3 000052   200006 757100                    STAQ    @BUF_+1,,AUTO
         3 000053   200006 631500                    EPPR1   @BUF_+1,,AUTO
         3 000054   200013 451500                    STP1    @BUF_+6,,AUTO
         3 000055   000003 236000 4                  LDQ     3
         3 000056   200012 756100                    STQ     @BUF_+5,,AUTO
         3 000057   000000 636010                    EAQ     0,X0
         3 000060   000001 736000                    QLS     1
         3 000061   000004 036000 4                  ADLQ    4
         3 000062   000005 235000 4                  LDA     5
         3 000063   200010 757100                    STAQ    @BUF_+3,,AUTO
         3 000064   200010 630500                    EPPR0   @BUF_+3,,AUTO
         3 000065   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000066   000000 701000 xent               TSX1    NME$ERRMSG
         3 000067   000000 011000                    NOP     0

     1092     7833    2                                 NMD_PIT.DEV.DCB#(I),
     1093     7834    2                                 ERRTEXT.READ_,
     1094     7835    2                                 VECTOR(NMD_PIT.DEV.NAME(I)) ) ;
     1095     7836    2               GOTO ERROR ;

   7836  3 000070   000110 710000 3                  TRA     ERROR

     1096     7837    2               END ;
     1097     7838        /*
     1098     7839        Return to the calling routine.
     1099     7840        */
     1100     7841    1           RETURN ;

   7841  3 000071   000000 702200 xent               TSX2  ! X66_ARET

     1101     7842
     1102     7843    1   ALTERR: CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR,

   7843  3 000072   000000 470400 xsym  ALTERR       LDP0    B$TCB$
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:185  
         3 000073   000000 471500                    LDP1    0,,PR0
         3 000074   200003 473500                    LDP3    @I,,AUTO
         3 000075   300000 236100                    LDQ     0,,PR3
         3 000076   000015 402007                    MPY     13,DL
         3 000077   000023 736000                    QLS     19
         3 000100   000004 036000 4                  ADLQ    4
         3 000101   200007 756100                    STQ     @BUF_+2,,AUTO
         3 000102   100102 634500                    EPPR4   66,,PR1
         3 000103   200006 454500                    STP4    @BUF_+1,,AUTO
         3 000104   200006 630500                    EPPR0   @BUF_+1,,AUTO
         3 000105   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000106   000000 701000 xent               TSX1    NME$ERRMSG
         3 000107   000000 011000                    NOP     0

     1103     7844    1                             NMD_PIT.DEV.DCB#(I)           ) ;
     1104     7845
     1105     7846    1   ERROR:  ALTRETURN ;

   7846  3 000110   000000 702200 xent  ERROR        TSX2  ! X66_AALT
     1106     7847
     1107     7848    1           END NMU$READ ;
     1108     7849        %EOD ;

PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:186  
--  Include file information  --

   N_FC_C.:E05TOU  is referenced.
   NM_PERR_C.:E05TOU  is referenced.
   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$READ.
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:187  

 **** Variables and constants ****

  ****  Section 001 RoData NMU$READ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 ERRTEXT                    4-0-0/w STRC        r     1 NMU#IOQ_ERROR

  ****  Section 002  Data  NMU$READ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(288)   r     1 READ

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @BUF_                      4-0-0/w PTR         r     1 @DRELADDR
     3-0-0/w PTR         r     1 @I                        *0-0-0/w VECT        r     1 BUF_
    *0-0-0/w UBIN        r     1 DRELADDR                  *0-0-0/w UBIN        r     1 I

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/d STRC(8892)  r     1 NMD_PIT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:188  
     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/d ASTR(3528)  r     1 F$DCB


   Procedure NMU$READ requires 73 words for executable code.
   Procedure NMU$READ requires 12 words of local(AUTO) storage.
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:189  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:190  
          MINI XREF LISTING

ALTERR
      7843**LABEL    7819--CALLALT
B$ALT.CODE
      7141**DCL      7141--REDEF    7142--REDEF    7142--REDEF
B$ALT.ERR
      7142**DCL      7843<>CALL
B$ALT.ERR.ERR#
      7143**DCL      7143--REDEF
B$ALT.EVID
      7142**DCL      7142--REDEF    7142--REDEF
B$TCB.ALT$
      7150**DCL      7843>>CALL
B$TCB$
      7152**DCL      7150--IMP-PTR  7843>>CALL
BUF_
      7129**DCL        42--PROC     7814>>ASSIGN
DRELADDR
      7128**DCL        42--PROC     7817>>ASSIGN
ERROR
      7846**LABEL    7836--GOTO
ERRTEXT.READ
      7213**DCL      7220--DCLINIT
ERRTEXT.READ_
      7220**DCL      7832<>CALL
F$DCB.ACTPOS
      7255**DCL      7255--REDEF
F$DCB.ARS#
      7229**DCL      7229--REDEF
F$DCB.ATTR
      7248**DCL      7249--REDEF
F$DCB.BORROW
      7263**DCL      7263--REDEF    7263--REDEF    7263--REDEF
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:191  
F$DCB.DCBNAME.L
      7277**DCL      7277--IMP-SIZ
F$DCB.EOMCHAR#
      7233**DCL      7233--REDEF
F$DCB.FLDID
      7258**DCL      7258--REDEF
F$DCB.FORM$
      7252**DCL      7252--REDEF
F$DCB.FSECT
      7268**DCL      7268--REDEF
F$DCB.FSN#
      7245**DCL      7245--REDEF    7245--REDEF    7246--REDEF
F$DCB.HEADER$
      7251**DCL      7251--REDEF
F$DCB.IXTNSIZE#
      7249**DCL      7249--REDEF
F$DCB.LASTSTA$
      7238**DCL      7238--REDEF
F$DCB.LVL
      7264**DCL      7264--REDEF
F$DCB.NAME#.C
      7239**DCL      7239--REDEF
F$DCB.NOEOF
      7261**DCL      7261--REDEF
F$DCB.NRECS#
      7250**DCL      7250--REDEF
F$DCB.NRECX
      7269**DCL      7269--REDEF
F$DCB.OHDR
      7261**DCL      7261--REDEF
F$DCB.ORG#
      7244**DCL      7244--REDEF
F$DCB.PRECNO
      7267**DCL      7267--REDEF
F$DCB.RCSZ
      7273**DCL      7273--REDEF
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:192  
F$DCB.RES#
      7240**DCL      7240--REDEF
F$DCB.SETX
      7252**DCL      7252--REDEF
F$DCB.TAB$
      7252**DCL      7252--REDEF
F$DCB.TDA
      7266**DCL      7267--REDEF
F$DCB.TYC
      7229**DCL      7823>>IF
F$DCB.WSN#
      7240**DCL      7240--REDEF
I
      7127**DCL        42--PROC     7815>>ASSIGN   7816>>ASSIGN   7823>>IF       7832>>CALL     7832>>CALL
      7843>>CALL
M$IOQ
      5584**DCL-ENT  7819--CALL
NMD_PIT.DEV.DCB#
      7330**DCL      7815>>ASSIGN   7832<>CALL     7843<>CALL
NMD_PIT.DEV.DCB$
      7337**DCL      7823>>IF
NMD_PIT.DEV.DCTX
      7347**DCL      7816>>ASSIGN
NMD_PIT.DEV.NAME
      7397**DCL      7832--CALL
NME$ERRMSG
      7133**DCL-ENT  7832--CALL     7843--CALL
NMU#IOQ_ERROR
      7753**DCL      7832<>CALL
READ
      7802**DCL      7819<>CALL
READ.BUF_
      7802**DCL      7814<<ASSIGN
READ.V
      7804**DCL      7802--DCLINIT
READ.V.DCB#
PL6.E3A0      #010=NMU$READ File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:55 Page:193  
      7804**DCL      7815<<ASSIGN
READ.V.DLA.DCTX#
      7806**DCL      7816<<ASSIGN
READ.V.DLA.DRELADDR#
      7806**DCL      7817<<ASSIGN

PL6.E3A0      #011=NMU$RESET File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:55 Page:194  
     1109        1        /*M* NMU$RESET - Reset procedure                                   */
     1110        2        /*T***********************************************************/
     1111        3        /*T*                                                         */
     1112        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1113        5        /*T*                                                         */
     1114        6        /*T***********************************************************/
     1115        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
     1116        8        /*F*
     1117        9        NAME:           NMU$RESET
     1118       10
     1119       11        PURPOSE:        To reset user environment and exit control.
     1120       12        */
     1121       13        /*D*
     1122       14        NAME:           NMU$RESET
     1123       15
     1124       16        CALL:           CALL NMU$RESET ALTRET ( error ) ;
     1125       17
     1126       18        PARAMETERS:     None.
     1127       19        */
     1128       20        /*D*
     1129       21        DESCRIPTION:
     1130       22
     1131       23        The NMU$RESET procedure is used to reset the user environment and
     1132       24        exit control that were modified for the MIRROR program.
     1133       25        */
     1134       26        %EJECT ;
PL6.E3A0      #011=NMU$RESET File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:55 Page:195  
     1135       27        NMU$RESET:      PROC ;
     1136       28        /*
     1137       29                        Includes
     1138       30        */
     1139       31        %INCLUDE                CP_6 ;
     1140     5590        %INCLUDE                NM_MACRO_M ;
     1141     6995        %INCLUDE                NI_DATA_C ;
     1142     7108        /*
     1143     7109                        Entries
     1144     7110        */
     1145     7111    1   DCL 1 NMU$ABORT         ENTRY(2) ALTRET ;
     1146     7112    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
     1147     7113        /*
     1148     7114                        Variables
     1149     7115        */
     1150     7116                                %NMD_PIT ( FPTN =
     1151     7117              NMD_PIT           , STCLASS = SYMREF
     1152     7118                                                                        ) ;
     1153     7571                                %FPT_XCON ( FPTN =
     1154     7572              XCON_RESET        , STCLASS = STATIC
     1155     7573                                                                        ) ;
     1156     7587        %EJECT ;
PL6.E3A0      #011=NMU$RESET File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:55 Page:196  
     1157     7588        /*
     1158     7589        Unlock any locked devices.
     1159     7590        */
     1160     7591    1           IF  NMD_PIT.FLAGS.CIP#
     1161     7592    1           THEN
     1162     7593    1               CALL NMU$ABORT ( %NI_MIRROR_OPER, %NI_MIRROR_FAIL ) ;
     1163     7594    1           ELSE
     1164     7595    1               CALL NMU$ABORT ( /* NIL */, /* NIL */ ) ;
     1165     7596        /*
     1166     7597        Re-establish the previous exit control procedure if one had been
     1167     7598        established.  Reset the exit control procedure flag in NMD_PIT.
     1168     7599        Do a M$XCON to either establish the previous exit control procedure
     1169     7600        or to remove the last exit control procedure.
     1170     7601        */
     1171     7602    2           IF  NMD_PIT.FLAGS.XCON# = %YES#  THEN DO ;
     1172     7603    2               XCON_RESET.V.UENTRY# = NMD_PIT.PXCON$$ ;
     1173     7604    2               CALL M$XCON ( XCON_RESET ) ;
     1174     7605    2               NMD_PIT.FLAGS.XCON# = %NO# ;
     1175     7606    2               END ;
     1176     7607        /*
     1177     7608        Return to the calling procedure.
     1178     7609        */
     1179     7610    1           RETURN ;
     1180     7611
     1181     7612    1           END NMU$RESET ;
     1182     7613        %EOD ;

PL6.E3A0      #011=NMU$RESET File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:55 Page:197  
--  Include file information  --

   NI_DATA_C.:E05TOU  is referenced.
   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$RESET.

   Procedure NMU$RESET requires 24 words for executable code.
   Procedure NMU$RESET requires 4 words of local(AUTO) storage.

PL6.E3A0      #011=NMU$RESET File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:55 Page:198  

 Object Unit name= NMU$RESET                                  File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:55:58.96 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none     6      6  NMU$RESET
    2   Proc  even  none    24     30  NMU$RESET
    3  RoData even  none     3      3  NMU$RESET

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        0  NMU$RESET

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 NMU$ABORT
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  NMD_PIT                               B_VECTNIL
PL6.E3A0      #011=NMU$RESET File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:55 Page:199  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #011=NMU$RESET File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:55 Page:200  


     1109        1        /*M* NMU$RESET - Reset procedure                                   */
     1110        2        /*T***********************************************************/
     1111        3        /*T*                                                         */
     1112        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1113        5        /*T*                                                         */
     1114        6        /*T***********************************************************/
     1115        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
     1116        8        /*F*
     1117        9        NAME:           NMU$RESET
     1118       10
     1119       11        PURPOSE:        To reset user environment and exit control.
     1120       12        */
     1121       13        /*D*
     1122       14        NAME:           NMU$RESET
     1123       15
     1124       16        CALL:           CALL NMU$RESET ALTRET ( error ) ;
     1125       17
     1126       18        PARAMETERS:     None.
     1127       19        */
     1128       20        /*D*
     1129       21        DESCRIPTION:
     1130       22
     1131       23        The NMU$RESET procedure is used to reset the user environment and
     1132       24        exit control that were modified for the MIRROR program.
     1133       25        */
     1134       26        %EJECT ;
PL6.E3A0      #011=NMU$RESET File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:55 Page:201  
     1135       27        NMU$RESET:      PROC ;

     27  2 000000   000000 700200 xent  NMU$RESET    TSX0  ! X66_AUTO_0
         2 000001   000004 000000                    ZERO    4,0

     1136       28        /*
     1137       29                        Includes
     1138       30        */
     1139       31        %INCLUDE                CP_6 ;
     1140     5590        %INCLUDE                NM_MACRO_M ;
     1141     6995        %INCLUDE                NI_DATA_C ;
     1142     7108        /*
     1143     7109                        Entries
     1144     7110        */
     1145     7111    1   DCL 1 NMU$ABORT         ENTRY(2) ALTRET ;
     1146     7112    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
     1147     7113        /*
     1148     7114                        Variables
     1149     7115        */
     1150     7116                                %NMD_PIT ( FPTN =
     1151     7117              NMD_PIT           , STCLASS = SYMREF
     1152     7118                                                                        ) ;
     1153     7571                                %FPT_XCON ( FPTN =
     1154     7572              XCON_RESET        , STCLASS = STATIC
     1155     7573                                                                        ) ;
     1156     7587        %EJECT ;
PL6.E3A0      #011=NMU$RESET File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:55 Page:202  
     1157     7588        /*
     1158     7589        Unlock any locked devices.
     1159     7590        */
     1160     7591    1           IF  NMD_PIT.FLAGS.CIP#

   7591  2 000002   000273 236000 xsym               LDQ     NMD_PIT+187
         2 000003   200000 316003                    CANQ    65536,DU
         2 000004   000012 600000 2                  TZE     s:7595

     1161     7592    1           THEN
     1162     7593    1               CALL NMU$ABORT ( %NI_MIRROR_OPER, %NI_MIRROR_FAIL ) ;

   7593  2 000005   000000 630400 3                  EPPR0   0
         2 000006   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000007   000000 701000 xent               TSX1    NMU$ABORT
         2 000010   000000 011000                    NOP     0
         2 000011   000015 710000 2                  TRA     s:7602

     1163     7594    1           ELSE
     1164     7595    1               CALL NMU$ABORT ( /* NIL */, /* NIL */ ) ;

   7595  2 000012   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000013   000000 701000 xent               TSX1    NMU$ABORT
         2 000014   000000 011000                    NOP     0

     1165     7596        /*
     1166     7597        Re-establish the previous exit control procedure if one had been
     1167     7598        established.  Reset the exit control procedure flag in NMD_PIT.
     1168     7599        Do a M$XCON to either establish the previous exit control procedure
     1169     7600        or to remove the last exit control procedure.
     1170     7601        */
     1171     7602    2           IF  NMD_PIT.FLAGS.XCON# = %YES#  THEN DO ;

   7602  2 000015   000273 236000 xsym               LDQ     NMD_PIT+187
         2 000016   004000 316003                    CANQ    2048,DU
         2 000017   000027 600000 2                  TZE     s:7610

PL6.E3A0      #011=NMU$RESET File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:55 Page:203  
     1172     7603    2               XCON_RESET.V.UENTRY# = NMD_PIT.PXCON$$ ;

   7603  2 000020   000311 236000 xsym               LDQ     NMD_PIT+201
         2 000021   000004 756000 1                  STQ     XCON_RESET+4

     1173     7604    2               CALL M$XCON ( XCON_RESET ) ;

   7604  2 000022   000000 630400 1                  EPPR0   XCON_RESET
         2 000023   010003 713400                    CLIMB   4099
         2 000024   400400 401760                    pmme    nvectors=2

     1174     7605    2               NMD_PIT.FLAGS.XCON# = %NO# ;

   7605  2 000025   000002 236000 3                  LDQ     2
         2 000026   000273 356000 xsym               ANSQ    NMD_PIT+187

     1175     7606    2               END ;

     1176     7607        /*
     1177     7608        Return to the calling procedure.
     1178     7609        */
     1179     7610    1           RETURN ;

   7610  2 000027   000000 702200 xent               TSX2  ! X66_ARET
     1180     7611
     1181     7612    1           END NMU$RESET ;
     1182     7613        %EOD ;

PL6.E3A0      #011=NMU$RESET File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:55 Page:204  
--  Include file information  --

   NI_DATA_C.:E05TOU  is referenced.
   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$RESET.
PL6.E3A0      #011=NMU$RESET File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:55 Page:205  

 **** Variables and constants ****

  ****  Section 001  Data  NMU$RESET

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 XCON_RESET

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8892)  r     1 NMD_PIT


   Procedure NMU$RESET requires 24 words for executable code.
   Procedure NMU$RESET requires 4 words of local(AUTO) storage.
PL6.E3A0      #011=NMU$RESET File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:55 Page:206  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #011=NMU$RESET File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:55 Page:207  
          MINI XREF LISTING

M$XCON
      5573**DCL-ENT  7604--CALL
NMD_PIT.FLAGS.CIP#
      7371**DCL      7591>>IF
NMD_PIT.FLAGS.XCON#
      7402**DCL      7602>>IF       7605<<ASSIGN
NMD_PIT.PXCON$$
      7513**DCL      7603>>ASSIGN
NMU$ABORT
      7111**DCL-ENT  7593--CALL     7595--CALL
XCON_RESET
      7584**DCL      7604<>CALL
XCON_RESET.V
      7585**DCL      7584--DCLINIT
XCON_RESET.V.UENTRY#
      7585**DCL      7603<<ASSIGN

PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:208  
     1183        1        /*M* NMU$SCRUB_VID - Scrub VID for Mirrored Disk.               */
     1184        2        /*T***********************************************************/
     1185        3        /*T*                                                         */
     1186        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1187        5        /*T*                                                         */
     1188        6        /*T***********************************************************/
     1189        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
     1190        8        /*F*
     1191        9        NAME:           NMU$SCRUB_VID
     1192       10
     1193       11        PURPOSE:        To scrub values in VID for Mirorred Disk.
     1194       12
     1195       13        DESCRIPTION:
     1196       14
     1197       15        The NMU$SCRUB_VID procedure is used to scrub the values in the
     1198       16        VID to terminate Mirrored Disk operation.
     1199       17        */
     1200       18        /*D*
     1201       19        NAME:           NMU$SCRUB_VID
     1202       20
     1203       21        CALL:           CALL NMU$SCRUB_VID ( i, uts ) ;
     1204       22
     1205       23        PARAMETERS:
     1206       24         */
     1207       25        /*K*
     1208       26        i               is UBIN WORD that is the index into NMD_PIT.DEV.
     1209       27                i must be either 0 or 1.
     1210       28        */
     1211       29        /*K*
     1212       30        uts             is a UBIN WORD that specifies the new UTS value for the
     1213       31                specified device.
     1214       32        */
     1215       33        /*D*
     1216       34        DESCRIPTION:
     1217       35
     1218       36        The NMU$SCRUB_VID procedure is used to scrub the values in the
     1219       37        VID to terminate Mirrored Disk operation.
PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:209  
     1220       38        */
     1221       39        %EJECT ;
PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:210  
     1222       40        NMU$SCRUB_VID:  PROC ( I, UTS ) ;
     1223       41        /*
     1224       42                        Includes
     1225       43        */
     1226       44        %INCLUDE                CP_6 ;
     1227     5603        %INCLUDE                NI_DATA_C ;
     1228     5716        %INCLUDE                NM_MACRO_M ;
     1229     7121        %INCLUDE                FM$GRAN ;
     1230     7190        /*
     1231     7191                        Parameters
     1232     7192        */
     1233     7193    1   DCL 1 I                 SBIN WORD ALIGNED PARAM ;
     1234     7194    1   DCL 1 UTS               UBIN WORD ALIGNED PARAM ;
     1235     7195        /*
     1236     7196                        Variables
     1237     7197        */
     1238     7198                                %FM$VID ( FM$VID =
     1239     7199              FM$VID            , BASED = BASED
     1240     7200                                                                        ) ;
     1241     7206    1   DCL 1 J                 SBIN WORD ALIGNED AUTO ;
     1242     7207                                %NMD_PIT ( FPTN =
     1243     7208              NMD_PIT           , STCLASS = SYMREF
     1244     7209                                                                        ) ;
     1245     7662    1   DCL 1 VID$              PTR ALIGNED AUTO ;
     1246     7663        %EJECT ;
PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:211  
     1247     7664        /*
     1248     7665        Scrub the values in the VID to terminate Mirorred Disk operation.
     1249     7666        */
     1250     7667    1           VID$ = NMD_PIT.DEV.VID$(I) ;
     1251     7668
     1252     7669    1           VID$->FM$VID.PSN             = '      ' ;
     1253     7670    1           VID$->FM$VID.VOLCNT          = 0 ;
     1254     7671    1           VID$->FM$VID.MIRROR.C        = 'MIRROR  ' ;
     1255     7672    1           VID$->FM$VID.MIRROR.UTS      = UTS ;
     1256     7673    1           VID$->FM$VID.MIRROR.STATE(0) = %NI_MIRROR_FAIL ;
     1257     7674
     1258     7675    2           DO  J = 0 TO 25 ;
     1259     7676    2               VID$->FM$VID.SECTSTRT(I) = 0 ;
     1260     7677    2               END ;
     1261     7678
     1262     7679    1           RETURN ;
     1263     7680
     1264     7681    1           END NMU$SCRUB_VID ;
     1265     7682        %EOD ;

PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:212  
--  Include file information  --

   FM$GRAN.:E05TOU  is referenced.
   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   NI_DATA_C.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$SCRUB_VID.

   Procedure NMU$SCRUB_VID requires 32 words for executable code.
   Procedure NMU$SCRUB_VID requires 8 words of local(AUTO) storage.

PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:213  

 Object Unit name= NMU$SCRUB_VID                              File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:56:25.88 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      4      4  NMU$SCRUB_VID
    2   Proc  even  none    32     40  NMU$SCRUB_VID

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        2  NMU$SCRUB_VID

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  NMD_PIT
PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:214  


     1183        1        /*M* NMU$SCRUB_VID - Scrub VID for Mirrored Disk.               */
     1184        2        /*T***********************************************************/
     1185        3        /*T*                                                         */
     1186        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1187        5        /*T*                                                         */
     1188        6        /*T***********************************************************/
     1189        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
     1190        8        /*F*
     1191        9        NAME:           NMU$SCRUB_VID
     1192       10
     1193       11        PURPOSE:        To scrub values in VID for Mirorred Disk.
     1194       12
     1195       13        DESCRIPTION:
     1196       14
     1197       15        The NMU$SCRUB_VID procedure is used to scrub the values in the
     1198       16        VID to terminate Mirrored Disk operation.
     1199       17        */
     1200       18        /*D*
     1201       19        NAME:           NMU$SCRUB_VID
     1202       20
     1203       21        CALL:           CALL NMU$SCRUB_VID ( i, uts ) ;
     1204       22
     1205       23        PARAMETERS:
     1206       24         */
     1207       25        /*K*
     1208       26        i               is UBIN WORD that is the index into NMD_PIT.DEV.
     1209       27                i must be either 0 or 1.
     1210       28        */
     1211       29        /*K*
     1212       30        uts             is a UBIN WORD that specifies the new UTS value for the
     1213       31                specified device.
     1214       32        */
     1215       33        /*D*
     1216       34        DESCRIPTION:
     1217       35
     1218       36        The NMU$SCRUB_VID procedure is used to scrub the values in the
PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:215  
     1219       37        VID to terminate Mirrored Disk operation.
     1220       38        */
     1221       39        %EJECT ;
PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:216  
     1222       40        NMU$SCRUB_VID:  PROC ( I, UTS ) ;

     40  2 000000   000000 700200 xent  NMU$SCRUB_V* TSX0  ! X66_AUTO_2
         2 000001   000010 000002                    ZERO    8,2

     1223       41        /*
     1224       42                        Includes
     1225       43        */
     1226       44        %INCLUDE                CP_6 ;
     1227     5603        %INCLUDE                NI_DATA_C ;
     1228     5716        %INCLUDE                NM_MACRO_M ;
     1229     7121        %INCLUDE                FM$GRAN ;
     1230     7190        /*
     1231     7191                        Parameters
     1232     7192        */
     1233     7193    1   DCL 1 I                 SBIN WORD ALIGNED PARAM ;
     1234     7194    1   DCL 1 UTS               UBIN WORD ALIGNED PARAM ;
     1235     7195        /*
     1236     7196                        Variables
     1237     7197        */
     1238     7198                                %FM$VID ( FM$VID =
     1239     7199              FM$VID            , BASED = BASED
     1240     7200                                                                        ) ;
     1241     7206    1   DCL 1 J                 SBIN WORD ALIGNED AUTO ;
     1242     7207                                %NMD_PIT ( FPTN =
     1243     7208              NMD_PIT           , STCLASS = SYMREF
     1244     7209                                                                        ) ;
     1245     7662    1   DCL 1 VID$              PTR ALIGNED AUTO ;
     1246     7663        %EJECT ;
PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:217  
     1247     7664        /*
     1248     7665        Scrub the values in the VID to terminate Mirorred Disk operation.
     1249     7666        */
     1250     7667    1           VID$ = NMD_PIT.DEV.VID$(I) ;

   7667  2 000002   200003 470500                    LDP0    @I,,AUTO
         2 000003   000000 236100                    LDQ     0,,PR0
         2 000004   000015 402007                    MPY     13,DL
         2 000005   000001 736000                    QLS     1
         2 000006   000032 236006 xsym               LDQ     NMD_PIT+26,QL
         2 000007   200006 756100                    STQ     VID$,,AUTO

     1251     7668
     1252     7669    1           VID$->FM$VID.PSN             = '      ' ;

   7669  2 000010   200006 471500                    LDP1    VID$,,AUTO
         2 000011   040100 100400                    MLR     fill='040'O
         2 000012   000000 000006 1                  ADSC9   0                        cn=0,n=6
         2 000013   100003 000006                    ADSC9   3,,PR1                   cn=0,n=6

     1253     7670    1           VID$->FM$VID.VOLCNT          = 0 ;

   7670  2 000014   000000 220003                    LDX0    0,DU
         2 000015   100004 440100                    SXL0    4,,PR1

     1254     7671    1           VID$->FM$VID.MIRROR.C        = 'MIRROR  ' ;

   7671  2 000016   000002 237000 1                  LDAQ    2
         2 000017   100042 755100                    STA     34,,PR1
         2 000020   100043 756100                    STQ     35,,PR1

     1255     7672    1           VID$->FM$VID.MIRROR.UTS      = UTS ;

   7672  2 000021   200004 473500                    LDP3    @UTS,,AUTO
         2 000022   300000 235100                    LDA     0,,PR3
         2 000023   100044 755100                    STA     36,,PR1

PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:218  
     1256     7673    1           VID$->FM$VID.MIRROR.STATE(0) = %NI_MIRROR_FAIL ;

   7673  2 000024   010000 236003                    LDQ     4096,DU
         2 000025   100045 752140                    STCQ    37,'40'O,PR1

     1257     7674
     1258     7675    2           DO  J = 0 TO 25 ;

   7675  2 000026   200005 450100                    STZ     J,,AUTO

     1259     7676    2               VID$->FM$VID.SECTSTRT(I) = 0 ;

   7676  2 000027   200003 470500                    LDP0    @I,,AUTO
         2 000030   000000 235100                    LDA     0,,PR0
         2 000031   200006 471500                    LDP1    VID$,,AUTO
         2 000032   100010 450105                    STZ     8,AL,PR1

     1260     7677    2               END ;

   7677  2 000033   200005 054100                    AOS     J,,AUTO
         2 000034   200005 235100                    LDA     J,,AUTO
         2 000035   000031 115007                    CMPA    25,DL
         2 000036   000027 604400 2                  TMOZ    s:7676

     1261     7678
     1262     7679    1           RETURN ;

   7679  2 000037   000000 702200 xent               TSX2  ! X66_ARET
     1263     7680
     1264     7681    1           END NMU$SCRUB_VID ;
     1265     7682        %EOD ;

PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:219  
--  Include file information  --

   FM$GRAN.:E05TOU  is referenced.
   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   NI_DATA_C.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$SCRUB_VID.
PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:220  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @I                         4-0-0/w PTR         r     1 @UTS
    *0-0-0/w SBIN        r     1 I                          5-0-0/w SBIN        r     1 J
    *0-0-0/w UBIN        r     1 UTS                        6-0-0/w PTR         r     1 VID$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8892)  r     1 NMD_PIT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(36864) r     1 FM$VID


   Procedure NMU$SCRUB_VID requires 32 words for executable code.
   Procedure NMU$SCRUB_VID requires 8 words of local(AUTO) storage.
PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:221  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #012=NMU$SCRUB_VID File=NMU$UTIL.:E05TSI                           WED 07/30/97 03:56 Page:222  
          MINI XREF LISTING

FM$VID.DTT
      7203**DCL      7203--REDEF
FM$VID.MIRROR.C
      7202**DCL      7671<<ASSIGN
FM$VID.MIRROR.STATE
      7202**DCL      7673<<ASSIGN
FM$VID.MIRROR.UTS
      7202**DCL      7672<<ASSIGN
FM$VID.PSN
      7201**DCL      7669<<ASSIGN
FM$VID.SECTSTRT
      7202**DCL      7676<<ASSIGN
FM$VID.VOLCNT
      7201**DCL      7670<<ASSIGN
I
      7193**DCL        40--PROC     7667>>ASSIGN   7676>>ASSIGN
J
      7206**DCL      7675<<DOINDEX
NMD_PIT.DEV.VID$
      7372**DCL      7667>>ASSIGN
UTS
      7194**DCL        40--PROC     7672>>ASSIGN
VID$
      7662**DCL      7667<<ASSIGN   7669>>ASSIGN   7670>>ASSIGN   7671>>ASSIGN   7672>>ASSIGN   7673>>ASSIGN
      7676>>ASSIGN

PL6.E3A0      #013=NMU$UNLOCK File=NMU$UTIL.:E05TSI                              WED 07/30/97 03:56 Page:223  
     1266        1        /*M* NMU$UNLOCK - UNLOCK the selected device.                      */
     1267        2        /*T***********************************************************/
     1268        3        /*T*                                                         */
     1269        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1270        5        /*T*                                                         */
     1271        6        /*T***********************************************************/
     1272        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
     1273        8        /*F*
     1274        9        NAME:           NMU$UNLOCK
     1275       10
     1276       11        PURPOSE:        To unlock the specified device.
     1277       12
     1278       13        DESCRIPTION:
     1279       14
     1280       15        The NMU$UNLOCK procedure is used to unlock the specified device.
     1281       16        */
     1282       17        /*D*
     1283       18        NAME:           NMU$UNLOCK
     1284       19
     1285       20        CALL:           CALL NMU$UNLOCK ( i ) ALTRET ( error ) ;
     1286       21
     1287       22        PARAMETERS:
     1288       23        */
     1289       24        /*K*
     1290       25        i               is a UBIN WORD that is the index into NMD_PIT.DEV.
     1291       26                i must be either 0 or 1.
     1292       27        */
     1293       28        /*D*
     1294       29        DESCRIPTION:
     1295       30
     1296       31        The NMU$UNLOCK procedure is used to unlock the specified device.
     1297       32        */
     1298       33        %EJECT ;
PL6.E3A0      #013=NMU$UNLOCK File=NMU$UTIL.:E05TSI                              WED 07/30/97 03:56 Page:224  
     1299       34        NMU$UNLOCK:     PROC ( I ) ALTRET ;
     1300       35        /*
     1301       36                        Includes
     1302       37        */
     1303       38        %INCLUDE                CP_6 ;
     1304     5597        %INCLUDE                NM_MACRO_M ;
     1305     7002        /*
     1306     7003                        Parameters
     1307     7004        */
     1308     7005    1   DCL 1 I                 UBIN ALIGNED PARAM ;
     1309     7006        /*
     1310     7007                        Entries
     1311     7008        */
     1312     7009    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
     1313     7010        /*
     1314     7011                        Variables
     1315     7012        */
     1316     7013                                %B$ALT ( NAME =
     1317     7014              B$ALT             ,     STCLASS=BASED
     1318     7015                                                                        ) ;
     1319     7023                                %B$TCB  ( NAME =
     1320     7024              B$TCB             , STCLASS = "BASED(B$TCB$)"
     1321     7025                                                                        ) ;
     1322     7028    1   DCL 1 B$TCB$            PTR SYMREF ;
     1323     7029                                %FPT_MIRROR ( FPTN =
     1324     7030              UNLOCK            , STCLASS = STATIC
     1325     7031                                , FUNCTION = UNLOCK
     1326     7032                                                                        ) ;
     1327     7055                                %NMD_PIT ( FPTN =
     1328     7056              NMD_PIT           , STCLASS = SYMREF
     1329     7057                                                                        ) ;
     1330     7510        %EJECT ;
PL6.E3A0      #013=NMU$UNLOCK File=NMU$UTIL.:E05TSI                              WED 07/30/97 03:56 Page:225  
     1331     7511        /*
     1332     7512        Set up the FPT to lock the specified device and lock the
     1333     7513        device.
     1334     7514        */
     1335     7515    1           UNLOCK.V.DCTX# = NMD_PIT.DEV.DCTX(I) ;
     1336     7516
     1337     7517    1           CALL M$MIRROR ( UNLOCK )                ALTRET ( ALTERR ) ;
     1338     7518
     1339     7519    1           NMD_PIT.DEV.FLAGS.LOCK(I) = '0'B ;
     1340     7520        /*
     1341     7521        Return to the calling routine.
     1342     7522        */
     1343     7523    1           RETURN ;
     1344     7524
     1345     7525    1   ALTERR: CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR ) ;
     1346     7526
     1347     7527    1           ALTRETURN ;
     1348     7528
     1349     7529    1           END NMU$UNLOCK ;
     1350     7530        %EOD ;

PL6.E3A0      #013=NMU$UNLOCK File=NMU$UTIL.:E05TSI                              WED 07/30/97 03:56 Page:226  
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$UNLOCK.

   Procedure NMU$UNLOCK requires 29 words for executable code.
   Procedure NMU$UNLOCK requires 6 words of local(AUTO) storage.

PL6.E3A0      #013=NMU$UNLOCK File=NMU$UTIL.:E05TSI                              WED 07/30/97 03:56 Page:227  

 Object Unit name= NMU$UNLOCK                                 File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:56:53.00 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none     6      6  NMU$UNLOCK
    2   Proc  even  none    29     35  NMU$UNLOCK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        1  NMU$UNLOCK

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       6 NME$ERRMSG
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                NMD_PIT
     B_VECTNIL
PL6.E3A0      #013=NMU$UNLOCK File=NMU$UTIL.:E05TSI                              WED 07/30/97 03:56 Page:228  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #013=NMU$UNLOCK File=NMU$UTIL.:E05TSI                              WED 07/30/97 03:56 Page:229  


     1266        1        /*M* NMU$UNLOCK - UNLOCK the selected device.                      */
     1267        2        /*T***********************************************************/
     1268        3        /*T*                                                         */
     1269        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1270        5        /*T*                                                         */
     1271        6        /*T***********************************************************/
     1272        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
     1273        8        /*F*
     1274        9        NAME:           NMU$UNLOCK
     1275       10
     1276       11        PURPOSE:        To unlock the specified device.
     1277       12
     1278       13        DESCRIPTION:
     1279       14
     1280       15        The NMU$UNLOCK procedure is used to unlock the specified device.
     1281       16        */
     1282       17        /*D*
     1283       18        NAME:           NMU$UNLOCK
     1284       19
     1285       20        CALL:           CALL NMU$UNLOCK ( i ) ALTRET ( error ) ;
     1286       21
     1287       22        PARAMETERS:
     1288       23        */
     1289       24        /*K*
     1290       25        i               is a UBIN WORD that is the index into NMD_PIT.DEV.
     1291       26                i must be either 0 or 1.
     1292       27        */
     1293       28        /*D*
     1294       29        DESCRIPTION:
     1295       30
     1296       31        The NMU$UNLOCK procedure is used to unlock the specified device.
     1297       32        */
     1298       33        %EJECT ;
PL6.E3A0      #013=NMU$UNLOCK File=NMU$UTIL.:E05TSI                              WED 07/30/97 03:56 Page:230  
     1299       34        NMU$UNLOCK:     PROC ( I ) ALTRET ;

     34  2 000000   000000 700200 xent  NMU$UNLOCK   TSX0  ! X66_AUTO_1
         2 000001   000006 000001                    ZERO    6,1

     1300       35        /*
     1301       36                        Includes
     1302       37        */
     1303       38        %INCLUDE                CP_6 ;
     1304     5597        %INCLUDE                NM_MACRO_M ;
     1305     7002        /*
     1306     7003                        Parameters
     1307     7004        */
     1308     7005    1   DCL 1 I                 UBIN ALIGNED PARAM ;
     1309     7006        /*
     1310     7007                        Entries
     1311     7008        */
     1312     7009    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
     1313     7010        /*
     1314     7011                        Variables
     1315     7012        */
     1316     7013                                %B$ALT ( NAME =
     1317     7014              B$ALT             ,     STCLASS=BASED
     1318     7015                                                                        ) ;
     1319     7023                                %B$TCB  ( NAME =
     1320     7024              B$TCB             , STCLASS = "BASED(B$TCB$)"
     1321     7025                                                                        ) ;
     1322     7028    1   DCL 1 B$TCB$            PTR SYMREF ;
     1323     7029                                %FPT_MIRROR ( FPTN =
     1324     7030              UNLOCK            , STCLASS = STATIC
     1325     7031                                , FUNCTION = UNLOCK
     1326     7032                                                                        ) ;
     1327     7055                                %NMD_PIT ( FPTN =
     1328     7056              NMD_PIT           , STCLASS = SYMREF
     1329     7057                                                                        ) ;
     1330     7510        %EJECT ;
PL6.E3A0      #013=NMU$UNLOCK File=NMU$UTIL.:E05TSI                              WED 07/30/97 03:56 Page:231  
     1331     7511        /*
     1332     7512        Set up the FPT to lock the specified device and lock the
     1333     7513        device.
     1334     7514        */
     1335     7515    1           UNLOCK.V.DCTX# = NMD_PIT.DEV.DCTX(I) ;

   7515  2 000002   200003 470500                    LDP0    @I,,AUTO
         2 000003   000000 236100                    LDQ     0,,PR0
         2 000004   000015 402007                    MPY     13,DL
         2 000005   000001 736000                    QLS     1
         2 000006   000011 720006 xsym               LXL0    NMD_PIT+9,QL
         2 000007   000002 440000 1                  SXL0    UNLOCK+2

     1336     7516
     1337     7517    1           CALL M$MIRROR ( UNLOCK )                ALTRET ( ALTERR ) ;

   7517  2 000010   000000 630400 1                  EPPR0   UNLOCK
         2 000011   470010 713400                    CLIMB   alt,+28680
         2 000012   400000 401760                    pmme    nvectors=1
         2 000013   000024 702000 2                  TSX2    ALTERR

     1338     7518
     1339     7519    1           NMD_PIT.DEV.FLAGS.LOCK(I) = '0'B ;

   7519  2 000014   200003 470500                    LDP0    @I,,AUTO
         2 000015   000000 236100                    LDQ     0,,PR0
         2 000016   000015 402007                    MPY     13,DL
         2 000017   000001 736000                    QLS     1
         2 000020   000000 620006                    EAX0    0,QL
         2 000021   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 000022   000014 356010 xsym               ANSQ    NMD_PIT+12,X0

     1340     7520        /*
     1341     7521        Return to the calling routine.
     1342     7522        */
     1343     7523    1           RETURN ;

PL6.E3A0      #013=NMU$UNLOCK File=NMU$UTIL.:E05TSI                              WED 07/30/97 03:56 Page:232  
   7523  2 000023   000000 702200 xent               TSX2  ! X66_ARET

     1344     7524
     1345     7525    1   ALTERR: CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR ) ;

   7525  2 000024   000000 470400 xsym  ALTERR       LDP0    B$TCB$
         2 000025   000000 471500                    LDP1    0,,PR0
         2 000026   100102 633500                    EPPR3   66,,PR1
         2 000027   200004 453500                    STP3    @I+1,,AUTO
         2 000030   200004 630500                    EPPR0   @I+1,,AUTO
         2 000031   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000032   000000 701000 xent               TSX1    NME$ERRMSG
         2 000033   000000 011000                    NOP     0

     1346     7526
     1347     7527    1           ALTRETURN ;

   7527  2 000034   000000 702200 xent               TSX2  ! X66_AALT
     1348     7528
     1349     7529    1           END NMU$UNLOCK ;
     1350     7530        %EOD ;

PL6.E3A0      #013=NMU$UNLOCK File=NMU$UTIL.:E05TSI                              WED 07/30/97 03:56 Page:233  
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$UNLOCK.
PL6.E3A0      #013=NMU$UNLOCK File=NMU$UTIL.:E05TSI                              WED 07/30/97 03:56 Page:234  

 **** Variables and constants ****

  ****  Section 001  Data  NMU$UNLOCK

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 UNLOCK

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @I                        *0-0-0/w UBIN        r     1 I

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/d STRC(8892)  r     1 NMD_PIT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB


   Procedure NMU$UNLOCK requires 29 words for executable code.
   Procedure NMU$UNLOCK requires 6 words of local(AUTO) storage.
PL6.E3A0      #013=NMU$UNLOCK File=NMU$UTIL.:E05TSI                              WED 07/30/97 03:56 Page:235  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #013=NMU$UNLOCK File=NMU$UTIL.:E05TSI                              WED 07/30/97 03:56 Page:236  
          MINI XREF LISTING

ALTERR
      7525**LABEL    7517--CALLALT
B$ALT.CODE
      7017**DCL      7017--REDEF    7018--REDEF    7018--REDEF
B$ALT.ERR
      7018**DCL      7525<>CALL
B$ALT.ERR.ERR#
      7019**DCL      7019--REDEF
B$ALT.EVID
      7018**DCL      7018--REDEF    7018--REDEF
B$TCB.ALT$
      7026**DCL      7525>>CALL
B$TCB$
      7028**DCL      7026--IMP-PTR  7525>>CALL
I
      7005**DCL        34--PROC     7515>>ASSIGN   7519>>ASSIGN
M$MIRROR
      5576**DCL-ENT  7517--CALL
NMD_PIT.DEV.DCTX
      7123**DCL      7515>>ASSIGN
NMD_PIT.DEV.FLAGS.LOCK
      7143**DCL      7519<<ASSIGN
NME$ERRMSG
      7009**DCL-ENT  7525--CALL
UNLOCK
      7049**DCL      7517<>CALL
UNLOCK.V
      7049**DCL      7049--DCLINIT
UNLOCK.V.DCTX#
      7051**DCL      7515<<ASSIGN

PL6.E3A0      #014=NMU$WAIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:57 Page:237  
     1351        1        /*M* NMU$WAIT - WAIT specified amount of time.                     */
     1352        2        /*T***********************************************************/
     1353        3        /*T*                                                         */
     1354        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1355        5        /*T*                                                         */
     1356        6        /*T***********************************************************/
     1357        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
     1358        8        /*F*
     1359        9        NAME:           NMU$WAIT
     1360       10
     1361       11        PURPOSE:        To wait the specified amount of time.
     1362       12
     1363       13        DESCRIPTION:
     1364       14
     1365       15        The NMU$WAIT procedure is used to wait the specified amount of
     1366       16        time.
     1367       17        */
     1368       18        /*D*
     1369       19        NAME:           NMU$WAIT
     1370       20
     1371       21        CALL:           CALL NMU$WAIT  ;
     1372       22
     1373       23        PARAMETERS:     None
     1374       24
     1375       25        DESCRIPTION:
     1376       26
     1377       27        The NMU$WAIT procedure is used to wait the specified amount of
     1378       28        time.
     1379       29        */
     1380       30        %EJECT ;
PL6.E3A0      #014=NMU$WAIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:57 Page:238  
     1381       31        NMU$WAIT:       PROC            ALTRET ;
     1382       32        /*
     1383       33                        Includes
     1384       34        */
     1385       35        %INCLUDE                CP_6 ;
     1386     5594        %INCLUDE                NM_MACRO_M ;
     1387     6999        /*
     1388     7000                        Entries
     1389     7001        */
     1390     7002    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
     1391     7003        /*
     1392     7004                        Variables
     1393     7005        */
     1394     7006                                %B$ALT ( NAME =
     1395     7007              B$ALT             ,     STCLASS=BASED
     1396     7008                                                                        ) ;
     1397     7016                                %B$TCB  ( NAME =
     1398     7017              B$TCB             , STCLASS = "BASED(B$TCB$)"
     1399     7018                                                                        ) ;
     1400     7021    1   DCL 1 B$TCB$            PTR SYMREF ;
     1401     7022                                %NMD_PIT ( FPTN =
     1402     7023              NMD_PIT           , STCLASS = SYMREF
     1403     7024                                                                        ) ;
     1404     7477                                %FPT_WAIT ( FPTN =
     1405     7478              WAIT              , STCLASS = STATIC
     1406     7479                                                                        ) ;
     1407     7493        %EJECT ;
PL6.E3A0      #014=NMU$WAIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:57 Page:239  
     1408     7494        /*
     1409     7495        Calculate the time to wait.
     1410     7496        */
     1411     7497    1           IF  NMD_PIT.PAUSE# > 0
     1412     7498    2           THEN DO ;
     1413     7499    2               WAIT.V.UNITS# = NMD_PIT.PAUSE# ;
     1414     7500    2               IF  NMD_PIT.OPTIONS.SECONDS#
     1415     7501    2               THEN
     1416     7502    2                   WAIT.V.UTYPE# = %SEC# ;
     1417     7503    2               ELSE
     1418     7504    2                   WAIT.V.UTYPE# = %TUN# ;
     1419     7505
     1420     7506    2               CALL M$WAIT ( WAIT )                ALTRET ( ALTERR ) ;
     1421     7507    2               END ;
     1422     7508        /*
     1423     7509        Return to the calling procedure.
     1424     7510        */
     1425     7511    1           RETURN ;
     1426     7512
     1427     7513    1   ALTERR: CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR ) ;
     1428     7514
     1429     7515    1           ALTRETURN ;
     1430     7516
     1431     7517    1           END NMU$WAIT ;
     1432     7518        %EOD ;

PL6.E3A0      #014=NMU$WAIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:57 Page:240  
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$WAIT.

   Procedure NMU$WAIT requires 27 words for executable code.
   Procedure NMU$WAIT requires 6 words of local(AUTO) storage.

PL6.E3A0      #014=NMU$WAIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:57 Page:241  

 Object Unit name= NMU$WAIT                                   File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:57:31.48 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none     6      6  NMU$WAIT
    2   Proc  even  none    27     33  NMU$WAIT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        0  NMU$WAIT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       6 NME$ERRMSG
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                NMD_PIT
     B_VECTNIL
PL6.E3A0      #014=NMU$WAIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:57 Page:242  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #014=NMU$WAIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:57 Page:243  


     1351        1        /*M* NMU$WAIT - WAIT specified amount of time.                     */
     1352        2        /*T***********************************************************/
     1353        3        /*T*                                                         */
     1354        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1355        5        /*T*                                                         */
     1356        6        /*T***********************************************************/
     1357        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
     1358        8        /*F*
     1359        9        NAME:           NMU$WAIT
     1360       10
     1361       11        PURPOSE:        To wait the specified amount of time.
     1362       12
     1363       13        DESCRIPTION:
     1364       14
     1365       15        The NMU$WAIT procedure is used to wait the specified amount of
     1366       16        time.
     1367       17        */
     1368       18        /*D*
     1369       19        NAME:           NMU$WAIT
     1370       20
     1371       21        CALL:           CALL NMU$WAIT  ;
     1372       22
     1373       23        PARAMETERS:     None
     1374       24
     1375       25        DESCRIPTION:
     1376       26
     1377       27        The NMU$WAIT procedure is used to wait the specified amount of
     1378       28        time.
     1379       29        */
     1380       30        %EJECT ;
PL6.E3A0      #014=NMU$WAIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:57 Page:244  
     1381       31        NMU$WAIT:       PROC            ALTRET ;

     31  2 000000   000000 700200 xent  NMU$WAIT     TSX0  ! X66_AUTO_0
         2 000001   000006 000000                    ZERO    6,0

     1382       32        /*
     1383       33                        Includes
     1384       34        */
     1385       35        %INCLUDE                CP_6 ;
     1386     5594        %INCLUDE                NM_MACRO_M ;
     1387     6999        /*
     1388     7000                        Entries
     1389     7001        */
     1390     7002    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
     1391     7003        /*
     1392     7004                        Variables
     1393     7005        */
     1394     7006                                %B$ALT ( NAME =
     1395     7007              B$ALT             ,     STCLASS=BASED
     1396     7008                                                                        ) ;
     1397     7016                                %B$TCB  ( NAME =
     1398     7017              B$TCB             , STCLASS = "BASED(B$TCB$)"
     1399     7018                                                                        ) ;
     1400     7021    1   DCL 1 B$TCB$            PTR SYMREF ;
     1401     7022                                %NMD_PIT ( FPTN =
     1402     7023              NMD_PIT           , STCLASS = SYMREF
     1403     7024                                                                        ) ;
     1404     7477                                %FPT_WAIT ( FPTN =
     1405     7478              WAIT              , STCLASS = STATIC
     1406     7479                                                                        ) ;
     1407     7493        %EJECT ;
PL6.E3A0      #014=NMU$WAIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:57 Page:245  
     1408     7494        /*
     1409     7495        Calculate the time to wait.
     1410     7496        */
     1411     7497    1           IF  NMD_PIT.PAUSE# > 0

   7497  2 000002   000310 235000 xsym               LDA     NMD_PIT+200
         2 000003   000021 600000 2                  TZE     s:7511

     1412     7498    2           THEN DO ;

     1413     7499    2               WAIT.V.UNITS# = NMD_PIT.PAUSE# ;

   7499  2 000004   000004 755000 1                  STA     WAIT+4

     1414     7500    2               IF  NMD_PIT.OPTIONS.SECONDS#

   7500  2 000005   000306 236000 xsym               LDQ     NMD_PIT+198
         2 000006   004000 316003                    CANQ    2048,DU
         2 000007   000013 600000 2                  TZE     s:7504

     1415     7501    2               THEN
     1416     7502    2                   WAIT.V.UTYPE# = %SEC# ;

   7502  2 000010   000001 235007                    LDA     1,DL
         2 000011   000005 755000 1                  STA     WAIT+5
         2 000012   000015 710000 2                  TRA     s:7506

     1417     7503    2               ELSE
     1418     7504    2                   WAIT.V.UTYPE# = %TUN# ;

   7504  2 000013   000005 235007                    LDA     5,DL
         2 000014   000005 755000 1                  STA     WAIT+5

     1419     7505
     1420     7506    2               CALL M$WAIT ( WAIT )                ALTRET ( ALTERR ) ;

   7506  2 000015   000000 630400 1                  EPPR0   WAIT
PL6.E3A0      #014=NMU$WAIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:57 Page:246  
         2 000016   420006 713400                    CLIMB   alt,+8198
         2 000017   400400 401760                    pmme    nvectors=2
         2 000020   000022 702000 2                  TSX2    ALTERR

     1421     7507    2               END ;

     1422     7508        /*
     1423     7509        Return to the calling procedure.
     1424     7510        */
     1425     7511    1           RETURN ;

   7511  2 000021   000000 702200 xent               TSX2  ! X66_ARET

     1426     7512
     1427     7513    1   ALTERR: CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR ) ;

   7513  2 000022   000000 470400 xsym  ALTERR       LDP0    B$TCB$
         2 000023   000000 471500                    LDP1    0,,PR0
         2 000024   100102 633500                    EPPR3   66,,PR1
         2 000025   200004 453500                    STP3    4,,AUTO
         2 000026   200004 630500                    EPPR0   4,,AUTO
         2 000027   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000030   000000 701000 xent               TSX1    NME$ERRMSG
         2 000031   000000 011000                    NOP     0

     1428     7514
     1429     7515    1           ALTRETURN ;

   7515  2 000032   000000 702200 xent               TSX2  ! X66_AALT
     1430     7516
     1431     7517    1           END NMU$WAIT ;
     1432     7518        %EOD ;

PL6.E3A0      #014=NMU$WAIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:57 Page:247  
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$WAIT.
PL6.E3A0      #014=NMU$WAIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:57 Page:248  

 **** Variables and constants ****

  ****  Section 001  Data  NMU$WAIT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 WAIT

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/d STRC(8892)  r     1 NMD_PIT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB


   Procedure NMU$WAIT requires 27 words for executable code.
   Procedure NMU$WAIT requires 6 words of local(AUTO) storage.
PL6.E3A0      #014=NMU$WAIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:57 Page:249  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #014=NMU$WAIT File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:57 Page:250  
          MINI XREF LISTING

ALTERR
      7513**LABEL    7506--CALLALT
B$ALT.CODE
      7010**DCL      7010--REDEF    7011--REDEF    7011--REDEF
B$ALT.ERR
      7011**DCL      7513<>CALL
B$ALT.ERR.ERR#
      7012**DCL      7012--REDEF
B$ALT.EVID
      7011**DCL      7011--REDEF    7011--REDEF
B$TCB.ALT$
      7019**DCL      7513>>CALL
B$TCB$
      7021**DCL      7019--IMP-PTR  7513>>CALL
M$WAIT
      5580**DCL-ENT  7506--CALL
NMD_PIT.OPTIONS.SECONDS#
      7401**DCL      7500>>IF
NMD_PIT.PAUSE#
      7414**DCL      7497>>IF       7499>>ASSIGN
NME$ERRMSG
      7002**DCL-ENT  7513--CALL
WAIT
      7490**DCL      7506<>CALL
WAIT.V
      7491**DCL      7490--DCLINIT
WAIT.V.UNITS#
      7491**DCL      7499<<ASSIGN
WAIT.V.UTYPE#
      7491**DCL      7502<<ASSIGN   7504<<ASSIGN

PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:251  
     1433        1        /*M* NMU$WRITE - WRITE the selected device.                        */
     1434        2        /*T***********************************************************/
     1435        3        /*T*                                                         */
     1436        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1437        5        /*T*                                                         */
     1438        6        /*T***********************************************************/
     1439        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
     1440        8        /*F*
     1441        9        NAME:           NMU$WRITE
     1442       10
     1443       11        PURPOSE:        To write to the specified device.
     1444       12
     1445       13        DESCRIPTION:
     1446       14
     1447       15        The NMU$WRITE procedure is used to write to the specified device.
     1448       16        */
     1449       17        /*D*
     1450       18        NAME:           NMU$WRITE
     1451       19
     1452       20        CALL:           CALL NMU$WRITE ( i, dreladdr, buf_ ) ALTRET ( error ) ;
     1453       21
     1454       22        PARAMETERS:
     1455       23        */
     1456       24        /*K*
     1457       25        i               is the index into NMD_PIT.DEV.  i must be
     1458       26                either 0 or 1.
     1459       27        */
     1460       28        /*K*
     1461       29        dreladdr        is the device relative address used to do the write.
     1462       30                dreladdr must be between 0 and PACKSIZE-(SIZE/4096)-1.
     1463       31        */
     1464       32        /*K*
     1465       33        buf_            is a vector framing the buffer to be used when
     1466       34                doing the write.
     1467       35        */
     1468       36        /*D*
     1469       37        DESCRIPTION:
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:252  
     1470       38
     1471       39        The NMU$WRITE procedure is used to write to the specified device.
     1472       40        */
     1473       41        %EJECT ;
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:253  
     1474       42        NMU$WRITE:      PROC ( I, DRELADDR, BUF_ ) ALTRET ;
     1475       43        /*
     1476       44                        Includes
     1477       45        */
     1478       46        %INCLUDE                CP_6 ;
     1479     5605        %INCLUDE                NM_MACRO_M ;
     1480     7010        %INCLUDE                NM_PERR_C ;
     1481     7087        %INCLUDE                N_FC_C ;
     1482     7124        /*
     1483     7125                        Parameters
     1484     7126        */
     1485     7127    1   DCL 1 I                 UBIN ALIGNED PARAM ;
     1486     7128    1   DCL 1 DRELADDR          UBIN ALIGNED PARAM ;
     1487     7129    1   DCL 1 BUF_              VECTOR ALIGNED PARAM ;
     1488     7130        /*
     1489     7131                        Entries
     1490     7132        */
     1491     7133    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
     1492     7134        /*
     1493     7135                        Variables
     1494     7136        */
     1495     7137                                %B$ALT ( NAME =
     1496     7138              B$ALT             ,     STCLASS=BASED
     1497     7139                                                                        ) ;
     1498     7147                                %B$TCB  ( NAME =
     1499     7148              B$TCB             , STCLASS = "BASED(B$TCB$)"
     1500     7149                                                                        ) ;
     1501     7152    1   DCL 1 B$TCB$            PTR SYMREF ;
     1502     7153                                %NMD_ERRTEXT ( FPTN = WRITE
     1503     7154        /*    ERRTEXT  */       , FIRST = YES
     1504     7155                                , LAST  = YES
     1505     7156                                                                        ) ;
     1506     7222              %F$DCB ;
     1507     7279                                %NMD_PIT ( FPTN =
     1508     7280              NMD_PIT           , STCLASS = SYMREF
     1509     7281                                                                        ) ;
     1510     7734                                %VLP_ERRCODE ( FPTN =
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:254  
     1511     7735              NMU#IOQ_ERROR     , STCLASS = CONSTANT
     1512     7736                                , ERR# = %E$NMD#IOQ_ERROR
     1513     7737                                , FCG  = %NMD#FCG
     1514     7738                                , MID  = 'U'
     1515     7739                                , MON  = %NO#
     1516     7740                                , SEV  = 3
     1517     7741                                                                        ) ;
     1518     7786                                %FPT_IOQ ( FPTN =
     1519     7787              WRITE             , STCLASS = STATIC
     1520     7788                                , FC      = %N_WRBIN
     1521     7789                                , BPMIR   = YES
     1522     7790                                , WAIT    = YES
     1523     7791                                                                        ) ;
     1524     7809        %EJECT ;
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:255  
     1525     7810        /*
     1526     7811        Set up the FPT to write to the specified device and then write
     1527     7812        to the device.
     1528     7813        */
     1529     7814    1           WRITE.BUF_              = BUF_ ;
     1530     7815    1           WRITE.V.DCB#            = NMD_PIT.DEV.DCB#(I) ;
     1531     7816    1           WRITE.V.DLA.DCTX#       = NMD_PIT.DEV.DCTX(I) ;
     1532     7817    1           WRITE.V.DLA.DRELADDR#   = DRELADDR ;
     1533     7818
     1534     7819    1           CALL M$IOQ ( WRITE )                    ALTRET ( ALTERR ) ;
     1535     7820        /*
     1536     7821        Check for an IO error.
     1537     7822        */
     1538     7823    1           IF  NMD_PIT.DEV.DCB$(I)->F$DCB.TYC
     1539     7824    2           THEN DO ;
     1540     7825        /*
     1541     7826        ERROR:  NMU-E$NMD#IOQ_ERROR-3
     1542     7827        MESSAGE:  (Previously defined.)
     1543     7828        DESCRIPTION:  (Previously defined.)
     1544     7829        */
     1545     7830    2               CALL NME$ERRMSG ( NMU#IOQ_ERROR,
     1546     7831    2                                 NMD_PIT.DEV.DCB#(I),
     1547     7832    2                                 ERRTEXT.WRITE_,
     1548     7833    2                                 VECTOR(NMD_PIT.DEV.NAME(I)) ) ;
     1549     7834    2               GOTO ERROR ;
     1550     7835    2               END ;
     1551     7836        /*
     1552     7837        Return to the calling routine.
     1553     7838        */
     1554     7839    1           RETURN ;
     1555     7840
     1556     7841    1   ALTERR: CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR,
     1557     7842    1                             NMD_PIT.DEV.DCB#(I)           ) ;
     1558     7843
     1559     7844    1   ERROR:  ALTRETURN ;
     1560     7845
     1561     7846    1           END NMU$WRITE ;
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:256  
     1562     7847        %EOD ;

PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:257  
--  Include file information  --

   N_FC_C.:E05TOU  is referenced.
   NM_PERR_C.:E05TOU  is referenced.
   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$WRITE.

   Procedure NMU$WRITE requires 73 words for executable code.
   Procedure NMU$WRITE requires 12 words of local(AUTO) storage.

PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:258  

 Object Unit name= NMU$WRITE                                  File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:58:08.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      5      5  NMU$WRITE
    2   Data  even  none     8     10  NMU$WRITE
    3   Proc  even  none    73    111  NMU$WRITE
    4  RoData even  none     6      6  NMU$WRITE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        3  NMU$WRITE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       6 NME$ERRMSG
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:259  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                NMD_PIT
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:260  


     1433        1        /*M* NMU$WRITE - WRITE the selected device.                        */
     1434        2        /*T***********************************************************/
     1435        3        /*T*                                                         */
     1436        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1437        5        /*T*                                                         */
     1438        6        /*T***********************************************************/
     1439        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
     1440        8        /*F*
     1441        9        NAME:           NMU$WRITE
     1442       10
     1443       11        PURPOSE:        To write to the specified device.
     1444       12
     1445       13        DESCRIPTION:
     1446       14
     1447       15        The NMU$WRITE procedure is used to write to the specified device.
     1448       16        */
     1449       17        /*D*
     1450       18        NAME:           NMU$WRITE
     1451       19
     1452       20        CALL:           CALL NMU$WRITE ( i, dreladdr, buf_ ) ALTRET ( error ) ;
     1453       21
     1454       22        PARAMETERS:
     1455       23        */
     1456       24        /*K*
     1457       25        i               is the index into NMD_PIT.DEV.  i must be
     1458       26                either 0 or 1.
     1459       27        */
     1460       28        /*K*
     1461       29        dreladdr        is the device relative address used to do the write.
     1462       30                dreladdr must be between 0 and PACKSIZE-(SIZE/4096)-1.
     1463       31        */
     1464       32        /*K*
     1465       33        buf_            is a vector framing the buffer to be used when
     1466       34                doing the write.
     1467       35        */
     1468       36        /*D*
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:261  
     1469       37        DESCRIPTION:
     1470       38
     1471       39        The NMU$WRITE procedure is used to write to the specified device.
     1472       40        */
     1473       41        %EJECT ;
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:262  
     1474       42        NMU$WRITE:      PROC ( I, DRELADDR, BUF_ ) ALTRET ;

     42  3 000000   000000 700200 xent  NMU$WRITE    TSX0  ! X66_AUTO_3
         3 000001   000014 000003                    ZERO    12,3

     1475       43        /*
     1476       44                        Includes
     1477       45        */
     1478       46        %INCLUDE                CP_6 ;
     1479     5605        %INCLUDE                NM_MACRO_M ;
     1480     7010        %INCLUDE                NM_PERR_C ;
     1481     7087        %INCLUDE                N_FC_C ;
     1482     7124        /*
     1483     7125                        Parameters
     1484     7126        */
     1485     7127    1   DCL 1 I                 UBIN ALIGNED PARAM ;
     1486     7128    1   DCL 1 DRELADDR          UBIN ALIGNED PARAM ;
     1487     7129    1   DCL 1 BUF_              VECTOR ALIGNED PARAM ;
     1488     7130        /*
     1489     7131                        Entries
     1490     7132        */
     1491     7133    1   DCL 1 NME$ERRMSG        ENTRY(6) ;
     1492     7134        /*
     1493     7135                        Variables
     1494     7136        */
     1495     7137                                %B$ALT ( NAME =
     1496     7138              B$ALT             ,     STCLASS=BASED
     1497     7139                                                                        ) ;
     1498     7147                                %B$TCB  ( NAME =
     1499     7148              B$TCB             , STCLASS = "BASED(B$TCB$)"
     1500     7149                                                                        ) ;
     1501     7152    1   DCL 1 B$TCB$            PTR SYMREF ;
     1502     7153                                %NMD_ERRTEXT ( FPTN = WRITE
     1503     7154        /*    ERRTEXT  */       , FIRST = YES
     1504     7155                                , LAST  = YES
     1505     7156                                                                        ) ;
     1506     7222              %F$DCB ;
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:263  
     1507     7279                                %NMD_PIT ( FPTN =
     1508     7280              NMD_PIT           , STCLASS = SYMREF
     1509     7281                                                                        ) ;
     1510     7734                                %VLP_ERRCODE ( FPTN =
     1511     7735              NMU#IOQ_ERROR     , STCLASS = CONSTANT
     1512     7736                                , ERR# = %E$NMD#IOQ_ERROR
     1513     7737                                , FCG  = %NMD#FCG
     1514     7738                                , MID  = 'U'
     1515     7739                                , MON  = %NO#
     1516     7740                                , SEV  = 3
     1517     7741                                                                        ) ;
     1518     7786                                %FPT_IOQ ( FPTN =
     1519     7787              WRITE             , STCLASS = STATIC
     1520     7788                                , FC      = %N_WRBIN
     1521     7789                                , BPMIR   = YES
     1522     7790                                , WAIT    = YES
     1523     7791                                                                        ) ;
     1524     7809        %EJECT ;
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:264  
     1525     7810        /*
     1526     7811        Set up the FPT to write to the specified device and then write
     1527     7812        to the device.
     1528     7813        */
     1529     7814    1           WRITE.BUF_              = BUF_ ;

   7814  3 000002   200005 470500                    LDP0    @BUF_,,AUTO
         3 000003   000000 100500                    MLR     fill='000'O
         3 000004   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         3 000005   000002 000010 2                  ADSC9   WRITE+2                  cn=0,n=8

     1530     7815    1           WRITE.V.DCB#            = NMD_PIT.DEV.DCB#(I) ;

   7815  3 000006   200003 471500                    LDP1    @I,,AUTO
         3 000007   100000 236100                    LDQ     0,,PR1
         3 000010   000015 402007                    MPY     13,DL
         3 000011   000001 736000                    QLS     1
         3 000012   000006 720006 xsym               LXL0    NMD_PIT+6,QL
         3 000013   000004 740000 2                  STX0    WRITE+4

     1531     7816    1           WRITE.V.DLA.DCTX#       = NMD_PIT.DEV.DCTX(I) ;

   7816  3 000014   100000 236100                    LDQ     0,,PR1
         3 000015   000015 402007                    MPY     13,DL
         3 000016   000001 736000                    QLS     1
         3 000017   000011 236006 xsym               LDQ     NMD_PIT+9,QL
         3 000020   000025 736000                    QLS     21
         3 000021   000005 676000 2                  ERQ     WRITE+5
         3 000022   777770 376003                    ANQ     -8,DU
         3 000023   000005 656000 2                  ERSQ    WRITE+5

     1532     7817    1           WRITE.V.DLA.DRELADDR#   = DRELADDR ;

   7817  3 000024   200004 473500                    LDP3    @DRELADDR,,AUTO
         3 000025   300000 236100                    LDQ     0,,PR3
         3 000026   000005 676000 2                  ERQ     WRITE+5
         3 000027   000000 376000 4                  ANQ     0
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:265  
         3 000030   000005 656000 2                  ERSQ    WRITE+5

     1533     7818
     1534     7819    1           CALL M$IOQ ( WRITE )                    ALTRET ( ALTERR ) ;

   7819  3 000031   000000 630400 2                  EPPR0   WRITE
         3 000032   470006 713400                    CLIMB   alt,+28678
         3 000033   400400 401760                    pmme    nvectors=2
         3 000034   000072 702000 3                  TSX2    ALTERR

     1535     7820        /*
     1536     7821        Check for an IO error.
     1537     7822        */
     1538     7823    1           IF  NMD_PIT.DEV.DCB$(I)->F$DCB.TYC

   7823  3 000035   200003 470500                    LDP0    @I,,AUTO
         3 000036   000000 236100                    LDQ     0,,PR0
         3 000037   000015 402007                    MPY     13,DL
         3 000040   000001 736000                    QLS     1
         3 000041   000007 471406 xsym               LDP1    NMD_PIT+7,QL
         3 000042   100002 235100                    LDA     2,,PR1
         3 000043   000071 600000 3                  TZE     s:7839

     1539     7824    2           THEN DO ;

     1540     7825        /*
     1541     7826        ERROR:  NMU-E$NMD#IOQ_ERROR-3
     1542     7827        MESSAGE:  (Previously defined.)
     1543     7828        DESCRIPTION:  (Previously defined.)
     1544     7829        */
     1545     7830    2               CALL NME$ERRMSG ( NMU#IOQ_ERROR,

   7830  3 000044   000000 236100                    LDQ     0,,PR0
         3 000045   000015 402007                    MPY     13,DL
         3 000046   000001 235000 4                  LDA     1
         3 000047   000000 620006                    EAX0    0,QL
         3 000050   000023 736000                    QLS     19
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:266  
         3 000051   000002 036000 4                  ADLQ    2
         3 000052   200006 757100                    STAQ    @BUF_+1,,AUTO
         3 000053   200006 631500                    EPPR1   @BUF_+1,,AUTO
         3 000054   200013 451500                    STP1    @BUF_+6,,AUTO
         3 000055   000003 236000 4                  LDQ     3
         3 000056   200012 756100                    STQ     @BUF_+5,,AUTO
         3 000057   000000 636010                    EAQ     0,X0
         3 000060   000001 736000                    QLS     1
         3 000061   000004 036000 4                  ADLQ    4
         3 000062   000005 235000 4                  LDA     5
         3 000063   200010 757100                    STAQ    @BUF_+3,,AUTO
         3 000064   200010 630500                    EPPR0   @BUF_+3,,AUTO
         3 000065   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000066   000000 701000 xent               TSX1    NME$ERRMSG
         3 000067   000000 011000                    NOP     0

     1546     7831    2                                 NMD_PIT.DEV.DCB#(I),
     1547     7832    2                                 ERRTEXT.WRITE_,
     1548     7833    2                                 VECTOR(NMD_PIT.DEV.NAME(I)) ) ;
     1549     7834    2               GOTO ERROR ;

   7834  3 000070   000110 710000 3                  TRA     ERROR

     1550     7835    2               END ;
     1551     7836        /*
     1552     7837        Return to the calling routine.
     1553     7838        */
     1554     7839    1           RETURN ;

   7839  3 000071   000000 702200 xent               TSX2  ! X66_ARET

     1555     7840
     1556     7841    1   ALTERR: CALL NME$ERRMSG ( B$TCB.ALT$->B$ALT.ERR,

   7841  3 000072   000000 470400 xsym  ALTERR       LDP0    B$TCB$
         3 000073   000000 471500                    LDP1    0,,PR0
         3 000074   200003 473500                    LDP3    @I,,AUTO
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:267  
         3 000075   300000 236100                    LDQ     0,,PR3
         3 000076   000015 402007                    MPY     13,DL
         3 000077   000023 736000                    QLS     19
         3 000100   000004 036000 4                  ADLQ    4
         3 000101   200007 756100                    STQ     @BUF_+2,,AUTO
         3 000102   100102 634500                    EPPR4   66,,PR1
         3 000103   200006 454500                    STP4    @BUF_+1,,AUTO
         3 000104   200006 630500                    EPPR0   @BUF_+1,,AUTO
         3 000105   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000106   000000 701000 xent               TSX1    NME$ERRMSG
         3 000107   000000 011000                    NOP     0

     1557     7842    1                             NMD_PIT.DEV.DCB#(I)           ) ;
     1558     7843
     1559     7844    1   ERROR:  ALTRETURN ;

   7844  3 000110   000000 702200 xent  ERROR        TSX2  ! X66_AALT
     1560     7845
     1561     7846    1           END NMU$WRITE ;
     1562     7847        %EOD ;

PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:268  
--  Include file information  --

   N_FC_C.:E05TOU  is referenced.
   NM_PERR_C.:E05TOU  is referenced.
   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$WRITE.
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:269  

 **** Variables and constants ****

  ****  Section 001 RoData NMU$WRITE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 ERRTEXT                    4-0-0/w STRC        r     1 NMU#IOQ_ERROR

  ****  Section 002  Data  NMU$WRITE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(288)   r     1 WRITE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @BUF_                      4-0-0/w PTR         r     1 @DRELADDR
     3-0-0/w PTR         r     1 @I                        *0-0-0/w VECT        r     1 BUF_
    *0-0-0/w UBIN        r     1 DRELADDR                  *0-0-0/w UBIN        r     1 I

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/d STRC(8892)  r     1 NMD_PIT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:270  
     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/d ASTR(3528)  r     1 F$DCB


   Procedure NMU$WRITE requires 73 words for executable code.
   Procedure NMU$WRITE requires 12 words of local(AUTO) storage.
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:271  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:272  
          MINI XREF LISTING

ALTERR
      7841**LABEL    7819--CALLALT
B$ALT.CODE
      7141**DCL      7141--REDEF    7142--REDEF    7142--REDEF
B$ALT.ERR
      7142**DCL      7841<>CALL
B$ALT.ERR.ERR#
      7143**DCL      7143--REDEF
B$ALT.EVID
      7142**DCL      7142--REDEF    7142--REDEF
B$TCB.ALT$
      7150**DCL      7841>>CALL
B$TCB$
      7152**DCL      7150--IMP-PTR  7841>>CALL
BUF_
      7129**DCL        42--PROC     7814>>ASSIGN
DRELADDR
      7128**DCL        42--PROC     7817>>ASSIGN
ERROR
      7844**LABEL    7834--GOTO
ERRTEXT.WRITE
      7213**DCL      7220--DCLINIT
ERRTEXT.WRITE_
      7220**DCL      7830<>CALL
F$DCB.ACTPOS
      7255**DCL      7255--REDEF
F$DCB.ARS#
      7229**DCL      7229--REDEF
F$DCB.ATTR
      7248**DCL      7249--REDEF
F$DCB.BORROW
      7263**DCL      7263--REDEF    7263--REDEF    7263--REDEF
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:273  
F$DCB.DCBNAME.L
      7277**DCL      7277--IMP-SIZ
F$DCB.EOMCHAR#
      7233**DCL      7233--REDEF
F$DCB.FLDID
      7258**DCL      7258--REDEF
F$DCB.FORM$
      7252**DCL      7252--REDEF
F$DCB.FSECT
      7268**DCL      7268--REDEF
F$DCB.FSN#
      7245**DCL      7245--REDEF    7245--REDEF    7246--REDEF
F$DCB.HEADER$
      7251**DCL      7251--REDEF
F$DCB.IXTNSIZE#
      7249**DCL      7249--REDEF
F$DCB.LASTSTA$
      7238**DCL      7238--REDEF
F$DCB.LVL
      7264**DCL      7264--REDEF
F$DCB.NAME#.C
      7239**DCL      7239--REDEF
F$DCB.NOEOF
      7261**DCL      7261--REDEF
F$DCB.NRECS#
      7250**DCL      7250--REDEF
F$DCB.NRECX
      7269**DCL      7269--REDEF
F$DCB.OHDR
      7261**DCL      7261--REDEF
F$DCB.ORG#
      7244**DCL      7244--REDEF
F$DCB.PRECNO
      7267**DCL      7267--REDEF
F$DCB.RCSZ
      7273**DCL      7273--REDEF
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:274  
F$DCB.RES#
      7240**DCL      7240--REDEF
F$DCB.SETX
      7252**DCL      7252--REDEF
F$DCB.TAB$
      7252**DCL      7252--REDEF
F$DCB.TDA
      7266**DCL      7267--REDEF
F$DCB.TYC
      7229**DCL      7823>>IF
F$DCB.WSN#
      7240**DCL      7240--REDEF
I
      7127**DCL        42--PROC     7815>>ASSIGN   7816>>ASSIGN   7823>>IF       7830>>CALL     7830>>CALL
      7841>>CALL
M$IOQ
      5584**DCL-ENT  7819--CALL
NMD_PIT.DEV.DCB#
      7330**DCL      7815>>ASSIGN   7830<>CALL     7841<>CALL
NMD_PIT.DEV.DCB$
      7337**DCL      7823>>IF
NMD_PIT.DEV.DCTX
      7347**DCL      7816>>ASSIGN
NMD_PIT.DEV.NAME
      7397**DCL      7830--CALL
NME$ERRMSG
      7133**DCL-ENT  7830--CALL     7841--CALL
NMU#IOQ_ERROR
      7753**DCL      7830<>CALL
WRITE
      7802**DCL      7819<>CALL
WRITE.BUF_
      7802**DCL      7814<<ASSIGN
WRITE.V
      7804**DCL      7802--DCLINIT
WRITE.V.DCB#
PL6.E3A0      #015=NMU$WRITE File=NMU$UTIL.:E05TSI                               WED 07/30/97 03:58 Page:275  
      7804**DCL      7815<<ASSIGN
WRITE.V.DLA.DCTX#
      7806**DCL      7816<<ASSIGN
WRITE.V.DLA.DRELADDR#
      7806**DCL      7817<<ASSIGN

PL6.E3A0      #016=NMU$XCON File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:58 Page:276  
     1563        1        /*M* NMU$XCON - Exit control procedure                             */
     1564        2        /*T***********************************************************/
     1565        3        /*T*                                                         */
     1566        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1567        5        /*T*                                                         */
     1568        6        /*T***********************************************************/
     1569        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
     1570        8        /*F*
     1571        9        NAME:           NMU$XCON
     1572       10
     1573       11        PURPOSE:        To provide the exit control procedure for the
     1574       12                        MIRROR program.
     1575       13        */
     1576       14        /*D*
     1577       15        NAME:           NMU$XCON
     1578       16
     1579       17        CALL:           None.
     1580       18
     1581       19        PARAMETERS:     None.
     1582       20
     1583       21        DESCRIPTION:
     1584       22
     1585       23        The NMU$XCON procedure is the exit control procedure for the MIRROR
     1586       24        program.  NMU$XCON calls the NMU$RESET procedure to reset the
     1587       25        user environment modified by the MIRROR program.
     1588       26        Finally, NMU$XCON calls NMU$QUIT to terminate the MIRROR program.
     1589       27        */
     1590       28        %EJECT ;
PL6.E3A0      #016=NMU$XCON File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:58 Page:277  
     1591       29        NMU$XCON:       PROC ASYNC ;
     1592       30        /*
     1593       31                        Includes
     1594       32        */
     1595       33        %INCLUDE                CP_6 ;
     1596     5592        %INCLUDE                NM_MACRO_M ;
     1597     6997        /*
     1598     6998                        Entries
     1599     6999        */
     1600     7000    1   DCL 1 NMU$QUIT          ENTRY ;
     1601     7001    1   DCL 1 NMU$RESET         ENTRY ;
     1602     7002        /*
     1603     7003                        Variables
     1604     7004        */
     1605     7005                                %NMD_PIT ( FPTN =
     1606     7006              NMD_PIT           , STCLASS = SYMREF
     1607     7007                                                                        ) ;
     1608     7460                                %FPT_XCON ( FPTN =
     1609     7461              XCON              , STCLASS = STATIC
     1610     7462                                                                        ) ;
     1611     7476        %EJECT ;
PL6.E3A0      #016=NMU$XCON File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:58 Page:278  
     1612     7477        /*
     1613     7478        Remove the Exit Control routine from XCON tables.
     1614     7479        */
     1615     7480    1           XCON.V.UENTRY# = NMD_PIT.PXCON$$ ;
     1616     7481    1           CALL M$XCON ( XCON ) ;
     1617     7482    1           NMD_PIT.FLAGS.XCON# =  %NO# ;
     1618     7483        /*
     1619     7484        Call the NMU$RESET procedure to reset the user environment
     1620     7485        that may have been modified by the MIRROR program.
     1621     7486        */
     1622     7487    1           CALL NMU$RESET ;
     1623     7488        /*
     1624     7489        Call the NMU$QUIT procedure to terminate the MIRROR program.
     1625     7490        */
     1626     7491    1           CALL NMU$QUIT ;
     1627     7492
     1628     7493    1           END NMU$XCON ;
     1629     7494

PL6.E3A0      #016=NMU$XCON File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:58 Page:279  
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$XCON.

   Procedure NMU$XCON requires 16 words for executable code.
   Procedure NMU$XCON requires 4 words of local(AUTO) storage.

    No errors detected in file NMU$UTIL.:E05TSI    .

PL6.E3A0      #016=NMU$XCON File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:58 Page:280  

 Object Unit name= NMU$XCON                                   File name= NMU$UTIL.:E05TOU
 UTS= JUL 30 '97 03:58:50.24 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none     6      6  NMU$XCON
    2   Proc  even  none    16     20  NMU$XCON
    3  RoData even  none     1      1  NMU$XCON

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes     Async       0  NMU$XCON

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 NMU$RESET
         yes           Std       0 NMU$QUIT
                       nStd      0 X66_AAUTO
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  NMD_PIT                               B_VECTNIL
PL6.E3A0      #016=NMU$XCON File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:58 Page:281  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #016=NMU$XCON File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:58 Page:282  


     1563        1        /*M* NMU$XCON - Exit control procedure                             */
     1564        2        /*T***********************************************************/
     1565        3        /*T*                                                         */
     1566        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1567        5        /*T*                                                         */
     1568        6        /*T***********************************************************/
     1569        7        /*X* DFC=YES, DMC=YES, EDMC=YES                                    */
     1570        8        /*F*
     1571        9        NAME:           NMU$XCON
     1572       10
     1573       11        PURPOSE:        To provide the exit control procedure for the
     1574       12                        MIRROR program.
     1575       13        */
     1576       14        /*D*
     1577       15        NAME:           NMU$XCON
     1578       16
     1579       17        CALL:           None.
     1580       18
     1581       19        PARAMETERS:     None.
     1582       20
     1583       21        DESCRIPTION:
     1584       22
     1585       23        The NMU$XCON procedure is the exit control procedure for the MIRROR
     1586       24        program.  NMU$XCON calls the NMU$RESET procedure to reset the
     1587       25        user environment modified by the MIRROR program.
     1588       26        Finally, NMU$XCON calls NMU$QUIT to terminate the MIRROR program.
     1589       27        */
     1590       28        %EJECT ;
PL6.E3A0      #016=NMU$XCON File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:58 Page:283  
     1591       29        NMU$XCON:       PROC ASYNC ;

     29  2 000000   000000 700200 xent  NMU$XCON     TSX0  ! X66_AAUTO
         2 000001   000004 000000                    ZERO    4,0

     1592       30        /*
     1593       31                        Includes
     1594       32        */
     1595       33        %INCLUDE                CP_6 ;
     1596     5592        %INCLUDE                NM_MACRO_M ;
     1597     6997        /*
     1598     6998                        Entries
     1599     6999        */
     1600     7000    1   DCL 1 NMU$QUIT          ENTRY ;
     1601     7001    1   DCL 1 NMU$RESET         ENTRY ;
     1602     7002        /*
     1603     7003                        Variables
     1604     7004        */
     1605     7005                                %NMD_PIT ( FPTN =
     1606     7006              NMD_PIT           , STCLASS = SYMREF
     1607     7007                                                                        ) ;
     1608     7460                                %FPT_XCON ( FPTN =
     1609     7461              XCON              , STCLASS = STATIC
     1610     7462                                                                        ) ;
     1611     7476        %EJECT ;
PL6.E3A0      #016=NMU$XCON File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:58 Page:284  
     1612     7477        /*
     1613     7478        Remove the Exit Control routine from XCON tables.
     1614     7479        */
     1615     7480    1           XCON.V.UENTRY# = NMD_PIT.PXCON$$ ;

   7480  2 000002   000311 236000 xsym               LDQ     NMD_PIT+201
         2 000003   000004 756000 1                  STQ     XCON+4

     1616     7481    1           CALL M$XCON ( XCON ) ;

   7481  2 000004   000000 630400 1                  EPPR0   XCON
         2 000005   010003 713400                    CLIMB   4099
         2 000006   400400 401760                    pmme    nvectors=2

     1617     7482    1           NMD_PIT.FLAGS.XCON# =  %NO# ;

   7482  2 000007   000000 236000 3                  LDQ     0
         2 000010   000273 356000 xsym               ANSQ    NMD_PIT+187

     1618     7483        /*
     1619     7484        Call the NMU$RESET procedure to reset the user environment
     1620     7485        that may have been modified by the MIRROR program.
     1621     7486        */
     1622     7487    1           CALL NMU$RESET ;

   7487  2 000011   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000012   000000 701000 xent               TSX1    NMU$RESET
         2 000013   000000 011000                    NOP     0

     1623     7488        /*
     1624     7489        Call the NMU$QUIT procedure to terminate the MIRROR program.
     1625     7490        */
     1626     7491    1           CALL NMU$QUIT ;

   7491  2 000014   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000015   000000 701000 xent               TSX1    NMU$QUIT
         2 000016   000000 011000                    NOP     0
PL6.E3A0      #016=NMU$XCON File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:58 Page:285  

     1627     7492
     1628     7493    1           END NMU$XCON ;

   7493  2 000017   000000 702200 xent               TSX2  ! X66_AARET
     1629     7494

PL6.E3A0      #016=NMU$XCON File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:58 Page:286  
--  Include file information  --

   NM_SUBS_C.:E05TOU  is referenced.
   NM_EQU_E.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   NM_MACRO_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure NMU$XCON.
PL6.E3A0      #016=NMU$XCON File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:58 Page:287  

 **** Variables and constants ****

  ****  Section 001  Data  NMU$XCON

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 XCON

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8892)  r     1 NMD_PIT


   Procedure NMU$XCON requires 16 words for executable code.
   Procedure NMU$XCON requires 4 words of local(AUTO) storage.

    No errors detected in file NMU$UTIL.:E05TSI    .
PL6.E3A0      #016=NMU$XCON File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:58 Page:288  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #016=NMU$XCON File=NMU$UTIL.:E05TSI                                WED 07/30/97 03:58 Page:289  
          MINI XREF LISTING

M$XCON
      5575**DCL-ENT  7481--CALL
NMD_PIT.FLAGS.XCON#
      7291**DCL      7482<<ASSIGN
NMD_PIT.PXCON$$
      7402**DCL      7480>>ASSIGN
NMU$QUIT
      7000**DCL-ENT  7491--CALL
NMU$RESET
      7001**DCL-ENT  7487--CALL
XCON
      7473**DCL      7481<>CALL
XCON.V
      7474**DCL      7473--DCLINIT
XCON.V.UENTRY#
      7474**DCL      7480<<ASSIGN
