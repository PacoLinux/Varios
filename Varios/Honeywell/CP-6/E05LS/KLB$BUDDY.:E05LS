VERSION E05

PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:1    
        1        1        /*M* KLB$BUDDY - Buddy space manager front-end                               */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*D* NAME:        KLB$BUDDY
        8        8             PURPOSE:     To perform buddy space management fucntions
        9        9             CALL:        CALL KLB$BUDDY(BLK$,BSIZ) ALTRET(LBL);
       10       10             INPUT:       BSIZ - Byte size of the block to allocate
       11       11             OUTPUT:      BLK$ - Pointer to the allocated block
       12       12             DESCRIPTION: KLB$BUDDY will initialize and manage a buddy
       13       13                          space pool in the first available data
       14       14                          segment. When no space is left available,
       15       15                          KLB$BUDDY will attempt to get a new page
       16       16                          in the segment and ALTRET if this fails.
       17       17                          If a block of the given byte size is found,
       18       18                          it will be returned pointed to by BLK$.
       19       19                          The block returned may be larger than asked for.
       20       20                          KLB$BUDDY uses the library routines X$ALLOCATE
       21       21                          and X$DEALLOCATE and has two entry points,
       22       22                          KLB$GET and KLB$REL.
       23       23        */
       24       24        KLB$BUDDY:  PROC(BLK$,BSIZ) ALTRET;
       25       25        %INCLUDE CP_6;
       26     5584        %INCLUDE XUM_MACRO_C;
       27     5611        %INCLUDE B_SEGIDS_C;
       28     6150    1   DCL BLK$ PTR;
       29     6151    1   DCL BSIZ UBIN;
       30     6152        %VLP_VECTOR(FPTN=MCB_SEG,STCLASS=STATIC,SEGID=%DS4SID);
       31     6167        %FPT_GDS(FPTN=FPT_GDS,RESULTS=MCB_SEG,SEGSIZE=1024,STCLASS=CONSTANT);
       32     6183        %XUM_MCB(NAME=XUM_MCB,TP=0,STCLASS=STATIC);
       33     6188    1   DCL X$ALLOCATE ENTRY(1) ALTRET;
       34     6189    1   DCL X$DEALLOCATE ENTRY(1) ALTRET;
       35     6190        %EJECT;
PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:2    
       36     6191        /*D* NAME:        KLB$GET
       37     6192             PURPOSE:     To get a block of memory from the buddy space mngr
       38     6193             CALL:        CALL KLB$GET(BLK$,BSIZ) ALTRET(LBL);
       39     6194             DESCRIPTION: KLB$GET allocates a block of memory of the size
       40     6195                          specified by BSIZ (bytes) and returns it pointed
       41     6196                          to by BLK$. If no memory can be obtained, KLB$GET
       42     6197                          will ALTRET.
       43     6198        */
       44     6199    1   KLB$GET: ENTRY(BLK$,BSIZ) ALTRET;
       45     6200
       46     6201    2         DO WHILE('1'B);
       47     6202    2            XUM_MCB.SIZE=BSIZ;
       48     6203    3            CALL X$ALLOCATE(XUM_MCB) WHENRETURN DO;
       49     6204    3               BLK$=XUM_MCB.ADDRESS$;
       50     6205    3               RETURN;
       51     6206    3               END;
       52     6207    3            CALL M$GDS(FPT_GDS) WHENALTRETURN DO;
       53     6208    3               ALTRETURN;
       54     6209    3               END;
       55     6210    2            XUM_MCB.WKSZ=(MCB_SEG.W1.VSIZE#+1)/4;
       56     6211    3            IF XUM_MCB.SEGMENT_BASE$=ADDR(NIL) THEN DO;
       57     6212    3               XUM_MCB.SEGMENT_BASE$=MCB_SEG.PTR$;
       58     6213    3               XUM_MCB.HI_SEGMENT$=MCB_SEG.PTR$;
       59     6214    3               END;
       60     6215    2            END;
       61     6216        %EJECT;
PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:3    
       62     6217        /*D* NAME:        KLB$REL
       63     6218             PURPOSE:     To release a chunk of memory to the buddy space mngr
       64     6219             CALL:        CALL KLB$REL(BLK$);
       65     6220             DESCRIPTION: KLB$REL releases the chunk of memory pointed to by
       66     6221                          BLK$ back into the buddy space pool.
       67     6222        */
       68     6223    1   KLB$REL: ENTRY(BLK$) ALTRET; /*!!!DOESN'T ALTRET!!!*/
       69     6224
       70     6225    1         XUM_MCB.ADDRESS$=BLK$;
       71     6226    1         CALL X$DEALLOCATE(XUM_MCB);
       72     6227    1         RETURN;
       73     6228
       74     6229    1   END KLB$BUDDY;

PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:4    
--  Include file information  --

   B_SEGIDS_C.:E05TOU  is referenced.
   XUM_MACRO_C.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure KLB$BUDDY.

   Procedure KLB$BUDDY requires 44 words for executable code.
   Procedure KLB$BUDDY requires 6 words of local(AUTO) storage.

    No errors detected in file KLB$BUDDY.:E05TSI    .

PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:5    

 Object Unit name= KLB$BUDDY                                  File name= KLB$BUDDY.:E05TOU
 UTS= JUL 30 '97 00:46:53.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    11     13  KLB$BUDDY
    2  RoData even  UTS      6      6  KLB$BUDDY
    3   Proc  even  none    44     54  KLB$BUDDY
    4  RoData even  none     1      1  KLB$BUDDY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        2  KLB$BUDDY
     3      3          yes     yes      Std        2  KLB$GET
     3     42          yes     yes      Std        1  KLB$REL

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 X$ALLOCATE
 yes     yes           Std       1 X$DEALLOCATE
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:6    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:7    


        1        1        /*M* KLB$BUDDY - Buddy space manager front-end                               */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*D* NAME:        KLB$BUDDY
        8        8             PURPOSE:     To perform buddy space management fucntions
        9        9             CALL:        CALL KLB$BUDDY(BLK$,BSIZ) ALTRET(LBL);
       10       10             INPUT:       BSIZ - Byte size of the block to allocate
       11       11             OUTPUT:      BLK$ - Pointer to the allocated block
       12       12             DESCRIPTION: KLB$BUDDY will initialize and manage a buddy
       13       13                          space pool in the first available data
       14       14                          segment. When no space is left available,
       15       15                          KLB$BUDDY will attempt to get a new page
       16       16                          in the segment and ALTRET if this fails.
       17       17                          If a block of the given byte size is found,
       18       18                          it will be returned pointed to by BLK$.
       19       19                          The block returned may be larger than asked for.
       20       20                          KLB$BUDDY uses the library routines X$ALLOCATE
       21       21                          and X$DEALLOCATE and has two entry points,
       22       22                          KLB$GET and KLB$REL.
       23       23        */
       24       24        KLB$BUDDY:  PROC(BLK$,BSIZ) ALTRET;

     24  3 000000   000000 700200 xent  KLB$BUDDY    TSX0  ! X66_AUTO_2
         3 000001   000006 000002                    ZERO    6,2
         3 000002   000005 710000 3                  TRA     s:6202

       25       25        %INCLUDE CP_6;
       26     5584        %INCLUDE XUM_MACRO_C;
       27     5611        %INCLUDE B_SEGIDS_C;
       28     6150    1   DCL BLK$ PTR;
       29     6151    1   DCL BSIZ UBIN;
       30     6152        %VLP_VECTOR(FPTN=MCB_SEG,STCLASS=STATIC,SEGID=%DS4SID);
       31     6167        %FPT_GDS(FPTN=FPT_GDS,RESULTS=MCB_SEG,SEGSIZE=1024,STCLASS=CONSTANT);
PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:8    
       32     6183        %XUM_MCB(NAME=XUM_MCB,TP=0,STCLASS=STATIC);
       33     6188    1   DCL X$ALLOCATE ENTRY(1) ALTRET;
       34     6189    1   DCL X$DEALLOCATE ENTRY(1) ALTRET;
       35     6190        %EJECT;
PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:9    
       36     6191        /*D* NAME:        KLB$GET
       37     6192             PURPOSE:     To get a block of memory from the buddy space mngr
       38     6193             CALL:        CALL KLB$GET(BLK$,BSIZ) ALTRET(LBL);
       39     6194             DESCRIPTION: KLB$GET allocates a block of memory of the size
       40     6195                          specified by BSIZ (bytes) and returns it pointed
       41     6196                          to by BLK$. If no memory can be obtained, KLB$GET
       42     6197                          will ALTRET.
       43     6198        */
       44     6199    1   KLB$GET: ENTRY(BLK$,BSIZ) ALTRET;

   6199  3 000003   000000 700200 xent  KLB$GET      TSX0  ! X66_AUTO_2
         3 000004   000006 000002                    ZERO    6,2

       45     6200
       46     6201    2         DO WHILE('1'B);

       47     6202    2            XUM_MCB.SIZE=BSIZ;

   6202  3 000005   200004 470500                    LDP0    @BSIZ,,AUTO
         3 000006   000000 235100                    LDA     0,,PR0
         3 000007   000010 755000 1                  STA     XUM_MCB+6

       48     6203    3            CALL X$ALLOCATE(XUM_MCB) WHENRETURN DO;

   6203  3 000010   000000 630400 4                  EPPR0   0
         3 000011   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000012   000000 701000 xent               TSX1    X$ALLOCATE
         3 000013   000020 702000 3                  TSX2    s:6207

       49     6204    3               BLK$=XUM_MCB.ADDRESS$;

   6204  3 000014   000002 236000 1                  LDQ     XUM_MCB
         3 000015   200003 470500                    LDP0    @BLK$,,AUTO
         3 000016   000000 756100                    STQ     0,,PR0

       50     6205    3               RETURN;

PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:10   
   6205  3 000017   000000 702200 xent               TSX2  ! X66_ARET

       51     6206    3               END;
       52     6207    3            CALL M$GDS(FPT_GDS) WHENALTRETURN DO;

   6207  3 000020   000000 630400 2                  EPPR0   FPT_GDS
         3 000021   430001 713400                    CLIMB   alt,gds
         3 000022   400400 401760                    pmme    nvectors=2
         3 000023   000025 702000 3                  TSX2    s:6208
         3 000024   000026 710000 3                  TRA     s:6210

       53     6208    3               ALTRETURN;

   6208  3 000025   000000 702200 xent               TSX2  ! X66_AALT

       54     6209    3               END;
       55     6210    2            XUM_MCB.WKSZ=(MCB_SEG.W1.VSIZE#+1)/4;

   6210  3 000026   000000 236000 1                  LDQ     MCB_SEG
         3 000027   000020 772000                    QRL     16
         3 000030   000001 036007                    ADLQ    1,DL
         3 000031   000002 772000                    QRL     2
         3 000032   000006 756000 1                  STQ     XUM_MCB+4

       56     6211    3            IF XUM_MCB.SEGMENT_BASE$=ADDR(NIL) THEN DO;

   6211  3 000033   000004 236000 1                  LDQ     XUM_MCB+2
         3 000034   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000035   000005 601000 3                  TNZ     s:6202

       57     6212    3               XUM_MCB.SEGMENT_BASE$=MCB_SEG.PTR$;

   6212  3 000036   000001 236000 1                  LDQ     MCB_SEG+1
         3 000037   000004 756000 1                  STQ     XUM_MCB+2

       58     6213    3               XUM_MCB.HI_SEGMENT$=MCB_SEG.PTR$;

PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:11   
   6213  3 000040   000005 756000 1                  STQ     XUM_MCB+3

       59     6214    3               END;

       60     6215    2            END;

   6215  3 000041   000005 710000 3                  TRA     s:6202

       61     6216        %EJECT;
PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:12   
       62     6217        /*D* NAME:        KLB$REL
       63     6218             PURPOSE:     To release a chunk of memory to the buddy space mngr
       64     6219             CALL:        CALL KLB$REL(BLK$);
       65     6220             DESCRIPTION: KLB$REL releases the chunk of memory pointed to by
       66     6221                          BLK$ back into the buddy space pool.
       67     6222        */
       68     6223    1   KLB$REL: ENTRY(BLK$) ALTRET; /*!!!DOESN'T ALTRET!!!*/

   6223  3 000042   000000 700200 xent  KLB$REL      TSX0  ! X66_AUTO_2
         3 000043   000006 000002                    ZERO    6,2

       69     6224
       70     6225    1         XUM_MCB.ADDRESS$=BLK$;

   6225  3 000044   200003 470500                    LDP0    @BLK$,,AUTO
         3 000045   000000 236100                    LDQ     0,,PR0
         3 000046   000002 756000 1                  STQ     XUM_MCB

       71     6226    1         CALL X$DEALLOCATE(XUM_MCB);

   6226  3 000047   000000 630400 4                  EPPR0   0
         3 000050   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000051   000000 701000 xent               TSX1    X$DEALLOCATE
         3 000052   000000 011000                    NOP     0

       72     6227    1         RETURN;

   6227  3 000053   000000 702200 xent               TSX2  ! X66_ARET
       73     6228
       74     6229    1   END KLB$BUDDY;

PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:13   
--  Include file information  --

   B_SEGIDS_C.:E05TOU  is referenced.
   XUM_MACRO_C.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure KLB$BUDDY.
PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:14   

 **** Variables and constants ****

  ****  Section 001  Data  KLB$BUDDY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(72)    r     1 MCB_SEG                    2-0-0/w STRC(324)   r     1 XUM_MCB

  ****  Section 002 RoData KLB$BUDDY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 FPT_GDS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @BLK$                      4-0-0/w PTR         r     1 @BSIZ
    *0-0-0/w PTR         r     1 BLK$                      *0-0-0/w UBIN        r     1 BSIZ


   Procedure KLB$BUDDY requires 44 words for executable code.
   Procedure KLB$BUDDY requires 6 words of local(AUTO) storage.

    No errors detected in file KLB$BUDDY.:E05TSI    .
PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:15   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:16   
          MINI XREF LISTING

BLK$
      6150**DCL        24--PROC     6199--ENTRY    6204<<ASSIGN   6223--ENTRY    6225>>ASSIGN
BSIZ
      6151**DCL        24--PROC     6199--ENTRY    6202>>ASSIGN
FPT_GDS
      6178**DCL      6207<>CALL
FPT_GDS.V
      6178**DCL      6178--DCLINIT
M$GDS
      5547**DCL-ENT  6207--CALL
MCB_SEG
      6163**DCL      6178--DCLINIT
MCB_SEG.PTR$
      6165**DCL      6212>>ASSIGN   6213>>ASSIGN
MCB_SEG.W1.VSIZE#
      6163**DCL      6210>>ASSIGN
MCB_SEG.W2
      6164**DCL      6165--REDEF
X$ALLOCATE
      6188**DCL-ENT  6203--CALL
X$DEALLOCATE
      6189**DCL-ENT  6226--CALL
XUM_MCB
      6184**DCL      6203<>CALL     6226<>CALL
XUM_MCB.ADDRESS$
      6184**DCL      6204>>ASSIGN   6225<<ASSIGN
XUM_MCB.HI_SEGMENT$
      6184**DCL      6213<<ASSIGN
XUM_MCB.SEGMENT_BASE$
      6184**DCL      6211>>IF       6212<<ASSIGN
XUM_MCB.SIZE
      6185**DCL      6202<<ASSIGN
PL6.E3A0      #001=KLB$BUDDY File=KLB$BUDDY.:E05TSI                              WED 07/30/97 00:46 Page:17   
XUM_MCB.WKSZ
      6185**DCL      6210<<ASSIGN
