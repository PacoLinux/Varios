VERSION E05

CALF.D00   OU Name=QCC$CBD                 File=QCC$CBD.:E05TSI                 WED JUL 30 '97 05:03 Page:2
                                     1  *M*  QCC$CBD:  Convert binary to decimal.
                                     2  *T***********************************************************
                                     3  *T*                                                         *
                                     4  *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5  *T*                                                         *
                                     6  *T***********************************************************
                                     7  *
                                     8  *********************************************************************
                                     9  *                                                                   *
                                    10  *     C O N V E R T     B I N A R Y     T O     D E C I M A L       *
                                    11  *                                                                   *
                                    12  *********************************************************************
                                    13  *
                                    14  *P*  NAME:         QCC$CBD
                                    15  *P*  PURPOSE:      Binary to decimal conversion
                                    16  *P*  DESCRIPTION:  This routine performs binary to decimal conversion
                                    17  *P*                fields supplied in the parameter.  The caller can
                                    18  *P*                verify the result prior to modification of the
                                    19  *P*                target by specifying SIZE_ERROR in the parameter.
                                    20  *P*                This specification will cause this routine to do
                                    21  *P*                a test operation and altreturn if an overflow
                                    22  *P*                condition is detected.
                                    23        LISTINC
                                    24        INCLUDE   QCC_ASMEQU_E
                                     1+ *M*  QCC_ASMEQU_E:  Common EQUates for assembly routines.
                                     2+ *T***********************************************************
                                     3+ *T*                                                         *
                                     4+ *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5+ *T*                                                         *
                                     6+ *T***********************************************************
         00000000                    7+ ZERO              EQU 0
         00000001                    8+ ONE               EQU 1
         00000002                    9+ TWO               EQU 2
         00000000                   10+ CIP_DESC_STRUC    EQU 0
         00000000                   11+ SOURCE_DESC       EQU 0
         00000006                   12+ SOURCE_PTR        EQU 6
CALF.D00   OU Name=QCC$CBD                 File=QCC$CBD.:E05TSI                 WED JUL 30 '97 05:03 Page:3
         00000002                   13+ TARGET_DESC       EQU 2
         00000008                   14+ TARGET_PTR        EQU 8
         00000004                   15+ AUX_DESC          EQU 4
         0000000A                   16+ AUX_PTR           EQU 10
         0000000C                   17+ SOURCE_LEN        EQU 12
         0000000D                   18+ TARGET_LEN        EQU 13
         0000000E                   19+ AUX_LEN           EQU 14
         0000000C                   20+ ARG_LEN           EQU SOURCE_LEN
         0000000D                   21+ ARG_LIST_LEN      EQU TARGET_LEN
         0000000C                   22+ SOURCE_SHIFT_CNT  EQU SOURCE_LEN
         0000000D                   23+ TARGET_SHIFT_CNT  EQU TARGET_LEN
         0000000E                   24+ AUX_SHIFT_CNT     EQU AUX_LEN
         0000000E                   25+ MOP_LEN           EQU AUX_LEN
         0000000F                   26+ SOURCE_DEC        EQU 15
         00000010                   27+ TARGET_DEC        EQU 16
         00000011                   28+ AUX_DEC           EQU 17
         0000000F                   29+ SOURCE_INX        EQU SOURCE_DEC
         00000010                   30+ TARGET_INX        EQU TARGET_DEC
         00000011                   31+ AUX_INX           EQU AUX_DEC
         00000011                   32+ RESULT_DEC        EQU AUX_DEC
         00000012                   33+ ELEM_LEN          EQU 18
         00000013                   34+ ELEM_LIST_LEN     EQU 19
         00000014                   35+ INT_RESULT_LEN    EQU 20
         00000015                   36+ PIC_STRING_DEC    EQU 21
         00000014                   37+ SRCH_RESULT_NUM   EQU INT_RESULT_LEN
         00000015                   38+ SRCH_RESULT_DISP  EQU PIC_STRING_DEC
         00000014                   39+ VRFY_RESULT_DISP  EQU INT_RESULT_LEN
         00000016                   40+ SIZE_ERROR        EQU 22
         00000016                   41+ FILL              EQU SIZE_ERROR
         00000017                   42+ ROUND             EQU 23
         00000017                   43+ COMP_RESULT       EQU ROUND
         00000017                   44+ TARGET_SIZE       EQU ROUND
                                    25        OUNAME    QCC$CBD
                                    26        ENTDEF    QCC$CBD
                                    27        SYMREF    QI_SWORK
                                    28        SYMREF    QI_SWORK_2
CALF.D00   OU Name=QCC$CBD                 File=QCC$CBD.:E05TSI                 WED JUL 30 '97 05:03 Page:4
                                    29  *D*  NAME:         QCC$CBD
                                    30  *D*  CALL:         CALL QCC$CBD ( cip-desc-struc ) ALTRET ( label )
                                    31  *D*  PARAMETERS:   cip-desc-struct contains:
                                    32  *D*                 1. source descriptor
                                    33  *D*                 2. target descriptor
                                    34  *D*                 3. source decimal place
                                    35  *D*                 4. target decimal place
                                    36  *D*                 5. size error request (optional)
                                    37  *D*  INTERFACE:
                                    38  *D*  ENVIRONMENT:  Called by the interpreter on behalf of an FPL
                                    39  *D*                routine; may be called by any language which
                                    40  *D*                adheres to the standard calling sequence.
                                    41  *D*  INPUT:        cip-desc-struc
                                    42  *D*  OUTPUT:       Converted result referred to by the second
                                    43  *D*                descriptor in cip-desc-struc.
                                    44  *D*  SCRATCH:
                                    45  *D*  DESCRIPTION:  This routine converts binary values to decimal
                                    46  *D*                fields.  If the decimal places of the source and
                                    47  *D*                target are not equal, the source is aligned to
                                    48  *D*                the target prior to the conversion.  If SIZE_ERROR
                                    49  *D*                is specified by the caller, the routine will
                                    50  *D*                replace the target pointer with a pointer to a
                                    51  *D*                temp area, and perform a test operation to
                                    52  *D*                determine if an overflow condition is imminent.
                                    53  *D*                If no overflow is detected, the actual target
                                    54  *D*                pointer is restored and the operation is done.
                                    55  *D*                If overflow is dectected the result field remains
                                    56  *D*                unchanged, and the routine altreturns.
                                    57  *
         000000(0)                  58             SECT      PROC,ZERO
         000000(0)                  59  QCC$CBD    ALIGN     WORD
                                    60  *
 00000   BCC3 0000                  61             LDB,B3    CIP_DESC_STRUC,B3 /* Get ptr to CIP structure */
 00002   F843 0016                  62             LDR,R7    SIZE_ERROR,B3
 00004   D843 0010                  63             LDR,R5    TARGET_DEC,B3
 00006   000C                       64             LRDB                 /* Load Remote Descriptor Register */
CALF.D00   OU Name=QCC$CBD                 File=QCC$CBD.:E05TSI                 WED JUL 30 '97 05:03 Page:5
 00007   5981 0017                  65             BNEZ,R5   NEEDS_ALIGN,PREL    /* Go if 2nd CIP pos ~= 0 */
                                    66  *
                                    67  * HERE -> NO ALIGNMENT NEEDED
                                    68  *
 00009   7901 000F                  69             BEZ,R7    DO_REMOTE_OP,PREL  /* Go if NO SIZE_ERR check */
 0000B   9CC3 0008                  70             LDB,B1    TARGET_PTR,B3 /* Save original target address */
 0000D   AB80 000000(0)s            71             LAB,B2    QI_SWORK        /* Get addr of temp test area */
 00010   AFC3 0008                  72             STB,B2    TARGET_PTR,B3 /* target ptr <- ADDR(testarea) */
 00012   0027 0000 0010             73             CBD       REMOTE(ZERO),REMOTE(ONE)   /* Issue ovfl test */
 00015   9FC3 0008                  74             STB,B1    TARGET_PTR,B3 /* target ptr <- old target ptr */
 00017   1301 003E                  75             CBOV      SIZE_ERROR_OCCUR,PREL     /* Go if SIZE_ERROR */
                                    76  *
         000019(0)                  77  DO_REMOTE_OP    ALIGN     WORD
 00019   0027 0000 0010             78             CBD       REMOTE(ZERO),REMOTE(ONE)     /* Do real McCoy */
                                    79             INCLUDE   QCC_ASMRET_C
                                     1+ *M*  QCC_ASMRET_C:  Common normal RETURN code for assembly routines.
                                     2+ *T***********************************************************
                                     3+ *T*                                                         *
                                     4+ *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5+ *T*                                                         *
                                     6+ *T***********************************************************
 0001C   437F                        7+            CSYNC
 0001D   C3C6 0001                   8+            LNJ,B4    1,B6                     /* RETURN(NORMAL) */
                                    80  *
                                    81  * HERE -> ALIGNMENT IS NEEDED
                                    82  *
         00001F(0)                  83  NEEDS_ALIGN     ALIGN     WORD
 0001F   DB80 000000(1)s            84             LAB,B5    QI_SWORK_2     /* Get addr of align temp area */
 00022   2C00                       85             LDV,R2    0              /* Clear overflow flag         */
 00023   0027 0000 3F850000         86             CBD       REMOTE(ZERO),PACKED(0,B5,0,31,TRAILING)
 00027   437F                       87             CSYNC
 00028   5A01 000B                  88             BGZ,R5    SHIFT_LEFT,PREL  /* Determine shift direction */
                                    89  *
                                    90  * HERE -> SHIFT RIGHT
                                    91  *
 0002A   8255                       92             NEG       R5                             /* R5 <- (-R5) */
CALF.D00   OU Name=QCC$CBD                 File=QCC$CBD.:E05TSI                 WED JUL 30 '97 05:03 Page:6
 0002B   D470 0080                  93             OR,R5     ='80'X              /* Assign shift right bit */
 0002D   002E 3F850000              94             DSH       PACKED(0,B5,0,31,TRAILING)     /* Shift right */
 00030   00780000
 00032   4381 0009                  95             CSNCB     CHECK_SIZE_ERROR,PREL
                                    96  *
         000034(0)                  97  SHIFT_LEFT      ALIGN     WORD
 00034   002E 3F850000              98             DSH       PACKED(0,B5,0,31,TRAILING)      /* Shift left */
 00037   00780000
 00039   1381 0002                  99             CBNOV     CHECK_SIZE_ERROR,PREL        /* Go if NO ovfl */
 0003B   2C01                      100             LDV,R2    1              /* Set overflow flag           */
                                   101  *
         00003C(0)                 102  CHECK_SIZE_ERROR ALIGN    WORD
 0003C   7901 0012                 103             BEZ,R7    DO_INLINE_OP,PREL  /* Go if NO SIZE_ERR check */
 0003E   2981 0017                 104             BNEZ,R2   SIZE_ERROR_OCCUR,PREL /* Branch if overflow   */
 00040   9CC3 0008                 105             LDB,B1    TARGET_PTR,B3          /* Save target pointer */
 00042   AB80 000000(0)s           106             LAB,B2    QI_SWORK       /* Get addr of temp align area */
 00045   AFC3 0008                 107             STB,B2    TARGET_PTR,B3 /* target ptr <- ADDR(temparea) */
 00047   0025 3F850000 0010        108             DMC       PACKED(0,B5,0,31,TRAILING),REMOTE(ONE) /*test */
 0004B   9FC3 0008                 109             STB,B1    TARGET_PTR,B3 /* target ptr <- old target ptr */
 0004D   1301 0008                 110             CBOV      SIZE_ERROR_OCCUR,PREL           /* Go if ovfl */
                                   111  *
         00004F(0)                 112  DO_INLINE_OP    ALIGN     WORD
 0004F   0025 3F850000 0010        113             DMC       PACKED(0,B5,0,31,TRAILING),REMOTE(ONE)
                                   114             INCLUDE   QCC_ASMRET_C
                                     1+ *M*  QCC_ASMRET_C:  Common normal RETURN code for assembly routines.
                                     2+ *T***********************************************************
                                     3+ *T*                                                         *
                                     4+ *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5+ *T*                                                         *
                                     6+ *T***********************************************************
 00053   437F                        7+            CSYNC
 00054   C3C6 0001                   8+            LNJ,B4    1,B6                     /* RETURN(NORMAL) */
                                   115  *
         000056(0)                 116  SIZE_ERROR_OCCUR ALIGN    WORD
                                   117             INCLUDE   QCC_ASMALTRET_C
                                     1+ *M*  QCC_ASMALTRET_C:  Common ALTRETURN code for assembly routines.
CALF.D00   OU Name=QCC$CBD                 File=QCC$CBD.:E05TSI                 WED JUL 30 '97 05:03 Page:7
                                     2+ *T***********************************************************
                                     3+ *T*                                                         *
                                     4+ *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5+ *T*                                                         *
                                     6+ *T***********************************************************
 00056   437F                        7+            CSYNC
 00057   9846 0000                   8+            LDR,R1    0,B6
 00059   C396                        9+            LNJ,B4    ,B6,R1                     /* ALTRETURN */
                                   118  *
                                   119             END
      No Errors in this assembly.
