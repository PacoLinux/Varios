VERSION E05

PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:1    
        1        1        /*M* KOP$PHYS_IO - Code to perform  physical I/O for PIGLET                   */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        KOP$PHYS_IO: PROC (CHANNEL,OPERATION,PARAM_1U,RETURN_STATUS) ALTRET;
        8        8        /**/
        9        9        /*  This routine is used to perform most of the physical I/O on behalf of     */
       10       10        /*  the PIGLET FPRG.                                                          */
       11       11        /**/
       12       12        /**/
       13       13        /*  INCLUDE FILES  */
       14       14        /**/
       15       15        %INCLUDE KO_DATA_R;
       16     3762        %INCLUDE GH_HARDWARE_M;                 /* Physical IO macros                 */
       17     3860        /**/
       18     3861        /*  PARAMETERS  */
       19     3862        /**/
       20     3863    1   DCL OPERATION SBIN WORD;
       21     3864    1   DCL CHANNEL SBIN WORD;
       22     3865    1   DCL PARAM_1U UBIN WORD;
       23     3866    1   DCL PARAM_1B REDEF PARAM_1U BIT(16);
       24     3867    1   DCL PARAM_1S REDEF PARAM_1U SBIN WORD;
       25     3868        %KO_DEVICE_STATUS (NAME = RETURN_STATUS, STCLASS = PARAM);
       26     3918        /**/
       27     3919        /*  ENTRY DCLS  */
       28     3920        /**/
       29     3921        %KO_ENTRIES (OMIT=KOP$PHYS_IO);
       30     3977        /**/
       31     3978        /*  AUTO DATA  */
       32     3979        /**/
       33     3980        %GH_IO (FPTN = FPT_IO,STCLASS = AUTO);
       34     3996        %GH_IOLD (FPTN = FPT_IOLD,STCLASS = AUTO);
       35     4011    1   DCL PACK UBIN(16);
       36     4012    1   DCL 1 PACK_ REDEF PACK,
       37     4013    1         2 HOB UBIN(8) UNAL,
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:2    
       38     4014    1         2 LOB UBIN(8) UNAL;
       39     4015    1   DCL TRIES_LEFT SBIN;
       40     4016        %KO_DEVICE_STATUS (NAME = DEV_STATUS, STCLASS = AUTO);
       41     4066        %KO_DEVICE_STATUS (NAME = OLD_STATUS, STCLASS = AUTO);
       42     4116        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:3    
       43     4117    1             IF OPERATION = %OP_EXVERIFY# THEN
       44     4118    1                TRIES_LEFT = 1;
       45     4119    1             ELSE
       46     4120    1                TRIES_LEFT = KO_RETRIES +1; /* First try is free                 */
       47     4121    1   RETRY:    TRIES_LEFT = TRIES_LEFT -1;
       48     4122    2             DO CASE (OPERATION);
       49     4123    2                CASE(%OP_SETSEC#);         /* Set up sector                      */
       50     4124    2                  FPT_IO.CAS.FNC = %CO_CONFIG_B#;
       51     4125    2                  FPT_IO.DAS = BINBIT(DISK_SECTOR_NO *256 + DISK_SEC_SIZE,16);
       52     4126    2                  CALL DO_IO_OUT ALTRET(BAD_IO);
       53     4127    2                CASE(%OP_SETTRKSID#);      /* Set up track & side                */
       54     4128    2                  FPT_IO.CAS.FNC = %CO_CONFIG_A#;
       55     4129    2                  FPT_IO.DAS = BINBIT(DISK_TRACK_NO *256 + DISK_SIDE,16);
       56     4130    2                  CALL DO_IO_OUT ALTRET(BAD_IO);
       57     4131    2                CASE(%OP_SEEK#);           /* Seek for track & sector            */
       58     4132    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;
       59     4133    2                  FPT_IO.DAS = %CT_SEEK#;
       60     4134    2                  CALL DO_IO_OUT ALTRET(BAD_IO);
       61     4135    2                CASE(%OP_SETIRANGEADDR#);  /* Set input range and address        */
       62     4136    2                  FPT_IOLD.BUF$ = DISK_BUF$;
       63     4137    2                  FPT_IOLD.BUFSIZE = DISK_LEN;
       64     4138    2                  CALL DO_IOLD_IN ALTRET(BAD_IOLD);
       65     4139    2                CASE(%OP_SETORANGEADDR#);  /* Set output range and address       */
       66     4140    2                  FPT_IOLD.BUF$ = DISK_BUF$;
       67     4141    2                  FPT_IOLD.BUFSIZE = DISK_LEN;
       68     4142    2                  CALL DO_IOLD_OUT ALTRET(BAD_IOLD);
       69     4143    2                CASE(%OP_EXREAD#);         /* READ:  Set task word & DO IT!      */
       70     4144    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;
       71     4145    2                  FPT_IO.DAS = %CT_DATA#;
       72     4146    2                  CALL DO_IO_IN ALTRET(BAD_IO);
       73     4147    2                CASE(%OP_EXDREAD#);        /* DIAG READ:  Set task word & DO IT! */
       74     4148    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;
       75     4149    2                  FPT_IO.DAS = %CT_DIAG_DATA#;
       76     4150    2                  CALL DO_IO_IN ALTRET(BAD_IO);
       77     4151    2                CASE(%OP_EXKREAD#);        /* DELETED READ:  Set task word & DO  */
       78     4152    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;
       79     4153    2                  FPT_IO.DAS = %CT_DEL_DATA#;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:4    
       80     4154    2                  CALL DO_IO_IN ALTRET(BAD_IO);
       81     4155    2                CASE(%OP_EXVERIFY#);       /* VERIFY:  Set task word & DO IT!    */
       82     4156    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;
       83     4157    2                  FPT_IO.DAS = %CT_DATA#;
       84     4158    2                  CALL DO_IO_IN ALTRET(BAD_IO);
       85     4159    2                CASE(%OP_EXWRITE#);        /* WRITE:  Set task word & DO IT!     */
       86     4160    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;
       87     4161    2                  FPT_IO.DAS = %CT_DATA#;
       88     4162    2                  CALL DO_IO_OUT ALTRET(BAD_IO);
       89     4163    2                CASE(%OP_EXVINIT#);        /* VINIT:  Set task word & DO IT!     */
       90     4164    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;
       91     4165    2                  FPT_IO.DAS = %CT_FORMAT_ID#;
       92     4166    2                  CALL DO_IO_OUT ALTRET(BAD_IO);
       93     4167    2                CASE(%OP_KILLINT#);        /* Kill interrupts                    */
       94     4168    2                  FPT_IO.CAS.FNC = %CO_INTRP_CTRL#;
       95     4169    2                  FPT_IO.DAS = BINBIT(KO_CPU_CHAN*64 + 0,16);
       96     4170    2                  CALL DO_IO_OUT ALTRET (BAD_IO);
       97     4171    2                CASE(%OP_CALIBRATE#);      /* Calibrate the drive                */
       98     4172    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;
       99     4173    2                  FPT_IO.DAS = %CT_RECALIBRATE#;
      100     4174    2                  CALL DO_IO_OUT ALTRET (BAD_IO);
      101     4175    2                CASE(%OP_SETINT#);         /* Set up interrupt level             */
      102     4176    2                  FPT_IO.CAS.FNC = %CO_INTRP_CTRL#;
      103     4177    2                  FPT_IO.DAS = BINBIT(KO_CPU_CHAN*64 + KO_INTERRUPT_LEVEL,16);
      104     4178    2                  CALL DO_IO_OUT ALTRET (BAD_IO);
      105     4179    2                CASE(%OP_GET_DTYPE#);      /* Fetch device type code             */
      106     4180    2                  FPT_IO.CAS.FNC = %CI_DEV_ID#;
      107     4181    2                  CALL DO_IO_IN ALTRET (BAD_IO);
      108     4182    2                  PARAM_1B = FPT_IO.DAS;
      109     4183    2                END;
      110     4184        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:5    
      111     4185        /**/
      112     4186        /*  It all worked OK.                                                         */
      113     4187        /**/
      114     4188    1             IF ADDR(RETURN_STATUS) ~= ADDR(NIL) THEN
      115     4189    1                RETURN_STATUS = DEV_STATUS;
      116     4190    1             RETURN;
      117     4191        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:6    
      118     4192    1   BAD_IOLD: ;                             /* Error on IOLD instruction          */
      119     4193    1   BAD_IO:   ;                             /* Error on IO instruction            */
      120     4194        /*  Stash status so we will later know WHY we failed.  */
      121     4195    1             OLD_STATUS = DEV_STATUS;
      122     4196        /*  Some errors require a CALIBRATE command to clear the error status.        */
      123     4197    1             IF DEV_STATUS.DEV_FAULT
      124     4198    1                OR DEV_STATUS.SEEK_ERROR THEN
      125     4199    2                DO;
      126     4200    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;
      127     4201    2                  FPT_IO.DAS = %CT_RECALIBRATE#;
      128     4202    2                  CALL DO_IO_OUT ALTRET(IGNORE_ALT1);
      129     4203    2   IGNORE_ALT1:   ;
      130     4204    2                  END;
      131     4205        /*  If there is still some error status, try a thereputic SEEK command.       */
      132     4206    1             IF DEV_STATUS & ERRMASK_STATUS THEN
      133     4207    2                DO;
      134     4208    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;
      135     4209    2                  FPT_IO.DAS = %CT_SEEK#;
      136     4210    2                  CALL DO_IO_OUT ALTRET(IGNORE_ALT2);
      137     4211    2   IGNORE_ALT2:   ;
      138     4212    2                  END;
      139     4213        /*  Hit the controller with an INITIALIZE control word.  This re-calibrates   */
      140     4214        /*  and also disables interrupts.                                             */
      141     4215    1             IF DEV_STATUS & ERRMASK_STATUS THEN
      142     4216    2                DO;
      143     4217    2                  FPT_IO.CAS.FNC = %CO_CTRL_WORD#;
      144     4218    2                  FPT_IO.DAS = %CW_INITIALIZE#;
      145     4219    2                  CALL DO_IO_OUT ALTRET(IGNORE_ALT3);
      146     4220    2   IGNORE_ALT3:   ;
      147     4221    2                  END;
      148     4222        /*  Consider giving the operation another try.                                */
      149     4223    1             IF TRIES_LEFT > 0 THEN
      150     4224    2                DO;                        /* Do a retry                         */
      151     4225    2                  DISK_RETRIES = DISK_RETRIES +1;
      152     4226    2                  GOTO RETRY;
      153     4227    2                  END;
      154     4228    1   DONT_RETRY: ;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:7    
      155     4229        /*  Stuff status fields so caller knows what went wrong.                      */
      156     4230    1             IF ADDR(RETURN_STATUS) ~= ADDR(NIL) THEN
      157     4231    1                RETURN_STATUS = OLD_STATUS;
      158     4232    1             ALTRETURN;
      159     4233        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:8    
      160     4234        /**/
      161     4235        /*  Common setup for OUTPUT IO instruction.  Also, do it.  */
      162     4236        /**/
      163     4237    1   DO_IO_OUT:  PROC ALTRET;
      164     4238    2              FPT_IO.CAS.CHN = CHANNEL;
      165     4239    2              FPT_IO.CAS.XCHN.OUTPUT = '1'B;
      166     4240    2   RETRY:     CALL GHH$IO (FPT_IO) ALTRET(RETRY);
      167     4241    2              CALL AWAIT_COMPLETION ALTRET(BAD_NEWS);
      168     4242    2              RETURN;
      169     4243    2   BAD_NEWS:  ALTRETURN;
      170     4244
      171     4245    2   END DO_IO_OUT;
      172     4246        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:9    
      173     4247        /**/
      174     4248        /*  Common setup for INPUT IO instruction.  Also, do it.  */
      175     4249        /**/
      176     4250    1   DO_IO_IN:  PROC ALTRET;
      177     4251    2              FPT_IO.CAS.CHN = CHANNEL;
      178     4252    2              FPT_IO.CAS.XCHN.OUTPUT = '0'B;
      179     4253    2   RETRY:     CALL GHH$IO_IN (FPT_IO) ALTRET(RETRY);
      180     4254    2              CALL AWAIT_COMPLETION ALTRET(BAD_NEWS);
      181     4255    2              RETURN;
      182     4256    2   BAD_NEWS:  ALTRETURN;
      183     4257
      184     4258    2   END DO_IO_IN;
      185     4259        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:10   
      186     4260        /**/
      187     4261        /*  Common setup for INPUT IOLD instruction.  Also, do it.  */
      188     4262        /**/
      189     4263    1   DO_IOLD_IN:  PROC ALTRET;
      190     4264    2              FPT_IOLD.FNC = 9;
      191     4265    2              FPT_IOLD.BYTX = 0;
      192     4266    2              FPT_IOLD.CHN = CHANNEL;
      193     4267    2              FPT_IOLD.XCHN.OUTPUT = '0'B;
      194     4268    2   RETRY:     CALL GHH$IOLD (FPT_IOLD) ALTRET(RETRY);
      195     4269    2              CALL AWAIT_COMPLETION ALTRET(BAD_NEWS);
      196     4270    2              RETURN;
      197     4271    2   BAD_NEWS:  ALTRETURN;
      198     4272
      199     4273    2   END DO_IOLD_IN;
      200     4274        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:11   
      201     4275        /**/
      202     4276        /*  Common setup for OUTPUT IOLD instruction.  Also, do it.  */
      203     4277        /**/
      204     4278    1   DO_IOLD_OUT:  PROC ALTRET;
      205     4279    2              FPT_IOLD.FNC = 9;
      206     4280    2              FPT_IOLD.BYTX = 0;
      207     4281    2              FPT_IOLD.CHN = CHANNEL;
      208     4282    2              FPT_IOLD.XCHN.OUTPUT = '1'B;
      209     4283    2   RETRY:     CALL GHH$IOLD (FPT_IOLD) ALTRET(RETRY);
      210     4284    2              CALL AWAIT_COMPLETION ALTRET(BAD_NEWS);
      211     4285    2              RETURN;
      212     4286    2   BAD_NEWS:  ALTRETURN;
      213     4287
      214     4288    2   END DO_IOLD_OUT;
      215     4289        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:12   
      216     4290        /**/
      217     4291        /*  Wait until previous IO or IOLD instruction completes.                     */
      218     4292        /*N*  PIGLET does not currently use interrupts for diskette I/O.  It is       */
      219     4293        /*    intended that a later version wil use interrupts.  A handy way to       */
      220     4294        /*    do this would be place a call to M$WAIT here, and get kicked off        */
      221     4295        /*    it by the interrupt.                                                    */
      222     4296        /*                                                                            */
      223     4297        /*    In the meantime, we must do something to prevent us from sucking        */
      224     4298        /*    up too much CPU time while waiting for the device to complete.          */
      225     4299        /*    If the device isn't ready IMMEDIATELY, we M$WAIT for a short while      */
      226     4300        /*    and check the status again.  While this is far from optimum, it         */
      227     4301        /*    does allow us to give away some MIPS that we aren't using now.          */
      228     4302        /*                                                                            */
      229     4303        /*  After the I/O is complete, check the status for success and gripe         */
      230     4304        /*  bitterly if it failed.                                                    */
      231     4305        /**/
      232     4306    1   AWAIT_COMPLETION:  PROC ALTRET;
      233     4307        /**/
      234     4308        /*  AUTO  */
      235     4309        /**/
      236     4310    2   DCL SECS_WAITED SBIN;
      237     4311        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:13   
      238     4312        /**/
      239     4313        /*  Wait until the I/O completes.                                             */
      240     4314        /**/
      241     4315    2              SECS_WAITED = 0;
      242     4316    2   ENQUIRE_STATUS: ;
      243     4317    2              CALL KOP$GET_STATUS (CHANNEL,DEV_STATUS) ALTRET(BAD_NEWS);
      244     4318    2              IF DEV_STATUS = %DS_DEVICE_BUSY# THEN
      245     4319    3                 DO;
      246     4320    3                   IF SECS_WAITED >= SECS2TIMEOUT THEN
      247     4321    4                      DO;
      248     4322    4                        GOTO BAD_NEWS;
      249     4323    4                        END;
      250     4324    3                   CALL KOU$WAITSECS (SECS2WAIT) ALTRET(MONERR);
      251     4325    3                   SECS_WAITED = SECS_WAITED + SECS2WAIT;
      252     4326    3                   GOTO ENQUIRE_STATUS;
      253     4327    3                   END;
      254     4328        /**/
      255     4329        /*  Take the ALTRET if the completed I/O bit the big one.  */
      256     4330        /**/
      257     4331    2              CALL KOP$CHECK_STATUS (DEV_STATUS) ALTRET(BAD_NEWS);
      258     4332        /**/
      259     4333        /*  All done!  */
      260     4334        /**/
      261     4335    2              RETURN;
      262     4336        /**/
      263     4337    2   BAD_NEWS:  ;
      264     4338    2   MONERR:    ;
      265     4339    2              ALTRETURN;
      266     4340
      267     4341    2   END AWAIT_COMPLETION;
      268     4342        /**/
      269     4343    1             END KOP$PHYS_IO;
      270     4344        %EOD;

PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:14   
--  Include file information  --

   GH_HARDWARE_M.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KOP$PHYS_IO.

   Procedure KOP$PHYS_IO requires 582 words for executable code.
   Procedure KOP$PHYS_IO requires 34 words of local(AUTO) storage.

PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:15   

 Object Unit name= KOP$PHYS_IO                                File name= KOP$PHYS_IO.:E05TOU
 UTS= JUL 30 '97 01:15:26.80 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   DCB   even  none     0      0  M$HOST
    1   Proc  even  none   582    246  KOP$PHYS_IO
    2  RoData even  none     2      2  KOP$PHYS_IO

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        4  KOP$PHYS_IO

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 GHH$IO
 yes     yes           Std       1 GHH$IO_IN
 yes     yes           Std       1 GHH$IOLD
 yes     yes           Std       2 KOP$GET_STATUS
 yes     yes           Std       1 KOU$WAITSECS
 yes     yes           Std       1 KOP$CHECK_STATUS
                       nStd      0 X6A_AUTO_N
                       nStd      0 X6A_ARET
                       nStd      0 X6A_AALT
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:16   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KO_CPU_CHAN                           KO_INTERRUPT_LEVEL                    KO_RETRIES
r    SECS2WAIT                        r    SECS2TIMEOUT                          KH_CHNHI
     KH_CHNLOW                             HOST_BUF$                             DISK_LEN
     DISK_BUF$                             DISK_SECTOR_NO                        DISK_SEC_SIZE
     DISK_TRACK_NO                         DISK_SIDE                             DISK_RETRIES
     ERRMASK_STATUS                        M$HOST                           r    G$ROS$
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:17   


        1        1        /*M* KOP$PHYS_IO - Code to perform  physical I/O for PIGLET                   */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        KOP$PHYS_IO: PROC (CHANNEL,OPERATION,PARAM_1U,RETURN_STATUS) ALTRET;

      7   1 000000  D380 0000 0000  xent KOP$PHYS_IO     LNJ,B5   X6A_AUTO_N
          1 000003       0022 0004                       DC       34,4

        8        8        /**/
        9        9        /*  This routine is used to perform most of the physical I/O on behalf of     */
       10       10        /*  the PIGLET FPRG.                                                          */
       11       11        /**/
       12       12        /**/
       13       13        /*  INCLUDE FILES  */
       14       14        /**/
       15       15        %INCLUDE KO_DATA_R;
       16     3762        %INCLUDE GH_HARDWARE_M;                 /* Physical IO macros                 */
       17     3860        /**/
       18     3861        /*  PARAMETERS  */
       19     3862        /**/
       20     3863    1   DCL OPERATION SBIN WORD;
       21     3864    1   DCL CHANNEL SBIN WORD;
       22     3865    1   DCL PARAM_1U UBIN WORD;
       23     3866    1   DCL PARAM_1B REDEF PARAM_1U BIT(16);
       24     3867    1   DCL PARAM_1S REDEF PARAM_1U SBIN WORD;
       25     3868        %KO_DEVICE_STATUS (NAME = RETURN_STATUS, STCLASS = PARAM);
       26     3918        /**/
       27     3919        /*  ENTRY DCLS  */
       28     3920        /**/
       29     3921        %KO_ENTRIES (OMIT=KOP$PHYS_IO);
       30     3977        /**/
       31     3978        /*  AUTO DATA  */
       32     3979        /**/
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:18   
       33     3980        %GH_IO (FPTN = FPT_IO,STCLASS = AUTO);
       34     3996        %GH_IOLD (FPTN = FPT_IOLD,STCLASS = AUTO);
       35     4011    1   DCL PACK UBIN(16);
       36     4012    1   DCL 1 PACK_ REDEF PACK,
       37     4013    1         2 HOB UBIN(8) UNAL,
       38     4014    1         2 LOB UBIN(8) UNAL;
       39     4015    1   DCL TRIES_LEFT SBIN;
       40     4016        %KO_DEVICE_STATUS (NAME = DEV_STATUS, STCLASS = AUTO);
       41     4066        %KO_DEVICE_STATUS (NAME = OLD_STATUS, STCLASS = AUTO);
       42     4116        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:19   
       43     4117    1             IF OPERATION = %OP_EXVERIFY# THEN

   4117   1 000005  ECC7 0006                            LDB,B6   @OPERATION,AUTO
          1 000007  E806                                 LDR,R6   ,B6
          1 000008  6D0B                                 CMV,R6   11
          1 000009  0981 0006                            BNE      s:4120,PREL

       44     4118    1                TRIES_LEFT = 1;

   4118   1 00000B  5C01                                 LDV,R5   1
          1 00000C  DF47 0014                            STR,R5   TRIES_LEFT,AUTO
          1 00000E  0F81 0007                            B        s:4121,PREL

       45     4119    1             ELSE
       46     4120    1                TRIES_LEFT = KO_RETRIES +1; /* First try is free                 */

   4120   1 000010  D800 0000 0000  xsym                 LDR,R5   KO_RETRIES
          1 000013  5E01                                 ADV,R5   1
          1 000014  DF47 0014                            STR,R5   TRIES_LEFT,AUTO

       47     4121    1   RETRY:    TRIES_LEFT = TRIES_LEFT -1;

   4121   1 000016  88C7 0014            RETRY           DEC      TRIES_LEFT,AUTO

       48     4122    2             DO CASE (OPERATION);

   4122   1 000018  ECC7 0006                            LDB,B6   @OPERATION,AUTO
          1 00001A  B806                                 LDR,R3   ,B6
          1 00001B  3D11                                 CMV,R3   17
          1 00001C  0281 00ED                            BGE      s:4188,PREL
          1 00001E  A830 0000 0024  01                   LDR,R2   s:4122+12,R3
          1 000021  83A0 0000 0035  01                   JMP      s:4124,R2
          1 000024       00D5                            DC       s:4188,PREL
          1 000025       0000                            DC       s:4124,PREL
          1 000026       0012                            DC       s:4128,PREL
          1 000027       0024                            DC       s:4132,PREL
          1 000028       0031                            DC       s:4136,PREL
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:20   
          1 000029       0090                            DC       s:4164,PREL
          1 00002A       004F                            DC       s:4144,PREL
          1 00002B       0083                            DC       s:4160,PREL
          1 00002C       009D                            DC       s:4168,PREL
          1 00002D       00AC                            DC       s:4172,PREL
          1 00002E       00B7                            DC       s:4176,PREL
          1 00002F       0076                            DC       s:4156,PREL
          1 000030       0040                            DC       s:4140,PREL
          1 000031       005C                            DC       s:4148,PREL
          1 000032       0069                            DC       s:4152,PREL
          1 000033       00D5                            DC       s:4188,PREL
          1 000034       00C9                            DC       s:4180,PREL

       49     4123    2                CASE(%OP_SETSEC#);         /* Set up sector                      */

       50     4124    2                  FPT_IO.CAS.FNC = %CO_CONFIG_B#;

   4124   1 000035  6C13                                 LDV,R6   19
          1 000036  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 000038       003F

       51     4125    2                  FPT_IO.DAS = BINBIT(DISK_SECTOR_NO *256 + DISK_SEC_SIZE,16);

   4125   1 000039  D800 0000 0000  xsym                 LDR,R5   DISK_SECTOR_NO
          1 00003C  5008                                 SOL,R5   8
          1 00003D  DA00 0000 0000  xsym                 ADD,R5   DISK_SEC_SIZE
          1 000040  DF47 000D                            STR,R5   FPT_IO+1,AUTO

       52     4126    2                  CALL DO_IO_OUT ALTRET(BAD_IO);

   4126   1 000042  E3C0 0121                            LNJ,B6   s:0,PREL
          1 000044       00D1                            DC       s:4188,PREL
          1 000045  0F81 00C4                            B        s:4188,PREL

       53     4127    2                CASE(%OP_SETTRKSID#);      /* Set up track & side                */

       54     4128    2                  FPT_IO.CAS.FNC = %CO_CONFIG_A#;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:21   

   4128   1 000047  6C11                                 LDV,R6   17
          1 000048  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 00004A       003F

       55     4129    2                  FPT_IO.DAS = BINBIT(DISK_TRACK_NO *256 + DISK_SIDE,16);

   4129   1 00004B  D800 0000 0000  xsym                 LDR,R5   DISK_TRACK_NO
          1 00004E  5008                                 SOL,R5   8
          1 00004F  DA00 0000 0000  xsym                 ADD,R5   DISK_SIDE
          1 000052  DF47 000D                            STR,R5   FPT_IO+1,AUTO

       56     4130    2                  CALL DO_IO_OUT ALTRET(BAD_IO);

   4130   1 000054  E3C0 010F                            LNJ,B6   s:0,PREL
          1 000056       00BF                            DC       s:4188,PREL
          1 000057  0F81 00B2                            B        s:4188,PREL

       57     4131    2                CASE(%OP_SEEK#);           /* Seek for track & sector            */

       58     4132    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;

   4132   1 000059  6C07                                 LDV,R6   7
          1 00005A  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 00005C       003F

       59     4133    2                  FPT_IO.DAS = %CT_SEEK#;

   4133   1 00005D  D870 0100                            LDR,R5   256,IMO
          1 00005F  DF47 000D                            STR,R5   FPT_IO+1,AUTO

       60     4134    2                  CALL DO_IO_OUT ALTRET(BAD_IO);

   4134   1 000061  E3C0 0102                            LNJ,B6   s:0,PREL
          1 000063       00B2                            DC       s:4188,PREL
          1 000064  0F81 00A5                            B        s:4188,PREL

PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:22   
       61     4135    2                CASE(%OP_SETIRANGEADDR#);  /* Set input range and address        */

       62     4136    2                  FPT_IOLD.BUF$ = DISK_BUF$;

   4136   1 000066  DC80 0000 0000  xsym                 LDB,B5   DISK_BUF$
          1 000069  DFC7 000F                            STB,B5   FPT_IOLD+1,AUTO

       63     4137    2                  FPT_IOLD.BUFSIZE = DISK_LEN;

   4137   1 00006B  E800 0000 0000  xsym                 LDR,R6   DISK_LEN
          1 00006E  EF47 0012                            STR,R6   FPT_IOLD+4,AUTO

       64     4138    2                  CALL DO_IOLD_IN ALTRET(BAD_IOLD);

   4138   1 000070  E3C0 0139                            LNJ,B6   s:0,PREL
          1 000072       00A3                            DC       s:4188,PREL
          1 000073  0F81 0096                            B        s:4188,PREL

       65     4139    2                CASE(%OP_SETORANGEADDR#);  /* Set output range and address       */

       66     4140    2                  FPT_IOLD.BUF$ = DISK_BUF$;

   4140   1 000075  DC80 0000 0000  xsym                 LDB,B5   DISK_BUF$
          1 000078  DFC7 000F                            STB,B5   FPT_IOLD+1,AUTO

       67     4141    2                  FPT_IOLD.BUFSIZE = DISK_LEN;

   4141   1 00007A  E800 0000 0000  xsym                 LDR,R6   DISK_LEN
          1 00007D  EF47 0012                            STR,R6   FPT_IOLD+4,AUTO

       68     4142    2                  CALL DO_IOLD_OUT ALTRET(BAD_IOLD);

   4142   1 00007F  E3C0 0153                            LNJ,B6   s:0,PREL
          1 000081       0094                            DC       s:4188,PREL
          1 000082  0F81 0087                            B        s:4188,PREL

       69     4143    2                CASE(%OP_EXREAD#);         /* READ:  Set task word & DO IT!      */
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:23   

       70     4144    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;

   4144   1 000084  6C07                                 LDV,R6   7
          1 000085  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 000087       003F

       71     4145    2                  FPT_IO.DAS = %CT_DATA#;

   4145   1 000088  D870 8100                            LDR,R5   -32512,IMO
          1 00008A  DF47 000D                            STR,R5   FPT_IO+1,AUTO

       72     4146    2                  CALL DO_IO_IN ALTRET(BAD_IO);

   4146   1 00008C  E3C0 00FA                            LNJ,B6   s:0,PREL
          1 00008E       0087                            DC       s:4188,PREL
          1 00008F  0F81 007A                            B        s:4188,PREL

       73     4147    2                CASE(%OP_EXDREAD#);        /* DIAG READ:  Set task word & DO IT! */

       74     4148    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;

   4148   1 000091  6C07                                 LDV,R6   7
          1 000092  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 000094       003F

       75     4149    2                  FPT_IO.DAS = %CT_DIAG_DATA#;

   4149   1 000095  D870 8700                            LDR,R5   -30976,IMO
          1 000097  DF47 000D                            STR,R5   FPT_IO+1,AUTO

       76     4150    2                  CALL DO_IO_IN ALTRET(BAD_IO);

   4150   1 000099  E3C0 00ED                            LNJ,B6   s:0,PREL
          1 00009B       007A                            DC       s:4188,PREL
          1 00009C  0F81 006D                            B        s:4188,PREL

PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:24   
       77     4151    2                CASE(%OP_EXKREAD#);        /* DELETED READ:  Set task word & DO  */

       78     4152    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;

   4152   1 00009E  6C07                                 LDV,R6   7
          1 00009F  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 0000A1       003F

       79     4153    2                  FPT_IO.DAS = %CT_DEL_DATA#;

   4153   1 0000A2  D870 8500                            LDR,R5   -31488,IMO
          1 0000A4  DF47 000D                            STR,R5   FPT_IO+1,AUTO

       80     4154    2                  CALL DO_IO_IN ALTRET(BAD_IO);

   4154   1 0000A6  E3C0 00E0                            LNJ,B6   s:0,PREL
          1 0000A8       006D                            DC       s:4188,PREL
          1 0000A9  0F81 0060                            B        s:4188,PREL

       81     4155    2                CASE(%OP_EXVERIFY#);       /* VERIFY:  Set task word & DO IT!    */

       82     4156    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;

   4156   1 0000AB  6C07                                 LDV,R6   7
          1 0000AC  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 0000AE       003F

       83     4157    2                  FPT_IO.DAS = %CT_DATA#;

   4157   1 0000AF  D870 8100                            LDR,R5   -32512,IMO
          1 0000B1  DF47 000D                            STR,R5   FPT_IO+1,AUTO

       84     4158    2                  CALL DO_IO_IN ALTRET(BAD_IO);

   4158   1 0000B3  E3C0 00D3                            LNJ,B6   s:0,PREL
          1 0000B5       0060                            DC       s:4188,PREL
          1 0000B6  0F81 0053                            B        s:4188,PREL
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:25   

       85     4159    2                CASE(%OP_EXWRITE#);        /* WRITE:  Set task word & DO IT!     */

       86     4160    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;

   4160   1 0000B8  6C07                                 LDV,R6   7
          1 0000B9  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 0000BB       003F

       87     4161    2                  FPT_IO.DAS = %CT_DATA#;

   4161   1 0000BC  D870 8100                            LDR,R5   -32512,IMO
          1 0000BE  DF47 000D                            STR,R5   FPT_IO+1,AUTO

       88     4162    2                  CALL DO_IO_OUT ALTRET(BAD_IO);

   4162   1 0000C0  E3C0 00A3                            LNJ,B6   s:0,PREL
          1 0000C2       0053                            DC       s:4188,PREL
          1 0000C3  0F81 0046                            B        s:4188,PREL

       89     4163    2                CASE(%OP_EXVINIT#);        /* VINIT:  Set task word & DO IT!     */

       90     4164    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;

   4164   1 0000C5  6C07                                 LDV,R6   7
          1 0000C6  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 0000C8       003F

       91     4165    2                  FPT_IO.DAS = %CT_FORMAT_ID#;

   4165   1 0000C9  D870 8400                            LDR,R5   -31744,IMO
          1 0000CB  DF47 000D                            STR,R5   FPT_IO+1,AUTO

       92     4166    2                  CALL DO_IO_OUT ALTRET(BAD_IO);

   4166   1 0000CD  E3C0 0096                            LNJ,B6   s:0,PREL
          1 0000CF       0046                            DC       s:4188,PREL
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:26   
          1 0000D0  0F81 0039                            B        s:4188,PREL

       93     4167    2                CASE(%OP_KILLINT#);        /* Kill interrupts                    */

       94     4168    2                  FPT_IO.CAS.FNC = %CO_INTRP_CTRL#;

   4168   1 0000D2  6C03                                 LDV,R6   3
          1 0000D3  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 0000D5       003F

       95     4169    2                  FPT_IO.DAS = BINBIT(KO_CPU_CHAN*64 + 0,16);

   4169   1 0000D6  D800 0000 0000  xsym                 LDR,R5   KO_CPU_CHAN
          1 0000D9  5006                                 SOL,R5   6
          1 0000DA  DF47 000D                            STR,R5   FPT_IO+1,AUTO

       96     4170    2                  CALL DO_IO_OUT ALTRET (BAD_IO);

   4170   1 0000DC  E3C0 0087                            LNJ,B6   s:0,PREL
          1 0000DE       0037                            DC       s:4188,PREL
          1 0000DF  0F81 002A                            B        s:4188,PREL

       97     4171    2                CASE(%OP_CALIBRATE#);      /* Calibrate the drive                */

       98     4172    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;

   4172   1 0000E1  6C07                                 LDV,R6   7
          1 0000E2  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 0000E4       003F

       99     4173    2                  FPT_IO.DAS = %CT_RECALIBRATE#;

   4173   1 0000E5  8747 000D                            CL       FPT_IO+1,AUTO

      100     4174    2                  CALL DO_IO_OUT ALTRET (BAD_IO);

   4174   1 0000E7  E3C0 007C                            LNJ,B6   s:0,PREL
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:27   
          1 0000E9       002C                            DC       s:4188,PREL
          1 0000EA  0F81 001F                            B        s:4188,PREL

      101     4175    2                CASE(%OP_SETINT#);         /* Set up interrupt level             */

      102     4176    2                  FPT_IO.CAS.FNC = %CO_INTRP_CTRL#;

   4176   1 0000EC  6C03                                 LDV,R6   3
          1 0000ED  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 0000EF       003F

      103     4177    2                  FPT_IO.DAS = BINBIT(KO_CPU_CHAN*64 + KO_INTERRUPT_LEVEL,16);

   4177   1 0000F0  D800 0000 0000  xsym                 LDR,R5   KO_CPU_CHAN
          1 0000F3  5006                                 SOL,R5   6
          1 0000F4  DA00 0000 0000  xsym                 ADD,R5   KO_INTERRUPT_LEVEL
          1 0000F7  DF47 000D                            STR,R5   FPT_IO+1,AUTO

      104     4178    2                  CALL DO_IO_OUT ALTRET (BAD_IO);

   4178   1 0000F9  E3C0 006A                            LNJ,B6   s:0,PREL
          1 0000FB       001A                            DC       s:4188,PREL
          1 0000FC  0F81 000D                            B        s:4188,PREL

      105     4179    2                CASE(%OP_GET_DTYPE#);      /* Fetch device type code             */

      106     4180    2                  FPT_IO.CAS.FNC = %CI_DEV_ID#;

   4180   1 0000FE  6C26                                 LDV,R6   38
          1 0000FF  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 000101       003F

      107     4181    2                  CALL DO_IO_IN ALTRET (BAD_IO);

   4181   1 000102  E3C0 0084                            LNJ,B6   s:0,PREL
          1 000104       0011                            DC       s:4188,PREL

PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:28   
      108     4182    2                  PARAM_1B = FPT_IO.DAS;

   4182   1 000105  ECC7 0008                            LDB,B6   @PARAM_1U,AUTO
          1 000107  E847 000D                            LDR,R6   FPT_IO+1,AUTO
          1 000109  EF06                                 STR,R6   ,B6

      109     4183    2                END;

      110     4184        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:29   
      111     4185        /**/
      112     4186        /*  It all worked OK.                                                         */
      113     4187        /**/
      114     4188    1             IF ADDR(RETURN_STATUS) ~= ADDR(NIL) THEN

   4188   1 00010A  ECC7 000A                            LDB,B6   @RETURN_STATUS,AUTO
          1 00010C  8DD6                                 CMN      B6
          1 00010D  0901 0004                            BE       s:4190,PREL

      115     4189    1                RETURN_STATUS = DEV_STATUS;

   4189   1 00010F  E847 0015                            LDR,R6   DEV_STATUS,AUTO
          1 000111  EF06                                 STR,R6   ,B6

      116     4190    1             RETURN;

   4190   1 000112  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

   4188   1                              BAD_IOLD        null
   4188   1                              BAD_IO          null
      117     4191        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:30   
      118     4192    1   BAD_IOLD: ;                             /* Error on IOLD instruction          */
      119     4193    1   BAD_IO:   ;                             /* Error on IO instruction            */
      120     4194        /*  Stash status so we will later know WHY we failed.  */
      121     4195    1             OLD_STATUS = DEV_STATUS;

   4195   1 000115  E847 0015            BAD_IO          LDR,R6   DEV_STATUS,AUTO
          1 000117  EF47 0016                            STR,R6   OLD_STATUS,AUTO

      122     4196        /*  Some errors require a CALIBRATE command to clear the error status.        */
      123     4197    1             IF DEV_STATUS.DEV_FAULT

   4197   1 000119  82C7 0015                            LB,'0400'X        DEV_STATUS,AUTO
   4197   1 00011B       0400
          1 00011C  0501 0006                            BBT      s:4200,PREL
          1 00011E  82C7 0015                            LB,'0020'X        DEV_STATUS,AUTO
          1 000120       0020
          1 000121  0581 000A                            BBF      s:4201,PREL

      124     4198    1                OR DEV_STATUS.SEEK_ERROR THEN
      125     4199    2                DO;

      126     4200    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;

   4200   1 000123  5C07                                 LDV,R5   7
          1 000124  DAC7 000C                            SRM,R5,'003F'X    FPT_IO,AUTO
          1 000126       003F

      127     4201    2                  FPT_IO.DAS = %CT_RECALIBRATE#;

   4201   1 000127  8747 000D                            CL       FPT_IO+1,AUTO

      128     4202    2                  CALL DO_IO_OUT ALTRET(IGNORE_ALT1);

   4202   1 000129  E3C0 003A                            LNJ,B6   s:0,PREL
          1 00012B       0001                            DC       s:4201,PREL

   4201   1                              IGNORE_ALT1     null
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:31   
      129     4203    2   IGNORE_ALT1:   ;
      130     4204    2                  END;

      131     4205        /*  If there is still some error status, try a thereputic SEEK command.       */
      132     4206    1             IF DEV_STATUS & ERRMASK_STATUS THEN

   4206   1 00012C  E847 0015            IGNORE_ALT1     LDR,R6   DEV_STATUS,AUTO
          1 00012E  E500 0000 0000  xsym                 AND,R6   ERRMASK_STATUS
          1 000131  6901 000C                            BEZ,R6   s:4209,PREL

      133     4207    2                DO;

      134     4208    2                  FPT_IO.CAS.FNC = %CO_TASK_WORD#;

   4208   1 000133  6C07                                 LDV,R6   7
          1 000134  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 000136       003F

      135     4209    2                  FPT_IO.DAS = %CT_SEEK#;

   4209   1 000137  D870 0100                            LDR,R5   256,IMO
          1 000139  DF47 000D                            STR,R5   FPT_IO+1,AUTO

      136     4210    2                  CALL DO_IO_OUT ALTRET(IGNORE_ALT2);

   4210   1 00013B  E3C0 0028                            LNJ,B6   s:0,PREL
          1 00013D       0001                            DC       s:4209,PREL

   4209   1                              IGNORE_ALT2     null
      137     4211    2   IGNORE_ALT2:   ;
      138     4212    2                  END;

      139     4213        /*  Hit the controller with an INITIALIZE control word.  This re-calibrates   */
      140     4214        /*  and also disables interrupts.                                             */
      141     4215    1             IF DEV_STATUS & ERRMASK_STATUS THEN

   4215   1 00013E  E847 0015            IGNORE_ALT2     LDR,R6   DEV_STATUS,AUTO
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:32   
          1 000140  E500 0000 0000  xsym                 AND,R6   ERRMASK_STATUS
          1 000143  6901 000C                            BEZ,R6   s:4218,PREL

      142     4216    2                DO;

      143     4217    2                  FPT_IO.CAS.FNC = %CO_CTRL_WORD#;

   4217   1 000145  6C01                                 LDV,R6   1
          1 000146  EAC7 000C                            SRM,R6,'003F'X    FPT_IO,AUTO
          1 000148       003F

      144     4218    2                  FPT_IO.DAS = %CW_INITIALIZE#;

   4218   1 000149  D870 8000                            LDR,R5   -32768,IMO
          1 00014B  DF47 000D                            STR,R5   FPT_IO+1,AUTO

      145     4219    2                  CALL DO_IO_OUT ALTRET(IGNORE_ALT3);

   4219   1 00014D  E3C0 0016                            LNJ,B6   s:0,PREL
          1 00014F       0001                            DC       s:4218,PREL

   4218   1                              IGNORE_ALT3     null
      146     4220    2   IGNORE_ALT3:   ;
      147     4221    2                  END;

      148     4222        /*  Consider giving the operation another try.                                */
      149     4223    1             IF TRIES_LEFT > 0 THEN

   4223   1 000150  E847 0014            IGNORE_ALT3     LDR,R6   TRIES_LEFT,AUTO
          1 000152  6A81 0006                            BLEZ,R6  s:4223,PREL

      150     4224    2                DO;                        /* Do a retry                         */

      151     4225    2                  DISK_RETRIES = DISK_RETRIES +1;

   4225   1 000154  8A80 0000 0000  xsym                 INC      DISK_RETRIES

PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:33   
      152     4226    2                  GOTO RETRY;

   4226   1 000157  0F81 FEBE                            B        s:4121,PREL

   4223   1                              DONT_RETRY      null
      153     4227    2                  END;
      154     4228    1   DONT_RETRY: ;
      155     4229        /*  Stuff status fields so caller knows what went wrong.                      */
      156     4230    1             IF ADDR(RETURN_STATUS) ~= ADDR(NIL) THEN

   4230   1 000159  ECC7 000A            DONT_RETRY      LDB,B6   @RETURN_STATUS,AUTO
          1 00015B  8DD6                                 CMN      B6
          1 00015C  0901 0004                            BE       s:4232,PREL

      157     4231    1                RETURN_STATUS = OLD_STATUS;

   4231   1 00015E  D847 0016                            LDR,R5   OLD_STATUS,AUTO
          1 000160  DF06                                 STR,R5   ,B6

      158     4232    1             ALTRETURN;

   4232   1 000161  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      159     4233        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:34   
      160     4234        /**/
      161     4235        /*  Common setup for OUTPUT IO instruction.  Also, do it.  */
      162     4236        /**/
      163     4237    1   DO_IO_OUT:  PROC ALTRET;

   4237   1 000164  EFC7 0018            DO_IO_OUT       STB,B6   OLD_STATUS+2,AUTO

      164     4238    2              FPT_IO.CAS.CHN = CHANNEL;

   4238   1 000166  DCC7 0004                            LDB,B5   @CHANNEL,AUTO
          1 000168  E805                                 LDR,R6   ,B5
          1 000169  6006                                 SOL,R6   6
          1 00016A  EAC7 000C                            SRM,R6,'FFC0'X    FPT_IO,AUTO
          1 00016C       FFC0

      165     4239    2              FPT_IO.CAS.XCHN.OUTPUT = '1'B;

   4239   1 00016D  8947 000C                            LBT,'0040'X       FPT_IO,AUTO
   4239   1 00016F       0040

      166     4240    2   RETRY:     CALL GHH$IO (FPT_IO) ALTRET(RETRY);

   4240   1 000170  EBC7 000C            RETRY           LAB,B6   FPT_IO,AUTO
          1 000172  EFC7 001E                            STB,B6   SECS_WAITED+2,AUTO
          1 000174  BBC7 001E                            LAB,B3   SECS_WAITED+2,AUTO
          1 000176  CBF0 0100                            LAB,B4   256,IMO
          1 000178  E380 0000 0000  xent                 LNJ,B6   GHH$IO
          1 00017B       FFF5                            DC       s:4240,PREL

      167     4241    2              CALL AWAIT_COMPLETION ALTRET(BAD_NEWS);

   4241   1 00017C  E3C0 007F                            LNJ,B6   s:0,PREL
          1 00017E       0005                            DC       s:4243,PREL

      168     4242    2              RETURN;

   4242   1 00017F  ECC7 0018                            LDB,B6   OLD_STATUS+2,AUTO
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:35   
          1 000181  C3C6 0001                            LNJ,B4   1,B6

      169     4243    2   BAD_NEWS:  ALTRETURN;

   4243   1 000183  ECC7 0018            BAD_NEWS        LDB,B6   OLD_STATUS+2,AUTO
          1 000185  B806                                 LDR,R3   ,B6
          1 000186  C3B6                                 LNJ,B4   ,B6,R3

      170     4244
      171     4245    2   END DO_IO_OUT;
      172     4246        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:36   
      173     4247        /**/
      174     4248        /*  Common setup for INPUT IO instruction.  Also, do it.  */
      175     4249        /**/
      176     4250    1   DO_IO_IN:  PROC ALTRET;

   4250   1 000187  EFC7 0018            DO_IO_IN        STB,B6   OLD_STATUS+2,AUTO

      177     4251    2              FPT_IO.CAS.CHN = CHANNEL;

   4251   1 000189  DCC7 0004                            LDB,B5   @CHANNEL,AUTO
          1 00018B  E805                                 LDR,R6   ,B5
          1 00018C  6006                                 SOL,R6   6
          1 00018D  EAC7 000C                            SRM,R6,'FFC0'X    FPT_IO,AUTO
          1 00018F       FFC0

      178     4252    2              FPT_IO.CAS.XCHN.OUTPUT = '0'B;

   4252   1 000190  8847 000C                            LBF,'0040'X       FPT_IO,AUTO
   4252   1 000192       0040

      179     4253    2   RETRY:     CALL GHH$IO_IN (FPT_IO) ALTRET(RETRY);

   4253   1 000193  EBC7 000C            RETRY           LAB,B6   FPT_IO,AUTO
          1 000195  EFC7 001E                            STB,B6   SECS_WAITED+2,AUTO
          1 000197  BBC7 001E                            LAB,B3   SECS_WAITED+2,AUTO
          1 000199  CBF0 0100                            LAB,B4   256,IMO
          1 00019B  E380 0000 0000  xent                 LNJ,B6   GHH$IO_IN
          1 00019E       FFF5                            DC       s:4253,PREL

      180     4254    2              CALL AWAIT_COMPLETION ALTRET(BAD_NEWS);

   4254   1 00019F  E3C0 005C                            LNJ,B6   s:0,PREL
          1 0001A1       0005                            DC       s:4256,PREL

      181     4255    2              RETURN;

   4255   1 0001A2  ECC7 0018                            LDB,B6   OLD_STATUS+2,AUTO
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:37   
          1 0001A4  C3C6 0001                            LNJ,B4   1,B6

      182     4256    2   BAD_NEWS:  ALTRETURN;

   4256   1 0001A6  ECC7 0018            BAD_NEWS        LDB,B6   OLD_STATUS+2,AUTO
          1 0001A8  B806                                 LDR,R3   ,B6
          1 0001A9  C3B6                                 LNJ,B4   ,B6,R3

      183     4257
      184     4258    2   END DO_IO_IN;
      185     4259        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:38   
      186     4260        /**/
      187     4261        /*  Common setup for INPUT IOLD instruction.  Also, do it.  */
      188     4262        /**/
      189     4263    1   DO_IOLD_IN:  PROC ALTRET;

   4263   1 0001AA  EFC7 0018            DO_IOLD_IN      STB,B6   OLD_STATUS+2,AUTO

      190     4264    2              FPT_IOLD.FNC = 9;

   4264   1 0001AC  6C09                                 LDV,R6   9
          1 0001AD  EAC7 000E                            SRM,R6,'003F'X    FPT_IOLD,AUTO
          1 0001AF       003F

      191     4265    2              FPT_IOLD.BYTX = 0;

   4265   1 0001B0  8747 0011                            CL       FPT_IOLD+3,AUTO

      192     4266    2              FPT_IOLD.CHN = CHANNEL;

   4266   1 0001B2  DCC7 0004                            LDB,B5   @CHANNEL,AUTO
          1 0001B4  D805                                 LDR,R5   ,B5
          1 0001B5  5006                                 SOL,R5   6
          1 0001B6  DAC7 000E                            SRM,R5,'FFC0'X    FPT_IOLD,AUTO
          1 0001B8       FFC0

      193     4267    2              FPT_IOLD.XCHN.OUTPUT = '0'B;

   4267   1 0001B9  8847 000E                            LBF,'0040'X       FPT_IOLD,AUTO
   4267   1 0001BB       0040

      194     4268    2   RETRY:     CALL GHH$IOLD (FPT_IOLD) ALTRET(RETRY);

   4268   1 0001BC  EBC7 000E            RETRY           LAB,B6   FPT_IOLD,AUTO
          1 0001BE  EFC7 001E                            STB,B6   SECS_WAITED+2,AUTO
          1 0001C0  BBC7 001E                            LAB,B3   SECS_WAITED+2,AUTO
          1 0001C2  CBF0 0100                            LAB,B4   256,IMO
          1 0001C4  E380 0000 0000  xent                 LNJ,B6   GHH$IOLD
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:39   
          1 0001C7       FFF5                            DC       s:4268,PREL

      195     4269    2              CALL AWAIT_COMPLETION ALTRET(BAD_NEWS);

   4269   1 0001C8  E3C0 0033                            LNJ,B6   s:0,PREL
          1 0001CA       0005                            DC       s:4271,PREL

      196     4270    2              RETURN;

   4270   1 0001CB  ECC7 0018                            LDB,B6   OLD_STATUS+2,AUTO
          1 0001CD  C3C6 0001                            LNJ,B4   1,B6

      197     4271    2   BAD_NEWS:  ALTRETURN;

   4271   1 0001CF  ECC7 0018            BAD_NEWS        LDB,B6   OLD_STATUS+2,AUTO
          1 0001D1  B806                                 LDR,R3   ,B6
          1 0001D2  C3B6                                 LNJ,B4   ,B6,R3

      198     4272
      199     4273    2   END DO_IOLD_IN;
      200     4274        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:40   
      201     4275        /**/
      202     4276        /*  Common setup for OUTPUT IOLD instruction.  Also, do it.  */
      203     4277        /**/
      204     4278    1   DO_IOLD_OUT:  PROC ALTRET;

   4278   1 0001D3  EFC7 0018            DO_IOLD_OUT     STB,B6   OLD_STATUS+2,AUTO

      205     4279    2              FPT_IOLD.FNC = 9;

   4279   1 0001D5  6C09                                 LDV,R6   9
          1 0001D6  EAC7 000E                            SRM,R6,'003F'X    FPT_IOLD,AUTO
          1 0001D8       003F

      206     4280    2              FPT_IOLD.BYTX = 0;

   4280   1 0001D9  8747 0011                            CL       FPT_IOLD+3,AUTO

      207     4281    2              FPT_IOLD.CHN = CHANNEL;

   4281   1 0001DB  DCC7 0004                            LDB,B5   @CHANNEL,AUTO
          1 0001DD  D805                                 LDR,R5   ,B5
          1 0001DE  5006                                 SOL,R5   6
          1 0001DF  DAC7 000E                            SRM,R5,'FFC0'X    FPT_IOLD,AUTO
          1 0001E1       FFC0

      208     4282    2              FPT_IOLD.XCHN.OUTPUT = '1'B;

   4282   1 0001E2  8947 000E                            LBT,'0040'X       FPT_IOLD,AUTO
   4282   1 0001E4       0040

      209     4283    2   RETRY:     CALL GHH$IOLD (FPT_IOLD) ALTRET(RETRY);

   4283   1 0001E5  EBC7 000E            RETRY           LAB,B6   FPT_IOLD,AUTO
          1 0001E7  EFC7 001E                            STB,B6   SECS_WAITED+2,AUTO
          1 0001E9  BBC7 001E                            LAB,B3   SECS_WAITED+2,AUTO
          1 0001EB  CBF0 0100                            LAB,B4   256,IMO
          1 0001ED  E380 0000 0000  xent                 LNJ,B6   GHH$IOLD
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:41   
          1 0001F0       FFF5                            DC       s:4283,PREL

      210     4284    2              CALL AWAIT_COMPLETION ALTRET(BAD_NEWS);

   4284   1 0001F1  E3C0 000A                            LNJ,B6   s:0,PREL
          1 0001F3       0005                            DC       s:4286,PREL

      211     4285    2              RETURN;

   4285   1 0001F4  ECC7 0018                            LDB,B6   OLD_STATUS+2,AUTO
          1 0001F6  C3C6 0001                            LNJ,B4   1,B6

      212     4286    2   BAD_NEWS:  ALTRETURN;

   4286   1 0001F8  ECC7 0018            BAD_NEWS        LDB,B6   OLD_STATUS+2,AUTO
          1 0001FA  B806                                 LDR,R3   ,B6
          1 0001FB  C3B6                                 LNJ,B4   ,B6,R3

      213     4287
      214     4288    2   END DO_IOLD_OUT;
      215     4289        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:42   
      216     4290        /**/
      217     4291        /*  Wait until previous IO or IOLD instruction completes.                     */
      218     4292        /*N*  PIGLET does not currently use interrupts for diskette I/O.  It is       */
      219     4293        /*    intended that a later version wil use interrupts.  A handy way to       */
      220     4294        /*    do this would be place a call to M$WAIT here, and get kicked off        */
      221     4295        /*    it by the interrupt.                                                    */
      222     4296        /*                                                                            */
      223     4297        /*    In the meantime, we must do something to prevent us from sucking        */
      224     4298        /*    up too much CPU time while waiting for the device to complete.          */
      225     4299        /*    If the device isn't ready IMMEDIATELY, we M$WAIT for a short while      */
      226     4300        /*    and check the status again.  While this is far from optimum, it         */
      227     4301        /*    does allow us to give away some MIPS that we aren't using now.          */
      228     4302        /*                                                                            */
      229     4303        /*  After the I/O is complete, check the status for success and gripe         */
      230     4304        /*  bitterly if it failed.                                                    */
      231     4305        /**/
      232     4306    1   AWAIT_COMPLETION:  PROC ALTRET;

   4306   1 0001FC  EFC7 001A            AWAIT_COMPLETIONSTB,B6   OLD_STATUS+4,AUTO

      233     4307        /**/
      234     4308        /*  AUTO  */
      235     4309        /**/
      236     4310    2   DCL SECS_WAITED SBIN;
      237     4311        %EJECT;
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:43   
      238     4312        /**/
      239     4313        /*  Wait until the I/O completes.                                             */
      240     4314        /**/
      241     4315    2              SECS_WAITED = 0;

   4315   1 0001FE  8747 001C                            CL       SECS_WAITED,AUTO

   4315   1                              ENQUIRE_STATUS  null
      242     4316    2   ENQUIRE_STATUS: ;
      243     4317    2              CALL KOP$GET_STATUS (CHANNEL,DEV_STATUS) ALTRET(BAD_NEWS);

   4317   1 000200  EBC7 0015            ENQUIRE_STATUS  LAB,B6   DEV_STATUS,AUTO
          1 000202  EFC7 0020                            STB,B6   SECS_WAITED+4,AUTO
          1 000204  DCC7 0004                            LDB,B5   @CHANNEL,AUTO
          1 000206  DFC7 001E                            STB,B5   SECS_WAITED+2,AUTO
          1 000208  BBC7 001E                            LAB,B3   SECS_WAITED+2,AUTO
          1 00020A  CBF0 0200                            LAB,B4   512,IMO
          1 00020C  E380 0000 0000  xent                 LNJ,B6   KOP$GET_STATUS
          1 00020F       0033                            DC       s:4337,PREL

      244     4318    2              IF DEV_STATUS = %DS_DEVICE_BUSY# THEN

   4318   1 000210  E847 0015                            LDR,R6   DEV_STATUS,AUTO
          1 000212  E970 0006                            CMR,R6   6,IMO
          1 000214  0981 001D                            BNE      s:4331,PREL

      245     4319    3                 DO;

      246     4320    3                   IF SECS_WAITED >= SECS2TIMEOUT THEN

   4320   1 000216  D847 001C                            LDR,R5   SECS_WAITED,AUTO
          1 000218  5801 0008                            BLZ,R5   s:4324,PREL
          1 00021A  D900 0000 0000  xsym                 CMR,R5   SECS2TIMEOUT
          1 00021D  0201 0003                            BL       s:4324,PREL

      247     4321    4                      DO;

PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:44   
      248     4322    4                        GOTO BAD_NEWS;

   4322   1 00021F  0F81 0022                            B        s:4337,PREL

      249     4323    4                        END;
      250     4324    3                   CALL KOU$WAITSECS (SECS2WAIT) ALTRET(MONERR);

   4324   1 000221  BB80 0000 0000  02                   LAB,B3   0
          1 000224  CBF0 0100                            LAB,B4   256,IMO
          1 000226  E380 0000 0000  xent                 LNJ,B6   KOU$WAITSECS
          1 000229       0019                            DC       s:4337,PREL

      251     4325    3                   SECS_WAITED = SECS_WAITED + SECS2WAIT;

   4325   1 00022A  E847 001C                            LDR,R6   SECS_WAITED,AUTO
          1 00022C  EA00 0000 0000  xsym                 ADD,R6   SECS2WAIT
          1 00022F  EF47 001C                            STR,R6   SECS_WAITED,AUTO

      252     4326    3                   GOTO ENQUIRE_STATUS;

   4326   1 000231  0FCF                                 B        s:4315,SPREL

      253     4327    3                   END;
      254     4328        /**/
      255     4329        /*  Take the ALTRET if the completed I/O bit the big one.  */
      256     4330        /**/
      257     4331    2              CALL KOP$CHECK_STATUS (DEV_STATUS) ALTRET(BAD_NEWS);

   4331   1 000232  EBC7 0015                            LAB,B6   DEV_STATUS,AUTO
          1 000234  EFC7 001E                            STB,B6   SECS_WAITED+2,AUTO
          1 000236  BBC7 001E                            LAB,B3   SECS_WAITED+2,AUTO
          1 000238  CBF0 0100                            LAB,B4   256,IMO
          1 00023A  E380 0000 0000  xent                 LNJ,B6   KOP$CHECK_STATUS
          1 00023D       0005                            DC       s:4337,PREL

      258     4332        /**/
      259     4333        /*  All done!  */
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:45   
      260     4334        /**/
      261     4335    2              RETURN;

   4335   1 00023E  ECC7 001A                            LDB,B6   OLD_STATUS+4,AUTO
          1 000240  C3C6 0001                            LNJ,B4   1,B6

      262     4336        /**/
      263     4337    2   BAD_NEWS:  ;

   4337   1                              BAD_NEWS        null
   4337   1                              MONERR          null
      264     4338    2   MONERR:    ;
      265     4339    2              ALTRETURN;

   4339   1 000242  ECC7 001A            MONERR          LDB,B6   OLD_STATUS+4,AUTO
          1 000244  B806                                 LDR,R3   ,B6
          1 000245  C3B6                                 LNJ,B4   ,B6,R3
      266     4340
      267     4341    2   END AWAIT_COMPLETION;
      268     4342        /**/
      269     4343    1             END KOP$PHYS_IO;
      270     4344        %EOD;

PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:46   
--  Include file information  --

   GH_HARDWARE_M.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KOP$PHYS_IO.
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:47   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CHANNEL                   6-0-0/w PTR         r     1 @OPERATION
     8-0-0/w PTR         r     1 @PARAM_1U                  A-0-0/w PTR         r     1 @RETURN_STATUS
    *0-0-0/w SBIN(16)    r     1 CHANNEL                   15-0-0/w STRC(16)    r     1 DEV_STATUS
     C-0-0/w STRC(32)    r     1 FPT_IO                     E-0-0/w STRC(80)    r     1 FPT_IOLD
    16-0-0/w STRC(16)    r     1 OLD_STATUS                *0-0-0/w SBIN(16)    r     1 OPERATION
    *0-0-0/w BIT (16)    r     1 PARAM_1B                  *0-0-0/w UBIN(16)    r     1 PARAM_1U
    *0-0-0/w STRC(16)    r     1 RETURN_STATUS             1C-0-0/w SBIN(16)    r     1 SECS_WAITED
    14-0-0/w SBIN(16)    r     1 TRIES_LEFT

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 DISK_BUF$                  0-0-0/w SBIN(16)    r     1 DISK_LEN
     0-0-0/w SBIN(16)    r     1 DISK_RETRIES               0-0-0/w SBIN(16)    r     1 DISK_SECTOR_NO
     0-0-0/w SBIN(16)    r     1 DISK_SEC_SIZE              0-0-0/w SBIN(16)    r     1 DISK_SIDE
     0-0-0/w SBIN(16)    r     1 DISK_TRACK_NO              0-0-0/w STRC(16)    r     1 ERRMASK_STATUS
     0-0-0/w PTR         r     1 HOST_BUF$                  0-0-0/w SBIN(16)    r     1 KO_CPU_CHAN
     0-0-0/w SBIN(16)    r     1 KO_INTERRUPT_LEVEL         0-0-0/w SBIN(16)    r     1 KO_RETRIES
     0-0-0/w UBIN(16)    r     1 SECS2TIMEOUT               0-0-0/w UBIN(16)    r     1 SECS2WAIT


   Procedure KOP$PHYS_IO requires 582 words for executable code.
   Procedure KOP$PHYS_IO requires 34 words of local(AUTO) storage.
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:48   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:49   
          MINI XREF LISTING

AWAIT_COMPLETION
      4306**PROC     4241--CALL     4254--CALL     4269--CALL     4284--CALL
BAD_IO
      4188**LABEL    4126--CALLALT  4130--CALLALT  4134--CALLALT  4146--CALLALT  4150--CALLALT  4154--CALLALT
      4158--CALLALT  4162--CALLALT  4166--CALLALT  4170--CALLALT  4174--CALLALT  4178--CALLALT  4181--CALLALT
BAD_IOLD
      4188**LABEL    4138--CALLALT  4142--CALLALT
BAD_NEWS IN PROCEDURE AWAIT_COMPLETION
      4337**LABEL    4317--CALLALT  4322--GOTO     4331--CALLALT
BAD_NEWS IN PROCEDURE DO_IOLD_IN
      4271**LABEL    4269--CALLALT
BAD_NEWS IN PROCEDURE DO_IOLD_OUT
      4286**LABEL    4284--CALLALT
BAD_NEWS IN PROCEDURE DO_IO_IN
      4256**LABEL    4254--CALLALT
BAD_NEWS IN PROCEDURE DO_IO_OUT
      4243**LABEL    4241--CALLALT
CHANNEL
      3864**DCL         7--PROC     4238>>ASSIGN   4251>>ASSIGN   4266>>ASSIGN   4281>>ASSIGN   4317<>CALL
DEV_STATUS
      4041**DCL      4189>>ASSIGN   4195>>ASSIGN   4206>>IF       4215>>IF       4317<>CALL     4318>>IF
      4331<>CALL
DEV_STATUS.DEV_FAULT
      4054**DCL      4197>>IF
DEV_STATUS.SEEK_ERROR
      4059**DCL      4197>>IF
DISK_BUF$
      3388**DCL      4136>>ASSIGN   4140>>ASSIGN
DISK_LEN
      3388**DCL      4137>>ASSIGN   4141>>ASSIGN
DISK_RETRIES
      3389**DCL      4225<<ASSIGN   4225>>ASSIGN
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:50   
DISK_SECTOR_NO
      3388**DCL      4125>>ASSIGN
DISK_SEC_SIZE
      3389**DCL      4125>>ASSIGN
DISK_SIDE
      3389**DCL      4129>>ASSIGN
DISK_TRACK_NO
      3389**DCL      4129>>ASSIGN
DO_IOLD_IN
      4263**PROC     4138--CALL
DO_IOLD_OUT
      4278**PROC     4142--CALL
DO_IO_IN
      4250**PROC     4146--CALL     4150--CALL     4154--CALL     4158--CALL     4181--CALL
DO_IO_OUT
      4237**PROC     4126--CALL     4130--CALL     4134--CALL     4162--CALL     4166--CALL     4170--CALL
      4174--CALL     4178--CALL     4202--CALL     4210--CALL     4219--CALL
ENQUIRE_STATUS IN PROCEDURE AWAIT_COMPLETION
      4315**LABEL    4326--GOTO
ERRMASK_STATUS
      3418**DCL      4206>>IF       4215>>IF
FPT_IO
      3991**DCL      4240<>CALL     4253<>CALL
FPT_IO.CAS.CHN
      3991**DCL      3991--REDEF    4238<<ASSIGN   4251<<ASSIGN
FPT_IO.CAS.FNC
      3992**DCL      4124<<ASSIGN   4128<<ASSIGN   4132<<ASSIGN   4144<<ASSIGN   4148<<ASSIGN   4152<<ASSIGN
      4156<<ASSIGN   4160<<ASSIGN   4164<<ASSIGN   4168<<ASSIGN   4172<<ASSIGN   4176<<ASSIGN   4180<<ASSIGN
      4200<<ASSIGN   4208<<ASSIGN   4217<<ASSIGN
FPT_IO.CAS.XCHN.OUTPUT
      3992**DCL      4239<<ASSIGN   4252<<ASSIGN
FPT_IO.DAS
      3992**DCL      3993--REDEF    3994--REDEF    4125<<ASSIGN   4129<<ASSIGN   4133<<ASSIGN   4145<<ASSIGN
      4149<<ASSIGN   4153<<ASSIGN   4157<<ASSIGN   4161<<ASSIGN   4165<<ASSIGN   4169<<ASSIGN   4173<<ASSIGN
      4177<<ASSIGN   4182>>ASSIGN   4201<<ASSIGN   4209<<ASSIGN   4218<<ASSIGN
FPT_IOLD
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:51   
      4007**DCL      4268<>CALL     4283<>CALL
FPT_IOLD.BUF$
      4008**DCL      4136<<ASSIGN   4140<<ASSIGN
FPT_IOLD.BUFSIZE
      4009**DCL      4137<<ASSIGN   4141<<ASSIGN
FPT_IOLD.BYTX
      4008**DCL      4265<<ASSIGN   4280<<ASSIGN
FPT_IOLD.CHN
      4007**DCL      4007--REDEF    4266<<ASSIGN   4281<<ASSIGN
FPT_IOLD.FNC
      4008**DCL      4264<<ASSIGN   4279<<ASSIGN
FPT_IOLD.XCHN.OUTPUT
      4008**DCL      4267<<ASSIGN   4282<<ASSIGN
GHH$IO
      3922**DCL-ENT  4240--CALL
GHH$IOLD
      3923**DCL-ENT  4268--CALL     4283--CALL
GHH$IO_IN
      3924**DCL-ENT  4253--CALL
HOST_BUF$
      3388**DCL      3588--IMP-PTR
IGNORE_ALT1
      4201**LABEL    4202--CALLALT
IGNORE_ALT2
      4209**LABEL    4210--CALLALT
IGNORE_ALT3
      4218**LABEL    4219--CALLALT
KH_CHNHI
      3171**DCL      3172--REDEF
KH_CHNLOW
      3172**DCL      3173--REDEF
KOP$CHECK_STATUS
      3948**DCL-ENT  4331--CALL
KOP$GET_STATUS
      3951**DCL-ENT  4317--CALL
KOU$WAITSECS
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:52   
      3974**DCL-ENT  4324--CALL
KO_CPU_CHAN
      3154**DCL      4169>>ASSIGN   4177>>ASSIGN
KO_INTERRUPT_LEVEL
      3154**DCL      4177>>ASSIGN
KO_RETRIES
      3155**DCL      4120>>ASSIGN
KP_MSG.TDATA
      3614**DCL      3615--REDEF    3616--REDEF    3621--REDEF    3635--REDEF    3640--REDEF    3644--REDEF
      3650--REDEF    3653--REDEF
MONERR IN PROCEDURE AWAIT_COMPLETION
      4337**LABEL    4324--CALLALT
OLD_STATUS
      4091**DCL      4195<<ASSIGN   4231>>ASSIGN
OPERATION
      3863**DCL         7--PROC     4117>>IF       4122>>DOCASE
PACK
      4011**DCL      4012--REDEF
PARAM_1B
      3866**DCL      4182<<ASSIGN
PARAM_1U
      3865**DCL         7--PROC     3866--REDEF    3867--REDEF
PIGLET_SEGMENT.BASE
      3508**DCL      3508--REDEF
RETRY
      4121**LABEL    4226--GOTO
RETRY IN PROCEDURE DO_IOLD_IN
      4268**LABEL    4268--CALLALT
RETRY IN PROCEDURE DO_IOLD_OUT
      4283**LABEL    4283--CALLALT
RETRY IN PROCEDURE DO_IO_IN
      4253**LABEL    4253--CALLALT
RETRY IN PROCEDURE DO_IO_OUT
      4240**LABEL    4240--CALLALT
RETURN_STATUS
      3893**DCL         7--PROC     4188--IF       4189<<ASSIGN   4230--IF       4231<<ASSIGN
PL6.E3A0      #001=KOP$PHYS_IO File=KOP$PHYS_IO.:E05TSI                          WED 07/30/97 01:15 Page:53   
SECS2TIMEOUT
      3156**DCL      4320>>IF
SECS2WAIT
      3156**DCL      4324<>CALL     4325>>ASSIGN
SECS_WAITED IN PROCEDURE AWAIT_COMPLETION
      4310**DCL      4315<<ASSIGN   4320>>IF       4325<<ASSIGN   4325>>ASSIGN
TRIES_LEFT
      4015**DCL      4118<<ASSIGN   4120<<ASSIGN   4121<<ASSIGN   4121>>ASSIGN   4223>>IF

PL6.E3A0      #002=KOP$INTERRUPT File=KOP$PHYS_IO.:E05TSI                        WED 07/30/97 01:16 Page:54   
      271        1        /*T***********************************************************/
      272        2        /*T*                                                         */
      273        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      274        4        /*T*                                                         */
      275        5        /*T***********************************************************/
      276        6        KOP$INTERRUPT: PROC ASYNC;
      277        7        /**/
      278        8        /*  This routine services interrupts for physical I/O on behalf of PIGLET.    */
      279        9        /*N* Device I/O is not yet interrupt-driven.  Stay tuned!                     */
      280       10        /**/
      281       11        /*  INCLUDE FILES  */
      282       12        /**/
      283       13        %INCLUDE KO_DATA_R;
      284     3760        /**/
      285     3761        /*  AUTO DATA  */
      286     3762        /**/
      287     3763    1   DCL SOME_DONE BIT(1) AUTO;
      288     3764        /**/
      289     3765        /*  ENTRY DCLS  */
      290     3766        /**/
      291     3767        %KO_ENTRIES (OMIT=KOP$INTERRUPT);
      292     3823        /**/
      293     3824        /*  STATIC  */
      294     3825        /**/
      295     3826        %FPT_INTRET (FPTN = FPT_INTRET,
      296     3827                     WAKEME = NO,               /* Don't wake unless event to report  */
      297     3828                     STCLASS = STATIC);
      298     3848        %EJECT;
PL6.E3A0      #002=KOP$INTERRUPT File=KOP$PHYS_IO.:E05TSI                        WED 07/30/97 01:16 Page:55   
      299     3849    1             SOME_DONE = '0'B;
      300     3850        /**/
      301     3851        /*  If some operations are completely done, kick the main routine  */
      302     3852        /**/
      303     3853    1             IF SOME_DONE
      304     3854    1              THEN
      305     3855    1                FPT_INTRET.V.EVENT = %EVENT_DISK_DONE#;
      306     3856    1              ELSE                         /* Nothing to bother main about       */
      307     3857    1                FPT_INTRET.V.EVENT = 0;
      308     3858    1             CALL M$INTRET (FPT_INTRET);   /* Return from interrupt              */
      309     3859    1   END KOP$INTERRUPT;
      310     3860        %EOD;

PL6.E3A0      #002=KOP$INTERRUPT File=KOP$PHYS_IO.:E05TSI                        WED 07/30/97 01:16 Page:56   
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KOP$INTERRUPT.

   Procedure KOP$INTERRUPT requires 30 words for executable code.
   Procedure KOP$INTERRUPT requires 6 words of local(AUTO) storage.

PL6.E3A0      #002=KOP$INTERRUPT File=KOP$PHYS_IO.:E05TSI                        WED 07/30/97 01:16 Page:57   

 Object Unit name= KOP$INTERRUPT                              File name= KOP$PHYS_IO.:E05TOU
 UTS= JUL 30 '97 01:16:01.84 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   DCB   even  none     0      0  M$HOST
    1   Data  even  none     7      7  KOP$INTERRUPT
    2   Proc  even  none    30     1E  KOP$INTERRUPT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes     Async       0  KOP$INTERRUPT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X6A_AAUTO
                       nStd      0 X6A_AARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KH_CHNHI                              KH_CHNLOW                             HOST_BUF$
     M$HOST                           r    G$ROS$
PL6.E3A0      #002=KOP$INTERRUPT File=KOP$PHYS_IO.:E05TSI                        WED 07/30/97 01:16 Page:58   


      271        1        /*T***********************************************************/
      272        2        /*T*                                                         */
      273        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      274        4        /*T*                                                         */
      275        5        /*T***********************************************************/
      276        6        KOP$INTERRUPT: PROC ASYNC;

      6   2 000000  D380 0000 0000  xent KOP$INTERRUPT   LNJ,B5   X6A_AAUTO
          2 000003       0006 0000                       DC       6,0

      277        7        /**/
      278        8        /*  This routine services interrupts for physical I/O on behalf of PIGLET.    */
      279        9        /*N* Device I/O is not yet interrupt-driven.  Stay tuned!                     */
      280       10        /**/
      281       11        /*  INCLUDE FILES  */
      282       12        /**/
      283       13        %INCLUDE KO_DATA_R;
      284     3760        /**/
      285     3761        /*  AUTO DATA  */
      286     3762        /**/
      287     3763    1   DCL SOME_DONE BIT(1) AUTO;
      288     3764        /**/
      289     3765        /*  ENTRY DCLS  */
      290     3766        /**/
      291     3767        %KO_ENTRIES (OMIT=KOP$INTERRUPT);
      292     3823        /**/
      293     3824        /*  STATIC  */
      294     3825        /**/
      295     3826        %FPT_INTRET (FPTN = FPT_INTRET,
      296     3827                     WAKEME = NO,               /* Don't wake unless event to report  */
      297     3828                     STCLASS = STATIC);
      298     3848        %EJECT;
PL6.E3A0      #002=KOP$INTERRUPT File=KOP$PHYS_IO.:E05TSI                        WED 07/30/97 01:16 Page:59   
      299     3849    1             SOME_DONE = '0'B;

   3849   2 000005  8747 0004                            CL       SOME_DONE,AUTO

      300     3850        /**/
      301     3851        /*  If some operations are completely done, kick the main routine  */
      302     3852        /**/
      303     3853    1             IF SOME_DONE

   3853   2 000007  89C7 0004                            CMZ      SOME_DONE,AUTO
          2 000009  0881 0007                            BAGE     s:3857,PREL

      304     3854    1              THEN
      305     3855    1                FPT_INTRET.V.EVENT = %EVENT_DISK_DONE#;

   3855   2 00000B  6C01                                 LDV,R6   1
          2 00000C  EF00 0000 0004  01                   STR,R6   FPT_INTRET+4
          2 00000F  0F81 0004                            B        s:3858,PREL

      306     3856    1              ELSE                         /* Nothing to bother main about       */
      307     3857    1                FPT_INTRET.V.EVENT = 0;

   3857   2 000011  8700 0000 0004  01                   CL       FPT_INTRET+4

      308     3858    1             CALL M$INTRET (FPT_INTRET);   /* Return from interrupt              */

   3858   2 000014  BB80 0000 0000  01                   LAB,B3   FPT_INTRET
          2 000017  B870 0440                            LDR,R3   1088,IMO
          2 000019  0001                                 MCL
          2 00001A       0000                            DC       s:3858+6,PREL

      309     3859    1   END KOP$INTERRUPT;

   3859   2 00001B  C380 0000 0000  xent                 LNJ,B4   X6A_AARET
      310     3860        %EOD;

PL6.E3A0      #002=KOP$INTERRUPT File=KOP$PHYS_IO.:E05TSI                        WED 07/30/97 01:16 Page:60   
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KOP$INTERRUPT.
PL6.E3A0      #002=KOP$INTERRUPT File=KOP$PHYS_IO.:E05TSI                        WED 07/30/97 01:16 Page:61   

 **** Variables and constants ****

  ****  Section 001  Data  KOP$INTERRUPT

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(112)   r     1 FPT_INTRET

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/b BIT         r     1 SOME_DONE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 HOST_BUF$


   Procedure KOP$INTERRUPT requires 30 words for executable code.
   Procedure KOP$INTERRUPT requires 6 words of local(AUTO) storage.
PL6.E3A0      #002=KOP$INTERRUPT File=KOP$PHYS_IO.:E05TSI                        WED 07/30/97 01:16 Page:62   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=KOP$INTERRUPT File=KOP$PHYS_IO.:E05TSI                        WED 07/30/97 01:16 Page:63   
          MINI XREF LISTING

FPT_INTRET
      3841**DCL      3858<>CALL
FPT_INTRET.V
      3845**DCL      3843--DCLINIT
FPT_INTRET.V.EVENT
      3845**DCL      3855<<ASSIGN   3857<<ASSIGN
HOST_BUF$
      3386**DCL      3586--IMP-PTR
KH_CHNHI
      3169**DCL      3170--REDEF
KH_CHNLOW
      3170**DCL      3171--REDEF
KP_MSG.TDATA
      3612**DCL      3613--REDEF    3614--REDEF    3619--REDEF    3633--REDEF    3638--REDEF    3642--REDEF
      3648--REDEF    3651--REDEF
M$INTRET
       167**DCL-ENT  3858--CALL
PIGLET_SEGMENT.BASE
      3506**DCL      3506--REDEF
SOME_DONE
      3763**DCL      3849<<ASSIGN   3853>>IF

PL6.E3A0      #003=KOP$INITIALIZE File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:64   
      311        1        /*T***********************************************************/
      312        2        /*T*                                                         */
      313        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      314        4        /*T*                                                         */
      315        5        /*T***********************************************************/
      316        6        KOP$INITIALIZE: PROC (CHANNEL,DEV_TYPE) ALTRET;
      317        7        /**/
      318        8        /*  This routine performs an initialize on the desired channel.               */
      319        9        /**/
      320       10        /*  INCLUDE FILES  */
      321       11        /**/
      322       12        %INCLUDE KO_DATA_R;
      323     3759        /**/
      324     3760        /*  PARAMETERS  */
      325     3761        /**/
      326     3762    1   DCL CHANNEL UBIN WORD;
      327     3763    1   DCL DEV_TYPE UBIN WORD;
      328     3764        /**/
      329     3765        /*  ENTRY DCLS  */
      330     3766        /**/
      331     3767        %KO_ENTRIES (OMIT=KOP$INITIALIZE);
      332     3823        /**/
      333     3824        /*  LOCAL AUTO  */
      334     3825        /**/
      335     3826        %KO_DEVICE_STATUS (NAME = STASHED_ERRMASK, STCLASS = AUTO);
      336     3876        %EJECT;
PL6.E3A0      #003=KOP$INITIALIZE File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:65   
      337     3877        /**/
      338     3878        /*  It's OK to have a drive that is not loaded with a diskette.  */
      339     3879        /**/
      340     3880    1             STASHED_ERRMASK = ERRMASK_STATUS;
      341     3881    1             ERRMASK_STATUS.NOT_READY = '0'B;
      342     3882        /**/
      343     3883        /*  Shut off interrupts, just in case they are on.  */
      344     3884        /**/
      345     3885    1             CALL KOP$PHYS_IO(CHANNEL,%OP_KILLINT#) ALTRET(AAARGH);
      346     3886        /**/
      347     3887        /*  Get the device type code, if the caller wants it.                         */
      348     3888        /**/
      349     3889    1             IF ADDR(DEV_TYPE) ~= ADDR(NIL) THEN
      350     3890    1                CALL KOP$PHYS_IO(CHANNEL,%OP_GET_DTYPE#,DEV_TYPE) ALTRET(AAARGH);
      351     3891        /**/
      352     3892        /*  Calibrate the drive.  (Seek to track zero).                               */
      353     3893        /**/
      354     3894    1             CALL KOP$PHYS_IO(CHANNEL,%OP_CALIBRATE#) ALTRET(AAARGH);
      355     3895        /**/
      356     3896        /*  Tell the drive its interrupt level for later use.  */
      357     3897        /*N* Interrupts are not yet being used! */
      358     3898        /*
      359     3899                  CALL KOP$PHYS_IO(CHANNEL,%OP_SETINT#) ALTRET(AAARGH);
      360     3900        */
      361     3901        /**/
      362     3902    1             ERRMASK_STATUS = STASHED_ERRMASK;
      363     3903    1             RETURN;
      364     3904        /**/
      365     3905    1   AAARGH:   ;
      366     3906    1             ERRMASK_STATUS = STASHED_ERRMASK;
      367     3907    1             ALTRETURN;
      368     3908        /**/
      369     3909    1   END KOP$INITIALIZE;
      370     3910        %EOD;

PL6.E3A0      #003=KOP$INITIALIZE File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:66   
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KOP$INITIALIZE.

   Procedure KOP$INITIALIZE requires 85 words for executable code.
   Procedure KOP$INITIALIZE requires 16 words of local(AUTO) storage.

PL6.E3A0      #003=KOP$INITIALIZE File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:67   

 Object Unit name= KOP$INITIALIZE                             File name= KOP$PHYS_IO.:E05TOU
 UTS= JUL 30 '97 01:16:20.64 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   DCB   even  none     0      0  M$HOST
    1   Proc  even  none    85     55  KOP$INITIALIZE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  KOP$INITIALIZE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       4 KOP$PHYS_IO
                       nStd      0 X6A_AUTO_2
                       nStd      0 X6A_ARET
                       nStd      0 X6A_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KH_CHNHI                              KH_CHNLOW                             HOST_BUF$
     ERRMASK_STATUS                        M$HOST                           r    G$ROS$
PL6.E3A0      #003=KOP$INITIALIZE File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:68   


      311        1        /*T***********************************************************/
      312        2        /*T*                                                         */
      313        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      314        4        /*T*                                                         */
      315        5        /*T***********************************************************/
      316        6        KOP$INITIALIZE: PROC (CHANNEL,DEV_TYPE) ALTRET;

      6   1 000000  D380 0000 0000  xent KOP$INITIALIZE  LNJ,B5   X6A_AUTO_2
          1 000003       0010 0002                       DC       16,2

      317        7        /**/
      318        8        /*  This routine performs an initialize on the desired channel.               */
      319        9        /**/
      320       10        /*  INCLUDE FILES  */
      321       11        /**/
      322       12        %INCLUDE KO_DATA_R;
      323     3759        /**/
      324     3760        /*  PARAMETERS  */
      325     3761        /**/
      326     3762    1   DCL CHANNEL UBIN WORD;
      327     3763    1   DCL DEV_TYPE UBIN WORD;
      328     3764        /**/
      329     3765        /*  ENTRY DCLS  */
      330     3766        /**/
      331     3767        %KO_ENTRIES (OMIT=KOP$INITIALIZE);
      332     3823        /**/
      333     3824        /*  LOCAL AUTO  */
      334     3825        /**/
      335     3826        %KO_DEVICE_STATUS (NAME = STASHED_ERRMASK, STCLASS = AUTO);
      336     3876        %EJECT;
PL6.E3A0      #003=KOP$INITIALIZE File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:69   
      337     3877        /**/
      338     3878        /*  It's OK to have a drive that is not loaded with a diskette.  */
      339     3879        /**/
      340     3880    1             STASHED_ERRMASK = ERRMASK_STATUS;

   3880   1 000005  E800 0000 0000  xsym                 LDR,R6   ERRMASK_STATUS
          1 000008  EF47 0008                            STR,R6   STASHED_ERRMASK,AUTO

      341     3881    1             ERRMASK_STATUS.NOT_READY = '0'B;

   3881   1 00000A  8800 0000 0000  xsym                 LBF,'8000'X       ERRMASK_STATUS
   3881   1 00000D       8000

      342     3882        /**/
      343     3883        /*  Shut off interrupts, just in case they are on.  */
      344     3884        /**/
      345     3885    1             CALL KOP$PHYS_IO(CHANNEL,%OP_KILLINT#) ALTRET(AAARGH);

   3885   1 00000E  EBF0 0008                            LAB,B6   8,IMO
          1 000010  EFC7 000C                            STB,B6   STASHED_ERRMASK+4,AUTO
          1 000012  DCC7 0004                            LDB,B5   @CHANNEL,AUTO
          1 000014  DFC7 000A                            STB,B5   STASHED_ERRMASK+2,AUTO
          1 000016  BBC7 000A                            LAB,B3   STASHED_ERRMASK+2,AUTO
          1 000018  CBF0 0200                            LAB,B4   512,IMO
          1 00001A  E380 0000 0000  xent                 LNJ,B6   KOP$PHYS_IO
          1 00001D       0030                            DC       s:3902,PREL

      346     3886        /**/
      347     3887        /*  Get the device type code, if the caller wants it.                         */
      348     3888        /**/
      349     3889    1             IF ADDR(DEV_TYPE) ~= ADDR(NIL) THEN

   3889   1 00001E  ECC7 0006                            LDB,B6   @DEV_TYPE,AUTO
          1 000020  8DD6                                 CMN      B6
          1 000021  0901 0013                            BE       s:3894,PREL

      350     3890    1                CALL KOP$PHYS_IO(CHANNEL,%OP_GET_DTYPE#,DEV_TYPE) ALTRET(AAARGH);
PL6.E3A0      #003=KOP$INITIALIZE File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:70   

   3890   1 000023  DBF0 0010                            LAB,B5   16,IMO
          1 000025  EFC7 000E                            STB,B6   STASHED_ERRMASK+6,AUTO
          1 000027  DFC7 000C                            STB,B5   STASHED_ERRMASK+4,AUTO
          1 000029  CCC7 0004                            LDB,B4   @CHANNEL,AUTO
          1 00002B  CFC7 000A                            STB,B4   STASHED_ERRMASK+2,AUTO
          1 00002D  BBC7 000A                            LAB,B3   STASHED_ERRMASK+2,AUTO
          1 00002F  CBF0 0300                            LAB,B4   768,IMO
          1 000031  E380 0000 0000  xent                 LNJ,B6   KOP$PHYS_IO
          1 000034       0019                            DC       s:3902,PREL

      351     3891        /**/
      352     3892        /*  Calibrate the drive.  (Seek to track zero).                               */
      353     3893        /**/
      354     3894    1             CALL KOP$PHYS_IO(CHANNEL,%OP_CALIBRATE#) ALTRET(AAARGH);

   3894   1 000035  EBF0 0009                            LAB,B6   9,IMO
          1 000037  EFC7 000C                            STB,B6   STASHED_ERRMASK+4,AUTO
          1 000039  DCC7 0004                            LDB,B5   @CHANNEL,AUTO
          1 00003B  DFC7 000A                            STB,B5   STASHED_ERRMASK+2,AUTO
          1 00003D  BBC7 000A                            LAB,B3   STASHED_ERRMASK+2,AUTO
          1 00003F  CBF0 0200                            LAB,B4   512,IMO
          1 000041  E380 0000 0000  xent                 LNJ,B6   KOP$PHYS_IO
          1 000044       0009                            DC       s:3902,PREL

      355     3895        /**/
      356     3896        /*  Tell the drive its interrupt level for later use.  */
      357     3897        /*N* Interrupts are not yet being used! */
      358     3898        /*
      359     3899                  CALL KOP$PHYS_IO(CHANNEL,%OP_SETINT#) ALTRET(AAARGH);
      360     3900        */
      361     3901        /**/
      362     3902    1             ERRMASK_STATUS = STASHED_ERRMASK;

   3902   1 000045  E847 0008                            LDR,R6   STASHED_ERRMASK,AUTO
          1 000047  EF00 0000 0000  xsym                 STR,R6   ERRMASK_STATUS

PL6.E3A0      #003=KOP$INITIALIZE File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:71   
      363     3903    1             RETURN;

   3903   1 00004A  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

   3902   1                              AAARGH          null
      364     3904        /**/
      365     3905    1   AAARGH:   ;
      366     3906    1             ERRMASK_STATUS = STASHED_ERRMASK;

   3906   1 00004D  E847 0008            AAARGH          LDR,R6   STASHED_ERRMASK,AUTO
          1 00004F  EF00 0000 0000  xsym                 STR,R6   ERRMASK_STATUS

      367     3907    1             ALTRETURN;

   3907   1 000052  C380 0000 0000  xent                 LNJ,B4   X6A_AALT
      368     3908        /**/
      369     3909    1   END KOP$INITIALIZE;
      370     3910        %EOD;

PL6.E3A0      #003=KOP$INITIALIZE File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:72   
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KOP$INITIALIZE.
PL6.E3A0      #003=KOP$INITIALIZE File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:73   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CHANNEL                   6-0-0/w PTR         r     1 @DEV_TYPE
    *0-0-0/w UBIN(16)    r     1 CHANNEL                   *0-0-0/w UBIN(16)    r     1 DEV_TYPE
     8-0-0/w STRC(16)    r     1 STASHED_ERRMASK

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(16)    r     1 ERRMASK_STATUS             0-0-0/w PTR         r     1 HOST_BUF$


   Procedure KOP$INITIALIZE requires 85 words for executable code.
   Procedure KOP$INITIALIZE requires 16 words of local(AUTO) storage.
PL6.E3A0      #003=KOP$INITIALIZE File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:74   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=KOP$INITIALIZE File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:75   
          MINI XREF LISTING

AAARGH
      3902**LABEL    3885--CALLALT  3890--CALLALT  3894--CALLALT
CHANNEL
      3762**DCL         6--PROC     3885<>CALL     3890<>CALL     3894<>CALL
DEV_TYPE
      3763**DCL         6--PROC     3889--IF       3890<>CALL
ERRMASK_STATUS
      3415**DCL      3880>>ASSIGN   3902<<ASSIGN   3906<<ASSIGN
ERRMASK_STATUS.NOT_READY
      3423**DCL      3881<<ASSIGN
HOST_BUF$
      3385**DCL      3585--IMP-PTR
KH_CHNHI
      3168**DCL      3169--REDEF
KH_CHNLOW
      3169**DCL      3170--REDEF
KOP$PHYS_IO
      3806**DCL-ENT  3885--CALL     3890--CALL     3894--CALL
KP_MSG.TDATA
      3611**DCL      3612--REDEF    3613--REDEF    3618--REDEF    3632--REDEF    3637--REDEF    3641--REDEF
      3647--REDEF    3650--REDEF
PIGLET_SEGMENT.BASE
      3505**DCL      3505--REDEF
STASHED_ERRMASK
      3851**DCL      3880<<ASSIGN   3902>>ASSIGN   3906>>ASSIGN

PL6.E3A0      #004=KOP$GET_STATUS File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:76   
      371        1        /*T***********************************************************/
      372        2        /*T*                                                         */
      373        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      374        4        /*T*                                                         */
      375        5        /*T***********************************************************/
      376        6        KOP$GET_STATUS: PROC (CHANNEL,STATUS) ALTRET;
      377        7        /**/
      378        8        /*  This routine gets the device status word from the selected drive on       */
      379        9        /*  behalf of various PIGLET modules.                                         */
      380       10        /*                                                                            */
      381       11        /*  NOTE that some bits indicate an error by going to '0'B.  To make things   */
      382       12        /*  easier, PIGLET and PIGETTE have standardized upon the use of active-true  */
      383       13        /*  error flags.  Thus we have to invert some flags.                          */
      384       14        /**/
      385       15        /*  INCLUDE FILES  */
      386       16        /**/
      387       17        %INCLUDE KO_DATA_R;
      388     3764        %INCLUDE GH_HARDWARE_M;                 /* Physical I/O macros                */
      389     3862        /**/
      390     3863        /*  PARAMETERS  */
      391     3864        /**/
      392     3865    1   DCL CHANNEL UBIN WORD;
      393     3866        %KO_DEVICE_STATUS (NAME = STATUS,STCLASS = "",ALIGN=ALIGNED);
      394     3916        /**/
      395     3917        /*  CONSTANT DATA  */
      396     3918        /**/
      397     3919        %KO_DEVICE_STATUS (NAME=FLIP_BITS, STCLASS=CONSTANT, NOT_READY='1'B);
      398     3969        %KO_DEVICE_STATUS (NAME=ZERO_BITS, STCLASS=CONSTANT,
      399     3970                           C_MEMERR='1'B, ATTENTION='1'B, RFU1='1'B, RFU2='1'B);
      400     4020        /**/
      401     4021        /*  AUTO DATA  */
      402     4022        /**/
      403     4023        %GH_IO (FPTN = FPT_IO,STCLASS = AUTO);
      404     4039        /**/
      405     4040        /*  ENTRY DCLS  */
      406     4041        /**/
      407     4042        %KO_ENTRIES (OMIT=KOP$GET_STATUS);
PL6.E3A0      #004=KOP$GET_STATUS File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:77   
      408     4098        %EJECT;
PL6.E3A0      #004=KOP$GET_STATUS File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:78   
      409     4099        /**/
      410     4100        /*  Get the status  */
      411     4101        /**/
      412     4102    1             FPT_IO.CAS.CHN = CHANNEL;
      413     4103    1             FPT_IO.CAS.XCHN.OUTPUT = '0'B;
      414     4104    1             FPT_IO.CAS.FNC = %CI_STATUS_WORD#;
      415     4105    1   RETRY:    CALL GHH$IO_IN (FPT_IO) ALTRET (RETRY);
      416     4106        /**/
      417     4107        /*  Flip some error bits that are active-false.  */
      418     4108        /**/
      419     4109    1             FPT_IO.DAS = FPT_IO.DAS\FLIP_BITS;
      420     4110        /**/
      421     4111        /*  Clobber meaningless bits.  */
      422     4112        /**/
      423     4113    1             FPT_IO.DAS = FPT_IO.DAS&~ZERO_BITS;
      424     4114    1             STATUS = FPT_IO.DAS;
      425     4115        /**/
      426     4116        /*  That's it!  */
      427     4117        /**/
      428     4118    1             RETURN;
      429     4119        /**/
      430     4120    1   END KOP$GET_STATUS;
      431     4121        %EOD;

PL6.E3A0      #004=KOP$GET_STATUS File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:79   
--  Include file information  --

   GH_HARDWARE_M.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KOP$GET_STATUS.

   Procedure KOP$GET_STATUS requires 52 words for executable code.
   Procedure KOP$GET_STATUS requires 12 words of local(AUTO) storage.

PL6.E3A0      #004=KOP$GET_STATUS File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:80   

 Object Unit name= KOP$GET_STATUS                             File name= KOP$PHYS_IO.:E05TOU
 UTS= JUL 30 '97 01:16:37.52 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   DCB   even  none     0      0  M$HOST
    1  RoData even  UTS      2      2  KOP$GET_STATUS
    2   Proc  even  none    52     34  KOP$GET_STATUS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        2  KOP$GET_STATUS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 GHH$IO_IN
                       nStd      0 X6A_AUTO_2
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KH_CHNHI                              KH_CHNLOW                             HOST_BUF$
     M$HOST                           r    G$ROS$
PL6.E3A0      #004=KOP$GET_STATUS File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:81   


      371        1        /*T***********************************************************/
      372        2        /*T*                                                         */
      373        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      374        4        /*T*                                                         */
      375        5        /*T***********************************************************/
      376        6        KOP$GET_STATUS: PROC (CHANNEL,STATUS) ALTRET;

      6   2 000000  D380 0000 0000  xent KOP$GET_STATUS  LNJ,B5   X6A_AUTO_2
          2 000003       000C 0002                       DC       12,2

      377        7        /**/
      378        8        /*  This routine gets the device status word from the selected drive on       */
      379        9        /*  behalf of various PIGLET modules.                                         */
      380       10        /*                                                                            */
      381       11        /*  NOTE that some bits indicate an error by going to '0'B.  To make things   */
      382       12        /*  easier, PIGLET and PIGETTE have standardized upon the use of active-true  */
      383       13        /*  error flags.  Thus we have to invert some flags.                          */
      384       14        /**/
      385       15        /*  INCLUDE FILES  */
      386       16        /**/
      387       17        %INCLUDE KO_DATA_R;
      388     3764        %INCLUDE GH_HARDWARE_M;                 /* Physical I/O macros                */
      389     3862        /**/
      390     3863        /*  PARAMETERS  */
      391     3864        /**/
      392     3865    1   DCL CHANNEL UBIN WORD;
      393     3866        %KO_DEVICE_STATUS (NAME = STATUS,STCLASS = "",ALIGN=ALIGNED);
      394     3916        /**/
      395     3917        /*  CONSTANT DATA  */
      396     3918        /**/
      397     3919        %KO_DEVICE_STATUS (NAME=FLIP_BITS, STCLASS=CONSTANT, NOT_READY='1'B);
      398     3969        %KO_DEVICE_STATUS (NAME=ZERO_BITS, STCLASS=CONSTANT,
      399     3970                           C_MEMERR='1'B, ATTENTION='1'B, RFU1='1'B, RFU2='1'B);
      400     4020        /**/
      401     4021        /*  AUTO DATA  */
      402     4022        /**/
PL6.E3A0      #004=KOP$GET_STATUS File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:82   
      403     4023        %GH_IO (FPTN = FPT_IO,STCLASS = AUTO);
      404     4039        /**/
      405     4040        /*  ENTRY DCLS  */
      406     4041        /**/
      407     4042        %KO_ENTRIES (OMIT=KOP$GET_STATUS);
      408     4098        %EJECT;
PL6.E3A0      #004=KOP$GET_STATUS File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:83   
      409     4099        /**/
      410     4100        /*  Get the status  */
      411     4101        /**/
      412     4102    1             FPT_IO.CAS.CHN = CHANNEL;

   4102   2 000005  ECC7 0004                            LDB,B6   @CHANNEL,AUTO
          2 000007  E806                                 LDR,R6   ,B6
          2 000008  6006                                 SOL,R6   6
          2 000009  EAC7 0008                            SRM,R6,'FFC0'X    FPT_IO,AUTO
          2 00000B       FFC0

      413     4103    1             FPT_IO.CAS.XCHN.OUTPUT = '0'B;

   4103   2 00000C  8847 0008                            LBF,'0040'X       FPT_IO,AUTO
   4103   2 00000E       0040

      414     4104    1             FPT_IO.CAS.FNC = %CI_STATUS_WORD#;

   4104   2 00000F  6C18                                 LDV,R6   24
          2 000010  EAC7 0008                            SRM,R6,'003F'X    FPT_IO,AUTO
          2 000012       003F

      415     4105    1   RETRY:    CALL GHH$IO_IN (FPT_IO) ALTRET (RETRY);

   4105   2 000013  EBC7 0008            RETRY           LAB,B6   FPT_IO,AUTO
          2 000015  EFC7 000A                            STB,B6   FPT_IO+2,AUTO
          2 000017  BBC7 000A                            LAB,B3   FPT_IO+2,AUTO
          2 000019  CBF0 0100                            LAB,B4   256,IMO
          2 00001B  E380 0000 0000  xent                 LNJ,B6   GHH$IO_IN
          2 00001E       FFF5                            DC       s:4105,PREL

      416     4106        /**/
      417     4107        /*  Flip some error bits that are active-false.  */
      418     4108        /**/
      419     4109    1             FPT_IO.DAS = FPT_IO.DAS\FLIP_BITS;

   4109   2 00001F  E847 0009                            LDR,R6   FPT_IO+1,AUTO
PL6.E3A0      #004=KOP$GET_STATUS File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:84   
          2 000021  E600 0000 0000  01                   XOR,R6   FLIP_BITS
          2 000024  EF47 0009                            STR,R6   FPT_IO+1,AUTO

      420     4110        /**/
      421     4111        /*  Clobber meaningless bits.  */
      422     4112        /**/
      423     4113    1             FPT_IO.DAS = FPT_IO.DAS&~ZERO_BITS;

   4113   2 000026  D800 0000 0001  01                   LDR,R5   ZERO_BITS
          2 000029  8655                                 CPL      R5
          2 00002A  D556                                 AND,R5   R6
          2 00002B  E855                                 LDR,R6   R5
          2 00002C  EF47 0009                            STR,R6   FPT_IO+1,AUTO

      424     4114    1             STATUS = FPT_IO.DAS;

   4114   2 00002E  ECC7 0006                            LDB,B6   @STATUS,AUTO
          2 000030  EF06                                 STR,R6   ,B6

      425     4115        /**/
      426     4116        /*  That's it!  */
      427     4117        /**/
      428     4118    1             RETURN;

   4118   2 000031  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
      429     4119        /**/
      430     4120    1   END KOP$GET_STATUS;
      431     4121        %EOD;

PL6.E3A0      #004=KOP$GET_STATUS File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:85   
--  Include file information  --

   GH_HARDWARE_M.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KOP$GET_STATUS.
PL6.E3A0      #004=KOP$GET_STATUS File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:86   

 **** Variables and constants ****

  ****  Section 001 RoData KOP$GET_STATUS

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(16)    r     1 FLIP_BITS                  1-0-0/w STRC(16)    r     1 ZERO_BITS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CHANNEL                   6-0-0/w PTR         r     1 @STATUS
    *0-0-0/w UBIN(16)    r     1 CHANNEL                    8-0-0/w STRC(32)    r     1 FPT_IO
    *0-0-0/w STRC(16)    r     1 STATUS

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 HOST_BUF$


   Procedure KOP$GET_STATUS requires 52 words for executable code.
   Procedure KOP$GET_STATUS requires 12 words of local(AUTO) storage.
PL6.E3A0      #004=KOP$GET_STATUS File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:87   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=KOP$GET_STATUS File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:88   
          MINI XREF LISTING

CHANNEL
      3865**DCL         6--PROC     4102>>ASSIGN
FLIP_BITS
      3944**DCL      4109>>ASSIGN
FPT_IO
      4034**DCL      4105<>CALL
FPT_IO.CAS.CHN
      4034**DCL      4034--REDEF    4102<<ASSIGN
FPT_IO.CAS.FNC
      4035**DCL      4104<<ASSIGN
FPT_IO.CAS.XCHN.OUTPUT
      4035**DCL      4103<<ASSIGN
FPT_IO.DAS
      4035**DCL      4036--REDEF    4037--REDEF    4109<<ASSIGN   4109>>ASSIGN   4113<<ASSIGN   4113>>ASSIGN
      4114>>ASSIGN
GHH$IO_IN
      4045**DCL-ENT  4105--CALL
HOST_BUF$
      3390**DCL      3590--IMP-PTR
KH_CHNHI
      3173**DCL      3174--REDEF
KH_CHNLOW
      3174**DCL      3175--REDEF
KP_MSG.TDATA
      3616**DCL      3617--REDEF    3618--REDEF    3623--REDEF    3637--REDEF    3642--REDEF    3646--REDEF
      3652--REDEF    3655--REDEF
PIGLET_SEGMENT.BASE
      3510**DCL      3510--REDEF
RETRY
      4105**LABEL    4105--CALLALT
STATUS
      3891**DCL         6--PROC     4114<<ASSIGN
PL6.E3A0      #004=KOP$GET_STATUS File=KOP$PHYS_IO.:E05TSI                       WED 07/30/97 01:16 Page:89   
ZERO_BITS
      3995**DCL      4113>>ASSIGN

PL6.E3A0      #005=KOP$CHECK_STATUS File=KOP$PHYS_IO.:E05TSI                     WED 07/30/97 01:16 Page:90   
      432        1        /*T***********************************************************/
      433        2        /*T*                                                         */
      434        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      435        4        /*T*                                                         */
      436        5        /*T***********************************************************/
      437        6        KOP$CHECK_STATUS: PROC (STATUS) ALTRET;
      438        7        /**/
      439        8        /*  This routine will ALTRETURN if the device status indicates some kind      */
      440        9        /*  of trouble.                                                               */
      441       10        /**/
      442       11        /*  INCLUDE FILES  */
      443       12        /**/
      444       13        %INCLUDE KO_DATA_R;
      445     3760        /**/
      446     3761        /*  PARAMETERS  */
      447     3762        /**/
      448     3763        %KO_DEVICE_STATUS (NAME = STATUS,STCLASS = "",ALIGN=ALIGNED);
      449     3813        /**/
      450     3814    1             IF STATUS & ERRMASK_STATUS
      451     3815    1              THEN
      452     3816    1                 ALTRETURN;
      453     3817    1             RETURN;
      454     3818        /**/
      455     3819    1   END KOP$CHECK_STATUS;

PL6.E3A0      #005=KOP$CHECK_STATUS File=KOP$PHYS_IO.:E05TSI                     WED 07/30/97 01:16 Page:91   
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KOP$CHECK_STATUS.

   Procedure KOP$CHECK_STATUS requires 19 words for executable code.
   Procedure KOP$CHECK_STATUS requires 6 words of local(AUTO) storage.

    No errors detected in file KOP$PHYS_IO.:E05TSI    .

PL6.E3A0      #005=KOP$CHECK_STATUS File=KOP$PHYS_IO.:E05TSI                     WED 07/30/97 01:16 Page:92   

 Object Unit name= KOP$CHECK_STATUS                           File name= KOP$PHYS_IO.:E05TOU
 UTS= JUL 30 '97 01:16:59.28 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   DCB   even  none     0      0  M$HOST
    1   Proc  even  none    19     13  KOP$CHECK_STATUS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        1  KOP$CHECK_STATUS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X6A_AUTO_1
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KH_CHNHI                              KH_CHNLOW                             HOST_BUF$
     ERRMASK_STATUS                        M$HOST                           r    G$ROS$
PL6.E3A0      #005=KOP$CHECK_STATUS File=KOP$PHYS_IO.:E05TSI                     WED 07/30/97 01:16 Page:93   


      432        1        /*T***********************************************************/
      433        2        /*T*                                                         */
      434        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      435        4        /*T*                                                         */
      436        5        /*T***********************************************************/
      437        6        KOP$CHECK_STATUS: PROC (STATUS) ALTRET;

      6   1 000000  D380 0000 0000  xent KOP$CHECK_STATUSLNJ,B5   X6A_AUTO_1
          1 000003       0006 0001                       DC       6,1

      438        7        /**/
      439        8        /*  This routine will ALTRETURN if the device status indicates some kind      */
      440        9        /*  of trouble.                                                               */
      441       10        /**/
      442       11        /*  INCLUDE FILES  */
      443       12        /**/
      444       13        %INCLUDE KO_DATA_R;
      445     3760        /**/
      446     3761        /*  PARAMETERS  */
      447     3762        /**/
      448     3763        %KO_DEVICE_STATUS (NAME = STATUS,STCLASS = "",ALIGN=ALIGNED);
      449     3813        /**/
      450     3814    1             IF STATUS & ERRMASK_STATUS

   3814   1 000005  ECC7 0004                            LDB,B6   @STATUS,AUTO
          1 000007  E806                                 LDR,R6   ,B6
          1 000008  E500 0000 0000  xsym                 AND,R6   ERRMASK_STATUS
          1 00000B  6901 0004                            BEZ,R6   s:3817,PREL

      451     3815    1              THEN
      452     3816    1                 ALTRETURN;

   3816   1 00000D  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      453     3817    1             RETURN;

PL6.E3A0      #005=KOP$CHECK_STATUS File=KOP$PHYS_IO.:E05TSI                     WED 07/30/97 01:16 Page:94   
   3817   1 000010  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
      454     3818        /**/
      455     3819    1   END KOP$CHECK_STATUS;

PL6.E3A0      #005=KOP$CHECK_STATUS File=KOP$PHYS_IO.:E05TSI                     WED 07/30/97 01:16 Page:95   
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KOP$CHECK_STATUS.
PL6.E3A0      #005=KOP$CHECK_STATUS File=KOP$PHYS_IO.:E05TSI                     WED 07/30/97 01:16 Page:96   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @STATUS                   *0-0-0/w STRC(16)    r     1 STATUS

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(16)    r     1 ERRMASK_STATUS             0-0-0/w PTR         r     1 HOST_BUF$


   Procedure KOP$CHECK_STATUS requires 19 words for executable code.
   Procedure KOP$CHECK_STATUS requires 6 words of local(AUTO) storage.

    No errors detected in file KOP$PHYS_IO.:E05TSI    .
PL6.E3A0      #005=KOP$CHECK_STATUS File=KOP$PHYS_IO.:E05TSI                     WED 07/30/97 01:16 Page:97   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=KOP$CHECK_STATUS File=KOP$PHYS_IO.:E05TSI                     WED 07/30/97 01:16 Page:98   
          MINI XREF LISTING

ERRMASK_STATUS
      3416**DCL      3814>>IF
HOST_BUF$
      3386**DCL      3586--IMP-PTR
KH_CHNHI
      3169**DCL      3170--REDEF
KH_CHNLOW
      3170**DCL      3171--REDEF
KP_MSG.TDATA
      3612**DCL      3613--REDEF    3614--REDEF    3619--REDEF    3633--REDEF    3638--REDEF    3642--REDEF
      3648--REDEF    3651--REDEF
PIGLET_SEGMENT.BASE
      3506**DCL      3506--REDEF
STATUS
      3788**DCL         6--PROC     3814>>IF
