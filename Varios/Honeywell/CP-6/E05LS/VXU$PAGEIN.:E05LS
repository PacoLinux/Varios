VERSION E05

PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:1    
        1        1        /*M* VXU$PAGEIN - To perform swap-ins during image formation    */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC */
        8        8        /*F* NAME:        VXU$PAGEIN
        9        9             PURPOSE:     To perform swap-ins during image formation.
       10       10             Description:
       11       11        VXU$PAGEIN is entered with four value parameters. NODE$ is a pointer to the node
       12       12        who "OWNS" the page to be swapped-in. Buftyp is an index into the buffers
       13       13        which classifies the page as DATA(0), PROCEDURE(1), or READ-ONLY(2). Bufinx
       14       14        is the buffer within classification, I.E. Either the first buffer or the second.
       15       15        IN_PAGE# is the page number of the page to be brought in.
       16       16        VXU$PAGEIN first interogates a bit map within the node located by NODE$ to determine
       17       17        if the page in question was ever written to the run unit file. If so, a swap-in
       18       18        is performed on that page; otherwise the page becomes resident in virgin form.
       19       19                                                                        */
       20       20        VXU$PAGEIN:
       21       21              PROC( NODE$, BUFTYP, BUFINX, IN_PAGE# );
       22       22        %INCLUDE VX_INC_C;
       23    10738        %VX$NODE;

             10750    1   /*******************************************************************************
             10751    1   *                                                                              *
             10752    1   *                          VX$NODE                                                 *
             10753    1   *                                                                              *
             10754    1   *******************************************************************************/

             10770    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10771    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10772    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10773    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10774    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10775    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10776                              to list of file nodes for this node            */
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:2    
             10777    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10778    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10778                  /* Head pointer to shared library list */
             10779    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10779                  /* Head pointer to list of shared libraries
             10780                                          which have been mapped to included libraries */
             10781    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10782    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10783    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10784    1         2 ADDR_START REDEF  ADDR_START_A,
             10785    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             10786    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             10787    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10788    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10789    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10790    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10791    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10792    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10793    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10794    1         2 START_PAGE# REDEF START_PAGE#_A,
             10795    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10796    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10797    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10798    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10799    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10800    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10801    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10802    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10803    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10803                  /* Starting pointer for common sections for this node */
             10804    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10804                  /* Stopping pointer for common sections for this node */
             10805    1         2 L_START,
             10806    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10807    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10808    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10809    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:3    
             10810    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10811    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10812    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10813    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10814    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10815    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10816    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10817    1         2 L_STOP,
             10818    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10819    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10820    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10821    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10822    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10823    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10824    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10825    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10826    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10827    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10828    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10829    1         2 L_SIZE,
             10830    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10831    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10832    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10833    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10834    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10835    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10836    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10837    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10838    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10839    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10840    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             10841    1         2 L_PREV_SIZE,
             10842    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10843    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10844    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10845    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10846    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:4    
             10847    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10848    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10849    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10850    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10851    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10852    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             10853    1         2 BIT_MAP                ALIGNED,
             10854    1           3 DATA                  ALIGNED,
             10855    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10856    1           3 RPROC                 ALIGNED,
             10857    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10858    1           3 ROS                   ALIGNED,
             10859    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10860    1         2 L_SC_START,
             10861    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10862    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10863    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10864    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10865    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             10866    1         2 L_SC_STOP,
             10867    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10868    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10869    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10870    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10871    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             10872    1         2 PROMOTE_HEAD,
             10873    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10874    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10875    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             10876    1         2 PROMOTE_TAIL,
             10877    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10878    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10879    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             10880    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             10881    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             10882    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             10883    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:5    
             10884    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       24    10888        %SET LISTMAC='1'B;
       25    10889        %SET LISTSUB='1'B;
       26    10890        %SET LISTEXP='1'B;
       27    10891        %BANNER( ARG=SUBS );
             10892        %LSET LISTDIR='0'B;

             10899    1   /*******************************************************************************
             10900    1   *                                                                              *
             10901    1   *                          SUBS                                                 *
             10902    1   *                                                                              *
             10903    1   *******************************************************************************/

       28    10907        %B$RECORDSUBS;
             10908        %EQU TYPHEAD=0 ;
             10909        %EQU TYPDNAM=1 ;
             10910        %EQU TYPRNAM=2 ;
             10911        %EQU TYPSECT=3 ;
             10912        %EQU TYPEDEF=4 ;
             10913        %EQU TYPEREF=5 ;
             10914        %EQU TYPSDEF=6 ;
             10915        %EQU TYPSREF=7 ;
             10916        %EQU TYPSEGDEF=8 ;
             10917        %EQU TYPSEGREF=9 ;
             10918        %EQU TYPPROG=10 ;
             10919        %EQU SUBTYPPROG=0 ;
             10920        %EQU SUBTYPREL=1 ;
             10921        %EQU TYPLOGBLK=11 ;
             10922        %EQU TYPINTNTRY=12 ;
             10923        %EQU TYPEXST=13 ;
             10924        %EQU TYPVREBL=14 ;
             10925        %EQU TYPDBGNAM=15 ;
             10926        %EQU TYPLV1LB=16 ;
             10927        %EQU TYPLV1=17 ;
             10928        %EQU TYPDATASEG=18 ;
             10929        %EQU TYPRUM=20 ;
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:6    
             10930        %EQU TYPBIRTH=21 ;
             10931        %EQU TYPPLOVER=22 ;
             10932        %EQU TYPCOMPID=23 ;
             10933        %EQU TYPROS=30 ;
       29    10935        %E;
             10936        %LSET LISTDIR='0'B;

             10943    1   /*******************************************************************************
             10944    1   *                                                                              *
             10945    1   *                          ENTRY                                                 *
             10946    1   *                                                                              *
             10947    1   *******************************************************************************/

       30    10951        %ENTRIES;
             10952    1   DCL VXE$ERROR       ENTRY(4);
             10953    1   DCL VXE$ERR         ENTRY(3);
             10954    1   DCL VXE$MERC        ENTRY;
             10955    1   DCL VXE$ERRMSG      ENTRY(3);
             10956    1   DCL VXR$READ        ENTRY( 3 );
             10957    1   DCL VXW$WRITE       ENTRY( 3 );
             10958    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             10959    1   DCL VXD$B2C         ENTRY( 5 );
             10960    1   DCL VXD$C2B         ENTRY( 3 );
             10961    1   DCL VXA$GET         ENTRY( 3 );
             10962    1   DCL VXF$FREE        ENTRY( 3 );
             10963    1   DCL VXQ$SORT        ENTRY( 7 );
             10964    1   DCL VXY$YESNO       ENTRY( 1 );
       31    10966        %ENTRIES_IO;
             10967    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             10968    1   DCL VXF$CLOSE       ENTRY(3);
             10969    1   DCL VXU$PREAD       ENTRY(12);
             10970    1   DCL VXK$KEY         ENTRY(4);
             10971    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             10972    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       32    10974        %BANNER( ARG=VX$IMAGE );
             10975        %LSET LISTDIR='0'B;

PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:7    
             10982    1   /*******************************************************************************
             10983    1   *                                                                              *
             10984    1   *                          VX$IMAGE                                                *
             10985    1   *                                                                              *
             10986    1   *******************************************************************************/

       33    10990        %IMAGE_BUFFERS( NAME=VX$IMAGE, STCLASS="BASED(VX_IMAGE$)");
             10991    1   DCL 1 VX$IMAGE           ALIGNED        BASED(VX_IMAGE$),
             10992    1         2 CPAGE#_A(0:1) SBIN WORD ALIGNED, /* Current page # in buffer # */
             10993    1         2 CPAGE# REDEF CPAGE#_A,
             10994    1           3 BUF0                  SBIN WORD ALIGNED,
             10995    1           3 BUF1                  SBIN WORD ALIGNED,
             10996    1         2 START_A$(0:1) PTR ALIGNED, /* Pointer to start of buffer #    */
             10997    1         2 START$ REDEF START_A$,
             10998    1           3 BUF0$                 PTR       ALIGNED,
             10999    1           3 BUF1$                 PTR       ALIGNED,
             11000    1         2 STOP_A$(0:1)           PTR       ALIGNED,
             11001    1         2 STOP$  REDEF STOP_A$,           /* Pointer to end of buffer #         */
             11002    1           3 BUF0$                 PTR       ALIGNED,
             11003    1           3 BUF1$                 PTR       ALIGNED,
             11004    1         2 NODE_A$(0:1) PTR ALIGNED, /* Pointer to node  of buffer #     */
             11005    1         2 NODE$  REDEF NODE_A$,
             11006    1           3 BUF0$                 PTR       ALIGNED,
             11007    1           3 BUF1$                 PTR       ALIGNED,
             11008    1         2 BEGIN$                 PTR       ALIGNED,
             11009    1         2 END$                   PTR       ALIGNED,
             11010    1         2 SPAGE#                 UBIN(36)  ALIGNED,
             11011    1         2 EPAGE#                 UBIN(36)  ALIGNED;
       34    11013        %BANNER( ARG=VX$BIT_MAP );
             11014        %LSET LISTDIR='0'B;

             11021    1   /*******************************************************************************
             11022    1   *                                                                              *
             11023    1   *                          VX$BIT_MAP                                              *
             11024    1   *                                                                              *
             11025    1   *******************************************************************************/

PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:8    
       35    11029        %BIT_MAP( NAME=VX$BIT_MAP, STCLASS="BASED(BIT$)");
             11030    1   DCL VX$BIT_MAP(0:255/*@MAX_IS_K1*/)         BIT(1)    UNAL BASED(BIT$);
       36    11032        %BANNER( ARG="BIT MAPs for data segments" );
             11033        %LSET LISTDIR='0'B;

             11040    1   /*******************************************************************************
             11041    1   *                                                                              *
             11042    1   *                          BIT MAPs for data segments                              *
             11043    1   *                                                                              *
             11044    1   *******************************************************************************/

       37    11048        %BIT_MAP( NAME=DS3_BIT_MAP, STCLASS=STATIC, INT_BIT="INIT('0'B*0)" );
             11049    1   DCL DS3_BIT_MAP(0:255/*@MAX_IS_K1*/)         BIT(1)    UNAL STATIC   INIT('0'B*0);
       38    11051        %BIT_MAP( NAME=DS4_BIT_MAP, STCLASS=STATIC, INT_BIT="INIT('0'B*0)" );
             11052    1   DCL DS4_BIT_MAP(0:255/*@MAX_IS_K1*/)         BIT(1)    UNAL STATIC   INIT('0'B*0);
       39    11054        %BIT_MAP( NAME=DS5_BIT_MAP, STCLASS=STATIC, INT_BIT="INIT('0'B*0)" );
             11055    1   DCL DS5_BIT_MAP(0:255/*@MAX_IS_K1*/)         BIT(1)    UNAL STATIC   INIT('0'B*0);
       40    11057        %BIT_MAP( NAME=DS6_BIT_MAP, STCLASS=STATIC, INT_BIT="INIT('0'B*0)" );
             11058    1   DCL DS6_BIT_MAP(0:255/*@MAX_IS_K1*/)         BIT(1)    UNAL STATIC   INIT('0'B*0);
       41    11060        %BIT_MAP( NAME=DS7_BIT_MAP, STCLASS=STATIC, INT_BIT="INIT('0'B*0)" );
             11061    1   DCL DS7_BIT_MAP(0:255/*@MAX_IS_K1*/)         BIT(1)    UNAL STATIC   INIT('0'B*0);
       42    11063        %BIT_MAP( NAME=DS8_BIT_MAP, STCLASS=STATIC, INT_BIT="INIT('0'B*0)" );
             11064    1   DCL DS8_BIT_MAP(0:255/*@MAX_IS_K1*/)         BIT(1)    UNAL STATIC   INIT('0'B*0);
       43    11066        %P;
             11067        %LSET LISTDIR='0'B;

             11074    1   /*******************************************************************************
             11075    1   *                                                                              *
             11076    1   *                          PARAMETERS                                              *
             11077    1   *                                                                              *
             11078    1   *******************************************************************************/

       44    11082    1   DCL NODE$           PTR       ALIGNED;
       45    11083    1   DCL SEGID# REDEF NODE$  UBIN  ALIGNED;
       46    11084    1   DCL BUFTYP          UBIN(36)  ALIGNED   ;
       47    11085    1   DCL BUFINX          UBIN(36)  ALIGNED   ;
       48    11086    1   DCL IN_PAGE#        UBIN(36)  ALIGNED   ;
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:9    
       49    11087        %PTR;
             11088        %LSET LISTDIR='0'B;

             11095    1   /*******************************************************************************
             11096    1   *                                                                              *
             11097    1   *                          PTR                                                 *
             11098    1   *                                                                              *
             11099    1   *******************************************************************************/

       50    11103    1   DCL IMAGE$          PTR       ALIGNED   AUTO;
       51    11104    1   DCL BIT$            PTR       ALIGNED   AUTO;
       52    11105    1   DCL WHERE$          PTR       ALIGNED   AUTO;
       53    11106    1   DCL BUF_NODE$       PTR       ALIGNED   AUTO;
       54    11107    1   DCL SEG_BIT_MAP$(0:5) PTR     ALIGNED   CONSTANT INIT(
       55    11108    1         ADDR(DS3_BIT_MAP), ADDR(DS4_BIT_MAP), ADDR(DS5_BIT_MAP), ADDR(DS6_BIT_MAP),
             11108                  ADDR(DS7_BIT_MAP), ADDR(DS8_BIT_MAP) );
       56    11109        %U;
             11110        %LSET LISTDIR='0'B;

             11117    1   /*******************************************************************************
             11118    1   *                                                                              *
             11119    1   *                          UBIN                                                 *
             11120    1   *                                                                              *
             11121    1   *******************************************************************************/

       57    11125    1   DCL CPAGE#          UBIN(36)  ALIGNED   AUTO;
       58    11126    1   DCL TYPE            UBIN(36)  ALIGNED   AUTO;
       59    11127    1   DCL ADR             UBIN(36)  ALIGNED   AUTO;
       60    11128    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
       61    11129    1   DCL SHOVE           UBIN(36)  ALIGNED   AUTO;
       62    11130    1   DCL SEGMENT         UBIN(36)  ALIGNED   AUTO;
       63    11131    1   DCL NODE#           UBIN(36)  ALIGNED   AUTO;
       64    11132        %PLIST;
       65    11133        %EJECT;
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:10   
       66    11134    1         VX_IMAGE$ = VX_IMAGE_PTR$(BUFTYP);
             11134                  /* Get pointer to appropriate buffer variables */
       67    11135    1         TYPE = 10;
       68    11136    2         DO CASE( BUFTYP  );
       69    11137    2           CASE( 0/*@DATA*/ );
       70    11138    2             BIT$ = ADDR( NODE$ -> VX$NODE.BIT_MAP.DATA );
       71    11139    2           CASE( 1/*@PROC*/ );
       72    11140    2             BIT$ = ADDR( NODE$ -> VX$NODE.BIT_MAP.RPROC );
       73    11141    2           CASE( 2/*@ROS*/ );
       74    11142    2             BIT$ = ADDR( NODE$ -> VX$NODE.BIT_MAP.ROS );
       75    11143    2             TYPE = 30;
       76    11144    2           CASE( ELSE );
       77    11145    2             SEGMENT = BUFTYP - 3/*@DS3*/;
       78    11146    2             BIT$ = SEG_BIT_MAP$(SEGMENT);
       79    11147    2             NODE# = SEGID#;
       80    11148    2             TYPE  = 18;
       81    11149    2           END;
       82    11150    2         IF BIT$ -> VX$BIT_MAP( IN_PAGE# ) THEN DO;
       83    11151    2             WHERE$ = VX$IMAGE.START_A$(BUFINX);
       84    11152    2             SIZE = 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
       85    11153    2             ADR = IN_PAGE# * 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
       86    11154    3             IF BUFTYP >= 3/*@DS3*/ THEN DO;
       87    11155        /* Check if ending page */
       88    11156    3                 IF IN_PAGE# = VX_SEG_EPAGE#(SEGMENT) THEN
       89    11157    3                     SIZE = MOD( VX_SEG_SIZE(SEGMENT)-1, 1024
             11157                              /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ ) + 1;
       90    11158    3                END;
       91    11159    3             ELSE DO;
       92    11160        /* Check if starting page */
       93    11161    4                 IF NODE$ -> VX$NODE.START_PAGE#_A(BUFTYP) = IN_PAGE# THEN DO;
       94    11162    4                     SHOVE = MOD( NODE$ -> VX$NODE.ADDR_START_A(BUFTYP),
       95    11163    4                             1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ );
       96    11164    4                     WHERE$ = PINCRW( WHERE$, SHOVE );
       97    11165    4                     SIZE = 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ - SHOVE;
       98    11166    4                     ADR = ADR + SHOVE;
       99    11167    4                    END;
      100    11168        /*              Check if ending page               */
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:11   
      101    11169    4                 IF NODE$ -> VX$NODE.STOP_PAGE#_A(BUFTYP) = IN_PAGE# THEN DO;
      102    11170    4                     SIZE = MOD( NODE$ -> VX$NODE.ADDR_STOP_A(BUFTYP),
      103    11171    4                             1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ )   +   1;
      104    11172    4                    END;
      105    11173    3                 NODE# = NODE$ -> VX$NODE.NUM;
      106    11174    3                END;
      107    11175    2             CALL VXK$KEY( 1/*@RF*/, TYPE, NODE#, ADR );
      108    11176    2             CALL VXI$READ( 1/*@RF*/, WHERE$, SIZE, 1/*@RF*/ );
      109    11177    2            END;
      110    11178    1         VX$IMAGE.CPAGE#_A(BUFINX) = IN_PAGE#;
      111    11179    1         VX$IMAGE.NODE_A$(BUFINX) = NODE$;
      112    11180    1         RETURN;
      113    11181        %EJECT;
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:12   
      114    11182    1   VXU$PAGEOUT:
      115    11183    1         ENTRY( NODE$, BUFTYP, BUFINX );
      116    11184    1         VX_IMAGE$ = VX_IMAGE_PTR$(BUFTYP);
             11184                  /* Get pointer to appropriate buffer variables */
      117    11185
      118    11186    1         BUF_NODE$ = VX$IMAGE.NODE_A$(BUFINX);
      119    11187    1         TYPE = 10;
      120    11188    2         DO CASE( BUFTYP  );
      121    11189    2           CASE( 0/*@DATA*/ );
      122    11190    2             BIT$ = ADDR( BUF_NODE$ -> VX$NODE.BIT_MAP.DATA );
      123    11191    2           CASE( 1/*@PROC*/ );
      124    11192    2             BIT$ = ADDR( BUF_NODE$ -> VX$NODE.BIT_MAP.RPROC );
      125    11193    2           CASE( 2/*@ROS*/ );
      126    11194    2             BIT$ = ADDR( BUF_NODE$ -> VX$NODE.BIT_MAP.ROS );
      127    11195    2             TYPE = 30;
      128    11196    2           CASE( ELSE );
      129    11197    2             SEGMENT = BUFTYP - 3/*@DS3*/;
      130    11198    2             BIT$ = SEG_BIT_MAP$(SEGMENT);
      131    11199    2             NODE# = SEGID#;
      132    11200    2             TYPE  = 18;
      133    11201    2           END;
      134    11202    1         CPAGE# = VX$IMAGE.CPAGE#_A(BUFINX); /* Get page # */
      135    11203    1         WHERE$ = VX$IMAGE.START_A$(BUFINX);
      136    11204    1         SIZE = 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      137    11205    1         ADR = CPAGE# * 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;
      138    11206    2         IF BUFTYP >= 3/*@DS3*/ THEN DO;
      139    11207        /*  Check if ending page */
      140    11208    2             IF CPAGE# = VX_SEG_EPAGE#(SEGMENT) THEN
      141    11209    2                 SIZE = MOD( VX_SEG_SIZE(SEGMENT)-1, 1024
             11209                          /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ ) + 1;
      142    11210    2            END;
      143    11211    2         ELSE DO;
      144    11212        /* Check if starting page */
      145    11213    3             IF BUF_NODE$ -> VX$NODE.START_PAGE#_A(BUFTYP) = CPAGE# THEN DO;
      146    11214    3                 SHOVE = MOD( BUF_NODE$ -> VX$NODE.ADDR_START_A(BUFTYP),
      147    11215    3                         1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ );
      148    11216    3                 WHERE$ = PINCRW( WHERE$, SHOVE );
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:13   
      149    11217    3                 SIZE = 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ - SHOVE;
      150    11218    3                 ADR = ADR + SHOVE;
      151    11219    3                END;
      152    11220        /*              Check if ending page               */
      153    11221    3             IF BUF_NODE$ -> VX$NODE.STOP_PAGE#_A(BUFTYP) = CPAGE# THEN DO;
      154    11222    3                 IF BUF_NODE$ -> VX$NODE.START_PAGE#_A(BUFTYP) = CPAGE#
      155    11223    3                 THEN
      156    11224    3                     SIZE = BUF_NODE$ -> VX$NODE.ADDR_STOP_A(BUFTYP)
      157    11225    3                             - BUF_NODE$ -> VX$NODE.ADDR_START_A(BUFTYP) + 1;
      158    11226    3                 ELSE
      159    11227    3                     SIZE = MOD( BUF_NODE$ -> VX$NODE.ADDR_STOP_A(BUFTYP),
      160    11228    3                             1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ ) + 1;
      161    11229    3                END;
      162    11230    2             NODE# = BUF_NODE$ -> VX$NODE.NUM;
      163    11231    2            END;
      164    11232    1         CALL VXK$KEY( 1/*@RF*/, TYPE, NODE#, ADR  );
      165    11233    1         CALL VXI$WRITE(  1/*@RF*/, WHERE$, SIZE, 1/*@RF*/  );
      166    11234    1         BIT$ -> VX$BIT_MAP( CPAGE# ) = '1'B;
      167    11235    1         VX$IMAGE.CPAGE#_A(BUFINX) = -1;
      168    11236    1         VX$IMAGE.NODE_A$(BUFINX) = ADDR(NIL);
      169    11237    1   END;

PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:14   
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXU$PAGEIN.

   Procedure VXU$PAGEIN requires 278 words for executable code.
   Procedure VXU$PAGEIN requires 22 words of local(AUTO) storage.

    No errors detected in file VXU$PAGEIN.:E05TSI    .

PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:15   

 Object Unit name= VXU$PAGEIN                                 File name= VXU$PAGEIN.:E05TOU
 UTS= JUL 30 '97 08:44:12.08 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2   Data  even  none    48     60  VXU$PAGEIN
    3  RoData even  UTS      6      6  VXU$PAGEIN
    4   Proc  even  none   278    426  VXU$PAGEIN
    5  RoData even  none     1      1  VXU$PAGEIN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     4      0   yes            yes      Std        4  VXU$PAGEIN
     4    212                  yes      Std        3  VXU$PAGEOUT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       4 VXK$KEY
 yes     yes           Std       4 VXI$READ
 yes     yes           Std       4 VXI$WRITE
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:16   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_IMAGE_PTR$                         VX_OU_HEAD
     VX_ERRORS                             VX_IMAGE$                             VX_SEG_SIZE
     VX_SEG_EPAGE#                         B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:17   


        1        1        /*M* VXU$PAGEIN - To perform swap-ins during image formation    */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC */
        8        8        /*F* NAME:        VXU$PAGEIN
        9        9             PURPOSE:     To perform swap-ins during image formation.
       10       10             Description:
       11       11        VXU$PAGEIN is entered with four value parameters. NODE$ is a pointer to the node
       12       12        who "OWNS" the page to be swapped-in. Buftyp is an index into the buffers
       13       13        which classifies the page as DATA(0), PROCEDURE(1), or READ-ONLY(2). Bufinx
       14       14        is the buffer within classification, I.E. Either the first buffer or the second.
       15       15        IN_PAGE# is the page number of the page to be brought in.
       16       16       VXU$PAGEIN first interogates a bit map within the node located by NODE$ to determine
       17       17        if the page in question was ever written to the run unit file. If so, a swap-in
       18       18        is performed on that page; otherwise the page becomes resident in virgin form.
       19       19                                                                        */
       20       20        VXU$PAGEIN:
       21       21              PROC( NODE$, BUFTYP, BUFINX, IN_PAGE# );

     21  4 000000   000000 700200 xent  VXU$PAGEIN   TSX0  ! X66_AUTO_4
         4 000001   000026 000004                    ZERO    22,4

       22       22        %INCLUDE VX_INC_C;
       23    10738        %VX$NODE;

             10750    1   /*******************************************************************************
             10751    1   *                                                                              *
             10752    1   *                          VX$NODE                                                *
             10753    1   *                                                                              *
             10754    1   *******************************************************************************/

             10770    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10771    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:18   
             10772    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10773    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10774    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10775    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10776                              to list of file nodes for this node            */
             10777    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10778    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10778                  /* Head pointer to shared library list */
             10779    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10779                  /* Head pointer to list of shared libraries
             10780                                          which have been mapped to included libraries */
             10781    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10782    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10783    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10784    1         2 ADDR_START REDEF  ADDR_START_A,
             10785    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             10786    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             10787    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10788    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10789    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10790    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10791    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10792    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10793    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10794    1         2 START_PAGE# REDEF START_PAGE#_A,
             10795    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10796    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10797    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10798    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10799    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10800    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10801    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10802    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10803    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10803                  /* Starting pointer for common sections for this node */
             10804    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10804                  /* Stopping pointer for common sections for this node */
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:19   
             10805    1         2 L_START,
             10806    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10807    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10808    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10809    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10810    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10811    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10812    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10813    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10814    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10815    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10816    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10817    1         2 L_STOP,
             10818    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10819    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10820    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10821    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10822    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10823    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10824    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10825    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10826    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10827    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10828    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10829    1         2 L_SIZE,
             10830    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10831    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10832    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10833    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10834    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10835    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10836    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10837    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10838    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10839    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10840    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             10841    1         2 L_PREV_SIZE,
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:20   
             10842    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10843    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10844    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10845    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10846    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10847    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10848    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10849    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10850    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10851    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10852    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             10853    1         2 BIT_MAP                ALIGNED,
             10854    1           3 DATA                  ALIGNED,
             10855    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10856    1           3 RPROC                 ALIGNED,
             10857    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10858    1           3 ROS                   ALIGNED,
             10859    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10860    1         2 L_SC_START,
             10861    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10862    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10863    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10864    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10865    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             10866    1         2 L_SC_STOP,
             10867    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10868    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10869    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10870    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10871    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             10872    1         2 PROMOTE_HEAD,
             10873    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10874    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10875    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             10876    1         2 PROMOTE_TAIL,
             10877    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10878    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:21   
             10879    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             10880    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             10881    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             10882    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             10883    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             10884    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       24    10888        %SET LISTMAC='1'B;
       25    10889        %SET LISTSUB='1'B;
       26    10890        %SET LISTEXP='1'B;
       27    10891        %BANNER( ARG=SUBS );
             10892        %LSET LISTDIR='0'B;

             10899    1   /*******************************************************************************
             10900    1   *                                                                              *
             10901    1   *                          SUBS                                                 *
             10902    1   *                                                                              *
             10903    1   *******************************************************************************/

       28    10907        %B$RECORDSUBS;
             10908        %EQU TYPHEAD=0 ;
             10909        %EQU TYPDNAM=1 ;
             10910        %EQU TYPRNAM=2 ;
             10911        %EQU TYPSECT=3 ;
             10912        %EQU TYPEDEF=4 ;
             10913        %EQU TYPEREF=5 ;
             10914        %EQU TYPSDEF=6 ;
             10915        %EQU TYPSREF=7 ;
             10916        %EQU TYPSEGDEF=8 ;
             10917        %EQU TYPSEGREF=9 ;
             10918        %EQU TYPPROG=10 ;
             10919        %EQU SUBTYPPROG=0 ;
             10920        %EQU SUBTYPREL=1 ;
             10921        %EQU TYPLOGBLK=11 ;
             10922        %EQU TYPINTNTRY=12 ;
             10923        %EQU TYPEXST=13 ;
             10924        %EQU TYPVREBL=14 ;
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:22   
             10925        %EQU TYPDBGNAM=15 ;
             10926        %EQU TYPLV1LB=16 ;
             10927        %EQU TYPLV1=17 ;
             10928        %EQU TYPDATASEG=18 ;
             10929        %EQU TYPRUM=20 ;
             10930        %EQU TYPBIRTH=21 ;
             10931        %EQU TYPPLOVER=22 ;
             10932        %EQU TYPCOMPID=23 ;
             10933        %EQU TYPROS=30 ;
       29    10935        %E;
             10936        %LSET LISTDIR='0'B;

             10943    1   /*******************************************************************************
             10944    1   *                                                                              *
             10945    1   *                          ENTRY                                                 *
             10946    1   *                                                                              *
             10947    1   *******************************************************************************/

       30    10951        %ENTRIES;
             10952    1   DCL VXE$ERROR       ENTRY(4);
             10953    1   DCL VXE$ERR         ENTRY(3);
             10954    1   DCL VXE$MERC        ENTRY;
             10955    1   DCL VXE$ERRMSG      ENTRY(3);
             10956    1   DCL VXR$READ        ENTRY( 3 );
             10957    1   DCL VXW$WRITE       ENTRY( 3 );
             10958    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             10959    1   DCL VXD$B2C         ENTRY( 5 );
             10960    1   DCL VXD$C2B         ENTRY( 3 );
             10961    1   DCL VXA$GET         ENTRY( 3 );
             10962    1   DCL VXF$FREE        ENTRY( 3 );
             10963    1   DCL VXQ$SORT        ENTRY( 7 );
             10964    1   DCL VXY$YESNO       ENTRY( 1 );
       31    10966        %ENTRIES_IO;
             10967    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             10968    1   DCL VXF$CLOSE       ENTRY(3);
             10969    1   DCL VXU$PREAD       ENTRY(12);
             10970    1   DCL VXK$KEY         ENTRY(4);
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:23   
             10971    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             10972    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       32    10974        %BANNER( ARG=VX$IMAGE );
             10975        %LSET LISTDIR='0'B;

             10982    1   /*******************************************************************************
             10983    1   *                                                                              *
             10984    1   *                          VX$IMAGE                                               *
             10985    1   *                                                                              *
             10986    1   *******************************************************************************/

       33    10990        %IMAGE_BUFFERS( NAME=VX$IMAGE, STCLASS="BASED(VX_IMAGE$)");
             10991    1   DCL 1 VX$IMAGE           ALIGNED        BASED(VX_IMAGE$),
             10992    1         2 CPAGE#_A(0:1) SBIN WORD ALIGNED, /* Current page # in buffer # */
             10993    1         2 CPAGE# REDEF CPAGE#_A,
             10994    1           3 BUF0                  SBIN WORD ALIGNED,
             10995    1           3 BUF1                  SBIN WORD ALIGNED,
             10996    1         2 START_A$(0:1) PTR ALIGNED, /* Pointer to start of buffer #    */
             10997    1         2 START$ REDEF START_A$,
             10998    1           3 BUF0$                 PTR       ALIGNED,
             10999    1           3 BUF1$                 PTR       ALIGNED,
             11000    1         2 STOP_A$(0:1)           PTR       ALIGNED,
             11001    1         2 STOP$  REDEF STOP_A$,           /* Pointer to end of buffer #         */
             11002    1           3 BUF0$                 PTR       ALIGNED,
             11003    1           3 BUF1$                 PTR       ALIGNED,
             11004    1         2 NODE_A$(0:1) PTR ALIGNED, /* Pointer to node  of buffer #     */
             11005    1         2 NODE$  REDEF NODE_A$,
             11006    1           3 BUF0$                 PTR       ALIGNED,
             11007    1           3 BUF1$                 PTR       ALIGNED,
             11008    1         2 BEGIN$                 PTR       ALIGNED,
             11009    1         2 END$                   PTR       ALIGNED,
             11010    1         2 SPAGE#                 UBIN(36)  ALIGNED,
             11011    1         2 EPAGE#                 UBIN(36)  ALIGNED;
       34    11013        %BANNER( ARG=VX$BIT_MAP );
             11014        %LSET LISTDIR='0'B;

             11021    1   /*******************************************************************************
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:24   
             11022    1   *                                                                              *
             11023    1   *                          VX$BIT_MAP                                             *
             11024    1   *                                                                              *
             11025    1   *******************************************************************************/

       35    11029        %BIT_MAP( NAME=VX$BIT_MAP, STCLASS="BASED(BIT$)");
             11030    1   DCL VX$BIT_MAP(0:255/*@MAX_IS_K1*/)         BIT(1)    UNAL BASED(BIT$);
       36    11032        %BANNER( ARG="BIT MAPs for data segments" );
             11033        %LSET LISTDIR='0'B;

             11040    1   /*******************************************************************************
             11041    1   *                                                                              *
             11042    1   *                          BIT MAPs for data segments                             *
             11043    1   *                                                                              *
             11044    1   *******************************************************************************/

       37    11048        %BIT_MAP( NAME=DS3_BIT_MAP, STCLASS=STATIC, INT_BIT="INIT('0'B*0)" );
             11049    1   DCL DS3_BIT_MAP(0:255/*@MAX_IS_K1*/)         BIT(1)    UNAL STATIC   INIT('0'B*0);
       38    11051        %BIT_MAP( NAME=DS4_BIT_MAP, STCLASS=STATIC, INT_BIT="INIT('0'B*0)" );
             11052    1   DCL DS4_BIT_MAP(0:255/*@MAX_IS_K1*/)         BIT(1)    UNAL STATIC   INIT('0'B*0);
       39    11054        %BIT_MAP( NAME=DS5_BIT_MAP, STCLASS=STATIC, INT_BIT="INIT('0'B*0)" );
             11055    1   DCL DS5_BIT_MAP(0:255/*@MAX_IS_K1*/)         BIT(1)    UNAL STATIC   INIT('0'B*0);
       40    11057        %BIT_MAP( NAME=DS6_BIT_MAP, STCLASS=STATIC, INT_BIT="INIT('0'B*0)" );
             11058    1   DCL DS6_BIT_MAP(0:255/*@MAX_IS_K1*/)         BIT(1)    UNAL STATIC   INIT('0'B*0);
       41    11060        %BIT_MAP( NAME=DS7_BIT_MAP, STCLASS=STATIC, INT_BIT="INIT('0'B*0)" );
             11061    1   DCL DS7_BIT_MAP(0:255/*@MAX_IS_K1*/)         BIT(1)    UNAL STATIC   INIT('0'B*0);
       42    11063        %BIT_MAP( NAME=DS8_BIT_MAP, STCLASS=STATIC, INT_BIT="INIT('0'B*0)" );
             11064    1   DCL DS8_BIT_MAP(0:255/*@MAX_IS_K1*/)         BIT(1)    UNAL STATIC   INIT('0'B*0);
       43    11066        %P;
             11067        %LSET LISTDIR='0'B;

             11074    1   /*******************************************************************************
             11075    1   *                                                                              *
             11076    1   *                          PARAMETERS                                             *
             11077    1   *                                                                              *
             11078    1   *******************************************************************************/

PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:25   
       44    11082    1   DCL NODE$           PTR       ALIGNED;
       45    11083    1   DCL SEGID# REDEF NODE$  UBIN  ALIGNED;
       46    11084    1   DCL BUFTYP          UBIN(36)  ALIGNED   ;
       47    11085    1   DCL BUFINX          UBIN(36)  ALIGNED   ;
       48    11086    1   DCL IN_PAGE#        UBIN(36)  ALIGNED   ;
       49    11087        %PTR;
             11088        %LSET LISTDIR='0'B;

             11095    1   /*******************************************************************************
             11096    1   *                                                                              *
             11097    1   *                          PTR                                                 *
             11098    1   *                                                                              *
             11099    1   *******************************************************************************/

       50    11103    1   DCL IMAGE$          PTR       ALIGNED   AUTO;
       51    11104    1   DCL BIT$            PTR       ALIGNED   AUTO;
       52    11105    1   DCL WHERE$          PTR       ALIGNED   AUTO;
       53    11106    1   DCL BUF_NODE$       PTR       ALIGNED   AUTO;
       54    11107    1   DCL SEG_BIT_MAP$(0:5) PTR     ALIGNED   CONSTANT INIT(
       55    11108    1         ADDR(DS3_BIT_MAP), ADDR(DS4_BIT_MAP), ADDR(DS5_BIT_MAP), ADDR(DS6_BIT_MAP),
             11108                  ADDR(DS7_BIT_MAP), ADDR(DS8_BIT_MAP) );
       56    11109        %U;
             11110        %LSET LISTDIR='0'B;

             11117    1   /*******************************************************************************
             11118    1   *                                                                              *
             11119    1   *                          UBIN                                                 *
             11120    1   *                                                                              *
             11121    1   *******************************************************************************/

       57    11125    1   DCL CPAGE#          UBIN(36)  ALIGNED   AUTO;
       58    11126    1   DCL TYPE            UBIN(36)  ALIGNED   AUTO;
       59    11127    1   DCL ADR             UBIN(36)  ALIGNED   AUTO;
       60    11128    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
       61    11129    1   DCL SHOVE           UBIN(36)  ALIGNED   AUTO;
       62    11130    1   DCL SEGMENT         UBIN(36)  ALIGNED   AUTO;
       63    11131    1   DCL NODE#           UBIN(36)  ALIGNED   AUTO;
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:26   
       64    11132        %PLIST;
       65    11133        %EJECT;
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:27   
       66    11134    1         VX_IMAGE$ = VX_IMAGE_PTR$(BUFTYP);
             11134                  /* Get pointer to appropriate buffer variables */

  11134  4 000002   200004 470500                    LDP0    @BUFTYP,,AUTO
         4 000003   000000 720100                    LXL0    0,,PR0
         4 000004   000000 236010 xsym               LDQ     VX_IMAGE_PTR$,X0
         4 000005   000000 756000 xsym               STQ     VX_IMAGE$

       67    11135    1         TYPE = 10;

  11135  4 000006   000012 235007                    LDA     10,DL
         4 000007   200014 755100                    STA     TYPE,,AUTO

       68    11136    2         DO CASE( BUFTYP  );

  11136  4 000010   000000 235100                    LDA     0,,PR0
         4 000011   000003 115007                    CMPA    3,DL
         4 000012   000014 602005 4                  TNC     s:11136+4,AL
         4 000013   000040 710000 4                  TRA     s:11145
         4 000014   000017 710000 4                  TRA     s:11138
         4 000015   000024 710000 4                  TRA     s:11140
         4 000016   000031 710000 4                  TRA     s:11142

       69    11137    2           CASE( 0/*@DATA*/ );

       70    11138    2             BIT$ = ADDR( NODE$ -> VX$NODE.BIT_MAP.DATA );

  11138  4 000017   200003 471500                    LDP1    @NODE$,,AUTO
         4 000020   100000 473500                    LDP3    0,,PR1
         4 000021   300100 634500                    EPPR4   64,,PR3
         4 000022   200010 454500                    STP4    BIT$,,AUTO
         4 000023   000051 710000 4                  TRA     s:11150

       71    11139    2           CASE( 1/*@PROC*/ );

       72    11140    2             BIT$ = ADDR( NODE$ -> VX$NODE.BIT_MAP.RPROC );

PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:28   
  11140  4 000024   200003 471500                    LDP1    @NODE$,,AUTO
         4 000025   100000 473500                    LDP3    0,,PR1
         4 000026   300110 634500                    EPPR4   72,,PR3
         4 000027   200010 454500                    STP4    BIT$,,AUTO
         4 000030   000051 710000 4                  TRA     s:11150

       73    11141    2           CASE( 2/*@ROS*/ );

       74    11142    2             BIT$ = ADDR( NODE$ -> VX$NODE.BIT_MAP.ROS );

  11142  4 000031   200003 471500                    LDP1    @NODE$,,AUTO
         4 000032   100000 473500                    LDP3    0,,PR1
         4 000033   300120 634500                    EPPR4   80,,PR3
         4 000034   200010 454500                    STP4    BIT$,,AUTO

       75    11143    2             TYPE = 30;

  11143  4 000035   000036 235007                    LDA     30,DL
         4 000036   200014 755100                    STA     TYPE,,AUTO
         4 000037   000051 710000 4                  TRA     s:11150

       76    11144    2           CASE( ELSE );

       77    11145    2             SEGMENT = BUFTYP - 3/*@DS3*/;

  11145  4 000040   000003 135007                    SBLA    3,DL
         4 000041   200020 755100                    STA     SEGMENT,,AUTO

       78    11146    2             BIT$ = SEG_BIT_MAP$(SEGMENT);

  11146  4 000042   000000 236005 3                  LDQ     SEG_BIT_MAP$,AL
         4 000043   200010 756100                    STQ     BIT$,,AUTO

       79    11147    2             NODE# = SEGID#;

  11147  4 000044   200003 471500                    LDP1    @NODE$,,AUTO
         4 000045   100000 235100                    LDA     0,,PR1
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:29   
         4 000046   200021 755100                    STA     NODE#,,AUTO

       80    11148    2             TYPE  = 18;

  11148  4 000047   000022 235007                    LDA     18,DL
         4 000050   200014 755100                    STA     TYPE,,AUTO

       81    11149    2           END;

       82    11150    2         IF BIT$ -> VX$BIT_MAP( IN_PAGE# ) THEN DO;

  11150  4 000051   200006 473500                    LDP3    @IN_PAGE#,,AUTO
         4 000052   300000 235100                    LDA     0,,PR3
         4 000053   200010 474500                    LDP4    BIT$,,AUTO
         4 000054   000000 066505                    CMPB    filb='0'B
         4 000055   400000 000001                    BDSC    0,A,PR4                  by=0,bit=0,n=1
         4 000056   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         4 000057   000176 600000 4                  TZE     s:11178

       83    11151    2             WHERE$ = VX$IMAGE.START_A$(BUFINX);

  11151  4 000060   200005 475500                    LDP5    @BUFINX,,AUTO
         4 000061   500000 720100                    LXL0    0,,PR5
         4 000062   000000 476400 xsym               LDP6    VX_IMAGE$
         4 000063   600002 236110                    LDQ     2,X0,PR6
         4 000064   200011 756100                    STQ     WHERE$,,AUTO

       84    11152    2             SIZE = 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;

  11152  4 000065   002000 235007                    LDA     1024,DL
         4 000066   200016 755100                    STA     SIZE,,AUTO

       85    11153    2             ADR = IN_PAGE# * 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;

  11153  4 000067   300000 235100                    LDA     0,,PR3
         4 000070   000012 735000                    ALS     10
         4 000071   200015 755100                    STA     ADR,,AUTO
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:30   

       86    11154    3             IF BUFTYP >= 3/*@DS3*/ THEN DO;

  11154  4 000072   000000 235100                    LDA     0,,PR0
         4 000073   000003 115007                    CMPA    3,DL
         4 000074   000107 602000 4                  TNC     s:11161

       87    11155        /* Check if ending page */
       88    11156    3                 IF IN_PAGE# = VX_SEG_EPAGE#(SEGMENT) THEN

  11156  4 000075   200020 720100                    LXL0    SEGMENT,,AUTO
         4 000076   300000 236100                    LDQ     0,,PR3
         4 000077   000000 116010 xsym               CMPQ    VX_SEG_EPAGE#,X0
         4 000100   000147 601000 4                  TNZ     s:11175

       89    11157    3                     SIZE = MOD( VX_SEG_SIZE(SEGMENT)-1, 1024
             11157                              /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ ) + 1;

  11157  4 000101   000000 236010 xsym               LDQ     VX_SEG_SIZE,X0
         4 000102   000001 136007                    SBLQ    1,DL
         4 000103   002000 506007                    DIV     1024,DL
         4 000104   000001 035007                    ADLA    1,DL
         4 000105   200016 755100                    STA     SIZE,,AUTO

       90    11158    3                END;

  11158  4 000106   000147 710000 4                  TRA     s:11175

       91    11159    3             ELSE DO;

       92    11160        /* Check if starting page */
       93    11161    4                 IF NODE$ -> VX$NODE.START_PAGE#_A(BUFTYP) = IN_PAGE# THEN DO;

  11161  4 000107   100000 477500                    LDP7    0,,PR1
         4 000110   000000 720100                    LXL0    0,,PR0
         4 000111   700020 236110                    LDQ     16,X0,PR7
         4 000112   000132 604000 4                  TMI     s:11169
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:31   
         4 000113   300000 116100                    CMPQ    0,,PR3
         4 000114   000132 601000 4                  TNZ     s:11169

       94    11162    4                     SHOVE = MOD( NODE$ -> VX$NODE.ADDR_START_A(BUFTYP),

  11162  4 000115   700012 236110                    LDQ     10,X0,PR7
         4 000116   002000 506007                    DIV     1024,DL
         4 000117   200017 755100                    STA     SHOVE,,AUTO

       95    11163    4                             1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ );
       96    11164    4                     WHERE$ = PINCRW( WHERE$, SHOVE );

  11164  4 000120   200017 236100                    LDQ     SHOVE,,AUTO
         4 000121   000022 736000                    QLS     18
         4 000122   200011 036100                    ADLQ    WHERE$,,AUTO
         4 000123   200011 756100                    STQ     WHERE$,,AUTO

       97    11165    4                     SIZE = 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ - SHOVE;

  11165  4 000124   000027 675000 xsym               ERA     B_VECTNIL+23
         4 000125   002001 035007                    ADLA    1025,DL
         4 000126   200016 755100                    STA     SIZE,,AUTO

       98    11166    4                     ADR = ADR + SHOVE;

  11166  4 000127   200015 236100                    LDQ     ADR,,AUTO
         4 000130   200017 036100                    ADLQ    SHOVE,,AUTO
         4 000131   200015 756100                    STQ     ADR,,AUTO

       99    11167    4                    END;

      100    11168        /*              Check if ending page               */
      101    11169    4                 IF NODE$ -> VX$NODE.STOP_PAGE#_A(BUFTYP) = IN_PAGE# THEN DO;

  11169  4 000132   100000 477500                    LDP7    0,,PR1
         4 000133   000000 720100                    LXL0    0,,PR0
         4 000134   700023 236110                    LDQ     19,X0,PR7
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:32   
         4 000135   000144 604000 4                  TMI     s:11173
         4 000136   300000 116100                    CMPQ    0,,PR3
         4 000137   000144 601000 4                  TNZ     s:11173

      102    11170    4                     SIZE = MOD( NODE$ -> VX$NODE.ADDR_STOP_A(BUFTYP),

  11170  4 000140   700015 236110                    LDQ     13,X0,PR7
         4 000141   002000 506007                    DIV     1024,DL
         4 000142   000001 035007                    ADLA    1,DL
         4 000143   200016 755100                    STA     SIZE,,AUTO

      103    11171    4                             1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ )   +   1;
      104    11172    4                    END;

      105    11173    3                 NODE# = NODE$ -> VX$NODE.NUM;

  11173  4 000144   100000 477500                    LDP7    0,,PR1
         4 000145   700010 235100                    LDA     8,,PR7
         4 000146   200021 755100                    STA     NODE#,,AUTO

      106    11174    3                END;

      107    11175    2             CALL VXK$KEY( 1/*@RF*/, TYPE, NODE#, ADR );

  11175  4 000147   200015 637500                    EPPR7   ADR,,AUTO
         4 000150   200025 457500                    STP7    NODE#+4,,AUTO
         4 000151   200021 630500                    EPPR0   NODE#,,AUTO
         4 000152   200024 450500                    STP0    NODE#+3,,AUTO
         4 000153   200014 630500                    EPPR0   TYPE,,AUTO
         4 000154   200023 450500                    STP0    NODE#+2,,AUTO
         4 000155   000000 236000 5                  LDQ     0
         4 000156   200022 756100                    STQ     NODE#+1,,AUTO
         4 000157   200022 630500                    EPPR0   NODE#+1,,AUTO
         4 000160   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 000161   000000 701000 xent               TSX1    VXK$KEY
         4 000162   000000 011000                    NOP     0

PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:33   
      108    11176    2             CALL VXI$READ( 1/*@RF*/, WHERE$, SIZE, 1/*@RF*/ );

  11176  4 000163   000000 236000 5                  LDQ     0
         4 000164   200025 756100                    STQ     NODE#+4,,AUTO
         4 000165   200016 630500                    EPPR0   SIZE,,AUTO
         4 000166   200024 450500                    STP0    NODE#+3,,AUTO
         4 000167   200011 631500                    EPPR1   WHERE$,,AUTO
         4 000170   200023 451500                    STP1    NODE#+2,,AUTO
         4 000171   200022 756100                    STQ     NODE#+1,,AUTO
         4 000172   200022 630500                    EPPR0   NODE#+1,,AUTO
         4 000173   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 000174   000000 701000 xent               TSX1    VXI$READ
         4 000175   000000 011000                    NOP     0

      109    11177    2            END;

      110    11178    1         VX$IMAGE.CPAGE#_A(BUFINX) = IN_PAGE#;

  11178  4 000176   200005 470500                    LDP0    @BUFINX,,AUTO
         4 000177   000000 720100                    LXL0    0,,PR0
         4 000200   200006 471500                    LDP1    @IN_PAGE#,,AUTO
         4 000201   100000 235100                    LDA     0,,PR1
         4 000202   000000 473400 xsym               LDP3    VX_IMAGE$
         4 000203   300000 755110                    STA     0,X0,PR3

      111    11179    1         VX$IMAGE.NODE_A$(BUFINX) = NODE$;

  11179  4 000204   000000 720100                    LXL0    0,,PR0
         4 000205   200003 473500                    LDP3    @NODE$,,AUTO
         4 000206   300000 236100                    LDQ     0,,PR3
         4 000207   000000 474400 xsym               LDP4    VX_IMAGE$
         4 000210   400006 756110                    STQ     6,X0,PR4

      112    11180    1         RETURN;

  11180  4 000211   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:34   
      113    11181        %EJECT;
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:35   
      114    11182    1   VXU$PAGEOUT:
      115    11183    1         ENTRY( NODE$, BUFTYP, BUFINX );

  11183  4 000212   000000 700200 xent  VXU$PAGEOUT  TSX0  ! X66_AUTO_4
         4 000213   000026 000004                    ZERO    22,4

      116    11184    1         VX_IMAGE$ = VX_IMAGE_PTR$(BUFTYP);
             11184                  /* Get pointer to appropriate buffer variables */

  11184  4 000214   200004 470500                    LDP0    @BUFTYP,,AUTO
         4 000215   000000 720100                    LXL0    0,,PR0
         4 000216   000000 236010 xsym               LDQ     VX_IMAGE_PTR$,X0
         4 000217   000000 756000 xsym               STQ     VX_IMAGE$

      117    11185
      118    11186    1         BUF_NODE$ = VX$IMAGE.NODE_A$(BUFINX);

  11186  4 000220   200005 471500                    LDP1    @BUFINX,,AUTO
         4 000221   100000 720100                    LXL0    0,,PR1
         4 000222   000000 473400 xsym               LDP3    VX_IMAGE$
         4 000223   300006 236110                    LDQ     6,X0,PR3
         4 000224   200012 756100                    STQ     BUF_NODE$,,AUTO

      119    11187    1         TYPE = 10;

  11187  4 000225   000012 235007                    LDA     10,DL
         4 000226   200014 755100                    STA     TYPE,,AUTO

      120    11188    2         DO CASE( BUFTYP  );

  11188  4 000227   000000 235100                    LDA     0,,PR0
         4 000230   000003 115007                    CMPA    3,DL
         4 000231   000233 602005 4                  TNC     s:11188+4,AL
         4 000232   000251 710000 4                  TRA     s:11197
         4 000233   000236 710000 4                  TRA     s:11190
         4 000234   000241 710000 4                  TRA     s:11192
         4 000235   000244 710000 4                  TRA     s:11194
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:36   

      121    11189    2           CASE( 0/*@DATA*/ );

      122    11190    2             BIT$ = ADDR( BUF_NODE$ -> VX$NODE.BIT_MAP.DATA );

  11190  4 000236   000100 036003                    ADLQ    64,DU
         4 000237   200010 756100                    STQ     BIT$,,AUTO
         4 000240   000262 710000 4                  TRA     s:11202

      123    11191    2           CASE( 1/*@PROC*/ );

      124    11192    2             BIT$ = ADDR( BUF_NODE$ -> VX$NODE.BIT_MAP.RPROC );

  11192  4 000241   000110 036003                    ADLQ    72,DU
         4 000242   200010 756100                    STQ     BIT$,,AUTO
         4 000243   000262 710000 4                  TRA     s:11202

      125    11193    2           CASE( 2/*@ROS*/ );

      126    11194    2             BIT$ = ADDR( BUF_NODE$ -> VX$NODE.BIT_MAP.ROS );

  11194  4 000244   000120 036003                    ADLQ    80,DU
         4 000245   200010 756100                    STQ     BIT$,,AUTO

      127    11195    2             TYPE = 30;

  11195  4 000246   000036 235007                    LDA     30,DL
         4 000247   200014 755100                    STA     TYPE,,AUTO
         4 000250   000262 710000 4                  TRA     s:11202

      128    11196    2           CASE( ELSE );

      129    11197    2             SEGMENT = BUFTYP - 3/*@DS3*/;

  11197  4 000251   000003 135007                    SBLA    3,DL
         4 000252   200020 755100                    STA     SEGMENT,,AUTO

PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:37   
      130    11198    2             BIT$ = SEG_BIT_MAP$(SEGMENT);

  11198  4 000253   000000 236005 3                  LDQ     SEG_BIT_MAP$,AL
         4 000254   200010 756100                    STQ     BIT$,,AUTO

      131    11199    2             NODE# = SEGID#;

  11199  4 000255   200003 474500                    LDP4    @NODE$,,AUTO
         4 000256   400000 235100                    LDA     0,,PR4
         4 000257   200021 755100                    STA     NODE#,,AUTO

      132    11200    2             TYPE  = 18;

  11200  4 000260   000022 235007                    LDA     18,DL
         4 000261   200014 755100                    STA     TYPE,,AUTO

      133    11201    2           END;

      134    11202    1         CPAGE# = VX$IMAGE.CPAGE#_A(BUFINX); /* Get page # */

  11202  4 000262   100000 720100                    LXL0    0,,PR1
         4 000263   300000 235110                    LDA     0,X0,PR3
         4 000264   200013 755100                    STA     CPAGE#,,AUTO

      135    11203    1         WHERE$ = VX$IMAGE.START_A$(BUFINX);

  11203  4 000265   300002 236110                    LDQ     2,X0,PR3
         4 000266   200011 756100                    STQ     WHERE$,,AUTO

      136    11204    1         SIZE = 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;

  11204  4 000267   002000 235007                    LDA     1024,DL
         4 000270   200016 755100                    STA     SIZE,,AUTO

      137    11205    1         ADR = CPAGE# * 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/;

  11205  4 000271   200013 235100                    LDA     CPAGE#,,AUTO
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:38   
         4 000272   000012 735000                    ALS     10
         4 000273   200015 755100                    STA     ADR,,AUTO

      138    11206    2         IF BUFTYP >= 3/*@DS3*/ THEN DO;

  11206  4 000274   000000 235100                    LDA     0,,PR0
         4 000275   000003 115007                    CMPA    3,DL
         4 000276   000311 602000 4                  TNC     s:11213

      139    11207        /*  Check if ending page */
      140    11208    2             IF CPAGE# = VX_SEG_EPAGE#(SEGMENT) THEN

  11208  4 000277   200020 720100                    LXL0    SEGMENT,,AUTO
         4 000300   200013 236100                    LDQ     CPAGE#,,AUTO
         4 000301   000000 116010 xsym               CMPQ    VX_SEG_EPAGE#,X0
         4 000302   000360 601000 4                  TNZ     s:11232

      141    11209    2                 SIZE = MOD( VX_SEG_SIZE(SEGMENT)-1, 1024
             11209                          /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ ) + 1;

  11209  4 000303   000000 236010 xsym               LDQ     VX_SEG_SIZE,X0
         4 000304   000001 136007                    SBLQ    1,DL
         4 000305   002000 506007                    DIV     1024,DL
         4 000306   000001 035007                    ADLA    1,DL
         4 000307   200016 755100                    STA     SIZE,,AUTO

      142    11210    2            END;

  11210  4 000310   000360 710000 4                  TRA     s:11232

      143    11211    2         ELSE DO;

      144    11212        /* Check if starting page */
      145    11213    3             IF BUF_NODE$ -> VX$NODE.START_PAGE#_A(BUFTYP) = CPAGE# THEN DO;

  11213  4 000311   000000 720100                    LXL0    0,,PR0
         4 000312   200012 474500                    LDP4    BUF_NODE$,,AUTO
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:39   
         4 000313   400020 236110                    LDQ     16,X0,PR4
         4 000314   000334 604000 4                  TMI     s:11221
         4 000315   200013 116100                    CMPQ    CPAGE#,,AUTO
         4 000316   000334 601000 4                  TNZ     s:11221

      146    11214    3                 SHOVE = MOD( BUF_NODE$ -> VX$NODE.ADDR_START_A(BUFTYP),

  11214  4 000317   400012 236110                    LDQ     10,X0,PR4
         4 000320   002000 506007                    DIV     1024,DL
         4 000321   200017 755100                    STA     SHOVE,,AUTO

      147    11215    3                         1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ );
      148    11216    3                 WHERE$ = PINCRW( WHERE$, SHOVE );

  11216  4 000322   200017 236100                    LDQ     SHOVE,,AUTO
         4 000323   000022 736000                    QLS     18
         4 000324   200011 036100                    ADLQ    WHERE$,,AUTO
         4 000325   200011 756100                    STQ     WHERE$,,AUTO

      149    11217    3                 SIZE = 1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ - SHOVE;

  11217  4 000326   000027 675000 xsym               ERA     B_VECTNIL+23
         4 000327   002001 035007                    ADLA    1025,DL
         4 000330   200016 755100                    STA     SIZE,,AUTO

      150    11218    3                 ADR = ADR + SHOVE;

  11218  4 000331   200015 236100                    LDQ     ADR,,AUTO
         4 000332   200017 036100                    ADLQ    SHOVE,,AUTO
         4 000333   200015 756100                    STQ     ADR,,AUTO

      151    11219    3                END;

      152    11220        /*              Check if ending page               */
      153    11221    3             IF BUF_NODE$ -> VX$NODE.STOP_PAGE#_A(BUFTYP) = CPAGE# THEN DO;

  11221  4 000334   000000 720100                    LXL0    0,,PR0
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:40   
         4 000335   400023 236110                    LDQ     19,X0,PR4
         4 000336   000356 604000 4                  TMI     s:11230
         4 000337   200013 116100                    CMPQ    CPAGE#,,AUTO
         4 000340   000356 601000 4                  TNZ     s:11230

      154    11222    3                 IF BUF_NODE$ -> VX$NODE.START_PAGE#_A(BUFTYP) = CPAGE#

  11222  4 000341   400020 236110                    LDQ     16,X0,PR4
         4 000342   000352 604000 4                  TMI     s:11227
         4 000343   200013 116100                    CMPQ    CPAGE#,,AUTO
         4 000344   000352 601000 4                  TNZ     s:11227

      155    11223    3                 THEN
      156    11224    3                     SIZE = BUF_NODE$ -> VX$NODE.ADDR_STOP_A(BUFTYP)

  11224  4 000345   400015 236110                    LDQ     13,X0,PR4
         4 000346   400012 136110                    SBLQ    10,X0,PR4
         4 000347   000001 036007                    ADLQ    1,DL
         4 000350   200016 756100                    STQ     SIZE,,AUTO
         4 000351   000356 710000 4                  TRA     s:11230

      157    11225    3                             - BUF_NODE$ -> VX$NODE.ADDR_START_A(BUFTYP) + 1;
      158    11226    3                 ELSE
      159    11227    3                     SIZE = MOD( BUF_NODE$ -> VX$NODE.ADDR_STOP_A(BUFTYP),

  11227  4 000352   400015 236110                    LDQ     13,X0,PR4
         4 000353   002000 506007                    DIV     1024,DL
         4 000354   000001 035007                    ADLA    1,DL
         4 000355   200016 755100                    STA     SIZE,,AUTO

      160    11228    3                             1024 /*VX_IMAGE_BUFFER_SIZE @BUF_SIZE*/ ) + 1;
      161    11229    3                END;

      162    11230    2             NODE# = BUF_NODE$ -> VX$NODE.NUM;

  11230  4 000356   400010 235100                    LDA     8,,PR4
         4 000357   200021 755100                    STA     NODE#,,AUTO
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:41   

      163    11231    2            END;

      164    11232    1         CALL VXK$KEY( 1/*@RF*/, TYPE, NODE#, ADR  );

  11232  4 000360   200015 634500                    EPPR4   ADR,,AUTO
         4 000361   200025 454500                    STP4    NODE#+4,,AUTO
         4 000362   200021 635500                    EPPR5   NODE#,,AUTO
         4 000363   200024 455500                    STP5    NODE#+3,,AUTO
         4 000364   200014 636500                    EPPR6   TYPE,,AUTO
         4 000365   200023 456500                    STP6    NODE#+2,,AUTO
         4 000366   000000 236000 5                  LDQ     0
         4 000367   200022 756100                    STQ     NODE#+1,,AUTO
         4 000370   200022 630500                    EPPR0   NODE#+1,,AUTO
         4 000371   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 000372   000000 701000 xent               TSX1    VXK$KEY
         4 000373   000000 011000                    NOP     0

      165    11233    1         CALL VXI$WRITE(  1/*@RF*/, WHERE$, SIZE, 1/*@RF*/  );

  11233  4 000374   000000 236000 5                  LDQ     0
         4 000375   200025 756100                    STQ     NODE#+4,,AUTO
         4 000376   200016 630500                    EPPR0   SIZE,,AUTO
         4 000377   200024 450500                    STP0    NODE#+3,,AUTO
         4 000400   200011 631500                    EPPR1   WHERE$,,AUTO
         4 000401   200023 451500                    STP1    NODE#+2,,AUTO
         4 000402   200022 756100                    STQ     NODE#+1,,AUTO
         4 000403   200022 630500                    EPPR0   NODE#+1,,AUTO
         4 000404   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 000405   000000 701000 xent               TSX1    VXI$WRITE
         4 000406   000000 011000                    NOP     0

      166    11234    1         BIT$ -> VX$BIT_MAP( CPAGE# ) = '1'B;

  11234  4 000407   200010 470500                    LDP0    BIT$,,AUTO
         4 000410   200013 235100                    LDA     CPAGE#,,AUTO
         4 000411   003105 060400                    CSL     bolr='003'O
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:42   
         4 000412   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
         4 000413   000000 000001                    BDSC    0,A,PR0                  by=0,bit=0,n=1

      167    11235    1         VX$IMAGE.CPAGE#_A(BUFINX) = -1;

  11235  4 000414   200005 471500                    LDP1    @BUFINX,,AUTO
         4 000415   100000 720100                    LXL0    0,,PR1
         4 000416   000001 336007                    LCQ     1,DL
         4 000417   000000 473400 xsym               LDP3    VX_IMAGE$
         4 000420   300000 756110                    STQ     0,X0,PR3

      168    11236    1         VX$IMAGE.NODE_A$(BUFINX) = ADDR(NIL);

  11236  4 000421   100000 720100                    LXL0    0,,PR1
         4 000422   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 000423   000000 473400 xsym               LDP3    VX_IMAGE$
         4 000424   300006 756110                    STQ     6,X0,PR3

      169    11237    1   END;

  11237  4 000425   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:43   
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXU$PAGEIN.
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:44   

 **** Variables and constants ****

  ****  Section 002  Data  VXU$PAGEIN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT         r     1 DS3_BIT_MAP(0:255)
    10-0-0/b BIT         r     1 DS4_BIT_MAP(0:255)
    20-0-0/b BIT         r     1 DS5_BIT_MAP(0:255)
    30-0-0/b BIT         r     1 DS6_BIT_MAP(0:255)
    40-0-0/b BIT         r     1 DS7_BIT_MAP(0:255)
    50-0-0/b BIT         r     1 DS8_BIT_MAP(0:255)

  ****  Section 003 RoData VXU$PAGEIN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 SEG_BIT_MAP$(0:5)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @BUFINX                    4-0-0/w PTR         r     1 @BUFTYP
     6-0-0/w PTR         r     1 @IN_PAGE#                  3-0-0/w PTR         r     1 @NODE$
    15-0-0/w UBIN        r     1 ADR                       10-0-0/w PTR         r     1 BIT$
    *0-0-0/w UBIN        r     1 BUFINX                    *0-0-0/w UBIN        r     1 BUFTYP
    12-0-0/w PTR         r     1 BUF_NODE$                 13-0-0/w UBIN        r     1 CPAGE#
    *0-0-0/w UBIN        r     1 IN_PAGE#                  21-0-0/w UBIN        r     1 NODE#
    *0-0-0/w PTR         r     1 NODE$                     *0-0-0/w UBIN        r     1 SEGID#
    20-0-0/w UBIN        r     1 SEGMENT                   17-0-0/w UBIN        r     1 SHOVE
    16-0-0/w UBIN        r     1 SIZE                      14-0-0/w UBIN        r     1 TYPE
    11-0-0/w PTR         r     1 WHERE$

PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:45   
  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 VX_IMAGE$
     0-0-0/w PTR         r     1 VX_IMAGE_PTR$(0:8)
     0-0-0/w UBIN        r     1 VX_SEG_EPAGE#(0:5)
     0-0-0/w SBIN        r     1 VX_SEG_SIZE(0:5)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT         r     1 VX$BIT_MAP(0:255)
     0-0-0/w STRC(432)   r     1 VX$IMAGE                   0-0-0/w STRC(3672)  r     1 VX$NODE


   Procedure VXU$PAGEIN requires 278 words for executable code.
   Procedure VXU$PAGEIN requires 22 words of local(AUTO) storage.

    No errors detected in file VXU$PAGEIN.:E05TSI    .
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:46   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:47   
          MINI XREF LISTING

ADR
     11127**DCL     11153<<ASSIGN  11166<<ASSIGN  11166>>ASSIGN  11175<>CALL    11205<<ASSIGN  11218<<ASSIGN
     11218>>ASSIGN  11232<>CALL
BIT$
     11104**DCL     11030--IMP-PTR 11138<<ASSIGN  11140<<ASSIGN  11142<<ASSIGN  11146<<ASSIGN  11150>>IF
     11190<<ASSIGN  11192<<ASSIGN  11194<<ASSIGN  11198<<ASSIGN  11234>>ASSIGN
BUFINX
     11085**DCL        20--PROC    11151>>ASSIGN  11178>>ASSIGN  11179>>ASSIGN  11182--ENTRY   11186>>ASSIGN
     11202>>ASSIGN  11203>>ASSIGN  11235>>ASSIGN  11236>>ASSIGN
BUFTYP
     11084**DCL        20--PROC    11134>>ASSIGN  11136>>DOCASE  11145>>ASSIGN  11154>>IF      11161>>IF
     11162>>ASSIGN  11169>>IF      11170>>ASSIGN  11182--ENTRY   11184>>ASSIGN  11188>>DOCASE  11197>>ASSIGN
     11206>>IF      11213>>IF      11214>>ASSIGN  11221>>IF      11222>>IF      11224>>ASSIGN  11224>>ASSIGN
     11227>>ASSIGN
BUF_NODE$
     11106**DCL     11186<<ASSIGN  11190>>ASSIGN  11192>>ASSIGN  11194>>ASSIGN  11213>>IF      11214>>ASSIGN
     11221>>IF      11222>>IF      11224>>ASSIGN  11224>>ASSIGN  11227>>ASSIGN  11230>>ASSIGN
CPAGE#
     11125**DCL     11202<<ASSIGN  11205>>ASSIGN  11208>>IF      11213>>IF      11221>>IF      11222>>IF
     11234>>ASSIGN
DS3_BIT_MAP
     11049**DCL     11108--DCLINIT
DS4_BIT_MAP
     11052**DCL     11108--DCLINIT
DS5_BIT_MAP
     11055**DCL     11108--DCLINIT
DS6_BIT_MAP
     11058**DCL     11108--DCLINIT
DS7_BIT_MAP
     11061**DCL     11108--DCLINIT
DS8_BIT_MAP
     11064**DCL     11108--DCLINIT
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:48   
IN_PAGE#
     11086**DCL        20--PROC    11150>>IF      11153>>ASSIGN  11156>>IF      11161>>IF      11169>>IF
     11178>>ASSIGN
NODE#
     11131**DCL     11147<<ASSIGN  11173<<ASSIGN  11175<>CALL    11199<<ASSIGN  11230<<ASSIGN  11232<>CALL
NODE$
     11082**DCL        20--PROC    11083--REDEF   11138>>ASSIGN  11140>>ASSIGN  11142>>ASSIGN  11161>>IF
     11162>>ASSIGN  11169>>IF      11170>>ASSIGN  11173>>ASSIGN  11179>>ASSIGN  11182--ENTRY
SEGID#
     11083**DCL     11147>>ASSIGN  11199>>ASSIGN
SEGMENT
     11130**DCL     11145<<ASSIGN  11146>>ASSIGN  11156>>IF      11157>>ASSIGN  11197<<ASSIGN  11198>>ASSIGN
     11208>>IF      11209>>ASSIGN
SEG_BIT_MAP$
     11107**DCL     11146>>ASSIGN  11198>>ASSIGN
SHOVE
     11129**DCL     11162<<ASSIGN  11164>>ASSIGN  11165>>ASSIGN  11166>>ASSIGN  11214<<ASSIGN  11216>>ASSIGN
     11217>>ASSIGN  11218>>ASSIGN
SIZE
     11128**DCL     11152<<ASSIGN  11157<<ASSIGN  11165<<ASSIGN  11170<<ASSIGN  11176<>CALL    11204<<ASSIGN
     11209<<ASSIGN  11217<<ASSIGN  11224<<ASSIGN  11227<<ASSIGN  11233<>CALL
TYPE
     11126**DCL     11135<<ASSIGN  11143<<ASSIGN  11148<<ASSIGN  11175<>CALL    11187<<ASSIGN  11195<<ASSIGN
     11200<<ASSIGN  11232<>CALL
VX$BIT_MAP
     11030**DCL     11150>>IF      11234<<ASSIGN
VX$IMAGE.CPAGE#_A
     10992**DCL     10993--REDEF   11178<<ASSIGN  11202>>ASSIGN  11235<<ASSIGN
VX$IMAGE.NODE_A$
     11004**DCL     11005--REDEF   11179<<ASSIGN  11186>>ASSIGN  11236<<ASSIGN
VX$IMAGE.START_A$
     10996**DCL     10997--REDEF   11151>>ASSIGN  11203>>ASSIGN
VX$IMAGE.STOP_A$
     11000**DCL     11001--REDEF
VX$NODE.ADDR_START_A
     10783**DCL     10784--REDEF   11162>>ASSIGN  11214>>ASSIGN  11224>>ASSIGN
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:49   
VX$NODE.ADDR_STOP_A
     10788**DCL     10789--REDEF   11170>>ASSIGN  11224>>ASSIGN  11227>>ASSIGN
VX$NODE.BIT_MAP.DATA
     10854**DCL     11138--ASSIGN  11190--ASSIGN
VX$NODE.BIT_MAP.ROS
     10858**DCL     11142--ASSIGN  11194--ASSIGN
VX$NODE.BIT_MAP.RPROC
     10856**DCL     11140--ASSIGN  11192--ASSIGN
VX$NODE.L_PREV_SIZE
     10841**DCL     10852--REDEF
VX$NODE.L_SC_START
     10860**DCL     10865--REDEF
VX$NODE.L_SC_STOP
     10866**DCL     10871--REDEF
VX$NODE.L_SIZE
     10829**DCL     10840--REDEF
VX$NODE.L_START
     10805**DCL     10816--REDEF
VX$NODE.L_STOP
     10817**DCL     10828--REDEF
VX$NODE.NUM
     10781**DCL     11173>>ASSIGN  11230>>ASSIGN
VX$NODE.PROMOTE_HEAD
     10872**DCL     10875--REDEF
VX$NODE.PROMOTE_TAIL
     10876**DCL     10879--REDEF
VX$NODE.START_PAGE#_A
     10793**DCL     10794--REDEF   11161>>IF      11213>>IF      11222>>IF
VX$NODE.STOP_PAGE#_A
     10798**DCL     10799--REDEF   11169>>IF      11221>>IF
VXI$READ
     10971**DCL-ENT 11176--CALL
VXI$WRITE
     10972**DCL-ENT 11233--CALL
VXK$KEY
     10970**DCL-ENT 11175--CALL    11232--CALL
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:50   
VX_BIAS.A
      9588**DCL      9589--REDEF
VX_CBUF.CHARS_A
      9522**DCL      9523--REDEF
VX_CONST_DCB.ACTPOS
     10704**DCL     10704--REDEF
VX_CONST_DCB.ARS#
     10663**DCL     10663--REDEF
VX_CONST_DCB.ATTR#
     10693**DCL     10693--REDEF   10695--REDEF
VX_CONST_DCB.BORROW
     10715**DCL     10715--REDEF   10715--REDEF   10715--REDEF
VX_CONST_DCB.EOMCHAR#
     10670**DCL     10671--REDEF
VX_CONST_DCB.FLDID
     10707**DCL     10708--REDEF
VX_CONST_DCB.FORM$
     10699**DCL     10699--REDEF
VX_CONST_DCB.FSECT
     10722**DCL     10722--REDEF
VX_CONST_DCB.FSN#
     10689**DCL     10689--REDEF   10689--REDEF   10690--REDEF
VX_CONST_DCB.HEADER$
     10698**DCL     10699--REDEF
VX_CONST_DCB.IXTNSIZE#
     10695**DCL     10696--REDEF
VX_CONST_DCB.LASTSTA$
     10679**DCL     10679--REDEF
VX_CONST_DCB.LVL
     10716**DCL     10716--REDEF
VX_CONST_DCB.NAME#.C
     10679**DCL     10680--REDEF
VX_CONST_DCB.NOEOF
     10711**DCL     10711--REDEF
VX_CONST_DCB.NRECS#
     10696**DCL     10696--REDEF
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:51   
VX_CONST_DCB.NRECX
     10723**DCL     10723--REDEF
VX_CONST_DCB.OHDR
     10712**DCL     10712--REDEF
VX_CONST_DCB.ORG#
     10687**DCL     10688--REDEF
VX_CONST_DCB.PRECNO
     10720**DCL     10720--REDEF
VX_CONST_DCB.RCSZ
     10728**DCL     10728--REDEF
VX_CONST_DCB.RES#
     10681**DCL     10681--REDEF
VX_CONST_DCB.SETX
     10700**DCL     10700--REDEF
VX_CONST_DCB.TAB$
     10699**DCL     10699--REDEF
VX_CONST_DCB.TDA
     10719**DCL     10720--REDEF
VX_CONST_DCB.WSN#
     10681**DCL     10682--REDEF
VX_EBUF.CHARS_A
     10111**DCL     10112--REDEF
VX_EFIELD1.CHARS
     10120**DCL     10121--REDEF
VX_EFIELD2.CHARS
     10124**DCL     10125--REDEF
VX_EFIELD3.CHARS
     10128**DCL     10129--REDEF
VX_EI_KEY_BUF.KEY
     10504**DCL     10505--REDEF
VX_ERRORS
      9565**DCL      9576--REDEF
VX_ERRORS.CONFLICT_A
      9571**DCL      9572--REDEF
VX_ERRORS.UNSAT_A
      9567**DCL      9568--REDEF
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:52   
VX_IMAGE$
     10133**DCL     10991--IMP-PTR 11134<<ASSIGN  11151>>ASSIGN  11178>>ASSIGN  11179>>ASSIGN  11184<<ASSIGN
     11186>>ASSIGN  11202>>ASSIGN  11203>>ASSIGN  11235>>ASSIGN  11236>>ASSIGN
VX_IMAGE_DATA.CPAGE#_A
      8702**DCL      8703--REDEF
VX_IMAGE_DATA.NODE_A$
      8714**DCL      8715--REDEF
VX_IMAGE_DATA.START_A$
      8706**DCL      8707--REDEF
VX_IMAGE_DATA.STOP_A$
      8710**DCL      8711--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8771**DCL      8772--REDEF
VX_IMAGE_DS3.NODE_A$
      8783**DCL      8784--REDEF
VX_IMAGE_DS3.START_A$
      8775**DCL      8776--REDEF
VX_IMAGE_DS3.STOP_A$
      8779**DCL      8780--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8794**DCL      8795--REDEF
VX_IMAGE_DS4.NODE_A$
      8806**DCL      8807--REDEF
VX_IMAGE_DS4.START_A$
      8798**DCL      8799--REDEF
VX_IMAGE_DS4.STOP_A$
      8802**DCL      8803--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8817**DCL      8818--REDEF
VX_IMAGE_DS5.NODE_A$
      8829**DCL      8830--REDEF
VX_IMAGE_DS5.START_A$
      8821**DCL      8822--REDEF
VX_IMAGE_DS5.STOP_A$
      8825**DCL      8826--REDEF
VX_IMAGE_DS6.CPAGE#_A
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:53   
      8840**DCL      8841--REDEF
VX_IMAGE_DS6.NODE_A$
      8852**DCL      8853--REDEF
VX_IMAGE_DS6.START_A$
      8844**DCL      8845--REDEF
VX_IMAGE_DS6.STOP_A$
      8848**DCL      8849--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8863**DCL      8864--REDEF
VX_IMAGE_DS7.NODE_A$
      8875**DCL      8876--REDEF
VX_IMAGE_DS7.START_A$
      8867**DCL      8868--REDEF
VX_IMAGE_DS7.STOP_A$
      8871**DCL      8872--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8886**DCL      8887--REDEF
VX_IMAGE_DS8.NODE_A$
      8898**DCL      8899--REDEF
VX_IMAGE_DS8.START_A$
      8890**DCL      8891--REDEF
VX_IMAGE_DS8.STOP_A$
      8894**DCL      8895--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8725**DCL      8726--REDEF
VX_IMAGE_PROC.NODE_A$
      8737**DCL      8738--REDEF
VX_IMAGE_PROC.START_A$
      8729**DCL      8730--REDEF
VX_IMAGE_PROC.STOP_A$
      8733**DCL      8734--REDEF
VX_IMAGE_PTR$
      8908**DCL     11134>>ASSIGN  11184>>ASSIGN
VX_IMAGE_ROS.CPAGE#_A
      8748**DCL      8749--REDEF
VX_IMAGE_ROS.NODE_A$
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:54   
      8760**DCL      8761--REDEF
VX_IMAGE_ROS.START_A$
      8752**DCL      8753--REDEF
VX_IMAGE_ROS.STOP_A$
      8756**DCL      8757--REDEF
VX_M_VECTOR.F
      8553**DCL      8557--REDEF
VX_M_VECTOR_DP.F
      8588**DCL      8592--REDEF
VX_O.ACCTN_A$
      9717**DCL      9718--REDEF
VX_O.DCB_MATCH_A$
      9726**DCL      9727--REDEF
VX_O.DCB_MATCH_HIT_A
      9732**DCL      9733--REDEF
VX_O.FIDN_A$
      9711**DCL      9712--REDEF
VX_O.FID_A$
      9703**DCL      9704--REDEF
VX_O.INCLUDE_A$
      9723**DCL      9724--REDEF
VX_O.MAP_A
      9697**DCL      9698--REDEF
VX_O.NODCB_A
      9754**DCL      9755--REDEF
VX_O.NUM_A
      9642**DCL      9644--REDEF
VX_O.OPT_A
      9742**DCL      9743--REDEF
VX_O.PRIV_A
      9658**DCL      9660--REDEF
VX_O.SIN_A
      9611**DCL      9612--REDEF
VX_O.TCB_A
      9738**DCL      9739--REDEF
VX_OD.ACCTN_A$
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:55   
      9915**DCL      9916--REDEF
VX_OD.DCB_MATCH_A$
      9924**DCL      9925--REDEF
VX_OD.FIDN_A$
      9909**DCL      9910--REDEF
VX_OD.FID_A$
      9901**DCL      9902--REDEF
VX_OD.INCLUDE_A$
      9921**DCL      9922--REDEF
VX_OD.MAP_A
      9895**DCL      9896--REDEF
VX_OD.NODCB_A
      9939**DCL      9940--REDEF
VX_OD.NUM_A
      9842**DCL      9843--REDEF
VX_OD.PRIV_A
      9857**DCL      9858--REDEF
VX_OD.SIN_A
      9811**DCL      9812--REDEF
VX_OD.VECTOR_A$
      9930**DCL      9931--REDEF
VX_OL.MAX_A
      9786**DCL      9788--REDEF
VX_OL.MIN_A
      9771**DCL      9772--REDEF
VX_ON.ACCTN_A$
     10060**DCL     10062--REDEF
VX_ON.DCB_MATCH_A$
     10071**DCL     10073--REDEF
VX_ON.FIDN_A$
     10053**DCL     10055--REDEF
VX_ON.FID_A$
     10044**DCL     10046--REDEF
VX_ON.INCLUDE_A$
     10067**DCL     10069--REDEF
VX_ON.MAP_A
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:56   
     10037**DCL     10039--REDEF
VX_ON.NODCB_A$
     10087**DCL     10088--REDEF
VX_ON.NUM_A
      9982**DCL      9984--REDEF
VX_ON.PRIV_A
      9998**DCL     10000--REDEF
VX_ON.SIN_A
      9950**DCL      9952--REDEF
VX_ON.VECTOR_A$
     10078**DCL     10079--REDEF
VX_OUHEAD.VERSION
      9397**DCL      9399--REDEF
VX_OU_HEAD
      9340**DCL      9379--REDEF
VX_OU_HEAD.REC_A
      9352**DCL      9355--REDEF
VX_O_KEY_BUF.FORM0
      8601**DCL      8604--REDEF    8611--REDEF
VX_O_KEY_BUF_L.FORM0
      8624**DCL      8627--REDEF    8634--REDEF
VX_PASS2_REF.OU.L_START
     10290**DCL     10295--REDEF
VX_PASS2_REF.OU.L_STOP
     10296**DCL     10301--REDEF
VX_PASS2_REF.OU.MAX
     10284**DCL     10289--REDEF
VX_PASS2_REF.OU.SIZE
     10302**DCL     10307--REDEF
VX_PASS2_REF.SAT.COUNT
     10329**DCL     10335--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10336**DCL     10342--REDEF
VX_PASS2_REF.SAT.L_START
     10315**DCL     10321--REDEF
VX_PASS2_REF.SAT.L_STOP
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:57   
     10322**DCL     10328--REDEF
VX_PASS2_REF.SAT.MAX
     10309**DCL     10314--REDEF
VX_PASS2_REF.UNSAT.L_START
     10377**DCL     10382--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10383**DCL     10388--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10389**DCL     10394--REDEF
VX_PASS2_REF.UNSAT.MAX
     10371**DCL     10376--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10401**DCL     10406--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10395**DCL     10400--REDEF
VX_PHRASE.PHRASE
      9803**DCL      9805--REDEF
VX_PROGRAM_BIAS.A
      9581**DCL      9582--REDEF
VX_R_KEY_BUF.FORM0
      8650**DCL      8654--REDEF    8660--REDEF
VX_SD.A
      8278**DCL      8279--REDEF
VX_SEG_EPAGE#
     10416**DCL     11156>>IF      11208>>IF
VX_SEG_SIZE
     10413**DCL     11157>>ASSIGN  11209>>ASSIGN
VX_SPC.B$.MINE
     10472**DCL     10478--REDEF
VX_SPC.B$.NAME
     10451**DCL     10457--REDEF
VX_SPC.B$.SKIP
     10465**DCL     10471--REDEF
VX_SPC.B$.VALUE
     10458**DCL     10464--REDEF
VX_SPC.SEG.NAME
PL6.E3A0      #001=VXU$PAGEIN File=VXU$PAGEIN.:E05TSI                            WED 07/30/97 08:44 Page:58   
     10420**DCL     10426--REDEF
VX_SPC.SEG.VALUE
     10427**DCL     10433--REDEF
VX_TSX0_OVERLAY.H
     10195**DCL     10198--REDEF
WHERE$
     11105**DCL     11151<<ASSIGN  11164<<ASSIGN  11164>>ASSIGN  11176<>CALL    11203<<ASSIGN  11216<<ASSIGN
     11216>>ASSIGN  11233<>CALL
