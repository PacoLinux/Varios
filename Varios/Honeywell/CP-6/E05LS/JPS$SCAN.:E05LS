VERSION E05

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:1    
        1        1        /*M* JPS$SCAN PRESCAN's routine to prescan a job file */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=0,DCI=4,CSI=2,IAD=2,DTI=2,AND,ECI=0,DIN=2,STI=2 */
        8        8        /**/
        9        9        /*P* NAME:         JPS$SCAN
       10       10             PURPOSE:      To do the actual PRESCANning of job files
       11       11        */
       12       12        /**/
       13       13        /*F* NAME:         JPS$SCAN
       14       14             PURPOSE:      To scan a job file
       15       15             CALL:         JPS$SCAN
       16       16             INPUT:        JP_Q.SCAN$ points to a JP$JOB frame describing the
       17       17                           job to be prescanned
       18       18             DESCRIPTION:  Called from JPP$PRESCAN when a job needs to
       19       19                           be scanned.  The input job frame has been
       20       20                           placed on the head of the SCAN
       21       21                           queue which is visible to the M$JOBSTATS
       22       22                           service, and will stay there whilst the
       23       23                           actual scanning is going on.
       24       24
       25       25                           JPS$SCAN ALTRETs if it did not like the job,
       26       26                           in which case the frame has been removed
       27       27                           from the SCAN queue and deleted.  If, on
       28       28                           the other hand we RETURN, this means that
       29       29                           the job has been accepted and shipped to
       30       30                           MBS.  Furthermore, the job frame is still on
       31       31                           the SCAN queue.   It will stay there until
       32       32                           MBS sends us a message indicating that the
       33       33                           job has been safely received into his tables.
       34       34                           This is done to ensure that the job is
       35       35                           always visible to M$JOBSTATS and that there
       36       36                           is no window of time during which it's on
       37       37                           nobody's queue. */
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:2    
       38       38        /**/
       39       39        JPS$SCAN: PROC ALTRET;
       40       40        /**/
       41       41        /*
       42       42             This is a brief description of the function of the modules
       43       43             which make up PRESCAN.
       44       44
       45       45          JPA$CONTINUE (JPA$SUBR)
       46       46                Handles continuation for the parser (X$PARSE).
       47       47
       48       48          JPA$GET_PAGE (JPA$SUBR)
       49       49                Gets a page in the specified data segment.
       50       50
       51       51          JPA$GET_VAR (JPA$SUBR)
       52       52                Gets the value associated with specified COMMAND VARIABLES.
       53       53                These variables are used to mantain state information.
       54       54
       55       55          JPA$PUT_VAR (JPA$SUBR)
       56       56                Companion to JPA$GET_VAR. Allows the specified COMMAND
       57       57                VARIABLES to be set to a desired value.
       58       58
       59       59          JPB$EVENT
       60       60                This routine handles all events and communication
       61       61                via the Central System Comgroup to the rest of the system.
       62       62                It also contains PRESCAN's exit control routine,
       63       63                JPB$XCON, which handles all abort conditions.
       64       64
       65       65          JPE$ERROR (JPE$SUBR)
       66       66                This routine has two functions. If an error code is passed
       67       67                then just it (with an optional substitution) is printed.
       68       68                If no parameters are passed then any errors saved by
       69       69                CXP$POSTERR are reported. If M$LO has not been opened
       70       70                yet (no errors listed yet) then UNWIND is used to force
       71       71                the second pass by PRESCAN over the ECL file.
       72       72
       73       73          JPE$REASON (JPE$SUBR)
       74       74                When a job is rejected for some reason the user needs
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:3    
       75       75                to know why. JPE$REASON stores the reason which will
       76       76                be returned when the user uses M$JOBSTATS (!CHECK command).
       77       77
       78       78          JPJ$JOB
       79       79                Parses and processes the !JOB command
       80       80
       81       81          JPP$PRESCAN
       82       82                This is the mainline, and driver of PRESCAN.   It
       83       83                fields communications from the rest of the system,
       84       84                and calls JPS$SCAN when there is something to
       85       85                prescan.
       86       86
       87       87          JPR$FINRES (JPR$SUBR)
       88       88                This routine takes the tables prepared by CPO$RESOURCE
       89       89                (or defaults) and packages them up for MBS.
       90       90
       91       91          JPS$SCAN
       92       92                This routine is the driver of the actual prescanning
       93       93                process.
       94       94
       95       95          JPT$REPORT (JPT$SUBR)
       96       96                This routine tells the operator that some error occured
       97       97                while trying to PRESCAN this job. An error message may
       98       98                be passed. If not, then B$TCB.ALT$ -> B$ALT.ERR is used.
       99       99
      100      100          CPD$SYNTAX
      101      101                Sets up information needed for parsing the commands.
      102      102
      103      103          CPD$SYNTRY
      104      104                Intercepts information from the parser and determines
      105      105                which routines should be called. Entered on SUCCESS and
      106      106                CONTINUATION processing.
      107      107
      108      108          CXP$POSTERR
      109      109                This routine is used to store error messages and
      110      110                associated information for use by JPE$ERROR.
      111      111
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:4    
      112      112          CPO$EXPAND (CPO$SUBR)
      113      113                This routine takes the list of physical resources
      114      114                and expands it into a table of a form agreeable to
      115      115                MBS and M$LIMIT.
      116      116
      117      117          CPO$GET_RES (CPO$SUBR)
      118      118                Get the lists of resources available.
      119      119
      120      120          CPO$PROCESS_VIRT_RES (CPO$SUBR)
      121      121             This routine takes the parse tree and processes all the
      122      122             options specified and adds the new resource to physical
      123      123             resource list. (Called by CPO$RESOURCE)
      124      124
      125      125          CPO$RESOURCE (CPO$SUBR)
      126      126             This routine takes the parse tree and builds (with a little
      127      127             help from its friends) the packset list, physical list and
      128      128             pseudo list.
      129      129
      130      130          CPO$VALATTR (CPO$SUBR)
      131      131             This recursive routine does something. It is tied into
      132      132             CPO$GET_RES.
      133      133
      134      134          CPO$VALIDATE (CPO$SUBR)
      135      135             This routine validates the resource requests against what
      136      136             the system actually has available as well as what the user
      137      137             is allowed to ask for.
      138      138          CPO$RESOURCE (CPO$SUBR)
      139      139                This routine sets up all tables to pass to MBS.
      140      140
      141      141          CPX$CONTEXT1 - 7
      142      142          CPX$RESOURC
      143      143                These routines check for CONTEXT errors. These errors
      144      144                are errors that result from bad values passed.
      145      145        */
      146      146        /*
      147      147             ***** Flags used by PRESCAN ...
      148      148
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:5    
      149      149          PASS_TWO#  -  This flag indicates whether PRESCAN in the second
      150      150                        pass over the job file. If it is, then some error
      151      151                        has occured and this job will not be sent to MBS.
      152      152                        The offending records will be written to some LP
      153      153                        (which printer depends on a number of things) with
      154      154                        a summary of errors.
      155      155
      156      156          PASSWORD_OK#  -  This flag is used by JPJ$JOB to remember if the
      157      157                           job matched password criteria. (See JPJ$JOB for
      158      158                           full details) This is needed for the second pass
      159      159                           to avoid reporting bad password. (Password is blanked
      160      160                           out in the !JOB command on first pass.)
      161      161
      162      162        */
      163      163        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:6    
      164      164        /***** Include files *****/
      165      165          %INCLUDE AS_SUPER_C;
      166      600 S        %INCLUDE B$JIT_C;
      167      601          %INCLUDE B$ROSEG;
      168      664          %INCLUDE B_ERRORS_C;
      169     1791          %INCLUDE CP_6;
      170     1872          %INCLUDE CP_6_SUBS;
      171     2412          %INCLUDE CP_MACROS_C;
      172     3164          %INCLUDE JP_PERR_C;
      173     3182          %INCLUDE CP_SUBS_C;
      174     4099          %INCLUDE FM$FIT;
      175     4320          %INCLUDE FS$FIT;
      176     4363          %INCLUDE FOO_MAC_C;
      177     5111          %INCLUDE FOS_SUBS_C;
      178     5128          %INCLUDE JG_EVID_C;
      179     5353          %INCLUDE JM$STRUCT;
      180     6098          %INCLUDE JM_SUBS_C;
      181     6204          %INCLUDE JP_MACRO_C;
      182     6359          %INCLUDE KL_SUPER_C;
      183     9261          %INCLUDE M_INFO_C;
      184     9401          %INCLUDE OC_SUBS_C;
      185    10132          %INCLUDE OC_MESSHD_C;
      186    10185          %INCLUDE XSJ_MAC_C;
      187    10264          %INCLUDE XSJ_SUBS_C;
      188    10291          %INCLUDE XU_MACRO_C;
      189    13397          %INCLUDE JP_DATA_R;
      190    13942        /***** External routines *****/
      191    13943    1     DCL     CPD$SET_NODES  ENTRY(4);
      192    13944    1     DCL     CPD$SYNTAX     ENTRY(1)    ALTRET;
      193    13945    1     DCL     CPD$SYNTRY     ENTRY(1);
      194    13946    1     DCL     CPD$NULL_SFROUTINE ENTRY(1);
      195    13947    1     DCL     CPO$GET_RES    ENTRY(3) ALTRET;
      196    13948    1     DCL     CXX$VERIFY     ENTRY(2);
      197    13949    1     DCL     CXP$POSTERR    ENTRY(5);
      198    13950    1     DCL     CPO$RESOURCE   ENTRY(7) ALTRET;
      199    13951    1     DCL     JPA$CONTINUE   ENTRY(1);
      200    13952    1     DCL     JPA$GET_PAGE   ENTRY(2);
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:7    
      201    13953    1     DCL     JPA$GET_VAR    ENTRY(2) ALTRET;
      202    13954    1     DCL     JPE$REASON     ENTRY(1);
      203    13955    1     DCL     JPE$ERRORS     ENTRY(2);
      204    13956    1     DCL     JPJ$JOB        ENTRY ALTRET;
      205    13957    1     DCL     JPJ$LOG_GOOD   ENTRY ALTRET; /* Never altrets */
      206    13958    1     DCL     JPR$FINRES     ENTRY(4);
      207    13959    1     DCL     JPR$RESOURCE   ENTRY(5);
      208    13960    1     DCL     JPT$REPORT     ENTRY(1);
      209    13961    1     DCL     X$PARSE        ENTRY(1)    ALTRET;
      210    13962    1     DCL     XSF$LOCCODP    ENTRY(2)    ALTRET;
      211    13963    1     DCL     XSJ$WRITE      ENTRY(1)    ALTRET;
      212    13964        /***** Symref data *****/
      213    13965    1     DCL IBEX_CMD BIT(36) SYMREF;
      214    13966          %JP$Q (NAME=JP_Q,STCLASS=SYMREF);
      215    13997        /***** Fpts *****/
      216    13998          %FPT_CLOSE(FPTN = CLOSE_JOB,STCLASS = STATIC,
      217    13999                     DCB = M$EI,
      218    14000                     CHGATT = YES,
      219    14001                     DISP = SAVE,
      220    14002                     NAME = JOBNAME,
      221    14003                     UATTR = JOB_TBL,
      222    14004                     INSTATTR = PSN_TBL,
      223    14005                     PROCATTR = VIRT_TBL);
      224    14047          %FPT_CLOSE(FPTN = CLOSE_LO,STCLASS = STATIC,
      225    14048                     DCB = M$LO);
      226    14090          %FPT_PFIL(FPTN = FPT_PFIL,STCLASS = CONSTANT,
      227    14091                    DCB = M$EI,
      228    14092                    BOF = YES);
      229    14107          %FPT_TIME(FPTN = DEFER_TSTAMP,STCLASS = CONSTANT,
      230    14108                    SOURCE = LOCAL,
      231    14109                    DEST = UTS,
      232    14110                    TSTAMP = JOB_TBL.RATIM);
      233    14129          %FPT_OPEN(FPTN = OPEN_JOB,STCLASS = STATIC,
      234    14130                    ACCT = ACCT_SYMI,
      235    14131                    ASN = FILE,
      236    14132                    FUN = UPDATE,
      237    14133                    FPARAM = INSYM_FIT,
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:8    
      238    14134                    NAME =JOBNAME,
      239    14135                    DCB = M$EI);
      240    14244          %VLP_NAME (FPTN = JOBNAME,NAME = '0000000',STCLASS = STATIC);
      241    14271          %FPT_OPEN(FPTN = OPEN_LO,STCLASS = "STATIC SYMDEF",
      242    14272                    SCRUB = YES,
      243    14273                    WSN = LO_WSN,
      244    14274                    HDR = ABORTHDR,
      245    14275                    ASN = DEVICE,
      246    14276                    RES = 'LP',
      247    14277                    FUN = CREATE,
      248    14278                    EXIST = NEWFILE,
      249    14279                    PROCATTR = B$JIT0_LO,
      250    14280                    DCB = M$LO);
      251    14389          %VLP_HDR(FPTN = ABORTHDR,STCLASS ="STATIC SYMDEF",INDENT=5,
      252    14390        TITLE ="'* ACCOUNT ,UNAME        ****** JOB FAILED BY PRESCAN   *******'");
      253    14406          %FPT_WRITE(FPTN = SEND_MBS,STCLASS = STATIC,
      254    14407                     BUF = MBS_MSG,
      255    14408                     DCB = M$CG,
      256    14409                     STATION = STATION_MBS);
      257    14440          %VLP_STATION (FPTN = STATION_MBS,STCLASS = CONSTANT,
      258    14441                        STATION = 'MBS');
      259    14468          %FPT_WRITE(FPTN = WRITE_LO,STCLASS = "STATIC SYMDEF",
      260    14469                     DCB = M$LO);
      261    14500          %FPT_TIME(FPTN = OFF_TIME,STCLASS = CONSTANT,
      262    14501                    TSTAMP = XSJ_JOBINFO.OFF_TIME#,
      263    14502                    SOURCE = CLOCK,
      264    14503                    DEST = UTS);
      265    14522            /***** Constant data *****/
      266    14523    1     DCL B$JIT0_LO$ PTR CONSTANT SYMDEF INIT(ADDR(B$JIT0_LO));
      267    14524          %XSJ_PARAM(FPTN = WRITE_JOBSTATS,STCLASS = STATIC,
      268    14525                  DCB = M$JOBSTAT,
      269    14526                  BUF = XSJ_JOBINFO,
      270    14527                  TYPE = %TYP_INFO#);
      271    14544          %XSJ_JOBINFO(FPTN = XSJ_JOBINFO,STCLASS = STATIC);
      272    14559          %JM_IF (FPTN = JOB_TBL_INIT,FIT = YES,STCLASS = CONSTANT);
      273    14717          %JM_SNLIST(FPTN = PSN_TBL_INIT,ARRAY = "(0:PSN_SLOTS)",FIT = YES,STCLASS =
             14717              CONSTANT);
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:9    
      274    14774          %JM_RESLIST(FPTN = VIRT_TBL_INIT,ARRAY = "(0:VIRT_SLOTS)",FIT = YES,STCLASS =
             14774              CONSTANT);
      275    14829          %JM_CITE (FPTN = MBS_MSG_INIT,STCLASS = CONSTANT);
      276    14879        /***** Static data *****/
      277    14880    1     DCL START_PRINTING REMEMBER STATIC SYMDEF;
      278    14881    1     DCL CUR_RECNO SBIN STATIC SYMDEF;
      279    14882    1     DCL PASS_SPECIFIED# BIT(1) STATIC SYMDEF;
      280    14883    1     DCL BAD_RECNO SBIN STATIC SYMDEF;
      281    14884    1     DCL INSYM_INFO$ PTR STATIC SYMDEF;
      282    14885    1     DCL CODE04$ PTR STATIC SYMDEF;
      283    14886    1     DCL LO_WSN CHAR(8) STATIC SYMDEF;
      284    14887    1     DCL B$JIT0_LO (0:20) SBIN STATIC;
      285    14888    1     DCL INSYM_FIT (0:1024) UBIN WORD STATIC SYMDEF;
      286    14889    1     DCL IDTEXT CHAR(6) STATIC;
      287    14890          %P_PCB( NAME = PCB,STCLASS = "STATIC SYMDEF");
      288    15089          %ERR_BLK (STCLASS="STATIC SYMDEF");
      289    15114          %U$PARAM(NAME = U$PARAM,STCLASS = "STATIC SYMDEF");
      290    15130          %VLP_PSEUDO (FPTN = PSEUDO_LIST,N = PSEUDO_SLOTS,STCLASS = STATIC);
      291    15146          %JP_CONTINUE (STCLASS = "STATIC SYMDEF");
      292    15152        /***** Parameters passed to MBS thru FIT *****/
      293    15153          %JM_IF (FPTN = JOB_TBL,FIT = YES,STCLASS = "STATIC SYMDEF");
      294    15311          %JM_SNLIST(FPTN = PSN_TBL,ARRAY = "(0:PSN_SLOTS)",FIT = YES,STCLASS =
             15311              "STATIC SYMDEF");
      295    15368          %JM_RESLIST(FPTN = VIRT_TBL,ARRAY = "(0:VIRT_SLOTS)",FIT = YES,STCLASS =
             15368              "STATIC SYMDEF");
      296    15423        /***** Info to MBS passed thru CSCG *****/
      297    15424          %JM_CITE(FPTN = MBS_MSG,STCLASS = STATIC);
      298    15474        /***** Templates/fpts for messages to OC *****/
      299    15475          %FPT_WRITE (FPTN = OC_MSG,DCB = M$CG,STCLASS = "STATIC SYMDEF");
      300    15506          %OC_MESSHD_W( NAME = JOB_MSG,STCLASS = STATIC,
      301    15507                        NPARMS = 12,
      302    15508                        MSG = JP_JOB_MSG#,
      303    15509                        FUNC = WR);
      304    15522    1       2 *(0:11) UBIN BYTE UNAL INIT(2,8,12,8,2,8,12,8,1,2,8,31),
      305    15523    1         2 JOBID1 UBIN HALF UNAL,
      306    15524    1         2 ACCT1 CHAR(8),
      307    15525    1         2 UNAME1 CHAR(12),
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:10   
      308    15526    1         2 WSN1 CHAR(8),
      309    15527    1         2 JOBID2 UBIN HALF UNAL,
      310    15528    1         2 ACCT2 CHAR(8) UNAL,
      311    15529    1         2 UNAME2 CHAR(12),
      312    15530    1         2 WSN2 CHAR(8),
      313    15531    1         2 REASON UBIN BYTE UNAL,
      314    15532    1         2 DEVTYP CHAR(2),
      315    15533    1         2 TNAME CHAR(8),
      316    15534    1         2 JOBNAME CHAR(31) CALIGNED;
      317    15535        /***** Based data *****/
      318    15536          %CODE04 (BASED="BASED(CODE04$)");
      319    15544          %B$JIT0(STCLASS="BASED(B$JIT$)");
      320    15633          %U$JIT1;
      321    15707          %M$JIT2X;
      322    15710          %F$JIT3X;
      323    15713          %S$JIT4X;
      324    15716          %J$JIT5X;
      325    15719          %A$JIT6X;
      326    15722          %FS$JOBORIG(NAME = INSYM$INFO,STCLASS = "BASED(INSYM_INFO$)");
      327    15728          %PARSE$OUT(NAME = P$B,STCLASS = BASED);
      328    15773          %PARSE$SYM(NAME = P$S,STCLASS = BASED);
      329    15811          %JP$JOB(NAME = JP$JOB,STCLASS = BASED);
      330    15821          %VLP_PRES (FPTN = PHYS_LIST,STCLASS ="BASED(PHYS_LIST$)");
      331    15837    1     DCL     READ$BUF    CHAR(%CPBUFFSIZE)  BASED    ALIGNED;
      332    15838    1     DCL     READ$BUFB   BIT(36)            BASED    ALIGNED;
      333    15839    1     DCL     W$BUF    CHAR(PCB.NCHARS)  BASED UNAL;
      334    15840    1     DCL     JNAMEB    CHAR(JOB_TBL.JNL) BASED CALIGNED;
      335    15841        /***** Auto data *****/
      336    15842    1     DCL CALL_FLAG# BIT(1) ALIGNED AUTO;
      337    15843    1     DCL RES_PEND# BIT(1) ALIGNED AUTO;
      338    15844    1     DCL FINRES_PEND# BIT(1) ALIGNED AUTO;
      339    15845    1     DCL RELEASE_ALL# BIT(1) ALIGNED AUTO;
      340    15846    1     DCL I SBIN WORD AUTO;
      341    15847    1     DCL J SBIN WORD AUTO;
      342    15848    1     DCL K SBIN WORD AUTO;
      343    15849    1     DCL SYSID UBIN HALF AUTO;
      344    15850    1     DCL PHYS_LIST_SIZE UBIN WORD AUTO;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:11   
      345    15851    1     DCL T$ PTR AUTO;
      346    15852        /***** Error codes *****/
      347    15853        %ERR_CODE(NAME=E_JOBIMBED,FCG#=PRESCANFCG,MID#='23'O,CODE#=%E$JPJOBIMBED,STCLASS=
             15853            CONSTANT);
      348    15873        /*E* ERROR: JPS-E$JPJOBIMBED-0
      349    15874             MESSAGE: Illegal - imbedded !JOB command
      350    15875        */
      351    15876        %ERR_CODE (NAME=E_RESIMBED,FCG#=PRESCANFCG,MID#='23'O,CODE#=%E$JPRESIMBED,STCLASS=
             15876            CONSTANT);
      352    15896        /*E*    ERROR: JPS-E$JPRESIMBED-0
      353    15897                MESSAGE: Misplaced or multiple !RESOURCE commands
      354    15898        */
      355    15899        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:12   
      356    15900        /*
      357    15901              ********* Start the SCAN here
      358    15902        */
      359    15903    1       REMEMBER SECOND_PASS IN START_PRINTING;
      360    15904    1       B$JIT0_LO = B$JIT;
      361    15905    1       SYSID = JP_Q.SCAN$ -> JP$JOB.SYSID;
      362    15906    1       CALL GET_SYSID ALTRET(SKIP_PRESCAN);
      363    15907    1       CALL PRESCAN;
      364    15908    2       DO NEVER;
      365    15909    2   SECOND_PASS:
      366    15910        /*
      367    15911             ***** During the second pass by PRESCAN all
      368    15912                   records will be printed on the printer.
      369    15913                   Errors will be printed also.
      370    15914                   The job will not be passed to MBS ...
      371    15915        */
      372    15916    2         PASS_TWO# = %YES#;
      373    15917    2         CALL M$PFIL (FPT_PFIL) ALTRET(IO_ALT);
      374    15918    2         CALL PRESCAN;  /* For the second pass */
      375    15919    3         DO NEVER;
      376    15920    3   IO_ALT:
      377    15921    3           CALL JPE$REASON (%REJ_IO#);
      378    15922    3         END;
      379    15923    2       END; /* Do ... second pass ... end */
      380    15924    1   SKIP_PRESCAN:   /* Skip PRESCAN. Cleanup if possible */
      381    15925    1       CALL CLEANUP ALTRET(E_SCAN);
      382    15926    1       RETURN;
      383    15927    1   E_SCAN:
      384    15928    1       ALTRETURN;
      385    15929        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:13   
      386    15930    1   GET_SYSID: PROC ALTRET;
      387    15931        /*
      388    15932             ***** Perform initialization prior to actually scanning
      389    15933        */
      390    15934    2       B$JIT0_LO = B$JIT;
      391    15935    2       B$JIT0_LO$->B$JIT.SYSID = SYSID;
      392    15936    2       MBS_MSG = MBS_MSG_INIT;
      393    15937    2       MBS_MSG.SYSID = SYSID;
      394    15938    2       WRITE_JOBSTATS.SYSID# = SYSID;
      395    15939        /*
      396    15940            ***       Open the job file to be PRE-SCANNED...
      397    15941        */
      398    15942    2       CALL BINCHAR(IDTEXT,SYSID);
      399    15943    2       CALL CONCAT(JOBNAME.NAME#,IDTEXT,'P');
      400    15944    2       OPEN_JOB.V.OPER.TEST# = %NO#;
      401    15945    2       OPEN_JOB.V.DELETE# = %NO#;
      402    15946    2       CALL M$OPEN(OPEN_JOB) ALTRET(OPN_JOB_ALT);
      403    15947        /*
      404    15948             ***** Recover from bad file open ...
      405    15949        */
      406    15950    3       DO NEVER;
      407    15951    3   OPN_JOB_ALT:
      408    15952    3         IF B$TCB.ALT$->B$ALT.ERR.CODE=%E$NOFILE
      409    15953    3         THEN
      410    15954    4           DO;              /* Probably a duplicate entry*/
      411    15955    4             CALL INSERT(JOBNAME.NAME#,6,1,'S');
      412    15956    4             OPEN_JOB.V.OPER.TEST# = %YES#;
      413    15957    4             CALL M$OPEN(OPEN_JOB) ALTRET(IO_ALT);
      414    15958    4           END;
      415    15959    3         ELSE
      416    15960    4           DO;  /* Delete the file and tell operator */
      417    15961    4             CALL JPT$REPORT;
      418    15962    4             OPEN_JOB.V.DELETE# = %YES#;
      419    15963    4             CALL M$OPEN(OPEN_JOB) ALTRET(OPEN_ERR);
      420    15964    4   OPEN_ERR: ;/* Ignore this altret??? */
      421    15965    4           END;
      422    15966    3         ALTRETURN;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:14   
      423    15967    3       END;   /* Do never ... end */
      424    15968        /*
      425    15969             ***** Init misc. variables ...
      426    15970        */
      427    15971    2       PASS_TWO# = %NO#;
      428    15972    2       PASSWORD_OK# = %NO#;
      429    15973    2       PASS_SPECIFIED# = %NO#;
      430    15974    2       JOB_TBL = JOB_TBL_INIT;
      431    15975    2       JOB_TBL.COUNT = JOB_TBL.COUNT - 1;
      432    15976    2       JOB_TBL.SYSID = SYSID;
      433    15977    2       JOB_TBL.STATUS = %PRE_PASSED#;
      434    15978    2       BAD_RECNO = -1;   /* Denotes no error line */
      435    15979        /*
      436    15980             ***** Get the Workstation Of Origin (WOO) from file's fit ...
      437    15981        */
      438    15982    2       INSYM_INFO$ = ADDR(INSYM_FIT);
      439    15983    2       CALL XSF$LOCCODP(INSYM_INFO$,11) ALTRET(IO_ALT);
      440    15984    2       LO_WSN = INSYM$INFO.WOO;
      441    15985    2       JOB_TBL.WOO = LO_WSN;
      442    15986    2       JOB_TBL.WSN = LO_WSN;     /* Default        */
      443    15987    2       B$JIT0_LO$->B$JIT.WOO = LO_WSN;
      444    15988        /*
      445    15989             ***** This wsn will be used as the output wsn
      446    15990                   if the WSN spec. on the !JOB cmd is bad ...
      447    15991        */
      448    15992    2       JOB_MSG.WSN2 = LO_WSN;
      449    15993    2       JOB_MSG.JOBID2 = INSYM$INFO.SYSID;
      450    15994    2       IF INSYM$INFO.FLAG = JOBORIG_DEVICE#
      451    15995    2       THEN
      452    15996    3         DO;
      453    15997    3           JOB_MSG.DEVTYP = INSYM$INFO.ORIGINATOR_PORT.FROM_CR.DEVICE;
      454    15998    3           JOB_MSG.TNAME = INSYM$INFO.ORIGINATOR_PORT.FROM_CR.TNAME;
      455    15999    3         END;
      456    16000    2       ELSE
      457    16001    3         DO;
      458    16002    3           JOB_MSG.DEVTYP = ' ';
      459    16003    3           JOB_MSG.TNAME = ' ';
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:15   
      460    16004    3         END;
      461    16005    2       JOB_TBL.ORIGINATOR_MODE = INSYM$INFO.ORIGINATOR_MODE;
      462    16006    2       JOB_TBL.ORIGINATOR_PORT = INSYM$INFO.ORIGINATOR_PORT;
      463    16007    2       CODE04$ = ADDR(INSYM_FIT);
      464    16008    2       CALL XSF$LOCCODP(CODE04$,4);
      465    16009    2       JOB_MSG.ACCT2 = CODE04.CREATOR.ACCT;
      466    16010    2       JOB_MSG.UNAME2 = CODE04.CREATOR.NAME;
      467    16011    2       B$JIT0_LO$->B$JIT.ACCN = JOB_MSG.ACCT2;
      468    16012    2       B$JIT0_LO$->B$JIT.UNAME = JOB_MSG.UNAME2;
      469    16013    2       JOB_TBL.SUBMIT_TIME = CODE04.CREATION.TIME;
      470    16014    2       JOB_MSG.JOBID1 = SYSID;
      471    16015    2       RETURN;
      472    16016        /**/
      473    16017    2   IO_ALT:
      474    16018    2       CALL JPE$REASON (%REJ_IO#);
      475    16019    2       PASS_TWO# = %YES#;   /* So that CLEANUP will work properly */
      476    16020    2       ALTRETURN;
      477    16021    2   END GET_SYSID;
      478    16022        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:16   
      479    16023    1   PRESCAN: PROC ALTRET;
      480    16024        /*
      481    16025             ***** PRESCAN the file ...
      482    16026        */
      483    16027        /*
      484    16028             ***** Initialize ...
      485    16029        */
      486    16030    2       CUR_RECNO = 0;
      487    16031    2       PSN_TBL = PSN_TBL_INIT;
      488    16032    2       PSN_TBL.COUNT = 0;
      489    16033    2       NHPSN# = %NO#;
      490    16034    2       VIRT_TBL = VIRT_TBL_INIT;
      491    16035    2       VIRT_TBL.COUNT = 0;
      492    16036    2       SCAN_CMDS# = %NO#;
      493    16037    2       RES_PEND# = %YES#;            /* !RESOURCE pending        */
      494    16038    2       FINRES_PEND# = %YES#;
      495    16039    2       PCB.TEXT$ = PINCRC(TEXT$,1);
      496    16040        /*
      497    16041             ***** Read the first command.
      498    16042                   If it is a !JOB command process it.
      499    16043                   Verify ACCOUNT,NAME,PASSWORD against :USERS ...
      500    16044        */
      501    16045    2       READ_CARD.BUF_ = VECTOR(TEXT$ -> READ$BUF);
      502    16046    2       CALL INSERT (TEXT$ -> READ$BUF,0,%CPBUFFSIZE,' '); /* Blank readbuf */
      503    16047    2       CALL M$READ(READ_CARD) ALTRET(IO_ALT);
      504    16048    2       PCB.NCHARS = M$EI$->F$DCB.ARS#;
      505    16049    2       JP_CONTINUE.REC_NUM = 0;
      506    16050    2       JP_CONTINUE.CHARPOS(0) = 0;
      507    16051    2       JP_CONTINUE.LEN(0) = PCB.NCHARS;
      508    16052    2       IF (TEXT$->READ$BUFB & '777737737737'O) ~= '041112117102'O
      509    16053    2         OR SUBSTR(TEXT$->READ$BUF,4,1) ~= ' '
      510    16054    2       THEN
      511    16055    3         DO;   /* Supply a blank !JOB command */
      512    16056    3           PCB.NCHARS = 4;
      513    16057    3           CALL INSERT(TEXT$->READ$BUF,0,4,'!JOB');
      514    16058    3           CALL M$PFIL(FPT_PFIL) ALTRET(IO_ALT);
      515    16059    3         END;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:17   
      516    16060    2       ELSE
      517    16061    2         CUR_RECNO = 1;
      518    16062    2       ERR_BLK.FIRST = 0;   /* Throw away all old errors */
      519    16063    2       PCB.CONTINUE = '1'B;
      520    16064    2       CALL JPJ$JOB ALTRET(IO_ALT);   /* Only altrets on IO errors */
      521    16065    2       IF ERR_BLK.FIRST>0
      522    16066    2       THEN
      523    16067    3         DO;
      524    16068    3           CALL JPE$REASON(%REJ_JOB#);
      525    16069    3           CALL JPE$ERRORS;
      526    16070    3         END;
      527    16071        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:18   
      528    16072        /*
      529    16073             ***** Look for the !RESOURCE command.
      530    16074                   If SCAN was specified then the syntax of
      531    16075                   each command will be checked. ANY errors
      532    16076                   will cause the job to be aborted and all
      533    16077                   records and their errors printed ...
      534    16078        */
      535    16079    3       DO WHILE(SCAN_CMDS# OR RES_PEND#);
      536    16080    3         READ_CARD.BUF_ = VECTOR(TEXT$ -> READ$BUF);
      537    16081    3   READ_CMD:
      538    16082    3         CALL INSERT (TEXT$->READ$BUF,0,%CPBUFFSIZE,' '); /* Blank readbuf */
      539    16083    3         CALL M$READ (READ_CARD) ALTRET(E_READERR);
      540    16084    3         CUR_RECNO = CUR_RECNO+1;
      541    16085        /*
      542    16086             ****** If the command does not have a BANG (!) in
      543    16087                   column 1 then ignore it ...
      544    16088        */
      545    16089    3         IF SUBSTR(TEXT$->READ$BUF,0,1) ~= '!'
      546    16090    3         THEN
      547    16091    3           GOTO READ_CMD;
      548    16092    3         JP_CONTINUE.REC_NUM = 0;
      549    16093    3         PCB.NCHARS = M$EI$->F$DCB.ARS#;
      550    16094    3         JP_CONTINUE.LEN(0) = PCB.NCHARS;
      551    16095    3         PCB.NCHARS = PCB.NCHARS - 1;
      552    16096    3         PCB.TEXT$ = PINCRC(TEXT$,1);
      553    16097    3         PCB.ROOT$ = ADDR(IBEX_CMD);
      554    16098    3         PCB.U$$ = ENTADDR(CPD$NULL_SFROUTINE);
      555    16099    3         PCB.CONTINUE = '0'B;
      556    16100    3         ERR_BLK.FIRST = 0;
      557    16101    3         IF SCAN_CMDS# AND NOT RES_PEND#
      558    16102    3         THEN
      559    16103    4           DO;
      560    16104    4             CALL INDEX (K,'%',PCB.TEXT$->W$BUF) ALTRET(PARSE_CMD);
      561    16105    4           END;
      562    16106    3         ELSE
      563    16107    4           DO;
      564    16108    4   PARSE_CMD:      /* Ok to parse:  No SCAN option, or no percents found */
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:19   
      565    16109    4             CALL X$PARSE(PCB) ALTRET(E_SYNTAX);
      566    16110    4             PCB.U$$ = ENTADDR(CPD$SYNTRY);
      567    16111    4             U$PARAM.CNTU$$ = ENTADDR(JPA$CONTINUE);
      568    16112    4             PCB.CONTINUE = '1'B;
      569    16113    4             U$PARAM.REMEM_CONTEXT_ERR$ = ADDR(NIL);
      570    16114        /*
      571    16115             ***** Process all PRESCAN commands ...
      572    16116        */
      573    16117    5             DO CASE(PCB.OUT$->P$B.CODE);
      574    16118    5               CASE(RESOURCECMND);
      575    16119    5                 CALL CPD$SET_NODES(PCB,PCB.ROOT$,U$PARAM.SPCL$$,CALL_FLAG#);
      576    16120    5                 CALL X$PARSE(PCB) ALTRET(E_SYNTAX);
      577    16121    5                 IF RES_PEND#
      578    16122    5                 THEN
      579    16123    6                   DO;
      580    16124    6                     RES_PEND# = %NO#;
      581    16125    6                     IF ERR_BLK.FIRST>0
      582    16126    6                     THEN   /* Report the errors */
      583    16127    7                       DO;
      584    16128    7                         CALL JPE$REASON(%REJ_RES#);
      585    16129    7                       END;
      586    16130    6                     ELSE   /* Process the !RESOURCE cmd */
      587    16131    6                       CALL CPO$RESOURCE (PCB,JOB_TBL,PSN_TBL,VIRT_TBL,
      588    16132    6                         ERR_BLK,NHPSN#,RELEASE_ALL#) ALTRET(E_CONTEXT);
      589    16133    6                     CALL JPR$FINRES (JOB_TBL,VIRT_TBL,PSN_TBL,PHYS_LIST);
      590    16134    6                     FINRES_PEND# = %NO#;
      591    16135    6                   END;
      592    16136    5                 ELSE
      593    16137    6                   DO; /* Misplaced !RES command */
      594    16138    6                     CALL JPE$REASON (%REJ_RESIMBED#);
      595    16139    6                     ERR_BLK.FIRST = 0; /* ignore any context errors */
      596    16140    6                     CALL JPE$ERRORS (E_RESIMBED);
      597    16141    6                   END;
      598    16142    5               CASE(JOBCMND);
      599    16143    5                 CALL JPE$REASON(%REJ_JOBIMBED#);
      600    16144    5                 CALL JPE$ERRORS(E_JOBIMBED);
      601    16145    5               CASE(COMMENTCMND);
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:20   
      602    16146                          /* Does not reset RES_PEND#  */
      603    16147    5               CASE (SETCMND,
      604    16148    5                   RESETCMND,
      605    16149    5                   ADJUSTCMND,
      606    16150    5                   LDEVCMND,
      607    16151    5                   ERASECMND,
      608    16152    5                   HOLDCMND,
      609    16153    5                   PRINTCMND,
      610    16154    5                   TERMINALCMND,
      611    16155    5                   UNHOLDCMND);
      612    16156    5                 RES_PEND# = '0'B;
      613    16157    5                 IF SCAN_CMDS#
      614    16158    5                 THEN
      615    16159    6                   DO;
      616    16160    6                     CALL CPD$SET_NODES(PCB,PCB.ROOT$,U$PARAM.SPCL$$,CALL_FLAG#);
      617    16161    6                     CALL X$PARSE(PCB) ALTRET(E_SYNTAX);
      618    16162    6                     CALL CXX$VERIFY(PCB.OUT$->P$B, ADDR(ERR_BLK));
      619    16163    6                     IF ERR_BLK.FIRST ~= 0
      620    16164    6                     THEN
      621    16165    6                       CALL JPE$REASON (%REJ_SYNTAX#);
      622    16166    6                   END;
      623    16167    5               CASE (ELSE);
      624    16168    5                 RES_PEND# = %NO#; /* No longer following !JOB, !RES not allowed */
      625    16169    5                 IF SCAN_CMDS#
      626    16170    5                 THEN
      627    16171    6                   DO;
      628    16172    6                     CALL CPD$SET_NODES(PCB,PCB.ROOT$,U$PARAM.SPCL$$,CALL_FLAG#);
      629    16173    6                     CALL X$PARSE(PCB) ALTRET(E_SYNTAX);
      630    16174    6                     IF ERR_BLK.FIRST ~= 0
      631    16175    6                     THEN
      632    16176    7                       DO;   /* Print errors */
      633    16177    7                         CALL JPE$REASON (%REJ_SYNTAX#);
      634    16178    7                       END;
      635    16179    6                   END;
      636    16180    5             END;   /* Do case ... end */
      637    16181    5             DO NEVER;
      638    16182    5   E_SYNTAX:
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:21   
      639    16183    5               CALL JPE$REASON(%REJ_SYNTAX#);
      640    16184    5               CALL CXP$POSTERR(ADDR(ERR_BLK),PCB.HI_CHAR,PCB.ERROR);
      641    16185    5             END; /* Do never ... end */
      642    16186    4   E_CONTEXT: /* If pass2, echo and report - otherwise, start pass2 if errors */
      643    16187    4             CALL JPE$ERRORS;
      644    16188    4           END; /* Do ... if not SCAN_CMDS# ... end */
      645    16189    3       END; /* Do while ... process commands ... end */
      646    16190    2       RETURN;
      647    16191        /**/
      648    16192    2   E_READERR:
      649    16193    2       IF B$TCB.ALT$->B$ALT.ERR.CODE=%E$EOF
      650    16194    2       THEN
      651    16195    2         RETURN;
      652    16196    2       ELSE
      653    16197    2   IO_ALT: CALL JPE$REASON(%REJ_IO#);
      654    16198    2       PASS_TWO# = %YES#;   /* So CLEANUP works properly */
      655    16199    2       ALTRETURN;
      656    16200    2   END PRESCAN;
      657    16201        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:22   
      658    16202    1   CLEANUP: PROC ALTRET;
      659    16203        /*
      660    16204             ***** If there have been no errors, the file is passed to MBS,
      661    16205                   and we RETURN.
      662    16206                   If there were errors, the print file will printed on
      663    16207                   the line printer at the work station of origin (WOO),
      664    16208                   and the jcl file deleted from :SYMI.  We ALTRETURN.
      665    16209        */
      666    16210    2       IF PASS_TWO#
      667    16211    2       THEN
      668    16212    3         DO;
      669    16213        /*
      670    16214             ***** Remove this job from the SCANNED list ...
      671    16215        */
      672    16216    3           CALL REMOVE_SYSID;
      673    16217    3           CLOSE_JOB.V.DISP# = %SCRATCH#;
      674    16218    3           CLOSE_LO.V.DISP# = %SAVE#;
      675    16219    3           XSJ_JOBINFO.STATUS# = JOB_TBL.STATUS;
      676    16220    3           XSJ_JOBINFO.ACCT# = JOB_TBL.ACCT;
      677    16221    3           XSJ_JOBINFO.RECNO# = BAD_RECNO; /* Record number which corresponds */
      678    16222                            /* to erroring record ... error in status. -1 if none     */
      679    16223    3           CALL M$TIME(OFF_TIME) ALTRET(E_TIME);
      680    16224    4           DO WHILE (%NO#);
      681    16225    4   E_TIME:   XSJ_JOBINFO.OFF_TIME# = 0;
      682    16226    4           END;
      683    16227    3           CALL XSJ$WRITE(WRITE_JOBSTATS) ALTRET(XSJ_ALT1);
      684    16228    4           DO NEVER;
      685    16229    4   XSJ_ALT1:
      686    16230    4             CALL JPT$REPORT;
      687    16231    4           END;
      688    16232    3         END;
      689    16233    2       ELSE
      690    16234    3         DO;
      691    16235    3           IF FINRES_PEND#
      692    16236    3           THEN   /* RESOURCE tables not built yet */
      693    16237    3             CALL JPR$FINRES (JOB_TBL,VIRT_TBL,PSN_TBL,PHYS_LIST);
      694    16238    3           CLOSE_JOB.V.DISP# = %SAVE#;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:23   
      695    16239    3           CALL INSERT(JOBNAME.NAME#,6,1,'S'); /* Flag the job as schedulable */
      696    16240    3           MBS_MSG.CODE = JMEV_NEWF#;
      697    16241    3           CLOSE_LO.V.DISP# = %SCRATCH#;
      698    16242    3           JOB_TBL.MAXPSN = PSN_TBL.COUNT;
      699    16243    3           PSN_TBL.COUNT = PSN_TBL.COUNT*2;
      700    16244    3           JOB_TBL.MAXVR = VIRT_TBL.COUNT;
      701    16245    3           VIRT_TBL.COUNT = VIRT_TBL.COUNT*2;
      702    16246    4           DO INHIBIT;
      703    16247    4             JP_Q.SCAN$ -> JP$JOB.SCANNING = %NO#;
      704    16248    4           END;   /* Do inhibit ... end */
      705    16249    3         END;
      706    16250    2       JOB_MSG.ACCT1 = JOB_TBL.ACCT;
      707    16251    2       JOB_MSG.UNAME1 = JOB_TBL.UNAME;
      708    16252    2       JOB_MSG.WSN1 = JOB_TBL.WSN;
      709    16253    2       IF JOB_MSG.ACCT1=JOB_MSG.ACCT2
      710    16254    2       THEN
      711    16255    2         JOB_MSG.ACCT2 = ' ';
      712    16256
      713    16257    2       JOB_MSG.JOBNAME = ' ';
      714    16258    2       IF JOB_TBL.JNL ~= 0
      715    16259    3       THEN DO;
      716    16260    3           JOB_MSG.JOBNAME = ADDR(JOB_TBL.JNAME) -> JNAMEB;
      717    16261    3         END;
      718    16262        /*
      719    16263             ***** Write he status of this job to the console ...
      720    16264        */
      721    16265    2       JOB_MSG.REASON = JOB_TBL.STATUS;
      722    16266    2       OC_MSG.BUF_ = VECTOR(JOB_MSG);
      723    16267    2       JOB_MSG.CADDR = M_ADMIN;
      724    16268    2       JOB_MSG.WSN = LO_WSN;
      725    16269    2       CALL M$WRITE(OC_MSG) ALTRET(E_OC1);
      726    16270    2   E_OC1: ;
      727    16271        /*
      728    16272             ***** If the SOURCE WSN is not also the DESTINATION WSN,
      729    16273                   then write the message to both consoles ...
      730    16274        */
      731    16275    2       IF LO_WSN ~= JOB_MSG.WSN2
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:24   
      732    16276    2       THEN
      733    16277    3         DO;
      734    16278    3           JOB_MSG.CADDR = M_ADMIN | M_NONSYS;
      735    16279    3           JOB_MSG.WSN = JOB_MSG.WSN2;
      736    16280    3           CALL M$WRITE(OC_MSG) ALTRET(E_OC2);
      737    16281    3   E_OC2:  ;  /* Ignore this altret */
      738    16282    3         END;
      739    16283        /*
      740    16284             ***** If M$LO is open,
      741    16285                   then close it ...
      742    16286        */
      743    16287    2       IF M$LO$->F$DCB.FCD#
      744    16288    2       THEN
      745    16289    2         CALL M$CLOSE(CLOSE_LO) ALTRET(E_CLOSELO);
      746    16290    3       DO NEVER;
      747    16291    3   E_CLOSELO:
      748    16292    3         CALL JPT$REPORT;
      749    16293                      /* Should PRESCAN do anything else here??? */
      750    16294    3       END;
      751    16295        /*
      752    16296             ***** Close the JOB file ...
      753    16297        */
      754    16298    2       IF M$EI$->F$DCB.FCD#
      755    16299    2       THEN
      756    16300    2         CALL M$CLOSE(CLOSE_JOB) ALTRET(E_CLOSEJOB);
      757    16301    3       DO NEVER;
      758    16302    3   E_CLOSEJOB:
      759    16303    3         CALL JPT$REPORT;
      760    16304    3         CALL REMOVE_SYSID;
      761    16305    3         ALTRETURN;
      762    16306    3       END;
      763    16307        /*
      764    16308             ***** If there are no errors
      765    16309                   then send this job off to MBS ...
      766    16310        */
      767    16311    2       IF NOT PASS_TWO#
      768    16312    2       THEN
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:25   
      769    16313    3         DO;
      770    16314    3           CALL M$WRITE(SEND_MBS) ALTRET(E_SENDMBS);
      771    16315                /* May be logging all logons in the security log or will at
      772    16316                   lease have to update :USERS for successful ones.      */
      773    16317    3           CALL JPJ$LOG_GOOD;
      774    16318    3           RETURN;
      775    16319    3   E_SENDMBS:
      776    16320    3           CALL JPT$REPORT;
      777    16321    3         END;
      778    16322    2       ALTRETURN;
      779    16323        /**/
      780    16324    2   END CLEANUP;
      781    16325        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:26   
      782    16326        /**/
      783    16327        /*F* NAME:         JPS$INIT
      784    16328             PURPOSE:      To perform some PRESCAN initialization
      785    16329             DESCRIPTION:  Called from JPP$PRESCAN when PRESCAN starts
      786    16330                           running.
      787    16331
      788    16332                           Performs intialization specific to the actual
      789    16333                           work of prescanning a file.
      790    16334        */
      791    16335    1   JPS$INIT: ENTRY ALTRET;
      792    16336        /**/
      793    16337        /*
      794    16338             ***** Get a page for storing text in (TEXT$)
      795    16339                   and a page for the parser workspace (WORK$) ...
      796    16340        */
      797    16341    1       CALL JPA$GET_PAGE (TEXT$);
      798    16342    1       CALL JPA$GET_PAGE (WORK$);
      799    16343        /*
      800    16344             ***** Get a list of all PHYSICAL RESOURCES on this system ...
      801    16345        */
      802    16346    1       PHYS_LIST_SIZE = 1024;
      803    16347    1       CALL JPA$GET_PAGE (PHYS_LIST$);
      804    16348    2       DO NEVER;
      805    16349    2   E_GETRES:
      806    16350    2         IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$NORMRM
      807    16351    2         THEN   /* Not enough memory */
      808    16352    3           DO;   /* Try again */
      809    16353    3             PHYS_LIST_SIZE = PHYS_LIST_SIZE + 1024;
      810    16354    3             CALL JPA$GET_PAGE (PHYS_LIST$);
      811    16355    3             GOTO GET_PHYS_LIST;
      812    16356    3           END;
      813    16357    2         ELSE
      814    16358    2           ALTRETURN;
      815    16359    2       END; /* Donever ... end */
      816    16360        /*
      817    16361             ***** Initialize misc variables ...
      818    16362        */
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:27   
      819    16363        /*
      820    16364             ***** Setup parser control information ...
      821    16365        */
      822    16366    1       PCB.WKSZ = 1024;
      823    16367    1       PCB.WORK$ = WORK$;
      824    16368    1       PCB.U$$ = ENTADDR(CPD$SYNTRY);
      825    16369    1       PCB.USER$ = ADDR(U$PARAM);
      826    16370    1       U$PARAM.MODE = PRESCAN_MODE;
      827    16371    1       U$PARAM.ERRBUF$ = ADDR(ERR_BLK);
      828    16372    1       U$PARAM.USERS$ = ADDR(AS_USERS);
      829    16373    1       U$PARAM.PSEUDO$ = ADDR(PSEUDO_LIST);
      830    16374    1       U$PARAM.PHYS$ = PHYS_LIST$;
      831    16375    1   GET_PHYS_LIST:
      832    16376    1       CALL CPO$GET_RES (PSEUDO_LIST,PHYS_LIST$,PHYS_LIST_SIZE) ALTRET(E_GETRES);
      833    16377        /*
      834    16378             ***** Done
      835    16379        */
      836    16380    1       RETURN;
      837    16381        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:28   
      838    16382    1   REMOVE_SYSID: PROC;
      839    16383        /*
      840    16384             ***** This routine removes the job currently being
      841    16385                   processed from the sysid list (JP_Q) ...
      842    16386        */
      843    16387    3       DO INHIBIT;
      844    16388    3         T$ = JP_Q.SCAN$;
      845    16389    3         JP_Q.SCAN$ = T$ -> JP$JOB.LNK$;
      846    16390    3         T$ -> JP$JOB.LNK$ = JP_Q.FREE$;
      847    16391    3         JP_Q.FREE$ = T$;
      848    16392    3       END;
      849    16393    2       RETURN;
      850    16394    2   END REMOVE_SYSID;
      851    16395    1   END JPS$SCAN;

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:29   
--  Include file information  --

   JP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   XSJ_SUBS_C.:E05TOU  is referenced.
   XSJ_MAC_C.:E05TOU  is referenced.
   OC_MESSHD_C.:E05TOU  is referenced.
   OC_SUBS_C.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
   KL_SUPER_C.:E05TOU  is referenced.
   JP_MACRO_C.:E05TOU  is referenced.
   JM_SUBS_C.:E05TOU  is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   JG_EVID_C.:E05TOU  is referenced.
   FOS_SUBS_C.:E05TOU  is referenced.
   FOO_MAC_C.:E05TOU  is referenced.
   FS$FIT.:E05TOU  is referenced.
   FM$FIT.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   JP_PERR_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   AS_SUPER_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JPS$SCAN.

   Procedure JPS$SCAN requires 815 words for executable code.
   Procedure JPS$SCAN requires 26 words of local(AUTO) storage.

    No errors detected in file JPS$SCAN.:E05TSI    .
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:30   

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:31   

 Object Unit name= JPS$SCAN                                   File name= JPS$SCAN.:E05TOU
 UTS= JUL 29 '97 23:38:44.08 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$CG
    2   DCB   even  none     0      0  M$EI
    3   DCB   even  none     0      0  M$LO
    4   DCB   even  none     0      0  M$JOBSTAT
    5   DCB   even  none     0      0  M$HLP
    6   DCB   even  none     0      0  M$USERS
    7   Data  even  none  1668   3204  JPS$SCAN
    8  RoData even  UTS    247    367  JPS$SCAN
    9   Proc  even  none   815   1457  JPS$SCAN
   10  RoData even  none    52     64  JPS$SCAN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     9      0   yes    yes     yes      Std        0  JPS$SCAN
     9   1350          yes     yes      Std        0  JPS$INIT
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:32   

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    7    170  OPEN_LO                            7    262  ABORTHDR
    7    320  WRITE_LO                           8     44  B$JIT0_LO$
    7    352  START_PRINTING                     7    354  CUR_RECNO
    7    355  PASS_SPECIFIED#                    7    356  BAD_RECNO
    7    357  INSYM_INFO$                        7    360  CODE04$
    7    361  LO_WSN                             7    410  INSYM_FIT
    7   2413  PCB                                7   2431  ERR_BLK
    7   2460  U$PARAM                            7   2540  JP_CONTINUE
    7   2607  JOB_TBL                            7   2676  PSN_TBL
    7   3021  VIRT_TBL                           7   3126  OC_MSG

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 JPA$GET_PAGE
         yes           Std       1 CPD$SYNTRY
         yes           Std       1 JPE$REASON
 yes     yes           Std       3 CPO$GET_RES
         yes           Std       1 JPT$REPORT
 yes     yes           Std       2 XSF$LOCCODP
         yes           Std       1 JPA$CONTINUE
         yes           Std       4 CPD$SET_NODES
         yes           Std       4 JPR$FINRES
         yes           Std       5 CXP$POSTERR
 yes     yes           Std       7 CPO$RESOURCE
         yes           Std       2 CXX$VERIFY
 yes     yes           Std       0 JPJ$JOB
         yes           Std       1 CPD$NULL_SFROUTINE
         yes           Std       2 JPE$ERRORS
 yes     yes           Std       1 X$PARSE
 yes     yes           Std       1 XSJ$WRITE
 yes     yes           Std       0 JPJ$LOG_GOOD
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:33   
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  ACCT_SYMI                             READ_CARD
     M$EI$                                 M$LO$                            r    B$JIT$
r    B$TCB$                           r    TEXT$                            r    PHYS_LIST$
r    WORK$                                 AS_USERS                              M$CG
     M$EI                                  M$LO                                  M$JOBSTAT
     M$HLP                                 M$USERS                               NHPSN#
     SCAN_CMDS#                            PASSWORD_OK#                          PASS_TWO#
     ES$                                   IBEX_CMD                              JP_Q
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:34   


        1        1        /*M* JPS$SCAN PRESCAN's routine to prescan a job file */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=0,DCI=4,CSI=2,IAD=2,DTI=2,AND,ECI=0,DIN=2,STI=2 */
        8        8        /**/
        9        9        /*P* NAME:         JPS$SCAN
       10       10             PURPOSE:      To do the actual PRESCANning of job files
       11       11        */
       12       12        /**/
       13       13        /*F* NAME:         JPS$SCAN
       14       14             PURPOSE:      To scan a job file
       15       15             CALL:         JPS$SCAN
       16       16             INPUT:        JP_Q.SCAN$ points to a JP$JOB frame describing the
       17       17                           job to be prescanned
       18       18             DESCRIPTION:  Called from JPP$PRESCAN when a job needs to
       19       19                           be scanned.  The input job frame has been
       20       20                           placed on the head of the SCAN
       21       21                           queue which is visible to the M$JOBSTATS
       22       22                           service, and will stay there whilst the
       23       23                           actual scanning is going on.
       24       24
       25       25                           JPS$SCAN ALTRETs if it did not like the job,
       26       26                           in which case the frame has been removed
       27       27                           from the SCAN queue and deleted.  If, on
       28       28                           the other hand we RETURN, this means that
       29       29                           the job has been accepted and shipped to
       30       30                           MBS.  Furthermore, the job frame is still on
       31       31                           the SCAN queue.   It will stay there until
       32       32                           MBS sends us a message indicating that the
       33       33                           job has been safely received into his tables.
       34       34                           This is done to ensure that the job is
       35       35                           always visible to M$JOBSTATS and that there
       36       36                           is no window of time during which it's on
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:35   
       37       37                           nobody's queue. */
       38       38        /**/
       39       39        JPS$SCAN: PROC ALTRET;

     39  9 000000   000000 700200 xent  JPS$SCAN     TSX0  ! X66_AUTO_0
         9 000001   000032 000000                    ZERO    26,0

       40       40        /**/
       41       41        /*
       42       42             This is a brief description of the function of the modules
       43       43             which make up PRESCAN.
       44       44
       45       45          JPA$CONTINUE (JPA$SUBR)
       46       46                Handles continuation for the parser (X$PARSE).
       47       47
       48       48          JPA$GET_PAGE (JPA$SUBR)
       49       49                Gets a page in the specified data segment.
       50       50
       51       51          JPA$GET_VAR (JPA$SUBR)
       52       52                Gets the value associated with specified COMMAND VARIABLES.
       53       53                These variables are used to mantain state information.
       54       54
       55       55          JPA$PUT_VAR (JPA$SUBR)
       56       56                Companion to JPA$GET_VAR. Allows the specified COMMAND
       57       57                VARIABLES to be set to a desired value.
       58       58
       59       59          JPB$EVENT
       60       60                This routine handles all events and communication
       61       61                via the Central System Comgroup to the rest of the system.
       62       62                It also contains PRESCAN's exit control routine,
       63       63                JPB$XCON, which handles all abort conditions.
       64       64
       65       65          JPE$ERROR (JPE$SUBR)
       66       66                This routine has two functions. If an error code is passed
       67       67                then just it (with an optional substitution) is printed.
       68       68                If no parameters are passed then any errors saved by
       69       69                CXP$POSTERR are reported. If M$LO has not been opened
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:36   
       70       70                yet (no errors listed yet) then UNWIND is used to force
       71       71                the second pass by PRESCAN over the ECL file.
       72       72
       73       73          JPE$REASON (JPE$SUBR)
       74       74                When a job is rejected for some reason the user needs
       75       75                to know why. JPE$REASON stores the reason which will
       76       76                be returned when the user uses M$JOBSTATS (!CHECK command).
       77       77
       78       78          JPJ$JOB
       79       79                Parses and processes the !JOB command
       80       80
       81       81          JPP$PRESCAN
       82       82                This is the mainline, and driver of PRESCAN.   It
       83       83                fields communications from the rest of the system,
       84       84                and calls JPS$SCAN when there is something to
       85       85                prescan.
       86       86
       87       87          JPR$FINRES (JPR$SUBR)
       88       88                This routine takes the tables prepared by CPO$RESOURCE
       89       89                (or defaults) and packages them up for MBS.
       90       90
       91       91          JPS$SCAN
       92       92                This routine is the driver of the actual prescanning
       93       93                process.
       94       94
       95       95          JPT$REPORT (JPT$SUBR)
       96       96                This routine tells the operator that some error occured
       97       97                while trying to PRESCAN this job. An error message may
       98       98                be passed. If not, then B$TCB.ALT$ -> B$ALT.ERR is used.
       99       99
      100      100          CPD$SYNTAX
      101      101                Sets up information needed for parsing the commands.
      102      102
      103      103          CPD$SYNTRY
      104      104                Intercepts information from the parser and determines
      105      105                which routines should be called. Entered on SUCCESS and
      106      106                CONTINUATION processing.
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:37   
      107      107
      108      108          CXP$POSTERR
      109      109                This routine is used to store error messages and
      110      110                associated information for use by JPE$ERROR.
      111      111
      112      112          CPO$EXPAND (CPO$SUBR)
      113      113                This routine takes the list of physical resources
      114      114                and expands it into a table of a form agreeable to
      115      115                MBS and M$LIMIT.
      116      116
      117      117          CPO$GET_RES (CPO$SUBR)
      118      118                Get the lists of resources available.
      119      119
      120      120          CPO$PROCESS_VIRT_RES (CPO$SUBR)
      121      121             This routine takes the parse tree and processes all the
      122      122             options specified and adds the new resource to physical
      123      123             resource list. (Called by CPO$RESOURCE)
      124      124
      125      125          CPO$RESOURCE (CPO$SUBR)
      126      126             This routine takes the parse tree and builds (with a little
      127      127             help from its friends) the packset list, physical list and
      128      128             pseudo list.
      129      129
      130      130          CPO$VALATTR (CPO$SUBR)
      131      131             This recursive routine does something. It is tied into
      132      132             CPO$GET_RES.
      133      133
      134      134          CPO$VALIDATE (CPO$SUBR)
      135      135             This routine validates the resource requests against what
      136      136             the system actually has available as well as what the user
      137      137             is allowed to ask for.
      138      138          CPO$RESOURCE (CPO$SUBR)
      139      139                This routine sets up all tables to pass to MBS.
      140      140
      141      141          CPX$CONTEXT1 - 7
      142      142          CPX$RESOURC
      143      143                These routines check for CONTEXT errors. These errors
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:38   
      144      144                are errors that result from bad values passed.
      145      145        */
      146      146        /*
      147      147             ***** Flags used by PRESCAN ...
      148      148
      149      149          PASS_TWO#  -  This flag indicates whether PRESCAN in the second
      150      150                        pass over the job file. If it is, then some error
      151      151                        has occured and this job will not be sent to MBS.
      152      152                        The offending records will be written to some LP
      153      153                        (which printer depends on a number of things) with
      154      154                        a summary of errors.
      155      155
      156      156          PASSWORD_OK#  -  This flag is used by JPJ$JOB to remember if the
      157      157                           job matched password criteria. (See JPJ$JOB for
      158      158                           full details) This is needed for the second pass
      159      159                           to avoid reporting bad password. (Password is blanked
      160      160                           out in the !JOB command on first pass.)
      161      161
      162      162        */
      163      163        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:39   
      164      164        /***** Include files *****/
      165      165          %INCLUDE AS_SUPER_C;
      166      600 S        %INCLUDE B$JIT_C;
      167      601          %INCLUDE B$ROSEG;
      168      664          %INCLUDE B_ERRORS_C;
      169     1791          %INCLUDE CP_6;
      170     1872          %INCLUDE CP_6_SUBS;
      171     2412          %INCLUDE CP_MACROS_C;
      172     3164          %INCLUDE JP_PERR_C;
      173     3182          %INCLUDE CP_SUBS_C;
      174     4099          %INCLUDE FM$FIT;
      175     4320          %INCLUDE FS$FIT;
      176     4363          %INCLUDE FOO_MAC_C;
      177     5111          %INCLUDE FOS_SUBS_C;
      178     5128          %INCLUDE JG_EVID_C;
      179     5353          %INCLUDE JM$STRUCT;
      180     6098          %INCLUDE JM_SUBS_C;
      181     6204          %INCLUDE JP_MACRO_C;
      182     6359          %INCLUDE KL_SUPER_C;
      183     9261          %INCLUDE M_INFO_C;
      184     9401          %INCLUDE OC_SUBS_C;
      185    10132          %INCLUDE OC_MESSHD_C;
      186    10185          %INCLUDE XSJ_MAC_C;
      187    10264          %INCLUDE XSJ_SUBS_C;
      188    10291          %INCLUDE XU_MACRO_C;
      189    13397          %INCLUDE JP_DATA_R;
      190    13942        /***** External routines *****/
      191    13943    1     DCL     CPD$SET_NODES  ENTRY(4);
      192    13944    1     DCL     CPD$SYNTAX     ENTRY(1)    ALTRET;
      193    13945    1     DCL     CPD$SYNTRY     ENTRY(1);
      194    13946    1     DCL     CPD$NULL_SFROUTINE ENTRY(1);
      195    13947    1     DCL     CPO$GET_RES    ENTRY(3) ALTRET;
      196    13948    1     DCL     CXX$VERIFY     ENTRY(2);
      197    13949    1     DCL     CXP$POSTERR    ENTRY(5);
      198    13950    1     DCL     CPO$RESOURCE   ENTRY(7) ALTRET;
      199    13951    1     DCL     JPA$CONTINUE   ENTRY(1);
      200    13952    1     DCL     JPA$GET_PAGE   ENTRY(2);
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:40   
      201    13953    1     DCL     JPA$GET_VAR    ENTRY(2) ALTRET;
      202    13954    1     DCL     JPE$REASON     ENTRY(1);
      203    13955    1     DCL     JPE$ERRORS     ENTRY(2);
      204    13956    1     DCL     JPJ$JOB        ENTRY ALTRET;
      205    13957    1     DCL     JPJ$LOG_GOOD   ENTRY ALTRET; /* Never altrets */
      206    13958    1     DCL     JPR$FINRES     ENTRY(4);
      207    13959    1     DCL     JPR$RESOURCE   ENTRY(5);
      208    13960    1     DCL     JPT$REPORT     ENTRY(1);
      209    13961    1     DCL     X$PARSE        ENTRY(1)    ALTRET;
      210    13962    1     DCL     XSF$LOCCODP    ENTRY(2)    ALTRET;
      211    13963    1     DCL     XSJ$WRITE      ENTRY(1)    ALTRET;
      212    13964        /***** Symref data *****/
      213    13965    1     DCL IBEX_CMD BIT(36) SYMREF;
      214    13966          %JP$Q (NAME=JP_Q,STCLASS=SYMREF);
      215    13997        /***** Fpts *****/
      216    13998          %FPT_CLOSE(FPTN = CLOSE_JOB,STCLASS = STATIC,
      217    13999                     DCB = M$EI,
      218    14000                     CHGATT = YES,
      219    14001                     DISP = SAVE,
      220    14002                     NAME = JOBNAME,
      221    14003                     UATTR = JOB_TBL,
      222    14004                     INSTATTR = PSN_TBL,
      223    14005                     PROCATTR = VIRT_TBL);
      224    14047          %FPT_CLOSE(FPTN = CLOSE_LO,STCLASS = STATIC,
      225    14048                     DCB = M$LO);
      226    14090          %FPT_PFIL(FPTN = FPT_PFIL,STCLASS = CONSTANT,
      227    14091                    DCB = M$EI,
      228    14092                    BOF = YES);
      229    14107          %FPT_TIME(FPTN = DEFER_TSTAMP,STCLASS = CONSTANT,
      230    14108                    SOURCE = LOCAL,
      231    14109                    DEST = UTS,
      232    14110                    TSTAMP = JOB_TBL.RATIM);
      233    14129          %FPT_OPEN(FPTN = OPEN_JOB,STCLASS = STATIC,
      234    14130                    ACCT = ACCT_SYMI,
      235    14131                    ASN = FILE,
      236    14132                    FUN = UPDATE,
      237    14133                    FPARAM = INSYM_FIT,
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:41   
      238    14134                    NAME =JOBNAME,
      239    14135                    DCB = M$EI);
      240    14244          %VLP_NAME (FPTN = JOBNAME,NAME = '0000000',STCLASS = STATIC);
      241    14271          %FPT_OPEN(FPTN = OPEN_LO,STCLASS = "STATIC SYMDEF",
      242    14272                    SCRUB = YES,
      243    14273                    WSN = LO_WSN,
      244    14274                    HDR = ABORTHDR,
      245    14275                    ASN = DEVICE,
      246    14276                    RES = 'LP',
      247    14277                    FUN = CREATE,
      248    14278                    EXIST = NEWFILE,
      249    14279                    PROCATTR = B$JIT0_LO,
      250    14280                    DCB = M$LO);
      251    14389          %VLP_HDR(FPTN = ABORTHDR,STCLASS ="STATIC SYMDEF",INDENT=5,
      252    14390        TITLE ="'* ACCOUNT ,UNAME        ****** JOB FAILED BY PRESCAN   *******'");
      253    14406          %FPT_WRITE(FPTN = SEND_MBS,STCLASS = STATIC,
      254    14407                     BUF = MBS_MSG,
      255    14408                     DCB = M$CG,
      256    14409                     STATION = STATION_MBS);
      257    14440          %VLP_STATION (FPTN = STATION_MBS,STCLASS = CONSTANT,
      258    14441                        STATION = 'MBS');
      259    14468          %FPT_WRITE(FPTN = WRITE_LO,STCLASS = "STATIC SYMDEF",
      260    14469                     DCB = M$LO);
      261    14500          %FPT_TIME(FPTN = OFF_TIME,STCLASS = CONSTANT,
      262    14501                    TSTAMP = XSJ_JOBINFO.OFF_TIME#,
      263    14502                    SOURCE = CLOCK,
      264    14503                    DEST = UTS);
      265    14522            /***** Constant data *****/
      266    14523    1     DCL B$JIT0_LO$ PTR CONSTANT SYMDEF INIT(ADDR(B$JIT0_LO));
      267    14524          %XSJ_PARAM(FPTN = WRITE_JOBSTATS,STCLASS = STATIC,
      268    14525                  DCB = M$JOBSTAT,
      269    14526                  BUF = XSJ_JOBINFO,
      270    14527                  TYPE = %TYP_INFO#);
      271    14544          %XSJ_JOBINFO(FPTN = XSJ_JOBINFO,STCLASS = STATIC);
      272    14559          %JM_IF (FPTN = JOB_TBL_INIT,FIT = YES,STCLASS = CONSTANT);
      273    14717          %JM_SNLIST(FPTN = PSN_TBL_INIT,ARRAY = "(0:PSN_SLOTS)",FIT = YES,STCLASS =
             14717              CONSTANT);
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:42   
      274    14774          %JM_RESLIST(FPTN = VIRT_TBL_INIT,ARRAY = "(0:VIRT_SLOTS)",FIT = YES,STCLASS =
             14774              CONSTANT);
      275    14829          %JM_CITE (FPTN = MBS_MSG_INIT,STCLASS = CONSTANT);
      276    14879        /***** Static data *****/
      277    14880    1     DCL START_PRINTING REMEMBER STATIC SYMDEF;
      278    14881    1     DCL CUR_RECNO SBIN STATIC SYMDEF;
      279    14882    1     DCL PASS_SPECIFIED# BIT(1) STATIC SYMDEF;
      280    14883    1     DCL BAD_RECNO SBIN STATIC SYMDEF;
      281    14884    1     DCL INSYM_INFO$ PTR STATIC SYMDEF;
      282    14885    1     DCL CODE04$ PTR STATIC SYMDEF;
      283    14886    1     DCL LO_WSN CHAR(8) STATIC SYMDEF;
      284    14887    1     DCL B$JIT0_LO (0:20) SBIN STATIC;
      285    14888    1     DCL INSYM_FIT (0:1024) UBIN WORD STATIC SYMDEF;
      286    14889    1     DCL IDTEXT CHAR(6) STATIC;
      287    14890          %P_PCB( NAME = PCB,STCLASS = "STATIC SYMDEF");
      288    15089          %ERR_BLK (STCLASS="STATIC SYMDEF");
      289    15114          %U$PARAM(NAME = U$PARAM,STCLASS = "STATIC SYMDEF");
      290    15130          %VLP_PSEUDO (FPTN = PSEUDO_LIST,N = PSEUDO_SLOTS,STCLASS = STATIC);
      291    15146          %JP_CONTINUE (STCLASS = "STATIC SYMDEF");
      292    15152        /***** Parameters passed to MBS thru FIT *****/
      293    15153          %JM_IF (FPTN = JOB_TBL,FIT = YES,STCLASS = "STATIC SYMDEF");
      294    15311          %JM_SNLIST(FPTN = PSN_TBL,ARRAY = "(0:PSN_SLOTS)",FIT = YES,STCLASS =
             15311              "STATIC SYMDEF");
      295    15368          %JM_RESLIST(FPTN = VIRT_TBL,ARRAY = "(0:VIRT_SLOTS)",FIT = YES,STCLASS =
             15368              "STATIC SYMDEF");
      296    15423        /***** Info to MBS passed thru CSCG *****/
      297    15424          %JM_CITE(FPTN = MBS_MSG,STCLASS = STATIC);
      298    15474        /***** Templates/fpts for messages to OC *****/
      299    15475          %FPT_WRITE (FPTN = OC_MSG,DCB = M$CG,STCLASS = "STATIC SYMDEF");
      300    15506          %OC_MESSHD_W( NAME = JOB_MSG,STCLASS = STATIC,
      301    15507                        NPARMS = 12,
      302    15508                        MSG = JP_JOB_MSG#,
      303    15509                        FUNC = WR);
      304    15522    1       2 *(0:11) UBIN BYTE UNAL INIT(2,8,12,8,2,8,12,8,1,2,8,31),
      305    15523    1         2 JOBID1 UBIN HALF UNAL,
      306    15524    1         2 ACCT1 CHAR(8),
      307    15525    1         2 UNAME1 CHAR(12),
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:43   
      308    15526    1         2 WSN1 CHAR(8),
      309    15527    1         2 JOBID2 UBIN HALF UNAL,
      310    15528    1         2 ACCT2 CHAR(8) UNAL,
      311    15529    1         2 UNAME2 CHAR(12),
      312    15530    1         2 WSN2 CHAR(8),
      313    15531    1         2 REASON UBIN BYTE UNAL,
      314    15532    1         2 DEVTYP CHAR(2),
      315    15533    1         2 TNAME CHAR(8),
      316    15534    1         2 JOBNAME CHAR(31) CALIGNED;
      317    15535        /***** Based data *****/
      318    15536          %CODE04 (BASED="BASED(CODE04$)");
      319    15544          %B$JIT0(STCLASS="BASED(B$JIT$)");
      320    15633          %U$JIT1;
      321    15707          %M$JIT2X;
      322    15710          %F$JIT3X;
      323    15713          %S$JIT4X;
      324    15716          %J$JIT5X;
      325    15719          %A$JIT6X;
      326    15722          %FS$JOBORIG(NAME = INSYM$INFO,STCLASS = "BASED(INSYM_INFO$)");
      327    15728          %PARSE$OUT(NAME = P$B,STCLASS = BASED);
      328    15773          %PARSE$SYM(NAME = P$S,STCLASS = BASED);
      329    15811          %JP$JOB(NAME = JP$JOB,STCLASS = BASED);
      330    15821          %VLP_PRES (FPTN = PHYS_LIST,STCLASS ="BASED(PHYS_LIST$)");
      331    15837    1     DCL     READ$BUF    CHAR(%CPBUFFSIZE)  BASED    ALIGNED;
      332    15838    1     DCL     READ$BUFB   BIT(36)            BASED    ALIGNED;
      333    15839    1     DCL     W$BUF    CHAR(PCB.NCHARS)  BASED UNAL;
      334    15840    1     DCL     JNAMEB    CHAR(JOB_TBL.JNL) BASED CALIGNED;
      335    15841        /***** Auto data *****/
      336    15842    1     DCL CALL_FLAG# BIT(1) ALIGNED AUTO;
      337    15843    1     DCL RES_PEND# BIT(1) ALIGNED AUTO;
      338    15844    1     DCL FINRES_PEND# BIT(1) ALIGNED AUTO;
      339    15845    1     DCL RELEASE_ALL# BIT(1) ALIGNED AUTO;
      340    15846    1     DCL I SBIN WORD AUTO;
      341    15847    1     DCL J SBIN WORD AUTO;
      342    15848    1     DCL K SBIN WORD AUTO;
      343    15849    1     DCL SYSID UBIN HALF AUTO;
      344    15850    1     DCL PHYS_LIST_SIZE UBIN WORD AUTO;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:44   
      345    15851    1     DCL T$ PTR AUTO;
      346    15852        /***** Error codes *****/
      347    15853        %ERR_CODE(NAME=E_JOBIMBED,FCG#=PRESCANFCG,MID#='23'O,CODE#=%E$JPJOBIMBED,STCLASS=
             15853            CONSTANT);
      348    15873        /*E* ERROR: JPS-E$JPJOBIMBED-0
      349    15874             MESSAGE: Illegal - imbedded !JOB command
      350    15875        */
      351    15876        %ERR_CODE (NAME=E_RESIMBED,FCG#=PRESCANFCG,MID#='23'O,CODE#=%E$JPRESIMBED,STCLASS=
             15876            CONSTANT);
      352    15896        /*E*    ERROR: JPS-E$JPRESIMBED-0
      353    15897                MESSAGE: Misplaced or multiple !RESOURCE commands
      354    15898        */
      355    15899        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:45   
      356    15900        /*
      357    15901              ********* Start the SCAN here
      358    15902        */
      359    15903    1       REMEMBER SECOND_PASS IN START_PRINTING;

  15903  9 000002   000021 635000 9                  EAA     SECOND_PASS
         9 000003   000352 452400 7                  STP2    START_PRINTING
         9 000004   000353 755000 7                  STA     START_PRINTING+1

      360    15904    1       B$JIT0_LO = B$JIT;

  15904  9 000005   000000 470400 xsym               LDP0    B$JIT$
         9 000006   000000 100500                    MLR     fill='000'O
         9 000007   000000 000124                    ADSC9   0,,PR0                   cn=0,n=84
         9 000010   000363 000124 7                  ADSC9   B$JIT0_LO                cn=0,n=84

      361    15905    1       SYSID = JP_Q.SCAN$ -> JP$JOB.SYSID;

  15905  9 000011   000005 471400 xsym               LDP1    JP_Q+5
         9 000012   100001 720100                    LXL0    1,,PR1
         9 000013   200012 740100                    STX0    SYSID,,AUTO

      362    15906    1       CALL GET_SYSID ALTRET(SKIP_PRESCAN);

  15906  9 000014   000042 701000 9                  TSX1    GET_SYSID
         9 000015   000036 702000 9                  TSX2    SKIP_PRESCAN

      363    15907    1       CALL PRESCAN;

  15907  9 000016   000301 701000 9                  TSX1    PRESCAN
         9 000017   000000 011000                    NOP     0

      364    15908    2       DO NEVER;

  15908  9 000020   000036 710000 9                  TRA     SKIP_PRESCAN

      365    15909    2   SECOND_PASS:
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:46   
      366    15910        /*
      367    15911             ***** During the second pass by PRESCAN all
      368    15912                   records will be printed on the printer.
      369    15913                   Errors will be printed also.
      370    15914                   The job will not be passed to MBS ...
      371    15915        */
      372    15916    2         PASS_TWO# = %YES#;

  15916  9 000021   400000 236003       SECOND_PASS  LDQ     -131072,DU
         9 000022   000000 756000 xsym               STQ     PASS_TWO#

      373    15917    2         CALL M$PFIL (FPT_PFIL) ALTRET(IO_ALT);

  15917  9 000023   000000 630400 8                  EPPR0   FPT_PFIL
         9 000024   440004 713400                    CLIMB   alt,+16388
         9 000025   400000 401760                    pmme    nvectors=1
         9 000026   000032 702000 9                  TSX2    IO_ALT

      374    15918    2         CALL PRESCAN;  /* For the second pass */

  15918  9 000027   000301 701000 9                  TSX1    PRESCAN
         9 000030   000000 011000                    NOP     0

      375    15919    3         DO NEVER;

  15919  9 000031   000036 710000 9                  TRA     SKIP_PRESCAN

      376    15920    3   IO_ALT:
      377    15921    3           CALL JPE$REASON (%REJ_IO#);

  15921  9 000032   000001 630400 10    IO_ALT       EPPR0   1
         9 000033   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 000034   000000 701000 xent               TSX1    JPE$REASON
         9 000035   000000 011000                    NOP     0

      378    15922    3         END;

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:47   
      379    15923    2       END; /* Do ... second pass ... end */

      380    15924    1   SKIP_PRESCAN:   /* Skip PRESCAN. Cleanup if possible */
      381    15925    1       CALL CLEANUP ALTRET(E_SCAN);

  15925  9 000036   001104 701000 9     SKIP_PRESCAN TSX1    CLEANUP
         9 000037   000041 702000 9                  TSX2    E_SCAN

      382    15926    1       RETURN;

  15926  9 000040   000000 702200 xent               TSX2  ! X66_ARET

      383    15927    1   E_SCAN:
      384    15928    1       ALTRETURN;

  15928  9 000041   000000 702200 xent  E_SCAN       TSX2  ! X66_AALT

      385    15929        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:48   
      386    15930    1   GET_SYSID: PROC ALTRET;

  15930  9 000042   200016 741300       GET_SYSID    STX1  ! T$+2,,AUTO

      387    15931        /*
      388    15932             ***** Perform initialization prior to actually scanning
      389    15933        */
      390    15934    2       B$JIT0_LO = B$JIT;

  15934  9 000043   000000 470400 xsym               LDP0    B$JIT$
         9 000044   000000 100500                    MLR     fill='000'O
         9 000045   000000 000124                    ADSC9   0,,PR0                   cn=0,n=84
         9 000046   000363 000124 7                  ADSC9   B$JIT0_LO                cn=0,n=84

      391    15935    2       B$JIT0_LO$->B$JIT.SYSID = SYSID;

  15935  9 000047   200012 220100                    LDX0    SYSID,,AUTO
         9 000050   000044 471400 8                  LDP1    B$JIT0_LO$
         9 000051   100000 440100                    SXL0    0,,PR1

      392    15936    2       MBS_MSG = MBS_MSG_INIT;

  15936  9 000052   000000 100400                    MLR     fill='000'O
         9 000053   000356 000024 8                  ADSC9   MBS_MSG_INIT             cn=0,n=20
         9 000054   003120 000024 7                  ADSC9   MBS_MSG                  cn=0,n=20

      393    15937    2       MBS_MSG.SYSID = SYSID;

  15937  9 000055   003120 440000 7                  SXL0    MBS_MSG

      394    15938    2       WRITE_JOBSTATS.SYSID# = SYSID;

  15938  9 000056   000340 440000 7                  SXL0    WRITE_JOBSTATS+4

      395    15939        /*
      396    15940            ***       Open the job file to be PRE-SCANNED...
      397    15941        */
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:49   
      398    15942    2       CALL BINCHAR(IDTEXT,SYSID);

  15942  9 000057   200012 235100                    LDA     SYSID,,AUTO
         9 000060   000022 771000                    ARL     18
         9 000061   000044 773000                    LRL     36
         9 000062   200022 757100                    STAQ    T$+6,,AUTO
         9 000063   000000 301500                    BTD
         9 000064   200022 000010                    NDSC9   T$+6,,AUTO               cn=0,s=lsgnf,sf=0,n=8
         9 000065   002411 030006 7                  NDSC9   IDTEXT                   cn=0,s=nosgn,sf=0,n=6

      399    15943    2       CALL CONCAT(JOBNAME.NAME#,IDTEXT,'P');

  15943  9 000066   040000 100400                    MLR     fill='040'O
         9 000067   002411 000006 7                  ADSC9   IDTEXT                   cn=0,n=6
         9 000070   000166 200006 7                  ADSC9   JOBNAME                  cn=1,n=6
         9 000071   000120 236007                    LDQ     80,DL
         9 000072   000167 552004 7                  STBQ    JOBNAME+1,'04'O

      400    15944    2       OPEN_JOB.V.OPER.TEST# = %NO#;

  15944  9 000073   000002 236000 10                 LDQ     2
         9 000074   000140 356000 7                  ANSQ    OPEN_JOB+36

      401    15945    2       OPEN_JOB.V.DELETE# = %NO#;

  15945  9 000075   000003 236000 10                 LDQ     3
         9 000076   000140 356000 7                  ANSQ    OPEN_JOB+36

      402    15946    2       CALL M$OPEN(OPEN_JOB) ALTRET(OPN_JOB_ALT);

  15946  9 000077   000074 630400 7                  EPPR0   OPEN_JOB
         9 000100   450000 713400                    CLIMB   alt,open
         9 000101   410400 401760                    pmme    nvectors=18
         9 000102   000104 702000 9                  TSX2    OPN_JOB_ALT

      403    15947        /*
      404    15948             ***** Recover from bad file open ...
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:50   
      405    15949        */
      406    15950    3       DO NEVER;

  15950  9 000103   000136 710000 9                  TRA     s:15971

      407    15951    3   OPN_JOB_ALT:
      408    15952    3         IF B$TCB.ALT$->B$ALT.ERR.CODE=%E$NOFILE

  15952  9 000104   000000 470400 xsym  OPN_JOB_ALT  LDP0    B$TCB$
         9 000105   000000 471500                    LDP1    0,,PR0
         9 000106   100102 236100                    LDQ     66,,PR1
         9 000107   377770 376007                    ANQ     131064,DL
         9 000110   001610 116007                    CMPQ    904,DL
         9 000111   000123 601000 9                  TNZ     s:15961

      409    15953    3         THEN
      410    15954    4           DO;              /* Probably a duplicate entry*/

      411    15955    4             CALL INSERT(JOBNAME.NAME#,6,1,'S');

  15955  9 000112   000123 236007                    LDQ     83,DL
         9 000113   000167 552004 7                  STBQ    JOBNAME+1,'04'O

      412    15956    4             OPEN_JOB.V.OPER.TEST# = %YES#;

  15956  9 000114   020000 236007                    LDQ     8192,DL
         9 000115   000140 256000 7                  ORSQ    OPEN_JOB+36

      413    15957    4             CALL M$OPEN(OPEN_JOB) ALTRET(IO_ALT);

  15957  9 000116   000074 630400 7                  EPPR0   OPEN_JOB
         9 000117   450000 713400                    CLIMB   alt,open
         9 000120   410400 401760                    pmme    nvectors=18
         9 000121   000271 702000 9                  TSX2    IO_ALT

      414    15958    4           END;

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:51   
  15958  9 000122   000134 710000 9                  TRA     OPEN_ERR

      415    15959    3         ELSE
      416    15960    4           DO;  /* Delete the file and tell operator */

      417    15961    4             CALL JPT$REPORT;

  15961  9 000123   000002 631400 xsym               EPPR1   B_VECTNIL+2
         9 000124   000000 701000 xent               TSX1    JPT$REPORT
         9 000125   000000 011000                    NOP     0

      418    15962    4             OPEN_JOB.V.DELETE# = %YES#;

  15962  9 000126   040000 236007                    LDQ     16384,DL
         9 000127   000140 256000 7                  ORSQ    OPEN_JOB+36

      419    15963    4             CALL M$OPEN(OPEN_JOB) ALTRET(OPEN_ERR);

  15963  9 000130   000074 630400 7                  EPPR0   OPEN_JOB
         9 000131   450000 713400                    CLIMB   alt,open
         9 000132   410400 401760                    pmme    nvectors=18
         9 000133   000134 702000 9                  TSX2    OPEN_ERR

  15962  9 000134                       OPEN_ERR     null
      420    15964    4   OPEN_ERR: ;/* Ignore this altret??? */
      421    15965    4           END;

      422    15966    3         ALTRETURN;

  15966  9 000134   200016 221300                    LDX1  ! T$+2,,AUTO
         9 000135   000000 702211                    TSX2  ! 0,X1

      423    15967    3       END;   /* Do never ... end */

      424    15968        /*
      425    15969             ***** Init misc. variables ...
      426    15970        */
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:52   
      427    15971    2       PASS_TWO# = %NO#;

  15971  9 000136   000000 450000 xsym               STZ     PASS_TWO#

      428    15972    2       PASSWORD_OK# = %NO#;

  15972  9 000137   000000 450000 xsym               STZ     PASSWORD_OK#

      429    15973    2       PASS_SPECIFIED# = %NO#;

  15973  9 000140   000355 450000 7                  STZ     PASS_SPECIFIED#

      430    15974    2       JOB_TBL = JOB_TBL_INIT;

  15974  9 000141   000000 100400                    MLR     fill='000'O
         9 000142   000045 000334 8                  ADSC9   JOB_TBL_INIT             cn=0,n=220
         9 000143   002607 000334 7                  ADSC9   JOB_TBL                  cn=0,n=220

      431    15975    2       JOB_TBL.COUNT = JOB_TBL.COUNT - 1;

  15975  9 000144   002607 235000 7                  LDA     JOB_TBL
         9 000145   000001 135007                    SBLA    1,DL
         9 000146   002607 755000 7                  STA     JOB_TBL

      432    15976    2       JOB_TBL.SYSID = SYSID;

  15976  9 000147   200012 220100                    LDX0    SYSID,,AUTO
         9 000150   002624 440000 7                  SXL0    JOB_TBL+13

      433    15977    2       JOB_TBL.STATUS = %PRE_PASSED#;

  15977  9 000151   000041 236007                    LDQ     33,DL
         9 000152   002623 552004 7                  STBQ    JOB_TBL+12,'04'O

      434    15978    2       BAD_RECNO = -1;   /* Denotes no error line */

  15978  9 000153   000001 335007                    LCA     1,DL
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:53   
         9 000154   000356 755000 7                  STA     BAD_RECNO

      435    15979        /*
      436    15980             ***** Get the Workstation Of Origin (WOO) from file's fit ...
      437    15981        */
      438    15982    2       INSYM_INFO$ = ADDR(INSYM_FIT);

  15982  9 000155   000004 236000 10                 LDQ     4
         9 000156   000357 756000 7                  STQ     INSYM_INFO$

      439    15983    2       CALL XSF$LOCCODP(INSYM_INFO$,11) ALTRET(IO_ALT);

  15983  9 000157   000005 630400 10                 EPPR0   5
         9 000160   000020 631400 xsym               EPPR1   B_VECTNIL+16
         9 000161   000000 701000 xent               TSX1    XSF$LOCCODP
         9 000162   000271 702000 9                  TSX2    IO_ALT

      440    15984    2       LO_WSN = INSYM$INFO.WOO;

  15984  9 000163   000357 470400 7                  LDP0    INSYM_INFO$
         9 000164   040000 100500                    MLR     fill='040'O
         9 000165   000003 000010                    ADSC9   3,,PR0                   cn=0,n=8
         9 000166   000361 000010 7                  ADSC9   LO_WSN                   cn=0,n=8

      441    15985    2       JOB_TBL.WOO = LO_WSN;

  15985  9 000167   040000 100400                    MLR     fill='040'O
         9 000170   000361 000010 7                  ADSC9   LO_WSN                   cn=0,n=8
         9 000171   002632 000010 7                  ADSC9   JOB_TBL+19               cn=0,n=8

      442    15986    2       JOB_TBL.WSN = LO_WSN;     /* Default        */

  15986  9 000172   040000 100400                    MLR     fill='040'O
         9 000173   000361 000010 7                  ADSC9   LO_WSN                   cn=0,n=8
         9 000174   002634 000010 7                  ADSC9   JOB_TBL+21               cn=0,n=8

      443    15987    2       B$JIT0_LO$->B$JIT.WOO = LO_WSN;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:54   

  15987  9 000175   000044 471400 8                  LDP1    B$JIT0_LO$
         9 000176   040100 100400                    MLR     fill='040'O
         9 000177   000361 000010 7                  ADSC9   LO_WSN                   cn=0,n=8
         9 000200   100010 000010                    ADSC9   8,,PR1                   cn=0,n=8

      444    15988        /*
      445    15989             ***** This wsn will be used as the output wsn
      446    15990                   if the WSN spec. on the !JOB cmd is bad ...
      447    15991        */
      448    15992    2       JOB_MSG.WSN2 = LO_WSN;

  15992  9 000201   040000 100400                    MLR     fill='040'O
         9 000202   000361 000010 7                  ADSC9   LO_WSN                   cn=0,n=8
         9 000203   003167 000010 7                  ADSC9   JOB_MSG+21               cn=0,n=8

      449    15993    2       JOB_MSG.JOBID2 = INSYM$INFO.SYSID;

  15993  9 000204   000357 470400 7                  LDP0    INSYM_INFO$
         9 000205   000005 220100                    LDX0    5,,PR0
         9 000206   003161 440000 7                  SXL0    JOB_MSG+15

      450    15994    2       IF INSYM$INFO.FLAG = JOBORIG_DEVICE#

  15994  9 000207   000006 236100                    LDQ     6,,PR0
         9 000210   777000 316003                    CANQ    -512,DU
         9 000211   000221 601000 9                  TNZ     s:16002

      451    15995    2       THEN
      452    15996    3         DO;

      453    15997    3           JOB_MSG.DEVTYP = INSYM$INFO.ORIGINATOR_PORT.FROM_CR.DEVICE;

  15997  9 000212   000000 236100                    LDQ     0,,PR0
         9 000213   000011 772000                    QRL     9
         9 000214   003171 552030 7                  STBQ    JOB_MSG+23,'30'O

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:55   
      454    15998    3           JOB_MSG.TNAME = INSYM$INFO.ORIGINATOR_PORT.FROM_CR.TNAME;

  15998  9 000215   040000 100500                    MLR     fill='040'O
         9 000216   000001 000010                    ADSC9   1,,PR0                   cn=0,n=8
         9 000217   003171 600010 7                  ADSC9   JOB_MSG+23               cn=3,n=8

      455    15999    3         END;

  15999  9 000220   000226 710000 9                  TRA     s:16005

      456    16000    2       ELSE
      457    16001    3         DO;

      458    16002    3           JOB_MSG.DEVTYP = ' ';

  16002  9 000221   000007 236000 10                 LDQ     7
         9 000222   003171 552030 7                  STBQ    JOB_MSG+23,'30'O

      459    16003    3           JOB_MSG.TNAME = ' ';

  16003  9 000223   040000 100400                    MLR     fill='040'O
         9 000224   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         9 000225   003171 600010 7                  ADSC9   JOB_MSG+23               cn=3,n=8

      460    16004    3         END;

      461    16005    2       JOB_TBL.ORIGINATOR_MODE = INSYM$INFO.ORIGINATOR_MODE;

  16005  9 000226   000006 236100                    LDQ     6,,PR0
         9 000227   000027 772000                    QRL     23
         9 000230   000017 376007                    ANQ     15,DL
         9 000231   000040 736000                    QLS     32
         9 000232   002657 756000 7                  STQ     JOB_TBL+40

      462    16006    2       JOB_TBL.ORIGINATOR_PORT = INSYM$INFO.ORIGINATOR_PORT;

  16006  9 000233   000000 100500                    MLR     fill='000'O
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:56   
         9 000234   000000 000014                    ADSC9   0,,PR0                   cn=0,n=12
         9 000235   002660 000014 7                  ADSC9   JOB_TBL+41               cn=0,n=12

      463    16007    2       CODE04$ = ADDR(INSYM_FIT);

  16007  9 000236   000004 236000 10                 LDQ     4
         9 000237   000360 756000 7                  STQ     CODE04$

      464    16008    2       CALL XSF$LOCCODP(CODE04$,4);

  16008  9 000240   000010 630400 10                 EPPR0   8
         9 000241   000020 631400 xsym               EPPR1   B_VECTNIL+16
         9 000242   000000 701000 xent               TSX1    XSF$LOCCODP
         9 000243   000000 011000                    NOP     0

      465    16009    2       JOB_MSG.ACCT2 = CODE04.CREATOR.ACCT;

  16009  9 000244   000360 470400 7                  LDP0    CODE04$
         9 000245   040000 100500                    MLR     fill='040'O
         9 000246   000003 000010                    ADSC9   3,,PR0                   cn=0,n=8
         9 000247   003162 000010 7                  ADSC9   JOB_MSG+16               cn=0,n=8

      466    16010    2       JOB_MSG.UNAME2 = CODE04.CREATOR.NAME;

  16010  9 000250   040000 100500                    MLR     fill='040'O
         9 000251   000005 000014                    ADSC9   5,,PR0                   cn=0,n=12
         9 000252   003164 000014 7                  ADSC9   JOB_MSG+18               cn=0,n=12

      467    16011    2       B$JIT0_LO$->B$JIT.ACCN = JOB_MSG.ACCT2;

  16011  9 000253   000044 471400 8                  LDP1    B$JIT0_LO$
         9 000254   003162 237000 7                  LDAQ    JOB_MSG+16
         9 000255   100001 755100                    STA     1,,PR1
         9 000256   100002 756100                    STQ     2,,PR1

      468    16012    2       B$JIT0_LO$->B$JIT.UNAME = JOB_MSG.UNAME2;

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:57   
  16012  9 000257   040100 100400                    MLR     fill='040'O
         9 000260   003164 000014 7                  ADSC9   JOB_MSG+18               cn=0,n=12
         9 000261   100003 000014                    ADSC9   3,,PR1                   cn=0,n=12

      469    16013    2       JOB_TBL.SUBMIT_TIME = CODE04.CREATION.TIME;

  16013  9 000262   000360 470400 7                  LDP0    CODE04$
         9 000263   000002 235100                    LDA     2,,PR0
         9 000264   002617 755000 7                  STA     JOB_TBL+8

      470    16014    2       JOB_MSG.JOBID1 = SYSID;

  16014  9 000265   200012 220100                    LDX0    SYSID,,AUTO
         9 000266   003152 740000 7                  STX0    JOB_MSG+8

      471    16015    2       RETURN;

  16015  9 000267   200016 221300                    LDX1  ! T$+2,,AUTO
         9 000270   000001 702211                    TSX2  ! 1,X1

      472    16016        /**/
      473    16017    2   IO_ALT:
      474    16018    2       CALL JPE$REASON (%REJ_IO#);

  16018  9 000271   000001 630400 10    IO_ALT       EPPR0   1
         9 000272   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 000273   000000 701000 xent               TSX1    JPE$REASON
         9 000274   000000 011000                    NOP     0

      475    16019    2       PASS_TWO# = %YES#;   /* So that CLEANUP will work properly */

  16019  9 000275   400000 236003                    LDQ     -131072,DU
         9 000276   000000 756000 xsym               STQ     PASS_TWO#

      476    16020    2       ALTRETURN;

  16020  9 000277   200016 221300                    LDX1  ! T$+2,,AUTO
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:58   
         9 000300   000000 702211                    TSX2  ! 0,X1

      477    16021    2   END GET_SYSID;
      478    16022        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:59   
      479    16023    1   PRESCAN: PROC ALTRET;

  16023  9 000301   200016 741300       PRESCAN      STX1  ! T$+2,,AUTO

      480    16024        /*
      481    16025             ***** PRESCAN the file ...
      482    16026        */
      483    16027        /*
      484    16028             ***** Initialize ...
      485    16029        */
      486    16030    2       CUR_RECNO = 0;

  16030  9 000302   000354 450000 7                  STZ     CUR_RECNO

      487    16031    2       PSN_TBL = PSN_TBL_INIT;

  16031  9 000303   000000 100400                    MLR     fill='000'O
         9 000304   000134 000514 8                  ADSC9   PSN_TBL_INIT             cn=0,n=332
         9 000305   002676 000514 7                  ADSC9   PSN_TBL                  cn=0,n=332

      488    16032    2       PSN_TBL.COUNT = 0;

  16032  9 000306   002676 450000 7                  STZ     PSN_TBL

      489    16033    2       NHPSN# = %NO#;

  16033  9 000307   000000 450000 xsym               STZ     NHPSN#

      490    16034    2       VIRT_TBL = VIRT_TBL_INIT;

  16034  9 000310   000000 100400                    MLR     fill='000'O
         9 000311   000257 000374 8                  ADSC9   VIRT_TBL_INIT            cn=0,n=252
         9 000312   003021 000374 7                  ADSC9   VIRT_TBL                 cn=0,n=252

      491    16035    2       VIRT_TBL.COUNT = 0;

  16035  9 000313   003021 450000 7                  STZ     VIRT_TBL
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:60   

      492    16036    2       SCAN_CMDS# = %NO#;

  16036  9 000314   000000 450000 xsym               STZ     SCAN_CMDS#

      493    16037    2       RES_PEND# = %YES#;            /* !RESOURCE pending        */

  16037  9 000315   400000 236003                    LDQ     -131072,DU
         9 000316   200004 756100                    STQ     RES_PEND#,,AUTO

      494    16038    2       FINRES_PEND# = %YES#;

  16038  9 000317   200005 756100                    STQ     FINRES_PEND#,,AUTO

      495    16039    2       PCB.TEXT$ = PINCRC(TEXT$,1);

  16039  9 000320   000000 236000 xsym               LDQ     TEXT$
         9 000321   200000 036007                    ADLQ    65536,DL
         9 000322   002413 756000 7                  STQ     PCB

      496    16040        /*
      497    16041             ***** Read the first command.
      498    16042                   If it is a !JOB command process it.
      499    16043                   Verify ACCOUNT,NAME,PASSWORD against :USERS ...
      500    16044        */
      501    16045    2       READ_CARD.BUF_ = VECTOR(TEXT$ -> READ$BUF);

  16045  9 000323   000012 235000 10                 LDA     10
         9 000324   000000 236000 xsym               LDQ     TEXT$
         9 000325   000004 757000 xsym               STAQ    READ_CARD+4

      502    16046    2       CALL INSERT (TEXT$ -> READ$BUF,0,%CPBUFFSIZE,' '); /* Blank readbuf */

  16046  9 000326   000000 470400 xsym               LDP0    TEXT$
         9 000327   040100 100400                    MLR     fill='040'O
         9 000330   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         9 000331   000000 000400                    ADSC9   0,,PR0                   cn=0,n=256
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:61   

      503    16047    2       CALL M$READ(READ_CARD) ALTRET(IO_ALT);

  16047  9 000332   000000 630400 xsym               EPPR0   READ_CARD
         9 000333   440000 713400                    CLIMB   alt,read
         9 000334   401400 401760                    pmme    nvectors=4
         9 000335   001074 702000 9                  TSX2    IO_ALT

      504    16048    2       PCB.NCHARS = M$EI$->F$DCB.ARS#;

  16048  9 000336   000000 470400 xsym               LDP0    M$EI$
         9 000337   000000 235100                    LDA     0,,PR0
         9 000340   002424 755000 7                  STA     PCB+9

      505    16049    2       JP_CONTINUE.REC_NUM = 0;

  16049  9 000341   002540 450000 7                  STZ     JP_CONTINUE

      506    16050    2       JP_CONTINUE.CHARPOS(0) = 0;

  16050  9 000342   000000 220003                    LDX0    0,DU
         9 000343   002541 740000 7                  STX0    JP_CONTINUE+1

      507    16051    2       JP_CONTINUE.LEN(0) = PCB.NCHARS;

  16051  9 000344   002424 236000 7                  LDQ     PCB+9
         9 000345   000033 736000                    QLS     27
         9 000346   002572 552040 7                  STBQ    JP_CONTINUE+26,'40'O

      508    16052    2       IF (TEXT$->READ$BUFB & '777737737737'O) ~= '041112117102'O

  16052  9 000347   000000 471400 xsym               LDP1    TEXT$
         9 000350   100000 236100                    LDQ     0,,PR1
         9 000351   000365 376000 8                  ANQ     E_RESIMBED+1
         9 000352   000366 116000 8                  CMPQ    E_RESIMBED+2
         9 000353   000360 601000 9                  TNZ     s:16056
         9 000354   100001 236100                    LDQ     1,,PR1
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:62   
         9 000355   777000 376003                    ANQ     -512,DU
         9 000356   040000 116003                    CMPQ    16384,DU
         9 000357   000371 600000 9                  TZE     s:16061

      509    16053    2         OR SUBSTR(TEXT$->READ$BUF,4,1) ~= ' '
      510    16054    2       THEN
      511    16055    3         DO;   /* Supply a blank !JOB command */

      512    16056    3           PCB.NCHARS = 4;

  16056  9 000360   000004 236007                    LDQ     4,DL
         9 000361   002424 756000 7                  STQ     PCB+9

      513    16057    3           CALL INSERT(TEXT$->READ$BUF,0,4,'!JOB');

  16057  9 000362   000366 236000 8                  LDQ     E_RESIMBED+2
         9 000363   100000 756100                    STQ     0,,PR1

      514    16058    3           CALL M$PFIL(FPT_PFIL) ALTRET(IO_ALT);

  16058  9 000364   000000 630400 8                  EPPR0   FPT_PFIL
         9 000365   440004 713400                    CLIMB   alt,+16388
         9 000366   400000 401760                    pmme    nvectors=1
         9 000367   001074 702000 9                  TSX2    IO_ALT

      515    16059    3         END;

  16059  9 000370   000373 710000 9                  TRA     s:16062

      516    16060    2       ELSE
      517    16061    2         CUR_RECNO = 1;

  16061  9 000371   000001 236007                    LDQ     1,DL
         9 000372   000354 756000 7                  STQ     CUR_RECNO

      518    16062    2       ERR_BLK.FIRST = 0;   /* Throw away all old errors */

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:63   
  16062  9 000373   002432 450000 7                  STZ     ERR_BLK+1

      519    16063    2       PCB.CONTINUE = '1'B;

  16063  9 000374   200000 236007                    LDQ     65536,DL
         9 000375   002420 256000 7                  ORSQ    PCB+5

      520    16064    2       CALL JPJ$JOB ALTRET(IO_ALT);   /* Only altrets on IO errors */

  16064  9 000376   000002 631400 xsym               EPPR1   B_VECTNIL+2
         9 000377   000000 701000 xent               TSX1    JPJ$JOB
         9 000400   001074 702000 9                  TSX2    IO_ALT

      521    16065    2       IF ERR_BLK.FIRST>0

  16065  9 000401   002432 235000 7                  LDA     ERR_BLK+1
         9 000402   000412 600000 9                  TZE     s:16079

      522    16066    2       THEN
      523    16067    3         DO;

      524    16068    3           CALL JPE$REASON(%REJ_JOB#);

  16068  9 000403   000014 630400 10                 EPPR0   12
         9 000404   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 000405   000000 701000 xent               TSX1    JPE$REASON
         9 000406   000000 011000                    NOP     0

      525    16069    3           CALL JPE$ERRORS;

  16069  9 000407   000002 631400 xsym               EPPR1   B_VECTNIL+2
         9 000410   000000 701000 xent               TSX1    JPE$ERRORS
         9 000411   000000 011000                    NOP     0

      526    16070    3         END;

      527    16071        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:64   
      528    16072        /*
      529    16073             ***** Look for the !RESOURCE command.
      530    16074                   If SCAN was specified then the syntax of
      531    16075                   each command will be checked. ANY errors
      532    16076                   will cause the job to be aborted and all
      533    16077                   records and their errors printed ...
      534    16078        */
      535    16079    3       DO WHILE(SCAN_CMDS# OR RES_PEND#);

  16079  9 000412   001056 710000 9                  TRA     s:16189

      536    16080    3         READ_CARD.BUF_ = VECTOR(TEXT$ -> READ$BUF);

  16080  9 000413   000012 235000 10                 LDA     10
         9 000414   000000 236000 xsym               LDQ     TEXT$
         9 000415   000004 757000 xsym               STAQ    READ_CARD+4

      537    16081    3   READ_CMD:
      538    16082    3         CALL INSERT (TEXT$->READ$BUF,0,%CPBUFFSIZE,' '); /* Blank readbuf */

  16082  9 000416   000000 470400 xsym  READ_CMD     LDP0    TEXT$
         9 000417   040100 100400                    MLR     fill='040'O
         9 000420   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         9 000421   000000 000400                    ADSC9   0,,PR0                   cn=0,n=256

      539    16083    3         CALL M$READ (READ_CARD) ALTRET(E_READERR);

  16083  9 000422   000000 630400 xsym               EPPR0   READ_CARD
         9 000423   440000 713400                    CLIMB   alt,read
         9 000424   401400 401760                    pmme    nvectors=4
         9 000425   001064 702000 9                  TSX2    E_READERR

      540    16084    3         CUR_RECNO = CUR_RECNO+1;

  16084  9 000426   000354 054000 7                  AOS     CUR_RECNO

      541    16085        /*
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:65   
      542    16086             ****** If the command does not have a BANG (!) in
      543    16087                   column 1 then ignore it ...
      544    16088        */
      545    16089    3         IF SUBSTR(TEXT$->READ$BUF,0,1) ~= '!'

  16089  9 000427   000000 470400 xsym               LDP0    TEXT$
         9 000430   000000 236100                    LDQ     0,,PR0
         9 000431   777000 376003                    ANQ     -512,DU
         9 000432   041000 116003                    CMPQ    16896,DU
         9 000433   000416 601000 9                  TNZ     READ_CMD

      546    16090    3         THEN
      547    16091    3           GOTO READ_CMD;
      548    16092    3         JP_CONTINUE.REC_NUM = 0;

  16092  9 000434   002540 450000 7                  STZ     JP_CONTINUE

      549    16093    3         PCB.NCHARS = M$EI$->F$DCB.ARS#;

  16093  9 000435   000000 471400 xsym               LDP1    M$EI$
         9 000436   100000 235100                    LDA     0,,PR1
         9 000437   002424 755000 7                  STA     PCB+9

      550    16094    3         JP_CONTINUE.LEN(0) = PCB.NCHARS;

  16094  9 000440   002424 236000 7                  LDQ     PCB+9
         9 000441   000033 736000                    QLS     27
         9 000442   002572 552040 7                  STBQ    JP_CONTINUE+26,'40'O

      551    16095    3         PCB.NCHARS = PCB.NCHARS - 1;

  16095  9 000443   000001 135007                    SBLA    1,DL
         9 000444   002424 755000 7                  STA     PCB+9

      552    16096    3         PCB.TEXT$ = PINCRC(TEXT$,1);

  16096  9 000445   000000 236000 xsym               LDQ     TEXT$
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:66   
         9 000446   200000 036007                    ADLQ    65536,DL
         9 000447   002413 756000 7                  STQ     PCB

      553    16097    3         PCB.ROOT$ = ADDR(IBEX_CMD);

  16097  9 000450   000015 236000 10                 LDQ     13
         9 000451   002414 756000 7                  STQ     PCB+1

      554    16098    3         PCB.U$$ = ENTADDR(CPD$NULL_SFROUTINE);

  16098  9 000452   000000 636000 xent               EAQ     CPD$NULL_SFROUTINE
         9 000453   002417 756000 7                  STQ     PCB+4

      555    16099    3         PCB.CONTINUE = '0'B;

  16099  9 000454   000016 236000 10                 LDQ     14
         9 000455   002420 356000 7                  ANSQ    PCB+5

      556    16100    3         ERR_BLK.FIRST = 0;

  16100  9 000456   002432 450000 7                  STZ     ERR_BLK+1

      557    16101    3         IF SCAN_CMDS# AND NOT RES_PEND#

  16101  9 000457   000000 234000 xsym               SZN     SCAN_CMDS#
         9 000460   000473 605000 9                  TPL     PARSE_CMD
         9 000461   200004 234100                    SZN     RES_PEND#,,AUTO
         9 000462   000473 604000 9                  TMI     PARSE_CMD

      558    16102    3         THEN
      559    16103    4           DO;

      560    16104    4             CALL INDEX (K,'%',PCB.TEXT$->W$BUF) ALTRET(PARSE_CMD);

  16104  9 000463   002413 473400 7                  LDP3    PCB
         9 000464   000000 620005                    EAX0    0,AL
         9 000465   000000 124540                    SCM     mask='000'O
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:67   
         9 000466   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0
         9 000467   000017 000001 10                 ADSC9   15                       cn=0,n=1
         9 000470   200011 000100                    ARG     K,,AUTO
         9 000471   000473 606400 9                  TTN     PARSE_CMD

      561    16105    4           END;

  16105  9 000472   001056 710000 9                  TRA     s:16189

      562    16106    3         ELSE
      563    16107    4           DO;

      564    16108    4   PARSE_CMD:      /* Ok to parse:  No SCAN option, or no percents found */
      565    16109    4             CALL X$PARSE(PCB) ALTRET(E_SYNTAX);

  16109  9 000473   000020 630400 10    PARSE_CMD    EPPR0   16
         9 000474   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 000475   000000 701000 xent               TSX1    X$PARSE
         9 000476   001035 702000 9                  TSX2    E_SYNTAX

      566    16110    4             PCB.U$$ = ENTADDR(CPD$SYNTRY);

  16110  9 000477   000000 636000 xent               EAQ     CPD$SYNTRY
         9 000500   002417 756000 7                  STQ     PCB+4

      567    16111    4             U$PARAM.CNTU$$ = ENTADDR(JPA$CONTINUE);

  16111  9 000501   000000 636000 xent               EAQ     JPA$CONTINUE
         9 000502   002462 756000 7                  STQ     U$PARAM+2

      568    16112    4             PCB.CONTINUE = '1'B;

  16112  9 000503   200000 236007                    LDQ     65536,DL
         9 000504   002420 256000 7                  ORSQ    PCB+5

      569    16113    4             U$PARAM.REMEM_CONTEXT_ERR$ = ADDR(NIL);

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:68   
  16113  9 000505   000001 236000 xsym               LDQ     B_VECTNIL+1
         9 000506   002477 756000 7                  STQ     U$PARAM+15

      570    16114        /*
      571    16115             ***** Process all PRESCAN commands ...
      572    16116        */
      573    16117    5             DO CASE(PCB.OUT$->P$B.CODE);

  16117  9 000507   002416 470400 7                  LDP0    PCB+3
         9 000510   000000 720100                    LXL0    0,,PR0
         9 000511   000125 100003                    CMPX0   85,DU
         9 000512   000514 602010 9                  TNC     s:16117+5,X0
         9 000513   001005 710000 9                  TRA     s:16168
         9 000514   001005 710000 9                  TRA     s:16168
         9 000515   001005 710000 9                  TRA     s:16168
         9 000516   001005 710000 9                  TRA     s:16168
         9 000517   000743 710000 9                  TRA     s:16156
         9 000520   001005 710000 9                  TRA     s:16168
         9 000521   001005 710000 9                  TRA     s:16168
         9 000522   001005 710000 9                  TRA     s:16168
         9 000523   001005 710000 9                  TRA     s:16168
         9 000524   001005 710000 9                  TRA     s:16168
         9 000525   001005 710000 9                  TRA     s:16168
         9 000526   001005 710000 9                  TRA     s:16168
         9 000527   001034 710000 9                  TRA     s:16181
         9 000530   001005 710000 9                  TRA     s:16168
         9 000531   001005 710000 9                  TRA     s:16168
         9 000532   001005 710000 9                  TRA     s:16168
         9 000533   001005 710000 9                  TRA     s:16168
         9 000534   001005 710000 9                  TRA     s:16168
         9 000535   001005 710000 9                  TRA     s:16168
         9 000536   001005 710000 9                  TRA     s:16168
         9 000537   001005 710000 9                  TRA     s:16168
         9 000540   001005 710000 9                  TRA     s:16168
         9 000541   001005 710000 9                  TRA     s:16168
         9 000542   001005 710000 9                  TRA     s:16168
         9 000543   000743 710000 9                  TRA     s:16156
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:69   
         9 000544   001005 710000 9                  TRA     s:16168
         9 000545   001005 710000 9                  TRA     s:16168
         9 000546   001005 710000 9                  TRA     s:16168
         9 000547   001005 710000 9                  TRA     s:16168
         9 000550   001005 710000 9                  TRA     s:16168
         9 000551   001005 710000 9                  TRA     s:16168
         9 000552   001005 710000 9                  TRA     s:16168
         9 000553   000732 710000 9                  TRA     s:16143
         9 000554   001005 710000 9                  TRA     s:16168
         9 000555   000743 710000 9                  TRA     s:16156
         9 000556   001005 710000 9                  TRA     s:16168
         9 000557   001005 710000 9                  TRA     s:16168
         9 000560   001005 710000 9                  TRA     s:16168
         9 000561   001005 710000 9                  TRA     s:16168
         9 000562   001005 710000 9                  TRA     s:16168
         9 000563   001005 710000 9                  TRA     s:16168
         9 000564   001005 710000 9                  TRA     s:16168
         9 000565   001005 710000 9                  TRA     s:16168
         9 000566   001005 710000 9                  TRA     s:16168
         9 000567   001005 710000 9                  TRA     s:16168
         9 000570   001005 710000 9                  TRA     s:16168
         9 000571   001005 710000 9                  TRA     s:16168
         9 000572   001005 710000 9                  TRA     s:16168
         9 000573   001005 710000 9                  TRA     s:16168
         9 000574   000743 710000 9                  TRA     s:16156
         9 000575   001005 710000 9                  TRA     s:16168
         9 000576   001005 710000 9                  TRA     s:16168
         9 000577   001005 710000 9                  TRA     s:16168
         9 000600   001005 710000 9                  TRA     s:16168
         9 000601   001005 710000 9                  TRA     s:16168
         9 000602   001005 710000 9                  TRA     s:16168
         9 000603   001005 710000 9                  TRA     s:16168
         9 000604   001005 710000 9                  TRA     s:16168
         9 000605   001005 710000 9                  TRA     s:16168
         9 000606   000743 710000 9                  TRA     s:16156
         9 000607   000641 710000 9                  TRA     s:16119
         9 000610   001005 710000 9                  TRA     s:16168
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:70   
         9 000611   001005 710000 9                  TRA     s:16168
         9 000612   001005 710000 9                  TRA     s:16168
         9 000613   000743 710000 9                  TRA     s:16156
         9 000614   001005 710000 9                  TRA     s:16168
         9 000615   001005 710000 9                  TRA     s:16168
         9 000616   001005 710000 9                  TRA     s:16168
         9 000617   001005 710000 9                  TRA     s:16168
         9 000620   001005 710000 9                  TRA     s:16168
         9 000621   000743 710000 9                  TRA     s:16156
         9 000622   001005 710000 9                  TRA     s:16168
         9 000623   001005 710000 9                  TRA     s:16168
         9 000624   001005 710000 9                  TRA     s:16168
         9 000625   001005 710000 9                  TRA     s:16168
         9 000626   001005 710000 9                  TRA     s:16168
         9 000627   001005 710000 9                  TRA     s:16168
         9 000630   001005 710000 9                  TRA     s:16168
         9 000631   001005 710000 9                  TRA     s:16168
         9 000632   001005 710000 9                  TRA     s:16168
         9 000633   001005 710000 9                  TRA     s:16168
         9 000634   001005 710000 9                  TRA     s:16168
         9 000635   001005 710000 9                  TRA     s:16168
         9 000636   001005 710000 9                  TRA     s:16168
         9 000637   000743 710000 9                  TRA     s:16156
         9 000640   000743 710000 9                  TRA     s:16156

      574    16118    5               CASE(RESOURCECMND);

      575    16119    5                 CALL CPD$SET_NODES(PCB,PCB.ROOT$,U$PARAM.SPCL$$,CALL_FLAG#);

  16119  9 000641   200003 631500                    EPPR1   CALL_FLAG#,,AUTO
         9 000642   200025 451500                    STP1    T$+9,,AUTO
         9 000643   000021 236000 10                 LDQ     17
         9 000644   200024 756100                    STQ     T$+8,,AUTO
         9 000645   000022 237000 10                 LDAQ    18
         9 000646   200022 757100                    STAQ    T$+6,,AUTO
         9 000647   200022 630500                    EPPR0   T$+6,,AUTO
         9 000650   000022 631400 xsym               EPPR1   B_VECTNIL+18
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:71   
         9 000651   000000 701000 xent               TSX1    CPD$SET_NODES
         9 000652   000000 011000                    NOP     0

      576    16120    5                 CALL X$PARSE(PCB) ALTRET(E_SYNTAX);

  16120  9 000653   000020 630400 10                 EPPR0   16
         9 000654   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 000655   000000 701000 xent               TSX1    X$PARSE
         9 000656   001035 702000 9                  TSX2    E_SYNTAX

      577    16121    5                 IF RES_PEND#

  16121  9 000657   200004 234100                    SZN     RES_PEND#,,AUTO
         9 000660   000720 605000 9                  TPL     s:16138

      578    16122    5                 THEN
      579    16123    6                   DO;

      580    16124    6                     RES_PEND# = %NO#;

  16124  9 000661   200004 450100                    STZ     RES_PEND#,,AUTO

      581    16125    6                     IF ERR_BLK.FIRST>0

  16125  9 000662   002432 235000 7                  LDA     ERR_BLK+1
         9 000663   000671 600000 9                  TZE     s:16131

      582    16126    6                     THEN   /* Report the errors */
      583    16127    7                       DO;

      584    16128    7                         CALL JPE$REASON(%REJ_RES#);

  16128  9 000664   000025 630400 10                 EPPR0   21
         9 000665   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 000666   000000 701000 xent               TSX1    JPE$REASON
         9 000667   000000 011000                    NOP     0

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:72   
      585    16129    7                       END;

  16129  9 000670   000705 710000 9                  TRA     s:16133

      586    16130    6                     ELSE   /* Process the !RESOURCE cmd */
      587    16131    6                       CALL CPO$RESOURCE (PCB,JOB_TBL,PSN_TBL,VIRT_TBL,

  16131  9 000671   200006 630500                    EPPR0   RELEASE_ALL#,,AUTO
         9 000672   200030 450500                    STP0    T$+12,,AUTO
         9 000673   000026 237000 10                 LDAQ    22
         9 000674   200026 757100                    STAQ    T$+10,,AUTO
         9 000675   000030 237000 10                 LDAQ    24
         9 000676   200024 757100                    STAQ    T$+8,,AUTO
         9 000677   000032 237000 10                 LDAQ    26
         9 000700   200022 757100                    STAQ    T$+6,,AUTO
         9 000701   200022 630500                    EPPR0   T$+6,,AUTO
         9 000702   000025 631400 xsym               EPPR1   B_VECTNIL+21
         9 000703   000000 701000 xent               TSX1    CPO$RESOURCE
         9 000704   001053 702000 9                  TSX2    E_CONTEXT

      588    16132    6                         ERR_BLK,NHPSN#,RELEASE_ALL#) ALTRET(E_CONTEXT);
      589    16133    6                     CALL JPR$FINRES (JOB_TBL,VIRT_TBL,PSN_TBL,PHYS_LIST);

  16133  9 000705   000000 236000 xsym               LDQ     PHYS_LIST$
         9 000706   000030 235000 10                 LDA     24
         9 000707   200024 757100                    STAQ    T$+8,,AUTO
         9 000710   000034 237000 10                 LDAQ    28
         9 000711   200022 757100                    STAQ    T$+6,,AUTO
         9 000712   200022 630500                    EPPR0   T$+6,,AUTO
         9 000713   000022 631400 xsym               EPPR1   B_VECTNIL+18
         9 000714   000000 701000 xent               TSX1    JPR$FINRES
         9 000715   000000 011000                    NOP     0

      590    16134    6                     FINRES_PEND# = %NO#;

  16134  9 000716   200005 450100                    STZ     FINRES_PEND#,,AUTO

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:73   
      591    16135    6                   END;

  16135  9 000717   001034 710000 9                  TRA     s:16181

      592    16136    5                 ELSE
      593    16137    6                   DO; /* Misplaced !RES command */

      594    16138    6                     CALL JPE$REASON (%REJ_RESIMBED#);

  16138  9 000720   000037 630400 10                 EPPR0   31
         9 000721   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 000722   000000 701000 xent               TSX1    JPE$REASON
         9 000723   000000 011000                    NOP     0

      595    16139    6                     ERR_BLK.FIRST = 0; /* ignore any context errors */

  16139  9 000724   002432 450000 7                  STZ     ERR_BLK+1

      596    16140    6                     CALL JPE$ERRORS (E_RESIMBED);

  16140  9 000725   000040 630400 10                 EPPR0   32
         9 000726   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 000727   000000 701000 xent               TSX1    JPE$ERRORS
         9 000730   000000 011000                    NOP     0

      597    16141    6                   END;

  16141  9 000731   001034 710000 9                  TRA     s:16181

      598    16142    5               CASE(JOBCMND);

      599    16143    5                 CALL JPE$REASON(%REJ_JOBIMBED#);

  16143  9 000732   000042 630400 10                 EPPR0   34
         9 000733   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 000734   000000 701000 xent               TSX1    JPE$REASON
         9 000735   000000 011000                    NOP     0
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:74   

      600    16144    5                 CALL JPE$ERRORS(E_JOBIMBED);

  16144  9 000736   000043 630400 10                 EPPR0   35
         9 000737   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 000740   000000 701000 xent               TSX1    JPE$ERRORS
         9 000741   000000 011000                    NOP     0
         9 000742   001034 710000 9                  TRA     s:16181

      601    16145    5               CASE(COMMENTCMND);

      602    16146                          /* Does not reset RES_PEND#  */
      603    16147    5               CASE (SETCMND,

      604    16148    5                   RESETCMND,
      605    16149    5                   ADJUSTCMND,
      606    16150    5                   LDEVCMND,
      607    16151    5                   ERASECMND,
      608    16152    5                   HOLDCMND,
      609    16153    5                   PRINTCMND,
      610    16154    5                   TERMINALCMND,
      611    16155    5                   UNHOLDCMND);
      612    16156    5                 RES_PEND# = '0'B;

  16156  9 000743   200004 450100                    STZ     RES_PEND#,,AUTO

      613    16157    5                 IF SCAN_CMDS#

  16157  9 000744   000000 234000 xsym               SZN     SCAN_CMDS#
         9 000745   001034 605000 9                  TPL     s:16181

      614    16158    5                 THEN
      615    16159    6                   DO;

      616    16160    6                     CALL CPD$SET_NODES(PCB,PCB.ROOT$,U$PARAM.SPCL$$,CALL_FLAG#);

  16160  9 000746   200003 631500                    EPPR1   CALL_FLAG#,,AUTO
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:75   
         9 000747   200025 451500                    STP1    T$+9,,AUTO
         9 000750   000021 236000 10                 LDQ     17
         9 000751   200024 756100                    STQ     T$+8,,AUTO
         9 000752   000022 237000 10                 LDAQ    18
         9 000753   200022 757100                    STAQ    T$+6,,AUTO
         9 000754   200022 630500                    EPPR0   T$+6,,AUTO
         9 000755   000022 631400 xsym               EPPR1   B_VECTNIL+18
         9 000756   000000 701000 xent               TSX1    CPD$SET_NODES
         9 000757   000000 011000                    NOP     0

      617    16161    6                     CALL X$PARSE(PCB) ALTRET(E_SYNTAX);

  16161  9 000760   000020 630400 10                 EPPR0   16
         9 000761   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 000762   000000 701000 xent               TSX1    X$PARSE
         9 000763   001035 702000 9                  TSX2    E_SYNTAX

      618    16162    6                     CALL CXX$VERIFY(PCB.OUT$->P$B, ADDR(ERR_BLK));

  16162  9 000764   000026 236000 10                 LDQ     22
         9 000765   200022 756100                    STQ     T$+6,,AUTO
         9 000766   200022 630500                    EPPR0   T$+6,,AUTO
         9 000767   200025 450500                    STP0    T$+9,,AUTO
         9 000770   002416 236000 7                  LDQ     PCB+3
         9 000771   200024 756100                    STQ     T$+8,,AUTO
         9 000772   200024 630500                    EPPR0   T$+8,,AUTO
         9 000773   000020 631400 xsym               EPPR1   B_VECTNIL+16
         9 000774   000000 701000 xent               TSX1    CXX$VERIFY
         9 000775   000000 011000                    NOP     0

      619    16163    6                     IF ERR_BLK.FIRST ~= 0

  16163  9 000776   002432 235000 7                  LDA     ERR_BLK+1
         9 000777   001034 600000 9                  TZE     s:16181

      620    16164    6                     THEN
      621    16165    6                       CALL JPE$REASON (%REJ_SYNTAX#);
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:76   

  16165  9 001000   000045 630400 10                 EPPR0   37
         9 001001   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 001002   000000 701000 xent               TSX1    JPE$REASON
         9 001003   000000 011000                    NOP     0

      622    16166    6                   END;

  16166  9 001004   001034 710000 9                  TRA     s:16181

      623    16167    5               CASE (ELSE);

      624    16168    5                 RES_PEND# = %NO#; /* No longer following !JOB, !RES not allowed */

  16168  9 001005   200004 450100                    STZ     RES_PEND#,,AUTO

      625    16169    5                 IF SCAN_CMDS#

  16169  9 001006   000000 234000 xsym               SZN     SCAN_CMDS#
         9 001007   001034 605000 9                  TPL     s:16181

      626    16170    5                 THEN
      627    16171    6                   DO;

      628    16172    6                     CALL CPD$SET_NODES(PCB,PCB.ROOT$,U$PARAM.SPCL$$,CALL_FLAG#);

  16172  9 001010   200003 631500                    EPPR1   CALL_FLAG#,,AUTO
         9 001011   200025 451500                    STP1    T$+9,,AUTO
         9 001012   000021 236000 10                 LDQ     17
         9 001013   200024 756100                    STQ     T$+8,,AUTO
         9 001014   000022 237000 10                 LDAQ    18
         9 001015   200022 757100                    STAQ    T$+6,,AUTO
         9 001016   200022 630500                    EPPR0   T$+6,,AUTO
         9 001017   000022 631400 xsym               EPPR1   B_VECTNIL+18
         9 001020   000000 701000 xent               TSX1    CPD$SET_NODES
         9 001021   000000 011000                    NOP     0

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:77   
      629    16173    6                     CALL X$PARSE(PCB) ALTRET(E_SYNTAX);

  16173  9 001022   000020 630400 10                 EPPR0   16
         9 001023   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 001024   000000 701000 xent               TSX1    X$PARSE
         9 001025   001035 702000 9                  TSX2    E_SYNTAX

      630    16174    6                     IF ERR_BLK.FIRST ~= 0

  16174  9 001026   002432 235000 7                  LDA     ERR_BLK+1
         9 001027   001034 600000 9                  TZE     s:16181

      631    16175    6                     THEN
      632    16176    7                       DO;   /* Print errors */

      633    16177    7                         CALL JPE$REASON (%REJ_SYNTAX#);

  16177  9 001030   000045 630400 10                 EPPR0   37
         9 001031   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 001032   000000 701000 xent               TSX1    JPE$REASON
         9 001033   000000 011000                    NOP     0

      634    16178    7                       END;

      635    16179    6                   END;

      636    16180    5             END;   /* Do case ... end */

      637    16181    5             DO NEVER;

  16181  9 001034   001053 710000 9                  TRA     E_CONTEXT

      638    16182    5   E_SYNTAX:
      639    16183    5               CALL JPE$REASON(%REJ_SYNTAX#);

  16183  9 001035   000045 630400 10    E_SYNTAX     EPPR0   37
         9 001036   000017 631400 xsym               EPPR1   B_VECTNIL+15
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:78   
         9 001037   000000 701000 xent               TSX1    JPE$REASON
         9 001040   000000 011000                    NOP     0

      640    16184    5               CALL CXP$POSTERR(ADDR(ERR_BLK),PCB.HI_CHAR,PCB.ERROR);

  16184  9 001041   000026 236000 10                 LDQ     22
         9 001042   200022 756100                    STQ     T$+6,,AUTO
         9 001043   000046 237000 10                 LDAQ    38
         9 001044   200024 757100                    STAQ    T$+8,,AUTO
         9 001045   200022 630500                    EPPR0   T$+6,,AUTO
         9 001046   200023 450500                    STP0    T$+7,,AUTO
         9 001047   200023 630500                    EPPR0   T$+7,,AUTO
         9 001050   000021 631400 xsym               EPPR1   B_VECTNIL+17
         9 001051   000000 701000 xent               TSX1    CXP$POSTERR
         9 001052   000000 011000                    NOP     0

      641    16185    5             END; /* Do never ... end */

      642    16186    4   E_CONTEXT: /* If pass2, echo and report - otherwise, start pass2 if errors */
      643    16187    4             CALL JPE$ERRORS;

  16187  9 001053   000002 631400 xsym  E_CONTEXT    EPPR1   B_VECTNIL+2
         9 001054   000000 701000 xent               TSX1    JPE$ERRORS
         9 001055   000000 011000                    NOP     0

      644    16188    4           END; /* Do ... if not SCAN_CMDS# ... end */

      645    16189    3       END; /* Do while ... process commands ... end */

  16189  9 001056   000000 234000 xsym               SZN     SCAN_CMDS#
         9 001057   000413 604000 9                  TMI     s:16080
         9 001060   200004 234100                    SZN     RES_PEND#,,AUTO
         9 001061   000413 604000 9                  TMI     s:16080

      646    16190    2       RETURN;

  16190  9 001062   200016 221300                    LDX1  ! T$+2,,AUTO
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:79   
         9 001063   000001 702211                    TSX2  ! 1,X1

      647    16191        /**/
      648    16192    2   E_READERR:
      649    16193    2       IF B$TCB.ALT$->B$ALT.ERR.CODE=%E$EOF

  16193  9 001064   000000 470400 xsym  E_READERR    LDP0    B$TCB$
         9 001065   000000 471500                    LDP1    0,,PR0
         9 001066   100102 236100                    LDQ     66,,PR1
         9 001067   377770 376007                    ANQ     131064,DL
         9 001070   000060 116007                    CMPQ    48,DL
         9 001071   001074 601000 9                  TNZ     IO_ALT

      650    16194    2       THEN
      651    16195    2         RETURN;

  16195  9 001072   200016 221300                    LDX1  ! T$+2,,AUTO
         9 001073   000001 702211                    TSX2  ! 1,X1

      652    16196    2       ELSE
      653    16197    2   IO_ALT: CALL JPE$REASON(%REJ_IO#);

  16197  9 001074   000001 630400 10    IO_ALT       EPPR0   1
         9 001075   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 001076   000000 701000 xent               TSX1    JPE$REASON
         9 001077   000000 011000                    NOP     0

      654    16198    2       PASS_TWO# = %YES#;   /* So CLEANUP works properly */

  16198  9 001100   400000 236003                    LDQ     -131072,DU
         9 001101   000000 756000 xsym               STQ     PASS_TWO#

      655    16199    2       ALTRETURN;

  16199  9 001102   200016 221300                    LDX1  ! T$+2,,AUTO
         9 001103   000000 702211                    TSX2  ! 0,X1

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:80   
      656    16200    2   END PRESCAN;
      657    16201        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:81   
      658    16202    1   CLEANUP: PROC ALTRET;

  16202  9 001104   200016 741300       CLEANUP      STX1  ! T$+2,,AUTO

      659    16203        /*
      660    16204             ***** If there have been no errors, the file is passed to MBS,
      661    16205                   and we RETURN.
      662    16206                   If there were errors, the print file will printed on
      663    16207                   the line printer at the work station of origin (WOO),
      664    16208                   and the jcl file deleted from :SYMI.  We ALTRETURN.
      665    16209        */
      666    16210    2       IF PASS_TWO#

  16210  9 001105   000000 234000 xsym               SZN     PASS_TWO#
         9 001106   001143 605000 9                  TPL     s:16235

      667    16211    2       THEN
      668    16212    3         DO;

      669    16213        /*
      670    16214             ***** Remove this job from the SCANNED list ...
      671    16215        */
      672    16216    3           CALL REMOVE_SYSID;

  16216  9 001107   001443 701000 9                  TSX1    REMOVE_SYSID
         9 001110   000000 011000                    NOP     0

      673    16217    3           CLOSE_JOB.V.DISP# = %SCRATCH#;

  16217  9 001111   000001 236007                    LDQ     1,DL
         9 001112   000032 552004 7                  STBQ    CLOSE_JOB+26,'04'O

      674    16218    3           CLOSE_LO.V.DISP# = %SAVE#;

  16218  9 001113   000002 236007                    LDQ     2,DL
         9 001114   000070 552004 7                  STBQ    CLOSE_LO+26,'04'O

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:82   
      675    16219    3           XSJ_JOBINFO.STATUS# = JOB_TBL.STATUS;

  16219  9 001115   002623 236000 7                  LDQ     JOB_TBL+12
         9 001116   000344 552004 7                  STBQ    XSJ_JOBINFO,'04'O

      676    16220    3           XSJ_JOBINFO.ACCT# = JOB_TBL.ACCT;

  16220  9 001117   040000 100400                    MLR     fill='040'O
         9 001120   002625 000010 7                  ADSC9   JOB_TBL+14               cn=0,n=8
         9 001121   000347 000010 7                  ADSC9   XSJ_JOBINFO+3            cn=0,n=8

      677    16221    3           XSJ_JOBINFO.RECNO# = BAD_RECNO; /* Record number which corresponds */

  16221  9 001122   000356 235000 7                  LDA     BAD_RECNO
         9 001123   000345 755000 7                  STA     XSJ_JOBINFO+1

      678    16222                            /* to erroring record ... error in status. -1 if none     */
      679    16223    3           CALL M$TIME(OFF_TIME) ALTRET(E_TIME);

  16223  9 001124   000030 630400 8                  EPPR0   OFF_TIME
         9 001125   420004 713400                    CLIMB   alt,+8196
         9 001126   402000 401760                    pmme    nvectors=5
         9 001127   001131 702000 9                  TSX2    E_TIME

      680    16224    4           DO WHILE (%NO#);

  16224  9 001130   001132 710000 9                  TRA     s:16227

      681    16225    4   E_TIME:   XSJ_JOBINFO.OFF_TIME# = 0;

  16225  9 001131   000346 450000 7     E_TIME       STZ     XSJ_JOBINFO+2

      682    16226    4           END;

      683    16227    3           CALL XSJ$WRITE(WRITE_JOBSTATS) ALTRET(XSJ_ALT1);

  16227  9 001132   000050 630400 10                 EPPR0   40
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:83   
         9 001133   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 001134   000000 701000 xent               TSX1    XSJ$WRITE
         9 001135   001137 702000 9                  TSX2    XSJ_ALT1

      684    16228    4           DO NEVER;

  16228  9 001136   001205 710000 9                  TRA     s:16250

      685    16229    4   XSJ_ALT1:
      686    16230    4             CALL JPT$REPORT;

  16230  9 001137   000002 631400 xsym  XSJ_ALT1     EPPR1   B_VECTNIL+2
         9 001140   000000 701000 xent               TSX1    JPT$REPORT
         9 001141   000000 011000                    NOP     0

      687    16231    4           END;

      688    16232    3         END;

  16232  9 001142   001205 710000 9                  TRA     s:16250

      689    16233    2       ELSE
      690    16234    3         DO;

      691    16235    3           IF FINRES_PEND#

  16235  9 001143   200005 234100                    SZN     FINRES_PEND#,,AUTO
         9 001144   001156 605000 9                  TPL     s:16238

      692    16236    3           THEN   /* RESOURCE tables not built yet */
      693    16237    3             CALL JPR$FINRES (JOB_TBL,VIRT_TBL,PSN_TBL,PHYS_LIST);

  16237  9 001145   000000 236000 xsym               LDQ     PHYS_LIST$
         9 001146   000030 235000 10                 LDA     24
         9 001147   200024 757100                    STAQ    T$+8,,AUTO
         9 001150   000034 237000 10                 LDAQ    28
         9 001151   200022 757100                    STAQ    T$+6,,AUTO
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:84   
         9 001152   200022 630500                    EPPR0   T$+6,,AUTO
         9 001153   000022 631400 xsym               EPPR1   B_VECTNIL+18
         9 001154   000000 701000 xent               TSX1    JPR$FINRES
         9 001155   000000 011000                    NOP     0

      694    16238    3           CLOSE_JOB.V.DISP# = %SAVE#;

  16238  9 001156   000002 236007                    LDQ     2,DL
         9 001157   000032 552004 7                  STBQ    CLOSE_JOB+26,'04'O

      695    16239    3           CALL INSERT(JOBNAME.NAME#,6,1,'S'); /* Flag the job as schedulable */

  16239  9 001160   000123 236007                    LDQ     83,DL
         9 001161   000167 552004 7                  STBQ    JOBNAME+1,'04'O

      696    16240    3           MBS_MSG.CODE = JMEV_NEWF#;

  16240  9 001162   000001 220003                    LDX0    1,DU
         9 001163   003120 740000 7                  STX0    MBS_MSG

      697    16241    3           CLOSE_LO.V.DISP# = %SCRATCH#;

  16241  9 001164   000001 236007                    LDQ     1,DL
         9 001165   000070 552004 7                  STBQ    CLOSE_LO+26,'04'O

      698    16242    3           JOB_TBL.MAXPSN = PSN_TBL.COUNT;

  16242  9 001166   002676 236000 7                  LDQ     PSN_TBL
         9 001167   000033 736000                    QLS     27
         9 001170   002624 552040 7                  STBQ    JOB_TBL+13,'40'O

      699    16243    3           PSN_TBL.COUNT = PSN_TBL.COUNT*2;

  16243  9 001171   002676 235000 7                  LDA     PSN_TBL
         9 001172   000001 735000                    ALS     1
         9 001173   002676 755000 7                  STA     PSN_TBL

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:85   
      700    16244    3           JOB_TBL.MAXVR = VIRT_TBL.COUNT;

  16244  9 001174   003021 236000 7                  LDQ     VIRT_TBL
         9 001175   000022 736000                    QLS     18
         9 001176   002624 552020 7                  STBQ    JOB_TBL+13,'20'O

      701    16245    3           VIRT_TBL.COUNT = VIRT_TBL.COUNT*2;

  16245  9 001177   003021 236000 7                  LDQ     VIRT_TBL
         9 001200   000001 736000                    QLS     1
         9 001201   003021 756000 7                  STQ     VIRT_TBL

      702    16246    4           DO INHIBIT;

      703    16247    4             JP_Q.SCAN$ -> JP$JOB.SCANNING = %NO#;

  16247  9 001202   000005 470600 xsym               LDP0  ! JP_Q+5
         9 001203   000031 236200 xsym               LDQ   ! B_VECTNIL+25
         9 001204   000001 356300                    ANSQ  ! 1,,PR0

      704    16248    4           END;   /* Do inhibit ... end */

      705    16249    3         END;

      706    16250    2       JOB_MSG.ACCT1 = JOB_TBL.ACCT;

  16250  9 001205   040000 100400                    MLR     fill='040'O
         9 001206   002625 000010 7                  ADSC9   JOB_TBL+14               cn=0,n=8
         9 001207   003152 400010 7                  ADSC9   JOB_MSG+8                cn=2,n=8

      707    16251    2       JOB_MSG.UNAME1 = JOB_TBL.UNAME;

  16251  9 001210   040000 100400                    MLR     fill='040'O
         9 001211   002627 000014 7                  ADSC9   JOB_TBL+16               cn=0,n=12
         9 001212   003154 400014 7                  ADSC9   JOB_MSG+10               cn=2,n=12

      708    16252    2       JOB_MSG.WSN1 = JOB_TBL.WSN;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:86   

  16252  9 001213   040000 100400                    MLR     fill='040'O
         9 001214   002634 000010 7                  ADSC9   JOB_TBL+21               cn=0,n=8
         9 001215   003157 400010 7                  ADSC9   JOB_MSG+13               cn=2,n=8

      709    16253    2       IF JOB_MSG.ACCT1=JOB_MSG.ACCT2

  16253  9 001216   040000 106400                    CMPC    fill='040'O
         9 001217   003152 400010 7                  ADSC9   JOB_MSG+8                cn=2,n=8
         9 001220   003162 000010 7                  ADSC9   JOB_MSG+16               cn=0,n=8
         9 001221   001225 601000 9                  TNZ     s:16257

      710    16254    2       THEN
      711    16255    2         JOB_MSG.ACCT2 = ' ';

  16255  9 001222   000035 235000 xsym               LDA     B_VECTNIL+29
         9 001223   000035 236000 xsym               LDQ     B_VECTNIL+29
         9 001224   003162 757000 7                  STAQ    JOB_MSG+16

      712    16256
      713    16257    2       JOB_MSG.JOBNAME = ' ';

  16257  9 001225   040000 100400                    MLR     fill='040'O
         9 001226   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         9 001227   003173 600037 7                  ADSC9   JOB_MSG+25               cn=3,n=31

      714    16258    2       IF JOB_TBL.JNL ~= 0

  16258  9 001230   002666 236000 7                  LDQ     JOB_TBL+47
         9 001231   777000 316003                    CANQ    -512,DU
         9 001232   001241 600000 9                  TZE     s:16265

      715    16259    3       THEN DO;

      716    16260    3           JOB_MSG.JOBNAME = ADDR(JOB_TBL.JNAME) -> JNAMEB;

  16260  9 001233   002666 236000 7                  LDQ     JOB_TBL+47
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:87   
         9 001234   000033 772000                    QRL     27
         9 001235   000000 620006                    EAX0    0,QL
         9 001236   040000 100440                    MLR     fill='040'O
         9 001237   002666 200010 7                  ADSC9   JOB_TBL+47               cn=1,n=*X0
         9 001240   003173 600037 7                  ADSC9   JOB_MSG+25               cn=3,n=31

      717    16261    3         END;

      718    16262        /*
      719    16263             ***** Write he status of this job to the console ...
      720    16264        */
      721    16265    2       JOB_MSG.REASON = JOB_TBL.STATUS;

  16265  9 001241   002623 236000 7                  LDQ     JOB_TBL+12
         9 001242   000033 736000                    QLS     27
         9 001243   003171 552040 7                  STBQ    JOB_MSG+23,'40'O

      722    16266    2       OC_MSG.BUF_ = VECTOR(JOB_MSG);

  16266  9 001244   000052 237000 10                 LDAQ    42
         9 001245   003132 757000 7                  STAQ    OC_MSG+4

      723    16267    2       JOB_MSG.CADDR = M_ADMIN;

  16267  9 001246   040000 220003                    LDX0    16384,DU
         9 001247   003142 740000 7                  STX0    JOB_MSG

      724    16268    2       JOB_MSG.WSN = LO_WSN;

  16268  9 001250   040000 100400                    MLR     fill='040'O
         9 001251   000361 000010 7                  ADSC9   LO_WSN                   cn=0,n=8
         9 001252   003145 000010 7                  ADSC9   JOB_MSG+3                cn=0,n=8

      725    16269    2       CALL M$WRITE(OC_MSG) ALTRET(E_OC1);

  16269  9 001253   003126 630400 7                  EPPR0   OC_MSG
         9 001254   440001 713400                    CLIMB   alt,write
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:88   
         9 001255   401400 401760                    pmme    nvectors=4
         9 001256   001257 702000 9                  TSX2    E_OC1

  16268  9 001257                       E_OC1        null
      726    16270    2   E_OC1: ;
      727    16271        /*
      728    16272             ***** If the SOURCE WSN is not also the DESTINATION WSN,
      729    16273                   then write the message to both consoles ...
      730    16274        */
      731    16275    2       IF LO_WSN ~= JOB_MSG.WSN2

  16275  9 001257   040000 106400                    CMPC    fill='040'O
         9 001260   000361 000010 7                  ADSC9   LO_WSN                   cn=0,n=8
         9 001261   003167 000010 7                  ADSC9   JOB_MSG+21               cn=0,n=8
         9 001262   001274 600000 9                  TZE     E_OC2

      732    16276    2       THEN
      733    16277    3         DO;

      734    16278    3           JOB_MSG.CADDR = M_ADMIN | M_NONSYS;

  16278  9 001263   040040 220003                    LDX0    16416,DU
         9 001264   003142 740000 7                  STX0    JOB_MSG

      735    16279    3           JOB_MSG.WSN = JOB_MSG.WSN2;

  16279  9 001265   040000 100400                    MLR     fill='040'O
         9 001266   003167 000010 7                  ADSC9   JOB_MSG+21               cn=0,n=8
         9 001267   003145 000010 7                  ADSC9   JOB_MSG+3                cn=0,n=8

      736    16280    3           CALL M$WRITE(OC_MSG) ALTRET(E_OC2);

  16280  9 001270   003126 630400 7                  EPPR0   OC_MSG
         9 001271   440001 713400                    CLIMB   alt,write
         9 001272   401400 401760                    pmme    nvectors=4
         9 001273   001274 702000 9                  TSX2    E_OC2

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:89   
  16279  9 001274                       E_OC2        null
      737    16281    3   E_OC2:  ;  /* Ignore this altret */
      738    16282    3         END;

      739    16283        /*
      740    16284             ***** If M$LO is open,
      741    16285                   then close it ...
      742    16286        */
      743    16287    2       IF M$LO$->F$DCB.FCD#

  16287  9 001274   000000 470400 xsym               LDP0    M$LO$
         9 001275   000031 236100                    LDQ     25,,PR0
         9 001276   020000 316007                    CANQ    8192,DL
         9 001277   001304 600000 9                  TZE     s:16290

      744    16288    2       THEN
      745    16289    2         CALL M$CLOSE(CLOSE_LO) ALTRET(E_CLOSELO);

  16289  9 001300   000036 630400 7                  EPPR0   CLOSE_LO
         9 001301   450001 713400                    CLIMB   alt,close
         9 001302   406000 401760                    pmme    nvectors=13
         9 001303   001305 702000 9                  TSX2    E_CLOSELO

      746    16290    3       DO NEVER;

  16290  9 001304   001310 710000 9                  TRA     s:16298

      747    16291    3   E_CLOSELO:
      748    16292    3         CALL JPT$REPORT;

  16292  9 001305   000002 631400 xsym  E_CLOSELO    EPPR1   B_VECTNIL+2
         9 001306   000000 701000 xent               TSX1    JPT$REPORT
         9 001307   000000 011000                    NOP     0

      749    16293                      /* Should PRESCAN do anything else here??? */
      750    16294    3       END;

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:90   
      751    16295        /*
      752    16296             ***** Close the JOB file ...
      753    16297        */
      754    16298    2       IF M$EI$->F$DCB.FCD#

  16298  9 001310   000000 470400 xsym               LDP0    M$EI$
         9 001311   000031 236100                    LDQ     25,,PR0
         9 001312   020000 316007                    CANQ    8192,DL
         9 001313   001320 600000 9                  TZE     s:16301

      755    16299    2       THEN
      756    16300    2         CALL M$CLOSE(CLOSE_JOB) ALTRET(E_CLOSEJOB);

  16300  9 001314   000000 630400 7                  EPPR0   CLOSE_JOB
         9 001315   450001 713400                    CLIMB   alt,close
         9 001316   406000 401760                    pmme    nvectors=13
         9 001317   001321 702000 9                  TSX2    E_CLOSEJOB

      757    16301    3       DO NEVER;

  16301  9 001320   001330 710000 9                  TRA     s:16311

      758    16302    3   E_CLOSEJOB:
      759    16303    3         CALL JPT$REPORT;

  16303  9 001321   000002 631400 xsym  E_CLOSEJOB   EPPR1   B_VECTNIL+2
         9 001322   000000 701000 xent               TSX1    JPT$REPORT
         9 001323   000000 011000                    NOP     0

      760    16304    3         CALL REMOVE_SYSID;

  16304  9 001324   001443 701000 9                  TSX1    REMOVE_SYSID
         9 001325   000000 011000                    NOP     0

      761    16305    3         ALTRETURN;

  16305  9 001326   200016 221300                    LDX1  ! T$+2,,AUTO
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:91   
         9 001327   000000 702211                    TSX2  ! 0,X1

      762    16306    3       END;

      763    16307        /*
      764    16308             ***** If there are no errors
      765    16309                   then send this job off to MBS ...
      766    16310        */
      767    16311    2       IF NOT PASS_TWO#

  16311  9 001330   000000 234000 xsym               SZN     PASS_TWO#
         9 001331   001346 604000 9                  TMI     s:16322

      768    16312    2       THEN
      769    16313    3         DO;

      770    16314    3           CALL M$WRITE(SEND_MBS) ALTRET(E_SENDMBS);

  16314  9 001332   000304 630400 7                  EPPR0   SEND_MBS
         9 001333   440001 713400                    CLIMB   alt,write
         9 001334   401400 401760                    pmme    nvectors=4
         9 001335   001343 702000 9                  TSX2    E_SENDMBS

      771    16315                /* May be logging all logons in the security log or will at
      772    16316                   lease have to update :USERS for successful ones.      */
      773    16317    3           CALL JPJ$LOG_GOOD;

  16317  9 001336   000002 631400 xsym               EPPR1   B_VECTNIL+2
         9 001337   000000 701000 xent               TSX1    JPJ$LOG_GOOD
         9 001340   000000 011000                    NOP     0

      774    16318    3           RETURN;

  16318  9 001341   200016 221300                    LDX1  ! T$+2,,AUTO
         9 001342   000001 702211                    TSX2  ! 1,X1

      775    16319    3   E_SENDMBS:
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:92   
      776    16320    3           CALL JPT$REPORT;

  16320  9 001343   000002 631400 xsym  E_SENDMBS    EPPR1   B_VECTNIL+2
         9 001344   000000 701000 xent               TSX1    JPT$REPORT
         9 001345   000000 011000                    NOP     0

      777    16321    3         END;

      778    16322    2       ALTRETURN;

  16322  9 001346   200016 221300                    LDX1  ! T$+2,,AUTO
         9 001347   000000 702211                    TSX2  ! 0,X1

      779    16323        /**/
      780    16324    2   END CLEANUP;
      781    16325        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:93   
      782    16326        /**/
      783    16327        /*F* NAME:         JPS$INIT
      784    16328             PURPOSE:      To perform some PRESCAN initialization
      785    16329             DESCRIPTION:  Called from JPP$PRESCAN when PRESCAN starts
      786    16330                           running.
      787    16331
      788    16332                           Performs intialization specific to the actual
      789    16333                           work of prescanning a file.
      790    16334        */
      791    16335    1   JPS$INIT: ENTRY ALTRET;

  16335  9 001350   000000 700200 xent  JPS$INIT     TSX0  ! X66_AUTO_0
         9 001351   000032 000000                    ZERO    26,0

      792    16336        /**/
      793    16337        /*
      794    16338             ***** Get a page for storing text in (TEXT$)
      795    16339                   and a page for the parser workspace (WORK$) ...
      796    16340        */
      797    16341    1       CALL JPA$GET_PAGE (TEXT$);

  16341  9 001352   000054 630400 10                 EPPR0   44
         9 001353   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 001354   000000 701000 xent               TSX1    JPA$GET_PAGE
         9 001355   000000 011000                    NOP     0

      798    16342    1       CALL JPA$GET_PAGE (WORK$);

  16342  9 001356   000055 630400 10                 EPPR0   45
         9 001357   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 001360   000000 701000 xent               TSX1    JPA$GET_PAGE
         9 001361   000000 011000                    NOP     0

      799    16343        /*
      800    16344             ***** Get a list of all PHYSICAL RESOURCES on this system ...
      801    16345        */
      802    16346    1       PHYS_LIST_SIZE = 1024;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:94   

  16346  9 001362   002000 235007                    LDA     1024,DL
         9 001363   200013 755100                    STA     PHYS_LIST_SIZE,,AUTO

      803    16347    1       CALL JPA$GET_PAGE (PHYS_LIST$);

  16347  9 001364   000056 630400 10                 EPPR0   46
         9 001365   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 001366   000000 701000 xent               TSX1    JPA$GET_PAGE
         9 001367   000000 011000                    NOP     0

      804    16348    2       DO NEVER;

  16348  9 001370   001410 710000 9                  TRA     s:16366

      805    16349    2   E_GETRES:
      806    16350    2         IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$NORMRM

  16350  9 001371   000000 470400 xsym  E_GETRES     LDP0    B$TCB$
         9 001372   000000 471500                    LDP1    0,,PR0
         9 001373   100102 236100                    LDQ     66,,PR1
         9 001374   377770 376007                    ANQ     131064,DL
         9 001375   012330 116007                    CMPQ    5336,DL
         9 001376   001407 601000 9                  TNZ     s:16358

      807    16351    2         THEN   /* Not enough memory */
      808    16352    3           DO;   /* Try again */

      809    16353    3             PHYS_LIST_SIZE = PHYS_LIST_SIZE + 1024;

  16353  9 001377   200013 235100                    LDA     PHYS_LIST_SIZE,,AUTO
         9 001400   002000 035007                    ADLA    1024,DL
         9 001401   200013 755100                    STA     PHYS_LIST_SIZE,,AUTO

      810    16354    3             CALL JPA$GET_PAGE (PHYS_LIST$);

  16354  9 001402   000056 630400 10                 EPPR0   46
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:95   
         9 001403   000017 631400 xsym               EPPR1   B_VECTNIL+15
         9 001404   000000 701000 xent               TSX1    JPA$GET_PAGE
         9 001405   000000 011000                    NOP     0

      811    16355    3             GOTO GET_PHYS_LIST;

  16355  9 001406   001432 710000 9                  TRA     GET_PHYS_LIST

      812    16356    3           END;
      813    16357    2         ELSE
      814    16358    2           ALTRETURN;

  16358  9 001407   000000 702200 xent               TSX2  ! X66_AALT

      815    16359    2       END; /* Donever ... end */

      816    16360        /*
      817    16361             ***** Initialize misc variables ...
      818    16362        */
      819    16363        /*
      820    16364             ***** Setup parser control information ...
      821    16365        */
      822    16366    1       PCB.WKSZ = 1024;

  16366  9 001410   002000 220003                    LDX0    1024,DU
         9 001411   002420 740000 7                  STX0    PCB+5

      823    16367    1       PCB.WORK$ = WORK$;

  16367  9 001412   000000 236000 xsym               LDQ     WORK$
         9 001413   002415 756000 7                  STQ     PCB+2

      824    16368    1       PCB.U$$ = ENTADDR(CPD$SYNTRY);

  16368  9 001414   000000 636000 xent               EAQ     CPD$SYNTRY
         9 001415   002417 756000 7                  STQ     PCB+4

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:96   
      825    16369    1       PCB.USER$ = ADDR(U$PARAM);

  16369  9 001416   000057 236000 10                 LDQ     47
         9 001417   002427 756000 7                  STQ     PCB+12

      826    16370    1       U$PARAM.MODE = PRESCAN_MODE;

  16370  9 001420   003000 236003                    LDQ     1536,DU
         9 001421   002466 552040 7                  STBQ    U$PARAM+6,'40'O

      827    16371    1       U$PARAM.ERRBUF$ = ADDR(ERR_BLK);

  16371  9 001422   000026 236000 10                 LDQ     22
         9 001423   002460 756000 7                  STQ     U$PARAM

      828    16372    1       U$PARAM.USERS$ = ADDR(AS_USERS);

  16372  9 001424   000060 236000 10                 LDQ     48
         9 001425   002461 756000 7                  STQ     U$PARAM+1

      829    16373    1       U$PARAM.PSEUDO$ = ADDR(PSEUDO_LIST);

  16373  9 001426   000061 236000 10                 LDQ     49
         9 001427   002464 756000 7                  STQ     U$PARAM+4

      830    16374    1       U$PARAM.PHYS$ = PHYS_LIST$;

  16374  9 001430   000000 236000 xsym               LDQ     PHYS_LIST$
         9 001431   002465 756000 7                  STQ     U$PARAM+5

      831    16375    1   GET_PHYS_LIST:
      832    16376    1       CALL CPO$GET_RES (PSEUDO_LIST,PHYS_LIST$,PHYS_LIST_SIZE) ALTRET(E_GETRES);

  16376  9 001432   200013 630500       GET_PHYS_LI* EPPR0   PHYS_LIST_SIZE,,AUTO
         9 001433   200024 450500                    STP0    T$+8,,AUTO
         9 001434   000062 237000 10                 LDAQ    50
         9 001435   200022 757100                    STAQ    T$+6,,AUTO
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:97   
         9 001436   200022 630500                    EPPR0   T$+6,,AUTO
         9 001437   000021 631400 xsym               EPPR1   B_VECTNIL+17
         9 001440   000000 701000 xent               TSX1    CPO$GET_RES
         9 001441   001371 702000 9                  TSX2    E_GETRES

      833    16377        /*
      834    16378             ***** Done
      835    16379        */
      836    16380    1       RETURN;

  16380  9 001442   000000 702200 xent               TSX2  ! X66_ARET

      837    16381        %EJECT;
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:98   
      838    16382    1   REMOVE_SYSID: PROC;

  16382  9 001443   200020 741300       REMOVE_SYSID STX1  ! T$+4,,AUTO

      839    16383        /*
      840    16384             ***** This routine removes the job currently being
      841    16385                   processed from the sysid list (JP_Q) ...
      842    16386        */
      843    16387    3       DO INHIBIT;

      844    16388    3         T$ = JP_Q.SCAN$;

  16388  9 001444   000005 236200 xsym               LDQ   ! JP_Q+5
         9 001445   200014 756300                    STQ   ! T$,,AUTO

      845    16389    3         JP_Q.SCAN$ = T$ -> JP$JOB.LNK$;

  16389  9 001446   200014 470700                    LDP0  ! T$,,AUTO
         9 001447   000000 236300                    LDQ   ! 0,,PR0
         9 001450   000005 756200 xsym               STQ   ! JP_Q+5

      846    16390    3         T$ -> JP$JOB.LNK$ = JP_Q.FREE$;

  16390  9 001451   000004 236200 xsym               LDQ   ! JP_Q+4
         9 001452   000000 756300                    STQ   ! 0,,PR0

      847    16391    3         JP_Q.FREE$ = T$;

  16391  9 001453   200014 236300                    LDQ   ! T$,,AUTO
         9 001454   000004 756200 xsym               STQ   ! JP_Q+4

      848    16392    3       END;

      849    16393    2       RETURN;

  16393  9 001455   200020 221300                    LDX1  ! T$+4,,AUTO
         9 001456   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:99   
      850    16394    2   END REMOVE_SYSID;
      851    16395    1   END JPS$SCAN;

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:100  
--  Include file information  --

   JP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   XSJ_SUBS_C.:E05TOU  is referenced.
   XSJ_MAC_C.:E05TOU  is referenced.
   OC_MESSHD_C.:E05TOU  is referenced.
   OC_SUBS_C.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
   KL_SUPER_C.:E05TOU  is referenced.
   JP_MACRO_C.:E05TOU  is referenced.
   JM_SUBS_C.:E05TOU  is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   JG_EVID_C.:E05TOU  is referenced.
   FOS_SUBS_C.:E05TOU  is referenced.
   FOO_MAC_C.:E05TOU  is referenced.
   FS$FIT.:E05TOU  is referenced.
   FM$FIT.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   JP_PERR_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   AS_SUPER_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JPS$SCAN.
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:101  

 **** Variables and constants ****

  ****  Section 007  Data  JPS$SCAN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   262-0-0/w STRC(603)   r     1 ABORTHDR
   363-0-0/w SBIN        r     1 B$JIT0_LO(0:20)
   356-0-0/w SBIN        r     1 BAD_RECNO                  0-0-0/d STRC(1080)  r     1 CLOSE_JOB
    36-0-0/d STRC(1080)  r     1 CLOSE_LO                 360-0-0/w PTR         r     1 CODE04$
   354-0-0/w SBIN        r     1 CUR_RECNO               2431-0-0/w STRC(828)   r     1 ERR_BLK
  2411-0-0/c CHAR(6)     r     1 IDTEXT                   410-0-0/w UBIN        r     1 INSYM_FIT(0:1024)
   357-0-0/w PTR         r     1 INSYM_INFO$              166-0-0/c STRC(72)    r     1 JOBNAME
  3142-0-0/c STRC(1206)  r     1 JOB_MSG                 2607-0-0/w STRC(1980)  r     1 JOB_TBL
  2540-0-0/w STRC(1386)  r     1 JP_CONTINUE              361-0-0/c CHAR(8)     r     1 LO_WSN
  3120-0-0/w STRC(180)   r     1 MBS_MSG                 3126-0-0/d STRC(432)   r     1 OC_MSG
    74-0-0/d STRC(2088)  r     1 OPEN_JOB                 170-0-0/d STRC(2088)  r     1 OPEN_LO
   355-0-0/b BIT         r     1 PASS_SPECIFIED#         2413-0-0/w STRC(504)   r     1 PCB
  2500-0-0/d STRC(1116)  r     1 PSEUDO_LIST             2676-0-0/w STRC(2988)  r     1 PSN_TBL
   304-0-0/d STRC(432)   r     1 SEND_MBS                 352-0-0/d REMB        r     1 START_PRINTING
  2460-0-0/w STRC(576)   r     1 U$PARAM                 3021-0-0/w STRC(2268)  r     1 VIRT_TBL
   334-0-0/d STRC(288)   r     1 WRITE_JOBSTATS           320-0-0/d STRC(432)   r     1 WRITE_LO
   344-0-0/w STRC(180)   r     1 XSJ_JOBINFO

  ****  Section 008 RoData JPS$SCAN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    44-0-0/w PTR         r     1 B$JIT0_LO$                 4-0-0/d STRC(432)   r     1 DEFER_TSTAMP
   363-0-0/w STRC        r     1 E_JOBIMBED               364-0-0/w STRC        r     1 E_RESIMBED
     0-0-0/d STRC(144)   r     1 FPT_PFIL                  45-0-0/w STRC(1980)  r     1 JOB_TBL_INIT
   356-0-0/w STRC(180)   r     1 MBS_MSG_INIT              30-0-0/d STRC(432)   r     1 OFF_TIME
   134-0-0/w STRC(2988)  r     1 PSN_TBL_INIT              20-0-0/w STRC(288)   r     1 STATION_MBS
   257-0-0/w STRC(2268)  r     1 VIRT_TBL_INIT

PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:102  
  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w BIT         r     1 CALL_FLAG#                 5-0-0/w BIT         r     1 FINRES_PEND#
    11-0-0/w SBIN        r     1 K                         13-0-0/w UBIN        r     1 PHYS_LIST_SIZE
     6-0-0/w BIT         r     1 RELEASE_ALL#               4-0-0/w BIT         r     1 RES_PEND#
    12-0-0/w UBIN(18)    r     1 SYSID                     14-0-0/w PTR         r     1 T$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(72)    r     1 ACCT_SYMI                  0-0-0/w STRC(18576) r     1 AS_USERS
     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w PTR         r     1 ES$                        0-0-0/b BIT         r     1 IBEX_CMD
     0-0-0/w STRC(216)   r     1 JP_Q                       0-0-0/w PTR         r     1 M$EI$
     0-0-0/w PTR         r     1 M$LO$                      0-0-0/b BIT         r     1 NHPSN#
     0-0-0/b BIT         r     1 PASSWORD_OK#               0-0-0/b BIT         r     1 PASS_TWO#
     0-0-0/w PTR         r     1 PHYS_LIST$                 0-0-0/d STRC(504)   r     1 READ_CARD
     0-0-0/b BIT         r     1 SCAN_CMDS#                 0-0-0/w PTR         r     1 TEXT$
     0-0-0/w PTR         r     1 WORK$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/w STRC(396)   r     1 CODE04
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/w STRC(288)   r     1 INSYM$INFO
     0-0-0/c ACHR        r     1 JNAMEB                     0-0-0/w STRC(72)    r     1 JP$JOB
     0-0-0N  NULL        r     1 M$CG                       0-0-0N  NULL        r     1 M$EI
     0-0-0N  NULL        r     1 M$JOBSTAT                  0-0-0N  NULL        r     1 M$LO
     0-0-0/w STRC(144)   r     1 P$B                        0-0-0/w ASTR(153)   r     1 P$S
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:103  
     0-0-0/d STRC(360)   r     1 PHYS_LIST                  0-0-0/w CHAR(256)   r     1 READ$BUF
     0-0-0/w BIT         r     1 READ$BUFB                  0-0-0/c ACHR        r     1 W$BUF


   Procedure JPS$SCAN requires 815 words for executable code.
   Procedure JPS$SCAN requires 26 words of local(AUTO) storage.

    No errors detected in file JPS$SCAN.:E05TSI    .
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:104  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:105  
          MINI XREF LISTING

ABORTHDR
     14401**DCL     14352--DCLINIT
ACCT_SYMI
     13424**DCL     14205--DCLINIT
AS_USERS
     13586**DCL     16372--ASSIGN
AS_USERS.BANNER_PERM
     13701**DCL     13702--REDEF
AS_USERS.BUDGET.MACCT
     13606**DCL     13610--REDEF
AS_USERS.BUDGET.MAX_PROJECTS
     13619**DCL     13622--REDEF
AS_USERS.BUDGET.PACCUM
     13602**DCL     13604--REDEF
AS_USERS.BUDGET.PMAXC
     13597**DCL     13599--REDEF
AS_USERS.SETUP_CHRA.TXT
     13717**DCL     13718--REDEF   13719--REDEF
B$ALT.CODE
     13510**DCL     13510--REDEF   13511--REDEF   13511--REDEF
B$ALT.ERR.CODE
     13512**DCL     15952>>IF      16193>>IF      16350>>IF
B$ALT.ERR.ERR#
     13512**DCL     13512--REDEF
B$ALT.EVID
     13511**DCL     13511--REDEF   13511--REDEF
B$JIT
     15545**DCL     15904>>ASSIGN  15934>>ASSIGN
B$JIT.ACCN
     15550**DCL     16011<<ASSIGN
B$JIT.CPFLAGS1.SLEAZE
     15644**DCL     15644--REDEF
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:106  
B$JIT.ERR.MID
     15551**DCL     15551--REDEF
B$JIT.SYSID
     15550**DCL     15935<<ASSIGN
B$JIT.UNAME
     15550**DCL     16012<<ASSIGN
B$JIT.WOO
     15550**DCL     15987<<ASSIGN
B$JIT$
     13498**DCL     15545--IMP-PTR 15904>>ASSIGN  15934>>ASSIGN
B$JIT0_LO
     14887**DCL     14349--DCLINIT 14523--DCLINIT 15904<<ASSIGN  15934<<ASSIGN
B$JIT0_LO$
     14523**DCL     15935>>ASSIGN  15987>>ASSIGN  16011>>ASSIGN  16012>>ASSIGN
B$TCB.ALT$
     13506**DCL     15952>>IF      16193>>IF      16350>>IF
B$TCB$
     13500**DCL     13506--IMP-PTR 15952>>IF      16193>>IF      16350>>IF
BAD_RECNO
     14883**DCL     15978<<ASSIGN  16221>>ASSIGN
CALL_FLAG#
     15842**DCL     16119<>CALL    16160<>CALL    16172<>CALL
CLEANUP
     16202**PROC    15925--CALL
CLOSE_JOB
     14028**DCL     16300<>CALL
CLOSE_JOB.SN_
     14028**DCL     14028--REDEF
CLOSE_JOB.UTL_
     14029**DCL     14029--REDEF
CLOSE_JOB.V
     14033**DCL     14028--DCLINIT
CLOSE_JOB.V.DISP#
     14037**DCL     16217<<ASSIGN  16238<<ASSIGN
CLOSE_JOB.V.EXPIRE#
     14043**DCL     14043--REDEF
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:107  
CLOSE_JOB.V.TYPE#
     14041**DCL     14041--REDEF
CLOSE_JOB.V.XTNSIZE#
     14038**DCL     14038--REDEF   14040--REDEF
CLOSE_LO
     14071**DCL     16289<>CALL
CLOSE_LO.SN_
     14071**DCL     14071--REDEF
CLOSE_LO.UTL_
     14072**DCL     14072--REDEF
CLOSE_LO.V
     14076**DCL     14071--DCLINIT
CLOSE_LO.V.DISP#
     14080**DCL     16218<<ASSIGN  16241<<ASSIGN
CLOSE_LO.V.EXPIRE#
     14086**DCL     14086--REDEF
CLOSE_LO.V.TYPE#
     14084**DCL     14084--REDEF
CLOSE_LO.V.XTNSIZE#
     14081**DCL     14081--REDEF   14083--REDEF
CODE04.CREATION.TIME
     15541**DCL     16013>>ASSIGN
CODE04.CREATOR.ACCT
     15541**DCL     16009>>ASSIGN
CODE04.CREATOR.NAME
     15541**DCL     16010>>ASSIGN
CODE04$
     14885**DCL     15539--IMP-PTR 16007<<ASSIGN  16008<>CALL    16009>>ASSIGN  16010>>ASSIGN  16013>>ASSIGN
CPD$NULL_SFROUTINE
     13946**DCL-ENT 16098--ASSIGN
CPD$SET_NODES
     13943**DCL-ENT 16119--CALL    16160--CALL    16172--CALL
CPD$SYNTRY
     13945**DCL-ENT 16110--ASSIGN  16368--ASSIGN
CPO$GET_RES
     13947**DCL-ENT 16376--CALL
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:108  
CPO$RESOURCE
     13950**DCL-ENT 16131--CALL
CUR_RECNO
     14881**DCL     16030<<ASSIGN  16061<<ASSIGN  16084<<ASSIGN  16084>>ASSIGN
CXP$POSTERR
     13949**DCL-ENT 16184--CALL
CXX$VERIFY
     13948**DCL-ENT 16162--CALL
DEFER_TSTAMP.V
     14125**DCL     14121--DCLINIT
ERR_BLK
     15103**DCL     16131<>CALL    16162--CALL    16184--CALL    16371--ASSIGN
ERR_BLK.FIRST
     15105**DCL     16062<<ASSIGN  16065>>IF      16100<<ASSIGN  16125>>IF      16139<<ASSIGN  16163>>IF
     16174>>IF
ES$
     13935**DCL     13936--REDEF   13939--IMP-PTR
E_CLOSEJOB IN PROCEDURE CLEANUP
     16303**LABEL   16300--CALLALT
E_CLOSELO IN PROCEDURE CLEANUP
     16292**LABEL   16289--CALLALT
E_CONTEXT IN PROCEDURE PRESCAN
     16187**LABEL   16131--CALLALT
E_GETRES
     16350**LABEL   16376--CALLALT
E_JOBIMBED
     15866**DCL     16144<>CALL
E_OC1 IN PROCEDURE CLEANUP
     16268**LABEL   16269--CALLALT
E_OC2 IN PROCEDURE CLEANUP
     16279**LABEL   16280--CALLALT
E_READERR IN PROCEDURE PRESCAN
     16193**LABEL   16083--CALLALT
E_RESIMBED
     15889**DCL     16140<>CALL
E_SCAN
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:109  
     15928**LABEL   15925--CALLALT
E_SENDMBS IN PROCEDURE CLEANUP
     16320**LABEL   16314--CALLALT
E_SYNTAX IN PROCEDURE PRESCAN
     16183**LABEL   16109--CALLALT 16120--CALLALT 16161--CALLALT 16173--CALLALT
E_TIME IN PROCEDURE CLEANUP
     16225**LABEL   16223--CALLALT
F$DCB.ACTPOS
     13549**DCL     13549--REDEF
F$DCB.ARS#
     13523**DCL     13523--REDEF   16048>>ASSIGN  16093>>ASSIGN
F$DCB.ATTR
     13542**DCL     13543--REDEF
F$DCB.BORROW
     13557**DCL     13557--REDEF   13557--REDEF   13557--REDEF
F$DCB.DCBNAME.L
     13571**DCL     13571--IMP-SIZ
F$DCB.EOMCHAR#
     13527**DCL     13527--REDEF
F$DCB.FCD#
     13536**DCL     16287>>IF      16298>>IF
F$DCB.FLDID
     13552**DCL     13552--REDEF
F$DCB.FORM$
     13546**DCL     13546--REDEF
F$DCB.FSECT
     13562**DCL     13562--REDEF
F$DCB.FSN#
     13539**DCL     13539--REDEF   13539--REDEF   13540--REDEF
F$DCB.HEADER$
     13545**DCL     13545--REDEF
F$DCB.IXTNSIZE#
     13543**DCL     13543--REDEF
F$DCB.LASTSTA$
     13532**DCL     13532--REDEF
F$DCB.LVL
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:110  
     13558**DCL     13558--REDEF
F$DCB.NAME#.C
     13533**DCL     13533--REDEF
F$DCB.NOEOF
     13555**DCL     13555--REDEF
F$DCB.NRECS#
     13544**DCL     13544--REDEF
F$DCB.NRECX
     13563**DCL     13563--REDEF
F$DCB.OHDR
     13555**DCL     13555--REDEF
F$DCB.ORG#
     13538**DCL     13538--REDEF
F$DCB.PRECNO
     13561**DCL     13561--REDEF
F$DCB.RCSZ
     13567**DCL     13567--REDEF
F$DCB.RES#
     13534**DCL     13534--REDEF
F$DCB.SETX
     13546**DCL     13546--REDEF
F$DCB.TAB$
     13546**DCL     13546--REDEF
F$DCB.TDA
     13560**DCL     13561--REDEF
F$DCB.WSN#
     13534**DCL     13534--REDEF
FINRES_PEND#
     15844**DCL     16038<<ASSIGN  16134<<ASSIGN  16235>>IF
FPT_PFIL
     14103**DCL     15917<>CALL    16058<>CALL
FPT_PFIL.V
     14103**DCL     14103--DCLINIT
GET_PHYS_LIST
     16376**LABEL   16355--GOTO
GET_SYSID
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:111  
     15930**PROC    15906--CALL
IBEX_CMD
     13965**DCL     16097--ASSIGN
IDTEXT
     14889**DCL     15942<<CALLBLT 15943>>CALLBLT
INSYM$INFO.FLAG
     15726**DCL     15994>>IF
INSYM$INFO.ORIGINATOR_MODE
     15726**DCL     16005>>ASSIGN
INSYM$INFO.ORIGINATOR_PORT
     15723**DCL     16006>>ASSIGN
INSYM$INFO.ORIGINATOR_PORT.FROM_CR
     15723**DCL     15723--REDEF   15724--REDEF
INSYM$INFO.ORIGINATOR_PORT.FROM_CR.DEVICE
     15723**DCL     15997>>ASSIGN
INSYM$INFO.ORIGINATOR_PORT.FROM_CR.TNAME
     15723**DCL     15998>>ASSIGN
INSYM$INFO.SYSID
     15725**DCL     15993>>ASSIGN
INSYM$INFO.WOO
     15725**DCL     15984>>ASSIGN
INSYM_FIT
     14888**DCL     14205--DCLINIT 15982--ASSIGN  16007--ASSIGN
INSYM_INFO$
     14884**DCL     15723--IMP-PTR 15982<<ASSIGN  15983<>CALL    15984>>ASSIGN  15993>>ASSIGN  15994>>IF
     15997>>ASSIGN  15998>>ASSIGN  16005>>ASSIGN  16006>>ASSIGN
IO_ALT
     15921**LABEL   15917--CALLALT
IO_ALT IN PROCEDURE GET_SYSID
     16018**LABEL   15957--CALLALT 15983--CALLALT
IO_ALT IN PROCEDURE PRESCAN
     16197**LABEL   16047--CALLALT 16058--CALLALT 16064--CALLALT
JNAMEB
     15840**DCL     16260>>ASSIGN
JOBNAME
     14269**DCL     14030--DCLINIT 14201--DCLINIT
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:112  
JOBNAME.NAME#
     14269**DCL     15943<<CALLBLT 15955<<CALLBLT 16239<<CALLBLT
JOB_MSG
     15510**DCL     16266--ASSIGN
JOB_MSG.ACCT1
     15524**DCL     16250<<ASSIGN  16253>>IF
JOB_MSG.ACCT2
     15528**DCL     16009<<ASSIGN  16011>>ASSIGN  16253>>IF      16255<<ASSIGN
JOB_MSG.CADDR
     15511**DCL     16267<<ASSIGN  16278<<ASSIGN
JOB_MSG.DEVTYP
     15532**DCL     15997<<ASSIGN  16002<<ASSIGN
JOB_MSG.FLAGS
     15517**DCL     15518--REDEF
JOB_MSG.JOBID1
     15523**DCL     16014<<ASSIGN
JOB_MSG.JOBID2
     15527**DCL     15993<<ASSIGN
JOB_MSG.JOBNAME
     15534**DCL     16257<<ASSIGN  16260<<ASSIGN
JOB_MSG.MSGID
     15513**DCL     15514--REDEF
JOB_MSG.REASON
     15531**DCL     16265<<ASSIGN
JOB_MSG.TNAME
     15533**DCL     15998<<ASSIGN  16003<<ASSIGN
JOB_MSG.UNAME1
     15525**DCL     16251<<ASSIGN
JOB_MSG.UNAME2
     15529**DCL     16010<<ASSIGN  16012>>ASSIGN
JOB_MSG.WSN
     15520**DCL     16268<<ASSIGN  16279<<ASSIGN
JOB_MSG.WSN1
     15526**DCL     16252<<ASSIGN
JOB_MSG.WSN2
     15530**DCL     15992<<ASSIGN  16275>>IF      16279>>ASSIGN
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:113  
JOB_TBL
     15166**DCL     14031--DCLINIT 15168--DCLINIT 15974<<ASSIGN  16131<>CALL    16133<>CALL    16237<>CALL
JOB_TBL.ACCT
     15242**DCL     16220>>ASSIGN  16250>>ASSIGN
JOB_TBL.COUNT
     15168**DCL     15975<<ASSIGN  15975>>ASSIGN
JOB_TBL.JNAME
     15305**DCL     16260--ASSIGN
JOB_TBL.JNL
     15296**DCL     15840--IMP-SIZ 16258>>IF      16260>>ASSIGN
JOB_TBL.MAXPSN
     15234**DCL     16242<<ASSIGN
JOB_TBL.MAXVR
     15237**DCL     16244<<ASSIGN
JOB_TBL.ORIGINATOR_MODE
     15286**DCL     16005<<ASSIGN
JOB_TBL.ORIGINATOR_PORT
     15288**DCL     16006<<ASSIGN
JOB_TBL.RATIM
     15250**DCL     14125--DCLINIT
JOB_TBL.STATUS
     15232**DCL     15977<<ASSIGN  16219>>ASSIGN  16265>>ASSIGN
JOB_TBL.SUBMIT_TIME
     15194**DCL     16013<<ASSIGN
JOB_TBL.SYSID
     15240**DCL     15976<<ASSIGN
JOB_TBL.UNAME
     15244**DCL     16251>>ASSIGN
JOB_TBL.WOO
     15246**DCL     15985<<ASSIGN
JOB_TBL.WSN
     15248**DCL     15986<<ASSIGN  16252>>ASSIGN
JOB_TBL_INIT
     14572**DCL     14574--DCLINIT 15974>>ASSIGN
JP$JOB.LNK$
     15813**DCL     16389>>ASSIGN  16390<<ASSIGN
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:114  
JP$JOB.SCANNING
     15815**DCL     16247<<ASSIGN
JP$JOB.SYSID
     15818**DCL     15905>>ASSIGN
JPA$CONTINUE
     13951**DCL-ENT 16111--ASSIGN
JPA$GET_PAGE
     13952**DCL-ENT 16341--CALL    16342--CALL    16347--CALL    16354--CALL
JPE$ERRORS
     13955**DCL-ENT 16069--CALL    16140--CALL    16144--CALL    16187--CALL
JPE$REASON
     13954**DCL-ENT 15921--CALL    16018--CALL    16068--CALL    16128--CALL    16138--CALL    16143--CALL
     16165--CALL    16177--CALL    16183--CALL    16197--CALL
JPJ$JOB
     13956**DCL-ENT 16064--CALL
JPJ$LOG_GOOD
     13957**DCL-ENT 16317--CALL
JPR$FINRES
     13958**DCL-ENT 16133--CALL    16237--CALL
JPT$REPORT
     13960**DCL-ENT 15961--CALL    16230--CALL    16292--CALL    16303--CALL    16320--CALL
JP_CONTINUE.CHARPOS
     15149**DCL     16050<<ASSIGN
JP_CONTINUE.LEN
     15150**DCL     16051<<ASSIGN  16094<<ASSIGN
JP_CONTINUE.REC_NUM
     15148**DCL     16049<<ASSIGN  16092<<ASSIGN
JP_Q.FREE$
     13991**DCL     16390>>ASSIGN  16391<<ASSIGN
JP_Q.SCAN$
     13993**DCL     15905>>ASSIGN  16247>>ASSIGN  16388>>ASSIGN  16389<<ASSIGN
K
     15848**DCL     16104<<CALLBLT
KL_DREC.PASSWORD
     13822**DCL     13826--REDEF
KL_DREC.RENAME
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:115  
     13845**DCL     13846--REDEF
LO_WSN
     14886**DCL     14351--DCLINIT 15984<<ASSIGN  15985>>ASSIGN  15986>>ASSIGN  15987>>ASSIGN  15992>>ASSIGN
     16268>>ASSIGN  16275>>IF
M$CLOSE
      1800**DCL-ENT 16289--CALL    16300--CALL
M$EI$
     13492**DCL     16048>>ASSIGN  16093>>ASSIGN  16298>>IF
M$LO$
     13493**DCL     16287>>IF
M$OPEN
      1800**DCL-ENT 15946--CALL    15957--CALL    15963--CALL
M$PFIL
      1802**DCL-ENT 15917--CALL    16058--CALL
M$READ
      1801**DCL-ENT 16047--CALL    16083--CALL
M$TIME
      1867**DCL-ENT 16223--CALL
M$WRITE
      1801**DCL-ENT 16269--CALL    16280--CALL    16314--CALL
MBS_MSG
     15439**DCL     14427--DCLINIT 14428--DCLINIT 15936<<ASSIGN
MBS_MSG.ACCT
     15456**DCL     15459--REDEF
MBS_MSG.CODE
     15444**DCL     16240<<ASSIGN
MBS_MSG.SYSID
     15448**DCL     15937<<ASSIGN
MBS_MSG_INIT
     14844**DCL     15936>>ASSIGN
MBS_MSG_INIT.ACCT
     14861**DCL     14864--REDEF
NHPSN#
     13921**DCL     16033<<ASSIGN  16131<>CALL
OC_MSG
     15492**DCL     16269<>CALL    16280<>CALL
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:116  
OC_MSG.BUF_
     15492**DCL     16266<<ASSIGN
OC_MSG.STATION_
     15494**DCL     15494--REDEF
OC_MSG.V
     15495**DCL     15492--DCLINIT
OC_MSG.V.DVBYTE.VFC#
     15501**DCL     15501--REDEF
OFF_TIME
     14514**DCL     16223<>CALL
OFF_TIME.V
     14518**DCL     14514--DCLINIT
OPEN_ERR IN PROCEDURE GET_SYSID
     15962**LABEL   15963--CALLALT
OPEN_JOB
     14200**DCL     15946<>CALL    15957<>CALL    15963<>CALL
OPEN_JOB.ACSVEH_
     14202**DCL     14203--REDEF
OPEN_JOB.ALTKEYS_
     14208**DCL     14209--REDEF   14209--REDEF
OPEN_JOB.HDR_
     14207**DCL     14208--REDEF
OPEN_JOB.TAB_
     14206**DCL     14207--REDEF
OPEN_JOB.UHL_
     14200**DCL     14201--REDEF   14201--REDEF
OPEN_JOB.V
     14209**DCL     14200--DCLINIT
OPEN_JOB.V.DELETE#
     14211**DCL     15945<<ASSIGN  15962<<ASSIGN
OPEN_JOB.V.FSN#
     14240**DCL     14240--REDEF   14240--REDEF
OPEN_JOB.V.OPER.TEST#
     14211**DCL     15944<<ASSIGN  15956<<ASSIGN
OPEN_JOB.WSN_
     14206**DCL     14206--REDEF
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:117  
OPEN_LO.ACSVEH_
     14347**DCL     14348--REDEF
OPEN_LO.ALTKEYS_
     14353**DCL     14354--REDEF   14354--REDEF
OPEN_LO.HDR_
     14352**DCL     14353--REDEF
OPEN_LO.TAB_
     14351**DCL     14352--REDEF
OPEN_LO.UHL_
     14345**DCL     14346--REDEF   14346--REDEF
OPEN_LO.V
     14354**DCL     14345--DCLINIT
OPEN_LO.V.FSN#
     14385**DCL     14385--REDEF   14385--REDEF
OPEN_LO.WSN_
     14351**DCL     14351--REDEF
OPN_JOB_ALT IN PROCEDURE GET_SYSID
     15952**LABEL   15946--CALLALT
P$B
     15734**DCL     16162<>CALL
P$B.CODE
     15742**DCL     16117>>DOCASE
P$S.COUNT
     15803**DCL     15806--IMP-SIZ
PARSE_CMD IN PROCEDURE PRESCAN
     16109**LABEL   16104--CALLALT
PASSWORD_OK#
     13923**DCL     15972<<ASSIGN
PASS_SPECIFIED#
     14882**DCL     15973<<ASSIGN
PASS_TWO#
     13924**DCL     15916<<ASSIGN  15971<<ASSIGN  16019<<ASSIGN  16198<<ASSIGN  16210>>IF      16311>>IF
PCB
     14908**DCL     16109<>CALL    16119<>CALL    16120<>CALL    16131<>CALL    16160<>CALL    16161<>CALL
     16172<>CALL    16173<>CALL
PCB.CONTINUE
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:118  
     14949**DCL     16063<<ASSIGN  16099<<ASSIGN  16112<<ASSIGN
PCB.ERROR
     15012**DCL     16184<>CALL
PCB.HI_CHAR
     15059**DCL     16184<>CALL
PCB.NCHARS
     15055**DCL     15839--IMP-SIZ 16048<<ASSIGN  16051>>ASSIGN  16056<<ASSIGN  16093<<ASSIGN  16094>>ASSIGN
     16095<<ASSIGN  16095>>ASSIGN  16104>>CALLBLT
PCB.OUT$
     14921**DCL     16117>>DOCASE  16162>>CALL
PCB.ROOT$
     14913**DCL     16097<<ASSIGN  16119<>CALL    16160<>CALL    16172<>CALL
PCB.TEXT$
     14909**DCL     16039<<ASSIGN  16096<<ASSIGN  16104>>CALLBLT
PCB.U$$
     14926**DCL     16098<<ASSIGN  16110<<ASSIGN  16368<<ASSIGN
PCB.USER$
     15075**DCL     16369<<ASSIGN
PCB.WKSZ
     14938**DCL     16366<<ASSIGN
PCB.WORK$
     14917**DCL     16367<<ASSIGN
PHYS_LIST
     15832**DCL     16133<>CALL    16237<>CALL
PHYS_LIST.PRLIST.RNAME#
     15832**DCL     15833--REDEF
PHYS_LIST$
     13502**DCL     15832--IMP-PTR 16133>>CALL    16237>>CALL    16347<>CALL    16354<>CALL    16374>>ASSIGN
     16376<>CALL
PHYS_LIST_SIZE
     15850**DCL     16346<<ASSIGN  16353<<ASSIGN  16353>>ASSIGN  16376<>CALL
PRESCAN
     16023**PROC    15907--CALL    15918--CALL
PSEUDO_LIST
     15141**DCL     16373--ASSIGN  16376<>CALL
PSN_TBL
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:119  
     15324**DCL     14032--DCLINIT 15326--DCLINIT 16031<<ASSIGN  16131<>CALL    16133<>CALL    16237<>CALL
PSN_TBL.COUNT
     15326**DCL     16032<<ASSIGN  16242>>ASSIGN  16243<<ASSIGN  16243>>ASSIGN
PSN_TBL_INIT
     14730**DCL     14732--DCLINIT 16031>>ASSIGN
READ$BUF
     15837**DCL     16045--ASSIGN  16046<<CALLBLT 16052>>IF      16057<<CALLBLT 16080--ASSIGN  16082<<CALLBLT
     16089>>IF
READ$BUFB
     15838**DCL     16052>>IF
READ_CARD
     13468**DCL     16047<>CALL    16083<>CALL
READ_CARD.BUF_
     13470**DCL     16045<<ASSIGN  16080<<ASSIGN
READ_CARD.STATION_
     13471**DCL     13472--REDEF
READ_CARD.V.DVBYTE.REREAD#
     13483**DCL     13483--REDEF
READ_CARD.V.INDX#
     13481**DCL     13481--REDEF
READ_CMD IN PROCEDURE PRESCAN
     16082**LABEL   16091--GOTO
RELEASE_ALL#
     15845**DCL     16131<>CALL
REMOVE_SYSID
     16382**PROC    16216--CALL    16304--CALL
RES_PEND#
     15843**DCL     16037<<ASSIGN  16079>>DOWHILE 16101>>IF      16121>>IF      16124<<ASSIGN  16156<<ASSIGN
     16168<<ASSIGN
SCAN_CMDS#
     13922**DCL     16036<<ASSIGN  16079>>DOWHILE 16101>>IF      16157>>IF      16169>>IF
SECOND_PASS
     15916**LABEL   15903--REMEMBR
SEND_MBS
     14426**DCL     16314<>CALL
SEND_MBS.STATION_
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:120  
     14428**DCL     14428--REDEF
SEND_MBS.V
     14429**DCL     14426--DCLINIT
SEND_MBS.V.DVBYTE.VFC#
     14435**DCL     14435--REDEF
SKIP_PRESCAN
     15925**LABEL   15906--CALLALT
START_PRINTING
     14880**DCL     15903<<REMEMBR
STATION_MBS
     14453**DCL     14428--DCLINIT
STATION_MBS.MSGIDXT
     14463**DCL     14466--REDEF
SYSID
     15849**DCL     15905<<ASSIGN  15935>>ASSIGN  15937>>ASSIGN  15938>>ASSIGN  15942>>CALLBLT 15976>>ASSIGN
     16014>>ASSIGN
T$
     15851**DCL     16388<<ASSIGN  16389>>ASSIGN  16390>>ASSIGN  16391>>ASSIGN
TEXT$
     13501**DCL     16039>>ASSIGN  16045>>ASSIGN  16046>>CALLBLT 16052>>IF      16052>>IF      16057>>CALLBLT
     16080>>ASSIGN  16082>>CALLBLT 16089>>IF      16096>>ASSIGN  16341<>CALL
U$PARAM
     15115**DCL     16369--ASSIGN
U$PARAM.CNTU$$
     15118**DCL     16111<<ASSIGN
U$PARAM.ERRBUF$
     15116**DCL     16371<<ASSIGN
U$PARAM.MODE
     15122**DCL     16370<<ASSIGN
U$PARAM.PHYS$
     15121**DCL     16374<<ASSIGN
U$PARAM.PSEUDO$
     15120**DCL     16373<<ASSIGN
U$PARAM.REMEM_CONTEXT_ERR$
     15128**DCL     16113<<ASSIGN
U$PARAM.SPCL$$
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:121  
     15119**DCL     16119<>CALL    16160<>CALL    16172<>CALL
U$PARAM.USERS$
     15117**DCL     16372<<ASSIGN
VIRT_TBL
     15381**DCL     14032--DCLINIT 15383--DCLINIT 16034<<ASSIGN  16131<>CALL    16133<>CALL    16237<>CALL
VIRT_TBL.COUNT
     15383**DCL     16035<<ASSIGN  16244>>ASSIGN  16245<<ASSIGN  16245>>ASSIGN
VIRT_TBL.RES.VNUM
     15407**DCL     15409--REDEF
VIRT_TBL_INIT
     14787**DCL     14789--DCLINIT 16034>>ASSIGN
VIRT_TBL_INIT.RES.VNUM
     14813**DCL     14815--REDEF
W$BUF
     15839**DCL     16104>>CALLBLT
WORK$
     13503**DCL     16342<>CALL    16367>>ASSIGN
WRITE_JOBSTATS
     14538**DCL     16227<>CALL
WRITE_JOBSTATS.SYSID#
     14541**DCL     15938<<ASSIGN
WRITE_LO.STATION_
     14488**DCL     14488--REDEF
WRITE_LO.V
     14489**DCL     14486--DCLINIT
WRITE_LO.V.DVBYTE.VFC#
     14495**DCL     14495--REDEF
X$PARSE
     13961**DCL-ENT 16109--CALL    16120--CALL    16161--CALL    16173--CALL
XSF$LOCCODP
     13962**DCL-ENT 15983--CALL    16008--CALL
XSJ$WRITE
     13963**DCL-ENT 16227--CALL
XSJ_ALT1 IN PROCEDURE CLEANUP
     16230**LABEL   16227--CALLALT
XSJ_JOBINFO
PL6.E3A0      #001=JPS$SCAN File=JPS$SCAN.:E05TSI                                TUE 07/29/97 23:38 Page:122  
     14555**DCL     14538--DCLINIT 14539--DCLINIT
XSJ_JOBINFO.ACCT#
     14557**DCL     16220<<ASSIGN
XSJ_JOBINFO.OFF_TIME#
     14556**DCL     14518--DCLINIT 16225<<ASSIGN
XSJ_JOBINFO.RECNO#
     14556**DCL     16221<<ASSIGN
XSJ_JOBINFO.STATUS#
     14556**DCL     16219<<ASSIGN
