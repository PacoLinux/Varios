VERSION E05

PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:1    
        1        1        /*M* QBX$ARITHMETICS:  ADD, SUBTRACT, MULTIPLY, DIVIDE and ROUND.  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=0,DCI=4,CSI=2,IAD=2,DTI=2,AND,ECI=0,DIN=2,STI=2 */
        8        8
        9        9        /*D*       NAME: QBX$ARITHMETICS
       10       10                PURPOSE: To provide a common module for all arithmetic routines
       11       11                ENTRIES: QBX$ADD, QBX$ADDX, QBX$DIV, QBX$DIVX, QBX$MULT,
       12       12                         QBX$MULTX, QBX$SUB, QBX$SUBX, QBX$ROUND.
       13       13                                                    */
       14       14
       15       15        QBX$ARITHMETICS: PROC;
       16       16
       17       17          %INCLUDE LCP_6;
       18      208
       19      209          %INCLUDE QG_MACRO_M;
       20      346          %INCLUDE QI_EQUATES_E;
       21      705        %INCLUDE QI_PERR_C;
       22      873        %INCLUDE QI_MACROS_M;
       23     5931        %QI$ALL;
       24    17044
       25    17045    1     DCL QCS$SETUP_SOURCE ENTRY;
       26    17046    1     DCL QCS$SETUP_TARGET ENTRY;
       27    17047    1     DCL QCC$DAD ENTRY(1) ALTRET;
       28    17048    1     DCL QCC$DSB ENTRY(1) ALTRET;
       29    17049    1     DCL QCC$DDV ENTRY(1) ALTRET;
       30    17050    1     DCL QCC$DML ENTRY(1) ALTRET;
       31    17051    1     DCL QCC$DMC ENTRY (1) ALTRET;
       32    17052    1     DCL QCC$DRS ENTRY (1) ALTRET;
       33    17053    1     DCL QCC$DLS ENTRY (1) ALTRET;
       34    17054
       35    17055    1     DCL SAVE_S_DEC SBIN;
       36    17056    1     DCL SAVE_T_DEC SBIN;
       37    17057    1     DCL I SBIN;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:2    
       38    17058    1     DCL LOOP_COUNTER SBIN;
       39    17059    1     DCL REAL_DECIMAL UBIN;
       40    17060    1     DCL DECIMAL_PLACES SBIN;
       41    17061    1     DCL SHIFT_POSITIONS SBIN;
       42    17062
       43    17063    1     DCL QCE$ERROR ENTRY(4);
       44    17064
       45    17065          %QI@OTTER_SPACE;
       46    17093
       47    17094        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:3    
       48    17095    1   QBX$ADD: ENTRY;
       49    17096                                           /**/
       50    17097        /*D*       NAME: QBX$ADD
       51    17098                PURPOSE: To add two numbers together
       52    17099              INTERFACE: QCC$DAD, QCS$SETUP_SOURCE, QCS$SETUP_TARGET
       53    17100            DESCRIPTION: Adds two numbers together.  If a SIZE_ERROR clause
       54    17101                            was specified, an overflow test operation is
       55    17102                            performed.  The target remains unchanged if the
       56    17103                            test fails.  In addition, the operation is not
       57    17104                            performed if overflow occurs during alignment. */
       58    17105                                           /**/
       59    17106
       60    17107
       61    17108    1       CALL QCS$SETUP_SOURCE;
       62    17109
       63    17110    1       CALL QCS$SETUP_TARGET;
       64    17111
       65    17112                                           /**/
       66    17113                                       /* Update the instruction pointer. */
       67    17114                                           /**/
       68    17115    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_ADD.NEXT_CODE@P );
       69    17116
       70    17117    1       QI_1.A_REG = 0;
       71    17118                                           /**/
       72    17119                                           /**/
       73    17120                                       /* Was SIZE_ERROR specified? If so,
       74    17121                                          do test operation */
       75    17122                                           /**/
       76    17123    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
       77    17124    1       THEN
       78    17125    2         DO;
       79    17126    2           QI_1.OP.SIZE_ERROR = 1;
       80    17127    2         END;
       81    17128    1       ELSE
       82    17129    2         DO;
       83    17130    2           QI_1.OP.SIZE_ERROR = 0;
       84    17131    2         END;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:4    
       85    17132
       86    17133    1       CALL QCC$DAD (QI_1.OP)
       87    17134    1       WHENALTRETURN
       88    17135    2         DO;
       89    17136    2           QI_1.A_REG = 1;
       90    17137    2         END;
       91    17138
       92    17139    1       RETURN;
       93    17140
       94    17141        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:5    
       95    17142    1   QBX$ADDX: ENTRY;
       96    17143                                           /**/
       97    17144        /*D*       NAME: QBX$ADDX
       98    17145                PURPOSE: To add a series of numbers together
       99    17146              INTERFACE: QCC$DMC, QCC$DAD, QCS$SETUP_SOURCE, QCS$SETUP_TARGET
      100    17147            DESCRIPTION: QI1$ADDX adds a series of numbers to the accumulator.
      101    17148                            If a SIZE_ERROR is detected during alignment or
      102    17149                            after an add (accumulator overflow), A_REG is set
      103    17150                            and we return.  */
      104    17151                                           /**/
      105    17152
      106    17153
      107    17154
      108    17155    1       QI_1.A_REG = 0;
      109    17156
      110    17157
      111    17158                                        /* Clear the accumulator */
      112    17159    1       QI_1.ACCUM = QI_ZERO_ACCUMULATOR;
      113    17160
      114    17161                                           /* Get count of number of items
      115    17162                                              from code sequence. */
      116    17163    1       LOOP_COUNTER = QI_1.INSTR$ -> QI$OP_ADDX.ARGUMENT_COUNT;
      117    17164                                           /* Go on to next item. */
      118    17165    1       QI_1.SOURCE$ = ADDR ( QI_1.INSTR$ -> QI$OP_ADDX.ARGUMENT_A@P (0) );
      119    17166                                          /* Update the instruction pointer. */
      120    17167    1       QI_1.INSTR$ = PINCRW (QI_1.INSTR$, LOOP_COUNTER + 2 );
      121    17168
      122    17169    1       QI_1.OP.CIP.T_A (0) = QI_ACCUMULATOR_DAD.CIP_A (0);
      123    17170                                           /**/
      124    17171                                           /* Pass 15 as the accumulators
      125    17172                                              decimal place */
      126    17173                                           /**/
      127    17174    1       QI_1.OP.DEC.T = %QI#ACCUMULATOR_DEC;
      128    17175    1       QI_1.OP.LEN.T = %QI#ACCUMULATOR_LEN;
      129    17176    1       QI_1.OP.DATA.T$ = ADDR ( QI_1.ACCUM );
      130    17177    1       QI_1.OP.SIZE_ERROR = 1;
      131    17178
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:6    
      132    17179                                              /**/
      133    17180                                           /* DOWNTO constructs go to stopping
      134    17181                                              point -1. */
      135    17182                                              /**/
      136    17183
      137    17184    2       DO I = LOOP_COUNTER DOWNTO 1 BY -1;
      138    17185    2         CALL QCS$SETUP_SOURCE;
      139    17186
      140    17187    2   ADDX_STOMP_ACCUM:
      141    17188    2         CALL QCC$DAD (QI_1.OP)
      142    17189    2         WHENALTRETURN
      143    17190    3           DO;
      144    17191    3             QI_1.A_REG = 1;
      145    17192    3             QI_1.OP.SIZE_ERROR = 0;
      146    17193    3             GOTO ADDX_STOMP_ACCUM;
      147    17194    3           END;
      148    17195
      149    17196    2       END;
      150    17197
      151    17198    1       RETURN;
      152    17199
      153    17200        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:7    
      154    17201    1   QBX$DIV: ENTRY;
      155    17202                                           /**/
      156    17203        /*D*       NAME: QBX$DIV
      157    17204                PURPOSE: To divide two numbers and place the result into the
      158    17205        QBX$DIVX:  ENTRY;
      159    17206              INTERFACE: QCC$DCM, QCC$DDV, QCS$SETUP_SOURCE, QCS$SETUP_TARGET
      160    17207            DESCRIPTION: This routine divides the value specified by the 2nd
      161    17208                            operand by the value specified by the 1st operand
      162    17209                            and places the result in the third operand.  A
      163    17210                            divide by zero check is done prior to the divide.
      164    17211                            If the divisor (1st operand) is equal to zero, no
      165    17212                            divide is attempted.  A size error clause results
      166    17213                            in a test divide. If the test fails, the target
      167    17214                            remains unchanged. */
      168    17215                                           /**/
      169    17216
      170    17217                                           /**/
      171    17218                                       /* SETUP source. */
      172    17219                                           /**/
      173    17220    1       CALL QCS$SETUP_SOURCE;
      174    17221
      175    17222                                           /**/
      176    17223                                       /* SETUP target. */
      177    17224                                           /**/
      178    17225    1       CALL QCS$SETUP_TARGET;
      179    17226                                           /**/
      180    17227                                       /* Update instruction pointer. */
      181    17228                                           /**/
      182    17229    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_DIV.NEXT_CODE@P );
      183    17230    1       QI_1.A_REG = 0;
      184    17231
      185    17232    1       QI_1.OP.CIP.AUX_A (0) = QI_ACCUMULATOR_DAD.CIP_A (0);
      186    17233    1       QI_1.OP.DEC.AUX = %QI#ACCUMULATOR_DEC;
      187    17234    1       QI_1.OP.DATA.AUX$ = ADDR ( QI_1.ACCUM );
      188    17235                                           /**/
      189    17236                                       /* 3rd oper = (2nd oper / 1st oper).
      190    17237                                          The second oper is aligned to the
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:8    
      191    17238                                          the accumulator prior to the divide.
      192    17239                                          The result will be at decimal place
      193    17240                                          15 in the accumulator. */
      194    17241                                           /**/
      195    17242    1       CALL QCC$DDV (QI_1.OP)
      196    17243    1       WHENALTRETURN
      197    17244    2         DO;
      198    17245              /* Ohno...divide by zero...panic.  */
      199    17246        /*EH?*IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      200    17247              THEN
      201    17248                DO;
      202    17249                  QI_1.A_REG = 1;
      203    17250                  RETURN;
      204    17251                END;
      205    17252              ELSE*EH?*/
      206    17253    2           CALL QCE$ERROR ( %E$COMMERCIAL_DIVIDE_BY_ZERO );
      207    17254    2         END;
      208    17255                                           /**/
      209    17256                                       /* Now we set up the source descriptor
      210    17257                                          in the interpreter data to make the
      211    17258                                          accumulator the source field. The
      212    17259                                          reason being, so we can move the
      213    17260                                          accumulator to the target. */
      214    17261                                           /**/
      215    17262                                       /* The result in the accumulator is at
      216    17263                                          decimal place 15.  Now get the real
      217    17264                                          decimal place of the result. */
      218    17265                                           /**/
      219    17266    1       REAL_DECIMAL = QI_1.OP.DEC.T
      220    17267    1         - QI_1.OP.DEC.S + 15;
      221    17268
      222    17269    1       QI_1.OP.CIP.S_A (0) = QI_ACCUMULATOR_DAD.CIP_A (0);
      223    17270    1       QI_1.OP.DEC.S = REAL_DECIMAL;
      224    17271    1       QI_1.OP.DATA.S$ = ADDR ( QI_1.ACCUM );
      225    17272                                              /**/
      226    17273                                              /**/
      227    17274                                           /**/
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:9    
      228    17275                                       /* Align the result in the accumulator
      229    17276                                          using the real decimal place
      230    17277                                          (which is at 15 + n) to the
      231    17278                                          target and move the result.  If a
      232    17279                                          size error clause was specified, do
      233    17280                                          a test operation. */
      234    17281                                           /**/
      235    17282                                           /**/
      236    17283                                       /* If a size_error clause was specified,
      237    17284                                          we must do a trial move */
      238    17285                                           /**/
      239    17286    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      240    17287    1       THEN
      241    17288    2         DO;
      242    17289    2           QI_1.OP.SIZE_ERROR = 1;
      243    17290    2         END;
      244    17291    1       ELSE
      245    17292    2         DO;
      246    17293
      247    17294    2           QI_1.OP.SIZE_ERROR = 0;
      248    17295    2         END;
      249    17296
      250    17297    1       CALL QCC$DMC (QI_1.OP)
      251    17298    1       WHENALTRETURN
      252    17299    2         DO;
      253    17300    2           QI_1.A_REG = 1;
      254    17301    2         END;
      255    17302
      256    17303    1       RETURN;
      257    17304
      258    17305        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:10   
      259    17306    1   QBX$DIVX: ENTRY;
      260    17307                                           /**/
      261    17308        /*D*       NAME: QBX$DIVX
      262    17309                PURPOSE: To divide two numbers and place the result into the
      263    17310                            accumulator.
      264    17311              INTERFACE: QCC$DMC, QCC$DDV, QCS$SETUP_SOURCE, QCS$SETUP_TARGET
      265    17312            DESCRIPTION: This routine divides the value specified by the 2nd
      266    17313                            operand by the value specified by the 1st operand
      267    17314                            and places the result in the third operand.  A
      268    17315                            divide by zero check is done prior to the divide.
      269    17316                            If the divisor (1st operand) is equal to zero, no
      270    17317                            divide is attempted. */
      271    17318                                           /**/
      272    17319                                           /**/
      273    17320                                       /* SETUP source */
      274    17321                                           /**/
      275    17322    1       CALL QCS$SETUP_SOURCE;
      276    17323
      277    17324                                           /**/
      278    17325                                       /* SETUP target */
      279    17326                                           /**/
      280    17327    1       CALL QCS$SETUP_TARGET;
      281    17328
      282    17329    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_DIVX.NEXT_CODE@P );
      283    17330    1       QI_1.A_REG = 0;
      284    17331
      285    17332    1       QI_1.OP.CIP.AUX_A (0) = QI_31_DIGIT_ST_PACKED_A (0);
      286    17333    1       QI@OTTER_SPACE = QI_ZERO_ACCUMULATOR;
      287    17334    1       QI_1.OP.DATA.AUX$ = ADDR ( QI@OTTER_SPACE );
      288    17335
      289    17336                                           /**/
      290    17337                                       /* Do the divide.  This is an integer
      291    17338                                          divide; and the CIP has no idea
      292    17339                                          where the decimal place is (nor does
      293    17340                                          it care).  QCC$DDV aligns the target
      294    17341                                          to the accumulator decimal place
      295    17342                                          prior to the divide.  After the
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:11   
      296    17343                                          divide, the result will have a
      297    17344                                          decimal place if 15 (think about it), */
      298    17345                                           /**/
      299    17346    1       CALL QCC$DDV (QI_1.OP)
      300    17347    1       WHENALTRETURN
      301    17348    2         DO;
      302    17349              /* Ohno...divide by zero...panic.  */
      303    17350        /*EH?*IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      304    17351              THEN
      305    17352                DO;
      306    17353                  QI_1.A_REG = 1;
      307    17354                  RETURN;
      308    17355                END;
      309    17356              ELSE*EH?*/
      310    17357    2           CALL QCE$ERROR ( %E$COMMERCIAL_DIVIDE_BY_ZERO );
      311    17358    2         END;
      312    17359
      313    17360                                           /**/
      314    17361                                       /* Now we prepare to move the result
      315    17362                                          to the target field.  */
      316    17363                                           /**/
      317    17364                                           /**/
      318    17365                                       /* Whatever the difference between the
      319    17366                                          decimal place of the 1st operand
      320    17367                                          and the 2nd operand is now important.
      321    17368                                          We will use this difference to
      322    17369                                          determine the logical position of
      323    17370                                          the result's decimal place. */
      324    17371                                           /**/
      325    17372    1       REAL_DECIMAL = QI_1.OP.DEC.T
      326    17373    1         - QI_1.OP.DEC.S + 15;
      327    17374
      328    17375                                           /**/
      329    17376                                       /* Here we prepare to adjust the result
      330    17377                                          to the accumulators decimal place (15). */
      331    17378                                              /**/
      332    17379
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:12   
      333    17380    1       QI_1.OP.CIP.S_A (0) = QI_31_DIGIT_ST_PACKED_A (0);
      334    17381    1       QI_1.OP.DEC.S = REAL_DECIMAL;
      335    17382    1       QI_1.OP.DATA.S$ = ADDR ( QI@OTTER_SPACE );
      336    17383    1       QI_1.OP.CIP.T_A (0) = QI_ACCUMULATOR_DAD.CIP_A (0);
      337    17384    1       QI_1.OP.DEC.T = %QI#ACCUMULATOR_DEC;
      338    17385    1       QI_1.OP.DATA.T$ = ADDR ( QI_1.ACCUM );
      339    17386    1       QI_1.OP.SIZE_ERROR = 1;
      340    17387
      341    17388    1   DIVX_STOMP_ACCUM:
      342    17389
      343    17390    1       CALL QCC$DMC (QI_1.OP)
      344    17391    1       WHENALTRETURN
      345    17392    2         DO;
      346    17393    2           QI_1.A_REG = 1;
      347    17394    2           QI_1.OP.SIZE_ERROR = 0;
      348    17395    2           GOTO DIVX_STOMP_ACCUM;
      349    17396    2         END;
      350    17397
      351    17398    1       RETURN;
      352    17399
      353    17400        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:13   
      354    17401    1   QBX$MULT: ENTRY;
      355    17402                                           /**/
      356    17403        /*D*       NAME: QBX$MULT
      357    17404                PURPOSE: To multiply to numbers together.
      358    17405              INTERFACE: QI1$DML, QCS$SETUP_SOURCE, QCS$SETUP_TARGET
      359    17406            DESCRIPTION: This routine multiplies two values together, and
      360    17407                            places the result in the target.  If alignment
      361    17408                            causes overflow the target remains unchanged
      362    17409                            QI_1.A_REG is set, and the routine returns.  If
      363    17410                            a SIZE_ERROR clause was specified, a test will
      364    17411                            be performed to verify success of the operation.
      365    17412                            If this test fails (results in overflow) the
      366    17413                            QI_1.A_REG is set and the routine returns. */
      367    17414                                           /**/
      368    17415
      369    17416
      370    17417                                           /**/
      371    17418                                       /* Setup source */
      372    17419                                           /**/
      373    17420    1       CALL QCS$SETUP_SOURCE;
      374    17421
      375    17422    1       CALL QCS$SETUP_TARGET;
      376    17423                                           /**/
      377    17424                                       /* Store the result decimal place so
      378    17425                                          the result can be aligned to the
      379    17426                                          target decimal place. */
      380    17427                                           /**/
      381    17428
      382    17429    1       QI_1.OP.DEC.AUX = QI_1.OP.DEC.S + QI_1.OP.DEC.T;
      383    17430
      384    17431    1       QI_1.A_REG = 0;
      385    17432    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MULT.NEXT_CODE@P );
      386    17433
      387    17434                                           /**/
      388    17435                                       /* Align to target and multiply.  If
      389    17436                                          a size error clause exists, do a
      390    17437                                          test operation. */
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:14   
      391    17438                                           /**/
      392    17439    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      393    17440    1       THEN
      394    17441    2         DO;
      395    17442    2           QI_1.OP.SIZE_ERROR = 1;
      396    17443    2         END;
      397    17444    1       ELSE
      398    17445    2         DO;
      399    17446    2           QI_1.OP.SIZE_ERROR = 0;
      400    17447    2         END;
      401    17448
      402    17449    1       CALL QCC$DML (QI_1.OP)
      403    17450    1       WHENALTRETURN
      404    17451    2         DO;
      405    17452    2           QI_1.A_REG = 1;
      406    17453    2         END;
      407    17454
      408    17455    1       RETURN;
      409    17456
      410    17457        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:15   
      411    17458    1   QBX$MULTX: ENTRY;
      412    17459                                           /**/
      413    17460        /*D*       NAME: QBX$MULTX
      414    17461                PURPOSE: To multiply two numbers together and place the result
      415    17462                            in the accumulator.
      416    17463              INTERFACE: QI1$DMC, QI1$DML
      417    17464            DESCRIPTION: The source and target are multiplied together, and
      418    17465                            the accumulator receives the result.  No test
      419    17466                            operation is necessary on the call to QCC$DMC
      420    17467                            (which is used to move the source to the accum).
      421    17468                            A test operation is done on the call to QCC$DML.
      422    17469                            The target (accumulator) is changed as a result
      423    17470                            of the DMC, but will not change as a result of
      424    17471                            the DML if a size error is detected. */
      425    17472                                           /**/
      426    17473
      427    17474                                           /**/
      428    17475                                       /* Setup target in source descriptor. */
      429    17476                                           /**/
      430    17477    1       QI_1.SOURCE$ = ADDR ( QI_1.INSTR$ -> QI$OP_MULTX.NUMERIC_TARGET@P );
      431    17478    1       CALL QCS$SETUP_SOURCE;
      432    17479
      433    17480                                           /**/
      434    17481                                       /* Save the target's decimal place.
      435    17482                                          Multiplies are done at dec place
      436    17483                                          zero to prevent overflow. */
      437    17484                                           /**/
      438    17485    1       SAVE_T_DEC = QI_1.OP.DEC.S;
      439    17486    1       QI_1.OP.DEC.S = 0;
      440    17487    1       QI_1.A_REG = 0;
      441    17488                                           /**/
      442    17489                                           /**/
      443    17490    1       QI_1.OP.CIP.T_A (0) = QI_ACCUMULATOR_DAD.CIP_A (0);
      444    17491    1       QI_1.OP.DEC.T = 0;
      445    17492    1       QI_1.OP.LEN.T = %QI#ACCUMULATOR_LEN;
      446    17493    1       QI_1.OP.DATA.T$ = ADDR ( QI_1.ACCUM );
      447    17494    1       QI_1.OP.SIZE_ERROR = 0;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:16   
      448    17495                                           /**/
      449    17496                                       /* Move target value into accumulator. */
      450    17497                                       /* The target will be in the accumulator
      451    17498                                          at decimal place 0. */
      452    17499                                           /**/
      453    17500    1       CALL QCC$DMC (QI_1.OP);
      454    17501
      455    17502                                           /**/
      456    17503                                       /* Setup source into source descriptor */
      457    17504                                           /**/
      458    17505    1       QI_1.SOURCE$ = ADDR ( QI_1.INSTR$ -> QI$OP_MULTX.NUMERIC_SOURCE@P );
      459    17506    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MULTX.NEXT_CODE@P );
      460    17507    1       CALL QCS$SETUP_SOURCE;
      461    17508                                           /**/
      462    17509    1       QI_1.OP.DEC.AUX = QI_1.OP.DEC.S + SAVE_T_DEC;
      463    17510    1       QI_1.OP.DEC.T = %QI#ACCUMULATOR_DEC;
      464    17511    1       QI_1.OP.SIZE_ERROR = 1;
      465    17512                                           /**/
      466    17513                                       /* Multiply contents of accumulator by
      467    17514                                          source value and place result into
      468    17515                                          the accumulator. */
      469    17516                                           /**/
      470    17517    1   STOMP_ACCUM_MULTX:
      471    17518
      472    17519    1       CALL QCC$DML (QI_1.OP)
      473    17520    1       WHENALTRETURN
      474    17521    2         DO;
      475    17522    2           QI_1.A_REG = 1;
      476    17523    2           QI_1.OP.SIZE_ERROR = 0;
      477    17524    2           GOTO STOMP_ACCUM_MULTX;
      478    17525    2         END;
      479    17526
      480    17527    1       RETURN;
      481    17528
      482    17529        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:17   
      483    17530    1   QBX$SUB: ENTRY;
      484    17531                                           /**/
      485    17532        /*D*     NAME: QBX$SUB
      486    17533              PURPOSE: To subtract two numbers.
      487    17534            INTERFACE: QCC$DSB, QCS$SETUP_SOURCE, QCS$SETUP_TARGET
      488    17535          DESCRIPTION: Add two numbers together and place result into target.
      489    17536                          If alignment results in overflow, QCC$DSB altrets
      490    17537                          without affecting the result.  If a SIZE_ERROR
      491    17538                          clause occured on the instruction, QCC$DSB performs
      492    17539                          a SIZE_ERROR test operation.  Again, the target
      493    17540                          is not changed if the test fails. */
      494    17541                                           /**/
      495    17542
      496    17543                                           /**/
      497    17544                                       /* Setup source */
      498    17545                                           /**/
      499    17546    1       CALL QCS$SETUP_SOURCE;
      500    17547                                           /**/
      501    17548                                       /* Setup target */
      502    17549                                           /**/
      503    17550    1       CALL QCS$SETUP_TARGET;
      504    17551                                           /**/
      505    17552                                       /* Update instruction pointer */
      506    17553                                           /**/
      507    17554    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_SUB.NEXT_CODE@P );
      508    17555    1       QI_1.A_REG = 0;
      509    17556
      510    17557                                           /**/
      511    17558                                       /* Check if size error clause occured
      512    17559                                          on this statement.  If so, do a
      513    17560                                          test operation. */
      514    17561                                           /**/
      515    17562    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      516    17563    1       THEN
      517    17564    2         DO;
      518    17565    2           QI_1.OP.SIZE_ERROR = 1;
      519    17566    2         END;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:18   
      520    17567    1       ELSE
      521    17568    2         DO;
      522    17569    2           QI_1.OP.SIZE_ERROR = 0;
      523    17570    2         END;
      524    17571
      525    17572    1       CALL QCC$DSB (QI_1.OP)
      526    17573    1       WHENALTRETURN
      527    17574    2         DO;
      528    17575    2           QI_1.A_REG = 1;
      529    17576    2         END;
      530    17577
      531    17578    1       RETURN;
      532    17579
      533    17580        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:19   
      534    17581    1   QBX$SUBX: ENTRY;
      535    17582                                           /**/
      536    17583        /*D*     NAME: QBX$SUBX
      537    17584              PURPOSE: To subtract a series of numbers from one number.
      538    17585            INTERFACE: QCC$DAD, QCC$DSB, QCC$DMC, QCS$SETUP_SOURCE
      539    17586          DESCRIPTION: This routine is used to subtract multiple digits from
      540    17587                          the first digit.  The digits are all added prior
      541    17588                          to the subtraction.  Size errors resulting from
      542    17589                          alignment, addition, and subtraction will cause
      543    17590                          the routine to set QI_1.A_REG and return.  The
      544    17591                          target is unchanged if a size error occurs. */
      545    17592                                           /**/
      546    17593
      547    17594    1       QI_1.A_REG = 0;
      548    17595                                           /**/
      549    17596                                       /* Zero the accumulator. */
      550    17597                                           /**/
      551    17598    1       QI_1.ACCUM = QI_ZERO_ACCUMULATOR;
      552    17599
      553    17600    1       LOOP_COUNTER = QI_1.INSTR$ -> QI$OP_SUBX.ARGUMENT_COUNT - 1;
      554    17601    1       QI_1.SOURCE$ = ADDR ( QI_1.INSTR$ -> QI$OP_SUBX.ARGUMENT_A@P (0) );
      555    17602
      556    17603                                           /**/
      557    17604                                       /* Add the values to be subtracted
      558    17605                                          into the accumulator (which has
      559    17606                                          a decimal place of 15). */
      560    17607                                           /**/
      561    17608    1       QI_1.OP.CIP.T_A (0) = QI_31_DIGIT_ST_PACKED_A (0);
      562    17609    1       QI_1.OP.DEC.T = %QI#ACCUMULATOR_DEC;
      563    17610    1       QI_1.OP.LEN.T = %QI#ACCUMULATOR_LEN;
      564    17611    1       QI@OTTER_SPACE = QI_ZERO_ACCUMULATOR;
      565    17612    1       QI_1.OP.DATA.T$ = ADDR ( QI@OTTER_SPACE );
      566    17613    1       QI_1.OP.SIZE_ERROR = 1;
      567    17614
      568    17615                                           /**/
      569    17616                                        /* DOWNTO constructs go to stopping
      570    17617                                           point -1. */
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:20   
      571    17618                                           /**/
      572    17619    1   ADD_OPERANDS:
      573    17620    2       DO I = LOOP_COUNTER DOWNTO 1 BY -1;
      574    17621    2         CALL QCS$SETUP_SOURCE;
      575    17622    2         CALL QCC$DAD ( QI_1.OP )
      576    17623    2         WHENALTRETURN
      577    17624    3           DO;
      578    17625    3             QI_1.SOURCE$ = ADDR ( QI_1.INSTR$ -> QI$OP_SUBX.ARGUMENT_A@P (
             17625                      LOOP_COUNTER - 1 ) );
      579    17626    3             EXIT ADD_OPERANDS;
      580    17627    3           END;
      581    17628
      582    17629    2       END ADD_OPERANDS;
      583    17630
      584    17631                                           /**/
      585    17632                                       /* SETUP from field. */
      586    17633                                           /**/
      587    17634    1       CALL QCS$SETUP_SOURCE;
      588    17635
      589    17636
      590    17637    1       QI_1.OP.CIP.T_A (0) = QI_ACCUMULATOR_DAD.CIP_A (0);
      591    17638    1       QI_1.OP.DEC.T = %QI#ACCUMULATOR_DEC;
      592    17639    1       QI_1.OP.LEN.T = %QI#ACCUMULATOR_LEN;
      593    17640    1       QI_1.OP.DATA.T$ = ADDR ( QI_1.ACCUM );
      594    17641    1       QI_1.OP.SIZE_ERROR = 0;
      595    17642
      596    17643    1       CALL QCC$DMC (QI_1.OP);
      597    17644
      598    17645    1       QI_1.OP.CIP.S_A (0) = QI_31_DIGIT_ST_PACKED_A (0);
      599    17646    1       QI_1.OP.DEC.S = %QI#ACCUMULATOR_DEC;
      600    17647    1       QI_1.OP.LEN.S = %QI#ACCUMULATOR_LEN;
      601    17648    1       QI_1.OP.DATA.S$ = ADDR ( QI@OTTER_SPACE );
      602    17649    1       QI_1.OP.LEN.T = %QI#ACCUMULATOR_LEN;
      603    17650    1       QI_1.OP.SIZE_ERROR = 1;
      604    17651
      605    17652    1   SUBX_STOMP_ACCUM:
      606    17653
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:21   
      607    17654    1       CALL QCC$DSB (QI_1.OP)
      608    17655    1       WHENALTRETURN
      609    17656    2         DO;
      610    17657    2           QI_1.A_REG = 1;
      611    17658    2           QI_1.OP.SIZE_ERROR = 0;
      612    17659    2           GOTO SUBX_STOMP_ACCUM;
      613    17660    2         END;
      614    17661
      615    17662    1       QI_1.INSTR$ = PINCRW ( QI_1.INSTR$, LOOP_COUNTER + 3 );
      616    17663
      617    17664    1       RETURN;
      618    17665
      619    17666        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:22   
      620    17667    1   QBX$ROUND: ENTRY;
      621    17668                                           /**/
      622    17669        /*D*    NAME: QBX$ROUND
      623    17670             PURPOSE: To round off values in the accumulator.
      624    17671           INTERFACE: None
      625    17672         DESCRIPTION: This module handles the rounding operations encountered
      626    17673                        during specific arithmetic operations.  If the number
      627    17674                        of shift positions exceeds 15, the rounding operation
      628    17675                        will not take place.  If the number of positions is
      629    17676                        less than or equal to 15, the value in the accumulator
      630    17677                        is shifted right and rounded, then shifted left.
      631    17678                                           */
      632    17679                                           /**/
      633    17680    1       DECIMAL_PLACES = QI_1.INSTR$ -> QI$OP_ROUND.DECIMAL_PLACES;
      634    17681    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_ROUND.NEXT_CODE@P );
      635    17682
      636    17683    1       SHIFT_POSITIONS = 15 - DECIMAL_PLACES;
      637    17684
      638    17685    1       IF SHIFT_POSITIONS > 0
      639    17686    1       THEN
      640    17687    2         DO;
      641    17688    2           QI_1.OP.CIP.S = QI_ACCUMULATOR_DAD.CIP;
      642    17689    2           QI_1.OP.DATA.S$ = ADDR ( QI_1.ACCUM );
      643    17690    2           QI_1.OP.SHIFT_COUNT.S = SHIFT_POSITIONS;
      644    17691    2           QI_1.OP.ROUND = 1;
      645    17692    2           CALL QCC$DRS (QI_1.OP);
      646    17693
      647    17694    2           CALL QCC$DLS (QI_1.OP)
      648    17695    2           WHENALTRETURN
      649    17696    3             DO;
      650    17697    3               QI_1.A_REG = 1;
      651    17698    3             END;
      652    17699
      653    17700    2         END;
      654    17701
      655    17702    1       RETURN;
      656    17703
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:23   
      657    17704    1   END QBX$ARITHMETICS;

PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:24   
--  Include file information  --

   QI_MACROS_M.:E05TOU  is referenced.
   QI_PERR_C.:E05TOU  is referenced.
   QI_EQUATES_E.:E05TOU  is referenced.
   QG_MACRO_M.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure QBX$ARITHMETICS.

   Procedure QBX$ARITHMETICS requires 941 words for executable code.
   Procedure QBX$ARITHMETICS requires 20 words of local(AUTO) storage.

    No errors detected in file QBX$ARITHMETICS.:E05TSI    .

PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:25   

 Object Unit name= QBX$ARITHMETICS                            File name= QBX$ARITHMETICS.:E05TOU
 UTS= JUL 30 '97 05:00:59.64 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Proc  even  none   941    3AD  QBX$ARITHMETICS
    1  RoData even  none     5      5  QBX$ARITHMETICS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        0  QBX$ARITHMETICS
     0      7                  yes      Std        0  QBX$ADD
     0     42                  yes      Std        0  QBX$ADDX
     0     AA                  yes      Std        0  QBX$DIV
     0    124                  yes      Std        0  QBX$DIVX
     0    1A8                  yes      Std        0  QBX$MULT
     0    1EC                  yes      Std        0  QBX$MULTX
     0    262                  yes      Std        0  QBX$SUB
     0    29D                  yes      Std        0  QBX$SUBX
     0    366                  yes      Std        0  QBX$ROUND
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:26   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 QCS$SETUP_SOURCE
 yes     yes           Std       1 QCC$DLS
         yes           Std       0 QCS$SETUP_TARGET
 yes     yes           Std       1 QCC$DAD
 yes     yes           Std       1 QCC$DDV
         yes           Std       4 QCE$ERROR
 yes     yes           Std       1 QCC$DMC
 yes     yes           Std       1 QCC$DSB
 yes     yes           Std       1 QCC$DML
 yes     yes           Std       1 QCC$DRS
                       nStd      0 X6A_AUTO_0
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     QI_1                                  QI_ZERO_ACCUMULATOR                   QI_4_CHAR_ALPHANUMERIC
     QI_31_DIGIT_SLS_DISPLAY               QI_16_BIT_BINARY                      QI_32_BIT_BINARY
     QI_31_DIGIT_ST_PACKED                 QI_PICTURE_STRING                     QI_ACCUMULATOR_DAD
r    G$ROS$
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:27   


        1        1        /*M* QBX$ARITHMETICS:  ADD, SUBTRACT, MULTIPLY, DIVIDE and ROUND.  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=0,DCI=4,CSI=2,IAD=2,DTI=2,AND,ECI=0,DIN=2,STI=2 */
        8        8
        9        9        /*D*       NAME: QBX$ARITHMETICS
       10       10                PURPOSE: To provide a common module for all arithmetic routines
       11       11                ENTRIES: QBX$ADD, QBX$ADDX, QBX$DIV, QBX$DIVX, QBX$MULT,
       12       12                         QBX$MULTX, QBX$SUB, QBX$SUBX, QBX$ROUND.
       13       13                                                    */
       14       14
       15       15        QBX$ARITHMETICS: PROC;

     15   0 000000  D380 0000 0000  xent QBX$ARITHMETICS LNJ,B5   X6A_AUTO_0
          0 000003       0014 0000                       DC       20,0
          0 000005  0F81 0006                            B        s:17108,PREL

       16       16
       17       17          %INCLUDE LCP_6;
       18      208
       19      209          %INCLUDE QG_MACRO_M;
       20      346          %INCLUDE QI_EQUATES_E;
       21      705        %INCLUDE QI_PERR_C;
       22      873        %INCLUDE QI_MACROS_M;
       23     5931        %QI$ALL;
       24    17044
       25    17045    1     DCL QCS$SETUP_SOURCE ENTRY;
       26    17046    1     DCL QCS$SETUP_TARGET ENTRY;
       27    17047    1     DCL QCC$DAD ENTRY(1) ALTRET;
       28    17048    1     DCL QCC$DSB ENTRY(1) ALTRET;
       29    17049    1     DCL QCC$DDV ENTRY(1) ALTRET;
       30    17050    1     DCL QCC$DML ENTRY(1) ALTRET;
       31    17051    1     DCL QCC$DMC ENTRY (1) ALTRET;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:28   
       32    17052    1     DCL QCC$DRS ENTRY (1) ALTRET;
       33    17053    1     DCL QCC$DLS ENTRY (1) ALTRET;
       34    17054
       35    17055    1     DCL SAVE_S_DEC SBIN;
       36    17056    1     DCL SAVE_T_DEC SBIN;
       37    17057    1     DCL I SBIN;
       38    17058    1     DCL LOOP_COUNTER SBIN;
       39    17059    1     DCL REAL_DECIMAL UBIN;
       40    17060    1     DCL DECIMAL_PLACES SBIN;
       41    17061    1     DCL SHIFT_POSITIONS SBIN;
       42    17062
       43    17063    1     DCL QCE$ERROR ENTRY(4);
       44    17064
       45    17065          %QI@OTTER_SPACE;
       46    17093
       47    17094        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:29   
       48    17095    1   QBX$ADD: ENTRY;

  17095   0 000007  D380 0000 0000  xent QBX$ADD         LNJ,B5   X6A_AUTO_0
          0 00000A       0014 0000                       DC       20,0

       49    17096                                           /**/
       50    17097        /*D*       NAME: QBX$ADD
       51    17098                PURPOSE: To add two numbers together
       52    17099              INTERFACE: QCC$DAD, QCS$SETUP_SOURCE, QCS$SETUP_TARGET
       53    17100            DESCRIPTION: Adds two numbers together.  If a SIZE_ERROR clause
       54    17101                            was specified, an overflow test operation is
       55    17102                            performed.  The target remains unchanged if the
       56    17103                            test fails.  In addition, the operation is not
       57    17104                            performed if overflow occurs during alignment. */
       58    17105                                           /**/
       59    17106
       60    17107
       61    17108    1       CALL QCS$SETUP_SOURCE;

  17108   0 00000C  CBF0 0000                            LAB,B4   0,IMO
          0 00000E  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 000011       0001                            DC       s:17110,PREL

       62    17109
       63    17110    1       CALL QCS$SETUP_TARGET;

  17110   0 000012  CBF0 0000                            LAB,B4   0,IMO
          0 000014  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 000017       0001                            DC       s:17115,PREL

       64    17111
       65    17112                                           /**/
       66    17113                                       /* Update the instruction pointer. */
       67    17114                                           /**/
       68    17115    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_ADD.NEXT_CODE@P );

  17115   0 000018  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:30   
          0 00001B  DBC6 0003                            LAB,B5   3,B6
          0 00001D  DF80 0000 0006  xsym                 STB,B5   QI_1+6

       69    17116
       70    17117    1       QI_1.A_REG = 0;

  17117   0 000020  8700 0000 0054  xsym                 CL       QI_1+84

       71    17118                                           /**/
       72    17119                                           /**/
       73    17120                                       /* Was SIZE_ERROR specified? If so,
       74    17121                                          do test operation */
       75    17122                                           /**/
       76    17123    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ

  17123   0 000023  E805                                 LDR,R6   ,B5
          0 000024  6D5B                                 CMV,R6   91
          0 000025  0981 0007                            BNE      s:17130,PREL

       77    17124    1       THEN
       78    17125    2         DO;

       79    17126    2           QI_1.OP.SIZE_ERROR = 1;

  17126   0 000027  5C01                                 LDV,R5   1
          0 000028  DF00 0000 0030  xsym                 STR,R5   QI_1+48

       80    17127    2         END;

  17127   0 00002B  0F81 0004                            B        s:17133,PREL

       81    17128    1       ELSE
       82    17129    2         DO;

       83    17130    2           QI_1.OP.SIZE_ERROR = 0;

  17130   0 00002D  8700 0000 0030  xsym                 CL       QI_1+48
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:31   

       84    17131    2         END;

       85    17132
       86    17133    1       CALL QCC$DAD (QI_1.OP)

  17133   0 000030  BB80 0000 0000  01                   LAB,B3   0
          0 000033  CBF0 0100                            LAB,B4   256,IMO
          0 000035  E380 0000 0000  xent                 LNJ,B6   QCC$DAD
          0 000038       0003                            DC       s:17136,PREL
          0 000039  0F81 0005                            B        s:17139,PREL

       87    17134    1       WHENALTRETURN
       88    17135    2         DO;

       89    17136    2           QI_1.A_REG = 1;

  17136   0 00003B  6C01                                 LDV,R6   1
          0 00003C  EF00 0000 0054  xsym                 STR,R6   QI_1+84

       90    17137    2         END;

       91    17138
       92    17139    1       RETURN;

  17139   0 00003F  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

       93    17140
       94    17141        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:32   
       95    17142    1   QBX$ADDX: ENTRY;

  17142   0 000042  D380 0000 0000  xent QBX$ADDX        LNJ,B5   X6A_AUTO_0
          0 000045       0014 0000                       DC       20,0

       96    17143                                           /**/
       97    17144        /*D*       NAME: QBX$ADDX
       98    17145                PURPOSE: To add a series of numbers together
       99    17146              INTERFACE: QCC$DMC, QCC$DAD, QCS$SETUP_SOURCE, QCS$SETUP_TARGET
      100    17147            DESCRIPTION: QI1$ADDX adds a series of numbers to the accumulator.
      101    17148                            If a SIZE_ERROR is detected during alignment or
      102    17149                            after an add (accumulator overflow), A_REG is set
      103    17150                            and we return.  */
      104    17151                                           /**/
      105    17152
      106    17153
      107    17154
      108    17155    1       QI_1.A_REG = 0;

  17155   0 000047  8700 0000 0054  xsym                 CL       QI_1+84

      109    17156
      110    17157
      111    17158                                        /* Clear the accumulator */
      112    17159    1       QI_1.ACCUM = QI_ZERO_ACCUMULATOR;

  17159   0 00004A  AB80 0000 0000  xsym                 LAB,B2   QI_ZERO_ACCUMULATOR
          0 00004D  2C00                                 LDV,R2   0
          0 00004E  6C10                                 LDV,R6   16
          0 00004F  BB80 0000 0057  xsym                 LAB,B3   QI_1+87
          0 000052  3C00                                 LDV,R3   0
          0 000053  0008                                 MMM

      113    17160
      114    17161                                           /* Get count of number of items
      115    17162                                              from code sequence. */
      116    17163    1       LOOP_COUNTER = QI_1.INSTR$ -> QI$OP_ADDX.ARGUMENT_COUNT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:33   

  17163   0 000054  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 000057  E846 0001                            LDR,R6   1,B6
          0 000059  EF47 0007                            STR,R6   LOOP_COUNTER,AUTO

      117    17164                                           /* Go on to next item. */
      118    17165    1       QI_1.SOURCE$ = ADDR ( QI_1.INSTR$ -> QI$OP_ADDX.ARGUMENT_A@P (0) );

  17165   0 00005B  DBC6 0002                            LAB,B5   2,B6
          0 00005D  DF80 0000 0018  xsym                 STB,B5   QI_1+24

      119    17166                                          /* Update the instruction pointer. */
      120    17167    1       QI_1.INSTR$ = PINCRW (QI_1.INSTR$, LOOP_COUNTER + 2 );

  17167   0 000060  70F0                                 DAR,R7   16
          0 000061  8400 0000 0006  xsym                 AID      QI_1+6
          0 000064  8470 0000 0002                       AID      2,IMO
          0 000067  8D00 0000 0006  xsym                 SDI      QI_1+6

      121    17168
      122    17169    1       QI_1.OP.CIP.T_A (0) = QI_ACCUMULATOR_DAD.CIP_A (0);

  17169   0 00006A  D800 0000 0002  xsym                 LDR,R5   QI_ACCUMULATOR_DAD+2
          0 00006D  DF00 0000 001C  xsym                 STR,R5   QI_1+28

      123    17170                                           /**/
      124    17171                                           /* Pass 15 as the accumulators
      125    17172                                              decimal place */
      126    17173                                           /**/
      127    17174    1       QI_1.OP.DEC.T = %QI#ACCUMULATOR_DEC;

  17174   0 000070  4C0F                                 LDV,R4   15
          0 000071  CF00 0000 002A  xsym                 STR,R4   QI_1+42

      128    17175    1       QI_1.OP.LEN.T = %QI#ACCUMULATOR_LEN;

  17175   0 000074  3C1F                                 LDV,R3   31
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:34   
          0 000075  BF00 0000 0027  xsym                 STR,R3   QI_1+39

      129    17176    1       QI_1.OP.DATA.T$ = ADDR ( QI_1.ACCUM );

  17176   0 000078  EB80 0000 0057  xsym                 LAB,B6   QI_1+87
          0 00007B  EF80 0000 0022  xsym                 STB,B6   QI_1+34

      130    17177    1       QI_1.OP.SIZE_ERROR = 1;

  17177   0 00007E  2C01                                 LDV,R2   1
          0 00007F  AF00 0000 0030  xsym                 STR,R2   QI_1+48

      131    17178
      132    17179                                              /**/
      133    17180                                           /* DOWNTO constructs go to stopping
      134    17181                                              point -1. */
      135    17182                                              /**/
      136    17183
      137    17184    2       DO I = LOOP_COUNTER DOWNTO 1 BY -1;

  17184   0 000082  9847 0007                            LDR,R1   LOOP_COUNTER,AUTO
          0 000084  9F47 0006                            STR,R1   I,AUTO
          0 000086  0F81 001C                            B        s:17196+2,PREL

      138    17185    2         CALL QCS$SETUP_SOURCE;

  17185   0 000088  CBF0 0000                            LAB,B4   0,IMO
          0 00008A  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 00008D       0001                            DC       s:17188,PREL

      139    17186
      140    17187    2   ADDX_STOMP_ACCUM:
      141    17188    2         CALL QCC$DAD (QI_1.OP)

  17188   0 00008E  BB80 0000 0000  01   ADDX_STOMP_ACCUMLAB,B3   0
          0 000091  CBF0 0100                            LAB,B4   256,IMO
          0 000093  E380 0000 0000  xent                 LNJ,B6   QCC$DAD
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:35   
          0 000096       0003                            DC       s:17191,PREL
          0 000097  0F81 0009                            B        s:17196,PREL

      142    17189    2         WHENALTRETURN
      143    17190    3           DO;

      144    17191    3             QI_1.A_REG = 1;

  17191   0 000099  6C01                                 LDV,R6   1
          0 00009A  EF00 0000 0054  xsym                 STR,R6   QI_1+84

      145    17192    3             QI_1.OP.SIZE_ERROR = 0;

  17192   0 00009D  8700 0000 0030  xsym                 CL       QI_1+48

      146    17193    3             GOTO ADDX_STOMP_ACCUM;

  17193   0 0000A0  0FEE                                 B        s:17188,SPREL

      147    17194    3           END;
      148    17195
      149    17196    2       END;

  17196   0 0000A1  88C7 0006                            DEC      I,AUTO
          0 0000A3  E847 0006                            LDR,R6   I,AUTO
          0 0000A5  6D01                                 CMV,R6   1
          0 0000A6  08E2                                 BAGE     s:17185,SPREL

      150    17197
      151    17198    1       RETURN;

  17198   0 0000A7  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      152    17199
      153    17200        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:36   
      154    17201    1   QBX$DIV: ENTRY;

  17201   0 0000AA  D380 0000 0000  xent QBX$DIV         LNJ,B5   X6A_AUTO_0
          0 0000AD       0014 0000                       DC       20,0

      155    17202                                           /**/
      156    17203        /*D*       NAME: QBX$DIV
      157    17204                PURPOSE: To divide two numbers and place the result into the
      158    17205        QBX$DIVX:  ENTRY;
      159    17206              INTERFACE: QCC$DCM, QCC$DDV, QCS$SETUP_SOURCE, QCS$SETUP_TARGET
      160    17207            DESCRIPTION: This routine divides the value specified by the 2nd
      161    17208                            operand by the value specified by the 1st operand
      162    17209                            and places the result in the third operand.  A
      163    17210                            divide by zero check is done prior to the divide.
      164    17211                            If the divisor (1st operand) is equal to zero, no
      165    17212                            divide is attempted.  A size error clause results
      166    17213                            in a test divide. If the test fails, the target
      167    17214                            remains unchanged. */
      168    17215                                           /**/
      169    17216
      170    17217                                           /**/
      171    17218                                       /* SETUP source. */
      172    17219                                           /**/
      173    17220    1       CALL QCS$SETUP_SOURCE;

  17220   0 0000AF  CBF0 0000                            LAB,B4   0,IMO
          0 0000B1  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 0000B4       0001                            DC       s:17225,PREL

      174    17221
      175    17222                                           /**/
      176    17223                                       /* SETUP target. */
      177    17224                                           /**/
      178    17225    1       CALL QCS$SETUP_TARGET;

  17225   0 0000B5  CBF0 0000                            LAB,B4   0,IMO
          0 0000B7  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:37   
          0 0000BA       0001                            DC       s:17229,PREL

      179    17226                                           /**/
      180    17227                                       /* Update instruction pointer. */
      181    17228                                           /**/
      182    17229    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_DIV.NEXT_CODE@P );

  17229   0 0000BB  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 0000BE  DBC6 0003                            LAB,B5   3,B6
          0 0000C0  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      183    17230    1       QI_1.A_REG = 0;

  17230   0 0000C3  8700 0000 0054  xsym                 CL       QI_1+84

      184    17231
      185    17232    1       QI_1.OP.CIP.AUX_A (0) = QI_ACCUMULATOR_DAD.CIP_A (0);

  17232   0 0000C6  E800 0000 0002  xsym                 LDR,R6   QI_ACCUMULATOR_DAD+2
          0 0000C9  EF00 0000 001E  xsym                 STR,R6   QI_1+30

      186    17233    1       QI_1.OP.DEC.AUX = %QI#ACCUMULATOR_DEC;

  17233   0 0000CC  5C0F                                 LDV,R5   15
          0 0000CD  DF00 0000 002B  xsym                 STR,R5   QI_1+43

      187    17234    1       QI_1.OP.DATA.AUX$ = ADDR ( QI_1.ACCUM );

  17234   0 0000D0  EB80 0000 0057  xsym                 LAB,B6   QI_1+87
          0 0000D3  EF80 0000 0024  xsym                 STB,B6   QI_1+36

      188    17235                                           /**/
      189    17236                                       /* 3rd oper = (2nd oper / 1st oper).
      190    17237                                          The second oper is aligned to the
      191    17238                                          the accumulator prior to the divide.
      192    17239                                          The result will be at decimal place
      193    17240                                          15 in the accumulator. */
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:38   
      194    17241                                           /**/
      195    17242    1       CALL QCC$DDV (QI_1.OP)

  17242   0 0000D6  BB80 0000 0000  01                   LAB,B3   0
          0 0000D9  CBF0 0100                            LAB,B4   256,IMO
          0 0000DB  E380 0000 0000  xent                 LNJ,B6   QCC$DDV
          0 0000DE       0003                            DC       s:17253,PREL
          0 0000DF  0F81 000A                            B        s:17266,PREL

      196    17243    1       WHENALTRETURN
      197    17244    2         DO;

      198    17245              /* Ohno...divide by zero...panic.  */
      199    17246        /*EH?*IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      200    17247              THEN
      201    17248                DO;
      202    17249                  QI_1.A_REG = 1;
      203    17250                  RETURN;
      204    17251                END;
      205    17252              ELSE*EH?*/
      206    17253    2           CALL QCE$ERROR ( %E$COMMERCIAL_DIVIDE_BY_ZERO );

  17253   0 0000E1  BB80 0000 0003  01                   LAB,B3   +3
          0 0000E4  CBF0 0100                            LAB,B4   256,IMO
          0 0000E6  E380 0000 0000  xent                 LNJ,B6   QCE$ERROR
          0 0000E9       0001                            DC       s:17266,PREL

      207    17254    2         END;

      208    17255                                           /**/
      209    17256                                       /* Now we set up the source descriptor
      210    17257                                          in the interpreter data to make the
      211    17258                                          accumulator the source field. The
      212    17259                                          reason being, so we can move the
      213    17260                                          accumulator to the target. */
      214    17261                                           /**/
      215    17262                                       /* The result in the accumulator is at
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:39   
      216    17263                                          decimal place 15.  Now get the real
      217    17264                                          decimal place of the result. */
      218    17265                                           /**/
      219    17266    1       REAL_DECIMAL = QI_1.OP.DEC.T

  17266   0 0000EA  E800 0000 002A  xsym                 LDR,R6   QI_1+42
          0 0000ED  E200 0000 0029  xsym                 SUB,R6   QI_1+41
          0 0000F0  6E0F                                 ADV,R6   15
          0 0000F1  EF47 0008                            STR,R6   REAL_DECIMAL,AUTO

      220    17267    1         - QI_1.OP.DEC.S + 15;
      221    17268
      222    17269    1       QI_1.OP.CIP.S_A (0) = QI_ACCUMULATOR_DAD.CIP_A (0);

  17269   0 0000F3  D800 0000 0002  xsym                 LDR,R5   QI_ACCUMULATOR_DAD+2
          0 0000F6  DF00 0000 001A  xsym                 STR,R5   QI_1+26

      223    17270    1       QI_1.OP.DEC.S = REAL_DECIMAL;

  17270   0 0000F9  EF00 0000 0029  xsym                 STR,R6   QI_1+41

      224    17271    1       QI_1.OP.DATA.S$ = ADDR ( QI_1.ACCUM );

  17271   0 0000FC  EB80 0000 0057  xsym                 LAB,B6   QI_1+87
          0 0000FF  EF80 0000 0020  xsym                 STB,B6   QI_1+32

      225    17272                                              /**/
      226    17273                                              /**/
      227    17274                                           /**/
      228    17275                                       /* Align the result in the accumulator
      229    17276                                          using the real decimal place
      230    17277                                          (which is at 15 + n) to the
      231    17278                                          target and move the result.  If a
      232    17279                                          size error clause was specified, do
      233    17280                                          a test operation. */
      234    17281                                           /**/
      235    17282                                           /**/
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:40   
      236    17283                                       /* If a size_error clause was specified,
      237    17284                                          we must do a trial move */
      238    17285                                           /**/
      239    17286    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ

  17286   0 000102  DC80 0000 0006  xsym                 LDB,B5   QI_1+6
          0 000105  C805                                 LDR,R4   ,B5
          0 000106  4D5B                                 CMV,R4   91
          0 000107  0981 0007                            BNE      s:17294,PREL

      240    17287    1       THEN
      241    17288    2         DO;

      242    17289    2           QI_1.OP.SIZE_ERROR = 1;

  17289   0 000109  3C01                                 LDV,R3   1
          0 00010A  BF00 0000 0030  xsym                 STR,R3   QI_1+48

      243    17290    2         END;

  17290   0 00010D  0F81 0004                            B        s:17297,PREL

      244    17291    1       ELSE
      245    17292    2         DO;

      246    17293
      247    17294    2           QI_1.OP.SIZE_ERROR = 0;

  17294   0 00010F  8700 0000 0030  xsym                 CL       QI_1+48

      248    17295    2         END;

      249    17296
      250    17297    1       CALL QCC$DMC (QI_1.OP)

  17297   0 000112  BB80 0000 0000  01                   LAB,B3   0
          0 000115  CBF0 0100                            LAB,B4   256,IMO
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:41   
          0 000117  E380 0000 0000  xent                 LNJ,B6   QCC$DMC
          0 00011A       0003                            DC       s:17300,PREL
          0 00011B  0F81 0005                            B        s:17303,PREL

      251    17298    1       WHENALTRETURN
      252    17299    2         DO;

      253    17300    2           QI_1.A_REG = 1;

  17300   0 00011D  6C01                                 LDV,R6   1
          0 00011E  EF00 0000 0054  xsym                 STR,R6   QI_1+84

      254    17301    2         END;

      255    17302
      256    17303    1       RETURN;

  17303   0 000121  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      257    17304
      258    17305        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:42   
      259    17306    1   QBX$DIVX: ENTRY;

  17306   0 000124  D380 0000 0000  xent QBX$DIVX        LNJ,B5   X6A_AUTO_0
          0 000127       0014 0000                       DC       20,0

      260    17307                                           /**/
      261    17308        /*D*       NAME: QBX$DIVX
      262    17309                PURPOSE: To divide two numbers and place the result into the
      263    17310                            accumulator.
      264    17311              INTERFACE: QCC$DMC, QCC$DDV, QCS$SETUP_SOURCE, QCS$SETUP_TARGET
      265    17312            DESCRIPTION: This routine divides the value specified by the 2nd
      266    17313                            operand by the value specified by the 1st operand
      267    17314                            and places the result in the third operand.  A
      268    17315                            divide by zero check is done prior to the divide.
      269    17316                            If the divisor (1st operand) is equal to zero, no
      270    17317                            divide is attempted. */
      271    17318                                           /**/
      272    17319                                           /**/
      273    17320                                       /* SETUP source */
      274    17321                                           /**/
      275    17322    1       CALL QCS$SETUP_SOURCE;

  17322   0 000129  CBF0 0000                            LAB,B4   0,IMO
          0 00012B  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 00012E       0001                            DC       s:17327,PREL

      276    17323
      277    17324                                           /**/
      278    17325                                       /* SETUP target */
      279    17326                                           /**/
      280    17327    1       CALL QCS$SETUP_TARGET;

  17327   0 00012F  CBF0 0000                            LAB,B4   0,IMO
          0 000131  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 000134       0001                            DC       s:17329,PREL

      281    17328
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:43   
      282    17329    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_DIVX.NEXT_CODE@P );

  17329   0 000135  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 000138  DBC6 0003                            LAB,B5   3,B6
          0 00013A  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      283    17330    1       QI_1.A_REG = 0;

  17330   0 00013D  8700 0000 0054  xsym                 CL       QI_1+84

      284    17331
      285    17332    1       QI_1.OP.CIP.AUX_A (0) = QI_31_DIGIT_ST_PACKED_A (0);

  17332   0 000140  E800 0000 0000  xsym                 LDR,R6   QI_31_DIGIT_ST_PACKED
          0 000143  EF00 0000 001E  xsym                 STR,R6   QI_1+30

      286    17333    1       QI@OTTER_SPACE = QI_ZERO_ACCUMULATOR;

  17333   0 000146  AB80 0000 0000  xsym                 LAB,B2   QI_ZERO_ACCUMULATOR
          0 000149  2C00                                 LDV,R2   0
          0 00014A  6C10                                 LDV,R6   16
          0 00014B  BB87                                 LAB,B3   ,AUTO
          0 00014C  3C16                                 LDV,R3   22
          0 00014D  0008                                 MMM

      287    17334    1       QI_1.OP.DATA.AUX$ = ADDR ( QI@OTTER_SPACE );

  17334   0 00014E  EBC7 000B                            LAB,B6   QI@OTTER_SPACE,AUTO
          0 000150  EF80 0000 0024  xsym                 STB,B6   QI_1+36

      288    17335
      289    17336                                           /**/
      290    17337                                       /* Do the divide.  This is an integer
      291    17338                                          divide; and the CIP has no idea
      292    17339                                          where the decimal place is (nor does
      293    17340                                          it care).  QCC$DDV aligns the target
      294    17341                                          to the accumulator decimal place
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:44   
      295    17342                                          prior to the divide.  After the
      296    17343                                          divide, the result will have a
      297    17344                                          decimal place if 15 (think about it), */
      298    17345                                           /**/
      299    17346    1       CALL QCC$DDV (QI_1.OP)

  17346   0 000153  BB80 0000 0000  01                   LAB,B3   0
          0 000156  CBF0 0100                            LAB,B4   256,IMO
          0 000158  E380 0000 0000  xent                 LNJ,B6   QCC$DDV
          0 00015B       0003                            DC       s:17357,PREL
          0 00015C  0F81 000A                            B        s:17372,PREL

      300    17347    1       WHENALTRETURN
      301    17348    2         DO;

      302    17349              /* Ohno...divide by zero...panic.  */
      303    17350        /*EH?*IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      304    17351              THEN
      305    17352                DO;
      306    17353                  QI_1.A_REG = 1;
      307    17354                  RETURN;
      308    17355                END;
      309    17356              ELSE*EH?*/
      310    17357    2           CALL QCE$ERROR ( %E$COMMERCIAL_DIVIDE_BY_ZERO );

  17357   0 00015E  BB80 0000 0003  01                   LAB,B3   +3
          0 000161  CBF0 0100                            LAB,B4   256,IMO
          0 000163  E380 0000 0000  xent                 LNJ,B6   QCE$ERROR
          0 000166       0001                            DC       s:17372,PREL

      311    17358    2         END;

      312    17359
      313    17360                                           /**/
      314    17361                                       /* Now we prepare to move the result
      315    17362                                          to the target field.  */
      316    17363                                           /**/
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:45   
      317    17364                                           /**/
      318    17365                                       /* Whatever the difference between the
      319    17366                                          decimal place of the 1st operand
      320    17367                                          and the 2nd operand is now important.
      321    17368                                          We will use this difference to
      322    17369                                          determine the logical position of
      323    17370                                          the result's decimal place. */
      324    17371                                           /**/
      325    17372    1       REAL_DECIMAL = QI_1.OP.DEC.T

  17372   0 000167  E800 0000 002A  xsym                 LDR,R6   QI_1+42
          0 00016A  E200 0000 0029  xsym                 SUB,R6   QI_1+41
          0 00016D  6E0F                                 ADV,R6   15
          0 00016E  EF47 0008                            STR,R6   REAL_DECIMAL,AUTO

      326    17373    1         - QI_1.OP.DEC.S + 15;
      327    17374
      328    17375                                           /**/
      329    17376                                       /* Here we prepare to adjust the result
      330    17377                                          to the accumulators decimal place (15). */
      331    17378                                              /**/
      332    17379
      333    17380    1       QI_1.OP.CIP.S_A (0) = QI_31_DIGIT_ST_PACKED_A (0);

  17380   0 000170  D800 0000 0000  xsym                 LDR,R5   QI_31_DIGIT_ST_PACKED
          0 000173  DF00 0000 001A  xsym                 STR,R5   QI_1+26

      334    17381    1       QI_1.OP.DEC.S = REAL_DECIMAL;

  17381   0 000176  EF00 0000 0029  xsym                 STR,R6   QI_1+41

      335    17382    1       QI_1.OP.DATA.S$ = ADDR ( QI@OTTER_SPACE );

  17382   0 000179  EBC7 000B                            LAB,B6   QI@OTTER_SPACE,AUTO
          0 00017B  EF80 0000 0020  xsym                 STB,B6   QI_1+32

      336    17383    1       QI_1.OP.CIP.T_A (0) = QI_ACCUMULATOR_DAD.CIP_A (0);
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:46   

  17383   0 00017E  C800 0000 0002  xsym                 LDR,R4   QI_ACCUMULATOR_DAD+2
          0 000181  CF00 0000 001C  xsym                 STR,R4   QI_1+28

      337    17384    1       QI_1.OP.DEC.T = %QI#ACCUMULATOR_DEC;

  17384   0 000184  3C0F                                 LDV,R3   15
          0 000185  BF00 0000 002A  xsym                 STR,R3   QI_1+42

      338    17385    1       QI_1.OP.DATA.T$ = ADDR ( QI_1.ACCUM );

  17385   0 000188  DB80 0000 0057  xsym                 LAB,B5   QI_1+87
          0 00018B  DF80 0000 0022  xsym                 STB,B5   QI_1+34

      339    17386    1       QI_1.OP.SIZE_ERROR = 1;

  17386   0 00018E  2C01                                 LDV,R2   1
          0 00018F  AF00 0000 0030  xsym                 STR,R2   QI_1+48

      340    17387
      341    17388    1   DIVX_STOMP_ACCUM:
      342    17389
      343    17390    1       CALL QCC$DMC (QI_1.OP)

  17390   0 000192  BB80 0000 0000  01   DIVX_STOMP_ACCUMLAB,B3   0
          0 000195  CBF0 0100                            LAB,B4   256,IMO
          0 000197  E380 0000 0000  xent                 LNJ,B6   QCC$DMC
          0 00019A       0003                            DC       s:17393,PREL
          0 00019B  0F81 0009                            B        s:17398,PREL

      344    17391    1       WHENALTRETURN
      345    17392    2         DO;

      346    17393    2           QI_1.A_REG = 1;

  17393   0 00019D  6C01                                 LDV,R6   1
          0 00019E  EF00 0000 0054  xsym                 STR,R6   QI_1+84
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:47   

      347    17394    2           QI_1.OP.SIZE_ERROR = 0;

  17394   0 0001A1  8700 0000 0030  xsym                 CL       QI_1+48

      348    17395    2           GOTO DIVX_STOMP_ACCUM;

  17395   0 0001A4  0FEE                                 B        s:17390,SPREL

      349    17396    2         END;
      350    17397
      351    17398    1       RETURN;

  17398   0 0001A5  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      352    17399
      353    17400        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:48   
      354    17401    1   QBX$MULT: ENTRY;

  17401   0 0001A8  D380 0000 0000  xent QBX$MULT        LNJ,B5   X6A_AUTO_0
          0 0001AB       0014 0000                       DC       20,0

      355    17402                                           /**/
      356    17403        /*D*       NAME: QBX$MULT
      357    17404                PURPOSE: To multiply to numbers together.
      358    17405              INTERFACE: QI1$DML, QCS$SETUP_SOURCE, QCS$SETUP_TARGET
      359    17406            DESCRIPTION: This routine multiplies two values together, and
      360    17407                            places the result in the target.  If alignment
      361    17408                            causes overflow the target remains unchanged
      362    17409                            QI_1.A_REG is set, and the routine returns.  If
      363    17410                            a SIZE_ERROR clause was specified, a test will
      364    17411                            be performed to verify success of the operation.
      365    17412                            If this test fails (results in overflow) the
      366    17413                            QI_1.A_REG is set and the routine returns. */
      367    17414                                           /**/
      368    17415
      369    17416
      370    17417                                           /**/
      371    17418                                       /* Setup source */
      372    17419                                           /**/
      373    17420    1       CALL QCS$SETUP_SOURCE;

  17420   0 0001AD  CBF0 0000                            LAB,B4   0,IMO
          0 0001AF  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 0001B2       0001                            DC       s:17422,PREL

      374    17421
      375    17422    1       CALL QCS$SETUP_TARGET;

  17422   0 0001B3  CBF0 0000                            LAB,B4   0,IMO
          0 0001B5  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 0001B8       0001                            DC       s:17429,PREL

      376    17423                                           /**/
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:49   
      377    17424                                       /* Store the result decimal place so
      378    17425                                          the result can be aligned to the
      379    17426                                          target decimal place. */
      380    17427                                           /**/
      381    17428
      382    17429    1       QI_1.OP.DEC.AUX = QI_1.OP.DEC.S + QI_1.OP.DEC.T;

  17429   0 0001B9  E800 0000 0029  xsym                 LDR,R6   QI_1+41
          0 0001BC  EA00 0000 002A  xsym                 ADD,R6   QI_1+42
          0 0001BF  EF00 0000 002B  xsym                 STR,R6   QI_1+43

      383    17430
      384    17431    1       QI_1.A_REG = 0;

  17431   0 0001C2  8700 0000 0054  xsym                 CL       QI_1+84

      385    17432    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MULT.NEXT_CODE@P );

  17432   0 0001C5  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 0001C8  DBC6 0003                            LAB,B5   3,B6
          0 0001CA  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      386    17433
      387    17434                                           /**/
      388    17435                                       /* Align to target and multiply.  If
      389    17436                                          a size error clause exists, do a
      390    17437                                          test operation. */
      391    17438                                           /**/
      392    17439    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ

  17439   0 0001CD  D805                                 LDR,R5   ,B5
          0 0001CE  5D5B                                 CMV,R5   91
          0 0001CF  0981 0007                            BNE      s:17446,PREL

      393    17440    1       THEN
      394    17441    2         DO;

PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:50   
      395    17442    2           QI_1.OP.SIZE_ERROR = 1;

  17442   0 0001D1  4C01                                 LDV,R4   1
          0 0001D2  CF00 0000 0030  xsym                 STR,R4   QI_1+48

      396    17443    2         END;

  17443   0 0001D5  0F81 0004                            B        s:17449,PREL

      397    17444    1       ELSE
      398    17445    2         DO;

      399    17446    2           QI_1.OP.SIZE_ERROR = 0;

  17446   0 0001D7  8700 0000 0030  xsym                 CL       QI_1+48

      400    17447    2         END;

      401    17448
      402    17449    1       CALL QCC$DML (QI_1.OP)

  17449   0 0001DA  BB80 0000 0000  01                   LAB,B3   0
          0 0001DD  CBF0 0100                            LAB,B4   256,IMO
          0 0001DF  E380 0000 0000  xent                 LNJ,B6   QCC$DML
          0 0001E2       0003                            DC       s:17452,PREL
          0 0001E3  0F81 0005                            B        s:17455,PREL

      403    17450    1       WHENALTRETURN
      404    17451    2         DO;

      405    17452    2           QI_1.A_REG = 1;

  17452   0 0001E5  6C01                                 LDV,R6   1
          0 0001E6  EF00 0000 0054  xsym                 STR,R6   QI_1+84

      406    17453    2         END;

PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:51   
      407    17454
      408    17455    1       RETURN;

  17455   0 0001E9  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      409    17456
      410    17457        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:52   
      411    17458    1   QBX$MULTX: ENTRY;

  17458   0 0001EC  D380 0000 0000  xent QBX$MULTX       LNJ,B5   X6A_AUTO_0
          0 0001EF       0014 0000                       DC       20,0

      412    17459                                           /**/
      413    17460        /*D*       NAME: QBX$MULTX
      414    17461                PURPOSE: To multiply two numbers together and place the result
      415    17462                            in the accumulator.
      416    17463              INTERFACE: QI1$DMC, QI1$DML
      417    17464            DESCRIPTION: The source and target are multiplied together, and
      418    17465                            the accumulator receives the result.  No test
      419    17466                            operation is necessary on the call to QCC$DMC
      420    17467                            (which is used to move the source to the accum).
      421    17468                            A test operation is done on the call to QCC$DML.
      422    17469                            The target (accumulator) is changed as a result
      423    17470                            of the DMC, but will not change as a result of
      424    17471                            the DML if a size error is detected. */
      425    17472                                           /**/
      426    17473
      427    17474                                           /**/
      428    17475                                       /* Setup target in source descriptor. */
      429    17476                                           /**/
      430    17477    1       QI_1.SOURCE$ = ADDR ( QI_1.INSTR$ -> QI$OP_MULTX.NUMERIC_TARGET@P );

  17477   0 0001F1  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 0001F4  DBC6 0002                            LAB,B5   2,B6
          0 0001F6  DF80 0000 0018  xsym                 STB,B5   QI_1+24

      431    17478    1       CALL QCS$SETUP_SOURCE;

  17478   0 0001F9  CBF0 0000                            LAB,B4   0,IMO
          0 0001FB  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 0001FE       0001                            DC       s:17485,PREL

      432    17479
      433    17480                                           /**/
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:53   
      434    17481                                       /* Save the target's decimal place.
      435    17482                                          Multiplies are done at dec place
      436    17483                                          zero to prevent overflow. */
      437    17484                                           /**/
      438    17485    1       SAVE_T_DEC = QI_1.OP.DEC.S;

  17485   0 0001FF  E800 0000 0029  xsym                 LDR,R6   QI_1+41
          0 000202  EF47 0005                            STR,R6   SAVE_T_DEC,AUTO

      439    17486    1       QI_1.OP.DEC.S = 0;

  17486   0 000204  8700 0000 0029  xsym                 CL       QI_1+41

      440    17487    1       QI_1.A_REG = 0;

  17487   0 000207  8700 0000 0054  xsym                 CL       QI_1+84

      441    17488                                           /**/
      442    17489                                           /**/
      443    17490    1       QI_1.OP.CIP.T_A (0) = QI_ACCUMULATOR_DAD.CIP_A (0);

  17490   0 00020A  D800 0000 0002  xsym                 LDR,R5   QI_ACCUMULATOR_DAD+2
          0 00020D  DF00 0000 001C  xsym                 STR,R5   QI_1+28

      444    17491    1       QI_1.OP.DEC.T = 0;

  17491   0 000210  8700 0000 002A  xsym                 CL       QI_1+42

      445    17492    1       QI_1.OP.LEN.T = %QI#ACCUMULATOR_LEN;

  17492   0 000213  4C1F                                 LDV,R4   31
          0 000214  CF00 0000 0027  xsym                 STR,R4   QI_1+39

      446    17493    1       QI_1.OP.DATA.T$ = ADDR ( QI_1.ACCUM );

  17493   0 000217  EB80 0000 0057  xsym                 LAB,B6   QI_1+87
          0 00021A  EF80 0000 0022  xsym                 STB,B6   QI_1+34
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:54   

      447    17494    1       QI_1.OP.SIZE_ERROR = 0;

  17494   0 00021D  8700 0000 0030  xsym                 CL       QI_1+48

      448    17495                                           /**/
      449    17496                                       /* Move target value into accumulator. */
      450    17497                                       /* The target will be in the accumulator
      451    17498                                          at decimal place 0. */
      452    17499                                           /**/
      453    17500    1       CALL QCC$DMC (QI_1.OP);

  17500   0 000220  BB80 0000 0000  01                   LAB,B3   0
          0 000223  CBF0 0100                            LAB,B4   256,IMO
          0 000225  E380 0000 0000  xent                 LNJ,B6   QCC$DMC
          0 000228       0001                            DC       s:17505,PREL

      454    17501
      455    17502                                           /**/
      456    17503                                       /* Setup source into source descriptor */
      457    17504                                           /**/
      458    17505    1       QI_1.SOURCE$ = ADDR ( QI_1.INSTR$ -> QI$OP_MULTX.NUMERIC_SOURCE@P );

  17505   0 000229  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00022C  DBC6 0001                            LAB,B5   1,B6
          0 00022E  DF80 0000 0018  xsym                 STB,B5   QI_1+24

      459    17506    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MULTX.NEXT_CODE@P );

  17506   0 000231  CBC6 0003                            LAB,B4   3,B6
          0 000233  CF80 0000 0006  xsym                 STB,B4   QI_1+6

      460    17507    1       CALL QCS$SETUP_SOURCE;

  17507   0 000236  CBF0 0000                            LAB,B4   0,IMO
          0 000238  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 00023B       0001                            DC       s:17509,PREL
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:55   

      461    17508                                           /**/
      462    17509    1       QI_1.OP.DEC.AUX = QI_1.OP.DEC.S + SAVE_T_DEC;

  17509   0 00023C  E800 0000 0029  xsym                 LDR,R6   QI_1+41
          0 00023F  EA47 0005                            ADD,R6   SAVE_T_DEC,AUTO
          0 000241  EF00 0000 002B  xsym                 STR,R6   QI_1+43

      463    17510    1       QI_1.OP.DEC.T = %QI#ACCUMULATOR_DEC;

  17510   0 000244  5C0F                                 LDV,R5   15
          0 000245  DF00 0000 002A  xsym                 STR,R5   QI_1+42

      464    17511    1       QI_1.OP.SIZE_ERROR = 1;

  17511   0 000248  4C01                                 LDV,R4   1
          0 000249  CF00 0000 0030  xsym                 STR,R4   QI_1+48

      465    17512                                           /**/
      466    17513                                       /* Multiply contents of accumulator by
      467    17514                                          source value and place result into
      468    17515                                          the accumulator. */
      469    17516                                           /**/
      470    17517    1   STOMP_ACCUM_MULTX:
      471    17518
      472    17519    1       CALL QCC$DML (QI_1.OP)

  17519   0 00024C  BB80 0000 0000  01   STOMP_ACCUM_MUL*LAB,B3   0
          0 00024F  CBF0 0100                            LAB,B4   256,IMO
          0 000251  E380 0000 0000  xent                 LNJ,B6   QCC$DML
          0 000254       0003                            DC       s:17522,PREL
          0 000255  0F81 0009                            B        s:17527,PREL

      473    17520    1       WHENALTRETURN
      474    17521    2         DO;

      475    17522    2           QI_1.A_REG = 1;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:56   

  17522   0 000257  6C01                                 LDV,R6   1
          0 000258  EF00 0000 0054  xsym                 STR,R6   QI_1+84

      476    17523    2           QI_1.OP.SIZE_ERROR = 0;

  17523   0 00025B  8700 0000 0030  xsym                 CL       QI_1+48

      477    17524    2           GOTO STOMP_ACCUM_MULTX;

  17524   0 00025E  0FEE                                 B        s:17519,SPREL

      478    17525    2         END;
      479    17526
      480    17527    1       RETURN;

  17527   0 00025F  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      481    17528
      482    17529        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:57   
      483    17530    1   QBX$SUB: ENTRY;

  17530   0 000262  D380 0000 0000  xent QBX$SUB         LNJ,B5   X6A_AUTO_0
          0 000265       0014 0000                       DC       20,0

      484    17531                                           /**/
      485    17532        /*D*     NAME: QBX$SUB
      486    17533              PURPOSE: To subtract two numbers.
      487    17534            INTERFACE: QCC$DSB, QCS$SETUP_SOURCE, QCS$SETUP_TARGET
      488    17535          DESCRIPTION: Add two numbers together and place result into target.
      489    17536                          If alignment results in overflow, QCC$DSB altrets
      490    17537                          without affecting the result.  If a SIZE_ERROR
      491    17538                          clause occured on the instruction, QCC$DSB performs
      492    17539                          a SIZE_ERROR test operation.  Again, the target
      493    17540                          is not changed if the test fails. */
      494    17541                                           /**/
      495    17542
      496    17543                                           /**/
      497    17544                                       /* Setup source */
      498    17545                                           /**/
      499    17546    1       CALL QCS$SETUP_SOURCE;

  17546   0 000267  CBF0 0000                            LAB,B4   0,IMO
          0 000269  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 00026C       0001                            DC       s:17550,PREL

      500    17547                                           /**/
      501    17548                                       /* Setup target */
      502    17549                                           /**/
      503    17550    1       CALL QCS$SETUP_TARGET;

  17550   0 00026D  CBF0 0000                            LAB,B4   0,IMO
          0 00026F  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 000272       0001                            DC       s:17554,PREL

      504    17551                                           /**/
      505    17552                                       /* Update instruction pointer */
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:58   
      506    17553                                           /**/
      507    17554    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_SUB.NEXT_CODE@P );

  17554   0 000273  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 000276  DBC6 0003                            LAB,B5   3,B6
          0 000278  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      508    17555    1       QI_1.A_REG = 0;

  17555   0 00027B  8700 0000 0054  xsym                 CL       QI_1+84

      509    17556
      510    17557                                           /**/
      511    17558                                       /* Check if size error clause occured
      512    17559                                          on this statement.  If so, do a
      513    17560                                          test operation. */
      514    17561                                           /**/
      515    17562    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ

  17562   0 00027E  E805                                 LDR,R6   ,B5
          0 00027F  6D5B                                 CMV,R6   91
          0 000280  0981 0007                            BNE      s:17569,PREL

      516    17563    1       THEN
      517    17564    2         DO;

      518    17565    2           QI_1.OP.SIZE_ERROR = 1;

  17565   0 000282  5C01                                 LDV,R5   1
          0 000283  DF00 0000 0030  xsym                 STR,R5   QI_1+48

      519    17566    2         END;

  17566   0 000286  0F81 0004                            B        s:17572,PREL

      520    17567    1       ELSE
      521    17568    2         DO;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:59   

      522    17569    2           QI_1.OP.SIZE_ERROR = 0;

  17569   0 000288  8700 0000 0030  xsym                 CL       QI_1+48

      523    17570    2         END;

      524    17571
      525    17572    1       CALL QCC$DSB (QI_1.OP)

  17572   0 00028B  BB80 0000 0000  01                   LAB,B3   0
          0 00028E  CBF0 0100                            LAB,B4   256,IMO
          0 000290  E380 0000 0000  xent                 LNJ,B6   QCC$DSB
          0 000293       0003                            DC       s:17575,PREL
          0 000294  0F81 0005                            B        s:17578,PREL

      526    17573    1       WHENALTRETURN
      527    17574    2         DO;

      528    17575    2           QI_1.A_REG = 1;

  17575   0 000296  6C01                                 LDV,R6   1
          0 000297  EF00 0000 0054  xsym                 STR,R6   QI_1+84

      529    17576    2         END;

      530    17577
      531    17578    1       RETURN;

  17578   0 00029A  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      532    17579
      533    17580        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:60   
      534    17581    1   QBX$SUBX: ENTRY;

  17581   0 00029D  D380 0000 0000  xent QBX$SUBX        LNJ,B5   X6A_AUTO_0
          0 0002A0       0014 0000                       DC       20,0

      535    17582                                           /**/
      536    17583        /*D*     NAME: QBX$SUBX
      537    17584              PURPOSE: To subtract a series of numbers from one number.
      538    17585            INTERFACE: QCC$DAD, QCC$DSB, QCC$DMC, QCS$SETUP_SOURCE
      539    17586          DESCRIPTION: This routine is used to subtract multiple digits from
      540    17587                          the first digit.  The digits are all added prior
      541    17588                          to the subtraction.  Size errors resulting from
      542    17589                          alignment, addition, and subtraction will cause
      543    17590                          the routine to set QI_1.A_REG and return.  The
      544    17591                          target is unchanged if a size error occurs. */
      545    17592                                           /**/
      546    17593
      547    17594    1       QI_1.A_REG = 0;

  17594   0 0002A2  8700 0000 0054  xsym                 CL       QI_1+84

      548    17595                                           /**/
      549    17596                                       /* Zero the accumulator. */
      550    17597                                           /**/
      551    17598    1       QI_1.ACCUM = QI_ZERO_ACCUMULATOR;

  17598   0 0002A5  AB80 0000 0000  xsym                 LAB,B2   QI_ZERO_ACCUMULATOR
          0 0002A8  2C00                                 LDV,R2   0
          0 0002A9  6C10                                 LDV,R6   16
          0 0002AA  BB80 0000 0057  xsym                 LAB,B3   QI_1+87
          0 0002AD  3C00                                 LDV,R3   0
          0 0002AE  0008                                 MMM

      552    17599
      553    17600    1       LOOP_COUNTER = QI_1.INSTR$ -> QI$OP_SUBX.ARGUMENT_COUNT - 1;

  17600   0 0002AF  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:61   
          0 0002B2  E846 0001                            LDR,R6   1,B6
          0 0002B4  6EFF                                 ADV,R6   -1
          0 0002B5  EF47 0007                            STR,R6   LOOP_COUNTER,AUTO

      554    17601    1       QI_1.SOURCE$ = ADDR ( QI_1.INSTR$ -> QI$OP_SUBX.ARGUMENT_A@P (0) );

  17601   0 0002B7  DBC6 0002                            LAB,B5   2,B6
          0 0002B9  DF80 0000 0018  xsym                 STB,B5   QI_1+24

      555    17602
      556    17603                                           /**/
      557    17604                                       /* Add the values to be subtracted
      558    17605                                          into the accumulator (which has
      559    17606                                          a decimal place of 15). */
      560    17607                                           /**/
      561    17608    1       QI_1.OP.CIP.T_A (0) = QI_31_DIGIT_ST_PACKED_A (0);

  17608   0 0002BC  D800 0000 0000  xsym                 LDR,R5   QI_31_DIGIT_ST_PACKED
          0 0002BF  DF00 0000 001C  xsym                 STR,R5   QI_1+28

      562    17609    1       QI_1.OP.DEC.T = %QI#ACCUMULATOR_DEC;

  17609   0 0002C2  4C0F                                 LDV,R4   15
          0 0002C3  CF00 0000 002A  xsym                 STR,R4   QI_1+42

      563    17610    1       QI_1.OP.LEN.T = %QI#ACCUMULATOR_LEN;

  17610   0 0002C6  3C1F                                 LDV,R3   31
          0 0002C7  BF00 0000 0027  xsym                 STR,R3   QI_1+39

      564    17611    1       QI@OTTER_SPACE = QI_ZERO_ACCUMULATOR;

  17611   0 0002CA  AB80 0000 0000  xsym                 LAB,B2   QI_ZERO_ACCUMULATOR
          0 0002CD  2C00                                 LDV,R2   0
          0 0002CE  6C10                                 LDV,R6   16
          0 0002CF  BB87                                 LAB,B3   ,AUTO
          0 0002D0  3C16                                 LDV,R3   22
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:62   
          0 0002D1  0008                                 MMM

      565    17612    1       QI_1.OP.DATA.T$ = ADDR ( QI@OTTER_SPACE );

  17612   0 0002D2  EBC7 000B                            LAB,B6   QI@OTTER_SPACE,AUTO
          0 0002D4  EF80 0000 0022  xsym                 STB,B6   QI_1+34

      566    17613    1       QI_1.OP.SIZE_ERROR = 1;

  17613   0 0002D7  6C01                                 LDV,R6   1
          0 0002D8  EF00 0000 0030  xsym                 STR,R6   QI_1+48

      567    17614
      568    17615                                           /**/
      569    17616                                        /* DOWNTO constructs go to stopping
      570    17617                                           point -1. */
      571    17618                                           /**/
      572    17619    1   ADD_OPERANDS:
      573    17620    2       DO I = LOOP_COUNTER DOWNTO 1 BY -1;

  17620   0 0002DB  D847 0007            ADD_OPERANDS    LDR,R5   LOOP_COUNTER,AUTO
          0 0002DD  DF47 0006                            STR,R5   I,AUTO
          0 0002DF  0F81 0020                            B        s:17629+2,PREL

      574    17621    2         CALL QCS$SETUP_SOURCE;

  17621   0 0002E1  CBF0 0000                            LAB,B4   0,IMO
          0 0002E3  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 0002E6       0001                            DC       s:17622,PREL

      575    17622    2         CALL QCC$DAD ( QI_1.OP )

  17622   0 0002E7  BB80 0000 0000  01                   LAB,B3   0
          0 0002EA  CBF0 0100                            LAB,B4   256,IMO
          0 0002EC  E380 0000 0000  xent                 LNJ,B6   QCC$DAD
          0 0002EF       0003                            DC       s:17625,PREL
          0 0002F0  0F81 000D                            B        s:17629,PREL
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:63   

      576    17623    2         WHENALTRETURN
      577    17624    3           DO;

      578    17625    3             QI_1.SOURCE$ = ADDR ( QI_1.INSTR$ -> QI$OP_SUBX.ARGUMENT_A@P (
             17625                      LOOP_COUNTER - 1 ) );

  17625   0 0002F2  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 0002F5  B847 0007                            LDR,R3   LOOP_COUNTER,AUTO
          0 0002F7  3E01                                 ADV,R3   1
          0 0002F8  DBB6                                 LAB,B5   ,B6,R3
          0 0002F9  DF80 0000 0018  xsym                 STB,B5   QI_1+24

      579    17626    3             EXIT ADD_OPERANDS;

  17626   0 0002FC  0F81 0007                            B        s:17634,PREL

      580    17627    3           END;
      581    17628
      582    17629    2       END ADD_OPERANDS;

  17629   0 0002FE  88C7 0006                            DEC      I,AUTO
          0 000300  E847 0006                            LDR,R6   I,AUTO
          0 000302  6D01                                 CMV,R6   1
          0 000303  08DE                                 BAGE     s:17621,SPREL

      583    17630
      584    17631                                           /**/
      585    17632                                       /* SETUP from field. */
      586    17633                                           /**/
      587    17634    1       CALL QCS$SETUP_SOURCE;

  17634   0 000304  CBF0 0000                            LAB,B4   0,IMO
          0 000306  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 000309       0001                            DC       s:17637,PREL

      588    17635
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:64   
      589    17636
      590    17637    1       QI_1.OP.CIP.T_A (0) = QI_ACCUMULATOR_DAD.CIP_A (0);

  17637   0 00030A  E800 0000 0002  xsym                 LDR,R6   QI_ACCUMULATOR_DAD+2
          0 00030D  EF00 0000 001C  xsym                 STR,R6   QI_1+28

      591    17638    1       QI_1.OP.DEC.T = %QI#ACCUMULATOR_DEC;

  17638   0 000310  5C0F                                 LDV,R5   15
          0 000311  DF00 0000 002A  xsym                 STR,R5   QI_1+42

      592    17639    1       QI_1.OP.LEN.T = %QI#ACCUMULATOR_LEN;

  17639   0 000314  4C1F                                 LDV,R4   31
          0 000315  CF00 0000 0027  xsym                 STR,R4   QI_1+39

      593    17640    1       QI_1.OP.DATA.T$ = ADDR ( QI_1.ACCUM );

  17640   0 000318  EB80 0000 0057  xsym                 LAB,B6   QI_1+87
          0 00031B  EF80 0000 0022  xsym                 STB,B6   QI_1+34

      594    17641    1       QI_1.OP.SIZE_ERROR = 0;

  17641   0 00031E  8700 0000 0030  xsym                 CL       QI_1+48

      595    17642
      596    17643    1       CALL QCC$DMC (QI_1.OP);

  17643   0 000321  BB80 0000 0000  01                   LAB,B3   0
          0 000324  CBF0 0100                            LAB,B4   256,IMO
          0 000326  E380 0000 0000  xent                 LNJ,B6   QCC$DMC
          0 000329       0001                            DC       s:17645,PREL

      597    17644
      598    17645    1       QI_1.OP.CIP.S_A (0) = QI_31_DIGIT_ST_PACKED_A (0);

  17645   0 00032A  E800 0000 0000  xsym                 LDR,R6   QI_31_DIGIT_ST_PACKED
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:65   
          0 00032D  EF00 0000 001A  xsym                 STR,R6   QI_1+26

      599    17646    1       QI_1.OP.DEC.S = %QI#ACCUMULATOR_DEC;

  17646   0 000330  5C0F                                 LDV,R5   15
          0 000331  DF00 0000 0029  xsym                 STR,R5   QI_1+41

      600    17647    1       QI_1.OP.LEN.S = %QI#ACCUMULATOR_LEN;

  17647   0 000334  4C1F                                 LDV,R4   31
          0 000335  CF00 0000 0026  xsym                 STR,R4   QI_1+38

      601    17648    1       QI_1.OP.DATA.S$ = ADDR ( QI@OTTER_SPACE );

  17648   0 000338  EBC7 000B                            LAB,B6   QI@OTTER_SPACE,AUTO
          0 00033A  EF80 0000 0020  xsym                 STB,B6   QI_1+32

      602    17649    1       QI_1.OP.LEN.T = %QI#ACCUMULATOR_LEN;

  17649   0 00033D  CF00 0000 0027  xsym                 STR,R4   QI_1+39

      603    17650    1       QI_1.OP.SIZE_ERROR = 1;

  17650   0 000340  3C01                                 LDV,R3   1
          0 000341  BF00 0000 0030  xsym                 STR,R3   QI_1+48

      604    17651
      605    17652    1   SUBX_STOMP_ACCUM:
      606    17653
      607    17654    1       CALL QCC$DSB (QI_1.OP)

  17654   0 000344  BB80 0000 0000  01   SUBX_STOMP_ACCUMLAB,B3   0
          0 000347  CBF0 0100                            LAB,B4   256,IMO
          0 000349  E380 0000 0000  xent                 LNJ,B6   QCC$DSB
          0 00034C       0003                            DC       s:17657,PREL
          0 00034D  0F81 0009                            B        s:17662,PREL

PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:66   
      608    17655    1       WHENALTRETURN
      609    17656    2         DO;

      610    17657    2           QI_1.A_REG = 1;

  17657   0 00034F  6C01                                 LDV,R6   1
          0 000350  EF00 0000 0054  xsym                 STR,R6   QI_1+84

      611    17658    2           QI_1.OP.SIZE_ERROR = 0;

  17658   0 000353  8700 0000 0030  xsym                 CL       QI_1+48

      612    17659    2           GOTO SUBX_STOMP_ACCUM;

  17659   0 000356  0FEE                                 B        s:17654,SPREL

      613    17660    2         END;
      614    17661
      615    17662    1       QI_1.INSTR$ = PINCRW ( QI_1.INSTR$, LOOP_COUNTER + 3 );

  17662   0 000357  E847 0007                            LDR,R6   LOOP_COUNTER,AUTO
          0 000359  70F0                                 DAR,R7   16
          0 00035A  8400 0000 0006  xsym                 AID      QI_1+6
          0 00035D  8470 0000 0003                       AID      3,IMO
          0 000360  8D00 0000 0006  xsym                 SDI      QI_1+6

      616    17663
      617    17664    1       RETURN;

  17664   0 000363  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      618    17665
      619    17666        %EJECT;
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:67   
      620    17667    1   QBX$ROUND: ENTRY;

  17667   0 000366  D380 0000 0000  xent QBX$ROUND       LNJ,B5   X6A_AUTO_0
          0 000369       0014 0000                       DC       20,0

      621    17668                                           /**/
      622    17669        /*D*    NAME: QBX$ROUND
      623    17670             PURPOSE: To round off values in the accumulator.
      624    17671           INTERFACE: None
      625    17672         DESCRIPTION: This module handles the rounding operations encountered
      626    17673                        during specific arithmetic operations.  If the number
      627    17674                        of shift positions exceeds 15, the rounding operation
      628    17675                        will not take place.  If the number of positions is
      629    17676                        less than or equal to 15, the value in the accumulator
      630    17677                        is shifted right and rounded, then shifted left.
      631    17678                                           */
      632    17679                                           /**/
      633    17680    1       DECIMAL_PLACES = QI_1.INSTR$ -> QI$OP_ROUND.DECIMAL_PLACES;

  17680   0 00036B  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00036E  E846 0001                            LDR,R6   1,B6
          0 000370  EF47 0009                            STR,R6   DECIMAL_PLACES,AUTO

      634    17681    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_ROUND.NEXT_CODE@P );

  17681   0 000372  DBC6 0002                            LAB,B5   2,B6
          0 000374  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      635    17682
      636    17683    1       SHIFT_POSITIONS = 15 - DECIMAL_PLACES;

  17683   0 000377  8256                                 NEG      R6
          0 000378  6E0F                                 ADV,R6   15
          0 000379  EF47 000A                            STR,R6   SHIFT_POSITIONS,AUTO

      637    17684
      638    17685    1       IF SHIFT_POSITIONS > 0
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:68   

  17685   0 00037B  6A81 002E                            BLEZ,R6  s:17702,PREL

      639    17686    1       THEN
      640    17687    2         DO;

      641    17688    2           QI_1.OP.CIP.S = QI_ACCUMULATOR_DAD.CIP;

  17688   0 00037D  8C80 0000 0002  xsym                 LDI      QI_ACCUMULATOR_DAD+2
          0 000380  8D00 0000 001A  xsym                 SDI      QI_1+26

      642    17689    2           QI_1.OP.DATA.S$ = ADDR ( QI_1.ACCUM );

  17689   0 000383  EB80 0000 0057  xsym                 LAB,B6   QI_1+87
          0 000386  EF80 0000 0020  xsym                 STB,B6   QI_1+32

      643    17690    2           QI_1.OP.SHIFT_COUNT.S = SHIFT_POSITIONS;

  17690   0 000389  D847 000A                            LDR,R5   SHIFT_POSITIONS,AUTO
          0 00038B  DF00 0000 0026  xsym                 STR,R5   QI_1+38

      644    17691    2           QI_1.OP.ROUND = 1;

  17691   0 00038E  4C01                                 LDV,R4   1
          0 00038F  CF00 0000 0031  xsym                 STR,R4   QI_1+49

      645    17692    2           CALL QCC$DRS (QI_1.OP);

  17692   0 000392  BB80 0000 0000  01                   LAB,B3   0
          0 000395  CBF0 0100                            LAB,B4   256,IMO
          0 000397  E380 0000 0000  xent                 LNJ,B6   QCC$DRS
          0 00039A       0001                            DC       s:17694,PREL

      646    17693
      647    17694    2           CALL QCC$DLS (QI_1.OP)

  17694   0 00039B  BB80 0000 0000  01                   LAB,B3   0
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:69   
          0 00039E  CBF0 0100                            LAB,B4   256,IMO
          0 0003A0  E380 0000 0000  xent                 LNJ,B6   QCC$DLS
          0 0003A3       0003                            DC       s:17697,PREL
          0 0003A4  0F81 0005                            B        s:17702,PREL

      648    17695    2           WHENALTRETURN
      649    17696    3             DO;

      650    17697    3               QI_1.A_REG = 1;

  17697   0 0003A6  6C01                                 LDV,R6   1
          0 0003A7  EF00 0000 0054  xsym                 STR,R6   QI_1+84

      651    17698    3             END;

      652    17699
      653    17700    2         END;

      654    17701
      655    17702    1       RETURN;

  17702   0 0003AA  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
      656    17703
      657    17704    1   END QBX$ARITHMETICS;

PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:70   
--  Include file information  --

   QI_MACROS_M.:E05TOU  is referenced.
   QI_PERR_C.:E05TOU  is referenced.
   QI_EQUATES_E.:E05TOU  is referenced.
   QG_MACRO_M.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure QBX$ARITHMETICS.
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:71   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     9-0-0/w SBIN(16)    r     1 DECIMAL_PLACES             6-0-0/w SBIN(16)    r     1 I
     7-0-0/w SBIN(16)    r     1 LOOP_COUNTER               B-0-0/w STRC(128)   r     1 QI@OTTER_SPACE
     8-0-0/w UBIN(16)    r     1 REAL_DECIMAL               5-0-0/w SBIN(16)    r     1 SAVE_T_DEC
     A-0-0/w SBIN(16)    r     1 SHIFT_POSITIONS

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(2576)  r     1 QI_1
     0-0-0/d STRC(32)    r     1 QI_31_DIGIT_ST_PACKED
     0-0-0/d UBIN(16)    r     1 QI_31_DIGIT_ST_PACKED_A(0:1)
     0-0-0/d STRC(64)    r     1 QI_ACCUMULATOR_DAD         0-0-0/w STRC(128)   r     1 QI_ZERO_ACCUMULATOR

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(64)    r     1 QI$OP_ADD                  0-0-0/w STRC(48)    r     1 QI$OP_ADDX
     0-0-0/w STRC(64)    r     1 QI$OP_DIV                  0-0-0/w STRC(64)    r     1 QI$OP_DIVX
     0-0-0/w STRC(64)    r     1 QI$OP_MULT                 0-0-0/w STRC(64)    r     1 QI$OP_MULTX
     0-0-0/w STRC(48)    r     1 QI$OP_ROUND                0-0-0/w STRC(32)    r     1 QI$OP_SEQUENCE
     0-0-0/w STRC(64)    r     1 QI$OP_SUB                  0-0-0/w STRC(48)    r     1 QI$OP_SUBX
     0-0-0/c ASTR(8)     r     1 QI$VARIABLE_IDENTIFIER


   Procedure QBX$ARITHMETICS requires 941 words for executable code.
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:72   
   Procedure QBX$ARITHMETICS requires 20 words of local(AUTO) storage.

    No errors detected in file QBX$ARITHMETICS.:E05TSI    .
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:73   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:74   
          MINI XREF LISTING

ADDX_STOMP_ACCUM
     17188**LABEL   17193--GOTO
ADD_OPERANDS
     17620**LABEL   17626--EXIT
DECIMAL_PLACES
     17060**DCL     17680<<ASSIGN  17683>>ASSIGN
DIVX_STOMP_ACCUM
     17390**LABEL   17395--GOTO
I
     17057**DCL     17184<<DOINDEX 17620<<DOINDEX
LOOP_COUNTER
     17058**DCL     17163<<ASSIGN  17167>>ASSIGN  17184>>DOINDEX 17600<<ASSIGN  17620>>DOINDEX 17625>>ASSIGN
     17662>>ASSIGN
QCC$DAD
     17047**DCL-ENT 17133--CALL    17188--CALL    17622--CALL
QCC$DDV
     17049**DCL-ENT 17242--CALL    17346--CALL
QCC$DLS
     17053**DCL-ENT 17694--CALL
QCC$DMC
     17051**DCL-ENT 17297--CALL    17390--CALL    17500--CALL    17643--CALL
QCC$DML
     17050**DCL-ENT 17449--CALL    17519--CALL
QCC$DRS
     17052**DCL-ENT 17692--CALL
QCC$DSB
     17048**DCL-ENT 17572--CALL    17654--CALL
QCE$ERROR
     17063**DCL-ENT 17253--CALL    17357--CALL
QCS$SETUP_SOURCE
     17045**DCL-ENT 17108--CALL    17185--CALL    17220--CALL    17322--CALL    17420--CALL    17478--CALL
     17507--CALL    17546--CALL    17621--CALL    17634--CALL
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:75   
QCS$SETUP_TARGET
     17046**DCL-ENT 17110--CALL    17225--CALL    17327--CALL    17422--CALL    17550--CALL
QGB_PARAM.DVE.DVBYTE.VFC
     11528**DCL     11529--REDEF
QGB_PARAM.DVE.EOMCHAR
     11540**DCL     11541--REDEF
QGB_PARAM.MSG$
     11522**DCL     11523--REDEF
QGB_PARAM.UHDR$
     11547**DCL     11548--REDEF
QI$ACTIVATION_STATUS
      9286**DCL      9292--REDEF
QI$CIP
      8127**DCL      8197--REDEF
QI$CIP.CA
      8132**DCL      8136--REDEF    8139--REDEF    8142--REDEF
QI$COBOL_DAD.PSEUDO_CIP
      8371**DCL      8396--REDEF
QI$COBOL_DAD.PSEUDO_CIP.ALPHANUMERIC
      8373**DCL      8378--REDEF
QI$COBOL_DAD.PSEUDO_CIP.NUMERIC.CB
      8379**DCL      8382--REDEF    8385--REDEF
QI$COBOL_DAD.VARIABLE_LENGTH_ITEMS
      8407**DCL      8423--REDEF    8431--REDEF    8439--REDEF
QI$COBOL_DAD.VARIABLE_LENGTH_ITEMS.LEVEL_MULTIPLIERS
      8408**DCL      8418--REDEF    8421--REDEF
QI$COBOL_DAD.WORD0
      8335**DCL      8336--REDEF    8350--REDEF
QI$COBOL_DAD_P_BITS.P
      8475**DCL      8481--REDEF
QI$CONDITION_CONTROL_BLOCK.LIST_A@P
      7961**DCL      7962--REDEF
QI$CONDITION_CONTROL_BLOCK.WORD0_FLAGS
      7957**DCL      7960--REDEF
QI$CONDITION_LEGAL_BLOCK.ARRAY@P
      7994**DCL      7995--REDEF    7996--REDEF
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:76   
QI$DAD.PSEUDO_CIP
      8274**DCL      8299--REDEF
QI$DAD.PSEUDO_CIP.ALPHANUMERIC
      8276**DCL      8281--REDEF
QI$DAD.PSEUDO_CIP.NUMERIC.CB
      8282**DCL      8285--REDEF    8288--REDEF
QI$DAD.WORD0
      8243**DCL      8244--REDEF
QI$ERROR_MESSAGE_LINE
     11635**DCL     11637--REDEF
QI$ERROR_STATUS
     11632**DCL     11634--REDEF
QI$FIELD_DAD.ELEMENTARY_ITEM.P
      8689**DCL      8696--REDEF
QI$FIELD_DAD.ONE_DIMENSIONAL_ITEM.P
      8709**DCL      8716--REDEF
QI$FIELD_DAD.PSEUDO_CIP
      8616**DCL      8641--REDEF
QI$FIELD_DAD.PSEUDO_CIP.ALPHANUMERIC
      8618**DCL      8623--REDEF
QI$FIELD_DAD.PSEUDO_CIP.NUMERIC.CB
      8624**DCL      8627--REDEF    8630--REDEF
QI$FIELD_DAD.TWO_DIMENSIONAL_ITEM.P
      8729**DCL      8736--REDEF
QI$FIELD_DAD.VARIABLE_LENGTH_ITEMS
      8672**DCL      8688--REDEF    8706--REDEF    8724--REDEF
QI$FIELD_DAD.VARIABLE_LENGTH_ITEMS.LEVEL_MULTIPLIERS
      8673**DCL      8683--REDEF    8686--REDEF
QI$FIELD_DAD.WORD0
      8568**DCL      8569--REDEF
QI$FIELD_DAD.WORD0_FLAGS.IO_FLAGS
      8572**DCL      8577--REDEF
QI$FIELD_DAD_P.P
      8770**DCL      8777--REDEF
QI$FIELD_STATUS.INDICATORS
      9436**DCL      9468--REDEF
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:77   
QI$FIELD_STATUS.INDICATORS.ENABLED_FLAGS
      9440**DCL      9445--REDEF
QI$FIELD_STATUS.INDICATORS.OPEN_FLAGS
      9452**DCL      9459--REDEF
QI$FIELD_STATUS.INDICATORS.STATE_FLAGS
      9446**DCL      9451--REDEF
QI$FILE.WORD0
      8892**DCL      8893--REDEF
QI$FILE_STATUS.INDICATORS
      9729**DCL      9761--REDEF
QI$FILE_STATUS.INDICATORS.ENABLED_FLAGS
      9733**DCL      9738--REDEF
QI$FILE_STATUS.INDICATORS.OPEN_FLAGS
      9745**DCL      9752--REDEF
QI$FILE_STATUS.INDICATORS.STATE_FLAGS
      9739**DCL      9744--REDEF
QI$FORM_FILE.USE_PROCEDURE
      8992**DCL      8999--REDEF
QI$FORM_FILE.WORD0
      8946**DCL      8947--REDEF
QI$FORM_STATUS.INDICATORS
      9850**DCL      9882--REDEF
QI$FORM_STATUS.INDICATORS.ENABLED_FLAGS
      9854**DCL      9859--REDEF
QI$FORM_STATUS.INDICATORS.OPEN_FLAGS
      9866**DCL      9873--REDEF
QI$FORM_STATUS.INDICATORS.STATE_FLAGS
      9860**DCL      9865--REDEF
QI$FRAME.WORD0
      9107**DCL      9108--REDEF
QI$FRAME_STATUS.INDICATORS
     10079**DCL     10111--REDEF
QI$FRAME_STATUS.INDICATORS.ENABLED_FLAGS
     10083**DCL     10088--REDEF
QI$FRAME_STATUS.INDICATORS.OPEN_FLAGS
     10095**DCL     10102--REDEF
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:78   
QI$FRAME_STATUS.INDICATORS.STATE_FLAGS
     10089**DCL     10094--REDEF
QI$GZ_FIELD.DESCRIPTION.IO_FLAGS
     16961**DCL     16966--REDEF
QI$IDENTIFIER
     11638**DCL     11640--REDEF
QI$INDICATORS
      9350**DCL      9380--REDEF
QI$INDICATORS.ENABLED_FLAGS
      9356**DCL      9361--REDEF
QI$INDICATORS.OPEN_FLAGS
      9368**DCL      9375--REDEF
QI$INDICATORS.STATE_FLAGS
      9362**DCL      9367--REDEF
QI$MAJOR_NODE.WORD0
      8806**DCL      8807--REDEF
QI$MAJOR_STATUS.INDICATORS
      9529**DCL      9561--REDEF
QI$MAJOR_STATUS.INDICATORS.ENABLED_FLAGS
      9533**DCL      9538--REDEF
QI$MAJOR_STATUS.INDICATORS.OPEN_FLAGS
      9545**DCL      9552--REDEF
QI$MAJOR_STATUS.INDICATORS.STATE_FLAGS
      9539**DCL      9544--REDEF
QI$MESSAGE_TYPE
     11629**DCL     11631--REDEF
QI$MINOR_NODE.WORD0
      8849**DCL      8850--REDEF
QI$MINOR_STATUS.INDICATORS
      9622**DCL      9654--REDEF
QI$MINOR_STATUS.INDICATORS.ENABLED_FLAGS
      9626**DCL      9631--REDEF
QI$MINOR_STATUS.INDICATORS.OPEN_FLAGS
      9638**DCL      9645--REDEF
QI$MINOR_STATUS.INDICATORS.STATE_FLAGS
      9632**DCL      9637--REDEF
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:79   
QI$OP_ACCEPT.DATANAME@P
      6037**DCL      6038--REDEF
QI$OP_ADD.NEXT_CODE@P
      6096**DCL     17115--ASSIGN
QI$OP_ADDX.ARGUMENT_A@P
      6124**DCL     17165--ASSIGN
QI$OP_ADDX.ARGUMENT_COUNT
      6123**DCL     17163>>ASSIGN
QI$OP_CALL.EPTR$
      6209**DCL      6210--REDEF
QI$OP_CLEAR.IO_FLAGS
      6242**DCL      6245--REDEF
QI$OP_DISPLAY.FIELD_A@P
      6509**DCL      6510--REDEF
QI$OP_DIV.NEXT_CODE@P
      6539**DCL     17229--ASSIGN
QI$OP_DIVX.NEXT_CODE@P
      6568**DCL     17329--ASSIGN
QI$OP_ENABLE.IO_FLAGS
      6596**DCL      6599--REDEF
QI$OP_IFCLS.ATTRIBUTE.TYPE
      6689**DCL      6694--REDEF
QI$OP_INSPECT.TALLYING_FOR_ITEM@P
      6923**DCL      6924--REDEF
QI$OP_INSPECT.TALLYING_INITIAL_ITEM@P
      6925**DCL      6926--REDEF
QI$OP_INSPECT.TALLYING_ITEM@P
      6921**DCL      6922--REDEF
QI$OP_MULT.NEXT_CODE@P
      7426**DCL     17432--ASSIGN
QI$OP_MULTX.NEXT_CODE@P
      7455**DCL     17506--ASSIGN
QI$OP_MULTX.NUMERIC_SOURCE@P
      7453**DCL     17505--ASSIGN
QI$OP_MULTX.NUMERIC_TARGET@P
      7454**DCL     17477--ASSIGN
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:80   
QI$OP_OPEN.IO_FLAGS
      7483**DCL      7486--REDEF
QI$OP_PERFM.BINARY_ITERATION_COUNT@P
      7521**DCL      7522--REDEF
QI$OP_ROUND.DECIMAL_PLACES
      7639**DCL     17680>>ASSIGN
QI$OP_ROUND.NEXT_CODE@P
      7640**DCL     17681--ASSIGN
QI$OP_SEQUENCE.CODE
      5977**DCL     17123>>IF      17286>>IF      17439>>IF      17562>>IF
QI$OP_SUB.NEXT_CODE@P
      7729**DCL     17554--ASSIGN
QI$OP_SUBX.ARGUMENT_A@P
      7790**DCL     17601--ASSIGN  17625--ASSIGN
QI$OP_SUBX.ARGUMENT_COUNT
      7789**DCL     17600>>ASSIGN
QI$PSEUDO_CIP
      8022**DCL      8046--REDEF
QI$PSEUDO_CIP.ALPHANUMERIC
      8026**DCL      8031--REDEF
QI$PSEUDO_CIP.NUMERIC.CB
      8032**DCL      8035--REDEF    8038--REDEF
QI$TERMINAL_ATTRIBUTES
      9243**DCL      9256--REDEF
QI$TRAN_FILE.WORD0
      9028**DCL      9029--REDEF
QI$TRAN_STATUS.INDICATORS
      9963**DCL      9995--REDEF
QI$TRAN_STATUS.INDICATORS.ENABLED_FLAGS
      9967**DCL      9972--REDEF
QI$TRAN_STATUS.INDICATORS.OPEN_FLAGS
      9979**DCL      9986--REDEF
QI$TRAN_STATUS.INDICATORS.STATE_FLAGS
      9973**DCL      9978--REDEF
QI$VARIABLE_IDENTIFIER.LENGTH
     11642**DCL     11643--IMP-SIZ
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:81   
QI@OTTER_SPACE
     17080**DCL     17082--REDEF   17083--REDEF   17333<<ASSIGN  17334--ASSIGN  17382--ASSIGN  17611<<ASSIGN
     17612--ASSIGN  17648--ASSIGN
QI_1.ACCUM
     10922**DCL     17159<<ASSIGN  17176--ASSIGN  17234--ASSIGN  17271--ASSIGN  17385--ASSIGN  17493--ASSIGN
     17598<<ASSIGN  17640--ASSIGN  17689--ASSIGN
QI_1.A_REG
     10916**DCL     17117<<ASSIGN  17136<<ASSIGN  17155<<ASSIGN  17191<<ASSIGN  17230<<ASSIGN  17300<<ASSIGN
     17330<<ASSIGN  17393<<ASSIGN  17431<<ASSIGN  17452<<ASSIGN  17487<<ASSIGN  17522<<ASSIGN  17555<<ASSIGN
     17575<<ASSIGN  17594<<ASSIGN  17657<<ASSIGN  17697<<ASSIGN
QI_1.BASE
     10171**DCL     10178--REDEF
QI_1.CURRENT.FILE$
     11062**DCL     11064--REDEF   11066--REDEF
QI_1.CURRENT.FILE_STATUS$
     11068**DCL     11070--REDEF   11072--REDEF
QI_1.DAD
     10866**DCL     10871--REDEF
QI_1.FILE_HEAD
     11049**DCL     11056--REDEF
QI_1.INSTR$
     10179**DCL     17115<<ASSIGN  17115>>ASSIGN  17123>>IF      17163>>ASSIGN  17165>>ASSIGN  17167<<ASSIGN
     17167>>ASSIGN  17229<<ASSIGN  17229>>ASSIGN  17286>>IF      17329<<ASSIGN  17329>>ASSIGN  17432<<ASSIGN
     17432>>ASSIGN  17439>>IF      17477>>ASSIGN  17505>>ASSIGN  17506<<ASSIGN  17506>>ASSIGN  17554<<ASSIGN
     17554>>ASSIGN  17562>>IF      17600>>ASSIGN  17601>>ASSIGN  17625>>ASSIGN  17662<<ASSIGN  17662>>ASSIGN
     17680>>ASSIGN  17681<<ASSIGN  17681>>ASSIGN
QI_1.IS_ALL_LIT
     10872**DCL     10877--REDEF
QI_1.IS_FORM_VARIABLE
     10878**DCL     10883--REDEF
QI_1.IS_TEMP
     10884**DCL     10889--REDEF
QI_1.MESSAGE_LINE_DAD.PSEUDO_CIP
     10982**DCL     11007--REDEF
QI_1.MESSAGE_LINE_DAD.PSEUDO_CIP.ALPHANUMERIC
     10984**DCL     10989--REDEF
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:82   
QI_1.MESSAGE_LINE_DAD.PSEUDO_CIP.NUMERIC.CB
     10990**DCL     10993--REDEF   10996--REDEF
QI_1.MESSAGE_LINE_DAD.WORD0
     10951**DCL     10952--REDEF
QI_1.OFFSET
     10890**DCL     10895--REDEF
QI_1.OP
     10249**DCL     17133<>CALL    17188<>CALL    17242<>CALL    17297<>CALL    17346<>CALL    17390<>CALL
     17449<>CALL    17500<>CALL    17519<>CALL    17572<>CALL    17622<>CALL    17643<>CALL    17654<>CALL
     17692<>CALL    17694<>CALL
QI_1.OP.CIP
     10251**DCL     10702--REDEF
QI_1.OP.CIP.AUX
     10617**DCL     10688--REDEF
QI_1.OP.CIP.AUX.CD
     10662**DCL     10665--REDEF   10669--REDEF   10672--REDEF
QI_1.OP.CIP.AUX_A
     10688**DCL     17232<<ASSIGN  17332<<ASSIGN
QI_1.OP.CIP.S
     10321**DCL     10392--REDEF   17688<<ASSIGN
QI_1.OP.CIP.S.CD
     10366**DCL     10369--REDEF   10373--REDEF   10376--REDEF
QI_1.OP.CIP.S_A
     10392**DCL     17269<<ASSIGN  17380<<ASSIGN  17645<<ASSIGN
QI_1.OP.CIP.T
     10469**DCL     10540--REDEF
QI_1.OP.CIP.T.CD
     10514**DCL     10517--REDEF   10521--REDEF   10524--REDEF
QI_1.OP.CIP.T_A
     10540**DCL     17169<<ASSIGN  17383<<ASSIGN  17490<<ASSIGN  17608<<ASSIGN  17637<<ASSIGN
QI_1.OP.DATA
     10709**DCL     10713--REDEF
QI_1.OP.DATA.AUX$
     10712**DCL     17234<<ASSIGN  17334<<ASSIGN
QI_1.OP.DATA.S$
     10710**DCL     17271<<ASSIGN  17382<<ASSIGN  17648<<ASSIGN  17689<<ASSIGN
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:83   
QI_1.OP.DATA.T$
     10711**DCL     17176<<ASSIGN  17385<<ASSIGN  17493<<ASSIGN  17612<<ASSIGN  17640<<ASSIGN
QI_1.OP.DEC.AUX
     10774**DCL     17233<<ASSIGN  17429<<ASSIGN  17509<<ASSIGN
QI_1.OP.DEC.S
     10772**DCL     17266>>ASSIGN  17270<<ASSIGN  17372>>ASSIGN  17381<<ASSIGN  17429>>ASSIGN  17485>>ASSIGN
     17486<<ASSIGN  17509>>ASSIGN  17646<<ASSIGN
QI_1.OP.DEC.T
     10773**DCL     17174<<ASSIGN  17266>>ASSIGN  17372>>ASSIGN  17384<<ASSIGN  17429>>ASSIGN  17491<<ASSIGN
     17510<<ASSIGN  17609<<ASSIGN  17638<<ASSIGN
QI_1.OP.FILL_CHAR
     10833**DCL     10836--REDEF
QI_1.OP.INX
     10766**DCL     10770--REDEF   10771--REDEF   10775--REDEF
QI_1.OP.LEN
     10749**DCL     10753--REDEF   10754--REDEF   10758--REDEF   10759--REDEF   10763--REDEF
QI_1.OP.LEN.AUX
     10752**DCL     11653--IMP-SIZ
QI_1.OP.LEN.S
     10750**DCL     11649--IMP-SIZ 17647<<ASSIGN
QI_1.OP.LEN.T
     10751**DCL     11651--IMP-SIZ 17175<<ASSIGN  17492<<ASSIGN  17610<<ASSIGN  17639<<ASSIGN  17649<<ASSIGN
QI_1.OP.PICTURE_STRING
     10819**DCL     10822--REDEF   10823--REDEF   10826--REDEF   10827--REDEF   10830--REDEF
QI_1.OP.ROUND
     10852**DCL     10853--REDEF   10854--REDEF   17691<<ASSIGN
QI_1.OP.SHIFT_COUNT.S
     10760**DCL     17690<<ASSIGN
QI_1.OP.SIZE_ERROR
     10836**DCL     17126<<ASSIGN  17130<<ASSIGN  17177<<ASSIGN  17192<<ASSIGN  17289<<ASSIGN  17294<<ASSIGN
     17386<<ASSIGN  17394<<ASSIGN  17442<<ASSIGN  17446<<ASSIGN  17494<<ASSIGN  17511<<ASSIGN  17523<<ASSIGN
     17565<<ASSIGN  17569<<ASSIGN  17613<<ASSIGN  17641<<ASSIGN  17650<<ASSIGN  17658<<ASSIGN
QI_1.OP.SRCH_VRFY_ELEMS
     10788**DCL     10791--REDEF
QI_1.OPENED_COUNT
     11057**DCL     11060--REDEF
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:84   
QI_1.OTTER_SPACE
     10896**DCL     10901--REDEF
QI_1.PICTURE_STRING
     10902**DCL     10907--REDEF
QI_1.SOURCE$
     10222**DCL     17165<<ASSIGN  17477<<ASSIGN  17505<<ASSIGN  17601<<ASSIGN  17625<<ASSIGN
QI_1.SPECIAL_NAMES
     11085**DCL     11094--REDEF
QI_1.TYPE
     10908**DCL     10913--REDEF
QI_16_BIT_BINARY
     16098**DCL     16168--REDEF
QI_16_BIT_BINARY.CB
     16117**DCL     16120--REDEF   16124--REDEF   16127--REDEF
QI_31_DIGIT_SLS_DISPLAY
     15931**DCL     16001--REDEF
QI_31_DIGIT_SLS_DISPLAY.CD
     15978**DCL     15981--REDEF   15985--REDEF   15988--REDEF
QI_31_DIGIT_ST_PACKED
     16433**DCL     16503--REDEF
QI_31_DIGIT_ST_PACKED.CP
     16466**DCL     16469--REDEF   16473--REDEF   16476--REDEF
QI_31_DIGIT_ST_PACKED_A
     16503**DCL     17332>>ASSIGN  17380>>ASSIGN  17608>>ASSIGN  17645>>ASSIGN
QI_32_BIT_BINARY
     16265**DCL     16335--REDEF
QI_32_BIT_BINARY.CB
     16284**DCL     16287--REDEF   16291--REDEF   16294--REDEF
QI_4_CHAR_ALPHANUMERIC
     15763**DCL     15833--REDEF
QI_4_CHAR_ALPHANUMERIC.CA
     15768**DCL     15772--REDEF   15775--REDEF   15778--REDEF
QI_ACCUMULATOR_DAD.CIP
     16776**DCL     16847--REDEF   17688>>ASSIGN
QI_ACCUMULATOR_DAD.CIP.CP
     16807**DCL     16810--REDEF   16814--REDEF   16817--REDEF
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:85   
QI_ACCUMULATOR_DAD.CIP_A
     16847**DCL     17169>>ASSIGN  17232>>ASSIGN  17269>>ASSIGN  17383>>ASSIGN  17490>>ASSIGN  17637>>ASSIGN
QI_ALR.CIP
     11728**DCL     12179--REDEF
QI_ALR.CIP.AUX
     12094**DCL     12165--REDEF
QI_ALR.CIP.AUX.CA
     12097**DCL     12101--REDEF   12104--REDEF   12107--REDEF
QI_ALR.CIP.S
     11798**DCL     11869--REDEF
QI_ALR.CIP.S.CA
     11801**DCL     11805--REDEF   11808--REDEF   11811--REDEF
QI_ALR.CIP.T
     11946**DCL     12017--REDEF
QI_ALR.CIP.T.CA
     11949**DCL     11953--REDEF   11956--REDEF   11959--REDEF
QI_ALR.DATA
     12186**DCL     12190--REDEF
QI_ALR.FILL_CHAR
     12310**DCL     12313--REDEF
QI_ALR.INX
     12243**DCL     12247--REDEF   12248--REDEF   12252--REDEF
QI_ALR.LEN
     12226**DCL     12230--REDEF   12231--REDEF   12235--REDEF   12236--REDEF   12240--REDEF
QI_ALR.PICTURE_STRING
     12296**DCL     12299--REDEF   12300--REDEF   12303--REDEF   12304--REDEF   12307--REDEF
QI_ALR.ROUND
     12329**DCL     12330--REDEF   12331--REDEF
QI_ALR.SRCH_VRFY_ELEMS
     12265**DCL     12268--REDEF
QI_MAT.CIP
     15067**DCL     15518--REDEF
QI_MAT.CIP.AUX
     15433**DCL     15504--REDEF
QI_MAT.CIP.AUX.CA
     15436**DCL     15440--REDEF   15443--REDEF   15446--REDEF
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:86   
QI_MAT.CIP.S
     15137**DCL     15208--REDEF
QI_MAT.CIP.S.CA
     15140**DCL     15144--REDEF   15147--REDEF   15150--REDEF
QI_MAT.CIP.T
     15285**DCL     15356--REDEF
QI_MAT.CIP.T.CA
     15288**DCL     15292--REDEF   15295--REDEF   15298--REDEF
QI_MAT.DATA
     15525**DCL     15529--REDEF
QI_MAT.DEC
     15593**DCL     15597--REDEF   15598--REDEF   15602--REDEF
QI_MAT.FILL_CHAR
     15649**DCL     15652--REDEF
QI_MAT.LEN
     15565**DCL     15569--REDEF   15570--REDEF   15574--REDEF   15575--REDEF   15579--REDEF
QI_MAT.PICTURE_STRING
     15635**DCL     15638--REDEF   15639--REDEF   15642--REDEF   15643--REDEF   15646--REDEF
QI_MAT.ROUND
     15668**DCL     15669--REDEF   15670--REDEF
QI_MAT.SRCH_VRFY_ELEMS
     15604**DCL     15607--REDEF
QI_PICTURE_STRING
     16601**DCL     16671--REDEF
QI_PICTURE_STRING.CA
     16606**DCL     16610--REDEF   16613--REDEF   16616--REDEF
QI_SRCH_VRFY.CIP
     14398**DCL     14849--REDEF
QI_SRCH_VRFY.CIP.AUX
     14764**DCL     14835--REDEF
QI_SRCH_VRFY.CIP.AUX.CA
     14767**DCL     14771--REDEF   14774--REDEF   14777--REDEF
QI_SRCH_VRFY.CIP.S
     14468**DCL     14539--REDEF
QI_SRCH_VRFY.CIP.S.CA
     14471**DCL     14475--REDEF   14478--REDEF   14481--REDEF
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:87   
QI_SRCH_VRFY.CIP.T
     14616**DCL     14687--REDEF
QI_SRCH_VRFY.CIP.T.CA
     14619**DCL     14623--REDEF   14626--REDEF   14629--REDEF
QI_SRCH_VRFY.DATA
     14856**DCL     14860--REDEF
QI_SRCH_VRFY.DEC
     14924**DCL     14928--REDEF   14929--REDEF   14933--REDEF
QI_SRCH_VRFY.FILL_CHAR
     14980**DCL     14983--REDEF
QI_SRCH_VRFY.ROUND
     14999**DCL     15000--REDEF   15001--REDEF
QI_SRCH_VRFY.SRCH_RESULT
     14940**DCL     14943--REDEF   14944--REDEF   14947--REDEF   14948--REDEF   14951--REDEF
QI_SRCH_VRFY.SRCH_VRFY_ARGS
     14864**DCL     14868--REDEF   14869--REDEF   14873--REDEF   14874--REDEF   14878--REDEF
QI_SRCH_VRFY.SRCH_VRFY_ELEMS
     14935**DCL     14938--REDEF
QI_TYPE_BINARY_TARGET.CIP
     13725**DCL     14176--REDEF
QI_TYPE_BINARY_TARGET.CIP.AUX
     14091**DCL     14162--REDEF
QI_TYPE_BINARY_TARGET.CIP.AUX.CA
     14094**DCL     14098--REDEF   14101--REDEF   14104--REDEF
QI_TYPE_BINARY_TARGET.CIP.S
     13795**DCL     13866--REDEF
QI_TYPE_BINARY_TARGET.CIP.S.CA
     13798**DCL     13802--REDEF   13805--REDEF   13808--REDEF
QI_TYPE_BINARY_TARGET.CIP.T
     13943**DCL     14014--REDEF
QI_TYPE_BINARY_TARGET.CIP.T.CB
     13960**DCL     13963--REDEF   13967--REDEF   13970--REDEF
QI_TYPE_BINARY_TARGET.DATA
     14183**DCL     14187--REDEF
QI_TYPE_BINARY_TARGET.DEC
     14251**DCL     14255--REDEF   14256--REDEF   14260--REDEF
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:88   
QI_TYPE_BINARY_TARGET.LEN
     14223**DCL     14227--REDEF   14228--REDEF   14232--REDEF   14233--REDEF   14237--REDEF
QI_TYPE_BINARY_TARGET.PICTURE_STRING
     14293**DCL     14296--REDEF   14297--REDEF   14300--REDEF   14301--REDEF   14304--REDEF
QI_TYPE_BINARY_TARGET.ROUND
     14326**DCL     14327--REDEF   14328--REDEF
QI_TYPE_BINARY_TARGET.SIZE_ERROR
     14312**DCL     14313--REDEF
QI_TYPE_BINARY_TARGET.SRCH_VRFY_ELEMS
     14262**DCL     14265--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP
     12393**DCL     12844--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.AUX
     12759**DCL     12830--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.AUX.CA
     12762**DCL     12766--REDEF   12769--REDEF   12772--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.S
     12463**DCL     12534--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.S.CD
     12508**DCL     12511--REDEF   12515--REDEF   12518--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.T
     12611**DCL     12682--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.T.CA
     12614**DCL     12618--REDEF   12621--REDEF   12624--REDEF
QI_TYPE_DISPLAY_SOURCE.DATA
     12851**DCL     12855--REDEF
QI_TYPE_DISPLAY_SOURCE.DEC
     12919**DCL     12923--REDEF   12924--REDEF   12928--REDEF
QI_TYPE_DISPLAY_SOURCE.LEN
     12891**DCL     12895--REDEF   12896--REDEF   12900--REDEF   12901--REDEF   12905--REDEF
QI_TYPE_DISPLAY_SOURCE.PICTURE_STRING
     12961**DCL     12964--REDEF   12965--REDEF   12968--REDEF   12969--REDEF   12972--REDEF
QI_TYPE_DISPLAY_SOURCE.ROUND
     12994**DCL     12995--REDEF   12996--REDEF
QI_TYPE_DISPLAY_SOURCE.SIZE_ERROR
     12980**DCL     12981--REDEF
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:89   
QI_TYPE_DISPLAY_SOURCE.SRCH_VRFY_ELEMS
     12930**DCL     12933--REDEF
QI_TYPE_DISPLAY_TARGET.CIP
     13059**DCL     13510--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.AUX
     13425**DCL     13496--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.AUX.CA
     13428**DCL     13432--REDEF   13435--REDEF   13438--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.S
     13129**DCL     13200--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.S.CA
     13132**DCL     13136--REDEF   13139--REDEF   13142--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.T
     13277**DCL     13348--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.T.CD
     13322**DCL     13325--REDEF   13329--REDEF   13332--REDEF
QI_TYPE_DISPLAY_TARGET.DATA
     13517**DCL     13521--REDEF
QI_TYPE_DISPLAY_TARGET.DEC
     13585**DCL     13589--REDEF   13590--REDEF   13594--REDEF
QI_TYPE_DISPLAY_TARGET.LEN
     13557**DCL     13561--REDEF   13562--REDEF   13566--REDEF   13567--REDEF   13571--REDEF
QI_TYPE_DISPLAY_TARGET.PICTURE_STRING
     13627**DCL     13630--REDEF   13631--REDEF   13634--REDEF   13635--REDEF   13638--REDEF
QI_TYPE_DISPLAY_TARGET.ROUND
     13660**DCL     13661--REDEF   13662--REDEF
QI_TYPE_DISPLAY_TARGET.SIZE_ERROR
     13646**DCL     13647--REDEF
QI_TYPE_DISPLAY_TARGET.SRCH_VRFY_ELEMS
     13596**DCL     13599--REDEF
QI_ZERO_ACCUMULATOR
     11439**DCL     17159>>ASSIGN  17333>>ASSIGN  17598>>ASSIGN  17611>>ASSIGN
REAL_DECIMAL
     17059**DCL     17266<<ASSIGN  17270>>ASSIGN  17372<<ASSIGN  17381>>ASSIGN
SAVE_T_DEC
     17056**DCL     17485<<ASSIGN  17509>>ASSIGN
PL6.E3A0      #001=QBX$ARITHMETICS File=QBX$ARITHMETICS.:E05TSI                  WED 07/30/97 05:00 Page:90   
SHIFT_POSITIONS
     17061**DCL     17683<<ASSIGN  17685>>IF      17690>>ASSIGN
STOMP_ACCUM_MULTX
     17519**LABEL   17524--GOTO
SUBX_STOMP_ACCUM
     17654**LABEL   17659--GOTO
