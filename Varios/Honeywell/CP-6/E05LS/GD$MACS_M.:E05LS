

14:32 JUL 28 '97 GD$MACS_M.:E05SI                                          1    
    1      /*M* GD$MACS_M Various debugger macros                                        */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X*             */
    8      /*
    9        This macro is used in the debugger to setup and send a short two byte
   10        responce to the host
   11                                                                                    */
   12      %MACRO GD_RESPONSE(CODE=CODE);
   13              DO;
   14                 GD$MSG.SUBFNC=GD$MSG.FNC;
   15                 GD$MSG.FNC=CODE;
   16                 SIZE=2;
   17                 CALL GDI$SEND_RESPONSE(SIZE,BUFFER);
   18      END;
   19      %MEND;
   20
   21
   22                /*F* NAME: GD$FD_PROC.
   23                The GD$FD_PROC macro may be used to generate the structure
   24                for the first few words in a Front-end Debugger procedure
   25                segment.  The fields within this structure are:
   26                */
   27
   28      %MACRO GD$FD_PROC (FPTN=GD$FD_PROC,
   29         INIT$$=NIL,
   30         STATE_CHANGE$$=NIL,
   31         DS_SZ=0,
   32         STK_SZ=0,
   33         STCLASS=BASED);
   34
   35      %LSET LISTDIR='0'B;
   36      %LSET LISTEXP='1'B;
   37      %LSET LISTCOM='0'B;
14:32 JUL 28 '97 GD$MACS_M.:E05SI                                          2    
   38      %LSET LISTSUB='1'B;
   39      %LSET STR=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
   40      %IF (STR='STA') OR (STR='CON') OR STR='EXT';
   41      %LSET INIT=CHARTEXT(' INIT');
   42      %LSET EINIT=CHARTEXT('');
   43      %ELSE;
   44      %LSET INIT=CHARTEXT('/*');
   45      %LSET EINIT=CHARTEXT('*/');
   46      %ENDIF;
   47
   48      DCL 1 FPTN STCLASS WALIGNED,
   49            2 %CHARTEXT('INIT$$') EPTR %INIT(ENTADDR(INIT$$))%EINIT,
   50                /*K* INIT$$ - EPTR.  Contains the address of the FD
   51                initialization routine.
   52                */
   53            2 %CHARTEXT('STATE_CHANGE$$') EPTR %INIT(ENTADDR(STATE_CHANGE$$))%EINIT,
   54                /*K* STATE_CHANGE$$ - EPTR.  Contains the address of the
   55                FD normal user state change entry point.
   56                */
   57            2 %CHARTEXT('DS_SZ') UBIN WORD %INIT(DS_SZ)%EINIT,
   58                /*K* DS_SZ - UBIN WORD.  Contains the word size of the FD
   59                data segment that is to be allocated.  This does not include
   60                the FD stack size.
   61                */
   62            2 %CHARTEXT('STK_SZ') UBIN WORD %INIT(STK_SZ)%EINIT;
   63                /*K* STK_SZ - UBIN WORD.  Contains the word size of the FD
   64                stack that is to be allocated.  The stack will be allocated
   65                at the end of the FD data segment.
   66                */
   67
   68      %MEND;
   69
   70
   71
   72
   73
   74
14:32 JUL 28 '97 GD$MACS_M.:E05SI                                          3    
   75                /*F* NAME: GD$FD_DS.
   76                The GD$FD_DS macro may be used to generate the structure
   77                for the first few words in a Front-end Debugger dynamic data segment
   78                segment.  When using the GD$FD_DS macro, the GU_LCP6_M
   79                file should be INCLUDEd.  Fields within this structure are:
   80                */
   81
   82      %MACRO GD$FD_DS (FPTN=GD$FD_DS,
   83         LAST(YES=";",NO=",",ANY)=";",
   84         STCLASS=BASED);
   85
   86      %LSET LISTDIR='0'B;
   87      %LSET LISTEXP='1'B;
   88      %LSET LISTCOM='0'B;
   89      %LSET LISTSUB='1'B;
   90
   91      DCL 1 FPTN STCLASS WALIGNED,
   92            2 STK_PTR PTR,
   93                /*K* STK_PTR - PTR.  This pointer will be initialized by
   94                the LCP-6 trap handler to contain the pointer to the FD's
   95                stack.
   96                */
   97           %G_TRAP_BLOCK(FPTN=TRAP,LVL=2,LAST=NO,DB_DS=YES,STCLASS=STCLASS);
   98                /*K* TRAP.name  is a REDEF of the TRAP_BITS array,
   99                where "name" matches the EQU for the trap number as
  100                defined in the file G_LCP6_E.  Note that "name" does
  101                not contain the "G_" that preceeds the EQU nor the
  102                trailing "#".
  103                */
  104            2 TRAP_BITS(0:63) REDEF TRAP BIT(1) UNAL,
  105                /*K* TRAP_BITS - ARRAY BIT(1).  This 64 bit array may be indexed
  106                by the TRAP# field of the TSA.  The LCP-6 trap handler will give
  107                control to the FD for each trap that has its corresponding bit
  108                set to 1.  These bits are all initialized as on and may be
  109                reset by the FD if it does not want to receive control on any
  110                specific trap.
  111                */
14:32 JUL 28 '97 GD$MACS_M.:E05SI                                          4    
  112            2 TRAPS(0:1) REDEF TRAP SBIN(32) LAST
  113                 /*K* TRAPS - ARRAY(0:1) SBIN(32) is a REDEF of TRAP_BITS.
  114                 */
  115      %MEND;
  116      %MACRO GD$DD(FPTN=GD$DD,STCLASS=BASED);
  117
  118      DCL 1 FPTN STCLASS,
  119            2 DESCWD(0:0) UBIN;
  120      %MEND;

