VERSION E05

PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:1    
        1        1        /*M*      KFA$ASYNC - frog async process          */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* CCE CRM 70 IND 5 ECU 10 THI 0 DCI 10 CSU 5 ENU 5 */
        8        8        /*F*     NAME: KFA$ASYNC
        9        9                 PURPOSE:  Handle async events for frog.
       10       10                 DESCRIPTION:  This entry point was given to the monitor a
       11       11                      an event entry point.  This routine handles:
       12       12                           Open events from user opens to the fecg.
       13       13                           No-wait read completion on the M$fe dcb. (to the fecg).
       14       14                           No-read completion on the M$CS dcb.  ( to the cscg).
       15       15                 REFERENCE:  See KC$LPAR and B$CGAU for a description
       16       16                           of the information the monitor passes to us.
       17       17        */
       18       18        /*D*     NAME: KFA$ASYNC
       19       19                 CALL: By the monitor on an event occurance
       20       20                 INTERFACE: KFB$BLD_TBL - when someone opens to fecg.
       21       21                           KFE$ERP - whne we get an event we dont understand
       22       22                           KFA$BLD_Q - build a event queue entry for processing
       23       23                                by KFM$MAINFRG.
       24       24                 DESCRIPTION:  As asynchronous events occur, the monitor calls this
       25       25                      routine to process them.  For all events, build an entry in
       26       26                      the event queue and exit.  KFM$MAINFRG  will process the information
       27       27                      the event queue and exit.
       28       28                      Fecg admin user event:
       29       29                           Open event - terminal and dcb - build a queue entry.
       30       30                           Close event - terminal and dcb - bulld a queue entry.
       31       31                      Fecg no-wait read complete - build an event queue entry for later
       32       32                           processing by kfm.
       33       33                      Cscg no-wait read complete - build an event queue entry for later
       34       34                           processing by kfm.
       35       35        */
       36       36        KFA$ASYNC: PROC ASYNC;
       37       37        /**/
PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:2    
       38       38        %INCLUDE CP_6;
       39      119        /*        PLACE ALL SUB FILES HERE      */
       40      120        /**/
       41      121        /*        The following include files are for handling
       42      122                  events as they come in.  The event information
       43      123                  is on the tcb frame.                         */
       44      124        /**/
       45      125        /**/
       46      126        %B$TCB;
       47      129        %B$NWIO (STCLASS ="BASED(Y$STK$)");
       48      214        /**/
       49      215        %INCLUDE KF$MSG_C;
       50      282        %INCLUDE KF$MSG_SUBS;
       51      328        %INCLUDE KF$SUBS;
       52      395        %INCLUDE KF_DAT_R;
       53      414        /**/
       54      415    1   DCL EV_CODE UBIN WORD;
       55      416        /**/
       56      417    1   DCL B$TCB$ PTR SYMREF;
       57      418    1   DCL Y$STK$ PTR ;
       58      419    1   DCL Y$LPAR$ PTR;
       59      420    1   DCL SEVENT UBIN WORD;
       60      421    1   DCL Y$STA CHAR(8);
       61      422    1   DCL Y$SVFLG UBIN WORD;
       62      423        %KF$MSG;
       63      428        /**/
       64      429    1   DCL KFE$ERP ENTRY(1);
       65      430
       66      431        /*
       67      432                 Move all pertinent data to the event queue
       68      433        */
       69      434    2           DO INHIBIT;
       70      435    2                Y$STK$ = B$TCB$->B$TCB.STK$;
       71      436    2                IF B$NWIO.EVID = %EV_READ_CSCG## AND
       72      437    3                  ADDR(KF_CSCG_INBUF)->KF$MSG.MSG_ID = %KF_MSGC_SLUG_SAYS_GO# THEN DO;
       73      438    3                     KF_WAIT4SLUG = '0'B;
       74      439    3                     RETURN;
PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:3    
       75      440    3                END;                       /* IF                       */
       76      441    2                KF_EVCOUNT = KF_EVCOUNT+1;
       77      442    2                KF_EVMSG_QUEUE.EVID(KF_QINSERT) = B$NWIO.EVID;
       78      443    2                KF_EVMSG_QUEUE.SCOD(KF_QINSERT) = B$NWIO.SUBC;
       79      444        /*
       80      445                           NOW UPDATE THE QUEUE POINTER
       81      446        */
       82      447    2                IF KF_QINSERT = %KF_EVMAX## THEN KF_QINSERT = 0;
       83      448    2                ELSE KF_QINSERT = KF_QINSERT + 1;
       84      449    2           END;                            /*END OF DO INHIBIT*/
       85      450    1           RETURN;
       86      451    1   END;

PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:4    
--  Include file information  --

   KF_DAT_R.:E05TOU  cannot be made into a system file and is referenced.
   KF$SUBS.:E05TOU  is referenced.
   KF$MSG_SUBS.:E05TOU  is referenced.
   KF$MSG_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KFA$ASYNC.

   Procedure KFA$ASYNC requires 36 words for executable code.
   Procedure KFA$ASYNC requires 10 words of local(AUTO) storage.

    No errors detected in file KFA$ASYNC.:E05TSI    .

PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:5    

 Object Unit name= KFA$ASYNC                                  File name= KFA$ASYNC.:E05TOU
 UTS= JUL 30 '97 00:19:33.60 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$FE
    2   DCB   even  none     0      0  M$CS
    3   DCB   even  none     0      0  M$HLPF
    4   DCB   even  none     0      0  M$PROF
    5   DCB   even  none     0      0  M$NETCON
    6   Proc  even  none    36     44  KFA$ASYNC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     6      0   yes            yes     Async       0  KFA$ASYNC

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AAUTO
                       nStd      0 X66_AARET
PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:6    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KF_EVMSG_QUEUE                        KF_QINSERT
     KF_WAIT4SLUG                          KF_EVCOUNT                            KF_CSCG_INBUF
     M$FE                                  M$CS                                  M$HLPF
     M$PROF                                M$NETCON                              B$TCB$
PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:7    


        1        1        /*M*      KFA$ASYNC - frog async process          */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* CCE CRM 70 IND 5 ECU 10 THI 0 DCI 10 CSU 5 ENU 5 */
        8        8        /*F*     NAME: KFA$ASYNC
        9        9                 PURPOSE:  Handle async events for frog.
       10       10                 DESCRIPTION:  This entry point was given to the monitor a
       11       11                      an event entry point.  This routine handles:
       12       12                           Open events from user opens to the fecg.
       13       13                           No-wait read completion on the M$fe dcb. (to the fecg).
       14       14                           No-read completion on the M$CS dcb.  ( to the cscg).
       15       15                 REFERENCE:  See KC$LPAR and B$CGAU for a description
       16       16                           of the information the monitor passes to us.
       17       17        */
       18       18        /*D*     NAME: KFA$ASYNC
       19       19                 CALL: By the monitor on an event occurance
       20       20                 INTERFACE: KFB$BLD_TBL - when someone opens to fecg.
       21       21                           KFE$ERP - whne we get an event we dont understand
       22       22                           KFA$BLD_Q - build a event queue entry for processing
       23       23                                by KFM$MAINFRG.
       24       24                 DESCRIPTION:  As asynchronous events occur, the monitor calls this
       25       25                      routine to process them.  For all events, build an entry in
       26       26                      the event queue and exit.  KFM$MAINFRG  will process the information
       27       27                      the event queue and exit.
       28       28                      Fecg admin user event:
       29       29                           Open event - terminal and dcb - build a queue entry.
       30       30                           Close event - terminal and dcb - bulld a queue entry.
       31       31                      Fecg no-wait read complete - build an event queue entry for later
       32       32                           processing by kfm.
       33       33                      Cscg no-wait read complete - build an event queue entry for later
       34       34                           processing by kfm.
       35       35        */
       36       36        KFA$ASYNC: PROC ASYNC;
PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:8    

     36  6 000000   000000 700200 xent  KFA$ASYNC    TSX0  ! X66_AAUTO
         6 000001   000012 000000                    ZERO    10,0

       37       37        /**/
       38       38        %INCLUDE CP_6;
       39      119        /*        PLACE ALL SUB FILES HERE      */
       40      120        /**/
       41      121        /*        The following include files are for handling
       42      122                  events as they come in.  The event information
       43      123                  is on the tcb frame.                         */
       44      124        /**/
       45      125        /**/
       46      126        %B$TCB;
       47      129        %B$NWIO (STCLASS ="BASED(Y$STK$)");
       48      214        /**/
       49      215        %INCLUDE KF$MSG_C;
       50      282        %INCLUDE KF$MSG_SUBS;
       51      328        %INCLUDE KF$SUBS;
       52      395        %INCLUDE KF_DAT_R;
       53      414        /**/
       54      415    1   DCL EV_CODE UBIN WORD;
       55      416        /**/
       56      417    1   DCL B$TCB$ PTR SYMREF;
       57      418    1   DCL Y$STK$ PTR ;
       58      419    1   DCL Y$LPAR$ PTR;
       59      420    1   DCL SEVENT UBIN WORD;
       60      421    1   DCL Y$STA CHAR(8);
       61      422    1   DCL Y$SVFLG UBIN WORD;
       62      423        %KF$MSG;
       63      428        /**/
       64      429    1   DCL KFE$ERP ENTRY(1);
       65      430
       66      431        /*
       67      432                 Move all pertinent data to the event queue
       68      433        */
       69      434    2           DO INHIBIT;
PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:9    

       70      435    2                Y$STK$ = B$TCB$->B$TCB.STK$;

    435  6 000002   000000 470600 xsym               LDP0  ! B$TCB$
         6 000003   000001 236300                    LDQ   ! 1,,PR0
         6 000004   200004 756300                    STQ   ! Y$STK$,,AUTO

       71      436    2                IF B$NWIO.EVID = %EV_READ_CSCG## AND

    436  6 000005   200004 471700                    LDP1  ! Y$STK$,,AUTO
         6 000006   100101 235300                    LDA   ! 65,,PR1
         6 000007   000003 115207                    CMPA  ! 3,DL
         6 000010   000017 601200 6                  TNZ   ! s:441
         6 000011   000000 236200 xsym               LDQ   ! KF_CSCG_INBUF
         6 000012   777000 376203                    ANQ   ! -512,DU
         6 000013   013000 116203                    CMPQ  ! 5632,DU
         6 000014   000017 601200 6                  TNZ   ! s:441

       72      437    3                  ADDR(KF_CSCG_INBUF)->KF$MSG.MSG_ID = %KF_MSGC_SLUG_SAYS_GO# THEN DO;

       73      438    3                     KF_WAIT4SLUG = '0'B;

    438  6 000015   000000 450200 xsym               STZ   ! KF_WAIT4SLUG

       74      439    3                     RETURN;

    439  6 000016   000000 702200 xent               TSX2  ! X66_AARET

       75      440    3                END;                       /* IF                       */
       76      441    2                KF_EVCOUNT = KF_EVCOUNT+1;

    441  6 000017   000000 236200 xsym               LDQ   ! KF_EVCOUNT
         6 000020   000001 036207                    ADLQ  ! 1,DL
         6 000021   000000 756200 xsym               STQ   ! KF_EVCOUNT

       77      442    2                KF_EVMSG_QUEUE.EVID(KF_QINSERT) = B$NWIO.EVID;

PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:10   
    442  6 000022   000000 235200 xsym               LDA   ! KF_QINSERT
         6 000023   000001 735200                    ALS   ! 1
         6 000024   000000 620205                    EAX0  ! 0,AL
         6 000025   100101 235300                    LDA   ! 65,,PR1
         6 000026   000000 755210 xsym               STA   ! KF_EVMSG_QUEUE,X0

       78      443    2                KF_EVMSG_QUEUE.SCOD(KF_QINSERT) = B$NWIO.SUBC;

    443  6 000027   000000 235200 xsym               LDA   ! KF_QINSERT
         6 000030   000001 735200                    ALS   ! 1
         6 000031   100100 236300                    LDQ   ! 64,,PR1
         6 000032   777777 376207                    ANQ   ! -1,DL
         6 000033   000001 756205 xsym               STQ   ! KF_EVMSG_QUEUE+1,AL

       79      444        /*
       80      445                           NOW UPDATE THE QUEUE POINTER
       81      446        */
       82      447    2                IF KF_QINSERT = %KF_EVMAX## THEN KF_QINSERT = 0;

    447  6 000034   000000 235200 xsym               LDA   ! KF_QINSERT
         6 000035   000062 115207                    CMPA  ! 50,DL
         6 000036   000041 601200 6                  TNZ   ! s:448

    447  6 000037   000000 450200 xsym               STZ   ! KF_QINSERT
         6 000040   000043 710200 6                  TRA   ! s:450

       83      448    2                ELSE KF_QINSERT = KF_QINSERT + 1;

    448  6 000041   000001 035207                    ADLA  ! 1,DL
         6 000042   000000 755200 xsym               STA   ! KF_QINSERT

       84      449    2           END;                            /*END OF DO INHIBIT*/

       85      450    1           RETURN;

    450  6 000043   000000 702200 xent               TSX2  ! X66_AARET
       86      451    1   END;
PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:11   

PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:12   
--  Include file information  --

   KF_DAT_R.:E05TOU  cannot be made into a system file and is referenced.
   KF$SUBS.:E05TOU  is referenced.
   KF$MSG_SUBS.:E05TOU  is referenced.
   KF$MSG_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KFA$ASYNC.
PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:13   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 Y$STK$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/c CHAR(1024)  r     1 KF_CSCG_INBUF
     0-0-0/w UBIN        r     1 KF_EVCOUNT
     0-0-0/w STRC(72)    r     1 KF_EVMSG_QUEUE(0:50)
     0-0-0/w UBIN        r     1 KF_QINSERT                 0-0-0/b BIT         r     1 KF_WAIT4SLUG

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2880)  r     1 B$NWIO                     0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w STRC(18)    r     1 KF$MSG


   Procedure KFA$ASYNC requires 36 words for executable code.
   Procedure KFA$ASYNC requires 10 words of local(AUTO) storage.

    No errors detected in file KFA$ASYNC.:E05TSI    .
PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:14   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KFA$ASYNC File=KFA$ASYNC.:E05TSI                              WED 07/30/97 00:19 Page:15   
          MINI XREF LISTING

B$NWIO.CGPARM.MSGIDXT
       163**DCL       166--REDEF
B$NWIO.CODE
       132**DCL       132--REDEF     133--REDEF     133--REDEF
B$NWIO.ERR.ERR#
       134**DCL       134--REDEF
B$NWIO.EVID
       133**DCL       133--REDEF     133--REDEF     436>>IF        442>>ASSIGN
B$NWIO.SUBC
       133**DCL       443>>ASSIGN
B$TCB.STK$
       127**DCL       435>>ASSIGN
B$TCB$
       417**DCL       435>>ASSIGN
KF$MSG.MSG_ID
       425**DCL       436>>IF
KF_CSCG_INBUF
       406**DCL       436--IF
KF_EVCOUNT
       404**DCL       441<<ASSIGN    441>>ASSIGN
KF_EVMSG_QUEUE.EVID
       403**DCL       442<<ASSIGN
KF_EVMSG_QUEUE.SCOD
       403**DCL       443<<ASSIGN
KF_QINSERT
       403**DCL       442>>ASSIGN    443>>ASSIGN    447>>IF        447<<ASSIGN    448<<ASSIGN    448>>ASSIGN
KF_UTBL.STATION
       408**DCL       408--REDEF
KF_WAIT4SLUG
       404**DCL       438<<ASSIGN
Y$STK$
       418**DCL       132--IMP-PTR   435<<ASSIGN    436>>IF        442>>ASSIGN    443>>ASSIGN
