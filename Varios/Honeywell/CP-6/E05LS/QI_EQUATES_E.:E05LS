

15:13 JUL 28 '97 QI_EQUATES_E.:E05SI                                       1    
    1      /*M* QI_EQUATES_E:  General EQUates for the FPL interpreter.  */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      %EQU QI#DATA = 0;
    9      %EQU QI#PROC = 1;
   10      %EQU QI#INTR = 2;
   11
   12      %EQU QI#SOURCE = 0;
   13      %SET QI#DEFAULT_SOURCE = QI#SOURCE;
   14      %EQU QI#TARGET = 1;
   15      %SET QI#DEFAULT_TARGET = QI#TARGET;
   16      %EQU QI#AUX = 2;
   17      %EQU QI#PICTURE_STRING = 2;
   18      %EQU QI#DE_EDIT = 2;
   19      /*
   20               internal mode control values
   21      */
   22      %SET QI#DEBUG = '1'B;
   23      %SET QI#RETRY_COUNT_IMPLEMENTED = '0'B;
   24      %SET QI#ABORT_DUMP = 1;
   25      %SET QI#HAVE_USE_PROC = 0;
   26      %EQU QI#ERROR_MESSAGE_LINE_SIZE = 72;
   27                        /* Error message line byte size  */
   28      %EQU QI#ERROR_MESSAGE_BLINKING = '1'B;
   29                        /* 1 will give the error message line
   30                           ERROR visual-attribute  */
   31      %EQU QI#ERROR_STATUS_BYTE_SIZE = 8;
   32                        /* ERROR STATUS variable byte size */
   33      %EQU QI#ERR_ST_FILL_WORD = BITBIN('3000'X);
   34      %EQU QI#OP_TEXT_BYTE_SIZE = 2;
   35                        /* ERROR STATUS variable statement sub-field
   36                           byte size  */
   37      %EQU QI#HAVE_ARRAY_BOUNDS = '0'B;
15:13 JUL 28 '97 QI_EQUATES_E.:E05SI                                       2    
   38      /*
   39               Dimensional EQUates.
   40               (Values for QI$...DAD.WORD0_FLAGS.DIMENSION_COUNT.)
   41      */
   42      %EQU QI#MAXIMUM_DIMENSION = 3;
   43      %EQU QI#ELEMENTARY_ITEM = 0;
   44      %EQU QI#ONE_DIMENSIONAL_ITEM = 1;
   45      %EQU QI#TWO_DIMENSIONAL_ITEM = 2;
   46      %EQU QI#THREE_DIMENSIONAL_ITEM = 3;
   47      /*
   48               TYPE declarations
   49      */
   50      %EQU QI#TYPE_DISPLAY = 0;
   51      %EQU QI#TYPE_PACKED = 1;
   52      %EQU QI#TYPE_BINARY = 2;
   53      %EQU QI#TYPE_ALPHANUMERIC = 3;
   54      %EQU QI#TYPE_BIT = 4;
   55      /*
   56               values 5-7 are reserved for future use
   57      */
   58      %EQU QI#TYPE_MINOR = 8;
   59      %EQU QI#TYPE_MAJOR = 9;
   60      %EQU QI#TYPE_FRAME = 10;
   61      %EQU QI#TYPE_FORM = 11;
   62      %EQU QI#TYPE_TRANSACTION = 12;
   63      /*
   64               values 13-15 are reserved for future use
   65      */
   66      /*
   67               IO codes for FIELD variables
   68      */
   69      %EQU QI#IO_VALUE_INPUT = 1;
   70      %EQU QI#IO_VALUE_OUTPUT = 2;
   71      %EQU QI#IO_VALUE_IO = 3;
   72      /*
   73               ENABLEd codes for FIELD variables
   74      */
15:13 JUL 28 '97 QI_EQUATES_E.:E05SI                                       3    
   75      %EQU QI#DISABLED = 0;
   76      %EQU QI#ENABLED_INPUT = 1;
   77      %EQU QI#ENABLED_OUTPUT = 2;
   78      %EQU QI#ENABLED_IO = 3;
   79      /*
   80               state codes for FIELD variables
   81      */
   82      %EQU QI#STATE_NULL = 0;   /* NULL STATE */
   83      %EQU QI#STATE_AVAIL_OUTPUT = 1;   /* DATA WAS LAST PRESENTED */
   84      %EQU QI#STATE_AVAIL_VERIFY = 2;   /* DATA WAS LAST READ */
   85      /*
   86               VISUAL-ATTRIBUTE codes
   87      */
   88      %EQU QI#NO_VISUAL_ATTRIBUTE = 0;
   89      %EQU QI#NULL_VISUAL_ATTRIBUTE = 1;
   90      %EQU QI#HIDDEN_VISUAL_ATTRIBUTE = 2;
   91      %EQU QI#EMPHASIS_VISUAL_ATTRIBUTE = 3;
   92      %EQU QI#INPUT_VISUAL_ATTRIBUTE = 4;
   93      %EQU QI#OUTPUT_VISUAL_ATTRIBUTE = 5;
   94      %EQU QI#ERROR_VISUAL_ATTRIBUTE = 6;
   95      %EQU QI#WARNING_VISUAL_ATTRIBUTE = 7;
   96      %EQU QI#INITIAL_VISUAL_ATTRIBUTE = 8;
   97      /*
   98               values for string decimal signs
   99      */
  100      %EQU QI#CD_UNSIGNED = 0;
  101      %EQU QI#CD_TRAIL_OVER = 1;
  102      %EQU QI#CD_LEAD_SEP = 2;
  103      %EQU QI#CD_TRAIL_SEP = 3;
  104      %EQU QI#CD_SIGN_TRAILING_OVER = 1;
  105      %EQU QI#CD_SIGN_LEADING_SEPARATE = 2;
  106      %EQU QI#CD_SIGN_TRAILING_SEPARATE = 3;
  107      /*
  108               values for packed decimal signs
  109      */
  110      %EQU QI#CP_UNSIGNED = 0;
  111      %EQU QI#CP_SIGN_TRAILING = 1;
15:13 JUL 28 '97 QI_EQUATES_E.:E05SI                                       4    
  112      /*
  113               sign conventions for string decimals
  114      */
  115      %EQU QI#DEC_POS_SEP_SIGN = BITBIN('2B'X);
  116
  117      %EQU QI#DEC_NEG_SEP_SIGN = BITBIN('2D'X);
  118
  119      %EQU QI#DEC_POS_OVER_SIGN = BITBIN('30'X);
  120
  121      %EQU QI#DEC_POS_ZONE = '30'X;
  122      /*
  123               sign conventions for packed decimals
  124      */
  125      %EQU QI#PACK_POS_SIGN = BITBIN('B'X);
  126      %EQU QI#PACK_NEG_SIGN = BITBIN('D'X);
  127      /*
  128               characters
  129      */
  130      %EQU QI#BLANK = ASCBIN(' ');
  131      %EQU QI#BLANK_WORD = BITBIN('2020'X);
  132      %EQU QI#BLANK_LEFT_HALF = BITBIN('2000'X);
  133      %EQU QI#CIP_BLANK_FILL = QI#BLANK;
  134      %EQU QI#BLANK_RIGHT_HALF = QI#BLANK;
  135
  136      %EQU QI#SLASH = ASCBIN('/');
  137      %EQU QI#SLASH_WORD = BITBIN('2F2F'X);
  138      %EQU QI#SLASH_LEFT_HALF = BITBIN('2F00'X);
  139      %EQU QI#CIP_SLASH_FILL = QI#SLASH;
  140      %EQU QI#SLASH_RIGHT_HALF = QI#SLASH;
  141
  142      %EQU QI#ZERO = ASCBIN('0');
  143      %EQU QI#ZERO_WORD = BITBIN('3030'X);
  144      %EQU QI#ZERO_LEFT_HALF = BITBIN('3000'X);
  145      %EQU QI#CIP_ZERO_FILL = QI#ZERO;
  146      %EQU QI#ZERO_RIGHT_HALF = QI#ZERO;
  147
  148      %EQU QI#PLUS = ASCBIN('+');
15:13 JUL 28 '97 QI_EQUATES_E.:E05SI                                       5    
  149      %EQU QI#MINUS = ASCBIN('-');
  150      %EQU QI#ASTERISK = ASCBIN('*');
  151      %EQU QI#DOLLAR_SIGN = ASCBIN('$');
  152      %EQU QI#COMMA = ASCBIN(',');
  153      %EQU QI#PERIOD = ASCBIN('.');
  154
  155      %EQU QI#BINARY_ZERO = 0;
  156      %EQU QI#MAT_MATCH = 1;
  157      %EQU QI#MAT_NONMATCH = 0;
  158      /*
  159               common address syllables
  160      */
  161      %EQU QI#CIP_DEFAULT_AS = BITBIN('B'X);
  162      %EQU QI#CIP_INDEXED_SOURCE_AS = BITBIN('1B'X);
  163      %EQU QI#CIP_INDEXED_TARGET_AS = BITBIN('2B'X);
  164      /*
  165               lengths of stuff
  166      */
  167      %EQU QI#MAXIMUM_FIELD_LENGTH = 256;
  168      %EQU QI#MAX_CIP_ALPHA_MOVE = 255;
  169      %EQU QI#MAX_CIP_NUMERIC = 31;
  170      %EQU QI#MIN_BINARY_LENGTH = 2;
  171      %EQU QI#MAX_BINARY_LENGTH = 4;
  172      %EQU QI#MIN_BINARY_DIGIT_COUNT = 5;
  173      %EQU QI#MAX_BINARY_DIGIT_COUNT = 10;
  174      %EQU QI#MIN_DISPLAY = 1;
  175      %EQU QI#MIN_DISPLAY_LENGTH = 1;
  176      %EQU QI#MAX_DISPLAY = 15;
  177      %EQU QI#MAX_DISPLAY_LEN = 15;
  178      %EQU QI#MAX_DISPLAY_LENGTH = 15;
  179      /*
  180               accumulator attributes
  181      */
  182      %EQU QI#ACCUMULATOR_DEC = 15;  /* IMPLIED DEC POSITION */
  183      %EQU QI#ACCUMULATOR_LEN = 31;  /* LENGTH OF ACCUMULATOR */
  184      %EQU QI#ACCUMULATOR_OFFSET = 0;   /* IMPLIED OFFSET(ATOM) */
  185      %EQU QI#ACCUMULATOR_TYPE = QI#TYPE_PACKED; /* IMPLIED DATA TYPE OF ACCUMULATOR */
15:13 JUL 28 '97 QI_EQUATES_E.:E05SI                                       6    
  186      /*
  187               PICture string stuff
  188      */
  189      %EQU QI#ALPHANUMERIC_PICTURE_STRING = 0;
  190      %EQU QI#NUMERIC_PICTURE_STRING = 1;
  191      %EQU QI#PIC_M_9_A_X = 0;
  192      %EQU QI#PIC_M_B = 1;
  193      %EQU QI#PIC_M_0 = 2;
  194      %EQU QI#PIC_M_SLASH = 3;
  195      /*
  196               values for operand classes
  197      */
  198      %EQU QI#SOURCE_CLASS_FIRST = 0;
  199      %EQU QI#SOURCE_REG = QI#SOURCE_CLASS_FIRST;
  200      %EQU QI#SOURCE_ALL = 1;
  201      %EQU QI#SOURCE_FIG = 2;
  202      %EQU QI#SOURCE_ERR = 3;
  203      %EQU QI#SOURCE_CLASS_LAST = QI#SOURCE_ERR;
  204      /*
  205               bit masks
  206      */
  207      %EQU QI#FILL_BIT_MASK = BITBIN('4000'X);
  208      %EQU QI#INDIRECT_BIT_MASK = BITBIN('8000'X);
  209      %EQU QI#IS_ALL_LITERAL_BIT_MASK = BITBIN('0100'X);
  210      %EQU QI#IS_FORM_VARIABLE_BIT_MASK = BITBIN('0080'X);
  211      %EQU QI#IS_TEMP_BIT_MASK = BITBIN('0200'X);
  212      %EQU QI#TEMP_WORD0_MASK = BITBIN('8280'X);
  213      /*
  214         Presence bits for COBOL DADs
  215      */
  216      %EQU QI#P_COBOL_FIRST_INDEX = 1;
  217      %EQU QI#P_COBOL_LAST_INDEX = 3;
  218      %EQU QI#P_PICTURE_STRING_INDEX = 1;
  219      %EQU QI#P_LEGAL_INDEX = 2;
  220      %EQU QI#P_ERROR_MESSAGE_INDEX = 3;
  221      /*
  222         Presence bits for FIELD DADs
15:13 JUL 28 '97 QI_EQUATES_E.:E05SI                                       7    
  223      */
  224      %EQU QI#P_FIELD_FIRST_INDEX = 0;
  225      %EQU QI#P_FIELD_LAST_INDEX = 5;
  226      %EQU QI#P_FILL_SIZE_INDEX = 0;
  227      %EQU QI#P_CLASS_INDEX = 1;
  228      %EQU QI#P_DEFAULT_INDEX = 2;
  229      %EQU QI#P_PROMPT_INDEX = 3;
  230      %EQU QI#P_REPEATS_INDEX = 4;
  231      %EQU QI#P_SEPARATED_INDEX = 5;
  232      /*
  233         conditional result EQUs
  234      */
  235      %EQU QI#IF_GREATER     = 0;   /* '0000'X */
  236      %EQU QI#IF_LESS        = 1;   /* '0001'X */
  237      %EQU QI#IF_EQUAL       = 2;   /* '0002'X */
  238      %EQU QI#IF_NOT_GREATER = 16;  /* '0010'X */
  239      %EQU QI#IF_NOT_LESS    = 17;  /* '0011'X */
  240      %EQU QI#IF_NOT_EQUAL   = 18;  /* '0012'X */
  241      /*
  242         various values within the ATTRIBUTE word of the IF CLASS
  243         op-code sequence.
  244      */
  245      %EQU QI#IF_CLASS_ALPHA = 8;
  246      %EQU QI#IF_CLASS_NUMERIC = 4;
  247      %EQU QI#IF_CLASS_DIGITS = 2;
  248      /*
  249         various values within the ATTRIBUTE word of the IF STATUS (IFINDR)
  250         op-code sequence.
  251      */
  252      %EQU QI#IF_INDICATOR_ACTIVE = 0;
  253      %EQU QI#IF_INDICATOR_ENABLED_INPUT = 1;
  254      %EQU QI#IF_INDICATOR_ENABLED_OUTPUT = 2;
  255      %EQU QI#IF_INDICATOR_ENABLED_IO = 3;
  256      %EQU QI#IF_INDICATOR_PRESENTED = 4;
  257      %EQU QI#IF_INDICATOR_AVAILABLE = 5;
  258      /*
  259         values for CLASS_TYPE within QI$FIELD_DAD
15:13 JUL 28 '97 QI_EQUATES_E.:E05SI                                       8    
  260      */
  261      %EQU QI#ABSOLUTELY_NO_CLASS = 0;
  262      %EQU QI#CLASS_NUMERIC = 1;
  263      %EQU QI#CLASS_ALPHA = 2;
  264      %EQU QI#CLASS_ALPHABET = 3;
  265      /*
  266         various values within the QI$LEGAL_CONDITION_BLOCK structure
  267         referring to different species of LEGAL checking.
  268      */
  269      %EQU QI#LEGAL_LIST = 0;
  270      %EQU QI#LEGAL_ARRAY = 1;
  271      %EQU QI#LEGAL_RANGE = 2;
  272      /*
  273         various values within the TYPE field of the ACCEPT
  274         op-code sequence.
  275      */
  276      %EQU QI#ACCEPT_FIELD = 0;
  277      %EQU QI#ACCEPT_DATE = 1;
  278      %EQU QI#ACCEPT_DAY = 2;
  279      %EQU QI#ACCEPT_TIME = 3;
  280      %EQU QI#ACCEPT_DAY_OF_WEEK = 4;
  281      %EQU QI#ACCEPT_TERMINAL_ATTRIBUTES = 5;
  282      %EQU QI#ACCEPT_LOADER = 6;
  283      /*
  284         various values for QI$TERMINAL_ATTRIBUTES items
  285         for ACCEPT *thing* FROM TERMINAL-ATTRIBUTES.
  286      */
  287      %EQU QI#CAPABLE_OF_NOTHIN = '0';
  288      %EQU QI#CAPABLE_OF_INPUT = '1';
  289      %EQU QI#CAPABLE_OF_OUTPUT = '2';
  290      %EQU QI#CAPABLE_OF_I_O = '3';
  291      %EQU QI#DEVICE_IS_HARDWIRED = '1';
  292      %EQU QI#DEVICE_IS_DIALED_UP = '2';
  293      %EQU QI#DEBUGGER_IS_NOT_ASSOCIATED = '0';
  294      %EQU QI#DEBUGGER_IS_ASSOCIATED = '1';
  295      %EQU QI#DEVICE_IS_NOT_HARDCOPY = '0';
  296      %EQU QI#DEVICE_IS_HARDCOPY = '1';
15:13 JUL 28 '97 QI_EQUATES_E.:E05SI                                       9    
  297      /*
  298         various values within the TYPE field of the DISPLAY
  299         op-code sequence.
  300      */
  301      %EQU QI#DISPLAY_FIELD = 0;
  302      %EQU QI#DISPLAY_ALARM = 1;
  303      /*
  304         various values within the ATTRIBUTE word of the INSPECT
  305         op-code sequence.
  306      */
  307      %EQU QI#INSPECT_NO_INITIAL = 0;
  308      %EQU QI#INSPECT_BEFORE_INITIAL = 1;
  309      %EQU QI#INSPECT_AFTER_INITIAL = 2;
  310      %EQU QI#INSPECT_CHARACTERS = 0;
  311      %EQU QI#INSPECT_ALL = 1;
  312      %EQU QI#INSPECT_LEADING = 2;
  313      %EQU QI#INSPECT_FIRST = 4;
  314      /*
  315         Various EQUates for QCU$USE stuff.
  316      */
  317      %EQU QI#USE_INVALID_RETURN = 0;
  318                        /* INVALID clause is present; return to level 0.  */
  319      %EQU QI#USE_INVALID_RETRY = 1;
  320                        /* Retry current operation/atomic unit.  */
  321      %EQU QI#USE_INVALID_SKIP_TO_NEXT = 2;
  322                        /* Continue at "next" operation/atomic unit.  */
  323      %EQU QI#USE_INVALID_OK = 3;
  324                        /* USE code was never called:  everything's OK.  */
  325
  326      %EQU QI#STANDARD = 0;
  327      %EQU QI#VERIFY = 1;
  328
  329                        /*  QI_1.USE_DEFAULT_IO value EQUs.  */
  330      %EQU QI#USE_DEFAULT_NONE = 0;
  331      %EQU QI#USE_DEFAULT_INPUT = 1;
  332      %EQU QI#USE_DEFAULT_OUTPUT = 2;
  333      %EQU QI#USE_DEFAULT_VERIFY = 3;
15:13 JUL 28 '97 QI_EQUATES_E.:E05SI                                       10   
  334
  335                        /*  Internal USE-type EQUs.  */
  336      %EQU QI#USE_FILE_TYPE = 0;
  337      %EQU QI#USE_DEFAULT_TYPE = 1;
  338
  339      /*
  340         miscellaneous / useful stuff
  341      */
  342      %EQU FOREVER = CHARTEXT('WHILE (''1''B)');
  343      %EQU NEVER   = CHARTEXT('WHILE (''0''B)');
  344      %EQU YES = '1'B;
  345      %EQU NO = '0'B;
  346      %EQU ON = '1'B;
  347      %EQU OFF = '0'B;
  348      %EQU SET = '1'B;
  349      %EQU RESET = '0'B;
  350      %EQU TRUE = '1'B;
  351      %EQU FALSE = '0'B;
  352      %EQU QI#DONT_CHECK_FOR_SIZE_ERROR = 0;
  353      %EQU QI#CHECK_FOR_SIZE_ERROR = 1;
  354      %EQU QI#SOME_HUGE_NUMBER = BITBIN('FFFF'X);
  355      /*
  356         macro depth gauge
  357      */
  358      %SET QI#MACRO_DEPTH = 0;

