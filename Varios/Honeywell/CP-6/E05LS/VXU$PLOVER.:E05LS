VERSION E05

PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:1    
        1        1        /*M* VXU$PLOVER - processes the PLOVER records for an object unit for pass 1 */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        VXU$PLOVER:   PROC( ALL_TYPE ) ALTRET ;
        8        8
        9        9        /*
       10       10                  Include files
       11       11        */
       12       12        %INCLUDE  VX_INC_C;
       13    10728        %INCLUDE  B_ERRORS_C;
       14    11855        %INCLUDE  CP_6_SUBS;
       15    12395        %P;

             12403    1   /*******************************************************************************
             12404    1   *                                                                              *
             12405    1   *                          PARAMETERS                                              *
             12406    1   *                                                                              *
             12407    1   *******************************************************************************/

       16    12411    1   DCL ALL_TYPE(0:15) UBIN;
       17    12412        %VX$NODE;

             12424    1   /*******************************************************************************
             12425    1   *                                                                              *
             12426    1   *                          VX$NODE                                                 *
             12427    1   *                                                                              *
             12428    1   *******************************************************************************/

             12444    1   DCL 1 VX$NODE      ALIGNED    BASED,
             12445    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             12446    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             12447    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             12448    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             12449    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:2    
             12450                              to list of file nodes for this node            */
             12451    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             12452    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             12452                  /* Head pointer to shared library list */
             12453    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             12453                  /* Head pointer to list of shared libraries
             12454                                          which have been mapped to included libraries */
             12455    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             12456    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             12457    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             12458    1         2 ADDR_START REDEF  ADDR_START_A,
             12459    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             12460    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             12461    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             12462    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             12463    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             12464    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             12465    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             12466    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             12467    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             12468    1         2 START_PAGE# REDEF START_PAGE#_A,
             12469    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             12470    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             12471    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             12472    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             12473    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             12474    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             12475    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             12476    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             12477    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             12477                  /* Starting pointer for common sections for this node */
             12478    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             12478                  /* Stopping pointer for common sections for this node */
             12479    1         2 L_START,
             12480    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             12481    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             12482    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:3    
             12483    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             12484    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             12485    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             12486    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             12487    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             12488    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             12489    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             12490    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             12491    1         2 L_STOP,
             12492    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             12493    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             12494    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             12495    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             12496    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             12497    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             12498    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             12499    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             12500    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             12501    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             12502    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             12503    1         2 L_SIZE,
             12504    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             12505    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             12506    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             12507    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             12508    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             12509    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             12510    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             12511    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             12512    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             12513    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             12514    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             12515    1         2 L_PREV_SIZE,
             12516    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             12517    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             12518    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             12519    1           3 SC      UBIN /*(0)*/, /* Sections                           */
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:4    
             12520    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             12521    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             12522    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             12523    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             12524    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             12525    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             12526    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             12527    1         2 BIT_MAP                ALIGNED,
             12528    1           3 DATA                  ALIGNED,
             12529    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             12530    1           3 RPROC                 ALIGNED,
             12531    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             12532    1           3 ROS                   ALIGNED,
             12533    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             12534    1         2 L_SC_START,
             12535    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             12536    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             12537    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             12538    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             12539    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             12540    1         2 L_SC_STOP,
             12541    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             12542    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             12543    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             12544    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             12545    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             12546    1         2 PROMOTE_HEAD,
             12547    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             12548    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             12549    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             12550    1         2 PROMOTE_TAIL,
             12551    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             12552    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             12553    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             12554    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             12555    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             12556    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:5    
             12557    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             12558    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       18    12562        %VX$SC;

             12575    1   /*******************************************************************************
             12576    1   *                                                                              *
             12577    1   *                          VX$SC                                                 *
             12578    1   *                                                                              *
             12579    1   *******************************************************************************/

             12584    1   DCL 1 VX$SC BASED ALIGNED,
             12585    1         2 SEG UBIN(3) UNAL,
             12586                /*K*  SEG - The segment number of this section */
             12587    1         2 TYPE UBIN(6) UNAL,
             12588                /*K*  TYPE -
             12589                      Type code      Section type
             12590                      ---------      ------------
             12591                          0          Data control section with write access.
             12592                          1          Procedure control section.
             12593                          2          Unlabeled common, name pointer must be zero.
             12594                          3          Labeled common, with mandatory name pointer.
             12595                                     This is for labeled common which must be
             12596                                     in the root.
             12597                          4          Labeled common, with mandatory name pointer.
             12598                                     This is for labeled common which need not
             12599                                     be in the root.
             12600                          5          DCB, word 1 is name pointer.
             12601                          6          Data control section with read only access,
             12602                                     word 1 = 0 or name pointer.      */
             12603    1         2 EMPTY BIT(1) UNAL,
             12604                /*K*  EMPTY is the empty bit.  This bit is set if the control
             12605                      section is of size zero.  */
             12606    1         2 ATTR UNAL,
             12607    1           3 INT  UBIN(2) UNAL,
             12608                  /*K*  INT is the Section initialization.  */
             12609    1           3 SEGMENT BIT(1) UNAL,
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:6    
             12610                  /*K* SEGMENT is set if the Section is defined in a data
             12611                       segment.  */
             12612    1           3 ALL BIT(1) UNAL,
             12613                  /*K*  ALL is set if the Section is allocated.  */
             12614    1           3 PRE_DCB BIT(1) UNAL,
             12615                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             12616    1           3 MES_INIT BIT(1) UNAL,
             12617    1           3 ALIGN UBIN(2) UNAL,
             12618                  /*K*  ALIGN is the Section alignment.  */
             12619    1         2 ADDRESS UBIN HALF UNAL,
             12620                /*K*  ADDRESS is the address within the Instruction Segment of
             12621                      the entry point of the external procedure.  */
             12622    1         2 NAME_DISP SBIN HALF UNAL,
             12623                /*K*  NAME_DISP is the Name index.  */
             12624    1         2 SIZE UBIN HALF UNAL,
             12625                /*K*  SIZE is the size, in words, of the section.  */
             12626    1         2 NODE# UBIN HALF UNAL,
             12627                /*K*  NODE# is the Node number of section.  */
             12628    1         2 COM_LINK UBIN HALF UNAL;
             12629                /*K*  COM_LINK is used internally by linker to link common sections */

             12639    1   /*******************************************************************************
             12640    1   *                                                                              *
             12641    1   *                          VX$SECT                                                 *
             12642    1   *                                                                              *
             12643    1   *******************************************************************************/

             12648    1   DCL 1 VX$SECT BASED ALIGNED,
             12649    1         2 TYPE UBIN BYTE UNAL,
             12650                /*K*  TYPE -
             12651                      Type code      Section type
             12652                      ---------      ------------
             12653                          0          Data control section with write access.
             12654                          1          Procedure control section.
             12655                          2          Unlabeled common, name pointer must be zero.
             12656                          3          Labeled common, with mandatory name pointer.
             12657                                     This is for labeled common which must be
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:7    
             12658                                     in the root.
             12659                          4          Labeled common, with mandatory name pointer.
             12660                                     This is for labeled common which need not
             12661                                     be in the root.
             12662                          5          DCB, word 1 is name pointer.
             12663                          6          Data control section with read only access,
             12664                                     word 1 = 0 or name pointer.
             12665                          7          Constant labeled common, with mandatory name pointer.
             12666                                     This is for labeled common which must be
             12667                                     in the root.
             12668                          8          Constant labeled common, with mandatory name pointer.
             12669                                     This is for labeled common which need not
             12670                                     be in the root.                        */
             12671    1         2 * BIT(1),
             12672                /*K*  * is reserved for future use and must be zero. */
             12673    1         2 INITZERO BIT(1),
             12674                /*K*  INITZERO - if 1, initialize with zero.  */
             12675    1         2 INITUTS BIT(1),
             12676                /*K*  INITUTS - if 1, initialize with UTS.  */
             12677    1         2 SEGMENT BIT(1),
             12678                /*K*  SEGMENT - if 1, specifies that this section is
             12679                                to be placed in the segment specified by
             12680                                SEG_NPOINTER.  */
             12681    1         2 * BIT(3),
             12682                /*K*  * is reserved for future use and must be zero. */
             12683    1         2 BOUND UBIN(2) UNAL,
             12684                /*K*  BOUND - bits 6-7 - defines starting location.
             12685                              00 - starts on even word
             12686                              01 - starts on odd word
             12687                              10 - starts on multiple of 8
             12688                              11 - starts on page boundary     */
             12689    1         2 SIZE UBIN HALF UNAL,
             12690                /*K*  SIZE is the size, in words, of the section.  */
             12691    1         2 NPOINTER SBIN HALF UNAL,
             12692                /*K*  NPOINTER is the word displacement into the name record
             12693                      (TYPE 1) locating the name of this section.  If the
             12694                      field is negative, the section has no name.  */
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:8    
             12695    1         2 MBZ UBIN HALF UNAL,
             12696                /*K*  MBZ is reserved for future expansion and must be zero. */
             12697    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             12698                /*K*  SEG_NPOINTER locates a name in the Definition Names
             12699                      Section.  The name must be a valid segment name
             12700                      recognized by the linker.  */
             12701    1         2 G66 REDEF MBZ,
             12702                /*K*  G66 is not used on CP-6. */
             12703    1           3 * BIT(9),
             12704    1           3 NSAB BIT(9);
       19    12707        %VX$LST;

             12720    1   /*******************************************************************************
             12721    1   *                                                                              *
             12722    1   *                          VX$LST                                                 *
             12723    1   *                                                                              *
             12724    1   *******************************************************************************/

             12729    1   DCL 1 VX$LST                          ALIGNED BASED,
             12730    1         2 LINK$        PTR,               /* Link to next item                  */
             12731    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             12732    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             12733    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             12734    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             12735    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             12736    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             12737    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             12738    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             12739    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             12740    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             12741    1         2 P,
             12742    1           3 NAME_       ALIGNED,
             12743    1             4 BOUND      UBIN(20)  UNAL,
             12744    1             4 FLAGSV     UBIN(11)  UNAL,
             12745    1             4 *          BIT(5)    UNAL,
             12746    1             4 NAME$      PTR,
             12747    1           3 ACCT_       ALIGNED,
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:9    
             12748    1             4 BOUND      UBIN(20)  UNAL,
             12749    1             4 FLAGSV     UBIN(11)  UNAL,
             12750    1             4 *          BIT(5)    UNAL,
             12751    1             4 ACCT$      PTR,
             12752    1           3 PASS_       ALIGNED,
             12753    1             4 BOUND      UBIN(20)  UNAL,
             12754    1             4 FLAGSV     UBIN(11)  UNAL,
             12755    1             4 *          BIT(5)    UNAL,
             12756    1             4 PASS$      PTR,
             12757    1           3 SN_         ALIGNED,
             12758    1             4 BOUND      UBIN(20)  UNAL,
             12759    1             4 FLAGSV     UBIN(11)  UNAL,
             12760    1             4 *          BIT(5)    UNAL,
             12761    1             4 SN$        PTR,
             12762    1           3 WSN_        ALIGNED,
             12763    1             4 BOUND      UBIN(20)  UNAL,
             12764    1             4 FLAGSV     UBIN(11)  UNAL,
             12765    1             4 *          BIT(5)    UNAL,
             12766    1             4 WSN$       PTR,
             12767    1           3 B           ALIGNED,
             12768    1             4 RES        BIT(1)    UNAL,
             12769    1             4 ASN        BIT(1)    UNAL,
             12770    1             4 ACCT       BIT(1)    UNAL,
             12771    1             4 *          BIT(33)   UNAL,
             12772    1           3 RES         CHAR(4)   ALIGNED,
             12773    1           3 ASN         UBIN(36)  ALIGNED;
       20    12776        %VXD$TMPLT;

             12789    1   /*******************************************************************************
             12790    1   *                                                                              *
             12791    1   *                          VXD$TMPLT                                               *
             12792    1   *                                                                              *
             12793    1   *******************************************************************************/

             12797        /*
             12798                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             12799                  ENTDEFs, SYMDEFs and SEGDEFs.
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:10   
             12800        */
             12802    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             12803    1         2 VALUE SBIN UNAL,
             12804                /*K*  VALUE is the value if this entry is a constant.  */
             12805    1         2 AD REDEF VALUE,
             12806                /*K*  AD is the address if this entry is not constant.  */
             12807    1           3 LFLAGS UNAL,
             12808                  /*K*  LFLAGS is the field reserved for loader to flag load
             12809                        time attributes of the definition and must be zero
             12810                        in the object unit. */
             12811    1             4 SOURCE UBIN(3) UNAL,
             12812                    /*K*  SOURCE - Source of this DEF */
             12813    1             4 DEFINED BIT(1) UNAL,
             12814                    /*K*  DEFINED - Set if this DEF defined */
             12815    1             4 MULTIPLE BIT(1) UNAL,
             12816                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             12817    1             4 USED BIT(1) UNAL,
             12818                    /*K*  USED - Set if this DEF is used. */
             12819    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             12820                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             12821                        than 2048 (RU).  */
             12822    1           3 SECTNUM UBIN(11) UNAL,
             12823                  /*K*  SECTNUM contains an entry number into the section
             12824                        table (TYPE 3).  */
             12825    1           3 ISADDR UBIN HALF UNAL,
             12826                  /*K*  ISADDR - Is Address (RU)  */
             12827    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             12828                  /*K*  OFFSET is the word offset from the origin of the section. */
             12829    1         2 NPOINTER SBIN HALF UNAL,
             12830                /*K*  NPOINTER is a word displacement into the name record
             12831                      (TYPE 1) locating the name (of this entry). */
             12832    1         2 CONSTNT BIT(1) UNAL,
             12833                /*K*  CONSTNT is a flag bit to determine the interpretation
             12834                      of word 0.
             12835                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             12836                                    SECTNUM, and ISADDR or OFFSET.
             12837                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:11   
             12838    1         2 LFLAGS UNAL,
             12839                /*K*  LFLAGS is the field reserved for loader to flag load
             12840                      time attributes and must be zero in the object unit. */
             12841    1           3 MULTIPLE BIT(1) UNAL,
             12842                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             12843    1           3 USED BIT(1) UNAL,
             12844                  /*K*  USED - Set if this DEF is used. */
             12845    1           3 SOURCE UBIN(4) UNAL,
             12846                  /*K*  SOURCE - Source of this DEF */
             12847    1           3 IS_DCB BIT(1) UNAL,
             12848                  /*K* IS_DCB - Set if this is a DCB */
             12849    1           3 * BIT(10) UNAL,
             12850                  /*K*  * is reserved for future use and must be zero.  */
             12851    1         2 PROTECTION REDEF LFLAGS,
             12852                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             12853    1           3 TYPE UBIN(5) UNAL,
             12854                  /*K*  TYPE is the Protection type.  */
             12855    1           3 * UBIN(12) UNAL;
             12856                  /*K*  * is reserved for future use and must be zero.  */
       21    12871        %T$C;

             12883    1   /*******************************************************************************
             12884    1   *                                                                              *
             12885    1   *                          T$C                                                 *
             12886    1   *                                                                              *
             12887    1   *******************************************************************************/

             12892    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             12893    1         2 COUNT        UBIN( 9) UNAL,
             12894    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             12895    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             12896    1         2 COUNT        UBIN( 9) UNAL,
             12897    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       22    12900        %BANNER( ARG="FPTs and DCBs" );

             12908    1   /*******************************************************************************
             12909    1   *                                                                              *
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:12   
             12910    1   *                          FPTs and DCBs                                           *
             12911    1   *                                                                              *
             12912    1   *******************************************************************************/

       23    12916        %FPT_READ( FPTN=READ_PLOVER_BIRTH, BUF=PLOVER_BIRTH, KEY=PLOVER_BIRTH_KEY, KEYS=YES,
             12916            DCB=M$OF );
       24    12955        %FPT_READ( FPTN=READ_OF_SEQ, DCB=M$OF, BUF=TXT, KEY=OU_KEY, KEYS=NO, KEYR=YES );
       25    12994        %FPT_WRITE( DCB=M$PLOVER, KEY=PLOVER_KEY );
       26    13025        %FPT_WRITE( FPTN=GLOBAL_WRITE, DCB=M$PLOVER, KEY=GLOBAL_KEY );
       27    13056        %VLP_NAME( NAME='**********************RUM' );
       28    13083        %FPT_OPEN( DCB=M$PLOVER, NAME=VLP_NAME, ACS=DIRECT, ASN=FILE,
       29    13084                   FUN=CREATE,   ORG=KEYED );
       30    13193        %FPT_UNFID( LEN=CNT, TEXTFID="RUM.FID", DCB=M$RF );
       31    13211        %FPT_CLOSE( DCB=M$PLOVER, DISP=SAVE );
       32    13253        %FPT_ALIB(CMD=DELTA_CMD, LIBNAME=DELTA, DLIB=YES, RETRN=NO, ECHO=NO, QUIET=YES);
       33    13270        %VLP_NAME( FPTN=DELTA, NAME='DELTA');
       34    13297    1   DCL M$PLOVER DCB;
       35    13298    1   DCL M$OF DCB;
       36    13299    1   DCL M$RF DCB;
       37    13300        %F$DCB;
       38    13357        %B$TCB;
       39    13360        %B$ALT;
       40    13368        %BANNER( ARG="B$OBJECT_C stuff" );

             13376    1   /*******************************************************************************
             13377    1   *                                                                              *
             13378    1   *                          B$OBJECT_C stuff                                        *
             13379    1   *                                                                              *
             13380    1   *******************************************************************************/

       41    13384        %B$RECORDSUBS;
       42    13412        %SUB_LINKFLAGS;
       43    13421        %B$HEADKEY( NAME=OU_KEY, STCLASS=STATIC );
       44    13433        %B$PLOVERKEY( NAME=B_PLOVERKEY, STCLASS=CONSTANT );
       45    13463        %B$PLOVERKEY( NAME=B$PLOVERKEY, STCLASS="BASED(OU_KEY$)" );
       46    13493        %B$PLOVERBIRTHKEY( NAME=PLOVER_BIRTH_KEY, STCLASS=STATIC );
       47    13516        %B$PLOVERBIRTH( NAME=PLOVER_BIRTH, STCLASS=STATIC );
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:13   
       48    13538        %BANNER( ARG=PLOVER_KEY );

             13546    1   /*******************************************************************************
             13547    1   *                                                                              *
             13548    1   *                          PLOVER_KEY                                              *
             13549    1   *                                                                              *
             13550    1   *******************************************************************************/

       49    13554    1   DCL 1 PLOVER_KEY ALIGNED STATIC,
       50    13555    1         2 CNT  UBIN BYTE UNAL INIT( 5 ),
       51    13556    1         2 TYPE UBIN BYTE UNAL INIT( BITBIN('777'O) ),
       52    13557    1         2 NODE SBIN HALF UNAL INIT( 0 ),
       53    13558    1         2 SEQ  SBIN HALF UNAL INIT( 0 );
       54    13559        %BANNER( ARG=GLOBAL_KEY );

             13567    1   /*******************************************************************************
             13568    1   *                                                                              *
             13569    1   *                          GLOBAL_KEY                                              *
             13570    1   *                                                                              *
             13571    1   *******************************************************************************/

       55    13575    1   DCL 1 GLOBAL_KEY ALIGNED STATIC,
       56    13576    1         2 CNT UBIN BYTE UNAL INIT(34),
       57    13577    1         2 TYPE UBIN BYTE UNAL INIT( 0 ),
       58    13578    1         2 NAME CHAR(31) INIT( ' ' ),
       59    13579    1         2 SEQ UBIN HALF UNAL INIT( 0 );
       60    13580        %BANNER( ARG=USE_NODE );

             13588    1   /*******************************************************************************
             13589    1   *                                                                              *
             13590    1   *                          USE_NODE                                                *
             13591    1   *                                                                              *
             13592    1   *******************************************************************************/

       61    13596    1   DCL 1 USE_NODE STATIC,
       62    13597    1         2 * CHAR(0) INIT('USE NODE '''),
       63    13598    1         2 NODE CHAR(31) INIT(' '),
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:14   
       64    13599    1         2 * CHAR(0) INIT('''S');
       65    13600        %C;

             13608    1   /*******************************************************************************
             13609    1   *                                                                              *
             13610    1   *                          CHAR                                                 *
             13611    1   *                                                                              *
             13612    1   *******************************************************************************/

       66    13616    1   DCL TXT CHAR(256) STATIC;
       67    13617    1   DCL 1 RUM REDEF TXT,
       68    13618    1         2 RUM CHAR(4),
       69    13619    1         2 FID  CHAR(252);
       70    13620    1   DCL 1 DEFAULT_SYN (0:15) CHAR(8) CONSTANT INIT
       71    13621    1          ('GMAP   ', /* 0 - GMAP */
       72    13622    1           'PL6    ', /* 1 - PL6 */
       73    13623    1           'FORTRAN', /* 2 - FORTRAN */
       74    13624    1           'COBOL  ', /* 3 - COBOL */
       75    13625    1           'PL1    ', /* 4 - PL1 */
       76    13626    1           'RPG    ', /* 5 - RPG */
       77    13627    1           'PL6    ', /* 6 - PASCAL */
       78    13628    1           'PL6    ', /* 7 - MOMUS */
       79    13629    1           'FPL    ', /* 8 - FPL */
       80    13630    1           'GMAP   ', /* 9 - PARTRGE */
       81    13631    1           'PL6    ', /* A - IDL */
       82    13632    1           'GMAP   ', /* B - ELSIE */
       83    13633    1           'GMAP   ', /* C - CALF */
       84    13634    1           'CC     ', /* D - CC */
       85    13635    1           'PL6    ', /* E - unused */
       86    13636    1           'PL6    ');/* F - unused */
       87    13637    1   DCL ALIB_RETURN CHAR(0) CONSTANT INIT('ALIB RETURN');
       88    13638    1   DCL KILL_ECHO CHAR(0) CONSTANT INIT('KILL ECHO');
       89    13639    1   DCL DELTA_CMD CHAR(0) CONSTANT INIT('READ **********************RUM' );
       90    13640        %P;

             13648    1   /*******************************************************************************
             13649    1   *                                                                              *
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:15   
             13650    1   *                          PARAMETERS                                              *
             13651    1   *                                                                              *
             13652    1   *******************************************************************************/

       91    13656        %POINTER;
       92    13661    1   DCL OU_KEY$ PTR CONSTANT INIT(ADDR(OU_KEY));
       93    13662        %E;

             13670    1   /*******************************************************************************
             13671    1   *                                                                              *
             13672    1   *                          ENTRY                                                 *
             13673    1   *                                                                              *
             13674    1   *******************************************************************************/

       94    13678        %ENTRIES;
       95    13693    1   DCL VXU$NEW_SECTNUM ENTRY(4);
       96    13694        %S;

             13702    1   /*******************************************************************************
             13703    1   *                                                                              *
             13704    1   *                          SBIN                                                 *
             13705    1   *                                                                              *
             13706    1   *******************************************************************************/

       97    13710    1   DCL PLOVER_UTS UBIN WORD;
       98    13711    1   DCL CNT SBIN WORD STATIC;
       99    13712    1   DCL PLOVER_EXIST BIT(1) STATIC INIT('0'B);
      100    13713        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:16   
      101    13714    1         PLOVER_BIRTH_KEY.UTS = VX_OU_HEAD.UTS;
      102    13715    1         CALL M$READ( READ_PLOVER_BIRTH ) ALTRET( NO_PLOVER_BIRTH );
      103    13716    2         DO WHILE( '0'B );
      104    13717    2   NO_PLOVER_BIRTH:
      105    13718    2             IF @ALT_ERROR = %E$NOKEY THEN RETURN;
      106    13719        /*E*  ERROR:  VXU-E$PLOVER_BIRTH_READ_ERR_VX-C
      107    13720              MESSAGE: Unable to read PLOVER BIRTH record.
      108    13721        */
      109    13722    2             CALL VXE$ERRMSG( , @E$F_D_VX );
      110    13723                  %SCREAM( ERR#=E$PLOVER_BIRTH_READ_ERR_VX, MID="'U'", LEVEL=@E$F_VX, AUX=
             13723                      E$REFOUOF_VX );
      111    13726    2             END;
      112    13727                                          /* Plover records exist for the OU */
      113    13728    2         IF NOT PLOVER_EXIST THEN DO;
      114    13729    2             CALL M$OPEN( FPT_OPEN ) ALTRET( OPEN_ERROR );
      115    13730    2             GLOBAL_WRITE.BUF_ = VECTOR( KILL_ECHO );
      116    13731    2             CALL M$WRITE( GLOBAL_WRITE ) ALTRET( WRITE_ERR );
      117    13732    2             TXT = 'RUM ';
      118    13733
      119    13734        /*  If then Else deleted as per star (23522). As it turns out the
      120    13735        M$UNFID call is always sufficient since at this point the DCB
      121    13736        will always have the RU name in it */
      122    13737
      123    13738        /*        IF VX_RU_NAME$ = ADDR(NIL) THEN    No RU specified. */
      124    13739    2                 CALL M$UNFID( FPT_UNFID );
      125    13740        /*        ELSE DO;
      126    13741                      RUM.FID = VX_RU_NAME$ -> T$C.CHARS;
      127    13742                      CNT = VX_RU_NAME$ -> T$C.COUNT;
      128    13743                      END;  */
      129    13744
      130    13745    2             SUBSTR (TXT,CNT+5,5) = ',NUTS';
      131    13746    2             GLOBAL_WRITE.BUF_ = VECTOR( SUBSTR(TXT,0,CNT+10) );
      132    13747    2             GLOBAL_KEY.SEQ = 1;
      133    13748    2             CALL M$WRITE( GLOBAL_WRITE ) ALTRET( WRITE_ERR );
      134    13749    2             PLOVER_KEY.NODE = -1;
      135    13750    2             PLOVER_KEY.SEQ  = -1;
      136    13751    2             FPT_WRITE.BUF_ = VECTOR( ALIB_RETURN );
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:17   
      137    13752    2             CALL M$WRITE( FPT_WRITE ) ALTRET( WRITE_ERR );
      138    13753    2             PLOVER_EXIST = '1'B;
      139    13754    2             END;
      140    13755    1         IF NOT VX_OD.NUM.IPATCH AND M$OF$->F$DCB.ARS# = @PLOVER_BIRTH_ARS THEN
      141    13756    1            VX_O.NUM.IPATCH  = VX_O.NUM.IPATCH + PLOVER_BIRTH.IPATCH;
      142    13757    1         IF NOT VX_OD.NUM.DPATCH and M$OF$->F$DCB.ARS# = @PLOVER_BIRTH_ARS THEN
      143    13758    1            VX_O.NUM.DPATCH = VX_O.NUM.DPATCH + PLOVER_BIRTH.DPATCH;
      144    13759    1         TXT = 'SYNTAX';
      145    13760
      146    13761        /* Now write the default SYNTAX for this plover patch */
      147    13762
      148    13763    1         SUBSTR(TXT,7,8) = DEFAULT_SYN (VX_OUHEAD.COMPILER);
      149    13764    1         CNT = 14;
      150    13765    1         CALL WRITE_PLOVER_REC;
      151    13766    1         TXT = ' ';
      152    13767    1         CALL M$READ( READ_OF_SEQ ) ALTRET(DONE);
      153    13768    1         CNT = M$OF$ -> F$DCB.ARS#;
      154    13769    1         PLOVER_UTS = PLOVER_BIRTH_KEY.UTS;
      155    13770    2         DO WHILE( B$PLOVERKEY.KEYSIZ  = B_PLOVERKEY.KEYSIZ
      156    13771    2                 AND  B$PLOVERKEY.NOTHD = B_PLOVERKEY.NOTHD
      157    13772    2                 AND  B$PLOVERKEY.UTS   = PLOVER_BIRTH_KEY.UTS );
      158    13773    2             IF SUBSTR(TXT,0,7) = 'ENTREF ' THEN
      159    13774    2                 CALL PROCESS_PLOVER_ENTREF;
      160    13775    2             ELSE
      161    13776    2                 IF SUBSTR(TXT,0,7) = 'SYMDEF' THEN
      162    13777    2                     CALL PROCESS_PLOVER_SYMDEF;
      163    13778    2                 ELSE
      164    13779    2                     IF SUBSTR(TXT,0,9) = 'EXTERNAL ' THEN
      165    13780    2                         CALL WRITE_GLOBAL_REC;
      166    13781    2                     ELSE
      167    13782    2                         CALL WRITE_PLOVER_REC;
      168    13783    2             TXT = ' ';
      169    13784    2             CALL M$READ( READ_OF_SEQ ) ALTRET(DONE);
      170    13785    2             CNT = M$OF$ -> F$DCB.ARS#;
      171    13786    2             END;
      172    13787    1   DONE:
      173    13788    1         RETURN;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:18   
      174    13789
      175    13790        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:19   
      176    13791    1   VXU$RUM: ENTRY ALTRET ;
      177    13792
      178    13793    1         IF  NOT PLOVER_EXIST  THEN RETURN;
      179    13794                                                  /* Rums exist for the run unit */
      180    13795    1         CALL M$CLOSE( FPT_CLOSE );          /* Close M$PLOVER */
      181    13796        /*E*  ERROR: VXU-E$PLOVERING_VX-C
      182    13797              MESSAGE: Plovering ....
      183    13798        */
      184    13799              %SCREAM (ERR#=E$PLOVERING_VX,MID="'U'",LEVEL=@E$I_VX);
      185    13802                                          /* Associate DELTA to do the rums */
      186    13803    1         CALL M$ALIB( FPT_ALIB )    ALTRET( ALIB_ERR);
      187    13804                                          /* Delete the ************RUM file */
      188    13805    1         FPT_OPEN.V.FUN# = %UPDATE#;
      189    13806    1         FPT_OPEN.V.DELETE# = %YES#;
      190    13807    1         CALL M$OPEN( FPT_OPEN)      ALTRET( OPEN_ERROR );
      191    13808    1         RETURN;
      192    13809
      193    13810        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:20   
      194    13811        /*
      195    13812                      Errors
      196    13813        */
      197    13814    1   OPEN_ERROR:
      198    13815        /*E*  ERROR:  VXU-E$UNABLE_OPEN_M$PLOVER_VX-C
      199    13816              MESSAGE: Unable to open %FN
      200    13817        */
      201    13818    1         CALL VXE$ERRMSG( , @E$F_D_VX );
      202    13819              %ERRMSG( ERR#=E$UNABLE_OPEN_M$PLOVER_VX, MID='U', DCB#=M$PLOVER, LEVEL=
             13819                  @E$F_VX );
      203    13828
      204    13829    1   WRITE_ERR:
      205    13830        /*E*  ERROR: VXU-E$CANT_WRITE_M$PLOVER_VX-C
      206    13831              MESSAGE: Unable to write to %FN
      207    13832        */
      208    13833    1         CALL VXE$ERRMSG( , @E$F_D_VX );
      209    13834              %ERRMSG( ERR#=E$CANT_WRITE_M$PLOVER_VX, MID='U', DCB#=M$PLOVER, LEVEL=@E$F_VX
             13834                  );
      210    13843
      211    13844    1   ALIB_ERR:
      212    13845    1         ALTRETURN ;
      213    13846
      214    13847        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:21   
      215    13848    1   WRITE_PLOVER_REC: PROC;
      216    13849
      217    13850    3         IF NOT VX_CURR$->VX$NODE.USE_NODE THEN DO;
      218    13851    3             VX_CURR$ -> VX$NODE.USE_NODE = '1'B;
      219    13852    3             PLOVER_KEY.NODE = VX_CURR$ -> VX$NODE.NUM + 1;
      220    13853    3             PLOVER_KEY.SEQ  = 0;
      221    13854    4             IF VX_NODE_NUMBER > 0 THEN DO;
      222    13855    4                 P$ = VX_CURR$ -> VX$NODE.HEAD$;
      223    13856    4                 IF P$->VX$LST.TYPE = @OF  AND  P$->VX$LST.SUB_TYPE = @OF_LIST
      224    13857    4                 THEN
      225    13858    4                    USE_NODE.NODE = SUBSTR(P$->VX$LST.OBJECT_NAME$->T$C.CHARS,1);
      226    13859    4                 ELSE
      227    13860    4                     USE_NODE.NODE = P$->VX$LST.P.NAME_.NAME$->T$C.CHARS;
      228    13861    4                 FPT_WRITE.BUF_ = VECTOR( USE_NODE );
      229    13862    4                 CALL M$WRITE( FPT_WRITE ) ALTRET( WRITE_ERR );
      230    13863    4                 END;
      231    13864    3             END;
      232    13865    2         PLOVER_KEY.SEQ = PLOVER_KEY.SEQ + 1;
      233    13866    2         FPT_WRITE.BUF_ = VECTOR( SUBSTR(TXT,0,CNT) );
      234    13867    2         CALL M$WRITE( FPT_WRITE ) ALTRET( WRITE_ERR );
      235    13868    2         RETURN;
      236    13869
      237    13870    2   WRITE_ERR:
      238    13871        /*    ERROR: VXU-E$CANT_WRITE_M$PLOVER_VX-C
      239    13872              MESSAGE: Unable to write to %FN
      240    13873        */
      241    13874    2         CALL VXE$ERRMSG( , @E$F_D_VX );
      242    13875              %ERRMSG( ERR#=E$CANT_WRITE_M$PLOVER_VX, MID='U', DCB#=M$PLOVER, LEVEL=@E$F_VX
             13875                  );
      243    13884
      244    13885    2   END WRITE_PLOVER_REC;
      245    13886        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:22   
      246    13887    1   WRITE_GLOBAL_REC: PROC;
      247    13888
      248    13889    2   DCL I UBIN WORD;
      249    13890    2   DCL J UBIN WORD;
      250    13891    2   DCL PATCH_TYPE CHAR(1);
      251    13892    2   DCL PATCH_SIZE UBIN WORD;
      252    13893
      253    13894    2   DCL 1 DEF_CMD STATIC,
      254    13895    2         2 * CHAR(0) INIT('DEF '),
      255    13896    2         2 NAME CHAR(32) INIT(' '),
      256    13897    2         2 PATCH_TYPE CHAR(1);
      257    13898    2   DCL 1 MOD_CMD STATIC,
      258    13899    2         2 * CHAR(0) INIT('M '),
      259    13900    2         2 PATCH_TYPE CHAR(1) INIT(' '),
      260    13901    2         2 * CHAR(0) INIT(' 0');
      261    13902
      262    13903
      263    13904    2           CALL INDEX(I,' ',SUBSTR(TXT,9));
      264    13905    2         PATCH_TYPE = SUBSTR(TXT,I+10,1);
      265    13906    2           CALL INDEX(J,' ',SUBSTR(TXT,I+12));
      266    13907    2         CALL CHARBIN( PATCH_SIZE, SUBSTR(TXT,I+12,J) );
      267    13908    2         GLOBAL_KEY.NAME = SUBSTR(TXT,9,I);
      268    13909    2         GLOBAL_KEY.SEQ  = 0;
      269    13910    2         DEF_CMD.NAME = SUBSTR(TXT,9,I);
      270    13911    2         DEF_CMD.PATCH_TYPE = PATCH_TYPE;
      271    13912    2         GLOBAL_WRITE.BUF_ = VECTOR( DEF_CMD );
      272    13913    2         CALL M$WRITE( GLOBAL_WRITE ) ALTRET( WRITE_ERR );
      273    13914    2         MOD_CMD.PATCH_TYPE = PATCH_TYPE;
      274    13915    2         GLOBAL_WRITE.BUF_ = VECTOR( MOD_CMD );
      275    13916    3         DO I = 1 TO PATCH_SIZE;
      276    13917    3             GLOBAL_KEY.SEQ = I;
      277    13918    3             CALL M$WRITE( GLOBAL_WRITE ) ALTRET( WRITE_ERR );
      278    13919    3             END;
      279    13920    2         RETURN;
      280    13921
      281    13922    2   WRITE_ERR:
      282    13923    2         CALL VXE$ERRMSG( ,@E$F_D_VX );
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:23   
      283    13924              %ERRMSG( ERR#=E$CANT_WRITE_M$PLOVER_VX, MID='U', DCB#=M$PLOVER, LEVEL=@E$F_VX
             13924                  );
      284    13933
      285    13934    2   END WRITE_GLOBAL_REC;
      286    13935        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:24   
      287    13936    1   PROCESS_PLOVER_ENTREF: PROC;
      288    13937
      289    13938    2   DCL NPOINTER UBIN WORD;
      290    13939    2   DCL I UBIN WORD;
      291    13940    2   DCL SIZE UBIN WORD;
      292    13941    2   DCL NAME$ PTR;
      293    13942    2   DCL ENTREF$ PTR;
      294    13943        %B$DNAME( STCLASS="BASED(NAME$)" );
      295    13962        %B$EREF( STCLASS="BASED(ENTREF$)" );
      296    14005
      297    14006
      298    14007    2            CALL INDEX(I,' ',SUBSTR(TXT,7));
      299    14008    2         SIZE = (I + 5) / 4;
      300    14009              %ALLOCATE( PTR$=NAME$, TYPE="ALL_TYPE(%TYPRNAM)", SIZE=SIZE );
      301    14016    2         B$DNAME.COUNT = I;
      302    14017    2         B$DNAME.TEXT  = SUBSTR( TXT, 7, I );
      303    14018    2         IF VX_CURR$->VX$NODE.L_START.RN$ = ADDR(NIL) THEN
      304    14019    2             VX_CURR$->VX$NODE.L_START.RN$ = NAME$;
      305    14020    2         VX_CURR$->VX$NODE.L_STOP.RN$ = NAME$;
      306    14021    2         NPOINTER = VX_CURR$->VX$NODE.L_SIZE.RN;
      307    14022    2         VX_CURR$->VX$NODE.L_SIZE.RN  = NPOINTER + SIZE;
      308    14023              %ALLOCATE( PTR$=ENTREF$, TYPE="ALL_TYPE(%TYPEREF)", SIZE="SIZEW(B$EREF)" );
      309    14030    2         B$EREF = '0'B;
      310    14031    2         B$EREF.NPOINTER = NPOINTER;
      311    14032    2         IF VX_CURR$->VX$NODE.L_START.ER$ = ADDR(NIL) THEN
      312    14033    2             VX_CURR$->VX$NODE.L_START.ER$ = ENTREF$;
      313    14034    2         VX_CURR$->VX$NODE.L_STOP.ER$ = ENTREF$;
      314    14035    2         VX_CURR$->VX$NODE.L_SIZE.ER  = VX_CURR$->VX$NODE.L_SIZE.ER + SIZEW(B$EREF);
      315    14036
      316    14037    2   END PROCESS_PLOVER_ENTREF;
      317    14038        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:25   
      318    14039    1   PROCESS_PLOVER_SYMDEF: PROC;
      319    14040
      320    14041    2   DCL SECT# UBIN WORD;
      321    14042    2   DCL SC_IDX UBIN WORD;
      322    14043
      323    14044    2   DCL I UBIN WORD;
      324    14045    2   DCL J UBIN WORD;
      325    14046    2   DCL SIZE UBIN WORD;
      326    14047    2   DCL NPOINTER UBIN;
      327    14048    2   DCL NAME$ PTR;
      328    14049        %B$DNAME( STCLASS="BASED(NAME$)" );
      329    14068
      330    14069
      331    14070    2         CALL INDEX (I, ' ', TXT, 7 ) ;
      332    14071              %ALLOCATE( PTR$=P$, TYPE="ALL_TYPE(%TYPSDEF)", SIZE="SIZEW(VXD$TMPLT)" ) ;
      333    14078    2         IF  VX_CURR$->VX$NODE.L_START.DD$ = ADDR(NIL)  THEN
      334    14079    2             VX_CURR$->VX$NODE.L_START.DD$ = P$ ;
      335    14080    2         VX_CURR$->VX$NODE.L_STOP.DD$ = P$ ;
      336    14081    2         VX_CURR$->VX$NODE.L_SIZE.DD  = VX_CURR$->VX$NODE.L_SIZE.DD + SIZEW(VXD$TMPLT)
             14081                  ;
      337    14082    2         P$->VXD$TMPLT = '0'B ;
      338    14083    2         J = I - 7 ;
      339    14084    2         SIZE = ( J + 5  ) / 4 ;
      340    14085              %ALLOCATE( PTR$=NAME$, TYPE="ALL_TYPE(%TYPDNAM)", SIZE=SIZE ) ;
      341    14092    2         B$DNAME.COUNT = J ;
      342    14093    2         B$DNAME.TEXT  = SUBSTR( TXT, 7, J ) ;
      343    14094    2         IF  VX_CURR$->VX$NODE.L_START.DN$ = ADDR(NIL)  THEN
      344    14095    2             VX_CURR$->VX$NODE.L_START.DN$ = NAME$ ;
      345    14096    2         VX_CURR$->VX$NODE.L_STOP.DN$ = NAME$ ;
      346    14097    2         NPOINTER = VX_CURR$->VX$NODE.L_SIZE.DN  ;
      347    14098    2         VX_CURR$->VX$NODE.L_SIZE.DN  = NPOINTER + SIZE ;
      348    14099    2         P$->VXD$TMPLT.NPOINTER = NPOINTER ;
      349    14100    2         I = I + 1 ;
      350    14101    2         CALL INDEX ( J, ' ', SUBSTR ( TXT, I ) ) ;
      351    14102    2         CALL CHARBIN( SECT#, SUBSTR ( TXT, I, J ) ) ;
      352    14103    2         SECT# = SECT# + VX_LAST_SC_BASE ;
      353    14104    3         IF  SECT# > BITBIN('777777'O)  THEN DO ;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:26   
      354    14105        /*E* ERROR: VXO-E$SECTNUM_TOO_BIG_VX-C
      355    14106             MESSAGE: Internal link error: Section number > 777777 (octal) in VXU$PLOVER.
      356    14107        */
      357    14108                  %SCREAM( ERR#=E$SECTNUM_TOO_BIG_VX,LEVEL=@E$F_VX,MID="'O'" ) ;
      358    14111    3             END ;
      359    14112    2         P$ -> VXD$TMPLT.AD.SECTNUM = SECT# ;
      360    14113    2         IF  SECT# >= 2048  THEN
      361    14114    2             CALL VXU$NEW_SECTNUM ( P$->VXD$TMPLT, VX_CURR$->VX$NODE.NUM, SECT# ) ;
      362    14115    2         P$ -> VXD$TMPLT.AD.LFLAGS.SOURCE = %SOURCE_OBJECT# ;
      363    14116
      364    14117
      365    14118    2   END PROCESS_PLOVER_SYMDEF;
      366    14119        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:27   
      367    14120    1   END VXU$PLOVER;

PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:28   
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXU$PLOVER.

   Procedure VXU$PLOVER requires 647 words for executable code.
   Procedure VXU$PLOVER requires 20 words of local(AUTO) storage.

    No errors detected in file VXU$PLOVER.:E05TSI    .

PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:29   

 Object Unit name= VXU$PLOVER                                 File name= VXU$PLOVER.:E05TOU
 UTS= JUL 30 '97 08:44:45.08 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2   Data  even  none   306    462  VXU$PLOVER
    3   DCB   even  none     0      0  M$PLOVER
    4   DCB   even  none     0      0  M$OF
    5   DCB   even  none     0      0  M$RF
    6  RoData even  UTS     65    101  VXU$PLOVER
    7   Proc  even  none   647   1207  VXU$PLOVER
    8  RoData even  none    36     44  VXU$PLOVER

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     7      0   yes    yes     yes      Std        1  VXU$PLOVER
     7    255          yes     yes      Std        0  VXU$RUM
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:30   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VXE$ERRMSG
         yes           Std       4 VXE$ERROR
         yes           Std       3 VXA$GET
         yes           Std       4 VXU$NEW_SECTNUM
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                VX_OU_HEAD
     VX_LAST_SC_BASE                       VX_NODE_NUMBER                        VX_CURR$
     VX_ERRORS                             VX_M_FREE                             VX_M_ALL
     VX_M_BASE_PTR                         VX_O                                  VX_OD
     M$OF$                                 M$PLOVER                              M$OF
     M$RF                                  B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:31   


        1        1        /*M* VXU$PLOVER - processes the PLOVER records for an object unit for pass 1 */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        VXU$PLOVER:   PROC( ALL_TYPE ) ALTRET ;

      7  7 000000   000000 700200 xent  VXU$PLOVER   TSX0  ! X66_AUTO_1
         7 000001   000024 000001                    ZERO    20,1

        8        8
        9        9        /*
       10       10                  Include files
       11       11        */
       12       12        %INCLUDE  VX_INC_C;
       13    10728        %INCLUDE  B_ERRORS_C;
       14    11855        %INCLUDE  CP_6_SUBS;
       15    12395        %P;

             12403    1   /*******************************************************************************
             12404    1   *                                                                              *
             12405    1   *                          PARAMETERS                                             *
             12406    1   *                                                                              *
             12407    1   *******************************************************************************/

       16    12411    1   DCL ALL_TYPE(0:15) UBIN;
       17    12412        %VX$NODE;

             12424    1   /*******************************************************************************
             12425    1   *                                                                              *
             12426    1   *                          VX$NODE                                                *
             12427    1   *                                                                              *
             12428    1   *******************************************************************************/

             12444    1   DCL 1 VX$NODE      ALIGNED    BASED,
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:32   
             12445    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             12446    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             12447    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             12448    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             12449    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             12450                              to list of file nodes for this node            */
             12451    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             12452    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             12452                  /* Head pointer to shared library list */
             12453    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             12453                  /* Head pointer to list of shared libraries
             12454                                          which have been mapped to included libraries */
             12455    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             12456    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             12457    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             12458    1         2 ADDR_START REDEF  ADDR_START_A,
             12459    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             12460    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             12461    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             12462    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             12463    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             12464    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             12465    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             12466    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             12467    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             12468    1         2 START_PAGE# REDEF START_PAGE#_A,
             12469    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             12470    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             12471    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             12472    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             12473    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             12474    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             12475    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             12476    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             12477    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             12477                  /* Starting pointer for common sections for this node */
             12478    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:33   
             12478                  /* Stopping pointer for common sections for this node */
             12479    1         2 L_START,
             12480    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             12481    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             12482    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             12483    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             12484    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             12485    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             12486    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             12487    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             12488    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             12489    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             12490    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             12491    1         2 L_STOP,
             12492    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             12493    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             12494    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             12495    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             12496    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             12497    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             12498    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             12499    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             12500    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             12501    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             12502    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             12503    1         2 L_SIZE,
             12504    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             12505    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             12506    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             12507    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             12508    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             12509    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             12510    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             12511    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             12512    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             12513    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             12514    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:34   
             12515    1         2 L_PREV_SIZE,
             12516    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             12517    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             12518    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             12519    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             12520    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             12521    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             12522    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             12523    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             12524    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             12525    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             12526    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             12527    1         2 BIT_MAP                ALIGNED,
             12528    1           3 DATA                  ALIGNED,
             12529    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             12530    1           3 RPROC                 ALIGNED,
             12531    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             12532    1           3 ROS                   ALIGNED,
             12533    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             12534    1         2 L_SC_START,
             12535    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             12536    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             12537    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             12538    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             12539    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             12540    1         2 L_SC_STOP,
             12541    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             12542    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             12543    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             12544    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             12545    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             12546    1         2 PROMOTE_HEAD,
             12547    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             12548    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             12549    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             12550    1         2 PROMOTE_TAIL,
             12551    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:35   
             12552    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             12553    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             12554    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             12555    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             12556    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             12557    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             12558    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       18    12562        %VX$SC;

             12575    1   /*******************************************************************************
             12576    1   *                                                                              *
             12577    1   *                          VX$SC                                                 *
             12578    1   *                                                                              *
             12579    1   *******************************************************************************/

             12584    1   DCL 1 VX$SC BASED ALIGNED,
             12585    1         2 SEG UBIN(3) UNAL,
             12586                /*K*  SEG - The segment number of this section */
             12587    1         2 TYPE UBIN(6) UNAL,
             12588                /*K*  TYPE -
             12589                      Type code      Section type
             12590                      ---------      ------------
             12591                          0          Data control section with write access.
             12592                          1          Procedure control section.
             12593                          2          Unlabeled common, name pointer must be zero.
             12594                          3          Labeled common, with mandatory name pointer.
             12595                                     This is for labeled common which must be
             12596                                     in the root.
             12597                          4          Labeled common, with mandatory name pointer.
             12598                                     This is for labeled common which need not
             12599                                     be in the root.
             12600                          5          DCB, word 1 is name pointer.
             12601                          6          Data control section with read only access,
             12602                                     word 1 = 0 or name pointer.      */
             12603    1         2 EMPTY BIT(1) UNAL,
             12604                /*K*  EMPTY is the empty bit.  This bit is set if the control
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:36   
             12605                      section is of size zero.  */
             12606    1         2 ATTR UNAL,
             12607    1           3 INT  UBIN(2) UNAL,
             12608                  /*K*  INT is the Section initialization.  */
             12609    1           3 SEGMENT BIT(1) UNAL,
             12610                  /*K* SEGMENT is set if the Section is defined in a data
             12611                       segment.  */
             12612    1           3 ALL BIT(1) UNAL,
             12613                  /*K*  ALL is set if the Section is allocated.  */
             12614    1           3 PRE_DCB BIT(1) UNAL,
             12615                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             12616    1           3 MES_INIT BIT(1) UNAL,
             12617    1           3 ALIGN UBIN(2) UNAL,
             12618                  /*K*  ALIGN is the Section alignment.  */
             12619    1         2 ADDRESS UBIN HALF UNAL,
             12620                /*K*  ADDRESS is the address within the Instruction Segment of
             12621                      the entry point of the external procedure.  */
             12622    1         2 NAME_DISP SBIN HALF UNAL,
             12623                /*K*  NAME_DISP is the Name index.  */
             12624    1         2 SIZE UBIN HALF UNAL,
             12625                /*K*  SIZE is the size, in words, of the section.  */
             12626    1         2 NODE# UBIN HALF UNAL,
             12627                /*K*  NODE# is the Node number of section.  */
             12628    1         2 COM_LINK UBIN HALF UNAL;
             12629                /*K*  COM_LINK is used internally by linker to link common sections */

             12639    1   /*******************************************************************************
             12640    1   *                                                                              *
             12641    1   *                          VX$SECT                                                *
             12642    1   *                                                                              *
             12643    1   *******************************************************************************/

             12648    1   DCL 1 VX$SECT BASED ALIGNED,
             12649    1         2 TYPE UBIN BYTE UNAL,
             12650                /*K*  TYPE -
             12651                      Type code      Section type
             12652                      ---------      ------------
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:37   
             12653                          0          Data control section with write access.
             12654                          1          Procedure control section.
             12655                          2          Unlabeled common, name pointer must be zero.
             12656                          3          Labeled common, with mandatory name pointer.
             12657                                     This is for labeled common which must be
             12658                                     in the root.
             12659                          4          Labeled common, with mandatory name pointer.
             12660                                     This is for labeled common which need not
             12661                                     be in the root.
             12662                          5          DCB, word 1 is name pointer.
             12663                          6          Data control section with read only access,
             12664                                     word 1 = 0 or name pointer.
             12665                          7          Constant labeled common, with mandatory name pointer.
             12666                                     This is for labeled common which must be
             12667                                     in the root.
             12668                          8          Constant labeled common, with mandatory name pointer.
             12669                                     This is for labeled common which need not
             12670                                     be in the root.                        */
             12671    1         2 * BIT(1),
             12672                /*K*  * is reserved for future use and must be zero. */
             12673    1         2 INITZERO BIT(1),
             12674                /*K*  INITZERO - if 1, initialize with zero.  */
             12675    1         2 INITUTS BIT(1),
             12676                /*K*  INITUTS - if 1, initialize with UTS.  */
             12677    1         2 SEGMENT BIT(1),
             12678                /*K*  SEGMENT - if 1, specifies that this section is
             12679                                to be placed in the segment specified by
             12680                                SEG_NPOINTER.  */
             12681    1         2 * BIT(3),
             12682                /*K*  * is reserved for future use and must be zero. */
             12683    1         2 BOUND UBIN(2) UNAL,
             12684                /*K*  BOUND - bits 6-7 - defines starting location.
             12685                              00 - starts on even word
             12686                              01 - starts on odd word
             12687                              10 - starts on multiple of 8
             12688                              11 - starts on page boundary     */
             12689    1         2 SIZE UBIN HALF UNAL,
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:38   
             12690                /*K*  SIZE is the size, in words, of the section.  */
             12691    1         2 NPOINTER SBIN HALF UNAL,
             12692                /*K*  NPOINTER is the word displacement into the name record
             12693                      (TYPE 1) locating the name of this section.  If the
             12694                      field is negative, the section has no name.  */
             12695    1         2 MBZ UBIN HALF UNAL,
             12696                /*K*  MBZ is reserved for future expansion and must be zero. */
             12697    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             12698                /*K*  SEG_NPOINTER locates a name in the Definition Names
             12699                      Section.  The name must be a valid segment name
             12700                      recognized by the linker.  */
             12701    1         2 G66 REDEF MBZ,
             12702                /*K*  G66 is not used on CP-6. */
             12703    1           3 * BIT(9),
             12704    1           3 NSAB BIT(9);
       19    12707        %VX$LST;

             12720    1   /*******************************************************************************
             12721    1   *                                                                              *
             12722    1   *                          VX$LST                                                 *
             12723    1   *                                                                              *
             12724    1   *******************************************************************************/

             12729    1   DCL 1 VX$LST                          ALIGNED BASED,
             12730    1         2 LINK$        PTR,               /* Link to next item                  */
             12731    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             12732    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             12733    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             12734    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             12735    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             12736    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             12737    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             12738    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             12739    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             12740    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             12741    1         2 P,
             12742    1           3 NAME_       ALIGNED,
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:39   
             12743    1             4 BOUND      UBIN(20)  UNAL,
             12744    1             4 FLAGSV     UBIN(11)  UNAL,
             12745    1             4 *          BIT(5)    UNAL,
             12746    1             4 NAME$      PTR,
             12747    1           3 ACCT_       ALIGNED,
             12748    1             4 BOUND      UBIN(20)  UNAL,
             12749    1             4 FLAGSV     UBIN(11)  UNAL,
             12750    1             4 *          BIT(5)    UNAL,
             12751    1             4 ACCT$      PTR,
             12752    1           3 PASS_       ALIGNED,
             12753    1             4 BOUND      UBIN(20)  UNAL,
             12754    1             4 FLAGSV     UBIN(11)  UNAL,
             12755    1             4 *          BIT(5)    UNAL,
             12756    1             4 PASS$      PTR,
             12757    1           3 SN_         ALIGNED,
             12758    1             4 BOUND      UBIN(20)  UNAL,
             12759    1             4 FLAGSV     UBIN(11)  UNAL,
             12760    1             4 *          BIT(5)    UNAL,
             12761    1             4 SN$        PTR,
             12762    1           3 WSN_        ALIGNED,
             12763    1             4 BOUND      UBIN(20)  UNAL,
             12764    1             4 FLAGSV     UBIN(11)  UNAL,
             12765    1             4 *          BIT(5)    UNAL,
             12766    1             4 WSN$       PTR,
             12767    1           3 B           ALIGNED,
             12768    1             4 RES        BIT(1)    UNAL,
             12769    1             4 ASN        BIT(1)    UNAL,
             12770    1             4 ACCT       BIT(1)    UNAL,
             12771    1             4 *          BIT(33)   UNAL,
             12772    1           3 RES         CHAR(4)   ALIGNED,
             12773    1           3 ASN         UBIN(36)  ALIGNED;
       20    12776        %VXD$TMPLT;

             12789    1   /*******************************************************************************
             12790    1   *                                                                              *
             12791    1   *                          VXD$TMPLT                                              *
             12792    1   *                                                                              *
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:40   
             12793    1   *******************************************************************************/

             12797        /*
             12798                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             12799                  ENTDEFs, SYMDEFs and SEGDEFs.
             12800        */
             12802    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             12803    1         2 VALUE SBIN UNAL,
             12804                /*K*  VALUE is the value if this entry is a constant.  */
             12805    1         2 AD REDEF VALUE,
             12806                /*K*  AD is the address if this entry is not constant.  */
             12807    1           3 LFLAGS UNAL,
             12808                  /*K*  LFLAGS is the field reserved for loader to flag load
             12809                        time attributes of the definition and must be zero
             12810                        in the object unit. */
             12811    1             4 SOURCE UBIN(3) UNAL,
             12812                    /*K*  SOURCE - Source of this DEF */
             12813    1             4 DEFINED BIT(1) UNAL,
             12814                    /*K*  DEFINED - Set if this DEF defined */
             12815    1             4 MULTIPLE BIT(1) UNAL,
             12816                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             12817    1             4 USED BIT(1) UNAL,
             12818                    /*K*  USED - Set if this DEF is used. */
             12819    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             12820                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             12821                        than 2048 (RU).  */
             12822    1           3 SECTNUM UBIN(11) UNAL,
             12823                  /*K*  SECTNUM contains an entry number into the section
             12824                        table (TYPE 3).  */
             12825    1           3 ISADDR UBIN HALF UNAL,
             12826                  /*K*  ISADDR - Is Address (RU)  */
             12827    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             12828                  /*K*  OFFSET is the word offset from the origin of the section. */
             12829    1         2 NPOINTER SBIN HALF UNAL,
             12830                /*K*  NPOINTER is a word displacement into the name record
             12831                      (TYPE 1) locating the name (of this entry). */
             12832    1         2 CONSTNT BIT(1) UNAL,
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:41   
             12833                /*K*  CONSTNT is a flag bit to determine the interpretation
             12834                      of word 0.
             12835                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             12836                                    SECTNUM, and ISADDR or OFFSET.
             12837                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             12838    1         2 LFLAGS UNAL,
             12839                /*K*  LFLAGS is the field reserved for loader to flag load
             12840                      time attributes and must be zero in the object unit. */
             12841    1           3 MULTIPLE BIT(1) UNAL,
             12842                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             12843    1           3 USED BIT(1) UNAL,
             12844                  /*K*  USED - Set if this DEF is used. */
             12845    1           3 SOURCE UBIN(4) UNAL,
             12846                  /*K*  SOURCE - Source of this DEF */
             12847    1           3 IS_DCB BIT(1) UNAL,
             12848                  /*K* IS_DCB - Set if this is a DCB */
             12849    1           3 * BIT(10) UNAL,
             12850                  /*K*  * is reserved for future use and must be zero.  */
             12851    1         2 PROTECTION REDEF LFLAGS,
             12852                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             12853    1           3 TYPE UBIN(5) UNAL,
             12854                  /*K*  TYPE is the Protection type.  */
             12855    1           3 * UBIN(12) UNAL;
             12856                  /*K*  * is reserved for future use and must be zero.  */
       21    12871        %T$C;

             12883    1   /*******************************************************************************
             12884    1   *                                                                              *
             12885    1   *                          T$C                                                 *
             12886    1   *                                                                              *
             12887    1   *******************************************************************************/

             12892    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             12893    1         2 COUNT        UBIN( 9) UNAL,
             12894    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             12895    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             12896    1         2 COUNT        UBIN( 9) UNAL,
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:42   
             12897    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       22    12900        %BANNER( ARG="FPTs and DCBs" );

             12908    1   /*******************************************************************************
             12909    1   *                                                                              *
             12910    1   *                          FPTs and DCBs                                          *
             12911    1   *                                                                              *
             12912    1   *******************************************************************************/

       23    12916       %FPT_READ( FPTN=READ_PLOVER_BIRTH, BUF=PLOVER_BIRTH, KEY=PLOVER_BIRTH_KEY, KEYS=YES,
             12916            DCB=M$OF );
       24    12955        %FPT_READ( FPTN=READ_OF_SEQ, DCB=M$OF, BUF=TXT, KEY=OU_KEY, KEYS=NO, KEYR=YES );
       25    12994        %FPT_WRITE( DCB=M$PLOVER, KEY=PLOVER_KEY );
       26    13025        %FPT_WRITE( FPTN=GLOBAL_WRITE, DCB=M$PLOVER, KEY=GLOBAL_KEY );
       27    13056        %VLP_NAME( NAME='**********************RUM' );
       28    13083        %FPT_OPEN( DCB=M$PLOVER, NAME=VLP_NAME, ACS=DIRECT, ASN=FILE,
       29    13084                   FUN=CREATE,   ORG=KEYED );
       30    13193        %FPT_UNFID( LEN=CNT, TEXTFID="RUM.FID", DCB=M$RF );
       31    13211        %FPT_CLOSE( DCB=M$PLOVER, DISP=SAVE );
       32    13253        %FPT_ALIB(CMD=DELTA_CMD, LIBNAME=DELTA, DLIB=YES, RETRN=NO, ECHO=NO, QUIET=YES);
       33    13270        %VLP_NAME( FPTN=DELTA, NAME='DELTA');
       34    13297    1   DCL M$PLOVER DCB;
       35    13298    1   DCL M$OF DCB;
       36    13299    1   DCL M$RF DCB;
       37    13300        %F$DCB;
       38    13357        %B$TCB;
       39    13360        %B$ALT;
       40    13368        %BANNER( ARG="B$OBJECT_C stuff" );

             13376    1   /*******************************************************************************
             13377    1   *                                                                              *
             13378    1   *                          B$OBJECT_C stuff                                       *
             13379    1   *                                                                              *
             13380    1   *******************************************************************************/

       41    13384        %B$RECORDSUBS;
       42    13412        %SUB_LINKFLAGS;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:43   
       43    13421        %B$HEADKEY( NAME=OU_KEY, STCLASS=STATIC );
       44    13433        %B$PLOVERKEY( NAME=B_PLOVERKEY, STCLASS=CONSTANT );
       45    13463        %B$PLOVERKEY( NAME=B$PLOVERKEY, STCLASS="BASED(OU_KEY$)" );
       46    13493        %B$PLOVERBIRTHKEY( NAME=PLOVER_BIRTH_KEY, STCLASS=STATIC );
       47    13516        %B$PLOVERBIRTH( NAME=PLOVER_BIRTH, STCLASS=STATIC );
       48    13538        %BANNER( ARG=PLOVER_KEY );

             13546    1   /*******************************************************************************
             13547    1   *                                                                              *
             13548    1   *                          PLOVER_KEY                                             *
             13549    1   *                                                                              *
             13550    1   *******************************************************************************/

       49    13554    1   DCL 1 PLOVER_KEY ALIGNED STATIC,
       50    13555    1         2 CNT  UBIN BYTE UNAL INIT( 5 ),
       51    13556    1         2 TYPE UBIN BYTE UNAL INIT( BITBIN('777'O) ),
       52    13557    1         2 NODE SBIN HALF UNAL INIT( 0 ),
       53    13558    1         2 SEQ  SBIN HALF UNAL INIT( 0 );
       54    13559        %BANNER( ARG=GLOBAL_KEY );

             13567    1   /*******************************************************************************
             13568    1   *                                                                              *
             13569    1   *                          GLOBAL_KEY                                             *
             13570    1   *                                                                              *
             13571    1   *******************************************************************************/

       55    13575    1   DCL 1 GLOBAL_KEY ALIGNED STATIC,
       56    13576    1         2 CNT UBIN BYTE UNAL INIT(34),
       57    13577    1         2 TYPE UBIN BYTE UNAL INIT( 0 ),
       58    13578    1         2 NAME CHAR(31) INIT( ' ' ),
       59    13579    1         2 SEQ UBIN HALF UNAL INIT( 0 );
       60    13580        %BANNER( ARG=USE_NODE );

             13588    1   /*******************************************************************************
             13589    1   *                                                                              *
             13590    1   *                          USE_NODE                                               *
             13591    1   *                                                                              *
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:44   
             13592    1   *******************************************************************************/

       61    13596    1   DCL 1 USE_NODE STATIC,
       62    13597    1         2 * CHAR(0) INIT('USE NODE '''),
       63    13598    1         2 NODE CHAR(31) INIT(' '),
       64    13599    1         2 * CHAR(0) INIT('''S');
       65    13600        %C;

             13608    1   /*******************************************************************************
             13609    1   *                                                                              *
             13610    1   *                          CHAR                                                 *
             13611    1   *                                                                              *
             13612    1   *******************************************************************************/

       66    13616    1   DCL TXT CHAR(256) STATIC;
       67    13617    1   DCL 1 RUM REDEF TXT,
       68    13618    1         2 RUM CHAR(4),
       69    13619    1         2 FID  CHAR(252);
       70    13620    1   DCL 1 DEFAULT_SYN (0:15) CHAR(8) CONSTANT INIT
       71    13621    1          ('GMAP   ', /* 0 - GMAP */
       72    13622    1           'PL6    ', /* 1 - PL6 */
       73    13623    1           'FORTRAN', /* 2 - FORTRAN */
       74    13624    1           'COBOL  ', /* 3 - COBOL */
       75    13625    1           'PL1    ', /* 4 - PL1 */
       76    13626    1           'RPG    ', /* 5 - RPG */
       77    13627    1           'PL6    ', /* 6 - PASCAL */
       78    13628    1           'PL6    ', /* 7 - MOMUS */
       79    13629    1           'FPL    ', /* 8 - FPL */
       80    13630    1           'GMAP   ', /* 9 - PARTRGE */
       81    13631    1           'PL6    ', /* A - IDL */
       82    13632    1           'GMAP   ', /* B - ELSIE */
       83    13633    1           'GMAP   ', /* C - CALF */
       84    13634    1           'CC     ', /* D - CC */
       85    13635    1           'PL6    ', /* E - unused */
       86    13636    1           'PL6    ');/* F - unused */
       87    13637    1   DCL ALIB_RETURN CHAR(0) CONSTANT INIT('ALIB RETURN');
       88    13638    1   DCL KILL_ECHO CHAR(0) CONSTANT INIT('KILL ECHO');
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:45   
       89    13639    1   DCL DELTA_CMD CHAR(0) CONSTANT INIT('READ **********************RUM' );
       90    13640        %P;

             13648    1   /*******************************************************************************
             13649    1   *                                                                              *
             13650    1   *                          PARAMETERS                                             *
             13651    1   *                                                                              *
             13652    1   *******************************************************************************/

       91    13656        %POINTER;
       92    13661    1   DCL OU_KEY$ PTR CONSTANT INIT(ADDR(OU_KEY));
       93    13662        %E;

             13670    1   /*******************************************************************************
             13671    1   *                                                                              *
             13672    1   *                          ENTRY                                                 *
             13673    1   *                                                                              *
             13674    1   *******************************************************************************/

       94    13678        %ENTRIES;
       95    13693    1   DCL VXU$NEW_SECTNUM ENTRY(4);
       96    13694        %S;

             13702    1   /*******************************************************************************
             13703    1   *                                                                              *
             13704    1   *                          SBIN                                                 *
             13705    1   *                                                                              *
             13706    1   *******************************************************************************/

       97    13710    1   DCL PLOVER_UTS UBIN WORD;
       98    13711    1   DCL CNT SBIN WORD STATIC;
       99    13712    1   DCL PLOVER_EXIST BIT(1) STATIC INIT('0'B);
      100    13713        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:46   
      101    13714    1         PLOVER_BIRTH_KEY.UTS = VX_OU_HEAD.UTS;

  13714  7 000002   000000 100400                    MLR     fill='000'O
         7 000003   000000 000004 xsym               ADSC9   VX_OU_HEAD               cn=0,n=4
         7 000004   000277 400004 2                  ADSC9   PLOVER_BIRTH_KEY         cn=2,n=4

      102    13715    1         CALL M$READ( READ_PLOVER_BIRTH ) ALTRET( NO_PLOVER_BIRTH );

  13715  7 000005   000000 630400 2                  EPPR0   READ_PLOVER_BIRTH
         7 000006   440000 713400                    CLIMB   alt,read
         7 000007   401400 401760                    pmme    nvectors=4
         7 000010   000012 702000 7                  TSX2    NO_PLOVER_BIRTH

      103    13716    2         DO WHILE( '0'B );

  13716  7 000011   000034 710000 7                  TRA     s:13728

      104    13717    2   NO_PLOVER_BIRTH:
      105    13718    2             IF @ALT_ERROR = %E$NOKEY THEN RETURN;

  13718  7 000012   000000 470400 xsym  NO_PLOVER_B* LDP0    B$TCB$
         7 000013   000000 471500                    LDP1    0,,PR0
         7 000014   100102 236100                    LDQ     66,,PR1
         7 000015   377770 376007                    ANQ     131064,DL
         7 000016   001020 116007                    CMPQ    528,DL
         7 000017   000021 601000 7                  TNZ     s:13722

  13718  7 000020   000000 702200 xent               TSX2  ! X66_ARET

      106    13719        /*E*  ERROR:  VXU-E$PLOVER_BIRTH_READ_ERR_VX-C
      107    13720              MESSAGE: Unable to read PLOVER BIRTH record.
      108    13721        */
      109    13722    2             CALL VXE$ERRMSG( , @E$F_D_VX );

  13722  7 000021   000001 236000 8                  LDQ     1
         7 000022   000001 235000 xsym               LDA     B_VECTNIL+1
         7 000023   200020 757100                    STAQ    NAME$+1,,AUTO
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:47   
         7 000024   200020 630500                    EPPR0   NAME$+1,,AUTO
         7 000025   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 000026   000000 701000 xent               TSX1    VXE$ERRMSG
         7 000027   000000 011000                    NOP     0

      110    13723                  %SCREAM( ERR#=E$PLOVER_BIRTH_READ_ERR_VX, MID="'U'", LEVEL=@E$F_VX, AUX=
             13723                      E$REFOUOF_VX );

  13724  7 000030   000004 630400 8                  EPPR0   4
         7 000031   000022 631400 xsym               EPPR1   B_VECTNIL+18
         7 000032   000000 701000 xent               TSX1    VXE$ERROR
         7 000033   000000 011000                    NOP     0

      111    13726    2             END;

      112    13727                                          /* Plover records exist for the OU */
      113    13728    2         IF NOT PLOVER_EXIST THEN DO;

  13728  7 000034   000445 234000 2                  SZN     PLOVER_EXIST
         7 000035   000110 604000 7                  TMI     s:13755

      114    13729    2             CALL M$OPEN( FPT_OPEN ) ALTRET( OPEN_ERROR );

  13729  7 000036   000074 630400 2                  EPPR0   FPT_OPEN
         7 000037   450000 713400                    CLIMB   alt,open
         7 000040   410400 401760                    pmme    nvectors=18
         7 000041   000306 702000 7                  TSX2    OPEN_ERROR

      115    13730    2             GLOBAL_WRITE.BUF_ = VECTOR( KILL_ECHO );

  13730  7 000042   000010 237000 8                  LDAQ    8
         7 000043   000054 757000 2                  STAQ    GLOBAL_WRITE+4

      116    13731    2             CALL M$WRITE( GLOBAL_WRITE ) ALTRET( WRITE_ERR );

  13731  7 000044   000050 630400 2                  EPPR0   GLOBAL_WRITE
         7 000045   440001 713400                    CLIMB   alt,write
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:48   
         7 000046   401400 401760                    pmme    nvectors=4
         7 000047   000331 702000 7                  TSX2    WRITE_ERR

      117    13732    2             TXT = 'RUM ';

  13732  7 000050   040000 100400                    MLR     fill='040'O
         7 000051   000063 000004 6                  ADSC9   OU_KEY$+1                cn=0,n=4
         7 000052   000344 000400 2                  ADSC9   TXT                      cn=0,n=256

      118    13733
      119    13734        /*  If then Else deleted as per star (23522). As it turns out the
      120    13735        M$UNFID call is always sufficient since at this point the DCB
      121    13736        will always have the RU name in it */
      122    13737
      123    13738        /*        IF VX_RU_NAME$ = ADDR(NIL) THEN    No RU specified. */
      124    13739    2                 CALL M$UNFID( FPT_UNFID );

  13739  7 000053   000166 630400 2                  EPPR0   FPT_UNFID
         7 000054   020021 713400                    CLIMB   8209
         7 000055   404400 401760                    pmme    nvectors=10

      125    13740        /*        ELSE DO;
      126    13741                      RUM.FID = VX_RU_NAME$ -> T$C.CHARS;
      127    13742                      CNT = VX_RU_NAME$ -> T$C.COUNT;
      128    13743                      END;  */
      129    13744
      130    13745    2             SUBSTR (TXT,CNT+5,5) = ',NUTS';

  13745  7 000056   000444 235000 2                  LDA     CNT
         7 000057   040005 100400                    MLR     fill='040'O
         7 000060   000064 000005 6                  ADSC9   OU_KEY$+2                cn=0,n=5
         7 000061   000345 200005 2                  ADSC9   TXT+1,A                  cn=1,n=5

      131    13746    2             GLOBAL_WRITE.BUF_ = VECTOR( SUBSTR(TXT,0,CNT+10) );

  13746  7 000062   000444 235000 2                  LDA     CNT
         7 000063   000020 735000                    ALS     16
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:49   
         7 000064   000012 035000 8                  ADLA    10
         7 000065   000013 236000 8                  LDQ     11
         7 000066   000054 757000 2                  STAQ    GLOBAL_WRITE+4

      132    13747    2             GLOBAL_KEY.SEQ = 1;

  13747  7 000067   001000 236007                    LDQ     512,DL
         7 000070   000330 552030 2                  STBQ    GLOBAL_KEY+8,'30'O

      133    13748    2             CALL M$WRITE( GLOBAL_WRITE ) ALTRET( WRITE_ERR );

  13748  7 000071   000050 630400 2                  EPPR0   GLOBAL_WRITE
         7 000072   440001 713400                    CLIMB   alt,write
         7 000073   401400 401760                    pmme    nvectors=4
         7 000074   000331 702000 7                  TSX2    WRITE_ERR

      134    13749    2             PLOVER_KEY.NODE = -1;

  13749  7 000075   777777 220003                    LDX0    -1,DU
         7 000076   000316 440000 2                  SXL0    PLOVER_KEY

      135    13750    2             PLOVER_KEY.SEQ  = -1;

  13750  7 000077   000317 740000 2                  STX0    PLOVER_KEY+1

      136    13751    2             FPT_WRITE.BUF_ = VECTOR( ALIB_RETURN );

  13751  7 000100   000014 237000 8                  LDAQ    12
         7 000101   000040 757000 2                  STAQ    FPT_WRITE+4

      137    13752    2             CALL M$WRITE( FPT_WRITE ) ALTRET( WRITE_ERR );

  13752  7 000102   000034 630400 2                  EPPR0   FPT_WRITE
         7 000103   440001 713400                    CLIMB   alt,write
         7 000104   401400 401760                    pmme    nvectors=4
         7 000105   000331 702000 7                  TSX2    WRITE_ERR

PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:50   
      138    13753    2             PLOVER_EXIST = '1'B;

  13753  7 000106   400000 236003                    LDQ     -131072,DU
         7 000107   000445 756000 2                  STQ     PLOVER_EXIST

      139    13754    2             END;

      140    13755    1         IF NOT VX_OD.NUM.IPATCH AND M$OF$->F$DCB.ARS# = @PLOVER_BIRTH_ARS THEN

  13755  7 000110   000001 236000 xsym               LDQ     VX_OD+1
         7 000111   100000 316003                    CANQ    32768,DU
         7 000112   000122 601000 7                  TNZ     s:13757
         7 000113   000000 470400 xsym               LDP0    M$OF$
         7 000114   000000 235100                    LDA     0,,PR0
         7 000115   000064 115007                    CMPA    52,DL
         7 000116   000122 601000 7                  TNZ     s:13757

      141    13756    1            VX_O.NUM.IPATCH  = VX_O.NUM.IPATCH + PLOVER_BIRTH.IPATCH;

  13756  7 000117   000046 236000 xsym               LDQ     VX_O+38
         7 000120   000314 036000 2                  ADLQ    PLOVER_BIRTH+11
         7 000121   000046 756000 xsym               STQ     VX_O+38

      142    13757    1         IF NOT VX_OD.NUM.DPATCH and M$OF$->F$DCB.ARS# = @PLOVER_BIRTH_ARS THEN

  13757  7 000122   000001 236000 xsym               LDQ     VX_OD+1
         7 000123   200000 316003                    CANQ    65536,DU
         7 000124   000134 601000 7                  TNZ     s:13759
         7 000125   000000 470400 xsym               LDP0    M$OF$
         7 000126   000000 235100                    LDA     0,,PR0
         7 000127   000064 115007                    CMPA    52,DL
         7 000130   000134 601000 7                  TNZ     s:13759

      143    13758    1            VX_O.NUM.DPATCH = VX_O.NUM.DPATCH + PLOVER_BIRTH.DPATCH;

  13758  7 000131   000045 236000 xsym               LDQ     VX_O+37
         7 000132   000315 036000 2                  ADLQ    PLOVER_BIRTH+12
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:51   
         7 000133   000045 756000 xsym               STQ     VX_O+37

      144    13759    1         TXT = 'SYNTAX';

  13759  7 000134   040000 100400                    MLR     fill='040'O
         7 000135   000066 000006 6                  ADSC9   OU_KEY$+4                cn=0,n=6
         7 000136   000344 000400 2                  ADSC9   TXT                      cn=0,n=256

      145    13760
      146    13761        /* Now write the default SYNTAX for this plover patch */
      147    13762
      148    13763    1         SUBSTR(TXT,7,8) = DEFAULT_SYN (VX_OUHEAD.COMPILER);

  13763  7 000137   000001 220000 xsym               LDX0    VX_OU_HEAD+1
         7 000140   000777 360003                    ANX0    511,DU
         7 000141   000000 635010                    EAA     0,X0
         7 000142   000017 771000                    ARL     15
         7 000143   040000 100405                    MLR     fill='040'O
         7 000144   000004 000010 6                  ADSC9   DEFAULT_SYN,A            cn=0,n=8
         7 000145   000345 600010 2                  ADSC9   TXT+1                    cn=3,n=8

      149    13764    1         CNT = 14;

  13764  7 000146   000016 236007                    LDQ     14,DL
         7 000147   000444 756000 2                  STQ     CNT

      150    13765    1         CALL WRITE_PLOVER_REC;

  13765  7 000150   000355 701000 7                  TSX1    WRITE_PLOVER_REC
         7 000151   000000 011000                    NOP     0

      151    13766    1         TXT = ' ';

  13766  7 000152   040000 100400                    MLR     fill='040'O
         7 000153   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         7 000154   000344 000400 2                  ADSC9   TXT                      cn=0,n=256

PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:52   
      152    13767    1         CALL M$READ( READ_OF_SEQ ) ALTRET(DONE);

  13767  7 000155   000016 630400 2                  EPPR0   READ_OF_SEQ
         7 000156   440000 713400                    CLIMB   alt,read
         7 000157   401400 401760                    pmme    nvectors=4
         7 000160   000254 702000 7                  TSX2    DONE

      153    13768    1         CNT = M$OF$ -> F$DCB.ARS#;

  13768  7 000161   000000 470400 xsym               LDP0    M$OF$
         7 000162   000000 235100                    LDA     0,,PR0
         7 000163   000444 755000 2                  STA     CNT

      154    13769    1         PLOVER_UTS = PLOVER_BIRTH_KEY.UTS;

  13769  7 000164   000277 235000 2                  LDA     PLOVER_BIRTH_KEY
         7 000165   000300 236000 2                  LDQ     PLOVER_BIRTH_KEY+1
         7 000166   000022 773000                    LRL     18
         7 000167   200007 756100                    STQ     PLOVER_UTS,,AUTO

      155    13770    2         DO WHILE( B$PLOVERKEY.KEYSIZ  = B_PLOVERKEY.KEYSIZ

  13770  7 000170   000232 710000 7                  TRA     s:13786

      156    13771    2                 AND  B$PLOVERKEY.NOTHD = B_PLOVERKEY.NOTHD
      157    13772    2                 AND  B$PLOVERKEY.UTS   = PLOVER_BIRTH_KEY.UTS );
      158    13773    2             IF SUBSTR(TXT,0,7) = 'ENTREF ' THEN

  13773  7 000171   040000 106400                    CMPC    fill='040'O
         7 000172   000344 000007 2                  ADSC9   TXT                      cn=0,n=7
         7 000173   000070 000007 6                  ADSC9   OU_KEY$+6                cn=0,n=7
         7 000174   000200 601000 7                  TNZ     s:13776

      159    13774    2                 CALL PROCESS_PLOVER_ENTREF;

  13774  7 000175   000616 701000 7                  TSX1    PROCESS_PLOVER_ENTREF
         7 000176   000000 011000                    NOP     0
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:53   
         7 000177   000220 710000 7                  TRA     s:13783

      160    13775    2             ELSE
      161    13776    2                 IF SUBSTR(TXT,0,7) = 'SYMDEF' THEN

  13776  7 000200   040000 106400                    CMPC    fill='040'O
         7 000201   000344 000007 2                  ADSC9   TXT                      cn=0,n=7
         7 000202   000072 000006 6                  ADSC9   OU_KEY$+8                cn=0,n=6
         7 000203   000207 601000 7                  TNZ     s:13779

      162    13777    2                     CALL PROCESS_PLOVER_SYMDEF;

  13777  7 000204   000760 701000 7                  TSX1    PROCESS_PLOVER_SYMDEF
         7 000205   000000 011000                    NOP     0
         7 000206   000220 710000 7                  TRA     s:13783

      163    13778    2                 ELSE
      164    13779    2                     IF SUBSTR(TXT,0,9) = 'EXTERNAL ' THEN

  13779  7 000207   040000 106400                    CMPC    fill='040'O
         7 000210   000344 000011 2                  ADSC9   TXT                      cn=0,n=9
         7 000211   000074 000011 6                  ADSC9   OU_KEY$+10               cn=0,n=9
         7 000212   000216 601000 7                  TNZ     s:13782

      165    13780    2                         CALL WRITE_GLOBAL_REC;

  13780  7 000213   000473 701000 7                  TSX1    WRITE_GLOBAL_REC
         7 000214   000000 011000                    NOP     0
         7 000215   000220 710000 7                  TRA     s:13783

      166    13781    2                     ELSE
      167    13782    2                         CALL WRITE_PLOVER_REC;

  13782  7 000216   000355 701000 7                  TSX1    WRITE_PLOVER_REC
         7 000217   000000 011000                    NOP     0

      168    13783    2             TXT = ' ';
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:54   

  13783  7 000220   040000 100400                    MLR     fill='040'O
         7 000221   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         7 000222   000344 000400 2                  ADSC9   TXT                      cn=0,n=256

      169    13784    2             CALL M$READ( READ_OF_SEQ ) ALTRET(DONE);

  13784  7 000223   000016 630400 2                  EPPR0   READ_OF_SEQ
         7 000224   440000 713400                    CLIMB   alt,read
         7 000225   401400 401760                    pmme    nvectors=4
         7 000226   000254 702000 7                  TSX2    DONE

      170    13785    2             CNT = M$OF$ -> F$DCB.ARS#;

  13785  7 000227   000000 470400 xsym               LDP0    M$OF$
         7 000230   000000 235100                    LDA     0,,PR0
         7 000231   000444 755000 2                  STA     CNT

      171    13786    2             END;

  13786  7 000232   000062 471400 6                  LDP1    OU_KEY$
         7 000233   100000 236100                    LDQ     0,,PR1
         7 000234   000000 676000 6                  ERQ     B_PLOVERKEY
         7 000235   777000 376003                    ANQ     -512,DU
         7 000236   000254 601000 7                  TNZ     DONE
         7 000237   100000 236100                    LDQ     0,,PR1
         7 000240   000000 676000 6                  ERQ     B_PLOVERKEY
         7 000241   000777 376003                    ANQ     511,DU
         7 000242   000254 601000 7                  TNZ     DONE
         7 000243   000277 235000 2                  LDA     PLOVER_BIRTH_KEY
         7 000244   000300 236000 2                  LDQ     PLOVER_BIRTH_KEY+1
         7 000245   000022 773000                    LRL     18
         7 000246   200020 756100                    STQ     NAME$+1,,AUTO
         7 000247   100000 235100                    LDA     0,,PR1
         7 000250   100001 236100                    LDQ     1,,PR1
         7 000251   000022 773000                    LRL     18
         7 000252   200020 116100                    CMPQ    NAME$+1,,AUTO
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:55   
         7 000253   000171 600000 7                  TZE     s:13773

      172    13787    1   DONE:
      173    13788    1         RETURN;

  13788  7 000254   000000 702200 xent  DONE         TSX2  ! X66_ARET

      174    13789
      175    13790        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:56   
      176    13791    1   VXU$RUM: ENTRY ALTRET ;

  13791  7 000255   000000 700200 xent  VXU$RUM      TSX0  ! X66_AUTO_1
         7 000256   000024 000001                    ZERO    20,1

      177    13792
      178    13793    1         IF  NOT PLOVER_EXIST  THEN RETURN;

  13793  7 000257   000445 234000 2                  SZN     PLOVER_EXIST
         7 000260   000262 604000 7                  TMI     s:13795

  13793  7 000261   000000 702200 xent               TSX2  ! X66_ARET

      179    13794                                                  /* Rums exist for the run unit */
      180    13795    1         CALL M$CLOSE( FPT_CLOSE );          /* Close M$PLOVER */

  13795  7 000262   000214 630400 2                  EPPR0   FPT_CLOSE
         7 000263   050001 713400                    CLIMB   close
         7 000264   406000 401760                    pmme    nvectors=13

      181    13796        /*E*  ERROR: VXU-E$PLOVERING_VX-C
      182    13797              MESSAGE: Plovering ....
      183    13798        */
      184    13799              %SCREAM (ERR#=E$PLOVERING_VX,MID="'U'",LEVEL=@E$I_VX);

  13800  7 000265   000017 630400 8                  EPPR0   15
         7 000266   000022 631400 xsym               EPPR1   B_VECTNIL+18
         7 000267   000000 701000 xent               TSX1    VXE$ERROR
         7 000270   000000 011000                    NOP     0

      185    13802                                          /* Associate DELTA to do the rums */
      186    13803    1         CALL M$ALIB( FPT_ALIB )    ALTRET( ALIB_ERR);

  13803  7 000271   000252 630400 2                  EPPR0   FPT_ALIB
         7 000272   400007 713400                    CLIMB   alt,+7
         7 000273   401400 401760                    pmme    nvectors=4
         7 000274   000354 702000 7                  TSX2    ALIB_ERR
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:57   

      187    13804                                          /* Delete the ************RUM file */
      188    13805    1         FPT_OPEN.V.FUN# = %UPDATE#;

  13805  7 000275   001000 236007                    LDQ     512,DL
         7 000276   000141 552010 2                  STBQ    FPT_OPEN+37,'10'O

      189    13806    1         FPT_OPEN.V.DELETE# = %YES#;

  13806  7 000277   040000 236007                    LDQ     16384,DL
         7 000300   000140 256000 2                  ORSQ    FPT_OPEN+36

      190    13807    1         CALL M$OPEN( FPT_OPEN)      ALTRET( OPEN_ERROR );

  13807  7 000301   000074 630400 2                  EPPR0   FPT_OPEN
         7 000302   450000 713400                    CLIMB   alt,open
         7 000303   410400 401760                    pmme    nvectors=18
         7 000304   000306 702000 7                  TSX2    OPEN_ERROR

      191    13808    1         RETURN;

  13808  7 000305   000000 702200 xent               TSX2  ! X66_ARET

      192    13809
      193    13810        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:58   
      194    13811        /*
      195    13812                      Errors
      196    13813        */
      197    13814    1   OPEN_ERROR:
      198    13815        /*E*  ERROR:  VXU-E$UNABLE_OPEN_M$PLOVER_VX-C
      199    13816              MESSAGE: Unable to open %FN
      200    13817        */
      201    13818    1         CALL VXE$ERRMSG( , @E$F_D_VX );

  13818  7 000306   000001 236000 8     OPEN_ERROR   LDQ     1
         7 000307   000001 235000 xsym               LDA     B_VECTNIL+1
         7 000310   200020 757100                    STAQ    NAME$+1,,AUTO
         7 000311   200020 630500                    EPPR0   NAME$+1,,AUTO
         7 000312   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 000313   000000 701000 xent               TSX1    VXE$ERRMSG
         7 000314   000000 011000                    NOP     0

      202    13819              %ERRMSG( ERR#=E$UNABLE_OPEN_M$PLOVER_VX, MID='U', DCB#=M$PLOVER, LEVEL=
             13819                  @E$F_VX );

  13826  7 000315   000000 236007 xsym               LDQ     M$PLOVER,DL
         7 000316   200020 756100                    STQ     NAME$+1,,AUTO
         7 000317   200020 630500                    EPPR0   NAME$+1,,AUTO
         7 000320   200023 450500                    STP0    NAME$+4,,AUTO
         7 000321   000005 236000 8                  LDQ     5
         7 000322   200022 756100                    STQ     NAME$+3,,AUTO
         7 000323   000023 236000 8                  LDQ     19
         7 000324   200021 756100                    STQ     NAME$+2,,AUTO
         7 000325   200021 630500                    EPPR0   NAME$+2,,AUTO
         7 000326   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 000327   000000 701000 xent               TSX1    VXE$ERRMSG
         7 000330   000000 011000                    NOP     0

      203    13828
      204    13829    1   WRITE_ERR:
      205    13830        /*E*  ERROR: VXU-E$CANT_WRITE_M$PLOVER_VX-C
      206    13831              MESSAGE: Unable to write to %FN
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:59   
      207    13832        */
      208    13833    1         CALL VXE$ERRMSG( , @E$F_D_VX );

  13833  7 000331   000001 236000 8     WRITE_ERR    LDQ     1
         7 000332   000001 235000 xsym               LDA     B_VECTNIL+1
         7 000333   200020 757100                    STAQ    NAME$+1,,AUTO
         7 000334   200020 630500                    EPPR0   NAME$+1,,AUTO
         7 000335   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 000336   000000 701000 xent               TSX1    VXE$ERRMSG
         7 000337   000000 011000                    NOP     0

      209    13834              %ERRMSG( ERR#=E$CANT_WRITE_M$PLOVER_VX, MID='U', DCB#=M$PLOVER, LEVEL=@E$F_VX
             13834                  );

  13841  7 000340   000000 236007 xsym               LDQ     M$PLOVER,DL
         7 000341   200020 756100                    STQ     NAME$+1,,AUTO
         7 000342   200020 630500                    EPPR0   NAME$+1,,AUTO
         7 000343   200023 450500                    STP0    NAME$+4,,AUTO
         7 000344   000005 236000 8                  LDQ     5
         7 000345   200022 756100                    STQ     NAME$+3,,AUTO
         7 000346   000024 236000 8                  LDQ     20
         7 000347   200021 756100                    STQ     NAME$+2,,AUTO
         7 000350   200021 630500                    EPPR0   NAME$+2,,AUTO
         7 000351   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 000352   000000 701000 xent               TSX1    VXE$ERRMSG
         7 000353   000000 011000                    NOP     0

      210    13843
      211    13844    1   ALIB_ERR:
      212    13845    1         ALTRETURN ;

  13845  7 000354   000000 702200 xent  ALIB_ERR     TSX2  ! X66_AALT

      213    13846
      214    13847        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:60   
      215    13848    1   WRITE_PLOVER_REC: PROC;

  13848  7 000355   200010 741300       WRITE_PLOVE* STX1  ! PLOVER_UTS+1,,AUTO

      216    13849
      217    13850    3         IF NOT VX_CURR$->VX$NODE.USE_NODE THEN DO;

  13850  7 000356   000000 470400 xsym               LDP0    VX_CURR$
         7 000357   000144 236100                    LDQ     100,,PR0
         7 000360   100000 316003                    CANQ    32768,DU
         7 000361   000430 601000 7                  TNZ     s:13865

      218    13851    3             VX_CURR$ -> VX$NODE.USE_NODE = '1'B;

  13851  7 000362   100000 236003                    LDQ     32768,DU
         7 000363   000144 256100                    ORSQ    100,,PR0

      219    13852    3             PLOVER_KEY.NODE = VX_CURR$ -> VX$NODE.NUM + 1;

  13852  7 000364   000010 720100                    LXL0    8,,PR0
         7 000365   000001 622010                    EAX2    1,X0
         7 000366   000316 442000 2                  SXL2    PLOVER_KEY

      220    13853    3             PLOVER_KEY.SEQ  = 0;

  13853  7 000367   000000 220003                    LDX0    0,DU
         7 000370   000317 740000 2                  STX0    PLOVER_KEY+1

      221    13854    4             IF VX_NODE_NUMBER > 0 THEN DO;

  13854  7 000371   000000 235000 xsym               LDA     VX_NODE_NUMBER
         7 000372   000430 604400 7                  TMOZ    s:13865

      222    13855    4                 P$ = VX_CURR$ -> VX$NODE.HEAD$;

  13855  7 000373   000004 236100                    LDQ     4,,PR0
         7 000374   200004 756100                    STQ     P$,,AUTO
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:61   

      223    13856    4                 IF P$->VX$LST.TYPE = @OF  AND  P$->VX$LST.SUB_TYPE = @OF_LIST

  13856  7 000375   200004 471500                    LDP1    P$,,AUTO
         7 000376   100001 223100                    LDX3    1,,PR1
         7 000377   000413 601000 7                  TNZ     s:13860
         7 000400   100001 724100                    LXL4    1,,PR1
         7 000401   000001 104003                    CMPX4   1,DU
         7 000402   000413 601000 7                  TNZ     s:13860

      224    13857    4                 THEN
      225    13858    4                    USE_NODE.NODE = SUBSTR(P$->VX$LST.OBJECT_NAME$->T$C.CHARS,1);

  13858  7 000403   100002 473500                    LDP3    2,,PR1
         7 000404   300000 236100                    LDQ     0,,PR3
         7 000405   000033 772000                    QRL     27
         7 000406   777777 625006                    EAX5    -1,QL
         7 000407   040000 100540                    MLR     fill='040'O
         7 000410   300000 400015                    ADSC9   0,,PR3                   cn=2,n=*X5
         7 000411   000333 400037 2                  ADSC9   USE_NODE+2               cn=2,n=31
         7 000412   000422 710000 7                  TRA     s:13861

      226    13859    4                 ELSE
      227    13860    4                     USE_NODE.NODE = P$->VX$LST.P.NAME_.NAME$->T$C.CHARS;

  13860  7 000413   100006 473500                    LDP3    6,,PR1
         7 000414   300000 236100                    LDQ     0,,PR3
         7 000415   000033 772000                    QRL     27
         7 000416   000000 624006                    EAX4    0,QL
         7 000417   040000 100540                    MLR     fill='040'O
         7 000420   300000 200014                    ADSC9   0,,PR3                   cn=1,n=*X4
         7 000421   000333 400037 2                  ADSC9   USE_NODE+2               cn=2,n=31

      228    13861    4                 FPT_WRITE.BUF_ = VECTOR( USE_NODE );

  13861  7 000422   000026 237000 8                  LDAQ    22
         7 000423   000040 757000 2                  STAQ    FPT_WRITE+4
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:62   

      229    13862    4                 CALL M$WRITE( FPT_WRITE ) ALTRET( WRITE_ERR );

  13862  7 000424   000034 630400 2                  EPPR0   FPT_WRITE
         7 000425   440001 713400                    CLIMB   alt,write
         7 000426   401400 401760                    pmme    nvectors=4
         7 000427   000446 702000 7                  TSX2    WRITE_ERR

      230    13863    4                 END;

      231    13864    3             END;

      232    13865    2         PLOVER_KEY.SEQ = PLOVER_KEY.SEQ + 1;

  13865  7 000430   000317 220000 2                  LDX0    PLOVER_KEY+1
         7 000431   000001 621010                    EAX1    1,X0
         7 000432   000317 741000 2                  STX1    PLOVER_KEY+1

      233    13866    2         FPT_WRITE.BUF_ = VECTOR( SUBSTR(TXT,0,CNT) );

  13866  7 000433   000444 235000 2                  LDA     CNT
         7 000434   000020 735000                    ALS     16
         7 000435   000140 135007                    SBLA    96,DL
         7 000436   000013 236000 8                  LDQ     11
         7 000437   000040 757000 2                  STAQ    FPT_WRITE+4

      234    13867    2         CALL M$WRITE( FPT_WRITE ) ALTRET( WRITE_ERR );

  13867  7 000440   000034 630400 2                  EPPR0   FPT_WRITE
         7 000441   440001 713400                    CLIMB   alt,write
         7 000442   401400 401760                    pmme    nvectors=4
         7 000443   000446 702000 7                  TSX2    WRITE_ERR

      235    13868    2         RETURN;

  13868  7 000444   200010 221300                    LDX1  ! PLOVER_UTS+1,,AUTO
         7 000445   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:63   

      236    13869
      237    13870    2   WRITE_ERR:
      238    13871        /*    ERROR: VXU-E$CANT_WRITE_M$PLOVER_VX-C
      239    13872              MESSAGE: Unable to write to %FN
      240    13873        */
      241    13874    2         CALL VXE$ERRMSG( , @E$F_D_VX );

  13874  7 000446   000001 236000 8     WRITE_ERR    LDQ     1
         7 000447   000001 235000 xsym               LDA     B_VECTNIL+1
         7 000450   200020 757100                    STAQ    NAME$+1,,AUTO
         7 000451   200020 630500                    EPPR0   NAME$+1,,AUTO
         7 000452   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 000453   000000 701000 xent               TSX1    VXE$ERRMSG
         7 000454   000000 011000                    NOP     0

      242    13875              %ERRMSG( ERR#=E$CANT_WRITE_M$PLOVER_VX, MID='U', DCB#=M$PLOVER, LEVEL=@E$F_VX
             13875                  );

  13882  7 000455   000000 236007 xsym               LDQ     M$PLOVER,DL
         7 000456   200020 756100                    STQ     NAME$+1,,AUTO
         7 000457   200020 630500                    EPPR0   NAME$+1,,AUTO
         7 000460   200023 450500                    STP0    NAME$+4,,AUTO
         7 000461   000005 236000 8                  LDQ     5
         7 000462   200022 756100                    STQ     NAME$+3,,AUTO
         7 000463   000024 236000 8                  LDQ     20
         7 000464   200021 756100                    STQ     NAME$+2,,AUTO
         7 000465   200021 630500                    EPPR0   NAME$+2,,AUTO
         7 000466   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 000467   000000 701000 xent               TSX1    VXE$ERRMSG
         7 000470   000000 011000                    NOP     0

      243    13884
      244    13885    2   END WRITE_PLOVER_REC;

  13885  7 000471   200010 221300                    LDX1  ! PLOVER_UTS+1,,AUTO
         7 000472   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:64   

      245    13886        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:65   
      246    13887    1   WRITE_GLOBAL_REC: PROC;

  13887  7 000473   200010 741300       WRITE_GLOBA* STX1  ! PLOVER_UTS+1,,AUTO

      247    13888
      248    13889    2   DCL I UBIN WORD;
      249    13890    2   DCL J UBIN WORD;
      250    13891    2   DCL PATCH_TYPE CHAR(1);
      251    13892    2   DCL PATCH_SIZE UBIN WORD;
      252    13893
      253    13894    2   DCL 1 DEF_CMD STATIC,
      254    13895    2         2 * CHAR(0) INIT('DEF '),
      255    13896    2         2 NAME CHAR(32) INIT(' '),
      256    13897    2         2 PATCH_TYPE CHAR(1);
      257    13898    2   DCL 1 MOD_CMD STATIC,
      258    13899    2         2 * CHAR(0) INIT('M '),
      259    13900    2         2 PATCH_TYPE CHAR(1) INIT(' '),
      260    13901    2         2 * CHAR(0) INIT(' 0');
      261    13902
      262    13903
      263    13904    2           CALL INDEX(I,' ',SUBSTR(TXT,9));

  13904  7 000474   000000 124400                    SCM     mask='000'O
         7 000475   000346 200367 2                  ADSC9   TXT+2                    cn=1,n=247
         7 000476   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         7 000477   200011 000100                    ARG     I,,AUTO

      264    13905    2         PATCH_TYPE = SUBSTR(TXT,I+10,1);

  13905  7 000500   200011 235100                    LDA     I,,AUTO
         7 000501   040100 100405                    MLR     fill='040'O
         7 000502   000346 400001 2                  ADSC9   TXT+2,A                  cn=2,n=1
         7 000503   200013 000001                    ADSC9   PATCH_TYPE,,AUTO         cn=0,n=1

      265    13906    2           CALL INDEX(J,' ',SUBSTR(TXT,I+12));

  13906  7 000504   777413 620005                    EAX0    -245,AL
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:66   
         7 000505   777777 660003                    ERX0    -1,DU
         7 000506   000000 124445                    SCM     mask='000'O
         7 000507   000347 000010 2                  ADSC9   TXT+3,A                  cn=0,n=*X0
         7 000510   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         7 000511   200012 000100                    ARG     J,,AUTO

      266    13907    2         CALL CHARBIN( PATCH_SIZE, SUBSTR(TXT,I+12,J) );

  13907  7 000512   200012 722100                    LXL2    J,,AUTO
         7 000513   000100 305445                    DTB
         7 000514   000347 030012 2                  NDSC9   TXT+3,A                  cn=0,s=nosgn,sf=0,n=*X2
         7 000515   200020 000010                    NDSC9   NAME$+1,,AUTO            cn=0,s=lsgnf,sf=0,n=8
         7 000516   200021 236100                    LDQ     NAME$+2,,AUTO
         7 000517   200014 756100                    STQ     PATCH_SIZE,,AUTO

      267    13908    2         GLOBAL_KEY.NAME = SUBSTR(TXT,9,I);

  13908  7 000520   000000 623005                    EAX3    0,AL
         7 000521   040000 100440                    MLR     fill='040'O
         7 000522   000346 200013 2                  ADSC9   TXT+2                    cn=1,n=*X3
         7 000523   000320 400037 2                  ADSC9   GLOBAL_KEY               cn=2,n=31

      268    13909    2         GLOBAL_KEY.SEQ  = 0;

  13909  7 000524   000000 236003                    LDQ     0,DU
         7 000525   000330 552030 2                  STBQ    GLOBAL_KEY+8,'30'O

      269    13910    2         DEF_CMD.NAME = SUBSTR(TXT,9,I);

  13910  7 000526   200011 723100                    LXL3    I,,AUTO
         7 000527   040000 100440                    MLR     fill='040'O
         7 000530   000346 200013 2                  ADSC9   TXT+2                    cn=1,n=*X3
         7 000531   000447 000040 2                  ADSC9   DEF_CMD+1                cn=0,n=32

      270    13911    2         DEF_CMD.PATCH_TYPE = PATCH_TYPE;

  13911  7 000532   200013 236100                    LDQ     PATCH_TYPE,,AUTO
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:67   
         7 000533   000457 552040 2                  STBQ    DEF_CMD+9,'40'O

      271    13912    2         GLOBAL_WRITE.BUF_ = VECTOR( DEF_CMD );

  13912  7 000534   000030 237000 8                  LDAQ    24
         7 000535   000054 757000 2                  STAQ    GLOBAL_WRITE+4

      272    13913    2         CALL M$WRITE( GLOBAL_WRITE ) ALTRET( WRITE_ERR );

  13913  7 000536   000050 630400 2                  EPPR0   GLOBAL_WRITE
         7 000537   440001 713400                    CLIMB   alt,write
         7 000540   401400 401760                    pmme    nvectors=4
         7 000541   000571 702000 7                  TSX2    WRITE_ERR

      273    13914    2         MOD_CMD.PATCH_TYPE = PATCH_TYPE;

  13914  7 000542   200013 236100                    LDQ     PATCH_TYPE,,AUTO
         7 000543   000022 772000                    QRL     18
         7 000544   000460 552010 2                  STBQ    MOD_CMD,'10'O

      274    13915    2         GLOBAL_WRITE.BUF_ = VECTOR( MOD_CMD );

  13915  7 000545   000032 237000 8                  LDAQ    26
         7 000546   000054 757000 2                  STAQ    GLOBAL_WRITE+4

      275    13916    3         DO I = 1 TO PATCH_SIZE;

  13916  7 000547   000001 235007                    LDA     1,DL
         7 000550   200011 755100                    STA     I,,AUTO
         7 000551   000564 710000 7                  TRA     s:13919+3

      276    13917    3             GLOBAL_KEY.SEQ = I;

  13917  7 000552   200011 236100                    LDQ     I,,AUTO
         7 000553   000011 736000                    QLS     9
         7 000554   000330 552030 2                  STBQ    GLOBAL_KEY+8,'30'O

PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:68   
      277    13918    3             CALL M$WRITE( GLOBAL_WRITE ) ALTRET( WRITE_ERR );

  13918  7 000555   000050 630400 2                  EPPR0   GLOBAL_WRITE
         7 000556   440001 713400                    CLIMB   alt,write
         7 000557   401400 401760                    pmme    nvectors=4
         7 000560   000571 702000 7                  TSX2    WRITE_ERR

      278    13919    3             END;

  13919  7 000561   200011 235100                    LDA     I,,AUTO
         7 000562   000001 035007                    ADLA    1,DL
         7 000563   200011 755100                    STA     I,,AUTO
         7 000564   200014 236100                    LDQ     PATCH_SIZE,,AUTO
         7 000565   200011 116100                    CMPQ    I,,AUTO
         7 000566   000552 603000 7                  TRC     s:13917

      279    13920    2         RETURN;

  13920  7 000567   200010 221300                    LDX1  ! PLOVER_UTS+1,,AUTO
         7 000570   000001 702211                    TSX2  ! 1,X1

      280    13921
      281    13922    2   WRITE_ERR:
      282    13923    2         CALL VXE$ERRMSG( ,@E$F_D_VX );

  13923  7 000571   000001 236000 8     WRITE_ERR    LDQ     1
         7 000572   000001 235000 xsym               LDA     B_VECTNIL+1
         7 000573   200020 757100                    STAQ    NAME$+1,,AUTO
         7 000574   200020 630500                    EPPR0   NAME$+1,,AUTO
         7 000575   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 000576   000000 701000 xent               TSX1    VXE$ERRMSG
         7 000577   000000 011000                    NOP     0

      283    13924              %ERRMSG( ERR#=E$CANT_WRITE_M$PLOVER_VX, MID='U', DCB#=M$PLOVER, LEVEL=@E$F_VX
             13924                  );

  13931  7 000600   000000 236007 xsym               LDQ     M$PLOVER,DL
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:69   
         7 000601   200020 756100                    STQ     NAME$+1,,AUTO
         7 000602   200020 630500                    EPPR0   NAME$+1,,AUTO
         7 000603   200023 450500                    STP0    NAME$+4,,AUTO
         7 000604   000005 236000 8                  LDQ     5
         7 000605   200022 756100                    STQ     NAME$+3,,AUTO
         7 000606   000024 236000 8                  LDQ     20
         7 000607   200021 756100                    STQ     NAME$+2,,AUTO
         7 000610   200021 630500                    EPPR0   NAME$+2,,AUTO
         7 000611   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 000612   000000 701000 xent               TSX1    VXE$ERRMSG
         7 000613   000000 011000                    NOP     0

      284    13933
      285    13934    2   END WRITE_GLOBAL_REC;

  13934  7 000614   200010 221300                    LDX1  ! PLOVER_UTS+1,,AUTO
         7 000615   000001 702211                    TSX2  ! 1,X1

      286    13935        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:70   
      287    13936    1   PROCESS_PLOVER_ENTREF: PROC;

  13936  7 000616   200010 741300       PROCESS_PLO* STX1  ! PLOVER_UTS+1,,AUTO

      288    13937
      289    13938    2   DCL NPOINTER UBIN WORD;
      290    13939    2   DCL I UBIN WORD;
      291    13940    2   DCL SIZE UBIN WORD;
      292    13941    2   DCL NAME$ PTR;
      293    13942    2   DCL ENTREF$ PTR;
      294    13943        %B$DNAME( STCLASS="BASED(NAME$)" );
      295    13962        %B$EREF( STCLASS="BASED(ENTREF$)" );
      296    14005
      297    14006
      298    14007    2            CALL INDEX(I,' ',SUBSTR(TXT,7));

  14007  7 000617   000000 124400                    SCM     mask='000'O
         7 000620   000345 600371 2                  ADSC9   TXT+1                    cn=3,n=249
         7 000621   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         7 000622   200012 000100                    ARG     I,,AUTO

      299    14008    2         SIZE = (I + 5) / 4;

  14008  7 000623   200012 236100                    LDQ     I,,AUTO
         7 000624   000005 036007                    ADLQ    5,DL
         7 000625   000002 772000                    QRL     2
         7 000626   200013 756100                    STQ     SIZE,,AUTO

      300    14009              %ALLOCATE( PTR$=NAME$, TYPE="ALL_TYPE(%TYPRNAM)", SIZE=SIZE );

  14010  7 000627   200003 470500                    LDP0    @ALL_TYPE,,AUTO
         7 000630   000002 720100                    LXL0    2,,PR0
         7 000631   000000 236010 xsym               LDQ     VX_M_ALL,X0
         7 000632   000000 136010 xsym               SBLQ    VX_M_FREE,X0
         7 000633   000647 604000 7                  TMI     s:14014
         7 000634   200013 116100                    CMPQ    SIZE,,AUTO
         7 000635   000647 602000 7                  TNC     s:14014
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:71   

  14011  7 000636   000000 236010 xsym               LDQ     VX_M_FREE,X0
         7 000637   000000 471410 xsym               LDP1    VX_M_BASE_PTR,X0
         7 000640   100000 633506                    EPPR3   0,QL,PR1
         7 000641   200014 453500                    STP3    NAME$,,AUTO

  14012  7 000642   000002 720100                    LXL0    2,,PR0
         7 000643   000000 236010 xsym               LDQ     VX_M_FREE,X0
         7 000644   200013 036100                    ADLQ    SIZE,,AUTO
         7 000645   000000 756010 xsym               STQ     VX_M_FREE,X0

  14013  7 000646   000662 710000 7                  TRA     s:14016

  14014  7 000647   200013 631500                    EPPR1   SIZE,,AUTO
         7 000650   200022 451500                    STP1    NAME$+3,,AUTO
         7 000651   200003 236100                    LDQ     @ALL_TYPE,,AUTO
         7 000652   000002 036003                    ADLQ    2,DU
         7 000653   200021 756100                    STQ     NAME$+2,,AUTO
         7 000654   200014 633500                    EPPR3   NAME$,,AUTO
         7 000655   200020 453500                    STP3    NAME$+1,,AUTO
         7 000656   200020 630500                    EPPR0   NAME$+1,,AUTO
         7 000657   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 000660   000000 701000 xent               TSX1    VXA$GET
         7 000661   000000 011000                    NOP     0

      301    14016    2         B$DNAME.COUNT = I;

  14016  7 000662   200012 720100                    LXL0    I,,AUTO
         7 000663   200014 470500                    LDP0    NAME$,,AUTO
         7 000664   000000 740100                    STX0    0,,PR0

      302    14017    2         B$DNAME.TEXT  = SUBSTR( TXT, 7, I );

  14017  7 000665   200014 470500                    LDP0    NAME$,,AUTO
         7 000666   000000 221100                    LDX1    0,,PR0
         7 000667   040140 100440                    MLR     fill='040'O
         7 000670   000345 600010 2                  ADSC9   TXT+1                    cn=3,n=*X0
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:72   
         7 000671   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1

      303    14018    2         IF VX_CURR$->VX$NODE.L_START.RN$ = ADDR(NIL) THEN

  14018  7 000672   000000 470400 xsym               LDP0    VX_CURR$
         7 000673   000032 236100                    LDQ     26,,PR0
         7 000674   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 000675   000700 601000 7                  TNZ     s:14020

      304    14019    2             VX_CURR$->VX$NODE.L_START.RN$ = NAME$;

  14019  7 000676   200014 236100                    LDQ     NAME$,,AUTO
         7 000677   000032 756100                    STQ     26,,PR0

      305    14020    2         VX_CURR$->VX$NODE.L_STOP.RN$ = NAME$;

  14020  7 000700   200014 236100                    LDQ     NAME$,,AUTO
         7 000701   000044 756100                    STQ     36,,PR0

      306    14021    2         NPOINTER = VX_CURR$->VX$NODE.L_SIZE.RN;

  14021  7 000702   000056 235100                    LDA     46,,PR0
         7 000703   200011 755100                    STA     NPOINTER,,AUTO

      307    14022    2         VX_CURR$->VX$NODE.L_SIZE.RN  = NPOINTER + SIZE;

  14022  7 000704   200011 236100                    LDQ     NPOINTER,,AUTO
         7 000705   200013 036100                    ADLQ    SIZE,,AUTO
         7 000706   000056 756100                    STQ     46,,PR0

      308    14023              %ALLOCATE( PTR$=ENTREF$, TYPE="ALL_TYPE(%TYPEREF)", SIZE="SIZEW(B$EREF)" );

  14024  7 000707   200003 471500                    LDP1    @ALL_TYPE,,AUTO
         7 000710   100005 721100                    LXL1    5,,PR1
         7 000711   000000 236011 xsym               LDQ     VX_M_ALL,X1
         7 000712   000000 136011 xsym               SBLQ    VX_M_FREE,X1
         7 000713   000723 604400 7                  TMOZ    s:14028
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:73   

  14025  7 000714   000000 236011 xsym               LDQ     VX_M_FREE,X1
         7 000715   000000 473411 xsym               LDP3    VX_M_BASE_PTR,X1
         7 000716   300000 634506                    EPPR4   0,QL,PR3
         7 000717   200015 454500                    STP4    ENTREF$,,AUTO

  14026  7 000720   100005 721100                    LXL1    5,,PR1
         7 000721   000000 054011 xsym               AOS     VX_M_FREE,X1

  14027  7 000722   000736 710000 7                  TRA     s:14030

  14028  7 000723   000020 236000 8                  LDQ     16
         7 000724   200022 756100                    STQ     NAME$+3,,AUTO
         7 000725   200003 236100                    LDQ     @ALL_TYPE,,AUTO
         7 000726   000005 036003                    ADLQ    5,DU
         7 000727   200021 756100                    STQ     NAME$+2,,AUTO
         7 000730   200015 633500                    EPPR3   ENTREF$,,AUTO
         7 000731   200020 453500                    STP3    NAME$+1,,AUTO
         7 000732   200020 630500                    EPPR0   NAME$+1,,AUTO
         7 000733   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 000734   000000 701000 xent               TSX1    VXA$GET
         7 000735   000000 011000                    NOP     0

      309    14030    2         B$EREF = '0'B;

  14030  7 000736   200015 470500                    LDP0    ENTREF$,,AUTO
         7 000737   000000 450100                    STZ     0,,PR0

      310    14031    2         B$EREF.NPOINTER = NPOINTER;

  14031  7 000740   200011 720100                    LXL0    NPOINTER,,AUTO
         7 000741   200015 470500                    LDP0    ENTREF$,,AUTO
         7 000742   000000 740100                    STX0    0,,PR0

      311    14032    2         IF VX_CURR$->VX$NODE.L_START.ER$ = ADDR(NIL) THEN

  14032  7 000743   000000 470400 xsym               LDP0    VX_CURR$
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:74   
         7 000744   000035 236100                    LDQ     29,,PR0
         7 000745   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 000746   000751 601000 7                  TNZ     s:14034

      312    14033    2             VX_CURR$->VX$NODE.L_START.ER$ = ENTREF$;

  14033  7 000747   200015 236100                    LDQ     ENTREF$,,AUTO
         7 000750   000035 756100                    STQ     29,,PR0

      313    14034    2         VX_CURR$->VX$NODE.L_STOP.ER$ = ENTREF$;

  14034  7 000751   200015 236100                    LDQ     ENTREF$,,AUTO
         7 000752   000047 756100                    STQ     39,,PR0

      314    14035    2         VX_CURR$->VX$NODE.L_SIZE.ER  = VX_CURR$->VX$NODE.L_SIZE.ER + SIZEW(B$EREF);

  14035  7 000753   000061 235100                    LDA     49,,PR0
         7 000754   000001 035007                    ADLA    1,DL
         7 000755   000061 755100                    STA     49,,PR0

      315    14036
      316    14037    2   END PROCESS_PLOVER_ENTREF;

  14037  7 000756   200010 221300                    LDX1  ! PLOVER_UTS+1,,AUTO
         7 000757   000001 702211                    TSX2  ! 1,X1

      317    14038        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:75   
      318    14039    1   PROCESS_PLOVER_SYMDEF: PROC;

  14039  7 000760   200010 741300       PROCESS_PLO* STX1  ! PLOVER_UTS+1,,AUTO

      319    14040
      320    14041    2   DCL SECT# UBIN WORD;
      321    14042    2   DCL SC_IDX UBIN WORD;
      322    14043
      323    14044    2   DCL I UBIN WORD;
      324    14045    2   DCL J UBIN WORD;
      325    14046    2   DCL SIZE UBIN WORD;
      326    14047    2   DCL NPOINTER UBIN;
      327    14048    2   DCL NAME$ PTR;
      328    14049        %B$DNAME( STCLASS="BASED(NAME$)" );
      329    14068
      330    14069
      331    14070    2         CALL INDEX (I, ' ', TXT, 7 ) ;

  14070  7 000761   000000 124400                    SCM     mask='000'O
         7 000762   000345 600371 2                  ADSC9   TXT+1                    cn=3,n=249
         7 000763   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         7 000764   200013 000100                    ARG     I,,AUTO
         7 000765   200013 235100                    LDA     I,,AUTO
         7 000766   000007 035007                    ADLA    7,DL
         7 000767   200013 755100                    STA     I,,AUTO

      332    14071              %ALLOCATE( PTR$=P$, TYPE="ALL_TYPE(%TYPSDEF)", SIZE="SIZEW(VXD$TMPLT)" ) ;

  14072  7 000770   200003 470500                    LDP0    @ALL_TYPE,,AUTO
         7 000771   000006 720100                    LXL0    6,,PR0
         7 000772   000000 236010 xsym               LDQ     VX_M_ALL,X0
         7 000773   000000 136010 xsym               SBLQ    VX_M_FREE,X0
         7 000774   000002 116007                    CMPQ    2,DL
         7 000775   001005 604000 7                  TMI     s:14076

  14073  7 000776   000000 236010 xsym               LDQ     VX_M_FREE,X0
         7 000777   000000 471410 xsym               LDP1    VX_M_BASE_PTR,X0
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:76   
         7 001000   100000 633506                    EPPR3   0,QL,PR1
         7 001001   200004 453500                    STP3    P$,,AUTO

  14074  7 001002   000002 236007                    LDQ     2,DL
         7 001003   000000 056010 xsym               ASQ     VX_M_FREE,X0

  14075  7 001004   001020 710000 7                  TRA     s:14078

  14076  7 001005   000034 236000 8                  LDQ     28
         7 001006   200022 756100                    STQ     NAME$+3,,AUTO
         7 001007   200003 236100                    LDQ     @ALL_TYPE,,AUTO
         7 001010   000006 036003                    ADLQ    6,DU
         7 001011   200021 756100                    STQ     NAME$+2,,AUTO
         7 001012   200004 631500                    EPPR1   P$,,AUTO
         7 001013   200020 451500                    STP1    NAME$+1,,AUTO
         7 001014   200020 630500                    EPPR0   NAME$+1,,AUTO
         7 001015   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 001016   000000 701000 xent               TSX1    VXA$GET
         7 001017   000000 011000                    NOP     0

      333    14078    2         IF  VX_CURR$->VX$NODE.L_START.DD$ = ADDR(NIL)  THEN

  14078  7 001020   000000 470400 xsym               LDP0    VX_CURR$
         7 001021   000036 236100                    LDQ     30,,PR0
         7 001022   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 001023   001026 601000 7                  TNZ     s:14080

      334    14079    2             VX_CURR$->VX$NODE.L_START.DD$ = P$ ;

  14079  7 001024   200004 236100                    LDQ     P$,,AUTO
         7 001025   000036 756100                    STQ     30,,PR0

      335    14080    2         VX_CURR$->VX$NODE.L_STOP.DD$ = P$ ;

  14080  7 001026   200004 236100                    LDQ     P$,,AUTO
         7 001027   000050 756100                    STQ     40,,PR0

PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:77   
      336    14081    2         VX_CURR$->VX$NODE.L_SIZE.DD  = VX_CURR$->VX$NODE.L_SIZE.DD + SIZEW(VXD$TMPLT)
             14081                  ;

  14081  7 001030   000062 235100                    LDA     50,,PR0
         7 001031   000002 035007                    ADLA    2,DL
         7 001032   000062 755100                    STA     50,,PR0

      337    14082    2         P$->VXD$TMPLT = '0'B ;

  14082  7 001033   200004 471500                    LDP1    P$,,AUTO
         7 001034   100000 450100                    STZ     0,,PR1
         7 001035   100001 450100                    STZ     1,,PR1

      338    14083    2         J = I - 7 ;

  14083  7 001036   200013 235100                    LDA     I,,AUTO
         7 001037   000007 135007                    SBLA    7,DL
         7 001040   200014 755100                    STA     J,,AUTO

      339    14084    2         SIZE = ( J + 5  ) / 4 ;

  14084  7 001041   200014 236100                    LDQ     J,,AUTO
         7 001042   000005 036007                    ADLQ    5,DL
         7 001043   000002 772000                    QRL     2
         7 001044   200015 756100                    STQ     SIZE,,AUTO

      340    14085              %ALLOCATE( PTR$=NAME$, TYPE="ALL_TYPE(%TYPDNAM)", SIZE=SIZE ) ;

  14086  7 001045   200003 470500                    LDP0    @ALL_TYPE,,AUTO
         7 001046   000001 720100                    LXL0    1,,PR0
         7 001047   000000 236010 xsym               LDQ     VX_M_ALL,X0
         7 001050   000000 136010 xsym               SBLQ    VX_M_FREE,X0
         7 001051   001065 604000 7                  TMI     s:14090
         7 001052   200015 116100                    CMPQ    SIZE,,AUTO
         7 001053   001065 602000 7                  TNC     s:14090

  14087  7 001054   000000 236010 xsym               LDQ     VX_M_FREE,X0
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:78   
         7 001055   000000 471410 xsym               LDP1    VX_M_BASE_PTR,X0
         7 001056   100000 633506                    EPPR3   0,QL,PR1
         7 001057   200017 453500                    STP3    NAME$,,AUTO

  14088  7 001060   000001 720100                    LXL0    1,,PR0
         7 001061   000000 236010 xsym               LDQ     VX_M_FREE,X0
         7 001062   200015 036100                    ADLQ    SIZE,,AUTO
         7 001063   000000 756010 xsym               STQ     VX_M_FREE,X0

  14089  7 001064   001100 710000 7                  TRA     s:14092

  14090  7 001065   200015 631500                    EPPR1   SIZE,,AUTO
         7 001066   200022 451500                    STP1    NAME$+3,,AUTO
         7 001067   200003 236100                    LDQ     @ALL_TYPE,,AUTO
         7 001070   000001 036003                    ADLQ    1,DU
         7 001071   200021 756100                    STQ     NAME$+2,,AUTO
         7 001072   200017 633500                    EPPR3   NAME$,,AUTO
         7 001073   200020 453500                    STP3    NAME$+1,,AUTO
         7 001074   200020 630500                    EPPR0   NAME$+1,,AUTO
         7 001075   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 001076   000000 701000 xent               TSX1    VXA$GET
         7 001077   000000 011000                    NOP     0

      341    14092    2         B$DNAME.COUNT = J ;

  14092  7 001100   200014 720100                    LXL0    J,,AUTO
         7 001101   200017 470500                    LDP0    NAME$,,AUTO
         7 001102   000000 740100                    STX0    0,,PR0

      342    14093    2         B$DNAME.TEXT  = SUBSTR( TXT, 7, J ) ;

  14093  7 001103   200017 470500                    LDP0    NAME$,,AUTO
         7 001104   000000 221100                    LDX1    0,,PR0
         7 001105   040140 100440                    MLR     fill='040'O
         7 001106   000345 600010 2                  ADSC9   TXT+1                    cn=3,n=*X0
         7 001107   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1

PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:79   
      343    14094    2         IF  VX_CURR$->VX$NODE.L_START.DN$ = ADDR(NIL)  THEN

  14094  7 001110   000000 470400 xsym               LDP0    VX_CURR$
         7 001111   000031 236100                    LDQ     25,,PR0
         7 001112   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 001113   001116 601000 7                  TNZ     s:14096

      344    14095    2             VX_CURR$->VX$NODE.L_START.DN$ = NAME$ ;

  14095  7 001114   200017 236100                    LDQ     NAME$,,AUTO
         7 001115   000031 756100                    STQ     25,,PR0

      345    14096    2         VX_CURR$->VX$NODE.L_STOP.DN$ = NAME$ ;

  14096  7 001116   200017 236100                    LDQ     NAME$,,AUTO
         7 001117   000043 756100                    STQ     35,,PR0

      346    14097    2         NPOINTER = VX_CURR$->VX$NODE.L_SIZE.DN  ;

  14097  7 001120   000055 235100                    LDA     45,,PR0
         7 001121   200016 755100                    STA     NPOINTER,,AUTO

      347    14098    2         VX_CURR$->VX$NODE.L_SIZE.DN  = NPOINTER + SIZE ;

  14098  7 001122   200016 236100                    LDQ     NPOINTER,,AUTO
         7 001123   200015 036100                    ADLQ    SIZE,,AUTO
         7 001124   000055 756100                    STQ     45,,PR0

      348    14099    2         P$->VXD$TMPLT.NPOINTER = NPOINTER ;

  14099  7 001125   000000 621005                    EAX1    0,AL
         7 001126   200004 471500                    LDP1    P$,,AUTO
         7 001127   100001 741100                    STX1    1,,PR1

      349    14100    2         I = I + 1 ;

  14100  7 001130   200013 235100                    LDA     I,,AUTO
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:80   
         7 001131   000001 035007                    ADLA    1,DL
         7 001132   200013 755100                    STA     I,,AUTO

      350    14101    2         CALL INDEX ( J, ' ', SUBSTR ( TXT, I ) ) ;

  14101  7 001133   777377 621005                    EAX1    -257,AL
         7 001134   777777 661003                    ERX1    -1,DU
         7 001135   000000 124445                    SCM     mask='000'O
         7 001136   000344 000011 2                  ADSC9   TXT,A                    cn=0,n=*X1
         7 001137   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         7 001140   200014 000100                    ARG     J,,AUTO

      351    14102    2         CALL CHARBIN( SECT#, SUBSTR ( TXT, I, J ) ) ;

  14102  7 001141   200014 720100                    LXL0    J,,AUTO
         7 001142   000100 305445                    DTB
         7 001143   000344 030010 2                  NDSC9   TXT,A                    cn=0,s=nosgn,sf=0,n=*X0
         7 001144   200020 000010                    NDSC9   NAME$+1,,AUTO            cn=0,s=lsgnf,sf=0,n=8
         7 001145   200021 236100                    LDQ     NAME$+2,,AUTO
         7 001146   200011 756100                    STQ     SECT#,,AUTO

      352    14103    2         SECT# = SECT# + VX_LAST_SC_BASE ;

  14103  7 001147   000000 036000 xsym               ADLQ    VX_LAST_SC_BASE
         7 001150   200011 756100                    STQ     SECT#,,AUTO

      353    14104    3         IF  SECT# > BITBIN('777777'O)  THEN DO ;

  14104  7 001151   000001 116003                    CMPQ    1,DU
         7 001152   001157 602000 7                  TNC     s:14112

      354    14105        /*E* ERROR: VXO-E$SECTNUM_TOO_BIG_VX-C
      355    14106             MESSAGE: Internal link error: Section number > 777777 (octal) in VXU$PLOVER.
      356    14107        */
      357    14108                  %SCREAM( ERR#=E$SECTNUM_TOO_BIG_VX,LEVEL=@E$F_VX,MID="'O'" ) ;

  14109  7 001153   000037 630400 8                  EPPR0   31
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:81   
         7 001154   000022 631400 xsym               EPPR1   B_VECTNIL+18
         7 001155   000000 701000 xent               TSX1    VXE$ERROR
         7 001156   000000 011000                    NOP     0

      358    14111    3             END ;

      359    14112    2         P$ -> VXD$TMPLT.AD.SECTNUM = SECT# ;

  14112  7 001157   200004 470500                    LDP0    P$,,AUTO
         7 001160   200011 236100                    LDQ     SECT#,,AUTO
         7 001161   000022 736000                    QLS     18
         7 001162   000000 676100                    ERQ     0,,PR0
         7 001163   003777 376003                    ANQ     2047,DU
         7 001164   000000 656100                    ERSQ    0,,PR0

      360    14113    2         IF  SECT# >= 2048  THEN

  14113  7 001165   200011 235100                    LDA     SECT#,,AUTO
         7 001166   004000 115007                    CMPA    2048,DL
         7 001167   001202 602000 7                  TNC     s:14115

      361    14114    2             CALL VXU$NEW_SECTNUM ( P$->VXD$TMPLT, VX_CURR$->VX$NODE.NUM, SECT# ) ;

  14114  7 001170   200011 630500                    EPPR0   SECT#,,AUTO
         7 001171   200022 450500                    STP0    NAME$+3,,AUTO
         7 001172   000000 236000 xsym               LDQ     VX_CURR$
         7 001173   000010 036003                    ADLQ    8,DU
         7 001174   200004 235100                    LDA     P$,,AUTO
         7 001175   200020 757100                    STAQ    NAME$+1,,AUTO
         7 001176   200020 630500                    EPPR0   NAME$+1,,AUTO
         7 001177   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 001200   000000 701000 xent               TSX1    VXU$NEW_SECTNUM
         7 001201   000000 011000                    NOP     0

      362    14115    2         P$ -> VXD$TMPLT.AD.LFLAGS.SOURCE = %SOURCE_OBJECT# ;

  14115  7 001202   200004 470500                    LDP0    P$,,AUTO
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:82   
         7 001203   000043 236000 8                  LDQ     35
         7 001204   000000 356100                    ANSQ    0,,PR0

      363    14116
      364    14117
      365    14118    2   END PROCESS_PLOVER_SYMDEF;

  14118  7 001205   200010 221300                    LDX1  ! PLOVER_UTS+1,,AUTO
         7 001206   000001 702211                    TSX2  ! 1,X1
      366    14119        %EJECT;
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:83   
      367    14120    1   END VXU$PLOVER;

PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:84   
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXU$PLOVER.
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:85   

 **** Variables and constants ****

  ****  Section 002  Data  VXU$PLOVER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   444-0-0/w SBIN        r     1 CNT                      446-0-0/c STRC(333)   r     1 DEF_CMD
   264-0-0/c STRC(54)    r     1 DELTA                    252-0-0/d STRC(360)   r     1 FPT_ALIB
   214-0-0/d STRC(1080)  r     1 FPT_CLOSE                 74-0-0/d STRC(2088)  r     1 FPT_OPEN
   166-0-0/d STRC(792)   r     1 FPT_UNFID                 34-0-0/d STRC(432)   r     1 FPT_WRITE
   320-0-0/w STRC(315)   r     1 GLOBAL_KEY                50-0-0/d STRC(432)   r     1 GLOBAL_WRITE
   460-0-0/c STRC(45)    r     1 MOD_CMD                  266-0-0/w STRC(297)   r     1 OU_KEY
   301-0-0/w STRC(468)   r     1 PLOVER_BIRTH             277-0-0/w STRC(54)    r     1 PLOVER_BIRTH_KEY
   445-0-0/b BIT         r     1 PLOVER_EXIST             316-0-0/w STRC(54)    r     1 PLOVER_KEY
    16-0-0/d STRC(504)   r     1 READ_OF_SEQ                0-0-0/d STRC(504)   r     1 READ_PLOVER_BIRTH
   344-0-0/c STRC(2304)  r     1 RUM                      344-0-0/c CHAR(256)   r     1 TXT
   331-0-0/c STRC(387)   r     1 USE_NODE                  64-0-0/c STRC(234)   r     1 VLP_NAME

  ****  Section 006 RoData VXU$PLOVER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    44-0-0/c CHAR(11)    r     1 ALIB_RETURN                0-0-0/w STRC(117)   r     1 B_PLOVERKEY
     4-0-0/c CHAR(8)     r     1 DEFAULT_SYN(0:15)
    52-0-0/c CHAR(30)    r     1 DELTA_CMD                 47-0-0/c CHAR(9)     r     1 KILL_ECHO
    62-0-0/w PTR         r     1 OU_KEY$

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ALL_TYPE
    *0-0-0/w UBIN        r     1 ALL_TYPE(0:15)
    15-0-0/w PTR         r     1 ENTREF$                   11-0-0/w UBIN        r     1 I
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:86   
    12-0-0/w UBIN        r     1 I                         13-0-0/w UBIN        r     1 I
    12-0-0/w UBIN        r     1 J                         14-0-0/w UBIN        r     1 J
    14-0-0/w PTR         r     1 NAME$                     17-0-0/w PTR         r     1 NAME$
    11-0-0/w UBIN        r     1 NPOINTER                  16-0-0/w UBIN        r     1 NPOINTER
     4-0-0/w PTR         r     1 P$                        14-0-0/w UBIN        r     1 PATCH_SIZE
    13-0-0/c CHAR        r     1 PATCH_TYPE                 7-0-0/w UBIN        r     1 PLOVER_UTS
    11-0-0/w UBIN        r     1 SECT#                     13-0-0/w UBIN        r     1 SIZE
    15-0-0/w UBIN        r     1 SIZE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w PTR         r     1 M$OF$
     0-0-0/w PTR         r     1 VX_CURR$                   0-0-0/w UBIN        r     1 VX_LAST_SC_BASE
     0-0-0/w SBIN        r     1 VX_M_ALL(0:8)
     0-0-0/w PTR         r     1 VX_M_BASE_PTR(0:8)
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w SBIN        r     1 VX_NODE_NUMBER             0-0-0/w STRC(4572)  r     1 VX_O
     0-0-0/b STRC(116)   r     1 VX_OD                      0-0-0/w STRC(1044)  r     1 VX_OUHEAD
     0-0-0/w STRC(1044)  r     1 VX_OU_HEAD

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w ASTR(18)    r     1 B$DNAME
     0-0-0/w ASTR(18)    r     1 B$DNAME                    0-0-0/w STRC        r     1 B$EREF
     0-0-0/w STRC(117)   r     1 B$PLOVERKEY                0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0N  NULL        r     1 M$OF
     0-0-0N  NULL        r     1 M$PLOVER                   0-0-0N  NULL        r     1 M$RF
     0-0-0/w ASTR(9)     r     1 T$C                        0-0-0/c ASTR(9)     r     1 T$C_UNAL
     0-0-0/w STRC(648)   r     1 VX$LST                     0-0-0/w STRC(3672)  r     1 VX$NODE
     0-0-0/w STRC(72)    r     1 VXD$TMPLT

PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:87   

   Procedure VXU$PLOVER requires 647 words for executable code.
   Procedure VXU$PLOVER requires 20 words of local(AUTO) storage.

    No errors detected in file VXU$PLOVER.:E05TSI    .
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:88   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:89   
          MINI XREF LISTING

ALIB_ERR
     13845**LABEL   13803--CALLALT
ALIB_RETURN
     13637**DCL     13751--ASSIGN
ALL_TYPE
     12411**DCL         7--PROC    14010>>IF      14010>>IF      14011>>ASSIGN  14011>>ASSIGN  14012>>ASSIGN
     14012>>ASSIGN  14014<>CALL    14024>>IF      14024>>IF      14025>>ASSIGN  14025>>ASSIGN  14026>>ASSIGN
     14026>>ASSIGN  14028<>CALL    14072>>IF      14072>>IF      14073>>ASSIGN  14073>>ASSIGN  14074>>ASSIGN
     14074>>ASSIGN  14076<>CALL    14086>>IF      14086>>IF      14087>>ASSIGN  14087>>ASSIGN  14088>>ASSIGN
     14088>>ASSIGN  14090<>CALL
B$ALT.CODE
     13362**DCL     13362--REDEF   13363--REDEF   13363--REDEF
B$ALT.ERR.ERR#
     13364**DCL     13364--REDEF   13718>>IF
B$ALT.EVID
     13363**DCL     13363--REDEF   13363--REDEF
B$DNAME.COUNT IN PROCEDURE PROCESS_PLOVER_ENTREF
     13952**DCL     13959--IMP-SIZ 14016<<ASSIGN  14017>>ASSIGN
B$DNAME.TEXT IN PROCEDURE PROCESS_PLOVER_ENTREF
     13959**DCL     14017<<ASSIGN
B$DNAME.COUNT IN PROCEDURE PROCESS_PLOVER_SYMDEF
     14058**DCL     14065--IMP-SIZ 14092<<ASSIGN  14093>>ASSIGN
B$DNAME.TEXT IN PROCEDURE PROCESS_PLOVER_SYMDEF
     14065**DCL     14093<<ASSIGN
B$EREF IN PROCEDURE PROCESS_PLOVER_ENTREF
     13963**DCL     14024--IF      14026--ASSIGN  14028--CALL    14030<<ASSIGN  14035--ASSIGN
B$EREF.NPOINTER IN PROCEDURE PROCESS_PLOVER_ENTREF
     13964**DCL     14031<<ASSIGN
B$PLOVERKEY.KEYSIZ
     13477**DCL     13770>>DOWHILE
B$PLOVERKEY.NOTHD
     13480**DCL     13770>>DOWHILE
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:90   
B$PLOVERKEY.UTS
     13482**DCL     13770>>DOWHILE
B$TCB.ALT$
     13358**DCL     13718>>IF
B$TCB$
      8913**DCL     13718>>IF
B_PLOVERKEY.KEYSIZ
     13447**DCL     13770>>DOWHILE
B_PLOVERKEY.NOTHD
     13450**DCL     13770>>DOWHILE
CNT
     13711**DCL     13208--DCLINIT 13745>>ASSIGN  13746>>ASSIGN  13764<<ASSIGN  13768<<ASSIGN  13785<<ASSIGN
     13866>>ASSIGN
DEFAULT_SYN
     13620**DCL     13763>>ASSIGN
DEF_CMD IN PROCEDURE WRITE_GLOBAL_REC
     13894**DCL     13912--ASSIGN
DEF_CMD.NAME IN PROCEDURE WRITE_GLOBAL_REC
     13896**DCL     13910<<ASSIGN
DEF_CMD.PATCH_TYPE IN PROCEDURE WRITE_GLOBAL_REC
     13897**DCL     13911<<ASSIGN
DELTA
     13295**DCL     13264--DCLINIT
DELTA_CMD
     13639**DCL     13264--DCLINIT
DONE
     13788**LABEL   13767--CALLALT 13784--CALLALT
ENTREF$ IN PROCEDURE PROCESS_PLOVER_ENTREF
     13942**DCL     13963--IMP-PTR 14025<<ASSIGN  14028<>CALL    14030>>ASSIGN  14031>>ASSIGN  14033>>ASSIGN
     14034>>ASSIGN
F$DCB.ACTPOS
     13333**DCL     13333--REDEF
F$DCB.ARS#
     13307**DCL     13307--REDEF   13755>>IF      13757>>IF      13768>>ASSIGN  13785>>ASSIGN
F$DCB.ATTR
     13326**DCL     13327--REDEF
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:91   
F$DCB.BORROW
     13341**DCL     13341--REDEF   13341--REDEF   13341--REDEF
F$DCB.DCBNAME.L
     13355**DCL     13355--IMP-SIZ
F$DCB.EOMCHAR#
     13311**DCL     13311--REDEF
F$DCB.FLDID
     13336**DCL     13336--REDEF
F$DCB.FORM$
     13330**DCL     13330--REDEF
F$DCB.FSECT
     13346**DCL     13346--REDEF
F$DCB.FSN#
     13323**DCL     13323--REDEF   13323--REDEF   13324--REDEF
F$DCB.HEADER$
     13329**DCL     13329--REDEF
F$DCB.IXTNSIZE#
     13327**DCL     13327--REDEF
F$DCB.LASTSTA$
     13316**DCL     13316--REDEF
F$DCB.LVL
     13342**DCL     13342--REDEF
F$DCB.NAME#.C
     13317**DCL     13317--REDEF
F$DCB.NOEOF
     13339**DCL     13339--REDEF
F$DCB.NRECS#
     13328**DCL     13328--REDEF
F$DCB.NRECX
     13347**DCL     13347--REDEF
F$DCB.OHDR
     13339**DCL     13339--REDEF
F$DCB.ORG#
     13322**DCL     13322--REDEF
F$DCB.PRECNO
     13345**DCL     13345--REDEF
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:92   
F$DCB.RCSZ
     13351**DCL     13351--REDEF
F$DCB.RES#
     13318**DCL     13318--REDEF
F$DCB.SETX
     13330**DCL     13330--REDEF
F$DCB.TAB$
     13330**DCL     13330--REDEF
F$DCB.TDA
     13344**DCL     13345--REDEF
F$DCB.WSN#
     13318**DCL     13318--REDEF
FPT_ALIB
     13264**DCL     13803<>CALL
FPT_ALIB.V
     13265**DCL     13265--DCLINIT
FPT_CLOSE
     13234**DCL     13795<>CALL
FPT_CLOSE.SN_
     13234**DCL     13234--REDEF
FPT_CLOSE.UTL_
     13235**DCL     13235--REDEF
FPT_CLOSE.V
     13239**DCL     13234--DCLINIT
FPT_CLOSE.V.EXPIRE#
     13249**DCL     13249--REDEF
FPT_CLOSE.V.TYPE#
     13247**DCL     13247--REDEF
FPT_CLOSE.V.XTNSIZE#
     13244**DCL     13244--REDEF   13246--REDEF
FPT_OPEN
     13149**DCL     13729<>CALL    13807<>CALL
FPT_OPEN.ACSVEH_
     13151**DCL     13152--REDEF
FPT_OPEN.ALTKEYS_
     13157**DCL     13158--REDEF   13158--REDEF
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:93   
FPT_OPEN.HDR_
     13156**DCL     13157--REDEF
FPT_OPEN.TAB_
     13155**DCL     13156--REDEF
FPT_OPEN.UHL_
     13149**DCL     13150--REDEF   13150--REDEF
FPT_OPEN.V
     13158**DCL     13149--DCLINIT
FPT_OPEN.V.DELETE#
     13160**DCL     13806<<ASSIGN
FPT_OPEN.V.FSN#
     13189**DCL     13189--REDEF   13189--REDEF
FPT_OPEN.V.FUN#
     13168**DCL     13805<<ASSIGN
FPT_OPEN.WSN_
     13155**DCL     13155--REDEF
FPT_UNFID
     13204**DCL     13739<>CALL
FPT_UNFID.V
     13208**DCL     13204--DCLINIT
FPT_WRITE
     13011**DCL     13752<>CALL    13862<>CALL    13867<>CALL
FPT_WRITE.BUF_
     13011**DCL     13751<<ASSIGN  13861<<ASSIGN  13866<<ASSIGN
FPT_WRITE.STATION_
     13013**DCL     13013--REDEF
FPT_WRITE.V
     13014**DCL     13011--DCLINIT
FPT_WRITE.V.DVBYTE.VFC#
     13020**DCL     13020--REDEF
GLOBAL_KEY
     13575**DCL     13042--DCLINIT
GLOBAL_KEY.NAME
     13578**DCL     13908<<ASSIGN
GLOBAL_KEY.SEQ
     13579**DCL     13747<<ASSIGN  13909<<ASSIGN  13917<<ASSIGN
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:94   
GLOBAL_WRITE
     13042**DCL     13731<>CALL    13748<>CALL    13913<>CALL    13918<>CALL
GLOBAL_WRITE.BUF_
     13042**DCL     13730<<ASSIGN  13746<<ASSIGN  13912<<ASSIGN  13915<<ASSIGN
GLOBAL_WRITE.STATION_
     13044**DCL     13044--REDEF
GLOBAL_WRITE.V
     13045**DCL     13042--DCLINIT
GLOBAL_WRITE.V.DVBYTE.VFC#
     13051**DCL     13051--REDEF
I IN PROCEDURE PROCESS_PLOVER_ENTREF
     13939**DCL     14007<<CALLBLT 14008>>ASSIGN  14016>>ASSIGN  14017>>ASSIGN
I IN PROCEDURE PROCESS_PLOVER_SYMDEF
     14044**DCL     14070<<CALLBLT 14083>>ASSIGN  14100<<ASSIGN  14100>>ASSIGN  14101>>CALLBLT 14102>>CALLBLT
I IN PROCEDURE WRITE_GLOBAL_REC
     13889**DCL     13904<<CALLBLT 13905>>ASSIGN  13906>>CALLBLT 13907>>CALLBLT 13908>>ASSIGN  13910>>ASSIGN
     13916<<DOINDEX 13917>>ASSIGN
J IN PROCEDURE PROCESS_PLOVER_SYMDEF
     14045**DCL     14083<<ASSIGN  14084>>ASSIGN  14092>>ASSIGN  14093>>ASSIGN  14101<<CALLBLT 14102>>CALLBLT
J IN PROCEDURE WRITE_GLOBAL_REC
     13890**DCL     13906<<CALLBLT 13907>>CALLBLT
KILL_ECHO
     13638**DCL     13730--ASSIGN
M$ALIB
      5088**DCL-ENT 13803--CALL
M$CLOSE
      5075**DCL-ENT 13795--CALL
M$OF$
     10648**DCL     13755>>IF      13757>>IF      13768>>ASSIGN  13785>>ASSIGN
M$OPEN
      5075**DCL-ENT 13729--CALL    13807--CALL
M$PLOVER
     13297**DCL     13826<>CALL    13841<>CALL    13882<>CALL    13931<>CALL
M$READ
      5076**DCL-ENT 13715--CALL    13767--CALL    13784--CALL
M$UNFID
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:95   
      5138**DCL-ENT 13739--CALL
M$WRITE
      5076**DCL-ENT 13731--CALL    13748--CALL    13752--CALL    13862--CALL    13867--CALL    13913--CALL
     13918--CALL
MOD_CMD IN PROCEDURE WRITE_GLOBAL_REC
     13898**DCL     13915--ASSIGN
MOD_CMD.PATCH_TYPE IN PROCEDURE WRITE_GLOBAL_REC
     13900**DCL     13914<<ASSIGN
NAME$ IN PROCEDURE PROCESS_PLOVER_ENTREF
     13941**DCL     13951--IMP-PTR 14011<<ASSIGN  14014<>CALL    14016>>ASSIGN  14017>>ASSIGN  14017>>ASSIGN
     14019>>ASSIGN  14020>>ASSIGN
NAME$ IN PROCEDURE PROCESS_PLOVER_SYMDEF
     14048**DCL     14057--IMP-PTR 14087<<ASSIGN  14090<>CALL    14092>>ASSIGN  14093>>ASSIGN  14093>>ASSIGN
     14095>>ASSIGN  14096>>ASSIGN
NO_PLOVER_BIRTH
     13718**LABEL   13715--CALLALT
NPOINTER IN PROCEDURE PROCESS_PLOVER_ENTREF
     13938**DCL     14021<<ASSIGN  14022>>ASSIGN  14031>>ASSIGN
NPOINTER IN PROCEDURE PROCESS_PLOVER_SYMDEF
     14047**DCL     14097<<ASSIGN  14098>>ASSIGN  14099>>ASSIGN
OPEN_ERROR
     13818**LABEL   13729--CALLALT 13807--CALLALT
OU_KEY
     13422**DCL     12972--DCLINIT 12973--DCLINIT 13661--DCLINIT
OU_KEY$
     13661**DCL     13476--IMP-PTR 13770>>DOWHILE 13770>>DOWHILE 13770>>DOWHILE
P$
     13657**DCL     13855<<ASSIGN  13856>>IF      13856>>IF      13858>>ASSIGN  13858>>ASSIGN  13860>>ASSIGN
     13860>>ASSIGN  14073<<ASSIGN  14076<>CALL    14079>>ASSIGN  14080>>ASSIGN  14082>>ASSIGN  14099>>ASSIGN
     14112>>ASSIGN  14114>>CALL    14115>>ASSIGN
PATCH_SIZE IN PROCEDURE WRITE_GLOBAL_REC
     13892**DCL     13907<<CALLBLT 13916>>DOINDEX
PATCH_TYPE IN PROCEDURE WRITE_GLOBAL_REC
     13891**DCL     13905<<ASSIGN  13911>>ASSIGN  13914>>ASSIGN
PLOVER_BIRTH
     13517**DCL     12935--DCLINIT 12936--DCLINIT
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:96   
PLOVER_BIRTH.DPATCH
     13535**DCL     13758>>ASSIGN
PLOVER_BIRTH.IPATCH
     13533**DCL     13756>>ASSIGN
PLOVER_BIRTH_KEY
     13506**DCL     12933--DCLINIT 12934--DCLINIT
PLOVER_BIRTH_KEY.UTS
     13512**DCL     13714<<ASSIGN  13769>>ASSIGN  13770>>DOWHILE
PLOVER_EXIST
     13712**DCL     13728>>IF      13753<<ASSIGN  13793>>IF
PLOVER_KEY
     13554**DCL     13011--DCLINIT
PLOVER_KEY.NODE
     13557**DCL     13749<<ASSIGN  13852<<ASSIGN
PLOVER_KEY.SEQ
     13558**DCL     13750<<ASSIGN  13853<<ASSIGN  13865<<ASSIGN  13865>>ASSIGN
PLOVER_UTS
     13710**DCL     13769<<ASSIGN
PROCESS_PLOVER_ENTREF
     13936**PROC    13774--CALL
PROCESS_PLOVER_SYMDEF
     14039**PROC    13777--CALL
READ_OF_SEQ
     12972**DCL     13767<>CALL    13784<>CALL
READ_OF_SEQ.STATION_
     12975**DCL     12976--REDEF
READ_OF_SEQ.V
     12976**DCL     12972--DCLINIT
READ_OF_SEQ.V.DVBYTE.REREAD#
     12987**DCL     12987--REDEF
READ_OF_SEQ.V.INDX#
     12985**DCL     12985--REDEF
READ_PLOVER_BIRTH
     12933**DCL     13715<>CALL
READ_PLOVER_BIRTH.STATION_
     12936**DCL     12937--REDEF
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:97   
READ_PLOVER_BIRTH.V
     12937**DCL     12933--DCLINIT
READ_PLOVER_BIRTH.V.DVBYTE.REREAD#
     12948**DCL     12948--REDEF
READ_PLOVER_BIRTH.V.INDX#
     12946**DCL     12946--REDEF
RUM.FID
     13619**DCL     13204--DCLINIT
SECT# IN PROCEDURE PROCESS_PLOVER_SYMDEF
     14041**DCL     14102<<CALLBLT 14103<<ASSIGN  14103>>ASSIGN  14104>>IF      14112>>ASSIGN  14113>>IF
     14114<>CALL
SIZE IN PROCEDURE PROCESS_PLOVER_ENTREF
     13940**DCL     14008<<ASSIGN  14010>>IF      14012>>ASSIGN  14014<>CALL    14022>>ASSIGN
SIZE IN PROCEDURE PROCESS_PLOVER_SYMDEF
     14046**DCL     14084<<ASSIGN  14086>>IF      14088>>ASSIGN  14090<>CALL    14098>>ASSIGN
T$C.CHARS
     12894**DCL     13858>>ASSIGN  13860>>ASSIGN
T$C.COUNT
     12893**DCL     12894--IMP-SIZ 13858>>ASSIGN  13860>>ASSIGN
T$C_UNAL.COUNT
     12896**DCL     12897--IMP-SIZ
TXT
     13616**DCL     12974--DCLINIT 12975--DCLINIT 13617--REDEF   13732<<ASSIGN  13745<<ASSIGN  13746--ASSIGN
     13759<<ASSIGN  13763<<ASSIGN  13766<<ASSIGN  13773>>IF      13776>>IF      13779>>IF      13783<<ASSIGN
     13866--ASSIGN  13904>>CALLBLT 13905>>ASSIGN  13906>>CALLBLT 13907>>CALLBLT 13908>>ASSIGN  13910>>ASSIGN
     14007>>CALLBLT 14017>>ASSIGN  14070>>CALLBLT 14093>>ASSIGN  14101>>CALLBLT 14102>>CALLBLT
USE_NODE
     13596**DCL     13861--ASSIGN
USE_NODE.NODE
     13598**DCL     13858<<ASSIGN  13860<<ASSIGN
VLP_NAME
     13081**DCL     13150--DCLINIT
VX$LST.OBJECT_NAME$
     12733**DCL     12734--REDEF   13858>>ASSIGN  13858>>ASSIGN
VX$LST.P.NAME_.NAME$
     12746**DCL     13860>>ASSIGN  13860>>ASSIGN
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:98   
VX$LST.SC_HEAD$
     12735**DCL     12736--REDEF
VX$LST.SC_TAIL$
     12737**DCL     12738--REDEF
VX$LST.SUB_TYPE
     12732**DCL     13856>>IF
VX$LST.TYPE
     12731**DCL     13856>>IF
VX$NODE.ADDR_START_A
     12457**DCL     12458--REDEF
VX$NODE.ADDR_STOP_A
     12462**DCL     12463--REDEF
VX$NODE.HEAD$
     12449**DCL     13855>>ASSIGN
VX$NODE.L_PREV_SIZE
     12515**DCL     12526--REDEF
VX$NODE.L_SC_START
     12534**DCL     12539--REDEF
VX$NODE.L_SC_STOP
     12540**DCL     12545--REDEF
VX$NODE.L_SIZE
     12503**DCL     12514--REDEF
VX$NODE.L_SIZE.DD
     12510**DCL     14081<<ASSIGN  14081>>ASSIGN
VX$NODE.L_SIZE.DN
     12505**DCL     14097>>ASSIGN  14098<<ASSIGN
VX$NODE.L_SIZE.ER
     12509**DCL     14035<<ASSIGN  14035>>ASSIGN
VX$NODE.L_SIZE.RN
     12506**DCL     14021>>ASSIGN  14022<<ASSIGN
VX$NODE.L_START
     12479**DCL     12490--REDEF
VX$NODE.L_START.DD$
     12486**DCL     14078>>IF      14079<<ASSIGN
VX$NODE.L_START.DN$
     12481**DCL     14094>>IF      14095<<ASSIGN
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:99   
VX$NODE.L_START.ER$
     12485**DCL     14032>>IF      14033<<ASSIGN
VX$NODE.L_START.RN$
     12482**DCL     14018>>IF      14019<<ASSIGN
VX$NODE.L_STOP
     12491**DCL     12502--REDEF
VX$NODE.L_STOP.DD$
     12498**DCL     14080<<ASSIGN
VX$NODE.L_STOP.DN$
     12493**DCL     14096<<ASSIGN
VX$NODE.L_STOP.ER$
     12497**DCL     14034<<ASSIGN
VX$NODE.L_STOP.RN$
     12494**DCL     14020<<ASSIGN
VX$NODE.NUM
     12455**DCL     13852>>ASSIGN  14114<>CALL
VX$NODE.PROMOTE_HEAD
     12546**DCL     12549--REDEF
VX$NODE.PROMOTE_TAIL
     12550**DCL     12553--REDEF
VX$NODE.START_PAGE#_A
     12467**DCL     12468--REDEF
VX$NODE.STOP_PAGE#_A
     12472**DCL     12473--REDEF
VX$NODE.USE_NODE
     12556**DCL     13850>>IF      13851<<ASSIGN
VX$SECT.MBZ
     12695**DCL     12697--REDEF   12701--REDEF
VXA$GET
     13688**DCL-ENT 14014--CALL    14028--CALL    14076--CALL    14090--CALL
VXD$TMPLT
     12802**DCL     14072--IF      14074--ASSIGN  14076--CALL    14081--ASSIGN  14082<<ASSIGN  14114<>CALL
VXD$TMPLT.AD.ISADDR
     12825**DCL     12827--REDEF
VXD$TMPLT.AD.LFLAGS.SOURCE
     12811**DCL     14115<<ASSIGN
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:100  
VXD$TMPLT.AD.SECTNUM
     12822**DCL     14112<<ASSIGN
VXD$TMPLT.LFLAGS
     12838**DCL     12851--REDEF
VXD$TMPLT.NPOINTER
     12829**DCL     14099<<ASSIGN
VXD$TMPLT.VALUE
     12803**DCL     12805--REDEF
VXE$ERRMSG
     13682**DCL-ENT 13722--CALL    13818--CALL    13826--CALL    13833--CALL    13841--CALL    13874--CALL
     13882--CALL    13923--CALL    13931--CALL
VXE$ERROR
     13679**DCL-ENT 13724--CALL    13800--CALL    14109--CALL
VXU$NEW_SECTNUM
     13693**DCL-ENT 14114--CALL
VX_BIAS.A
      9578**DCL      9579--REDEF
VX_CBUF.CHARS_A
      9512**DCL      9513--REDEF
VX_CONST_DCB.ACTPOS
     10694**DCL     10694--REDEF
VX_CONST_DCB.ARS#
     10653**DCL     10653--REDEF
VX_CONST_DCB.ATTR#
     10683**DCL     10683--REDEF   10685--REDEF
VX_CONST_DCB.BORROW
     10705**DCL     10705--REDEF   10705--REDEF   10705--REDEF
VX_CONST_DCB.EOMCHAR#
     10660**DCL     10661--REDEF
VX_CONST_DCB.FLDID
     10697**DCL     10698--REDEF
VX_CONST_DCB.FORM$
     10689**DCL     10689--REDEF
VX_CONST_DCB.FSECT
     10712**DCL     10712--REDEF
VX_CONST_DCB.FSN#
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:101  
     10679**DCL     10679--REDEF   10679--REDEF   10680--REDEF
VX_CONST_DCB.HEADER$
     10688**DCL     10689--REDEF
VX_CONST_DCB.IXTNSIZE#
     10685**DCL     10686--REDEF
VX_CONST_DCB.LASTSTA$
     10669**DCL     10669--REDEF
VX_CONST_DCB.LVL
     10706**DCL     10706--REDEF
VX_CONST_DCB.NAME#.C
     10669**DCL     10670--REDEF
VX_CONST_DCB.NOEOF
     10701**DCL     10701--REDEF
VX_CONST_DCB.NRECS#
     10686**DCL     10686--REDEF
VX_CONST_DCB.NRECX
     10713**DCL     10713--REDEF
VX_CONST_DCB.OHDR
     10702**DCL     10702--REDEF
VX_CONST_DCB.ORG#
     10677**DCL     10678--REDEF
VX_CONST_DCB.PRECNO
     10710**DCL     10710--REDEF
VX_CONST_DCB.RCSZ
     10718**DCL     10718--REDEF
VX_CONST_DCB.RES#
     10671**DCL     10671--REDEF
VX_CONST_DCB.SETX
     10690**DCL     10690--REDEF
VX_CONST_DCB.TAB$
     10689**DCL     10689--REDEF
VX_CONST_DCB.TDA
     10709**DCL     10710--REDEF
VX_CONST_DCB.WSN#
     10671**DCL     10672--REDEF
VX_CURR$
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:102  
      9547**DCL     13850>>IF      13851>>ASSIGN  13852>>ASSIGN  13855>>ASSIGN  14018>>IF      14019>>ASSIGN
     14020>>ASSIGN  14021>>ASSIGN  14022>>ASSIGN  14032>>IF      14033>>ASSIGN  14034>>ASSIGN  14035>>ASSIGN
     14035>>ASSIGN  14078>>IF      14079>>ASSIGN  14080>>ASSIGN  14081>>ASSIGN  14081>>ASSIGN  14094>>IF
     14095>>ASSIGN  14096>>ASSIGN  14097>>ASSIGN  14098>>ASSIGN  14114>>CALL
VX_EBUF.CHARS_A
     10101**DCL     10102--REDEF
VX_EFIELD1.CHARS
     10110**DCL     10111--REDEF
VX_EFIELD2.CHARS
     10114**DCL     10115--REDEF
VX_EFIELD3.CHARS
     10118**DCL     10119--REDEF
VX_EI_KEY_BUF.KEY
     10494**DCL     10495--REDEF
VX_ERRORS
      9555**DCL      9566--REDEF
VX_ERRORS.CONFLICT_A
      9561**DCL      9562--REDEF
VX_ERRORS.UNSAT_A
      9557**DCL      9558--REDEF
VX_IMAGE_DATA.CPAGE#_A
      8692**DCL      8693--REDEF
VX_IMAGE_DATA.NODE_A$
      8704**DCL      8705--REDEF
VX_IMAGE_DATA.START_A$
      8696**DCL      8697--REDEF
VX_IMAGE_DATA.STOP_A$
      8700**DCL      8701--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8761**DCL      8762--REDEF
VX_IMAGE_DS3.NODE_A$
      8773**DCL      8774--REDEF
VX_IMAGE_DS3.START_A$
      8765**DCL      8766--REDEF
VX_IMAGE_DS3.STOP_A$
      8769**DCL      8770--REDEF
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:103  
VX_IMAGE_DS4.CPAGE#_A
      8784**DCL      8785--REDEF
VX_IMAGE_DS4.NODE_A$
      8796**DCL      8797--REDEF
VX_IMAGE_DS4.START_A$
      8788**DCL      8789--REDEF
VX_IMAGE_DS4.STOP_A$
      8792**DCL      8793--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8807**DCL      8808--REDEF
VX_IMAGE_DS5.NODE_A$
      8819**DCL      8820--REDEF
VX_IMAGE_DS5.START_A$
      8811**DCL      8812--REDEF
VX_IMAGE_DS5.STOP_A$
      8815**DCL      8816--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8830**DCL      8831--REDEF
VX_IMAGE_DS6.NODE_A$
      8842**DCL      8843--REDEF
VX_IMAGE_DS6.START_A$
      8834**DCL      8835--REDEF
VX_IMAGE_DS6.STOP_A$
      8838**DCL      8839--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8853**DCL      8854--REDEF
VX_IMAGE_DS7.NODE_A$
      8865**DCL      8866--REDEF
VX_IMAGE_DS7.START_A$
      8857**DCL      8858--REDEF
VX_IMAGE_DS7.STOP_A$
      8861**DCL      8862--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8876**DCL      8877--REDEF
VX_IMAGE_DS8.NODE_A$
      8888**DCL      8889--REDEF
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:104  
VX_IMAGE_DS8.START_A$
      8880**DCL      8881--REDEF
VX_IMAGE_DS8.STOP_A$
      8884**DCL      8885--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8715**DCL      8716--REDEF
VX_IMAGE_PROC.NODE_A$
      8727**DCL      8728--REDEF
VX_IMAGE_PROC.START_A$
      8719**DCL      8720--REDEF
VX_IMAGE_PROC.STOP_A$
      8723**DCL      8724--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8738**DCL      8739--REDEF
VX_IMAGE_ROS.NODE_A$
      8750**DCL      8751--REDEF
VX_IMAGE_ROS.START_A$
      8742**DCL      8743--REDEF
VX_IMAGE_ROS.STOP_A$
      8746**DCL      8747--REDEF
VX_LAST_SC_BASE
      9493**DCL     14103>>ASSIGN
VX_M_ALL
      9589**DCL     14010>>IF      14024>>IF      14072>>IF      14086>>IF
VX_M_BASE_PTR
      9591**DCL     14011>>ASSIGN  14025>>ASSIGN  14073>>ASSIGN  14087>>ASSIGN
VX_M_FREE
      9587**DCL     14010>>IF      14011>>ASSIGN  14012<<ASSIGN  14012>>ASSIGN  14024>>IF      14025>>ASSIGN
     14026<<ASSIGN  14026>>ASSIGN  14072>>IF      14073>>ASSIGN  14074<<ASSIGN  14074>>ASSIGN  14086>>IF
     14087>>ASSIGN  14088<<ASSIGN  14088>>ASSIGN
VX_M_VECTOR.F
      8543**DCL      8547--REDEF
VX_M_VECTOR_DP.F
      8578**DCL      8582--REDEF
VX_NODE_NUMBER
      9538**DCL     13854>>IF
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:105  
VX_O.ACCTN_A$
      9707**DCL      9708--REDEF
VX_O.DCB_MATCH_A$
      9716**DCL      9717--REDEF
VX_O.DCB_MATCH_HIT_A
      9722**DCL      9723--REDEF
VX_O.FIDN_A$
      9701**DCL      9702--REDEF
VX_O.FID_A$
      9693**DCL      9694--REDEF
VX_O.INCLUDE_A$
      9713**DCL      9714--REDEF
VX_O.MAP_A
      9687**DCL      9688--REDEF
VX_O.NODCB_A
      9744**DCL      9745--REDEF
VX_O.NUM.DPATCH
      9643**DCL     13758<<ASSIGN  13758>>ASSIGN
VX_O.NUM.IPATCH
      9644**DCL     13756<<ASSIGN  13756>>ASSIGN
VX_O.NUM_A
      9632**DCL      9634--REDEF
VX_O.OPT_A
      9732**DCL      9733--REDEF
VX_O.PRIV_A
      9648**DCL      9650--REDEF
VX_O.SIN_A
      9601**DCL      9602--REDEF
VX_O.TCB_A
      9728**DCL      9729--REDEF
VX_OD.ACCTN_A$
      9905**DCL      9906--REDEF
VX_OD.DCB_MATCH_A$
      9914**DCL      9915--REDEF
VX_OD.FIDN_A$
      9899**DCL      9900--REDEF
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:106  
VX_OD.FID_A$
      9891**DCL      9892--REDEF
VX_OD.INCLUDE_A$
      9911**DCL      9912--REDEF
VX_OD.MAP_A
      9885**DCL      9886--REDEF
VX_OD.NODCB_A
      9929**DCL      9930--REDEF
VX_OD.NUM.DPATCH
      9842**DCL     13757>>IF
VX_OD.NUM.IPATCH
      9843**DCL     13755>>IF
VX_OD.NUM_A
      9832**DCL      9833--REDEF
VX_OD.PRIV_A
      9847**DCL      9848--REDEF
VX_OD.SIN_A
      9801**DCL      9802--REDEF
VX_OD.VECTOR_A$
      9920**DCL      9921--REDEF
VX_OL.MAX_A
      9776**DCL      9778--REDEF
VX_OL.MIN_A
      9761**DCL      9762--REDEF
VX_ON.ACCTN_A$
     10050**DCL     10052--REDEF
VX_ON.DCB_MATCH_A$
     10061**DCL     10063--REDEF
VX_ON.FIDN_A$
     10043**DCL     10045--REDEF
VX_ON.FID_A$
     10034**DCL     10036--REDEF
VX_ON.INCLUDE_A$
     10057**DCL     10059--REDEF
VX_ON.MAP_A
     10027**DCL     10029--REDEF
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:107  
VX_ON.NODCB_A$
     10077**DCL     10078--REDEF
VX_ON.NUM_A
      9972**DCL      9974--REDEF
VX_ON.PRIV_A
      9988**DCL      9990--REDEF
VX_ON.SIN_A
      9940**DCL      9942--REDEF
VX_ON.VECTOR_A$
     10068**DCL     10069--REDEF
VX_OUHEAD.COMPILER
      9375**DCL     13763>>ASSIGN
VX_OUHEAD.VERSION
      9387**DCL      9389--REDEF
VX_OU_HEAD
      9330**DCL      9369--REDEF
VX_OU_HEAD.REC_A
      9342**DCL      9345--REDEF
VX_OU_HEAD.UTS
      9331**DCL     13714>>ASSIGN
VX_O_KEY_BUF.FORM0
      8591**DCL      8594--REDEF    8601--REDEF
VX_O_KEY_BUF_L.FORM0
      8614**DCL      8617--REDEF    8624--REDEF
VX_PASS2_REF.OU.L_START
     10280**DCL     10285--REDEF
VX_PASS2_REF.OU.L_STOP
     10286**DCL     10291--REDEF
VX_PASS2_REF.OU.MAX
     10274**DCL     10279--REDEF
VX_PASS2_REF.OU.SIZE
     10292**DCL     10297--REDEF
VX_PASS2_REF.SAT.COUNT
     10319**DCL     10325--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10326**DCL     10332--REDEF
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:108  
VX_PASS2_REF.SAT.L_START
     10305**DCL     10311--REDEF
VX_PASS2_REF.SAT.L_STOP
     10312**DCL     10318--REDEF
VX_PASS2_REF.SAT.MAX
     10299**DCL     10304--REDEF
VX_PASS2_REF.UNSAT.L_START
     10367**DCL     10372--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10373**DCL     10378--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10379**DCL     10384--REDEF
VX_PASS2_REF.UNSAT.MAX
     10361**DCL     10366--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10391**DCL     10396--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10385**DCL     10390--REDEF
VX_PHRASE.PHRASE
      9793**DCL      9795--REDEF
VX_PROGRAM_BIAS.A
      9571**DCL      9572--REDEF
VX_R_KEY_BUF.FORM0
      8640**DCL      8644--REDEF    8650--REDEF
VX_SD.A
      8268**DCL      8269--REDEF
VX_SPC.B$.MINE
     10462**DCL     10468--REDEF
VX_SPC.B$.NAME
     10441**DCL     10447--REDEF
VX_SPC.B$.SKIP
     10455**DCL     10461--REDEF
VX_SPC.B$.VALUE
     10448**DCL     10454--REDEF
VX_SPC.SEG.NAME
     10410**DCL     10416--REDEF
PL6.E3A0      #001=VXU$PLOVER File=VXU$PLOVER.:E05TSI                            WED 07/30/97 08:44 Page:109  
VX_SPC.SEG.VALUE
     10417**DCL     10423--REDEF
VX_TSX0_OVERLAY.H
     10185**DCL     10188--REDEF
WRITE_ERR
     13833**LABEL   13731--CALLALT 13748--CALLALT 13752--CALLALT
WRITE_ERR IN PROCEDURE WRITE_GLOBAL_REC
     13923**LABEL   13913--CALLALT 13918--CALLALT
WRITE_ERR IN PROCEDURE WRITE_PLOVER_REC
     13874**LABEL   13862--CALLALT 13867--CALLALT
WRITE_GLOBAL_REC
     13887**PROC    13780--CALL
WRITE_PLOVER_REC
     13848**PROC    13765--CALL    13782--CALL
