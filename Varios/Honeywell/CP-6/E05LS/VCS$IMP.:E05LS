VERSION E05

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:1    
        1        1        /*M*   VCS$IMP - IMP SOURCE FILE
        2        2                                                                                      */
        3        3        /*T***********************************************************/
        4        4        /*T*                                                         */
        5        5        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        6        6        /*T*                                                         */
        7        7        /*T***********************************************************/
        8        8        /*P*    NAME:   IMP
        9        9                AUTHOR: Ira C. Scharfglass
       10       10                DATE:   March/80  REWRITTEN FOR VDH APRIL/81   DFH
       11       11        *
       12       12                PURPOSE:  The purpose of IMP is to provide the user with a
       13       13                          command interface to the FEP user input function
       14       14                          generator.  Using the command interface, the user
       15       15                          specifies what input functions he would like
       16       16                          invoked as a result of depressing certain keys
       17       17                          on his keyboard.  IMP formats this information,
       18       18                          buffers it, and, after all user commands have
       19       19                          been entered, sends this information down to
       20       20                          the FEP.
       21       21        *
       22       22                DESCRIPTION:  A brief description of the overall processing
       23       23                              of IMP follows:
       24       24
       25       25                              1).  The output DCB, F$IMP is opened to either
       26       26                                   a file, if the user has specified an object
       27       27                                   unit FID, or to the terminal if no OU FID
       28       28                                   has been specified.  In order to get the
       29       29                                   information to the FEP, the writes are done
       30       30                                   transparently with a special VFC code, and
       31       31                                   with data in a very specialized format.  Please
       32       32                                   NOTE that in all probability, a PMME will be
       33       33                                   provided to to get the data down to the FEP,
       34       34                                   in a future CP-6 release.  This method will
       35       35                                   then be disabled.
       36       36                              2).  Buffer space is aquired.
       37       37                              3).  The input DCB, M$SI, is opened and if it is a
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:2    
       38       38                                   file of type 'OJ', it is an IMP OU.  The data
       39       39                                   in this file is already in the correct format
       40       40                                   and the internal routine DUMP_IMPFILE is called
       41       41                                   to send this data down to the FEP.
       42       42                              4).  The initial format information (VFC plus
       43       43                                   funny data) is placed into the beggining
       44       44                                   of record 1 of the buffer.
       45       45                              5).  If the user specified a command on the IMP
       46       46                                   invocation line, a flag is set to say this is
       47       47                                   a one command only, invocation.
       48       48                              6).  The following loop processes commands until
       49       49                                   an end of file occurrs, a null line is typed or
       50       50                                   the user keys in an END or QUIT command:
       51       51                                   A).  As each command is processed, pointers
       52       52                                        are kept to the beginning of the buffer
       53       53                                        for the current operation, as well as
       54       54                                        the current position within the buffer.
       55       55                                   B).  If this is a one time command, XUR$GETCMD
       56       56                                        is called to process this single
       57       57                                        command.  The altret is taken on error.
       58       58                                        Otherwise, XUR$GETCMND is called to
       59       59                                        process the next command read from M$SI,
       60       60                                        The altret is taken on error.
       61       61                                   C).  Depending on the value of the root node
       62       62                                        type, the propper command handler is called.
       63       63                              7).  Each record in the buffer is written out.
       64       64                              8).  We say Bye Bye IMP.
       65       65                                                                                      */
       66       66        /*X* DMC=YES,AIC=NO,PLM=6,IND=3,CTI=2,SDI=3,SQB=YES,DIN=0,ENI=3,CSI=0,THI=0   */
       67       67         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:3    
       68       68        VC$IMP: PROC MAIN;
       69       69         %SET LISTEXP='1'B;
       70       70        /*
       71       71               INCLUDES AND MACRO DEFINITIONS
       72       72                                                                                      */
       73       73         %INCLUDE VC_EQUS;
       74      224         %INCLUDE VC_PERR_C;
       75      240         %INCLUDE CP_6;
       76      321        %INCLUDE CP_6_SUBS;
       77      861         %INCLUDE U$JIT_C;
       78     1047         %INCLUDE XU_MACRO_C;
       79     4153         %INCLUDE UM_ERRORS_C;
       80     4187         %INCLUDE XU_PERR_C;
       81     4378        %INCLUDE XU_SUBS_C;
       82     4470         %INCLUDE XUH_MACRO_C;
       83     4554         %INCLUDE KV$PRM;
       84     4767         %INCLUDE KV$INPFNC;
       85     5326        /* */
       86     5327         %PARSE$OUT(NAME=IMP$BLK,STCLASS="BASED");
       87     5372         %PARSE$SYM(NAME=IMP$SYM,STCLASS="BASED");
       88     5410         %P$PCB(NAME=P_PCB,STCLASS="BASED");
       89     5611        %P$NODE(STCLASS=BASED);
       90     5705        %P$LIT(STCLASS=BASED);
       91     5758         %XUR_INIT(SYNTAX=YES,COMMANDS=YES,GOODCMD=YES,SPELLING=YES);
       92     5857         %XUH_PARAM (NAME=XUH_PARAM,
       93     5858         PROCNAME=VLP_IMP,
       94     5859         PROCACCT=SYS);
       95     5920         %VLP_NAME (FPTN=VLP_IMP,NAME='IMP',LEN=3,STCLASS=CONSTANT);
       96     5947         %VLP_ACCT (FPTN=SYS,ACCT=':SYS    ',STCLASS=CONSTANT);
       97     5960    1   DCL ERR_BUF CHAR(120);
       98     5961         %VLR_ERRMSG (FPTN=RESULTS_BUF,STCLASS=STATIC);
       99     5983         %FPT_ERRMSG (FPTN=ERRMSG_FPT,STCLASS=" ");
      100     6010         %FPT_ERRMSG (FPTN=ERRMSG_FPT_C,STCLASS=CONSTANT,
      101     6011         CODE=XUH_PARAM.ERR,
      102     6012         RESULTS=RESULTS_BUF,
      103     6013         INCLCODE=NO,
      104     6014         OUTDCB1=M$DO);
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:4    
      105     6041        %FPT_EXIT (FPTN=FPT_XIT);
      106     6056    1   DCL XUT$ADAPT ENTRY (2) ALTRET;
      107     6057        /* */
      108     6058         %FPT_WRITE(FPTN=FPT_INTRO,DCB=M$LO,BUF=IMP_HERE_MESS,STCLASS=STATIC);
      109     6089         %FPT_WRITE(FPTN=FPT_IMP,DCB=F$IMP,TRANS=YES,VFC=YES,
      110     6090         WAIT=YES,STCLASS=STATIC);
      111     6121         %FPT_READ(DCB=M$SI,WAIT=YES);
      112     6160         %FPT_PRECORD(DCB=M$SI,KEYS=NO,N=-1);
      113     6181        %FPT_TRMCTL (STCLASS=CONSTANT, FPTN=GTRMCTL, TRMCTL=OTRMCTL, DCB=M$SI);
      114     6208        %VLP_TRMCTL (FPTN=OTRMCTL);
      115     6248        %FPT_TRMCTL (STCLASS=CONSTANT, FPTN=SETFNCCTL, TRMCTL = FNCTRMCTL);
      116     6275        %VLP_TRMCTL (STCLASS=CONSTANT, FPTN=FNCTRMCTL, TRNUSRINPFNC=YES);
      117     6315    1   DCL OLD_FNCCTL BIT(2);
      118     6316         %FPT_OPEN(FPTN=OPEN_IMP_ME,ORG=TERMINAL,DCB=F$IMP,FUN=CREATE,STCLASS=STATIC,
      119     6317         ASN=DEVICE,RES='ME');
      120     6426         %FPT_OPEN(FPTN=OPEN_IMP_FILE,FUN=CREATE,DISP=NAMED,STCLASS=STATIC,
      121     6427         DCB=F$IMP,TYPE='OJ');
      122     6536         %FPT_CLOSE(FPTN=CLOSE_IMP_FILE,DISP=SAVE,DCB=F$IMP,RELG=YES,
      123     6537         STCLASS=STATIC);
      124     6579         %FPT_OPEN(FPTN=OPEN_SI,DCB=M$SI);
      125     6688         %FPT_OPEN(FPTN=OPEN_LO,DCB=M$LO,REASSIGN=YES);
      126     6797         %FPT_EXIT(STEPCC=2);
      127     6812         %B$TCB;
      128     6815         %B$ALT;
      129     6823         %F$DCB(DCBN=F$DCB);
      130     6880        /*
      131     6881               SYMREF AND DCBS
      132     6882                                                                                      */
      133     6883    1   DCL B$TCB$ PTR SYMREF;
      134     6884    1   DCL B$JIT$ PTR SYMREF;
      135     6885    1   DCL COMMAND UBIN(36) SYMREF; /* ROOT PARSE NODE                    */
      136     6886    1   DCL ASP_FUNKEY UBIN SYMREF;
      137     6887    1   DCL MNEMONIC UBIN SYMREF;
      138     6888    1   DCL TEMP SBIN WORD;
      139     6889    1   DCL DCB# UBIN WORD AUTO;
      140     6890    1   DCL M$LO DCB;
      141     6891    1   DCL M$DO DCB;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:5    
      142     6892    1   DCL M$SI DCB;
      143     6893    1   DCL F$IMP DCB;
      144     6894    1   DCL 1 ERRFID STATIC ALIGNED,
      145     6895    1          2 L UBIN BYTE INIT(14) CALIGNED,
      146     6896    1          2 C CHAR(31) INIT(':VCERRMSG.:SYS    ');
      147     6897        /*
      148     6898               ENTRY POINT DCLS
      149     6899                                                                                      */
      150     6900         %INCLUDE XUR_ENTRY;
      151     6932    1   DCL X$HELP ENTRY(1) ALTRET;
      152     6933        /*
      153     6934               BASED TEMPLATES
      154     6935                                                                                      */
      155     6936         /* TL TEMPLATE                        */
      156     6937        /*
      157     6938              DECLARE AND RELEASE IMP FUNCTION STRUCTURES,
      158     6939        */
      159     6940        /*          DECLARE INPUT FUNCTION              */
      160     6941         %KV$PRM_DCLINPFNC(NAME=DCLINPFNC,STCLASS="BASED(INPFNC$)");
      161     6984
      162     6985        /* The static version of this structure is used to store info about
      163     6986           the input function until space in the impbuf can be allocated */
      164     6987         %KV$PRM_DCLINPFNC(NAME=INPFNC_SAVE,STCLASS=STATIC);
      165     7030
      166     7031        /*  RELEASE INPUT FUNCTION TYPE   */
      167     7032         %KV$PRM_RLSINPFNC(NAME=RLSINPFNC,STCLASS="BASED(INPFNC$)");
      168     7062
      169     7063        /*
      170     7064        */
      171     7065         %KV$INPOPR(NAME=INPOPR,STCLASS="BASED(OPR_BUF$)");
      172     7091    1   DCL OPERATOR CHAR(OPR_BYTSIZ) HALIGNED BASED;
      173     7092         /* OPERATOR TEXT TEMPLATE             */
      174     7093    1   DCL OPER_TEXT CHAR(K) BASED;
      175     7094        /*
      176     7095               STATIC DATA
      177     7096                                                                                      */
      178     7097
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:6    
      179     7098        /* The following static area (aligned) is used to package up INPOPRs */
      180     7099
      181     7100    1   DCL OPR_BUF CHAR(258) STATIC ALIGNED;
      182     7101    1   DCL OPR_BUF$ STATIC PTR INIT(ADDR(OPR_BUF));
      183     7102
      184     7103         /*  IMP COMMAND BUFFERING AREA - NOTE THAT A SLACK BYTE IS
      185     7104                IS PLACED IN AS FIRST BYTE - THIS IS DONE SO THAT THE DATA
      186     7105                FOLLOWING THE VFC WILL BE ON AN EVEN BYTE BOUNDRY          */
      187     7106    1   DCL 1 IMPBUF STATIC DALIGNED,
      188     7107    1          2 * UBIN BYTE INIT(BITBIN('777'O)) CALIGNED,
      189     7108    1          2 IMPVFC UBIN BYTE INIT(25/* IMP_VFC */) CALIGNED,
      190     7109    1          2 DATA (0:1023) CHAR(1) INIT(BITASC('777'O)*1024) CALIGNED,
      191     7110    1          2 BUFER REDEF DATA CHAR(1024) CALIGNED;
      192     7111    1   DCL TESTBUF(0:1025) /* FOR INITIAL READ TO DETERMINE */
      193     7112    1    UBIN BYTE CALIGNED; /* VFC# AND TRANS# */
      194     7113    1   DCL SPELLBUF REDEF TESTBUF CHAR(1026);
      195     7114
      196     7115    1   DCL CURR_BUF_SIZE SBIN WORD STATIC;
      197     7116    1   DCL 1 B_VERSION ALIGNED SYMREF,
      198     7117    1          2 COUNT UBIN BYTE UNAL,
      199     7118    1          2 TEXT CHAR(6);
      200     7119    1   DCL IMP_HERE_MESS STATIC CHAR(15) INIT('IMP            ');
      201     7120    1   DCL HERE_MESS CONSTANT CHAR(5) INIT(' here');
      202     7121    1   DCL SUB_BLOCKS UBIN BYTE STATIC INIT(2);
      203     7122         /* IMP PROMPT                         */
      204     7123    1   DCL IMP_PROMPT STATIC CHAR(0) INIT('->');
      205     7124    1   DCL IMP_PROMPT_ STATIC BIT(72) DALIGNED INIT(VECTOR(IMP_PROMPT));
      206     7125    1   DCL IBEX_PROMPT STATIC CHAR(0) INIT ('!');
      207     7126         /* MNEMONIC TABLE                     */
      208     7127    1   DCL MNEMONICS(0:33) STATIC UBIN(9) UNAL INIT (
      209     7128    1    0, /* NUL                                */
      210     7129    1    1, /* SOH                                */
      211     7130    1    2, /* STX                                */
      212     7131    1    3, /* ETX                                */
      213     7132    1    4, /* EOT                                */
      214     7133    1    5, /* ENQ                                */
      215     7134    1    6, /* ACK                                */
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:7    
      216     7135    1    7, /* BEL                                */
      217     7136    1    8, /* BS                                 */
      218     7137    1    9, /* HT                                 */
      219     7138    1    10, /* LF                                 */
      220     7139    1    11, /* VT                                 */
      221     7140    1    12, /* FF                                 */
      222     7141    1    13, /* CR                                 */
      223     7142    1    14, /* SO                                 */
      224     7143    1    15, /* SI                                 */
      225     7144    1    16, /* DLE                                */
      226     7145    1    17, /* DC1                                */
      227     7146    1    18, /* DC2                                */
      228     7147    1    19, /* DC3                                */
      229     7148    1    20, /* DC4                                */
      230     7149    1    21, /* NAK                                */
      231     7150    1    22, /* SYN                                */
      232     7151    1    23, /* ETB                                */
      233     7152    1    24, /* CAN                                */
      234     7153    1    25, /* EM                                 */
      235     7154    1    26, /* SUB                                */
      236     7155    1    27, /* ESC                                */
      237     7156    1    28, /* FS                                 */
      238     7157    1    29, /* GS                                 */
      239     7158    1    30, /* RS                                 */
      240     7159    1    31, /* US                                 */
      241     7160    1    32, /* SP                                 */
      242     7161    1    127/* DEL */);
      243     7162    1   DCL MNEMONICS_CHRS REDEF MNEMONICS CHAR(34);
      244     7163        %VLP_ERRCODE ( FPTN=ECODE, STCLASS=STATIC, FCG=VC );
      245     7208        %VLP_ERRCODE ( FPTN=SYS_CODE, STCLASS=STATIC, FCG='515'O, MID='10'O,
      246     7209         MON='1'B, ERR#=842 );
      247     7254        /*
      248     7255                   AUTO DATA
      249     7256                                                                                      */
      250     7257    1   DCL FETCH_COMMANDS BIT(1) UNAL; /* INPUT LOOP CONTINUE FLAG           */
      251     7258         /* ASSTD. TEMPS                       */
      252     7259    1   DCL BAD_CMD BIT(1) UNAL;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:8    
      253     7260    1   DCL ERROR_POS SBIN; /* MARKER POSITION                    */
      254     7261    1   DCL I SBIN;
      255     7262    1   DCL J SBIN;
      256     7263    1   DCL K SBIN;
      257     7264    1   DCL NEXT_NODE SBIN; /* INDEX OF NEXT NODE IN SUBLK$       */
      258     7265    1   DCL NODE$ PTR; /* PTR TO CURRENT NODE IN TREE        */
      259     7266    1   DCL NODE1$ PTR; /* PTR TO CURRENT NODE IN TREE        */
      260     7267    1   DCL ONE_TIME_COMMAND BIT(1); /* FLAG TO INDICATE SINGLE COMMAND
      261     7268                                                  ON THE COMMAND LINE                 */
      262     7269    1   DCL OPER$ PTR; /* PTR TO NEXT SPOT IN BUFFER         */
      263     7270    1   DCL INPFNC$ PTR; /* PTR TO DCL OR RLS INPFNC STRUCT*/
      264     7271    1   DCL INPFNC_LEN UBIN HALF STATIC ALIGNED;
      265     7272    1   DCL 1 LENRDEF REDEF INPFNC_LEN ALIGNED,
      266     7273    1          2 BYT1 UBIN(10) UNAL,
      267     7274    1          2 BYT2 UBIN(8) UNAL;
      268     7275    1   DCL NOPS SBIN; /* NUMBER OF INPUT OPERATORS */
      269     7276    1   DCL OPTS_PRESENT_BITS(0:15) BIT(1) UNAL; /* OPERATOR PRESENCE BITS     */
      270     7277    1   DCL OPTIONS(0:15) REDEF OPTS_PRESENT_BITS UBIN(1) UNAL;
      271     7278    1   DCL TEXT$ PTR; /* POINTS TO TEXT IN INPOPR_TXT.T */
      272     7279    1   DCL P_PCB$ PTR;
      273     7280    1   DCL ROOT$ PTR; /* PTR TO ROOT NODE IN TREE           */
      274     7281        %VLP_ERRCODE ( FPTN = ERR_CODE, STCLASS="REDEF ROOT$");
              7281            /* ERROR CODE FROM XUR$GETCMD         */
      275     7326    1   DCL SPACE_NEEDED SBIN; /* #BYTES NEEDED TO HOLD AN ADD OPERATION */
      276     7327    1   DCL OPR_BYTSIZ UBIN WORD;
      277     7328         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:9    
      278     7329        /*
      279     7330          CALL XUR$INIT TO GET INITIALIZED AND TO AQUIRE A PTR TO THE PCB
      280     7331                                                                            */
      281     7332    1         P_PCB$ = ADDR(NIL);
      282     7333    1         SUBSTR(IMP_HERE_MESS,4,B_VERSION.COUNT) =
      283     7334    1           SUBSTR(B_VERSION.TEXT,0,B_VERSION.COUNT);
      284     7335    1         SUBSTR(IMP_HERE_MESS,4+B_VERSION.COUNT,5) = HERE_MESS;
      285     7336    1         BAD_CMD = '0'B;
      286     7337         /*
      287     7338                 SET XUR ROUTINES WITH ERRFILE FID.
      288     7339              */
      289     7340    1         CALL XUR$INIT(XUR_INIT,P_PCB$);
      290     7341    1         CALL XUR$SETERRMSG(ERRFID);
      291     7342        /*
      292     7343           OPEN M$SI AND SEE IF THE INPUT FILE (IF THERE IS ONE) IS AN
      293     7344           IMP OUTPUT. IF M$SI IS CONSEC, WITH VFC# & TRANS# SET, AND
      294     7345           THE FIRST BYTE (VFC) IS '031'O, THEN WE SHOULD JUST BE
      295     7346           SENDING EACH RECORD DOWN TO THE FEP.
      296     7347        */
      297     7348    1         DCB# = DCBNUM(M$SI);
      298     7349    1         CALL M$OPEN(OPEN_SI) ALTRET(BAD_NEWS);
      299     7350    1         DCB# = DCBNUM(F$IMP);
      300     7351        /*
      301     7352          OPEN F$IMP, THE DCB USED TO SEND THE DATA OUT TO THE FRONT END, AND
      302     7353          WRITE OUT THE IM HERE MESSAGE
      303     7354                                                                                      */
      304     7355    1         IF B$JIT$->B$JIT.PRFLAGS.OU THEN
      305     7356    2         DO;
      306     7357    2            IF DCBADDR(DCB#)->F$DCB.ASN# = 1
      307     7358    2            THEN
      308     7359    2               OPEN_IMP_FILE.V.ORG# = 1;
      309     7360    2            ELSE
      310     7361    2               OPEN_IMP_FILE.V.ORG# = 8;
      311     7362    2            CALL M$OPEN(OPEN_IMP_FILE) ALTRET(BAD_NEWS);
      312     7363    2            END;
      313     7364    1         ELSE
      314     7365    1            CALL M$OPEN(OPEN_IMP_ME) ALTRET(BAD_NEWS);
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:10   
      315     7366    1         IF DCBADDR(DCBNUM(M$SI))->F$DCB.ORG# = 1 /* CONSEC */
      316     7367    2         THEN DO; /* READ ONE RECORD TO DETERMINE VFC & TRANS */
      317     7368    2            FPT_READ.BUF_ = VECTOR(TESTBUF);
      318     7369    2            CALL M$READ(FPT_READ) ALTRET (BAD_NEWS);
      319     7370    2            CALL M$PRECORD(FPT_PRECORD); /* REPOSITION FILE */
      320     7371    2            IF DCBADDR(DCBNUM(M$SI))->F$DCB.DVBYTE.VFC# AND
      321     7372    2              DCBADDR(DCBNUM(M$SI))->F$DCB.DVBYTE.TRANS# AND
      322     7373    2              TESTBUF(0) = 25
      323     7374    3            THEN DO; /* WE ASSUME M$SI IS IMP OUTPUT TYPE ,
      324     7375                             DUMP TO FEP                         */
      325     7376    3               CALL DUMP_IMPFILE ALTRET(BAD_NEWS);
      326     7377    3               CALL XUR$CLOSE_DCBS;
      327     7378    3               CALL M$EXIT;
      328     7379    3               END; /* DUMP TO FEP                        */
      329     7380    2            END;
      330     7381    1         CURR_BUF_SIZE = 0; /* INIT WITH VFC COUNTED IN SIZE */
      331     7382        /*
      332     7383                                                                                      */
      333     7384    1         INPFNC$=ADDR(IMPBUF.BUFER);
      334     7385    1         INPFNC_LEN = 0;
      335     7386        /*
      336     7387          CHECK TO SEE IF THE USER SPECIFIED A ONE TIME COMMAND ON THE
      337     7388          IMP INVOCATION LINE.  IF HE DID, IT WILL BE PRECEDED BY AN
      338     7389          OPEN PAREN.
      339     7390                                                                                      */
      340     7391    1         IF SUBSTR(B$JIT$->B$JIT.CCBUF,B$JIT$->B$JIT.CCDISP,1) = '(' THEN
      341     7392    2         DO;
      342     7393    2            ONE_TIME_COMMAND='1'B;
      343     7394    2            IMP_PROMPT_ = VECTOR ( IBEX_PROMPT );
      344     7395    2            END;
      345     7396    1         ELSE
      346     7397    2         DO; /* NORMAL INVOCATION                  */
      347     7398    2            ONE_TIME_COMMAND='0'B;
      348     7399    2            IF DCBADDR(DCBNUM(M$SI))->F$DCB.DDEV.IC# THEN CALL M$GTRMCTL (GTRMCTL);
      349     7400    2            CALL M$OPEN (OPEN_LO);
      350     7401    2            CALL M$WRITE (FPT_INTRO);
      351     7402    2            END; /* NORMAL INVOCATION                  */
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:11   
      352     7403    1         OLD_FNCCTL = OTRMCTL.TRNUSRINPFNC#;
      353     7404    1         FETCH_COMMANDS='1'B;
      354     7405        /*
      355     7406          THE FOLLOWING LOOP READS IN COMMANDS ONE AT A TIME AND PROCESSES THEM.
      356     7407          EXIT OCCURS WHEN THE FETCH_COMMANDS FLAG IS TURNED OFF.  THIS IS CAUSED
      357     7408          BY EITHER AN ALTRET FROM THE XUR$GETCMD ROUTINE CAUSED BY SOMETHING
      358     7409          OTHER THAN THE PARSER OF BY THE USER TYPING AN END COMMAND.
      359     7410                                                                                      */
      360     7411    2         DO WHILE (FETCH_COMMANDS);
      361     7412        /*
      362     7413          CALL THE LIBRARY ROUTINE XUR$GETCMD TO READ A COMMAND THROUGH M$SI AND
      363     7414          CALL THE PARSER
      364     7415                                                                                      */
      365     7416        /*E* ERROR: VC-VC_E$SYNTAX-1
      366     7417             MESSAGE: Syntax error
      367     7418             MESSAGE1: An error in IMP command syntax has been detected above
      368     7419             MESSAGE2: The correct syntax is:
      369     7420                       A/DD (P/RIMARY_ESCAPE | SE/CONDARY_ESCAPE | SP/ECIAL_CHARACTER)
      370     7421                          [I/NTRODUCER=introducer] identifier {T=string [E/CHO,A/CKNOWLEDGE]
      371     7422                            (I/MMEDIATE and or R/EAD) (IN/PUT_FUNCTION | B/UFFER |
      372     7423                            TY/PEAHEAD_BUFFER | WRITE_T/RANSPARENT |
      373     7424                            WRITE_V/IRTUAL | W/RITE ) } ........
      374     7425                      or
      375     7426               D/ELETE (A/LL | (( P/RIMARY_ESCAPE | SE/CONDARY_ESCAPE | SP/ECIAL_CHARACTER )
      376     7427                                       (A/LL | identifier )))
      377     7428                                                                                      */
      378     7429    2            ECODE.ERR#=1/* SYNTAX ERROR */;
      379     7430    2            ERROR_POS=-1;
      380     7431    2            IF ONE_TIME_COMMAND THEN
      381     7432    3            DO; /* HANDLE A ONE TIME COMMAND IN CCBUF */
      382     7433    3               FETCH_COMMANDS= '0'B; /* THIS IS A ONE SHOT DEAL            */
      383     7434    3               I=B$JIT$->B$JIT.CCDISP+1; /* INDEX OF COMMAND IN CCBUF          */
      384     7435    3               CALL INDEX1R(J,')',B$JIT$->B$JIT.CCBUF,B$JIT$->B$JIT.CCARS);
      385     7436    3               IF J < I THEN
      386     7437    3                  J=B$JIT$->B$JIT.CCARS - I; /* SIZE OF COMMAND              */
      387     7438    3               ELSE
      388     7439    3                  J = J - I;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:12   
      389     7440    3               CALL XUR$GETCMD(COMMAND,ROOT$,IMP_PROMPT_,
      390     7441    3                 SUBSTR(B$JIT$->B$JIT.CCBUF,I,J),J) ALTRET(PARSE_ERROR);
      391     7442    3               ECODE.ERR#=0;
      392     7443    3               END; /* HANDLE A ONE TIME COMMAND          */
      393     7444    2            ELSE
      394     7445    3            DO; /* NORMAL COMMAND READ                */
      395     7446    4               IF OTRMCTL.TRNUSRINPFNC#~='01'B THEN DO;
      396     7447    4                  CALL M$STRMCTL (SETFNCCTL);
      397     7448    4                  OTRMCTL.TRNUSRINPFNC# = '1'B;
      398     7449    4                  END;
      399     7450    3               CALL XUR$GETCMD(COMMAND,ROOT$,IMP_PROMPT_) ALTRET(PARSE_ERROR);
      400     7451    3               ECODE.ERR#=0;
      401     7452    3               END; /* NORMAL COMMAND READ                */
      402     7453        /*
      403     7454          SEPERATE OUT THE INDIVIDUAL CASES, BASED ON THE ROOT NODE
      404     7455                                                                                      */
      405     7456    2            IF ROOT$ ~= ADDR(NIL) THEN
      406     7457    3            DO CASE(ROOT$->IMP$BLK.CODE);
      407     7458    3            CASE(2/* DELETE */);
      408     7459    3               CALL PROCESS_DELETE;
      409     7460    3            CASE(1/* ADD */);
      410     7461    3               CALL PROCESS_ADD ALTRET(BAD_NEWS);
      411     7462    3            CASE(3/* END */,4/* QUIT */);
      412     7463    3               FETCH_COMMANDS='0'B;
      413     7464    3            CASE(8/* SPELL */);
      414     7465    3               CALL SPELL;
      415     7466    3             END; /* CASE                               */
      416     7467    2   PARSE_ERROR: IF ECODE.ERR# > 0 THEN
      417     7468    2               CALL PROCESS_ERROR;
      418     7469    2            END;
      419     7470        /*
      420     7471              WRITE AND COMMANDS BUFFERED OUT TO THE FEP
      421     7472        */
      422     7473    1         IF CURR_BUF_SIZE > 0 THEN /* MORE DATA THEN THE VFC */
      423     7474    2         DO;
      424     7475    2            FPT_IMP.BUF_.BOUND = CURR_BUF_SIZE ;
      425     7476         /*  BUMP UP BUF POINTER TO THE VFC */
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:13   
      426     7477    2            FPT_IMP.BUF_.BUF$ = PINCRC(ADDR(IMPBUF),1);
      427     7478    2            CALL M$WRITE(FPT_IMP) ALTRET(BAD_NEWS);
      428     7479    2            END;
      429     7480    2         IF OLD_FNCCTL~=OTRMCTL.TRNUSRINPFNC# THEN DO;
      430     7481    2            OTRMCTL = FNCTRMCTL;
      431     7482    2            OTRMCTL.TRNUSRINPFNC# = OLD_FNCCTL;
      432     7483    2            CALL M$STRMCTL (GTRMCTL);
      433     7484    2            END;
      434     7485    1         CALL M$CLOSE (CLOSE_IMP_FILE);
      435     7486    1         CALL XUR$CLOSE_DCBS;
      436     7487    1         CALL M$EXIT ( FPT_XIT );
      437     7488        /*
      438     7489          IF WE COME DOWN HERE SOME SORT OF MONITOR ERROR HAS OCCURRED.
      439     7490          IT IS FATAL
      440     7491                                                                                      */
      441     7492    1   BAD_NEWS: ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
      442     7493    1         ERR_CODE.SEV = 7;
      443     7494    1         CALL XUR$ERRMSG(ERR_CODE,DCB#);
      444     7495    1         CALL XUR$CLOSE_DCBS;
      445     7496    1         CALL M$EXIT(FPT_EXIT);
      446     7497         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:14   
      447     7498        /*I*    NAME:     PROCESS_DELETE
      448     7499                PURPOSE:  Process the IMP DELETE command.
      449     7500                DESCRIPTION:   This procedure sets up the GV$VD0_RLSINPFNC
      450     7501                               (release input function) structure for the
      451     7502                               virtual device handler in the FEP. The structure
      452     7503                               defines the function key, key type and function
      453     7504                               type (primary or sec esc or special) affected.
      454     7505                                                                                      */
      455     7506         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:15   
      456     7507    1   PROCESS_DELETE: PROC;
      457     7508    2         BAD_CMD = '0'B;
      458     7509    2         SPACE_NEEDED = SIZEC(RLSINPFNC);
      459     7510    2         CALL NEED_SPACE(SPACE_NEEDED);
      460     7511    2         INPFNC_LEN = SPACE_NEEDED;
      461     7512    2         RLSINPFNC = '0'B; /* CLEAR STRUCTURE DATA */
      462     7513    2         RLSINPFNC.TYP = 10 /*RLSINPFNC STRUCTURE */;
      463     7514    2         RLSINPFNC.LNG = SIZEC(RLSINPFNC) - 2/* sizec of TL header */;
      464     7515        /*             The length field does not include the type and length */
      465     7516        /*
      466     7517          IF THE NEXT SUB-BLOCK IS OF THE ALL VARIETY, THIS IS A DELETE ALL
      467     7518          OPERATION
      468     7519                                                                                      */
      469     7520    2         IF ROOT$->IMP$BLK.NSUBLKS=1 THEN
      470     7521    3         DO; /* Either delete all, functionkey, or control function */
      471     7522    3            TEMP = ROOT$->IMP$BLK.SUBLK$(0)->IMP$SYM.CODE;
      472     7523    4            IF TEMP = 512/* ALL */ THEN DO;
      473     7524    4               RLSINPFNC.ALLINPFNCTYP ='1'B; /* SET DELETE ALL BIT */
      474     7525    4               RLSINPFNC.ID_TKNTYP = 3 /* NONE SPECIFIED */;
      475     7526    4               END; /* DELETE ALL                         */
      476     7527    4            ELSE DO; /* Function key or control function */
      477     7528    4               RLSINPFNC.INPFNCTYP = TEMP-2/* INTRO_CONVERSION# */;
      478     7529    4               RLSINPFNC.ID_TKNTYP = TEMP-4;
      479     7530    4               RLSINPFNC.ID_TKN =
      480     7531    4                 ROOT$->IMP$BLK.SUBLK$(0)->IMP$BLK.SUBLK$(0)->IMP$SYM.CODE;
      481     7532    4               END; /* DEL CTR OR FUNCTION KEY */
      482     7533    3            END;
      483     7534    2         ELSE
      484     7535    3         DO; /* SCAN DELETE                        */
      485     7536    3            NODE$=ROOT$->IMP$BLK.SUBLK$(0); /* TABLE TYPE NODE                 */
      486     7537    3            IF ROOT$->IMP$BLK.SUBLK$(1)->IMP$BLK.CODE=512/* ALL */ THEN
      487     7538    4            DO; /* DELETE ONE TABLE                   */
      488     7539    4               RLSINPFNC.INPFNCTYP = NODE$->IMP$BLK.CODE-2/* INTRO_CONVERSION# */;
      489     7540    4               RLSINPFNC.ID_TKNTYP = 3 /* NONE SPECIFIED */;
      490     7541    4               END; /* DELETE ONE TABLE                   */
      491     7542    3            ELSE
      492     7543    4            DO; /* SCAN IDENTIFIER                    */
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:16   
      493     7544    4               RLSINPFNC.INPFNCTYP = NODE$->IMP$BLK.CODE-2/* INTRO_CONVERSION# */;
      494     7545    4               NODE$ = ROOT$->IMP$BLK.SUBLK$(1); /* IDENTIFIER BLK             */
      495     7546    4               NODE$ = NODE$->IMP$BLK.SUBLK$(0); /* THE IDENTIFIER ITSELF      */
      496     7547    4               IF NODE$ -> IMP$BLK.CODE = 1/* QSTRING */ OR NODE$->IMP$BLK.CODE =
              7547                        2/* SSTRING */ THEN
      497     7548    5               DO; /* SCAN QUOTE STRING                  */
      498     7549    5                  IF NODE$ -> IMP$SYM.COUNT ~= 1 THEN
      499     7550    6                  DO; /* ERROR #2                           */
      500     7551        /*E* ERROR: VC-VC_E$BADIDENT-1
      501     7552             MESSAGE: Invalid identifier string length
      502     7553             MESSAGE1: Identifiers must be exactly one character in length
      503     7554                                                                                      */
      504     7555    6                     ECODE.ERR#=2/* BAD IDENTIFIER */;
      505     7556    6                     ERROR_POS=NODE$->IMP$SYM.CPOS;
      506     7557    6                     BAD_CMD = '1'B;
      507     7558    6                     END; /* ERROR #2                           */
      508     7559    5                  ELSE
      509     7560    6                  DO; /* ADD IDENTIFIER                     */
      510     7561    6                     RLSINPFNC.ID_TKN = ASCBIN(NODE$->IMP$SYM.TEXT);
      511     7562    6                     RLSINPFNC.ID_TKNTYP = 0 /* CHARACTER */;
      512     7563    6                     END; /* ADD IDENTIFIER                     */
      513     7564    5                  END; /* SCAN QUOTE STRING                  */
      514     7565    4               ELSE
      515     7566    4                  IF NODE$->IMP$BLK.CODE = 11/* MNEMONIC */ THEN
      516     7567    5                  DO; /* IDENTIFIER IS A MNEMONIC           */
      517     7568    5                     NODE$ = NODE$ -> IMP$BLK.SUBLK$(0); /* MNEMONIC NODE      */
      518     7569    5                     I = NODE$ -> IMP$BLK.CODE - 11/* MNEMONIC_DIFF# */;
      519     7570    5                     RLSINPFNC.ID_TKN = MNEMONICS(I);
      520     7571    5                     RLSINPFNC.ID_TKNTYP = 0 /* CHARACTER */;
      521     7572    5                     END; /* IDENITIFIER IS A MNEMONIC          */
      522     7573    4                  ELSE
      523     7574    5                  DO; /* IDENTIFIER IS A HEX OR OCTAL STRING     */
      524     7575    5                     CALL CONVERT_STRING(NODE$,
      525     7576    5                       ADDR(RLSINPFNC.ID_TKN),1);
      526     7577    5                     RLSINPFNC.ID_TKNTYP = 0 /* CHARACTER */;
      527     7578    5                     END; /* IDENTIFIER IS A HEX OR OCTAL STRING     */
      528     7579    4               END; /* SCAN IDENTIFIER                    */
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:17   
      529     7580    3            END; /* SCAN DELETE                        */
      530     7581    2         IF ECODE.ERR# = 0 THEN /* BUMP UP INPUT FNC PTR */
      531     7582    2            INPFNC$ = PINCRC(INPFNC$,SIZEC(RLSINPFNC) +
      532     7583    2              MOD(SIZEC(RLSINPFNC),2)); /* INCR TO DBL BYT BOUNDRY */
      533     7584    2         RETURN;
      534     7585    2   END PROCESS_DELETE;
      535     7586         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:18   
      536     7587        /*I*    NAME:    PROCESS_ADD
      537     7588                PURPOSE: Process the IMP ADD command.
      538     7589                DESCRIPTION:   First, we determine if an introducer is present,
      539     7590                               and if it is, we check it for validity.  If an
      540     7591                               introducer is present, its type and value are
      541     7592                               stored.  Next, we process the identifier, and
      542     7593                               check it for validity.  The input operators associated
      543     7594                               with this identifier are then added WITH THEIR TYPES.
      544     7595                               This info constitues the data used for the
      545     7596                               GV$VDO_DCLINPFNC (declare input function) structure
      546     7597                               used by the virtual device handler for adding input
      547     7598                               functions (done in GV$UIFT). This structure is
      548     7599                               followed by some number of GV$INPOPR_TXT structures.
      549     7600                               This is the fep structure used to define text
      550     7601                               operators. One of these structures is created for
      551     7602                               each innput operator ("T='...' attrs") specified
      552     7603                               by the IMP user. Note that the length field in the
      553     7604                               DCLINPFNC structure includes all the INPOPR_TXT
      554     7605                               structures that follow it and all the slack bytes
      555     7606                               required to make the structures start on even
      556     7607                               byte boundries.
      557     7608        */
      558     7609         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:19   
      559     7610    1   PROCESS_ADD: PROC ALTRET;
      560     7611        /*
      561     7612           WE WILL START BY PROCESSING THE INTRODUCER AND IDENTIFIER IN
      562     7613           STATIC STORAGE. I DONT WANT TO ALLOCATE SPACE IN THE IMPBUF UNTIL
      563     7614           IT IS KNOWN HOW MUCH SPACE TOTAL IS NEEDED FOR THE COMMAND, AND
      564     7615           I WON'T KNOW THAT UNTIL THE OPERATORS ARE PROCESSED.
      565     7616        */
      566     7617
      567     7618    2   DCL INTRO_PTR$ PTR;
      568     7619    2   DCL TWO_CHAR CHAR(2) BASED(INTRO_PTR$) CALIGNED;
      569     7620    2   DCL ONE_CHAR CHAR(1) BASED(INTRO_PTR$) CALIGNED;
      570     7621    2         BAD_CMD = '0'B;
      571     7622    2         INPFNC_SAVE = '0'B; /* CLEAR DATA STRUCTURE */
      572     7623    2         INPFNC_SAVE.TYP = 4 /* DCLINPFNC STRUCTURE */;
      573     7624        /*      Default intro and identifier types to NONE                 */
      574     7625    2         INPFNC_SAVE.INT1_TKNTYP = 3 /* NONE SPECIFIED */;
      575     7626    2         INPFNC_SAVE.INT2_TKNTYP = 3 /* NONE SPECIFIED */;
      576     7627    2         INPFNC_SAVE.ID_TKNTYP = 3 /* NONE SPECIFIED */;
      577     7628    2         NEXT_NODE=1; /* FIRST NODE                         */
      578     7629    2         SUB_BLOCKS = 2;
      579     7630
      580     7631        /* Are there any introducers ? */
      581     7632
      582     7633    2         SUB_BLOCKS = 1;
      583     7634    2         INTRO_PTR$ = ADDR(INPFNC_SAVE.INT1_TKN);
      584     7635
      585     7636    3         DO WHILE ROOT$->IMP$BLK.SUBLK$(NEXT_NODE)->IMP$BLK.CODE = 6/* INTRODUCER */;
      586     7637    3            NODE$ = ROOT$->IMP$BLK.SUBLK$(NEXT_NODE);
      587     7638    3            NODE$ = NODE$ -> IMP$BLK.SUBLK$(0); /* PTR TO INTRDUCER1 CHR        */
      588     7639    3            IF INPFNC_SAVE.INT2_TKNTYP~=3 /* NONE SPECIFIED */ THEN
      589     7640    3               GOTO BAD_INTRO;
      590     7641    3            INPFNC_SAVE.INT1_TKNTYP = 0 /* CHARACTER */;
      591     7642    3            IF NEXT_NODE = 2 THEN
      592     7643    3               INPFNC_SAVE.INT2_TKNTYP = 0 /* CHARACTER */;
      593     7644    4            DO CASE (NODE$->IMP$BLK.CODE);
      594     7645    4            CASE(1/* QSTRING */, 2/* SSTRING */);
      595     7646    4               IF NODE$ -> IMP$SYM.COUNT = 0
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:20   
      596     7647    4                 OR NODE$ -> IMP$SYM.COUNT > 3 - NEXT_NODE THEN
      597     7648    5               DO ; /* ERROR #3                           */
      598     7649        /*E* ERROR: VC-VC_E$BADINTRO-1
      599     7650             MESSAGE: Invalid introducer string length
      600     7651             MESSAGE1: An introducer must be exactly one or two characters long
      601     7652                                                                                      */
      602     7653    5   BAD_INTRO:     ECODE.ERR#=3/* BAD INTRODUCER */;
      603     7654    5                  BAD_CMD = '1'B;
      604     7655    5                  ERROR_POS=NODE$->IMP$SYM.CPOS;
      605     7656    5                  END; /* ERROR #3                           */
      606     7657    4               ELSE
      607     7658    4                  TWO_CHAR = NODE$->IMP$SYM.TEXT;
      608     7659    4               IF NODE$->IMP$SYM.COUNT = 2 THEN
      609     7660    4                  INPFNC_SAVE.INT2_TKNTYP = 0 /* CHARACTER */;
      610     7661    4               INPFNC_SAVE.INT1_TKNTYP = 0 /* CHARACTER */;
      611     7662    4            CASE(12/* OSTRING */, 13/* XSTRING */);
      612     7663    4               CALL CONVERT_STRING(NODE$,INTRO_PTR$,3-NEXT_NODE);
      613     7664    4               IF NODE$->IMP$BLK.SUBLK$(0)->IMP$SYM.COUNT > 3 THEN
      614     7665    4                  INPFNC_SAVE.INT2_TKNTYP = 0 /* CHARACTER */;
      615     7666    4            CASE(5 /* CONTROL CHAR */, 6 /* FUNCTION KEY */);
      616     7667    4               INPFNC_SAVE.INT1_TKNTYP = NODE$->IMP$BLK.CODE-4;
      617     7668    4               INPFNC_SAVE.INT1_TKN = NODE$->IMP$BLK.SUBLK$(0) ->
      618     7669    4                 IMP$BLK.CODE;
      619     7670    4            CASE(ELSE); /* introducer is mnemonics */
      620     7671    4               NODE$ = NODE$ -> IMP$BLK.SUBLK$(0); /* PTR TO MNEMONIC ITSELF */
      621     7672    4               I = NODE$ -> IMP$BLK.CODE - 11/* MNEMONIC_DIFF# */;
      622     7673    4               ONE_CHAR = BINASC(MNEMONICS(I));
      623     7674    4             END; /* CASE */
      624     7675    3            NEXT_NODE = NEXT_NODE + 1; /* PTR TO INTRO2 */
      625     7676    3            SUB_BLOCKS = SUB_BLOCKS + 1;
      626     7677    3            INTRO_PTR$ = PINCRC(INTRO_PTR$,1);
      627     7678    3            END; /* PROCESS INTRODUCERS                */
      628     7679    2         IF (ROOT$ -> IMP$BLK.NSUBLKS > SUB_BLOCKS AND ECODE.ERR# = 0) OR
      629     7680    2           ROOT$ -> IMP$BLK.SUBLK$(0) -> IMP$BLK.CODE >= 5 /* CONTROL CHAR */ THEN
      630     7681    3         DO; /* PROCESS IDENTIFIER AND OPERATORS   */
      631     7682    3            NODE$ = ROOT$ -> IMP$BLK.SUBLK$(NEXT_NODE) -> IMP$BLK.SUBLK$(0);
      632     7683    3            INPFNC_SAVE.INPFNCTYP = ROOT$ -> IMP$BLK.SUBLK$(0) ->IMP$BLK.CODE;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:21   
      633     7684
      634     7685    4            DO CASE(INPFNC_SAVE.INPFNCTYP);
      635     7686
      636     7687    4            CASE(2/* PRIMARY_ESCAPE */,3/* SECONDARY_ESCAPE */,
      637     7688    4              4/* SPECIAL_CHARACTER */);
      638     7689
      639     7690    4               INPFNC_SAVE.INPFNCTYP = INPFNC_SAVE.INPFNCTYP-2/* INTRO_CONVERSION# */;
      640     7691    4               IF NODE$ -> IMP$BLK.CODE = 1/* QSTRING */ OR NODE$ ->
      641     7692    4                 IMP$BLK.CODE = 2/* SSTRING */ THEN
      642     7693    5               DO; /* IDENTIFIER IS A QUOTE STRING       */
      643     7694    5                  IF NODE$ -> IMP$SYM.COUNT ~= 1 THEN
      644     7695    6                  DO; /* ERROR #2                           */
      645     7696    6                     ECODE.ERR# = 2/* BAD IDENTIFIER */;
      646     7697    6                     BAD_CMD = '1'B;
      647     7698    6                     ERROR_POS=NODE$->IMP$SYM.CPOS;
      648     7699    6                     END; /* ERROR #2                           */
      649     7700    6                  ELSE DO;
      650     7701    6                     INPFNC_SAVE.ID_TKN = ASCBIN(NODE$ -> IMP$SYM.TEXT);
      651     7702    6                     INPFNC_SAVE.ID_TKNTYP = 0 /* CHARACTER */;
      652     7703    6                     END;
      653     7704    5                  END; /* IDENTIFIER IS A QUOTE              */
      654     7705    4               ELSE
      655     7706    4                  IF NODE$->IMP$BLK.CODE = 12/* OSTRING */ OR
      656     7707    4                    NODE$->IMP$BLK.CODE = 13/* XSTRING */ THEN
      657     7708    5                  DO; /* HEX OR OCTAL STRING                */
      658     7709    5                     CALL CONVERT_STRING(NODE$,ADDR(INPFNC_SAVE.ID_TKN),1);
      659     7710    5                     INPFNC_SAVE.ID_TKNTYP = 0 /* CHARACTER */;
      660     7711    5                     END; /* HEX OR OCTAL STRING                */
      661     7712    4                  ELSE
      662     7713    5                  DO; /* IDENTIFIER IS A MNEMONIC           */
      663     7714    5                     NODE$ = NODE$ -> IMP$BLK.SUBLK$(0); /* PTR TO MNEMONIC*/
      664     7715    5                     I = NODE$ -> IMP$BLK.CODE - 11/* MNEMONIC_DIFF# */;
      665     7716    5                     INPFNC_SAVE.ID_TKN = MNEMONICS(I);
      666     7717    5                     INPFNC_SAVE.ID_TKNTYP = 0 /* CHARACTER */;
      667     7718    5                     END; /* IDENTIFIER IS A MNEMONIC           */
      668     7719        %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:22   
      669     7720    4            CASE(5 /* CONTROL CHAR */, 6 /* FUNCTION KEY */);
      670     7721    4               INPFNC_SAVE.INPFNCTYP = INPFNC_SAVE.INPFNCTYP-2/* INTRO_CONVERSION# */;
      671     7722    4               INPFNC_SAVE.ID_TKN = ROOT$ -> IMP$BLK.SUBLK$(0) ->
      672     7723    4                 IMP$BLK.SUBLK$(0) -> IMP$BLK.CODE;
      673     7724    4               INPFNC_SAVE.ID_TKNTYP = INPFNC_SAVE.INPFNCTYP-2;
      674     7725    4               NEXT_NODE = NEXT_NODE - 1; /* Text OPRs in this node */
      675     7726
      676     7727    4             END; /* DO CASE(INPFNC.FNCTYP) */
      677     7728
      678     7729
      679     7730    3            IF ECODE.ERR# = 0 THEN
      680     7731    4            DO; /* PROCESS OPERATORS                  */
      681     7732    4               NEXT_NODE=NEXT_NODE+1; /* NODE NUMBER OF INPUT OPERATORS     */
      682     7733    4               ROOT$ = ROOT$ -> IMP$BLK.SUBLK$(NEXT_NODE); /* PTR TO OPERATORS */
      683     7734    4               NOPS = ROOT$ -> IMP$BLK.NSUBLKS;
      684     7735        /*
      685     7736          SCAN ALL THE INPUT OPERATORS TO DETERMINE HOW MAY WORDS OF STORAGE
      686     7737          WILL BE NEEDED IN THE OUTPUT BUFFER
      687     7738                                                                                      */
      688     7739        /*
      689     7740           INIT SPACE NEEDED BY MULT NUM OF INPUT OPERATORS TIMES THE
      690     7741           SIZE OF THE INPOPR STRUCTURE LESS TEXT FIELD WHICH WILL BE ADDED
      691     7742           TO THE SPACE NEEDED WHEN WE FIND OUT HOW MUCH TEXT THERE IS.
      692     7743           Don't forget to add the bytes required to start structures on
      693     7744           an even byte boundry. (MOD(SIZEC(structure),2))
      694     7745        */
      695     7746    4               SPACE_NEEDED=SIZEC(DCLINPFNC) + NOPS*(SIZEC(INPOPR)+1) +
      696     7747    4                 MOD(SIZEC(DCLINPFNC),2);
      697     7748    5               DO I=0 TO NOPS-1; /* SCAN ALL OPERATORS                 */
      698     7749    5                  NODE$ = ROOT$ -> IMP$BLK.SUBLK$(I); /* PTR TO OPERATOR PARTS */
      699     7750    5                  K=0; /* TOTAL OPERATOR BYTE COUNT          */
      700     7751    6                  DO J = 0 TO NODE$ -> IMP$BLK.NSUBLKS - 1; /* SCAN OPERATOR PARTS */
      701     7752    6                     NODE1$ = NODE$ -> IMP$BLK.SUBLK$(J); /* PTR TO THIS PART  */
      702     7753    6                     IF NODE1$ -> IMP$SYM.CODE = 11/* MNEMONIC */ THEN
      703     7754    6                        K = K +1;
      704     7755    6                     ELSE
      705     7756    6                        IF NODE1$ -> IMP$SYM.CODE = 1/* QSTRING */ OR
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:23   
      706     7757    6                          NODE1$ -> IMP$SYM.CODE = 2/* SSTRING */ THEN
      707     7758    6                           K = K + NODE1$ -> IMP$SYM.COUNT;
      708     7759    6                        ELSE
      709     7760    6                           IF NODE1$->IMP$SYM.CODE = 12/* OSTRING */ THEN
      710     7761    6                              K=K+(NODE1$->IMP$BLK.SUBLK$(0)->IMP$SYM.COUNT/3);
      711     7762    6                           ELSE
      712     7763    6                              IF NODE1$->IMP$SYM.CODE = 13/* XSTRING */ THEN
      713     7764    6                                 K=K+(NODE1$->IMP$BLK.SUBLK$(0)->IMP$SYM.COUNT/2);
      714     7765    6                     END; /* SCAN OPERATOR PARTS                */
      715     7766        /*    Ensure that the INPOPR.TEXT + the INPOPR_TXT ends up on
      716     7767              an even byte boundry (FEP restriction )                      */
      717     7768    5                  IF MOD(SIZEC(INPOPR)+1+K,2) ~= 0 THEN
      718     7769    5                     K = K + 1;
      719     7770    5                  SPACE_NEEDED=SPACE_NEEDED+K;
      720     7771    5                  END; /* SCAN ALL OPERATORS                 */
      721     7772    4               INPFNC_LEN = SPACE_NEEDED - 4/* sizec of TL header */;
      722     7773         /* Length field doesn't include type and length fields */
      723     7774    4               INPFNC_SAVE.LNG.BYT2 = LENRDEF.BYT2;
      724     7775    4               INPFNC_SAVE.LNG.BYT1 = LENRDEF.BYT1;
      725     7776
      726     7777    4               IF MOD(K,2) = 0 THEN
      727     7778    4                  SPACE_NEEDED=SPACE_NEEDED+1;
      728     7779    4               CALL NEED_SPACE(SPACE_NEEDED) ALTRET(NO_SPACE);
      729     7780    4               IF ECODE.ERR# > 0 THEN
      730     7781    4                  RETURN;
      731     7782        /*
      732     7783                      MEMORY IS NOW ALLOCATED FOR THIS ADD COMMAND
      733     7784        */
      734     7785    4               DCLINPFNC = INPFNC_SAVE;
      735     7786        /*
      736     7787          NEXT SCAN THE OPERATORS AND ACTUALLY PLACE THE INPUT OPERATORS INTO THE
      737     7788          OUTPUT BUFFER
      738     7789                                                                                      */
      739     7790    4               OPER$ = PINCRC(INPFNC$,SIZEC(DCLINPFNC) +
      740     7791    4                 MOD(SIZEC(DCLINPFNC),2)); /* INCR TO DBL BYT BOUNDRY */
      741     7792    5               DO I=0 TO NOPS-1; /* SCAN EACH OPERATOR                 */
      742     7793    5                  INPOPR = '0'B; /* CLEAR INP OPERATOR HDR */
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:24   
      743     7794    5                  INPOPR.TYP = 9 /* TEXT INPUT OPERATOR */;
      744     7795    5                  INPOPR_TXT.L = 0; /* INIT TEXT INDEX/SIZE */
      745     7796    5                  IF I < NOPS-1 THEN /* SET CHN BIT ON ALL BUT LAST OPER */
      746     7797    5                     INPOPR.CHN = '1'B;
      747     7798    5                  NODE$ = ROOT$ -> IMP$BLK.SUBLK$(I); /* NEXT OPERATOR PTR     */
      748     7799    5                  OPTS_PRESENT_BITS='0'B; /* INIT OPTION PRESENCE BITS         */
      749     7800    6                  DO J=0 TO NODE$ -> IMP$BLK.NSUBLKS-1; /* SCAN EACH PART      */
      750     7801    6                     NODE1$ = NODE$ -> IMP$BLK.SUBLK$(J); /* PTR TO NEXT PART  */
      751     7802        /*
      752     7803          IF THIS OPERATOR OPTION HAS APPEARED BEFORE AND IT IS NOT A STRING
      753     7804          OF SOME TYPE OR A MNEMONIC, THEN ERROR THE GUY OFF
      754     7805                                                                                      */
      755     7806    6                     IF OPTS_PRESENT_BITS(NODE1$->IMP$BLK.CODE) AND
      756     7807    6                       NODE1$->IMP$BLK.CODE ~= 2/* SSTRING */ AND NODE1$->IMP$BLK.CODE
              7807                                ~= 1/* QSTRING */ AND
      757     7808    6                       NODE1$->IMP$BLK.CODE ~= 11/* MNEMONIC */ AND
      758     7809    6                       NODE1$->IMP$BLK.CODE ~= 12/* OSTRING */ AND NODE1$->IMP$BLK.CODE
              7809                                ~= 13/* XSTRING */ THEN
      759     7810    7                     DO; /* OPTION SPECIFIED TWICE             */
      760     7811    7                        ERROR_POS = NODE1$->IMP$BLK.CPOS;
      761     7812        /*E* ERROR: VC-VC_E$DOUBLEOP-1
      762     7813             MESSAGE: Multiply specified option
      763     7814             MESSAGE1: An option may only be specified once per operator
      764     7815                                                                                      */
      765     7816    7                        ECODE.ERR#=4/* OPTION SPECIFIED TWICE */;
      766     7817    7                        BAD_CMD = '1'B;
      767     7818    7                        RETURN;
      768     7819    7                        END; /* OPTION SPECIFIED TWICE             */
      769     7820    6                     ELSE
      770     7821    6                        OPTS_PRESENT_BITS(NODE1$->IMP$BLK.CODE) = '1'B;
      771     7822    7                     DO CASE(NODE1$ -> IMP$BLK.CODE);
      772     7823    7                     CASE(11/* MNEMONIC */);
      773     7824    7                        K = NODE1$ -> IMP$BLK.SUBLK$(0) -> IMP$BLK.CODE -
              7824                                 11/* MNEMONIC_DIFF# */;
      774     7825    7                        SUBSTR(INPOPR_TXT.T,INPOPR_TXT.L,1)=BINASC(MNEMONICS(K));
      775     7826    7                        INPOPR_TXT.L = INPOPR_TXT.L + 1;
      776     7827    7                     CASE(2/* SSTRING */,1/* QSTRING */);
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:25   
      777     7828    7                        TEXT$ = PINCRC(ADDR(INPOPR_TXT.T),INPOPR_TXT.L);
      778     7829    7                        K = NODE1$ -> IMP$SYM.COUNT;
      779     7830    7                        INPOPR_TXT.L = INPOPR_TXT.L + K;
      780     7831    7                        TEXT$ -> OPER_TEXT = NODE1$ -> IMP$SYM.TEXT;
      781     7832    7                     CASE(12/* OSTRING */,13/* XSTRING */);
      782     7833    7                        TEXT$ = PINCRC(ADDR(INPOPR_TXT.T),INPOPR_TXT.L);
      783     7834    7                        IF NODE1$->IMP$BLK.CODE = 12/* OSTRING */ THEN
      784     7835    7                           K = NODE1$ -> IMP$BLK.SUBLK$(0) ->
      785     7836    7                             IMP$SYM.COUNT/3;
      786     7837    7                        ELSE
      787     7838    7                           K = NODE1$ -> IMP$BLK.SUBLK$(0) ->
      788     7839    7                             IMP$SYM.COUNT/2;
      789     7840    7                        INPOPR_TXT.L = INPOPR_TXT.L + K;
      790     7841    7                        CALL CONVERT_STRING(NODE1$,TEXT$,36);
      791     7842    7                        IF ECODE.ERR# ~= 0 THEN
      792     7843    7                           RETURN;
      793     7844    7                     CASE(3/* ACKNOWLEDGE */);
      794     7845    7                        INPOPR.ACK = '1'B;
      795     7846    7                     CASE(6/* IMMEDIATE */);
      796     7847    7                        INPOPR.IMD = '1'B;
      797     7848    7                     CASE(5/* ECHO */);
      798     7849    7                        INPOPR_TXT.ECH = '1'B;
      799     7850    7                     CASE(8/* READ */);
      800     7851    7                        INPOPR.RED = '1'B;
      801     7852    7                     CASE(10/* WRITE */);
      802     7853    7                        INPOPR_TXT.DSP = 3/* WRITE# */;
      803     7854    7                        INPOPR_TXT.DSP = 3/* WRITE# */;
      804     7855    7                     CASE(14/* WRITETRANSPARENT */);
      805     7856    7                        INPOPR_TXT.DSP = 3/* WRITE# */;
      806     7857    7                        INPOPR_TXT.TRN = '1'B;
      807     7858    7                     CASE(15/* WRITEVIRTUAL */);
      808     7859    7                        INPOPR_TXT.DSP = 3/* WRITE# */;
      809     7860    7                        INPOPR_TXT.VRT = '1'B;
      810     7861    7                     CASE(7/* INPUT_FUNCTION */);
      811     7862    7                        INPOPR_TXT.DSP = 0/* INPUT FUNCTION# */;
      812     7863    7                     CASE(4/* BUFFER */);
      813     7864    7                        INPOPR_TXT.DSP = 1/* READBUF#*/;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:26   
      814     7865    7                     CASE(9/* TYPEAHEAD_BUFFER */);
      815     7866    7                        INPOPR_TXT.DSP = 2/* TYPE AHEAD# */;
      816     7867    7                      END; /* CASE                               */
      817     7868        /*
      818     7869                 CHECK THAT THE TOTAL TEXT FOR INPOPR NOT > 255
      819     7870        */
      820     7871    6                     IF INPOPR_TXT.L > 255 THEN
      821     7872    7                     DO; /* TOO MUCH TEXT */
      822     7873         /*E* ERROR: VC-VC_E$INSIZE-1
      823     7874        MESSAGE:  Text operator is too large (max is 255 characters)
      824     7875                  Multiple TEXT ('T=') operations will have to be used.
      825     7876        MESSAGE1: See chapter 7 of programmer reference manual (CE40). */
      826     7877    7                        ERROR_POS = -1;
      827     7878    7                        ECODE.ERR# = 9/* IMP COMMAND IS TOO LARGE */;
      828     7879    7                        BAD_CMD = '1'B;
      829     7880    7                        RETURN;
      830     7881    7                        END; /* TOO MUCH TEXT */
      831     7882    6                     END; /* SCAN EACH PART                     */
      832     7883        /*
      833     7884          INSURE THAT A PHASE WAS SPECIFIED
      834     7885                                                                                      */
      835     7886    5                  IF NOT(OPTS_PRESENT_BITS(6/* IMMEDIATE */)) AND NOT(OPTS_PRESENT_BITS
              7886                           (8/* READ */)) THEN
      836     7887    6                  DO; /* NO PHASE                           */
      837     7888        /*E* ERROR: VC-VC_E$NOPHASE-1
      838     7889             MESSAGE: No PHASE specified
      839     7890             MESSAGE1: A PHASE (IMMEDIATE or READ) must be specified
      840     7891                                                                                      */
      841     7892    6                     ERROR_POS=P_PCB$->P_PCB.HI_CHAR;
      842     7893    6                     ECODE.ERR#=5/* NO PHASE */;
      843     7894    6                     BAD_CMD = '1'B;
      844     7895    6                     RETURN;
      845     7896    6                     END; /* NO PHASE                           */
      846     7897        /*
      847     7898          IF NO TEXT OPERATOR WAS SPECIFIED SAY BYE BYE
      848     7899                                                                                      */
      849     7900    5                  IF NOT(OPTS_PRESENT_BITS(10/* WRITE */)) AND NOT(OPTS_PRESENT_BITS(
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:27   
              7900                           7/* INPUT_FUNCTION */))
      850     7901    5                    AND NOT(OPTS_PRESENT_BITS(4/* BUFFER */))
      851     7902    5                    AND NOT(OPTS_PRESENT_BITS(9/* TYPEAHEAD_BUFFER */))
      852     7903    5                    AND NOT(OPTS_PRESENT_BITS(15/* WRITEVIRTUAL */))
      853     7904    5                    AND NOT(OPTS_PRESENT_BITS(14/* WRITETRANSPARENT */)) THEN
      854     7905    6                  DO; /* NO TEXT OPERATOR                   */
      855     7906        /*E* ERROR: VC-VC_E$NOTXTOP-1
      856     7907             MESSAGE: The operation to be performed must appear
      857     7908             MESSAGE1: One of WRITE_VIRTUAL, WRITE_TRANSPARENT, WRITE,
      858     7909                       TYPEAHEAD_BUFFER, INPUT_FUNCTION or BUFFER is
      859     7910                       required.
      860     7911                                                                                      */
      861     7912    6                     ERROR_POS=P_PCB$->P_PCB.HI_CHAR;
      862     7913    6                     ECODE.ERR#=6/* NO TEXT OPERATOR */;
      863     7914    6                     BAD_CMD = '1'B;
      864     7915    6                     RETURN;
      865     7916    6                     END; /* NO TEXT OPERATOR                   */
      866     7917        /*
      867     7918          MAKE SURE THAT ONLY ONE TEXT OPERATOR WAS SPECIFIED FOR THIS OPERATOR
      868     7919                                                                                      */
      869     7920    5                  IF (OPTIONS(10/* WRITE */) + OPTIONS(9/* TYPEAHEAD_BUFFER */) +
      870     7921    5                    OPTIONS(15/* WRITEVIRTUAL */) +
      871     7922    5                    OPTIONS(14/* WRITETRANSPARENT */) +
      872     7923    5                    OPTIONS(7/* INPUT_FUNCTION */) +
      873     7924    5                    OPTIONS(4/* BUFFER */)) > 1 THEN
      874     7925    6                  DO; /* MORE THAN ONE TEXT OPERATOR        */
      875     7926        /*E* ERROR: VC-VC_E$TWOTEXT-1
      876     7927             MESSAGE: Only one operation may appear
      877     7928             MESSAGE1: Only one of WRITE_VIRTUAL, WRITE_TRANSPARENT, WRITE,
      878     7929                      TYPEAHEAD_BUFFER, INPUT_FUNCTION or BUFFER is allowed.
      879     7930                                                                                      */
      880     7931    6                     ECODE.ERR#=7/* MORE THAN ONE TEXT OPERATOR */;
      881     7932    6                     BAD_CMD = '1'B;
      882     7933    6                     ERROR_POS=P_PCB$->P_PCB.HI_CHAR;
      883     7934    6                     RETURN;
      884     7935    6                     END; /* MORE THAN ONE TEXT OPERATOR        */
      885     7936    5                  OPR_BYTSIZ = SIZEC(INPOPR) + 1 + INPOPR_TXT.L;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:28   
      886     7937    5                  OPER$->OPERATOR = OPR_BUF$->OPERATOR;
      887     7938        /*   Bump up pointer to the next even byte boundry past the curr structure */
      888     7939    5                  OPER$ = PINCRC(OPER$, OPR_BYTSIZ + MOD(OPR_BYTSIZ,2));
      889     7940    5                  END; /* SCAN EACH OPERATOR                 */
      890     7941    4               END; /* PROCESS_OPERATORS                  */
      891     7942    3            END; /* PROCESS IDENTIFIERS AND OPERATORS  */
      892     7943    2         IF ECODE.ERR# = 0 THEN /* NO ERRORS ENCOUNTERED */
      893     7944    2            INPFNC$ = OPER$; /* OPER$ SHOULD BE AT NEXT AVAIL BYTE */
      894     7945    2         RETURN;
      895     7946    2   NO_SPACE: ALTRETURN;
      896     7947    2   END PROCESS_ADD;
      897     7948         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:29   
      898     7949        /*I*    NAME:      NEED_SPACE
      899     7950                PURPOSE:  To ensure there is enough space in the IMP BUFFER to
      900     7951                          process the current command, make space if neccessary.
      901     7952                DESCRIPTION:  Analyize the space requirement for this command and
      902     7953                              decide if the command is too large or requires
      903     7954                              getting rid of what is currently in the impbuffer
      904     7955                              before enough room can be made to store the current
      905     7956                              command. In general, a command can be up to 1000
      906     7957                              bytes in size, but we try to keep writes to the
      907     7958                              FEP to under 500 bytes.
      908     7959                                                                                      */
      909     7960         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:30   
      910     7961    1   NEED_SPACE: PROC(SPACE_NEEDED) ALTRET;
      911     7962    2   DCL SPACE_NEEDED SBIN;
      912     7963        /*
      913     7964              Check that the size of a command is not too large.
      914     7965        */
      915     7966    2         IF SPACE_NEEDED > 511 THEN
      916     7967    3         DO; /* This is ridiculous */
      917     7968         /*E* ERROR: VC-VC_E$TOOMUCH-1
      918     7969              MESSAGE:    Sorry,  Too much memory required to service request.
      919     7970              MESSAGE1: Any IMP command must not require more that 500 bytes of data.
      920     7971              */
      921     7972    3            ECODE.ERR# = 10 /*TOO MUCH INPUT FOR FEP*/;
      922     7973    3            BAD_CMD = '1'B;
      923     7974    3            ERROR_POS = -1;
      924     7975    3            RETURN;
      925     7976    3            END;
      926     7977         /* CHECK TO SEE IF THIS REQUEST WILL BE SUFFICIENT TO
      927     7978                          WRITE TO FEP. IE. ENOUGH DATA HAS BEEN BUFFERED TO
      928     7979                          MAKE A WRITE WORTHWILD.
      929     7980                       */
      930     7981    2         IF SPACE_NEEDED + CURR_BUF_SIZE > 511 AND CURR_BUF_SIZE > 0 THEN
      931     7982    3         DO;
      932     7983    3            FPT_IMP.BUF_.BOUND = CURR_BUF_SIZE ;
      933     7984    3            FPT_IMP.BUF_.BUF$ = PINCRC(ADDR(IMPBUF),1);
      934     7985    3            INPFNC$ = ADDR(IMPBUF.BUFER);
      935     7986    3            CURR_BUF_SIZE = 0;
      936     7987    3            CALL M$WRITE(FPT_IMP) ALTRET(ALTWRITE);
      937     7988    3            END;
      938     7989        /**/
      939     7990    2         CURR_BUF_SIZE = CURR_BUF_SIZE + SPACE_NEEDED;
      940     7991    2         RETURN;
      941     7992    2   ALTWRITE: ALTRETURN;
      942     7993    2   END NEED_SPACE;
      943     7994         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:31   
      944     7995        /*I*    NAME:    PROCESS_ERROR
      945     7996                PURPOSE: Report IMP errors to the user.
      946     7997                DESCRIPTION:  ECODE is assumed loaded with the error code
      947     7998                              to be reported.  For syntax errors (reported
      948     7999                              from XUR$GETCMD by the parser), an error pointer
      949     8000                              is found in the PCB.  Otherwise, if an error pointer
      950     8001                              exists, it is in ERROR_POS.  The routine XUR$ERRMSG
      951     8002                              is called to report the error.  Also the routines
      952     8003                              resets the buffer byte count to what it was before
      953     8004                              the errored command was entered.
      954     8005                                                                                      */
      955     8006         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:32   
      956     8007    1   PROCESS_ERROR: PROC;
      957     8008    3         IF ECODE.ERR# = 1/* SYNTAX ERROR */ AND ERR_CODE.MON = '1'B THEN DO;
      958     8009    3            FETCH_COMMANDS = '0'B;
      959     8010    3            IF ERR_CODE.ERR# ~= 6 /* EOF ON READ */ THEN
      960     8011    3               CALL XUR$ERRMSG(ERR_CODE,,,,,,4);
      961     8012    3            END; /* END DO */
      962     8013    2         ELSE
      963     8014    3         DO; /* REPORT ERROR                       */
      964     8015    3            FPT_XIT.V.STEPCC# = 4;
      965     8016    3            IF ECODE.ERR# = 1/* SYNTAX ERROR */ THEN
      966     8017    3               RETURN;
      967     8018    3            IF ONE_TIME_COMMAND THEN
      968     8019    3               ERROR_POS = ERROR_POS + B$JIT$->B$JIT.CCDISP;
      969     8020    3            IF ERROR_POS > -1 THEN
      970     8021    3               CALL XUR$ERRPTR(ERROR_POS,DCBNUM(M$DO));
      971     8022    3            CALL XUR$ERRMSG(ECODE);
      972     8023    4            IF ONE_TIME_COMMAND THEN DO;
      973     8024    4               ECODE.SEV =ECODE.SEV + 1;
      974     8025    4               FPT_XIT.CODE_ = VECTOR(ECODE);
      975     8026    4               END;
      976     8027    3            ELSE
      977     8028    3               ECODE.ERR# = 0;
      978     8029        /*      Get back space reserved for the last errored command    */
      979     8030    3            TEMP = POFFC(ADDR(IMPBUF.DATA(CURR_BUF_SIZE)),INPFNC$);
      980     8031    3            CURR_BUF_SIZE = CURR_BUF_SIZE - TEMP;
      981     8032    3            INPFNC_LEN = 0;
      982     8033    3            ERROR_POS=0;
      983     8034    3            END; /* REPORT ERROR                       */
      984     8035    2         RETURN;
      985     8036    2   END PROCESS_ERROR;
      986     8037         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:33   
      987     8038        /*I*    NAME:     CONVERT_STRING
      988     8039                PURPOSE:  Convert a hex or octal string to its binary value.
      989     8040                DESCRIPTION:  First, we determine the digit size we are dealing
      990     8041                              with, which depends on the base.  We then process
      991     8042                              the string, a byte at a time, from left to right.
      992     8043                              Each digit is multiplied by the conversion factor,
      993     8044                              which is base dependant.
      994     8045                                                                                      */
      995     8046         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:34   
      996     8047    1   CONVERT_STRING: PROC(NODE_PTR$,OUTBUF$,MAX);
      997     8048        /*
      998     8049          CONVERT OCTAL AND HEX STRINGS TO BINARY, BUFFER THEM AND CHECK FOR
      999     8050          VALIDITY      INPUT: COUNT - CONTAINS MAXIMUM NUMBER OF DIGITS ALLOWED
     1000     8051                                                                                      */
     1001     8052    2   DCL ABYTE SBIN; /* OUTPUT BUFFER INDEX                */
     1002     8053    2   DCL MAX UBIN; /* MAX NUMBER OF CHARACTERS ALLOWED   */
     1003     8054    2   DCL DIGIT UBIN(9) CALIGNED BASED(DIGIT_PTR$);
     1004     8055    2   DCL DIGIT_PTR$ PTR; /* POINTS TO DIGIT TO BE CONV.        */
     1005     8056    2   DCL DIGIT_SIZE SBIN; /* NUMBER OF DIGITS PER BYTE          */
     1006     8057    2   DCL IMP$SYM_COUNT SBIN;
     1007     8058    2   DCL I UBIN;
     1008     8059    2   DCL COUNT UBIN; /* NUMBER OF BYTES CONVERTED          */
     1009     8060    2   DCL MULT UBIN; /* BASE MULTIPLIER (8 OR 16)          */
     1010     8061    2   DCL NODE$ PTR; /* POINTER TO DIGIT NODE              */
     1011     8062    2   DCL NODE_PTR$ PTR;
     1012     8063    2   DCL OUTBUF(0:35) UBIN(9) CALIGNED BASED(OUTBUF$);
     1013     8064    2   DCL OUTBUF$ PTR; /* POINTER TO OUTPUT BUFFER           */
     1014     8065        /*
     1015     8066          DETERMINE WHETHER THIS IS A HEX OR OCTAL CONSTANT
     1016     8067                                                                                      */
     1017     8068    2         IF NODE_PTR$->IMP$BLK.CODE=12/* OSTRING */ THEN
     1018     8069    3         DO; /* OCTAL                              */
     1019     8070    3            MULT=8;
     1020     8071    3            DIGIT_SIZE=3;
     1021     8072    3            END; /* OCTAL                              */
     1022     8073    2         ELSE
     1023     8074    3         DO; /* HEX                                */
     1024     8075    3            MULT=16;
     1025     8076    3            DIGIT_SIZE=2;
     1026     8077    3            END; /* HEX                                */
     1027     8078        /*
     1028     8079          INSURE THAT THE USER SPECIFIED THE CORRECT NUMBER OF OCTAL OR HEX
     1029     8080          DIGITS
     1030     8081                                                                                      */
     1031     8082    2         NODE$ = NODE_PTR$->IMP$BLK.SUBLK$(0);
     1032     8083    2         IMP$SYM_COUNT = NODE$->IMP$SYM.COUNT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:35   
     1033     8084    2         IF MOD(IMP$SYM_COUNT,DIGIT_SIZE) ~= 0 THEN
     1034     8085    3         DO; /* WRONG NUMBER OF DIGITS             */
     1035     8086        /*E* ERROR: VC-VC_E$DIGITS-1
     1036     8087             MESSAGE: Incorrect number of digits specified
     1037     8088             MESSAGE1: Hex constants must contain a multiple of 2 digits
     1038     8089                       and octal constants a multiple of 3 digits
     1039     8090                                                                                      */
     1040     8091    3            ECODE.ERR#=8/* INCORRECT NUMBER OF DIGITS */;
     1041     8092    3            BAD_CMD = '1'B;
     1042     8093    3            ERROR_POS=NODE$->IMP$SYM.CPOS;
     1043     8094    3            RETURN;
     1044     8095    3            END; /* WRONG NUMBER OF DIGITS             */
     1045     8096        /*
     1046     8097          DETERMINE THE NUMBER OF CHARACTERS PRESENT AND GET A POINTER TO THE
     1047     8098          START OF THE INPUT STRING
     1048     8099                                                                                      */
     1049     8100    2         COUNT = (IMP$SYM_COUNT/DIGIT_SIZE);
     1050     8101        /*
     1051     8102           IF THE NUMBER OF DIGITS IS GREATER THAN THE MAX ALLOWED, REPORT
     1052     8103           AN ERROR
     1053     8104                                                                                      */
     1054     8105    2         IF COUNT > MAX THEN
     1055     8106    3         DO; /* TOO MANY DIGITS                    */
     1056     8107    3            ECODE.ERR#=8/* INCORRECT NUMBER OF DIGITS */;
     1057     8108    3            BAD_CMD = '1'B;
     1058     8109    3            ERROR_POS=NODE$->IMP$SYM.CPOS;
     1059     8110    3            RETURN;
     1060     8111    3            END; /* TOO MANY DIGITS                    */
     1061     8112    2         DIGIT_PTR$ = PINCRC(NODE$->IMP$SYM.TEXTC$,1);
     1062     8113        /*
     1063     8114          THE FOLLOWING LOOP CONVERTS DIGIT_SIZE INPUT DIGITS TO THEIR BINARY
     1064     8115          BYTE REPRESENTATIONS AND STUFFS THEM INTO THE OUTPUT BUFFER
     1065     8116                                                                                      */
     1066     8117    3         DO ABYTE = 0 TO COUNT-1; /* BYTE LOOP                          */
     1067     8118    3            OUTBUF(ABYTE) = 0;
     1068     8119    4            DO I=1 TO DIGIT_SIZE; /* CONVERT THIS MANY DIGITS           */
     1069     8120    4               IF DIGIT >= ASCBIN('0') AND DIGIT <= ASCBIN('9') THEN
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:36   
     1070     8121    4                  DIGIT = DIGIT-48;
     1071     8122    4               ELSE
     1072     8123    4                  DIGIT=DIGIT-55;
     1073     8124    4               OUTBUF(ABYTE) = (OUTBUF(ABYTE)*MULT) + DIGIT;
     1074     8125    4               DIGIT_PTR$=PINCRC(DIGIT_PTR$,1);
     1075     8126    4               END; /* CONVERT THIS MANY DIGITS           */
     1076     8127    3            END; /* BYTE LOOP                          */
     1077     8128    2         RETURN;
     1078     8129    2   END CONVERT_STRING;
     1079     8130         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:37   
     1080     8131        /*I*     NAME:       DUMP_IMPFILE
     1081     8132                 PURPOSE:    Write out an IMP created OU.
     1082     8133                 DESCRIPTION:  Read the next record, frame the buffer, and write
     1083     8134                               out the next record.
     1084     8135                                                                                      */
     1085     8136         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:38   
     1086     8137    1   DUMP_IMPFILE: PROC ALTRET;
     1087     8138        /*
     1088     8139          THIS ROUTINE WRITES OUT RECORDS TO THE FEP THAT HAVE BEEN PREVIOUSLY
     1089     8140          CREATED BY IMP.
     1090     8141                                                                                      */
     1091     8142    2         FPT_IMP.BUF_ = VECTOR(IMPBUF);
     1092     8143    2         FPT_READ.BUF_ = VECTOR(IMPBUF);
     1093     8144    3         DO WHILE ('1'B) ; /* DUMP TO FEP                        */
     1094     8145    3            CALL M$READ(FPT_READ) ALTRET(READ_ERROR);
     1095     8146    3            FPT_IMP.BUF_.BOUND=DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#-1;
     1096     8147    3            CALL M$WRITE(FPT_IMP) ALTRET(WRITE_ERR);
     1097     8148    3            END; /* DUMP TO FEP                        */
     1098     8149    2   READ_ERROR:
     1099     8150    2         IF DCBADDR(DCBNUM(M$SI))->F$DCB.TYC.EOF# THEN
     1100     8151    2            RETURN;
     1101     8152    2         ELSE
     1102     8153    2            ALTRETURN;
     1103     8154    2   WRITE_ERR: ALTRETURN;
     1104     8155    2   END DUMP_IMPFILE;
     1105     8156         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:39   
     1106     8157        /*I* NAME: SPELL
     1107     8158             DESCRIPTION: Indicates how to spell the function-key that activated
     1108     8159             the read.  Looks up the key number in the nodes and prints the text.
     1109     8160        */
     1110     8161    1   SPELL: PROC;
     1111     8162
     1112     8163    2         I = DCBADDR(DCBNUM(M$SI))->F$DCB.EOMVAL#.VALUE#;
     1113     8164    2         J = 8;
     1114     8165    2         IF OTRMCTL.TRNUSRINPFNC#='1'B THEN CALL M$GTRMCTL (GTRMCTL);
     1115     8166    2         ELSE RETURN; /* Spell only in interactive mode */
     1116     8167    2         NODE$ = ADDR(NIL);
     1117     8168    3         IF OTRMCTL.TRNUSRINPFNC#~='0'B THEN DO;
     1118     8169    3            CALL INSERT(SPELLBUF,0,8,'=Spcchr ');
     1119     8170    3            IF DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#~=0
     1120     8171    3            THEN IF ROOT$->IMP$BLK.NSUBLKS=0 THEN RETURN;
     1121     8172    3               ELSE IF ROOT$->IMP$BLK.SUBLK$(0)->IMP$SYM.COUNT>0
     1122     8173    3                  THEN I=ASCBIN(SUBSTR(ROOT$->IMP$BLK.SUBLK$(0)->IMP$SYM.TEXT,0,1));
     1123     8174    4            IF I>31 AND I<127 THEN DO;
     1124     8175    4               CALL INSERT(SPELLBUF,8,3,'''',BINASC(I),'''');
     1125     8176    4               J = 11;
     1126     8177    4               END; ELSE IF I<128 THEN DO;
     1127     8178    4                  CALL INDEX (I,BINASC(I),MNEMONICS_CHRS);
     1128     8179    4                  I = I+11/* MNEMONIC */;
     1129     8180    4                  NODE$=ADDR(MNEMONIC);
     1130     8181    4                  END; ELSE DO;
     1131     8182    4                  J = I/16+48; IF J>57 THEN J=J+65-58;
     1132     8183    4                  I = MOD(I,16)+48; IF I>57 THEN I=I+65-58;
     1133     8184    4                  CALL INSERT(SPELLBUF,8,5,'X''',BINASC(J),BINASC(I),'''');
     1134     8185    4                  J = 13;
     1135     8186    4                  END;
     1136     8187    3            END; ELSE DO;
     1137     8188    3            CALL INSERT(SPELLBUF,0,8, '=Funkey ');
     1138     8189    3            NODE$ = ADDR(ASP_FUNKEY);
     1139     8190    3            END;
     1140     8191    3         IF NODE$~=ADDR(NIL) THEN DO;
     1141     8192    4            DO K=0 TO NODE$->P$NODE.NSUBNDS-1;
     1142     8193    4               NODE1$ = NODE$->P$NODE.SUBNDS$(K);
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:40   
     1143     8194    4               IF NODE1$->P$NODE.CODE=I
     1144     8195    4               THEN IF NODE1$->P$NODE.TYPE=5
     1145     8196    4                  THEN CALL PUTNAME(NODE1$->P$LIT);
     1146     8197    5                  ELSE DO;
     1147     8198    5                     CALL PUTNAME (NODE1$->P$NODE.SUBNDS$(0)->P$LIT);
     1148     8199    5                     IF NODE1$->P$NODE.NSUBNDS>1
     1149     8200    5                     THEN CALL PUTNAME (NODE1$->P$NODE.SUBNDS$(1)->P$LIT);
     1150     8201    5                     IF NODE1$->P$NODE.NSUBNDS>2
     1151     8202    5                     THEN CALL PUTNAME (NODE1$->P$NODE.SUBNDS$(2)->P$LIT);
     1152     8203    5                     END;
     1153     8204    4               END;
     1154     8205    3            END;
     1155     8206    2         FPT_INTRO.BUF_ = VECTOR(SUBSTR(SPELLBUF,0,J));
     1156     8207    2         CALL M$WRITE (FPT_INTRO);
     1157     8208    2         RETURN;
     1158     8209    2   END SPELL;
     1159     8210    1   PUTNAME: PROC (P$LIT);
     1160     8211        %P$LIT (STCLASS=PARAM);
     1161     8264
     1162     8265    3         IF J>8 THEN DO;
     1163     8266    3            CALL INSERT(SPELLBUF,J,4,' or ');
     1164     8267    3            J = J+4;
     1165     8268    3            END;
     1166     8269    3         IF P$LIT.ABREV=0 OR P$LIT.ABREV=P$LIT.COUNT THEN DO;
     1167     8270    3            CALL INSERT (SPELLBUF,J,32,SUBSTR(P$LIT.TEXT,0,P$LIT.COUNT));
     1168     8271    3            J = J+P$LIT.COUNT;
     1169     8272    3            END; ELSE DO;
     1170     8273    3            CALL INSERT (SPELLBUF,J,32,SUBSTR(P$LIT.TEXT,0,P$LIT.ABREV),'/',
     1171     8274    3              SUBSTR(P$LIT.TEXT,P$LIT.ABREV,P$LIT.COUNT-P$LIT.ABREV));
     1172     8275    3            J = J+P$LIT.COUNT+1;
     1173     8276    3            END;
     1174     8277    2   END PUTNAME;
     1175     8278    1   END VC$IMP;

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:41   
--  Include file information  --

   XUR_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   KV$INPFNC.:E05TOU  is referenced.
   KV$PRM.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   XU_SUBS_C.:E05TOU  is referenced.
   XU_PERR_C.:E05TOU  is referenced.
   UM_ERRORS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   U$JIT_C.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VC_PERR_C.:E05TOU  is referenced.
   VC_EQUS.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VC$IMP.

   Procedure VC$IMP requires 1814 words for executable code.
   Procedure VC$IMP requires 366 words of local(AUTO) storage.

    No errors detected in file VCS$IMP.:E05TSI    .

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:42   

 Object Unit name= VC$IMP                                     File name= VCS$IMP.:E05TOU
 UTS= JUL 30 '97 07:04:33.72 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none   787   1423  VC$IMP
    2  RoData even  UTS     58     72  VC$IMP
    3   DCB   even  none     0      0  M$LO
    4   DCB   even  none     0      0  M$DO
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  F$IMP
    7   Proc  even  none  1814   3426  VC$IMP
    8  RoData even  none    39     47  VC$IMP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     7      0   yes            yes      Main       0  VC$IMP
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:43   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XTX$ADAPT
         yes           Std       2 XUR$CLOSE_DCBS
 yes     yes           Std       6 XUR$GETCMD
 yes     yes           Std       3 XUR$INIT
 yes     yes           Std       1 XUR$SETERRMSG
 yes     yes           Std       7 XUR$ERRMSG
 yes     yes           Std       2 XUR$ERRPTR
                       nStd      0 X66_MAUTO
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_MARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                B$JIT$
     COMMAND                               ASP_FUNKEY                            MNEMONIC
     M$LO                                  M$DO                                  M$SI
     F$IMP                                 B_VERSION                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID                                 ROSID
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:44   


        1        1        /*M*   VCS$IMP - IMP SOURCE FILE
        2        2                                                                                      */
        3        3        /*T***********************************************************/
        4        4        /*T*                                                         */
        5        5        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        6        6        /*T*                                                         */
        7        7        /*T***********************************************************/
        8        8        /*P*    NAME:   IMP
        9        9                AUTHOR: Ira C. Scharfglass
       10       10                DATE:   March/80  REWRITTEN FOR VDH APRIL/81   DFH
       11       11        *
       12       12                PURPOSE:  The purpose of IMP is to provide the user with a
       13       13                          command interface to the FEP user input function
       14       14                          generator.  Using the command interface, the user
       15       15                          specifies what input functions he would like
       16       16                          invoked as a result of depressing certain keys
       17       17                          on his keyboard.  IMP formats this information,
       18       18                          buffers it, and, after all user commands have
       19       19                          been entered, sends this information down to
       20       20                          the FEP.
       21       21        *
       22       22                DESCRIPTION:  A brief description of the overall processing
       23       23                              of IMP follows:
       24       24
       25       25                              1).  The output DCB, F$IMP is opened to either
       26       26                                   a file, if the user has specified an object
       27       27                                   unit FID, or to the terminal if no OU FID
       28       28                                   has been specified.  In order to get the
       29       29                                   information to the FEP, the writes are done
       30       30                                   transparently with a special VFC code, and
       31       31                                   with data in a very specialized format.  Please
       32       32                                   NOTE that in all probability, a PMME will be
       33       33                                   provided to to get the data down to the FEP,
       34       34                                   in a future CP-6 release.  This method will
       35       35                                   then be disabled.
       36       36                              2).  Buffer space is aquired.
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:45   
       37       37                              3).  The input DCB, M$SI, is opened and if it is a
       38       38                                   file of type 'OJ', it is an IMP OU.  The data
       39       39                                   in this file is already in the correct format
       40       40                                   and the internal routine DUMP_IMPFILE is called
       41       41                                   to send this data down to the FEP.
       42       42                              4).  The initial format information (VFC plus
       43       43                                   funny data) is placed into the beggining
       44       44                                   of record 1 of the buffer.
       45       45                              5).  If the user specified a command on the IMP
       46       46                                   invocation line, a flag is set to say this is
       47       47                                   a one command only, invocation.
       48       48                              6).  The following loop processes commands until
       49       49                                   an end of file occurrs, a null line is typed or
       50       50                                   the user keys in an END or QUIT command:
       51       51                                   A).  As each command is processed, pointers
       52       52                                        are kept to the beginning of the buffer
       53       53                                        for the current operation, as well as
       54       54                                        the current position within the buffer.
       55       55                                   B).  If this is a one time command, XUR$GETCMD
       56       56                                        is called to process this single
       57       57                                        command.  The altret is taken on error.
       58       58                                        Otherwise, XUR$GETCMND is called to
       59       59                                        process the next command read from M$SI,
       60       60                                        The altret is taken on error.
       61       61                                   C).  Depending on the value of the root node
       62       62                                        type, the propper command handler is called.
       63       63                              7).  Each record in the buffer is written out.
       64       64                              8).  We say Bye Bye IMP.
       65       65                                                                                      */
       66       66        /*X* DMC=YES,AIC=NO,PLM=6,IND=3,CTI=2,SDI=3,SQB=YES,DIN=0,ENI=3,CSI=0,THI=0   */
       67       67         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:46   
       68       68        VC$IMP: PROC MAIN;

     68  7 000000   000000 700200 xent  VC$IMP       TSX0  ! X66_MAUTO
         7 000001   000556 000000                    ZERO    366,0

       69       69         %SET LISTEXP='1'B;
       70       70        /*
       71       71               INCLUDES AND MACRO DEFINITIONS
       72       72                                                                                      */
       73       73         %INCLUDE VC_EQUS;
       74      224         %INCLUDE VC_PERR_C;
       75      240         %INCLUDE CP_6;
       76      321        %INCLUDE CP_6_SUBS;
       77      861         %INCLUDE U$JIT_C;
       78     1047         %INCLUDE XU_MACRO_C;
       79     4153         %INCLUDE UM_ERRORS_C;
       80     4187         %INCLUDE XU_PERR_C;
       81     4378        %INCLUDE XU_SUBS_C;
       82     4470         %INCLUDE XUH_MACRO_C;
       83     4554         %INCLUDE KV$PRM;
       84     4767         %INCLUDE KV$INPFNC;
       85     5326        /* */
       86     5327         %PARSE$OUT(NAME=IMP$BLK,STCLASS="BASED");
       87     5372         %PARSE$SYM(NAME=IMP$SYM,STCLASS="BASED");
       88     5410         %P$PCB(NAME=P_PCB,STCLASS="BASED");
       89     5611        %P$NODE(STCLASS=BASED);
       90     5705        %P$LIT(STCLASS=BASED);
       91     5758         %XUR_INIT(SYNTAX=YES,COMMANDS=YES,GOODCMD=YES,SPELLING=YES);
       92     5857         %XUH_PARAM (NAME=XUH_PARAM,
       93     5858         PROCNAME=VLP_IMP,
       94     5859         PROCACCT=SYS);
       95     5920         %VLP_NAME (FPTN=VLP_IMP,NAME='IMP',LEN=3,STCLASS=CONSTANT);
       96     5947         %VLP_ACCT (FPTN=SYS,ACCT=':SYS    ',STCLASS=CONSTANT);
       97     5960    1   DCL ERR_BUF CHAR(120);
       98     5961         %VLR_ERRMSG (FPTN=RESULTS_BUF,STCLASS=STATIC);
       99     5983         %FPT_ERRMSG (FPTN=ERRMSG_FPT,STCLASS=" ");
      100     6010         %FPT_ERRMSG (FPTN=ERRMSG_FPT_C,STCLASS=CONSTANT,
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:47   
      101     6011         CODE=XUH_PARAM.ERR,
      102     6012         RESULTS=RESULTS_BUF,
      103     6013         INCLCODE=NO,
      104     6014         OUTDCB1=M$DO);
      105     6041        %FPT_EXIT (FPTN=FPT_XIT);
      106     6056    1   DCL XUT$ADAPT ENTRY (2) ALTRET;
      107     6057        /* */
      108     6058         %FPT_WRITE(FPTN=FPT_INTRO,DCB=M$LO,BUF=IMP_HERE_MESS,STCLASS=STATIC);
      109     6089         %FPT_WRITE(FPTN=FPT_IMP,DCB=F$IMP,TRANS=YES,VFC=YES,
      110     6090         WAIT=YES,STCLASS=STATIC);
      111     6121         %FPT_READ(DCB=M$SI,WAIT=YES);
      112     6160         %FPT_PRECORD(DCB=M$SI,KEYS=NO,N=-1);
      113     6181        %FPT_TRMCTL (STCLASS=CONSTANT, FPTN=GTRMCTL, TRMCTL=OTRMCTL, DCB=M$SI);
      114     6208        %VLP_TRMCTL (FPTN=OTRMCTL);
      115     6248        %FPT_TRMCTL (STCLASS=CONSTANT, FPTN=SETFNCCTL, TRMCTL = FNCTRMCTL);
      116     6275        %VLP_TRMCTL (STCLASS=CONSTANT, FPTN=FNCTRMCTL, TRNUSRINPFNC=YES);
      117     6315    1   DCL OLD_FNCCTL BIT(2);
      118     6316         %FPT_OPEN(FPTN=OPEN_IMP_ME,ORG=TERMINAL,DCB=F$IMP,FUN=CREATE,STCLASS=STATIC,
      119     6317         ASN=DEVICE,RES='ME');
      120     6426         %FPT_OPEN(FPTN=OPEN_IMP_FILE,FUN=CREATE,DISP=NAMED,STCLASS=STATIC,
      121     6427         DCB=F$IMP,TYPE='OJ');
      122     6536         %FPT_CLOSE(FPTN=CLOSE_IMP_FILE,DISP=SAVE,DCB=F$IMP,RELG=YES,
      123     6537         STCLASS=STATIC);
      124     6579         %FPT_OPEN(FPTN=OPEN_SI,DCB=M$SI);
      125     6688         %FPT_OPEN(FPTN=OPEN_LO,DCB=M$LO,REASSIGN=YES);
      126     6797         %FPT_EXIT(STEPCC=2);
      127     6812         %B$TCB;
      128     6815         %B$ALT;
      129     6823         %F$DCB(DCBN=F$DCB);
      130     6880        /*
      131     6881               SYMREF AND DCBS
      132     6882                                                                                      */
      133     6883    1   DCL B$TCB$ PTR SYMREF;
      134     6884    1   DCL B$JIT$ PTR SYMREF;
      135     6885    1   DCL COMMAND UBIN(36) SYMREF; /* ROOT PARSE NODE                    */
      136     6886    1   DCL ASP_FUNKEY UBIN SYMREF;
      137     6887    1   DCL MNEMONIC UBIN SYMREF;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:48   
      138     6888    1   DCL TEMP SBIN WORD;
      139     6889    1   DCL DCB# UBIN WORD AUTO;
      140     6890    1   DCL M$LO DCB;
      141     6891    1   DCL M$DO DCB;
      142     6892    1   DCL M$SI DCB;
      143     6893    1   DCL F$IMP DCB;
      144     6894    1   DCL 1 ERRFID STATIC ALIGNED,
      145     6895    1          2 L UBIN BYTE INIT(14) CALIGNED,
      146     6896    1          2 C CHAR(31) INIT(':VCERRMSG.:SYS    ');
      147     6897        /*
      148     6898               ENTRY POINT DCLS
      149     6899                                                                                      */
      150     6900         %INCLUDE XUR_ENTRY;
      151     6932    1   DCL X$HELP ENTRY(1) ALTRET;
      152     6933        /*
      153     6934               BASED TEMPLATES
      154     6935                                                                                      */
      155     6936         /* TL TEMPLATE                        */
      156     6937        /*
      157     6938              DECLARE AND RELEASE IMP FUNCTION STRUCTURES,
      158     6939        */
      159     6940        /*          DECLARE INPUT FUNCTION              */
      160     6941         %KV$PRM_DCLINPFNC(NAME=DCLINPFNC,STCLASS="BASED(INPFNC$)");
      161     6984
      162     6985        /* The static version of this structure is used to store info about
      163     6986           the input function until space in the impbuf can be allocated */
      164     6987         %KV$PRM_DCLINPFNC(NAME=INPFNC_SAVE,STCLASS=STATIC);
      165     7030
      166     7031        /*  RELEASE INPUT FUNCTION TYPE   */
      167     7032         %KV$PRM_RLSINPFNC(NAME=RLSINPFNC,STCLASS="BASED(INPFNC$)");
      168     7062
      169     7063        /*
      170     7064        */
      171     7065         %KV$INPOPR(NAME=INPOPR,STCLASS="BASED(OPR_BUF$)");
      172     7091    1   DCL OPERATOR CHAR(OPR_BYTSIZ) HALIGNED BASED;
      173     7092         /* OPERATOR TEXT TEMPLATE             */
      174     7093    1   DCL OPER_TEXT CHAR(K) BASED;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:49   
      175     7094        /*
      176     7095               STATIC DATA
      177     7096                                                                                      */
      178     7097
      179     7098        /* The following static area (aligned) is used to package up INPOPRs */
      180     7099
      181     7100    1   DCL OPR_BUF CHAR(258) STATIC ALIGNED;
      182     7101    1   DCL OPR_BUF$ STATIC PTR INIT(ADDR(OPR_BUF));
      183     7102
      184     7103         /*  IMP COMMAND BUFFERING AREA - NOTE THAT A SLACK BYTE IS
      185     7104                IS PLACED IN AS FIRST BYTE - THIS IS DONE SO THAT THE DATA
      186     7105                FOLLOWING THE VFC WILL BE ON AN EVEN BYTE BOUNDRY          */
      187     7106    1   DCL 1 IMPBUF STATIC DALIGNED,
      188     7107    1          2 * UBIN BYTE INIT(BITBIN('777'O)) CALIGNED,
      189     7108    1          2 IMPVFC UBIN BYTE INIT(25/* IMP_VFC */) CALIGNED,
      190     7109    1          2 DATA (0:1023) CHAR(1) INIT(BITASC('777'O)*1024) CALIGNED,
      191     7110    1          2 BUFER REDEF DATA CHAR(1024) CALIGNED;
      192     7111    1   DCL TESTBUF(0:1025) /* FOR INITIAL READ TO DETERMINE */
      193     7112    1    UBIN BYTE CALIGNED; /* VFC# AND TRANS# */
      194     7113    1   DCL SPELLBUF REDEF TESTBUF CHAR(1026);
      195     7114
      196     7115    1   DCL CURR_BUF_SIZE SBIN WORD STATIC;
      197     7116    1   DCL 1 B_VERSION ALIGNED SYMREF,
      198     7117    1          2 COUNT UBIN BYTE UNAL,
      199     7118    1          2 TEXT CHAR(6);
      200     7119    1   DCL IMP_HERE_MESS STATIC CHAR(15) INIT('IMP            ');
      201     7120    1   DCL HERE_MESS CONSTANT CHAR(5) INIT(' here');
      202     7121    1   DCL SUB_BLOCKS UBIN BYTE STATIC INIT(2);
      203     7122         /* IMP PROMPT                         */
      204     7123    1   DCL IMP_PROMPT STATIC CHAR(0) INIT('->');
      205     7124    1   DCL IMP_PROMPT_ STATIC BIT(72) DALIGNED INIT(VECTOR(IMP_PROMPT));
      206     7125    1   DCL IBEX_PROMPT STATIC CHAR(0) INIT ('!');
      207     7126         /* MNEMONIC TABLE                     */
      208     7127    1   DCL MNEMONICS(0:33) STATIC UBIN(9) UNAL INIT (
      209     7128    1    0, /* NUL                                */
      210     7129    1    1, /* SOH                                */
      211     7130    1    2, /* STX                                */
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:50   
      212     7131    1    3, /* ETX                                */
      213     7132    1    4, /* EOT                                */
      214     7133    1    5, /* ENQ                                */
      215     7134    1    6, /* ACK                                */
      216     7135    1    7, /* BEL                                */
      217     7136    1    8, /* BS                                 */
      218     7137    1    9, /* HT                                 */
      219     7138    1    10, /* LF                                 */
      220     7139    1    11, /* VT                                 */
      221     7140    1    12, /* FF                                 */
      222     7141    1    13, /* CR                                 */
      223     7142    1    14, /* SO                                 */
      224     7143    1    15, /* SI                                 */
      225     7144    1    16, /* DLE                                */
      226     7145    1    17, /* DC1                                */
      227     7146    1    18, /* DC2                                */
      228     7147    1    19, /* DC3                                */
      229     7148    1    20, /* DC4                                */
      230     7149    1    21, /* NAK                                */
      231     7150    1    22, /* SYN                                */
      232     7151    1    23, /* ETB                                */
      233     7152    1    24, /* CAN                                */
      234     7153    1    25, /* EM                                 */
      235     7154    1    26, /* SUB                                */
      236     7155    1    27, /* ESC                                */
      237     7156    1    28, /* FS                                 */
      238     7157    1    29, /* GS                                 */
      239     7158    1    30, /* RS                                 */
      240     7159    1    31, /* US                                 */
      241     7160    1    32, /* SP                                 */
      242     7161    1    127/* DEL */);
      243     7162    1   DCL MNEMONICS_CHRS REDEF MNEMONICS CHAR(34);
      244     7163        %VLP_ERRCODE ( FPTN=ECODE, STCLASS=STATIC, FCG=VC );
      245     7208        %VLP_ERRCODE ( FPTN=SYS_CODE, STCLASS=STATIC, FCG='515'O, MID='10'O,
      246     7209         MON='1'B, ERR#=842 );
      247     7254        /*
      248     7255                   AUTO DATA
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:51   
      249     7256                                                                                      */
      250     7257    1   DCL FETCH_COMMANDS BIT(1) UNAL; /* INPUT LOOP CONTINUE FLAG           */
      251     7258         /* ASSTD. TEMPS                       */
      252     7259    1   DCL BAD_CMD BIT(1) UNAL;
      253     7260    1   DCL ERROR_POS SBIN; /* MARKER POSITION                    */
      254     7261    1   DCL I SBIN;
      255     7262    1   DCL J SBIN;
      256     7263    1   DCL K SBIN;
      257     7264    1   DCL NEXT_NODE SBIN; /* INDEX OF NEXT NODE IN SUBLK$       */
      258     7265    1   DCL NODE$ PTR; /* PTR TO CURRENT NODE IN TREE        */
      259     7266    1   DCL NODE1$ PTR; /* PTR TO CURRENT NODE IN TREE        */
      260     7267    1   DCL ONE_TIME_COMMAND BIT(1); /* FLAG TO INDICATE SINGLE COMMAND
      261     7268                                                  ON THE COMMAND LINE                 */
      262     7269    1   DCL OPER$ PTR; /* PTR TO NEXT SPOT IN BUFFER         */
      263     7270    1   DCL INPFNC$ PTR; /* PTR TO DCL OR RLS INPFNC STRUCT*/
      264     7271    1   DCL INPFNC_LEN UBIN HALF STATIC ALIGNED;
      265     7272    1   DCL 1 LENRDEF REDEF INPFNC_LEN ALIGNED,
      266     7273    1          2 BYT1 UBIN(10) UNAL,
      267     7274    1          2 BYT2 UBIN(8) UNAL;
      268     7275    1   DCL NOPS SBIN; /* NUMBER OF INPUT OPERATORS */
      269     7276    1   DCL OPTS_PRESENT_BITS(0:15) BIT(1) UNAL; /* OPERATOR PRESENCE BITS     */
      270     7277    1   DCL OPTIONS(0:15) REDEF OPTS_PRESENT_BITS UBIN(1) UNAL;
      271     7278    1   DCL TEXT$ PTR; /* POINTS TO TEXT IN INPOPR_TXT.T */
      272     7279    1   DCL P_PCB$ PTR;
      273     7280    1   DCL ROOT$ PTR; /* PTR TO ROOT NODE IN TREE           */
      274     7281        %VLP_ERRCODE ( FPTN = ERR_CODE, STCLASS="REDEF ROOT$");
              7281            /* ERROR CODE FROM XUR$GETCMD         */
      275     7326    1   DCL SPACE_NEEDED SBIN; /* #BYTES NEEDED TO HOLD AN ADD OPERATION */
      276     7327    1   DCL OPR_BYTSIZ UBIN WORD;
      277     7328         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:52   
      278     7329        /*
      279     7330          CALL XUR$INIT TO GET INITIALIZED AND TO AQUIRE A PTR TO THE PCB
      280     7331                                                                            */
      281     7332    1         P_PCB$ = ADDR(NIL);

   7332  7 000002   000001 236000 xsym               LDQ     B_VECTNIL+1
         7 000003   200517 756100                    STQ     P_PCB$,,AUTO

      282     7333    1         SUBSTR(IMP_HERE_MESS,4,B_VERSION.COUNT) =

   7333  7 000004   000000 236000 xsym               LDQ     B_VERSION
         7 000005   000033 772000                    QRL     27
         7 000006   000000 620006                    EAX0    0,QL
         7 000007   000000 236000 xsym               LDQ     B_VERSION
         7 000010   000033 772000                    QRL     27
         7 000011   000000 621006                    EAX1    0,QL
         7 000012   040040 100440                    MLR     fill='040'O
         7 000013   000000 200011 xsym               ADSC9   B_VERSION                cn=1,n=*X1
         7 000014   001376 000010 1                  ADSC9   IMP_HERE_MESS+1          cn=0,n=*X0

      283     7334    1           SUBSTR(B_VERSION.TEXT,0,B_VERSION.COUNT);
      284     7335    1         SUBSTR(IMP_HERE_MESS,4+B_VERSION.COUNT,5) = HERE_MESS;

   7335  7 000015   000000 236000 xsym               LDQ     B_VERSION
         7 000016   000033 772000                    QRL     27
         7 000017   040006 100400                    MLR     fill='040'O
         7 000020   000062 000005 2                  ADSC9   HERE_MESS                cn=0,n=5
         7 000021   001376 000005 1                  ADSC9   IMP_HERE_MESS+1,Q        cn=0,n=5

      285     7336    1         BAD_CMD = '0'B;

   7336  7 000022   200501 450100                    STZ     BAD_CMD,,AUTO

      286     7337         /*
      287     7338                 SET XUR ROUTINES WITH ERRFILE FID.
      288     7339              */
      289     7340    1         CALL XUR$INIT(XUR_INIT,P_PCB$);
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:53   

   7340  7 000023   200517 630500                    EPPR0   P_PCB$,,AUTO
         7 000024   200543 450500                    STP0    NODE$+2,,AUTO
         7 000025   000000 236000 8                  LDQ     0
         7 000026   200542 756100                    STQ     NODE$+1,,AUTO
         7 000027   200542 630500                    EPPR0   NODE$+1,,AUTO
         7 000030   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 000031   000000 701000 xent               TSX1    XUR$INIT
         7 000032   000000 011000                    NOP     0

      290     7341    1         CALL XUR$SETERRMSG(ERRFID);

   7341  7 000033   000001 630400 8                  EPPR0   1
         7 000034   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 000035   000000 701000 xent               TSX1    XUR$SETERRMSG
         7 000036   000000 011000                    NOP     0

      291     7342        /*
      292     7343           OPEN M$SI AND SEE IF THE INPUT FILE (IF THERE IS ONE) IS AN
      293     7344           IMP OUTPUT. IF M$SI IS CONSEC, WITH VFC# & TRANS# SET, AND
      294     7345           THE FIRST BYTE (VFC) IS '031'O, THEN WE SHOULD JUST BE
      295     7346           SENDING EACH RECORD DOWN TO THE FEP.
      296     7347        */
      297     7348    1         DCB# = DCBNUM(M$SI);

   7348  7 000037   000000 236007 xsym               LDQ     M$SI,DL
         7 000040   200076 756100                    STQ     DCB#,,AUTO

      298     7349    1         CALL M$OPEN(OPEN_SI) ALTRET(BAD_NEWS);

   7349  7 000041   000462 630400 1                  EPPR0   OPEN_SI
         7 000042   450000 713400                    CLIMB   alt,open
         7 000043   410400 401760                    pmme    nvectors=18
         7 000044   000453 702000 7                  TSX2    BAD_NEWS

      299     7350    1         DCB# = DCBNUM(F$IMP);

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:54   
   7350  7 000045   000000 236007 xsym               LDQ     F$IMP,DL
         7 000046   200076 756100                    STQ     DCB#,,AUTO

      300     7351        /*
      301     7352          OPEN F$IMP, THE DCB USED TO SEND THE DATA OUT TO THE FRONT END, AND
      302     7353          WRITE OUT THE IM HERE MESSAGE
      303     7354                                                                                      */
      304     7355    1         IF B$JIT$->B$JIT.PRFLAGS.OU THEN

   7355  7 000047   000000 470400 xsym               LDP0    B$JIT$
         7 000050   000030 236100                    LDQ     24,,PR0
         7 000051   100000 316003                    CANQ    32768,DU
         7 000052   000075 600000 7                  TZE     s:7365

      305     7356    2         DO;

      306     7357    2            IF DCBADDR(DCB#)->F$DCB.ASN# = 1

   7357  7 000053   000002 471400 8                  LDP1    2
         7 000054   100000 473500                    LDP3    0,,PR1
         7 000055   200076 720100                    LXL0    DCB#,,AUTO
         7 000056   300000 474510                    LDP4    0,X0,PR3
         7 000057   400032 236100                    LDQ     26,,PR4
         7 000060   777000 376007                    ANQ     -512,DL
         7 000061   001000 116007                    CMPQ    512,DL
         7 000062   000066 601000 7                  TNZ     s:7361

      307     7358    2            THEN
      308     7359    2               OPEN_IMP_FILE.V.ORG# = 1;

   7359  7 000063   001000 236007                    LDQ     512,DL
         7 000064   000400 552010 1                  STBQ    OPEN_IMP_FILE+38,'10'O
         7 000065   000070 710000 7                  TRA     s:7362

      309     7360    2            ELSE
      310     7361    2               OPEN_IMP_FILE.V.ORG# = 8;

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:55   
   7361  7 000066   010000 236007                    LDQ     4096,DL
         7 000067   000400 552010 1                  STBQ    OPEN_IMP_FILE+38,'10'O

      311     7362    2            CALL M$OPEN(OPEN_IMP_FILE) ALTRET(BAD_NEWS);

   7362  7 000070   000332 630400 1                  EPPR0   OPEN_IMP_FILE
         7 000071   450000 713400                    CLIMB   alt,open
         7 000072   410400 401760                    pmme    nvectors=18
         7 000073   000453 702000 7                  TSX2    BAD_NEWS

      312     7363    2            END;

   7363  7 000074   000101 710000 7                  TRA     s:7366

      313     7364    1         ELSE
      314     7365    1            CALL M$OPEN(OPEN_IMP_ME) ALTRET(BAD_NEWS);

   7365  7 000075   000240 630400 1                  EPPR0   OPEN_IMP_ME
         7 000076   450000 713400                    CLIMB   alt,open
         7 000077   410400 401760                    pmme    nvectors=18
         7 000100   000453 702000 7                  TSX2    BAD_NEWS

      315     7366    1         IF DCBADDR(DCBNUM(M$SI))->F$DCB.ORG# = 1 /* CONSEC */

   7366  7 000101   000000 236007 xsym               LDQ     M$SI,DL
         7 000102   000002 470400 8                  LDP0    2
         7 000103   000000 471500                    LDP1    0,,PR0
         7 000104   100000 473506                    LDP3    0,QL,PR1
         7 000105   300032 236100                    LDQ     26,,PR3
         7 000106   777000 376003                    ANQ     -512,DU
         7 000107   001000 116003                    CMPQ    512,DU
         7 000110   000154 601000 7                  TNZ     s:7381

      316     7367    2         THEN DO; /* READ ONE RECORD TO DETERMINE VFC & TRANS */

      317     7368    2            FPT_READ.BUF_ = VECTOR(TESTBUF);

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:56   
   7368  7 000111   000003 235000 8                  LDA     3
         7 000112   200542 452500                    STP2    NODE$+1,,AUTO
         7 000113   200542 236100                    LDQ     NODE$+1,,AUTO
         7 000114   000077 036003                    ADLQ    63,DU
         7 000115   000210 757000 1                  STAQ    FPT_READ+4

      318     7369    2            CALL M$READ(FPT_READ) ALTRET (BAD_NEWS);

   7369  7 000116   000204 630400 1                  EPPR0   FPT_READ
         7 000117   440000 713400                    CLIMB   alt,read
         7 000120   401400 401760                    pmme    nvectors=4
         7 000121   000453 702000 7                  TSX2    BAD_NEWS

      319     7370    2            CALL M$PRECORD(FPT_PRECORD); /* REPOSITION FILE */

   7370  7 000122   000222 630400 1                  EPPR0   FPT_PRECORD
         7 000123   040003 713400                    CLIMB   16387
         7 000124   401000 401760                    pmme    nvectors=3

      320     7371    2            IF DCBADDR(DCBNUM(M$SI))->F$DCB.DVBYTE.VFC# AND

   7371  7 000125   000000 236007 xsym               LDQ     M$SI,DL
         7 000126   000002 470400 8                  LDP0    2
         7 000127   000000 471500                    LDP1    0,,PR0
         7 000130   100000 473506                    LDP3    0,QL,PR1
         7 000131   300003 236100                    LDQ     3,,PR3
         7 000132   100000 316003                    CANQ    32768,DU
         7 000133   000154 600000 7                  TZE     s:7381
         7 000134   000000 236007 xsym               LDQ     M$SI,DL
         7 000135   100000 473506                    LDP3    0,QL,PR1
         7 000136   300003 236100                    LDQ     3,,PR3
         7 000137   020000 316003                    CANQ    8192,DU
         7 000140   000154 600000 7                  TZE     s:7381
         7 000141   200077 236100                    LDQ     TESTBUF,,AUTO
         7 000142   777000 376003                    ANQ     -512,DU
         7 000143   031000 116003                    CMPQ    12800,DU
         7 000144   000154 601000 7                  TNZ     s:7381
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:57   

      321     7372    2              DCBADDR(DCBNUM(M$SI))->F$DCB.DVBYTE.TRANS# AND
      322     7373    2              TESTBUF(0) = 25
      323     7374    3            THEN DO; /* WE ASSUME M$SI IS IMP OUTPUT TYPE ,

      324     7375                             DUMP TO FEP                         */
      325     7376    3               CALL DUMP_IMPFILE ALTRET(BAD_NEWS);

   7376  7 000145   002741 701000 7                  TSX1    DUMP_IMPFILE
         7 000146   000453 702000 7                  TSX2    BAD_NEWS

      326     7377    3               CALL XUR$CLOSE_DCBS;

   7377  7 000147   000002 631400 xsym               EPPR1   B_VECTNIL+2
         7 000150   000000 701000 xent               TSX1    XUR$CLOSE_DCBS
         7 000151   000000 011000                    NOP     0

      327     7378    3               CALL M$EXIT;

   7378  7 000152   000001 713400                    CLIMB   exit
         7 000153   000000 401760                    pmme    nvectors=0

      328     7379    3               END; /* DUMP TO FEP                        */

      329     7380    2            END;

      330     7381    1         CURR_BUF_SIZE = 0; /* INIT WITH VFC COUNTED IN SIZE */

   7381  7 000154   001374 450000 1                  STZ     CURR_BUF_SIZE

      331     7382        /*
      332     7383                                                                                      */
      333     7384    1         INPFNC$=ADDR(IMPBUF.BUFER);

   7384  7 000155   000004 236000 8                  LDQ     4
         7 000156   200513 756100                    STQ     INPFNC$,,AUTO

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:58   
      334     7385    1         INPFNC_LEN = 0;

   7385  7 000157   000000 220003                    LDX0    0,DU
         7 000160   001422 740000 1                  STX0    INPFNC_LEN

      335     7386        /*
      336     7387          CHECK TO SEE IF THE USER SPECIFIED A ONE TIME COMMAND ON THE
      337     7388          IMP INVOCATION LINE.  IF HE DID, IT WILL BE PRECEDED BY AN
      338     7389          OPEN PAREN.
      339     7390                                                                                      */
      340     7391    1         IF SUBSTR(B$JIT$->B$JIT.CCBUF,B$JIT$->B$JIT.CCDISP,1) = '(' THEN

   7391  7 000161   000000 470400 xsym               LDP0    B$JIT$
         7 000162   000032 236100                    LDQ     26,,PR0
         7 000163   000022 736000                    QLS     18
         7 000164   000022 732000                    QRS     18
         7 000165   040000 106506                    CMPC    fill='040'O
         7 000166   000033 000001                    ADSC9   27,Q,PR0                 cn=0,n=1
         7 000167   000005 000001 8                  ADSC9   5                        cn=0,n=1
         7 000170   000176 601000 7                  TNZ     s:7398

      341     7392    2         DO;

      342     7393    2            ONE_TIME_COMMAND='1'B;

   7393  7 000171   400000 236003                    LDQ     -131072,DU
         7 000172   200511 756100                    STQ     ONE_TIME_COMMAND,,AUTO

      343     7394    2            IMP_PROMPT_ = VECTOR ( IBEX_PROMPT );

   7394  7 000173   000006 237000 8                  LDAQ    6
         7 000174   001404 757000 1                  STAQ    IMP_PROMPT_

      344     7395    2            END;

   7395  7 000175   000217 710000 7                  TRA     s:7403

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:59   
      345     7396    1         ELSE
      346     7397    2         DO; /* NORMAL INVOCATION                  */

      347     7398    2            ONE_TIME_COMMAND='0'B;

   7398  7 000176   200511 450100                    STZ     ONE_TIME_COMMAND,,AUTO

      348     7399    2            IF DCBADDR(DCBNUM(M$SI))->F$DCB.DDEV.IC# THEN CALL M$GTRMCTL (GTRMCTL);

   7399  7 000177   000000 236007 xsym               LDQ     M$SI,DL
         7 000200   000002 471400 8                  LDP1    2
         7 000201   100000 473500                    LDP3    0,,PR1
         7 000202   300000 474506                    LDP4    0,QL,PR3
         7 000203   400004 236100                    LDQ     4,,PR4
         7 000204   100000 316007                    CANQ    32768,DL
         7 000205   000211 600000 7                  TZE     s:7400

   7399  7 000206   000036 630400 2                  EPPR0   GTRMCTL
         7 000207   160001 713400                    CLIMB   57345
         7 000210   401000 401760                    pmme    nvectors=3

      349     7400    2            CALL M$OPEN (OPEN_LO);

   7400  7 000211   000554 630400 1                  EPPR0   OPEN_LO
         7 000212   050000 713400                    CLIMB   open
         7 000213   410400 401760                    pmme    nvectors=18

      350     7401    2            CALL M$WRITE (FPT_INTRO);

   7401  7 000214   000154 630400 1                  EPPR0   FPT_INTRO
         7 000215   040001 713400                    CLIMB   write
         7 000216   401400 401760                    pmme    nvectors=4

      351     7402    2            END; /* NORMAL INVOCATION                  */

      352     7403    1         OLD_FNCCTL = OTRMCTL.TRNUSRINPFNC#;

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:60   
   7403  7 000217   000236 236000 1                  LDQ     OTRMCTL+2
         7 000220   000015 736000                    QLS     13
         7 000221   600000 376003                    ANQ     -65536,DU
         7 000222   200074 756100                    STQ     OLD_FNCCTL,,AUTO

      353     7404    1         FETCH_COMMANDS='1'B;

   7404  7 000223   400000 236003                    LDQ     -131072,DU
         7 000224   200500 756100                    STQ     FETCH_COMMANDS,,AUTO

      354     7405        /*
      355     7406          THE FOLLOWING LOOP READS IN COMMANDS ONE AT A TIME AND PROCESSES THEM.
      356     7407          EXIT OCCURS WHEN THE FETCH_COMMANDS FLAG IS TURNED OFF.  THIS IS CAUSED
      357     7408          BY EITHER AN ALTRET FROM THE XUR$GETCMD ROUTINE CAUSED BY SOMETHING
      358     7409          OTHER THAN THE PARSER OF BY THE USER TYPING AN END COMMAND.
      359     7410                                                                                      */
      360     7411    2         DO WHILE (FETCH_COMMANDS);

   7411  7 000225   200500 234100                    SZN     FETCH_COMMANDS,,AUTO
         7 000226   000406 605000 7                  TPL     s:7473

      361     7412        /*
      362     7413          CALL THE LIBRARY ROUTINE XUR$GETCMD TO READ A COMMAND THROUGH M$SI AND
      363     7414          CALL THE PARSER
      364     7415                                                                                      */
      365     7416        /*E* ERROR: VC-VC_E$SYNTAX-1
      366     7417             MESSAGE: Syntax error
      367     7418             MESSAGE1: An error in IMP command syntax has been detected above
      368     7419             MESSAGE2: The correct syntax is:
      369     7420                       A/DD (P/RIMARY_ESCAPE | SE/CONDARY_ESCAPE | SP/ECIAL_CHARACTER)
      370     7421                         [I/NTRODUCER=introducer] identifier {T=string [E/CHO,A/CKNOWLEDGE]
      371     7422                            (I/MMEDIATE and or R/EAD) (IN/PUT_FUNCTION | B/UFFER |
      372     7423                            TY/PEAHEAD_BUFFER | WRITE_T/RANSPARENT |
      373     7424                            WRITE_V/IRTUAL | W/RITE ) } ........
      374     7425                      or
      375     7426              D/ELETE (A/LL | (( P/RIMARY_ESCAPE | SE/CONDARY_ESCAPE | SP/ECIAL_CHARACTER )
      376     7427                                       (A/LL | identifier )))
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:61   
      377     7428                                                                                      */
      378     7429    2            ECODE.ERR#=1/* SYNTAX ERROR */;

   7429  7 000227   001420 236000 1                  LDQ     ECODE
         7 000230   000010 376000 8                  ANQ     8
         7 000231   000010 276007                    ORQ     8,DL
         7 000232   001420 756000 1                  STQ     ECODE

      379     7430    2            ERROR_POS=-1;

   7430  7 000233   000001 335007                    LCA     1,DL
         7 000234   200502 755100                    STA     ERROR_POS,,AUTO

      380     7431    2            IF ONE_TIME_COMMAND THEN

   7431  7 000235   200511 234100                    SZN     ONE_TIME_COMMAND,,AUTO
         7 000236   000315 605000 7                  TPL     s:7446

      381     7432    3            DO; /* HANDLE A ONE TIME COMMAND IN CCBUF */

      382     7433    3               FETCH_COMMANDS= '0'B; /* THIS IS A ONE SHOT DEAL            */

   7433  7 000237   200500 450100                    STZ     FETCH_COMMANDS,,AUTO

      383     7434    3               I=B$JIT$->B$JIT.CCDISP+1; /* INDEX OF COMMAND IN CCBUF          */

   7434  7 000240   000000 470400 xsym               LDP0    B$JIT$
         7 000241   000032 236100                    LDQ     26,,PR0
         7 000242   000022 736000                    QLS     18
         7 000243   000022 732000                    QRS     18
         7 000244   000001 036007                    ADLQ    1,DL
         7 000245   200503 756100                    STQ     I,,AUTO

      384     7435    3               CALL INDEX1R(J,')',B$JIT$->B$JIT.CCBUF,B$JIT$->B$JIT.CCARS);

   7435  7 000246   000032 220100                    LDX0    26,,PR0
         7 000247   000032 236100                    LDQ     26,,PR0
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:62   
         7 000250   000022 732000                    QRS     18
         7 000251   000000 125540                    SCMR    mask='000'O
         7 000252   000033 000010                    ADSC9   27,,PR0                  cn=0,n=*X0
         7 000253   000011 000001 8                  ADSC9   9                        cn=0,n=1
         7 000254   200504 000100                    ARG     J,,AUTO
         7 000255   000260 606400 7                  TTN     s:7436
         7 000256   200504 054100                    AOS     J,,AUTO
         7 000257   200504 156100                    SSQ     J,,AUTO

      385     7436    3               IF J < I THEN

   7436  7 000260   200504 236100                    LDQ     J,,AUTO
         7 000261   200503 116100                    CMPQ    I,,AUTO
         7 000262   000270 605000 7                  TPL     s:7439

      386     7437    3                  J=B$JIT$->B$JIT.CCARS - I; /* SIZE OF COMMAND              */

   7437  7 000263   000032 236100                    LDQ     26,,PR0
         7 000264   000022 732000                    QRS     18
         7 000265   200503 136100                    SBLQ    I,,AUTO
         7 000266   200504 756100                    STQ     J,,AUTO
         7 000267   000272 710000 7                  TRA     s:7440

      387     7438    3               ELSE
      388     7439    3                  J = J - I;

   7439  7 000270   200503 136100                    SBLQ    I,,AUTO
         7 000271   200504 756100                    STQ     J,,AUTO

      389     7440    3               CALL XUR$GETCMD(COMMAND,ROOT$,IMP_PROMPT_,

   7440  7 000272   200504 631500                    EPPR1   J,,AUTO
         7 000273   200546 451500                    STP1    NODE$+5,,AUTO
         7 000274   200503 236100                    LDQ     I,,AUTO
         7 000275   000020 736000                    QLS     16
         7 000276   000033 036003                    ADLQ    27,DU
         7 000277   000000 036000 xsym               ADLQ    B$JIT$
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:63   
         7 000300   000012 235000 8                  LDA     10
         7 000301   200544 757100                    STAQ    NODE$+3,,AUTO
         7 000302   200520 633500                    EPPR3   ROOT$,,AUTO
         7 000303   200543 453500                    STP3    NODE$+2,,AUTO
         7 000304   000013 236000 8                  LDQ     11
         7 000305   200542 756100                    STQ     NODE$+1,,AUTO
         7 000306   200542 630500                    EPPR0   NODE$+1,,AUTO
         7 000307   000023 631400 xsym               EPPR1   B_VECTNIL+19
         7 000310   000000 701000 xent               TSX1    XUR$GETCMD
         7 000311   000377 702000 7                  TSX2    PARSE_ERROR

      390     7441    3                 SUBSTR(B$JIT$->B$JIT.CCBUF,I,J),J) ALTRET(PARSE_ERROR);
      391     7442    3               ECODE.ERR#=0;

   7442  7 000312   000010 236000 8                  LDQ     8
         7 000313   001420 356000 1                  ANSQ    ECODE

      392     7443    3               END; /* HANDLE A ONE TIME COMMAND          */

   7443  7 000314   000344 710000 7                  TRA     s:7456

      393     7444    2            ELSE
      394     7445    3            DO; /* NORMAL COMMAND READ                */

      395     7446    4               IF OTRMCTL.TRNUSRINPFNC#~='01'B THEN DO;

   7446  7 000315   000236 236000 1                  LDQ     OTRMCTL+2
         7 000316   000030 376003                    ANQ     24,DU
         7 000317   000010 116003                    CMPQ    8,DU
         7 000320   000330 600000 7                  TZE     s:7450

      396     7447    4                  CALL M$STRMCTL (SETFNCCTL);

   7447  7 000321   000046 630400 2                  EPPR0   SETFNCCTL
         7 000322   160000 713400                    CLIMB   57344
         7 000323   401000 401760                    pmme    nvectors=3

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:64   
      397     7448    4                  OTRMCTL.TRNUSRINPFNC# = '1'B;

   7448  7 000324   000236 236000 1                  LDQ     OTRMCTL+2
         7 000325   000014 376000 8                  ANQ     12
         7 000326   000020 276003                    ORQ     16,DU
         7 000327   000236 756000 1                  STQ     OTRMCTL+2

      398     7449    4                  END;

      399     7450    3               CALL XUR$GETCMD(COMMAND,ROOT$,IMP_PROMPT_) ALTRET(PARSE_ERROR);

   7450  7 000330   000012 236000 8                  LDQ     10
         7 000331   200544 756100                    STQ     NODE$+3,,AUTO
         7 000332   200520 630500                    EPPR0   ROOT$,,AUTO
         7 000333   200543 450500                    STP0    NODE$+2,,AUTO
         7 000334   000013 236000 8                  LDQ     11
         7 000335   200542 756100                    STQ     NODE$+1,,AUTO
         7 000336   200542 630500                    EPPR0   NODE$+1,,AUTO
         7 000337   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 000340   000000 701000 xent               TSX1    XUR$GETCMD
         7 000341   000377 702000 7                  TSX2    PARSE_ERROR

      400     7451    3               ECODE.ERR#=0;

   7451  7 000342   000010 236000 8                  LDQ     8
         7 000343   001420 356000 1                  ANSQ    ECODE

      401     7452    3               END; /* NORMAL COMMAND READ                */

      402     7453        /*
      403     7454          SEPERATE OUT THE INDIVIDUAL CASES, BASED ON THE ROOT NODE
      404     7455                                                                                      */
      405     7456    2            IF ROOT$ ~= ADDR(NIL) THEN

   7456  7 000344   200520 236100                    LDQ     ROOT$,,AUTO
         7 000345   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 000346   000377 600000 7                  TZE     PARSE_ERROR
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:65   

      406     7457    3            DO CASE(ROOT$->IMP$BLK.CODE);

   7457  7 000347   200520 470500                    LDP0    ROOT$,,AUTO
         7 000350   000000 720100                    LXL0    0,,PR0
         7 000351   000011 100003                    CMPX0   9,DU
         7 000352   000354 602010 7                  TNC     s:7457+5,X0
         7 000353   000377 710000 7                  TRA     PARSE_ERROR
         7 000354   000377 710000 7                  TRA     PARSE_ERROR
         7 000355   000370 710000 7                  TRA     s:7461
         7 000356   000365 710000 7                  TRA     s:7459
         7 000357   000373 710000 7                  TRA     s:7463
         7 000360   000373 710000 7                  TRA     s:7463
         7 000361   000377 710000 7                  TRA     PARSE_ERROR
         7 000362   000377 710000 7                  TRA     PARSE_ERROR
         7 000363   000377 710000 7                  TRA     PARSE_ERROR
         7 000364   000375 710000 7                  TRA     s:7465

      407     7458    3            CASE(2/* DELETE */);

      408     7459    3               CALL PROCESS_DELETE;

   7459  7 000365   000500 701000 7                  TSX1    PROCESS_DELETE
         7 000366   000000 011000                    NOP     0
         7 000367   000377 710000 7                  TRA     PARSE_ERROR

      409     7460    3            CASE(1/* ADD */);

      410     7461    3               CALL PROCESS_ADD ALTRET(BAD_NEWS);

   7461  7 000370   000736 701000 7                  TSX1    PROCESS_ADD
         7 000371   000453 702000 7                  TSX2    BAD_NEWS
         7 000372   000377 710000 7                  TRA     PARSE_ERROR

      411     7462    3            CASE(3/* END */,4/* QUIT */);

      412     7463    3               FETCH_COMMANDS='0'B;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:66   

   7463  7 000373   200500 450100                    STZ     FETCH_COMMANDS,,AUTO
         7 000374   000377 710000 7                  TRA     PARSE_ERROR

      413     7464    3            CASE(8/* SPELL */);

      414     7465    3               CALL SPELL;

   7465  7 000375   003006 701000 7                  TSX1    SPELL
         7 000376   000000 011000                    NOP     0

      415     7466    3             END; /* CASE                               */

      416     7467    2   PARSE_ERROR: IF ECODE.ERR# > 0 THEN

   7467  7 000377   001420 236000 1     PARSE_ERROR  LDQ     ECODE
         7 000400   377770 316007                    CANQ    131064,DL
         7 000401   000404 600000 7                  TZE     s:7469

      417     7468    2               CALL PROCESS_ERROR;

   7468  7 000402   002402 701000 7                  TSX1    PROCESS_ERROR
         7 000403   000000 011000                    NOP     0

      418     7469    2            END;

   7469  7 000404   200500 234100                    SZN     FETCH_COMMANDS,,AUTO
         7 000405   000227 604000 7                  TMI     s:7429

      419     7470        /*
      420     7471              WRITE AND COMMANDS BUFFERED OUT TO THE FEP
      421     7472        */
      422     7473    1         IF CURR_BUF_SIZE > 0 THEN /* MORE DATA THEN THE VFC */

   7473  7 000406   001374 235000 1                  LDA     CURR_BUF_SIZE
         7 000407   000423 604400 7                  TMOZ    s:7480

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:67   
      423     7474    2         DO;

      424     7475    2            FPT_IMP.BUF_.BOUND = CURR_BUF_SIZE ;

   7475  7 000410   001374 236000 1                  LDQ     CURR_BUF_SIZE
         7 000411   000020 736000                    QLS     16
         7 000412   000174 676000 1                  ERQ     FPT_IMP+4
         7 000413   000034 376000 xsym               ANQ     B_VECTNIL+28
         7 000414   000174 656000 1                  ERSQ    FPT_IMP+4

      425     7476         /*  BUMP UP BUF POINTER TO THE VFC */
      426     7477    2            FPT_IMP.BUF_.BUF$ = PINCRC(ADDR(IMPBUF),1);

   7477  7 000415   000015 236000 8                  LDQ     13
         7 000416   000175 756000 1                  STQ     FPT_IMP+5

      427     7478    2            CALL M$WRITE(FPT_IMP) ALTRET(BAD_NEWS);

   7478  7 000417   000170 630400 1                  EPPR0   FPT_IMP
         7 000420   440001 713400                    CLIMB   alt,write
         7 000421   401400 401760                    pmme    nvectors=4
         7 000422   000453 702000 7                  TSX2    BAD_NEWS

      428     7479    2            END;

      429     7480    2         IF OLD_FNCCTL~=OTRMCTL.TRNUSRINPFNC# THEN DO;

   7480  7 000423   000000 066500                    CMPB    filb='0'B
         7 000424   200074 000002                    BDSC    OLD_FNCCTL,,AUTO         by=0,bit=0,n=2
         7 000425   000236 240002 1                  BDSC    OTRMCTL+2                by=1,bit=4,n=2
         7 000426   000442 600000 7                  TZE     s:7485

      430     7481    2            OTRMCTL = FNCTRMCTL;

   7481  7 000427   000000 100400                    MLR     fill='000'O
         7 000430   000056 000020 2                  ADSC9   FNCTRMCTL                cn=0,n=16
         7 000431   000234 000020 1                  ADSC9   OTRMCTL                  cn=0,n=16
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:68   

      431     7482    2            OTRMCTL.TRNUSRINPFNC# = OLD_FNCCTL;

   7482  7 000432   200074 236100                    LDQ     OLD_FNCCTL,,AUTO
         7 000433   000015 772000                    QRL     13
         7 000434   000236 676000 1                  ERQ     OTRMCTL+2
         7 000435   000030 376003                    ANQ     24,DU
         7 000436   000236 656000 1                  ERSQ    OTRMCTL+2

      432     7483    2            CALL M$STRMCTL (GTRMCTL);

   7483  7 000437   000036 630400 2                  EPPR0   GTRMCTL
         7 000440   160000 713400                    CLIMB   57344
         7 000441   401000 401760                    pmme    nvectors=3

      433     7484    2            END;

      434     7485    1         CALL M$CLOSE (CLOSE_IMP_FILE);

   7485  7 000442   000424 630400 1                  EPPR0   CLOSE_IMP_FILE
         7 000443   050001 713400                    CLIMB   close
         7 000444   406000 401760                    pmme    nvectors=13

      435     7486    1         CALL XUR$CLOSE_DCBS;

   7486  7 000445   000002 631400 xsym               EPPR1   B_VECTNIL+2
         7 000446   000000 701000 xent               TSX1    XUR$CLOSE_DCBS
         7 000447   000000 011000                    NOP     0

      436     7487    1         CALL M$EXIT ( FPT_XIT );

   7487  7 000450   000146 630400 1                  EPPR0   FPT_XIT
         7 000451   000001 713400                    CLIMB   exit
         7 000452   400400 401760                    pmme    nvectors=2

      437     7488        /*
      438     7489          IF WE COME DOWN HERE SOME SORT OF MONITOR ERROR HAS OCCURRED.
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:69   
      439     7490          IT IS FATAL
      440     7491                                                                                      */
      441     7492    1   BAD_NEWS: ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;

   7492  7 000453   000000 470400 xsym  BAD_NEWS     LDP0    B$TCB$
         7 000454   000000 471500                    LDP1    0,,PR0
         7 000455   100102 236100                    LDQ     66,,PR1
         7 000456   200520 756100                    STQ     ROOT$,,AUTO

      442     7493    1         ERR_CODE.SEV = 7;

   7493  7 000457   000007 236007                    LDQ     7,DL
         7 000460   200520 256100                    ORSQ    ROOT$,,AUTO

      443     7494    1         CALL XUR$ERRMSG(ERR_CODE,DCB#);

   7494  7 000461   200076 631500                    EPPR1   DCB#,,AUTO
         7 000462   200543 451500                    STP1    NODE$+2,,AUTO
         7 000463   200520 633500                    EPPR3   ROOT$,,AUTO
         7 000464   200542 453500                    STP3    NODE$+1,,AUTO
         7 000465   200542 630500                    EPPR0   NODE$+1,,AUTO
         7 000466   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 000467   000000 701000 xent               TSX1    XUR$ERRMSG
         7 000470   000000 011000                    NOP     0

      444     7495    1         CALL XUR$CLOSE_DCBS;

   7495  7 000471   000002 631400 xsym               EPPR1   B_VECTNIL+2
         7 000472   000000 701000 xent               TSX1    XUR$CLOSE_DCBS
         7 000473   000000 011000                    NOP     0

      445     7496    1         CALL M$EXIT(FPT_EXIT);

   7496  7 000474   000646 630400 1                  EPPR0   FPT_EXIT
         7 000475   000001 713400                    CLIMB   exit
         7 000476   400400 401760                    pmme    nvectors=2
         7 000477   003425 710000 7                  TRA     s:8278
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:70   

      446     7497         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:71   
      447     7498        /*I*    NAME:     PROCESS_DELETE
      448     7499                PURPOSE:  Process the IMP DELETE command.
      449     7500                DESCRIPTION:   This procedure sets up the GV$VD0_RLSINPFNC
      450     7501                               (release input function) structure for the
      451     7502                               virtual device handler in the FEP. The structure
      452     7503                               defines the function key, key type and function
      453     7504                               type (primary or sec esc or special) affected.
      454     7505                                                                                      */
      455     7506         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:72   
      456     7507    1   PROCESS_DELETE: PROC;

   7507  7 000500   200524 741300       PROCESS_DEL* STX1  ! OPR_BYTSIZ+2,,AUTO

      457     7508    2         BAD_CMD = '0'B;

   7508  7 000501   200501 450100                    STZ     BAD_CMD,,AUTO

      458     7509    2         SPACE_NEEDED = SIZEC(RLSINPFNC);

   7509  7 000502   000004 235007                    LDA     4,DL
         7 000503   200521 755100                    STA     SPACE_NEEDED,,AUTO

      459     7510    2         CALL NEED_SPACE(SPACE_NEEDED);

   7510  7 000504   200521 630500                    EPPR0   SPACE_NEEDED,,AUTO
         7 000505   200527 450500                    STP0    INTRO_PTR$+2,,AUTO
         7 000506   002331 701000 7                  TSX1    NEED_SPACE
         7 000507   000000 011000                    NOP     0

      460     7511    2         INPFNC_LEN = SPACE_NEEDED;

   7511  7 000510   200521 720100                    LXL0    SPACE_NEEDED,,AUTO
         7 000511   001422 740000 1                  STX0    INPFNC_LEN

      461     7512    2         RLSINPFNC = '0'B; /* CLEAR STRUCTURE DATA */

   7512  7 000512   200513 470500                    LDP0    INPFNC$,,AUTO
         7 000513   000100 100400                    MLR     fill='000'O
         7 000514   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         7 000515   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4

      462     7513    2         RLSINPFNC.TYP = 10 /*RLSINPFNC STRUCTURE */;

   7513  7 000516   000100 101400                    MRL     fill='000'O
         7 000517   000014 000004 xsym               ADSC9   B_VECTNIL+12             cn=0,n=4
         7 000520   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:73   

      463     7514    2         RLSINPFNC.LNG = SIZEC(RLSINPFNC) - 2/* sizec of TL header */;

   7514  7 000521   000100 101400                    MRL     fill='000'O
         7 000522   000004 000004 xsym               ADSC9   B_VECTNIL+4              cn=0,n=4
         7 000523   000000 200001                    ADSC9   0,,PR0                   cn=1,n=1

      464     7515        /*             The length field does not include the type and length */
      465     7516        /*
      466     7517          IF THE NEXT SUB-BLOCK IS OF THE ALL VARIETY, THIS IS A DELETE ALL
      467     7518          OPERATION
      468     7519                                                                                      */
      469     7520    2         IF ROOT$->IMP$BLK.NSUBLKS=1 THEN

   7520  7 000524   200520 471500                    LDP1    ROOT$,,AUTO
         7 000525   100001 221100                    LDX1    1,,PR1
         7 000526   000001 101003                    CMPX1   1,DU
         7 000527   000567 601000 7                  TNZ     s:7536

      470     7521    3         DO; /* Either delete all, functionkey, or control function */

      471     7522    3            TEMP = ROOT$->IMP$BLK.SUBLK$(0)->IMP$SYM.CODE;

   7522  7 000530   100003 473500                    LDP3    3,,PR1
         7 000531   300000 236100                    LDQ     0,,PR3
         7 000532   777777 376007                    ANQ     -1,DL
         7 000533   200075 756100                    STQ     TEMP,,AUTO

      472     7523    4            IF TEMP = 512/* ALL */ THEN DO;

   7523  7 000534   001000 116007                    CMPQ    512,DL
         7 000535   000545 601000 7                  TNZ     s:7528

      473     7524    4               RLSINPFNC.ALLINPFNCTYP ='1'B; /* SET DELETE ALL BIT */

   7524  7 000536   003100 060400                    CSL     bolr='003'O
         7 000537   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:74   
         7 000540   000000 700001                    BDSC    0,,PR0                   by=3,bit=8,n=1

      474     7525    4               RLSINPFNC.ID_TKNTYP = 3 /* NONE SPECIFIED */;

   7525  7 000541   003100 061400                    CSR     bolr='003'O
         7 000542   000005 000044 xsym               BDSC    B_VECTNIL+5              by=0,bit=0,n=36
         7 000543   000000 610003                    BDSC    0,,PR0                   by=3,bit=1,n=3

      475     7526    4               END; /* DELETE ALL                         */

   7526  7 000544   000726 710000 7                  TRA     s:7581

      476     7527    4            ELSE DO; /* Function key or control function */

      477     7528    4               RLSINPFNC.INPFNCTYP = TEMP-2/* INTRO_CONVERSION# */;

   7528  7 000545   000002 136007                    SBLQ    2,DL
         7 000546   200542 756100                    STQ     NODE$+1,,AUTO
         7 000547   003100 061500                    CSR     bolr='003'O
         7 000550   200542 000044                    BDSC    NODE$+1,,AUTO            by=0,bit=0,n=36
         7 000551   000000 640004                    BDSC    0,,PR0                   by=3,bit=4,n=4

      478     7529    4               RLSINPFNC.ID_TKNTYP = TEMP-4;

   7529  7 000552   200075 236100                    LDQ     TEMP,,AUTO
         7 000553   000004 136007                    SBLQ    4,DL
         7 000554   200542 756100                    STQ     NODE$+1,,AUTO
         7 000555   003100 061500                    CSR     bolr='003'O
         7 000556   200542 000044                    BDSC    NODE$+1,,AUTO            by=0,bit=0,n=36
         7 000557   000000 610003                    BDSC    0,,PR0                   by=3,bit=1,n=3

      479     7530    4               RLSINPFNC.ID_TKN =

   7530  7 000560   200520 471500                    LDP1    ROOT$,,AUTO
         7 000561   100003 473500                    LDP3    3,,PR1
         7 000562   300003 474500                    LDP4    3,,PR3
         7 000563   000100 101500                    MRL     fill='000'O
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:75   
         7 000564   400000 400002                    ADSC9   0,,PR4                   cn=2,n=2
         7 000565   000000 400001                    ADSC9   0,,PR0                   cn=2,n=1

      480     7531    4                 ROOT$->IMP$BLK.SUBLK$(0)->IMP$BLK.SUBLK$(0)->IMP$SYM.CODE;
      481     7532    4               END; /* DEL CTR OR FUNCTION KEY */

      482     7533    3            END;

   7533  7 000566   000726 710000 7                  TRA     s:7581

      483     7534    2         ELSE
      484     7535    3         DO; /* SCAN DELETE                        */

      485     7536    3            NODE$=ROOT$->IMP$BLK.SUBLK$(0); /* TABLE TYPE NODE                 */

   7536  7 000567   100003 236100                    LDQ     3,,PR1
         7 000570   200507 756100                    STQ     NODE$,,AUTO

      486     7537    3            IF ROOT$->IMP$BLK.SUBLK$(1)->IMP$BLK.CODE=512/* ALL */ THEN

   7537  7 000571   100004 473500                    LDP3    4,,PR1
         7 000572   300000 721100                    LXL1    0,,PR3
         7 000573   001000 101003                    CMPX1   512,DU
         7 000574   000611 601000 7                  TNZ     s:7544

      487     7538    4            DO; /* DELETE ONE TABLE                   */

      488     7539    4               RLSINPFNC.INPFNCTYP = NODE$->IMP$BLK.CODE-2/* INTRO_CONVERSION# */;

   7539  7 000575   200507 474500                    LDP4    NODE$,,AUTO
         7 000576   400000 236100                    LDQ     0,,PR4
         7 000577   777777 376007                    ANQ     -1,DL
         7 000600   000002 136007                    SBLQ    2,DL
         7 000601   200542 756100                    STQ     NODE$+1,,AUTO
         7 000602   003100 061500                    CSR     bolr='003'O
         7 000603   200542 000044                    BDSC    NODE$+1,,AUTO            by=0,bit=0,n=36
         7 000604   000000 640004                    BDSC    0,,PR0                   by=3,bit=4,n=4
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:76   

      489     7540    4               RLSINPFNC.ID_TKNTYP = 3 /* NONE SPECIFIED */;

   7540  7 000605   003100 061400                    CSR     bolr='003'O
         7 000606   000005 000044 xsym               BDSC    B_VECTNIL+5              by=0,bit=0,n=36
         7 000607   000000 610003                    BDSC    0,,PR0                   by=3,bit=1,n=3

      490     7541    4               END; /* DELETE ONE TABLE                   */

   7541  7 000610   000726 710000 7                  TRA     s:7581

      491     7542    3            ELSE
      492     7543    4            DO; /* SCAN IDENTIFIER                    */

      493     7544    4               RLSINPFNC.INPFNCTYP = NODE$->IMP$BLK.CODE-2/* INTRO_CONVERSION# */;

   7544  7 000611   200507 474500                    LDP4    NODE$,,AUTO
         7 000612   400000 236100                    LDQ     0,,PR4
         7 000613   777777 376007                    ANQ     -1,DL
         7 000614   000002 136007                    SBLQ    2,DL
         7 000615   200542 756100                    STQ     NODE$+1,,AUTO
         7 000616   003100 061500                    CSR     bolr='003'O
         7 000617   200542 000044                    BDSC    NODE$+1,,AUTO            by=0,bit=0,n=36
         7 000620   000000 640004                    BDSC    0,,PR0                   by=3,bit=4,n=4

      494     7545    4               NODE$ = ROOT$->IMP$BLK.SUBLK$(1); /* IDENTIFIER BLK             */

   7545  7 000621   200520 471500                    LDP1    ROOT$,,AUTO
         7 000622   100004 236100                    LDQ     4,,PR1
         7 000623   200507 756100                    STQ     NODE$,,AUTO

      495     7546    4               NODE$ = NODE$->IMP$BLK.SUBLK$(0); /* THE IDENTIFIER ITSELF      */

   7546  7 000624   200507 473500                    LDP3    NODE$,,AUTO
         7 000625   300003 236100                    LDQ     3,,PR3
         7 000626   200507 756100                    STQ     NODE$,,AUTO

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:77   
      496     7547    4               IF NODE$ -> IMP$BLK.CODE = 1/* QSTRING */ OR NODE$->IMP$BLK.CODE =
              7547                        2/* SSTRING */ THEN

   7547  7 000627   200507 473500                    LDP3    NODE$,,AUTO
         7 000630   300000 721100                    LXL1    0,,PR3
         7 000631   000001 101003                    CMPX1   1,DU
         7 000632   000635 600000 7                  TZE     s:7549
         7 000633   000002 101003                    CMPX1   2,DU
         7 000634   000667 601000 7                  TNZ     s:7566

      497     7548    5               DO; /* SCAN QUOTE STRING                  */

      498     7549    5                  IF NODE$ -> IMP$SYM.COUNT ~= 1 THEN

   7549  7 000635   300004 236100                    LDQ     4,,PR3
         7 000636   777000 376003                    ANQ     -512,DU
         7 000637   001000 116003                    CMPQ    512,DU
         7 000640   000652 600000 7                  TZE     s:7561

      499     7550    6                  DO; /* ERROR #2                           */

      500     7551        /*E* ERROR: VC-VC_E$BADIDENT-1
      501     7552             MESSAGE: Invalid identifier string length
      502     7553             MESSAGE1: Identifiers must be exactly one character in length
      503     7554                                                                                      */
      504     7555    6                     ECODE.ERR#=2/* BAD IDENTIFIER */;

   7555  7 000641   001420 236000 1                  LDQ     ECODE
         7 000642   000010 376000 8                  ANQ     8
         7 000643   000020 276007                    ORQ     16,DL
         7 000644   001420 756000 1                  STQ     ECODE

      505     7556    6                     ERROR_POS=NODE$->IMP$SYM.CPOS;

   7556  7 000645   300002 235100                    LDA     2,,PR3
         7 000646   200502 755100                    STA     ERROR_POS,,AUTO

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:78   
      506     7557    6                     BAD_CMD = '1'B;

   7557  7 000647   400000 236003                    LDQ     -131072,DU
         7 000650   200501 756100                    STQ     BAD_CMD,,AUTO

      507     7558    6                     END; /* ERROR #2                           */

   7558  7 000651   000726 710000 7                  TRA     s:7581

      508     7559    5                  ELSE
      509     7560    6                  DO; /* ADD IDENTIFIER                     */

      510     7561    6                     RLSINPFNC.ID_TKN = ASCBIN(NODE$->IMP$SYM.TEXT);

   7561  7 000652   300004 236100                    LDQ     4,,PR3
         7 000653   000033 772000                    QRL     27
         7 000654   300004 236100                    LDQ     4,,PR3
         7 000655   000022 772000                    QRL     18
         7 000656   000777 376007                    ANQ     511,DL
         7 000657   200542 756100                    STQ     NODE$+1,,AUTO
         7 000660   000100 101500                    MRL     fill='000'O
         7 000661   200542 000004                    ADSC9   NODE$+1,,AUTO            cn=0,n=4
         7 000662   000000 400001                    ADSC9   0,,PR0                   cn=2,n=1

      511     7562    6                     RLSINPFNC.ID_TKNTYP = 0 /* CHARACTER */;

   7562  7 000663   003100 061400                    CSR     bolr='003'O
         7 000664   000002 000044 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=36
         7 000665   000000 610003                    BDSC    0,,PR0                   by=3,bit=1,n=3

      512     7563    6                     END; /* ADD IDENTIFIER                     */

      513     7564    5                  END; /* SCAN QUOTE STRING                  */

   7564  7 000666   000726 710000 7                  TRA     s:7581

      514     7565    4               ELSE
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:79   
      515     7566    4                  IF NODE$->IMP$BLK.CODE = 11/* MNEMONIC */ THEN

   7566  7 000667   000013 101003                    CMPX1   11,DU
         7 000670   000707 601000 7                  TNZ     s:7575

      516     7567    5                  DO; /* IDENTIFIER IS A MNEMONIC           */

      517     7568    5                     NODE$ = NODE$ -> IMP$BLK.SUBLK$(0); /* MNEMONIC NODE      */

   7568  7 000671   300003 236100                    LDQ     3,,PR3
         7 000672   200507 756100                    STQ     NODE$,,AUTO

      518     7569    5                     I = NODE$ -> IMP$BLK.CODE - 11/* MNEMONIC_DIFF# */;

   7569  7 000673   200507 473500                    LDP3    NODE$,,AUTO
         7 000674   300000 236100                    LDQ     0,,PR3
         7 000675   777777 376007                    ANQ     -1,DL
         7 000676   000013 136007                    SBLQ    11,DL
         7 000677   200503 756100                    STQ     I,,AUTO

      519     7570    5                     RLSINPFNC.ID_TKN = MNEMONICS(I);

   7570  7 000700   000100 100406                    MLR     fill='000'O
         7 000701   001407 000001 1                  ADSC9   MNEMONICS,Q              cn=0,n=1
         7 000702   000000 400001                    ADSC9   0,,PR0                   cn=2,n=1

      520     7571    5                     RLSINPFNC.ID_TKNTYP = 0 /* CHARACTER */;

   7571  7 000703   003100 061400                    CSR     bolr='003'O
         7 000704   000002 000044 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=36
         7 000705   000000 610003                    BDSC    0,,PR0                   by=3,bit=1,n=3

      521     7572    5                     END; /* IDENITIFIER IS A MNEMONIC          */

   7572  7 000706   000726 710000 7                  TRA     s:7581

      522     7573    4                  ELSE
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:80   
      523     7574    5                  DO; /* IDENTIFIER IS A HEX OR OCTAL STRING     */

      524     7575    5                     CALL CONVERT_STRING(NODE$,

   7575  7 000707   200513 236100                    LDQ     INPFNC$,,AUTO
         7 000710   400000 036007                    ADLQ    -131072,DL
         7 000711   200553 756100                    STQ     NODE$+10,,AUTO
         7 000712   000016 236000 8                  LDQ     14
         7 000713   200531 756100                    STQ     @OUTBUF$+1,,AUTO
         7 000714   200553 634500                    EPPR4   NODE$+10,,AUTO
         7 000715   200530 454500                    STP4    @P$LIT+1,,AUTO
         7 000716   200507 635500                    EPPR5   NODE$,,AUTO
         7 000717   200527 455500                    STP5    INTRO_PTR$+2,,AUTO
         7 000720   002537 701000 7                  TSX1    CONVERT_STRING
         7 000721   000000 011000                    NOP     0

      525     7576    5                       ADDR(RLSINPFNC.ID_TKN),1);
      526     7577    5                     RLSINPFNC.ID_TKNTYP = 0 /* CHARACTER */;

   7577  7 000722   200513 470500                    LDP0    INPFNC$,,AUTO
         7 000723   003100 061400                    CSR     bolr='003'O
         7 000724   000002 000044 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=36
         7 000725   000000 610003                    BDSC    0,,PR0                   by=3,bit=1,n=3

      527     7578    5                     END; /* IDENTIFIER IS A HEX OR OCTAL STRING     */

      528     7579    4               END; /* SCAN IDENTIFIER                    */

      529     7580    3            END; /* SCAN DELETE                        */

      530     7581    2         IF ECODE.ERR# = 0 THEN /* BUMP UP INPUT FNC PTR */

   7581  7 000726   001420 236000 1                  LDQ     ECODE
         7 000727   377770 316007                    CANQ    131064,DL
         7 000730   000734 601000 7                  TNZ     s:7584

      531     7582    2            INPFNC$ = PINCRC(INPFNC$,SIZEC(RLSINPFNC) +
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:81   

   7582  7 000731   200513 236100                    LDQ     INPFNC$,,AUTO
         7 000732   000001 036003                    ADLQ    1,DU
         7 000733   200513 756100                    STQ     INPFNC$,,AUTO

      532     7583    2              MOD(SIZEC(RLSINPFNC),2)); /* INCR TO DBL BYT BOUNDRY */
      533     7584    2         RETURN;

   7584  7 000734   200524 221300                    LDX1  ! OPR_BYTSIZ+2,,AUTO
         7 000735   000001 702211                    TSX2  ! 1,X1

      534     7585    2   END PROCESS_DELETE;
      535     7586         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:82   
      536     7587        /*I*    NAME:    PROCESS_ADD
      537     7588                PURPOSE: Process the IMP ADD command.
      538     7589                DESCRIPTION:   First, we determine if an introducer is present,
      539     7590                               and if it is, we check it for validity.  If an
      540     7591                               introducer is present, its type and value are
      541     7592                               stored.  Next, we process the identifier, and
      542     7593                               check it for validity.  The input operators associated
      543     7594                               with this identifier are then added WITH THEIR TYPES.
      544     7595                               This info constitues the data used for the
      545     7596                               GV$VDO_DCLINPFNC (declare input function) structure
      546     7597                               used by the virtual device handler for adding input
      547     7598                               functions (done in GV$UIFT). This structure is
      548     7599                               followed by some number of GV$INPOPR_TXT structures.
      549     7600                               This is the fep structure used to define text
      550     7601                               operators. One of these structures is created for
      551     7602                               each innput operator ("T='...' attrs") specified
      552     7603                               by the IMP user. Note that the length field in the
      553     7604                               DCLINPFNC structure includes all the INPOPR_TXT
      554     7605                               structures that follow it and all the slack bytes
      555     7606                               required to make the structures start on even
      556     7607                               byte boundries.
      557     7608        */
      558     7609         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:83   
      559     7610    1   PROCESS_ADD: PROC ALTRET;

   7610  7 000736   200524 741300       PROCESS_ADD  STX1  ! OPR_BYTSIZ+2,,AUTO

      560     7611        /*
      561     7612           WE WILL START BY PROCESSING THE INTRODUCER AND IDENTIFIER IN
      562     7613           STATIC STORAGE. I DONT WANT TO ALLOCATE SPACE IN THE IMPBUF UNTIL
      563     7614           IT IS KNOWN HOW MUCH SPACE TOTAL IS NEEDED FOR THE COMMAND, AND
      564     7615           I WON'T KNOW THAT UNTIL THE OPERATORS ARE PROCESSED.
      565     7616        */
      566     7617
      567     7618    2   DCL INTRO_PTR$ PTR;
      568     7619    2   DCL TWO_CHAR CHAR(2) BASED(INTRO_PTR$) CALIGNED;
      569     7620    2   DCL ONE_CHAR CHAR(1) BASED(INTRO_PTR$) CALIGNED;
      570     7621    2         BAD_CMD = '0'B;

   7621  7 000737   200501 450100                    STZ     BAD_CMD,,AUTO

      571     7622    2         INPFNC_SAVE = '0'B; /* CLEAR DATA STRUCTURE */

   7622  7 000740   000000 100400                    MLR     fill='000'O
         7 000741   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         7 000742   000664 000011 1                  ADSC9   INPFNC_SAVE              cn=0,n=9

      572     7623    2         INPFNC_SAVE.TYP = 4 /* DCLINPFNC STRUCTURE */;

   7623  7 000743   004000 236003                    LDQ     2048,DU
         7 000744   000664 552040 1                  STBQ    INPFNC_SAVE,'40'O

      573     7624        /*      Default intro and identifier types to NONE                 */
      574     7625    2         INPFNC_SAVE.INT1_TKNTYP = 3 /* NONE SPECIFIED */;

   7625  7 000745   000665 236000 1                  LDQ     INPFNC_SAVE+1
         7 000746   000017 376000 8                  ANQ     15
         7 000747   000030 276007                    ORQ     24,DL
         7 000750   000665 756000 1                  STQ     INPFNC_SAVE+1

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:84   
      575     7626    2         INPFNC_SAVE.INT2_TKNTYP = 3 /* NONE SPECIFIED */;

   7626  7 000751   000665 236000 1                  LDQ     INPFNC_SAVE+1
         7 000752   000020 376000 8                  ANQ     16
         7 000753   000003 276007                    ORQ     3,DL
         7 000754   000665 756000 1                  STQ     INPFNC_SAVE+1

      576     7627    2         INPFNC_SAVE.ID_TKNTYP = 3 /* NONE SPECIFIED */;

   7627  7 000755   000666 236000 1                  LDQ     INPFNC_SAVE+2
         7 000756   000021 376000 8                  ANQ     17
         7 000757   060000 276003                    ORQ     24576,DU
         7 000760   000666 756000 1                  STQ     INPFNC_SAVE+2

      577     7628    2         NEXT_NODE=1; /* FIRST NODE                         */

   7628  7 000761   000001 235007                    LDA     1,DL
         7 000762   200506 755100                    STA     NEXT_NODE,,AUTO

      578     7629    2         SUB_BLOCKS = 2;

   7629  7 000763   002000 236003                    LDQ     1024,DU
         7 000764   001401 756000 1                  STQ     SUB_BLOCKS

      579     7630
      580     7631        /* Are there any introducers ? */
      581     7632
      582     7633    2         SUB_BLOCKS = 1;

   7633  7 000765   001000 236003                    LDQ     512,DU
         7 000766   001401 756000 1                  STQ     SUB_BLOCKS

      583     7634    2         INTRO_PTR$ = ADDR(INPFNC_SAVE.INT1_TKN);

   7634  7 000767   000022 236000 8                  LDQ     18
         7 000770   200525 756100                    STQ     INTRO_PTR$,,AUTO

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:85   
      584     7635
      585     7636    3         DO WHILE ROOT$->IMP$BLK.SUBLK$(NEXT_NODE)->IMP$BLK.CODE = 6/* INTRODUCER */;

   7636  7 000771   200520 470500                    LDP0    ROOT$,,AUTO
         7 000772   000003 471505                    LDP1    3,AL,PR0
         7 000773   100000 720100                    LXL0    0,,PR1
         7 000774   000006 100003                    CMPX0   6,DU
         7 000775   001205 601000 7                  TNZ     s:7679

      586     7637    3            NODE$ = ROOT$->IMP$BLK.SUBLK$(NEXT_NODE);

   7637  7 000776   200520 470500                    LDP0    ROOT$,,AUTO
         7 000777   200506 720100                    LXL0    NEXT_NODE,,AUTO
         7 001000   000003 236110                    LDQ     3,X0,PR0
         7 001001   200507 756100                    STQ     NODE$,,AUTO

      587     7638    3            NODE$ = NODE$ -> IMP$BLK.SUBLK$(0); /* PTR TO INTRDUCER1 CHR        */

   7638  7 001002   200507 471500                    LDP1    NODE$,,AUTO
         7 001003   100003 236100                    LDQ     3,,PR1
         7 001004   200507 756100                    STQ     NODE$,,AUTO

      588     7639    3            IF INPFNC_SAVE.INT2_TKNTYP~=3 /* NONE SPECIFIED */ THEN

   7639  7 001005   000665 236000 1                  LDQ     INPFNC_SAVE+1
         7 001006   000007 376007                    ANQ     7,DL
         7 001007   000003 116007                    CMPQ    3,DL
         7 001010   001055 601000 7                  TNZ     BAD_INTRO

      589     7640    3               GOTO BAD_INTRO;
      590     7641    3            INPFNC_SAVE.INT1_TKNTYP = 0 /* CHARACTER */;

   7641  7 001011   000017 236000 8                  LDQ     15
         7 001012   000665 356000 1                  ANSQ    INPFNC_SAVE+1

      591     7642    3            IF NEXT_NODE = 2 THEN

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:86   
   7642  7 001013   200506 235100                    LDA     NEXT_NODE,,AUTO
         7 001014   000002 115007                    CMPA    2,DL
         7 001015   001020 601000 7                  TNZ     s:7644

      592     7643    3               INPFNC_SAVE.INT2_TKNTYP = 0 /* CHARACTER */;

   7643  7 001016   000020 236000 8                  LDQ     16
         7 001017   000665 356000 1                  ANSQ    INPFNC_SAVE+1

      593     7644    4            DO CASE (NODE$->IMP$BLK.CODE);

   7644  7 001020   200507 471500                    LDP1    NODE$,,AUTO
         7 001021   100000 721100                    LXL1    0,,PR1
         7 001022   000016 101003                    CMPX1   14,DU
         7 001023   001025 602011 7                  TNC     s:7644+5,X1
         7 001024   001146 710000 7                  TRA     s:7671
         7 001025   001146 710000 7                  TRA     s:7671
         7 001026   001043 710000 7                  TRA     s:7646
         7 001027   001043 710000 7                  TRA     s:7646
         7 001030   001146 710000 7                  TRA     s:7671
         7 001031   001146 710000 7                  TRA     s:7671
         7 001032   001132 710000 7                  TRA     s:7667
         7 001033   001132 710000 7                  TRA     s:7667
         7 001034   001146 710000 7                  TRA     s:7671
         7 001035   001146 710000 7                  TRA     s:7671
         7 001036   001146 710000 7                  TRA     s:7671
         7 001037   001146 710000 7                  TRA     s:7671
         7 001040   001146 710000 7                  TRA     s:7671
         7 001041   001106 710000 7                  TRA     s:7663
         7 001042   001106 710000 7                  TRA     s:7663

      594     7645    4            CASE(1/* QSTRING */, 2/* SSTRING */);

      595     7646    4               IF NODE$ -> IMP$SYM.COUNT = 0

   7646  7 001043   100004 236100                    LDQ     4,,PR1
         7 001044   777000 316003                    CANQ    -512,DU
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:87   
         7 001045   001055 600000 7                  TZE     BAD_INTRO
         7 001046   000027 675000 xsym               ERA     B_VECTNIL+23
         7 001047   000004 035007                    ADLA    4,DL
         7 001050   200542 755100                    STA     NODE$+1,,AUTO
         7 001051   100004 236100                    LDQ     4,,PR1
         7 001052   000033 772000                    QRL     27
         7 001053   200542 116100                    CMPQ    NODE$+1,,AUTO
         7 001054   001067 604400 7                  TMOZ    s:7658

      596     7647    4                 OR NODE$ -> IMP$SYM.COUNT > 3 - NEXT_NODE THEN
      597     7648    5               DO ; /* ERROR #3                           */

      598     7649        /*E* ERROR: VC-VC_E$BADINTRO-1
      599     7650             MESSAGE: Invalid introducer string length
      600     7651             MESSAGE1: An introducer must be exactly one or two characters long
      601     7652                                                                                      */
      602     7653    5   BAD_INTRO:     ECODE.ERR#=3/* BAD INTRODUCER */;

   7653  7 001055   001420 236000 1     BAD_INTRO    LDQ     ECODE
         7 001056   000010 376000 8                  ANQ     8
         7 001057   000030 276007                    ORQ     24,DL
         7 001060   001420 756000 1                  STQ     ECODE

      603     7654    5                  BAD_CMD = '1'B;

   7654  7 001061   400000 236003                    LDQ     -131072,DU
         7 001062   200501 756100                    STQ     BAD_CMD,,AUTO

      604     7655    5                  ERROR_POS=NODE$->IMP$SYM.CPOS;

   7655  7 001063   200507 471500                    LDP1    NODE$,,AUTO
         7 001064   100002 235100                    LDA     2,,PR1
         7 001065   200502 755100                    STA     ERROR_POS,,AUTO

      605     7656    5                  END; /* ERROR #3                           */

   7656  7 001066   001074 710000 7                  TRA     s:7659
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:88   

      606     7657    4               ELSE
      607     7658    4                  TWO_CHAR = NODE$->IMP$SYM.TEXT;

   7658  7 001067   000000 621006                    EAX1    0,QL
         7 001070   200525 473500                    LDP3    INTRO_PTR$,,AUTO
         7 001071   040100 100540                    MLR     fill='040'O
         7 001072   100004 200011                    ADSC9   4,,PR1                   cn=1,n=*X1
         7 001073   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2

      608     7659    4               IF NODE$->IMP$SYM.COUNT = 2 THEN

   7659  7 001074   200507 470500                    LDP0    NODE$,,AUTO
         7 001075   000004 236100                    LDQ     4,,PR0
         7 001076   777000 376003                    ANQ     -512,DU
         7 001077   002000 116003                    CMPQ    1024,DU
         7 001100   001103 601000 7                  TNZ     s:7661

      609     7660    4                  INPFNC_SAVE.INT2_TKNTYP = 0 /* CHARACTER */;

   7660  7 001101   000020 236000 8                  LDQ     16
         7 001102   000665 356000 1                  ANSQ    INPFNC_SAVE+1

      610     7661    4               INPFNC_SAVE.INT1_TKNTYP = 0 /* CHARACTER */;

   7661  7 001103   000017 236000 8                  LDQ     15
         7 001104   000665 356000 1                  ANSQ    INPFNC_SAVE+1
         7 001105   001170 710000 7                  TRA     s:7675

      611     7662    4            CASE(12/* OSTRING */, 13/* XSTRING */);

      612     7663    4               CALL CONVERT_STRING(NODE$,INTRO_PTR$,3-NEXT_NODE);

   7663  7 001106   000027 675000 xsym               ERA     B_VECTNIL+23
         7 001107   000004 035007                    ADLA    4,DL
         7 001110   200554 755100                    STA     NODE$+11,,AUTO
         7 001111   200554 633500                    EPPR3   NODE$+11,,AUTO
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:89   
         7 001112   200531 453500                    STP3    @OUTBUF$+1,,AUTO
         7 001113   200525 634500                    EPPR4   INTRO_PTR$,,AUTO
         7 001114   200530 454500                    STP4    @P$LIT+1,,AUTO
         7 001115   200507 635500                    EPPR5   NODE$,,AUTO
         7 001116   200527 455500                    STP5    INTRO_PTR$+2,,AUTO
         7 001117   002537 701000 7                  TSX1    CONVERT_STRING
         7 001120   000000 011000                    NOP     0

      613     7664    4               IF NODE$->IMP$BLK.SUBLK$(0)->IMP$SYM.COUNT > 3 THEN

   7664  7 001121   200507 470500                    LDP0    NODE$,,AUTO
         7 001122   000003 471500                    LDP1    3,,PR0
         7 001123   100004 236100                    LDQ     4,,PR1
         7 001124   777000 376003                    ANQ     -512,DU
         7 001125   004000 116003                    CMPQ    2048,DU
         7 001126   001170 602000 7                  TNC     s:7675

      614     7665    4                  INPFNC_SAVE.INT2_TKNTYP = 0 /* CHARACTER */;

   7665  7 001127   000020 236000 8                  LDQ     16
         7 001130   000665 356000 1                  ANSQ    INPFNC_SAVE+1
         7 001131   001170 710000 7                  TRA     s:7675

      615     7666    4            CASE(5 /* CONTROL CHAR */, 6 /* FUNCTION KEY */);

      616     7667    4               INPFNC_SAVE.INT1_TKNTYP = NODE$->IMP$BLK.CODE-4;

   7667  7 001132   100000 236100                    LDQ     0,,PR1
         7 001133   777777 376007                    ANQ     -1,DL
         7 001134   000004 136007                    SBLQ    4,DL
         7 001135   000003 736000                    QLS     3
         7 001136   000665 676000 1                  ERQ     INPFNC_SAVE+1
         7 001137   000070 376007                    ANQ     56,DL
         7 001140   000665 656000 1                  ERSQ    INPFNC_SAVE+1

      617     7668    4               INPFNC_SAVE.INT1_TKN = NODE$->IMP$BLK.SUBLK$(0) ->

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:90   
   7668  7 001141   100003 473500                    LDP3    3,,PR1
         7 001142   300000 236100                    LDQ     0,,PR3
         7 001143   000033 736000                    QLS     27
         7 001144   000665 552040 1                  STBQ    INPFNC_SAVE+1,'40'O
         7 001145   001170 710000 7                  TRA     s:7675

      618     7669    4                 IMP$BLK.CODE;
      619     7670    4            CASE(ELSE); /* introducer is mnemonics */

      620     7671    4               NODE$ = NODE$ -> IMP$BLK.SUBLK$(0); /* PTR TO MNEMONIC ITSELF */

   7671  7 001146   100003 236100                    LDQ     3,,PR1
         7 001147   200507 756100                    STQ     NODE$,,AUTO

      621     7672    4               I = NODE$ -> IMP$BLK.CODE - 11/* MNEMONIC_DIFF# */;

   7672  7 001150   200507 471500                    LDP1    NODE$,,AUTO
         7 001151   100000 236100                    LDQ     0,,PR1
         7 001152   777777 376007                    ANQ     -1,DL
         7 001153   000013 136007                    SBLQ    11,DL
         7 001154   200503 756100                    STQ     I,,AUTO

      622     7673    4               ONE_CHAR = BINASC(MNEMONICS(I));

   7673  7 001155   000100 101406                    MRL     fill='000'O
         7 001156   001407 000001 1                  ADSC9   MNEMONICS,Q              cn=0,n=1
         7 001157   200542 000004                    ADSC9   NODE$+1,,AUTO            cn=0,n=4
         7 001160   200542 236100                    LDQ     NODE$+1,,AUTO
         7 001161   000033 736000                    QLS     27
         7 001162   000023 276000 8                  ORQ     19
         7 001163   200543 756100                    STQ     NODE$+2,,AUTO
         7 001164   200525 473500                    LDP3    INTRO_PTR$,,AUTO
         7 001165   040100 100500                    MLR     fill='040'O
         7 001166   200543 000004                    ADSC9   NODE$+2,,AUTO            cn=0,n=4
         7 001167   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1

      623     7674    4             END; /* CASE */
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:91   

      624     7675    3            NEXT_NODE = NEXT_NODE + 1; /* PTR TO INTRO2 */

   7675  7 001170   200506 054100                    AOS     NEXT_NODE,,AUTO

      625     7676    3            SUB_BLOCKS = SUB_BLOCKS + 1;

   7676  7 001171   001401 236000 1                  LDQ     SUB_BLOCKS
         7 001172   001000 036003                    ADLQ    512,DU
         7 001173   001401 552040 1                  STBQ    SUB_BLOCKS,'40'O

      626     7677    3            INTRO_PTR$ = PINCRC(INTRO_PTR$,1);

   7677  7 001174   200525 236100                    LDQ     INTRO_PTR$,,AUTO
         7 001175   200000 036007                    ADLQ    65536,DL
         7 001176   200525 756100                    STQ     INTRO_PTR$,,AUTO

      627     7678    3            END; /* PROCESS INTRODUCERS                */

   7678  7 001177   200520 470500                    LDP0    ROOT$,,AUTO
         7 001200   200506 720100                    LXL0    NEXT_NODE,,AUTO
         7 001201   000003 471510                    LDP1    3,X0,PR0
         7 001202   100000 721100                    LXL1    0,,PR1
         7 001203   000006 101003                    CMPX1   6,DU
         7 001204   000776 600000 7                  TZE     s:7637

      628     7679    2         IF (ROOT$ -> IMP$BLK.NSUBLKS > SUB_BLOCKS AND ECODE.ERR# = 0) OR

   7679  7 001205   000001 236100                    LDQ     1,,PR0
         7 001206   000022 772000                    QRL     18
         7 001207   200542 756100                    STQ     NODE$+1,,AUTO
         7 001210   001401 236000 1                  LDQ     SUB_BLOCKS
         7 001211   000033 772000                    QRL     27
         7 001212   200542 116100                    CMPQ    NODE$+1,,AUTO
         7 001213   001217 605000 7                  TPL     s:7679+10
         7 001214   001420 236000 1                  LDQ     ECODE
         7 001215   377770 316007                    CANQ    131064,DL
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:92   
         7 001216   001223 600000 7                  TZE     s:7682
         7 001217   000003 471500                    LDP1    3,,PR0
         7 001220   100000 720100                    LXL0    0,,PR1
         7 001221   000005 100003                    CMPX0   5,DU
         7 001222   002320 602000 7                  TNC     s:7943

      629     7680    2           ROOT$ -> IMP$BLK.SUBLK$(0) -> IMP$BLK.CODE >= 5 /* CONTROL CHAR */ THEN
      630     7681    3         DO; /* PROCESS IDENTIFIER AND OPERATORS   */

      631     7682    3            NODE$ = ROOT$ -> IMP$BLK.SUBLK$(NEXT_NODE) -> IMP$BLK.SUBLK$(0);

   7682  7 001223   200506 720100                    LXL0    NEXT_NODE,,AUTO
         7 001224   000003 471510                    LDP1    3,X0,PR0
         7 001225   100003 236100                    LDQ     3,,PR1
         7 001226   200507 756100                    STQ     NODE$,,AUTO

      632     7683    3            INPFNC_SAVE.INPFNCTYP = ROOT$ -> IMP$BLK.SUBLK$(0) ->IMP$BLK.CODE;

   7683  7 001227   000003 471500                    LDP1    3,,PR0
         7 001230   100000 236100                    LDQ     0,,PR1
         7 001231   000033 736000                    QLS     27
         7 001232   000666 676000 1                  ERQ     INPFNC_SAVE+2
         7 001233   017000 376003                    ANQ     7680,DU
         7 001234   000666 656000 1                  ERSQ    INPFNC_SAVE+2

      633     7684
      634     7685    4            DO CASE(INPFNC_SAVE.INPFNCTYP);

   7685  7 001235   000666 236000 1                  LDQ     INPFNC_SAVE+2
         7 001236   000033 772000                    QRL     27
         7 001237   000017 376007                    ANQ     15,DL
         7 001240   000007 116007                    CMPQ    7,DL
         7 001241   001243 602006 7                  TNC     s:7685+6,QL
         7 001242   001376 710000 7                  TRA     s:7730
         7 001243   001376 710000 7                  TRA     s:7730
         7 001244   001376 710000 7                  TRA     s:7730
         7 001245   001252 710000 7                  TRA     s:7690
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:93   
         7 001246   001252 710000 7                  TRA     s:7690
         7 001247   001252 710000 7                  TRA     s:7690
         7 001250   001352 710000 7                  TRA     s:7721
         7 001251   001352 710000 7                  TRA     s:7721

      635     7686
      636     7687    4            CASE(2/* PRIMARY_ESCAPE */,3/* SECONDARY_ESCAPE */,

      637     7688    4              4/* SPECIAL_CHARACTER */);
      638     7689
      639     7690    4               INPFNC_SAVE.INPFNCTYP = INPFNC_SAVE.INPFNCTYP-2/* INTRO_CONVERSION# */;

   7690  7 001252   000002 136007                    SBLQ    2,DL
         7 001253   000033 736000                    QLS     27
         7 001254   000666 676000 1                  ERQ     INPFNC_SAVE+2
         7 001255   017000 376003                    ANQ     7680,DU
         7 001256   000666 656000 1                  ERSQ    INPFNC_SAVE+2

      640     7691    4               IF NODE$ -> IMP$BLK.CODE = 1/* QSTRING */ OR NODE$ ->

   7691  7 001257   200507 471500                    LDP1    NODE$,,AUTO
         7 001260   100000 721100                    LXL1    0,,PR1
         7 001261   000001 101003                    CMPX1   1,DU
         7 001262   001265 600000 7                  TZE     s:7694
         7 001263   000002 101003                    CMPX1   2,DU
         7 001264   001314 601000 7                  TNZ     s:7706

      641     7692    4                 IMP$BLK.CODE = 2/* SSTRING */ THEN
      642     7693    5               DO; /* IDENTIFIER IS A QUOTE STRING       */

      643     7694    5                  IF NODE$ -> IMP$SYM.COUNT ~= 1 THEN

   7694  7 001265   100004 236100                    LDQ     4,,PR1
         7 001266   777000 376003                    ANQ     -512,DU
         7 001267   001000 116003                    CMPQ    512,DU
         7 001270   001302 600000 7                  TZE     s:7701

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:94   
      644     7695    6                  DO; /* ERROR #2                           */

      645     7696    6                     ECODE.ERR# = 2/* BAD IDENTIFIER */;

   7696  7 001271   001420 236000 1                  LDQ     ECODE
         7 001272   000010 376000 8                  ANQ     8
         7 001273   000020 276007                    ORQ     16,DL
         7 001274   001420 756000 1                  STQ     ECODE

      646     7697    6                     BAD_CMD = '1'B;

   7697  7 001275   400000 236003                    LDQ     -131072,DU
         7 001276   200501 756100                    STQ     BAD_CMD,,AUTO

      647     7698    6                     ERROR_POS=NODE$->IMP$SYM.CPOS;

   7698  7 001277   100002 235100                    LDA     2,,PR1
         7 001300   200502 755100                    STA     ERROR_POS,,AUTO

      648     7699    6                     END; /* ERROR #2                           */

   7699  7 001301   001376 710000 7                  TRA     s:7730

      649     7700    6                  ELSE DO;

      650     7701    6                     INPFNC_SAVE.ID_TKN = ASCBIN(NODE$ -> IMP$SYM.TEXT);

   7701  7 001302   100004 236100                    LDQ     4,,PR1
         7 001303   000033 772000                    QRL     27
         7 001304   100004 236100                    LDQ     4,,PR1
         7 001305   000022 772000                    QRL     18
         7 001306   000777 376007                    ANQ     511,DL
         7 001307   000011 736000                    QLS     9
         7 001310   000665 552010 1                  STBQ    INPFNC_SAVE+1,'10'O

      651     7702    6                     INPFNC_SAVE.ID_TKNTYP = 0 /* CHARACTER */;

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:95   
   7702  7 001311   000021 236000 8                  LDQ     17
         7 001312   000666 356000 1                  ANSQ    INPFNC_SAVE+2

      652     7703    6                     END;

      653     7704    5                  END; /* IDENTIFIER IS A QUOTE              */

   7704  7 001313   001376 710000 7                  TRA     s:7730

      654     7705    4               ELSE
      655     7706    4                  IF NODE$->IMP$BLK.CODE = 12/* OSTRING */ OR

   7706  7 001314   000014 101003                    CMPX1   12,DU
         7 001315   001320 600000 7                  TZE     s:7709
         7 001316   000015 101003                    CMPX1   13,DU
         7 001317   001335 601000 7                  TNZ     s:7714

      656     7707    4                    NODE$->IMP$BLK.CODE = 13/* XSTRING */ THEN
      657     7708    5                  DO; /* HEX OR OCTAL STRING                */

      658     7709    5                     CALL CONVERT_STRING(NODE$,ADDR(INPFNC_SAVE.ID_TKN),1);

   7709  7 001320   000024 236000 8                  LDQ     20
         7 001321   200555 756100                    STQ     NODE$+12,,AUTO
         7 001322   000016 236000 8                  LDQ     14
         7 001323   200531 756100                    STQ     @OUTBUF$+1,,AUTO
         7 001324   200555 633500                    EPPR3   NODE$+12,,AUTO
         7 001325   200530 453500                    STP3    @P$LIT+1,,AUTO
         7 001326   200507 634500                    EPPR4   NODE$,,AUTO
         7 001327   200527 454500                    STP4    INTRO_PTR$+2,,AUTO
         7 001330   002537 701000 7                  TSX1    CONVERT_STRING
         7 001331   000000 011000                    NOP     0

      659     7710    5                     INPFNC_SAVE.ID_TKNTYP = 0 /* CHARACTER */;

   7710  7 001332   000021 236000 8                  LDQ     17
         7 001333   000666 356000 1                  ANSQ    INPFNC_SAVE+2
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:96   

      660     7711    5                     END; /* HEX OR OCTAL STRING                */

   7711  7 001334   001376 710000 7                  TRA     s:7730

      661     7712    4                  ELSE
      662     7713    5                  DO; /* IDENTIFIER IS A MNEMONIC           */

      663     7714    5                     NODE$ = NODE$ -> IMP$BLK.SUBLK$(0); /* PTR TO MNEMONIC*/

   7714  7 001335   100003 236100                    LDQ     3,,PR1
         7 001336   200507 756100                    STQ     NODE$,,AUTO

      664     7715    5                     I = NODE$ -> IMP$BLK.CODE - 11/* MNEMONIC_DIFF# */;

   7715  7 001337   200507 471500                    LDP1    NODE$,,AUTO
         7 001340   100000 236100                    LDQ     0,,PR1
         7 001341   777777 376007                    ANQ     -1,DL
         7 001342   000013 136007                    SBLQ    11,DL
         7 001343   200503 756100                    STQ     I,,AUTO

      665     7716    5                     INPFNC_SAVE.ID_TKN = MNEMONICS(I);

   7716  7 001344   000000 100406                    MLR     fill='000'O
         7 001345   001407 000001 1                  ADSC9   MNEMONICS,Q              cn=0,n=1
         7 001346   000665 400001 1                  ADSC9   INPFNC_SAVE+1            cn=2,n=1

      666     7717    5                     INPFNC_SAVE.ID_TKNTYP = 0 /* CHARACTER */;

   7717  7 001347   000021 236000 8                  LDQ     17
         7 001350   000666 356000 1                  ANSQ    INPFNC_SAVE+2

      667     7718    5                     END; /* IDENTIFIER IS A MNEMONIC           */

   7718  7 001351   001376 710000 7                  TRA     s:7730

      668     7719        %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:97   
      669     7720    4            CASE(5 /* CONTROL CHAR */, 6 /* FUNCTION KEY */);

      670     7721    4               INPFNC_SAVE.INPFNCTYP = INPFNC_SAVE.INPFNCTYP-2/* INTRO_CONVERSION# */;

   7721  7 001352   000002 136007                    SBLQ    2,DL
         7 001353   000033 736000                    QLS     27
         7 001354   000666 676000 1                  ERQ     INPFNC_SAVE+2
         7 001355   017000 376003                    ANQ     7680,DU
         7 001356   000666 656000 1                  ERSQ    INPFNC_SAVE+2

      671     7722    4               INPFNC_SAVE.ID_TKN = ROOT$ -> IMP$BLK.SUBLK$(0) ->

   7722  7 001357   000003 471500                    LDP1    3,,PR0
         7 001360   100003 473500                    LDP3    3,,PR1
         7 001361   300000 236100                    LDQ     0,,PR3
         7 001362   000011 736000                    QLS     9
         7 001363   000665 552010 1                  STBQ    INPFNC_SAVE+1,'10'O

      672     7723    4                 IMP$BLK.SUBLK$(0) -> IMP$BLK.CODE;
      673     7724    4               INPFNC_SAVE.ID_TKNTYP = INPFNC_SAVE.INPFNCTYP-2;

   7724  7 001364   000666 236000 1                  LDQ     INPFNC_SAVE+2
         7 001365   000033 772000                    QRL     27
         7 001366   000017 376007                    ANQ     15,DL
         7 001367   000002 136007                    SBLQ    2,DL
         7 001370   000037 736000                    QLS     31
         7 001371   000666 676000 1                  ERQ     INPFNC_SAVE+2
         7 001372   160000 376003                    ANQ     57344,DU
         7 001373   000666 656000 1                  ERSQ    INPFNC_SAVE+2

      674     7725    4               NEXT_NODE = NEXT_NODE - 1; /* Text OPRs in this node */

   7725  7 001374   000001 336007                    LCQ     1,DL
         7 001375   200506 056100                    ASQ     NEXT_NODE,,AUTO

      675     7726
      676     7727    4             END; /* DO CASE(INPFNC.FNCTYP) */
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:98   

      677     7728
      678     7729
      679     7730    3            IF ECODE.ERR# = 0 THEN

   7730  7 001376   001420 236000 1                  LDQ     ECODE
         7 001377   377770 316007                    CANQ    131064,DL
         7 001400   002320 601000 7                  TNZ     s:7943

      680     7731    4            DO; /* PROCESS OPERATORS                  */

      681     7732    4               NEXT_NODE=NEXT_NODE+1; /* NODE NUMBER OF INPUT OPERATORS     */

   7732  7 001401   200506 054100                    AOS     NEXT_NODE,,AUTO

      682     7733    4               ROOT$ = ROOT$ -> IMP$BLK.SUBLK$(NEXT_NODE); /* PTR TO OPERATORS */

   7733  7 001402   200520 470500                    LDP0    ROOT$,,AUTO
         7 001403   200506 720100                    LXL0    NEXT_NODE,,AUTO
         7 001404   000003 236110                    LDQ     3,X0,PR0
         7 001405   200520 756100                    STQ     ROOT$,,AUTO

      683     7734    4               NOPS = ROOT$ -> IMP$BLK.NSUBLKS;

   7734  7 001406   200520 470500                    LDP0    ROOT$,,AUTO
         7 001407   000001 236100                    LDQ     1,,PR0
         7 001410   000022 772000                    QRL     18
         7 001411   200514 756100                    STQ     NOPS,,AUTO

      684     7735        /*
      685     7736          SCAN ALL THE INPUT OPERATORS TO DETERMINE HOW MAY WORDS OF STORAGE
      686     7737          WILL BE NEEDED IN THE OUTPUT BUFFER
      687     7738                                                                                      */
      688     7739        /*
      689     7740           INIT SPACE NEEDED BY MULT NUM OF INPUT OPERATORS TIMES THE
      690     7741           SIZE OF THE INPOPR STRUCTURE LESS TEXT FIELD WHICH WILL BE ADDED
      691     7742           TO THE SPACE NEEDED WHEN WE FIND OUT HOW MUCH TEXT THERE IS.
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:99   
      692     7743           Don't forget to add the bytes required to start structures on
      693     7744           an even byte boundry. (MOD(SIZEC(structure),2))
      694     7745        */
      695     7746    4               SPACE_NEEDED=SIZEC(DCLINPFNC) + NOPS*(SIZEC(INPOPR)+1) +

   7746  7 001412   000003 402007                    MPY     3,DL
         7 001413   000012 036007                    ADLQ    10,DL
         7 001414   200521 756100                    STQ     SPACE_NEEDED,,AUTO

      696     7747    4                 MOD(SIZEC(DCLINPFNC),2);
      697     7748    5               DO I=0 TO NOPS-1; /* SCAN ALL OPERATORS                 */

   7748  7 001415   200503 450100                    STZ     I,,AUTO
         7 001416   001513 710000 7                  TRA     s:7771+1

      698     7749    5                  NODE$ = ROOT$ -> IMP$BLK.SUBLK$(I); /* PTR TO OPERATOR PARTS */

   7749  7 001417   200520 470500                    LDP0    ROOT$,,AUTO
         7 001420   200503 720100                    LXL0    I,,AUTO
         7 001421   000003 236110                    LDQ     3,X0,PR0
         7 001422   200507 756100                    STQ     NODE$,,AUTO

      699     7750    5                  K=0; /* TOTAL OPERATOR BYTE COUNT          */

   7750  7 001423   200505 450100                    STZ     K,,AUTO

      700     7751    6                  DO J = 0 TO NODE$ -> IMP$BLK.NSUBLKS - 1; /* SCAN OPERATOR PARTS */

   7751  7 001424   200504 450100                    STZ     J,,AUTO
         7 001425   001473 710000 7                  TRA     s:7765+1

      701     7752    6                     NODE1$ = NODE$ -> IMP$BLK.SUBLK$(J); /* PTR TO THIS PART  */

   7752  7 001426   200507 470500                    LDP0    NODE$,,AUTO
         7 001427   200504 720100                    LXL0    J,,AUTO
         7 001430   000003 236110                    LDQ     3,X0,PR0
         7 001431   200510 756100                    STQ     NODE1$,,AUTO
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:100  

      702     7753    6                     IF NODE1$ -> IMP$SYM.CODE = 11/* MNEMONIC */ THEN

   7753  7 001432   200510 471500                    LDP1    NODE1$,,AUTO
         7 001433   100000 721100                    LXL1    0,,PR1
         7 001434   000013 101003                    CMPX1   11,DU
         7 001435   001440 601000 7                  TNZ     s:7756

      703     7754    6                        K = K +1;

   7754  7 001436   200505 054100                    AOS     K,,AUTO
         7 001437   001472 710000 7                  TRA     s:7765

      704     7755    6                     ELSE
      705     7756    6                        IF NODE1$ -> IMP$SYM.CODE = 1/* QSTRING */ OR

   7756  7 001440   000001 101003                    CMPX1   1,DU
         7 001441   001444 600000 7                  TZE     s:7758
         7 001442   000002 101003                    CMPX1   2,DU
         7 001443   001451 601000 7                  TNZ     s:7760

      706     7757    6                          NODE1$ -> IMP$SYM.CODE = 2/* SSTRING */ THEN
      707     7758    6                           K = K + NODE1$ -> IMP$SYM.COUNT;

   7758  7 001444   100004 236100                    LDQ     4,,PR1
         7 001445   000033 772000                    QRL     27
         7 001446   200505 036100                    ADLQ    K,,AUTO
         7 001447   200505 756100                    STQ     K,,AUTO
         7 001450   001472 710000 7                  TRA     s:7765

      708     7759    6                        ELSE
      709     7760    6                           IF NODE1$->IMP$SYM.CODE = 12/* OSTRING */ THEN

   7760  7 001451   000014 101003                    CMPX1   12,DU
         7 001452   001462 601000 7                  TNZ     s:7763

      710     7761    6                              K=K+(NODE1$->IMP$BLK.SUBLK$(0)->IMP$SYM.COUNT/3);
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:101  

   7761  7 001453   100003 473500                    LDP3    3,,PR1
         7 001454   300004 236100                    LDQ     4,,PR3
         7 001455   000033 772000                    QRL     27
         7 001456   000003 506007                    DIV     3,DL
         7 001457   200505 036100                    ADLQ    K,,AUTO
         7 001460   200505 756100                    STQ     K,,AUTO
         7 001461   001472 710000 7                  TRA     s:7765

      711     7762    6                           ELSE
      712     7763    6                              IF NODE1$->IMP$SYM.CODE = 13/* XSTRING */ THEN

   7763  7 001462   000015 101003                    CMPX1   13,DU
         7 001463   001472 601000 7                  TNZ     s:7765

      713     7764    6                                 K=K+(NODE1$->IMP$BLK.SUBLK$(0)->IMP$SYM.COUNT/2);

   7764  7 001464   100003 473500                    LDP3    3,,PR1
         7 001465   300004 236100                    LDQ     4,,PR3
         7 001466   000033 772000                    QRL     27
         7 001467   000001 772000                    QRL     1
         7 001470   200505 036100                    ADLQ    K,,AUTO
         7 001471   200505 756100                    STQ     K,,AUTO

      714     7765    6                     END; /* SCAN OPERATOR PARTS                */

   7765  7 001472   200504 054100                    AOS     J,,AUTO
         7 001473   200507 470500                    LDP0    NODE$,,AUTO
         7 001474   000001 236100                    LDQ     1,,PR0
         7 001475   000022 772000                    QRL     18
         7 001476   200504 116100                    CMPQ    J,,AUTO
         7 001477   001426 605400 7                  TPNZ    s:7752

      715     7766        /*    Ensure that the INPOPR.TEXT + the INPOPR_TXT ends up on
      716     7767              an even byte boundry (FEP restriction )                      */
      717     7768    5                  IF MOD(SIZEC(INPOPR)+1+K,2) ~= 0 THEN

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:102  
   7768  7 001500   200505 236100                    LDQ     K,,AUTO
         7 001501   000003 036007                    ADLQ    3,DL
         7 001502   000002 506007                    DIV     2,DL
         7 001503   000044 733000                    LRS     36
         7 001504   000000 116003                    CMPQ    0,DU
         7 001505   001507 600000 7                  TZE     s:7770

      718     7769    5                     K = K + 1;

   7769  7 001506   200505 054100                    AOS     K,,AUTO

      719     7770    5                  SPACE_NEEDED=SPACE_NEEDED+K;

   7770  7 001507   200521 236100                    LDQ     SPACE_NEEDED,,AUTO
         7 001510   200505 036100                    ADLQ    K,,AUTO
         7 001511   200521 756100                    STQ     SPACE_NEEDED,,AUTO

      720     7771    5                  END; /* SCAN ALL OPERATORS                 */

   7771  7 001512   200503 054100                    AOS     I,,AUTO
         7 001513   200503 236100                    LDQ     I,,AUTO
         7 001514   200514 116100                    CMPQ    NOPS,,AUTO
         7 001515   001417 604000 7                  TMI     s:7749

      721     7772    4               INPFNC_LEN = SPACE_NEEDED - 4/* sizec of TL header */;

   7772  7 001516   200521 720100                    LXL0    SPACE_NEEDED,,AUTO
         7 001517   777774 621010                    EAX1    -4,X0
         7 001520   001422 741000 1                  STX1    INPFNC_LEN

      722     7773         /* Length field doesn't include type and length fields */
      723     7774    4               INPFNC_SAVE.LNG.BYT2 = LENRDEF.BYT2;

   7774  7 001521   001422 236000 1                  LDQ     INPFNC_LEN
         7 001522   000022 772000                    QRL     18
         7 001523   000664 676000 1                  ERQ     INPFNC_SAVE
         7 001524   000377 376007                    ANQ     255,DL
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:103  
         7 001525   000664 656000 1                  ERSQ    INPFNC_SAVE

      724     7775    4               INPFNC_SAVE.LNG.BYT1 = LENRDEF.BYT1;

   7775  7 001526   001422 236000 1                  LDQ     INPFNC_LEN
         7 001527   000021 772000                    QRL     17
         7 001530   000664 552010 1                  STBQ    INPFNC_SAVE,'10'O

      725     7776
      726     7777    4               IF MOD(K,2) = 0 THEN

   7777  7 001531   200505 236100                    LDQ     K,,AUTO
         7 001532   000002 506007                    DIV     2,DL
         7 001533   000044 733000                    LRS     36
         7 001534   000000 116003                    CMPQ    0,DU
         7 001535   001537 601000 7                  TNZ     s:7779

      727     7778    4                  SPACE_NEEDED=SPACE_NEEDED+1;

   7778  7 001536   200521 054100                    AOS     SPACE_NEEDED,,AUTO

      728     7779    4               CALL NEED_SPACE(SPACE_NEEDED) ALTRET(NO_SPACE);

   7779  7 001537   200521 630500                    EPPR0   SPACE_NEEDED,,AUTO
         7 001540   200527 450500                    STP0    INTRO_PTR$+2,,AUTO
         7 001541   002331 701000 7                  TSX1    NEED_SPACE
         7 001542   002327 702000 7                  TSX2    NO_SPACE

      729     7780    4               IF ECODE.ERR# > 0 THEN

   7780  7 001543   001420 236000 1                  LDQ     ECODE
         7 001544   377770 316007                    CANQ    131064,DL
         7 001545   001550 600000 7                  TZE     s:7785

      730     7781    4                  RETURN;

   7781  7 001546   200524 221300                    LDX1  ! OPR_BYTSIZ+2,,AUTO
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:104  
         7 001547   000001 702211                    TSX2  ! 1,X1

      731     7782        /*
      732     7783                      MEMORY IS NOW ALLOCATED FOR THIS ADD COMMAND
      733     7784        */
      734     7785    4               DCLINPFNC = INPFNC_SAVE;

   7785  7 001550   200513 470500                    LDP0    INPFNC$,,AUTO
         7 001551   000100 100400                    MLR     fill='000'O
         7 001552   000664 000011 1                  ADSC9   INPFNC_SAVE              cn=0,n=9
         7 001553   000000 000011                    ADSC9   0,,PR0                   cn=0,n=9

      735     7786        /*
      736     7787          NEXT SCAN THE OPERATORS AND ACTUALLY PLACE THE INPUT OPERATORS INTO THE
      737     7788          OUTPUT BUFFER
      738     7789                                                                                      */
      739     7790    4               OPER$ = PINCRC(INPFNC$,SIZEC(DCLINPFNC) +

   7790  7 001554   200513 236100                    LDQ     INPFNC$,,AUTO
         7 001555   000025 036000 8                  ADLQ    21
         7 001556   200512 756100                    STQ     OPER$,,AUTO

      740     7791    4                 MOD(SIZEC(DCLINPFNC),2)); /* INCR TO DBL BYT BOUNDRY */
      741     7792    5               DO I=0 TO NOPS-1; /* SCAN EACH OPERATOR                 */

   7792  7 001557   200503 450100                    STZ     I,,AUTO
         7 001560   002315 710000 7                  TRA     s:7940+1

      742     7793    5                  INPOPR = '0'B; /* CLEAR INP OPERATOR HDR */

   7793  7 001561   000000 220003                    LDX0    0,DU
         7 001562   000770 470400 1                  LDP0    OPR_BUF$
         7 001563   000000 740100                    STX0    0,,PR0

      743     7794    5                  INPOPR.TYP = 9 /* TEXT INPUT OPERATOR */;

   7794  7 001564   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:105  
         7 001565   000026 376000 8                  ANQ     22
         7 001566   011000 276003                    ORQ     4608,DU
         7 001567   000000 756100                    STQ     0,,PR0

      744     7795    5                  INPOPR_TXT.L = 0; /* INIT TEXT INDEX/SIZE */

   7795  7 001570   000000 236003                    LDQ     0,DU
         7 001571   000000 552110                    STBQ    0,'10'O,PR0

      745     7796    5                  IF I < NOPS-1 THEN /* SET CHN BIT ON ALL BUT LAST OPER */

   7796  7 001572   200514 236100                    LDQ     NOPS,,AUTO
         7 001573   000001 136007                    SBLQ    1,DL
         7 001574   200503 116100                    CMPQ    I,,AUTO
         7 001575   001600 604400 7                  TMOZ    s:7798

      746     7797    5                     INPOPR.CHN = '1'B;

   7797  7 001576   040000 236003                    LDQ     16384,DU
         7 001577   000000 256100                    ORSQ    0,,PR0

      747     7798    5                  NODE$ = ROOT$ -> IMP$BLK.SUBLK$(I); /* NEXT OPERATOR PTR     */

   7798  7 001600   200520 471500                    LDP1    ROOT$,,AUTO
         7 001601   200503 721100                    LXL1    I,,AUTO
         7 001602   100003 236111                    LDQ     3,X1,PR1
         7 001603   200507 756100                    STQ     NODE$,,AUTO

      748     7799    5                  OPTS_PRESENT_BITS='0'B; /* INIT OPTION PRESENCE BITS         */

   7799  7 001604   000027 236000 8                  LDQ     23
         7 001605   200515 356100                    ANSQ    OPTS_PRESENT_BITS,,AUTO

      749     7800    6                  DO J=0 TO NODE$ -> IMP$BLK.NSUBLKS-1; /* SCAN EACH PART      */

   7800  7 001606   200504 450100                    STZ     J,,AUTO
         7 001607   002136 710000 7                  TRA     s:7882+1
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:106  

      750     7801    6                     NODE1$ = NODE$ -> IMP$BLK.SUBLK$(J); /* PTR TO NEXT PART  */

   7801  7 001610   200507 470500                    LDP0    NODE$,,AUTO
         7 001611   200504 720100                    LXL0    J,,AUTO
         7 001612   000003 236110                    LDQ     3,X0,PR0
         7 001613   200510 756100                    STQ     NODE1$,,AUTO

      751     7802        /*
      752     7803          IF THIS OPERATOR OPTION HAS APPEARED BEFORE AND IT IS NOT A STRING
      753     7804          OF SOME TYPE OR A MNEMONIC, THEN ERROR THE GUY OFF
      754     7805                                                                                      */
      755     7806    6                     IF OPTS_PRESENT_BITS(NODE1$->IMP$BLK.CODE) AND

   7806  7 001614   200510 471500                    LDP1    NODE1$,,AUTO
         7 001615   100000 236100                    LDQ     0,,PR1
         7 001616   777777 376007                    ANQ     -1,DL
         7 001617   000000 066506                    CMPB    filb='0'B
         7 001620   200515 000001                    BDSC    OPTS_PRESENT_BITS,Q,AUTO by=0,bit=0,n=1
         7 001621   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         7 001622   001650 600000 7                  TZE     s:7821
         7 001623   100000 721100                    LXL1    0,,PR1
         7 001624   000002 101003                    CMPX1   2,DU
         7 001625   001650 600000 7                  TZE     s:7821
         7 001626   000001 101003                    CMPX1   1,DU
         7 001627   001650 600000 7                  TZE     s:7821
         7 001630   000013 101003                    CMPX1   11,DU
         7 001631   001650 600000 7                  TZE     s:7821
         7 001632   000014 101003                    CMPX1   12,DU
         7 001633   001650 600000 7                  TZE     s:7821
         7 001634   000015 101003                    CMPX1   13,DU
         7 001635   001650 600000 7                  TZE     s:7821

      756     7807    6                       NODE1$->IMP$BLK.CODE ~= 2/* SSTRING */ AND NODE1$->IMP$BLK.CODE
              7807                                ~= 1/* QSTRING */ AND
      757     7808    6                       NODE1$->IMP$BLK.CODE ~= 11/* MNEMONIC */ AND
      758     7809    6                      NODE1$->IMP$BLK.CODE ~= 12/* OSTRING */ AND NODE1$->IMP$BLK.CODE
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:107  
              7809                                ~= 13/* XSTRING */ THEN
      759     7810    7                     DO; /* OPTION SPECIFIED TWICE             */

      760     7811    7                        ERROR_POS = NODE1$->IMP$BLK.CPOS;

   7811  7 001636   100002 235100                    LDA     2,,PR1
         7 001637   200502 755100                    STA     ERROR_POS,,AUTO

      761     7812        /*E* ERROR: VC-VC_E$DOUBLEOP-1
      762     7813             MESSAGE: Multiply specified option
      763     7814             MESSAGE1: An option may only be specified once per operator
      764     7815                                                                                      */
      765     7816    7                        ECODE.ERR#=4/* OPTION SPECIFIED TWICE */;

   7816  7 001640   001420 236000 1                  LDQ     ECODE
         7 001641   000010 376000 8                  ANQ     8
         7 001642   000040 276007                    ORQ     32,DL
         7 001643   001420 756000 1                  STQ     ECODE

      766     7817    7                        BAD_CMD = '1'B;

   7817  7 001644   400000 236003                    LDQ     -131072,DU
         7 001645   200501 756100                    STQ     BAD_CMD,,AUTO

      767     7818    7                        RETURN;

   7818  7 001646   200524 221300                    LDX1  ! OPR_BYTSIZ+2,,AUTO
         7 001647   000001 702211                    TSX2  ! 1,X1

      768     7819    7                        END; /* OPTION SPECIFIED TWICE             */
      769     7820    6                     ELSE
      770     7821    6                        OPTS_PRESENT_BITS(NODE1$->IMP$BLK.CODE) = '1'B;

   7821  7 001650   003106 060400                    CSL     bolr='003'O
         7 001651   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
         7 001652   200515 000001                    BDSC    OPTS_PRESENT_BITS,Q,AUTO by=0,bit=0,n=1

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:108  
      771     7822    7                     DO CASE(NODE1$ -> IMP$BLK.CODE);

   7822  7 001653   100000 721100                    LXL1    0,,PR1
         7 001654   000020 101003                    CMPX1   16,DU
         7 001655   001657 602011 7                  TNC     s:7822+4,X1
         7 001656   002116 710000 7                  TRA     s:7871
         7 001657   002116 710000 7                  TRA     s:7871
         7 001660   001732 710000 7                  TRA     s:7828
         7 001661   001732 710000 7                  TRA     s:7828
         7 001662   002036 710000 7                  TRA     s:7845
         7 001663   002103 710000 7                  TRA     s:7864
         7 001664   002046 710000 7                  TRA     s:7849
         7 001665   002042 710000 7                  TRA     s:7847
         7 001666   002077 710000 7                  TRA     s:7862
         7 001667   002052 710000 7                  TRA     s:7851
         7 001670   002111 710000 7                  TRA     s:7866
         7 001671   002056 710000 7                  TRA     s:7853
         7 001672   001677 710000 7                  TRA     s:7824
         7 001673   001765 710000 7                  TRA     s:7833
         7 001674   001765 710000 7                  TRA     s:7833
         7 001675   002063 710000 7                  TRA     s:7856
         7 001676   002071 710000 7                  TRA     s:7859

      772     7823    7                     CASE(11/* MNEMONIC */);

      773     7824    7                        K = NODE1$ -> IMP$BLK.SUBLK$(0) -> IMP$BLK.CODE -
              7824                                 11/* MNEMONIC_DIFF# */;

   7824  7 001677   100003 473500                    LDP3    3,,PR1
         7 001700   300000 236100                    LDQ     0,,PR3
         7 001701   777777 376007                    ANQ     -1,DL
         7 001702   000013 136007                    SBLQ    11,DL
         7 001703   200505 756100                    STQ     K,,AUTO

      774     7825    7                        SUBSTR(INPOPR_TXT.T,INPOPR_TXT.L,1)=BINASC(MNEMONICS(K));

   7825  7 001704   000770 474400 1                  LDP4    OPR_BUF$
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:109  
         7 001705   400000 236100                    LDQ     0,,PR4
         7 001706   000011 772000                    QRL     9
         7 001707   000777 376007                    ANQ     511,DL
         7 001710   200505 235100                    LDA     K,,AUTO
         7 001711   000100 101405                    MRL     fill='000'O
         7 001712   001407 000001 1                  ADSC9   MNEMONICS,A              cn=0,n=1
         7 001713   200542 000004                    ADSC9   NODE$+1,,AUTO            cn=0,n=4
         7 001714   000000 621006                    EAX1    0,QL
         7 001715   200542 236100                    LDQ     NODE$+1,,AUTO
         7 001716   000033 736000                    QLS     27
         7 001717   000023 276000 8                  ORQ     19
         7 001720   200543 756100                    STQ     NODE$+2,,AUTO
         7 001721   000000 635011                    EAA     0,X1
         7 001722   000022 771000                    ARL     18
         7 001723   040105 100500                    MLR     fill='040'O
         7 001724   200543 000004                    ADSC9   NODE$+2,,AUTO            cn=0,n=4
         7 001725   400000 600001                    ADSC9   0,A,PR4                  cn=3,n=1

      775     7826    7                        INPOPR_TXT.L = INPOPR_TXT.L + 1;

   7826  7 001726   400000 236100                    LDQ     0,,PR4
         7 001727   001000 036007                    ADLQ    512,DL
         7 001730   400000 552110                    STBQ    0,'10'O,PR4
         7 001731   002116 710000 7                  TRA     s:7871

      776     7827    7                     CASE(2/* SSTRING */,1/* QSTRING */);

      777     7828    7                        TEXT$ = PINCRC(ADDR(INPOPR_TXT.T),INPOPR_TXT.L);

   7828  7 001732   000770 473400 1                  LDP3    OPR_BUF$
         7 001733   300000 236100                    LDQ     0,,PR3
         7 001734   000011 772000                    QRL     9
         7 001735   000777 376007                    ANQ     511,DL
         7 001736   000020 736000                    QLS     16
         7 001737   600000 036007                    ADLQ    -65536,DL
         7 001740   000770 036000 1                  ADLQ    OPR_BUF$
         7 001741   200516 756100                    STQ     TEXT$,,AUTO
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:110  

      778     7829    7                        K = NODE1$ -> IMP$SYM.COUNT;

   7829  7 001742   100004 236100                    LDQ     4,,PR1
         7 001743   000033 772000                    QRL     27
         7 001744   200505 756100                    STQ     K,,AUTO

      779     7830    7                        INPOPR_TXT.L = INPOPR_TXT.L + K;

   7830  7 001745   300000 236100                    LDQ     0,,PR3
         7 001746   000011 772000                    QRL     9
         7 001747   000777 376007                    ANQ     511,DL
         7 001750   200505 036100                    ADLQ    K,,AUTO
         7 001751   000011 736000                    QLS     9
         7 001752   300000 552110                    STBQ    0,'10'O,PR3

      780     7831    7                        TEXT$ -> OPER_TEXT = NODE1$ -> IMP$SYM.TEXT;

   7831  7 001753   200510 470500                    LDP0    NODE1$,,AUTO
         7 001754   000004 236100                    LDQ     4,,PR0
         7 001755   000033 772000                    QRL     27
         7 001756   000000 620006                    EAX0    0,QL
         7 001757   200516 471500                    LDP1    TEXT$,,AUTO
         7 001760   200505 721100                    LXL1    K,,AUTO
         7 001761   040140 100540                    MLR     fill='040'O
         7 001762   000004 200010                    ADSC9   4,,PR0                   cn=1,n=*X0
         7 001763   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1
         7 001764   002116 710000 7                  TRA     s:7871

      781     7832    7                     CASE(12/* OSTRING */,13/* XSTRING */);

      782     7833    7                        TEXT$ = PINCRC(ADDR(INPOPR_TXT.T),INPOPR_TXT.L);

   7833  7 001765   000770 473400 1                  LDP3    OPR_BUF$
         7 001766   300000 236100                    LDQ     0,,PR3
         7 001767   000011 772000                    QRL     9
         7 001770   000777 376007                    ANQ     511,DL
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:111  
         7 001771   000020 736000                    QLS     16
         7 001772   600000 036007                    ADLQ    -65536,DL
         7 001773   000770 036000 1                  ADLQ    OPR_BUF$
         7 001774   200516 756100                    STQ     TEXT$,,AUTO

      783     7834    7                        IF NODE1$->IMP$BLK.CODE = 12/* OSTRING */ THEN

   7834  7 001775   100000 721100                    LXL1    0,,PR1
         7 001776   000014 101003                    CMPX1   12,DU
         7 001777   002006 601000 7                  TNZ     s:7838

      784     7835    7                           K = NODE1$ -> IMP$BLK.SUBLK$(0) ->

   7835  7 002000   100003 474500                    LDP4    3,,PR1
         7 002001   400004 236100                    LDQ     4,,PR4
         7 002002   000033 772000                    QRL     27
         7 002003   000003 506007                    DIV     3,DL
         7 002004   200505 756100                    STQ     K,,AUTO
         7 002005   002013 710000 7                  TRA     s:7840

      785     7836    7                             IMP$SYM.COUNT/3;
      786     7837    7                        ELSE
      787     7838    7                           K = NODE1$ -> IMP$BLK.SUBLK$(0) ->

   7838  7 002006   100003 474500                    LDP4    3,,PR1
         7 002007   400004 236100                    LDQ     4,,PR4
         7 002010   000033 772000                    QRL     27
         7 002011   000001 772000                    QRL     1
         7 002012   200505 756100                    STQ     K,,AUTO

      788     7839    7                             IMP$SYM.COUNT/2;
      789     7840    7                        INPOPR_TXT.L = INPOPR_TXT.L + K;

   7840  7 002013   300000 236100                    LDQ     0,,PR3
         7 002014   000011 772000                    QRL     9
         7 002015   000777 376007                    ANQ     511,DL
         7 002016   200505 036100                    ADLQ    K,,AUTO
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:112  
         7 002017   000011 736000                    QLS     9
         7 002020   300000 552110                    STBQ    0,'10'O,PR3

      790     7841    7                        CALL CONVERT_STRING(NODE1$,TEXT$,36);

   7841  7 002021   000031 236000 8                  LDQ     25
         7 002022   200531 756100                    STQ     @OUTBUF$+1,,AUTO
         7 002023   200516 630500                    EPPR0   TEXT$,,AUTO
         7 002024   200530 450500                    STP0    @P$LIT+1,,AUTO
         7 002025   200510 631500                    EPPR1   NODE1$,,AUTO
         7 002026   200527 451500                    STP1    INTRO_PTR$+2,,AUTO
         7 002027   002537 701000 7                  TSX1    CONVERT_STRING
         7 002030   000000 011000                    NOP     0

      791     7842    7                        IF ECODE.ERR# ~= 0 THEN

   7842  7 002031   001420 236000 1                  LDQ     ECODE
         7 002032   377770 316007                    CANQ    131064,DL
         7 002033   002116 600000 7                  TZE     s:7871

      792     7843    7                           RETURN;

   7843  7 002034   200524 221300                    LDX1  ! OPR_BYTSIZ+2,,AUTO
         7 002035   000001 702211                    TSX2  ! 1,X1

      793     7844    7                     CASE(3/* ACKNOWLEDGE */);

      794     7845    7                        INPOPR.ACK = '1'B;

   7845  7 002036   000770 473400 1                  LDP3    OPR_BUF$
         7 002037   020000 236003                    LDQ     8192,DU
         7 002040   300000 256100                    ORSQ    0,,PR3
         7 002041   002116 710000 7                  TRA     s:7871

      795     7846    7                     CASE(6/* IMMEDIATE */);

      796     7847    7                        INPOPR.IMD = '1'B;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:113  

   7847  7 002042   000770 473400 1                  LDP3    OPR_BUF$
         7 002043   200000 236003                    LDQ     65536,DU
         7 002044   300000 256100                    ORSQ    0,,PR3
         7 002045   002116 710000 7                  TRA     s:7871

      797     7848    7                     CASE(5/* ECHO */);

      798     7849    7                        INPOPR_TXT.ECH = '1'B;

   7849  7 002046   000770 473400 1                  LDP3    OPR_BUF$
         7 002047   000200 236003                    LDQ     128,DU
         7 002050   300000 256100                    ORSQ    0,,PR3
         7 002051   002116 710000 7                  TRA     s:7871

      799     7850    7                     CASE(8/* READ */);

      800     7851    7                        INPOPR.RED = '1'B;

   7851  7 002052   000770 473400 1                  LDP3    OPR_BUF$
         7 002053   100000 236003                    LDQ     32768,DU
         7 002054   300000 256100                    ORSQ    0,,PR3
         7 002055   002116 710000 7                  TRA     s:7871

      801     7852    7                     CASE(10/* WRITE */);

      802     7853    7                        INPOPR_TXT.DSP = 3/* WRITE# */;

   7853  7 002056   000770 473400 1                  LDP3    OPR_BUF$
         7 002057   000003 236003                    LDQ     3,DU
         7 002060   300000 256100                    ORSQ    0,,PR3

      803     7854    7                        INPOPR_TXT.DSP = 3/* WRITE# */;

   7854  7 002061   300000 256100                    ORSQ    0,,PR3
         7 002062   002116 710000 7                  TRA     s:7871

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:114  
      804     7855    7                     CASE(14/* WRITETRANSPARENT */);

      805     7856    7                        INPOPR_TXT.DSP = 3/* WRITE# */;

   7856  7 002063   000770 473400 1                  LDP3    OPR_BUF$
         7 002064   000003 236003                    LDQ     3,DU
         7 002065   300000 256100                    ORSQ    0,,PR3

      806     7857    7                        INPOPR_TXT.TRN = '1'B;

   7857  7 002066   000100 236003                    LDQ     64,DU
         7 002067   300000 256100                    ORSQ    0,,PR3
         7 002070   002116 710000 7                  TRA     s:7871

      807     7858    7                     CASE(15/* WRITEVIRTUAL */);

      808     7859    7                        INPOPR_TXT.DSP = 3/* WRITE# */;

   7859  7 002071   000770 473400 1                  LDP3    OPR_BUF$
         7 002072   000003 236003                    LDQ     3,DU
         7 002073   300000 256100                    ORSQ    0,,PR3

      809     7860    7                        INPOPR_TXT.VRT = '1'B;

   7860  7 002074   000040 236003                    LDQ     32,DU
         7 002075   300000 256100                    ORSQ    0,,PR3
         7 002076   002116 710000 7                  TRA     s:7871

      810     7861    7                     CASE(7/* INPUT_FUNCTION */);

      811     7862    7                        INPOPR_TXT.DSP = 0/* INPUT FUNCTION# */;

   7862  7 002077   000770 473400 1                  LDP3    OPR_BUF$
         7 002100   000032 236000 8                  LDQ     26
         7 002101   300000 356100                    ANSQ    0,,PR3
         7 002102   002116 710000 7                  TRA     s:7871

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:115  
      812     7863    7                     CASE(4/* BUFFER */);

      813     7864    7                        INPOPR_TXT.DSP = 1/* READBUF#*/;

   7864  7 002103   000770 473400 1                  LDP3    OPR_BUF$
         7 002104   300000 236100                    LDQ     0,,PR3
         7 002105   000032 376000 8                  ANQ     26
         7 002106   000001 276003                    ORQ     1,DU
         7 002107   300000 756100                    STQ     0,,PR3
         7 002110   002116 710000 7                  TRA     s:7871

      814     7865    7                     CASE(9/* TYPEAHEAD_BUFFER */);

      815     7866    7                        INPOPR_TXT.DSP = 2/* TYPE AHEAD# */;

   7866  7 002111   000770 473400 1                  LDP3    OPR_BUF$
         7 002112   300000 236100                    LDQ     0,,PR3
         7 002113   000032 376000 8                  ANQ     26
         7 002114   000002 276003                    ORQ     2,DU
         7 002115   300000 756100                    STQ     0,,PR3

      816     7867    7                      END; /* CASE                               */

      817     7868        /*
      818     7869                 CHECK THAT THE TOTAL TEXT FOR INPOPR NOT > 255
      819     7870        */
      820     7871    6                     IF INPOPR_TXT.L > 255 THEN

   7871  7 002116   000770 470400 1                  LDP0    OPR_BUF$
         7 002117   000000 236100                    LDQ     0,,PR0
         7 002120   777000 376007                    ANQ     -512,DL
         7 002121   400000 116007                    CMPQ    -131072,DL
         7 002122   002135 602000 7                  TNC     s:7882

      821     7872    7                     DO; /* TOO MUCH TEXT */

      822     7873         /*E* ERROR: VC-VC_E$INSIZE-1
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:116  
      823     7874        MESSAGE:  Text operator is too large (max is 255 characters)
      824     7875                  Multiple TEXT ('T=') operations will have to be used.
      825     7876        MESSAGE1: See chapter 7 of programmer reference manual (CE40). */
      826     7877    7                        ERROR_POS = -1;

   7877  7 002123   000001 335007                    LCA     1,DL
         7 002124   200502 755100                    STA     ERROR_POS,,AUTO

      827     7878    7                        ECODE.ERR# = 9/* IMP COMMAND IS TOO LARGE */;

   7878  7 002125   001420 236000 1                  LDQ     ECODE
         7 002126   000010 376000 8                  ANQ     8
         7 002127   000110 276007                    ORQ     72,DL
         7 002130   001420 756000 1                  STQ     ECODE

      828     7879    7                        BAD_CMD = '1'B;

   7879  7 002131   400000 236003                    LDQ     -131072,DU
         7 002132   200501 756100                    STQ     BAD_CMD,,AUTO

      829     7880    7                        RETURN;

   7880  7 002133   200524 221300                    LDX1  ! OPR_BYTSIZ+2,,AUTO
         7 002134   000001 702211                    TSX2  ! 1,X1

      830     7881    7                        END; /* TOO MUCH TEXT */
      831     7882    6                     END; /* SCAN EACH PART                     */

   7882  7 002135   200504 054100                    AOS     J,,AUTO
         7 002136   200507 471500                    LDP1    NODE$,,AUTO
         7 002137   100001 236100                    LDQ     1,,PR1
         7 002140   000022 772000                    QRL     18
         7 002141   200504 116100                    CMPQ    J,,AUTO
         7 002142   001610 605400 7                  TPNZ    s:7801

      832     7883        /*
      833     7884          INSURE THAT A PHASE WAS SPECIFIED
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:117  
      834     7885                                                                                      */
      835     7886    5                 IF NOT(OPTS_PRESENT_BITS(6/* IMMEDIATE */)) AND NOT(OPTS_PRESENT_BITS
              7886                           (8/* READ */)) THEN

   7886  7 002143   200515 236100                    LDQ     OPTS_PRESENT_BITS,,AUTO
         7 002144   004000 316003                    CANQ    2048,DU
         7 002145   002163 601000 7                  TNZ     s:7900
         7 002146   200515 430100                    FSZN    OPTS_PRESENT_BITS,,AUTO
         7 002147   002163 604000 7                  TMI     s:7900

      836     7887    6                  DO; /* NO PHASE                           */

      837     7888        /*E* ERROR: VC-VC_E$NOPHASE-1
      838     7889             MESSAGE: No PHASE specified
      839     7890             MESSAGE1: A PHASE (IMMEDIATE or READ) must be specified
      840     7891                                                                                      */
      841     7892    6                     ERROR_POS=P_PCB$->P_PCB.HI_CHAR;

   7892  7 002150   200517 473500                    LDP3    P_PCB$,,AUTO
         7 002151   300012 235100                    LDA     10,,PR3
         7 002152   200502 755100                    STA     ERROR_POS,,AUTO

      842     7893    6                     ECODE.ERR#=5/* NO PHASE */;

   7893  7 002153   001420 236000 1                  LDQ     ECODE
         7 002154   000010 376000 8                  ANQ     8
         7 002155   000050 276007                    ORQ     40,DL
         7 002156   001420 756000 1                  STQ     ECODE

      843     7894    6                     BAD_CMD = '1'B;

   7894  7 002157   400000 236003                    LDQ     -131072,DU
         7 002160   200501 756100                    STQ     BAD_CMD,,AUTO

      844     7895    6                     RETURN;

   7895  7 002161   200524 221300                    LDX1  ! OPR_BYTSIZ+2,,AUTO
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:118  
         7 002162   000001 702211                    TSX2  ! 1,X1

      845     7896    6                     END; /* NO PHASE                           */
      846     7897        /*
      847     7898          IF NO TEXT OPERATOR WAS SPECIFIED SAY BYE BYE
      848     7899                                                                                      */
      849     7900    5                  IF NOT(OPTS_PRESENT_BITS(10/* WRITE */)) AND NOT(OPTS_PRESENT_BITS(
              7900                           7/* INPUT_FUNCTION */))

   7900  7 002163   000200 316003                    CANQ    128,DU
         7 002164   002212 601000 7                  TNZ     s:7920
         7 002165   002000 316003                    CANQ    1024,DU
         7 002166   002212 601000 7                  TNZ     s:7920
         7 002167   020000 316003                    CANQ    8192,DU
         7 002170   002212 601000 7                  TNZ     s:7920
         7 002171   000400 316003                    CANQ    256,DU
         7 002172   002212 601000 7                  TNZ     s:7920
         7 002173   000004 316003                    CANQ    4,DU
         7 002174   002212 601000 7                  TNZ     s:7920
         7 002175   000010 316003                    CANQ    8,DU
         7 002176   002212 601000 7                  TNZ     s:7920

      850     7901    5                    AND NOT(OPTS_PRESENT_BITS(4/* BUFFER */))
      851     7902    5                    AND NOT(OPTS_PRESENT_BITS(9/* TYPEAHEAD_BUFFER */))
      852     7903    5                    AND NOT(OPTS_PRESENT_BITS(15/* WRITEVIRTUAL */))
      853     7904    5                    AND NOT(OPTS_PRESENT_BITS(14/* WRITETRANSPARENT */)) THEN
      854     7905    6                  DO; /* NO TEXT OPERATOR                   */

      855     7906        /*E* ERROR: VC-VC_E$NOTXTOP-1
      856     7907             MESSAGE: The operation to be performed must appear
      857     7908             MESSAGE1: One of WRITE_VIRTUAL, WRITE_TRANSPARENT, WRITE,
      858     7909                       TYPEAHEAD_BUFFER, INPUT_FUNCTION or BUFFER is
      859     7910                       required.
      860     7911                                                                                      */
      861     7912    6                     ERROR_POS=P_PCB$->P_PCB.HI_CHAR;

   7912  7 002177   200517 473500                    LDP3    P_PCB$,,AUTO
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:119  
         7 002200   300012 235100                    LDA     10,,PR3
         7 002201   200502 755100                    STA     ERROR_POS,,AUTO

      862     7913    6                     ECODE.ERR#=6/* NO TEXT OPERATOR */;

   7913  7 002202   001420 236000 1                  LDQ     ECODE
         7 002203   000010 376000 8                  ANQ     8
         7 002204   000060 276007                    ORQ     48,DL
         7 002205   001420 756000 1                  STQ     ECODE

      863     7914    6                     BAD_CMD = '1'B;

   7914  7 002206   400000 236003                    LDQ     -131072,DU
         7 002207   200501 756100                    STQ     BAD_CMD,,AUTO

      864     7915    6                     RETURN;

   7915  7 002210   200524 221300                    LDX1  ! OPR_BYTSIZ+2,,AUTO
         7 002211   000001 702211                    TSX2  ! 1,X1

      865     7916    6                     END; /* NO TEXT OPERATOR                   */
      866     7917        /*
      867     7918          MAKE SURE THAT ONLY ONE TEXT OPERATOR WAS SPECIFIED FOR THIS OPERATOR
      868     7919                                                                                      */
      869     7920    5                  IF (OPTIONS(10/* WRITE */) + OPTIONS(9/* TYPEAHEAD_BUFFER */) +

   7920  7 002212   200515 236100                    LDQ     OPTS_PRESENT_BITS,,AUTO
         7 002213   000032 772000                    QRL     26
         7 002214   000001 376007                    ANQ     1,DL
         7 002215   200542 756100                    STQ     NODE$+1,,AUTO
         7 002216   200515 236100                    LDQ     OPTS_PRESENT_BITS,,AUTO
         7 002217   000031 772000                    QRL     25
         7 002220   000001 376007                    ANQ     1,DL
         7 002221   200542 036100                    ADLQ    NODE$+1,,AUTO
         7 002222   200543 756100                    STQ     NODE$+2,,AUTO
         7 002223   200515 236100                    LDQ     OPTS_PRESENT_BITS,,AUTO
         7 002224   000024 772000                    QRL     20
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:120  
         7 002225   000001 376007                    ANQ     1,DL
         7 002226   200544 756100                    STQ     NODE$+3,,AUTO
         7 002227   200543 236100                    LDQ     NODE$+2,,AUTO
         7 002230   200544 036100                    ADLQ    NODE$+3,,AUTO
         7 002231   200545 756100                    STQ     NODE$+4,,AUTO
         7 002232   200515 236100                    LDQ     OPTS_PRESENT_BITS,,AUTO
         7 002233   000025 772000                    QRL     21
         7 002234   000001 376007                    ANQ     1,DL
         7 002235   200546 756100                    STQ     NODE$+5,,AUTO
         7 002236   200545 236100                    LDQ     NODE$+4,,AUTO
         7 002237   200546 036100                    ADLQ    NODE$+5,,AUTO
         7 002240   200547 756100                    STQ     NODE$+6,,AUTO
         7 002241   200515 236100                    LDQ     OPTS_PRESENT_BITS,,AUTO
         7 002242   000034 772000                    QRL     28
         7 002243   000001 376007                    ANQ     1,DL
         7 002244   200550 756100                    STQ     NODE$+7,,AUTO
         7 002245   200547 236100                    LDQ     NODE$+6,,AUTO
         7 002246   200550 036100                    ADLQ    NODE$+7,,AUTO
         7 002247   200551 756100                    STQ     NODE$+8,,AUTO
         7 002250   200515 236100                    LDQ     OPTS_PRESENT_BITS,,AUTO
         7 002251   000037 772000                    QRL     31
         7 002252   000001 376007                    ANQ     1,DL
         7 002253   200552 756100                    STQ     NODE$+9,,AUTO
         7 002254   200551 236100                    LDQ     NODE$+8,,AUTO
         7 002255   200552 036100                    ADLQ    NODE$+9,,AUTO
         7 002256   000002 116007                    CMPQ    2,DL
         7 002257   002273 602000 7                  TNC     s:7936

      870     7921    5                    OPTIONS(15/* WRITEVIRTUAL */) +
      871     7922    5                    OPTIONS(14/* WRITETRANSPARENT */) +
      872     7923    5                    OPTIONS(7/* INPUT_FUNCTION */) +
      873     7924    5                    OPTIONS(4/* BUFFER */)) > 1 THEN
      874     7925    6                  DO; /* MORE THAN ONE TEXT OPERATOR        */

      875     7926        /*E* ERROR: VC-VC_E$TWOTEXT-1
      876     7927             MESSAGE: Only one operation may appear
      877     7928             MESSAGE1: Only one of WRITE_VIRTUAL, WRITE_TRANSPARENT, WRITE,
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:121  
      878     7929                      TYPEAHEAD_BUFFER, INPUT_FUNCTION or BUFFER is allowed.
      879     7930                                                                                      */
      880     7931    6                     ECODE.ERR#=7/* MORE THAN ONE TEXT OPERATOR */;

   7931  7 002260   001420 236000 1                  LDQ     ECODE
         7 002261   000010 376000 8                  ANQ     8
         7 002262   000070 276007                    ORQ     56,DL
         7 002263   001420 756000 1                  STQ     ECODE

      881     7932    6                     BAD_CMD = '1'B;

   7932  7 002264   400000 236003                    LDQ     -131072,DU
         7 002265   200501 756100                    STQ     BAD_CMD,,AUTO

      882     7933    6                     ERROR_POS=P_PCB$->P_PCB.HI_CHAR;

   7933  7 002266   200517 473500                    LDP3    P_PCB$,,AUTO
         7 002267   300012 235100                    LDA     10,,PR3
         7 002270   200502 755100                    STA     ERROR_POS,,AUTO

      883     7934    6                     RETURN;

   7934  7 002271   200524 221300                    LDX1  ! OPR_BYTSIZ+2,,AUTO
         7 002272   000001 702211                    TSX2  ! 1,X1

      884     7935    6                     END; /* MORE THAN ONE TEXT OPERATOR        */
      885     7936    5                  OPR_BYTSIZ = SIZEC(INPOPR) + 1 + INPOPR_TXT.L;

   7936  7 002273   000000 236100                    LDQ     0,,PR0
         7 002274   000011 772000                    QRL     9
         7 002275   000777 376007                    ANQ     511,DL
         7 002276   000003 036007                    ADLQ    3,DL
         7 002277   200522 756100                    STQ     OPR_BYTSIZ,,AUTO

      886     7937    5                  OPER$->OPERATOR = OPR_BUF$->OPERATOR;

   7937  7 002300   000000 620006                    EAX0    0,QL
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:122  
         7 002301   200512 473500                    LDP3    OPER$,,AUTO
         7 002302   200522 721100                    LXL1    OPR_BYTSIZ,,AUTO
         7 002303   040140 100540                    MLR     fill='040'O
         7 002304   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         7 002305   300000 000011                    ADSC9   0,,PR3                   cn=0,n=*X1

      887     7938        /*   Bump up pointer to the next even byte boundry past the curr structure */
      888     7939    5                  OPER$ = PINCRC(OPER$, OPR_BYTSIZ + MOD(OPR_BYTSIZ,2));

   7939  7 002306   200522 236100                    LDQ     OPR_BYTSIZ,,AUTO
         7 002307   000001 376007                    ANQ     1,DL
         7 002310   200522 036100                    ADLQ    OPR_BYTSIZ,,AUTO
         7 002311   000020 736000                    QLS     16
         7 002312   200512 036100                    ADLQ    OPER$,,AUTO
         7 002313   200512 756100                    STQ     OPER$,,AUTO

      889     7940    5                  END; /* SCAN EACH OPERATOR                 */

   7940  7 002314   200503 054100                    AOS     I,,AUTO
         7 002315   200503 236100                    LDQ     I,,AUTO
         7 002316   200514 116100                    CMPQ    NOPS,,AUTO
         7 002317   001561 604000 7                  TMI     s:7793

      890     7941    4               END; /* PROCESS_OPERATORS                  */

      891     7942    3            END; /* PROCESS IDENTIFIERS AND OPERATORS  */

      892     7943    2         IF ECODE.ERR# = 0 THEN /* NO ERRORS ENCOUNTERED */

   7943  7 002320   001420 236000 1                  LDQ     ECODE
         7 002321   377770 316007                    CANQ    131064,DL
         7 002322   002325 601000 7                  TNZ     s:7945

      893     7944    2            INPFNC$ = OPER$; /* OPER$ SHOULD BE AT NEXT AVAIL BYTE */

   7944  7 002323   200512 236100                    LDQ     OPER$,,AUTO
         7 002324   200513 756100                    STQ     INPFNC$,,AUTO
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:123  

      894     7945    2         RETURN;

   7945  7 002325   200524 221300                    LDX1  ! OPR_BYTSIZ+2,,AUTO
         7 002326   000001 702211                    TSX2  ! 1,X1

      895     7946    2   NO_SPACE: ALTRETURN;

   7946  7 002327   200524 221300       NO_SPACE     LDX1  ! OPR_BYTSIZ+2,,AUTO
         7 002330   000000 702211                    TSX2  ! 0,X1

      896     7947    2   END PROCESS_ADD;
      897     7948         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:124  
      898     7949        /*I*    NAME:      NEED_SPACE
      899     7950                PURPOSE:  To ensure there is enough space in the IMP BUFFER to
      900     7951                          process the current command, make space if neccessary.
      901     7952                DESCRIPTION:  Analyize the space requirement for this command and
      902     7953                              decide if the command is too large or requires
      903     7954                              getting rid of what is currently in the impbuffer
      904     7955                              before enough room can be made to store the current
      905     7956                              command. In general, a command can be up to 1000
      906     7957                              bytes in size, but we try to keep writes to the
      907     7958                              FEP to under 500 bytes.
      908     7959                                                                                      */
      909     7960         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:125  
      910     7961    1   NEED_SPACE: PROC(SPACE_NEEDED) ALTRET;

   7961  7 002331   200526 741300       NEED_SPACE   STX1  ! INTRO_PTR$+1,,AUTO

      911     7962    2   DCL SPACE_NEEDED SBIN;
      912     7963        /*
      913     7964              Check that the size of a command is not too large.
      914     7965        */
      915     7966    2         IF SPACE_NEEDED > 511 THEN

   7966  7 002332   200527 470500                    LDP0    @SPACE_NEEDED,,AUTO
         7 002333   000000 235100                    LDA     0,,PR0
         7 002334   000777 115007                    CMPA    511,DL
         7 002335   002347 604400 7                  TMOZ    s:7981

      916     7967    3         DO; /* This is ridiculous */

      917     7968         /*E* ERROR: VC-VC_E$TOOMUCH-1
      918     7969              MESSAGE:    Sorry,  Too much memory required to service request.
      919     7970              MESSAGE1: Any IMP command must not require more that 500 bytes of data.
      920     7971              */
      921     7972    3            ECODE.ERR# = 10 /*TOO MUCH INPUT FOR FEP*/;

   7972  7 002336   001420 236000 1                  LDQ     ECODE
         7 002337   000010 376000 8                  ANQ     8
         7 002340   000120 276007                    ORQ     80,DL
         7 002341   001420 756000 1                  STQ     ECODE

      922     7973    3            BAD_CMD = '1'B;

   7973  7 002342   400000 236003                    LDQ     -131072,DU
         7 002343   200501 756100                    STQ     BAD_CMD,,AUTO

      923     7974    3            ERROR_POS = -1;

   7974  7 002344   000001 335007                    LCA     1,DL
         7 002345   200502 755100                    STA     ERROR_POS,,AUTO
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:126  

      924     7975    3            RETURN;

   7975  7 002346   000001 702211                    TSX2  ! 1,X1

      925     7976    3            END;
      926     7977         /* CHECK TO SEE IF THIS REQUEST WILL BE SUFFICIENT TO
      927     7978                          WRITE TO FEP. IE. ENOUGH DATA HAS BEEN BUFFERED TO
      928     7979                          MAKE A WRITE WORTHWILD.
      929     7980                       */
      930     7981    2         IF SPACE_NEEDED + CURR_BUF_SIZE > 511 AND CURR_BUF_SIZE > 0 THEN

   7981  7 002347   000000 236100                    LDQ     0,,PR0
         7 002350   001374 036000 1                  ADLQ    CURR_BUF_SIZE
         7 002351   000777 116007                    CMPQ    511,DL
         7 002352   002372 604400 7                  TMOZ    s:7990
         7 002353   001374 236000 1                  LDQ     CURR_BUF_SIZE
         7 002354   002372 604400 7                  TMOZ    s:7990

      931     7982    3         DO;

      932     7983    3            FPT_IMP.BUF_.BOUND = CURR_BUF_SIZE ;

   7983  7 002355   000020 736000                    QLS     16
         7 002356   000174 676000 1                  ERQ     FPT_IMP+4
         7 002357   000034 376000 xsym               ANQ     B_VECTNIL+28
         7 002360   000174 656000 1                  ERSQ    FPT_IMP+4

      933     7984    3            FPT_IMP.BUF_.BUF$ = PINCRC(ADDR(IMPBUF),1);

   7984  7 002361   000015 236000 8                  LDQ     13
         7 002362   000175 756000 1                  STQ     FPT_IMP+5

      934     7985    3            INPFNC$ = ADDR(IMPBUF.BUFER);

   7985  7 002363   000004 236000 8                  LDQ     4
         7 002364   200513 756100                    STQ     INPFNC$,,AUTO
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:127  

      935     7986    3            CURR_BUF_SIZE = 0;

   7986  7 002365   001374 450000 1                  STZ     CURR_BUF_SIZE

      936     7987    3            CALL M$WRITE(FPT_IMP) ALTRET(ALTWRITE);

   7987  7 002366   000170 630400 1                  EPPR0   FPT_IMP
         7 002367   440001 713400                    CLIMB   alt,write
         7 002370   401400 401760                    pmme    nvectors=4
         7 002371   002400 702000 7                  TSX2    ALTWRITE

      937     7988    3            END;

      938     7989        /**/
      939     7990    2         CURR_BUF_SIZE = CURR_BUF_SIZE + SPACE_NEEDED;

   7990  7 002372   200527 470500                    LDP0    @SPACE_NEEDED,,AUTO
         7 002373   001374 236000 1                  LDQ     CURR_BUF_SIZE
         7 002374   000000 036100                    ADLQ    0,,PR0
         7 002375   001374 756000 1                  STQ     CURR_BUF_SIZE

      940     7991    2         RETURN;

   7991  7 002376   200526 221300                    LDX1  ! INTRO_PTR$+1,,AUTO
         7 002377   000001 702211                    TSX2  ! 1,X1

      941     7992    2   ALTWRITE: ALTRETURN;

   7992  7 002400   200526 221300       ALTWRITE     LDX1  ! INTRO_PTR$+1,,AUTO
         7 002401   000000 702211                    TSX2  ! 0,X1

      942     7993    2   END NEED_SPACE;
      943     7994         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:128  
      944     7995        /*I*    NAME:    PROCESS_ERROR
      945     7996                PURPOSE: Report IMP errors to the user.
      946     7997                DESCRIPTION:  ECODE is assumed loaded with the error code
      947     7998                              to be reported.  For syntax errors (reported
      948     7999                              from XUR$GETCMD by the parser), an error pointer
      949     8000                              is found in the PCB.  Otherwise, if an error pointer
      950     8001                              exists, it is in ERROR_POS.  The routine XUR$ERRMSG
      951     8002                              is called to report the error.  Also the routines
      952     8003                              resets the buffer byte count to what it was before
      953     8004                              the errored command was entered.
      954     8005                                                                                      */
      955     8006         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:129  
      956     8007    1   PROCESS_ERROR: PROC;

   8007  7 002402   200524 741300       PROCESS_ERR* STX1  ! OPR_BYTSIZ+2,,AUTO

      957     8008    3         IF ECODE.ERR# = 1/* SYNTAX ERROR */ AND ERR_CODE.MON = '1'B THEN DO;

   8008  7 002403   001420 236000 1                  LDQ     ECODE
         7 002404   377770 376007                    ANQ     131064,DL
         7 002405   000010 116007                    CMPQ    8,DL
         7 002406   002440 601000 7                  TNZ     s:8015
         7 002407   200520 236100                    LDQ     ROOT$,,AUTO
         7 002410   400000 316007                    CANQ    -131072,DL
         7 002411   002440 600000 7                  TZE     s:8015

      958     8009    3            FETCH_COMMANDS = '0'B;

   8009  7 002412   200500 450100                    STZ     FETCH_COMMANDS,,AUTO

      959     8010    3            IF ERR_CODE.ERR# ~= 6 /* EOF ON READ */ THEN

   8010  7 002413   200520 236100                    LDQ     ROOT$,,AUTO
         7 002414   377770 376007                    ANQ     131064,DL
         7 002415   000060 116007                    CMPQ    48,DL
         7 002416   002535 600000 7                  TZE     s:8035

      960     8011    3               CALL XUR$ERRMSG(ERR_CODE,,,,,,4);

   8011  7 002417   000033 236000 8                  LDQ     27
         7 002420   200550 756100                    STQ     NODE$+7,,AUTO
         7 002421   000001 236000 xsym               LDQ     B_VECTNIL+1
         7 002422   000001 235000 xsym               LDA     B_VECTNIL+1
         7 002423   200546 757100                    STAQ    NODE$+5,,AUTO
         7 002424   000001 236000 xsym               LDQ     B_VECTNIL+1
         7 002425   000001 235000 xsym               LDA     B_VECTNIL+1
         7 002426   200544 757100                    STAQ    NODE$+3,,AUTO
         7 002427   000001 236000 xsym               LDQ     B_VECTNIL+1
         7 002430   200543 756100                    STQ     NODE$+2,,AUTO
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:130  
         7 002431   200520 630500                    EPPR0   ROOT$,,AUTO
         7 002432   200542 450500                    STP0    NODE$+1,,AUTO
         7 002433   200542 630500                    EPPR0   NODE$+1,,AUTO
         7 002434   000025 631400 xsym               EPPR1   B_VECTNIL+21
         7 002435   000000 701000 xent               TSX1    XUR$ERRMSG
         7 002436   000000 011000                    NOP     0

      961     8012    3            END; /* END DO */

   8012  7 002437   002535 710000 7                  TRA     s:8035

      962     8013    2         ELSE
      963     8014    3         DO; /* REPORT ERROR                       */

      964     8015    3            FPT_XIT.V.STEPCC# = 4;

   8015  7 002440   004000 236003                    LDQ     2048,DU
         7 002441   000152 552040 1                  STBQ    FPT_XIT+4,'40'O

      965     8016    3            IF ECODE.ERR# = 1/* SYNTAX ERROR */ THEN

   8016  7 002442   001420 236000 1                  LDQ     ECODE
         7 002443   377770 376007                    ANQ     131064,DL
         7 002444   000010 116007                    CMPQ    8,DL
         7 002445   002447 601000 7                  TNZ     s:8018

      966     8017    3               RETURN;

   8017  7 002446   000001 702211                    TSX2  ! 1,X1

      967     8018    3            IF ONE_TIME_COMMAND THEN

   8018  7 002447   200511 234100                    SZN     ONE_TIME_COMMAND,,AUTO
         7 002450   002457 605000 7                  TPL     s:8020

      968     8019    3               ERROR_POS = ERROR_POS + B$JIT$->B$JIT.CCDISP;

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:131  
   8019  7 002451   000000 470400 xsym               LDP0    B$JIT$
         7 002452   000032 236100                    LDQ     26,,PR0
         7 002453   000022 736000                    QLS     18
         7 002454   000022 732000                    QRS     18
         7 002455   200502 036100                    ADLQ    ERROR_POS,,AUTO
         7 002456   200502 756100                    STQ     ERROR_POS,,AUTO

      969     8020    3            IF ERROR_POS > -1 THEN

   8020  7 002457   200502 235100                    LDA     ERROR_POS,,AUTO
         7 002460   002473 604000 7                  TMI     s:8022

      970     8021    3               CALL XUR$ERRPTR(ERROR_POS,DCBNUM(M$DO));

   8021  7 002461   000000 236007 xsym               LDQ     M$DO,DL
         7 002462   200542 756100                    STQ     NODE$+1,,AUTO
         7 002463   200542 630500                    EPPR0   NODE$+1,,AUTO
         7 002464   200545 450500                    STP0    NODE$+4,,AUTO
         7 002465   200502 631500                    EPPR1   ERROR_POS,,AUTO
         7 002466   200544 451500                    STP1    NODE$+3,,AUTO
         7 002467   200544 630500                    EPPR0   NODE$+3,,AUTO
         7 002470   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 002471   000000 701000 xent               TSX1    XUR$ERRPTR
         7 002472   000000 011000                    NOP     0

      971     8022    3            CALL XUR$ERRMSG(ECODE);

   8022  7 002473   000034 630400 8                  EPPR0   28
         7 002474   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 002475   000000 701000 xent               TSX1    XUR$ERRMSG
         7 002476   000000 011000                    NOP     0

      972     8023    4            IF ONE_TIME_COMMAND THEN DO;

   8023  7 002477   200511 234100                    SZN     ONE_TIME_COMMAND,,AUTO
         7 002500   002512 605000 7                  TPL     s:8028

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:132  
      973     8024    4               ECODE.SEV =ECODE.SEV + 1;

   8024  7 002501   001420 236000 1                  LDQ     ECODE
         7 002502   000007 376007                    ANQ     7,DL
         7 002503   000001 036007                    ADLQ    1,DL
         7 002504   001420 676000 1                  ERQ     ECODE
         7 002505   000007 376007                    ANQ     7,DL
         7 002506   001420 656000 1                  ERSQ    ECODE

      974     8025    4               FPT_XIT.CODE_ = VECTOR(ECODE);

   8025  7 002507   000036 237000 8                  LDAQ    30
         7 002510   000150 757000 1                  STAQ    FPT_XIT+2

      975     8026    4               END;

   8026  7 002511   002514 710000 7                  TRA     s:8030

      976     8027    3            ELSE
      977     8028    3               ECODE.ERR# = 0;

   8028  7 002512   000010 236000 8                  LDQ     8
         7 002513   001420 356000 1                  ANSQ    ECODE

      978     8029        /*      Get back space reserved for the last errored command    */
      979     8030    3            TEMP = POFFC(ADDR(IMPBUF.DATA(CURR_BUF_SIZE)),INPFNC$);

   8030  7 002514   001374 236000 1                  LDQ     CURR_BUF_SIZE
         7 002515   000020 736000                    QLS     16
         7 002516   000004 036000 8                  ADLQ    4
         7 002517   000020 772000                    QRL     16
         7 002520   200542 756100                    STQ     NODE$+1,,AUTO
         7 002521   200513 236100                    LDQ     INPFNC$,,AUTO
         7 002522   000020 772000                    QRL     16
         7 002523   200543 756100                    STQ     NODE$+2,,AUTO
         7 002524   200542 236100                    LDQ     NODE$+1,,AUTO
         7 002525   200543 136100                    SBLQ    NODE$+2,,AUTO
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:133  
         7 002526   200075 756100                    STQ     TEMP,,AUTO

      980     8031    3            CURR_BUF_SIZE = CURR_BUF_SIZE - TEMP;

   8031  7 002527   001374 236000 1                  LDQ     CURR_BUF_SIZE
         7 002530   200075 136100                    SBLQ    TEMP,,AUTO
         7 002531   001374 756000 1                  STQ     CURR_BUF_SIZE

      981     8032    3            INPFNC_LEN = 0;

   8032  7 002532   000000 220003                    LDX0    0,DU
         7 002533   001422 740000 1                  STX0    INPFNC_LEN

      982     8033    3            ERROR_POS=0;

   8033  7 002534   200502 450100                    STZ     ERROR_POS,,AUTO

      983     8034    3            END; /* REPORT ERROR                       */

      984     8035    2         RETURN;

   8035  7 002535   200524 221300                    LDX1  ! OPR_BYTSIZ+2,,AUTO
         7 002536   000001 702211                    TSX2  ! 1,X1

      985     8036    2   END PROCESS_ERROR;
      986     8037         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:134  
      987     8038        /*I*    NAME:     CONVERT_STRING
      988     8039                PURPOSE:  Convert a hex or octal string to its binary value.
      989     8040                DESCRIPTION:  First, we determine the digit size we are dealing
      990     8041                              with, which depends on the base.  We then process
      991     8042                              the string, a byte at a time, from left to right.
      992     8043                              Each digit is multiplied by the conversion factor,
      993     8044                              which is base dependant.
      994     8045                                                                                      */
      995     8046         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:135  
      996     8047    1   CONVERT_STRING: PROC(NODE_PTR$,OUTBUF$,MAX);

   8047  7 002537   200526 741300       CONVERT_STR* STX1  ! INTRO_PTR$+1,,AUTO

      997     8048        /*
      998     8049          CONVERT OCTAL AND HEX STRINGS TO BINARY, BUFFER THEM AND CHECK FOR
      999     8050          VALIDITY      INPUT: COUNT - CONTAINS MAXIMUM NUMBER OF DIGITS ALLOWED
     1000     8051                                                                                      */
     1001     8052    2   DCL ABYTE SBIN; /* OUTPUT BUFFER INDEX                */
     1002     8053    2   DCL MAX UBIN; /* MAX NUMBER OF CHARACTERS ALLOWED   */
     1003     8054    2   DCL DIGIT UBIN(9) CALIGNED BASED(DIGIT_PTR$);
     1004     8055    2   DCL DIGIT_PTR$ PTR; /* POINTS TO DIGIT TO BE CONV.        */
     1005     8056    2   DCL DIGIT_SIZE SBIN; /* NUMBER OF DIGITS PER BYTE          */
     1006     8057    2   DCL IMP$SYM_COUNT SBIN;
     1007     8058    2   DCL I UBIN;
     1008     8059    2   DCL COUNT UBIN; /* NUMBER OF BYTES CONVERTED          */
     1009     8060    2   DCL MULT UBIN; /* BASE MULTIPLIER (8 OR 16)          */
     1010     8061    2   DCL NODE$ PTR; /* POINTER TO DIGIT NODE              */
     1011     8062    2   DCL NODE_PTR$ PTR;
     1012     8063    2   DCL OUTBUF(0:35) UBIN(9) CALIGNED BASED(OUTBUF$);
     1013     8064    2   DCL OUTBUF$ PTR; /* POINTER TO OUTPUT BUFFER           */
     1014     8065        /*
     1015     8066          DETERMINE WHETHER THIS IS A HEX OR OCTAL CONSTANT
     1016     8067                                                                                      */
     1017     8068    2         IF NODE_PTR$->IMP$BLK.CODE=12/* OSTRING */ THEN

   8068  7 002540   200527 470500                    LDP0    @NODE_PTR$,,AUTO
         7 002541   000000 471500                    LDP1    0,,PR0
         7 002542   100000 720100                    LXL0    0,,PR1
         7 002543   000014 100003                    CMPX0   12,DU
         7 002544   002552 601000 7                  TNZ     s:8075

     1018     8069    3         DO; /* OCTAL                              */

     1019     8070    3            MULT=8;

   8070  7 002545   000010 235007                    LDA     8,DL
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:136  
         7 002546   200540 755100                    STA     MULT,,AUTO

     1020     8071    3            DIGIT_SIZE=3;

   8071  7 002547   000003 236007                    LDQ     3,DL
         7 002550   200534 756100                    STQ     DIGIT_SIZE,,AUTO

     1021     8072    3            END; /* OCTAL                              */

   8072  7 002551   002556 710000 7                  TRA     s:8082

     1022     8073    2         ELSE
     1023     8074    3         DO; /* HEX                                */

     1024     8075    3            MULT=16;

   8075  7 002552   000020 235007                    LDA     16,DL
         7 002553   200540 755100                    STA     MULT,,AUTO

     1025     8076    3            DIGIT_SIZE=2;

   8076  7 002554   000002 236007                    LDQ     2,DL
         7 002555   200534 756100                    STQ     DIGIT_SIZE,,AUTO

     1026     8077    3            END; /* HEX                                */

     1027     8078        /*
     1028     8079          INSURE THAT THE USER SPECIFIED THE CORRECT NUMBER OF OCTAL OR HEX
     1029     8080          DIGITS
     1030     8081                                                                                      */
     1031     8082    2         NODE$ = NODE_PTR$->IMP$BLK.SUBLK$(0);

   8082  7 002556   100003 236100                    LDQ     3,,PR1
         7 002557   200541 756100                    STQ     NODE$,,AUTO

     1032     8083    2         IMP$SYM_COUNT = NODE$->IMP$SYM.COUNT;

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:137  
   8083  7 002560   200541 473500                    LDP3    NODE$,,AUTO
         7 002561   300004 236100                    LDQ     4,,PR3
         7 002562   000033 772000                    QRL     27
         7 002563   200535 756100                    STQ     IMP$SYM_COUNT,,AUTO

     1033     8084    2         IF MOD(IMP$SYM_COUNT,DIGIT_SIZE) ~= 0 THEN

   8084  7 002564   200534 506100                    DIV     DIGIT_SIZE,,AUTO
         7 002565   000044 733000                    LRS     36
         7 002566   000000 116003                    CMPQ    0,DU
         7 002567   002601 600000 7                  TZE     s:8100

     1034     8085    3         DO; /* WRONG NUMBER OF DIGITS             */

     1035     8086        /*E* ERROR: VC-VC_E$DIGITS-1
     1036     8087             MESSAGE: Incorrect number of digits specified
     1037     8088             MESSAGE1: Hex constants must contain a multiple of 2 digits
     1038     8089                       and octal constants a multiple of 3 digits
     1039     8090                                                                                      */
     1040     8091    3            ECODE.ERR#=8/* INCORRECT NUMBER OF DIGITS */;

   8091  7 002570   001420 236000 1                  LDQ     ECODE
         7 002571   000010 376000 8                  ANQ     8
         7 002572   000100 276007                    ORQ     64,DL
         7 002573   001420 756000 1                  STQ     ECODE

     1041     8092    3            BAD_CMD = '1'B;

   8092  7 002574   400000 236003                    LDQ     -131072,DU
         7 002575   200501 756100                    STQ     BAD_CMD,,AUTO

     1042     8093    3            ERROR_POS=NODE$->IMP$SYM.CPOS;

   8093  7 002576   300002 235100                    LDA     2,,PR3
         7 002577   200502 755100                    STA     ERROR_POS,,AUTO

     1043     8094    3            RETURN;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:138  

   8094  7 002600   000001 702211                    TSX2  ! 1,X1

     1044     8095    3            END; /* WRONG NUMBER OF DIGITS             */
     1045     8096        /*
     1046     8097          DETERMINE THE NUMBER OF CHARACTERS PRESENT AND GET A POINTER TO THE
     1047     8098          START OF THE INPUT STRING
     1048     8099                                                                                      */
     1049     8100    2         COUNT = (IMP$SYM_COUNT/DIGIT_SIZE);

   8100  7 002601   200535 236100                    LDQ     IMP$SYM_COUNT,,AUTO
         7 002602   200534 506100                    DIV     DIGIT_SIZE,,AUTO
         7 002603   200537 756100                    STQ     COUNT,,AUTO

     1050     8101        /*
     1051     8102           IF THE NUMBER OF DIGITS IS GREATER THAN THE MAX ALLOWED, REPORT
     1052     8103           AN ERROR
     1053     8104                                                                                      */
     1054     8105    2         IF COUNT > MAX THEN

   8105  7 002604   200531 474500                    LDP4    @MAX,,AUTO
         7 002605   400000 116100                    CMPQ    0,,PR4
         7 002606   002621 602000 7                  TNC     s:8112
         7 002607   002621 600000 7                  TZE     s:8112

     1055     8106    3         DO; /* TOO MANY DIGITS                    */

     1056     8107    3            ECODE.ERR#=8/* INCORRECT NUMBER OF DIGITS */;

   8107  7 002610   001420 236000 1                  LDQ     ECODE
         7 002611   000010 376000 8                  ANQ     8
         7 002612   000100 276007                    ORQ     64,DL
         7 002613   001420 756000 1                  STQ     ECODE

     1057     8108    3            BAD_CMD = '1'B;

   8108  7 002614   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:139  
         7 002615   200501 756100                    STQ     BAD_CMD,,AUTO

     1058     8109    3            ERROR_POS=NODE$->IMP$SYM.CPOS;

   8109  7 002616   300002 235100                    LDA     2,,PR3
         7 002617   200502 755100                    STA     ERROR_POS,,AUTO

     1059     8110    3            RETURN;

   8110  7 002620   000001 702211                    TSX2  ! 1,X1

     1060     8111    3            END; /* TOO MANY DIGITS                    */
     1061     8112    2         DIGIT_PTR$ = PINCRC(NODE$->IMP$SYM.TEXTC$,1);

   8112  7 002621   300003 236100                    LDQ     3,,PR3
         7 002622   200000 036007                    ADLQ    65536,DL
         7 002623   200533 756100                    STQ     DIGIT_PTR$,,AUTO

     1062     8113        /*
     1063     8114          THE FOLLOWING LOOP CONVERTS DIGIT_SIZE INPUT DIGITS TO THEIR BINARY
     1064     8115          BYTE REPRESENTATIONS AND STUFFS THEM INTO THE OUTPUT BUFFER
     1065     8116                                                                                      */
     1066     8117    3         DO ABYTE = 0 TO COUNT-1; /* BYTE LOOP                          */

   8117  7 002624   200532 450100                    STZ     ABYTE,,AUTO
         7 002625   002733 710000 7                  TRA     s:8127+1

     1067     8118    3            OUTBUF(ABYTE) = 0;

   8118  7 002626   200530 470500                    LDP0    @OUTBUF$,,AUTO
         7 002627   000000 471500                    LDP1    0,,PR0
         7 002630   200532 235100                    LDA     ABYTE,,AUTO
         7 002631   000105 101400                    MRL     fill='000'O
         7 002632   000002 000004 xsym               ADSC9   B_VECTNIL+2              cn=0,n=4
         7 002633   100000 000001                    ADSC9   0,A,PR1                  cn=0,n=1

     1068     8119    4            DO I=1 TO DIGIT_SIZE; /* CONVERT THIS MANY DIGITS           */
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:140  

   8119  7 002634   000001 236007                    LDQ     1,DL
         7 002635   200536 756100                    STQ     I,,AUTO
         7 002636   002726 710000 7                  TRA     s:8126+3

     1069     8120    4               IF DIGIT >= ASCBIN('0') AND DIGIT <= ASCBIN('9') THEN

   8120  7 002637   200533 470500                    LDP0    DIGIT_PTR$,,AUTO
         7 002640   000100 101500                    MRL     fill='000'O
         7 002641   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         7 002642   200542 000004                    ADSC9   NODE$+1,,AUTO            cn=0,n=4
         7 002643   200542 236100                    LDQ     NODE$+1,,AUTO
         7 002644   000060 116007                    CMPQ    48,DL
         7 002645   002666 604000 7                  TMI     s:8123
         7 002646   000100 101500                    MRL     fill='000'O
         7 002647   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         7 002650   200543 000004                    ADSC9   NODE$+2,,AUTO            cn=0,n=4
         7 002651   200543 236100                    LDQ     NODE$+2,,AUTO
         7 002652   000072 116007                    CMPQ    58,DL
         7 002653   002666 605000 7                  TPL     s:8123

     1070     8121    4                  DIGIT = DIGIT-48;

   8121  7 002654   000100 101500                    MRL     fill='000'O
         7 002655   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         7 002656   200543 000004                    ADSC9   NODE$+2,,AUTO            cn=0,n=4
         7 002657   200543 236100                    LDQ     NODE$+2,,AUTO
         7 002660   000060 136007                    SBLQ    48,DL
         7 002661   200542 756100                    STQ     NODE$+1,,AUTO
         7 002662   000100 101500                    MRL     fill='000'O
         7 002663   200542 000004                    ADSC9   NODE$+1,,AUTO            cn=0,n=4
         7 002664   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         7 002665   002677 710000 7                  TRA     s:8124

     1071     8122    4               ELSE
     1072     8123    4                  DIGIT=DIGIT-55;

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:141  
   8123  7 002666   000100 101500                    MRL     fill='000'O
         7 002667   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         7 002670   200543 000004                    ADSC9   NODE$+2,,AUTO            cn=0,n=4
         7 002671   200543 236100                    LDQ     NODE$+2,,AUTO
         7 002672   000067 136007                    SBLQ    55,DL
         7 002673   200542 756100                    STQ     NODE$+1,,AUTO
         7 002674   000100 101500                    MRL     fill='000'O
         7 002675   200542 000004                    ADSC9   NODE$+1,,AUTO            cn=0,n=4
         7 002676   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

     1073     8124    4               OUTBUF(ABYTE) = (OUTBUF(ABYTE)*MULT) + DIGIT;

   8124  7 002677   200530 471500                    LDP1    @OUTBUF$,,AUTO
         7 002700   100000 473500                    LDP3    0,,PR1
         7 002701   200532 235100                    LDA     ABYTE,,AUTO
         7 002702   000100 101505                    MRL     fill='000'O
         7 002703   300000 000001                    ADSC9   0,A,PR3                  cn=0,n=1
         7 002704   200542 000004                    ADSC9   NODE$+1,,AUTO            cn=0,n=4
         7 002705   200542 236100                    LDQ     NODE$+1,,AUTO
         7 002706   200540 402100                    MPY     MULT,,AUTO
         7 002707   000100 101500                    MRL     fill='000'O
         7 002710   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         7 002711   200543 000004                    ADSC9   NODE$+2,,AUTO            cn=0,n=4
         7 002712   200543 036100                    ADLQ    NODE$+2,,AUTO
         7 002713   200544 756100                    STQ     NODE$+3,,AUTO
         7 002714   200532 235100                    LDA     ABYTE,,AUTO
         7 002715   000105 101500                    MRL     fill='000'O
         7 002716   200544 000004                    ADSC9   NODE$+3,,AUTO            cn=0,n=4
         7 002717   300000 000001                    ADSC9   0,A,PR3                  cn=0,n=1

     1074     8125    4               DIGIT_PTR$=PINCRC(DIGIT_PTR$,1);

   8125  7 002720   200533 236100                    LDQ     DIGIT_PTR$,,AUTO
         7 002721   200000 036007                    ADLQ    65536,DL
         7 002722   200533 756100                    STQ     DIGIT_PTR$,,AUTO

     1075     8126    4               END; /* CONVERT THIS MANY DIGITS           */
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:142  

   8126  7 002723   200536 235100                    LDA     I,,AUTO
         7 002724   000001 035007                    ADLA    1,DL
         7 002725   200536 755100                    STA     I,,AUTO
         7 002726   200536 236100                    LDQ     I,,AUTO
         7 002727   002732 604000 7                  TMI     s:8127
         7 002730   200534 116100                    CMPQ    DIGIT_SIZE,,AUTO
         7 002731   002637 604400 7                  TMOZ    s:8120

     1076     8127    3            END; /* BYTE LOOP                          */

   8127  7 002732   200532 054100                    AOS     ABYTE,,AUTO
         7 002733   200532 236100                    LDQ     ABYTE,,AUTO
         7 002734   002626 604000 7                  TMI     s:8118
         7 002735   200537 116100                    CMPQ    COUNT,,AUTO
         7 002736   002626 602000 7                  TNC     s:8118

     1077     8128    2         RETURN;

   8128  7 002737   200526 221300                    LDX1  ! INTRO_PTR$+1,,AUTO
         7 002740   000001 702211                    TSX2  ! 1,X1

     1078     8129    2   END CONVERT_STRING;
     1079     8130         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:143  
     1080     8131        /*I*     NAME:       DUMP_IMPFILE
     1081     8132                 PURPOSE:    Write out an IMP created OU.
     1082     8133                 DESCRIPTION:  Read the next record, frame the buffer, and write
     1083     8134                               out the next record.
     1084     8135                                                                                      */
     1085     8136         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:144  
     1086     8137    1   DUMP_IMPFILE: PROC ALTRET;

   8137  7 002741   200524 741300       DUMP_IMPFILE STX1  ! OPR_BYTSIZ+2,,AUTO

     1087     8138        /*
     1088     8139          THIS ROUTINE WRITES OUT RECORDS TO THE FEP THAT HAVE BEEN PREVIOUSLY
     1089     8140          CREATED BY IMP.
     1090     8141                                                                                      */
     1091     8142    2         FPT_IMP.BUF_ = VECTOR(IMPBUF);

   8142  7 002742   000040 237000 8                  LDAQ    32
         7 002743   000174 757000 1                  STAQ    FPT_IMP+4

     1092     8143    2         FPT_READ.BUF_ = VECTOR(IMPBUF);

   8143  7 002744   000040 237000 8                  LDAQ    32
         7 002745   000210 757000 1                  STAQ    FPT_READ+4

     1093     8144    3         DO WHILE ('1'B) ; /* DUMP TO FEP                        */

     1094     8145    3            CALL M$READ(FPT_READ) ALTRET(READ_ERROR);

   8145  7 002746   000204 630400 1                  EPPR0   FPT_READ
         7 002747   440000 713400                    CLIMB   alt,read
         7 002750   401400 401760                    pmme    nvectors=4
         7 002751   002771 702000 7                  TSX2    READ_ERROR

     1095     8146    3            FPT_IMP.BUF_.BOUND=DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#-1;

   8146  7 002752   000000 236007 xsym               LDQ     M$SI,DL
         7 002753   000002 470400 8                  LDP0    2
         7 002754   000000 471500                    LDP1    0,,PR0
         7 002755   100000 473506                    LDP3    0,QL,PR1
         7 002756   300000 236100                    LDQ     0,,PR3
         7 002757   000001 136007                    SBLQ    1,DL
         7 002760   000020 736000                    QLS     16
         7 002761   000174 676000 1                  ERQ     FPT_IMP+4
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:145  
         7 002762   000034 376000 xsym               ANQ     B_VECTNIL+28
         7 002763   000174 656000 1                  ERSQ    FPT_IMP+4

     1096     8147    3            CALL M$WRITE(FPT_IMP) ALTRET(WRITE_ERR);

   8147  7 002764   000170 630400 1                  EPPR0   FPT_IMP
         7 002765   440001 713400                    CLIMB   alt,write
         7 002766   401400 401760                    pmme    nvectors=4
         7 002767   003004 702000 7                  TSX2    WRITE_ERR

     1097     8148    3            END; /* DUMP TO FEP                        */

   8148  7 002770   002746 710000 7                  TRA     s:8145

     1098     8149    2   READ_ERROR:
     1099     8150    2         IF DCBADDR(DCBNUM(M$SI))->F$DCB.TYC.EOF# THEN

   8150  7 002771   000000 236007 xsym  READ_ERROR   LDQ     M$SI,DL
         7 002772   000002 470400 8                  LDP0    2
         7 002773   000000 471500                    LDP1    0,,PR0
         7 002774   100000 473506                    LDP3    0,QL,PR1
         7 002775   300002 236100                    LDQ     2,,PR3
         7 002776   004000 316003                    CANQ    2048,DU
         7 002777   003002 600000 7                  TZE     s:8153

     1100     8151    2            RETURN;

   8151  7 003000   200524 221300                    LDX1  ! OPR_BYTSIZ+2,,AUTO
         7 003001   000001 702211                    TSX2  ! 1,X1

     1101     8152    2         ELSE
     1102     8153    2            ALTRETURN;

   8153  7 003002   200524 221300                    LDX1  ! OPR_BYTSIZ+2,,AUTO
         7 003003   000000 702211                    TSX2  ! 0,X1

     1103     8154    2   WRITE_ERR: ALTRETURN;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:146  

   8154  7 003004   200524 221300       WRITE_ERR    LDX1  ! OPR_BYTSIZ+2,,AUTO
         7 003005   000000 702211                    TSX2  ! 0,X1

     1104     8155    2   END DUMP_IMPFILE;
     1105     8156         %EJECT;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:147  
     1106     8157        /*I* NAME: SPELL
     1107     8158             DESCRIPTION: Indicates how to spell the function-key that activated
     1108     8159             the read.  Looks up the key number in the nodes and prints the text.
     1109     8160        */
     1110     8161    1   SPELL: PROC;

   8161  7 003006   200524 741300       SPELL        STX1  ! OPR_BYTSIZ+2,,AUTO

     1111     8162
     1112     8163    2         I = DCBADDR(DCBNUM(M$SI))->F$DCB.EOMVAL#.VALUE#;

   8163  7 003007   000000 236007 xsym               LDQ     M$SI,DL
         7 003010   000002 470400 8                  LDP0    2
         7 003011   000000 471500                    LDP1    0,,PR0
         7 003012   100000 473506                    LDP3    0,QL,PR1
         7 003013   300003 236100                    LDQ     3,,PR3
         7 003014   000377 376007                    ANQ     255,DL
         7 003015   200503 756100                    STQ     I,,AUTO

     1113     8164    2         J = 8;

   8164  7 003016   000010 235007                    LDA     8,DL
         7 003017   200504 755100                    STA     J,,AUTO

     1114     8165    2         IF OTRMCTL.TRNUSRINPFNC#='1'B THEN CALL M$GTRMCTL (GTRMCTL);

   8165  7 003020   000236 236000 1                  LDQ     OTRMCTL+2
         7 003021   000030 376003                    ANQ     24,DU
         7 003022   000020 116003                    CMPQ    16,DU
         7 003023   003030 601000 7                  TNZ     s:8166

   8165  7 003024   000036 630400 2                  EPPR0   GTRMCTL
         7 003025   160001 713400                    CLIMB   57345
         7 003026   401000 401760                    pmme    nvectors=3
         7 003027   003031 710000 7                  TRA     s:8167

     1115     8166    2         ELSE RETURN; /* Spell only in interactive mode */
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:148  

   8166  7 003030   000001 702211                    TSX2  ! 1,X1

     1116     8167    2         NODE$ = ADDR(NIL);

   8167  7 003031   000001 236000 xsym               LDQ     B_VECTNIL+1
         7 003032   200507 756100                    STQ     NODE$,,AUTO

     1117     8168    3         IF OTRMCTL.TRNUSRINPFNC#~='0'B THEN DO;

   8168  7 003033   000236 236000 1                  LDQ     OTRMCTL+2
         7 003034   000030 316003                    CANQ    24,DU
         7 003035   003175 600000 7                  TZE     s:8188

     1118     8169    3            CALL INSERT(SPELLBUF,0,8,'=Spcchr ');

   8169  7 003036   000064 237000 2                  LDAQ    HERE_MESS+2
         7 003037   200077 755100                    STA     TESTBUF,,AUTO
         7 003040   200100 756100                    STQ     TESTBUF+1,,AUTO

     1119     8170    3            IF DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#~=0

   8170  7 003041   000000 236007 xsym               LDQ     M$SI,DL
         7 003042   000002 470400 8                  LDP0    2
         7 003043   000000 471500                    LDP1    0,,PR0
         7 003044   100000 473506                    LDP3    0,QL,PR1
         7 003045   300000 235100                    LDA     0,,PR3
         7 003046   003066 600000 7                  TZE     s:8174

     1120     8171    3            THEN IF ROOT$->IMP$BLK.NSUBLKS=0 THEN RETURN;

   8171  7 003047   200520 473500                    LDP3    ROOT$,,AUTO
         7 003050   300001 220100                    LDX0    1,,PR3
         7 003051   003054 601000 7                  TNZ     s:8172

   8171  7 003052   200524 221300                    LDX1  ! OPR_BYTSIZ+2,,AUTO
         7 003053   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:149  

     1121     8172    3               ELSE IF ROOT$->IMP$BLK.SUBLK$(0)->IMP$SYM.COUNT>0

   8172  7 003054   300003 474500                    LDP4    3,,PR3
         7 003055   400004 236100                    LDQ     4,,PR4
         7 003056   777000 316003                    CANQ    -512,DU
         7 003057   003066 600000 7                  TZE     s:8174

     1122     8173    3                  THEN I=ASCBIN(SUBSTR(ROOT$->IMP$BLK.SUBLK$(0)->IMP$SYM.TEXT,0,1));

   8173  7 003060   400004 236100                    LDQ     4,,PR4
         7 003061   000033 772000                    QRL     27
         7 003062   400004 236100                    LDQ     4,,PR4
         7 003063   000022 772000                    QRL     18
         7 003064   000777 376007                    ANQ     511,DL
         7 003065   200503 756100                    STQ     I,,AUTO

     1123     8174    4            IF I>31 AND I<127 THEN DO;

   8174  7 003066   200503 235100                    LDA     I,,AUTO
         7 003067   000037 115007                    CMPA    31,DL
         7 003070   003111 604400 7                  TMOZ    s:8177+1
         7 003071   000177 115007                    CMPA    127,DL
         7 003072   003111 605000 7                  TPL     s:8177+1

     1124     8175    4               CALL INSERT(SPELLBUF,8,3,'''',BINASC(I),'''');

   8175  7 003073   200503 236100                    LDQ     I,,AUTO
         7 003074   000033 736000                    QLS     27
         7 003075   000023 276000 8                  ORQ     19
         7 003076   200542 756100                    STQ     NODE$+1,,AUTO
         7 003077   047000 236003                    LDQ     19968,DU
         7 003100   200101 552140                    STBQ    TESTBUF+2,'40'O,AUTO
         7 003101   200542 236100                    LDQ     NODE$+1,,AUTO
         7 003102   000011 772000                    QRL     9
         7 003103   200101 552120                    STBQ    TESTBUF+2,'20'O,AUTO
         7 003104   047000 236007                    LDQ     19968,DL
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:150  
         7 003105   200101 552110                    STBQ    TESTBUF+2,'10'O,AUTO

     1125     8176    4               J = 11;

   8176  7 003106   000013 235007                    LDA     11,DL
         7 003107   200504 755100                    STA     J,,AUTO

     1126     8177    4               END; ELSE IF I<128 THEN DO;

   8177  7 003110   003202 710000 7                  TRA     s:8191

   8177  7 003111   000200 115007                    CMPA    128,DL
         7 003112   003130 605000 7                  TPL     s:8182

     1127     8178    4                  CALL INDEX (I,BINASC(I),MNEMONICS_CHRS);

   8178  7 003113   200503 236100                    LDQ     I,,AUTO
         7 003114   000033 736000                    QLS     27
         7 003115   000023 276000 8                  ORQ     19
         7 003116   200542 756100                    STQ     NODE$+1,,AUTO
         7 003117   000100 124400                    SCM     mask='000'O
         7 003120   001407 000042 1                  ADSC9   MNEMONICS                cn=0,n=34
         7 003121   200542 000001                    ADSC9   NODE$+1,,AUTO            cn=0,n=1
         7 003122   200503 000100                    ARG     I,,AUTO

     1128     8179    4                  I = I+11/* MNEMONIC */;

   8179  7 003123   000013 236007                    LDQ     11,DL
         7 003124   200503 056100                    ASQ     I,,AUTO

     1129     8180    4                  NODE$=ADDR(MNEMONIC);

   8180  7 003125   000042 236000 8                  LDQ     34
         7 003126   200507 756100                    STQ     NODE$,,AUTO

     1130     8181    4                  END; ELSE DO;

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:151  
   8181  7 003127   003202 710000 7                  TRA     s:8191

     1131     8182    4                  J = I/16+48; IF J>57 THEN J=J+65-58;

   8182  7 003130   200503 236100                    LDQ     I,,AUTO
         7 003131   000020 506007                    DIV     16,DL
         7 003132   000060 036007                    ADLQ    48,DL
         7 003133   200504 756100                    STQ     J,,AUTO

   8182  7 003134   000071 116007                    CMPQ    57,DL
         7 003135   003140 604400 7                  TMOZ    s:8183

   8182  7 003136   000007 236007                    LDQ     7,DL
         7 003137   200504 056100                    ASQ     J,,AUTO

     1132     8183    4                  I = MOD(I,16)+48; IF I>57 THEN I=I+65-58;

   8183  7 003140   200503 236100                    LDQ     I,,AUTO
         7 003141   000020 506007                    DIV     16,DL
         7 003142   000060 035007                    ADLA    48,DL
         7 003143   200503 755100                    STA     I,,AUTO

   8183  7 003144   000071 115007                    CMPA    57,DL
         7 003145   003150 604400 7                  TMOZ    s:8184

   8183  7 003146   000007 236007                    LDQ     7,DL
         7 003147   200503 056100                    ASQ     I,,AUTO

     1133     8184    4                  CALL INSERT(SPELLBUF,8,5,'X''',BINASC(J),BINASC(I),'''');

   8184  7 003150   200504 236100                    LDQ     J,,AUTO
         7 003151   000033 736000                    QLS     27
         7 003152   000023 276000 8                  ORQ     19
         7 003153   200542 756100                    STQ     NODE$+1,,AUTO
         7 003154   200503 236100                    LDQ     I,,AUTO
         7 003155   000033 736000                    QLS     27
         7 003156   000023 276000 8                  ORQ     19
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:152  
         7 003157   000066 220000 2                  LDX0    HERE_MESS+4
         7 003160   200101 740100                    STX0    TESTBUF+2,,AUTO
         7 003161   200543 756100                    STQ     NODE$+2,,AUTO
         7 003162   200542 236100                    LDQ     NODE$+1,,AUTO
         7 003163   000022 772000                    QRL     18
         7 003164   200101 552110                    STBQ    TESTBUF+2,'10'O,AUTO
         7 003165   200543 236100                    LDQ     NODE$+2,,AUTO
         7 003166   000033 772000                    QRL     27
         7 003167   200101 552104                    STBQ    TESTBUF+2,'04'O,AUTO
         7 003170   047000 236003                    LDQ     19968,DU
         7 003171   200102 552140                    STBQ    TESTBUF+3,'40'O,AUTO

     1134     8185    4                  J = 13;

   8185  7 003172   000015 235007                    LDA     13,DL
         7 003173   200504 755100                    STA     J,,AUTO

     1135     8186    4                  END;

     1136     8187    3            END; ELSE DO;

   8187  7 003174   003202 710000 7                  TRA     s:8191

     1137     8188    3            CALL INSERT(SPELLBUF,0,8, '=Funkey ');

   8188  7 003175   040100 100400                    MLR     fill='040'O
         7 003176   000067 000010 2                  ADSC9   HERE_MESS+5              cn=0,n=8
         7 003177   200077 000010                    ADSC9   TESTBUF,,AUTO            cn=0,n=8

     1138     8189    3            NODE$ = ADDR(ASP_FUNKEY);

   8189  7 003200   000043 236000 8                  LDQ     35
         7 003201   200507 756100                    STQ     NODE$,,AUTO

     1139     8190    3            END;

     1140     8191    3         IF NODE$~=ADDR(NIL) THEN DO;
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:153  

   8191  7 003202   200507 236100                    LDQ     NODE$,,AUTO
         7 003203   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 003204   003266 600000 7                  TZE     s:8206

     1141     8192    4            DO K=0 TO NODE$->P$NODE.NSUBNDS-1;

   8192  7 003205   200505 450100                    STZ     K,,AUTO
         7 003206   003260 710000 7                  TRA     s:8204+1

     1142     8193    4               NODE1$ = NODE$->P$NODE.SUBNDS$(K);

   8193  7 003207   200507 470500                    LDP0    NODE$,,AUTO
         7 003210   200505 720100                    LXL0    K,,AUTO
         7 003211   000001 236110                    LDQ     1,X0,PR0
         7 003212   200510 756100                    STQ     NODE1$,,AUTO

     1143     8194    4               IF NODE1$->P$NODE.CODE=I

   8194  7 003213   200510 471500                    LDP1    NODE1$,,AUTO
         7 003214   100000 236100                    LDQ     0,,PR1
         7 003215   177777 376007                    ANQ     65535,DL
         7 003216   200503 116100                    CMPQ    I,,AUTO
         7 003217   003257 601000 7                  TNZ     s:8204

     1144     8195    4               THEN IF NODE1$->P$NODE.TYPE=5

   8195  7 003220   100000 236100                    LDQ     0,,PR1
         7 003221   700000 376003                    ANQ     -32768,DU
         7 003222   500000 116003                    CMPQ    -98304,DU
         7 003223   003231 601000 7                  TNZ     s:8198

     1145     8196    4                  THEN CALL PUTNAME(NODE1$->P$LIT);

   8196  7 003224   200510 236100                    LDQ     NODE1$,,AUTO
         7 003225   200527 756100                    STQ     @NODE_PTR$,,AUTO
         7 003226   003302 701000 7                  TSX1    PUTNAME
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:154  
         7 003227   000000 011000                    NOP     0
         7 003230   003257 710000 7                  TRA     s:8204

     1146     8197    5                  ELSE DO;

     1147     8198    5                     CALL PUTNAME (NODE1$->P$NODE.SUBNDS$(0)->P$LIT);

   8198  7 003231   100001 473500                    LDP3    1,,PR1
         7 003232   200527 453500                    STP3    @NODE_PTR$,,AUTO
         7 003233   003302 701000 7                  TSX1    PUTNAME
         7 003234   000000 011000                    NOP     0

     1148     8199    5                     IF NODE1$->P$NODE.NSUBNDS>1

   8199  7 003235   200510 470500                    LDP0    NODE1$,,AUTO
         7 003236   000000 236100                    LDQ     0,,PR0
         7 003237   000044 376000 8                  ANQ     36
         7 003240   400000 116007                    CMPQ    -131072,DL
         7 003241   003246 602000 7                  TNC     s:8201

     1149     8200    5                     THEN CALL PUTNAME (NODE1$->P$NODE.SUBNDS$(1)->P$LIT);

   8200  7 003242   000002 471500                    LDP1    2,,PR0
         7 003243   200527 451500                    STP1    @NODE_PTR$,,AUTO
         7 003244   003302 701000 7                  TSX1    PUTNAME
         7 003245   000000 011000                    NOP     0

     1150     8201    5                     IF NODE1$->P$NODE.NSUBNDS>2

   8201  7 003246   200510 470500                    LDP0    NODE1$,,AUTO
         7 003247   000000 236100                    LDQ     0,,PR0
         7 003250   000044 376000 8                  ANQ     36
         7 003251   600000 116007                    CMPQ    -65536,DL
         7 003252   003257 602000 7                  TNC     s:8204

     1151     8202    5                     THEN CALL PUTNAME (NODE1$->P$NODE.SUBNDS$(2)->P$LIT);

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:155  
   8202  7 003253   000003 471500                    LDP1    3,,PR0
         7 003254   200527 451500                    STP1    @NODE_PTR$,,AUTO
         7 003255   003302 701000 7                  TSX1    PUTNAME
         7 003256   000000 011000                    NOP     0

     1152     8203    5                     END;

     1153     8204    4               END;

   8204  7 003257   200505 054100                    AOS     K,,AUTO
         7 003260   200507 470500                    LDP0    NODE$,,AUTO
         7 003261   000000 236100                    LDQ     0,,PR0
         7 003262   000020 772000                    QRL     16
         7 003263   000777 376007                    ANQ     511,DL
         7 003264   200505 116100                    CMPQ    K,,AUTO
         7 003265   003207 605400 7                  TPNZ    s:8193

     1154     8205    3            END;

     1155     8206    2         FPT_INTRO.BUF_ = VECTOR(SUBSTR(SPELLBUF,0,J));

   8206  7 003266   200504 235100                    LDA     J,,AUTO
         7 003267   000020 735000                    ALS     16
         7 003270   000140 135007                    SBLA    96,DL
         7 003271   200542 452500                    STP2    NODE$+1,,AUTO
         7 003272   200542 236100                    LDQ     NODE$+1,,AUTO
         7 003273   000077 036003                    ADLQ    63,DU
         7 003274   000160 757000 1                  STAQ    FPT_INTRO+4

     1156     8207    2         CALL M$WRITE (FPT_INTRO);

   8207  7 003275   000154 630400 1                  EPPR0   FPT_INTRO
         7 003276   040001 713400                    CLIMB   write
         7 003277   401400 401760                    pmme    nvectors=4

     1157     8208    2         RETURN;

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:156  
   8208  7 003300   200524 221300                    LDX1  ! OPR_BYTSIZ+2,,AUTO
         7 003301   000001 702211                    TSX2  ! 1,X1

     1158     8209    2   END SPELL;
     1159     8210    1   PUTNAME: PROC (P$LIT);

   8210  7 003302   200526 741300       PUTNAME      STX1  ! INTRO_PTR$+1,,AUTO

     1160     8211        %P$LIT (STCLASS=PARAM);
     1161     8264
     1162     8265    3         IF J>8 THEN DO;

   8265  7 003303   200504 235100                    LDA     J,,AUTO
         7 003304   000010 115007                    CMPA    8,DL
         7 003305   003313 604400 7                  TMOZ    s:8269

     1163     8266    3            CALL INSERT(SPELLBUF,J,4,' or ');

   8266  7 003306   040105 100400                    MLR     fill='040'O
         7 003307   000071 000004 2                  ADSC9   HERE_MESS+7              cn=0,n=4
         7 003310   200077 000004                    ADSC9   TESTBUF,A,AUTO           cn=0,n=4

     1164     8267    3            J = J+4;

   8267  7 003311   000004 236007                    LDQ     4,DL
         7 003312   200504 056100                    ASQ     J,,AUTO

     1165     8268    3            END;

     1166     8269    3         IF P$LIT.ABREV=0 OR P$LIT.ABREV=P$LIT.COUNT THEN DO;

   8269  7 003313   200527 470500                    LDP0    @P$LIT,,AUTO
         7 003314   000000 236100                    LDQ     0,,PR0
         7 003315   000045 316000 8                  CANQ    37
         7 003316   003327 600000 7                  TZE     s:8270
         7 003317   000001 236100                    LDQ     1,,PR0
         7 003320   000033 772000                    QRL     27
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:157  
         7 003321   200542 756100                    STQ     NODE$+1,,AUTO
         7 003322   000000 236100                    LDQ     0,,PR0
         7 003323   000020 772000                    QRL     16
         7 003324   000377 376007                    ANQ     255,DL
         7 003325   200542 116100                    CMPQ    NODE$+1,,AUTO
         7 003326   003343 601000 7                  TNZ     s:8273

     1167     8270    3            CALL INSERT (SPELLBUF,J,32,SUBSTR(P$LIT.TEXT,0,P$LIT.COUNT));

   8270  7 003327   000001 236100                    LDQ     1,,PR0
         7 003330   000033 772000                    QRL     27
         7 003331   000000 620006                    EAX0    0,QL
         7 003332   200504 235100                    LDA     J,,AUTO
         7 003333   040105 100540                    MLR     fill='040'O
         7 003334   000001 200010                    ADSC9   1,,PR0                   cn=1,n=*X0
         7 003335   200077 000040                    ADSC9   TESTBUF,A,AUTO           cn=0,n=32

     1168     8271    3            J = J+P$LIT.COUNT;

   8271  7 003336   000001 236100                    LDQ     1,,PR0
         7 003337   000033 772000                    QRL     27
         7 003340   200504 036100                    ADLQ    J,,AUTO
         7 003341   200504 756100                    STQ     J,,AUTO

     1169     8272    3            END; ELSE DO;

   8272  7 003342   003423 710000 7                  TRA     s:8277

     1170     8273    3            CALL INSERT (SPELLBUF,J,32,SUBSTR(P$LIT.TEXT,0,P$LIT.ABREV),'/',

   8273  7 003343   000000 620006                    EAX0    0,QL
         7 003344   000000 236100                    LDQ     0,,PR0
         7 003345   000020 772000                    QRL     16
         7 003346   000377 376007                    ANQ     255,DL
         7 003347   200542 756100                    STQ     NODE$+1,,AUTO
         7 003350   000001 236100                    LDQ     1,,PR0
         7 003351   000033 772000                    QRL     27
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:158  
         7 003352   200542 136100                    SBLQ    NODE$+1,,AUTO
         7 003353   200543 756100                    STQ     NODE$+2,,AUTO
         7 003354   000000 236100                    LDQ     0,,PR0
         7 003355   000020 772000                    QRL     16
         7 003356   000377 376007                    ANQ     255,DL
         7 003357   200504 235100                    LDA     J,,AUTO
         7 003360   040105 100540                    MLR     fill='040'O
         7 003361   000001 200010                    ADSC9   1,,PR0                   cn=1,n=*X0
         7 003362   200077 000040                    ADSC9   TESTBUF,A,AUTO           cn=0,n=32
         7 003363   200544 756100                    STQ     NODE$+3,,AUTO
         7 003364   000000 636010                    EAQ     0,X0
         7 003365   000022 772000                    QRL     18
         7 003366   000040 116007                    CMPQ    32,DL
         7 003367   003416 603000 7                  TRC     s:8275
         7 003370   000000 636010                    EAQ     0,X0
         7 003371   000022 772000                    QRL     18
         7 003372   200504 036100                    ADLQ    J,,AUTO
         7 003373   200545 740100                    STX0    NODE$+4,,AUTO
         7 003374   777737 620010                    EAX0    -33,X0
         7 003375   777777 660003                    ERX0    -1,DU
         7 003376   040146 100400                    MLR     fill='040'O
         7 003377   000046 000001 8                  ADSC9   38                       cn=0,n=1
         7 003400   200077 000010                    ADSC9   TESTBUF,Q,AUTO           cn=0,n=*X0
         7 003401   200546 756100                    STQ     NODE$+5,,AUTO
         7 003402   200545 236100                    LDQ     NODE$+4,,AUTO
         7 003403   000022 772000                    QRL     18
         7 003404   000037 116007                    CMPQ    31,DL
         7 003405   003416 603000 7                  TRC     s:8275
         7 003406   777740 620006                    EAX0    -32,QL
         7 003407   777777 660003                    ERX0    -1,DU
         7 003410   200543 721100                    LXL1    NODE$+2,,AUTO
         7 003411   200544 235100                    LDA     NODE$+3,,AUTO
         7 003412   200546 236100                    LDQ     NODE$+5,,AUTO
         7 003413   040146 100545                    MLR     fill='040'O
         7 003414   000001 200011                    ADSC9   1,A,PR0                  cn=1,n=*X1
         7 003415   200077 200010                    ADSC9   TESTBUF,Q,AUTO           cn=1,n=*X0

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:159  
     1171     8274    3              SUBSTR(P$LIT.TEXT,P$LIT.ABREV,P$LIT.COUNT-P$LIT.ABREV));
     1172     8275    3            J = J+P$LIT.COUNT+1;

   8275  7 003416   000001 236100                    LDQ     1,,PR0
         7 003417   000033 772000                    QRL     27
         7 003420   200504 036100                    ADLQ    J,,AUTO
         7 003421   000001 036007                    ADLQ    1,DL
         7 003422   200504 756100                    STQ     J,,AUTO

     1173     8276    3            END;

     1174     8277    2   END PUTNAME;

   8277  7 003423   200526 221300                    LDX1  ! INTRO_PTR$+1,,AUTO
         7 003424   000001 702211                    TSX2  ! 1,X1

     1175     8278    1   END VC$IMP;

   8278  7 003425   000000 702200 xent               TSX2  ! X66_MARET

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:160  
--  Include file information  --

   XUR_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   KV$INPFNC.:E05TOU  is referenced.
   KV$PRM.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   XU_SUBS_C.:E05TOU  is referenced.
   XU_PERR_C.:E05TOU  is referenced.
   UM_ERRORS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   U$JIT_C.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VC_PERR_C.:E05TOU  is referenced.
   VC_EQUS.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VC$IMP.
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:161  

 **** Variables and constants ****

  ****  Section 001  Data  VC$IMP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   424-0-0/d STRC(1080)  r     1 CLOSE_IMP_FILE          1374-0-0/w SBIN        r     1 CURR_BUF_SIZE
  1420-0-0/w STRC        r     1 ECODE                    654-0-0/w STRC(288)   r     1 ERRFID
   646-0-0/d STRC(216)   r     1 FPT_EXIT                 170-0-0/d STRC(432)   r     1 FPT_IMP
   154-0-0/d STRC(432)   r     1 FPT_INTRO                222-0-0/d STRC(360)   r     1 FPT_PRECORD
   204-0-0/d STRC(504)   r     1 FPT_READ                 146-0-0/d STRC(216)   r     1 FPT_XIT
  1406-0-0/c CHAR        r     1 IBEX_PROMPT              772-0-0/d STRC(9234)  r     1 IMPBUF
  1375-0-0/c CHAR(15)    r     1 IMP_HERE_MESS           1402-0-0/c CHAR(2)     r     1 IMP_PROMPT
  1404-0-0/d BIT (72)    r     1 IMP_PROMPT_             1422-0-0/w UBIN(18)    r     1 INPFNC_LEN
   664-0-0/h STRC(81)    r     1 INPFNC_SAVE             1422-0-0/w STRC(18)    r     1 LENRDEF
  1407-0-0/b UBIN(9)     r     1 MNEMONICS(0:33)
  1407-0-0/c CHAR(34)    r     1 MNEMONICS_CHRS           332-0-0/d STRC(2088)  r     1 OPEN_IMP_FILE
   240-0-0/d STRC(2088)  r     1 OPEN_IMP_ME              554-0-0/d STRC(2088)  r     1 OPEN_LO
   462-0-0/d STRC(2088)  r     1 OPEN_SI                  667-0-0/w CHAR(258)   r     1 OPR_BUF
   770-0-0/w PTR         r     1 OPR_BUF$                 234-0-0/d STRC(144)   r     1 OTRMCTL
   142-0-0/d STRC(144)   r     1 RESULTS_BUF             1401-0-0/w UBIN(9)     r     1 SUB_BLOCKS
    50-0-0/d STRC(2052)  r     1 XUH_PARAM                  0-0-0/d STRC(1404)  r     1 XUR_INIT

  ****  Section 002 RoData VC$IMP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/d STRC(936)   r     1 ERRMSG_FPT_C              56-0-0/d STRC(144)   r     1 FNCTRMCTL
    36-0-0/d STRC(288)   r     1 GTRMCTL                   62-0-0/c CHAR(5)     r     1 HERE_MESS
    46-0-0/d STRC(288)   r     1 SETFNCCTL                  1-0-0/c STRC(72)    r     1 SYS
     0-0-0/c STRC        r     1 VLP_IMP

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:162  
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   531-0-0/w PTR         r     1 @MAX                     527-0-0/w PTR         r     1 @NODE_PTR$
   530-0-0/w PTR         r     1 @OUTBUF$                 527-0-0/w PTR         r     1 @P$LIT
   527-0-0/w PTR         r     1 @SPACE_NEEDED            532-0-0/w SBIN        r     1 ABYTE
   501-0-0/b BIT         r     1 BAD_CMD                  537-0-0/w UBIN        r     1 COUNT
    76-0-0/w UBIN        r     1 DCB#                     533-0-0/w PTR         r     1 DIGIT_PTR$
   534-0-0/w SBIN        r     1 DIGIT_SIZE               502-0-0/w SBIN        r     1 ERROR_POS
   520-0-0/w STRC        r     1 ERR_CODE                 500-0-0/b BIT         r     1 FETCH_COMMANDS
   503-0-0/w SBIN        r     1 I                        536-0-0/w UBIN        r     1 I
   535-0-0/w SBIN        r     1 IMP$SYM_COUNT            513-0-0/w PTR         r     1 INPFNC$
   525-0-0/w PTR         r     1 INTRO_PTR$               504-0-0/w SBIN        r     1 J
   505-0-0/w SBIN        r     1 K                         *0-0-0/w UBIN        r     1 MAX
   540-0-0/w UBIN        r     1 MULT                     506-0-0/w SBIN        r     1 NEXT_NODE
   507-0-0/w PTR         r     1 NODE$                    541-0-0/w PTR         r     1 NODE$
   510-0-0/w PTR         r     1 NODE1$                    *0-0-0/w PTR         r     1 NODE_PTR$
   514-0-0/w SBIN        r     1 NOPS                      74-0-0/b BIT (2)     r     1 OLD_FNCCTL
   511-0-0/b BIT         r     1 ONE_TIME_COMMAND         512-0-0/w PTR         r     1 OPER$
   522-0-0/w UBIN        r     1 OPR_BYTSIZ               515-0-0/b UBIN        r     1 OPTIONS(0:15)
   515-0-0/b BIT         r     1 OPTS_PRESENT_BITS(0:15)
    *0-0-0/w PTR         r     1 OUTBUF$                   *0-0-0/w STRC(63)    r     1 P$LIT
   517-0-0/w PTR         r     1 P_PCB$                   520-0-0/w PTR         r     1 ROOT$
   521-0-0/w SBIN        r     1 SPACE_NEEDED              *0-0-0/w SBIN        r     1 SPACE_NEEDED
    77-0-0/c CHAR(1026)  r     1 SPELLBUF                  75-0-0/w SBIN        r     1 TEMP
    77-0-0/c UBIN(9)     r     1 TESTBUF(0:1025)          516-0-0/w PTR         r     1 TEXT$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 ASP_FUNKEY                 0-0-0/w PTR         r     1 B$JIT$
     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w STRC(63)    r     1 B_VERSION
     0-0-0/w UBIN        r     1 COMMAND                    0-0-0/w UBIN        r     1 MNEMONIC

  ****  BASED and DCB variables  ****

PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:163  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/h STRC(81)    r     1 DCLINPFNC
     0-0-0/c UBIN(9)     r     1 DIGIT                      0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0N  NULL        r     1 F$IMP                      0-0-0/w STRC(144)   r     1 IMP$BLK
     0-0-0/w ASTR(153)   r     1 IMP$SYM                    0-0-0/w STRC(18)    r     1 INPOPR
     0-0-0/w ACHR        r     1 INPOPR_DUMMY               0-0-0/w ASTR(27)    r     1 INPOPR_TXT
     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0/c CHAR        r     1 ONE_CHAR                   0-0-0/h ACHR        r     1 OPERATOR
     0-0-0/c ACHR        r     1 OPER_TEXT                  0-0-0/c UBIN(9)     r     1 OUTBUF(0:35)
     0-0-0/w STRC(63)    r     1 P$LIT                      0-0-0/w STRC(72)    r     1 P$NODE
     0-0-0/w STRC(504)   r     1 P_PCB                      0-0-0/h STRC        r     1 RLSINPFNC
     0-0-0/c CHAR(2)     r     1 TWO_CHAR


   Procedure VC$IMP requires 1814 words for executable code.
   Procedure VC$IMP requires 366 words of local(AUTO) storage.

    No errors detected in file VCS$IMP.:E05TSI    .
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:164  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:165  
          MINI XREF LISTING

ABYTE IN PROCEDURE CONVERT_STRING
      8052**DCL      8117<<DOINDEX  8118>>ASSIGN   8124>>ASSIGN   8124>>ASSIGN
ALTWRITE IN PROCEDURE NEED_SPACE
      7992**LABEL    7987--CALLALT
ASP_FUNKEY
      6886**DCL      8189--ASSIGN
B$ALT.CODE
      6817**DCL      6817--REDEF    6818--REDEF    6818--REDEF
B$ALT.ERR
      6818**DCL      7492>>ASSIGN
B$ALT.ERR.ERR#
      6819**DCL      6819--REDEF
B$ALT.EVID
      6818**DCL      6818--REDEF    6818--REDEF
B$JIT.CCARS
       963**DCL      7435>>CALLBLT  7437>>ASSIGN
B$JIT.CCBUF
       963**DCL      7391>>IF       7435>>CALLBLT  7440<>CALL
B$JIT.CCDISP
       963**DCL      7391>>IF       7434>>ASSIGN   8019>>ASSIGN
B$JIT.CPFLAGS1.SLEAZE
       969**DCL       969--REDEF
B$JIT.ERR.MID
       876**DCL       876--REDEF
B$JIT.PRFLAGS.OU
       959**DCL      7355>>IF
B$JIT$
      6884**DCL       870--IMP-PTR  7355>>IF       7391>>IF       7391>>IF       7434>>ASSIGN   7435>>CALLBLT
      7435>>CALLBLT  7437>>ASSIGN   7440>>CALL     8019>>ASSIGN
B$TCB.ALT$
      6813**DCL      7492>>ASSIGN
B$TCB$
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:166  
      6883**DCL      7492>>ASSIGN
BAD_CMD
      7259**DCL      7336<<ASSIGN   7508<<ASSIGN   7557<<ASSIGN   7621<<ASSIGN   7654<<ASSIGN   7697<<ASSIGN
      7817<<ASSIGN   7879<<ASSIGN   7894<<ASSIGN   7914<<ASSIGN   7932<<ASSIGN   7973<<ASSIGN   8092<<ASSIGN
      8108<<ASSIGN
BAD_INTRO IN PROCEDURE PROCESS_ADD
      7653**LABEL    7640--GOTO
BAD_NEWS
      7492**LABEL    7349--CALLALT  7362--CALLALT  7365--CALLALT  7369--CALLALT  7376--CALLALT  7461--CALLALT
      7478--CALLALT
B_VERSION.COUNT
      7117**DCL      7333>>ASSIGN   7333>>ASSIGN   7335>>ASSIGN
B_VERSION.TEXT
      7118**DCL      7333>>ASSIGN
CLOSE_IMP_FILE
      6560**DCL      7485<>CALL
CLOSE_IMP_FILE.SN_
      6560**DCL      6560--REDEF
CLOSE_IMP_FILE.UTL_
      6561**DCL      6561--REDEF
CLOSE_IMP_FILE.V
      6565**DCL      6560--DCLINIT
CLOSE_IMP_FILE.V.EXPIRE#
      6575**DCL      6575--REDEF
CLOSE_IMP_FILE.V.TYPE#
      6573**DCL      6573--REDEF
CLOSE_IMP_FILE.V.XTNSIZE#
      6570**DCL      6570--REDEF    6572--REDEF
COMMAND
      6885**DCL      7440<>CALL     7450<>CALL
CONVERT_STRING
      8047**PROC     7575--CALL     7663--CALL     7709--CALL     7841--CALL
COUNT IN PROCEDURE CONVERT_STRING
      8059**DCL      8100<<ASSIGN   8105>>IF       8117>>DOINDEX
CURR_BUF_SIZE
      7115**DCL      7381<<ASSIGN   7473>>IF       7475>>ASSIGN   7981>>IF       7981>>IF       7983>>ASSIGN
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:167  
      7986<<ASSIGN   7990<<ASSIGN   7990>>ASSIGN   8030>>ASSIGN   8031<<ASSIGN   8031>>ASSIGN
DCB#
      6889**DCL      7348<<ASSIGN   7350<<ASSIGN   7357--IF       7494<>CALL
DCLINPFNC
      6958**DCL      7746--ASSIGN   7746--ASSIGN   7785<<ASSIGN   7790--ASSIGN   7790--ASSIGN
DIGIT IN PROCEDURE CONVERT_STRING
      8054**DCL      8120>>IF       8120>>IF       8121<<ASSIGN   8121>>ASSIGN   8123<<ASSIGN   8123>>ASSIGN
      8124>>ASSIGN
DIGIT_PTR$ IN PROCEDURE CONVERT_STRING
      8055**DCL      8054--IMP-PTR  8112<<ASSIGN   8120>>IF       8120>>IF       8121>>ASSIGN   8121>>ASSIGN
      8123>>ASSIGN   8123>>ASSIGN   8124>>ASSIGN   8125<<ASSIGN   8125>>ASSIGN
DIGIT_SIZE IN PROCEDURE CONVERT_STRING
      8056**DCL      8071<<ASSIGN   8076<<ASSIGN   8084>>IF       8100>>ASSIGN   8119>>DOINDEX
DUMP_IMPFILE
      8137**PROC     7376--CALL
ECODE
      7175**DCL      8022<>CALL     8025--ASSIGN
ECODE.ERR#
      7205**DCL      7429<<ASSIGN   7442<<ASSIGN   7451<<ASSIGN   7467>>IF       7555<<ASSIGN   7581>>IF
      7653<<ASSIGN   7679>>IF       7696<<ASSIGN   7730>>IF       7780>>IF       7816<<ASSIGN   7842>>IF
      7878<<ASSIGN   7893<<ASSIGN   7913<<ASSIGN   7931<<ASSIGN   7943>>IF       7972<<ASSIGN   8008>>IF
      8016>>IF       8028<<ASSIGN   8091<<ASSIGN   8107<<ASSIGN
ECODE.SEV
      7205**DCL      8024<<ASSIGN   8024>>ASSIGN
ERRFID
      6894**DCL      7341<>CALL
ERRMSG_FPT_C.V
      6029**DCL      6025--DCLINIT
ERROR_POS
      7260**DCL      7430<<ASSIGN   7556<<ASSIGN   7655<<ASSIGN   7698<<ASSIGN   7811<<ASSIGN   7877<<ASSIGN
      7892<<ASSIGN   7912<<ASSIGN   7933<<ASSIGN   7974<<ASSIGN   8019<<ASSIGN   8019>>ASSIGN   8020>>IF
      8021<>CALL     8033<<ASSIGN   8093<<ASSIGN   8109<<ASSIGN
ERR_CODE
      7293**DCL      7492<<ASSIGN   7494<>CALL     8011<>CALL
ERR_CODE.ERR#
      7323**DCL      8010>>IF
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:168  
ERR_CODE.MON
      7322**DCL      8008>>IF
ERR_CODE.SEV
      7323**DCL      7493<<ASSIGN
F$DCB.ACTPOS
      6856**DCL      6856--REDEF
F$DCB.ARS#
      6830**DCL      6830--REDEF    8146>>ASSIGN   8170>>IF
F$DCB.ASN#
      6845**DCL      7357>>IF
F$DCB.ATTR
      6849**DCL      6850--REDEF
F$DCB.BORROW
      6864**DCL      6864--REDEF    6864--REDEF    6864--REDEF
F$DCB.DCBNAME.L
      6878**DCL      6878--IMP-SIZ
F$DCB.DDEV.IC#
      6836**DCL      7399>>IF
F$DCB.DVBYTE.TRANS#
      6833**DCL      7371>>IF
F$DCB.DVBYTE.VFC#
      6833**DCL      7371>>IF
F$DCB.EOMCHAR#
      6834**DCL      6834--REDEF
F$DCB.EOMVAL#.VALUE#
      6835**DCL      8163>>ASSIGN
F$DCB.FLDID
      6859**DCL      6859--REDEF
F$DCB.FORM$
      6853**DCL      6853--REDEF
F$DCB.FSECT
      6869**DCL      6869--REDEF
F$DCB.FSN#
      6846**DCL      6846--REDEF    6846--REDEF    6847--REDEF
F$DCB.HEADER$
      6852**DCL      6852--REDEF
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:169  
F$DCB.IXTNSIZE#
      6850**DCL      6850--REDEF
F$DCB.LASTSTA$
      6839**DCL      6839--REDEF
F$DCB.LVL
      6865**DCL      6865--REDEF
F$DCB.NAME#.C
      6840**DCL      6840--REDEF
F$DCB.NOEOF
      6862**DCL      6862--REDEF
F$DCB.NRECS#
      6851**DCL      6851--REDEF
F$DCB.NRECX
      6870**DCL      6870--REDEF
F$DCB.OHDR
      6862**DCL      6862--REDEF
F$DCB.ORG#
      6845**DCL      6845--REDEF    7366>>IF
F$DCB.PRECNO
      6868**DCL      6868--REDEF
F$DCB.RCSZ
      6874**DCL      6874--REDEF
F$DCB.RES#
      6841**DCL      6841--REDEF
F$DCB.SETX
      6853**DCL      6853--REDEF
F$DCB.TAB$
      6853**DCL      6853--REDEF
F$DCB.TDA
      6867**DCL      6868--REDEF
F$DCB.TYC.EOF#
      6831**DCL      8150>>IF
F$DCB.WSN#
      6841**DCL      6841--REDEF
F$IMP
      6893**DCL      7350>>ASSIGN
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:170  
FETCH_COMMANDS
      7257**DCL      7404<<ASSIGN   7411>>DOWHILE  7433<<ASSIGN   7463<<ASSIGN   8009<<ASSIGN
FNCTRMCTL
      6292**DCL      6270--DCLINIT  7481>>ASSIGN
FNCTRMCTL.BREAKCOUNT
      6303**DCL      6304--REDEF
FPT_EXIT
      6808**DCL      7496<>CALL
FPT_EXIT.V
      6808**DCL      6808--DCLINIT
FPT_EXIT.V.STEPCC#
      6809**DCL      6809--REDEF
FPT_IMP
      6107**DCL      7478<>CALL     7987<>CALL     8147<>CALL
FPT_IMP.BUF_
      6107**DCL      8142<<ASSIGN
FPT_IMP.BUF_.BOUND
      6107**DCL      7475<<ASSIGN   7983<<ASSIGN   8146<<ASSIGN
FPT_IMP.BUF_.BUF$
      6109**DCL      7477<<ASSIGN   7984<<ASSIGN
FPT_IMP.STATION_
      6109**DCL      6109--REDEF
FPT_IMP.V
      6110**DCL      6107--DCLINIT
FPT_IMP.V.DVBYTE.VFC#
      6116**DCL      6116--REDEF
FPT_INTRO
      6075**DCL      7401<>CALL     8207<>CALL
FPT_INTRO.BUF_
      6075**DCL      8206<<ASSIGN
FPT_INTRO.STATION_
      6077**DCL      6077--REDEF
FPT_INTRO.V
      6078**DCL      6075--DCLINIT
FPT_INTRO.V.DVBYTE.VFC#
      6084**DCL      6084--REDEF
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:171  
FPT_PRECORD
      6171**DCL      7370<>CALL
FPT_PRECORD.V
      6173**DCL      6171--DCLINIT
FPT_READ
      6138**DCL      7369<>CALL     8145<>CALL
FPT_READ.BUF_
      6140**DCL      7368<<ASSIGN   8143<<ASSIGN
FPT_READ.STATION_
      6141**DCL      6142--REDEF
FPT_READ.V
      6142**DCL      6138--DCLINIT
FPT_READ.V.DVBYTE.REREAD#
      6153**DCL      6153--REDEF
FPT_READ.V.INDX#
      6151**DCL      6151--REDEF
FPT_XIT
      6052**DCL      7487<>CALL
FPT_XIT.CODE_
      6052**DCL      8025<<ASSIGN
FPT_XIT.V
      6052**DCL      6052--DCLINIT
FPT_XIT.V.STEPCC#
      6053**DCL      6053--REDEF    8015<<ASSIGN
GTRMCTL
      6197**DCL      7399<>CALL     7483<>CALL     8165<>CALL
GTRMCTL.V
      6205**DCL      6199--DCLINIT
HERE_MESS
      7120**DCL      7335>>ASSIGN
I
      7261**DCL      7434<<ASSIGN   7436>>IF       7437>>ASSIGN   7439>>ASSIGN   7440>>CALL     7569<<ASSIGN
      7570>>ASSIGN   7672<<ASSIGN   7673>>ASSIGN   7715<<ASSIGN   7716>>ASSIGN   7748<<DOINDEX  7749>>ASSIGN
      7792<<DOINDEX  7796>>IF       7798>>ASSIGN   8163<<ASSIGN   8173<<ASSIGN   8174>>IF       8174>>IF
      8175>>CALLBLT  8177>>IF       8178<<CALLBLT  8178>>CALLBLT  8179<<ASSIGN   8179>>ASSIGN   8182>>ASSIGN
      8183<<ASSIGN   8183>>ASSIGN   8183>>IF       8183<<ASSIGN   8183>>ASSIGN   8184>>CALLBLT  8194>>IF
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:172  
I IN PROCEDURE CONVERT_STRING
      8058**DCL      8119<<DOINDEX
IBEX_PROMPT
      7125**DCL      7394--ASSIGN
IMP$BLK.CODE
      5341**DCL      7457>>DOCASE   7537>>IF       7539>>ASSIGN   7544>>ASSIGN   7547>>IF       7547>>IF
      7566>>IF       7569>>ASSIGN   7636>>DOWHILE  7644>>DOCASE   7667>>ASSIGN   7668>>ASSIGN   7672>>ASSIGN
      7679>>IF       7683>>ASSIGN   7691>>IF       7691>>IF       7706>>IF       7706>>IF       7715>>ASSIGN
      7722>>ASSIGN   7806>>IF       7806>>IF       7806>>IF       7806>>IF       7806>>IF       7806>>IF
      7821>>ASSIGN   7822>>DOCASE   7824>>ASSIGN   7834>>IF       8068>>IF
IMP$BLK.CPOS
      5359**DCL      7811>>ASSIGN
IMP$BLK.NSUBLKS
      5345**DCL      7520>>IF       7679>>IF       7734>>ASSIGN   7751>>DOINDEX  7800>>DOINDEX  8171>>IF
IMP$BLK.SUBLK$
      5366**DCL      7522>>ASSIGN   7530>>ASSIGN   7530>>ASSIGN   7536>>ASSIGN   7537>>IF       7545>>ASSIGN
      7546>>ASSIGN   7568>>ASSIGN   7636>>DOWHILE  7637>>ASSIGN   7638>>ASSIGN   7664>>IF       7668>>ASSIGN
      7671>>ASSIGN   7679>>IF       7682>>ASSIGN   7682>>ASSIGN   7683>>ASSIGN   7714>>ASSIGN   7722>>ASSIGN
      7722>>ASSIGN   7733>>ASSIGN   7749>>ASSIGN   7752>>ASSIGN   7761>>ASSIGN   7764>>ASSIGN   7798>>ASSIGN
      7801>>ASSIGN   7824>>ASSIGN   7835>>ASSIGN   7838>>ASSIGN   8082>>ASSIGN   8172>>IF       8173>>ASSIGN
      8173>>ASSIGN
IMP$SYM.CODE
      5385**DCL      7522>>ASSIGN   7530>>ASSIGN   7753>>IF       7756>>IF       7756>>IF       7760>>IF
      7763>>IF
IMP$SYM.COUNT
      5402**DCL      5405--IMP-SIZ  7549>>IF       7561>>ASSIGN   7646>>IF       7646>>IF       7658>>ASSIGN
      7659>>IF       7664>>IF       7694>>IF       7701>>ASSIGN   7758>>ASSIGN   7761>>ASSIGN   7764>>ASSIGN
      7829>>ASSIGN   7831>>ASSIGN   7835>>ASSIGN   7838>>ASSIGN   8083>>ASSIGN   8172>>IF       8173>>ASSIGN
IMP$SYM.CPOS
      5394**DCL      7556>>ASSIGN   7655>>ASSIGN   7698>>ASSIGN   8093>>ASSIGN   8109>>ASSIGN
IMP$SYM.TEXT
      5405**DCL      7561>>ASSIGN   7658>>ASSIGN   7701>>ASSIGN   7831>>ASSIGN   8173>>ASSIGN
IMP$SYM.TEXTC$
      5397**DCL      8112>>ASSIGN
IMP$SYM_COUNT IN PROCEDURE CONVERT_STRING
      8057**DCL      8083<<ASSIGN   8084>>IF       8100>>ASSIGN
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:173  
IMPBUF
      7106**DCL      7477--ASSIGN   7984--ASSIGN   8142--ASSIGN   8143--ASSIGN
IMPBUF.BUFER
      7110**DCL      7384--ASSIGN   7985--ASSIGN
IMPBUF.DATA
      7109**DCL      7110--REDEF    8030--ASSIGN
IMP_HERE_MESS
      7119**DCL      6076--DCLINIT  6077--DCLINIT  7333<<ASSIGN   7335<<ASSIGN
IMP_PROMPT
      7123**DCL      7124--DCLINIT
IMP_PROMPT_
      7124**DCL      7394<<ASSIGN   7440<>CALL     7450<>CALL
INPFNC$
      7270**DCL      6958--IMP-PTR  7049--IMP-PTR  7384<<ASSIGN   7512>>ASSIGN   7513>>ASSIGN   7514>>ASSIGN
      7524>>ASSIGN   7525>>ASSIGN   7528>>ASSIGN   7529>>ASSIGN   7530>>ASSIGN   7539>>ASSIGN   7540>>ASSIGN
      7544>>ASSIGN   7561>>ASSIGN   7562>>ASSIGN   7570>>ASSIGN   7571>>ASSIGN   7575>>CALL     7577>>ASSIGN
      7582<<ASSIGN   7582>>ASSIGN   7785>>ASSIGN   7790>>ASSIGN   7944<<ASSIGN   7985<<ASSIGN   8030>>ASSIGN
INPFNC_LEN
      7271**DCL      7272--REDEF    7385<<ASSIGN   7511<<ASSIGN   7772<<ASSIGN   8032<<ASSIGN
INPFNC_SAVE
      7004**DCL      7622<<ASSIGN   7785>>ASSIGN
INPFNC_SAVE.ID_TKN
      7015**DCL      7701<<ASSIGN   7709--CALL     7716<<ASSIGN   7722<<ASSIGN
INPFNC_SAVE.ID_TKNTYP
      7028**DCL      7627<<ASSIGN   7702<<ASSIGN   7710<<ASSIGN   7717<<ASSIGN   7724<<ASSIGN
INPFNC_SAVE.INPFNCTYP
      7028**DCL      7683<<ASSIGN   7685>>DOCASE   7690<<ASSIGN   7690>>ASSIGN   7721<<ASSIGN   7721>>ASSIGN
      7724>>ASSIGN
INPFNC_SAVE.INT1_TKN
      7015**DCL      7634--ASSIGN   7668<<ASSIGN
INPFNC_SAVE.INT1_TKNTYP
      7022**DCL      7625<<ASSIGN   7641<<ASSIGN   7661<<ASSIGN   7667<<ASSIGN
INPFNC_SAVE.INT2_TKNTYP
      7022**DCL      7626<<ASSIGN   7639>>IF       7643<<ASSIGN   7660<<ASSIGN   7665<<ASSIGN
INPFNC_SAVE.LNG.BYT1
      7013**DCL      7775<<ASSIGN
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:174  
INPFNC_SAVE.LNG.BYT2
      7013**DCL      7774<<ASSIGN
INPFNC_SAVE.TYP
      7009**DCL      7623<<ASSIGN
INPOPR
      7073**DCL      7746--ASSIGN   7768--IF       7793<<ASSIGN   7936--ASSIGN
INPOPR.ACK
      7075**DCL      7845<<ASSIGN
INPOPR.CHN
      7075**DCL      7797<<ASSIGN
INPOPR.ID
      7075**DCL      7073--IMP-SIZ  7075--REDEF    7076--REDEF    7076--REDEF
INPOPR.IMD
      7075**DCL      7847<<ASSIGN
INPOPR.RED
      7075**DCL      7851<<ASSIGN
INPOPR.TYP
      7075**DCL      7794<<ASSIGN
INPOPR_DUMMY
      7073**DCL      7073--REDEF    7076--REDEF    7079--REDEF
INPOPR_TXT.DSP
      7084**DCL      7853<<ASSIGN   7854<<ASSIGN   7856<<ASSIGN   7859<<ASSIGN   7862<<ASSIGN   7864<<ASSIGN
      7866<<ASSIGN
INPOPR_TXT.ECH
      7079**DCL      7849<<ASSIGN
INPOPR_TXT.L
      7084**DCL      7084--IMP-SIZ  7795<<ASSIGN   7825>>ASSIGN   7825>>ASSIGN   7826<<ASSIGN   7826>>ASSIGN
      7828>>ASSIGN   7830<<ASSIGN   7830>>ASSIGN   7833>>ASSIGN   7840<<ASSIGN   7840>>ASSIGN   7871>>IF
      7936>>ASSIGN
INPOPR_TXT.T
      7084**DCL      7825<<ASSIGN   7828--ASSIGN   7833--ASSIGN
INPOPR_TXT.TRN
      7079**DCL      7857<<ASSIGN
INPOPR_TXT.VRT
      7079**DCL      7860<<ASSIGN
INTRO_PTR$ IN PROCEDURE PROCESS_ADD
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:175  
      7618**DCL      7619--IMP-PTR  7620--IMP-PTR  7634<<ASSIGN   7658>>ASSIGN   7663<>CALL     7673>>ASSIGN
      7677<<ASSIGN   7677>>ASSIGN
J
      7262**DCL      7435<<CALLBLT  7436>>IF       7437<<ASSIGN   7439<<ASSIGN   7439>>ASSIGN   7440>>CALL
      7440<>CALL     7751<<DOINDEX  7752>>ASSIGN   7800<<DOINDEX  7801>>ASSIGN   8164<<ASSIGN   8176<<ASSIGN
      8182<<ASSIGN   8182>>IF       8182<<ASSIGN   8182>>ASSIGN   8184>>CALLBLT  8185<<ASSIGN   8206>>ASSIGN
      8265>>IF       8266>>CALLBLT  8267<<ASSIGN   8267>>ASSIGN   8270>>CALLBLT  8271<<ASSIGN   8271>>ASSIGN
      8273>>CALLBLT  8275<<ASSIGN   8275>>ASSIGN
K
      7263**DCL      7093--IMP-SIZ  7750<<ASSIGN   7754<<ASSIGN   7754>>ASSIGN   7758<<ASSIGN   7758>>ASSIGN
      7761<<ASSIGN   7761>>ASSIGN   7764<<ASSIGN   7764>>ASSIGN   7768>>IF       7769<<ASSIGN   7769>>ASSIGN
      7770>>ASSIGN   7777>>IF       7824<<ASSIGN   7825>>ASSIGN   7829<<ASSIGN   7830>>ASSIGN   7831>>ASSIGN
      7835<<ASSIGN   7838<<ASSIGN   7840>>ASSIGN   8192<<DOINDEX  8193>>ASSIGN
LENRDEF.BYT1
      7273**DCL      7775>>ASSIGN
LENRDEF.BYT2
      7274**DCL      7774>>ASSIGN
M$CLOSE
       249**DCL-ENT  7485--CALL
M$DO
      6891**DCL      8021<>CALL
M$EXIT
       261**DCL-ENT  7378--CALL     7487--CALL     7496--CALL
M$GTRMCTL
       273**DCL-ENT  7399--CALL     8165--CALL
M$OPEN
       249**DCL-ENT  7349--CALL     7362--CALL     7365--CALL     7400--CALL
M$PRECORD
       253**DCL-ENT  7370--CALL
M$READ
       250**DCL-ENT  7369--CALL     8145--CALL
M$SI
      6892**DCL      7348>>ASSIGN   7366--IF       7371--IF       7371--IF       7399--IF       8146--ASSIGN
      8150--IF       8163--ASSIGN   8170--IF
M$STRMCTL
       273**DCL-ENT  7447--CALL     7483--CALL
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:176  
M$WRITE
       250**DCL-ENT  7401--CALL     7478--CALL     7987--CALL     8147--CALL     8207--CALL
MAX IN PROCEDURE CONVERT_STRING
      8053**DCL      8047--PROC     8105>>IF
MNEMONIC
      6887**DCL      8180--ASSIGN
MNEMONICS
      7127**DCL      7162--REDEF    7570>>ASSIGN   7673>>ASSIGN   7716>>ASSIGN   7825>>ASSIGN
MNEMONICS_CHRS
      7162**DCL      8178>>CALLBLT
MULT IN PROCEDURE CONVERT_STRING
      8060**DCL      8070<<ASSIGN   8075<<ASSIGN   8124>>ASSIGN
NEED_SPACE
      7961**PROC     7510--CALL     7779--CALL
NEXT_NODE
      7264**DCL      7628<<ASSIGN   7636>>DOWHILE  7637>>ASSIGN   7642>>IF       7646>>IF       7663>>CALL
      7675<<ASSIGN   7675>>ASSIGN   7682>>ASSIGN   7725<<ASSIGN   7725>>ASSIGN   7732<<ASSIGN   7732>>ASSIGN
      7733>>ASSIGN
NODE$
      7265**DCL      7536<<ASSIGN   7539>>ASSIGN   7544>>ASSIGN   7545<<ASSIGN   7546<<ASSIGN   7546>>ASSIGN
      7547>>IF       7547>>IF       7549>>IF       7556>>ASSIGN   7561>>ASSIGN   7561>>ASSIGN   7566>>IF
      7568<<ASSIGN   7568>>ASSIGN   7569>>ASSIGN   7575<>CALL     7637<<ASSIGN   7638<<ASSIGN   7638>>ASSIGN
      7644>>DOCASE   7646>>IF       7646>>IF       7655>>ASSIGN   7658>>ASSIGN   7658>>ASSIGN   7659>>IF
      7663<>CALL     7664>>IF       7667>>ASSIGN   7668>>ASSIGN   7671<<ASSIGN   7671>>ASSIGN   7672>>ASSIGN
      7682<<ASSIGN   7691>>IF       7691>>IF       7694>>IF       7698>>ASSIGN   7701>>ASSIGN   7701>>ASSIGN
      7706>>IF       7706>>IF       7709<>CALL     7714<<ASSIGN   7714>>ASSIGN   7715>>ASSIGN   7749<<ASSIGN
      7751>>DOINDEX  7752>>ASSIGN   7798<<ASSIGN   7800>>DOINDEX  7801>>ASSIGN   8167<<ASSIGN   8180<<ASSIGN
      8189<<ASSIGN   8191>>IF       8192>>DOINDEX  8193>>ASSIGN
NODE$ IN PROCEDURE CONVERT_STRING
      8061**DCL      8082<<ASSIGN   8083>>ASSIGN   8093>>ASSIGN   8109>>ASSIGN   8112>>ASSIGN
NODE1$
      7266**DCL      7752<<ASSIGN   7753>>IF       7756>>IF       7756>>IF       7758>>ASSIGN   7760>>IF
      7761>>ASSIGN   7763>>IF       7764>>ASSIGN   7801<<ASSIGN   7806>>IF       7806>>IF       7806>>IF
      7806>>IF       7806>>IF       7806>>IF       7811>>ASSIGN   7821>>ASSIGN   7822>>DOCASE   7824>>ASSIGN
      7829>>ASSIGN   7831>>ASSIGN   7831>>ASSIGN   7834>>IF       7835>>ASSIGN   7838>>ASSIGN   7841<>CALL
      8193<<ASSIGN   8194>>IF       8195>>IF       8196>>CALL     8198>>CALL     8199>>IF       8200>>CALL
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:177  
      8201>>IF       8202>>CALL
NODE_PTR$ IN PROCEDURE CONVERT_STRING
      8062**DCL      8047--PROC     8068>>IF       8082>>ASSIGN
NOPS
      7275**DCL      7734<<ASSIGN   7746>>ASSIGN   7748>>DOINDEX  7792>>DOINDEX  7796>>IF
NO_SPACE IN PROCEDURE PROCESS_ADD
      7946**LABEL    7779--CALLALT
OLD_FNCCTL
      6315**DCL      7403<<ASSIGN   7480>>IF       7482>>ASSIGN
ONE_CHAR IN PROCEDURE PROCESS_ADD
      7620**DCL      7673<<ASSIGN
ONE_TIME_COMMAND
      7267**DCL      7393<<ASSIGN   7398<<ASSIGN   7431>>IF       8018>>IF       8023>>IF
OPEN_IMP_FILE
      6492**DCL      7362<>CALL
OPEN_IMP_FILE.ACSVEH_
      6494**DCL      6495--REDEF
OPEN_IMP_FILE.ALTKEYS_
      6500**DCL      6501--REDEF    6501--REDEF
OPEN_IMP_FILE.HDR_
      6499**DCL      6500--REDEF
OPEN_IMP_FILE.TAB_
      6498**DCL      6499--REDEF
OPEN_IMP_FILE.UHL_
      6492**DCL      6493--REDEF    6493--REDEF
OPEN_IMP_FILE.V
      6501**DCL      6492--DCLINIT
OPEN_IMP_FILE.V.FSN#
      6532**DCL      6532--REDEF    6532--REDEF
OPEN_IMP_FILE.V.ORG#
      6512**DCL      7359<<ASSIGN   7361<<ASSIGN
OPEN_IMP_FILE.WSN_
      6498**DCL      6498--REDEF
OPEN_IMP_ME
      6382**DCL      7365<>CALL
OPEN_IMP_ME.ACSVEH_
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:178  
      6384**DCL      6385--REDEF
OPEN_IMP_ME.ALTKEYS_
      6390**DCL      6391--REDEF    6391--REDEF
OPEN_IMP_ME.HDR_
      6389**DCL      6390--REDEF
OPEN_IMP_ME.TAB_
      6388**DCL      6389--REDEF
OPEN_IMP_ME.UHL_
      6382**DCL      6383--REDEF    6383--REDEF
OPEN_IMP_ME.V
      6391**DCL      6382--DCLINIT
OPEN_IMP_ME.V.FSN#
      6422**DCL      6422--REDEF    6422--REDEF
OPEN_IMP_ME.WSN_
      6388**DCL      6388--REDEF
OPEN_LO
      6753**DCL      7400<>CALL
OPEN_LO.ACSVEH_
      6755**DCL      6756--REDEF
OPEN_LO.ALTKEYS_
      6761**DCL      6762--REDEF    6762--REDEF
OPEN_LO.HDR_
      6760**DCL      6761--REDEF
OPEN_LO.TAB_
      6759**DCL      6760--REDEF
OPEN_LO.UHL_
      6753**DCL      6754--REDEF    6754--REDEF
OPEN_LO.V
      6762**DCL      6753--DCLINIT
OPEN_LO.V.FSN#
      6793**DCL      6793--REDEF    6793--REDEF
OPEN_LO.WSN_
      6759**DCL      6759--REDEF
OPEN_SI
      6644**DCL      7349<>CALL
OPEN_SI.ACSVEH_
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:179  
      6646**DCL      6647--REDEF
OPEN_SI.ALTKEYS_
      6652**DCL      6653--REDEF    6653--REDEF
OPEN_SI.HDR_
      6651**DCL      6652--REDEF
OPEN_SI.TAB_
      6650**DCL      6651--REDEF
OPEN_SI.UHL_
      6644**DCL      6645--REDEF    6645--REDEF
OPEN_SI.V
      6653**DCL      6644--DCLINIT
OPEN_SI.V.FSN#
      6684**DCL      6684--REDEF    6684--REDEF
OPEN_SI.WSN_
      6650**DCL      6650--REDEF
OPER$
      7269**DCL      7790<<ASSIGN   7937>>ASSIGN   7939<<ASSIGN   7939>>ASSIGN   7944>>ASSIGN
OPERATOR
      7091**DCL      7937<<ASSIGN   7937>>ASSIGN
OPER_TEXT
      7093**DCL      7831<<ASSIGN
OPR_BUF
      7100**DCL      7101--DCLINIT
OPR_BUF$
      7101**DCL      7073--IMP-PTR  7073--IMP-PTR  7076--IMP-PTR  7079--IMP-PTR  7793>>ASSIGN   7794>>ASSIGN
      7795>>ASSIGN   7797>>ASSIGN   7825>>ASSIGN   7825>>ASSIGN   7825>>ASSIGN   7826>>ASSIGN   7826>>ASSIGN
      7828>>ASSIGN   7828>>ASSIGN   7830>>ASSIGN   7830>>ASSIGN   7833>>ASSIGN   7833>>ASSIGN   7840>>ASSIGN
      7840>>ASSIGN   7845>>ASSIGN   7847>>ASSIGN   7849>>ASSIGN   7851>>ASSIGN   7853>>ASSIGN   7854>>ASSIGN
      7856>>ASSIGN   7857>>ASSIGN   7859>>ASSIGN   7860>>ASSIGN   7862>>ASSIGN   7864>>ASSIGN   7866>>ASSIGN
      7871>>IF       7936>>ASSIGN   7937>>ASSIGN
OPR_BYTSIZ
      7327**DCL      7091--IMP-SIZ  7936<<ASSIGN   7937>>ASSIGN   7937>>ASSIGN   7939>>ASSIGN   7939>>ASSIGN
OPTIONS
      7277**DCL      7920>>IF       7920>>IF       7920>>IF       7920>>IF       7920>>IF       7920>>IF
OPTS_PRESENT_BITS
      7276**DCL      7277--REDEF    7799<<ASSIGN   7806>>IF       7821<<ASSIGN   7886>>IF       7886>>IF
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:180  
      7900>>IF       7900>>IF       7900>>IF       7900>>IF       7900>>IF       7900>>IF
OTRMCTL
      6225**DCL      6203--DCLINIT  7481<<ASSIGN
OTRMCTL.BREAKCOUNT
      6236**DCL      6237--REDEF
OTRMCTL.TRNUSRINPFNC#
      6240**DCL      7403>>ASSIGN   7446>>IF       7448<<ASSIGN   7480>>IF       7482<<ASSIGN   8165>>IF
      8168>>IF
OUTBUF IN PROCEDURE CONVERT_STRING
      8063**DCL      8118<<ASSIGN   8124<<ASSIGN   8124>>ASSIGN
OUTBUF$ IN PROCEDURE CONVERT_STRING
      8064**DCL      8047--PROC     8063--IMP-PTR  8118>>ASSIGN   8124>>ASSIGN   8124>>ASSIGN
P$LIT
      5715**DCL      8196<>CALL     8198<>CALL     8200<>CALL     8202<>CALL
P$LIT IN PROCEDURE PUTNAME
      8221**DCL      8210--PROC
P$LIT.ABREV IN PROCEDURE PUTNAME
      8245**DCL      8269>>IF       8269>>IF       8273>>CALLBLT  8273>>CALLBLT  8273>>CALLBLT
P$LIT.COUNT IN PROCEDURE PUTNAME
      8252**DCL      8269>>IF       8270>>CALLBLT  8271>>ASSIGN   8273>>CALLBLT  8275>>ASSIGN
P$LIT.TEXT IN PROCEDURE PUTNAME
      8255**DCL      8270>>CALLBLT  8273>>CALLBLT  8273>>CALLBLT
P$NODE.CODE
      5690**DCL      8194>>IF
P$NODE.NSUBNDS
      5687**DCL      8192>>DOINDEX  8199>>IF       8201>>IF
P$NODE.SUBNDS$
      5695**DCL      8193>>ASSIGN   8198>>CALL     8200>>CALL     8202>>CALL
P$NODE.TYPE
      5633**DCL      8195>>IF
PARSE_ERROR
      7467**LABEL    7440--CALLALT  7450--CALLALT
PROCESS_ADD
      7610**PROC     7461--CALL
PROCESS_DELETE
      7507**PROC     7459--CALL
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:181  
PROCESS_ERROR
      8007**PROC     7468--CALL
PUTNAME
      8210**PROC     8196--CALL     8198--CALL     8200--CALL     8202--CALL
P_PCB.HI_CHAR
      5580**DCL      7892>>ASSIGN   7912>>ASSIGN   7933>>ASSIGN
P_PCB$
      7279**DCL      7332<<ASSIGN   7340<>CALL     7892>>ASSIGN   7912>>ASSIGN   7933>>ASSIGN
READ_ERROR IN PROCEDURE DUMP_IMPFILE
      8150**LABEL    8145--CALLALT
RESULTS_BUF
      5972**DCL      6029--DCLINIT
RLSINPFNC
      7049**DCL      7509--ASSIGN   7512<<ASSIGN   7514--ASSIGN   7582--ASSIGN   7582--ASSIGN
RLSINPFNC.ALLINPFNCTYP
      7059**DCL      7524<<ASSIGN
RLSINPFNC.ID_TKN
      7054**DCL      7530<<ASSIGN   7561<<ASSIGN   7570<<ASSIGN   7575--CALL
RLSINPFNC.ID_TKNTYP
      7059**DCL      7525<<ASSIGN   7529<<ASSIGN   7540<<ASSIGN   7562<<ASSIGN   7571<<ASSIGN   7577<<ASSIGN
RLSINPFNC.INPFNCTYP
      7059**DCL      7528<<ASSIGN   7539<<ASSIGN   7544<<ASSIGN
RLSINPFNC.LNG
      7054**DCL      7514<<ASSIGN
RLSINPFNC.TYP
      7054**DCL      7513<<ASSIGN
ROOT$
      7280**DCL      7293--REDEF    7440<>CALL     7450<>CALL     7456>>IF       7457>>DOCASE   7520>>IF
      7522>>ASSIGN   7530>>ASSIGN   7536>>ASSIGN   7537>>IF       7545>>ASSIGN   7636>>DOWHILE  7637>>ASSIGN
      7679>>IF       7679>>IF       7682>>ASSIGN   7683>>ASSIGN   7722>>ASSIGN   7733<<ASSIGN   7733>>ASSIGN
      7734>>ASSIGN   7749>>ASSIGN   7798>>ASSIGN   8171>>IF       8172>>IF       8173>>ASSIGN   8173>>ASSIGN
SETFNCCTL
      6264**DCL      7447<>CALL
SETFNCCTL.V
      6272**DCL      6266--DCLINIT
SPACE_NEEDED
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:182  
      7326**DCL      7509<<ASSIGN   7510<>CALL     7511>>ASSIGN   7746<<ASSIGN   7770<<ASSIGN   7770>>ASSIGN
      7772>>ASSIGN   7778<<ASSIGN   7778>>ASSIGN   7779<>CALL
SPACE_NEEDED IN PROCEDURE NEED_SPACE
      7962**DCL      7961--PROC     7966>>IF       7981>>IF       7990>>ASSIGN
SPELL
      8161**PROC     7465--CALL
SPELLBUF
      7113**DCL      8169<<CALLBLT  8175<<CALLBLT  8184<<CALLBLT  8188<<CALLBLT  8206--ASSIGN   8266<<CALLBLT
      8270<<CALLBLT  8273<<CALLBLT
SUB_BLOCKS
      7121**DCL      7629<<ASSIGN   7633<<ASSIGN   7676<<ASSIGN   7676>>ASSIGN   7679>>IF
SYS
      5958**DCL      5884--DCLINIT
TEMP
      6888**DCL      7522<<ASSIGN   7523>>IF       7528>>ASSIGN   7529>>ASSIGN   8030<<ASSIGN   8031>>ASSIGN
TESTBUF
      7111**DCL      7113--REDEF    7368--ASSIGN   7371>>IF
TEXT$
      7278**DCL      7828<<ASSIGN   7831>>ASSIGN   7833<<ASSIGN   7841<>CALL
TWO_CHAR IN PROCEDURE PROCESS_ADD
      7619**DCL      7658<<ASSIGN
VLP_IMP
      5945**DCL      5883--DCLINIT
WRITE_ERR IN PROCEDURE DUMP_IMPFILE
      8154**LABEL    8147--CALLALT
XTX$ADAPT
      5775**DCL-ENT  5854--DCLINIT
XUH_PARAM.ERR
      5896**DCL      6025--DCLINIT
XUR$CLOSE_DCBS
      6918**DCL-ENT  7377--CALL     7486--CALL     7495--CALL
XUR$ERRMSG
      6915**DCL-ENT  7494--CALL     8011--CALL     8022--CALL
XUR$ERRPTR
      6908**DCL-ENT  8021--CALL
XUR$GETCMD
PL6.E3A0      #001=VC$IMP File=VCS$IMP.:E05TSI                                   WED 07/30/97 07:04 Page:183  
      6907**DCL-ENT  7440--CALL     7450--CALL
XUR$INIT
      6912**DCL-ENT  7340--CALL
XUR$SETERRMSG
      6917**DCL-ENT  7341--CALL
XUR_INIT
      5780**DCL      7340<>CALL
XUR_INIT.WORKR_
      5794**DCL      5795--REDEF
