

14:50 JUL 28 '97 KNA_MACRO_M.:E05SI                                        1    
    1      /*M* KNA_MACRO_M - KNA$SSN macro and related EQUs           */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8
    9      /*F* NAME: KNA$SSN
   10
   11      The KNA$SSN macro defines the Application Presentation Engine (APE)
   12      session context block.
   13
   14      One of these context blocks is allocated from the pool in the
   15      monitor's BOBCAT segment for each network address that an LCP6 user
   16      wishes to communicate with via DCB I/O.  The block is allocated at
   17      M$OPEN time of the first DCB directed towards the specified network
   18      address and the address of the allocated context block is remembered
   19      in M$DCB.SSN$.
   20
   21      There is no session context block on the host;  the information
   22      is containsed within the host LDCT.
   23
   24      KNA$SSN contains the following:
   25      */
   26      %MACRO KNA$SSN (FPTN=KNA$SSN,STCLASS=BASED);
   27      %LSET LISTDIR='0'B;
   28      %LSET LISTEXP='1'B;
   29      %LSET LISTCOM='0'B;
   30      %LSET LISTSUB='1'B;
   31      %LSET STR=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
   32      %IF (STR='STA') OR (STR='CON') OR (STR='EXT') OR (STR='DCB');
   33      %LSET INIT=CHARTEXT(' INIT');
   34      %LSET EINIT=CHARTEXT('');
   35      %ELSE;
   36      %LSET INIT=CHARTEXT('/*');
   37      %LSET EINIT=CHARTEXT('*/');
14:50 JUL 28 '97 KNA_MACRO_M.:E05SI                                        2    
   38      %ENDIF;
   39      %EJECT;

14:50 JUL 28 '97 KNA_MACRO_M.:E05SI                                        3    
   40      DCL 1 FPTN STCLASS CALIGNED,
   41            2 FLAGS,                              /* Status flags         */
   42      %IF NOT(MODE_FEP);
   43              3 * BIT(1),
   44      %ENDIF;
   45              3 REGGED       BIT(1),              /* MCL user is REGGED   */
   46              3 BLOCKED      BIT(1),              /* Blocked to data flow */
   47              3 CQ           BIT(1),              /* Waiting for CQ space */
   48              3 CG           BIT(1),              /* Set for comgroup cnc */
   49              3 SSNERR       BIT(1),              /* Session error        */
   50              3 PRIMARY      BIT(1),              /* Primary session */
   51              3 RRRPND       BIT(1),              /* RRR pending */
   52              3 MULT_STR     BIT(1),             /* Multiple usr streams on this ssn */
   53      %IF NOT(MODE_FEP);
   54              3 * BIT(1),
   55      %ENDIF;
   56              3 MRKPND       BIT(1),             /* A marker is pending */
   57              3 *            BIT(7),             /* Fill in the word     */
   58      %IF MODE_FEP;
   59           %VLP_ERRCODE (FPTN=ERROR,STCLASS=STCLASS,LVL=2,LAST=",");
   60      %ELSE;
   61             2 ERROR,
   62               3 FCG BIT(12) UNAL,
   63               3 MID BIT(6) UNAL,
   64               3 MON BIT(1) UNAL,
   65               3 ERR# UBIN(14) UNAL,
   66               3 SEV UBIN(3) UNAL,
   67      %ENDIF;
   68                                                 /* Error code            */
   69            2 LDCTX          UBIN(16) CALIGNED,           /*N* LDCTX for session  */
   70            2 LDCT$          PTR CALIGNED,        /* LDCT pointer         */
   71            2 NUMDCBS        UBIN(16) CALIGNED,           /* # DCBs on this Ssn   */
   72            2 THRTLVL,                            /* Throttling values    */
   73              3 MAXNMBBYT    UBIN(16) CALIGNED,           /* Maximum throttle     */
   74              3 MAXNMBRCR    UBIN(16) CALIGNED,           /* Maximum throttle     */
   75              3 MAXRCRBYTSIZ UBIN(16) CALIGNED,           /* Maximum throttle     */
   76              3 STR         UBIN(16) CALIGNED,           /* Stream flow control */
14:50 JUL 28 '97 KNA_MACRO_M.:E05SI                                        4    
   77      %IF (MODE_FEP);
   78            2 IOPQ$          PTR CALIGNED,        /* Head of I/O packet Q */
   79            2 IOPRD$         PTR CALIGNED,        /* Io packed for read */
   80            2 LNK$ REDEF IOPRD$ PTR CALIGNED,    /* Link when free chain */
   81      %ELSE;
   82            2 IOPQ$ UBIN(32) CALIGNED,
   83            2 IOPRD$ UBIN(32) CALIGNED,
   84      %ENDIF;
   85            2 RLCID CALIGNED,
   86              3 NODE# UBIN BYTE CALIGNED,
   87              3 NODE REDEF NODE# UBIN BYTE CALIGNED,
   88              3 GENERATION UBIN BYTE CALIGNED,
   89              3 LDCTX UBIN(16) CALIGNED,
   90            2 USER#          UBIN(16) CALIGNED,           /* User #               */
   91            2 REGRSN         UBIN(16) CALIGNED,       /* Reason for REGing - event# */
   92            2 STATE          UBIN(16) CALIGNED,           /* State of this SSN    */
   93            2 BLKREC,                             /* BLKREC */
   94              3 BLK#       UBIN(16) CALIGNED,
   95              3 REC#       UBIN(16) CALIGNED,
   96            2 EVENT UBIN(16) CALIGNED,             /* Event information */
   97            2 MARKER BIT(32) CALIGNED;           /* Marker */
   98      %MEND;
   99
  100
  101
  102      /*F* NAME: KNA_STATE_equ
  103      */
  104      %EQU KNA_STATE_WSSNINIT# = 1;               /* Waiting Session init */
  105      %EQU KNA_STATE_WSSNOPN#  = 2;               /* Waiting OPEN protocol*/
  106      %EQU KNA_STATE_ACTIVE#   = 3;               /* In data transfer mode*/
  107      %EQU KNA_STATE_DSC#      = 4;               /* Disconnect received */
  108      %EQU KNA_STATE_TERM#     = 5;               /* Terminate received */
  109      %EQU KNA_STATE_WTERM     = 6;               /* Waiting terminate ack */
  110
  111
  112
  113
14:50 JUL 28 '97 KNA_MACRO_M.:E05SI                                        5    
  114      /*F* NAME: KNA_SSNST_TXT
  115
  116      The KNA_SSNST_TXT macro generates the TEXT for
  117      the values in KNA$SSN.STATE.
  118      */
  119
  120      %MACRO KNA_SSNST_TXT (NAME=KNA_SSNST_TXT, STCLASS=CONSTANT);
  121
  122      %LSET LISTDIR='0'B;
  123      %LSET LISTEXP='1'B;
  124      %LSET LISTCOM='0'B;
  125      %LSET LISTSUB='1'B;
  126      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  127      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
  128      %LSET INIT=CHARTEXT('INIT');
  129      %LSET EINIT=CHARTEXT('');
  130      %ELSE;
  131      %LSET INIT=CHARTEXT('/*');
  132      %LSET EINIT=CHARTEXT('*/');
  133      %ENDIF;
  134
  135      DCL NAME(0:7) CHAR(6) STCLASS %INIT(
  136          '  0   ',
  137          'WSNINT',
  138          'WSNOPN',
  139          'ACTIVE',
  140          'DSC   ',
  141          'TRMRCV',
  142          'WTRMAC',
  143          '??????') %EINIT;
  144      %MEND;
  145
  146
  147
  148
  149      /*F* NAME: KNA_SSNFLAG_TEXT
  150
14:50 JUL 28 '97 KNA_MACRO_M.:E05SI                                        6    
  151      The KNA_SSNFLAG_TEXT macro generates the text for the
  152      bit settings in KNA$SSN.FLAGS.
  153      */
  154
  155      %MACRO KNA_SSNFLAG_TEXT (NAME=KNA_SSNFLAG_TEXT, STCLASS=CONSTANT);
  156
  157      %LSET LISTDIR='0'B;
  158      %LSET LISTEXP='1'B;
  159      %LSET LISTCOM='0'B;
  160      %LSET LISTSUB='1'B;
  161
  162      DCL 1 NAME STCLASS,
  163            2 * CHAR(0) INIT('FLAGS  '),
  164            2 SREST CHAR(0) UNAL INIT('set:     '),
  165            2 * CHAR(0) INIT('%1N(%)'),
  166            2 * CHAR(0) INIT('%1N(Regged  %)'),
  167            2 * CHAR(0) INIT('%1N(Blocked %)'),
  168            2 * CHAR(0) INIT('%1N(Wait_CQ %)'),
  169            2 * CHAR(0) INIT('%1N(CG      %)'),
  170            2 * CHAR(0) INIT('%1N(SSN_Err %)'),
  171            2 * CHAR(0) INIT('%1N(Primary %)'),
  172            2 * CHAR(0) INIT('%1N(RRR_Pnd %)'),
  173            2 * CHAR(0) INIT('%1N(Multstr %)'),
  174            2 * CHAR(0) INIT('%1N(%)'),
  175            2 * CHAR(0) INIT('%1N(Mrkpnd  %)'),
  176            2 * CHAR(0) INIT('%S');
  177      %MEND;
  178

