VERSION E05

PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:1    
        1        1        /*M* DUS$GETQSCH Setup to access in memory schema */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
        8        8        /*F* NAME: DUS$GETQSCH
        9        9             PURPOSE: To setup to access the schema specified by S_D.QSCH.
       10       10             DESCRIPTION: Initializes the access variables in S_D. Reads the
       11       11                          logical block record into memory, allocating memory
       12       12                          in page size chunks as needed. The logical block record
       13       13                          entry 1 (B$LBNTRY1) specifies the page size of the remaining
       14       14                          debug records. Memory is allocated & the appropriate
       15       15                          access variables are setup for the executable statements,
       16       16                          debug names, internal entrys, and variables in the order
       17       17                          just specified. Altreturns only if the logical block
       18       18                          record could not be accessed, else returns. */
       19       19        /*D* NAME: DDS$GETQSCH
       20       20             CALL: CALL DDS$GETQSCH ALTRET( can't do );
       21       21             INTERFACE: DDM$GETMEM
       22       22                        DDM$PUTMEM
       23       23                        DDQ$READLM
       24       24             ENVIRONMENT: Delta.
       25       25             INPUT: S_D.QSCH - describes which schema to setup access to.
       26       26             OUTPUT: S_D.QSCH.OK - set if successful.
       27       27                     S_D.DBG$ - ptr to beginning of debug names page.
       28       28                     S_D.EXST$ - ptr to beginning of executable statements page.
       29       29                     S_D.IE$ - ptr to beginning of internal entrys page.
       30       30                     S_D.VREBL$ - ptr to beginning of variables page.
       31       31                     S_D.SCHSEG$ - ptr to next unallocated word of schema data segment.
       32       32             SCRATCH: Local auto.
       33       33             DESCRIPTION: Initializes the access variables in S_D. Reads the
       34       34                          logical block record into memory, allocating memory
       35       35                          in page size chunks as needed. The logical block record
       36       36                          entry 1 (B$LBNTRY1) specifies the page size of the remaining
       37       37                          debug records. Memory is allocated & the appropriate
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:2    
       38       38                          access variables are setup for the executable statements,
       39       39                          debug names, variables, and internal entrys in the order
       40       40                          just specified. Altreturns only if the logical block
       41       41                          record could not be accessed, else returns. */
       42       42                                                /**/
       43       43        DDS$GETQSCH: PROC ALTRET;
       44       44                                                /**/
       45       45    1   DCL ARS SBIN;
       46       46    1   DCL TOGET SBIN;
       47       47    1   DCL USED SBIN;
       48       48    1   DCL LEFT SBIN;
       49       49    1   DCL WANTED SBIN;
       50       50    1   DCL TEMP$ PTR;
       51       51        %INCLUDE B$OBJECT_C;
       52     3481        %B$LBNTRY0;
       53     3517        %B$LBNTRY1;
       54     3544        %B$LOGBLK;
       55     3575        %B$RECORDSUBS;
       56     3603        %INCLUDE XUH_MACRO_C;
       57     3687        %INCLUDE DD_SD_M;
       58     5023        %S_D;
       59     6341        %S_D_PTRS;
       60     6378        %SUB @ZERO=0 /* @ZERO */;
       61     6379        %SUB @PAGESIZE =1024 /* @PAGESIZE */;
       62     6380    1   DCL DDM$GETMEM ENTRY(3) ALTRET;
       63     6381    1   DCL DDM$PUTMEM ENTRY(3) ALTRET;
       64     6382    1   DCL DDQ$READLM ENTRY(7) ALTRET;
       65     6383                                                /**/
       66     6384                                                /* Initialization */
       67     6385    1        IF S_D.LB0$ = ADDR( NIL )
       68     6386    1        THEN GOTO NORECORD;                /* No ENTDEFs or memory for LB record */
       69     6387    1        S_D.DBG$ = ADDR( NIL );
       70     6388    1        S_D.EXST$ = ADDR( NIL );
       71     6389    1        S_D.IE$ = ADDR( NIL );
       72     6390    1        S_D.VREBL$ = ADDR( NIL );
       73     6391    1        S_D.DBG_PAGE = -1;
       74     6392    1        S_D.EXST_PAGE = -1;
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:3    
       75     6393    1        S_D.IE_PAGE = -1;
       76     6394    1        S_D.VREBL_PAGE = -1;
       77     6395                                                /* Get logical block record */
       78     6396    1   REREAD:
       79     6397    1        ARS = -1;
       80     6398    1        TOGET = POFFW( S_D.SCHSEG$, S_D.LB0$ ); /* Fake it first time thru */
       81     6399    1        IF TOGET > 0
       82     6400    1        THEN CALL DDQ$READLM( %TYPLOGBLK, @ZERO, S_D.QSCH.NODE, S_D.LB0$, TOGET*4, ARS,
              6400                 S_D.QSCH.NPOINTER ) ALTRET( NORECORD );
       83     6401    1        IF ARS < 0                         /* Lost data ? */
       84     6402    2        THEN DO;
       85     6403    2             TOGET = @PAGESIZE - MOD( POFFW( S_D.SCHSEG$, S_D_SEG$), @PAGESIZE );
       86     6404    2             CALL DDM$GETMEM( S_D.SCHSEG$, TOGET ) ALTRET( NOMEMORY );
       87     6405    2             S_D.SCHSEG$ = PINCRW( S_D.SCHSEG$, TOGET );
       88     6406    2             GOTO REREAD;
       89     6407    2           END;
       90     6408    1        IF ARS < SIZEC( B$LBNTRY0 ) + SIZEC( B$LBNTRY1 ) + SIZEC( B$LOGBLK )
       91     6409    1        THEN GOTO NORECORD;                /* Too small is not enough */
       92     6410                                                /* Got logical block record */
       93     6411    1        S_D.QSCH.OK = '1'B;
       94     6412    1        TOGET = POFFW( S_D.SCHSEG$, S_D.LB0$ );
       95     6413    1        USED = ARS / 4;
       96     6414    1        LEFT = TOGET - USED;
       97     6415    1        S_D.LB_EYOND$ = PINCRW( S_D.LB0$, USED );
       98     6416    1        S_D.LB1$ = PINCRW( S_D.LB0$, SIZEW( B$LBNTRY0 ) );
       99     6417    1        S_D.LB$ = PINCRW( S_D.LB1$, SIZEW( B$LBNTRY1 ) );
      100     6418                            /* Allocate memory for EXST, DBG, IE, & VREBL records */
      101     6419    1        TEMP$ = S_D.LB_EYOND$;
      102     6420    1        WANTED = S_D.LB1$ -> B$LBNTRY1.STMNTPSIZ;
      103     6421    1        CALL ALLOCATE( S_D.EXST$ ) ALTRET( CLEANUP );
      104     6422    1        WANTED = S_D.LB1$ -> B$LBNTRY1.NAMPSIZ;
      105     6423    1        CALL ALLOCATE( S_D.DBG$ ) ALTRET( CLEANUP );
      106     6424    1        WANTED = S_D.LB1$ -> B$LBNTRY1.INTRYPSIZ;
      107     6425    1        CALL ALLOCATE( S_D.IE$ ) ALTRET( CLEANUP );
      108     6426    1        WANTED = S_D.LB1$ -> B$LBNTRY1.VREBLPSIZ;
      109     6427    1        CALL ALLOCATE( S_D.VREBL$ ) ALTRET( CLEANUP );
      110     6428    1   CLEANUP:                                /* Not much to do! */
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:4    
      111     6429    1        RETURN;
      112     6430                                                /**/
      113     6431    1   NOMEMORY:
      114     6432    1        LEFT = POFFW( S_D.SCHSEG$, S_D.LB0$ );
      115     6433    1        IF LEFT > 0
      116     6434    2        THEN DO;
      117     6435    2             CALL DDM$PUTMEM( S_D.SCHSEG$, LEFT ); /* Ignore ALTRET */
      118     6436    2             S_D.SCHSEG$ = PINCRW( S_D.SCHSEG$, -LEFT );
      119     6437    2           END;
      120     6438    1   NORECORD:
      121     6439    1        ALTRETURN;
      122     6440        %EJECT;
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:5    
      123     6441        /*D* NAME: ALLOCATE
      124     6442             CALL: CALL ALLOCATE( LOC$ ) ALTRET( no memory );
      125     6443             INPUT: WANTED - number of words desired.
      126     6444                    TEMP$ - ptr to beyond last word allocated.
      127     6445             OUTPUT: LOC$ - ptr to where memory just allocated begins at.
      128     6446                     TEMP$ - ptr to beyond last word allocated.
      129     6447             DESCRIPTION: The number of words desired is obtained from the last
      130     6448                          page obtained for the logical block record, if any such
      131     6449                          memory is left. Otherwise, the number of words to be
      132     6450                          obtained is computed, and is obtained, and the bookeeping
      133     6451                          variables are updated. In the event that the desired
      134     6452                          memory cannot be obtained, then the altreturn is taken,
      135     6453                          else the normal return is taken. */
      136     6454                                                /**/
      137     6455    1   ALLOCATE: PROC( LOC$ ) ALTRET;
      138     6456                                                /**/
      139     6457    2   DCL LOC$ PTR;
      140     6458                                                /**/
      141     6459    2        IF WANTED = 0
      142     6460    2        THEN RETURN;                       /* Leave LOC$ as ADDR( NIL ) */
      143     6461    2        IF WANTED <= LEFT
      144     6462    3        THEN DO;
      145     6463    3             LEFT = LEFT - WANTED;
      146     6464    3             LOC$ = TEMP$;
      147     6465    3             TEMP$ = PINCRW( TEMP$, WANTED );
      148     6466    3             RETURN;
      149     6467    3           END;
      150     6468    2        TOGET = WANTED - LEFT;
      151     6469    2        CALL DDM$GETMEM( S_D.SCHSEG$, TOGET ) ALTRET( ARET );
      152     6470    2        LEFT = 0;
      153     6471    2        S_D.SCHSEG$ = PINCRW( S_D.SCHSEG$, TOGET );
      154     6472    2        LOC$ = TEMP$;
      155     6473    2        TEMP$ = PINCRW( TEMP$, WANTED );
      156     6474                                                /**/
      157     6475    2        RETURN;
      158     6476                                                /**/
      159     6477    2   ARET:
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:6    
      160     6478    2        ALTRETURN;
      161     6479                                                /**/
      162     6480    2   END ALLOCATE;
      163     6481                                                /**/
      164     6482    1   END DDS$GETQSCH;

PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:7    
--  Include file information  --

   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDS$GETQSCH.

   Procedure DDS$GETQSCH requires 220 words for executable code.
   Procedure DDS$GETQSCH requires 20 words of local(AUTO) storage.

    No errors detected in file DUS$GETQSCH.:E05TSI    .

PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:8    

 Object Unit name= DDS$GETQSCH                                File name= DUS$GETQSCH.:E05TOU
 UTS= JUL 29 '97 14:59:23.84 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   220    334  DDS$GETQSCH
    1  RoData even  none     2      2  DDS$GETQSCH

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        0  DDS$GETQSCH

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       7 DDQ$READLM
 yes     yes           Std       3 DDM$PUTMEM
 yes     yes           Std       3 DDM$GETMEM
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    S_D$                             r    S_D_SEG$                              B_VECTNIL
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:9    

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:10   


        1        1        /*M* DUS$GETQSCH Setup to access in memory schema */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
        8        8        /*F* NAME: DUS$GETQSCH
        9        9             PURPOSE: To setup to access the schema specified by S_D.QSCH.
       10       10             DESCRIPTION: Initializes the access variables in S_D. Reads the
       11       11                          logical block record into memory, allocating memory
       12       12                          in page size chunks as needed. The logical block record
       13       13                          entry 1 (B$LBNTRY1) specifies the page size of the remaining
       14       14                          debug records. Memory is allocated & the appropriate
       15       15                          access variables are setup for the executable statements,
       16       16                          debug names, internal entrys, and variables in the order
       17       17                          just specified. Altreturns only if the logical block
       18       18                          record could not be accessed, else returns. */
       19       19        /*D* NAME: DDS$GETQSCH
       20       20             CALL: CALL DDS$GETQSCH ALTRET( can't do );
       21       21             INTERFACE: DDM$GETMEM
       22       22                        DDM$PUTMEM
       23       23                        DDQ$READLM
       24       24             ENVIRONMENT: Delta.
       25       25             INPUT: S_D.QSCH - describes which schema to setup access to.
       26       26             OUTPUT: S_D.QSCH.OK - set if successful.
       27       27                     S_D.DBG$ - ptr to beginning of debug names page.
       28       28                     S_D.EXST$ - ptr to beginning of executable statements page.
       29       29                     S_D.IE$ - ptr to beginning of internal entrys page.
       30       30                     S_D.VREBL$ - ptr to beginning of variables page.
       31       31                     S_D.SCHSEG$ - ptr to next unallocated word of schema data segment.
       32       32             SCRATCH: Local auto.
       33       33             DESCRIPTION: Initializes the access variables in S_D. Reads the
       34       34                          logical block record into memory, allocating memory
       35       35                          in page size chunks as needed. The logical block record
       36       36                          entry 1 (B$LBNTRY1) specifies the page size of the remaining
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:11   
       37       37                          debug records. Memory is allocated & the appropriate
       38       38                          access variables are setup for the executable statements,
       39       39                          debug names, variables, and internal entrys in the order
       40       40                          just specified. Altreturns only if the logical block
       41       41                          record could not be accessed, else returns. */
       42       42                                                /**/
       43       43        DDS$GETQSCH: PROC ALTRET;

     43  0 000000   000000 700200 xent  DDS$GETQSCH  TSX0  ! X66_AUTO_0
         0 000001   000024 000000                    ZERO    20,0

       44       44                                                /**/
       45       45    1   DCL ARS SBIN;
       46       46    1   DCL TOGET SBIN;
       47       47    1   DCL USED SBIN;
       48       48    1   DCL LEFT SBIN;
       49       49    1   DCL WANTED SBIN;
       50       50    1   DCL TEMP$ PTR;
       51       51        %INCLUDE B$OBJECT_C;
       52     3481        %B$LBNTRY0;
       53     3517        %B$LBNTRY1;
       54     3544        %B$LOGBLK;
       55     3575        %B$RECORDSUBS;
       56     3603        %INCLUDE XUH_MACRO_C;
       57     3687        %INCLUDE DD_SD_M;
       58     5023        %S_D;
       59     6341        %S_D_PTRS;
       60     6378        %SUB @ZERO=0 /* @ZERO */;
       61     6379        %SUB @PAGESIZE =1024 /* @PAGESIZE */;
       62     6380    1   DCL DDM$GETMEM ENTRY(3) ALTRET;
       63     6381    1   DCL DDM$PUTMEM ENTRY(3) ALTRET;
       64     6382    1   DCL DDQ$READLM ENTRY(7) ALTRET;
       65     6383                                                /**/
       66     6384                                                /* Initialization */
       67     6385    1        IF S_D.LB0$ = ADDR( NIL )

   6385  0 000002   000000 470400 xsym               LDP0    S_D$
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:12   
         0 000003   001035 236100                    LDQ     541,,PR0
         0 000004   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000005   000254 600000 0                  TZE     NORECORD

       68     6386    1        THEN GOTO NORECORD;                /* No ENTDEFs or memory for LB record */
       69     6387    1        S_D.DBG$ = ADDR( NIL );

   6387  0 000006   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000007   001005 756100                    STQ     517,,PR0

       70     6388    1        S_D.EXST$ = ADDR( NIL );

   6388  0 000010   001010 756100                    STQ     520,,PR0

       71     6389    1        S_D.IE$ = ADDR( NIL );

   6389  0 000011   001013 756100                    STQ     523,,PR0

       72     6390    1        S_D.VREBL$ = ADDR( NIL );

   6390  0 000012   001016 756100                    STQ     526,,PR0

       73     6391    1        S_D.DBG_PAGE = -1;

   6391  0 000013   000001 335007                    LCA     1,DL
         0 000014   001007 755100                    STA     519,,PR0

       74     6392    1        S_D.EXST_PAGE = -1;

   6392  0 000015   001012 755100                    STA     522,,PR0

       75     6393    1        S_D.IE_PAGE = -1;

   6393  0 000016   001015 755100                    STA     525,,PR0

       76     6394    1        S_D.VREBL_PAGE = -1;

PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:13   
   6394  0 000017   001020 755100                    STA     528,,PR0

       77     6395                                                /* Get logical block record */
       78     6396    1   REREAD:
       79     6397    1        ARS = -1;

   6397  0 000020   000001 335007       REREAD       LCA     1,DL
         0 000021   200003 755100                    STA     ARS,,AUTO

       80     6398    1        TOGET = POFFW( S_D.SCHSEG$, S_D.LB0$ ); /* Fake it first time thru */

   6398  0 000022   000000 470400 xsym               LDP0    S_D$
         0 000023   001035 236100                    LDQ     541,,PR0
         0 000024   000022 772000                    QRL     18
         0 000025   200014 756100                    STQ     @LOC$+1,,AUTO
         0 000026   001034 236100                    LDQ     540,,PR0
         0 000027   000022 772000                    QRL     18
         0 000030   200014 136100                    SBLQ    @LOC$+1,,AUTO
         0 000031   200004 756100                    STQ     TOGET,,AUTO

       81     6399    1        IF TOGET > 0

   6399  0 000032   000062 604400 0                  TMOZ    s:6401

       82     6400    1       THEN CALL DDQ$READLM( %TYPLOGBLK, @ZERO, S_D.QSCH.NODE, S_D.LB0$, TOGET*4, ARS,
              6400                 S_D.QSCH.NPOINTER ) ALTRET( NORECORD );

   6400  0 000033   200004 235100                    LDA     TOGET,,AUTO
         0 000034   000002 735000                    ALS     2
         0 000035   200014 755100                    STA     @LOC$+1,,AUTO
         0 000036   000000 236000 xsym               LDQ     S_D$
         0 000037   000736 036003                    ADLQ    478,DU
         0 000040   200023 756100                    STQ     @LOC$+8,,AUTO
         0 000041   200003 631500                    EPPR1   ARS,,AUTO
         0 000042   200022 451500                    STP1    @LOC$+7,,AUTO
         0 000043   200014 633500                    EPPR3   @LOC$+1,,AUTO
         0 000044   200021 453500                    STP3    @LOC$+6,,AUTO
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:14   
         0 000045   000000 236000 xsym               LDQ     S_D$
         0 000046   001035 036003                    ADLQ    541,DU
         0 000047   200020 756100                    STQ     @LOC$+5,,AUTO
         0 000050   000000 236000 xsym               LDQ     S_D$
         0 000051   000735 036003                    ADLQ    477,DU
         0 000052   000000 235000 1                  LDA     0
         0 000053   200016 757100                    STAQ    @LOC$+3,,AUTO
         0 000054   000001 236000 1                  LDQ     1
         0 000055   200015 756100                    STQ     @LOC$+2,,AUTO
         0 000056   200015 630500                    EPPR0   @LOC$+2,,AUTO
         0 000057   000025 631400 xsym               EPPR1   B_VECTNIL+21
         0 000060   000000 701000 xent               TSX1    DDQ$READLM
         0 000061   000254 702000 0                  TSX2    NORECORD

       83     6401    1        IF ARS < 0                         /* Lost data ? */

   6401  0 000062   200003 235100                    LDA     ARS,,AUTO
         0 000063   000116 605000 0                  TPL     s:6408

       84     6402    2        THEN DO;

       85     6403    2             TOGET = @PAGESIZE - MOD( POFFW( S_D.SCHSEG$, S_D_SEG$), @PAGESIZE );

   6403  0 000064   000000 236000 xsym               LDQ     S_D_SEG$
         0 000065   000022 772000                    QRL     18
         0 000066   200014 756100                    STQ     @LOC$+1,,AUTO
         0 000067   000000 470400 xsym               LDP0    S_D$
         0 000070   001034 236100                    LDQ     540,,PR0
         0 000071   000022 772000                    QRL     18
         0 000072   200014 136100                    SBLQ    @LOC$+1,,AUTO
         0 000073   002000 506007                    DIV     1024,DL
         0 000074   000027 675000 xsym               ERA     B_VECTNIL+23
         0 000075   002001 035007                    ADLA    1025,DL
         0 000076   200004 755100                    STA     TOGET,,AUTO

       86     6404    2             CALL DDM$GETMEM( S_D.SCHSEG$, TOGET ) ALTRET( NOMEMORY );

PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:15   
   6404  0 000077   200004 631500                    EPPR1   TOGET,,AUTO
         0 000100   200015 451500                    STP1    @LOC$+2,,AUTO
         0 000101   000000 236000 xsym               LDQ     S_D$
         0 000102   001034 036003                    ADLQ    540,DU
         0 000103   200014 756100                    STQ     @LOC$+1,,AUTO
         0 000104   200014 630500                    EPPR0   @LOC$+1,,AUTO
         0 000105   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000106   000000 701000 xent               TSX1    DDM$GETMEM
         0 000107   000223 702000 0                  TSX2    NOMEMORY

       87     6405    2             S_D.SCHSEG$ = PINCRW( S_D.SCHSEG$, TOGET );

   6405  0 000110   000000 470400 xsym               LDP0    S_D$
         0 000111   001034 471500                    LDP1    540,,PR0
         0 000112   200004 720100                    LXL0    TOGET,,AUTO
         0 000113   100000 633510                    EPPR3   0,X0,PR1
         0 000114   001034 453500                    STP3    540,,PR0

       88     6406    2             GOTO REREAD;

   6406  0 000115   000020 710000 0                  TRA     REREAD

       89     6407    2           END;
       90     6408    1        IF ARS < SIZEC( B$LBNTRY0 ) + SIZEC( B$LBNTRY1 ) + SIZEC( B$LOGBLK )

   6408  0 000116   000060 115007                    CMPA    48,DL
         0 000117   000254 604000 0                  TMI     NORECORD

       91     6409    1        THEN GOTO NORECORD;                /* Too small is not enough */
       92     6410                                                /* Got logical block record */
       93     6411    1        S_D.QSCH.OK = '1'B;

   6411  0 000120   400000 236003                    LDQ     -131072,DU
         0 000121   000000 470400 xsym               LDP0    S_D$
         0 000122   000733 756100                    STQ     475,,PR0

       94     6412    1        TOGET = POFFW( S_D.SCHSEG$, S_D.LB0$ );
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:16   

   6412  0 000123   001035 236100                    LDQ     541,,PR0
         0 000124   000022 772000                    QRL     18
         0 000125   200014 756100                    STQ     @LOC$+1,,AUTO
         0 000126   001034 236100                    LDQ     540,,PR0
         0 000127   000022 772000                    QRL     18
         0 000130   200014 136100                    SBLQ    @LOC$+1,,AUTO
         0 000131   200004 756100                    STQ     TOGET,,AUTO

       95     6413    1        USED = ARS / 4;

   6413  0 000132   200003 236100                    LDQ     ARS,,AUTO
         0 000133   000004 506007                    DIV     4,DL
         0 000134   200005 756100                    STQ     USED,,AUTO

       96     6414    1        LEFT = TOGET - USED;

   6414  0 000135   200004 236100                    LDQ     TOGET,,AUTO
         0 000136   200005 136100                    SBLQ    USED,,AUTO
         0 000137   200006 756100                    STQ     LEFT,,AUTO

       97     6415    1        S_D.LB_EYOND$ = PINCRW( S_D.LB0$, USED );

   6415  0 000140   001035 471500                    LDP1    541,,PR0
         0 000141   200005 720100                    LXL0    USED,,AUTO
         0 000142   100000 633510                    EPPR3   0,X0,PR1
         0 000143   001040 453500                    STP3    544,,PR0

       98     6416    1        S_D.LB1$ = PINCRW( S_D.LB0$, SIZEW( B$LBNTRY0 ) );

   6416  0 000144   001035 236100                    LDQ     541,,PR0
         0 000145   000004 036003                    ADLQ    4,DU
         0 000146   001036 756100                    STQ     542,,PR0

       99     6417    1        S_D.LB$ = PINCRW( S_D.LB1$, SIZEW( B$LBNTRY1 ) );

   6417  0 000147   000004 036003                    ADLQ    4,DU
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:17   
         0 000150   001037 756100                    STQ     543,,PR0

      100     6418                            /* Allocate memory for EXST, DBG, IE, & VREBL records */
      101     6419    1        TEMP$ = S_D.LB_EYOND$;

   6419  0 000151   001040 236100                    LDQ     544,,PR0
         0 000152   200010 756100                    STQ     TEMP$,,AUTO

      102     6420    1        WANTED = S_D.LB1$ -> B$LBNTRY1.STMNTPSIZ;

   6420  0 000153   001036 474500                    LDP4    542,,PR0
         0 000154   400001 236100                    LDQ     1,,PR4
         0 000155   777777 376007                    ANQ     -1,DL
         0 000156   200007 756100                    STQ     WANTED,,AUTO

      103     6421    1        CALL ALLOCATE( S_D.EXST$ ) ALTRET( CLEANUP );

   6421  0 000157   000000 236000 xsym               LDQ     S_D$
         0 000160   001010 036003                    ADLQ    520,DU
         0 000161   200013 756100                    STQ     TEMP$+3,,AUTO
         0 000162   000255 701000 0                  TSX1    ALLOCATE
         0 000163   000222 702000 0                  TSX2    CLEANUP

      104     6422    1        WANTED = S_D.LB1$ -> B$LBNTRY1.NAMPSIZ;

   6422  0 000164   000000 470400 xsym               LDP0    S_D$
         0 000165   001036 471500                    LDP1    542,,PR0
         0 000166   100000 236100                    LDQ     0,,PR1
         0 000167   777777 376007                    ANQ     -1,DL
         0 000170   200007 756100                    STQ     WANTED,,AUTO

      105     6423    1        CALL ALLOCATE( S_D.DBG$ ) ALTRET( CLEANUP );

   6423  0 000171   000000 236000 xsym               LDQ     S_D$
         0 000172   001005 036003                    ADLQ    517,DU
         0 000173   200013 756100                    STQ     TEMP$+3,,AUTO
         0 000174   000255 701000 0                  TSX1    ALLOCATE
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:18   
         0 000175   000222 702000 0                  TSX2    CLEANUP

      106     6424    1        WANTED = S_D.LB1$ -> B$LBNTRY1.INTRYPSIZ;

   6424  0 000176   000000 470400 xsym               LDP0    S_D$
         0 000177   001036 471500                    LDP1    542,,PR0
         0 000200   100003 236100                    LDQ     3,,PR1
         0 000201   777777 376007                    ANQ     -1,DL
         0 000202   200007 756100                    STQ     WANTED,,AUTO

      107     6425    1        CALL ALLOCATE( S_D.IE$ ) ALTRET( CLEANUP );

   6425  0 000203   000000 236000 xsym               LDQ     S_D$
         0 000204   001013 036003                    ADLQ    523,DU
         0 000205   200013 756100                    STQ     TEMP$+3,,AUTO
         0 000206   000255 701000 0                  TSX1    ALLOCATE
         0 000207   000222 702000 0                  TSX2    CLEANUP

      108     6426    1        WANTED = S_D.LB1$ -> B$LBNTRY1.VREBLPSIZ;

   6426  0 000210   000000 470400 xsym               LDP0    S_D$
         0 000211   001036 471500                    LDP1    542,,PR0
         0 000212   100002 236100                    LDQ     2,,PR1
         0 000213   777777 376007                    ANQ     -1,DL
         0 000214   200007 756100                    STQ     WANTED,,AUTO

      109     6427    1        CALL ALLOCATE( S_D.VREBL$ ) ALTRET( CLEANUP );

   6427  0 000215   000000 236000 xsym               LDQ     S_D$
         0 000216   001016 036003                    ADLQ    526,DU
         0 000217   200013 756100                    STQ     TEMP$+3,,AUTO
         0 000220   000255 701000 0                  TSX1    ALLOCATE
         0 000221   000222 702000 0                  TSX2    CLEANUP

      110     6428    1   CLEANUP:                                /* Not much to do! */
      111     6429    1        RETURN;

PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:19   
   6429  0 000222   000000 702200 xent  CLEANUP      TSX2  ! X66_ARET

      112     6430                                                /**/
      113     6431    1   NOMEMORY:
      114     6432    1        LEFT = POFFW( S_D.SCHSEG$, S_D.LB0$ );

   6432  0 000223   000000 470400 xsym  NOMEMORY     LDP0    S_D$
         0 000224   001035 236100                    LDQ     541,,PR0
         0 000225   000022 772000                    QRL     18
         0 000226   200014 756100                    STQ     @LOC$+1,,AUTO
         0 000227   001034 236100                    LDQ     540,,PR0
         0 000230   000022 772000                    QRL     18
         0 000231   200014 136100                    SBLQ    @LOC$+1,,AUTO
         0 000232   200006 756100                    STQ     LEFT,,AUTO

      115     6433    1        IF LEFT > 0

   6433  0 000233   000254 604400 0                  TMOZ    NORECORD

      116     6434    2        THEN DO;

      117     6435    2             CALL DDM$PUTMEM( S_D.SCHSEG$, LEFT ); /* Ignore ALTRET */

   6435  0 000234   200006 631500                    EPPR1   LEFT,,AUTO
         0 000235   200015 451500                    STP1    @LOC$+2,,AUTO
         0 000236   000000 236000 xsym               LDQ     S_D$
         0 000237   001034 036003                    ADLQ    540,DU
         0 000240   200014 756100                    STQ     @LOC$+1,,AUTO
         0 000241   200014 630500                    EPPR0   @LOC$+1,,AUTO
         0 000242   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000243   000000 701000 xent               TSX1    DDM$PUTMEM
         0 000244   000000 011000                    NOP     0

      118     6436    2             S_D.SCHSEG$ = PINCRW( S_D.SCHSEG$, -LEFT );

   6436  0 000245   000000 470400 xsym               LDP0    S_D$
         0 000246   001034 471500                    LDP1    540,,PR0
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:20   
         0 000247   200006 720100                    LXL0    LEFT,,AUTO
         0 000250   777777 620010                    EAX0    -1,X0
         0 000251   777777 660003                    ERX0    -1,DU
         0 000252   100000 633510                    EPPR3   0,X0,PR1
         0 000253   001034 453500                    STP3    540,,PR0

      119     6437    2           END;

      120     6438    1   NORECORD:
      121     6439    1        ALTRETURN;

   6439  0 000254   000000 702200 xent  NORECORD     TSX2  ! X66_AALT

      122     6440        %EJECT;
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:21   
      123     6441        /*D* NAME: ALLOCATE
      124     6442             CALL: CALL ALLOCATE( LOC$ ) ALTRET( no memory );
      125     6443             INPUT: WANTED - number of words desired.
      126     6444                    TEMP$ - ptr to beyond last word allocated.
      127     6445             OUTPUT: LOC$ - ptr to where memory just allocated begins at.
      128     6446                     TEMP$ - ptr to beyond last word allocated.
      129     6447             DESCRIPTION: The number of words desired is obtained from the last
      130     6448                          page obtained for the logical block record, if any such
      131     6449                          memory is left. Otherwise, the number of words to be
      132     6450                          obtained is computed, and is obtained, and the bookeeping
      133     6451                          variables are updated. In the event that the desired
      134     6452                          memory cannot be obtained, then the altreturn is taken,
      135     6453                          else the normal return is taken. */
      136     6454                                                /**/
      137     6455    1   ALLOCATE: PROC( LOC$ ) ALTRET;

   6455  0 000255   200012 741300       ALLOCATE     STX1  ! TEMP$+2,,AUTO

      138     6456                                                /**/
      139     6457    2   DCL LOC$ PTR;
      140     6458                                                /**/
      141     6459    2        IF WANTED = 0

   6459  0 000256   200007 235100                    LDA     WANTED,,AUTO
         0 000257   000261 601000 0                  TNZ     s:6461

      142     6460    2        THEN RETURN;                       /* Leave LOC$ as ADDR( NIL ) */

   6460  0 000260   000001 702211                    TSX2  ! 1,X1

      143     6461    2        IF WANTED <= LEFT

   6461  0 000261   200007 236100                    LDQ     WANTED,,AUTO
         0 000262   200006 116100                    CMPQ    LEFT,,AUTO
         0 000263   000300 605400 0                  TPNZ    s:6468

      144     6462    3        THEN DO;
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:22   

      145     6463    3             LEFT = LEFT - WANTED;

   6463  0 000264   200006 236100                    LDQ     LEFT,,AUTO
         0 000265   200007 136100                    SBLQ    WANTED,,AUTO
         0 000266   200006 756100                    STQ     LEFT,,AUTO

      146     6464    3             LOC$ = TEMP$;

   6464  0 000267   200010 236100                    LDQ     TEMP$,,AUTO
         0 000270   200013 470500                    LDP0    @LOC$,,AUTO
         0 000271   000000 756100                    STQ     0,,PR0

      147     6465    3             TEMP$ = PINCRW( TEMP$, WANTED );

   6465  0 000272   200007 236100                    LDQ     WANTED,,AUTO
         0 000273   000022 736000                    QLS     18
         0 000274   200010 036100                    ADLQ    TEMP$,,AUTO
         0 000275   200010 756100                    STQ     TEMP$,,AUTO

      148     6466    3             RETURN;

   6466  0 000276   200012 221300                    LDX1  ! TEMP$+2,,AUTO
         0 000277   000001 702211                    TSX2  ! 1,X1

      149     6467    3           END;
      150     6468    2        TOGET = WANTED - LEFT;

   6468  0 000300   200006 136100                    SBLQ    LEFT,,AUTO
         0 000301   200004 756100                    STQ     TOGET,,AUTO

      151     6469    2        CALL DDM$GETMEM( S_D.SCHSEG$, TOGET ) ALTRET( ARET );

   6469  0 000302   200004 630500                    EPPR0   TOGET,,AUTO
         0 000303   200015 450500                    STP0    @LOC$+2,,AUTO
         0 000304   000000 236000 xsym               LDQ     S_D$
         0 000305   001034 036003                    ADLQ    540,DU
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:23   
         0 000306   200014 756100                    STQ     @LOC$+1,,AUTO
         0 000307   200014 630500                    EPPR0   @LOC$+1,,AUTO
         0 000310   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000311   000000 701000 xent               TSX1    DDM$GETMEM
         0 000312   000332 702000 0                  TSX2    ARET

      152     6470    2        LEFT = 0;

   6470  0 000313   200006 450100                    STZ     LEFT,,AUTO

      153     6471    2        S_D.SCHSEG$ = PINCRW( S_D.SCHSEG$, TOGET );

   6471  0 000314   000000 470400 xsym               LDP0    S_D$
         0 000315   001034 471500                    LDP1    540,,PR0
         0 000316   200004 720100                    LXL0    TOGET,,AUTO
         0 000317   100000 633510                    EPPR3   0,X0,PR1
         0 000320   001034 453500                    STP3    540,,PR0

      154     6472    2        LOC$ = TEMP$;

   6472  0 000321   200010 236100                    LDQ     TEMP$,,AUTO
         0 000322   200013 471500                    LDP1    @LOC$,,AUTO
         0 000323   100000 756100                    STQ     0,,PR1

      155     6473    2        TEMP$ = PINCRW( TEMP$, WANTED );

   6473  0 000324   200007 236100                    LDQ     WANTED,,AUTO
         0 000325   000022 736000                    QLS     18
         0 000326   200010 036100                    ADLQ    TEMP$,,AUTO
         0 000327   200010 756100                    STQ     TEMP$,,AUTO

      156     6474                                                /**/
      157     6475    2        RETURN;

   6475  0 000330   200012 221300                    LDX1  ! TEMP$+2,,AUTO
         0 000331   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:24   
      158     6476                                                /**/
      159     6477    2   ARET:
      160     6478    2        ALTRETURN;

   6478  0 000332   200012 221300       ARET         LDX1  ! TEMP$+2,,AUTO
         0 000333   000000 702211                    TSX2  ! 0,X1

(unnamed)
 Sect OctLoc
   1     000   000002 006000   000015 006000                                    ........
      161     6479                                                /**/
      162     6480    2   END ALLOCATE;
      163     6481                                                /**/
      164     6482    1   END DDS$GETQSCH;

PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:25   
--  Include file information  --

   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDS$GETQSCH.

   Procedure DDS$GETQSCH requires 220 words for executable code.
   Procedure DDS$GETQSCH requires 20 words of local(AUTO) storage.

    No errors detected in file DUS$GETQSCH.:E05TSI    .
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:26   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:27   
          MINI XREF LISTING

ALLOCATE
      6455**PROC     6421--CALL     6423--CALL     6425--CALL     6427--CALL
ARET IN PROCEDURE ALLOCATE
      6478**LABEL    6469--CALLALT
ARS
        45**DCL      6397<<ASSIGN   6400<>CALL     6401>>IF       6408>>IF       6413>>ASSIGN
B$LBNTRY0
      3482**DCL      6408--IF       6416--ASSIGN
B$LBNTRY0.NO_AUTO
      3508**DCL      3513--REDEF
B$LBNTRY0.VERSION
      3497**DCL      3499--REDEF
B$LBNTRY1
      3518**DCL      6408--IF       6417--ASSIGN
B$LBNTRY1.INTRYPSIZ
      3540**DCL      6424>>ASSIGN
B$LBNTRY1.NAMPSIZ
      3522**DCL      6422>>ASSIGN
B$LBNTRY1.STMNTPSIZ
      3528**DCL      6420>>ASSIGN
B$LBNTRY1.VREBLPSIZ
      3534**DCL      6426>>ASSIGN
B$LOGBLK
      3545**DCL      6408--IF
CLEANUP
      6429**LABEL    6421--CALLALT  6423--CALLALT  6425--CALLALT  6427--CALLALT
DDM$GETMEM
      6380**DCL-ENT  6404--CALL     6469--CALL
DDM$PUTMEM
      6381**DCL-ENT  6435--CALL
DDQ$READLM
      6382**DCL-ENT  6400--CALL
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:28   
LEFT
        48**DCL      6414<<ASSIGN   6432<<ASSIGN   6433>>IF       6435<>CALL     6436>>ASSIGN   6461>>IF
      6463<<ASSIGN   6463>>ASSIGN   6468>>ASSIGN   6470<<ASSIGN
LOC$ IN PROCEDURE ALLOCATE
      6457**DCL      6455--PROC     6464<<ASSIGN   6472<<ASSIGN
NOMEMORY
      6432**LABEL    6404--CALLALT
NORECORD
      6439**LABEL    6386--GOTO     6400--CALLALT  6409--GOTO
REREAD
      6397**LABEL    6406--GOTO
S_D.CURRENT_CHANNEL
      5975**DCL      5977--REDEF
S_D.DBG$
      5425**DCL      6387<<ASSIGN   6423<>CALL
S_D.DBG_PAGE
      5429**DCL      6391<<ASSIGN
S_D.DEBUGA
      5127**DCL      5129--REDEF
S_D.EIS
      6085**DCL      6114--REDEF
S_D.EXST$
      5431**DCL      6388<<ASSIGN   6421<>CALL
S_D.EXST_PAGE
      5435**DCL      6392<<ASSIGN
S_D.HOST_MESSAGE_BUF_REMOTE
      6018**DCL      6019--REDEF    6033--REDEF
S_D.IE$
      5437**DCL      6389<<ASSIGN   6425<>CALL
S_D.IE_PAGE
      5441**DCL      6393<<ASSIGN
S_D.JDE
      5632**DCL      5633--REDEF
S_D.L$.VALUE
      5185**DCL      5191--REDEF    5199--REDEF    5202--REDEF    5205--REDEF    5208--REDEF
S_D.L$.VALUE.L
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:29   
      5186**DCL      5187--REDEF    5188--REDEF
S_D.L6_MESSAGE_BUF
      6039**DCL      6041--REDEF
S_D.LB$
      5465**DCL      6417<<ASSIGN
S_D.LB0$
      5461**DCL      6385>>IF       6398>>ASSIGN   6400<>CALL     6412>>ASSIGN   6415>>ASSIGN   6416>>ASSIGN
      6432>>ASSIGN
S_D.LB1$
      5463**DCL      6416<<ASSIGN   6417>>ASSIGN   6420>>ASSIGN   6422>>ASSIGN   6424>>ASSIGN   6426>>ASSIGN
S_D.LB_EYOND$
      5467**DCL      6415<<ASSIGN   6419>>ASSIGN
S_D.OUTPUT
      6005**DCL      6007--REDEF
S_D.QSCH.NODE
      5335**DCL      6400<>CALL
S_D.QSCH.NPOINTER
      5337**DCL      6400<>CALL
S_D.QSCH.OK
      5331**DCL      6411<<ASSIGN
S_D.REMOTE_MSG.FNCC
      6024**DCL      6025--REDEF
S_D.REMOTE_MSG.STXC
      6020**DCL      6021--REDEF
S_D.REMOTE_MSG.SUBFNCC
      6028**DCL      6029--REDEF
S_D.SCHSEG$
      5459**DCL      6398>>ASSIGN   6403>>ASSIGN   6404<>CALL     6405<<ASSIGN   6405>>ASSIGN   6412>>ASSIGN
      6432>>ASSIGN   6435<>CALL     6436<<ASSIGN   6436>>ASSIGN   6469<>CALL     6471<<ASSIGN   6471>>ASSIGN
S_D.SV
      5084**DCL      5105--REDEF
S_D.VREBL$
      5443**DCL      6390<<ASSIGN   6427<>CALL
S_D.VREBL_PAGE
      5447**DCL      6394<<ASSIGN
S_D$
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:30   
      6336**DCL      5032--IMP-PTR  6385>>IF       6387>>ASSIGN   6388>>ASSIGN   6389>>ASSIGN   6390>>ASSIGN
      6391>>ASSIGN   6392>>ASSIGN   6393>>ASSIGN   6394>>ASSIGN   6398>>ASSIGN   6398>>ASSIGN   6400>>CALL
      6400>>CALL     6400>>CALL     6403>>ASSIGN   6404>>CALL     6405>>ASSIGN   6405>>ASSIGN   6411>>ASSIGN
      6412>>ASSIGN   6412>>ASSIGN   6415>>ASSIGN   6415>>ASSIGN   6416>>ASSIGN   6416>>ASSIGN   6417>>ASSIGN
      6417>>ASSIGN   6419>>ASSIGN   6420>>ASSIGN   6421>>CALL     6422>>ASSIGN   6423>>CALL     6424>>ASSIGN
      6425>>CALL     6426>>ASSIGN   6427>>CALL     6432>>ASSIGN   6432>>ASSIGN   6435>>CALL     6436>>ASSIGN
      6436>>ASSIGN   6469>>CALL     6471>>ASSIGN   6471>>ASSIGN
S_D_SEG$
      6350**DCL      6403>>ASSIGN
TEMP$
        50**DCL      6419<<ASSIGN   6464>>ASSIGN   6465<<ASSIGN   6465>>ASSIGN   6472>>ASSIGN   6473<<ASSIGN
      6473>>ASSIGN
TOGET
        46**DCL      6398<<ASSIGN   6399>>IF       6400>>CALL     6403<<ASSIGN   6404<>CALL     6405>>ASSIGN
      6412<<ASSIGN   6414>>ASSIGN   6468<<ASSIGN   6469<>CALL     6471>>ASSIGN
USED
        47**DCL      6413<<ASSIGN   6414>>ASSIGN   6415>>ASSIGN
WANTED
        49**DCL      6420<<ASSIGN   6422<<ASSIGN   6424<<ASSIGN   6426<<ASSIGN   6459>>IF       6461>>IF
      6463>>ASSIGN   6465>>ASSIGN   6468>>ASSIGN   6473>>ASSIGN
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:31   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DDS$GETQSCH File=DUS$GETQSCH.:E05TSI                          TUE 07/29/97 14:59 Page:32   
              MINI UREF LISTING

DDS$GETQSCH      43**PROC
S_D_ACCESS$    6351**DCL
S_D_ANLZ$    6353**DCL
S_D_ASTACKOFF$    6352**DCL
S_D_BREAK$    6354**DCL
S_D_DO_SCAN$    6355**DCL
S_D_ERROR$    6356**DCL
S_D_FAULTCMD$$    6357**DCL
S_D_FAULTINS$$    6358**DCL
S_D_GOIC$    6359**DCL
S_D_GO_MODE$    6360**DCL
S_D_HOST_MESSAGE$    6372**DCL
S_D_HW_PTB_UNITS$    6376**DCL
S_D_HW_RES_MEM$    6374**DCL
S_D_HW_WSQ0PT$    6375**DCL
S_D_IPRFLT$    6362**DCL
S_D_IXFIX$    6361**DCL
S_D_L6_MESSAGE$    6373**DCL
S_D_REM_ACCESS$    6363**DCL
S_D_REM_DISKBOOT$    6365**DCL
S_D_REM_DO_SCAN$    6364**DCL
S_D_RETURNN$    6366**DCL
S_D_SAD$    6367**DCL
S_D_SAVEIC$    6368**DCL
S_D_TCB$$    6369**DCL
S_D_UREG$$    6370**DCL
S_D_USS$$    6371**DCL
