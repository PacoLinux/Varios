

14:44 JUL 28 '97 KA_LCT_E.:E05SI                                           1    
    1      /*M* KA_LCT Async handler LCT item definitions for MLCP-resident code */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /* */
    8      /* output asynchronous request.  this is the request number (selected */
    9      /* from the ga#otpasnrqs_... list) of an action to perform */
   10      /* asynchronously, relative to the output stream. */
   11      /* */
   12      %EQU KA_LCT_OTPASNRQS = KW#PWA1;
   13      %EQU KA_LCT_OTPASNRQS@S = 'FF'X;
   14      /* */
   15      /* input character. */
   16      /* */
   17      %EQU KA_LCT_INPCHR = KW#PWA2;
   18      %EQU KA_LCT_INPCHR@S = 'FF'X;
   19      /* */
   20      /* input character parity bit. */
   21      /* */
   22      %EQU KA_LCT_INPCHR_PRTBIT = KA_LCT_INPCHR;
   23      %EQU KA_LCT_INPCHR_PRTBIT@S = '80'X;
   24      /************************************************************************ */
   25      /*** warning:  the following byte is redefined.                       *** */
   26      /************************************************************************ */
   27      /* */
   28      /* output character */
   29      /* */
   30      %EQU KA_LCT_OTPCHR = KW#PWA3;
   31      %EQU KA_LCT_OTPCHR@S = 'FF'X;
   32      /* */
   33      /* output character's control string type, assuming the character */
   34      /* is the second character in a control string. */
   35      /* */
   36      %EQU KA_LCT_OTPCHR_CTRSTRTYP = KA_LCT_OTPCHR;
   37      %EQU KA_LCT_OTPCHR_CTRSTRTYP@S = 'C0'X;
14:44 JUL 28 '97 KA_LCT_E.:E05SI                                           2    
   38      /************************************************************************ */
   39      /*** warning:  the following byte is a redefinition of the above byte *** */
   40      /************************************************************************ */
   41      /* */
   42      /* auto-baud base line speed index. */
   43      /* */
   44      %EQU KA_LCT_BASLINSPDX = KA_LCT_OTPCHR;
   45      %EQU KA_LCT_BASLINSPDX@S = 'FF'X;
   46      /* */
   47      /* connect status. */
   48      /* */
   49      %EQU KA_LCT_CNCSTT = KW#PWA4;
   50      %EQU KA_LCT_CNCSTT@S = 'FF'X;
   51      /* */
   52      /* connect status:  disconnect has been detected and reported to the */
   53      /* l6 cpu. */
   54      /* */
   55      %EQU KA_LCT_CNCSTT_DSC = KA_LCT_CNCSTT;
   56      %EQU KA_LCT_CNCSTT_DSC@S = '80'X;
   57      /* */
   58      /* connect status:  logical connect has occurred.  if a disconnect */
   59      /* is detected, it should be reported. */
   60      /* */
   61      %EQU KA_LCT_CNCSTT_CNC = KA_LCT_CNCSTT;
   62      %EQU KA_LCT_CNCSTT_CNC@S = '40'X;
   63      /* */
   64      /* connect status:  disconnect (mechanism) armed.  the first time */
   65      /* dataset status indicates a disconnect, we set this bit and dummy */
   66      /* up the status so we'll get another interrupt for dataset scan if */
   67      /* the status continues to indicate a disconnect situation the next */
   68      /* time the mlcp scans dataset status.  this is to help prevent */
   69      /* needless disconnects caused by very short duration noise spikes */
   70      /* on the dataset status lines. */
   71      /* */
   72      %EQU KA_LCT_CNCSTT_DSCARM = KA_LCT_CNCSTT;
   73      %EQU KA_LCT_CNCSTT_DSCARM@S = '20'X;
   74      /* */
14:44 JUL 28 '97 KA_LCT_E.:E05SI                                           3    
   75      /* 8's parity bit.  this is the parity bit from the 8 that was typed */
   76      /* during the auto-baud sequence. */
   77      /* */
   78      %EQU KA_LCT_CNCSTT_8_PRTBIT = KA_LCT_CNCSTT;
   79      %EQU KA_LCT_CNCSTT_8_PRTBIT@S = '10'X;
   80      /* */
   81      /* wait-for-interrupt.  the receive ccp did a gnccb, didn't get a ccb, */
   82      /* and is now waiting for a ccb.  the l6 interrupts the ccp to say */
   83      /* that there is now a ccb available. */
   84      /* */
   85      %EQU KA_LCT_CNCSTT_WATFORINT = KA_LCT_CNCSTT;
   86      %EQU KA_LCT_CNCSTT_WATFORINT@S = '08'X;
   87      /* */
   88      /* stccb.  we're waiting for a ccb, and have a character to */
   89      /* store when we get the ccb. */
   90      /* */
   91      %EQU KA_LCT_CNCSTT_STCCB = KA_LCT_CNCSTT;
   92      %EQU KA_LCT_CNCSTT_STCCB@S = '04'X;
   93      /* */
   94      /* output mode:  purge.  set when a purge request is received, and */
   95      /* we're inhibiting purges.  this flag will be checked once we can */
   96      /* honor the purge request. */
   97      /* */
   98      %EQU KA_LCT_OTPMOD_PRG = KA_LCT_CNCSTT;
   99      %EQU KA_LCT_OTPMOD_PRG@S = '01'X;
  100      /***> there is 1 bit available in the above byte <*** */
  101      /************************************************************************ */
  102      /*** warning:  the following pair of bytes is redefined.              *** */
  103      /************************************************************************ */
  104      /* */
  105      /* output table pointer. */
  106      /* */
  107      %EQU KA_LCT_OTPTBL$ = KW#PWA5;
  108      /************************************************************************ */
  109      /*** warning:  the following bytes are a redefinition of              *** */
  110      /*** the above pair of bytes                                          *** */
  111      /************************************************************************ */
14:44 JUL 28 '97 KA_LCT_E.:E05SI                                           4    
  112      /* */
  113      /* auto-baud function table pointer. */
  114      /* */
  115      %EQU KA_LCT_AUTBADFNCTBL$ = KA_LCT_OTPTBL$;
  116      /************************************************************************ */
  117      /*** warning:  the following pair of bytes is redefined.              *** */
  118      /************************************************************************ */
  119      /* */
  120      /* auto-baud character table pointer.  points to y@autbadchrtbl */
  121      /* when we're doing auto-bauding. */
  122      /* */
  123      %EQU KA_LCT_AUTBADCHRTBL$ = KW#PWA7;
  124      /************************************************************************ */
  125      /*** warning:  the following bytes are a redefinition of              *** */
  126      /*** the above bytes                                                  *** */
  127      /************************************************************************ */
  128      /* */
  129      /* output control string count;  the count from a control string */
  130      /* that has a count. */
  131      /* */
  132      %EQU KA_LCT_OTPCTRSTRCNT = KA_LCT_AUTBADCHRTBL$;
  133      %EQU KA_LCT_OTPCTRSTRCNT@S = 'FF'X;
  134      /* */
  135      /* Status byte set only by the L6 program. */
  136      /* */
  137      %EQU KA_LCT_L6_STT = KW#PWA8;
  138      %EQU KA_LCT_L6_STT@S = 'FF'X;
  139      /* */
  140      /* polled mode.  Input characters are not to be accompanied by interrupts */
  141      /* the L6 program will collect the data with a polling routine. */
  142      /* */
  143      %EQU KA_LCT_L6_STT_PLD = KA_LCT_L6_STT;
  144      %EQU KA_LCT_L6_STT_PLD@S = '80'X;
  145      /* */
  146      /* saved receive (dataset) status.  this is the dataset status that we saved, */
  147      /* and is used for determining the cause of a receive interrupt. */
  148      /* if the current status doesn't match this, then this must be an */
14:44 JUL 28 '97 KA_LCT_E.:E05SI                                           5    
  149      /* interrupt request generated by dataset status scan. */
  150      /* */
  151      %EQU KA_LCT_SVDRCVSTT = KW#PWA9;
  152      %EQU KA_LCT_SVDRCVSTT@S = 'FF'X;
  153      /* */
  154      /* output parity bit.  this bit is or'ed into the character about */
  155      /* to be sent when the parity configuration is always 0 or always 1. */
  156      /* */
  157      %EQU KA_LCT_OTPPRTBIT = KW#PWA10;
  158      %EQU KA_LCT_OTPPRTBIT@S = 'FF'X;
  159      /* */
  160      /* initial configuration. */
  161      /* */
  162      %EQU KA_LCT_INTCNF = KW#PWA11;
  163      %EQU KA_LCT_INTCNF@S = 'FF'X;
  164      /* */
  165      /* initial configuration:  direct connect.  don't require a break */
  166      /* to initiate the session. */
  167      /* */
  168      %EQU KA_LCT_INTCNF_BRKRQ = KA_LCT_INTCNF;
  169      %EQU KA_LCT_INTCNF_BRKRQ@S = '80'X;
  170      /* */
  171      /* initial configuration:  auto-baud.  require that the user */
  172      /* auto-baud before initiating the session. */
  173      /* */
  174      %EQU KA_LCT_INTCNF_AUTBAD = KA_LCT_INTCNF;
  175      %EQU KA_LCT_INTCNF_AUTBAD@S = '40'X;
  176      /* */
  177      /* initial configuration:  enabled.  this line is enabled.  if */
  178      /* it were disabled, we would tell the user that, and dis-allow */
  179      /* session-creation attempts. */
  180      /* */
  181      %EQU KA_LCT_INTCNF_ENB = KA_LCT_INTCNF;
  182      %EQU KA_LCT_INTCNF_ENB@S = '20'X;
  183      /* */
  184      /* initial configuration: DC1DC3 flow control indicator */
  185      /* */
14:44 JUL 28 '97 KA_LCT_E.:E05SI                                           6    
  186      %EQU KA_LCT_INTCNF_DC1DC3FLWCTR = KA_LCT_INTCNF;
  187      %EQU KA_LCT_INTCNF_DC1DC3FLWCTR@S = '10'X;
  188      /* */
  189      /* initial configuration:  line speed.  this is the line speed to */
  190      /* use if we aren't to auto-baud. */
  191      /* */
  192      %EQU KA_LCT_INTCNF_LINSPD = KA_LCT_INTCNF;
  193      %EQU KA_LCT_INTCNF_LINSPD@S = '0F'X;
  194      /************************************************************************ */
  195      /*** warning:  the following byte is redefined.                       *** */
  196      /************************************************************************ */
  197      /* */
  198      /* output temp. */
  199      /* */
  200      %EQU KA_LCT_OTPTMP = KW#PWA12;
  201      %EQU KA_LCT_OTPTMP@S = 'FF'X;
  202      /************************************************************************ */
  203      /*** warning:  the following byte is a redefinition of the above byte *** */
  204      /************************************************************************ */
  205      /* */
  206      /* auto-baud status. */
  207      /* */
  208      %EQU KA_LCT_AUTBADSTT = KA_LCT_OTPTMP;
  209      %EQU KA_LCT_AUTBADSTT@S = 'FF'X;
  210      /* */
  211      /* auto-baud status:  the last character received was an 8 at what we */
  212      /* think is the correct line speed. */
  213      /* */
  214      %EQU KA_LCT_AUTBADSTT_8_RCV = KA_LCT_AUTBADSTT;
  215      %EQU KA_LCT_AUTBADSTT_8_RCV@S = '80'X;
  216      /* */
  217      /* auto-baud status:  we're at a base line speed. */
  218      /* */
  219      %EQU KA_LCT_AUTBADSTT_ATBASLINSPD = KA_LCT_AUTBADSTT;
  220      %EQU KA_LCT_AUTBADSTT_ATBASLINSPD@S = '40'X;
  221      /************************************************************************ */
  222      /*** warning:  the following byte is redefined.                       *** */
14:44 JUL 28 '97 KA_LCT_E.:E05SI                                           7    
  223      /************************************************************************ */
  224      /* */
  225      /* auto-baud function (table) index:  high order portion. */
  226      /* this cell isn't actually stored into; it is defined only to */
  227      /* provide a mask for the high order portion of the index into */
  228      /* the auto-baud function table.  the low order portion of the */
  229      /* index is the base line speed index (ga_lct_baslinspdx). */
  230      /* */
  231      %EQU KA_LCT_AUTBADFNCX_HI_ORD = KW#PWA13;
  232      %EQU KA_LCT_AUTBADFNCX_HI_ORD@S = '3C'X;
  233      /************************************************************************ */
  234      /*** warning:  the following byte is a redefinition of the above byte *** */
  235      /************************************************************************ */
  236      /* */
  237      /* auto-baud function.  this is the output of autbadfnctbl */
  238      /* (auto-baud function table). */
  239      /* */
  240      %EQU KA_LCT_AUTBADFNC = KA_LCT_AUTBADFNCX_HI_ORD;
  241      %EQU KA_LCT_AUTBADFNC@S = 'FF'X;
  242      /* */
  243      /* auto-baud function:  framing error ok.  if we got a framing */
  244      /* error on this character, it is still ok to interpret the character. */
  245      /* */
  246      %EQU KA_LCT_AUTBADFNC_FRMERROK = KA_LCT_AUTBADFNC;
  247      %EQU KA_LCT_AUTBADFNC_FRMERROK@S = '40'X;
  248      /* */
  249      /* auto-baud function:  line speed.  this is the line speed to go to. */
  250      /* */
  251      %EQU KA_LCT_AUTBADFNC_LINSPD = KA_LCT_AUTBADFNC;
  252      %EQU KA_LCT_AUTBADFNC_LINSPD@S = '0F'X;
  253      /************************************************************************ */
  254      /*** warning:  the following byte is a redefinition of the above byte *** */
  255      /************************************************************************ */
  256      /* */
  257      /* polled interrupt offset.  in polled mode, interrupt after this many chars */
  258      /* into each buffer half.  Makes things like XMODEM and KERMIT responsive */
  259      /* */
14:44 JUL 28 '97 KA_LCT_E.:E05SI                                           8    
  260      %EQU KA_LCT_PLDINTOFS = KA_LCT_AUTBADFNC;
  261      /* */
  262      /* current configuration. */
  263      /* */
  264      %EQU KA_LCT_CRTCNF = KW#PWA14;
  265      %EQU KA_LCT_CRTCNF@S = 'FF'X;
  266      /* */
  267      /* current configuration:  parity.  see below. */
  268      /* */
  269      %EQU KA_LCT_CRTCNF_PRT = KA_LCT_CRTCNF;
  270      %EQU KA_LCT_CRTCNF_PRT@S = 'E0'X;
  271      /* */
  272      /* current configuration, parity:  none. */
  273      /* */
  274      %EQU KA_LCT_CRTCNF_PRT_NON = KA_LCT_CRTCNF_PRT;
  275      %EQU KA_LCT_CRTCNF_PRT_NON@S = '80'X;
  276      /* */
  277      /* current configuration, parity:  even or odd. */
  278      /* */
  279      %EQU KA_LCT_CRTCNF_PRT_EVNODD = KA_LCT_CRTCNF_PRT;
  280      %EQU KA_LCT_CRTCNF_PRT_EVNODD@S = '40'X;
  281      /* */
  282      /* current configuration, parity:  set.  either always-1 parity */
  283      /* or odd parity. */
  284      /* */
  285      %EQU KA_LCT_CRTCNF_PRT_SET = KA_LCT_CRTCNF_PRT;
  286      %EQU KA_LCT_CRTCNF_PRT_SET@S = '20'X;
  287      /* */
  288      /* current configuration: DC1/DC3 flow control indicator */
  289      /* */
  290      %EQU KA_LCT_CRTCNF_DC1DC3FLWCTR = KA_LCT_CRTCNF;
  291      %EQU KA_LCT_CRTCNF_DC1DC3FLWCTR@S = '10'X;
  292      /* */
  293      /* current configuration:  line speed (indicator). */
  294      /* */
  295      %EQU KA_LCT_CRTCNF_LINSPD = KA_LCT_CRTCNF;
  296      %EQU KA_LCT_CRTCNF_LINSPD@S = '0F'X;
14:44 JUL 28 '97 KA_LCT_E.:E05SI                                           9    
  297      /* */
  298      /* output inhibit purge character count. */
  299      /* */
  300      %EQU KA_LCT_OTPINHPRGCHRCNT = KW#PWA15;
  301      %EQU KA_LCT_OTPINHPRGCHRCNT@S = 'FF'X;
  302      /* */
  303      /* output status.  this is used as an index into the output jump */
  304      /* (decision) table. */
  305      /* */
  306      %EQU KA_LCT_OTPSTT = KW#PWA16;
  307      %EQU KA_LCT_OTPSTT@S = 'FF'X;
  308      /* */
  309      /* output status:  high order bit.  this bit is always set, since the */
  310      /* decision table is contained in the second half of the output */
  311      /* table. */
  312      /* */
  313      %EQU KA_LCT_OTPSTT_HI_ORDBIT = KA_LCT_OTPSTT;
  314      %EQU KA_LCT_OTPSTT_HI_ORDBIT@S = '80'X;
  315      /* */
  316      /* output status:  asynchronous request.  indicates we have received */
  317      /* an output asynchronous request, and should consider it when */
  318      /* deciding (via the decision table) what to do next. */
  319      /* */
  320      %EQU KA_LCT_OTPSTT_ASNRQS = KA_LCT_OTPSTT;
  321      %EQU KA_LCT_OTPSTT_ASNRQS@S = '40'X;
  322      /* */
  323      /* output status:  transmitter is on. */
  324      /* */
  325      %EQU KA_LCT_OTPSTT_TRNON = KA_LCT_OTPSTT;
  326      %EQU KA_LCT_OTPSTT_TRNON@S = '20'X;
  327      /* */
  328      /* output status:  valid ccb. */
  329      /* */
  330      %EQU KA_LCT_OTPSTT_VLDCCB = KA_LCT_OTPSTT;
  331      %EQU KA_LCT_OTPSTT_VLDCCB@S = '10'X;
  332      /* */
  333      /* output status:  output halted.  indicates we received a request */
14:44 JUL 28 '97 KA_LCT_E.:E05SI                                           10   
  334      /* to asynchronously halt output, and haven't yet resumed. */
  335      /* */
  336      %EQU KA_LCT_OTPSTT_HLT = KA_LCT_OTPSTT;
  337      %EQU KA_LCT_OTPSTT_HLT@S = '08'X;
  338      /* */
  339      /* output status:  repeated character.  indicates we are processing */
  340      /* a repeated-character control string, and are still repeating the */
  341      /* character. */
  342      /* */
  343      %EQU KA_LCT_OTPSTT_RPTCHR = KA_LCT_OTPSTT;
  344      %EQU KA_LCT_OTPSTT_RPTCHR@S = '04'X;
  345      /* */
  346      /* output status:  inhibit purge.  we were asked to inhibit purge */
  347      /* requests, and haven't yet sent the number of characters that were */
  348      /* to be protected from purging. */
  349      /* */
  350      %EQU KA_LCT_OTPSTT_INHPRG = KA_LCT_OTPSTT;
  351      %EQU KA_LCT_OTPSTT_INHPRG@S = '02'X;
  352      /* */
  353      /* output status:  parity enable.  indicates we should do the 'send' */
  354      /* instruction with parity generation enabled. */
  355      /* */
  356      %EQU KA_LCT_OTPSTT_PRTENB = KA_LCT_OTPSTT;
  357      %EQU KA_LCT_OTPSTT_PRTENB@S = '01'X;
  358      /* */
  359      /* miscellaneous status */
  360      /* */
  361      %EQU KA_LCT_MSCSTT = KW#PWA17;
  362      /* */
  363      /* misc status - font class.  normal ascii, bit-paired apl, typewriter-paired */
  364      /* apl, etc. */
  365      /* */
  366      %EQU KA_LCT_FNTCLS = KA_LCT_MSCSTT;
  367      %EQU KA_LCT_MSCSTT_FNTCLS = KA_LCT_MSCSTT;
  368      %EQU KA_LCT_MSCSTT_FNTCLS@S = '03'X;
  369      /* */
  370      /* miscellaneous status: MLC16; this is an MLC-16 (NMLC) rather than MLCP */
14:44 JUL 28 '97 KA_LCT_E.:E05SI                                           11   
  371      /* */
  372      %EQU KA_LCT_MSCSTT_MLC16 = KA_LCT_MSCSTT;
  373      %EQU KA_LCT_MSCSTT_MLC16@S = '04'X;
  374      /* */
  375      /* miscellaneous status: halt (for DC1DC3 output flow control) */
  376      /* */
  377      %EQU KA_LCT_MSCSTT_HLT = KA_LCT_MSCSTT;
  378      %EQU KA_LCT_MSCSTT_HLT@S = '30'X;
  379      /* */
  380      /* miscellaneous status: halt, user */
  381      /* */
  382      %EQU KA_LCT_MSCSTT_HLT_USR = KA_LCT_MSCSTT;
  383      %EQU KA_LCT_MSCSTT_HLT_USR@S = '20'X;
  384      /* */
  385      /* miscellaneous status: halt, device */
  386      /* */
  387      %EQU KA_LCT_MSCSTT_HLT_DVC = KA_LCT_MSCSTT;
  388      %EQU KA_LCT_MSCSTT_HLT_DVC@S = '10'X;
  389      /* */
  390      /* buffer offset.  counts the characters stored into each buffer half, */
  391      /* so that there'll be something to compare with KA_LCT_POLINTOFS. */
  392      /* */
  393      %EQU KA_LCT_BFROFS = KW#PWA18;

