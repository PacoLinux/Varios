VERSION E05

PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:1    
        1        1        /*M* DDA$STEP STEP DO ROUTINE */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
        8        8        /*D*  NAME:  DDA$STEP
        9        9              CALL:  CALL DDA$STEP ALTRET(CANT_STEP)
       10       10              */
       11       11        DDA$STEP: PROC(PXCON) ALTRET;
       12       12    1   DCL PXCON BIT(1) ALIGNED;     /* Set if stepping from exit control routine */
       13       13    1   DCL XCON BIT(1);
       14       14    1   DCL CMD UBIN (18);
       15       15    1   DCL FATT$ PTR;
       16       16    1   DCL I BIT(36);
       17       17    1   DCL LENGTH SBIN;
       18       18    1   DCL SAVEIC$ PTR;
       19       19    1   DCL SAVEINS$ PTR;
       20       20    1   DCL STEP_DRL_IC SBIN;
       21       21    1   DCL STEP_DRL$ PTR;
       22       22    1   DCL TYPE SBIN;
       23       23    1   DCL ALT_FLAG BIT(1);
       24       24    1   DCL ALTIC UBIN;
       25       25    1   DCL ALTRET_BIT BIT(1) BASED ALIGNED;
       26       26    1   DCL DOIT BIT(1) ALIGNED;
       27       27        %INCLUDE DD$BASED;
       28     1330        %DOO (NAME=STEP$CMD,STCLASS=BASED,ID=CMD_COUNT);
       29     1345        %AT_FIRST (NAME=F$IRST);
       30     1373        %FIXCOM (NAME="FIXCOM(0:1)");
       31     1389        %FIXCOM (NAME = FXCM);
       32     1405        %HOST_INSTR(NAME=INSTR);
       33     1427        %INCLUDE DD_SUBS_C;
       34     1698        %INCLUDE DD_PSUBS_C;
       35     2173        %INCLUDE DD_ERR_C;
       36     2570        %INCLUDE XUH_MACRO_C;
       37     2654        %INCLUDE DD_SD_M;
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:2    
       38     3990        %S_D;
       39     5308        %INCLUDE B$JIT;
       40     5598        %INCLUDE CP_6;
       41     5679        %B$TCB;
       42     5682        %B$ALIBF;
       43     5686        %SUB_ECCDELTA;
       44     5723    1   DCL B$TCB$ PTR SYMREF;
       45     5724    1   DCL B$JIT$ PTR SYMREF;
       46     5725        %INCLUDE M_INFO_C;
       47     5865    1   DCL UIS$      PTR   SYMREF;
       48     5866    1   DCL D_XDELTA BIT(1) SYMREF;
       49     5867    1   DCL DXB$CUSE ENTRY;
       50     5868    1   DCL DDB$INTERP ENTRY(3);
       51     5869    1   DCL DDB$TESTTRAN ENTRY(1) ALTRET;
       52     5870    1   DCL DDB$TEFFADD ENTRY(2) ALTRET;
       53     5871    1   DCL DDB$PLANTONE ENTRY(4) ALTRET;
       54     5872    1   DCL DDA$GO ENTRY ALTRET;
       55     5873    1   DCL DDB$PLANT ENTRY ALTRET;
       56     5874    1   DCL DDC$PUTONE ENTRY(2) ALTRET;
       57     5875    1   DCL DDE$ERROR ENTRY;
       58     5876    1   DCL DDB$STEPADR ENTRY(5) ALTRET;
       59     5877    1   DCL DDB$RESTORE ENTRY;
       60     5878    1   DCL DXA$SSF ENTRY ALTRET;
       61     5879                                 /* TRANSFER SCAN STUFF INTO STEP INFORMATION TABLE */
       62     5880    1        S_D.S$TEP.ONE_FLAG = '0'B;
       63     5881    1        IF S_D.DO$ = ADDR(NIL)
       64     5882    2        THEN DO;
       65     5883    2             S_D.ERROR = E@NOTIMP;         /* E@NOTIMP */
       66     5884    2             CALL DDE$ERROR;
       67     5885    2             GOTO CANT_STEP;
       68     5886    2           END;
       69     5887    1        IF S_D.DO$->STEP$CMD.SETTYPE
       70     5888    2        THEN DO;
       71     5889    2             S_D.S$TEP.CMD_COUNT = 1;
       72     5890    2             S_D.S$TEP.CUR_COUNT = 1;
       73     5891    2             IF S_D.DO$->STEP$CMD.CMD_COUNT = C@ONE
       74     5892    3             THEN DO;
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:3    
       75     5893    3                  S_D.S$TEP.ONE_FLAG = '1'B;
       76     5894    3                  S_D.S$TEP.DOING_SOC = '0'B;
       77     5895    3                END;
       78     5896    2             ELSE
       79     5897    3             DO;
       80     5898    3                  S_D.S$TEP.MODE = S_D.DO$->STEP$CMD.CMD_COUNT;
       81     5899    3                  IF S_D.S$TEP.MODE = C@INSTRUCTIONS THEN /*C@INSTRUCTIONS*/
       82     5900    4                  DO;
       83     5901    4                       S_D.BYPASS_SAVE = S_D.BYPASS;
       84     5902    4                       S_D.BYPASS = '0'B;
       85     5903    4                     END;
       86     5904    3                  ELSE
       87     5905    3                       S_D.BYPASS = S_D.BYPASS_SAVE;
       88     5906    3                END;
       89     5907    2           END;
       90     5908    2        ELSE DO;
       91     5909    2             S_D.S$TEP.CMD_COUNT = S_D.DO$->STEP$CMD.CMD_COUNT;
       92     5910    2             S_D.S$TEP.CUR_COUNT = S_D.DO$->STEP$CMD.CMD_COUNT;
       93     5911    2           END;
       94     5912        /*D* NAME: DDA$STEP_MORE
       95     5913             CALL: CALL DDA$STEP_MORE ALTRET(CANT_STEP)
       96     5914             DESCRIPTION:  THIS ENTRY POINT IS CALLED FROM DXA$FAULT IF
       97     5915                   THE ORIGINAL STEP ISSUED BY THE USER HAD EITHER
       98     5916                   1) A COUNT GREATER THAN 1
       99     5917                   2) STATEMENT MODE
      100     5918             */
      101     5919    1   DDA$STEP_MORE: ENTRY(PXCON) ALTRET;
      102     5920    1        IF ADDR(PXCON) = ADDR(NIL)
      103     5921    1        THEN XCON = '0'B;
      104     5922    1        ELSE XCON = PXCON;
      105     5923    1        IF S_D.ALIB
      106     5924    1        THEN S_D.SAVEIC = S_D.SAVEIC - 2;  /* Fake out step for ALIB */
      107     5925    1        IF NOT D_XDELTA
      108     5926    1        THEN IF S_D.SAVEIC >= %LIBLO*1024 - %ISEGLO*1024 AND B$JIT.TDP <= %LIBLO
      109     5927    1               AND B$JIT.PCL = 0
      110     5928    2             THEN DO;                      /* We are in the shared library */
      111     5929    2                  S_D.ERROR = E@CANT_STEP_SHARED; /*E@CANT_STEP_SHARED*/
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:4    
      112     5930    2                  ALTRETURN;
      113     5931    2                END;
      114     5932    1        S_D.S$TEP.ALT = '0'B;              /* Clear alt flag */
      115     5933    1        S_D.GO_MODE = '1'B;                /* SET GO MODE ON */
      116     5934                                                /* CANT STEP IF SAFE STORE IS FULL */
      117     5935    1        CALL DXA$SSF ALTRET(CANT_STEP);
      118     5936                                                /* RE-ESTABLISH THE WSQ ENVIRONMENT */
      119     5937    1        CALL DXB$CUSE;
      120     5938                                                /* POINT TO THE CURRENT INSTRUCTION */
      121     5939    1        SAVEIC$ = PINCRW(UIS$,S_D.SAVEIC);
      122     5940                  /* ESTABLISH POINTER TO THE SAVED INSTRUCTION IN THE STEP FRAME */
      123     5941    1        SAVEINS$ = ADDR(S_D.S$TEP.SAVED);
      124     5942                                 /* CALCULATE THE LOCATION OF THE STEP DERAIL.  THIS
      125     5943                       ENTAILS KNOWING THE LENGTH OF THE CURRENT INSTRUCTION AS WELL
      126     5944                       AS ITS TYPE.  IF THE INSTRUCTION IS A TRANSFER, THEN
      127     5945                       THE LOCATION OF THE STEP DERAIL IS THE EFFECTIVVE
      128     5946                       ADDRESS OF THE TRANSFER.  IF THE INSTRUCTION IS MULTI-WORD
      129     5947                       (AND NOT A TRANSFER) THEN THE LOCATON OF THE STEP DERAIL
      130     5948                       IS SAVEIC+LENGTH */
      131     5949    1        CALL DDB$INTERP(SAVEIC$,TYPE,LENGTH);
      132     5950                                                /* INITIALIZE  THE STEP-DRL IC.. */
      133     5951    1        IF XCON
      134     5952    2        THEN DO;
      135     5953    2             STEP_DRL_IC = S_D.SAVEIC;
      136     5954    2             ALTIC = S_D.SAVEIC;
      137     5955    2             GOTO COMMON;
      138     5956    2           END;
      139     5957    1        ELSE STEP_DRL_IC = S_D.SAVEIC+LENGTH;
      140     5958                       /* IF THE CURRENT INSTRUCTION IS 'SPECIAL', DELTA CANT HANDLE IT
      141     5959                       ......YET */
      142     5960    1        IF TYPE = T_SPECIAL AND LENGTH ~= 2 /*SPECIAL BUT NOT A CLIMB*/
      143     5961    2        THEN DO;
      144     5962    2             S_D.ERROR = E@CANTSTEP;       /* E@CANTSTEP */
      145     5963    2             GOTO ALTRETURNN;
      146     5964    2           END;
      147     5965                                 /* IS THE CURRENT INSTRUCTION GOING TO TRANSFER?  */
      148     5966    1        IF (TYPE ~=T_CONTRA) AND (TYPE ~= T_UNCTRA)
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:5    
      149     5967    1        THEN GOTO NO_TRAN;
      150     5968                            /* IF THE TRANSFER IS A CONDITIONAL TRANSFER, THEN SEE IF
      151     5969                            IT IS GOING TO TRANSFER. */
      152     5970    1        DOIT = S_D.S$TEP.ONE_FLAG;
      153     5971    1        IF SAVEIC$->INSTR.OP = T_TRA THEN DOIT = '0'B;
      154     5972    1        IF TYPE = T_CONTRA
      155     5973    2        THEN DO;
      156     5974    2             CALL DDB$TESTTRAN(SAVEIC$) ALTRET(NO_TRAN);
      157     5975    2             DOIT = '0'B;
      158     5976    2           END;
      159     5977    1        CALL DDB$STEPADR (DOIT, S_D.SAVEIC, STEP_DRL_IC, ALT_FLAG, ALTIC) ALTRET(
              5977                 CANT_STEP);
      160     5978    1        IF ALT_FLAG THEN S_D.S$TEP.ALT = '1'B;
      161     5979    1        GOTO COMMON;
      162     5980    1   NO_TRAN: ;
      163     5981                                      /* REMEMBER LOCATION OF STEP DERAIL STOPPER. */
      164     5982    1        IF TYPE = T_SPECIAL AND SAVEIC$->ALTRET_BIT = '1'B /* CLIMB WITH ALTRET */
      165     5983    2        THEN DO;
      166     5984    2             S_D.S$TEP.ALT = '1'B;
      167     5985    2             ALTIC = STEP_DRL_IC;
      168     5986    2             STEP_DRL_IC = STEP_DRL_IC+1;
      169     5987    2           END;
      170     5988    1   COMMON:                                 /**/
      171     5989    1        IF STEP_DRL_IC = ALTIC THEN S_D.S$TEP.ALT = '0'B; /* Forget alt is */
      172     5990                                                /* its the same as the ret location */
      173     5991    1        S_D.S$TEP.ACTIVE = '1'B;
      174     5992    1        S_D.S$TEP.LOC = STEP_DRL_IC;
      175     5993                                                /* REMEMBER EWSQ# */
      176     5994    1        S_D.S$TEP.EWSQ = S_D.EWSQ#;
      177     5995                                      /* CREATE POINTER TO THE PROPOSED STEP_DERAIL */
      178     5996    1        STEP_DRL$ = PINCRW(UIS$,STEP_DRL_IC);
      179     5997                            /* Call DDA$GO to set up all other derails, and to set up
      180     5998                            the special location if we're stoped on an AT breakpoint.
      181     5999                       Then put our step derail(s) in.  Its ok if we put them overtop
      182     6000                       of any others, since they will be put back the next time around.
      183     6001                       If we're on an EIS AT (woe is us), then the front end will call
      184     6002                       EISRESET to clean that up. */
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:6    
      185     6003    1        IF S_D.ALIB
      186     6004    1        THEN S_D.SAVEIC = S_D.SAVEIC + 2;  /* Fake out step for ALIB */
      187     6005    1        IF NOT XCON
      188     6006    1        THEN CALL DDA$GO ALTRET(CANT_STEP);
      189     6007    1        CALL DDB$PLANTONE(STEP_DRL$, TYPE, DRL_STEP, SAVEINS$) ALTRET(ALTRETURNN);
      190     6008    1        IF S_D.S$TEP.ALT
      191     6009    2        THEN DO;
      192     6010    2             S_D.S$TEP.ALTLOC = ALTIC;
      193     6011    2             CALL DDB$PLANTONE(PINCRW(UIS$, ALTIC), TYPE, DRL_STEP,
      194     6012    2               ADDR(S_D.S$TEP.ALTSAVED));
      195     6013    2           END;
      196     6014    1        IF NOT D_XDELTA THEN S_D.S$TEP.OLD_PTR$ = ADDR(NIL);
              6014                 /* Don't inhibit code in user DELTA */
      197     6015    1        ELSE
      198     6016    1             IF SAVEIC$->INSTR.I = '1'B THEN /* If inhibit bit set, zero ptr */
      199     6017    1                  S_D.S$TEP.OLD_PTR$ = ADDR(NIL);
      200     6018    2             ELSE DO;
      201     6019    2                  I = SAVEIC$->INSTR | '000000000200'O; /* SET INHIBIT BIT */
      202     6020    2                  CALL DDC$PUTONE(SAVEIC$,I) ALTRET(BAD_PUT); /* PUT BACK IN USER */
      203     6021    2                  S_D.S$TEP.OLD_PTR$ = SAVEIC$; /* REMEMBER WHERE IT IS */
      204     6022    2                END;
      205     6023    1        S_D.GO_MODE = '0'B;                /* TURN GO MODE 'OFF' */
      206     6024    1        RETURN;
      207     6025    1   CANT_STEP: ;
      208     6026    1        S_D.ERROR = E@CANTSTEP;            /* E@CANTSTEP */
      209     6027    1        GOTO ALTRETURNN;
      210     6028    1   BAD_PUT: ;
      211     6029    1        CALL DDE$ERROR;
      212     6030    1   ALTRETURNN:
      213     6031    1        CALL DDB$RESTORE;             /* Need to pick up brkpnts from DDA$GO */
      214     6032    1        S_D.GO_MODE = '0'B;
      215     6033    1        S_D.S$TEP.ACTIVE = '0'B;
      216     6034    1        ALTRETURN;
      217     6035    1   END DDA$STEP;
      218     6036        %EOD;

PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:7    
--  Include file information  --

   M_INFO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   DD_ERR_C.:E05TOU  is referenced.
   DD_PSUBS_C.:E05TOU  is referenced.
   DD_SUBS_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure DDA$STEP.

   Procedure DDA$STEP requires 295 words for executable code.
   Procedure DDA$STEP requires 24 words of local(AUTO) storage.

PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:8    

 Object Unit name= DDA$STEP                                   File name= DDA$STEP.:E05TOU
 UTS= JUL 29 '97 13:38:03.12 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      1      1  DDA$STEP
    2   Proc  even  none   295    447  DDA$STEP
    3  RoData even  none     3      3  DDA$STEP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        1  DDA$STEP
     2     62          yes     yes      Std        1  DDA$STEP_MORE
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:9    

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 DDE$ERROR
 yes     yes           Std       0 DXA$SSF
 yes     yes           Std       1 DDB$TESTTRAN
 yes     yes           Std       0 DDA$GO
 yes     yes           Std       2 DDC$PUTONE
         yes           Std       0 DXB$CUSE
         yes           Std       0 DDB$RESTORE
         yes           Std       3 DDB$INTERP
 yes     yes           Std       5 DDB$STEPADR
 yes     yes           Std       4 DDB$PLANTONE
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    S_D$                                  M$UC                                  B$JIT$
     UIS$                                  D_XDELTA                              B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:10   


        1        1        /*M* DDA$STEP STEP DO ROUTINE */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
        8        8        /*D*  NAME:  DDA$STEP
        9        9              CALL:  CALL DDA$STEP ALTRET(CANT_STEP)
       10       10              */
       11       11        DDA$STEP: PROC(PXCON) ALTRET;

     11  2 000000   000000 700200 xent  DDA$STEP     TSX0  ! X66_AUTO_1
         2 000001   000030 000001                    ZERO    24,1

       12       12    1   DCL PXCON BIT(1) ALIGNED;     /* Set if stepping from exit control routine */
       13       13    1   DCL XCON BIT(1);
       14       14    1   DCL CMD UBIN (18);
       15       15    1   DCL FATT$ PTR;
       16       16    1   DCL I BIT(36);
       17       17    1   DCL LENGTH SBIN;
       18       18    1   DCL SAVEIC$ PTR;
       19       19    1   DCL SAVEINS$ PTR;
       20       20    1   DCL STEP_DRL_IC SBIN;
       21       21    1   DCL STEP_DRL$ PTR;
       22       22    1   DCL TYPE SBIN;
       23       23    1   DCL ALT_FLAG BIT(1);
       24       24    1   DCL ALTIC UBIN;
       25       25    1   DCL ALTRET_BIT BIT(1) BASED ALIGNED;
       26       26    1   DCL DOIT BIT(1) ALIGNED;
       27       27        %INCLUDE DD$BASED;
       28     1330        %DOO (NAME=STEP$CMD,STCLASS=BASED,ID=CMD_COUNT);
       29     1345        %AT_FIRST (NAME=F$IRST);
       30     1373        %FIXCOM (NAME="FIXCOM(0:1)");
       31     1389        %FIXCOM (NAME = FXCM);
       32     1405        %HOST_INSTR(NAME=INSTR);
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:11   
       33     1427        %INCLUDE DD_SUBS_C;
       34     1698        %INCLUDE DD_PSUBS_C;
       35     2173        %INCLUDE DD_ERR_C;
       36     2570        %INCLUDE XUH_MACRO_C;
       37     2654        %INCLUDE DD_SD_M;
       38     3990        %S_D;
       39     5308        %INCLUDE B$JIT;
       40     5598        %INCLUDE CP_6;
       41     5679        %B$TCB;
       42     5682        %B$ALIBF;
       43     5686        %SUB_ECCDELTA;
       44     5723    1   DCL B$TCB$ PTR SYMREF;
       45     5724    1   DCL B$JIT$ PTR SYMREF;
       46     5725        %INCLUDE M_INFO_C;
       47     5865    1   DCL UIS$      PTR   SYMREF;
       48     5866    1   DCL D_XDELTA BIT(1) SYMREF;
       49     5867    1   DCL DXB$CUSE ENTRY;
       50     5868    1   DCL DDB$INTERP ENTRY(3);
       51     5869    1   DCL DDB$TESTTRAN ENTRY(1) ALTRET;
       52     5870    1   DCL DDB$TEFFADD ENTRY(2) ALTRET;
       53     5871    1   DCL DDB$PLANTONE ENTRY(4) ALTRET;
       54     5872    1   DCL DDA$GO ENTRY ALTRET;
       55     5873    1   DCL DDB$PLANT ENTRY ALTRET;
       56     5874    1   DCL DDC$PUTONE ENTRY(2) ALTRET;
       57     5875    1   DCL DDE$ERROR ENTRY;
       58     5876    1   DCL DDB$STEPADR ENTRY(5) ALTRET;
       59     5877    1   DCL DDB$RESTORE ENTRY;
       60     5878    1   DCL DXA$SSF ENTRY ALTRET;
       61     5879                                 /* TRANSFER SCAN STUFF INTO STEP INFORMATION TABLE */
       62     5880    1        S_D.S$TEP.ONE_FLAG = '0'B;

   5880  2 000002   000000 470400 xsym               LDP0    S_D$
         2 000003   000000 236000 3                  LDQ     0
         2 000004   005277 356100                    ANSQ    2751,,PR0

       63     5881    1        IF S_D.DO$ = ADDR(NIL)

PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:12   
   5881  2 000005   000031 236100                    LDQ     25,,PR0
         2 000006   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000007   000016 601000 2                  TNZ     s:5887

       64     5882    2        THEN DO;

       65     5883    2             S_D.ERROR = E@NOTIMP;         /* E@NOTIMP */

   5883  2 000010   000767 235007                    LDA     503,DL
         2 000011   000013 755100                    STA     11,,PR0

       66     5884    2             CALL DDE$ERROR;

   5884  2 000012   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000013   000000 701000 xent               TSX1    DDE$ERROR
         2 000014   000000 011000                    NOP     0

       67     5885    2             GOTO CANT_STEP;

   5885  2 000015   000431 710000 2                  TRA     CANT_STEP

       68     5886    2           END;
       69     5887    1        IF S_D.DO$->STEP$CMD.SETTYPE

   5887  2 000016   000031 471500                    LDP1    25,,PR0
         2 000017   100001 236100                    LDQ     1,,PR1
         2 000020   400000 316007                    CANQ    -131072,DL
         2 000021   000053 600000 2                  TZE     s:5909

       70     5888    2        THEN DO;

       71     5889    2             S_D.S$TEP.CMD_COUNT = 1;

   5889  2 000022   000001 235007                    LDA     1,DL
         2 000023   005306 755100                    STA     2758,,PR0

       72     5890    2             S_D.S$TEP.CUR_COUNT = 1;
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:13   

   5890  2 000024   005307 755100                    STA     2759,,PR0

       73     5891    2             IF S_D.DO$->STEP$CMD.CMD_COUNT = C@ONE

   5891  2 000025   100001 220100                    LDX0    1,,PR1
         2 000026   001104 100003                    CMPX0   580,DU
         2 000027   000035 601000 2                  TNZ     s:5898

       74     5892    3             THEN DO;

       75     5893    3                  S_D.S$TEP.ONE_FLAG = '1'B;

   5893  2 000030   200000 236003                    LDQ     65536,DU
         2 000031   005277 256100                    ORSQ    2751,,PR0

       76     5894    3                  S_D.S$TEP.DOING_SOC = '0'B;

   5894  2 000032   000001 236000 3                  LDQ     1
         2 000033   005277 356100                    ANSQ    2751,,PR0

       77     5895    3                END;

   5895  2 000034   000061 710000 2                  TRA     s:5911

       78     5896    2             ELSE
       79     5897    3             DO;

       80     5898    3                  S_D.S$TEP.MODE = S_D.DO$->STEP$CMD.CMD_COUNT;

   5898  2 000035   100001 236100                    LDQ     1,,PR1
         2 000036   000022 772000                    QRL     18
         2 000037   005310 756100                    STQ     2760,,PR0

       81     5899    3                  IF S_D.S$TEP.MODE = C@INSTRUCTIONS THEN /*C@INSTRUCTIONS*/

   5899  2 000040   001105 116007                    CMPQ    581,DL
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:14   
         2 000041   000047 601000 2                  TNZ     s:5905

       82     5900    4                  DO;

       83     5901    4                       S_D.BYPASS_SAVE = S_D.BYPASS;

   5901  2 000042   001032 236100                    LDQ     538,,PR0
         2 000043   400000 376003                    ANQ     -131072,DU
         2 000044   000074 756100                    STQ     60,,PR0

       84     5902    4                       S_D.BYPASS = '0'B;

   5902  2 000045   001032 450100                    STZ     538,,PR0

       85     5903    4                     END;

   5903  2 000046   000061 710000 2                  TRA     s:5911

       86     5904    3                  ELSE
       87     5905    3                       S_D.BYPASS = S_D.BYPASS_SAVE;

   5905  2 000047   000074 236100                    LDQ     60,,PR0
         2 000050   400000 376003                    ANQ     -131072,DU
         2 000051   001032 756100                    STQ     538,,PR0

       88     5906    3                END;

       89     5907    2           END;

   5907  2 000052   000061 710000 2                  TRA     s:5911

       90     5908    2        ELSE DO;

       91     5909    2             S_D.S$TEP.CMD_COUNT = S_D.DO$->STEP$CMD.CMD_COUNT;

   5909  2 000053   100001 236100                    LDQ     1,,PR1
         2 000054   000022 772000                    QRL     18
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:15   
         2 000055   005306 756100                    STQ     2758,,PR0

       92     5910    2             S_D.S$TEP.CUR_COUNT = S_D.DO$->STEP$CMD.CMD_COUNT;

   5910  2 000056   100001 236100                    LDQ     1,,PR1
         2 000057   000022 772000                    QRL     18
         2 000060   005307 756100                    STQ     2759,,PR0

       93     5911    2           END;

   5911  2 000061   000064 710000 2                  TRA     s:5920

       94     5912        /*D* NAME: DDA$STEP_MORE
       95     5913             CALL: CALL DDA$STEP_MORE ALTRET(CANT_STEP)
       96     5914             DESCRIPTION:  THIS ENTRY POINT IS CALLED FROM DXA$FAULT IF
       97     5915                   THE ORIGINAL STEP ISSUED BY THE USER HAD EITHER
       98     5916                   1) A COUNT GREATER THAN 1
       99     5917                   2) STATEMENT MODE
      100     5918             */
      101     5919    1   DDA$STEP_MORE: ENTRY(PXCON) ALTRET;

   5919  2 000062   000000 700200 xent  DDA$STEP_MO* TSX0  ! X66_AUTO_1
         2 000063   000030 000001                    ZERO    24,1

      102     5920    1        IF ADDR(PXCON) = ADDR(NIL)

   5920  2 000064   200003 236100                    LDQ     @PXCON,,AUTO
         2 000065   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000066   000071 601000 2                  TNZ     s:5922

      103     5921    1        THEN XCON = '0'B;

   5921  2 000067   200004 450100                    STZ     XCON,,AUTO
         2 000070   000075 710000 2                  TRA     s:5923

      104     5922    1        ELSE XCON = PXCON;

PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:16   
   5922  2 000071   200003 470500                    LDP0    @PXCON,,AUTO
         2 000072   000000 236100                    LDQ     0,,PR0
         2 000073   400000 376003                    ANQ     -131072,DU
         2 000074   200004 756100                    STQ     XCON,,AUTO

      105     5923    1        IF S_D.ALIB

   5923  2 000075   000000 470400 xsym               LDP0    S_D$
         2 000076   005134 234100                    SZN     2652,,PR0
         2 000077   000103 605000 2                  TPL     s:5925

      106     5924    1        THEN S_D.SAVEIC = S_D.SAVEIC - 2;  /* Fake out step for ALIB */

   5924  2 000100   000002 235100                    LDA     2,,PR0
         2 000101   000002 135007                    SBLA    2,DL
         2 000102   000002 755100                    STA     2,,PR0

      107     5925    1        IF NOT D_XDELTA

   5925  2 000103   000000 234000 xsym               SZN     D_XDELTA
         2 000104   000121 604000 2                  TMI     s:5932

      108     5926    1        THEN IF S_D.SAVEIC >= %LIBLO*1024 - %ISEGLO*1024 AND B$JIT.TDP <= %LIBLO

   5926  2 000105   000002 235100                    LDA     2,,PR0
         2 000106   700000 115007                    CMPA    -32768,DL
         2 000107   000121 602000 2                  TNC     s:5932
         2 000110   000000 471400 xsym               LDP1    B$JIT$
         2 000111   100204 220100                    LDX0    132,,PR1
         2 000112   000441 100003                    CMPX0   289,DU
         2 000113   000121 603000 2                  TRC     s:5932
         2 000114   100215 721100                    LXL1    141,,PR1
         2 000115   000121 601000 2                  TNZ     s:5932

      109     5927    1               AND B$JIT.PCL = 0
      110     5928    2             THEN DO;                      /* We are in the shared library */

PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:17   
      111     5929    2                  S_D.ERROR = E@CANT_STEP_SHARED; /*E@CANT_STEP_SHARED*/

   5929  2 000116   000304 236007                    LDQ     196,DL
         2 000117   000013 756100                    STQ     11,,PR0

      112     5930    2                  ALTRETURN;

   5930  2 000120   000000 702200 xent               TSX2  ! X66_AALT

      113     5931    2                END;
      114     5932    1        S_D.S$TEP.ALT = '0'B;              /* Clear alt flag */

   5932  2 000121   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 000122   005277 356100                    ANSQ    2751,,PR0

      115     5933    1        S_D.GO_MODE = '1'B;                /* SET GO MODE ON */

   5933  2 000123   400000 236003                    LDQ     -131072,DU
         2 000124   000020 756100                    STQ     16,,PR0

      116     5934                                                /* CANT STEP IF SAFE STORE IS FULL */
      117     5935    1        CALL DXA$SSF ALTRET(CANT_STEP);

   5935  2 000125   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000126   000000 701000 xent               TSX1    DXA$SSF
         2 000127   000431 702000 2                  TSX2    CANT_STEP

      118     5936                                                /* RE-ESTABLISH THE WSQ ENVIRONMENT */
      119     5937    1        CALL DXB$CUSE;

   5937  2 000130   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000131   000000 701000 xent               TSX1    DXB$CUSE
         2 000132   000000 011000                    NOP     0

      120     5938                                                /* POINT TO THE CURRENT INSTRUCTION */
      121     5939    1        SAVEIC$ = PINCRW(UIS$,S_D.SAVEIC);

PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:18   
   5939  2 000133   000000 470400 xsym               LDP0    S_D$
         2 000134   000002 720100                    LXL0    2,,PR0
         2 000135   000000 636010                    EAQ     0,X0
         2 000136   000000 036000 xsym               ADLQ    UIS$
         2 000137   200011 756100                    STQ     SAVEIC$,,AUTO

      122     5940                  /* ESTABLISH POINTER TO THE SAVED INSTRUCTION IN THE STEP FRAME */
      123     5941    1        SAVEINS$ = ADDR(S_D.S$TEP.SAVED);

   5941  2 000140   000000 236000 xsym               LDQ     S_D$
         2 000141   005302 036003                    ADLQ    2754,DU
         2 000142   200012 756100                    STQ     SAVEINS$,,AUTO

      124     5942                                 /* CALCULATE THE LOCATION OF THE STEP DERAIL.  THIS
      125     5943                       ENTAILS KNOWING THE LENGTH OF THE CURRENT INSTRUCTION AS WELL
      126     5944                       AS ITS TYPE.  IF THE INSTRUCTION IS A TRANSFER, THEN
      127     5945                       THE LOCATION OF THE STEP DERAIL IS THE EFFECTIVVE
      128     5946                       ADDRESS OF THE TRANSFER.  IF THE INSTRUCTION IS MULTI-WORD
      129     5947                       (AND NOT A TRANSFER) THEN THE LOCATON OF THE STEP DERAIL
      130     5948                       IS SAVEIC+LENGTH */
      131     5949    1        CALL DDB$INTERP(SAVEIC$,TYPE,LENGTH);

   5949  2 000143   200010 631500                    EPPR1   LENGTH,,AUTO
         2 000144   200024 451500                    STP1    DOIT+4,,AUTO
         2 000145   200015 633500                    EPPR3   TYPE,,AUTO
         2 000146   200023 453500                    STP3    DOIT+3,,AUTO
         2 000147   200011 634500                    EPPR4   SAVEIC$,,AUTO
         2 000150   200022 454500                    STP4    DOIT+2,,AUTO
         2 000151   200022 630500                    EPPR0   DOIT+2,,AUTO
         2 000152   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000153   000000 701000 xent               TSX1    DDB$INTERP
         2 000154   000000 011000                    NOP     0

      132     5950                                                /* INITIALIZE  THE STEP-DRL IC.. */
      133     5951    1        IF XCON

   5951  2 000155   200004 234100                    SZN     XCON,,AUTO
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:19   
         2 000156   000165 605000 2                  TPL     s:5957

      134     5952    2        THEN DO;

      135     5953    2             STEP_DRL_IC = S_D.SAVEIC;

   5953  2 000157   000000 470400 xsym               LDP0    S_D$
         2 000160   000002 235100                    LDA     2,,PR0
         2 000161   200013 755100                    STA     STEP_DRL_IC,,AUTO

      136     5954    2             ALTIC = S_D.SAVEIC;

   5954  2 000162   000002 235100                    LDA     2,,PR0
         2 000163   200017 755100                    STA     ALTIC,,AUTO

      137     5955    2             GOTO COMMON;

   5955  2 000164   000273 710000 2                  TRA     COMMON

      138     5956    2           END;
      139     5957    1        ELSE STEP_DRL_IC = S_D.SAVEIC+LENGTH;

   5957  2 000165   000000 470400 xsym               LDP0    S_D$
         2 000166   000002 236100                    LDQ     2,,PR0
         2 000167   200010 036100                    ADLQ    LENGTH,,AUTO
         2 000170   200013 756100                    STQ     STEP_DRL_IC,,AUTO

      140     5958                       /* IF THE CURRENT INSTRUCTION IS 'SPECIAL', DELTA CANT HANDLE IT
      141     5959                       ......YET */
      142     5960    1        IF TYPE = T_SPECIAL AND LENGTH ~= 2 /*SPECIAL BUT NOT A CLIMB*/

   5960  2 000171   200015 235100                    LDA     TYPE,,AUTO
         2 000172   000004 115007                    CMPA    4,DL
         2 000173   000202 601000 2                  TNZ     s:5966
         2 000174   200010 235100                    LDA     LENGTH,,AUTO
         2 000175   000002 115007                    CMPA    2,DL
         2 000176   000202 600000 2                  TZE     s:5966
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:20   

      143     5961    2        THEN DO;

      144     5962    2             S_D.ERROR = E@CANTSTEP;       /* E@CANTSTEP */

   5962  2 000177   000771 235007                    LDA     505,DL
         2 000200   000013 755100                    STA     11,,PR0

      145     5963    2             GOTO ALTRETURNN;

   5963  2 000201   000440 710000 2                  TRA     ALTRETURNN

      146     5964    2           END;
      147     5965                                 /* IS THE CURRENT INSTRUCTION GOING TO TRANSFER?  */
      148     5966    1        IF (TYPE ~=T_CONTRA) AND (TYPE ~= T_UNCTRA)

   5966  2 000202   200015 235100                    LDA     TYPE,,AUTO
         2 000203   000003 115007                    CMPA    3,DL
         2 000204   000207 600000 2                  TZE     s:5970
         2 000205   000002 115007                    CMPA    2,DL
         2 000206   000257 601000 2                  TNZ     NO_TRAN

      149     5967    1        THEN GOTO NO_TRAN;
      150     5968                            /* IF THE TRANSFER IS A CONDITIONAL TRANSFER, THEN SEE IF
      151     5969                            IT IS GOING TO TRANSFER. */
      152     5970    1        DOIT = S_D.S$TEP.ONE_FLAG;

   5970  2 000207   005277 236100                    LDQ     2751,,PR0
         2 000210   000001 736000                    QLS     1
         2 000211   400000 376003                    ANQ     -131072,DU
         2 000212   200020 756100                    STQ     DOIT,,AUTO

      153     5971    1        IF SAVEIC$->INSTR.OP = T_TRA THEN DOIT = '0'B;

   5971  2 000213   200011 471500                    LDP1    SAVEIC$,,AUTO
         2 000214   100000 236100                    LDQ     0,,PR1
         2 000215   777400 376007                    ANQ     -256,DL
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:21   
         2 000216   710000 116007                    CMPQ    -28672,DL
         2 000217   000221 601000 2                  TNZ     s:5972

   5971  2 000220   200020 450100                    STZ     DOIT,,AUTO

      154     5972    1        IF TYPE = T_CONTRA

   5972  2 000221   000003 115007                    CMPA    3,DL
         2 000222   000232 601000 2                  TNZ     s:5977

      155     5973    2        THEN DO;

      156     5974    2             CALL DDB$TESTTRAN(SAVEIC$) ALTRET(NO_TRAN);

   5974  2 000223   200011 633500                    EPPR3   SAVEIC$,,AUTO
         2 000224   200022 453500                    STP3    DOIT+2,,AUTO
         2 000225   200022 630500                    EPPR0   DOIT+2,,AUTO
         2 000226   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000227   000000 701000 xent               TSX1    DDB$TESTTRAN
         2 000230   000257 702000 2                  TSX2    NO_TRAN

      157     5975    2             DOIT = '0'B;

   5975  2 000231   200020 450100                    STZ     DOIT,,AUTO

      158     5976    2           END;

      159     5977    1        CALL DDB$STEPADR (DOIT, S_D.SAVEIC, STEP_DRL_IC, ALT_FLAG, ALTIC) ALTRET(
              5977                 CANT_STEP);

   5977  2 000232   200017 630500                    EPPR0   ALTIC,,AUTO
         2 000233   200026 450500                    STP0    DOIT+6,,AUTO
         2 000234   200016 631500                    EPPR1   ALT_FLAG,,AUTO
         2 000235   200025 451500                    STP1    DOIT+5,,AUTO
         2 000236   200013 633500                    EPPR3   STEP_DRL_IC,,AUTO
         2 000237   200024 453500                    STP3    DOIT+4,,AUTO
         2 000240   000000 236000 xsym               LDQ     S_D$
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:22   
         2 000241   000002 036003                    ADLQ    2,DU
         2 000242   200023 756100                    STQ     DOIT+3,,AUTO
         2 000243   200020 634500                    EPPR4   DOIT,,AUTO
         2 000244   200022 454500                    STP4    DOIT+2,,AUTO
         2 000245   200022 630500                    EPPR0   DOIT+2,,AUTO
         2 000246   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 000247   000000 701000 xent               TSX1    DDB$STEPADR
         2 000250   000431 702000 2                  TSX2    CANT_STEP

      160     5978    1        IF ALT_FLAG THEN S_D.S$TEP.ALT = '1'B;

   5978  2 000251   200016 234100                    SZN     ALT_FLAG,,AUTO
         2 000252   000256 605000 2                  TPL     s:5979

   5978  2 000253   000000 470400 xsym               LDP0    S_D$
         2 000254   400000 236003                    LDQ     -131072,DU
         2 000255   005277 256100                    ORSQ    2751,,PR0

      161     5979    1        GOTO COMMON;

   5979  2 000256   000273 710000 2                  TRA     COMMON

   5978  2 000257                       NO_TRAN      null
      162     5980    1   NO_TRAN: ;
      163     5981                                      /* REMEMBER LOCATION OF STEP DERAIL STOPPER. */
      164     5982    1        IF TYPE = T_SPECIAL AND SAVEIC$->ALTRET_BIT = '1'B /* CLIMB WITH ALTRET */

   5982  2 000257   200015 235100                    LDA     TYPE,,AUTO
         2 000260   000004 115007                    CMPA    4,DL
         2 000261   000273 601000 2                  TNZ     COMMON
         2 000262   200011 470500                    LDP0    SAVEIC$,,AUTO
         2 000263   000000 234100                    SZN     0,,PR0
         2 000264   000273 605000 2                  TPL     COMMON

      165     5983    2        THEN DO;

      166     5984    2             S_D.S$TEP.ALT = '1'B;
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:23   

   5984  2 000265   000000 471400 xsym               LDP1    S_D$
         2 000266   400000 236003                    LDQ     -131072,DU
         2 000267   105277 256100                    ORSQ    2751,,PR1

      167     5985    2             ALTIC = STEP_DRL_IC;

   5985  2 000270   200013 235100                    LDA     STEP_DRL_IC,,AUTO
         2 000271   200017 755100                    STA     ALTIC,,AUTO

      168     5986    2             STEP_DRL_IC = STEP_DRL_IC+1;

   5986  2 000272   200013 054100                    AOS     STEP_DRL_IC,,AUTO

      169     5987    2           END;

      170     5988    1   COMMON:                                 /**/
      171     5989    1        IF STEP_DRL_IC = ALTIC THEN S_D.S$TEP.ALT = '0'B; /* Forget alt is */

   5989  2 000273   200013 236100       COMMON       LDQ     STEP_DRL_IC,,AUTO
         2 000274   000302 604000 2                  TMI     s:5991
         2 000275   200017 116100                    CMPQ    ALTIC,,AUTO
         2 000276   000302 601000 2                  TNZ     s:5991

   5989  2 000277   000000 470400 xsym               LDP0    S_D$
         2 000300   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 000301   005277 356100                    ANSQ    2751,,PR0

      172     5990                                                /* its the same as the ret location */
      173     5991    1        S_D.S$TEP.ACTIVE = '1'B;

   5991  2 000302   400000 236003                    LDQ     -131072,DU
         2 000303   000000 470400 xsym               LDP0    S_D$
         2 000304   005276 756100                    STQ     2750,,PR0

      174     5992    1        S_D.S$TEP.LOC = STEP_DRL_IC;

PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:24   
   5992  2 000305   200013 235100                    LDA     STEP_DRL_IC,,AUTO
         2 000306   005300 755100                    STA     2752,,PR0

      175     5993                                                /* REMEMBER EWSQ# */
      176     5994    1        S_D.S$TEP.EWSQ = S_D.EWSQ#;

   5994  2 000307   000011 235100                    LDA     9,,PR0
         2 000310   005304 755100                    STA     2756,,PR0

      177     5995                                      /* CREATE POINTER TO THE PROPOSED STEP_DERAIL */
      178     5996    1        STEP_DRL$ = PINCRW(UIS$,STEP_DRL_IC);

   5996  2 000311   200013 236100                    LDQ     STEP_DRL_IC,,AUTO
         2 000312   000022 736000                    QLS     18
         2 000313   000000 036000 xsym               ADLQ    UIS$
         2 000314   200014 756100                    STQ     STEP_DRL$,,AUTO

      179     5997                            /* Call DDA$GO to set up all other derails, and to set up
      180     5998                            the special location if we're stoped on an AT breakpoint.
      181     5999                       Then put our step derail(s) in.  Its ok if we put them overtop
      182     6000                       of any others, since they will be put back the next time around.
      183     6001                       If we're on an EIS AT (woe is us), then the front end will call
      184     6002                       EISRESET to clean that up. */
      185     6003    1        IF S_D.ALIB

   6003  2 000315   005134 234100                    SZN     2652,,PR0
         2 000316   000322 605000 2                  TPL     s:6005

      186     6004    1        THEN S_D.SAVEIC = S_D.SAVEIC + 2;  /* Fake out step for ALIB */

   6004  2 000317   000002 235100                    LDA     2,,PR0
         2 000320   000002 035007                    ADLA    2,DL
         2 000321   000002 755100                    STA     2,,PR0

      187     6005    1        IF NOT XCON

   6005  2 000322   200004 234100                    SZN     XCON,,AUTO
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:25   
         2 000323   000327 604000 2                  TMI     s:6007

      188     6006    1        THEN CALL DDA$GO ALTRET(CANT_STEP);

   6006  2 000324   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000325   000000 701000 xent               TSX1    DDA$GO
         2 000326   000431 702000 2                  TSX2    CANT_STEP

      189     6007    1        CALL DDB$PLANTONE(STEP_DRL$, TYPE, DRL_STEP, SAVEINS$) ALTRET(ALTRETURNN);

   6007  2 000327   200012 630500                    EPPR0   SAVEINS$,,AUTO
         2 000330   200025 450500                    STP0    DOIT+5,,AUTO
         2 000331   000002 236000 3                  LDQ     2
         2 000332   200024 756100                    STQ     DOIT+4,,AUTO
         2 000333   200015 631500                    EPPR1   TYPE,,AUTO
         2 000334   200023 451500                    STP1    DOIT+3,,AUTO
         2 000335   200014 633500                    EPPR3   STEP_DRL$,,AUTO
         2 000336   200022 453500                    STP3    DOIT+2,,AUTO
         2 000337   200022 630500                    EPPR0   DOIT+2,,AUTO
         2 000340   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000341   000000 701000 xent               TSX1    DDB$PLANTONE
         2 000342   000440 702000 2                  TSX2    ALTRETURNN

      190     6008    1        IF S_D.S$TEP.ALT

   6008  2 000343   000000 470400 xsym               LDP0    S_D$
         2 000344   005277 234100                    SZN     2751,,PR0
         2 000345   000373 605000 2                  TPL     s:6014

      191     6009    2        THEN DO;

      192     6010    2             S_D.S$TEP.ALTLOC = ALTIC;

   6010  2 000346   200017 235100                    LDA     ALTIC,,AUTO
         2 000347   005301 755100                    STA     2753,,PR0

      193     6011    2             CALL DDB$PLANTONE(PINCRW(UIS$, ALTIC), TYPE, DRL_STEP,
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:26   

   6011  2 000350   200017 236100                    LDQ     ALTIC,,AUTO
         2 000351   000022 736000                    QLS     18
         2 000352   000000 036000 xsym               ADLQ    UIS$
         2 000353   200022 756100                    STQ     DOIT+2,,AUTO
         2 000354   000000 236000 xsym               LDQ     S_D$
         2 000355   005303 036003                    ADLQ    2755,DU
         2 000356   200023 756100                    STQ     DOIT+3,,AUTO
         2 000357   200023 631500                    EPPR1   DOIT+3,,AUTO
         2 000360   200027 451500                    STP1    DOIT+7,,AUTO
         2 000361   000002 236000 3                  LDQ     2
         2 000362   200026 756100                    STQ     DOIT+6,,AUTO
         2 000363   200015 633500                    EPPR3   TYPE,,AUTO
         2 000364   200025 453500                    STP3    DOIT+5,,AUTO
         2 000365   200022 634500                    EPPR4   DOIT+2,,AUTO
         2 000366   200024 454500                    STP4    DOIT+4,,AUTO
         2 000367   200024 630500                    EPPR0   DOIT+4,,AUTO
         2 000370   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000371   000000 701000 xent               TSX1    DDB$PLANTONE
         2 000372   000000 011000                    NOP     0

      194     6012    2               ADDR(S_D.S$TEP.ALTSAVED));
      195     6013    2           END;

      196     6014    1        IF NOT D_XDELTA THEN S_D.S$TEP.OLD_PTR$ = ADDR(NIL);
              6014                 /* Don't inhibit code in user DELTA */

   6014  2 000373   000000 234000 xsym               SZN     D_XDELTA
         2 000374   000401 604000 2                  TMI     s:6016

   6014  2 000375   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000376   000000 470400 xsym               LDP0    S_D$
         2 000377   005305 756100                    STQ     2757,,PR0
         2 000400   000426 710000 2                  TRA     s:6023

      197     6015    1        ELSE
      198     6016    1             IF SAVEIC$->INSTR.I = '1'B THEN /* If inhibit bit set, zero ptr */
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:27   

   6016  2 000401   200011 470500                    LDP0    SAVEIC$,,AUTO
         2 000402   000000 236100                    LDQ     0,,PR0
         2 000403   000200 316007                    CANQ    128,DL
         2 000404   000411 600000 2                  TZE     s:6019

      199     6017    1                  S_D.S$TEP.OLD_PTR$ = ADDR(NIL);

   6017  2 000405   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000406   000000 471400 xsym               LDP1    S_D$
         2 000407   105305 756100                    STQ     2757,,PR1
         2 000410   000426 710000 2                  TRA     s:6023

      200     6018    2             ELSE DO;

      201     6019    2                  I = SAVEIC$->INSTR | '000000000200'O; /* SET INHIBIT BIT */

   6019  2 000411   000000 276000 1                  ORQ     0
         2 000412   200007 756100                    STQ     I,,AUTO

      202     6020    2                  CALL DDC$PUTONE(SAVEIC$,I) ALTRET(BAD_PUT); /* PUT BACK IN USER */

   6020  2 000413   200007 631500                    EPPR1   I,,AUTO
         2 000414   200023 451500                    STP1    DOIT+3,,AUTO
         2 000415   200011 633500                    EPPR3   SAVEIC$,,AUTO
         2 000416   200022 453500                    STP3    DOIT+2,,AUTO
         2 000417   200022 630500                    EPPR0   DOIT+2,,AUTO
         2 000420   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000421   000000 701000 xent               TSX1    DDC$PUTONE
         2 000422   000435 702000 2                  TSX2    BAD_PUT

      203     6021    2                  S_D.S$TEP.OLD_PTR$ = SAVEIC$; /* REMEMBER WHERE IT IS */

   6021  2 000423   200011 236100                    LDQ     SAVEIC$,,AUTO
         2 000424   000000 470400 xsym               LDP0    S_D$
         2 000425   005305 756100                    STQ     2757,,PR0

PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:28   
      204     6022    2                END;

      205     6023    1        S_D.GO_MODE = '0'B;                /* TURN GO MODE 'OFF' */

   6023  2 000426   000000 470400 xsym               LDP0    S_D$
         2 000427   000020 450100                    STZ     16,,PR0

      206     6024    1        RETURN;

   6024  2 000430   000000 702200 xent               TSX2  ! X66_ARET

   6023  2 000431                       CANT_STEP    null
      207     6025    1   CANT_STEP: ;
      208     6026    1        S_D.ERROR = E@CANTSTEP;            /* E@CANTSTEP */

   6026  2 000431   000771 235007                    LDA     505,DL
         2 000432   000000 470400 xsym               LDP0    S_D$
         2 000433   000013 755100                    STA     11,,PR0

      209     6027    1        GOTO ALTRETURNN;

   6027  2 000434   000440 710000 2                  TRA     ALTRETURNN

   6026  2 000435                       BAD_PUT      null
      210     6028    1   BAD_PUT: ;
      211     6029    1        CALL DDE$ERROR;

   6029  2 000435   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000436   000000 701000 xent               TSX1    DDE$ERROR
         2 000437   000000 011000                    NOP     0

      212     6030    1   ALTRETURNN:
      213     6031    1        CALL DDB$RESTORE;             /* Need to pick up brkpnts from DDA$GO */

   6031  2 000440   000002 631400 xsym  ALTRETURNN   EPPR1   B_VECTNIL+2
         2 000441   000000 701000 xent               TSX1    DDB$RESTORE
         2 000442   000000 011000                    NOP     0
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:29   

      214     6032    1        S_D.GO_MODE = '0'B;

   6032  2 000443   000000 470400 xsym               LDP0    S_D$
         2 000444   000020 450100                    STZ     16,,PR0

      215     6033    1        S_D.S$TEP.ACTIVE = '0'B;

   6033  2 000445   005276 450100                    STZ     2750,,PR0

      216     6034    1        ALTRETURN;

   6034  2 000446   000000 702200 xent               TSX2  ! X66_AALT

(unnamed)
 Sect OctLoc
   1     000   000000 000200                                                    ....

(unnamed)
 Sect OctLoc
   3     000   577777 777777   677777 777777   000007 006000                    ............
      217     6035    1   END DDA$STEP;
      218     6036        %EOD;

PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:30   
--  Include file information  --

   M_INFO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   DD_ERR_C.:E05TOU  is referenced.
   DD_PSUBS_C.:E05TOU  is referenced.
   DD_SUBS_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure DDA$STEP.

   Procedure DDA$STEP requires 295 words for executable code.
   Procedure DDA$STEP requires 24 words of local(AUTO) storage.
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:31   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:32   
          MINI XREF LISTING

ALTIC
        24**DCL      5954<<ASSIGN   5977<>CALL     5985<<ASSIGN   5989>>IF       6010>>ASSIGN   6011>>CALL
ALTRETURNN
      6031**LABEL    5963--GOTO     6007--CALLALT  6027--GOTO
ALTRET_BIT
        25**DCL      5982>>IF
ALT_FLAG
        23**DCL      5977<>CALL     5978>>IF
B$JIT.CPFLAGS1.SLEAZE
      5416**DCL      5416--REDEF
B$JIT.ERR.MID
      5323**DCL      5323--REDEF
B$JIT.JRESPEAK
      5484**DCL      5485--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      5593**DCL      5593--REDEF    5594--REDEF
B$JIT.PCL
      5486**DCL      5926>>IF
B$JIT.PNR
      5497**DCL      5497--REDEF
B$JIT.TDP
      5482**DCL      5926>>IF
B$JIT.TSLINE
      5591**DCL      5592--REDEF
B$JIT$
      5724**DCL      5317--IMP-PTR  5926>>IF       5926>>IF
BAD_PUT
      6026**LABEL    6020--CALLALT
CANT_STEP
      6023**LABEL    5885--GOTO     5935--CALLALT  5977--CALLALT  6006--CALLALT
COMMON
      5989**LABEL    5955--GOTO     5979--GOTO
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:33   
DDA$GO
      5872**DCL-ENT  6006--CALL
DDB$INTERP
      5868**DCL-ENT  5949--CALL
DDB$PLANTONE
      5871**DCL-ENT  6007--CALL     6011--CALL
DDB$RESTORE
      5877**DCL-ENT  6031--CALL
DDB$STEPADR
      5876**DCL-ENT  5977--CALL
DDB$TESTTRAN
      5869**DCL-ENT  5974--CALL
DDC$PUTONE
      5874**DCL-ENT  6020--CALL
DDE$ERROR
      5875**DCL-ENT  5884--CALL     6029--CALL
DOIT
        26**DCL      5970<<ASSIGN   5971<<ASSIGN   5975<<ASSIGN   5977<>CALL
DXA$SSF
      5878**DCL-ENT  5935--CALL
DXB$CUSE
      5867**DCL-ENT  5937--CALL
D_XDELTA
      5866**DCL      5925>>IF       6014>>IF
F$IRST.UNUSED
      1350**DCL      1351--REDEF    1355--REDEF
I
        16**DCL      6019<<ASSIGN   6020<>CALL
INSTR
      1406**DCL      6019>>ASSIGN
INSTR.I
      1417**DCL      6016>>IF
INSTR.OP
      1416**DCL      5971>>IF
INSTR.TAG.TD
      1422**DCL      1423--REDEF
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:34   
INSTR.TAGG
      1419**DCL      1420--REDEF
INSTR.Y
      1407**DCL      1408--REDEF    1411--REDEF
LENGTH
        17**DCL      5949<>CALL     5957>>ASSIGN   5960>>IF
NO_TRAN
      5978**LABEL    5967--GOTO     5974--CALLALT
PXCON
        12**DCL        11--PROC     5919--ENTRY    5920--IF       5922>>ASSIGN
SAVEIC$
        18**DCL      5939<<ASSIGN   5949<>CALL     5971>>IF       5974<>CALL     5982>>IF       6016>>IF
      6019>>ASSIGN   6020<>CALL     6021>>ASSIGN
SAVEINS$
        19**DCL      5941<<ASSIGN   6007<>CALL
STEP$CMD.CMD_COUNT
      1335**DCL      5891>>IF       5898>>ASSIGN   5909>>ASSIGN   5910>>ASSIGN
STEP$CMD.SETTYPE
      1336**DCL      5887>>IF
STEP_DRL$
        21**DCL      5996<<ASSIGN   6007<>CALL
STEP_DRL_IC
        20**DCL      5953<<ASSIGN   5957<<ASSIGN   5977<>CALL     5985>>ASSIGN   5986<<ASSIGN   5986>>ASSIGN
      5989>>IF       5992>>ASSIGN   5996>>ASSIGN
S_D.ALIB
      4746**DCL      5923>>IF       6003>>IF
S_D.BYPASS
      4422**DCL      5901>>ASSIGN   5902<<ASSIGN   5905<<ASSIGN
S_D.BYPASS_SAVE
      4130**DCL      5901<<ASSIGN   5905>>ASSIGN
S_D.CURRENT_CHANNEL
      4942**DCL      4944--REDEF
S_D.DEBUGA
      4094**DCL      4096--REDEF
S_D.DO$
      4045**DCL      5881>>IF       5887>>IF       5891>>IF       5898>>ASSIGN   5909>>ASSIGN   5910>>ASSIGN
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:35   
S_D.EIS
      5052**DCL      5081--REDEF
S_D.ERROR
      4023**DCL      5883<<ASSIGN   5929<<ASSIGN   5962<<ASSIGN   6026<<ASSIGN
S_D.EWSQ#
      4019**DCL      5994>>ASSIGN
S_D.GO_MODE
      4033**DCL      5933<<ASSIGN   6023<<ASSIGN   6032<<ASSIGN
S_D.HOST_MESSAGE_BUF_REMOTE
      4985**DCL      4986--REDEF    5000--REDEF
S_D.JDE
      4599**DCL      4600--REDEF
S_D.L$.VALUE
      4152**DCL      4158--REDEF    4166--REDEF    4169--REDEF    4172--REDEF    4175--REDEF
S_D.L$.VALUE.L
      4153**DCL      4154--REDEF    4155--REDEF
S_D.L6_MESSAGE_BUF
      5006**DCL      5008--REDEF
S_D.OUTPUT
      4972**DCL      4974--REDEF
S_D.REMOTE_MSG.FNCC
      4991**DCL      4992--REDEF
S_D.REMOTE_MSG.STXC
      4987**DCL      4988--REDEF
S_D.REMOTE_MSG.SUBFNCC
      4995**DCL      4996--REDEF
S_D.S$TEP.ACTIVE
      4894**DCL      5991<<ASSIGN   6033<<ASSIGN
S_D.S$TEP.ALT
      4896**DCL      5932<<ASSIGN   5978<<ASSIGN   5984<<ASSIGN   5989<<ASSIGN   6008>>IF
S_D.S$TEP.ALTLOC
      4905**DCL      6010<<ASSIGN
S_D.S$TEP.ALTSAVED
      4909**DCL      6011--CALL
S_D.S$TEP.CMD_COUNT
      4916**DCL      5889<<ASSIGN   5909<<ASSIGN
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:36   
S_D.S$TEP.CUR_COUNT
      4918**DCL      5890<<ASSIGN   5910<<ASSIGN
S_D.S$TEP.DOING_SOC
      4900**DCL      5894<<ASSIGN
S_D.S$TEP.EWSQ
      4911**DCL      5994<<ASSIGN
S_D.S$TEP.LOC
      4903**DCL      5992<<ASSIGN
S_D.S$TEP.MODE
      4920**DCL      5898<<ASSIGN   5899>>IF
S_D.S$TEP.OLD_PTR$
      4913**DCL      6014<<ASSIGN   6017<<ASSIGN   6021<<ASSIGN
S_D.S$TEP.ONE_FLAG
      4898**DCL      5880<<ASSIGN   5893<<ASSIGN   5970>>ASSIGN
S_D.S$TEP.SAVED
      4907**DCL      5941--ASSIGN
S_D.SAVEIC
      4005**DCL      5924<<ASSIGN   5924>>ASSIGN   5926>>IF       5939>>ASSIGN   5953>>ASSIGN   5954>>ASSIGN
      5957>>ASSIGN   5977<>CALL     6004<<ASSIGN   6004>>ASSIGN
S_D.SV
      4051**DCL      4072--REDEF
S_D$
      5303**DCL      3999--IMP-PTR  5880>>ASSIGN   5881>>IF       5883>>ASSIGN   5887>>IF       5889>>ASSIGN
      5890>>ASSIGN   5891>>IF       5893>>ASSIGN   5894>>ASSIGN   5898>>ASSIGN   5898>>ASSIGN   5899>>IF
      5901>>ASSIGN   5901>>ASSIGN   5902>>ASSIGN   5905>>ASSIGN   5905>>ASSIGN   5909>>ASSIGN   5909>>ASSIGN
      5910>>ASSIGN   5910>>ASSIGN   5923>>IF       5924>>ASSIGN   5924>>ASSIGN   5926>>IF       5929>>ASSIGN
      5932>>ASSIGN   5933>>ASSIGN   5939>>ASSIGN   5941>>ASSIGN   5953>>ASSIGN   5954>>ASSIGN   5957>>ASSIGN
      5962>>ASSIGN   5970>>ASSIGN   5977>>CALL     5978>>ASSIGN   5984>>ASSIGN   5989>>ASSIGN   5991>>ASSIGN
      5992>>ASSIGN   5994>>ASSIGN   5994>>ASSIGN   6003>>IF       6004>>ASSIGN   6004>>ASSIGN   6008>>IF
      6010>>ASSIGN   6011>>CALL     6014>>ASSIGN   6017>>ASSIGN   6021>>ASSIGN   6023>>ASSIGN   6026>>ASSIGN
      6032>>ASSIGN   6033>>ASSIGN
TYPE
        22**DCL      5949<>CALL     5960>>IF       5966>>IF       5966>>IF       5972>>IF       5982>>IF
      6007<>CALL     6011<>CALL
UIS$
      5865**DCL      5939>>ASSIGN   5996>>ASSIGN   6011>>CALL
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:37   
XCON
        13**DCL      5921<<ASSIGN   5922<<ASSIGN   5951>>IF       6005>>IF
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:38   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:39   
              MINI UREF LISTING

B$ALIBF    5683**DCL
B$TCB    5680**DCL
B$TCB$    5723**DCL
CMD      14**DCL
DDA$STEP      11**PROC
DDA$STEP_MORE    5919**ENTRY
DDB$PLANT    5873**DCL-ENT
DDB$TEFFADD    5870**DCL-ENT
FATT$      15**DCL
FIXCOM    1374**DCL
FXCM    1390**DCL
M$ACCT    5624**DCL-ENT
M$ACTIVATE    5627**DCL-ENT
M$ALIB    5620**DCL-ENT
M$ASUSER    5622**DCL-ENT
M$ATTACH    5629**DCL-ENT
M$BADPP    5647**DCL-ENT
M$CGCTL    5628**DCL-ENT
M$CGINFO    5628**DCL-ENT
M$CHECK    5609**DCL-ENT
M$CHGUNIT    5667**DCL-ENT
M$CLOSE    5607**DCL-ENT
M$CLRSTK    5665**DCL-ENT
M$CMDVAR    5676**DCL-ENT
M$CONFIG    5637**DCL-ENT
M$CORRES    5612**DCL-ENT
M$CPEXIT    5621**DCL-ENT
M$CVM    5645**DCL-ENT
M$CVOL    5610**DCL-ENT
M$DCLFLD    5637**DCL-ENT
M$DEACTIVATE    5627**DCL-ENT
M$DELREC    5609**DCL-ENT
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:40   
M$DEQ    5674**DCL-ENT
M$DETACH    5629**DCL-ENT
M$DEVICE    5611**DCL-ENT
M$DISPLAY    5674**DCL-ENT
M$DISPRES    5614**DCL-ENT
M$DLIB    5620**DCL-ENT
M$DRIBBLE    5637**DCL-ENT
M$DRTN    5665**DCL-ENT
M$DSUSER    5622**DCL-ENT
M$ENQ    5673**DCL-ENT
M$EOM    5632**DCL-ENT
M$ERASE    5638**DCL-ENT
M$ERR    5619**DCL-ENT
M$ERRMSG    5670**DCL-ENT
M$EVENT    5662**DCL-ENT
M$EXHUME    5671**DCL-ENT
M$EXIT    5619**DCL-ENT
M$EXTEND    5611**DCL-ENT
M$FDP    5643**DCL-ENT
M$FDS    5642**DCL-ENT
M$FEBOOT    5635**DCL-ENT
M$FECTL    5636**DCL-ENT
M$FEDUMP    5635**DCL-ENT
M$FID    5670**DCL-ENT
M$FINDPROC    5624**DCL-ENT
M$FSUSER    5622**DCL-ENT
M$FVP    5644**DCL-ENT
M$FWCG    5628**DCL-ENT
M$GBPL    5648**DCL-ENT
M$GDDL    5644**DCL-ENT
M$GDP    5643**DCL-ENT
M$GDS    5642**DCL-ENT
M$GETDCB    5613**DCL-ENT
M$GETMOUSE    5653**DCL-ENT
M$GETPM    5654**DCL-ENT
M$GJOB    5672**DCL-ENT
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:41   
M$GLINEATTR    5632**DCL-ENT
M$GOODPP    5647**DCL-ENT
M$GPLATEN    5640**DCL-ENT
M$GPROMPT    5639**DCL-ENT
M$GTRMATTR    5633**DCL-ENT
M$GTRMCTL    5631**DCL-ENT
M$GTRMTAB    5634**DCL-ENT
M$GVP    5643**DCL-ENT
M$HELP    5670**DCL-ENT
M$INT    5662**DCL-ENT
M$INTRTN    5623**DCL-ENT
M$IOQ    5658**DCL-ENT
M$JOBSTATS    5672**DCL-ENT
M$KEYIN    5612**DCL-ENT
M$LDEV    5607**DCL-ENT
M$LDTRC    5620**DCL-ENT
M$LIMIT    5613**DCL-ENT
M$LINES    5612**DCL-ENT
M$LINK    5619**DCL-ENT
M$MADMUCK    5615**DCL-ENT
M$MAKUSER    5646**DCL-ENT
M$MBS    5614**DCL-ENT
M$MDFFLD    5638**DCL-ENT
M$MERC    5663**DCL-ENT
M$MERCS    5664**DCL-ENT
M$MIRROR    5658**DCL-ENT
M$MONINFO    5675**DCL-ENT
M$MPL    5648**DCL-ENT
M$NODEINFO    5639**DCL-ENT
M$NXTUSR    5673**DCL-ENT
M$OCMSG    5671**DCL-ENT
M$OLAY    5619**DCL-ENT
M$OPEN    5607**DCL-ENT
M$PAS    5648**DCL-ENT
M$PATHCON    5671**DCL-ENT
M$PDS    5642**DCL-ENT
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:42   
M$PFIL    5609**DCL-ENT
M$PLATEN    5633**DCL-ENT
M$PRECORD    5611**DCL-ENT
M$PROCNAME    5624**DCL-ENT
M$PROFILE    5635**DCL-ENT
M$PROMPT    5631**DCL-ENT
M$RACST    5615**DCL-ENT
M$RDSYSLOG    5656**DCL-ENT
M$READ    5608**DCL-ENT
M$RELDCB    5613**DCL-ENT
M$RELRES    5614**DCL-ENT
M$RELSTARF    5616**DCL-ENT
M$REM    5616**DCL-ENT
M$RENV    5663**DCL-ENT
M$REQUIRE    5615**DCL-ENT
M$RETRY    5664**DCL-ENT
M$RETRYS    5664**DCL-ENT
M$REW    5610**DCL-ENT
M$RLSFLD    5638**DCL-ENT
M$RPRIV    5666**DCL-ENT
M$RSPP    5645**DCL-ENT
M$RSWITCH    5667**DCL-ENT
M$RUE    5673**DCL-ENT
M$SAD    5646**DCL-ENT
M$SAVE    5622**DCL-ENT
M$SCON    5623**DCL-ENT
M$SCREECH    5621**DCL-ENT
M$SENV    5663**DCL-ENT
M$SETFMA    5607**DCL-ENT
M$SETFP    5636**DCL-ENT
M$SINPUT    5634**DCL-ENT
M$SLCFLD    5639**DCL-ENT
M$SMOUSE    5653**DCL-ENT
M$SMPRT    5645**DCL-ENT
M$SPRIV    5666**DCL-ENT
M$SSC    5646**DCL-ENT
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:43   
M$SSWITCH    5666**DCL-ENT
M$STATE    5675**DCL-ENT
M$STD    5647**DCL-ENT
M$STIMER    5661**DCL-ENT
M$STLPP    5644**DCL-ENT
M$STRAP    5661**DCL-ENT
M$STRMATTR    5633**DCL-ENT
M$STRMCTL    5631**DCL-ENT
M$STRMTAB    5634**DCL-ENT
M$SYMBIO    5672**DCL-ENT
M$SYSCON    5658**DCL-ENT
M$SYSID    5676**DCL-ENT
M$TDCLOSE    5657**DCL-ENT
M$TDIO    5657**DCL-ENT
M$TDOPEN    5656**DCL-ENT
M$TDREQCPU    5657**DCL-ENT
M$TEMPWROC    5651**DCL-ENT
M$TIME    5674**DCL-ENT
M$TRAP    5661**DCL-ENT
M$TRMISC    5636**DCL-ENT
M$TRMPRG    5632**DCL-ENT
M$TRTN    5665**DCL-ENT
M$TRUNC    5608**DCL-ENT
M$TTIMER    5661**DCL-ENT
M$UC    5631**DCL
M$UMPL    5648**DCL-ENT
M$UNFID    5670**DCL-ENT
M$UNLATCH    5627**DCL-ENT
M$UNSHARE    5624**DCL-ENT
M$USRFIELD    5667**DCL-ENT
M$VIRTUAL    5642**DCL-ENT
M$WAIT    5665**DCL-ENT
M$WEOF    5610**DCL-ENT
M$WRITE    5608**DCL-ENT
M$WRSYSLOG    5656**DCL-ENT
M$XCON    5662**DCL-ENT
PL6.E3A0      #001=DDA$STEP File=DDA$STEP.:E05TSI                                TUE 07/29/97 13:38 Page:44   
M$XCONRTN    5623**DCL-ENT
M$XEQTIME    5675**DCL-ENT
M$XFLUSH    5616**DCL-ENT
M$XMOUSE    5653**DCL-ENT
M$XXX    5619**DCL-ENT
M$YC    5621**DCL-ENT

PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:45   
      219        1        /*T***********************************************************/
      220        2        /*T*                                                         */
      221        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      222        4        /*T*                                                         */
      223        5        /*T***********************************************************/
      224        6        /*D*  NAME:  DDA$STEP_DECR
      225        7              CALL:  CALL DDA$STEP_DECR ALTRET(NOT_ZERO)
      226        8              DESCRIPTION:  THIS ROUTINE IS CALLED FROM DXA$FAULT.
      227        9                     ITS PURPOSE IS TO MANAGE THE COUNT IN THE STEP
      228       10                     COMMAND (STEP N), TAKING INTO CONSIDERATION THE
      229       11                     SCHEMA OR NO_SCHEMA MODE. THE COUNTER (CUR_COUNT) IS
      230       12                     DECREMENTED IF THERE IS NO SCHEMA TO CONSIDER. IF THERE
      231       13                     IS A SCHEMA TO CONSIDER, THE COUNT IS DECREMENTED
      232       14                     IF  WE ARE AT THE BEGINNING OF A STATEMENT. AN
      233       15                     ALTRET IS TAKEN IF WE ARE NOT AT THE BEGINNING OF A
      234       16                     STATEMENT OR IF THE COUNTER IS NOT ZERO.  (IN DXA$FAULT,
      235       17                     THE ALTRETURN CAUSES DELTA TO RE-INVOKE DDA$STEP
      236       18                     ...AND RETURN TO THE USER...THEREBY BYBPASSING
      237       19                     THE STEP REPORT AND SUBSEQUENT INTERACTION WITH THE
      238       20                     USER.
      239       21                     */
      240       22        DDA$STEP_DECR: PROC ALTRET;
      241       23        %INCLUDE DD$BASED;
      242     1326        %INCLUDE XUH_MACRO_C;
      243     1410        %INCLUDE DD_SD_M;
      244     2746        %S_D;
      245     4064        %INCLUDE DD_ERR_C;
      246     4461        %INCLUDE DD_PSUBS_C;
      247     4936        %INCLUDE B$OBJECT_C;
      248     8366        %B$EXST;
      249     8473    1   DCL IC SBIN;
      250     8474    1   DCL SUBST# UBIN;
      251     8475    1   DCL STMT# UBIN;
      252     8476    1   DCL STMT$ PTR;
      253     8477    1   DCL SUBST UBIN;
      254     8478    1   DCL DDE$ERROR ENTRY;
      255     8479    1   DCL DDF$STATEMENT ENTRY(4) ALTRET;
PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:46   
      256     8480    1   DCL DDF$EXST_# ENTRY(2) ALTRET;
      257     8481    1        IF S_D.S$TEP.MODE = C@INSTRUCTIONS /*C@INSTRUCTIONS*/
      258     8482    1          OR NOT S_D.SCHEMA OR NOT S_D.QSCH.OK
      259     8483    1        THEN GOTO NO_SCHEMA;
      260     8484                  /* STATEMENT STEP MODE.  SEE IF CURRENT IC IS AT THE BEGINNING OF A
      261     8485                  STATEMENT. */
      262     8486    1        IC = S_D.SAVEIC;
      263     8487    1        CALL DDF$STATEMENT(IC, STMT#, SUBST#, SUBST) ALTRET(NO_SCHEMA);
      264     8488    1        IF S_D.S$TEP.MODE = C@SUBSTATEMENTS /*C@SUBSTATEMENTS*/
      265     8489    2        THEN DO;
      266     8490    2             CALL DDF$EXST_#(SUBST#, STMT$) ALTRET(NO_SCHEMA);
      267     8491    2             IF IC = STMT$->B$EXST.ISADDR THEN GOTO NO_SCHEMA;
      268     8492    2             ELSE ALTRETURN;
      269     8493    2           END;
      270     8494    2        ELSE DO;
      271     8495    2             CALL DDF$EXST_#(STMT#, STMT$) ALTRET(NO_SCHEMA);
      272     8496    2             IF IC ~= STMT$->B$EXST.ISADDR THEN ALTRETURN;
      273     8497    2             IF S_D.S$TEP.MODE = C@PARAGRAPHS AND NOT S_D.LABEL_FOUND
      274     8498    2             THEN ALTRETURN;               /*C@PARAGRAPHS*/
      275     8499    2           END;
      276     8500    1   NO_SCHEMA: ;
      277     8501                            /* WE'RE HERE BECAUSE THERE'S NO SCHEMA OR WE'VE REACHED THE
      278     8502                            THE NEXT STATEMENT.
      279     8503                            */
      280     8504    1        S_D.S$TEP.ONE_FLAG = '0'B;
      281     8505    1        S_D.S$TEP.CUR_COUNT = S_D.S$TEP.CUR_COUNT - 1;
      282     8506    1        IF S_D.S$TEP.CUR_COUNT > 0 THEN ALTRETURN;
      283     8507    1        RETURN;
      284     8508    1   END DDA$STEP_DECR;

PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:47   
--  Include file information  --

   B$OBJECT_C.:E05TOU  is referenced.
   DD_PSUBS_C.:E05TOU  is referenced.
   DD_ERR_C.:E05TOU  is referenced.
   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDA$STEP_DECR.

   Procedure DDA$STEP_DECR requires 72 words for executable code.
   Procedure DDA$STEP_DECR requires 12 words of local(AUTO) storage.

    No errors detected in file DDA$STEP.:E05TSI    .

PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:48   

 Object Unit name= DDA$STEP_DECR                              File name= DDA$STEP.:E05TOU
 UTS= JUL 29 '97 13:38:36.84 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    72    110  DDA$STEP_DECR
    1  RoData even  none     1      1  DDA$STEP_DECR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        0  DDA$STEP_DECR

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       4 DDF$STATEMENT
 yes     yes           Std       2 DDF$EXST_#
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    S_D$                                  B_VECTNIL
PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:49   


      219        1        /*T***********************************************************/
      220        2        /*T*                                                         */
      221        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      222        4        /*T*                                                         */
      223        5        /*T***********************************************************/
      224        6        /*D*  NAME:  DDA$STEP_DECR
      225        7              CALL:  CALL DDA$STEP_DECR ALTRET(NOT_ZERO)
      226        8              DESCRIPTION:  THIS ROUTINE IS CALLED FROM DXA$FAULT.
      227        9                     ITS PURPOSE IS TO MANAGE THE COUNT IN THE STEP
      228       10                     COMMAND (STEP N), TAKING INTO CONSIDERATION THE
      229       11                     SCHEMA OR NO_SCHEMA MODE. THE COUNTER (CUR_COUNT) IS
      230       12                     DECREMENTED IF THERE IS NO SCHEMA TO CONSIDER. IF THERE
      231       13                     IS A SCHEMA TO CONSIDER, THE COUNT IS DECREMENTED
      232       14                     IF  WE ARE AT THE BEGINNING OF A STATEMENT. AN
      233       15                     ALTRET IS TAKEN IF WE ARE NOT AT THE BEGINNING OF A
      234       16                     STATEMENT OR IF THE COUNTER IS NOT ZERO.  (IN DXA$FAULT,
      235       17                     THE ALTRETURN CAUSES DELTA TO RE-INVOKE DDA$STEP
      236       18                     ...AND RETURN TO THE USER...THEREBY BYBPASSING
      237       19                     THE STEP REPORT AND SUBSEQUENT INTERACTION WITH THE
      238       20                     USER.
      239       21                     */
      240       22        DDA$STEP_DECR: PROC ALTRET;

     22  0 000000   000000 700200 xent  DDA$STEP_DE* TSX0  ! X66_AUTO_0
         0 000001   000014 000000                    ZERO    12,0

      241       23        %INCLUDE DD$BASED;
      242     1326        %INCLUDE XUH_MACRO_C;
      243     1410        %INCLUDE DD_SD_M;
      244     2746        %S_D;
      245     4064        %INCLUDE DD_ERR_C;
      246     4461        %INCLUDE DD_PSUBS_C;
      247     4936        %INCLUDE B$OBJECT_C;
      248     8366        %B$EXST;
      249     8473    1   DCL IC SBIN;
      250     8474    1   DCL SUBST# UBIN;
PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:50   
      251     8475    1   DCL STMT# UBIN;
      252     8476    1   DCL STMT$ PTR;
      253     8477    1   DCL SUBST UBIN;
      254     8478    1   DCL DDE$ERROR ENTRY;
      255     8479    1   DCL DDF$STATEMENT ENTRY(4) ALTRET;
      256     8480    1   DCL DDF$EXST_# ENTRY(2) ALTRET;
      257     8481    1        IF S_D.S$TEP.MODE = C@INSTRUCTIONS /*C@INSTRUCTIONS*/

   8481  0 000002   000000 470400 xsym               LDP0    S_D$
         0 000003   005310 235100                    LDA     2760,,PR0
         0 000004   001105 115007                    CMPA    581,DL
         0 000005   000077 600000 0                  TZE     NO_SCHEMA
         0 000006   000052 234100                    SZN     42,,PR0
         0 000007   000077 605000 0                  TPL     NO_SCHEMA
         0 000010   000733 234100                    SZN     475,,PR0
         0 000011   000077 605000 0                  TPL     NO_SCHEMA

      258     8482    1          OR NOT S_D.SCHEMA OR NOT S_D.QSCH.OK
      259     8483    1        THEN GOTO NO_SCHEMA;
      260     8484                  /* STATEMENT STEP MODE.  SEE IF CURRENT IC IS AT THE BEGINNING OF A
      261     8485                  STATEMENT. */
      262     8486    1        IC = S_D.SAVEIC;

   8486  0 000012   000002 235100                    LDA     2,,PR0
         0 000013   200003 755100                    STA     IC,,AUTO

      263     8487    1        CALL DDF$STATEMENT(IC, STMT#, SUBST#, SUBST) ALTRET(NO_SCHEMA);

   8487  0 000014   200007 631500                    EPPR1   SUBST,,AUTO
         0 000015   200013 451500                    STP1    SUBST+4,,AUTO
         0 000016   200004 633500                    EPPR3   SUBST#,,AUTO
         0 000017   200012 453500                    STP3    SUBST+3,,AUTO
         0 000020   200005 634500                    EPPR4   STMT#,,AUTO
         0 000021   200011 454500                    STP4    SUBST+2,,AUTO
         0 000022   200003 635500                    EPPR5   IC,,AUTO
         0 000023   200010 455500                    STP5    SUBST+1,,AUTO
         0 000024   200010 630500                    EPPR0   SUBST+1,,AUTO
PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:51   
         0 000025   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 000026   000000 701000 xent               TSX1    DDF$STATEMENT
         0 000027   000077 702000 0                  TSX2    NO_SCHEMA

      264     8488    1        IF S_D.S$TEP.MODE = C@SUBSTATEMENTS /*C@SUBSTATEMENTS*/

   8488  0 000030   000000 470400 xsym               LDP0    S_D$
         0 000031   005310 235100                    LDA     2760,,PR0
         0 000032   001110 115007                    CMPA    584,DL
         0 000033   000052 601000 0                  TNZ     s:8495

      265     8489    2        THEN DO;

      266     8490    2             CALL DDF$EXST_#(SUBST#, STMT$) ALTRET(NO_SCHEMA);

   8490  0 000034   200006 631500                    EPPR1   STMT$,,AUTO
         0 000035   200011 451500                    STP1    SUBST+2,,AUTO
         0 000036   200004 633500                    EPPR3   SUBST#,,AUTO
         0 000037   200010 453500                    STP3    SUBST+1,,AUTO
         0 000040   200010 630500                    EPPR0   SUBST+1,,AUTO
         0 000041   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000042   000000 701000 xent               TSX1    DDF$EXST_#
         0 000043   000077 702000 0                  TSX2    NO_SCHEMA

      267     8491    2             IF IC = STMT$->B$EXST.ISADDR THEN GOTO NO_SCHEMA;

   8491  0 000044   200006 470500                    LDP0    STMT$,,AUTO
         0 000045   000000 236100                    LDQ     0,,PR0
         0 000046   000032 376000 xsym               ANQ     B_VECTNIL+26
         0 000047   200003 116100                    CMPQ    IC,,AUTO
         0 000050   000077 600000 0                  TZE     NO_SCHEMA

      268     8492    2             ELSE ALTRETURN;

   8492  0 000051   000000 702200 xent               TSX2  ! X66_AALT

      269     8493    2           END;
PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:52   
      270     8494    2        ELSE DO;

      271     8495    2             CALL DDF$EXST_#(STMT#, STMT$) ALTRET(NO_SCHEMA);

   8495  0 000052   200006 631500                    EPPR1   STMT$,,AUTO
         0 000053   200011 451500                    STP1    SUBST+2,,AUTO
         0 000054   200005 633500                    EPPR3   STMT#,,AUTO
         0 000055   200010 453500                    STP3    SUBST+1,,AUTO
         0 000056   200010 630500                    EPPR0   SUBST+1,,AUTO
         0 000057   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000060   000000 701000 xent               TSX1    DDF$EXST_#
         0 000061   000077 702000 0                  TSX2    NO_SCHEMA

      272     8496    2             IF IC ~= STMT$->B$EXST.ISADDR THEN ALTRETURN;

   8496  0 000062   200006 470500                    LDP0    STMT$,,AUTO
         0 000063   000000 236100                    LDQ     0,,PR0
         0 000064   000032 376000 xsym               ANQ     B_VECTNIL+26
         0 000065   200003 116100                    CMPQ    IC,,AUTO
         0 000066   000070 600000 0                  TZE     s:8497

   8496  0 000067   000000 702200 xent               TSX2  ! X66_AALT

      273     8497    2             IF S_D.S$TEP.MODE = C@PARAGRAPHS AND NOT S_D.LABEL_FOUND

   8497  0 000070   000000 471400 xsym               LDP1    S_D$
         0 000071   105310 235100                    LDA     2760,,PR1
         0 000072   001106 115007                    CMPA    582,DL
         0 000073   000077 601000 0                  TNZ     NO_SCHEMA
         0 000074   105327 234100                    SZN     2775,,PR1
         0 000075   000077 604000 0                  TMI     NO_SCHEMA

      274     8498    2             THEN ALTRETURN;               /*C@PARAGRAPHS*/

   8498  0 000076   000000 702200 xent               TSX2  ! X66_AALT

   8495  0 000077                       NO_SCHEMA    null
PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:53   
      275     8499    2           END;
      276     8500    1   NO_SCHEMA: ;
      277     8501                            /* WE'RE HERE BECAUSE THERE'S NO SCHEMA OR WE'VE REACHED THE
      278     8502                            THE NEXT STATEMENT.
      279     8503                            */
      280     8504    1        S_D.S$TEP.ONE_FLAG = '0'B;

   8504  0 000077   000000 470400 xsym               LDP0    S_D$
         0 000100   000000 236000 1                  LDQ     0
         0 000101   005277 356100                    ANSQ    2751,,PR0

      281     8505    1        S_D.S$TEP.CUR_COUNT = S_D.S$TEP.CUR_COUNT - 1;

   8505  0 000102   005307 235100                    LDA     2759,,PR0
         0 000103   000001 135007                    SBLA    1,DL
         0 000104   005307 755100                    STA     2759,,PR0

      282     8506    1        IF S_D.S$TEP.CUR_COUNT > 0 THEN ALTRETURN;

   8506  0 000105   000107 600000 0                  TZE     s:8507

   8506  0 000106   000000 702200 xent               TSX2  ! X66_AALT

      283     8507    1        RETURN;

   8507  0 000107   000000 702200 xent               TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
   1     000   577777 777777                                                    ....
      284     8508    1   END DDA$STEP_DECR;

PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:54   
--  Include file information  --

   B$OBJECT_C.:E05TOU  is referenced.
   DD_PSUBS_C.:E05TOU  is referenced.
   DD_ERR_C.:E05TOU  is referenced.
   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDA$STEP_DECR.

   Procedure DDA$STEP_DECR requires 72 words for executable code.
   Procedure DDA$STEP_DECR requires 12 words of local(AUTO) storage.

    No errors detected in file DDA$STEP.:E05TSI    .
PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:55   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:56   
          MINI XREF LISTING

B$EXST.ISADDR
      8382**DCL      8491>>IF       8496>>IF
B$EXST.OU
      8376**DCL      8382--REDEF
DDF$EXST_#
      8480**DCL-ENT  8490--CALL     8495--CALL
DDF$STATEMENT
      8479**DCL-ENT  8487--CALL
IC
      8473**DCL      8486<<ASSIGN   8487<>CALL     8491>>IF       8496>>IF
NO_SCHEMA
      8495**LABEL    8483--GOTO     8487--CALLALT  8490--CALLALT  8491--GOTO     8495--CALLALT
STMT#
      8475**DCL      8487<>CALL     8495<>CALL
STMT$
      8476**DCL      8490<>CALL     8491>>IF       8495<>CALL     8496>>IF
SUBST
      8477**DCL      8487<>CALL
SUBST#
      8474**DCL      8487<>CALL     8490<>CALL
S_D.CURRENT_CHANNEL
      3698**DCL      3700--REDEF
S_D.DEBUGA
      2850**DCL      2852--REDEF
S_D.EIS
      3808**DCL      3837--REDEF
S_D.HOST_MESSAGE_BUF_REMOTE
      3741**DCL      3742--REDEF    3756--REDEF
S_D.JDE
      3355**DCL      3356--REDEF
S_D.L$.VALUE
      2908**DCL      2914--REDEF    2922--REDEF    2925--REDEF    2928--REDEF    2931--REDEF
PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:57   
S_D.L$.VALUE.L
      2909**DCL      2910--REDEF    2911--REDEF
S_D.L6_MESSAGE_BUF
      3762**DCL      3764--REDEF
S_D.LABEL_FOUND
      3715**DCL      8497>>IF
S_D.OUTPUT
      3728**DCL      3730--REDEF
S_D.QSCH.OK
      3054**DCL      8481>>IF
S_D.REMOTE_MSG.FNCC
      3747**DCL      3748--REDEF
S_D.REMOTE_MSG.STXC
      3743**DCL      3744--REDEF
S_D.REMOTE_MSG.SUBFNCC
      3751**DCL      3752--REDEF
S_D.S$TEP.CUR_COUNT
      3674**DCL      8505<<ASSIGN   8505>>ASSIGN   8506>>IF
S_D.S$TEP.MODE
      3676**DCL      8481>>IF       8488>>IF       8497>>IF
S_D.S$TEP.ONE_FLAG
      3654**DCL      8504<<ASSIGN
S_D.SAVEIC
      2761**DCL      8486>>ASSIGN
S_D.SCHEMA
      2848**DCL      8481>>IF
S_D.SV
      2807**DCL      2828--REDEF
S_D$
      4059**DCL      2755--IMP-PTR  8481>>IF       8481>>IF       8481>>IF       8486>>ASSIGN   8488>>IF
      8497>>IF       8497>>IF       8504>>ASSIGN   8505>>ASSIGN   8505>>ASSIGN   8506>>IF
PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:58   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #002=DDA$STEP_DECR File=DDA$STEP.:E05TSI                           TUE 07/29/97 13:38 Page:59   
              MINI UREF LISTING

DDA$STEP_DECR      22**PROC
DDE$ERROR    8478**DCL-ENT
