VERSION E05

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:1    
        1        1        /*M* MMQ$CGQ Memory allocation for comgroups */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=6,IND=0,IDT=2,SDI=2,CTI=0,ENU=0,AND,DCI=4,CSU=2,ECU=4,THI=0,DTI=0,STI=1
                 7        ,IAD=0,PRB */
        8        8        /**/
        9        9        /*P* NAME:         MMQ$CGQ
       10       10             PURPOSE:      To perform memory allocation for comgroups
       11       11             DESCRIPTION:
       12       12
       13       13                 The memory allocation scheme for comgroups satisfies
       14       14        the following requirements:
       15       15
       16       16                      o The total memory available to all comgroups
       17       17                        should be definable up to a very large value
       18       18                        ( > 1 megaword).
       19       19                      o The total addressability of a single comgroup
       20       20                        should exceed 100k words.
       21       21                      o Since a CP-6 installation may contain a large
       22       22                        number of comgroups, not all of which may be
       23       23                        active at any time, an inactive comgroup must
       24       24                        occupy no main memory, but must be capable
       25       25                        of being made active with minimum overhead.
       26       26                        Due to the fact that a comgroup contains
       27       27                        MANY pointers, this means one wishes to be
       28       28                        be able to re-open a comgroup without
       29       29                        changing any of the pointers therein.
       30       30
       31       31
       32       32                 A new working space has been defined, called the
       33       33            comgroup WS.  Its page table is up to 10K long and
       34       34            is allocated by TIGR according to the CGQMAP (number
       35       35            of comgroup WS page table pages) parameter.  This
       36       36            page table occupies a 10K hole in the monitor's
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:2    
       37       37            working space and lives in the monitor segment having
       38       38            segid CGPTSID (currently LS115).
       39       39                 The comgroup WS quarter number is always
       40       40            in WSR 3, to enable comgroups to use WSR-type
       41       41            descriptors.
       42       42                 The first 256K of the comgroup WS is the monitor segment
       43       43            CGCXTSID (currently LS116) with TYPE=0 WSR=3 BASE=0.  The
       44       44            first CGCXTSZ (a TIGR parameter) pages of the WS are reserved
       45       45            for comgroup context and addressing blocks.  These
       46       46            blocks are always visible from the monitor, being
       47       47            framed by LS116; thus CGCXTSZ has a maximum value
       48       48            of 254 (not 256 - see user buffer mapping below).
       49       49                 The rest of the WS is reserved for comgroup
       50       50            data pages.
       51       51
       52       52                 A comgroup has, then, three pieces: a context
       53       53            block, an address block, and data pages.  The
       54       54            former two are always visible from the monitor.
       55       55
       56       56                 Context block pages are allocated and released
       57       57            by MMQ$GCCP and MMQ$FCCP.  Address block pages are
       58       58            housekeeping pages and are allocated and released by
       59       59            MMQ$GCAP and MMQ$FCAP.  An address block is framed
       60       60            by the structure KQ_DSB (descriptor segment block)
       61       61            found in KQM_MAC_C.  The address block contains
       62       62            a type 1 descriptor framing the rest of the block.
       63       63            The rest of the block contains type 0 descriptors
       64       64            with WSR = 3.  These descriptors frame the comgroup's
       65       65            data pages.  In order to see these pages, one loads
       66       66            the type 1 descriptor into the ASR, and uses pointers
       67       67            with argument segment segids.
       68       68
       69       69                 The remainder of the comgroup page table, that is,
       70       70            the part not reserved for the context & address block
       71       71            segment, is split up into chunks of %CGQ_CHUNK_SIZE
       72       72            words.  Each chunk will be used to create a single
       73       73            segment for a single comgroup.
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:3    
       74       74            The first time a comgroup needs a page, one
       75       75            of these chunks is allocated, and one of the comgroup's
       76       76            address block descriptors set up with a bound of
       77       77            %CGQ_CHUNK_SIZE*4096, and a base calculated from the
       78       78            position of the allocated chunk in the page table.
       79       79            Thus that descriptor will now frame any pages mapped
       80       80            into the chunk.
       81       81
       82       82                 Pages are allocated and released, on behalf of
       83       83            a given comgroup, by MMQ$GCDP and MMQ$FCDP.  The
       84       84            maximum addressability of a given comgroup is
       85       85            %CGQ_CHUNK_SIZE * N pages, where N is the number of
       86       86            type 0 descriptors in an address block.  The maximum
       87       87            amount of memory available to all comgroups is thus
       88       88            (CGQMAP*1024)-CGCXTSZ pages.
       89       89
       90       90                  This scheme makes it easy to re-open a comgroup.
       91       91            The close process simply saves the argument-segment
       92       92            pointer of each comgroup page.  When the comgroup
       93       93            is being reopened, MMQ$RECON is called to reconstruct
       94       94            the address block.  It does this by obtaining any
       95       95            available page table chunks, and setting up the
       96       96            bases of the address block descriptors appropriately.
       97       97            The argument-segment pointers in the comgroup are
       98       98            thus unchanged regardless of where the physical
       99       99            pages appear in the comgroup working space.
      100      100
      101      101                 The first two entries in the comgroup page
      102      102            table are reserved for mapping user buffers.  The
      103      103            technique used here depends on the fact that user
      104      104            reads to comgroups cannot exceed 4096 bytes (1K
      105      105            words).  When a user's read is made pending,
      106      106            parameters are set up to allow the process which
      107      107            satisfies the read to store the data into the
      108      108            user's buffer without running on his behalf.
      109      109            This is done by plucking out the 1 or 2 page
      110      110            table entries from the user page table which
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:4    
      111      111            correspond to his buffer, and remembering the
      112      112            byte displacement, X, of his buffer into the
      113      113            first page.  Then, one may store into his
      114      114            buffer by stuffing the CG page table's first
      115      115            two words with the saved page table entries,
      116      116            and referencing $LS116->X. */
      117      117        MMQ$INIT: PROC(PGTBL$,KQ$DSB,ERR) ALTRET;
      118      118        /**/
      119      119
      120      120
      121      121
      122      122        /**/
      123      123        /* INCLUDES */
      124      124        /**/
      125      125        %INCLUDE KQ_SUBS_C;
      126      425        %INCLUDE KQM_MAC_C;
      127      798        %INCLUDE MM_DATA_R;
      128     1318        %INCLUDE HF_DATA_R;
      129     1361        %INCLUDE M_ERRORS_C;
      130     1425        %INCLUDE B_MACROS_C;
      131     1536        %INCLUDE B_SEGIDS_C;
      132     2075        %INCLUDE HF_LOCK_C;
      133     2089        %INCLUDE B$MAP;
      134     2188        %INCLUDE SS_SCHED_R;
      135     2231
      136     2232
      137     2233
      138     2234        /**/
      139     2235        /* PARAMETERS */
      140     2236        /**/
      141     2237    1   DCL PGTBL$ PTR;
      142     2238    1   DCL 1 PGTBL_PTR REDEF PGTBL$,
      143     2239    1         2 PGNO UBIN(8) UNAL,
      144     2240    1         2 * UBIN(16) UNAL,
      145     2241    1         2 SEGID BIT(12) UNAL;
      146     2242        %KQ_DSB(FPTN=KQ$DSB,STCLASS="");
      147     2285    1   DCL ERR UBIN WORD;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:5    
      148     2286    1   DCL RECONPPNO REDEF ERR UBIN WORD;
      149     2287
      150     2288
      151     2289
      152     2290        /**/
      153     2291        /* BASED STRUCTURES */
      154     2292        /**/
      155     2293        %MM$CGQD (STCLASS="BASED(MM_CGQD$)");
      156     2352
      157     2353
      158     2354
      159     2355        /**/
      160     2356        /* AUTO */
      161     2357        /**/
      162     2358    1   DCL CHUNKPG# UBIN;
      163     2359    1   DCL I SBIN;
      164     2360    1   DCL J SBIN;
      165     2361    1   DCL K SBIN;
      166     2362    1   DCL 1 PTSLOT ALIGNED,
      167     2363    1         2 K SBIN,
      168     2364    1         2 VPNO SBIN,
      169     2365    1         2 CHUNKPG# SBIN;
      170     2366    1   DCL HKFLG BIT(1) UNAL;
      171     2367    1   DCL PGTYPE BIT(6) UNAL;
      172     2368    1   DCL PPNO UBIN;
      173     2369    1   DCL VPNO UBIN;
      174     2370
      175     2371
      176     2372
      177     2373        /**/
      178     2374        /* REFS */
      179     2375        /**/
      180     2376    1   DCL HFA$CLEARCPU  ENTRY;
      181     2377    1   DCL HFC$ASSOCCLR  ENTRY(3);
      182     2378    1   DCL KQM$TRUNCDSBS ENTRY    ALTRET;
      183     2379    1   DCL MMB$FPP     ENTRY(1) ALTRET;
      184     2380    1   DCL MMB$GPP     ENTRY(2) ALTRET;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:6    
      185     2381    1   DCL MMB$RELPG   ENTRY    ALTRET;
      186     2382    1   DCL MMF$FIXLS     ENTRY(5);
      187     2383    1   DCL SC_MM40       ENTRY    CONV(2,0);
      188     2384    1   DCL SC_MM41       ENTRY    CONV(2,0);
      189     2385    1   DCL B$LS$ PTR SYMREF;
      190     2386    1   DCL B$CGPT$ PTR SYMREF;
      191     2387    1   DCL B$CGCTXT$ PTR SYMREF;
      192     2388    1   DCL MM_CGQD$ PTR SYMREF READONLY;
      193     2389    1   DCL B$PPUT$ PTR SYMREF READONLY;
      194     2390    1   DCL B$WSQ0PT$ PTR SYMREF READONLY;
      195     2391    1   DCL B$IPHYMAP$ PTR SYMREF READONLY;
      196     2392        %KQ_DSB (FPTN=KQ_IDSB,STCLASS=SYMREF);
      197     2435
      198     2436
      199     2437
      200     2438        /**/
      201     2439        /* SUBS */
      202     2440        /**/
      203     2441        %SUB    B$CGPT =B$CGPT$->B$MAP;
      204     2442        /**/
      205     2443        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:7    
      206     2444        /**/
      207     2445        /*F* NAME:         MMQ$INIT
      208     2446             PURPOSE:      To initialize comgroup memory management
      209     2447             INPUT:        MM_CGQMAP_PGS - Number of pages in the comgroup
      210     2448                                           page table.
      211     2449                           MM_CGQRES_PGS - Number of words in the page
      212     2450                                           table to be set aside for mapping
      213     2451                                           comgroup context.
      214     2452             DESCRIPTION:  Initializes the comgroup page table.
      215     2453
      216     2454                           Reserves the first %CGQ_BUF_PGS page table words
      217     2455                           for mapping buffers.  Reserves the next
      218     2456                           MM_CGQRES_PGS page table words for comgroup
      219     2457                           context mapping.  MM_CGQRES_PGS is guaranteed not
      220     2458                           to exceed 256-%CGQ_BUF_PGS, a necessary restriction
      221     2459                           since the pages will be framed by a single monitor
      222     2460                           LS descriptor.
      223     2461
      224     2462                           Takes the last possible context page# and rounds
      225     2463                           it up to the next multiple of %CGQ_CHUNK_SIZE.
      226     2464                           This is because the first possible comgroup
      227     2465                           data chunk page must start on a %CGQ_CHUNK_SIZE
      228     2466                           page# boundary (see VLINK discussion below).
      229     2467                           Take the min of that number and 255, and sets
      230     2468                           the result into MM_CGQCXT_END, the last possible
      231     2469                           context page number (thus possibly giving the
      232     2470                           system more possible context pages than requested
      233     2471                           in TIGR).  Then sets the bound on the context
      234     2472                           descriptor in monitor LS appropriately.
      235     2473
      236     2474                           Finally, links the comgroup data chunks of the
      237     2475                           page table together, and sets MM$CGQD.FCHUNK.HEAD,
      238     2476                           MM$CGQD.FCHUNK.TAIL, and MM$CGQD.FCHUNK.COUNT appropriately.
      239     2477        */
      240     2478        /**/
      241     2479    1         IF (MM_CGQMAP_PGS = 0) OR (MM_CGQMAP_PGS > 10) THEN
      242     2480    1          RETURN;        /* Illegal condition, CGQ mgmt. will screech    */
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:8    
      243     2481    1         IF MM_CGQRES_PGS < 2 THEN CALL SC_MM40;
      244     2482        /*S*    SCREECH_CODE: MMQ-S$MM40
      245     2483                MESSAGE: Less than two pages reserved for CG context & addr blocks.
      246     2484                DESCRIPTION: There must be at least 2 pages reserved, as
      247     2485                        adressing blocks must be on housekeeping pages and
      248     2486                        context blocks must not.                            */
      249     2487        /**/
      250     2488                          /*    Fill the page table with its
      251     2489                           *    initial gunge.  All MM_FPMC.
      252     2490                           */
      253     2491    2           DO I = 0 TO (MM_CGQMAP_PGS*1024 - 1);
      254     2492    2           B$CGPT(I) = '0'B;
      255     2493    2           B$CGPT.RPN(I)=MM_FPMC.RPN;
      256     2494    2           END;
      257     2495                          /*    Reserve the correct number of
      258     2496                           *    page table entries for user
      259     2497                           *    buffer mapping, and context
      260     2498                           *    area.  Then set up the free
      261     2499                           *    list of page table chunks.
      262     2500                           *
      263     2501                           *    The links between free chunks are
      264     2502                           *    kept in the VLINK (reserved for
      265     2503                           *    software) part of the page table
      266     2504                           *    word.  Since that field is only
      267     2505                           *    10 bits wide & the page table
      268     2506                           *    can be 10 pages long, the links
      269     2507                           *    can't just be word indices into
      270     2508                           *    the page table.  So we make 'em
      271     2509                           *    a chunk index (i.e. word index
      272     2510                           *    divided by chunk size.), and
      273     2511                           *    furthermore, discard that
      274     2512                           *    portion of the page table that's
      275     2513                           *    farther up that 10 bits worth
      276     2514                           *    of that type of index (this last
      277     2515                           *    can't happen in B01 'cause the
      278     2516                           *    page table can't exceed 10k and
      279     2517                           *    the chunk size is 10 words, which
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:9    
      280     2518                           *    allows us to use exactly the max
      281     2519                           *    page table & no more).
      282     2520                           *
      283     2521                           *    This all means that the first
      284     2522                           *    and all chunks must start at
      285     2523                           *    a chunksize boundary in the
      286     2524                           *    page table.
      287     2525                           */
      288     2526    1         CHUNKPG#=%CGQ_BUF_PGS+MM_CGQRES_PGS+%CGQ_CHUNK_SIZE-1;
      289     2527    1         CHUNKPG#=(CHUNKPG#/%CGQ_CHUNK_SIZE)*%CGQ_CHUNK_SIZE;
      290     2528    1         IF CHUNKPG# > 256 THEN CHUNKPG#=256;
      291     2529    1         MM_CGQCXT_END=CHUNKPG#-1;
      292     2530    1         MM_CGQPHS=CHUNKPG#;
      293     2531                          /*    Set the bound on the
      294     2532                           *    descriptor for the CG context
      295     2533                           *    & user buffer mapping area.
      296     2534                           */
      297     2535    1         I=(CHUNKPG#*4096)-1;
      298     2536    1         CALL MMF$FIXLS(B$LS$,BITBIN(%CGCTXTSID),0,0,I);
      299     2537    1         K=(MM_CGQMAP_PGS*1024);
      300     2538    1         IF K > 1024*%CGQ_CHUNK_SIZE THEN
      301     2539    1          K=1024*%CGQ_CHUNK_SIZE;
      302     2540    1         K=K-CHUNKPG#; /* # pgs avail */
      303     2541    1         K=K/%CGQ_CHUNK_SIZE; /* # chunks avail */
      304     2542    1         MM$CGQD.FCHUNK.HEAD=CHUNKPG#/%CGQ_CHUNK_SIZE;
      305     2543    1         MM$CGQD.FCHUNK.COUNT=K;
      306     2544    2           DO I = 1 TO K-1;
      307     2545    2           B$CGPT.VLINK(CHUNKPG#)=(CHUNKPG#/%CGQ_CHUNK_SIZE)+1;
      308     2546    2           CHUNKPG#=CHUNKPG#+%CGQ_CHUNK_SIZE;
      309     2547    2           END;
      310     2548    1         MM$CGQD.FCHUNK.TAIL=CHUNKPG#/%CGQ_CHUNK_SIZE;
      311     2549    1         MM_CGQPHE=CHUNKPG#+%CGQ_CHUNK_SIZE-1;
      312     2550    1         RETURN;
      313     2551        /**/
      314     2552        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:10   
      315     2553        /**/
      316     2554        /*F* NAME:         MMQ$GCCP
      317     2555             PURPOSE:      To get a comgroup context page
      318     2556             INPUT:        None
      319     2557             DESCRIPTION:  A physical page is allocated and mapped into
      320     2558                           the first available slot in the comgroup page
      321     2559                           table's context area.  The page is marked not
      322     2560                           housekeeping.  ALTRETs if cannot find.
      323     2561
      324     2562                           PGTBL$ is the returned pointer, and ERR a
      325     2563                           monitor error code if failure.  KQ$DSB is not
      326     2564                           used.
      327     2565
      328     2566                           Note that no gate needs to be locked when
      329     2567                           searching for a free page table entry.  This
      330     2568                           is because KQM$MM has already got an appropriate
      331     2569                           gate locked.
      332     2570        */
      333     2571    1   MMQ$GCCP: ENTRY(PGTBL$,KQ$DSB,ERR) ALTRET;
      334     2572        /**/
      335     2573    1         HKFLG = %FALSE;
      336     2574    1         GOTO GCP_COMMON;
      337     2575        /**/
      338     2576        /*F* NAME:         MMQ$GCAP
      339     2577             PURPOSE:      To get a comgroup descriptor segment page
      340     2578             INPUT:        None
      341     2579             DESCRIPTION:  Same as MMQ$GCCP except the page is marked
      342     2580                           housekeeping.
      343     2581        */
      344     2582    1   MMQ$GCAP: ENTRY(PGTBL$,KQ$DSB,ERR) ALTRET;
      345     2583        /**/
      346     2584    1         HKFLG = %TRUE;
      347     2585    1   GCP_COMMON:
      348     2586    2           DO I = %CGQ_BUF_PGS TO MM_CGQCXT_END;
      349     2587    2           IF B$CGPT.RPN(I) = MM_FPMC.RPN THEN GOTO GOT_CGP;
      350     2588    2           END;
      351     2589        /*E*    ERROR:  MMQ-E$NOCGPG-2
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:11   
      352     2590                MESSAGE: There are no physical page slots available for
      353     2591                         mapping comgroup context or addressing blocks. */
      354     2592    1         ERR = %E$NOCGPG;
      355     2593    1         ALTRETURN;
      356     2594        /**/
      357     2595    1   GOT_CGP:
      358     2596    1         CALL MMB$GPP (PPNO,%MONWSQ);
      359     2597    1         IF PPNO = 0 THEN
      360     2598    2           DO;
      361     2599    2           CALL MMB$RELPG;
      362     2600    2           CALL MMB$GPP (PPNO,%MONWSQ);
      363     2601    2           IF PPNO ~= 0 THEN GOTO GOT_CGP1;
      364     2602        /*E*    ERROR:  MMQ-E$NOCGPP-2
      365     2603                MESSAGE: There are currently no physical pages available for
      366     2604                        comgroup usage.                                    */
      367     2605    2           ERR = %E$NOCGPP;
      368     2606    2           GOTO ALTRT;
      369     2607    2           END;
      370     2608    1   GOT_CGP1:
      371     2609              %LOCK (G=MM_CGLOCK);
      372     2612    1         B$PPUT$->MM$PPUT.COMM(PPNO) = '1'B;     /* Set this is a comm page */
      373     2613    1         PGTYPE = %PGINMEM | %PGIOM | %PGWRITE;
      374     2614    1         IF HKFLG THEN PGTYPE = PGTYPE | %PGHKEEP;
      375     2615    1         IF HW_WSQ0PT THEN
      376     2616    1          B$CGPT.RPN(I)=B$WSQ0PT$->B$MAP.RPN(PPNO);
      377     2617    1         ELSE
      378     2618    1          B$CGPT.RPN(I) = PPNO;
      379     2619    1         B$CGPT.CTRL(I) = PGTYPE;
      380     2620        /* Build pointer to the page we just allocated.                    */
      381     2621    1         PGTBL$ = PINCRW(B$CGCTXT$,I*1024);
      382     2622    1         MM$CGQD.UPPC = MM$CGQD.UPPC + 1;
      383     2623    1   UNLRET:;
      384     2624              %UNLOCK (G=MM_CGLOCK);
      385     2627    1         RETURN;
      386     2628        /**/
      387     2629        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:12   
      388     2630        /**/
      389     2631        /*F* NAME:         MMQ$FCCP
      390     2632             PURPOSE:      To free a comgroup context page
      391     2633             INPUT:        PGTBL$ points to the page
      392     2634             DESCRIPTION:  The page is freed and the page table marked
      393     2635                           appropriately.  Gate considerations are the
      394     2636                           same as for MMQ$GCCP.
      395     2637
      396     2638                           The ALTRET is taken if the page is not currently
      397     2639                           allocated or is a houskeeping page, with ERR set.
      398     2640        */
      399     2641    1   MMQ$FCCP: ENTRY(PGTBL$,KQ$DSB,ERR) ALTRET;
      400     2642        /**/
      401     2643    1         HKFLG = %FALSE;
      402     2644    1         GOTO FCP_COMMON;
      403     2645        /**/
      404     2646        /*F* NAME:         MMQ$FCAP
      405     2647             PURPOSE:      To free a comgroup descriptor segment page
      406     2648             INPUT:        PGTBL$ points to the page
      407     2649             DESCRIPTION:  Same as MMQ$FCAP except the page must be
      408     2650                           a housekeeping page.
      409     2651        */
      410     2652    1   MMQ$FCAP: ENTRY(PGTBL$,KQ$DSB,ERR) ALTRET;
      411     2653        /**/
      412     2654    1         HKFLG = %TRUE;
      413     2655    1   FCP_COMMON:
      414     2656        /* Make sure we've really got a good pointer */
      415     2657    1         IF (PGTBL_PTR.SEGID ~= %CGCTXTSID)
      416     2658    1         OR (PGTBL_PTR.PGNO > MM_CGQCXT_END) THEN
      417     2659    2           DO;
      418     2660        /*E*    ERROR:  MMQ-E$BADCGPTR-2
      419     2661                MESSAGE: That is not a valid context, address block, or
      420     2662                        data page pointer.                                  */
      421     2663    2           ERR = %E$BADCGPTR;
      422     2664    2           ALTRETURN;
      423     2665    2           END;
      424     2666    1         VPNO = PGTBL_PTR.PGNO;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:13   
      425     2667              %LOCK (G=MM_CGLOCK);
      426     2670    1         PPNO = B$CGPT.RPN(VPNO);
      427     2671    1         IF PPNO = MM_FPMC.RPN THEN
      428     2672    2           DO;
      429     2673        /*E*    ERROR:  MMQ-E$CGNOTALLOC-2
      430     2674                MESSAGE: That context, address block, or data  page is already free.*/
      431     2675    2           ERR = %E$CGNOTALLOC;
      432     2676    2           GOTO UNLALT;
      433     2677    2           END;
      434     2678        /* Make sure page is really the type he wanted to free! */
      435     2679    1         IF (HKFLG AND NOT (B$CGPT.CTRL(VPNO) & %PGHKEEP))
      436     2680    1         OR (NOT HKFLG AND (B$CGPT.CTRL(VPNO) & %PGHKEEP)) THEN
      437     2681    2           DO;
      438     2682        /*E*    ERROR:  MMQ-E$CGPGTYPBAD-2
      439     2683                MESSAGE: The page indicated by your pointer is not the correct
      440     2684                        type for the operation requested.                  */
      441     2685    2           ERR = %E$CGPGTYPBAD;
      442     2686    2           GOTO UNLALT;
      443     2687    2           END;
      444     2688        /* OK, he's cool.  Let's free it for him. */
      445     2689    1         IF HW_WSQ0PT THEN
      446     2690    1          PPNO=B$IPHYMAP$->MM$IPHY_MAP(PPNO);
      447     2691    1         CALL MMB$FPP (PPNO);
      448     2692    1         B$CGPT.RPN(VPNO) = MM_FPMC.RPN;
      449     2693    1         B$CGPT.CTRL(VPNO) = '0'B;
      450     2694    1         CALL HFC$ASSOCCLR(%CGWSQ,VPNO,1);
      451     2695    1         MM$CGQD.UPPC = MM$CGQD.UPPC - 1;
      452     2696    1         GOTO UNLRET;
      453     2697        /**/
      454     2698        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:14   
      455     2699        /**/
      456     2700        /*F* NAME:         MMQ$GCDP
      457     2701             PURPOSE:      To get a comgroup data page
      458     2702             INPUT:        KQ$DSB is the comgroup's descriptor segment
      459     2703             OUTPUT:       PGTBL$    - pointer to acquired page (ASR - relative)
      460     2704                           ERR       - error code if ALTRET, else PP#.
      461     2705             DESCRIPTION:  We first try to find a page previously owned
      462     2706                           by the comgroup and only quasi-released (see
      463     2707                           MMQ$FCDP).  If we do, then mark the page
      464     2708                           table word CPU- and IOM-present, and return
      465     2709                           the pointer to that page.
      466     2710
      467     2711                           Else we try to find a descriptor that already
      468     2712                           frames some memory in the comgroup WS for
      469     2713                           whom one of the pages is really free (i.e.
      470     2714                           the page table word is totally empty).
      471     2715                           If this works, we allocate a physical page,
      472     2716                           map it in, and return a pointer to that page.
      473     2717
      474     2718                           Else we try to find an unused descriptor.
      475     2719                           If none, ALTRET (cannot get).  Otherwise (got
      476     2720                           an unused descriptor), we get a free page
      477     2721                           table chunk for it, associate the descriptor
      478     2722                           with the page table chunk, and then go back
      479     2723                           to look in the obtained page table chunk
      480     2724                           for a page to use or allocate.
      481     2725        */
      482     2726    1   MMQ$GCDP: ENTRY(PGTBL$,KQ$DSB,ERR) ALTRET;
      483     2727        /**/
      484     2728    1         PTSLOT.K=-1; /* No good PT slot to use */
      485     2729    1         J = -1; /* No empty descriptor to use */
      486     2730              %LOCK (G=MM_CGLOCK);
      487     2733    2           DO K = 0 TO KQM_MDPC#;
      488     2734    2           IF KQ$DSB.DESC.FLGR.PRESENT(K) THEN
      489     2735    2            CALL CHKDESC ALTRET(GCDP50);
      490     2736    2           ELSE
      491     2737    2            IF J = -1 THEN J = K;   /* 1st empty one                      */
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:15   
      492     2738    2           END;
      493     2739        /**/
      494     2740        /**/
      495     2741    1   GCDP20:;
      496     2742    1         IF PTSLOT.K ~= -1 THEN
      497     2743    2           DO;
      498     2744    2           K=PTSLOT.K;
      499     2745    2           VPNO=PTSLOT.VPNO;
      500     2746    2           CHUNKPG#=PTSLOT.CHUNKPG#;
      501     2747    2           GOTO GCDP40;
      502     2748    2           END;
      503     2749        /**/
      504     2750        /**/
      505     2751    1         IF J = -1 THEN
      506     2752    2           DO;
      507     2753        /*E*    ERROR:  MMQ-E$CGADBLKMAX-2
      508     2754                MESSAGE: That comgroup address block already frames the
      509     2755                        maximum possible amount of data.                   */
      510     2756    2           ERR = %E$CGADBLKMAX;
      511     2757    2           GOTO UNLALT;
      512     2758    2           END;
      513     2759    1         K=J;
      514     2760        /**/
      515     2761        /**/
      516     2762    1         CALL GETCHUNK ALTRET(UNLALT);
      517     2763    1         CALL FRAMECHUNK;
      518     2764    1         J=-1;
      519     2765    1         PTSLOT.K=-1;
      520     2766    1         CALL CHKDESC ALTRET(GCDP50);
      521     2767    1         GOTO GCDP20;
      522     2768        /**/
      523     2769    1   GCDP40:;
      524     2770        /* OK - All we've got to do now is allocate a physical page to
      525     2771           virtual page "VPNO", which is framed by KQ$DSB.DESC(K) - which will
      526     2772           be $ARi when this address block is loaded as the argument stack. */
      527     2773    1         B$CGPT.CTRL(VPNO) = %PGINMEM;
      528     2774              %UNLOCK (G=MM_CGLOCK);
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:16   
      529     2777    1         CALL MMB$GPP (PPNO,%MONWSQ);
      530     2778    1         IF PPNO = 0 THEN
      531     2779    2           DO;
      532     2780    2           CALL MMB$RELPG;
      533     2781    2           CALL MMB$GPP (PPNO,%MONWSQ);
      534     2782    2           IF PPNO ~= 0 THEN GOTO GCDP48;
      535     2783    2           ERR = %E$NOCGPP;
      536     2784    2           B$CGPT.CTRL (VPNO) = '0'B;
      537     2785    2           GOTO ALTRT;
      538     2786    2           END;
      539     2787    1   GCDP48:;
      540     2788              %LOCK (G=MM_CGLOCK);
      541     2791    1         B$PPUT$->MM$PPUT.COMM(PPNO) = '1'B;     /* Set this is a comm page */
      542     2792    1         GOTO GCDP51;
      543     2793    1   GCDP50:;
      544     2794    1         MM$CGQD.FPPC=MM$CGQD.FPPC-1;
      545     2795    1   GCDP51:;
      546     2796    1         MM$CGQD.UPPC=MM$CGQD.UPPC+1;
      547     2797    1         PGTYPE = (%PGIOM | %PGINMEM | %PGWRITE);
      548     2798    1         ERR=PPNO;
      549     2799    1         IF HW_WSQ0PT THEN
      550     2800    1          B$CGPT.RPN(VPNO)=B$WSQ0PT$->B$MAP.RPN(PPNO);
      551     2801    1         ELSE
      552     2802    1          B$CGPT.RPN(VPNO) = PPNO;
      553     2803    1         B$CGPT.CTRL(VPNO) = PGTYPE;
      554     2804    1         PGTBL_PTR='0'B;
      555     2805    1         PGTBL_PTR.SEGID = BINBIT(BITBIN(%AS0SID) + K,12);
      556     2806    1         PGTBL_PTR.PGNO = VPNO - CHUNKPG#;
      557     2807    1         GOTO UNLRET;
      558     2808    1   UNLALT:;
      559     2809              %UNLOCK (G=MM_CGLOCK);
      560     2812    1   ALTRT:ALTRETURN;
      561     2813        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:17   
      562     2814        /**/
      563     2815        /*F* NAME:         MMQ$FCDP
      564     2816             PURPOSE:      To free a comgroup data page.
      565     2817             INPUT:        PGTBL$ is the ASR-relative page pointer
      566     2818                           KQ$DSB is the comgroup's descriptor segment
      567     2819             DESCRIPTION:  If it isn't legal to release this page,
      568     2820                           we ALTRET with ERR set.  Otherwise we
      569     2821                           mark the page table entry not in memory,
      570     2822                           and return, without releasing the physical
      571     2823                           page
      572     2824        */
      573     2825    1   MMQ$FCDP: ENTRY(PGTBL$,KQ$DSB,ERR) ALTRET;
      574     2826        /**/
      575     2827    1         IF (BITBIN(PGTBL_PTR.SEGID) < BITBIN(%AS0SID))
      576     2828    1         OR (BITBIN(PGTBL_PTR.SEGID) > (BITBIN(%AS0SID) + KQM_MDPC#))
      577     2829    1         OR (PGTBL_PTR.PGNO >= %CGQ_CHUNK_SIZE) THEN
      578     2830    2           DO;
      579     2831    2           ERR = %E$BADCGPTR;
      580     2832    2           ALTRETURN;
      581     2833    2           END;
      582     2834    1         K = BITBIN(PGTBL_PTR.SEGID) - BITBIN(%AS0SID);
      583     2835    1         CHUNKPG# = (KQ$DSB.DESC.BASE(K) / 4096) - %CGCTXTLO;
      584     2836    1         VPNO = CHUNKPG# + PGTBL_PTR.PGNO;
      585     2837              %LOCK (G=MM_CGLOCK);
      586     2840    1         IF NOT (B$CGPT.CTRL(VPNO) & %PGINMEM) THEN
      587     2841    2           DO;
      588     2842    2           ERR = %E$CGNOTALLOC;
      589     2843    2           GOTO UNLALT;
      590     2844    2           END;
      591     2845    1         B$CGPT.CTRL(VPNO) = B$CGPT.CTRL(VPNO) & (~(%PGINMEM|%PGIOM|%PGWRITE));
      592     2846    1         CALL HFC$ASSOCCLR(%CGWSQ,VPNO,1);
      593     2847    1         MM$CGQD.UPPC=MM$CGQD.UPPC-1;
      594     2848    1         MM$CGQD.FPPC=MM$CGQD.FPPC+1;
      595     2849    1         GOTO UNLRET;
      596     2850        /**/
      597     2851        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:18   
      598     2852        /**/
      599     2853        /*F* NAME:         MMQ$RECON
      600     2854             PURPOSE:      To reconstruct a comgroup descriptor segment
      601     2855             INPUT:        PGTBL$  -   an ASR-relative page pointer
      602     2856                           KQ$DSB  -   the current descriptor segment
      603     2857             OUTPUT:       ERR - error code if ALTRET, else PP#.
      604     2858             DESCRIPTION:  This routine is used when a comgroup is being
      605     2859                           re-opened.  An inited descriptor segment is
      606     2860                           allocated to the comgroup before we are called
      607     2861                           the first time.
      608     2862
      609     2863                           Every time the open process encounters a page
      610     2864                           that the comgroup owned, it calls us, passing
      611     2865                           the DSB, and what used to be the pointer to
      612     2866                           the page.  Our job is to make the descriptor
      613     2867                           segment and the page table be such that the
      614     2868                           passed pointer is now valid.
      615     2869
      616     2870                           This involves getting a physical page, and
      617     2871                           mapping it in appropriately.  If necessary,
      618     2872                           a new chunk of page table is allocated and
      619     2873                           the correct descriptor made to point to
      620     2874                           it.
      621     2875
      622     2876                           When we return, the open process may now
      623     2877                           read the page out of the file into the
      624     2878                           page we allocated.
      625     2879
      626     2880                           If anything goes wrong (e.g. we cannot
      627     2881                           get memory), we ALTRET with ERR set.
      628     2882                           If the request is invalid, we SNAP and
      629     2883                           then ALTRET with ERR set.
      630     2884        */
      631     2885    1   MMQ$RECON: ENTRY(PGTBL$,KQ$DSB,ERR) ALTRET;
      632     2886        /**/
      633     2887    1         IF (BITBIN(PGTBL_PTR.SEGID) < BITBIN(%AS0SID))
      634     2888    1         OR (BITBIN(PGTBL_PTR.SEGID) > (BITBIN(%AS0SID) + KQM_MDPC#))
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:19   
      635     2889    1         OR (PGTBL_PTR.PGNO >= %CGQ_CHUNK_SIZE) THEN
      636     2890    2           DO;
      637     2891    2           ERR = %E$BADCGPTR;
      638     2892    2           CALL SC_MM41;
      639     2893    2           ALTRETURN;
      640     2894    2           END;
      641     2895    1         K = BITBIN(PGTBL_PTR.SEGID) - BITBIN(%AS0SID);
      642     2896              %LOCK (G=MM_CGLOCK);
      643     2899    1         IF NOT KQ$DSB.DESC.FLGR.PRESENT(K) THEN
      644     2900    2           DO;
      645     2901    2           CALL GETCHUNK ALTRET(UNLALT);
      646     2902    2           CALL FRAMECHUNK;
      647     2903    2           VPNO = CHUNKPG# + PGTBL_PTR.PGNO;
      648     2904    2           END;
      649     2905    1         ELSE
      650     2906    2           DO;
      651     2907    2           CHUNKPG# = (KQ$DSB.DESC.BASE(K) / 4096) - %CGCTXTLO;
      652     2908    2           VPNO = CHUNKPG# + PGTBL_PTR.PGNO;
      653     2909    2           IF B$CGPT.CTRL(VPNO) & %PGINMEM THEN
      654     2910    3             DO;
      655     2911                  %UNLOCK (G=MM_CGLOCK);
      656     2914    3             CALL SC_MM41;
      657     2915        /*S* SCREECH_CODE: MMQ-S$MM41
      658     2916             TYPE:         SNAP
      659     2917             MESSAGE:      Invalid request to MMQ$RECON
      660     2918             REMARKS:      Something is wrong with the MMQ$RECON request.
      661     2919                           Either the passed pointer is invalid, or the
      662     2920                           desired page is already mapped to something. */
      663     2921    3             ERR=%E$BADCGPTE;
      664     2922    3             ALTRETURN;
      665     2923    3             END;
      666     2924    2           END;
      667     2925    1         PPNO=B$CGPT.RPN(VPNO);
      668     2926    2         IF PPNO ~= MM_FPMC.RPN THEN DO;
      669     2927    2           IF HW_WSQ0PT THEN
      670     2928    2            PPNO=B$IPHYMAP$->MM$IPHY_MAP(PPNO);
      671     2929    2           GOTO GCDP50;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:20   
      672     2930    2           END;
      673     2931    1         GOTO GCDP40;
      674     2932        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:21   
      675     2933        /**/
      676     2934        /*F* NAME:         MMQ$TRUNCDSB
      677     2935             PURPOSE:      To strip a descriptor segment of its page
      678     2936                           table chunks
      679     2937             INPUT:        KQ$DSB - the descriptor segment
      680     2938                           MM gate locked
      681     2939             DESCRIPTION:  For each descriptor in the segment, we check to
      682     2940                           see if it owns a page table chunk.  If so and
      683     2941                           all the pages in that chunk are deallocated,
      684     2942                           the chunk is released to the 'free' chain,
      685     2943                           else nothing is done.
      686     2944
      687     2945                           If any descriptor is found with an allocated
      688     2946                           page, we ALTRET with ERR set (this is for
      689     2947                           the benifit of KQM$SHUTDOWN but is of no
      690     2948                           interest to KQM$TRUNCDSBS).
      691     2949        */
      692     2950    1   MMQ$TRUNCDSB: ENTRY (PGTBL$,KQ$DSB,ERR) ALTRET;
      693     2951        /**/
      694     2952    1         CALL TRUNCDSB ALTRET(ALTRT);
      695     2953    1         RETURN;
      696     2954        /**/
      697     2955        /*F* NAME:         MMQ$TRUNCDSBL
      698     2956             DESCRIPTION:  Same as MMQ$TRUNCDSB except locks & unlocks
      699     2957                           MM_CGLOCK around the procedure.
      700     2958        */
      701     2959    1   MMQ$TRUNCDSBL: ENTRY (PGTBL$,KQ$DSB,ERR) ALTRET;
      702     2960        /**/
      703     2961              %LOCK (G=MM_CGLOCK);
      704     2964    1         CALL TRUNCDSB ALTRET(UNLALT);
      705     2965    1         GOTO UNLRET;
      706     2966        /**/
      707     2967    1   TRUNCDSB: PROC ALTRET;
      708     2968        /**/
      709     2969    2         PTSLOT.K=0;
      710     2970    3           DO K = 0 TO KQM_MDPC#;
      711     2971    3           IF KQ$DSB.DESC.FLGR.PRESENT(K) THEN
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:22   
      712     2972    4             DO;
      713     2973    4             CHUNKPG# = (KQ$DSB.DESC.BASE(K) / 4096) - %CGCTXTLO;
      714     2974    4             J=0;
      715     2975    5               DO VPNO = CHUNKPG# TO (CHUNKPG# + %CGQ_CHUNK_SIZE - 1);
      716     2976    5               IF (B$CGPT.CTRL(VPNO) & %PGINMEM) THEN
      717     2977    5                J=-1;
      718     2978    5               END;
      719     2979    4             IF J = 0 THEN
      720     2980    5               DO;
      721     2981    5               J=CHUNKPG#/%CGQ_CHUNK_SIZE;
      722     2982    5               B$CGPT.VLINK(CHUNKPG#)=0;
      723     2983    5               IF MM$CGQD.BCHUNK.TAIL ~= 0 THEN
      724     2984    6                 DO;
      725     2985    6                 I=MM$CGQD.BCHUNK.TAIL*%CGQ_CHUNK_SIZE;
      726     2986    6                 B$CGPT.VLINK(I)=J;
      727     2987    6                 END;
      728     2988    5               ELSE MM$CGQD.BCHUNK.HEAD=J;
      729     2989    5               MM$CGQD.BCHUNK.TAIL=J;
      730     2990    5               MM$CGQD.BCHUNK.COUNT=MM$CGQD.BCHUNK.COUNT+1;
      731     2991    5               KQ$DSB.DESC.FLGR.PRESENT(K)='0'B;
      732     2992    5               END;
      733     2993    4             ELSE PTSLOT.K=1;
      734     2994    4             END;
      735     2995    3           END;
      736     2996    2         IF PTSLOT.K ~= 0 THEN
      737     2997    3           DO;
      738     2998    3           ERR=%E$CGDNMT;
      739     2999        /*E* ERROR:        MMQ-E$CGDNMT-E
      740     3000             MESSAGE:      The passed descriptor segment is not empty
      741     3001        */
      742     3002    3           ALTRETURN;
      743     3003    3           END;
      744     3004    2         RETURN;
      745     3005    2   END TRUNCDSB;
      746     3006        /**/
      747     3007        /*F* NAME:         MMQ$ZAPCPUS
      748     3008             PURPOSE:      To clear cache an PTWAM on all CPUS other than
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:23   
      749     3009                           ours.
      750     3010             CALL:         MMQ$ZAPCPUS
      751     3011             DESCRIPTION:  Calls HFA$CLEARCPU, gated by MM_CGLOCK
      752     3012        */
      753     3013    1   MMQ$ZAPCPUS: ENTRY ALTRET; /* !!Doesn't ALTRET!! */
      754     3014        /**/
      755     3015              %LOCK (G=MM_CGLOCK);
      756     3018    1         CALL HFA$CLEARCPU;
      757     3019    1         GOTO UNLRET;
      758     3020        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:24   
      759     3021        /**/
      760     3022        /*F* NAME:         MMQ$TRUNCPT
      761     3023             PURPOSE:      To release unused comgroup physical pages
      762     3024             DESCRIPTION:  When a comgroup releases a page, the physical
      763     3025                           page is left in the page table and not released.
      764     3026
      765     3027                           We are called here when the system needs memory,
      766     3028                           to actually release any such pages.
      767     3029
      768     3030                           After we're done, all CPUs get their PTWAMs
      769     3031                           cleared.
      770     3032
      771     3033        */
      772     3034    1   MMQ$TRUNCPT: ENTRY ALTRET; /* !!Doesn't ALTRET!! */
      773     3035        /**/
      774     3036              %LOCK (G=MM_CGLOCK);
      775     3039    2           DO VPNO = MM_CGQPHS TO MM_CGQPHE;
      776     3040    2           IF NOT (B$CGPT.CTRL(VPNO) & %PGINMEM) THEN
      777     3041    2            IF B$CGPT.RPN(VPNO) ~= MM_FPMC.RPN THEN
      778     3042    3              DO;
      779     3043    3              IF HW_WSQ0PT THEN
      780     3044    3               PPNO=B$IPHYMAP$->MM$IPHY_MAP(B$CGPT.RPN(VPNO));
      781     3045    3              ELSE
      782     3046    3               PPNO=B$CGPT.RPN(VPNO);
      783     3047    3              B$CGPT.RPN(VPNO)=MM_FPMC.RPN;
      784     3048    3              MM$CGQD.FPPC=MM$CGQD.FPPC-1;
      785     3049    3              CALL MMB$FPP (PPNO);
      786     3050    3              END;
      787     3051    2           END;
      788     3052    1         CALL HFA$CLEARCPU;
      789     3053    1         CALL HFC$ASSOCCLR(%CGWSQ,MM_CGQPHS,MM_CGQPHE-MM_CGQPHS+1);
      790     3054    1         MM_CGTCNT.PT=MM_CGTCNT.PT+1;
      791     3055              %UNLOCK (G=MM_CGLOCK);
      792     3058    1         RETURN;
      793     3059        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:25   
      794     3060        /**/
      795     3061        /******************************************************************************
      796     3062        *                                                                             *
      797     3063        *  SSS   U   U  BBBB   RRRR    OOO   U   U  TTTTT   III   N   N  EEEEE   SSS  *
      798     3064        * S   S  U   U  B   B  R   R  O O O  U   U    T      I    N   N  E      S   S *
      799     3065        * S      U   U  B   B  R   R  O O O  U   U    T      I    NN  N  E      S     *
      800     3066        *  SSS   U   U  BBBB   RRRR   O  OO  U   U    T      I    N N N  EEEE    SSS  *
      801     3067        *     S  U   U  B   B  R R    O   O  U   U    T      I    N  NN  E          S *
      802     3068        * S   S  U   U  B   B  R  R   O   O  U   U    T      I    N   N  E      S   S *
      803     3069        *  SSS    UUU   BBBB   R   R   OOO    UUU     T     III   N   N  EEEEE   SSS  *
      804     3070        *                                                                             *
      805     3071        ******************************************************************************/
      806     3072
      807     3073        /********************************************************************
      808     3074        *********************************************************************/
      809     3075        /*D* NAME:         GETCHUNK
      810     3076             PURPOSE:      To allocate a new chunk of the CG page table
      811     3077             INPUT:        MM gate locked
      812     3078             DESCRIPTION:  If there is a free page table chunk then
      813     3079                           it is allocated, and the free chain updated.
      814     3080                           Returns CHUNKPG# as the page # in the page table
      815     3081                           of the first page of the chunk.
      816     3082
      817     3083                           Else all comgroups are examined, and stripped
      818     3084                           of any unused page table chunks.  If this makes
      819     3085                           some free then the entire held-back list of
      820     3086                           chunks is made truly free and we use one of
      821     3087                           them, after clearing the PTWAM on all CPUs.
      822     3088
      823     3089                           Else ALTRETs with ERR set.
      824     3090
      825     3091                           All returns leave MM gate locked.
      826     3092        */
      827     3093    1   GETCHUNK: PROC ALTRET;
      828     3094        /**/
      829     3095    2         IF MM$CGQD.FCHUNK.HEAD = 0 THEN
      830     3096    3           DO;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:26   
      831     3097                          /*    Try to get some back
      832     3098                           *    from other comgroups
      833     3099                           */
      834     3100    3           CALL KQM$TRUNCDSBS;
      835     3101                          /*    If there's anything
      836     3102                           *    on the held-back chain,
      837     3103                           *    then merge it into
      838     3104                           *    the truly-free chain,
      839     3105                           *    and zap everyone's PTWAM.
      840     3106                           */
      841     3107    3           IF MM$CGQD.BCHUNK.COUNT ~= 0 THEN
      842     3108    4             DO;
      843     3109    4             MM$CGQD.FCHUNK.HEAD  =MM$CGQD.BCHUNK.HEAD;
      844     3110    4             MM$CGQD.FCHUNK.TAIL  =MM$CGQD.BCHUNK.TAIL;
      845     3111    4             MM$CGQD.FCHUNK.COUNT =MM$CGQD.BCHUNK.COUNT;
      846     3112    4             MM$CGQD.BCHUNK.HEAD =0;
      847     3113    4             MM$CGQD.BCHUNK.TAIL =0;
      848     3114    4             MM$CGQD.BCHUNK.COUNT=0;
      849     3115    4             CALL HFA$CLEARCPU;
      850     3116    4             CALL HFC$ASSOCCLR;/* Will clear all of PTWAM - even on DPS90 */
      851     3117    4             MM_CGTCNT.DSBS=MM_CGTCNT.DSBS+1;
      852     3118    4             GOTO GC10;
      853     3119    4             END;
      854     3120        /*E*    ERROR:  MMQ-E$NOCGDBLK-2
      855     3121                MESSAGE: There are no remaining free comgroup chunks. */
      856     3122    3           ERR = %E$NOCGDBLK;
      857     3123    3           ALTRETURN;
      858     3124    3           END;
      859     3125    2   GC10: ;
      860     3126    2         CHUNKPG# = MM$CGQD.FCHUNK.HEAD;
      861     3127    2         MM$CGQD.FCHUNK.HEAD = B$CGPT.VLINK(MM$CGQD.FCHUNK.HEAD*%CGQ_CHUNK_SIZE);
      862     3128    2         MM$CGQD.FCHUNK.COUNT = MM$CGQD.FCHUNK.COUNT - 1;
      863     3129    2         IF MM$CGQD.FCHUNK.TAIL = CHUNKPG# THEN
      864     3130    2          MM$CGQD.FCHUNK.TAIL = 0;
      865     3131    2         CHUNKPG#=CHUNKPG#*%CGQ_CHUNK_SIZE;
      866     3132    2         RETURN;
      867     3133    2   END GETCHUNK;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:27   
      868     3134        /********************************************************************
      869     3135        *********************************************************************/
      870     3136        /*D* NAME:         FRAMECHUNK
      871     3137             PURPOSE:      To set a descriptor to frame a chunk
      872     3138             INPUT:        CHUNKPG#   -  first page # in the chunk
      873     3139                           K          -  the number of the descriptor
      874     3140             DESCRIPTION:  Sets the BASE, BOUND, and FLAGS in the descriptor
      875     3141                           appropriately.
      876     3142        */
      877     3143    1   FRAMECHUNK: PROC;
      878     3144        /**/
      879     3145    2         IF S_NSCPUA ~= 0 THEN
      880     3146    2          KQ$DSB.DESC.FLG(K) = (%DSREAD|%DSWRITE|%DSSAVE|%DSNULL|%DSPRESNT);
      881     3147    2         ELSE
      882     3148    2          KQ$DSB.DESC.FLG(K) = (%DSREAD|%DSWRITE|%DSSAVE|%DSCACHE|%DSNULL|%DSPRESNT);
      883     3149    2         KQ$DSB.DESC.T(K) = 0;
      884     3150    2         KQ$DSB.DESC.BASE(K) = (CHUNKPG# + %CGCTXTLO) * 4096;
      885     3151    2         RETURN;
      886     3152    2   END FRAMECHUNK;
      887     3153        /********************************************************************
      888     3154        *********************************************************************/
      889     3155        /*D* NAME:         CHKDESC
      890     3156             PURPOSE:      To check a descriptor for available pages
      891     3157             DESCRIPTION:  K is the descriptor number.  It is known
      892     3158                           to possess a page table chunk.
      893     3159
      894     3160                           We examine the chunk for any immediately-available
      895     3161                           pages.  If one is found we ALTRET with VPNO
      896     3162                           the virtual page # and PPNO the physical page
      897     3163                           number, and CHUNKPG# the starting virtual page
      898     3164                           number of the chunk.
      899     3165
      900     3166                           Otherwise, if any non-allocated page table slots
      901     3167                           are found, then if PTSLOT.K = -1 we fill PTSLOT
      902     3168                           with the stuff for that page, and RETURN.
      903     3169
      904     3170                           If nothing is found we return.
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:28   
      905     3171        */
      906     3172    1   CHKDESC: PROC ALTRET;
      907     3173        /**/
      908     3174    2         CHUNKPG# = (KQ$DSB.DESC.BASE(K) / 4096) - %CGCTXTLO;
      909     3175    3           DO VPNO = CHUNKPG# TO (CHUNKPG# + %CGQ_CHUNK_SIZE - 1);
      910     3176    3           IF NOT (B$CGPT.CTRL(VPNO) & %PGINMEM) THEN
      911     3177    4             DO;
      912     3178    4             IF B$CGPT.RPN(VPNO) ~= MM_FPMC.RPN THEN
      913     3179    5               DO;
      914     3180    5               IF HW_WSQ0PT THEN
      915     3181    5                PPNO=B$IPHYMAP$->MM$IPHY_MAP(B$CGPT.RPN(VPNO));
      916     3182    5               ELSE
      917     3183    5                PPNO=B$CGPT.RPN(VPNO);
      918     3184    5               ALTRETURN;
      919     3185    5               END;
      920     3186    4             IF PTSLOT.K = -1 THEN
      921     3187    5               DO;
      922     3188    5               PTSLOT.K=K;
      923     3189    5               PTSLOT.VPNO=VPNO;
      924     3190    5               PTSLOT.CHUNKPG#=CHUNKPG#;
      925     3191    5               END;
      926     3192    4             END;
      927     3193    3           END;
      928     3194    2         RETURN;
      929     3195    2   END CHKDESC;
      930     3196    1   END MMQ$INIT;

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:29   
--  Include file information  --

   SS_CNTRLD_R.:E05TOU  cannot be made into a system file and is referenced.
   SS_CNTRL_R.:E05TOU  cannot be made into a system file and is referenced.
   SS_SCHED_R.:E05TOU  cannot be made into a system file and is referenced.
   B$MAP.:E05TOU  cannot be made into a system file and is referenced.
   HF_LOCK_C.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   MM_MACRO_M.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   MM$SYSGEN.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
   MM_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   KQM_MAC_C.:E05TOU  is referenced.
   KQ_SUBS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure MMQ$INIT.

   Procedure MMQ$INIT requires 912 words for executable code.
   Procedure MMQ$INIT requires 26 words of local(AUTO) storage.

    No errors detected in file MMQ$CGQ.:E05TSI    .

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:30   

 Object Unit name= MMQ$INIT                                   File name= MMQ$CGQ.:E05TOU
 UTS= JUL 30 '97 03:23:42.28 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   912   1620  MMQ$INIT
    1  RoData even  none    15     17  MMQ$INIT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        3  MMQ$INIT
     0    152          yes     yes      Std        3  MMQ$GCCP
     0    156          yes     yes      Std        3  MMQ$GCAP
     0    316          yes     yes      Std        3  MMQ$FCCP
     0    322          yes     yes      Std        3  MMQ$FCAP
     0    452          yes     yes      Std        3  MMQ$GCDP
     0    704          yes     yes      Std        3  MMQ$FCDP
     0   1007          yes     yes      Std        3  MMQ$RECON
     0   1134          yes     yes      Std        3  MMQ$TRUNCDSB
     0   1141          yes     yes      Std        3  MMQ$TRUNCDSBL
     0   1273          yes     yes      Std        0  MMQ$ZAPCPUS
     0   1305          yes     yes      Std        0  MMQ$TRUNCPT
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:31   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       5 MMF$FIXLS
         yes           Std       1 HFC$UNLOCK
         yes           Std       3 HFC$ASSOCCLR
 yes     yes           Std       2 MMB$GPP
 yes     yes           Std       0 MMB$RELPG
         yes           Std       1 HFC$LOCK
 yes     yes           Std       1 MMB$FPP
         yes           Std       0 HFA$CLEARCPU
 yes     yes           Std       0 KQM$TRUNCDSBS
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     SC_MM40                               SC_MM41                               MM_CGLOCK
r    MM_BYP$                               MM_FPMC                               MM_CGQMAP_PGS
     MM_CGQRES_PGS                         MM_CGQCXT_END                         MM_CGQPHS
     MM_CGQPHE                             MM_CGTCNT                             HW_WSQ0PT
     S_NSCPUA                              B$LS$                                 B$CGPT$
     B$CGCTXT$                        r    MM_CGQD$                         r    B$PPUT$
r    B$WSQ0PT$                        r    B$IPHYMAP$                            B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ASLENTSID                             ISSID
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:32   


        1        1        /*M* MMQ$CGQ Memory allocation for comgroups */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7       /*X* DMC,PLM=6,IND=0,IDT=2,SDI=2,CTI=0,ENU=0,AND,DCI=4,CSU=2,ECU=4,THI=0,DTI=0,STI=1
                 7        ,IAD=0,PRB */
        8        8        /**/
        9        9        /*P* NAME:         MMQ$CGQ
       10       10             PURPOSE:      To perform memory allocation for comgroups
       11       11             DESCRIPTION:
       12       12
       13       13                 The memory allocation scheme for comgroups satisfies
       14       14        the following requirements:
       15       15
       16       16                      o The total memory available to all comgroups
       17       17                        should be definable up to a very large value
       18       18                        ( > 1 megaword).
       19       19                      o The total addressability of a single comgroup
       20       20                        should exceed 100k words.
       21       21                      o Since a CP-6 installation may contain a large
       22       22                        number of comgroups, not all of which may be
       23       23                        active at any time, an inactive comgroup must
       24       24                        occupy no main memory, but must be capable
       25       25                        of being made active with minimum overhead.
       26       26                        Due to the fact that a comgroup contains
       27       27                        MANY pointers, this means one wishes to be
       28       28                        be able to re-open a comgroup without
       29       29                        changing any of the pointers therein.
       30       30
       31       31
       32       32                 A new working space has been defined, called the
       33       33            comgroup WS.  Its page table is up to 10K long and
       34       34            is allocated by TIGR according to the CGQMAP (number
       35       35            of comgroup WS page table pages) parameter.  This
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:33   
       36       36            page table occupies a 10K hole in the monitor's
       37       37            working space and lives in the monitor segment having
       38       38            segid CGPTSID (currently LS115).
       39       39                 The comgroup WS quarter number is always
       40       40            in WSR 3, to enable comgroups to use WSR-type
       41       41            descriptors.
       42       42                 The first 256K of the comgroup WS is the monitor segment
       43       43            CGCXTSID (currently LS116) with TYPE=0 WSR=3 BASE=0.  The
       44       44            first CGCXTSZ (a TIGR parameter) pages of the WS are reserved
       45       45            for comgroup context and addressing blocks.  These
       46       46            blocks are always visible from the monitor, being
       47       47            framed by LS116; thus CGCXTSZ has a maximum value
       48       48            of 254 (not 256 - see user buffer mapping below).
       49       49                 The rest of the WS is reserved for comgroup
       50       50            data pages.
       51       51
       52       52                 A comgroup has, then, three pieces: a context
       53       53            block, an address block, and data pages.  The
       54       54            former two are always visible from the monitor.
       55       55
       56       56                 Context block pages are allocated and released
       57       57            by MMQ$GCCP and MMQ$FCCP.  Address block pages are
       58       58            housekeeping pages and are allocated and released by
       59       59            MMQ$GCAP and MMQ$FCAP.  An address block is framed
       60       60            by the structure KQ_DSB (descriptor segment block)
       61       61            found in KQM_MAC_C.  The address block contains
       62       62            a type 1 descriptor framing the rest of the block.
       63       63            The rest of the block contains type 0 descriptors
       64       64            with WSR = 3.  These descriptors frame the comgroup's
       65       65            data pages.  In order to see these pages, one loads
       66       66            the type 1 descriptor into the ASR, and uses pointers
       67       67            with argument segment segids.
       68       68
       69       69                 The remainder of the comgroup page table, that is,
       70       70            the part not reserved for the context & address block
       71       71            segment, is split up into chunks of %CGQ_CHUNK_SIZE
       72       72            words.  Each chunk will be used to create a single
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:34   
       73       73            segment for a single comgroup.
       74       74            The first time a comgroup needs a page, one
       75       75            of these chunks is allocated, and one of the comgroup's
       76       76            address block descriptors set up with a bound of
       77       77            %CGQ_CHUNK_SIZE*4096, and a base calculated from the
       78       78            position of the allocated chunk in the page table.
       79       79            Thus that descriptor will now frame any pages mapped
       80       80            into the chunk.
       81       81
       82       82                 Pages are allocated and released, on behalf of
       83       83            a given comgroup, by MMQ$GCDP and MMQ$FCDP.  The
       84       84            maximum addressability of a given comgroup is
       85       85            %CGQ_CHUNK_SIZE * N pages, where N is the number of
       86       86            type 0 descriptors in an address block.  The maximum
       87       87            amount of memory available to all comgroups is thus
       88       88            (CGQMAP*1024)-CGCXTSZ pages.
       89       89
       90       90                  This scheme makes it easy to re-open a comgroup.
       91       91            The close process simply saves the argument-segment
       92       92            pointer of each comgroup page.  When the comgroup
       93       93            is being reopened, MMQ$RECON is called to reconstruct
       94       94            the address block.  It does this by obtaining any
       95       95            available page table chunks, and setting up the
       96       96            bases of the address block descriptors appropriately.
       97       97            The argument-segment pointers in the comgroup are
       98       98            thus unchanged regardless of where the physical
       99       99            pages appear in the comgroup working space.
      100      100
      101      101                 The first two entries in the comgroup page
      102      102            table are reserved for mapping user buffers.  The
      103      103            technique used here depends on the fact that user
      104      104            reads to comgroups cannot exceed 4096 bytes (1K
      105      105            words).  When a user's read is made pending,
      106      106            parameters are set up to allow the process which
      107      107            satisfies the read to store the data into the
      108      108            user's buffer without running on his behalf.
      109      109            This is done by plucking out the 1 or 2 page
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:35   
      110      110            table entries from the user page table which
      111      111            correspond to his buffer, and remembering the
      112      112            byte displacement, X, of his buffer into the
      113      113            first page.  Then, one may store into his
      114      114            buffer by stuffing the CG page table's first
      115      115            two words with the saved page table entries,
      116      116            and referencing $LS116->X. */
      117      117        MMQ$INIT: PROC(PGTBL$,KQ$DSB,ERR) ALTRET;

    117  0 000000   000000 700200 xent  MMQ$INIT     TSX0  ! X66_AUTO_3
         0 000001   000032 000003                    ZERO    26,3

      118      118        /**/
      119      119
      120      120
      121      121
      122      122        /**/
      123      123        /* INCLUDES */
      124      124        /**/
      125      125        %INCLUDE KQ_SUBS_C;
      126      425        %INCLUDE KQM_MAC_C;
      127      798        %INCLUDE MM_DATA_R;
      128     1318        %INCLUDE HF_DATA_R;
      129     1361        %INCLUDE M_ERRORS_C;
      130     1425        %INCLUDE B_MACROS_C;
      131     1536        %INCLUDE B_SEGIDS_C;
      132     2075        %INCLUDE HF_LOCK_C;
      133     2089        %INCLUDE B$MAP;
      134     2188        %INCLUDE SS_SCHED_R;
      135     2231
      136     2232
      137     2233
      138     2234        /**/
      139     2235        /* PARAMETERS */
      140     2236        /**/
      141     2237    1   DCL PGTBL$ PTR;
      142     2238    1   DCL 1 PGTBL_PTR REDEF PGTBL$,
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:36   
      143     2239    1         2 PGNO UBIN(8) UNAL,
      144     2240    1         2 * UBIN(16) UNAL,
      145     2241    1         2 SEGID BIT(12) UNAL;
      146     2242        %KQ_DSB(FPTN=KQ$DSB,STCLASS="");
      147     2285    1   DCL ERR UBIN WORD;
      148     2286    1   DCL RECONPPNO REDEF ERR UBIN WORD;
      149     2287
      150     2288
      151     2289
      152     2290        /**/
      153     2291        /* BASED STRUCTURES */
      154     2292        /**/
      155     2293        %MM$CGQD (STCLASS="BASED(MM_CGQD$)");
      156     2352
      157     2353
      158     2354
      159     2355        /**/
      160     2356        /* AUTO */
      161     2357        /**/
      162     2358    1   DCL CHUNKPG# UBIN;
      163     2359    1   DCL I SBIN;
      164     2360    1   DCL J SBIN;
      165     2361    1   DCL K SBIN;
      166     2362    1   DCL 1 PTSLOT ALIGNED,
      167     2363    1         2 K SBIN,
      168     2364    1         2 VPNO SBIN,
      169     2365    1         2 CHUNKPG# SBIN;
      170     2366    1   DCL HKFLG BIT(1) UNAL;
      171     2367    1   DCL PGTYPE BIT(6) UNAL;
      172     2368    1   DCL PPNO UBIN;
      173     2369    1   DCL VPNO UBIN;
      174     2370
      175     2371
      176     2372
      177     2373        /**/
      178     2374        /* REFS */
      179     2375        /**/
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:37   
      180     2376    1   DCL HFA$CLEARCPU  ENTRY;
      181     2377    1   DCL HFC$ASSOCCLR  ENTRY(3);
      182     2378    1   DCL KQM$TRUNCDSBS ENTRY    ALTRET;
      183     2379    1   DCL MMB$FPP     ENTRY(1) ALTRET;
      184     2380    1   DCL MMB$GPP     ENTRY(2) ALTRET;
      185     2381    1   DCL MMB$RELPG   ENTRY    ALTRET;
      186     2382    1   DCL MMF$FIXLS     ENTRY(5);
      187     2383    1   DCL SC_MM40       ENTRY    CONV(2,0);
      188     2384    1   DCL SC_MM41       ENTRY    CONV(2,0);
      189     2385    1   DCL B$LS$ PTR SYMREF;
      190     2386    1   DCL B$CGPT$ PTR SYMREF;
      191     2387    1   DCL B$CGCTXT$ PTR SYMREF;
      192     2388    1   DCL MM_CGQD$ PTR SYMREF READONLY;
      193     2389    1   DCL B$PPUT$ PTR SYMREF READONLY;
      194     2390    1   DCL B$WSQ0PT$ PTR SYMREF READONLY;
      195     2391    1   DCL B$IPHYMAP$ PTR SYMREF READONLY;
      196     2392        %KQ_DSB (FPTN=KQ_IDSB,STCLASS=SYMREF);
      197     2435
      198     2436
      199     2437
      200     2438        /**/
      201     2439        /* SUBS */
      202     2440        /**/
      203     2441        %SUB    B$CGPT =B$CGPT$->B$MAP;
      204     2442        /**/
      205     2443        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:38   
      206     2444        /**/
      207     2445        /*F* NAME:         MMQ$INIT
      208     2446             PURPOSE:      To initialize comgroup memory management
      209     2447             INPUT:        MM_CGQMAP_PGS - Number of pages in the comgroup
      210     2448                                           page table.
      211     2449                           MM_CGQRES_PGS - Number of words in the page
      212     2450                                           table to be set aside for mapping
      213     2451                                           comgroup context.
      214     2452             DESCRIPTION:  Initializes the comgroup page table.
      215     2453
      216     2454                           Reserves the first %CGQ_BUF_PGS page table words
      217     2455                           for mapping buffers.  Reserves the next
      218     2456                           MM_CGQRES_PGS page table words for comgroup
      219     2457                           context mapping.  MM_CGQRES_PGS is guaranteed not
      220     2458                           to exceed 256-%CGQ_BUF_PGS, a necessary restriction
      221     2459                           since the pages will be framed by a single monitor
      222     2460                           LS descriptor.
      223     2461
      224     2462                           Takes the last possible context page# and rounds
      225     2463                           it up to the next multiple of %CGQ_CHUNK_SIZE.
      226     2464                           This is because the first possible comgroup
      227     2465                           data chunk page must start on a %CGQ_CHUNK_SIZE
      228     2466                           page# boundary (see VLINK discussion below).
      229     2467                           Take the min of that number and 255, and sets
      230     2468                           the result into MM_CGQCXT_END, the last possible
      231     2469                           context page number (thus possibly giving the
      232     2470                           system more possible context pages than requested
      233     2471                           in TIGR).  Then sets the bound on the context
      234     2472                           descriptor in monitor LS appropriately.
      235     2473
      236     2474                           Finally, links the comgroup data chunks of the
      237     2475                           page table together, and sets MM$CGQD.FCHUNK.HEAD,
      238     2476                           MM$CGQD.FCHUNK.TAIL, and MM$CGQD.FCHUNK.COUNT appropriately.
      239     2477        */
      240     2478        /**/
      241     2479    1         IF (MM_CGQMAP_PGS = 0) OR (MM_CGQMAP_PGS > 10) THEN

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:39   
   2479  0 000002   000000 235000 xsym               LDA     MM_CGQMAP_PGS
         0 000003   000006 600000 0                  TZE     s:2480
         0 000004   000013 115007                    CMPA    11,DL
         0 000005   000007 602000 0                  TNC     s:2481

      242     2480    1          RETURN;        /* Illegal condition, CGQ mgmt. will screech    */

   2480  0 000006   000000 702200 xent               TSX2  ! X66_ARET

      243     2481    1         IF MM_CGQRES_PGS < 2 THEN CALL SC_MM40;

   2481  0 000007   000000 236000 xsym               LDQ     MM_CGQRES_PGS
         0 000010   000002 116007                    CMPQ    2,DL
         0 000011   000014 603000 0                  TRC     s:2491

   2481  0 000012   000000 713400 xsym               CLIMB   SC_MM40
         0 000013   000000 600000 xsid               climb   nvectors=         0

      244     2482        /*S*    SCREECH_CODE: MMQ-S$MM40
      245     2483                MESSAGE: Less than two pages reserved for CG context & addr blocks.
      246     2484                DESCRIPTION: There must be at least 2 pages reserved, as
      247     2485                        adressing blocks must be on housekeeping pages and
      248     2486                        context blocks must not.                            */
      249     2487        /**/
      250     2488                          /*    Fill the page table with its
      251     2489                           *    initial gunge.  All MM_FPMC.
      252     2490                           */
      253     2491    2           DO I = 0 TO (MM_CGQMAP_PGS*1024 - 1);

   2491  0 000014   200007 450100                    STZ     I,,AUTO
         0 000015   000026 710000 0                  TRA     s:2494+1

      254     2492    2           B$CGPT(I) = '0'B;

   2492  0 000016   000000 470400 xsym               LDP0    B$CGPT$
         0 000017   200007 720100                    LXL0    I,,AUTO
         0 000020   000000 450110                    STZ     0,X0,PR0
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:40   

      255     2493    2           B$CGPT.RPN(I)=MM_FPMC.RPN;

   2493  0 000021   000000 220000 xsym               LDX0    MM_FPMC
         0 000022   000000 470400 xsym               LDP0    B$CGPT$
         0 000023   200007 721100                    LXL1    I,,AUTO
         0 000024   000000 740111                    STX0    0,X1,PR0

      256     2494    2           END;

   2494  0 000025   200007 054100                    AOS     I,,AUTO
         0 000026   000000 236000 xsym               LDQ     MM_CGQMAP_PGS
         0 000027   000012 736000                    QLS     10
         0 000030   000016 604000 0                  TMI     s:2492
         0 000031   200007 116100                    CMPQ    I,,AUTO
         0 000032   000016 605400 0                  TPNZ    s:2492

      257     2495                          /*    Reserve the correct number of
      258     2496                           *    page table entries for user
      259     2497                           *    buffer mapping, and context
      260     2498                           *    area.  Then set up the free
      261     2499                           *    list of page table chunks.
      262     2500                           *
      263     2501                           *    The links between free chunks are
      264     2502                           *    kept in the VLINK (reserved for
      265     2503                           *    software) part of the page table
      266     2504                           *    word.  Since that field is only
      267     2505                           *    10 bits wide & the page table
      268     2506                           *    can be 10 pages long, the links
      269     2507                           *    can't just be word indices into
      270     2508                           *    the page table.  So we make 'em
      271     2509                           *    a chunk index (i.e. word index
      272     2510                           *    divided by chunk size.), and
      273     2511                           *    furthermore, discard that
      274     2512                           *    portion of the page table that's
      275     2513                           *    farther up that 10 bits worth
      276     2514                           *    of that type of index (this last
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:41   
      277     2515                           *    can't happen in B01 'cause the
      278     2516                           *    page table can't exceed 10k and
      279     2517                           *    the chunk size is 10 words, which
      280     2518                           *    allows us to use exactly the max
      281     2519                           *    page table & no more).
      282     2520                           *
      283     2521                           *    This all means that the first
      284     2522                           *    and all chunks must start at
      285     2523                           *    a chunksize boundary in the
      286     2524                           *    page table.
      287     2525                           */
      288     2526    1         CHUNKPG#=%CGQ_BUF_PGS+MM_CGQRES_PGS+%CGQ_CHUNK_SIZE-1;

   2526  0 000033   000000 235000 xsym               LDA     MM_CGQRES_PGS
         0 000034   000013 035007                    ADLA    11,DL
         0 000035   200006 755100                    STA     CHUNKPG#,,AUTO

      289     2527    1         CHUNKPG#=(CHUNKPG#/%CGQ_CHUNK_SIZE)*%CGQ_CHUNK_SIZE;

   2527  0 000036   200006 236100                    LDQ     CHUNKPG#,,AUTO
         0 000037   000001 772000                    QRL     1
         0 000040   000005 506007                    DIV     5,DL
         0 000041   000012 402007                    MPY     10,DL
         0 000042   200006 756100                    STQ     CHUNKPG#,,AUTO

      290     2528    1         IF CHUNKPG# > 256 THEN CHUNKPG#=256;

   2528  0 000043   000401 116007                    CMPQ    257,DL
         0 000044   000047 602000 0                  TNC     s:2529

   2528  0 000045   000400 235007                    LDA     256,DL
         0 000046   200006 755100                    STA     CHUNKPG#,,AUTO

      291     2529    1         MM_CGQCXT_END=CHUNKPG#-1;

   2529  0 000047   200006 235100                    LDA     CHUNKPG#,,AUTO
         0 000050   000001 135007                    SBLA    1,DL
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:42   
         0 000051   000000 755000 xsym               STA     MM_CGQCXT_END

      292     2530    1         MM_CGQPHS=CHUNKPG#;

   2530  0 000052   200006 236100                    LDQ     CHUNKPG#,,AUTO
         0 000053   000000 756000 xsym               STQ     MM_CGQPHS

      293     2531                          /*    Set the bound on the
      294     2532                           *    descriptor for the CG context
      295     2533                           *    & user buffer mapping area.
      296     2534                           */
      297     2535    1         I=(CHUNKPG#*4096)-1;

   2535  0 000054   200006 235100                    LDA     CHUNKPG#,,AUTO
         0 000055   000014 735000                    ALS     12
         0 000056   000001 135007                    SBLA    1,DL
         0 000057   200007 755100                    STA     I,,AUTO

      298     2536    1         CALL MMF$FIXLS(B$LS$,BITBIN(%CGCTXTSID),0,0,I);

   2536  0 000060   200007 630500                    EPPR0   I,,AUTO
         0 000061   200030 450500                    STP0    VPNO+8,,AUTO
         0 000062   000002 237000 1                  LDAQ    2
         0 000063   200026 757100                    STAQ    VPNO+6,,AUTO
         0 000064   000004 237000 1                  LDAQ    4
         0 000065   200024 757100                    STAQ    VPNO+4,,AUTO
         0 000066   200024 630500                    EPPR0   VPNO+4,,AUTO
         0 000067   000023 631400 xsym               EPPR1   B_VECTNIL+19
         0 000070   000000 701000 xent               TSX1    MMF$FIXLS
         0 000071   000000 011000                    NOP     0

      299     2537    1         K=(MM_CGQMAP_PGS*1024);

   2537  0 000072   000000 235000 xsym               LDA     MM_CGQMAP_PGS
         0 000073   000012 735000                    ALS     10
         0 000074   200011 755100                    STA     K,,AUTO

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:43   
      300     2538    1         IF K > 1024*%CGQ_CHUNK_SIZE THEN

   2538  0 000075   024000 115007                    CMPA    10240,DL
         0 000076   000101 604400 0                  TMOZ    s:2540

      301     2539    1          K=1024*%CGQ_CHUNK_SIZE;

   2539  0 000077   024000 236007                    LDQ     10240,DL
         0 000100   200011 756100                    STQ     K,,AUTO

      302     2540    1         K=K-CHUNKPG#; /* # pgs avail */

   2540  0 000101   200011 236100                    LDQ     K,,AUTO
         0 000102   200006 136100                    SBLQ    CHUNKPG#,,AUTO
         0 000103   200011 756100                    STQ     K,,AUTO

      303     2541    1         K=K/%CGQ_CHUNK_SIZE; /* # chunks avail */

   2541  0 000104   000012 506007                    DIV     10,DL
         0 000105   200011 756100                    STQ     K,,AUTO

      304     2542    1         MM$CGQD.FCHUNK.HEAD=CHUNKPG#/%CGQ_CHUNK_SIZE;

   2542  0 000106   200006 236100                    LDQ     CHUNKPG#,,AUTO
         0 000107   000001 772000                    QRL     1
         0 000110   000005 506007                    DIV     5,DL
         0 000111   000000 470400 xsym               LDP0    MM_CGQD$
         0 000112   000002 756100                    STQ     2,,PR0

      305     2543    1         MM$CGQD.FCHUNK.COUNT=K;

   2543  0 000113   200011 235100                    LDA     K,,AUTO
         0 000114   000004 755100                    STA     4,,PR0

      306     2544    2           DO I = 1 TO K-1;

   2544  0 000115   000001 235007                    LDA     1,DL
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:44   
         0 000116   200007 755100                    STA     I,,AUTO
         0 000117   000136 710000 0                  TRA     s:2547+1

      307     2545    2           B$CGPT.VLINK(CHUNKPG#)=(CHUNKPG#/%CGQ_CHUNK_SIZE)+1;

   2545  0 000120   200006 236100                    LDQ     CHUNKPG#,,AUTO
         0 000121   000001 772000                    QRL     1
         0 000122   000005 506007                    DIV     5,DL
         0 000123   000000 470400 xsym               LDP0    B$CGPT$
         0 000124   200006 720100                    LXL0    CHUNKPG#,,AUTO
         0 000125   000001 036007                    ADLQ    1,DL
         0 000126   000010 736000                    QLS     8
         0 000127   000000 676110                    ERQ     0,X0,PR0
         0 000130   777400 376007                    ANQ     -256,DL
         0 000131   000000 656110                    ERSQ    0,X0,PR0

      308     2546    2           CHUNKPG#=CHUNKPG#+%CGQ_CHUNK_SIZE;

   2546  0 000132   200006 235100                    LDA     CHUNKPG#,,AUTO
         0 000133   000012 035007                    ADLA    10,DL
         0 000134   200006 755100                    STA     CHUNKPG#,,AUTO

      309     2547    2           END;

   2547  0 000135   200007 054100                    AOS     I,,AUTO
         0 000136   200007 236100                    LDQ     I,,AUTO
         0 000137   200011 116100                    CMPQ    K,,AUTO
         0 000140   000120 604000 0                  TMI     s:2545

      310     2548    1         MM$CGQD.FCHUNK.TAIL=CHUNKPG#/%CGQ_CHUNK_SIZE;

   2548  0 000141   200006 236100                    LDQ     CHUNKPG#,,AUTO
         0 000142   000001 772000                    QRL     1
         0 000143   000005 506007                    DIV     5,DL
         0 000144   000000 470400 xsym               LDP0    MM_CGQD$
         0 000145   000003 756100                    STQ     3,,PR0

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:45   
      311     2549    1         MM_CGQPHE=CHUNKPG#+%CGQ_CHUNK_SIZE-1;

   2549  0 000146   200006 235100                    LDA     CHUNKPG#,,AUTO
         0 000147   000011 035007                    ADLA    9,DL
         0 000150   000000 755000 xsym               STA     MM_CGQPHE

      312     2550    1         RETURN;

   2550  0 000151   000000 702200 xent               TSX2  ! X66_ARET

      313     2551        /**/
      314     2552        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:46   
      315     2553        /**/
      316     2554        /*F* NAME:         MMQ$GCCP
      317     2555             PURPOSE:      To get a comgroup context page
      318     2556             INPUT:        None
      319     2557             DESCRIPTION:  A physical page is allocated and mapped into
      320     2558                           the first available slot in the comgroup page
      321     2559                           table's context area.  The page is marked not
      322     2560                           housekeeping.  ALTRETs if cannot find.
      323     2561
      324     2562                           PGTBL$ is the returned pointer, and ERR a
      325     2563                           monitor error code if failure.  KQ$DSB is not
      326     2564                           used.
      327     2565
      328     2566                           Note that no gate needs to be locked when
      329     2567                           searching for a free page table entry.  This
      330     2568                           is because KQM$MM has already got an appropriate
      331     2569                           gate locked.
      332     2570        */
      333     2571    1   MMQ$GCCP: ENTRY(PGTBL$,KQ$DSB,ERR) ALTRET;

   2571  0 000152   000000 700200 xent  MMQ$GCCP     TSX0  ! X66_AUTO_3
         0 000153   000032 000003                    ZERO    26,3

      334     2572        /**/
      335     2573    1         HKFLG = %FALSE;

   2573  0 000154   200015 450100                    STZ     HKFLG,,AUTO

      336     2574    1         GOTO GCP_COMMON;

   2574  0 000155   000162 710000 0                  TRA     GCP_COMMON

      337     2575        /**/
      338     2576        /*F* NAME:         MMQ$GCAP
      339     2577             PURPOSE:      To get a comgroup descriptor segment page
      340     2578             INPUT:        None
      341     2579             DESCRIPTION:  Same as MMQ$GCCP except the page is marked
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:47   
      342     2580                           housekeeping.
      343     2581        */
      344     2582    1   MMQ$GCAP: ENTRY(PGTBL$,KQ$DSB,ERR) ALTRET;

   2582  0 000156   000000 700200 xent  MMQ$GCAP     TSX0  ! X66_AUTO_3
         0 000157   000032 000003                    ZERO    26,3

      345     2583        /**/
      346     2584    1         HKFLG = %TRUE;

   2584  0 000160   400000 236003                    LDQ     -131072,DU
         0 000161   200015 756100                    STQ     HKFLG,,AUTO

      347     2585    1   GCP_COMMON:
      348     2586    2           DO I = %CGQ_BUF_PGS TO MM_CGQCXT_END;

   2586  0 000162   000002 235007       GCP_COMMON   LDA     2,DL
         0 000163   200007 755100                    STA     I,,AUTO
         0 000164   000173 710000 0                  TRA     s:2588+1

      349     2587    2           IF B$CGPT.RPN(I) = MM_FPMC.RPN THEN GOTO GOT_CGP;

   2587  0 000165   000000 470400 xsym               LDP0    B$CGPT$
         0 000166   200007 720100                    LXL0    I,,AUTO
         0 000167   000000 221110                    LDX1    0,X0,PR0
         0 000170   000000 101000 xsym               CMPX1   MM_FPMC
         0 000171   000203 600000 0                  TZE     GOT_CGP

      350     2588    2           END;

   2588  0 000172   200007 054100                    AOS     I,,AUTO
         0 000173   000000 236000 xsym               LDQ     MM_CGQCXT_END
         0 000174   000165 604000 0                  TMI     s:2587
         0 000175   200007 116100                    CMPQ    I,,AUTO
         0 000176   000165 605000 0                  TPL     s:2587

      351     2589        /*E*    ERROR:  MMQ-E$NOCGPG-2
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:48   
      352     2590                MESSAGE: There are no physical page slots available for
      353     2591                         mapping comgroup context or addressing blocks. */
      354     2592    1         ERR = %E$NOCGPG;

   2592  0 000177   001167 235007                    LDA     631,DL
         0 000200   200005 470500                    LDP0    @ERR,,AUTO
         0 000201   000000 755100                    STA     0,,PR0

      355     2593    1         ALTRETURN;

   2593  0 000202   000000 702200 xent               TSX2  ! X66_AALT

      356     2594        /**/
      357     2595    1   GOT_CGP:
      358     2596    1         CALL MMB$GPP (PPNO,%MONWSQ);

   2596  0 000203   000001 236000 1     GOT_CGP      LDQ     1
         0 000204   200025 756100                    STQ     VPNO+5,,AUTO
         0 000205   200017 631500                    EPPR1   PPNO,,AUTO
         0 000206   200024 451500                    STP1    VPNO+4,,AUTO
         0 000207   200024 630500                    EPPR0   VPNO+4,,AUTO
         0 000210   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000211   000000 701000 xent               TSX1    MMB$GPP
         0 000212   000000 011000                    NOP     0

      359     2597    1         IF PPNO = 0 THEN

   2597  0 000213   200017 235100                    LDA     PPNO,,AUTO
         0 000214   000236 601000 0                  TNZ     GOT_CGP1

      360     2598    2           DO;

      361     2599    2           CALL MMB$RELPG;

   2599  0 000215   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000216   000000 701000 xent               TSX1    MMB$RELPG
         0 000217   000000 011000                    NOP     0
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:49   

      362     2600    2           CALL MMB$GPP (PPNO,%MONWSQ);

   2600  0 000220   000001 236000 1                  LDQ     1
         0 000221   200025 756100                    STQ     VPNO+5,,AUTO
         0 000222   200017 630500                    EPPR0   PPNO,,AUTO
         0 000223   200024 450500                    STP0    VPNO+4,,AUTO
         0 000224   200024 630500                    EPPR0   VPNO+4,,AUTO
         0 000225   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000226   000000 701000 xent               TSX1    MMB$GPP
         0 000227   000000 011000                    NOP     0

      363     2601    2           IF PPNO ~= 0 THEN GOTO GOT_CGP1;

   2601  0 000230   200017 235100                    LDA     PPNO,,AUTO
         0 000231   000236 601000 0                  TNZ     GOT_CGP1

      364     2602        /*E*    ERROR:  MMQ-E$NOCGPP-2
      365     2603                MESSAGE: There are currently no physical pages available for
      366     2604                        comgroup usage.                                    */
      367     2605    2           ERR = %E$NOCGPP;

   2605  0 000232   001170 236007                    LDQ     632,DL
         0 000233   200005 470500                    LDP0    @ERR,,AUTO
         0 000234   000000 756100                    STQ     0,,PR0

      368     2606    2           GOTO ALTRT;

   2606  0 000235   000703 710000 0                  TRA     ALTRT

      369     2607    2           END;
      370     2608    1   GOT_CGP1:
      371     2609              %LOCK (G=MM_CGLOCK);

   2610  0 000236   000006 630400 1     GOT_CGP1     EPPR0   6
         0 000237   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000240   000000 701000 xent               TSX1    HFC$LOCK
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:50   
         0 000241   000000 011000                    NOP     0

      372     2612    1         B$PPUT$->MM$PPUT.COMM(PPNO) = '1'B;     /* Set this is a comm page */

   2612  0 000242   000000 470400 xsym               LDP0    B$PPUT$
         0 000243   200017 720100                    LXL0    PPNO,,AUTO
         0 000244   001000 236003                    LDQ     512,DU
         0 000245   000000 256110                    ORSQ    0,X0,PR0

      373     2613    1         PGTYPE = %PGINMEM | %PGIOM | %PGWRITE;

   2613  0 000246   640000 236003                    LDQ     -49152,DU
         0 000247   200016 756100                    STQ     PGTYPE,,AUTO

      374     2614    1         IF HKFLG THEN PGTYPE = PGTYPE | %PGHKEEP;

   2614  0 000250   200015 234100                    SZN     HKFLG,,AUTO
         0 000251   000256 605000 0                  TPL     s:2615

   2614  0 000252   200016 236100                    LDQ     PGTYPE,,AUTO
         0 000253   770000 376003                    ANQ     -4096,DU
         0 000254   100000 276003                    ORQ     32768,DU
         0 000255   200016 756100                    STQ     PGTYPE,,AUTO

      375     2615    1         IF HW_WSQ0PT THEN

   2615  0 000256   000000 234000 xsym               SZN     HW_WSQ0PT
         0 000257   000267 605000 0                  TPL     s:2618

      376     2616    1          B$CGPT.RPN(I)=B$WSQ0PT$->B$MAP.RPN(PPNO);

   2616  0 000260   000000 471400 xsym               LDP1    B$WSQ0PT$
         0 000261   200017 720100                    LXL0    PPNO,,AUTO
         0 000262   100000 221110                    LDX1    0,X0,PR1
         0 000263   000000 473400 xsym               LDP3    B$CGPT$
         0 000264   200007 722100                    LXL2    I,,AUTO
         0 000265   300000 741112                    STX1    0,X2,PR3
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:51   
         0 000266   000273 710000 0                  TRA     s:2619

      377     2617    1         ELSE
      378     2618    1          B$CGPT.RPN(I) = PPNO;

   2618  0 000267   200017 720100                    LXL0    PPNO,,AUTO
         0 000270   000000 471400 xsym               LDP1    B$CGPT$
         0 000271   200007 721100                    LXL1    I,,AUTO
         0 000272   100000 740111                    STX0    0,X1,PR1

      379     2619    1         B$CGPT.CTRL(I) = PGTYPE;

   2619  0 000273   000000 471400 xsym               LDP1    B$CGPT$
         0 000274   200007 720100                    LXL0    I,,AUTO
         0 000275   200016 236100                    LDQ     PGTYPE,,AUTO
         0 000276   000036 772000                    QRL     30
         0 000277   100000 676110                    ERQ     0,X0,PR1
         0 000300   000077 376007                    ANQ     63,DL
         0 000301   100000 656110                    ERSQ    0,X0,PR1

      380     2620        /* Build pointer to the page we just allocated.                    */
      381     2621    1         PGTBL$ = PINCRW(B$CGCTXT$,I*1024);

   2621  0 000302   200007 236100                    LDQ     I,,AUTO
         0 000303   000034 736000                    QLS     28
         0 000304   000000 036000 xsym               ADLQ    B$CGCTXT$
         0 000305   200003 471500                    LDP1    @PGTBL$,,AUTO
         0 000306   100000 756100                    STQ     0,,PR1

      382     2622    1         MM$CGQD.UPPC = MM$CGQD.UPPC + 1;

   2622  0 000307   000000 473400 xsym               LDP3    MM_CGQD$
         0 000310   300001 054100                    AOS     1,,PR3

   2622  0 000311                       UNLRET       null
      383     2623    1   UNLRET:;
      384     2624              %UNLOCK (G=MM_CGLOCK);
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:52   

   2625  0 000311   000006 630400 1                  EPPR0   6
         0 000312   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000313   000000 701000 xent               TSX1    HFC$UNLOCK
         0 000314   000000 011000                    NOP     0

      385     2627    1         RETURN;

   2627  0 000315   000000 702200 xent               TSX2  ! X66_ARET

      386     2628        /**/
      387     2629        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:53   
      388     2630        /**/
      389     2631        /*F* NAME:         MMQ$FCCP
      390     2632             PURPOSE:      To free a comgroup context page
      391     2633             INPUT:        PGTBL$ points to the page
      392     2634             DESCRIPTION:  The page is freed and the page table marked
      393     2635                           appropriately.  Gate considerations are the
      394     2636                           same as for MMQ$GCCP.
      395     2637
      396     2638                           The ALTRET is taken if the page is not currently
      397     2639                           allocated or is a houskeeping page, with ERR set.
      398     2640        */
      399     2641    1   MMQ$FCCP: ENTRY(PGTBL$,KQ$DSB,ERR) ALTRET;

   2641  0 000316   000000 700200 xent  MMQ$FCCP     TSX0  ! X66_AUTO_3
         0 000317   000032 000003                    ZERO    26,3

      400     2642        /**/
      401     2643    1         HKFLG = %FALSE;

   2643  0 000320   200015 450100                    STZ     HKFLG,,AUTO

      402     2644    1         GOTO FCP_COMMON;

   2644  0 000321   000326 710000 0                  TRA     FCP_COMMON

      403     2645        /**/
      404     2646        /*F* NAME:         MMQ$FCAP
      405     2647             PURPOSE:      To free a comgroup descriptor segment page
      406     2648             INPUT:        PGTBL$ points to the page
      407     2649             DESCRIPTION:  Same as MMQ$FCAP except the page must be
      408     2650                           a housekeeping page.
      409     2651        */
      410     2652    1   MMQ$FCAP: ENTRY(PGTBL$,KQ$DSB,ERR) ALTRET;

   2652  0 000322   000000 700200 xent  MMQ$FCAP     TSX0  ! X66_AUTO_3
         0 000323   000032 000003                    ZERO    26,3

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:54   
      411     2653        /**/
      412     2654    1         HKFLG = %TRUE;

   2654  0 000324   400000 236003                    LDQ     -131072,DU
         0 000325   200015 756100                    STQ     HKFLG,,AUTO

      413     2655    1   FCP_COMMON:
      414     2656        /* Make sure we've really got a good pointer */
      415     2657    1         IF (PGTBL_PTR.SEGID ~= %CGCTXTSID)

   2657  0 000326   200003 470500       FCP_COMMON   LDP0    @PGTBL$,,AUTO
         0 000327   000000 236100                    LDQ     0,,PR0
         0 000330   007777 376007                    ANQ     4095,DL
         0 000331   006164 116007                    CMPQ    3188,DL
         0 000332   000340 601000 0                  TNZ     s:2663
         0 000333   000000 236100                    LDQ     0,,PR0
         0 000334   000034 772000                    QRL     28
         0 000335   000000 116000 xsym               CMPQ    MM_CGQCXT_END
         0 000336   000344 602000 0                  TNC     s:2666
         0 000337   000344 600000 0                  TZE     s:2666

      416     2658    1         OR (PGTBL_PTR.PGNO > MM_CGQCXT_END) THEN
      417     2659    2           DO;

      418     2660        /*E*    ERROR:  MMQ-E$BADCGPTR-2
      419     2661                MESSAGE: That is not a valid context, address block, or
      420     2662                        data page pointer.                                  */
      421     2663    2           ERR = %E$BADCGPTR;

   2663  0 000340   001172 235007                    LDA     634,DL
         0 000341   200005 471500                    LDP1    @ERR,,AUTO
         0 000342   100000 755100                    STA     0,,PR1

      422     2664    2           ALTRETURN;

   2664  0 000343   000000 702200 xent               TSX2  ! X66_AALT

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:55   
      423     2665    2           END;
      424     2666    1         VPNO = PGTBL_PTR.PGNO;

   2666  0 000344   200020 756100                    STQ     VPNO,,AUTO

      425     2667              %LOCK (G=MM_CGLOCK);

   2668  0 000345   000006 630400 1                  EPPR0   6
         0 000346   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000347   000000 701000 xent               TSX1    HFC$LOCK
         0 000350   000000 011000                    NOP     0

      426     2670    1         PPNO = B$CGPT.RPN(VPNO);

   2670  0 000351   000000 470400 xsym               LDP0    B$CGPT$
         0 000352   200020 720100                    LXL0    VPNO,,AUTO
         0 000353   000000 236110                    LDQ     0,X0,PR0
         0 000354   000022 772000                    QRL     18
         0 000355   200017 756100                    STQ     PPNO,,AUTO

      427     2671    1         IF PPNO = MM_FPMC.RPN THEN

   2671  0 000356   000000 236000 xsym               LDQ     MM_FPMC
         0 000357   000022 772000                    QRL     18
         0 000360   200017 116100                    CMPQ    PPNO,,AUTO
         0 000361   000366 601000 0                  TNZ     s:2679

      428     2672    2           DO;

      429     2673        /*E*    ERROR:  MMQ-E$CGNOTALLOC-2
      430     2674                MESSAGE: That context, address block, or data  page is already free.*/
      431     2675    2           ERR = %E$CGNOTALLOC;

   2675  0 000362   001173 235007                    LDA     635,DL
         0 000363   200005 471500                    LDP1    @ERR,,AUTO
         0 000364   100000 755100                    STA     0,,PR1

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:56   
      432     2676    2           GOTO UNLALT;

   2676  0 000365   000677 710000 0                  TRA     UNLALT

      433     2677    2           END;
      434     2678        /* Make sure page is really the type he wanted to free! */
      435     2679    1         IF (HKFLG AND NOT (B$CGPT.CTRL(VPNO) & %PGHKEEP))

   2679  0 000366   200015 234100                    SZN     HKFLG,,AUTO
         0 000367   000374 605000 0                  TPL     s:2679+6
         0 000370   000000 236110                    LDQ     0,X0,PR0
         0 000371   000036 736000                    QLS     30
         0 000372   100000 376003                    ANQ     32768,DU
         0 000373   000402 600000 0                  TZE     s:2685
         0 000374   200015 234100                    SZN     HKFLG,,AUTO
         0 000375   000406 604000 0                  TMI     s:2689
         0 000376   000000 236110                    LDQ     0,X0,PR0
         0 000377   000036 736000                    QLS     30
         0 000400   100000 376003                    ANQ     32768,DU
         0 000401   000406 600000 0                  TZE     s:2689

      436     2680    1         OR (NOT HKFLG AND (B$CGPT.CTRL(VPNO) & %PGHKEEP)) THEN
      437     2681    2           DO;

      438     2682        /*E*    ERROR:  MMQ-E$CGPGTYPBAD-2
      439     2683                MESSAGE: The page indicated by your pointer is not the correct
      440     2684                        type for the operation requested.                  */
      441     2685    2           ERR = %E$CGPGTYPBAD;

   2685  0 000402   001176 235007                    LDA     638,DL
         0 000403   200005 471500                    LDP1    @ERR,,AUTO
         0 000404   100000 755100                    STA     0,,PR1

      442     2686    2           GOTO UNLALT;

   2686  0 000405   000677 710000 0                  TRA     UNLALT

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:57   
      443     2687    2           END;
      444     2688        /* OK, he's cool.  Let's free it for him. */
      445     2689    1         IF HW_WSQ0PT THEN

   2689  0 000406   000000 234000 xsym               SZN     HW_WSQ0PT
         0 000407   000416 605000 0                  TPL     s:2691

      446     2690    1          PPNO=B$IPHYMAP$->MM$IPHY_MAP(PPNO);

   2690  0 000410   200017 235100                    LDA     PPNO,,AUTO
         0 000411   000001 735000                    ALS     1
         0 000412   000000 471400 xsym               LDP1    B$IPHYMAP$
         0 000413   000100 101505                    MRL     fill='000'O
         0 000414   100000 000002                    ADSC9   0,A,PR1                  cn=0,n=2
         0 000415   200017 000004                    ADSC9   PPNO,,AUTO               cn=0,n=4

      447     2691    1         CALL MMB$FPP (PPNO);

   2691  0 000416   200017 631500                    EPPR1   PPNO,,AUTO
         0 000417   200024 451500                    STP1    VPNO+4,,AUTO
         0 000420   200024 630500                    EPPR0   VPNO+4,,AUTO
         0 000421   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000422   000000 701000 xent               TSX1    MMB$FPP
         0 000423   000000 011000                    NOP     0

      448     2692    1         B$CGPT.RPN(VPNO) = MM_FPMC.RPN;

   2692  0 000424   000000 220000 xsym               LDX0    MM_FPMC
         0 000425   000000 470400 xsym               LDP0    B$CGPT$
         0 000426   200020 721100                    LXL1    VPNO,,AUTO
         0 000427   000000 740111                    STX0    0,X1,PR0

      449     2693    1         B$CGPT.CTRL(VPNO) = '0'B;

   2693  0 000430   000000 470400 xsym               LDP0    B$CGPT$
         0 000431   200020 720100                    LXL0    VPNO,,AUTO
         0 000432   000007 236000 1                  LDQ     7
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:58   
         0 000433   000000 356110                    ANSQ    0,X0,PR0

      450     2694    1         CALL HFC$ASSOCCLR(%CGWSQ,VPNO,1);

   2694  0 000434   000001 236000 1                  LDQ     1
         0 000435   200026 756100                    STQ     VPNO+6,,AUTO
         0 000436   200020 630500                    EPPR0   VPNO,,AUTO
         0 000437   200025 450500                    STP0    VPNO+5,,AUTO
         0 000440   000011 236000 1                  LDQ     9
         0 000441   200024 756100                    STQ     VPNO+4,,AUTO
         0 000442   200024 630500                    EPPR0   VPNO+4,,AUTO
         0 000443   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000444   000000 701000 xent               TSX1    HFC$ASSOCCLR
         0 000445   000000 011000                    NOP     0

      451     2695    1         MM$CGQD.UPPC = MM$CGQD.UPPC - 1;

   2695  0 000446   000000 470400 xsym               LDP0    MM_CGQD$
         0 000447   000001 336007                    LCQ     1,DL
         0 000450   000001 056100                    ASQ     1,,PR0

      452     2696    1         GOTO UNLRET;

   2696  0 000451   000311 710000 0                  TRA     UNLRET

      453     2697        /**/
      454     2698        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:59   
      455     2699        /**/
      456     2700        /*F* NAME:         MMQ$GCDP
      457     2701             PURPOSE:      To get a comgroup data page
      458     2702             INPUT:        KQ$DSB is the comgroup's descriptor segment
      459     2703             OUTPUT:       PGTBL$    - pointer to acquired page (ASR - relative)
      460     2704                           ERR       - error code if ALTRET, else PP#.
      461     2705             DESCRIPTION:  We first try to find a page previously owned
      462     2706                           by the comgroup and only quasi-released (see
      463     2707                           MMQ$FCDP).  If we do, then mark the page
      464     2708                           table word CPU- and IOM-present, and return
      465     2709                           the pointer to that page.
      466     2710
      467     2711                           Else we try to find a descriptor that already
      468     2712                           frames some memory in the comgroup WS for
      469     2713                           whom one of the pages is really free (i.e.
      470     2714                           the page table word is totally empty).
      471     2715                           If this works, we allocate a physical page,
      472     2716                           map it in, and return a pointer to that page.
      473     2717
      474     2718                           Else we try to find an unused descriptor.
      475     2719                           If none, ALTRET (cannot get).  Otherwise (got
      476     2720                           an unused descriptor), we get a free page
      477     2721                           table chunk for it, associate the descriptor
      478     2722                           with the page table chunk, and then go back
      479     2723                           to look in the obtained page table chunk
      480     2724                           for a page to use or allocate.
      481     2725        */
      482     2726    1   MMQ$GCDP: ENTRY(PGTBL$,KQ$DSB,ERR) ALTRET;

   2726  0 000452   000000 700200 xent  MMQ$GCDP     TSX0  ! X66_AUTO_3
         0 000453   000032 000003                    ZERO    26,3

      483     2727        /**/
      484     2728    1         PTSLOT.K=-1; /* No good PT slot to use */

   2728  0 000454   000001 335007                    LCA     1,DL
         0 000455   200012 755100                    STA     PTSLOT,,AUTO
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:60   

      485     2729    1         J = -1; /* No empty descriptor to use */

   2729  0 000456   200010 755100                    STA     J,,AUTO

      486     2730              %LOCK (G=MM_CGLOCK);

   2731  0 000457   000006 630400 1                  EPPR0   6
         0 000460   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000461   000000 701000 xent               TSX1    HFC$LOCK
         0 000462   000000 011000                    NOP     0

      487     2733    2           DO K = 0 TO KQM_MDPC#;

   2733  0 000463   200011 450100                    STZ     K,,AUTO

      488     2734    2           IF KQ$DSB.DESC.FLGR.PRESENT(K) THEN

   2734  0 000464   200011 235100                    LDA     K,,AUTO
         0 000465   000001 735000                    ALS     1
         0 000466   200004 470500                    LDP0    @KQ$DSB,,AUTO
         0 000467   000002 236105                    LDQ     2,AL,PR0
         0 000470   000200 316007                    CANQ    128,DL
         0 000471   000475 600000 0                  TZE     s:2737

      489     2735    2            CALL CHKDESC ALTRET(GCDP50);

   2735  0 000472   001535 701000 0                  TSX1    CHKDESC
         0 000473   000623 702000 0                  TSX2    GCDP50
         0 000474   000502 710000 0                  TRA     s:2738

      490     2736    2           ELSE
      491     2737    2            IF J = -1 THEN J = K;   /* 1st empty one                      */

   2737  0 000475   200010 235100                    LDA     J,,AUTO
         0 000476   000027 115000 xsym               CMPA    B_VECTNIL+23
         0 000477   000502 601000 0                  TNZ     s:2738
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:61   

   2737  0 000500   200011 236100                    LDQ     K,,AUTO
         0 000501   200010 756100                    STQ     J,,AUTO

      492     2738    2           END;

   2738  0 000502   200011 054100                    AOS     K,,AUTO
         0 000503   200011 235100                    LDA     K,,AUTO
         0 000504   000031 115007                    CMPA    25,DL
         0 000505   000464 604400 0                  TMOZ    s:2734

   2733  0 000506                       GCDP20       null
      493     2739        /**/
      494     2740        /**/
      495     2741    1   GCDP20:;
      496     2742    1         IF PTSLOT.K ~= -1 THEN

   2742  0 000506   200012 235100                    LDA     PTSLOT,,AUTO
         0 000507   000027 115000 xsym               CMPA    B_VECTNIL+23
         0 000510   000517 600000 0                  TZE     s:2751

      497     2743    2           DO;

      498     2744    2           K=PTSLOT.K;

   2744  0 000511   200011 755100                    STA     K,,AUTO

      499     2745    2           VPNO=PTSLOT.VPNO;

   2745  0 000512   200013 236100                    LDQ     PTSLOT+1,,AUTO
         0 000513   200020 756100                    STQ     VPNO,,AUTO

      500     2746    2           CHUNKPG#=PTSLOT.CHUNKPG#;

   2746  0 000514   200014 235100                    LDA     PTSLOT+2,,AUTO
         0 000515   200006 755100                    STA     CHUNKPG#,,AUTO

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:62   
      501     2747    2           GOTO GCDP40;

   2747  0 000516   000541 710000 0                  TRA     GCDP40

      502     2748    2           END;
      503     2749        /**/
      504     2750        /**/
      505     2751    1         IF J = -1 THEN

   2751  0 000517   200010 236100                    LDQ     J,,AUTO
         0 000520   000027 116000 xsym               CMPQ    B_VECTNIL+23
         0 000521   000526 601000 0                  TNZ     s:2759

      506     2752    2           DO;

      507     2753        /*E*    ERROR:  MMQ-E$CGADBLKMAX-2
      508     2754                MESSAGE: That comgroup address block already frames the
      509     2755                        maximum possible amount of data.                   */
      510     2756    2           ERR = %E$CGADBLKMAX;

   2756  0 000522   001175 235007                    LDA     637,DL
         0 000523   200005 470500                    LDP0    @ERR,,AUTO
         0 000524   000000 755100                    STA     0,,PR0

      511     2757    2           GOTO UNLALT;

   2757  0 000525   000677 710000 0                  TRA     UNLALT

      512     2758    2           END;
      513     2759    1         K=J;

   2759  0 000526   200011 756100                    STQ     K,,AUTO

      514     2760        /**/
      515     2761        /**/
      516     2762    1         CALL GETCHUNK ALTRET(UNLALT);

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:63   
   2762  0 000527   001414 701000 0                  TSX1    GETCHUNK
         0 000530   000677 702000 0                  TSX2    UNLALT

      517     2763    1         CALL FRAMECHUNK;

   2763  0 000531   001502 701000 0                  TSX1    FRAMECHUNK
         0 000532   000000 011000                    NOP     0

      518     2764    1         J=-1;

   2764  0 000533   000001 335007                    LCA     1,DL
         0 000534   200010 755100                    STA     J,,AUTO

      519     2765    1         PTSLOT.K=-1;

   2765  0 000535   200012 755100                    STA     PTSLOT,,AUTO

      520     2766    1         CALL CHKDESC ALTRET(GCDP50);

   2766  0 000536   001535 701000 0                  TSX1    CHKDESC
         0 000537   000623 702000 0                  TSX2    GCDP50

      521     2767    1         GOTO GCDP20;

   2767  0 000540   000506 710000 0                  TRA     GCDP20

   2765  0 000541                       GCDP40       null
      522     2768        /**/
      523     2769    1   GCDP40:;
      524     2770        /* OK - All we've got to do now is allocate a physical page to
      525     2771           virtual page "VPNO", which is framed by KQ$DSB.DESC(K) - which will
      526     2772           be $ARi when this address block is loaded as the argument stack. */
      527     2773    1         B$CGPT.CTRL(VPNO) = %PGINMEM;

   2773  0 000541   000000 470400 xsym               LDP0    B$CGPT$
         0 000542   200020 720100                    LXL0    VPNO,,AUTO
         0 000543   000000 236110                    LDQ     0,X0,PR0
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:64   
         0 000544   000007 376000 1                  ANQ     7
         0 000545   000040 276007                    ORQ     32,DL
         0 000546   000000 756110                    STQ     0,X0,PR0

      528     2774              %UNLOCK (G=MM_CGLOCK);

   2775  0 000547   000006 630400 1                  EPPR0   6
         0 000550   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000551   000000 701000 xent               TSX1    HFC$UNLOCK
         0 000552   000000 011000                    NOP     0

      529     2777    1         CALL MMB$GPP (PPNO,%MONWSQ);

   2777  0 000553   000001 236000 1                  LDQ     1
         0 000554   200025 756100                    STQ     VPNO+5,,AUTO
         0 000555   200017 630500                    EPPR0   PPNO,,AUTO
         0 000556   200024 450500                    STP0    VPNO+4,,AUTO
         0 000557   200024 630500                    EPPR0   VPNO+4,,AUTO
         0 000560   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000561   000000 701000 xent               TSX1    MMB$GPP
         0 000562   000000 011000                    NOP     0

      530     2778    1         IF PPNO = 0 THEN

   2778  0 000563   200017 235100                    LDA     PPNO,,AUTO
         0 000564   000612 601000 0                  TNZ     GCDP48

      531     2779    2           DO;

      532     2780    2           CALL MMB$RELPG;

   2780  0 000565   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000566   000000 701000 xent               TSX1    MMB$RELPG
         0 000567   000000 011000                    NOP     0

      533     2781    2           CALL MMB$GPP (PPNO,%MONWSQ);

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:65   
   2781  0 000570   000001 236000 1                  LDQ     1
         0 000571   200025 756100                    STQ     VPNO+5,,AUTO
         0 000572   200017 630500                    EPPR0   PPNO,,AUTO
         0 000573   200024 450500                    STP0    VPNO+4,,AUTO
         0 000574   200024 630500                    EPPR0   VPNO+4,,AUTO
         0 000575   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000576   000000 701000 xent               TSX1    MMB$GPP
         0 000577   000000 011000                    NOP     0

      534     2782    2           IF PPNO ~= 0 THEN GOTO GCDP48;

   2782  0 000600   200017 235100                    LDA     PPNO,,AUTO
         0 000601   000612 601000 0                  TNZ     GCDP48

      535     2783    2           ERR = %E$NOCGPP;

   2783  0 000602   001170 236007                    LDQ     632,DL
         0 000603   200005 470500                    LDP0    @ERR,,AUTO
         0 000604   000000 756100                    STQ     0,,PR0

      536     2784    2           B$CGPT.CTRL (VPNO) = '0'B;

   2784  0 000605   000000 471400 xsym               LDP1    B$CGPT$
         0 000606   200020 720100                    LXL0    VPNO,,AUTO
         0 000607   000007 236000 1                  LDQ     7
         0 000610   100000 356110                    ANSQ    0,X0,PR1

      537     2785    2           GOTO ALTRT;

   2785  0 000611   000703 710000 0                  TRA     ALTRT

   2778  0 000612                       GCDP48       null
      538     2786    2           END;
      539     2787    1   GCDP48:;
      540     2788              %LOCK (G=MM_CGLOCK);

   2789  0 000612   000006 630400 1                  EPPR0   6
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:66   
         0 000613   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000614   000000 701000 xent               TSX1    HFC$LOCK
         0 000615   000000 011000                    NOP     0

      541     2791    1         B$PPUT$->MM$PPUT.COMM(PPNO) = '1'B;     /* Set this is a comm page */

   2791  0 000616   000000 470400 xsym               LDP0    B$PPUT$
         0 000617   200017 720100                    LXL0    PPNO,,AUTO
         0 000620   001000 236003                    LDQ     512,DU
         0 000621   000000 256110                    ORSQ    0,X0,PR0

      542     2792    1         GOTO GCDP51;

   2792  0 000622   000626 710000 0                  TRA     GCDP51

   2791  0 000623                       GCDP50       null
      543     2793    1   GCDP50:;
      544     2794    1         MM$CGQD.FPPC=MM$CGQD.FPPC-1;

   2794  0 000623   000000 470400 xsym               LDP0    MM_CGQD$
         0 000624   000001 336007                    LCQ     1,DL
         0 000625   000000 056100                    ASQ     0,,PR0

   2794  0 000626                       GCDP51       null
      545     2795    1   GCDP51:;
      546     2796    1         MM$CGQD.UPPC=MM$CGQD.UPPC+1;

   2796  0 000626   000000 470400 xsym               LDP0    MM_CGQD$
         0 000627   000001 054100                    AOS     1,,PR0

      547     2797    1         PGTYPE = (%PGIOM | %PGINMEM | %PGWRITE);

   2797  0 000630   640000 236003                    LDQ     -49152,DU
         0 000631   200016 756100                    STQ     PGTYPE,,AUTO

      548     2798    1         ERR=PPNO;

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:67   
   2798  0 000632   200005 471500                    LDP1    @ERR,,AUTO
         0 000633   200017 235100                    LDA     PPNO,,AUTO
         0 000634   100000 755100                    STA     0,,PR1

      549     2799    1         IF HW_WSQ0PT THEN

   2799  0 000635   000000 234000 xsym               SZN     HW_WSQ0PT
         0 000636   000646 605000 0                  TPL     s:2802

      550     2800    1          B$CGPT.RPN(VPNO)=B$WSQ0PT$->B$MAP.RPN(PPNO);

   2800  0 000637   000000 473400 xsym               LDP3    B$WSQ0PT$
         0 000640   200017 720100                    LXL0    PPNO,,AUTO
         0 000641   300000 221110                    LDX1    0,X0,PR3
         0 000642   000000 474400 xsym               LDP4    B$CGPT$
         0 000643   200020 722100                    LXL2    VPNO,,AUTO
         0 000644   400000 741112                    STX1    0,X2,PR4
         0 000645   000652 710000 0                  TRA     s:2803

      551     2801    1         ELSE
      552     2802    1          B$CGPT.RPN(VPNO) = PPNO;

   2802  0 000646   200017 720100                    LXL0    PPNO,,AUTO
         0 000647   000000 473400 xsym               LDP3    B$CGPT$
         0 000650   200020 721100                    LXL1    VPNO,,AUTO
         0 000651   300000 740111                    STX0    0,X1,PR3

      553     2803    1         B$CGPT.CTRL(VPNO) = PGTYPE;

   2803  0 000652   000000 473400 xsym               LDP3    B$CGPT$
         0 000653   200020 720100                    LXL0    VPNO,,AUTO
         0 000654   200016 236100                    LDQ     PGTYPE,,AUTO
         0 000655   000036 772000                    QRL     30
         0 000656   300000 676110                    ERQ     0,X0,PR3
         0 000657   000077 376007                    ANQ     63,DL
         0 000660   300000 656110                    ERSQ    0,X0,PR3

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:68   
      554     2804    1         PGTBL_PTR='0'B;

   2804  0 000661   200003 473500                    LDP3    @PGTBL$,,AUTO
         0 000662   300000 450100                    STZ     0,,PR3

      555     2805    1         PGTBL_PTR.SEGID = BINBIT(BITBIN(%AS0SID) + K,12);

   2805  0 000663   200011 236100                    LDQ     K,,AUTO
         0 000664   004000 036007                    ADLQ    2048,DL
         0 000665   000030 736000                    QLS     24
         0 000666   000030 772000                    QRL     24
         0 000667   300000 752103                    STCQ    0,'03'O,PR3

      556     2806    1         PGTBL_PTR.PGNO = VPNO - CHUNKPG#;

   2806  0 000670   200020 236100                    LDQ     VPNO,,AUTO
         0 000671   200006 136100                    SBLQ    CHUNKPG#,,AUTO
         0 000672   000034 736000                    QLS     28
         0 000673   300000 676100                    ERQ     0,,PR3
         0 000674   776000 376003                    ANQ     -1024,DU
         0 000675   300000 656100                    ERSQ    0,,PR3

      557     2807    1         GOTO UNLRET;

   2807  0 000676   000311 710000 0                  TRA     UNLRET

   2806  0 000677                       UNLALT       null
      558     2808    1   UNLALT:;
      559     2809              %UNLOCK (G=MM_CGLOCK);

   2810  0 000677   000006 630400 1                  EPPR0   6
         0 000700   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000701   000000 701000 xent               TSX1    HFC$UNLOCK
         0 000702   000000 011000                    NOP     0

      560     2812    1   ALTRT:ALTRETURN;

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:69   
   2812  0 000703   000000 702200 xent  ALTRT        TSX2  ! X66_AALT

      561     2813        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:70   
      562     2814        /**/
      563     2815        /*F* NAME:         MMQ$FCDP
      564     2816             PURPOSE:      To free a comgroup data page.
      565     2817             INPUT:        PGTBL$ is the ASR-relative page pointer
      566     2818                           KQ$DSB is the comgroup's descriptor segment
      567     2819             DESCRIPTION:  If it isn't legal to release this page,
      568     2820                           we ALTRET with ERR set.  Otherwise we
      569     2821                           mark the page table entry not in memory,
      570     2822                           and return, without releasing the physical
      571     2823                           page
      572     2824        */
      573     2825    1   MMQ$FCDP: ENTRY(PGTBL$,KQ$DSB,ERR) ALTRET;

   2825  0 000704   000000 700200 xent  MMQ$FCDP     TSX0  ! X66_AUTO_3
         0 000705   000032 000003                    ZERO    26,3

      574     2826        /**/
      575     2827    1         IF (BITBIN(PGTBL_PTR.SEGID) < BITBIN(%AS0SID))

   2827  0 000706   200003 470500                    LDP0    @PGTBL$,,AUTO
         0 000707   000000 236100                    LDQ     0,,PR0
         0 000710   007777 376007                    ANQ     4095,DL
         0 000711   004000 116007                    CMPQ    2048,DL
         0 000712   000721 602000 0                  TNC     s:2831
         0 000713   004032 116007                    CMPQ    2074,DL
         0 000714   000721 603000 0                  TRC     s:2831
         0 000715   000000 236100                    LDQ     0,,PR0
         0 000716   776000 376003                    ANQ     -1024,DU
         0 000717   024000 116003                    CMPQ    10240,DU
         0 000720   000725 602000 0                  TNC     s:2834

      576     2828    1         OR (BITBIN(PGTBL_PTR.SEGID) > (BITBIN(%AS0SID) + KQM_MDPC#))
      577     2829    1         OR (PGTBL_PTR.PGNO >= %CGQ_CHUNK_SIZE) THEN
      578     2830    2           DO;

      579     2831    2           ERR = %E$BADCGPTR;

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:71   
   2831  0 000721   001172 235007                    LDA     634,DL
         0 000722   200005 471500                    LDP1    @ERR,,AUTO
         0 000723   100000 755100                    STA     0,,PR1

      580     2832    2           ALTRETURN;

   2832  0 000724   000000 702200 xent               TSX2  ! X66_AALT

      581     2833    2           END;
      582     2834    1         K = BITBIN(PGTBL_PTR.SEGID) - BITBIN(%AS0SID);

   2834  0 000725   000000 236100                    LDQ     0,,PR0
         0 000726   007777 376007                    ANQ     4095,DL
         0 000727   004000 136007                    SBLQ    2048,DL
         0 000730   200011 756100                    STQ     K,,AUTO

      583     2835    1         CHUNKPG# = (KQ$DSB.DESC.BASE(K) / 4096) - %CGCTXTLO;

   2835  0 000731   200011 235100                    LDA     K,,AUTO
         0 000732   000001 735000                    ALS     1
         0 000733   200004 471500                    LDP1    @KQ$DSB,,AUTO
         0 000734   100003 236105                    LDQ     3,AL,PR1
         0 000735   000014 772000                    QRL     12
         0 000736   200006 756100                    STQ     CHUNKPG#,,AUTO

      584     2836    1         VPNO = CHUNKPG# + PGTBL_PTR.PGNO;

   2836  0 000737   000000 236100                    LDQ     0,,PR0
         0 000740   000034 772000                    QRL     28
         0 000741   200006 036100                    ADLQ    CHUNKPG#,,AUTO
         0 000742   200020 756100                    STQ     VPNO,,AUTO

      585     2837              %LOCK (G=MM_CGLOCK);

   2838  0 000743   000006 630400 1                  EPPR0   6
         0 000744   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000745   000000 701000 xent               TSX1    HFC$LOCK
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:72   
         0 000746   000000 011000                    NOP     0

      586     2840    1         IF NOT (B$CGPT.CTRL(VPNO) & %PGINMEM) THEN

   2840  0 000747   000000 470400 xsym               LDP0    B$CGPT$
         0 000750   200020 720100                    LXL0    VPNO,,AUTO
         0 000751   000000 236110                    LDQ     0,X0,PR0
         0 000752   000036 736000                    QLS     30
         0 000753   400000 376003                    ANQ     -131072,DU
         0 000754   000761 601000 0                  TNZ     s:2845

      587     2841    2           DO;

      588     2842    2           ERR = %E$CGNOTALLOC;

   2842  0 000755   001173 235007                    LDA     635,DL
         0 000756   200005 471500                    LDP1    @ERR,,AUTO
         0 000757   100000 755100                    STA     0,,PR1

      589     2843    2           GOTO UNLALT;

   2843  0 000760   000677 710000 0                  TRA     UNLALT

      590     2844    2           END;
      591     2845    1         B$CGPT.CTRL(VPNO) = B$CGPT.CTRL(VPNO) & (~(%PGINMEM|%PGIOM|%PGWRITE));

   2845  0 000761   000000 236110                    LDQ     0,X0,PR0
         0 000762   000036 736000                    QLS     30
         0 000763   130000 376003                    ANQ     45056,DU
         0 000764   000036 772000                    QRL     30
         0 000765   000000 676110                    ERQ     0,X0,PR0
         0 000766   000077 376007                    ANQ     63,DL
         0 000767   000000 656110                    ERSQ    0,X0,PR0

      592     2846    1         CALL HFC$ASSOCCLR(%CGWSQ,VPNO,1);

   2846  0 000770   000001 236000 1                  LDQ     1
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:73   
         0 000771   200026 756100                    STQ     VPNO+6,,AUTO
         0 000772   200020 630500                    EPPR0   VPNO,,AUTO
         0 000773   200025 450500                    STP0    VPNO+5,,AUTO
         0 000774   000011 236000 1                  LDQ     9
         0 000775   200024 756100                    STQ     VPNO+4,,AUTO
         0 000776   200024 630500                    EPPR0   VPNO+4,,AUTO
         0 000777   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 001000   000000 701000 xent               TSX1    HFC$ASSOCCLR
         0 001001   000000 011000                    NOP     0

      593     2847    1         MM$CGQD.UPPC=MM$CGQD.UPPC-1;

   2847  0 001002   000000 470400 xsym               LDP0    MM_CGQD$
         0 001003   000001 336007                    LCQ     1,DL
         0 001004   000001 056100                    ASQ     1,,PR0

      594     2848    1         MM$CGQD.FPPC=MM$CGQD.FPPC+1;

   2848  0 001005   000000 054100                    AOS     0,,PR0

      595     2849    1         GOTO UNLRET;

   2849  0 001006   000311 710000 0                  TRA     UNLRET

      596     2850        /**/
      597     2851        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:74   
      598     2852        /**/
      599     2853        /*F* NAME:         MMQ$RECON
      600     2854             PURPOSE:      To reconstruct a comgroup descriptor segment
      601     2855             INPUT:        PGTBL$  -   an ASR-relative page pointer
      602     2856                           KQ$DSB  -   the current descriptor segment
      603     2857             OUTPUT:       ERR - error code if ALTRET, else PP#.
      604     2858             DESCRIPTION:  This routine is used when a comgroup is being
      605     2859                           re-opened.  An inited descriptor segment is
      606     2860                           allocated to the comgroup before we are called
      607     2861                           the first time.
      608     2862
      609     2863                           Every time the open process encounters a page
      610     2864                           that the comgroup owned, it calls us, passing
      611     2865                           the DSB, and what used to be the pointer to
      612     2866                           the page.  Our job is to make the descriptor
      613     2867                           segment and the page table be such that the
      614     2868                           passed pointer is now valid.
      615     2869
      616     2870                           This involves getting a physical page, and
      617     2871                           mapping it in appropriately.  If necessary,
      618     2872                           a new chunk of page table is allocated and
      619     2873                           the correct descriptor made to point to
      620     2874                           it.
      621     2875
      622     2876                           When we return, the open process may now
      623     2877                           read the page out of the file into the
      624     2878                           page we allocated.
      625     2879
      626     2880                           If anything goes wrong (e.g. we cannot
      627     2881                           get memory), we ALTRET with ERR set.
      628     2882                           If the request is invalid, we SNAP and
      629     2883                           then ALTRET with ERR set.
      630     2884        */
      631     2885    1   MMQ$RECON: ENTRY(PGTBL$,KQ$DSB,ERR) ALTRET;

   2885  0 001007   000000 700200 xent  MMQ$RECON    TSX0  ! X66_AUTO_3
         0 001010   000032 000003                    ZERO    26,3
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:75   

      632     2886        /**/
      633     2887    1         IF (BITBIN(PGTBL_PTR.SEGID) < BITBIN(%AS0SID))

   2887  0 001011   200003 470500                    LDP0    @PGTBL$,,AUTO
         0 001012   000000 236100                    LDQ     0,,PR0
         0 001013   007777 376007                    ANQ     4095,DL
         0 001014   004000 116007                    CMPQ    2048,DL
         0 001015   001024 602000 0                  TNC     s:2891
         0 001016   004032 116007                    CMPQ    2074,DL
         0 001017   001024 603000 0                  TRC     s:2891
         0 001020   000000 236100                    LDQ     0,,PR0
         0 001021   776000 376003                    ANQ     -1024,DU
         0 001022   024000 116003                    CMPQ    10240,DU
         0 001023   001032 602000 0                  TNC     s:2895

      634     2888    1         OR (BITBIN(PGTBL_PTR.SEGID) > (BITBIN(%AS0SID) + KQM_MDPC#))
      635     2889    1         OR (PGTBL_PTR.PGNO >= %CGQ_CHUNK_SIZE) THEN
      636     2890    2           DO;

      637     2891    2           ERR = %E$BADCGPTR;

   2891  0 001024   001172 235007                    LDA     634,DL
         0 001025   200005 471500                    LDP1    @ERR,,AUTO
         0 001026   100000 755100                    STA     0,,PR1

      638     2892    2           CALL SC_MM41;

   2892  0 001027   000000 713400 xsym               CLIMB   SC_MM41
         0 001030   000000 600000 xsid               climb   nvectors=         0

      639     2893    2           ALTRETURN;

   2893  0 001031   000000 702200 xent               TSX2  ! X66_AALT

      640     2894    2           END;
      641     2895    1         K = BITBIN(PGTBL_PTR.SEGID) - BITBIN(%AS0SID);
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:76   

   2895  0 001032   000000 236100                    LDQ     0,,PR0
         0 001033   007777 376007                    ANQ     4095,DL
         0 001034   004000 136007                    SBLQ    2048,DL
         0 001035   200011 756100                    STQ     K,,AUTO

      642     2896              %LOCK (G=MM_CGLOCK);

   2897  0 001036   000006 630400 1                  EPPR0   6
         0 001037   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001040   000000 701000 xent               TSX1    HFC$LOCK
         0 001041   000000 011000                    NOP     0

      643     2899    1         IF NOT KQ$DSB.DESC.FLGR.PRESENT(K) THEN

   2899  0 001042   200011 235100                    LDA     K,,AUTO
         0 001043   000001 735000                    ALS     1
         0 001044   200004 470500                    LDP0    @KQ$DSB,,AUTO
         0 001045   000002 236105                    LDQ     2,AL,PR0
         0 001046   000200 316007                    CANQ    128,DL
         0 001047   001062 601000 0                  TNZ     s:2907

      644     2900    2           DO;

      645     2901    2           CALL GETCHUNK ALTRET(UNLALT);

   2901  0 001050   001414 701000 0                  TSX1    GETCHUNK
         0 001051   000677 702000 0                  TSX2    UNLALT

      646     2902    2           CALL FRAMECHUNK;

   2902  0 001052   001502 701000 0                  TSX1    FRAMECHUNK
         0 001053   000000 011000                    NOP     0

      647     2903    2           VPNO = CHUNKPG# + PGTBL_PTR.PGNO;

   2903  0 001054   200003 470500                    LDP0    @PGTBL$,,AUTO
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:77   
         0 001055   000000 236100                    LDQ     0,,PR0
         0 001056   000034 772000                    QRL     28
         0 001057   200006 036100                    ADLQ    CHUNKPG#,,AUTO
         0 001060   200020 756100                    STQ     VPNO,,AUTO

      648     2904    2           END;

   2904  0 001061   001111 710000 0                  TRA     s:2925

      649     2905    1         ELSE
      650     2906    2           DO;

      651     2907    2           CHUNKPG# = (KQ$DSB.DESC.BASE(K) / 4096) - %CGCTXTLO;

   2907  0 001062   000003 236105                    LDQ     3,AL,PR0
         0 001063   000014 772000                    QRL     12
         0 001064   200006 756100                    STQ     CHUNKPG#,,AUTO

      652     2908    2           VPNO = CHUNKPG# + PGTBL_PTR.PGNO;

   2908  0 001065   200003 471500                    LDP1    @PGTBL$,,AUTO
         0 001066   100000 236100                    LDQ     0,,PR1
         0 001067   000034 772000                    QRL     28
         0 001070   200006 036100                    ADLQ    CHUNKPG#,,AUTO
         0 001071   200020 756100                    STQ     VPNO,,AUTO

      653     2909    2           IF B$CGPT.CTRL(VPNO) & %PGINMEM THEN

   2909  0 001072   000000 473400 xsym               LDP3    B$CGPT$
         0 001073   300000 236106                    LDQ     0,QL,PR3
         0 001074   000036 736000                    QLS     30
         0 001075   400000 376003                    ANQ     -131072,DU
         0 001076   001111 600000 0                  TZE     s:2925

      654     2910    3             DO;

      655     2911                  %UNLOCK (G=MM_CGLOCK);
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:78   

   2912  0 001077   000006 630400 1                  EPPR0   6
         0 001100   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001101   000000 701000 xent               TSX1    HFC$UNLOCK
         0 001102   000000 011000                    NOP     0

      656     2914    3             CALL SC_MM41;

   2914  0 001103   000000 713400 xsym               CLIMB   SC_MM41
         0 001104   000000 600000 xsid               climb   nvectors=         0

      657     2915        /*S* SCREECH_CODE: MMQ-S$MM41
      658     2916             TYPE:         SNAP
      659     2917             MESSAGE:      Invalid request to MMQ$RECON
      660     2918             REMARKS:      Something is wrong with the MMQ$RECON request.
      661     2919                           Either the passed pointer is invalid, or the
      662     2920                           desired page is already mapped to something. */
      663     2921    3             ERR=%E$BADCGPTE;

   2921  0 001105   001205 235007                    LDA     645,DL
         0 001106   200005 470500                    LDP0    @ERR,,AUTO
         0 001107   000000 755100                    STA     0,,PR0

      664     2922    3             ALTRETURN;

   2922  0 001110   000000 702200 xent               TSX2  ! X66_AALT

      665     2923    3             END;
      666     2924    2           END;
      667     2925    1         PPNO=B$CGPT.RPN(VPNO);

   2925  0 001111   000000 470400 xsym               LDP0    B$CGPT$
         0 001112   200020 720100                    LXL0    VPNO,,AUTO
         0 001113   000000 236110                    LDQ     0,X0,PR0
         0 001114   000022 772000                    QRL     18
         0 001115   200017 756100                    STQ     PPNO,,AUTO

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:79   
      668     2926    2         IF PPNO ~= MM_FPMC.RPN THEN DO;

   2926  0 001116   000000 236000 xsym               LDQ     MM_FPMC
         0 001117   000022 772000                    QRL     18
         0 001120   200017 116100                    CMPQ    PPNO,,AUTO
         0 001121   001133 600000 0                  TZE     s:2931

      669     2927    2           IF HW_WSQ0PT THEN

   2927  0 001122   000000 234000 xsym               SZN     HW_WSQ0PT
         0 001123   001132 605000 0                  TPL     s:2929

      670     2928    2            PPNO=B$IPHYMAP$->MM$IPHY_MAP(PPNO);

   2928  0 001124   200017 235100                    LDA     PPNO,,AUTO
         0 001125   000001 735000                    ALS     1
         0 001126   000000 471400 xsym               LDP1    B$IPHYMAP$
         0 001127   000100 101505                    MRL     fill='000'O
         0 001130   100000 000002                    ADSC9   0,A,PR1                  cn=0,n=2
         0 001131   200017 000004                    ADSC9   PPNO,,AUTO               cn=0,n=4

      671     2929    2           GOTO GCDP50;

   2929  0 001132   000623 710000 0                  TRA     GCDP50

      672     2930    2           END;
      673     2931    1         GOTO GCDP40;

   2931  0 001133   000541 710000 0                  TRA     GCDP40

      674     2932        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:80   
      675     2933        /**/
      676     2934        /*F* NAME:         MMQ$TRUNCDSB
      677     2935             PURPOSE:      To strip a descriptor segment of its page
      678     2936                           table chunks
      679     2937             INPUT:        KQ$DSB - the descriptor segment
      680     2938                           MM gate locked
      681     2939             DESCRIPTION:  For each descriptor in the segment, we check to
      682     2940                           see if it owns a page table chunk.  If so and
      683     2941                           all the pages in that chunk are deallocated,
      684     2942                           the chunk is released to the 'free' chain,
      685     2943                           else nothing is done.
      686     2944
      687     2945                           If any descriptor is found with an allocated
      688     2946                           page, we ALTRET with ERR set (this is for
      689     2947                           the benifit of KQM$SHUTDOWN but is of no
      690     2948                           interest to KQM$TRUNCDSBS).
      691     2949        */
      692     2950    1   MMQ$TRUNCDSB: ENTRY (PGTBL$,KQ$DSB,ERR) ALTRET;

   2950  0 001134   000000 700200 xent  MMQ$TRUNCDSB TSX0  ! X66_AUTO_3
         0 001135   000032 000003                    ZERO    26,3

      693     2951        /**/
      694     2952    1         CALL TRUNCDSB ALTRET(ALTRT);

   2952  0 001136   001152 701000 0                  TSX1    TRUNCDSB
         0 001137   000703 702000 0                  TSX2    ALTRT

      695     2953    1         RETURN;

   2953  0 001140   000000 702200 xent               TSX2  ! X66_ARET

      696     2954        /**/
      697     2955        /*F* NAME:         MMQ$TRUNCDSBL
      698     2956             DESCRIPTION:  Same as MMQ$TRUNCDSB except locks & unlocks
      699     2957                           MM_CGLOCK around the procedure.
      700     2958        */
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:81   
      701     2959    1   MMQ$TRUNCDSBL: ENTRY (PGTBL$,KQ$DSB,ERR) ALTRET;

   2959  0 001141   000000 700200 xent  MMQ$TRUNCDS* TSX0  ! X66_AUTO_3
         0 001142   000032 000003                    ZERO    26,3

      702     2960        /**/
      703     2961              %LOCK (G=MM_CGLOCK);

   2962  0 001143   000006 630400 1                  EPPR0   6
         0 001144   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001145   000000 701000 xent               TSX1    HFC$LOCK
         0 001146   000000 011000                    NOP     0

      704     2964    1         CALL TRUNCDSB ALTRET(UNLALT);

   2964  0 001147   001152 701000 0                  TSX1    TRUNCDSB
         0 001150   000677 702000 0                  TSX2    UNLALT

      705     2965    1         GOTO UNLRET;

   2965  0 001151   000311 710000 0                  TRA     UNLRET

      706     2966        /**/
      707     2967    1   TRUNCDSB: PROC ALTRET;

   2967  0 001152   200022 741300       TRUNCDSB     STX1  ! VPNO+2,,AUTO

      708     2968        /**/
      709     2969    2         PTSLOT.K=0;

   2969  0 001153   200012 450100                    STZ     PTSLOT,,AUTO

      710     2970    3           DO K = 0 TO KQM_MDPC#;

   2970  0 001154   200011 450100                    STZ     K,,AUTO

      711     2971    3           IF KQ$DSB.DESC.FLGR.PRESENT(K) THEN
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:82   

   2971  0 001155   200011 235100                    LDA     K,,AUTO
         0 001156   000001 735000                    ALS     1
         0 001157   200004 470500                    LDP0    @KQ$DSB,,AUTO
         0 001160   000002 236105                    LDQ     2,AL,PR0
         0 001161   000200 316007                    CANQ    128,DL
         0 001162   001256 600000 0                  TZE     s:2995

      712     2972    4             DO;

      713     2973    4             CHUNKPG# = (KQ$DSB.DESC.BASE(K) / 4096) - %CGCTXTLO;

   2973  0 001163   000003 236105                    LDQ     3,AL,PR0
         0 001164   000014 772000                    QRL     12
         0 001165   200006 756100                    STQ     CHUNKPG#,,AUTO

      714     2974    4             J=0;

   2974  0 001166   200010 450100                    STZ     J,,AUTO

      715     2975    5               DO VPNO = CHUNKPG# TO (CHUNKPG# + %CGQ_CHUNK_SIZE - 1);

   2975  0 001167   200020 756100                    STQ     VPNO,,AUTO
         0 001170   001204 710000 0                  TRA     s:2978+3

      716     2976    5               IF (B$CGPT.CTRL(VPNO) & %PGINMEM) THEN

   2976  0 001171   000000 470400 xsym               LDP0    B$CGPT$
         0 001172   200020 720100                    LXL0    VPNO,,AUTO
         0 001173   000000 236110                    LDQ     0,X0,PR0
         0 001174   000036 736000                    QLS     30
         0 001175   400000 376003                    ANQ     -131072,DU
         0 001176   001201 600000 0                  TZE     s:2978

      717     2977    5                J=-1;

   2977  0 001177   000001 335007                    LCA     1,DL
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:83   
         0 001200   200010 755100                    STA     J,,AUTO

      718     2978    5               END;

   2978  0 001201   200020 235100                    LDA     VPNO,,AUTO
         0 001202   000001 035007                    ADLA    1,DL
         0 001203   200020 755100                    STA     VPNO,,AUTO
         0 001204   200006 236100                    LDQ     CHUNKPG#,,AUTO
         0 001205   000011 036007                    ADLQ    9,DL
         0 001206   200020 116100                    CMPQ    VPNO,,AUTO
         0 001207   001171 603000 0                  TRC     s:2976

      719     2979    4             IF J = 0 THEN

   2979  0 001210   200010 235100                    LDA     J,,AUTO
         0 001211   001254 601000 0                  TNZ     s:2993

      720     2980    5               DO;

      721     2981    5               J=CHUNKPG#/%CGQ_CHUNK_SIZE;

   2981  0 001212   200006 236100                    LDQ     CHUNKPG#,,AUTO
         0 001213   000001 772000                    QRL     1
         0 001214   000005 506007                    DIV     5,DL
         0 001215   200010 756100                    STQ     J,,AUTO

      722     2982    5               B$CGPT.VLINK(CHUNKPG#)=0;

   2982  0 001216   000000 470400 xsym               LDP0    B$CGPT$
         0 001217   200006 720100                    LXL0    CHUNKPG#,,AUTO
         0 001220   000012 236000 1                  LDQ     10
         0 001221   000000 356110                    ANSQ    0,X0,PR0

      723     2983    5               IF MM$CGQD.BCHUNK.TAIL ~= 0 THEN

   2983  0 001222   000000 470400 xsym               LDP0    MM_CGQD$
         0 001223   000006 235100                    LDA     6,,PR0
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:84   
         0 001224   001240 600000 0                  TZE     s:2988

      724     2984    6                 DO;

      725     2985    6                 I=MM$CGQD.BCHUNK.TAIL*%CGQ_CHUNK_SIZE;

   2985  0 001225   000006 236100                    LDQ     6,,PR0
         0 001226   000012 402007                    MPY     10,DL
         0 001227   200007 756100                    STQ     I,,AUTO

      726     2986    6                 B$CGPT.VLINK(I)=J;

   2986  0 001230   000000 471400 xsym               LDP1    B$CGPT$
         0 001231   000000 621006                    EAX1    0,QL
         0 001232   200010 236100                    LDQ     J,,AUTO
         0 001233   000010 736000                    QLS     8
         0 001234   100000 676111                    ERQ     0,X1,PR1
         0 001235   777400 376007                    ANQ     -256,DL
         0 001236   100000 656111                    ERSQ    0,X1,PR1

      727     2987    6                 END;

   2987  0 001237   001242 710000 0                  TRA     s:2989

      728     2988    5               ELSE MM$CGQD.BCHUNK.HEAD=J;

   2988  0 001240   200010 235100                    LDA     J,,AUTO
         0 001241   000005 755100                    STA     5,,PR0

      729     2989    5               MM$CGQD.BCHUNK.TAIL=J;

   2989  0 001242   200010 235100                    LDA     J,,AUTO
         0 001243   000006 755100                    STA     6,,PR0

      730     2990    5               MM$CGQD.BCHUNK.COUNT=MM$CGQD.BCHUNK.COUNT+1;

   2990  0 001244   000007 054100                    AOS     7,,PR0
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:85   

      731     2991    5               KQ$DSB.DESC.FLGR.PRESENT(K)='0'B;

   2991  0 001245   200011 236100                    LDQ     K,,AUTO
         0 001246   000001 736000                    QLS     1
         0 001247   200004 471500                    LDP1    @KQ$DSB,,AUTO
         0 001250   000000 621006                    EAX1    0,QL
         0 001251   000013 236000 1                  LDQ     11
         0 001252   100002 356111                    ANSQ    2,X1,PR1

      732     2992    5               END;

   2992  0 001253   001256 710000 0                  TRA     s:2995

      733     2993    4             ELSE PTSLOT.K=1;

   2993  0 001254   000001 235007                    LDA     1,DL
         0 001255   200012 755100                    STA     PTSLOT,,AUTO

      734     2994    4             END;

      735     2995    3           END;

   2995  0 001256   200011 054100                    AOS     K,,AUTO
         0 001257   200011 235100                    LDA     K,,AUTO
         0 001260   000031 115007                    CMPA    25,DL
         0 001261   001155 604400 0                  TMOZ    s:2971

      736     2996    2         IF PTSLOT.K ~= 0 THEN

   2996  0 001262   200012 236100                    LDQ     PTSLOT,,AUTO
         0 001263   001271 600000 0                  TZE     s:3004

      737     2997    3           DO;

      738     2998    3           ERR=%E$CGDNMT;

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:86   
   2998  0 001264   001206 235007                    LDA     646,DL
         0 001265   200005 470500                    LDP0    @ERR,,AUTO
         0 001266   000000 755100                    STA     0,,PR0

      739     2999        /*E* ERROR:        MMQ-E$CGDNMT-E
      740     3000             MESSAGE:      The passed descriptor segment is not empty
      741     3001        */
      742     3002    3           ALTRETURN;

   3002  0 001267   200022 221300                    LDX1  ! VPNO+2,,AUTO
         0 001270   000000 702211                    TSX2  ! 0,X1

      743     3003    3           END;
      744     3004    2         RETURN;

   3004  0 001271   200022 221300                    LDX1  ! VPNO+2,,AUTO
         0 001272   000001 702211                    TSX2  ! 1,X1

      745     3005    2   END TRUNCDSB;
      746     3006        /**/
      747     3007        /*F* NAME:         MMQ$ZAPCPUS
      748     3008             PURPOSE:      To clear cache an PTWAM on all CPUS other than
      749     3009                           ours.
      750     3010             CALL:         MMQ$ZAPCPUS
      751     3011             DESCRIPTION:  Calls HFA$CLEARCPU, gated by MM_CGLOCK
      752     3012        */
      753     3013    1   MMQ$ZAPCPUS: ENTRY ALTRET; /* !!Doesn't ALTRET!! */

   3013  0 001273   000000 700200 xent  MMQ$ZAPCPUS  TSX0  ! X66_AUTO_3
         0 001274   000032 000003                    ZERO    26,3

      754     3014        /**/
      755     3015              %LOCK (G=MM_CGLOCK);

   3016  0 001275   000006 630400 1                  EPPR0   6
         0 001276   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001277   000000 701000 xent               TSX1    HFC$LOCK
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:87   
         0 001300   000000 011000                    NOP     0

      756     3018    1         CALL HFA$CLEARCPU;

   3018  0 001301   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 001302   000000 701000 xent               TSX1    HFA$CLEARCPU
         0 001303   000000 011000                    NOP     0

      757     3019    1         GOTO UNLRET;

   3019  0 001304   000311 710000 0                  TRA     UNLRET

      758     3020        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:88   
      759     3021        /**/
      760     3022        /*F* NAME:         MMQ$TRUNCPT
      761     3023             PURPOSE:      To release unused comgroup physical pages
      762     3024             DESCRIPTION:  When a comgroup releases a page, the physical
      763     3025                           page is left in the page table and not released.
      764     3026
      765     3027                           We are called here when the system needs memory,
      766     3028                           to actually release any such pages.
      767     3029
      768     3030                           After we're done, all CPUs get their PTWAMs
      769     3031                           cleared.
      770     3032
      771     3033        */
      772     3034    1   MMQ$TRUNCPT: ENTRY ALTRET; /* !!Doesn't ALTRET!! */

   3034  0 001305   000000 700200 xent  MMQ$TRUNCPT  TSX0  ! X66_AUTO_3
         0 001306   000032 000003                    ZERO    26,3

      773     3035        /**/
      774     3036              %LOCK (G=MM_CGLOCK);

   3037  0 001307   000006 630400 1                  EPPR0   6
         0 001310   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001311   000000 701000 xent               TSX1    HFC$LOCK
         0 001312   000000 011000                    NOP     0

      775     3039    2           DO VPNO = MM_CGQPHS TO MM_CGQPHE;

   3039  0 001313   000000 235000 xsym               LDA     MM_CGQPHS
         0 001314   200020 755100                    STA     VPNO,,AUTO
         0 001315   001362 710000 0                  TRA     s:3051+3

      776     3040    2           IF NOT (B$CGPT.CTRL(VPNO) & %PGINMEM) THEN

   3040  0 001316   000000 470400 xsym               LDP0    B$CGPT$
         0 001317   200020 720100                    LXL0    VPNO,,AUTO
         0 001320   000000 236110                    LDQ     0,X0,PR0
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:89   
         0 001321   000036 736000                    QLS     30
         0 001322   400000 376003                    ANQ     -131072,DU
         0 001323   001357 601000 0                  TNZ     s:3051

      777     3041    2            IF B$CGPT.RPN(VPNO) ~= MM_FPMC.RPN THEN

   3041  0 001324   000000 221110                    LDX1    0,X0,PR0
         0 001325   000000 101000 xsym               CMPX1   MM_FPMC
         0 001326   001357 600000 0                  TZE     s:3051

      778     3042    3              DO;

      779     3043    3              IF HW_WSQ0PT THEN

   3043  0 001327   000000 234000 xsym               SZN     HW_WSQ0PT
         0 001330   001341 605000 0                  TPL     s:3046

      780     3044    3               PPNO=B$IPHYMAP$->MM$IPHY_MAP(B$CGPT.RPN(VPNO));

   3044  0 001331   000000 236110                    LDQ     0,X0,PR0
         0 001332   000022 772000                    QRL     18
         0 001333   000001 736000                    QLS     1
         0 001334   000000 471400 xsym               LDP1    B$IPHYMAP$
         0 001335   000100 101506                    MRL     fill='000'O
         0 001336   100000 000002                    ADSC9   0,Q,PR1                  cn=0,n=2
         0 001337   200017 000004                    ADSC9   PPNO,,AUTO               cn=0,n=4
         0 001340   001344 710000 0                  TRA     s:3047

      781     3045    3              ELSE
      782     3046    3               PPNO=B$CGPT.RPN(VPNO);

   3046  0 001341   000000 236110                    LDQ     0,X0,PR0
         0 001342   000022 772000                    QRL     18
         0 001343   200017 756100                    STQ     PPNO,,AUTO

      783     3047    3              B$CGPT.RPN(VPNO)=MM_FPMC.RPN;

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:90   
   3047  0 001344   000000 221000 xsym               LDX1    MM_FPMC
         0 001345   000000 741110                    STX1    0,X0,PR0

      784     3048    3              MM$CGQD.FPPC=MM$CGQD.FPPC-1;

   3048  0 001346   000000 470400 xsym               LDP0    MM_CGQD$
         0 001347   000001 336007                    LCQ     1,DL
         0 001350   000000 056100                    ASQ     0,,PR0

      785     3049    3              CALL MMB$FPP (PPNO);

   3049  0 001351   200017 631500                    EPPR1   PPNO,,AUTO
         0 001352   200024 451500                    STP1    VPNO+4,,AUTO
         0 001353   200024 630500                    EPPR0   VPNO+4,,AUTO
         0 001354   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001355   000000 701000 xent               TSX1    MMB$FPP
         0 001356   000000 011000                    NOP     0

      786     3050    3              END;

      787     3051    2           END;

   3051  0 001357   200020 235100                    LDA     VPNO,,AUTO
         0 001360   000001 035007                    ADLA    1,DL
         0 001361   200020 755100                    STA     VPNO,,AUTO
         0 001362   000000 236000 xsym               LDQ     MM_CGQPHE
         0 001363   200020 116100                    CMPQ    VPNO,,AUTO
         0 001364   001316 603000 0                  TRC     s:3040

      788     3052    1         CALL HFA$CLEARCPU;

   3052  0 001365   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 001366   000000 701000 xent               TSX1    HFA$CLEARCPU
         0 001367   000000 011000                    NOP     0

      789     3053    1         CALL HFC$ASSOCCLR(%CGWSQ,MM_CGQPHS,MM_CGQPHE-MM_CGQPHS+1);

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:91   
   3053  0 001370   000000 236000 xsym               LDQ     MM_CGQPHE
         0 001371   000000 136000 xsym               SBLQ    MM_CGQPHS
         0 001372   000001 036007                    ADLQ    1,DL
         0 001373   200024 756100                    STQ     VPNO+4,,AUTO
         0 001374   200024 630500                    EPPR0   VPNO+4,,AUTO
         0 001375   200027 450500                    STP0    VPNO+7,,AUTO
         0 001376   000014 236000 1                  LDQ     12
         0 001377   200026 756100                    STQ     VPNO+6,,AUTO
         0 001400   000011 236000 1                  LDQ     9
         0 001401   200025 756100                    STQ     VPNO+5,,AUTO
         0 001402   200025 630500                    EPPR0   VPNO+5,,AUTO
         0 001403   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 001404   000000 701000 xent               TSX1    HFC$ASSOCCLR
         0 001405   000000 011000                    NOP     0

      790     3054    1         MM_CGTCNT.PT=MM_CGTCNT.PT+1;

   3054  0 001406   000001 054000 xsym               AOS     MM_CGTCNT+1

      791     3055              %UNLOCK (G=MM_CGLOCK);

   3056  0 001407   000006 630400 1                  EPPR0   6
         0 001410   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001411   000000 701000 xent               TSX1    HFC$UNLOCK
         0 001412   000000 011000                    NOP     0

      792     3058    1         RETURN;

   3058  0 001413   000000 702200 xent               TSX2  ! X66_ARET

      793     3059        %EJECT;
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:92   
      794     3060        /**/
      795     3061        /******************************************************************************
      796     3062        *                                                                             *
      797     3063        *  SSS   U   U  BBBB   RRRR    OOO   U   U  TTTTT   III   N   N  EEEEE   SSS  *
      798     3064        * S   S  U   U  B   B  R   R  O O O  U   U    T      I    N   N  E      S   S *
      799     3065        * S      U   U  B   B  R   R  O O O  U   U    T      I    NN  N  E      S     *
      800     3066        *  SSS   U   U  BBBB   RRRR   O  OO  U   U    T      I    N N N  EEEE    SSS  *
      801     3067        *     S  U   U  B   B  R R    O   O  U   U    T      I    N  NN  E          S *
      802     3068        * S   S  U   U  B   B  R  R   O   O  U   U    T      I    N   N  E      S   S *
      803     3069        *  SSS    UUU   BBBB   R   R   OOO    UUU     T     III   N   N  EEEEE   SSS  *
      804     3070        *                                                                             *
      805     3071        ******************************************************************************/
      806     3072
      807     3073        /********************************************************************
      808     3074        *********************************************************************/
      809     3075        /*D* NAME:         GETCHUNK
      810     3076             PURPOSE:      To allocate a new chunk of the CG page table
      811     3077             INPUT:        MM gate locked
      812     3078             DESCRIPTION:  If there is a free page table chunk then
      813     3079                           it is allocated, and the free chain updated.
      814     3080                           Returns CHUNKPG# as the page # in the page table
      815     3081                           of the first page of the chunk.
      816     3082
      817     3083                           Else all comgroups are examined, and stripped
      818     3084                           of any unused page table chunks.  If this makes
      819     3085                           some free then the entire held-back list of
      820     3086                           chunks is made truly free and we use one of
      821     3087                           them, after clearing the PTWAM on all CPUs.
      822     3088
      823     3089                           Else ALTRETs with ERR set.
      824     3090
      825     3091                           All returns leave MM gate locked.
      826     3092        */
      827     3093    1   GETCHUNK: PROC ALTRET;

   3093  0 001414   200022 741300       GETCHUNK     STX1  ! VPNO+2,,AUTO

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:93   
      828     3094        /**/
      829     3095    2         IF MM$CGQD.FCHUNK.HEAD = 0 THEN

   3095  0 001415   000000 470400 xsym               LDP0    MM_CGQD$
         0 001416   000002 235100                    LDA     2,,PR0
         0 001417   001454 601000 0                  TNZ     GC10

      830     3096    3           DO;

      831     3097                          /*    Try to get some back
      832     3098                           *    from other comgroups
      833     3099                           */
      834     3100    3           CALL KQM$TRUNCDSBS;

   3100  0 001420   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 001421   000000 701000 xent               TSX1    KQM$TRUNCDSBS
         0 001422   000000 011000                    NOP     0

      835     3101                          /*    If there's anything
      836     3102                           *    on the held-back chain,
      837     3103                           *    then merge it into
      838     3104                           *    the truly-free chain,
      839     3105                           *    and zap everyone's PTWAM.
      840     3106                           */
      841     3107    3           IF MM$CGQD.BCHUNK.COUNT ~= 0 THEN

   3107  0 001423   000000 470400 xsym               LDP0    MM_CGQD$
         0 001424   000007 235100                    LDA     7,,PR0
         0 001425   001447 600000 0                  TZE     s:3122

      842     3108    4             DO;

      843     3109    4             MM$CGQD.FCHUNK.HEAD  =MM$CGQD.BCHUNK.HEAD;

   3109  0 001426   000005 235100                    LDA     5,,PR0
         0 001427   000002 755100                    STA     2,,PR0

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:94   
      844     3110    4             MM$CGQD.FCHUNK.TAIL  =MM$CGQD.BCHUNK.TAIL;

   3110  0 001430   000006 235100                    LDA     6,,PR0
         0 001431   000003 755100                    STA     3,,PR0

      845     3111    4             MM$CGQD.FCHUNK.COUNT =MM$CGQD.BCHUNK.COUNT;

   3111  0 001432   000007 235100                    LDA     7,,PR0
         0 001433   000004 755100                    STA     4,,PR0

      846     3112    4             MM$CGQD.BCHUNK.HEAD =0;

   3112  0 001434   000005 450100                    STZ     5,,PR0

      847     3113    4             MM$CGQD.BCHUNK.TAIL =0;

   3113  0 001435   000006 450100                    STZ     6,,PR0

      848     3114    4             MM$CGQD.BCHUNK.COUNT=0;

   3114  0 001436   000007 450100                    STZ     7,,PR0

      849     3115    4             CALL HFA$CLEARCPU;

   3115  0 001437   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 001440   000000 701000 xent               TSX1    HFA$CLEARCPU
         0 001441   000000 011000                    NOP     0

      850     3116    4             CALL HFC$ASSOCCLR;/* Will clear all of PTWAM - even on DPS90 */

   3116  0 001442   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 001443   000000 701000 xent               TSX1    HFC$ASSOCCLR
         0 001444   000000 011000                    NOP     0

      851     3117    4             MM_CGTCNT.DSBS=MM_CGTCNT.DSBS+1;

   3117  0 001445   000000 054000 xsym               AOS     MM_CGTCNT
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:95   

      852     3118    4             GOTO GC10;

   3118  0 001446   001454 710000 0                  TRA     GC10

      853     3119    4             END;
      854     3120        /*E*    ERROR:  MMQ-E$NOCGDBLK-2
      855     3121                MESSAGE: There are no remaining free comgroup chunks. */
      856     3122    3           ERR = %E$NOCGDBLK;

   3122  0 001447   001171 236007                    LDQ     633,DL
         0 001450   200005 471500                    LDP1    @ERR,,AUTO
         0 001451   100000 756100                    STQ     0,,PR1

      857     3123    3           ALTRETURN;

   3123  0 001452   200022 221300                    LDX1  ! VPNO+2,,AUTO
         0 001453   000000 702211                    TSX2  ! 0,X1

   3123  0 001454                       GC10         null
      858     3124    3           END;
      859     3125    2   GC10: ;
      860     3126    2         CHUNKPG# = MM$CGQD.FCHUNK.HEAD;

   3126  0 001454   000000 470400 xsym               LDP0    MM_CGQD$
         0 001455   000002 235100                    LDA     2,,PR0
         0 001456   200006 755100                    STA     CHUNKPG#,,AUTO

      861     3127    2         MM$CGQD.FCHUNK.HEAD = B$CGPT.VLINK(MM$CGQD.FCHUNK.HEAD*%CGQ_CHUNK_SIZE);

   3127  0 001457   000002 236100                    LDQ     2,,PR0
         0 001460   000012 402007                    MPY     10,DL
         0 001461   000000 471400 xsym               LDP1    B$CGPT$
         0 001462   100000 236106                    LDQ     0,QL,PR1
         0 001463   000010 772000                    QRL     8
         0 001464   001777 376007                    ANQ     1023,DL
         0 001465   000002 756100                    STQ     2,,PR0
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:96   

      862     3128    2         MM$CGQD.FCHUNK.COUNT = MM$CGQD.FCHUNK.COUNT - 1;

   3128  0 001466   000001 336007                    LCQ     1,DL
         0 001467   000004 056100                    ASQ     4,,PR0

      863     3129    2         IF MM$CGQD.FCHUNK.TAIL = CHUNKPG# THEN

   3129  0 001470   000003 236100                    LDQ     3,,PR0
         0 001471   001475 604000 0                  TMI     s:3131
         0 001472   200006 116100                    CMPQ    CHUNKPG#,,AUTO
         0 001473   001475 601000 0                  TNZ     s:3131

      864     3130    2          MM$CGQD.FCHUNK.TAIL = 0;

   3130  0 001474   000003 450100                    STZ     3,,PR0

      865     3131    2         CHUNKPG#=CHUNKPG#*%CGQ_CHUNK_SIZE;

   3131  0 001475   200006 236100                    LDQ     CHUNKPG#,,AUTO
         0 001476   000012 402007                    MPY     10,DL
         0 001477   200006 756100                    STQ     CHUNKPG#,,AUTO

      866     3132    2         RETURN;

   3132  0 001500   200022 221300                    LDX1  ! VPNO+2,,AUTO
         0 001501   000001 702211                    TSX2  ! 1,X1

      867     3133    2   END GETCHUNK;
      868     3134        /********************************************************************
      869     3135        *********************************************************************/
      870     3136        /*D* NAME:         FRAMECHUNK
      871     3137             PURPOSE:      To set a descriptor to frame a chunk
      872     3138             INPUT:        CHUNKPG#   -  first page # in the chunk
      873     3139                           K          -  the number of the descriptor
      874     3140             DESCRIPTION:  Sets the BASE, BOUND, and FLAGS in the descriptor
      875     3141                           appropriately.
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:97   
      876     3142        */
      877     3143    1   FRAMECHUNK: PROC;

   3143  0 001502   200022 741300       FRAMECHUNK   STX1  ! VPNO+2,,AUTO

      878     3144        /**/
      879     3145    2         IF S_NSCPUA ~= 0 THEN

   3145  0 001503   000000 235000 xsym               LDA     S_NSCPUA
         0 001504   001516 600000 0                  TZE     s:3148

      880     3146    2          KQ$DSB.DESC.FLG(K) = (%DSREAD|%DSWRITE|%DSSAVE|%DSNULL|%DSPRESNT);

   3146  0 001505   200011 236100                    LDQ     K,,AUTO
         0 001506   000001 736000                    QLS     1
         0 001507   200004 470500                    LDP0    @KQ$DSB,,AUTO
         0 001510   000000 620006                    EAX0    0,QL
         0 001511   000002 236106                    LDQ     2,QL,PR0
         0 001512   000015 376000 1                  ANQ     13
         0 001513   160600 276007                    ORQ     57728,DL
         0 001514   000002 756110                    STQ     2,X0,PR0
         0 001515   001526 710000 0                  TRA     s:3149

      881     3147    2         ELSE
      882     3148    2          KQ$DSB.DESC.FLG(K) = (%DSREAD|%DSWRITE|%DSSAVE|%DSCACHE|%DSNULL|%DSPRESNT);

   3148  0 001516   200011 236100                    LDQ     K,,AUTO
         0 001517   000001 736000                    QLS     1
         0 001520   200004 470500                    LDP0    @KQ$DSB,,AUTO
         0 001521   000000 620006                    EAX0    0,QL
         0 001522   000002 236106                    LDQ     2,QL,PR0
         0 001523   000015 376000 1                  ANQ     13
         0 001524   170600 276007                    ORQ     61824,DL
         0 001525   000002 756110                    STQ     2,X0,PR0

      883     3149    2         KQ$DSB.DESC.T(K) = 0;

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:98   
   3149  0 001526   000016 236000 1                  LDQ     14
         0 001527   000002 356110                    ANSQ    2,X0,PR0

      884     3150    2         KQ$DSB.DESC.BASE(K) = (CHUNKPG# + %CGCTXTLO) * 4096;

   3150  0 001530   200006 235100                    LDA     CHUNKPG#,,AUTO
         0 001531   000014 735000                    ALS     12
         0 001532   000003 755110                    STA     3,X0,PR0

      885     3151    2         RETURN;

   3151  0 001533   200022 221300                    LDX1  ! VPNO+2,,AUTO
         0 001534   000001 702211                    TSX2  ! 1,X1

      886     3152    2   END FRAMECHUNK;
      887     3153        /********************************************************************
      888     3154        *********************************************************************/
      889     3155        /*D* NAME:         CHKDESC
      890     3156             PURPOSE:      To check a descriptor for available pages
      891     3157             DESCRIPTION:  K is the descriptor number.  It is known
      892     3158                           to possess a page table chunk.
      893     3159
      894     3160                           We examine the chunk for any immediately-available
      895     3161                           pages.  If one is found we ALTRET with VPNO
      896     3162                           the virtual page # and PPNO the physical page
      897     3163                           number, and CHUNKPG# the starting virtual page
      898     3164                           number of the chunk.
      899     3165
      900     3166                           Otherwise, if any non-allocated page table slots
      901     3167                           are found, then if PTSLOT.K = -1 we fill PTSLOT
      902     3168                           with the stuff for that page, and RETURN.
      903     3169
      904     3170                           If nothing is found we return.
      905     3171        */
      906     3172    1   CHKDESC: PROC ALTRET;

   3172  0 001535   200022 741300       CHKDESC      STX1  ! VPNO+2,,AUTO
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:99   

      907     3173        /**/
      908     3174    2         CHUNKPG# = (KQ$DSB.DESC.BASE(K) / 4096) - %CGCTXTLO;

   3174  0 001536   200011 235100                    LDA     K,,AUTO
         0 001537   000001 735000                    ALS     1
         0 001540   200004 470500                    LDP0    @KQ$DSB,,AUTO
         0 001541   000003 236105                    LDQ     3,AL,PR0
         0 001542   000014 772000                    QRL     12
         0 001543   200006 756100                    STQ     CHUNKPG#,,AUTO

      909     3175    3           DO VPNO = CHUNKPG# TO (CHUNKPG# + %CGQ_CHUNK_SIZE - 1);

   3175  0 001544   200020 756100                    STQ     VPNO,,AUTO
         0 001545   001612 710000 0                  TRA     s:3193+3

      910     3176    3           IF NOT (B$CGPT.CTRL(VPNO) & %PGINMEM) THEN

   3176  0 001546   000000 470400 xsym               LDP0    B$CGPT$
         0 001547   200020 720100                    LXL0    VPNO,,AUTO
         0 001550   000000 236110                    LDQ     0,X0,PR0
         0 001551   000036 736000                    QLS     30
         0 001552   400000 376003                    ANQ     -131072,DU
         0 001553   001607 601000 0                  TNZ     s:3193

      911     3177    4             DO;

      912     3178    4             IF B$CGPT.RPN(VPNO) ~= MM_FPMC.RPN THEN

   3178  0 001554   000000 221110                    LDX1    0,X0,PR0
         0 001555   000000 101000 xsym               CMPX1   MM_FPMC
         0 001556   001576 600000 0                  TZE     s:3186

      913     3179    5               DO;

      914     3180    5               IF HW_WSQ0PT THEN

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:100  
   3180  0 001557   000000 234000 xsym               SZN     HW_WSQ0PT
         0 001560   001571 605000 0                  TPL     s:3183

      915     3181    5                PPNO=B$IPHYMAP$->MM$IPHY_MAP(B$CGPT.RPN(VPNO));

   3181  0 001561   000000 236110                    LDQ     0,X0,PR0
         0 001562   000022 772000                    QRL     18
         0 001563   000001 736000                    QLS     1
         0 001564   000000 471400 xsym               LDP1    B$IPHYMAP$
         0 001565   000100 101506                    MRL     fill='000'O
         0 001566   100000 000002                    ADSC9   0,Q,PR1                  cn=0,n=2
         0 001567   200017 000004                    ADSC9   PPNO,,AUTO               cn=0,n=4
         0 001570   001574 710000 0                  TRA     s:3184

      916     3182    5               ELSE
      917     3183    5                PPNO=B$CGPT.RPN(VPNO);

   3183  0 001571   000000 236110                    LDQ     0,X0,PR0
         0 001572   000022 772000                    QRL     18
         0 001573   200017 756100                    STQ     PPNO,,AUTO

      918     3184    5               ALTRETURN;

   3184  0 001574   200022 221300                    LDX1  ! VPNO+2,,AUTO
         0 001575   000000 702211                    TSX2  ! 0,X1

      919     3185    5               END;
      920     3186    4             IF PTSLOT.K = -1 THEN

   3186  0 001576   200012 235100                    LDA     PTSLOT,,AUTO
         0 001577   000027 115000 xsym               CMPA    B_VECTNIL+23
         0 001600   001607 601000 0                  TNZ     s:3193

      921     3187    5               DO;

      922     3188    5               PTSLOT.K=K;

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:101  
   3188  0 001601   200011 236100                    LDQ     K,,AUTO
         0 001602   200012 756100                    STQ     PTSLOT,,AUTO

      923     3189    5               PTSLOT.VPNO=VPNO;

   3189  0 001603   200020 235100                    LDA     VPNO,,AUTO
         0 001604   200013 755100                    STA     PTSLOT+1,,AUTO

      924     3190    5               PTSLOT.CHUNKPG#=CHUNKPG#;

   3190  0 001605   200006 235100                    LDA     CHUNKPG#,,AUTO
         0 001606   200014 755100                    STA     PTSLOT+2,,AUTO

      925     3191    5               END;

      926     3192    4             END;

      927     3193    3           END;

   3193  0 001607   200020 235100                    LDA     VPNO,,AUTO
         0 001610   000001 035007                    ADLA    1,DL
         0 001611   200020 755100                    STA     VPNO,,AUTO
         0 001612   200006 236100                    LDQ     CHUNKPG#,,AUTO
         0 001613   000011 036007                    ADLQ    9,DL
         0 001614   200020 116100                    CMPQ    VPNO,,AUTO
         0 001615   001546 603000 0                  TRC     s:3176

      928     3194    2         RETURN;

   3194  0 001616   200022 221300                    LDX1  ! VPNO+2,,AUTO
         0 001617   000001 702211                    TSX2  ! 1,X1

(unnamed)
 Sect OctLoc
   1     000   000000 006164   000003 006000   000002 006000   000002 006000    ...t............
   1     004   000000 006000   000000 006000   000000 006000   777777 777700    ................
   1     010   000000 000014   000010 006000   777777 000377   777777 777577    ................
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:102  
   1     014   000000 006000   777777 600177   777777 777760                    ............
      929     3195    2   END CHKDESC;
      930     3196    1   END MMQ$INIT;

PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:103  
--  Include file information  --

   SS_CNTRLD_R.:E05TOU  cannot be made into a system file and is referenced.
   SS_CNTRL_R.:E05TOU  cannot be made into a system file and is referenced.
   SS_SCHED_R.:E05TOU  cannot be made into a system file and is referenced.
   B$MAP.:E05TOU  cannot be made into a system file and is referenced.
   HF_LOCK_C.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   MM_MACRO_M.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   MM$SYSGEN.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
   MM_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   KQM_MAC_C.:E05TOU  is referenced.
   KQ_SUBS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure MMQ$INIT.
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:104  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @ERR                       4-0-0/w PTR         r     1 @KQ$DSB
     3-0-0/w PTR         r     1 @PGTBL$                    6-0-0/w UBIN        r     1 CHUNKPG#
    *0-0-0/w UBIN        r     1 ERR                       15-0-0/b BIT         r     1 HKFLG
     7-0-0/w SBIN        r     1 I                         10-0-0/w SBIN        r     1 J
    11-0-0/w SBIN        r     1 K                         *0-0-0/d STRC(1944)  r     1 KQ$DSB
    *0-0-0/w PTR         r     1 PGTBL$                    *0-0-0/w STRC        r     1 PGTBL_PTR
    16-0-0/b BIT (6)     r     1 PGTYPE                    17-0-0/w UBIN        r     1 PPNO
    12-0-0/w STRC(108)   r     1 PTSLOT                    20-0-0/w UBIN        r     1 VPNO

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$CGCTXT$                  0-0-0/w PTR         r     1 B$CGPT$
     0-0-0/w PTR         r     1 B$IPHYMAP$                 0-0-0/w PTR         r     1 B$LS$
     0-0-0/w PTR         r     1 B$PPUT$                    0-0-0/w PTR         r     1 B$WSQ0PT$
     0-0-0/w BIT         r     1 HW_WSQ0PT                  0-0-0/w PTR         r     1 MM_BYP$
     0-0-0/d BIT (72)    r     1 MM_CGLOCK                  0-0-0/w UBIN        r     1 MM_CGQCXT_END
     0-0-0/w PTR         r     1 MM_CGQD$                   0-0-0/w UBIN        r     1 MM_CGQMAP_PGS
     0-0-0/w UBIN        r     1 MM_CGQPHE                  0-0-0/w UBIN        r     1 MM_CGQPHS
     0-0-0/w UBIN        r     1 MM_CGQRES_PGS              0-0-0/w STRC(72)    r     1 MM_CGTCNT
     0-0-0/b STRC        r     1 MM_FPMC                    0-0-0/w UBIN        r     1 S_NSCPUA

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 B$MAP(0:1023)              0-0-0/w STRC(288)   r     1 MM$CGQD
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:105  
     0-0-0/h UBIN(18)    r     1 MM$IPHY_MAP(0:0)
     0-0-0/w STRC        r     1 MM$PPUT(0:0)


   Procedure MMQ$INIT requires 912 words for executable code.
   Procedure MMQ$INIT requires 26 words of local(AUTO) storage.

    No errors detected in file MMQ$CGQ.:E05TSI    .
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:106  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:107  
          MINI XREF LISTING

ALTRT
      2812**LABEL    2606--GOTO     2785--GOTO     2952--CALLALT
B$CGCTXT$
      2387**DCL      2621>>ASSIGN
B$CGPT$
      2386**DCL      2492>>ASSIGN   2493>>ASSIGN   2545>>ASSIGN   2587>>IF       2616>>ASSIGN   2618>>ASSIGN
      2619>>ASSIGN   2670>>ASSIGN   2679>>IF       2679>>IF       2692>>ASSIGN   2693>>ASSIGN   2773>>ASSIGN
      2784>>ASSIGN   2800>>ASSIGN   2802>>ASSIGN   2803>>ASSIGN   2840>>IF       2845>>ASSIGN   2845>>ASSIGN
      2909>>IF       2925>>ASSIGN   2976>>IF       2982>>ASSIGN   2986>>ASSIGN   3040>>IF       3041>>IF
      3044>>ASSIGN   3046>>ASSIGN   3047>>ASSIGN   3127>>ASSIGN   3176>>IF       3178>>IF       3181>>ASSIGN
      3183>>ASSIGN
B$IPHYMAP$
      2391**DCL      2690>>ASSIGN   2928>>ASSIGN   3044>>ASSIGN   3181>>ASSIGN
B$LS$
      2385**DCL      2536<>CALL
B$MAP
      2130**DCL      2492<<ASSIGN
B$MAP.CTRL
      2135**DCL      2619<<ASSIGN   2679>>IF       2679>>IF       2693<<ASSIGN   2773<<ASSIGN   2784<<ASSIGN
      2803<<ASSIGN   2840>>IF       2845<<ASSIGN   2845>>ASSIGN   2909>>IF       2976>>IF       3040>>IF
      3176>>IF
B$MAP.RPN
      2131**DCL      2493<<ASSIGN   2587>>IF       2616<<ASSIGN   2616>>ASSIGN   2618<<ASSIGN   2670>>ASSIGN
      2692<<ASSIGN   2800<<ASSIGN   2800>>ASSIGN   2802<<ASSIGN   2925>>ASSIGN   3041>>IF       3044>>ASSIGN
      3046>>ASSIGN   3047<<ASSIGN   3178>>IF       3181>>ASSIGN   3183>>ASSIGN
B$MAP.SCTRL
      2132**DCL      2133--REDEF
B$MAP.VLINK
      2133**DCL      2545<<ASSIGN   2982<<ASSIGN   2986<<ASSIGN   3127>>ASSIGN
B$PPUT$
      2389**DCL      2612>>ASSIGN   2791>>ASSIGN
B$WSQ0PT$
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:108  
      2390**DCL      2616>>ASSIGN   2800>>ASSIGN
CHKDESC
      3172**PROC     2735--CALL     2766--CALL
CHUNKPG#
      2358**DCL      2526<<ASSIGN   2527<<ASSIGN   2527>>ASSIGN   2528>>IF       2528<<ASSIGN   2529>>ASSIGN
      2530>>ASSIGN   2535>>ASSIGN   2540>>ASSIGN   2542>>ASSIGN   2545>>ASSIGN   2545>>ASSIGN   2546<<ASSIGN
      2546>>ASSIGN   2548>>ASSIGN   2549>>ASSIGN   2746<<ASSIGN   2806>>ASSIGN   2835<<ASSIGN   2836>>ASSIGN
      2903>>ASSIGN   2907<<ASSIGN   2908>>ASSIGN   2973<<ASSIGN   2975>>DOINDEX  2975>>DOINDEX  2981>>ASSIGN
      2982>>ASSIGN   3126<<ASSIGN   3129>>IF       3131<<ASSIGN   3131>>ASSIGN   3150>>ASSIGN   3174<<ASSIGN
      3175>>DOINDEX  3175>>DOINDEX  3190>>ASSIGN
ERR
      2285**DCL       117--PROC     2286--REDEF    2571--ENTRY    2582--ENTRY    2592<<ASSIGN   2605<<ASSIGN
      2641--ENTRY    2652--ENTRY    2663<<ASSIGN   2675<<ASSIGN   2685<<ASSIGN   2726--ENTRY    2756<<ASSIGN
      2783<<ASSIGN   2798<<ASSIGN   2825--ENTRY    2831<<ASSIGN   2842<<ASSIGN   2885--ENTRY    2891<<ASSIGN
      2921<<ASSIGN   2950--ENTRY    2959--ENTRY    2998<<ASSIGN   3122<<ASSIGN
FCP_COMMON
      2657**LABEL    2644--GOTO
FRAMECHUNK
      3143**PROC     2763--CALL     2902--CALL
GC10 IN PROCEDURE GETCHUNK
      3123**LABEL    3118--GOTO
GCDP20
      2733**LABEL    2767--GOTO
GCDP40
      2765**LABEL    2747--GOTO     2931--GOTO
GCDP48
      2778**LABEL    2782--GOTO
GCDP50
      2791**LABEL    2735--CALLALT  2766--CALLALT  2929--GOTO
GCDP51
      2794**LABEL    2792--GOTO
GCP_COMMON
      2586**LABEL    2574--GOTO
GETCHUNK
      3093**PROC     2762--CALL     2901--CALL
GOT_CGP
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:109  
      2596**LABEL    2587--GOTO
GOT_CGP1
      2610**LABEL    2601--GOTO
HFA$CLEARCPU
      2376**DCL-ENT  3018--CALL     3052--CALL     3115--CALL
HFC$ASSOCCLR
      2377**DCL-ENT  2694--CALL     2846--CALL     3053--CALL     3116--CALL
HFC$LOCK
      2088**DCL-ENT  2610--CALL     2668--CALL     2731--CALL     2789--CALL     2838--CALL     2897--CALL
      2962--CALL     3016--CALL     3037--CALL
HFC$UNLOCK
      2088**DCL-ENT  2625--CALL     2775--CALL     2810--CALL     2912--CALL     3056--CALL
HKFLG
      2366**DCL      2573<<ASSIGN   2584<<ASSIGN   2614>>IF       2643<<ASSIGN   2654<<ASSIGN   2679>>IF
      2679>>IF
HW_WSQ0PT
      1356**DCL      2615>>IF       2689>>IF       2799>>IF       2927>>IF       3043>>IF       3180>>IF
I
      2359**DCL      2491<<DOINDEX  2492>>ASSIGN   2493>>ASSIGN   2535<<ASSIGN   2536<>CALL     2544<<DOINDEX
      2586<<DOINDEX  2587>>IF       2616>>ASSIGN   2618>>ASSIGN   2619>>ASSIGN   2621>>ASSIGN   2985<<ASSIGN
      2986>>ASSIGN
J
      2360**DCL      2729<<ASSIGN   2737>>IF       2737<<ASSIGN   2751>>IF       2759>>ASSIGN   2764<<ASSIGN
      2974<<ASSIGN   2977<<ASSIGN   2979>>IF       2981<<ASSIGN   2986>>ASSIGN   2988>>ASSIGN   2989>>ASSIGN
K
      2361**DCL      2537<<ASSIGN   2538>>IF       2539<<ASSIGN   2540<<ASSIGN   2540>>ASSIGN   2541<<ASSIGN
      2541>>ASSIGN   2543>>ASSIGN   2544>>DOINDEX  2733<<DOINDEX  2734>>IF       2737>>ASSIGN   2744<<ASSIGN
      2759<<ASSIGN   2805>>ASSIGN   2834<<ASSIGN   2835>>ASSIGN   2895<<ASSIGN   2899>>IF       2907>>ASSIGN
      2970<<DOINDEX  2971>>IF       2973>>ASSIGN   2991>>ASSIGN   3146>>ASSIGN   3148>>ASSIGN   3149>>ASSIGN
      3150>>ASSIGN   3174>>ASSIGN   3188>>ASSIGN
KQ$DSB
      2255**DCL       117--PROC     2571--ENTRY    2582--ENTRY    2641--ENTRY    2652--ENTRY    2726--ENTRY
      2825--ENTRY    2885--ENTRY    2950--ENTRY    2959--ENTRY
KQ$DSB.ASR
      2257**DCL      2266--REDEF
KQ$DSB.DESC.BASE
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:110  
      2283**DCL      2835>>ASSIGN   2907>>ASSIGN   2973>>ASSIGN   3150<<ASSIGN   3174>>ASSIGN
KQ$DSB.DESC.FLG
      2277**DCL      2278--REDEF    3146<<ASSIGN   3148<<ASSIGN
KQ$DSB.DESC.FLGR.PRESENT
      2280**DCL      2734>>IF       2899>>IF       2971>>IF       2991<<ASSIGN
KQ$DSB.DESC.T
      2282**DCL      3149<<ASSIGN
KQM$TRUNCDSBS
      2378**DCL-ENT  3100--CALL
KQ_IDSB.ASR
      2407**DCL      2416--REDEF
KQ_IDSB.DESC.FLG
      2427**DCL      2428--REDEF
MM$CGQD.BCHUNK.COUNT
      2349**DCL      2990<<ASSIGN   2990>>ASSIGN   3107>>IF       3111>>ASSIGN   3114<<ASSIGN
MM$CGQD.BCHUNK.HEAD
      2345**DCL      2988<<ASSIGN   3109>>ASSIGN   3112<<ASSIGN
MM$CGQD.BCHUNK.TAIL
      2347**DCL      2983>>IF       2985>>ASSIGN   2989<<ASSIGN   3110>>ASSIGN   3113<<ASSIGN
MM$CGQD.FCHUNK.COUNT
      2333**DCL      2543<<ASSIGN   3111<<ASSIGN   3128<<ASSIGN   3128>>ASSIGN
MM$CGQD.FCHUNK.HEAD
      2324**DCL      2542<<ASSIGN   3095>>IF       3109<<ASSIGN   3126>>ASSIGN   3127<<ASSIGN   3127>>ASSIGN
MM$CGQD.FCHUNK.TAIL
      2331**DCL      2548<<ASSIGN   3110<<ASSIGN   3129>>IF       3130<<ASSIGN
MM$CGQD.FPPC
      2307**DCL      2794<<ASSIGN   2794>>ASSIGN   2848<<ASSIGN   2848>>ASSIGN   3048<<ASSIGN   3048>>ASSIGN
MM$CGQD.UPPC
      2316**DCL      2622<<ASSIGN   2622>>ASSIGN   2695<<ASSIGN   2695>>ASSIGN   2796<<ASSIGN   2796>>ASSIGN
      2847<<ASSIGN   2847>>ASSIGN
MM$DESC.BOUND
      1269**DCL      1270--REDEF
MM$DESC.FLGS
      1270**DCL      1270--REDEF
MM$IPHY_MAP
      2186**DCL      2690>>ASSIGN   2928>>ASSIGN   3044>>ASSIGN   3181>>ASSIGN
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:111  
MM$PPUT.COMM
      1258**DCL      2612<<ASSIGN   2791<<ASSIGN
MM$PPUT.USER#
      1258**DCL      1258--REDEF
MMB$FPP
      2379**DCL-ENT  2691--CALL     3049--CALL
MMB$GPP
      2380**DCL-ENT  2596--CALL     2600--CALL     2777--CALL     2781--CALL
MMB$RELPG
      2381**DCL-ENT  2599--CALL     2780--CALL
MMF$FIXLS
      2382**DCL-ENT  2536--CALL
MM_BYP$
      1189**DCL      1189--IMP-PTR
MM_CGLOCK
      1186**DCL      2610<>CALL     2625<>CALL     2668<>CALL     2731<>CALL     2775<>CALL     2789<>CALL
      2810<>CALL     2838<>CALL     2897<>CALL     2912<>CALL     2962<>CALL     3016<>CALL     3037<>CALL
      3056<>CALL
MM_CGQCXT_END
      1196**DCL      2529<<ASSIGN   2586>>DOINDEX  2657>>IF
MM_CGQD$
      2388**DCL      2306--IMP-PTR  2542>>ASSIGN   2543>>ASSIGN   2548>>ASSIGN   2622>>ASSIGN   2622>>ASSIGN
      2695>>ASSIGN   2695>>ASSIGN   2794>>ASSIGN   2794>>ASSIGN   2796>>ASSIGN   2796>>ASSIGN   2847>>ASSIGN
      2847>>ASSIGN   2848>>ASSIGN   2848>>ASSIGN   2983>>IF       2985>>ASSIGN   2988>>ASSIGN   2989>>ASSIGN
      2990>>ASSIGN   2990>>ASSIGN   3048>>ASSIGN   3048>>ASSIGN   3095>>IF       3107>>IF       3109>>ASSIGN
      3109>>ASSIGN   3110>>ASSIGN   3110>>ASSIGN   3111>>ASSIGN   3111>>ASSIGN   3112>>ASSIGN   3113>>ASSIGN
      3114>>ASSIGN   3126>>ASSIGN   3127>>ASSIGN   3127>>ASSIGN   3128>>ASSIGN   3128>>ASSIGN   3129>>IF
      3130>>ASSIGN
MM_CGQMAP_PGS
      1195**DCL      2479>>IF       2479>>IF       2491>>DOINDEX  2537>>ASSIGN
MM_CGQPHE
      1196**DCL      2549<<ASSIGN   3039>>DOINDEX  3053>>CALL
MM_CGQPHS
      1196**DCL      2530<<ASSIGN   3039>>DOINDEX  3053<>CALL     3053>>CALL
MM_CGQRES_PGS
      1196**DCL      2481>>IF       2526>>ASSIGN
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:112  
MM_CGTCNT.DSBS
      1256**DCL      3117<<ASSIGN   3117>>ASSIGN
MM_CGTCNT.PT
      1256**DCL      3054<<ASSIGN   3054>>ASSIGN
MM_FPMC.RPN
      1195**DCL      2493>>ASSIGN   2587>>IF       2671>>IF       2692>>ASSIGN   2926>>IF       3041>>IF
      3047>>ASSIGN   3178>>IF
PGTBL$
      2237**DCL       117--PROC     2238--REDEF    2571--ENTRY    2582--ENTRY    2621<<ASSIGN   2641--ENTRY
      2652--ENTRY    2726--ENTRY    2825--ENTRY    2885--ENTRY    2950--ENTRY    2959--ENTRY
PGTBL_PTR
      2238**DCL      2804<<ASSIGN
PGTBL_PTR.PGNO
      2239**DCL      2657>>IF       2666>>ASSIGN   2806<<ASSIGN   2827>>IF       2836>>ASSIGN   2887>>IF
      2903>>ASSIGN   2908>>ASSIGN
PGTBL_PTR.SEGID
      2241**DCL      2657>>IF       2805<<ASSIGN   2827>>IF       2827>>IF       2834>>ASSIGN   2887>>IF
      2887>>IF       2895>>ASSIGN
PGTYPE
      2367**DCL      2613<<ASSIGN   2614<<ASSIGN   2614>>ASSIGN   2619>>ASSIGN   2797<<ASSIGN   2803>>ASSIGN
PPNO
      2368**DCL      2596<>CALL     2597>>IF       2600<>CALL     2601>>IF       2612>>ASSIGN   2616>>ASSIGN
      2618>>ASSIGN   2670<<ASSIGN   2671>>IF       2690<<ASSIGN   2690>>ASSIGN   2691<>CALL     2777<>CALL
      2778>>IF       2781<>CALL     2782>>IF       2791>>ASSIGN   2798>>ASSIGN   2800>>ASSIGN   2802>>ASSIGN
      2925<<ASSIGN   2926>>IF       2928<<ASSIGN   2928>>ASSIGN   3044<<ASSIGN   3046<<ASSIGN   3049<>CALL
      3181<<ASSIGN   3183<<ASSIGN
PTSLOT.CHUNKPG#
      2365**DCL      2746>>ASSIGN   3190<<ASSIGN
PTSLOT.K
      2363**DCL      2728<<ASSIGN   2742>>IF       2744>>ASSIGN   2765<<ASSIGN   2969<<ASSIGN   2993<<ASSIGN
      2996>>IF       3186>>IF       3188<<ASSIGN
PTSLOT.VPNO
      2364**DCL      2745>>ASSIGN   3189<<ASSIGN
SC_MM40
      2383**DCL-ENT  2481--CALL
SC_MM41
PL6.E3A0      #001=MMQ$INIT File=MMQ$CGQ.:E05TSI                                 WED 07/30/97 03:23 Page:113  
      2384**DCL-ENT  2892--CALL     2914--CALL
S_NSCPUA
      2218**DCL      3145>>IF
TRUNCDSB
      2967**PROC     2952--CALL     2964--CALL
UNLALT
      2806**LABEL    2676--GOTO     2686--GOTO     2757--GOTO     2762--CALLALT  2843--GOTO     2901--CALLALT
      2964--CALLALT
UNLRET
      2622**LABEL    2696--GOTO     2807--GOTO     2849--GOTO     2965--GOTO     3019--GOTO
VPNO
      2369**DCL      2666<<ASSIGN   2670>>ASSIGN   2679>>IF       2679>>IF       2692>>ASSIGN   2693>>ASSIGN
      2694<>CALL     2745<<ASSIGN   2773>>ASSIGN   2784>>ASSIGN   2800>>ASSIGN   2802>>ASSIGN   2803>>ASSIGN
      2806>>ASSIGN   2836<<ASSIGN   2840>>IF       2845>>ASSIGN   2845>>ASSIGN   2846<>CALL     2903<<ASSIGN
      2908<<ASSIGN   2909>>IF       2925>>ASSIGN   2975<<DOINDEX  2976>>IF       3039<<DOINDEX  3040>>IF
      3041>>IF       3044>>ASSIGN   3046>>ASSIGN   3047>>ASSIGN   3175<<DOINDEX  3176>>IF       3178>>IF
      3181>>ASSIGN   3183>>ASSIGN   3189>>ASSIGN
