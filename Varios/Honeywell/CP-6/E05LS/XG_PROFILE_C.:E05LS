

15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       1    
    1      /*M* XG_PROFILE_C  Graphics profile   */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*T*/
    8      /*F*  NAME:  XG_PROFILE_C
    9
   10      INTRODUCTION
   11
   12      The graphics CORE library as well as some user programs
   13      must have a way to find out about the specific hardware
   14      capabilities of the device or devices it is interfaced
   15      with.  It must also be able to find out about that
   16      specific device's driver and what it is capable of.
   17      This data structure, XG_PROFILE_C, contains a macro for
   18      the key structure for a graphics record in :PRO.:SYS,
   19      as well as the actual structure of the data contained in
   20      that graphics record.
   21
   22      By performing a keyed read to a specified device's
   23      graphics profile record, the graphics library can know
   24      the device and driver limitations as well as their
   25      extra functionality, if they have any.  This structure
   26      will be used by the library whenever a device is initialized.
   27
   28      THIS DESCRIPTION MAY CHANGE DUE TO TECHNICAL CONSIDERATIONS
   29
   30                                        */
   31
   32                                    /**********************************************/
   33                                    /*  GRAPHICS PROFILE RECORD STRUCTURE MACRO     */
   34                                    /**********************************************/
   35
   36      %MACRO XG$PROFILE_KEY  (PRON_KEY=PROKEYNAME,
   37                              STCLASS = STATIC);
15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       2    
   38
   39           /*F* NAME:  XG$PROFILE - PROFILE DATA BLOCK
   40
   41                The graphics profile data block is the graphics device
   42           definition used by the DIGL and ultimately the user of the
   43           DIGL to determine device-specific actions, (if necessary),
   44           when dealing with a graphics device.
   45           */
   46
   47           /*  The key structure of the graphics profile record that
   48                contains the actual profile attributes.
   49           */
   50      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   51      %IF (SUBSTR(STR,0,6)='STATIC') OR
   52      (SUBSTR(STR,0,8)='CONSTANT') OR
   53      (SUBSTR(STR,0,3)='EXT');
   54      %LSET INIT=CHARTEXT('INIT');
   55      %ELSE;
   56      %LSET INIT=CHARTEXT('/*');
   57      %ENDIF;
   58
   59      DCL 1 PRON_KEY STCLASS ALIGNED,
   60           /*K* PROFILE KEY     */
   61            2 CNT   UBIN  BYTE   UNAL   %INIT(21)%CHARTEXT('/**/'),
   62                /*K*  CNT  the count of usuable bytes in the profile key  */
   63            2 TEXT  CHAR(11)  UNAL  %INIT(' ')%CHARTEXT('/**/'),
   64                /*K*  TEXT  the actual character name of the device       */
   65            2 *    CHAR(10)  UNAL  %INIT(' :graphics')%CHARTEXT('/**/');
   66                /*K*  the subkey for the graphics profile record          */
   67      %MEND;
   68
   69
   70      %MACRO XG$PROFILE  (PRON=PRONAME,
   71                          STCLASS = STATIC,
   72                          GLBL_COLRS = 999999999,
   73                          GLBL_INTNS = 999999999,
   74                          MAX_PICK = %XG_MAX_PICK_IDS#,
15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       3    
   75                          X_SPACE = 4095,
   76                          Y_SPACE = 4095,
   77                          Z_SPACE = 4095,
   78                          NDC_WIDTH = 999999999,
   79                          NDC_HEIGHT = 999999999,
   80                          NDC_DEPTH = 999999999,
   81                          NDC_WIDTH_CHARS = 999999999,
   82                          NDC_HEIGHT_CHARS = 999999999,
   83                          NDC_DEPTH_CHARS = 999999999,
   84                          WIDTH_USE = 999999,
   85                          HEIGHT_USE = 999999,
   86                          DEPTH_USE = 999999,
   87                          NDC_WIDTH_CURR = %XG_MAX_NDC_WIDTH_CURRENT#,
   88                          NDC_HEIGHT_CURR = %XG_MAX_NDC_HEIGHT_CURRENT#,
   89                          NDC_DEPTH_CURR = %XG_MAX_NDC_DEPTH_CURRENT#,
   90                          MIN_LINEWIDTH = 1,
   91                          MAX_LINEWIDTH = 327,
   92                          MIN_CH_SIZ = 1,
   93                          MAX_CH_SIZ = 327,
   94                          NUM_ESCAPE_FUNCTIONS = 0,
   95                          VIEW_SURF = 0,
   96                          PLAIN_FILL = %XG_MAX_POLY_PLAIN_FILL#,
   97                          SHADED_FILL = %XG_MAX_POLY_SHADED_FILL#,
   98                          PATTERNED_FILL = %XG_MAX_POLY_PATTERNED_FILL#,
   99                          PIX_MAXX = %XG_MAX_PIX_ARRAY_MAXX#,
  100                          PIX_MAXY = %XG_MAX_PIX_ARRAY_MAXY#,
  101                          TABLE_SIZE = %XG_MAX_TABLE_SIZE#,
  102                          LINESTYLE_HW_CNT = 9,
  103                          LINESTYLE_SW_CNT = 9990,
  104                          LINEWIDTH_CNT = %XG_MAX_LINEWIDTH_COUNT#,
  105                          FONT_CNT = %XG_MAX_FONT_COUNT#,
  106                          PEN_HW_CNT = %XG_MAX_PEN_COUNT#,
  107                          PEN_SW_CNT = %XG_MAX_PEN_COUNT#,
  108                          CHAR_SIZE_CNT = %XG_MAX_CHAR_SIZE_COUNT#,
  109                          MARKER_SW_CNT = %XG_MAX_MARKER_COUNT#,
  110                          MARKER_HW_CNT = %XG_MAX_MARKER_COUNT#,
  111                          LINEWIDTH_SUPRT = %XG_LINEWIDTH_SUPPORT_HARDWARE#,
15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       4    
  112                          CHARSIZE_SUPRT = %XG_CHARSIZE_SUPPORT_HARDWARE#,
  113                          INTENSITY_SUPRT = %XG_INTENSITY_SUPPORT_HARDWARE#,
  114                          HIGHLIGHT_SUPRT = %XG_HIGHLIGHT_SUPPORT_HARDWARE#,
  115                          OUTPUT_LVL = %XG_OUTPUT_LEVEL_BASIC#,
  116                          BATCH_LVL = %XG_BATCH_MODE_DEFER_NOTHING#,
  117                          HIDDEN_SURFACE_LVL = %XG_HIDDEN_SURFACE_NONE#,
  118                          DIMENSION_LVL = %XG_DIMENSION_LEVEL_3D#,
  119                          VIEW_SURFACE_TYP = %XG_VIEW_SURFACE_COLOR#,
  120                          PIXEL_TYP = %XG_PIXEL_FCNS_ALL#,
  121                          EDGE_TYP = %XG_EDGE_TYPE_BOTH#,
  122                          COLOR_TABLE_TYP = %XG_COLOR_TABLE_FIX_DYN#,
  123                          BACKGROUND_TYP = %XG_BACKGROUND_TYPE_VARIABLE#,
  124                          DEVICE_TYP = %XG_DEVICE_TYPE_PSEUDO#,
  125                          IMAGE_TRANS = %XG_IMAGE_TRANSF_A#,
  126                          COLR_MDL = %XG_COLOR_MODEL_RGB#,
  127                          BACKGROUND_COLR = %XG_BACKGROUND_COLOR_BLACK#,
  128                          COLOR_ACT = %XG_COLOR_ACTION_RETROACTIVE#,
  129                          INTENSITY_ACT = %XG_INTENS_ACTION_RETROACTIVE#);
  130
  131      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  132      %IF (SUBSTR(STR,0,6)='STATIC') OR
  133      (SUBSTR(STR,0,8)='CONSTANT') OR
  134      (SUBSTR(STR,0,3)='EXT');
  135      %LSET INIT=CHARTEXT('INIT');
  136      %LSET COM=CHARTEXT(' ');
  137      %LSET ARRAYLEN = 63;   /* 0:63 IS MAX LEN FOR THE ESCAPE ARRAY */
  138      %ELSE;
  139      %LSET INIT=CHARTEXT('/*');
  140      %LSET COM=CHARTEXT('/*');
  141      %LSET ARRAYLEN = 0;
  142      %ENDIF;
  143
  144      DCL 1 PRON STCLASS UNAL,
  145           /*K*  GRAPHICS PROFILE NAME   */
  146            2 GLOBAL_COLORS UBIN %INIT(GLBL_COLRS)%CHARTEXT('/**/') ALIGNED,
  147                /*K*  GLOBAL_COLORS    the maximum number of colors
  148                     that this device can generate
15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       5    
  149                          range  1 - 999,999,999
  150                               default - 999999999                     */
  151            2 GLOBAL_INTENSITIES UBIN %INIT(GLBL_INTNS)%CHARTEXT('/**/') ALIGNED,
  152                /*K*  GLOBAL_INTENSITIES   the maximum number of different
  153                     levels of intensity this device and driver support
  154                          range  1 - 999,999,999
  155                               default - 999999999                      */
  156            2  MAX_PICK_ID  UBIN  %INIT(MAX_PICK%COM)%CHARTEXT('/**/')   ALIGNED,
  157                /*K*  MAX_PICK_ID   the maximum number of pick id's
  158                     supported by this device
  159                          range  0 - 32767
  160                               default - 32767                         */
  161            2  X_PER_CM  UBIN    %INIT(X_SPACE)%CHARTEXT('/**/')   ALIGNED,
  162                /*K* X_PER_CM  the addressable units of the view
  163                     surface in X per centimeter
  164                          range  0 - 4095
  165                               default - 4095                          */
  166            2  Y_PER_CM  UBIN    %INIT(Y_SPACE)%CHARTEXT('/**/')   ALIGNED,
  167                /*K* Y_PER_CM  the addressable units of the view
  168                     surface in Y per centimeter
  169                          range  0 - 4095
  170                               default - 4095                          */
  171            2  Z_PER_CM  UBIN    %INIT(Z_SPACE)%CHARTEXT('/**/')   ALIGNED,
  172                /*K* Z_PER_CM  the addressable units of the view
  173                     surface in Z per centimeter
  174                          range  0 - 4095
  175                               default - 4095                          */
  176            2  NDC_WIDTH_ADDR_SPACE   UBIN   %INIT(NDC_WIDTH)%CHARTEXT('/**/')   ALIGNED,
  177                /*K*  NDC_WIDTH_ADDR_SPACE  the width of NDC space
  178                     in addressable units.
  179                          range  0 - 999,999,999
  180                               default - 999999999                     */
  181            2  NDC_HEIGHT_ADDR_SPACE   UBIN   %INIT(NDC_HEIGHT)%CHARTEXT('/**/')   ALIGNED,
  182                /*K*  NDC_HEIGHT_ADDR_SPACE  the height of NDC space
  183                     in addressable units.
  184                          range  0 - 999,999,999
  185                               default - 999999999                     */
15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       6    
  186            2  NDC_DEPTH_ADDR_SPACE   UBIN   %INIT(NDC_DEPTH)%CHARTEXT('/**/')   ALIGNED,
  187                /*K*  NDC_DEPTH_ADDR_SPACE  the depth of NDC space
  188                     in addressable units.
  189                          range  0 - 999,999,999
  190                               default - 999999999                     */
  191            2  NDC_WIDTH_CHAR_POS   UBIN   %INIT(NDC_WIDTH_CHARS)%CHARTEXT('/**/')   ALIGNED,
  192                /*K*  NDC_WIDTH_CHAR_POS    the width of NDC space
  193                     in addressable character positions.
  194                          range  0 - 999,999,999
  195                               default - 999999999                     */
  196            2  NDC_HEIGHT_CHAR_POS     UBIN   %INIT(NDC_HEIGHT_CHARS)%CHARTEXT('/**/')   ALIGNED,
  197                /*K*  NDC_HEIGHT_CHAR_POS    the height of NDC space
  198                     in addressable character positions.
  199                          range  0 - 999,999,999
  200                               default - 999999999                     */
  201            2  NDC_DEPTH_CHAR_POS     UBIN   %INIT(NDC_DEPTH_CHARS)%CHARTEXT('/**/')   ALIGNED,
  202                /*K*  NDC_DEPTH_CHAR_POS    the depth of NDC space
  203                     in addressable character positions.
  204                          range  0 - 999,999,999
  205                               default - 999999999                     */
  206            2  WIDTH_USABLE   UBIN   %INIT(WIDTH_USE)%CHARTEXT('/**/')   ALIGNED,
  207                /*K*  WIDTH_USABLE  the width of the usable display
  208                     in centimeters
  209                          range  0 - 999,999
  210                               default - 999999                        */
  211            2  HEIGHT_USABLE       UBIN   %INIT(HEIGHT_USE)%CHARTEXT('/**/')   ALIGNED,
  212                /*K*  HEIGHT_USABLE     the height of usable display
  213                     in centimeters
  214                          range  0 - 999,999
  215                               default - 999999                        */
  216            2  DEPTH_USABLE       UBIN   %INIT(DEPTH_USE)%CHARTEXT('/**/')   ALIGNED,
  217                /*K*  DEPTH_USABLE     the depth of usable display
  218                     in centimeters
  219                          range  0 - 999,999
  220                               default - 999999                        */
  221            2  NDC_WIDTH_CURRENT   UBIN HALF   %INIT(NDC_WIDTH_CURR%COM)%CHARTEXT('/**/')   HALIGNED,
  222                /*K*  NDC_WIDTH_CURRENT     the width of NDC space
15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       7    
  223                          range  0 - 32767  which means 0.0 - 1.0
  224                               default - 32767 or 1.0                  */
  225            2  NDC_HEIGHT_CURRENT   UBIN HALF   %INIT(NDC_HEIGHT_CURR%COM)%CHARTEXT('/**/')   HALIGNED,
  226                /*K*  NDC_HEIGHT_CURRENT     the height of NDC space
  227                          range  0 - 32767  which means 0.0 - 1.0
  228                               default - 32767  or  1.0                */
  229            2  NDC_DEPTH_CURRENT   UBIN HALF   %INIT(NDC_DEPTH_CURR%COM)%CHARTEXT('/**/')   HALIGNED,
  230                /*K*  NDC_DEPTH_CURRENT     the depth of NDC space
  231                          range  0 - 32767  which means 0.0 - 1.0
  232                               default - 32767  or  1.0                */
  233            2  MINIMUM_LINEWIDTH   UBIN HALF   %INIT(MIN_LINEWIDTH)%CHARTEXT('/**/')   HALIGNED,
  234                /*K*  MINIMUM_LINDWIDTH     the minimum line width
  235                     in NDC coordinates.
  236                          range 0 - 32767
  237                            taken as a percentage
  238                            of NDC space where 0 represents 0% and
  239                            32767 represents 100%
  240                               default - 1                             */
  241            2  MAXIMUM_LINEWIDTH    UBIN HALF   %INIT(MAX_LINEWIDTH)%CHARTEXT('/**/')   HALIGNED,
  242                /*K*  MAXIMUM_LINEWIDTH      the maximum line width
  243                     in NDC coordinates
  244                          range  0 - 32767
  245                            taken as a percentage
  246                            of NDC space where 0 represents 0% and
  247                            32767 represents 100%
  248                               default - 327                           */
  249            2  MIN_CHAR_SIZE   UBIN HALF  %INIT(MIN_CH_SIZ)%CHARTEXT('/**/')   HALIGNED,
  250                /*K*  MIN_CHAR_SIZE   the minimum character size in
  251                     NDC coordinates.
  252                          range  0 - 32767
  253                            taken as a percentage
  254                            of NDC space where 0 represents 0% and
  255                            32767 represents 100%
  256                               default - 1                             */
  257            2  MAX_CHAR_SIZE   UBIN HALF  %INIT(MAX_CH_SIZ)%CHARTEXT('/**/')   HALIGNED,
  258                /*K*  MAX_CHAR_SIZE  the maximum character size in
  259                     NDC coordinates.
15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       8    
  260                          range  0 - 32767
  261                            taken as a percentage
  262                            of NDC space where 0 represents 0% and
  263                            32767 represents 100%
  264                               default - 327                           */
  265            2  VIEW_SURFACE  UBIN HALF %INIT(VIEW_SURF)%CHARTEXT('/**/')   HALIGNED,
  266                /*K*  The name of the initialized view surface that
  267                      an inquiry of device characteristics has been
  268                      made about.
  269                      range  0 - 32767
  270                      default  0
  271                     This halfword is reserved for future use          */
  272            2  POLYGON_FILL,
  273                /*K*  POLYGON FILL   A value for each of the three types
  274                     of polygon fill possible, that specify the maximum
  275                     number of edges that can be supported for each type
  276                     of fill pattern.                                  */
  277              3  PLAIN  UBIN  HALF  %INIT(PLAIN_FILL%COM)%CHARTEXT('/**/')   HALIGNED,
  278                   /*K*  PLAIN    The maximum number of edges that can
  279                     be supported with a plain type of polygon fill.
  280                          range  0 - 32767
  281                               default - 32767                         */
  282              3  SHADED  UBIN  HALF  %INIT(SHADED_FILL%COM)%CHARTEXT('/**/')   HALIGNED,
  283                   /*K*  SHADED   The maximum number of edges that can
  284                     be supported with a shaded type of polygon fill.
  285                          range  0 - 32767
  286                               default -  32767                        */
  287              3  PATTERNED  UBIN  HALF  %INIT(PATTERNED_FILL%COM)%CHARTEXT('/**/')   HALIGNED,
  288                   /*K*  PATTERNED   The maximum number of edges that can
  289                     be supported with a patterned type of polygon fill.
  290                          range  0 - 32767
  291                               default -  32767                        */
  292            2  PIX_ARRAY_MAXX  UBIN  HALF  %INIT(PIX_MAXX%COM)%CHARTEXT('/**/')   HALIGNED,
  293                /*K* PIX_ARRAY_MAXX     The maximum size in the X direction
  294                     of the pixel array.  (in pixels)
  295                          range  0 - 32767
  296                               default - 32767                         */
15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       9    
  297            2  PIX_ARRAY_MAXY  UBIN  HALF  %INIT(PIX_MAXY%COM)%CHARTEXT('/**/')   HALIGNED,
  298                /*K* PIX_ARRAY_MAXY     The maximum size in the Y direction
  299                     of the pixel array.  (in pixels)
  300                          range  0 - 32767
  301                               default - 32767                         */
  302            2  COLOR_TAB_SIZE  UBIN  HALF  %INIT(TABLE_SIZE%COM)%CHARTEXT('/**/')   HALIGNED,
  303                /*K*  COLOR_TAB_SIZE   the maximum number of entries
  304                     possible in the color look up table.
  305                     This is the number of simultaneously visible colors.
  306                          range  0 - 32767
  307                               default -  32767                        */
  308            2  INTENSITY_TAB_SIZE  UBIN  HALF  %INIT(TABLE_SIZE%COM)%CHARTEXT('/**/')   HALIGNED,
  309                /*K* INTENSITY_TAB_SIZE    the maximum number of entries
  310                     possible in this device or drivers intensity
  311                     index table
  312                     This is the number of simultaneously visible intensities.
  313                          range  0 - 32767
  314                               default -  32767                        */
  315            2  LINESTYLE_HARDWARE_COUNT  UBIN HALF  %INIT(LINESTYLE_HW_CNT)%CHARTEXT('/**/')   HALIGNED,
  316                /*K*  A count of the number of different hardware line styles
  317                     supported by the device and its driver.  The different
  318                     styles refer to solid, dashed, and dotted.
  319                     range 1 - 9
  320                     default 9                                         */
  321            2  LINESTYLE_SOFTWARE_COUNT  UBIN HALF  %INIT(LINESTYLE_SW_CNT)%CHARTEXT('/**/')   HALIGNED,
  322                /*K*  A count of the number of different software line styles
  323                     supported by the device and its driver.  The different
  324                     styles refer to solid, dashed, and dotted.
  325                     range 0 - 9990
  326                     default 9990                                      */
  327            2  LINEWIDTH_COUNT   UBIN  HALF  %INIT(LINEWIDTH_CNT%COM)%CHARTEXT('/**/')  HALIGNED,
  328                /*K*  A count of the number of different line widths
  329                     supported by the device and its driver.
  330                     range 1 - 32767
  331                     default 32767                      */
  332            2  FONT_COUNT  UBIN HALF %INIT(FONT_CNT%COM)%CHARTEXT('/**/')   HALIGNED,
  333                /*K*  A count of the number of different fonts
15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       10   
  334                     supported by the device and its driver.
  335                     range 1 - 32767
  336                     default 32767                                */
  337            2  PEN_HARDWARE_COUNT  UBIN  HALF %INIT(PEN_HW_CNT%COM)%CHARTEXT('/**/')   HALIGNED,
  338                /*K*  A count of the number of different hardware pens
  339                     supported by the device and its driver.
  340                     Pen refers to a collection of Line Index,
  341                     Line Style, Line Width, and Text Index.
  342                     range 0 - 32767
  343                     default 32767                                */
  344            2  PEN_SOFTWARE_COUNT  UBIN  HALF %INIT(PEN_SW_CNT%COM)%CHARTEXT('/**/')   HALIGNED,
  345                /*K*  A count of the number of different software pens
  346                     supported by the device and its driver.
  347                     Pen refers to a collection of Line Index,
  348                     Line Style, Line Width, and Text Index.
  349                     range 0 - 32767
  350                     default 32767                                */
  351            2  CHAR_SIZE_COUNT  UBIN  HALF  %INIT(CHAR_SIZE_CNT%COM)%CHARTEXT('/**/')   HALIGNED,
  352                /*K*   A count of the number of different hardware
  353                     character sizes available from the device/driver.
  354                     range 1 - 32767
  355                     default 32767                                */
  356            2  MARKER_HARDWARE_COUNT  UBIN  HALF  %INIT(MARKER_HW_CNT%COM)%CHARTEXT('/**/')   HALIGNED,
  357                /*K*  A count of the number of different hardware marker
  358                     symbols supported by the device and its driver.
  359                     the support of 10 markers is required by the ANS
  360                     specification.
  361                     range 0 - 32767
  362                     default 32767
  363                     The values 1-5 produce the marker symbols,
  364                     dot or period
  365                     plus
  366                     asterisk
  367                     the capital letter O
  368                     the capital leter X
  369                     the values greater than 5 are implementation
  370                     dependent, distinct from each other and from
15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       11   
  371                     the first five.  It is intended that the marker
  372                     symbols be hardware generated and similar in
  373                     size to the default character size for
  374                     "string precision" text.                          */
  375            2  MARKER_SOFTWARE_COUNT  UBIN  HALF  %INIT(MARKER_SW_CNT%COM)%CHARTEXT('/**/')   HALIGNED,
  376                /*K*  A count of the number of different software marker
  377                     symbols supported by the device and its driver.
  378                     the support of 10 markers is required by the ANS
  379                     specification.
  380                     range 0 - 32767
  381                     default  32767                                    */
  382            2  LINEWIDTH_SUPPORT  BIT(4) %INIT(LINEWIDTH_SUPRT%COM)%CHARTEXT('/**/')   UNAL,
  383                /*K*  The type of support, hardware or software,
  384                     for the various line widths.
  385                          %XG_LINEWIDTH_SUPPORT_NONE# - no support for any line width
  386                          %XG_LINEWIDTH_SUPPORT_HARDWARE# - hardware support
  387                          %XG_LINEWIDTH_SUPPORT_SOFTWARE# - software support
  388                          %XG_LINEWIDTH_SUPPORT_BOTH - both hardware and software support
  389                          default  %XG_LINEWIDTH_SUPPORT_HARDWARE#        */
  390            2  CHARSIZE_SUPPORT  BIT(4) %INIT(CHARSIZE_SUPRT%COM)%CHARTEXT('/**/')   UNAL,
  391                /*K*  The type of support given to the charsize count
  392                     above.
  393                          %XG_CHARSIZE_SUPPORT_HARDWARE# - hardware support
  394                          %XG_CHARSIZE_SUPPORT_SOFTWARE# - software support
  395                          %XG_CHARSIZE_SUPPORT_BOTH# - both hardware and software support
  396                          default  %XG_CHARSIZE_SUPPORT_HARDWARE#              */
  397            2  INTENSITY_SUPPORT  BIT(4) %INIT(INTENSITY_SUPRT%COM)%CHARTEXT('/**/')   UNAL,
  398                /*K*  The type of support given to the intensity count
  399                     above.
  400                          %XG_INTENSITY_SUPPORT_NONE# - no support for any intensity
  401                          %XG_INTENSITY_SUPPORT_HARDWARE# - hardware support
  402                          %XG_INTENSITY_SUPPORT_SOFTWARE# - software support
  403                          %XG_INTENSITY_SUPPORT_BOTH# - both hardware and software support
  404                          default  %XG_INTENSITY_SUPPORT_HARDWARE#        */
  405            2  HIGHLIGHT_SUPPORT  BIT(4) %INIT (HIGHLIGHT_SUPRT%COM)%CHARTEXT('/**/')   UNAL,
  406                /*K*  The type of support given to the highlighting
  407                     primitive attribute.
15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       12   
  408                          %XG_HIGHLIGHT_SUPPORT_NONE# - no support for highlighting
  409                          %XG_HIGHLIGHT_SUPPORT_HARDWARE# - hardware support
  410                          %XG_HIGHLIGHT_SUPPORT_SOFTWARE# - software support
  411                          %XG_HIGHLIGHT_SUPPORT_BOTH# - both hardware and software support
  412                          default  %XG_HIGHLIGHT_SUPPORT_HARDWARE#
  413                          any highlight support is valid only if
  414                          OUTPUT_LEVEL is not "basic".                 */
  415            2  OUTPUT_LEVEL  BIT(6)  %INIT(OUTPUT_LVL%COM)%CHARTEXT('/**/')   UNAL,
  416                /*K*  The highest output level supported by the device
  417                     driver.
  418                          %XG_OUTPUT_LEVEL_BASIC# - "basic"
  419                          %XG_OUTPUT_LEVEL_BUFFERED# - "buffered"
  420                          %XG_OUTPUT_LEVEL_DYNAMIC_A# - "dynamic a"
  421                          %XG_OUTPUT_LEVEL_DYNAMIC_B# - "dynamic b"
  422                          %XG_OUTPUT_LEVEL_DYNAMIC_C# - "dynamic c"
  423                     default - %XG_OUTPUT_LEVEL_BASIC#                    */
  424            2  BATCH_MODE  BIT(4)  %INIT(BATCH_LVL%COM)%CHARTEXT('/**/')   UNAL,
  425                /*K*  To indicate the strategy used by the device
  426                     driver for batching of updates.
  427                          %XG_BATCH_MODE_DEFER-NOTHING# - "defer-nothing"
  428                          %XG_BATCH_MODE_DEFER_DELETION# - "defer-deletion"
  429                          %XG_BATCH_MODE_DEFER_RETAINED# - "defer-retained"
  430                          %XG_BATCH_MODE_DEFER_ALL# - "defer-all"
  431                     default - %XG_BATCH_MODE_DEFER_ALL#         */
  432            2  HIDDEN_SURFACE_LEVEL  BIT(4) %INIT(HIDDEN_SURFACE_LVL%COM)%CHARTEXT('/**/')   UNAL,
  433                /*K* HIDDEN_SURFACE_LEVEL  The level of hidden surface
  434                     or hidden line removal supported by the device or
  435                     the device driver.
  436                          %XG_HIDDEN_SURFACE_NONE# - none
  437                          %XG_HIDDEN_SURFACE_TEMPORAL# - temporal
  438                          %XG_HIDDEN_SURFACE_EXPLICIT# - explicit
  439                          %XG_HIDDEN_SURFACE_FULL# - full
  440                     default - %XG_HIDDEN_SURFACE_FULL#                */
  441            2  DIMENSION_LEVEL  BIT(2)  %INIT(DIMENSION_LVL%COM)%CHARTEXT('/**/')   UNAL,
  442                /*K* DIMENSION_LEVEL   the dimension level supported
  443                     by this device and device driver.
  444                          %XG_DIMENSION_LEVEL_2D# - 2 dimensional
15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       13   
  445                          %XG_DIMENSION_LEVEL_3D# - 3 dimensional
  446                     default - %XG_DIMENSION_LEVEL_3D#                 */
  447            2  VIEW_SURFACE_TYPE  BIT(4)  %INIT(VIEW_SURFACE_TYP%COM)%CHARTEXT('/**/')   UNAL,
  448                /*K*  To indicate the type of view surface.
  449                          %XG_VIEW_SURFACE_CHAR# - character only
  450                          %XG_VIEW_SURFACE_VECTOR# - vector only
  451                          %XG_VIEW_SURFACE_INTENSITY# - intensity only
  452                          %XG_VIEW_SURFACE_COLOR# - color
  453                     default - %XG_VIEW_SURFACE_COLOR#                 */
  454            2  PIXEL_TYPE  BIT(4) %INIT(PIXEL_TYP%COM)%CHARTEXT('/**/')   UNAL,
  455                /*K* PIXEL_TYPE   The availability of pixel addressing
  456                     functions.
  457                          '00' - not used
  458                          %XG_PIXEL_FCNS_ALL# - read/write functions available
  459                          %XG_PIXEL_FCNS_NONE# - functions not available
  460                          %XG_PIXEL_FCNS_WRITE# - write functions only available
  461                     default - %XG_PIXEL_FCNS_ALL#                     */
  462            2  EDGE_TYPE  BIT(4) %INIT(EDGE_TYP%COM)%CHARTEXT('/**/')   UNAL,
  463                /*K*  EDGE_TYPE   The type of edges supported by the
  464                     device and the device driver.
  465                          %XG_EDGE_TYPE_NONE# - none  generally not used
  466                          %XG_EDGE_TYPE_INTERIOR# - interior only
  467                          %XG_EDGE_TYPE_SOLID# - solid only as in a vector generator
  468                          %XG_EDGE_TYPE_BOTH# - both interior and solid
  469                     default - %XG_EDGE_TYPE_BOTH#                     */
  470            2  COLOR_TABLE_TYPE  BIT(4)  %INIT(COLOR_TABLE_TYP%COM)%CHARTEXT('/**/')   UNAL,
  471                /*K* COLOR_TABLE_TYPE  The type of color table available.
  472                          %XG_COLOR_TABLE_FIXED# - fixed
  473                          %XG_COLOR_TABLE_DYNAMIC# - dynamic
  474                          %XG_COLOR_TABLE_DIRECT# - direct color
  475                          %XG_COLOR_TABLE_FIX_DYN# - fixed and dynamic
  476                     default - %XG_COLOR_TABLE_FIX_DYN#                */
  477            2  BACKGROUND_TYPE  BIT(2)  %INIT(BACKGROUND_TYP%COM)%CHARTEXT('/**/')  UNAL,
  478                /*K*  BACKGROUND_TYPE    the background type of the device.
  479                          %XG_BACKGROUND_TYPE_FIXED# - fixed
  480                          %XG_BACKGROUND_TYPE_VARIABLE# - variable
  481                     default - %XG_BACKGROUND_TYPE_VARIABLE#           */
15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       14   
  482            2  DEVICE_TYPE   BIT(2)  %INIT(DEVICE_TYP%COM)%CHARTEXT('/**/')   UNAL,
  483                /*K* DEVICE_TYPE   the type of device this is.
  484                          %XG_DEVICE_TYPE_PSEUDO# - "pseudo" or "file"
  485                          %XG_DEVICE_TYPE_REAL# - "real" or "display surface"
  486                     default - %XG_DEVICE_TYPE_PSEUDO#                  */
  487            2  IMAGE_TRANSF   BIT(4)  %INIT(IMAGE_TRANS%COM)%CHARTEXT('/**/')  UNAL,
  488                /*K* IMAGE_TRANSF  the level of hardware support for
  489                     image transformations.
  490                          %XG_IMAGE_TRANSF_NONE# - "none"
  491                          %XG_IMAGE_TRANS_A# - "a"
  492                          %XG_IMAGE_TRANSF_B# - "b"
  493                          %XG_IMAGE_TRANSF_C# - "c"
  494                     default - %XG_IMAGE_TRANSF_C#
  495                     this bit setting has meaning only if the OUTPUT_
  496                     LEVEL is not "basic".                             */
  497            2  COLOR_MODEL  BIT(2)  %INIT(COLR_MDL%COM)%CHARTEXT('/**/')   UNAL,
  498                /*K*  COLOR_MODEL    the color model used by the device.
  499                          %XG_HLS# - HLS
  500                          %XG_COLOR_MODEL_RGB# - RGB
  501                     default - %XG_HLS#                                */
  502            2  BACKGROUND_COLOR   BIT(2)  %INIT(BACKGROUND_COLR%COM)%CHARTEXT('/**/')   UNAL,
  503                /*K*  BACKGROUND_COLOR    the background color of the device
  504                     and its view surface.
  505                          %XG_BACKGROUND_COLOR_BLACK# - black
  506                          %XG_BACKGROUND_COLOR_WHITE# - white
  507                     default - %XG_BACKGROUND_COLOR_BLACK#             */
  508            2  COLOR_ACTION  BIT(4)  %INIT(COLOR_ACT%COM)%CHARTEXT('/**/')   UNAL,
  509                /*K*  COLOR_ACTION   the type of color action this
  510                     device and driver support
  511                          %XG_COLOR_ACTION_NONE# - none
  512                          %XG_COLOR_ACTION_SEQUENTIAL# - sequential
  513                          %XG_COLOR_ACTION_RETROACTIVE# - retroactive
  514                     default - %XG_COLOR_ACTION_RETROACTIVE#           */
  515            2  INTENSITY_ACTION  BIT(4)  %INIT(INTENSITY_ACT%COM)%CHARTEXT('/**/')   UNAL,
  516                /*K*  INTENSITY_ACTION   the type of intensity action this
  517                     device and driver support
  518                          %XG_INTENS_ACTION_NONE# - none
15:22 JUL 28 '97 XG_PROFILE_C.:E05SI                                       15   
  519                          %XG_INTENS_ACTION_SEQUENTIAL# - sequential
  520                          %XG_INTENS_ACTION_RETROACTIVE# - retroactive
  521                     default - %XG_INTENS_ACTION_RETROACTIVE#          */
  522
  523                                              /*  EXTRA SPACE FOR FUTURE EXPANSION  */
  524            2   *    UBIN  ALIGNED %INIT (0) %CHARTEXT ('/**/'),
  525            2   *    UBIN  ALIGNED %INIT (0) %CHARTEXT ('/**/'),
  526            2   *    UBIN  ALIGNED %INIT (0) %CHARTEXT ('/**/'),
  527            2   *    UBIN  ALIGNED %INIT (0) %CHARTEXT ('/**/'),
  528            2   *    UBIN  ALIGNED %INIT (0) %CHARTEXT ('/**/'),
  529            2   *    UBIN  ALIGNED %INIT (0) %CHARTEXT ('/**/'),
  530            2   *    UBIN  ALIGNED %INIT (0) %CHARTEXT ('/**/'),
  531            2   *    UBIN  ALIGNED %INIT (0) %CHARTEXT ('/**/'),
  532            2 NUM_ESCAPES UBIN %INIT (NUM_ESCAPE_FUNCTIONS) %CHARTEXT('/**/'),
  533                /*K* NUM_ESCAPES the number of escape functions supported
  534                  by this driver.  The range is 0 - 63.  This means a max of
  535                  63 different escape functions can be supported at any
  536                  given time.  This values defines the number of entries
  537                  in the GR_ESCAPES array structure.
  538                */
  539            2 GR_ESCAPES (0:%ARRAYLEN) CALIGNED,
  540               3 ESCAPE_FUNCTION UBIN HALF CALIGNED %INIT(0*0) %CHARTEXT('/**/'),
  541                  /*K* ESCAPE_FUNCTION the value of this escape function.
  542                     The value of any given escape function can be
  543                     0 - 32767 inclusive.
  544                  */
  545               3 ESCAPE_SUPPORT UBIN BYTE CALIGNED %INIT(0*0) %CHARTEXT('/**/'),
  546                  /*K* ESCAPE_SUPPORT tells whether this function is
  547                     supported in hardware or software.
  548                     XG_ESC_HARDWARE_SUPPORT = 1
  549                     XG_ESC_SOFTWARE_SUPPORT = 2
  550                  */
  551               3 * UBIN BYTE CALIGNED %INIT (0*0) %CHARTEXT('/**/');
  552                  /* FUTURE ENHANCEMENTS */
  553      %MEND;

