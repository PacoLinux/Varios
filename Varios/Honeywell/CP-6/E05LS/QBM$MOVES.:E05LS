VERSION E05

PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:1    
        1        1        /*M* QBM$MOVES:  MOVE one item to another.  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=0,DCI=4,CSI=2,IAD=2,DTI=2,AND,ECI=0,DIN=2,STI=2 */
        8        8
        9        9        /*P*  NAME:         QBM$MOVES
       10       10              PURPOSE:      MOVE one item to another.
       11       11              DESCRIPTION:  Execute a MOVExx op-code, whose arguments are
       12       12                            a couple of DADs and, possibly, some flags indicating
       13       13                            lengths of DADs, etc.  Consult the QI$OP_MOVxx %MACROS
       14       14                            corresponding to the op-code of interest.
       15       15                            Note that all MOVEs are executed by calling a routine
       16       16                            which is specific to the target DAD's type, except:
       17       17                            1)  ALL "literal" MOVEs, which are specific to the source
       18       18                                (which is an ALL "literal");
       19       19                            2)  QBM$MOVDE MOVEs, which are specific to the source
       20       20                                (which is NUMERIC EDITED);
       21       21                            3)  QBM$MOVG MOVEs, which are specific to both the
       22       22                                source and target, in that either one may be the
       23       23                                group item.
       24       24                            The QBM$MOVxx_VP entry points are called by
       25       25                            QBV$VERIFY and QBV$PRESENT.  These entries generally
       26       26                            "skip around" the calls to QCS$SETUP_whatever, and
       27       27                            are not actually used to execute a MOVE op-code, but
       28       28                            rather re-use this code in moving data between COBOL
       29       29                            and FIELD items during VERIFYs and PRESENTs.
       30       30        */
       31       31
       32       32        QBM$MOVES: PROC;
       33       33
       34       34          %INCLUDE LCP_6;
       35      225
       36      226          %INCLUDE QG_MACRO_M;
       37      363          %INCLUDE QI_EQUATES_E;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:2    
       38      722          %INCLUDE QI_PERR_C;
       39      890          %INCLUDE QI_MACROS_M;
       40     5948          %QI$ALL;
       41    17061
       42    17062    1     DCL LEFT_TRUNCATION_LENGTH UBIN;
       43    17063    1     DCL MOP_STRING_INDEX UBIN;
       44    17064    1     DCL NICE_NORMAL_MOVE BIT(1) ALIGNED;
       45    17065    1     DCL PARALLEL_TABLE_INDEX UBIN;
       46    17066    1     DCL OLD_SOURCE_INDEX UBIN;
       47    17067    1     DCL OLD_SOURCE_LENGTH UBIN;
       48    17068    1     DCL VARIABLE_SOURCE$ CPTR;
       49    17069    1     DCL VARIABLE_TARGET$ CPTR;
       50    17070
       51    17071    1     DCL QCA$ALL_LITERAL_MOVE_A ENTRY;
       52    17072    1     DCL QCA$ALL_LITERAL_MOVE_AE ENTRY;
       53    17073    1     DCL QCA$ALL_LITERAL_MOVE_AJ ENTRY;
       54    17074    1     DCL QCC$ALR ENTRY (1);
       55    17075    1     DCL QCC$CDB ENTRY (1) ALTRET;
       56    17076    1     DCL QCC$DMC ENTRY (1) ALTRET;
       57    17077    1     DCL QCC$DME ENTRY (1) ALTRET;
       58    17078    1     DCL QCD$DE_EDIT ENTRY (1);
       59    17079    1     DCL QCE$ERROR ENTRY (4);
       60    17080    1     DCL QCE$ERROR_INTERNAL ENTRY (4);
       61    17081    1     DCL QCS$SETUP_AUX ENTRY;
       62    17082    1     DCL QCS$SETUP_SOURCE ENTRY;
       63    17083    1     DCL QCS$SETUP_TARGET ENTRY;
       64    17084    1     DCL QCU$UNSIGN_SOURCE ENTRY;
       65    17085
       66    17086          %SET LISTMAC = '1'B;
       67    17087
       68    17088          %INCLUDE QCD_DE_EDIT_M;
       69    17118          %QCD@DE_EDIT;
             17119            %BEGIN_MACRO ( STCLASS = STCLASS );
             17120            %SET LISTDIR = '0'B;
             17133    1     DCL 1 QCD@DE_EDIT ALIGNED,
             17134    1           2 IS_NUMBER_INVALID BIT(1) ALIGNED,
             17135                                           /* Set to 1 if the input is bad,
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:3    
             17136                                                     0 otherwise.           */
             17137    1           2 RESULT ALIGNED,
             17138    1             3 DIGIT_A(0:30) UBIN BYTE UNAL,
             17139                                           /* The de-edited number, in the form:
             17140                                              UNPACKED((INDEX(RESULT),B7),0,31,LEADING) */
             17141    1             3 DEC SBIN,
             17142                                           /* Decimal position for DIGIT_A */
             17143    1             3 INPUT_SIZE SBIN;
             17144                                           /* Length of input minus
             17145                                              leading or trailing blanks */
             17152            %ENDIF;
       70    17155
       71    17156          %QI@OTTER_SPACE;
             17157            %BEGIN_MACRO ( STCLASS = STCLASS );
             17158            %SET LISTDIR = '0'B;
             17171    1       DCL 1 QI@OTTER_SPACE AUTO ALIGNED,
             17172    1             2 *(0:15) UBIN BYTE UNAL /* Was INIT'ed to:  (0*0)/**/;
             17173    1       DCL 1 QI@OTTER_SPACE_CA (0:15) REDEF QI@OTTER_SPACE CHAR(1) UNAL;
             17174    1       DCL 1 QI@OTTER_SPACE_BA (0:15) REDEF QI@OTTER_SPACE UBIN BYTE UNAL;
             17181            %ENDIF;
       72    17184
       73    17185          %SET LISTMAC = '0'B;
       74    17186        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:4    
       75    17187    1   QBM$MOVA: ENTRY;
       76    17188
       77    17189        /*D*  NAME:         QBM$MOVA
       78    17190              CALL:         CALL QBM$MOVA;
       79    17191              PARAMETERS:   None.
       80    17192              INTERFACE:    Called by QAT$TALLYHO when a MOVA op-code is
       81    17193                            encountered.
       82    17194                            Calls QCA$ALL_LITERAL_MOVE_A or QCC$ALR for the real move.
       83    17195              ENVIRONMENT:  Nothing unusual.
       84    17196              INPUT:        QI_1,
       85    17197                            FPL rununit static data following the op-code.
       86    17198              OUTPUT:       Target DAD filled up appropriately.
       87    17199              SCRATCH:      Various otter data.
       88    17200              DESCRIPTION:  Move that stuff:  ALPHANUMERIC target.
       89    17201                            QCU$UNSIGN is used to unpack and/or strip signs;
       90    17202                            BINARY sources have already been converted via QBC$CNVBxx.
       91    17203        */
       92    17204
       93    17205    1       CALL QCS$SETUP_SOURCE;
       94    17206    1       CALL QCS$SETUP_TARGET;
       95    17207
       96    17208    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVA.NEXT_CODE@P );
       97    17209
       98    17210    1   QBM$MOVA_VP: ENTRY;
       99    17211
      100    17212        /*D*  NAME:         QBM$MOVA_VP
      101    17213              CALL:         CALL QBM$MOVA_VP;
      102    17214              PARAMETERS:   None.
      103    17215              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVA-type
      104    17216                            movement between COBOL and FIELD DADs is required.
      105    17217                            Calls QCA$ALL_LITERAL_MOVE_A or QCC$ALR for the real move.
      106    17218              ENVIRONMENT:  Nothing unusual.
      107    17219              INPUT:        QI_1,
      108    17220                            FPL rununit static data following the op-code.
      109    17221              OUTPUT:       Target DAD filled up appropriately.
      110    17222              SCRATCH:      Various otter data.
      111    17223              DESCRIPTION:  Move that stuff:  ALPHANUMERIC target.
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:5    
      112    17224                            QCU$UNSIGN is used to unpack and/or strip signs;
      113    17225                            BINARY sources have already been converted by QBV$xxxxxxx.
      114    17226        */
      115    17227
      116    17228    1       IF QI_1.IS_ALL_LIT.S
      117    17229    1       THEN
      118    17230    2         DO;
      119    17231    2           CALL QCA$ALL_LITERAL_MOVE_A;
      120    17232    2           RETURN;
      121    17233    2         END;
      122    17234
      123    17235    1       QI_1.OP.FILL_CHAR.TEXT = %QI#CIP_BLANK_FILL;
      124    17236
      125    17237    1       QI_1.OTTER_SPACE.S$ = ADDR ( QI@OTTER_SPACE );
      126    17238    1       CALL QCU$UNSIGN_SOURCE;
      127    17239
      128    17240    1       VARIABLE_SOURCE$ = PINCRC ( QI_1.OP.DATA.S$,
      129    17241    1         QI_1.OFFSET.S
      130    17242    1         + QI_1.OP.INX.S );
      131    17243
      132    17244    1       VARIABLE_TARGET$ = PINCRC ( QI_1.OP.DATA.T$,
      133    17245    1         QI_1.OFFSET.T
      134    17246    1         + QI_1.OP.INX.T );
      135    17247
      136    17248    1       VARIABLE_TARGET$ -> QI$VARIABLE_STRING_TARGET.TEXT =
      137    17249    1         VARIABLE_SOURCE$ -> QI$VARIABLE_STRING_SOURCE.TEXT;
      138    17250
      139    17251    1       RETURN;
      140    17252        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:6    
      141    17253    1   QBM$MOVAE: ENTRY;
      142    17254
      143    17255        /*D*  NAME:         QBM$MOVAE
      144    17256              CALL:         CALL QBM$MOVAE;
      145    17257              PARAMETERS:   None.
      146    17258              INTERFACE:    Called by QAT$TALLYHO when a MOVAE op-code is
      147    17259                            encountered.
      148    17260                            Calls QCA$ALL_LITERAL_MOVE_AE or QCC$ALR for the real move.
      149    17261              ENVIRONMENT:  Nothing unusual.
      150    17262              INPUT:        QI_1,
      151    17263                            FPL rununit static data following the op-code.
      152    17264              OUTPUT:       Target DAD filled up appropriately.
      153    17265              SCRATCH:      Various otter data.
      154    17266              DESCRIPTION:  Move that stuff:  ALPHANUMERIC EDITED target.
      155    17267                            QCU$UNSIGN is used to unpack and/or strip signs;
      156    17268                            BINARY sources have already been converted via QBC$CNVBxx.
      157    17269        */
      158    17270
      159    17271    1       CALL QCS$SETUP_SOURCE;
      160    17272    1       CALL QCS$SETUP_TARGET;
      161    17273
      162    17274    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVAE.NEXT_CODE@P );
      163    17275
      164    17276    1   QBM$MOVAE_VP: ENTRY;
      165    17277
      166    17278        /*D*  NAME:         QBM$MOVAE_VP
      167    17279              CALL:         CALL QBM$MOVAE_VP;
      168    17280              PARAMETERS:   None.
      169    17281              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVAE-type
      170    17282                            movement between COBOL and FIELD DADs is required.
      171    17283                            Calls QCA$ALL_LITERAL_MOVE_AE or QCC$ALR for the real move.
      172    17284              ENVIRONMENT:  Nothing unusual.
      173    17285              INPUT:        QI_1,
      174    17286                            FPL rununit static data following the op-code.
      175    17287              OUTPUT:       Target DAD filled up appropriately.
      176    17288              SCRATCH:      Various otter data.
      177    17289              DESCRIPTION:  Move that stuff:  ALPHANUMERIC EDITED target.
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:7    
      178    17290                            QCU$UNSIGN is used to unpack and/or strip signs;
      179    17291                            BINARY sources have already been converted by QBV$xxxxxxx.
      180    17292        */
      181    17293
      182    17294    1       IF QI_1.IS_ALL_LIT.S
      183    17295    1       THEN
      184    17296    2         DO;
      185    17297    2           CALL QCA$ALL_LITERAL_MOVE_AE;
      186    17298    2           RETURN;
      187    17299    2         END;
      188    17300
      189    17301    1       QI_1.OTTER_SPACE.S$ = ADDR ( QI@OTTER_SPACE );
      190    17302    1       CALL QCU$UNSIGN_SOURCE;
      191    17303
      192    17304    2       DO MOP_STRING_INDEX = 0 TO QI_1.PICTURE_STRING.T$ ->
             17304                QI$ALPHANUMERIC_PICTURE_STRING.EDIT_STRING_COUNT - 1;
      193    17305
      194    17306    2         QI_1.OP.LEN.T = QI_1.PICTURE_STRING.T$ -> QI$ALPHANUMERIC_PICTURE_STRING.
             17306                  EDIT_STRING_A.LENGTH (MOP_STRING_INDEX);
      195    17307
      196    17308    3         DO CASE ( QI_1.PICTURE_STRING.T$ -> QI$ALPHANUMERIC_PICTURE_STRING.
             17308                  EDIT_STRING_A.FUNCTION (MOP_STRING_INDEX) );
      197    17309
      198    17310    3           CASE ( %QI#PIC_M_9_A_X );
      199    17311
      200    17312    3             VARIABLE_SOURCE$ = PINCRC ( QI_1.OP.DATA.S$,
      201    17313    3               QI_1.OFFSET.S
      202    17314    3               + QI_1.OP.INX.S );
      203    17315
      204    17316    3             VARIABLE_TARGET$ = PINCRC ( QI_1.OP.DATA.T$,
      205    17317    3               QI_1.OFFSET.T
      206    17318    3               + QI_1.OP.INX.T );
      207    17319
      208    17320    3             VARIABLE_TARGET$ -> QI$VARIABLE_STRING_TARGET.TEXT =
      209    17321    3               VARIABLE_SOURCE$ -> QI$VARIABLE_STRING_SOURCE.TEXT;
      210    17322
      211    17323    3             QI_1.OP.INX.S = QI_1.OP.INX.S + QI_1.OP.LEN.T;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:8    
      212    17324
      213    17325    3             IF QI_1.OP.LEN.S > QI_1.OP.LEN.T
      214    17326    3             THEN
      215    17327    3               QI_1.OP.LEN.S = QI_1.OP.LEN.S - QI_1.OP.LEN.T;
      216    17328    3             ELSE
      217    17329    3               QI_1.OP.LEN.S = 0;
      218    17330
      219    17331    3           CASE ( %QI#PIC_M_B );
      220    17332    3             QI_1.OP.FILL_CHAR.TEXT = %QI#CIP_BLANK_FILL;
      221    17333    3             GOTO STICK_IT;
      222    17334
      223    17335    3           CASE ( %QI#PIC_M_0 );
      224    17336    3             QI_1.OP.FILL_CHAR.TEXT = %QI#CIP_ZERO_FILL;
      225    17337    3             GOTO STICK_IT;
      226    17338
      227    17339    3           CASE ( %QI#PIC_M_SLASH );
      228    17340    3             QI_1.OP.FILL_CHAR.TEXT = %QI#CIP_SLASH_FILL;
      229    17341
      230    17342    3   STICK_IT:
      231    17343    3             OLD_SOURCE_LENGTH = QI_1.OP.LEN.S;
      232    17344    3             OLD_SOURCE_INDEX = QI_1.OP.INX.S;
      233    17345    3             QI_1.OP.LEN.S = 0;
      234    17346    3             QI_1.OP.INX.S = 0;
      235    17347    3             CALL QCC$ALR ( QI_1.OP );
      236    17348    3             QI_1.OP.LEN.S = OLD_SOURCE_LENGTH;
      237    17349    3             QI_1.OP.INX.S = OLD_SOURCE_INDEX;
      238    17350
      239    17351    3         END;  /* DO CASE ( QI_1.PICTURE_STRING.T$ -> ... ) */
      240    17352
      241    17353    2         QI_1.OP.INX.T = QI_1.OP.INX.T + QI_1.OP.LEN.T;
      242    17354
      243    17355    2       END;  /* DO MOP_STRING_INDEX ... */
      244    17356
      245    17357    1       RETURN;
      246    17358        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:9    
      247    17359    1   QBM$MOVAJ: ENTRY;
      248    17360
      249    17361        /*D*  NAME:         QBM$MOVAJ
      250    17362              CALL:         CALL QBM$MOVAJ;
      251    17363              PARAMETERS:   None.
      252    17364              INTERFACE:    Called by QAT$TALLYHO when a MOVAJ op-code is
      253    17365                            encountered.
      254    17366                            Calls QCA$ALL_LITERAL_MOVE_AJ or QCC$ALR for the real move.
      255    17367              ENVIRONMENT:  Nothing unusual.
      256    17368              INPUT:        QI_1,
      257    17369                            FPL rununit static data following the op-code.
      258    17370              OUTPUT:       Target DAD filled up appropriately.
      259    17371              SCRATCH:      Various otter data.
      260    17372              DESCRIPTION:  Move that stuff:  ALPHANUMERIC RIGHT-JUSTIFIED target.
      261    17373                            QCU$UNSIGN is used to unpack and/or strip signs;
      262    17374                            BINARY sources have already been converted via QBC$CNVBxx.
      263    17375        */
      264    17376
      265    17377    1       CALL QCS$SETUP_SOURCE;
      266    17378    1       CALL QCS$SETUP_TARGET;
      267    17379
      268    17380    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVAJ.NEXT_CODE@P );
      269    17381
      270    17382    1   QBM$MOVAJ_VP: ENTRY;
      271    17383
      272    17384        /*D*  NAME:         QBM$MOVAJ_VP
      273    17385              CALL:         CALL QBM$MOVAJ_VP;
      274    17386              PARAMETERS:   None.
      275    17387              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVAJ-type
      276    17388                            movement between COBOL and FIELD DADs is required.
      277    17389                            Calls QCA$ALL_LITERAL_MOVE_AJ or QCC$ALR for the real move.
      278    17390              ENVIRONMENT:  Nothing unusual.
      279    17391              INPUT:        QI_1,
      280    17392                            FPL rununit static data following the op-code.
      281    17393              OUTPUT:       Target DAD filled up appropriately.
      282    17394              SCRATCH:      Various otter data.
      283    17395              DESCRIPTION:  Move that stuff:  ALPHANUMERIC RIGHT-JUSTIFIED target.
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:10   
      284    17396                            QCU$UNSIGN is used to unpack and/or strip signs;
      285    17397                            BINARY sources have already been converted by QBV$xxxxxxx.
      286    17398        */
      287    17399
      288    17400    1       IF QI_1.IS_ALL_LIT.S
      289    17401    1       THEN
      290    17402    2         DO;
      291    17403    2           CALL QCA$ALL_LITERAL_MOVE_AJ;
      292    17404    2           RETURN;
      293    17405    2         END;
      294    17406
      295    17407    1       QI_1.OP.FILL_CHAR.TEXT = %QI#CIP_BLANK_FILL;
      296    17408
      297    17409    1       QI_1.OTTER_SPACE.S$ = ADDR ( QI@OTTER_SPACE );
      298    17410    1       CALL QCU$UNSIGN_SOURCE;
      299    17411
      300    17412            /* If there's some left blank-filling to do, do it, and increment
      301    17413               the target's starting index accordingly.  Otherwise, increment
      302    17414               the source's starting index by the amount of truncation
      303    17415               desired (source length - target length).  Add seasoning to
      304    17416               taste and let simmer for 1 ALR instruction... */
      305    17417    1       IF QI_1.OP.LEN.S < QI_1.OP.LEN.T
      306    17418    1       THEN
      307    17419    2         DO;
      308    17420    2           QI_1.OP.LEN.T = QI_1.OP.LEN.T - QI_1.OP.LEN.S;
      309    17421    2           VARIABLE_TARGET$ = PINCRC ( QI_1.OP.DATA.T$,
      310    17422    2             QI_1.OFFSET.T );
      311    17423
      312    17424    2           VARIABLE_TARGET$ -> QI$VARIABLE_STRING_TARGET.TEXT = ' ';
      313    17425
      314    17426    2           QI_1.OP.INX.T = QI_1.OP.LEN.T;
      315    17427    2           QI_1.OP.LEN.T = QI_1.OP.LEN.S;
      316    17428    2         END;
      317    17429    1       ELSE
      318    17430    2         DO;
      319    17431    2           QI_1.OP.INX.S = QI_1.OP.INX.S
      320    17432    2             + QI_1.OP.LEN.S
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:11   
      321    17433    2             - QI_1.OP.LEN.T;
      322    17434    2           QI_1.OP.LEN.S = QI_1.OP.LEN.T;
      323    17435    2         END;
      324    17436
      325    17437    1       VARIABLE_SOURCE$ = PINCRC ( QI_1.OP.DATA.S$,
      326    17438    1         QI_1.OFFSET.S
      327    17439    1         + QI_1.OP.INX.S );
      328    17440
      329    17441    1       VARIABLE_TARGET$ = PINCRC ( QI_1.OP.DATA.T$,
      330    17442    1         QI_1.OFFSET.T
      331    17443    1         + QI_1.OP.INX.T );
      332    17444
      333    17445    1       VARIABLE_TARGET$ -> QI$VARIABLE_STRING_TARGET.TEXT =
      334    17446    1         VARIABLE_SOURCE$ -> QI$VARIABLE_STRING_SOURCE.TEXT;
      335    17447
      336    17448    1       RETURN;
      337    17449        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:12   
      338    17450    1   QBM$MOVDE: ENTRY;
      339    17451
      340    17452        /*D*  NAME:         QBM$MOVDE
      341    17453              CALL:         CALL QBM$MOVDE;
      342    17454              PARAMETERS:   None.
      343    17455              INTERFACE:    Called by QAT$TALLYHO when a MOVDE op-code is
      344    17456                            encountered.
      345    17457                            Calls QCD$DE_EDIT and QCC$DMC for the real move.
      346    17458              ENVIRONMENT:  Nothing unusual.
      347    17459              INPUT:        QI_1,
      348    17460                            FPL rununit static data following the op-code.
      349    17461              OUTPUT:       Target DAD filled up appropriately.
      350    17462              SCRATCH:      Various otter data.
      351    17463              DESCRIPTION:  Move that stuff:  NUMERIC target (packed or unpacked),
      352    17464                                              NUMERIC EDITED source.
      353    17465                            BINARY targets are weird:  see commentary in QBV$VERI_PRES.
      354    17466        */
      355    17467
      356    17468            /* Set up sending field... */
      357    17469    1       CALL QCS$SETUP_AUX;
      358    17470
      359    17471            /* Set up receiving field... */
      360    17472    1       CALL QCS$SETUP_TARGET;
      361    17473
      362    17474    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVDE.NEXT_CODE@P );
      363    17475
      364    17476    1       QI_1.A_REG = 0;
      365    17477
      366    17478    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      367    17479    1       THEN
      368    17480    1         QI_1.OP.SIZE_ERROR = %QI#CHECK_FOR_SIZE_ERROR;
      369    17481    1       ELSE
      370    17482    1         QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;
      371    17483
      372    17484    1       GOTO SO_DO_THE_MOVDE_ALREADY;
      373    17485
      374    17486    1   QBM$MOVDE_VP: ENTRY;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:13   
      375    17487
      376    17488        /*D*  NAME:         QBM$MOVDE_VP
      377    17489              CALL:         CALL QBM$MOVDE_VP;
      378    17490              PARAMETERS:   None.
      379    17491              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVDE-type
      380    17492                            movement between COBOL and FIELD DADs is required.
      381    17493                            Calls QCD$DE_EDIT and QCC$DMC for the real move.
      382    17494              ENVIRONMENT:  Nothing unusual.
      383    17495              INPUT:        QI_1,
      384    17496                            FPL rununit static data following the op-code.
      385    17497              OUTPUT:       Target DAD filled up appropriately.
      386    17498              SCRATCH:      Various otter data.
      387    17499              DESCRIPTION:  Move that stuff:  NUMERIC target (packed or unpacked),
      388    17500                                              NUMERIC EDITED source.
      389    17501                            BINARY targets are weird:  see commentary in QBV$VERI_PRES.
      390    17502        */
      391    17503
      392    17504    1       QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;
      393    17505
      394    17506    1   SO_DO_THE_MOVDE_ALREADY:
      395    17507            /* QCD$DE_EDIT will do the hard stuff... */
      396    17508    1       CALL QCD$DE_EDIT ( QCD@DE_EDIT );
      397    17509
      398    17510    1       IF QCD@DE_EDIT.IS_NUMBER_INVALID
      399    17511    1       THEN
      400    17512    1         CALL QCE$ERROR ( %E$DE_EDIT_ILLEGAL_SOURCE );
      401    17513
      402    17514    1       QI_1.OP.CIP.S = QI_31_DIGIT_SLS_DISPLAY;
      403    17515    1       QI_1.OP.DATA.S$ = ADDR ( QCD@DE_EDIT.RESULT.DIGIT_A );
      404    17516    1       QI_1.OP.DEC.S = QCD@DE_EDIT.RESULT.DEC;
      405    17517
      406    17518    1       CALL QCC$DMC ( QI_1.OP )
      407    17519    2       WHENALTRETURN DO;
      408    17520    2           QI_1.A_REG = 1;
      409    17521    2         END;
      410    17522
      411    17523    1       RETURN;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:14   
      412    17524        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:15   
      413    17525    1   QBM$MOVG: ENTRY;
      414    17526
      415    17527        /*D*  NAME:         QBM$MOVG
      416    17528              CALL:         CALL QBM$MOVG;
      417    17529              PARAMETERS:   None.
      418    17530              INTERFACE:    Called by QAT$TALLYHO when a MOVG op-code is
      419    17531                            encountered.
      420    17532                            Calls QCC$ALR for the real move.
      421    17533              ENVIRONMENT:  Nothing unusual.
      422    17534              INPUT:        QI_1,
      423    17535                            FPL rununit static data following the op-code.
      424    17536              OUTPUT:       Target DAD filled up appropriately.
      425    17537              SCRATCH:      Various otter data.
      426    17538              DESCRIPTION:  No conversion is performed for signed items, PACKED items,
      427    17539                            or BINARY items.  Just move 'er.
      428    17540                            Ok:
      429    17541                            IS_SOURCE_GROUP means that ANTI_GROUP_LENGTH is for the
      430    17542                            non-group, or target, item; if the bit is off, then
      431    17543                            ANTI_GROUP_LENGTH is for the source item.
      432    17544                            Some operations which will generate MOVG op-codes are:
      433    17545                                MOVE PACKED-THING TO GROUP.
      434    17546                                MOVE GROUP TO DISPLAY-THING.
      435    17547                                MOVE GROUP TO GROUP2.    (!)
      436    17548
      437    17549                            Some operations which will generate MOVA (not MOVG) are:
      438    17550                                MOVE SPACES TO GROUP.
      439    17551                                MOVE ZERO TO GROUP.
      440    17552                                MOVE "01" TO GROUP.
      441    17553
      442    17554                            Unless I'm mistaken, I believe that "MOVE GROUP TO GROUP2."
      443    17555                            could just as well be a MOVA op-code.  What the compiler
      444    17556                            tends to do now is to gen:
      445    17557                                VECT    C_MOVG
      446    17558                                ADRL    GROUP
      447    17559                                ADRL    GROUP2
      448    17560                                DATA    X'800A'
      449    17561                            for example, if GROUP2 were 10 bytes long.  IS_SOURCE_GROUP
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:16   
      450    17562                            seems always to be set.  Whatevah, JJL, C00.
      451    17563        */
      452    17564
      453    17565    1       CALL QCS$SETUP_SOURCE;
      454    17566    1       CALL QCS$SETUP_TARGET;
      455    17567
      456    17568            %IF QI#DEBUG;
      457    17569
      458    17570    1       IF QI_1.IS_ALL_LIT.S
      459    17571    1       THEN
      460    17572    1         CALL QCE$ERROR_INTERNAL ( %E$INTERNAL_COMPILER_ERROR );
      461    17573
      462    17574            %ENDIF;
      463    17575
      464    17576    2       DO CASE ( QI_1.TYPE.S );
      465    17577
      466    17578    2         CASE ( %QI#TYPE_DISPLAY );
      467    17579    2           QI_1.OP.CIP.S.LEN = 0;
      468    17580    2           QI_1.OP.CIP.S.CD.SIGN = %QI#CD_UNSIGNED;
      469    17581
      470    17582    2         CASE ( %QI#TYPE_PACKED );
      471    17583    2           QI_1.OP.CIP.S_A (0) = %QI#CIP_DEFAULT_AS;
      472    17584    2           IF QI_1.OFFSET.S >= 2
      473    17585    2           THEN
      474    17586    3             DO;
      475    17587    3               QI_1.OP.CIP.S.CA.OFFSET = 1;
      476    17588    3               QI_1.OFFSET.S = 1;
      477    17589    3             END;
      478    17590    2           ELSE
      479    17591    2             QI_1.OFFSET.S = 0;
      480    17592    2           QI_1.OP.LEN.S = ( QI_1.OP.LEN.S + 1 ) / 2;
      481    17593
      482    17594    2         CASE ( %QI#TYPE_BINARY );
      483    17595    2           QI_1.OP.CIP.S.LEN = 0;
      484    17596
      485    17597    2       END; /* DO CASE ( QI_1.TYPE.S ) */
      486    17598
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:17   
      487    17599    2       DO CASE ( QI_1.TYPE.T );
      488    17600
      489    17601    2         CASE ( %QI#TYPE_DISPLAY );
      490    17602    2           QI_1.OP.CIP.T.LEN = 0;
      491    17603    2           QI_1.OP.CIP.T.CD.SIGN = %QI#CD_UNSIGNED;
      492    17604
      493    17605    2         CASE ( %QI#TYPE_PACKED );
      494    17606    2           QI_1.OP.CIP.T_A (0) = %QI#CIP_DEFAULT_AS;
      495    17607    2           IF QI_1.OFFSET.T >= 2
      496    17608    2           THEN
      497    17609    3             DO;
      498    17610    3               QI_1.OP.CIP.T.CA.OFFSET = 1;
      499    17611    3               QI_1.OFFSET.T = 1;
      500    17612    3             END;
      501    17613    2           ELSE
      502    17614    2             QI_1.OFFSET.T = 0;
      503    17615    2           QI_1.OP.LEN.T = ( QI_1.OP.LEN.T + 1 ) / 2;
      504    17616
      505    17617    2         CASE ( %QI#TYPE_BINARY );
      506    17618    2           QI_1.OP.CIP.T.LEN = 0;
      507    17619
      508    17620    2       END; /* DO CASE ( QI_1.TYPE.T ) */
      509    17621
      510    17622    1       IF QI_1.INSTR$ -> QI$OP_MOVG.IS_SOURCE_GROUP
      511    17623    1       THEN
      512    17624    1         QI_1.OP.LEN.T = QI_1.INSTR$ -> QI$OP_MOVG.ANTI_GROUP_LENGTH;
      513    17625    1       ELSE
      514    17626    1         QI_1.OP.LEN.S = QI_1.INSTR$ -> QI$OP_MOVG.ANTI_GROUP_LENGTH;
      515    17627
      516    17628    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVG.NEXT_CODE@P );
      517    17629
      518    17630    1       VARIABLE_SOURCE$ = PINCRC ( QI_1.OP.DATA.S$,
      519    17631    1         QI_1.OFFSET.S );
      520    17632
      521    17633    1       VARIABLE_TARGET$ = PINCRC ( QI_1.OP.DATA.T$,
      522    17634    1         QI_1.OFFSET.T );
      523    17635
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:18   
      524    17636    1       VARIABLE_TARGET$ -> QI$VARIABLE_STRING_TARGET.TEXT =
      525    17637    1         VARIABLE_SOURCE$ -> QI$VARIABLE_STRING_SOURCE.TEXT;
      526    17638
      527    17639    1       RETURN;
      528    17640        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:19   
      529    17641    1   QBM$MOVN: ENTRY;
      530    17642
      531    17643        /*D*  NAME:         QBM$MOVN
      532    17644              CALL:         CALL QBM$MOVN;
      533    17645              PARAMETERS:   None.
      534    17646              INTERFACE:    Called by QAT$TALLYHO when a MOVN op-code is
      535    17647                            encountered.
      536    17648                            Calls QCC$DMC for the real move.
      537    17649              ENVIRONMENT:  Nothing unusual.
      538    17650              INPUT:        QI_1,
      539    17651                            FPL rununit static data following the op-code.
      540    17652              OUTPUT:       Target DAD filled up appropriately.
      541    17653              SCRATCH:      Various otter data.
      542    17654              DESCRIPTION:  Move that stuff:  NUMERIC (unpacked) target;
      543    17655                                              packed or unpacked source.
      544    17656                            BINARY sources have already been converted via QBC$CNVBxx.
      545    17657        */
      546    17658
      547    17659    1       NICE_NORMAL_MOVE = %YES;
      548    17660    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVN.NEXT_CODE@P );
      549    17661
      550    17662    1       GOTO SETUP_DAD_AS_SOURCE;
      551    17663
      552    17664    1   QBM$MOVP: ENTRY;
      553    17665
      554    17666        /*D*  NAME:         QBM$MOVP
      555    17667              CALL:         CALL QBM$MOVP;
      556    17668              PARAMETERS:   None.
      557    17669              INTERFACE:    Called by QAT$TALLYHO when a MOVP op-code is
      558    17670                            encountered.
      559    17671                            Calls QCC$DMC for the real move.
      560    17672              ENVIRONMENT:  Nothing unusual.
      561    17673              INPUT:        QI_1,
      562    17674                            FPL rununit static data following the op-code.
      563    17675              OUTPUT:       Target DAD filled up appropriately.
      564    17676              SCRATCH:      Various otter data.
      565    17677              DESCRIPTION:  Move that stuff:  PACKED target;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:20   
      566    17678                                              packed or unpacked source.
      567    17679                            BINARY sources have already been converted via QBC$CNVBxx.
      568    17680        */
      569    17681
      570    17682    1       NICE_NORMAL_MOVE = %YES;
      571    17683    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVP.NEXT_CODE@P );
      572    17684
      573    17685    1       GOTO SETUP_DAD_AS_SOURCE;
      574    17686
      575    17687    1   QBM$MOVB: ENTRY;
      576    17688
      577    17689        /*D*  NAME:         QBM$MOVB
      578    17690              CALL:         CALL QBM$MOVB;
      579    17691              PARAMETERS:   None.
      580    17692              INTERFACE:    Called by QAT$TALLYHO when a MOVB op-code is
      581    17693                            encountered.
      582    17694                            Calls QCC$CDB for the real move.
      583    17695              ENVIRONMENT:  Nothing unusual.
      584    17696              INPUT:        QI_1,
      585    17697                            FPL rununit static data following the op-code.
      586    17698              OUTPUT:       Target DAD filled up appropriately.
      587    17699              SCRATCH:      Various otter data.
      588    17700              DESCRIPTION:  Move that stuff:  BINARY target;
      589    17701                                              packed or unpacked source.
      590    17702        */
      591    17703
      592    17704    1       NICE_NORMAL_MOVE = %NO;
      593    17705    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVB.NEXT_CODE@P );
      594    17706
      595    17707    1   SETUP_DAD_AS_SOURCE:
      596    17708
      597    17709    1       CALL QCS$SETUP_SOURCE;
      598    17710
      599    17711    1       CALL QCS$SETUP_TARGET;
      600    17712
      601    17713    1       CALL PREPARE_FOR_DAD_SOURCE;
      602    17714
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:21   
      603    17715    1       QI_1.A_REG = 0;
      604    17716
      605    17717    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      606    17718    1       THEN
      607    17719    1         QI_1.OP.SIZE_ERROR = %QI#CHECK_FOR_SIZE_ERROR;
      608    17720    1       ELSE
      609    17721    1         QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;
      610    17722
      611    17723    1       GOTO SO_DO_THE_MOVN_ALREADY;
      612    17724
      613    17725    1   QBM$MOVN_VP: ENTRY;
      614    17726
      615    17727        /*D*  NAME:         QBM$MOVN_VP
      616    17728              CALL:         CALL QBM$MOVN_VP;
      617    17729              PARAMETERS:   None.
      618    17730              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVN-type
      619    17731                            movement between COBOL and FIELD DADs is required.
      620    17732                            Calls QCC$DMC for the real move.
      621    17733              ENVIRONMENT:  Nothing unusual.
      622    17734              INPUT:        QI_1,
      623    17735                            FPL rununit static data following the op-code.
      624    17736              OUTPUT:       Target DAD filled up appropriately.
      625    17737              SCRATCH:      Various otter data.
      626    17738              DESCRIPTION:  Move that stuff:  NUMERIC (unpacked) target;
      627    17739                                              packed or unpacked source.
      628    17740                            BINARY sources have already been converted by QBV$xxxxxxx.
      629    17741        */
      630    17742
      631    17743    1   QBM$MOVP_VP: ENTRY;
      632    17744
      633    17745        /*D*  NAME:         QBM$MOVP_VP
      634    17746              CALL:         CALL QBM$MOVP_VP;
      635    17747              PARAMETERS:   None.
      636    17748              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVP-type
      637    17749                            movement between COBOL and FIELD DADs is required.
      638    17750                            Calls QCC$DMC for the real move.
      639    17751              ENVIRONMENT:  Nothing unusual.
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:22   
      640    17752              INPUT:        QI_1,
      641    17753                            FPL rununit static data following the op-code.
      642    17754              OUTPUT:       Target DAD filled up appropriately.
      643    17755              SCRATCH:      Various otter data.
      644    17756              DESCRIPTION:  Move that stuff:  PACKED target;
      645    17757                                              packed or unpacked source.
      646    17758                            BINARY sources have already been converted by QBV$xxxxxxx.
      647    17759        */
      648    17760
      649    17761    1       NICE_NORMAL_MOVE = %YES;
      650    17762
      651    17763    1       CALL PREPARE_FOR_DAD_SOURCE;
      652    17764
      653    17765    1       QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;
      654    17766
      655    17767    1       GOTO SO_DO_THE_MOVN_ALREADY;
      656    17768
      657    17769    1   QBM$MOVB_VP: ENTRY;
      658    17770
      659    17771        /*D*  NAME:         QBM$MOVB_VP
      660    17772              CALL:         CALL QBM$MOVB_VP;
      661    17773              PARAMETERS:   None.
      662    17774              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVB-type
      663    17775                            movement between COBOL and FIELD DADs is required.
      664    17776                            Calls QCC$CDB for the real move.
      665    17777              ENVIRONMENT:  Nothing unusual.
      666    17778              INPUT:        QI_1,
      667    17779                            FPL rununit static data following the op-code.
      668    17780              OUTPUT:       Target DAD filled up appropriately.
      669    17781              SCRATCH:      Various otter data.
      670    17782              DESCRIPTION:  Move that stuff:  BINARY target;
      671    17783                                              packed or unpacked source.
      672    17784        */
      673    17785
      674    17786    1       NICE_NORMAL_MOVE = %NO;
      675    17787
      676    17788    1       CALL PREPARE_FOR_DAD_SOURCE;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:23   
      677    17789
      678    17790    1       QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;
      679    17791
      680    17792    1       GOTO SO_DO_THE_MOVN_ALREADY;
      681    17793
      682    17794    1   QBM$MOVNA: ENTRY;
      683    17795
      684    17796        /*D*  NAME:         QBM$MOVNA
      685    17797              CALL:         CALL QBM$MOVNA;
      686    17798              PARAMETERS:   None.
      687    17799              INTERFACE:    Called by QAT$TALLYHO when a MOVNA op-code is
      688    17800                            encountered.
      689    17801                            Calls QCC$DMC for the real move.
      690    17802              ENVIRONMENT:  Nothing unusual.
      691    17803              INPUT:        QI_1,
      692    17804                            FPL rununit static data following the op-code.
      693    17805              OUTPUT:       Target DAD filled up appropriately.
      694    17806              SCRATCH:      Various otter data.
      695    17807              DESCRIPTION:  Move that stuff:  NUMERIC (unpacked) target;
      696    17808                                              QI_1.ACCUM (packed) source.
      697    17809                            If a SIZE ERROR occurred getting whatever's in
      698    17810                            the accumulator (QI_1.ACCUM) in there, and if an
      699    17811                            ON SIZE ERROR clause is present, don't do the move.
      700    17812        */
      701    17813
      702    17814    1       NICE_NORMAL_MOVE = %YES;
      703    17815    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVNA.NEXT_CODE@P );
      704    17816
      705    17817    1       GOTO SETUP_ACCUMULATOR_AS_SOURCE;
      706    17818
      707    17819    1   QBM$MOVPA: ENTRY;
      708    17820
      709    17821        /*D*  NAME:         QBM$MOVPA
      710    17822              CALL:         CALL QBM$MOVPA;
      711    17823              PARAMETERS:   None.
      712    17824              INTERFACE:    Called by QAT$TALLYHO when a MOVPA op-code is
      713    17825                            encountered.
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:24   
      714    17826                            Calls QCC$DMC for the real move.
      715    17827              ENVIRONMENT:  Nothing unusual.
      716    17828              INPUT:        QI_1,
      717    17829                            FPL rununit static data following the op-code.
      718    17830              OUTPUT:       Target DAD filled up appropriately.
      719    17831              SCRATCH:      Various otter data.
      720    17832              DESCRIPTION:  Move that stuff:  PACKED target;
      721    17833                                              QI_1.ACCUM (packed) source.
      722    17834                            If a SIZE ERROR occurred getting whatever's in
      723    17835                            the accumulator (QI_1.ACCUM) in there, and if an
      724    17836                            ON SIZE ERROR clause is present, don't do the move.
      725    17837        */
      726    17838
      727    17839    1       NICE_NORMAL_MOVE = %YES;
      728    17840    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVPA.NEXT_CODE@P );
      729    17841
      730    17842    1       GOTO SETUP_ACCUMULATOR_AS_SOURCE;
      731    17843
      732    17844    1   QBM$MOVBA: ENTRY;
      733    17845
      734    17846        /*D*  NAME:         QBM$MOVBA
      735    17847              CALL:         CALL QBM$MOVBA;
      736    17848              PARAMETERS:   None.
      737    17849              INTERFACE:    Called by QAT$TALLYHO when a MOVBA op-code is
      738    17850                            encountered.
      739    17851                            Calls QCC$CDB for the real move.
      740    17852              ENVIRONMENT:  Nothing unusual.
      741    17853              INPUT:        QI_1,
      742    17854                            FPL rununit static data following the op-code.
      743    17855              OUTPUT:       Target DAD filled up appropriately.
      744    17856              SCRATCH:      Various otter data.
      745    17857              DESCRIPTION:  Move that stuff:  BINARY target;
      746    17858                                              QI_1.ACCUM (packed) source.
      747    17859                            If a SIZE ERROR occurred getting whatever's in
      748    17860                            the accumulator (QI_1.ACCUM) in there, and if an
      749    17861                            ON SIZE ERROR clause is present, don't do the move.
      750    17862        */
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:25   
      751    17863
      752    17864    1       NICE_NORMAL_MOVE = %NO;
      753    17865    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVBA.NEXT_CODE@P );
      754    17866
      755    17867    1   SETUP_ACCUMULATOR_AS_SOURCE:
      756    17868
      757    17869    1       IF  QI_1.A_REG > 0
      758    17870    1         AND QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      759    17871    1       THEN
      760    17872              /* Somebody said "...ON SIZE ERROR...", and QI_1.A_REG
      761    17873                 is set, so an error has occured in a previous
      762    17874                 routine while sticking something into the accumulator.
      763    17875                 Solution:  give up.  */
      764    17876    1         RETURN;
      765    17877
      766    17878    1       CALL PREPARE_FOR_ACCUMULATOR_SOURCE;
      767    17879
      768    17880    1       CALL QCS$SETUP_TARGET;
      769    17881
      770    17882    1       QI_1.A_REG = 0;
      771    17883
      772    17884    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      773    17885    1       THEN
      774    17886    1         QI_1.OP.SIZE_ERROR = %QI#CHECK_FOR_SIZE_ERROR;
      775    17887    1       ELSE
      776    17888    1         QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;
      777    17889
      778    17890    1   SO_DO_THE_MOVN_ALREADY:
      779    17891
      780    17892    1       IF NICE_NORMAL_MOVE
      781    17893    1       THEN
      782    17894
      783    17895    1         CALL QCC$DMC ( QI_1.OP )
      784    17896    2         WHENALTRETURN DO;
      785    17897    2             QI_1.A_REG = 1;
      786    17898    2           END;
      787    17899
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:26   
      788    17900    1       ELSE
      789    17901
      790    17902    1         CALL QCC$CDB ( QI_1.OP )
      791    17903    2         WHENALTRETURN DO;
      792    17904    2             QI_1.A_REG = 1;
      793    17905    2           END;
      794    17906
      795    17907    1       RETURN;
      796    17908        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:27   
      797    17909    1   QBM$MOVNE: ENTRY;
      798    17910
      799    17911        /*D*  NAME:         QBM$MOVNE
      800    17912              CALL:         CALL QBM$MOVNE;
      801    17913              PARAMETERS:   None.
      802    17914              INTERFACE:    Called by QAT$TALLYHO when a MOVNE op-code is
      803    17915                            encountered.
      804    17916                            Calls QCC$DME for the real move.
      805    17917              ENVIRONMENT:  Nothing unusual.
      806    17918              INPUT:        QI_1,
      807    17919                            FPL rununit static data following the op-code.
      808    17920              OUTPUT:       Target DAD filled up appropriately.
      809    17921              SCRATCH:      Various otter data.
      810    17922              DESCRIPTION:  Move that stuff:  NUMERIC EDITED target;
      811    17923                                              packed or unpacked source.
      812    17924                            BINARY sources have already been converted via QBC$CNVBxx.
      813    17925        */
      814    17926
      815    17927    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVNE.NEXT_CODE@P );
      816    17928
      817    17929    1       CALL QCS$SETUP_SOURCE;
      818    17930
      819    17931    1       CALL QCS$SETUP_TARGET;
      820    17932
      821    17933    1       QI_1.A_REG = 0;
      822    17934
      823    17935    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      824    17936    1       THEN
      825    17937    1         QI_1.OP.SIZE_ERROR = %QI#CHECK_FOR_SIZE_ERROR;
      826    17938    1       ELSE
      827    17939    1         QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;
      828    17940
      829    17941    1       GOTO SO_KEEP_MOVNEING_ALREADY;
      830    17942
      831    17943    1   QBM$MOVNE_VP: ENTRY;
      832    17944
      833    17945        /*D*  NAME:         QBM$MOVNE_VP
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:28   
      834    17946              CALL:         CALL QBM$MOVNE_VP;
      835    17947              PARAMETERS:   None.
      836    17948              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVNE-type
      837    17949                            movement between COBOL and FIELD DADs is required.
      838    17950                            Calls QCC$DME for the real move.
      839    17951              ENVIRONMENT:  Nothing unusual.
      840    17952              INPUT:        QI_1,
      841    17953                            FPL rununit static data following the op-code.
      842    17954              OUTPUT:       Target DAD filled up appropriately.
      843    17955              SCRATCH:      Various otter data.
      844    17956              DESCRIPTION:  Move that stuff:  NUMERIC EDITED target;
      845    17957                                              packed or unpacked source.
      846    17958                            BINARY sources have already been converted by QBV$xxxxxxx.
      847    17959        */
      848    17960
      849    17961    1       QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;
      850    17962
      851    17963    1   SO_KEEP_MOVNEING_ALREADY:
      852    17964            /* If this guy said 'MOVE "333" TO EDITED-FIELD' then
      853    17965               SETUP has given us an ALPHANUMERIC-like descriptor.
      854    17966               Two things are wrong with it:  it's indexed by R1,
      855    17967               and the FILL bit's on, which makes it look like
      856    17968               'SIGN LEADING SEPARATE' in DISPLAY-ese.  Yuck. */
      857    17969    1       IF QI_1.TYPE.S = %QI#TYPE_ALPHANUMERIC
      858    17970    1       THEN
      859    17971    2         DO;
      860    17972    2           QI_1.OP.CIP.S.AS = %QI#CIP_DEFAULT_AS;
      861    17973    2           QI_1.OP.CIP.S.CD.SIGN = %QI#CD_UNSIGNED;
      862    17974    2         END;
      863    17975
      864    17976    1       GOTO SO_DO_THE_MOVNE_ALREADY;
      865    17977
      866    17978    1   QBM$MOVNEA: ENTRY;
      867    17979
      868    17980        /*D*  NAME:         QBM$MOVNEA
      869    17981              CALL:         CALL QBM$MOVNEA;
      870    17982              PARAMETERS:   None.
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:29   
      871    17983              INTERFACE:    Called by QAT$TALLYHO when a MOVNEA op-code is
      872    17984                            encountered.
      873    17985                            Calls QCC$DME for the real move.
      874    17986              ENVIRONMENT:  Nothing unusual.
      875    17987              INPUT:        QI_1,
      876    17988                            FPL rununit static data following the op-code.
      877    17989              OUTPUT:       Target DAD filled up appropriately.
      878    17990              SCRATCH:      Various otter data.
      879    17991              DESCRIPTION:  Move that stuff:  NUMERIC EDITED target;
      880    17992                                              QI_1.ACCUM (packed) source.
      881    17993                            If a SIZE ERROR occurred getting whatever's in
      882    17994                            the accumulator (QI_1.ACCUM) in there, and if an
      883    17995                            ON SIZE ERROR clause is present, don't do the move.
      884    17996        */
      885    17997
      886    17998    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVNEA.NEXT_CODE@P );
      887    17999
      888    18000    1       IF  QI_1.A_REG > 0
      889    18001    1         AND QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      890    18002    1       THEN
      891    18003              /* Somebody said "...ON SIZE ERROR...", and QI_1.A_REG
      892    18004                 is set, so an error has occured in a previous
      893    18005                 routine while sticking something into the accumulator.
      894    18006                 Solution:  give up.  */
      895    18007    1         RETURN;
      896    18008
      897    18009            /* Set up the accumulator as the source... */
      898    18010    1       CALL PREPARE_FOR_ACCUMULATOR_SOURCE;
      899    18011
      900    18012    1       CALL QCS$SETUP_TARGET;
      901    18013
      902    18014    1       QI_1.A_REG = 0;
      903    18015
      904    18016    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      905    18017    1       THEN
      906    18018    1         QI_1.OP.SIZE_ERROR = %QI#CHECK_FOR_SIZE_ERROR;
      907    18019    1       ELSE
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:30   
      908    18020    1         QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;
      909    18021
      910    18022    1   SO_DO_THE_MOVNE_ALREADY:
      911    18023
      912    18024    1       QI_1.OP.CIP.T.AS = %QI#CIP_DEFAULT_AS;
      913    18025
      914    18026            /* We'll use a handy-dandy canned ALPHANUMERIC data descriptor
      915    18027               to point to the PICture string of the target... */
      916    18028    1       QI_1.OP.CIP.AUX = QI_PICTURE_STRING;
      917    18029
      918    18030            /* We'll really be pointing at the byte following
      919    18031               MOP_STRING_COUNT, once the offset of 1 in the CIP
      920    18032               descriptor is taken into account.  */
      921    18033    1       QI_1.OP.DATA_A$ (%QI#PICTURE_STRING) =
      922    18034    1         ADDR ( QI_1.PICTURE_STRING.T$ -> QI$NUMERIC_PICTURE_STRING.MOP_STRING_COUNT );
      923    18035
      924    18036            /* This next twelve-foot-long assignment is trying to say
      925    18037               that QCC$DME has to know the length of the intermediate
      926    18038               result, which is determined via the max_digit_count of
      927    18039               the picture string itself, i.e., the maximum number of
      928    18040               numeric digits it can hold, e.g.:
      929    18041                       PICture              max_digit_count
      930    18042                        99.99                      4
      931    18043                      $$$9.99                      5 (yeah, 5)
      932    18044                        ZZZZ.                      4
      933    18045                              an' like dat.  */
      934    18046    1       QI_1.OP.PICTURE_STRING.INTERMEDIATE_RESULT_LEN =
      935    18047    1         QI_1.PICTURE_STRING.T$ -> QI$NUMERIC_PICTURE_STRING.MAX_DIGIT_COUNT;
      936    18048    1       QI_1.OP.LEN.AUX =
      937    18049    1         QI_1.PICTURE_STRING.T$ -> QI$NUMERIC_PICTURE_STRING.MOP_STRING_COUNT;
      938    18050    1       QI_1.OP.PICTURE_STRING.DEC =
      939    18051    1         QI_1.PICTURE_STRING.T$ -> QI$NUMERIC_PICTURE_STRING.DECIMAL_SCALING;
      940    18052
      941    18053    1       CALL QCC$DME ( QI_1.OP )
      942    18054    2       WHENALTRETURN DO;
      943    18055    2           QI_1.A_REG = 1;
      944    18056    2         END;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:31   
      945    18057
      946    18058    1       RETURN;
      947    18059        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:32   
      948    18060    1   PREPARE_FOR_DAD_SOURCE: PROC;
      949    18061
      950    18062        /*I*  NAME:         PREPARE_FOR_DAD_SOURCE
      951    18063              PURPOSE:      Setup various stuff for numeric-type MOVEs
      952    18064                            with DADs for sources.
      953    18065              CALL:         CALL PREPARE_FOR_DAD_SOURCE
      954    18066              PARAMETERS:   None.
      955    18067              DATA:         QI_1.all_kinds_of_stuff
      956    18068              DESCRIPTION:  Fix various stuff that would normally screw up
      957    18069                            numeric-type moves with alphanumeric-type sources.
      958    18070                            Chop off the source if it's too big, and put in
      959    18071                            a default (non-indexed) address syllable.
      960    18072        */
      961    18073
      962    18074    2       IF QI_1.TYPE.S = %QI#TYPE_ALPHANUMERIC
      963    18075    2       THEN
      964    18076    3         DO;
      965    18077    3           IF QI_1.OP.LEN.S > %QI#MAX_DISPLAY
      966    18078    3           THEN
      967    18079    4             DO;
      968    18080
      969    18081    4               LEFT_TRUNCATION_LENGTH = QI_1.OP.LEN.S
      970    18082    4                 - %QI#MAX_DISPLAY_LENGTH;
      971    18083    4               QI_1.OP.DATA.S$ = PINCRW ( QI_1.OP.DATA.S$,
      972    18084    4                 ( LEFT_TRUNCATION_LENGTH / 2 ) );
      973    18085    4               QI_1.OFFSET.S = QI_1.OFFSET.S
      974    18086    4                 + LEFT_TRUNCATION_LENGTH;
      975    18087    4               QI_1.OP.CIP.S.CD.OFFSET = QI_1.OFFSET.S;
      976    18088    4               QI_1.OP.LEN.S = %QI#MAX_DISPLAY;
      977    18089
      978    18090    4             END;
      979    18091    3           QI_1.OP.CIP.S.AS = %QI#CIP_DEFAULT_AS;
      980    18092    3           QI_1.OP.CIP.S.LEN = QI_1.OP.LEN.S;
      981    18093    3           QI_1.OP.CIP.S.CD.SIGN = %QI#CD_UNSIGNED;
      982    18094    3         END;
      983    18095
      984    18096    2       RETURN;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:33   
      985    18097
      986    18098    2   END PREPARE_FOR_DAD_SOURCE;
      987    18099        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:34   
      988    18100    1   PREPARE_FOR_ACCUMULATOR_SOURCE: PROC;
      989    18101
      990    18102        /*I*  NAME:         PREPARE_FOR_ACCUMULATOR_SOURCE
      991    18103              PURPOSE:      Setup various stuff for numeric-type MOVEs
      992    18104                            with QI_1.ACCUM for sources.
      993    18105              CALL:         CALL PREPARE_FOR_ACCUMULATOR_SOURCE
      994    18106              PARAMETERS:   None.
      995    18107              DATA:         QI_1.all_kinds_of_stuff
      996    18108              DESCRIPTION:  Just sort of fake a call to QCS$SETUP_SOURCE as if
      997    18109                            that routine were callable with QI_1.ACCUM as the
      998    18110                            DAD to "set up".
      999    18111        */
     1000    18112
     1001    18113            /* Set up accumulator attributes... */
     1002    18114    2       QI_1.OP.CIP.S_A (%QI#DEFAULT_SOURCE) = QI_ACCUMULATOR_DAD.CIP_A (0);
     1003    18115    2       QI_1.OP.DATA_A$ (%QI#DEFAULT_SOURCE) = ADDR ( QI_1.ACCUM (0) );
     1004    18116
     1005    18117            /* The following code should probably be thrown away if
     1006    18118               it's found to be useless. */
     1007    18119    2       QI_1.OP.DEC_A (%QI#DEFAULT_SOURCE) = %QI#ACCUMULATOR_DEC;
     1008    18120    2       QI_1.IS_ALL_LIT_A (%QI#DEFAULT_SOURCE) = %NO;
     1009    18121    2       QI_1.OP.LEN_A (%QI#DEFAULT_SOURCE) = %QI#ACCUMULATOR_LEN;
     1010    18122    2       QI_1.OFFSET_A (%QI#DEFAULT_SOURCE) = %QI#ACCUMULATOR_OFFSET;
     1011    18123    2       QI_1.TYPE_A (%QI#DEFAULT_SOURCE) = %QI#ACCUMULATOR_TYPE;
     1012    18124    2       QI_1.DAD_A$ (%QI#DEFAULT_SOURCE) = ADDR (QI_ACCUMULATOR_DAD);
     1013    18125
     1014    18126    2       RETURN;
     1015    18127
     1016    18128    2   END PREPARE_FOR_ACCUMULATOR_SOURCE;
     1017    18129
     1018    18130    1   END QBM$MOVES;

PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:35   
--  Include file information  --

   QCD_DE_EDIT_M.:E05TOU  is referenced.
   QI_MACROS_M.:E05TOU  is referenced.
   QI_PERR_C.:E05TOU  is referenced.
   QI_EQUATES_E.:E05TOU  is referenced.
   QG_MACRO_M.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure QBM$MOVES.

   Procedure QBM$MOVES requires 1548 words for executable code.
   Procedure QBM$MOVES requires 54 words of local(AUTO) storage.

    No errors detected in file QBM$MOVES.:E05TSI    .

PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:36   

 Object Unit name= QBM$MOVES                                  File name= QBM$MOVES.:E05TOU
 UTS= JUL 30 '97 04:52:34.72 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Proc  even  none  1548    60C  QBM$MOVES
    1  RoData even  none     9      9  QBM$MOVES

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        0  QBM$MOVES
     0      7                  yes      Std        0  QBM$MOVA
     0     22                  yes      Std        0  QBM$MOVA_VP
     0     95                  yes      Std        0  QBM$MOVAE
     0     B0                  yes      Std        0  QBM$MOVAE_VP
     0    1A4                  yes      Std        0  QBM$MOVAJ
     0    1BF                  yes      Std        0  QBM$MOVAJ_VP
     0    285                  yes      Std        0  QBM$MOVDE
     0    2B0                  yes      Std        0  QBM$MOVDE_VP
     0    2F3                  yes      Std        0  QBM$MOVG
     0    3F2                  yes      Std        0  QBM$MOVN
     0    404                  yes      Std        0  QBM$MOVP
     0    416                  yes      Std        0  QBM$MOVB
     0    449                  yes      Std        0  QBM$MOVN_VP
     0    450                  yes      Std        0  QBM$MOVP_VP
     0    460                  yes      Std        0  QBM$MOVB_VP
     0    46F                  yes      Std        0  QBM$MOVNA
     0    481                  yes      Std        0  QBM$MOVPA
     0    493                  yes      Std        0  QBM$MOVBA
     0    4F1                  yes      Std        0  QBM$MOVNE
     0    51F                  yes      Std        0  QBM$MOVNE_VP
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:37   
     0    538                  yes      Std        0  QBM$MOVNEA

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 QCS$SETUP_SOURCE
         yes           Std       0 QCS$SETUP_TARGET
         yes           Std       0 QCA$ALL_LITERAL_MOVE_A
         yes           Std       4 QCE$ERROR_INTERNAL
         yes           Std       0 QCU$UNSIGN_SOURCE
         yes           Std       0 QCA$ALL_LITERAL_MOVE_AE
         yes           Std       0 QCS$SETUP_AUX
         yes           Std       1 QCD$DE_EDIT
         yes           Std       4 QCE$ERROR
 yes     yes           Std       1 QCC$DMC
 yes     yes           Std       1 QCC$CDB
         yes           Std       1 QCC$ALR
         yes           Std       0 QCA$ALL_LITERAL_MOVE_AJ
 yes     yes           Std       1 QCC$DME
                       nStd      0 X6A_AUTO_0
                       nStd      0 X6A_ARET
                       nStd      0 X6C_ALR

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     QI_1                                  QI_4_CHAR_ALPHANUMERIC                QI_31_DIGIT_SLS_DISPLAY
     QI_16_BIT_BINARY                      QI_32_BIT_BINARY                      QI_31_DIGIT_ST_PACKED
     QI_PICTURE_STRING                     QI_ACCUMULATOR_DAD               r    G$ROS$
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:38   


        1        1        /*M* QBM$MOVES:  MOVE one item to another.  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=0,DCI=4,CSI=2,IAD=2,DTI=2,AND,ECI=0,DIN=2,STI=2 */
        8        8
        9        9        /*P*  NAME:         QBM$MOVES
       10       10              PURPOSE:      MOVE one item to another.
       11       11              DESCRIPTION:  Execute a MOVExx op-code, whose arguments are
       12       12                            a couple of DADs and, possibly, some flags indicating
       13       13                            lengths of DADs, etc.  Consult the QI$OP_MOVxx %MACROS
       14       14                            corresponding to the op-code of interest.
       15       15                            Note that all MOVEs are executed by calling a routine
       16       16                            which is specific to the target DAD's type, except:
       17       17                            1)  ALL "literal" MOVEs, which are specific to the source
       18       18                                (which is an ALL "literal");
       19       19                            2)  QBM$MOVDE MOVEs, which are specific to the source
       20       20                                (which is NUMERIC EDITED);
       21       21                            3)  QBM$MOVG MOVEs, which are specific to both the
       22       22                                source and target, in that either one may be the
       23       23                                group item.
       24       24                            The QBM$MOVxx_VP entry points are called by
       25       25                            QBV$VERIFY and QBV$PRESENT.  These entries generally
       26       26                            "skip around" the calls to QCS$SETUP_whatever, and
       27       27                            are not actually used to execute a MOVE op-code, but
       28       28                            rather re-use this code in moving data between COBOL
       29       29                            and FIELD items during VERIFYs and PRESENTs.
       30       30        */
       31       31
       32       32        QBM$MOVES: PROC;

     32   0 000000  D380 0000 0000  xent QBM$MOVES       LNJ,B5   X6A_AUTO_0
          0 000003       0036 0000                       DC       54,0
          0 000005  0F81 0006                            B        s:17205,PREL
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:39   

       33       33
       34       34          %INCLUDE LCP_6;
       35      225
       36      226          %INCLUDE QG_MACRO_M;
       37      363          %INCLUDE QI_EQUATES_E;
       38      722          %INCLUDE QI_PERR_C;
       39      890          %INCLUDE QI_MACROS_M;
       40     5948          %QI$ALL;
       41    17061
       42    17062    1     DCL LEFT_TRUNCATION_LENGTH UBIN;
       43    17063    1     DCL MOP_STRING_INDEX UBIN;
       44    17064    1     DCL NICE_NORMAL_MOVE BIT(1) ALIGNED;
       45    17065    1     DCL PARALLEL_TABLE_INDEX UBIN;
       46    17066    1     DCL OLD_SOURCE_INDEX UBIN;
       47    17067    1     DCL OLD_SOURCE_LENGTH UBIN;
       48    17068    1     DCL VARIABLE_SOURCE$ CPTR;
       49    17069    1     DCL VARIABLE_TARGET$ CPTR;
       50    17070
       51    17071    1     DCL QCA$ALL_LITERAL_MOVE_A ENTRY;
       52    17072    1     DCL QCA$ALL_LITERAL_MOVE_AE ENTRY;
       53    17073    1     DCL QCA$ALL_LITERAL_MOVE_AJ ENTRY;
       54    17074    1     DCL QCC$ALR ENTRY (1);
       55    17075    1     DCL QCC$CDB ENTRY (1) ALTRET;
       56    17076    1     DCL QCC$DMC ENTRY (1) ALTRET;
       57    17077    1     DCL QCC$DME ENTRY (1) ALTRET;
       58    17078    1     DCL QCD$DE_EDIT ENTRY (1);
       59    17079    1     DCL QCE$ERROR ENTRY (4);
       60    17080    1     DCL QCE$ERROR_INTERNAL ENTRY (4);
       61    17081    1     DCL QCS$SETUP_AUX ENTRY;
       62    17082    1     DCL QCS$SETUP_SOURCE ENTRY;
       63    17083    1     DCL QCS$SETUP_TARGET ENTRY;
       64    17084    1     DCL QCU$UNSIGN_SOURCE ENTRY;
       65    17085
       66    17086          %SET LISTMAC = '1'B;
       67    17087
       68    17088          %INCLUDE QCD_DE_EDIT_M;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:40   
       69    17118          %QCD@DE_EDIT;
             17119            %BEGIN_MACRO ( STCLASS = STCLASS );
             17120            %SET LISTDIR = '0'B;
             17133    1     DCL 1 QCD@DE_EDIT ALIGNED,
             17134    1           2 IS_NUMBER_INVALID BIT(1) ALIGNED,
             17135                                           /* Set to 1 if the input is bad,
             17136                                                     0 otherwise.           */
             17137    1           2 RESULT ALIGNED,
             17138    1             3 DIGIT_A(0:30) UBIN BYTE UNAL,
             17139                                           /* The de-edited number, in the form:
             17140                                              UNPACKED((INDEX(RESULT),B7),0,31,LEADING) */
             17141    1             3 DEC SBIN,
             17142                                           /* Decimal position for DIGIT_A */
             17143    1             3 INPUT_SIZE SBIN;
             17144                                           /* Length of input minus
             17145                                              leading or trailing blanks */
             17152            %ENDIF;
       70    17155
       71    17156          %QI@OTTER_SPACE;
             17157            %BEGIN_MACRO ( STCLASS = STCLASS );
             17158            %SET LISTDIR = '0'B;
             17171    1       DCL 1 QI@OTTER_SPACE AUTO ALIGNED,
             17172    1             2 *(0:15) UBIN BYTE UNAL /* Was INIT'ed to:  (0*0)/**/;
             17173    1       DCL 1 QI@OTTER_SPACE_CA (0:15) REDEF QI@OTTER_SPACE CHAR(1) UNAL;
             17174    1       DCL 1 QI@OTTER_SPACE_BA (0:15) REDEF QI@OTTER_SPACE UBIN BYTE UNAL;
             17181            %ENDIF;
       72    17184
       73    17185          %SET LISTMAC = '0'B;
       74    17186        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:41   
       75    17187    1   QBM$MOVA: ENTRY;

  17187   0 000007  D380 0000 0000  xent QBM$MOVA        LNJ,B5   X6A_AUTO_0
          0 00000A       0036 0000                       DC       54,0

       76    17188
       77    17189        /*D*  NAME:         QBM$MOVA
       78    17190              CALL:         CALL QBM$MOVA;
       79    17191              PARAMETERS:   None.
       80    17192              INTERFACE:    Called by QAT$TALLYHO when a MOVA op-code is
       81    17193                            encountered.
       82    17194                            Calls QCA$ALL_LITERAL_MOVE_A or QCC$ALR for the real move.
       83    17195              ENVIRONMENT:  Nothing unusual.
       84    17196              INPUT:        QI_1,
       85    17197                            FPL rununit static data following the op-code.
       86    17198              OUTPUT:       Target DAD filled up appropriately.
       87    17199              SCRATCH:      Various otter data.
       88    17200              DESCRIPTION:  Move that stuff:  ALPHANUMERIC target.
       89    17201                            QCU$UNSIGN is used to unpack and/or strip signs;
       90    17202                            BINARY sources have already been converted via QBC$CNVBxx.
       91    17203        */
       92    17204
       93    17205    1       CALL QCS$SETUP_SOURCE;

  17205   0 00000C  CBF0 0000                            LAB,B4   0,IMO
          0 00000E  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 000011       0001                            DC       s:17206,PREL

       94    17206    1       CALL QCS$SETUP_TARGET;

  17206   0 000012  CBF0 0000                            LAB,B4   0,IMO
          0 000014  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 000017       0001                            DC       s:17208,PREL

       95    17207
       96    17208    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVA.NEXT_CODE@P );

PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:42   
  17208   0 000018  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00001B  DBC6 0003                            LAB,B5   3,B6
          0 00001D  DF80 0000 0006  xsym                 STB,B5   QI_1+6
          0 000020  0F81 0006                            B        s:17228,PREL

       97    17209
       98    17210    1   QBM$MOVA_VP: ENTRY;

  17210   0 000022  D380 0000 0000  xent QBM$MOVA_VP     LNJ,B5   X6A_AUTO_0
          0 000025       0036 0000                       DC       54,0

       99    17211
      100    17212        /*D*  NAME:         QBM$MOVA_VP
      101    17213              CALL:         CALL QBM$MOVA_VP;
      102    17214              PARAMETERS:   None.
      103    17215              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVA-type
      104    17216                            movement between COBOL and FIELD DADs is required.
      105    17217                            Calls QCA$ALL_LITERAL_MOVE_A or QCC$ALR for the real move.
      106    17218              ENVIRONMENT:  Nothing unusual.
      107    17219              INPUT:        QI_1,
      108    17220                            FPL rununit static data following the op-code.
      109    17221              OUTPUT:       Target DAD filled up appropriately.
      110    17222              SCRATCH:      Various otter data.
      111    17223              DESCRIPTION:  Move that stuff:  ALPHANUMERIC target.
      112    17224                            QCU$UNSIGN is used to unpack and/or strip signs;
      113    17225                            BINARY sources have already been converted by QBV$xxxxxxx.
      114    17226        */
      115    17227
      116    17228    1       IF QI_1.IS_ALL_LIT.S

  17228   0 000027  8980 0000 0038  xsym                 CMZ      QI_1+56
          0 00002A  0881 000A                            BAGE     s:17235,PREL

      117    17229    1       THEN
      118    17230    2         DO;

      119    17231    2           CALL QCA$ALL_LITERAL_MOVE_A;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:43   

  17231   0 00002C  CBF0 0000                            LAB,B4   0,IMO
          0 00002E  E380 0000 0000  xent                 LNJ,B6   QCA$ALL_LITERAL_MOVE_A
          0 000031       0001                            DC       s:17232,PREL

      120    17232    2           RETURN;

  17232   0 000032  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      121    17233    2         END;
      122    17234
      123    17235    1       QI_1.OP.FILL_CHAR.TEXT = %QI#CIP_BLANK_FILL;

  17235   0 000035  6C20                                 LDV,R6   32
          0 000036  E780 0000 0030  xsym                 STH,R6   QI_1+48

      124    17236
      125    17237    1       QI_1.OTTER_SPACE.S$ = ADDR ( QI@OTTER_SPACE );

  17237   0 000039  EBC7 0021                            LAB,B6   QI@OTTER_SPACE,AUTO
          0 00003B  EF80 0000 0044  xsym                 STB,B6   QI_1+68

      126    17238    1       CALL QCU$UNSIGN_SOURCE;

  17238   0 00003E  CBF0 0000                            LAB,B4   0,IMO
          0 000040  E380 0000 0000  xent                 LNJ,B6   QCU$UNSIGN_SOURCE
          0 000043       0001                            DC       s:17240,PREL

      127    17239
      128    17240    1       VARIABLE_SOURCE$ = PINCRC ( QI_1.OP.DATA.S$,

  17240   0 000044  E800 0000 0041  xsym                 LDR,R6   QI_1+65
          0 000047  EA00 0000 0029  xsym                 ADD,R6   QI_1+41
          0 00004A  EF47 002C                            STR,R6   QI@OTTER_SPACE+11,AUTO
          0 00004C  8C80 0000 0020  xsym                 LDI      QI_1+32
          0 00004F  7031                                 DCL,R7   1
          0 000050  8D47 002D                            SDI      QI@OTTER_SPACE+12,AUTO
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:44   
          0 000052  F847 002C                            LDR,R7   QI@OTTER_SPACE+11,AUTO
          0 000054  6C00                                 LDV,R6   0
          0 000055  8447 002D                            AID      QI@OTTER_SPACE+12,AUTO
          0 000057  7071                                 DCR,R7   1
          0 000058  8D47 000A                            SDI      VARIABLE_SOURCE$,AUTO

      129    17241    1         QI_1.OFFSET.S
      130    17242    1         + QI_1.OP.INX.S );
      131    17243
      132    17244    1       VARIABLE_TARGET$ = PINCRC ( QI_1.OP.DATA.T$,

  17244   0 00005A  D800 0000 0042  xsym                 LDR,R5   QI_1+66
          0 00005D  DA00 0000 002A  xsym                 ADD,R5   QI_1+42
          0 000060  8C80 0000 0022  xsym                 LDI      QI_1+34
          0 000063  7031                                 DCL,R7   1
          0 000064  8D47 002C                            SDI      QI@OTTER_SPACE+11,AUTO
          0 000066  F855                                 LDR,R7   R5
          0 000067  6C00                                 LDV,R6   0
          0 000068  8447 002C                            AID      QI@OTTER_SPACE+11,AUTO
          0 00006A  7071                                 DCR,R7   1
          0 00006B  8D47 000C                            SDI      VARIABLE_TARGET$,AUTO

      133    17245    1         QI_1.OFFSET.T
      134    17246    1         + QI_1.OP.INX.T );
      135    17247
      136    17248    1       VARIABLE_TARGET$ -> QI$VARIABLE_STRING_TARGET.TEXT =

  17248   0 00006D  B856                                 LDR,R3   R6
          0 00006E  E570 7FFF                            AND,R6   32767,IMO
          0 000070  8D47 002C                            SDI      QI@OTTER_SPACE+11,AUTO
          0 000072  ECC7 002C                            LDB,B6   QI@OTTER_SPACE+11,AUTO
          0 000074  304F                                 SOR,R3   15
          0 000075  8CC7 000A                            LDI      VARIABLE_SOURCE$,AUTO
          0 000077  A856                                 LDR,R2   R6
          0 000078  E570 7FFF                            AND,R6   32767,IMO
          0 00007A  8D47 002E                            SDI      QI@OTTER_SPACE+13,AUTO
          0 00007C  DCC7 002E                            LDB,B5   QI@OTTER_SPACE+13,AUTO
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:45   
          0 00007E  204F                                 SOR,R2   15
          0 00007F  AF47 0030                            STR,R2   QI@OTTER_SPACE+15,AUTO
          0 000081  BF47 0031                            STR,R3   QI@OTTER_SPACE+16,AUTO
          0 000083  DFC7 0032                            STB,B5   QI@OTTER_SPACE+17,AUTO
          0 000085  EFC7 0034                            STB,B6   QI@OTTER_SPACE+19,AUTO
          0 000087  AB85                                 LAB,B2   ,B5
          0 000088  E800 0000 0026  xsym                 LDR,R6   QI_1+38
          0 00008B  BB86                                 LAB,B3   ,B6
          0 00008C  F800 0000 0027  xsym                 LDR,R7   QI_1+39
          0 00008F  D380 0000 0000  xent                 LNJ,B5   X6C_ALR

      137    17249    1         VARIABLE_SOURCE$ -> QI$VARIABLE_STRING_SOURCE.TEXT;
      138    17250
      139    17251    1       RETURN;

  17251   0 000092  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      140    17252        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:46   
      141    17253    1   QBM$MOVAE: ENTRY;

  17253   0 000095  D380 0000 0000  xent QBM$MOVAE       LNJ,B5   X6A_AUTO_0
          0 000098       0036 0000                       DC       54,0

      142    17254
      143    17255        /*D*  NAME:         QBM$MOVAE
      144    17256              CALL:         CALL QBM$MOVAE;
      145    17257              PARAMETERS:   None.
      146    17258              INTERFACE:    Called by QAT$TALLYHO when a MOVAE op-code is
      147    17259                            encountered.
      148    17260                            Calls QCA$ALL_LITERAL_MOVE_AE or QCC$ALR for the real move.
      149    17261              ENVIRONMENT:  Nothing unusual.
      150    17262              INPUT:        QI_1,
      151    17263                            FPL rununit static data following the op-code.
      152    17264              OUTPUT:       Target DAD filled up appropriately.
      153    17265              SCRATCH:      Various otter data.
      154    17266              DESCRIPTION:  Move that stuff:  ALPHANUMERIC EDITED target.
      155    17267                            QCU$UNSIGN is used to unpack and/or strip signs;
      156    17268                            BINARY sources have already been converted via QBC$CNVBxx.
      157    17269        */
      158    17270
      159    17271    1       CALL QCS$SETUP_SOURCE;

  17271   0 00009A  CBF0 0000                            LAB,B4   0,IMO
          0 00009C  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 00009F       0001                            DC       s:17272,PREL

      160    17272    1       CALL QCS$SETUP_TARGET;

  17272   0 0000A0  CBF0 0000                            LAB,B4   0,IMO
          0 0000A2  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 0000A5       0001                            DC       s:17274,PREL

      161    17273
      162    17274    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVAE.NEXT_CODE@P );

PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:47   
  17274   0 0000A6  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 0000A9  DBC6 0003                            LAB,B5   3,B6
          0 0000AB  DF80 0000 0006  xsym                 STB,B5   QI_1+6
          0 0000AE  0F81 0006                            B        s:17294,PREL

      163    17275
      164    17276    1   QBM$MOVAE_VP: ENTRY;

  17276   0 0000B0  D380 0000 0000  xent QBM$MOVAE_VP    LNJ,B5   X6A_AUTO_0
          0 0000B3       0036 0000                       DC       54,0

      165    17277
      166    17278        /*D*  NAME:         QBM$MOVAE_VP
      167    17279              CALL:         CALL QBM$MOVAE_VP;
      168    17280              PARAMETERS:   None.
      169    17281              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVAE-type
      170    17282                            movement between COBOL and FIELD DADs is required.
      171    17283                            Calls QCA$ALL_LITERAL_MOVE_AE or QCC$ALR for the real move.
      172    17284              ENVIRONMENT:  Nothing unusual.
      173    17285              INPUT:        QI_1,
      174    17286                            FPL rununit static data following the op-code.
      175    17287              OUTPUT:       Target DAD filled up appropriately.
      176    17288              SCRATCH:      Various otter data.
      177    17289              DESCRIPTION:  Move that stuff:  ALPHANUMERIC EDITED target.
      178    17290                            QCU$UNSIGN is used to unpack and/or strip signs;
      179    17291                            BINARY sources have already been converted by QBV$xxxxxxx.
      180    17292        */
      181    17293
      182    17294    1       IF QI_1.IS_ALL_LIT.S

  17294   0 0000B5  8980 0000 0038  xsym                 CMZ      QI_1+56
          0 0000B8  0881 000A                            BAGE     s:17301,PREL

      183    17295    1       THEN
      184    17296    2         DO;

      185    17297    2           CALL QCA$ALL_LITERAL_MOVE_AE;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:48   

  17297   0 0000BA  CBF0 0000                            LAB,B4   0,IMO
          0 0000BC  E380 0000 0000  xent                 LNJ,B6   QCA$ALL_LITERAL_MOVE_AE
          0 0000BF       0001                            DC       s:17298,PREL

      186    17298    2           RETURN;

  17298   0 0000C0  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      187    17299    2         END;
      188    17300
      189    17301    1       QI_1.OTTER_SPACE.S$ = ADDR ( QI@OTTER_SPACE );

  17301   0 0000C3  EBC7 0021                            LAB,B6   QI@OTTER_SPACE,AUTO
          0 0000C5  EF80 0000 0044  xsym                 STB,B6   QI_1+68

      190    17302    1       CALL QCU$UNSIGN_SOURCE;

  17302   0 0000C8  CBF0 0000                            LAB,B4   0,IMO
          0 0000CA  E380 0000 0000  xent                 LNJ,B6   QCU$UNSIGN_SOURCE
          0 0000CD       0001                            DC       s:17304,PREL

      191    17303
      192    17304    2       DO MOP_STRING_INDEX = 0 TO QI_1.PICTURE_STRING.T$ ->
             17304                QI$ALPHANUMERIC_PICTURE_STRING.EDIT_STRING_COUNT - 1;

  17304   0 0000CE  8747 0005                            CL       MOP_STRING_INDEX,AUTO
          0 0000D0  0F81 00C6                            B        s:17355+2,PREL

      193    17305
      194    17306    2         QI_1.OP.LEN.T = QI_1.PICTURE_STRING.T$ -> QI$ALPHANUMERIC_PICTURE_STRING.
             17306                  EDIT_STRING_A.LENGTH (MOP_STRING_INDEX);

  17306   0 0000D2  EC80 0000 004C  xsym                 LDB,B6   QI_1+76
          0 0000D5  B847 0005                            LDR,R3   MOP_STRING_INDEX,AUTO
          0 0000D7  3E01                                 ADV,R3   1
          0 0000D8  E836                                 LDR,R6   ,B6,R3
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:49   
          0 0000D9  E570 3FFF                            AND,R6   16383,IMO
          0 0000DB  EF00 0000 0027  xsym                 STR,R6   QI_1+39

      195    17307
      196    17308    3         DO CASE ( QI_1.PICTURE_STRING.T$ -> QI$ALPHANUMERIC_PICTURE_STRING.
             17308                  EDIT_STRING_A.FUNCTION (MOP_STRING_INDEX) );

  17308   0 0000DE  A836                                 LDR,R2   ,B6,R3
          0 0000DF  204E                                 SOR,R2   14
          0 0000E0  2D04                                 CMV,R2   4
          0 0000E1  0281 00AA                            BGE      s:17353,PREL
          0 0000E3  9820 0000 00E9  00                   LDR,R1   s:17308+11,R2
          0 0000E6  8390 0000 00ED  00                   JMP      s:17312,R1
          0 0000E9       0000                            DC       s:17312,PREL
          0 0000EA       006C                            DC       s:17332,PREL
          0 0000EB       0072                            DC       s:17336,PREL
          0 0000EC       0078                            DC       s:17340,PREL

      197    17309
      198    17310    3           CASE ( %QI#PIC_M_9_A_X );

      199    17311
      200    17312    3             VARIABLE_SOURCE$ = PINCRC ( QI_1.OP.DATA.S$,

  17312   0 0000ED  D800 0000 0041  xsym                 LDR,R5   QI_1+65
          0 0000F0  DA00 0000 0029  xsym                 ADD,R5   QI_1+41
          0 0000F3  8C80 0000 0020  xsym                 LDI      QI_1+32
          0 0000F6  7031                                 DCL,R7   1
          0 0000F7  8D47 002C                            SDI      QI@OTTER_SPACE+11,AUTO
          0 0000F9  F855                                 LDR,R7   R5
          0 0000FA  6C00                                 LDV,R6   0
          0 0000FB  8447 002C                            AID      QI@OTTER_SPACE+11,AUTO
          0 0000FD  7071                                 DCR,R7   1
          0 0000FE  8D47 000A                            SDI      VARIABLE_SOURCE$,AUTO

      201    17313    3               QI_1.OFFSET.S
      202    17314    3               + QI_1.OP.INX.S );
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:50   
      203    17315
      204    17316    3             VARIABLE_TARGET$ = PINCRC ( QI_1.OP.DATA.T$,

  17316   0 000100  D800 0000 0042  xsym                 LDR,R5   QI_1+66
          0 000103  DA00 0000 002A  xsym                 ADD,R5   QI_1+42
          0 000106  8C80 0000 0022  xsym                 LDI      QI_1+34
          0 000109  7031                                 DCL,R7   1
          0 00010A  8D47 002C                            SDI      QI@OTTER_SPACE+11,AUTO
          0 00010C  F855                                 LDR,R7   R5
          0 00010D  6C00                                 LDV,R6   0
          0 00010E  8447 002C                            AID      QI@OTTER_SPACE+11,AUTO
          0 000110  7071                                 DCR,R7   1
          0 000111  8D47 000C                            SDI      VARIABLE_TARGET$,AUTO

      205    17317    3               QI_1.OFFSET.T
      206    17318    3               + QI_1.OP.INX.T );
      207    17319
      208    17320    3             VARIABLE_TARGET$ -> QI$VARIABLE_STRING_TARGET.TEXT =

  17320   0 000113  A856                                 LDR,R2   R6
          0 000114  E570 7FFF                            AND,R6   32767,IMO
          0 000116  8D47 002C                            SDI      QI@OTTER_SPACE+11,AUTO
          0 000118  DCC7 002C                            LDB,B5   QI@OTTER_SPACE+11,AUTO
          0 00011A  204F                                 SOR,R2   15
          0 00011B  8CC7 000A                            LDI      VARIABLE_SOURCE$,AUTO
          0 00011D  9856                                 LDR,R1   R6
          0 00011E  E570 7FFF                            AND,R6   32767,IMO
          0 000120  8D47 002E                            SDI      QI@OTTER_SPACE+13,AUTO
          0 000122  CCC7 002E                            LDB,B4   QI@OTTER_SPACE+13,AUTO
          0 000124  104F                                 SOR,R1   15
          0 000125  9F47 0030                            STR,R1   QI@OTTER_SPACE+15,AUTO
          0 000127  AF47 0031                            STR,R2   QI@OTTER_SPACE+16,AUTO
          0 000129  CFC7 0032                            STB,B4   QI@OTTER_SPACE+17,AUTO
          0 00012B  DFC7 0034                            STB,B5   QI@OTTER_SPACE+19,AUTO
          0 00012D  AB84                                 LAB,B2   ,B4
          0 00012E  A851                                 LDR,R2   R1
          0 00012F  E800 0000 0026  xsym                 LDR,R6   QI_1+38
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:51   
          0 000132  BB85                                 LAB,B3   ,B5
          0 000133  B847 0031                            LDR,R3   QI@OTTER_SPACE+16,AUTO
          0 000135  F800 0000 0027  xsym                 LDR,R7   QI_1+39
          0 000138  D380 0000 0000  xent                 LNJ,B5   X6C_ALR

      209    17321    3               VARIABLE_SOURCE$ -> QI$VARIABLE_STRING_SOURCE.TEXT;
      210    17322
      211    17323    3             QI_1.OP.INX.S = QI_1.OP.INX.S + QI_1.OP.LEN.T;

  17323   0 00013B  E800 0000 0029  xsym                 LDR,R6   QI_1+41
          0 00013E  EA00 0000 0027  xsym                 ADD,R6   QI_1+39
          0 000141  EF00 0000 0029  xsym                 STR,R6   QI_1+41

      212    17324
      213    17325    3             IF QI_1.OP.LEN.S > QI_1.OP.LEN.T

  17325   0 000144  D800 0000 0026  xsym                 LDR,R5   QI_1+38
          0 000147  D900 0000 0027  xsym                 CMR,R5   QI_1+39
          0 00014A  0381 0009                            BLE      s:17329,PREL

      214    17326    3             THEN
      215    17327    3               QI_1.OP.LEN.S = QI_1.OP.LEN.S - QI_1.OP.LEN.T;

  17327   0 00014C  D200 0000 0027  xsym                 SUB,R5   QI_1+39
          0 00014F  DF00 0000 0026  xsym                 STR,R5   QI_1+38
          0 000152  0F81 0039                            B        s:17353,PREL

      216    17328    3             ELSE
      217    17329    3               QI_1.OP.LEN.S = 0;

  17329   0 000154  8700 0000 0026  xsym                 CL       QI_1+38
          0 000157  0F81 0034                            B        s:17353,PREL

      218    17330
      219    17331    3           CASE ( %QI#PIC_M_B );

      220    17332    3             QI_1.OP.FILL_CHAR.TEXT = %QI#CIP_BLANK_FILL;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:52   

  17332   0 000159  5C20                                 LDV,R5   32
          0 00015A  D780 0000 0030  xsym                 STH,R5   QI_1+48

      221    17333    3             GOTO STICK_IT;

  17333   0 00015D  0F81 000B                            B        s:17343,PREL

      222    17334
      223    17335    3           CASE ( %QI#PIC_M_0 );

      224    17336    3             QI_1.OP.FILL_CHAR.TEXT = %QI#CIP_ZERO_FILL;

  17336   0 00015F  5C30                                 LDV,R5   48
          0 000160  D780 0000 0030  xsym                 STH,R5   QI_1+48

      225    17337    3             GOTO STICK_IT;

  17337   0 000163  0F81 0005                            B        s:17343,PREL

      226    17338
      227    17339    3           CASE ( %QI#PIC_M_SLASH );

      228    17340    3             QI_1.OP.FILL_CHAR.TEXT = %QI#CIP_SLASH_FILL;

  17340   0 000165  5C2F                                 LDV,R5   47
          0 000166  D780 0000 0030  xsym                 STH,R5   QI_1+48

      229    17341
      230    17342    3   STICK_IT:
      231    17343    3             OLD_SOURCE_LENGTH = QI_1.OP.LEN.S;

  17343   0 000169  D800 0000 0026  xsym STICK_IT        LDR,R5   QI_1+38
          0 00016C  DF47 0009                            STR,R5   OLD_SOURCE_LENGTH,AUTO

      232    17344    3             OLD_SOURCE_INDEX = QI_1.OP.INX.S;

PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:53   
  17344   0 00016E  C800 0000 0029  xsym                 LDR,R4   QI_1+41
          0 000171  CF47 0008                            STR,R4   OLD_SOURCE_INDEX,AUTO

      233    17345    3             QI_1.OP.LEN.S = 0;

  17345   0 000173  8700 0000 0026  xsym                 CL       QI_1+38

      234    17346    3             QI_1.OP.INX.S = 0;

  17346   0 000176  8700 0000 0029  xsym                 CL       QI_1+41

      235    17347    3             CALL QCC$ALR ( QI_1.OP );

  17347   0 000179  BB80 0000 0000  01                   LAB,B3   0
          0 00017C  CBF0 0100                            LAB,B4   256,IMO
          0 00017E  E380 0000 0000  xent                 LNJ,B6   QCC$ALR
          0 000181       0001                            DC       s:17348,PREL

      236    17348    3             QI_1.OP.LEN.S = OLD_SOURCE_LENGTH;

  17348   0 000182  E847 0009                            LDR,R6   OLD_SOURCE_LENGTH,AUTO
          0 000184  EF00 0000 0026  xsym                 STR,R6   QI_1+38

      237    17349    3             QI_1.OP.INX.S = OLD_SOURCE_INDEX;

  17349   0 000187  D847 0008                            LDR,R5   OLD_SOURCE_INDEX,AUTO
          0 000189  DF00 0000 0029  xsym                 STR,R5   QI_1+41

      238    17350
      239    17351    3         END;  /* DO CASE ( QI_1.PICTURE_STRING.T$ -> ... ) */

      240    17352
      241    17353    2         QI_1.OP.INX.T = QI_1.OP.INX.T + QI_1.OP.LEN.T;

  17353   0 00018C  E800 0000 002A  xsym                 LDR,R6   QI_1+42
          0 00018F  EA00 0000 0027  xsym                 ADD,R6   QI_1+39
          0 000192  EF00 0000 002A  xsym                 STR,R6   QI_1+42
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:54   

      242    17354
      243    17355    2       END;  /* DO MOP_STRING_INDEX ... */

  17355   0 000195  8AC7 0005                            INC      MOP_STRING_INDEX,AUTO
          0 000197  EC80 0000 004C  xsym                 LDB,B6   QI_1+76
          0 00019A  E806                                 LDR,R6   ,B6
          0 00019B  E570 1FFF                            AND,R6   8191,IMO
          0 00019D  E947 0005                            CMR,R6   MOP_STRING_INDEX,AUTO
          0 00019F  0301 FF32                            BG       s:17306,PREL

      244    17356
      245    17357    1       RETURN;

  17357   0 0001A1  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      246    17358        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:55   
      247    17359    1   QBM$MOVAJ: ENTRY;

  17359   0 0001A4  D380 0000 0000  xent QBM$MOVAJ       LNJ,B5   X6A_AUTO_0
          0 0001A7       0036 0000                       DC       54,0

      248    17360
      249    17361        /*D*  NAME:         QBM$MOVAJ
      250    17362              CALL:         CALL QBM$MOVAJ;
      251    17363              PARAMETERS:   None.
      252    17364              INTERFACE:    Called by QAT$TALLYHO when a MOVAJ op-code is
      253    17365                            encountered.
      254    17366                            Calls QCA$ALL_LITERAL_MOVE_AJ or QCC$ALR for the real move.
      255    17367              ENVIRONMENT:  Nothing unusual.
      256    17368              INPUT:        QI_1,
      257    17369                            FPL rununit static data following the op-code.
      258    17370              OUTPUT:       Target DAD filled up appropriately.
      259    17371              SCRATCH:      Various otter data.
      260    17372              DESCRIPTION:  Move that stuff:  ALPHANUMERIC RIGHT-JUSTIFIED target.
      261    17373                            QCU$UNSIGN is used to unpack and/or strip signs;
      262    17374                            BINARY sources have already been converted via QBC$CNVBxx.
      263    17375        */
      264    17376
      265    17377    1       CALL QCS$SETUP_SOURCE;

  17377   0 0001A9  CBF0 0000                            LAB,B4   0,IMO
          0 0001AB  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 0001AE       0001                            DC       s:17378,PREL

      266    17378    1       CALL QCS$SETUP_TARGET;

  17378   0 0001AF  CBF0 0000                            LAB,B4   0,IMO
          0 0001B1  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 0001B4       0001                            DC       s:17380,PREL

      267    17379
      268    17380    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVAJ.NEXT_CODE@P );

PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:56   
  17380   0 0001B5  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 0001B8  DBC6 0003                            LAB,B5   3,B6
          0 0001BA  DF80 0000 0006  xsym                 STB,B5   QI_1+6
          0 0001BD  0F81 0006                            B        s:17400,PREL

      269    17381
      270    17382    1   QBM$MOVAJ_VP: ENTRY;

  17382   0 0001BF  D380 0000 0000  xent QBM$MOVAJ_VP    LNJ,B5   X6A_AUTO_0
          0 0001C2       0036 0000                       DC       54,0

      271    17383
      272    17384        /*D*  NAME:         QBM$MOVAJ_VP
      273    17385              CALL:         CALL QBM$MOVAJ_VP;
      274    17386              PARAMETERS:   None.
      275    17387              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVAJ-type
      276    17388                            movement between COBOL and FIELD DADs is required.
      277    17389                            Calls QCA$ALL_LITERAL_MOVE_AJ or QCC$ALR for the real move.
      278    17390              ENVIRONMENT:  Nothing unusual.
      279    17391              INPUT:        QI_1,
      280    17392                            FPL rununit static data following the op-code.
      281    17393              OUTPUT:       Target DAD filled up appropriately.
      282    17394              SCRATCH:      Various otter data.
      283    17395              DESCRIPTION:  Move that stuff:  ALPHANUMERIC RIGHT-JUSTIFIED target.
      284    17396                            QCU$UNSIGN is used to unpack and/or strip signs;
      285    17397                            BINARY sources have already been converted by QBV$xxxxxxx.
      286    17398        */
      287    17399
      288    17400    1       IF QI_1.IS_ALL_LIT.S

  17400   0 0001C4  8980 0000 0038  xsym                 CMZ      QI_1+56
          0 0001C7  0881 000A                            BAGE     s:17407,PREL

      289    17401    1       THEN
      290    17402    2         DO;

      291    17403    2           CALL QCA$ALL_LITERAL_MOVE_AJ;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:57   

  17403   0 0001C9  CBF0 0000                            LAB,B4   0,IMO
          0 0001CB  E380 0000 0000  xent                 LNJ,B6   QCA$ALL_LITERAL_MOVE_AJ
          0 0001CE       0001                            DC       s:17404,PREL

      292    17404    2           RETURN;

  17404   0 0001CF  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      293    17405    2         END;
      294    17406
      295    17407    1       QI_1.OP.FILL_CHAR.TEXT = %QI#CIP_BLANK_FILL;

  17407   0 0001D2  6C20                                 LDV,R6   32
          0 0001D3  E780 0000 0030  xsym                 STH,R6   QI_1+48

      296    17408
      297    17409    1       QI_1.OTTER_SPACE.S$ = ADDR ( QI@OTTER_SPACE );

  17409   0 0001D6  EBC7 0021                            LAB,B6   QI@OTTER_SPACE,AUTO
          0 0001D8  EF80 0000 0044  xsym                 STB,B6   QI_1+68

      298    17410    1       CALL QCU$UNSIGN_SOURCE;

  17410   0 0001DB  CBF0 0000                            LAB,B4   0,IMO
          0 0001DD  E380 0000 0000  xent                 LNJ,B6   QCU$UNSIGN_SOURCE
          0 0001E0       0001                            DC       s:17417,PREL

      299    17411
      300    17412            /* If there's some left blank-filling to do, do it, and increment
      301    17413               the target's starting index accordingly.  Otherwise, increment
      302    17414               the source's starting index by the amount of truncation
      303    17415               desired (source length - target length).  Add seasoning to
      304    17416               taste and let simmer for 1 ALR instruction... */
      305    17417    1       IF QI_1.OP.LEN.S < QI_1.OP.LEN.T

  17417   0 0001E1  E800 0000 0026  xsym                 LDR,R6   QI_1+38
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:58   
          0 0001E4  E900 0000 0027  xsym                 CMR,R6   QI_1+39
          0 0001E7  0281 003D                            BGE      s:17431,PREL

      306    17418    1       THEN
      307    17419    2         DO;

      308    17420    2           QI_1.OP.LEN.T = QI_1.OP.LEN.T - QI_1.OP.LEN.S;

  17420   0 0001E9  E200 0000 0027  xsym                 SUB,R6   QI_1+39
          0 0001EC  8256                                 NEG      R6
          0 0001ED  EF00 0000 0027  xsym                 STR,R6   QI_1+39

      309    17421    2           VARIABLE_TARGET$ = PINCRC ( QI_1.OP.DATA.T$,

  17421   0 0001F0  8C80 0000 0022  xsym                 LDI      QI_1+34
          0 0001F3  7031                                 DCL,R7   1
          0 0001F4  8D47 002C                            SDI      QI@OTTER_SPACE+11,AUTO
          0 0001F6  F800 0000 0042  xsym                 LDR,R7   QI_1+66
          0 0001F9  6C00                                 LDV,R6   0
          0 0001FA  8447 002C                            AID      QI@OTTER_SPACE+11,AUTO
          0 0001FC  7071                                 DCR,R7   1
          0 0001FD  8D47 000C                            SDI      VARIABLE_TARGET$,AUTO

      310    17422    2             QI_1.OFFSET.T );
      311    17423
      312    17424    2           VARIABLE_TARGET$ -> QI$VARIABLE_STRING_TARGET.TEXT = ' ';

  17424   0 0001FF  B856                                 LDR,R3   R6
          0 000200  E570 7FFF                            AND,R6   32767,IMO
          0 000202  8D47 002C                            SDI      QI@OTTER_SPACE+11,AUTO
          0 000204  ECC7 002C                            LDB,B6   QI@OTTER_SPACE+11,AUTO
          0 000206  304F                                 SOR,R3   15
          0 000207  BF47 002E                            STR,R3   QI@OTTER_SPACE+13,AUTO
          0 000209  EFC7 002F                            STB,B6   QI@OTTER_SPACE+14,AUTO
          0 00020B  AB80 0000 0000  01                   LAB,B2   0
          0 00020E  2C04                                 LDV,R2   4
          0 00020F  6C01                                 LDV,R6   1
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:59   
          0 000210  BB86                                 LAB,B3   ,B6
          0 000211  F800 0000 0027  xsym                 LDR,R7   QI_1+39
          0 000214  D380 0000 0000  xent                 LNJ,B5   X6C_ALR

      313    17425
      314    17426    2           QI_1.OP.INX.T = QI_1.OP.LEN.T;

  17426   0 000217  E800 0000 0027  xsym                 LDR,R6   QI_1+39
          0 00021A  EF00 0000 002A  xsym                 STR,R6   QI_1+42

      315    17427    2           QI_1.OP.LEN.T = QI_1.OP.LEN.S;

  17427   0 00021D  E800 0000 0026  xsym                 LDR,R6   QI_1+38
          0 000220  EF00 0000 0027  xsym                 STR,R6   QI_1+39

      316    17428    2         END;

  17428   0 000223  0F81 0010                            B        s:17437,PREL

      317    17429    1       ELSE
      318    17430    2         DO;

      319    17431    2           QI_1.OP.INX.S = QI_1.OP.INX.S

  17431   0 000225  EA00 0000 0029  xsym                 ADD,R6   QI_1+41
          0 000228  E200 0000 0027  xsym                 SUB,R6   QI_1+39
          0 00022B  EF00 0000 0029  xsym                 STR,R6   QI_1+41

      320    17432    2             + QI_1.OP.LEN.S
      321    17433    2             - QI_1.OP.LEN.T;
      322    17434    2           QI_1.OP.LEN.S = QI_1.OP.LEN.T;

  17434   0 00022E  D800 0000 0027  xsym                 LDR,R5   QI_1+39
          0 000231  DF00 0000 0026  xsym                 STR,R5   QI_1+38

      323    17435    2         END;

PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:60   
      324    17436
      325    17437    1       VARIABLE_SOURCE$ = PINCRC ( QI_1.OP.DATA.S$,

  17437   0 000234  E800 0000 0041  xsym                 LDR,R6   QI_1+65
          0 000237  EA00 0000 0029  xsym                 ADD,R6   QI_1+41
          0 00023A  EF47 002C                            STR,R6   QI@OTTER_SPACE+11,AUTO
          0 00023C  8C80 0000 0020  xsym                 LDI      QI_1+32
          0 00023F  7031                                 DCL,R7   1
          0 000240  8D47 002D                            SDI      QI@OTTER_SPACE+12,AUTO
          0 000242  F847 002C                            LDR,R7   QI@OTTER_SPACE+11,AUTO
          0 000244  6C00                                 LDV,R6   0
          0 000245  8447 002D                            AID      QI@OTTER_SPACE+12,AUTO
          0 000247  7071                                 DCR,R7   1
          0 000248  8D47 000A                            SDI      VARIABLE_SOURCE$,AUTO

      326    17438    1         QI_1.OFFSET.S
      327    17439    1         + QI_1.OP.INX.S );
      328    17440
      329    17441    1       VARIABLE_TARGET$ = PINCRC ( QI_1.OP.DATA.T$,

  17441   0 00024A  D800 0000 0042  xsym                 LDR,R5   QI_1+66
          0 00024D  DA00 0000 002A  xsym                 ADD,R5   QI_1+42
          0 000250  8C80 0000 0022  xsym                 LDI      QI_1+34
          0 000253  7031                                 DCL,R7   1
          0 000254  8D47 002C                            SDI      QI@OTTER_SPACE+11,AUTO
          0 000256  F855                                 LDR,R7   R5
          0 000257  6C00                                 LDV,R6   0
          0 000258  8447 002C                            AID      QI@OTTER_SPACE+11,AUTO
          0 00025A  7071                                 DCR,R7   1
          0 00025B  8D47 000C                            SDI      VARIABLE_TARGET$,AUTO

      330    17442    1         QI_1.OFFSET.T
      331    17443    1         + QI_1.OP.INX.T );
      332    17444
      333    17445    1       VARIABLE_TARGET$ -> QI$VARIABLE_STRING_TARGET.TEXT =

  17445   0 00025D  B856                                 LDR,R3   R6
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:61   
          0 00025E  E570 7FFF                            AND,R6   32767,IMO
          0 000260  8D47 002C                            SDI      QI@OTTER_SPACE+11,AUTO
          0 000262  ECC7 002C                            LDB,B6   QI@OTTER_SPACE+11,AUTO
          0 000264  304F                                 SOR,R3   15
          0 000265  8CC7 000A                            LDI      VARIABLE_SOURCE$,AUTO
          0 000267  A856                                 LDR,R2   R6
          0 000268  E570 7FFF                            AND,R6   32767,IMO
          0 00026A  8D47 002E                            SDI      QI@OTTER_SPACE+13,AUTO
          0 00026C  DCC7 002E                            LDB,B5   QI@OTTER_SPACE+13,AUTO
          0 00026E  204F                                 SOR,R2   15
          0 00026F  AF47 0030                            STR,R2   QI@OTTER_SPACE+15,AUTO
          0 000271  BF47 0031                            STR,R3   QI@OTTER_SPACE+16,AUTO
          0 000273  DFC7 0032                            STB,B5   QI@OTTER_SPACE+17,AUTO
          0 000275  EFC7 0034                            STB,B6   QI@OTTER_SPACE+19,AUTO
          0 000277  AB85                                 LAB,B2   ,B5
          0 000278  E800 0000 0026  xsym                 LDR,R6   QI_1+38
          0 00027B  BB86                                 LAB,B3   ,B6
          0 00027C  F800 0000 0027  xsym                 LDR,R7   QI_1+39
          0 00027F  D380 0000 0000  xent                 LNJ,B5   X6C_ALR

      334    17446    1         VARIABLE_SOURCE$ -> QI$VARIABLE_STRING_SOURCE.TEXT;
      335    17447
      336    17448    1       RETURN;

  17448   0 000282  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      337    17449        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:62   
      338    17450    1   QBM$MOVDE: ENTRY;

  17450   0 000285  D380 0000 0000  xent QBM$MOVDE       LNJ,B5   X6A_AUTO_0
          0 000288       0036 0000                       DC       54,0

      339    17451
      340    17452        /*D*  NAME:         QBM$MOVDE
      341    17453              CALL:         CALL QBM$MOVDE;
      342    17454              PARAMETERS:   None.
      343    17455              INTERFACE:    Called by QAT$TALLYHO when a MOVDE op-code is
      344    17456                            encountered.
      345    17457                            Calls QCD$DE_EDIT and QCC$DMC for the real move.
      346    17458              ENVIRONMENT:  Nothing unusual.
      347    17459              INPUT:        QI_1,
      348    17460                            FPL rununit static data following the op-code.
      349    17461              OUTPUT:       Target DAD filled up appropriately.
      350    17462              SCRATCH:      Various otter data.
      351    17463              DESCRIPTION:  Move that stuff:  NUMERIC target (packed or unpacked),
      352    17464                                              NUMERIC EDITED source.
      353    17465                            BINARY targets are weird:  see commentary in QBV$VERI_PRES.
      354    17466        */
      355    17467
      356    17468            /* Set up sending field... */
      357    17469    1       CALL QCS$SETUP_AUX;

  17469   0 00028A  CBF0 0000                            LAB,B4   0,IMO
          0 00028C  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_AUX
          0 00028F       0001                            DC       s:17472,PREL

      358    17470
      359    17471            /* Set up receiving field... */
      360    17472    1       CALL QCS$SETUP_TARGET;

  17472   0 000290  CBF0 0000                            LAB,B4   0,IMO
          0 000292  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 000295       0001                            DC       s:17474,PREL

PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:63   
      361    17473
      362    17474    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVDE.NEXT_CODE@P );

  17474   0 000296  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 000299  DBC6 0003                            LAB,B5   3,B6
          0 00029B  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      363    17475
      364    17476    1       QI_1.A_REG = 0;

  17476   0 00029E  8700 0000 0054  xsym                 CL       QI_1+84

      365    17477
      366    17478    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ

  17478   0 0002A1  E805                                 LDR,R6   ,B5
          0 0002A2  6D5B                                 CMV,R6   91
          0 0002A3  0981 0007                            BNE      s:17482,PREL

      367    17479    1       THEN
      368    17480    1         QI_1.OP.SIZE_ERROR = %QI#CHECK_FOR_SIZE_ERROR;

  17480   0 0002A5  5C01                                 LDV,R5   1
          0 0002A6  DF00 0000 0030  xsym                 STR,R5   QI_1+48
          0 0002A9  0F81 0004                            B        s:17484,PREL

      369    17481    1       ELSE
      370    17482    1         QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;

  17482   0 0002AB  8700 0000 0030  xsym                 CL       QI_1+48

      371    17483
      372    17484    1       GOTO SO_DO_THE_MOVDE_ALREADY;

  17484   0 0002AE  0F81 0009                            B        s:17508,PREL

      373    17485
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:64   
      374    17486    1   QBM$MOVDE_VP: ENTRY;

  17486   0 0002B0  D380 0000 0000  xent QBM$MOVDE_VP    LNJ,B5   X6A_AUTO_0
          0 0002B3       0036 0000                       DC       54,0

      375    17487
      376    17488        /*D*  NAME:         QBM$MOVDE_VP
      377    17489              CALL:         CALL QBM$MOVDE_VP;
      378    17490              PARAMETERS:   None.
      379    17491              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVDE-type
      380    17492                            movement between COBOL and FIELD DADs is required.
      381    17493                            Calls QCD$DE_EDIT and QCC$DMC for the real move.
      382    17494              ENVIRONMENT:  Nothing unusual.
      383    17495              INPUT:        QI_1,
      384    17496                            FPL rununit static data following the op-code.
      385    17497              OUTPUT:       Target DAD filled up appropriately.
      386    17498              SCRATCH:      Various otter data.
      387    17499              DESCRIPTION:  Move that stuff:  NUMERIC target (packed or unpacked),
      388    17500                                              NUMERIC EDITED source.
      389    17501                            BINARY targets are weird:  see commentary in QBV$VERI_PRES.
      390    17502        */
      391    17503
      392    17504    1       QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;

  17504   0 0002B5  8700 0000 0030  xsym                 CL       QI_1+48

      393    17505
      394    17506    1   SO_DO_THE_MOVDE_ALREADY:
      395    17507            /* QCD$DE_EDIT will do the hard stuff... */
      396    17508    1       CALL QCD$DE_EDIT ( QCD@DE_EDIT );

  17508   0 0002B8  EBC7 000E            SO_DO_THE_MOVDE*LAB,B6   QCD@DE_EDIT,AUTO
          0 0002BA  EFC7 002C                            STB,B6   QI@OTTER_SPACE+11,AUTO
          0 0002BC  BBC7 002C                            LAB,B3   QI@OTTER_SPACE+11,AUTO
          0 0002BE  CBF0 0100                            LAB,B4   256,IMO
          0 0002C0  E380 0000 0000  xent                 LNJ,B6   QCD$DE_EDIT
          0 0002C3       0001                            DC       s:17510,PREL
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:65   

      397    17509
      398    17510    1       IF QCD@DE_EDIT.IS_NUMBER_INVALID

  17510   0 0002C4  89C7 000E                            CMZ      QCD@DE_EDIT,AUTO
          0 0002C6  0881 000A                            BAGE     s:17514,PREL

      399    17511    1       THEN
      400    17512    1         CALL QCE$ERROR ( %E$DE_EDIT_ILLEGAL_SOURCE );

  17512   0 0002C8  BB80 0000 0004  01                   LAB,B3   +4
          0 0002CB  CBF0 0100                            LAB,B4   256,IMO
          0 0002CD  E380 0000 0000  xent                 LNJ,B6   QCE$ERROR
          0 0002D0       0001                            DC       s:17514,PREL

      401    17513
      402    17514    1       QI_1.OP.CIP.S = QI_31_DIGIT_SLS_DISPLAY;

  17514   0 0002D1  8C80 0000 0000  xsym                 LDI      QI_31_DIGIT_SLS_DISPLAY
          0 0002D4  8D00 0000 001A  xsym                 SDI      QI_1+26

      403    17515    1       QI_1.OP.DATA.S$ = ADDR ( QCD@DE_EDIT.RESULT.DIGIT_A );

  17515   0 0002D7  EBC7 000F                            LAB,B6   QCD@DE_EDIT+1,AUTO
          0 0002D9  EF80 0000 0020  xsym                 STB,B6   QI_1+32

      404    17516    1       QI_1.OP.DEC.S = QCD@DE_EDIT.RESULT.DEC;

  17516   0 0002DC  D847 001F                            LDR,R5   QCD@DE_EDIT+17,AUTO
          0 0002DE  DF00 0000 0029  xsym                 STR,R5   QI_1+41

      405    17517
      406    17518    1       CALL QCC$DMC ( QI_1.OP )

  17518   0 0002E1  BB80 0000 0000  01                   LAB,B3   0
          0 0002E4  CBF0 0100                            LAB,B4   256,IMO
          0 0002E6  E380 0000 0000  xent                 LNJ,B6   QCC$DMC
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:66   
          0 0002E9       0003                            DC       s:17520,PREL
          0 0002EA  0F81 0005                            B        s:17523,PREL

      407    17519    2       WHENALTRETURN DO;

      408    17520    2           QI_1.A_REG = 1;

  17520   0 0002EC  6C01                                 LDV,R6   1
          0 0002ED  EF00 0000 0054  xsym                 STR,R6   QI_1+84

      409    17521    2         END;

      410    17522
      411    17523    1       RETURN;

  17523   0 0002F0  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      412    17524        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:67   
      413    17525    1   QBM$MOVG: ENTRY;

  17525   0 0002F3  D380 0000 0000  xent QBM$MOVG        LNJ,B5   X6A_AUTO_0
          0 0002F6       0036 0000                       DC       54,0

      414    17526
      415    17527        /*D*  NAME:         QBM$MOVG
      416    17528              CALL:         CALL QBM$MOVG;
      417    17529              PARAMETERS:   None.
      418    17530              INTERFACE:    Called by QAT$TALLYHO when a MOVG op-code is
      419    17531                            encountered.
      420    17532                            Calls QCC$ALR for the real move.
      421    17533              ENVIRONMENT:  Nothing unusual.
      422    17534              INPUT:        QI_1,
      423    17535                            FPL rununit static data following the op-code.
      424    17536              OUTPUT:       Target DAD filled up appropriately.
      425    17537              SCRATCH:      Various otter data.
      426    17538              DESCRIPTION:  No conversion is performed for signed items, PACKED items,
      427    17539                            or BINARY items.  Just move 'er.
      428    17540                            Ok:
      429    17541                            IS_SOURCE_GROUP means that ANTI_GROUP_LENGTH is for the
      430    17542                            non-group, or target, item; if the bit is off, then
      431    17543                            ANTI_GROUP_LENGTH is for the source item.
      432    17544                            Some operations which will generate MOVG op-codes are:
      433    17545                                MOVE PACKED-THING TO GROUP.
      434    17546                                MOVE GROUP TO DISPLAY-THING.
      435    17547                                MOVE GROUP TO GROUP2.    (!)
      436    17548
      437    17549                            Some operations which will generate MOVA (not MOVG) are:
      438    17550                                MOVE SPACES TO GROUP.
      439    17551                                MOVE ZERO TO GROUP.
      440    17552                                MOVE "01" TO GROUP.
      441    17553
      442    17554                            Unless I'm mistaken, I believe that "MOVE GROUP TO GROUP2."
      443    17555                            could just as well be a MOVA op-code.  What the compiler
      444    17556                            tends to do now is to gen:
      445    17557                                VECT    C_MOVG
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:68   
      446    17558                                ADRL    GROUP
      447    17559                                ADRL    GROUP2
      448    17560                                DATA    X'800A'
      449    17561                            for example, if GROUP2 were 10 bytes long.  IS_SOURCE_GROUP
      450    17562                            seems always to be set.  Whatevah, JJL, C00.
      451    17563        */
      452    17564
      453    17565    1       CALL QCS$SETUP_SOURCE;

  17565   0 0002F8  CBF0 0000                            LAB,B4   0,IMO
          0 0002FA  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 0002FD       0001                            DC       s:17566,PREL

      454    17566    1       CALL QCS$SETUP_TARGET;

  17566   0 0002FE  CBF0 0000                            LAB,B4   0,IMO
          0 000300  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 000303       0001                            DC       s:17570,PREL

      455    17567
      456    17568            %IF QI#DEBUG;
      457    17569
      458    17570    1       IF QI_1.IS_ALL_LIT.S

  17570   0 000304  8980 0000 0038  xsym                 CMZ      QI_1+56
          0 000307  0881 000A                            BAGE     s:17576,PREL

      459    17571    1       THEN
      460    17572    1         CALL QCE$ERROR_INTERNAL ( %E$INTERNAL_COMPILER_ERROR );

  17572   0 000309  BB80 0000 0007  01                   LAB,B3   +7
          0 00030C  CBF0 0100                            LAB,B4   256,IMO
          0 00030E  E380 0000 0000  xent                 LNJ,B6   QCE$ERROR_INTERNAL
          0 000311       0001                            DC       s:17576,PREL

      461    17573
      462    17574            %ENDIF;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:69   
      463    17575
      464    17576    2       DO CASE ( QI_1.TYPE.S );

  17576   0 000312  B800 0000 0050  xsym                 LDR,R3   QI_1+80
          0 000315  3D03                                 CMV,R3   3
          0 000316  0281 0039                            BGE      s:17599,PREL
          0 000318  A830 0000 031E  00                   LDR,R2   s:17576+12,R3
          0 00031B  83A0 0000 0321  00                   JMP      s:17579,R2
          0 00031E       0000                            DC       s:17579,PREL
          0 00031F       000A                            DC       s:17583,PREL
          0 000320       002B                            DC       s:17595,PREL

      465    17577
      466    17578    2         CASE ( %QI#TYPE_DISPLAY );

      467    17579    2           QI_1.OP.CIP.S.LEN = 0;

  17579   0 000321  8800 0000 001A  xsym                 LBF,'1F00'X       QI_1+26
  17579   0 000324       1F00

      468    17580    2           QI_1.OP.CIP.S.CD.SIGN = %QI#CD_UNSIGNED;

  17580   0 000325  8800 0000 001A  xsym                 LBF,'6000'X       QI_1+26
  17580   0 000328       6000
          0 000329  0F81 0026                            B        s:17599,PREL

      469    17581
      470    17582    2         CASE ( %QI#TYPE_PACKED );

      471    17583    2           QI_1.OP.CIP.S_A (0) = %QI#CIP_DEFAULT_AS;

  17583   0 00032B  6C0B                                 LDV,R6   11
          0 00032C  EF00 0000 001A  xsym                 STR,R6   QI_1+26

      472    17584    2           IF QI_1.OFFSET.S >= 2

  17584   0 00032F  D800 0000 0041  xsym                 LDR,R5   QI_1+65
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:70   
          0 000332  5D02                                 CMV,R5   2
          0 000333  0201 000B                            BL       s:17591,PREL

      473    17585    2           THEN
      474    17586    3             DO;

      475    17587    3               QI_1.OP.CIP.S.CA.OFFSET = 1;

  17587   0 000335  8900 0000 001A  xsym                 LBT,'8000'X       QI_1+26
  17587   0 000338       8000

      476    17588    3               QI_1.OFFSET.S = 1;

  17588   0 000339  5C01                                 LDV,R5   1
          0 00033A  DF00 0000 0041  xsym                 STR,R5   QI_1+65

      477    17589    3             END;

  17589   0 00033D  0F81 0004                            B        s:17592,PREL

      478    17590    2           ELSE
      479    17591    2             QI_1.OFFSET.S = 0;

  17591   0 00033F  8700 0000 0041  xsym                 CL       QI_1+65

      480    17592    2           QI_1.OP.LEN.S = ( QI_1.OP.LEN.S + 1 ) / 2;

  17592   0 000342  D800 0000 0026  xsym                 LDR,R5   QI_1+38
          0 000345  5E01                                 ADV,R5   1
          0 000346  5041                                 SOR,R5   1
          0 000347  DF00 0000 0026  xsym                 STR,R5   QI_1+38
          0 00034A  0F81 0005                            B        s:17599,PREL

      481    17593
      482    17594    2         CASE ( %QI#TYPE_BINARY );

      483    17595    2           QI_1.OP.CIP.S.LEN = 0;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:71   

  17595   0 00034C  8800 0000 001A  xsym                 LBF,'1F00'X       QI_1+26
  17595   0 00034F       1F00

      484    17596
      485    17597    2       END; /* DO CASE ( QI_1.TYPE.S ) */

      486    17598
      487    17599    2       DO CASE ( QI_1.TYPE.T );

  17599   0 000350  A800 0000 0051  xsym                 LDR,R2   QI_1+81
          0 000353  2D03                                 CMV,R2   3
          0 000354  0281 0039                            BGE      s:17622,PREL
          0 000356  9820 0000 035C  00                   LDR,R1   s:17599+12,R2
          0 000359  8390 0000 035F  00                   JMP      s:17602,R1
          0 00035C       0000                            DC       s:17602,PREL
          0 00035D       000A                            DC       s:17606,PREL
          0 00035E       002B                            DC       s:17618,PREL

      488    17600
      489    17601    2         CASE ( %QI#TYPE_DISPLAY );

      490    17602    2           QI_1.OP.CIP.T.LEN = 0;

  17602   0 00035F  8800 0000 001C  xsym                 LBF,'1F00'X       QI_1+28
  17602   0 000362       1F00

      491    17603    2           QI_1.OP.CIP.T.CD.SIGN = %QI#CD_UNSIGNED;

  17603   0 000363  8800 0000 001C  xsym                 LBF,'6000'X       QI_1+28
  17603   0 000366       6000
          0 000367  0F81 0026                            B        s:17622,PREL

      492    17604
      493    17605    2         CASE ( %QI#TYPE_PACKED );

      494    17606    2           QI_1.OP.CIP.T_A (0) = %QI#CIP_DEFAULT_AS;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:72   

  17606   0 000369  6C0B                                 LDV,R6   11
          0 00036A  EF00 0000 001C  xsym                 STR,R6   QI_1+28

      495    17607    2           IF QI_1.OFFSET.T >= 2

  17607   0 00036D  D800 0000 0042  xsym                 LDR,R5   QI_1+66
          0 000370  5D02                                 CMV,R5   2
          0 000371  0201 000B                            BL       s:17614,PREL

      496    17608    2           THEN
      497    17609    3             DO;

      498    17610    3               QI_1.OP.CIP.T.CA.OFFSET = 1;

  17610   0 000373  8900 0000 001C  xsym                 LBT,'8000'X       QI_1+28
  17610   0 000376       8000

      499    17611    3               QI_1.OFFSET.T = 1;

  17611   0 000377  5C01                                 LDV,R5   1
          0 000378  DF00 0000 0042  xsym                 STR,R5   QI_1+66

      500    17612    3             END;

  17612   0 00037B  0F81 0004                            B        s:17615,PREL

      501    17613    2           ELSE
      502    17614    2             QI_1.OFFSET.T = 0;

  17614   0 00037D  8700 0000 0042  xsym                 CL       QI_1+66

      503    17615    2           QI_1.OP.LEN.T = ( QI_1.OP.LEN.T + 1 ) / 2;

  17615   0 000380  D800 0000 0027  xsym                 LDR,R5   QI_1+39
          0 000383  5E01                                 ADV,R5   1
          0 000384  5041                                 SOR,R5   1
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:73   
          0 000385  DF00 0000 0027  xsym                 STR,R5   QI_1+39
          0 000388  0F81 0005                            B        s:17622,PREL

      504    17616
      505    17617    2         CASE ( %QI#TYPE_BINARY );

      506    17618    2           QI_1.OP.CIP.T.LEN = 0;

  17618   0 00038A  8800 0000 001C  xsym                 LBF,'1F00'X       QI_1+28
  17618   0 00038D       1F00

      507    17619
      508    17620    2       END; /* DO CASE ( QI_1.TYPE.T ) */

      509    17621
      510    17622    1       IF QI_1.INSTR$ -> QI$OP_MOVG.IS_SOURCE_GROUP

  17622   0 00038E  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 000391  89C6 0003                            CMZ      3,B6
          0 000393  0881 000A                            BAGE     s:17626,PREL

      511    17623    1       THEN
      512    17624    1         QI_1.OP.LEN.T = QI_1.INSTR$ -> QI$OP_MOVG.ANTI_GROUP_LENGTH;

  17624   0 000395  E846 0003                            LDR,R6   3,B6
          0 000397  E570 3FFF                            AND,R6   16383,IMO
          0 000399  EF00 0000 0027  xsym                 STR,R6   QI_1+39
          0 00039C  0F81 0008                            B        s:17628,PREL

      513    17625    1       ELSE
      514    17626    1         QI_1.OP.LEN.S = QI_1.INSTR$ -> QI$OP_MOVG.ANTI_GROUP_LENGTH;

  17626   0 00039E  E846 0003                            LDR,R6   3,B6
          0 0003A0  E570 3FFF                            AND,R6   16383,IMO
          0 0003A2  EF00 0000 0026  xsym                 STR,R6   QI_1+38

      515    17627
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:74   
      516    17628    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVG.NEXT_CODE@P );

  17628   0 0003A5  DBC6 0004                            LAB,B5   4,B6
          0 0003A7  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      517    17629
      518    17630    1       VARIABLE_SOURCE$ = PINCRC ( QI_1.OP.DATA.S$,

  17630   0 0003AA  8C80 0000 0020  xsym                 LDI      QI_1+32
          0 0003AD  7031                                 DCL,R7   1
          0 0003AE  8D47 002C                            SDI      QI@OTTER_SPACE+11,AUTO
          0 0003B0  F800 0000 0041  xsym                 LDR,R7   QI_1+65
          0 0003B3  6C00                                 LDV,R6   0
          0 0003B4  8447 002C                            AID      QI@OTTER_SPACE+11,AUTO
          0 0003B6  7071                                 DCR,R7   1
          0 0003B7  8D47 000A                            SDI      VARIABLE_SOURCE$,AUTO

      519    17631    1         QI_1.OFFSET.S );
      520    17632
      521    17633    1       VARIABLE_TARGET$ = PINCRC ( QI_1.OP.DATA.T$,

  17633   0 0003B9  8C80 0000 0022  xsym                 LDI      QI_1+34
          0 0003BC  7031                                 DCL,R7   1
          0 0003BD  8D47 002C                            SDI      QI@OTTER_SPACE+11,AUTO
          0 0003BF  F800 0000 0042  xsym                 LDR,R7   QI_1+66
          0 0003C2  6C00                                 LDV,R6   0
          0 0003C3  8447 002C                            AID      QI@OTTER_SPACE+11,AUTO
          0 0003C5  7071                                 DCR,R7   1
          0 0003C6  8D47 000C                            SDI      VARIABLE_TARGET$,AUTO

      522    17634    1         QI_1.OFFSET.T );
      523    17635
      524    17636    1       VARIABLE_TARGET$ -> QI$VARIABLE_STRING_TARGET.TEXT =

  17636   0 0003C8  9856                                 LDR,R1   R6
          0 0003C9  E570 7FFF                            AND,R6   32767,IMO
          0 0003CB  8D47 002C                            SDI      QI@OTTER_SPACE+11,AUTO
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:75   
          0 0003CD  ECC7 002C                            LDB,B6   QI@OTTER_SPACE+11,AUTO
          0 0003CF  104F                                 SOR,R1   15
          0 0003D0  8CC7 000A                            LDI      VARIABLE_SOURCE$,AUTO
          0 0003D2  B856                                 LDR,R3   R6
          0 0003D3  E570 7FFF                            AND,R6   32767,IMO
          0 0003D5  8D47 002E                            SDI      QI@OTTER_SPACE+13,AUTO
          0 0003D7  CCC7 002E                            LDB,B4   QI@OTTER_SPACE+13,AUTO
          0 0003D9  304F                                 SOR,R3   15
          0 0003DA  9F47 0030                            STR,R1   QI@OTTER_SPACE+15,AUTO
          0 0003DC  BF47 0031                            STR,R3   QI@OTTER_SPACE+16,AUTO
          0 0003DE  CFC7 0032                            STB,B4   QI@OTTER_SPACE+17,AUTO
          0 0003E0  EFC7 0034                            STB,B6   QI@OTTER_SPACE+19,AUTO
          0 0003E2  AB84                                 LAB,B2   ,B4
          0 0003E3  A853                                 LDR,R2   R3
          0 0003E4  E800 0000 0026  xsym                 LDR,R6   QI_1+38
          0 0003E7  BB86                                 LAB,B3   ,B6
          0 0003E8  B851                                 LDR,R3   R1
          0 0003E9  F800 0000 0027  xsym                 LDR,R7   QI_1+39
          0 0003EC  D380 0000 0000  xent                 LNJ,B5   X6C_ALR

      525    17637    1         VARIABLE_SOURCE$ -> QI$VARIABLE_STRING_SOURCE.TEXT;
      526    17638
      527    17639    1       RETURN;

  17639   0 0003EF  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      528    17640        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:76   
      529    17641    1   QBM$MOVN: ENTRY;

  17641   0 0003F2  D380 0000 0000  xent QBM$MOVN        LNJ,B5   X6A_AUTO_0
          0 0003F5       0036 0000                       DC       54,0

      530    17642
      531    17643        /*D*  NAME:         QBM$MOVN
      532    17644              CALL:         CALL QBM$MOVN;
      533    17645              PARAMETERS:   None.
      534    17646              INTERFACE:    Called by QAT$TALLYHO when a MOVN op-code is
      535    17647                            encountered.
      536    17648                            Calls QCC$DMC for the real move.
      537    17649              ENVIRONMENT:  Nothing unusual.
      538    17650              INPUT:        QI_1,
      539    17651                            FPL rununit static data following the op-code.
      540    17652              OUTPUT:       Target DAD filled up appropriately.
      541    17653              SCRATCH:      Various otter data.
      542    17654              DESCRIPTION:  Move that stuff:  NUMERIC (unpacked) target;
      543    17655                                              packed or unpacked source.
      544    17656                            BINARY sources have already been converted via QBC$CNVBxx.
      545    17657        */
      546    17658
      547    17659    1       NICE_NORMAL_MOVE = %YES;

  17659   0 0003F7  8947 0006                            LBT,'8000'X       NICE_NORMAL_MOVE,AUTO
  17659   0 0003F9       8000

      548    17660    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVN.NEXT_CODE@P );

  17660   0 0003FA  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 0003FD  DBC6 0003                            LAB,B5   3,B6
          0 0003FF  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      549    17661
      550    17662    1       GOTO SETUP_DAD_AS_SOURCE;

  17662   0 000402  0F81 0022                            B        s:17709,PREL
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:77   

      551    17663
      552    17664    1   QBM$MOVP: ENTRY;

  17664   0 000404  D380 0000 0000  xent QBM$MOVP        LNJ,B5   X6A_AUTO_0
          0 000407       0036 0000                       DC       54,0

      553    17665
      554    17666        /*D*  NAME:         QBM$MOVP
      555    17667              CALL:         CALL QBM$MOVP;
      556    17668              PARAMETERS:   None.
      557    17669              INTERFACE:    Called by QAT$TALLYHO when a MOVP op-code is
      558    17670                            encountered.
      559    17671                            Calls QCC$DMC for the real move.
      560    17672              ENVIRONMENT:  Nothing unusual.
      561    17673              INPUT:        QI_1,
      562    17674                            FPL rununit static data following the op-code.
      563    17675              OUTPUT:       Target DAD filled up appropriately.
      564    17676              SCRATCH:      Various otter data.
      565    17677              DESCRIPTION:  Move that stuff:  PACKED target;
      566    17678                                              packed or unpacked source.
      567    17679                            BINARY sources have already been converted via QBC$CNVBxx.
      568    17680        */
      569    17681
      570    17682    1       NICE_NORMAL_MOVE = %YES;

  17682   0 000409  8947 0006                            LBT,'8000'X       NICE_NORMAL_MOVE,AUTO
  17682   0 00040B       8000

      571    17683    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVP.NEXT_CODE@P );

  17683   0 00040C  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00040F  DBC6 0003                            LAB,B5   3,B6
          0 000411  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      572    17684
      573    17685    1       GOTO SETUP_DAD_AS_SOURCE;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:78   

  17685   0 000414  0F81 0010                            B        s:17709,PREL

      574    17686
      575    17687    1   QBM$MOVB: ENTRY;

  17687   0 000416  D380 0000 0000  xent QBM$MOVB        LNJ,B5   X6A_AUTO_0
          0 000419       0036 0000                       DC       54,0

      576    17688
      577    17689        /*D*  NAME:         QBM$MOVB
      578    17690              CALL:         CALL QBM$MOVB;
      579    17691              PARAMETERS:   None.
      580    17692              INTERFACE:    Called by QAT$TALLYHO when a MOVB op-code is
      581    17693                            encountered.
      582    17694                            Calls QCC$CDB for the real move.
      583    17695              ENVIRONMENT:  Nothing unusual.
      584    17696              INPUT:        QI_1,
      585    17697                            FPL rununit static data following the op-code.
      586    17698              OUTPUT:       Target DAD filled up appropriately.
      587    17699              SCRATCH:      Various otter data.
      588    17700              DESCRIPTION:  Move that stuff:  BINARY target;
      589    17701                                              packed or unpacked source.
      590    17702        */
      591    17703
      592    17704    1       NICE_NORMAL_MOVE = %NO;

  17704   0 00041B  8747 0006                            CL       NICE_NORMAL_MOVE,AUTO

      593    17705    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVB.NEXT_CODE@P );

  17705   0 00041D  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 000420  DBC6 0003                            LAB,B5   3,B6
          0 000422  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      594    17706
      595    17707    1   SETUP_DAD_AS_SOURCE:
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:79   
      596    17708
      597    17709    1       CALL QCS$SETUP_SOURCE;

  17709   0 000425  CBF0 0000            SETUP_DAD_AS_SO*LAB,B4   0,IMO
          0 000427  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 00042A       0001                            DC       s:17711,PREL

      598    17710
      599    17711    1       CALL QCS$SETUP_TARGET;

  17711   0 00042B  CBF0 0000                            LAB,B4   0,IMO
          0 00042D  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 000430       0001                            DC       s:17713,PREL

      600    17712
      601    17713    1       CALL PREPARE_FOR_DAD_SOURCE;

  17713   0 000431  E3C0 0172                            LNJ,B6   s:0,PREL
          0 000433       0001                            DC       s:17715,PREL

      602    17714
      603    17715    1       QI_1.A_REG = 0;

  17715   0 000434  8700 0000 0054  xsym                 CL       QI_1+84

      604    17716
      605    17717    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ

  17717   0 000437  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00043A  E806                                 LDR,R6   ,B6
          0 00043B  6D5B                                 CMV,R6   91
          0 00043C  0981 0007                            BNE      s:17721,PREL

      606    17718    1       THEN
      607    17719    1         QI_1.OP.SIZE_ERROR = %QI#CHECK_FOR_SIZE_ERROR;

  17719   0 00043E  5C01                                 LDV,R5   1
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:80   
          0 00043F  DF00 0000 0030  xsym                 STR,R5   QI_1+48
          0 000442  0F81 0004                            B        s:17723,PREL

      608    17720    1       ELSE
      609    17721    1         QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;

  17721   0 000444  8700 0000 0030  xsym                 CL       QI_1+48

      610    17722
      611    17723    1       GOTO SO_DO_THE_MOVN_ALREADY;

  17723   0 000447  0F81 0082                            B        s:17892,PREL

      612    17724
      613    17725    1   QBM$MOVN_VP: ENTRY;

  17725   0 000449  D380 0000 0000  xent QBM$MOVN_VP     LNJ,B5   X6A_AUTO_0
          0 00044C       0036 0000                       DC       54,0
          0 00044E  0F81 0006                            B        s:17761,PREL

      614    17726
      615    17727        /*D*  NAME:         QBM$MOVN_VP
      616    17728              CALL:         CALL QBM$MOVN_VP;
      617    17729              PARAMETERS:   None.
      618    17730              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVN-type
      619    17731                            movement between COBOL and FIELD DADs is required.
      620    17732                            Calls QCC$DMC for the real move.
      621    17733              ENVIRONMENT:  Nothing unusual.
      622    17734              INPUT:        QI_1,
      623    17735                            FPL rununit static data following the op-code.
      624    17736              OUTPUT:       Target DAD filled up appropriately.
      625    17737              SCRATCH:      Various otter data.
      626    17738              DESCRIPTION:  Move that stuff:  NUMERIC (unpacked) target;
      627    17739                                              packed or unpacked source.
      628    17740                            BINARY sources have already been converted by QBV$xxxxxxx.
      629    17741        */
      630    17742
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:81   
      631    17743    1   QBM$MOVP_VP: ENTRY;

  17743   0 000450  D380 0000 0000  xent QBM$MOVP_VP     LNJ,B5   X6A_AUTO_0
          0 000453       0036 0000                       DC       54,0

      632    17744
      633    17745        /*D*  NAME:         QBM$MOVP_VP
      634    17746              CALL:         CALL QBM$MOVP_VP;
      635    17747              PARAMETERS:   None.
      636    17748              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVP-type
      637    17749                            movement between COBOL and FIELD DADs is required.
      638    17750                            Calls QCC$DMC for the real move.
      639    17751              ENVIRONMENT:  Nothing unusual.
      640    17752              INPUT:        QI_1,
      641    17753                            FPL rununit static data following the op-code.
      642    17754              OUTPUT:       Target DAD filled up appropriately.
      643    17755              SCRATCH:      Various otter data.
      644    17756              DESCRIPTION:  Move that stuff:  PACKED target;
      645    17757                                              packed or unpacked source.
      646    17758                            BINARY sources have already been converted by QBV$xxxxxxx.
      647    17759        */
      648    17760
      649    17761    1       NICE_NORMAL_MOVE = %YES;

  17761   0 000455  8947 0006                            LBT,'8000'X       NICE_NORMAL_MOVE,AUTO
  17761   0 000457       8000

      650    17762
      651    17763    1       CALL PREPARE_FOR_DAD_SOURCE;

  17763   0 000458  E3C0 014B                            LNJ,B6   s:0,PREL
          0 00045A       0001                            DC       s:17765,PREL

      652    17764
      653    17765    1       QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;

  17765   0 00045B  8700 0000 0030  xsym                 CL       QI_1+48
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:82   

      654    17766
      655    17767    1       GOTO SO_DO_THE_MOVN_ALREADY;

  17767   0 00045E  0F81 006B                            B        s:17892,PREL

      656    17768
      657    17769    1   QBM$MOVB_VP: ENTRY;

  17769   0 000460  D380 0000 0000  xent QBM$MOVB_VP     LNJ,B5   X6A_AUTO_0
          0 000463       0036 0000                       DC       54,0

      658    17770
      659    17771        /*D*  NAME:         QBM$MOVB_VP
      660    17772              CALL:         CALL QBM$MOVB_VP;
      661    17773              PARAMETERS:   None.
      662    17774              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVB-type
      663    17775                            movement between COBOL and FIELD DADs is required.
      664    17776                            Calls QCC$CDB for the real move.
      665    17777              ENVIRONMENT:  Nothing unusual.
      666    17778              INPUT:        QI_1,
      667    17779                            FPL rununit static data following the op-code.
      668    17780              OUTPUT:       Target DAD filled up appropriately.
      669    17781              SCRATCH:      Various otter data.
      670    17782              DESCRIPTION:  Move that stuff:  BINARY target;
      671    17783                                              packed or unpacked source.
      672    17784        */
      673    17785
      674    17786    1       NICE_NORMAL_MOVE = %NO;

  17786   0 000465  8747 0006                            CL       NICE_NORMAL_MOVE,AUTO

      675    17787
      676    17788    1       CALL PREPARE_FOR_DAD_SOURCE;

  17788   0 000467  E3C0 013C                            LNJ,B6   s:0,PREL
          0 000469       0001                            DC       s:17790,PREL
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:83   

      677    17789
      678    17790    1       QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;

  17790   0 00046A  8700 0000 0030  xsym                 CL       QI_1+48

      679    17791
      680    17792    1       GOTO SO_DO_THE_MOVN_ALREADY;

  17792   0 00046D  0F81 005C                            B        s:17892,PREL

      681    17793
      682    17794    1   QBM$MOVNA: ENTRY;

  17794   0 00046F  D380 0000 0000  xent QBM$MOVNA       LNJ,B5   X6A_AUTO_0
          0 000472       0036 0000                       DC       54,0

      683    17795
      684    17796        /*D*  NAME:         QBM$MOVNA
      685    17797              CALL:         CALL QBM$MOVNA;
      686    17798              PARAMETERS:   None.
      687    17799              INTERFACE:    Called by QAT$TALLYHO when a MOVNA op-code is
      688    17800                            encountered.
      689    17801                            Calls QCC$DMC for the real move.
      690    17802              ENVIRONMENT:  Nothing unusual.
      691    17803              INPUT:        QI_1,
      692    17804                            FPL rununit static data following the op-code.
      693    17805              OUTPUT:       Target DAD filled up appropriately.
      694    17806              SCRATCH:      Various otter data.
      695    17807              DESCRIPTION:  Move that stuff:  NUMERIC (unpacked) target;
      696    17808                                              QI_1.ACCUM (packed) source.
      697    17809                            If a SIZE ERROR occurred getting whatever's in
      698    17810                            the accumulator (QI_1.ACCUM) in there, and if an
      699    17811                            ON SIZE ERROR clause is present, don't do the move.
      700    17812        */
      701    17813
      702    17814    1       NICE_NORMAL_MOVE = %YES;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:84   

  17814   0 000474  8947 0006                            LBT,'8000'X       NICE_NORMAL_MOVE,AUTO
  17814   0 000476       8000

      703    17815    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVNA.NEXT_CODE@P );

  17815   0 000477  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00047A  DBC6 0002                            LAB,B5   2,B6
          0 00047C  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      704    17816
      705    17817    1       GOTO SETUP_ACCUMULATOR_AS_SOURCE;

  17817   0 00047F  0F81 0022                            B        s:17869,PREL

      706    17818
      707    17819    1   QBM$MOVPA: ENTRY;

  17819   0 000481  D380 0000 0000  xent QBM$MOVPA       LNJ,B5   X6A_AUTO_0
          0 000484       0036 0000                       DC       54,0

      708    17820
      709    17821        /*D*  NAME:         QBM$MOVPA
      710    17822              CALL:         CALL QBM$MOVPA;
      711    17823              PARAMETERS:   None.
      712    17824              INTERFACE:    Called by QAT$TALLYHO when a MOVPA op-code is
      713    17825                            encountered.
      714    17826                            Calls QCC$DMC for the real move.
      715    17827              ENVIRONMENT:  Nothing unusual.
      716    17828              INPUT:        QI_1,
      717    17829                            FPL rununit static data following the op-code.
      718    17830              OUTPUT:       Target DAD filled up appropriately.
      719    17831              SCRATCH:      Various otter data.
      720    17832              DESCRIPTION:  Move that stuff:  PACKED target;
      721    17833                                              QI_1.ACCUM (packed) source.
      722    17834                            If a SIZE ERROR occurred getting whatever's in
      723    17835                            the accumulator (QI_1.ACCUM) in there, and if an
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:85   
      724    17836                            ON SIZE ERROR clause is present, don't do the move.
      725    17837        */
      726    17838
      727    17839    1       NICE_NORMAL_MOVE = %YES;

  17839   0 000486  8947 0006                            LBT,'8000'X       NICE_NORMAL_MOVE,AUTO
  17839   0 000488       8000

      728    17840    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVPA.NEXT_CODE@P );

  17840   0 000489  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00048C  DBC6 0002                            LAB,B5   2,B6
          0 00048E  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      729    17841
      730    17842    1       GOTO SETUP_ACCUMULATOR_AS_SOURCE;

  17842   0 000491  0F81 0010                            B        s:17869,PREL

      731    17843
      732    17844    1   QBM$MOVBA: ENTRY;

  17844   0 000493  D380 0000 0000  xent QBM$MOVBA       LNJ,B5   X6A_AUTO_0
          0 000496       0036 0000                       DC       54,0

      733    17845
      734    17846        /*D*  NAME:         QBM$MOVBA
      735    17847              CALL:         CALL QBM$MOVBA;
      736    17848              PARAMETERS:   None.
      737    17849              INTERFACE:    Called by QAT$TALLYHO when a MOVBA op-code is
      738    17850                            encountered.
      739    17851                            Calls QCC$CDB for the real move.
      740    17852              ENVIRONMENT:  Nothing unusual.
      741    17853              INPUT:        QI_1,
      742    17854                            FPL rununit static data following the op-code.
      743    17855              OUTPUT:       Target DAD filled up appropriately.
      744    17856              SCRATCH:      Various otter data.
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:86   
      745    17857              DESCRIPTION:  Move that stuff:  BINARY target;
      746    17858                                              QI_1.ACCUM (packed) source.
      747    17859                            If a SIZE ERROR occurred getting whatever's in
      748    17860                            the accumulator (QI_1.ACCUM) in there, and if an
      749    17861                            ON SIZE ERROR clause is present, don't do the move.
      750    17862        */
      751    17863
      752    17864    1       NICE_NORMAL_MOVE = %NO;

  17864   0 000498  8747 0006                            CL       NICE_NORMAL_MOVE,AUTO

      753    17865    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVBA.NEXT_CODE@P );

  17865   0 00049A  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00049D  DBC6 0002                            LAB,B5   2,B6
          0 00049F  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      754    17866
      755    17867    1   SETUP_ACCUMULATOR_AS_SOURCE:
      756    17868
      757    17869    1       IF  QI_1.A_REG > 0

  17869   0 0004A2  E800 0000 0054  xsym SETUP_ACCUMULAT*LDR,R6   QI_1+84
          0 0004A5  6A81 0008                            BLEZ,R6  s:17878,PREL
          0 0004A7  D805                                 LDR,R5   ,B5
          0 0004A8  5D5B                                 CMV,R5   91
          0 0004A9  0981 0004                            BNE      s:17878,PREL

      758    17870    1         AND QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      759    17871    1       THEN
      760    17872              /* Somebody said "...ON SIZE ERROR...", and QI_1.A_REG
      761    17873                 is set, so an error has occured in a previous
      762    17874                 routine while sticking something into the accumulator.
      763    17875                 Solution:  give up.  */
      764    17876    1         RETURN;

  17876   0 0004AB  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:87   

      765    17877
      766    17878    1       CALL PREPARE_FOR_ACCUMULATOR_SOURCE;

  17878   0 0004AE  E3C0 0132                            LNJ,B6   s:0,PREL
          0 0004B0       0001                            DC       s:17880,PREL

      767    17879
      768    17880    1       CALL QCS$SETUP_TARGET;

  17880   0 0004B1  CBF0 0000                            LAB,B4   0,IMO
          0 0004B3  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 0004B6       0001                            DC       s:17882,PREL

      769    17881
      770    17882    1       QI_1.A_REG = 0;

  17882   0 0004B7  8700 0000 0054  xsym                 CL       QI_1+84

      771    17883
      772    17884    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ

  17884   0 0004BA  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 0004BD  E806                                 LDR,R6   ,B6
          0 0004BE  6D5B                                 CMV,R6   91
          0 0004BF  0981 0007                            BNE      s:17888,PREL

      773    17885    1       THEN
      774    17886    1         QI_1.OP.SIZE_ERROR = %QI#CHECK_FOR_SIZE_ERROR;

  17886   0 0004C1  5C01                                 LDV,R5   1
          0 0004C2  DF00 0000 0030  xsym                 STR,R5   QI_1+48
          0 0004C5  0F81 0004                            B        s:17892,PREL

      775    17887    1       ELSE
      776    17888    1         QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;

PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:88   
  17888   0 0004C7  8700 0000 0030  xsym                 CL       QI_1+48

      777    17889
      778    17890    1   SO_DO_THE_MOVN_ALREADY:
      779    17891
      780    17892    1       IF NICE_NORMAL_MOVE

  17892   0 0004CA  89C7 0006            SO_DO_THE_MOVN_*CMZ      NICE_NORMAL_MOVE,AUTO
          0 0004CC  0881 0012                            BAGE     s:17902,PREL

      781    17893    1       THEN
      782    17894
      783    17895    1         CALL QCC$DMC ( QI_1.OP )

  17895   0 0004CE  BB80 0000 0000  01                   LAB,B3   0
          0 0004D1  CBF0 0100                            LAB,B4   256,IMO
          0 0004D3  E380 0000 0000  xent                 LNJ,B6   QCC$DMC
          0 0004D6       0003                            DC       s:17897,PREL
          0 0004D7  0F81 0005                            B        s:17898,PREL

      784    17896    2         WHENALTRETURN DO;

      785    17897    2             QI_1.A_REG = 1;

  17897   0 0004D9  6C01                                 LDV,R6   1
          0 0004DA  EF00 0000 0054  xsym                 STR,R6   QI_1+84

      786    17898    2           END;

  17898   0 0004DD  0F81 0010                            B        s:17907,PREL

      787    17899
      788    17900    1       ELSE
      789    17901
      790    17902    1         CALL QCC$CDB ( QI_1.OP )

  17902   0 0004DF  BB80 0000 0000  01                   LAB,B3   0
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:89   
          0 0004E2  CBF0 0100                            LAB,B4   256,IMO
          0 0004E4  E380 0000 0000  xent                 LNJ,B6   QCC$CDB
          0 0004E7       0003                            DC       s:17904,PREL
          0 0004E8  0F81 0005                            B        s:17907,PREL

      791    17903    2         WHENALTRETURN DO;

      792    17904    2             QI_1.A_REG = 1;

  17904   0 0004EA  6C01                                 LDV,R6   1
          0 0004EB  EF00 0000 0054  xsym                 STR,R6   QI_1+84

      793    17905    2           END;

      794    17906
      795    17907    1       RETURN;

  17907   0 0004EE  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      796    17908        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:90   
      797    17909    1   QBM$MOVNE: ENTRY;

  17909   0 0004F1  D380 0000 0000  xent QBM$MOVNE       LNJ,B5   X6A_AUTO_0
          0 0004F4       0036 0000                       DC       54,0

      798    17910
      799    17911        /*D*  NAME:         QBM$MOVNE
      800    17912              CALL:         CALL QBM$MOVNE;
      801    17913              PARAMETERS:   None.
      802    17914              INTERFACE:    Called by QAT$TALLYHO when a MOVNE op-code is
      803    17915                            encountered.
      804    17916                            Calls QCC$DME for the real move.
      805    17917              ENVIRONMENT:  Nothing unusual.
      806    17918              INPUT:        QI_1,
      807    17919                            FPL rununit static data following the op-code.
      808    17920              OUTPUT:       Target DAD filled up appropriately.
      809    17921              SCRATCH:      Various otter data.
      810    17922              DESCRIPTION:  Move that stuff:  NUMERIC EDITED target;
      811    17923                                              packed or unpacked source.
      812    17924                            BINARY sources have already been converted via QBC$CNVBxx.
      813    17925        */
      814    17926
      815    17927    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVNE.NEXT_CODE@P );

  17927   0 0004F6  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 0004F9  DBC6 0003                            LAB,B5   3,B6
          0 0004FB  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      816    17928
      817    17929    1       CALL QCS$SETUP_SOURCE;

  17929   0 0004FE  CBF0 0000                            LAB,B4   0,IMO
          0 000500  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 000503       0001                            DC       s:17931,PREL

      818    17930
      819    17931    1       CALL QCS$SETUP_TARGET;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:91   

  17931   0 000504  CBF0 0000                            LAB,B4   0,IMO
          0 000506  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 000509       0001                            DC       s:17933,PREL

      820    17932
      821    17933    1       QI_1.A_REG = 0;

  17933   0 00050A  8700 0000 0054  xsym                 CL       QI_1+84

      822    17934
      823    17935    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ

  17935   0 00050D  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 000510  E806                                 LDR,R6   ,B6
          0 000511  6D5B                                 CMV,R6   91
          0 000512  0981 0007                            BNE      s:17939,PREL

      824    17936    1       THEN
      825    17937    1         QI_1.OP.SIZE_ERROR = %QI#CHECK_FOR_SIZE_ERROR;

  17937   0 000514  5C01                                 LDV,R5   1
          0 000515  DF00 0000 0030  xsym                 STR,R5   QI_1+48
          0 000518  0F81 0004                            B        s:17941,PREL

      826    17938    1       ELSE
      827    17939    1         QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;

  17939   0 00051A  8700 0000 0030  xsym                 CL       QI_1+48

      828    17940
      829    17941    1       GOTO SO_KEEP_MOVNEING_ALREADY;

  17941   0 00051D  0F81 0009                            B        s:17969,PREL

      830    17942
      831    17943    1   QBM$MOVNE_VP: ENTRY;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:92   

  17943   0 00051F  D380 0000 0000  xent QBM$MOVNE_VP    LNJ,B5   X6A_AUTO_0
          0 000522       0036 0000                       DC       54,0

      832    17944
      833    17945        /*D*  NAME:         QBM$MOVNE_VP
      834    17946              CALL:         CALL QBM$MOVNE_VP;
      835    17947              PARAMETERS:   None.
      836    17948              INTERFACE:    Called by QBV$VERIFY or QBV$PRESENT when a MOVNE-type
      837    17949                            movement between COBOL and FIELD DADs is required.
      838    17950                            Calls QCC$DME for the real move.
      839    17951              ENVIRONMENT:  Nothing unusual.
      840    17952              INPUT:        QI_1,
      841    17953                            FPL rununit static data following the op-code.
      842    17954              OUTPUT:       Target DAD filled up appropriately.
      843    17955              SCRATCH:      Various otter data.
      844    17956              DESCRIPTION:  Move that stuff:  NUMERIC EDITED target;
      845    17957                                              packed or unpacked source.
      846    17958                            BINARY sources have already been converted by QBV$xxxxxxx.
      847    17959        */
      848    17960
      849    17961    1       QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;

  17961   0 000524  8700 0000 0030  xsym                 CL       QI_1+48

      850    17962
      851    17963    1   SO_KEEP_MOVNEING_ALREADY:
      852    17964            /* If this guy said 'MOVE "333" TO EDITED-FIELD' then
      853    17965               SETUP has given us an ALPHANUMERIC-like descriptor.
      854    17966               Two things are wrong with it:  it's indexed by R1,
      855    17967               and the FILL bit's on, which makes it look like
      856    17968               'SIGN LEADING SEPARATE' in DISPLAY-ese.  Yuck. */
      857    17969    1       IF QI_1.TYPE.S = %QI#TYPE_ALPHANUMERIC

  17969   0 000527  E800 0000 0050  xsym SO_KEEP_MOVNEIN*LDR,R6   QI_1+80
          0 00052A  6D03                                 CMV,R6   3
          0 00052B  0981 000A                            BNE      s:17976,PREL
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:93   

      858    17970    1       THEN
      859    17971    2         DO;

      860    17972    2           QI_1.OP.CIP.S.AS = %QI#CIP_DEFAULT_AS;

  17972   0 00052D  5C0B                                 LDV,R5   11
          0 00052E  DA80 0000 001A  xsym                 SRM,R5,'007F'X    QI_1+26
          0 000531       007F

      861    17973    2           QI_1.OP.CIP.S.CD.SIGN = %QI#CD_UNSIGNED;

  17973   0 000532  8800 0000 001A  xsym                 LBF,'6000'X       QI_1+26
  17973   0 000535       6000

      862    17974    2         END;

      863    17975
      864    17976    1       GOTO SO_DO_THE_MOVNE_ALREADY;

  17976   0 000536  0F81 0036                            B        s:18024,PREL

      865    17977
      866    17978    1   QBM$MOVNEA: ENTRY;

  17978   0 000538  D380 0000 0000  xent QBM$MOVNEA      LNJ,B5   X6A_AUTO_0
          0 00053B       0036 0000                       DC       54,0

      867    17979
      868    17980        /*D*  NAME:         QBM$MOVNEA
      869    17981              CALL:         CALL QBM$MOVNEA;
      870    17982              PARAMETERS:   None.
      871    17983              INTERFACE:    Called by QAT$TALLYHO when a MOVNEA op-code is
      872    17984                            encountered.
      873    17985                            Calls QCC$DME for the real move.
      874    17986              ENVIRONMENT:  Nothing unusual.
      875    17987              INPUT:        QI_1,
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:94   
      876    17988                            FPL rununit static data following the op-code.
      877    17989              OUTPUT:       Target DAD filled up appropriately.
      878    17990              SCRATCH:      Various otter data.
      879    17991              DESCRIPTION:  Move that stuff:  NUMERIC EDITED target;
      880    17992                                              QI_1.ACCUM (packed) source.
      881    17993                            If a SIZE ERROR occurred getting whatever's in
      882    17994                            the accumulator (QI_1.ACCUM) in there, and if an
      883    17995                            ON SIZE ERROR clause is present, don't do the move.
      884    17996        */
      885    17997
      886    17998    1       QI_1.INSTR$ = ADDR ( QI_1.INSTR$ -> QI$OP_MOVNEA.NEXT_CODE@P );

  17998   0 00053D  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 000540  DBC6 0002                            LAB,B5   2,B6
          0 000542  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      887    17999
      888    18000    1       IF  QI_1.A_REG > 0

  18000   0 000545  E800 0000 0054  xsym                 LDR,R6   QI_1+84
          0 000548  6A81 0008                            BLEZ,R6  s:18010,PREL
          0 00054A  D805                                 LDR,R5   ,B5
          0 00054B  5D5B                                 CMV,R5   91
          0 00054C  0981 0004                            BNE      s:18010,PREL

      889    18001    1         AND QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ
      890    18002    1       THEN
      891    18003              /* Somebody said "...ON SIZE ERROR...", and QI_1.A_REG
      892    18004                 is set, so an error has occured in a previous
      893    18005                 routine while sticking something into the accumulator.
      894    18006                 Solution:  give up.  */
      895    18007    1         RETURN;

  18007   0 00054E  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      896    18008
      897    18009            /* Set up the accumulator as the source... */
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:95   
      898    18010    1       CALL PREPARE_FOR_ACCUMULATOR_SOURCE;

  18010   0 000551  E3C0 008F                            LNJ,B6   s:0,PREL
          0 000553       0001                            DC       s:18012,PREL

      899    18011
      900    18012    1       CALL QCS$SETUP_TARGET;

  18012   0 000554  CBF0 0000                            LAB,B4   0,IMO
          0 000556  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_TARGET
          0 000559       0001                            DC       s:18014,PREL

      901    18013
      902    18014    1       QI_1.A_REG = 0;

  18014   0 00055A  8700 0000 0054  xsym                 CL       QI_1+84

      903    18015
      904    18016    1       IF QI_1.INSTR$ -> QI$OP_SEQUENCE.CODE = %QI#OP_JAZ

  18016   0 00055D  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 000560  E806                                 LDR,R6   ,B6
          0 000561  6D5B                                 CMV,R6   91
          0 000562  0981 0007                            BNE      s:18020,PREL

      905    18017    1       THEN
      906    18018    1         QI_1.OP.SIZE_ERROR = %QI#CHECK_FOR_SIZE_ERROR;

  18018   0 000564  5C01                                 LDV,R5   1
          0 000565  DF00 0000 0030  xsym                 STR,R5   QI_1+48
          0 000568  0F81 0004                            B        s:18024,PREL

      907    18019    1       ELSE
      908    18020    1         QI_1.OP.SIZE_ERROR = %QI#DONT_CHECK_FOR_SIZE_ERROR;

  18020   0 00056A  8700 0000 0030  xsym                 CL       QI_1+48

PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:96   
      909    18021
      910    18022    1   SO_DO_THE_MOVNE_ALREADY:
      911    18023
      912    18024    1       QI_1.OP.CIP.T.AS = %QI#CIP_DEFAULT_AS;

  18024   0 00056D  6C0B                 SO_DO_THE_MOVNE*LDV,R6   11
          0 00056E  EA80 0000 001C  xsym                 SRM,R6,'007F'X    QI_1+28
          0 000571       007F

      913    18025
      914    18026            /* We'll use a handy-dandy canned ALPHANUMERIC data descriptor
      915    18027               to point to the PICture string of the target... */
      916    18028    1       QI_1.OP.CIP.AUX = QI_PICTURE_STRING;

  18028   0 000572  8C80 0000 0000  xsym                 LDI      QI_PICTURE_STRING
          0 000575  8D00 0000 001E  xsym                 SDI      QI_1+30

      917    18029
      918    18030            /* We'll really be pointing at the byte following
      919    18031               MOP_STRING_COUNT, once the offset of 1 in the CIP
      920    18032               descriptor is taken into account.  */
      921    18033    1       QI_1.OP.DATA_A$ (%QI#PICTURE_STRING) =

  18033   0 000578  EC80 0000 004C  xsym                 LDB,B6   QI_1+76
          0 00057B  DBC6 0001                            LAB,B5   1,B6
          0 00057D  DF80 0000 0024  xsym                 STB,B5   QI_1+36

      922    18034    1        ADDR ( QI_1.PICTURE_STRING.T$ -> QI$NUMERIC_PICTURE_STRING.MOP_STRING_COUNT );
      923    18035
      924    18036            /* This next twelve-foot-long assignment is trying to say
      925    18037               that QCC$DME has to know the length of the intermediate
      926    18038               result, which is determined via the max_digit_count of
      927    18039               the picture string itself, i.e., the maximum number of
      928    18040               numeric digits it can hold, e.g.:
      929    18041                       PICture              max_digit_count
      930    18042                        99.99                      4
      931    18043                      $$$9.99                      5 (yeah, 5)
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:97   
      932    18044                        ZZZZ.                      4
      933    18045                              an' like dat.  */
      934    18046    1       QI_1.OP.PICTURE_STRING.INTERMEDIATE_RESULT_LEN =

  18046   0 000580  D806                                 LDR,R5   ,B6
          0 000581  5048                                 SOR,R5   8
          0 000582  D570 001F                            AND,R5   31,IMO
          0 000584  DF00 0000 002E  xsym                 STR,R5   QI_1+46

      935    18047    1         QI_1.PICTURE_STRING.T$ -> QI$NUMERIC_PICTURE_STRING.MAX_DIGIT_COUNT;
      936    18048    1       QI_1.OP.LEN.AUX =

  18048   0 000587  C2C6 0001                            LLH,R4   1,B6
          0 000589  CF00 0000 0028  xsym                 STR,R4   QI_1+40

      937    18049    1         QI_1.PICTURE_STRING.T$ -> QI$NUMERIC_PICTURE_STRING.MOP_STRING_COUNT;
      938    18050    1       QI_1.OP.PICTURE_STRING.DEC =

  18050   0 00058C  B806                                 LDR,R3   ,B6
          0 00058D  B570 003F                            AND,R3   63,IMO
          0 00058F  BF00 0000 002F  xsym                 STR,R3   QI_1+47

      939    18051    1         QI_1.PICTURE_STRING.T$ -> QI$NUMERIC_PICTURE_STRING.DECIMAL_SCALING;
      940    18052
      941    18053    1       CALL QCC$DME ( QI_1.OP )

  18053   0 000592  BB80 0000 0000  01                   LAB,B3   0
          0 000595  CBF0 0100                            LAB,B4   256,IMO
          0 000597  E380 0000 0000  xent                 LNJ,B6   QCC$DME
          0 00059A       0003                            DC       s:18055,PREL
          0 00059B  0F81 0005                            B        s:18058,PREL

      942    18054    2       WHENALTRETURN DO;

      943    18055    2           QI_1.A_REG = 1;

  18055   0 00059D  6C01                                 LDV,R6   1
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:98   
          0 00059E  EF00 0000 0054  xsym                 STR,R6   QI_1+84

      944    18056    2         END;

      945    18057
      946    18058    1       RETURN;

  18058   0 0005A1  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      947    18059        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:99   
      948    18060    1   PREPARE_FOR_DAD_SOURCE: PROC;

  18060   0 0005A4  EFC7 002A            PREPARE_FOR_DAD*STB,B6   QI@OTTER_SPACE+9,AUTO

      949    18061
      950    18062        /*I*  NAME:         PREPARE_FOR_DAD_SOURCE
      951    18063              PURPOSE:      Setup various stuff for numeric-type MOVEs
      952    18064                            with DADs for sources.
      953    18065              CALL:         CALL PREPARE_FOR_DAD_SOURCE
      954    18066              PARAMETERS:   None.
      955    18067              DATA:         QI_1.all_kinds_of_stuff
      956    18068              DESCRIPTION:  Fix various stuff that would normally screw up
      957    18069                            numeric-type moves with alphanumeric-type sources.
      958    18070                            Chop off the source if it's too big, and put in
      959    18071                            a default (non-indexed) address syllable.
      960    18072        */
      961    18073
      962    18074    2       IF QI_1.TYPE.S = %QI#TYPE_ALPHANUMERIC

  18074   0 0005A6  E800 0000 0050  xsym                 LDR,R6   QI_1+80
          0 0005A9  6D03                                 CMV,R6   3
          0 0005AA  0981 0032                            BNE      s:18096,PREL

      963    18075    2       THEN
      964    18076    3         DO;

      965    18077    3           IF QI_1.OP.LEN.S > %QI#MAX_DISPLAY

  18077   0 0005AC  D800 0000 0026  xsym                 LDR,R5   QI_1+38
          0 0005AF  5D0F                                 CMV,R5   15
          0 0005B0  0381 001E                            BLE      s:18091,PREL

      966    18078    3           THEN
      967    18079    4             DO;

      968    18080
      969    18081    4               LEFT_TRUNCATION_LENGTH = QI_1.OP.LEN.S
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:100  

  18081   0 0005B2  5EF1                                 ADV,R5   -15
          0 0005B3  DF47 0004                            STR,R5   LEFT_TRUNCATION_LENGTH,AUTO

      970    18082    4                 - %QI#MAX_DISPLAY_LENGTH;
      971    18083    4               QI_1.OP.DATA.S$ = PINCRW ( QI_1.OP.DATA.S$,

  18083   0 0005B5  5041                                 SOR,R5   1
          0 0005B6  F855                                 LDR,R7   R5
          0 0005B7  6C00                                 LDV,R6   0
          0 0005B8  8400 0000 0020  xsym                 AID      QI_1+32
          0 0005BB  8D00 0000 0020  xsym                 SDI      QI_1+32

      972    18084    4                 ( LEFT_TRUNCATION_LENGTH / 2 ) );
      973    18085    4               QI_1.OFFSET.S = QI_1.OFFSET.S

  18085   0 0005BE  D800 0000 0041  xsym                 LDR,R5   QI_1+65
          0 0005C1  DA47 0004                            ADD,R5   LEFT_TRUNCATION_LENGTH,AUTO
          0 0005C3  DF00 0000 0041  xsym                 STR,R5   QI_1+65

      974    18086    4                 + LEFT_TRUNCATION_LENGTH;
      975    18087    4               QI_1.OP.CIP.S.CD.OFFSET = QI_1.OFFSET.S;

  18087   0 0005C6  500F                                 SOL,R5   15
          0 0005C7  DA80 0000 001A  xsym                 SRM,R5,'8000'X    QI_1+26
          0 0005CA       8000

      976    18088    4               QI_1.OP.LEN.S = %QI#MAX_DISPLAY;

  18088   0 0005CB  5C0F                                 LDV,R5   15
          0 0005CC  DF00 0000 0026  xsym                 STR,R5   QI_1+38

      977    18089
      978    18090    4             END;

      979    18091    3           QI_1.OP.CIP.S.AS = %QI#CIP_DEFAULT_AS;

PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:101  
  18091   0 0005CF  6C0B                                 LDV,R6   11
          0 0005D0  EA80 0000 001A  xsym                 SRM,R6,'007F'X    QI_1+26
          0 0005D3       007F

      980    18092    3           QI_1.OP.CIP.S.LEN = QI_1.OP.LEN.S;

  18092   0 0005D4  5008                                 SOL,R5   8
          0 0005D5  DA80 0000 001A  xsym                 SRM,R5,'1F00'X    QI_1+26
          0 0005D8       1F00

      981    18093    3           QI_1.OP.CIP.S.CD.SIGN = %QI#CD_UNSIGNED;

  18093   0 0005D9  8800 0000 001A  xsym                 LBF,'6000'X       QI_1+26
  18093   0 0005DC       6000

      982    18094    3         END;

      983    18095
      984    18096    2       RETURN;

  18096   0 0005DD  ECC7 002A                            LDB,B6   QI@OTTER_SPACE+9,AUTO
          0 0005DF  C3C6 0001                            LNJ,B4   1,B6

      985    18097
      986    18098    2   END PREPARE_FOR_DAD_SOURCE;
      987    18099        %EJECT;
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:102  
      988    18100    1   PREPARE_FOR_ACCUMULATOR_SOURCE: PROC;

  18100   0 0005E1  EFC7 002A            PREPARE_FOR_ACC*STB,B6   QI@OTTER_SPACE+9,AUTO

      989    18101
      990    18102        /*I*  NAME:         PREPARE_FOR_ACCUMULATOR_SOURCE
      991    18103              PURPOSE:      Setup various stuff for numeric-type MOVEs
      992    18104                            with QI_1.ACCUM for sources.
      993    18105              CALL:         CALL PREPARE_FOR_ACCUMULATOR_SOURCE
      994    18106              PARAMETERS:   None.
      995    18107              DATA:         QI_1.all_kinds_of_stuff
      996    18108              DESCRIPTION:  Just sort of fake a call to QCS$SETUP_SOURCE as if
      997    18109                            that routine were callable with QI_1.ACCUM as the
      998    18110                            DAD to "set up".
      999    18111        */
     1000    18112
     1001    18113            /* Set up accumulator attributes... */
     1002    18114    2       QI_1.OP.CIP.S_A (%QI#DEFAULT_SOURCE) = QI_ACCUMULATOR_DAD.CIP_A (0);

  18114   0 0005E3  E800 0000 0002  xsym                 LDR,R6   QI_ACCUMULATOR_DAD+2
          0 0005E6  EF00 0000 001A  xsym                 STR,R6   QI_1+26

     1003    18115    2       QI_1.OP.DATA_A$ (%QI#DEFAULT_SOURCE) = ADDR ( QI_1.ACCUM (0) );

  18115   0 0005E9  DB80 0000 0057  xsym                 LAB,B5   QI_1+87
          0 0005EC  DF80 0000 0020  xsym                 STB,B5   QI_1+32

     1004    18116
     1005    18117            /* The following code should probably be thrown away if
     1006    18118               it's found to be useless. */
     1007    18119    2       QI_1.OP.DEC_A (%QI#DEFAULT_SOURCE) = %QI#ACCUMULATOR_DEC;

  18119   0 0005EF  5C0F                                 LDV,R5   15
          0 0005F0  DF00 0000 0029  xsym                 STR,R5   QI_1+41

     1008    18120    2       QI_1.IS_ALL_LIT_A (%QI#DEFAULT_SOURCE) = %NO;

PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:103  
  18120   0 0005F3  8800 0000 0038  xsym                 LBF,'8000'X       QI_1+56
  18120   0 0005F6       8000

     1009    18121    2       QI_1.OP.LEN_A (%QI#DEFAULT_SOURCE) = %QI#ACCUMULATOR_LEN;

  18121   0 0005F7  4C1F                                 LDV,R4   31
          0 0005F8  CF00 0000 0026  xsym                 STR,R4   QI_1+38

     1010    18122    2       QI_1.OFFSET_A (%QI#DEFAULT_SOURCE) = %QI#ACCUMULATOR_OFFSET;

  18122   0 0005FB  8700 0000 0041  xsym                 CL       QI_1+65

     1011    18123    2       QI_1.TYPE_A (%QI#DEFAULT_SOURCE) = %QI#ACCUMULATOR_TYPE;

  18123   0 0005FE  3C01                                 LDV,R3   1
          0 0005FF  BF00 0000 0050  xsym                 STR,R3   QI_1+80

     1012    18124    2       QI_1.DAD_A$ (%QI#DEFAULT_SOURCE) = ADDR (QI_ACCUMULATOR_DAD);

  18124   0 000602  CB80 0000 0000  xsym                 LAB,B4   QI_ACCUMULATOR_DAD
          0 000605  CF80 0000 0032  xsym                 STB,B4   QI_1+50

     1013    18125
     1014    18126    2       RETURN;

  18126   0 000608  ECC7 002A                            LDB,B6   QI@OTTER_SPACE+9,AUTO
          0 00060A  C3C6 0001                            LNJ,B4   1,B6
     1015    18127
     1016    18128    2   END PREPARE_FOR_ACCUMULATOR_SOURCE;
     1017    18129
     1018    18130    1   END QBM$MOVES;

PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:104  
--  Include file information  --

   QCD_DE_EDIT_M.:E05TOU  is referenced.
   QI_MACROS_M.:E05TOU  is referenced.
   QI_PERR_C.:E05TOU  is referenced.
   QI_EQUATES_E.:E05TOU  is referenced.
   QG_MACRO_M.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure QBM$MOVES.
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:105  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w UBIN(16)    r     1 LEFT_TRUNCATION_LENGTH
     5-0-0/w UBIN(16)    r     1 MOP_STRING_INDEX           6-0-0/w BIT         r     1 NICE_NORMAL_MOVE
     8-0-0/w UBIN(16)    r     1 OLD_SOURCE_INDEX           9-0-0/w UBIN(16)    r     1 OLD_SOURCE_LENGTH
     E-0-0/w STRC(304)   r     1 QCD@DE_EDIT               21-0-0/w STRC(128)   r     1 QI@OTTER_SPACE
     A-0-0/w PTR         r     1 VARIABLE_SOURCE$           C-0-0/w PTR         r     1 VARIABLE_TARGET$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(2576)  r     1 QI_1
     0-0-0/d STRC(32)    r     1 QI_31_DIGIT_SLS_DISPLAY
     0-0-0/d STRC(64)    r     1 QI_ACCUMULATOR_DAD         0-0-0/d STRC(32)    r     1 QI_PICTURE_STRING

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(32)    r     1 QI$ALPHANUMERIC_PICTURE_STRING
     0-0-0/w STRC(32)    r     1 QI$NUMERIC_PICTURE_STRING
     0-0-0/w STRC(64)    r     1 QI$OP_MOVA                 0-0-0/w STRC(64)    r     1 QI$OP_MOVAE
     0-0-0/w STRC(64)    r     1 QI$OP_MOVAJ                0-0-0/w STRC(64)    r     1 QI$OP_MOVB
     0-0-0/w STRC(48)    r     1 QI$OP_MOVBA                0-0-0/w STRC(64)    r     1 QI$OP_MOVDE
     0-0-0/w STRC(80)    r     1 QI$OP_MOVG                 0-0-0/w STRC(64)    r     1 QI$OP_MOVN
     0-0-0/w STRC(48)    r     1 QI$OP_MOVNA                0-0-0/w STRC(64)    r     1 QI$OP_MOVNE
     0-0-0/w STRC(48)    r     1 QI$OP_MOVNEA               0-0-0/w STRC(64)    r     1 QI$OP_MOVP
     0-0-0/w STRC(48)    r     1 QI$OP_MOVPA                0-0-0/w STRC(32)    r     1 QI$OP_SEQUENCE
     0-0-0/c ASTR(8)     r     1 QI$VARIABLE_IDENTIFIER
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:106  
     0-0-0/c ASTR(0)     r     1 QI$VARIABLE_STRING_SOURCE
     0-0-0/c ASTR(0)     r     1 QI$VARIABLE_STRING_TARGET


   Procedure QBM$MOVES requires 1548 words for executable code.
   Procedure QBM$MOVES requires 54 words of local(AUTO) storage.

    No errors detected in file QBM$MOVES.:E05TSI    .
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:107  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:108  
          MINI XREF LISTING

LEFT_TRUNCATION_LENGTH
     17062**DCL     18081<<ASSIGN  18083>>ASSIGN  18085>>ASSIGN
MOP_STRING_INDEX
     17063**DCL     17304<<DOINDEX 17306>>ASSIGN  17308>>DOCASE
NICE_NORMAL_MOVE
     17064**DCL     17659<<ASSIGN  17682<<ASSIGN  17704<<ASSIGN  17761<<ASSIGN  17786<<ASSIGN  17814<<ASSIGN
     17839<<ASSIGN  17864<<ASSIGN  17892>>IF
OLD_SOURCE_INDEX
     17066**DCL     17344<<ASSIGN  17349>>ASSIGN
OLD_SOURCE_LENGTH
     17067**DCL     17343<<ASSIGN  17348>>ASSIGN
PREPARE_FOR_ACCUMULATOR_SOURCE
     18100**PROC    17878--CALL    18010--CALL
PREPARE_FOR_DAD_SOURCE
     18060**PROC    17713--CALL    17763--CALL    17788--CALL
QCA$ALL_LITERAL_MOVE_A
     17071**DCL-ENT 17231--CALL
QCA$ALL_LITERAL_MOVE_AE
     17072**DCL-ENT 17297--CALL
QCA$ALL_LITERAL_MOVE_AJ
     17073**DCL-ENT 17403--CALL
QCC$ALR
     17074**DCL-ENT 17347--CALL
QCC$CDB
     17075**DCL-ENT 17902--CALL
QCC$DMC
     17076**DCL-ENT 17518--CALL    17895--CALL
QCC$DME
     17077**DCL-ENT 18053--CALL
QCD$DE_EDIT
     17078**DCL-ENT 17508--CALL
QCD@DE_EDIT
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:109  
     17133**DCL     17508<>CALL
QCD@DE_EDIT.IS_NUMBER_INVALID
     17134**DCL     17510>>IF
QCD@DE_EDIT.RESULT.DEC
     17141**DCL     17516>>ASSIGN
QCD@DE_EDIT.RESULT.DIGIT_A
     17138**DCL     17515--ASSIGN
QCE$ERROR
     17079**DCL-ENT 17512--CALL
QCE$ERROR_INTERNAL
     17080**DCL-ENT 17572--CALL
QCS$SETUP_AUX
     17081**DCL-ENT 17469--CALL
QCS$SETUP_SOURCE
     17082**DCL-ENT 17205--CALL    17271--CALL    17377--CALL    17565--CALL    17709--CALL    17929--CALL
QCS$SETUP_TARGET
     17083**DCL-ENT 17206--CALL    17272--CALL    17378--CALL    17472--CALL    17566--CALL    17711--CALL
     17880--CALL    17931--CALL    18012--CALL
QCU$UNSIGN_SOURCE
     17084**DCL-ENT 17238--CALL    17302--CALL    17410--CALL
QGB_PARAM.DVE.DVBYTE.VFC
     11545**DCL     11546--REDEF
QGB_PARAM.DVE.EOMCHAR
     11557**DCL     11558--REDEF
QGB_PARAM.MSG$
     11539**DCL     11540--REDEF
QGB_PARAM.UHDR$
     11564**DCL     11565--REDEF
QI$ACTIVATION_STATUS
      9303**DCL      9309--REDEF
QI$ALPHANUMERIC_PICTURE_STRING.EDIT_STRING_A.FUNCTION
      9229**DCL     17308>>DOCASE
QI$ALPHANUMERIC_PICTURE_STRING.EDIT_STRING_A.LENGTH
      9230**DCL     17306>>ASSIGN
QI$ALPHANUMERIC_PICTURE_STRING.EDIT_STRING_COUNT
      9227**DCL     17304>>DOINDEX
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:110  
QI$CIP
      8144**DCL      8214--REDEF
QI$CIP.CA
      8149**DCL      8153--REDEF    8156--REDEF    8159--REDEF
QI$COBOL_DAD.PSEUDO_CIP
      8388**DCL      8413--REDEF
QI$COBOL_DAD.PSEUDO_CIP.ALPHANUMERIC
      8390**DCL      8395--REDEF
QI$COBOL_DAD.PSEUDO_CIP.NUMERIC.CB
      8396**DCL      8399--REDEF    8402--REDEF
QI$COBOL_DAD.VARIABLE_LENGTH_ITEMS
      8424**DCL      8440--REDEF    8448--REDEF    8456--REDEF
QI$COBOL_DAD.VARIABLE_LENGTH_ITEMS.LEVEL_MULTIPLIERS
      8425**DCL      8435--REDEF    8438--REDEF
QI$COBOL_DAD.WORD0
      8352**DCL      8353--REDEF    8367--REDEF
QI$COBOL_DAD_P_BITS.P
      8492**DCL      8498--REDEF
QI$CONDITION_CONTROL_BLOCK.LIST_A@P
      7978**DCL      7979--REDEF
QI$CONDITION_CONTROL_BLOCK.WORD0_FLAGS
      7974**DCL      7977--REDEF
QI$CONDITION_LEGAL_BLOCK.ARRAY@P
      8011**DCL      8012--REDEF    8013--REDEF
QI$DAD.PSEUDO_CIP
      8291**DCL      8316--REDEF
QI$DAD.PSEUDO_CIP.ALPHANUMERIC
      8293**DCL      8298--REDEF
QI$DAD.PSEUDO_CIP.NUMERIC.CB
      8299**DCL      8302--REDEF    8305--REDEF
QI$DAD.WORD0
      8260**DCL      8261--REDEF
QI$ERROR_MESSAGE_LINE
     11652**DCL     11654--REDEF
QI$ERROR_STATUS
     11649**DCL     11651--REDEF
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:111  
QI$FIELD_DAD.ELEMENTARY_ITEM.P
      8706**DCL      8713--REDEF
QI$FIELD_DAD.ONE_DIMENSIONAL_ITEM.P
      8726**DCL      8733--REDEF
QI$FIELD_DAD.PSEUDO_CIP
      8633**DCL      8658--REDEF
QI$FIELD_DAD.PSEUDO_CIP.ALPHANUMERIC
      8635**DCL      8640--REDEF
QI$FIELD_DAD.PSEUDO_CIP.NUMERIC.CB
      8641**DCL      8644--REDEF    8647--REDEF
QI$FIELD_DAD.TWO_DIMENSIONAL_ITEM.P
      8746**DCL      8753--REDEF
QI$FIELD_DAD.VARIABLE_LENGTH_ITEMS
      8689**DCL      8705--REDEF    8723--REDEF    8741--REDEF
QI$FIELD_DAD.VARIABLE_LENGTH_ITEMS.LEVEL_MULTIPLIERS
      8690**DCL      8700--REDEF    8703--REDEF
QI$FIELD_DAD.WORD0
      8585**DCL      8586--REDEF
QI$FIELD_DAD.WORD0_FLAGS.IO_FLAGS
      8589**DCL      8594--REDEF
QI$FIELD_DAD_P.P
      8787**DCL      8794--REDEF
QI$FIELD_STATUS.INDICATORS
      9453**DCL      9485--REDEF
QI$FIELD_STATUS.INDICATORS.ENABLED_FLAGS
      9457**DCL      9462--REDEF
QI$FIELD_STATUS.INDICATORS.OPEN_FLAGS
      9469**DCL      9476--REDEF
QI$FIELD_STATUS.INDICATORS.STATE_FLAGS
      9463**DCL      9468--REDEF
QI$FILE.WORD0
      8909**DCL      8910--REDEF
QI$FILE_STATUS.INDICATORS
      9746**DCL      9778--REDEF
QI$FILE_STATUS.INDICATORS.ENABLED_FLAGS
      9750**DCL      9755--REDEF
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:112  
QI$FILE_STATUS.INDICATORS.OPEN_FLAGS
      9762**DCL      9769--REDEF
QI$FILE_STATUS.INDICATORS.STATE_FLAGS
      9756**DCL      9761--REDEF
QI$FORM_FILE.USE_PROCEDURE
      9009**DCL      9016--REDEF
QI$FORM_FILE.WORD0
      8963**DCL      8964--REDEF
QI$FORM_STATUS.INDICATORS
      9867**DCL      9899--REDEF
QI$FORM_STATUS.INDICATORS.ENABLED_FLAGS
      9871**DCL      9876--REDEF
QI$FORM_STATUS.INDICATORS.OPEN_FLAGS
      9883**DCL      9890--REDEF
QI$FORM_STATUS.INDICATORS.STATE_FLAGS
      9877**DCL      9882--REDEF
QI$FRAME.WORD0
      9124**DCL      9125--REDEF
QI$FRAME_STATUS.INDICATORS
     10096**DCL     10128--REDEF
QI$FRAME_STATUS.INDICATORS.ENABLED_FLAGS
     10100**DCL     10105--REDEF
QI$FRAME_STATUS.INDICATORS.OPEN_FLAGS
     10112**DCL     10119--REDEF
QI$FRAME_STATUS.INDICATORS.STATE_FLAGS
     10106**DCL     10111--REDEF
QI$GZ_FIELD.DESCRIPTION.IO_FLAGS
     16978**DCL     16983--REDEF
QI$IDENTIFIER
     11655**DCL     11657--REDEF
QI$INDICATORS
      9367**DCL      9397--REDEF
QI$INDICATORS.ENABLED_FLAGS
      9373**DCL      9378--REDEF
QI$INDICATORS.OPEN_FLAGS
      9385**DCL      9392--REDEF
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:113  
QI$INDICATORS.STATE_FLAGS
      9379**DCL      9384--REDEF
QI$MAJOR_NODE.WORD0
      8823**DCL      8824--REDEF
QI$MAJOR_STATUS.INDICATORS
      9546**DCL      9578--REDEF
QI$MAJOR_STATUS.INDICATORS.ENABLED_FLAGS
      9550**DCL      9555--REDEF
QI$MAJOR_STATUS.INDICATORS.OPEN_FLAGS
      9562**DCL      9569--REDEF
QI$MAJOR_STATUS.INDICATORS.STATE_FLAGS
      9556**DCL      9561--REDEF
QI$MESSAGE_TYPE
     11646**DCL     11648--REDEF
QI$MINOR_NODE.WORD0
      8866**DCL      8867--REDEF
QI$MINOR_STATUS.INDICATORS
      9639**DCL      9671--REDEF
QI$MINOR_STATUS.INDICATORS.ENABLED_FLAGS
      9643**DCL      9648--REDEF
QI$MINOR_STATUS.INDICATORS.OPEN_FLAGS
      9655**DCL      9662--REDEF
QI$MINOR_STATUS.INDICATORS.STATE_FLAGS
      9649**DCL      9654--REDEF
QI$NUMERIC_PICTURE_STRING.DECIMAL_SCALING
      9198**DCL     18050>>ASSIGN
QI$NUMERIC_PICTURE_STRING.MAX_DIGIT_COUNT
      9196**DCL     18046>>ASSIGN
QI$NUMERIC_PICTURE_STRING.MOP_STRING_COUNT
      9199**DCL     18033--ASSIGN  18048>>ASSIGN
QI$OP_ACCEPT.DATANAME@P
      6054**DCL      6055--REDEF
QI$OP_CALL.EPTR$
      6226**DCL      6227--REDEF
QI$OP_CLEAR.IO_FLAGS
      6259**DCL      6262--REDEF
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:114  
QI$OP_DISPLAY.FIELD_A@P
      6526**DCL      6527--REDEF
QI$OP_ENABLE.IO_FLAGS
      6613**DCL      6616--REDEF
QI$OP_IFCLS.ATTRIBUTE.TYPE
      6706**DCL      6711--REDEF
QI$OP_INSPECT.TALLYING_FOR_ITEM@P
      6940**DCL      6941--REDEF
QI$OP_INSPECT.TALLYING_INITIAL_ITEM@P
      6942**DCL      6943--REDEF
QI$OP_INSPECT.TALLYING_ITEM@P
      6938**DCL      6939--REDEF
QI$OP_MOVA.NEXT_CODE@P
      7067**DCL     17208--ASSIGN
QI$OP_MOVAE.NEXT_CODE@P
      7096**DCL     17274--ASSIGN
QI$OP_MOVAJ.NEXT_CODE@P
      7125**DCL     17380--ASSIGN
QI$OP_MOVB.NEXT_CODE@P
      7154**DCL     17705--ASSIGN
QI$OP_MOVBA.NEXT_CODE@P
      7182**DCL     17865--ASSIGN
QI$OP_MOVDE.NEXT_CODE@P
      7211**DCL     17474--ASSIGN
QI$OP_MOVG.ANTI_GROUP_LENGTH
      7242**DCL     17624>>ASSIGN  17626>>ASSIGN
QI$OP_MOVG.IS_SOURCE_GROUP
      7240**DCL     17622>>IF
QI$OP_MOVG.NEXT_CODE@P
      7243**DCL     17628--ASSIGN
QI$OP_MOVN.NEXT_CODE@P
      7272**DCL     17660--ASSIGN
QI$OP_MOVNA.NEXT_CODE@P
      7300**DCL     17815--ASSIGN
QI$OP_MOVNE.NEXT_CODE@P
      7329**DCL     17927--ASSIGN
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:115  
QI$OP_MOVNEA.NEXT_CODE@P
      7357**DCL     17998--ASSIGN
QI$OP_MOVP.NEXT_CODE@P
      7386**DCL     17683--ASSIGN
QI$OP_MOVPA.NEXT_CODE@P
      7414**DCL     17840--ASSIGN
QI$OP_OPEN.IO_FLAGS
      7500**DCL      7503--REDEF
QI$OP_PERFM.BINARY_ITERATION_COUNT@P
      7538**DCL      7539--REDEF
QI$OP_SEQUENCE.CODE
      5994**DCL     17478>>IF      17717>>IF      17869>>IF      17884>>IF      17935>>IF      18000>>IF
     18016>>IF
QI$PSEUDO_CIP
      8039**DCL      8063--REDEF
QI$PSEUDO_CIP.ALPHANUMERIC
      8043**DCL      8048--REDEF
QI$PSEUDO_CIP.NUMERIC.CB
      8049**DCL      8052--REDEF    8055--REDEF
QI$TERMINAL_ATTRIBUTES
      9260**DCL      9273--REDEF
QI$TRAN_FILE.WORD0
      9045**DCL      9046--REDEF
QI$TRAN_STATUS.INDICATORS
      9980**DCL     10012--REDEF
QI$TRAN_STATUS.INDICATORS.ENABLED_FLAGS
      9984**DCL      9989--REDEF
QI$TRAN_STATUS.INDICATORS.OPEN_FLAGS
      9996**DCL     10003--REDEF
QI$TRAN_STATUS.INDICATORS.STATE_FLAGS
      9990**DCL      9995--REDEF
QI$VARIABLE_IDENTIFIER.LENGTH
     11659**DCL     11660--IMP-SIZ
QI$VARIABLE_STRING_SOURCE.TEXT
     11666**DCL     17248>>ASSIGN  17320>>ASSIGN  17445>>ASSIGN  17636>>ASSIGN
QI$VARIABLE_STRING_TARGET.TEXT
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:116  
     11668**DCL     17248<<ASSIGN  17320<<ASSIGN  17424<<ASSIGN  17445<<ASSIGN  17636<<ASSIGN
QI@OTTER_SPACE
     17171**DCL     17173--REDEF   17174--REDEF   17237--ASSIGN  17301--ASSIGN  17409--ASSIGN
QI_1.ACCUM
     10939**DCL     18115--ASSIGN
QI_1.A_REG
     10933**DCL     17476<<ASSIGN  17520<<ASSIGN  17715<<ASSIGN  17869>>IF      17882<<ASSIGN  17897<<ASSIGN
     17904<<ASSIGN  17933<<ASSIGN  18000>>IF      18014<<ASSIGN  18055<<ASSIGN
QI_1.BASE
     10188**DCL     10195--REDEF
QI_1.CURRENT.FILE$
     11079**DCL     11081--REDEF   11083--REDEF
QI_1.CURRENT.FILE_STATUS$
     11085**DCL     11087--REDEF   11089--REDEF
QI_1.DAD
     10883**DCL     10888--REDEF
QI_1.DAD_A$
     10888**DCL     18124<<ASSIGN
QI_1.FILE_HEAD
     11066**DCL     11073--REDEF
QI_1.INSTR$
     10196**DCL     17208<<ASSIGN  17208>>ASSIGN  17274<<ASSIGN  17274>>ASSIGN  17380<<ASSIGN  17380>>ASSIGN
     17474<<ASSIGN  17474>>ASSIGN  17478>>IF      17622>>IF      17624>>ASSIGN  17626>>ASSIGN  17628<<ASSIGN
     17628>>ASSIGN  17660<<ASSIGN  17660>>ASSIGN  17683<<ASSIGN  17683>>ASSIGN  17705<<ASSIGN  17705>>ASSIGN
     17717>>IF      17815<<ASSIGN  17815>>ASSIGN  17840<<ASSIGN  17840>>ASSIGN  17865<<ASSIGN  17865>>ASSIGN
     17869>>IF      17884>>IF      17927<<ASSIGN  17927>>ASSIGN  17935>>IF      17998<<ASSIGN  17998>>ASSIGN
     18000>>IF      18016>>IF
QI_1.IS_ALL_LIT
     10889**DCL     10894--REDEF
QI_1.IS_ALL_LIT.S
     10891**DCL     17228>>IF      17294>>IF      17400>>IF      17570>>IF
QI_1.IS_ALL_LIT_A
     10894**DCL     18120<<ASSIGN
QI_1.IS_FORM_VARIABLE
     10895**DCL     10900--REDEF
QI_1.IS_TEMP
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:117  
     10901**DCL     10906--REDEF
QI_1.MESSAGE_LINE_DAD.PSEUDO_CIP
     10999**DCL     11024--REDEF
QI_1.MESSAGE_LINE_DAD.PSEUDO_CIP.ALPHANUMERIC
     11001**DCL     11006--REDEF
QI_1.MESSAGE_LINE_DAD.PSEUDO_CIP.NUMERIC.CB
     11007**DCL     11010--REDEF   11013--REDEF
QI_1.MESSAGE_LINE_DAD.WORD0
     10968**DCL     10969--REDEF
QI_1.OFFSET
     10907**DCL     10912--REDEF
QI_1.OFFSET.S
     10909**DCL     17240>>ASSIGN  17312>>ASSIGN  17437>>ASSIGN  17584>>IF      17588<<ASSIGN  17591<<ASSIGN
     17630>>ASSIGN  18085<<ASSIGN  18085>>ASSIGN  18087>>ASSIGN
QI_1.OFFSET.T
     10910**DCL     17244>>ASSIGN  17316>>ASSIGN  17421>>ASSIGN  17441>>ASSIGN  17607>>IF      17611<<ASSIGN
     17614<<ASSIGN  17633>>ASSIGN
QI_1.OFFSET_A
     10912**DCL     18122<<ASSIGN
QI_1.OP
     10266**DCL     17347<>CALL    17518<>CALL    17895<>CALL    17902<>CALL    18053<>CALL
QI_1.OP.CIP
     10268**DCL     10719--REDEF
QI_1.OP.CIP.AUX
     10634**DCL     10705--REDEF   18028<<ASSIGN
QI_1.OP.CIP.AUX.CD
     10679**DCL     10682--REDEF   10686--REDEF   10689--REDEF
QI_1.OP.CIP.S
     10338**DCL     10409--REDEF   17514<<ASSIGN
QI_1.OP.CIP.S.AS
     10403**DCL     17972<<ASSIGN  18091<<ASSIGN
QI_1.OP.CIP.S.CA.OFFSET
     10387**DCL     17587<<ASSIGN
QI_1.OP.CIP.S.CD
     10383**DCL     10386--REDEF   10390--REDEF   10393--REDEF
QI_1.OP.CIP.S.CD.OFFSET
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:118  
     10384**DCL     18087<<ASSIGN
QI_1.OP.CIP.S.CD.SIGN
     10385**DCL     17580<<ASSIGN  17973<<ASSIGN  18093<<ASSIGN
QI_1.OP.CIP.S.LEN
     10397**DCL     17579<<ASSIGN  17595<<ASSIGN  18092<<ASSIGN
QI_1.OP.CIP.S_A
     10409**DCL     17583<<ASSIGN  18114<<ASSIGN
QI_1.OP.CIP.T
     10486**DCL     10557--REDEF
QI_1.OP.CIP.T.AS
     10551**DCL     18024<<ASSIGN
QI_1.OP.CIP.T.CA.OFFSET
     10535**DCL     17610<<ASSIGN
QI_1.OP.CIP.T.CD
     10531**DCL     10534--REDEF   10538--REDEF   10541--REDEF
QI_1.OP.CIP.T.CD.SIGN
     10533**DCL     17603<<ASSIGN
QI_1.OP.CIP.T.LEN
     10545**DCL     17602<<ASSIGN  17618<<ASSIGN
QI_1.OP.CIP.T_A
     10557**DCL     17606<<ASSIGN
QI_1.OP.DATA
     10726**DCL     10730--REDEF
QI_1.OP.DATA.S$
     10727**DCL     17240>>ASSIGN  17312>>ASSIGN  17437>>ASSIGN  17515<<ASSIGN  17630>>ASSIGN  18083<<ASSIGN
     18083>>ASSIGN
QI_1.OP.DATA.T$
     10728**DCL     17244>>ASSIGN  17316>>ASSIGN  17421>>ASSIGN  17441>>ASSIGN  17633>>ASSIGN
QI_1.OP.DATA_A$
     10730**DCL     18033<<ASSIGN  18115<<ASSIGN
QI_1.OP.DEC.S
     10789**DCL     17516<<ASSIGN
QI_1.OP.DEC_A
     10792**DCL     18119<<ASSIGN
QI_1.OP.FILL_CHAR
     10850**DCL     10853--REDEF
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:119  
QI_1.OP.FILL_CHAR.TEXT
     10851**DCL     17235<<ASSIGN  17332<<ASSIGN  17336<<ASSIGN  17340<<ASSIGN  17407<<ASSIGN
QI_1.OP.INX
     10783**DCL     10787--REDEF   10788--REDEF   10792--REDEF
QI_1.OP.INX.S
     10784**DCL     17240>>ASSIGN  17312>>ASSIGN  17323<<ASSIGN  17323>>ASSIGN  17344>>ASSIGN  17346<<ASSIGN
     17349<<ASSIGN  17431<<ASSIGN  17431>>ASSIGN  17437>>ASSIGN
QI_1.OP.INX.T
     10785**DCL     17244>>ASSIGN  17316>>ASSIGN  17353<<ASSIGN  17353>>ASSIGN  17426<<ASSIGN  17441>>ASSIGN
QI_1.OP.LEN
     10766**DCL     10770--REDEF   10771--REDEF   10775--REDEF   10776--REDEF   10780--REDEF
QI_1.OP.LEN.AUX
     10769**DCL     11670--IMP-SIZ 18048<<ASSIGN
QI_1.OP.LEN.S
     10767**DCL     11666--IMP-SIZ 17248>>ASSIGN  17320>>ASSIGN  17325>>IF      17327<<ASSIGN  17327>>ASSIGN
     17329<<ASSIGN  17343>>ASSIGN  17345<<ASSIGN  17348<<ASSIGN  17417>>IF      17420>>ASSIGN  17427>>ASSIGN
     17431>>ASSIGN  17434<<ASSIGN  17445>>ASSIGN  17592<<ASSIGN  17592>>ASSIGN  17626<<ASSIGN  17636>>ASSIGN
     18077>>IF      18081>>ASSIGN  18088<<ASSIGN  18092>>ASSIGN
QI_1.OP.LEN.T
     10768**DCL     11668--IMP-SIZ 17248>>ASSIGN  17306<<ASSIGN  17320>>ASSIGN  17323>>ASSIGN  17325>>IF
     17327>>ASSIGN  17353>>ASSIGN  17417>>IF      17420<<ASSIGN  17420>>ASSIGN  17424>>ASSIGN  17426>>ASSIGN
     17427<<ASSIGN  17431>>ASSIGN  17434>>ASSIGN  17445>>ASSIGN  17615<<ASSIGN  17615>>ASSIGN  17624<<ASSIGN
     17636>>ASSIGN
QI_1.OP.LEN_A
     10770**DCL     18121<<ASSIGN
QI_1.OP.PICTURE_STRING
     10836**DCL     10839--REDEF   10840--REDEF   10843--REDEF   10844--REDEF   10847--REDEF
QI_1.OP.PICTURE_STRING.DEC
     10838**DCL     18050<<ASSIGN
QI_1.OP.PICTURE_STRING.INTERMEDIATE_RESULT_LEN
     10837**DCL     18046<<ASSIGN
QI_1.OP.ROUND
     10869**DCL     10870--REDEF   10871--REDEF
QI_1.OP.SIZE_ERROR
     10853**DCL     17480<<ASSIGN  17482<<ASSIGN  17504<<ASSIGN  17719<<ASSIGN  17721<<ASSIGN  17765<<ASSIGN
     17790<<ASSIGN  17886<<ASSIGN  17888<<ASSIGN  17937<<ASSIGN  17939<<ASSIGN  17961<<ASSIGN  18018<<ASSIGN
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:120  
     18020<<ASSIGN
QI_1.OP.SRCH_VRFY_ELEMS
     10805**DCL     10808--REDEF
QI_1.OPENED_COUNT
     11074**DCL     11077--REDEF
QI_1.OTTER_SPACE
     10913**DCL     10918--REDEF
QI_1.OTTER_SPACE.S$
     10915**DCL     17237<<ASSIGN  17301<<ASSIGN  17409<<ASSIGN
QI_1.PICTURE_STRING
     10919**DCL     10924--REDEF
QI_1.PICTURE_STRING.T$
     10922**DCL     17304>>DOINDEX 17306>>ASSIGN  17308>>DOCASE  18033>>ASSIGN  18046>>ASSIGN  18048>>ASSIGN
     18050>>ASSIGN
QI_1.SPECIAL_NAMES
     11102**DCL     11111--REDEF
QI_1.TYPE
     10925**DCL     10930--REDEF
QI_1.TYPE.S
     10927**DCL     17576>>DOCASE  17969>>IF      18074>>IF
QI_1.TYPE.T
     10928**DCL     17599>>DOCASE
QI_1.TYPE_A
     10930**DCL     18123<<ASSIGN
QI_16_BIT_BINARY
     16115**DCL     16185--REDEF
QI_16_BIT_BINARY.CB
     16134**DCL     16137--REDEF   16141--REDEF   16144--REDEF
QI_31_DIGIT_SLS_DISPLAY
     15948**DCL     16018--REDEF   17514>>ASSIGN
QI_31_DIGIT_SLS_DISPLAY.CD
     15995**DCL     15998--REDEF   16002--REDEF   16005--REDEF
QI_31_DIGIT_ST_PACKED
     16450**DCL     16520--REDEF
QI_31_DIGIT_ST_PACKED.CP
     16483**DCL     16486--REDEF   16490--REDEF   16493--REDEF
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:121  
QI_32_BIT_BINARY
     16282**DCL     16352--REDEF
QI_32_BIT_BINARY.CB
     16301**DCL     16304--REDEF   16308--REDEF   16311--REDEF
QI_4_CHAR_ALPHANUMERIC
     15780**DCL     15850--REDEF
QI_4_CHAR_ALPHANUMERIC.CA
     15785**DCL     15789--REDEF   15792--REDEF   15795--REDEF
QI_ACCUMULATOR_DAD
     16730**DCL     18124--ASSIGN
QI_ACCUMULATOR_DAD.CIP
     16793**DCL     16864--REDEF
QI_ACCUMULATOR_DAD.CIP.CP
     16824**DCL     16827--REDEF   16831--REDEF   16834--REDEF
QI_ACCUMULATOR_DAD.CIP_A
     16864**DCL     18114>>ASSIGN
QI_ALR.CIP
     11745**DCL     12196--REDEF
QI_ALR.CIP.AUX
     12111**DCL     12182--REDEF
QI_ALR.CIP.AUX.CA
     12114**DCL     12118--REDEF   12121--REDEF   12124--REDEF
QI_ALR.CIP.S
     11815**DCL     11886--REDEF
QI_ALR.CIP.S.CA
     11818**DCL     11822--REDEF   11825--REDEF   11828--REDEF
QI_ALR.CIP.T
     11963**DCL     12034--REDEF
QI_ALR.CIP.T.CA
     11966**DCL     11970--REDEF   11973--REDEF   11976--REDEF
QI_ALR.DATA
     12203**DCL     12207--REDEF
QI_ALR.FILL_CHAR
     12327**DCL     12330--REDEF
QI_ALR.INX
     12260**DCL     12264--REDEF   12265--REDEF   12269--REDEF
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:122  
QI_ALR.LEN
     12243**DCL     12247--REDEF   12248--REDEF   12252--REDEF   12253--REDEF   12257--REDEF
QI_ALR.PICTURE_STRING
     12313**DCL     12316--REDEF   12317--REDEF   12320--REDEF   12321--REDEF   12324--REDEF
QI_ALR.ROUND
     12346**DCL     12347--REDEF   12348--REDEF
QI_ALR.SRCH_VRFY_ELEMS
     12282**DCL     12285--REDEF
QI_MAT.CIP
     15084**DCL     15535--REDEF
QI_MAT.CIP.AUX
     15450**DCL     15521--REDEF
QI_MAT.CIP.AUX.CA
     15453**DCL     15457--REDEF   15460--REDEF   15463--REDEF
QI_MAT.CIP.S
     15154**DCL     15225--REDEF
QI_MAT.CIP.S.CA
     15157**DCL     15161--REDEF   15164--REDEF   15167--REDEF
QI_MAT.CIP.T
     15302**DCL     15373--REDEF
QI_MAT.CIP.T.CA
     15305**DCL     15309--REDEF   15312--REDEF   15315--REDEF
QI_MAT.DATA
     15542**DCL     15546--REDEF
QI_MAT.DEC
     15610**DCL     15614--REDEF   15615--REDEF   15619--REDEF
QI_MAT.FILL_CHAR
     15666**DCL     15669--REDEF
QI_MAT.LEN
     15582**DCL     15586--REDEF   15587--REDEF   15591--REDEF   15592--REDEF   15596--REDEF
QI_MAT.PICTURE_STRING
     15652**DCL     15655--REDEF   15656--REDEF   15659--REDEF   15660--REDEF   15663--REDEF
QI_MAT.ROUND
     15685**DCL     15686--REDEF   15687--REDEF
QI_MAT.SRCH_VRFY_ELEMS
     15621**DCL     15624--REDEF
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:123  
QI_PICTURE_STRING
     16618**DCL     16688--REDEF   18028>>ASSIGN
QI_PICTURE_STRING.CA
     16623**DCL     16627--REDEF   16630--REDEF   16633--REDEF
QI_SRCH_VRFY.CIP
     14415**DCL     14866--REDEF
QI_SRCH_VRFY.CIP.AUX
     14781**DCL     14852--REDEF
QI_SRCH_VRFY.CIP.AUX.CA
     14784**DCL     14788--REDEF   14791--REDEF   14794--REDEF
QI_SRCH_VRFY.CIP.S
     14485**DCL     14556--REDEF
QI_SRCH_VRFY.CIP.S.CA
     14488**DCL     14492--REDEF   14495--REDEF   14498--REDEF
QI_SRCH_VRFY.CIP.T
     14633**DCL     14704--REDEF
QI_SRCH_VRFY.CIP.T.CA
     14636**DCL     14640--REDEF   14643--REDEF   14646--REDEF
QI_SRCH_VRFY.DATA
     14873**DCL     14877--REDEF
QI_SRCH_VRFY.DEC
     14941**DCL     14945--REDEF   14946--REDEF   14950--REDEF
QI_SRCH_VRFY.FILL_CHAR
     14997**DCL     15000--REDEF
QI_SRCH_VRFY.ROUND
     15016**DCL     15017--REDEF   15018--REDEF
QI_SRCH_VRFY.SRCH_RESULT
     14957**DCL     14960--REDEF   14961--REDEF   14964--REDEF   14965--REDEF   14968--REDEF
QI_SRCH_VRFY.SRCH_VRFY_ARGS
     14881**DCL     14885--REDEF   14886--REDEF   14890--REDEF   14891--REDEF   14895--REDEF
QI_SRCH_VRFY.SRCH_VRFY_ELEMS
     14952**DCL     14955--REDEF
QI_TYPE_BINARY_TARGET.CIP
     13742**DCL     14193--REDEF
QI_TYPE_BINARY_TARGET.CIP.AUX
     14108**DCL     14179--REDEF
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:124  
QI_TYPE_BINARY_TARGET.CIP.AUX.CA
     14111**DCL     14115--REDEF   14118--REDEF   14121--REDEF
QI_TYPE_BINARY_TARGET.CIP.S
     13812**DCL     13883--REDEF
QI_TYPE_BINARY_TARGET.CIP.S.CA
     13815**DCL     13819--REDEF   13822--REDEF   13825--REDEF
QI_TYPE_BINARY_TARGET.CIP.T
     13960**DCL     14031--REDEF
QI_TYPE_BINARY_TARGET.CIP.T.CB
     13977**DCL     13980--REDEF   13984--REDEF   13987--REDEF
QI_TYPE_BINARY_TARGET.DATA
     14200**DCL     14204--REDEF
QI_TYPE_BINARY_TARGET.DEC
     14268**DCL     14272--REDEF   14273--REDEF   14277--REDEF
QI_TYPE_BINARY_TARGET.LEN
     14240**DCL     14244--REDEF   14245--REDEF   14249--REDEF   14250--REDEF   14254--REDEF
QI_TYPE_BINARY_TARGET.PICTURE_STRING
     14310**DCL     14313--REDEF   14314--REDEF   14317--REDEF   14318--REDEF   14321--REDEF
QI_TYPE_BINARY_TARGET.ROUND
     14343**DCL     14344--REDEF   14345--REDEF
QI_TYPE_BINARY_TARGET.SIZE_ERROR
     14329**DCL     14330--REDEF
QI_TYPE_BINARY_TARGET.SRCH_VRFY_ELEMS
     14279**DCL     14282--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP
     12410**DCL     12861--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.AUX
     12776**DCL     12847--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.AUX.CA
     12779**DCL     12783--REDEF   12786--REDEF   12789--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.S
     12480**DCL     12551--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.S.CD
     12525**DCL     12528--REDEF   12532--REDEF   12535--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.T
     12628**DCL     12699--REDEF
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:125  
QI_TYPE_DISPLAY_SOURCE.CIP.T.CA
     12631**DCL     12635--REDEF   12638--REDEF   12641--REDEF
QI_TYPE_DISPLAY_SOURCE.DATA
     12868**DCL     12872--REDEF
QI_TYPE_DISPLAY_SOURCE.DEC
     12936**DCL     12940--REDEF   12941--REDEF   12945--REDEF
QI_TYPE_DISPLAY_SOURCE.LEN
     12908**DCL     12912--REDEF   12913--REDEF   12917--REDEF   12918--REDEF   12922--REDEF
QI_TYPE_DISPLAY_SOURCE.PICTURE_STRING
     12978**DCL     12981--REDEF   12982--REDEF   12985--REDEF   12986--REDEF   12989--REDEF
QI_TYPE_DISPLAY_SOURCE.ROUND
     13011**DCL     13012--REDEF   13013--REDEF
QI_TYPE_DISPLAY_SOURCE.SIZE_ERROR
     12997**DCL     12998--REDEF
QI_TYPE_DISPLAY_SOURCE.SRCH_VRFY_ELEMS
     12947**DCL     12950--REDEF
QI_TYPE_DISPLAY_TARGET.CIP
     13076**DCL     13527--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.AUX
     13442**DCL     13513--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.AUX.CA
     13445**DCL     13449--REDEF   13452--REDEF   13455--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.S
     13146**DCL     13217--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.S.CA
     13149**DCL     13153--REDEF   13156--REDEF   13159--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.T
     13294**DCL     13365--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.T.CD
     13339**DCL     13342--REDEF   13346--REDEF   13349--REDEF
QI_TYPE_DISPLAY_TARGET.DATA
     13534**DCL     13538--REDEF
QI_TYPE_DISPLAY_TARGET.DEC
     13602**DCL     13606--REDEF   13607--REDEF   13611--REDEF
QI_TYPE_DISPLAY_TARGET.LEN
     13574**DCL     13578--REDEF   13579--REDEF   13583--REDEF   13584--REDEF   13588--REDEF
PL6.E3A0      #001=QBM$MOVES File=QBM$MOVES.:E05TSI                              WED 07/30/97 04:52 Page:126  
QI_TYPE_DISPLAY_TARGET.PICTURE_STRING
     13644**DCL     13647--REDEF   13648--REDEF   13651--REDEF   13652--REDEF   13655--REDEF
QI_TYPE_DISPLAY_TARGET.ROUND
     13677**DCL     13678--REDEF   13679--REDEF
QI_TYPE_DISPLAY_TARGET.SIZE_ERROR
     13663**DCL     13664--REDEF
QI_TYPE_DISPLAY_TARGET.SRCH_VRFY_ELEMS
     13613**DCL     13616--REDEF
SETUP_ACCUMULATOR_AS_SOURCE
     17869**LABEL   17817--GOTO    17842--GOTO
SETUP_DAD_AS_SOURCE
     17709**LABEL   17662--GOTO    17685--GOTO
SO_DO_THE_MOVDE_ALREADY
     17508**LABEL   17484--GOTO
SO_DO_THE_MOVNE_ALREADY
     18024**LABEL   17976--GOTO
SO_DO_THE_MOVN_ALREADY
     17892**LABEL   17723--GOTO    17767--GOTO    17792--GOTO
SO_KEEP_MOVNEING_ALREADY
     17969**LABEL   17941--GOTO
STICK_IT
     17343**LABEL   17333--GOTO    17337--GOTO
VARIABLE_SOURCE$
     17068**DCL     17240<<ASSIGN  17248>>ASSIGN  17312<<ASSIGN  17320>>ASSIGN  17437<<ASSIGN  17445>>ASSIGN
     17630<<ASSIGN  17636>>ASSIGN
VARIABLE_TARGET$
     17069**DCL     17244<<ASSIGN  17248>>ASSIGN  17316<<ASSIGN  17320>>ASSIGN  17421<<ASSIGN  17424>>ASSIGN
     17441<<ASSIGN  17445>>ASSIGN  17633<<ASSIGN  17636>>ASSIGN
