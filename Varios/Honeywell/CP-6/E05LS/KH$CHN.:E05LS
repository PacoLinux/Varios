

14:46 JUL 28 '97 KH$CHN.:E05SI                                             1    
    1      /*M* KH$CHN channel table entry description */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /*P* NAME: KH$CHN
    9
   10      The KH$CHN file contains the following:
   11
   12      KH$CHN - Macro to generate the Channel Table Context Blocks
   13
   14      */
   15
   16
   17      /*F* NAME: KH$CHN - Channel Context Block Structure
   18
   19      This structure is the context maintained by Handler Administration.
   20
   21      It is used for the channel level (level 1) as well as the sub device levels
   22      (levels 2 and 3).  A large number of the items in here can be modified
   23      the CONFIG command in NETCON and also the default for a particular
   24      handler.
   25
   26      A channel table entry is located by:
   27
   28      }  CHN$ = PINCRW (KH_CHNLOW$, SIZEW(KH$CHN) * (CHN  / 128));
   29
   30      The KH$CHN macro in file KH$CHN may be used to generate
   31      the structure for the Channel Context Block.
   32      Note that the use of the KH$CHN macro will require
   33      macros from the LCP_6 include file.
   34
   35      The Channel Context Block contains the following fields:
   36      */
   37
14:46 JUL 28 '97 KH$CHN.:E05SI                                             2    
   38      %MACRO KH$CHN(NAME = KH$CHN, LAST = ";", STCLASS = BASED, LVL = 1);
   39      %LSET LISTDIR = '0'B;
   40      %LSET LISTEXP = '1'B;
   41      %LSET LISTCOM = '0'B;
   42      %LSET LISTSUB = '1'B;
   43      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
   44      %IF (STR = 'STA') OR (STR = 'CON') OR (STR = 'EXT');
   45      %LSET INIT = CHARTEXT(' INIT');
   46      %LSET ENIT = CHARTEXT('');
   47      %ELSE;
   48      %LSET INIT = CHARTEXT('/*');
   49      %LSET ENIT = CHARTEXT('*/');
   50      %ENDIF;
   51      %LSET LEVP1 = %(LVL+1);
   52      %IF LVL = 1;
   53      DCL 1 NAME WALIGNED STCLASS,
   54      %ELSE;
   55      %(LVL) NAME,
   56      %ENDIF;
   57      %IF TEXTCHAR(STCLASS) = 'BASED' AND TEXTCHAR(NAME) = 'KH$CHN';
   58      %EQU KH_CHN = CHARTEXT('KV$PTR.VDI$->KV$VDI.CHN$->KH$CHN');
   59      %ENDIF;
   60      /*******************************************************************/
   61      /* WARNING:  If you change the position of KH$CHN.LCT55,           */
   62      /* KH#CHN_LCT55_WRDX in KHI$IO (L6ASM needs to be updated).        */
   63      /*******************************************************************/
   64
   65      /*K* CHNBIT0_9 - UBIN(10).
   66      For the channel level: Channel, bits 0 - 9.
   67      Not used for levels 2 and 3.
   68      */
   69
   70               %(LVL+1) CHNBIT0_9 UBIN(10) UNAL %INIT(0)%ENIT,
   71
   72      /*K* CLK - BIT(1).
   73      If set, indicates that the channel should do clocking.
   74      */
14:46 JUL 28 '97 KH$CHN.:E05SI                                             3    
   75
   76              %IF NOT(MODE_FEP);
   77                 %(LVL+1) * BIT(2) UNAL %INIT('0'B*0)%ENIT,
   78              %ENDIF;
   79               %(LVL+1) CLK BIT(1) %INIT('0'B)%ENIT,
   80
   81
   82      /*K* RMTHST - BIT(1).
   83      If set, indicate a remote host.
   84      */
   85
   86               %(LVL+1) RMTHST BIT(1) %INIT('0'B)%ENIT,
   87
   88      /*K* DBG - BIT(1).
   89      If set, indicates that the system is to do optional debug functions
   90      (traces, snaps, etc.).  Note that other flags, including more global
   91      flags, may also have an effect on debug function selection.
   92      */
   93
   94               %(LVL+1) DBG BIT(1) %INIT('0'B)%ENIT,
   95
   96      /*K* AUTLGN - BIT(1).
   97      If set, indicates an auto logon exists in the host for this channel.
   98      */
   99
  100               %(LVL+1) AUTLGN BIT(1) UNAL %INIT('0'B)%ENIT,
  101
  102      /*K* AUTLGNFAILED - BIT(1).
  103      If set, indicates that the auto logon of this line failed.
  104      */
  105
  106               %(LVL+1) AUTLGNFAILED BIT(1) UNAL %INIT('0'B)%ENIT,
  107
  108      /*K* PROFILE - BIT(1).
  109      If set, indicates that there is a profile defined for this line.
  110      */
  111
14:46 JUL 28 '97 KH$CHN.:E05SI                                             4    
  112               %(LVL+1) PROFILE BIT(1) UNAL %INIT('0'B)%ENIT,
  113
  114      /*K* STT - UBIN BYTE.
  115      Contains a value that reflects the STaTe of the channel.
  116      The KH$CHN macro generates EQU statements that may be
  117      used to determine the meaning of STT as follows:
  118      ..::TB "^\ #  EQUated Symbol\#20\Meaning\#"
  119      .trf '#
  120       0  KH'CHN_STT_UN_INT                Channel is uninitialized
  121       1  KH'CHN_STT_BSY                   Channel is busy
  122       2  KH'CHN_STT_BSYDSBPND             Channel busy; disable pending
  123       3  KH'CHN_STT_BSYPRTPND             Channel busy; partition pending
  124       4  KH'CHN_STT_DSB                   Channel disabled
  125       5  KH'CHN_STT_ENB                   Channel enabled
  126       6  KH'CHN_STT_PRT                   Channel partitioned
  127       7  KH'CHN_STT_LINPROPND_ENB         Enabled; waiting on line profile
  128       8  KH'CHN_STT_LINPROPND_BSY         Busy; waiting on line profile
  129       9  KH'CHN_STT_LINPROPND_BSYDSBPND   Disable pending; waiting on profile
  130      10  KH'CHN_STT_NTRDY                 Not ready for use
  131      11  KH'CHN_STT_DIAG                  Channel being used for diagnostics
  132      12  KH'CHN_STT_RMTDBG                Channel is a remote debug channel
  133      .trf ''
  134      ..::TB
  135      */
  136
  137                 %IF NOT(MODE_FEP);
  138                    %(LVL+1) STT,
  139                       %(LVL+2) * BIT(1) UNAL %INIT('0'B)%ENIT,
  140                       %(LVL+2) BYT UBIN(8) UNAL %INIT(%KH#CHN_STT_NTRDY)%ENIT,
  141                 %ELSE;
  142                    %(LVL+1) STT UBIN BYTE UNAL %INIT(%KH#CHN_STT_NTRDY)%ENIT,
  143                 %ENDIF;
  144
  145
  146
  147
  148                 %IF NOT(MODE_FEP);
14:46 JUL 28 '97 KH$CHN.:E05SI                                             5    
  149                    %(LVL+1) * BIT(1) %INIT('0'B)%ENIT,
  150                 %ENDIF;
  151
  152      /*K* BRKRQ - BIT(1).
  153      If set, indicates that a break is required for this line.
  154      */
  155               %(LVL+1) BRKRQ BIT(1) %INIT('0'B)%ENIT,
  156
  157      /*K* CCPDWNLD - ARRAY(0:3) BIT(1).
  158      Contains the bit settings indicating CCP down loaded.
  159
  160      The KH$CHN macro generates EQU statements that may be
  161      used to index into this array as follows:
  162
  163      .fif
  164       value    EQUated Symbol
  165       -----    ----------------------
  166         00     KH#CHN_CCPDWNLD_ASYNC
  167         01     KH#CHN_CCPDWNLD_SYNC
  168         02     KH#CHN_CCPDWNLD_HDLC
  169         03     KH#CHN_CCPDWNLD_OTHER
  170      .fin
  171      */
  172
  173               %(LVL+1) CCPDWNLD(0:3) BIT(1) %INIT('0'B*0)%ENIT,
  174               %(LVL+1) * BIT(3) %INIT('0'B*0)%ENIT,
  175
  176      /*K* DVCID - BIT(16).
  177      Contains the hardware device id for this channel.
  178      */
  179
  180                 %IF NOT(MODE_FEP);
  181                    %(LVL+1) DVCID(0:1),
  182                       %(LVL+2) * BIT(1) %INIT('0'B)%ENIT,
  183                       %(LVL+2) BYT BIT(8) %INIT('0'B*0)%ENIT,
  184                    %(LVL+1) EXTDVCID(0:1),
  185                       %(LVL+2) * BIT(1) %INIT('0'B)%ENIT,
14:46 JUL 28 '97 KH$CHN.:E05SI                                             6    
  186                       %(LVL+2) BYT BIT(8) %INIT('0'B*0)%ENIT,
  187                 %ELSE;
  188                    %(LVL+1) DVCID BIT(16) %INIT('0'B*0)%ENIT,
  189
  190
  191      /*K* EXTDVCID - BIT(16).
  192      Contains the extended device identifier.
  193      */
  194                   %(LVL+1) EXTDVCID BIT(16) %INIT('0'B*0)%ENIT,
  195                 %ENDIF;
  196
  197      /*K* RESOURCE - CHAR(2).
  198      Contains the software resource type used to acquire this channel.
  199      */
  200               %(LVL+1) RESOURCE CHAR(2) %INIT(' '*0)%ENIT,
  201
  202
  203      /*K* ATTR - BIT(16).
  204      Contains the software attributes of this device.
  205      */
  206              %IF NOT(MODE_FEP);
  207                 %(LVL+1) ATTR(0:1),
  208                    %(LVL+2) * BIT(1) %INIT('0'B)%ENIT,
  209                    %(LVL+2) BYT BIT(8) %INIT('0'B*0)%ENIT,
  210                 %(LVL+1) SYSID(0:1) UNAL,
  211                    %(LVL+2) * BIT(1) UNAL %INIT('0'B)%ENIT,
  212                    %(LVL+2) BYT UBIN(8) UNAL %INIT(0)%ENIT,
  213              %ELSE;
  214                  %(LVL+1) ATTR BIT(16) %INIT('0'B*0)%ENIT,
  215
  216      /*K* SYSID - UBIN.
  217      Contains the Sysid of the user that owns this channel.
  218      */
  219               %(LVL+1) SYSID UBIN WORD UNAL %INIT(0)%ENIT,
  220              %ENDIF;
  221
  222              %IF NOT(MODE_FEP);
14:46 JUL 28 '97 KH$CHN.:E05SI                                             7    
  223                 %(LVL+1) * BIT(1) %INIT('0'B)%ENIT,
  224              %ENDIF;
  225
  226      /*K* DRCCNC - BIT(1).
  227      If set, indicates that the channel is directly connected.
  228      */
  229               %(LVL+1) DRCCNC BIT(1) %INIT('1'B)%ENIT,
  230
  231      /*K* INP - BIT(1).
  232      If set, indicates that input is allowed on this channel.*/
  233
  234               %(LVL+1) INP BIT(1) %INIT('1'B)%ENIT,
  235
  236      /*K* OTP - BIT(1).
  237      If set, indicates that output is allowed on this channel.*/
  238
  239               %(LVL+1) OTP BIT(1) %INIT('1'B)%ENIT,
  240
  241      /*K* DWNLOD - BIT(1).
  242      If set, indicates that the download of the CCP is complete.*/
  243
  244               %(LVL+1) DWNLOD BIT(1) %INIT('0'B)%ENIT,
  245
  246      /*K* INPCCBCNT - UBIN(4).
  247      Contains the input CCP count.*/
  248
  249               %(LVL+1) INPCCBCNT UBIN(4) UNAL %INIT(0)%ENIT,
  250
  251              %IF NOT(MODE_FEP);
  252                 %(LVL+1) * BIT(1) %INIT('0'B)%ENIT,
  253              %ENDIF;
  254
  255      /*K* RE_ENB - BIT(1).
  256      If set, indicates that the channel is re-enabled (after
  257      disconnect).  KH$CHN.RE_ENB is set by NETCON REENABLE=YES.*/
  258
  259               %(LVL+1) RE_ENB BIT(1) %INIT('1'B)%ENIT,
14:46 JUL 28 '97 KH$CHN.:E05SI                                             8    
  260
  261      /*K* ENB - BIT(1).
  262      If set, indicates that the channel is enabled after
  263      initializing.  KH$CHN.ENB is set by NETCON ENABLE=YES.*/
  264
  265               %(LVL+1) ENB BIT(1) %INIT('1'B)%ENIT,
  266
  267      /*K* CTR - BIT(1).
  268      If set, indicates that this is first device on a controller.*/
  269               %(LVL+1) CTR BIT(1) UNAL %INIT('0'B)%ENIT,
  270
  271                %(LVL+1) * BIT(1) %INIT('0'B)%ENIT,
  272
  273      /*K* OTPCCBCNT - UBIN(4).
  274      Contains the output CCB count for this channel.*/
  275
  276               %(LVL+1) OTPCCBCNT UBIN(4) UNAL %INIT(0)%ENIT,
  277
  278      /*K* LCT55 - UBIN BYTE.
  279      Contains the contents of LCT55 in CLC hardware.*/
  280
  281                 %IF NOT(MODE_FEP);
  282                    %(LVL+1) LCT55 CALIGNED,
  283                       %(LVL+2) * BIT(1) %INIT('0'B)%ENIT,
  284                       %(LVL+2) BYT UBIN(8) UNAL %INIT(0)%ENIT,
  285                 %ELSE;
  286                    %(LVL+1) LCT55 UBIN BYTE CALIGNED %INIT(0)%ENIT,
  287              %ENDIF;
  288
  289              %IF NOT(MODE_FEP);
  290                 %(LVL+1) * BIT(1) %INIT('0'B)%ENIT,
  291              %ENDIF;
  292
  293
  294      /*K* INPCCBSTTPTRVLD - BIT(1).
  295      If set, indicates that the input CCB status pointer is valid.*/
  296
14:46 JUL 28 '97 KH$CHN.:E05SI                                             9    
  297               %(LVL+1) INPCCBSTTPTRVLD BIT(1) %INIT('0'B)%ENIT,
  298
  299      /*K* OTPCCBSTTPTRVLD - BIT(1).
  300      If set, indicates that the output CCB status pointer is valid.*/
  301
  302               %(LVL+1) OTPCCBSTTPTRVLD BIT(1) %INIT('0'B)%ENIT,
  303
  304      /*K* DRPDTR - BIT(1).
  305      If set, indicates that Drop DTR (data terminal ready)
  306      is sent when going through disconnect. */
  307
  308               %(LVL+1) DRPDTR BIT(1) %INIT('0'B)%ENIT,
  309
  310      /*K* AUTBAD - BIT(1).
  311      If set, indicates auto baud is used on this channel.*/
  312
  313               %(LVL+1) AUTBAD BIT(1) %INIT('1'B)%ENIT,
  314
  315
  316      /*K* LINSPD - UBIN(4).
  317      Contains the line speed for this channel.*/
  318
  319               %(LVL+1) LINSPD UBIN(4) UNAL %INIT(6)%ENIT,
  320
  321      /*K* BUG - BIT(1).
  322      If set, indicates a bug occurred on this channel.*/
  323
  324                 %IF NOT(MODE_FEP);
  325                    %(LVL+1) * BIT(1) %INIT('0'B)%ENIT,
  326                 %ENDIF;
  327
  328               %(LVL+1) BUG BIT(1) %INIT('0'B)%ENIT,
  329
  330      /*K* DC1DC3NTWOTPFLWCTR - BIT(1).
  331      Is used only by ASYNC.  If DC1DC3NTWOTPFLWCTR is set,
  332         DC1/DC3 (XON/XOFF) flow control
  333         is being used to control the asynchronous handler's output down
14:46 JUL 28 '97 KH$CHN.:E05SI                                             10   
  334         the line, but it is not being used by the device itself.  There is
  335         some sort of connection such as a network between the asynchronous
  336         handler and the device that requires us to honor
  337         DC1 and DC3 to control output.  Note that a better method of
  338         effecting this sort of flow control is the manipulating of
  339         the FEP's CTS (clear to send) RS-232 line.  Also note that this
  340         flow control differs from setting DVVFLWCTRALG = DC1DC3 in that this
  341         flow control buffers pads. */
  342
  343               %(LVL+1) DC1DC3NTWOTPFLWCTR BIT(1) %INIT('0'B)%ENIT,
  344
  345      /*K* DSBHSTDWN - BIT(1).
  346      If set, indicates that this channel is disabled if the
  347      host goes down.*/
  348                %(LVL+1) DSBHSTDWN BIT(1) %INIT('0'B)%ENIT,
  349
  350      /*K* KLLHSTDWN - BIT(1).
  351      If set, indicates that this channel is killed if the
  352      host goes down.*/
  353
  354                %(LVL+1) KLLHSTDWN BIT(1) %INIT('0'B)%ENIT,
  355
  356      /*K* ENBHSTUP - BIT(1).
  357      If set, indicates that this channel is enabled after
  358      host recovery.*/
  359                %(LVL+1) ENBHSTUP BIT(1) %INIT('0'B)%ENIT,
  360
  361      /*K* SNDSLT - BIT(1).
  362      If set, send a salutation to this line.*/
  363
  364                 %(LVL+1) SNDSLT BIT(1) %INIT('1'B)%ENIT,
  365
  366      /*K* ECHLGN - BIT(1).
  367      If set, echo the logon for this line.*/
  368                 %(LVL+1) ECHLGN BIT(1) %INIT('0'B)%ENIT,
  369
  370      /*K* DED - BIT(1).
14:46 JUL 28 '97 KH$CHN.:E05SI                                             11   
  371      If set, the line is dead (because of a
  372      non-existent resource/NAK).  When a handler could cause IONAKs,
  373      it should clear DED after the questionable operation.  If it also
  374      does not want the IONAKs logged, it should set DED before attempting
  375      the operation.*/
  376
  377               %(LVL+1) DED BIT(1) %INIT('0'B)%ENIT,
  378              %IF NOT(MODE_FEP);
  379                 %(LVL+1) REDTIMOUTPRD CALIGNED,
  380                    %(LVL+2) * BIT(1) %INIT('0'B)%ENIT,
  381                    %(LVL+2) BYT UBIN(8) UNAL %INIT(0)%ENIT,
  382                 %(LVL+1) LGNTIMOUTPRD CALIGNED,
  383                    %(LVL+2) * BIT(1) %INIT('0'B)%ENIT,
  384                    %(LVL+2) BYT UBIN(8) UNAL %INIT(0)%ENIT,
  385                 %(LVL+1) TPTIMOUTPRD UNAL,
  386                    %(LVL+2) * BIT(1) %INIT('0'B)%ENIT,
  387                    %(LVL+2) BYT UBIN(8) UNAL %INIT(0)%ENIT,
  388                 %(LVL+1) INPBFRBYTSIZ(0:1),
  389                    %(LVL+2) * BIT(1) %INIT('0'B)%ENIT,
  390                    %(LVL+2) BYT UBIN(8) UNAL %INIT(0)%ENIT,
  391              %ELSE;
  392
  393
  394      /*K* REDTIMOUTPRD - UBIN BYTE.
  395      Contains the read time-out period.*/
  396
  397               %(LVL+1) REDTIMOUTPRD UBIN BYTE CALIGNED %INIT(0)%ENIT,
  398
  399      /*K* LGNTIMOUTPRD - UBIN BYTE.
  400      Contains the logon time-out period. */
  401
  402               %(LVL+1) LGNTIMOUTPRD UBIN BYTE CALIGNED %INIT(0)%ENIT,
  403
  404      /*K* TPTIMOUTPRD - UBIN BYTE.
  405      Contains the TP timeout period.*/
  406
  407               %(LVL+1) TPTIMOUTPRD UBIN BYTE UNAL %INIT(0)%ENIT,
14:46 JUL 28 '97 KH$CHN.:E05SI                                             12   
  408
  409      /*K* INPBFRBYTSIZ - UBIN WORD.
  410      Contains the input buffer byte size. */
  411
  412               %(LVL+1) INPBFRBYTSIZ UBIN WORD %INIT(0)%ENIT,
  413              %ENDIF;
  414
  415      /*K* CTX$ - PTR.
  416      Is the context pointer.*/
  417
  418               %(LVL+1) CTX$ PTR %INIT(ADDR(NIL))%ENIT,
  419
  420
  421              %IF NOT(MODE_FEP);
  422                 %(LVL+1) INTCNT,
  423                    %(LVL+2) * BIT(4) %INIT('0'B*0)%ENIT,
  424                    %(LVL+2) BYT UBIN(32) UNAL %INIT(0)%ENIT,
  425                 %(LVL+1) BLOCK(0:1),
  426                    %(LVL+2) * BIT(1) %INIT('0'B)%ENIT,
  427                    %(LVL+2) BYT UBIN(8) UNAL %INIT(0)%ENIT,
  428                 %(LVL+1) UNBLOCK(0:1),
  429                    %(LVL+2) * BIT(1) %INIT('0'B)%ENIT,
  430                    %(LVL+2) BYT UBIN(8) UNAL %INIT(0)%ENIT,
  431              %ELSE;
  432      /*K* INTCNT - UBIN(32).
  433      Contains the interrupt count.*/
  434
  435               %(LVL+1) INTCNT UBIN(32) %INIT(0)%ENIT,
  436
  437      /*K* BLOCK - UBIN WORD.
  438      Contains the blocking value.*/
  439
  440               %(LVL+1) BLOCK UBIN WORD %INIT(0)%ENIT,
  441
  442      /*K* UNBLOCK - UBIN WORD.
  443      Contains the unblocking value.*/
  444
14:46 JUL 28 '97 KH$CHN.:E05SI                                             13   
  445               %(LVL+1) UNBLOCK UBIN WORD %INIT(0)%ENIT,
  446              %ENDIF;
  447
  448
  449      /*K* TERMID - Identifies the terminal corresponding to this entry.
  450      This portion of the KH$CHN structure is in B$TERMINAL_ID format:
  451      */
  452      /*K* TERMID.TTYP - UBIN BYTE.
  453      .XEQ KI_CP6_C B$TERMINAL_ID TTYP
  454      */
  455      /*K* TERMID.LEV - UBIN BYTE.
  456      .XEQ KI_CP6_C B$TERMINAL_ID LEV
  457      */
  458      /*K* TERMID.TERM.CHANNEL - UBIN.
  459      .XEQ KI_CP6_C B$TERMINAL_ID TERM.CHANNEL
  460      */
  461      /*K* TERMID.TERM.SUBDEVICE - UBIN.
  462      .XEQ KI_CP6_C B$TERMINAL_ID TERM.SUBDEVICE
  463      */
  464      /*K* TERMID.TERM.SUBSUBDEVICE - UBIN.
  465      .XEQ KI_CP6_C B$TERMINAL_ID TERM.SUBSUBDEVICE
  466      */
  467      /*K* TERMID.TERM.TERM_NAME - CHAR(8).
  468      .XEQ KI_CP6_C B$TERMINAL_ID TERM.TERM_NAME
  469      */
  470               %B$TERMINAL_ID(FPTN=TERMID,STCLASS=STCLASS,LVL=LEVP1,LAST=",");
  471
  472      /*K* SUB$ - PTR.
  473      Is the pointer to the sub-context block.*/
  474
  475               %(LVL+1) SUB$ PTR %INIT(ADDR(NIL))%ENIT,
  476
  477      /*K* LNK$ - PTR.
  478      Is the pointer to next block at this level.
  479      KH$CHN.LNK$ is not used for level 1.*/
  480
  481               %(LVL+1) LNK$ PTR %INIT(ADDR(NIL))%ENIT,
14:46 JUL 28 '97 KH$CHN.:E05SI                                             14   
  482
  483      /*K* HAND$ - PTR.
  484      Is the pointer to the handler context for the
  485      Node Administrator.*/
  486
  487                %(LVL+1) HAND$ PTR %INIT(ADDR(NIL))%ENIT LAST
  488      %MEND;
  489
  490      %EQU KH#CHN_STT_LOW = 0;
  491      %EQU KH#CHN_STT_UN_INT = 0;
  492      %EQU KH#CHN_STT_BSY = 1;
  493      %EQU KH#CHN_STT_BSYDSBPND = 2;
  494      %EQU KH#CHN_STT_BSYPRTPND = 3;
  495      %EQU KH#CHN_STT_DSB = 4;
  496      %EQU KH#CHN_STT_ENB = 5;
  497      %EQU KH#CHN_STT_PRT = 6;
  498      %EQU KH#CHN_STT_LINPROPND_ENB = 7;
  499      %EQU KH#CHN_STT_LINPROPND_BSY = 8;
  500      %EQU KH#CHN_STT_LINPROPND_BSYDSBPND = 9;
  501      %EQU KH#CHN_STT_NTRDY = 10;
  502      %EQU KH#CHN_STT_DIAG = 11;
  503      %EQU KH#CHN_STT_RMTDBG = 12;
  504      %EQU KH#CHN_STT_HI = 12;
  505
  506      %EQU KH#CHN_CCPDWNLD_ASYNC = 0;
  507      %EQU KH#CHN_CCPDWNLD_SYNC = 1;
  508      %EQU KH#CHN_CCPDWNLD_HDLC = 2;
  509      %EQU KH#CHN_CCPDWNLD_OTHER = 3;

