VERSION E05

PL6.E3A0      #001=CXB$CHKFORT File=CXB$SUBR1.:E05TSI                            TUE 07/29/97 12:20 Page:1    
        1        1        /*M* CXB$CHKFORT, CXB$RZEROS               */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*   DMC,DFC   */
        8        8        /*P*   NAME:   CXB$SUBR1
        9        9               PURPOSE: Selection of routined called for purposes of performing
       10       10                       a variety of functions.
       11       11               DESCRIPTION: See the function or routine preambles for the individual
       12       12                       subroutines.
       13       13        */
       14       14                   %EJECT;
PL6.E3A0      #001=CXB$CHKFORT File=CXB$SUBR1.:E05TSI                            TUE 07/29/97 12:20 Page:2    
       15       15        /**********************************************************************/
       16       16        /*F*   NAME:   CXB$CHKFORT
       17       17               PURPOSE: Determine if the dcb name is a FORTRAN type and convert
       18       18               DESCRIPTION: If the dcb name consists of all numbers, precede
       19       19                       numbers with a F$.
       20       20        */
       21       21        /*D*   NAME:   CXB$CHKFORT
       22       22               CALL:   CALL CXB$CHKFORT(DCB$)
       23       23               INTERFACE:
       24       24               INPUT:  DCB$ - ptr to dcb name
       25       25               OUTPUT: DCB$ - ptr modified to include preceding F$ if fort. type
       26       26               DESCRIPTION: If the dcb name is all numbers, the dcb name
       27       27                       in the parse control block is preceded with a F$. DCB$ is
       28       28                       decremented by two and the character count incremented by
       29       29                       two. The pointer to the dcb name in the parse control block
       30       30                       is clobbered to make room for increased dcb name size.
       31       31        */
       32       32        /**********************************************************************/
       33       33        CXB$CHKFORT: PROC(DCB$);
       34       34                   %INCLUDE B_MACROS_C;
       35      145    1   DCL DCB$ PTR;                                    /*Ptr to dcb name*/
       36      146    1   DCL X UBIN;
       37      147    1   DCL LEN SBIN;
       38      148    1   DCL 1 DCBNAME BASED (DCB$) CALIGNED,
       39      149    1          2 SIZ UBIN BYTE CALIGNED,
       40      150    1          2 TEXT CHAR(DCBNAME.SIZ) CALIGNED;
       41      151        %INCLUDE B$TABLES_C;
       42      259        %B$SR_NON_DEC;
       43      263        /**/
       44      264        /**/
       45      265        /*
       46      266          ****     Determine if dcb name consists of all numbers
       47      267        */
       48      268    1     CALL SEARCH (LEN, X, B$SR_NON_DEC, DCBNAME.TEXT)
       49      269    2       WHENALTRETURN DO;  /* all digits - precede with a F$ */
       50      270    2         DCB$=PINCRC(DCB$,-2);                 /*Make room for F$*/
       51      271    2         DCBNAME.SIZ=LEN+2;
PL6.E3A0      #001=CXB$CHKFORT File=CXB$SUBR1.:E05TSI                            TUE 07/29/97 12:20 Page:3    
       52      272    2         SUBSTR (DCBNAME.TEXT, 0, 2) = 'F$';
       53      273    2       END;
       54      274    1     RETURN;
       55      275    1   END CXB$CHKFORT;
       56      276                   %EOD;

PL6.E3A0      #001=CXB$CHKFORT File=CXB$SUBR1.:E05TSI                            TUE 07/29/97 12:20 Page:4    
--  Include file information  --

   B$TABLES_C.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure CXB$CHKFORT.

   Procedure CXB$CHKFORT requires 39 words for executable code.
   Procedure CXB$CHKFORT requires 8 words of local(AUTO) storage.

PL6.E3A0      #001=CXB$CHKFORT File=CXB$SUBR1.:E05TSI                            TUE 07/29/97 12:20 Page:5    

 Object Unit name= CXB$CHKFORT                                File name= CXB$SUBR1.:E05TOU
 UTS= JUL 29 '97 12:20:37.76 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      1      1  CXB$CHKFORT
    1   Proc  even  none    39     47  CXB$CHKFORT
    2  RoData even  none     1      1  CXB$CHKFORT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        1  CXB$CHKFORT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    B$SR_NON_DEC$
PL6.E3A0      #001=CXB$CHKFORT File=CXB$SUBR1.:E05TSI                            TUE 07/29/97 12:20 Page:6    


        1        1        /*M* CXB$CHKFORT, CXB$RZEROS               */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*   DMC,DFC   */
        8        8        /*P*   NAME:   CXB$SUBR1
        9        9               PURPOSE: Selection of routined called for purposes of performing
       10       10                       a variety of functions.
       11       11               DESCRIPTION: See the function or routine preambles for the individual
       12       12                       subroutines.
       13       13        */
       14       14                   %EJECT;
PL6.E3A0      #001=CXB$CHKFORT File=CXB$SUBR1.:E05TSI                            TUE 07/29/97 12:20 Page:7    
       15       15        /**********************************************************************/
       16       16        /*F*   NAME:   CXB$CHKFORT
       17       17               PURPOSE: Determine if the dcb name is a FORTRAN type and convert
       18       18               DESCRIPTION: If the dcb name consists of all numbers, precede
       19       19                       numbers with a F$.
       20       20        */
       21       21        /*D*   NAME:   CXB$CHKFORT
       22       22               CALL:   CALL CXB$CHKFORT(DCB$)
       23       23               INTERFACE:
       24       24               INPUT:  DCB$ - ptr to dcb name
       25       25               OUTPUT: DCB$ - ptr modified to include preceding F$ if fort. type
       26       26               DESCRIPTION: If the dcb name is all numbers, the dcb name
       27       27                       in the parse control block is preceded with a F$. DCB$ is
       28       28                       decremented by two and the character count incremented by
       29       29                       two. The pointer to the dcb name in the parse control block
       30       30                       is clobbered to make room for increased dcb name size.
       31       31        */
       32       32        /**********************************************************************/
       33       33        CXB$CHKFORT: PROC(DCB$);

     33  1 000000   000000 700200 xent  CXB$CHKFORT  TSX0  ! X66_AUTO_1
         1 000001   000010 000001                    ZERO    8,1

       34       34                   %INCLUDE B_MACROS_C;
       35      145    1   DCL DCB$ PTR;                                    /*Ptr to dcb name*/
       36      146    1   DCL X UBIN;
       37      147    1   DCL LEN SBIN;
       38      148    1   DCL 1 DCBNAME BASED (DCB$) CALIGNED,
       39      149    1          2 SIZ UBIN BYTE CALIGNED,
       40      150    1          2 TEXT CHAR(DCBNAME.SIZ) CALIGNED;
       41      151        %INCLUDE B$TABLES_C;
       42      259        %B$SR_NON_DEC;
       43      263        /**/
       44      264        /**/
       45      265        /*
       46      266          ****     Determine if dcb name consists of all numbers
       47      267        */
PL6.E3A0      #001=CXB$CHKFORT File=CXB$SUBR1.:E05TSI                            TUE 07/29/97 12:20 Page:8    
       48      268    1     CALL SEARCH (LEN, X, B$SR_NON_DEC, DCBNAME.TEXT)

    268  1 000002   200003 470500                    LDP0    @DCB$,,AUTO
         1 000003   000000 471500                    LDP1    0,,PR0
         1 000004   000100 101500                    MRL     fill='000'O
         1 000005   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         1 000006   200006 000002                    ADSC9   LEN+1,,AUTO              cn=0,n=2
         1 000007   200006 220100                    LDX0    LEN+1,,AUTO
         1 000010   000000 473400 xsym               LDP3    B$SR_NON_DEC$
         1 000011   000000 164540                    TCT
         1 000012   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         1 000013   300000 000100                    ARG     0,,PR3
         1 000014   200005 000100                    ARG     LEN,,AUTO
         1 000015   200005 235100                    LDA     LEN,,AUTO
         1 000016   000033 771000                    ARL     27
         1 000017   200004 755100                    STA     X,,AUTO
         1 000020   200005 551140                    STBA    LEN,'40'O,AUTO
         1 000021   000023 606400 1                  TTN     s:270
         1 000022   000046 710000 1                  TRA     s:274

       49      269    2       WHENALTRETURN DO;  /* all digits - precede with a F$ */

       50      270    2         DCB$=PINCRC(DCB$,-2);                 /*Make room for F$*/

    270  1 000023   200003 470500                    LDP0    @DCB$,,AUTO
         1 000024   000000 236100                    LDQ     0,,PR0
         1 000025   000000 036000 2                  ADLQ    0
         1 000026   000000 756100                    STQ     0,,PR0

       51      271    2         DCBNAME.SIZ=LEN+2;

    271  1 000027   000000 471500                    LDP1    0,,PR0
         1 000030   200005 236100                    LDQ     LEN,,AUTO
         1 000031   000002 036007                    ADLQ    2,DL
         1 000032   200006 756100                    STQ     LEN+1,,AUTO
         1 000033   000100 101500                    MRL     fill='000'O
         1 000034   200006 000004                    ADSC9   LEN+1,,AUTO              cn=0,n=4
PL6.E3A0      #001=CXB$CHKFORT File=CXB$SUBR1.:E05TSI                            TUE 07/29/97 12:20 Page:9    
         1 000035   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

       52      272    2         SUBSTR (DCBNAME.TEXT, 0, 2) = 'F$';

    272  1 000036   000000 471500                    LDP1    0,,PR0
         1 000037   000100 101500                    MRL     fill='000'O
         1 000040   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         1 000041   200006 000002                    ADSC9   LEN+1,,AUTO              cn=0,n=2
         1 000042   200006 220100                    LDX0    LEN+1,,AUTO
         1 000043   040100 100400                    MLR     fill='040'O
         1 000044   000000 000002 0                  ADSC9   0                        cn=0,n=2
         1 000045   100000 200002                    ADSC9   0,,PR1                   cn=1,n=2

       53      273    2       END;

       54      274    1     RETURN;

    274  1 000046   000000 702200 xent               TSX2  ! X66_ARET
       55      275    1   END CXB$CHKFORT;
       56      276                   %EOD;

PL6.E3A0      #001=CXB$CHKFORT File=CXB$SUBR1.:E05TSI                            TUE 07/29/97 12:20 Page:10   
--  Include file information  --

   B$TABLES_C.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure CXB$CHKFORT.
PL6.E3A0      #001=CXB$CHKFORT File=CXB$SUBR1.:E05TSI                            TUE 07/29/97 12:20 Page:11   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @DCB$                     *0-0-0/w PTR         r     1 DCB$
     5-0-0/w SBIN        r     1 LEN                        4-0-0/w UBIN        r     1 X

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$SR_NON_DEC$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(4608)  r     1 B$SR_NON_DEC               0-0-0/c ASTR(9)     r     1 DCBNAME


   Procedure CXB$CHKFORT requires 39 words for executable code.
   Procedure CXB$CHKFORT requires 8 words of local(AUTO) storage.
PL6.E3A0      #001=CXB$CHKFORT File=CXB$SUBR1.:E05TSI                            TUE 07/29/97 12:20 Page:12   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=CXB$CHKFORT File=CXB$SUBR1.:E05TSI                            TUE 07/29/97 12:20 Page:13   
          MINI XREF LISTING

B$SR_NON_DEC
       261**DCL       268>>CALLBLT
B$SR_NON_DEC$
       260**DCL       261--IMP-PTR   268>>CALLBLT
DCB$
       145**DCL        33--PROC      148--IMP-PTR   268>>CALLBLT   268>>CALLBLT   270<<ASSIGN    270>>ASSIGN
       271>>ASSIGN    272>>ASSIGN    272>>ASSIGN
DCBNAME.SIZ
       149**DCL       150--IMP-SIZ   268>>CALLBLT   271<<ASSIGN    272>>ASSIGN
DCBNAME.TEXT
       150**DCL       268>>CALLBLT   272<<ASSIGN
LEN
       147**DCL       268<<CALLBLT   271>>ASSIGN
X
       146**DCL       268<<CALLBLT

PL6.E3A0      #002=CXB$RZEROS File=CXB$SUBR1.:E05TSI                             TUE 07/29/97 12:20 Page:14   
       57        1        /*T***********************************************************/
       58        2        /*T*                                                         */
       59        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       60        4        /*T*                                                         */
       61        5        /*T***********************************************************/
       62        6        /**********************************************************************/
       63        7        /*F*   NAME:   CXB$RZEROS
       64        8               PURPOSE: Remove leading zeros from a specified character string
       65        9               DESCRIPTION: The specified character string is left adjusted
       66       10                       removing leading zeros.
       67       11        */
       68       12        /*D*   NAME:   CXB$RZEROS
       69       13               CALL:   CALL CXB$RZEROS(BUFF,BUFFSZE,NCHARS)
       70       14               INPUT:  BUFF   - buffer containing text
       71       15                       BUFFSZE - buffer size
       72       16               OUTPUT: BUFF   - buffer containing text left adjusted
       73       17                       NCHARS - actual string size
       74       18               DECRIPTION: Leading zeros are removed and the text value  left
       75       19                       adjusted. Blanks are appended to the text value.
       76       20                       If the buffer contains all zeros it is set to zero.
       77       21                       The number of characters is returned to the calling
       78       22                       program if the NCHARS parameter is specified.
       79       23        */
       80       24        CXB$RZEROS: PROC(BUFF,BUFFSZE,NCHARS);
       81       25        %INCLUDE B$TABLES_C;
       82      133        %B$SR_NON_ZERO;
       83      137    1   DCL BUFF CHAR(BUFFSZE);                          /*Buffer*/
       84      138    1   DCL BUFFSZE UBIN WORD;                /*Buffer size*/
       85      139    1   DCL NCHARS UBIN WORD;                 /*Number of CHARS.*/
       86      140    1   DCL IDX UBIN WORD;                    /*Index*/
       87      141    1   DCL X UBIN WORD;                      /*Ignored Value*/
       88      142        /**/
       89      143    1     CALL SEARCH (IDX, X, B$SR_NON_ZERO, SUBSTR (BUFF, 0, BUFFSZE-1));
       90      144    1     BUFF = SUBSTR (BUFF, IDX);
       91      145    1     IF ADDR(NCHARS) ~= ADDR(NIL)
       92      146    1        THEN
       93      147    1           NCHARS = BUFFSZE-IDX;              /*Return # chars*/
PL6.E3A0      #002=CXB$RZEROS File=CXB$SUBR1.:E05TSI                             TUE 07/29/97 12:20 Page:15   
       94      148    1     RETURN;
       95      149    1   END CXB$RZEROS;

PL6.E3A0      #002=CXB$RZEROS File=CXB$SUBR1.:E05TSI                             TUE 07/29/97 12:20 Page:16   
--  Include file information  --

   B$TABLES_C.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure CXB$RZEROS.

   Procedure CXB$RZEROS requires 31 words for executable code.
   Procedure CXB$RZEROS requires 8 words of local(AUTO) storage.

    No errors detected in file CXB$SUBR1.:E05TSI    .

PL6.E3A0      #002=CXB$RZEROS File=CXB$SUBR1.:E05TSI                             TUE 07/29/97 12:20 Page:17   

 Object Unit name= CXB$RZEROS                                 File name= CXB$SUBR1.:E05TOU
 UTS= JUL 29 '97 12:20:45.00 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    31     37  CXB$RZEROS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        3  CXB$RZEROS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    B$SR_NON_ZERO$                        B_VECTNIL
PL6.E3A0      #002=CXB$RZEROS File=CXB$SUBR1.:E05TSI                             TUE 07/29/97 12:20 Page:18   


       57        1        /*T***********************************************************/
       58        2        /*T*                                                         */
       59        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       60        4        /*T*                                                         */
       61        5        /*T***********************************************************/
       62        6        /**********************************************************************/
       63        7        /*F*   NAME:   CXB$RZEROS
       64        8               PURPOSE: Remove leading zeros from a specified character string
       65        9               DESCRIPTION: The specified character string is left adjusted
       66       10                       removing leading zeros.
       67       11        */
       68       12        /*D*   NAME:   CXB$RZEROS
       69       13               CALL:   CALL CXB$RZEROS(BUFF,BUFFSZE,NCHARS)
       70       14               INPUT:  BUFF   - buffer containing text
       71       15                       BUFFSZE - buffer size
       72       16               OUTPUT: BUFF   - buffer containing text left adjusted
       73       17                       NCHARS - actual string size
       74       18               DECRIPTION: Leading zeros are removed and the text value  left
       75       19                       adjusted. Blanks are appended to the text value.
       76       20                       If the buffer contains all zeros it is set to zero.
       77       21                       The number of characters is returned to the calling
       78       22                       program if the NCHARS parameter is specified.
       79       23        */
       80       24        CXB$RZEROS: PROC(BUFF,BUFFSZE,NCHARS);

     24  0 000000   000000 700200 xent  CXB$RZEROS   TSX0  ! X66_AUTO_3
         0 000001   000010 000003                    ZERO    8,3

       81       25        %INCLUDE B$TABLES_C;
       82      133        %B$SR_NON_ZERO;
       83      137    1   DCL BUFF CHAR(BUFFSZE);                          /*Buffer*/
       84      138    1   DCL BUFFSZE UBIN WORD;                /*Buffer size*/
       85      139    1   DCL NCHARS UBIN WORD;                 /*Number of CHARS.*/
       86      140    1   DCL IDX UBIN WORD;                    /*Index*/
       87      141    1   DCL X UBIN WORD;                      /*Ignored Value*/
       88      142        /**/
PL6.E3A0      #002=CXB$RZEROS File=CXB$SUBR1.:E05TSI                             TUE 07/29/97 12:20 Page:19   
       89      143    1     CALL SEARCH (IDX, X, B$SR_NON_ZERO, SUBSTR (BUFF, 0, BUFFSZE-1));

    143  0 000002   200004 470500                    LDP0    @BUFFSZE,,AUTO
         0 000003   000000 720100                    LXL0    0,,PR0
         0 000004   777777 621010                    EAX1    -1,X0
         0 000005   000000 471400 xsym               LDP1    B$SR_NON_ZERO$
         0 000006   200003 473500                    LDP3    @BUFF,,AUTO
         0 000007   000000 164540                    TCT
         0 000010   300000 000011                    ADSC9   0,,PR3                   cn=0,n=*X1
         0 000011   100000 000100                    ARG     0,,PR1
         0 000012   200006 000100                    ARG     IDX,,AUTO
         0 000013   200006 235100                    LDA     IDX,,AUTO
         0 000014   000033 771000                    ARL     27
         0 000015   200007 755100                    STA     X,,AUTO
         0 000016   200006 551140                    STBA    IDX,'40'O,AUTO

       90      144    1     BUFF = SUBSTR (BUFF, IDX);

    144  0 000017   000000 636010                    EAQ     0,X0
         0 000020   000022 772000                    QRL     18
         0 000021   200006 136100                    SBLQ    IDX,,AUTO
         0 000022   000000 621006                    EAX1    0,QL
         0 000023   200006 236100                    LDQ     IDX,,AUTO
         0 000024   040140 100546                    MLR     fill='040'O
         0 000025   300000 000011                    ADSC9   0,Q,PR3                  cn=0,n=*X1
         0 000026   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0

       91      145    1     IF ADDR(NCHARS) ~= ADDR(NIL)

    145  0 000027   200005 236100                    LDQ     @NCHARS,,AUTO
         0 000030   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000031   000036 600000 0                  TZE     s:148

       92      146    1        THEN
       93      147    1           NCHARS = BUFFSZE-IDX;              /*Return # chars*/

    147  0 000032   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #002=CXB$RZEROS File=CXB$SUBR1.:E05TSI                             TUE 07/29/97 12:20 Page:20   
         0 000033   200006 136100                    SBLQ    IDX,,AUTO
         0 000034   200005 474500                    LDP4    @NCHARS,,AUTO
         0 000035   400000 756100                    STQ     0,,PR4

       94      148    1     RETURN;

    148  0 000036   000000 702200 xent               TSX2  ! X66_ARET
       95      149    1   END CXB$RZEROS;

PL6.E3A0      #002=CXB$RZEROS File=CXB$SUBR1.:E05TSI                             TUE 07/29/97 12:20 Page:21   
--  Include file information  --

   B$TABLES_C.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure CXB$RZEROS.
PL6.E3A0      #002=CXB$RZEROS File=CXB$SUBR1.:E05TSI                             TUE 07/29/97 12:20 Page:22   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @BUFF                      4-0-0/w PTR         r     1 @BUFFSZE
     5-0-0/w PTR         r     1 @NCHARS                   *0-0-0/c ACHR        r     1 BUFF
    *0-0-0/w UBIN        r     1 BUFFSZE                    6-0-0/w UBIN        r     1 IDX
    *0-0-0/w UBIN        r     1 NCHARS                     7-0-0/w UBIN        r     1 X

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$SR_NON_ZERO$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(4608)  r     1 B$SR_NON_ZERO


   Procedure CXB$RZEROS requires 31 words for executable code.
   Procedure CXB$RZEROS requires 8 words of local(AUTO) storage.

    No errors detected in file CXB$SUBR1.:E05TSI    .
PL6.E3A0      #002=CXB$RZEROS File=CXB$SUBR1.:E05TSI                             TUE 07/29/97 12:20 Page:23   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=CXB$RZEROS File=CXB$SUBR1.:E05TSI                             TUE 07/29/97 12:20 Page:24   
          MINI XREF LISTING

B$SR_NON_ZERO
       135**DCL       143>>CALLBLT
B$SR_NON_ZERO$
       134**DCL       135--IMP-PTR   143>>CALLBLT
BUFF
       137**DCL        24--PROC      143>>CALLBLT   144<<ASSIGN    144>>ASSIGN
BUFFSZE
       138**DCL        24--PROC      137--IMP-SIZ   143>>CALLBLT   143>>CALLBLT   144>>ASSIGN    144>>ASSIGN
       147>>ASSIGN
IDX
       140**DCL       143<<CALLBLT   144>>ASSIGN    147>>ASSIGN
NCHARS
       139**DCL        24--PROC      145--IF        147<<ASSIGN
X
       141**DCL       143<<CALLBLT
