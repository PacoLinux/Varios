VERSION E05

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:1    
        1        1        /*M* TOU$BUILD     DEckfile Editor Routine BUILD Function */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P*  NAME:        TOU$BUILD
       12       12              AUTHORS:     David M. Augustine
       13       13                           Scott S. Sheppard
       14       14              PURPOSE:     DEckfile Editor Routine BUILD function
       15       15              DESCRIPTION: This program is called when the BUILD function
       16       16                           is invoked by the CP-6 deckfile editor driver.
       17       17                           This program builds the deckfile from the IFAD
       18       18                           input source (tape or disk file).
       19       19              REFERENCE:   CP-6 Release C01A01
       20       20              LAST UPDATE: 02/26/85
       21       21        */
       22       22        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:2    
       23       23        /*F*  NAME:        TOU$BUILD
       24       24              DESCRIPTION: Procedure Nesting Hierarchy
       25       25
       26       26              TOU$BUILD: procedure ALTRET
       27       27              TOU$B_SHOW_DCBS: entry ALTRET
       28       28              TOU$B_GET_CATALOG: entry ALTRET
       29       29              TOU$B_SET_CATALOG_KEY: entry ALTRET
       30       30              TOU$B_SET_OBJECT_KEY: entry ALTRET
       31       31              TOU$B_CHECK_CORRECT_FILE: entry ALTRET
       32       32              TOU$B_PRINT_DECK_LINE: entry ALTRET
       33       33              TOU$B_CHECK_FOR_CATALOG: entry ALTRET
       34       34
       35       35                 B_INIT_DUP: procedure
       36       36                 B_COMMAND_SETUP: procedure ALTRET
       37       37                 B_SHOW_DCBS: procedure
       38       38                 B_CLEAR_DF: procedure
       39       39                 B_COPY_NIO_CATALOG: procedure ALTRET
       40       40                 B_CHECK_FOR_CATALOG: procedure ALTRET
       41       41                 B_STORE_NIO_CATALOG: procedure ALTRET
       42       42                 B_BUILD_DECKFILE: procedure ALTRET
       43       43                 B_BUILD_FROM_VOLUMES: procedure ALTRET
       44       44                 B_PROCESS_IFAD: procedure ALTRET
       45       45                 B_GET_CATALOG: procedure
       46       46                 B_SET_CATALOG_KEY: procedure ALTRET
       47       47                    B_SET_FIRMWARE_CATALOG: procedure ALTRET
       48       48                    B_SET_GECALL_CATALOG: procedure ALTRET
       49       49                 B_SET_OBJECT_KEY: procedure ALTRET
       50       50                    B_SET_GECALL_KEY: procedure
       51       51                       B_SQUISH_GIFM_DECK: procedure
       52       52                    B_SET_MPC_KEY: procedure
       53       53                       B_SET_ITR_KEY: procedure
       54       54                       B_SET_FIRMWARE_KEY: procedure
       55       55                       B_SQUISH_FIRMWARE_DECK: procedure
       56       56                       B_FIX_CATALOG_KEY: procedure
       57       57                       B_SET_MDR_KEY: procedure
       58       58                    B_SET_DIPPER_KEY: procedure
       59       59                 B_CHECK_CORRECT_FILE: procedure ALTRET
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:3    
       60       60                 B_SAVE_OBJECT_DECK: procedure (D) ALTRET
       61       61                 B_PRINT_DECK_LINE: procedure
       62       62                 B_SAVE_CATALOG_ENTRY: procedure ALTRET
       63       63                 B_SAVE_SUBCATALOG: procedure (I, N) ALTRET
       64       64                 B_SAVE_CATALOG: procedure (C) ALTRET
       65       65                 B_SAVE_MASTER_ENTRY: procedure ALTRET
       66       66                 B_SAVE_NIO_CATALOG: procedure ALTRET
       67       67                    B_FETCH_OBJECT_DECK: procedure ALTRET
       68       68                 B_SAVE_MASTER_CATALOG: procedure
       69       69                 B_SAVE_LAST_DECK#: procedure
       70       70                 B_SAVE_LOG: procedure ALTRET
       71       71                 B_SAVE_REVISION: procedure ALTRET
       72       72                 B_ERR_MSG: procedure (ERR_CODE)
       73       73        */
       74       74
       75       75        TOU$BUILD: PROC ALTRET ;
       76       76
       77       77        /* Include Files */
       78       78
       79       79           %INCLUDE TOU_DEER_M ;
       80     1490           %INCLUDE TOU_RQSTS_E ;
       81     1565           %INCLUDE TO_PERR_C ;
       82     2150           %INCLUDE XU_MACRO_C ;
       83     5256           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:4    
       84     5257        /* Macros */
       85     5258
       86     5259           %DUP (STCLASS = SYMREF) ;
       87     5402           %BCD_CARD (STCLASS = SYMREF) ;
       88     5422           %BINARY_CARD (STCLASS = SYMREF) ;
       89     5449           %BCD_KEY (STCLASS = SYMREF) ;
       90     5463           %BINARY_B (STCLASS = "BASED (DUP.BINARY_V.PTR$)") ;
       91     5477           %BCD_B (STCLASS = "BASED (DUP.BCD_V.PTR$)") ;
       92     5489           %BINARY_KEY (STCLASS = SYMREF) ;
       93     5503           %DKEND (STCLASS = "STATIC SYMDEF") ;
       94     5527           %CATALOG_DATA (STCLASS = SYMREF) ;
       95     5541           %CATALOG_DATA (NAME = COPIED_CATALOG) ;
       96     5555           %CATALOG_ENTRY_KEY (STCLASS = SYMREF) ;
       97     5569           %CATALOG_KEY (STCLASS = SYMREF) ;
       98     5583           %CATALOG_SEARCH_KEY (STCLASS = SYMREF) ;
       99     5595           %ID (STCLASS = SYMREF) ;
      100     5612           %LAST (STCLASS = SYMREF) ;
      101     5625           %LOG_B (STCLASS = "BASED (DUP.LOG_V.PTR$)") ;
      102     5651           %MCA_B (STCLASS = "BASED (DUP.BINARY_V.PTR$)") ;
      103     5721           %MASTER_DATA (STCLASS = SYMREF) ;
      104     5735           %MASTER_ENTRY_KEY (STCLASS = SYMREF) ;
      105     5749           %MASTER_KEY (STCLASS = CONSTANT) ;
      106     5762           %OBJECT (STCLASS = SYMREF) ;
      107     5825           %OBJECT_KEY (STCLASS = SYMREF) ;
      108     5838           %OBJECT_REFLIST_KEY (STCLASS = SYMREF) ;
      109     5852           %OBJECT_REFLIST_DATA (STCLASS = SYMREF) ;
      110     5867           %RECORD (STCLASS = SYMREF) ;
      111     5894           %REVISION_B (STCLASS = SYMREF) ;
      112     5915           %SUBCATALOG_DATA (STCLASS = SYMREF) ;
      113     5928           %SUBCATALOG_DATA (NAME = COPIED_SUB) ;
      114     5941           %SUBCATALOG_KEY (STCLASS = SYMREF) ;
      115     5955           %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:5    
      116     5956        /* Variables */
      117     5957
      118     5958    1      DCL BCD#                       UBIN WORD STATIC SYMDEF ALIGNED  INIT (0) ;
      119     5959    1      DCL BIN#                       UBIN WORD STATIC SYMDEF ALIGNED  INIT (0) ;
      120     5960    1      DCL CATALOG_KEY_SET            BIT (1)   STATIC SYMDEF CALIGNED INIT ('0'B) ;
      121     5961    1      DCL TEMP_INPUT_EXISTS          BIT (1) CALIGNED ;
      122     5962    1      DCL CATALOG_TYPE               CHAR (1) STATIC CALIGNED ;
      123     5963    1      DCL CUR#                       UBIN WORD STATIC SYMDEF ALIGNED  INIT (0);
      124     5964    1      DCL DECK_SAVED                 BIT (1)   STATIC SYMDEF CALIGNED INIT ('0'B) ;
      125     5965    1      DCL FILE_EOF                   UBIN WORD SYMREF ALIGNED ;
      126     5966           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:6    
      127     5967        /* External Entry Points */
      128     5968
      129     5969    1      DCL TOU$CHECKSUM                    ENTRY (4) ALTRET ;
      130     5970    1      DCL TOU$REFORM_DECK_CHECKSUM        ENTRY (4) ALTRET ;
      131     5971    1      DCL TOU$CLEAR_IFAD                  ENTRY ALTRET ;
      132     5972    1      DCL TOU$GET_CP6_OBJECT              ENTRY ALTRET ;
      133     5973    1      DCL TOU$GET_BINARY_CARDS            ENTRY ALTRET ;
      134     5974    1      DCL TOU$GET_BCD_CARDS               ENTRY ALTRET ;
      135     5975    1      DCL TOU$REPLACE                     ENTRY (2);
      136     5976
      137     5977    1      DCL TOU$DU_SET_IFAD_FID             ENTRY ALTRET ;
      138     5978    1      DCL TOU$DU_OPEN_IFAD                ENTRY ALTRET ;
      139     5979    1      DCL TOU$DU_NEXT_IFAD                ENTRY ALTRET ;
      140     5980    1      DCL TOU$DU_CLOSE_IFAD               ENTRY ALTRET ;
      141     5981    1      DCL TOU$DU_SET_DF_FID               ENTRY ALTRET ;
      142     5982    1      DCL TOU$DU_OPEN_DF                  ENTRY ALTRET ;
      143     5983    1      DCL TOU$DU_CLOSE_DF                 ENTRY ALTRET ;
      144     5984
      145     5985    1      DCL TOU$DU_USER_WRITE               ENTRY ALTRET ;
      146     5986    1      DCL TOU$DU_PRINTER_WRITE            ENTRY ALTRET ;
      147     5987    1      DCL TOU$DU_PRINTER_OVERWRITE        ENTRY ALTRET ;
      148     5988    1      DCL TOU$DU_UPDATE_LOG               ENTRY ALTRET ;
      149     5989    1      DCL TOU$DU_GET_SITE                 ENTRY ALTRET ;
      150     5990
      151     5991    1      DCL TOT$BCD_ASCII                   ENTRY (3) ;
      152     5992
      153     5993    1      DCL TOU$DFU_OPEN_TEMP               ENTRY ALTRET ;
      154     5994    1      DCL TOU$DFU_CLOSE_TEMP              ENTRY ALTRET ;
      155     5995           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:7    
      156     5996        /* External Entry Points */
      157     5997
      158     5998    1      DCL TOU$DFU_DF_CHECK_ALREADY_SAVED  ENTRY ALTRET ;
      159     5999    1      DCL TOU$DFU_DF_CHECK_FOR_KEY        ENTRY ALTRET ;
      160     6000    1      DCL TOU$DFU_DF_WR_MASTER_CONTROL    ENTRY ALTRET ;
      161     6001    1      DCL TOU$DFU_DF_WR_MASTER_ENTRY      ENTRY ALTRET ;
      162     6002    1      DCL TOU$DFU_DF_WR_CATALOG_CONTROL   ENTRY ALTRET ;
      163     6003    1      DCL TOU$DFU_DF_WR_SUBCATALOG        ENTRY ALTRET ;
      164     6004    1      DCL TOU$DFU_DF_WR_CATALOG_ENTRY     ENTRY ALTRET ;
      165     6005    1      DCL TOU$DFU_DF_WR_OBJECT            ENTRY ALTRET ;
      166     6006    1      DCL TOU$DFU_DF_WR_BINARY            ENTRY ALTRET ;
      167     6007    1      DCL TOU$DFU_DF_WR_FILE              ENTRY ALTRET ;
      168     6008    1      DCL TOU$DFU_DF_WR_BCD_CARDS         ENTRY ALTRET ;
      169     6009    1      DCL TOU$DFU_DF_WR_OBJECT_REFLIST    ENTRY ALTRET ;
      170     6010    1      DCL TOU$DFU_DF_WR_LAST_DECK#        ENTRY ALTRET ;
      171     6011    1      DCL TOU$DFU_DF_WR_LOG               ENTRY ALTRET ;
      172     6012    1      DCL TOU$DFU_DF_WR_REVISION          ENTRY ALTRET ;
      173     6013
      174     6014    1      DCL TOU$DFU_DF_RD_MASTER_CONTROL    ENTRY ALTRET ;
      175     6015    1      DCL TOU$DFU_DF_RD_MASTER_ENTRY      ENTRY ALTRET ;
      176     6016    1      DCL TOU$DFU_DF_RD_CATALOG_CONTROL   ENTRY ALTRET ;
      177     6017    1      DCL TOU$DFU_DF_RD_SUBCATALOG        ENTRY ALTRET ;
      178     6018    1      DCL TOU$DFU_DF_RD_CATALOG_ENTRY     ENTRY ALTRET ;
      179     6019    1      DCL TOU$DFU_DF_RD_OBJECT            ENTRY ALTRET ;
      180     6020    1      DCL TOU$DFU_DF_RD_FILE              ENTRY ALTRET ;
      181     6021    1      DCL TOU$DFU_DF_RD_BCD_CARDS         ENTRY ALTRET ;
      182     6022    1      DCL TOU$DFU_DF_RD_OBJECT_REFLIST    ENTRY ALTRET ;
      183     6023           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:8    
      184     6024        /* External Entry Points */
      185     6025
      186     6026    1      DCL TOU$DFU_TF_WR_CATALOG_ENTRY     ENTRY ALTRET ;
      187     6027    1      DCL TOU$DFU_TF_WR_OBJECT            ENTRY ALTRET ;
      188     6028    1      DCL TOU$DFU_TF_WR_FILE              ENTRY ALTRET ;
      189     6029    1      DCL TOU$DFU_TF_WR_BCD_CARDS         ENTRY ALTRET ;
      190     6030
      191     6031    1      DCL TOU$DFU_TF_RD_CATALOG_ENTRY     ENTRY ALTRET ;
      192     6032    1      DCL TOU$DFU_TF_RD_OBJECT            ENTRY ALTRET ;
      193     6033    1      DCL TOU$DFU_TF_RD_FILE              ENTRY ALTRET ;
      194     6034    1      DCL TOU$DFU_TF_RD_BCD_CARDS         ENTRY ALTRET ;
      195     6035           %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:9    
      196     6036        /* ********************
      197     6037           ********************
      198     6038           **  Main Program  **
      199     6039           ********************
      200     6040           ******************** */
      201     6041
      202     6042    1      CALL B_INIT_DUP ;
      203     6043    1      CALL B_COMMAND_SETUP ALTRET (ERROR_RETURN) ;
      204     6044    1      CALL B_SHOW_DCBS ;
      205     6045
      206     6046    1      CALL B_COPY_NIO_CATALOG ALTRET (ERROR_RETURN) ;
      207     6047    1      CALL B_BUILD_DECKFILE ALTRET (ERROR_RETURN) ;
      208     6048
      209     6049        /* NORMAL_RETURN: */
      210     6050    1      DUP.MSG_CODE = %T$B_SUCCESS ;
      211     6051    1      CALL TOU$DU_USER_WRITE ;
      212     6052    1      RETURN ;
      213     6053
      214     6054    1   ERROR_RETURN:
      215     6055    1      DUP.MSG_CODE = %T$B_FAILURE ;
      216     6056    1      CALL TOU$DU_USER_WRITE ;
      217     6057    1      RETURN ;
      218     6058
      219     6059        /* ********************
      220     6060           ********************
      221     6061           **  End Of  Main  **
      222     6062           ********************
      223     6063           ******************** */
      224     6064        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:10   
      225     6065        /*D*  NAME:        TOU$B_SHOW_DCBS
      226     6066              ENTRY:
      227     6067              AUTHOR:      Scott S. Sheppard
      228     6068              INTERFACE:   B_SHOW_DCBS
      229     6069              DESCRIPTION: This entry point calls procedure B_SHOW_DCBS so
      230     6070                           other  modules that access  both  IFAD  and the
      231     6071                           deckfile can do likewise.
      232     6072        */
      233     6073
      234     6074    1   TOU$B_SHOW_DCBS: ENTRY ALTRET ;
      235     6075
      236     6076    1      CALL B_SHOW_DCBS ;
      237     6077    1      RETURN ;
      238     6078
      239     6079        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:11   
      240     6080        /*D*  NAME:        TOU$B_GET_CATALOG
      241     6081              ENTRY:
      242     6082              AUTHOR:      Scott S. Sheppard
      243     6083              INTERFACE:   B_GET_CATALOG
      244     6084              DESCRIPTION: This entry point calls procedure B_GET_CATALOG so
      245     6085                           TOU$NEWCAT can get the next catalog to add.
      246     6086        */
      247     6087
      248     6088    1   TOU$B_GET_CATALOG: ENTRY ALTRET ;
      249     6089
      250     6090    1      CALL B_GET_CATALOG ;
      251     6091    1      RETURN ;
      252     6092
      253     6093        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:12   
      254     6094        /*D*  NAME:        TOU$B_SET_CATALOG_KEY
      255     6095              ENTRY:
      256     6096              AUTHOR:      Scott S. Sheppard
      257     6097              INTERFACE:   B_SET_CATALOG_KEY
      258     6098              DESCRIPTION: This entry point calls procedure B_SET_CATALOG_KEY so
      259     6099                           other modules can set a catalog key from $OBJECT
      260     6100        */
      261     6101
      262     6102    1   TOU$B_SET_CATALOG_KEY: ENTRY ALTRET ;
      263     6103
      264     6104    1      CALL B_SET_CATALOG_KEY ALTRET (TOU$B_ALTRETURN) ;
      265     6105    1      RETURN ;
      266     6106
      267     6107        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:13   
      268     6108        /*D*  NAME:        TOU$B_SET_OBJECT_KEY
      269     6109              ENTRY:
      270     6110              AUTHOR:      Scott S. Sheppard
      271     6111              INTERFACE:   B_SET_OBJECT_KEY
      272     6112              DESCRIPTION: This entry point calls procedure B_SET_OBJECT_KEY
      273     6113                           so other modules can set object keys.
      274     6114        */
      275     6115
      276     6116    1   TOU$B_SET_OBJECT_KEY: ENTRY ALTRET ;
      277     6117
      278     6118    1      CALL B_SET_OBJECT_KEY ALTRET (TOU$B_ALTRETURN) ;
      279     6119    1      RETURN ;
      280     6120
      281     6121        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:14   
      282     6122        /*D*  NAME:        TOU$B_CHECK_CORRECT_FILE
      283     6123              ENTRY:
      284     6124              AUTHOR:      Scott S. Sheppard
      285     6125              INTERFACE:   B_CHECK_CORRECT_FILE
      286     6126              DESCRIPTION: This entry point calls procedure B_CHECK_CORRECT_FILE
      287     6127                           so other modules can verify object decks.
      288     6128        */
      289     6129
      290     6130    1   TOU$B_CHECK_CORRECT_FILE: ENTRY ALTRET ;
      291     6131
      292     6132    1      CALL B_CHECK_CORRECT_FILE ALTRET (TOU$B_ALTRETURN) ;
      293     6133    1      RETURN ;
      294     6134
      295     6135        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:15   
      296     6136        /*D*  NAME:        TOU$B_PRINT_DECK_LINE
      297     6137              ENTRY:
      298     6138              AUTHOR:      Scott S. Sheppard
      299     6139              INTERFACE:   B_PRINT_DECK_LINE
      300     6140              DESCRIPTION: This entry point calls procedure B_PRINT_DECK_LINE
      301     6141                           so other modules can list object decks.
      302     6142        */
      303     6143
      304     6144    1   TOU$B_PRINT_DECK_LINE: ENTRY ALTRET ;
      305     6145
      306     6146    1      CALL B_PRINT_DECK_LINE ALTRET (TOU$B_ALTRETURN) ;
      307     6147    1      RETURN ;
      308     6148
      309     6149        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:16   
      310     6150        /*D*  NAME:        TOU$B_CHECK_FOR_CATALOG
      311     6151              ENTRY:
      312     6152              AUTHOR:      Scott S. Sheppard
      313     6153              INTERFACE:   B_CHECK_FOR_CATALOG
      314     6154              DESCRIPTION: This entry point calls procedure B_CHECK_FOR_CATALOG
      315     6155                           so other modules can search for catalogs.
      316     6156        */
      317     6157
      318     6158    1   TOU$B_CHECK_FOR_CATALOG: ENTRY ALTRET ;
      319     6159
      320     6160    1      CALL B_CHECK_FOR_CATALOG ALTRET (TOU$B_ALTRETURN) ;
      321     6161    1      RETURN ;
      322     6162
      323     6163        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:17   
      324     6164        /*D*  NAME:        TOU$B_ALTRETURN
      325     6165              LABEL:
      326     6166              DESCRIPTION: This label is the alternate return label for all
      327     6167                           of the entry points into TOU$BUILD. Once control
      328     6168                           has  transferred  to  this  label,  the   module
      329     6169                           altreturns to the calling procedure.
      330     6170        */
      331     6171
      332     6172    1   TOU$B_ALTRETURN:
      333     6173    1      ALTRETURN ;
      334     6174
      335     6175        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:18   
      336     6176        /*I*  NAME:        B_INIT_DUP
      337     6177              AUTHOR:      Scott S. Sheppard
      338     6178              PURPOSE:     Initilization
      339     6179              INTERFACE:   None called.
      340     6180              INPUT:       H$BUILD   - default header code for BUILD
      341     6181                           LINES_PER_PAGE - force new page write
      342     6182              OUTPUT:      DUP          - Deckfile Utility Parameter
      343     6183              DESCRIPTION: This procedure initializes variables to
      344     6184                           appropriate starting values.
      345     6185        */
      346     6186
      347     6187    1   B_INIT_DUP: PROC ;
      348     6188
      349     6189        /* Code */
      350     6190
      351     6191    2      DUP.HDR_CODE = %H$BUILD ;
      352     6192    2      DUP.LINE_VFC = %SKIP_WRITE ;
      353     6193    2      DUP.FORCE_NEW_PAGE = %TRUE ;
      354     6194    2      DUP.IFAD.ME_ALLOWED = %FALSE ;
      355     6195    2      DUP.IFAD.ENTERED = %FALSE ;
      356     6196    2      DUP.DF.ENTERED = %FALSE ;
      357     6197    2      RETURN ;
      358     6198
      359     6199    2   END B_INIT_DUP ;
      360     6200        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:19   
      361     6201        /*I*  NAME:        B_COMMAND_SETUP
      362     6202              AUTHOR:      Scott S. Sheppard
      363     6203              PURPOSE:     Sets up BUILD Command
      364     6204              INTERFACE:   TOU$DU_SET_IFAD_FID
      365     6205                           TOU$DU_SET_DF_FID
      366     6206              INPUT:       DUP.CMD$ - pointer to the parse control block
      367     6207              OUTPUT:      DUP.DF.HOLD_AREA
      368     6208                           DUP.DF.HOLD_AREA_LGTH
      369     6209                           DUP.DF.NO_EXIST
      370     6210                           DUP.IFAD.ENTERED
      371     6211                           DUP.DF.ENTERED
      372     6212              DESCRIPTION: This procedure sets up the BUILD command from the
      373     6213                           information entered by the user.    DUP.CMD$ is a
      374     6214                           pointer to a   parse control block  that contains
      375     6215                           the tokens entered by the user.
      376     6216                           COMMAND FORMS:
      377     6217              Case 1:   BUILD
      378     6218              Case 2:   BUILD <IFAD fid>
      379     6219              Case 3:   BUILD ON <deckfile fid>
      380     6220                        BUILD OVER <deckfile fid>
      381     6221              Case 4:   BUILD <IFAD fid> ON <deckfile fid>
      382     6222                        BUILD <IFAD fid> OVER <deckfile fid>
      383     6223        */
      384     6224
      385     6225    1   B_COMMAND_SETUP: PROC ALTRET ;
      386     6226
      387     6227    2      DCL OUTBLK#                    UBIN WORD ALIGNED ;
      388     6228    2      DCL OUTBLK$                    PTR ALIGNED ;
      389     6229           %PARSE$OUT (STCLASS = BASED) ;
      390     6274           %PARSE$SYM (STCLASS = BASED) ;
      391     6312           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:20   
      392     6313        /* Code */
      393     6314
      394     6315    3      DO OUTBLK# = 0 TO DUP.CMD$ -> OUT$BLK.NSUBLKS - 1 ;
      395     6316    3         OUTBLK$ = DUP.CMD$ -> OUT$BLK.SUBLK$(OUTBLK#) ;
      396     6317    4         DO CASE (OUTBLK$ -> OUT$BLK.CODE) ;
      397     6318    4            CASE (%IFAD_FID) ;
      398     6319    4               DUP.IFAD.ENTERED = %TRUE ;
      399     6320    4               DUP.HOLD_AREA = OUTBLK$ -> OUT$SYM.TEXT ;
      400     6321    4               DUP.HOLD_AREA_LGTH = OUTBLK$ -> OUT$SYM.COUNT ;
      401     6322    4               CALL TOU$DU_SET_IFAD_FID ALTRET (ERROR) ;
      402     6323    4            CASE (%ON) ;
      403     6324    4               DUP.DF.NO_EXIST = %TRUE ;
      404     6325    4            CASE (%OVER) ;
      405     6326    4               DUP.DF.NO_EXIST = %FALSE ;
      406     6327    4            CASE (%DECKFILE_FID) ;
      407     6328    4               DUP.DF.ENTERED = %TRUE ;
      408     6329    4               DUP.HOLD_AREA = OUTBLK$ -> OUT$SYM.TEXT ;
      409     6330    4               DUP.HOLD_AREA_LGTH = OUTBLK$ -> OUT$SYM.COUNT ;
      410     6331    4               CALL TOU$DU_SET_DF_FID ALTRET (ERROR) ;
      411     6332    4         END /* CASE */ ;
      412     6333    3      END /* DO */ ;
      413     6334
      414     6335    2      IF DUP.IFAD.ENTERED
      415     6336    2      THEN /* FID set from DEER command */ ;
      416     6337    2      ELSE CALL TOU$DU_SET_IFAD_FID ALTRET (ERROR) ;
      417     6338    2      IF DUP.DF.ENTERED
      418     6339    2      THEN /* FID set from DEER command */ ;
      419     6340    2      ELSE CALL TOU$DU_SET_DF_FID ALTRET (ERROR) ;
      420     6341    2      RETURN ;
      421     6342
      422     6343    2   ERROR:
      423     6344    2      ALTRETURN ;
      424     6345
      425     6346    2   END B_COMMAND_SETUP ;
      426     6347        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:21   
      427     6348        /*I*  NAME:        B_SHOW_DCBS
      428     6349              AUTHOR:      Scott S. Sheppard
      429     6350              PURPOSE:     Displays IFAD / Deckfile DCB's
      430     6351              INTERFACE:   TOU$DU_USER_WRITE
      431     6352              INPUT:       T$SHOW_IFAD - message number for IFAD display
      432     6353                           T$SHOW_DF   - message number for deckfile display
      433     6354              OUTPUT:      DUP.MSG_CODE - set to appropriate message code
      434     6355              DESCRIPTION: This procedure displays the file identifier of the
      435     6356                           IFAD input source   and  deckfile  currently being
      436     6357                           accessed.
      437     6358        */
      438     6359
      439     6360    1   B_SHOW_DCBS: PROC ;
      440     6361
      441     6362        /* Code */
      442     6363
      443     6364    2      DUP.MSG_CODE = %T$SHOW_IFAD ;
      444     6365    2      CALL TOU$DU_USER_WRITE ;
      445     6366
      446     6367    2      DUP.MSG_CODE = %T$SHOW_DF ;
      447     6368    2      CALL TOU$DU_USER_WRITE ;
      448     6369    2      RETURN ;
      449     6370
      450     6371    2   END B_SHOW_DCBS ;
      451     6372        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:22   
      452     6373        /*I*  NAME:        B_CLEAR_DF
      453     6374              AUTHORS:     Scott S. Sheppard
      454     6375                           David M. Augustine
      455     6376              PURPOSE:     Initialization
      456     6377              INTERFACE:   None called.
      457     6378              INPUT:       LAST.DECK# - largest deck number (1 at this point)
      458     6379                           MASTER_DATA.ENTRY_COUNT - (0 at this point)
      459     6380              OUTPUT:      LAST.DECK#
      460     6381                           MASTER_DATA
      461     6382              DESCRIPTION: This procedure clears the deckfile variables by
      462     6383                           initializing them to starting values.
      463     6384        */
      464     6385
      465     6386    1   B_CLEAR_DF: PROC ;
      466     6387
      467     6388        /* Code */
      468     6389
      469     6390    2      LAST.DECK# = 1;
      470     6391    2      LAST.EDIT_NAME = '$000' ;
      471     6392    2      MASTER_DATA.DECK# = LAST.DECK#;
      472     6393    2      MASTER_DATA.ENTRY_COUNT = 0 ;
      473     6394    2      MASTER_DATA.RFU = 'DEER' ;
      474     6395    2      MASTER_ENTRY_KEY.DECK# = LAST.DECK#;
      475     6396    2      MASTER_ENTRY_KEY.ENTRY# = 1;
      476     6397    2      LAST.DECK# = LAST.DECK# + 1 ;
      477     6398    2      RETURN;
      478     6399
      479     6400    2   END B_CLEAR_DF;
      480     6401        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:23   
      481     6402        /*I* NAME:         B_COPY_NIO_CATALOG
      482     6403             AUTHOR:       Scott S. Sheppard
      483     6404             PURPOSE:      Copies the NIO catalog from the deckfile
      484     6405             INTERFACE:    TOU$DU_OPEN_DF
      485     6406                           TOU$DU_CLOSE_DF
      486     6407                           B_CHECK_FOR_CATALOG
      487     6408             PARAMETERS:   None passed.
      488     6409             DATA:         DUP.DF.OPEN_TYPE - output
      489     6410                           DUP.DF.CLOSE_TYPE - output
      490     6411                           DUP.DF.REPORT_ERROR - output
      491     6412                           CATALOG_SEARCH_KEY
      492     6413                           TEMP_INPUT_EXISTS
      493     6414             DESCRIPTION:  This  procedure attempts to  open the deckfile
      494     6415                           for input,  store all of the  records from the
      495     6416                           NIO catalog in memory  or in a temporary file,
      496     6417                           and close the deckfile. If a deckfile with the
      497     6418                           same  name  being  built  does  not exist, the
      498     6419                           deckfile  open will fail  but no error message
      499     6420                           is  written  since  the  REPORT_ERROR  flag is
      500     6421                           false.  "Deckfile does not  exist" is the only
      501     6422                           open error overidden by the report error flag.
      502     6423                           If a deckfile exists, the catalog CATA.NIO.MCA
      503     6424                           is searched for and if found, is copied into a
      504     6425                           temporary file. This  is done because when the
      505     6426                           actual build begins,  the deckfile is open for
      506     6427                           output  which  deletes  all  records.  The NIO
      507     6428                           catalog records may then  be copied back in so
      508     6429                           the catalog will still exist.
      509     6430        */
      510     6431        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:24   
      511     6432    1   B_COPY_NIO_CATALOG: PROC ALTRET ;
      512     6433
      513     6434        /* Code */
      514     6435
      515     6436    2      DUP.DF.OPEN_TYPE = %READ_FILE ;
      516     6437    2      DUP.DF.REPORT_ERROR = %FALSE ;
      517     6438    2      CALL TOU$DU_OPEN_DF WHENRETURN
      518     6439    3           DO ;
      519     6440    3              CATALOG_SEARCH_KEY.DATA = 'CATA.NIO.MCA' ;
      520     6441    3              CALL B_CHECK_FOR_CATALOG WHENRETURN
      521     6442    4                   DO ;
      522     6443    4                      TEMP_INPUT_EXISTS = %TRUE ;
      523     6444    4                      CALL B_STORE_NIO_CATALOG ALTRET (ERROR) ;
      524     6445    4                   END /* WHENRETURN */ ;
      525     6446    3              DUP.DF.CLOSE_TYPE = %SAVE_FILE ;
      526     6447    3              CALL TOU$DU_CLOSE_DF ALTRET (ERROR) ;
      527     6448    3           END /* WHENRETURN */ ;
      528     6449    2      WHENALTRETURN
      529     6450    3           DO ;
      530     6451    3              TEMP_INPUT_EXISTS = %FALSE ;
      531     6452    3           END /* WHENALTRETURN */ ;
      532     6453    2      RETURN ;
      533     6454
      534     6455    2   ERROR:
      535     6456    2      DUP.DF.CLOSE_TYPE = %SAVE_FILE ;
      536     6457    2      CALL TOU$DU_CLOSE_DF ;
      537     6458    2      ALTRETURN ;
      538     6459
      539     6460    2   END B_COPY_NIO_CATALOG ;
      540     6461        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:25   
      541     6462        /*I*  NAME:        B_CHECK_FOR_CATALOG
      542     6463              AUTHOR:      Scott S. Sheppard
      543     6464              PURPOSE:     Catalog Existance Checking
      544     6465              INTERFACE:   TOU$DFU_DF_RD_MASTER_CONTROL
      545     6466                           TOU$DFU_DF_RD_MASTER_ENTRY
      546     6467              INPUT:       MASTER_ENTRY
      547     6468                           MASTER_DATA
      548     6469                           CATALOG_KEY
      549     6470                           CATALOG_SEARCH_KEY
      550     6471              OUTPUT:      MASTER_ENTRY_KEY.ENTRY#
      551     6472              DESCRIPTION: This procedure checks the deckfile to determine if
      552     6473                           a catalog already exists in the deckfile  with the
      553     6474                           same key value as the catalog search key.
      554     6475                           If the catalog key is found, the procedure returns
      555     6476                           and altreturns otherwise.
      556     6477        */
      557     6478        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:26   
      558     6479    1   B_CHECK_FOR_CATALOG: PROC ALTRET ;
      559     6480
      560     6481    2      DCL FOUND                      BIT (1) CALIGNED ;
      561     6482
      562     6483        /* Code */
      563     6484
      564     6485    2      FOUND = %FALSE ;
      565     6486    2      CALL TOU$DFU_DF_RD_MASTER_CONTROL ALTRET (ERROR) ;
      566     6487    2      MASTER_ENTRY_KEY.DECK# = MASTER_DATA.DECK# ;
      567     6488    2      MASTER_ENTRY_KEY.ENTRY# = 1 ;
      568     6489    3      DO UNTIL (FOUND OR MASTER_ENTRY_KEY.ENTRY# > MASTER_DATA.ENTRY_COUNT) ;
      569     6490    3         CALL TOU$DFU_DF_RD_MASTER_ENTRY ALTRET (ERROR) ;
      570     6491    3         IF CATALOG_KEY.DATA = CATALOG_SEARCH_KEY.DATA
      571     6492    3         THEN FOUND = %TRUE ;
      572     6493    3         ELSE MASTER_ENTRY_KEY.ENTRY# = MASTER_ENTRY_KEY.ENTRY# + 1 ;
      573     6494    3      END /* UNTIL */ ;
      574     6495
      575     6496    2   ERROR:
      576     6497    2      IF FOUND
      577     6498    2      THEN RETURN ;
      578     6499    2      ELSE ALTRETURN ;
      579     6500
      580     6501    2   END B_CHECK_FOR_CATALOG ;
      581     6502        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:27   
      582     6503        /*I* NAME:         B_STORE_NIO_CATALOG
      583     6504             AUTHOR:       Scott S. Sheppard
      584     6505             PURPOSE:      Saves DIPPER catalog in a temporary file
      585     6506             INTERFACE:    TOU$DFU_OPEN_TEMP
      586     6507                           TOU$DFU_CLOSE_TEMP
      587     6508                           TOU$DFU_DF_RD_CATALOG_CONTROL
      588     6509                           TOU$DFU_DF_RD_SUBCATALOG
      589     6510                           TOU$DFU_DF_RD_CATALOG_ENTRY
      590     6511                           TOU$DFU_TF_WR_CATALOG_ENTRY
      591     6512                           TOU$DFU_DF_RD_OBJECT
      592     6513                           TOU$DFU_DF_WR_OBJECT
      593     6514                           TOU$DFU_DF_RD_FILE
      594     6515                           TOU$DFU_TF_WR_FILE
      595     6516             PARAMETERS:   None passed.
      596     6517             DATA:         DUP.TEMP.OPEN_TYPE - output
      597     6518                           DUP.TEMP.CLOSE_TYPE - output
      598     6519                           COPIED_CATALOG - output
      599     6520                           COPIED_SUB - output
      600     6521                           CATALOG_DATA - input
      601     6522                           SUBCATALOG_KEY - output
      602     6523                           CATALOG_ENTRY_KEY - output
      603     6524                           BINARY_KEY - output
      604     6525                           MCA_B.FILE.SIZE - output
      605     6526                           BCD_KEY - output
      606     6527                           BCD# - output
      607     6528             DESCRIPTION:  This  procedure reads the  catalog control and
      608     6529                           holds it in  the COPIED_CATALOG structure. The
      609     6530                           subcatalog   is   kept   in   the   SUBCATALOG
      610     6531                           structure.   The   remainder   of  the  DIPPER
      611     6532                           catalog,  i.e., the  entries and  object decks
      612     6533                           are read and stored in the temporary file.
      613     6534        */
      614     6535        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:28   
      615     6536    1   B_STORE_NIO_CATALOG: PROC ALTRET ;
      616     6537
      617     6538        /* Code */
      618     6539
      619     6540    2      DUP.TEMP.OPEN_TYPE = %CREATE_FILE ;
      620     6541    2      CALL TOU$DFU_OPEN_TEMP ALTRET (ERROR) ;
      621     6542
      622     6543    2      CALL TOU$DFU_DF_RD_CATALOG_CONTROL ALTRET (ERROR) ;
      623     6544    2      COPIED_CATALOG = CATALOG_DATA ;
      624     6545
      625     6546    2      SUBCATALOG_KEY.DECK# = COPIED_CATALOG.DECK# ;
      626     6547    2      CALL TOU$DFU_DF_RD_SUBCATALOG ;
      627     6548    2      COPIED_SUB = SUBCATALOG_DATA ;
      628     6549
      629     6550    2      CATALOG_ENTRY_KEY.DECK# = COPIED_CATALOG.DECK# ;
      630     6551    3      DO CATALOG_ENTRY_KEY.ENTRY# = 1 TO COPIED_CATALOG.ENTRY_COUNT ;
      631     6552    3         CALL TOU$DFU_DF_RD_CATALOG_ENTRY ALTRET (ERROR) ;
      632     6553    3         CALL TOU$DFU_TF_WR_CATALOG_ENTRY ALTRET (ERROR) ;
      633     6554
      634     6555    3         CALL TOU$DFU_DF_RD_OBJECT ALTRET (ERROR) ;
      635     6556    3         CALL TOU$DFU_TF_WR_OBJECT ALTRET (ERROR) ;
      636     6557
      637     6558    3         BINARY_KEY.DECK# = OBJECT.DECK# ;
      638     6559    3         CALL TOU$DFU_DF_RD_FILE ALTRET (ERROR) ;
      639     6560    3         CALL TOU$DFU_TF_WR_FILE ALTRET (ERROR) ;
      640     6561
      641     6562    3         BCD_KEY.DECK# = OBJECT.DECK# ;
      642     6563    3         BCD# = OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT - 1 ;
      643     6564    3         CALL TOU$DFU_DF_RD_BCD_CARDS ALTRET (ERROR) ;
      644     6565    3         CALL TOU$DFU_TF_WR_BCD_CARDS ALTRET (ERROR) ;
      645     6566    3      END /* DO */ ;
      646     6567
      647     6568    2      DUP.TEMP.CLOSE_TYPE = %SAVE_FILE ;
      648     6569    2      CALL TOU$DFU_CLOSE_TEMP ALTRET (ERROR) ;
      649     6570    2      RETURN ;
      650     6571           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:29   
      651     6572    2   ERROR:
      652     6573    2      DUP.TEMP.CLOSE_TYPE = %DISCARD_FILE ;
      653     6574    2      CALL TOU$DFU_CLOSE_TEMP ;
      654     6575    2      ALTRETURN ;
      655     6576
      656     6577    2   END B_STORE_NIO_CATALOG ;
      657     6578        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:30   
      658     6579        /*I* NAME:         B_BUILD_DECKFILE
      659     6580             AUTHOR:       Scott S. Sheppard
      660     6581             PURPOSE:      Creates the deckfile from Inputs
      661     6582             INTERFACE:    TOU$DFU_OPEN_DF
      662     6583                           TOU$DFU_CLOSE_DF
      663     6584                           B_CLEAR_DF
      664     6585                           B_BUILD_FROM_VOLUMES
      665     6586             PARAMETERS:   None passed.
      666     6587             DATA:         DUP.DF.OPEN_TYPE - output
      667     6588                           DUP.DF.CLOSE_TYPE - output
      668     6589                           DUP.DF.REPORT_ERROR - output
      669     6590             DESCRIPTION:  This procedure is the  driver  used to build a
      670     6591                           deckfile.  The  deckfile  is  open  for output
      671     6592                           which deletes all the records.
      672     6593        */
      673     6594        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:31   
      674     6595    1   B_BUILD_DECKFILE: PROC ALTRET ;
      675     6596
      676     6597        /* Code */
      677     6598
      678     6599    2      DUP.DF.OPEN_TYPE = %CREATE_FILE ;
      679     6600    2      DUP.DF.REPORT_ERROR = %TRUE ;
      680     6601    2      CALL TOU$DU_OPEN_DF ALTRET (ERROR) ;
      681     6602
      682     6603    2      CALL B_CLEAR_DF ;
      683     6604    2      CALL B_BUILD_FROM_VOLUMES ALTRET (ERROR) ;
      684     6605
      685     6606    2      DUP.DF.CLOSE_TYPE = %SAVE_FILE ;
      686     6607    2      CALL TOU$DU_CLOSE_DF ALTRET (ERROR) ;
      687     6608    2      RETURN ;
      688     6609
      689     6610    2   ERROR:
      690     6611    2      DUP.DF.CLOSE_TYPE = %DISCARD_FILE ;
      691     6612    2      CALL TOU$DU_CLOSE_DF ;
      692     6613    2      ALTRETURN ;
      693     6614
      694     6615    2   END B_BUILD_DECKFILE ;
      695     6616        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:32   
      696     6617        /*I*  NAME:        B_BUILD_FROM_VOLUMES
      697     6618              AUTHORS:     Scott S. Sheppard
      698     6619              PURPOSE:     Processes IFAD Volumes
      699     6620              INTERFACE:   B_PROCESS_IFAD
      700     6621                           B_SAVE_MASTER_CATALOG
      701     6622                           B_SAVE_LAST_DECK#
      702     6623                           B_SAVE_LOG
      703     6624                           B_SAVE_REVISION
      704     6625                           B_SAVE_NIO_CATALOG
      705     6626                           TOU$DU_OPEN_IFAD
      706     6627                           TOU$CLEAR_IFAD
      707     6628                           TOU$DU_GET_SITE
      708     6629                           TOU$DU_CLOSE_IFAD
      709     6630                           TOU$DU_NEXT_IFAD
      710     6631              INPUT:       VOLUME# - current volume number of volume set
      711     6632                           DUP.IFAD.NUM_VOLUMES - number of IFAD volumes
      712     6633                           TEMP_INPUT_EXISTS - NIO catalog in storage?
      713     6634              OUTPUT:      VOLUME# - increased as volumes are processed
      714     6635              DESCRIPTION: This procedure processes the IFAD input source
      715     6636                           reading all volumes in the volume set and then
      716     6637                           adds the NIO catalog if it was copied.
      717     6638        */
      718     6639
      719     6640    1   B_BUILD_FROM_VOLUMES: PROC ALTRET ;
      720     6641
      721     6642    2      DCL VOLUME#     UBIN WORD ALIGNED ;
      722     6643           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:33   
      723     6644        /* Code */
      724     6645
      725     6646    2      CALL TOU$DU_OPEN_IFAD ALTRET (ERROR) ;
      726     6647    2      CALL TOU$DU_GET_SITE ALTRET (ERROR) ;
      727     6648
      728     6649    2      VOLUME# = 1 ;
      729     6650    2      CALL TOU$CLEAR_IFAD ;
      730     6651
      731     6652    2      CALL B_PROCESS_IFAD ALTRET (ERROR) ;
      732     6653    3      DO WHILE (VOLUME# < DUP.IFAD.NUM_VOLUMES) ;
      733     6654    3         CALL TOU$DU_NEXT_IFAD ALTRET (ERROR) ;
      734     6655    3         VOLUME# = VOLUME# + 1 ;
      735     6656    3         CALL TOU$CLEAR_IFAD ;
      736     6657    3         CALL B_PROCESS_IFAD ALTRET (ERROR) ;
      737     6658    3      END /* WHILE */ ;
      738     6659    2      IF TEMP_INPUT_EXISTS
      739     6660    2      THEN CALL B_SAVE_NIO_CATALOG ALTRET (ERROR) ;
      740     6661    2      ELSE /* no NIO catalog was copied before the BUILD */ ;
      741     6662    2      CALL B_SAVE_MASTER_CATALOG ALTRET (ERROR) ;
      742     6663    2      CALL B_SAVE_LAST_DECK# ALTRET (ERROR) ;
      743     6664    2      CALL B_SAVE_REVISION ALTRET (ERROR) ;
      744     6665    2      CALL B_SAVE_LOG ALTRET (ERROR) ;
      745     6666
      746     6667    2      CALL TOU$DU_CLOSE_IFAD ALTRET (ERROR) ;
      747     6668    2      RETURN ;
      748     6669
      749     6670    2   ERROR:
      750     6671    2      CALL TOU$DU_CLOSE_IFAD ;
      751     6672    2      ALTRETURN ;
      752     6673
      753     6674    2   END B_BUILD_FROM_VOLUMES ;
      754     6675        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:34   
      755     6676        /*I*  NAME:        B_PROCESS_IFAD
      756     6677              AUTHOR:      Scott S. Sheppard
      757     6678              PURPOSE:     Processes a single IFAD input volume
      758     6679              INTERFACE:   TOU$GET_CP6_OBJECT
      759     6680                           B_GET_CATALOG
      760     6681                           B_SET_CATALOG_KEY
      761     6682                           TOU$GET_BINARY_CARDS
      762     6683                           TOU$GET_BCD_CARDS
      763     6684                           B_SET_OBJECT_KEY
      764     6685                           B_CHECK_CORRECT_FILE
      765     6686                           B_SAVE_OBJECT_DECK
      766     6687                           B_SAVE_CATALOG_ENTRY
      767     6688                           B_SAVE_CATALOG
      768     6689                           B_SAVE_SUBCATALOG
      769     6690                           B_SAVE_MASTER_ENTRY
      770     6691                           B_ERR_MSG
      771     6692              INPUT:       FILE_EOF
      772     6693              OUTPUT:      No system data altered by this module.
      773     6694              DESCRIPTION: This procedure processes the IFAD input volume
      774     6695                           from start to end (two EOF marks in a row).
      775     6696        */
      776     6697        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:35   
      777     6698    1   B_PROCESS_IFAD: PROC ALTRET ;
      778     6699
      779     6700        /* Code */
      780     6701
      781     6702    2      CALL TOU$GET_CP6_OBJECT ALTRET (ERROR) ;
      782     6703    3      DO WHILE (FILE_EOF < 2) ;
      783     6704    3         CALL B_GET_CATALOG;
      784     6705    3         CALL B_SET_CATALOG_KEY ALTRET (ERROR) ;
      785     6706    4         DO WHILE (FILE_EOF = 0) ;
      786     6707    4            CALL TOU$GET_BINARY_CARDS ALTRET (ERROR) ;
      787     6708    4            CALL TOU$GET_BCD_CARDS ALTRET (ERROR) ;
      788     6709    4            CALL B_SET_OBJECT_KEY ALTRET (ERROR) ;
      789     6710    4            CALL B_CHECK_CORRECT_FILE ALTRET (ERROR) ;
      790     6711    4            CALL B_SAVE_OBJECT_DECK ('BINARY') ALTRET (ERROR) ;
      791     6712    4            CALL B_SAVE_CATALOG_ENTRY ALTRET (ERROR) ;
      792     6713    4            CALL TOU$GET_CP6_OBJECT ALTRET (ERROR) ;
      793     6714    4         END /* WHILE */ ;
      794     6715    3         CALL B_SAVE_SUBCATALOG (DUP.IFAD.FID, '~FM         ') ALTRET (ERROR) ;
      795     6716    3         CALL B_SAVE_CATALOG ('BUILD') ALTRET (ERROR) ;
      796     6717    3         CALL B_SAVE_MASTER_ENTRY ALTRET (ERROR) ;
      797     6718    3         CALL TOU$GET_CP6_OBJECT ALTRET (ERROR) ;
      798     6719    3      END /* WHILE */ ;
      799     6720    2      RETURN ;
      800     6721
      801     6722    2   ERROR:
      802     6723    2      CALL B_ERR_MSG (%E$BPI_NO_DF) ;
      803     6724    2      ALTRETURN ;
      804     6725
      805     6726    2   END B_PROCESS_IFAD ;
      806     6727        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:36   
      807     6728        /*I*  NAME:        B_GET_CATALOG
      808     6729              AUTHOR:      David M. Augustine
      809     6730              PURPOSE:     Gets Catalog
      810     6731              INTERFACE:   None Called.
      811     6732              INPUT:       LAST.DECK#
      812     6733              OUTPUT:      CATALOG_KEY.DECK#
      813     6734                           CATALOG_DATA
      814     6735                           CATALOG_ENTRY_KEY
      815     6736                           LAST.DECK#
      816     6737                           FILE_EOF
      817     6738              DESCRIPTION: This procedure  gets a catalog  by initializing
      818     6739                           catalog values to appropriate  starting values.
      819     6740                           The last deck number is increased by  one since
      820     6741                           the current value is used as the deck number of
      821     6742                           the catalog.
      822     6743        */
      823     6744
      824     6745    1   B_GET_CATALOG: PROC ;
      825     6746
      826     6747        /* Code */
      827     6748
      828     6749    2      CATALOG_KEY.DECK# = LAST.DECK# ;
      829     6750    2      CATALOG_DATA.DECK# = LAST.DECK#;
      830     6751    2      CATALOG_DATA.ENTRY_COUNT = 0 ;
      831     6752    2      CATALOG_DATA.RFU = 'DEER' ;
      832     6753    2      CATALOG_ENTRY_KEY.DECK# = LAST.DECK#;
      833     6754    2      CATALOG_ENTRY_KEY.ENTRY# = 1;
      834     6755    2      LAST.DECK# = LAST.DECK# + 1 ;
      835     6756    2      FILE_EOF = 0;
      836     6757    2      RETURN;
      837     6758
      838     6759    2   END B_GET_CATALOG;
      839     6760        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:37   
      840     6761        /*I*  NAME:        B_SET_CATALOG_KEY
      841     6762              AUTHORS:     David M. Augustine
      842     6763                           Scott S. Sheppard
      843     6764              PURPOSE:     Sets Catalog Key from First $Object Card
      844     6765              INTERFACE:   B_SET_FIRMWARE_CATALOG
      845     6766                           B_SET_GECALL_CATALOG
      846     6767                           B_ERR_MSG
      847     6768              INPUT:       OBJECT.BCD.LIBRARY
      848     6769                           OBJECT.BCD.LOAD_TYPE
      849     6770              OUTPUT:      Catalog key set by called routine.
      850     6771              DESCRIPTION: This procedure validates the object library  and
      851     6772                           load type and calls  the  appropriate module  to
      852     6773                           set the catalog key.
      853     6774
      854     6775                           This procedure is NOT used for the NIO
      855     6776                           catalog.
      856     6777        */
      857     6778        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:38   
      858     6779    1   B_SET_CATALOG_KEY: PROC ALTRET ;
      859     6780
      860     6781        /* Code */
      861     6782
      862     6783    3      DO SELECT (OBJECT.BCD.LIBRARY) ;
      863     6784    3         SELECT ('HMPCJ1') ;
      864     6785    4         DO SELECT (OBJECT.BCD.LOAD_TYPE) ;
      865     6786    4            SELECT ('D', 'R', 'P') ;
      866     6787    4            CALL B_SET_FIRMWARE_CATALOG ALTRET (ERROR) ;
      867     6788    4            SELECT (ELSE) ;
      868     6789    4         CALL B_ERR_MSG (%E$BSCK_OBJ_LOADER) ;
      869     6790    4         ALTRETURN ;
      870     6791    4         END /* SELECT */ ;
      871     6792    3      SELECT ('HTND') ;
      872     6793    4      DO SELECT (OBJECT.BCD.LOAD_TYPE) ;
      873     6794    4         SELECT ('D', 'R', 'P') ;
      874     6795    4         CALL B_SET_GECALL_CATALOG ALTRET (ERROR) ;
      875     6796    4         SELECT (ELSE) ;
      876     6797    4      CALL B_ERR_MSG (%E$BSCK_OBJ_LOADER) ;
      877     6798    4      ALTRETURN ;
      878     6799    4      END /* SELECT */ ;
      879     6800    3      SELECT (ELSE) ;
      880     6801    3      CALL B_ERR_MSG (%E$BSCK_OBJ_LIB) ;
      881     6802    3   ERROR:
      882     6803    3      ALTRETURN ;
      883     6804    3      END /* SELECT */ ;
      884     6805    2      RETURN;
      885     6806
      886     6807        /* END B_SET_CATALOG_KEY */
      887     6808        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:39   
      888     6809        /*I*  NAME:        B_SET_FIRMWARE_CATALOG
      889     6810              AUTHORS:     David M. Augustine
      890     6811                           Scott S. Sheppard
      891     6812              PURPOSE:     Sets the Catalog Key
      892     6813              INTERFACE:   B_ERR_MSG
      893     6814              INPUT:       OBJECT.BCD.CLASS
      894     6815              OUTPUT:      CATALOG_KEY_SET
      895     6816                           DUP.HDR_CODE
      896     6817                           DUP.MSG_CODE
      897     6818                           CATALOG_KEY
      898     6819                           CATALOG_TYPE
      899     6820              DESCRIPTION: This procedure sets the catalog key for ITR and
      900     6821                           MDR catalogs. Note that the key is not complete
      901     6822                           for ITR catalogs, since the  device model  must
      902     6823                           be appended to the key when the  first firmware
      903     6824                           deck for the catalog is encountered.
      904     6825        */
      905     6826        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:40   
      906     6827    2   B_SET_FIRMWARE_CATALOG: PROC ALTRET ;
      907     6828
      908     6829        /* Code */
      909     6830
      910     6831    4      DO SELECT (OBJECT.BCD.CLASS) ;
      911     6832    4         SELECT ('T', 'P', 'C', 'D') ;
      912     6833    4         CATALOG_KEY_SET = %TRUE ;
      913     6834    4         DUP.HDR_CODE = %H$BUILD_MDR ;
      914     6835    4         DUP.MSG_CODE = %T$B_MDR ;
      915     6836    5         DO SELECT (OBJECT.BCD.CLASS) ;
      916     6837    5            SELECT ('T') ;
      917     6838    5            CATALOG_KEY.DATA = 'CATA.MDR.TAPE' ;
      918     6839    5            SELECT ('P') ;
      919     6840    5            CATALOG_KEY.DATA = 'CATA.MDR.PRINT' ;
      920     6841    5            SELECT ('C') ;
      921     6842    5            CATALOG_KEY.DATA = 'CATA.MDR.CARD' ;
      922     6843    5            SELECT ('D') ;
      923     6844    5            CATALOG_KEY.DATA = 'CATA.MDR.DISK' ;
      924     6845    5         END /* SELECT */ ;
      925     6846    4         CATALOG_TYPE = OBJECT.BCD.CLASS ;
      926     6847    4         SELECT ('I', 'F') ;
      927     6848    4         CATALOG_KEY_SET = %FALSE ;
      928     6849    4         DUP.HDR_CODE = %H$BUILD_ITR ;
      929     6850    4         DUP.MSG_CODE = %T$B_ITR ;
      930     6851    4         CATALOG_KEY.DATA = 'CATA.ITR.';
      931     6852    4         CATALOG_TYPE = OBJECT.BCD.CLASS ;
      932     6853    4         SELECT (ELSE) ;
      933     6854    4      CALL B_ERR_MSG (%E$BSFC_OBJ_CLASS) ;
      934     6855    4      ALTRETURN ;
      935     6856    4      END /* SELECT */ ;
      936     6857    3      RETURN;
      937     6858
      938     6859    3   END B_SET_FIRMWARE_CATALOG;
      939     6860        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:41   
      940     6861        /*I*  NAME:        B_SET_GECALL_CATALOG
      941     6862              AUTHORS:     Scott S. Sheppard
      942     6863                           David M. Augustine
      943     6864              PURPOSE:     Sets Catalog Key for GECALL Catalogs
      944     6865              INTERFACE:   B_ERR_MSG
      945     6866              INPUT:       OBJECT.BCD.CLASS
      946     6867              OUTPUT:      CATALOG_KEY_SET
      947     6868                           DUP.HDR_CODE
      948     6869                           DUP.MSG_CODE
      949     6870                           CATALOG_KEY
      950     6871                           CATALOG_TYPE
      951     6872              DESCRIPTION: This procedure sets the catalog key for the
      952     6873                           GECALL catalog based on the object class of
      953     6874                           the  first object deck  encountered for the
      954     6875                           catalog.
      955     6876                           The  PACT  catalog  is  no  longer  needed
      956     6877                           by TOLTS, but has  been  left  in  so DEER
      957     6878                           will remain compatible with old IFAD tapes
      958     6879        */
      959     6880        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:42   
      960     6881    2   B_SET_GECALL_CATALOG: PROC ALTRET ;
      961     6882
      962     6883        /* Code */
      963     6884
      964     6885    3      CATALOG_KEY_SET = %TRUE ;
      965     6886    3      DUP.HDR_CODE = %H$BUILD_PROG ;
      966     6887    3      DUP.MSG_CODE = %T$B_GECALL ;
      967     6888
      968     6889    4      DO SELECT (OBJECT.BCD.CLASS) ;
      969     6890    4         SELECT ('A') ;
      970     6891    4         CATALOG_KEY.DATA = 'CATA.PCT' ;
      971     6892    4         SELECT ('C') ;
      972     6893    4         CATALOG_KEY.DATA = 'CATA.CLT' ;
      973     6894    4         SELECT ('M') ;
      974     6895    4         CATALOG_KEY.DATA = 'CATA.MLT' ;
      975     6896    4         SELECT ('P') ;
      976     6897    4         CATALOG_KEY.DATA = 'CATA.PLT' ;
      977     6898    4         SELECT ('S') ;
      978     6899    4         CATALOG_KEY.DATA = 'CATA.SLT' ;
      979     6900    4         SELECT ('U') ;
      980     6901    4         CATALOG_KEY.DATA = 'CATA.UTL' ;
      981     6902    4         SELECT (ELSE) ;
      982     6903    4      CALL B_ERR_MSG (%E$BSFC_OBJ_CLASS) ;
      983     6904    4      ALTRETURN ;
      984     6905    4      END /* SELECT */ ;
      985     6906
      986     6907    3      CATALOG_TYPE = OBJECT.BCD.CLASS ;
      987     6908    3      RETURN;
      988     6909
      989     6910    3   END B_SET_GECALL_CATALOG;
      990     6911    2   END B_SET_CATALOG_KEY ;
      991     6912        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:43   
      992     6913        /*I*  NAME:        B_SET_OBJECT_KEY
      993     6914              AUTHORS:     David M. Augustine
      994     6915                           Scott S. Sheppard
      995     6916              PURPOSE:     Sets OBJECT keys
      996     6917              INTERFACE:   B_SET_GECALL_KEY
      997     6918                           B_SET_MPC_KEY
      998     6919                           B_SET_DIPPER_KEY
      999     6920              INPUT:       OBJECT.BCD.LIBRARY
     1000     6921              OUTPUT:      OBJECT_KEY.DATA
     1001     6922              DESCRIPTION: This procedure calls the appropriate module to set
     1002     6923                           the object key based on the library of the  object
     1003     6924                           deck.
     1004     6925        */
     1005     6926
     1006     6927    1   B_SET_OBJECT_KEY: PROC ALTRET ;
     1007     6928
     1008     6929        /* Code */
     1009     6930
     1010     6931    3      DO SELECT (OBJECT.BCD.LIBRARY) ;
     1011     6932    3         SELECT ('HMPCJ1') ;
     1012     6933    3         CALL B_SET_MPC_KEY ;
     1013     6934    3         SELECT ('HTND') ;
     1014     6935    3         CALL B_SET_GECALL_KEY ;
     1015     6936    3         SELECT ('HNIOA0') ;
     1016     6937    3         CALL B_SET_DIPPER_KEY ;
     1017     6938    3         SELECT (ELSE) ;
     1018     6939    3      CALL B_ERR_MSG (%E$BSCK_OBJ_LIB) ;
     1019     6940    3      ALTRETURN ;
     1020     6941    3      END /* SELECT */ ;
     1021     6942    2      RETURN;
     1022     6943
     1023     6944        /* END B_SET_OBJECT_KEY */
     1024     6945        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:44   
     1025     6946        /*I*  NAME:        B_SET_GECALL_KEY
     1026     6947              AUTHORS:     David M. Augustine
     1027     6948                           Scott S. Sheppard
     1028     6949              PURPOSE:     Sets GECALL keys
     1029     6950              INTERFACE:   CONCAT function
     1030     6951                           B_SQUISH_GIFM_DECK
     1031     6952              INPUT:       OBJECT.BCD.CLASS
     1032     6953                           OBJECT.BCD.GECALL
     1033     6954              OUTPUT:      OBJECT_KEY.DATA
     1034     6955              DESCRIPTION: This procedure sets the object key for a GECALL
     1035     6956                           type object deck.
     1036     6957        */
     1037     6958
     1038     6959    2   B_SET_GECALL_KEY: PROC ;
     1039     6960
     1040     6961        /* Code */
     1041     6962
     1042     6963    4      DO SELECT (OBJECT.BCD.CLASS) ;
     1043     6964    4         SELECT ('A') ;
     1044     6965    4         CALL CONCAT (OBJECT_KEY.DATA, 'PCT', '.', OBJECT.BCD.GECALL) ;
     1045     6966    4         SELECT ('C') ;
     1046     6967    4         CALL CONCAT (OBJECT_KEY.DATA, 'CLT', '.', OBJECT.BCD.GECALL) ;
     1047     6968    4         SELECT ('M') ;
     1048     6969    4         CALL CONCAT (OBJECT_KEY.DATA, 'MLT', '.', OBJECT.BCD.GECALL) ;
     1049     6970    4         SELECT ('P') ;
     1050     6971    4         CALL CONCAT (OBJECT_KEY.DATA, 'PLT', '.', OBJECT.BCD.GECALL) ;
     1051     6972    4         SELECT ('S') ;
     1052     6973    4         CALL CONCAT (OBJECT_KEY.DATA, 'SLT', '.', OBJECT.BCD.GECALL) ;
     1053     6974    4         SELECT ('U') ;
     1054     6975    4         CALL CONCAT (OBJECT_KEY.DATA, 'UTL', '.', OBJECT.BCD.GECALL) ;
     1055     6976    4         CALL B_SQUISH_GIFM_DECK ;
     1056     6977    4      END /* SELECT */ ;
     1057     6978    3      RETURN;
     1058     6979
     1059     6980        /* END B_SET_GECALL_KEY */
     1060     6981        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:45   
     1061     6982        /*I*  NAME:        B_SQUISH_GIFM_DECK
     1062     6983              AUTHOR:      Scott S. Sheppard
     1063     6984              PURPOSE:     Saves only GIFM Shell
     1064     6985              INTERFACE:   TOU$CHECKSUM
     1065     6986                           TOU$REFORM_DECK_CHECKSUM
     1066     6987                           B_COMPUTE_VERSION
     1067     6988              INPUT:       OBJECT
     1068     6989                           BCD_B
     1069     6990                           BINARY_B
     1070     6991                           BCD#
     1071     6992                           BIN#
     1072     6993              OUTPUT:      OBJECT
     1073     6994                           BCD_B
     1074     6995                           BINARY_B
     1075     6996                           BIN#
     1076     6997                           DKEND
     1077     6998                           REVISION_B
     1078     6999              DESCRIPTION: The object deck  GIFM  is applicable to CP-6 only because
     1079     7000                           it always contains a patch that identifies the IFAD tape.
     1080     7001                           GIFM is never executed during TOLTS' operation.  It would
     1081     7002                           be a waste of space to store the  entire object deck,  so
     1082     7003                           only the shell of the binary deck is stored.  The deck is
     1083     7004                           reduced to the  $OBJECT card,  two binary cards,  and the
     1084     7005                           $DKEND card.    The patched location which identifies the
     1085     7006                           IFAD tape is converted to  ASCII  and stored as the title
     1086     7007                           date in the revision.    If the IFAD Tape contains a GIFM
     1087     7008                           module that does  NOT  have  the patch to modify location
     1088     7009                           000002 to contain the IFAD tape version, then the version
     1089     7010                           saved in the deckfile is NOSPEC for NOT SPECIFIED.
     1090     7011        */
     1091     7012        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:46   
     1092     7013    3   B_SQUISH_GIFM_DECK: PROC ;
     1093     7014
     1094     7015    4      DCL P           UBIN WORD ALIGNED ;
     1095     7016    4      DCL VERSION_BCD CHAR (12) CALIGNED ;
     1096     7017
     1097     7018        /* Code */
     1098     7019
     1099     7020    4      IF OBJECT.BCD.LBL = 'GIFM'
     1100     7021    5      THEN DO ;
     1101     7022    5              VERSION_BCD = ' ' ;
     1102     7023    5              P = 0 ;
     1103     7024    6              DO WHILE (P < BCD#-1) ;
     1104     7025    6                 IF SUBSTR (BCD_B(P), 0, 6) = '000002'
     1105     7026    6                 THEN VERSION_BCD = SUBSTR (BCD_B(P), 15, 12) ;
     1106     7027    6                 ELSE /* not the patch to identify IFAD version */ ;
     1107     7028    6                 P = P + 1 ;
     1108     7029    6              END /* WHILE */ ;
     1109     7030    5              IF VERSION_BCD = ' '
     1110     7031    5              THEN REVISION_B.VERSION = 'NOSPEC' ;
     1111     7032    5              ELSE CALL B_COMPUTE_VERSION (VERSION_BCD, REVISION_B.VERSION) ;
     1112     7033    5              BINARY_B.OBJ(1) = BINARY_B.OBJ(BIN# - 1) ;
     1113     7034    5              BIN# = 2 ;
     1114     7035    5              DKEND_ = BCD_B(BCD# - 1) ;
     1115     7036    5              DKEND.BCD.SEQ = BINARY_B.SEQ(2) ;
     1116     7037    5              CALL TOU$CHECKSUM (0, ADDR (DKEND_), 20, DKEND.CHECKSUM) ;
     1117     7038    5              BCD_B(BCD# - 1) = DKEND_ ;
     1118     7039    5              CALL TOU$REFORM_DECK_CHECKSUM (,,,) ;
     1119     7040    5           END /* THEN */ ;
     1120     7041    4      ELSE /* Do not reduce non-GIFM decks in the UTL catalog. */ ;
     1121     7042    4      RETURN;
     1122     7043
     1123     7044    4   END B_SQUISH_GIFM_DECK ;
     1124     7045        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:47   
     1125     7046        /*I*  NAME:        B_COMPUTE_VERSION
     1126     7047              AUTHOR:      Scott Sheppard
     1127     7048              PURPOSE:     Converts ASCII BCD digits to ASCII alphabetics
     1128     7049              DESCRIPTION: This procedure converts the ASCII digit representation
     1129     7050                           of the IFAD version from the  patch card to its  ASCII
     1130     7051                           alphabetic character representation.
     1131     7052                           Example: 312621242104 -> 25,22,17,20,17,04 -> IFADA4
     1132     7053        */
     1133     7054
     1134     7055    3   B_COMPUTE_VERSION: PROC (DIGIT_VERSION, LETTER_VERSION) ;
     1135     7056
     1136     7057    4      DCL DIGIT_VERSION              (0:11) CHAR (1) CALIGNED ;
     1137     7058    4      DCL LETTER_VERSION             CHAR (6) CALIGNED ;
     1138     7059    4      DCL BCD_VERSION                (0:5) UBIN (6) UNAL ;
     1139     7060    4      DCL I                          UBIN WORD ALIGNED ;
     1140     7061    4      DCL FIRST                      UBIN WORD ALIGNED ;
     1141     7062    4      DCL SECOND                     UBIN WORD ALIGNED ;
     1142     7063
     1143     7064        /* Code */
     1144     7065
     1145     7066    5      DO I = 0 TO 5 ;
     1146     7067    5         CALL CHARBIN (FIRST, DIGIT_VERSION(I * 2)) ;
     1147     7068    5         CALL CHARBIN (SECOND, DIGIT_VERSION(I * 2 + 1)) ;
     1148     7069    5         BCD_VERSION(I) = (8 * FIRST) + SECOND ;
     1149     7070    5      END /* DO */ ;
     1150     7071    4      CALL TOT$BCD_ASCII (BCD_VERSION, LETTER_VERSION, I) ;
     1151     7072    4      RETURN ;
     1152     7073
     1153     7074    4   END B_COMPUTE_VERSION ;
     1154     7075    3   END B_SET_GECALL_KEY ;
     1155     7076        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:48   
     1156     7077        /*I*  NAME:        B_SET_MPC_KEY
     1157     7078              AUTHORS:     David M. Augustine
     1158     7079                           Scott S. Sheppard
     1159     7080              PURPOSE:     Sets the MPC Key
     1160     7081              INTERFACE:   B_SET_ITR_KEY
     1161     7082                           B_SET_FIRMWARE_KEY
     1162     7083                           B_SQUISH_FIRMWARE_DECK
     1163     7084                           B_SET_MDR_KEY
     1164     7085              INPUT:       OBJECT.BCD.CLASS
     1165     7086              OUTPUT:      No System data altered.
     1166     7087              DESCRIPTION: This procedure calls the appropriate module to
     1167     7088                           actually set the object key for the deck.
     1168     7089        */
     1169     7090
     1170     7091    2   B_SET_MPC_KEY: PROC ;
     1171     7092
     1172     7093        /* Code */
     1173     7094
     1174     7095    4      DO SELECT (OBJECT.BCD.CLASS) ;
     1175     7096    4         SELECT ('I') ;
     1176     7097    4         CALL B_SET_ITR_KEY ;
     1177     7098    4         SELECT ('F') ;
     1178     7099    4         CALL B_SET_FIRMWARE_KEY ;
     1179     7100    4         CALL B_SQUISH_FIRMWARE_DECK ;
     1180     7101    4         CALL B_FIX_CATALOG_KEY ;
     1181     7102    4         SELECT (ELSE) ;
     1182     7103    4      CALL B_SET_MDR_KEY;
     1183     7104    4      END /* SELECT */ ;
     1184     7105    3      RETURN;
     1185     7106
     1186     7107        /* END B_SET_MPC_KEY */
     1187     7108        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:49   
     1188     7109        /*I*  NAME:        B_SET_ITR_KEY
     1189     7110              AUTHORS:     David M. Augustine
     1190     7111                           Scott S. Sheppard
     1191     7112              PURPOSE:     Sets Object Key
     1192     7113              INTERFACE:   CONCAT function
     1193     7114              INPUT:       ID.ID
     1194     7115                           OBJECT.BCD.LBL
     1195     7116                           ID.REV.LEVEL
     1196     7117              OUTPUT:      OBJECT_KEY.DATA
     1197     7118              DESCRIPTION: This procedure sets the object key for ITR
     1198     7119                           type object decks.
     1199     7120        */
     1200     7121
     1201     7122    3   B_SET_ITR_KEY: PROC ;
     1202     7123
     1203     7124        /* Code */
     1204     7125
     1205     7126    4      CALL CONCAT (OBJECT_KEY.DATA,
     1206     7127    4              'ITR.',
     1207     7128    4              ID.ID,
     1208     7129    4              '.',
     1209     7130    4              OBJECT.BCD.LBL,
     1210     7131    4              '.',
     1211     7132    4              ID.REV.LEVEL);
     1212     7133    4      RETURN;
     1213     7134
     1214     7135    4   END B_SET_ITR_KEY;
     1215     7136        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:50   
     1216     7137        /*I*  NAME:        B_SET_FIRMWARE_KEY
     1217     7138              AUTHORS:     David M. Augustine
     1218     7139                           Scott S. Sheppard
     1219     7140              PURPOSE:     Sets Object Key
     1220     7141              INTERFACE:   CONCAT function
     1221     7142              INPUT:       ID.USAGE
     1222     7143                           ID.ID
     1223     7144                           OBJECT.BCD.LBL
     1224     7145                           ID.REV.LEVEL
     1225     7146              OUTPUT:      OBJECT_KEY.DATA
     1226     7147              DESCRIPTION: This procedure sets the object key for firmware
     1227     7148                           type object decks.
     1228     7149        */
     1229     7150
     1230     7151    3   B_SET_FIRMWARE_KEY: PROC ;
     1231     7152
     1232     7153    4      DCL 1 REVISION  STATIC CALIGNED,
     1233     7154    4            2 DOT     CHAR (1) INIT ('.'),
     1234     7155    4            2 LEVEL   CHAR (2) INIT (' ') ;
     1235     7156    4      DCL REVISION_ REDEF REVISION CHAR (3) CALIGNED ;
     1236     7157
     1237     7158        /* Code */
     1238     7159
     1239     7160    4      REVISION.LEVEL = ID.REV.LEVEL ;
     1240     7161    4      CALL CONCAT (OBJECT_KEY.DATA,
     1241     7162    4              ID.USAGE,
     1242     7163    4              '.',
     1243     7164    4              ID.ID,
     1244     7165    4              '.',
     1245     7166    4              OBJECT.BCD.LBL,
     1246     7167    4              REVISION_) ;
     1247     7168    4      RETURN;
     1248     7169
     1249     7170    4   END B_SET_FIRMWARE_KEY;
     1250     7171        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:51   
     1251     7172        /*I*  NAME:        B_SQUISH_FIRMWARE_DECK
     1252     7173              AUTHOR:      Scott S. Sheppard
     1253     7174              PURPOSE:     Shrinks Firmware Deck
     1254     7175              INTERFACE:   TOU$CHECKSUM
     1255     7176                           TOU$REFORM_DECK_CHECKSUM
     1256     7177              INPUT:       BINARY_B
     1257     7178                           BCD#
     1258     7179                           BIN#
     1259     7180              OUTPUT:      BINARY_B
     1260     7181                           BIN#
     1261     7182                           DKEND
     1262     7183              DESCRIPTION: This procedure  shrinks the  binary deck for  firmware
     1263     7184                           type decks since the binary deck is not used by TOLTS.
     1264     7185                           The number of binary cards is decreased to two  and
     1265     7186                           the sequence field of the deck end card is changed.
     1266     7187                           The deck checksum is then recalculated.
     1267     7188        */
     1268     7189
     1269     7190    3   B_SQUISH_FIRMWARE_DECK: PROC ;
     1270     7191
     1271     7192        /* Code */
     1272     7193
     1273     7194    4      IF BIN# > 2
     1274     7195    5      THEN DO ;
     1275     7196    5              BINARY_B.OBJ(1) = BINARY_B.OBJ(BIN# - 1) ;
     1276     7197    5              BIN# = 2 ;
     1277     7198    5              DKEND_ = BCD_B(BCD# - 1) ;
     1278     7199    5              DKEND.BCD.SEQ = BINARY_B.SEQ(2) ;
     1279     7200    5              CALL TOU$CHECKSUM (0, ADDR (DKEND_), 20, DKEND.CHECKSUM) ;
     1280     7201    5              BCD_B(BCD# - 1) = DKEND_ ;
     1281     7202    5              CALL TOU$REFORM_DECK_CHECKSUM (,,,) ;
     1282     7203    5           END /* THEN */ ;
     1283     7204    4      ELSE /* No need to reduce binary deck. */ ;
     1284     7205    4      RETURN;
     1285     7206
     1286     7207    4   END B_SQUISH_FIRMWARE_DECK ;
     1287     7208        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:52   
     1288     7209        /*I*  NAME:        B_FIX_CATALOG_KEY
     1289     7210              AUTHORS:     David M. Augustine
     1290     7211                           Scott S. Sheppard
     1291     7212              PURPOSE:     Sets Catalog Key for ITR's
     1292     7213              INTERFACE:   None called.
     1293     7214              INPUT:       CATALOG_KEY_SET
     1294     7215                           ID.ID
     1295     7216              OUTPUT:      CATALOG_KEY.ID
     1296     7217                           CATALOG_KEY_SET
     1297     7218              DESCRIPTION: This procedure appends the model number to the
     1298     7219                           catalog key for  ITR catalogs  from the  first
     1299     7220                           firmware deck found for the catalog.  The flag
     1300     7221                           CATALOG_KEY_SET is set to true  so that if the
     1301     7222                           catalog contains any other firmware decks, the
     1302     7223                           catalog key will not be modified.
     1303     7224        */
     1304     7225
     1305     7226    3   B_FIX_CATALOG_KEY: PROC ;
     1306     7227
     1307     7228        /* Code */
     1308     7229
     1309     7230    4      IF CATALOG_KEY_SET
     1310     7231    4      THEN /* Previous firmware deck used to set catalog key. */ ;
     1311     7232    5      ELSE DO ;
     1312     7233    5              CALL CONCAT (CATALOG_KEY.DATA,
     1313     7234    5                      SUBSTR (CATALOG_KEY.DATA, 0, 9),
     1314     7235    5                      ID.ID) ;
     1315     7236    5              CATALOG_KEY_SET = %TRUE ;
     1316     7237    5           END /* ELSE */ ;
     1317     7238    4      RETURN;
     1318     7239
     1319     7240    4   END B_FIX_CATALOG_KEY;
     1320     7241        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:53   
     1321     7242        /*I*  NAME:        B_SET_MDR_KEY
     1322     7243              AUTHORS:     David M. Augustine
     1323     7244                           Scott S. Sheppard
     1324     7245              PURPOSE:     Sets Object Key
     1325     7246              INTERFACE:   CONCAT function
     1326     7247              INPUT:       ID.ID
     1327     7248                           OBJECT.BCD.LBL
     1328     7249                           ID.REV.LEVEL
     1329     7250              OUTPUT:      OBJECT_KEY.DATA
     1330     7251              DESCRIPTION: This procedure sets the object key for MDR
     1331     7252                           type object decks.
     1332     7253        */
     1333     7254
     1334     7255    3   B_SET_MDR_KEY: PROC ;
     1335     7256
     1336     7257        /* Code */
     1337     7258
     1338     7259    4      CALL CONCAT (OBJECT_KEY.DATA,
     1339     7260    4              'MDR.',
     1340     7261    4              ID.ID,
     1341     7262    4              '.',
     1342     7263    4              OBJECT.BCD.LBL,
     1343     7264    4              '.',
     1344     7265    4              ID.REV.LEVEL);
     1345     7266    4      RETURN;
     1346     7267
     1347     7268    4   END B_SET_MDR_KEY;
     1348     7269    3   END B_SET_MPC_KEY ;
     1349     7270        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:54   
     1350     7271        /*I* NAME:         B_SET_DIPPER_KEY
     1351     7272             AUTHOR:       Kathy Larkin
     1352     7273             PURPOSE:      Sets Object Key for DIPPER Decks
     1353     7274             INTERFACE:    ADDR function
     1354     7275                           BINCHAR function
     1355     7276             PARAMETERS:   None passed.
     1356     7277             DATA:         MCA_B.DISKETTE_HEADER.DATA - input
     1357     7278                           DISKETTE_HEADER.X_OF_N.X - input
     1358     7279                           DISKETTE_HEADER.X_OF_N.N - input
     1359     7280                           OBJECT.NIO_BCD.CLASS - input
     1360     7281                           OBJECT.NIO_BCD.EQUIP_TYPE - input
     1361     7282                           OBJECT.NIO_BCD.FILE_NAME - input
     1362     7283                           OBJECT.NIO_BCD.PRD_NUM_TAB - input
     1363     7284                           OBJECT.NIO_BCD.PRG_NUM_TAB - input
     1364     7285                           OBJECT_KEY.DATA - output
     1365     7286             DESCRIPTION:  This  procedure sets the object deck key for a
     1366     7287                           DIPPER file.
     1367     7288                           Key form: ceeeeffffffffxndddppp
     1368     7289                             c - 1 character class
     1369     7290                             eeee - 4 character equipment type
     1370     7291                             ffffffff - 8 character file name
     1371     7292                             x - 1 digit X of X_OF_N field
     1372     7293                             n - 1 digit N of X_OF_N field
     1373     7294                             ddd - 3 digit product tab
     1374     7295                             ppp - 3 digit program tab
     1375     7296        */
     1376     7297        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:55   
     1377     7298    2   B_SET_DIPPER_KEY: PROC ;
     1378     7299
     1379     7300    3      DCL HDR$ PTR ALIGNED ;
     1380     7301           %DISKETTE_HEADER (STCLASS = "BASED (HDR$)") ;
     1381     7337
     1382     7338        /* Code */
     1383     7339
     1384     7340    3      HDR$ = ADDR (MCA_B.DISKETTE_HEADER.DATA) ;
     1385     7341    3      CALL CONCAT (OBJECT_KEY.DATA,
     1386     7342    3              OBJECT.NIO_BCD.CLASS,
     1387     7343    3              SUBSTR (OBJECT.NIO_BCD.EQUIP_TYPE, 0, 4),
     1388     7344    3              OBJECT.NIO_BCD.FILE_NAME,
     1389     7345    3              DISKETTE_HEADER.X_OF_N_,
     1390     7346    3              SUBSTR (OBJECT.NIO_BCD.PRD_NUM_TAB, 0, 3),
     1391     7347    3              OBJECT.NIO_BCD.PRG_NUM_TAB) ;
     1392     7348    3      RETURN ;
     1393     7349
     1394     7350    3   END B_SET_DIPPER_KEY ;
     1395     7351    2   END B_SET_OBJECT_KEY ;
     1396     7352        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:56   
     1397     7353        /*I*  NAME:        B_CHECK_CORRECT_FILE
     1398     7354              AUTHOR:      Scott S. Sheppard
     1399     7355              PURPOSE:     Checks IFAD object deck placement
     1400     7356              INTERFACE:   B_ERR_MSG
     1401     7357              INPUT:       OBJECT.BCD.CLASS
     1402     7358                           CATALOG_TYPE
     1403     7359              OUTPUT:      No system data altered.
     1404     7360              DESCRIPTION: This procedure checks the catalog type of the
     1405     7361                           current catalog against the class of the object
     1406     7362                           deck to be stored in that catalog.
     1407     7363        */
     1408     7364
     1409     7365    1   B_CHECK_CORRECT_FILE: PROC ALTRET ;
     1410     7366
     1411     7367        /* Code */
     1412     7368
     1413     7369    3      DO SELECT (CATALOG_TYPE) ;
     1414     7370    3         SELECT ('I', 'F') ;
     1415     7371    3         IF OBJECT.BCD.CLASS = 'I' | OBJECT.BCD.CLASS = 'F'
     1416     7372    3         THEN /* The deck is an ITR or FIRMWARE deck in an ITR catalog. */ ;
     1417     7373    4         ELSE DO ;
     1418     7374    4                 CALL B_ERR_MSG (%E$BCCF_WRONG_FILE) ;
     1419     7375    4                 ALTRETURN ;
     1420     7376    4              END /* ELSE */ ;
     1421     7377    3         SELECT (ELSE) ;
     1422     7378    3      IF OBJECT.BCD.CLASS = CATALOG_TYPE
     1423     7379    3      THEN /* The object deck is in the proper file. */ ;
     1424     7380    4      ELSE DO ;
     1425     7381    4              CALL B_ERR_MSG (%E$BCCF_WRONG_FILE) ;
     1426     7382    4              ALTRETURN ;
     1427     7383    4           END /* ELSE */ ;
     1428     7384    3      END /* SELECT */ ;
     1429     7385    2      RETURN;
     1430     7386
     1431     7387    2   END B_CHECK_CORRECT_FILE ;
     1432     7388        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:57   
     1433     7389        /*I*  NAME:        B_SAVE_OBJECT_DECK
     1434     7390              AUTHORS:     David M. Augustine
     1435     7391                           Scott S. Sheppard
     1436     7392              PURPOSE:     Saves a Binary Deck
     1437     7393              INTERFACE:   B_PRINT_DECK_LINE
     1438     7394                           TOU$CHECKSUM
     1439     7395                           TOU$DFU_DF_CHECK_ALREADY_SAVED
     1440     7396                           TOU$DFU_DF_WR_OBJECT
     1441     7397                           TOU$DFU_DF_WR_BINARY
     1442     7398                           TOU$DFU_DF_WR_FILE
     1443     7399                           TOU$DFU_DF_WR_BCD_CARDS
     1444     7400                           TOU$DFU_DF_RD_OBJECT_REFLIST
     1445     7401                           TOU$DFU_DF_WR_OBJECT_REFLIST
     1446     7402              INPUT:       OBJECT.BCD.LIBRARY
     1447     7403                           LAST.DECK#   BIN#   BCD#
     1448     7404                           BINARY_KEY.DECK#
     1449     7405                           OBJECT_REFLIST_DATA.NUM_REFS
     1450     7406                           MASTER_ENTRY_KEY.ENTRY#
     1451     7407                           CATALOG_ENTRY_KEY.ENTRY#
     1452     7408              OUTPUT:      OBJECT.DECK#
     1453     7409                           OBJECT.BINARY_COUNT
     1454     7410                           OBJECT.TOTAL_COUNT
     1455     7411                           OBJECT_REFLIST_DATA.NUM_REFS
     1456     7412                           OBJECT_REFLIST_DATA.REFS
     1457     7413                           OBJECT_REFLIST_KEY.DECK#
     1458     7414                           DECK_SAVED
     1459     7415              DESCRIPTION: This procedure saves all of the records for an
     1460     7416                           object deck if the deck is not  already  saved
     1461     7417                           in the deckfile. If the deck is already in the
     1462     7418                           deckfile, the deck's object reference list  is
     1463     7419                           read in and  modified to  include the  current
     1464     7420                           catalog in the reference list.
     1465     7421        */
     1466     7422        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:58   
     1467     7423    1   B_SAVE_OBJECT_DECK: PROC (DECK_TYPE) ALTRET ;
     1468     7424
     1469     7425    2      DCL DECK_TYPE   CHAR (6) CALIGNED ;
     1470     7426    2      DCL I           UBIN HALF HALIGNED ;
     1471     7427
     1472     7428        /* Code */
     1473     7429
     1474     7430    2      DECK_SAVED = %TRUE ;
     1475     7431
     1476     7432    2      OBJECT.DECK# = LAST.DECK#;
     1477     7433    2      OBJECT.BINARY_COUNT = BIN# ;
     1478     7434    2      OBJECT.TOTAL_COUNT = BIN# + BCD# + 1;
     1479     7435    2      CALL TOU$CHECKSUM (0, ADDR (OBJECT), 23, OBJECT.CHECKSUM) ;
     1480     7436
     1481     7437    2      CALL TOU$DFU_DF_CHECK_ALREADY_SAVED WHENRETURN
     1482     7438    3           DO ;
     1483     7439              /* New Object Deck */
     1484     7440    3              CALL TOU$DFU_DF_WR_OBJECT ALTRET (ERROR) ;
     1485     7441
     1486     7442    3              BINARY_KEY.DECK# = OBJECT.DECK# ;
     1487     7443    3              IF DECK_TYPE = 'BINARY'
     1488     7444    3              THEN CALL TOU$DFU_DF_WR_BINARY ALTRET (ERROR) ;
     1489     7445    3              ELSE CALL TOU$DFU_DF_WR_FILE ALTRET (ERROR) ;
     1490     7446
     1491     7447    3              BCD_KEY.DECK# = OBJECT.DECK# ;
     1492     7448    3              CALL TOU$DFU_DF_WR_BCD_CARDS ALTRET (ERROR) ;
     1493     7449
     1494     7450    3              OBJECT_REFLIST_KEY.DECK# = OBJECT.DECK# ;
     1495     7451    3              OBJECT_REFLIST_DATA.NUM_REFS = 1 ;
     1496     7452    3              OBJECT_REFLIST_DATA.REFS.ME#(0) = MASTER_ENTRY_KEY.ENTRY# ;
     1497     7453    3              OBJECT_REFLIST_DATA.REFS.CE#(0) = CATALOG_ENTRY_KEY.ENTRY# ;
     1498     7454    3              CALL TOU$DFU_DF_WR_OBJECT_REFLIST ALTRET (ERROR) ;
     1499     7455    3              LAST.DECK# = LAST.DECK# + 1 ;
     1500     7456    3           END /* WHENRETURN */ ;
     1501     7457           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:59   
     1502     7458    2      WHENALTRETURN
     1503     7459    3           DO ;
     1504     7460              /* COMMON Object Deck Already Saved */
     1505     7461    3              OBJECT_REFLIST_KEY.DECK# = OBJECT.DECK# ;
     1506     7462    3              CALL TOU$DFU_DF_RD_OBJECT_REFLIST ALTRET (ERROR) ;
     1507     7463
     1508     7464    3              I = OBJECT_REFLIST_DATA.NUM_REFS ;
     1509     7465    3              OBJECT_REFLIST_DATA.REFS.ME#(I) = MASTER_ENTRY_KEY.ENTRY# ;
     1510     7466    3              OBJECT_REFLIST_DATA.REFS.CE#(I) = CATALOG_ENTRY_KEY.ENTRY# ;
     1511     7467    3              OBJECT_REFLIST_DATA.NUM_REFS = I + 1 ;
     1512     7468    3              CALL TOU$DFU_DF_WR_OBJECT_REFLIST ALTRET (ERROR) ;
     1513     7469    3           END /* WHENALTRETURN */ ;
     1514     7470
     1515     7471    2      CALL B_PRINT_DECK_LINE ALTRET (ERROR) ;
     1516     7472    2      RETURN ;
     1517     7473
     1518     7474    2   ERROR:
     1519     7475    2      ALTRETURN ;
     1520     7476
     1521     7477    2   END B_SAVE_OBJECT_DECK;
     1522     7478        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:60   
     1523     7479        /*I* NAME:         B_PRINT_DECK_LINE
     1524     7480             AUTHOR:       Scott S. Sheppard
     1525     7481             PURPOSE:      prints the object deck line
     1526     7482             INTERFACE:    TOU$DU_PRINTER_WRITE
     1527     7483                           TOU$DU_PRINTER_OVERWRITE
     1528     7484             PARAMETERS:   None passed.
     1529     7485             DATA:         DUP.CURRENT_LINE# - input
     1530     7486                           DUP.BOTTOM_LINE# - input
     1531     7487                           BCD# - input
     1532     7488                           DUP.MSG_CODE - input / output
     1533     7489                           DUP.LINE_VFC - output
     1534     7490                           CUR# - output
     1535     7491             DESCRIPTION:  A DEER printout is  a collection of pages with
     1536     7492                           the   page  headers   describing  the  current
     1537     7493                           catalog  and the page lines describing each of
     1538     7494                           the   object  decks   in  the   catalog.  This
     1539     7495                           procedure  is  called   by  all  of  the  DEER
     1540     7496                           functions (where applicable) in order to print
     1541     7497                           the  line  or  lines  describing  a particular
     1542     7498                           object deck. If no patches exist for the deck,
     1543     7499                           the  descriptor  line  is  merely printed. The
     1544     7500                           line  to be  printed is  determined by the MSG
     1545     7501                           CODE  value  set  by  the  caller.  If patches
     1546     7502                           exist,  they  too  are  printed  in BOLD type,
     1547     7503                           ensuring that  they fit on the  same page with
     1548     7504                           the object deck descriptor line.
     1549     7505
     1550     7506                           The  printing  of  headers  is  automatically
     1551     7507                           handled by the TOU$DU printing utilities.
     1552     7508        */
     1553     7509        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:61   
     1554     7510    1   B_PRINT_DECK_LINE: PROC ALTRET ;
     1555     7511
     1556     7512    2      DCL HOLD_CODE   UBIN WORD ALIGNED ;
     1557     7513
     1558     7514        /* Code */
     1559     7515
     1560     7516    2      IF BCD# > 1
     1561     7517    3      THEN DO ;
     1562     7518    3              IF DUP.CURRENT_LINE# + BCD# > DUP.BOTTOM_LINE#
     1563     7519    3              THEN DUP.FORCE_NEW_PAGE = %TRUE ;
     1564     7520    3              ELSE /* patches will fit on same page as object deck */ ;
     1565     7521    3              CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;
     1566     7522    3              HOLD_CODE = DUP.MSG_CODE ;
     1567     7523    3              DUP.LINE_VFC = %NEXT_WRITE ;
     1568     7524    3              DUP.MSG_CODE = %T$B_PATCHES_WERE ;
     1569     7525    3              CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;
     1570     7526    3              DUP.MSG_CODE = %T$B_PATCH ;
     1571     7527    4              DO CUR# = 0 TO BCD#-2 ;
     1572     7528    4                 CALL TOU$DU_PRINTER_OVERWRITE ALTRET (ERROR) ;
     1573     7529    4              END /* DO */ ;
     1574     7530    3              DUP.LINE_VFC = %SKIP_WRITE ;
     1575     7531    3              DUP.MSG_CODE = %T$BLANK_LINE ;
     1576     7532    3              CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;
     1577     7533    3              DUP.MSG_CODE = HOLD_CODE ;
     1578     7534    3           END /* THEN */ ;
     1579     7535    2      ELSE CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;
     1580     7536    2      RETURN;
     1581     7537
     1582     7538    2   ERROR:
     1583     7539    2      DUP.LINE_VFC = %SKIP_WRITE ;
     1584     7540    2      ALTRETURN ;
     1585     7541
     1586     7542    2   END B_PRINT_DECK_LINE ;
     1587     7543        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:62   
     1588     7544        /*I*  NAME:        B_SAVE_CATALOG_ENTRY
     1589     7545              AUTHORS:     David M. Augustine
     1590     7546                           Scott S. Sheppard
     1591     7547              PURPOSE:     Saves the Deck as a Catalog Entry
     1592     7548              INTERFACE:   TOU$DFU_DF_WR_CATALOG_ENTRY
     1593     7549              INPUT:       CATALOG_ENTRY_KEY.ENTRY#
     1594     7550                           CATALOG_ENTRY_KEY.ENTRY_COUNT
     1595     7551              OUTPUT:      CATALOG_ENTRY_KEY.ENTRY#
     1596     7552                           CATALOG_DATA.ENTRY_COUNT
     1597     7553              DESCRIPTION: This procedure is called to save the object deck as
     1598     7554                           an entry of the current catalog.
     1599     7555        */
     1600     7556
     1601     7557    1   B_SAVE_CATALOG_ENTRY: PROC ALTRET ;
     1602     7558
     1603     7559        /* Code */
     1604     7560
     1605     7561    2      CALL TOU$DFU_DF_WR_CATALOG_ENTRY ALTRET (ERROR) ;
     1606     7562    2      CATALOG_ENTRY_KEY.ENTRY# = CATALOG_ENTRY_KEY.ENTRY# + 1;
     1607     7563    2      CATALOG_DATA.ENTRY_COUNT = CATALOG_DATA.ENTRY_COUNT + 1;
     1608     7564    2      RETURN;
     1609     7565
     1610     7566    2   ERROR:
     1611     7567    2      ALTRETURN ;
     1612     7568
     1613     7569    2   END B_SAVE_CATALOG_ENTRY;
     1614     7570        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:63   
     1615     7571        /*I*  NAME:        B_SAVE_SUBCATALOG
     1616     7572              AUTHORS:     David M. Augustine
     1617     7573                           Scott S. Sheppard
     1618     7574              PURPOSE:     Saves Subcatalog
     1619     7575              INTERFACE:   TOU$REPLACE
     1620     7576                           TOU$DFU_DF_WR_SUBCATALOG
     1621     7577              INPUT:       IFAD_FID
     1622     7578                           CATALOG_DATA.DECK#
     1623     7579              OUTPUT:      SUBCATALOG_DATA.IFAD_FID
     1624     7580                           SUBCATALOG_DATA.IFAD_FN
     1625     7581                           SUBCATALOG_KEY.DECK#
     1626     7582              DESCRIPTION: This procedure saves the subcatalog information
     1627     7583                           (IFAD file identifier and file number) for  the
     1628     7584                           current catalog being procesed.
     1629     7585        */
     1630     7586
     1631     7587    1   B_SAVE_SUBCATALOG: PROC (IFAD_FID, IFAD_FN) ALTRET ;
     1632     7588
     1633     7589    2      DCL IFAD_FID    CHAR (40) CALIGNED ;
     1634     7590    2      DCL IFAD_FN     CHAR (12) CALIGNED ;
     1635     7591
     1636     7592        /* Code */
     1637     7593
     1638     7594    2      SUBCATALOG_KEY.DECK# = CATALOG_DATA.DECK# ;
     1639     7595    2      SUBCATALOG_DATA.IFAD_FID = IFAD_FID ;
     1640     7596    2      SUBCATALOG_DATA.IFAD_FN = IFAD_FN ;
     1641     7597    2      CALL TOU$REPLACE (SUBCATALOG_DATA.IFAD_FN, 3) ;
     1642     7598    2      CALL TOU$DFU_DF_WR_SUBCATALOG ALTRET (ERROR) ;
     1643     7599    2      RETURN ;
     1644     7600
     1645     7601    2   ERROR:
     1646     7602    2      ALTRETURN ;
     1647     7603
     1648     7604    2   END B_SAVE_SUBCATALOG ;
     1649     7605        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:64   
     1650     7606        /*I*  NAME:        B_SAVE_CATALOG
     1651     7607              AUTHORS:     David M. Augustine
     1652     7608                           Scott S. Sheppard
     1653     7609              PURPOSE:     Saves Catalog Information
     1654     7610              INTERFACE:   B_ERR_MSG
     1655     7611                           TOU$DU_USER_WRITE
     1656     7612                           TOU$DU_PRINTER_WRITE
     1657     7613                           TOU$DFU_DF_WR_CATALOG_CONTROL
     1658     7614              INPUT:       CATALOG_KEY_SET
     1659     7615                           MASTER_ENTRY_KEY.ENTRY#
     1660     7616              OUTPUT:      DUP.MSG_CODE
     1661     7617                           DUP.FORCE_NEW_PAGE
     1662     7618                           CATALOG_KEY_SET
     1663     7619                           DECK_SAVED
     1664     7620              DESCRIPTION: This procedure saves the master entry record
     1665     7621                           and  catalog control record  for the current
     1666     7622                           catalog.
     1667     7623        */
     1668     7624        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:65   
     1669     7625    1   B_SAVE_CATALOG: PROC (SAVE_TYPE) ALTRET ;
     1670     7626
     1671     7627    2      DCL SAVE_TYPE CHAR (5) CALIGNED ;
     1672     7628
     1673     7629        /* Code */
     1674     7630
     1675     7631    2      IF CATALOG_KEY_SET
     1676     7632    3      THEN DO ;
     1677     7633    3              CALL TOU$DFU_DF_WR_CATALOG_CONTROL ALTRET (ERROR) ;
     1678     7634
     1679     7635    3              DUP.MSG_CODE = %T$B_CATALOG ;
     1680     7636    3              CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;
     1681     7637    3              IF SAVE_TYPE = 'BUILD'
     1682     7638    3              THEN DUP.MSG_CODE = %T$B_INFORM_BUILD ;
     1683     7639    3              ELSE DUP.MSG_CODE = %T$B_INFORM_COPY ;
     1684     7640    3              IF DUP.BATCH_MODE
     1685     7641    3              THEN ;
     1686     7642    3              ELSE CALL TOU$DU_USER_WRITE ;
     1687     7643    3              CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;
     1688     7644    3              DUP.FORCE_NEW_PAGE = %TRUE ;
     1689     7645
     1690     7646    3              CATALOG_KEY_SET = %FALSE ;
     1691     7647    3              DECK_SAVED = %FALSE ;
     1692     7648    3              RETURN ;
     1693     7649    3           END /* THEN */ ;
     1694     7650    3      ELSE DO ;
     1695     7651    3              CALL B_ERR_MSG (%E$BSC_ITR_NO_FIRM) ;
     1696     7652    3   ERROR:
     1697     7653    3              ALTRETURN ;
     1698     7654    3           END /* ELSE */ ;
     1699     7655
     1700     7656    2   END B_SAVE_CATALOG ;
     1701     7657        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:66   
     1702     7658        /*I*  NAME:        B_SAVE_MASTER_ENTRY
     1703     7659              AUTHORS:     David M. Augustine
     1704     7660                           Scott S. Sheppard
     1705     7661              PURPOSE:     Saves Catalog as a Master Entry
     1706     7662              INTERFACE:   TOU$DFU_DF_WR_MASTER_ENTRY
     1707     7663              INPUT:       MASTER_ENTRY_KEY
     1708     7664                           MASTER_DATA
     1709     7665              OUTPUT:      MASTER_ENTRY_KEY
     1710     7666                           MASTER_DATA
     1711     7667              DESCRIPTION: This procedure saves the current catalog as an entry
     1712     7668                           of the master catalog.
     1713     7669        */
     1714     7670
     1715     7671    1   B_SAVE_MASTER_ENTRY: PROC ALTRET ;
     1716     7672
     1717     7673        /* Code */
     1718     7674
     1719     7675    2      CALL TOU$DFU_DF_WR_MASTER_ENTRY ALTRET (ERROR) ;
     1720     7676    2      MASTER_ENTRY_KEY.ENTRY# = MASTER_ENTRY_KEY.ENTRY# + 1;
     1721     7677    2      MASTER_DATA.ENTRY_COUNT = MASTER_DATA.ENTRY_COUNT + 1;
     1722     7678    2      RETURN ;
     1723     7679
     1724     7680    2   ERROR:
     1725     7681    2      ALTRETURN ;
     1726     7682
     1727     7683    2   END B_SAVE_MASTER_ENTRY ;
     1728     7684        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:67   
     1729     7685        /*I* NAME:         B_SAVE_NIO_CATALOG
     1730     7686             AUTHOR:       Scott S. Sheppard
     1731     7687             PURPOSE:      Saves temporary file records in the deckfile
     1732     7688             INTERFACE:    TOU$DFU_OPEN_TEMP
     1733     7689                           TOU$DFU_CLOSE_TEMP
     1734     7690                           B_GET_CATALOG
     1735     7691                           B_FETCH_OBJECT_DECK
     1736     7692                           B_SAVE_OBJECT_DECK
     1737     7693                           B_SAVE_CATALOG_ENTRY
     1738     7694                           B_SAVE_SUBCATALOG
     1739     7695                           B_SAVE_CATALOG
     1740     7696                           B_SAVE_MASTER_ENTRY
     1741     7697             PARAMETERS:   None passed.
     1742     7698             DATA:         DUP.TEMP.OPEN_TYPE - output
     1743     7699                           DUP.TEMP.CLOSE_TYPE - output
     1744     7700                           CATALOG_KEY.DATA - output
     1745     7701                           CATALOG_SEARCH_KEY.DATA - input
     1746     7702                           DUP.HDR_CODE - output
     1747     7703                           DUP.MSG_CODE - output
     1748     7704                           COPIED_CATALOG.ENTRY_COUNT - input
     1749     7705                           COPIED_SUB.IFAD_FID - input
     1750     7706                           COPIED_SUB.IFAD_FN - input
     1751     7707             DESCRIPTION:  This procedure reads records  from a temporary
     1752     7708                           file and stores them in the deckfile.
     1753     7709        */
     1754     7710        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:68   
     1755     7711    1   B_SAVE_NIO_CATALOG: PROC ALTRET ;
     1756     7712
     1757     7713    2      DCL I UBIN WORD ALIGNED ;
     1758     7714
     1759     7715        /* Code */
     1760     7716
     1761     7717    2      CALL B_GET_CATALOG ;
     1762     7718    2      CATALOG_KEY_SET = %TRUE ;
     1763     7719    2      CATALOG_KEY.DATA = CATALOG_SEARCH_KEY.DATA ;
     1764     7720    2      DUP.HDR_CODE = %H$BUILD_NIO ;
     1765     7721    2      DUP.MSG_CODE = %T$B_ITR ;
     1766     7722
     1767     7723    2      DUP.TEMP.OPEN_TYPE = %READ_FILE ;
     1768     7724    2      CALL TOU$DFU_OPEN_TEMP ALTRET (ERROR) ;
     1769     7725
     1770     7726    3      DO I = 1 TO COPIED_CATALOG.ENTRY_COUNT ;
     1771     7727    3         CALL B_FETCH_OBJECT_DECK ALTRET (ERROR) ;
     1772     7728    3         CALL B_SAVE_OBJECT_DECK ('FILE') ALTRET (ERROR) ;
     1773     7729    3         CALL B_SAVE_CATALOG_ENTRY ALTRET (ERROR) ;
     1774     7730    3      END /* DO */ ;
     1775     7731
     1776     7732    2      CALL B_SAVE_SUBCATALOG (COPIED_SUB.IFAD_FID, COPIED_SUB.IFAD_FN)
     1777     7733    2              ALTRET (ERROR) ;
     1778     7734    2      CALL B_SAVE_CATALOG ('COPY') ALTRET (ERROR) ;
     1779     7735    2      CALL B_SAVE_MASTER_ENTRY ALTRET (ERROR) ;
     1780     7736
     1781     7737    2      DUP.TEMP.CLOSE_TYPE = %DISCARD_FILE ;
     1782     7738    2      CALL TOU$DFU_CLOSE_TEMP ALTRET (ERROR) ;
     1783     7739    2      RETURN ;
     1784     7740
     1785     7741    2   ERROR:
     1786     7742    2      DUP.TEMP.CLOSE_TYPE = %DISCARD_FILE ;
     1787     7743    2      CALL TOU$DFU_CLOSE_TEMP ;
     1788     7744    2      ALTRETURN ;
     1789     7745
     1790     7746        /* END B_SAVE_NIO_CATALOG */
     1791     7747        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:69   
     1792     7748        /*I* NAME:         B_FETCH_OBJECT_DECK
     1793     7749             AUTHOR:       Scott S. Sheppard
     1794     7750             PURPOSE:      reads and object deck from a temporary file
     1795     7751             INTERFACE:    TOU$DFU_TF_RD_CATALOG_ENTRY
     1796     7752                           TOU$DFU_TF_RD_OBJECT
     1797     7753                           TOU$DFU_TF_RD_FILE
     1798     7754                           TOU$DFU_TF_RD_BCD_CARDS
     1799     7755             PARAMETERS:   None passed.
     1800     7756             DATA:         COPIED_CATALOG - input
     1801     7757                           CATALOG_ENTRY_KEY - output
     1802     7758                           LAST.EDIT_NAME - output
     1803     7759                           BINARY_KEY - output
     1804     7760                           BIN# - output
     1805     7761                           MCA_B.FILE.SIZE - output
     1806     7762                           BCD_KEY - output
     1807     7763                           BCD# - output
     1808     7764                           DKEND - output
     1809     7765                           OBJECT.TOTAL_COUNT - input
     1810     7766                           OBJECT.BINARY_COUNT - input
     1811     7767             DESCRIPTION:  This  procedure  reads  an  object deck from a
     1812     7768                           temporary file so that  it may be written into
     1813     7769                           the deckfile.
     1814     7770        */
     1815     7771        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:70   
     1816     7772    2   B_FETCH_OBJECT_DECK: PROC ALTRET ;
     1817     7773
     1818     7774        /* Code */
     1819     7775
     1820     7776    3      CATALOG_ENTRY_KEY.DECK# = COPIED_CATALOG.DECK# ;
     1821     7777    3      CALL TOU$DFU_TF_RD_CATALOG_ENTRY ALTRET (ERROR) ;
     1822     7778    3      CATALOG_ENTRY_KEY.DECK# = CATALOG_DATA.DECK# ;
     1823     7779
     1824     7780    3      CALL TOU$DFU_TF_RD_OBJECT ALTRET (ERROR) ;
     1825     7781    3      LAST.EDIT_NAME = OBJECT.BCD.LBL ;
     1826     7782
     1827     7783    3      BINARY_KEY.DECK# = OBJECT.DECK# ;
     1828     7784    3      BIN# = OBJECT.BINARY_COUNT ;
     1829     7785    3      MCA_B.FILE.SIZE = OBJECT.LOAD_SIZE * 4 ;
     1830     7786    3      CALL TOU$DFU_TF_RD_FILE ALTRET (ERROR) ;
     1831     7787
     1832     7788    3      BCD_KEY.DECK# = OBJECT.DECK# ;
     1833     7789    3      BCD# = OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT - 1 ;
     1834     7790    3      CALL TOU$DFU_TF_RD_BCD_CARDS ALTRET (ERROR) ;
     1835     7791    3      DKEND_ = BCD_B(BCD# - 1) ;
     1836     7792
     1837     7793    3      ID.ID = 'DIPPER' ;
     1838     7794    3      ID.REVISION = DKEND.BCD.REVISION ;
     1839     7795    3      RETURN ;
     1840     7796
     1841     7797    3   ERROR:
     1842     7798    3      ALTRETURN ;
     1843     7799
     1844     7800    3   END B_FETCH_OBJECT_DECK ;
     1845     7801    2   END B_SAVE_NIO_CATALOG ;
     1846     7802        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:71   
     1847     7803        /*I*  NAME:        B_SAVE_MASTER_CATALOG
     1848     7804              AUTHORS:     David M. Augustine
     1849     7805                           Scott S. Sheppard
     1850     7806              PURPOSE:     Saves Master Catalog Deck
     1851     7807              INTERFACE:   TOU$DU_USER_WRITE
     1852     7808                           TOU$DU_PRINTER_WRITE
     1853     7809                           TOU$DFU_DF_WR_SUBCATALOG
     1854     7810                           TOU$DFU_DF_WR_MASTER_CONTROL
     1855     7811              INPUT:       MASTER_KEY.DATA
     1856     7812                           MASTER_ENTRY
     1857     7813                           MASTER_DATA
     1858     7814              OUTPUT:      DUP.HDR_CODE
     1859     7815                           DUP.MSG_CODE
     1860     7816                           ENTRY_COUNT
     1861     7817                           SUBCATALOG_KEY
     1862     7818                           SUBCATALOG_DATA
     1863     7819              DESCRIPTION: This procedure saves the master catalog in the
     1864     7820                           deckfile after the IFAD input source  has been
     1865     7821                           processed.
     1866     7822        */
     1867     7823        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:72   
     1868     7824    1   B_SAVE_MASTER_CATALOG: PROC ALTRET ;
     1869     7825
     1870     7826        /* Code */
     1871     7827
     1872     7828    2      IF MASTER_DATA.ENTRY_COUNT > 0
     1873     7829    3      THEN DO ;
     1874     7830    3              CALL TOU$DFU_DF_WR_MASTER_CONTROL ALTRET (ERROR) ;
     1875     7831
     1876     7832    3              CATALOG_KEY.DATA = MASTER_KEY.DATA ;
     1877     7833    3              CATALOG_DATA = MASTER_DATA;
     1878     7834
     1879     7835    3              DUP.HDR_CODE = %H$BUILD_MC ;
     1880     7836    3              DUP.MSG_CODE = %T$B_MASTER ;
     1881     7837    3              CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;
     1882     7838
     1883     7839    3              DUP.MSG_CODE = %T$B_MC_INFORM ;
     1884     7840    3              IF DUP.BATCH_MODE
     1885     7841    3              THEN ;
     1886     7842    3              ELSE CALL TOU$DU_USER_WRITE;
     1887     7843    3              CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;
     1888     7844    3              RETURN;
     1889     7845    3           END /* THEN */ ;
     1890     7846    3      ELSE DO ;
     1891     7847    3              DUP.MSG_CODE = %E$BSMC_NO_ENTRIES ;
     1892     7848    3              CALL TOU$DU_USER_WRITE ;
     1893     7849    3   ERROR:
     1894     7850    3              ALTRETURN ;
     1895     7851    3           END /* ELSE */ ;
     1896     7852
     1897     7853    2   END B_SAVE_MASTER_CATALOG;
     1898     7854        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:73   
     1899     7855        /*I*  NAME:        B_SAVE_LAST_DECK#
     1900     7856              AUTHOR:      Scott S. Sheppard
     1901     7857              PURPOSE:     Saves the Last Deck Number
     1902     7858              INTERFACE:   TOU$DFU_DF_WR_LAST_DECK#
     1903     7859              INPUT:       LAST.DECK# - set to the next available deck number
     1904     7860              OUTPUT:      LAST.DECK# - set to the actual last value used
     1905     7861              DESCRIPTION: The last deck number is incremented each time a
     1906     7862                           deck is saved. During processing, the last deck
     1907     7863                           number represents the next deck number since it
     1908     7864                           is  constantly  being  assigned from  and  THEN
     1909     7865                           incremented.   When the last deck is saved, the
     1910     7866                           last deck number is actually  one  greater than
     1911     7867                           the largest deck value stored in the deckfile.
     1912     7868        */
     1913     7869
     1914     7870    1   B_SAVE_LAST_DECK#: PROC ALTRET ;
     1915     7871
     1916     7872        /* Code */
     1917     7873
     1918     7874    2      LAST.DECK# = LAST.DECK# - 1 ;
     1919     7875    2      CALL TOU$DFU_DF_WR_LAST_DECK# ALTRET (ERROR) ;
     1920     7876    2      RETURN ;
     1921     7877
     1922     7878    2   ERROR:
     1923     7879    2      ALTRETURN ;
     1924     7880
     1925     7881    2   END B_SAVE_LAST_DECK# ;
     1926     7882        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:74   
     1927     7883        /*I*  NAME:        B_SAVE_LOG
     1928     7884              AUTHOR:      Scott S. Sheppard
     1929     7885              PURPOSE:     Saves the deckfile history log
     1930     7886              INTERFACE:   TOU$DU_UPDATE_LOG
     1931     7887                           TOU$DFU_DF_WR_LOG
     1932     7888              INPUT:       REVISION_B.VERSION
     1933     7889                           CATALOG_SEARCH_KEY.DATA
     1934     7890                           DUP.IFAD.FID
     1935     7891                           DUP.DF.FID
     1936     7892                           TEMP_INPUT_EXISTS
     1937     7893              OUTPUT:      DUP.LOG.CATALOG
     1938     7894                           DUP.LOG.DECK
     1939     7895                           LOG_B.COUNT
     1940     7896              DESCRIPTION: This  procedure stores the  deckfile  history
     1941     7897                           log.   Build is always the first entry saved.
     1942     7898                           When the  DIPPER  NIO catalog was copied into
     1943     7899                           the deckfile after being built,a second entry
     1944     7900                           is saved.
     1945     7901        */
     1946     7902        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:75   
     1947     7903    1   B_SAVE_LOG: PROC ALTRET ;
     1948     7904
     1949     7905        /* Code */
     1950     7906
     1951     7907    2      LOG_B.COUNT = 0 ;
     1952     7908
     1953     7909    2      DUP.LOG.TYPE = %T$SF_BUILD ;
     1954     7910    2      DUP.LOG.CATALOG = REVISION_B.VERSION ;
     1955     7911    2      DUP.LOG.DECK = ' ' ;
     1956     7912    2      DUP.HOLD_AREA = DUP.IFAD.FID ;
     1957     7913    2      CALL TOU$DU_UPDATE_LOG ALTRET (ERROR) ;
     1958     7914
     1959     7915    2      IF TEMP_INPUT_EXISTS
     1960     7916    3      THEN DO ;
     1961     7917    3              DUP.LOG.TYPE = %T$SF_COPY ;
     1962     7918    3              DUP.LOG.CATALOG = CATALOG_SEARCH_KEY.DATA ;
     1963     7919    3              DUP.LOG.DECK = ' ' ;
     1964     7920    3              DUP.HOLD_AREA = DUP.DF.FID ;
     1965     7921    3              CALL TOU$DU_UPDATE_LOG ALTRET (ERROR) ;
     1966     7922    3           END /* THEN */ ;
     1967     7923    2      ELSE /* no DIPPER catalog copied from a previous build */ ;
     1968     7924
     1969     7925    2      CALL TOU$DFU_DF_WR_LOG ALTRET (ERROR) ;
     1970     7926    2      RETURN ;
     1971     7927
     1972     7928    2   ERROR:
     1973     7929    2      ALTRETURN ;
     1974     7930
     1975     7931    2   END B_SAVE_LOG ;
     1976     7932        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:76   
     1977     7933        /*I* NAME:         B_SAVE_REVISION
     1978     7934             AUTHOR:       Scott S. Sheppard
     1979     7935             PURPOSE:      Saves the revision of the IFAD tape
     1980     7936             INTERFACE:    TOU$DFU_DF_WR_REVISION
     1981     7937                           TOU$DFU_DF_CHECK_FOR_KEY
     1982     7938             PARAMETERS:   None passed.
     1983     7939             DATA:         OBJECT_KEY.DATA - output
     1984     7940                           REVISION_B.MAINTENANCE.CONTRACT - output
     1985     7941             DESCRIPTION:  This  procedure saves the  version of the IFAD
     1986     7942                           tape  used to build  the deckfile. The version
     1987     7943                           was  obtained  when  the  GIFM object deck was
     1988     7944                           encountered.   It  is  found  as  a  patch  to
     1989     7945                           location 2 of the GIFM module.
     1990     7946
     1991     7947                           This procedure also determines if the customer
     1992     7948                           has a maintenance contract by checking for the
     1993     7949                           existence   of  the  POLTS  Subexecutive.  The
     1994     7950                           current  means of  excluding customers (who do
     1995     7951                           not have a  maintenance contract) from running
     1996     7952                           T&D's is to omit the POLTS Subexecutive, CPLT,
     1997     7953                           from  their  IFAD  tapes.   The  IFAD revision
     1998     7954                           record has a mask field initialized to 'CP-6'.
     1999     7955                           For customers with no contract, it will remain
     2000     7956                           that way.  This way if the  revision record is
     2001     7957                           dumped,  things  look  normal.   For customers
     2002     7958                           with a maintenance  agreement, one of the bits
     2003     7959                           of the  '-' character will be  set from off to
     2004     7960                           on.
     2005     7961
     2006     7962                           For the  LADC site   machines, the maintenance
     2007     7963                           contract  is assumed so  developers  can build
     2008     7964                           small test deckfiles and still use TOLTS.
     2009     7965        */
     2010     7966        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:77   
     2011     7967    1   B_SAVE_REVISION: PROC ALTRET ;
     2012     7968
     2013     7969    2      DCL 1 B_VERSION SYMREF,
     2014     7970    2            2 LGTH    UBIN BYTE CALIGNED,
     2015     7971    2            2 TEXT    CHAR (11) CALIGNED ;
     2016     7972
     2017     7973        /* Code */
     2018     7974
     2019     7975    2      IF DUP.SITE_ID = %LADC_SITE
     2020     7976    2      THEN REVISION_B.MAINTENANCE.CONTRACT = %TRUE ;
     2021     7977    3      ELSE DO ;
     2022     7978    3              OBJECT_KEY.DATA = 'PLT.POLTCM' ;
     2023     7979    3              CALL TOU$DFU_DF_CHECK_FOR_KEY WHENRETURN
     2024     7980    4                   DO ;
     2025     7981    4                      REVISION_B.MAINTENANCE.CONTRACT = %TRUE ;
     2026     7982    4                   END /* WHENRETURN */ ;
     2027     7983    3              WHENALTRETURN
     2028     7984    4                   DO ;
     2029     7985    4                      REVISION_B.MAINTENANCE.CONTRACT = %FALSE ;
     2030     7986    4                   END /* WHENALTRETURN */ ;
     2031     7987    3           END /* ELSE */ ;
     2032     7988    2      REVISION_B.DEER = SUBSTR (B_VERSION.TEXT, 0, B_VERSION.LGTH) ;
     2033     7989    2      CALL TOU$DFU_DF_WR_REVISION ALTRET (ERROR) ;
     2034     7990    2      RETURN ;
     2035     7991
     2036     7992    2   ERROR:
     2037     7993    2      ALTRETURN ;
     2038     7994
     2039     7995    2   END B_SAVE_REVISION ;
     2040     7996        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:78   
     2041     7997        /*I*  NAME:        B_ERR_MSG
     2042     7998              AUTHOR:      Scott S. Sheppard
     2043     7999              PURPOSE:     Build Error Message Reporter
     2044     8000              INTERFACE:   TOU$DU_USER_WRITE
     2045     8001              INPUT:       ERR_CODE - error message code
     2046     8002              OUTPUT:      DUP.MSG_CODE - set to appropriate message code
     2047     8003              DESCRIPTION: This procedure sets the error occurred flag to
     2048     8004                           true and reports the error.
     2049     8005        */
     2050     8006
     2051     8007    1   B_ERR_MSG: PROC (ERR_CODE) ;
     2052     8008
     2053     8009    2      DCL ERR_CODE                   UBIN WORD ALIGNED ;
     2054     8010
     2055     8011        /* Code */
     2056     8012
     2057     8013    2      DUP.MSG_CODE = ERR_CODE ;
     2058     8014    2      CALL TOU$DU_USER_WRITE ;
     2059     8015    2      RETURN ;
     2060     8016
     2061     8017    2   END B_ERR_MSG ;
     2062     8018    1   END TOU$BUILD ;

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:79   
--  Include file information  --

   XU_MACRO_C.:E05TOU  is referenced.
   TO_PERR_C.:E05TOU  is referenced.
   TOU_RQSTS_E.:E05TOU  is referenced.
   TOU_DEER_M.:E05TOU  is referenced.
      No diagnostics issued in procedure TOU$BUILD.

   Procedure TOU$BUILD requires 1769 words for executable code.
   Procedure TOU$BUILD requires 34 words of local(AUTO) storage.

    No errors detected in file TOU$BUILD.:E05TSI    .

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:80   

 Object Unit name= TOU$BUILD                                  File name= TOU$BUILD.:E05TOU
 UTS= JUL 30 '97 06:39:06.68 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none    43     53  TOU$BUILD
    1  RoData even  UTS     74    112  TOU$BUILD
    2   Proc  even  none  1769   3351  TOU$BUILD
    3  RoData even  none    38     46  TOU$BUILD

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        0  TOU$BUILD
     2     30          yes     yes      Std        0  TOU$B_SHOW_DCBS
     2     35          yes     yes      Std        0  TOU$B_GET_CATALOG
     2     42          yes     yes      Std        0  TOU$B_SET_CATALOG_KEY
     2     47          yes     yes      Std        0  TOU$B_SET_OBJECT_KEY
     2     54          yes     yes      Std        0  TOU$B_CHECK_CORRECT_FILE
     2     61          yes     yes      Std        0  TOU$B_PRINT_DECK_LINE
     2     66          yes     yes      Std        0  TOU$B_CHECK_FOR_CATALOG

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  DKEND                              0     44  BCD#
    0     45  BIN#                               0     46  CATALOG_KEY_SET
    0     50  CUR#                               0     51  DECK_SAVED
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:81   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       0 TOU$DU_USER_WRITE
 yes     yes           Std       0 TOU$DU_SET_IFAD_FID
 yes     yes           Std       0 TOU$DU_SET_DF_FID
 yes     yes           Std       0 TOU$DU_OPEN_DF
 yes     yes           Std       0 TOU$DU_CLOSE_DF
 yes     yes           Std       0 TOU$DFU_DF_RD_MASTER_CONTROL
 yes     yes           Std       0 TOU$DFU_DF_RD_MASTER_ENTRY
 yes     yes           Std       0 TOU$DFU_OPEN_TEMP
 yes     yes           Std       0 TOU$DFU_DF_RD_CATALOG_ENTRY
 yes     yes           Std       0 TOU$DFU_DF_RD_BCD_CARDS
 yes     yes           Std       0 TOU$DFU_DF_RD_CATALOG_CONTROL
 yes     yes           Std       0 TOU$DFU_DF_RD_SUBCATALOG
 yes     yes           Std       0 TOU$DFU_TF_WR_CATALOG_ENTRY
 yes     yes           Std       0 TOU$DFU_TF_WR_BCD_CARDS
 yes     yes           Std       0 TOU$DFU_DF_RD_OBJECT
 yes     yes           Std       0 TOU$DFU_TF_WR_OBJECT
 yes     yes           Std       0 TOU$DFU_DF_RD_FILE
 yes     yes           Std       0 TOU$DFU_TF_WR_FILE
 yes     yes           Std       0 TOU$DFU_CLOSE_TEMP
 yes     yes           Std       0 TOU$DU_OPEN_IFAD
 yes     yes           Std       0 TOU$DU_GET_SITE
 yes     yes           Std       0 TOU$CLEAR_IFAD
 yes     yes           Std       0 TOU$DU_CLOSE_IFAD
 yes     yes           Std       0 TOU$DU_NEXT_IFAD
 yes     yes           Std       0 TOU$GET_CP6_OBJECT
 yes     yes           Std       0 TOU$GET_BINARY_CARDS
 yes     yes           Std       0 TOU$GET_BCD_CARDS
 yes     yes           Std       4 TOU$CHECKSUM
 yes     yes           Std       4 TOU$REFORM_DECK_CHECKSUM
         yes           Std       3 TOT$BCD_ASCII
 yes     yes           Std       0 TOU$DFU_DF_CHECK_ALREADY_SAVED
 yes     yes           Std       0 TOU$DFU_DF_WR_OBJECT_REFLIST
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:82   
 yes     yes           Std       0 TOU$DFU_DF_RD_OBJECT_REFLIST
 yes     yes           Std       0 TOU$DFU_DF_WR_OBJECT
 yes     yes           Std       0 TOU$DFU_DF_WR_BCD_CARDS
 yes     yes           Std       0 TOU$DFU_DF_WR_BINARY
 yes     yes           Std       0 TOU$DFU_DF_WR_FILE
 yes     yes           Std       0 TOU$DU_PRINTER_WRITE
 yes     yes           Std       0 TOU$DU_PRINTER_OVERWRITE
 yes     yes           Std       0 TOU$DFU_DF_WR_CATALOG_ENTRY
         yes           Std       2 TOU$REPLACE
 yes     yes           Std       0 TOU$DFU_DF_WR_SUBCATALOG
 yes     yes           Std       0 TOU$DFU_DF_WR_CATALOG_CONTROL
 yes     yes           Std       0 TOU$DFU_DF_WR_MASTER_ENTRY
 yes     yes           Std       0 TOU$DFU_TF_RD_CATALOG_ENTRY
 yes     yes           Std       0 TOU$DFU_TF_RD_OBJECT
 yes     yes           Std       0 TOU$DFU_TF_RD_BCD_CARDS
 yes     yes           Std       0 TOU$DFU_TF_RD_FILE
 yes     yes           Std       0 TOU$DFU_DF_WR_MASTER_CONTROL
 yes     yes           Std       0 TOU$DFU_DF_WR_LAST_DECK#
 yes     yes           Std       0 TOU$DU_UPDATE_LOG
 yes     yes           Std       0 TOU$DFU_DF_WR_LOG
 yes     yes           Std       0 TOU$DFU_DF_CHECK_FOR_KEY
 yes     yes           Std       0 TOU$DFU_DF_WR_REVISION
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:83   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     DUP                                   BCD_CARD                              BINARY_CARD
     BCD_KEY                               BINARY_KEY                            CATALOG_DATA
     CATALOG_ENTRY_KEY                     CATALOG_KEY                           CATALOG_SEARCH_KEY
     ID                                    LAST                                  MASTER_DATA
     MASTER_ENTRY_KEY                      OBJECT                                OBJECT_KEY
     OBJECT_REFLIST_KEY                    OBJECT_REFLIST_DATA                   REVISION_B
     SUBCATALOG_DATA                       SUBCATALOG_KEY                        FILE_EOF
     B_VERSION                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:84   


        1        1        /*M* TOU$BUILD     DEckfile Editor Routine BUILD Function */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P*  NAME:        TOU$BUILD
       12       12              AUTHORS:     David M. Augustine
       13       13                           Scott S. Sheppard
       14       14              PURPOSE:     DEckfile Editor Routine BUILD function
       15       15              DESCRIPTION: This program is called when the BUILD function
       16       16                           is invoked by the CP-6 deckfile editor driver.
       17       17                           This program builds the deckfile from the IFAD
       18       18                           input source (tape or disk file).
       19       19              REFERENCE:   CP-6 Release C01A01
       20       20              LAST UPDATE: 02/26/85
       21       21        */
       22       22        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:85   
       23       23        /*F*  NAME:        TOU$BUILD
       24       24              DESCRIPTION: Procedure Nesting Hierarchy
       25       25
       26       26              TOU$BUILD: procedure ALTRET
       27       27              TOU$B_SHOW_DCBS: entry ALTRET
       28       28              TOU$B_GET_CATALOG: entry ALTRET
       29       29              TOU$B_SET_CATALOG_KEY: entry ALTRET
       30       30              TOU$B_SET_OBJECT_KEY: entry ALTRET
       31       31              TOU$B_CHECK_CORRECT_FILE: entry ALTRET
       32       32              TOU$B_PRINT_DECK_LINE: entry ALTRET
       33       33              TOU$B_CHECK_FOR_CATALOG: entry ALTRET
       34       34
       35       35                 B_INIT_DUP: procedure
       36       36                 B_COMMAND_SETUP: procedure ALTRET
       37       37                 B_SHOW_DCBS: procedure
       38       38                 B_CLEAR_DF: procedure
       39       39                 B_COPY_NIO_CATALOG: procedure ALTRET
       40       40                 B_CHECK_FOR_CATALOG: procedure ALTRET
       41       41                 B_STORE_NIO_CATALOG: procedure ALTRET
       42       42                 B_BUILD_DECKFILE: procedure ALTRET
       43       43                 B_BUILD_FROM_VOLUMES: procedure ALTRET
       44       44                 B_PROCESS_IFAD: procedure ALTRET
       45       45                 B_GET_CATALOG: procedure
       46       46                 B_SET_CATALOG_KEY: procedure ALTRET
       47       47                    B_SET_FIRMWARE_CATALOG: procedure ALTRET
       48       48                    B_SET_GECALL_CATALOG: procedure ALTRET
       49       49                 B_SET_OBJECT_KEY: procedure ALTRET
       50       50                    B_SET_GECALL_KEY: procedure
       51       51                       B_SQUISH_GIFM_DECK: procedure
       52       52                    B_SET_MPC_KEY: procedure
       53       53                       B_SET_ITR_KEY: procedure
       54       54                       B_SET_FIRMWARE_KEY: procedure
       55       55                       B_SQUISH_FIRMWARE_DECK: procedure
       56       56                       B_FIX_CATALOG_KEY: procedure
       57       57                       B_SET_MDR_KEY: procedure
       58       58                    B_SET_DIPPER_KEY: procedure
       59       59                 B_CHECK_CORRECT_FILE: procedure ALTRET
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:86   
       60       60                 B_SAVE_OBJECT_DECK: procedure (D) ALTRET
       61       61                 B_PRINT_DECK_LINE: procedure
       62       62                 B_SAVE_CATALOG_ENTRY: procedure ALTRET
       63       63                 B_SAVE_SUBCATALOG: procedure (I, N) ALTRET
       64       64                 B_SAVE_CATALOG: procedure (C) ALTRET
       65       65                 B_SAVE_MASTER_ENTRY: procedure ALTRET
       66       66                 B_SAVE_NIO_CATALOG: procedure ALTRET
       67       67                    B_FETCH_OBJECT_DECK: procedure ALTRET
       68       68                 B_SAVE_MASTER_CATALOG: procedure
       69       69                 B_SAVE_LAST_DECK#: procedure
       70       70                 B_SAVE_LOG: procedure ALTRET
       71       71                 B_SAVE_REVISION: procedure ALTRET
       72       72                 B_ERR_MSG: procedure (ERR_CODE)
       73       73        */
       74       74
       75       75        TOU$BUILD: PROC ALTRET ;

     75  2 000000   000000 700200 xent  TOU$BUILD    TSX0  ! X66_AUTO_0
         2 000001   000042 000000                    ZERO    34,0

       76       76
       77       77        /* Include Files */
       78       78
       79       79           %INCLUDE TOU_DEER_M ;
       80     1490           %INCLUDE TOU_RQSTS_E ;
       81     1565           %INCLUDE TO_PERR_C ;
       82     2150           %INCLUDE XU_MACRO_C ;
       83     5256           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:87   
       84     5257        /* Macros */
       85     5258
       86     5259           %DUP (STCLASS = SYMREF) ;
       87     5402           %BCD_CARD (STCLASS = SYMREF) ;
       88     5422           %BINARY_CARD (STCLASS = SYMREF) ;
       89     5449           %BCD_KEY (STCLASS = SYMREF) ;
       90     5463           %BINARY_B (STCLASS = "BASED (DUP.BINARY_V.PTR$)") ;
       91     5477           %BCD_B (STCLASS = "BASED (DUP.BCD_V.PTR$)") ;
       92     5489           %BINARY_KEY (STCLASS = SYMREF) ;
       93     5503           %DKEND (STCLASS = "STATIC SYMDEF") ;
       94     5527           %CATALOG_DATA (STCLASS = SYMREF) ;
       95     5541           %CATALOG_DATA (NAME = COPIED_CATALOG) ;
       96     5555           %CATALOG_ENTRY_KEY (STCLASS = SYMREF) ;
       97     5569           %CATALOG_KEY (STCLASS = SYMREF) ;
       98     5583           %CATALOG_SEARCH_KEY (STCLASS = SYMREF) ;
       99     5595           %ID (STCLASS = SYMREF) ;
      100     5612           %LAST (STCLASS = SYMREF) ;
      101     5625           %LOG_B (STCLASS = "BASED (DUP.LOG_V.PTR$)") ;
      102     5651           %MCA_B (STCLASS = "BASED (DUP.BINARY_V.PTR$)") ;
      103     5721           %MASTER_DATA (STCLASS = SYMREF) ;
      104     5735           %MASTER_ENTRY_KEY (STCLASS = SYMREF) ;
      105     5749           %MASTER_KEY (STCLASS = CONSTANT) ;
      106     5762           %OBJECT (STCLASS = SYMREF) ;
      107     5825           %OBJECT_KEY (STCLASS = SYMREF) ;
      108     5838           %OBJECT_REFLIST_KEY (STCLASS = SYMREF) ;
      109     5852           %OBJECT_REFLIST_DATA (STCLASS = SYMREF) ;
      110     5867           %RECORD (STCLASS = SYMREF) ;
      111     5894           %REVISION_B (STCLASS = SYMREF) ;
      112     5915           %SUBCATALOG_DATA (STCLASS = SYMREF) ;
      113     5928           %SUBCATALOG_DATA (NAME = COPIED_SUB) ;
      114     5941           %SUBCATALOG_KEY (STCLASS = SYMREF) ;
      115     5955           %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:88   
      116     5956        /* Variables */
      117     5957
      118     5958    1      DCL BCD#                       UBIN WORD STATIC SYMDEF ALIGNED  INIT (0) ;
      119     5959    1      DCL BIN#                       UBIN WORD STATIC SYMDEF ALIGNED  INIT (0) ;
      120     5960    1      DCL CATALOG_KEY_SET            BIT (1)   STATIC SYMDEF CALIGNED INIT ('0'B) ;
      121     5961    1      DCL TEMP_INPUT_EXISTS          BIT (1) CALIGNED ;
      122     5962    1      DCL CATALOG_TYPE               CHAR (1) STATIC CALIGNED ;
      123     5963    1      DCL CUR#                       UBIN WORD STATIC SYMDEF ALIGNED  INIT (0);
      124     5964    1      DCL DECK_SAVED                 BIT (1)   STATIC SYMDEF CALIGNED INIT ('0'B) ;
      125     5965    1      DCL FILE_EOF                   UBIN WORD SYMREF ALIGNED ;
      126     5966           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:89   
      127     5967        /* External Entry Points */
      128     5968
      129     5969    1      DCL TOU$CHECKSUM                    ENTRY (4) ALTRET ;
      130     5970    1      DCL TOU$REFORM_DECK_CHECKSUM        ENTRY (4) ALTRET ;
      131     5971    1      DCL TOU$CLEAR_IFAD                  ENTRY ALTRET ;
      132     5972    1      DCL TOU$GET_CP6_OBJECT              ENTRY ALTRET ;
      133     5973    1      DCL TOU$GET_BINARY_CARDS            ENTRY ALTRET ;
      134     5974    1      DCL TOU$GET_BCD_CARDS               ENTRY ALTRET ;
      135     5975    1      DCL TOU$REPLACE                     ENTRY (2);
      136     5976
      137     5977    1      DCL TOU$DU_SET_IFAD_FID             ENTRY ALTRET ;
      138     5978    1      DCL TOU$DU_OPEN_IFAD                ENTRY ALTRET ;
      139     5979    1      DCL TOU$DU_NEXT_IFAD                ENTRY ALTRET ;
      140     5980    1      DCL TOU$DU_CLOSE_IFAD               ENTRY ALTRET ;
      141     5981    1      DCL TOU$DU_SET_DF_FID               ENTRY ALTRET ;
      142     5982    1      DCL TOU$DU_OPEN_DF                  ENTRY ALTRET ;
      143     5983    1      DCL TOU$DU_CLOSE_DF                 ENTRY ALTRET ;
      144     5984
      145     5985    1      DCL TOU$DU_USER_WRITE               ENTRY ALTRET ;
      146     5986    1      DCL TOU$DU_PRINTER_WRITE            ENTRY ALTRET ;
      147     5987    1      DCL TOU$DU_PRINTER_OVERWRITE        ENTRY ALTRET ;
      148     5988    1      DCL TOU$DU_UPDATE_LOG               ENTRY ALTRET ;
      149     5989    1      DCL TOU$DU_GET_SITE                 ENTRY ALTRET ;
      150     5990
      151     5991    1      DCL TOT$BCD_ASCII                   ENTRY (3) ;
      152     5992
      153     5993    1      DCL TOU$DFU_OPEN_TEMP               ENTRY ALTRET ;
      154     5994    1      DCL TOU$DFU_CLOSE_TEMP              ENTRY ALTRET ;
      155     5995           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:90   
      156     5996        /* External Entry Points */
      157     5997
      158     5998    1      DCL TOU$DFU_DF_CHECK_ALREADY_SAVED  ENTRY ALTRET ;
      159     5999    1      DCL TOU$DFU_DF_CHECK_FOR_KEY        ENTRY ALTRET ;
      160     6000    1      DCL TOU$DFU_DF_WR_MASTER_CONTROL    ENTRY ALTRET ;
      161     6001    1      DCL TOU$DFU_DF_WR_MASTER_ENTRY      ENTRY ALTRET ;
      162     6002    1      DCL TOU$DFU_DF_WR_CATALOG_CONTROL   ENTRY ALTRET ;
      163     6003    1      DCL TOU$DFU_DF_WR_SUBCATALOG        ENTRY ALTRET ;
      164     6004    1      DCL TOU$DFU_DF_WR_CATALOG_ENTRY     ENTRY ALTRET ;
      165     6005    1      DCL TOU$DFU_DF_WR_OBJECT            ENTRY ALTRET ;
      166     6006    1      DCL TOU$DFU_DF_WR_BINARY            ENTRY ALTRET ;
      167     6007    1      DCL TOU$DFU_DF_WR_FILE              ENTRY ALTRET ;
      168     6008    1      DCL TOU$DFU_DF_WR_BCD_CARDS         ENTRY ALTRET ;
      169     6009    1      DCL TOU$DFU_DF_WR_OBJECT_REFLIST    ENTRY ALTRET ;
      170     6010    1      DCL TOU$DFU_DF_WR_LAST_DECK#        ENTRY ALTRET ;
      171     6011    1      DCL TOU$DFU_DF_WR_LOG               ENTRY ALTRET ;
      172     6012    1      DCL TOU$DFU_DF_WR_REVISION          ENTRY ALTRET ;
      173     6013
      174     6014    1      DCL TOU$DFU_DF_RD_MASTER_CONTROL    ENTRY ALTRET ;
      175     6015    1      DCL TOU$DFU_DF_RD_MASTER_ENTRY      ENTRY ALTRET ;
      176     6016    1      DCL TOU$DFU_DF_RD_CATALOG_CONTROL   ENTRY ALTRET ;
      177     6017    1      DCL TOU$DFU_DF_RD_SUBCATALOG        ENTRY ALTRET ;
      178     6018    1      DCL TOU$DFU_DF_RD_CATALOG_ENTRY     ENTRY ALTRET ;
      179     6019    1      DCL TOU$DFU_DF_RD_OBJECT            ENTRY ALTRET ;
      180     6020    1      DCL TOU$DFU_DF_RD_FILE              ENTRY ALTRET ;
      181     6021    1      DCL TOU$DFU_DF_RD_BCD_CARDS         ENTRY ALTRET ;
      182     6022    1      DCL TOU$DFU_DF_RD_OBJECT_REFLIST    ENTRY ALTRET ;
      183     6023           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:91   
      184     6024        /* External Entry Points */
      185     6025
      186     6026    1      DCL TOU$DFU_TF_WR_CATALOG_ENTRY     ENTRY ALTRET ;
      187     6027    1      DCL TOU$DFU_TF_WR_OBJECT            ENTRY ALTRET ;
      188     6028    1      DCL TOU$DFU_TF_WR_FILE              ENTRY ALTRET ;
      189     6029    1      DCL TOU$DFU_TF_WR_BCD_CARDS         ENTRY ALTRET ;
      190     6030
      191     6031    1      DCL TOU$DFU_TF_RD_CATALOG_ENTRY     ENTRY ALTRET ;
      192     6032    1      DCL TOU$DFU_TF_RD_OBJECT            ENTRY ALTRET ;
      193     6033    1      DCL TOU$DFU_TF_RD_FILE              ENTRY ALTRET ;
      194     6034    1      DCL TOU$DFU_TF_RD_BCD_CARDS         ENTRY ALTRET ;
      195     6035           %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:92   
      196     6036        /* ********************
      197     6037           ********************
      198     6038           **  Main Program  **
      199     6039           ********************
      200     6040           ******************** */
      201     6041
      202     6042    1      CALL B_INIT_DUP ;

   6042  2 000002   000074 701000 2                  TSX1    B_INIT_DUP
         2 000003   000000 011000                    NOP     0

      203     6043    1      CALL B_COMMAND_SETUP ALTRET (ERROR_RETURN) ;

   6043  2 000004   000112 701000 2                  TSX1    B_COMMAND_SETUP
         2 000005   000022 702000 2                  TSX2    ERROR_RETURN

      204     6044    1      CALL B_SHOW_DCBS ;

   6044  2 000006   000226 701000 2                  TSX1    B_SHOW_DCBS
         2 000007   000000 011000                    NOP     0

      205     6045
      206     6046    1      CALL B_COPY_NIO_CATALOG ALTRET (ERROR_RETURN) ;

   6046  2 000010   000267 701000 2                  TSX1    B_COPY_NIO_CATALOG
         2 000011   000022 702000 2                  TSX2    ERROR_RETURN

      207     6047    1      CALL B_BUILD_DECKFILE ALTRET (ERROR_RETURN) ;

   6047  2 000012   000545 701000 2                  TSX1    B_BUILD_DECKFILE
         2 000013   000022 702000 2                  TSX2    ERROR_RETURN

      208     6048
      209     6049        /* NORMAL_RETURN: */
      210     6050    1      DUP.MSG_CODE = %T$B_SUCCESS ;

   6050  2 000014   000024 235007                    LDA     20,DL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:93   
         2 000015   000020 755000 xsym               STA     DUP+16

      211     6051    1      CALL TOU$DU_USER_WRITE ;

   6051  2 000016   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000017   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 000020   000000 011000                    NOP     0

      212     6052    1      RETURN ;

   6052  2 000021   000000 702200 xent               TSX2  ! X66_ARET

      213     6053
      214     6054    1   ERROR_RETURN:
      215     6055    1      DUP.MSG_CODE = %T$B_FAILURE ;

   6055  2 000022   000025 235007       ERROR_RETURN LDA     21,DL
         2 000023   000020 755000 xsym               STA     DUP+16

      216     6056    1      CALL TOU$DU_USER_WRITE ;

   6056  2 000024   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000025   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 000026   000000 011000                    NOP     0

      217     6057    1      RETURN ;

   6057  2 000027   000000 702200 xent               TSX2  ! X66_ARET

      218     6058
      219     6059        /* ********************
      220     6060           ********************
      221     6061           **  End Of  Main  **
      222     6062           ********************
      223     6063           ******************** */
      224     6064        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:94   
      225     6065        /*D*  NAME:        TOU$B_SHOW_DCBS
      226     6066              ENTRY:
      227     6067              AUTHOR:      Scott S. Sheppard
      228     6068              INTERFACE:   B_SHOW_DCBS
      229     6069              DESCRIPTION: This entry point calls procedure B_SHOW_DCBS so
      230     6070                           other  modules that access  both  IFAD  and the
      231     6071                           deckfile can do likewise.
      232     6072        */
      233     6073
      234     6074    1   TOU$B_SHOW_DCBS: ENTRY ALTRET ;

   6074  2 000030   000000 700200 xent  TOU$B_SHOW_* TSX0  ! X66_AUTO_0
         2 000031   000042 000000                    ZERO    34,0

      235     6075
      236     6076    1      CALL B_SHOW_DCBS ;

   6076  2 000032   000226 701000 2                  TSX1    B_SHOW_DCBS
         2 000033   000000 011000                    NOP     0

      237     6077    1      RETURN ;

   6077  2 000034   000000 702200 xent               TSX2  ! X66_ARET

      238     6078
      239     6079        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:95   
      240     6080        /*D*  NAME:        TOU$B_GET_CATALOG
      241     6081              ENTRY:
      242     6082              AUTHOR:      Scott S. Sheppard
      243     6083              INTERFACE:   B_GET_CATALOG
      244     6084              DESCRIPTION: This entry point calls procedure B_GET_CATALOG so
      245     6085                           TOU$NEWCAT can get the next catalog to add.
      246     6086        */
      247     6087
      248     6088    1   TOU$B_GET_CATALOG: ENTRY ALTRET ;

   6088  2 000035   000000 700200 xent  TOU$B_GET_C* TSX0  ! X66_AUTO_0
         2 000036   000042 000000                    ZERO    34,0

      249     6089
      250     6090    1      CALL B_GET_CATALOG ;

   6090  2 000037   000756 701000 2                  TSX1    B_GET_CATALOG
         2 000040   000000 011000                    NOP     0

      251     6091    1      RETURN ;

   6091  2 000041   000000 702200 xent               TSX2  ! X66_ARET

      252     6092
      253     6093        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:96   
      254     6094        /*D*  NAME:        TOU$B_SET_CATALOG_KEY
      255     6095              ENTRY:
      256     6096              AUTHOR:      Scott S. Sheppard
      257     6097              INTERFACE:   B_SET_CATALOG_KEY
      258     6098              DESCRIPTION: This entry point calls procedure B_SET_CATALOG_KEY so
      259     6099                           other modules can set a catalog key from $OBJECT
      260     6100        */
      261     6101
      262     6102    1   TOU$B_SET_CATALOG_KEY: ENTRY ALTRET ;

   6102  2 000042   000000 700200 xent  TOU$B_SET_C* TSX0  ! X66_AUTO_0
         2 000043   000042 000000                    ZERO    34,0

      263     6103
      264     6104    1      CALL B_SET_CATALOG_KEY ALTRET (TOU$B_ALTRETURN) ;

   6104  2 000044   001000 701000 2                  TSX1    B_SET_CATALOG_KEY
         2 000045   000073 702000 2                  TSX2    TOU$B_ALTRETURN

      265     6105    1      RETURN ;

   6105  2 000046   000000 702200 xent               TSX2  ! X66_ARET

      266     6106
      267     6107        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:97   
      268     6108        /*D*  NAME:        TOU$B_SET_OBJECT_KEY
      269     6109              ENTRY:
      270     6110              AUTHOR:      Scott S. Sheppard
      271     6111              INTERFACE:   B_SET_OBJECT_KEY
      272     6112              DESCRIPTION: This entry point calls procedure B_SET_OBJECT_KEY
      273     6113                           so other modules can set object keys.
      274     6114        */
      275     6115
      276     6116    1   TOU$B_SET_OBJECT_KEY: ENTRY ALTRET ;

   6116  2 000047   000000 700200 xent  TOU$B_SET_O* TSX0  ! X66_AUTO_0
         2 000050   000042 000000                    ZERO    34,0

      277     6117
      278     6118    1      CALL B_SET_OBJECT_KEY ALTRET (TOU$B_ALTRETURN) ;

   6118  2 000051   001415 701000 2                  TSX1    B_SET_OBJECT_KEY
         2 000052   000073 702000 2                  TSX2    TOU$B_ALTRETURN

      279     6119    1      RETURN ;

   6119  2 000053   000000 702200 xent               TSX2  ! X66_ARET

      280     6120
      281     6121        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:98   
      282     6122        /*D*  NAME:        TOU$B_CHECK_CORRECT_FILE
      283     6123              ENTRY:
      284     6124              AUTHOR:      Scott S. Sheppard
      285     6125              INTERFACE:   B_CHECK_CORRECT_FILE
      286     6126              DESCRIPTION: This entry point calls procedure B_CHECK_CORRECT_FILE
      287     6127                           so other modules can verify object decks.
      288     6128        */
      289     6129
      290     6130    1   TOU$B_CHECK_CORRECT_FILE: ENTRY ALTRET ;

   6130  2 000054   000000 700200 xent  TOU$B_CHECK* TSX0  ! X66_AUTO_0
         2 000055   000042 000000                    ZERO    34,0

      291     6131
      292     6132    1      CALL B_CHECK_CORRECT_FILE ALTRET (TOU$B_ALTRETURN) ;

   6132  2 000056   002257 701000 2                  TSX1    B_CHECK_CORRECT_FILE
         2 000057   000073 702000 2                  TSX2    TOU$B_ALTRETURN

      293     6133    1      RETURN ;

   6133  2 000060   000000 702200 xent               TSX2  ! X66_ARET

      294     6134
      295     6135        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:99   
      296     6136        /*D*  NAME:        TOU$B_PRINT_DECK_LINE
      297     6137              ENTRY:
      298     6138              AUTHOR:      Scott S. Sheppard
      299     6139              INTERFACE:   B_PRINT_DECK_LINE
      300     6140              DESCRIPTION: This entry point calls procedure B_PRINT_DECK_LINE
      301     6141                           so other modules can list object decks.
      302     6142        */
      303     6143
      304     6144    1   TOU$B_PRINT_DECK_LINE: ENTRY ALTRET ;

   6144  2 000061   000000 700200 xent  TOU$B_PRINT* TSX0  ! X66_AUTO_0
         2 000062   000042 000000                    ZERO    34,0

      305     6145
      306     6146    1      CALL B_PRINT_DECK_LINE ALTRET (TOU$B_ALTRETURN) ;

   6146  2 000063   002513 701000 2                  TSX1    B_PRINT_DECK_LINE
         2 000064   000073 702000 2                  TSX2    TOU$B_ALTRETURN

      307     6147    1      RETURN ;

   6147  2 000065   000000 702200 xent               TSX2  ! X66_ARET

      308     6148
      309     6149        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:100  
      310     6150        /*D*  NAME:        TOU$B_CHECK_FOR_CATALOG
      311     6151              ENTRY:
      312     6152              AUTHOR:      Scott S. Sheppard
      313     6153              INTERFACE:   B_CHECK_FOR_CATALOG
      314     6154              DESCRIPTION: This entry point calls procedure B_CHECK_FOR_CATALOG
      315     6155                           so other modules can search for catalogs.
      316     6156        */
      317     6157
      318     6158    1   TOU$B_CHECK_FOR_CATALOG: ENTRY ALTRET ;

   6158  2 000066   000000 700200 xent  TOU$B_CHECK* TSX0  ! X66_AUTO_0
         2 000067   000042 000000                    ZERO    34,0

      319     6159
      320     6160    1      CALL B_CHECK_FOR_CATALOG ALTRET (TOU$B_ALTRETURN) ;

   6160  2 000070   000326 701000 2                  TSX1    B_CHECK_FOR_CATALOG
         2 000071   000073 702000 2                  TSX2    TOU$B_ALTRETURN

      321     6161    1      RETURN ;

   6161  2 000072   000000 702200 xent               TSX2  ! X66_ARET

      322     6162
      323     6163        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:101  
      324     6164        /*D*  NAME:        TOU$B_ALTRETURN
      325     6165              LABEL:
      326     6166              DESCRIPTION: This label is the alternate return label for all
      327     6167                           of the entry points into TOU$BUILD. Once control
      328     6168                           has  transferred  to  this  label,  the   module
      329     6169                           altreturns to the calling procedure.
      330     6170        */
      331     6171
      332     6172    1   TOU$B_ALTRETURN:
      333     6173    1      ALTRETURN ;

   6173  2 000073   000000 702200 xent  TOU$B_ALTRE* TSX2  ! X66_AALT

      334     6174
      335     6175        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:102  
      336     6176        /*I*  NAME:        B_INIT_DUP
      337     6177              AUTHOR:      Scott S. Sheppard
      338     6178              PURPOSE:     Initilization
      339     6179              INTERFACE:   None called.
      340     6180              INPUT:       H$BUILD   - default header code for BUILD
      341     6181                           LINES_PER_PAGE - force new page write
      342     6182              OUTPUT:      DUP          - Deckfile Utility Parameter
      343     6183              DESCRIPTION: This procedure initializes variables to
      344     6184                           appropriate starting values.
      345     6185        */
      346     6186
      347     6187    1   B_INIT_DUP: PROC ;

   6187  2 000074   200004 741300       B_INIT_DUP   STX1  ! TEMP_INPUT_EXISTS+1,,AUTO

      348     6188
      349     6189        /* Code */
      350     6190
      351     6191    2      DUP.HDR_CODE = %H$BUILD ;

   6191  2 000075   001306 235007                    LDA     710,DL
         2 000076   000021 755000 xsym               STA     DUP+17

      352     6192    2      DUP.LINE_VFC = %SKIP_WRITE ;

   6192  2 000077   142000 236003                    LDQ     50176,DU
         2 000100   000026 756000 xsym               STQ     DUP+22

      353     6193    2      DUP.FORCE_NEW_PAGE = %TRUE ;

   6193  2 000101   400000 236003                    LDQ     -131072,DU
         2 000102   000056 756000 xsym               STQ     DUP+46

      354     6194    2      DUP.IFAD.ME_ALLOWED = %FALSE ;

   6194  2 000103   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 000104   000057 356000 xsym               ANSQ    DUP+47
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:103  

      355     6195    2      DUP.IFAD.ENTERED = %FALSE ;

   6195  2 000105   000000 236000 3                  LDQ     0
         2 000106   000057 356000 xsym               ANSQ    DUP+47

      356     6196    2      DUP.DF.ENTERED = %FALSE ;

   6196  2 000107   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 000110   000104 356000 xsym               ANSQ    DUP+68

      357     6197    2      RETURN ;

   6197  2 000111   000001 702211                    TSX2  ! 1,X1

      358     6198
      359     6199    2   END B_INIT_DUP ;
      360     6200        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:104  
      361     6201        /*I*  NAME:        B_COMMAND_SETUP
      362     6202              AUTHOR:      Scott S. Sheppard
      363     6203              PURPOSE:     Sets up BUILD Command
      364     6204              INTERFACE:   TOU$DU_SET_IFAD_FID
      365     6205                           TOU$DU_SET_DF_FID
      366     6206              INPUT:       DUP.CMD$ - pointer to the parse control block
      367     6207              OUTPUT:      DUP.DF.HOLD_AREA
      368     6208                           DUP.DF.HOLD_AREA_LGTH
      369     6209                           DUP.DF.NO_EXIST
      370     6210                           DUP.IFAD.ENTERED
      371     6211                           DUP.DF.ENTERED
      372     6212              DESCRIPTION: This procedure sets up the BUILD command from the
      373     6213                           information entered by the user.    DUP.CMD$ is a
      374     6214                           pointer to a   parse control block  that contains
      375     6215                           the tokens entered by the user.
      376     6216                           COMMAND FORMS:
      377     6217              Case 1:   BUILD
      378     6218              Case 2:   BUILD <IFAD fid>
      379     6219              Case 3:   BUILD ON <deckfile fid>
      380     6220                        BUILD OVER <deckfile fid>
      381     6221              Case 4:   BUILD <IFAD fid> ON <deckfile fid>
      382     6222                        BUILD <IFAD fid> OVER <deckfile fid>
      383     6223        */
      384     6224
      385     6225    1   B_COMMAND_SETUP: PROC ALTRET ;

   6225  2 000112   200004 741300       B_COMMAND_S* STX1  ! TEMP_INPUT_EXISTS+1,,AUTO

      386     6226
      387     6227    2      DCL OUTBLK#                    UBIN WORD ALIGNED ;
      388     6228    2      DCL OUTBLK$                    PTR ALIGNED ;
      389     6229           %PARSE$OUT (STCLASS = BASED) ;
      390     6274           %PARSE$SYM (STCLASS = BASED) ;
      391     6312           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:105  
      392     6313        /* Code */
      393     6314
      394     6315    3      DO OUTBLK# = 0 TO DUP.CMD$ -> OUT$BLK.NSUBLKS - 1 ;

   6315  2 000113   200005 450100                    STZ     OUTBLK#,,AUTO
         2 000114   000201 710000 2                  TRA     s:6333+3

      395     6316    3         OUTBLK$ = DUP.CMD$ -> OUT$BLK.SUBLK$(OUTBLK#) ;

   6316  2 000115   000017 470400 xsym               LDP0    DUP+15
         2 000116   200005 720100                    LXL0    OUTBLK#,,AUTO
         2 000117   000003 236110                    LDQ     3,X0,PR0
         2 000120   200006 756100                    STQ     OUTBLK$,,AUTO

      396     6317    4         DO CASE (OUTBLK$ -> OUT$BLK.CODE) ;

   6317  2 000121   200006 471500                    LDP1    OUTBLK$,,AUTO
         2 000122   100000 721100                    LXL1    0,,PR1
         2 000123   000005 101003                    CMPX1   5,DU
         2 000124   000126 602011 2                  TNC     s:6317+5,X1
         2 000125   000176 710000 2                  TRA     s:6333
         2 000126   000176 710000 2                  TRA     s:6333
         2 000127   000133 710000 2                  TRA     s:6319
         2 000130   000152 710000 2                  TRA     s:6324
         2 000131   000155 710000 2                  TRA     s:6326
         2 000132   000160 710000 2                  TRA     s:6328

      397     6318    4            CASE (%IFAD_FID) ;

      398     6319    4               DUP.IFAD.ENTERED = %TRUE ;

   6319  2 000133   000400 236003                    LDQ     256,DU
         2 000134   000057 256000 xsym               ORSQ    DUP+47

      399     6320    4               DUP.HOLD_AREA = OUTBLK$ -> OUT$SYM.TEXT ;

   6320  2 000135   100004 236100                    LDQ     4,,PR1
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:106  
         2 000136   000033 772000                    QRL     27
         2 000137   000000 621006                    EAX1    0,QL
         2 000140   040000 100540                    MLR     fill='040'O
         2 000141   100004 200011                    ADSC9   4,,PR1                   cn=1,n=*X1
         2 000142   000142 000050 xsym               ADSC9   DUP+98                   cn=0,n=40

      400     6321    4               DUP.HOLD_AREA_LGTH = OUTBLK$ -> OUT$SYM.COUNT ;

   6321  2 000143   100004 236100                    LDQ     4,,PR1
         2 000144   000033 772000                    QRL     27
         2 000145   000154 756000 xsym               STQ     DUP+108

      401     6322    4               CALL TOU$DU_SET_IFAD_FID ALTRET (ERROR) ;

   6322  2 000146   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000147   000000 701000 xent               TSX1    TOU$DU_SET_IFAD_FID
         2 000150   000224 702000 2                  TSX2    ERROR
         2 000151   000176 710000 2                  TRA     s:6333

      402     6323    4            CASE (%ON) ;

      403     6324    4               DUP.DF.NO_EXIST = %TRUE ;

   6324  2 000152   000400 236003                    LDQ     256,DU
         2 000153   000104 256000 xsym               ORSQ    DUP+68
         2 000154   000176 710000 2                  TRA     s:6333

      404     6325    4            CASE (%OVER) ;

      405     6326    4               DUP.DF.NO_EXIST = %FALSE ;

   6326  2 000155   000000 236000 3                  LDQ     0
         2 000156   000104 356000 xsym               ANSQ    DUP+68
         2 000157   000176 710000 2                  TRA     s:6333

      406     6327    4            CASE (%DECKFILE_FID) ;

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:107  
      407     6328    4               DUP.DF.ENTERED = %TRUE ;

   6328  2 000160   400000 236003                    LDQ     -131072,DU
         2 000161   000104 256000 xsym               ORSQ    DUP+68

      408     6329    4               DUP.HOLD_AREA = OUTBLK$ -> OUT$SYM.TEXT ;

   6329  2 000162   100004 236100                    LDQ     4,,PR1
         2 000163   000033 772000                    QRL     27
         2 000164   000000 621006                    EAX1    0,QL
         2 000165   040000 100540                    MLR     fill='040'O
         2 000166   100004 200011                    ADSC9   4,,PR1                   cn=1,n=*X1
         2 000167   000142 000050 xsym               ADSC9   DUP+98                   cn=0,n=40

      409     6330    4               DUP.HOLD_AREA_LGTH = OUTBLK$ -> OUT$SYM.COUNT ;

   6330  2 000170   100004 236100                    LDQ     4,,PR1
         2 000171   000033 772000                    QRL     27
         2 000172   000154 756000 xsym               STQ     DUP+108

      410     6331    4               CALL TOU$DU_SET_DF_FID ALTRET (ERROR) ;

   6331  2 000173   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000174   000000 701000 xent               TSX1    TOU$DU_SET_DF_FID
         2 000175   000224 702000 2                  TSX2    ERROR

      411     6332    4         END /* CASE */ ;

      412     6333    3      END /* DO */ ;

   6333  2 000176   200005 235100                    LDA     OUTBLK#,,AUTO
         2 000177   000001 035007                    ADLA    1,DL
         2 000200   200005 755100                    STA     OUTBLK#,,AUTO
         2 000201   000017 470400 xsym               LDP0    DUP+15
         2 000202   000001 236100                    LDQ     1,,PR0
         2 000203   000022 772000                    QRL     18
         2 000204   200005 116100                    CMPQ    OUTBLK#,,AUTO
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:108  
         2 000205   000207 600000 2                  TZE     s:6335
         2 000206   000115 603000 2                  TRC     s:6316

      413     6334
      414     6335    2      IF DUP.IFAD.ENTERED

   6335  2 000207   000057 236000 xsym               LDQ     DUP+47
         2 000210   000400 316003                    CANQ    256,DU
         2 000211   000215 601000 2                  TNZ     s:6338

      415     6336    2      THEN /* FID set from DEER command */ ;
      416     6337    2      ELSE CALL TOU$DU_SET_IFAD_FID ALTRET (ERROR) ;

   6337  2 000212   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000213   000000 701000 xent               TSX1    TOU$DU_SET_IFAD_FID
         2 000214   000224 702000 2                  TSX2    ERROR

      417     6338    2      IF DUP.DF.ENTERED

   6338  2 000215   000104 234000 xsym               SZN     DUP+68
         2 000216   000222 604000 2                  TMI     s:6341

      418     6339    2      THEN /* FID set from DEER command */ ;
      419     6340    2      ELSE CALL TOU$DU_SET_DF_FID ALTRET (ERROR) ;

   6340  2 000217   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000220   000000 701000 xent               TSX1    TOU$DU_SET_DF_FID
         2 000221   000224 702000 2                  TSX2    ERROR

      420     6341    2      RETURN ;

   6341  2 000222   200004 221300                    LDX1  ! TEMP_INPUT_EXISTS+1,,AUTO
         2 000223   000001 702211                    TSX2  ! 1,X1

      421     6342
      422     6343    2   ERROR:
      423     6344    2      ALTRETURN ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:109  

   6344  2 000224   200004 221300       ERROR        LDX1  ! TEMP_INPUT_EXISTS+1,,AUTO
         2 000225   000000 702211                    TSX2  ! 0,X1

      424     6345
      425     6346    2   END B_COMMAND_SETUP ;
      426     6347        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:110  
      427     6348        /*I*  NAME:        B_SHOW_DCBS
      428     6349              AUTHOR:      Scott S. Sheppard
      429     6350              PURPOSE:     Displays IFAD / Deckfile DCB's
      430     6351              INTERFACE:   TOU$DU_USER_WRITE
      431     6352              INPUT:       T$SHOW_IFAD - message number for IFAD display
      432     6353                           T$SHOW_DF   - message number for deckfile display
      433     6354              OUTPUT:      DUP.MSG_CODE - set to appropriate message code
      434     6355              DESCRIPTION: This procedure displays the file identifier of the
      435     6356                           IFAD input source   and  deckfile  currently being
      436     6357                           accessed.
      437     6358        */
      438     6359
      439     6360    1   B_SHOW_DCBS: PROC ;

   6360  2 000226   200004 741300       B_SHOW_DCBS  STX1  ! TEMP_INPUT_EXISTS+1,,AUTO

      440     6361
      441     6362        /* Code */
      442     6363
      443     6364    2      DUP.MSG_CODE = %T$SHOW_IFAD ;

   6364  2 000227   000001 235007                    LDA     1,DL
         2 000230   000020 755000 xsym               STA     DUP+16

      444     6365    2      CALL TOU$DU_USER_WRITE ;

   6365  2 000231   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000232   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 000233   000000 011000                    NOP     0

      445     6366
      446     6367    2      DUP.MSG_CODE = %T$SHOW_DF ;

   6367  2 000234   000002 235007                    LDA     2,DL
         2 000235   000020 755000 xsym               STA     DUP+16

      447     6368    2      CALL TOU$DU_USER_WRITE ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:111  

   6368  2 000236   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000237   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 000240   000000 011000                    NOP     0

      448     6369    2      RETURN ;

   6369  2 000241   200004 221300                    LDX1  ! TEMP_INPUT_EXISTS+1,,AUTO
         2 000242   000001 702211                    TSX2  ! 1,X1

      449     6370
      450     6371    2   END B_SHOW_DCBS ;
      451     6372        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:112  
      452     6373        /*I*  NAME:        B_CLEAR_DF
      453     6374              AUTHORS:     Scott S. Sheppard
      454     6375                           David M. Augustine
      455     6376              PURPOSE:     Initialization
      456     6377              INTERFACE:   None called.
      457     6378              INPUT:       LAST.DECK# - largest deck number (1 at this point)
      458     6379                           MASTER_DATA.ENTRY_COUNT - (0 at this point)
      459     6380              OUTPUT:      LAST.DECK#
      460     6381                           MASTER_DATA
      461     6382              DESCRIPTION: This procedure clears the deckfile variables by
      462     6383                           initializing them to starting values.
      463     6384        */
      464     6385
      465     6386    1   B_CLEAR_DF: PROC ;

   6386  2 000243   200006 741300       B_CLEAR_DF   STX1  ! OUTBLK$,,AUTO

      466     6387
      467     6388        /* Code */
      468     6389
      469     6390    2      LAST.DECK# = 1;

   6390  2 000244   000001 220003                    LDX0    1,DU
         2 000245   000000 740000 xsym               STX0    LAST

      470     6391    2      LAST.EDIT_NAME = '$000' ;

   6391  2 000246   040000 100400                    MLR     fill='040'O
         2 000247   000004 000004 1                  ADSC9   MASTER_KEY+4             cn=0,n=4
         2 000250   000000 400004 xsym               ADSC9   LAST                     cn=2,n=4

      471     6392    2      MASTER_DATA.DECK# = LAST.DECK#;

   6392  2 000251   000000 740000 xsym               STX0    MASTER_DATA

      472     6393    2      MASTER_DATA.ENTRY_COUNT = 0 ;

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:113  
   6393  2 000252   000000 222003                    LDX2    0,DU
         2 000253   000000 442000 xsym               SXL2    MASTER_DATA

      473     6394    2      MASTER_DATA.RFU = 'DEER' ;

   6394  2 000254   000005 236000 1                  LDQ     MASTER_KEY+5
         2 000255   000001 756000 xsym               STQ     MASTER_DATA+1

      474     6395    2      MASTER_ENTRY_KEY.DECK# = LAST.DECK#;

   6395  2 000256   000000 236000 xsym               LDQ     LAST
         2 000257   000011 772000                    QRL     9
         2 000260   000000 552030 xsym               STBQ    MASTER_ENTRY_KEY,'30'O

      475     6396    2      MASTER_ENTRY_KEY.ENTRY# = 1;

   6396  2 000261   000000 101400                    MRL     fill='000'O
         2 000262   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         2 000263   000000 600002 xsym               ADSC9   MASTER_ENTRY_KEY         cn=3,n=2

      476     6397    2      LAST.DECK# = LAST.DECK# + 1 ;

   6397  2 000264   000001 623010                    EAX3    1,X0
         2 000265   000000 743000 xsym               STX3    LAST

      477     6398    2      RETURN;

   6398  2 000266   000001 702211                    TSX2  ! 1,X1

      478     6399
      479     6400    2   END B_CLEAR_DF;
      480     6401        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:114  
      481     6402        /*I* NAME:         B_COPY_NIO_CATALOG
      482     6403             AUTHOR:       Scott S. Sheppard
      483     6404             PURPOSE:      Copies the NIO catalog from the deckfile
      484     6405             INTERFACE:    TOU$DU_OPEN_DF
      485     6406                           TOU$DU_CLOSE_DF
      486     6407                           B_CHECK_FOR_CATALOG
      487     6408             PARAMETERS:   None passed.
      488     6409             DATA:         DUP.DF.OPEN_TYPE - output
      489     6410                           DUP.DF.CLOSE_TYPE - output
      490     6411                           DUP.DF.REPORT_ERROR - output
      491     6412                           CATALOG_SEARCH_KEY
      492     6413                           TEMP_INPUT_EXISTS
      493     6414             DESCRIPTION:  This  procedure attempts to  open the deckfile
      494     6415                           for input,  store all of the  records from the
      495     6416                           NIO catalog in memory  or in a temporary file,
      496     6417                           and close the deckfile. If a deckfile with the
      497     6418                           same  name  being  built  does  not exist, the
      498     6419                           deckfile  open will fail  but no error message
      499     6420                           is  written  since  the  REPORT_ERROR  flag is
      500     6421                           false.  "Deckfile does not  exist" is the only
      501     6422                           open error overidden by the report error flag.
      502     6423                           If a deckfile exists, the catalog CATA.NIO.MCA
      503     6424                           is searched for and if found, is copied into a
      504     6425                           temporary file. This  is done because when the
      505     6426                           actual build begins,  the deckfile is open for
      506     6427                           output  which  deletes  all  records.  The NIO
      507     6428                           catalog records may then  be copied back in so
      508     6429                           the catalog will still exist.
      509     6430        */
      510     6431        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:115  
      511     6432    1   B_COPY_NIO_CATALOG: PROC ALTRET ;

   6432  2 000267   200004 741300       B_COPY_NIO_* STX1  ! TEMP_INPUT_EXISTS+1,,AUTO

      512     6433
      513     6434        /* Code */
      514     6435
      515     6436    2      DUP.DF.OPEN_TYPE = %READ_FILE ;

   6436  2 000270   000002 235007                    LDA     2,DL
         2 000271   000105 755000 xsym               STA     DUP+69

      516     6437    2      DUP.DF.REPORT_ERROR = %FALSE ;

   6437  2 000272   000001 236000 3                  LDQ     1
         2 000273   000104 356000 xsym               ANSQ    DUP+68

      517     6438    2      CALL TOU$DU_OPEN_DF WHENRETURN

   6438  2 000274   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000275   000000 701000 xent               TSX1    TOU$DU_OPEN_DF
         2 000276   000315 702000 2                  TSX2    s:6451

      518     6439    3           DO ;

      519     6440    3              CATALOG_SEARCH_KEY.DATA = 'CATA.NIO.MCA' ;

   6440  2 000277   040000 100400                    MLR     fill='040'O
         2 000300   000006 000014 1                  ADSC9   MASTER_KEY+6             cn=0,n=12
         2 000301   000000 000025 xsym               ADSC9   CATALOG_SEARCH_KEY       cn=0,n=21

      520     6441    3              CALL B_CHECK_FOR_CATALOG WHENRETURN

   6441  2 000302   000326 701000 2                  TSX1    B_CHECK_FOR_CATALOG
         2 000303   000310 702000 2                  TSX2    s:6446

      521     6442    4                   DO ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:116  

      522     6443    4                      TEMP_INPUT_EXISTS = %TRUE ;

   6443  2 000304   400000 236003                    LDQ     -131072,DU
         2 000305   200003 756100                    STQ     TEMP_INPUT_EXISTS,,AUTO

      523     6444    4                      CALL B_STORE_NIO_CATALOG ALTRET (ERROR) ;

   6444  2 000306   000405 701000 2                  TSX1    B_STORE_NIO_CATALOG
         2 000307   000320 702000 2                  TSX2    ERROR

      524     6445    4                   END /* WHENRETURN */ ;

      525     6446    3              DUP.DF.CLOSE_TYPE = %SAVE_FILE ;

   6446  2 000310   000106 450000 xsym               STZ     DUP+70

      526     6447    3              CALL TOU$DU_CLOSE_DF ALTRET (ERROR) ;

   6447  2 000311   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000312   000000 701000 xent               TSX1    TOU$DU_CLOSE_DF
         2 000313   000320 702000 2                  TSX2    ERROR

      527     6448    3           END /* WHENRETURN */ ;

   6448  2 000314   000316 710000 2                  TRA     s:6453

      528     6449    2      WHENALTRETURN
      529     6450    3           DO ;

      530     6451    3              TEMP_INPUT_EXISTS = %FALSE ;

   6451  2 000315   200003 450100                    STZ     TEMP_INPUT_EXISTS,,AUTO

      531     6452    3           END /* WHENALTRETURN */ ;

      532     6453    2      RETURN ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:117  

   6453  2 000316   200004 221300                    LDX1  ! TEMP_INPUT_EXISTS+1,,AUTO
         2 000317   000001 702211                    TSX2  ! 1,X1

      533     6454
      534     6455    2   ERROR:
      535     6456    2      DUP.DF.CLOSE_TYPE = %SAVE_FILE ;

   6456  2 000320   000106 450000 xsym  ERROR        STZ     DUP+70

      536     6457    2      CALL TOU$DU_CLOSE_DF ;

   6457  2 000321   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000322   000000 701000 xent               TSX1    TOU$DU_CLOSE_DF
         2 000323   000000 011000                    NOP     0

      537     6458    2      ALTRETURN ;

   6458  2 000324   200004 221300                    LDX1  ! TEMP_INPUT_EXISTS+1,,AUTO
         2 000325   000000 702211                    TSX2  ! 0,X1

      538     6459
      539     6460    2   END B_COPY_NIO_CATALOG ;
      540     6461        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:118  
      541     6462        /*I*  NAME:        B_CHECK_FOR_CATALOG
      542     6463              AUTHOR:      Scott S. Sheppard
      543     6464              PURPOSE:     Catalog Existance Checking
      544     6465              INTERFACE:   TOU$DFU_DF_RD_MASTER_CONTROL
      545     6466                           TOU$DFU_DF_RD_MASTER_ENTRY
      546     6467              INPUT:       MASTER_ENTRY
      547     6468                           MASTER_DATA
      548     6469                           CATALOG_KEY
      549     6470                           CATALOG_SEARCH_KEY
      550     6471              OUTPUT:      MASTER_ENTRY_KEY.ENTRY#
      551     6472              DESCRIPTION: This procedure checks the deckfile to determine if
      552     6473                           a catalog already exists in the deckfile  with the
      553     6474                           same key value as the catalog search key.
      554     6475                           If the catalog key is found, the procedure returns
      555     6476                           and altreturns otherwise.
      556     6477        */
      557     6478        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:119  
      558     6479    1   B_CHECK_FOR_CATALOG: PROC ALTRET ;

   6479  2 000326   200006 741300       B_CHECK_FOR* STX1  ! OUTBLK$,,AUTO

      559     6480
      560     6481    2      DCL FOUND                      BIT (1) CALIGNED ;
      561     6482
      562     6483        /* Code */
      563     6484
      564     6485    2      FOUND = %FALSE ;

   6485  2 000327   200007 450100                    STZ     FOUND,,AUTO

      565     6486    2      CALL TOU$DFU_DF_RD_MASTER_CONTROL ALTRET (ERROR) ;

   6486  2 000330   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000331   000000 701000 xent               TSX1    TOU$DFU_DF_RD_MASTER_CONTROL
         2 000332   000377 702000 2                  TSX2    ERROR

      566     6487    2      MASTER_ENTRY_KEY.DECK# = MASTER_DATA.DECK# ;

   6487  2 000333   000000 236000 xsym               LDQ     MASTER_DATA
         2 000334   000011 772000                    QRL     9
         2 000335   000000 552030 xsym               STBQ    MASTER_ENTRY_KEY,'30'O

      567     6488    2      MASTER_ENTRY_KEY.ENTRY# = 1 ;

   6488  2 000336   000000 101400                    MRL     fill='000'O
         2 000337   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         2 000340   000000 600002 xsym               ADSC9   MASTER_ENTRY_KEY         cn=3,n=2

      568     6489    3      DO UNTIL (FOUND OR MASTER_ENTRY_KEY.ENTRY# > MASTER_DATA.ENTRY_COUNT) ;

      569     6490    3         CALL TOU$DFU_DF_RD_MASTER_ENTRY ALTRET (ERROR) ;

   6490  2 000341   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000342   000000 701000 xent               TSX1    TOU$DFU_DF_RD_MASTER_ENTRY
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:120  
         2 000343   000377 702000 2                  TSX2    ERROR

      570     6491    3         IF CATALOG_KEY.DATA = CATALOG_SEARCH_KEY.DATA

   6491  2 000344   040000 106400                    CMPC    fill='040'O
         2 000345   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21
         2 000346   000000 000025 xsym               ADSC9   CATALOG_SEARCH_KEY       cn=0,n=21
         2 000347   000353 601000 2                  TNZ     s:6493

      571     6492    3         THEN FOUND = %TRUE ;

   6492  2 000350   400000 236003                    LDQ     -131072,DU
         2 000351   200007 756100                    STQ     FOUND,,AUTO
         2 000352   000364 710000 2                  TRA     s:6494

      572     6493    3         ELSE MASTER_ENTRY_KEY.ENTRY# = MASTER_ENTRY_KEY.ENTRY# + 1 ;

   6493  2 000353   000000 235000 xsym               LDA     MASTER_ENTRY_KEY
         2 000354   000001 236000 xsym               LDQ     MASTER_ENTRY_KEY+1
         2 000355   000033 773000                    LRL     27
         2 000356   777777 376007                    ANQ     -1,DL
         2 000357   000001 036007                    ADLQ    1,DL
         2 000360   200034 756100                    STQ     SECOND+2,,AUTO
         2 000361   000000 101500                    MRL     fill='000'O
         2 000362   200034 000004                    ADSC9   SECOND+2,,AUTO           cn=0,n=4
         2 000363   000000 600002 xsym               ADSC9   MASTER_ENTRY_KEY         cn=3,n=2

      573     6494    3      END /* UNTIL */ ;

   6494  2 000364   200007 234100                    SZN     FOUND,,AUTO
         2 000365   000377 604000 2                  TMI     ERROR
         2 000366   000000 235000 xsym               LDA     MASTER_ENTRY_KEY
         2 000367   000001 236000 xsym               LDQ     MASTER_ENTRY_KEY+1
         2 000370   000033 773000                    LRL     27
         2 000371   777777 376007                    ANQ     -1,DL
         2 000372   200034 756100                    STQ     SECOND+2,,AUTO
         2 000373   000000 236000 xsym               LDQ     MASTER_DATA
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:121  
         2 000374   777777 376007                    ANQ     -1,DL
         2 000375   200034 116100                    CMPQ    SECOND+2,,AUTO
         2 000376   000341 605000 2                  TPL     s:6490

      574     6495
      575     6496    2   ERROR:
      576     6497    2      IF FOUND

   6497  2 000377   200007 234100       ERROR        SZN     FOUND,,AUTO
         2 000400   000403 605000 2                  TPL     s:6499

      577     6498    2      THEN RETURN ;

   6498  2 000401   200006 221300                    LDX1  ! OUTBLK$,,AUTO
         2 000402   000001 702211                    TSX2  ! 1,X1

      578     6499    2      ELSE ALTRETURN ;

   6499  2 000403   200006 221300                    LDX1  ! OUTBLK$,,AUTO
         2 000404   000000 702211                    TSX2  ! 0,X1

      579     6500
      580     6501    2   END B_CHECK_FOR_CATALOG ;
      581     6502        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:122  
      582     6503        /*I* NAME:         B_STORE_NIO_CATALOG
      583     6504             AUTHOR:       Scott S. Sheppard
      584     6505             PURPOSE:      Saves DIPPER catalog in a temporary file
      585     6506             INTERFACE:    TOU$DFU_OPEN_TEMP
      586     6507                           TOU$DFU_CLOSE_TEMP
      587     6508                           TOU$DFU_DF_RD_CATALOG_CONTROL
      588     6509                           TOU$DFU_DF_RD_SUBCATALOG
      589     6510                           TOU$DFU_DF_RD_CATALOG_ENTRY
      590     6511                           TOU$DFU_TF_WR_CATALOG_ENTRY
      591     6512                           TOU$DFU_DF_RD_OBJECT
      592     6513                           TOU$DFU_DF_WR_OBJECT
      593     6514                           TOU$DFU_DF_RD_FILE
      594     6515                           TOU$DFU_TF_WR_FILE
      595     6516             PARAMETERS:   None passed.
      596     6517             DATA:         DUP.TEMP.OPEN_TYPE - output
      597     6518                           DUP.TEMP.CLOSE_TYPE - output
      598     6519                           COPIED_CATALOG - output
      599     6520                           COPIED_SUB - output
      600     6521                           CATALOG_DATA - input
      601     6522                           SUBCATALOG_KEY - output
      602     6523                           CATALOG_ENTRY_KEY - output
      603     6524                           BINARY_KEY - output
      604     6525                           MCA_B.FILE.SIZE - output
      605     6526                           BCD_KEY - output
      606     6527                           BCD# - output
      607     6528             DESCRIPTION:  This  procedure reads the  catalog control and
      608     6529                           holds it in  the COPIED_CATALOG structure. The
      609     6530                           subcatalog   is   kept   in   the   SUBCATALOG
      610     6531                           structure.   The   remainder   of  the  DIPPER
      611     6532                           catalog,  i.e., the  entries and  object decks
      612     6533                           are read and stored in the temporary file.
      613     6534        */
      614     6535        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:123  
      615     6536    1   B_STORE_NIO_CATALOG: PROC ALTRET ;

   6536  2 000405   200006 741300       B_STORE_NIO* STX1  ! OUTBLK$,,AUTO

      616     6537
      617     6538        /* Code */
      618     6539
      619     6540    2      DUP.TEMP.OPEN_TYPE = %CREATE_FILE ;

   6540  2 000406   000140 450000 xsym               STZ     DUP+96

      620     6541    2      CALL TOU$DFU_OPEN_TEMP ALTRET (ERROR) ;

   6541  2 000407   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000410   000000 701000 xent               TSX1    TOU$DFU_OPEN_TEMP
         2 000411   000536 702000 2                  TSX2    ERROR

      621     6542
      622     6543    2      CALL TOU$DFU_DF_RD_CATALOG_CONTROL ALTRET (ERROR) ;

   6543  2 000412   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000413   000000 701000 xent               TSX1    TOU$DFU_DF_RD_CATALOG_CONTROL
         2 000414   000536 702000 2                  TSX2    ERROR

      623     6544    2      COPIED_CATALOG = CATALOG_DATA ;

   6544  2 000415   000000 100400                    MLR     fill='000'O
         2 000416   000000 000010 xsym               ADSC9   CATALOG_DATA             cn=0,n=8
         2 000417   000025 000010 0                  ADSC9   COPIED_CATALOG           cn=0,n=8

      624     6545
      625     6546    2      SUBCATALOG_KEY.DECK# = COPIED_CATALOG.DECK# ;

   6546  2 000420   000025 236000 0                  LDQ     COPIED_CATALOG
         2 000421   000011 772000                    QRL     9
         2 000422   000000 552030 xsym               STBQ    SUBCATALOG_KEY,'30'O

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:124  
      626     6547    2      CALL TOU$DFU_DF_RD_SUBCATALOG ;

   6547  2 000423   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000424   000000 701000 xent               TSX1    TOU$DFU_DF_RD_SUBCATALOG
         2 000425   000000 011000                    NOP     0

      627     6548    2      COPIED_SUB = SUBCATALOG_DATA ;

   6548  2 000426   000000 100400                    MLR     fill='000'O
         2 000427   000000 000064 xsym               ADSC9   SUBCATALOG_DATA          cn=0,n=52
         2 000430   000027 000064 0                  ADSC9   COPIED_SUB               cn=0,n=52

      628     6549
      629     6550    2      CATALOG_ENTRY_KEY.DECK# = COPIED_CATALOG.DECK# ;

   6550  2 000431   000025 236000 0                  LDQ     COPIED_CATALOG
         2 000432   000011 772000                    QRL     9
         2 000433   000000 552030 xsym               STBQ    CATALOG_ENTRY_KEY,'30'O

      630     6551    3      DO CATALOG_ENTRY_KEY.ENTRY# = 1 TO COPIED_CATALOG.ENTRY_COUNT ;

   6551  2 000434   000000 101400                    MRL     fill='000'O
         2 000435   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         2 000436   000000 600002 xsym               ADSC9   CATALOG_ENTRY_KEY        cn=3,n=2
         2 000437   000517 710000 2                  TRA     s:6566+9

      631     6552    3         CALL TOU$DFU_DF_RD_CATALOG_ENTRY ALTRET (ERROR) ;

   6552  2 000440   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000441   000000 701000 xent               TSX1    TOU$DFU_DF_RD_CATALOG_ENTRY
         2 000442   000536 702000 2                  TSX2    ERROR

      632     6553    3         CALL TOU$DFU_TF_WR_CATALOG_ENTRY ALTRET (ERROR) ;

   6553  2 000443   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000444   000000 701000 xent               TSX1    TOU$DFU_TF_WR_CATALOG_ENTRY
         2 000445   000536 702000 2                  TSX2    ERROR
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:125  

      633     6554
      634     6555    3         CALL TOU$DFU_DF_RD_OBJECT ALTRET (ERROR) ;

   6555  2 000446   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000447   000000 701000 xent               TSX1    TOU$DFU_DF_RD_OBJECT
         2 000450   000536 702000 2                  TSX2    ERROR

      635     6556    3         CALL TOU$DFU_TF_WR_OBJECT ALTRET (ERROR) ;

   6556  2 000451   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000452   000000 701000 xent               TSX1    TOU$DFU_TF_WR_OBJECT
         2 000453   000536 702000 2                  TSX2    ERROR

      636     6557
      637     6558    3         BINARY_KEY.DECK# = OBJECT.DECK# ;

   6558  2 000454   000024 236000 xsym               LDQ     OBJECT+20
         2 000455   000011 772000                    QRL     9
         2 000456   000000 552030 xsym               STBQ    BINARY_KEY,'30'O

      638     6559    3         CALL TOU$DFU_DF_RD_FILE ALTRET (ERROR) ;

   6559  2 000457   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000460   000000 701000 xent               TSX1    TOU$DFU_DF_RD_FILE
         2 000461   000536 702000 2                  TSX2    ERROR

      639     6560    3         CALL TOU$DFU_TF_WR_FILE ALTRET (ERROR) ;

   6560  2 000462   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000463   000000 701000 xent               TSX1    TOU$DFU_TF_WR_FILE
         2 000464   000536 702000 2                  TSX2    ERROR

      640     6561
      641     6562    3         BCD_KEY.DECK# = OBJECT.DECK# ;

   6562  2 000465   000024 236000 xsym               LDQ     OBJECT+20
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:126  
         2 000466   000011 772000                    QRL     9
         2 000467   000000 552030 xsym               STBQ    BCD_KEY,'30'O

      642     6563    3         BCD# = OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT - 1 ;

   6563  2 000470   000024 236000 xsym               LDQ     OBJECT+20
         2 000471   777777 376007                    ANQ     -1,DL
         2 000472   200034 756100                    STQ     SECOND+2,,AUTO
         2 000473   000025 236000 xsym               LDQ     OBJECT+21
         2 000474   000022 772000                    QRL     18
         2 000475   200034 136100                    SBLQ    SECOND+2,,AUTO
         2 000476   000001 136007                    SBLQ    1,DL
         2 000477   000044 756000 0                  STQ     BCD#

      643     6564    3         CALL TOU$DFU_DF_RD_BCD_CARDS ALTRET (ERROR) ;

   6564  2 000500   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000501   000000 701000 xent               TSX1    TOU$DFU_DF_RD_BCD_CARDS
         2 000502   000536 702000 2                  TSX2    ERROR

      644     6565    3         CALL TOU$DFU_TF_WR_BCD_CARDS ALTRET (ERROR) ;

   6565  2 000503   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000504   000000 701000 xent               TSX1    TOU$DFU_TF_WR_BCD_CARDS
         2 000505   000536 702000 2                  TSX2    ERROR

      645     6566    3      END /* DO */ ;

   6566  2 000506   000000 235000 xsym               LDA     CATALOG_ENTRY_KEY
         2 000507   000001 236000 xsym               LDQ     CATALOG_ENTRY_KEY+1
         2 000510   000033 773000                    LRL     27
         2 000511   777777 376007                    ANQ     -1,DL
         2 000512   000001 036007                    ADLQ    1,DL
         2 000513   200034 756100                    STQ     SECOND+2,,AUTO
         2 000514   000000 101500                    MRL     fill='000'O
         2 000515   200034 000004                    ADSC9   SECOND+2,,AUTO           cn=0,n=4
         2 000516   000000 600002 xsym               ADSC9   CATALOG_ENTRY_KEY        cn=3,n=2
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:127  
         2 000517   000000 235000 xsym               LDA     CATALOG_ENTRY_KEY
         2 000520   000001 236000 xsym               LDQ     CATALOG_ENTRY_KEY+1
         2 000521   000033 773000                    LRL     27
         2 000522   777777 376007                    ANQ     -1,DL
         2 000523   200035 756100                    STQ     SECOND+3,,AUTO
         2 000524   000025 236000 0                  LDQ     COPIED_CATALOG
         2 000525   777777 376007                    ANQ     -1,DL
         2 000526   200035 116100                    CMPQ    SECOND+3,,AUTO
         2 000527   000440 605000 2                  TPL     s:6552

      646     6567
      647     6568    2      DUP.TEMP.CLOSE_TYPE = %SAVE_FILE ;

   6568  2 000530   000141 450000 xsym               STZ     DUP+97

      648     6569    2      CALL TOU$DFU_CLOSE_TEMP ALTRET (ERROR) ;

   6569  2 000531   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000532   000000 701000 xent               TSX1    TOU$DFU_CLOSE_TEMP
         2 000533   000536 702000 2                  TSX2    ERROR

      649     6570    2      RETURN ;

   6570  2 000534   200006 221300                    LDX1  ! OUTBLK$,,AUTO
         2 000535   000001 702211                    TSX2  ! 1,X1

      650     6571           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:128  
      651     6572    2   ERROR:
      652     6573    2      DUP.TEMP.CLOSE_TYPE = %DISCARD_FILE ;

   6573  2 000536   000001 235007       ERROR        LDA     1,DL
         2 000537   000141 755000 xsym               STA     DUP+97

      653     6574    2      CALL TOU$DFU_CLOSE_TEMP ;

   6574  2 000540   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000541   000000 701000 xent               TSX1    TOU$DFU_CLOSE_TEMP
         2 000542   000000 011000                    NOP     0

      654     6575    2      ALTRETURN ;

   6575  2 000543   200006 221300                    LDX1  ! OUTBLK$,,AUTO
         2 000544   000000 702211                    TSX2  ! 0,X1

      655     6576
      656     6577    2   END B_STORE_NIO_CATALOG ;
      657     6578        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:129  
      658     6579        /*I* NAME:         B_BUILD_DECKFILE
      659     6580             AUTHOR:       Scott S. Sheppard
      660     6581             PURPOSE:      Creates the deckfile from Inputs
      661     6582             INTERFACE:    TOU$DFU_OPEN_DF
      662     6583                           TOU$DFU_CLOSE_DF
      663     6584                           B_CLEAR_DF
      664     6585                           B_BUILD_FROM_VOLUMES
      665     6586             PARAMETERS:   None passed.
      666     6587             DATA:         DUP.DF.OPEN_TYPE - output
      667     6588                           DUP.DF.CLOSE_TYPE - output
      668     6589                           DUP.DF.REPORT_ERROR - output
      669     6590             DESCRIPTION:  This procedure is the  driver  used to build a
      670     6591                           deckfile.  The  deckfile  is  open  for output
      671     6592                           which deletes all the records.
      672     6593        */
      673     6594        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:130  
      674     6595    1   B_BUILD_DECKFILE: PROC ALTRET ;

   6595  2 000545   200004 741300       B_BUILD_DEC* STX1  ! TEMP_INPUT_EXISTS+1,,AUTO

      675     6596
      676     6597        /* Code */
      677     6598
      678     6599    2      DUP.DF.OPEN_TYPE = %CREATE_FILE ;

   6599  2 000546   000105 450000 xsym               STZ     DUP+69

      679     6600    2      DUP.DF.REPORT_ERROR = %TRUE ;

   6600  2 000547   400000 236007                    LDQ     -131072,DL
         2 000550   000104 256000 xsym               ORSQ    DUP+68

      680     6601    2      CALL TOU$DU_OPEN_DF ALTRET (ERROR) ;

   6601  2 000551   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000552   000000 701000 xent               TSX1    TOU$DU_OPEN_DF
         2 000553   000566 702000 2                  TSX2    ERROR

      681     6602
      682     6603    2      CALL B_CLEAR_DF ;

   6603  2 000554   000243 701000 2                  TSX1    B_CLEAR_DF
         2 000555   000000 011000                    NOP     0

      683     6604    2      CALL B_BUILD_FROM_VOLUMES ALTRET (ERROR) ;

   6604  2 000556   000575 701000 2                  TSX1    B_BUILD_FROM_VOLUMES
         2 000557   000566 702000 2                  TSX2    ERROR

      684     6605
      685     6606    2      DUP.DF.CLOSE_TYPE = %SAVE_FILE ;

   6606  2 000560   000106 450000 xsym               STZ     DUP+70
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:131  

      686     6607    2      CALL TOU$DU_CLOSE_DF ALTRET (ERROR) ;

   6607  2 000561   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000562   000000 701000 xent               TSX1    TOU$DU_CLOSE_DF
         2 000563   000566 702000 2                  TSX2    ERROR

      687     6608    2      RETURN ;

   6608  2 000564   200004 221300                    LDX1  ! TEMP_INPUT_EXISTS+1,,AUTO
         2 000565   000001 702211                    TSX2  ! 1,X1

      688     6609
      689     6610    2   ERROR:
      690     6611    2      DUP.DF.CLOSE_TYPE = %DISCARD_FILE ;

   6611  2 000566   000001 235007       ERROR        LDA     1,DL
         2 000567   000106 755000 xsym               STA     DUP+70

      691     6612    2      CALL TOU$DU_CLOSE_DF ;

   6612  2 000570   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000571   000000 701000 xent               TSX1    TOU$DU_CLOSE_DF
         2 000572   000000 011000                    NOP     0

      692     6613    2      ALTRETURN ;

   6613  2 000573   200004 221300                    LDX1  ! TEMP_INPUT_EXISTS+1,,AUTO
         2 000574   000000 702211                    TSX2  ! 0,X1

      693     6614
      694     6615    2   END B_BUILD_DECKFILE ;
      695     6616        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:132  
      696     6617        /*I*  NAME:        B_BUILD_FROM_VOLUMES
      697     6618              AUTHORS:     Scott S. Sheppard
      698     6619              PURPOSE:     Processes IFAD Volumes
      699     6620              INTERFACE:   B_PROCESS_IFAD
      700     6621                           B_SAVE_MASTER_CATALOG
      701     6622                           B_SAVE_LAST_DECK#
      702     6623                           B_SAVE_LOG
      703     6624                           B_SAVE_REVISION
      704     6625                           B_SAVE_NIO_CATALOG
      705     6626                           TOU$DU_OPEN_IFAD
      706     6627                           TOU$CLEAR_IFAD
      707     6628                           TOU$DU_GET_SITE
      708     6629                           TOU$DU_CLOSE_IFAD
      709     6630                           TOU$DU_NEXT_IFAD
      710     6631              INPUT:       VOLUME# - current volume number of volume set
      711     6632                           DUP.IFAD.NUM_VOLUMES - number of IFAD volumes
      712     6633                           TEMP_INPUT_EXISTS - NIO catalog in storage?
      713     6634              OUTPUT:      VOLUME# - increased as volumes are processed
      714     6635              DESCRIPTION: This procedure processes the IFAD input source
      715     6636                           reading all volumes in the volume set and then
      716     6637                           adds the NIO catalog if it was copied.
      717     6638        */
      718     6639
      719     6640    1   B_BUILD_FROM_VOLUMES: PROC ALTRET ;

   6640  2 000575   200006 741300       B_BUILD_FRO* STX1  ! OUTBLK$,,AUTO

      720     6641
      721     6642    2      DCL VOLUME#     UBIN WORD ALIGNED ;
      722     6643           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:133  
      723     6644        /* Code */
      724     6645
      725     6646    2      CALL TOU$DU_OPEN_IFAD ALTRET (ERROR) ;

   6646  2 000576   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000577   000000 701000 xent               TSX1    TOU$DU_OPEN_IFAD
         2 000600   000655 702000 2                  TSX2    ERROR

      726     6647    2      CALL TOU$DU_GET_SITE ALTRET (ERROR) ;

   6647  2 000601   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000602   000000 701000 xent               TSX1    TOU$DU_GET_SITE
         2 000603   000655 702000 2                  TSX2    ERROR

      727     6648
      728     6649    2      VOLUME# = 1 ;

   6649  2 000604   000001 235007                    LDA     1,DL
         2 000605   200007 755100                    STA     VOLUME#,,AUTO

      729     6650    2      CALL TOU$CLEAR_IFAD ;

   6650  2 000606   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000607   000000 701000 xent               TSX1    TOU$CLEAR_IFAD
         2 000610   000000 011000                    NOP     0

      730     6651
      731     6652    2      CALL B_PROCESS_IFAD ALTRET (ERROR) ;

   6652  2 000611   000662 701000 2                  TSX1    B_PROCESS_IFAD
         2 000612   000655 702000 2                  TSX2    ERROR

      732     6653    3      DO WHILE (VOLUME# < DUP.IFAD.NUM_VOLUMES) ;

   6653  2 000613   200007 236100                    LDQ     VOLUME#,,AUTO
         2 000614   000061 116000 xsym               CMPQ    DUP+49
         2 000615   000634 603000 2                  TRC     s:6659
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:134  

      733     6654    3         CALL TOU$DU_NEXT_IFAD ALTRET (ERROR) ;

   6654  2 000616   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000617   000000 701000 xent               TSX1    TOU$DU_NEXT_IFAD
         2 000620   000655 702000 2                  TSX2    ERROR

      734     6655    3         VOLUME# = VOLUME# + 1 ;

   6655  2 000621   200007 235100                    LDA     VOLUME#,,AUTO
         2 000622   000001 035007                    ADLA    1,DL
         2 000623   200007 755100                    STA     VOLUME#,,AUTO

      735     6656    3         CALL TOU$CLEAR_IFAD ;

   6656  2 000624   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000625   000000 701000 xent               TSX1    TOU$CLEAR_IFAD
         2 000626   000000 011000                    NOP     0

      736     6657    3         CALL B_PROCESS_IFAD ALTRET (ERROR) ;

   6657  2 000627   000662 701000 2                  TSX1    B_PROCESS_IFAD
         2 000630   000655 702000 2                  TSX2    ERROR

      737     6658    3      END /* WHILE */ ;

   6658  2 000631   200007 236100                    LDQ     VOLUME#,,AUTO
         2 000632   000061 116000 xsym               CMPQ    DUP+49
         2 000633   000616 602000 2                  TNC     s:6654

      738     6659    2      IF TEMP_INPUT_EXISTS

   6659  2 000634   200003 234100                    SZN     TEMP_INPUT_EXISTS,,AUTO
         2 000635   000640 605000 2                  TPL     s:6662

      739     6660    2      THEN CALL B_SAVE_NIO_CATALOG ALTRET (ERROR) ;

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:135  
   6660  2 000636   002753 701000 2                  TSX1    B_SAVE_NIO_CATALOG
         2 000637   000655 702000 2                  TSX2    ERROR

      740     6661    2      ELSE /* no NIO catalog was copied before the BUILD */ ;
      741     6662    2      CALL B_SAVE_MASTER_CATALOG ALTRET (ERROR) ;

   6662  2 000640   003145 701000 2                  TSX1    B_SAVE_MASTER_CATALOG
         2 000641   000655 702000 2                  TSX2    ERROR

      742     6663    2      CALL B_SAVE_LAST_DECK# ALTRET (ERROR) ;

   6663  2 000642   003213 701000 2                  TSX1    B_SAVE_LAST_DECK#
         2 000643   000655 702000 2                  TSX2    ERROR

      743     6664    2      CALL B_SAVE_REVISION ALTRET (ERROR) ;

   6664  2 000644   003300 701000 2                  TSX1    B_SAVE_REVISION
         2 000645   000655 702000 2                  TSX2    ERROR

      744     6665    2      CALL B_SAVE_LOG ALTRET (ERROR) ;

   6665  2 000646   003226 701000 2                  TSX1    B_SAVE_LOG
         2 000647   000655 702000 2                  TSX2    ERROR

      745     6666
      746     6667    2      CALL TOU$DU_CLOSE_IFAD ALTRET (ERROR) ;

   6667  2 000650   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000651   000000 701000 xent               TSX1    TOU$DU_CLOSE_IFAD
         2 000652   000655 702000 2                  TSX2    ERROR

      747     6668    2      RETURN ;

   6668  2 000653   200006 221300                    LDX1  ! OUTBLK$,,AUTO
         2 000654   000001 702211                    TSX2  ! 1,X1

      748     6669
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:136  
      749     6670    2   ERROR:
      750     6671    2      CALL TOU$DU_CLOSE_IFAD ;

   6671  2 000655   000002 631400 xsym  ERROR        EPPR1   B_VECTNIL+2
         2 000656   000000 701000 xent               TSX1    TOU$DU_CLOSE_IFAD
         2 000657   000000 011000                    NOP     0

      751     6672    2      ALTRETURN ;

   6672  2 000660   200006 221300                    LDX1  ! OUTBLK$,,AUTO
         2 000661   000000 702211                    TSX2  ! 0,X1

      752     6673
      753     6674    2   END B_BUILD_FROM_VOLUMES ;
      754     6675        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:137  
      755     6676        /*I*  NAME:        B_PROCESS_IFAD
      756     6677              AUTHOR:      Scott S. Sheppard
      757     6678              PURPOSE:     Processes a single IFAD input volume
      758     6679              INTERFACE:   TOU$GET_CP6_OBJECT
      759     6680                           B_GET_CATALOG
      760     6681                           B_SET_CATALOG_KEY
      761     6682                           TOU$GET_BINARY_CARDS
      762     6683                           TOU$GET_BCD_CARDS
      763     6684                           B_SET_OBJECT_KEY
      764     6685                           B_CHECK_CORRECT_FILE
      765     6686                           B_SAVE_OBJECT_DECK
      766     6687                           B_SAVE_CATALOG_ENTRY
      767     6688                           B_SAVE_CATALOG
      768     6689                           B_SAVE_SUBCATALOG
      769     6690                           B_SAVE_MASTER_ENTRY
      770     6691                           B_ERR_MSG
      771     6692              INPUT:       FILE_EOF
      772     6693              OUTPUT:      No system data altered by this module.
      773     6694              DESCRIPTION: This procedure processes the IFAD input volume
      774     6695                           from start to end (two EOF marks in a row).
      775     6696        */
      776     6697        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:138  
      777     6698    1   B_PROCESS_IFAD: PROC ALTRET ;

   6698  2 000662   200010 741300       B_PROCESS_I* STX1  ! VOLUME#+1,,AUTO

      778     6699
      779     6700        /* Code */
      780     6701
      781     6702    2      CALL TOU$GET_CP6_OBJECT ALTRET (ERROR) ;

   6702  2 000663   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000664   000000 701000 xent               TSX1    TOU$GET_CP6_OBJECT
         2 000665   000750 702000 2                  TSX2    ERROR

      782     6703    3      DO WHILE (FILE_EOF < 2) ;

   6703  2 000666   000000 235000 xsym               LDA     FILE_EOF
         2 000667   000002 115007                    CMPA    2,DL
         2 000670   000746 603000 2                  TRC     s:6720

      783     6704    3         CALL B_GET_CATALOG;

   6704  2 000671   000756 701000 2                  TSX1    B_GET_CATALOG
         2 000672   000000 011000                    NOP     0

      784     6705    3         CALL B_SET_CATALOG_KEY ALTRET (ERROR) ;

   6705  2 000673   001000 701000 2                  TSX1    B_SET_CATALOG_KEY
         2 000674   000750 702000 2                  TSX2    ERROR

      785     6706    4         DO WHILE (FILE_EOF = 0) ;

   6706  2 000675   000000 235000 xsym               LDA     FILE_EOF
         2 000676   000724 601000 2                  TNZ     s:6715

      786     6707    4            CALL TOU$GET_BINARY_CARDS ALTRET (ERROR) ;

   6707  2 000677   000002 631400 xsym               EPPR1   B_VECTNIL+2
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:139  
         2 000700   000000 701000 xent               TSX1    TOU$GET_BINARY_CARDS
         2 000701   000750 702000 2                  TSX2    ERROR

      787     6708    4            CALL TOU$GET_BCD_CARDS ALTRET (ERROR) ;

   6708  2 000702   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000703   000000 701000 xent               TSX1    TOU$GET_BCD_CARDS
         2 000704   000750 702000 2                  TSX2    ERROR

      788     6709    4            CALL B_SET_OBJECT_KEY ALTRET (ERROR) ;

   6709  2 000705   001415 701000 2                  TSX1    B_SET_OBJECT_KEY
         2 000706   000750 702000 2                  TSX2    ERROR

      789     6710    4            CALL B_CHECK_CORRECT_FILE ALTRET (ERROR) ;

   6710  2 000707   002257 701000 2                  TSX1    B_CHECK_CORRECT_FILE
         2 000710   000750 702000 2                  TSX2    ERROR

      790     6711    4            CALL B_SAVE_OBJECT_DECK ('BINARY') ALTRET (ERROR) ;

   6711  2 000711   000002 236000 3                  LDQ     2
         2 000712   200013 756100                    STQ     I+2,,AUTO
         2 000713   002340 701000 2                  TSX1    B_SAVE_OBJECT_DECK
         2 000714   000750 702000 2                  TSX2    ERROR

      791     6712    4            CALL B_SAVE_CATALOG_ENTRY ALTRET (ERROR) ;

   6712  2 000715   002603 701000 2                  TSX1    B_SAVE_CATALOG_ENTRY
         2 000716   000750 702000 2                  TSX2    ERROR

      792     6713    4            CALL TOU$GET_CP6_OBJECT ALTRET (ERROR) ;

   6713  2 000717   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000720   000000 701000 xent               TSX1    TOU$GET_CP6_OBJECT
         2 000721   000750 702000 2                  TSX2    ERROR

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:140  
      793     6714    4         END /* WHILE */ ;

   6714  2 000722   000000 235000 xsym               LDA     FILE_EOF
         2 000723   000677 600000 2                  TZE     s:6707

      794     6715    3         CALL B_SAVE_SUBCATALOG (DUP.IFAD.FID, '~FM         ') ALTRET (ERROR) ;

   6715  2 000724   000003 236000 3                  LDQ     3
         2 000725   200014 756100                    STQ     @SAVE_TYPE+1,,AUTO
         2 000726   000004 236000 3                  LDQ     4
         2 000727   200013 756100                    STQ     I+2,,AUTO
         2 000730   002627 701000 2                  TSX1    B_SAVE_SUBCATALOG
         2 000731   000750 702000 2                  TSX2    ERROR

      795     6716    3         CALL B_SAVE_CATALOG ('BUILD') ALTRET (ERROR) ;

   6716  2 000732   000005 236000 3                  LDQ     5
         2 000733   200013 756100                    STQ     I+2,,AUTO
         2 000734   002656 701000 2                  TSX1    B_SAVE_CATALOG
         2 000735   000750 702000 2                  TSX2    ERROR

      796     6717    3         CALL B_SAVE_MASTER_ENTRY ALTRET (ERROR) ;

   6717  2 000736   002727 701000 2                  TSX1    B_SAVE_MASTER_ENTRY
         2 000737   000750 702000 2                  TSX2    ERROR

      797     6718    3         CALL TOU$GET_CP6_OBJECT ALTRET (ERROR) ;

   6718  2 000740   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000741   000000 701000 xent               TSX1    TOU$GET_CP6_OBJECT
         2 000742   000750 702000 2                  TSX2    ERROR

      798     6719    3      END /* WHILE */ ;

   6719  2 000743   000000 235000 xsym               LDA     FILE_EOF
         2 000744   000002 115007                    CMPA    2,DL
         2 000745   000671 602000 2                  TNC     s:6704
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:141  

      799     6720    2      RETURN ;

   6720  2 000746   200010 221300                    LDX1  ! VOLUME#+1,,AUTO
         2 000747   000001 702211                    TSX2  ! 1,X1

      800     6721
      801     6722    2   ERROR:
      802     6723    2      CALL B_ERR_MSG (%E$BPI_NO_DF) ;

   6723  2 000750   000007 236000 3     ERROR        LDQ     7
         2 000751   200017 756100                    STQ     HDR$+2,,AUTO
         2 000752   003340 701000 2                  TSX1    B_ERR_MSG
         2 000753   000000 011000                    NOP     0

      803     6724    2      ALTRETURN ;

   6724  2 000754   200010 221300                    LDX1  ! VOLUME#+1,,AUTO
         2 000755   000000 702211                    TSX2  ! 0,X1

      804     6725
      805     6726    2   END B_PROCESS_IFAD ;
      806     6727        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:142  
      807     6728        /*I*  NAME:        B_GET_CATALOG
      808     6729              AUTHOR:      David M. Augustine
      809     6730              PURPOSE:     Gets Catalog
      810     6731              INTERFACE:   None Called.
      811     6732              INPUT:       LAST.DECK#
      812     6733              OUTPUT:      CATALOG_KEY.DECK#
      813     6734                           CATALOG_DATA
      814     6735                           CATALOG_ENTRY_KEY
      815     6736                           LAST.DECK#
      816     6737                           FILE_EOF
      817     6738              DESCRIPTION: This procedure  gets a catalog  by initializing
      818     6739                           catalog values to appropriate  starting values.
      819     6740                           The last deck number is increased by  one since
      820     6741                           the current value is used as the deck number of
      821     6742                           the catalog.
      822     6743        */
      823     6744
      824     6745    1   B_GET_CATALOG: PROC ;

   6745  2 000756   200012 741300       B_GET_CATAL* STX1  ! I+1,,AUTO

      825     6746
      826     6747        /* Code */
      827     6748
      828     6749    2      CATALOG_KEY.DECK# = LAST.DECK# ;

   6749  2 000757   000000 220000 xsym               LDX0    LAST
         2 000760   000005 440000 xsym               SXL0    CATALOG_KEY+5

      829     6750    2      CATALOG_DATA.DECK# = LAST.DECK#;

   6750  2 000761   000000 740000 xsym               STX0    CATALOG_DATA

      830     6751    2      CATALOG_DATA.ENTRY_COUNT = 0 ;

   6751  2 000762   000000 222003                    LDX2    0,DU
         2 000763   000000 442000 xsym               SXL2    CATALOG_DATA
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:143  

      831     6752    2      CATALOG_DATA.RFU = 'DEER' ;

   6752  2 000764   000005 236000 1                  LDQ     MASTER_KEY+5
         2 000765   000001 756000 xsym               STQ     CATALOG_DATA+1

      832     6753    2      CATALOG_ENTRY_KEY.DECK# = LAST.DECK#;

   6753  2 000766   000000 236000 xsym               LDQ     LAST
         2 000767   000011 772000                    QRL     9
         2 000770   000000 552030 xsym               STBQ    CATALOG_ENTRY_KEY,'30'O

      833     6754    2      CATALOG_ENTRY_KEY.ENTRY# = 1;

   6754  2 000771   000000 101400                    MRL     fill='000'O
         2 000772   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         2 000773   000000 600002 xsym               ADSC9   CATALOG_ENTRY_KEY        cn=3,n=2

      834     6755    2      LAST.DECK# = LAST.DECK# + 1 ;

   6755  2 000774   000001 623010                    EAX3    1,X0
         2 000775   000000 743000 xsym               STX3    LAST

      835     6756    2      FILE_EOF = 0;

   6756  2 000776   000000 450000 xsym               STZ     FILE_EOF

      836     6757    2      RETURN;

   6757  2 000777   000001 702211                    TSX2  ! 1,X1

      837     6758
      838     6759    2   END B_GET_CATALOG;
      839     6760        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:144  
      840     6761        /*I*  NAME:        B_SET_CATALOG_KEY
      841     6762              AUTHORS:     David M. Augustine
      842     6763                           Scott S. Sheppard
      843     6764              PURPOSE:     Sets Catalog Key from First $Object Card
      844     6765              INTERFACE:   B_SET_FIRMWARE_CATALOG
      845     6766                           B_SET_GECALL_CATALOG
      846     6767                           B_ERR_MSG
      847     6768              INPUT:       OBJECT.BCD.LIBRARY
      848     6769                           OBJECT.BCD.LOAD_TYPE
      849     6770              OUTPUT:      Catalog key set by called routine.
      850     6771              DESCRIPTION: This procedure validates the object library  and
      851     6772                           load type and calls  the  appropriate module  to
      852     6773                           set the catalog key.
      853     6774
      854     6775                           This procedure is NOT used for the NIO
      855     6776                           catalog.
      856     6777        */
      857     6778        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:145  
      858     6779    1   B_SET_CATALOG_KEY: PROC ALTRET ;

   6779  2 001000   200012 741300       B_SET_CATAL* STX1  ! I+1,,AUTO

      859     6780
      860     6781        /* Code */
      861     6782
      862     6783    3      DO SELECT (OBJECT.BCD.LIBRARY) ;

   6783  2 001001   040000 106400                    CMPC    fill='040'O
         2 001002   000003 600006 xsym               ADSC9   OBJECT+3                 cn=3,n=6
         2 001003   000020 000006 1                  ADSC9   MASTER_KEY+16            cn=0,n=6
         2 001004   001101 602000 2                  TNC     s:6801
         2 001005   001013 600000 2                  TZE     s:6785
         2 001006   040000 106400                    CMPC    fill='040'O
         2 001007   000003 600006 xsym               ADSC9   OBJECT+3                 cn=3,n=6
         2 001010   000022 000004 1                  ADSC9   MASTER_KEY+18            cn=0,n=4
         2 001011   001101 601000 2                  TNZ     s:6801
         2 001012   001046 710000 2                  TRA     s:6793

      863     6784    3         SELECT ('HMPCJ1') ;

      864     6785    4         DO SELECT (OBJECT.BCD.LOAD_TYPE) ;

   6785  2 001013   000005 236000 xsym               LDQ     OBJECT+5
         2 001014   000777 376003                    ANQ     511,DU
         2 001015   000120 116003                    CMPQ    80,DU
         2 001016   001030 602000 2                  TNC     s:6785+13
         2 001017   000005 236000 xsym               LDQ     OBJECT+5
         2 001020   000777 376003                    ANQ     511,DU
         2 001021   000120 116003                    CMPQ    80,DU
         2 001022   001035 600000 2                  TZE     s:6787
         2 001023   000005 236000 xsym               LDQ     OBJECT+5
         2 001024   000777 376003                    ANQ     511,DU
         2 001025   000122 116003                    CMPQ    82,DU
         2 001026   001040 601000 2                  TNZ     s:6789
         2 001027   001035 710000 2                  TRA     s:6787
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:146  
         2 001030   000005 236000 xsym               LDQ     OBJECT+5
         2 001031   000777 376003                    ANQ     511,DU
         2 001032   000104 116003                    CMPQ    68,DU
         2 001033   001040 601000 2                  TNZ     s:6789
         2 001034   001035 710000 2                  TRA     s:6787

      865     6786    4            SELECT ('D', 'R', 'P') ;

      866     6787    4            CALL B_SET_FIRMWARE_CATALOG ALTRET (ERROR) ;

   6787  2 001035   001111 701000 2                  TSX1    B_SET_FIRMWARE_CATALOG
         2 001036   001105 702000 2                  TSX2    ERROR
         2 001037   001107 710000 2                  TRA     s:6805

      867     6788    4            SELECT (ELSE) ;

      868     6789    4         CALL B_ERR_MSG (%E$BSCK_OBJ_LOADER) ;

   6789  2 001040   000011 236000 3                  LDQ     9
         2 001041   200017 756100                    STQ     HDR$+2,,AUTO
         2 001042   003340 701000 2                  TSX1    B_ERR_MSG
         2 001043   000000 011000                    NOP     0

      869     6790    4         ALTRETURN ;

   6790  2 001044   200012 221300                    LDX1  ! I+1,,AUTO
         2 001045   000000 702211                    TSX2  ! 0,X1

      870     6791    4         END /* SELECT */ ;

      871     6792    3      SELECT ('HTND') ;

      872     6793    4      DO SELECT (OBJECT.BCD.LOAD_TYPE) ;

   6793  2 001046   000005 236000 xsym               LDQ     OBJECT+5
         2 001047   000777 376003                    ANQ     511,DU
         2 001050   000120 116003                    CMPQ    80,DU
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:147  
         2 001051   001063 602000 2                  TNC     s:6793+13
         2 001052   000005 236000 xsym               LDQ     OBJECT+5
         2 001053   000777 376003                    ANQ     511,DU
         2 001054   000120 116003                    CMPQ    80,DU
         2 001055   001070 600000 2                  TZE     s:6795
         2 001056   000005 236000 xsym               LDQ     OBJECT+5
         2 001057   000777 376003                    ANQ     511,DU
         2 001060   000122 116003                    CMPQ    82,DU
         2 001061   001073 601000 2                  TNZ     s:6797
         2 001062   001070 710000 2                  TRA     s:6795
         2 001063   000005 236000 xsym               LDQ     OBJECT+5
         2 001064   000777 376003                    ANQ     511,DU
         2 001065   000104 116003                    CMPQ    68,DU
         2 001066   001073 601000 2                  TNZ     s:6797
         2 001067   001070 710000 2                  TRA     s:6795

      873     6794    4         SELECT ('D', 'R', 'P') ;

      874     6795    4         CALL B_SET_GECALL_CATALOG ALTRET (ERROR) ;

   6795  2 001070   001273 701000 2                  TSX1    B_SET_GECALL_CATALOG
         2 001071   001105 702000 2                  TSX2    ERROR
         2 001072   001107 710000 2                  TRA     s:6805

      875     6796    4         SELECT (ELSE) ;

      876     6797    4      CALL B_ERR_MSG (%E$BSCK_OBJ_LOADER) ;

   6797  2 001073   000011 236000 3                  LDQ     9
         2 001074   200017 756100                    STQ     HDR$+2,,AUTO
         2 001075   003340 701000 2                  TSX1    B_ERR_MSG
         2 001076   000000 011000                    NOP     0

      877     6798    4      ALTRETURN ;

   6798  2 001077   200012 221300                    LDX1  ! I+1,,AUTO
         2 001100   000000 702211                    TSX2  ! 0,X1
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:148  

      878     6799    4      END /* SELECT */ ;

      879     6800    3      SELECT (ELSE) ;

      880     6801    3      CALL B_ERR_MSG (%E$BSCK_OBJ_LIB) ;

   6801  2 001101   000013 236000 3                  LDQ     11
         2 001102   200017 756100                    STQ     HDR$+2,,AUTO
         2 001103   003340 701000 2                  TSX1    B_ERR_MSG
         2 001104   000000 011000                    NOP     0

      881     6802    3   ERROR:
      882     6803    3      ALTRETURN ;

   6803  2 001105   200012 221300       ERROR        LDX1  ! I+1,,AUTO
         2 001106   000000 702211                    TSX2  ! 0,X1

      883     6804    3      END /* SELECT */ ;

      884     6805    2      RETURN;

   6805  2 001107   200012 221300                    LDX1  ! I+1,,AUTO
         2 001110   000001 702211                    TSX2  ! 1,X1

      885     6806
      886     6807        /* END B_SET_CATALOG_KEY */
      887     6808        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:149  
      888     6809        /*I*  NAME:        B_SET_FIRMWARE_CATALOG
      889     6810              AUTHORS:     David M. Augustine
      890     6811                           Scott S. Sheppard
      891     6812              PURPOSE:     Sets the Catalog Key
      892     6813              INTERFACE:   B_ERR_MSG
      893     6814              INPUT:       OBJECT.BCD.CLASS
      894     6815              OUTPUT:      CATALOG_KEY_SET
      895     6816                           DUP.HDR_CODE
      896     6817                           DUP.MSG_CODE
      897     6818                           CATALOG_KEY
      898     6819                           CATALOG_TYPE
      899     6820              DESCRIPTION: This procedure sets the catalog key for ITR and
      900     6821                           MDR catalogs. Note that the key is not complete
      901     6822                           for ITR catalogs, since the  device model  must
      902     6823                           be appended to the key when the  first firmware
      903     6824                           deck for the catalog is encountered.
      904     6825        */
      905     6826        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:150  
      906     6827    2   B_SET_FIRMWARE_CATALOG: PROC ALTRET ;

   6827  2 001111   200014 741300       B_SET_FIRMW* STX1  ! @SAVE_TYPE+1,,AUTO

      907     6828
      908     6829        /* Code */
      909     6830
      910     6831    4      DO SELECT (OBJECT.BCD.CLASS) ;

   6831  2 001112   000005 236000 xsym               LDQ     OBJECT+5
         2 001113   777000 376007                    ANQ     -512,DL
         2 001114   111000 116007                    CMPQ    37376,DL
         2 001115   001137 602000 2                  TNC     s:6831+21
         2 001116   000005 236000 xsym               LDQ     OBJECT+5
         2 001117   777000 376007                    ANQ     -512,DL
         2 001120   111000 116007                    CMPQ    37376,DL
         2 001121   001246 600000 2                  TZE     s:6848
         2 001122   000005 236000 xsym               LDQ     OBJECT+5
         2 001123   777000 376007                    ANQ     -512,DL
         2 001124   120000 116007                    CMPQ    40960,DL
         2 001125   001264 602000 2                  TNC     s:6854
         2 001126   000005 236000 xsym               LDQ     OBJECT+5
         2 001127   777000 376007                    ANQ     -512,DL
         2 001130   120000 116007                    CMPQ    40960,DL
         2 001131   001161 600000 2                  TZE     s:6833
         2 001132   000005 236000 xsym               LDQ     OBJECT+5
         2 001133   777000 376007                    ANQ     -512,DL
         2 001134   124000 116007                    CMPQ    43008,DL
         2 001135   001264 601000 2                  TNZ     s:6854
         2 001136   001161 710000 2                  TRA     s:6833
         2 001137   000005 236000 xsym               LDQ     OBJECT+5
         2 001140   777000 376007                    ANQ     -512,DL
         2 001141   104000 116007                    CMPQ    34816,DL
         2 001142   001154 602000 2                  TNC     s:6831+34
         2 001143   000005 236000 xsym               LDQ     OBJECT+5
         2 001144   777000 376007                    ANQ     -512,DL
         2 001145   104000 116007                    CMPQ    34816,DL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:151  
         2 001146   001161 600000 2                  TZE     s:6833
         2 001147   000005 236000 xsym               LDQ     OBJECT+5
         2 001150   777000 376007                    ANQ     -512,DL
         2 001151   106000 116007                    CMPQ    35840,DL
         2 001152   001264 601000 2                  TNZ     s:6854
         2 001153   001246 710000 2                  TRA     s:6848
         2 001154   000005 236000 xsym               LDQ     OBJECT+5
         2 001155   777000 376007                    ANQ     -512,DL
         2 001156   103000 116007                    CMPQ    34304,DL
         2 001157   001264 601000 2                  TNZ     s:6854
         2 001160   001161 710000 2                  TRA     s:6833

      911     6832    4         SELECT ('T', 'P', 'C', 'D') ;

      912     6833    4         CATALOG_KEY_SET = %TRUE ;

   6833  2 001161   400000 236003                    LDQ     -131072,DU
         2 001162   000046 756000 0                  STQ     CATALOG_KEY_SET

      913     6834    4         DUP.HDR_CODE = %H$BUILD_MDR ;

   6834  2 001163   001310 235007                    LDA     712,DL
         2 001164   000021 755000 xsym               STA     DUP+17

      914     6835    4         DUP.MSG_CODE = %T$B_MDR ;

   6835  2 001165   000032 235007                    LDA     26,DL
         2 001166   000020 755000 xsym               STA     DUP+16

      915     6836    5         DO SELECT (OBJECT.BCD.CLASS) ;

   6836  2 001167   000005 236000 xsym               LDQ     OBJECT+5
         2 001170   777000 376007                    ANQ     -512,DL
         2 001171   120000 116007                    CMPQ    40960,DL
         2 001172   001204 602000 2                  TNC     s:6836+13
         2 001173   000005 236000 xsym               LDQ     OBJECT+5
         2 001174   777000 376007                    ANQ     -512,DL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:152  
         2 001175   120000 116007                    CMPQ    40960,DL
         2 001176   001225 600000 2                  TZE     s:6840
         2 001177   000005 236000 xsym               LDQ     OBJECT+5
         2 001200   777000 376007                    ANQ     -512,DL
         2 001201   124000 116007                    CMPQ    43008,DL
         2 001202   001240 601000 2                  TNZ     s:6846
         2 001203   001221 710000 2                  TRA     s:6838
         2 001204   000005 236000 xsym               LDQ     OBJECT+5
         2 001205   777000 376007                    ANQ     -512,DL
         2 001206   103000 116007                    CMPQ    34304,DL
         2 001207   001240 602000 2                  TNC     s:6846
         2 001210   000005 236000 xsym               LDQ     OBJECT+5
         2 001211   777000 376007                    ANQ     -512,DL
         2 001212   103000 116007                    CMPQ    34304,DL
         2 001213   001231 600000 2                  TZE     s:6842
         2 001214   000005 236000 xsym               LDQ     OBJECT+5
         2 001215   777000 376007                    ANQ     -512,DL
         2 001216   104000 116007                    CMPQ    34816,DL
         2 001217   001240 601000 2                  TNZ     s:6846
         2 001220   001235 710000 2                  TRA     s:6844

      916     6837    5            SELECT ('T') ;

      917     6838    5            CATALOG_KEY.DATA = 'CATA.MDR.TAPE' ;

   6838  2 001221   040000 100400                    MLR     fill='040'O
         2 001222   000023 000015 1                  ADSC9   MASTER_KEY+19            cn=0,n=13
         2 001223   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21
         2 001224   001240 710000 2                  TRA     s:6846

      918     6839    5            SELECT ('P') ;

      919     6840    5            CATALOG_KEY.DATA = 'CATA.MDR.PRINT' ;

   6840  2 001225   040000 100400                    MLR     fill='040'O
         2 001226   000027 000016 1                  ADSC9   MASTER_KEY+23            cn=0,n=14
         2 001227   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:153  
         2 001230   001240 710000 2                  TRA     s:6846

      920     6841    5            SELECT ('C') ;

      921     6842    5            CATALOG_KEY.DATA = 'CATA.MDR.CARD' ;

   6842  2 001231   040000 100400                    MLR     fill='040'O
         2 001232   000033 000015 1                  ADSC9   MASTER_KEY+27            cn=0,n=13
         2 001233   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21
         2 001234   001240 710000 2                  TRA     s:6846

      922     6843    5            SELECT ('D') ;

      923     6844    5            CATALOG_KEY.DATA = 'CATA.MDR.DISK' ;

   6844  2 001235   040000 100400                    MLR     fill='040'O
         2 001236   000037 000015 1                  ADSC9   MASTER_KEY+31            cn=0,n=13
         2 001237   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21

      924     6845    5         END /* SELECT */ ;

      925     6846    4         CATALOG_TYPE = OBJECT.BCD.CLASS ;

   6846  2 001240   000005 236000 xsym               LDQ     OBJECT+5
         2 001241   000022 736000                    QLS     18
         2 001242   777000 376003                    ANQ     -512,DU
         2 001243   000014 276000 3                  ORQ     12
         2 001244   000047 756000 0                  STQ     CATALOG_TYPE
         2 001245   001272 710000 2                  TRA     s:6857

      926     6847    4         SELECT ('I', 'F') ;

      927     6848    4         CATALOG_KEY_SET = %FALSE ;

   6848  2 001246   000046 450000 0                  STZ     CATALOG_KEY_SET

      928     6849    4         DUP.HDR_CODE = %H$BUILD_ITR ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:154  

   6849  2 001247   001307 235007                    LDA     711,DL
         2 001250   000021 755000 xsym               STA     DUP+17

      929     6850    4         DUP.MSG_CODE = %T$B_ITR ;

   6850  2 001251   000031 236007                    LDQ     25,DL
         2 001252   000020 756000 xsym               STQ     DUP+16

      930     6851    4         CATALOG_KEY.DATA = 'CATA.ITR.';

   6851  2 001253   040000 100400                    MLR     fill='040'O
         2 001254   000043 000011 1                  ADSC9   MASTER_KEY+35            cn=0,n=9
         2 001255   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21

      931     6852    4         CATALOG_TYPE = OBJECT.BCD.CLASS ;

   6852  2 001256   000005 236000 xsym               LDQ     OBJECT+5
         2 001257   000022 736000                    QLS     18
         2 001260   777000 376003                    ANQ     -512,DU
         2 001261   000014 276000 3                  ORQ     12
         2 001262   000047 756000 0                  STQ     CATALOG_TYPE
         2 001263   001272 710000 2                  TRA     s:6857

      932     6853    4         SELECT (ELSE) ;

      933     6854    4      CALL B_ERR_MSG (%E$BSFC_OBJ_CLASS) ;

   6854  2 001264   000016 236000 3                  LDQ     14
         2 001265   200017 756100                    STQ     HDR$+2,,AUTO
         2 001266   003340 701000 2                  TSX1    B_ERR_MSG
         2 001267   000000 011000                    NOP     0

      934     6855    4      ALTRETURN ;

   6855  2 001270   200014 221300                    LDX1  ! @SAVE_TYPE+1,,AUTO
         2 001271   000000 702211                    TSX2  ! 0,X1
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:155  

      935     6856    4      END /* SELECT */ ;

      936     6857    3      RETURN;

   6857  2 001272   000001 702211                    TSX2  ! 1,X1

      937     6858
      938     6859    3   END B_SET_FIRMWARE_CATALOG;
      939     6860        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:156  
      940     6861        /*I*  NAME:        B_SET_GECALL_CATALOG
      941     6862              AUTHORS:     Scott S. Sheppard
      942     6863                           David M. Augustine
      943     6864              PURPOSE:     Sets Catalog Key for GECALL Catalogs
      944     6865              INTERFACE:   B_ERR_MSG
      945     6866              INPUT:       OBJECT.BCD.CLASS
      946     6867              OUTPUT:      CATALOG_KEY_SET
      947     6868                           DUP.HDR_CODE
      948     6869                           DUP.MSG_CODE
      949     6870                           CATALOG_KEY
      950     6871                           CATALOG_TYPE
      951     6872              DESCRIPTION: This procedure sets the catalog key for the
      952     6873                           GECALL catalog based on the object class of
      953     6874                           the  first object deck  encountered for the
      954     6875                           catalog.
      955     6876                           The  PACT  catalog  is  no  longer  needed
      956     6877                           by TOLTS, but has  been  left  in  so DEER
      957     6878                           will remain compatible with old IFAD tapes
      958     6879        */
      959     6880        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:157  
      960     6881    2   B_SET_GECALL_CATALOG: PROC ALTRET ;

   6881  2 001273   200014 741300       B_SET_GECAL* STX1  ! @SAVE_TYPE+1,,AUTO

      961     6882
      962     6883        /* Code */
      963     6884
      964     6885    3      CATALOG_KEY_SET = %TRUE ;

   6885  2 001274   400000 236003                    LDQ     -131072,DU
         2 001275   000046 756000 0                  STQ     CATALOG_KEY_SET

      965     6886    3      DUP.HDR_CODE = %H$BUILD_PROG ;

   6886  2 001276   001311 235007                    LDA     713,DL
         2 001277   000021 755000 xsym               STA     DUP+17

      966     6887    3      DUP.MSG_CODE = %T$B_GECALL ;

   6887  2 001300   000030 235007                    LDA     24,DL
         2 001301   000020 755000 xsym               STA     DUP+16

      967     6888
      968     6889    4      DO SELECT (OBJECT.BCD.CLASS) ;

   6889  2 001302   000005 236000 xsym               LDQ     OBJECT+5
         2 001303   777000 376007                    ANQ     -512,DL
         2 001304   120000 116007                    CMPQ    40960,DL
         2 001305   001327 602000 2                  TNC     s:6889+21
         2 001306   000005 236000 xsym               LDQ     OBJECT+5
         2 001307   777000 376007                    ANQ     -512,DL
         2 001310   120000 116007                    CMPQ    40960,DL
         2 001311   001365 600000 2                  TZE     s:6897
         2 001312   000005 236000 xsym               LDQ     OBJECT+5
         2 001313   777000 376007                    ANQ     -512,DL
         2 001314   123000 116007                    CMPQ    42496,DL
         2 001315   001401 602000 2                  TNC     s:6903
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:158  
         2 001316   000005 236000 xsym               LDQ     OBJECT+5
         2 001317   777000 376007                    ANQ     -512,DL
         2 001320   123000 116007                    CMPQ    42496,DL
         2 001321   001371 600000 2                  TZE     s:6899
         2 001322   000005 236000 xsym               LDQ     OBJECT+5
         2 001323   777000 376007                    ANQ     -512,DL
         2 001324   125000 116007                    CMPQ    43520,DL
         2 001325   001401 601000 2                  TNZ     s:6903
         2 001326   001375 710000 2                  TRA     s:6901
         2 001327   000005 236000 xsym               LDQ     OBJECT+5
         2 001330   777000 376007                    ANQ     -512,DL
         2 001331   103000 116007                    CMPQ    34304,DL
         2 001332   001344 602000 2                  TNC     s:6889+34
         2 001333   000005 236000 xsym               LDQ     OBJECT+5
         2 001334   777000 376007                    ANQ     -512,DL
         2 001335   103000 116007                    CMPQ    34304,DL
         2 001336   001355 600000 2                  TZE     s:6893
         2 001337   000005 236000 xsym               LDQ     OBJECT+5
         2 001340   777000 376007                    ANQ     -512,DL
         2 001341   115000 116007                    CMPQ    39424,DL
         2 001342   001401 601000 2                  TNZ     s:6903
         2 001343   001361 710000 2                  TRA     s:6895
         2 001344   000005 236000 xsym               LDQ     OBJECT+5
         2 001345   777000 376007                    ANQ     -512,DL
         2 001346   101000 116007                    CMPQ    33280,DL
         2 001347   001401 601000 2                  TNZ     s:6903
         2 001350   001351 710000 2                  TRA     s:6891

      969     6890    4         SELECT ('A') ;

      970     6891    4         CATALOG_KEY.DATA = 'CATA.PCT' ;

   6891  2 001351   040000 100400                    MLR     fill='040'O
         2 001352   000046 000010 1                  ADSC9   MASTER_KEY+38            cn=0,n=8
         2 001353   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21
         2 001354   001407 710000 2                  TRA     s:6907

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:159  
      971     6892    4         SELECT ('C') ;

      972     6893    4         CATALOG_KEY.DATA = 'CATA.CLT' ;

   6893  2 001355   040000 100400                    MLR     fill='040'O
         2 001356   000050 000010 1                  ADSC9   MASTER_KEY+40            cn=0,n=8
         2 001357   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21
         2 001360   001407 710000 2                  TRA     s:6907

      973     6894    4         SELECT ('M') ;

      974     6895    4         CATALOG_KEY.DATA = 'CATA.MLT' ;

   6895  2 001361   040000 100400                    MLR     fill='040'O
         2 001362   000052 000010 1                  ADSC9   MASTER_KEY+42            cn=0,n=8
         2 001363   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21
         2 001364   001407 710000 2                  TRA     s:6907

      975     6896    4         SELECT ('P') ;

      976     6897    4         CATALOG_KEY.DATA = 'CATA.PLT' ;

   6897  2 001365   040000 100400                    MLR     fill='040'O
         2 001366   000054 000010 1                  ADSC9   MASTER_KEY+44            cn=0,n=8
         2 001367   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21
         2 001370   001407 710000 2                  TRA     s:6907

      977     6898    4         SELECT ('S') ;

      978     6899    4         CATALOG_KEY.DATA = 'CATA.SLT' ;

   6899  2 001371   040000 100400                    MLR     fill='040'O
         2 001372   000056 000010 1                  ADSC9   MASTER_KEY+46            cn=0,n=8
         2 001373   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21
         2 001374   001407 710000 2                  TRA     s:6907

      979     6900    4         SELECT ('U') ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:160  

      980     6901    4         CATALOG_KEY.DATA = 'CATA.UTL' ;

   6901  2 001375   040000 100400                    MLR     fill='040'O
         2 001376   000060 000010 1                  ADSC9   MASTER_KEY+48            cn=0,n=8
         2 001377   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21
         2 001400   001407 710000 2                  TRA     s:6907

      981     6902    4         SELECT (ELSE) ;

      982     6903    4      CALL B_ERR_MSG (%E$BSFC_OBJ_CLASS) ;

   6903  2 001401   000016 236000 3                  LDQ     14
         2 001402   200017 756100                    STQ     HDR$+2,,AUTO
         2 001403   003340 701000 2                  TSX1    B_ERR_MSG
         2 001404   000000 011000                    NOP     0

      983     6904    4      ALTRETURN ;

   6904  2 001405   200014 221300                    LDX1  ! @SAVE_TYPE+1,,AUTO
         2 001406   000000 702211                    TSX2  ! 0,X1

      984     6905    4      END /* SELECT */ ;

      985     6906
      986     6907    3      CATALOG_TYPE = OBJECT.BCD.CLASS ;

   6907  2 001407   000005 236000 xsym               LDQ     OBJECT+5
         2 001410   000022 736000                    QLS     18
         2 001411   777000 376003                    ANQ     -512,DU
         2 001412   000014 276000 3                  ORQ     12
         2 001413   000047 756000 0                  STQ     CATALOG_TYPE

      987     6908    3      RETURN;

   6908  2 001414   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:161  
      988     6909
      989     6910    3   END B_SET_GECALL_CATALOG;
      990     6911    2   END B_SET_CATALOG_KEY ;
      991     6912        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:162  
      992     6913        /*I*  NAME:        B_SET_OBJECT_KEY
      993     6914              AUTHORS:     David M. Augustine
      994     6915                           Scott S. Sheppard
      995     6916              PURPOSE:     Sets OBJECT keys
      996     6917              INTERFACE:   B_SET_GECALL_KEY
      997     6918                           B_SET_MPC_KEY
      998     6919                           B_SET_DIPPER_KEY
      999     6920              INPUT:       OBJECT.BCD.LIBRARY
     1000     6921              OUTPUT:      OBJECT_KEY.DATA
     1001     6922              DESCRIPTION: This procedure calls the appropriate module to set
     1002     6923                           the object key based on the library of the  object
     1003     6924                           deck.
     1004     6925        */
     1005     6926
     1006     6927    1   B_SET_OBJECT_KEY: PROC ALTRET ;

   6927  2 001415   200012 741300       B_SET_OBJEC* STX1  ! I+1,,AUTO

     1007     6928
     1008     6929        /* Code */
     1009     6930
     1010     6931    3      DO SELECT (OBJECT.BCD.LIBRARY) ;

   6931  2 001416   040000 106400                    CMPC    fill='040'O
         2 001417   000003 600006 xsym               ADSC9   OBJECT+3                 cn=3,n=6
         2 001420   000062 000006 1                  ADSC9   MASTER_KEY+50            cn=0,n=6
         2 001421   001430 602000 2                  TNC     s:6931+10
         2 001422   001443 600000 2                  TZE     s:6937
         2 001423   040000 106400                    CMPC    fill='040'O
         2 001424   000003 600006 xsym               ADSC9   OBJECT+3                 cn=3,n=6
         2 001425   000022 000004 1                  ADSC9   MASTER_KEY+18            cn=0,n=4
         2 001426   001446 601000 2                  TNZ     s:6939
         2 001427   001440 710000 2                  TRA     s:6935
         2 001430   040000 106400                    CMPC    fill='040'O
         2 001431   000003 600006 xsym               ADSC9   OBJECT+3                 cn=3,n=6
         2 001432   000020 000006 1                  ADSC9   MASTER_KEY+16            cn=0,n=6
         2 001433   001446 601000 2                  TNZ     s:6939
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:163  
         2 001434   001435 710000 2                  TRA     s:6933

     1011     6932    3         SELECT ('HMPCJ1') ;

     1012     6933    3         CALL B_SET_MPC_KEY ;

   6933  2 001435   002005 701000 2                  TSX1    B_SET_MPC_KEY
         2 001436   000000 011000                    NOP     0
         2 001437   001454 710000 2                  TRA     s:6942

     1013     6934    3         SELECT ('HTND') ;

     1014     6935    3         CALL B_SET_GECALL_KEY ;

   6935  2 001440   001456 701000 2                  TSX1    B_SET_GECALL_KEY
         2 001441   000000 011000                    NOP     0
         2 001442   001454 710000 2                  TRA     s:6942

     1015     6936    3         SELECT ('HNIOA0') ;

     1016     6937    3         CALL B_SET_DIPPER_KEY ;

   6937  2 001443   002225 701000 2                  TSX1    B_SET_DIPPER_KEY
         2 001444   000000 011000                    NOP     0
         2 001445   001454 710000 2                  TRA     s:6942

     1017     6938    3         SELECT (ELSE) ;

     1018     6939    3      CALL B_ERR_MSG (%E$BSCK_OBJ_LIB) ;

   6939  2 001446   000013 236000 3                  LDQ     11
         2 001447   200017 756100                    STQ     HDR$+2,,AUTO
         2 001450   003340 701000 2                  TSX1    B_ERR_MSG
         2 001451   000000 011000                    NOP     0

     1019     6940    3      ALTRETURN ;

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:164  
   6940  2 001452   200012 221300                    LDX1  ! I+1,,AUTO
         2 001453   000000 702211                    TSX2  ! 0,X1

     1020     6941    3      END /* SELECT */ ;

     1021     6942    2      RETURN;

   6942  2 001454   200012 221300                    LDX1  ! I+1,,AUTO
         2 001455   000001 702211                    TSX2  ! 1,X1

     1022     6943
     1023     6944        /* END B_SET_OBJECT_KEY */
     1024     6945        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:165  
     1025     6946        /*I*  NAME:        B_SET_GECALL_KEY
     1026     6947              AUTHORS:     David M. Augustine
     1027     6948                           Scott S. Sheppard
     1028     6949              PURPOSE:     Sets GECALL keys
     1029     6950              INTERFACE:   CONCAT function
     1030     6951                           B_SQUISH_GIFM_DECK
     1031     6952              INPUT:       OBJECT.BCD.CLASS
     1032     6953                           OBJECT.BCD.GECALL
     1033     6954              OUTPUT:      OBJECT_KEY.DATA
     1034     6955              DESCRIPTION: This procedure sets the object key for a GECALL
     1035     6956                           type object deck.
     1036     6957        */
     1037     6958
     1038     6959    2   B_SET_GECALL_KEY: PROC ;

   6959  2 001456   200014 741300       B_SET_GECAL* STX1  ! @SAVE_TYPE+1,,AUTO

     1039     6960
     1040     6961        /* Code */
     1041     6962
     1042     6963    4      DO SELECT (OBJECT.BCD.CLASS) ;

   6963  2 001457   000005 236000 xsym               LDQ     OBJECT+5
         2 001460   777000 376007                    ANQ     -512,DL
         2 001461   120000 116007                    CMPQ    40960,DL
         2 001462   001504 602000 2                  TNC     s:6963+21
         2 001463   000005 236000 xsym               LDQ     OBJECT+5
         2 001464   777000 376007                    ANQ     -512,DL
         2 001465   120000 116007                    CMPQ    40960,DL
         2 001466   001561 600000 2                  TZE     s:6971
         2 001467   000005 236000 xsym               LDQ     OBJECT+5
         2 001470   777000 376007                    ANQ     -512,DL
         2 001471   123000 116007                    CMPQ    42496,DL
         2 001472   001615 602000 2                  TNC     s:6978
         2 001473   000005 236000 xsym               LDQ     OBJECT+5
         2 001474   777000 376007                    ANQ     -512,DL
         2 001475   123000 116007                    CMPQ    42496,DL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:166  
         2 001476   001572 600000 2                  TZE     s:6973
         2 001477   000005 236000 xsym               LDQ     OBJECT+5
         2 001500   777000 376007                    ANQ     -512,DL
         2 001501   125000 116007                    CMPQ    43520,DL
         2 001502   001615 601000 2                  TNZ     s:6978
         2 001503   001603 710000 2                  TRA     s:6975
         2 001504   000005 236000 xsym               LDQ     OBJECT+5
         2 001505   777000 376007                    ANQ     -512,DL
         2 001506   103000 116007                    CMPQ    34304,DL
         2 001507   001521 602000 2                  TNC     s:6963+34
         2 001510   000005 236000 xsym               LDQ     OBJECT+5
         2 001511   777000 376007                    ANQ     -512,DL
         2 001512   103000 116007                    CMPQ    34304,DL
         2 001513   001537 600000 2                  TZE     s:6967
         2 001514   000005 236000 xsym               LDQ     OBJECT+5
         2 001515   777000 376007                    ANQ     -512,DL
         2 001516   115000 116007                    CMPQ    39424,DL
         2 001517   001615 601000 2                  TNZ     s:6978
         2 001520   001550 710000 2                  TRA     s:6969
         2 001521   000005 236000 xsym               LDQ     OBJECT+5
         2 001522   777000 376007                    ANQ     -512,DL
         2 001523   101000 116007                    CMPQ    33280,DL
         2 001524   001615 601000 2                  TNZ     s:6978
         2 001525   001526 710000 2                  TRA     s:6965

     1043     6964    4         SELECT ('A') ;

     1044     6965    4         CALL CONCAT (OBJECT_KEY.DATA, 'PCT', '.', OBJECT.BCD.GECALL) ;

   6965  2 001526   000064 236000 1                  LDQ     MASTER_KEY+52
         2 001527   000011 772000                    QRL     9
         2 001530   000000 552034 xsym               STBQ    OBJECT_KEY,'34'O
         2 001531   056000 236003                    LDQ     23552,DU
         2 001532   000001 756000 xsym               STQ     OBJECT_KEY+1
         2 001533   040000 100400                    MLR     fill='040'O
         2 001534   000017 000006 xsym               ADSC9   OBJECT+15                cn=0,n=6
         2 001535   000001 200023 xsym               ADSC9   OBJECT_KEY+1             cn=1,n=19
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:167  
         2 001536   001615 710000 2                  TRA     s:6978

     1045     6966    4         SELECT ('C') ;

     1046     6967    4         CALL CONCAT (OBJECT_KEY.DATA, 'CLT', '.', OBJECT.BCD.GECALL) ;

   6967  2 001537   000065 236000 1                  LDQ     MASTER_KEY+53
         2 001540   000011 772000                    QRL     9
         2 001541   000000 552034 xsym               STBQ    OBJECT_KEY,'34'O
         2 001542   056000 236003                    LDQ     23552,DU
         2 001543   000001 756000 xsym               STQ     OBJECT_KEY+1
         2 001544   040000 100400                    MLR     fill='040'O
         2 001545   000017 000006 xsym               ADSC9   OBJECT+15                cn=0,n=6
         2 001546   000001 200023 xsym               ADSC9   OBJECT_KEY+1             cn=1,n=19
         2 001547   001615 710000 2                  TRA     s:6978

     1047     6968    4         SELECT ('M') ;

     1048     6969    4         CALL CONCAT (OBJECT_KEY.DATA, 'MLT', '.', OBJECT.BCD.GECALL) ;

   6969  2 001550   000066 236000 1                  LDQ     MASTER_KEY+54
         2 001551   000011 772000                    QRL     9
         2 001552   000000 552034 xsym               STBQ    OBJECT_KEY,'34'O
         2 001553   056000 236003                    LDQ     23552,DU
         2 001554   000001 756000 xsym               STQ     OBJECT_KEY+1
         2 001555   040000 100400                    MLR     fill='040'O
         2 001556   000017 000006 xsym               ADSC9   OBJECT+15                cn=0,n=6
         2 001557   000001 200023 xsym               ADSC9   OBJECT_KEY+1             cn=1,n=19
         2 001560   001615 710000 2                  TRA     s:6978

     1049     6970    4         SELECT ('P') ;

     1050     6971    4         CALL CONCAT (OBJECT_KEY.DATA, 'PLT', '.', OBJECT.BCD.GECALL) ;

   6971  2 001561   000067 236000 1                  LDQ     MASTER_KEY+55
         2 001562   000011 772000                    QRL     9
         2 001563   000000 552034 xsym               STBQ    OBJECT_KEY,'34'O
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:168  
         2 001564   056000 236003                    LDQ     23552,DU
         2 001565   000001 756000 xsym               STQ     OBJECT_KEY+1
         2 001566   040000 100400                    MLR     fill='040'O
         2 001567   000017 000006 xsym               ADSC9   OBJECT+15                cn=0,n=6
         2 001570   000001 200023 xsym               ADSC9   OBJECT_KEY+1             cn=1,n=19
         2 001571   001615 710000 2                  TRA     s:6978

     1051     6972    4         SELECT ('S') ;

     1052     6973    4         CALL CONCAT (OBJECT_KEY.DATA, 'SLT', '.', OBJECT.BCD.GECALL) ;

   6973  2 001572   000070 236000 1                  LDQ     MASTER_KEY+56
         2 001573   000011 772000                    QRL     9
         2 001574   000000 552034 xsym               STBQ    OBJECT_KEY,'34'O
         2 001575   056000 236003                    LDQ     23552,DU
         2 001576   000001 756000 xsym               STQ     OBJECT_KEY+1
         2 001577   040000 100400                    MLR     fill='040'O
         2 001600   000017 000006 xsym               ADSC9   OBJECT+15                cn=0,n=6
         2 001601   000001 200023 xsym               ADSC9   OBJECT_KEY+1             cn=1,n=19
         2 001602   001615 710000 2                  TRA     s:6978

     1053     6974    4         SELECT ('U') ;

     1054     6975    4         CALL CONCAT (OBJECT_KEY.DATA, 'UTL', '.', OBJECT.BCD.GECALL) ;

   6975  2 001603   000071 236000 1                  LDQ     MASTER_KEY+57
         2 001604   000011 772000                    QRL     9
         2 001605   000000 552034 xsym               STBQ    OBJECT_KEY,'34'O
         2 001606   056000 236003                    LDQ     23552,DU
         2 001607   000001 756000 xsym               STQ     OBJECT_KEY+1
         2 001610   040000 100400                    MLR     fill='040'O
         2 001611   000017 000006 xsym               ADSC9   OBJECT+15                cn=0,n=6
         2 001612   000001 200023 xsym               ADSC9   OBJECT_KEY+1             cn=1,n=19

     1055     6976    4         CALL B_SQUISH_GIFM_DECK ;

   6976  2 001613   001617 701000 2                  TSX1    B_SQUISH_GIFM_DECK
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:169  
         2 001614   000000 011000                    NOP     0

     1056     6977    4      END /* SELECT */ ;

     1057     6978    3      RETURN;

   6978  2 001615   200014 221300                    LDX1  ! @SAVE_TYPE+1,,AUTO
         2 001616   000001 702211                    TSX2  ! 1,X1

     1058     6979
     1059     6980        /* END B_SET_GECALL_KEY */
     1060     6981        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:170  
     1061     6982        /*I*  NAME:        B_SQUISH_GIFM_DECK
     1062     6983              AUTHOR:      Scott S. Sheppard
     1063     6984              PURPOSE:     Saves only GIFM Shell
     1064     6985              INTERFACE:   TOU$CHECKSUM
     1065     6986                           TOU$REFORM_DECK_CHECKSUM
     1066     6987                           B_COMPUTE_VERSION
     1067     6988              INPUT:       OBJECT
     1068     6989                           BCD_B
     1069     6990                           BINARY_B
     1070     6991                           BCD#
     1071     6992                           BIN#
     1072     6993              OUTPUT:      OBJECT
     1073     6994                           BCD_B
     1074     6995                           BINARY_B
     1075     6996                           BIN#
     1076     6997                           DKEND
     1077     6998                           REVISION_B
     1078     6999              DESCRIPTION: The object deck  GIFM  is applicable to CP-6 only because
     1079     7000                           it always contains a patch that identifies the IFAD tape.
     1080     7001                           GIFM is never executed during TOLTS' operation.  It would
     1081     7002                           be a waste of space to store the  entire object deck,  so
     1082     7003                           only the shell of the binary deck is stored.  The deck is
     1083     7004                           reduced to the  $OBJECT card,  two binary cards,  and the
     1084     7005                           $DKEND card.    The patched location which identifies the
     1085     7006                           IFAD tape is converted to  ASCII  and stored as the title
     1086     7007                           date in the revision.    If the IFAD Tape contains a GIFM
     1087     7008                           module that does  NOT  have  the patch to modify location
     1088     7009                           000002 to contain the IFAD tape version, then the version
     1089     7010                           saved in the deckfile is NOSPEC for NOT SPECIFIED.
     1090     7011        */
     1091     7012        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:171  
     1092     7013    3   B_SQUISH_GIFM_DECK: PROC ;

   7013  2 001617   200016 741300       B_SQUISH_GI* STX1  ! HDR$+1,,AUTO

     1093     7014
     1094     7015    4      DCL P           UBIN WORD ALIGNED ;
     1095     7016    4      DCL VERSION_BCD CHAR (12) CALIGNED ;
     1096     7017
     1097     7018        /* Code */
     1098     7019
     1099     7020    4      IF OBJECT.BCD.LBL = 'GIFM'

   7020  2 001620   000022 236000 xsym               LDQ     OBJECT+18
         2 001621   000072 116000 1                  CMPQ    MASTER_KEY+58
         2 001622   001737 601000 2                  TNZ     s:7042

     1100     7021    5      THEN DO ;

     1101     7022    5              VERSION_BCD = ' ' ;

   7022  2 001623   040100 100400                    MLR     fill='040'O
         2 001624   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 001625   200020 000014                    ADSC9   VERSION_BCD,,AUTO        cn=0,n=12

     1102     7023    5              P = 0 ;

   7023  2 001626   200017 450100                    STZ     P,,AUTO

     1103     7024    6              DO WHILE (P < BCD#-1) ;

   7024  2 001627   001645 710000 2                  TRA     s:7029

     1104     7025    6                 IF SUBSTR (BCD_B(P), 0, 6) = '000002'

   7025  2 001630   200017 236100                    LDQ     P,,AUTO
         2 001631   000124 402007                    MPY     84,DL
         2 001632   000103 470400 xsym               LDP0    DUP+67
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:172  
         2 001633   040000 106506                    CMPC    fill='040'O
         2 001634   000000 000006                    ADSC9   0,Q,PR0                  cn=0,n=6
         2 001635   000073 000006 1                  ADSC9   MASTER_KEY+59            cn=0,n=6
         2 001636   001642 601000 2                  TNZ     s:7028

     1105     7026    6                 THEN VERSION_BCD = SUBSTR (BCD_B(P), 15, 12) ;

   7026  2 001637   040100 100506                    MLR     fill='040'O
         2 001640   000003 600014                    ADSC9   3,Q,PR0                  cn=3,n=12
         2 001641   200020 000014                    ADSC9   VERSION_BCD,,AUTO        cn=0,n=12

     1106     7027    6                 ELSE /* not the patch to identify IFAD version */ ;
     1107     7028    6                 P = P + 1 ;

   7028  2 001642   200017 235100                    LDA     P,,AUTO
         2 001643   000001 035007                    ADLA    1,DL
         2 001644   200017 755100                    STA     P,,AUTO

     1108     7029    6              END /* WHILE */ ;

   7029  2 001645   000044 236000 0                  LDQ     BCD#
         2 001646   000001 136007                    SBLQ    1,DL
         2 001647   001653 604000 2                  TMI     s:7030
         2 001650   200017 116100                    CMPQ    P,,AUTO
         2 001651   001653 600000 2                  TZE     s:7030
         2 001652   001630 603000 2                  TRC     s:7025

     1109     7030    5              IF VERSION_BCD = ' '

   7030  2 001653   040000 106500                    CMPC    fill='040'O
         2 001654   200020 000014                    ADSC9   VERSION_BCD,,AUTO        cn=0,n=12
         2 001655   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 001656   001663 601000 2                  TNZ     s:7032

     1110     7031    5              THEN REVISION_B.VERSION = 'NOSPEC' ;

   7031  2 001657   040000 100400                    MLR     fill='040'O
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:173  
         2 001660   000075 000006 1                  ADSC9   MASTER_KEY+61            cn=0,n=6
         2 001661   000000 000006 xsym               ADSC9   REVISION_B               cn=0,n=6
         2 001662   001671 710000 2                  TRA     s:7033

     1111     7032    5              ELSE CALL B_COMPUTE_VERSION (VERSION_BCD, REVISION_B.VERSION) ;

   7032  2 001663   000017 236000 3                  LDQ     15
         2 001664   200026 756100                    STQ     @DIGIT_VERSION+1,,AUTO
         2 001665   200020 630500                    EPPR0   VERSION_BCD,,AUTO
         2 001666   200025 450500                    STP0    VERSION_BCD+5,,AUTO
         2 001667   001741 701000 2                  TSX1    B_COMPUTE_VERSION
         2 001670   000000 011000                    NOP     0

     1112     7033    5              BINARY_B.OBJ(1) = BINARY_B.OBJ(BIN# - 1) ;

   7033  2 001671   000045 236000 0                  LDQ     BIN#
         2 001672   000150 402007                    MPY     104,DL
         2 001673   000101 470400 xsym               LDP0    DUP+65
         2 001674   040100 100506                    MLR     fill='040'O
         2 001675   077746 000140                    ADSC9   -26,Q,PR0                cn=0,n=96
         2 001676   000032 000140                    ADSC9   26,,PR0                  cn=0,n=96

     1113     7034    5              BIN# = 2 ;

   7034  2 001677   000002 235007                    LDA     2,DL
         2 001700   000045 755000 0                  STA     BIN#

     1114     7035    5              DKEND_ = BCD_B(BCD# - 1) ;

   7035  2 001701   000044 236000 0                  LDQ     BCD#
         2 001702   000124 402007                    MPY     84,DL
         2 001703   000103 470400 xsym               LDP0    DUP+67
         2 001704   040000 100506                    MLR     fill='040'O
         2 001705   077753 000124                    ADSC9   -21,Q,PR0                cn=0,n=84
         2 001706   000000 000124 0                  ADSC9   DKEND                    cn=0,n=84

     1115     7036    5              DKEND.BCD.SEQ = BINARY_B.SEQ(2) ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:174  

   7036  2 001707   000101 471400 xsym               LDP1    DUP+65
         2 001710   100115 236100                    LDQ     77,,PR1
         2 001711   000023 756000 0                  STQ     DKEND+19

     1116     7037    5              CALL TOU$CHECKSUM (0, ADDR (DKEND_), 20, DKEND.CHECKSUM) ;

   7037  2 001712   000020 236000 3                  LDQ     16
         2 001713   200034 756100                    STQ     SECOND+2,,AUTO
         2 001714   000022 237000 3                  LDAQ    18
         2 001715   200040 757100                    STAQ    SECOND+6,,AUTO
         2 001716   200034 633500                    EPPR3   SECOND+2,,AUTO
         2 001717   200037 453500                    STP3    SECOND+5,,AUTO
         2 001720   000024 236000 3                  LDQ     20
         2 001721   200036 756100                    STQ     SECOND+4,,AUTO
         2 001722   200036 630500                    EPPR0   SECOND+4,,AUTO
         2 001723   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 001724   000000 701000 xent               TSX1    TOU$CHECKSUM
         2 001725   000000 011000                    NOP     0

     1117     7038    5              BCD_B(BCD# - 1) = DKEND_ ;

   7038  2 001726   000044 236000 0                  LDQ     BCD#
         2 001727   000124 402007                    MPY     84,DL
         2 001730   000103 470400 xsym               LDP0    DUP+67
         2 001731   040106 100400                    MLR     fill='040'O
         2 001732   000000 000124 0                  ADSC9   DKEND                    cn=0,n=84
         2 001733   077753 000124                    ADSC9   -21,Q,PR0                cn=0,n=84

     1118     7039    5              CALL TOU$REFORM_DECK_CHECKSUM (,,,) ;

   7039  2 001734   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001735   000000 701000 xent               TSX1    TOU$REFORM_DECK_CHECKSUM
         2 001736   000000 011000                    NOP     0

     1119     7040    5           END /* THEN */ ;

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:175  
     1120     7041    4      ELSE /* Do not reduce non-GIFM decks in the UTL catalog. */ ;
     1121     7042    4      RETURN;

   7042  2 001737   200016 221300                    LDX1  ! HDR$+1,,AUTO
         2 001740   000001 702211                    TSX2  ! 1,X1

     1122     7043
     1123     7044    4   END B_SQUISH_GIFM_DECK ;
     1124     7045        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:176  
     1125     7046        /*I*  NAME:        B_COMPUTE_VERSION
     1126     7047              AUTHOR:      Scott Sheppard
     1127     7048              PURPOSE:     Converts ASCII BCD digits to ASCII alphabetics
     1128     7049              DESCRIPTION: This procedure converts the ASCII digit representation
     1129     7050                           of the IFAD version from the  patch card to its  ASCII
     1130     7051                           alphabetic character representation.
     1131     7052                           Example: 312621242104 -> 25,22,17,20,17,04 -> IFADA4
     1132     7053        */
     1133     7054
     1134     7055    3   B_COMPUTE_VERSION: PROC (DIGIT_VERSION, LETTER_VERSION) ;

   7055  2 001741   200024 741300       B_COMPUTE_V* STX1  ! VERSION_BCD+4,,AUTO

     1135     7056
     1136     7057    4      DCL DIGIT_VERSION              (0:11) CHAR (1) CALIGNED ;
     1137     7058    4      DCL LETTER_VERSION             CHAR (6) CALIGNED ;
     1138     7059    4      DCL BCD_VERSION                (0:5) UBIN (6) UNAL ;
     1139     7060    4      DCL I                          UBIN WORD ALIGNED ;
     1140     7061    4      DCL FIRST                      UBIN WORD ALIGNED ;
     1141     7062    4      DCL SECOND                     UBIN WORD ALIGNED ;
     1142     7063
     1143     7064        /* Code */
     1144     7065
     1145     7066    5      DO I = 0 TO 5 ;

   7066  2 001742   200030 450100                    STZ     I,,AUTO

     1146     7067    5         CALL CHARBIN (FIRST, DIGIT_VERSION(I * 2)) ;

   7067  2 001743   200030 235100                    LDA     I,,AUTO
         2 001744   000001 735000                    ALS     1
         2 001745   200025 470500                    LDP0    @DIGIT_VERSION,,AUTO
         2 001746   000100 305505                    DTB
         2 001747   000000 030001                    NDSC9   0,A,PR0                  cn=0,s=nosgn,sf=0,n=1
         2 001750   200031 000004                    NDSC9   FIRST,,AUTO              cn=0,s=lsgnf,sf=0,n=4

     1147     7068    5         CALL CHARBIN (SECOND, DIGIT_VERSION(I * 2 + 1)) ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:177  

   7068  2 001751   000100 305505                    DTB
         2 001752   000000 230001                    NDSC9   0,A,PR0                  cn=1,s=nosgn,sf=0,n=1
         2 001753   200032 000004                    NDSC9   SECOND,,AUTO             cn=0,s=lsgnf,sf=0,n=4

     1148     7069    5         BCD_VERSION(I) = (8 * FIRST) + SECOND ;

   7069  2 001754   200031 236100                    LDQ     FIRST,,AUTO
         2 001755   000003 736000                    QLS     3
         2 001756   200032 036100                    ADLQ    SECOND,,AUTO
         2 001757   200034 756100                    STQ     SECOND+2,,AUTO
         2 001760   200030 235100                    LDA     I,,AUTO
         2 001761   000105 101500                    MRL     fill='000'O
         2 001762   200034 020006                    ADSC6   SECOND+2,,AUTO           cn=0,n=6
         2 001763   200027 020001                    ADSC6   BCD_VERSION,A,AUTO       cn=0,n=1

     1149     7070    5      END /* DO */ ;

   7070  2 001764   200030 235100                    LDA     I,,AUTO
         2 001765   000001 035007                    ADLA    1,DL
         2 001766   200030 755100                    STA     I,,AUTO
         2 001767   000006 115007                    CMPA    6,DL
         2 001770   001743 602000 2                  TNC     s:7067

     1150     7071    4      CALL TOT$BCD_ASCII (BCD_VERSION, LETTER_VERSION, I) ;

   7071  2 001771   200030 631500                    EPPR1   I,,AUTO
         2 001772   200036 451500                    STP1    SECOND+4,,AUTO
         2 001773   200026 236100                    LDQ     @LETTER_VERSION,,AUTO
         2 001774   200035 756100                    STQ     SECOND+3,,AUTO
         2 001775   200027 633500                    EPPR3   BCD_VERSION,,AUTO
         2 001776   200034 453500                    STP3    SECOND+2,,AUTO
         2 001777   200034 630500                    EPPR0   SECOND+2,,AUTO
         2 002000   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 002001   000000 701000 xent               TSX1    TOT$BCD_ASCII
         2 002002   000000 011000                    NOP     0

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:178  
     1151     7072    4      RETURN ;

   7072  2 002003   200024 221300                    LDX1  ! VERSION_BCD+4,,AUTO
         2 002004   000001 702211                    TSX2  ! 1,X1

     1152     7073
     1153     7074    4   END B_COMPUTE_VERSION ;
     1154     7075    3   END B_SET_GECALL_KEY ;
     1155     7076        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:179  
     1156     7077        /*I*  NAME:        B_SET_MPC_KEY
     1157     7078              AUTHORS:     David M. Augustine
     1158     7079                           Scott S. Sheppard
     1159     7080              PURPOSE:     Sets the MPC Key
     1160     7081              INTERFACE:   B_SET_ITR_KEY
     1161     7082                           B_SET_FIRMWARE_KEY
     1162     7083                           B_SQUISH_FIRMWARE_DECK
     1163     7084                           B_SET_MDR_KEY
     1164     7085              INPUT:       OBJECT.BCD.CLASS
     1165     7086              OUTPUT:      No System data altered.
     1166     7087              DESCRIPTION: This procedure calls the appropriate module to
     1167     7088                           actually set the object key for the deck.
     1168     7089        */
     1169     7090
     1170     7091    2   B_SET_MPC_KEY: PROC ;

   7091  2 002005   200014 741300       B_SET_MPC_K* STX1  ! @SAVE_TYPE+1,,AUTO

     1171     7092
     1172     7093        /* Code */
     1173     7094
     1174     7095    4      DO SELECT (OBJECT.BCD.CLASS) ;

   7095  2 002006   000005 236000 xsym               LDQ     OBJECT+5
         2 002007   777000 376007                    ANQ     -512,DL
         2 002010   111000 116007                    CMPQ    37376,DL
         2 002011   002017 602000 2                  TNC     s:7095+9
         2 002012   000005 236000 xsym               LDQ     OBJECT+5
         2 002013   777000 376007                    ANQ     -512,DL
         2 002014   111000 116007                    CMPQ    37376,DL
         2 002015   002024 600000 2                  TZE     s:7097
         2 002016   002036 710000 2                  TRA     s:7103
         2 002017   000005 236000 xsym               LDQ     OBJECT+5
         2 002020   777000 376007                    ANQ     -512,DL
         2 002021   106000 116007                    CMPQ    35840,DL
         2 002022   002036 601000 2                  TNZ     s:7103
         2 002023   002027 710000 2                  TRA     s:7099
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:180  

     1175     7096    4         SELECT ('I') ;

     1176     7097    4         CALL B_SET_ITR_KEY ;

   7097  2 002024   002042 701000 2                  TSX1    B_SET_ITR_KEY
         2 002025   000000 011000                    NOP     0
         2 002026   002040 710000 2                  TRA     s:7105

     1177     7098    4         SELECT ('F') ;

     1178     7099    4         CALL B_SET_FIRMWARE_KEY ;

   7099  2 002027   002064 701000 2                  TSX1    B_SET_FIRMWARE_KEY
         2 002030   000000 011000                    NOP     0

     1179     7100    4         CALL B_SQUISH_FIRMWARE_DECK ;

   7100  2 002031   002112 701000 2                  TSX1    B_SQUISH_FIRMWARE_DECK
         2 002032   000000 011000                    NOP     0

     1180     7101    4         CALL B_FIX_CATALOG_KEY ;

   7101  2 002033   002166 701000 2                  TSX1    B_FIX_CATALOG_KEY
         2 002034   000000 011000                    NOP     0
         2 002035   002040 710000 2                  TRA     s:7105

     1181     7102    4         SELECT (ELSE) ;

     1182     7103    4      CALL B_SET_MDR_KEY;

   7103  2 002036   002203 701000 2                  TSX1    B_SET_MDR_KEY
         2 002037   000000 011000                    NOP     0

     1183     7104    4      END /* SELECT */ ;

     1184     7105    3      RETURN;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:181  

   7105  2 002040   200014 221300                    LDX1  ! @SAVE_TYPE+1,,AUTO
         2 002041   000001 702211                    TSX2  ! 1,X1

     1185     7106
     1186     7107        /* END B_SET_MPC_KEY */
     1187     7108        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:182  
     1188     7109        /*I*  NAME:        B_SET_ITR_KEY
     1189     7110              AUTHORS:     David M. Augustine
     1190     7111                           Scott S. Sheppard
     1191     7112              PURPOSE:     Sets Object Key
     1192     7113              INTERFACE:   CONCAT function
     1193     7114              INPUT:       ID.ID
     1194     7115                           OBJECT.BCD.LBL
     1195     7116                           ID.REV.LEVEL
     1196     7117              OUTPUT:      OBJECT_KEY.DATA
     1197     7118              DESCRIPTION: This procedure sets the object key for ITR
     1198     7119                           type object decks.
     1199     7120        */
     1200     7121
     1201     7122    3   B_SET_ITR_KEY: PROC ;

   7122  2 002042   200016 741300       B_SET_ITR_K* STX1  ! HDR$+1,,AUTO

     1202     7123
     1203     7124        /* Code */
     1204     7125
     1205     7126    4      CALL CONCAT (OBJECT_KEY.DATA,

   7126  2 002043   040000 100400                    MLR     fill='040'O
         2 002044   000077 000004 1                  ADSC9   MASTER_KEY+63            cn=0,n=4
         2 002045   000000 200004 xsym               ADSC9   OBJECT_KEY               cn=1,n=4
         2 002046   040000 100400                    MLR     fill='040'O
         2 002047   000000 000006 xsym               ADSC9   ID                       cn=0,n=6
         2 002050   000001 200006 xsym               ADSC9   OBJECT_KEY+1             cn=1,n=6
         2 002051   000056 236007                    LDQ     46,DL
         2 002052   000002 552004 xsym               STBQ    OBJECT_KEY+2,'04'O
         2 002053   000022 236000 xsym               LDQ     OBJECT+18
         2 002054   000003 756000 xsym               STQ     OBJECT_KEY+3
         2 002055   056000 236003                    LDQ     23552,DU
         2 002056   000004 756000 xsym               STQ     OBJECT_KEY+4
         2 002057   040000 100400                    MLR     fill='040'O
         2 002060   000002 400002 xsym               ADSC9   ID+2                     cn=2,n=2
         2 002061   000004 200007 xsym               ADSC9   OBJECT_KEY+4             cn=1,n=7
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:183  

     1206     7127    4              'ITR.',
     1207     7128    4              ID.ID,
     1208     7129    4              '.',
     1209     7130    4              OBJECT.BCD.LBL,
     1210     7131    4              '.',
     1211     7132    4              ID.REV.LEVEL);
     1212     7133    4      RETURN;

   7133  2 002062   200016 221300                    LDX1  ! HDR$+1,,AUTO
         2 002063   000001 702211                    TSX2  ! 1,X1

     1213     7134
     1214     7135    4   END B_SET_ITR_KEY;
     1215     7136        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:184  
     1216     7137        /*I*  NAME:        B_SET_FIRMWARE_KEY
     1217     7138              AUTHORS:     David M. Augustine
     1218     7139                           Scott S. Sheppard
     1219     7140              PURPOSE:     Sets Object Key
     1220     7141              INTERFACE:   CONCAT function
     1221     7142              INPUT:       ID.USAGE
     1222     7143                           ID.ID
     1223     7144                           OBJECT.BCD.LBL
     1224     7145                           ID.REV.LEVEL
     1225     7146              OUTPUT:      OBJECT_KEY.DATA
     1226     7147              DESCRIPTION: This procedure sets the object key for firmware
     1227     7148                           type object decks.
     1228     7149        */
     1229     7150
     1230     7151    3   B_SET_FIRMWARE_KEY: PROC ;

   7151  2 002064   200016 741300       B_SET_FIRMW* STX1  ! HDR$+1,,AUTO

     1231     7152
     1232     7153    4      DCL 1 REVISION  STATIC CALIGNED,
     1233     7154    4            2 DOT     CHAR (1) INIT ('.'),
     1234     7155    4            2 LEVEL   CHAR (2) INIT (' ') ;
     1235     7156    4      DCL REVISION_ REDEF REVISION CHAR (3) CALIGNED ;
     1236     7157
     1237     7158        /* Code */
     1238     7159
     1239     7160    4      REVISION.LEVEL = ID.REV.LEVEL ;

   7160  2 002065   000002 236000 xsym               LDQ     ID+2
         2 002066   000011 736000                    QLS     9
         2 002067   000052 552030 0                  STBQ    REVISION,'30'O

     1240     7161    4      CALL CONCAT (OBJECT_KEY.DATA,

   7161  2 002070   040000 100400                    MLR     fill='040'O
         2 002071   000003 000006 xsym               ADSC9   ID+3                     cn=0,n=6
         2 002072   000000 200006 xsym               ADSC9   OBJECT_KEY               cn=1,n=6
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:185  
         2 002073   000056 236007                    LDQ     46,DL
         2 002074   000001 552004 xsym               STBQ    OBJECT_KEY+1,'04'O
         2 002075   040000 100400                    MLR     fill='040'O
         2 002076   000000 000006 xsym               ADSC9   ID                       cn=0,n=6
         2 002077   000002 000006 xsym               ADSC9   OBJECT_KEY+2             cn=0,n=6
         2 002100   056000 236007                    LDQ     23552,DL
         2 002101   000003 552010 xsym               STBQ    OBJECT_KEY+3,'10'O
         2 002102   040000 100400                    MLR     fill='040'O
         2 002103   000022 000004 xsym               ADSC9   OBJECT+18                cn=0,n=4
         2 002104   000003 600004 xsym               ADSC9   OBJECT_KEY+3             cn=3,n=4
         2 002105   040000 100400                    MLR     fill='040'O
         2 002106   000052 000003 0                  ADSC9   REVISION                 cn=0,n=3
         2 002107   000004 600005 xsym               ADSC9   OBJECT_KEY+4             cn=3,n=5

     1241     7162    4              ID.USAGE,
     1242     7163    4              '.',
     1243     7164    4              ID.ID,
     1244     7165    4              '.',
     1245     7166    4              OBJECT.BCD.LBL,
     1246     7167    4              REVISION_) ;
     1247     7168    4      RETURN;

   7168  2 002110   200016 221300                    LDX1  ! HDR$+1,,AUTO
         2 002111   000001 702211                    TSX2  ! 1,X1

     1248     7169
     1249     7170    4   END B_SET_FIRMWARE_KEY;
     1250     7171        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:186  
     1251     7172        /*I*  NAME:        B_SQUISH_FIRMWARE_DECK
     1252     7173              AUTHOR:      Scott S. Sheppard
     1253     7174              PURPOSE:     Shrinks Firmware Deck
     1254     7175              INTERFACE:   TOU$CHECKSUM
     1255     7176                           TOU$REFORM_DECK_CHECKSUM
     1256     7177              INPUT:       BINARY_B
     1257     7178                           BCD#
     1258     7179                           BIN#
     1259     7180              OUTPUT:      BINARY_B
     1260     7181                           BIN#
     1261     7182                           DKEND
     1262     7183              DESCRIPTION: This procedure  shrinks the  binary deck for  firmware
     1263     7184                           type decks since the binary deck is not used by TOLTS.
     1264     7185                           The number of binary cards is decreased to two  and
     1265     7186                           the sequence field of the deck end card is changed.
     1266     7187                           The deck checksum is then recalculated.
     1267     7188        */
     1268     7189
     1269     7190    3   B_SQUISH_FIRMWARE_DECK: PROC ;

   7190  2 002112   200016 741300       B_SQUISH_FI* STX1  ! HDR$+1,,AUTO

     1270     7191
     1271     7192        /* Code */
     1272     7193
     1273     7194    4      IF BIN# > 2

   7194  2 002113   000045 235000 0                  LDA     BIN#
         2 002114   000003 115007                    CMPA    3,DL
         2 002115   002164 602000 2                  TNC     s:7205

     1274     7195    5      THEN DO ;

     1275     7196    5              BINARY_B.OBJ(1) = BINARY_B.OBJ(BIN# - 1) ;

   7196  2 002116   000045 236000 0                  LDQ     BIN#
         2 002117   000150 402007                    MPY     104,DL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:187  
         2 002120   000101 470400 xsym               LDP0    DUP+65
         2 002121   040100 100506                    MLR     fill='040'O
         2 002122   077746 000140                    ADSC9   -26,Q,PR0                cn=0,n=96
         2 002123   000032 000140                    ADSC9   26,,PR0                  cn=0,n=96

     1276     7197    5              BIN# = 2 ;

   7197  2 002124   000002 235007                    LDA     2,DL
         2 002125   000045 755000 0                  STA     BIN#

     1277     7198    5              DKEND_ = BCD_B(BCD# - 1) ;

   7198  2 002126   000044 236000 0                  LDQ     BCD#
         2 002127   000124 402007                    MPY     84,DL
         2 002130   000103 470400 xsym               LDP0    DUP+67
         2 002131   040000 100506                    MLR     fill='040'O
         2 002132   077753 000124                    ADSC9   -21,Q,PR0                cn=0,n=84
         2 002133   000000 000124 0                  ADSC9   DKEND                    cn=0,n=84

     1278     7199    5              DKEND.BCD.SEQ = BINARY_B.SEQ(2) ;

   7199  2 002134   000101 471400 xsym               LDP1    DUP+65
         2 002135   100115 236100                    LDQ     77,,PR1
         2 002136   000023 756000 0                  STQ     DKEND+19

     1279     7200    5              CALL TOU$CHECKSUM (0, ADDR (DKEND_), 20, DKEND.CHECKSUM) ;

   7200  2 002137   000020 236000 3                  LDQ     16
         2 002140   200034 756100                    STQ     SECOND+2,,AUTO
         2 002141   000022 237000 3                  LDAQ    18
         2 002142   200040 757100                    STAQ    SECOND+6,,AUTO
         2 002143   200034 633500                    EPPR3   SECOND+2,,AUTO
         2 002144   200037 453500                    STP3    SECOND+5,,AUTO
         2 002145   000024 236000 3                  LDQ     20
         2 002146   200036 756100                    STQ     SECOND+4,,AUTO
         2 002147   200036 630500                    EPPR0   SECOND+4,,AUTO
         2 002150   000022 631400 xsym               EPPR1   B_VECTNIL+18
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:188  
         2 002151   000000 701000 xent               TSX1    TOU$CHECKSUM
         2 002152   000000 011000                    NOP     0

     1280     7201    5              BCD_B(BCD# - 1) = DKEND_ ;

   7201  2 002153   000044 236000 0                  LDQ     BCD#
         2 002154   000124 402007                    MPY     84,DL
         2 002155   000103 470400 xsym               LDP0    DUP+67
         2 002156   040106 100400                    MLR     fill='040'O
         2 002157   000000 000124 0                  ADSC9   DKEND                    cn=0,n=84
         2 002160   077753 000124                    ADSC9   -21,Q,PR0                cn=0,n=84

     1281     7202    5              CALL TOU$REFORM_DECK_CHECKSUM (,,,) ;

   7202  2 002161   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002162   000000 701000 xent               TSX1    TOU$REFORM_DECK_CHECKSUM
         2 002163   000000 011000                    NOP     0

     1282     7203    5           END /* THEN */ ;

     1283     7204    4      ELSE /* No need to reduce binary deck. */ ;
     1284     7205    4      RETURN;

   7205  2 002164   200016 221300                    LDX1  ! HDR$+1,,AUTO
         2 002165   000001 702211                    TSX2  ! 1,X1

     1285     7206
     1286     7207    4   END B_SQUISH_FIRMWARE_DECK ;
     1287     7208        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:189  
     1288     7209        /*I*  NAME:        B_FIX_CATALOG_KEY
     1289     7210              AUTHORS:     David M. Augustine
     1290     7211                           Scott S. Sheppard
     1291     7212              PURPOSE:     Sets Catalog Key for ITR's
     1292     7213              INTERFACE:   None called.
     1293     7214              INPUT:       CATALOG_KEY_SET
     1294     7215                           ID.ID
     1295     7216              OUTPUT:      CATALOG_KEY.ID
     1296     7217                           CATALOG_KEY_SET
     1297     7218              DESCRIPTION: This procedure appends the model number to the
     1298     7219                           catalog key for  ITR catalogs  from the  first
     1299     7220                           firmware deck found for the catalog.  The flag
     1300     7221                           CATALOG_KEY_SET is set to true  so that if the
     1301     7222                           catalog contains any other firmware decks, the
     1302     7223                           catalog key will not be modified.
     1303     7224        */
     1304     7225
     1305     7226    3   B_FIX_CATALOG_KEY: PROC ;

   7226  2 002166   200016 741300       B_FIX_CATAL* STX1  ! HDR$+1,,AUTO

     1306     7227
     1307     7228        /* Code */
     1308     7229
     1309     7230    4      IF CATALOG_KEY_SET

   7230  2 002167   000046 234000 0                  SZN     CATALOG_KEY_SET
         2 002170   002201 604000 2                  TMI     s:7238

     1310     7231    4      THEN /* Previous firmware deck used to set catalog key. */ ;
     1311     7232    5      ELSE DO ;

     1312     7233    5              CALL CONCAT (CATALOG_KEY.DATA,

   7233  2 002171   040000 100400                    MLR     fill='040'O
         2 002172   000000 200011 xsym               ADSC9   CATALOG_KEY              cn=1,n=9
         2 002173   000000 200011 xsym               ADSC9   CATALOG_KEY              cn=1,n=9
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:190  
         2 002174   040000 100400                    MLR     fill='040'O
         2 002175   000000 000006 xsym               ADSC9   ID                       cn=0,n=6
         2 002176   000002 400014 xsym               ADSC9   CATALOG_KEY+2            cn=2,n=12

     1313     7234    5                      SUBSTR (CATALOG_KEY.DATA, 0, 9),
     1314     7235    5                      ID.ID) ;
     1315     7236    5              CATALOG_KEY_SET = %TRUE ;

   7236  2 002177   400000 236003                    LDQ     -131072,DU
         2 002200   000046 756000 0                  STQ     CATALOG_KEY_SET

     1316     7237    5           END /* ELSE */ ;

     1317     7238    4      RETURN;

   7238  2 002201   200016 221300                    LDX1  ! HDR$+1,,AUTO
         2 002202   000001 702211                    TSX2  ! 1,X1

     1318     7239
     1319     7240    4   END B_FIX_CATALOG_KEY;
     1320     7241        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:191  
     1321     7242        /*I*  NAME:        B_SET_MDR_KEY
     1322     7243              AUTHORS:     David M. Augustine
     1323     7244                           Scott S. Sheppard
     1324     7245              PURPOSE:     Sets Object Key
     1325     7246              INTERFACE:   CONCAT function
     1326     7247              INPUT:       ID.ID
     1327     7248                           OBJECT.BCD.LBL
     1328     7249                           ID.REV.LEVEL
     1329     7250              OUTPUT:      OBJECT_KEY.DATA
     1330     7251              DESCRIPTION: This procedure sets the object key for MDR
     1331     7252                           type object decks.
     1332     7253        */
     1333     7254
     1334     7255    3   B_SET_MDR_KEY: PROC ;

   7255  2 002203   200016 741300       B_SET_MDR_K* STX1  ! HDR$+1,,AUTO

     1335     7256
     1336     7257        /* Code */
     1337     7258
     1338     7259    4      CALL CONCAT (OBJECT_KEY.DATA,

   7259  2 002204   040000 100400                    MLR     fill='040'O
         2 002205   000100 000004 1                  ADSC9   MASTER_KEY+64            cn=0,n=4
         2 002206   000000 200004 xsym               ADSC9   OBJECT_KEY               cn=1,n=4
         2 002207   040000 100400                    MLR     fill='040'O
         2 002210   000000 000006 xsym               ADSC9   ID                       cn=0,n=6
         2 002211   000001 200006 xsym               ADSC9   OBJECT_KEY+1             cn=1,n=6
         2 002212   000056 236007                    LDQ     46,DL
         2 002213   000002 552004 xsym               STBQ    OBJECT_KEY+2,'04'O
         2 002214   000022 236000 xsym               LDQ     OBJECT+18
         2 002215   000003 756000 xsym               STQ     OBJECT_KEY+3
         2 002216   056000 236003                    LDQ     23552,DU
         2 002217   000004 756000 xsym               STQ     OBJECT_KEY+4
         2 002220   040000 100400                    MLR     fill='040'O
         2 002221   000002 400002 xsym               ADSC9   ID+2                     cn=2,n=2
         2 002222   000004 200007 xsym               ADSC9   OBJECT_KEY+4             cn=1,n=7
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:192  

     1339     7260    4              'MDR.',
     1340     7261    4              ID.ID,
     1341     7262    4              '.',
     1342     7263    4              OBJECT.BCD.LBL,
     1343     7264    4              '.',
     1344     7265    4              ID.REV.LEVEL);
     1345     7266    4      RETURN;

   7266  2 002223   200016 221300                    LDX1  ! HDR$+1,,AUTO
         2 002224   000001 702211                    TSX2  ! 1,X1

     1346     7267
     1347     7268    4   END B_SET_MDR_KEY;
     1348     7269    3   END B_SET_MPC_KEY ;
     1349     7270        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:193  
     1350     7271        /*I* NAME:         B_SET_DIPPER_KEY
     1351     7272             AUTHOR:       Kathy Larkin
     1352     7273             PURPOSE:      Sets Object Key for DIPPER Decks
     1353     7274             INTERFACE:    ADDR function
     1354     7275                           BINCHAR function
     1355     7276             PARAMETERS:   None passed.
     1356     7277             DATA:         MCA_B.DISKETTE_HEADER.DATA - input
     1357     7278                           DISKETTE_HEADER.X_OF_N.X - input
     1358     7279                           DISKETTE_HEADER.X_OF_N.N - input
     1359     7280                           OBJECT.NIO_BCD.CLASS - input
     1360     7281                           OBJECT.NIO_BCD.EQUIP_TYPE - input
     1361     7282                           OBJECT.NIO_BCD.FILE_NAME - input
     1362     7283                           OBJECT.NIO_BCD.PRD_NUM_TAB - input
     1363     7284                           OBJECT.NIO_BCD.PRG_NUM_TAB - input
     1364     7285                           OBJECT_KEY.DATA - output
     1365     7286             DESCRIPTION:  This  procedure sets the object deck key for a
     1366     7287                           DIPPER file.
     1367     7288                           Key form: ceeeeffffffffxndddppp
     1368     7289                             c - 1 character class
     1369     7290                             eeee - 4 character equipment type
     1370     7291                             ffffffff - 8 character file name
     1371     7292                             x - 1 digit X of X_OF_N field
     1372     7293                             n - 1 digit N of X_OF_N field
     1373     7294                             ddd - 3 digit product tab
     1374     7295                             ppp - 3 digit program tab
     1375     7296        */
     1376     7297        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:194  
     1377     7298    2   B_SET_DIPPER_KEY: PROC ;

   7298  2 002225   200014 741300       B_SET_DIPPE* STX1  ! @SAVE_TYPE+1,,AUTO

     1378     7299
     1379     7300    3      DCL HDR$ PTR ALIGNED ;
     1380     7301           %DISKETTE_HEADER (STCLASS = "BASED (HDR$)") ;
     1381     7337
     1382     7338        /* Code */
     1383     7339
     1384     7340    3      HDR$ = ADDR (MCA_B.DISKETTE_HEADER.DATA) ;

   7340  2 002226   000101 236000 xsym               LDQ     DUP+65
         2 002227   000036 036003                    ADLQ    30,DU
         2 002230   200015 756100                    STQ     HDR$,,AUTO

     1385     7341    3      CALL CONCAT (OBJECT_KEY.DATA,

   7341  2 002231   000005 236000 xsym               LDQ     OBJECT+5
         2 002232   000011 736000                    QLS     9
         2 002233   000000 552020 xsym               STBQ    OBJECT_KEY,'20'O
         2 002234   040000 100400                    MLR     fill='040'O
         2 002235   000012 400004 xsym               ADSC9   OBJECT+10                cn=2,n=4
         2 002236   000000 400004 xsym               ADSC9   OBJECT_KEY               cn=2,n=4
         2 002237   040000 100400                    MLR     fill='040'O
         2 002240   000013 600010 xsym               ADSC9   OBJECT+11                cn=3,n=8
         2 002241   000001 400010 xsym               ADSC9   OBJECT_KEY+1             cn=2,n=8
         2 002242   200015 470500                    LDP0    HDR$,,AUTO
         2 002243   040000 100500                    MLR     fill='040'O
         2 002244   000041 400002                    ADSC9   33,,PR0                  cn=2,n=2
         2 002245   000003 400002 xsym               ADSC9   OBJECT_KEY+3             cn=2,n=2
         2 002246   000017 236000 xsym               LDQ     OBJECT+15
         2 002247   000025 376000 3                  ANQ     21
         2 002250   000040 276007                    ORQ     32,DL
         2 002251   000004 756000 xsym               STQ     OBJECT_KEY+4
         2 002252   040000 100400                    MLR     fill='040'O
         2 002253   000020 000003 xsym               ADSC9   OBJECT+16                cn=0,n=3
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:195  
         2 002254   000004 600005 xsym               ADSC9   OBJECT_KEY+4             cn=3,n=5

     1386     7342    3              OBJECT.NIO_BCD.CLASS,
     1387     7343    3              SUBSTR (OBJECT.NIO_BCD.EQUIP_TYPE, 0, 4),
     1388     7344    3              OBJECT.NIO_BCD.FILE_NAME,
     1389     7345    3              DISKETTE_HEADER.X_OF_N_,
     1390     7346    3              SUBSTR (OBJECT.NIO_BCD.PRD_NUM_TAB, 0, 3),
     1391     7347    3              OBJECT.NIO_BCD.PRG_NUM_TAB) ;
     1392     7348    3      RETURN ;

   7348  2 002255   200014 221300                    LDX1  ! @SAVE_TYPE+1,,AUTO
         2 002256   000001 702211                    TSX2  ! 1,X1

     1393     7349
     1394     7350    3   END B_SET_DIPPER_KEY ;
     1395     7351    2   END B_SET_OBJECT_KEY ;
     1396     7352        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:196  
     1397     7353        /*I*  NAME:        B_CHECK_CORRECT_FILE
     1398     7354              AUTHOR:      Scott S. Sheppard
     1399     7355              PURPOSE:     Checks IFAD object deck placement
     1400     7356              INTERFACE:   B_ERR_MSG
     1401     7357              INPUT:       OBJECT.BCD.CLASS
     1402     7358                           CATALOG_TYPE
     1403     7359              OUTPUT:      No system data altered.
     1404     7360              DESCRIPTION: This procedure checks the catalog type of the
     1405     7361                           current catalog against the class of the object
     1406     7362                           deck to be stored in that catalog.
     1407     7363        */
     1408     7364
     1409     7365    1   B_CHECK_CORRECT_FILE: PROC ALTRET ;

   7365  2 002257   200012 741300       B_CHECK_COR* STX1  ! I+1,,AUTO

     1410     7366
     1411     7367        /* Code */
     1412     7368
     1413     7369    3      DO SELECT (CATALOG_TYPE) ;

   7369  2 002260   000047 236000 0                  LDQ     CATALOG_TYPE
         2 002261   777000 376003                    ANQ     -512,DU
         2 002262   111000 116003                    CMPQ    37376,DU
         2 002263   002271 602000 2                  TNC     s:7369+9
         2 002264   000047 236000 0                  LDQ     CATALOG_TYPE
         2 002265   777000 376003                    ANQ     -512,DU
         2 002266   111000 116003                    CMPQ    37376,DU
         2 002267   002276 600000 2                  TZE     s:7371
         2 002270   002325 710000 2                  TRA     s:7378
         2 002271   000047 236000 0                  LDQ     CATALOG_TYPE
         2 002272   777000 376003                    ANQ     -512,DU
         2 002273   106000 116003                    CMPQ    35840,DU
         2 002274   002325 601000 2                  TNZ     s:7378
         2 002275   002276 710000 2                  TRA     s:7371

     1414     7370    3         SELECT ('I', 'F') ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:197  

     1415     7371    3         IF OBJECT.BCD.CLASS = 'I' | OBJECT.BCD.CLASS = 'F'

   7371  2 002276   400000 220003                    LDX0    -131072,DU
         2 002277   000005 236000 xsym               LDQ     OBJECT+5
         2 002300   777000 376007                    ANQ     -512,DL
         2 002301   111000 116007                    CMPQ    37376,DL
         2 002302   002304 600000 2                  TZE     s:7371+6
         2 002303   000000 220003                    LDX0    0,DU
         2 002304   400000 222003                    LDX2    -131072,DU
         2 002305   000005 236000 xsym               LDQ     OBJECT+5
         2 002306   777000 376007                    ANQ     -512,DL
         2 002307   106000 116007                    CMPQ    35840,DL
         2 002310   002312 600000 2                  TZE     s:7371+12
         2 002311   000000 222003                    LDX2    0,DU
         2 002312   000000 636012                    EAQ     0,X2
         2 002313   200034 756100                    STQ     SECOND+2,,AUTO
         2 002314   000000 636010                    EAQ     0,X0
         2 002315   200034 276100                    ORQ     SECOND+2,,AUTO
         2 002316   002337 601000 2                  TNZ     s:7385

     1416     7372    3         THEN /* The deck is an ITR or FIRMWARE deck in an ITR catalog. */ ;
     1417     7373    4         ELSE DO ;

     1418     7374    4                 CALL B_ERR_MSG (%E$BCCF_WRONG_FILE) ;

   7374  2 002317   000027 236000 3                  LDQ     23
         2 002320   200017 756100                    STQ     P,,AUTO
         2 002321   003340 701000 2                  TSX1    B_ERR_MSG
         2 002322   000000 011000                    NOP     0

     1419     7375    4                 ALTRETURN ;

   7375  2 002323   200012 221300                    LDX1  ! I+1,,AUTO
         2 002324   000000 702211                    TSX2  ! 0,X1

     1420     7376    4              END /* ELSE */ ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:198  
     1421     7377    3         SELECT (ELSE) ;

     1422     7378    3      IF OBJECT.BCD.CLASS = CATALOG_TYPE

   7378  2 002325   040000 106400                    CMPC    fill='040'O
         2 002326   000005 400001 xsym               ADSC9   OBJECT+5                 cn=2,n=1
         2 002327   000047 000001 0                  ADSC9   CATALOG_TYPE             cn=0,n=1
         2 002330   002337 600000 2                  TZE     s:7385

     1423     7379    3      THEN /* The object deck is in the proper file. */ ;
     1424     7380    4      ELSE DO ;

     1425     7381    4              CALL B_ERR_MSG (%E$BCCF_WRONG_FILE) ;

   7381  2 002331   000027 236000 3                  LDQ     23
         2 002332   200017 756100                    STQ     P,,AUTO
         2 002333   003340 701000 2                  TSX1    B_ERR_MSG
         2 002334   000000 011000                    NOP     0

     1426     7382    4              ALTRETURN ;

   7382  2 002335   200012 221300                    LDX1  ! I+1,,AUTO
         2 002336   000000 702211                    TSX2  ! 0,X1

     1427     7383    4           END /* ELSE */ ;
     1428     7384    3      END /* SELECT */ ;

     1429     7385    2      RETURN;

   7385  2 002337   000001 702211                    TSX2  ! 1,X1

     1430     7386
     1431     7387    2   END B_CHECK_CORRECT_FILE ;
     1432     7388        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:199  
     1433     7389        /*I*  NAME:        B_SAVE_OBJECT_DECK
     1434     7390              AUTHORS:     David M. Augustine
     1435     7391                           Scott S. Sheppard
     1436     7392              PURPOSE:     Saves a Binary Deck
     1437     7393              INTERFACE:   B_PRINT_DECK_LINE
     1438     7394                           TOU$CHECKSUM
     1439     7395                           TOU$DFU_DF_CHECK_ALREADY_SAVED
     1440     7396                           TOU$DFU_DF_WR_OBJECT
     1441     7397                           TOU$DFU_DF_WR_BINARY
     1442     7398                           TOU$DFU_DF_WR_FILE
     1443     7399                           TOU$DFU_DF_WR_BCD_CARDS
     1444     7400                           TOU$DFU_DF_RD_OBJECT_REFLIST
     1445     7401                           TOU$DFU_DF_WR_OBJECT_REFLIST
     1446     7402              INPUT:       OBJECT.BCD.LIBRARY
     1447     7403                           LAST.DECK#   BIN#   BCD#
     1448     7404                           BINARY_KEY.DECK#
     1449     7405                           OBJECT_REFLIST_DATA.NUM_REFS
     1450     7406                           MASTER_ENTRY_KEY.ENTRY#
     1451     7407                           CATALOG_ENTRY_KEY.ENTRY#
     1452     7408              OUTPUT:      OBJECT.DECK#
     1453     7409                           OBJECT.BINARY_COUNT
     1454     7410                           OBJECT.TOTAL_COUNT
     1455     7411                           OBJECT_REFLIST_DATA.NUM_REFS
     1456     7412                           OBJECT_REFLIST_DATA.REFS
     1457     7413                           OBJECT_REFLIST_KEY.DECK#
     1458     7414                           DECK_SAVED
     1459     7415              DESCRIPTION: This procedure saves all of the records for an
     1460     7416                           object deck if the deck is not  already  saved
     1461     7417                           in the deckfile. If the deck is already in the
     1462     7418                           deckfile, the deck's object reference list  is
     1463     7419                           read in and  modified to  include the  current
     1464     7420                           catalog in the reference list.
     1465     7421        */
     1466     7422        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:200  
     1467     7423    1   B_SAVE_OBJECT_DECK: PROC (DECK_TYPE) ALTRET ;

   7423  2 002340   200012 741300       B_SAVE_OBJE* STX1  ! I+1,,AUTO

     1468     7424
     1469     7425    2      DCL DECK_TYPE   CHAR (6) CALIGNED ;
     1470     7426    2      DCL I           UBIN HALF HALIGNED ;
     1471     7427
     1472     7428        /* Code */
     1473     7429
     1474     7430    2      DECK_SAVED = %TRUE ;

   7430  2 002341   400000 236003                    LDQ     -131072,DU
         2 002342   000051 756000 0                  STQ     DECK_SAVED

     1475     7431
     1476     7432    2      OBJECT.DECK# = LAST.DECK#;

   7432  2 002343   000000 220000 xsym               LDX0    LAST
         2 002344   000024 740000 xsym               STX0    OBJECT+20

     1477     7433    2      OBJECT.BINARY_COUNT = BIN# ;

   7433  2 002345   000045 722000 0                  LXL2    BIN#
         2 002346   000024 442000 xsym               SXL2    OBJECT+20

     1478     7434    2      OBJECT.TOTAL_COUNT = BIN# + BCD# + 1;

   7434  2 002347   000045 236000 0                  LDQ     BIN#
         2 002350   000044 036000 0                  ADLQ    BCD#
         2 002351   000001 623006                    EAX3    1,QL
         2 002352   000025 743000 xsym               STX3    OBJECT+21

     1479     7435    2      CALL TOU$CHECKSUM (0, ADDR (OBJECT), 23, OBJECT.CHECKSUM) ;

   7435  2 002353   000030 236000 3                  LDQ     24
         2 002354   200034 756100                    STQ     SECOND+2,,AUTO
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:201  
         2 002355   000032 237000 3                  LDAQ    26
         2 002356   200040 757100                    STAQ    SECOND+6,,AUTO
         2 002357   200034 630500                    EPPR0   SECOND+2,,AUTO
         2 002360   200037 450500                    STP0    SECOND+5,,AUTO
         2 002361   000024 236000 3                  LDQ     20
         2 002362   200036 756100                    STQ     SECOND+4,,AUTO
         2 002363   200036 630500                    EPPR0   SECOND+4,,AUTO
         2 002364   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 002365   000000 701000 xent               TSX1    TOU$CHECKSUM
         2 002366   000000 011000                    NOP     0

     1480     7436
     1481     7437    2      CALL TOU$DFU_DF_CHECK_ALREADY_SAVED WHENRETURN

   7437  2 002367   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002370   000000 701000 xent               TSX1    TOU$DFU_DF_CHECK_ALREADY_SAVED
         2 002371   002452 702000 2                  TSX2    s:7461

     1482     7438    3           DO ;

     1483     7439              /* New Object Deck */
     1484     7440    3              CALL TOU$DFU_DF_WR_OBJECT ALTRET (ERROR) ;

   7440  2 002372   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002373   000000 701000 xent               TSX1    TOU$DFU_DF_WR_OBJECT
         2 002374   002511 702000 2                  TSX2    ERROR

     1485     7441
     1486     7442    3              BINARY_KEY.DECK# = OBJECT.DECK# ;

   7442  2 002375   000024 236000 xsym               LDQ     OBJECT+20
         2 002376   000011 772000                    QRL     9
         2 002377   000000 552030 xsym               STBQ    BINARY_KEY,'30'O

     1487     7443    3              IF DECK_TYPE = 'BINARY'

   7443  2 002400   200013 470500                    LDP0    @DECK_TYPE,,AUTO
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:202  
         2 002401   040000 106500                    CMPC    fill='040'O
         2 002402   000000 000006                    ADSC9   0,,PR0                   cn=0,n=6
         2 002403   000011 000006 1                  ADSC9   MASTER_KEY+9             cn=0,n=6
         2 002404   002411 601000 2                  TNZ     s:7445

     1488     7444    3              THEN CALL TOU$DFU_DF_WR_BINARY ALTRET (ERROR) ;

   7444  2 002405   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002406   000000 701000 xent               TSX1    TOU$DFU_DF_WR_BINARY
         2 002407   002511 702000 2                  TSX2    ERROR
         2 002410   002414 710000 2                  TRA     s:7447

     1489     7445    3              ELSE CALL TOU$DFU_DF_WR_FILE ALTRET (ERROR) ;

   7445  2 002411   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002412   000000 701000 xent               TSX1    TOU$DFU_DF_WR_FILE
         2 002413   002511 702000 2                  TSX2    ERROR

     1490     7446
     1491     7447    3              BCD_KEY.DECK# = OBJECT.DECK# ;

   7447  2 002414   000024 236000 xsym               LDQ     OBJECT+20
         2 002415   000011 772000                    QRL     9
         2 002416   000000 552030 xsym               STBQ    BCD_KEY,'30'O

     1492     7448    3              CALL TOU$DFU_DF_WR_BCD_CARDS ALTRET (ERROR) ;

   7448  2 002417   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002420   000000 701000 xent               TSX1    TOU$DFU_DF_WR_BCD_CARDS
         2 002421   002511 702000 2                  TSX2    ERROR

     1493     7449
     1494     7450    3              OBJECT_REFLIST_KEY.DECK# = OBJECT.DECK# ;

   7450  2 002422   000024 236000 xsym               LDQ     OBJECT+20
         2 002423   000011 772000                    QRL     9
         2 002424   000000 552030 xsym               STBQ    OBJECT_REFLIST_KEY,'30'O
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:203  

     1495     7451    3              OBJECT_REFLIST_DATA.NUM_REFS = 1 ;

   7451  2 002425   000001 235007                    LDA     1,DL
         2 002426   000000 755000 xsym               STA     OBJECT_REFLIST_DATA

     1496     7452    3              OBJECT_REFLIST_DATA.REFS.ME#(0) = MASTER_ENTRY_KEY.ENTRY# ;

   7452  2 002427   000000 235000 xsym               LDA     MASTER_ENTRY_KEY
         2 002430   000001 236000 xsym               LDQ     MASTER_ENTRY_KEY+1
         2 002431   000033 773000                    LRL     27
         2 002432   777777 376007                    ANQ     -1,DL
         2 002433   000000 620006                    EAX0    0,QL
         2 002434   000001 740000 xsym               STX0    OBJECT_REFLIST_DATA+1

     1497     7453    3              OBJECT_REFLIST_DATA.REFS.CE#(0) = CATALOG_ENTRY_KEY.ENTRY# ;

   7453  2 002435   000000 235000 xsym               LDA     CATALOG_ENTRY_KEY
         2 002436   000001 236000 xsym               LDQ     CATALOG_ENTRY_KEY+1
         2 002437   000033 773000                    LRL     27
         2 002440   777777 376007                    ANQ     -1,DL
         2 002441   000000 621006                    EAX1    0,QL
         2 002442   000001 441000 xsym               SXL1    OBJECT_REFLIST_DATA+1

     1498     7454    3              CALL TOU$DFU_DF_WR_OBJECT_REFLIST ALTRET (ERROR) ;

   7454  2 002443   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002444   000000 701000 xent               TSX1    TOU$DFU_DF_WR_OBJECT_REFLIST
         2 002445   002511 702000 2                  TSX2    ERROR

     1499     7455    3              LAST.DECK# = LAST.DECK# + 1 ;

   7455  2 002446   000000 220000 xsym               LDX0    LAST
         2 002447   000001 621010                    EAX1    1,X0
         2 002450   000000 741000 xsym               STX1    LAST

     1500     7456    3           END /* WHENRETURN */ ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:204  

   7456  2 002451   002505 710000 2                  TRA     s:7471

     1501     7457           %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:205  
     1502     7458    2      WHENALTRETURN
     1503     7459    3           DO ;

     1504     7460              /* COMMON Object Deck Already Saved */
     1505     7461    3              OBJECT_REFLIST_KEY.DECK# = OBJECT.DECK# ;

   7461  2 002452   000024 236000 xsym               LDQ     OBJECT+20
         2 002453   000011 772000                    QRL     9
         2 002454   000000 552030 xsym               STBQ    OBJECT_REFLIST_KEY,'30'O

     1506     7462    3              CALL TOU$DFU_DF_RD_OBJECT_REFLIST ALTRET (ERROR) ;

   7462  2 002455   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002456   000000 701000 xent               TSX1    TOU$DFU_DF_RD_OBJECT_REFLIST
         2 002457   002511 702000 2                  TSX2    ERROR

     1507     7463
     1508     7464    3              I = OBJECT_REFLIST_DATA.NUM_REFS ;

   7464  2 002460   000000 720000 xsym               LXL0    OBJECT_REFLIST_DATA
         2 002461   200014 740100                    STX0    I,,AUTO

     1509     7465    3              OBJECT_REFLIST_DATA.REFS.ME#(I) = MASTER_ENTRY_KEY.ENTRY# ;

   7465  2 002462   000000 235000 xsym               LDA     MASTER_ENTRY_KEY
         2 002463   000001 236000 xsym               LDQ     MASTER_ENTRY_KEY+1
         2 002464   000033 773000                    LRL     27
         2 002465   777777 376007                    ANQ     -1,DL
         2 002466   000000 621006                    EAX1    0,QL
         2 002467   000001 741010 xsym               STX1    OBJECT_REFLIST_DATA+1,X0

     1510     7466    3              OBJECT_REFLIST_DATA.REFS.CE#(I) = CATALOG_ENTRY_KEY.ENTRY# ;

   7466  2 002470   000000 235000 xsym               LDA     CATALOG_ENTRY_KEY
         2 002471   000001 236000 xsym               LDQ     CATALOG_ENTRY_KEY+1
         2 002472   000033 773000                    LRL     27
         2 002473   777777 376007                    ANQ     -1,DL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:206  
         2 002474   000000 622006                    EAX2    0,QL
         2 002475   000001 442010 xsym               SXL2    OBJECT_REFLIST_DATA+1,X0

     1511     7467    3              OBJECT_REFLIST_DATA.NUM_REFS = I + 1 ;

   7467  2 002476   200014 235100                    LDA     I,,AUTO
         2 002477   000022 771000                    ARL     18
         2 002500   000001 035007                    ADLA    1,DL
         2 002501   000000 755000 xsym               STA     OBJECT_REFLIST_DATA

     1512     7468    3              CALL TOU$DFU_DF_WR_OBJECT_REFLIST ALTRET (ERROR) ;

   7468  2 002502   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002503   000000 701000 xent               TSX1    TOU$DFU_DF_WR_OBJECT_REFLIST
         2 002504   002511 702000 2                  TSX2    ERROR

     1513     7469    3           END /* WHENALTRETURN */ ;

     1514     7470
     1515     7471    2      CALL B_PRINT_DECK_LINE ALTRET (ERROR) ;

   7471  2 002505   002513 701000 2                  TSX1    B_PRINT_DECK_LINE
         2 002506   002511 702000 2                  TSX2    ERROR

     1516     7472    2      RETURN ;

   7472  2 002507   200012 221300                    LDX1  ! I+1,,AUTO
         2 002510   000001 702211                    TSX2  ! 1,X1

     1517     7473
     1518     7474    2   ERROR:
     1519     7475    2      ALTRETURN ;

   7475  2 002511   200012 221300       ERROR        LDX1  ! I+1,,AUTO
         2 002512   000000 702211                    TSX2  ! 0,X1

     1520     7476
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:207  
     1521     7477    2   END B_SAVE_OBJECT_DECK;
     1522     7478        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:208  
     1523     7479        /*I* NAME:         B_PRINT_DECK_LINE
     1524     7480             AUTHOR:       Scott S. Sheppard
     1525     7481             PURPOSE:      prints the object deck line
     1526     7482             INTERFACE:    TOU$DU_PRINTER_WRITE
     1527     7483                           TOU$DU_PRINTER_OVERWRITE
     1528     7484             PARAMETERS:   None passed.
     1529     7485             DATA:         DUP.CURRENT_LINE# - input
     1530     7486                           DUP.BOTTOM_LINE# - input
     1531     7487                           BCD# - input
     1532     7488                           DUP.MSG_CODE - input / output
     1533     7489                           DUP.LINE_VFC - output
     1534     7490                           CUR# - output
     1535     7491             DESCRIPTION:  A DEER printout is  a collection of pages with
     1536     7492                           the   page  headers   describing  the  current
     1537     7493                           catalog  and the page lines describing each of
     1538     7494                           the   object  decks   in  the   catalog.  This
     1539     7495                           procedure  is  called   by  all  of  the  DEER
     1540     7496                           functions (where applicable) in order to print
     1541     7497                           the  line  or  lines  describing  a particular
     1542     7498                           object deck. If no patches exist for the deck,
     1543     7499                           the  descriptor  line  is  merely printed. The
     1544     7500                           line  to be  printed is  determined by the MSG
     1545     7501                           CODE  value  set  by  the  caller.  If patches
     1546     7502                           exist,  they  too  are  printed  in BOLD type,
     1547     7503                           ensuring that  they fit on the  same page with
     1548     7504                           the object deck descriptor line.
     1549     7505
     1550     7506                           The  printing  of  headers  is  automatically
     1551     7507                           handled by the TOU$DU printing utilities.
     1552     7508        */
     1553     7509        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:209  
     1554     7510    1   B_PRINT_DECK_LINE: PROC ALTRET ;

   7510  2 002513   200016 741300       B_PRINT_DEC* STX1  ! HDR$+1,,AUTO

     1555     7511
     1556     7512    2      DCL HOLD_CODE   UBIN WORD ALIGNED ;
     1557     7513
     1558     7514        /* Code */
     1559     7515
     1560     7516    2      IF BCD# > 1

   7516  2 002514   000044 235000 0                  LDA     BCD#
         2 002515   000002 115007                    CMPA    2,DL
         2 002516   002572 602000 2                  TNC     s:7535

     1561     7517    3      THEN DO ;

     1562     7518    3              IF DUP.CURRENT_LINE# + BCD# > DUP.BOTTOM_LINE#

   7518  2 002517   000030 236000 xsym               LDQ     DUP+24
         2 002520   000044 036000 0                  ADLQ    BCD#
         2 002521   000031 116000 xsym               CMPQ    DUP+25
         2 002522   002526 602000 2                  TNC     s:7521
         2 002523   002526 600000 2                  TZE     s:7521

     1563     7519    3              THEN DUP.FORCE_NEW_PAGE = %TRUE ;

   7519  2 002524   400000 236003                    LDQ     -131072,DU
         2 002525   000056 756000 xsym               STQ     DUP+46

     1564     7520    3              ELSE /* patches will fit on same page as object deck */ ;
     1565     7521    3              CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;

   7521  2 002526   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002527   000000 701000 xent               TSX1    TOU$DU_PRINTER_WRITE
         2 002530   002577 702000 2                  TSX2    ERROR

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:210  
     1566     7522    3              HOLD_CODE = DUP.MSG_CODE ;

   7522  2 002531   000020 235000 xsym               LDA     DUP+16
         2 002532   200017 755100                    STA     HOLD_CODE,,AUTO

     1567     7523    3              DUP.LINE_VFC = %NEXT_WRITE ;

   7523  2 002533   141000 236003                    LDQ     49664,DU
         2 002534   000026 756000 xsym               STQ     DUP+22

     1568     7524    3              DUP.MSG_CODE = %T$B_PATCHES_WERE ;

   7524  2 002535   000035 235007                    LDA     29,DL
         2 002536   000020 755000 xsym               STA     DUP+16

     1569     7525    3              CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;

   7525  2 002537   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002540   000000 701000 xent               TSX1    TOU$DU_PRINTER_WRITE
         2 002541   002577 702000 2                  TSX2    ERROR

     1570     7526    3              DUP.MSG_CODE = %T$B_PATCH ;

   7526  2 002542   000036 235007                    LDA     30,DL
         2 002543   000020 755000 xsym               STA     DUP+16

     1571     7527    4              DO CUR# = 0 TO BCD#-2 ;

   7527  2 002544   000050 450000 0                  STZ     CUR#
         2 002545   002554 710000 2                  TRA     s:7529+3

     1572     7528    4                 CALL TOU$DU_PRINTER_OVERWRITE ALTRET (ERROR) ;

   7528  2 002546   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002547   000000 701000 xent               TSX1    TOU$DU_PRINTER_OVERWRITE
         2 002550   002577 702000 2                  TSX2    ERROR

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:211  
     1573     7529    4              END /* DO */ ;

   7529  2 002551   000050 235000 0                  LDA     CUR#
         2 002552   000001 035007                    ADLA    1,DL
         2 002553   000050 755000 0                  STA     CUR#
         2 002554   000044 236000 0                  LDQ     BCD#
         2 002555   000002 136007                    SBLQ    2,DL
         2 002556   002561 604000 2                  TMI     s:7530
         2 002557   000050 116000 0                  CMPQ    CUR#
         2 002560   002546 603000 2                  TRC     s:7528

     1574     7530    3              DUP.LINE_VFC = %SKIP_WRITE ;

   7530  2 002561   142000 236003                    LDQ     50176,DU
         2 002562   000026 756000 xsym               STQ     DUP+22

     1575     7531    3              DUP.MSG_CODE = %T$BLANK_LINE ;

   7531  2 002563   000020 450000 xsym               STZ     DUP+16

     1576     7532    3              CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;

   7532  2 002564   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002565   000000 701000 xent               TSX1    TOU$DU_PRINTER_WRITE
         2 002566   002577 702000 2                  TSX2    ERROR

     1577     7533    3              DUP.MSG_CODE = HOLD_CODE ;

   7533  2 002567   200017 235100                    LDA     HOLD_CODE,,AUTO
         2 002570   000020 755000 xsym               STA     DUP+16

     1578     7534    3           END /* THEN */ ;

   7534  2 002571   002575 710000 2                  TRA     s:7536

     1579     7535    2      ELSE CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:212  
   7535  2 002572   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002573   000000 701000 xent               TSX1    TOU$DU_PRINTER_WRITE
         2 002574   002577 702000 2                  TSX2    ERROR

     1580     7536    2      RETURN;

   7536  2 002575   200016 221300                    LDX1  ! HDR$+1,,AUTO
         2 002576   000001 702211                    TSX2  ! 1,X1

     1581     7537
     1582     7538    2   ERROR:
     1583     7539    2      DUP.LINE_VFC = %SKIP_WRITE ;

   7539  2 002577   142000 236003       ERROR        LDQ     50176,DU
         2 002600   000026 756000 xsym               STQ     DUP+22

     1584     7540    2      ALTRETURN ;

   7540  2 002601   200016 221300                    LDX1  ! HDR$+1,,AUTO
         2 002602   000000 702211                    TSX2  ! 0,X1

     1585     7541
     1586     7542    2   END B_PRINT_DECK_LINE ;
     1587     7543        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:213  
     1588     7544        /*I*  NAME:        B_SAVE_CATALOG_ENTRY
     1589     7545              AUTHORS:     David M. Augustine
     1590     7546                           Scott S. Sheppard
     1591     7547              PURPOSE:     Saves the Deck as a Catalog Entry
     1592     7548              INTERFACE:   TOU$DFU_DF_WR_CATALOG_ENTRY
     1593     7549              INPUT:       CATALOG_ENTRY_KEY.ENTRY#
     1594     7550                           CATALOG_ENTRY_KEY.ENTRY_COUNT
     1595     7551              OUTPUT:      CATALOG_ENTRY_KEY.ENTRY#
     1596     7552                           CATALOG_DATA.ENTRY_COUNT
     1597     7553              DESCRIPTION: This procedure is called to save the object deck as
     1598     7554                           an entry of the current catalog.
     1599     7555        */
     1600     7556
     1601     7557    1   B_SAVE_CATALOG_ENTRY: PROC ALTRET ;

   7557  2 002603   200012 741300       B_SAVE_CATA* STX1  ! I+1,,AUTO

     1602     7558
     1603     7559        /* Code */
     1604     7560
     1605     7561    2      CALL TOU$DFU_DF_WR_CATALOG_ENTRY ALTRET (ERROR) ;

   7561  2 002604   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002605   000000 701000 xent               TSX1    TOU$DFU_DF_WR_CATALOG_ENTRY
         2 002606   002625 702000 2                  TSX2    ERROR

     1606     7562    2      CATALOG_ENTRY_KEY.ENTRY# = CATALOG_ENTRY_KEY.ENTRY# + 1;

   7562  2 002607   000000 235000 xsym               LDA     CATALOG_ENTRY_KEY
         2 002610   000001 236000 xsym               LDQ     CATALOG_ENTRY_KEY+1
         2 002611   000033 773000                    LRL     27
         2 002612   777777 376007                    ANQ     -1,DL
         2 002613   000001 036007                    ADLQ    1,DL
         2 002614   200034 756100                    STQ     SECOND+2,,AUTO
         2 002615   000000 101500                    MRL     fill='000'O
         2 002616   200034 000004                    ADSC9   SECOND+2,,AUTO           cn=0,n=4
         2 002617   000000 600002 xsym               ADSC9   CATALOG_ENTRY_KEY        cn=3,n=2
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:214  

     1607     7563    2      CATALOG_DATA.ENTRY_COUNT = CATALOG_DATA.ENTRY_COUNT + 1;

   7563  2 002620   000000 720000 xsym               LXL0    CATALOG_DATA
         2 002621   000001 621010                    EAX1    1,X0
         2 002622   000000 441000 xsym               SXL1    CATALOG_DATA

     1608     7564    2      RETURN;

   7564  2 002623   200012 221300                    LDX1  ! I+1,,AUTO
         2 002624   000001 702211                    TSX2  ! 1,X1

     1609     7565
     1610     7566    2   ERROR:
     1611     7567    2      ALTRETURN ;

   7567  2 002625   200012 221300       ERROR        LDX1  ! I+1,,AUTO
         2 002626   000000 702211                    TSX2  ! 0,X1

     1612     7568
     1613     7569    2   END B_SAVE_CATALOG_ENTRY;
     1614     7570        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:215  
     1615     7571        /*I*  NAME:        B_SAVE_SUBCATALOG
     1616     7572              AUTHORS:     David M. Augustine
     1617     7573                           Scott S. Sheppard
     1618     7574              PURPOSE:     Saves Subcatalog
     1619     7575              INTERFACE:   TOU$REPLACE
     1620     7576                           TOU$DFU_DF_WR_SUBCATALOG
     1621     7577              INPUT:       IFAD_FID
     1622     7578                           CATALOG_DATA.DECK#
     1623     7579              OUTPUT:      SUBCATALOG_DATA.IFAD_FID
     1624     7580                           SUBCATALOG_DATA.IFAD_FN
     1625     7581                           SUBCATALOG_KEY.DECK#
     1626     7582              DESCRIPTION: This procedure saves the subcatalog information
     1627     7583                           (IFAD file identifier and file number) for  the
     1628     7584                           current catalog being procesed.
     1629     7585        */
     1630     7586
     1631     7587    1   B_SAVE_SUBCATALOG: PROC (IFAD_FID, IFAD_FN) ALTRET ;

   7587  2 002627   200012 741300       B_SAVE_SUBC* STX1  ! I+1,,AUTO

     1632     7588
     1633     7589    2      DCL IFAD_FID    CHAR (40) CALIGNED ;
     1634     7590    2      DCL IFAD_FN     CHAR (12) CALIGNED ;
     1635     7591
     1636     7592        /* Code */
     1637     7593
     1638     7594    2      SUBCATALOG_KEY.DECK# = CATALOG_DATA.DECK# ;

   7594  2 002630   000000 236000 xsym               LDQ     CATALOG_DATA
         2 002631   000011 772000                    QRL     9
         2 002632   000000 552030 xsym               STBQ    SUBCATALOG_KEY,'30'O

     1639     7595    2      SUBCATALOG_DATA.IFAD_FID = IFAD_FID ;

   7595  2 002633   200013 470500                    LDP0    @IFAD_FID,,AUTO
         2 002634   040000 100500                    MLR     fill='040'O
         2 002635   000000 000050                    ADSC9   0,,PR0                   cn=0,n=40
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:216  
         2 002636   000000 000050 xsym               ADSC9   SUBCATALOG_DATA          cn=0,n=40

     1640     7596    2      SUBCATALOG_DATA.IFAD_FN = IFAD_FN ;

   7596  2 002637   200014 471500                    LDP1    @IFAD_FN,,AUTO
         2 002640   040000 100500                    MLR     fill='040'O
         2 002641   100000 000014                    ADSC9   0,,PR1                   cn=0,n=12
         2 002642   000012 000014 xsym               ADSC9   SUBCATALOG_DATA+10       cn=0,n=12

     1641     7597    2      CALL TOU$REPLACE (SUBCATALOG_DATA.IFAD_FN, 3) ;

   7597  2 002643   000034 630400 3                  EPPR0   28
         2 002644   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 002645   000000 701000 xent               TSX1    TOU$REPLACE
         2 002646   000000 011000                    NOP     0

     1642     7598    2      CALL TOU$DFU_DF_WR_SUBCATALOG ALTRET (ERROR) ;

   7598  2 002647   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002650   000000 701000 xent               TSX1    TOU$DFU_DF_WR_SUBCATALOG
         2 002651   002654 702000 2                  TSX2    ERROR

     1643     7599    2      RETURN ;

   7599  2 002652   200012 221300                    LDX1  ! I+1,,AUTO
         2 002653   000001 702211                    TSX2  ! 1,X1

     1644     7600
     1645     7601    2   ERROR:
     1646     7602    2      ALTRETURN ;

   7602  2 002654   200012 221300       ERROR        LDX1  ! I+1,,AUTO
         2 002655   000000 702211                    TSX2  ! 0,X1

     1647     7603
     1648     7604    2   END B_SAVE_SUBCATALOG ;
     1649     7605        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:217  
     1650     7606        /*I*  NAME:        B_SAVE_CATALOG
     1651     7607              AUTHORS:     David M. Augustine
     1652     7608                           Scott S. Sheppard
     1653     7609              PURPOSE:     Saves Catalog Information
     1654     7610              INTERFACE:   B_ERR_MSG
     1655     7611                           TOU$DU_USER_WRITE
     1656     7612                           TOU$DU_PRINTER_WRITE
     1657     7613                           TOU$DFU_DF_WR_CATALOG_CONTROL
     1658     7614              INPUT:       CATALOG_KEY_SET
     1659     7615                           MASTER_ENTRY_KEY.ENTRY#
     1660     7616              OUTPUT:      DUP.MSG_CODE
     1661     7617                           DUP.FORCE_NEW_PAGE
     1662     7618                           CATALOG_KEY_SET
     1663     7619                           DECK_SAVED
     1664     7620              DESCRIPTION: This procedure saves the master entry record
     1665     7621                           and  catalog control record  for the current
     1666     7622                           catalog.
     1667     7623        */
     1668     7624        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:218  
     1669     7625    1   B_SAVE_CATALOG: PROC (SAVE_TYPE) ALTRET ;

   7625  2 002656   200012 741300       B_SAVE_CATA* STX1  ! I+1,,AUTO

     1670     7626
     1671     7627    2      DCL SAVE_TYPE CHAR (5) CALIGNED ;
     1672     7628
     1673     7629        /* Code */
     1674     7630
     1675     7631    2      IF CATALOG_KEY_SET

   7631  2 002657   000046 234000 0                  SZN     CATALOG_KEY_SET
         2 002660   002721 605000 2                  TPL     s:7651

     1676     7632    3      THEN DO ;

     1677     7633    3              CALL TOU$DFU_DF_WR_CATALOG_CONTROL ALTRET (ERROR) ;

   7633  2 002661   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002662   000000 701000 xent               TSX1    TOU$DFU_DF_WR_CATALOG_CONTROL
         2 002663   002725 702000 2                  TSX2    ERROR

     1678     7634
     1679     7635    3              DUP.MSG_CODE = %T$B_CATALOG ;

   7635  2 002664   000027 235007                    LDA     23,DL
         2 002665   000020 755000 xsym               STA     DUP+16

     1680     7636    3              CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;

   7636  2 002666   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002667   000000 701000 xent               TSX1    TOU$DU_PRINTER_WRITE
         2 002670   002725 702000 2                  TSX2    ERROR

     1681     7637    3              IF SAVE_TYPE = 'BUILD'

   7637  2 002671   200013 470500                    LDP0    @SAVE_TYPE,,AUTO
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:219  
         2 002672   040000 106500                    CMPC    fill='040'O
         2 002673   000000 000005                    ADSC9   0,,PR0                   cn=0,n=5
         2 002674   000016 000005 1                  ADSC9   MASTER_KEY+14            cn=0,n=5
         2 002675   002701 601000 2                  TNZ     s:7639

     1682     7638    3              THEN DUP.MSG_CODE = %T$B_INFORM_BUILD ;

   7638  2 002676   000033 235007                    LDA     27,DL
         2 002677   000020 755000 xsym               STA     DUP+16
         2 002700   002703 710000 2                  TRA     s:7640

     1683     7639    3              ELSE DUP.MSG_CODE = %T$B_INFORM_COPY ;

   7639  2 002701   000037 235007                    LDA     31,DL
         2 002702   000020 755000 xsym               STA     DUP+16

     1684     7640    3              IF DUP.BATCH_MODE

   7640  2 002703   000000 234000 xsym               SZN     DUP
         2 002704   002710 604000 2                  TMI     s:7643

     1685     7641    3              THEN ;
     1686     7642    3              ELSE CALL TOU$DU_USER_WRITE ;

   7642  2 002705   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002706   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 002707   000000 011000                    NOP     0

     1687     7643    3              CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;

   7643  2 002710   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002711   000000 701000 xent               TSX1    TOU$DU_PRINTER_WRITE
         2 002712   002725 702000 2                  TSX2    ERROR

     1688     7644    3              DUP.FORCE_NEW_PAGE = %TRUE ;

   7644  2 002713   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:220  
         2 002714   000056 756000 xsym               STQ     DUP+46

     1689     7645
     1690     7646    3              CATALOG_KEY_SET = %FALSE ;

   7646  2 002715   000046 450000 0                  STZ     CATALOG_KEY_SET

     1691     7647    3              DECK_SAVED = %FALSE ;

   7647  2 002716   000051 450000 0                  STZ     DECK_SAVED

     1692     7648    3              RETURN ;

   7648  2 002717   200012 221300                    LDX1  ! I+1,,AUTO
         2 002720   000001 702211                    TSX2  ! 1,X1

     1693     7649    3           END /* THEN */ ;
     1694     7650    3      ELSE DO ;

     1695     7651    3              CALL B_ERR_MSG (%E$BSC_ITR_NO_FIRM) ;

   7651  2 002721   000037 236000 3                  LDQ     31
         2 002722   200017 756100                    STQ     HOLD_CODE,,AUTO
         2 002723   003340 701000 2                  TSX1    B_ERR_MSG
         2 002724   000000 011000                    NOP     0

     1696     7652    3   ERROR:
     1697     7653    3              ALTRETURN ;

   7653  2 002725   200012 221300       ERROR        LDX1  ! I+1,,AUTO
         2 002726   000000 702211                    TSX2  ! 0,X1

     1698     7654    3           END /* ELSE */ ;
     1699     7655
     1700     7656    2   END B_SAVE_CATALOG ;
     1701     7657        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:221  
     1702     7658        /*I*  NAME:        B_SAVE_MASTER_ENTRY
     1703     7659              AUTHORS:     David M. Augustine
     1704     7660                           Scott S. Sheppard
     1705     7661              PURPOSE:     Saves Catalog as a Master Entry
     1706     7662              INTERFACE:   TOU$DFU_DF_WR_MASTER_ENTRY
     1707     7663              INPUT:       MASTER_ENTRY_KEY
     1708     7664                           MASTER_DATA
     1709     7665              OUTPUT:      MASTER_ENTRY_KEY
     1710     7666                           MASTER_DATA
     1711     7667              DESCRIPTION: This procedure saves the current catalog as an entry
     1712     7668                           of the master catalog.
     1713     7669        */
     1714     7670
     1715     7671    1   B_SAVE_MASTER_ENTRY: PROC ALTRET ;

   7671  2 002727   200012 741300       B_SAVE_MAST* STX1  ! I+1,,AUTO

     1716     7672
     1717     7673        /* Code */
     1718     7674
     1719     7675    2      CALL TOU$DFU_DF_WR_MASTER_ENTRY ALTRET (ERROR) ;

   7675  2 002730   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002731   000000 701000 xent               TSX1    TOU$DFU_DF_WR_MASTER_ENTRY
         2 002732   002751 702000 2                  TSX2    ERROR

     1720     7676    2      MASTER_ENTRY_KEY.ENTRY# = MASTER_ENTRY_KEY.ENTRY# + 1;

   7676  2 002733   000000 235000 xsym               LDA     MASTER_ENTRY_KEY
         2 002734   000001 236000 xsym               LDQ     MASTER_ENTRY_KEY+1
         2 002735   000033 773000                    LRL     27
         2 002736   777777 376007                    ANQ     -1,DL
         2 002737   000001 036007                    ADLQ    1,DL
         2 002740   200034 756100                    STQ     SECOND+2,,AUTO
         2 002741   000000 101500                    MRL     fill='000'O
         2 002742   200034 000004                    ADSC9   SECOND+2,,AUTO           cn=0,n=4
         2 002743   000000 600002 xsym               ADSC9   MASTER_ENTRY_KEY         cn=3,n=2
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:222  

     1721     7677    2      MASTER_DATA.ENTRY_COUNT = MASTER_DATA.ENTRY_COUNT + 1;

   7677  2 002744   000000 720000 xsym               LXL0    MASTER_DATA
         2 002745   000001 621010                    EAX1    1,X0
         2 002746   000000 441000 xsym               SXL1    MASTER_DATA

     1722     7678    2      RETURN ;

   7678  2 002747   200012 221300                    LDX1  ! I+1,,AUTO
         2 002750   000001 702211                    TSX2  ! 1,X1

     1723     7679
     1724     7680    2   ERROR:
     1725     7681    2      ALTRETURN ;

   7681  2 002751   200012 221300       ERROR        LDX1  ! I+1,,AUTO
         2 002752   000000 702211                    TSX2  ! 0,X1

     1726     7682
     1727     7683    2   END B_SAVE_MASTER_ENTRY ;
     1728     7684        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:223  
     1729     7685        /*I* NAME:         B_SAVE_NIO_CATALOG
     1730     7686             AUTHOR:       Scott S. Sheppard
     1731     7687             PURPOSE:      Saves temporary file records in the deckfile
     1732     7688             INTERFACE:    TOU$DFU_OPEN_TEMP
     1733     7689                           TOU$DFU_CLOSE_TEMP
     1734     7690                           B_GET_CATALOG
     1735     7691                           B_FETCH_OBJECT_DECK
     1736     7692                           B_SAVE_OBJECT_DECK
     1737     7693                           B_SAVE_CATALOG_ENTRY
     1738     7694                           B_SAVE_SUBCATALOG
     1739     7695                           B_SAVE_CATALOG
     1740     7696                           B_SAVE_MASTER_ENTRY
     1741     7697             PARAMETERS:   None passed.
     1742     7698             DATA:         DUP.TEMP.OPEN_TYPE - output
     1743     7699                           DUP.TEMP.CLOSE_TYPE - output
     1744     7700                           CATALOG_KEY.DATA - output
     1745     7701                           CATALOG_SEARCH_KEY.DATA - input
     1746     7702                           DUP.HDR_CODE - output
     1747     7703                           DUP.MSG_CODE - output
     1748     7704                           COPIED_CATALOG.ENTRY_COUNT - input
     1749     7705                           COPIED_SUB.IFAD_FID - input
     1750     7706                           COPIED_SUB.IFAD_FN - input
     1751     7707             DESCRIPTION:  This procedure reads records  from a temporary
     1752     7708                           file and stores them in the deckfile.
     1753     7709        */
     1754     7710        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:224  
     1755     7711    1   B_SAVE_NIO_CATALOG: PROC ALTRET ;

   7711  2 002753   200010 741300       B_SAVE_NIO_* STX1  ! VOLUME#+1,,AUTO

     1756     7712
     1757     7713    2      DCL I UBIN WORD ALIGNED ;
     1758     7714
     1759     7715        /* Code */
     1760     7716
     1761     7717    2      CALL B_GET_CATALOG ;

   7717  2 002754   000756 701000 2                  TSX1    B_GET_CATALOG
         2 002755   000000 011000                    NOP     0

     1762     7718    2      CATALOG_KEY_SET = %TRUE ;

   7718  2 002756   400000 236003                    LDQ     -131072,DU
         2 002757   000046 756000 0                  STQ     CATALOG_KEY_SET

     1763     7719    2      CATALOG_KEY.DATA = CATALOG_SEARCH_KEY.DATA ;

   7719  2 002760   040000 100400                    MLR     fill='040'O
         2 002761   000000 000025 xsym               ADSC9   CATALOG_SEARCH_KEY       cn=0,n=21
         2 002762   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21

     1764     7720    2      DUP.HDR_CODE = %H$BUILD_NIO ;

   7720  2 002763   001313 235007                    LDA     715,DL
         2 002764   000021 755000 xsym               STA     DUP+17

     1765     7721    2      DUP.MSG_CODE = %T$B_ITR ;

   7721  2 002765   000031 235007                    LDA     25,DL
         2 002766   000020 755000 xsym               STA     DUP+16

     1766     7722
     1767     7723    2      DUP.TEMP.OPEN_TYPE = %READ_FILE ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:225  

   7723  2 002767   000002 235007                    LDA     2,DL
         2 002770   000140 755000 xsym               STA     DUP+96

     1768     7724    2      CALL TOU$DFU_OPEN_TEMP ALTRET (ERROR) ;

   7724  2 002771   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002772   000000 701000 xent               TSX1    TOU$DFU_OPEN_TEMP
         2 002773   003041 702000 2                  TSX2    ERROR

     1769     7725
     1770     7726    3      DO I = 1 TO COPIED_CATALOG.ENTRY_COUNT ;

   7726  2 002774   000001 235007                    LDA     1,DL
         2 002775   200011 755100                    STA     I,,AUTO
         2 002776   003012 710000 2                  TRA     s:7730+3

     1771     7727    3         CALL B_FETCH_OBJECT_DECK ALTRET (ERROR) ;

   7727  2 002777   003050 701000 2                  TSX1    B_FETCH_OBJECT_DECK
         2 003000   003041 702000 2                  TSX2    ERROR

     1772     7728    3         CALL B_SAVE_OBJECT_DECK ('FILE') ALTRET (ERROR) ;

   7728  2 003001   000040 236000 3                  LDQ     32
         2 003002   200013 756100                    STQ     @SAVE_TYPE,,AUTO
         2 003003   002340 701000 2                  TSX1    B_SAVE_OBJECT_DECK
         2 003004   003041 702000 2                  TSX2    ERROR

     1773     7729    3         CALL B_SAVE_CATALOG_ENTRY ALTRET (ERROR) ;

   7729  2 003005   002603 701000 2                  TSX1    B_SAVE_CATALOG_ENTRY
         2 003006   003041 702000 2                  TSX2    ERROR

     1774     7730    3      END /* DO */ ;

   7730  2 003007   200011 235100                    LDA     I,,AUTO
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:226  
         2 003010   000001 035007                    ADLA    1,DL
         2 003011   200011 755100                    STA     I,,AUTO
         2 003012   000025 236000 0                  LDQ     COPIED_CATALOG
         2 003013   777777 376007                    ANQ     -1,DL
         2 003014   200011 116100                    CMPQ    I,,AUTO
         2 003015   002777 603000 2                  TRC     s:7727

     1775     7731
     1776     7732    2      CALL B_SAVE_SUBCATALOG (COPIED_SUB.IFAD_FID, COPIED_SUB.IFAD_FN)

   7732  2 003016   000041 236000 3                  LDQ     33
         2 003017   200014 756100                    STQ     @IFAD_FN,,AUTO
         2 003020   000042 236000 3                  LDQ     34
         2 003021   200013 756100                    STQ     @SAVE_TYPE,,AUTO
         2 003022   002627 701000 2                  TSX1    B_SAVE_SUBCATALOG
         2 003023   003041 702000 2                  TSX2    ERROR

     1777     7733    2              ALTRET (ERROR) ;
     1778     7734    2      CALL B_SAVE_CATALOG ('COPY') ALTRET (ERROR) ;

   7734  2 003024   000043 236000 3                  LDQ     35
         2 003025   200013 756100                    STQ     @SAVE_TYPE,,AUTO
         2 003026   002656 701000 2                  TSX1    B_SAVE_CATALOG
         2 003027   003041 702000 2                  TSX2    ERROR

     1779     7735    2      CALL B_SAVE_MASTER_ENTRY ALTRET (ERROR) ;

   7735  2 003030   002727 701000 2                  TSX1    B_SAVE_MASTER_ENTRY
         2 003031   003041 702000 2                  TSX2    ERROR

     1780     7736
     1781     7737    2      DUP.TEMP.CLOSE_TYPE = %DISCARD_FILE ;

   7737  2 003032   000001 235007                    LDA     1,DL
         2 003033   000141 755000 xsym               STA     DUP+97

     1782     7738    2      CALL TOU$DFU_CLOSE_TEMP ALTRET (ERROR) ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:227  

   7738  2 003034   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003035   000000 701000 xent               TSX1    TOU$DFU_CLOSE_TEMP
         2 003036   003041 702000 2                  TSX2    ERROR

     1783     7739    2      RETURN ;

   7739  2 003037   200010 221300                    LDX1  ! VOLUME#+1,,AUTO
         2 003040   000001 702211                    TSX2  ! 1,X1

     1784     7740
     1785     7741    2   ERROR:
     1786     7742    2      DUP.TEMP.CLOSE_TYPE = %DISCARD_FILE ;

   7742  2 003041   000001 235007       ERROR        LDA     1,DL
         2 003042   000141 755000 xsym               STA     DUP+97

     1787     7743    2      CALL TOU$DFU_CLOSE_TEMP ;

   7743  2 003043   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003044   000000 701000 xent               TSX1    TOU$DFU_CLOSE_TEMP
         2 003045   000000 011000                    NOP     0

     1788     7744    2      ALTRETURN ;

   7744  2 003046   200010 221300                    LDX1  ! VOLUME#+1,,AUTO
         2 003047   000000 702211                    TSX2  ! 0,X1

     1789     7745
     1790     7746        /* END B_SAVE_NIO_CATALOG */
     1791     7747        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:228  
     1792     7748        /*I* NAME:         B_FETCH_OBJECT_DECK
     1793     7749             AUTHOR:       Scott S. Sheppard
     1794     7750             PURPOSE:      reads and object deck from a temporary file
     1795     7751             INTERFACE:    TOU$DFU_TF_RD_CATALOG_ENTRY
     1796     7752                           TOU$DFU_TF_RD_OBJECT
     1797     7753                           TOU$DFU_TF_RD_FILE
     1798     7754                           TOU$DFU_TF_RD_BCD_CARDS
     1799     7755             PARAMETERS:   None passed.
     1800     7756             DATA:         COPIED_CATALOG - input
     1801     7757                           CATALOG_ENTRY_KEY - output
     1802     7758                           LAST.EDIT_NAME - output
     1803     7759                           BINARY_KEY - output
     1804     7760                           BIN# - output
     1805     7761                           MCA_B.FILE.SIZE - output
     1806     7762                           BCD_KEY - output
     1807     7763                           BCD# - output
     1808     7764                           DKEND - output
     1809     7765                           OBJECT.TOTAL_COUNT - input
     1810     7766                           OBJECT.BINARY_COUNT - input
     1811     7767             DESCRIPTION:  This  procedure  reads  an  object deck from a
     1812     7768                           temporary file so that  it may be written into
     1813     7769                           the deckfile.
     1814     7770        */
     1815     7771        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:229  
     1816     7772    2   B_FETCH_OBJECT_DECK: PROC ALTRET ;

   7772  2 003050   200012 741300       B_FETCH_OBJ* STX1  ! I+1,,AUTO

     1817     7773
     1818     7774        /* Code */
     1819     7775
     1820     7776    3      CATALOG_ENTRY_KEY.DECK# = COPIED_CATALOG.DECK# ;

   7776  2 003051   000025 236000 0                  LDQ     COPIED_CATALOG
         2 003052   000011 772000                    QRL     9
         2 003053   000000 552030 xsym               STBQ    CATALOG_ENTRY_KEY,'30'O

     1821     7777    3      CALL TOU$DFU_TF_RD_CATALOG_ENTRY ALTRET (ERROR) ;

   7777  2 003054   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003055   000000 701000 xent               TSX1    TOU$DFU_TF_RD_CATALOG_ENTRY
         2 003056   003143 702000 2                  TSX2    ERROR

     1822     7778    3      CATALOG_ENTRY_KEY.DECK# = CATALOG_DATA.DECK# ;

   7778  2 003057   000000 236000 xsym               LDQ     CATALOG_DATA
         2 003060   000011 772000                    QRL     9
         2 003061   000000 552030 xsym               STBQ    CATALOG_ENTRY_KEY,'30'O

     1823     7779
     1824     7780    3      CALL TOU$DFU_TF_RD_OBJECT ALTRET (ERROR) ;

   7780  2 003062   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003063   000000 701000 xent               TSX1    TOU$DFU_TF_RD_OBJECT
         2 003064   003143 702000 2                  TSX2    ERROR

     1825     7781    3      LAST.EDIT_NAME = OBJECT.BCD.LBL ;

   7781  2 003065   040000 100400                    MLR     fill='040'O
         2 003066   000022 000004 xsym               ADSC9   OBJECT+18                cn=0,n=4
         2 003067   000000 400004 xsym               ADSC9   LAST                     cn=2,n=4
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:230  

     1826     7782
     1827     7783    3      BINARY_KEY.DECK# = OBJECT.DECK# ;

   7783  2 003070   000024 236000 xsym               LDQ     OBJECT+20
         2 003071   000011 772000                    QRL     9
         2 003072   000000 552030 xsym               STBQ    BINARY_KEY,'30'O

     1828     7784    3      BIN# = OBJECT.BINARY_COUNT ;

   7784  2 003073   000024 236000 xsym               LDQ     OBJECT+20
         2 003074   777777 376007                    ANQ     -1,DL
         2 003075   000045 756000 0                  STQ     BIN#

     1829     7785    3      MCA_B.FILE.SIZE = OBJECT.LOAD_SIZE * 4 ;

   7785  2 003076   000025 236000 xsym               LDQ     OBJECT+21
         2 003077   000002 736000                    QLS     2
         2 003100   000044 376000 3                  ANQ     36
         2 003101   000101 470400 xsym               LDP0    DUP+65
         2 003102   040000 220003                    LDX0    16384,DU
         2 003103   001325 756110                    STQ     725,X0,PR0

     1830     7786    3      CALL TOU$DFU_TF_RD_FILE ALTRET (ERROR) ;

   7786  2 003104   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003105   000000 701000 xent               TSX1    TOU$DFU_TF_RD_FILE
         2 003106   003143 702000 2                  TSX2    ERROR

     1831     7787
     1832     7788    3      BCD_KEY.DECK# = OBJECT.DECK# ;

   7788  2 003107   000024 236000 xsym               LDQ     OBJECT+20
         2 003110   000011 772000                    QRL     9
         2 003111   000000 552030 xsym               STBQ    BCD_KEY,'30'O

     1833     7789    3      BCD# = OBJECT.TOTAL_COUNT - OBJECT.BINARY_COUNT - 1 ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:231  

   7789  2 003112   000024 236000 xsym               LDQ     OBJECT+20
         2 003113   777777 376007                    ANQ     -1,DL
         2 003114   200034 756100                    STQ     SECOND+2,,AUTO
         2 003115   000025 236000 xsym               LDQ     OBJECT+21
         2 003116   000022 772000                    QRL     18
         2 003117   200034 136100                    SBLQ    SECOND+2,,AUTO
         2 003120   000001 136007                    SBLQ    1,DL
         2 003121   000044 756000 0                  STQ     BCD#

     1834     7790    3      CALL TOU$DFU_TF_RD_BCD_CARDS ALTRET (ERROR) ;

   7790  2 003122   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003123   000000 701000 xent               TSX1    TOU$DFU_TF_RD_BCD_CARDS
         2 003124   003143 702000 2                  TSX2    ERROR

     1835     7791    3      DKEND_ = BCD_B(BCD# - 1) ;

   7791  2 003125   000044 236000 0                  LDQ     BCD#
         2 003126   000124 402007                    MPY     84,DL
         2 003127   000103 470400 xsym               LDP0    DUP+67
         2 003130   040000 100506                    MLR     fill='040'O
         2 003131   077753 000124                    ADSC9   -21,Q,PR0                cn=0,n=84
         2 003132   000000 000124 0                  ADSC9   DKEND                    cn=0,n=84

     1836     7792
     1837     7793    3      ID.ID = 'DIPPER' ;

   7793  2 003133   040000 100400                    MLR     fill='040'O
         2 003134   000103 000006 1                  ADSC9   MASTER_KEY+67            cn=0,n=6
         2 003135   000000 000006 xsym               ADSC9   ID                       cn=0,n=6

     1838     7794    3      ID.REVISION = DKEND.BCD.REVISION ;

   7794  2 003136   040000 100400                    MLR     fill='040'O
         2 003137   000020 400006 0                  ADSC9   DKEND+16                 cn=2,n=6
         2 003140   000001 400006 xsym               ADSC9   ID+1                     cn=2,n=6
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:232  

     1839     7795    3      RETURN ;

   7795  2 003141   200012 221300                    LDX1  ! I+1,,AUTO
         2 003142   000001 702211                    TSX2  ! 1,X1

     1840     7796
     1841     7797    3   ERROR:
     1842     7798    3      ALTRETURN ;

   7798  2 003143   200012 221300       ERROR        LDX1  ! I+1,,AUTO
         2 003144   000000 702211                    TSX2  ! 0,X1

     1843     7799
     1844     7800    3   END B_FETCH_OBJECT_DECK ;
     1845     7801    2   END B_SAVE_NIO_CATALOG ;
     1846     7802        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:233  
     1847     7803        /*I*  NAME:        B_SAVE_MASTER_CATALOG
     1848     7804              AUTHORS:     David M. Augustine
     1849     7805                           Scott S. Sheppard
     1850     7806              PURPOSE:     Saves Master Catalog Deck
     1851     7807              INTERFACE:   TOU$DU_USER_WRITE
     1852     7808                           TOU$DU_PRINTER_WRITE
     1853     7809                           TOU$DFU_DF_WR_SUBCATALOG
     1854     7810                           TOU$DFU_DF_WR_MASTER_CONTROL
     1855     7811              INPUT:       MASTER_KEY.DATA
     1856     7812                           MASTER_ENTRY
     1857     7813                           MASTER_DATA
     1858     7814              OUTPUT:      DUP.HDR_CODE
     1859     7815                           DUP.MSG_CODE
     1860     7816                           ENTRY_COUNT
     1861     7817                           SUBCATALOG_KEY
     1862     7818                           SUBCATALOG_DATA
     1863     7819              DESCRIPTION: This procedure saves the master catalog in the
     1864     7820                           deckfile after the IFAD input source  has been
     1865     7821                           processed.
     1866     7822        */
     1867     7823        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:234  
     1868     7824    1   B_SAVE_MASTER_CATALOG: PROC ALTRET ;

   7824  2 003145   200010 741300       B_SAVE_MAST* STX1  ! VOLUME#+1,,AUTO

     1869     7825
     1870     7826        /* Code */
     1871     7827
     1872     7828    2      IF MASTER_DATA.ENTRY_COUNT > 0

   7828  2 003146   000000 720000 xsym               LXL0    MASTER_DATA
         2 003147   003204 600000 2                  TZE     s:7847

     1873     7829    3      THEN DO ;

     1874     7830    3              CALL TOU$DFU_DF_WR_MASTER_CONTROL ALTRET (ERROR) ;

   7830  2 003150   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003151   000000 701000 xent               TSX1    TOU$DFU_DF_WR_MASTER_CONTROL
         2 003152   003211 702000 2                  TSX2    ERROR

     1875     7831
     1876     7832    3              CATALOG_KEY.DATA = MASTER_KEY.DATA ;

   7832  2 003153   040000 100400                    MLR     fill='040'O
         2 003154   000000 200016 1                  ADSC9   MASTER_KEY               cn=1,n=14
         2 003155   000000 200025 xsym               ADSC9   CATALOG_KEY              cn=1,n=21

     1877     7833    3              CATALOG_DATA = MASTER_DATA;

   7833  2 003156   000000 100400                    MLR     fill='000'O
         2 003157   000000 000010 xsym               ADSC9   MASTER_DATA              cn=0,n=8
         2 003160   000000 000010 xsym               ADSC9   CATALOG_DATA             cn=0,n=8

     1878     7834
     1879     7835    3              DUP.HDR_CODE = %H$BUILD_MC ;

   7835  2 003161   001312 235007                    LDA     714,DL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:235  
         2 003162   000021 755000 xsym               STA     DUP+17

     1880     7836    3              DUP.MSG_CODE = %T$B_MASTER ;

   7836  2 003163   000026 236007                    LDQ     22,DL
         2 003164   000020 756000 xsym               STQ     DUP+16

     1881     7837    3              CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;

   7837  2 003165   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003166   000000 701000 xent               TSX1    TOU$DU_PRINTER_WRITE
         2 003167   003211 702000 2                  TSX2    ERROR

     1882     7838
     1883     7839    3              DUP.MSG_CODE = %T$B_MC_INFORM ;

   7839  2 003170   000034 235007                    LDA     28,DL
         2 003171   000020 755000 xsym               STA     DUP+16

     1884     7840    3              IF DUP.BATCH_MODE

   7840  2 003172   000000 234000 xsym               SZN     DUP
         2 003173   003177 604000 2                  TMI     s:7843

     1885     7841    3              THEN ;
     1886     7842    3              ELSE CALL TOU$DU_USER_WRITE;

   7842  2 003174   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003175   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 003176   000000 011000                    NOP     0

     1887     7843    3              CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;

   7843  2 003177   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003200   000000 701000 xent               TSX1    TOU$DU_PRINTER_WRITE
         2 003201   003211 702000 2                  TSX2    ERROR

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:236  
     1888     7844    3              RETURN;

   7844  2 003202   200010 221300                    LDX1  ! VOLUME#+1,,AUTO
         2 003203   000001 702211                    TSX2  ! 1,X1

     1889     7845    3           END /* THEN */ ;
     1890     7846    3      ELSE DO ;

     1891     7847    3              DUP.MSG_CODE = %E$BSMC_NO_ENTRIES ;

   7847  2 003204   000601 235007                    LDA     385,DL
         2 003205   000020 755000 xsym               STA     DUP+16

     1892     7848    3              CALL TOU$DU_USER_WRITE ;

   7848  2 003206   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003207   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 003210   000000 011000                    NOP     0

     1893     7849    3   ERROR:
     1894     7850    3              ALTRETURN ;

   7850  2 003211   200010 221300       ERROR        LDX1  ! VOLUME#+1,,AUTO
         2 003212   000000 702211                    TSX2  ! 0,X1

     1895     7851    3           END /* ELSE */ ;
     1896     7852
     1897     7853    2   END B_SAVE_MASTER_CATALOG;
     1898     7854        %EJECT;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:237  
     1899     7855        /*I*  NAME:        B_SAVE_LAST_DECK#
     1900     7856              AUTHOR:      Scott S. Sheppard
     1901     7857              PURPOSE:     Saves the Last Deck Number
     1902     7858              INTERFACE:   TOU$DFU_DF_WR_LAST_DECK#
     1903     7859              INPUT:       LAST.DECK# - set to the next available deck number
     1904     7860              OUTPUT:      LAST.DECK# - set to the actual last value used
     1905     7861              DESCRIPTION: The last deck number is incremented each time a
     1906     7862                           deck is saved. During processing, the last deck
     1907     7863                           number represents the next deck number since it
     1908     7864                           is  constantly  being  assigned from  and  THEN
     1909     7865                           incremented.   When the last deck is saved, the
     1910     7866                           last deck number is actually  one  greater than
     1911     7867                           the largest deck value stored in the deckfile.
     1912     7868        */
     1913     7869
     1914     7870    1   B_SAVE_LAST_DECK#: PROC ALTRET ;

   7870  2 003213   200010 741300       B_SAVE_LAST* STX1  ! VOLUME#+1,,AUTO

     1915     7871
     1916     7872        /* Code */
     1917     7873
     1918     7874    2      LAST.DECK# = LAST.DECK# - 1 ;

   7874  2 003214   000000 220000 xsym               LDX0    LAST
         2 003215   777777 622010                    EAX2    -1,X0
         2 003216   000000 742000 xsym               STX2    LAST

     1919     7875    2      CALL TOU$DFU_DF_WR_LAST_DECK# ALTRET (ERROR) ;

   7875  2 003217   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003220   000000 701000 xent               TSX1    TOU$DFU_DF_WR_LAST_DECK#
         2 003221   003224 702000 2                  TSX2    ERROR

     1920     7876    2      RETURN ;

   7876  2 003222   200010 221300                    LDX1  ! VOLUME#+1,,AUTO
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:238  
         2 003223   000001 702211                    TSX2  ! 1,X1

     1921     7877
     1922     7878    2   ERROR:
     1923     7879    2      ALTRETURN ;

   7879  2 003224   200010 221300       ERROR        LDX1  ! VOLUME#+1,,AUTO
         2 003225   000000 702211                    TSX2  ! 0,X1

     1924     7880
     1925     7881    2   END B_SAVE_LAST_DECK# ;
     1926     7882        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:239  
     1927     7883        /*I*  NAME:        B_SAVE_LOG
     1928     7884              AUTHOR:      Scott S. Sheppard
     1929     7885              PURPOSE:     Saves the deckfile history log
     1930     7886              INTERFACE:   TOU$DU_UPDATE_LOG
     1931     7887                           TOU$DFU_DF_WR_LOG
     1932     7888              INPUT:       REVISION_B.VERSION
     1933     7889                           CATALOG_SEARCH_KEY.DATA
     1934     7890                           DUP.IFAD.FID
     1935     7891                           DUP.DF.FID
     1936     7892                           TEMP_INPUT_EXISTS
     1937     7893              OUTPUT:      DUP.LOG.CATALOG
     1938     7894                           DUP.LOG.DECK
     1939     7895                           LOG_B.COUNT
     1940     7896              DESCRIPTION: This  procedure stores the  deckfile  history
     1941     7897                           log.   Build is always the first entry saved.
     1942     7898                           When the  DIPPER  NIO catalog was copied into
     1943     7899                           the deckfile after being built,a second entry
     1944     7900                           is saved.
     1945     7901        */
     1946     7902        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:240  
     1947     7903    1   B_SAVE_LOG: PROC ALTRET ;

   7903  2 003226   200010 741300       B_SAVE_LOG   STX1  ! VOLUME#+1,,AUTO

     1948     7904
     1949     7905        /* Code */
     1950     7906
     1951     7907    2      LOG_B.COUNT = 0 ;

   7907  2 003227   000137 470400 xsym               LDP0    DUP+95
         2 003230   000100 101400                    MRL     fill='000'O
         2 003231   000002 000004 xsym               ADSC9   B_VECTNIL+2              cn=0,n=4
         2 003232   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

     1952     7908
     1953     7909    2      DUP.LOG.TYPE = %T$SF_BUILD ;

   7909  2 003233   000110 235007                    LDA     72,DL
         2 003234   000122 755000 xsym               STA     DUP+82

     1954     7910    2      DUP.LOG.CATALOG = REVISION_B.VERSION ;

   7910  2 003235   040000 100400                    MLR     fill='040'O
         2 003236   000000 000006 xsym               ADSC9   REVISION_B               cn=0,n=6
         2 003237   000123 000025 xsym               ADSC9   DUP+83                   cn=0,n=21

     1955     7911    2      DUP.LOG.DECK = ' ' ;

   7911  2 003240   040000 100400                    MLR     fill='040'O
         2 003241   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003242   000130 200027 xsym               ADSC9   DUP+88                   cn=1,n=23

     1956     7912    2      DUP.HOLD_AREA = DUP.IFAD.FID ;

   7912  2 003243   040000 100400                    MLR     fill='040'O
         2 003244   000063 200050 xsym               ADSC9   DUP+51                   cn=1,n=40
         2 003245   000142 000050 xsym               ADSC9   DUP+98                   cn=0,n=40
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:241  

     1957     7913    2      CALL TOU$DU_UPDATE_LOG ALTRET (ERROR) ;

   7913  2 003246   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003247   000000 701000 xent               TSX1    TOU$DU_UPDATE_LOG
         2 003250   003276 702000 2                  TSX2    ERROR

     1958     7914
     1959     7915    2      IF TEMP_INPUT_EXISTS

   7915  2 003251   200003 234100                    SZN     TEMP_INPUT_EXISTS,,AUTO
         2 003252   003271 605000 2                  TPL     s:7925

     1960     7916    3      THEN DO ;

     1961     7917    3              DUP.LOG.TYPE = %T$SF_COPY ;

   7917  2 003253   000125 235007                    LDA     85,DL
         2 003254   000122 755000 xsym               STA     DUP+82

     1962     7918    3              DUP.LOG.CATALOG = CATALOG_SEARCH_KEY.DATA ;

   7918  2 003255   040000 100400                    MLR     fill='040'O
         2 003256   000000 000025 xsym               ADSC9   CATALOG_SEARCH_KEY       cn=0,n=21
         2 003257   000123 000025 xsym               ADSC9   DUP+83                   cn=0,n=21

     1963     7919    3              DUP.LOG.DECK = ' ' ;

   7919  2 003260   040000 100400                    MLR     fill='040'O
         2 003261   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003262   000130 200027 xsym               ADSC9   DUP+88                   cn=1,n=23

     1964     7920    3              DUP.HOLD_AREA = DUP.DF.FID ;

   7920  2 003263   040000 100400                    MLR     fill='040'O
         2 003264   000107 000050 xsym               ADSC9   DUP+71                   cn=0,n=40
         2 003265   000142 000050 xsym               ADSC9   DUP+98                   cn=0,n=40
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:242  

     1965     7921    3              CALL TOU$DU_UPDATE_LOG ALTRET (ERROR) ;

   7921  2 003266   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003267   000000 701000 xent               TSX1    TOU$DU_UPDATE_LOG
         2 003270   003276 702000 2                  TSX2    ERROR

     1966     7922    3           END /* THEN */ ;

     1967     7923    2      ELSE /* no DIPPER catalog copied from a previous build */ ;
     1968     7924
     1969     7925    2      CALL TOU$DFU_DF_WR_LOG ALTRET (ERROR) ;

   7925  2 003271   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003272   000000 701000 xent               TSX1    TOU$DFU_DF_WR_LOG
         2 003273   003276 702000 2                  TSX2    ERROR

     1970     7926    2      RETURN ;

   7926  2 003274   200010 221300                    LDX1  ! VOLUME#+1,,AUTO
         2 003275   000001 702211                    TSX2  ! 1,X1

     1971     7927
     1972     7928    2   ERROR:
     1973     7929    2      ALTRETURN ;

   7929  2 003276   200010 221300       ERROR        LDX1  ! VOLUME#+1,,AUTO
         2 003277   000000 702211                    TSX2  ! 0,X1

     1974     7930
     1975     7931    2   END B_SAVE_LOG ;
     1976     7932        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:243  
     1977     7933        /*I* NAME:         B_SAVE_REVISION
     1978     7934             AUTHOR:       Scott S. Sheppard
     1979     7935             PURPOSE:      Saves the revision of the IFAD tape
     1980     7936             INTERFACE:    TOU$DFU_DF_WR_REVISION
     1981     7937                           TOU$DFU_DF_CHECK_FOR_KEY
     1982     7938             PARAMETERS:   None passed.
     1983     7939             DATA:         OBJECT_KEY.DATA - output
     1984     7940                           REVISION_B.MAINTENANCE.CONTRACT - output
     1985     7941             DESCRIPTION:  This  procedure saves the  version of the IFAD
     1986     7942                           tape  used to build  the deckfile. The version
     1987     7943                           was  obtained  when  the  GIFM object deck was
     1988     7944                           encountered.   It  is  found  as  a  patch  to
     1989     7945                           location 2 of the GIFM module.
     1990     7946
     1991     7947                           This procedure also determines if the customer
     1992     7948                           has a maintenance contract by checking for the
     1993     7949                           existence   of  the  POLTS  Subexecutive.  The
     1994     7950                           current  means of  excluding customers (who do
     1995     7951                           not have a  maintenance contract) from running
     1996     7952                           T&D's is to omit the POLTS Subexecutive, CPLT,
     1997     7953                           from  their  IFAD  tapes.   The  IFAD revision
     1998     7954                           record has a mask field initialized to 'CP-6'.
     1999     7955                           For customers with no contract, it will remain
     2000     7956                           that way.  This way if the  revision record is
     2001     7957                           dumped,  things  look  normal.   For customers
     2002     7958                           with a maintenance  agreement, one of the bits
     2003     7959                           of the  '-' character will be  set from off to
     2004     7960                           on.
     2005     7961
     2006     7962                           For the  LADC site   machines, the maintenance
     2007     7963                           contract  is assumed so  developers  can build
     2008     7964                           small test deckfiles and still use TOLTS.
     2009     7965        */
     2010     7966        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:244  
     2011     7967    1   B_SAVE_REVISION: PROC ALTRET ;

   7967  2 003300   200010 741300       B_SAVE_REVI* STX1  ! VOLUME#+1,,AUTO

     2012     7968
     2013     7969    2      DCL 1 B_VERSION SYMREF,
     2014     7970    2            2 LGTH    UBIN BYTE CALIGNED,
     2015     7971    2            2 TEXT    CHAR (11) CALIGNED ;
     2016     7972
     2017     7973        /* Code */
     2018     7974
     2019     7975    2      IF DUP.SITE_ID = %LADC_SITE

   7975  2 003301   040000 106400                    CMPC    fill='040'O
         2 003302   000216 000006 xsym               ADSC9   DUP+142                  cn=0,n=6
         2 003303   000105 000006 1                  ADSC9   MASTER_KEY+69            cn=0,n=6
         2 003304   003310 601000 2                  TNZ     s:7978

     2020     7976    2      THEN REVISION_B.MAINTENANCE.CONTRACT = %TRUE ;

   7976  2 003305   020000 236003                    LDQ     8192,DU
         2 003306   000002 256000 xsym               ORSQ    REVISION_B+2
         2 003307   003323 710000 2                  TRA     s:7988

     2021     7977    3      ELSE DO ;

     2022     7978    3              OBJECT_KEY.DATA = 'PLT.POLTCM' ;

   7978  2 003310   040000 100400                    MLR     fill='040'O
         2 003311   000107 000012 1                  ADSC9   MASTER_KEY+71            cn=0,n=10
         2 003312   000000 200027 xsym               ADSC9   OBJECT_KEY               cn=1,n=23

     2023     7979    3              CALL TOU$DFU_DF_CHECK_FOR_KEY WHENRETURN

   7979  2 003313   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003314   000000 701000 xent               TSX1    TOU$DFU_DF_CHECK_FOR_KEY
         2 003315   003321 702000 2                  TSX2    s:7985
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:245  

     2024     7980    4                   DO ;

     2025     7981    4                      REVISION_B.MAINTENANCE.CONTRACT = %TRUE ;

   7981  2 003316   020000 236003                    LDQ     8192,DU
         2 003317   000002 256000 xsym               ORSQ    REVISION_B+2

     2026     7982    4                   END /* WHENRETURN */ ;

   7982  2 003320   003323 710000 2                  TRA     s:7988

     2027     7983    3              WHENALTRETURN
     2028     7984    4                   DO ;

     2029     7985    4                      REVISION_B.MAINTENANCE.CONTRACT = %FALSE ;

   7985  2 003321   000045 236000 3                  LDQ     37
         2 003322   000002 356000 xsym               ANSQ    REVISION_B+2

     2030     7986    4                   END /* WHENALTRETURN */ ;

     2031     7987    3           END /* ELSE */ ;

     2032     7988    2      REVISION_B.DEER = SUBSTR (B_VERSION.TEXT, 0, B_VERSION.LGTH) ;

   7988  2 003323   000000 236000 xsym               LDQ     B_VERSION
         2 003324   000033 772000                    QRL     27
         2 003325   000000 620006                    EAX0    0,QL
         2 003326   040000 100440                    MLR     fill='040'O
         2 003327   000000 200010 xsym               ADSC9   B_VERSION                cn=1,n=*X0
         2 003330   000002 400013 xsym               ADSC9   REVISION_B+2             cn=2,n=11

     2033     7989    2      CALL TOU$DFU_DF_WR_REVISION ALTRET (ERROR) ;

   7989  2 003331   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003332   000000 701000 xent               TSX1    TOU$DFU_DF_WR_REVISION
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:246  
         2 003333   003336 702000 2                  TSX2    ERROR

     2034     7990    2      RETURN ;

   7990  2 003334   200010 221300                    LDX1  ! VOLUME#+1,,AUTO
         2 003335   000001 702211                    TSX2  ! 1,X1

     2035     7991
     2036     7992    2   ERROR:
     2037     7993    2      ALTRETURN ;

   7993  2 003336   200010 221300       ERROR        LDX1  ! VOLUME#+1,,AUTO
         2 003337   000000 702211                    TSX2  ! 0,X1

     2038     7994
     2039     7995    2   END B_SAVE_REVISION ;
     2040     7996        %EJECT ;
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:247  
     2041     7997        /*I*  NAME:        B_ERR_MSG
     2042     7998              AUTHOR:      Scott S. Sheppard
     2043     7999              PURPOSE:     Build Error Message Reporter
     2044     8000              INTERFACE:   TOU$DU_USER_WRITE
     2045     8001              INPUT:       ERR_CODE - error message code
     2046     8002              OUTPUT:      DUP.MSG_CODE - set to appropriate message code
     2047     8003              DESCRIPTION: This procedure sets the error occurred flag to
     2048     8004                           true and reports the error.
     2049     8005        */
     2050     8006
     2051     8007    1   B_ERR_MSG: PROC (ERR_CODE) ;

   8007  2 003340   200016 741300       B_ERR_MSG    STX1  ! HDR$+1,,AUTO

     2052     8008
     2053     8009    2      DCL ERR_CODE                   UBIN WORD ALIGNED ;
     2054     8010
     2055     8011        /* Code */
     2056     8012
     2057     8013    2      DUP.MSG_CODE = ERR_CODE ;

   8013  2 003341   200017 470500                    LDP0    @ERR_CODE,,AUTO
         2 003342   000000 235100                    LDA     0,,PR0
         2 003343   000020 755000 xsym               STA     DUP+16

     2058     8014    2      CALL TOU$DU_USER_WRITE ;

   8014  2 003344   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 003345   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 003346   000000 011000                    NOP     0

     2059     8015    2      RETURN ;

   8015  2 003347   200016 221300                    LDX1  ! HDR$+1,,AUTO
         2 003350   000001 702211                    TSX2  ! 1,X1

DKEND
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:248  
 Sect OctLoc
   0     000   040040 040040   040040 040040   040040 040040   040040 040040
   0     024*  000000 000000                                                    ....

COPIED_CATALOG
 Sect OctLoc
   0     025   000000 000000   104105 105122                                    ....DEER

COPIED_SUB
 Sect OctLoc
   0     027   040040 040040   040040 040040   040040 040040   040040 040040
   0     043*  040040 040040

BCD#
 Sect OctLoc
   0     044   000000 000000                                                    ....

BIN#
 Sect OctLoc
   0     045   000000 000000                                                    ....

CATALOG_KEY_SET
 Sect OctLoc
   0     046   0***** ******                                                    ....

CUR#
 Sect OctLoc
   0     050   000000 000000                                                    ....

DECK_SAVED
 Sect OctLoc
   0     051   0***** ******                                                    ....

REVISION
 Sect OctLoc
   0     052   056040 040***                                                    .  .

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:249  
MASTER_KEY
 Sect OctLoc
   1     000   016115 101123   124105 122137   103101 124101   114117 107***    .MASTER_CATALOG.

(unnamed)
 Sect OctLoc
   1     004   044060 060060   104105 105122   103101 124101   056116 111117    $000DEERCATA.NIO
   1     010   056115 103101   102111 116101   122131 040040   176106 115040    .MCABINARY  ~FM
   1     014   040040 040040   040040 040040   102125 111114   104040 040040            BUILD
   1     020   110115 120103   112061 040040   110124 116104   103101 124101    HMPCJ1  HTNDCATA
   1     024   056115 104122   056124 101120   105040 040040   103101 124101    .MDR.TAPE   CATA
   1     030   056115 104122   056120 122111   116124 040040   103101 124101    .MDR.PRINT  CATA
   1     034   056115 104122   056103 101122   104040 040040   103101 124101    .MDR.CARD   CATA
   1     040   056115 104122   056104 111123   113040 040040   103101 124101    .MDR.DISK   CATA
   1     044   056111 124122   056040 040040   103101 124101   056120 103124    .ITR.   CATA.PCT
   1     050   103101 124101   056103 114124   103101 124101   056115 114124    CATA.CLTCATA.MLT
   1     054   103101 124101   056120 114124   103101 124101   056123 114124    CATA.PLTCATA.SLT
   1     060   103101 124101   056125 124114   110116 111117   101060 040040    CATA.UTLHNIOA0
   1     064   120103 124040   103114 124040   115114 124040   120114 124040    PCT CLT MLT PLT
   1     070   123114 124040   125124 114040   107111 106115   060060 060060    SLT UTL GIFM0000
   1     074   060062 040040   116117 123120   105103 040040   111124 122056    02  NOSPEC  ITR.
   1     100   115104 122056   106111 114105   103117 120131   104111 120120    MDR.FILECOPYDIPP
   1     104   105122 040040   114130 070060   060061 040040   120114 124056    ER  LX8001  PLT.
   1     110   120117 114124   103115 040040                                    POLTCM

(unnamed)
 Sect OctLoc
   3     000   777377 777777   777777 377777   000011 006000   000013 006000    ................
   3     004   000063 206000   000016 006000   000000 000574   000006 006000    .3..............
   3     010   000000 000575   000010 006000   000000 000576   000012 006000    ................
   3     014   000040 040040   000000 000577   000015 006000   000000 006000    .   ............
   3     020   000000 006000   000000 000024   000021 006000   000024 006000    ................
   3     024   000002 006000   777777 777000   000000 000602   000026 006000    ................
   3     030   000000 006000   000000 000027   000031 006000   000027 006000    ................
   3     034   000012 006000   000005 006000   000000 000600   000036 006000    ................
   3     040   000101 006000   000041 006000   000027 006000   000102 006000    .A...!.......B..
   3     044   000003 777774   757777 777777                                    ........
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:250  
     2060     8016
     2061     8017    2   END B_ERR_MSG ;
     2062     8018    1   END TOU$BUILD ;

PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:251  
--  Include file information  --

   XU_MACRO_C.:E05TOU  is referenced.
   TO_PERR_C.:E05TOU  is referenced.
   TOU_RQSTS_E.:E05TOU  is referenced.
   TOU_DEER_M.:E05TOU  is referenced.
      No diagnostics issued in procedure TOU$BUILD.
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:252  

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    75-  8018    604   139     2      0  y y y    0   1 TOU$BUILD
                                  2     30    y y    0     TOU$B_SHOW_DCBS
                                  2     35    y y    0     TOU$B_GET_CATALOG
                                  2     42    y y    0     TOU$B_SET_CATALOG_KEY
                                  2     47    y y    0     TOU$B_SET_OBJECT_KEY
                                  2     54    y y    0     TOU$B_CHECK_CORRECT_FILE
                                  2     61    y y    0     TOU$B_PRINT_DECK_LINE
                                  2     66    y y    0     TOU$B_CHECK_FOR_CATALOG
  1  6187-  6199      8     0     2     74  y   y    0     2 B_INIT_DUP
  2  6225-  6346     26     9     2    112  y y y    0     2 B_COMMAND_SETUP
  3  6360-  6371      6     0     2    226  y   y    0     2 B_SHOW_DCBS
  4  6386-  6400     10     0     2    243  y   y    0     2 B_CLEAR_DF
  5  6432-  6460     21     0     2    267  y y y    0     2 B_COPY_NIO_CATALOG
  6  6479-  6501     14     1     2    326  y y y    0     2 B_CHECK_FOR_CATALOG
  7  6536-  6577     28     0     2    405  y y y    0     2 B_STORE_NIO_CATALOG
  8  6595-  6615     12     0     2    545  y y y    0     2 B_BUILD_DECKFILE
  9  6640-  6674     22     1     2    575  y y y    0     2 B_BUILD_FROM_VOLUMES
 10  6698-  6726     22     0     2    662  y y y    0     2 B_PROCESS_IFAD
 11  6745-  6759     10     0     2    756  y   y    0     2 B_GET_CATALOG
 12  6779-  6911     74     0     2   1000  y y y    0     2 B_SET_CATALOG_KEY
 13  6827-  6859     28     0     2   1111  y y y    0      3 B_SET_FIRMWARE_CATALOG
 14  6881-  6910     23     0     2   1273  y y y    0      3 B_SET_GECALL_CATALOG
 15  6927-  7351    105     0     2   1415  y y y    0     2 B_SET_OBJECT_KEY
 16  6959-  7075     47     0     2   1456  y   y    0      3 B_SET_GECALL_KEY
 17  7013-  7044     22     2     2   1617  y   y    0       4 B_SQUISH_GIFM_DECK
 18  7055-  7074      8     8     2   1741  y   y    2       4 B_COMPUTE_VERSION
 19  7091-  7269     41     0     2   2005  y   y    0      3 B_SET_MPC_KEY
 20  7122-  7135      3     0     2   2042  y   y    0       4 B_SET_ITR_KEY
 21  7151-  7170      4     3     2   2064  y   y    0       4 B_SET_FIRMWARE_KEY
 22  7190-  7207     12     0     2   2112  y   y    0       4 B_SQUISH_FIRMWARE_DECK
 23  7226-  7240      7     0     2   2166  y   y    0       4 B_FIX_CATALOG_KEY
 24  7255-  7268      3     0     2   2203  y   y    0       4 B_SET_MDR_KEY
 25  7298-  7350      4     3     2   2225  y   y    0      3 B_SET_DIPPER_KEY
 26  7365-  7387     14     0     2   2257  y y y    0     2 B_CHECK_CORRECT_FILE
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:253  
 27  7423-  7477     34     3     2   2340  y y y    1     2 B_SAVE_OBJECT_DECK
 28  7510-  7542     23     1     2   2513  y y y    0     2 B_PRINT_DECK_LINE
 29  7557-  7569      6     0     2   2603  y y y    0     2 B_SAVE_CATALOG_ENTRY
 30  7587-  7604      8     4     2   2627  y y y    2     2 B_SAVE_SUBCATALOG
 31  7625-  7656     19     2     2   2656  y y y    1     2 B_SAVE_CATALOG
 32  7671-  7683      6     0     2   2727  y y y    0     2 B_SAVE_MASTER_ENTRY
 33  7711-  7801     40     1     2   2753  y y y    0     2 B_SAVE_NIO_CATALOG
 34  7772-  7800     18     0     2   3050  y y y    0      3 B_FETCH_OBJECT_DECK
 35  7824-  7853     18     0     2   3145  y y y    0     2 B_SAVE_MASTER_CATALOG
 36  7870-  7881      5     0     2   3213  y y y    0     2 B_SAVE_LAST_DECK#
 37  7903-  7931     18     0     2   3226  y y y    0     2 B_SAVE_LOG
 38  7967-  7995     17     3     2   3300  y y y    0     2 B_SAVE_REVISION
 39  8007-  8017      4     2     2   3340  y   y    1     2 B_ERR_MSG
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:254  

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              75   2      0 Proc    0                              6042   2      2 Call    0
            6043   2      4 Call    0                              6044   2      6 Call    0
            6046   2     10 Call    0                              6047   2     12 Call    0
            6050   2     14 Assign  0                              6051   2     16 Call    0
            6052   2     21 Return  0                              6055   2     22 Assign  0 ERROR_RETURN
            6056   2     24 Call    0                              6057   2     27 Return  0
            6074   2     30 Entry   0                              6076   2     32 Call    0
            6077   2     34 Return  0                              6088   2     35 Entry   0
            6090   2     37 Call    0                              6091   2     41 Return  0
            6102   2     42 Entry   0                              6104   2     44 Call    0
            6105   2     46 Return  0                              6116   2     47 Entry   0
            6118   2     51 Call    0                              6119   2     53 Return  0
            6130   2     54 Entry   0                              6132   2     56 Call    0
            6133   2     60 Return  0                              6144   2     61 Entry   0
            6146   2     63 Call    0                              6147   2     65 Return  0
            6158   2     66 Entry   0                              6160   2     70 Call    0
            6161   2     72 Return  0                              6173   2     73 Altret  0 TOU$B_ALTRETURN
            6187   2     74 Proc    1                              6191   2     75 Assign  1
            6192   2     77 Assign  1                              6193   2    101 Assign  1
            6194   2    103 Assign  1                              6195   2    105 Assign  1
            6196   2    107 Assign  1                              6197   2    111 Return  1
            6225   2    112 Proc    2                              6315   2    113 DoIndx  2
         $  6316   2    115 Assign  2                         $$$  6317   2    121 DoCase  2
            6318   2    133 Case    2                              6319   2    133 Assign  2
         $  6320   2    135 Assign  2                              6321   2    143 Assign  2
            6322   2    146 Call    2                              6323   2    152 Case    2
            6324   2    152 Assign  2                              6325   2    155 Case    2
            6326   2    155 Assign  2                              6327   2    160 Case    2
            6328   2    160 Assign  2                           $  6329   2    162 Assign  2
            6330   2    170 Assign  2                              6331   2    173 Call    2
            6332   2    176 EndCse  2                          $$  6333   2    176 EndInd  2
            6335   2    207 If      2                              6337   2    212 Call    2
            6338   2    215 If      2                              6340   2    217 Call    2
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:255  
            6341   2    222 Return  2                              6344   2    224 Altret  2 ERROR
            6360   2    226 Proc    3                              6364   2    227 Assign  3
            6365   2    231 Call    3                              6367   2    234 Assign  3
            6368   2    236 Call    3                              6369   2    241 Return  3
            6386   2    243 Proc    4                              6390   2    244 Assign  4
            6391   2    246 Assign  4                              6392   2    251 Assign  4
            6393   2    252 Assign  4                              6394   2    254 Assign  4
            6395   2    256 Assign  4                           $  6396   2    261 Assign  4
            6397   2    264 Assign  4                              6398   2    266 Return  4
            6432   2    267 Proc    5                              6436   2    270 Assign  5
            6437   2    272 Assign  5                              6438   2    274 Call    5
            6439   2    277 Do      5                              6440   2    277 Assign  5
            6441   2    302 Call    5                              6442   2    304 Do      5
            6443   2    304 Assign  5                              6444   2    306 Call    5
            6445   2    310 EndDo   5                              6446   2    310 Assign  5
            6447   2    311 Call    5                              6448   2    314 EndDo   5
            6450   2    315 Do      5                              6451   2    315 Assign  5
            6452   2    316 EndDo   5                              6453   2    316 Return  5
            6456   2    320 Assign  5 ERROR                        6457   2    321 Call    5
            6458   2    324 Altret  5                              6479   2    326 Proc    6
            6485   2    327 Assign  6                              6486   2    330 Call    6
            6487   2    333 Assign  6                           $  6488   2    336 Assign  6
            6489   2    341 DoUntl  6                              6490   2    341 Call    6
            6491   2    344 If      6                              6492   2    350 Assign  6
       $$$  6493   2    353 Assign  6                          $$  6494   2    364 EndUnt  6
            6497   2    377 If      6 ERROR                        6498   2    401 Return  6
            6499   2    403 Altret  6                              6536   2    405 Proc    7
            6540   2    406 Assign  7                              6541   2    407 Call    7
            6543   2    412 Call    7                              6544   2    415 Assign  7
            6546   2    420 Assign  7                              6547   2    423 Call    7
            6548   2    426 Assign  7                              6550   2    431 Assign  7
         $  6551   2    434 DoIndx  7                              6552   2    440 Call    7
            6553   2    443 Call    7                              6555   2    446 Call    7
            6556   2    451 Call    7                              6558   2    454 Assign  7
            6559   2    457 Call    7                              6560   2    462 Call    7
            6562   2    465 Assign  7                           $  6563   2    470 Assign  7
            6564   2    500 Call    7                              6565   2    503 Call    7
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:256  
    $$$$$$  6566   2    506 EndInd  7                              6568   2    530 Assign  7
            6569   2    531 Call    7                              6570   2    534 Return  7
            6573   2    536 Assign  7 ERROR                        6574   2    540 Call    7
            6575   2    543 Altret  7                              6595   2    545 Proc    8
            6599   2    546 Assign  8                              6600   2    547 Assign  8
            6601   2    551 Call    8                              6603   2    554 Call    8
            6604   2    556 Call    8                              6606   2    560 Assign  8
            6607   2    561 Call    8                              6608   2    564 Return  8
            6611   2    566 Assign  8 ERROR                        6612   2    570 Call    8
            6613   2    573 Altret  8                              6640   2    575 Proc    9
            6646   2    576 Call    9                              6647   2    601 Call    9
            6649   2    604 Assign  9                              6650   2    606 Call    9
            6652   2    611 Call    9                              6653   2    613 DoWhil  9
            6654   2    616 Call    9                              6655   2    621 Assign  9
            6656   2    624 Call    9                              6657   2    627 Call    9
            6658   2    631 EndWhi  9                              6659   2    634 If      9
            6660   2    636 Call    9                              6662   2    640 Call    9
            6663   2    642 Call    9                              6664   2    644 Call    9
            6665   2    646 Call    9                              6667   2    650 Call    9
            6668   2    653 Return  9                              6671   2    655 Call    9 ERROR
            6672   2    660 Altret  9                              6698   2    662 Proc   10
            6702   2    663 Call   10                              6703   2    666 DoWhil 10
            6704   2    671 Call   10                              6705   2    673 Call   10
            6706   2    675 DoWhil 10                              6707   2    677 Call   10
            6708   2    702 Call   10                              6709   2    705 Call   10
            6710   2    707 Call   10                              6711   2    711 Call   10
            6712   2    715 Call   10                              6713   2    717 Call   10
            6714   2    722 EndWhi 10                           $  6715   2    724 Call   10
            6716   2    732 Call   10                              6717   2    736 Call   10
            6718   2    740 Call   10                              6719   2    743 EndWhi 10
            6720   2    746 Return 10                              6723   2    750 Call   10 ERROR
            6724   2    754 Altret 10                              6745   2    756 Proc   11
            6749   2    757 Assign 11                              6750   2    761 Assign 11
            6751   2    762 Assign 11                              6752   2    764 Assign 11
            6753   2    766 Assign 11                           $  6754   2    771 Assign 11
            6755   2    774 Assign 11                              6756   2    776 Assign 11
            6757   2    777 Return 11                              6779   2   1000 Proc   12
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:257  
       $$$  6783   2   1001 Do Sel 12                              6784   2   1013 Select 12
      $$$$  6785   2   1013 Do Sel 12                              6786   2   1035 Select 12
            6787   2   1035 Call   12                              6788   2   1040 Select 12
            6789   2   1040 Call   12                              6790   2   1044 Altret 12
            6791   2   1046 EndSel 12                              6792   2   1046 Select 12
      $$$$  6793   2   1046 Do Sel 12                              6794   2   1070 Select 12
            6795   2   1070 Call   12                              6796   2   1073 Select 12
            6797   2   1073 Call   12                              6798   2   1077 Altret 12
            6799   2   1101 EndSel 12                              6800   2   1101 Select 12
            6801   2   1101 Call   12                              6803   2   1105 Altret 12 ERROR
            6804   2   1107 EndSel 12                              6805   2   1107 Return 12
            6827   2   1111 Proc   13                  $$$$$$$$$$  6831   2   1112 Do Sel 13
            6832   2   1161 Select 13                              6833   2   1161 Assign 13
            6834   2   1163 Assign 13                              6835   2   1165 Assign 13
   $$$$$$$  6836   2   1167 Do Sel 13                              6837   2   1221 Select 13
            6838   2   1221 Assign 13                              6839   2   1225 Select 13
            6840   2   1225 Assign 13                              6841   2   1231 Select 13
            6842   2   1231 Assign 13                              6843   2   1235 Select 13
            6844   2   1235 Assign 13                              6845   2   1240 EndSel 13
         $  6846   2   1240 Assign 13                              6847   2   1246 Select 13
            6848   2   1246 Assign 13                              6849   2   1247 Assign 13
            6850   2   1251 Assign 13                              6851   2   1253 Assign 13
         $  6852   2   1256 Assign 13                              6853   2   1264 Select 13
            6854   2   1264 Call   13                              6855   2   1270 Altret 13
            6856   2   1272 EndSel 13                              6857   2   1272 Return 13
            6881   2   1273 Proc   14                              6885   2   1274 Assign 14
            6886   2   1276 Assign 14                              6887   2   1300 Assign 14
$$$$$$$$$$  6889   2   1302 Do Sel 14                              6890   2   1351 Select 14
            6891   2   1351 Assign 14                              6892   2   1355 Select 14
            6893   2   1355 Assign 14                              6894   2   1361 Select 14
            6895   2   1361 Assign 14                              6896   2   1365 Select 14
            6897   2   1365 Assign 14                              6898   2   1371 Select 14
            6899   2   1371 Assign 14                              6900   2   1375 Select 14
            6901   2   1375 Assign 14                              6902   2   1401 Select 14
            6903   2   1401 Call   14                              6904   2   1405 Altret 14
            6905   2   1407 EndSel 14                              6907   2   1407 Assign 14
            6908   2   1414 Return 14                              6927   2   1415 Proc   15
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:258  
     $$$$$  6931   2   1416 Do Sel 15                              6932   2   1435 Select 15
            6933   2   1435 Call   15                              6934   2   1440 Select 15
            6935   2   1440 Call   15                              6936   2   1443 Select 15
            6937   2   1443 Call   15                              6938   2   1446 Select 15
            6939   2   1446 Call   15                              6940   2   1452 Altret 15
            6941   2   1454 EndSel 15                              6942   2   1454 Return 15
            6959   2   1456 Proc   16                  $$$$$$$$$$  6963   2   1457 Do Sel 16
            6964   2   1526 Select 16                          $$  6965   2   1526 IntCal 16
            6966   2   1537 Select 16                          $$  6967   2   1537 IntCal 16
            6968   2   1550 Select 16                          $$  6969   2   1550 IntCal 16
            6970   2   1561 Select 16                          $$  6971   2   1561 IntCal 16
            6972   2   1572 Select 16                          $$  6973   2   1572 IntCal 16
            6974   2   1603 Select 16                          $$  6975   2   1603 IntCal 16
            6976   2   1613 Call   16                              6977   2   1615 EndSel 16
            6978   2   1615 Return 16                              7013   2   1617 Proc   17
            7020   2   1620 If     17                              7021   2   1623 Do     17
            7022   2   1623 Assign 17                              7023   2   1626 Assign 17
            7024   2   1627 DoWhil 17                        $$$$  7025   2   1630 If     17
            7026   2   1637 Assign 17                              7028   2   1642 Assign 17
            7029   2   1645 EndWhi 17                              7030   2   1653 If     17
            7031   2   1657 Assign 17                           $  7032   2   1663 Call   17
       $$$  7033   2   1671 Assign 17                              7034   2   1677 Assign 17
       $$$  7035   2   1701 Assign 17                              7036   2   1707 Assign 17
       $$$  7037   2   1712 Call   17                         $$$  7038   2   1726 Assign 17
            7039   2   1734 Call   17                              7040   2   1737 EndDo  17
            7042   2   1737 Return 17                              7055   2   1741 Proc   18
            7066   2   1742 DoIndx 18                    $$$$$$$$  7067   2   1743 IntCal 18
    $$$$$$  7068   2   1751 IntCal 18                          $$  7069   2   1754 Assign 18
            7070   2   1764 EndInd 18                         $$$  7071   2   1771 Call   18
            7072   2   2003 Return 18                              7091   2   2005 Proc   19
       $$$  7095   2   2006 Do Sel 19                              7096   2   2024 Select 19
            7097   2   2024 Call   19                              7098   2   2027 Select 19
            7099   2   2027 Call   19                              7100   2   2031 Call   19
            7101   2   2033 Call   19                              7102   2   2036 Select 19
            7103   2   2036 Call   19                              7104   2   2040 EndSel 19
            7105   2   2040 Return 19                              7122   2   2042 Proc   20
     $$$$$  7126   2   2043 IntCal 20                              7133   2   2062 Return 20
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:259  
            7151   2   2064 Proc   21                              7160   2   2065 Assign 21
    $$$$$$  7161   2   2070 IntCal 21                              7168   2   2110 Return 21
            7190   2   2112 Proc   22                              7194   2   2113 If     22
            7195   2   2116 Do     22                         $$$  7196   2   2116 Assign 22
            7197   2   2124 Assign 22                         $$$  7198   2   2126 Assign 22
            7199   2   2134 Assign 22                         $$$  7200   2   2137 Call   22
       $$$  7201   2   2153 Assign 22                              7202   2   2161 Call   22
            7203   2   2164 EndDo  22                              7205   2   2164 Return 22
            7226   2   2166 Proc   23                              7230   2   2167 If     23
            7232   2   2171 Do     23                           $  7233   2   2171 IntCal 23
            7236   2   2177 Assign 23                              7237   2   2201 EndDo  23
            7238   2   2201 Return 23                              7255   2   2203 Proc   24
     $$$$$  7259   2   2204 IntCal 24                              7266   2   2223 Return 24
            7298   2   2225 Proc   25                              7340   2   2226 Assign 25
  $$$$$$$$  7341   2   2231 IntCal 25                              7348   2   2255 Return 25
            7365   2   2257 Proc   26                         $$$  7369   2   2260 Do Sel 26
            7370   2   2276 Select 26                        $$$$  7371   2   2276 If     26
            7373   2   2317 Do     26                              7374   2   2317 Call   26
            7375   2   2323 Altret 26                              7377   2   2325 Select 26
            7378   2   2325 If     26                              7380   2   2331 Do     26
            7381   2   2331 Call   26                              7382   2   2335 Altret 26
            7384   2   2337 EndSel 26                              7385   2   2337 Return 26
            7423   2   2340 Proc   27                              7430   2   2341 Assign 27
            7432   2   2343 Assign 27                              7433   2   2345 Assign 27
            7434   2   2347 Assign 27                         $$$  7435   2   2353 Call   27
            7437   2   2367 Call   27                              7438   2   2372 Do     27
            7440   2   2372 Call   27                              7442   2   2375 Assign 27
        $$  7443   2   2400 If     27                              7444   2   2405 Call   27
            7445   2   2411 Call   27                              7447   2   2414 Assign 27
            7448   2   2417 Call   27                              7450   2   2422 Assign 27
            7451   2   2425 Assign 27                           $  7452   2   2427 Assign 27
         $  7453   2   2435 Assign 27                              7454   2   2443 Call   27
            7455   2   2446 Assign 27                              7456   2   2451 EndDo  27
            7459   2   2452 Do     27                              7461   2   2452 Assign 27
            7462   2   2455 Call   27                              7464   2   2460 Assign 27
         $  7465   2   2462 Assign 27                           $  7466   2   2470 Assign 27
            7467   2   2476 Assign 27                              7468   2   2502 Call   27
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:260  
            7469   2   2505 EndDo  27                              7471   2   2505 Call   27
            7472   2   2507 Return 27                              7475   2   2511 Altret 27 ERROR
            7510   2   2513 Proc   28                              7516   2   2514 If     28
            7517   2   2517 Do     28                              7518   2   2517 If     28
            7519   2   2524 Assign 28                              7521   2   2526 Call   28
            7522   2   2531 Assign 28                              7523   2   2533 Assign 28
            7524   2   2535 Assign 28                              7525   2   2537 Call   28
            7526   2   2542 Assign 28                              7527   2   2544 DoIndx 28
            7528   2   2546 Call   28                           $  7529   2   2551 EndInd 28
            7530   2   2561 Assign 28                              7531   2   2563 Assign 28
            7532   2   2564 Call   28                              7533   2   2567 Assign 28
            7534   2   2571 EndDo  28                              7535   2   2572 Call   28
            7536   2   2575 Return 28                              7539   2   2577 Assign 28 ERROR
            7540   2   2601 Altret 28                              7557   2   2603 Proc   29
            7561   2   2604 Call   29                         $$$  7562   2   2607 Assign 29
            7563   2   2620 Assign 29                              7564   2   2623 Return 29
            7567   2   2625 Altret 29 ERROR                        7587   2   2627 Proc   30
            7594   2   2630 Assign 30                           $  7595   2   2633 Assign 30
         $  7596   2   2637 Assign 30                              7597   2   2643 Call   30
            7598   2   2647 Call   30                              7599   2   2652 Return 30
            7602   2   2654 Altret 30 ERROR                        7625   2   2656 Proc   31
            7631   2   2657 If     31                              7632   2   2661 Do     31
            7633   2   2661 Call   31                              7635   2   2664 Assign 31
            7636   2   2666 Call   31                          $$  7637   2   2671 If     31
            7638   2   2676 Assign 31                              7639   2   2701 Assign 31
            7640   2   2703 If     31                              7642   2   2705 Call   31
            7643   2   2710 Call   31                              7644   2   2713 Assign 31
            7646   2   2715 Assign 31                              7647   2   2716 Assign 31
            7648   2   2717 Return 31                              7650   2   2721 Do     31
            7651   2   2721 Call   31                              7653   2   2725 Altret 31 ERROR
            7671   2   2727 Proc   32                              7675   2   2730 Call   32
       $$$  7676   2   2733 Assign 32                              7677   2   2744 Assign 32
            7678   2   2747 Return 32                              7681   2   2751 Altret 32 ERROR
            7711   2   2753 Proc   33                              7717   2   2754 Call   33
            7718   2   2756 Assign 33                              7719   2   2760 Assign 33
            7720   2   2763 Assign 33                              7721   2   2765 Assign 33
            7723   2   2767 Assign 33                              7724   2   2771 Call   33
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:261  
            7726   2   2774 DoIndx 33                              7727   2   2777 Call   33
            7728   2   3001 Call   33                              7729   2   3005 Call   33
         $  7730   2   3007 EndInd 33                           $  7732   2   3016 Call   33
            7734   2   3024 Call   33                              7735   2   3030 Call   33
            7737   2   3032 Assign 33                              7738   2   3034 Call   33
            7739   2   3037 Return 33                              7742   2   3041 Assign 33 ERROR
            7743   2   3043 Call   33                              7744   2   3046 Altret 33
            7772   2   3050 Proc   34                              7776   2   3051 Assign 34
            7777   2   3054 Call   34                              7778   2   3057 Assign 34
            7780   2   3062 Call   34                              7781   2   3065 Assign 34
            7783   2   3070 Assign 34                              7784   2   3073 Assign 34
        $$  7785   2   3076 Assign 34                              7786   2   3104 Call   34
            7788   2   3107 Assign 34                           $  7789   2   3112 Assign 34
            7790   2   3122 Call   34                         $$$  7791   2   3125 Assign 34
            7793   2   3133 Assign 34                              7794   2   3136 Assign 34
            7795   2   3141 Return 34                              7798   2   3143 Altret 34 ERROR
            7824   2   3145 Proc   35                              7828   2   3146 If     35
            7829   2   3150 Do     35                              7830   2   3150 Call   35
            7832   2   3153 Assign 35                              7833   2   3156 Assign 35
            7835   2   3161 Assign 35                              7836   2   3163 Assign 35
            7837   2   3165 Call   35                              7839   2   3170 Assign 35
            7840   2   3172 If     35                              7842   2   3174 Call   35
            7843   2   3177 Call   35                              7844   2   3202 Return 35
            7846   2   3204 Do     35                              7847   2   3204 Assign 35
            7848   2   3206 Call   35                              7850   2   3211 Altret 35 ERROR
            7870   2   3213 Proc   36                              7874   2   3214 Assign 36
            7875   2   3217 Call   36                              7876   2   3222 Return 36
            7879   2   3224 Altret 36 ERROR                        7903   2   3226 Proc   37
        $$  7907   2   3227 Assign 37                              7909   2   3233 Assign 37
            7910   2   3235 Assign 37                              7911   2   3240 Assign 37
            7912   2   3243 Assign 37                              7913   2   3246 Call   37
            7915   2   3251 If     37                              7916   2   3253 Do     37
            7917   2   3253 Assign 37                              7918   2   3255 Assign 37
            7919   2   3260 Assign 37                              7920   2   3263 Assign 37
            7921   2   3266 Call   37                              7922   2   3271 EndDo  37
            7925   2   3271 Call   37                              7926   2   3274 Return 37
            7929   2   3276 Altret 37 ERROR                        7967   2   3300 Proc   38
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:262  
            7975   2   3301 If     38                              7976   2   3305 Assign 38
            7977   2   3310 Do     38                              7978   2   3310 Assign 38
            7979   2   3313 Call   38                              7980   2   3316 Do     38
            7981   2   3316 Assign 38                              7982   2   3320 EndDo  38
            7984   2   3321 Do     38                              7985   2   3321 Assign 38
            7986   2   3323 EndDo  38                              7987   2   3323 EndDo  38
         $  7988   2   3323 Assign 38                              7989   2   3331 Call   38
            7990   2   3334 Return 38                              7993   2   3336 Altret 38 ERROR
            8007   2   3340 Proc   39                              8013   2   3341 Assign 39
            8014   2   3344 Call   39                              8015   2   3347 Return 39


  **** Statement type totals  ****

   183 Assign   149 Call      22 If         4 Case      48 Return    28 Altret
    13 IntCal    10 Do Sel    10 EndSel    36 Select     1 DoUntl     5 DoIndx
     4 DoWhil     1 DoCase    19 Do         1 EndUnt     5 EndInd     4 EndWhi
     1 EndCse    13 EndDo     40 Proc       7 Entry     22 Labels

 # major stmts=  510 Code/major= 3.46 # stmts=  604 Code/stmt= 2.92  Point total=107.9
 Cost/major stmt=  2.9 Cost/stmt=  2.4 Total cost=   1482.7

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$
   6-8  $$
  8-10  $$$
 10-12
 12-14
 14-16
 16-18
 18-20
 20-22
 22-??
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:263  

 **** Variables and constants ****

  ****  Section 000  Data  TOU$BUILD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    44-0-0/w UBIN        r     1 BCD#                      45-0-0/w UBIN        r     1 BIN#
    46-0-0/c BIT         r     1 CATALOG_KEY_SET           47-0-0/c CHAR        r     1 CATALOG_TYPE
    50-0-0/w UBIN        r     1 CUR#                      51-0-0/c BIT         r     1 DECK_SAVED
     0-0-0/w CHAR(84)    r     1 DKEND_                    52-0-0/c CHAR(3)     r     1 REVISION_

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    25-0-0/w STRC(72)    r     1 COPIED_CATALOG
    25-0-0/b UBIN(18)    r         2 DECK#
    25-2-0/b UBIN(18)    r         2 ENTRY_COUNT

    27-0-0/c STRC(468)   r     1 COPIED_SUB
    27-0-0/c CHAR(40)    r         2 IFAD_FID
    41-0-0/c CHAR(12)    r         2 IFAD_FN

     0-0-0/w STRC(756)   r     1 DKEND
     0-0-0/c STRC(720)   r         2 BCD
    20-2-0/c CHAR(6)     r          3 REVISION
    23-0-0/c CHAR(4)     r          3 SEQ
    24-0-0/w UBIN        r         2 CHECKSUM

    52-0-0/c STRC(27)    r     1 REVISION
    52-1-0/c CHAR(2)     r         2 LEVEL


  ****  Section 001 RoData TOU$BUILD

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:264  

     0-0-0/c STRC(135)   r     1 MASTER_KEY
     0-1-0/c CHAR(14)    r         2 DATA


  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    13-0-0/w PTR         r     1 @DECK_TYPE                25-0-0/w PTR         r     1 @DIGIT_VERSION
    17-0-0/w PTR         r     1 @ERR_CODE                 13-0-0/w PTR         r     1 @IFAD_FID
    14-0-0/w PTR         r     1 @IFAD_FN                  26-0-0/w PTR         r     1 @LETTER_VERSION
    13-0-0/w PTR         r     1 @SAVE_TYPE
    27-0-0/b UBIN(6)     r     1 BCD_VERSION(0:5)
    *0-0-0/c CHAR(6)     r     1 DECK_TYPE
    *0-0-0/c CHAR        r     1 DIGIT_VERSION(0:11)
    *0-0-0/w UBIN        r     1 ERR_CODE                  31-0-0/w UBIN        r     1 FIRST
     7-0-0/c BIT         r     1 FOUND                     15-0-0/w PTR         r     1 HDR$
    17-0-0/w UBIN        r     1 HOLD_CODE                 30-0-0/w UBIN        r     1 I
    14-0-0/h UBIN(18)    r     1 I                         11-0-0/w UBIN        r     1 I
    *0-0-0/c CHAR(40)    r     1 IFAD_FID                  *0-0-0/c CHAR(12)    r     1 IFAD_FN
    *0-0-0/c CHAR(6)     r     1 LETTER_VERSION             5-0-0/w UBIN        r     1 OUTBLK#
     6-0-0/w PTR         r     1 OUTBLK$                   17-0-0/w UBIN        r     1 P
    *0-0-0/c CHAR(5)     r     1 SAVE_TYPE                 32-0-0/w UBIN        r     1 SECOND
     3-0-0/c BIT         r     1 TEMP_INPUT_EXISTS         20-0-0/c CHAR(12)    r     1 VERSION_BCD
     7-0-0/w UBIN        r     1 VOLUME#

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 FILE_EOF

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:265  

     0-0-0/c STRC(45)    r     1 BCD_KEY
     0-1-0/b UBIN(18)    r         2 DECK#

     0-0-0/c STRC(45)    r     1 BINARY_KEY
     0-1-0/b UBIN(18)    r         2 DECK#

     0-0-0/c STRC(108)   r     1 B_VERSION
     0-0-0/c UBIN(9)     r         2 LGTH
     0-1-0/c CHAR(11)    r         2 TEXT

     0-0-0/w STRC(72)    r     1 CATALOG_DATA
     0-0-0/b UBIN(18)    r         2 DECK#
     0-2-0/b UBIN(18)    r         2 ENTRY_COUNT
     1-0-0/c CHAR(4)     r         2 RFU

     0-0-0/c STRC(45)    r     1 CATALOG_ENTRY_KEY
     0-1-0/b UBIN(18)    r         2 DECK#
     0-3-0/b UBIN(18)    r         2 ENTRY#

     0-0-0/w STRC(216)   r     1 CATALOG_KEY
     0-1-0/c CHAR(21)    r         2 DATA
     5-2-0/b UBIN(18)    r         2 DECK#

     0-0-0/c STRC(189)   r     1 CATALOG_SEARCH_KEY
     0-0-0/c CHAR(21)    r         2 DATA

     0-0-0/d STRC(5220)  r     1 DUP
     0-0-0/c BIT         r         2 BATCH_MODE
    17-0-0/w PTR         r         2 CMD$
    20-0-0/w UBIN        r         2 MSG_CODE
    21-0-0/w UBIN        r         2 HDR_CODE
    26-0-0/c CHAR        r         2 LINE_VFC
    30-0-0/w UBIN        r         2 CURRENT_LINE#
    31-0-0/w UBIN        r         2 BOTTOM_LINE#
    56-0-0/c BIT         r         2 FORCE_NEW_PAGE
    57-0-0/w STRC(576)   r         2 IFAD
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:266  
    57-0-0/c BIT         r          3 ME_ALLOWED
    57-1-0/c BIT         r          3 ENTERED
    61-0-0/w UBIN        r          3 NUM_VOLUMES
    63-1-0/c CHAR(40)    r          3 FID
   100-0-0/d STRC(72)    r         2 BINARY_V
   101-0-0/b PTR         r          3 PTR$
   102-0-0/d STRC(72)    r         2 BCD_V
   103-0-0/b PTR         r          3 PTR$
   104-0-0/w STRC(504)   r         2 DF
   104-0-0/c BIT         r          3 ENTERED
   104-1-0/c BIT         r          3 NO_EXIST
   104-2-0/c BIT         r          3 REPORT_ERROR
   105-0-0/w UBIN        r          3 OPEN_TYPE
   106-0-0/w UBIN        r          3 CLOSE_TYPE
   107-0-0/c CHAR(40)    r          3 FID
   122-0-0/w STRC(432)   r         2 LOG
   122-0-0/w UBIN        r          3 TYPE
   123-0-0/c CHAR(21)    r          3 CATALOG
   130-1-0/c CHAR(23)    r          3 DECK
   136-0-0/d STRC(72)    r         2 LOG_V
   137-0-0/b PTR         r          3 PTR$
   140-0-0/w STRC(72)    r         2 TEMP
   140-0-0/w UBIN        r          3 OPEN_TYPE
   141-0-0/w UBIN        r          3 CLOSE_TYPE
   142-0-0/c CHAR(40)    r         2 HOLD_AREA
   154-0-0/w UBIN        r         2 HOLD_AREA_LGTH
   216-0-0/c CHAR(6)     r         2 SITE_ID

     0-0-0/c STRC(162)   r     1 ID
     0-0-0/c CHAR(6)     r         2 ID
     1-2-0/c CHAR(6)     r         2 REVISION
     1-2-0/c STRC(54)    r         2 REV
     2-2-0/c CHAR(2)     r          3 LEVEL
     3-0-0/c CHAR(6)     r         2 USAGE

     0-0-0/c STRC(54)    r     1 LAST
     0-0-0/c UBIN(18)    r         2 DECK#
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:267  
     0-2-0/c CHAR(4)     r         2 EDIT_NAME

     0-0-0/w STRC(72)    r     1 MASTER_DATA
     0-0-0/b UBIN(18)    r         2 DECK#
     0-2-0/b UBIN(18)    r         2 ENTRY_COUNT
     1-0-0/c CHAR(4)     r         2 RFU

     0-0-0/c STRC(45)    r     1 MASTER_ENTRY_KEY
     0-1-0/b UBIN(18)    r         2 DECK#
     0-3-0/b UBIN(18)    r         2 ENTRY#

     0-0-0/w STRC(864)   r     1 OBJECT
     0-0-0/w STRC(720)   r         2 BCD
     3-3-0/c CHAR(6)     r          3 LIBRARY
     5-1-0/c CHAR        r          3 LOAD_TYPE
     5-2-0/c CHAR        r          3 CLASS
    17-0-0/c CHAR(6)     r          3 GECALL
    22-0-0/c CHAR(4)     r          3 LBL
     0-0-0/c STRC(720)   r         2 NIO_BCD
     5-2-0/c CHAR        r          3 CLASS
    12-2-0/c CHAR(5)     r          3 EQUIP_TYPE
    13-3-0/c CHAR(8)     r          3 FILE_NAME
    17-0-0/c CHAR(4)     r          3 PRD_NUM_TAB
    20-0-0/c CHAR(3)     r          3 PRG_NUM_TAB
    24-0-0/b UBIN(18)    r         2 DECK#
    24-2-0/b UBIN(18)    r         2 BINARY_COUNT
    25-0-0/b UBIN(18)    r         2 TOTAL_COUNT
    25-2-0/b UBIN(18)    r         2 LOAD_SIZE
    27-0-0/w UBIN        r         2 CHECKSUM

     0-0-0/w STRC(216)   r     1 OBJECT_KEY
     0-1-0/c CHAR(23)    r         2 DATA

     0-0-0/w STRC(576)   r     1 OBJECT_REFLIST_DATA
     0-0-0/b UBIN        r         2 NUM_REFS
     1-0-0/b STRC        r         2 REFS(0:14)
     1-0-0/b UBIN(18)    r          3 ME#
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:268  
     1-2-0/b UBIN(18)    r          3 CE#

     0-0-0/c STRC(45)    r     1 OBJECT_REFLIST_KEY
     0-1-0/b UBIN(18)    r         2 DECK#

     0-0-0/c STRC(189)   r     1 REVISION_B
     0-0-0/c CHAR(6)     r         2 VERSION
     1-2-0/c STRC        r         2 MAINTENANCE
     2-0-4/b BIT         r          3 CONTRACT
     2-2-0/c CHAR(11)    r         2 DEER

     0-0-0/c STRC(468)   r     1 SUBCATALOG_DATA
     0-0-0/c CHAR(40)    r         2 IFAD_FID
    12-0-0/c CHAR(12)    r         2 IFAD_FN

     0-0-0/c STRC(45)    r     1 SUBCATALOG_KEY
     0-1-0/b UBIN(18)    r         2 DECK#


  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(84)    r     1 BCD_B(0:199)

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(936)   r     1 BINARY_B(0:1023)
     0-0-0/c CHAR(96)    r         2 OBJ
    31-0-0/c CHAR(4)     r         2 SEQ

     0-0-0/c STRC(1224)  r     1 DISKETTE_HEADER
    41-2-0/c CHAR(2)     r         2 X_OF_N_

     0-0-0/c STRC(18665) r     1 LOG_B
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:269  
     0-0-0/c UBIN(9)     r         2 COUNT

     0-0-0/d STRC)       r     1 MCA_B
    26-0-0/w STRC(1512)  r         2 DISKETTE_HEADER
    36-0-0/c CHAR(136)   r          3 DATA
  1315-0-0/w STRC(65896) r         2 FILE
 41325-0-0/w UBIN        r          3 SIZE

     0-0-0/w STRC(144)   r     1 OUT$BLK
     0-2-0/h UBIN(18)    r         2 CODE
     1-0-0/h UBIN(18)    r         2 NSUBLKS
     3-0-0/b PTR         r         2 SUBLK$(0:0)

     0-0-0/w ASTR(153)   r     1 OUT$SYM
     4-0-0/c UBIN(9)     r         2 COUNT
     4-1-0/c ACHR        r         2 TEXT



   Procedure TOU$BUILD requires 1769 words for executable code.
   Procedure TOU$BUILD requires 34 words of local(AUTO) storage.

    No errors detected in file TOU$BUILD.:E05TSI    .
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:270  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:271  
          MINI XREF LISTING

BCD#
      5958**DCL      6563<<ASSIGN   7024>>DOWHILE  7035>>ASSIGN   7038>>ASSIGN   7198>>ASSIGN   7201>>ASSIGN
      7434>>ASSIGN   7516>>IF       7518>>IF       7527>>DOINDEX  7789<<ASSIGN   7791>>ASSIGN
BCD_B
      5486**DCL      7025>>IF       7026>>ASSIGN   7035>>ASSIGN   7038<<ASSIGN   7198>>ASSIGN   7201<<ASSIGN
      7791>>ASSIGN
BCD_CARD
      5411**DCL      5420--REDEF
BCD_CARD.BCD
      5412**DCL      5418--REDEF
BCD_KEY.DECK#
      5460**DCL      6562<<ASSIGN   7447<<ASSIGN   7788<<ASSIGN
BCD_VERSION IN PROCEDURE B_COMPUTE_VERSION
      7059**DCL      7069<<ASSIGN   7071<>CALL
BIN#
      5959**DCL      7033>>ASSIGN   7034<<ASSIGN   7194>>IF       7196>>ASSIGN   7197<<ASSIGN   7433>>ASSIGN
      7434>>ASSIGN   7784<<ASSIGN
BINARY_B.OBJ
      5473**DCL      7033<<ASSIGN   7033>>ASSIGN   7196<<ASSIGN   7196>>ASSIGN
BINARY_B.SEQ
      5475**DCL      7036>>ASSIGN   7199>>ASSIGN
BINARY_CARD
      5431**DCL      5446--REDEF
BINARY_CARD.DATA
      5440**DCL      5441--REDEF
BINARY_CARD.LBL_SEQ
      5442**DCL      5443--REDEF
BINARY_CARD.WD1
      5432**DCL      5437--REDEF
BINARY_KEY.DECK#
      5500**DCL      6558<<ASSIGN   7442<<ASSIGN   7783<<ASSIGN
B_BUILD_DECKFILE
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:272  
      6595**PROC     6047--CALL
B_BUILD_FROM_VOLUMES
      6640**PROC     6604--CALL
B_CHECK_CORRECT_FILE
      7365**PROC     6132--CALL     6710--CALL
B_CHECK_FOR_CATALOG
      6479**PROC     6160--CALL     6441--CALL
B_CLEAR_DF
      6386**PROC     6603--CALL
B_COMMAND_SETUP
      6225**PROC     6043--CALL
B_COMPUTE_VERSION IN PROCEDURE B_SET_GECALL_KEY
      7055**PROC     7032--CALL
B_COPY_NIO_CATALOG
      6432**PROC     6046--CALL
B_ERR_MSG
      8007**PROC     6723--CALL     6789--CALL     6797--CALL     6801--CALL     6854--CALL     6903--CALL
      6939--CALL     7374--CALL     7381--CALL     7651--CALL
B_FETCH_OBJECT_DECK IN PROCEDURE B_SAVE_NIO_CATALOG
      7772**PROC     7727--CALL
B_FIX_CATALOG_KEY IN PROCEDURE B_SET_MPC_KEY
      7226**PROC     7101--CALL
B_GET_CATALOG
      6745**PROC     6090--CALL     6704--CALL     7717--CALL
B_INIT_DUP
      6187**PROC     6042--CALL
B_PRINT_DECK_LINE
      7510**PROC     6146--CALL     7471--CALL
B_PROCESS_IFAD
      6698**PROC     6652--CALL     6657--CALL
B_SAVE_CATALOG
      7625**PROC     6716--CALL     7734--CALL
B_SAVE_CATALOG_ENTRY
      7557**PROC     6712--CALL     7729--CALL
B_SAVE_LAST_DECK#
      7870**PROC     6663--CALL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:273  
B_SAVE_LOG
      7903**PROC     6665--CALL
B_SAVE_MASTER_CATALOG
      7824**PROC     6662--CALL
B_SAVE_MASTER_ENTRY
      7671**PROC     6717--CALL     7735--CALL
B_SAVE_NIO_CATALOG
      7711**PROC     6660--CALL
B_SAVE_OBJECT_DECK
      7423**PROC     6711--CALL     7728--CALL
B_SAVE_REVISION
      7967**PROC     6664--CALL
B_SAVE_SUBCATALOG
      7587**PROC     6715--CALL     7732--CALL
B_SET_CATALOG_KEY
      6779**PROC     6104--CALL     6705--CALL
B_SET_DIPPER_KEY IN PROCEDURE B_SET_OBJECT_KEY
      7298**PROC     6937--CALL
B_SET_FIRMWARE_CATALOG IN PROCEDURE B_SET_CATALOG_KEY
      6827**PROC     6787--CALL
B_SET_FIRMWARE_KEY IN PROCEDURE B_SET_MPC_KEY
      7151**PROC     7099--CALL
B_SET_GECALL_CATALOG IN PROCEDURE B_SET_CATALOG_KEY
      6881**PROC     6795--CALL
B_SET_GECALL_KEY IN PROCEDURE B_SET_OBJECT_KEY
      6959**PROC     6935--CALL
B_SET_ITR_KEY IN PROCEDURE B_SET_MPC_KEY
      7122**PROC     7097--CALL
B_SET_MDR_KEY IN PROCEDURE B_SET_MPC_KEY
      7255**PROC     7103--CALL
B_SET_MPC_KEY IN PROCEDURE B_SET_OBJECT_KEY
      7091**PROC     6933--CALL
B_SET_OBJECT_KEY
      6927**PROC     6118--CALL     6709--CALL
B_SHOW_DCBS
      6360**PROC     6044--CALL     6076--CALL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:274  
B_SQUISH_FIRMWARE_DECK IN PROCEDURE B_SET_MPC_KEY
      7190**PROC     7100--CALL
B_SQUISH_GIFM_DECK IN PROCEDURE B_SET_GECALL_KEY
      7013**PROC     6976--CALL
B_STORE_NIO_CATALOG
      6536**PROC     6444--CALL
B_VERSION.LGTH IN PROCEDURE B_SAVE_REVISION
      7970**DCL      7988>>ASSIGN
B_VERSION.TEXT IN PROCEDURE B_SAVE_REVISION
      7971**DCL      7988>>ASSIGN
CATALOG_DATA
      5536**DCL      6544>>ASSIGN   7833<<ASSIGN
CATALOG_DATA.DECK#
      5537**DCL      6750<<ASSIGN   7594>>ASSIGN   7778>>ASSIGN
CATALOG_DATA.ENTRY_COUNT
      5538**DCL      6751<<ASSIGN   7563<<ASSIGN   7563>>ASSIGN
CATALOG_DATA.RFU
      5539**DCL      6752<<ASSIGN
CATALOG_ENTRY_KEY.DECK#
      5566**DCL      6550<<ASSIGN   6753<<ASSIGN   7776<<ASSIGN   7778<<ASSIGN
CATALOG_ENTRY_KEY.ENTRY#
      5567**DCL      6551<<DOINDEX  6754<<ASSIGN   7453>>ASSIGN   7466>>ASSIGN   7562<<ASSIGN   7562>>ASSIGN
CATALOG_KEY.DATA
      5580**DCL      6491>>IF       6838<<ASSIGN   6840<<ASSIGN   6842<<ASSIGN   6844<<ASSIGN   6851<<ASSIGN
      6891<<ASSIGN   6893<<ASSIGN   6895<<ASSIGN   6897<<ASSIGN   6899<<ASSIGN   6901<<ASSIGN   7233<<CALLBLT
      7233>>CALLBLT  7719<<ASSIGN   7832<<ASSIGN
CATALOG_KEY.DECK#
      5581**DCL      6749<<ASSIGN
CATALOG_KEY_SET
      5960**DCL      6833<<ASSIGN   6848<<ASSIGN   6885<<ASSIGN   7230>>IF       7236<<ASSIGN   7631>>IF
      7646<<ASSIGN   7718<<ASSIGN
CATALOG_SEARCH_KEY.DATA
      5593**DCL      6440<<ASSIGN   6491>>IF       7719>>ASSIGN   7918>>ASSIGN
CATALOG_TYPE
      5962**DCL      6846<<ASSIGN   6852<<ASSIGN   6907<<ASSIGN   7369>>DOSELCT  7378>>IF
COPIED_CATALOG
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:275  
      5550**DCL      6544<<ASSIGN
COPIED_CATALOG.DECK#
      5551**DCL      6546>>ASSIGN   6550>>ASSIGN   7776>>ASSIGN
COPIED_CATALOG.ENTRY_COUNT
      5552**DCL      6551>>DOINDEX  7726>>DOINDEX
COPIED_SUB
      5937**DCL      6548<<ASSIGN
COPIED_SUB.IFAD_FID
      5938**DCL      7732<>CALL
COPIED_SUB.IFAD_FN
      5939**DCL      7732<>CALL
CUR#
      5963**DCL      7527<<DOINDEX
DECK_SAVED
      5964**DCL      7430<<ASSIGN   7647<<ASSIGN
DECK_TYPE IN PROCEDURE B_SAVE_OBJECT_DECK
      7425**DCL      7423--PROC     7443>>IF
DIGIT_VERSION IN PROCEDURE B_COMPUTE_VERSION
      7057**DCL      7055--PROC     7067>>CALLBLT  7068>>CALLBLT
DISKETTE_HEADER.IPI_NUM IN PROCEDURE B_SET_DIPPER_KEY
      7327**DCL      7330--REDEF
DISKETTE_HEADER.X_OF_N IN PROCEDURE B_SET_DIPPER_KEY
      7332**DCL      7335--REDEF
DISKETTE_HEADER.X_OF_N_ IN PROCEDURE B_SET_DIPPER_KEY
      7335**DCL      7341>>CALLBLT
DKEND
      5512**DCL      5525--REDEF
DKEND.BCD
      5513**DCL      5523--REDEF
DKEND.BCD.REVISION
      5520**DCL      7794>>ASSIGN
DKEND.BCD.SEQ
      5522**DCL      7036<<ASSIGN   7199<<ASSIGN
DKEND.CHECKSUM
      5524**DCL      7037<>CALL     7200<>CALL
DKEND_
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:276  
      5525**DCL      7035<<ASSIGN   7037--CALL     7038>>ASSIGN   7198<<ASSIGN   7200--CALL     7201>>ASSIGN
      7791<<ASSIGN
DUP.BATCH_MODE
      5270**DCL      7640>>IF       7840>>IF
DUP.BCD_V.PTR$
      5342**DCL      5486--IMP-PTR  7025>>IF       7026>>ASSIGN   7035>>ASSIGN   7038>>ASSIGN   7198>>ASSIGN
      7201>>ASSIGN   7791>>ASSIGN
DUP.BINARY_V.PTR$
      5337**DCL      5472--IMP-PTR  5660--IMP-PTR  7033>>ASSIGN   7033>>ASSIGN   7036>>ASSIGN   7196>>ASSIGN
      7196>>ASSIGN   7199>>ASSIGN   7340>>ASSIGN   7785>>ASSIGN
DUP.BOTTOM_LINE#
      5306**DCL      7518>>IF
DUP.CMD$
      5286**DCL      6315>>DOINDEX  6316>>ASSIGN
DUP.CURRENT_LINE#
      5304**DCL      7518>>IF
DUP.DF.CLOSE_TYPE
      5354**DCL      6446<<ASSIGN   6456<<ASSIGN   6606<<ASSIGN   6611<<ASSIGN
DUP.DF.ENTERED
      5346**DCL      6196<<ASSIGN   6328<<ASSIGN   6338>>IF
DUP.DF.FID
      5356**DCL      7920>>ASSIGN
DUP.DF.NO_EXIST
      5348**DCL      6324<<ASSIGN   6326<<ASSIGN
DUP.DF.OPEN_TYPE
      5352**DCL      6436<<ASSIGN   6599<<ASSIGN
DUP.DF.REPORT_ERROR
      5350**DCL      6437<<ASSIGN   6600<<ASSIGN
DUP.FORCE_NEW_PAGE
      5310**DCL      6193<<ASSIGN   7519<<ASSIGN   7644<<ASSIGN
DUP.HDR_CODE
      5291**DCL      6191<<ASSIGN   6834<<ASSIGN   6849<<ASSIGN   6886<<ASSIGN   7720<<ASSIGN   7835<<ASSIGN
DUP.HOLD_AREA
      5381**DCL      6320<<ASSIGN   6329<<ASSIGN   7912<<ASSIGN   7920<<ASSIGN
DUP.HOLD_AREA_LGTH
      5383**DCL      6321<<ASSIGN   6330<<ASSIGN
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:277  
DUP.IFAD.ENTERED
      5316**DCL      6195<<ASSIGN   6319<<ASSIGN   6335>>IF
DUP.IFAD.FID
      5330**DCL      6715<>CALL     7912>>ASSIGN
DUP.IFAD.ME_ALLOWED
      5314**DCL      6194<<ASSIGN
DUP.IFAD.NUM_VOLUMES
      5324**DCL      6653>>DOWHILE
DUP.LINE_VFC
      5300**DCL      6192<<ASSIGN   7523<<ASSIGN   7530<<ASSIGN   7539<<ASSIGN
DUP.LOG.CATALOG
      5364**DCL      7910<<ASSIGN   7918<<ASSIGN
DUP.LOG.DECK
      5366**DCL      7911<<ASSIGN   7919<<ASSIGN
DUP.LOG.TYPE
      5362**DCL      7909<<ASSIGN   7917<<ASSIGN
DUP.LOG_V
      5368**DCL      5373--REDEF
DUP.LOG_V.PTR$
      5371**DCL      5634--IMP-PTR  7907>>ASSIGN
DUP.MSG_CODE
      5289**DCL      6050<<ASSIGN   6055<<ASSIGN   6364<<ASSIGN   6367<<ASSIGN   6835<<ASSIGN   6850<<ASSIGN
      6887<<ASSIGN   7522>>ASSIGN   7524<<ASSIGN   7526<<ASSIGN   7531<<ASSIGN   7533<<ASSIGN   7635<<ASSIGN
      7638<<ASSIGN   7639<<ASSIGN   7721<<ASSIGN   7836<<ASSIGN   7839<<ASSIGN   7847<<ASSIGN   8013<<ASSIGN
DUP.SITE_ID
      5397**DCL      7975>>IF
DUP.TEMP.CLOSE_TYPE
      5378**DCL      6568<<ASSIGN   6573<<ASSIGN   7737<<ASSIGN   7742<<ASSIGN
DUP.TEMP.OPEN_TYPE
      5376**DCL      6540<<ASSIGN   7723<<ASSIGN
ERROR IN PROCEDURE B_BUILD_DECKFILE
      6611**LABEL    6601--CALLALT  6604--CALLALT  6607--CALLALT
ERROR IN PROCEDURE B_BUILD_FROM_VOLUMES
      6671**LABEL    6646--CALLALT  6647--CALLALT  6652--CALLALT  6654--CALLALT  6657--CALLALT  6660--CALLALT
      6662--CALLALT  6663--CALLALT  6664--CALLALT  6665--CALLALT  6667--CALLALT
ERROR IN PROCEDURE B_CHECK_FOR_CATALOG
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:278  
      6497**LABEL    6486--CALLALT  6490--CALLALT
ERROR IN PROCEDURE B_COMMAND_SETUP
      6344**LABEL    6322--CALLALT  6331--CALLALT  6337--CALLALT  6340--CALLALT
ERROR IN PROCEDURE B_COPY_NIO_CATALOG
      6456**LABEL    6444--CALLALT  6447--CALLALT
ERROR IN PROCEDURE B_FETCH_OBJECT_DECK
      7798**LABEL    7777--CALLALT  7780--CALLALT  7786--CALLALT  7790--CALLALT
ERROR IN PROCEDURE B_PRINT_DECK_LINE
      7539**LABEL    7521--CALLALT  7525--CALLALT  7528--CALLALT  7532--CALLALT  7535--CALLALT
ERROR IN PROCEDURE B_PROCESS_IFAD
      6723**LABEL    6702--CALLALT  6705--CALLALT  6707--CALLALT  6708--CALLALT  6709--CALLALT  6710--CALLALT
      6711--CALLALT  6712--CALLALT  6713--CALLALT  6715--CALLALT  6716--CALLALT  6717--CALLALT  6718--CALLALT
ERROR IN PROCEDURE B_SAVE_CATALOG
      7653**LABEL    7633--CALLALT  7636--CALLALT  7643--CALLALT
ERROR IN PROCEDURE B_SAVE_CATALOG_ENTRY
      7567**LABEL    7561--CALLALT
ERROR IN PROCEDURE B_SAVE_LAST_DECK#
      7879**LABEL    7875--CALLALT
ERROR IN PROCEDURE B_SAVE_LOG
      7929**LABEL    7913--CALLALT  7921--CALLALT  7925--CALLALT
ERROR IN PROCEDURE B_SAVE_MASTER_CATALOG
      7850**LABEL    7830--CALLALT  7837--CALLALT  7843--CALLALT
ERROR IN PROCEDURE B_SAVE_MASTER_ENTRY
      7681**LABEL    7675--CALLALT
ERROR IN PROCEDURE B_SAVE_NIO_CATALOG
      7742**LABEL    7724--CALLALT  7727--CALLALT  7728--CALLALT  7729--CALLALT  7732--CALLALT  7734--CALLALT
      7735--CALLALT  7738--CALLALT
ERROR IN PROCEDURE B_SAVE_OBJECT_DECK
      7475**LABEL    7440--CALLALT  7444--CALLALT  7445--CALLALT  7448--CALLALT  7454--CALLALT  7462--CALLALT
      7468--CALLALT  7471--CALLALT
ERROR IN PROCEDURE B_SAVE_REVISION
      7993**LABEL    7989--CALLALT
ERROR IN PROCEDURE B_SAVE_SUBCATALOG
      7602**LABEL    7598--CALLALT
ERROR IN PROCEDURE B_SET_CATALOG_KEY
      6803**LABEL    6787--CALLALT  6795--CALLALT
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:279  
ERROR IN PROCEDURE B_STORE_NIO_CATALOG
      6573**LABEL    6541--CALLALT  6543--CALLALT  6552--CALLALT  6553--CALLALT  6555--CALLALT  6556--CALLALT
      6559--CALLALT  6560--CALLALT  6564--CALLALT  6565--CALLALT  6569--CALLALT
ERROR_RETURN
      6055**LABEL    6043--CALLALT  6046--CALLALT  6047--CALLALT
ERR_CODE IN PROCEDURE B_ERR_MSG
      8009**DCL      8007--PROC     8013>>ASSIGN
FILE_EOF
      5965**DCL      6703>>DOWHILE  6706>>DOWHILE  6756<<ASSIGN
FIRST IN PROCEDURE B_COMPUTE_VERSION
      7061**DCL      7067<<CALLBLT  7069>>ASSIGN
FOUND IN PROCEDURE B_CHECK_FOR_CATALOG
      6481**DCL      6485<<ASSIGN   6489>>DOUNTIL  6492<<ASSIGN   6497>>IF
HDR$ IN PROCEDURE B_SET_DIPPER_KEY
      7300**DCL      7310--IMP-PTR  7340<<ASSIGN   7341>>CALLBLT
HOLD_CODE IN PROCEDURE B_PRINT_DECK_LINE
      7512**DCL      7522<<ASSIGN   7533>>ASSIGN
I IN PROCEDURE B_COMPUTE_VERSION
      7060**DCL      7066<<DOINDEX  7067>>CALLBLT  7068>>CALLBLT  7069>>ASSIGN   7071<>CALL
I IN PROCEDURE B_SAVE_NIO_CATALOG
      7713**DCL      7726<<DOINDEX
I IN PROCEDURE B_SAVE_OBJECT_DECK
      7426**DCL      7464<<ASSIGN   7465>>ASSIGN   7466>>ASSIGN   7467>>ASSIGN
ID.ID
      5605**DCL      7126>>CALLBLT  7161>>CALLBLT  7233>>CALLBLT  7259>>CALLBLT  7793<<ASSIGN
ID.REV.LEVEL
      5609**DCL      7126>>CALLBLT  7160>>ASSIGN   7259>>CALLBLT
ID.REVISION
      5606**DCL      5607--REDEF    7794<<ASSIGN
ID.USAGE
      5610**DCL      7161>>CALLBLT
IFAD_FID IN PROCEDURE B_SAVE_SUBCATALOG
      7589**DCL      7587--PROC     7595>>ASSIGN
IFAD_FN IN PROCEDURE B_SAVE_SUBCATALOG
      7590**DCL      7587--PROC     7596>>ASSIGN
LAST.DECK#
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:280  
      5622**DCL      6390<<ASSIGN   6392>>ASSIGN   6395>>ASSIGN   6397<<ASSIGN   6397>>ASSIGN   6749>>ASSIGN
      6750>>ASSIGN   6753>>ASSIGN   6755<<ASSIGN   6755>>ASSIGN   7432>>ASSIGN   7455<<ASSIGN   7455>>ASSIGN
      7874<<ASSIGN   7874>>ASSIGN
LAST.EDIT_NAME
      5623**DCL      6391<<ASSIGN   7781<<ASSIGN
LETTER_VERSION IN PROCEDURE B_COMPUTE_VERSION
      7058**DCL      7055--PROC     7071<>CALL
LOG_B.COUNT
      5635**DCL      7907<<ASSIGN
MASTER_DATA
      5730**DCL      7833>>ASSIGN
MASTER_DATA.DECK#
      5731**DCL      6392<<ASSIGN   6487>>ASSIGN
MASTER_DATA.ENTRY_COUNT
      5732**DCL      6393<<ASSIGN   6489>>DOUNTIL  7677<<ASSIGN   7677>>ASSIGN   7828>>IF
MASTER_DATA.RFU
      5733**DCL      6394<<ASSIGN
MASTER_ENTRY_KEY.DECK#
      5746**DCL      6395<<ASSIGN   6487<<ASSIGN
MASTER_ENTRY_KEY.ENTRY#
      5747**DCL      6396<<ASSIGN   6488<<ASSIGN   6489>>DOUNTIL  6493<<ASSIGN   6493>>ASSIGN   7452>>ASSIGN
      7465>>ASSIGN   7676<<ASSIGN   7676>>ASSIGN
MASTER_KEY.DATA
      5760**DCL      7832>>ASSIGN
MCA_B.CONFIG.DATA
      5715**DCL      5716--REDEF
MCA_B.DISKETTE_HEADER.DATA
      5693**DCL      7340--ASSIGN
MCA_B.FILE.SIZE
      5707**DCL      7785<<ASSIGN
OBJECT
      5771**DCL      7435--CALL
OBJECT.BCD
      5772**DCL      5794--REDEF    5817--REDEF
OBJECT.BCD.CLASS
      5777**DCL      6831>>DOSELCT  6836>>DOSELCT  6846>>ASSIGN   6852>>ASSIGN   6889>>DOSELCT  6907>>ASSIGN
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:281  
      6963>>DOSELCT  7095>>DOSELCT  7371>>IF       7371>>IF       7378>>IF
OBJECT.BCD.GECALL
      5790**DCL      6965>>CALLBLT  6967>>CALLBLT  6969>>CALLBLT  6971>>CALLBLT  6973>>CALLBLT  6975>>CALLBLT
OBJECT.BCD.LBL
      5792**DCL      7020>>IF       7126>>CALLBLT  7161>>CALLBLT  7259>>CALLBLT  7781>>ASSIGN
OBJECT.BCD.LIBRARY
      5775**DCL      6783>>DOSELCT  6931>>DOSELCT
OBJECT.BCD.LOAD_TYPE
      5776**DCL      6785>>DOSELCT  6793>>DOSELCT
OBJECT.BINARY_COUNT
      5819**DCL      6563>>ASSIGN   7433<<ASSIGN   7784>>ASSIGN   7789>>ASSIGN
OBJECT.CHECKSUM
      5823**DCL      7435<>CALL
OBJECT.DECK#
      5818**DCL      6558>>ASSIGN   6562>>ASSIGN   7432<<ASSIGN   7442>>ASSIGN   7447>>ASSIGN   7450>>ASSIGN
      7461>>ASSIGN   7783>>ASSIGN   7788>>ASSIGN
OBJECT.LOAD_SIZE
      5821**DCL      7785>>ASSIGN
OBJECT.NIO_BCD.CLASS
      5799**DCL      7341>>CALLBLT
OBJECT.NIO_BCD.EQUIP_TYPE
      5803**DCL      7341>>CALLBLT
OBJECT.NIO_BCD.FILE_NAME
      5804**DCL      7341>>CALLBLT
OBJECT.NIO_BCD.PRD_NUM_TAB
      5812**DCL      7341>>CALLBLT
OBJECT.NIO_BCD.PRG_NUM_TAB
      5813**DCL      7341>>CALLBLT
OBJECT.NIO_BCD.X_OF_N
      5805**DCL      5810--REDEF
OBJECT.TOTAL_COUNT
      5820**DCL      6563>>ASSIGN   7434<<ASSIGN   7789>>ASSIGN
OBJECT_KEY.DATA
      5836**DCL      6965<<CALLBLT  6967<<CALLBLT  6969<<CALLBLT  6971<<CALLBLT  6973<<CALLBLT  6975<<CALLBLT
      7126<<CALLBLT  7161<<CALLBLT  7259<<CALLBLT  7341<<CALLBLT  7978<<ASSIGN
OBJECT_REFLIST_DATA.NUM_REFS
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:282  
      5862**DCL      7451<<ASSIGN   7464>>ASSIGN   7467<<ASSIGN
OBJECT_REFLIST_DATA.REFS.CE#
      5865**DCL      7453<<ASSIGN   7466<<ASSIGN
OBJECT_REFLIST_DATA.REFS.ME#
      5864**DCL      7452<<ASSIGN   7465<<ASSIGN
OBJECT_REFLIST_KEY.DECK#
      5849**DCL      7450<<ASSIGN   7461<<ASSIGN
OUT$BLK.CODE IN PROCEDURE B_COMMAND_SETUP
      6243**DCL      6317>>DOCASE
OUT$BLK.NSUBLKS IN PROCEDURE B_COMMAND_SETUP
      6247**DCL      6315>>DOINDEX
OUT$BLK.SUBLK$ IN PROCEDURE B_COMMAND_SETUP
      6268**DCL      6316>>ASSIGN
OUT$SYM.COUNT IN PROCEDURE B_COMMAND_SETUP
      6304**DCL      6307--IMP-SIZ  6320>>ASSIGN   6321>>ASSIGN   6329>>ASSIGN   6330>>ASSIGN
OUT$SYM.TEXT IN PROCEDURE B_COMMAND_SETUP
      6307**DCL      6320>>ASSIGN   6329>>ASSIGN
OUTBLK# IN PROCEDURE B_COMMAND_SETUP
      6227**DCL      6315<<DOINDEX  6316>>ASSIGN
OUTBLK$ IN PROCEDURE B_COMMAND_SETUP
      6228**DCL      6316<<ASSIGN   6317>>DOCASE   6320>>ASSIGN   6320>>ASSIGN   6321>>ASSIGN   6329>>ASSIGN
      6329>>ASSIGN   6330>>ASSIGN
P IN PROCEDURE B_SQUISH_GIFM_DECK
      7015**DCL      7023<<ASSIGN   7024>>DOWHILE  7025>>IF       7026>>ASSIGN   7028<<ASSIGN   7028>>ASSIGN
RECORD.BCD
      5879**DCL      5883--REDEF    5892--REDEF
RECORD.BINARY.DATA.BINARY
      5885**DCL      5886--REDEF
REVISION IN PROCEDURE B_SET_FIRMWARE_KEY
      7153**DCL      7156--REDEF
REVISION.LEVEL IN PROCEDURE B_SET_FIRMWARE_KEY
      7155**DCL      7160<<ASSIGN
REVISION_ IN PROCEDURE B_SET_FIRMWARE_KEY
      7156**DCL      7161>>CALLBLT
REVISION_B.DEER
      5912**DCL      7988<<ASSIGN
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:283  
REVISION_B.MAINTENANCE.CONTRACT
      5910**DCL      7976<<ASSIGN   7981<<ASSIGN   7985<<ASSIGN
REVISION_B.MASK
      5906**DCL      5908--REDEF
REVISION_B.VERSION
      5904**DCL      7031<<ASSIGN   7032<>CALL     7910>>ASSIGN
SAVE_TYPE IN PROCEDURE B_SAVE_CATALOG
      7627**DCL      7625--PROC     7637>>IF
SECOND IN PROCEDURE B_COMPUTE_VERSION
      7062**DCL      7068<<CALLBLT  7069>>ASSIGN
SUBCATALOG_DATA
      5924**DCL      6548>>ASSIGN
SUBCATALOG_DATA.IFAD_FID
      5925**DCL      7595<<ASSIGN
SUBCATALOG_DATA.IFAD_FN
      5926**DCL      7596<<ASSIGN   7597<>CALL
SUBCATALOG_KEY.DECK#
      5952**DCL      6546<<ASSIGN   7594<<ASSIGN
TEMP_INPUT_EXISTS
      5961**DCL      6443<<ASSIGN   6451<<ASSIGN   6659>>IF       7915>>IF
TOT$BCD_ASCII
      5991**DCL-ENT  7071--CALL
TOU$B_ALTRETURN
      6173**LABEL    6104--CALLALT  6118--CALLALT  6132--CALLALT  6146--CALLALT  6160--CALLALT
TOU$CHECKSUM
      5969**DCL-ENT  7037--CALL     7200--CALL     7435--CALL
TOU$CLEAR_IFAD
      5971**DCL-ENT  6650--CALL     6656--CALL
TOU$DFU_CLOSE_TEMP
      5994**DCL-ENT  6569--CALL     6574--CALL     7738--CALL     7743--CALL
TOU$DFU_DF_CHECK_ALREADY_SAVED
      5998**DCL-ENT  7437--CALL
TOU$DFU_DF_CHECK_FOR_KEY
      5999**DCL-ENT  7979--CALL
TOU$DFU_DF_RD_BCD_CARDS
      6021**DCL-ENT  6564--CALL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:284  
TOU$DFU_DF_RD_CATALOG_CONTROL
      6016**DCL-ENT  6543--CALL
TOU$DFU_DF_RD_CATALOG_ENTRY
      6018**DCL-ENT  6552--CALL
TOU$DFU_DF_RD_FILE
      6020**DCL-ENT  6559--CALL
TOU$DFU_DF_RD_MASTER_CONTROL
      6014**DCL-ENT  6486--CALL
TOU$DFU_DF_RD_MASTER_ENTRY
      6015**DCL-ENT  6490--CALL
TOU$DFU_DF_RD_OBJECT
      6019**DCL-ENT  6555--CALL
TOU$DFU_DF_RD_OBJECT_REFLIST
      6022**DCL-ENT  7462--CALL
TOU$DFU_DF_RD_SUBCATALOG
      6017**DCL-ENT  6547--CALL
TOU$DFU_DF_WR_BCD_CARDS
      6008**DCL-ENT  7448--CALL
TOU$DFU_DF_WR_BINARY
      6006**DCL-ENT  7444--CALL
TOU$DFU_DF_WR_CATALOG_CONTROL
      6002**DCL-ENT  7633--CALL
TOU$DFU_DF_WR_CATALOG_ENTRY
      6004**DCL-ENT  7561--CALL
TOU$DFU_DF_WR_FILE
      6007**DCL-ENT  7445--CALL
TOU$DFU_DF_WR_LAST_DECK#
      6010**DCL-ENT  7875--CALL
TOU$DFU_DF_WR_LOG
      6011**DCL-ENT  7925--CALL
TOU$DFU_DF_WR_MASTER_CONTROL
      6000**DCL-ENT  7830--CALL
TOU$DFU_DF_WR_MASTER_ENTRY
      6001**DCL-ENT  7675--CALL
TOU$DFU_DF_WR_OBJECT
      6005**DCL-ENT  7440--CALL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:285  
TOU$DFU_DF_WR_OBJECT_REFLIST
      6009**DCL-ENT  7454--CALL     7468--CALL
TOU$DFU_DF_WR_REVISION
      6012**DCL-ENT  7989--CALL
TOU$DFU_DF_WR_SUBCATALOG
      6003**DCL-ENT  7598--CALL
TOU$DFU_OPEN_TEMP
      5993**DCL-ENT  6541--CALL     7724--CALL
TOU$DFU_TF_RD_BCD_CARDS
      6034**DCL-ENT  7790--CALL
TOU$DFU_TF_RD_CATALOG_ENTRY
      6031**DCL-ENT  7777--CALL
TOU$DFU_TF_RD_FILE
      6033**DCL-ENT  7786--CALL
TOU$DFU_TF_RD_OBJECT
      6032**DCL-ENT  7780--CALL
TOU$DFU_TF_WR_BCD_CARDS
      6029**DCL-ENT  6565--CALL
TOU$DFU_TF_WR_CATALOG_ENTRY
      6026**DCL-ENT  6553--CALL
TOU$DFU_TF_WR_FILE
      6028**DCL-ENT  6560--CALL
TOU$DFU_TF_WR_OBJECT
      6027**DCL-ENT  6556--CALL
TOU$DU_CLOSE_DF
      5983**DCL-ENT  6447--CALL     6457--CALL     6607--CALL     6612--CALL
TOU$DU_CLOSE_IFAD
      5980**DCL-ENT  6667--CALL     6671--CALL
TOU$DU_GET_SITE
      5989**DCL-ENT  6647--CALL
TOU$DU_NEXT_IFAD
      5979**DCL-ENT  6654--CALL
TOU$DU_OPEN_DF
      5982**DCL-ENT  6438--CALL     6601--CALL
TOU$DU_OPEN_IFAD
      5978**DCL-ENT  6646--CALL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:286  
TOU$DU_PRINTER_OVERWRITE
      5987**DCL-ENT  7528--CALL
TOU$DU_PRINTER_WRITE
      5986**DCL-ENT  7521--CALL     7525--CALL     7532--CALL     7535--CALL     7636--CALL     7643--CALL
      7837--CALL     7843--CALL
TOU$DU_SET_DF_FID
      5981**DCL-ENT  6331--CALL     6340--CALL
TOU$DU_SET_IFAD_FID
      5977**DCL-ENT  6322--CALL     6337--CALL
TOU$DU_UPDATE_LOG
      5988**DCL-ENT  7913--CALL     7921--CALL
TOU$DU_USER_WRITE
      5985**DCL-ENT  6051--CALL     6056--CALL     6365--CALL     6368--CALL     7642--CALL     7842--CALL
      7848--CALL     8014--CALL
TOU$GET_BCD_CARDS
      5974**DCL-ENT  6708--CALL
TOU$GET_BINARY_CARDS
      5973**DCL-ENT  6707--CALL
TOU$GET_CP6_OBJECT
      5972**DCL-ENT  6702--CALL     6713--CALL     6718--CALL
TOU$REFORM_DECK_CHECKSUM
      5970**DCL-ENT  7039--CALL     7202--CALL
TOU$REPLACE
      5975**DCL-ENT  7597--CALL
VERSION_BCD IN PROCEDURE B_SQUISH_GIFM_DECK
      7016**DCL      7022<<ASSIGN   7026<<ASSIGN   7030>>IF       7032<>CALL
VOLUME# IN PROCEDURE B_BUILD_FROM_VOLUMES
      6642**DCL      6649<<ASSIGN   6653>>DOWHILE  6655<<ASSIGN   6655>>ASSIGN
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:287  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:288  
              FULL UREF LISTING

BCD_CARD.BCD.CONTROL
      5413**DCL
BCD_CARD.BCD.DATA
      5415**DCL
BCD_CARD.BCD.LBL
      5416**DCL
BCD_CARD.BCD.SEQ
      5417**DCL
BCD_CARD.BCD.TYPE
      5414**DCL
BCD_CARD.BCD_
      5418**DCL
BCD_CARD.CHECKSUM
      5419**DCL
BCD_CARD_
      5420**DCL
BCD_KEY
      5458**DCL
BCD_KEY.CARD#
      5461**DCL
BCD_KEY.SIZE
      5459**DCL
BINARY_B
      5472**DCL
BINARY_B.LBL
      5474**DCL
BINARY_CARD.CHECKSUM
      5438**DCL
BINARY_CARD.DATA_CHAR
      5441**DCL
BINARY_CARD.LABEL_
      5443**DCL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:289  
BINARY_CARD.LABEL_.LBL
      5444**DCL
BINARY_CARD.LABEL_.SEQ
      5445**DCL
BINARY_CARD.RELOCATION
      5439**DCL
BINARY_CARD.WD1.ADDRESS
      5436**DCL
BINARY_CARD.WD1.SIZE
      5435**DCL
BINARY_CARD.WD1.TYPE
      5433**DCL
BINARY_CARD.WRD_CHAR
      5437**DCL
BINARY_CARD_
      5446**DCL
BINARY_CARD_.DATA
      5447**DCL
BINARY_KEY
      5498**DCL
BINARY_KEY.ENTRY#
      5501**DCL
BINARY_KEY.SIZE
      5499**DCL
B_VERSION IN PROCEDURE B_SAVE_REVISION
      7969**DCL
CATALOG_ENTRY_KEY
      5564**DCL
CATALOG_ENTRY_KEY.SIZE
      5565**DCL
CATALOG_KEY
      5578**DCL
CATALOG_KEY.SIZE
      5579**DCL
CATALOG_SEARCH_KEY
      5592**DCL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:290  
COPIED_CATALOG.RFU
      5553**DCL
DISKETTE_HEADER IN PROCEDURE B_SET_DIPPER_KEY
      7310**DCL
DISKETTE_HEADER.CONFIG_NAME IN PROCEDURE B_SET_DIPPER_KEY
      7322**DCL
DISKETTE_HEADER.CPR IN PROCEDURE B_SET_DIPPER_KEY
      7311**DCL
DISKETTE_HEADER.DATE_CHANGED IN PROCEDURE B_SET_DIPPER_KEY
      7315**DCL
DISKETTE_HEADER.DATE_CREATED IN PROCEDURE B_SET_DIPPER_KEY
      7314**DCL
DISKETTE_HEADER.DIR_ADR IN PROCEDURE B_SET_DIPPER_KEY
      7319**DCL
DISKETTE_HEADER.DIR_SIZE IN PROCEDURE B_SET_DIPPER_KEY
      7321**DCL
DISKETTE_HEADER.DISK_DWG_NUM IN PROCEDURE B_SET_DIPPER_KEY
      7331**DCL
DISKETTE_HEADER.DISK_TYPE IN PROCEDURE B_SET_DIPPER_KEY
      7324**DCL
DISKETTE_HEADER.EQUIP_TYPE IN PROCEDURE B_SET_DIPPER_KEY
      7326**DCL
DISKETTE_HEADER.IPI_NUM.IPI_NUM_VAL IN PROCEDURE B_SET_DIPPER_KEY
      7328**DCL
DISKETTE_HEADER.IPI_NUM.PRD_NUM_TAB IN PROCEDURE B_SET_DIPPER_KEY
      7329**DCL
DISKETTE_HEADER.IPI_NUM_ IN PROCEDURE B_SET_DIPPER_KEY
      7330**DCL
DISKETTE_HEADER.SPACE_ADR IN PROCEDURE B_SET_DIPPER_KEY
      7316**DCL
DISKETTE_HEADER.SPACE_SIZE IN PROCEDURE B_SET_DIPPER_KEY
      7318**DCL
DISKETTE_HEADER.TITLE IN PROCEDURE B_SET_DIPPER_KEY
      7312**DCL
DISKETTE_HEADER.UNIQUE_ID IN PROCEDURE B_SET_DIPPER_KEY
      7313**DCL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:291  
DISKETTE_HEADER.X_OF_N.N IN PROCEDURE B_SET_DIPPER_KEY
      7334**DCL
DISKETTE_HEADER.X_OF_N.X IN PROCEDURE B_SET_DIPPER_KEY
      7333**DCL
DKEND.BCD.CONTROL
      5514**DCL
DKEND.BCD.DATE
      5519**DCL
DKEND.BCD.LBL
      5521**DCL
DKEND.BCD.MOD_DATE
      5518**DCL
DKEND.BCD.TTL_DATE
      5517**DCL
DKEND.BCD.TYPE
      5515**DCL
DKEND.BCD_
      5523**DCL
DUP
      5268**DCL
DUP.BCD_V
      5339**DCL
DUP.BINARY_V
      5334**DCL
DUP.BREAK_DISABLED
      5388**DCL
DUP.BREAK_RETURN
      5390**DCL
DUP.BREAK_TERMINATE
      5386**DCL
DUP.CPU_TYPE
      5399**DCL
DUP.CURRENT_PAGE#
      5302**DCL
DUP.DF
      5345**DCL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:292  
DUP.DF.FID_LGTH
      5358**DCL
DUP.DS_V
      5279**DCL
DUP.ERROR_IMAGE
      5308**DCL
DUP.FAULT_ERROR
      5274**DCL
DUP.IFAD
      5313**DCL
DUP.IFAD.CONFIG_TAB
      5322**DCL
DUP.IFAD.DEVICE_INPUT
      5318**DCL
DUP.IFAD.DRIVE_NUMBER
      5328**DCL
DUP.IFAD.FID_LGTH
      5332**DCL
DUP.IFAD.IMU_NUMBER
      5326**DCL
DUP.IFAD.IMU_TAB
      5320**DCL
DUP.LOG
      5361**DCL
DUP.LOG_V_
      5373**DCL
DUP.MSG_V
      5295**DCL
DUP.MSG_V.PTR$
      5298**DCL
DUP.NUM_LINES
      5293**DCL
DUP.NUM_WORDS
      5277**DCL
DUP.PROCESS_COMPLETE
      5272**DCL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:293  
DUP.RESPONSE
      5282**DCL
DUP.RESPONSE_LGTH
      5284**DCL
DUP.SITE_NAME
      5392**DCL
DUP.SITE_NAME.LGTH
      5393**DCL
DUP.SITE_NAME.TEXT
      5395**DCL
DUP.TEMP
      5375**DCL
ID
      5604**DCL
ID.REV
      5607**DCL
LAST
      5621**DCL
LOG_B
      5634**DCL
LOG_B.ACCESSES
      5637**DCL
LOG_B.ACCESSES.CATALOG
      5644**DCL
LOG_B.ACCESSES.DATE
      5640**DCL
LOG_B.ACCESSES.DECK
      5646**DCL
LOG_B.ACCESSES.IFAD
      5648**DCL
LOG_B.ACCESSES.TIME
      5642**DCL
LOG_B.ACCESSES.TYPE
      5638**DCL
MASTER_ENTRY_KEY
      5744**DCL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:294  
MASTER_ENTRY_KEY.SIZE
      5745**DCL
MASTER_KEY
      5758**DCL
MASTER_KEY.SIZE
      5759**DCL
MCA_B
      5660**DCL
MCA_B.COMMAND
      5670**DCL
MCA_B.COMMAND.DATA
      5672**DCL
MCA_B.COMMAND.HDR_BLK
      5671**DCL
MCA_B.CONFIG
      5713**DCL
MCA_B.CONFIG.DATA1
      5716**DCL
MCA_B.CONFIG.DATA1.NUMTAB
      5718**DCL
MCA_B.CONFIG.HDR_BLK
      5714**DCL
MCA_B.DCW_LIST
      5661**DCL
MCA_B.DCW_LIST.DCW1
      5663**DCL
MCA_B.DCW_LIST.DCW1.ADDRESS
      5664**DCL
MCA_B.DCW_LIST.DCW1.COUNT
      5665**DCL
MCA_B.DCW_LIST.DCW2
      5667**DCL
MCA_B.DCW_LIST.DCW2.ADDRESS
      5668**DCL
MCA_B.DCW_LIST.DCW2.COUNT
      5669**DCL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:295  
MCA_B.DCW_LIST.IDCW1
      5662**DCL
MCA_B.DCW_LIST.IDCW2
      5666**DCL
MCA_B.DIRECTORY
      5694**DCL
MCA_B.DIRECTORY.CURRENT
      5699**DCL
MCA_B.DIRECTORY.DATA
      5696**DCL
MCA_B.DIRECTORY.HDR_BLK
      5695**DCL
MCA_B.DIRECTORY.SIZE
      5698**DCL
MCA_B.DISKETTE_HEADER
      5691**DCL
MCA_B.DISKETTE_HEADER.HDR_BLK
      5692**DCL
MCA_B.DUMMY_BUFFER
      5709**DCL
MCA_B.DUMMY_BUFFER.DATA_WORDS
      5711**DCL
MCA_B.DUMMY_BUFFER.HDR_BLK
      5710**DCL
MCA_B.FILE
      5700**DCL
MCA_B.FILE.BYTES_READ
      5708**DCL
MCA_B.FILE.DATA
      5702**DCL
MCA_B.FILE.DATA.HDR
      5703**DCL
MCA_B.FILE.DATA.LD_CTL
      5704**DCL
MCA_B.FILE.DATA.SECTORS
      5705**DCL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:296  
MCA_B.FILE.HDR_BLK
      5701**DCL
MCA_B.STATUS
      5673**DCL
MCA_B.STATUS.ADAPTER
      5685**DCL
MCA_B.STATUS.IIOC
      5690**DCL
MCA_B.STATUS.INITIATE
      5683**DCL
MCA_B.STATUS.MAJOR
      5676**DCL
MCA_B.STATUS.MARKER
      5681**DCL
MCA_B.STATUS.ODD_WORD
      5680**DCL
MCA_B.STATUS.POWER
      5675**DCL
MCA_B.STATUS.RESIDUE
      5689**DCL
MCA_B.STATUS.SUB
      5677**DCL
MCA_B.STATUS.SUB.RDP
      5678**DCL
MCA_B.STATUS.SUB.VALUE
      5679**DCL
MCA_B.STATUS.TERMINATE
      5674**DCL
MCA_B.STATUS.TERM_POS
      5688**DCL
MCA_B.STATUS.WAS_R_W
      5687**DCL
OBJECT.BCD.ASSEMBLER
      5789**DCL
OBJECT.BCD.CONTROL
      5773**DCL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:297  
OBJECT.BCD.DATE
      5791**DCL
OBJECT.BCD.DONT_APPLY
      5778**DCL
OBJECT.BCD.DONT_APPLY.CP6
      5780**DCL
OBJECT.BCD.DONT_APPLY.DPS8000
      5783**DCL
OBJECT.BCD.DONT_APPLY.DPS90
      5782**DCL
OBJECT.BCD.FILENAME
      5787**DCL
OBJECT.BCD.MODEL
      5786**DCL
OBJECT.BCD.SEQ
      5793**DCL
OBJECT.BCD.TYPE
      5774**DCL
OBJECT.BCD_
      5817**DCL
OBJECT.DECK_CHECKSUM
      5822**DCL
OBJECT.NIO_BCD
      5794**DCL
OBJECT.NIO_BCD.ASSEMBLER
      5811**DCL
OBJECT.NIO_BCD.CONTROL
      5795**DCL
OBJECT.NIO_BCD.DATA
      5801**DCL
OBJECT.NIO_BCD.LBL
      5815**DCL
OBJECT.NIO_BCD.LIBRARY
      5797**DCL
OBJECT.NIO_BCD.LOAD_TYPE
      5798**DCL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:298  
OBJECT.NIO_BCD.SEQ
      5816**DCL
OBJECT.NIO_BCD.TYPE
      5796**DCL
OBJECT.NIO_BCD.X_OF_N.N
      5809**DCL
OBJECT.NIO_BCD.X_OF_N.X
      5807**DCL
OBJECT.NIO_BCD.X_OF_N_
      5810**DCL
OBJECT_KEY
      5834**DCL
OBJECT_KEY.SIZE
      5835**DCL
OBJECT_REFLIST_DATA
      5861**DCL
OBJECT_REFLIST_DATA.REFS
      5863**DCL
OBJECT_REFLIST_KEY
      5847**DCL
OBJECT_REFLIST_KEY.ENTRY#
      5850**DCL
OBJECT_REFLIST_KEY.SIZE
      5848**DCL
OUT$BLK IN PROCEDURE B_COMMAND_SETUP
      6235**DCL
OUT$BLK.CPOS IN PROCEDURE B_COMMAND_SETUP
      6261**DCL
OUT$BLK.NDTYPE IN PROCEDURE B_COMMAND_SETUP
      6238**DCL
OUT$BLK.SCRITCH IN PROCEDURE B_COMMAND_SETUP
      6251**DCL
OUT$BLK.TEMP IN PROCEDURE B_COMMAND_SETUP
      6236**DCL
OUT$SYM IN PROCEDURE B_COMMAND_SETUP
      6281**DCL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:299  
OUT$SYM.CODE IN PROCEDURE B_COMMAND_SETUP
      6287**DCL
OUT$SYM.CPOS IN PROCEDURE B_COMMAND_SETUP
      6296**DCL
OUT$SYM.NDTYPE IN PROCEDURE B_COMMAND_SETUP
      6284**DCL
OUT$SYM.NSUBLKS IN PROCEDURE B_COMMAND_SETUP
      6290**DCL
OUT$SYM.SCRITCH IN PROCEDURE B_COMMAND_SETUP
      6293**DCL
OUT$SYM.TEMP IN PROCEDURE B_COMMAND_SETUP
      6282**DCL
OUT$SYM.TEXTC$ IN PROCEDURE B_COMMAND_SETUP
      6299**DCL
RECORD
      5876**DCL
RECORD.BCD.DATA
      5880**DCL
RECORD.BINARY
      5883**DCL
RECORD.BINARY.DATA
      5884**DCL
RECORD.BINARY.DATA.CS
      5886**DCL
RECORD.BINARY.DATA.CS.CHECKSUM
      5888**DCL
RECORD.BINARY.DATA.CS.DATA
      5889**DCL
RECORD.BINARY.DATA.CS.WD1
      5887**DCL
RECORD.BINARY.DATA.LBL_SEQ
      5890**DCL
RECORD.DATA
      5892**DCL
RECORD.SIZE
      5877**DCL
PL6.E3A0      #001=TOU$BUILD File=TOU$BUILD.:E05TSI                              WED 07/30/97 06:39 Page:300  
REVISION.DOT IN PROCEDURE B_SET_FIRMWARE_KEY
      7154**DCL
REVISION_B
      5903**DCL
REVISION_B.MAINTENANCE
      5908**DCL
SUBCATALOG_KEY
      5950**DCL
SUBCATALOG_KEY.ENTRY#
      5953**DCL
SUBCATALOG_KEY.SIZE
      5951**DCL
TOU$BUILD
        75**PROC
TOU$B_CHECK_CORRECT_FILE
      6130**ENTRY
TOU$B_CHECK_FOR_CATALOG
      6158**ENTRY
TOU$B_GET_CATALOG
      6088**ENTRY
TOU$B_PRINT_DECK_LINE
      6144**ENTRY
TOU$B_SET_CATALOG_KEY
      6102**ENTRY
TOU$B_SET_OBJECT_KEY
      6116**ENTRY
TOU$B_SHOW_DCBS
      6074**ENTRY
