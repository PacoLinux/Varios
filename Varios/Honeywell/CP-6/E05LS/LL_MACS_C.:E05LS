

15:04 JUL 28 '97 LL_MACS_C.:E05SI                                          1    
    1      /*M* LL_MACS_C - Macro definitions for FEPLINK                      */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*F*     NAME:     LL$OU_ENTRY
    8            PURPOSE:     Internal structure for each object unit present in
    9                         the link.
   10        DESCRIPTION:     All object units have a head record.  This
   11                         is built in dynamic memory, one for each OU.  The
   12                         structures are bound together by a linked list.
   13                         The root pointer is LL_R_OU$.  Following this
   14                         pointer gets you to the first entry.  The next
   15                         entry(s) are found by following LL$OU_ENTRY.NEXT$
   16                         until LL$OU_ENTRY.NEXT$=ADDR(NIL).  Other pointers
   17                         are used to get at each different flavor of record.
   18                         The structure also contains an entry for the object
   19                         unit name.
   20      */
   21
   22      %MACRO   LL$OU_ENTRY    ( NAME = LL$OU_ENTRY,
   23                                STCLASS = BASED );
   24
   25          %LSET LISTDIR='0'B;
   26          %LSET LISTEXP='1'B;
   27          %LSET LISTCOM='0'B;
   28          %LSET LISTSUB='1'B;
   29          %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   30          %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR
   31              (SUBSTR(STR,0,3)='EXT');
   32              %LSET INIT=CHARTEXT('INIT');
   33             %LSET TYPE=CHARTEXT('CHAR(31)');
   34          %ELSE;
   35              %LSET INIT=CHARTEXT('/*');
   36              %LSET TYPE=CHARTEXT(CONCAT('CHAR(',TEXTCHAR(NAME),'.OUNAME.SIZE)'));
   37          %ENDIF;
15:04 JUL 28 '97 LL_MACS_C.:E05SI                                          2    
   38
   39          DCL 1 NAME STCLASS ALIGNED,
   40
   41                2 OF SBIN WORD ALIGNED %INIT(-1)%CHARTEXT('/**/'),
   42
   43                  /*K* OF - Index into object file table LL_OF$->LL$OF(x) */
   44
   45                2 NEXT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   46
   47                  /*K* NEXT$ - Pointer to next entry in linked list */
   48
   49                2 NSECTS UBIN WORD ALIGNED %INIT(0)%CHARTEXT('/**/'),
   50
   51                  /*K* NSECTS - Number of control sections present in this
   52                       object unit. */
   53
   54                2 SECT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   55
   56                  /*K* SECT$ - Pointer to control section entries */
   57
   58                2 SYMDEF$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   59
   60                  /*K* SYMDEF$ - Pointer to symdef entries */
   61
   62                2 SYMREF$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   63
   64                  /*K* SYMREF$ - Pointer to symref entries */
   65
   66                2 ENTDEF$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   67
   68                  /*K* ENTDEF$ - Pointer to entdef entries */
   69
   70                2 ENTREF$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   71
   72                  /*K* ENTREF$ - Pointer to entref entries */
   73
   74                2 SEGDEF$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
15:04 JUL 28 '97 LL_MACS_C.:E05SI                                          3    
   75
   76                  /*K* SEGDEF$ - Pointer to segdef entries (RFU) */
   77
   78                2 SEGREF$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   79
   80                  /*K* SEGREF$ - pointer to segref entries (RFU) */
   81
   82                2 RNAME$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   83
   84                  /*K* RNAME$ - pointer to ref names entries */
   85
   86                2 HEAD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   87               2 REGION UBIN BYTE,
   88
   89                  /*K* HEAD$ - pointer to object unit head record */
   90
   91                2 OUNAME ALIGNED,
   92
   93                  /*K* OUNAME - Textc object unit name */
   94
   95                  3 SIZE UBIN BYTE CALIGNED %INIT(9)%CHARTEXT('/**/'),
   96
   97                    /*K* SIZE - How big it is */
   98
   99                  3 TEXT %TYPE CALIGNED %INIT('<no_name>')%CHARTEXT('/**/');
  100
  101                    /*K* TEXT - What it is */
  102
  103      %MEND;
  104
  105      /*F*     NAME:     LL$OF
  106            PURPOSE:     Provides an array of object file entries.
  107        DESCRIPTION:     This structure is an indexed array of object files.
  108                         It also contains PBIAS and DBIAS information from
  109                         the invocation command.
  110      */
  111
15:04 JUL 28 '97 LL_MACS_C.:E05SI                                          4    
  112      %MACRO   LL$OF     ( NAME = LL$OF,
  113                           STCLASS = BASED );
  114
  115          %LSET LISTDIR='0'B;
  116          %LSET LISTEXP='1'B;
  117          %LSET LISTCOM='0'B;
  118          %LSET LISTSUB='1'B;
  119          %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  120          %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR
  121              (SUBSTR(STR,0,3)='EXT');
  122              %LSET INIT=CHARTEXT('INIT');
  123          %ELSE;
  124              %LSET INIT=CHARTEXT('/*');
  125          %ENDIF;
  126
  127          DCL 1 NAME(0:0) STCLASS ALIGNED,
  128
  129                2 PBIAS SBIN WORD ALIGNED %INIT(-1)%CHARTEXT('/**/'),
  130
  131                  /*K* PBIAS - Offset where procedure is to be placed */
  132
  133                2 DBIAS SBIN WORD ALIGNED %INIT(-1)%CHARTEXT('/**/'),
  134
  135                  /*K* DBIAS - Offsset where data is to be placed */
  136
  137                2 FID$ PTR ALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  138
  139                  /*K* FID$ - Object FID$ in TEXTC, from X$PARSE */
  140
  141                2 BIASING_DONE BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/');
  142
  143                  /*K* BIASING_DONE - Set after PBIAS and DBIAS has been
  144                       processed. */
  145
  146      %MEND;
  147
  148      /*F*     NAME:     LL$RUBIRTHKEY
15:04 JUL 28 '97 LL_MACS_C.:E05SI                                          5    
  149            PURPOSE:     Provides a key to read and write the BIRTH record
  150                         of a run unit with.
  151      */
  152
  153      %MACRO   LL$RUBIRTHKEY  ( NAME = LL_RUBIRTHKEY,
  154                                STCLASS = CONSTANT );
  155
  156          %LSET LISTDIR='0'B;
  157          %LSET LISTEXP='1'B;
  158          %LSET LISTCOM='0'B;
  159          %LSET LISTSUB='1'B;
  160          %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  161          %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR
  162              (SUBSTR(STR,0,3)='EXT');
  163              %LSET INIT=CHARTEXT('INIT');
  164          %ELSE;
  165              %LSET INIT=CHARTEXT('/*');
  166          %ENDIF;
  167
  168          DCL 1 NAME STCLASS ALIGNED,
  169
  170                2 SIZE UBIN BYTE CALIGNED %INIT(5)%CHARTEXT('/**/'),
  171
  172                  /*K* SIZE - Size of the key */
  173
  174                2 TEXT CHAR(5) CALIGNED %INIT('BIRTH')%CHARTEXT('/**/');
  175
  176                  /*K* TEXT - Text of the key */
  177
  178      %MEND;
  179
  180      /*F*     NAME:     LL$UNSATREF
  181            PURPOSE:     Provides a structure for all unsatisfied refs.
  182        DESCRIPTION:     Provides an entry structure for the type 5 and 7
  183                         records in the run unit (unsatisfied SYMREFs and
  184                         unsatisfied ENTREFS).
  185      */
15:04 JUL 28 '97 LL_MACS_C.:E05SI                                          6    
  186
  187      %MACRO   LL$UNSATREF    ( NAME = LL$UNSATREF,
  188                                STCLASS = BASED );
  189
  190          DCL 1 NAME STCLASS ALIGNED,
  191
  192                2 NPOINTER SBIN HALF HALIGNED,
  193
  194                  /*K* NPOINTER - Offset from the beginning of the Ref
  195                       Names Record to the name associated with the
  196                       unsatisfied reference. */
  197
  198                2 SREF BIT(1) UNAL,
  199
  200                  /*K* SREF - Set if the reference is secondary */
  201
  202                2 OPOINTER UBIN(17) UNAL;
  203
  204                  /*K* OPOINTER - Offset from the beginning of the Ref
  205                       Names Record to the name associated with the object
  206                       unit the ref came from. */
  207
  208      %MEND;
  209
  210      /*F*     NAME:     LL$SECT_ENTRY
  211            PURPOSE:     Provide a means to keep CSECTS "arranged" properly
  212                         in memory.
  213      */
  214
  215      %MACRO   LL$SECT_ENTRY  ( NAME = LL$SECT_ENTRY,
  216                                STCLASS = BASED );
  217
  218          %LSET LISTDIR='0'B;
  219          %LSET LISTEXP='1'B;
  220          %LSET LISTCOM='0'B;
  221          %LSET LISTSUB='1'B;
  222          %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
15:04 JUL 28 '97 LL_MACS_C.:E05SI                                          7    
  223          %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR
  224              (SUBSTR(STR,0,3)='EXT');
  225              %LSET INIT=CHARTEXT('INIT');
  226          %ELSE;
  227              %LSET INIT=CHARTEXT('/*');
  228          %ENDIF;
  229
  230          DCL 1 NAME STCLASS ALIGNED,
  231
  232                2 OBJUNIT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  233
  234                  /*K* OBJUNIT$ - Pointer to LL$OU_ENTRY structure for the
  235                       OU which this section came from. */
  236
  237                2 SECTION$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  238
  239                  /*K* SECTION$ - Pointer to a B$SECTION structure (the real
  240                       control section entry). */
  241
  242                2 BROTHER$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  243
  244                  /*K* BROTHER$ - Pointer to a named common or DCB control
  245                       section with the same name, not necessarily in the
  246                       same OU. */
  247
  248             2 BIAS UBIN(27),
  249
  250               /*K* BIAS - OU BIAS                     */
  251                2 NEXT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/');
  252
  253                  /*K* NEXT$ - Forward link to the "next" control section
  254                       on the chain.  LL_R_CODE$ gets you to the root node
  255                       of the CODE and READ ONLY sections.  LL_R_DATA$ gets
  256                       you to the root of DATA control sections.  LL_R_ROSE$
  257                       gets you to the root of the DCB control sections.
  258                       Blank and named common is not yet supported. */
  259
15:04 JUL 28 '97 LL_MACS_C.:E05SI                                          8    
  260      %MEND;
  261
  262      /*F*     NAME:     LL$NODE
  263            PURPOSE:     Symbol table entry.
  264        DESCRIPTION:     Provides a header for the two symbol tables.  The
  265                         tables exist as a simple binary tree structure.
  266                         See *F* cards for LLG$GROW to find out more.
  267      */
  268
  269      %MACRO   LL$NODE   ( NAME = LL$NODE,
  270                           STCLASS = BASED );
  271
  272          %LSET LISTDIR='0'B;
  273          %LSET LISTEXP='1'B;
  274          %LSET LISTCOM='0'B;
  275          %LSET LISTSUB='1'B;
  276          %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  277          %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR
  278              (SUBSTR(STR,0,3)='EXT');
  279              %LSET INIT=CHARTEXT('INIT');
  280          %ELSE;
  281              %LSET INIT=CHARTEXT('/*');
  282          %ENDIF;
  283
  284          DCL 1 NAME STCLASS ALIGNED,
  285
  286                2 OU$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  287
  288                  /*K* OU$ - Pointer to LL$OU_ENTRY structure for this
  289                       symbol. */
  290
  291                2 NODE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  292
  293                  /*K* NODE$ - Pointer to the actual ENTDEF or SYMDEF for
  294                       this entry (see B$EDEF and B$SDEF in include file
  295                       B$OBJECT_C). */
  296
15:04 JUL 28 '97 LL_MACS_C.:E05SI                                          9    
  297                2 BROTHER$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  298
  299                  /*K* BROTHER$ - Pointer to defs other than the "first"
  300                       one FEPLINK added to his symbol tables.  Used
  301                       only for multiply defined symbols.  If this entry
  302                       is ADDR(NIL) then there were no multiple defs. */
  303
  304                2 PARENT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  305
  306                  /*K* PARENT$ - Pointer to previous node. */
  307
  308                2 L_CHILD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  309
  310                  /*K* L_CHILD$ - Pointer to left subtree */
  311
  312                2 R_CHILD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/');
  313
  314                  /*K* R_CHILD$ - Pointer to right subtree */
  315
  316      %MEND;
  317
  318      /*F*
  319      NAME: LL_SRCH
  320      PURPOSE: Hold the list of search accounts.
  321      DESCRIPTION:
  322         This structure holds the list of search accounts and
  323        their SNs from the option list.
  324      */
  325
  326
  327      %EQU LL_MAX_SRCH = 10;
  328
  329      %MACRO LL_SRCH( NAME=LL_SRCH, STCLASS=SYMREF );
  330
  331      %LSET STR=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  332      %IF STR='CON' OR STR='STA' OR STR='EXT';
  333       %LSET INIT=CHARTEXT('INIT');
15:04 JUL 28 '97 LL_MACS_C.:E05SI                                          10   
  334       %LSET EINIT=CHARTEXT(' ');
  335      %ELSE;
  336       %LSET INIT=CHARTEXT('/*');
  337       %LSET EINIT=CHARTEXT('*/');
  338      %ENDIF;
  339
  340      DCL 1 NAME ALIGNED STCLASS,
  341            2 NUM SBIN WORD %INIT(0)%EINIT,
  342      /*B* NUM - Contains the number of valid search accounts in
  343           the structure.
  344      */
  345            2 ACCT(0:%LL_MAX_SRCH) CHAR(8) CALIGNED %INIT(' '*0)%EINIT,
  346      /*B* ACCT - An array of accounts (0: .NUM-1).
  347      */
  348            2 SN(0:%LL_MAX_SRCH) CHAR(6) CALIGNED %INIT(' '*0)%EINIT;
  349      /*B* SN - An array of SNs (0: .NUM-1). The entry will be blank
  350           if none was specified.
  351      */
  352
  353      %MEND;

