VERSION E05

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:1    
        1        1        /*M* VXT$ALL - allocates sections.     */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DFC */
        8        8        %MACRO ALIGN (ADR = ADR);
        9        9              IF ALIGN = 1 THEN DO;             /* Odd alignment                      */
       10       10                  ADR = BITBIN( BINBIT( ADR, 36 ) | BINBIT( 1, 36 ) );
       11       11                  END;
       12       12              ELSE DO;
       13       13                  IF MODMSK (ALIGN) & BINBIT (ADR , 36)
       14       14                  THEN ADR = 1 + BITBIN (MODMSK (ALIGN) | BINBIT (ADR , 36));
       15       15                  END;
       16       16        %MEND;
       17       17        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:2    
       18       18        /*X* DMR,PLM=4,IND=3,CSU=2,EXM=0,ECU=2,MOC,DCI=2,CRT=2,CTI=8,CCC     */
       19       19
       20       20
       21       21        VXT$ALL: PROC;
       22       22
       23       23        %INCLUDE VX_INC_C;
       24    10739        %VX$NODE;

             10751    1   /*******************************************************************************
             10752    1   *                                                                              *
             10753    1   *                          VX$NODE                                                 *
             10754    1   *                                                                              *
             10755    1   *******************************************************************************/

             10771    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10772    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10773    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10774    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10775    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10776    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10777                              to list of file nodes for this node            */
             10778    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10779    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10779                  /* Head pointer to shared library list */
             10780    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10780                  /* Head pointer to list of shared libraries
             10781                                          which have been mapped to included libraries */
             10782    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10783    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10784    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10785    1         2 ADDR_START REDEF  ADDR_START_A,
             10786    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             10787    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             10788    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10789    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10790    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10791    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:3    
             10792    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10793    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10794    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10795    1         2 START_PAGE# REDEF START_PAGE#_A,
             10796    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10797    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10798    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10799    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10800    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10801    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10802    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10803    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10804    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10804                  /* Starting pointer for common sections for this node */
             10805    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10805                  /* Stopping pointer for common sections for this node */
             10806    1         2 L_START,
             10807    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10808    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10809    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10810    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10811    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10812    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10813    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10814    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10815    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10816    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10817    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10818    1         2 L_STOP,
             10819    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10820    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10821    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10822    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10823    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10824    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10825    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10826    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:4    
             10827    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10828    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10829    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10830    1         2 L_SIZE,
             10831    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10832    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10833    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10834    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10835    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10836    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10837    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10838    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10839    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10840    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10841    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             10842    1         2 L_PREV_SIZE,
             10843    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10844    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10845    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10846    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10847    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10848    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10849    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10850    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10851    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10852    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10853    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             10854    1         2 BIT_MAP                ALIGNED,
             10855    1           3 DATA                  ALIGNED,
             10856    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10857    1           3 RPROC                 ALIGNED,
             10858    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10859    1           3 ROS                   ALIGNED,
             10860    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10861    1         2 L_SC_START,
             10862    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10863    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:5    
             10864    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10865    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10866    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             10867    1         2 L_SC_STOP,
             10868    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10869    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10870    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10871    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10872    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             10873    1         2 PROMOTE_HEAD,
             10874    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10875    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10876    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             10877    1         2 PROMOTE_TAIL,
             10878    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10879    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10880    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             10881    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             10882    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             10883    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             10884    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             10885    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       25    10889        %VX$SC;

             10902    1   /*******************************************************************************
             10903    1   *                                                                              *
             10904    1   *                          VX$SC                                                 *
             10905    1   *                                                                              *
             10906    1   *******************************************************************************/

             10911    1   DCL 1 VX$SC BASED ALIGNED,
             10912    1         2 SEG UBIN(3) UNAL,
             10913                /*K*  SEG - The segment number of this section */
             10914    1         2 TYPE UBIN(6) UNAL,
             10915                /*K*  TYPE -
             10916                      Type code      Section type
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:6    
             10917                      ---------      ------------
             10918                          0          Data control section with write access.
             10919                          1          Procedure control section.
             10920                          2          Unlabeled common, name pointer must be zero.
             10921                          3          Labeled common, with mandatory name pointer.
             10922                                     This is for labeled common which must be
             10923                                     in the root.
             10924                          4          Labeled common, with mandatory name pointer.
             10925                                     This is for labeled common which need not
             10926                                     be in the root.
             10927                          5          DCB, word 1 is name pointer.
             10928                          6          Data control section with read only access,
             10929                                     word 1 = 0 or name pointer.      */
             10930    1         2 EMPTY BIT(1) UNAL,
             10931                /*K*  EMPTY is the empty bit.  This bit is set if the control
             10932                      section is of size zero.  */
             10933    1         2 ATTR UNAL,
             10934    1           3 INT  UBIN(2) UNAL,
             10935                  /*K*  INT is the Section initialization.  */
             10936    1           3 SEGMENT BIT(1) UNAL,
             10937                  /*K* SEGMENT is set if the Section is defined in a data
             10938                       segment.  */
             10939    1           3 ALL BIT(1) UNAL,
             10940                  /*K*  ALL is set if the Section is allocated.  */
             10941    1           3 PRE_DCB BIT(1) UNAL,
             10942                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             10943    1           3 MES_INIT BIT(1) UNAL,
             10944    1           3 ALIGN UBIN(2) UNAL,
             10945                  /*K*  ALIGN is the Section alignment.  */
             10946    1         2 ADDRESS UBIN HALF UNAL,
             10947                /*K*  ADDRESS is the address within the Instruction Segment of
             10948                      the entry point of the external procedure.  */
             10949    1         2 NAME_DISP SBIN HALF UNAL,
             10950                /*K*  NAME_DISP is the Name index.  */
             10951    1         2 SIZE UBIN HALF UNAL,
             10952                /*K*  SIZE is the size, in words, of the section.  */
             10953    1         2 NODE# UBIN HALF UNAL,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:7    
             10954                /*K*  NODE# is the Node number of section.  */
             10955    1         2 COM_LINK UBIN HALF UNAL;
             10956                /*K*  COM_LINK is used internally by linker to link common sections */

             10966    1   /*******************************************************************************
             10967    1   *                                                                              *
             10968    1   *                          VX$SECT                                                 *
             10969    1   *                                                                              *
             10970    1   *******************************************************************************/

             10975    1   DCL 1 VX$SECT BASED ALIGNED,
             10976    1         2 TYPE UBIN BYTE UNAL,
             10977                /*K*  TYPE -
             10978                      Type code      Section type
             10979                      ---------      ------------
             10980                          0          Data control section with write access.
             10981                          1          Procedure control section.
             10982                          2          Unlabeled common, name pointer must be zero.
             10983                          3          Labeled common, with mandatory name pointer.
             10984                                     This is for labeled common which must be
             10985                                     in the root.
             10986                          4          Labeled common, with mandatory name pointer.
             10987                                     This is for labeled common which need not
             10988                                     be in the root.
             10989                          5          DCB, word 1 is name pointer.
             10990                          6          Data control section with read only access,
             10991                                     word 1 = 0 or name pointer.
             10992                          7          Constant labeled common, with mandatory name pointer.
             10993                                     This is for labeled common which must be
             10994                                     in the root.
             10995                          8          Constant labeled common, with mandatory name pointer.
             10996                                     This is for labeled common which need not
             10997                                     be in the root.                        */
             10998    1         2 * BIT(1),
             10999                /*K*  * is reserved for future use and must be zero. */
             11000    1         2 INITZERO BIT(1),
             11001                /*K*  INITZERO - if 1, initialize with zero.  */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:8    
             11002    1         2 INITUTS BIT(1),
             11003                /*K*  INITUTS - if 1, initialize with UTS.  */
             11004    1         2 SEGMENT BIT(1),
             11005                /*K*  SEGMENT - if 1, specifies that this section is
             11006                                to be placed in the segment specified by
             11007                                SEG_NPOINTER.  */
             11008    1         2 * BIT(3),
             11009                /*K*  * is reserved for future use and must be zero. */
             11010    1         2 BOUND UBIN(2) UNAL,
             11011                /*K*  BOUND - bits 6-7 - defines starting location.
             11012                              00 - starts on even word
             11013                              01 - starts on odd word
             11014                              10 - starts on multiple of 8
             11015                              11 - starts on page boundary     */
             11016    1         2 SIZE UBIN HALF UNAL,
             11017                /*K*  SIZE is the size, in words, of the section.  */
             11018    1         2 NPOINTER SBIN HALF UNAL,
             11019                /*K*  NPOINTER is the word displacement into the name record
             11020                      (TYPE 1) locating the name of this section.  If the
             11021                      field is negative, the section has no name.  */
             11022    1         2 MBZ UBIN HALF UNAL,
             11023                /*K*  MBZ is reserved for future expansion and must be zero. */
             11024    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11025                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11026                      Section.  The name must be a valid segment name
             11027                      recognized by the linker.  */
             11028    1         2 G66 REDEF MBZ,
             11029                /*K*  G66 is not used on CP-6. */
             11030    1           3 * BIT(9),
             11031    1           3 NSAB BIT(9);
       26    11034        %VX$LST;

             11047    1   /*******************************************************************************
             11048    1   *                                                                              *
             11049    1   *                          VX$LST                                                 *
             11050    1   *                                                                              *
             11051    1   *******************************************************************************/
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:9    

             11056    1   DCL 1 VX$LST                          ALIGNED BASED,
             11057    1         2 LINK$        PTR,               /* Link to next item                  */
             11058    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             11059    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             11060    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             11061    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             11062    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             11063    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             11064    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             11065    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             11066    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             11067    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             11068    1         2 P,
             11069    1           3 NAME_       ALIGNED,
             11070    1             4 BOUND      UBIN(20)  UNAL,
             11071    1             4 FLAGSV     UBIN(11)  UNAL,
             11072    1             4 *          BIT(5)    UNAL,
             11073    1             4 NAME$      PTR,
             11074    1           3 ACCT_       ALIGNED,
             11075    1             4 BOUND      UBIN(20)  UNAL,
             11076    1             4 FLAGSV     UBIN(11)  UNAL,
             11077    1             4 *          BIT(5)    UNAL,
             11078    1             4 ACCT$      PTR,
             11079    1           3 PASS_       ALIGNED,
             11080    1             4 BOUND      UBIN(20)  UNAL,
             11081    1             4 FLAGSV     UBIN(11)  UNAL,
             11082    1             4 *          BIT(5)    UNAL,
             11083    1             4 PASS$      PTR,
             11084    1           3 SN_         ALIGNED,
             11085    1             4 BOUND      UBIN(20)  UNAL,
             11086    1             4 FLAGSV     UBIN(11)  UNAL,
             11087    1             4 *          BIT(5)    UNAL,
             11088    1             4 SN$        PTR,
             11089    1           3 WSN_        ALIGNED,
             11090    1             4 BOUND      UBIN(20)  UNAL,
             11091    1             4 FLAGSV     UBIN(11)  UNAL,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:10   
             11092    1             4 *          BIT(5)    UNAL,
             11093    1             4 WSN$       PTR,
             11094    1           3 B           ALIGNED,
             11095    1             4 RES        BIT(1)    UNAL,
             11096    1             4 ASN        BIT(1)    UNAL,
             11097    1             4 ACCT       BIT(1)    UNAL,
             11098    1             4 *          BIT(33)   UNAL,
             11099    1           3 RES         CHAR(4)   ALIGNED,
             11100    1           3 ASN         UBIN(36)  ALIGNED;
       27    11103        %VXD$TMPLT;

             11116    1   /*******************************************************************************
             11117    1   *                                                                              *
             11118    1   *                          VXD$TMPLT                                               *
             11119    1   *                                                                              *
             11120    1   *******************************************************************************/

             11124        /*
             11125                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             11126                  ENTDEFs, SYMDEFs and SEGDEFs.
             11127        */
             11129    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             11130    1         2 VALUE SBIN UNAL,
             11131                /*K*  VALUE is the value if this entry is a constant.  */
             11132    1         2 AD REDEF VALUE,
             11133                /*K*  AD is the address if this entry is not constant.  */
             11134    1           3 LFLAGS UNAL,
             11135                  /*K*  LFLAGS is the field reserved for loader to flag load
             11136                        time attributes of the definition and must be zero
             11137                        in the object unit. */
             11138    1             4 SOURCE UBIN(3) UNAL,
             11139                    /*K*  SOURCE - Source of this DEF */
             11140    1             4 DEFINED BIT(1) UNAL,
             11141                    /*K*  DEFINED - Set if this DEF defined */
             11142    1             4 MULTIPLE BIT(1) UNAL,
             11143                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11144    1             4 USED BIT(1) UNAL,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:11   
             11145                    /*K*  USED - Set if this DEF is used. */
             11146    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             11147                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             11148                        than 2048 (RU).  */
             11149    1           3 SECTNUM UBIN(11) UNAL,
             11150                  /*K*  SECTNUM contains an entry number into the section
             11151                        table (TYPE 3).  */
             11152    1           3 ISADDR UBIN HALF UNAL,
             11153                  /*K*  ISADDR - Is Address (RU)  */
             11154    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             11155                  /*K*  OFFSET is the word offset from the origin of the section. */
             11156    1         2 NPOINTER SBIN HALF UNAL,
             11157                /*K*  NPOINTER is a word displacement into the name record
             11158                      (TYPE 1) locating the name (of this entry). */
             11159    1         2 CONSTNT BIT(1) UNAL,
             11160                /*K*  CONSTNT is a flag bit to determine the interpretation
             11161                      of word 0.
             11162                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11163                                    SECTNUM, and ISADDR or OFFSET.
             11164                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11165    1         2 LFLAGS UNAL,
             11166                /*K*  LFLAGS is the field reserved for loader to flag load
             11167                      time attributes and must be zero in the object unit. */
             11168    1           3 MULTIPLE BIT(1) UNAL,
             11169                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11170    1           3 USED BIT(1) UNAL,
             11171                  /*K*  USED - Set if this DEF is used. */
             11172    1           3 SOURCE UBIN(4) UNAL,
             11173                  /*K*  SOURCE - Source of this DEF */
             11174    1           3 IS_DCB BIT(1) UNAL,
             11175                  /*K* IS_DCB - Set if this is a DCB */
             11176    1           3 * BIT(10) UNAL,
             11177                  /*K*  * is reserved for future use and must be zero.  */
             11178    1         2 PROTECTION REDEF LFLAGS,
             11179                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             11180    1           3 TYPE UBIN(5) UNAL,
             11181                  /*K*  TYPE is the Protection type.  */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:12   
             11182    1           3 * UBIN(12) UNAL;
             11183                  /*K*  * is reserved for future use and must be zero.  */
       28    11198        %T$C;

             11210    1   /*******************************************************************************
             11211    1   *                                                                              *
             11212    1   *                          T$C                                                 *
             11213    1   *                                                                              *
             11214    1   *******************************************************************************/

             11219    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             11220    1         2 COUNT        UBIN( 9) UNAL,
             11221    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             11222    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             11223    1         2 COUNT        UBIN( 9) UNAL,
             11224    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       29    11227        %SET LISTMAC='1'B;
       30    11228        %SET LISTSUB='1'B;
       31    11229        %SET LISTEXP='1'B;
       32    11230        %BANNER(ARG=SUBS);
             11231        %LSET LISTDIR='0'B;

             11238    1   /*******************************************************************************
             11239    1   *                                                                              *
             11240    1   *                          SUBS                                                 *
             11241    1   *                                                                              *
             11242    1   *******************************************************************************/

       33    11246        %B$SECTIONSUBS;
             11247        %EQU DATASECTION=0 ;
             11248        %EQU CODESECTION=1 ;
             11249        %EQU UCOMSECTION=2 ;
             11250        %EQU RLCOMSECTION=3 ;
             11251        %EQU LCOMSECTION=4 ;
             11252        %EQU DCBSECTION=5 ;
             11253        %EQU ROSECTION=6 ;
             11254        %EQU RORLCOMSECTION=7 ;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:13   
             11255        %EQU ROLCOMSECTION=8 ;
             11256        %EQU EVENBOUNDSECTION=0 ;
             11257        %EQU ODDBOUNDSECTION=1 ;
             11258        %EQU EIGHTBOUNDSECTION=2 ;
             11259        %EQU PAGEBOUNDSECTION=3 ;
       34    11261        %BANNER(ARG=B$DNAME);
             11262        %LSET LISTDIR='0'B;

             11269    1   /*******************************************************************************
             11270    1   *                                                                              *
             11271    1   *                          B$DNAME                                                 *
             11272    1   *                                                                              *
             11273    1   *******************************************************************************/

       35    11277        %B$DNAME( NAME=B$DNAME, STCLASS=BASED );
             11278            %LSET STR='BASED        ';
             11279            %IF
             11280                '0'B;
             11282            %ELSE;
             11283                %LSET INIT=/*;
             11284            %ENDIF;
             11285    1   DCL 1 B$DNAME BASED ALIGNED,
             11286    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             11287                /*K*  COUNT is the number of characters in the name */
             11288            %IF
             11289                '0'B;
             11292            %ELSE;
             11293    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             11294            %ENDIF;
       36    11296        %B;
             11297        %LSET LISTDIR='0'B;

             11304    1   /*******************************************************************************
             11305    1   *                                                                              *
             11306    1   *                          BIT                                                 *
             11307    1   *                                                                              *
             11308    1   *******************************************************************************/
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:14   

       37    11312    1   DCL USER            BIT(1)    ALIGNED   AUTO;
       38    11313    1   DCL INTERNAL_ALL_BLK_COM  BIT(1)    ALIGNED   AUTO;
       39    11314    1   DCL PROMOTE_LABEL         BIT(1)  ALIGNED     AUTO;
       40    11315    1   DCL PROMOTE_BLANK         BIT(1)  ALIGNED     AUTO;
       41    11316    1   DCL PROMOTED              BIT(1)  ALIGNED     AUTO;
       42    11317        %C;
             11318        %LSET LISTDIR='0'B;

             11325    1   /*******************************************************************************
             11326    1   *                                                                              *
             11327    1   *                          CHAR                                                 *
             11328    1   *                                                                              *
             11329    1   *******************************************************************************/

       43    11333    1   DCL NODE_NAME1 CHAR(32);
       44    11334    1   DCL NODE_NAME2 CHAR(32);
       45    11335        %E;
             11336        %LSET LISTDIR='0'B;

             11343    1   /*******************************************************************************
             11344    1   *                                                                              *
             11345    1   *                          ENTRY                                                 *
             11346    1   *                                                                              *
             11347    1   *******************************************************************************/

       46    11351        %ENTRIES;
             11352    1   DCL VXE$ERROR       ENTRY(4);
             11353    1   DCL VXE$ERR         ENTRY(3);
             11354    1   DCL VXE$MERC        ENTRY;
             11355    1   DCL VXE$ERRMSG      ENTRY(3);
             11356    1   DCL VXR$READ        ENTRY( 3 );
             11357    1   DCL VXW$WRITE       ENTRY( 3 );
             11358    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11359    1   DCL VXD$B2C         ENTRY( 5 );
             11360    1   DCL VXD$C2B         ENTRY( 3 );
             11361    1   DCL VXA$GET         ENTRY( 3 );
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:15   
             11362    1   DCL VXF$FREE        ENTRY( 3 );
             11363    1   DCL VXQ$SORT        ENTRY( 7 );
             11364    1   DCL VXY$YESNO       ENTRY( 1 );
       47    11366        %ENTRIES_IO;
             11367    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             11368    1   DCL VXF$CLOSE       ENTRY(3);
             11369    1   DCL VXU$PREAD       ENTRY(12);
             11370    1   DCL VXK$KEY         ENTRY(4);
             11371    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             11372    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       48    11374        %PTR;
             11375        %LSET LISTDIR='0'B;

             11382    1   /*******************************************************************************
             11383    1   *                                                                              *
             11384    1   *                          PTR                                                 *
             11385    1   *                                                                              *
             11386    1   *******************************************************************************/

       49    11390        %POINTER;
             11391    1   DCL P$         PTR       ALIGNED AUTO;
             11392    1   DCL Q$         PTR       ALIGNED AUTO;
             11393    1   DCL R$         PTR       ALIGNED AUTO;
       50    11395    1   DCL CURR$           PTR       ALIGNED   AUTO;
       51    11396    1   DCL NAME$           PTR       ALIGNED   AUTO;
       52    11397    1   DCL ICURR$          PTR       ALIGNED   AUTO;
       53    11398    1   DCL PATH_CURR$      PTR       ALIGNED   AUTO;
       54    11399    1   DCL BLK_CURR$       PTR       ALIGNED   AUTO;
       55    11400    1   DCL BLK_COM$        PTR       ALIGNED   AUTO;
       56    11401    1   DCL BLK_CHAIN$      PTR       ALIGNED   AUTO;
       57    11402    1   DCL BLK_TAIL$       PTR       ALIGNED   AUTO;
       58    11403    1   DCL PN$             PTR       ALIGNED   AUTO;
       59    11404    1   DCL QN$             PTR       ALIGNED   AUTO;
       60    11405    1   DCL PNAM$           PTR       ALIGNED   AUTO;
       61    11406    1   DCL STOP$           PTR       ALIGNED   AUTO;
       62    11407    1   DCL DCB_CURR$       PTR       ALIGNED   AUTO;
       63    11408    1   DCL SC_CURR$        PTR       ALIGNED   AUTO;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:16   
       64    11409    1   DCL SAVE_SC_CURR$   PTR       ALIGNED   AUTO;
       65    11410    1   DCL SC_START$       PTR       ALIGNED   AUTO;
       66    11411    1   DCL SC_STOP$        PTR       ALIGNED   AUTO;
       67    11412    1   DCL SC_NAME$        PTR       ALIGNED   AUTO;
       68    11413    1   DCL S_CURR$         PTR       ALIGNED   AUTO;
       69    11414    1   DCL S_SC_CURR$      PTR       ALIGNED   AUTO;
       70    11415    1   DCL S_SC_START$     PTR       ALIGNED   AUTO;
       71    11416    1   DCL S_SC_STOP$      PTR       ALIGNED   AUTO;
       72    11417    1   DCL S_SC_NAME$      PTR       ALIGNED   AUTO;
       73    11418    1   DCL NEXT_FORCED_ROOT$    PTR  ALIGNED   AUTO;
       74    11419    1   DCL NEXT_FORCED_ROOT_NAME$ PTR ALIGNED  AUTO;
       75    11420    1   DCL DN_ROOT_START$       PTR  ALIGNED   AUTO;
       76    11421    1   DCL DUMMY$               PTR  ALIGNED   AUTO;
       77    11422    1   DCL HEAD$           PTR       ALIGNED   AUTO;
       78    11423    1   DCL TAIL$           PTR       ALIGNED   AUTO;
       79    11424    1   DCL NEXT$           PTR       ALIGNED   AUTO;
       80    11425    1   DCL NEXT_SC_CURR$   PTR       ALIGNED   AUTO;
       81    11426    1   DCL WHICH$          PTR       ALIGNED   AUTO;
       82    11427
       83    11428    1   DCL BLK_COM_NAME$    PTR       ALIGNED   AUTO;
       84    11429    1   DCL P_START$         PTR       ALIGNED   AUTO;
       85    11430    1   DCL P_STOP$          PTR       ALIGNED   AUTO;
       86    11431    1   DCL R_SC$            PTR       ALIGNED   AUTO;
       87    11432    1   DCL NR_SC$           PTR       ALIGNED   AUTO;
       88    11433    1   DCL PROMOTE_NAME$    PTR       ALIGNED   AUTO;
       89    11434    1   DCL PROMOTE_NODE$    PTR       ALIGNED   AUTO;
       90    11435    1   DCL COMMON_NAME$     PTR       ALIGNED   AUTO;
       91    11436    1   DCL COMMON_NODE$     PTR       ALIGNED   AUTO;
       92    11437    1   DCL TRAV_CURR$       PTR       ALIGNED   AUTO;
       93    11438    1   DCL SC_NEXT$         PTR       ALIGNED   AUTO;
       94    11439    1   DCL UNUSED$          PTR       ALIGNED   AUTO;
       95    11440
       96    11441        %U;
             11442        %LSET LISTDIR='0'B;

             11449    1   /*******************************************************************************
             11450    1   *                                                                              *
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:17   
             11451    1   *                          UBIN                                                 *
             11452    1   *                                                                              *
             11453    1   *******************************************************************************/

       97    11457        %INDEX;
             11458    1   DCL I          UBIN(36) ALIGNED AUTO;
             11459    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11460    1   DCL J          UBIN(36) ALIGNED AUTO;
             11461    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11462    1   DCL K          UBIN(36) ALIGNED AUTO;
             11463    1   DCL SK REDEF K SBIN WORD ALIGNED;
             11464    1   DCL L          UBIN(36) ALIGNED AUTO;
             11465    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       98    11467    1   DCL NODE#           UBIN(36)  ALIGNED   AUTO;
       99    11468    1   DCL BIG             UBIN(36)  ALIGNED   AUTO;
      100    11469    1   DCL REF_RTYPE       UBIN(36)  ALIGNED   AUTO;
      101    11470    1   DCL VALUE           UBIN(36)  ALIGNED   AUTO;
      102    11471    1   DCL SAVE_NAME_DISP  UBIN(36)  ALIGNED   AUTO;
      103    11472    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
      104    11473    1   DCL SC_TYPE            UBIN(36)  ALIGNED   AUTO;
      105    11474    1   DCL ADR            SBIN(36)  ALIGNED   AUTO;
      106    11475    1   DCL PAGE_ADR       UBIN(36)  ALIGNED   AUTO;
      107    11476    1   DCL DCB_ADR        UBIN(36)  ALIGNED   AUTO;
      108    11477    1   DCL INC             UBIN(36)  ALIGNED   AUTO;
      109    11478    1   DCL ALIGN           UBIN(36)  ALIGNED   AUTO;
      110    11479    1   DCL DIFF            UBIN(36)  ALIGNED   AUTO;
      111    11480    1   DCL MODMSKS(0:3)     UBIN(36)  ALIGNED   CONSTANT INIT(1,0,7,1023);
      112    11481    1   DCL MODMSK(0:3) REDEF MODMSKS BIT(36);
      113    11482    1   DCL NEW_TYPE            UBIN(36)  ALIGNED   AUTO;
      114    11483    1   DCL GET             UBIN(36)  ALIGNED   AUTO;
      115    11484    1   DCL GET_NAME             UBIN(36)  ALIGNED   AUTO;
      116    11485    1   DCL SIZE_AVAIL_NAME      UBIN(36)  ALIGNED   AUTO;
      117    11486    1   DCL SIZE_AVAIL           UBIN(36)  ALIGNED   AUTO;
      118    11487    1   DCL F_NAME_SIZEW         UBIN(36)  ALIGNED   AUTO;
      119    11488    1   DCL TEXTC_SIZEW          UBIN(36)  ALIGNED   AUTO;
      120    11489    1   DCL DCB_INSERT           UBIN(36)  ALIGNED   AUTO;
      121    11490    1   DCL START_TIMES     UBIN(36)  ALIGNED   AUTO;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:18   
      122    11491    1   DCL STOP_TIMES     UBIN(36)  ALIGNED   AUTO;
      123    11492    1   DCL INDX            UBIN(36)  ALIGNED   AUTO;
      124    11493    1   DCL INNER_INDX      UBIN(36)  ALIGNED   AUTO;
      125    11494    1   DCL DISP            UBIN(36)  ALIGNED   AUTO;
      126    11495    1   DCL SC_COM_LINK     UBIN(36)  ALIGNED   AUTO;
      127    11496
      128    11497    1   DCL BLK_COM_DISP     UBIN(36)  ALIGNED   AUTO;
      129    11498    1   DCL PROMOTE_SIZE     UBIN(36)  ALIGNED   AUTO;
      130    11499    1   DCL CURR_NODE#       UBIN(36)  ALIGNED   AUTO;
      131    11500    1   DCL CURR_DEPTH       UBIN(36)  ALIGNED   AUTO;
      132    11501    1   DCL CURR_NAME_DISP   UBIN(36)  ALIGNED   AUTO;
      133    11502    1   DCL PROMOTE_ADDRESS  UBIN(36)  ALIGNED   AUTO;
      134    11503    1   DCL PROMOTE_DEPTH    UBIN(36)  ALIGNED   AUTO;
      135    11504    1   DCL PROMOTE_NODE#    UBIN(36)  ALIGNED   AUTO;
      136    11505    1   DCL COMMON_ADDRESS   UBIN(36)  ALIGNED   AUTO;
      137    11506    1   DCL COMMON_DEPTH     UBIN(36)  ALIGNED   AUTO;
      138    11507    1   DCL COMMON_NODE#     UBIN(36)  ALIGNED   AUTO;
      139    11508    1   DCL BLK_COUNT          UBIN(36)  ALIGNED   AUTO;
      140    11509    1   DCL SEGMENT            UBIN(36)  ALIGNED   AUTO;
      141    11510
      142    11511        %SEQ_SEARCH_VARS(
      143    11512                   START$ = SEQ_START$,
      144    11513                   STOP$  = SEQ_STOP$,
      145    11514                   NAME$ = SEQ_NAME$);
             11515    1   DCL SEQ_START$                    PTR  ALIGNED   AUTO;
             11516    1   DCL SEQ_STOP$                     PTR  ALIGNED   AUTO;
             11517    1   DCL SEQ_NAME$                     PTR  ALIGNED   AUTO;
      146    11519        %SEQ_SEARCH_TEMPS(
      147    11520                   TEMP$ = SEQ_TEMP$,
      148    11521                   MATCH$=SEQ_MATCH$);
             11522    1   DCL SEQ_TEMP$                     PTR  ALIGNED   AUTO;
             11523    1   DCL SEQ_MATCH$                    PTR  ALIGNED   AUTO;
      149    11525    1   DCL ABOVE_INIT       UBIN(36)  ALIGNED   AUTO;
      150    11526    1   DCL ABOVE_ALIGN      UBIN(36)  ALIGNED   AUTO;
      151    11527    1   DCL ABOVE_PREC       UBIN(36)  ALIGNED   AUTO;
      152    11528    1   DCL BELOW_INIT       UBIN(36)  ALIGNED   AUTO;
      153    11529    1   DCL BELOW_ALIGN      UBIN(36)  ALIGNED   AUTO;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:19   
      154    11530    1   DCL BELOW_PREC       UBIN(36)  ALIGNED   AUTO;
      155    11531    1   DCL BELOW_TEMP$      PTR       ALIGNED   AUTO;
      156    11532
      157    11533        %B$TREE_TABLE(HDR_NAME=VX$TREE_HEADER,NODE_NAME=VX$TREE_NODE);
             11534    1   DCL 1 VX$TREE_HEADER BASED ALIGNED,
             11535              /*K*  HDR_NAME is the Tree table header.  */
             11536    1         2 NODES UBIN HALF UNAL,
             11537                /*K*  NODES is the number of nodes in the tree table.  */
             11538    1         2 SIZE UBIN HALF UNAL,
             11539                /*K*  SIZE is the total word size of the tree table
             11540                      (HDR + NODES + TEST pool).   */
             11541    1         2 LIB$ PTR,
             11542                /*K*  LIB$ is the pointer to the name of the shared library
             11543                      currently associated.  */
             11544    1         2 PRECSIZE UBIN HALF UNAL,
             11545                /*K*  PRECSIZE  is the maximum program record size in the
             11546                      Run Unit (from the Head record).  */
             11547    1         2 MAX_LIB_DATA UBIN HALF UNAL;
             11548                /*K*  MAX_LIB_DATA is the maximum reserved in the program
             11549                      image for the shared library data.  */
             11550    1   DCL 1 VX$TREE_NODE BASED ALIGNED,
             11551              /*K*  NODE_NAME is the node specification.  */
             11552    1         2 NAME$ PTR,
             11553                /*K*  NAME$ is the pointer to the name of the node.  */
             11554    1         2 FLGS,
             11555                /*K*  FLGS are control flags used by M$OLAY.  */
             11556    1           3 NOW_IN BIT(1) UNAL,
             11557                  /*K*  NOW_IN is set if this node is now in memory.  */
             11558    1           3 WAS_IN BIT(1) UNAL,
             11559                  /*K*  WAS_IN is set if this node was in memory.  */
             11560    1           3 * BIT(7) UNAL,
             11561                  /*K*  * is reserved for future use and must be zero.  */
             11562    1         2 AFLGS,
             11563                /*K*  AFLGS are access flags.  */
             11564    1           3 * BIT(6) UNAL,
             11565                  /*K*  * is reserved for future use and must be zero.  */
             11566    1           3 NOPATH BIT(1) UNAL,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:20   
             11567                  /*K*  NOPATH is set if this node is independently loaded
             11568                        (no backward path).  */
             11569    1           3 ENTER BIT(1) UNAL,
             11570                  /*K*  ENTER is set if ENTRY$ is valid.  */
             11571    1           3 CANCEL BIT(1) UNAL,
             11572                  /*K*  CANCEL is set if the overlay was removed by
             11573                        "CANCEL=YES".   */
             11574    1         2 BACK# SBIN HALF UNAL,
             11575                /*K*  BACK# is the backward link (parent).  */
             11576    1         2 FORWARD# SBIN HALF UNAL,
             11577                /*K*  FORWARD# is the forward link (daughter).  */
             11578    1         2 OVERLAY# SBIN HALF UNAL,
             11579                /*K*  OVERLAY# is the overlay link (same level).   */
             11580    1         2 PADDR UBIN HALF UNAL,
             11581                /*K*  PADDR is the address of procedure.  */
             11582    1         2 PSIZE UBIN HALF UNAL,
             11583                /*K*  PSIZE is the size of procedure.  */
             11584    1         2 DADDR UBIN HALF UNAL,
             11585                /*K*  DADDR is the address of data.  */
             11586    1         2 DSIZE UBIN HALF UNAL,
             11587                /*K*  DSIZE is the size of data.  */
             11588    1         2 ENTRY$ EPTR;
             11589                /*K*  ENTRY$ is the overlay entry point (see ENTER).  */
      158    11591        %B$HEAD;
             11592    1   DCL 1 B$HEAD BASED ALIGNED,
             11593    1         2 PRIV BIT(36),
             11594                /*K*  PRIV is a 36 bit field containing privilege flags.  */
             11595    1         2 VPPGS UBIN(14) UNAL,
             11596                /*K*  VPPGS is the number of virtual pages of procedure
             11597                      required for the longest overlay path.
             11598                      (256 words/page if FEP, 1024 words/page if Host)  */
             11599    1         2 * UBIN(2) UNAL,
             11600                /*K*  * is reserved for future use and must be zero.  */
             11601    1         2 RPROC UBIN(20) UNAL,
             11602                /*K*  RPROC is the size, in words, of the procedure for the root.  */
             11603    1         2 VDPGS UBIN(14) UNAL,
             11604                /*K*  VDPGS is the number of virtual pages of data required
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:21   
             11605                      for the longest overlay path.
             11606                      (256 words/page if FEP, 1024 words/page if Host)
             11607                      This includes both library and user defined data.
             11608                       */
             11609    1         2 * UBIN(2) UNAL,
             11610                /*K*  * is reserved for future use and must be zero.  */
             11611    1         2 RDATA UBIN(20) UNAL,
             11612                /*K*  RDATA is the size, in words of the data for the root.
             11613                      This includes both library and user defined data.
             11614                      If this is a host run unit, all data records will be
             11615                      included in the run unit.
             11616                      If this is a FEP run unit,
             11617                      no library data will be included in the run unit itself.
             11618                      The ISADDR field of B$RUKEY for the first user data record
             11619                      may be determined by calculating the FEP word address of
             11620                      B$HEAD.BIAS rounded to the next lower 2048 FEP word boundry.
             11621                      (2048 FEP words is the maximum size of run unit records
             11622                      for FEP run units.)  The data in this record below
             11623                      BIAS will be padded with zeros.
             11624                      The word size of data contained in the FEP run unit
             11625                      may be calculated by subtracting the ISADDR value as
             11626                      calculated for the first data record from the word
             11627                      address of the last word of user data.  The last
             11628                      word of user data is the sum of the default FPRG
             11629                      bias (%GM_ISR1_BASE - EQU is in file GM_LCP6_E) and
             11630                      the total data size (B$HEAD.RDATA).
             11631                      */
             11632    1         2 SEV UBIN BYTE UNAL,
             11633                /*K*  SEV is the maximum severity level of the object units
             11634                      making up the run unit.  */
             11635    1         2 * UBIN(7) UNAL,
             11636                /*K*  * is reserved for future use and must be zero.  */
             11637    1         2 START UBIN(20) UNAL,
             11638                /*K*  START is the address within the instruction segment at
             11639                      which execution will start.  */
             11640    1         2 UDCBNUM UBIN HALF UNAL,
             11641                /*K*  UDCBNUM is the number of DCBs in the Read-Only segment
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:22   
             11642                      as generated by LINK.   */
             11643    1         2 DCBRES UBIN HALF UNAL,
             11644                /*K*  DCBRES is the number of pointers to DCBs as supplied by
             11645                      LINK.   */
             11646    1         2 TREEDISP UBIN HALF UNAL,
             11647                /*K*  TREEDISP is the displacement in words from the start of
             11648                      the variable portion of the Read-Only Segment locating
             11649                      the tree table.   */
             11650    1         2 TCBSIZE UBIN HALF UNAL,
             11651                /*K*  TCBSIZE specifies the number of frames of the Task Control Block;
             11652                      if the size is 0, then a two frame Task Control Block will be
             11653                      built by STEP.   */
             11654    1         2 PRECSIZE UBIN HALF UNAL,
             11655                /*K*  PRECSIZ is the maximum size of any program record
             11656                      in the run unit; words if Host, double words if FEP.
             11657                      */
             11658    1         2 NRECSIZE UBIN HALF UNAL,
             11659                /*K*  NRECSIZ is the maximum size of External Name records in
             11660                      the run unit.   */
             11661    1         2 EPRECSIZE UBIN HALF UNAL,
             11662                /*K*  EPRECSIZE is the maximum size of External Procedure
             11663                      Definition Records in the run unit.   */
             11664    1         2 EDRECSIZE UBIN HALF UNAL,
             11665                /*K*  EDRECSIZE is the maximum size of External Data Definition
             11666                      Records in the run unit.    */
             11667    1         2 SDRECSIZE UBIN HALF UNAL,
             11668                /*K*  SDRECSIZE is the maximum size of External Segment
             11669                      Definition Records in the run unit.   */
             11670    1         2 ROSIZE UBIN HALF UNAL,
             11671                /*K*  ROSIZE is the size of the Read Only Segment Record.  */
             11672    1         2 VERSION# UBIN BYTE UNAL,
             11673                /*K*  VERSION# is the LINK version number.  */
             11674    1         2 MAP_BITS_A(0:2) UNAL,
             11675                /*K*  MAP_BITS_A are used by the linker to produce MAP.  */
             11676    1           3 MULTIPLE BIT(1) UNAL,
             11677                  /*K*  MULTIPLE is set if a multiply defined symbol exists.  */
             11678    1           3 CON BIT(1) UNAL,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:23   
             11679                  /*K*  CON is set if a Constant symbol is defined.  */
             11680    1           3 PRIMARY BIT(1) UNAL,
             11681                  /*K*  PRIMARY is set if an unresolved primary reference exists.  */
             11682    1           3 SECONDARY BIT(1) UNAL,
             11683                  /*K*  SECONDARY is set if an unresolved secondary reference
             11684                        exists.  */
             11685    1         2 SECTABLESIZE UBIN(8) UNAL,
             11686                /*K*  SECTABLESIZE is the size in words of the record which
             11687                      contains the start location and size of all sections
             11688                      (for BIAS by OU for FEP)   */
             11689    1         2 NSTDINVOC BIT(1) UNAL,
             11690                /*K*  NSTDINVOC indicates that the RU will can tolerate invoking
             11691                      in nonstandard form.   */
             11692    1         2 REMOVE_ENTDEF BIT(1) UNAL,
             11693                /*K*  REMOVE_ENTDEF is set if ENTDEFs not in the transfer
             11694                      vector have been removed from the shared library.  */
             11695    1         2 REMOVE_SYMDEF BIT(1) UNAL,
             11696                /*K*  REMOVE_SYMDEF is set if SYMDEFs not in the transfer
             11697                      vector have been removed from the shared library.  */
             11698    1         2 STATS BIT(1) UNAL,
             11699                /*K*  STATS is set if Statistics are being collected on
             11700                      this processor.  */
             11701    1         2 LAUTO BIT(1) UNAL,
             11702                /*K*  LAUTO is set for a Fep run unit if user auto is to be in
             11703                a small segment, thereby freeing up a large one for other purposes. */
             11704    1         2 * BIT(2) UNAL,
             11705                /*K*  * is reserved for future use and must be zero.  */
             11706    1         2 DATA_SEG (0:5),
             11707                /*K*  DATA_SEG defines the initialized data segment in the RU.  */
             11708    1           3 SIZ UBIN HALF UNAL,
             11709                  /*K* SIZ is the word size of the initialized data segment.  */
             11710    1           3 * UBIN(9) UNAL,
             11711                  /*K*  * is reserved for future use and must be zero.  */
             11712    1           3 PROTECTION UBIN(9) UNAL,
             11713                  /*K*  PROTECTION is the initialized data segment
             11714                        protection.   */
             11715    1         2 LOCK(0:71) BIT(1) UNAL,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:24   
             11716                /*K*  LOCK is the Lock for restricted processor.  */
             11717    1         2 FLAVOR UBIN BYTE UNAL,
             11718                /*K*  FLAVOR is the flavor of the run unit.  The RU_FLAVORS
             11719                      macro gives the legal values for FLAVOR.  */
             11720    1         2 S BIT(1) UNAL,
             11721                /*K*  S - S = 1 if the run unit is Shareable  */
             11722    1         2 LIB BIT(1) UNAL,
             11723                /*K*  LIB - LIB = 1 if the run unit is a Shared Library  */
             11724    1         2 ASL BIT(1) UNAL,
             11725                /*K*  ASL - ASL = 1 if the run unit is an Alternate Shared
             11726                      Library.   */
             11727    1         2 CMDPROC BIT(1) UNAL,
             11728                /*K*  CMDPROC - CMDPROC = 1 is the run unit is a Command Processor. */
             11729    1         2 DEBUGGER BIT(1) UNAL,
             11730                /*K*  DEBUGGER - DEBUGGER = 1 if the run unit is a Debugger. */
             11731    1         2 OVRL BIT(1) UNAL,
             11732                /*K*  OVRL -  OVRL = 1 if the run unit is overlaid.   */
             11733    1         2 PROCACC BIT(1) UNAL,
             11734                /*K*  PROCACC - If PROCACC = 1,  if the run unit resides in
             11735                      :SYS, it should be charged as processor, not user.  */
             11736    1         2 NOCHGPMEM BIT(1) UNAL,
             11737                /*K*  NOCHGPMEM - If NOCHGPMEM = 1, if the run unit resides in
             11738                      :SYS, the user should not be charged for procedures.  */
             11739    1         2 PROCSURCHG BIT(1) UNAL,
             11740                /*K*  PROCSURCHG - If PROCSURCHG = 1, Surcharge accountings
             11741                      should be applied.  */
             11742    1         2 RESTPROC BIT(1) UNAL,
             11743                /*K*  RESTPROC - If RESTPROC = 1, this is a restricted
             11744                      processor and should be verified against the user's key.  */
             11745    1         2 STRONG_LOCK BIT(1) UNAL,
             11746                /*K*  STRONG_LOCK - If STRONG_LOCK = 1, the restricted
             11747                      processor has a strong lock.  If STRONG_LOCK = 0, the
             11748                      restricted processor has a weak lock.   */
             11749    1         2 * UBIN(16) UNAL,
             11750                /*K*  * is reserved for future use and must be zero. */
             11751    1         2 PSEUDO_COUNT UBIN BYTE UNAL,
             11752                /*K*  PSEUDO_COUNT - If PSEUDO_COUNT > 0, then a pseudo resource
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:25   
             11753                      is required to execute this run-unit.  */
             11754    1         2 * UBIN(7) UNAL,
             11755                /*K*  * is reserved for future use and must be zero.  */
             11756    1         2 BIAS UBIN(20) UNAL,
             11757                /*K*  BIAS is the address within the instruction segment of
             11758                      the beginning of the root data.  */
             11759    1         2 PSEUDO_TEXT CHAR(8),
             11760                /*K*  PSEUDO_TEXT - contains the text of the pseudo resource
             11761                      to acquire when the run-unit is executed.  */
             11762    1         2 * (0:1) UBIN WORD UNAL,
             11763                /*K*  * is reserved for future use and must be zero.  */
             11764    1         2 LIBNAME,
             11765                /*K* LIBNAME gives the name, if any, of the shared library to
             11766                     be associated.  Each name resides in a fixed 8-word field.
             11767                     The first byte contains the character count of the name
             11768                     followed by the name itself.   */
             11769    1           3 CNT UBIN BYTE UNAL,
             11770                  /*K* CNT contains the character count of the name of the
             11771                       shared library.  */
             11772    1           3 TXT CHAR(31) UNAL,
             11773                  /*K*  TXT contains the name itself of the shared library.  */
             11774    1         2 ASLNAME,
             11775                /*K*  ASLNAME gives the name, if any, of the alternate shared
             11776                      library to be associated.  Each name resides in a fixed
             11777                      8-word field.  The first byte contains the character
             11778                      count of the name followed by the name itself.   */
             11779    1           3 CNT UBIN BYTE UNAL,
             11780                  /*K*  CNT contains the character count of the name of
             11781                        the alternate shared library.  */
             11782    1           3 TXT CHAR(31) UNAL;
             11783                  /*K*  TXT contains the name itself of the alternate
             11784                        shared library.  */
             11785        %IF '1'B;
             11786        /* %EQU's for data segment protection type */
             11787        %EQU DS_READONLY#=256;
             11788        %EQU DS_READWRITE#=384;
             11789        %ENDIF;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:26   
      159    11791
      160    11792
      161    11793
      162    11794    1   DCL PREC(0:3)       UBIN(36)  ALIGNED   CONSTANT  INIT(
      163    11795        /*         None uts  zero undefined */
      164    11796    1              0,   5, 10,   0    );
      165    11797    1   DCL ALIGN_PREC(0:3) UBIN(36)  ALIGNED   CONSTANT  INIT(
      166    11798        /*         Even odd  eight     page */
      167    11799    1              2,   1,   3,        4    );
      168    11800    1   DCL INIT_COUNT(0:3) UBIN(36)  ALIGNED   CONSTANT  INIT(
      169    11801    1              1,   1,   3,   1);
      170    11802    1   DCL INIT_CHARS(0:3) CHAR(4)   ALIGNED   CONSTANT  INIT(
      171    11803    1         /* 0*/     '?',
      172    11804    1         /* 1*/     '0',
      173    11805    1         /* 2*/     'UTS',
      174    11806    1         /* 3*/     '?');
      175    11807    1   DCL 1 BLANK_COMMON ALIGNED CONSTANT,
      176    11808    1         2 COUNT UBIN(36) UNAL INIT(14),
      177    11809    1         2 CHARS CHAR(14) UNAL INIT('<BLANK COMMON>');
      178    11810    1   DCL 1 UNUSED_DATA ALIGNED CONSTANT,
      179    11811    1         2 COUNT UBIN HALF UNAL INIT(11),
      180    11812    1         2 TEXT CHAR(0) INIT('Unused data');
      181    11813        %S;
             11814        %LSET LISTDIR='0'B;

             11821    1   /*******************************************************************************
             11822    1   *                                                                              *
             11823    1   *                          SBIN                                                 *
             11824    1   *                                                                              *
             11825    1   *******************************************************************************/

      182    11829    1   DCL MAX_BADR(0:2/*@ROS*/)     SBIN WORD ALIGNED   STATIC    INIT(0*0);
      183    11830    1   DCL MAX_EADR(0:2/*@ROS*/)     SBIN WORD ALIGNED   STATIC    INIT(-1*0);
      184    11831
      185    11832
      186    11833
      187    11834        %VX$BREF;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:27   
             11835    1   DCL 1 VX$BREF                    ALIGNED     BASED (VX_NEXT_BREF$),
             11836    1         2 WORD_A(0:1)       UBIN(36)  ALIGNED,
             11837    1         2 I  REDEF     WORD_A         ALIGNED,
             11838    1           3 WORD0            UBIN(36)  ALIGNED,
             11839    1           3 WORD1            UBIN(36)  ALIGNED;
      188    11841        %VX$PTR$;
             11842    1   DCL VX$PTR$(0:0)         PTR  ALIGNED   BASED( VX_SC_X_NODE$ );
             11843                                      /* Section allocated NODE# to node pointer map  */
      189    11845        %PLIST;
      190    11846        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:28   
      191    11847        /*                  Release the segments used for def's in pass 1
      192    11848        */
      193    11849    1       IF VX_M_ALL( 5/*@ED_DS_1*/ ) > 0 THEN
      194    11850    1          CALL VXF$FREE( 5/*@ED_DS_1*/, VX_M_FREE( 5/*@ED_DS_1*/ ), 1 );
      195    11851
      196    11852    1       IF VX_M_ALL( 6/*@DD_DS_1*/ ) > 0 THEN
      197    11853    1          CALL VXF$FREE( 6/*@DD_DS_1*/, VX_M_FREE( 6/*@DD_DS_1*/ ), 1 );
      198    11854
      199    11855    1       IF VX_M_ALL( 3/*@SD_DS_1*/ ) > 0 THEN
      200    11856    1          CALL VXF$FREE( 3/*@SD_DS_1*/, VX_M_FREE( 3/*@SD_DS_1*/ ), 1 );
      201    11857
      202    11858    2       IF VX_M_BASE_PTR( 7/*@SC_DS_1*/ ) = ADDR(NIL) THEN DO;
      203    11859        /*E*  ERROR: VXT-E$NO_SC_VX-0
      204    11860              MESSAGE: No section declarations encountered after pass 1.
      205    11861              DESCRIPTION: Self-explanatory.
      206    11862        */
      207    11863               %SCREAM( ERR#=E$NO_SC_VX, LEVEL=@E$F_VX, MID="'T'" );
      208    11866    2          END;
      209    11867    1       ADR = 0;
      210    11868    1       DCB_ADR = 0;
      211    11869    1       DCB_INSERT = 0;
      212    11870    1       SC_START$ = VX_ROOT$ -> VX$NODE.L_START.SC$;
      213    11871    2       IF SC_START$ = ADDR(NIL) THEN DO;
      214    11872        /*E*  ERROR: VXT-E$SC_NONE_VX-0
      215    11873              MESSAGE: No sections encountered in object file(s).
      216    11874              DESCRIPTION: Self-explanatory.
      217    11875        */
      218    11876               %SCREAM( ERR#=E$SC_NONE_VX, MID="'T'", LEVEL=@E$F_VX );
      219    11879    2          END;
      220    11880    1       VX_DCB_HEAD$ = ADDR(NIL);
      221    11881    1       VX_DCB_TAIL$ = ADDR(NIL);
      222    11882    1       VX_DCB_START$ = ADDR(NIL);
      223    11883    1       DN_ROOT_START$ = VX_ROOT$ -> VX$NODE.L_START.DN$;
      224    11884        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:29   
      225    11885    2       IF VX_OD.VECTOR_.DATA THEN DO;    /* Build dummy section for unused data */
      226    11886               %ALLOCATE( PTR$=DUMMY$, TYPE=@DN_DS_1, SIZE="SIZEW(UNUSED_DATA)" );
      227    11893    2          VX_ROOT$->VX$NODE.L_STOP.DN$ = PINCRW(DUMMY$, SIZEW(UNUSED_DATA) );
      228    11894    2          DUMMY$->B$DNAME.COUNT = UNUSED_DATA.COUNT;
      229    11895    2          DUMMY$->B$DNAME.TEXT = UNUSED_DATA.TEXT;
      230    11896               %ALLOCATE( PTR$=UNUSED$, TYPE=@SC_DS_1, SIZE="SIZEW(VX$SC)" );
      231    11903    2          UNUSED$->VX$SC = '0'B;
      232    11904    2          UNUSED$->VX$SC.TYPE = 0;
      233    11905    2          UNUSED$->VX$SC.ATTR.INT = 1;
      234    11906    2          UNUSED$->VX$SC.NAME_DISP = VX_ROOT$->VX$NODE.L_SIZE.DN;
      235    11907    2          VX_ROOT$->VX$NODE.L_SIZE.DN = VX_ROOT$->VX$NODE.L_SIZE.DN + SIZEW(UNUSED_DATA
             11907                   );
      236    11908    2          END;
      237    11909        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:30   
      238    11910        /* Build node # to node pointer map */
      239    11911    1       I = VX_NODE_NUMBER + 1;
      240    11912            %ALLOCATE( PTR$=VX_SC_X_NODE$, TYPE=@GDP, SIZE=I );
      241    11919    1       CURR$ = VX_ROOT$;
      242    11920    2   LOOP: DO WHILE ( '1'B );                /* Do forever */
      243    11921
      244    11922    2          VX_SC_X_NODE$ -> VX$PTR$( CURR$ -> VX$NODE.NUM ) = CURR$;
      245    11923    2          IF CURR$ -> VX$NODE.HEAD$ -> VX$LST.TYPE = 0/*@OF*/
      246    11924    2                  AND  CURR$ -> VX$NODE.HEAD$ -> VX$LST.SUB_TYPE = 1/*@OF_LIST*/
      247    11925    2          THEN
      248    11926    2             NODE_NAME1 = SUBSTR(CURR$->VX$NODE.HEAD$->VX$LST.OBJECT_NAME$->T$C.CHARS,1
             11926                      );
      249    11927    2          ELSE
      250    11928    2             NODE_NAME1 = CURR$->VX$NODE.HEAD$->VX$LST.P.NAME_.NAME$->T$C.CHARS;
      251    11929        /*
      252    11930                                  Check for duplicate node names         */
      253    11931    2          ICURR$ = VX_ROOT$;
      254    11932    3   INTERNAL: DO WHILE ( '1'B );            /* Do forever */
      255    11933    4             IF CURR$ ~= ICURR$ THEN DO;
      256    11934    4                IF ICURR$ -> VX$NODE.HEAD$ -> VX$LST.TYPE = 0/*@OF*/
      257    11935    4                        AND  ICURR$ -> VX$NODE.HEAD$ -> VX$LST.SUB_TYPE = 1/*@OF_LIST*/
      258    11936    4                THEN
      259    11937    4                   NODE_NAME2 = SUBSTR(ICURR$->VX$NODE.HEAD$->VX$LST.OBJECT_NAME$->T$C.
             11937                            CHARS,1);
      260    11938    4                ELSE
      261    11939    4                   NODE_NAME2 = ICURR$->VX$NODE.HEAD$->VX$LST.P.NAME_.NAME$->T$C.CHARS;
      262    11940    5                IF NODE_NAME1 = NODE_NAME2 THEN DO;
      263    11941        /*E*  ERROR: VXT-E$DUP_NODE_NAMES_VX-0
      264    11942              MESSAGE: Multiple nodes with the same name: %U1
      265    11943              DESCRIPTION: Self-explanatory.
      266    11944        */
      267    11945    5                   VX_EFIELD1.COUNT = SIZEC(NODE_NAME1) - 1;
      268    11946    5                   VX_EFIELD1.CHARS = NODE_NAME1;
      269    11947                        %SCREAM( ERR#=E$DUP_NODE_NAMES_VX, LEVEL=@E$F_VX, MID="'T'" );
      270    11950    5                   END;                    /* If <name> = <name> */
      271    11951    4                END;                       /* If CURR$ ~= ICURR$ then do; */
      272    11952    4             IF ICURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO; /* Move to eldest son */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:31   
      273    11953    4                ICURR$   = ICURR$   -> VX$NODE.SON$;
      274    11954    4                END;
      275    11955    4             ELSE DO;
      276    11956    5                DO WHILE ( ICURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );
      277    11957                                                /* Move to an ancestor */
      278    11958    5                   ICURR$ = ICURR$ -> VX$NODE.FATHER$;
      279    11959    5                   IF ICURR$ = ADDR(NIL) THEN GOTO INTERNAL_DONE;
             11959                            /* Check if done      */
      280    11960    5                   END;        /* do while (ICURR$->VX$NODE.BROTHER$ = addr(nil) */
      281    11961    4                ICURR$ = ICURR$ -> VX$NODE.BROTHER$; /* Move to a brother */
      282    11962    4                END;                       /* Else do */
      283    11963    3             END INTERNAL;                 /* Do forever */
      284    11964    2   INTERNAL_DONE:;
      285    11965    3          IF CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO; /* Move to eldest son */
      286    11966    3             CURR$    = CURR$    -> VX$NODE.SON$;
      287    11967    3             END;
      288    11968    3          ELSE DO;
      289    11969    4             DO WHILE ( CURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );
      290    11970                                                /* Move to an ancestor */
      291    11971    4                CURR$ = CURR$ -> VX$NODE.FATHER$; /* Move up */
      292    11972    4                IF CURR$ = ADDR(NIL) THEN GOTO LOOP_DONE; /* Check if done */
      293    11973    4                END;             /* Do WHILE(CURR$->VX$NODE.BROTHER$ = addr(nil))*/
      294    11974    3             CURR$ = CURR$ -> VX$NODE.BROTHER$; /* Move to brother */
      295    11975    3             END;                          /* Else do */
      296    11976    2          END LOOP;                        /* Do forever */
      297    11977    1   LOOP_DONE:;
      298    11978        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:32   
      299    11979    1       PROMOTE_SIZE = 0;
      300    11980    1       PROMOTE_BLANK = (VX_SC_BLK_COM>0) & (VX_OD.SIN.PROMOTE | VX_OD.SIN.PROMOTE_BLANK
             11980                );
      301    11981    1       PROMOTE_LABEL = ( (VX_SC_LBL_COM > 0) | (VX_SC_ROOT_LBL_COM > 0) )
      302    11982    1               &  ( VX_OD.SIN.PROMOTE | VX_OD.SIN.PROMOTE_LABEL );
      303    11983
      304    11984    1       IF  VX_NODE_NUMBER > 0 AND VX_O.SIN.OSP = 0/*@NO*/ AND
      305    11985    2               ( PROMOTE_LABEL OR PROMOTE_BLANK ) THEN DO;
      306    11986
      307    11987    2          PROMOTE_SIZE = PROMOTE_SIZE + ( VX_SC_ROOT_LBL_COM * SIZEW ( VX$SC ) ) ;
      308    11988
      309    11989    3          IF PROMOTE_BLANK THEN DO;
      310    11990    3             PROMOTE_SIZE = PROMOTE_SIZE + ( VX_SC_BLK_COM * SIZEW ( VX$SC ) ) ;
      311    11991                  %ALLOCATE( PTR$=BLK_COM_NAME$, TYPE=@DN_DS_1, SIZE=1 );
      312    11998    3             BLK_COM_NAME$ -> B$DNAME.COUNT = 1;
      313    11999    3             BLK_COM_NAME$ -> B$DNAME.TEXT = BINASC( 0 );
      314    12000    3             BLK_COM_DISP = POFFW( BLK_COM_NAME$, DN_ROOT_START$ );
      315    12001    3             END;
      316    12002    3          ELSE DO;
      317    12003    3             BLK_COM_NAME$ = ADDR(NIL);
      318    12004    3             BLK_COM_DISP = 0;
      319    12005    3             END;                          /* Else do; */
      320    12006
      321    12007    2          IF PROMOTE_LABEL THEN
      322    12008    2             PROMOTE_SIZE = PROMOTE_SIZE + ( VX_SC_LBL_COM * SIZEW ( VX$SC ) ) ;
      323    12009
      324    12010               %ALLOCATE( PTR$=P_STOP$, TYPE=@ED_DS_1, SIZE=PROMOTE_SIZE );
      325    12017
      326    12018    2          P_START$ = P_STOP$ ;
      327    12019
      328    12020    2          CALL PROMOTE_SELECT ( 3 ) ;
      329    12021    2          IF PROMOTE_BLANK THEN CALL PROMOTE_SELECT ( 2 ) ;
      330    12022    2          IF PROMOTE_LABEL THEN CALL PROMOTE_SELECT ( 4 ) ;
      331    12023
      332    12024        /*      Sort selected blocks into name order.  */
      333    12025    2          CALL VXQ$SORT( DN_ROOT_START$,
      334    12026    2                  P_START$,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:33   
      335    12027    2                  PINCRW( P_STOP$, -SIZEW(VX$SC ) ),
      336    12028    2                  SIZEW( VX$SC ),
      337    12029    2                  1/*@BY_NAME*/,
      338    12030    2                  2,
      339    12031    2                  0 );
      340    12032
      341    12033        /*      The first occurrence of a block in the sorted list is from
      342    12034                the hightest node in this overlay path.  (this requires that
      343    12035                VXQ$SORT perform a nondestructive sort that preserves the
      344    12036                order of the original entries.)  therefore, if the
      345    12037                block occurs more than once in the sorted list, that
      346    12038                occurrence will either be below the first occurrence in the
      347    12039                same overlay path (no promotion required) or in another
      348    12040                overlay path (promotion required).  This behavior is based
      349    12041                on the current link overlay specification method.          */
      350    12042
      351    12043        /*      Loop thru each unique selected block.  */
      352    12044    2          SC_CURR$ = P_START$ ;
      353    12045    3          DO  WHILE( SC_CURR$ < P_STOP$ );
      354    12046    3             PROMOTE_NAME$ = PINCRW( DN_ROOT_START$, SC_CURR$ -> VX$SC.NAME_DISP );
      355    12047    3             PROMOTE_DEPTH = SC_CURR$ -> VX$SC.COM_LINK;
      356    12048    3             PROMOTE_NODE# = SC_CURR$ -> VX$SC.NODE#;
      357    12049    3             PROMOTE_ADDRESS = SC_CURR$ -> VX$SC.ADDRESS;
      358    12050    3             PROMOTE_NODE$   = VX_SC_X_NODE$ -> VX$PTR$ ( PROMOTE_NODE# ) ;
      359    12051    3             IF SC_CURR$->VX$SC.TYPE = 3 THEN
      360    12052    3                PROMOTED = '1'B/*@TRUE_B*/ ;
      361    12053    3             ELSE
      362    12054    3                PROMOTED = '0'B/*@FALSE_B*/ ;
      363    12055
      364    12056        /*          Loop thru the next blocks...  */
      365    12057    3             SC_NEXT$ = PINCRW( SC_CURR$, SIZEW( VX$SC) );
      366    12058    4   NEXT_BLOCK: DO  WHILE ( SC_NEXT$ < P_STOP$ ) ;
      367    12059    4                COMMON_NAME$ = PINCRW ( DN_ROOT_START$, SC_NEXT$ -> VX$SC.NAME_DISP ) ;
      368    12060    4                COMMON_DEPTH = SC_NEXT$ -> VX$SC.COM_LINK ;
      369    12061    4                COMMON_NODE# = SC_NEXT$ -> VX$SC.NODE# ;
      370    12062    4                COMMON_ADDRESS = SC_NEXT$ -> VX$SC.ADDRESS ;
      371    12063    4                COMMON_NODE$   = VX_SC_X_NODE$ -> VX$PTR$ ( COMMON_NODE# ) ;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:34   
      372    12064    4                IF SC_NEXT$->VX$SC.TYPE = 3 THEN
      373    12065    4                   PROMOTED = '1'B/*@TRUE_B*/ ;
      374    12066
      375    12067        /*              ... with the same name ...  */
      376    12068    4                IF  ( PROMOTE_NAME$ -> B$DNAME.TEXT =
      377    12069    4                        COMMON_NAME$ -> B$DNAME.TEXT ) THEN
      378    12070
      379    12071        /*              ... until a common node is found.  */
      380    12072    5   COMMON_NODE: DO  WHILE ( COMMON_NODE# ~= PROMOTE_NODE# ) ;
      381    12073    6                   IF COMMON_DEPTH > PROMOTE_DEPTH THEN DO;
      382    12074    6                      COMMON_NODE$ = COMMON_NODE$ -> VX$NODE.FATHER$ ;
      383    12075    6                      COMMON_DEPTH = COMMON_NODE$ -> VX$NODE.DEPTH ;
      384    12076    6                      COMMON_NODE# = COMMON_NODE$ -> VX$NODE.NUM ;
      385    12077    6                      END ;
      386    12078    6                   ELSE DO ;
      387    12079    6                      PROMOTED = '1'B/*@TRUE_B*/ ;
      388    12080    6                      IF COMMON_ADDRESS < PROMOTE_ADDRESS THEN
      389    12081    6                         PROMOTE_ADDRESS = COMMON_ADDRESS ;
      390    12082    6                      IF PROMOTE_NODE# = 0 THEN EXIT COMMON_NODE ;
      391    12083    6                      PROMOTE_NODE$ = PROMOTE_NODE$ -> VX$NODE.FATHER$ ;
      392    12084    6                      PROMOTE_DEPTH = PROMOTE_NODE$ -> VX$NODE.DEPTH ;
      393    12085    6                      PROMOTE_NODE# = PROMOTE_NODE$ -> VX$NODE.NUM ;
      394    12086    6                      END ;
      395    12087
      396    12088    5                   END ;             /*  Found common node or promoted to root.  */
      397    12089
      398    12090    4                ELSE                       /*  The next name is different.  */
      399    12091    4                   EXIT NEXT_BLOCK ;
      400    12092
      401    12093    4                SC_NEXT$ = PINCRW( SC_NEXT$, SIZEW( VX$SC ) ) ;
      402    12094
      403    12095    4                END ;                      /*  Loop thru next blocks ...  */
      404    12096
      405    12097        /*          Make adjustment if block was promoted.  */
      406    12098    4             IF PROMOTED THEN DO ;
      407    12099    4                IF SC_CURR$ -> VX$SC.TYPE = 2 THEN I = 0 ;
      408    12100    4                ELSE I = 1 ;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:35   
      409    12101
      410    12102    4                IF PROMOTE_NODE$ -> VX$NODE.PROMOTE_HEAD_A$(I) = ADDR(NIL) THEN
      411    12103    4                   PROMOTE_NODE$ -> VX$NODE.PROMOTE_HEAD_A$(I) = SC_CURR$;
      412    12104    5                ELSE DO;
      413    12105    5                   R_SC$ = PROMOTE_NODE$ -> VX$NODE.PROMOTE_TAIL_A$(I);
      414    12106    5                   R_SC$ -> VX$SC.COM_LINK = POFFW( SC_CURR$, R_SC$ );
      415    12107    5                   END;
      416    12108
      417    12109    4                SC_CURR$ -> VX$SC.EMPTY = '0'B/*@FALSE_B*/ ;
      418    12110    4                SC_CURR$ -> VX$SC.COM_LINK = 0;
      419    12111    4                PROMOTE_NODE$ -> VX$NODE.PROMOTE_TAIL_A$(I) = SC_CURR$;
      420    12112
      421    12113    4                END ;                      /*  Of adjustment for promotion.  */
      422    12114
      423    12115    3             SC_CURR$ = SC_NEXT$;
      424    12116
      425    12117    3             END ;                   /*  Loop thru all unique selected blocks.  */
      426    12118
      427    12119    2          IF BLK_COM_NAME$ ~= ADDR(NIL) THEN CALL VXF$FREE( 4/*@DN_DS_1*/, 1, 1 );
      428    12120
      429    12121    2          END;         /* If VX_NODE_NUMBER > 0 and VX_O.SIN.OSP = @NO then do; */
      430    12122
      431    12123        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:36   
      432    12124        /*
      433    12125              Set starting address for sections data
      434    12126        */
      435    12127    1       IF VX_OD.NUM.DBIAS THEN ADR = VX_O.NUM.DBIAS;
      436    12128    1       VX_PROGRAM_BIAS.A(0/*@DATA*/) = ADR;
      437    12129    1       MAX_BADR(0/*@DATA*/) = ADR;
      438    12130    1       IF VX_SLIB_INIT$ ~= ADDR(NIL) THEN ADR = ADR + VX_SLIB_MAX_DATA;
      439    12131    1       ADR = ADR + VX_BIAS.A( 0/*@DATA*/ );
      440    12132
      441    12133    1       GET_NAME = VX_SC_LBL_COM + VX_SC_ROOT_LBL_COM;
      442    12134    1       IF GET_NAME <= 0 THEN GET_NAME = 10 * SIZEW( VX$SC );
      443    12135    1       GET = GET_NAME * SIZEW( VX$SC );
      444    12136            %ALLOCATE( PTR$=NEXT_FORCED_ROOT$, TYPE=@SC_DS_1, SIZE=GET );
      445    12143    1       SIZE_AVAIL = GET;
      446    12144    1       GET_NAME = GET_NAME * 8;
      447    12145            %ALLOCATE( PTR$=NEXT_FORCED_ROOT_NAME$, TYPE=@DN_DS_1, SIZE=GET_NAME );
      448    12152    1       SIZE_AVAIL_NAME = GET_NAME;
      449    12153    1       IF VX_NODE_NUMBER > 0  AND  NOT PROMOTE_LABEL  AND  NOT VX_OD.SIN.OSP
      450    12154    1       THEN START_TIMES = 0;
      451    12155    1       ELSE START_TIMES = 1;
      452    12156    2       DO I = START_TIMES TO 1;
      453    12157    2          VX_CURR$ = VX_ROOT$;
      454    12158
      455    12159    3          DO WHILE( VX_CURR$ ~= ADDR(NIL) );
      456    12160    3             VX_CURR$ -> VX$NODE.PATH$ = ADDR(NIL);
      457    12161    4             IF START_TIMES = 1 THEN DO;
      458    12162    4                INDX = 1;
      459    12163    4                IF VX_OD.SIN.OSP
      460    12164    4                THEN WHICH$ = VX_ROOT$;
      461    12165    4                ELSE WHICH$ = VX_CURR$;
      462    12166                                                /* Do concatenation of the two lists */
      463    12167    5                IF VX_CURR$ -> VX$NODE.L_SC_START.SC_LBL_COM$ ~= ADDR(NIL) THEN DO;
      464    12168    6                   IF VX_CURR$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$ = ADDR(NIL) THEN
             12168                            DO;
      465    12169    6                      VX_CURR$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$ =
      466    12170    6                              VX_CURR$ -> VX$NODE.L_SC_START.SC_LBL_COM$;
      467    12171    6                      END;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:37   
      468    12172    6                   ELSE DO;                /* Two non-null lists */
      469    12173    6                      VX_CURR$ -> VX$NODE.L_SC_STOP.SC_ROOT_LBL_COM$ -> VX$SC.COM_LINK
             12173                               =
      470    12174    6                              POFFW( VX_CURR$ -> VX$NODE.L_SC_START.SC_LBL_COM$,
             12174                                       VX_SC_START$    );
      471    12175    6                      END;                 /* Else do; */
      472    12176    5                   END;
             12176                   /* If VX_CURR$ -> VX$NODE.L_SC_START.SC_LBL_COM$ ~= addr(nil) then do; */
      473    12177    4                END;                     /* If START_TIMES = STOP_TIMES then do; */
      474    12178    4             ELSE DO;
      475    12179    5                IF I = 0 THEN DO;
      476    12180    5                   INDX = 1;
      477    12181    5                   WHICH$ = VX_ROOT$;
      478    12182    5                   END;
      479    12183    5                ELSE DO;
      480    12184    5                   INDX = 2;
      481    12185    5                   IF VX_OD.SIN.OSP
      482    12186    5                   THEN WHICH$ = VX_ROOT$;
      483    12187    5                   ELSE WHICH$ = VX_CURR$;
      484    12188    5                   END;                    /* Else do; */
      485    12189    4                END;                       /* Else do; */
      486    12190        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:38   
      487    12191    4             IF VX_CURR$ -> VX$NODE.PROMOTE_HEAD.LBL_COM$ = ADDR(NIL) THEN DO;
      488    12192    4                SC_CURR$      = ADDR(NIL);
      489    12193    4                NEXT_SC_CURR$ = VX_CURR$ -> VX$NODE.L_SC_START_A$(INDX);
      490    12194    4                SC_STOP$ = VX_CURR$ -> VX$NODE.L_STOP.SC$;
      491    12195    4                VX_CURR$ -> VX$NODE.L_SC_START_A$(INDX)    = ADDR(NIL);
      492    12196    4                VX_CURR$ -> VX$NODE.L_SC_STOP_A$(INDX)     = ADDR(NIL);
      493    12197    4                END;
      494    12198    4             ELSE DO;
      495    12199    4                SC_CURR$ = VX_CURR$ -> VX$NODE.PROMOTE_HEAD.LBL_COM$;
      496    12200    4                VX_CURR$ -> VX$NODE.PROMOTE_HEAD.LBL_COM$ = ADDR(NIL);
      497    12201    4                SAVE_SC_CURR$ = VX_CURR$ -> VX$NODE.L_SC_START_A$(INDX);
      498    12202    4                SC_STOP$ = VX_CURR$ -> VX$NODE.L_STOP.SC$;
      499    12203    4                VX_CURR$ -> VX$NODE.L_SC_START_A$(INDX)    = ADDR(NIL);
      500    12204    4                VX_CURR$ -> VX$NODE.L_SC_STOP_A$(INDX)     = ADDR(NIL);
      501    12205    4   MOVE_PROMOTE:
      502    12206
      503    12207
      504    12208
      505    12209    4                NEXT_FORCED_ROOT$ -> VX$SC = SC_CURR$ -> VX$SC;
      506    12210    4                DISP = POFFW( NEXT_FORCED_ROOT$, VX_SC_START$ );
      507    12211    4                NEXT_FORCED_ROOT$ -> VX$SC.NODE# = SC_CURR$ -> VX$SC.ADDRESS;
      508    12212    4                NEXT_FORCED_ROOT$ -> VX$SC.COM_LINK = DISP;
      509    12213    4                TAIL$ = WHICH$ -> VX$NODE.L_SC_STOP.SC_ROOT_LBL_COM$;
      510    12214    5                IF TAIL$ = ADDR(NIL) THEN DO;
      511    12215    5                   WHICH$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$ = NEXT_FORCED_ROOT$;
      512    12216    5                   END;
      513    12217    5                ELSE DO;
      514    12218    5                   TAIL$ -> VX$SC.COM_LINK = DISP;
      515    12219    5                   END;                    /* Else do; */
      516    12220    4                WHICH$ -> VX$NODE.L_SC_STOP.SC_ROOT_LBL_COM$ = NEXT_FORCED_ROOT$;
      517    12221    4                SEQ_MATCH$ = PINCRW( DN_ROOT_START$, SC_CURR$ -> VX$SC.NAME_DISP );
      518    12222    4                F_NAME_SIZEW = ( SEQ_MATCH$ -> B$DNAME.COUNT + 4/*@CHAR_WORD*/ + 1 ) /
             12222                         4/*@CHAR_WORD*/;
      519    12223    5                IF SIZE_AVAIL_NAME < F_NAME_SIZEW THEN DO;
      520    12224                        %ALLOCATE( PTR$=DUMMY$, TYPE=@DN_DS_1, SIZE=GET_NAME );
      521    12231    5                   SIZE_AVAIL_NAME = SIZE_AVAIL_NAME + GET_NAME;
      522    12232    5                   END;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:39   
      523    12233    4                NEXT_FORCED_ROOT_NAME$ -> B$DNAME.COUNT = SEQ_MATCH$ -> B$DNAME.COUNT;
      524    12234    4                NEXT_FORCED_ROOT_NAME$ -> B$DNAME.TEXT = SEQ_MATCH$ -> B$DNAME.TEXT;
      525    12235    4                NEXT_FORCED_ROOT$ -> VX$SC.NAME_DISP = POFFW( NEXT_FORCED_ROOT_NAME$,
      526    12236    4                        DN_ROOT_START$ );
      527    12237    4                NEXT_FORCED_ROOT_NAME$ = PINCRW( NEXT_FORCED_ROOT_NAME$, F_NAME_SIZEW )
             12237                         ;
      528    12238    4                SIZE_AVAIL_NAME = SIZE_AVAIL_NAME - F_NAME_SIZEW;
      529    12239    4                NEXT_FORCED_ROOT$ = PINCRW( NEXT_FORCED_ROOT$, SIZEW( VX$SC ) );
      530    12240    4                SIZE_AVAIL = SIZE_AVAIL - SIZEW( VX$SC );
      531    12241    4                DISP = SC_CURR$ -> VX$SC.COM_LINK;
      532    12242    5                IF DISP ~= 0 THEN DO;
      533    12243    5                   SC_CURR$ = PINCRW( SC_CURR$, DISP );
      534    12244    5                   GOTO MOVE_PROMOTE;
      535    12245    5                   END;                    /* If disp ~= 0 then do; */
      536    12246    4                NEXT_SC_CURR$ = SAVE_SC_CURR$;
      537    12247    4                SC_CURR$      = ADDR(NIL);
      538    12248    4                END;                       /* Else do */
      539    12249        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:40   
      540    12250    3             SC_NAME$ = VX_CURR$ -> VX$NODE.L_START.DN$;
      541    12251    4             DO WHILE( NEXT_SC_CURR$ ~= SC_CURR$ );
      542    12252    4                SC_CURR$ = NEXT_SC_CURR$;
      543    12253    4                SC_COM_LINK = SC_CURR$ -> VX$SC.COM_LINK;
      544    12254    4                IF SC_CURR$ > SC_STOP$ THEN
      545    12255    4                   SEQ_MATCH$ = PINCRW(DN_ROOT_START$, SC_CURR$->VX$SC.NAME_DISP);
      546    12256    4                ELSE
      547    12257    4                   SEQ_MATCH$  = PINCRW( SC_NAME$, SC_CURR$ -> VX$SC.NAME_DISP );
      548    12258    4                S_CURR$ = VX_ROOT$;
      549    12259
      550    12260    5                DO WHILE( S_CURR$ ~= ADDR(NIL) );
      551    12261    5                   NEXT$     = S_CURR$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$;
      552    12262    5                   SEQ_TEMP$ = ADDR(NIL);
      553    12263    6                   DO WHILE( NEXT$ ~= SEQ_TEMP$ );
      554    12264    6                      SEQ_TEMP$ = NEXT$;
      555    12265    6                      IF PINCRW(DN_ROOT_START$, SEQ_TEMP$ -> VX$SC.NAME_DISP) ->
             12265                               B$DNAME.TEXT
      556    12266    6                              =  SEQ_MATCH$ -> B$DNAME.TEXT
      557    12267    6                      THEN GOTO  SET_FROM_ENTRY;
      558    12268    6                      NEXT$ = PINCRW( VX_SC_START$, SEQ_TEMP$ -> VX$SC.COM_LINK );
      559    12269    6                      END;                 /* Do while( NEXT$ ~= SEQ_TEMP$ ); */
      560    12270
      561    12271    5                   IF WHICH$ = VX_ROOT$
      562    12272    5                   THEN S_CURR$ = ADDR(NIL);
      563    12273    5                   ELSE S_CURR$ = S_CURR$ -> VX$NODE.PATH$;
      564    12274    5                   END;                    /* Do while ( S_CURR$ ~= addr(nil) ); */
      565    12275        /*
      566    12276         Here we insert
      567    12277        */
      568    12278    4                NEXT_FORCED_ROOT$ -> VX$SC = SC_CURR$ -> VX$SC;
      569    12279    4                DISP = POFFW( NEXT_FORCED_ROOT$, VX_SC_START$ );
      570    12280    4                NEXT_FORCED_ROOT$ -> VX$SC.NODE# = POFFW( SC_CURR$, VX_SC_START$ );
      571    12281    4                NEXT_FORCED_ROOT$ -> VX$SC.COM_LINK = DISP;
      572    12282    4                SC_CURR$ -> VX$SC.COM_LINK = DISP;
      573    12283    4                TAIL$ = WHICH$ -> VX$NODE.L_SC_STOP.SC_ROOT_LBL_COM$;
      574    12284    5                IF TAIL$ = ADDR(NIL) THEN DO;
      575    12285    5                   WHICH$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$ = NEXT_FORCED_ROOT$;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:41   
      576    12286    5                   END;
      577    12287    5                ELSE DO;
      578    12288    5                   TAIL$ -> VX$SC.COM_LINK = DISP;
      579    12289    5                   END;                    /* Else do; */
      580    12290    4                WHICH$ -> VX$NODE.L_SC_STOP.SC_ROOT_LBL_COM$ = NEXT_FORCED_ROOT$;
      581    12291    4                F_NAME_SIZEW = ( SEQ_MATCH$ -> B$DNAME.COUNT + 4/*@CHAR_WORD*/ + 1 ) /
             12291                         4/*@CHAR_WORD*/;
      582    12292    5                IF SIZE_AVAIL_NAME < F_NAME_SIZEW THEN DO;
      583    12293                        %ALLOCATE( PTR$=DUMMY$, TYPE=@DN_DS_1, SIZE=GET_NAME );
      584    12300    5                   SIZE_AVAIL_NAME = SIZE_AVAIL_NAME + GET_NAME;
      585    12301    5                   END;
      586    12302    4                NEXT_FORCED_ROOT_NAME$ -> B$DNAME.COUNT = SEQ_MATCH$ -> B$DNAME.COUNT;
      587    12303    4                NEXT_FORCED_ROOT_NAME$ -> B$DNAME.TEXT = SEQ_MATCH$ -> B$DNAME.TEXT;
      588    12304    4                NEXT_FORCED_ROOT$ -> VX$SC.NAME_DISP = POFFW( NEXT_FORCED_ROOT_NAME$,
      589    12305    4                        DN_ROOT_START$ );
      590    12306    4                NEXT_FORCED_ROOT_NAME$ = PINCRW( NEXT_FORCED_ROOT_NAME$, F_NAME_SIZEW )
             12306                         ;
      591    12307    4                SIZE_AVAIL_NAME = SIZE_AVAIL_NAME - F_NAME_SIZEW;
      592    12308    4                NEXT_FORCED_ROOT$ = PINCRW( NEXT_FORCED_ROOT$, SIZEW( VX$SC ) );
      593    12309    4                SIZE_AVAIL = SIZE_AVAIL - SIZEW( VX$SC );
      594    12310
      595    12311        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:42   
      596    12312    5                DO WHILE( '0'B );
      597    12313    5   SET_FROM_ENTRY:
      598    12314        /*
      599    12315         Here we set from entry
      600    12316        */
      601    12317    5                   SC_CURR$ -> VX$SC.COM_LINK = POFFW( SEQ_TEMP$,  VX_SC_START$ );
      602    12318    5                   IF SEQ_TEMP$ -> VX$SC.SIZE < SC_CURR$ -> VX$SC.SIZE THEN
      603    12319    5                      SEQ_TEMP$ -> VX$SC.SIZE = SC_CURR$ -> VX$SC.SIZE;
      604    12320    5                   ABOVE_ALIGN = SEQ_TEMP$ -> VX$SC.ATTR.ALIGN;
      605    12321    5                   BELOW_ALIGN = SC_CURR$ -> VX$SC.ATTR.ALIGN;
      606    12322    5                   IF (ABOVE_ALIGN ~= BELOW_ALIGN) AND
      607    12323    5                           (ABOVE_ALIGN = 1 OR
      608    12324    6                           BELOW_ALIGN = 1) THEN DO;
      609    12325    6                      BELOW_TEMP$ = PINCRW( SC_NAME$, SC_CURR$ -> VX$SC.NAME_DISP );
      610    12326    6                      VX_EFIELD1.COUNT = BELOW_TEMP$ -> B$DNAME.COUNT;
      611    12327    6                      VX_EFIELD1.CHARS = BELOW_TEMP$ -> B$DNAME.TEXT;
      612    12328                           %SCREAM( ERR#=E$SC_ALIGN_VX, LEVEL=@E$W_VX, MID="'T'" );
      613    12331    6                      END;
      614    12332    5                   IF ALIGN_PREC(ABOVE_ALIGN) < ALIGN_PREC(BELOW_ALIGN) THEN
      615    12333    5                      SEQ_TEMP$ -> VX$SC.ATTR.ALIGN = BELOW_ALIGN;
      616    12334    5                   ABOVE_INIT = SEQ_TEMP$ -> VX$SC.ATTR.INT;
      617    12335    5                   BELOW_INIT = SC_CURR$ -> VX$SC.ATTR.INT;
      618    12336    5                   ABOVE_PREC = PREC( ABOVE_INIT );
      619    12337    5                   BELOW_PREC = PREC( BELOW_INIT );
      620    12338    6                   IF ABOVE_PREC ~= BELOW_PREC THEN DO;
      621    12339    6                      IF ABOVE_PREC < BELOW_PREC THEN
      622    12340    6                         SEQ_TEMP$ -> VX$SC.ATTR.INT = BELOW_INIT;
      623    12341    6                      IF ABOVE_PREC ~= 0  AND  BELOW_PREC ~= 0
      624    12342    7                              AND NOT SEQ_TEMP$ -> VX$SC.ATTR.MES_INIT THEN DO;
      625    12343    7                         SEQ_TEMP$ -> VX$SC.ATTR.MES_INIT = '1'B/*@TRUE_B*/;
      626    12344    7                         END;              /* If ABOVE_PREC ~= 0 .... */
      627    12345    6                      END;               /* If ABOVE_PREC ~= BELOW_PREC then do; */
      628    12346    5                   SC_CURR$ -> VX$SC.ATTR.INT = 0;
      629    12347    5                   END;                    /* Do never */
      630    12348
      631    12349
      632    12350    4                NEXT_SC_CURR$ = PINCRW( VX_SC_START$, SC_COM_LINK);
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:43   
      633    12351    4                END;                   /* Do while( NEXT_SC_CURR$ ~= SC_CURR$ ); */
      634    12352
      635    12353        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:44   
      636    12354    4             IF VX_CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO;
      637    12355    4                VX_CURR$ -> VX$NODE.PATH$ = VX_CURR$ -> VX$NODE.SON$ ;
      638    12356    4                VX_CURR$ = VX_CURR$ -> VX$NODE.SON$;
      639    12357    4                END;
      640    12358    4             ELSE DO;
      641    12359    5                DO WHILE(  VX_CURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );
      642    12360    5                   VX_CURR$ = VX_CURR$ -> VX$NODE.FATHER$;
      643    12361    5                   IF VX_CURR$ = ADDR(NIL) THEN GOTO EXIT1;
      644    12362    5                   END;
      645    12363    4   EXIT1:       ;
      646    12364    5                IF VX_CURR$ ~= ADDR(NIL) THEN DO;
      647    12365    5                   VX_CURR$ = VX_CURR$ -> VX$NODE.BROTHER$;
      648    12366    5                   VX_CURR$ -> VX$NODE.FATHER$ -> VX$NODE.PATH$ = VX_CURR$;
      649    12367    5                   END;
      650    12368    4                END;                       /* Else do; */
      651    12369    3             END;                          /* Do while( VX_CURR$ ~= addr(nil) ); */
      652    12370    2          END;                             /* Do i = START_TIMES to 1; */
      653    12371
      654    12372
      655    12373
      656    12374        /*E*  ERROR: VXT-E$SC_ALIGN_VX-0
      657    12375              MESSAGE: Odd and non-odd  alignment requested for common/external
      658    12376                       section %U1.  Forced to non-odd.
      659    12377              DESCRIPTION: Self-explanatory.
      660    12378        */
      661    12379        /*E*  ERROR: VXT-E$SC_INIT_VX-0
      662    12380              MESSAGE: Multiple initialization values for common/external
      663    12381                       section %U1.  Will initialize with %U2.
      664    12382              DESCRIPTION: Self-explanatory.
      665    12383        */
      666    12384
      667    12385
      668    12386
      669    12387
      670    12388        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:45   
      671    12389    1   DO_ALLOCATION:
      672    12390    2       IF PROMOTE_SIZE > 0 THEN DO;
      673    12391    2          CALL VXF$FREE( 5/*@ED_DS_1*/, PROMOTE_SIZE, 1 );
      674    12392    2          END;
      675    12393    1       BLK_COM$ = ADDR(NIL);
      676    12394    1       BLK_CHAIN$ = ADDR(NIL);
      677    12395    1       INTERNAL_ALL_BLK_COM = '0'B/*@FALSE_B*/;
      678    12396    1       IF VX_CHK_BLANK_COM_PROMOTE AND VX_NODE_NUMBER > 0 AND
      679    12397    2               VX_BLK_COM_COUNT > 0 THEN DO;
      680    12398    2          BLK_COUNT = 0;
      681    12399    3          DO WHILE( '1'B );
      682    12400    3             BLK_COM$ = VX_SC_BLANK_COM_PROMOTE$;
      683    12401    4             DO WHILE( '1'B );
      684    12402    5                IF BLK_COM$ -> VX$NODE.ALL_BLK_COM THEN DO;
      685    12403    5                   BLK_COUNT = BLK_COUNT + 1;
      686    12404    5                   BLK_COM$ -> VX$NODE.ALL_BLK_COM = '0'B/*@FALSE_B*/;
      687    12405    5                   END;          /* If BLK_COM$ -> VX$NODE.ALL_BLK_COM then do; */
      688    12406    5                IF BLK_COM$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO;
             12406                         /* Move to eldest son */
      689    12407    5                   BLK_COM$ = BLK_COM$ -> VX$NODE.SON$;
      690    12408    5                   END;
      691    12409    5                ELSE DO;
      692    12410    5                   IF BLK_COM$ = VX_SC_BLANK_COM_PROMOTE$ THEN
      693    12411    5                      GOTO BLANK_COMMON_PROMOTE_CLIMB_UP;
      694    12412    6                   DO WHILE( BLK_COM$ -> VX$NODE.FATHER$ = ADDR(NIL) );
      695    12413    6                      IF BLK_COM$ = VX_SC_BLANK_COM_PROMOTE$ THEN
      696    12414    6                         GOTO BLANK_COMMON_PROMOTE_CLIMB_UP;
      697    12415                                                /* Move to an ancestor */
      698    12416    6                      BLK_COM$ = BLK_COM$ -> VX$NODE.FATHER$; /* Move up */
      699    12417    6                      END;
      700    12418    5                   BLK_COM$ = BLK_COM$ -> VX$NODE.BROTHER$; /* Move to a brother */
      701    12419    5                   END;                    /* Else do */
      702    12420    4                END;                       /* Do forever */
      703    12421    3   BLANK_COMMON_PROMOTE_CLIMB_UP:
      704    12422    3             IF VX_SC_BLANK_COM_PROMOTE$ = VX_ROOT$
      705    12423    3                     OR BLK_COUNT >= VX_BLK_COM_COUNT THEN GOTO AT_ROOT;
      706    12424    3             VX_SC_BLANK_COM_PROMOTE$ = VX_SC_BLANK_COM_PROMOTE$ -> VX$NODE.FATHER$;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:46   
      707    12425    3             END;                          /* Do forever */
      708    12426
      709    12427    2   AT_ROOT:
      710    12428    2          VX_SC_BLANK_COM_PROMOTE$ -> VX$NODE.ALL_BLK_COM = '1'B/*@TRUE_B*/;
      711    12429    2          VX_SC_BLANK_COM_PROMOTE$ -> VX$NODE.BLANK_COMMON$ -> VX$SC =
             12429                   VX_SC_BLANK_COMMON;
      712    12430    2          END;         /* If VX_CHK_BLANK_COM_PROMOTE and VX_NODE_NUMBER > 0 ... */
      713    12431
      714    12432        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:47   
      715    12433    2       DO I = 0/*@DATA*/ TO 1/*@PROC*/;
      716    12434    3          IF I = 1 THEN DO;                /* Moving from data to procedure */
      717    12435    3             ADR = MAX_EADR(0/*@DATA*/);
      718    12436    3             PAGE_ADR = ( ADR + 1023/*@PAGE_SIZE1*/ ) / 1024/*@PAGE_SIZE*/ * 1024
             12436                      /*@PAGE_SIZE*/;
      719    12437    3             IF MOD( ADR, 1024/*@PAGE_SIZE*/ ) = 0 THEN PAGE_ADR = PAGE_ADR + 1024
             12437                      /*@PAGE_SIZE*/;
      720    12438    4             IF VX_O.NUM.PBIAS >= 0 THEN DO;
      721    12439    5                IF VX_O.NUM.PBIAS < PAGE_ADR THEN DO; /* Oops */
      722    12440        /*E*  ERROR: VXT-E$ALL_X_BOUNDARY_VX-0
      723    12441              MESSAGE: Explicit procedure boundary %U1 is within data area.
      724    12442                       %U2 used.
      725    12443              DESCRIPTION: Self-explanatory.
      726    12444        */
      727    12445                        %NUMBER( NUM1="VX_O.NUM.PBIAS",BASE1=8, NUM2=PAGE_ADR, BASE2=8);
      728    12462                        %SCREAM( ERR#=E$ALL_X_BOUNDARY_VX, LEVEL=E$S_VX, MID="'T'" );
      729    12465    5                   END;
      730    12466    4                ELSE PAGE_ADR = VX_O.NUM.PBIAS;
      731    12467    4                END;                       /* If VX_O.OPT.PBIAS >= 0 */
      732    12468    3             MAX_EADR(1/*@PROC*/) = PAGE_ADR - 1;
      733    12469    3             MAX_BADR(1/*@PROC*/) = PAGE_ADR;
      734    12470    3             VX_PROGRAM_BIAS.A(1/*@PROC*/) = MAX_BADR(1/*@PROC*/);
      735    12471    3             ADR = PAGE_ADR + VX_BIAS.A(1/*@PROC*/);
      736    12472        /*
      737    12473                                  Allocate bref space
      738    12474        */
      739    12475    3             IF VX_O.NUM.BREF > 0
      740    12476    3                     AND
      741    12477    4                     VX_NODE_NUMBER > 0 THEN DO;
      742    12478    4                VX_BREF_ADR = ADR;
      743    12479    4                ADR = ADR + VX_O.NUM.BREF * SIZEW(VX$BREF);
      744    12480    4                END;     /* If VX_O.NUM.BREF > 0 and VX_NODE_NUMBER > 0 then do; */
      745    12481    3             END;                          /* If i = 1 then do; */
      746    12482    2          CURR$ = VX_ROOT$;
      747    12483
      748    12484    3          DO WHILE( CURR$ ~= ADDR(NIL) );
      749    12485    3             CURR$ -> VX$NODE.ADDR_START_A(I) = ADR; /* Set address start */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:48   
      750    12486    3             NODE#    = CURR$ -> VX$NODE.NUM;
      751    12487    4             IF I = 0/*@DATA*/ THEN DO;
      752    12488    4                NEXT_SC_CURR$ = CURR$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$;
      753    12489    4                K = 384;
      754    12490    4                END;                       /* If i = @DATA then do; */
      755    12491    4             ELSE DO;
      756    12492    4                NEXT_SC_CURR$ = CURR$ -> VX$NODE.L_SC_START.SC_DCB$;
      757    12493    4                K = 256;
      758    12494    4                END;                       /* else do; */
      759    12495    3             SC_CURR$      = ADDR(NIL);
      760    12496    4             DO WHILE( NEXT_SC_CURR$ ~= SC_CURR$ );
      761    12497    4                SC_CURR$ = NEXT_SC_CURR$;
      762    12498    4                IF I > 0/*@DATA*/
      763    12499    5                THEN DO;
      764    12500    5                   IF SC_CURR$ -> VX$SC.ATTR.ALL
      765    12501    6                   THEN DO;
      766    12502    6                      HEAD$ = PINCRW (VX_SC_START$, SC_CURR$ -> VX$SC.ADDRESS);
      767    12503    6                      SC_CURR$ -> VX$SC.SIZE = HEAD$ -> VX$SC.SIZE;
      768    12504    6                      SC_CURR$ -> VX$SC.ADDRESS = HEAD$ -> VX$SC.ADDRESS;
      769    12505    6                      SC_CURR$ -> VX$SC.SEG = HEAD$ -> VX$SC.SEG;
      770    12506    6                      GOTO ALLOCED;
      771    12507    6                      END;
      772    12508    6                   ELSE DO;
      773    12509    6                      HEAD$ = SC_CURR$;
      774    12510    6                      TAIL$ = PINCRW (VX_SC_START$, HEAD$ -> VX$SC.COM_LINK);
      775    12511    7                      DO WHILE (HEAD$ ~= TAIL$);
      776    12512    7                         IF PINCRW (SC_NAME$, SC_CURR$-> VX$SC.NAME_DISP) ->
      777    12513    7                                 B$DNAME.TEXT =
      778    12514    7                                 PINCRW (SC_NAME$, TAIL$ -> VX$SC.NAME_DISP) ->
      779    12515    7                                 B$DNAME.TEXT
      780    12516    8                         THEN DO;
      781    12517    8                            TAIL$ -> VX$SC.ATTR.ALL = '1'B;
      782    12518    8                            TAIL$ -> VX$SC.ADDRESS = POFFW (SC_CURR$, VX_SC_START$);
      783    12519    8                            IF TAIL$ -> VX$SC.SIZE > SC_CURR$ -> VX$SC.SIZE
      784    12520    8                            THEN SC_CURR$ -> VX$SC.SIZE = TAIL$ -> VX$SC.SIZE;
      785    12521    8                            END;
      786    12522    7                         HEAD$ = TAIL$;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:49   
      787    12523    7                         TAIL$ = PINCRW (VX_SC_START$, HEAD$ -> VX$SC.COM_LINK);
      788    12524    7                         END;
      789    12525    6                      END;
      790    12526    5                   END;
      791    12527    4                IF SC_CURR$ -> VX$SC.ATTR.SEGMENT THEN CALL ALOC_SEG;
      792    12528    5                ELSE DO;
      793    12529    5                   ALIGN = SC_CURR$ -> VX$SC.ATTR.ALIGN;
      794    12530                        %ALIGN;
      795    12539    5                   SC_CURR$ -> VX$SC.ADDRESS = ADR;
      796    12540    5                   ADR = ADR + SC_CURR$ -> VX$SC.SIZE;
      797    12541    5                   END;
      798    12542    4                PINCRW( VX_SC_START$, SC_CURR$ -> VX$SC.NODE# ) -> VX$SC.ATTR =
             12542                         SC_CURR$ -> VX$SC.ATTR;
      799    12543    4   ALLOCED:
      800    12544    4                SC_CURR$ -> VX$SC.NODE# = NODE#;
      801    12545    4                NEXT_SC_CURR$ = PINCRW( VX_SC_START$, SC_CURR$ -> VX$SC.COM_LINK );
      802    12546    4                END;                   /* Do while( NEXT_SC_CURR$ ~= SC_CURR$ ); */
      803    12547    3             SC_CURR$ = CURR$ -> VX$NODE.L_START.SC$; /* Get start of sections */
      804    12548    3             SC_STOP$ = CURR$ -> VX$NODE.L_STOP.SC$; /* Get stop of sections */
      805    12549    3             SC_NAME$ = CURR$ -> VX$NODE.L_START.DN$;
      806    12550    4             DO WHILE ( SC_CURR$ <= SC_STOP$ ); /* Now do sections */
      807    12551    4                SC_TYPE = SC_CURR$ -> VX$SC.TYPE; /* Get section type */
      808    12552    5                DO CASE( I );
      809    12553        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:50   
      810    12554    5                CASE( 0/*@DATA*/ );  /*Looking only for sections which map into data */
      811    12555    6                  DO CASE( SC_TYPE );
      812    12556    6                  CASE( 0 );
      813    12557    6                    IF SC_CURR$ -> VX$SC.ATTR.SEGMENT
      814    12558    7                    THEN DO;
      815    12559    7                       K = 384;
      816    12560    7                       CALL ALOC_SEG;
      817    12561    7                       GOTO CHECK_EMPTY_SC;
      818    12562    7                       END;
      819    12563    6                  CASE( 2 );
      820    12564    7                    IF BLK_COM$ ~= ADDR(NIL) THEN DO;
      821    12565    7                       SC_CURR$ -> VX$SC.ADDRESS = BLK_COM$ -> VX$SC.ADDRESS;
      822    12566    7                       SC_CURR$ -> VX$SC.NODE# = BLK_COM$ -> VX$SC.NODE#;
      823    12567    7                       SC_CURR$ -> VX$SC.ATTR.INT = 0;
      824    12568    7                       END;
      825    12569    7                    ELSE DO;
      826    12570    8                       IF BLK_CHAIN$ = ADDR(NIL) THEN DO;
      827    12571    8                          BLK_CHAIN$ = SC_CURR$;
      828    12572    8                          BLK_CHAIN$ -> VX$SC.COM_LINK = 0;
      829    12573    8                          END;
      830    12574    8                       ELSE DO;
      831    12575    8                          BLK_TAIL$ -> VX$SC.COM_LINK = POFFW( SC_CURR$, BLK_TAIL$ );
      832    12576    8                          END;             /* Else do; */
      833    12577    7                       BLK_TAIL$ = SC_CURR$;
      834    12578    7                       END;                /* Else do; */
      835    12579    6                    GOTO BUMP_SC_CURR;
      836    12580    6                  CASE( 4, 3 );
      837    12581    6                    NEXT_SC_CURR$ = PINCRW( VX_SC_START$,
      838    12582    6                            SC_CURR$ -> VX$SC.COM_LINK );
      839    12583    6                    SC_CURR$ -> VX$SC.ADDRESS = NEXT_SC_CURR$ -> VX$SC.ADDRESS;
      840    12584    6                    SC_CURR$ -> VX$SC.NODE# = NEXT_SC_CURR$ -> VX$SC.NODE#;
      841    12585    6                    SC_CURR$ -> VX$SC.SIZE = NEXT_SC_CURR$ -> VX$SC.SIZE;
      842    12586    6                    GOTO CHECK_EMPTY_SC;
      843    12587        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:51   
      844    12588        /*
      845    12589              Dcbs
      846    12590        */
      847    12591    6                  CASE( 5 );
      848    12592    6                    SEQ_MATCH$ = PINCRW( SC_NAME$, SC_CURR$ -> VX$SC.NAME_DISP );
      849    12593    6                    SC_CURR$ -> VX$SC.NODE# = 0;
      850    12594    6                    SC_CURR$ -> VX$SC.ATTR.INT = 0;
      851    12595    6                    SC_CURR$ -> VX$SC.ATTR.ALL     = '1'B/*@TRUE_B*/;
      852    12596    6                    SC_CURR$ -> VX$SC.ATTR.PRE_DCB = '0'B/*@FALSE_B*/;
      853    12597                         %SEQ_SEARCH(
      854    12598                         START$ = VX_PRE_DCB_START$,
      855    12599                         STOP$ = VX_PRE_DCB_STOP$,
      856    12600                         NAME$ = VX_PRE_DCB_NAME$,
      857    12601                         MATCH$ = SEQ_MATCH$,
      858    12602                         TEMP$ = SEQ_TEMP$,
      859    12603                         STR=VX$SC,
      860    12604                         STRREF="VX$SC.NAME_DISP",
      861    12605                         DO_CASE=" ",
      862    12606                         CASE_TYPE=" ",
      863    12607                         DO_END=" ",
      864    12608                         NEG=%@COMMENT,
      865    12609                         GEN=%@TNEMMOC,
      866    12610                         EMPTY = NOT_PREDEFINED_DCB,
      867    12611                         FOUND=FOUND_PREDEFINED_DCB);
      868    12626    6   NOT_PREDEFINED_DCB:
      869    12627        /* Here => not found */
      870    12628                         %SEQ_SEARCH(
      871    12629                         START$ = VX_DCB_START$,
      872    12630                         STOP$ = VX_DCB_STOP$,
      873    12631                         NAME$ = DN_ROOT_START$,
      874    12632                         MATCH$ = SEQ_MATCH$,
      875    12633                         TEMP$ = SEQ_TEMP$,
      876    12634                         STR=VX$SC,
      877    12635                         STRREF="VX$SC.NAME_DISP",
      878    12636                         DO_CASE=" ",
      879    12637                         CASE_TYPE=" ",
      880    12638                         DO_END=" ",
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:52   
      881    12639                         NEG=%@COMMENT,
      882    12640                         GEN=%@TNEMMOC,
      883    12641                         EMPTY = INSERT_DCB,
      884    12642                         FOUND = FOUND_DCB_IN_LIST );
      885    12657    6   INSERT_DCB:
      886    12658    6                    USER = '1'B/*@TRUE_B*/;
      887    12659    7                    DO WHILE( '0'B );
      888    12660    7   FOUND_PREDEFINED_DCB:
      889    12661    7                       SC_CURR$ -> VX$SC.SIZE = 0;
      890    12662    7                       SC_CURR$ -> VX$SC.ADDRESS = 99999;
      891    12663    7                       SC_CURR$ -> VX$SC.ATTR.ALL = '0'B/*@FALSE_B*/;
      892    12664    7                       SC_CURR$ -> VX$SC.ATTR.PRE_DCB = '1'B/*@TRUE_B*/;
      893    12665    7                       L = POFFW( SEQ_TEMP$, VX_PRE_DCB_START$ ) /SIZEW( VX$SC );
      894    12666    7                       IF VX_PRE_DCB_GOT(L) THEN GOTO BUMP_SC_CURR;
      895    12667    7                       VX_PRE_DCB_GOT(L) = '1'B/*@TRUE_B*/;
      896    12668    7                       SC_CURR$ -> VX$SC.NODE# = SEQ_TEMP$ -> VX$SC.NODE#;
      897    12669    7                       USER = '0'B/*@FALSE_B*/;
      898    12670    7                       END;                /* Do never */
      899    12671    7                    IF SIZE_AVAIL < SIZEW( VX$SC ) THEN DO;
      900    12672                            %ALLOCATE( PTR$=DUMMY$, TYPE=@SC_DS_1, SIZE=GET );
      901    12679    7                       SIZE_AVAIL = SIZE_AVAIL + GET;
      902    12680    7                       END;
      903    12681    6                    NEXT_FORCED_ROOT$ -> VX$SC = SC_CURR$ -> VX$SC;
      904    12682    7                    IF VX_DCB_START$ = ADDR(NIL) THEN DO;
      905    12683    7                       VX_DCB_START$      = NEXT_FORCED_ROOT$;
      906    12684    7                       VX_DCB_STOP$       = NEXT_FORCED_ROOT$;
      907    12685    7                       END;
      908    12686    7                    ELSE DO;
      909    12687    7                       VX_DCB_STOP$      = PINCRW( VX_DCB_STOP$,      SIZEW( VX$SC ) );
      910    12688    7                       END;
      911    12689    6                    F_NAME_SIZEW = ( SEQ_MATCH$ -> B$DNAME.COUNT + 4/*@CHAR_WORD*/ + 1
             12689                             ) / 4/*@CHAR_WORD*/;
      912    12690    7                    IF SIZE_AVAIL_NAME < F_NAME_SIZEW THEN DO;
      913    12691                            %ALLOCATE( PTR$=DUMMY$, TYPE=@DN_DS_1, SIZE=GET_NAME );
      914    12698    7                       SIZE_AVAIL_NAME = SIZE_AVAIL_NAME + GET_NAME;
      915    12699    7                       END;
      916    12700    6                    NEXT_FORCED_ROOT_NAME$ -> B$DNAME.COUNT = SEQ_MATCH$ -> B$DNAME.
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:53   
             12700                             COUNT;
      917    12701    6                    NEXT_FORCED_ROOT_NAME$ -> B$DNAME.TEXT = SEQ_MATCH$ -> B$DNAME.TEXT
             12701                             ;
      918    12702    6                    NEXT_FORCED_ROOT$ -> VX$SC    = SC_CURR$ -> VX$SC;
      919    12703    6                    NEXT_FORCED_ROOT$ -> VX$SC.NAME_DISP = POFFW(
             12703                             NEXT_FORCED_ROOT_NAME$,
      920    12704    6                            DN_ROOT_START$ );
      921    12705    6                    NEXT_FORCED_ROOT$ -> VX$SC.COM_LINK = POFFW( SC_CURR$,
      922    12706    6                            SC_START$ );
      923    12707    6                    NEXT_FORCED_ROOT_NAME$ = PINCRW( NEXT_FORCED_ROOT_NAME$,
             12707                             F_NAME_SIZEW );
      924    12708    6                    SIZE_AVAIL_NAME = SIZE_AVAIL_NAME - F_NAME_SIZEW;
      925    12709    7                    IF USER THEN DO;       /* A user dcb */
      926    12710    7                       VX_RU_HEAD.UDCBNUM = VX_RU_HEAD.UDCBNUM + 1;
      927    12711    7                       NEXT_FORCED_ROOT$ -> VX$SC.NODE# = VX_DCB_USER_NEXT;
      928    12712    7                       VX_DCB_USER_NEXT = VX_DCB_USER_NEXT + 1;
      929    12713    7                       IF MOD( DCB_ADR, 2 ) = 1 THEN DCB_ADR = DCB_ADR + 1;
      930    12714    7                       NEXT_FORCED_ROOT$ -> VX$SC.ADDRESS = DCB_ADR;
      931    12715    7                       TEXTC_SIZEW =
      932    12716                                    %TEXTC_SIZEW( CNT="SEQ_MATCH$   -> B$DNAME.COUNT");
      933    12719    7                       ;
      934    12720    7                       NEXT_FORCED_ROOT$ -> VX$SC.SIZE = VX_DCB_SIZEW + TEXTC_SIZEW;
      935    12721    7                       DCB_ADR = DCB_ADR + NEXT_FORCED_ROOT$ -> VX$SC.SIZE;
      936    12722    7                       SC_CURR$ -> VX$SC.NODE# = POFFW( NEXT_FORCED_ROOT$,
      937    12723    7                               SC_START$ );
      938    12724    7                       END;                /* Else do - if user then do; */
      939    12725    6                    NEXT_FORCED_ROOT$ = PINCRW( NEXT_FORCED_ROOT$, SIZEW( VX$SC ) );
      940    12726    6                    SIZE_AVAIL = SIZE_AVAIL - SIZEW( VX$SC );
      941    12727    6                    DCB_INSERT = DCB_INSERT + 1;
      942    12728    6                    VX_ROOT_DN_INC = VX_ROOT_DN_INC + F_NAME_SIZEW;
      943    12729    7                    DO WHILE( '0'B );
      944    12730    7   FOUND_DCB_IN_LIST:
      945    12731    7                       SC_CURR$ -> VX$SC.NODE# = POFFW( SEQ_TEMP$, SC_START$ );
      946    12732    7                       END;                /* Do never */
      947    12733    7                    IF VX_DCB_HEAD$ = ADDR(NIL) THEN DO;
      948    12734    7                       VX_DCB_HEAD$ = SC_CURR$;
      949    12735    7                       END;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:54   
      950    12736    7                    ELSE DO;
      951    12737    7                       VX_DCB_TAIL$ -> VX$SC.COM_LINK = POFFW( SC_CURR$, SC_START$ );
      952    12738    7                       END;
      953    12739    6                    VX_DCB_TAIL$ = SC_CURR$;
      954    12740    6                    GOTO BUMP_SC_CURR;
      955    12741    6                  CASE( 1 , 8 , 7 , 6 );
      956    12742    6                    GOTO BUMP_SC_CURR;
      957    12743    6                  CASE( ELSE );
      958    12744    6   BAD_SC_TYPE:
      959    12745        /*E*  ERROR: VXO-E$SC_BAD_TYPE_VX-0
      960    12746              MESSAGE: Illegal type value in sections. Type = %U1.
      961    12747              DESCRIPTION: Self-explanatory.
      962    12748        */
      963    12749                         %NUMBER( NUM1=SC_TYPE );
      964    12766                         %SCREAM( ERR#=E$SC_BAD_TYPE_VX, LEVEL=@E$F_VX, MID="'T'" );
      965    12769    6                  END;                     /* Do case( SC_TYPE ); */
      966    12770        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:55   
      967    12771    5                CASE( 1/*@PROC*/ );
      968    12772    6                  DO CASE( SC_TYPE );
             12772                           /* Looking only for sections which map into procedure */
      969    12773    6                  CASE( 1 );
      970    12774    6                  CASE( 6 );
      971    12775    6                    IF SC_CURR$ -> VX$SC.ATTR.SEGMENT
      972    12776    7                    THEN DO;
      973    12777    7                       K = 256;
      974    12778    7                       CALL ALOC_SEG;
      975    12779    7                       GOTO CHECK_EMPTY_SC;
      976    12780    7                       END;
      977    12781    6                  CASE(ELSE);
      978    12782    6                    GOTO BUMP_SC_CURR;
      979    12783    6                  END;                     /* Do case( @SC_TYPE ); */
      980    12784    5                END;                       /* Do case( i ) */
      981    12785    4   SET_ADDRESS:
      982    12786    5                IF SC_CURR$ -> VX$SC.SIZE > 0 THEN DO;
      983    12787    5                   ALIGN = SC_CURR$ -> VX$SC.ATTR.ALIGN;
      984    12788                        %ALIGN;
      985    12797    5                   END;
      986    12798    4                SC_CURR$ -> VX$SC.ADDRESS = ADR;
      987    12799    4                SC_CURR$ -> VX$SC.NODE# = NODE#;
      988    12800    4                ADR = ADR + SC_CURR$ -> VX$SC.SIZE;
      989    12801    4   CHECK_EMPTY_SC:
      990    12802    4                IF SC_CURR$ -> VX$SC.SIZE = 0
      991    12803    4                THEN SC_CURR$ -> VX$SC.EMPTY = '1'B/*@TRUE_B*/;
      992    12804    4                ELSE SC_CURR$ -> VX$SC.EMPTY = '0'B/*@FALSE_B*/;
      993    12805    4   BUMP_SC_CURR:
      994    12806    4                SC_CURR$ = PINCRW( SC_CURR$, SIZEW(VX$SC) );
      995    12807    4                END;                       /* Do while */
      996    12808
      997    12809
      998    12810    4             IF I = 0 AND CURR$ -> VX$NODE.ALL_BLK_COM THEN DO;
      999    12811    5                IF INTERNAL_ALL_BLK_COM THEN DO;
     1000    12812        /*E*  ERROR: VXT-E$MULT_BLK_COM_VX-0
     1001    12813              MESSAGE: Internal LINK error. Multiple blank common allocation along a path.
     1002    12814              DESCRIPTION: Self-explanatory.
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:56   
     1003    12815        */
     1004    12816                        %SCREAM( ERR#=E$MULT_BLK_COM_VX, LEVEL=@E$F_VX, MID="'T'" );
     1005    12819    5                   END;
     1006    12820    5                ELSE DO;
     1007    12821    5                   INTERNAL_ALL_BLK_COM = '1'B/*@TRUE_B*/;
     1008    12822    5                   END;
     1009    12823    4                BLK_COM$ = CURR$ -> VX$NODE.BLANK_COMMON$;
     1010    12824    4                ALIGN = BLK_COM$ -> VX$SC.ATTR.ALIGN;
     1011    12825                     %ALIGN;
     1012    12834    4                BLK_COM$ -> VX$SC.ADDRESS = ADR;
     1013    12835    4                ADR = ADR + BLK_COM$ -> VX$SC.SIZE;
     1014    12836    4                BLK_COM$ -> VX$SC.NODE# = NODE#;
     1015    12837    4                IF BLK_COM$ -> VX$SC.SIZE <= 0 THEN BLK_COM$ -> VX$SC.EMPTY = '1'B
             12837                         /*@TRUE_B*/;
     1016    12838
     1017    12839    4   NEXT_BLANK_CM:
     1018    12840    4                DIFF = BLK_CHAIN$ -> VX$SC.COM_LINK;
     1019    12841    4                BLK_CHAIN$ -> VX$SC.ADDRESS = BLK_COM$ -> VX$SC.ADDRESS;
     1020    12842    4                BLK_CHAIN$ -> VX$SC.NODE# = BLK_COM$ -> VX$SC.NODE#;
     1021    12843    4                BLK_CHAIN$ -> VX$SC.ATTR.INT = 0;
     1022    12844    5                IF DIFF > 0 THEN DO;
     1023    12845    5                   BLK_CHAIN$ = PINCRW( BLK_CHAIN$, DIFF );
     1024    12846    5                   GOTO NEXT_BLANK_CM;
     1025    12847    5                   END;                    /* If diff > 0 then do; */
     1026    12848
     1027    12849    4                BLK_CHAIN$ = ADDR(NIL);
     1028    12850    4                END;       /* If i = 0 and CURR$ -> VX$NODE.ALL_BLK_COM then do; */
     1029    12851
     1030    12852    4             IF CURR$ -> VX$NODE.SON$ = ADDR(NIL) THEN DO;
     1031    12853    4                IF MAX_EADR(I) < ADR - 1 THEN MAX_EADR(I)    = ADR - 1;
     1032    12854    4                END;           /* If CURR$ -> VX$NODE.SON$ = addr(nil) then do; */
     1033    12855    4             IF I = 1 THEN DO;
     1034    12856    4                IF VX_SLIB_INIT$ ~= ADDR (NIL) THEN
     1035    12857    4                   J = BITBIN('700000'O);
     1036    12858    4                ELSE
     1037    12859    4                   J = BITBIN('1000000'O);
     1038    12860    4                SK = ADR - 1;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:57   
     1039    12861    5                IF SK>= J THEN DO;
     1040    12862        /*E*  ERROR: VXT-E$OVERFLOW_IS_VX-0
     1041    12863              MESSAGE: Node %U1 (%U2) exceeds the maximum address space
     1042    12864                       allowed in the instruction segment by '%U3'O words.
     1043    12865              DESCRIPTION: Self-explanatory.
     1044    12866        */
     1045    12867    5                   VX_EFIELD2.COUNT = CURR$->VX$NODE.HEAD$->VX$LST.P.NAME_.NAME$->T$C.
             12867                            COUNT;
     1046    12868    5                   VX_EFIELD2.CHARS = CURR$->VX$NODE.HEAD$->VX$LST.P.NAME_.NAME$->T$C.
             12868                            CHARS;
     1047    12869    5                   SK = SK - J;
     1048    12870                        %NUMBER (NUM1=CURR$->VX$NODE.NUM,BASE1=8,NUM3=SK,BASE3=8);
     1049    12887                        %SCREAM (ERR#=E$OVERFLOW_IS_VX,LEVEL=@E$F_VX,MID="'T'");
     1050    12890    5                   END;                    /* If sk>= j ... */
     1051    12891    4                END;                       /* If i = 1 ... */
     1052    12892    3             CURR$ -> VX$NODE.ADDR_STOP_A(I) = ADR - 1;
             12892                      /* Set ending address for this node */
     1053    12893    4             IF CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO; /* Move to eldest son */
     1054    12894    4                CURR$ = CURR$ -> VX$NODE.SON$;
     1055    12895    4                END;
     1056    12896    4             ELSE DO;
     1057    12897    5                DO WHILE( CURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );
     1058    12898    6                   IF CURR$ -> VX$NODE.ALL_BLK_COM THEN DO;
     1059    12899    6                      BLK_COM$ = ADDR(NIL);
     1060    12900    6                      INTERNAL_ALL_BLK_COM = '0'B/*@FALSE_B*/;
     1061    12901    6                      END;
     1062    12902    5                   CURR$ = CURR$ -> VX$NODE.FATHER$; /* Move up */
     1063    12903    5                   IF CURR$ = ADDR(NIL) THEN GOTO DONE; /* Check if done */
     1064    12904    5                   END;      /* Do while( CURR$ -> VX$NODE.BROTHER$ = addr(nil) */
     1065    12905    4                CURR$ = CURR$ -> VX$NODE.BROTHER$; /* Move to a brother */
     1066    12906    4                END;                       /* Else do; */
     1067    12907    3             ADR = CURR$ -> VX$NODE.FATHER$ -> VX$NODE.ADDR_STOP_A(I) + 1;
             12907                      /* Set current address from this node's father */
     1068    12908    3             END;                          /* Do while( CURR$ ~= addr(nil) */
     1069    12909    2   DONE:
     1070    12910    2          END;                             /* Do i = @DATA to @PROC */
     1071    12911        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:58   
     1072    12912    1   ALOC_SEG: PROC;
     1073    12913    2       SEGMENT = SC_CURR$ -> VX$SC.SEG;
     1074    12914    2       VX_SEG_PROC_TYPE(SEGMENT) = K;
     1075    12915    3       IF SC_CURR$ -> VX$SC.SIZE > 0 THEN DO;
     1076    12916    3          ALIGN = SC_CURR$ -> VX$SC.ATTR.ALIGN;
     1077    12917               %ALIGN( ADR="VX_SEG_SIZE(SEGMENT)" );
     1078    12926    3          END;
     1079    12927    2       SC_CURR$ -> VX$SC.ADDRESS = VX_SEG_SIZE(SEGMENT);
     1080    12928    2       VX_SEG_SIZE(SEGMENT) = VX_SEG_SIZE(SEGMENT) + SC_CURR$ -> VX$SC.SIZE;
     1081    12929    2   END ALOC_SEG;
     1082    12930        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:59   
     1083    12931    1       IF SIZE_AVAIL > 0 THEN CALL VXF$FREE( 7/*@SC_DS_1*/, SIZE_AVAIL, 1);
     1084    12932    1       IF SIZE_AVAIL_NAME > 0 THEN CALL VXF$FREE( 4/*@DN_DS_1*/, SIZE_AVAIL_NAME, 1 );
     1085    12933    2       IF VX_OD.VECTOR_.DATA THEN DO;
     1086    12934    2          ADR = MAX_EADR(0/*@DATA*/) + 1;
     1087    12935    3          IF ADR > VX_O.VECTOR_.DATA THEN DO;
     1088    12936        /*E* ERROR: VXT-E$VECTOR_DATA_EXCEEDED-C
     1089    12937             MESSAGE: Size of shared library data exceeds the maximum allowed.
     1090    12938                      Maximum = %U1.  Allocation = %U2.
     1091    12939        */
     1092    12940                  %NUMBER( NUM1="VX_O.VECTOR_.DATA", NUM2=ADR );
     1093    12957                  %SCREAM( ERR#=E$VECTOR_DATA_EXCEEDED, LEVEL=@E$F_VX, MID="'T'" );
     1094    12960    3             END;
     1095    12961    3          IF VX_O.VECTOR_.DATA > ADR THEN DO;
     1096    12962    3             UNUSED$->VX$SC.ADDRESS = ADR;
     1097    12963    3             IF MOD(ADR,2) = 0 THEN
     1098    12964    3                UNUSED$->VX$SC.ATTR.ALIGN = 0;
     1099    12965    3             ELSE
     1100    12966    3                UNUSED$->VX$SC.ATTR.ALIGN = 1;
     1101    12967    3             UNUSED$->VX$SC.EMPTY = '0'B/*@FALSE_B*/;
     1102    12968    3             UNUSED$->VX$SC.SIZE = VX_O.VECTOR_.DATA - ADR;
     1103    12969    3             MAX_EADR(0/*@DATA*/) = VX_O.VECTOR_.DATA - 1;
     1104    12970    3             VX_ROOT$->VX$NODE.ADDR_STOP.RDATA = MAX_EADR(0/*@DATA*/);
     1105    12971    3             VX_ROOT$->VX$NODE.L_STOP.SC$ = UNUSED$;
     1106    12972    3             VX_ROOT$->VX$NODE.L_SIZE.SC = VX_ROOT$->VX$NODE.L_SIZE.SC + SIZEW(VX$SC);
     1107    12973    3             END;
     1108    12974    2          END;
     1109    12975        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:60   
     1110    12976    1       VX_RU_HEAD.UDCBNUM = VX_DCB_USER_NEXT - 10/*@DCB_NUM_START*/;
     1111    12977    2       IF VX_RU_HEAD.UDCBNUM > 0 AND NOT VX_ROS_ALLOWED THEN DO;
     1112    12978        /*E*  ERROR: VXT-E$USER_DCB_SYSTEM_VX-0
     1113    12979              MESSAGE: User DCBs encountered but read only segment generation inhibited.
     1114    12980              DESCRIPTION: Self-explanatory.
     1115    12981        */
     1116    12982               %SCREAM( ERR#=E$USER_DCB_SYSTEM_VX, LEVEL=@E$F_VX, MID="'T'" );
     1117    12985    2          END;                             /* If VX_RU_HEAD >0 and ... */
     1118    12986    1       VX_RU_HEAD.DCBRES = VX_O.NUM.DCBSLOTS;
     1119    12987    1       INC = VX_RU_HEAD.UDCBNUM + VX_O.NUM.DCBSLOTS;
     1120    12988    2       IF INC > 0 THEN DO;
     1121    12989    3          IF VX_DCB_START$ ~= ADDR(NIL) THEN DO;
     1122    12990    3             IF MOD(INC,2) > 0 THEN INC = INC + 1; /* In case odd # of user dcbs */
     1123    12991    3             DCB_CURR$ = VX_DCB_START$;
     1124    12992    4             DO WHILE( DCB_CURR$ <= VX_DCB_STOP$ );
     1125    12993    4                IF NOT DCB_CURR$ -> VX$SC.ATTR.PRE_DCB THEN
     1126    12994    4                   DCB_CURR$ -> VX$SC.ADDRESS = DCB_CURR$ -> VX$SC.ADDRESS + INC;
     1127    12995    4                DCB_CURR$ = PINCRW( DCB_CURR$, SIZEW( VX$SC ) );
     1128    12996    4                END;
     1129    12997    3             DCB_CURR$ = VX_DCB_HEAD$;
     1130    12998    3   NEXT_FULL_DCB:
     1131    12999    4             IF DCB_CURR$ -> VX$SC.ATTR.ALL THEN DO;
     1132    13000    4                Q$ = PINCRW( SC_START$, DCB_CURR$ -> VX$SC.NODE# );
     1133    13001    4                DCB_CURR$ -> VX$SC.NODE# = Q$ -> VX$SC.NODE#;
     1134    13002    4                DCB_CURR$ -> VX$SC.ADDRESS = Q$ -> VX$SC.ADDRESS;
     1135    13003    4                DCB_CURR$ -> VX$SC.SIZE = Q$ -> VX$SC.SIZE;
     1136    13004    4                END;
     1137    13005    3             IF DCB_CURR$ -> VX$SC.COM_LINK = 0 THEN GOTO NEXT_FULL_DONE;
     1138    13006    3             DCB_CURR$ = PINCRW( SC_START$, DCB_CURR$ -> VX$SC.COM_LINK );
     1139    13007    3             GOTO NEXT_FULL_DCB;
     1140    13008    3   NEXT_FULL_DONE:
     1141    13009    3             END;
     1142    13010    2          END;
     1143    13011
     1144    13012
     1145    13013        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:61   
     1146    13014    1       VX_HAVE_SPC = VX_HAVE_SPC + DCB_INSERT;
     1147    13015    2       IF VX_HAVE_SPC > 0 THEN DO;
     1148    13016    2          I = VX_HAVE_SPC * SIZEW( VXD$TMPLT) ;
     1149    13017               %ALLOCATE( PTR$=VX_MERGE_START$, TYPE=@SC_DS_1, SIZE=I );
     1150    13024    2          I = VX_ROOT_DN_INC+10;
     1151    13025               %ALLOCATE( PTR$=NEXT_FORCED_ROOT_NAME$, TYPE=@DN_DS_1, SIZE=I );
     1152    13032    2          NEXT_FORCED_ROOT_NAME$ = PINCRW( NEXT_FORCED_ROOT_NAME$, 10 );
     1153    13033    2          END;
     1154    13034    1       VX_MERGE_STOP$ = VX_MERGE_START$;
     1155    13035    2       IF VX_DCB_START$ ~= ADDR(NIL) THEN DO;
     1156    13036    2          VX_RU_HEAD.MAP_BITS_A.CON(1) = '1'B/*@TRUE_B*/;
     1157    13037    2          DCB_CURR$ = VX_DCB_START$;
     1158    13038    3          DO WHILE( DCB_CURR$ <= VX_DCB_STOP$ );
     1159    13039    3             VX_MERGE_STOP$ -> VXD$TMPLT = '0'B;
     1160    13040    3             VX_MERGE_STOP$ -> VXD$TMPLT.CONSTNT = '1'B/*@TRUE_B*/;
     1161    13041    3             VX_MERGE_STOP$ -> VXD$TMPLT.LFLAGS.IS_DCB = '1'B/*@TRUE_B*/;
     1162    13042    3             VX_MERGE_STOP$ -> VXD$TMPLT.VALUE = DCB_CURR$ -> VX$SC.NODE#;
     1163    13043    3             VX_MERGE_STOP$ -> VXD$TMPLT.NPOINTER = DCB_CURR$ -> VX$SC.NAME_DISP;
     1164    13044    3             VX_MERGE_STOP$ = PINCRW( VX_MERGE_STOP$, SIZEW(VXD$TMPLT) );
     1165    13045    3             DCB_CURR$ = PINCRW( DCB_CURR$, SIZEW( VX$SC ) );
     1166    13046    3             END;                      /* Do while( DCB_CURR$ <= VX_DCB_STOP$ ); */
     1167    13047    2          END;                         /* If VX_DCB_START$ ~= addr(nil) then do; */
     1168    13048    2       DO I = 0 TO SIZEW( VX_SPC.B$.NAME_A$) - 1;
     1169    13049    2          IF VX_SPC.B$.SKIP_A(I) ~= 1/*@YES*/
     1170    13050    2                  AND
     1171    13051    3                  VX_SPC.B$.MINE_A(I) = 1/*@YES*/ THEN DO;
     1172    13052    4             IF I ~= 1 THEN DO;
     1173    13053    4                VX_MERGE_STOP$ -> VXD$TMPLT = '0'B;
     1174    13054    4                VX_MERGE_STOP$ -> VXD$TMPLT.AD.LFLAGS.DEFINED = '1'B/*@TRUE_B*/;
     1175    13055    4                VX_MERGE_STOP$ -> VXD$TMPLT.AD.OFFSET = VX_PROGRAM_BIAS.I.RPROC +
             13055                         VX_SPC.B$.VALUE_A(I);
     1176    13056    4                VX_MERGE_STOP$ -> VXD$TMPLT.PROTECTION.TYPE = 1;
     1177    13057    4                VX_MERGE_STOP$ -> VXD$TMPLT.NPOINTER =
     1178    13058    4                        POFFW( NEXT_FORCED_ROOT_NAME$, DN_ROOT_START$ );
     1179    13059    4                P$ = VX_SPC.B$.NAME_A$(I);
     1180    13060    4                J = P$ -> B$DNAME.COUNT;
     1181    13061    4                NEXT_FORCED_ROOT_NAME$ -> B$DNAME.COUNT = J;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:62   
     1182    13062    4                NEXT_FORCED_ROOT_NAME$ -> B$DNAME.TEXT = P$ -> B$DNAME.TEXT;
     1183    13063    4                NEXT_FORCED_ROOT_NAME$ = PINCRW( NEXT_FORCED_ROOT_NAME$,
     1184    13064                             %TEXTH_SIZEW(CNT=J);
     1185    13067    4                );
     1186    13068    4                VX_MERGE_STOP$ = PINCRW( VX_MERGE_STOP$, SIZEW( VXD$TMPLT ) );
     1187    13069    4                END;                       /* If i ~= 1 then do; */
     1188    13070    3             END;                          /* If VX_SPC.B$.SKIP_A(I) ~= ... */
     1189    13071    2          END;                             /* Do i = 0 to SIZEW... */
     1190    13072    2       IF VX_MERGE_STOP$ ~= ADDR(NIL) THEN DO;
     1191    13073    2          VX_MERGE_STOP$ = PINCRW( VX_MERGE_STOP$, - SIZEW( VXD$TMPLT ) );
     1192    13074    2          CALL VXQ$SORT( DN_ROOT_START$,
     1193    13075    2                  VX_MERGE_START$,
     1194    13076    2                  VX_MERGE_STOP$,
     1195    13077    2                  SIZEW( VXD$TMPLT ),
     1196    13078    2                  1/*@BY_NAME*/,
     1197    13079    2                  2,
     1198    13080    2                  0         );
     1199    13081    2          END;
     1200    13082
     1201    13083
     1202    13084        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:63   
     1203    13085    1       MAX_BADR(2/*@ROS*/) = 0;
     1204    13086    1       VX_PROGRAM_BIAS.A( 2/*@ROS*/ ) =0;
     1205    13087    1       DCB_ADR = DCB_ADR + INC;
     1206    13088    1       IF VX_OD.SIN.SYSTEM AND VX_OD.NUM.BREF
     1207    13089    1       THEN VX_ROS_ALLOWED = '1'B;
     1208    13090    2       IF VX_ROS_ALLOWED THEN DO;
     1209    13091        /* Set tree address start */
     1210    13092    2          VX_TREE_ADR = DCB_ADR;
     1211    13093        /* Now account for tree table */
     1212    13094    2          DCB_ADR = DCB_ADR
     1213    13095    2                  +
     1214    13096    2                  SIZEW( VX$TREE_HEADER )
     1215    13097    2                  +
     1216    13098    2                  SIZEW( VX$TREE_NODE) * ( VX_NODE_NUMBER + 1 )
     1217    13099    2                  +
     1218    13100    2                  VX_TREE_NAME_POOL
     1219    13101    2                  +
     1220    13102    2                  VX_TREE_SLIB_NAME;
     1221    13103    2          END;                             /* If VX_ROS_ALLOWED then do; */
     1222    13104    1       MAX_EADR(2/*@ROS*/) = DCB_ADR       - 1;
     1223    13105    1       VX_ROOT$ -> VX$NODE.ADDR_START.RDATA = MAX_BADR(0/*@DATA*/);
     1224    13106    1       VX_ROOT$ -> VX$NODE.ADDR_START.RPROC = MAX_BADR(1/*@PROC*/);
     1225    13107    1       VX_ROOT$ -> VX$NODE.ADDR_START.ROS = MAX_BADR(2/*@ROS*/);
     1226    13108    1       VX_ROOT$ -> VX$NODE.ADDR_STOP.ROS  = MAX_EADR(2/*@ROS*/);
     1227    13109
     1228    13110    2       DO I = 0 TO 2/*@ROS*/;
     1229    13111    2          VX_BADR(I) = MAX_BADR(I);
     1230    13112    2          VX_EADR(I) = MAX_EADR(I);
     1231    13113    2          END;
     1232    13114
     1233    13115        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:64   
     1234    13116    1       IF VX_SLIB_INIT$ ~= ADDR(NIL)
     1235    13117    1       THEN J = BITBIN('700000'O);
     1236    13118    1       ELSE J = BITBIN('1000000'O);
     1237    13119    1       SK = MAX_EADR(1/*@PROC*/);
     1238    13120    1       IF SK < MAX_EADR(0/*@DATA*/) THEN SK = MAX_EADR(0/*@DATA*/);
     1239    13121    2       IF SK >= J THEN DO;
     1240    13122        /*E*  ERROR: VXT-E$OUT_OF_IS_VX-0
     1241    13123              MESSAGE: Virtual address space exhausted in instruction segment.
     1242    13124                       Maximum = %U1.  Allocation = %U2.
     1243    13125              DESCRIPTION: Self-explanatory.
     1244    13126        */
     1245    13127               %NUMBER( NUM1=J, BASE1=8, NUM2=K, BASE2=8 );
     1246    13144               %SCREAM( ERR#=E$OUT_OF_IS_VX, LEVEL=@E$F_VX, MID="'T'" );
     1247    13147    2          END;                             /* If sk >= j then do; */
     1248    13148    1       SK = MAX_EADR(2/*@ROS*/);
     1249    13149    2       IF SK >= BITBIN('34000'O) THEN DO;
     1250    13150        /*E*  ERROR: VXT-E$OUT_OF_ROS_VX-0
     1251    13151              MESSAGE: Virtual address space exhausted in read only segment.
     1252    13152                       Maximum = 34000.  Allocation = %U1.
     1253    13153              DESCRIPTION: Self-explanatory.
     1254    13154        */
     1255    13155               %NUMBER( NUM1=K, BASE1=8 );
     1256    13172               %SCREAM( ERR#=E$OUT_OF_ROS_VX, LEVEL=@E$F_VX, MID="'T'" );
     1257    13175    2          END;                             /* If sk >= BITBIN('34000'O) then do; */
     1258    13176    1       VX_RU_HEAD.VDPGS = ( MAX_BADR( 1/*@PROC*/ ) - MAX_BADR( 0/*@DATA*/ ) + 1023
             13176                /*@PAGE_SIZE1*/ ) / 1024/*@PAGE_SIZE*/;
     1259    13177    1       VX_RU_HEAD.VPPGS    = ( MAX_EADR( 1/*@PROC*/ ) - MAX_BADR( 1/*@PROC*/ ) + 1024
             13177                /*@PAGE_SIZE*/ ) / 1024/*@PAGE_SIZE*/;
     1260    13178    1       VX_RU_HEAD.ROSIZE = MAX_EADR( 2/*@ROS*/ ) - MAX_BADR( 2/*@ROS*/ ) + 1;
     1261    13179    1       VX_RU_HEAD.RDATA    = VX_ROOT$ -> VX$NODE.ADDR_STOP.RDATA - VX_ROOT$ -> VX$NODE.
             13179                ADDR_START.RDATA + 1;
     1262    13180    1       VX_RU_HEAD.RPROC    = VX_ROOT$ -> VX$NODE.ADDR_STOP.RPROC - VX_ROOT$ -> VX$NODE.
             13180                ADDR_START.RPROC + 1;
     1263    13181    1       VX_RU_HEAD.BIAS     = VX_PROGRAM_BIAS.I.DATA;
     1264    13182    1       J = BITBIN('1000000'O);
     1265    13183    2       DO I = 0 TO 5;
     1266    13184    3          IF VX_SEG_SIZE(I) > J THEN DO;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:65   
     1267    13185        /*E*  ERROR: VXT-E$OUT_OF_DS_VX-0
     1268    13186              MESSAGE: Virtual address space exhausted in data segment %U1.
     1269    13187                       Maximum = %U2.  Allocation = %U3.
     1270    13188              DESCRIPTION: Self-explanatory.
     1271    13189        */
     1272    13190    3             K = I + 3;
     1273    13191                  %NUMBER( NUM1=K, NUM2=J, NUM3="VX_SEG_SIZE(I)" );
     1274    13208                  %SCREAM( ERR#=E$OUT_OF_DS_VX, LEVEL=@E$F_VX, MID="'T'" );
     1275    13211    3             END;
     1276    13212    2          VX_RU_HEAD.DATA_SEG.SIZ(I) = VX_SEG_SIZE(I);
     1277    13213    2          VX_RU_HEAD.DATA_SEG.PROTECTION(I) = VX_SEG_PROC_TYPE(I);
     1278    13214    2          END;
     1279    13215    1       VX_RU_HEAD.TREEDISP = VX_TREE_ADR;
     1280    13216
     1281    13217
     1282    13218        %EJECT ;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:66   
     1283    13219    1   PROMOTE_SELECT: PROC ( I ) ;
     1284    13220
     1285    13221    2   DCL 1 I UBIN PARAM ;
     1286    13222
     1287    13223    2       VX_CURR$ = VX_ROOT$;
     1288    13224    2   TRAV:
     1289    13225    3       DO  WHILE  ( '1'B  ) ;              /* Traverse tree */
     1290    13226    3          CURR_NODE# = VX_CURR$ -> VX$NODE.NUM;
     1291    13227    3          CURR_DEPTH = VX_CURR$ -> VX$NODE.DEPTH;
     1292    13228    3          IF VX_CURR$ -> VX$NODE.L_START.DN$ ~= ADDR(NIL) THEN
     1293    13229    3             CURR_NAME_DISP = POFFW( VX_CURR$ -> VX$NODE.L_START.DN$, DN_ROOT_START$ );
     1294    13230    3          ELSE
     1295    13231    3             CURR_NAME_DISP = 0 ;
     1296    13232
     1297    13233    4          DO CASE( I );
     1298    13234    4          CASE ( 2 ) ;
     1299    13235    4            NEXT_SC_CURR$ = VX_CURR$ ->VX$NODE.L_SC_START.SC_BLK_COM$;
     1300    13236    4          CASE ( 3 ) ;
     1301    13237    4            NEXT_SC_CURR$ = VX_CURR$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$ ;
     1302    13238    4          CASE ( 4 ) ;
     1303    13239    4            NEXT_SC_CURR$ = VX_CURR$ -> VX$NODE.L_SC_START.SC_LBL_COM$ ;
     1304    13240    4          END;                             /* Do case ( i ) */
     1305    13241
     1306    13242    3          SC_CURR$ = ADDR(NIL);
     1307    13243    4          DO  WHILE( NEXT_SC_CURR$ ~= SC_CURR$ );
     1308    13244    4             SC_CURR$ = NEXT_SC_CURR$;
     1309    13245    4             P_STOP$ -> VX$SC = SC_CURR$ -> VX$SC;
     1310    13246    4             P_STOP$ -> VX$SC.ADDRESS = POFFW( SC_CURR$, VX_SC_START$ );
     1311    13247    4             P_STOP$ -> VX$SC.EMPTY = '1'B/*@TRUE_B*/;
     1312    13248    4             J = SC_CURR$ -> VX$SC.TYPE;
     1313    13249
     1314    13250    5             IF J = 3 THEN DO;
     1315    13251    5                P_STOP$ -> VX$SC.NODE# = 0;
     1316    13252    5                P_STOP$ -> VX$SC.COM_LINK = 0;
     1317    13253    5                END;
     1318    13254    5             ELSE DO;
     1319    13255    5                P_STOP$ -> VX$SC.NODE# = CURR_NODE#;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:67   
     1320    13256    5                P_STOP$ -> VX$SC.COM_LINK = CURR_DEPTH;
     1321    13257    5                END;                       /* Else do; */
     1322    13258
     1323    13259    5             IF J = 2 THEN DO;
     1324    13260    5                P_STOP$ -> VX$SC.NAME_DISP = BLK_COM_DISP;
     1325    13261    5                END;
     1326    13262    5             ELSE DO;
     1327    13263    5                P_STOP$ -> VX$SC.NAME_DISP = SC_CURR$ -> VX$SC.NAME_DISP +
             13263                         CURR_NAME_DISP;
     1328    13264    5                END;                       /* Else do; */
     1329    13265
     1330    13266    4             P_STOP$ = PINCRW( P_STOP$, SIZEW( VX$SC ) );
     1331    13267    4             NEXT_SC_CURR$ = PINCRW( VX_SC_START$, SC_CURR$ -> VX$SC.COM_LINK );
     1332    13268    4             END;                      /* Do while( NEXT_SC_CURR$ ~= SC_CURR$ ); */
     1333    13269
     1334    13270    4          IF VX_CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO; /* Move to eldest son */
     1335    13271    4             VX_CURR$ = VX_CURR$ -> VX$NODE.SON$;
     1336    13272    4             END;
     1337    13273    4          ELSE DO;
     1338    13274                                                /* Move to an ancestor */
     1339    13275    5             DO  WHILE( VX_CURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );
     1340    13276    5                VX_CURR$ = VX_CURR$ -> VX$NODE.FATHER$; /* Move up*/
     1341    13277    5                IF VX_CURR$ = ADDR(NIL) THEN EXIT TRAV; /* Check if done */
     1342    13278    5                END;
     1343    13279    4             VX_CURR$ = VX_CURR$ -> VX$NODE.BROTHER$; /* Move to a brother */
     1344    13280    4             END;                          /* Else do; */
     1345    13281    3          END;                             /* Do forever */
     1346    13282
     1347    13283    2       RETURN ;
     1348    13284    2   END  PROMOTE_SELECT ;
     1349    13285    1   END VXT$ALL;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:68   
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXT$ALL.

   Procedure VXT$ALL requires 2795 words for executable code.
   Procedure VXT$ALL requires 138 words of local(AUTO) storage.

    No errors detected in file VXT$ALL.:E05TSI    .

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:69   

 Object Unit name= VXT$ALL                                    File name= VXT$ALL.:E05TOU
 UTS= JUL 30 '97 08:36:39.32 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2  RoData even  UTS     30     36  VXT$ALL
    3   Data  even  none     6      6  VXT$ALL
    4   Proc  even  none  2795   5353  VXT$ALL
    5  RoData even  none   119    167  VXT$ALL

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     4      0   yes            yes      Std        0  VXT$ALL

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VXF$FREE
         yes           Std       4 VXE$ERROR
         yes           Std       3 VXA$GET
         yes           Std       5 VXD$B2C
         yes           Std       7 VXQ$SORT
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:70   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_PRE_DCB_NAME$                      VX_PRE_DCB_START$
     VX_PRE_DCB_STOP$                      VX_PRE_DCB_GOT                        VX_RU_HEAD
     VX_OU_HEAD                            VX_SC_START$                          VX_SC_ROOT_LBL_COM
     VX_SC_LBL_COM                         VX_SC_BLK_COM                         VX_TREE_ADR
     VX_TREE_NAME_POOL                     VX_TREE_SLIB_NAME                     VX_NODE_NUMBER
     VX_ROOT$                              VX_CURR$                              VX_ERRORS
     VX_PROGRAM_BIAS                       VX_BIAS                               VX_M_FREE
     VX_M_ALL                              VX_M_BASE_PTR                         VX_O
     VX_OD                                 VX_EFIELD1                            VX_EFIELD2
     VX_EFIELD3                            VX_BADR                               VX_EADR
     VX_SLIB_INIT$                         VX_SLIB_MAX_DATA                      VX_NEXT_BREF$
     VX_BREF_ADR                           VX_SC_X_NODE$                         VX_DCB_USER_NEXT
     VX_DCB_HEAD$                          VX_DCB_TAIL$                          VX_DCB_START$
     VX_DCB_STOP$                          VX_MERGE_START$                       VX_MERGE_STOP$
     VX_ROOT_DN_INC                        VX_SEG_PROC_TYPE                      VX_SEG_SIZE
     VX_HAVE_SPC                           VX_SPC                                VX_ROS_ALLOWED
     VX_BLK_COM_COUNT                      VX_SC_BLANK_COM_PROMOTE$              VX_CHK_BLANK_COM_PROMOTE
     VX_SC_BLANK_COMMON                    VX_DCB_SIZEW                          B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:71   


        1        1        /*M* VXT$ALL - allocates sections.     */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DFC */
        8        8        %MACRO ALIGN (ADR = ADR);
        9        9              IF ALIGN = 1 THEN DO;             /* Odd alignment                      */
       10       10                  ADR = BITBIN( BINBIT( ADR, 36 ) | BINBIT( 1, 36 ) );
       11       11                  END;
       12       12              ELSE DO;
       13       13                  IF MODMSK (ALIGN) & BINBIT (ADR , 36)
       14       14                  THEN ADR = 1 + BITBIN (MODMSK (ALIGN) | BINBIT (ADR , 36));
       15       15                  END;
       16       16        %MEND;
       17       17        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:72   
       18       18        /*X* DMR,PLM=4,IND=3,CSU=2,EXM=0,ECU=2,MOC,DCI=2,CRT=2,CTI=8,CCC     */
       19       19
       20       20
       21       21        VXT$ALL: PROC;

     21  4 000000   000000 700200 xent  VXT$ALL      TSX0  ! X66_AUTO_0
         4 000001   000212 000000                    ZERO    138,0

       22       22
       23       23        %INCLUDE VX_INC_C;
       24    10739        %VX$NODE;

             10751    1   /*******************************************************************************
             10752    1   *                                                                              *
             10753    1   *                          VX$NODE                                                *
             10754    1   *                                                                              *
             10755    1   *******************************************************************************/

             10771    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10772    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10773    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10774    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10775    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10776    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10777                              to list of file nodes for this node            */
             10778    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10779    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10779                  /* Head pointer to shared library list */
             10780    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10780                  /* Head pointer to list of shared libraries
             10781                                          which have been mapped to included libraries */
             10782    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10783    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10784    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10785    1         2 ADDR_START REDEF  ADDR_START_A,
             10786    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             10787    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:73   
             10788    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10789    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10790    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10791    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10792    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10793    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10794    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10795    1         2 START_PAGE# REDEF START_PAGE#_A,
             10796    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10797    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10798    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10799    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10800    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10801    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10802    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10803    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10804    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10804                  /* Starting pointer for common sections for this node */
             10805    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10805                  /* Stopping pointer for common sections for this node */
             10806    1         2 L_START,
             10807    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10808    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10809    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10810    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10811    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10812    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10813    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10814    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10815    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10816    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10817    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10818    1         2 L_STOP,
             10819    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10820    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10821    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10822    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:74   
             10823    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10824    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10825    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10826    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10827    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10828    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10829    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10830    1         2 L_SIZE,
             10831    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10832    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10833    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10834    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10835    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10836    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10837    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10838    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10839    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10840    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10841    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             10842    1         2 L_PREV_SIZE,
             10843    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10844    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10845    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10846    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10847    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10848    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10849    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10850    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10851    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10852    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10853    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             10854    1         2 BIT_MAP                ALIGNED,
             10855    1           3 DATA                  ALIGNED,
             10856    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10857    1           3 RPROC                 ALIGNED,
             10858    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10859    1           3 ROS                   ALIGNED,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:75   
             10860    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10861    1         2 L_SC_START,
             10862    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10863    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10864    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10865    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10866    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             10867    1         2 L_SC_STOP,
             10868    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10869    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10870    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10871    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10872    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             10873    1         2 PROMOTE_HEAD,
             10874    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10875    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10876    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             10877    1         2 PROMOTE_TAIL,
             10878    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10879    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10880    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             10881    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             10882    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             10883    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             10884    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             10885    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       25    10889        %VX$SC;

             10902    1   /*******************************************************************************
             10903    1   *                                                                              *
             10904    1   *                          VX$SC                                                 *
             10905    1   *                                                                              *
             10906    1   *******************************************************************************/

             10911    1   DCL 1 VX$SC BASED ALIGNED,
             10912    1         2 SEG UBIN(3) UNAL,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:76   
             10913                /*K*  SEG - The segment number of this section */
             10914    1         2 TYPE UBIN(6) UNAL,
             10915                /*K*  TYPE -
             10916                      Type code      Section type
             10917                      ---------      ------------
             10918                          0          Data control section with write access.
             10919                          1          Procedure control section.
             10920                          2          Unlabeled common, name pointer must be zero.
             10921                          3          Labeled common, with mandatory name pointer.
             10922                                     This is for labeled common which must be
             10923                                     in the root.
             10924                          4          Labeled common, with mandatory name pointer.
             10925                                     This is for labeled common which need not
             10926                                     be in the root.
             10927                          5          DCB, word 1 is name pointer.
             10928                          6          Data control section with read only access,
             10929                                     word 1 = 0 or name pointer.      */
             10930    1         2 EMPTY BIT(1) UNAL,
             10931                /*K*  EMPTY is the empty bit.  This bit is set if the control
             10932                      section is of size zero.  */
             10933    1         2 ATTR UNAL,
             10934    1           3 INT  UBIN(2) UNAL,
             10935                  /*K*  INT is the Section initialization.  */
             10936    1           3 SEGMENT BIT(1) UNAL,
             10937                  /*K* SEGMENT is set if the Section is defined in a data
             10938                       segment.  */
             10939    1           3 ALL BIT(1) UNAL,
             10940                  /*K*  ALL is set if the Section is allocated.  */
             10941    1           3 PRE_DCB BIT(1) UNAL,
             10942                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             10943    1           3 MES_INIT BIT(1) UNAL,
             10944    1           3 ALIGN UBIN(2) UNAL,
             10945                  /*K*  ALIGN is the Section alignment.  */
             10946    1         2 ADDRESS UBIN HALF UNAL,
             10947                /*K*  ADDRESS is the address within the Instruction Segment of
             10948                      the entry point of the external procedure.  */
             10949    1         2 NAME_DISP SBIN HALF UNAL,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:77   
             10950                /*K*  NAME_DISP is the Name index.  */
             10951    1         2 SIZE UBIN HALF UNAL,
             10952                /*K*  SIZE is the size, in words, of the section.  */
             10953    1         2 NODE# UBIN HALF UNAL,
             10954                /*K*  NODE# is the Node number of section.  */
             10955    1         2 COM_LINK UBIN HALF UNAL;
             10956                /*K*  COM_LINK is used internally by linker to link common sections */

             10966    1   /*******************************************************************************
             10967    1   *                                                                              *
             10968    1   *                          VX$SECT                                                *
             10969    1   *                                                                              *
             10970    1   *******************************************************************************/

             10975    1   DCL 1 VX$SECT BASED ALIGNED,
             10976    1         2 TYPE UBIN BYTE UNAL,
             10977                /*K*  TYPE -
             10978                      Type code      Section type
             10979                      ---------      ------------
             10980                          0          Data control section with write access.
             10981                          1          Procedure control section.
             10982                          2          Unlabeled common, name pointer must be zero.
             10983                          3          Labeled common, with mandatory name pointer.
             10984                                     This is for labeled common which must be
             10985                                     in the root.
             10986                          4          Labeled common, with mandatory name pointer.
             10987                                     This is for labeled common which need not
             10988                                     be in the root.
             10989                          5          DCB, word 1 is name pointer.
             10990                          6          Data control section with read only access,
             10991                                     word 1 = 0 or name pointer.
             10992                          7          Constant labeled common, with mandatory name pointer.
             10993                                     This is for labeled common which must be
             10994                                     in the root.
             10995                          8          Constant labeled common, with mandatory name pointer.
             10996                                     This is for labeled common which need not
             10997                                     be in the root.                        */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:78   
             10998    1         2 * BIT(1),
             10999                /*K*  * is reserved for future use and must be zero. */
             11000    1         2 INITZERO BIT(1),
             11001                /*K*  INITZERO - if 1, initialize with zero.  */
             11002    1         2 INITUTS BIT(1),
             11003                /*K*  INITUTS - if 1, initialize with UTS.  */
             11004    1         2 SEGMENT BIT(1),
             11005                /*K*  SEGMENT - if 1, specifies that this section is
             11006                                to be placed in the segment specified by
             11007                                SEG_NPOINTER.  */
             11008    1         2 * BIT(3),
             11009                /*K*  * is reserved for future use and must be zero. */
             11010    1         2 BOUND UBIN(2) UNAL,
             11011                /*K*  BOUND - bits 6-7 - defines starting location.
             11012                              00 - starts on even word
             11013                              01 - starts on odd word
             11014                              10 - starts on multiple of 8
             11015                              11 - starts on page boundary     */
             11016    1         2 SIZE UBIN HALF UNAL,
             11017                /*K*  SIZE is the size, in words, of the section.  */
             11018    1         2 NPOINTER SBIN HALF UNAL,
             11019                /*K*  NPOINTER is the word displacement into the name record
             11020                      (TYPE 1) locating the name of this section.  If the
             11021                      field is negative, the section has no name.  */
             11022    1         2 MBZ UBIN HALF UNAL,
             11023                /*K*  MBZ is reserved for future expansion and must be zero. */
             11024    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11025                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11026                      Section.  The name must be a valid segment name
             11027                      recognized by the linker.  */
             11028    1         2 G66 REDEF MBZ,
             11029                /*K*  G66 is not used on CP-6. */
             11030    1           3 * BIT(9),
             11031    1           3 NSAB BIT(9);
       26    11034        %VX$LST;

             11047    1   /*******************************************************************************
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:79   
             11048    1   *                                                                              *
             11049    1   *                          VX$LST                                                 *
             11050    1   *                                                                              *
             11051    1   *******************************************************************************/

             11056    1   DCL 1 VX$LST                          ALIGNED BASED,
             11057    1         2 LINK$        PTR,               /* Link to next item                  */
             11058    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             11059    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             11060    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             11061    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             11062    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             11063    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             11064    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             11065    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             11066    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             11067    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             11068    1         2 P,
             11069    1           3 NAME_       ALIGNED,
             11070    1             4 BOUND      UBIN(20)  UNAL,
             11071    1             4 FLAGSV     UBIN(11)  UNAL,
             11072    1             4 *          BIT(5)    UNAL,
             11073    1             4 NAME$      PTR,
             11074    1           3 ACCT_       ALIGNED,
             11075    1             4 BOUND      UBIN(20)  UNAL,
             11076    1             4 FLAGSV     UBIN(11)  UNAL,
             11077    1             4 *          BIT(5)    UNAL,
             11078    1             4 ACCT$      PTR,
             11079    1           3 PASS_       ALIGNED,
             11080    1             4 BOUND      UBIN(20)  UNAL,
             11081    1             4 FLAGSV     UBIN(11)  UNAL,
             11082    1             4 *          BIT(5)    UNAL,
             11083    1             4 PASS$      PTR,
             11084    1           3 SN_         ALIGNED,
             11085    1             4 BOUND      UBIN(20)  UNAL,
             11086    1             4 FLAGSV     UBIN(11)  UNAL,
             11087    1             4 *          BIT(5)    UNAL,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:80   
             11088    1             4 SN$        PTR,
             11089    1           3 WSN_        ALIGNED,
             11090    1             4 BOUND      UBIN(20)  UNAL,
             11091    1             4 FLAGSV     UBIN(11)  UNAL,
             11092    1             4 *          BIT(5)    UNAL,
             11093    1             4 WSN$       PTR,
             11094    1           3 B           ALIGNED,
             11095    1             4 RES        BIT(1)    UNAL,
             11096    1             4 ASN        BIT(1)    UNAL,
             11097    1             4 ACCT       BIT(1)    UNAL,
             11098    1             4 *          BIT(33)   UNAL,
             11099    1           3 RES         CHAR(4)   ALIGNED,
             11100    1           3 ASN         UBIN(36)  ALIGNED;
       27    11103        %VXD$TMPLT;

             11116    1   /*******************************************************************************
             11117    1   *                                                                              *
             11118    1   *                          VXD$TMPLT                                              *
             11119    1   *                                                                              *
             11120    1   *******************************************************************************/

             11124        /*
             11125                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             11126                  ENTDEFs, SYMDEFs and SEGDEFs.
             11127        */
             11129    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             11130    1         2 VALUE SBIN UNAL,
             11131                /*K*  VALUE is the value if this entry is a constant.  */
             11132    1         2 AD REDEF VALUE,
             11133                /*K*  AD is the address if this entry is not constant.  */
             11134    1           3 LFLAGS UNAL,
             11135                  /*K*  LFLAGS is the field reserved for loader to flag load
             11136                        time attributes of the definition and must be zero
             11137                        in the object unit. */
             11138    1             4 SOURCE UBIN(3) UNAL,
             11139                    /*K*  SOURCE - Source of this DEF */
             11140    1             4 DEFINED BIT(1) UNAL,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:81   
             11141                    /*K*  DEFINED - Set if this DEF defined */
             11142    1             4 MULTIPLE BIT(1) UNAL,
             11143                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11144    1             4 USED BIT(1) UNAL,
             11145                    /*K*  USED - Set if this DEF is used. */
             11146    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             11147                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             11148                        than 2048 (RU).  */
             11149    1           3 SECTNUM UBIN(11) UNAL,
             11150                  /*K*  SECTNUM contains an entry number into the section
             11151                        table (TYPE 3).  */
             11152    1           3 ISADDR UBIN HALF UNAL,
             11153                  /*K*  ISADDR - Is Address (RU)  */
             11154    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             11155                  /*K*  OFFSET is the word offset from the origin of the section. */
             11156    1         2 NPOINTER SBIN HALF UNAL,
             11157                /*K*  NPOINTER is a word displacement into the name record
             11158                      (TYPE 1) locating the name (of this entry). */
             11159    1         2 CONSTNT BIT(1) UNAL,
             11160                /*K*  CONSTNT is a flag bit to determine the interpretation
             11161                      of word 0.
             11162                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11163                                    SECTNUM, and ISADDR or OFFSET.
             11164                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11165    1         2 LFLAGS UNAL,
             11166                /*K*  LFLAGS is the field reserved for loader to flag load
             11167                      time attributes and must be zero in the object unit. */
             11168    1           3 MULTIPLE BIT(1) UNAL,
             11169                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11170    1           3 USED BIT(1) UNAL,
             11171                  /*K*  USED - Set if this DEF is used. */
             11172    1           3 SOURCE UBIN(4) UNAL,
             11173                  /*K*  SOURCE - Source of this DEF */
             11174    1           3 IS_DCB BIT(1) UNAL,
             11175                  /*K* IS_DCB - Set if this is a DCB */
             11176    1           3 * BIT(10) UNAL,
             11177                  /*K*  * is reserved for future use and must be zero.  */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:82   
             11178    1         2 PROTECTION REDEF LFLAGS,
             11179                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             11180    1           3 TYPE UBIN(5) UNAL,
             11181                  /*K*  TYPE is the Protection type.  */
             11182    1           3 * UBIN(12) UNAL;
             11183                  /*K*  * is reserved for future use and must be zero.  */
       28    11198        %T$C;

             11210    1   /*******************************************************************************
             11211    1   *                                                                              *
             11212    1   *                          T$C                                                 *
             11213    1   *                                                                              *
             11214    1   *******************************************************************************/

             11219    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             11220    1         2 COUNT        UBIN( 9) UNAL,
             11221    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             11222    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             11223    1         2 COUNT        UBIN( 9) UNAL,
             11224    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       29    11227        %SET LISTMAC='1'B;
       30    11228        %SET LISTSUB='1'B;
       31    11229        %SET LISTEXP='1'B;
       32    11230        %BANNER(ARG=SUBS);
             11231        %LSET LISTDIR='0'B;

             11238    1   /*******************************************************************************
             11239    1   *                                                                              *
             11240    1   *                          SUBS                                                 *
             11241    1   *                                                                              *
             11242    1   *******************************************************************************/

       33    11246        %B$SECTIONSUBS;
             11247        %EQU DATASECTION=0 ;
             11248        %EQU CODESECTION=1 ;
             11249        %EQU UCOMSECTION=2 ;
             11250        %EQU RLCOMSECTION=3 ;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:83   
             11251        %EQU LCOMSECTION=4 ;
             11252        %EQU DCBSECTION=5 ;
             11253        %EQU ROSECTION=6 ;
             11254        %EQU RORLCOMSECTION=7 ;
             11255        %EQU ROLCOMSECTION=8 ;
             11256        %EQU EVENBOUNDSECTION=0 ;
             11257        %EQU ODDBOUNDSECTION=1 ;
             11258        %EQU EIGHTBOUNDSECTION=2 ;
             11259        %EQU PAGEBOUNDSECTION=3 ;
       34    11261        %BANNER(ARG=B$DNAME);
             11262        %LSET LISTDIR='0'B;

             11269    1   /*******************************************************************************
             11270    1   *                                                                              *
             11271    1   *                          B$DNAME                                                *
             11272    1   *                                                                              *
             11273    1   *******************************************************************************/

       35    11277        %B$DNAME( NAME=B$DNAME, STCLASS=BASED );
             11278            %LSET STR='BASED        ';
             11279            %IF
             11280                '0'B;
             11282            %ELSE;
             11283                %LSET INIT=/*;
             11284            %ENDIF;
             11285    1   DCL 1 B$DNAME BASED ALIGNED,
             11286    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             11287                /*K*  COUNT is the number of characters in the name */
             11288            %IF
             11289                '0'B;
             11292            %ELSE;
             11293    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             11294            %ENDIF;
       36    11296        %B;
             11297        %LSET LISTDIR='0'B;

             11304    1   /*******************************************************************************
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:84   
             11305    1   *                                                                              *
             11306    1   *                          BIT                                                 *
             11307    1   *                                                                              *
             11308    1   *******************************************************************************/

       37    11312    1   DCL USER            BIT(1)    ALIGNED   AUTO;
       38    11313    1   DCL INTERNAL_ALL_BLK_COM  BIT(1)    ALIGNED   AUTO;
       39    11314    1   DCL PROMOTE_LABEL         BIT(1)  ALIGNED     AUTO;
       40    11315    1   DCL PROMOTE_BLANK         BIT(1)  ALIGNED     AUTO;
       41    11316    1   DCL PROMOTED              BIT(1)  ALIGNED     AUTO;
       42    11317        %C;
             11318        %LSET LISTDIR='0'B;

             11325    1   /*******************************************************************************
             11326    1   *                                                                              *
             11327    1   *                          CHAR                                                 *
             11328    1   *                                                                              *
             11329    1   *******************************************************************************/

       43    11333    1   DCL NODE_NAME1 CHAR(32);
       44    11334    1   DCL NODE_NAME2 CHAR(32);
       45    11335        %E;
             11336        %LSET LISTDIR='0'B;

             11343    1   /*******************************************************************************
             11344    1   *                                                                              *
             11345    1   *                          ENTRY                                                 *
             11346    1   *                                                                              *
             11347    1   *******************************************************************************/

       46    11351        %ENTRIES;
             11352    1   DCL VXE$ERROR       ENTRY(4);
             11353    1   DCL VXE$ERR         ENTRY(3);
             11354    1   DCL VXE$MERC        ENTRY;
             11355    1   DCL VXE$ERRMSG      ENTRY(3);
             11356    1   DCL VXR$READ        ENTRY( 3 );
             11357    1   DCL VXW$WRITE       ENTRY( 3 );
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:85   
             11358    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11359    1   DCL VXD$B2C         ENTRY( 5 );
             11360    1   DCL VXD$C2B         ENTRY( 3 );
             11361    1   DCL VXA$GET         ENTRY( 3 );
             11362    1   DCL VXF$FREE        ENTRY( 3 );
             11363    1   DCL VXQ$SORT        ENTRY( 7 );
             11364    1   DCL VXY$YESNO       ENTRY( 1 );
       47    11366        %ENTRIES_IO;
             11367    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             11368    1   DCL VXF$CLOSE       ENTRY(3);
             11369    1   DCL VXU$PREAD       ENTRY(12);
             11370    1   DCL VXK$KEY         ENTRY(4);
             11371    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             11372    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       48    11374        %PTR;
             11375        %LSET LISTDIR='0'B;

             11382    1   /*******************************************************************************
             11383    1   *                                                                              *
             11384    1   *                          PTR                                                 *
             11385    1   *                                                                              *
             11386    1   *******************************************************************************/

       49    11390        %POINTER;
             11391    1   DCL P$         PTR       ALIGNED AUTO;
             11392    1   DCL Q$         PTR       ALIGNED AUTO;
             11393    1   DCL R$         PTR       ALIGNED AUTO;
       50    11395    1   DCL CURR$           PTR       ALIGNED   AUTO;
       51    11396    1   DCL NAME$           PTR       ALIGNED   AUTO;
       52    11397    1   DCL ICURR$          PTR       ALIGNED   AUTO;
       53    11398    1   DCL PATH_CURR$      PTR       ALIGNED   AUTO;
       54    11399    1   DCL BLK_CURR$       PTR       ALIGNED   AUTO;
       55    11400    1   DCL BLK_COM$        PTR       ALIGNED   AUTO;
       56    11401    1   DCL BLK_CHAIN$      PTR       ALIGNED   AUTO;
       57    11402    1   DCL BLK_TAIL$       PTR       ALIGNED   AUTO;
       58    11403    1   DCL PN$             PTR       ALIGNED   AUTO;
       59    11404    1   DCL QN$             PTR       ALIGNED   AUTO;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:86   
       60    11405    1   DCL PNAM$           PTR       ALIGNED   AUTO;
       61    11406    1   DCL STOP$           PTR       ALIGNED   AUTO;
       62    11407    1   DCL DCB_CURR$       PTR       ALIGNED   AUTO;
       63    11408    1   DCL SC_CURR$        PTR       ALIGNED   AUTO;
       64    11409    1   DCL SAVE_SC_CURR$   PTR       ALIGNED   AUTO;
       65    11410    1   DCL SC_START$       PTR       ALIGNED   AUTO;
       66    11411    1   DCL SC_STOP$        PTR       ALIGNED   AUTO;
       67    11412    1   DCL SC_NAME$        PTR       ALIGNED   AUTO;
       68    11413    1   DCL S_CURR$         PTR       ALIGNED   AUTO;
       69    11414    1   DCL S_SC_CURR$      PTR       ALIGNED   AUTO;
       70    11415    1   DCL S_SC_START$     PTR       ALIGNED   AUTO;
       71    11416    1   DCL S_SC_STOP$      PTR       ALIGNED   AUTO;
       72    11417    1   DCL S_SC_NAME$      PTR       ALIGNED   AUTO;
       73    11418    1   DCL NEXT_FORCED_ROOT$    PTR  ALIGNED   AUTO;
       74    11419    1   DCL NEXT_FORCED_ROOT_NAME$ PTR ALIGNED  AUTO;
       75    11420    1   DCL DN_ROOT_START$       PTR  ALIGNED   AUTO;
       76    11421    1   DCL DUMMY$               PTR  ALIGNED   AUTO;
       77    11422    1   DCL HEAD$           PTR       ALIGNED   AUTO;
       78    11423    1   DCL TAIL$           PTR       ALIGNED   AUTO;
       79    11424    1   DCL NEXT$           PTR       ALIGNED   AUTO;
       80    11425    1   DCL NEXT_SC_CURR$   PTR       ALIGNED   AUTO;
       81    11426    1   DCL WHICH$          PTR       ALIGNED   AUTO;
       82    11427
       83    11428    1   DCL BLK_COM_NAME$    PTR       ALIGNED   AUTO;
       84    11429    1   DCL P_START$         PTR       ALIGNED   AUTO;
       85    11430    1   DCL P_STOP$          PTR       ALIGNED   AUTO;
       86    11431    1   DCL R_SC$            PTR       ALIGNED   AUTO;
       87    11432    1   DCL NR_SC$           PTR       ALIGNED   AUTO;
       88    11433    1   DCL PROMOTE_NAME$    PTR       ALIGNED   AUTO;
       89    11434    1   DCL PROMOTE_NODE$    PTR       ALIGNED   AUTO;
       90    11435    1   DCL COMMON_NAME$     PTR       ALIGNED   AUTO;
       91    11436    1   DCL COMMON_NODE$     PTR       ALIGNED   AUTO;
       92    11437    1   DCL TRAV_CURR$       PTR       ALIGNED   AUTO;
       93    11438    1   DCL SC_NEXT$         PTR       ALIGNED   AUTO;
       94    11439    1   DCL UNUSED$          PTR       ALIGNED   AUTO;
       95    11440
       96    11441        %U;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:87   
             11442        %LSET LISTDIR='0'B;

             11449    1   /*******************************************************************************
             11450    1   *                                                                              *
             11451    1   *                          UBIN                                                 *
             11452    1   *                                                                              *
             11453    1   *******************************************************************************/

       97    11457        %INDEX;
             11458    1   DCL I          UBIN(36) ALIGNED AUTO;
             11459    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11460    1   DCL J          UBIN(36) ALIGNED AUTO;
             11461    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11462    1   DCL K          UBIN(36) ALIGNED AUTO;
             11463    1   DCL SK REDEF K SBIN WORD ALIGNED;
             11464    1   DCL L          UBIN(36) ALIGNED AUTO;
             11465    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       98    11467    1   DCL NODE#           UBIN(36)  ALIGNED   AUTO;
       99    11468    1   DCL BIG             UBIN(36)  ALIGNED   AUTO;
      100    11469    1   DCL REF_RTYPE       UBIN(36)  ALIGNED   AUTO;
      101    11470    1   DCL VALUE           UBIN(36)  ALIGNED   AUTO;
      102    11471    1   DCL SAVE_NAME_DISP  UBIN(36)  ALIGNED   AUTO;
      103    11472    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
      104    11473    1   DCL SC_TYPE            UBIN(36)  ALIGNED   AUTO;
      105    11474    1   DCL ADR            SBIN(36)  ALIGNED   AUTO;
      106    11475    1   DCL PAGE_ADR       UBIN(36)  ALIGNED   AUTO;
      107    11476    1   DCL DCB_ADR        UBIN(36)  ALIGNED   AUTO;
      108    11477    1   DCL INC             UBIN(36)  ALIGNED   AUTO;
      109    11478    1   DCL ALIGN           UBIN(36)  ALIGNED   AUTO;
      110    11479    1   DCL DIFF            UBIN(36)  ALIGNED   AUTO;
      111    11480    1   DCL MODMSKS(0:3)     UBIN(36)  ALIGNED   CONSTANT INIT(1,0,7,1023);
      112    11481    1   DCL MODMSK(0:3) REDEF MODMSKS BIT(36);
      113    11482    1   DCL NEW_TYPE            UBIN(36)  ALIGNED   AUTO;
      114    11483    1   DCL GET             UBIN(36)  ALIGNED   AUTO;
      115    11484    1   DCL GET_NAME             UBIN(36)  ALIGNED   AUTO;
      116    11485    1   DCL SIZE_AVAIL_NAME      UBIN(36)  ALIGNED   AUTO;
      117    11486    1   DCL SIZE_AVAIL           UBIN(36)  ALIGNED   AUTO;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:88   
      118    11487    1   DCL F_NAME_SIZEW         UBIN(36)  ALIGNED   AUTO;
      119    11488    1   DCL TEXTC_SIZEW          UBIN(36)  ALIGNED   AUTO;
      120    11489    1   DCL DCB_INSERT           UBIN(36)  ALIGNED   AUTO;
      121    11490    1   DCL START_TIMES     UBIN(36)  ALIGNED   AUTO;
      122    11491    1   DCL STOP_TIMES     UBIN(36)  ALIGNED   AUTO;
      123    11492    1   DCL INDX            UBIN(36)  ALIGNED   AUTO;
      124    11493    1   DCL INNER_INDX      UBIN(36)  ALIGNED   AUTO;
      125    11494    1   DCL DISP            UBIN(36)  ALIGNED   AUTO;
      126    11495    1   DCL SC_COM_LINK     UBIN(36)  ALIGNED   AUTO;
      127    11496
      128    11497    1   DCL BLK_COM_DISP     UBIN(36)  ALIGNED   AUTO;
      129    11498    1   DCL PROMOTE_SIZE     UBIN(36)  ALIGNED   AUTO;
      130    11499    1   DCL CURR_NODE#       UBIN(36)  ALIGNED   AUTO;
      131    11500    1   DCL CURR_DEPTH       UBIN(36)  ALIGNED   AUTO;
      132    11501    1   DCL CURR_NAME_DISP   UBIN(36)  ALIGNED   AUTO;
      133    11502    1   DCL PROMOTE_ADDRESS  UBIN(36)  ALIGNED   AUTO;
      134    11503    1   DCL PROMOTE_DEPTH    UBIN(36)  ALIGNED   AUTO;
      135    11504    1   DCL PROMOTE_NODE#    UBIN(36)  ALIGNED   AUTO;
      136    11505    1   DCL COMMON_ADDRESS   UBIN(36)  ALIGNED   AUTO;
      137    11506    1   DCL COMMON_DEPTH     UBIN(36)  ALIGNED   AUTO;
      138    11507    1   DCL COMMON_NODE#     UBIN(36)  ALIGNED   AUTO;
      139    11508    1   DCL BLK_COUNT          UBIN(36)  ALIGNED   AUTO;
      140    11509    1   DCL SEGMENT            UBIN(36)  ALIGNED   AUTO;
      141    11510
      142    11511        %SEQ_SEARCH_VARS(
      143    11512                   START$ = SEQ_START$,
      144    11513                   STOP$  = SEQ_STOP$,
      145    11514                   NAME$ = SEQ_NAME$);
             11515    1   DCL SEQ_START$                    PTR  ALIGNED   AUTO;
             11516    1   DCL SEQ_STOP$                     PTR  ALIGNED   AUTO;
             11517    1   DCL SEQ_NAME$                     PTR  ALIGNED   AUTO;
      146    11519        %SEQ_SEARCH_TEMPS(
      147    11520                   TEMP$ = SEQ_TEMP$,
      148    11521                   MATCH$=SEQ_MATCH$);
             11522    1   DCL SEQ_TEMP$                     PTR  ALIGNED   AUTO;
             11523    1   DCL SEQ_MATCH$                    PTR  ALIGNED   AUTO;
      149    11525    1   DCL ABOVE_INIT       UBIN(36)  ALIGNED   AUTO;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:89   
      150    11526    1   DCL ABOVE_ALIGN      UBIN(36)  ALIGNED   AUTO;
      151    11527    1   DCL ABOVE_PREC       UBIN(36)  ALIGNED   AUTO;
      152    11528    1   DCL BELOW_INIT       UBIN(36)  ALIGNED   AUTO;
      153    11529    1   DCL BELOW_ALIGN      UBIN(36)  ALIGNED   AUTO;
      154    11530    1   DCL BELOW_PREC       UBIN(36)  ALIGNED   AUTO;
      155    11531    1   DCL BELOW_TEMP$      PTR       ALIGNED   AUTO;
      156    11532
      157    11533        %B$TREE_TABLE(HDR_NAME=VX$TREE_HEADER,NODE_NAME=VX$TREE_NODE);
             11534    1   DCL 1 VX$TREE_HEADER BASED ALIGNED,
             11535              /*K*  HDR_NAME is the Tree table header.  */
             11536    1         2 NODES UBIN HALF UNAL,
             11537                /*K*  NODES is the number of nodes in the tree table.  */
             11538    1         2 SIZE UBIN HALF UNAL,
             11539                /*K*  SIZE is the total word size of the tree table
             11540                      (HDR + NODES + TEST pool).   */
             11541    1         2 LIB$ PTR,
             11542                /*K*  LIB$ is the pointer to the name of the shared library
             11543                      currently associated.  */
             11544    1         2 PRECSIZE UBIN HALF UNAL,
             11545                /*K*  PRECSIZE  is the maximum program record size in the
             11546                      Run Unit (from the Head record).  */
             11547    1         2 MAX_LIB_DATA UBIN HALF UNAL;
             11548                /*K*  MAX_LIB_DATA is the maximum reserved in the program
             11549                      image for the shared library data.  */
             11550    1   DCL 1 VX$TREE_NODE BASED ALIGNED,
             11551              /*K*  NODE_NAME is the node specification.  */
             11552    1         2 NAME$ PTR,
             11553                /*K*  NAME$ is the pointer to the name of the node.  */
             11554    1         2 FLGS,
             11555                /*K*  FLGS are control flags used by M$OLAY.  */
             11556    1           3 NOW_IN BIT(1) UNAL,
             11557                  /*K*  NOW_IN is set if this node is now in memory.  */
             11558    1           3 WAS_IN BIT(1) UNAL,
             11559                  /*K*  WAS_IN is set if this node was in memory.  */
             11560    1           3 * BIT(7) UNAL,
             11561                  /*K*  * is reserved for future use and must be zero.  */
             11562    1         2 AFLGS,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:90   
             11563                /*K*  AFLGS are access flags.  */
             11564    1           3 * BIT(6) UNAL,
             11565                  /*K*  * is reserved for future use and must be zero.  */
             11566    1           3 NOPATH BIT(1) UNAL,
             11567                  /*K*  NOPATH is set if this node is independently loaded
             11568                        (no backward path).  */
             11569    1           3 ENTER BIT(1) UNAL,
             11570                  /*K*  ENTER is set if ENTRY$ is valid.  */
             11571    1           3 CANCEL BIT(1) UNAL,
             11572                  /*K*  CANCEL is set if the overlay was removed by
             11573                        "CANCEL=YES".   */
             11574    1         2 BACK# SBIN HALF UNAL,
             11575                /*K*  BACK# is the backward link (parent).  */
             11576    1         2 FORWARD# SBIN HALF UNAL,
             11577                /*K*  FORWARD# is the forward link (daughter).  */
             11578    1         2 OVERLAY# SBIN HALF UNAL,
             11579                /*K*  OVERLAY# is the overlay link (same level).   */
             11580    1         2 PADDR UBIN HALF UNAL,
             11581                /*K*  PADDR is the address of procedure.  */
             11582    1         2 PSIZE UBIN HALF UNAL,
             11583                /*K*  PSIZE is the size of procedure.  */
             11584    1         2 DADDR UBIN HALF UNAL,
             11585                /*K*  DADDR is the address of data.  */
             11586    1         2 DSIZE UBIN HALF UNAL,
             11587                /*K*  DSIZE is the size of data.  */
             11588    1         2 ENTRY$ EPTR;
             11589                /*K*  ENTRY$ is the overlay entry point (see ENTER).  */
      158    11591        %B$HEAD;
             11592    1   DCL 1 B$HEAD BASED ALIGNED,
             11593    1         2 PRIV BIT(36),
             11594                /*K*  PRIV is a 36 bit field containing privilege flags.  */
             11595    1         2 VPPGS UBIN(14) UNAL,
             11596                /*K*  VPPGS is the number of virtual pages of procedure
             11597                      required for the longest overlay path.
             11598                      (256 words/page if FEP, 1024 words/page if Host)  */
             11599    1         2 * UBIN(2) UNAL,
             11600                /*K*  * is reserved for future use and must be zero.  */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:91   
             11601    1         2 RPROC UBIN(20) UNAL,
             11602                /*K*  RPROC is the size, in words, of the procedure for the root.  */
             11603    1         2 VDPGS UBIN(14) UNAL,
             11604                /*K*  VDPGS is the number of virtual pages of data required
             11605                      for the longest overlay path.
             11606                      (256 words/page if FEP, 1024 words/page if Host)
             11607                      This includes both library and user defined data.
             11608                       */
             11609    1         2 * UBIN(2) UNAL,
             11610                /*K*  * is reserved for future use and must be zero.  */
             11611    1         2 RDATA UBIN(20) UNAL,
             11612                /*K*  RDATA is the size, in words of the data for the root.
             11613                      This includes both library and user defined data.
             11614                      If this is a host run unit, all data records will be
             11615                      included in the run unit.
             11616                      If this is a FEP run unit,
             11617                      no library data will be included in the run unit itself.
             11618                      The ISADDR field of B$RUKEY for the first user data record
             11619                      may be determined by calculating the FEP word address of
             11620                      B$HEAD.BIAS rounded to the next lower 2048 FEP word boundry.
             11621                      (2048 FEP words is the maximum size of run unit records
             11622                      for FEP run units.)  The data in this record below
             11623                      BIAS will be padded with zeros.
             11624                      The word size of data contained in the FEP run unit
             11625                      may be calculated by subtracting the ISADDR value as
             11626                      calculated for the first data record from the word
             11627                      address of the last word of user data.  The last
             11628                      word of user data is the sum of the default FPRG
             11629                      bias (%GM_ISR1_BASE - EQU is in file GM_LCP6_E) and
             11630                      the total data size (B$HEAD.RDATA).
             11631                      */
             11632    1         2 SEV UBIN BYTE UNAL,
             11633                /*K*  SEV is the maximum severity level of the object units
             11634                      making up the run unit.  */
             11635    1         2 * UBIN(7) UNAL,
             11636                /*K*  * is reserved for future use and must be zero.  */
             11637    1         2 START UBIN(20) UNAL,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:92   
             11638                /*K*  START is the address within the instruction segment at
             11639                      which execution will start.  */
             11640    1         2 UDCBNUM UBIN HALF UNAL,
             11641                /*K*  UDCBNUM is the number of DCBs in the Read-Only segment
             11642                      as generated by LINK.   */
             11643    1         2 DCBRES UBIN HALF UNAL,
             11644                /*K*  DCBRES is the number of pointers to DCBs as supplied by
             11645                      LINK.   */
             11646    1         2 TREEDISP UBIN HALF UNAL,
             11647                /*K*  TREEDISP is the displacement in words from the start of
             11648                      the variable portion of the Read-Only Segment locating
             11649                      the tree table.   */
             11650    1         2 TCBSIZE UBIN HALF UNAL,
             11651                /*K*  TCBSIZE specifies the number of frames of the Task Control Block;
             11652                      if the size is 0, then a two frame Task Control Block will be
             11653                      built by STEP.   */
             11654    1         2 PRECSIZE UBIN HALF UNAL,
             11655                /*K*  PRECSIZ is the maximum size of any program record
             11656                      in the run unit; words if Host, double words if FEP.
             11657                      */
             11658    1         2 NRECSIZE UBIN HALF UNAL,
             11659                /*K*  NRECSIZ is the maximum size of External Name records in
             11660                      the run unit.   */
             11661    1         2 EPRECSIZE UBIN HALF UNAL,
             11662                /*K*  EPRECSIZE is the maximum size of External Procedure
             11663                      Definition Records in the run unit.   */
             11664    1         2 EDRECSIZE UBIN HALF UNAL,
             11665                /*K*  EDRECSIZE is the maximum size of External Data Definition
             11666                      Records in the run unit.    */
             11667    1         2 SDRECSIZE UBIN HALF UNAL,
             11668                /*K*  SDRECSIZE is the maximum size of External Segment
             11669                      Definition Records in the run unit.   */
             11670    1         2 ROSIZE UBIN HALF UNAL,
             11671                /*K*  ROSIZE is the size of the Read Only Segment Record.  */
             11672    1         2 VERSION# UBIN BYTE UNAL,
             11673                /*K*  VERSION# is the LINK version number.  */
             11674    1         2 MAP_BITS_A(0:2) UNAL,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:93   
             11675                /*K*  MAP_BITS_A are used by the linker to produce MAP.  */
             11676    1           3 MULTIPLE BIT(1) UNAL,
             11677                  /*K*  MULTIPLE is set if a multiply defined symbol exists.  */
             11678    1           3 CON BIT(1) UNAL,
             11679                  /*K*  CON is set if a Constant symbol is defined.  */
             11680    1           3 PRIMARY BIT(1) UNAL,
             11681                  /*K*  PRIMARY is set if an unresolved primary reference exists.  */
             11682    1           3 SECONDARY BIT(1) UNAL,
             11683                  /*K*  SECONDARY is set if an unresolved secondary reference
             11684                        exists.  */
             11685    1         2 SECTABLESIZE UBIN(8) UNAL,
             11686                /*K*  SECTABLESIZE is the size in words of the record which
             11687                      contains the start location and size of all sections
             11688                      (for BIAS by OU for FEP)   */
             11689    1         2 NSTDINVOC BIT(1) UNAL,
             11690                /*K*  NSTDINVOC indicates that the RU will can tolerate invoking
             11691                      in nonstandard form.   */
             11692    1         2 REMOVE_ENTDEF BIT(1) UNAL,
             11693                /*K*  REMOVE_ENTDEF is set if ENTDEFs not in the transfer
             11694                      vector have been removed from the shared library.  */
             11695    1         2 REMOVE_SYMDEF BIT(1) UNAL,
             11696                /*K*  REMOVE_SYMDEF is set if SYMDEFs not in the transfer
             11697                      vector have been removed from the shared library.  */
             11698    1         2 STATS BIT(1) UNAL,
             11699                /*K*  STATS is set if Statistics are being collected on
             11700                      this processor.  */
             11701    1         2 LAUTO BIT(1) UNAL,
             11702                /*K*  LAUTO is set for a Fep run unit if user auto is to be in
             11703                a small segment, thereby freeing up a large one for other purposes. */
             11704    1         2 * BIT(2) UNAL,
             11705                /*K*  * is reserved for future use and must be zero.  */
             11706    1         2 DATA_SEG (0:5),
             11707                /*K*  DATA_SEG defines the initialized data segment in the RU.  */
             11708    1           3 SIZ UBIN HALF UNAL,
             11709                  /*K* SIZ is the word size of the initialized data segment.  */
             11710    1           3 * UBIN(9) UNAL,
             11711                  /*K*  * is reserved for future use and must be zero.  */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:94   
             11712    1           3 PROTECTION UBIN(9) UNAL,
             11713                  /*K*  PROTECTION is the initialized data segment
             11714                        protection.   */
             11715    1         2 LOCK(0:71) BIT(1) UNAL,
             11716                /*K*  LOCK is the Lock for restricted processor.  */
             11717    1         2 FLAVOR UBIN BYTE UNAL,
             11718                /*K*  FLAVOR is the flavor of the run unit.  The RU_FLAVORS
             11719                      macro gives the legal values for FLAVOR.  */
             11720    1         2 S BIT(1) UNAL,
             11721                /*K*  S - S = 1 if the run unit is Shareable  */
             11722    1         2 LIB BIT(1) UNAL,
             11723                /*K*  LIB - LIB = 1 if the run unit is a Shared Library  */
             11724    1         2 ASL BIT(1) UNAL,
             11725                /*K*  ASL - ASL = 1 if the run unit is an Alternate Shared
             11726                      Library.   */
             11727    1         2 CMDPROC BIT(1) UNAL,
             11728                /*K*  CMDPROC - CMDPROC = 1 is the run unit is a Command Processor. */
             11729    1         2 DEBUGGER BIT(1) UNAL,
             11730                /*K*  DEBUGGER - DEBUGGER = 1 if the run unit is a Debugger. */
             11731    1         2 OVRL BIT(1) UNAL,
             11732                /*K*  OVRL -  OVRL = 1 if the run unit is overlaid.   */
             11733    1         2 PROCACC BIT(1) UNAL,
             11734                /*K*  PROCACC - If PROCACC = 1,  if the run unit resides in
             11735                      :SYS, it should be charged as processor, not user.  */
             11736    1         2 NOCHGPMEM BIT(1) UNAL,
             11737                /*K*  NOCHGPMEM - If NOCHGPMEM = 1, if the run unit resides in
             11738                      :SYS, the user should not be charged for procedures.  */
             11739    1         2 PROCSURCHG BIT(1) UNAL,
             11740                /*K*  PROCSURCHG - If PROCSURCHG = 1, Surcharge accountings
             11741                      should be applied.  */
             11742    1         2 RESTPROC BIT(1) UNAL,
             11743                /*K*  RESTPROC - If RESTPROC = 1, this is a restricted
             11744                      processor and should be verified against the user's key.  */
             11745    1         2 STRONG_LOCK BIT(1) UNAL,
             11746                /*K*  STRONG_LOCK - If STRONG_LOCK = 1, the restricted
             11747                      processor has a strong lock.  If STRONG_LOCK = 0, the
             11748                      restricted processor has a weak lock.   */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:95   
             11749    1         2 * UBIN(16) UNAL,
             11750                /*K*  * is reserved for future use and must be zero. */
             11751    1         2 PSEUDO_COUNT UBIN BYTE UNAL,
             11752                /*K*  PSEUDO_COUNT - If PSEUDO_COUNT > 0, then a pseudo resource
             11753                      is required to execute this run-unit.  */
             11754    1         2 * UBIN(7) UNAL,
             11755                /*K*  * is reserved for future use and must be zero.  */
             11756    1         2 BIAS UBIN(20) UNAL,
             11757                /*K*  BIAS is the address within the instruction segment of
             11758                      the beginning of the root data.  */
             11759    1         2 PSEUDO_TEXT CHAR(8),
             11760                /*K*  PSEUDO_TEXT - contains the text of the pseudo resource
             11761                      to acquire when the run-unit is executed.  */
             11762    1         2 * (0:1) UBIN WORD UNAL,
             11763                /*K*  * is reserved for future use and must be zero.  */
             11764    1         2 LIBNAME,
             11765                /*K* LIBNAME gives the name, if any, of the shared library to
             11766                     be associated.  Each name resides in a fixed 8-word field.
             11767                     The first byte contains the character count of the name
             11768                     followed by the name itself.   */
             11769    1           3 CNT UBIN BYTE UNAL,
             11770                  /*K* CNT contains the character count of the name of the
             11771                       shared library.  */
             11772    1           3 TXT CHAR(31) UNAL,
             11773                  /*K*  TXT contains the name itself of the shared library.  */
             11774    1         2 ASLNAME,
             11775                /*K*  ASLNAME gives the name, if any, of the alternate shared
             11776                      library to be associated.  Each name resides in a fixed
             11777                      8-word field.  The first byte contains the character
             11778                      count of the name followed by the name itself.   */
             11779    1           3 CNT UBIN BYTE UNAL,
             11780                  /*K*  CNT contains the character count of the name of
             11781                        the alternate shared library.  */
             11782    1           3 TXT CHAR(31) UNAL;
             11783                  /*K*  TXT contains the name itself of the alternate
             11784                        shared library.  */
             11785        %IF '1'B;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:96   
             11786        /* %EQU's for data segment protection type */
             11787        %EQU DS_READONLY#=256;
             11788        %EQU DS_READWRITE#=384;
             11789        %ENDIF;
      159    11791
      160    11792
      161    11793
      162    11794    1   DCL PREC(0:3)       UBIN(36)  ALIGNED   CONSTANT  INIT(
      163    11795        /*         None uts  zero undefined */
      164    11796    1              0,   5, 10,   0    );
      165    11797    1   DCL ALIGN_PREC(0:3) UBIN(36)  ALIGNED   CONSTANT  INIT(
      166    11798        /*         Even odd  eight     page */
      167    11799    1              2,   1,   3,        4    );
      168    11800    1   DCL INIT_COUNT(0:3) UBIN(36)  ALIGNED   CONSTANT  INIT(
      169    11801    1              1,   1,   3,   1);
      170    11802    1   DCL INIT_CHARS(0:3) CHAR(4)   ALIGNED   CONSTANT  INIT(
      171    11803    1         /* 0*/     '?',
      172    11804    1         /* 1*/     '0',
      173    11805    1         /* 2*/     'UTS',
      174    11806    1         /* 3*/     '?');
      175    11807    1   DCL 1 BLANK_COMMON ALIGNED CONSTANT,
      176    11808    1         2 COUNT UBIN(36) UNAL INIT(14),
      177    11809    1         2 CHARS CHAR(14) UNAL INIT('<BLANK COMMON>');
      178    11810    1   DCL 1 UNUSED_DATA ALIGNED CONSTANT,
      179    11811    1         2 COUNT UBIN HALF UNAL INIT(11),
      180    11812    1         2 TEXT CHAR(0) INIT('Unused data');
      181    11813        %S;
             11814        %LSET LISTDIR='0'B;

             11821    1   /*******************************************************************************
             11822    1   *                                                                              *
             11823    1   *                          SBIN                                                 *
             11824    1   *                                                                              *
             11825    1   *******************************************************************************/

      182    11829    1   DCL MAX_BADR(0:2/*@ROS*/)     SBIN WORD ALIGNED   STATIC    INIT(0*0);
      183    11830    1   DCL MAX_EADR(0:2/*@ROS*/)     SBIN WORD ALIGNED   STATIC    INIT(-1*0);
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:97   
      184    11831
      185    11832
      186    11833
      187    11834        %VX$BREF;
             11835    1   DCL 1 VX$BREF                    ALIGNED     BASED (VX_NEXT_BREF$),
             11836    1         2 WORD_A(0:1)       UBIN(36)  ALIGNED,
             11837    1         2 I  REDEF     WORD_A         ALIGNED,
             11838    1           3 WORD0            UBIN(36)  ALIGNED,
             11839    1           3 WORD1            UBIN(36)  ALIGNED;
      188    11841        %VX$PTR$;
             11842    1   DCL VX$PTR$(0:0)         PTR  ALIGNED   BASED( VX_SC_X_NODE$ );
             11843                                      /* Section allocated NODE# to node pointer map  */
      189    11845        %PLIST;
      190    11846        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:98   
      191    11847        /*                  Release the segments used for def's in pass 1
      192    11848        */
      193    11849    1       IF VX_M_ALL( 5/*@ED_DS_1*/ ) > 0 THEN

  11849  4 000002   000005 235000 xsym               LDA     VX_M_ALL+5
         4 000003   000010 604400 4                  TMOZ    s:11852

      194    11850    1          CALL VXF$FREE( 5/*@ED_DS_1*/, VX_M_FREE( 5/*@ED_DS_1*/ ), 1 );

  11850  4 000004   000000 630400 5                  EPPR0   0
         4 000005   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 000006   000000 701000 xent               TSX1    VXF$FREE
         4 000007   000000 011000                    NOP     0

      195    11851
      196    11852    1       IF VX_M_ALL( 6/*@DD_DS_1*/ ) > 0 THEN

  11852  4 000010   000006 235000 xsym               LDA     VX_M_ALL+6
         4 000011   000016 604400 4                  TMOZ    s:11855

      197    11853    1          CALL VXF$FREE( 6/*@DD_DS_1*/, VX_M_FREE( 6/*@DD_DS_1*/ ), 1 );

  11853  4 000012   000003 630400 5                  EPPR0   3
         4 000013   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 000014   000000 701000 xent               TSX1    VXF$FREE
         4 000015   000000 011000                    NOP     0

      198    11854
      199    11855    1       IF VX_M_ALL( 3/*@SD_DS_1*/ ) > 0 THEN

  11855  4 000016   000003 235000 xsym               LDA     VX_M_ALL+3
         4 000017   000024 604400 4                  TMOZ    s:11858

      200    11856    1          CALL VXF$FREE( 3/*@SD_DS_1*/, VX_M_FREE( 3/*@SD_DS_1*/ ), 1 );

  11856  4 000020   000006 630400 5                  EPPR0   6
         4 000021   000021 631400 xsym               EPPR1   B_VECTNIL+17
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:99   
         4 000022   000000 701000 xent               TSX1    VXF$FREE
         4 000023   000000 011000                    NOP     0

      201    11857
      202    11858    2       IF VX_M_BASE_PTR( 7/*@SC_DS_1*/ ) = ADDR(NIL) THEN DO;

  11858  4 000024   000007 236000 xsym               LDQ     VX_M_BASE_PTR+7
         4 000025   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000026   000033 601000 4                  TNZ     s:11867

      203    11859        /*E*  ERROR: VXT-E$NO_SC_VX-0
      204    11860              MESSAGE: No section declarations encountered after pass 1.
      205    11861              DESCRIPTION: Self-explanatory.
      206    11862        */
      207    11863               %SCREAM( ERR#=E$NO_SC_VX, LEVEL=@E$F_VX, MID="'T'" );

  11864  4 000027   000013 630400 5                  EPPR0   11
         4 000030   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 000031   000000 701000 xent               TSX1    VXE$ERROR
         4 000032   000000 011000                    NOP     0

      208    11866    2          END;

      209    11867    1       ADR = 0;

  11867  4 000033   200122 450100                    STZ     ADR,,AUTO

      210    11868    1       DCB_ADR = 0;

  11868  4 000034   200124 450100                    STZ     DCB_ADR,,AUTO

      211    11869    1       DCB_INSERT = 0;

  11869  4 000035   200137 450100                    STZ     DCB_INSERT,,AUTO

      212    11870    1       SC_START$ = VX_ROOT$ -> VX$NODE.L_START.SC$;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:100  
  11870  4 000036   000000 470400 xsym               LDP0    VX_ROOT$
         4 000037   000033 236100                    LDQ     27,,PR0
         4 000040   200052 756100                    STQ     SC_START$,,AUTO

      213    11871    2       IF SC_START$ = ADDR(NIL) THEN DO;

  11871  4 000041   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000042   000047 601000 4                  TNZ     s:11880

      214    11872        /*E*  ERROR: VXT-E$SC_NONE_VX-0
      215    11873              MESSAGE: No sections encountered in object file(s).
      216    11874              DESCRIPTION: Self-explanatory.
      217    11875        */
      218    11876               %SCREAM( ERR#=E$SC_NONE_VX, MID="'T'", LEVEL=@E$F_VX );

  11877  4 000043   000020 630400 5                  EPPR0   16
         4 000044   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 000045   000000 701000 xent               TSX1    VXE$ERROR
         4 000046   000000 011000                    NOP     0

      219    11879    2          END;

      220    11880    1       VX_DCB_HEAD$ = ADDR(NIL);

  11880  4 000047   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 000050   000000 756000 xsym               STQ     VX_DCB_HEAD$

      221    11881    1       VX_DCB_TAIL$ = ADDR(NIL);

  11881  4 000051   000000 756000 xsym               STQ     VX_DCB_TAIL$

      222    11882    1       VX_DCB_START$ = ADDR(NIL);

  11882  4 000052   000000 756000 xsym               STQ     VX_DCB_START$

      223    11883    1       DN_ROOT_START$ = VX_ROOT$ -> VX$NODE.L_START.DN$;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:101  
  11883  4 000053   000000 470400 xsym               LDP0    VX_ROOT$
         4 000054   000031 236100                    LDQ     25,,PR0
         4 000055   200064 756100                    STQ     DN_ROOT_START$,,AUTO

      224    11884        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:102  
      225    11885    2       IF VX_OD.VECTOR_.DATA THEN DO;    /* Build dummy section for unused data */

  11885  4 000056   000002 236000 xsym               LDQ     VX_OD+2
         4 000057   000002 316007                    CANQ    2,DL
         4 000060   000171 600000 4                  TZE     s:11911

      226    11886               %ALLOCATE( PTR$=DUMMY$, TYPE=@DN_DS_1, SIZE="SIZEW(UNUSED_DATA)" );

  11887  4 000061   000004 236000 xsym               LDQ     VX_M_ALL+4
         4 000062   000004 136000 xsym               SBLQ    VX_M_FREE+4
         4 000063   000004 116007                    CMPQ    4,DL
         4 000064   000074 604000 4                  TMI     s:11891

  11888  4 000065   000004 236000 xsym               LDQ     VX_M_FREE+4
         4 000066   000022 736000                    QLS     18
         4 000067   000004 036000 xsym               ADLQ    VX_M_BASE_PTR+4
         4 000070   200065 756100                    STQ     DUMMY$,,AUTO

  11889  4 000071   000004 236007                    LDQ     4,DL
         4 000072   000004 056000 xsym               ASQ     VX_M_FREE+4

  11890  4 000073   000105 710000 4                  TRA     s:11893

  11891  4 000074   000014 236000 5                  LDQ     12
         4 000075   200204 756100                    STQ     @I+3,,AUTO
         4 000076   200203 756100                    STQ     @I+2,,AUTO
         4 000077   200065 631500                    EPPR1   DUMMY$,,AUTO
         4 000100   200202 451500                    STP1    @I+1,,AUTO
         4 000101   200202 630500                    EPPR0   @I+1,,AUTO
         4 000102   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 000103   000000 701000 xent               TSX1    VXA$GET
         4 000104   000000 011000                    NOP     0

      227    11893    2          VX_ROOT$->VX$NODE.L_STOP.DN$ = PINCRW(DUMMY$, SIZEW(UNUSED_DATA) );

  11893  4 000105   200065 236100                    LDQ     DUMMY$,,AUTO
         4 000106   000004 036003                    ADLQ    4,DU
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:103  
         4 000107   000000 470400 xsym               LDP0    VX_ROOT$
         4 000110   000043 756100                    STQ     35,,PR0

      228    11894    2          DUMMY$->B$DNAME.COUNT = UNUSED_DATA.COUNT;

  11894  4 000111   000031 220000 2                  LDX0    UNUSED_DATA
         4 000112   200065 471500                    LDP1    DUMMY$,,AUTO
         4 000113   100000 740100                    STX0    0,,PR1

      229    11895    2          DUMMY$->B$DNAME.TEXT = UNUSED_DATA.TEXT;

  11895  4 000114   200065 470500                    LDP0    DUMMY$,,AUTO
         4 000115   000000 221100                    LDX1    0,,PR0
         4 000116   040140 100400                    MLR     fill='040'O
         4 000117   000031 400013 2                  ADSC9   UNUSED_DATA              cn=2,n=11
         4 000120   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1

      230    11896               %ALLOCATE( PTR$=UNUSED$, TYPE=@SC_DS_1, SIZE="SIZEW(VX$SC)" );

  11897  4 000121   000007 236000 xsym               LDQ     VX_M_ALL+7
         4 000122   000007 136000 xsym               SBLQ    VX_M_FREE+7
         4 000123   000003 116007                    CMPQ    3,DL
         4 000124   000134 604000 4                  TMI     s:11901

  11898  4 000125   000007 236000 xsym               LDQ     VX_M_FREE+7
         4 000126   000022 736000                    QLS     18
         4 000127   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         4 000130   200106 756100                    STQ     UNUSED$,,AUTO

  11899  4 000131   000003 236007                    LDQ     3,DL
         4 000132   000007 056000 xsym               ASQ     VX_M_FREE+7

  11900  4 000133   000146 710000 4                  TRA     s:11903

  11901  4 000134   000006 236000 5                  LDQ     6
         4 000135   200204 756100                    STQ     @I+3,,AUTO
         4 000136   000024 236000 5                  LDQ     20
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:104  
         4 000137   200203 756100                    STQ     @I+2,,AUTO
         4 000140   200106 630500                    EPPR0   UNUSED$,,AUTO
         4 000141   200202 450500                    STP0    @I+1,,AUTO
         4 000142   200202 630500                    EPPR0   @I+1,,AUTO
         4 000143   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 000144   000000 701000 xent               TSX1    VXA$GET
         4 000145   000000 011000                    NOP     0

      231    11903    2          UNUSED$->VX$SC = '0'B;

  11903  4 000146   200106 470500                    LDP0    UNUSED$,,AUTO
         4 000147   000100 100400                    MLR     fill='000'O
         4 000150   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         4 000151   000000 000014                    ADSC9   0,,PR0                   cn=0,n=12

      232    11904    2          UNUSED$->VX$SC.TYPE = 0;

  11904  4 000152   200106 470500                    LDP0    UNUSED$,,AUTO
         4 000153   000025 236000 5                  LDQ     21
         4 000154   000000 356100                    ANSQ    0,,PR0

      233    11905    2          UNUSED$->VX$SC.ATTR.INT = 1;

  11905  4 000155   200106 470500                    LDP0    UNUSED$,,AUTO
         4 000156   000000 236100                    LDQ     0,,PR0
         4 000157   000026 376000 5                  ANQ     22
         4 000160   000100 276003                    ORQ     64,DU
         4 000161   000000 756100                    STQ     0,,PR0

      234    11906    2          UNUSED$->VX$SC.NAME_DISP = VX_ROOT$->VX$NODE.L_SIZE.DN;

  11906  4 000162   000000 470400 xsym               LDP0    VX_ROOT$
         4 000163   000055 720100                    LXL0    45,,PR0
         4 000164   200106 471500                    LDP1    UNUSED$,,AUTO
         4 000165   100001 740100                    STX0    1,,PR1

      235    11907    2         VX_ROOT$->VX$NODE.L_SIZE.DN = VX_ROOT$->VX$NODE.L_SIZE.DN + SIZEW(UNUSED_DATA
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:105  
             11907                   );

  11907  4 000166   000055 235100                    LDA     45,,PR0
         4 000167   000004 035007                    ADLA    4,DL
         4 000170   000055 755100                    STA     45,,PR0

      236    11908    2          END;

      237    11909        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:106  
      238    11910        /* Build node # to node pointer map */
      239    11911    1       I = VX_NODE_NUMBER + 1;

  11911  4 000171   000000 235000 xsym               LDA     VX_NODE_NUMBER
         4 000172   000001 035007                    ADLA    1,DL
         4 000173   200107 755100                    STA     I,,AUTO

      240    11912            %ALLOCATE( PTR$=VX_SC_X_NODE$, TYPE=@GDP, SIZE=I );

  11913  4 000174   000010 236000 xsym               LDQ     VX_M_ALL+8
         4 000175   000010 136000 xsym               SBLQ    VX_M_FREE+8
         4 000176   000211 604000 4                  TMI     s:11917
         4 000177   200107 116100                    CMPQ    I,,AUTO
         4 000200   000211 602000 4                  TNC     s:11917

  11914  4 000201   000010 236000 xsym               LDQ     VX_M_FREE+8
         4 000202   000022 736000                    QLS     18
         4 000203   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         4 000204   000000 756000 xsym               STQ     VX_SC_X_NODE$

  11915  4 000205   000010 236000 xsym               LDQ     VX_M_FREE+8
         4 000206   200107 036100                    ADLQ    I,,AUTO
         4 000207   000010 756000 xsym               STQ     VX_M_FREE+8

  11916  4 000210   000221 710000 4                  TRA     s:11919

  11917  4 000211   200107 631500                    EPPR1   I,,AUTO
         4 000212   200204 451500                    STP1    @I+3,,AUTO
         4 000213   000030 237000 5                  LDAQ    24
         4 000214   200202 757100                    STAQ    @I+1,,AUTO
         4 000215   200202 630500                    EPPR0   @I+1,,AUTO
         4 000216   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 000217   000000 701000 xent               TSX1    VXA$GET
         4 000220   000000 011000                    NOP     0

      241    11919    1       CURR$ = VX_ROOT$;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:107  
  11919  4 000221   000000 236000 xsym               LDQ     VX_ROOT$
         4 000222   200033 756100                    STQ     CURR$,,AUTO

      242    11920    2   LOOP: DO WHILE ( '1'B );                /* Do forever */

  11920  4 000223                       LOOP         null
      243    11921
      244    11922    2          VX_SC_X_NODE$ -> VX$PTR$( CURR$ -> VX$NODE.NUM ) = CURR$;

  11922  4 000223   200033 470500                    LDP0    CURR$,,AUTO
         4 000224   000010 720100                    LXL0    8,,PR0
         4 000225   200033 236100                    LDQ     CURR$,,AUTO
         4 000226   000000 471400 xsym               LDP1    VX_SC_X_NODE$
         4 000227   100000 756110                    STQ     0,X0,PR1

      245    11923    2          IF CURR$ -> VX$NODE.HEAD$ -> VX$LST.TYPE = 0/*@OF*/

  11923  4 000230   000004 471500                    LDP1    4,,PR0
         4 000231   100001 220100                    LDX0    1,,PR1
         4 000232   000246 601000 4                  TNZ     s:11928
         4 000233   100001 721100                    LXL1    1,,PR1
         4 000234   000001 101003                    CMPX1   1,DU
         4 000235   000246 601000 4                  TNZ     s:11928

      246    11924    2                  AND  CURR$ -> VX$NODE.HEAD$ -> VX$LST.SUB_TYPE = 1/*@OF_LIST*/
      247    11925    2          THEN
      248    11926    2            NODE_NAME1 = SUBSTR(CURR$->VX$NODE.HEAD$->VX$LST.OBJECT_NAME$->T$C.CHARS,1
             11926                      );

  11926  4 000236   100002 473500                    LDP3    2,,PR1
         4 000237   300000 236100                    LDQ     0,,PR3
         4 000240   000033 772000                    QRL     27
         4 000241   777777 622006                    EAX2    -1,QL
         4 000242   040100 100540                    MLR     fill='040'O
         4 000243   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         4 000244   200010 000040                    ADSC9   NODE_NAME1,,AUTO         cn=0,n=32
         4 000245   000255 710000 4                  TRA     s:11931
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:108  

      249    11927    2          ELSE
      250    11928    2             NODE_NAME1 = CURR$->VX$NODE.HEAD$->VX$LST.P.NAME_.NAME$->T$C.CHARS;

  11928  4 000246   100006 473500                    LDP3    6,,PR1
         4 000247   300000 236100                    LDQ     0,,PR3
         4 000250   000033 772000                    QRL     27
         4 000251   000000 621006                    EAX1    0,QL
         4 000252   040100 100540                    MLR     fill='040'O
         4 000253   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         4 000254   200010 000040                    ADSC9   NODE_NAME1,,AUTO         cn=0,n=32

      251    11929        /*
      252    11930                                  Check for duplicate node names         */
      253    11931    2          ICURR$ = VX_ROOT$;

  11931  4 000255   000000 236000 xsym               LDQ     VX_ROOT$
         4 000256   200035 756100                    STQ     ICURR$,,AUTO

      254    11932    3   INTERNAL: DO WHILE ( '1'B );            /* Do forever */

  11932  4 000257                       INTERNAL     null
      255    11933    4             IF CURR$ ~= ICURR$ THEN DO;

  11933  4 000257   200033 236100                    LDQ     CURR$,,AUTO
         4 000260   200035 116100                    CMPQ    ICURR$,,AUTO
         4 000261   000325 600000 4                  TZE     s:11952

      256    11934    4                IF ICURR$ -> VX$NODE.HEAD$ -> VX$LST.TYPE = 0/*@OF*/

  11934  4 000262   200035 470500                    LDP0    ICURR$,,AUTO
         4 000263   000004 471500                    LDP1    4,,PR0
         4 000264   100001 220100                    LDX0    1,,PR1
         4 000265   000301 601000 4                  TNZ     s:11939
         4 000266   100001 721100                    LXL1    1,,PR1
         4 000267   000001 101003                    CMPX1   1,DU
         4 000270   000301 601000 4                  TNZ     s:11939
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:109  

      257    11935    4                        AND ICURR$ -> VX$NODE.HEAD$ -> VX$LST.SUB_TYPE = 1/*@OF_LIST*/
      258    11936    4                THEN
      259    11937    4                  NODE_NAME2 = SUBSTR(ICURR$->VX$NODE.HEAD$->VX$LST.OBJECT_NAME$->T$C.
             11937                            CHARS,1);

  11937  4 000271   100002 473500                    LDP3    2,,PR1
         4 000272   300000 236100                    LDQ     0,,PR3
         4 000273   000033 772000                    QRL     27
         4 000274   777777 622006                    EAX2    -1,QL
         4 000275   040100 100540                    MLR     fill='040'O
         4 000276   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         4 000277   200020 000040                    ADSC9   NODE_NAME2,,AUTO         cn=0,n=32
         4 000300   000310 710000 4                  TRA     s:11940

      260    11938    4                ELSE
      261    11939    4                  NODE_NAME2 = ICURR$->VX$NODE.HEAD$->VX$LST.P.NAME_.NAME$->T$C.CHARS;

  11939  4 000301   100006 473500                    LDP3    6,,PR1
         4 000302   300000 236100                    LDQ     0,,PR3
         4 000303   000033 772000                    QRL     27
         4 000304   000000 621006                    EAX1    0,QL
         4 000305   040100 100540                    MLR     fill='040'O
         4 000306   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         4 000307   200020 000040                    ADSC9   NODE_NAME2,,AUTO         cn=0,n=32

      262    11940    5                IF NODE_NAME1 = NODE_NAME2 THEN DO;

  11940  4 000310   040100 106500                    CMPC    fill='040'O
         4 000311   200010 000040                    ADSC9   NODE_NAME1,,AUTO         cn=0,n=32
         4 000312   200020 000040                    ADSC9   NODE_NAME2,,AUTO         cn=0,n=32
         4 000313   000325 601000 4                  TNZ     s:11952

      263    11941        /*E*  ERROR: VXT-E$DUP_NODE_NAMES_VX-0
      264    11942              MESSAGE: Multiple nodes with the same name: %U1
      265    11943              DESCRIPTION: Self-explanatory.
      266    11944        */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:110  
      267    11945    5                   VX_EFIELD1.COUNT = SIZEC(NODE_NAME1) - 1;

  11945  4 000314   037000 236003                    LDQ     15872,DU
         4 000315   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      268    11946    5                   VX_EFIELD1.CHARS = NODE_NAME1;

  11946  4 000316   040000 100500                    MLR     fill='040'O
         4 000317   200010 000040                    ADSC9   NODE_NAME1,,AUTO         cn=0,n=32
         4 000320   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      269    11947                        %SCREAM( ERR#=E$DUP_NODE_NAMES_VX, LEVEL=@E$F_VX, MID="'T'" );

  11948  4 000321   000032 630400 5                  EPPR0   26
         4 000322   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 000323   000000 701000 xent               TSX1    VXE$ERROR
         4 000324   000000 011000                    NOP     0

      270    11950    5                   END;                    /* If <name> = <name> */

      271    11951    4                END;                       /* If CURR$ ~= ICURR$ then do; */

      272    11952    4             IF ICURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO; /* Move to eldest son */

  11952  4 000325   200035 470500                    LDP0    ICURR$,,AUTO
         4 000326   000000 236100                    LDQ     0,,PR0
         4 000327   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000330   000333 600000 4                  TZE     s:11956

      273    11953    4                ICURR$   = ICURR$   -> VX$NODE.SON$;

  11953  4 000331   200035 756100                    STQ     ICURR$,,AUTO

      274    11954    4                END;

  11954  4 000332   000257 710000 4                  TRA     INTERNAL

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:111  
      275    11955    4             ELSE DO;

      276    11956    5                DO WHILE ( ICURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );

  11956  4 000333   000341 710000 4                  TRA     s:11960

      277    11957                                                /* Move to an ancestor */
      278    11958    5                   ICURR$ = ICURR$ -> VX$NODE.FATHER$;

  11958  4 000334   200035 470500                    LDP0    ICURR$,,AUTO
         4 000335   000002 236100                    LDQ     2,,PR0
         4 000336   200035 756100                    STQ     ICURR$,,AUTO

      279    11959    5                   IF ICURR$ = ADDR(NIL) THEN GOTO INTERNAL_DONE;
             11959                            /* Check if done      */

  11959  4 000337   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000340   000347 600000 4                  TZE     INTERNAL_DONE

      280    11960    5                   END;        /* do while (ICURR$->VX$NODE.BROTHER$ = addr(nil) */

  11960  4 000341   200035 470500                    LDP0    ICURR$,,AUTO
         4 000342   000001 236100                    LDQ     1,,PR0
         4 000343   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000344   000334 600000 4                  TZE     s:11958

      281    11961    4                ICURR$ = ICURR$ -> VX$NODE.BROTHER$; /* Move to a brother */

  11961  4 000345   200035 756100                    STQ     ICURR$,,AUTO

      282    11962    4                END;                       /* Else do */

      283    11963    3             END INTERNAL;                 /* Do forever */

  11963  4 000346   000257 710000 4                  TRA     INTERNAL

  11956  4 000347                       INTERNAL_DO* null
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:112  
      284    11964    2   INTERNAL_DONE:;
      285    11965    3          IF CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO; /* Move to eldest son */

  11965  4 000347   200033 470500                    LDP0    CURR$,,AUTO
         4 000350   000000 236100                    LDQ     0,,PR0
         4 000351   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000352   000355 600000 4                  TZE     s:11969

      286    11966    3             CURR$    = CURR$    -> VX$NODE.SON$;

  11966  4 000353   200033 756100                    STQ     CURR$,,AUTO

      287    11967    3             END;

  11967  4 000354   000223 710000 4                  TRA     LOOP

      288    11968    3          ELSE DO;

      289    11969    4             DO WHILE ( CURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );

  11969  4 000355   000363 710000 4                  TRA     s:11973

      290    11970                                                /* Move to an ancestor */
      291    11971    4                CURR$ = CURR$ -> VX$NODE.FATHER$; /* Move up */

  11971  4 000356   200033 470500                    LDP0    CURR$,,AUTO
         4 000357   000002 236100                    LDQ     2,,PR0
         4 000360   200033 756100                    STQ     CURR$,,AUTO

      292    11972    4                IF CURR$ = ADDR(NIL) THEN GOTO LOOP_DONE; /* Check if done */

  11972  4 000361   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000362   000371 600000 4                  TZE     LOOP_DONE

      293    11973    4                END;             /* Do WHILE(CURR$->VX$NODE.BROTHER$ = addr(nil))*/

  11973  4 000363   200033 470500                    LDP0    CURR$,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:113  
         4 000364   000001 236100                    LDQ     1,,PR0
         4 000365   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000366   000356 600000 4                  TZE     s:11971

      294    11974    3             CURR$ = CURR$ -> VX$NODE.BROTHER$; /* Move to brother */

  11974  4 000367   200033 756100                    STQ     CURR$,,AUTO

      295    11975    3             END;                          /* Else do */

      296    11976    2          END LOOP;                        /* Do forever */

  11976  4 000370   000223 710000 4                  TRA     LOOP

  11973  4 000371                       LOOP_DONE    null
      297    11977    1   LOOP_DONE:;
      298    11978        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:114  
      299    11979    1       PROMOTE_SIZE = 0;

  11979  4 000371   200147 450100                    STZ     PROMOTE_SIZE,,AUTO

      300    11980    1      PROMOTE_BLANK = (VX_SC_BLK_COM>0) & (VX_OD.SIN.PROMOTE | VX_OD.SIN.PROMOTE_BLANK
             11980                );

  11980  4 000372   400000 220003                    LDX0    -131072,DU
         4 000373   000000 235000 xsym               LDA     VX_SC_BLK_COM
         4 000374   000376 601000 4                  TNZ     s:11980+4
         4 000375   000000 220003                    LDX0    0,DU
         4 000376   000000 236000 xsym               LDQ     VX_OD
         4 000377   000016 736000                    QLS     14
         4 000400   400000 376003                    ANQ     -131072,DU
         4 000401   200202 756100                    STQ     @I+1,,AUTO
         4 000402   000000 236000 xsym               LDQ     VX_OD
         4 000403   000020 736000                    QLS     16
         4 000404   400000 376003                    ANQ     -131072,DU
         4 000405   200202 276100                    ORQ     @I+1,,AUTO
         4 000406   200203 756100                    STQ     @I+2,,AUTO
         4 000407   000000 636010                    EAQ     0,X0
         4 000410   200203 376100                    ANQ     @I+2,,AUTO
         4 000411   200006 756100                    STQ     PROMOTE_BLANK,,AUTO

      301    11981    1       PROMOTE_LABEL = ( (VX_SC_LBL_COM > 0) | (VX_SC_ROOT_LBL_COM > 0) )

  11981  4 000412   400000 220003                    LDX0    -131072,DU
         4 000413   000000 235000 xsym               LDA     VX_SC_LBL_COM
         4 000414   000416 601000 4                  TNZ     s:11981+4
         4 000415   000000 220003                    LDX0    0,DU
         4 000416   400000 221003                    LDX1    -131072,DU
         4 000417   000000 235000 xsym               LDA     VX_SC_ROOT_LBL_COM
         4 000420   000422 601000 4                  TNZ     s:11981+8
         4 000421   000000 221003                    LDX1    0,DU
         4 000422   000000 636011                    EAQ     0,X1
         4 000423   200202 756100                    STQ     @I+1,,AUTO
         4 000424   000000 636010                    EAQ     0,X0
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:115  
         4 000425   200202 276100                    ORQ     @I+1,,AUTO
         4 000426   200203 756100                    STQ     @I+2,,AUTO
         4 000427   000000 236000 xsym               LDQ     VX_OD
         4 000430   000017 736000                    QLS     15
         4 000431   400000 376003                    ANQ     -131072,DU
         4 000432   200204 756100                    STQ     @I+3,,AUTO
         4 000433   000000 236000 xsym               LDQ     VX_OD
         4 000434   000020 736000                    QLS     16
         4 000435   400000 376003                    ANQ     -131072,DU
         4 000436   200204 276100                    ORQ     @I+3,,AUTO
         4 000437   200203 376100                    ANQ     @I+2,,AUTO
         4 000440   200005 756100                    STQ     PROMOTE_LABEL,,AUTO

      302    11982    1               &  ( VX_OD.SIN.PROMOTE | VX_OD.SIN.PROMOTE_LABEL );
      303    11983
      304    11984    1       IF  VX_NODE_NUMBER > 0 AND VX_O.SIN.OSP = 0/*@NO*/ AND

  11984  4 000441   000000 235000 xsym               LDA     VX_NODE_NUMBER
         4 000442   001064 604400 4                  TMOZ    s:12127
         4 000443   000010 235000 xsym               LDA     VX_O+8
         4 000444   001064 601000 4                  TNZ     s:12127
         4 000445   200005 234100                    SZN     PROMOTE_LABEL,,AUTO
         4 000446   000451 604000 4                  TMI     s:11987
         4 000447   200006 234100                    SZN     PROMOTE_BLANK,,AUTO
         4 000450   001064 605000 4                  TPL     s:12127

      305    11985    2               ( PROMOTE_LABEL OR PROMOTE_BLANK ) THEN DO;

      306    11986
      307    11987    2          PROMOTE_SIZE = PROMOTE_SIZE + ( VX_SC_ROOT_LBL_COM * SIZEW ( VX$SC ) ) ;

  11987  4 000451   000000 236000 xsym               LDQ     VX_SC_ROOT_LBL_COM
         4 000452   000003 402007                    MPY     3,DL
         4 000453   200147 036100                    ADLQ    PROMOTE_SIZE,,AUTO
         4 000454   200147 756100                    STQ     PROMOTE_SIZE,,AUTO

      308    11988
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:116  
      309    11989    3          IF PROMOTE_BLANK THEN DO;

  11989  4 000455   200006 234100                    SZN     PROMOTE_BLANK,,AUTO
         4 000456   000526 605000 4                  TPL     s:12003

      310    11990    3             PROMOTE_SIZE = PROMOTE_SIZE + ( VX_SC_BLK_COM * SIZEW ( VX$SC ) ) ;

  11990  4 000457   000000 236000 xsym               LDQ     VX_SC_BLK_COM
         4 000460   000003 402007                    MPY     3,DL
         4 000461   200147 036100                    ADLQ    PROMOTE_SIZE,,AUTO
         4 000462   200147 756100                    STQ     PROMOTE_SIZE,,AUTO

      311    11991                  %ALLOCATE( PTR$=BLK_COM_NAME$, TYPE=@DN_DS_1, SIZE=1 );

  11992  4 000463   000004 236000 xsym               LDQ     VX_M_ALL+4
         4 000464   000004 136000 xsym               SBLQ    VX_M_FREE+4
         4 000465   000474 604400 4                  TMOZ    s:11996

  11993  4 000466   000004 236000 xsym               LDQ     VX_M_FREE+4
         4 000467   000022 736000                    QLS     18
         4 000470   000004 036000 xsym               ADLQ    VX_M_BASE_PTR+4
         4 000471   200073 756100                    STQ     BLK_COM_NAME$,,AUTO

  11994  4 000472   000004 054000 xsym               AOS     VX_M_FREE+4

  11995  4 000473   000506 710000 4                  TRA     s:11998

  11996  4 000474   000002 236000 5                  LDQ     2
         4 000475   200204 756100                    STQ     @I+3,,AUTO
         4 000476   000014 236000 5                  LDQ     12
         4 000477   200203 756100                    STQ     @I+2,,AUTO
         4 000500   200073 630500                    EPPR0   BLK_COM_NAME$,,AUTO
         4 000501   200202 450500                    STP0    @I+1,,AUTO
         4 000502   200202 630500                    EPPR0   @I+1,,AUTO
         4 000503   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 000504   000000 701000 xent               TSX1    VXA$GET
         4 000505   000000 011000                    NOP     0
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:117  

      312    11998    3             BLK_COM_NAME$ -> B$DNAME.COUNT = 1;

  11998  4 000506   000001 220003                    LDX0    1,DU
         4 000507   200073 470500                    LDP0    BLK_COM_NAME$,,AUTO
         4 000510   000000 740100                    STX0    0,,PR0

      313    11999    3             BLK_COM_NAME$ -> B$DNAME.TEXT = BINASC( 0 );

  11999  4 000511   200073 470500                    LDP0    BLK_COM_NAME$,,AUTO
         4 000512   000000 221100                    LDX1    0,,PR0
         4 000513   040140 100400                    MLR     fill='040'O
         4 000514   000036 000001 5                  ADSC9   30                       cn=0,n=1
         4 000515   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1

      314    12000    3             BLK_COM_DISP = POFFW( BLK_COM_NAME$, DN_ROOT_START$ );

  12000  4 000516   200064 235100                    LDA     DN_ROOT_START$,,AUTO
         4 000517   000022 771000                    ARL     18
         4 000520   200202 755100                    STA     @I+1,,AUTO
         4 000521   200073 236100                    LDQ     BLK_COM_NAME$,,AUTO
         4 000522   000022 772000                    QRL     18
         4 000523   200202 136100                    SBLQ    @I+1,,AUTO
         4 000524   200146 756100                    STQ     BLK_COM_DISP,,AUTO

      315    12001    3             END;

  12001  4 000525   000531 710000 4                  TRA     s:12007

      316    12002    3          ELSE DO;

      317    12003    3             BLK_COM_NAME$ = ADDR(NIL);

  12003  4 000526   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 000527   200073 756100                    STQ     BLK_COM_NAME$,,AUTO

      318    12004    3             BLK_COM_DISP = 0;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:118  

  12004  4 000530   200146 450100                    STZ     BLK_COM_DISP,,AUTO

      319    12005    3             END;                          /* Else do; */

      320    12006
      321    12007    2          IF PROMOTE_LABEL THEN

  12007  4 000531   200005 234100                    SZN     PROMOTE_LABEL,,AUTO
         4 000532   000537 605000 4                  TPL     s:12011

      322    12008    2             PROMOTE_SIZE = PROMOTE_SIZE + ( VX_SC_LBL_COM * SIZEW ( VX$SC ) ) ;

  12008  4 000533   000000 236000 xsym               LDQ     VX_SC_LBL_COM
         4 000534   000003 402007                    MPY     3,DL
         4 000535   200147 036100                    ADLQ    PROMOTE_SIZE,,AUTO
         4 000536   200147 756100                    STQ     PROMOTE_SIZE,,AUTO

      323    12009
      324    12010               %ALLOCATE( PTR$=P_STOP$, TYPE=@ED_DS_1, SIZE=PROMOTE_SIZE );

  12011  4 000537   000005 236000 xsym               LDQ     VX_M_ALL+5
         4 000540   000005 136000 xsym               SBLQ    VX_M_FREE+5
         4 000541   000554 604000 4                  TMI     s:12015
         4 000542   200147 116100                    CMPQ    PROMOTE_SIZE,,AUTO
         4 000543   000554 602000 4                  TNC     s:12015

  12012  4 000544   000005 236000 xsym               LDQ     VX_M_FREE+5
         4 000545   000022 736000                    QLS     18
         4 000546   000005 036000 xsym               ADLQ    VX_M_BASE_PTR+5
         4 000547   200075 756100                    STQ     P_STOP$,,AUTO

  12013  4 000550   000005 236000 xsym               LDQ     VX_M_FREE+5
         4 000551   200147 036100                    ADLQ    PROMOTE_SIZE,,AUTO
         4 000552   000005 756000 xsym               STQ     VX_M_FREE+5

  12014  4 000553   000566 710000 4                  TRA     s:12018
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:119  

  12015  4 000554   200147 630500                    EPPR0   PROMOTE_SIZE,,AUTO
         4 000555   200204 450500                    STP0    @I+3,,AUTO
         4 000556   000000 236000 5                  LDQ     0
         4 000557   200203 756100                    STQ     @I+2,,AUTO
         4 000560   200075 631500                    EPPR1   P_STOP$,,AUTO
         4 000561   200202 451500                    STP1    @I+1,,AUTO
         4 000562   200202 630500                    EPPR0   @I+1,,AUTO
         4 000563   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 000564   000000 701000 xent               TSX1    VXA$GET
         4 000565   000000 011000                    NOP     0

      325    12017
      326    12018    2          P_START$ = P_STOP$ ;

  12018  4 000566   200075 236100                    LDQ     P_STOP$,,AUTO
         4 000567   200074 756100                    STQ     P_START$,,AUTO

      327    12019
      328    12020    2          CALL PROMOTE_SELECT ( 3 ) ;

  12020  4 000570   000006 236000 5                  LDQ     6
         4 000571   200201 756100                    STQ     BELOW_TEMP$+3,,AUTO
         4 000572   005161 701000 4                  TSX1    PROMOTE_SELECT
         4 000573   000000 011000                    NOP     0

      329    12021    2          IF PROMOTE_BLANK THEN CALL PROMOTE_SELECT ( 2 ) ;

  12021  4 000574   200006 234100                    SZN     PROMOTE_BLANK,,AUTO
         4 000575   000602 605000 4                  TPL     s:12022

  12021  4 000576   000037 236000 5                  LDQ     31
         4 000577   200201 756100                    STQ     BELOW_TEMP$+3,,AUTO
         4 000600   005161 701000 4                  TSX1    PROMOTE_SELECT
         4 000601   000000 011000                    NOP     0

      330    12022    2          IF PROMOTE_LABEL THEN CALL PROMOTE_SELECT ( 4 ) ;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:120  

  12022  4 000602   200005 234100                    SZN     PROMOTE_LABEL,,AUTO
         4 000603   000610 605000 4                  TPL     s:12025

  12022  4 000604   000014 236000 5                  LDQ     12
         4 000605   200201 756100                    STQ     BELOW_TEMP$+3,,AUTO
         4 000606   005161 701000 4                  TSX1    PROMOTE_SELECT
         4 000607   000000 011000                    NOP     0

      331    12023
      332    12024        /*      Sort selected blocks into name order.  */
      333    12025    2          CALL VXQ$SORT( DN_ROOT_START$,

  12025  4 000610   200075 236100                    LDQ     P_STOP$,,AUTO
         4 000611   777775 036003                    ADLQ    -3,DU
         4 000612   200202 756100                    STQ     @I+1,,AUTO
         4 000613   000040 237000 5                  LDAQ    32
         4 000614   200210 757100                    STAQ    @I+7,,AUTO
         4 000615   000042 237000 5                  LDAQ    34
         4 000616   200206 757100                    STAQ    @I+5,,AUTO
         4 000617   200202 630500                    EPPR0   @I+1,,AUTO
         4 000620   200205 450500                    STP0    @I+4,,AUTO
         4 000621   200074 631500                    EPPR1   P_START$,,AUTO
         4 000622   200204 451500                    STP1    @I+3,,AUTO
         4 000623   200064 633500                    EPPR3   DN_ROOT_START$,,AUTO
         4 000624   200203 453500                    STP3    @I+2,,AUTO
         4 000625   200203 630500                    EPPR0   @I+2,,AUTO
         4 000626   000025 631400 xsym               EPPR1   B_VECTNIL+21
         4 000627   000000 701000 xent               TSX1    VXQ$SORT
         4 000630   000000 011000                    NOP     0

      334    12026    2                  P_START$,
      335    12027    2                  PINCRW( P_STOP$, -SIZEW(VX$SC ) ),
      336    12028    2                  SIZEW( VX$SC ),
      337    12029    2                  1/*@BY_NAME*/,
      338    12030    2                  2,
      339    12031    2                  0 );
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:121  
      340    12032
      341    12033        /*      The first occurrence of a block in the sorted list is from
      342    12034                the hightest node in this overlay path.  (this requires that
      343    12035                VXQ$SORT perform a nondestructive sort that preserves the
      344    12036                order of the original entries.)  therefore, if the
      345    12037                block occurs more than once in the sorted list, that
      346    12038                occurrence will either be below the first occurrence in the
      347    12039                same overlay path (no promotion required) or in another
      348    12040                overlay path (promotion required).  This behavior is based
      349    12041                on the current link overlay specification method.          */
      350    12042
      351    12043        /*      Loop thru each unique selected block.  */
      352    12044    2          SC_CURR$ = P_START$ ;

  12044  4 000631   200074 236100                    LDQ     P_START$,,AUTO
         4 000632   200050 756100                    STQ     SC_CURR$,,AUTO

      353    12045    3          DO  WHILE( SC_CURR$ < P_STOP$ );

  12045  4 000633   200075 116100                    CMPQ    P_STOP$,,AUTO
         4 000634   001055 603000 4                  TRC     s:12119

      354    12046    3             PROMOTE_NAME$ = PINCRW( DN_ROOT_START$, SC_CURR$ -> VX$SC.NAME_DISP );

  12046  4 000635   200050 470500                    LDP0    SC_CURR$,,AUTO
         4 000636   000001 220100                    LDX0    1,,PR0
         4 000637   000000 636010                    EAQ     0,X0
         4 000640   200064 036100                    ADLQ    DN_ROOT_START$,,AUTO
         4 000641   200100 756100                    STQ     PROMOTE_NAME$,,AUTO

      355    12047    3             PROMOTE_DEPTH = SC_CURR$ -> VX$SC.COM_LINK;

  12047  4 000642   000002 236100                    LDQ     2,,PR0
         4 000643   777777 376007                    ANQ     -1,DL
         4 000644   200154 756100                    STQ     PROMOTE_DEPTH,,AUTO

      356    12048    3             PROMOTE_NODE# = SC_CURR$ -> VX$SC.NODE#;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:122  

  12048  4 000645   000002 236100                    LDQ     2,,PR0
         4 000646   000022 772000                    QRL     18
         4 000647   200155 756100                    STQ     PROMOTE_NODE#,,AUTO

      357    12049    3             PROMOTE_ADDRESS = SC_CURR$ -> VX$SC.ADDRESS;

  12049  4 000650   000000 236100                    LDQ     0,,PR0
         4 000651   777777 376007                    ANQ     -1,DL
         4 000652   200153 756100                    STQ     PROMOTE_ADDRESS,,AUTO

      358    12050    3             PROMOTE_NODE$   = VX_SC_X_NODE$ -> VX$PTR$ ( PROMOTE_NODE# ) ;

  12050  4 000653   000000 471400 xsym               LDP1    VX_SC_X_NODE$
         4 000654   200155 721100                    LXL1    PROMOTE_NODE#,,AUTO
         4 000655   100000 236111                    LDQ     0,X1,PR1
         4 000656   200101 756100                    STQ     PROMOTE_NODE$,,AUTO

      359    12051    3             IF SC_CURR$->VX$SC.TYPE = 3 THEN

  12051  4 000657   000000 236100                    LDQ     0,,PR0
         4 000660   077000 376003                    ANQ     32256,DU
         4 000661   003000 116003                    CMPQ    1536,DU
         4 000662   000666 601000 4                  TNZ     s:12054

      360    12052    3                PROMOTED = '1'B/*@TRUE_B*/ ;

  12052  4 000663   400000 236003                    LDQ     -131072,DU
         4 000664   200007 756100                    STQ     PROMOTED,,AUTO
         4 000665   000667 710000 4                  TRA     s:12057

      361    12053    3             ELSE
      362    12054    3                PROMOTED = '0'B/*@FALSE_B*/ ;

  12054  4 000666   200007 450100                    STZ     PROMOTED,,AUTO

      363    12055
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:123  
      364    12056        /*          Loop thru the next blocks...  */
      365    12057    3             SC_NEXT$ = PINCRW( SC_CURR$, SIZEW( VX$SC) );

  12057  4 000667   200050 236100                    LDQ     SC_CURR$,,AUTO
         4 000670   000003 036003                    ADLQ    3,DU
         4 000671   200105 756100                    STQ     SC_NEXT$,,AUTO

      366    12058    4   NEXT_BLOCK: DO  WHILE ( SC_NEXT$ < P_STOP$ ) ;

  12058  4 000672   200075 116100       NEXT_BLOCK   CMPQ    P_STOP$,,AUTO
         4 000673   001004 603000 4                  TRC     s:12098

      367    12059    4               COMMON_NAME$ = PINCRW ( DN_ROOT_START$, SC_NEXT$ -> VX$SC.NAME_DISP ) ;

  12059  4 000674   200105 470500                    LDP0    SC_NEXT$,,AUTO
         4 000675   000001 220100                    LDX0    1,,PR0
         4 000676   000000 636010                    EAQ     0,X0
         4 000677   200064 036100                    ADLQ    DN_ROOT_START$,,AUTO
         4 000700   200102 756100                    STQ     COMMON_NAME$,,AUTO

      368    12060    4                COMMON_DEPTH = SC_NEXT$ -> VX$SC.COM_LINK ;

  12060  4 000701   000002 236100                    LDQ     2,,PR0
         4 000702   777777 376007                    ANQ     -1,DL
         4 000703   200157 756100                    STQ     COMMON_DEPTH,,AUTO

      369    12061    4                COMMON_NODE# = SC_NEXT$ -> VX$SC.NODE# ;

  12061  4 000704   000002 236100                    LDQ     2,,PR0
         4 000705   000022 772000                    QRL     18
         4 000706   200160 756100                    STQ     COMMON_NODE#,,AUTO

      370    12062    4                COMMON_ADDRESS = SC_NEXT$ -> VX$SC.ADDRESS ;

  12062  4 000707   000000 236100                    LDQ     0,,PR0
         4 000710   777777 376007                    ANQ     -1,DL
         4 000711   200156 756100                    STQ     COMMON_ADDRESS,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:124  

      371    12063    4                COMMON_NODE$   = VX_SC_X_NODE$ -> VX$PTR$ ( COMMON_NODE# ) ;

  12063  4 000712   000000 471400 xsym               LDP1    VX_SC_X_NODE$
         4 000713   200160 721100                    LXL1    COMMON_NODE#,,AUTO
         4 000714   100000 236111                    LDQ     0,X1,PR1
         4 000715   200103 756100                    STQ     COMMON_NODE$,,AUTO

      372    12064    4                IF SC_NEXT$->VX$SC.TYPE = 3 THEN

  12064  4 000716   000000 236100                    LDQ     0,,PR0
         4 000717   077000 376003                    ANQ     32256,DU
         4 000720   003000 116003                    CMPQ    1536,DU
         4 000721   000724 601000 4                  TNZ     s:12068

      373    12065    4                   PROMOTED = '1'B/*@TRUE_B*/ ;

  12065  4 000722   400000 236003                    LDQ     -131072,DU
         4 000723   200007 756100                    STQ     PROMOTED,,AUTO

      374    12066
      375    12067        /*              ... with the same name ...  */
      376    12068    4                IF  ( PROMOTE_NAME$ -> B$DNAME.TEXT =

  12068  4 000724   200100 473500                    LDP3    PROMOTE_NAME$,,AUTO
         4 000725   300000 222100                    LDX2    0,,PR3
         4 000726   200102 474500                    LDP4    COMMON_NAME$,,AUTO
         4 000727   400000 223100                    LDX3    0,,PR4
         4 000730   040140 106540                    CMPC    fill='040'O
         4 000731   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         4 000732   400000 400013                    ADSC9   0,,PR4                   cn=2,n=*X3
         4 000733   001004 601000 4                  TNZ     s:12098

      377    12069    4                        COMMON_NAME$ -> B$DNAME.TEXT ) THEN
      378    12070
      379    12071        /*              ... until a common node is found.  */
      380    12072    5   COMMON_NODE: DO  WHILE ( COMMON_NODE# ~= PROMOTE_NODE# ) ;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:125  

  12072  4 000734   200160 236100       COMMON_NODE  LDQ     COMMON_NODE#,,AUTO
         4 000735   200155 116100                    CMPQ    PROMOTE_NODE#,,AUTO
         4 000736   000777 600000 4                  TZE     s:12093

      381    12073    6                   IF COMMON_DEPTH > PROMOTE_DEPTH THEN DO;

  12073  4 000737   200154 236100                    LDQ     PROMOTE_DEPTH,,AUTO
         4 000740   200157 116100                    CMPQ    COMMON_DEPTH,,AUTO
         4 000741   000753 603000 4                  TRC     s:12079

      382    12074    6                      COMMON_NODE$ = COMMON_NODE$ -> VX$NODE.FATHER$ ;

  12074  4 000742   200103 470500                    LDP0    COMMON_NODE$,,AUTO
         4 000743   000002 236100                    LDQ     2,,PR0
         4 000744   200103 756100                    STQ     COMMON_NODE$,,AUTO

      383    12075    6                      COMMON_DEPTH = COMMON_NODE$ -> VX$NODE.DEPTH ;

  12075  4 000745   200103 470500                    LDP0    COMMON_NODE$,,AUTO
         4 000746   000011 235100                    LDA     9,,PR0
         4 000747   200157 755100                    STA     COMMON_DEPTH,,AUTO

      384    12076    6                      COMMON_NODE# = COMMON_NODE$ -> VX$NODE.NUM ;

  12076  4 000750   000010 235100                    LDA     8,,PR0
         4 000751   200160 755100                    STA     COMMON_NODE#,,AUTO

      385    12077    6                      END ;

  12077  4 000752   000773 710000 4                  TRA     s:12088

      386    12078    6                   ELSE DO ;

      387    12079    6                      PROMOTED = '1'B/*@TRUE_B*/ ;

  12079  4 000753   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:126  
         4 000754   200007 756100                    STQ     PROMOTED,,AUTO

      388    12080    6                      IF COMMON_ADDRESS < PROMOTE_ADDRESS THEN

  12080  4 000755   200156 236100                    LDQ     COMMON_ADDRESS,,AUTO
         4 000756   200153 116100                    CMPQ    PROMOTE_ADDRESS,,AUTO
         4 000757   000761 603000 4                  TRC     s:12082

      389    12081    6                         PROMOTE_ADDRESS = COMMON_ADDRESS ;

  12081  4 000760   200153 756100                    STQ     PROMOTE_ADDRESS,,AUTO

      390    12082    6                      IF PROMOTE_NODE# = 0 THEN EXIT COMMON_NODE ;

  12082  4 000761   200155 235100                    LDA     PROMOTE_NODE#,,AUTO
         4 000762   000776 600000 4                  TZE     s:12088+3

      391    12083    6                      PROMOTE_NODE$ = PROMOTE_NODE$ -> VX$NODE.FATHER$ ;

  12083  4 000763   200101 470500                    LDP0    PROMOTE_NODE$,,AUTO
         4 000764   000002 236100                    LDQ     2,,PR0
         4 000765   200101 756100                    STQ     PROMOTE_NODE$,,AUTO

      392    12084    6                      PROMOTE_DEPTH = PROMOTE_NODE$ -> VX$NODE.DEPTH ;

  12084  4 000766   200101 470500                    LDP0    PROMOTE_NODE$,,AUTO
         4 000767   000011 235100                    LDA     9,,PR0
         4 000770   200154 755100                    STA     PROMOTE_DEPTH,,AUTO

      393    12085    6                      PROMOTE_NODE# = PROMOTE_NODE$ -> VX$NODE.NUM ;

  12085  4 000771   000010 235100                    LDA     8,,PR0
         4 000772   200155 755100                    STA     PROMOTE_NODE#,,AUTO

      394    12086    6                      END ;

      395    12087
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:127  
      396    12088    5                   END ;             /*  Found common node or promoted to root.  */

  12088  4 000773   200160 236100                    LDQ     COMMON_NODE#,,AUTO
         4 000774   200155 116100                    CMPQ    PROMOTE_NODE#,,AUTO
         4 000775   000737 601000 4                  TNZ     s:12073
         4 000776   000777 710000 4                  TRA     s:12093

      397    12089
      398    12090    4                ELSE                       /*  The next name is different.  */
      399    12091    4                   EXIT NEXT_BLOCK ;
      400    12092
      401    12093    4                SC_NEXT$ = PINCRW( SC_NEXT$, SIZEW( VX$SC ) ) ;

  12093  4 000777   200105 236100                    LDQ     SC_NEXT$,,AUTO
         4 001000   000003 036003                    ADLQ    3,DU
         4 001001   200105 756100                    STQ     SC_NEXT$,,AUTO

      402    12094
      403    12095    4                END ;                      /*  Loop thru next blocks ...  */

  12095  4 001002   200075 116100                    CMPQ    P_STOP$,,AUTO
         4 001003   000674 602000 4                  TNC     s:12059

      404    12096
      405    12097        /*          Make adjustment if block was promoted.  */
      406    12098    4             IF PROMOTED THEN DO ;

  12098  4 001004   200007 234100                    SZN     PROMOTED,,AUTO
         4 001005   001051 605000 4                  TPL     s:12115

      407    12099    4                IF SC_CURR$ -> VX$SC.TYPE = 2 THEN I = 0 ;

  12099  4 001006   200050 470500                    LDP0    SC_CURR$,,AUTO
         4 001007   000000 236100                    LDQ     0,,PR0
         4 001010   077000 376003                    ANQ     32256,DU
         4 001011   002000 116003                    CMPQ    1024,DU
         4 001012   001015 601000 4                  TNZ     s:12100
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:128  

  12099  4 001013   200107 450100                    STZ     I,,AUTO
         4 001014   001017 710000 4                  TRA     s:12102

      408    12100    4                ELSE I = 1 ;

  12100  4 001015   000001 235007                    LDA     1,DL
         4 001016   200107 755100                    STA     I,,AUTO

      409    12101
      410    12102    4                IF PROMOTE_NODE$ -> VX$NODE.PROMOTE_HEAD_A$(I) = ADDR(NIL) THEN

  12102  4 001017   200101 471500                    LDP1    PROMOTE_NODE$,,AUTO
         4 001020   200107 720100                    LXL0    I,,AUTO
         4 001021   100140 236110                    LDQ     96,X0,PR1
         4 001022   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001023   001027 601000 4                  TNZ     s:12105

      411    12103    4                   PROMOTE_NODE$ -> VX$NODE.PROMOTE_HEAD_A$(I) = SC_CURR$;

  12103  4 001024   200050 236100                    LDQ     SC_CURR$,,AUTO
         4 001025   100140 756110                    STQ     96,X0,PR1
         4 001026   001042 710000 4                  TRA     s:12109

      412    12104    5                ELSE DO;

      413    12105    5                   R_SC$ = PROMOTE_NODE$ -> VX$NODE.PROMOTE_TAIL_A$(I);

  12105  4 001027   100142 236110                    LDQ     98,X0,PR1
         4 001030   200076 756100                    STQ     R_SC$,,AUTO

      414    12106    5                   R_SC$ -> VX$SC.COM_LINK = POFFW( SC_CURR$, R_SC$ );

  12106  4 001031   200076 235100                    LDA     R_SC$,,AUTO
         4 001032   000022 771000                    ARL     18
         4 001033   200202 755100                    STA     @I+1,,AUTO
         4 001034   200050 236100                    LDQ     SC_CURR$,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:129  
         4 001035   000022 772000                    QRL     18
         4 001036   200202 136100                    SBLQ    @I+1,,AUTO
         4 001037   000000 621006                    EAX1    0,QL
         4 001040   200076 473500                    LDP3    R_SC$,,AUTO
         4 001041   300002 441100                    SXL1    2,,PR3

      415    12107    5                   END;

      416    12108
      417    12109    4                SC_CURR$ -> VX$SC.EMPTY = '0'B/*@FALSE_B*/ ;

  12109  4 001042   000044 236000 5                  LDQ     36
         4 001043   000000 356100                    ANSQ    0,,PR0

      418    12110    4                SC_CURR$ -> VX$SC.COM_LINK = 0;

  12110  4 001044   000000 220003                    LDX0    0,DU
         4 001045   000002 440100                    SXL0    2,,PR0

      419    12111    4                PROMOTE_NODE$ -> VX$NODE.PROMOTE_TAIL_A$(I) = SC_CURR$;

  12111  4 001046   200050 236100                    LDQ     SC_CURR$,,AUTO
         4 001047   200107 721100                    LXL1    I,,AUTO
         4 001050   100142 756111                    STQ     98,X1,PR1

      420    12112
      421    12113    4                END ;                      /*  Of adjustment for promotion.  */

      422    12114
      423    12115    3             SC_CURR$ = SC_NEXT$;

  12115  4 001051   200105 236100                    LDQ     SC_NEXT$,,AUTO
         4 001052   200050 756100                    STQ     SC_CURR$,,AUTO

      424    12116
      425    12117    3             END ;                   /*  Loop thru all unique selected blocks.  */

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:130  
  12117  4 001053   200075 116100                    CMPQ    P_STOP$,,AUTO
         4 001054   000635 602000 4                  TNC     s:12046

      426    12118
      427    12119    2          IF BLK_COM_NAME$ ~= ADDR(NIL) THEN CALL VXF$FREE( 4/*@DN_DS_1*/, 1, 1 );

  12119  4 001055   200073 236100                    LDQ     BLK_COM_NAME$,,AUTO
         4 001056   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001057   001064 600000 4                  TZE     s:12127

  12119  4 001060   000045 630400 5                  EPPR0   37
         4 001061   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 001062   000000 701000 xent               TSX1    VXF$FREE
         4 001063   000000 011000                    NOP     0

      428    12120
      429    12121    2          END;         /* If VX_NODE_NUMBER > 0 and VX_O.SIN.OSP = @NO then do; */

      430    12122
      431    12123        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:131  
      432    12124        /*
      433    12125              Set starting address for sections data
      434    12126        */
      435    12127    1       IF VX_OD.NUM.DBIAS THEN ADR = VX_O.NUM.DBIAS;

  12127  4 001064   000000 236000 xsym               LDQ     VX_OD
         4 001065   000020 316007                    CANQ    16,DL
         4 001066   001071 600000 4                  TZE     s:12128

  12127  4 001067   000037 235000 xsym               LDA     VX_O+31
         4 001070   200122 755100                    STA     ADR,,AUTO

      436    12128    1       VX_PROGRAM_BIAS.A(0/*@DATA*/) = ADR;

  12128  4 001071   200122 235100                    LDA     ADR,,AUTO
         4 001072   000000 755000 xsym               STA     VX_PROGRAM_BIAS

      437    12129    1       MAX_BADR(0/*@DATA*/) = ADR;

  12129  4 001073   000000 755000 3                  STA     MAX_BADR

      438    12130    1       IF VX_SLIB_INIT$ ~= ADDR(NIL) THEN ADR = ADR + VX_SLIB_MAX_DATA;

  12130  4 001074   000000 236000 xsym               LDQ     VX_SLIB_INIT$
         4 001075   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001076   001102 600000 4                  TZE     s:12131

  12130  4 001077   200122 236100                    LDQ     ADR,,AUTO
         4 001100   000000 036000 xsym               ADLQ    VX_SLIB_MAX_DATA
         4 001101   200122 756100                    STQ     ADR,,AUTO

      439    12131    1       ADR = ADR + VX_BIAS.A( 0/*@DATA*/ );

  12131  4 001102   200122 236100                    LDQ     ADR,,AUTO
         4 001103   000000 036000 xsym               ADLQ    VX_BIAS
         4 001104   200122 756100                    STQ     ADR,,AUTO

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:132  
      440    12132
      441    12133    1       GET_NAME = VX_SC_LBL_COM + VX_SC_ROOT_LBL_COM;

  12133  4 001105   000000 236000 xsym               LDQ     VX_SC_LBL_COM
         4 001106   000000 036000 xsym               ADLQ    VX_SC_ROOT_LBL_COM
         4 001107   200132 756100                    STQ     GET_NAME,,AUTO

      442    12134    1       IF GET_NAME <= 0 THEN GET_NAME = 10 * SIZEW( VX$SC );

  12134  4 001110   001113 601000 4                  TNZ     s:12135

  12134  4 001111   000036 235007                    LDA     30,DL
         4 001112   200132 755100                    STA     GET_NAME,,AUTO

      443    12135    1       GET = GET_NAME * SIZEW( VX$SC );

  12135  4 001113   200132 236100                    LDQ     GET_NAME,,AUTO
         4 001114   000003 402007                    MPY     3,DL
         4 001115   200131 756100                    STQ     GET,,AUTO

      444    12136            %ALLOCATE( PTR$=NEXT_FORCED_ROOT$, TYPE=@SC_DS_1, SIZE=GET );

  12137  4 001116   000007 236000 xsym               LDQ     VX_M_ALL+7
         4 001117   000007 136000 xsym               SBLQ    VX_M_FREE+7
         4 001120   001133 604000 4                  TMI     s:12141
         4 001121   200131 116100                    CMPQ    GET,,AUTO
         4 001122   001133 602000 4                  TNC     s:12141

  12138  4 001123   000007 236000 xsym               LDQ     VX_M_FREE+7
         4 001124   000022 736000                    QLS     18
         4 001125   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         4 001126   200062 756100                    STQ     NEXT_FORCED_ROOT$,,AUTO

  12139  4 001127   000007 236000 xsym               LDQ     VX_M_FREE+7
         4 001130   200131 036100                    ADLQ    GET,,AUTO
         4 001131   000007 756000 xsym               STQ     VX_M_FREE+7

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:133  
  12140  4 001132   001145 710000 4                  TRA     s:12143

  12141  4 001133   200131 630500                    EPPR0   GET,,AUTO
         4 001134   200204 450500                    STP0    @I+3,,AUTO
         4 001135   000024 236000 5                  LDQ     20
         4 001136   200203 756100                    STQ     @I+2,,AUTO
         4 001137   200062 631500                    EPPR1   NEXT_FORCED_ROOT$,,AUTO
         4 001140   200202 451500                    STP1    @I+1,,AUTO
         4 001141   200202 630500                    EPPR0   @I+1,,AUTO
         4 001142   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 001143   000000 701000 xent               TSX1    VXA$GET
         4 001144   000000 011000                    NOP     0

      445    12143    1       SIZE_AVAIL = GET;

  12143  4 001145   200131 235100                    LDA     GET,,AUTO
         4 001146   200134 755100                    STA     SIZE_AVAIL,,AUTO

      446    12144    1       GET_NAME = GET_NAME * 8;

  12144  4 001147   200132 236100                    LDQ     GET_NAME,,AUTO
         4 001150   000003 736000                    QLS     3
         4 001151   200132 756100                    STQ     GET_NAME,,AUTO

      447    12145            %ALLOCATE( PTR$=NEXT_FORCED_ROOT_NAME$, TYPE=@DN_DS_1, SIZE=GET_NAME );

  12146  4 001152   000004 236000 xsym               LDQ     VX_M_ALL+4
         4 001153   000004 136000 xsym               SBLQ    VX_M_FREE+4
         4 001154   001167 604000 4                  TMI     s:12150
         4 001155   200132 116100                    CMPQ    GET_NAME,,AUTO
         4 001156   001167 602000 4                  TNC     s:12150

  12147  4 001157   000004 236000 xsym               LDQ     VX_M_FREE+4
         4 001160   000022 736000                    QLS     18
         4 001161   000004 036000 xsym               ADLQ    VX_M_BASE_PTR+4
         4 001162   200063 756100                    STQ     NEXT_FORCED_ROOT_NAME$,,AUTO

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:134  
  12148  4 001163   000004 236000 xsym               LDQ     VX_M_FREE+4
         4 001164   200132 036100                    ADLQ    GET_NAME,,AUTO
         4 001165   000004 756000 xsym               STQ     VX_M_FREE+4

  12149  4 001166   001201 710000 4                  TRA     s:12152

  12150  4 001167   200132 630500                    EPPR0   GET_NAME,,AUTO
         4 001170   200204 450500                    STP0    @I+3,,AUTO
         4 001171   000014 236000 5                  LDQ     12
         4 001172   200203 756100                    STQ     @I+2,,AUTO
         4 001173   200063 631500                    EPPR1   NEXT_FORCED_ROOT_NAME$,,AUTO
         4 001174   200202 451500                    STP1    @I+1,,AUTO
         4 001175   200202 630500                    EPPR0   @I+1,,AUTO
         4 001176   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 001177   000000 701000 xent               TSX1    VXA$GET
         4 001200   000000 011000                    NOP     0

      448    12152    1       SIZE_AVAIL_NAME = GET_NAME;

  12152  4 001201   200132 235100                    LDA     GET_NAME,,AUTO
         4 001202   200133 755100                    STA     SIZE_AVAIL_NAME,,AUTO

      449    12153    1       IF VX_NODE_NUMBER > 0  AND  NOT PROMOTE_LABEL  AND  NOT VX_OD.SIN.OSP

  12153  4 001203   000000 236000 xsym               LDQ     VX_NODE_NUMBER
         4 001204   001213 604400 4                  TMOZ    s:12155
         4 001205   200005 234100                    SZN     PROMOTE_LABEL,,AUTO
         4 001206   001213 604000 4                  TMI     s:12155
         4 001207   000000 430000 xsym               FSZN    VX_OD
         4 001210   001213 604000 4                  TMI     s:12155

      450    12154    1       THEN START_TIMES = 0;

  12154  4 001211   200140 450100                    STZ     START_TIMES,,AUTO
         4 001212   001215 710000 4                  TRA     s:12156

      451    12155    1       ELSE START_TIMES = 1;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:135  

  12155  4 001213   000001 235007                    LDA     1,DL
         4 001214   200140 755100                    STA     START_TIMES,,AUTO

      452    12156    2       DO I = START_TIMES TO 1;

  12156  4 001215   200140 235100                    LDA     START_TIMES,,AUTO
         4 001216   200107 755100                    STA     I,,AUTO
         4 001217   002201 710000 4                  TRA     s:12370+3

      453    12157    2          VX_CURR$ = VX_ROOT$;

  12157  4 001220   000000 236000 xsym               LDQ     VX_ROOT$
         4 001221   000000 756000 xsym               STQ     VX_CURR$

      454    12158
      455    12159    3          DO WHILE( VX_CURR$ ~= ADDR(NIL) );

  12159  4 001222   002174 710000 4                  TRA     s:12369

      456    12160    3             VX_CURR$ -> VX$NODE.PATH$ = ADDR(NIL);

  12160  4 001223   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 001224   000000 470400 xsym               LDP0    VX_CURR$
         4 001225   000003 756100                    STQ     3,,PR0

      457    12161    4             IF START_TIMES = 1 THEN DO;

  12161  4 001226   200140 235100                    LDA     START_TIMES,,AUTO
         4 001227   000001 115007                    CMPA    1,DL
         4 001230   001265 601000 4                  TNZ     s:12179

      458    12162    4                INDX = 1;

  12162  4 001231   000001 235007                    LDA     1,DL
         4 001232   200142 755100                    STA     INDX,,AUTO

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:136  
      459    12163    4                IF VX_OD.SIN.OSP

  12163  4 001233   000000 430000 xsym               FSZN    VX_OD
         4 001234   001240 605000 4                  TPL     s:12165

      460    12164    4                THEN WHICH$ = VX_ROOT$;

  12164  4 001235   000000 236000 xsym               LDQ     VX_ROOT$
         4 001236   200072 756100                    STQ     WHICH$,,AUTO
         4 001237   001242 710000 4                  TRA     s:12167

      461    12165    4                ELSE WHICH$ = VX_CURR$;

  12165  4 001240   000000 236000 xsym               LDQ     VX_CURR$
         4 001241   200072 756100                    STQ     WHICH$,,AUTO

      462    12166                                                /* Do concatenation of the two lists */
      463    12167    5                IF VX_CURR$ -> VX$NODE.L_SC_START.SC_LBL_COM$ ~= ADDR(NIL) THEN DO;

  12167  4 001242   000132 236100                    LDQ     90,,PR0
         4 001243   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001244   001305 600000 4                  TZE     s:12191

      464    12168    6                   IF VX_CURR$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$ = ADDR(NIL) THEN
             12168                            DO;

  12168  4 001245   000131 236100                    LDQ     89,,PR0
         4 001246   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001247   001253 601000 4                  TNZ     s:12173

      465    12169    6                      VX_CURR$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$ =

  12169  4 001250   000132 236100                    LDQ     90,,PR0
         4 001251   000131 756100                    STQ     89,,PR0

      466    12170    6                              VX_CURR$ -> VX$NODE.L_SC_START.SC_LBL_COM$;
      467    12171    6                      END;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:137  

  12171  4 001252   001305 710000 4                  TRA     s:12191

      468    12172    6                   ELSE DO;                /* Two non-null lists */

      469    12173    6                      VX_CURR$ -> VX$NODE.L_SC_STOP.SC_ROOT_LBL_COM$ -> VX$SC.COM_LINK
             12173                               =

  12173  4 001253   000135 471500                    LDP1    93,,PR0
         4 001254   000000 235000 xsym               LDA     VX_SC_START$
         4 001255   000022 771000                    ARL     18
         4 001256   200202 755100                    STA     @I+1,,AUTO
         4 001257   000132 236100                    LDQ     90,,PR0
         4 001260   000022 772000                    QRL     18
         4 001261   200202 136100                    SBLQ    @I+1,,AUTO
         4 001262   000000 620006                    EAX0    0,QL
         4 001263   100002 440100                    SXL0    2,,PR1

      470    12174    6                              POFFW( VX_CURR$ -> VX$NODE.L_SC_START.SC_LBL_COM$,
             12174                                       VX_SC_START$    );
      471    12175    6                      END;                 /* Else do; */

      472    12176    5                   END;
             12176                  /* If VX_CURR$ -> VX$NODE.L_SC_START.SC_LBL_COM$ ~= addr(nil) then do; */

      473    12177    4                END;                     /* If START_TIMES = STOP_TIMES then do; */

  12177  4 001264   001305 710000 4                  TRA     s:12191

      474    12178    4             ELSE DO;

      475    12179    5                IF I = 0 THEN DO;

  12179  4 001265   200107 235100                    LDA     I,,AUTO
         4 001266   001274 601000 4                  TNZ     s:12184

      476    12180    5                   INDX = 1;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:138  

  12180  4 001267   000001 235007                    LDA     1,DL
         4 001270   200142 755100                    STA     INDX,,AUTO

      477    12181    5                   WHICH$ = VX_ROOT$;

  12181  4 001271   000000 236000 xsym               LDQ     VX_ROOT$
         4 001272   200072 756100                    STQ     WHICH$,,AUTO

      478    12182    5                   END;

  12182  4 001273   001305 710000 4                  TRA     s:12191

      479    12183    5                ELSE DO;

      480    12184    5                   INDX = 2;

  12184  4 001274   000002 235007                    LDA     2,DL
         4 001275   200142 755100                    STA     INDX,,AUTO

      481    12185    5                   IF VX_OD.SIN.OSP

  12185  4 001276   000000 430000 xsym               FSZN    VX_OD
         4 001277   001303 605000 4                  TPL     s:12187

      482    12186    5                   THEN WHICH$ = VX_ROOT$;

  12186  4 001300   000000 236000 xsym               LDQ     VX_ROOT$
         4 001301   200072 756100                    STQ     WHICH$,,AUTO
         4 001302   001305 710000 4                  TRA     s:12191

      483    12187    5                   ELSE WHICH$ = VX_CURR$;

  12187  4 001303   000000 236000 xsym               LDQ     VX_CURR$
         4 001304   200072 756100                    STQ     WHICH$,,AUTO

      484    12188    5                   END;                    /* Else do; */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:139  

      485    12189    4                END;                       /* Else do; */

      486    12190        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:140  
      487    12191    4             IF VX_CURR$ -> VX$NODE.PROMOTE_HEAD.LBL_COM$ = ADDR(NIL) THEN DO;

  12191  4 001305   000141 236100                    LDQ     97,,PR0
         4 001306   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001307   001325 601000 4                  TNZ     s:12199

      488    12192    4                SC_CURR$      = ADDR(NIL);

  12192  4 001310   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 001311   200050 756100                    STQ     SC_CURR$,,AUTO

      489    12193    4                NEXT_SC_CURR$ = VX_CURR$ -> VX$NODE.L_SC_START_A$(INDX);

  12193  4 001312   200142 720100                    LXL0    INDX,,AUTO
         4 001313   000130 236110                    LDQ     88,X0,PR0
         4 001314   200071 756100                    STQ     NEXT_SC_CURR$,,AUTO

      490    12194    4                SC_STOP$ = VX_CURR$ -> VX$NODE.L_STOP.SC$;

  12194  4 001315   000045 236100                    LDQ     37,,PR0
         4 001316   200053 756100                    STQ     SC_STOP$,,AUTO

      491    12195    4                VX_CURR$ -> VX$NODE.L_SC_START_A$(INDX)    = ADDR(NIL);

  12195  4 001317   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 001320   000130 756110                    STQ     88,X0,PR0

      492    12196    4                VX_CURR$ -> VX$NODE.L_SC_STOP_A$(INDX)     = ADDR(NIL);

  12196  4 001321   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 001322   000000 470400 xsym               LDP0    VX_CURR$
         4 001323   000134 756110                    STQ     92,X0,PR0

      493    12197    4                END;

  12197  4 001324   001525 710000 4                  TRA     s:12250

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:141  
      494    12198    4             ELSE DO;

      495    12199    4                SC_CURR$ = VX_CURR$ -> VX$NODE.PROMOTE_HEAD.LBL_COM$;

  12199  4 001325   200050 756100                    STQ     SC_CURR$,,AUTO

      496    12200    4                VX_CURR$ -> VX$NODE.PROMOTE_HEAD.LBL_COM$ = ADDR(NIL);

  12200  4 001326   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 001327   000141 756100                    STQ     97,,PR0

      497    12201    4                SAVE_SC_CURR$ = VX_CURR$ -> VX$NODE.L_SC_START_A$(INDX);

  12201  4 001330   200142 720100                    LXL0    INDX,,AUTO
         4 001331   000130 236110                    LDQ     88,X0,PR0
         4 001332   200051 756100                    STQ     SAVE_SC_CURR$,,AUTO

      498    12202    4                SC_STOP$ = VX_CURR$ -> VX$NODE.L_STOP.SC$;

  12202  4 001333   000045 236100                    LDQ     37,,PR0
         4 001334   200053 756100                    STQ     SC_STOP$,,AUTO

      499    12203    4                VX_CURR$ -> VX$NODE.L_SC_START_A$(INDX)    = ADDR(NIL);

  12203  4 001335   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 001336   000130 756110                    STQ     88,X0,PR0

      500    12204    4                VX_CURR$ -> VX$NODE.L_SC_STOP_A$(INDX)     = ADDR(NIL);

  12204  4 001337   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 001340   000000 470400 xsym               LDP0    VX_CURR$
         4 001341   000134 756110                    STQ     92,X0,PR0

      501    12205    4   MOVE_PROMOTE:
      502    12206
      503    12207
      504    12208
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:142  
      505    12209    4                NEXT_FORCED_ROOT$ -> VX$SC = SC_CURR$ -> VX$SC;

  12209  4 001342   200050 470500       MOVE_PROMOTE LDP0    SC_CURR$,,AUTO
         4 001343   200062 471500                    LDP1    NEXT_FORCED_ROOT$,,AUTO
         4 001344   000100 100500                    MLR     fill='000'O
         4 001345   000000 000014                    ADSC9   0,,PR0                   cn=0,n=12
         4 001346   100000 000014                    ADSC9   0,,PR1                   cn=0,n=12

      506    12210    4                DISP = POFFW( NEXT_FORCED_ROOT$, VX_SC_START$ );

  12210  4 001347   000000 235000 xsym               LDA     VX_SC_START$
         4 001350   000022 771000                    ARL     18
         4 001351   200202 755100                    STA     @I+1,,AUTO
         4 001352   200062 236100                    LDQ     NEXT_FORCED_ROOT$,,AUTO
         4 001353   000022 772000                    QRL     18
         4 001354   200202 136100                    SBLQ    @I+1,,AUTO
         4 001355   200144 756100                    STQ     DISP,,AUTO

      507    12211    4                NEXT_FORCED_ROOT$ -> VX$SC.NODE# = SC_CURR$ -> VX$SC.ADDRESS;

  12211  4 001356   000000 720100                    LXL0    0,,PR0
         4 001357   200062 471500                    LDP1    NEXT_FORCED_ROOT$,,AUTO
         4 001360   100002 740100                    STX0    2,,PR1

      508    12212    4                NEXT_FORCED_ROOT$ -> VX$SC.COM_LINK = DISP;

  12212  4 001361   000000 620006                    EAX0    0,QL
         4 001362   200062 471500                    LDP1    NEXT_FORCED_ROOT$,,AUTO
         4 001363   100002 440100                    SXL0    2,,PR1

      509    12213    4                TAIL$ = WHICH$ -> VX$NODE.L_SC_STOP.SC_ROOT_LBL_COM$;

  12213  4 001364   200072 471500                    LDP1    WHICH$,,AUTO
         4 001365   100135 236100                    LDQ     93,,PR1
         4 001366   200067 756100                    STQ     TAIL$,,AUTO

      510    12214    5                IF TAIL$ = ADDR(NIL) THEN DO;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:143  

  12214  4 001367   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001370   001374 601000 4                  TNZ     s:12218

      511    12215    5                   WHICH$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$ = NEXT_FORCED_ROOT$;

  12215  4 001371   200062 236100                    LDQ     NEXT_FORCED_ROOT$,,AUTO
         4 001372   100131 756100                    STQ     89,,PR1

      512    12216    5                   END;

  12216  4 001373   001377 710000 4                  TRA     s:12220

      513    12217    5                ELSE DO;

      514    12218    5                   TAIL$ -> VX$SC.COM_LINK = DISP;

  12218  4 001374   200144 720100                    LXL0    DISP,,AUTO
         4 001375   200067 473500                    LDP3    TAIL$,,AUTO
         4 001376   300002 440100                    SXL0    2,,PR3

      515    12219    5                   END;                    /* Else do; */

      516    12220    4                WHICH$ -> VX$NODE.L_SC_STOP.SC_ROOT_LBL_COM$ = NEXT_FORCED_ROOT$;

  12220  4 001377   200062 236100                    LDQ     NEXT_FORCED_ROOT$,,AUTO
         4 001400   100135 756100                    STQ     93,,PR1

      517    12221    4                SEQ_MATCH$ = PINCRW( DN_ROOT_START$, SC_CURR$ -> VX$SC.NAME_DISP );

  12221  4 001401   000001 220100                    LDX0    1,,PR0
         4 001402   000000 636010                    EAQ     0,X0
         4 001403   200064 036100                    ADLQ    DN_ROOT_START$,,AUTO
         4 001404   200167 756100                    STQ     SEQ_MATCH$,,AUTO

      518    12222    4                F_NAME_SIZEW = ( SEQ_MATCH$ -> B$DNAME.COUNT + 4/*@CHAR_WORD*/ + 1 ) /
             12222                         4/*@CHAR_WORD*/;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:144  

  12222  4 001405   200167 473500                    LDP3    SEQ_MATCH$,,AUTO
         4 001406   300000 236100                    LDQ     0,,PR3
         4 001407   000022 772000                    QRL     18
         4 001410   000005 036007                    ADLQ    5,DL
         4 001411   000002 772000                    QRL     2
         4 001412   200135 756100                    STQ     F_NAME_SIZEW,,AUTO

      519    12223    5                IF SIZE_AVAIL_NAME < F_NAME_SIZEW THEN DO;

  12223  4 001413   200133 116100                    CMPQ    SIZE_AVAIL_NAME,,AUTO
         4 001414   001450 602000 4                  TNC     s:12233
         4 001415   001450 600000 4                  TZE     s:12233

      520    12224                        %ALLOCATE( PTR$=DUMMY$, TYPE=@DN_DS_1, SIZE=GET_NAME );

  12225  4 001416   000004 236000 xsym               LDQ     VX_M_ALL+4
         4 001417   000004 136000 xsym               SBLQ    VX_M_FREE+4
         4 001420   001433 604000 4                  TMI     s:12229
         4 001421   200132 116100                    CMPQ    GET_NAME,,AUTO
         4 001422   001433 602000 4                  TNC     s:12229

  12226  4 001423   000004 236000 xsym               LDQ     VX_M_FREE+4
         4 001424   000022 736000                    QLS     18
         4 001425   000004 036000 xsym               ADLQ    VX_M_BASE_PTR+4
         4 001426   200065 756100                    STQ     DUMMY$,,AUTO

  12227  4 001427   000004 236000 xsym               LDQ     VX_M_FREE+4
         4 001430   200132 036100                    ADLQ    GET_NAME,,AUTO
         4 001431   000004 756000 xsym               STQ     VX_M_FREE+4

  12228  4 001432   001445 710000 4                  TRA     s:12231

  12229  4 001433   200132 634500                    EPPR4   GET_NAME,,AUTO
         4 001434   200204 454500                    STP4    @I+3,,AUTO
         4 001435   000014 236000 5                  LDQ     12
         4 001436   200203 756100                    STQ     @I+2,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:145  
         4 001437   200065 635500                    EPPR5   DUMMY$,,AUTO
         4 001440   200202 455500                    STP5    @I+1,,AUTO
         4 001441   200202 630500                    EPPR0   @I+1,,AUTO
         4 001442   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 001443   000000 701000 xent               TSX1    VXA$GET
         4 001444   000000 011000                    NOP     0

      521    12231    5                   SIZE_AVAIL_NAME = SIZE_AVAIL_NAME + GET_NAME;

  12231  4 001445   200133 236100                    LDQ     SIZE_AVAIL_NAME,,AUTO
         4 001446   200132 036100                    ADLQ    GET_NAME,,AUTO
         4 001447   200133 756100                    STQ     SIZE_AVAIL_NAME,,AUTO

      522    12232    5                   END;

      523    12233    4                NEXT_FORCED_ROOT_NAME$ -> B$DNAME.COUNT = SEQ_MATCH$ -> B$DNAME.COUNT;

  12233  4 001450   200167 470500                    LDP0    SEQ_MATCH$,,AUTO
         4 001451   000000 220100                    LDX0    0,,PR0
         4 001452   200063 471500                    LDP1    NEXT_FORCED_ROOT_NAME$,,AUTO
         4 001453   100000 740100                    STX0    0,,PR1

      524    12234    4                NEXT_FORCED_ROOT_NAME$ -> B$DNAME.TEXT = SEQ_MATCH$ -> B$DNAME.TEXT;

  12234  4 001454   200063 471500                    LDP1    NEXT_FORCED_ROOT_NAME$,,AUTO
         4 001455   100000 220100                    LDX0    0,,PR1
         4 001456   000000 221100                    LDX1    0,,PR0
         4 001457   040140 100540                    MLR     fill='040'O
         4 001460   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1
         4 001461   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0

      525    12235    4                NEXT_FORCED_ROOT$ -> VX$SC.NAME_DISP = POFFW( NEXT_FORCED_ROOT_NAME$,

  12235  4 001462   200064 235100                    LDA     DN_ROOT_START$,,AUTO
         4 001463   000022 771000                    ARL     18
         4 001464   200202 755100                    STA     @I+1,,AUTO
         4 001465   200063 236100                    LDQ     NEXT_FORCED_ROOT_NAME$,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:146  
         4 001466   000022 772000                    QRL     18
         4 001467   200202 136100                    SBLQ    @I+1,,AUTO
         4 001470   000000 620006                    EAX0    0,QL
         4 001471   200062 471500                    LDP1    NEXT_FORCED_ROOT$,,AUTO
         4 001472   100001 740100                    STX0    1,,PR1

      526    12236    4                        DN_ROOT_START$ );
      527    12237    4               NEXT_FORCED_ROOT_NAME$ = PINCRW( NEXT_FORCED_ROOT_NAME$, F_NAME_SIZEW )
             12237                         ;

  12237  4 001473   200135 236100                    LDQ     F_NAME_SIZEW,,AUTO
         4 001474   000022 736000                    QLS     18
         4 001475   200063 036100                    ADLQ    NEXT_FORCED_ROOT_NAME$,,AUTO
         4 001476   200063 756100                    STQ     NEXT_FORCED_ROOT_NAME$,,AUTO

      528    12238    4                SIZE_AVAIL_NAME = SIZE_AVAIL_NAME - F_NAME_SIZEW;

  12238  4 001477   200133 236100                    LDQ     SIZE_AVAIL_NAME,,AUTO
         4 001500   200135 136100                    SBLQ    F_NAME_SIZEW,,AUTO
         4 001501   200133 756100                    STQ     SIZE_AVAIL_NAME,,AUTO

      529    12239    4                NEXT_FORCED_ROOT$ = PINCRW( NEXT_FORCED_ROOT$, SIZEW( VX$SC ) );

  12239  4 001502   200062 236100                    LDQ     NEXT_FORCED_ROOT$,,AUTO
         4 001503   000003 036003                    ADLQ    3,DU
         4 001504   200062 756100                    STQ     NEXT_FORCED_ROOT$,,AUTO

      530    12240    4                SIZE_AVAIL = SIZE_AVAIL - SIZEW( VX$SC );

  12240  4 001505   200134 235100                    LDA     SIZE_AVAIL,,AUTO
         4 001506   000003 135007                    SBLA    3,DL
         4 001507   200134 755100                    STA     SIZE_AVAIL,,AUTO

      531    12241    4                DISP = SC_CURR$ -> VX$SC.COM_LINK;

  12241  4 001510   200050 471500                    LDP1    SC_CURR$,,AUTO
         4 001511   100002 236100                    LDQ     2,,PR1
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:147  
         4 001512   777777 376007                    ANQ     -1,DL
         4 001513   200144 756100                    STQ     DISP,,AUTO

      532    12242    5                IF DISP ~= 0 THEN DO;

  12242  4 001514   001521 600000 4                  TZE     s:12246

      533    12243    5                   SC_CURR$ = PINCRW( SC_CURR$, DISP );

  12243  4 001515   000022 736000                    QLS     18
         4 001516   200050 036100                    ADLQ    SC_CURR$,,AUTO
         4 001517   200050 756100                    STQ     SC_CURR$,,AUTO

      534    12244    5                   GOTO MOVE_PROMOTE;

  12244  4 001520   001342 710000 4                  TRA     MOVE_PROMOTE

      535    12245    5                   END;                    /* If disp ~= 0 then do; */
      536    12246    4                NEXT_SC_CURR$ = SAVE_SC_CURR$;

  12246  4 001521   200051 236100                    LDQ     SAVE_SC_CURR$,,AUTO
         4 001522   200071 756100                    STQ     NEXT_SC_CURR$,,AUTO

      537    12247    4                SC_CURR$      = ADDR(NIL);

  12247  4 001523   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 001524   200050 756100                    STQ     SC_CURR$,,AUTO

      538    12248    4                END;                       /* Else do */

      539    12249        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:148  
      540    12250    3             SC_NAME$ = VX_CURR$ -> VX$NODE.L_START.DN$;

  12250  4 001525   000000 470400 xsym               LDP0    VX_CURR$
         4 001526   000031 236100                    LDQ     25,,PR0
         4 001527   200054 756100                    STQ     SC_NAME$,,AUTO

      541    12251    4             DO WHILE( NEXT_SC_CURR$ ~= SC_CURR$ );

  12251  4 001530   200071 236100                    LDQ     NEXT_SC_CURR$,,AUTO
         4 001531   200050 116100                    CMPQ    SC_CURR$,,AUTO
         4 001532   002142 600000 4                  TZE     s:12354

      542    12252    4                SC_CURR$ = NEXT_SC_CURR$;

  12252  4 001533   200071 236100                    LDQ     NEXT_SC_CURR$,,AUTO
         4 001534   200050 756100                    STQ     SC_CURR$,,AUTO

      543    12253    4                SC_COM_LINK = SC_CURR$ -> VX$SC.COM_LINK;

  12253  4 001535   200050 470500                    LDP0    SC_CURR$,,AUTO
         4 001536   000002 236100                    LDQ     2,,PR0
         4 001537   777777 376007                    ANQ     -1,DL
         4 001540   200145 756100                    STQ     SC_COM_LINK,,AUTO

      544    12254    4                IF SC_CURR$ > SC_STOP$ THEN

  12254  4 001541   200053 236100                    LDQ     SC_STOP$,,AUTO
         4 001542   200050 116100                    CMPQ    SC_CURR$,,AUTO
         4 001543   001551 603000 4                  TRC     s:12257

      545    12255    4                   SEQ_MATCH$ = PINCRW(DN_ROOT_START$, SC_CURR$->VX$SC.NAME_DISP);

  12255  4 001544   000001 220100                    LDX0    1,,PR0
         4 001545   000000 636010                    EAQ     0,X0
         4 001546   200064 036100                    ADLQ    DN_ROOT_START$,,AUTO
         4 001547   200167 756100                    STQ     SEQ_MATCH$,,AUTO
         4 001550   001555 710000 4                  TRA     s:12258
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:149  

      546    12256    4                ELSE
      547    12257    4                   SEQ_MATCH$  = PINCRW( SC_NAME$, SC_CURR$ -> VX$SC.NAME_DISP );

  12257  4 001551   000001 220100                    LDX0    1,,PR0
         4 001552   000000 636010                    EAQ     0,X0
         4 001553   200054 036100                    ADLQ    SC_NAME$,,AUTO
         4 001554   200167 756100                    STQ     SEQ_MATCH$,,AUTO

      548    12258    4                S_CURR$ = VX_ROOT$;

  12258  4 001555   000000 236000 xsym               LDQ     VX_ROOT$
         4 001556   200055 756100                    STQ     S_CURR$,,AUTO

      549    12259
      550    12260    5                DO WHILE( S_CURR$ ~= ADDR(NIL) );

  12260  4 001557   001624 710000 4                  TRA     s:12274

      551    12261    5                   NEXT$     = S_CURR$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$;

  12261  4 001560   200055 470500                    LDP0    S_CURR$,,AUTO
         4 001561   000131 236100                    LDQ     89,,PR0
         4 001562   200070 756100                    STQ     NEXT$,,AUTO

      552    12262    5                   SEQ_TEMP$ = ADDR(NIL);

  12262  4 001563   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 001564   200166 756100                    STQ     SEQ_TEMP$,,AUTO

      553    12263    6                   DO WHILE( NEXT$ ~= SEQ_TEMP$ );

  12263  4 001565   200070 116100                    CMPQ    NEXT$,,AUTO
         4 001566   001613 600000 4                  TZE     s:12271

      554    12264    6                      SEQ_TEMP$ = NEXT$;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:150  
  12264  4 001567   200070 236100                    LDQ     NEXT$,,AUTO
         4 001570   200166 756100                    STQ     SEQ_TEMP$,,AUTO

      555    12265    6                      IF PINCRW(DN_ROOT_START$, SEQ_TEMP$ -> VX$SC.NAME_DISP) ->
             12265                               B$DNAME.TEXT

  12265  4 001571   200166 470500                    LDP0    SEQ_TEMP$,,AUTO
         4 001572   000001 220100                    LDX0    1,,PR0
         4 001573   200064 471500                    LDP1    DN_ROOT_START$,,AUTO
         4 001574   100000 221110                    LDX1    0,X0,PR1
         4 001575   200167 473500                    LDP3    SEQ_MATCH$,,AUTO
         4 001576   300000 222100                    LDX2    0,,PR3
         4 001577   000000 635010                    EAA     0,X0
         4 001600   000020 731000                    ARS     16
         4 001601   040140 106545                    CMPC    fill='040'O
         4 001602   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         4 001603   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         4 001604   001775 600000 4                  TZE     SET_FROM_ENTRY

      556    12266    6                              =  SEQ_MATCH$ -> B$DNAME.TEXT
      557    12267    6                      THEN GOTO  SET_FROM_ENTRY;
      558    12268    6                      NEXT$ = PINCRW( VX_SC_START$, SEQ_TEMP$ -> VX$SC.COM_LINK );

  12268  4 001605   000002 723100                    LXL3    2,,PR0
         4 001606   000000 636013                    EAQ     0,X3
         4 001607   000000 036000 xsym               ADLQ    VX_SC_START$
         4 001610   200070 756100                    STQ     NEXT$,,AUTO

      559    12269    6                      END;                 /* Do while( NEXT$ ~= SEQ_TEMP$ ); */

  12269  4 001611   200166 116100                    CMPQ    SEQ_TEMP$,,AUTO
         4 001612   001567 601000 4                  TNZ     s:12264

      560    12270
      561    12271    5                   IF WHICH$ = VX_ROOT$

  12271  4 001613   200072 236100                    LDQ     WHICH$,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:151  
         4 001614   000000 116000 xsym               CMPQ    VX_ROOT$
         4 001615   001621 601000 4                  TNZ     s:12273

      562    12272    5                   THEN S_CURR$ = ADDR(NIL);

  12272  4 001616   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 001617   200055 756100                    STQ     S_CURR$,,AUTO
         4 001620   001624 710000 4                  TRA     s:12274

      563    12273    5                   ELSE S_CURR$ = S_CURR$ -> VX$NODE.PATH$;

  12273  4 001621   200055 470500                    LDP0    S_CURR$,,AUTO
         4 001622   000003 236100                    LDQ     3,,PR0
         4 001623   200055 756100                    STQ     S_CURR$,,AUTO

      564    12274    5                   END;                    /* Do while ( S_CURR$ ~= addr(nil) ); */

  12274  4 001624   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001625   001560 601000 4                  TNZ     s:12261

      565    12275        /*
      566    12276         Here we insert
      567    12277        */
      568    12278    4                NEXT_FORCED_ROOT$ -> VX$SC = SC_CURR$ -> VX$SC;

  12278  4 001626   200050 470500                    LDP0    SC_CURR$,,AUTO
         4 001627   200062 471500                    LDP1    NEXT_FORCED_ROOT$,,AUTO
         4 001630   000100 100500                    MLR     fill='000'O
         4 001631   000000 000014                    ADSC9   0,,PR0                   cn=0,n=12
         4 001632   100000 000014                    ADSC9   0,,PR1                   cn=0,n=12

      569    12279    4                DISP = POFFW( NEXT_FORCED_ROOT$, VX_SC_START$ );

  12279  4 001633   000000 235000 xsym               LDA     VX_SC_START$
         4 001634   000022 771000                    ARL     18
         4 001635   200202 755100                    STA     @I+1,,AUTO
         4 001636   200062 236100                    LDQ     NEXT_FORCED_ROOT$,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:152  
         4 001637   000022 772000                    QRL     18
         4 001640   200202 136100                    SBLQ    @I+1,,AUTO
         4 001641   200144 756100                    STQ     DISP,,AUTO

      570    12280    4                NEXT_FORCED_ROOT$ -> VX$SC.NODE# = POFFW( SC_CURR$, VX_SC_START$ );

  12280  4 001642   200202 755100                    STA     @I+1,,AUTO
         4 001643   200050 236100                    LDQ     SC_CURR$,,AUTO
         4 001644   000022 772000                    QRL     18
         4 001645   200202 136100                    SBLQ    @I+1,,AUTO
         4 001646   000000 620006                    EAX0    0,QL
         4 001647   200062 471500                    LDP1    NEXT_FORCED_ROOT$,,AUTO
         4 001650   100002 740100                    STX0    2,,PR1

      571    12281    4                NEXT_FORCED_ROOT$ -> VX$SC.COM_LINK = DISP;

  12281  4 001651   200144 720100                    LXL0    DISP,,AUTO
         4 001652   200062 471500                    LDP1    NEXT_FORCED_ROOT$,,AUTO
         4 001653   100002 440100                    SXL0    2,,PR1

      572    12282    4                SC_CURR$ -> VX$SC.COM_LINK = DISP;

  12282  4 001654   000002 440100                    SXL0    2,,PR0

      573    12283    4                TAIL$ = WHICH$ -> VX$NODE.L_SC_STOP.SC_ROOT_LBL_COM$;

  12283  4 001655   200072 471500                    LDP1    WHICH$,,AUTO
         4 001656   100135 236100                    LDQ     93,,PR1
         4 001657   200067 756100                    STQ     TAIL$,,AUTO

      574    12284    5                IF TAIL$ = ADDR(NIL) THEN DO;

  12284  4 001660   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001661   001665 601000 4                  TNZ     s:12288

      575    12285    5                   WHICH$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$ = NEXT_FORCED_ROOT$;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:153  
  12285  4 001662   200062 236100                    LDQ     NEXT_FORCED_ROOT$,,AUTO
         4 001663   100131 756100                    STQ     89,,PR1

      576    12286    5                   END;

  12286  4 001664   001667 710000 4                  TRA     s:12290

      577    12287    5                ELSE DO;

      578    12288    5                   TAIL$ -> VX$SC.COM_LINK = DISP;

  12288  4 001665   200067 473500                    LDP3    TAIL$,,AUTO
         4 001666   300002 440100                    SXL0    2,,PR3

      579    12289    5                   END;                    /* Else do; */

      580    12290    4                WHICH$ -> VX$NODE.L_SC_STOP.SC_ROOT_LBL_COM$ = NEXT_FORCED_ROOT$;

  12290  4 001667   200062 236100                    LDQ     NEXT_FORCED_ROOT$,,AUTO
         4 001670   100135 756100                    STQ     93,,PR1

      581    12291    4                F_NAME_SIZEW = ( SEQ_MATCH$ -> B$DNAME.COUNT + 4/*@CHAR_WORD*/ + 1 ) /
             12291                         4/*@CHAR_WORD*/;

  12291  4 001671   200167 473500                    LDP3    SEQ_MATCH$,,AUTO
         4 001672   300000 236100                    LDQ     0,,PR3
         4 001673   000022 772000                    QRL     18
         4 001674   000005 036007                    ADLQ    5,DL
         4 001675   000002 772000                    QRL     2
         4 001676   200135 756100                    STQ     F_NAME_SIZEW,,AUTO

      582    12292    5                IF SIZE_AVAIL_NAME < F_NAME_SIZEW THEN DO;

  12292  4 001677   200133 116100                    CMPQ    SIZE_AVAIL_NAME,,AUTO
         4 001700   001734 602000 4                  TNC     s:12302
         4 001701   001734 600000 4                  TZE     s:12302

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:154  
      583    12293                        %ALLOCATE( PTR$=DUMMY$, TYPE=@DN_DS_1, SIZE=GET_NAME );

  12294  4 001702   000004 236000 xsym               LDQ     VX_M_ALL+4
         4 001703   000004 136000 xsym               SBLQ    VX_M_FREE+4
         4 001704   001717 604000 4                  TMI     s:12298
         4 001705   200132 116100                    CMPQ    GET_NAME,,AUTO
         4 001706   001717 602000 4                  TNC     s:12298

  12295  4 001707   000004 236000 xsym               LDQ     VX_M_FREE+4
         4 001710   000022 736000                    QLS     18
         4 001711   000004 036000 xsym               ADLQ    VX_M_BASE_PTR+4
         4 001712   200065 756100                    STQ     DUMMY$,,AUTO

  12296  4 001713   000004 236000 xsym               LDQ     VX_M_FREE+4
         4 001714   200132 036100                    ADLQ    GET_NAME,,AUTO
         4 001715   000004 756000 xsym               STQ     VX_M_FREE+4

  12297  4 001716   001731 710000 4                  TRA     s:12300

  12298  4 001717   200132 634500                    EPPR4   GET_NAME,,AUTO
         4 001720   200204 454500                    STP4    @I+3,,AUTO
         4 001721   000014 236000 5                  LDQ     12
         4 001722   200203 756100                    STQ     @I+2,,AUTO
         4 001723   200065 635500                    EPPR5   DUMMY$,,AUTO
         4 001724   200202 455500                    STP5    @I+1,,AUTO
         4 001725   200202 630500                    EPPR0   @I+1,,AUTO
         4 001726   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 001727   000000 701000 xent               TSX1    VXA$GET
         4 001730   000000 011000                    NOP     0

      584    12300    5                   SIZE_AVAIL_NAME = SIZE_AVAIL_NAME + GET_NAME;

  12300  4 001731   200133 236100                    LDQ     SIZE_AVAIL_NAME,,AUTO
         4 001732   200132 036100                    ADLQ    GET_NAME,,AUTO
         4 001733   200133 756100                    STQ     SIZE_AVAIL_NAME,,AUTO

      585    12301    5                   END;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:155  

      586    12302    4                NEXT_FORCED_ROOT_NAME$ -> B$DNAME.COUNT = SEQ_MATCH$ -> B$DNAME.COUNT;

  12302  4 001734   200167 470500                    LDP0    SEQ_MATCH$,,AUTO
         4 001735   000000 220100                    LDX0    0,,PR0
         4 001736   200063 471500                    LDP1    NEXT_FORCED_ROOT_NAME$,,AUTO
         4 001737   100000 740100                    STX0    0,,PR1

      587    12303    4                NEXT_FORCED_ROOT_NAME$ -> B$DNAME.TEXT = SEQ_MATCH$ -> B$DNAME.TEXT;

  12303  4 001740   200063 471500                    LDP1    NEXT_FORCED_ROOT_NAME$,,AUTO
         4 001741   100000 220100                    LDX0    0,,PR1
         4 001742   000000 221100                    LDX1    0,,PR0
         4 001743   040140 100540                    MLR     fill='040'O
         4 001744   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1
         4 001745   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0

      588    12304    4                NEXT_FORCED_ROOT$ -> VX$SC.NAME_DISP = POFFW( NEXT_FORCED_ROOT_NAME$,

  12304  4 001746   200064 235100                    LDA     DN_ROOT_START$,,AUTO
         4 001747   000022 771000                    ARL     18
         4 001750   200202 755100                    STA     @I+1,,AUTO
         4 001751   200063 236100                    LDQ     NEXT_FORCED_ROOT_NAME$,,AUTO
         4 001752   000022 772000                    QRL     18
         4 001753   200202 136100                    SBLQ    @I+1,,AUTO
         4 001754   000000 620006                    EAX0    0,QL
         4 001755   200062 471500                    LDP1    NEXT_FORCED_ROOT$,,AUTO
         4 001756   100001 740100                    STX0    1,,PR1

      589    12305    4                        DN_ROOT_START$ );
      590    12306    4               NEXT_FORCED_ROOT_NAME$ = PINCRW( NEXT_FORCED_ROOT_NAME$, F_NAME_SIZEW )
             12306                         ;

  12306  4 001757   200135 236100                    LDQ     F_NAME_SIZEW,,AUTO
         4 001760   000022 736000                    QLS     18
         4 001761   200063 036100                    ADLQ    NEXT_FORCED_ROOT_NAME$,,AUTO
         4 001762   200063 756100                    STQ     NEXT_FORCED_ROOT_NAME$,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:156  

      591    12307    4                SIZE_AVAIL_NAME = SIZE_AVAIL_NAME - F_NAME_SIZEW;

  12307  4 001763   200133 236100                    LDQ     SIZE_AVAIL_NAME,,AUTO
         4 001764   200135 136100                    SBLQ    F_NAME_SIZEW,,AUTO
         4 001765   200133 756100                    STQ     SIZE_AVAIL_NAME,,AUTO

      592    12308    4                NEXT_FORCED_ROOT$ = PINCRW( NEXT_FORCED_ROOT$, SIZEW( VX$SC ) );

  12308  4 001766   200062 236100                    LDQ     NEXT_FORCED_ROOT$,,AUTO
         4 001767   000003 036003                    ADLQ    3,DU
         4 001770   200062 756100                    STQ     NEXT_FORCED_ROOT$,,AUTO

      593    12309    4                SIZE_AVAIL = SIZE_AVAIL - SIZEW( VX$SC );

  12309  4 001771   200134 235100                    LDA     SIZE_AVAIL,,AUTO
         4 001772   000003 135007                    SBLA    3,DL
         4 001773   200134 755100                    STA     SIZE_AVAIL,,AUTO

      594    12310
      595    12311        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:157  
      596    12312    5                DO WHILE( '0'B );

  12312  4 001774   002134 710000 4                  TRA     s:12350

      597    12313    5   SET_FROM_ENTRY:
      598    12314        /*
      599    12315         Here we set from entry
      600    12316        */
      601    12317    5                   SC_CURR$ -> VX$SC.COM_LINK = POFFW( SEQ_TEMP$,  VX_SC_START$ );

  12317  4 001775   000000 235000 xsym  SET_FROM_EN* LDA     VX_SC_START$
         4 001776   000022 771000                    ARL     18
         4 001777   200202 755100                    STA     @I+1,,AUTO
         4 002000   200166 236100                    LDQ     SEQ_TEMP$,,AUTO
         4 002001   000022 772000                    QRL     18
         4 002002   200202 136100                    SBLQ    @I+1,,AUTO
         4 002003   000000 620006                    EAX0    0,QL
         4 002004   200050 474500                    LDP4    SC_CURR$,,AUTO
         4 002005   400002 440100                    SXL0    2,,PR4

      602    12318    5                   IF SEQ_TEMP$ -> VX$SC.SIZE < SC_CURR$ -> VX$SC.SIZE THEN

  12318  4 002006   400001 236100                    LDQ     1,,PR4
         4 002007   777777 376007                    ANQ     -1,DL
         4 002010   200202 756100                    STQ     @I+1,,AUTO
         4 002011   000001 236100                    LDQ     1,,PR0
         4 002012   777777 376007                    ANQ     -1,DL
         4 002013   200202 116100                    CMPQ    @I+1,,AUTO
         4 002014   002017 605000 4                  TPL     s:12320

      603    12319    5                      SEQ_TEMP$ -> VX$SC.SIZE = SC_CURR$ -> VX$SC.SIZE;

  12319  4 002015   400001 720100                    LXL0    1,,PR4
         4 002016   000001 440100                    SXL0    1,,PR0

      604    12320    5                   ABOVE_ALIGN = SEQ_TEMP$ -> VX$SC.ATTR.ALIGN;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:158  
  12320  4 002017   000000 236100                    LDQ     0,,PR0
         4 002020   000022 772000                    QRL     18
         4 002021   000003 376007                    ANQ     3,DL
         4 002022   200171 756100                    STQ     ABOVE_ALIGN,,AUTO

      605    12321    5                   BELOW_ALIGN = SC_CURR$ -> VX$SC.ATTR.ALIGN;

  12321  4 002023   400000 236100                    LDQ     0,,PR4
         4 002024   000022 772000                    QRL     18
         4 002025   000003 376007                    ANQ     3,DL
         4 002026   200174 756100                    STQ     BELOW_ALIGN,,AUTO

      606    12322    5                   IF (ABOVE_ALIGN ~= BELOW_ALIGN) AND

  12322  4 002027   200171 116100                    CMPQ    ABOVE_ALIGN,,AUTO
         4 002030   002056 600000 4                  TZE     s:12332
         4 002031   200171 235100                    LDA     ABOVE_ALIGN,,AUTO
         4 002032   000001 115007                    CMPA    1,DL
         4 002033   002036 600000 4                  TZE     s:12325
         4 002034   000001 116007                    CMPQ    1,DL
         4 002035   002056 601000 4                  TNZ     s:12332

      607    12323    5                           (ABOVE_ALIGN = 1 OR
      608    12324    6                           BELOW_ALIGN = 1) THEN DO;

      609    12325    6                      BELOW_TEMP$ = PINCRW( SC_NAME$, SC_CURR$ -> VX$SC.NAME_DISP );

  12325  4 002036   400001 220100                    LDX0    1,,PR4
         4 002037   000000 636010                    EAQ     0,X0
         4 002040   200054 036100                    ADLQ    SC_NAME$,,AUTO
         4 002041   200176 756100                    STQ     BELOW_TEMP$,,AUTO

      610    12326    6                      VX_EFIELD1.COUNT = BELOW_TEMP$ -> B$DNAME.COUNT;

  12326  4 002042   200176 471500                    LDP1    BELOW_TEMP$,,AUTO
         4 002043   100000 236100                    LDQ     0,,PR1
         4 002044   000011 736000                    QLS     9
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:159  
         4 002045   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      611    12327    6                      VX_EFIELD1.CHARS = BELOW_TEMP$ -> B$DNAME.TEXT;

  12327  4 002046   100000 221100                    LDX1    0,,PR1
         4 002047   040000 100540                    MLR     fill='040'O
         4 002050   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         4 002051   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      612    12328                           %SCREAM( ERR#=E$SC_ALIGN_VX, LEVEL=@E$W_VX, MID="'T'" );

  12329  4 002052   000051 630400 5                  EPPR0   41
         4 002053   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 002054   000000 701000 xent               TSX1    VXE$ERROR
         4 002055   000000 011000                    NOP     0

      613    12331    6                      END;

      614    12332    5                   IF ALIGN_PREC(ABOVE_ALIGN) < ALIGN_PREC(BELOW_ALIGN) THEN

  12332  4 002056   200174 720100                    LXL0    BELOW_ALIGN,,AUTO
         4 002057   200171 721100                    LXL1    ABOVE_ALIGN,,AUTO
         4 002060   000010 236011 2                  LDQ     ALIGN_PREC,X1
         4 002061   000010 116010 2                  CMPQ    ALIGN_PREC,X0
         4 002062   002071 603000 4                  TRC     s:12334

      615    12333    5                      SEQ_TEMP$ -> VX$SC.ATTR.ALIGN = BELOW_ALIGN;

  12333  4 002063   200166 470500                    LDP0    SEQ_TEMP$,,AUTO
         4 002064   200174 236100                    LDQ     BELOW_ALIGN,,AUTO
         4 002065   000022 736000                    QLS     18
         4 002066   000000 676100                    ERQ     0,,PR0
         4 002067   000003 376003                    ANQ     3,DU
         4 002070   000000 656100                    ERSQ    0,,PR0

      616    12334    5                   ABOVE_INIT = SEQ_TEMP$ -> VX$SC.ATTR.INT;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:160  
  12334  4 002071   200166 470500                    LDP0    SEQ_TEMP$,,AUTO
         4 002072   000000 236100                    LDQ     0,,PR0
         4 002073   000030 772000                    QRL     24
         4 002074   000003 376007                    ANQ     3,DL
         4 002075   200170 756100                    STQ     ABOVE_INIT,,AUTO

      617    12335    5                   BELOW_INIT = SC_CURR$ -> VX$SC.ATTR.INT;

  12335  4 002076   200050 471500                    LDP1    SC_CURR$,,AUTO
         4 002077   100000 236100                    LDQ     0,,PR1
         4 002100   000030 772000                    QRL     24
         4 002101   000003 376007                    ANQ     3,DL
         4 002102   200173 756100                    STQ     BELOW_INIT,,AUTO

      618    12336    5                   ABOVE_PREC = PREC( ABOVE_INIT );

  12336  4 002103   200170 722100                    LXL2    ABOVE_INIT,,AUTO
         4 002104   000004 235012 2                  LDA     PREC,X2
         4 002105   200172 755100                    STA     ABOVE_PREC,,AUTO

      619    12337    5                   BELOW_PREC = PREC( BELOW_INIT );

  12337  4 002106   000004 235006 2                  LDA     PREC,QL
         4 002107   200175 755100                    STA     BELOW_PREC,,AUTO

      620    12338    6                   IF ABOVE_PREC ~= BELOW_PREC THEN DO;

  12338  4 002110   200172 236100                    LDQ     ABOVE_PREC,,AUTO
         4 002111   200175 116100                    CMPQ    BELOW_PREC,,AUTO
         4 002112   002132 600000 4                  TZE     s:12346

      621    12339    6                      IF ABOVE_PREC < BELOW_PREC THEN

  12339  4 002113   002121 603000 4                  TRC     s:12341

      622    12340    6                         SEQ_TEMP$ -> VX$SC.ATTR.INT = BELOW_INIT;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:161  
  12340  4 002114   200173 236100                    LDQ     BELOW_INIT,,AUTO
         4 002115   000030 736000                    QLS     24
         4 002116   000000 676100                    ERQ     0,,PR0
         4 002117   000300 376003                    ANQ     192,DU
         4 002120   000000 656100                    ERSQ    0,,PR0

      623    12341    6                      IF ABOVE_PREC ~= 0  AND  BELOW_PREC ~= 0

  12341  4 002121   200172 236100                    LDQ     ABOVE_PREC,,AUTO
         4 002122   002132 600000 4                  TZE     s:12346
         4 002123   000000 115003                    CMPA    0,DU
         4 002124   002132 600000 4                  TZE     s:12346
         4 002125   000000 236100                    LDQ     0,,PR0
         4 002126   000004 316003                    CANQ    4,DU
         4 002127   002132 601000 4                  TNZ     s:12346

      624    12342    7                              AND NOT SEQ_TEMP$ -> VX$SC.ATTR.MES_INIT THEN DO;

      625    12343    7                         SEQ_TEMP$ -> VX$SC.ATTR.MES_INIT = '1'B/*@TRUE_B*/;

  12343  4 002130   000004 236003                    LDQ     4,DU
         4 002131   000000 256100                    ORSQ    0,,PR0

      626    12344    7                         END;              /* If ABOVE_PREC ~= 0 .... */

      627    12345    6                      END;               /* If ABOVE_PREC ~= BELOW_PREC then do; */

      628    12346    5                   SC_CURR$ -> VX$SC.ATTR.INT = 0;

  12346  4 002132   000026 236000 5                  LDQ     22
         4 002133   100000 356100                    ANSQ    0,,PR1

      629    12347    5                   END;                    /* Do never */

      630    12348
      631    12349
      632    12350    4                NEXT_SC_CURR$ = PINCRW( VX_SC_START$, SC_COM_LINK);
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:162  

  12350  4 002134   200145 236100                    LDQ     SC_COM_LINK,,AUTO
         4 002135   000022 736000                    QLS     18
         4 002136   000000 036000 xsym               ADLQ    VX_SC_START$
         4 002137   200071 756100                    STQ     NEXT_SC_CURR$,,AUTO

      633    12351    4                END;                   /* Do while( NEXT_SC_CURR$ ~= SC_CURR$ ); */

  12351  4 002140   200050 116100                    CMPQ    SC_CURR$,,AUTO
         4 002141   001533 601000 4                  TNZ     s:12252

      634    12352
      635    12353        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:163  
      636    12354    4             IF VX_CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO;

  12354  4 002142   000000 470400 xsym               LDP0    VX_CURR$
         4 002143   000000 236100                    LDQ     0,,PR0
         4 002144   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002145   002151 600000 4                  TZE     s:12359

      637    12355    4                VX_CURR$ -> VX$NODE.PATH$ = VX_CURR$ -> VX$NODE.SON$ ;

  12355  4 002146   000003 756100                    STQ     3,,PR0

      638    12356    4                VX_CURR$ = VX_CURR$ -> VX$NODE.SON$;

  12356  4 002147   000000 756000 xsym               STQ     VX_CURR$

      639    12357    4                END;

  12357  4 002150   002174 710000 4                  TRA     s:12369

      640    12358    4             ELSE DO;

      641    12359    5                DO WHILE(  VX_CURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );

  12359  4 002151   002157 710000 4                  TRA     s:12362

      642    12360    5                   VX_CURR$ = VX_CURR$ -> VX$NODE.FATHER$;

  12360  4 002152   000000 470400 xsym               LDP0    VX_CURR$
         4 002153   000002 236100                    LDQ     2,,PR0
         4 002154   000000 756000 xsym               STQ     VX_CURR$

      643    12361    5                   IF VX_CURR$ = ADDR(NIL) THEN GOTO EXIT1;

  12361  4 002155   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002156   002163 600000 4                  TZE     EXIT1

      644    12362    5                   END;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:164  

  12362  4 002157   000000 470400 xsym               LDP0    VX_CURR$
         4 002160   000001 236100                    LDQ     1,,PR0
         4 002161   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002162   002152 600000 4                  TZE     s:12360

  12359  4 002163                       EXIT1        null
      645    12363    4   EXIT1:       ;
      646    12364    5                IF VX_CURR$ ~= ADDR(NIL) THEN DO;

  12364  4 002163   000000 236000 xsym               LDQ     VX_CURR$
         4 002164   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002165   002174 600000 4                  TZE     s:12369

      647    12365    5                   VX_CURR$ = VX_CURR$ -> VX$NODE.BROTHER$;

  12365  4 002166   000000 470400 xsym               LDP0    VX_CURR$
         4 002167   000001 236100                    LDQ     1,,PR0
         4 002170   000000 756000 xsym               STQ     VX_CURR$

      648    12366    5                   VX_CURR$ -> VX$NODE.FATHER$ -> VX$NODE.PATH$ = VX_CURR$;

  12366  4 002171   000000 470400 xsym               LDP0    VX_CURR$
         4 002172   000002 471500                    LDP1    2,,PR0
         4 002173   100003 756100                    STQ     3,,PR1

      649    12367    5                   END;

      650    12368    4                END;                       /* Else do; */

      651    12369    3             END;                          /* Do while( VX_CURR$ ~= addr(nil) ); */

  12369  4 002174   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002175   001223 601000 4                  TNZ     s:12160

      652    12370    2          END;                             /* Do i = START_TIMES to 1; */

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:165  
  12370  4 002176   200107 235100                    LDA     I,,AUTO
         4 002177   000001 035007                    ADLA    1,DL
         4 002200   200107 755100                    STA     I,,AUTO
         4 002201   000002 115007                    CMPA    2,DL
         4 002202   001220 602000 4                  TNC     s:12157

      653    12371
      654    12372
      655    12373
      656    12374        /*E*  ERROR: VXT-E$SC_ALIGN_VX-0
      657    12375              MESSAGE: Odd and non-odd  alignment requested for common/external
      658    12376                       section %U1.  Forced to non-odd.
      659    12377              DESCRIPTION: Self-explanatory.
      660    12378        */
      661    12379        /*E*  ERROR: VXT-E$SC_INIT_VX-0
      662    12380              MESSAGE: Multiple initialization values for common/external
      663    12381                       section %U1.  Will initialize with %U2.
      664    12382              DESCRIPTION: Self-explanatory.
      665    12383        */
      666    12384
      667    12385
      668    12386
      669    12387
      670    12388        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:166  
      671    12389    1   DO_ALLOCATION:
      672    12390    2       IF PROMOTE_SIZE > 0 THEN DO;

  12390  4 002203   200147 236100       DO_ALLOCATI* LDQ     PROMOTE_SIZE,,AUTO
         4 002204   002217 600000 4                  TZE     s:12393

      673    12391    2          CALL VXF$FREE( 5/*@ED_DS_1*/, PROMOTE_SIZE, 1 );

  12391  4 002205   000002 236000 5                  LDQ     2
         4 002206   200204 756100                    STQ     @I+3,,AUTO
         4 002207   200147 630500                    EPPR0   PROMOTE_SIZE,,AUTO
         4 002210   200203 450500                    STP0    @I+2,,AUTO
         4 002211   000000 236000 5                  LDQ     0
         4 002212   200202 756100                    STQ     @I+1,,AUTO
         4 002213   200202 630500                    EPPR0   @I+1,,AUTO
         4 002214   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 002215   000000 701000 xent               TSX1    VXF$FREE
         4 002216   000000 011000                    NOP     0

      674    12392    2          END;

      675    12393    1       BLK_COM$ = ADDR(NIL);

  12393  4 002217   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 002220   200040 756100                    STQ     BLK_COM$,,AUTO

      676    12394    1       BLK_CHAIN$ = ADDR(NIL);

  12394  4 002221   200041 756100                    STQ     BLK_CHAIN$,,AUTO

      677    12395    1       INTERNAL_ALL_BLK_COM = '0'B/*@FALSE_B*/;

  12395  4 002222   200004 450100                    STZ     INTERNAL_ALL_BLK_COM,,AUTO

      678    12396    1       IF VX_CHK_BLANK_COM_PROMOTE AND VX_NODE_NUMBER > 0 AND

  12396  4 002223   000000 234000 xsym               SZN     VX_CHK_BLANK_COM_PROMOTE
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:167  
         4 002224   002314 605000 4                  TPL     s:12433
         4 002225   000000 235000 xsym               LDA     VX_NODE_NUMBER
         4 002226   002314 604400 4                  TMOZ    s:12433
         4 002227   000000 235000 xsym               LDA     VX_BLK_COM_COUNT
         4 002230   002314 600000 4                  TZE     s:12433

      679    12397    2               VX_BLK_COM_COUNT > 0 THEN DO;

      680    12398    2          BLK_COUNT = 0;

  12398  4 002231   200161 450100                    STZ     BLK_COUNT,,AUTO

      681    12399    3          DO WHILE( '1'B );

      682    12400    3             BLK_COM$ = VX_SC_BLANK_COM_PROMOTE$;

  12400  4 002232   000000 236000 xsym               LDQ     VX_SC_BLANK_COM_PROMOTE$
         4 002233   200040 756100                    STQ     BLK_COM$,,AUTO

      683    12401    4             DO WHILE( '1'B );

      684    12402    5                IF BLK_COM$ -> VX$NODE.ALL_BLK_COM THEN DO;

  12402  4 002234   200040 470500                    LDP0    BLK_COM$,,AUTO
         4 002235   000144 236100                    LDQ     100,,PR0
         4 002236   200000 316003                    CANQ    65536,DU
         4 002237   002245 600000 4                  TZE     s:12406

      685    12403    5                   BLK_COUNT = BLK_COUNT + 1;

  12403  4 002240   200161 235100                    LDA     BLK_COUNT,,AUTO
         4 002241   000001 035007                    ADLA    1,DL
         4 002242   200161 755100                    STA     BLK_COUNT,,AUTO

      686    12404    5                   BLK_COM$ -> VX$NODE.ALL_BLK_COM = '0'B/*@FALSE_B*/;

  12404  4 002243   000055 236000 5                  LDQ     45
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:168  
         4 002244   000144 356100                    ANSQ    100,,PR0

      687    12405    5                   END;          /* If BLK_COM$ -> VX$NODE.ALL_BLK_COM then do; */

      688    12406    5                IF BLK_COM$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO;
             12406                         /* Move to eldest son */

  12406  4 002245   000000 236100                    LDQ     0,,PR0
         4 002246   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002247   002252 600000 4                  TZE     s:12410

      689    12407    5                   BLK_COM$ = BLK_COM$ -> VX$NODE.SON$;

  12407  4 002250   200040 756100                    STQ     BLK_COM$,,AUTO

      690    12408    5                   END;

  12408  4 002251   002234 710000 4                  TRA     s:12402

      691    12409    5                ELSE DO;

      692    12410    5                   IF BLK_COM$ = VX_SC_BLANK_COM_PROMOTE$ THEN

  12410  4 002252   200040 236100                    LDQ     BLK_COM$,,AUTO
         4 002253   000000 116000 xsym               CMPQ    VX_SC_BLANK_COM_PROMOTE$
         4 002254   002273 600000 4                  TZE     BLANK_COMMON_PROMOTE_CLIMB_UP

      693    12411    5                      GOTO BLANK_COMMON_PROMOTE_CLIMB_UP;
      694    12412    6                   DO WHILE( BLK_COM$ -> VX$NODE.FATHER$ = ADDR(NIL) );

  12412  4 002255   002264 710000 4                  TRA     s:12417

      695    12413    6                      IF BLK_COM$ = VX_SC_BLANK_COM_PROMOTE$ THEN

  12413  4 002256   200040 236100                    LDQ     BLK_COM$,,AUTO
         4 002257   000000 116000 xsym               CMPQ    VX_SC_BLANK_COM_PROMOTE$
         4 002260   002273 600000 4                  TZE     BLANK_COMMON_PROMOTE_CLIMB_UP
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:169  

      696    12414    6                         GOTO BLANK_COMMON_PROMOTE_CLIMB_UP;
      697    12415                                                /* Move to an ancestor */
      698    12416    6                      BLK_COM$ = BLK_COM$ -> VX$NODE.FATHER$; /* Move up */

  12416  4 002261   200040 470500                    LDP0    BLK_COM$,,AUTO
         4 002262   000002 236100                    LDQ     2,,PR0
         4 002263   200040 756100                    STQ     BLK_COM$,,AUTO

      699    12417    6                      END;

  12417  4 002264   200040 470500                    LDP0    BLK_COM$,,AUTO
         4 002265   000002 236100                    LDQ     2,,PR0
         4 002266   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002267   002256 600000 4                  TZE     s:12413

      700    12418    5                   BLK_COM$ = BLK_COM$ -> VX$NODE.BROTHER$; /* Move to a brother */

  12418  4 002270   000001 236100                    LDQ     1,,PR0
         4 002271   200040 756100                    STQ     BLK_COM$,,AUTO

      701    12419    5                   END;                    /* Else do */

      702    12420    4                END;                       /* Do forever */

  12420  4 002272   002234 710000 4                  TRA     s:12402

      703    12421    3   BLANK_COMMON_PROMOTE_CLIMB_UP:
      704    12422    3             IF VX_SC_BLANK_COM_PROMOTE$ = VX_ROOT$

  12422  4 002273   000000 236000 xsym  BLANK_COMMO* LDQ     VX_SC_BLANK_COM_PROMOTE$
         4 002274   000000 116000 xsym               CMPQ    VX_ROOT$
         4 002275   002305 600000 4                  TZE     AT_ROOT
         4 002276   200161 236100                    LDQ     BLK_COUNT,,AUTO
         4 002277   000000 116000 xsym               CMPQ    VX_BLK_COM_COUNT
         4 002300   002305 603000 4                  TRC     AT_ROOT

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:170  
      705    12423    3                     OR BLK_COUNT >= VX_BLK_COM_COUNT THEN GOTO AT_ROOT;
      706    12424    3             VX_SC_BLANK_COM_PROMOTE$ = VX_SC_BLANK_COM_PROMOTE$ -> VX$NODE.FATHER$;

  12424  4 002301   000000 470400 xsym               LDP0    VX_SC_BLANK_COM_PROMOTE$
         4 002302   000002 236100                    LDQ     2,,PR0
         4 002303   000000 756000 xsym               STQ     VX_SC_BLANK_COM_PROMOTE$

      707    12425    3             END;                          /* Do forever */

  12425  4 002304   002232 710000 4                  TRA     s:12400

      708    12426
      709    12427    2   AT_ROOT:
      710    12428    2          VX_SC_BLANK_COM_PROMOTE$ -> VX$NODE.ALL_BLK_COM = '1'B/*@TRUE_B*/;

  12428  4 002305   000000 470400 xsym  AT_ROOT      LDP0    VX_SC_BLANK_COM_PROMOTE$
         4 002306   200000 236003                    LDQ     65536,DU
         4 002307   000144 256100                    ORSQ    100,,PR0

      711    12429    2          VX_SC_BLANK_COM_PROMOTE$ -> VX$NODE.BLANK_COMMON$ -> VX$SC =
             12429                   VX_SC_BLANK_COMMON;

  12429  4 002310   000145 471500                    LDP1    101,,PR0
         4 002311   000100 100400                    MLR     fill='000'O
         4 002312   000000 000014 xsym               ADSC9   VX_SC_BLANK_COMMON       cn=0,n=12
         4 002313   100000 000014                    ADSC9   0,,PR1                   cn=0,n=12

      712    12430    2          END;         /* If VX_CHK_BLANK_COM_PROMOTE and VX_NODE_NUMBER > 0 ... */

      713    12431
      714    12432        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:171  
      715    12433    2       DO I = 0/*@DATA*/ TO 1/*@PROC*/;

  12433  4 002314   200107 450100                    STZ     I,,AUTO

      716    12434    3          IF I = 1 THEN DO;                /* Moving from data to procedure */

  12434  4 002315   200107 235100                    LDA     I,,AUTO
         4 002316   000001 115007                    CMPA    1,DL
         4 002317   002413 601000 4                  TNZ     s:12482

      717    12435    3             ADR = MAX_EADR(0/*@DATA*/);

  12435  4 002320   000003 236000 3                  LDQ     MAX_EADR
         4 002321   200122 756100                    STQ     ADR,,AUTO

      718    12436    3             PAGE_ADR = ( ADR + 1023/*@PAGE_SIZE1*/ ) / 1024/*@PAGE_SIZE*/ * 1024
             12436                      /*@PAGE_SIZE*/;

  12436  4 002322   001777 036007                    ADLQ    1023,DL
         4 002323   002000 506007                    DIV     1024,DL
         4 002324   000012 736000                    QLS     10
         4 002325   200123 756100                    STQ     PAGE_ADR,,AUTO

      719    12437    3             IF MOD( ADR, 1024/*@PAGE_SIZE*/ ) = 0 THEN PAGE_ADR = PAGE_ADR + 1024
             12437                      /*@PAGE_SIZE*/;

  12437  4 002326   200122 236100                    LDQ     ADR,,AUTO
         4 002327   002000 506007                    DIV     1024,DL
         4 002330   000044 733000                    LRS     36
         4 002331   000000 116003                    CMPQ    0,DU
         4 002332   002336 601000 4                  TNZ     s:12438

  12437  4 002333   200123 235100                    LDA     PAGE_ADR,,AUTO
         4 002334   002000 035007                    ADLA    1024,DL
         4 002335   200123 755100                    STA     PAGE_ADR,,AUTO

      720    12438    4             IF VX_O.NUM.PBIAS >= 0 THEN DO;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:172  

  12438  4 002336   000040 235000 xsym               LDA     VX_O+32
         4 002337   002372 604000 4                  TMI     s:12468

      721    12439    5                IF VX_O.NUM.PBIAS < PAGE_ADR THEN DO; /* Oops */

  12439  4 002340   000040 236000 xsym               LDQ     VX_O+32
         4 002341   002344 604000 4                  TMI     s:12451
         4 002342   200123 116100                    CMPQ    PAGE_ADR,,AUTO
         4 002343   002371 603000 4                  TRC     s:12466

      722    12440        /*E*  ERROR: VXT-E$ALL_X_BOUNDARY_VX-0
      723    12441              MESSAGE: Explicit procedure boundary %U1 is within data area.
      724    12442                       %U2 used.
      725    12443              DESCRIPTION: Self-explanatory.
      726    12444        */
      727    12445                        %NUMBER( NUM1="VX_O.NUM.PBIAS",BASE1=8, NUM2=PAGE_ADR, BASE2=8);

  12451  4 002344   000056 630400 5                  EPPR0   46
         4 002345   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 002346   000000 701000 xent               TSX1    VXD$B2C
         4 002347   000000 011000                    NOP     0

  12455  4 002350   000031 236000 5                  LDQ     25
         4 002351   200206 756100                    STQ     @I+5,,AUTO
         4 002352   200123 630500                    EPPR0   PAGE_ADR,,AUTO
         4 002353   200205 450500                    STP0    @I+4,,AUTO
         4 002354   000064 236000 5                  LDQ     52
         4 002355   200204 756100                    STQ     @I+3,,AUTO
         4 002356   000066 237000 5                  LDAQ    54
         4 002357   200202 757100                    STAQ    @I+1,,AUTO
         4 002360   200202 630500                    EPPR0   @I+1,,AUTO
         4 002361   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 002362   000000 701000 xent               TSX1    VXD$B2C
         4 002363   000000 011000                    NOP     0

      728    12462                        %SCREAM( ERR#=E$ALL_X_BOUNDARY_VX, LEVEL=E$S_VX, MID="'T'" );
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:173  

  12463  4 002364   000071 630400 5                  EPPR0   57
         4 002365   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 002366   000000 701000 xent               TSX1    VXE$ERROR
         4 002367   000000 011000                    NOP     0

      729    12465    5                   END;

  12465  4 002370   002372 710000 4                  TRA     s:12468

      730    12466    4                ELSE PAGE_ADR = VX_O.NUM.PBIAS;

  12466  4 002371   200123 756100                    STQ     PAGE_ADR,,AUTO

      731    12467    4                END;                       /* If VX_O.OPT.PBIAS >= 0 */

      732    12468    3             MAX_EADR(1/*@PROC*/) = PAGE_ADR - 1;

  12468  4 002372   200123 235100                    LDA     PAGE_ADR,,AUTO
         4 002373   000001 135007                    SBLA    1,DL
         4 002374   000004 755000 3                  STA     MAX_EADR+1

      733    12469    3             MAX_BADR(1/*@PROC*/) = PAGE_ADR;

  12469  4 002375   200123 236100                    LDQ     PAGE_ADR,,AUTO
         4 002376   000001 756000 3                  STQ     MAX_BADR+1

      734    12470    3             VX_PROGRAM_BIAS.A(1/*@PROC*/) = MAX_BADR(1/*@PROC*/);

  12470  4 002377   000001 756000 xsym               STQ     VX_PROGRAM_BIAS+1

      735    12471    3             ADR = PAGE_ADR + VX_BIAS.A(1/*@PROC*/);

  12471  4 002400   000001 036000 xsym               ADLQ    VX_BIAS+1
         4 002401   200122 756100                    STQ     ADR,,AUTO

      736    12472        /*
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:174  
      737    12473                                  Allocate bref space
      738    12474        */
      739    12475    3             IF VX_O.NUM.BREF > 0

  12475  4 002402   000035 235000 xsym               LDA     VX_O+29
         4 002403   002413 604400 4                  TMOZ    s:12482
         4 002404   000000 235000 xsym               LDA     VX_NODE_NUMBER
         4 002405   002413 604400 4                  TMOZ    s:12482

      740    12476    3                     AND
      741    12477    4                     VX_NODE_NUMBER > 0 THEN DO;

      742    12478    4                VX_BREF_ADR = ADR;

  12478  4 002406   000000 756000 xsym               STQ     VX_BREF_ADR

      743    12479    4                ADR = ADR + VX_O.NUM.BREF * SIZEW(VX$BREF);

  12479  4 002407   000035 236000 xsym               LDQ     VX_O+29
         4 002410   000001 736000                    QLS     1
         4 002411   200122 036100                    ADLQ    ADR,,AUTO
         4 002412   200122 756100                    STQ     ADR,,AUTO

      744    12480    4                END;     /* If VX_O.NUM.BREF > 0 and VX_NODE_NUMBER > 0 then do; */

      745    12481    3             END;                          /* If i = 1 then do; */

      746    12482    2          CURR$ = VX_ROOT$;

  12482  4 002413   000000 236000 xsym               LDQ     VX_ROOT$
         4 002414   200033 756100                    STQ     CURR$,,AUTO

      747    12483
      748    12484    3          DO WHILE( CURR$ ~= ADDR(NIL) );

  12484  4 002415   004021 710000 4                  TRA     s:12908

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:175  
      749    12485    3             CURR$ -> VX$NODE.ADDR_START_A(I) = ADR; /* Set address start */

  12485  4 002416   200033 470500                    LDP0    CURR$,,AUTO
         4 002417   200107 720100                    LXL0    I,,AUTO
         4 002420   200122 235100                    LDA     ADR,,AUTO
         4 002421   000012 755110                    STA     10,X0,PR0

      750    12486    3             NODE#    = CURR$ -> VX$NODE.NUM;

  12486  4 002422   000010 235100                    LDA     8,,PR0
         4 002423   200113 755100                    STA     NODE#,,AUTO

      751    12487    4             IF I = 0/*@DATA*/ THEN DO;

  12487  4 002424   200107 236100                    LDQ     I,,AUTO
         4 002425   002433 601000 4                  TNZ     s:12492

      752    12488    4                NEXT_SC_CURR$ = CURR$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$;

  12488  4 002426   000131 236100                    LDQ     89,,PR0
         4 002427   200071 756100                    STQ     NEXT_SC_CURR$,,AUTO

      753    12489    4                K = 384;

  12489  4 002430   000600 235007                    LDA     384,DL
         4 002431   200111 755100                    STA     K,,AUTO

      754    12490    4                END;                       /* If i = @DATA then do; */

  12490  4 002432   002437 710000 4                  TRA     s:12495

      755    12491    4             ELSE DO;

      756    12492    4                NEXT_SC_CURR$ = CURR$ -> VX$NODE.L_SC_START.SC_DCB$;

  12492  4 002433   000133 236100                    LDQ     91,,PR0
         4 002434   200071 756100                    STQ     NEXT_SC_CURR$,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:176  

      757    12493    4                K = 256;

  12493  4 002435   000400 235007                    LDA     256,DL
         4 002436   200111 755100                    STA     K,,AUTO

      758    12494    4                END;                       /* else do; */

      759    12495    3             SC_CURR$      = ADDR(NIL);

  12495  4 002437   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 002440   200050 756100                    STQ     SC_CURR$,,AUTO

      760    12496    4             DO WHILE( NEXT_SC_CURR$ ~= SC_CURR$ );

  12496  4 002441   200071 116100                    CMPQ    NEXT_SC_CURR$,,AUTO
         4 002442   002634 600000 4                  TZE     s:12547

      761    12497    4                SC_CURR$ = NEXT_SC_CURR$;

  12497  4 002443   200071 236100                    LDQ     NEXT_SC_CURR$,,AUTO
         4 002444   200050 756100                    STQ     SC_CURR$,,AUTO

      762    12498    4                IF I > 0/*@DATA*/

  12498  4 002445   200107 235100                    LDA     I,,AUTO
         4 002446   002555 600000 4                  TZE     s:12527

      763    12499    5                THEN DO;

      764    12500    5                   IF SC_CURR$ -> VX$SC.ATTR.ALL

  12500  4 002447   200050 470500                    LDP0    SC_CURR$,,AUTO
         4 002450   000000 236100                    LDQ     0,,PR0
         4 002451   000020 316003                    CANQ    16,DU
         4 002452   002471 600000 4                  TZE     s:12509

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:177  
      765    12501    6                   THEN DO;

      766    12502    6                      HEAD$ = PINCRW (VX_SC_START$, SC_CURR$ -> VX$SC.ADDRESS);

  12502  4 002453   000000 720100                    LXL0    0,,PR0
         4 002454   000000 636010                    EAQ     0,X0
         4 002455   000000 036000 xsym               ADLQ    VX_SC_START$
         4 002456   200066 756100                    STQ     HEAD$,,AUTO

      767    12503    6                      SC_CURR$ -> VX$SC.SIZE = HEAD$ -> VX$SC.SIZE;

  12503  4 002457   200066 471500                    LDP1    HEAD$,,AUTO
         4 002460   100001 721100                    LXL1    1,,PR1
         4 002461   000001 441100                    SXL1    1,,PR0

      768    12504    6                      SC_CURR$ -> VX$SC.ADDRESS = HEAD$ -> VX$SC.ADDRESS;

  12504  4 002462   100000 722100                    LXL2    0,,PR1
         4 002463   000000 442100                    SXL2    0,,PR0

      769    12505    6                      SC_CURR$ -> VX$SC.SEG = HEAD$ -> VX$SC.SEG;

  12505  4 002464   100000 236100                    LDQ     0,,PR1
         4 002465   000000 676100                    ERQ     0,,PR0
         4 002466   700000 376003                    ANQ     -32768,DU
         4 002467   000000 656100                    ERSQ    0,,PR0

      770    12506    6                      GOTO ALLOCED;

  12506  4 002470   002624 710000 4                  TRA     ALLOCED

      771    12507    6                      END;
      772    12508    6                   ELSE DO;

      773    12509    6                      HEAD$ = SC_CURR$;

  12509  4 002471   200050 236100                    LDQ     SC_CURR$,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:178  
         4 002472   200066 756100                    STQ     HEAD$,,AUTO

      774    12510    6                      TAIL$ = PINCRW (VX_SC_START$, HEAD$ -> VX$SC.COM_LINK);

  12510  4 002473   200066 471500                    LDP1    HEAD$,,AUTO
         4 002474   100002 720100                    LXL0    2,,PR1
         4 002475   000000 636010                    EAQ     0,X0
         4 002476   000000 036000 xsym               ADLQ    VX_SC_START$
         4 002477   200067 756100                    STQ     TAIL$,,AUTO

      775    12511    7                      DO WHILE (HEAD$ ~= TAIL$);

  12511  4 002500   200066 116100                    CMPQ    HEAD$,,AUTO
         4 002501   002555 600000 4                  TZE     s:12527

      776    12512    7                         IF PINCRW (SC_NAME$, SC_CURR$-> VX$SC.NAME_DISP) ->

  12512  4 002502   200050 470500                    LDP0    SC_CURR$,,AUTO
         4 002503   000001 220100                    LDX0    1,,PR0
         4 002504   200054 471500                    LDP1    SC_NAME$,,AUTO
         4 002505   100000 221110                    LDX1    0,X0,PR1
         4 002506   200067 473500                    LDP3    TAIL$,,AUTO
         4 002507   300001 222100                    LDX2    1,,PR3
         4 002510   100000 223112                    LDX3    0,X2,PR1
         4 002511   000000 635010                    EAA     0,X0
         4 002512   000020 731000                    ARS     16
         4 002513   000000 636012                    EAQ     0,X2
         4 002514   000020 732000                    QRS     16
         4 002515   040146 106545                    CMPC    fill='040'O
         4 002516   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         4 002517   100000 400013                    ADSC9   0,Q,PR1                  cn=2,n=*X3
         4 002520   002544 601000 4                  TNZ     s:12522

      777    12513    7                                 B$DNAME.TEXT =
      778    12514    7                                 PINCRW (SC_NAME$, TAIL$ -> VX$SC.NAME_DISP) ->
      779    12515    7                                 B$DNAME.TEXT
      780    12516    8                         THEN DO;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:179  

      781    12517    8                            TAIL$ -> VX$SC.ATTR.ALL = '1'B;

  12517  4 002521   000020 236003                    LDQ     16,DU
         4 002522   300000 256100                    ORSQ    0,,PR3

      782    12518    8                            TAIL$ -> VX$SC.ADDRESS = POFFW (SC_CURR$, VX_SC_START$);

  12518  4 002523   000000 235000 xsym               LDA     VX_SC_START$
         4 002524   000022 771000                    ARL     18
         4 002525   200202 755100                    STA     @I+1,,AUTO
         4 002526   200050 236100                    LDQ     SC_CURR$,,AUTO
         4 002527   000022 772000                    QRL     18
         4 002530   200202 136100                    SBLQ    @I+1,,AUTO
         4 002531   000000 620006                    EAX0    0,QL
         4 002532   300000 440100                    SXL0    0,,PR3

      783    12519    8                            IF TAIL$ -> VX$SC.SIZE > SC_CURR$ -> VX$SC.SIZE

  12519  4 002533   300001 236100                    LDQ     1,,PR3
         4 002534   777777 376007                    ANQ     -1,DL
         4 002535   200202 756100                    STQ     @I+1,,AUTO
         4 002536   000001 236100                    LDQ     1,,PR0
         4 002537   777777 376007                    ANQ     -1,DL
         4 002540   200202 116100                    CMPQ    @I+1,,AUTO
         4 002541   002544 605000 4                  TPL     s:12522

      784    12520    8                            THEN SC_CURR$ -> VX$SC.SIZE = TAIL$ -> VX$SC.SIZE;

  12520  4 002542   300001 720100                    LXL0    1,,PR3
         4 002543   000001 440100                    SXL0    1,,PR0

      785    12521    8                            END;

      786    12522    7                         HEAD$ = TAIL$;

  12522  4 002544   200067 236100                    LDQ     TAIL$,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:180  
         4 002545   200066 756100                    STQ     HEAD$,,AUTO

      787    12523    7                         TAIL$ = PINCRW (VX_SC_START$, HEAD$ -> VX$SC.COM_LINK);

  12523  4 002546   200066 474500                    LDP4    HEAD$,,AUTO
         4 002547   400002 720100                    LXL0    2,,PR4
         4 002550   000000 636010                    EAQ     0,X0
         4 002551   000000 036000 xsym               ADLQ    VX_SC_START$
         4 002552   200067 756100                    STQ     TAIL$,,AUTO

      788    12524    7                         END;

  12524  4 002553   200066 116100                    CMPQ    HEAD$,,AUTO
         4 002554   002502 601000 4                  TNZ     s:12512

      789    12525    6                      END;

      790    12526    5                   END;

      791    12527    4                IF SC_CURR$ -> VX$SC.ATTR.SEGMENT THEN CALL ALOC_SEG;

  12527  4 002555   200050 470500                    LDP0    SC_CURR$,,AUTO
         4 002556   000000 236100                    LDQ     0,,PR0
         4 002557   000040 316003                    CANQ    32,DU
         4 002560   002564 600000 4                  TZE     s:12529

  12527  4 002561   004031 701000 4                  TSX1    ALOC_SEG
         4 002562   000000 011000                    NOP     0
         4 002563   002615 710000 4                  TRA     s:12542

      792    12528    5                ELSE DO;

      793    12529    5                   ALIGN = SC_CURR$ -> VX$SC.ATTR.ALIGN;

  12529  4 002564   000000 236100                    LDQ     0,,PR0
         4 002565   000022 772000                    QRL     18
         4 002566   000003 376007                    ANQ     3,DL
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:181  
         4 002567   200126 756100                    STQ     ALIGN,,AUTO

      794    12530                        %ALIGN;

  12531  4 002570   000001 116007                    CMPQ    1,DL
         4 002571   002576 601000 4                  TNZ     s:12535

  12532  4 002572   000001 236007                    LDQ     1,DL
         4 002573   200122 276100                    ORQ     ADR,,AUTO
         4 002574   200122 756100                    STQ     ADR,,AUTO

  12533  4 002575   002607 710000 4                  TRA     s:12539

  12535  4 002576   000000 620006                    EAX0    0,QL
         4 002577   200122 236100                    LDQ     ADR,,AUTO
         4 002600   000000 376010 2                  ANQ     MODMSKS,X0
         4 002601   002607 600000 4                  TZE     s:12539

  12536  4 002602   200126 720100                    LXL0    ALIGN,,AUTO
         4 002603   200122 236100                    LDQ     ADR,,AUTO
         4 002604   000000 276010 2                  ORQ     MODMSKS,X0
         4 002605   000001 036007                    ADLQ    1,DL
         4 002606   200122 756100                    STQ     ADR,,AUTO

      795    12539    5                   SC_CURR$ -> VX$SC.ADDRESS = ADR;

  12539  4 002607   200122 720100                    LXL0    ADR,,AUTO
         4 002610   000000 440100                    SXL0    0,,PR0

      796    12540    5                   ADR = ADR + SC_CURR$ -> VX$SC.SIZE;

  12540  4 002611   000001 236100                    LDQ     1,,PR0
         4 002612   777777 376007                    ANQ     -1,DL
         4 002613   200122 036100                    ADLQ    ADR,,AUTO
         4 002614   200122 756100                    STQ     ADR,,AUTO

      797    12541    5                   END;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:182  

      798    12542    4                PINCRW( VX_SC_START$, SC_CURR$ -> VX$SC.NODE# ) -> VX$SC.ATTR =
             12542                         SC_CURR$ -> VX$SC.ATTR;

  12542  4 002615   200050 470500                    LDP0    SC_CURR$,,AUTO
         4 002616   000002 220100                    LDX0    2,,PR0
         4 002617   000000 471400 xsym               LDP1    VX_SC_START$
         4 002620   000000 236100                    LDQ     0,,PR0
         4 002621   100000 676110                    ERQ     0,X0,PR1
         4 002622   000377 376003                    ANQ     255,DU
         4 002623   100000 656110                    ERSQ    0,X0,PR1

      799    12543    4   ALLOCED:
      800    12544    4                SC_CURR$ -> VX$SC.NODE# = NODE#;

  12544  4 002624   200113 720100       ALLOCED      LXL0    NODE#,,AUTO
         4 002625   000002 740100                    STX0    2,,PR0

      801    12545    4                NEXT_SC_CURR$ = PINCRW( VX_SC_START$, SC_CURR$ -> VX$SC.COM_LINK );

  12545  4 002626   000002 721100                    LXL1    2,,PR0
         4 002627   000000 636011                    EAQ     0,X1
         4 002630   000000 036000 xsym               ADLQ    VX_SC_START$
         4 002631   200071 756100                    STQ     NEXT_SC_CURR$,,AUTO

      802    12546    4                END;                   /* Do while( NEXT_SC_CURR$ ~= SC_CURR$ ); */

  12546  4 002632   200050 116100                    CMPQ    SC_CURR$,,AUTO
         4 002633   002443 601000 4                  TNZ     s:12497

      803    12547    3             SC_CURR$ = CURR$ -> VX$NODE.L_START.SC$; /* Get start of sections */

  12547  4 002634   200033 470500                    LDP0    CURR$,,AUTO
         4 002635   000033 236100                    LDQ     27,,PR0
         4 002636   200050 756100                    STQ     SC_CURR$,,AUTO

      804    12548    3             SC_STOP$ = CURR$ -> VX$NODE.L_STOP.SC$; /* Get stop of sections */
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:183  

  12548  4 002637   000045 236100                    LDQ     37,,PR0
         4 002640   200053 756100                    STQ     SC_STOP$,,AUTO

      805    12549    3             SC_NAME$ = CURR$ -> VX$NODE.L_START.DN$;

  12549  4 002641   000031 236100                    LDQ     25,,PR0
         4 002642   200054 756100                    STQ     SC_NAME$,,AUTO

      806    12550    4             DO WHILE ( SC_CURR$ <= SC_STOP$ ); /* Now do sections */

  12550  4 002643   200053 236100                    LDQ     SC_STOP$,,AUTO
         4 002644   200050 116100                    CMPQ    SC_CURR$,,AUTO
         4 002645   003544 602000 4                  TNC     s:12810

      807    12551    4                SC_TYPE = SC_CURR$ -> VX$SC.TYPE; /* Get section type */

  12551  4 002646   200050 470500                    LDP0    SC_CURR$,,AUTO
         4 002647   000000 236100                    LDQ     0,,PR0
         4 002650   000033 772000                    QRL     27
         4 002651   000077 376007                    ANQ     63,DL
         4 002652   200121 756100                    STQ     SC_TYPE,,AUTO

      808    12552    5                DO CASE( I );

  12552  4 002653   200107 235100                    LDA     I,,AUTO
         4 002654   000002 115007                    CMPA    2,DL
         4 002655   002657 602005 4                  TNC     s:12552+4,AL
         4 002656   003470 710000 4                  TRA     SET_ADDRESS
         4 002657   002661 710000 4                  TRA     s:12555
         4 002660   003445 710000 4                  TRA     s:12772

      809    12553        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:184  
      810    12554    5                CASE( 0/*@DATA*/ ); /*Looking only for sections which map into data */

      811    12555    6                  DO CASE( SC_TYPE );

  12555  4 002661   000011 116007                    CMPQ    9,DL
         4 002662   002664 602006 4                  TNC     s:12555+3,QL
         4 002663   003424 710000 4                  TRA     BAD_SC_TYPE
         4 002664   002675 710000 4                  TRA     s:12557
         4 002665   003423 710000 4                  TRA     s:12742
         4 002666   002705 710000 4                  TRA     s:12564
         4 002667   002745 710000 4                  TRA     s:12581
         4 002670   002745 710000 4                  TRA     s:12581
         4 002671   002761 710000 4                  TRA     s:12592
         4 002672   003423 710000 4                  TRA     s:12742
         4 002673   003423 710000 4                  TRA     s:12742
         4 002674   003423 710000 4                  TRA     s:12742

      812    12556    6                  CASE( 0 );

      813    12557    6                    IF SC_CURR$ -> VX$SC.ATTR.SEGMENT

  12557  4 002675   000000 236100                    LDQ     0,,PR0
         4 002676   000040 316003                    CANQ    32,DU
         4 002677   003470 600000 4                  TZE     SET_ADDRESS

      814    12558    7                    THEN DO;

      815    12559    7                       K = 384;

  12559  4 002700   000600 235007                    LDA     384,DL
         4 002701   200111 755100                    STA     K,,AUTO

      816    12560    7                       CALL ALOC_SEG;

  12560  4 002702   004031 701000 4                  TSX1    ALOC_SEG
         4 002703   000000 011000                    NOP     0

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:185  
      817    12561    7                       GOTO CHECK_EMPTY_SC;

  12561  4 002704   003526 710000 4                  TRA     CHECK_EMPTY_SC

      818    12562    7                       END;
      819    12563    6                  CASE( 2 );

      820    12564    7                    IF BLK_COM$ ~= ADDR(NIL) THEN DO;

  12564  4 002705   200040 236100                    LDQ     BLK_COM$,,AUTO
         4 002706   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002707   002720 600000 4                  TZE     s:12570

      821    12565    7                       SC_CURR$ -> VX$SC.ADDRESS = BLK_COM$ -> VX$SC.ADDRESS;

  12565  4 002710   200040 471500                    LDP1    BLK_COM$,,AUTO
         4 002711   100000 720100                    LXL0    0,,PR1
         4 002712   000000 440100                    SXL0    0,,PR0

      822    12566    7                       SC_CURR$ -> VX$SC.NODE# = BLK_COM$ -> VX$SC.NODE#;

  12566  4 002713   100002 221100                    LDX1    2,,PR1
         4 002714   000002 741100                    STX1    2,,PR0

      823    12567    7                       SC_CURR$ -> VX$SC.ATTR.INT = 0;

  12567  4 002715   000026 236000 5                  LDQ     22
         4 002716   000000 356100                    ANSQ    0,,PR0

      824    12568    7                       END;

  12568  4 002717   002744 710000 4                  TRA     s:12579

      825    12569    7                    ELSE DO;

      826    12570    8                       IF BLK_CHAIN$ = ADDR(NIL) THEN DO;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:186  
  12570  4 002720   200041 236100                    LDQ     BLK_CHAIN$,,AUTO
         4 002721   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002722   002731 601000 4                  TNZ     s:12575

      827    12571    8                          BLK_CHAIN$ = SC_CURR$;

  12571  4 002723   200050 236100                    LDQ     SC_CURR$,,AUTO
         4 002724   200041 756100                    STQ     BLK_CHAIN$,,AUTO

      828    12572    8                          BLK_CHAIN$ -> VX$SC.COM_LINK = 0;

  12572  4 002725   000000 220003                    LDX0    0,DU
         4 002726   200041 471500                    LDP1    BLK_CHAIN$,,AUTO
         4 002727   100002 440100                    SXL0    2,,PR1

      829    12573    8                          END;

  12573  4 002730   002742 710000 4                  TRA     s:12577

      830    12574    8                       ELSE DO;

      831    12575    8                          BLK_TAIL$ -> VX$SC.COM_LINK = POFFW( SC_CURR$, BLK_TAIL$ );

  12575  4 002731   200042 235100                    LDA     BLK_TAIL$,,AUTO
         4 002732   000022 771000                    ARL     18
         4 002733   200202 755100                    STA     @I+1,,AUTO
         4 002734   200050 236100                    LDQ     SC_CURR$,,AUTO
         4 002735   000022 772000                    QRL     18
         4 002736   200202 136100                    SBLQ    @I+1,,AUTO
         4 002737   000000 620006                    EAX0    0,QL
         4 002740   200042 471500                    LDP1    BLK_TAIL$,,AUTO
         4 002741   100002 440100                    SXL0    2,,PR1

      832    12576    8                          END;             /* Else do; */

      833    12577    7                       BLK_TAIL$ = SC_CURR$;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:187  
  12577  4 002742   200050 236100                    LDQ     SC_CURR$,,AUTO
         4 002743   200042 756100                    STQ     BLK_TAIL$,,AUTO

      834    12578    7                       END;                /* Else do; */

      835    12579    6                    GOTO BUMP_SC_CURR;

  12579  4 002744   003536 710000 4                  TRA     BUMP_SC_CURR

      836    12580    6                  CASE( 4, 3 );

      837    12581    6                    NEXT_SC_CURR$ = PINCRW( VX_SC_START$,

  12581  4 002745   000002 720100                    LXL0    2,,PR0
         4 002746   000000 636010                    EAQ     0,X0
         4 002747   000000 036000 xsym               ADLQ    VX_SC_START$
         4 002750   200071 756100                    STQ     NEXT_SC_CURR$,,AUTO

      838    12582    6                            SC_CURR$ -> VX$SC.COM_LINK );
      839    12583    6                    SC_CURR$ -> VX$SC.ADDRESS = NEXT_SC_CURR$ -> VX$SC.ADDRESS;

  12583  4 002751   200071 471500                    LDP1    NEXT_SC_CURR$,,AUTO
         4 002752   100000 721100                    LXL1    0,,PR1
         4 002753   000000 441100                    SXL1    0,,PR0

      840    12584    6                    SC_CURR$ -> VX$SC.NODE# = NEXT_SC_CURR$ -> VX$SC.NODE#;

  12584  4 002754   100002 222100                    LDX2    2,,PR1
         4 002755   000002 742100                    STX2    2,,PR0

      841    12585    6                    SC_CURR$ -> VX$SC.SIZE = NEXT_SC_CURR$ -> VX$SC.SIZE;

  12585  4 002756   100001 723100                    LXL3    1,,PR1
         4 002757   000001 443100                    SXL3    1,,PR0

      842    12586    6                    GOTO CHECK_EMPTY_SC;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:188  
  12586  4 002760   003526 710000 4                  TRA     CHECK_EMPTY_SC

      843    12587        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:189  
      844    12588        /*
      845    12589              Dcbs
      846    12590        */
      847    12591    6                  CASE( 5 );

      848    12592    6                    SEQ_MATCH$ = PINCRW( SC_NAME$, SC_CURR$ -> VX$SC.NAME_DISP );

  12592  4 002761   000001 220100                    LDX0    1,,PR0
         4 002762   000000 636010                    EAQ     0,X0
         4 002763   200054 036100                    ADLQ    SC_NAME$,,AUTO
         4 002764   200167 756100                    STQ     SEQ_MATCH$,,AUTO

      849    12593    6                    SC_CURR$ -> VX$SC.NODE# = 0;

  12593  4 002765   000000 221003                    LDX1    0,DU
         4 002766   000002 741100                    STX1    2,,PR0

      850    12594    6                    SC_CURR$ -> VX$SC.ATTR.INT = 0;

  12594  4 002767   000026 236000 5                  LDQ     22
         4 002770   000000 356100                    ANSQ    0,,PR0

      851    12595    6                    SC_CURR$ -> VX$SC.ATTR.ALL     = '1'B/*@TRUE_B*/;

  12595  4 002771   000020 236003                    LDQ     16,DU
         4 002772   000000 256100                    ORSQ    0,,PR0

      852    12596    6                    SC_CURR$ -> VX$SC.ATTR.PRE_DCB = '0'B/*@FALSE_B*/;

  12596  4 002773   000075 236000 5                  LDQ     61
         4 002774   000000 356100                    ANSQ    0,,PR0

      853    12597                         %SEQ_SEARCH(
      854    12598                         START$ = VX_PRE_DCB_START$,
      855    12599                         STOP$ = VX_PRE_DCB_STOP$,
      856    12600                         NAME$ = VX_PRE_DCB_NAME$,
      857    12601                         MATCH$ = SEQ_MATCH$,
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:190  
      858    12602                         TEMP$ = SEQ_TEMP$,
      859    12603                         STR=VX$SC,
      860    12604                         STRREF="VX$SC.NAME_DISP",
      861    12605                         DO_CASE=" ",
      862    12606                         CASE_TYPE=" ",
      863    12607                         DO_END=" ",
      864    12608                         NEG=%@COMMENT,
      865    12609                         GEN=%@TNEMMOC,
      866    12610                         EMPTY = NOT_PREDEFINED_DCB,
      867    12611                         FOUND=FOUND_PREDEFINED_DCB);

  12612  4 002775   000000 236000 xsym               LDQ     VX_PRE_DCB_START$
         4 002776   200166 756100                    STQ     SEQ_TEMP$,,AUTO

  12613  4 002777   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 003000   003026 600000 4                  TZE     NOT_PREDEFINED_DCB

  12614  4 003001   000000 116000 xsym               CMPQ    VX_PRE_DCB_STOP$
         4 003002   003004 600000 4                  TZE     s:12618
         4 003003   003026 603000 4                  TRC     NOT_PREDEFINED_DCB

  12618  4 003004   200166 470500                    LDP0    SEQ_TEMP$,,AUTO
         4 003005   000001 220100                    LDX0    1,,PR0
         4 003006   000000 471400 xsym               LDP1    VX_PRE_DCB_NAME$
         4 003007   100000 221110                    LDX1    0,X0,PR1
         4 003010   200167 473500                    LDP3    SEQ_MATCH$,,AUTO
         4 003011   300000 222100                    LDX2    0,,PR3
         4 003012   000000 635010                    EAA     0,X0
         4 003013   000020 731000                    ARS     16
         4 003014   040140 106545                    CMPC    fill='040'O
         4 003015   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         4 003016   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         4 003017   003062 600000 4                  TZE     FOUND_PREDEFINED_DCB

  12622  4 003020   200166 236100                    LDQ     SEQ_TEMP$,,AUTO
         4 003021   000003 036003                    ADLQ    3,DU
         4 003022   200166 756100                    STQ     SEQ_TEMP$,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:191  

  12623  4 003023   000000 116000 xsym               CMPQ    VX_PRE_DCB_STOP$
         4 003024   003004 602000 4                  TNC     s:12618
         4 003025   003004 600000 4                  TZE     s:12618

      868    12626    6   NOT_PREDEFINED_DCB:
      869    12627        /* Here => not found */
      870    12628                         %SEQ_SEARCH(
      871    12629                         START$ = VX_DCB_START$,
      872    12630                         STOP$ = VX_DCB_STOP$,
      873    12631                         NAME$ = DN_ROOT_START$,
      874    12632                         MATCH$ = SEQ_MATCH$,
      875    12633                         TEMP$ = SEQ_TEMP$,
      876    12634                         STR=VX$SC,
      877    12635                         STRREF="VX$SC.NAME_DISP",
      878    12636                         DO_CASE=" ",
      879    12637                         CASE_TYPE=" ",
      880    12638                         DO_END=" ",
      881    12639                         NEG=%@COMMENT,
      882    12640                         GEN=%@TNEMMOC,
      883    12641                         EMPTY = INSERT_DCB,
      884    12642                         FOUND = FOUND_DCB_IN_LIST );

  12643  4 003026   000000 236000 xsym  NOT_PREDEFI* LDQ     VX_DCB_START$
         4 003027   200166 756100                    STQ     SEQ_TEMP$,,AUTO

  12644  4 003030   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 003031   003057 600000 4                  TZE     INSERT_DCB

  12645  4 003032   000000 116000 xsym               CMPQ    VX_DCB_STOP$
         4 003033   003035 600000 4                  TZE     s:12649
         4 003034   003057 603000 4                  TRC     INSERT_DCB

  12649  4 003035   200166 470500                    LDP0    SEQ_TEMP$,,AUTO
         4 003036   000001 220100                    LDX0    1,,PR0
         4 003037   200064 471500                    LDP1    DN_ROOT_START$,,AUTO
         4 003040   100000 221110                    LDX1    0,X0,PR1
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:192  
         4 003041   200167 473500                    LDP3    SEQ_MATCH$,,AUTO
         4 003042   300000 222100                    LDX2    0,,PR3
         4 003043   000000 635010                    EAA     0,X0
         4 003044   000020 731000                    ARS     16
         4 003045   040140 106545                    CMPC    fill='040'O
         4 003046   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         4 003047   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         4 003050   003370 600000 4                  TZE     FOUND_DCB_IN_LIST

  12653  4 003051   200166 236100                    LDQ     SEQ_TEMP$,,AUTO
         4 003052   000003 036003                    ADLQ    3,DU
         4 003053   200166 756100                    STQ     SEQ_TEMP$,,AUTO

  12654  4 003054   000000 116000 xsym               CMPQ    VX_DCB_STOP$
         4 003055   003035 602000 4                  TNC     s:12649
         4 003056   003035 600000 4                  TZE     s:12649

      885    12657    6   INSERT_DCB:
      886    12658    6                    USER = '1'B/*@TRUE_B*/;

  12658  4 003057   400000 236003       INSERT_DCB   LDQ     -131072,DU
         4 003060   200003 756100                    STQ     USER,,AUTO

      887    12659    7                    DO WHILE( '0'B );

  12659  4 003061   003113 710000 4                  TRA     s:12671

      888    12660    7   FOUND_PREDEFINED_DCB:
      889    12661    7                       SC_CURR$ -> VX$SC.SIZE = 0;

  12661  4 003062   000000 223003       FOUND_PREDE* LDX3    0,DU
         4 003063   200050 474500                    LDP4    SC_CURR$,,AUTO
         4 003064   400001 443100                    SXL3    1,,PR4

      890    12662    7                       SC_CURR$ -> VX$SC.ADDRESS = 99999;

  12662  4 003065   303237 220003                    LDX0    99999,DU
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:193  
         4 003066   400000 440100                    SXL0    0,,PR4

      891    12663    7                       SC_CURR$ -> VX$SC.ATTR.ALL = '0'B/*@FALSE_B*/;

  12663  4 003067   000076 236000 5                  LDQ     62
         4 003070   400000 356100                    ANSQ    0,,PR4

      892    12664    7                       SC_CURR$ -> VX$SC.ATTR.PRE_DCB = '1'B/*@TRUE_B*/;

  12664  4 003071   000010 236003                    LDQ     8,DU
         4 003072   400000 256100                    ORSQ    0,,PR4

      893    12665    7                       L = POFFW( SEQ_TEMP$, VX_PRE_DCB_START$ ) /SIZEW( VX$SC );

  12665  4 003073   000000 235000 xsym               LDA     VX_PRE_DCB_START$
         4 003074   000022 771000                    ARL     18
         4 003075   200202 755100                    STA     @I+1,,AUTO
         4 003076   200166 236100                    LDQ     SEQ_TEMP$,,AUTO
         4 003077   000022 772000                    QRL     18
         4 003100   200202 136100                    SBLQ    @I+1,,AUTO
         4 003101   000003 506007                    DIV     3,DL
         4 003102   200112 756100                    STQ     L,,AUTO

      894    12666    7                       IF VX_PRE_DCB_GOT(L) THEN GOTO BUMP_SC_CURR;

  12666  4 003103   000000 234006 xsym               SZN     VX_PRE_DCB_GOT,QL
         4 003104   003536 604000 4                  TMI     BUMP_SC_CURR

      895    12667    7                       VX_PRE_DCB_GOT(L) = '1'B/*@TRUE_B*/;

  12667  4 003105   400000 236003                    LDQ     -131072,DU
         4 003106   200112 721100                    LXL1    L,,AUTO
         4 003107   000000 756011 xsym               STQ     VX_PRE_DCB_GOT,X1

      896    12668    7                       SC_CURR$ -> VX$SC.NODE# = SEQ_TEMP$ -> VX$SC.NODE#;

  12668  4 003110   000002 222100                    LDX2    2,,PR0
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:194  
         4 003111   400002 742100                    STX2    2,,PR4

      897    12669    7                       USER = '0'B/*@FALSE_B*/;

  12669  4 003112   200003 450100                    STZ     USER,,AUTO

      898    12670    7                       END;                /* Do never */

      899    12671    7                    IF SIZE_AVAIL < SIZEW( VX$SC ) THEN DO;

  12671  4 003113   200134 235100                    LDA     SIZE_AVAIL,,AUTO
         4 003114   000003 115007                    CMPA    3,DL
         4 003115   003150 603000 4                  TRC     s:12681

      900    12672                            %ALLOCATE( PTR$=DUMMY$, TYPE=@SC_DS_1, SIZE=GET );

  12673  4 003116   000007 236000 xsym               LDQ     VX_M_ALL+7
         4 003117   000007 136000 xsym               SBLQ    VX_M_FREE+7
         4 003120   003133 604000 4                  TMI     s:12677
         4 003121   200131 116100                    CMPQ    GET,,AUTO
         4 003122   003133 602000 4                  TNC     s:12677

  12674  4 003123   000007 236000 xsym               LDQ     VX_M_FREE+7
         4 003124   000022 736000                    QLS     18
         4 003125   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         4 003126   200065 756100                    STQ     DUMMY$,,AUTO

  12675  4 003127   000007 236000 xsym               LDQ     VX_M_FREE+7
         4 003130   200131 036100                    ADLQ    GET,,AUTO
         4 003131   000007 756000 xsym               STQ     VX_M_FREE+7

  12676  4 003132   003145 710000 4                  TRA     s:12679

  12677  4 003133   200131 630500                    EPPR0   GET,,AUTO
         4 003134   200204 450500                    STP0    @I+3,,AUTO
         4 003135   000024 236000 5                  LDQ     20
         4 003136   200203 756100                    STQ     @I+2,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:195  
         4 003137   200065 631500                    EPPR1   DUMMY$,,AUTO
         4 003140   200202 451500                    STP1    @I+1,,AUTO
         4 003141   200202 630500                    EPPR0   @I+1,,AUTO
         4 003142   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 003143   000000 701000 xent               TSX1    VXA$GET
         4 003144   000000 011000                    NOP     0

      901    12679    7                       SIZE_AVAIL = SIZE_AVAIL + GET;

  12679  4 003145   200134 236100                    LDQ     SIZE_AVAIL,,AUTO
         4 003146   200131 036100                    ADLQ    GET,,AUTO
         4 003147   200134 756100                    STQ     SIZE_AVAIL,,AUTO

      902    12680    7                       END;

      903    12681    6                    NEXT_FORCED_ROOT$ -> VX$SC = SC_CURR$ -> VX$SC;

  12681  4 003150   200050 470500                    LDP0    SC_CURR$,,AUTO
         4 003151   200062 471500                    LDP1    NEXT_FORCED_ROOT$,,AUTO
         4 003152   000100 100500                    MLR     fill='000'O
         4 003153   000000 000014                    ADSC9   0,,PR0                   cn=0,n=12
         4 003154   100000 000014                    ADSC9   0,,PR1                   cn=0,n=12

      904    12682    7                    IF VX_DCB_START$ = ADDR(NIL) THEN DO;

  12682  4 003155   000000 236000 xsym               LDQ     VX_DCB_START$
         4 003156   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 003157   003164 601000 4                  TNZ     s:12687

      905    12683    7                       VX_DCB_START$      = NEXT_FORCED_ROOT$;

  12683  4 003160   200062 236100                    LDQ     NEXT_FORCED_ROOT$,,AUTO
         4 003161   000000 756000 xsym               STQ     VX_DCB_START$

      906    12684    7                       VX_DCB_STOP$       = NEXT_FORCED_ROOT$;

  12684  4 003162   000000 756000 xsym               STQ     VX_DCB_STOP$
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:196  

      907    12685    7                       END;

  12685  4 003163   003167 710000 4                  TRA     s:12689

      908    12686    7                    ELSE DO;

      909    12687    7                       VX_DCB_STOP$      = PINCRW( VX_DCB_STOP$,     SIZEW( VX$SC ) );

  12687  4 003164   000000 236000 xsym               LDQ     VX_DCB_STOP$
         4 003165   000003 036003                    ADLQ    3,DU
         4 003166   000000 756000 xsym               STQ     VX_DCB_STOP$

      910    12688    7                       END;

      911    12689    6                    F_NAME_SIZEW = ( SEQ_MATCH$ -> B$DNAME.COUNT + 4/*@CHAR_WORD*/ + 1
             12689                             ) / 4/*@CHAR_WORD*/;

  12689  4 003167   200167 471500                    LDP1    SEQ_MATCH$,,AUTO
         4 003170   100000 236100                    LDQ     0,,PR1
         4 003171   000022 772000                    QRL     18
         4 003172   000005 036007                    ADLQ    5,DL
         4 003173   000002 772000                    QRL     2
         4 003174   200135 756100                    STQ     F_NAME_SIZEW,,AUTO

      912    12690    7                    IF SIZE_AVAIL_NAME < F_NAME_SIZEW THEN DO;

  12690  4 003175   200133 116100                    CMPQ    SIZE_AVAIL_NAME,,AUTO
         4 003176   003232 602000 4                  TNC     s:12700
         4 003177   003232 600000 4                  TZE     s:12700

      913    12691                            %ALLOCATE( PTR$=DUMMY$, TYPE=@DN_DS_1, SIZE=GET_NAME );

  12692  4 003200   000004 236000 xsym               LDQ     VX_M_ALL+4
         4 003201   000004 136000 xsym               SBLQ    VX_M_FREE+4
         4 003202   003215 604000 4                  TMI     s:12696
         4 003203   200132 116100                    CMPQ    GET_NAME,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:197  
         4 003204   003215 602000 4                  TNC     s:12696

  12693  4 003205   000004 236000 xsym               LDQ     VX_M_FREE+4
         4 003206   000022 736000                    QLS     18
         4 003207   000004 036000 xsym               ADLQ    VX_M_BASE_PTR+4
         4 003210   200065 756100                    STQ     DUMMY$,,AUTO

  12694  4 003211   000004 236000 xsym               LDQ     VX_M_FREE+4
         4 003212   200132 036100                    ADLQ    GET_NAME,,AUTO
         4 003213   000004 756000 xsym               STQ     VX_M_FREE+4

  12695  4 003214   003227 710000 4                  TRA     s:12698

  12696  4 003215   200132 633500                    EPPR3   GET_NAME,,AUTO
         4 003216   200204 453500                    STP3    @I+3,,AUTO
         4 003217   000014 236000 5                  LDQ     12
         4 003220   200203 756100                    STQ     @I+2,,AUTO
         4 003221   200065 634500                    EPPR4   DUMMY$,,AUTO
         4 003222   200202 454500                    STP4    @I+1,,AUTO
         4 003223   200202 630500                    EPPR0   @I+1,,AUTO
         4 003224   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 003225   000000 701000 xent               TSX1    VXA$GET
         4 003226   000000 011000                    NOP     0

      914    12698    7                       SIZE_AVAIL_NAME = SIZE_AVAIL_NAME + GET_NAME;

  12698  4 003227   200133 236100                    LDQ     SIZE_AVAIL_NAME,,AUTO
         4 003230   200132 036100                    ADLQ    GET_NAME,,AUTO
         4 003231   200133 756100                    STQ     SIZE_AVAIL_NAME,,AUTO

      915    12699    7                       END;

      916    12700    6                    NEXT_FORCED_ROOT_NAME$ -> B$DNAME.COUNT = SEQ_MATCH$ -> B$DNAME.
             12700                             COUNT;

  12700  4 003232   200167 470500                    LDP0    SEQ_MATCH$,,AUTO
         4 003233   000000 220100                    LDX0    0,,PR0
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:198  
         4 003234   200063 471500                    LDP1    NEXT_FORCED_ROOT_NAME$,,AUTO
         4 003235   100000 740100                    STX0    0,,PR1

      917    12701    6                   NEXT_FORCED_ROOT_NAME$ -> B$DNAME.TEXT = SEQ_MATCH$ -> B$DNAME.TEXT
             12701                             ;

  12701  4 003236   200063 471500                    LDP1    NEXT_FORCED_ROOT_NAME$,,AUTO
         4 003237   100000 220100                    LDX0    0,,PR1
         4 003240   000000 221100                    LDX1    0,,PR0
         4 003241   040140 100540                    MLR     fill='040'O
         4 003242   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1
         4 003243   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0

      918    12702    6                    NEXT_FORCED_ROOT$ -> VX$SC    = SC_CURR$ -> VX$SC;

  12702  4 003244   200050 471500                    LDP1    SC_CURR$,,AUTO
         4 003245   200062 473500                    LDP3    NEXT_FORCED_ROOT$,,AUTO
         4 003246   000100 100500                    MLR     fill='000'O
         4 003247   100000 000014                    ADSC9   0,,PR1                   cn=0,n=12
         4 003250   300000 000014                    ADSC9   0,,PR3                   cn=0,n=12

      919    12703    6                    NEXT_FORCED_ROOT$ -> VX$SC.NAME_DISP = POFFW(
             12703                             NEXT_FORCED_ROOT_NAME$,

  12703  4 003251   200064 235100                    LDA     DN_ROOT_START$,,AUTO
         4 003252   000022 771000                    ARL     18
         4 003253   200202 755100                    STA     @I+1,,AUTO
         4 003254   200063 236100                    LDQ     NEXT_FORCED_ROOT_NAME$,,AUTO
         4 003255   000022 772000                    QRL     18
         4 003256   200202 136100                    SBLQ    @I+1,,AUTO
         4 003257   000000 620006                    EAX0    0,QL
         4 003260   200062 473500                    LDP3    NEXT_FORCED_ROOT$,,AUTO
         4 003261   300001 740100                    STX0    1,,PR3

      920    12704    6                            DN_ROOT_START$ );
      921    12705    6                    NEXT_FORCED_ROOT$ -> VX$SC.COM_LINK = POFFW( SC_CURR$,

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:199  
  12705  4 003262   200052 235100                    LDA     SC_START$,,AUTO
         4 003263   000022 771000                    ARL     18
         4 003264   200202 755100                    STA     @I+1,,AUTO
         4 003265   200050 236100                    LDQ     SC_CURR$,,AUTO
         4 003266   000022 772000                    QRL     18
         4 003267   200202 136100                    SBLQ    @I+1,,AUTO
         4 003270   000000 620006                    EAX0    0,QL
         4 003271   200062 473500                    LDP3    NEXT_FORCED_ROOT$,,AUTO
         4 003272   300002 440100                    SXL0    2,,PR3

      922    12706    6                            SC_START$ );
      923    12707    6                    NEXT_FORCED_ROOT_NAME$ = PINCRW( NEXT_FORCED_ROOT_NAME$,
             12707                             F_NAME_SIZEW );

  12707  4 003273   200135 236100                    LDQ     F_NAME_SIZEW,,AUTO
         4 003274   000022 736000                    QLS     18
         4 003275   200063 036100                    ADLQ    NEXT_FORCED_ROOT_NAME$,,AUTO
         4 003276   200063 756100                    STQ     NEXT_FORCED_ROOT_NAME$,,AUTO

      924    12708    6                    SIZE_AVAIL_NAME = SIZE_AVAIL_NAME - F_NAME_SIZEW;

  12708  4 003277   200133 236100                    LDQ     SIZE_AVAIL_NAME,,AUTO
         4 003300   200135 136100                    SBLQ    F_NAME_SIZEW,,AUTO
         4 003301   200133 756100                    STQ     SIZE_AVAIL_NAME,,AUTO

      925    12709    7                    IF USER THEN DO;       /* A user dcb */

  12709  4 003302   200003 234100                    SZN     USER,,AUTO
         4 003303   003353 605000 4                  TPL     s:12725

      926    12710    7                       VX_RU_HEAD.UDCBNUM = VX_RU_HEAD.UDCBNUM + 1;

  12710  4 003304   000004 220000 xsym               LDX0    VX_RU_HEAD+4
         4 003305   000001 621010                    EAX1    1,X0
         4 003306   000004 741000 xsym               STX1    VX_RU_HEAD+4

      927    12711    7                       NEXT_FORCED_ROOT$ -> VX$SC.NODE# = VX_DCB_USER_NEXT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:200  

  12711  4 003307   000000 720000 xsym               LXL0    VX_DCB_USER_NEXT
         4 003310   200062 473500                    LDP3    NEXT_FORCED_ROOT$,,AUTO
         4 003311   300002 740100                    STX0    2,,PR3

      928    12712    7                       VX_DCB_USER_NEXT = VX_DCB_USER_NEXT + 1;

  12712  4 003312   000000 236000 xsym               LDQ     VX_DCB_USER_NEXT
         4 003313   000001 036007                    ADLQ    1,DL
         4 003314   000000 756000 xsym               STQ     VX_DCB_USER_NEXT

      929    12713    7                       IF MOD( DCB_ADR, 2 ) = 1 THEN DCB_ADR = DCB_ADR + 1;

  12713  4 003315   200124 236100                    LDQ     DCB_ADR,,AUTO
         4 003316   000001 376007                    ANQ     1,DL
         4 003317   000001 116007                    CMPQ    1,DL
         4 003320   003324 601000 4                  TNZ     s:12714

  12713  4 003321   200124 236100                    LDQ     DCB_ADR,,AUTO
         4 003322   000001 036007                    ADLQ    1,DL
         4 003323   200124 756100                    STQ     DCB_ADR,,AUTO

      930    12714    7                       NEXT_FORCED_ROOT$ -> VX$SC.ADDRESS = DCB_ADR;

  12714  4 003324   200124 720100                    LXL0    DCB_ADR,,AUTO
         4 003325   200062 473500                    LDP3    NEXT_FORCED_ROOT$,,AUTO
         4 003326   300000 440100                    SXL0    0,,PR3

      931    12715    7                       TEXTC_SIZEW =

  12715  4 003327   000000 236100                    LDQ     0,,PR0
         4 003330   000022 772000                    QRL     18
         4 003331   000004 036007                    ADLQ    4,DL
         4 003332   000002 772000                    QRL     2
         4 003333   200136 756100                    STQ     TEXTC_SIZEW,,AUTO

      932    12716                                    %TEXTC_SIZEW( CNT="SEQ_MATCH$   -> B$DNAME.COUNT");
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:201  
      933    12719    7                       ;
      934    12720    7                       NEXT_FORCED_ROOT$ -> VX$SC.SIZE = VX_DCB_SIZEW + TEXTC_SIZEW;

  12720  4 003334   000000 036000 xsym               ADLQ    VX_DCB_SIZEW
         4 003335   000000 621006                    EAX1    0,QL
         4 003336   200062 473500                    LDP3    NEXT_FORCED_ROOT$,,AUTO
         4 003337   300001 441100                    SXL1    1,,PR3

      935    12721    7                       DCB_ADR = DCB_ADR + NEXT_FORCED_ROOT$ -> VX$SC.SIZE;

  12721  4 003340   200062 473500                    LDP3    NEXT_FORCED_ROOT$,,AUTO
         4 003341   300001 236100                    LDQ     1,,PR3
         4 003342   777777 376007                    ANQ     -1,DL
         4 003343   200124 036100                    ADLQ    DCB_ADR,,AUTO
         4 003344   200124 756100                    STQ     DCB_ADR,,AUTO

      936    12722    7                       SC_CURR$ -> VX$SC.NODE# = POFFW( NEXT_FORCED_ROOT$,

  12722  4 003345   200202 755100                    STA     @I+1,,AUTO
         4 003346   200062 236100                    LDQ     NEXT_FORCED_ROOT$,,AUTO
         4 003347   000022 772000                    QRL     18
         4 003350   200202 136100                    SBLQ    @I+1,,AUTO
         4 003351   000000 620006                    EAX0    0,QL
         4 003352   100002 740100                    STX0    2,,PR1

      937    12723    7                               SC_START$ );
      938    12724    7                       END;                /* Else do - if user then do; */

      939    12725    6                    NEXT_FORCED_ROOT$ = PINCRW( NEXT_FORCED_ROOT$, SIZEW( VX$SC ) );

  12725  4 003353   200062 236100                    LDQ     NEXT_FORCED_ROOT$,,AUTO
         4 003354   000003 036003                    ADLQ    3,DU
         4 003355   200062 756100                    STQ     NEXT_FORCED_ROOT$,,AUTO

      940    12726    6                    SIZE_AVAIL = SIZE_AVAIL - SIZEW( VX$SC );

  12726  4 003356   200134 235100                    LDA     SIZE_AVAIL,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:202  
         4 003357   000003 135007                    SBLA    3,DL
         4 003360   200134 755100                    STA     SIZE_AVAIL,,AUTO

      941    12727    6                    DCB_INSERT = DCB_INSERT + 1;

  12727  4 003361   200137 235100                    LDA     DCB_INSERT,,AUTO
         4 003362   000001 035007                    ADLA    1,DL
         4 003363   200137 755100                    STA     DCB_INSERT,,AUTO

      942    12728    6                    VX_ROOT_DN_INC = VX_ROOT_DN_INC + F_NAME_SIZEW;

  12728  4 003364   000000 236000 xsym               LDQ     VX_ROOT_DN_INC
         4 003365   200135 036100                    ADLQ    F_NAME_SIZEW,,AUTO
         4 003366   000000 756000 xsym               STQ     VX_ROOT_DN_INC

      943    12729    7                    DO WHILE( '0'B );

  12729  4 003367   003401 710000 4                  TRA     s:12733

      944    12730    7   FOUND_DCB_IN_LIST:
      945    12731    7                       SC_CURR$ -> VX$SC.NODE# = POFFW( SEQ_TEMP$, SC_START$ );

  12731  4 003370   200052 236100       FOUND_DCB_I* LDQ     SC_START$,,AUTO
         4 003371   000022 772000                    QRL     18
         4 003372   200202 756100                    STQ     @I+1,,AUTO
         4 003373   200166 236100                    LDQ     SEQ_TEMP$,,AUTO
         4 003374   000022 772000                    QRL     18
         4 003375   200202 136100                    SBLQ    @I+1,,AUTO
         4 003376   000000 620006                    EAX0    0,QL
         4 003377   200050 474500                    LDP4    SC_CURR$,,AUTO
         4 003400   400002 740100                    STX0    2,,PR4

      946    12732    7                       END;                /* Do never */

      947    12733    7                    IF VX_DCB_HEAD$ = ADDR(NIL) THEN DO;

  12733  4 003401   000000 236000 xsym               LDQ     VX_DCB_HEAD$
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:203  
         4 003402   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 003403   003407 601000 4                  TNZ     s:12737

      948    12734    7                       VX_DCB_HEAD$ = SC_CURR$;

  12734  4 003404   200050 236100                    LDQ     SC_CURR$,,AUTO
         4 003405   000000 756000 xsym               STQ     VX_DCB_HEAD$

      949    12735    7                       END;

  12735  4 003406   003420 710000 4                  TRA     s:12739

      950    12736    7                    ELSE DO;

      951    12737    7                       VX_DCB_TAIL$ -> VX$SC.COM_LINK = POFFW( SC_CURR$, SC_START$ );

  12737  4 003407   200052 235100                    LDA     SC_START$,,AUTO
         4 003410   000022 771000                    ARL     18
         4 003411   200202 755100                    STA     @I+1,,AUTO
         4 003412   200050 236100                    LDQ     SC_CURR$,,AUTO
         4 003413   000022 772000                    QRL     18
         4 003414   200202 136100                    SBLQ    @I+1,,AUTO
         4 003415   000000 620006                    EAX0    0,QL
         4 003416   000000 470400 xsym               LDP0    VX_DCB_TAIL$
         4 003417   000002 440100                    SXL0    2,,PR0

      952    12738    7                       END;

      953    12739    6                    VX_DCB_TAIL$ = SC_CURR$;

  12739  4 003420   200050 236100                    LDQ     SC_CURR$,,AUTO
         4 003421   000000 756000 xsym               STQ     VX_DCB_TAIL$

      954    12740    6                    GOTO BUMP_SC_CURR;

  12740  4 003422   003536 710000 4                  TRA     BUMP_SC_CURR

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:204  
      955    12741    6                  CASE( 1 , 8 , 7 , 6 );

      956    12742    6                    GOTO BUMP_SC_CURR;

  12742  4 003423   003536 710000 4                  TRA     BUMP_SC_CURR

      957    12743    6                  CASE( ELSE );

      958    12744    6   BAD_SC_TYPE:
      959    12745        /*E*  ERROR: VXO-E$SC_BAD_TYPE_VX-0
      960    12746              MESSAGE: Illegal type value in sections. Type = %U1.
      961    12747              DESCRIPTION: Self-explanatory.
      962    12748        */
      963    12749                         %NUMBER( NUM1=SC_TYPE );

  12755  4 003424   000077 236000 5     BAD_SC_TYPE  LDQ     63
         4 003425   200206 756100                    STQ     @I+5,,AUTO
         4 003426   200121 631500                    EPPR1   SC_TYPE,,AUTO
         4 003427   200205 451500                    STP1    @I+4,,AUTO
         4 003430   000060 236000 5                  LDQ     48
         4 003431   200204 756100                    STQ     @I+3,,AUTO
         4 003432   000056 237000 5                  LDAQ    46
         4 003433   200202 757100                    STAQ    @I+1,,AUTO
         4 003434   200202 630500                    EPPR0   @I+1,,AUTO
         4 003435   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 003436   000000 701000 xent               TSX1    VXD$B2C
         4 003437   000000 011000                    NOP     0

      964    12766                         %SCREAM( ERR#=E$SC_BAD_TYPE_VX, LEVEL=@E$F_VX, MID="'T'" );

  12767  4 003440   000020 630400 5                  EPPR0   16
         4 003441   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 003442   000000 701000 xent               TSX1    VXE$ERROR
         4 003443   000000 011000                    NOP     0

      965    12769    6                  END;                     /* Do case( SC_TYPE ); */

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:205  
  12769  4 003444   003470 710000 4                  TRA     SET_ADDRESS

      966    12770        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:206  
      967    12771    5                CASE( 1/*@PROC*/ );

      968    12772    6                  DO CASE( SC_TYPE );
             12772                           /* Looking only for sections which map into procedure */

  12772  4 003445   000007 116007                    CMPQ    7,DL
         4 003446   003450 602006 4                  TNC     s:12772+3,QL
         4 003447   003467 710000 4                  TRA     s:12782
         4 003450   003467 710000 4                  TRA     s:12782
         4 003451   003470 710000 4                  TRA     SET_ADDRESS
         4 003452   003467 710000 4                  TRA     s:12782
         4 003453   003467 710000 4                  TRA     s:12782
         4 003454   003467 710000 4                  TRA     s:12782
         4 003455   003467 710000 4                  TRA     s:12782
         4 003456   003457 710000 4                  TRA     s:12775

      969    12773    6                  CASE( 1 );

      970    12774    6                  CASE( 6 );

      971    12775    6                    IF SC_CURR$ -> VX$SC.ATTR.SEGMENT

  12775  4 003457   000000 236100                    LDQ     0,,PR0
         4 003460   000040 316003                    CANQ    32,DU
         4 003461   003470 600000 4                  TZE     SET_ADDRESS

      972    12776    7                    THEN DO;

      973    12777    7                       K = 256;

  12777  4 003462   000400 235007                    LDA     256,DL
         4 003463   200111 755100                    STA     K,,AUTO

      974    12778    7                       CALL ALOC_SEG;

  12778  4 003464   004031 701000 4                  TSX1    ALOC_SEG
         4 003465   000000 011000                    NOP     0
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:207  

      975    12779    7                       GOTO CHECK_EMPTY_SC;

  12779  4 003466   003526 710000 4                  TRA     CHECK_EMPTY_SC

      976    12780    7                       END;
      977    12781    6                  CASE(ELSE);

      978    12782    6                    GOTO BUMP_SC_CURR;

  12782  4 003467   003536 710000 4                  TRA     BUMP_SC_CURR

      979    12783    6                  END;                     /* Do case( @SC_TYPE ); */

      980    12784    5                END;                       /* Do case( i ) */

      981    12785    4   SET_ADDRESS:
      982    12786    5                IF SC_CURR$ -> VX$SC.SIZE > 0 THEN DO;

  12786  4 003470   200050 470500       SET_ADDRESS  LDP0    SC_CURR$,,AUTO
         4 003471   000001 720100                    LXL0    1,,PR0
         4 003472   003516 600000 4                  TZE     s:12798

      983    12787    5                   ALIGN = SC_CURR$ -> VX$SC.ATTR.ALIGN;

  12787  4 003473   000000 236100                    LDQ     0,,PR0
         4 003474   000022 772000                    QRL     18
         4 003475   000003 376007                    ANQ     3,DL
         4 003476   200126 756100                    STQ     ALIGN,,AUTO

      984    12788                        %ALIGN;

  12789  4 003477   000001 116007                    CMPQ    1,DL
         4 003500   003505 601000 4                  TNZ     s:12793

  12790  4 003501   000001 236007                    LDQ     1,DL
         4 003502   200122 276100                    ORQ     ADR,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:208  
         4 003503   200122 756100                    STQ     ADR,,AUTO

  12791  4 003504   003516 710000 4                  TRA     s:12798

  12793  4 003505   000000 621006                    EAX1    0,QL
         4 003506   200122 236100                    LDQ     ADR,,AUTO
         4 003507   000000 376011 2                  ANQ     MODMSKS,X1
         4 003510   003516 600000 4                  TZE     s:12798

  12794  4 003511   200126 721100                    LXL1    ALIGN,,AUTO
         4 003512   200122 236100                    LDQ     ADR,,AUTO
         4 003513   000000 276011 2                  ORQ     MODMSKS,X1
         4 003514   000001 036007                    ADLQ    1,DL
         4 003515   200122 756100                    STQ     ADR,,AUTO

      985    12797    5                   END;

      986    12798    4                SC_CURR$ -> VX$SC.ADDRESS = ADR;

  12798  4 003516   200122 720100                    LXL0    ADR,,AUTO
         4 003517   000000 440100                    SXL0    0,,PR0

      987    12799    4                SC_CURR$ -> VX$SC.NODE# = NODE#;

  12799  4 003520   200113 721100                    LXL1    NODE#,,AUTO
         4 003521   000002 741100                    STX1    2,,PR0

      988    12800    4                ADR = ADR + SC_CURR$ -> VX$SC.SIZE;

  12800  4 003522   000001 236100                    LDQ     1,,PR0
         4 003523   777777 376007                    ANQ     -1,DL
         4 003524   200122 036100                    ADLQ    ADR,,AUTO
         4 003525   200122 756100                    STQ     ADR,,AUTO

      989    12801    4   CHECK_EMPTY_SC:
      990    12802    4                IF SC_CURR$ -> VX$SC.SIZE = 0

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:209  
  12802  4 003526   200050 470500       CHECK_EMPTY* LDP0    SC_CURR$,,AUTO
         4 003527   000001 720100                    LXL0    1,,PR0
         4 003530   003534 601000 4                  TNZ     s:12804

      991    12803    4                THEN SC_CURR$ -> VX$SC.EMPTY = '1'B/*@TRUE_B*/;

  12803  4 003531   000400 236003                    LDQ     256,DU
         4 003532   000000 256100                    ORSQ    0,,PR0
         4 003533   003536 710000 4                  TRA     BUMP_SC_CURR

      992    12804    4                ELSE SC_CURR$ -> VX$SC.EMPTY = '0'B/*@FALSE_B*/;

  12804  4 003534   000044 236000 5                  LDQ     36
         4 003535   000000 356100                    ANSQ    0,,PR0

      993    12805    4   BUMP_SC_CURR:
      994    12806    4                SC_CURR$ = PINCRW( SC_CURR$, SIZEW(VX$SC) );

  12806  4 003536   200050 236100       BUMP_SC_CURR LDQ     SC_CURR$,,AUTO
         4 003537   000003 036003                    ADLQ    3,DU
         4 003540   200050 756100                    STQ     SC_CURR$,,AUTO

      995    12807    4                END;                       /* Do while */

  12807  4 003541   200053 116100                    CMPQ    SC_STOP$,,AUTO
         4 003542   002646 602000 4                  TNC     s:12551
         4 003543   002646 600000 4                  TZE     s:12551

      996    12808
      997    12809
      998    12810    4             IF I = 0 AND CURR$ -> VX$NODE.ALL_BLK_COM THEN DO;

  12810  4 003544   200107 235100                    LDA     I,,AUTO
         4 003545   003652 601000 4                  TNZ     s:12852
         4 003546   200033 470500                    LDP0    CURR$,,AUTO
         4 003547   000144 236100                    LDQ     100,,PR0
         4 003550   200000 316003                    CANQ    65536,DU
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:210  
         4 003551   003652 600000 4                  TZE     s:12852

      999    12811    5                IF INTERNAL_ALL_BLK_COM THEN DO;

  12811  4 003552   200004 234100                    SZN     INTERNAL_ALL_BLK_COM,,AUTO
         4 003553   003561 605000 4                  TPL     s:12821

     1000    12812        /*E*  ERROR: VXT-E$MULT_BLK_COM_VX-0
     1001    12813              MESSAGE: Internal LINK error. Multiple blank common allocation along a path.
     1002    12814              DESCRIPTION: Self-explanatory.
     1003    12815        */
     1004    12816                        %SCREAM( ERR#=E$MULT_BLK_COM_VX, LEVEL=@E$F_VX, MID="'T'" );

  12817  4 003554   000101 630400 5                  EPPR0   65
         4 003555   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 003556   000000 701000 xent               TSX1    VXE$ERROR
         4 003557   000000 011000                    NOP     0

     1005    12819    5                   END;

  12819  4 003560   003563 710000 4                  TRA     s:12823

     1006    12820    5                ELSE DO;

     1007    12821    5                   INTERNAL_ALL_BLK_COM = '1'B/*@TRUE_B*/;

  12821  4 003561   400000 236003                    LDQ     -131072,DU
         4 003562   200004 756100                    STQ     INTERNAL_ALL_BLK_COM,,AUTO

     1008    12822    5                   END;

     1009    12823    4                BLK_COM$ = CURR$ -> VX$NODE.BLANK_COMMON$;

  12823  4 003563   200033 470500                    LDP0    CURR$,,AUTO
         4 003564   000145 236100                    LDQ     101,,PR0
         4 003565   200040 756100                    STQ     BLK_COM$,,AUTO

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:211  
     1010    12824    4                ALIGN = BLK_COM$ -> VX$SC.ATTR.ALIGN;

  12824  4 003566   200040 471500                    LDP1    BLK_COM$,,AUTO
         4 003567   100000 236100                    LDQ     0,,PR1
         4 003570   000022 772000                    QRL     18
         4 003571   000003 376007                    ANQ     3,DL
         4 003572   200126 756100                    STQ     ALIGN,,AUTO

     1011    12825                     %ALIGN;

  12826  4 003573   000001 116007                    CMPQ    1,DL
         4 003574   003601 601000 4                  TNZ     s:12830

  12827  4 003575   000001 236007                    LDQ     1,DL
         4 003576   200122 276100                    ORQ     ADR,,AUTO
         4 003577   200122 756100                    STQ     ADR,,AUTO

  12828  4 003600   003612 710000 4                  TRA     s:12834

  12830  4 003601   000000 620006                    EAX0    0,QL
         4 003602   200122 236100                    LDQ     ADR,,AUTO
         4 003603   000000 376010 2                  ANQ     MODMSKS,X0
         4 003604   003612 600000 4                  TZE     s:12834

  12831  4 003605   200126 720100                    LXL0    ALIGN,,AUTO
         4 003606   200122 236100                    LDQ     ADR,,AUTO
         4 003607   000000 276010 2                  ORQ     MODMSKS,X0
         4 003610   000001 036007                    ADLQ    1,DL
         4 003611   200122 756100                    STQ     ADR,,AUTO

     1012    12834    4                BLK_COM$ -> VX$SC.ADDRESS = ADR;

  12834  4 003612   200122 720100                    LXL0    ADR,,AUTO
         4 003613   100000 440100                    SXL0    0,,PR1

     1013    12835    4                ADR = ADR + BLK_COM$ -> VX$SC.SIZE;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:212  
  12835  4 003614   100001 236100                    LDQ     1,,PR1
         4 003615   777777 376007                    ANQ     -1,DL
         4 003616   200122 036100                    ADLQ    ADR,,AUTO
         4 003617   200122 756100                    STQ     ADR,,AUTO

     1014    12836    4                BLK_COM$ -> VX$SC.NODE# = NODE#;

  12836  4 003620   200113 720100                    LXL0    NODE#,,AUTO
         4 003621   100002 740100                    STX0    2,,PR1

     1015    12837    4                IF BLK_COM$ -> VX$SC.SIZE <= 0 THEN BLK_COM$ -> VX$SC.EMPTY = '1'B
             12837                         /*@TRUE_B*/;

  12837  4 003622   100001 721100                    LXL1    1,,PR1
         4 003623   003626 601000 4                  TNZ     NEXT_BLANK_CM

  12837  4 003624   000400 236003                    LDQ     256,DU
         4 003625   100000 256100                    ORSQ    0,,PR1

     1016    12838
     1017    12839    4   NEXT_BLANK_CM:
     1018    12840    4                DIFF = BLK_CHAIN$ -> VX$SC.COM_LINK;

  12840  4 003626   200041 470500       NEXT_BLANK_* LDP0    BLK_CHAIN$,,AUTO
         4 003627   000002 236100                    LDQ     2,,PR0
         4 003630   777777 376007                    ANQ     -1,DL
         4 003631   200127 756100                    STQ     DIFF,,AUTO

     1019    12841    4                BLK_CHAIN$ -> VX$SC.ADDRESS = BLK_COM$ -> VX$SC.ADDRESS;

  12841  4 003632   200040 471500                    LDP1    BLK_COM$,,AUTO
         4 003633   100000 720100                    LXL0    0,,PR1
         4 003634   000000 440100                    SXL0    0,,PR0

     1020    12842    4                BLK_CHAIN$ -> VX$SC.NODE# = BLK_COM$ -> VX$SC.NODE#;

  12842  4 003635   100002 221100                    LDX1    2,,PR1
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:213  
         4 003636   000002 741100                    STX1    2,,PR0

     1021    12843    4                BLK_CHAIN$ -> VX$SC.ATTR.INT = 0;

  12843  4 003637   000026 236000 5                  LDQ     22
         4 003640   000000 356100                    ANSQ    0,,PR0

     1022    12844    5                IF DIFF > 0 THEN DO;

  12844  4 003641   200127 235100                    LDA     DIFF,,AUTO
         4 003642   003650 600000 4                  TZE     s:12849

     1023    12845    5                   BLK_CHAIN$ = PINCRW( BLK_CHAIN$, DIFF );

  12845  4 003643   200127 236100                    LDQ     DIFF,,AUTO
         4 003644   000022 736000                    QLS     18
         4 003645   200041 036100                    ADLQ    BLK_CHAIN$,,AUTO
         4 003646   200041 756100                    STQ     BLK_CHAIN$,,AUTO

     1024    12846    5                   GOTO NEXT_BLANK_CM;

  12846  4 003647   003626 710000 4                  TRA     NEXT_BLANK_CM

     1025    12847    5                   END;                    /* If diff > 0 then do; */
     1026    12848
     1027    12849    4                BLK_CHAIN$ = ADDR(NIL);

  12849  4 003650   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 003651   200041 756100                    STQ     BLK_CHAIN$,,AUTO

     1028    12850    4                END;       /* If i = 0 and CURR$ -> VX$NODE.ALL_BLK_COM then do; */

     1029    12851
     1030    12852    4             IF CURR$ -> VX$NODE.SON$ = ADDR(NIL) THEN DO;

  12852  4 003652   200033 470500                    LDP0    CURR$,,AUTO
         4 003653   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:214  
         4 003654   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 003655   003664 601000 4                  TNZ     s:12855

     1031    12853    4                IF MAX_EADR(I) < ADR - 1 THEN MAX_EADR(I)    = ADR - 1;

  12853  4 003656   200107 720100                    LXL0    I,,AUTO
         4 003657   200122 236100                    LDQ     ADR,,AUTO
         4 003660   000001 136007                    SBLQ    1,DL
         4 003661   000003 116010 3                  CMPQ    MAX_EADR,X0
         4 003662   003664 604400 4                  TMOZ    s:12855

  12853  4 003663   000003 756010 3                  STQ     MAX_EADR,X0

     1032    12854    4                END;           /* If CURR$ -> VX$NODE.SON$ = addr(nil) then do; */

     1033    12855    4             IF I = 1 THEN DO;

  12855  4 003664   200107 235100                    LDA     I,,AUTO
         4 003665   000001 115007                    CMPA    1,DL
         4 003666   003760 601000 4                  TNZ     s:12892

     1034    12856    4                IF VX_SLIB_INIT$ ~= ADDR (NIL) THEN

  12856  4 003667   000000 236000 xsym               LDQ     VX_SLIB_INIT$
         4 003670   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 003671   003675 600000 4                  TZE     s:12859

     1035    12857    4                   J = BITBIN('700000'O);

  12857  4 003672   700000 235007                    LDA     -32768,DL
         4 003673   200110 755100                    STA     J,,AUTO
         4 003674   003700 710000 4                  TRA     s:12860

     1036    12858    4                ELSE
     1037    12859    4                   J = BITBIN('1000000'O);

  12859  4 003675   000035 236000 2                  LDQ     UNUSED_DATA+4
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:215  
         4 003676   000017 772000                    QRL     15
         4 003677   200110 756100                    STQ     J,,AUTO

     1038    12860    4                SK = ADR - 1;

  12860  4 003700   200122 235100                    LDA     ADR,,AUTO
         4 003701   000001 135007                    SBLA    1,DL
         4 003702   200111 755100                    STA     K,,AUTO

     1039    12861    5                IF SK>= J THEN DO;

  12861  4 003703   200111 236100                    LDQ     K,,AUTO
         4 003704   003760 604000 4                  TMI     s:12892
         4 003705   200110 116100                    CMPQ    J,,AUTO
         4 003706   003760 602000 4                  TNC     s:12892

     1040    12862        /*E*  ERROR: VXT-E$OVERFLOW_IS_VX-0
     1041    12863              MESSAGE: Node %U1 (%U2) exceeds the maximum address space
     1042    12864                       allowed in the instruction segment by '%U3'O words.
     1043    12865              DESCRIPTION: Self-explanatory.
     1044    12866        */
     1045    12867    5                   VX_EFIELD2.COUNT = CURR$->VX$NODE.HEAD$->VX$LST.P.NAME_.NAME$->T$C.
             12867                            COUNT;

  12867  4 003707   000004 471500                    LDP1    4,,PR0
         4 003710   100006 473500                    LDP3    6,,PR1
         4 003711   300000 236100                    LDQ     0,,PR3
         4 003712   000000 552040 xsym               STBQ    VX_EFIELD2,'40'O

     1046    12868    5                   VX_EFIELD2.CHARS = CURR$->VX$NODE.HEAD$->VX$LST.P.NAME_.NAME$->T$C.
             12868                            CHARS;

  12868  4 003713   300000 236100                    LDQ     0,,PR3
         4 003714   000033 772000                    QRL     27
         4 003715   000000 620006                    EAX0    0,QL
         4 003716   040000 100540                    MLR     fill='040'O
         4 003717   300000 200010                    ADSC9   0,,PR3                   cn=1,n=*X0
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:216  
         4 003720   000000 200117 xsym               ADSC9   VX_EFIELD2               cn=1,n=79

     1047    12869    5                   SK = SK - J;

  12869  4 003721   200111 236100                    LDQ     K,,AUTO
         4 003722   200110 136100                    SBLQ    J,,AUTO
         4 003723   200111 756100                    STQ     K,,AUTO

     1048    12870                        %NUMBER (NUM1=CURR$->VX$NODE.NUM,BASE1=8,NUM3=SK,BASE3=8);

  12876  4 003724   000031 236000 5                  LDQ     25
         4 003725   200206 756100                    STQ     @I+5,,AUTO
         4 003726   200033 236100                    LDQ     CURR$,,AUTO
         4 003727   000010 036003                    ADLQ    8,DU
         4 003730   000060 235000 5                  LDA     48
         4 003731   200204 757100                    STAQ    @I+3,,AUTO
         4 003732   000056 237000 5                  LDAQ    46
         4 003733   200202 757100                    STAQ    @I+1,,AUTO
         4 003734   200202 630500                    EPPR0   @I+1,,AUTO
         4 003735   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 003736   000000 701000 xent               TSX1    VXD$B2C
         4 003737   000000 011000                    NOP     0

  12884  4 003740   000031 236000 5                  LDQ     25
         4 003741   200206 756100                    STQ     @I+5,,AUTO
         4 003742   200111 630500                    EPPR0   K,,AUTO
         4 003743   200205 450500                    STP0    @I+4,,AUTO
         4 003744   000106 236000 5                  LDQ     70
         4 003745   200204 756100                    STQ     @I+3,,AUTO
         4 003746   000110 237000 5                  LDAQ    72
         4 003747   200202 757100                    STAQ    @I+1,,AUTO
         4 003750   200202 630500                    EPPR0   @I+1,,AUTO
         4 003751   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 003752   000000 701000 xent               TSX1    VXD$B2C
         4 003753   000000 011000                    NOP     0

     1049    12887                        %SCREAM (ERR#=E$OVERFLOW_IS_VX,LEVEL=@E$F_VX,MID="'T'");
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:217  

  12888  4 003754   000113 630400 5                  EPPR0   75
         4 003755   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 003756   000000 701000 xent               TSX1    VXE$ERROR
         4 003757   000000 011000                    NOP     0

     1050    12890    5                   END;                    /* If sk>= j ... */

     1051    12891    4                END;                       /* If i = 1 ... */

     1052    12892    3             CURR$ -> VX$NODE.ADDR_STOP_A(I) = ADR - 1;
             12892                      /* Set ending address for this node */

  12892  4 003760   200033 470500                    LDP0    CURR$,,AUTO
         4 003761   200107 720100                    LXL0    I,,AUTO
         4 003762   200122 235100                    LDA     ADR,,AUTO
         4 003763   000001 135007                    SBLA    1,DL
         4 003764   000015 755110                    STA     13,X0,PR0

     1053    12893    4             IF CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO; /* Move to eldest son */

  12893  4 003765   000000 236100                    LDQ     0,,PR0
         4 003766   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 003767   003772 600000 4                  TZE     s:12897

     1054    12894    4                CURR$ = CURR$ -> VX$NODE.SON$;

  12894  4 003770   200033 756100                    STQ     CURR$,,AUTO

     1055    12895    4                END;

  12895  4 003771   004013 710000 4                  TRA     s:12907

     1056    12896    4             ELSE DO;

     1057    12897    5                DO WHILE( CURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:218  
  12897  4 003772   004006 710000 4                  TRA     s:12904

     1058    12898    6                   IF CURR$ -> VX$NODE.ALL_BLK_COM THEN DO;

  12898  4 003773   200033 470500                    LDP0    CURR$,,AUTO
         4 003774   000144 236100                    LDQ     100,,PR0
         4 003775   200000 316003                    CANQ    65536,DU
         4 003776   004002 600000 4                  TZE     s:12902

     1059    12899    6                      BLK_COM$ = ADDR(NIL);

  12899  4 003777   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 004000   200040 756100                    STQ     BLK_COM$,,AUTO

     1060    12900    6                      INTERNAL_ALL_BLK_COM = '0'B/*@FALSE_B*/;

  12900  4 004001   200004 450100                    STZ     INTERNAL_ALL_BLK_COM,,AUTO

     1061    12901    6                      END;

     1062    12902    5                   CURR$ = CURR$ -> VX$NODE.FATHER$; /* Move up */

  12902  4 004002   000002 236100                    LDQ     2,,PR0
         4 004003   200033 756100                    STQ     CURR$,,AUTO

     1063    12903    5                   IF CURR$ = ADDR(NIL) THEN GOTO DONE; /* Check if done */

  12903  4 004004   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 004005   004023 600000 4                  TZE     DONE

     1064    12904    5                   END;      /* Do while( CURR$ -> VX$NODE.BROTHER$ = addr(nil) */

  12904  4 004006   200033 470500                    LDP0    CURR$,,AUTO
         4 004007   000001 236100                    LDQ     1,,PR0
         4 004010   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 004011   003773 600000 4                  TZE     s:12898

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:219  
     1065    12905    4                CURR$ = CURR$ -> VX$NODE.BROTHER$; /* Move to a brother */

  12905  4 004012   200033 756100                    STQ     CURR$,,AUTO

     1066    12906    4                END;                       /* Else do; */

     1067    12907    3             ADR = CURR$ -> VX$NODE.FATHER$ -> VX$NODE.ADDR_STOP_A(I) + 1;
             12907                      /* Set current address from this node's father */

  12907  4 004013   200033 470500                    LDP0    CURR$,,AUTO
         4 004014   000002 471500                    LDP1    2,,PR0
         4 004015   200107 720100                    LXL0    I,,AUTO
         4 004016   100015 235110                    LDA     13,X0,PR1
         4 004017   000001 035007                    ADLA    1,DL
         4 004020   200122 755100                    STA     ADR,,AUTO

     1068    12908    3             END;                          /* Do while( CURR$ ~= addr(nil) */

  12908  4 004021   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 004022   002416 601000 4                  TNZ     s:12485

     1069    12909    2   DONE:
     1070    12910    2          END;                             /* Do i = @DATA to @PROC */

  12910  4 004023   200107 235100       DONE         LDA     I,,AUTO
         4 004024   000001 035007                    ADLA    1,DL
         4 004025   200107 755100                    STA     I,,AUTO
         4 004026   000002 115007                    CMPA    2,DL
         4 004027   002315 602000 4                  TNC     s:12434
         4 004030   004100 710000 4                  TRA     s:12931

     1071    12911        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:220  
     1072    12912    1   ALOC_SEG: PROC;

  12912  4 004031   200200 741300       ALOC_SEG     STX1  ! BELOW_TEMP$+2,,AUTO

     1073    12913    2       SEGMENT = SC_CURR$ -> VX$SC.SEG;

  12913  4 004032   200050 470500                    LDP0    SC_CURR$,,AUTO
         4 004033   000000 236100                    LDQ     0,,PR0
         4 004034   000041 772000                    QRL     33
         4 004035   200162 756100                    STQ     SEGMENT,,AUTO

     1074    12914    2       VX_SEG_PROC_TYPE(SEGMENT) = K;

  12914  4 004036   200111 235100                    LDA     K,,AUTO
         4 004037   000000 755006 xsym               STA     VX_SEG_PROC_TYPE,QL

     1075    12915    3       IF SC_CURR$ -> VX$SC.SIZE > 0 THEN DO;

  12915  4 004040   000001 720100                    LXL0    1,,PR0
         4 004041   004067 600000 4                  TZE     s:12927

     1076    12916    3          ALIGN = SC_CURR$ -> VX$SC.ATTR.ALIGN;

  12916  4 004042   000000 236100                    LDQ     0,,PR0
         4 004043   000022 772000                    QRL     18
         4 004044   000003 376007                    ANQ     3,DL
         4 004045   200126 756100                    STQ     ALIGN,,AUTO

     1077    12917               %ALIGN( ADR="VX_SEG_SIZE(SEGMENT)" );

  12918  4 004046   000001 116007                    CMPQ    1,DL
         4 004047   004055 601000 4                  TNZ     s:12922

  12919  4 004050   000001 236007                    LDQ     1,DL
         4 004051   200162 722100                    LXL2    SEGMENT,,AUTO
         4 004052   000000 276012 xsym               ORQ     VX_SEG_SIZE,X2
         4 004053   000000 756012 xsym               STQ     VX_SEG_SIZE,X2
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:221  

  12920  4 004054   004067 710000 4                  TRA     s:12927

  12922  4 004055   000000 622006                    EAX2    0,QL
         4 004056   200162 723100                    LXL3    SEGMENT,,AUTO
         4 004057   000000 236013 xsym               LDQ     VX_SEG_SIZE,X3
         4 004060   000000 376012 2                  ANQ     MODMSKS,X2
         4 004061   004067 600000 4                  TZE     s:12927

  12923  4 004062   200126 722100                    LXL2    ALIGN,,AUTO
         4 004063   000000 236013 xsym               LDQ     VX_SEG_SIZE,X3
         4 004064   000000 276012 2                  ORQ     MODMSKS,X2
         4 004065   000001 036007                    ADLQ    1,DL
         4 004066   000000 756013 xsym               STQ     VX_SEG_SIZE,X3

     1078    12926    3          END;

     1079    12927    2       SC_CURR$ -> VX$SC.ADDRESS = VX_SEG_SIZE(SEGMENT);

  12927  4 004067   200162 720100                    LXL0    SEGMENT,,AUTO
         4 004070   000000 722010 xsym               LXL2    VX_SEG_SIZE,X0
         4 004071   000000 442100                    SXL2    0,,PR0

     1080    12928    2       VX_SEG_SIZE(SEGMENT) = VX_SEG_SIZE(SEGMENT) + SC_CURR$ -> VX$SC.SIZE;

  12928  4 004072   000001 236100                    LDQ     1,,PR0
         4 004073   777777 376007                    ANQ     -1,DL
         4 004074   000000 036010 xsym               ADLQ    VX_SEG_SIZE,X0
         4 004075   000000 756010 xsym               STQ     VX_SEG_SIZE,X0

     1081    12929    2   END ALOC_SEG;

  12929  4 004076   200200 221300                    LDX1  ! BELOW_TEMP$+2,,AUTO
         4 004077   000001 702211                    TSX2  ! 1,X1

     1082    12930        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:222  
     1083    12931    1       IF SIZE_AVAIL > 0 THEN CALL VXF$FREE( 7/*@SC_DS_1*/, SIZE_AVAIL, 1);

  12931  4 004100   200134 235100                    LDA     SIZE_AVAIL,,AUTO
         4 004101   004114 600000 4                  TZE     s:12932

  12931  4 004102   000002 236000 5                  LDQ     2
         4 004103   200204 756100                    STQ     @I+3,,AUTO
         4 004104   200134 630500                    EPPR0   SIZE_AVAIL,,AUTO
         4 004105   200203 450500                    STP0    @I+2,,AUTO
         4 004106   000024 236000 5                  LDQ     20
         4 004107   200202 756100                    STQ     @I+1,,AUTO
         4 004110   200202 630500                    EPPR0   @I+1,,AUTO
         4 004111   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 004112   000000 701000 xent               TSX1    VXF$FREE
         4 004113   000000 011000                    NOP     0

     1084    12932    1       IF SIZE_AVAIL_NAME > 0 THEN CALL VXF$FREE( 4/*@DN_DS_1*/, SIZE_AVAIL_NAME, 1 );

  12932  4 004114   200133 235100                    LDA     SIZE_AVAIL_NAME,,AUTO
         4 004115   004130 600000 4                  TZE     s:12933

  12932  4 004116   000002 236000 5                  LDQ     2
         4 004117   200204 756100                    STQ     @I+3,,AUTO
         4 004120   200133 630500                    EPPR0   SIZE_AVAIL_NAME,,AUTO
         4 004121   200203 450500                    STP0    @I+2,,AUTO
         4 004122   000014 236000 5                  LDQ     12
         4 004123   200202 756100                    STQ     @I+1,,AUTO
         4 004124   200202 630500                    EPPR0   @I+1,,AUTO
         4 004125   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 004126   000000 701000 xent               TSX1    VXF$FREE
         4 004127   000000 011000                    NOP     0

     1085    12933    2       IF VX_OD.VECTOR_.DATA THEN DO;

  12933  4 004130   000002 236000 xsym               LDQ     VX_OD+2
         4 004131   000002 316007                    CANQ    2,DL
         4 004132   004235 600000 4                  TZE     s:12976
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:223  

     1086    12934    2          ADR = MAX_EADR(0/*@DATA*/) + 1;

  12934  4 004133   000003 235000 3                  LDA     MAX_EADR
         4 004134   000001 035007                    ADLA    1,DL
         4 004135   200122 755100                    STA     ADR,,AUTO

     1087    12935    3          IF ADR > VX_O.VECTOR_.DATA THEN DO;

  12935  4 004136   000162 236000 xsym               LDQ     VX_O+114
         4 004137   004166 604000 4                  TMI     s:12961
         4 004140   200122 116100                    CMPQ    ADR,,AUTO
         4 004141   004166 605000 4                  TPL     s:12961

     1088    12936        /*E* ERROR: VXT-E$VECTOR_DATA_EXCEEDED-C
     1089    12937             MESSAGE: Size of shared library data exceeds the maximum allowed.
     1090    12938                      Maximum = %U1.  Allocation = %U2.
     1091    12939        */
     1092    12940                  %NUMBER( NUM1="VX_O.VECTOR_.DATA", NUM2=ADR );

  12946  4 004142   000117 630400 5                  EPPR0   79
         4 004143   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 004144   000000 701000 xent               TSX1    VXD$B2C
         4 004145   000000 011000                    NOP     0

  12950  4 004146   000077 236000 5                  LDQ     63
         4 004147   200206 756100                    STQ     @I+5,,AUTO
         4 004150   200122 630500                    EPPR0   ADR,,AUTO
         4 004151   200205 450500                    STP0    @I+4,,AUTO
         4 004152   000064 236000 5                  LDQ     52
         4 004153   200204 756100                    STQ     @I+3,,AUTO
         4 004154   000066 237000 5                  LDAQ    54
         4 004155   200202 757100                    STAQ    @I+1,,AUTO
         4 004156   200202 630500                    EPPR0   @I+1,,AUTO
         4 004157   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 004160   000000 701000 xent               TSX1    VXD$B2C
         4 004161   000000 011000                    NOP     0
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:224  

     1093    12957                  %SCREAM( ERR#=E$VECTOR_DATA_EXCEEDED, LEVEL=@E$F_VX, MID="'T'" );

  12958  4 004162   000125 630400 5                  EPPR0   85
         4 004163   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 004164   000000 701000 xent               TSX1    VXE$ERROR
         4 004165   000000 011000                    NOP     0

     1094    12960    3             END;

     1095    12961    3          IF VX_O.VECTOR_.DATA > ADR THEN DO;

  12961  4 004166   000162 236000 xsym               LDQ     VX_O+114
         4 004167   004172 604000 4                  TMI     s:12962
         4 004170   200122 116100                    CMPQ    ADR,,AUTO
         4 004171   004235 604400 4                  TMOZ    s:12976

     1096    12962    3             UNUSED$->VX$SC.ADDRESS = ADR;

  12962  4 004172   200122 720100                    LXL0    ADR,,AUTO
         4 004173   200106 470500                    LDP0    UNUSED$,,AUTO
         4 004174   000000 440100                    SXL0    0,,PR0

     1097    12963    3             IF MOD(ADR,2) = 0 THEN

  12963  4 004175   200122 236100                    LDQ     ADR,,AUTO
         4 004176   000002 506007                    DIV     2,DL
         4 004177   000044 733000                    LRS     36
         4 004200   000000 116003                    CMPQ    0,DU
         4 004201   004206 601000 4                  TNZ     s:12966

     1098    12964    3                UNUSED$->VX$SC.ATTR.ALIGN = 0;

  12964  4 004202   200106 470500                    LDP0    UNUSED$,,AUTO
         4 004203   000131 236000 5                  LDQ     89
         4 004204   000000 356100                    ANSQ    0,,PR0
         4 004205   004213 710000 4                  TRA     s:12967
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:225  

     1099    12965    3             ELSE
     1100    12966    3                UNUSED$->VX$SC.ATTR.ALIGN = 1;

  12966  4 004206   200106 470500                    LDP0    UNUSED$,,AUTO
         4 004207   000000 236100                    LDQ     0,,PR0
         4 004210   000131 376000 5                  ANQ     89
         4 004211   000001 276003                    ORQ     1,DU
         4 004212   000000 756100                    STQ     0,,PR0

     1101    12967    3             UNUSED$->VX$SC.EMPTY = '0'B/*@FALSE_B*/;

  12967  4 004213   200106 470500                    LDP0    UNUSED$,,AUTO
         4 004214   000044 236000 5                  LDQ     36
         4 004215   000000 356100                    ANSQ    0,,PR0

     1102    12968    3             UNUSED$->VX$SC.SIZE = VX_O.VECTOR_.DATA - ADR;

  12968  4 004216   000162 236000 xsym               LDQ     VX_O+114
         4 004217   200122 136100                    SBLQ    ADR,,AUTO
         4 004220   000000 620006                    EAX0    0,QL
         4 004221   200106 470500                    LDP0    UNUSED$,,AUTO
         4 004222   000001 440100                    SXL0    1,,PR0

     1103    12969    3             MAX_EADR(0/*@DATA*/) = VX_O.VECTOR_.DATA - 1;

  12969  4 004223   000162 235000 xsym               LDA     VX_O+114
         4 004224   000001 135007                    SBLA    1,DL
         4 004225   000003 755000 3                  STA     MAX_EADR

     1104    12970    3             VX_ROOT$->VX$NODE.ADDR_STOP.RDATA = MAX_EADR(0/*@DATA*/);

  12970  4 004226   000000 470400 xsym               LDP0    VX_ROOT$
         4 004227   000015 755100                    STA     13,,PR0

     1105    12971    3             VX_ROOT$->VX$NODE.L_STOP.SC$ = UNUSED$;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:226  
  12971  4 004230   200106 236100                    LDQ     UNUSED$,,AUTO
         4 004231   000045 756100                    STQ     37,,PR0

     1106    12972    3             VX_ROOT$->VX$NODE.L_SIZE.SC = VX_ROOT$->VX$NODE.L_SIZE.SC + SIZEW(VX$SC);

  12972  4 004232   000057 235100                    LDA     47,,PR0
         4 004233   000003 035007                    ADLA    3,DL
         4 004234   000057 755100                    STA     47,,PR0

     1107    12973    3             END;

     1108    12974    2          END;

     1109    12975        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:227  
     1110    12976    1       VX_RU_HEAD.UDCBNUM = VX_DCB_USER_NEXT - 10/*@DCB_NUM_START*/;

  12976  4 004235   000000 720000 xsym               LXL0    VX_DCB_USER_NEXT
         4 004236   777766 621010                    EAX1    -10,X0
         4 004237   000004 741000 xsym               STX1    VX_RU_HEAD+4

     1111    12977    2       IF VX_RU_HEAD.UDCBNUM > 0 AND NOT VX_ROS_ALLOWED THEN DO;

  12977  4 004240   004247 600000 4                  TZE     s:12986
         4 004241   000000 234000 xsym               SZN     VX_ROS_ALLOWED
         4 004242   004247 604000 4                  TMI     s:12986

     1112    12978        /*E*  ERROR: VXT-E$USER_DCB_SYSTEM_VX-0
     1113    12979              MESSAGE: User DCBs encountered but read only segment generation inhibited.
     1114    12980              DESCRIPTION: Self-explanatory.
     1115    12981        */
     1116    12982               %SCREAM( ERR#=E$USER_DCB_SYSTEM_VX, LEVEL=@E$F_VX, MID="'T'" );

  12983  4 004243   000133 630400 5                  EPPR0   91
         4 004244   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 004245   000000 701000 xent               TSX1    VXE$ERROR
         4 004246   000000 011000                    NOP     0

     1117    12985    2          END;                             /* If VX_RU_HEAD >0 and ... */

     1118    12986    1       VX_RU_HEAD.DCBRES = VX_O.NUM.DCBSLOTS;

  12986  4 004247   000036 720000 xsym               LXL0    VX_O+30
         4 004250   000004 440000 xsym               SXL0    VX_RU_HEAD+4

     1119    12987    1       INC = VX_RU_HEAD.UDCBNUM + VX_O.NUM.DCBSLOTS;

  12987  4 004251   000004 236000 xsym               LDQ     VX_RU_HEAD+4
         4 004252   000022 772000                    QRL     18
         4 004253   000036 036000 xsym               ADLQ    VX_O+30
         4 004254   200125 756100                    STQ     INC,,AUTO

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:228  
     1120    12988    2       IF INC > 0 THEN DO;

  12988  4 004255   004342 600000 4                  TZE     s:13014

     1121    12989    3          IF VX_DCB_START$ ~= ADDR(NIL) THEN DO;

  12989  4 004256   000000 236000 xsym               LDQ     VX_DCB_START$
         4 004257   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 004260   004342 600000 4                  TZE     s:13014

     1122    12990    3             IF MOD(INC,2) > 0 THEN INC = INC + 1; /* In case odd # of user dcbs */

  12990  4 004261   200125 236100                    LDQ     INC,,AUTO
         4 004262   000001 376007                    ANQ     1,DL
         4 004263   004267 600000 4                  TZE     s:12991

  12990  4 004264   200125 235100                    LDA     INC,,AUTO
         4 004265   000001 035007                    ADLA    1,DL
         4 004266   200125 755100                    STA     INC,,AUTO

     1123    12991    3             DCB_CURR$ = VX_DCB_START$;

  12991  4 004267   000000 236000 xsym               LDQ     VX_DCB_START$
         4 004270   200047 756100                    STQ     DCB_CURR$,,AUTO

     1124    12992    4             DO WHILE( DCB_CURR$ <= VX_DCB_STOP$ );

  12992  4 004271   000000 116000 xsym               CMPQ    VX_DCB_STOP$
         4 004272   004274 600000 4                  TZE     s:12993
         4 004273   004313 603000 4                  TRC     s:12997

     1125    12993    4                IF NOT DCB_CURR$ -> VX$SC.ATTR.PRE_DCB THEN

  12993  4 004274   200047 470500                    LDP0    DCB_CURR$,,AUTO
         4 004275   000000 236100                    LDQ     0,,PR0
         4 004276   000010 316003                    CANQ    8,DU
         4 004277   004305 601000 4                  TNZ     s:12995
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:229  

     1126    12994    4                   DCB_CURR$ -> VX$SC.ADDRESS = DCB_CURR$ -> VX$SC.ADDRESS + INC;

  12994  4 004300   000000 236100                    LDQ     0,,PR0
         4 004301   777777 376007                    ANQ     -1,DL
         4 004302   200125 036100                    ADLQ    INC,,AUTO
         4 004303   000000 620006                    EAX0    0,QL
         4 004304   000000 440100                    SXL0    0,,PR0

     1127    12995    4                DCB_CURR$ = PINCRW( DCB_CURR$, SIZEW( VX$SC ) );

  12995  4 004305   200047 236100                    LDQ     DCB_CURR$,,AUTO
         4 004306   000003 036003                    ADLQ    3,DU
         4 004307   200047 756100                    STQ     DCB_CURR$,,AUTO

     1128    12996    4                END;

  12996  4 004310   000000 116000 xsym               CMPQ    VX_DCB_STOP$
         4 004311   004274 602000 4                  TNC     s:12993
         4 004312   004274 600000 4                  TZE     s:12993

     1129    12997    3             DCB_CURR$ = VX_DCB_HEAD$;

  12997  4 004313   000000 236000 xsym               LDQ     VX_DCB_HEAD$
         4 004314   200047 756100                    STQ     DCB_CURR$,,AUTO

     1130    12998    3   NEXT_FULL_DCB:
     1131    12999    4             IF DCB_CURR$ -> VX$SC.ATTR.ALL THEN DO;

  12999  4 004315   200047 470500       NEXT_FULL_D* LDP0    DCB_CURR$,,AUTO
         4 004316   000000 236100                    LDQ     0,,PR0
         4 004317   000020 316003                    CANQ    16,DU
         4 004320   004334 600000 4                  TZE     s:13005

     1132    13000    4                Q$ = PINCRW( SC_START$, DCB_CURR$ -> VX$SC.NODE# );

  13000  4 004321   000002 220100                    LDX0    2,,PR0
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:230  
         4 004322   000000 636010                    EAQ     0,X0
         4 004323   200052 036100                    ADLQ    SC_START$,,AUTO
         4 004324   200031 756100                    STQ     Q$,,AUTO

     1133    13001    4                DCB_CURR$ -> VX$SC.NODE# = Q$ -> VX$SC.NODE#;

  13001  4 004325   200031 471500                    LDP1    Q$,,AUTO
         4 004326   100002 221100                    LDX1    2,,PR1
         4 004327   000002 741100                    STX1    2,,PR0

     1134    13002    4                DCB_CURR$ -> VX$SC.ADDRESS = Q$ -> VX$SC.ADDRESS;

  13002  4 004330   100000 720100                    LXL0    0,,PR1
         4 004331   000000 440100                    SXL0    0,,PR0

     1135    13003    4                DCB_CURR$ -> VX$SC.SIZE = Q$ -> VX$SC.SIZE;

  13003  4 004332   100001 722100                    LXL2    1,,PR1
         4 004333   000001 442100                    SXL2    1,,PR0

     1136    13004    4                END;

     1137    13005    3             IF DCB_CURR$ -> VX$SC.COM_LINK = 0 THEN GOTO NEXT_FULL_DONE;

  13005  4 004334   000002 720100                    LXL0    2,,PR0
         4 004335   004342 600000 4                  TZE     s:13014

     1138    13006    3             DCB_CURR$ = PINCRW( SC_START$, DCB_CURR$ -> VX$SC.COM_LINK );

  13006  4 004336   000000 636010                    EAQ     0,X0
         4 004337   200052 036100                    ADLQ    SC_START$,,AUTO
         4 004340   200047 756100                    STQ     DCB_CURR$,,AUTO

     1139    13007    3             GOTO NEXT_FULL_DCB;

  13007  4 004341   004315 710000 4                  TRA     NEXT_FULL_DCB

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:231  
     1140    13008    3   NEXT_FULL_DONE:
     1141    13009    3             END;
     1142    13010    2          END;

     1143    13011
     1144    13012
     1145    13013        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:232  
     1146    13014    1       VX_HAVE_SPC = VX_HAVE_SPC + DCB_INSERT;

  13014  4 004342   000000 236000 xsym               LDQ     VX_HAVE_SPC
         4 004343   200137 036100                    ADLQ    DCB_INSERT,,AUTO
         4 004344   000000 756000 xsym               STQ     VX_HAVE_SPC

     1147    13015    2       IF VX_HAVE_SPC > 0 THEN DO;

  13015  4 004345   004433 600000 4                  TZE     s:13034

     1148    13016    2          I = VX_HAVE_SPC * SIZEW( VXD$TMPLT) ;

  13016  4 004346   000000 235000 xsym               LDA     VX_HAVE_SPC
         4 004347   000001 735000                    ALS     1
         4 004350   200107 755100                    STA     I,,AUTO

     1149    13017               %ALLOCATE( PTR$=VX_MERGE_START$, TYPE=@SC_DS_1, SIZE=I );

  13018  4 004351   000007 236000 xsym               LDQ     VX_M_ALL+7
         4 004352   000007 136000 xsym               SBLQ    VX_M_FREE+7
         4 004353   004366 604000 4                  TMI     s:13022
         4 004354   200107 116100                    CMPQ    I,,AUTO
         4 004355   004366 602000 4                  TNC     s:13022

  13019  4 004356   000007 236000 xsym               LDQ     VX_M_FREE+7
         4 004357   000022 736000                    QLS     18
         4 004360   000007 036000 xsym               ADLQ    VX_M_BASE_PTR+7
         4 004361   000000 756000 xsym               STQ     VX_MERGE_START$

  13020  4 004362   000007 236000 xsym               LDQ     VX_M_FREE+7
         4 004363   200107 036100                    ADLQ    I,,AUTO
         4 004364   000007 756000 xsym               STQ     VX_M_FREE+7

  13021  4 004365   004376 710000 4                  TRA     s:13024

  13022  4 004366   200107 630500                    EPPR0   I,,AUTO
         4 004367   200204 450500                    STP0    @I+3,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:233  
         4 004370   000140 237000 5                  LDAQ    96
         4 004371   200202 757100                    STAQ    @I+1,,AUTO
         4 004372   200202 630500                    EPPR0   @I+1,,AUTO
         4 004373   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 004374   000000 701000 xent               TSX1    VXA$GET
         4 004375   000000 011000                    NOP     0

     1150    13024    2          I = VX_ROOT_DN_INC+10;

  13024  4 004376   000000 235000 xsym               LDA     VX_ROOT_DN_INC
         4 004377   000012 035007                    ADLA    10,DL
         4 004400   200107 755100                    STA     I,,AUTO

     1151    13025               %ALLOCATE( PTR$=NEXT_FORCED_ROOT_NAME$, TYPE=@DN_DS_1, SIZE=I );

  13026  4 004401   000004 236000 xsym               LDQ     VX_M_ALL+4
         4 004402   000004 136000 xsym               SBLQ    VX_M_FREE+4
         4 004403   004416 604000 4                  TMI     s:13030
         4 004404   200107 116100                    CMPQ    I,,AUTO
         4 004405   004416 602000 4                  TNC     s:13030

  13027  4 004406   000004 236000 xsym               LDQ     VX_M_FREE+4
         4 004407   000022 736000                    QLS     18
         4 004410   000004 036000 xsym               ADLQ    VX_M_BASE_PTR+4
         4 004411   200063 756100                    STQ     NEXT_FORCED_ROOT_NAME$,,AUTO

  13028  4 004412   000004 236000 xsym               LDQ     VX_M_FREE+4
         4 004413   200107 036100                    ADLQ    I,,AUTO
         4 004414   000004 756000 xsym               STQ     VX_M_FREE+4

  13029  4 004415   004430 710000 4                  TRA     s:13032

  13030  4 004416   200107 630500                    EPPR0   I,,AUTO
         4 004417   200204 450500                    STP0    @I+3,,AUTO
         4 004420   000014 236000 5                  LDQ     12
         4 004421   200203 756100                    STQ     @I+2,,AUTO
         4 004422   200063 631500                    EPPR1   NEXT_FORCED_ROOT_NAME$,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:234  
         4 004423   200202 451500                    STP1    @I+1,,AUTO
         4 004424   200202 630500                    EPPR0   @I+1,,AUTO
         4 004425   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 004426   000000 701000 xent               TSX1    VXA$GET
         4 004427   000000 011000                    NOP     0

     1152    13032    2          NEXT_FORCED_ROOT_NAME$ = PINCRW( NEXT_FORCED_ROOT_NAME$, 10 );

  13032  4 004430   200063 236100                    LDQ     NEXT_FORCED_ROOT_NAME$,,AUTO
         4 004431   000012 036003                    ADLQ    10,DU
         4 004432   200063 756100                    STQ     NEXT_FORCED_ROOT_NAME$,,AUTO

     1153    13033    2          END;

     1154    13034    1       VX_MERGE_STOP$ = VX_MERGE_START$;

  13034  4 004433   000000 236000 xsym               LDQ     VX_MERGE_START$
         4 004434   000000 756000 xsym               STQ     VX_MERGE_STOP$

     1155    13035    2       IF VX_DCB_START$ ~= ADDR(NIL) THEN DO;

  13035  4 004435   000000 236000 xsym               LDQ     VX_DCB_START$
         4 004436   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 004437   004477 600000 4                  TZE     s:13048

     1156    13036    2          VX_RU_HEAD.MAP_BITS_A.CON(1) = '1'B/*@TRUE_B*/;

  13036  4 004440   000010 236003                    LDQ     8,DU
         4 004441   000011 256000 xsym               ORSQ    VX_RU_HEAD+9

     1157    13037    2          DCB_CURR$ = VX_DCB_START$;

  13037  4 004442   000000 236000 xsym               LDQ     VX_DCB_START$
         4 004443   200047 756100                    STQ     DCB_CURR$,,AUTO

     1158    13038    3          DO WHILE( DCB_CURR$ <= VX_DCB_STOP$ );

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:235  
  13038  4 004444   000000 116000 xsym               CMPQ    VX_DCB_STOP$
         4 004445   004447 600000 4                  TZE     s:13039
         4 004446   004477 603000 4                  TRC     s:13048

     1159    13039    3             VX_MERGE_STOP$ -> VXD$TMPLT = '0'B;

  13039  4 004447   000000 470400 xsym               LDP0    VX_MERGE_STOP$
         4 004450   000000 450100                    STZ     0,,PR0
         4 004451   000001 450100                    STZ     1,,PR0

     1160    13040    3             VX_MERGE_STOP$ -> VXD$TMPLT.CONSTNT = '1'B/*@TRUE_B*/;

  13040  4 004452   000000 470400 xsym               LDP0    VX_MERGE_STOP$
         4 004453   400000 236007                    LDQ     -131072,DL
         4 004454   000001 256100                    ORSQ    1,,PR0

     1161    13041    3             VX_MERGE_STOP$ -> VXD$TMPLT.LFLAGS.IS_DCB = '1'B/*@TRUE_B*/;

  13041  4 004455   002000 236007                    LDQ     1024,DL
         4 004456   000001 256100                    ORSQ    1,,PR0

     1162    13042    3             VX_MERGE_STOP$ -> VXD$TMPLT.VALUE = DCB_CURR$ -> VX$SC.NODE#;

  13042  4 004457   200047 471500                    LDP1    DCB_CURR$,,AUTO
         4 004460   100002 236100                    LDQ     2,,PR1
         4 004461   000022 772000                    QRL     18
         4 004462   000000 756100                    STQ     0,,PR0

     1163    13043    3             VX_MERGE_STOP$ -> VXD$TMPLT.NPOINTER = DCB_CURR$ -> VX$SC.NAME_DISP;

  13043  4 004463   100001 220100                    LDX0    1,,PR1
         4 004464   000000 470400 xsym               LDP0    VX_MERGE_STOP$
         4 004465   000001 740100                    STX0    1,,PR0

     1164    13044    3             VX_MERGE_STOP$ = PINCRW( VX_MERGE_STOP$, SIZEW(VXD$TMPLT) );

  13044  4 004466   000000 236000 xsym               LDQ     VX_MERGE_STOP$
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:236  
         4 004467   000002 036003                    ADLQ    2,DU
         4 004470   000000 756000 xsym               STQ     VX_MERGE_STOP$

     1165    13045    3             DCB_CURR$ = PINCRW( DCB_CURR$, SIZEW( VX$SC ) );

  13045  4 004471   200047 236100                    LDQ     DCB_CURR$,,AUTO
         4 004472   000003 036003                    ADLQ    3,DU
         4 004473   200047 756100                    STQ     DCB_CURR$,,AUTO

     1166    13046    3             END;                      /* Do while( DCB_CURR$ <= VX_DCB_STOP$ ); */

  13046  4 004474   000000 116000 xsym               CMPQ    VX_DCB_STOP$
         4 004475   004447 602000 4                  TNC     s:13039
         4 004476   004447 600000 4                  TZE     s:13039

     1167    13047    2          END;                         /* If VX_DCB_START$ ~= addr(nil) then do; */

     1168    13048    2       DO I = 0 TO SIZEW( VX_SPC.B$.NAME_A$) - 1;

  13048  4 004477   200107 450100                    STZ     I,,AUTO
         4 004500   004600 710000 4                  TRA     s:13071+3

     1169    13049    2          IF VX_SPC.B$.SKIP_A(I) ~= 1/*@YES*/

  13049  4 004501   200107 720100                    LXL0    I,,AUTO
         4 004502   000037 235010 xsym               LDA     VX_SPC+31,X0
         4 004503   000001 115007                    CMPA    1,DL
         4 004504   004575 600000 4                  TZE     s:13071
         4 004505   000044 235010 xsym               LDA     VX_SPC+36,X0
         4 004506   000001 115007                    CMPA    1,DL
         4 004507   004575 601000 4                  TNZ     s:13071

     1170    13050    2                  AND
     1171    13051    3                  VX_SPC.B$.MINE_A(I) = 1/*@YES*/ THEN DO;

     1172    13052    4             IF I ~= 1 THEN DO;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:237  
  13052  4 004510   200107 236100                    LDQ     I,,AUTO
         4 004511   000001 116007                    CMPQ    1,DL
         4 004512   004575 600000 4                  TZE     s:13071

     1173    13053    4                VX_MERGE_STOP$ -> VXD$TMPLT = '0'B;

  13053  4 004513   000000 470400 xsym               LDP0    VX_MERGE_STOP$
         4 004514   000000 450100                    STZ     0,,PR0
         4 004515   000001 450100                    STZ     1,,PR0

     1174    13054    4                VX_MERGE_STOP$ -> VXD$TMPLT.AD.LFLAGS.DEFINED = '1'B/*@TRUE_B*/;

  13054  4 004516   000000 470400 xsym               LDP0    VX_MERGE_STOP$
         4 004517   040000 236003                    LDQ     16384,DU
         4 004520   000000 256100                    ORSQ    0,,PR0

     1175    13055    4                VX_MERGE_STOP$ -> VXD$TMPLT.AD.OFFSET = VX_PROGRAM_BIAS.I.RPROC +
             13055                         VX_SPC.B$.VALUE_A(I);

  13055  4 004521   200107 720100                    LXL0    I,,AUTO
         4 004522   000001 236000 xsym               LDQ     VX_PROGRAM_BIAS+1
         4 004523   000032 036010 xsym               ADLQ    VX_SPC+26,X0
         4 004524   000000 621006                    EAX1    0,QL
         4 004525   000000 470400 xsym               LDP0    VX_MERGE_STOP$
         4 004526   000000 441100                    SXL1    0,,PR0

     1176    13056    4                VX_MERGE_STOP$ -> VXD$TMPLT.PROTECTION.TYPE = 1;

  13056  4 004527   000000 470400 xsym               LDP0    VX_MERGE_STOP$
         4 004530   000001 236100                    LDQ     1,,PR0
         4 004531   000142 376000 5                  ANQ     98
         4 004532   010000 276007                    ORQ     4096,DL
         4 004533   000001 756100                    STQ     1,,PR0

     1177    13057    4                VX_MERGE_STOP$ -> VXD$TMPLT.NPOINTER =

  13057  4 004534   200064 235100                    LDA     DN_ROOT_START$,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:238  
         4 004535   000022 771000                    ARL     18
         4 004536   200202 755100                    STA     @I+1,,AUTO
         4 004537   200063 236100                    LDQ     NEXT_FORCED_ROOT_NAME$,,AUTO
         4 004540   000022 772000                    QRL     18
         4 004541   200202 136100                    SBLQ    @I+1,,AUTO
         4 004542   000000 620006                    EAX0    0,QL
         4 004543   000001 740100                    STX0    1,,PR0

     1178    13058    4                        POFFW( NEXT_FORCED_ROOT_NAME$, DN_ROOT_START$ );
     1179    13059    4                P$ = VX_SPC.B$.NAME_A$(I);

  13059  4 004544   200107 721100                    LXL1    I,,AUTO
         4 004545   000025 236011 xsym               LDQ     VX_SPC+21,X1
         4 004546   200030 756100                    STQ     P$,,AUTO

     1180    13060    4                J = P$ -> B$DNAME.COUNT;

  13060  4 004547   200030 471500                    LDP1    P$,,AUTO
         4 004550   100000 236100                    LDQ     0,,PR1
         4 004551   000022 772000                    QRL     18
         4 004552   200110 756100                    STQ     J,,AUTO

     1181    13061    4                NEXT_FORCED_ROOT_NAME$ -> B$DNAME.COUNT = J;

  13061  4 004553   000000 620006                    EAX0    0,QL
         4 004554   200063 473500                    LDP3    NEXT_FORCED_ROOT_NAME$,,AUTO
         4 004555   300000 740100                    STX0    0,,PR3

     1182    13062    4                NEXT_FORCED_ROOT_NAME$ -> B$DNAME.TEXT = P$ -> B$DNAME.TEXT;

  13062  4 004556   200063 470500                    LDP0    NEXT_FORCED_ROOT_NAME$,,AUTO
         4 004557   000000 220100                    LDX0    0,,PR0
         4 004560   100000 221100                    LDX1    0,,PR1
         4 004561   040140 100540                    MLR     fill='040'O
         4 004562   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         4 004563   000000 400010                    ADSC9   0,,PR0                   cn=2,n=*X0

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:239  
     1183    13063    4                NEXT_FORCED_ROOT_NAME$ = PINCRW( NEXT_FORCED_ROOT_NAME$,

  13063  4 004564   200110 236100                    LDQ     J,,AUTO
         4 004565   000005 036007                    ADLQ    5,DL
         4 004566   000002 772000                    QRL     2
         4 004567   000022 736000                    QLS     18
         4 004570   200063 036100                    ADLQ    NEXT_FORCED_ROOT_NAME$,,AUTO
         4 004571   200063 756100                    STQ     NEXT_FORCED_ROOT_NAME$,,AUTO

     1184    13064                             %TEXTH_SIZEW(CNT=J);
     1185    13067    4                );
     1186    13068    4                VX_MERGE_STOP$ = PINCRW( VX_MERGE_STOP$, SIZEW( VXD$TMPLT ) );

  13068  4 004572   000000 236000 xsym               LDQ     VX_MERGE_STOP$
         4 004573   000002 036003                    ADLQ    2,DU
         4 004574   000000 756000 xsym               STQ     VX_MERGE_STOP$

     1187    13069    4                END;                       /* If i ~= 1 then do; */

     1188    13070    3             END;                          /* If VX_SPC.B$.SKIP_A(I) ~= ... */

     1189    13071    2          END;                             /* Do i = 0 to SIZEW... */

  13071  4 004575   200107 235100                    LDA     I,,AUTO
         4 004576   000001 035007                    ADLA    1,DL
         4 004577   200107 755100                    STA     I,,AUTO
         4 004600   200107 235100                    LDA     I,,AUTO
         4 004601   000005 115007                    CMPA    5,DL
         4 004602   004501 602000 4                  TNC     s:13049

     1190    13072    2       IF VX_MERGE_STOP$ ~= ADDR(NIL) THEN DO;

  13072  4 004603   000000 236000 xsym               LDQ     VX_MERGE_STOP$
         4 004604   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 004605   004626 600000 4                  TZE     s:13085

     1191    13073    2          VX_MERGE_STOP$ = PINCRW( VX_MERGE_STOP$, - SIZEW( VXD$TMPLT ) );
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:240  

  13073  4 004606   777776 036003                    ADLQ    -2,DU
         4 004607   000000 756000 xsym               STQ     VX_MERGE_STOP$

     1192    13074    2          CALL VXQ$SORT( DN_ROOT_START$,

  13074  4 004610   000015 236000 5                  LDQ     13
         4 004611   200210 756100                    STQ     @I+7,,AUTO
         4 004612   000144 237000 5                  LDAQ    100
         4 004613   200206 757100                    STAQ    @I+5,,AUTO
         4 004614   000146 237000 5                  LDAQ    102
         4 004615   200204 757100                    STAQ    @I+3,,AUTO
         4 004616   000140 236000 5                  LDQ     96
         4 004617   200203 756100                    STQ     @I+2,,AUTO
         4 004620   200064 630500                    EPPR0   DN_ROOT_START$,,AUTO
         4 004621   200202 450500                    STP0    @I+1,,AUTO
         4 004622   200202 630500                    EPPR0   @I+1,,AUTO
         4 004623   000025 631400 xsym               EPPR1   B_VECTNIL+21
         4 004624   000000 701000 xent               TSX1    VXQ$SORT
         4 004625   000000 011000                    NOP     0

     1193    13075    2                  VX_MERGE_START$,
     1194    13076    2                  VX_MERGE_STOP$,
     1195    13077    2                  SIZEW( VXD$TMPLT ),
     1196    13078    2                  1/*@BY_NAME*/,
     1197    13079    2                  2,
     1198    13080    2                  0         );
     1199    13081    2          END;

     1200    13082
     1201    13083
     1202    13084        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:241  
     1203    13085    1       MAX_BADR(2/*@ROS*/) = 0;

  13085  4 004626   000002 450000 3                  STZ     MAX_BADR+2

     1204    13086    1       VX_PROGRAM_BIAS.A( 2/*@ROS*/ ) =0;

  13086  4 004627   000002 450000 xsym               STZ     VX_PROGRAM_BIAS+2

     1205    13087    1       DCB_ADR = DCB_ADR + INC;

  13087  4 004630   200124 236100                    LDQ     DCB_ADR,,AUTO
         4 004631   200125 036100                    ADLQ    INC,,AUTO
         4 004632   200124 756100                    STQ     DCB_ADR,,AUTO

     1206    13088    1       IF VX_OD.SIN.SYSTEM AND VX_OD.NUM.BREF

  13088  4 004633   000000 236000 xsym               LDQ     VX_OD
         4 004634   000200 316003                    CANQ    128,DU
         4 004635   004642 600000 4                  TZE     s:13090
         4 004636   000100 316007                    CANQ    64,DL
         4 004637   004642 600000 4                  TZE     s:13090

     1207    13089    1       THEN VX_ROS_ALLOWED = '1'B;

  13089  4 004640   400000 236003                    LDQ     -131072,DU
         4 004641   000000 756000 xsym               STQ     VX_ROS_ALLOWED

     1208    13090    2       IF VX_ROS_ALLOWED THEN DO;

  13090  4 004642   000000 234000 xsym               SZN     VX_ROS_ALLOWED
         4 004643   004655 605000 4                  TPL     s:13104

     1209    13091        /* Set tree address start */
     1210    13092    2          VX_TREE_ADR = DCB_ADR;

  13092  4 004644   200124 235100                    LDA     DCB_ADR,,AUTO
         4 004645   000000 755000 xsym               STA     VX_TREE_ADR
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:242  

     1211    13093        /* Now account for tree table */
     1212    13094    2          DCB_ADR = DCB_ADR

  13094  4 004646   000000 236000 xsym               LDQ     VX_NODE_NUMBER
         4 004647   000006 402007                    MPY     6,DL
         4 004650   200124 036100                    ADLQ    DCB_ADR,,AUTO
         4 004651   000000 036000 xsym               ADLQ    VX_TREE_NAME_POOL
         4 004652   000000 036000 xsym               ADLQ    VX_TREE_SLIB_NAME
         4 004653   000011 036007                    ADLQ    9,DL
         4 004654   200124 756100                    STQ     DCB_ADR,,AUTO

     1213    13095    2                  +
     1214    13096    2                  SIZEW( VX$TREE_HEADER )
     1215    13097    2                  +
     1216    13098    2                  SIZEW( VX$TREE_NODE) * ( VX_NODE_NUMBER + 1 )
     1217    13099    2                  +
     1218    13100    2                  VX_TREE_NAME_POOL
     1219    13101    2                  +
     1220    13102    2                  VX_TREE_SLIB_NAME;
     1221    13103    2          END;                             /* If VX_ROS_ALLOWED then do; */

     1222    13104    1       MAX_EADR(2/*@ROS*/) = DCB_ADR       - 1;

  13104  4 004655   200124 235100                    LDA     DCB_ADR,,AUTO
         4 004656   000001 135007                    SBLA    1,DL
         4 004657   000005 755000 3                  STA     MAX_EADR+2

     1223    13105    1       VX_ROOT$ -> VX$NODE.ADDR_START.RDATA = MAX_BADR(0/*@DATA*/);

  13105  4 004660   000000 470400 xsym               LDP0    VX_ROOT$
         4 004661   000000 236000 3                  LDQ     MAX_BADR
         4 004662   000012 756100                    STQ     10,,PR0

     1224    13106    1       VX_ROOT$ -> VX$NODE.ADDR_START.RPROC = MAX_BADR(1/*@PROC*/);

  13106  4 004663   000001 235000 3                  LDA     MAX_BADR+1
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:243  
         4 004664   000013 755100                    STA     11,,PR0

     1225    13107    1       VX_ROOT$ -> VX$NODE.ADDR_START.ROS = MAX_BADR(2/*@ROS*/);

  13107  4 004665   000002 235000 3                  LDA     MAX_BADR+2
         4 004666   000014 755100                    STA     12,,PR0

     1226    13108    1       VX_ROOT$ -> VX$NODE.ADDR_STOP.ROS  = MAX_EADR(2/*@ROS*/);

  13108  4 004667   000005 235000 3                  LDA     MAX_EADR+2
         4 004670   000017 755100                    STA     15,,PR0

     1227    13109
     1228    13110    2       DO I = 0 TO 2/*@ROS*/;

  13110  4 004671   200107 450100                    STZ     I,,AUTO

     1229    13111    2          VX_BADR(I) = MAX_BADR(I);

  13111  4 004672   200107 720100                    LXL0    I,,AUTO
         4 004673   000000 235010 3                  LDA     MAX_BADR,X0
         4 004674   000000 755010 xsym               STA     VX_BADR,X0

     1230    13112    2          VX_EADR(I) = MAX_EADR(I);

  13112  4 004675   000003 235010 3                  LDA     MAX_EADR,X0
         4 004676   000000 755010 xsym               STA     VX_EADR,X0

     1231    13113    2          END;

  13113  4 004677   200107 236100                    LDQ     I,,AUTO
         4 004700   000001 036007                    ADLQ    1,DL
         4 004701   200107 756100                    STQ     I,,AUTO
         4 004702   000003 116007                    CMPQ    3,DL
         4 004703   004672 602000 4                  TNC     s:13111

     1232    13114
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:244  
     1233    13115        %EJECT;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:245  
     1234    13116    1       IF VX_SLIB_INIT$ ~= ADDR(NIL)

  13116  4 004704   000000 236000 xsym               LDQ     VX_SLIB_INIT$
         4 004705   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 004706   004712 600000 4                  TZE     s:13118

     1235    13117    1       THEN J = BITBIN('700000'O);

  13117  4 004707   700000 235007                    LDA     -32768,DL
         4 004710   200110 755100                    STA     J,,AUTO
         4 004711   004715 710000 4                  TRA     s:13119

     1236    13118    1       ELSE J = BITBIN('1000000'O);

  13118  4 004712   000035 236000 2                  LDQ     UNUSED_DATA+4
         4 004713   000017 772000                    QRL     15
         4 004714   200110 756100                    STQ     J,,AUTO

     1237    13119    1       SK = MAX_EADR(1/*@PROC*/);

  13119  4 004715   000004 235000 3                  LDA     MAX_EADR+1
         4 004716   200111 755100                    STA     K,,AUTO

     1238    13120    1       IF SK < MAX_EADR(0/*@DATA*/) THEN SK = MAX_EADR(0/*@DATA*/);

  13120  4 004717   200111 236100                    LDQ     K,,AUTO
         4 004720   000003 116000 3                  CMPQ    MAX_EADR
         4 004721   004724 605000 4                  TPL     s:13121

  13120  4 004722   000003 235000 3                  LDA     MAX_EADR
         4 004723   200111 755100                    STA     K,,AUTO

     1239    13121    2       IF SK >= J THEN DO;

  13121  4 004724   200111 236100                    LDQ     K,,AUTO
         4 004725   004764 604000 4                  TMI     s:13148
         4 004726   200110 116100                    CMPQ    J,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:246  
         4 004727   004764 602000 4                  TNC     s:13148

     1240    13122        /*E*  ERROR: VXT-E$OUT_OF_IS_VX-0
     1241    13123              MESSAGE: Virtual address space exhausted in instruction segment.
     1242    13124                       Maximum = %U1.  Allocation = %U2.
     1243    13125              DESCRIPTION: Self-explanatory.
     1244    13126        */
     1245    13127               %NUMBER( NUM1=J, BASE1=8, NUM2=K, BASE2=8 );

  13133  4 004730   000031 236000 5                  LDQ     25
         4 004731   200206 756100                    STQ     @I+5,,AUTO
         4 004732   200110 630500                    EPPR0   J,,AUTO
         4 004733   200205 450500                    STP0    @I+4,,AUTO
         4 004734   000060 236000 5                  LDQ     48
         4 004735   200204 756100                    STQ     @I+3,,AUTO
         4 004736   000056 237000 5                  LDAQ    46
         4 004737   200202 757100                    STAQ    @I+1,,AUTO
         4 004740   200202 630500                    EPPR0   @I+1,,AUTO
         4 004741   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 004742   000000 701000 xent               TSX1    VXD$B2C
         4 004743   000000 011000                    NOP     0

  13137  4 004744   000031 236000 5                  LDQ     25
         4 004745   200206 756100                    STQ     @I+5,,AUTO
         4 004746   200111 630500                    EPPR0   K,,AUTO
         4 004747   200205 450500                    STP0    @I+4,,AUTO
         4 004750   000064 236000 5                  LDQ     52
         4 004751   200204 756100                    STQ     @I+3,,AUTO
         4 004752   000066 237000 5                  LDAQ    54
         4 004753   200202 757100                    STAQ    @I+1,,AUTO
         4 004754   200202 630500                    EPPR0   @I+1,,AUTO
         4 004755   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 004756   000000 701000 xent               TSX1    VXD$B2C
         4 004757   000000 011000                    NOP     0

     1246    13144               %SCREAM( ERR#=E$OUT_OF_IS_VX, LEVEL=@E$F_VX, MID="'T'" );

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:247  
  13145  4 004760   000150 630400 5                  EPPR0   104
         4 004761   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 004762   000000 701000 xent               TSX1    VXE$ERROR
         4 004763   000000 011000                    NOP     0

     1247    13147    2          END;                             /* If sk >= j then do; */

     1248    13148    1       SK = MAX_EADR(2/*@ROS*/);

  13148  4 004764   000005 235000 3                  LDA     MAX_EADR+2
         4 004765   200111 755100                    STA     K,,AUTO

     1249    13149    2       IF SK >= BITBIN('34000'O) THEN DO;

  13149  4 004766   034000 115007                    CMPA    14336,DL
         4 004767   005010 604000 4                  TMI     s:13176

     1250    13150        /*E*  ERROR: VXT-E$OUT_OF_ROS_VX-0
     1251    13151              MESSAGE: Virtual address space exhausted in read only segment.
     1252    13152                       Maximum = 34000.  Allocation = %U1.
     1253    13153              DESCRIPTION: Self-explanatory.
     1254    13154        */
     1255    13155               %NUMBER( NUM1=K, BASE1=8 );

  13161  4 004770   000031 236000 5                  LDQ     25
         4 004771   200206 756100                    STQ     @I+5,,AUTO
         4 004772   200111 630500                    EPPR0   K,,AUTO
         4 004773   200205 450500                    STP0    @I+4,,AUTO
         4 004774   000060 236000 5                  LDQ     48
         4 004775   200204 756100                    STQ     @I+3,,AUTO
         4 004776   000056 237000 5                  LDAQ    46
         4 004777   200202 757100                    STAQ    @I+1,,AUTO
         4 005000   200202 630500                    EPPR0   @I+1,,AUTO
         4 005001   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 005002   000000 701000 xent               TSX1    VXD$B2C
         4 005003   000000 011000                    NOP     0

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:248  
     1256    13172               %SCREAM( ERR#=E$OUT_OF_ROS_VX, LEVEL=@E$F_VX, MID="'T'" );

  13173  4 005004   000155 630400 5                  EPPR0   109
         4 005005   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 005006   000000 701000 xent               TSX1    VXE$ERROR
         4 005007   000000 011000                    NOP     0

     1257    13175    2          END;                             /* If sk >= BITBIN('34000'O) then do; */

     1258    13176    1       VX_RU_HEAD.VDPGS = ( MAX_BADR( 1/*@PROC*/ ) - MAX_BADR( 0/*@DATA*/ ) + 1023
             13176                /*@PAGE_SIZE1*/ ) / 1024/*@PAGE_SIZE*/;

  13176  4 005010   000001 236000 3                  LDQ     MAX_BADR+1
         4 005011   000000 136000 3                  SBLQ    MAX_BADR
         4 005012   001777 036007                    ADLQ    1023,DL
         4 005013   002000 506007                    DIV     1024,DL
         4 005014   000026 736000                    QLS     22
         4 005015   000002 676000 xsym               ERQ     VX_RU_HEAD+2
         4 005016   777760 376003                    ANQ     -16,DU
         4 005017   000002 656000 xsym               ERSQ    VX_RU_HEAD+2

     1259    13177    1       VX_RU_HEAD.VPPGS    = ( MAX_EADR( 1/*@PROC*/ ) - MAX_BADR( 1/*@PROC*/ ) + 1024
             13177                /*@PAGE_SIZE*/ ) / 1024/*@PAGE_SIZE*/;

  13177  4 005020   000004 236000 3                  LDQ     MAX_EADR+1
         4 005021   000001 136000 3                  SBLQ    MAX_BADR+1
         4 005022   002000 036007                    ADLQ    1024,DL
         4 005023   002000 506007                    DIV     1024,DL
         4 005024   000026 736000                    QLS     22
         4 005025   000001 676000 xsym               ERQ     VX_RU_HEAD+1
         4 005026   777760 376003                    ANQ     -16,DU
         4 005027   000001 656000 xsym               ERSQ    VX_RU_HEAD+1

     1260    13178    1       VX_RU_HEAD.ROSIZE = MAX_EADR( 2/*@ROS*/ ) - MAX_BADR( 2/*@ROS*/ ) + 1;

  13178  4 005030   000005 236000 3                  LDQ     MAX_EADR+2
         4 005031   000002 136000 3                  SBLQ    MAX_BADR+2
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:249  
         4 005032   000001 620006                    EAX0    1,QL
         4 005033   000010 440000 xsym               SXL0    VX_RU_HEAD+8

     1261    13179    1       VX_RU_HEAD.RDATA   = VX_ROOT$ -> VX$NODE.ADDR_STOP.RDATA - VX_ROOT$ -> VX$NODE.
             13179                ADDR_START.RDATA + 1;

  13179  4 005034   000000 470400 xsym               LDP0    VX_ROOT$
         4 005035   000015 236100                    LDQ     13,,PR0
         4 005036   000012 136100                    SBLQ    10,,PR0
         4 005037   000001 036007                    ADLQ    1,DL
         4 005040   000002 676000 xsym               ERQ     VX_RU_HEAD+2
         4 005041   000161 376000 5                  ANQ     113
         4 005042   000002 656000 xsym               ERSQ    VX_RU_HEAD+2

     1262    13180    1       VX_RU_HEAD.RPROC   = VX_ROOT$ -> VX$NODE.ADDR_STOP.RPROC - VX_ROOT$ -> VX$NODE.
             13180                ADDR_START.RPROC + 1;

  13180  4 005043   000016 236100                    LDQ     14,,PR0
         4 005044   000013 136100                    SBLQ    11,,PR0
         4 005045   000001 036007                    ADLQ    1,DL
         4 005046   000001 676000 xsym               ERQ     VX_RU_HEAD+1
         4 005047   000161 376000 5                  ANQ     113
         4 005050   000001 656000 xsym               ERSQ    VX_RU_HEAD+1

     1263    13181    1       VX_RU_HEAD.BIAS     = VX_PROGRAM_BIAS.I.DATA;

  13181  4 005051   000000 236000 xsym               LDQ     VX_PROGRAM_BIAS
         4 005052   000023 676000 xsym               ERQ     VX_RU_HEAD+19
         4 005053   000161 376000 5                  ANQ     113
         4 005054   000023 656000 xsym               ERSQ    VX_RU_HEAD+19

     1264    13182    1       J = BITBIN('1000000'O);

  13182  4 005055   000035 236000 2                  LDQ     UNUSED_DATA+4
         4 005056   000017 772000                    QRL     15
         4 005057   200110 756100                    STQ     J,,AUTO

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:250  
     1265    13183    2       DO I = 0 TO 5;

  13183  4 005060   200107 450100                    STZ     I,,AUTO

     1266    13184    3          IF VX_SEG_SIZE(I) > J THEN DO;

  13184  4 005061   200107 720100                    LXL0    I,,AUTO
         4 005062   200110 236100                    LDQ     J,,AUTO
         4 005063   005142 604000 4                  TMI     s:13212
         4 005064   000000 116010 xsym               CMPQ    VX_SEG_SIZE,X0
         4 005065   005142 605000 4                  TPL     s:13212

     1267    13185        /*E*  ERROR: VXT-E$OUT_OF_DS_VX-0
     1268    13186              MESSAGE: Virtual address space exhausted in data segment %U1.
     1269    13187                       Maximum = %U2.  Allocation = %U3.
     1270    13188              DESCRIPTION: Self-explanatory.
     1271    13189        */
     1272    13190    3             K = I + 3;

  13190  4 005066   200107 235100                    LDA     I,,AUTO
         4 005067   000003 035007                    ADLA    3,DL
         4 005070   200111 755100                    STA     K,,AUTO

     1273    13191                  %NUMBER( NUM1=K, NUM2=J, NUM3="VX_SEG_SIZE(I)" );

  13197  4 005071   000077 236000 5                  LDQ     63
         4 005072   200206 756100                    STQ     @I+5,,AUTO
         4 005073   200111 630500                    EPPR0   K,,AUTO
         4 005074   200205 450500                    STP0    @I+4,,AUTO
         4 005075   000060 236000 5                  LDQ     48
         4 005076   200204 756100                    STQ     @I+3,,AUTO
         4 005077   000056 237000 5                  LDAQ    46
         4 005100   200202 757100                    STAQ    @I+1,,AUTO
         4 005101   200202 630500                    EPPR0   @I+1,,AUTO
         4 005102   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 005103   000000 701000 xent               TSX1    VXD$B2C
         4 005104   000000 011000                    NOP     0
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:251  

  13201  4 005105   000077 236000 5                  LDQ     63
         4 005106   200206 756100                    STQ     @I+5,,AUTO
         4 005107   200110 630500                    EPPR0   J,,AUTO
         4 005110   200205 450500                    STP0    @I+4,,AUTO
         4 005111   000064 236000 5                  LDQ     52
         4 005112   200204 756100                    STQ     @I+3,,AUTO
         4 005113   000066 237000 5                  LDAQ    54
         4 005114   200202 757100                    STAQ    @I+1,,AUTO
         4 005115   200202 630500                    EPPR0   @I+1,,AUTO
         4 005116   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 005117   000000 701000 xent               TSX1    VXD$B2C
         4 005120   000000 011000                    NOP     0

  13205  4 005121   000077 236000 5                  LDQ     63
         4 005122   200206 756100                    STQ     @I+5,,AUTO
         4 005123   200107 720100                    LXL0    I,,AUTO
         4 005124   000000 630410 xsym               EPPR0   VX_SEG_SIZE,X0
         4 005125   200205 450500                    STP0    @I+4,,AUTO
         4 005126   000106 236000 5                  LDQ     70
         4 005127   200204 756100                    STQ     @I+3,,AUTO
         4 005130   000110 237000 5                  LDAQ    72
         4 005131   200202 757100                    STAQ    @I+1,,AUTO
         4 005132   200202 630500                    EPPR0   @I+1,,AUTO
         4 005133   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 005134   000000 701000 xent               TSX1    VXD$B2C
         4 005135   000000 011000                    NOP     0

     1274    13208                  %SCREAM( ERR#=E$OUT_OF_DS_VX, LEVEL=@E$F_VX, MID="'T'" );

  13209  4 005136   000163 630400 5                  EPPR0   115
         4 005137   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 005140   000000 701000 xent               TSX1    VXE$ERROR
         4 005141   000000 011000                    NOP     0

     1275    13211    3             END;

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:252  
     1276    13212    2          VX_RU_HEAD.DATA_SEG.SIZ(I) = VX_SEG_SIZE(I);

  13212  4 005142   200107 720100                    LXL0    I,,AUTO
         4 005143   000000 721010 xsym               LXL1    VX_SEG_SIZE,X0
         4 005144   000012 741010 xsym               STX1    VX_RU_HEAD+10,X0

     1277    13213    2          VX_RU_HEAD.DATA_SEG.PROTECTION(I) = VX_SEG_PROC_TYPE(I);

  13213  4 005145   000000 236010 xsym               LDQ     VX_SEG_PROC_TYPE,X0
         4 005146   000012 676010 xsym               ERQ     VX_RU_HEAD+10,X0
         4 005147   000777 376007                    ANQ     511,DL
         4 005150   000012 656010 xsym               ERSQ    VX_RU_HEAD+10,X0

     1278    13214    2          END;

  13214  4 005151   200107 235100                    LDA     I,,AUTO
         4 005152   000001 035007                    ADLA    1,DL
         4 005153   200107 755100                    STA     I,,AUTO
         4 005154   000006 115007                    CMPA    6,DL
         4 005155   005061 602000 4                  TNC     s:13184

     1279    13215    1       VX_RU_HEAD.TREEDISP = VX_TREE_ADR;

  13215  4 005156   000000 720000 xsym               LXL0    VX_TREE_ADR
         4 005157   000005 740000 xsym               STX0    VX_RU_HEAD+5
         4 005160   005352 710000 4                  TRA     s:13285

     1280    13216
     1281    13217
     1282    13218        %EJECT ;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:253  
     1283    13219    1   PROMOTE_SELECT: PROC ( I ) ;

  13219  4 005161   200200 741300       PROMOTE_SEL* STX1  ! BELOW_TEMP$+2,,AUTO

     1284    13220
     1285    13221    2   DCL 1 I UBIN PARAM ;
     1286    13222
     1287    13223    2       VX_CURR$ = VX_ROOT$;

  13223  4 005162   000000 236000 xsym               LDQ     VX_ROOT$
         4 005163   000000 756000 xsym               STQ     VX_CURR$

     1288    13224    2   TRAV:
     1289    13225    3       DO  WHILE  ( '1'B  ) ;              /* Traverse tree */

  13225  4 005164                       TRAV         null
     1290    13226    3          CURR_NODE# = VX_CURR$ -> VX$NODE.NUM;

  13226  4 005164   000000 470400 xsym               LDP0    VX_CURR$
         4 005165   000010 235100                    LDA     8,,PR0
         4 005166   200150 755100                    STA     CURR_NODE#,,AUTO

     1291    13227    3          CURR_DEPTH = VX_CURR$ -> VX$NODE.DEPTH;

  13227  4 005167   000011 235100                    LDA     9,,PR0
         4 005170   200151 755100                    STA     CURR_DEPTH,,AUTO

     1292    13228    3          IF VX_CURR$ -> VX$NODE.L_START.DN$ ~= ADDR(NIL) THEN

  13228  4 005171   000031 236100                    LDQ     25,,PR0
         4 005172   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 005173   005204 600000 4                  TZE     s:13231

     1293    13229    3            CURR_NAME_DISP = POFFW( VX_CURR$ -> VX$NODE.L_START.DN$, DN_ROOT_START$ );

  13229  4 005174   200064 235100                    LDA     DN_ROOT_START$,,AUTO
         4 005175   000022 771000                    ARL     18
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:254  
         4 005176   200202 755100                    STA     @I+1,,AUTO
         4 005177   000031 236100                    LDQ     25,,PR0
         4 005200   000022 772000                    QRL     18
         4 005201   200202 136100                    SBLQ    @I+1,,AUTO
         4 005202   200152 756100                    STQ     CURR_NAME_DISP,,AUTO
         4 005203   005205 710000 4                  TRA     s:13233

     1294    13230    3          ELSE
     1295    13231    3             CURR_NAME_DISP = 0 ;

  13231  4 005204   200152 450100                    STZ     CURR_NAME_DISP,,AUTO

     1296    13232
     1297    13233    4          DO CASE( I );

  13233  4 005205   200201 471500                    LDP1    @I,,AUTO
         4 005206   100000 235100                    LDA     0,,PR1
         4 005207   000005 115007                    CMPA    5,DL
         4 005210   005212 602005 4                  TNC     s:13233+5,AL
         4 005211   005227 710000 4                  TRA     s:13242
         4 005212   005227 710000 4                  TRA     s:13242
         4 005213   005227 710000 4                  TRA     s:13242
         4 005214   005217 710000 4                  TRA     s:13235
         4 005215   005222 710000 4                  TRA     s:13237
         4 005216   005225 710000 4                  TRA     s:13239

     1298    13234    4          CASE ( 2 ) ;

     1299    13235    4            NEXT_SC_CURR$ = VX_CURR$ ->VX$NODE.L_SC_START.SC_BLK_COM$;

  13235  4 005217   000130 236100                    LDQ     88,,PR0
         4 005220   200071 756100                    STQ     NEXT_SC_CURR$,,AUTO
         4 005221   005227 710000 4                  TRA     s:13242

     1300    13236    4          CASE ( 3 ) ;

     1301    13237    4            NEXT_SC_CURR$ = VX_CURR$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$ ;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:255  

  13237  4 005222   000131 236100                    LDQ     89,,PR0
         4 005223   200071 756100                    STQ     NEXT_SC_CURR$,,AUTO
         4 005224   005227 710000 4                  TRA     s:13242

     1302    13238    4          CASE ( 4 ) ;

     1303    13239    4            NEXT_SC_CURR$ = VX_CURR$ -> VX$NODE.L_SC_START.SC_LBL_COM$ ;

  13239  4 005225   000132 236100                    LDQ     90,,PR0
         4 005226   200071 756100                    STQ     NEXT_SC_CURR$,,AUTO

     1304    13240    4          END;                             /* Do case ( i ) */

     1305    13241
     1306    13242    3          SC_CURR$ = ADDR(NIL);

  13242  4 005227   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 005230   200050 756100                    STQ     SC_CURR$,,AUTO

     1307    13243    4          DO  WHILE( NEXT_SC_CURR$ ~= SC_CURR$ );

  13243  4 005231   200071 116100                    CMPQ    NEXT_SC_CURR$,,AUTO
         4 005232   005326 600000 4                  TZE     s:13270

     1308    13244    4             SC_CURR$ = NEXT_SC_CURR$;

  13244  4 005233   200071 236100                    LDQ     NEXT_SC_CURR$,,AUTO
         4 005234   200050 756100                    STQ     SC_CURR$,,AUTO

     1309    13245    4             P_STOP$ -> VX$SC = SC_CURR$ -> VX$SC;

  13245  4 005235   200050 470500                    LDP0    SC_CURR$,,AUTO
         4 005236   200075 471500                    LDP1    P_STOP$,,AUTO
         4 005237   000100 100500                    MLR     fill='000'O
         4 005240   000000 000014                    ADSC9   0,,PR0                   cn=0,n=12
         4 005241   100000 000014                    ADSC9   0,,PR1                   cn=0,n=12
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:256  

     1310    13246    4             P_STOP$ -> VX$SC.ADDRESS = POFFW( SC_CURR$, VX_SC_START$ );

  13246  4 005242   000000 235000 xsym               LDA     VX_SC_START$
         4 005243   000022 771000                    ARL     18
         4 005244   200202 755100                    STA     @I+1,,AUTO
         4 005245   200050 236100                    LDQ     SC_CURR$,,AUTO
         4 005246   000022 772000                    QRL     18
         4 005247   200202 136100                    SBLQ    @I+1,,AUTO
         4 005250   000000 620006                    EAX0    0,QL
         4 005251   200075 471500                    LDP1    P_STOP$,,AUTO
         4 005252   100000 440100                    SXL0    0,,PR1

     1311    13247    4             P_STOP$ -> VX$SC.EMPTY = '1'B/*@TRUE_B*/;

  13247  4 005253   200075 471500                    LDP1    P_STOP$,,AUTO
         4 005254   000400 236003                    LDQ     256,DU
         4 005255   100000 256100                    ORSQ    0,,PR1

     1312    13248    4             J = SC_CURR$ -> VX$SC.TYPE;

  13248  4 005256   000000 236100                    LDQ     0,,PR0
         4 005257   000033 772000                    QRL     27
         4 005260   000077 376007                    ANQ     63,DL
         4 005261   200110 756100                    STQ     J,,AUTO

     1313    13249
     1314    13250    5             IF J = 3 THEN DO;

  13250  4 005262   000003 116007                    CMPQ    3,DL
         4 005263   005272 601000 4                  TNZ     s:13255

     1315    13251    5                P_STOP$ -> VX$SC.NODE# = 0;

  13251  4 005264   000000 220003                    LDX0    0,DU
         4 005265   200075 471500                    LDP1    P_STOP$,,AUTO
         4 005266   100002 740100                    STX0    2,,PR1
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:257  

     1316    13252    5                P_STOP$ -> VX$SC.COM_LINK = 0;

  13252  4 005267   200075 471500                    LDP1    P_STOP$,,AUTO
         4 005270   100002 440100                    SXL0    2,,PR1

     1317    13253    5                END;

  13253  4 005271   005300 710000 4                  TRA     s:13259

     1318    13254    5             ELSE DO;

     1319    13255    5                P_STOP$ -> VX$SC.NODE# = CURR_NODE#;

  13255  4 005272   200150 720100                    LXL0    CURR_NODE#,,AUTO
         4 005273   200075 471500                    LDP1    P_STOP$,,AUTO
         4 005274   100002 740100                    STX0    2,,PR1

     1320    13256    5                P_STOP$ -> VX$SC.COM_LINK = CURR_DEPTH;

  13256  4 005275   200151 721100                    LXL1    CURR_DEPTH,,AUTO
         4 005276   200075 471500                    LDP1    P_STOP$,,AUTO
         4 005277   100002 441100                    SXL1    2,,PR1

     1321    13257    5                END;                       /* Else do; */

     1322    13258
     1323    13259    5             IF J = 2 THEN DO;

  13259  4 005300   200110 235100                    LDA     J,,AUTO
         4 005301   000002 115007                    CMPA    2,DL
         4 005302   005307 601000 4                  TNZ     s:13263

     1324    13260    5                P_STOP$ -> VX$SC.NAME_DISP = BLK_COM_DISP;

  13260  4 005303   200146 720100                    LXL0    BLK_COM_DISP,,AUTO
         4 005304   200075 471500                    LDP1    P_STOP$,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:258  
         4 005305   100001 740100                    STX0    1,,PR1

     1325    13261    5                END;

  13261  4 005306   005315 710000 4                  TRA     s:13266

     1326    13262    5             ELSE DO;

     1327    13263    5                P_STOP$ -> VX$SC.NAME_DISP = SC_CURR$ -> VX$SC.NAME_DISP +
             13263                         CURR_NAME_DISP;

  13263  4 005307   000001 236100                    LDQ     1,,PR0
         4 005310   000022 732000                    QRS     18
         4 005311   200152 036100                    ADLQ    CURR_NAME_DISP,,AUTO
         4 005312   000000 620006                    EAX0    0,QL
         4 005313   200075 471500                    LDP1    P_STOP$,,AUTO
         4 005314   100001 740100                    STX0    1,,PR1

     1328    13264    5                END;                       /* Else do; */

     1329    13265
     1330    13266    4             P_STOP$ = PINCRW( P_STOP$, SIZEW( VX$SC ) );

  13266  4 005315   200075 236100                    LDQ     P_STOP$,,AUTO
         4 005316   000003 036003                    ADLQ    3,DU
         4 005317   200075 756100                    STQ     P_STOP$,,AUTO

     1331    13267    4             NEXT_SC_CURR$ = PINCRW( VX_SC_START$, SC_CURR$ -> VX$SC.COM_LINK );

  13267  4 005320   000002 720100                    LXL0    2,,PR0
         4 005321   000000 636010                    EAQ     0,X0
         4 005322   000000 036000 xsym               ADLQ    VX_SC_START$
         4 005323   200071 756100                    STQ     NEXT_SC_CURR$,,AUTO

     1332    13268    4             END;                      /* Do while( NEXT_SC_CURR$ ~= SC_CURR$ ); */

  13268  4 005324   200050 116100                    CMPQ    SC_CURR$,,AUTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:259  
         4 005325   005233 601000 4                  TNZ     s:13244

     1333    13269
     1334    13270    4          IF VX_CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO; /* Move to eldest son */

  13270  4 005326   000000 470400 xsym               LDP0    VX_CURR$
         4 005327   000000 236100                    LDQ     0,,PR0
         4 005330   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 005331   005334 600000 4                  TZE     s:13275

     1335    13271    4             VX_CURR$ = VX_CURR$ -> VX$NODE.SON$;

  13271  4 005332   000000 756000 xsym               STQ     VX_CURR$

     1336    13272    4             END;

  13272  4 005333   005164 710000 4                  TRA     TRAV

     1337    13273    4          ELSE DO;

     1338    13274                                                /* Move to an ancestor */
     1339    13275    5             DO  WHILE( VX_CURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );

  13275  4 005334   005342 710000 4                  TRA     s:13278

     1340    13276    5                VX_CURR$ = VX_CURR$ -> VX$NODE.FATHER$; /* Move up*/

  13276  4 005335   000000 470400 xsym               LDP0    VX_CURR$
         4 005336   000002 236100                    LDQ     2,,PR0
         4 005337   000000 756000 xsym               STQ     VX_CURR$

     1341    13277    5                IF VX_CURR$ = ADDR(NIL) THEN EXIT TRAV; /* Check if done */

  13277  4 005340   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 005341   005350 600000 4                  TZE     s:13283

     1342    13278    5                END;
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:260  

  13278  4 005342   000000 470400 xsym               LDP0    VX_CURR$
         4 005343   000001 236100                    LDQ     1,,PR0
         4 005344   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 005345   005335 600000 4                  TZE     s:13276

     1343    13279    4             VX_CURR$ = VX_CURR$ -> VX$NODE.BROTHER$; /* Move to a brother */

  13279  4 005346   000000 756000 xsym               STQ     VX_CURR$

     1344    13280    4             END;                          /* Else do; */

     1345    13281    3          END;                             /* Do forever */

  13281  4 005347   005164 710000 4                  TRA     TRAV

     1346    13282
     1347    13283    2       RETURN ;

  13283  4 005350   200200 221300                    LDX1  ! BELOW_TEMP$+2,,AUTO
         4 005351   000001 702211                    TSX2  ! 1,X1

     1348    13284    2   END  PROMOTE_SELECT ;
     1349    13285    1   END VXT$ALL;

  13285  4 005352   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:261  
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXT$ALL.
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:262  

 **** Variables and constants ****

  ****  Section 002 RoData VXT$ALL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    10-0-0/w UBIN        r     1 ALIGN_PREC(0:3)
     0-0-0/w BIT         r     1 MODMSK(0:3)
     0-0-0/w UBIN        r     1 MODMSKS(0:3)
     4-0-0/w UBIN        r     1 PREC(0:3)                 31-0-0/w STRC(117)   r     1 UNUSED_DATA

  ****  Section 003  Data  VXT$ALL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 MAX_BADR(0:2)
     3-0-0/w SBIN        r     1 MAX_EADR(0:2)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   201-0-0/w PTR         r     1 @I                       171-0-0/w UBIN        r     1 ABOVE_ALIGN
   170-0-0/w UBIN        r     1 ABOVE_INIT               172-0-0/w UBIN        r     1 ABOVE_PREC
   122-0-0/w SBIN        r     1 ADR                      126-0-0/w UBIN        r     1 ALIGN
   174-0-0/w UBIN        r     1 BELOW_ALIGN              173-0-0/w UBIN        r     1 BELOW_INIT
   175-0-0/w UBIN        r     1 BELOW_PREC               176-0-0/w PTR         r     1 BELOW_TEMP$
    41-0-0/w PTR         r     1 BLK_CHAIN$                40-0-0/w PTR         r     1 BLK_COM$
   146-0-0/w UBIN        r     1 BLK_COM_DISP              73-0-0/w PTR         r     1 BLK_COM_NAME$
   161-0-0/w UBIN        r     1 BLK_COUNT                 42-0-0/w PTR         r     1 BLK_TAIL$
   156-0-0/w UBIN        r     1 COMMON_ADDRESS           157-0-0/w UBIN        r     1 COMMON_DEPTH
   102-0-0/w PTR         r     1 COMMON_NAME$             160-0-0/w UBIN        r     1 COMMON_NODE#
   103-0-0/w PTR         r     1 COMMON_NODE$              33-0-0/w PTR         r     1 CURR$
   151-0-0/w UBIN        r     1 CURR_DEPTH               152-0-0/w UBIN        r     1 CURR_NAME_DISP
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:263  
   150-0-0/w UBIN        r     1 CURR_NODE#               124-0-0/w UBIN        r     1 DCB_ADR
    47-0-0/w PTR         r     1 DCB_CURR$                137-0-0/w UBIN        r     1 DCB_INSERT
   127-0-0/w UBIN        r     1 DIFF                     144-0-0/w UBIN        r     1 DISP
    64-0-0/w PTR         r     1 DN_ROOT_START$            65-0-0/w PTR         r     1 DUMMY$
   135-0-0/w UBIN        r     1 F_NAME_SIZEW             131-0-0/w UBIN        r     1 GET
   132-0-0/w UBIN        r     1 GET_NAME                  66-0-0/w PTR         r     1 HEAD$
   107-0-0/w UBIN        r     1 I                         *0-0-0/w UBIN        r     1 I
    35-0-0/w PTR         r     1 ICURR$                   125-0-0/w UBIN        r     1 INC
   142-0-0/w UBIN        r     1 INDX                       4-0-0/w BIT         r     1 INTERNAL_ALL_BLK_COM
   110-0-0/w UBIN        r     1 J                        111-0-0/w UBIN        r     1 K
   112-0-0/w UBIN        r     1 L                         70-0-0/w PTR         r     1 NEXT$
    62-0-0/w PTR         r     1 NEXT_FORCED_ROOT$
    63-0-0/w PTR         r     1 NEXT_FORCED_ROOT_NAME$
    71-0-0/w PTR         r     1 NEXT_SC_CURR$            113-0-0/w UBIN        r     1 NODE#
    10-0-0/c CHAR(32)    r     1 NODE_NAME1                20-0-0/c CHAR(32)    r     1 NODE_NAME2
    30-0-0/w PTR         r     1 P$                       123-0-0/w UBIN        r     1 PAGE_ADR
     7-0-0/w BIT         r     1 PROMOTED                 153-0-0/w UBIN        r     1 PROMOTE_ADDRESS
     6-0-0/w BIT         r     1 PROMOTE_BLANK            154-0-0/w UBIN        r     1 PROMOTE_DEPTH
     5-0-0/w BIT         r     1 PROMOTE_LABEL            100-0-0/w PTR         r     1 PROMOTE_NAME$
   155-0-0/w UBIN        r     1 PROMOTE_NODE#            101-0-0/w PTR         r     1 PROMOTE_NODE$
   147-0-0/w UBIN        r     1 PROMOTE_SIZE              74-0-0/w PTR         r     1 P_START$
    75-0-0/w PTR         r     1 P_STOP$                   31-0-0/w PTR         r     1 Q$
    76-0-0/w PTR         r     1 R_SC$                     51-0-0/w PTR         r     1 SAVE_SC_CURR$
   145-0-0/w UBIN        r     1 SC_COM_LINK               50-0-0/w PTR         r     1 SC_CURR$
    54-0-0/w PTR         r     1 SC_NAME$                 105-0-0/w PTR         r     1 SC_NEXT$
    52-0-0/w PTR         r     1 SC_START$                 53-0-0/w PTR         r     1 SC_STOP$
   121-0-0/w UBIN        r     1 SC_TYPE                  162-0-0/w UBIN        r     1 SEGMENT
   167-0-0/w PTR         r     1 SEQ_MATCH$               166-0-0/w PTR         r     1 SEQ_TEMP$
   134-0-0/w UBIN        r     1 SIZE_AVAIL               133-0-0/w UBIN        r     1 SIZE_AVAIL_NAME
   111-0-0/w SBIN        r     1 SK                       140-0-0/w UBIN        r     1 START_TIMES
    55-0-0/w PTR         r     1 S_CURR$                   67-0-0/w PTR         r     1 TAIL$
   136-0-0/w UBIN        r     1 TEXTC_SIZEW              106-0-0/w PTR         r     1 UNUSED$
     3-0-0/w BIT         r     1 USER                      72-0-0/w PTR         r     1 WHICH$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:264  
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 VX_BADR(0:2)
     0-0-0/w STRC(108)   r     1 VX_BIAS                    0-0-0/w UBIN        r     1 VX_BLK_COM_COUNT
     0-0-0/w UBIN        r     1 VX_BREF_ADR
     0-0-0/w BIT         r     1 VX_CHK_BLANK_COM_PROMOTE
     0-0-0/w PTR         r     1 VX_CURR$                   0-0-0/w PTR         r     1 VX_DCB_HEAD$
     0-0-0/w UBIN        r     1 VX_DCB_SIZEW               0-0-0/w PTR         r     1 VX_DCB_START$
     0-0-0/w PTR         r     1 VX_DCB_STOP$               0-0-0/w PTR         r     1 VX_DCB_TAIL$
     0-0-0/w UBIN        r     1 VX_DCB_USER_NEXT
     0-0-0/w SBIN        r     1 VX_EADR(0:2)
     0-0-0/w STRC(720)   r     1 VX_EFIELD1                 0-0-0/w STRC(720)   r     1 VX_EFIELD2
     0-0-0/w STRC(720)   r     1 VX_EFIELD3                 0-0-0/w UBIN        r     1 VX_HAVE_SPC
     0-0-0/w PTR         r     1 VX_MERGE_START$            0-0-0/w PTR         r     1 VX_MERGE_STOP$
     0-0-0/w SBIN        r     1 VX_M_ALL(0:8)
     0-0-0/w PTR         r     1 VX_M_BASE_PTR(0:8)
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w PTR         r     1 VX_NEXT_BREF$              0-0-0/w SBIN        r     1 VX_NODE_NUMBER
     0-0-0/w STRC(4572)  r     1 VX_O                       0-0-0/b STRC(116)   r     1 VX_OD
     0-0-0/w BIT         r     1 VX_PRE_DCB_GOT(0:3)
     0-0-0/w PTR         r     1 VX_PRE_DCB_NAME$           0-0-0/w PTR         r     1 VX_PRE_DCB_START$
     0-0-0/w PTR         r     1 VX_PRE_DCB_STOP$           0-0-0/w STRC(108)   r     1 VX_PROGRAM_BIAS
     0-0-0/w PTR         r     1 VX_ROOT$                   0-0-0/w UBIN        r     1 VX_ROOT_DN_INC
     0-0-0/w BIT         r     1 VX_ROS_ALLOWED             0-0-0/w STRC(1440)  r     1 VX_RU_HEAD
     0-0-0/w STRC(108)   r     1 VX_SC_BLANK_COMMON
     0-0-0/w PTR         r     1 VX_SC_BLANK_COM_PROMOTE$
     0-0-0/w UBIN        r     1 VX_SC_BLK_COM              0-0-0/w UBIN        r     1 VX_SC_LBL_COM
     0-0-0/w UBIN        r     1 VX_SC_ROOT_LBL_COM         0-0-0/w PTR         r     1 VX_SC_START$
     0-0-0/w PTR         r     1 VX_SC_X_NODE$
     0-0-0/w UBIN        r     1 VX_SEG_PROC_TYPE(0:5)
     0-0-0/w SBIN        r     1 VX_SEG_SIZE(0:5)
     0-0-0/w PTR         r     1 VX_SLIB_INIT$              0-0-0/w UBIN        r     1 VX_SLIB_MAX_DATA
     0-0-0/w STRC(1908)  r     1 VX_SPC                     0-0-0/w UBIN        r     1 VX_TREE_ADR
     0-0-0/w UBIN        r     1 VX_TREE_NAME_POOL          0-0-0/w UBIN        r     1 VX_TREE_SLIB_NAME

  ****  BASED and DCB variables  ****

PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:265  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(18)    r     1 B$DNAME                    0-0-0/w ASTR(9)     r     1 T$C
     0-0-0/c ASTR(9)     r     1 T$C_UNAL                   0-0-0/w STRC(72)    r     1 VX$BREF
     0-0-0/w STRC(648)   r     1 VX$LST                     0-0-0/w STRC(3672)  r     1 VX$NODE
     0-0-0/w PTR         r     1 VX$PTR$(0:0)
     0-0-0/w STRC(108)   r     1 VX$SC                      0-0-0/w STRC(108)   r     1 VX$TREE_HEADER
     0-0-0/w STRC(216)   r     1 VX$TREE_NODE               0-0-0/w STRC(72)    r     1 VXD$TMPLT


   Procedure VXT$ALL requires 2795 words for executable code.
   Procedure VXT$ALL requires 138 words of local(AUTO) storage.

    No errors detected in file VXT$ALL.:E05TSI    .
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:266  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:267  
          MINI XREF LISTING

ABOVE_ALIGN
     11526**DCL     12320<<ASSIGN  12322>>IF      12322>>IF      12332>>IF
ABOVE_INIT
     11525**DCL     12334<<ASSIGN  12336>>ASSIGN
ABOVE_PREC
     11527**DCL     12336<<ASSIGN  12338>>IF      12339>>IF      12341>>IF
ADR
     11474**DCL     11867<<ASSIGN  12127<<ASSIGN  12128>>ASSIGN  12129>>ASSIGN  12130<<ASSIGN  12130>>ASSIGN
     12131<<ASSIGN  12131>>ASSIGN  12435<<ASSIGN  12436>>ASSIGN  12437>>IF      12471<<ASSIGN  12478>>ASSIGN
     12479<<ASSIGN  12479>>ASSIGN  12485>>ASSIGN  12532<<ASSIGN  12532>>ASSIGN  12535>>IF      12536<<ASSIGN
     12536>>ASSIGN  12539>>ASSIGN  12540<<ASSIGN  12540>>ASSIGN  12790<<ASSIGN  12790>>ASSIGN  12793>>IF
     12794<<ASSIGN  12794>>ASSIGN  12798>>ASSIGN  12800<<ASSIGN  12800>>ASSIGN  12827<<ASSIGN  12827>>ASSIGN
     12830>>IF      12831<<ASSIGN  12831>>ASSIGN  12834>>ASSIGN  12835<<ASSIGN  12835>>ASSIGN  12853>>IF
     12853>>ASSIGN  12860>>ASSIGN  12892>>ASSIGN  12907<<ASSIGN  12934<<ASSIGN  12935>>IF      12950<>CALL
     12961>>IF      12962>>ASSIGN  12963>>IF      12968>>ASSIGN
ALIGN
     11478**DCL     12529<<ASSIGN  12531>>IF      12535>>IF      12536>>ASSIGN  12787<<ASSIGN  12789>>IF
     12793>>IF      12794>>ASSIGN  12824<<ASSIGN  12826>>IF      12830>>IF      12831>>ASSIGN  12916<<ASSIGN
     12918>>IF      12922>>IF      12923>>ASSIGN
ALIGN_PREC
     11797**DCL     12332>>IF      12332>>IF
ALLOCED
     12544**LABEL   12506--GOTO
ALOC_SEG
     12912**PROC    12527--CALL    12560--CALL    12778--CALL
AT_ROOT
     12428**LABEL   12423--GOTO
B$DNAME.COUNT
     11286**DCL     11293--IMP-SIZ 11894<<ASSIGN  11895>>ASSIGN  11998<<ASSIGN  11999>>ASSIGN  12068>>IF
     12068>>IF      12222>>ASSIGN  12233<<ASSIGN  12233>>ASSIGN  12234>>ASSIGN  12234>>ASSIGN  12265>>IF
     12265>>IF      12291>>ASSIGN  12302<<ASSIGN  12302>>ASSIGN  12303>>ASSIGN  12303>>ASSIGN  12326>>ASSIGN
     12327>>ASSIGN  12512>>IF      12512>>IF      12618>>IF      12618>>IF      12649>>IF      12649>>IF
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:268  
     12689>>ASSIGN  12700<<ASSIGN  12700>>ASSIGN  12701>>ASSIGN  12701>>ASSIGN  12715>>ASSIGN  13060>>ASSIGN
     13061<<ASSIGN  13062>>ASSIGN  13062>>ASSIGN
B$DNAME.TEXT
     11293**DCL     11895<<ASSIGN  11999<<ASSIGN  12068>>IF      12068>>IF      12234<<ASSIGN  12234>>ASSIGN
     12265>>IF      12265>>IF      12303<<ASSIGN  12303>>ASSIGN  12327>>ASSIGN  12512>>IF      12512>>IF
     12618>>IF      12618>>IF      12649>>IF      12649>>IF      12701<<ASSIGN  12701>>ASSIGN  13062<<ASSIGN
     13062>>ASSIGN
BELOW_ALIGN
     11529**DCL     12321<<ASSIGN  12322>>IF      12322>>IF      12332>>IF      12333>>ASSIGN
BELOW_INIT
     11528**DCL     12335<<ASSIGN  12337>>ASSIGN  12340>>ASSIGN
BELOW_PREC
     11530**DCL     12337<<ASSIGN  12338>>IF      12339>>IF      12341>>IF
BELOW_TEMP$
     11531**DCL     12325<<ASSIGN  12326>>ASSIGN  12327>>ASSIGN  12327>>ASSIGN
BLANK_COMMON_PROMOTE_CLIMB_UP
     12422**LABEL   12411--GOTO    12414--GOTO
BLK_CHAIN$
     11401**DCL     12394<<ASSIGN  12570>>IF      12571<<ASSIGN  12572>>ASSIGN  12840>>ASSIGN  12841>>ASSIGN
     12842>>ASSIGN  12843>>ASSIGN  12845<<ASSIGN  12845>>ASSIGN  12849<<ASSIGN
BLK_COM$
     11400**DCL     12393<<ASSIGN  12400<<ASSIGN  12402>>IF      12404>>ASSIGN  12406>>IF      12407<<ASSIGN
     12407>>ASSIGN  12410>>IF      12412>>DOWHILE 12413>>IF      12416<<ASSIGN  12416>>ASSIGN  12418<<ASSIGN
     12418>>ASSIGN  12564>>IF      12565>>ASSIGN  12566>>ASSIGN  12823<<ASSIGN  12824>>ASSIGN  12834>>ASSIGN
     12835>>ASSIGN  12836>>ASSIGN  12837>>IF      12837>>ASSIGN  12841>>ASSIGN  12842>>ASSIGN  12899<<ASSIGN
BLK_COM_DISP
     11497**DCL     12000<<ASSIGN  12004<<ASSIGN  13260>>ASSIGN
BLK_COM_NAME$
     11428**DCL     11993<<ASSIGN  11996<>CALL    11998>>ASSIGN  11999>>ASSIGN  11999>>ASSIGN  12000>>ASSIGN
     12003<<ASSIGN  12119>>IF
BLK_COUNT
     11508**DCL     12398<<ASSIGN  12403<<ASSIGN  12403>>ASSIGN  12422>>IF
BLK_TAIL$
     11402**DCL     12575>>ASSIGN  12575>>ASSIGN  12577<<ASSIGN
BUMP_SC_CURR
     12806**LABEL   12579--GOTO    12666--GOTO    12740--GOTO    12742--GOTO    12782--GOTO
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:269  
CHECK_EMPTY_SC
     12802**LABEL   12561--GOTO    12586--GOTO    12779--GOTO
COMMON_ADDRESS
     11505**DCL     12062<<ASSIGN  12080>>IF      12081>>ASSIGN
COMMON_DEPTH
     11506**DCL     12060<<ASSIGN  12073>>IF      12075<<ASSIGN
COMMON_NAME$
     11435**DCL     12059<<ASSIGN  12068>>IF      12068>>IF
COMMON_NODE
     12072**LABEL   12082--EXIT
COMMON_NODE#
     11507**DCL     12061<<ASSIGN  12063>>ASSIGN  12072>>DOWHILE 12076<<ASSIGN
COMMON_NODE$
     11436**DCL     12063<<ASSIGN  12074<<ASSIGN  12074>>ASSIGN  12075>>ASSIGN  12076>>ASSIGN
CURR$
     11395**DCL     11919<<ASSIGN  11922>>ASSIGN  11922>>ASSIGN  11923>>IF      11923>>IF      11926>>ASSIGN
     11926>>ASSIGN  11928>>ASSIGN  11928>>ASSIGN  11933>>IF      11965>>IF      11966<<ASSIGN  11966>>ASSIGN
     11969>>DOWHILE 11971<<ASSIGN  11971>>ASSIGN  11972>>IF      11974<<ASSIGN  11974>>ASSIGN  12482<<ASSIGN
     12484>>DOWHILE 12485>>ASSIGN  12486>>ASSIGN  12488>>ASSIGN  12492>>ASSIGN  12547>>ASSIGN  12548>>ASSIGN
     12549>>ASSIGN  12810>>IF      12823>>ASSIGN  12852>>IF      12867>>ASSIGN  12868>>ASSIGN  12868>>ASSIGN
     12876>>CALL    12892>>ASSIGN  12893>>IF      12894<<ASSIGN  12894>>ASSIGN  12897>>DOWHILE 12898>>IF
     12902<<ASSIGN  12902>>ASSIGN  12903>>IF      12905<<ASSIGN  12905>>ASSIGN  12907>>ASSIGN
CURR_DEPTH
     11500**DCL     13227<<ASSIGN  13256>>ASSIGN
CURR_NAME_DISP
     11501**DCL     13229<<ASSIGN  13231<<ASSIGN  13263>>ASSIGN
CURR_NODE#
     11499**DCL     13226<<ASSIGN  13255>>ASSIGN
DCB_ADR
     11476**DCL     11868<<ASSIGN  12713>>IF      12713<<ASSIGN  12713>>ASSIGN  12714>>ASSIGN  12721<<ASSIGN
     12721>>ASSIGN  13087<<ASSIGN  13087>>ASSIGN  13092>>ASSIGN  13094<<ASSIGN  13094>>ASSIGN  13104>>ASSIGN
DCB_CURR$
     11407**DCL     12991<<ASSIGN  12992>>DOWHILE 12993>>IF      12994>>ASSIGN  12994>>ASSIGN  12995<<ASSIGN
     12995>>ASSIGN  12997<<ASSIGN  12999>>IF      13000>>ASSIGN  13001>>ASSIGN  13002>>ASSIGN  13003>>ASSIGN
     13005>>IF      13006<<ASSIGN  13006>>ASSIGN  13037<<ASSIGN  13038>>DOWHILE 13042>>ASSIGN  13043>>ASSIGN
     13045<<ASSIGN  13045>>ASSIGN
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:270  
DCB_INSERT
     11489**DCL     11869<<ASSIGN  12727<<ASSIGN  12727>>ASSIGN  13014>>ASSIGN
DIFF
     11479**DCL     12840<<ASSIGN  12844>>IF      12845>>ASSIGN
DISP
     11494**DCL     12210<<ASSIGN  12212>>ASSIGN  12218>>ASSIGN  12241<<ASSIGN  12242>>IF      12243>>ASSIGN
     12279<<ASSIGN  12281>>ASSIGN  12282>>ASSIGN  12288>>ASSIGN
DN_ROOT_START$
     11420**DCL     11883<<ASSIGN  12000>>ASSIGN  12025<>CALL    12046>>ASSIGN  12059>>ASSIGN  12221>>ASSIGN
     12235>>ASSIGN  12255>>ASSIGN  12265>>IF      12265>>IF      12304>>ASSIGN  12649>>IF      12649>>IF
     12703>>ASSIGN  13057>>ASSIGN  13074<>CALL    13229>>ASSIGN
DONE
     12910**LABEL   12903--GOTO
DUMMY$
     11421**DCL     11888<<ASSIGN  11891<>CALL    11893>>ASSIGN  11894>>ASSIGN  11895>>ASSIGN  11895>>ASSIGN
     12226<<ASSIGN  12229<>CALL    12295<<ASSIGN  12298<>CALL    12674<<ASSIGN  12677<>CALL    12693<<ASSIGN
     12696<>CALL
EXIT1
     12359**LABEL   12361--GOTO
FOUND_DCB_IN_LIST
     12731**LABEL   12651--GOTO
FOUND_PREDEFINED_DCB
     12661**LABEL   12620--GOTO
F_NAME_SIZEW
     11487**DCL     12222<<ASSIGN  12223>>IF      12237>>ASSIGN  12238>>ASSIGN  12291<<ASSIGN  12292>>IF
     12306>>ASSIGN  12307>>ASSIGN  12689<<ASSIGN  12690>>IF      12707>>ASSIGN  12708>>ASSIGN  12728>>ASSIGN
GET
     11483**DCL     12135<<ASSIGN  12137>>IF      12139>>ASSIGN  12141<>CALL    12143>>ASSIGN  12673>>IF
     12675>>ASSIGN  12677<>CALL    12679>>ASSIGN
GET_NAME
     11484**DCL     12133<<ASSIGN  12134>>IF      12134<<ASSIGN  12135>>ASSIGN  12144<<ASSIGN  12144>>ASSIGN
     12146>>IF      12148>>ASSIGN  12150<>CALL    12152>>ASSIGN  12225>>IF      12227>>ASSIGN  12229<>CALL
     12231>>ASSIGN  12294>>IF      12296>>ASSIGN  12298<>CALL    12300>>ASSIGN  12692>>IF      12694>>ASSIGN
     12696<>CALL    12698>>ASSIGN
HEAD$
     11422**DCL     12502<<ASSIGN  12503>>ASSIGN  12504>>ASSIGN  12505>>ASSIGN  12509<<ASSIGN  12510>>ASSIGN
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:271  
     12511>>DOWHILE 12522<<ASSIGN  12523>>ASSIGN
I
     11458**DCL     11459--REDEF   11911<<ASSIGN  11913>>IF      11915>>ASSIGN  11917<>CALL    12099<<ASSIGN
     12100<<ASSIGN  12102>>IF      12103>>ASSIGN  12105>>ASSIGN  12111>>ASSIGN  12156<<DOINDEX 12179>>IF
     12433<<DOINDEX 12434>>IF      12485>>ASSIGN  12487>>IF      12498>>IF      12552>>DOCASE  12810>>IF
     12853>>IF      12853>>ASSIGN  12855>>IF      12892>>ASSIGN  12907>>ASSIGN  13016<<ASSIGN  13018>>IF
     13020>>ASSIGN  13022<>CALL    13024<<ASSIGN  13026>>IF      13028>>ASSIGN  13030<>CALL    13048<<DOINDEX
     13049>>IF      13049>>IF      13052>>IF      13055>>ASSIGN  13059>>ASSIGN  13110<<DOINDEX 13111>>ASSIGN
     13111>>ASSIGN  13112>>ASSIGN  13112>>ASSIGN  13183<<DOINDEX 13184>>IF      13190>>ASSIGN  13205>>CALL
     13212>>ASSIGN  13212>>ASSIGN  13213>>ASSIGN  13213>>ASSIGN
I IN PROCEDURE PROMOTE_SELECT
     13221**DCL     13219--PROC    13233>>DOCASE
ICURR$
     11397**DCL     11931<<ASSIGN  11933>>IF      11934>>IF      11934>>IF      11937>>ASSIGN  11937>>ASSIGN
     11939>>ASSIGN  11939>>ASSIGN  11952>>IF      11953<<ASSIGN  11953>>ASSIGN  11956>>DOWHILE 11958<<ASSIGN
     11958>>ASSIGN  11959>>IF      11961<<ASSIGN  11961>>ASSIGN
INC
     11477**DCL     12987<<ASSIGN  12988>>IF      12990>>IF      12990<<ASSIGN  12990>>ASSIGN  12994>>ASSIGN
     13087>>ASSIGN
INDX
     11492**DCL     12162<<ASSIGN  12180<<ASSIGN  12184<<ASSIGN  12193>>ASSIGN  12195>>ASSIGN  12196>>ASSIGN
     12201>>ASSIGN  12203>>ASSIGN  12204>>ASSIGN
INSERT_DCB
     12658**LABEL   12644--GOTO
INTERNAL_ALL_BLK_COM
     11313**DCL     12395<<ASSIGN  12811>>IF      12821<<ASSIGN  12900<<ASSIGN
INTERNAL_DONE
     11956**LABEL   11959--GOTO
J
     11460**DCL     11461--REDEF   12857<<ASSIGN  12859<<ASSIGN  12861>>IF      12869>>ASSIGN  13060<<ASSIGN
     13061>>ASSIGN  13063>>ASSIGN  13117<<ASSIGN  13118<<ASSIGN  13121>>IF      13133<>CALL    13182<<ASSIGN
     13184>>IF      13201<>CALL    13248<<ASSIGN  13250>>IF      13259>>IF
K
     11462**DCL     11463--REDEF   12489<<ASSIGN  12493<<ASSIGN  12559<<ASSIGN  12777<<ASSIGN  12914>>ASSIGN
     13137<>CALL    13161<>CALL    13190<<ASSIGN  13197<>CALL
L
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:272  
     11464**DCL     11465--REDEF   12665<<ASSIGN  12666>>IF      12667>>ASSIGN
LOOP_DONE
     11973**LABEL   11972--GOTO
MAX_BADR
     11829**DCL     12129<<ASSIGN  12469<<ASSIGN  12470>>ASSIGN  13085<<ASSIGN  13105>>ASSIGN  13106>>ASSIGN
     13107>>ASSIGN  13111>>ASSIGN  13176>>ASSIGN  13176>>ASSIGN  13177>>ASSIGN  13178>>ASSIGN
MAX_EADR
     11830**DCL     12435>>ASSIGN  12468<<ASSIGN  12853>>IF      12853<<ASSIGN  12934>>ASSIGN  12969<<ASSIGN
     12970>>ASSIGN  13104<<ASSIGN  13108>>ASSIGN  13112>>ASSIGN  13119>>ASSIGN  13120>>IF      13120>>ASSIGN
     13148>>ASSIGN  13177>>ASSIGN  13178>>ASSIGN
MODMSK
     11481**DCL     12535>>IF      12536>>ASSIGN  12793>>IF      12794>>ASSIGN  12830>>IF      12831>>ASSIGN
     12922>>IF      12923>>ASSIGN
MODMSKS
     11480**DCL     11481--REDEF
MOVE_PROMOTE
     12209**LABEL   12244--GOTO
NEXT$
     11424**DCL     12261<<ASSIGN  12263>>DOWHILE 12264>>ASSIGN  12268<<ASSIGN
NEXT_BLANK_CM
     12840**LABEL   12846--GOTO
NEXT_BLOCK
     12058**LABEL   12091--EXIT
NEXT_FORCED_ROOT$
     11418**DCL     12138<<ASSIGN  12141<>CALL    12209>>ASSIGN  12210>>ASSIGN  12211>>ASSIGN  12212>>ASSIGN
     12215>>ASSIGN  12220>>ASSIGN  12235>>ASSIGN  12239<<ASSIGN  12239>>ASSIGN  12278>>ASSIGN  12279>>ASSIGN
     12280>>ASSIGN  12281>>ASSIGN  12285>>ASSIGN  12290>>ASSIGN  12304>>ASSIGN  12308<<ASSIGN  12308>>ASSIGN
     12681>>ASSIGN  12683>>ASSIGN  12684>>ASSIGN  12702>>ASSIGN  12703>>ASSIGN  12705>>ASSIGN  12711>>ASSIGN
     12714>>ASSIGN  12720>>ASSIGN  12721>>ASSIGN  12722>>ASSIGN  12725<<ASSIGN  12725>>ASSIGN
NEXT_FORCED_ROOT_NAME$
     11419**DCL     12147<<ASSIGN  12150<>CALL    12233>>ASSIGN  12234>>ASSIGN  12234>>ASSIGN  12235>>ASSIGN
     12237<<ASSIGN  12237>>ASSIGN  12302>>ASSIGN  12303>>ASSIGN  12303>>ASSIGN  12304>>ASSIGN  12306<<ASSIGN
     12306>>ASSIGN  12700>>ASSIGN  12701>>ASSIGN  12701>>ASSIGN  12703>>ASSIGN  12707<<ASSIGN  12707>>ASSIGN
     13027<<ASSIGN  13030<>CALL    13032<<ASSIGN  13032>>ASSIGN  13057>>ASSIGN  13061>>ASSIGN  13062>>ASSIGN
     13062>>ASSIGN  13063<<ASSIGN  13063>>ASSIGN
NEXT_FULL_DCB
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:273  
     12999**LABEL   13007--GOTO
NEXT_FULL_DONE
     13009**LABEL   13005--GOTO
NEXT_SC_CURR$
     11425**DCL     12193<<ASSIGN  12246<<ASSIGN  12251>>DOWHILE 12252>>ASSIGN  12350<<ASSIGN  12488<<ASSIGN
     12492<<ASSIGN  12496>>DOWHILE 12497>>ASSIGN  12545<<ASSIGN  12581<<ASSIGN  12583>>ASSIGN  12584>>ASSIGN
     12585>>ASSIGN  13235<<ASSIGN  13237<<ASSIGN  13239<<ASSIGN  13243>>DOWHILE 13244>>ASSIGN  13267<<ASSIGN
NODE#
     11467**DCL     12486<<ASSIGN  12544>>ASSIGN  12799>>ASSIGN  12836>>ASSIGN
NODE_NAME1
     11333**DCL     11926<<ASSIGN  11928<<ASSIGN  11940>>IF      11945--ASSIGN  11946>>ASSIGN
NODE_NAME2
     11334**DCL     11937<<ASSIGN  11939<<ASSIGN  11940>>IF
NOT_PREDEFINED_DCB
     12643**LABEL   12613--GOTO
P$
     11391**DCL     13059<<ASSIGN  13060>>ASSIGN  13062>>ASSIGN  13062>>ASSIGN
PAGE_ADR
     11475**DCL     12436<<ASSIGN  12437<<ASSIGN  12437>>ASSIGN  12439>>IF      12455<>CALL    12466<<ASSIGN
     12468>>ASSIGN  12469>>ASSIGN  12471>>ASSIGN
PREC
     11794**DCL     12336>>ASSIGN  12337>>ASSIGN
PROMOTED
     11316**DCL     12052<<ASSIGN  12054<<ASSIGN  12065<<ASSIGN  12079<<ASSIGN  12098>>IF
PROMOTE_ADDRESS
     11502**DCL     12049<<ASSIGN  12080>>IF      12081<<ASSIGN
PROMOTE_BLANK
     11315**DCL     11980<<ASSIGN  11984>>IF      11989>>IF      12021>>IF
PROMOTE_DEPTH
     11503**DCL     12047<<ASSIGN  12073>>IF      12084<<ASSIGN
PROMOTE_LABEL
     11314**DCL     11981<<ASSIGN  11984>>IF      12007>>IF      12022>>IF      12153>>IF
PROMOTE_NAME$
     11433**DCL     12046<<ASSIGN  12068>>IF      12068>>IF
PROMOTE_NODE#
     11504**DCL     12048<<ASSIGN  12050>>ASSIGN  12072>>DOWHILE 12082>>IF      12085<<ASSIGN
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:274  
PROMOTE_NODE$
     11434**DCL     12050<<ASSIGN  12083<<ASSIGN  12083>>ASSIGN  12084>>ASSIGN  12085>>ASSIGN  12102>>IF
     12103>>ASSIGN  12105>>ASSIGN  12111>>ASSIGN
PROMOTE_SELECT
     13219**PROC    12020--CALL    12021--CALL    12022--CALL
PROMOTE_SIZE
     11498**DCL     11979<<ASSIGN  11987<<ASSIGN  11987>>ASSIGN  11990<<ASSIGN  11990>>ASSIGN  12008<<ASSIGN
     12008>>ASSIGN  12011>>IF      12013>>ASSIGN  12015<>CALL    12390>>IF      12391<>CALL
P_START$
     11429**DCL     12018<<ASSIGN  12025<>CALL    12044>>ASSIGN
P_STOP$
     11430**DCL     12012<<ASSIGN  12015<>CALL    12018>>ASSIGN  12025>>CALL    12045>>DOWHILE 12058>>DOWHILE
     13245>>ASSIGN  13246>>ASSIGN  13247>>ASSIGN  13251>>ASSIGN  13252>>ASSIGN  13255>>ASSIGN  13256>>ASSIGN
     13260>>ASSIGN  13263>>ASSIGN  13266<<ASSIGN  13266>>ASSIGN
Q$
     11392**DCL     13000<<ASSIGN  13001>>ASSIGN  13002>>ASSIGN  13003>>ASSIGN
R_SC$
     11431**DCL     12105<<ASSIGN  12106>>ASSIGN  12106>>ASSIGN
SAVE_SC_CURR$
     11409**DCL     12201<<ASSIGN  12246>>ASSIGN
SC_COM_LINK
     11495**DCL     12253<<ASSIGN  12350>>ASSIGN
SC_CURR$
     11408**DCL     12044<<ASSIGN  12045>>DOWHILE 12046>>ASSIGN  12047>>ASSIGN  12048>>ASSIGN  12049>>ASSIGN
     12051>>IF      12057>>ASSIGN  12099>>IF      12103>>ASSIGN  12106>>ASSIGN  12109>>ASSIGN  12110>>ASSIGN
     12111>>ASSIGN  12115<<ASSIGN  12192<<ASSIGN  12199<<ASSIGN  12209>>ASSIGN  12211>>ASSIGN  12221>>ASSIGN
     12241>>ASSIGN  12243<<ASSIGN  12243>>ASSIGN  12247<<ASSIGN  12251>>DOWHILE 12252<<ASSIGN  12253>>ASSIGN
     12254>>IF      12255>>ASSIGN  12257>>ASSIGN  12278>>ASSIGN  12280>>ASSIGN  12282>>ASSIGN  12317>>ASSIGN
     12318>>IF      12319>>ASSIGN  12321>>ASSIGN  12325>>ASSIGN  12335>>ASSIGN  12346>>ASSIGN  12495<<ASSIGN
     12496>>DOWHILE 12497<<ASSIGN  12500>>IF      12502>>ASSIGN  12503>>ASSIGN  12504>>ASSIGN  12505>>ASSIGN
     12509>>ASSIGN  12512>>IF      12512>>IF      12518>>ASSIGN  12519>>IF      12520>>ASSIGN  12527>>IF
     12529>>ASSIGN  12539>>ASSIGN  12540>>ASSIGN  12542>>ASSIGN  12542>>ASSIGN  12544>>ASSIGN  12545>>ASSIGN
     12547<<ASSIGN  12550>>DOWHILE 12551>>ASSIGN  12557>>IF      12565>>ASSIGN  12566>>ASSIGN  12567>>ASSIGN
     12571>>ASSIGN  12575>>ASSIGN  12577>>ASSIGN  12581>>ASSIGN  12583>>ASSIGN  12584>>ASSIGN  12585>>ASSIGN
     12592>>ASSIGN  12593>>ASSIGN  12594>>ASSIGN  12595>>ASSIGN  12596>>ASSIGN  12661>>ASSIGN  12662>>ASSIGN
     12663>>ASSIGN  12664>>ASSIGN  12668>>ASSIGN  12681>>ASSIGN  12702>>ASSIGN  12705>>ASSIGN  12722>>ASSIGN
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:275  
     12731>>ASSIGN  12734>>ASSIGN  12737>>ASSIGN  12739>>ASSIGN  12775>>IF      12786>>IF      12787>>ASSIGN
     12798>>ASSIGN  12799>>ASSIGN  12800>>ASSIGN  12802>>IF      12803>>ASSIGN  12804>>ASSIGN  12806<<ASSIGN
     12806>>ASSIGN  12913>>ASSIGN  12915>>IF      12916>>ASSIGN  12927>>ASSIGN  12928>>ASSIGN  13242<<ASSIGN
     13243>>DOWHILE 13244<<ASSIGN  13245>>ASSIGN  13246>>ASSIGN  13248>>ASSIGN  13263>>ASSIGN  13267>>ASSIGN
SC_NAME$
     11412**DCL     12250<<ASSIGN  12257>>ASSIGN  12325>>ASSIGN  12512>>IF      12512>>IF      12512>>IF
     12512>>IF      12549<<ASSIGN  12592>>ASSIGN
SC_NEXT$
     11438**DCL     12057<<ASSIGN  12058>>DOWHILE 12059>>ASSIGN  12060>>ASSIGN  12061>>ASSIGN  12062>>ASSIGN
     12064>>IF      12093<<ASSIGN  12093>>ASSIGN  12115>>ASSIGN
SC_START$
     11410**DCL     11870<<ASSIGN  11871>>IF      12705>>ASSIGN  12722>>ASSIGN  12731>>ASSIGN  12737>>ASSIGN
     13000>>ASSIGN  13006>>ASSIGN
SC_STOP$
     11411**DCL     12194<<ASSIGN  12202<<ASSIGN  12254>>IF      12548<<ASSIGN  12550>>DOWHILE
SC_TYPE
     11473**DCL     12551<<ASSIGN  12555>>DOCASE  12755<>CALL    12772>>DOCASE
SEGMENT
     11509**DCL     12913<<ASSIGN  12914>>ASSIGN  12919>>ASSIGN  12919>>ASSIGN  12922>>IF      12923>>ASSIGN
     12923>>ASSIGN  12927>>ASSIGN  12928>>ASSIGN  12928>>ASSIGN
SEQ_MATCH$
     11523**DCL     12221<<ASSIGN  12222>>ASSIGN  12233>>ASSIGN  12234>>ASSIGN  12234>>ASSIGN  12255<<ASSIGN
     12257<<ASSIGN  12265>>IF      12265>>IF      12291>>ASSIGN  12302>>ASSIGN  12303>>ASSIGN  12303>>ASSIGN
     12592<<ASSIGN  12618>>IF      12618>>IF      12649>>IF      12649>>IF      12689>>ASSIGN  12700>>ASSIGN
     12701>>ASSIGN  12701>>ASSIGN  12715>>ASSIGN
SEQ_TEMP$
     11522**DCL     12262<<ASSIGN  12263>>DOWHILE 12264<<ASSIGN  12265>>IF      12265>>IF      12268>>ASSIGN
     12317>>ASSIGN  12318>>IF      12319>>ASSIGN  12320>>ASSIGN  12333>>ASSIGN  12334>>ASSIGN  12340>>ASSIGN
     12341>>IF      12343>>ASSIGN  12612<<ASSIGN  12613>>IF      12614>>DOWHILE 12618>>IF      12618>>IF
     12622<<ASSIGN  12622>>ASSIGN  12643<<ASSIGN  12644>>IF      12645>>DOWHILE 12649>>IF      12649>>IF
     12653<<ASSIGN  12653>>ASSIGN  12665>>ASSIGN  12668>>ASSIGN  12731>>ASSIGN
SET_FROM_ENTRY
     12317**LABEL   12267--GOTO
SIZE_AVAIL
     11486**DCL     12143<<ASSIGN  12240<<ASSIGN  12240>>ASSIGN  12309<<ASSIGN  12309>>ASSIGN  12671>>IF
     12679<<ASSIGN  12679>>ASSIGN  12726<<ASSIGN  12726>>ASSIGN  12931>>IF      12931<>CALL
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:276  
SIZE_AVAIL_NAME
     11485**DCL     12152<<ASSIGN  12223>>IF      12231<<ASSIGN  12231>>ASSIGN  12238<<ASSIGN  12238>>ASSIGN
     12292>>IF      12300<<ASSIGN  12300>>ASSIGN  12307<<ASSIGN  12307>>ASSIGN  12690>>IF      12698<<ASSIGN
     12698>>ASSIGN  12708<<ASSIGN  12708>>ASSIGN  12932>>IF      12932<>CALL
SK
     11463**DCL     12860<<ASSIGN  12861>>IF      12869<<ASSIGN  12869>>ASSIGN  12884<>CALL    13119<<ASSIGN
     13120>>IF      13120<<ASSIGN  13121>>IF      13148<<ASSIGN  13149>>IF
START_TIMES
     11490**DCL     12154<<ASSIGN  12155<<ASSIGN  12156>>DOINDEX 12161>>IF
S_CURR$
     11413**DCL     12258<<ASSIGN  12260>>DOWHILE 12261>>ASSIGN  12272<<ASSIGN  12273<<ASSIGN  12273>>ASSIGN
T$C.CHARS
     11221**DCL     11926>>ASSIGN  11928>>ASSIGN  11937>>ASSIGN  11939>>ASSIGN  12868>>ASSIGN
T$C.COUNT
     11220**DCL     11221--IMP-SIZ 11926>>ASSIGN  11928>>ASSIGN  11937>>ASSIGN  11939>>ASSIGN  12867>>ASSIGN
     12868>>ASSIGN
T$C_UNAL.COUNT
     11223**DCL     11224--IMP-SIZ
TAIL$
     11423**DCL     12213<<ASSIGN  12214>>IF      12218>>ASSIGN  12283<<ASSIGN  12284>>IF      12288>>ASSIGN
     12510<<ASSIGN  12511>>DOWHILE 12512>>IF      12512>>IF      12517>>ASSIGN  12518>>ASSIGN  12519>>IF
     12520>>ASSIGN  12522>>ASSIGN  12523<<ASSIGN
TEXTC_SIZEW
     11488**DCL     12715<<ASSIGN  12720>>ASSIGN
TRAV IN PROCEDURE PROMOTE_SELECT
     13225**LABEL   13277--EXIT
UNUSED$
     11439**DCL     11898<<ASSIGN  11901<>CALL    11903>>ASSIGN  11904>>ASSIGN  11905>>ASSIGN  11906>>ASSIGN
     12962>>ASSIGN  12964>>ASSIGN  12966>>ASSIGN  12967>>ASSIGN  12968>>ASSIGN  12971>>ASSIGN
UNUSED_DATA
     11810**DCL     11887--IF      11889--ASSIGN  11891--CALL    11893--ASSIGN  11907--ASSIGN
UNUSED_DATA.COUNT
     11811**DCL     11894>>ASSIGN
UNUSED_DATA.TEXT
     11812**DCL     11895>>ASSIGN
USER
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:277  
     11312**DCL     12658<<ASSIGN  12669<<ASSIGN  12709>>IF
VX$BREF
     11835**DCL     12479--ASSIGN
VX$BREF.WORD_A
     11836**DCL     11837--REDEF
VX$LST.OBJECT_NAME$
     11060**DCL     11061--REDEF   11926>>ASSIGN  11926>>ASSIGN  11937>>ASSIGN  11937>>ASSIGN
VX$LST.P.NAME_.NAME$
     11073**DCL     11928>>ASSIGN  11928>>ASSIGN  11939>>ASSIGN  11939>>ASSIGN  12867>>ASSIGN  12868>>ASSIGN
     12868>>ASSIGN
VX$LST.SC_HEAD$
     11062**DCL     11063--REDEF
VX$LST.SC_TAIL$
     11064**DCL     11065--REDEF
VX$LST.SUB_TYPE
     11059**DCL     11923>>IF      11934>>IF
VX$LST.TYPE
     11058**DCL     11923>>IF      11934>>IF
VX$NODE.ADDR_START.RDATA
     10786**DCL     13105<<ASSIGN  13179>>ASSIGN
VX$NODE.ADDR_START.ROS
     10788**DCL     13107<<ASSIGN
VX$NODE.ADDR_START.RPROC
     10787**DCL     13106<<ASSIGN  13180>>ASSIGN
VX$NODE.ADDR_START_A
     10784**DCL     10785--REDEF   12485<<ASSIGN
VX$NODE.ADDR_STOP.RDATA
     10791**DCL     12970<<ASSIGN  13179>>ASSIGN
VX$NODE.ADDR_STOP.ROS
     10793**DCL     13108<<ASSIGN
VX$NODE.ADDR_STOP.RPROC
     10792**DCL     13180>>ASSIGN
VX$NODE.ADDR_STOP_A
     10789**DCL     10790--REDEF   12892<<ASSIGN  12907>>ASSIGN
VX$NODE.ALL_BLK_COM
     10882**DCL     12402>>IF      12404<<ASSIGN  12428<<ASSIGN  12810>>IF      12898>>IF
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:278  
VX$NODE.BLANK_COMMON$
     10885**DCL     12429>>ASSIGN  12823>>ASSIGN
VX$NODE.BROTHER$
     10773**DCL     11956>>DOWHILE 11961>>ASSIGN  11969>>DOWHILE 11974>>ASSIGN  12359>>DOWHILE 12365>>ASSIGN
     12418>>ASSIGN  12897>>DOWHILE 12905>>ASSIGN  13275>>DOWHILE 13279>>ASSIGN
VX$NODE.DEPTH
     10783**DCL     12075>>ASSIGN  12084>>ASSIGN  13227>>ASSIGN
VX$NODE.FATHER$
     10774**DCL     11958>>ASSIGN  11971>>ASSIGN  12074>>ASSIGN  12083>>ASSIGN  12360>>ASSIGN  12366>>ASSIGN
     12412>>DOWHILE 12416>>ASSIGN  12424>>ASSIGN  12902>>ASSIGN  12907>>ASSIGN  13276>>ASSIGN
VX$NODE.HEAD$
     10776**DCL     11923>>IF      11923>>IF      11926>>ASSIGN  11926>>ASSIGN  11928>>ASSIGN  11928>>ASSIGN
     11934>>IF      11934>>IF      11937>>ASSIGN  11937>>ASSIGN  11939>>ASSIGN  11939>>ASSIGN  12867>>ASSIGN
     12868>>ASSIGN  12868>>ASSIGN
VX$NODE.L_PREV_SIZE
     10842**DCL     10853--REDEF
VX$NODE.L_SC_START
     10861**DCL     10866--REDEF
VX$NODE.L_SC_START.SC_BLK_COM$
     10862**DCL     13235>>ASSIGN
VX$NODE.L_SC_START.SC_DCB$
     10865**DCL     12492>>ASSIGN
VX$NODE.L_SC_START.SC_LBL_COM$
     10864**DCL     12167>>IF      12169>>ASSIGN  12173>>ASSIGN  13239>>ASSIGN
VX$NODE.L_SC_START.SC_ROOT_LBL_COM$
     10863**DCL     12168>>IF      12169<<ASSIGN  12215<<ASSIGN  12261>>ASSIGN  12285<<ASSIGN  12488>>ASSIGN
     13237>>ASSIGN
VX$NODE.L_SC_START_A$
     10866**DCL     12193>>ASSIGN  12195<<ASSIGN  12201>>ASSIGN  12203<<ASSIGN
VX$NODE.L_SC_STOP
     10867**DCL     10872--REDEF
VX$NODE.L_SC_STOP.SC_ROOT_LBL_COM$
     10869**DCL     12173>>ASSIGN  12213>>ASSIGN  12220<<ASSIGN  12283>>ASSIGN  12290<<ASSIGN
VX$NODE.L_SC_STOP_A$
     10872**DCL     12196<<ASSIGN  12204<<ASSIGN
VX$NODE.L_SIZE
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:279  
     10830**DCL     10841--REDEF
VX$NODE.L_SIZE.DN
     10832**DCL     11906>>ASSIGN  11907<<ASSIGN  11907>>ASSIGN
VX$NODE.L_SIZE.SC
     10834**DCL     12972<<ASSIGN  12972>>ASSIGN
VX$NODE.L_START
     10806**DCL     10817--REDEF
VX$NODE.L_START.DN$
     10808**DCL     11883>>ASSIGN  12250>>ASSIGN  12549>>ASSIGN  13228>>IF      13229>>ASSIGN
VX$NODE.L_START.SC$
     10810**DCL     11870>>ASSIGN  12547>>ASSIGN
VX$NODE.L_STOP
     10818**DCL     10829--REDEF
VX$NODE.L_STOP.DN$
     10820**DCL     11893<<ASSIGN
VX$NODE.L_STOP.SC$
     10822**DCL     12194>>ASSIGN  12202>>ASSIGN  12548>>ASSIGN  12971<<ASSIGN
VX$NODE.NUM
     10782**DCL     11922>>ASSIGN  12076>>ASSIGN  12085>>ASSIGN  12486>>ASSIGN  12876<>CALL    13226>>ASSIGN
VX$NODE.PATH$
     10775**DCL     12160<<ASSIGN  12273>>ASSIGN  12355<<ASSIGN  12366<<ASSIGN
VX$NODE.PROMOTE_HEAD
     10873**DCL     10876--REDEF
VX$NODE.PROMOTE_HEAD.LBL_COM$
     10875**DCL     12191>>IF      12199>>ASSIGN  12200<<ASSIGN
VX$NODE.PROMOTE_HEAD_A$
     10876**DCL     12102>>IF      12103<<ASSIGN
VX$NODE.PROMOTE_TAIL
     10877**DCL     10880--REDEF
VX$NODE.PROMOTE_TAIL_A$
     10880**DCL     12105>>ASSIGN  12111<<ASSIGN
VX$NODE.SON$
     10772**DCL     11952>>IF      11953>>ASSIGN  11965>>IF      11966>>ASSIGN  12354>>IF      12355>>ASSIGN
     12356>>ASSIGN  12406>>IF      12407>>ASSIGN  12852>>IF      12893>>IF      12894>>ASSIGN  13270>>IF
     13271>>ASSIGN
VX$NODE.START_PAGE#_A
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:280  
     10794**DCL     10795--REDEF
VX$NODE.STOP_PAGE#_A
     10799**DCL     10800--REDEF
VX$PTR$
     11842**DCL     11922<<ASSIGN  12050>>ASSIGN  12063>>ASSIGN
VX$SC
     10911**DCL     11897--IF      11899--ASSIGN  11901--CALL    11903<<ASSIGN  11987--ASSIGN  11990--ASSIGN
     12008--ASSIGN  12025--CALL    12025--CALL    12057--ASSIGN  12093--ASSIGN  12134--ASSIGN  12135--ASSIGN
     12209<<ASSIGN  12209>>ASSIGN  12239--ASSIGN  12240--ASSIGN  12278<<ASSIGN  12278>>ASSIGN  12308--ASSIGN
     12309--ASSIGN  12429<<ASSIGN  12622--ASSIGN  12653--ASSIGN  12665--ASSIGN  12671--IF      12681<<ASSIGN
     12681>>ASSIGN  12687--ASSIGN  12702<<ASSIGN  12702>>ASSIGN  12725--ASSIGN  12726--ASSIGN  12806--ASSIGN
     12972--ASSIGN  12995--ASSIGN  13045--ASSIGN  13245<<ASSIGN  13245>>ASSIGN  13266--ASSIGN
VX$SC.ADDRESS
     10946**DCL     12049>>ASSIGN  12062>>ASSIGN  12211>>ASSIGN  12502>>ASSIGN  12504<<ASSIGN  12504>>ASSIGN
     12518<<ASSIGN  12539<<ASSIGN  12565<<ASSIGN  12565>>ASSIGN  12583<<ASSIGN  12583>>ASSIGN  12662<<ASSIGN
     12714<<ASSIGN  12798<<ASSIGN  12834<<ASSIGN  12841<<ASSIGN  12841>>ASSIGN  12927<<ASSIGN  12962<<ASSIGN
     12994<<ASSIGN  12994>>ASSIGN  13002<<ASSIGN  13002>>ASSIGN  13246<<ASSIGN
VX$SC.ATTR
     10933**DCL     12542<<ASSIGN  12542>>ASSIGN
VX$SC.ATTR.ALIGN
     10944**DCL     12320>>ASSIGN  12321>>ASSIGN  12333<<ASSIGN  12529>>ASSIGN  12787>>ASSIGN  12824>>ASSIGN
     12916>>ASSIGN  12964<<ASSIGN  12966<<ASSIGN
VX$SC.ATTR.ALL
     10939**DCL     12500>>IF      12517<<ASSIGN  12595<<ASSIGN  12663<<ASSIGN  12999>>IF
VX$SC.ATTR.INT
     10934**DCL     11905<<ASSIGN  12334>>ASSIGN  12335>>ASSIGN  12340<<ASSIGN  12346<<ASSIGN  12567<<ASSIGN
     12594<<ASSIGN  12843<<ASSIGN
VX$SC.ATTR.MES_INIT
     10943**DCL     12341>>IF      12343<<ASSIGN
VX$SC.ATTR.PRE_DCB
     10941**DCL     12596<<ASSIGN  12664<<ASSIGN  12993>>IF
VX$SC.ATTR.SEGMENT
     10936**DCL     12527>>IF      12557>>IF      12775>>IF
VX$SC.COM_LINK
     10955**DCL     12047>>ASSIGN  12060>>ASSIGN  12106<<ASSIGN  12110<<ASSIGN  12173<<ASSIGN  12212<<ASSIGN
     12218<<ASSIGN  12241>>ASSIGN  12253>>ASSIGN  12268>>ASSIGN  12281<<ASSIGN  12282<<ASSIGN  12288<<ASSIGN
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:281  
     12317<<ASSIGN  12510>>ASSIGN  12523>>ASSIGN  12545>>ASSIGN  12572<<ASSIGN  12575<<ASSIGN  12581>>ASSIGN
     12705<<ASSIGN  12737<<ASSIGN  12840>>ASSIGN  13005>>IF      13006>>ASSIGN  13252<<ASSIGN  13256<<ASSIGN
     13267>>ASSIGN
VX$SC.EMPTY
     10930**DCL     12109<<ASSIGN  12803<<ASSIGN  12804<<ASSIGN  12837<<ASSIGN  12967<<ASSIGN  13247<<ASSIGN
VX$SC.NAME_DISP
     10949**DCL     11906<<ASSIGN  12046>>ASSIGN  12059>>ASSIGN  12221>>ASSIGN  12235<<ASSIGN  12255>>ASSIGN
     12257>>ASSIGN  12265>>IF      12265>>IF      12304<<ASSIGN  12325>>ASSIGN  12512>>IF      12512>>IF
     12512>>IF      12512>>IF      12592>>ASSIGN  12618>>IF      12618>>IF      12649>>IF      12649>>IF
     12703<<ASSIGN  13043>>ASSIGN  13260<<ASSIGN  13263<<ASSIGN  13263>>ASSIGN
VX$SC.NODE#
     10953**DCL     12048>>ASSIGN  12061>>ASSIGN  12211<<ASSIGN  12280<<ASSIGN  12542>>ASSIGN  12544<<ASSIGN
     12566<<ASSIGN  12566>>ASSIGN  12584<<ASSIGN  12584>>ASSIGN  12593<<ASSIGN  12668<<ASSIGN  12668>>ASSIGN
     12711<<ASSIGN  12722<<ASSIGN  12731<<ASSIGN  12799<<ASSIGN  12836<<ASSIGN  12842<<ASSIGN  12842>>ASSIGN
     13000>>ASSIGN  13001<<ASSIGN  13001>>ASSIGN  13042>>ASSIGN  13251<<ASSIGN  13255<<ASSIGN
VX$SC.SEG
     10912**DCL     12505<<ASSIGN  12505>>ASSIGN  12913>>ASSIGN
VX$SC.SIZE
     10951**DCL     12318>>IF      12318>>IF      12319<<ASSIGN  12319>>ASSIGN  12503<<ASSIGN  12503>>ASSIGN
     12519>>IF      12519>>IF      12520<<ASSIGN  12520>>ASSIGN  12540>>ASSIGN  12585<<ASSIGN  12585>>ASSIGN
     12661<<ASSIGN  12720<<ASSIGN  12721>>ASSIGN  12786>>IF      12800>>ASSIGN  12802>>IF      12835>>ASSIGN
     12837>>IF      12915>>IF      12928>>ASSIGN  12968<<ASSIGN  13003<<ASSIGN  13003>>ASSIGN
VX$SC.TYPE
     10914**DCL     11904<<ASSIGN  12051>>IF      12064>>IF      12099>>IF      12551>>ASSIGN  13248>>ASSIGN
VX$SECT.MBZ
     11022**DCL     11024--REDEF   11028--REDEF
VX$TREE_HEADER
     11534**DCL     13094--ASSIGN
VX$TREE_NODE
     11550**DCL     13094--ASSIGN
VXA$GET
     11361**DCL-ENT 11891--CALL    11901--CALL    11917--CALL    11996--CALL    12015--CALL    12141--CALL
     12150--CALL    12229--CALL    12298--CALL    12677--CALL    12696--CALL    13022--CALL    13030--CALL
VXD$B2C
     11359**DCL-ENT 12451--CALL    12455--CALL    12755--CALL    12876--CALL    12884--CALL    12946--CALL
     12950--CALL    13133--CALL    13137--CALL    13161--CALL    13197--CALL    13201--CALL    13205--CALL
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:282  
VXD$TMPLT
     11129**DCL     13016--ASSIGN  13039<<ASSIGN  13044--ASSIGN  13053<<ASSIGN  13068--ASSIGN  13073--ASSIGN
     13074--CALL
VXD$TMPLT.AD.ISADDR
     11152**DCL     11154--REDEF
VXD$TMPLT.AD.LFLAGS.DEFINED
     11140**DCL     13054<<ASSIGN
VXD$TMPLT.AD.OFFSET
     11154**DCL     13055<<ASSIGN
VXD$TMPLT.CONSTNT
     11159**DCL     13040<<ASSIGN
VXD$TMPLT.LFLAGS
     11165**DCL     11178--REDEF
VXD$TMPLT.LFLAGS.IS_DCB
     11174**DCL     13041<<ASSIGN
VXD$TMPLT.NPOINTER
     11156**DCL     13043<<ASSIGN  13057<<ASSIGN
VXD$TMPLT.PROTECTION.TYPE
     11180**DCL     13056<<ASSIGN
VXD$TMPLT.VALUE
     11130**DCL     11132--REDEF   13042<<ASSIGN
VXE$ERROR
     11352**DCL-ENT 11864--CALL    11877--CALL    11948--CALL    12329--CALL    12463--CALL    12767--CALL
     12817--CALL    12888--CALL    12958--CALL    12983--CALL    13145--CALL    13173--CALL    13209--CALL
VXF$FREE
     11362**DCL-ENT 11850--CALL    11853--CALL    11856--CALL    12119--CALL    12391--CALL    12931--CALL
     12932--CALL
VXQ$SORT
     11363**DCL-ENT 12025--CALL    13074--CALL
VX_BADR
     10135**DCL     13111<<ASSIGN
VX_BIAS.A
      9589**DCL      9590--REDEF   12131>>ASSIGN  12471>>ASSIGN
VX_BLK_COM_COUNT
     10525**DCL     12396>>IF      12422>>IF
VX_BREF_ADR
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:283  
     10188**DCL     12478<<ASSIGN
VX_CBUF.CHARS_A
      9523**DCL      9524--REDEF
VX_CHK_BLANK_COM_PROMOTE
     10527**DCL     12396>>IF
VX_CONST_DCB.ACTPOS
     10705**DCL     10705--REDEF
VX_CONST_DCB.ARS#
     10664**DCL     10664--REDEF
VX_CONST_DCB.ATTR#
     10694**DCL     10694--REDEF   10696--REDEF
VX_CONST_DCB.BORROW
     10716**DCL     10716--REDEF   10716--REDEF   10716--REDEF
VX_CONST_DCB.EOMCHAR#
     10671**DCL     10672--REDEF
VX_CONST_DCB.FLDID
     10708**DCL     10709--REDEF
VX_CONST_DCB.FORM$
     10700**DCL     10700--REDEF
VX_CONST_DCB.FSECT
     10723**DCL     10723--REDEF
VX_CONST_DCB.FSN#
     10690**DCL     10690--REDEF   10690--REDEF   10691--REDEF
VX_CONST_DCB.HEADER$
     10699**DCL     10700--REDEF
VX_CONST_DCB.IXTNSIZE#
     10696**DCL     10697--REDEF
VX_CONST_DCB.LASTSTA$
     10680**DCL     10680--REDEF
VX_CONST_DCB.LVL
     10717**DCL     10717--REDEF
VX_CONST_DCB.NAME#.C
     10680**DCL     10681--REDEF
VX_CONST_DCB.NOEOF
     10712**DCL     10712--REDEF
VX_CONST_DCB.NRECS#
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:284  
     10697**DCL     10697--REDEF
VX_CONST_DCB.NRECX
     10724**DCL     10724--REDEF
VX_CONST_DCB.OHDR
     10713**DCL     10713--REDEF
VX_CONST_DCB.ORG#
     10688**DCL     10689--REDEF
VX_CONST_DCB.PRECNO
     10721**DCL     10721--REDEF
VX_CONST_DCB.RCSZ
     10729**DCL     10729--REDEF
VX_CONST_DCB.RES#
     10682**DCL     10682--REDEF
VX_CONST_DCB.SETX
     10701**DCL     10701--REDEF
VX_CONST_DCB.TAB$
     10700**DCL     10700--REDEF
VX_CONST_DCB.TDA
     10720**DCL     10721--REDEF
VX_CONST_DCB.WSN#
     10682**DCL     10683--REDEF
VX_CURR$
      9558**DCL     12157<<ASSIGN  12159>>DOWHILE 12160>>ASSIGN  12165>>ASSIGN  12167>>IF      12168>>IF
     12169>>ASSIGN  12169>>ASSIGN  12173>>ASSIGN  12173>>ASSIGN  12187>>ASSIGN  12191>>IF      12193>>ASSIGN
     12194>>ASSIGN  12195>>ASSIGN  12196>>ASSIGN  12199>>ASSIGN  12200>>ASSIGN  12201>>ASSIGN  12202>>ASSIGN
     12203>>ASSIGN  12204>>ASSIGN  12250>>ASSIGN  12354>>IF      12355>>ASSIGN  12355>>ASSIGN  12356<<ASSIGN
     12356>>ASSIGN  12359>>DOWHILE 12360<<ASSIGN  12360>>ASSIGN  12361>>IF      12364>>IF      12365<<ASSIGN
     12365>>ASSIGN  12366>>ASSIGN  12366>>ASSIGN  13223<<ASSIGN  13226>>ASSIGN  13227>>ASSIGN  13228>>IF
     13229>>ASSIGN  13235>>ASSIGN  13237>>ASSIGN  13239>>ASSIGN  13270>>IF      13271<<ASSIGN  13271>>ASSIGN
     13275>>DOWHILE 13276<<ASSIGN  13276>>ASSIGN  13277>>IF      13279<<ASSIGN  13279>>ASSIGN
VX_DCB_HEAD$
     10207**DCL     11880<<ASSIGN  12733>>IF      12734<<ASSIGN  12997>>ASSIGN
VX_DCB_SIZEW
     10737**DCL     12720>>ASSIGN
VX_DCB_START$
     10209**DCL     11882<<ASSIGN  12643>>ASSIGN  12682>>IF      12683<<ASSIGN  12989>>IF      12991>>ASSIGN
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:285  
     13035>>IF      13037>>ASSIGN
VX_DCB_STOP$
     10210**DCL     12645>>DOWHILE 12684<<ASSIGN  12687<<ASSIGN  12687>>ASSIGN  12992>>DOWHILE 13038>>DOWHILE
VX_DCB_TAIL$
     10208**DCL     11881<<ASSIGN  12737>>ASSIGN  12739<<ASSIGN
VX_DCB_USER_NEXT
     10206**DCL     12711>>ASSIGN  12712<<ASSIGN  12712>>ASSIGN  12976>>ASSIGN
VX_EADR
     10136**DCL     13112<<ASSIGN
VX_EBUF.CHARS_A
     10112**DCL     10113--REDEF
VX_EFIELD1.CHARS
     10121**DCL     10122--REDEF   11946<<ASSIGN  12327<<ASSIGN
VX_EFIELD1.CHARS_A
     10122**DCL     12451<>CALL    12755<>CALL    12876<>CALL    12946<>CALL    13133<>CALL    13161<>CALL
     13197<>CALL
VX_EFIELD1.COUNT
     10120**DCL     11945<<ASSIGN  12326<<ASSIGN
VX_EFIELD2.CHARS
     10125**DCL     10126--REDEF   12868<<ASSIGN
VX_EFIELD2.CHARS_A
     10126**DCL     12455<>CALL    12950<>CALL    13137<>CALL    13201<>CALL
VX_EFIELD2.COUNT
     10124**DCL     12867<<ASSIGN
VX_EFIELD3.CHARS
     10129**DCL     10130--REDEF
VX_EFIELD3.CHARS_A
     10130**DCL     12884<>CALL    13205<>CALL
VX_EI_KEY_BUF.KEY
     10505**DCL     10506--REDEF
VX_ERRORS
      9566**DCL      9577--REDEF
VX_ERRORS.CONFLICT_A
      9572**DCL      9573--REDEF
VX_ERRORS.UNSAT_A
      9568**DCL      9569--REDEF
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:286  
VX_HAVE_SPC
     10418**DCL     13014<<ASSIGN  13014>>ASSIGN  13015>>IF      13016>>ASSIGN
VX_IMAGE_DATA.CPAGE#_A
      8703**DCL      8704--REDEF
VX_IMAGE_DATA.NODE_A$
      8715**DCL      8716--REDEF
VX_IMAGE_DATA.START_A$
      8707**DCL      8708--REDEF
VX_IMAGE_DATA.STOP_A$
      8711**DCL      8712--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8772**DCL      8773--REDEF
VX_IMAGE_DS3.NODE_A$
      8784**DCL      8785--REDEF
VX_IMAGE_DS3.START_A$
      8776**DCL      8777--REDEF
VX_IMAGE_DS3.STOP_A$
      8780**DCL      8781--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8795**DCL      8796--REDEF
VX_IMAGE_DS4.NODE_A$
      8807**DCL      8808--REDEF
VX_IMAGE_DS4.START_A$
      8799**DCL      8800--REDEF
VX_IMAGE_DS4.STOP_A$
      8803**DCL      8804--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8818**DCL      8819--REDEF
VX_IMAGE_DS5.NODE_A$
      8830**DCL      8831--REDEF
VX_IMAGE_DS5.START_A$
      8822**DCL      8823--REDEF
VX_IMAGE_DS5.STOP_A$
      8826**DCL      8827--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8841**DCL      8842--REDEF
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:287  
VX_IMAGE_DS6.NODE_A$
      8853**DCL      8854--REDEF
VX_IMAGE_DS6.START_A$
      8845**DCL      8846--REDEF
VX_IMAGE_DS6.STOP_A$
      8849**DCL      8850--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8864**DCL      8865--REDEF
VX_IMAGE_DS7.NODE_A$
      8876**DCL      8877--REDEF
VX_IMAGE_DS7.START_A$
      8868**DCL      8869--REDEF
VX_IMAGE_DS7.STOP_A$
      8872**DCL      8873--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8887**DCL      8888--REDEF
VX_IMAGE_DS8.NODE_A$
      8899**DCL      8900--REDEF
VX_IMAGE_DS8.START_A$
      8891**DCL      8892--REDEF
VX_IMAGE_DS8.STOP_A$
      8895**DCL      8896--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8726**DCL      8727--REDEF
VX_IMAGE_PROC.NODE_A$
      8738**DCL      8739--REDEF
VX_IMAGE_PROC.START_A$
      8730**DCL      8731--REDEF
VX_IMAGE_PROC.STOP_A$
      8734**DCL      8735--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8749**DCL      8750--REDEF
VX_IMAGE_ROS.NODE_A$
      8761**DCL      8762--REDEF
VX_IMAGE_ROS.START_A$
      8753**DCL      8754--REDEF
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:288  
VX_IMAGE_ROS.STOP_A$
      8757**DCL      8758--REDEF
VX_MERGE_START$
     10211**DCL     13019<<ASSIGN  13022<>CALL    13034>>ASSIGN  13074<>CALL
VX_MERGE_STOP$
     10212**DCL     13034<<ASSIGN  13039>>ASSIGN  13040>>ASSIGN  13041>>ASSIGN  13042>>ASSIGN  13043>>ASSIGN
     13044<<ASSIGN  13044>>ASSIGN  13053>>ASSIGN  13054>>ASSIGN  13055>>ASSIGN  13056>>ASSIGN  13057>>ASSIGN
     13068<<ASSIGN  13068>>ASSIGN  13072>>IF      13073<<ASSIGN  13073>>ASSIGN  13074<>CALL
VX_M_ALL
      9600**DCL     11849>>IF      11852>>IF      11855>>IF      11887>>IF      11897>>IF      11913>>IF
     11992>>IF      12011>>IF      12137>>IF      12146>>IF      12225>>IF      12294>>IF      12673>>IF
     12692>>IF      13018>>IF      13026>>IF
VX_M_BASE_PTR
      9602**DCL     11858>>IF      11888>>ASSIGN  11898>>ASSIGN  11914>>ASSIGN  11993>>ASSIGN  12012>>ASSIGN
     12138>>ASSIGN  12147>>ASSIGN  12226>>ASSIGN  12295>>ASSIGN  12674>>ASSIGN  12693>>ASSIGN  13019>>ASSIGN
     13027>>ASSIGN
VX_M_FREE
      9598**DCL     11850<>CALL    11853<>CALL    11856<>CALL    11887>>IF      11888>>ASSIGN  11889<<ASSIGN
     11889>>ASSIGN  11897>>IF      11898>>ASSIGN  11899<<ASSIGN  11899>>ASSIGN  11913>>IF      11914>>ASSIGN
     11915<<ASSIGN  11915>>ASSIGN  11992>>IF      11993>>ASSIGN  11994<<ASSIGN  11994>>ASSIGN  12011>>IF
     12012>>ASSIGN  12013<<ASSIGN  12013>>ASSIGN  12137>>IF      12138>>ASSIGN  12139<<ASSIGN  12139>>ASSIGN
     12146>>IF      12147>>ASSIGN  12148<<ASSIGN  12148>>ASSIGN  12225>>IF      12226>>ASSIGN  12227<<ASSIGN
     12227>>ASSIGN  12294>>IF      12295>>ASSIGN  12296<<ASSIGN  12296>>ASSIGN  12673>>IF      12674>>ASSIGN
     12675<<ASSIGN  12675>>ASSIGN  12692>>IF      12693>>ASSIGN  12694<<ASSIGN  12694>>ASSIGN  13018>>IF
     13019>>ASSIGN  13020<<ASSIGN  13020>>ASSIGN  13026>>IF      13027>>ASSIGN  13028<<ASSIGN  13028>>ASSIGN
VX_M_VECTOR.F
      8554**DCL      8558--REDEF
VX_M_VECTOR_DP.F
      8589**DCL      8593--REDEF
VX_NEXT_BREF$
     10186**DCL     11835--IMP-PTR
VX_NODE_NUMBER
      9549**DCL     11911>>ASSIGN  11984>>IF      12153>>IF      12396>>IF      12475>>IF      13094>>ASSIGN
VX_O.ACCTN_A$
      9718**DCL      9719--REDEF
VX_O.DCB_MATCH_A$
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:289  
      9727**DCL      9728--REDEF
VX_O.DCB_MATCH_HIT_A
      9733**DCL      9734--REDEF
VX_O.FIDN_A$
      9712**DCL      9713--REDEF
VX_O.FID_A$
      9704**DCL      9705--REDEF
VX_O.INCLUDE_A$
      9724**DCL      9725--REDEF
VX_O.MAP_A
      9698**DCL      9699--REDEF
VX_O.NODCB_A
      9755**DCL      9756--REDEF
VX_O.NUM.BREF
      9646**DCL     12475>>IF      12479>>ASSIGN
VX_O.NUM.DBIAS
      9648**DCL     12127>>ASSIGN
VX_O.NUM.DCBSLOTS
      9647**DCL     12986>>ASSIGN  12987>>ASSIGN
VX_O.NUM.PBIAS
      9649**DCL     12438>>IF      12439>>IF      12451<>CALL    12466>>ASSIGN
VX_O.NUM_A
      9643**DCL      9645--REDEF
VX_O.OPT_A
      9743**DCL      9744--REDEF
VX_O.PRIV_A
      9659**DCL      9661--REDEF
VX_O.SIN.OSP
      9622**DCL     11984>>IF
VX_O.SIN_A
      9612**DCL      9613--REDEF
VX_O.TCB_A
      9739**DCL      9740--REDEF
VX_O.VECTOR_.DATA
      9753**DCL     12935>>IF      12946<>CALL    12961>>IF      12968>>ASSIGN  12969>>ASSIGN
VX_OD.ACCTN_A$
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:290  
      9916**DCL      9917--REDEF
VX_OD.DCB_MATCH_A$
      9925**DCL      9926--REDEF
VX_OD.FIDN_A$
      9910**DCL      9911--REDEF
VX_OD.FID_A$
      9902**DCL      9903--REDEF
VX_OD.INCLUDE_A$
      9922**DCL      9923--REDEF
VX_OD.MAP_A
      9896**DCL      9897--REDEF
VX_OD.NODCB_A
      9940**DCL      9941--REDEF
VX_OD.NUM.BREF
      9845**DCL     13088>>IF
VX_OD.NUM.DBIAS
      9847**DCL     12127>>IF
VX_OD.NUM_A
      9843**DCL      9844--REDEF
VX_OD.PRIV_A
      9858**DCL      9859--REDEF
VX_OD.SIN.OSP
      9822**DCL     12153>>IF      12163>>IF      12185>>IF
VX_OD.SIN.PROMOTE
      9830**DCL     11980>>ASSIGN  11981>>ASSIGN
VX_OD.SIN.PROMOTE_BLANK
      9828**DCL     11980>>ASSIGN
VX_OD.SIN.PROMOTE_LABEL
      9829**DCL     11981>>ASSIGN
VX_OD.SIN.SYSTEM
      9824**DCL     13088>>IF
VX_OD.SIN_A
      9812**DCL      9813--REDEF
VX_OD.VECTOR_.DATA
      9938**DCL     11885>>IF      12933>>IF
VX_OD.VECTOR_A$
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:291  
      9931**DCL      9932--REDEF
VX_OL.MAX_A
      9787**DCL      9789--REDEF
VX_OL.MIN_A
      9772**DCL      9773--REDEF
VX_ON.ACCTN_A$
     10061**DCL     10063--REDEF
VX_ON.DCB_MATCH_A$
     10072**DCL     10074--REDEF
VX_ON.FIDN_A$
     10054**DCL     10056--REDEF
VX_ON.FID_A$
     10045**DCL     10047--REDEF
VX_ON.INCLUDE_A$
     10068**DCL     10070--REDEF
VX_ON.MAP_A
     10038**DCL     10040--REDEF
VX_ON.NODCB_A$
     10088**DCL     10089--REDEF
VX_ON.NUM_A
      9983**DCL      9985--REDEF
VX_ON.PRIV_A
      9999**DCL     10001--REDEF
VX_ON.SIN_A
      9951**DCL      9953--REDEF
VX_ON.VECTOR_A$
     10079**DCL     10080--REDEF
VX_OUHEAD.VERSION
      9398**DCL      9400--REDEF
VX_OU_HEAD
      9341**DCL      9380--REDEF
VX_OU_HEAD.REC_A
      9353**DCL      9356--REDEF
VX_O_KEY_BUF.FORM0
      8602**DCL      8605--REDEF    8612--REDEF
VX_O_KEY_BUF_L.FORM0
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:292  
      8625**DCL      8628--REDEF    8635--REDEF
VX_PASS2_REF.OU.L_START
     10291**DCL     10296--REDEF
VX_PASS2_REF.OU.L_STOP
     10297**DCL     10302--REDEF
VX_PASS2_REF.OU.MAX
     10285**DCL     10290--REDEF
VX_PASS2_REF.OU.SIZE
     10303**DCL     10308--REDEF
VX_PASS2_REF.SAT.COUNT
     10330**DCL     10336--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10337**DCL     10343--REDEF
VX_PASS2_REF.SAT.L_START
     10316**DCL     10322--REDEF
VX_PASS2_REF.SAT.L_STOP
     10323**DCL     10329--REDEF
VX_PASS2_REF.SAT.MAX
     10310**DCL     10315--REDEF
VX_PASS2_REF.UNSAT.L_START
     10378**DCL     10383--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10384**DCL     10389--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10390**DCL     10395--REDEF
VX_PASS2_REF.UNSAT.MAX
     10372**DCL     10377--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10402**DCL     10407--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10396**DCL     10401--REDEF
VX_PHRASE.PHRASE
      9804**DCL      9806--REDEF
VX_PRE_DCB_GOT
      8296**DCL     12666>>IF      12667<<ASSIGN
VX_PRE_DCB_NAME$
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:293  
      8293**DCL     12618>>IF      12618>>IF
VX_PRE_DCB_START$
      8294**DCL     12612>>ASSIGN  12665>>ASSIGN
VX_PRE_DCB_STOP$
      8295**DCL     12614>>DOWHILE
VX_PROGRAM_BIAS.A
      9582**DCL      9583--REDEF   12128<<ASSIGN  12470<<ASSIGN  13086<<ASSIGN
VX_PROGRAM_BIAS.I.DATA
      9584**DCL     13181>>ASSIGN
VX_PROGRAM_BIAS.I.RPROC
      9585**DCL     13055>>ASSIGN
VX_ROOT$
      9555**DCL     11870>>ASSIGN  11883>>ASSIGN  11893>>ASSIGN  11906>>ASSIGN  11907>>ASSIGN  11907>>ASSIGN
     11919>>ASSIGN  11931>>ASSIGN  12157>>ASSIGN  12164>>ASSIGN  12181>>ASSIGN  12186>>ASSIGN  12258>>ASSIGN
     12271>>IF      12422>>IF      12482>>ASSIGN  12970>>ASSIGN  12971>>ASSIGN  12972>>ASSIGN  12972>>ASSIGN
     13105>>ASSIGN  13106>>ASSIGN  13107>>ASSIGN  13108>>ASSIGN  13179>>ASSIGN  13179>>ASSIGN  13180>>ASSIGN
     13180>>ASSIGN  13223>>ASSIGN
VX_ROOT_DN_INC
     10213**DCL     12728<<ASSIGN  12728>>ASSIGN  13024>>ASSIGN
VX_ROS_ALLOWED
     10514**DCL     12977>>IF      13089<<ASSIGN  13090>>IF
VX_RU_HEAD.BIAS
      9097**DCL     13181<<ASSIGN
VX_RU_HEAD.DATA_SEG.PROTECTION
      9053**DCL     13213<<ASSIGN
VX_RU_HEAD.DATA_SEG.SIZ
      9049**DCL     13212<<ASSIGN
VX_RU_HEAD.DCBRES
      8984**DCL     12986<<ASSIGN
VX_RU_HEAD.MAP_BITS_A.CON
      9019**DCL     13036<<ASSIGN
VX_RU_HEAD.RDATA
      8952**DCL     13179<<ASSIGN
VX_RU_HEAD.ROSIZE
      9011**DCL     13178<<ASSIGN
VX_RU_HEAD.RPROC
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:294  
      8942**DCL     13180<<ASSIGN
VX_RU_HEAD.TREEDISP
      8987**DCL     13215<<ASSIGN
VX_RU_HEAD.UDCBNUM
      8981**DCL     12710<<ASSIGN  12710>>ASSIGN  12976<<ASSIGN  12977>>IF      12987>>ASSIGN
VX_RU_HEAD.VDPGS
      8944**DCL     13176<<ASSIGN
VX_RU_HEAD.VPPGS
      8936**DCL     13177<<ASSIGN
VX_R_KEY_BUF.FORM0
      8651**DCL      8655--REDEF    8661--REDEF
VX_SC_BLANK_COMMON
     10528**DCL     12429>>ASSIGN
VX_SC_BLANK_COM_PROMOTE$
     10526**DCL     12400>>ASSIGN  12410>>IF      12413>>IF      12422>>IF      12424<<ASSIGN  12424>>ASSIGN
     12428>>ASSIGN  12429>>ASSIGN
VX_SC_BLK_COM
      9501**DCL     11980>>ASSIGN  11990>>ASSIGN
VX_SC_LBL_COM
      9500**DCL     11981>>ASSIGN  12008>>ASSIGN  12133>>ASSIGN
VX_SC_ROOT_LBL_COM
      9499**DCL     11981>>ASSIGN  11987>>ASSIGN  12133>>ASSIGN
VX_SC_START$
      9498**DCL     12173>>ASSIGN  12210>>ASSIGN  12268>>ASSIGN  12279>>ASSIGN  12280>>ASSIGN  12317>>ASSIGN
     12350>>ASSIGN  12502>>ASSIGN  12510>>ASSIGN  12518>>ASSIGN  12523>>ASSIGN  12542>>ASSIGN  12545>>ASSIGN
     12581>>ASSIGN  13246>>ASSIGN  13267>>ASSIGN
VX_SC_X_NODE$
     10205**DCL     11842--IMP-PTR 11914<<ASSIGN  11917<>CALL    11922>>ASSIGN  12050>>ASSIGN  12063>>ASSIGN
VX_SD.A
      8279**DCL      8280--REDEF
VX_SEG_PROC_TYPE
     10413**DCL     12914<<ASSIGN  13213>>ASSIGN
VX_SEG_SIZE
     10414**DCL     12919<<ASSIGN  12919>>ASSIGN  12922>>IF      12923<<ASSIGN  12923>>ASSIGN  12927>>ASSIGN
     12928<<ASSIGN  12928>>ASSIGN  13184>>IF      13205<>CALL    13212>>ASSIGN
VX_SLIB_INIT$
PL6.E3A0      #001=VXT$ALL File=VXT$ALL.:E05TSI                                  WED 07/30/97 08:36 Page:295  
     10177**DCL     12130>>IF      12856>>IF      13116>>IF
VX_SLIB_MAX_DATA
     10179**DCL     12130>>ASSIGN
VX_SPC.B$.MINE
     10473**DCL     10479--REDEF
VX_SPC.B$.MINE_A
     10479**DCL     13049>>IF
VX_SPC.B$.NAME
     10452**DCL     10458--REDEF
VX_SPC.B$.NAME_A$
     10458**DCL     13048--DOINDEX 13059>>ASSIGN
VX_SPC.B$.SKIP
     10466**DCL     10472--REDEF
VX_SPC.B$.SKIP_A
     10472**DCL     13049>>IF
VX_SPC.B$.VALUE
     10459**DCL     10465--REDEF
VX_SPC.B$.VALUE_A
     10465**DCL     13055>>ASSIGN
VX_SPC.SEG.NAME
     10421**DCL     10427--REDEF
VX_SPC.SEG.VALUE
     10428**DCL     10434--REDEF
VX_TREE_ADR
      9508**DCL     13092<<ASSIGN  13215>>ASSIGN
VX_TREE_NAME_POOL
      9509**DCL     13094>>ASSIGN
VX_TREE_SLIB_NAME
      9510**DCL     13094>>ASSIGN
VX_TSX0_OVERLAY.H
     10196**DCL     10199--REDEF
WHICH$
     11426**DCL     12164<<ASSIGN  12165<<ASSIGN  12181<<ASSIGN  12186<<ASSIGN  12187<<ASSIGN  12213>>ASSIGN
     12215>>ASSIGN  12220>>ASSIGN  12271>>IF      12283>>ASSIGN  12285>>ASSIGN  12290>>ASSIGN
