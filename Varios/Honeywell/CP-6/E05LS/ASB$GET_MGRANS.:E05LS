VERSION E05

PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:1    
        1        1        /*M* ASB$GET_MGRANS - gets the maximum number granules allowed for an account */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*D*  NAME:           ASB$GET_MGRANS
        8        8              PURPOSE:        Gets the number of granules authorized for an
        9        9                              account from the file directory for the account.
       10       10              CALL:           CALL ASB$GET_MGRANS( ACCOUNT, PACKSET, MGRANS ) ALTRET
       11       11              INPUT:          ACCOUNT  -  name of the account
       12       12                              PACKSET  -  name of the packset that the account is on.
       13       13              OUTPUT:         MGRANS   -  number of granules authorized for the account.
       14       14              INTERFACE:      M$OPEN      - returns the FIT for the account.
       15       15                              XSF$LOCCODT - gets a pointer to the CODE14 section
       16       16                                            of the FIT
       17       17                              ASH$ERROR   - reports errors
       18       18              DESCRIPTION:    M$OPEN is called to return the FIT for the account.
       19       19                              If M$OPEN altrets, then ASH$ERROR is called to report
       20       20                              the error and the altreturn is taken. XSF$LOCCODT is
       21       21                              called to get a pointer to the CODE14 section of the
       22       22                              FIT.  MGRANS is set to CODE14.MGRANS and the procedure
       23       23                              returns.
       24       24        */
       25       25        ASB$GET_MGRANS: PROC( ACCOUNT, PACKSET, MGRANS ) ALTRET;
       26       26
       27       27    1   DCL ACCOUNT CHAR(8);
       28       28    1   DCL PACKSET CHAR(6);
       29       29    1   DCL MGRANS  UBIN;
       30       30
       31       31        %INCLUDE CP_6;
       32     5590        %INCLUDE  AS_ENTRIES_M ;
       33     6640        %INCLUDE FM$FIT;
       34     6861
       35     6862        %VLP_SN;
       36     6875        %FPT_OPEN(DCB = M$FPARAM,
       37     6876                  ASN = DEVICE,
PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:2    
       38     6877                  RES = 'DP',
       39     6878                  FUN = IN,
       40     6879                  TEST = YES,
       41     6880                  NAME = ERASE,
       42     6881                  SN = VLP_SN );
       43     6990        %CODE14( BASED="BASED(FIT$)" );
       44     7000        %B$TCB;
       45     7003        %B$ALT;
       46     7011
       47     7012    1   DCL FIT(0:1023) UBIN;
       48     7013    1   DCL FIT$ PTR;
       49     7014    1   DCL M$FPARAM DCB;
       50     7015
       51     7016    1   DCL B$TCB$ PTR SYMREF;
       52     7017    1   DCL ERR_CODE BIT(36) SYMREF;
       53     7018    1   DCL AS_DCBNUM# UBIN SYMREF;
       54     7019
       55     7020        %ASH$ERROR ;
       56     7023    1   DCL XSF$LOCCODT ENTRY(2) ALTRET;
       57     7024
       58     7025
       59     7026    1   FPT_OPEN.FPARAM_ = VECTOR( FIT );
       60     7027    1   FPT_OPEN.ACCT_   = VECTOR( ACCOUNT );
       61     7028    1   VLP_SN.SN#(0)    = PACKSET;
       62     7029    1   CALL M$OPEN( FPT_OPEN )         ALTRET( ALT );
       63     7030    1   FIT$ = ADDR( FIT );
       64     7031    1   CALL XSF$LOCCODT( FIT$, 14 );
       65     7032    1   MGRANS = CODE14.MGRANS;
       66     7033    1   RETURN;
       67     7034
       68     7035    1   ALT: ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
       69     7036    1   AS_DCBNUM# = DCBNUM( M$FPARAM );
       70     7037    1   CALL ASH$ERROR( ERR_CODE );
       71     7038    1   ALTRETURN;
       72     7039
       73     7040    1   END ASB$GET_MGRANS;

PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:3    
--  Include file information  --

   FM$FIT.:E05TOU  is referenced.
   AS_ENTRIES_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ASB$GET_MGRANS.

   Procedure ASB$GET_MGRANS requires 45 words for executable code.
   Procedure ASB$GET_MGRANS requires 1034 words of local(AUTO) storage.

    No errors detected in file ASB$GET_MGRANS.:E05TSI    .

PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:4    

 Object Unit name= ASB$GET_MGRANS                             File name= ASB$GET_MGRANS.:E05TOU
 UTS= JUL 29 '97 09:26:22.12 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    62     76  ASB$GET_MGRANS
    2   DCB   even  none     0      0  M$FPARAM
    3   Proc  even  none    45     55  ASB$GET_MGRANS
    4  RoData even  none     5      5  ASB$GET_MGRANS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        3  ASB$GET_MGRANS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSF$LOCCODT
         yes           Std       2 ASH$ERROR
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:5    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$FPARAM                              B$TCB$
     ERR_CODE                              AS_DCBNUM#                            B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:6    


        1        1        /*M* ASB$GET_MGRANS - gets the maximum number granules allowed for an account */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*D*  NAME:           ASB$GET_MGRANS
        8        8              PURPOSE:        Gets the number of granules authorized for an
        9        9                              account from the file directory for the account.
       10       10              CALL:           CALL ASB$GET_MGRANS( ACCOUNT, PACKSET, MGRANS ) ALTRET
       11       11              INPUT:          ACCOUNT  -  name of the account
       12       12                              PACKSET  -  name of the packset that the account is on.
       13       13              OUTPUT:         MGRANS   -  number of granules authorized for the account.
       14       14              INTERFACE:      M$OPEN      - returns the FIT for the account.
       15       15                              XSF$LOCCODT - gets a pointer to the CODE14 section
       16       16                                            of the FIT
       17       17                              ASH$ERROR   - reports errors
       18       18              DESCRIPTION:    M$OPEN is called to return the FIT for the account.
       19       19                              If M$OPEN altrets, then ASH$ERROR is called to report
       20       20                              the error and the altreturn is taken. XSF$LOCCODT is
       21       21                              called to get a pointer to the CODE14 section of the
       22       22                              FIT.  MGRANS is set to CODE14.MGRANS and the procedure
       23       23                              returns.
       24       24        */
       25       25        ASB$GET_MGRANS: PROC( ACCOUNT, PACKSET, MGRANS ) ALTRET;

     25  3 000000   000000 700200 xent  ASB$GET_MGR* TSX0  ! X66_AUTO_3
         3 000001   002012 000003                    ZERO    1034,3

       26       26
       27       27    1   DCL ACCOUNT CHAR(8);
       28       28    1   DCL PACKSET CHAR(6);
       29       29    1   DCL MGRANS  UBIN;
       30       30
       31       31        %INCLUDE CP_6;
       32     5590        %INCLUDE  AS_ENTRIES_M ;
PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:7    
       33     6640        %INCLUDE FM$FIT;
       34     6861
       35     6862        %VLP_SN;
       36     6875        %FPT_OPEN(DCB = M$FPARAM,
       37     6876                  ASN = DEVICE,
       38     6877                  RES = 'DP',
       39     6878                  FUN = IN,
       40     6879                  TEST = YES,
       41     6880                  NAME = ERASE,
       42     6881                  SN = VLP_SN );
       43     6990        %CODE14( BASED="BASED(FIT$)" );
       44     7000        %B$TCB;
       45     7003        %B$ALT;
       46     7011
       47     7012    1   DCL FIT(0:1023) UBIN;
       48     7013    1   DCL FIT$ PTR;
       49     7014    1   DCL M$FPARAM DCB;
       50     7015
       51     7016    1   DCL B$TCB$ PTR SYMREF;
       52     7017    1   DCL ERR_CODE BIT(36) SYMREF;
       53     7018    1   DCL AS_DCBNUM# UBIN SYMREF;
       54     7019
       55     7020        %ASH$ERROR ;
       56     7023    1   DCL XSF$LOCCODT ENTRY(2) ALTRET;
       57     7024
       58     7025
       59     7026    1   FPT_OPEN.FPARAM_ = VECTOR( FIT );

   7026  3 000002   000000 235000 4                  LDA     0
         3 000003   202010 452500                    STP2    FIT$+2,,AUTO
         3 000004   202010 236100                    LDQ     FIT$+2,,AUTO
         3 000005   000006 036003                    ADLQ    6,DU
         3 000006   000034 757000 1                  STAQ    FPT_OPEN+24

       60     7027    1   FPT_OPEN.ACCT_   = VECTOR( ACCOUNT );

   7027  3 000007   000001 235000 4                  LDA     1
PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:8    
         3 000010   200003 236100                    LDQ     @ACCOUNT,,AUTO
         3 000011   000030 757000 1                  STAQ    FPT_OPEN+20

       61     7028    1   VLP_SN.SN#(0)    = PACKSET;

   7028  3 000012   200004 470500                    LDP0    @PACKSET,,AUTO
         3 000013   040000 100500                    MLR     fill='040'O
         3 000014   000000 000006                    ADSC9   0,,PR0                   cn=0,n=6
         3 000015   000001 000006 1                  ADSC9   VLP_SN+1                 cn=0,n=6

       62     7029    1   CALL M$OPEN( FPT_OPEN )         ALTRET( ALT );

   7029  3 000016   000004 630400 1                  EPPR0   FPT_OPEN
         3 000017   450000 713400                    CLIMB   alt,open
         3 000020   410400 401760                    pmme    nvectors=18
         3 000021   000042 702000 3                  TSX2    ALT

       63     7030    1   FIT$ = ADDR( FIT );

   7030  3 000022   200006 630500                    EPPR0   FIT,,AUTO
         3 000023   202006 450500                    STP0    FIT$,,AUTO

       64     7031    1   CALL XSF$LOCCODT( FIT$, 14 );

   7031  3 000024   000003 236000 4                  LDQ     3
         3 000025   202011 756100                    STQ     FIT$+3,,AUTO
         3 000026   202006 631500                    EPPR1   FIT$,,AUTO
         3 000027   202010 451500                    STP1    FIT$+2,,AUTO
         3 000030   202010 630500                    EPPR0   FIT$+2,,AUTO
         3 000031   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000032   000000 701000 xent               TSX1    XSF$LOCCODT
         3 000033   000000 011000                    NOP     0

       65     7032    1   MGRANS = CODE14.MGRANS;

   7032  3 000034   202006 470500                    LDP0    FIT$,,AUTO
         3 000035   200005 471500                    LDP1    @MGRANS,,AUTO
PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:9    
         3 000036   000001 236100                    LDQ     1,,PR0
         3 000037   000032 376000 xsym               ANQ     B_VECTNIL+26
         3 000040   100000 756100                    STQ     0,,PR1

       66     7033    1   RETURN;

   7033  3 000041   000000 702200 xent               TSX2  ! X66_ARET

       67     7034
       68     7035    1   ALT: ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;

   7035  3 000042   000000 470400 xsym  ALT          LDP0    B$TCB$
         3 000043   000000 471500                    LDP1    0,,PR0
         3 000044   100102 236100                    LDQ     66,,PR1
         3 000045   000000 756000 xsym               STQ     ERR_CODE

       69     7036    1   AS_DCBNUM# = DCBNUM( M$FPARAM );

   7036  3 000046   000000 236007 xsym               LDQ     M$FPARAM,DL
         3 000047   000000 756000 xsym               STQ     AS_DCBNUM#

       70     7037    1   CALL ASH$ERROR( ERR_CODE );

   7037  3 000050   000004 630400 4                  EPPR0   4
         3 000051   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000052   000000 701000 xent               TSX1    ASH$ERROR
         3 000053   000000 011000                    NOP     0

       71     7038    1   ALTRETURN;

   7038  3 000054   000000 702200 xent               TSX2  ! X66_AALT
       72     7039
       73     7040    1   END ASB$GET_MGRANS;

PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:10   
--  Include file information  --

   FM$FIT.:E05TOU  is referenced.
   AS_ENTRIES_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ASB$GET_MGRANS.
PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:11   

 **** Variables and constants ****

  ****  Section 001  Data  ASB$GET_MGRANS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/d STRC(2088)  r     1 FPT_OPEN                   0-0-0/d STRC(90)    r     1 VLP_SN

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ACCOUNT                   5-0-0/w PTR         r     1 @MGRANS
     4-0-0/w PTR         r     1 @PACKSET                  *0-0-0/c CHAR(8)     r     1 ACCOUNT
     6-0-0/w UBIN        r     1 FIT(0:1023)             2006-0-0/w PTR         r     1 FIT$
    *0-0-0/w UBIN        r     1 MGRANS                    *0-0-0/c CHAR(6)     r     1 PACKSET

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 AS_DCBNUM#                 0-0-0/w PTR         r     1 B$TCB$
     0-0-0/b BIT         r     1 ERR_CODE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w STRC(288)   r     1 CODE14                     0-0-0N  NULL        r     1 M$FPARAM

PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:12   

   Procedure ASB$GET_MGRANS requires 45 words for executable code.
   Procedure ASB$GET_MGRANS requires 1034 words of local(AUTO) storage.

    No errors detected in file ASB$GET_MGRANS.:E05TSI    .
PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:13   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:14   
          MINI XREF LISTING

ACCOUNT
        27**DCL        25--PROC     7027--ASSIGN
ALT
      7035**LABEL    7029--CALLALT
ASH$ERROR
      7021**DCL-ENT  7037--CALL
AS_DCBNUM#
      7018**DCL      7036<<ASSIGN
B$ALT.CODE
      7005**DCL      7005--REDEF    7006--REDEF    7006--REDEF
B$ALT.ERR
      7006**DCL      7035>>ASSIGN
B$ALT.ERR.ERR#
      7007**DCL      7007--REDEF
B$ALT.EVID
      7006**DCL      7006--REDEF    7006--REDEF
B$TCB.ALT$
      7001**DCL      7035>>ASSIGN
B$TCB$
      7016**DCL      7035>>ASSIGN
CODE14.MGRANS
      6998**DCL      7032>>ASSIGN
ERR_CODE
      7017**DCL      7035<<ASSIGN   7037<>CALL
FIT
      7012**DCL      7026--ASSIGN   7030--ASSIGN
FIT$
      7013**DCL      6993--IMP-PTR  7030<<ASSIGN   7031<>CALL     7032>>ASSIGN
FPT_OPEN
      6946**DCL      7029<>CALL
FPT_OPEN.ACCT_
      6950**DCL      7027<<ASSIGN
PL6.E3A0      #001=ASB$GET_MGRANS File=ASB$GET_MGRANS.:E05TSI                    TUE 07/29/97 09:26 Page:15   
FPT_OPEN.ACSVEH_
      6948**DCL      6949--REDEF
FPT_OPEN.ALTKEYS_
      6954**DCL      6955--REDEF    6955--REDEF
FPT_OPEN.FPARAM_
      6951**DCL      7026<<ASSIGN
FPT_OPEN.HDR_
      6953**DCL      6954--REDEF
FPT_OPEN.TAB_
      6952**DCL      6953--REDEF
FPT_OPEN.UHL_
      6946**DCL      6947--REDEF    6947--REDEF
FPT_OPEN.V
      6955**DCL      6946--DCLINIT
FPT_OPEN.V.FSN#
      6986**DCL      6986--REDEF    6986--REDEF
FPT_OPEN.WSN_
      6952**DCL      6952--REDEF
M$FPARAM
      7014**DCL      7036>>ASSIGN
M$OPEN
      5518**DCL-ENT  7029--CALL
MGRANS
        29**DCL        25--PROC     7032<<ASSIGN
PACKSET
        28**DCL        25--PROC     7028>>ASSIGN
VLP_SN
      6873**DCL      6946--DCLINIT
VLP_SN.SN#
      6873**DCL      7028<<ASSIGN
XSF$LOCCODT
      7023**DCL-ENT  7031--CALL
