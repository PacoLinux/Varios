VERSION E05

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:1    
        1        1        /*M* Module which builds the transfer vector for shared libraries */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*  DMC,DMR,PLM=6,IND=4,SDI=2,CTI=8,DCI=4,CSU=2,ECU=2,ENI=4,
        8        8              THI=0,DTI=0,IAD=0,CCC                          */
        9        9        VXU$TRANSVECT: PROC ;
       10       10        %INCLUDE VX_INC_C;
       11    10726        %INCLUDE CP_6_SUBS;
       12    11266        %VX$NODE;

             11278    1   /*******************************************************************************
             11279    1   *                                                                              *
             11280    1   *                          VX$NODE                                                 *
             11281    1   *                                                                              *
             11282    1   *******************************************************************************/

             11298    1   DCL 1 VX$NODE      ALIGNED    BASED,
             11299    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             11300    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             11301    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             11302    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             11303    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             11304                              to list of file nodes for this node            */
             11305    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             11306    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             11306                  /* Head pointer to shared library list */
             11307    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             11307                  /* Head pointer to list of shared libraries
             11308                                          which have been mapped to included libraries */
             11309    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             11310    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             11311    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             11312    1         2 ADDR_START REDEF  ADDR_START_A,
             11313    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:2    
             11314    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             11315    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             11316    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             11317    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             11318    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             11319    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             11320    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             11321    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             11322    1         2 START_PAGE# REDEF START_PAGE#_A,
             11323    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             11324    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             11325    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             11326    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             11327    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             11328    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             11329    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             11330    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             11331    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             11331                  /* Starting pointer for common sections for this node */
             11332    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             11332                  /* Stopping pointer for common sections for this node */
             11333    1         2 L_START,
             11334    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             11335    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             11336    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             11337    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             11338    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             11339    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             11340    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             11341    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             11342    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             11343    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             11344    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             11345    1         2 L_STOP,
             11346    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             11347    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             11348    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:3    
             11349    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             11350    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             11351    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             11352    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             11353    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             11354    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             11355    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             11356    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             11357    1         2 L_SIZE,
             11358    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             11359    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             11360    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             11361    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             11362    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             11363    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             11364    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             11365    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             11366    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             11367    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             11368    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             11369    1         2 L_PREV_SIZE,
             11370    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             11371    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             11372    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             11373    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             11374    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             11375    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             11376    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             11377    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             11378    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             11379    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             11380    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             11381    1         2 BIT_MAP                ALIGNED,
             11382    1           3 DATA                  ALIGNED,
             11383    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11384    1           3 RPROC                 ALIGNED,
             11385    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:4    
             11386    1           3 ROS                   ALIGNED,
             11387    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11388    1         2 L_SC_START,
             11389    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             11390    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             11391    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             11392    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             11393    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             11394    1         2 L_SC_STOP,
             11395    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             11396    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             11397    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             11398    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             11399    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             11400    1         2 PROMOTE_HEAD,
             11401    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             11402    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             11403    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             11404    1         2 PROMOTE_TAIL,
             11405    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             11406    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             11407    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             11408    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             11409    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             11410    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             11411    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             11412    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       13    11416        %VX$SC;

             11429    1   /*******************************************************************************
             11430    1   *                                                                              *
             11431    1   *                          VX$SC                                                 *
             11432    1   *                                                                              *
             11433    1   *******************************************************************************/

             11438    1   DCL 1 VX$SC BASED ALIGNED,
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:5    
             11439    1         2 SEG UBIN(3) UNAL,
             11440                /*K*  SEG - The segment number of this section */
             11441    1         2 TYPE UBIN(6) UNAL,
             11442                /*K*  TYPE -
             11443                      Type code      Section type
             11444                      ---------      ------------
             11445                          0          Data control section with write access.
             11446                          1          Procedure control section.
             11447                          2          Unlabeled common, name pointer must be zero.
             11448                          3          Labeled common, with mandatory name pointer.
             11449                                     This is for labeled common which must be
             11450                                     in the root.
             11451                          4          Labeled common, with mandatory name pointer.
             11452                                     This is for labeled common which need not
             11453                                     be in the root.
             11454                          5          DCB, word 1 is name pointer.
             11455                          6          Data control section with read only access,
             11456                                     word 1 = 0 or name pointer.      */
             11457    1         2 EMPTY BIT(1) UNAL,
             11458                /*K*  EMPTY is the empty bit.  This bit is set if the control
             11459                      section is of size zero.  */
             11460    1         2 ATTR UNAL,
             11461    1           3 INT  UBIN(2) UNAL,
             11462                  /*K*  INT is the Section initialization.  */
             11463    1           3 SEGMENT BIT(1) UNAL,
             11464                  /*K* SEGMENT is set if the Section is defined in a data
             11465                       segment.  */
             11466    1           3 ALL BIT(1) UNAL,
             11467                  /*K*  ALL is set if the Section is allocated.  */
             11468    1           3 PRE_DCB BIT(1) UNAL,
             11469                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             11470    1           3 MES_INIT BIT(1) UNAL,
             11471    1           3 ALIGN UBIN(2) UNAL,
             11472                  /*K*  ALIGN is the Section alignment.  */
             11473    1         2 ADDRESS UBIN HALF UNAL,
             11474                /*K*  ADDRESS is the address within the Instruction Segment of
             11475                      the entry point of the external procedure.  */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:6    
             11476    1         2 NAME_DISP SBIN HALF UNAL,
             11477                /*K*  NAME_DISP is the Name index.  */
             11478    1         2 SIZE UBIN HALF UNAL,
             11479                /*K*  SIZE is the size, in words, of the section.  */
             11480    1         2 NODE# UBIN HALF UNAL,
             11481                /*K*  NODE# is the Node number of section.  */
             11482    1         2 COM_LINK UBIN HALF UNAL;
             11483                /*K*  COM_LINK is used internally by linker to link common sections */

             11493    1   /*******************************************************************************
             11494    1   *                                                                              *
             11495    1   *                          VX$SECT                                                 *
             11496    1   *                                                                              *
             11497    1   *******************************************************************************/

             11502    1   DCL 1 VX$SECT BASED ALIGNED,
             11503    1         2 TYPE UBIN BYTE UNAL,
             11504                /*K*  TYPE -
             11505                      Type code      Section type
             11506                      ---------      ------------
             11507                          0          Data control section with write access.
             11508                          1          Procedure control section.
             11509                          2          Unlabeled common, name pointer must be zero.
             11510                          3          Labeled common, with mandatory name pointer.
             11511                                     This is for labeled common which must be
             11512                                     in the root.
             11513                          4          Labeled common, with mandatory name pointer.
             11514                                     This is for labeled common which need not
             11515                                     be in the root.
             11516                          5          DCB, word 1 is name pointer.
             11517                          6          Data control section with read only access,
             11518                                     word 1 = 0 or name pointer.
             11519                          7          Constant labeled common, with mandatory name pointer.
             11520                                     This is for labeled common which must be
             11521                                     in the root.
             11522                          8          Constant labeled common, with mandatory name pointer.
             11523                                     This is for labeled common which need not
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:7    
             11524                                     be in the root.                        */
             11525    1         2 * BIT(1),
             11526                /*K*  * is reserved for future use and must be zero. */
             11527    1         2 INITZERO BIT(1),
             11528                /*K*  INITZERO - if 1, initialize with zero.  */
             11529    1         2 INITUTS BIT(1),
             11530                /*K*  INITUTS - if 1, initialize with UTS.  */
             11531    1         2 SEGMENT BIT(1),
             11532                /*K*  SEGMENT - if 1, specifies that this section is
             11533                                to be placed in the segment specified by
             11534                                SEG_NPOINTER.  */
             11535    1         2 * BIT(3),
             11536                /*K*  * is reserved for future use and must be zero. */
             11537    1         2 BOUND UBIN(2) UNAL,
             11538                /*K*  BOUND - bits 6-7 - defines starting location.
             11539                              00 - starts on even word
             11540                              01 - starts on odd word
             11541                              10 - starts on multiple of 8
             11542                              11 - starts on page boundary     */
             11543    1         2 SIZE UBIN HALF UNAL,
             11544                /*K*  SIZE is the size, in words, of the section.  */
             11545    1         2 NPOINTER SBIN HALF UNAL,
             11546                /*K*  NPOINTER is the word displacement into the name record
             11547                      (TYPE 1) locating the name of this section.  If the
             11548                      field is negative, the section has no name.  */
             11549    1         2 MBZ UBIN HALF UNAL,
             11550                /*K*  MBZ is reserved for future expansion and must be zero. */
             11551    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11552                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11553                      Section.  The name must be a valid segment name
             11554                      recognized by the linker.  */
             11555    1         2 G66 REDEF MBZ,
             11556                /*K*  G66 is not used on CP-6. */
             11557    1           3 * BIT(9),
             11558    1           3 NSAB BIT(9);
       14    11561        %VX$LLIST_SC;

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:8    
             11573    1   /*******************************************************************************
             11574    1   *                                                                              *
             11575    1   *                          VX$LLIST_SC                                             *
             11576    1   *                                                                              *
             11577    1   *******************************************************************************/

             11582    1   DCL 1 NAME               BASED     ALIGNED,
             11583    1         2 LINK$             PTR,
             11584    1         2 BASE$             PTR,
             11585    1         2 COUNT             UBIN(36);
       15    11588        %VX$VECTOR_LST;

             11601    1   /*******************************************************************************
             11602    1   *                                                                              *
             11603    1   *                          VX$VECTOR_LST                                           *
             11604    1   *                                                                              *
             11605    1   *******************************************************************************/

             11609    1   DCL 1 VX$VECTOR_LST ALIGNED BASED,
             11610    1         2 SIZEW1 UBIN HALF UNAL,
             11611    1         2 SIZEW2 UBIN HALF UNAL;
       16    11613        %VX$LST;

             11626    1   /*******************************************************************************
             11627    1   *                                                                              *
             11628    1   *                          VX$LST                                                 *
             11629    1   *                                                                              *
             11630    1   *******************************************************************************/

             11635    1   DCL 1 VX$LST                          ALIGNED BASED,
             11636    1         2 LINK$        PTR,               /* Link to next item                  */
             11637    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             11638    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             11639    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             11640    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             11641    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             11642    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:9    
             11643    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             11644    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             11645    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             11646    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             11647    1         2 P,
             11648    1           3 NAME_       ALIGNED,
             11649    1             4 BOUND      UBIN(20)  UNAL,
             11650    1             4 FLAGSV     UBIN(11)  UNAL,
             11651    1             4 *          BIT(5)    UNAL,
             11652    1             4 NAME$      PTR,
             11653    1           3 ACCT_       ALIGNED,
             11654    1             4 BOUND      UBIN(20)  UNAL,
             11655    1             4 FLAGSV     UBIN(11)  UNAL,
             11656    1             4 *          BIT(5)    UNAL,
             11657    1             4 ACCT$      PTR,
             11658    1           3 PASS_       ALIGNED,
             11659    1             4 BOUND      UBIN(20)  UNAL,
             11660    1             4 FLAGSV     UBIN(11)  UNAL,
             11661    1             4 *          BIT(5)    UNAL,
             11662    1             4 PASS$      PTR,
             11663    1           3 SN_         ALIGNED,
             11664    1             4 BOUND      UBIN(20)  UNAL,
             11665    1             4 FLAGSV     UBIN(11)  UNAL,
             11666    1             4 *          BIT(5)    UNAL,
             11667    1             4 SN$        PTR,
             11668    1           3 WSN_        ALIGNED,
             11669    1             4 BOUND      UBIN(20)  UNAL,
             11670    1             4 FLAGSV     UBIN(11)  UNAL,
             11671    1             4 *          BIT(5)    UNAL,
             11672    1             4 WSN$       PTR,
             11673    1           3 B           ALIGNED,
             11674    1             4 RES        BIT(1)    UNAL,
             11675    1             4 ASN        BIT(1)    UNAL,
             11676    1             4 ACCT       BIT(1)    UNAL,
             11677    1             4 *          BIT(33)   UNAL,
             11678    1           3 RES         CHAR(4)   ALIGNED,
             11679    1           3 ASN         UBIN(36)  ALIGNED;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:10   
       17    11682        %VXD$TMPLT;

             11695    1   /*******************************************************************************
             11696    1   *                                                                              *
             11697    1   *                          VXD$TMPLT                                               *
             11698    1   *                                                                              *
             11699    1   *******************************************************************************/

             11703        /*
             11704                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             11705                  ENTDEFs, SYMDEFs and SEGDEFs.
             11706        */
             11708    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             11709    1         2 VALUE SBIN UNAL,
             11710                /*K*  VALUE is the value if this entry is a constant.  */
             11711    1         2 AD REDEF VALUE,
             11712                /*K*  AD is the address if this entry is not constant.  */
             11713    1           3 LFLAGS UNAL,
             11714                  /*K*  LFLAGS is the field reserved for loader to flag load
             11715                        time attributes of the definition and must be zero
             11716                        in the object unit. */
             11717    1             4 SOURCE UBIN(3) UNAL,
             11718                    /*K*  SOURCE - Source of this DEF */
             11719    1             4 DEFINED BIT(1) UNAL,
             11720                    /*K*  DEFINED - Set if this DEF defined */
             11721    1             4 MULTIPLE BIT(1) UNAL,
             11722                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11723    1             4 USED BIT(1) UNAL,
             11724                    /*K*  USED - Set if this DEF is used. */
             11725    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             11726                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             11727                        than 2048 (RU).  */
             11728    1           3 SECTNUM UBIN(11) UNAL,
             11729                  /*K*  SECTNUM contains an entry number into the section
             11730                        table (TYPE 3).  */
             11731    1           3 ISADDR UBIN HALF UNAL,
             11732                  /*K*  ISADDR - Is Address (RU)  */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:11   
             11733    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             11734                  /*K*  OFFSET is the word offset from the origin of the section. */
             11735    1         2 NPOINTER SBIN HALF UNAL,
             11736                /*K*  NPOINTER is a word displacement into the name record
             11737                      (TYPE 1) locating the name (of this entry). */
             11738    1         2 CONSTNT BIT(1) UNAL,
             11739                /*K*  CONSTNT is a flag bit to determine the interpretation
             11740                      of word 0.
             11741                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11742                                    SECTNUM, and ISADDR or OFFSET.
             11743                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11744    1         2 LFLAGS UNAL,
             11745                /*K*  LFLAGS is the field reserved for loader to flag load
             11746                      time attributes and must be zero in the object unit. */
             11747    1           3 MULTIPLE BIT(1) UNAL,
             11748                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11749    1           3 USED BIT(1) UNAL,
             11750                  /*K*  USED - Set if this DEF is used. */
             11751    1           3 SOURCE UBIN(4) UNAL,
             11752                  /*K*  SOURCE - Source of this DEF */
             11753    1           3 IS_DCB BIT(1) UNAL,
             11754                  /*K* IS_DCB - Set if this is a DCB */
             11755    1           3 * BIT(10) UNAL,
             11756                  /*K*  * is reserved for future use and must be zero.  */
             11757    1         2 PROTECTION REDEF LFLAGS,
             11758                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             11759    1           3 TYPE UBIN(5) UNAL,
             11760                  /*K*  TYPE is the Protection type.  */
             11761    1           3 * UBIN(12) UNAL;
             11762                  /*K*  * is reserved for future use and must be zero.  */
       18    11777        %TMPLT;

             11789    1   /*******************************************************************************
             11790    1   *                                                                              *
             11791    1   *                          TMPLT                                                 *
             11792    1   *                                                                              *
             11793    1   *******************************************************************************/
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:12   

             11798    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11799    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11800    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             11801    1         2 W       REDEF     A,            /* By name                            */
             11802    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11803    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       19    11806        %BANNER( ARG=FPTS );

             11814    1   /*******************************************************************************
             11815    1   *                                                                              *
             11816    1   *                          FPTS                                                 *
             11817    1   *                                                                              *
             11818    1   *******************************************************************************/

       20    11822        %FPT_OPEN(
       21    11823                  ACS=DIRECT,
       22    11824                  ASN=FILE,
       23    11825                  DCB=M$LF,
       24    11826                  FUN=CREATE,
       25    11827                  NAME=VLP_NAME,
       26    11828                  ORG=KEYED);
       27    11937        %FPT_CLOSE( DCB=M$LF, DISP=SAVE );
       28    11979        %FPT_DELREC( DCB=M$RF, KEY=VX_R_KEY_BUF );
       29    11998        %FPT_READ ( FPTN=READ_RU, DCB=M$OF, KEY=VX_R_KEY_BUF, KEYS=YES );
       30    12037        %FPT_WRITE( FPTN=WRITE_RU, DCB=M$RF, KEY=VX_R_KEY_BUF );
       31    12068        %VLP_NAME( NAME='***************Transfer_vector' );
       32    12095        %FPT_WRITE( DCB=M$LF, KEY=ENTREF_RELOC_KEY );
       33    12126        %SET LISTMAC='1'B;
       34    12127        %SET LISTSUB='1'B;
       35    12128        %SET LISTEXP='1'B;
       36    12129        %BANNER( ARG=DCBS);
             12130        %LSET LISTDIR='0'B;

             12137    1   /*******************************************************************************
             12138    1   *                                                                              *
             12139    1   *                          DCBS                                                 *
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:13   
             12140    1   *                                                                              *
             12141    1   *******************************************************************************/

       37    12145    1   DCL M$OF DCB;
       38    12146    1   DCL M$RF DCB;
       39    12147    1   DCL M$LF DCB;
       40    12148        %BANNER( ARG=B$HEAD );
             12149        %LSET LISTDIR='0'B;

             12156    1   /*******************************************************************************
             12157    1   *                                                                              *
             12158    1   *                          B$HEAD                                                 *
             12159    1   *                                                                              *
             12160    1   *******************************************************************************/

       41    12164        %B$HEAD( STCLASS=" ", SUBS=NO );
             12165    1   DCL 1 B$HEAD ALIGNED,
             12166    1         2 PRIV BIT(36),
             12167                /*K*  PRIV is a 36 bit field containing privilege flags.  */
             12168    1         2 VPPGS UBIN(14) UNAL,
             12169                /*K*  VPPGS is the number of virtual pages of procedure
             12170                      required for the longest overlay path.
             12171                      (256 words/page if FEP, 1024 words/page if Host)  */
             12172    1         2 * UBIN(2) UNAL,
             12173                /*K*  * is reserved for future use and must be zero.  */
             12174    1         2 RPROC UBIN(20) UNAL,
             12175                /*K*  RPROC is the size, in words, of the procedure for the root.  */
             12176    1         2 VDPGS UBIN(14) UNAL,
             12177                /*K*  VDPGS is the number of virtual pages of data required
             12178                      for the longest overlay path.
             12179                      (256 words/page if FEP, 1024 words/page if Host)
             12180                      This includes both library and user defined data.
             12181                       */
             12182    1         2 * UBIN(2) UNAL,
             12183                /*K*  * is reserved for future use and must be zero.  */
             12184    1         2 RDATA UBIN(20) UNAL,
             12185                /*K*  RDATA is the size, in words of the data for the root.
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:14   
             12186                      This includes both library and user defined data.
             12187                      If this is a host run unit, all data records will be
             12188                      included in the run unit.
             12189                      If this is a FEP run unit,
             12190                      no library data will be included in the run unit itself.
             12191                      The ISADDR field of B$RUKEY for the first user data record
             12192                      may be determined by calculating the FEP word address of
             12193                      B$HEAD.BIAS rounded to the next lower 2048 FEP word boundry.
             12194                      (2048 FEP words is the maximum size of run unit records
             12195                      for FEP run units.)  The data in this record below
             12196                      BIAS will be padded with zeros.
             12197                      The word size of data contained in the FEP run unit
             12198                      may be calculated by subtracting the ISADDR value as
             12199                      calculated for the first data record from the word
             12200                      address of the last word of user data.  The last
             12201                      word of user data is the sum of the default FPRG
             12202                      bias (%GM_ISR1_BASE - EQU is in file GM_LCP6_E) and
             12203                      the total data size (B$HEAD.RDATA).
             12204                      */
             12205    1         2 SEV UBIN BYTE UNAL,
             12206                /*K*  SEV is the maximum severity level of the object units
             12207                      making up the run unit.  */
             12208    1         2 * UBIN(7) UNAL,
             12209                /*K*  * is reserved for future use and must be zero.  */
             12210    1         2 START UBIN(20) UNAL,
             12211                /*K*  START is the address within the instruction segment at
             12212                      which execution will start.  */
             12213    1         2 UDCBNUM UBIN HALF UNAL,
             12214                /*K*  UDCBNUM is the number of DCBs in the Read-Only segment
             12215                      as generated by LINK.   */
             12216    1         2 DCBRES UBIN HALF UNAL,
             12217                /*K*  DCBRES is the number of pointers to DCBs as supplied by
             12218                      LINK.   */
             12219    1         2 TREEDISP UBIN HALF UNAL,
             12220                /*K*  TREEDISP is the displacement in words from the start of
             12221                      the variable portion of the Read-Only Segment locating
             12222                      the tree table.   */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:15   
             12223    1         2 TCBSIZE UBIN HALF UNAL,
             12224                /*K*  TCBSIZE specifies the number of frames of the Task Control Block;
             12225                      if the size is 0, then a two frame Task Control Block will be
             12226                      built by STEP.   */
             12227    1         2 PRECSIZE UBIN HALF UNAL,
             12228                /*K*  PRECSIZ is the maximum size of any program record
             12229                      in the run unit; words if Host, double words if FEP.
             12230                      */
             12231    1         2 NRECSIZE UBIN HALF UNAL,
             12232                /*K*  NRECSIZ is the maximum size of External Name records in
             12233                      the run unit.   */
             12234    1         2 EPRECSIZE UBIN HALF UNAL,
             12235                /*K*  EPRECSIZE is the maximum size of External Procedure
             12236                      Definition Records in the run unit.   */
             12237    1         2 EDRECSIZE UBIN HALF UNAL,
             12238                /*K*  EDRECSIZE is the maximum size of External Data Definition
             12239                      Records in the run unit.    */
             12240    1         2 SDRECSIZE UBIN HALF UNAL,
             12241                /*K*  SDRECSIZE is the maximum size of External Segment
             12242                      Definition Records in the run unit.   */
             12243    1         2 ROSIZE UBIN HALF UNAL,
             12244                /*K*  ROSIZE is the size of the Read Only Segment Record.  */
             12245    1         2 VERSION# UBIN BYTE UNAL,
             12246                /*K*  VERSION# is the LINK version number.  */
             12247    1         2 MAP_BITS_A(0:2) UNAL,
             12248                /*K*  MAP_BITS_A are used by the linker to produce MAP.  */
             12249    1           3 MULTIPLE BIT(1) UNAL,
             12250                  /*K*  MULTIPLE is set if a multiply defined symbol exists.  */
             12251    1           3 CON BIT(1) UNAL,
             12252                  /*K*  CON is set if a Constant symbol is defined.  */
             12253    1           3 PRIMARY BIT(1) UNAL,
             12254                  /*K*  PRIMARY is set if an unresolved primary reference exists.  */
             12255    1           3 SECONDARY BIT(1) UNAL,
             12256                  /*K*  SECONDARY is set if an unresolved secondary reference
             12257                        exists.  */
             12258    1         2 SECTABLESIZE UBIN(8) UNAL,
             12259                /*K*  SECTABLESIZE is the size in words of the record which
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:16   
             12260                      contains the start location and size of all sections
             12261                      (for BIAS by OU for FEP)   */
             12262    1         2 NSTDINVOC BIT(1) UNAL,
             12263                /*K*  NSTDINVOC indicates that the RU will can tolerate invoking
             12264                      in nonstandard form.   */
             12265    1         2 REMOVE_ENTDEF BIT(1) UNAL,
             12266                /*K*  REMOVE_ENTDEF is set if ENTDEFs not in the transfer
             12267                      vector have been removed from the shared library.  */
             12268    1         2 REMOVE_SYMDEF BIT(1) UNAL,
             12269                /*K*  REMOVE_SYMDEF is set if SYMDEFs not in the transfer
             12270                      vector have been removed from the shared library.  */
             12271    1         2 STATS BIT(1) UNAL,
             12272                /*K*  STATS is set if Statistics are being collected on
             12273                      this processor.  */
             12274    1         2 LAUTO BIT(1) UNAL,
             12275                /*K*  LAUTO is set for a Fep run unit if user auto is to be in
             12276                a small segment, thereby freeing up a large one for other purposes. */
             12277    1         2 * BIT(2) UNAL,
             12278                /*K*  * is reserved for future use and must be zero.  */
             12279    1         2 DATA_SEG (0:5),
             12280                /*K*  DATA_SEG defines the initialized data segment in the RU.  */
             12281    1           3 SIZ UBIN HALF UNAL,
             12282                  /*K* SIZ is the word size of the initialized data segment.  */
             12283    1           3 * UBIN(9) UNAL,
             12284                  /*K*  * is reserved for future use and must be zero.  */
             12285    1           3 PROTECTION UBIN(9) UNAL,
             12286                  /*K*  PROTECTION is the initialized data segment
             12287                        protection.   */
             12288    1         2 LOCK(0:71) BIT(1) UNAL,
             12289                /*K*  LOCK is the Lock for restricted processor.  */
             12290    1         2 FLAVOR UBIN BYTE UNAL,
             12291                /*K*  FLAVOR is the flavor of the run unit.  The RU_FLAVORS
             12292                      macro gives the legal values for FLAVOR.  */
             12293    1         2 S BIT(1) UNAL,
             12294                /*K*  S - S = 1 if the run unit is Shareable  */
             12295    1         2 LIB BIT(1) UNAL,
             12296                /*K*  LIB - LIB = 1 if the run unit is a Shared Library  */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:17   
             12297    1         2 ASL BIT(1) UNAL,
             12298                /*K*  ASL - ASL = 1 if the run unit is an Alternate Shared
             12299                      Library.   */
             12300    1         2 CMDPROC BIT(1) UNAL,
             12301                /*K*  CMDPROC - CMDPROC = 1 is the run unit is a Command Processor. */
             12302    1         2 DEBUGGER BIT(1) UNAL,
             12303                /*K*  DEBUGGER - DEBUGGER = 1 if the run unit is a Debugger. */
             12304    1         2 OVRL BIT(1) UNAL,
             12305                /*K*  OVRL -  OVRL = 1 if the run unit is overlaid.   */
             12306    1         2 PROCACC BIT(1) UNAL,
             12307                /*K*  PROCACC - If PROCACC = 1,  if the run unit resides in
             12308                      :SYS, it should be charged as processor, not user.  */
             12309    1         2 NOCHGPMEM BIT(1) UNAL,
             12310                /*K*  NOCHGPMEM - If NOCHGPMEM = 1, if the run unit resides in
             12311                      :SYS, the user should not be charged for procedures.  */
             12312    1         2 PROCSURCHG BIT(1) UNAL,
             12313                /*K*  PROCSURCHG - If PROCSURCHG = 1, Surcharge accountings
             12314                      should be applied.  */
             12315    1         2 RESTPROC BIT(1) UNAL,
             12316                /*K*  RESTPROC - If RESTPROC = 1, this is a restricted
             12317                      processor and should be verified against the user's key.  */
             12318    1         2 STRONG_LOCK BIT(1) UNAL,
             12319                /*K*  STRONG_LOCK - If STRONG_LOCK = 1, the restricted
             12320                      processor has a strong lock.  If STRONG_LOCK = 0, the
             12321                      restricted processor has a weak lock.   */
             12322    1         2 * UBIN(16) UNAL,
             12323                /*K*  * is reserved for future use and must be zero. */
             12324    1         2 PSEUDO_COUNT UBIN BYTE UNAL,
             12325                /*K*  PSEUDO_COUNT - If PSEUDO_COUNT > 0, then a pseudo resource
             12326                      is required to execute this run-unit.  */
             12327    1         2 * UBIN(7) UNAL,
             12328                /*K*  * is reserved for future use and must be zero.  */
             12329    1         2 BIAS UBIN(20) UNAL,
             12330                /*K*  BIAS is the address within the instruction segment of
             12331                      the beginning of the root data.  */
             12332    1         2 PSEUDO_TEXT CHAR(8),
             12333                /*K*  PSEUDO_TEXT - contains the text of the pseudo resource
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:18   
             12334                      to acquire when the run-unit is executed.  */
             12335    1         2 * (0:1) UBIN WORD UNAL,
             12336                /*K*  * is reserved for future use and must be zero.  */
             12337    1         2 LIBNAME,
             12338                /*K* LIBNAME gives the name, if any, of the shared library to
             12339                     be associated.  Each name resides in a fixed 8-word field.
             12340                     The first byte contains the character count of the name
             12341                     followed by the name itself.   */
             12342    1           3 CNT UBIN BYTE UNAL,
             12343                  /*K* CNT contains the character count of the name of the
             12344                       shared library.  */
             12345    1           3 TXT CHAR(31) UNAL,
             12346                  /*K*  TXT contains the name itself of the shared library.  */
             12347    1         2 ASLNAME,
             12348                /*K*  ASLNAME gives the name, if any, of the alternate shared
             12349                      library to be associated.  Each name resides in a fixed
             12350                      8-word field.  The first byte contains the character
             12351                      count of the name followed by the name itself.   */
             12352    1           3 CNT UBIN BYTE UNAL,
             12353                  /*K*  CNT contains the character count of the name of
             12354                        the alternate shared library.  */
             12355    1           3 TXT CHAR(31) UNAL;
             12356                  /*K*  TXT contains the name itself of the alternate
             12357                        shared library.  */
             12358        %IF '0'B;
             12362        %ENDIF;
       42    12364        %BANNER(ARG="B$EDEF and ENTDEF" );
             12365        %LSET LISTDIR='0'B;

             12372    1   /*******************************************************************************
             12373    1   *                                                                              *
             12374    1   *                          B$EDEF and ENTDEF                                       *
             12375    1   *                                                                              *
             12376    1   *******************************************************************************/

       43    12380        %B$EDEF;
             12381    1   DCL 1 B$EDEF BASED ALIGNED,
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:19   
             12382    1         2 LFLAGS UNAL,
             12383                /*K*  LFLAGS is the field reserved for loader to flag load
             12384                      time attributes of the definition and must be zero
             12385                      in the object unit. */
             12386    1           3 SOURCE UBIN(3) UNAL,
             12387                  /*K*  SOURCE - Source of this ENTDEF */
             12388    1           3 DEFINED BIT(1)  UNAL,
             12389                  /*K*  DEFINED - Set if this ENTDEF defined */
             12390    1           3 MULTIPLE BIT(1) UNAL,
             12391                  /*K*  MULTIPLE - Set if this ENTDEF is multiply defined. */
             12392    1           3 USED BIT(1) UNAL,
             12393                  /*K*  USED - Set if this ENTDEF is used. */
             12394    1           3 * BIT(2) UNAL,
             12395                  /*K*  * - Unused and must be zero. */
             12396    1           3 FAULTAGS BIT(1) UNAL,
             12397                  /*K*  FAULTAGS - Internal calls fault tags flag. */
             12398    1         2 OU UNAL,
             12399    1           3 SECTNUM UBIN BYTE UNAL,
             12400                  /*K*  SECTNUM contains an entry number into the section
             12401                        table (TYPE 3).  */
             12402    1           3 OFFSET UBIN HALF UNAL,
             12403                  /*K*  OFFSET is the word offset from the origin of the section. */
             12404    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             12405                /*K*  ISADDR - Is Address (RU)  */
             12406    1         2 NPOINTER SBIN HALF UNAL,
             12407                /*K*  NPOINTER is a word displacement into the name record
             12408                      (TYPE 1) locating the name (of this entry). */
             12409    1         2 PRI BIT(1) UNAL,
             12410                /*K*  PRI is a one-bit flag denoting primary entry
             12411                      definition.
             12412                         PRI = 1, primary name (object unit name)
             12413                             = 0, not primary name                 */
             12414    1         2 ALT BIT(1) UNAL,
             12415                /*K*  ALT is a one-bit flag denoting permissible alternate
             12416                      return.
             12417                         ALT = 1, alternate return allowed
             12418                             = 0, alternate return not allowed        */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:20   
             12419    1         2 CHECK BIT(1) UNAL,
             12420                /*K*  CHECK is a one-bit flag denoting arguments/parameter
             12421                      check and alternate return specification check.
             12422                         CHECK = 0, do not check for matching
             12423                                    arguments/parameters and alternate
             12424                                    return specification check.
             12425                               = 1, check for matching arguments/parameters
             12426                                    and alternate return specification.  */
             12427    1         2 CST UBIN(4) UNAL,
             12428                /*K*  CST is a 4-bit field denoting calling sequence type.
             12429                         CST =  0, Standard CP-6 Callable Procedure
             12430                         CST =  1, Nonstandard Call Type
             12431                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             12432                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             12433                         CST =  4, Standard CP-6 Function Procedure; a
             12434                                   variable table entry will be present to
             12435                                   define the attributes of the function
             12436                         CST =  5, Same as 0, except USE, AVOID, or
             12437                                   MATERIALIZE attributes specified
             12438                         CST =  7, Same as 2, except USE, AVOID, or
             12439                                   MATERIALIZE attributes specified
             12440                         CST =  8, Same as 3, except USE, AVOID, or
             12441                                   MATERIALIZE attributes specified
             12442                         CST =  9, Same as 4, except USE, AVOID, or
             12443                                   MATERIALIZE attributes specified
             12444                         CST = 13, GCOS domain, save
             12445                         CST = 14, GCOS domain, no save
             12446                         CST = 15, Non-Callable Procedure.          */
             12447    1         2 NPARAM UBIN(11) UNAL;
             12448                /*K*  NPARAM is an 11-bit field denoting number of parameters. */
       44    12450        %B$EDEF( NAME=ENTDEF, STCLASS=" " );
             12451    1   DCL 1 ENTDEF ALIGNED,
             12452    1         2 LFLAGS UNAL,
             12453                /*K*  LFLAGS is the field reserved for loader to flag load
             12454                      time attributes of the definition and must be zero
             12455                      in the object unit. */
             12456    1           3 SOURCE UBIN(3) UNAL,
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:21   
             12457                  /*K*  SOURCE - Source of this ENTDEF */
             12458    1           3 DEFINED BIT(1)  UNAL,
             12459                  /*K*  DEFINED - Set if this ENTDEF defined */
             12460    1           3 MULTIPLE BIT(1) UNAL,
             12461                  /*K*  MULTIPLE - Set if this ENTDEF is multiply defined. */
             12462    1           3 USED BIT(1) UNAL,
             12463                  /*K*  USED - Set if this ENTDEF is used. */
             12464    1           3 * BIT(2) UNAL,
             12465                  /*K*  * - Unused and must be zero. */
             12466    1           3 FAULTAGS BIT(1) UNAL,
             12467                  /*K*  FAULTAGS - Internal calls fault tags flag. */
             12468    1         2 OU UNAL,
             12469    1           3 SECTNUM UBIN BYTE UNAL,
             12470                  /*K*  SECTNUM contains an entry number into the section
             12471                        table (TYPE 3).  */
             12472    1           3 OFFSET UBIN HALF UNAL,
             12473                  /*K*  OFFSET is the word offset from the origin of the section. */
             12474    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             12475                /*K*  ISADDR - Is Address (RU)  */
             12476    1         2 NPOINTER SBIN HALF UNAL,
             12477                /*K*  NPOINTER is a word displacement into the name record
             12478                      (TYPE 1) locating the name (of this entry). */
             12479    1         2 PRI BIT(1) UNAL,
             12480                /*K*  PRI is a one-bit flag denoting primary entry
             12481                      definition.
             12482                         PRI = 1, primary name (object unit name)
             12483                             = 0, not primary name                 */
             12484    1         2 ALT BIT(1) UNAL,
             12485                /*K*  ALT is a one-bit flag denoting permissible alternate
             12486                      return.
             12487                         ALT = 1, alternate return allowed
             12488                             = 0, alternate return not allowed        */
             12489    1         2 CHECK BIT(1) UNAL,
             12490                /*K*  CHECK is a one-bit flag denoting arguments/parameter
             12491                      check and alternate return specification check.
             12492                         CHECK = 0, do not check for matching
             12493                                    arguments/parameters and alternate
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:22   
             12494                                    return specification check.
             12495                               = 1, check for matching arguments/parameters
             12496                                    and alternate return specification.  */
             12497    1         2 CST UBIN(4) UNAL,
             12498                /*K*  CST is a 4-bit field denoting calling sequence type.
             12499                         CST =  0, Standard CP-6 Callable Procedure
             12500                         CST =  1, Nonstandard Call Type
             12501                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             12502                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             12503                         CST =  4, Standard CP-6 Function Procedure; a
             12504                                   variable table entry will be present to
             12505                                   define the attributes of the function
             12506                         CST =  5, Same as 0, except USE, AVOID, or
             12507                                   MATERIALIZE attributes specified
             12508                         CST =  7, Same as 2, except USE, AVOID, or
             12509                                   MATERIALIZE attributes specified
             12510                         CST =  8, Same as 3, except USE, AVOID, or
             12511                                   MATERIALIZE attributes specified
             12512                         CST =  9, Same as 4, except USE, AVOID, or
             12513                                   MATERIALIZE attributes specified
             12514                         CST = 13, GCOS domain, save
             12515                         CST = 14, GCOS domain, no save
             12516                         CST = 15, Non-Callable Procedure.          */
             12517    1         2 NPARAM UBIN(11) UNAL;
             12518                /*K*  NPARAM is an 11-bit field denoting number of parameters. */
       45    12520        %BANNER(ARG=B$DNAME);
             12521        %LSET LISTDIR='0'B;

             12528    1   /*******************************************************************************
             12529    1   *                                                                              *
             12530    1   *                          B$DNAME                                                 *
             12531    1   *                                                                              *
             12532    1   *******************************************************************************/

       46    12536        %B$DNAME;
             12537            %LSET STR='BASED        ';
             12538            %IF
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:23   
             12539                '0'B;
             12541            %ELSE;
             12542                %LSET INIT=/*;
             12543            %ENDIF;
             12544    1   DCL 1 B$DNAME BASED ALIGNED,
             12545    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             12546                /*K*  COUNT is the number of characters in the name */
             12547            %IF
             12548                '0'B;
             12551            %ELSE;
             12552    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             12553            %ENDIF;
       47    12555        %BANNER( ARG="C$DNAME and DNAME" );
             12556        %LSET LISTDIR='0'B;

             12563    1   /*******************************************************************************
             12564    1   *                                                                              *
             12565    1   *                          C$DNAME and DNAME                                       *
             12566    1   *                                                                              *
             12567    1   *******************************************************************************/

       48    12571    1   DCL 1 C$DNAME BASED(NAME$) ALIGNED,
       49    12572    1         2 COUNT UBIN HALF UNAL,
       50    12573    1         2 TEXT CHAR(512) UNAL,
       51    12574    1         2 TXT(0:511) REDEF TEXT CHAR(1) UNAL;
       52    12575    1   DCL 1 DNAME  ALIGNED,
       53    12576    1         2 COUNT UBIN HALF UNAL,
       54    12577    1         2 TEXT CHAR(514) UNAL,
       55    12578    1         2 TXT(0:513) REDEF TEXT CHAR(1) UNAL;
       56    12579        %BANNER( ARG=SUBS );
             12580        %LSET LISTDIR='0'B;

             12587    1   /*******************************************************************************
             12588    1   *                                                                              *
             12589    1   *                          SUBS                                                 *
             12590    1   *                                                                              *
             12591    1   *******************************************************************************/
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:24   

       57    12595        %B$RECORDSUBS;
             12596        %EQU TYPHEAD=0 ;
             12597        %EQU TYPDNAM=1 ;
             12598        %EQU TYPRNAM=2 ;
             12599        %EQU TYPSECT=3 ;
             12600        %EQU TYPEDEF=4 ;
             12601        %EQU TYPEREF=5 ;
             12602        %EQU TYPSDEF=6 ;
             12603        %EQU TYPSREF=7 ;
             12604        %EQU TYPSEGDEF=8 ;
             12605        %EQU TYPSEGREF=9 ;
             12606        %EQU TYPPROG=10 ;
             12607        %EQU SUBTYPPROG=0 ;
             12608        %EQU SUBTYPREL=1 ;
             12609        %EQU TYPLOGBLK=11 ;
             12610        %EQU TYPINTNTRY=12 ;
             12611        %EQU TYPEXST=13 ;
             12612        %EQU TYPVREBL=14 ;
             12613        %EQU TYPDBGNAM=15 ;
             12614        %EQU TYPLV1LB=16 ;
             12615        %EQU TYPLV1=17 ;
             12616        %EQU TYPDATASEG=18 ;
             12617        %EQU TYPRUM=20 ;
             12618        %EQU TYPBIRTH=21 ;
             12619        %EQU TYPPLOVER=22 ;
             12620        %EQU TYPCOMPID=23 ;
             12621        %EQU TYPROS=30 ;
       58    12623        %B$RELOCSUBS;
             12624        %EQU OPERSECT=1 ;
             12625        %EQU OPEREREF=2 ;
             12626        %EQU OPERSREF=3 ;
             12627        %EQU OPERCONST=4 ;
             12628        %EQU OPERSEGID=5 ;
             12629        %EQU OPERSEGREF=6 ;
             12630        %EQU OPERFREF=15 ;
             12631        %EQU FIELDLH=0 ;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:25   
             12632        %EQU FIELDRH=1 ;
             12633        %EQU FIELDSEGID=2 ;
             12634        %EQU FIELDY=3 ;
             12635        %EQU FIELDLAF=3 ;
             12636        %EQU FIELDWORD=4 ;
             12637        %EQU EVALOPIGNORE=0 ;                   /* Value not present, r = E(operand)  */
             12638        %EQU EVALOPADD=1 ;                      /* Add: r = E(operand) + Value  */
             12639        %EQU EVALOPSUB=2 ;                      /* Subtract: r = E(operand) - Value */
             12640        %EQU EVALOPMULT=3 ;                     /* Multiply: r = E(operand) * Value */
             12641        %EQU EVALOPDIV=4 ;                      /* Divide:   r = E(operand) / Value */
             12642        %EQU EVALOPSHFTR=5 ;               /* Shift right: r = E(operand) SR by Value */
             12643        %EQU EVALOPSHFTL=6 ;               /* Shift left:  r = E(operand) SL by Value */
             12644        %EQU EVALOPRPT=7 ;       /* Operand is a repeat count. Repeat Value n times*/
             12645        %EQU EVALOPFREF=8 ;
             12646        %EQU RELOCOPADD=1 ;
             12647        %EQU RELOCOPSUB=2 ;
             12648        %EQU RELOCOPMULT=3 ;
             12649        %EQU RELOCOPDIV=4 ;
             12650        %EQU RELOCOPSTORER=14 ;
             12651        %EQU RELOCOPSTOREL=15 ;
       59    12653        %B$SECTIONSUBS;
             12654        %EQU DATASECTION=0 ;
             12655        %EQU CODESECTION=1 ;
             12656        %EQU UCOMSECTION=2 ;
             12657        %EQU RLCOMSECTION=3 ;
             12658        %EQU LCOMSECTION=4 ;
             12659        %EQU DCBSECTION=5 ;
             12660        %EQU ROSECTION=6 ;
             12661        %EQU RORLCOMSECTION=7 ;
             12662        %EQU ROLCOMSECTION=8 ;
             12663        %EQU EVENBOUNDSECTION=0 ;
             12664        %EQU ODDBOUNDSECTION=1 ;
             12665        %EQU EIGHTBOUNDSECTION=2 ;
             12666        %EQU PAGEBOUNDSECTION=3 ;
       60    12668        %SUB_CST;
             12669        %EQU STD#=0 ;                           /* Standard CP6 callable procedure */
             12670        %EQU NSTD#=1 ;                          /* Non-standard Call Type  */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:26   
             12671        %EQU MAIN#=2 ;                /* Standard CP6 Procedure with MAIN attribute */
             12672        %EQU ASYNC#=3 ;               /* Standard CP6 Procedure with ASYNC attribute */
             12673        %EQU FUNC#=4 ;                /* Standard CP6 Function procedure; a variable */
             12674                                      /* table entry will be present to define the   */
             12675                                      /* attributes of the function.                 */
             12676        %EQU XSTD#=5 ;           /* Same as 0, except AVOID or MATERIALIZE specified */
             12677        %EQU XMAIN#=7 ;          /* Same as 2, except AVOID or MATERIALIZE specified */
             12678        %EQU XASYNC#=8 ;         /* Same as 3, except AVOID or MATERIALIZE specified */
             12679        %EQU XFUNC#=9 ;          /* Same as 4, except AVOID or MATERIALIZE specified */
             12680        %EQU DOMSAV#=13 ;                       /* GCOS domain, save  */
             12681        %EQU DOMNOSAV#=14 ;                     /* GCOS domain, no save  */
             12682        %EQU NOTPROC#=15 ;                      /* Non-callable procedure  */
       61    12684        %SUB_LINKFLAGS;
             12685        %EQU SOURCE_OBJECT#=0 ;
             12686        %EQU SOURCE_SLIB#=1 ;
             12687        %EQU SOURCE_ALIB#=2 ;
             12688        %EQU SOURCE_ULIB#=3 ;
             12689        %EQU SOURCE_RLIB#=4 ;
             12690        %EQU SOURCE_REMOVED#=5 ;
             12691        %EQU SOURCE_LINKER#=6 ;
       62    12693        %BANNER( ARG=HEAD_KEY );
             12694        %LSET LISTDIR='0'B;

             12701    1   /*******************************************************************************
             12702    1   *                                                                              *
             12703    1   *                          HEAD_KEY                                                *
             12704    1   *                                                                              *
             12705    1   *******************************************************************************/

       63    12709    1   DCL 1 HEAD_KEY STATIC,
       64    12710    1         2 COUNT UBIN BYTE UNAL INIT(7),
       65    12711    1         2 TEXT CHAR(9) INIT('"_TV_ST');
       66    12712        %BANNER( ARG=HEAD_RECORD );
             12713        %LSET LISTDIR='0'B;

             12720    1   /*******************************************************************************
             12721    1   *                                                                              *
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:27   
             12722    1   *                          HEAD_RECORD                                             *
             12723    1   *                                                                              *
             12724    1   *******************************************************************************/

       67    12728    1   DCL 1 HEAD_RECORD  STATIC ALIGNED,
       68    12729    1         2 UTS UBIN(36) UNAL INIT(0),
       69    12730    1         2 WORDSIZE UBIN BYTE UNAL INIT(36),
       70    12731    1         2 CMPLRID UBIN(27) UNAL INIT(0),
       71    12732    1         2 START_ADDRESS,
       72    12733    1           3 OPERAND_TYPE UBIN( 4) UNAL INIT(0),
       73    12734    1           3 * BIT ( 5) UNAL INIT('0'B),
       74    12735    1           3 OPERAND UBIN( 9) UNAL INIT(0),
       75    12736    1           3 OFFSET UBIN(18) UNAL INIT(0),
       76    12737    1         2 SEVLEV UBIN(18) UNAL INIT(0),
       77    12738    1         2 LB_SIZE UBIN(18) UNAL INIT(0),
       78    12739    1         2 PR_SIZE UBIN(18) UNAL INIT(0),
       79    12740    1         2 RL_SIZE UBIN(18) UNAL INIT(1024),
       80    12741    1         2 DN_SIZE UBIN(18) UNAL INIT( SIZEW(DN_RECORD) ),
       81    12742    1         2 DN_PAGE UBIN(18) UNAL INIT( SIZEW(DN_RECORD) ),
       82    12743    1         2 RN_SIZE UBIN(18) UNAL INIT(0),
       83    12744    1         2 RN_PAGE UBIN(18) UNAL INIT(0),
       84    12745    1         2 ED_SIZE UBIN(18) UNAL INIT( SIZEW(ED_RECORD) ),
       85    12746    1         2 ED_PAGE UBIN(18) UNAL INIT( SIZEW(ED_RECORD) ),
       86    12747    1         2 ER_SIZE UBIN(18) UNAL INIT(0),
       87    12748    1         2 ER_PAGE UBIN(18) UNAL INIT(0),
       88    12749    1         2 DD_SIZE UBIN(18) UNAL INIT(0),
       89    12750    1         2 DD_PAGE UBIN(18) UNAL INIT(0),
       90    12751    1         2 DR_SIZE UBIN(18) UNAL INIT(0),
       91    12752    1         2 DR_PAGE UBIN(18) UNAL INIT(0),
       92    12753    1         2 SD_SIZE UBIN(18) UNAL INIT(0),
       93    12754    1         2 SD_PAGE UBIN(18) UNAL INIT(0),
       94    12755    1         2 SR_SIZE UBIN(18) UNAL INIT(0),
       95    12756    1         2 SR_PAGE UBIN(18) UNAL INIT(0),
       96    12757    1         2 LIB,
       97    12758    1           3 COUNT UBIN( 9) UNAL INIT(0),
       98    12759    1           3 NAME CHAR(31) UNAL
       99    12760    1             INIT('                               '),
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:28   
      100    12761    1         2 ALIB,
      101    12762    1           3 COUNT UBIN( 9) UNAL INIT(0),
      102    12763    1           3 NAME CHAR(31) UNAL
      103    12764    1             INIT('                               ');
      104    12765        %BANNER( ARG="DN_RECORD - Defined names");
             12766        %LSET LISTDIR='0'B;

             12773    1   /*******************************************************************************
             12774    1   *                                                                              *
             12775    1   *                          DN_RECORD - Defined names                               *
             12776    1   *                                                                              *
             12777    1   *******************************************************************************/

      105    12781    1   DCL 1 DN_RECORD CONSTANT ALIGNED,
      106    12782    1         2 TV_ST_NAME,
      107    12783    1           3 * UBIN HALF UNAL INIT(6),
      108    12784    1           3 * CHAR(6) INIT('_TV_ST'),
      109    12785    1         2 TV_EN_NAME,
      110    12786    1           3 * UBIN HALF UNAL INIT(6),
      111    12787    1           3 * CHAR(6) INIT('_TV_EN'),
      112    12788    1         2 TRANSFER_VECTOR,
      113    12789    1           3 * UBIN HALF UNAL INIT(15),
      114    12790    1           3 * CHAR(18) INIT('Transfer vector');
      115    12791        %BANNER( ARG="SC_RECORD - Defines Sections");
             12792        %LSET LISTDIR='0'B;

             12799    1   /*******************************************************************************
             12800    1   *                                                                              *
             12801    1   *                          SC_RECORD - Defines Sections                            *
             12802    1   *                                                                              *
             12803    1   *******************************************************************************/

      116    12807    1   DCL 1 SC_RECORD STATIC ALIGNED,
      117    12808    1         2 TYPE UBIN BYTE UNAL INIT( 1 ),
      118    12809    1         2 * BIT(1) INIT('0'B),
      119    12810    1         2 INITZERO BIT(1) INIT('0'B),
      120    12811    1         2 INITUTS  BIT(1) INIT('0'B),
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:29   
      121    12812    1         2 SEGMENT  BIT(1) INIT('0'B),
      122    12813    1         2 * BIT(3) INIT('0'B),
      123    12814    1         2 BOUND BIT(2) INIT('0'B),
      124    12815    1         2 SIZE UBIN HALF UNAL INIT(0),
      125    12816    1         2 NPOINTER UBIN HALF UNAL INIT(4),
      126    12817    1         2 * UBIN HALF UNAL INIT(0);
      127    12818        %BANNER( ARG="ED_RECORD - Defines ENTDEFs");
             12819        %LSET LISTDIR='0'B;

             12826    1   /*******************************************************************************
             12827    1   *                                                                              *
             12828    1   *                          ED_RECORD - Defines ENTDEFs                             *
             12829    1   *                                                                              *
             12830    1   *******************************************************************************/

      128    12834    1   DCL 1 ED_RECORD STATIC ALIGNED,
      129    12835    1         2 TV_ST_EDEF,
      130    12836    1           3 LFLAGS UBIN BYTE UNAL INIT(0),
      131    12837    1           3 OU UNAL ,
      132    12838    1             4 SECTNUM UBIN BYTE UNAL INIT(0),
      133    12839    1             4 OFFSET UBIN HALF UNAL INIT(0),
      134    12840    1           3 NPOINTER UBIN HALF UNAL INIT(0),
      135    12841    1           3 PRI BIT(1) UNAL INIT('1'B),
      136    12842    1           3 ALT BIT(1) UNAL INIT('0'B),
      137    12843    1           3 CHECK BIT(1) UNAL INIT('0'B),
      138    12844    1           3 CST UBIN(4) UNAL INIT( 15 ),
      139    12845    1           3 NPARAM UBIN(11) UNAL INIT(0),
      140    12846    1         2 TV_EN_EDEF,
      141    12847    1           3 LFLAGS UBIN BYTE UNAL INIT(0),
      142    12848    1           3 OU UNAL ,
      143    12849    1             4 SECTNUM UBIN BYTE UNAL INIT(0),
      144    12850    1             4 OFFSET UBIN HALF UNAL INIT(0),
      145    12851    1           3 NPOINTER UBIN HALF UNAL INIT(2),
      146    12852    1           3 PRI BIT(1) UNAL INIT('0'B),
      147    12853    1           3 ALT BIT(1) UNAL INIT('0'B),
      148    12854    1           3 CHECK BIT(1) UNAL INIT('0'B),
      149    12855    1           3 CST UBIN(4) UNAL INIT( 15 ),
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:30   
      150    12856    1           3 NPARAM UBIN(11) UNAL INIT(0);
      151    12857        %BANNER( ARG=FORM1_KEY );
             12858        %LSET LISTDIR='0'B;

             12865    1   /*******************************************************************************
             12866    1   *                                                                              *
             12867    1   *                          FORM1_KEY                                               *
             12868    1   *                                                                              *
             12869    1   *******************************************************************************/

      152    12873    1   DCL 1 FORM1_KEY STATIC ALIGNED,
      153    12874    1         2 COUNT UBIN BYTE UNAL INIT(7),
      154    12875    1         2 * BIT(9) UNAL INIT('777'O),
      155    12876    1         2 UTS UBIN UNAL INIT(0),
      156    12877    1         2 REC_TYPE UBIN BYTE UNAL,
      157    12878    1         2 PAGE#    UBIN BYTE UNAL INIT(0);
      158    12879        %BANNER( ARG="Relocation keys" );
             12880        %LSET LISTDIR='0'B;

             12887    1   /*******************************************************************************
             12888    1   *                                                                              *
             12889    1   *                          Relocation keys                                         *
             12890    1   *                                                                              *
             12891    1   *******************************************************************************/

      159    12895    1   DCL 1 REPEAT_TRA_RELOC_REC_KEY CONSTANT ALIGNED,
      160    12896    1         2 COUNT UBIN BYTE UNAL INIT(12),
      161    12897    1         2 * BIT(9) UNAL INIT('777'O),
      162    12898    1         2 UTS UBIN UNAL INIT(0),
      163    12899    1         2 REC_TYPE UBIN BYTE UNAL INIT(10),
      164    12900    1         2 SECT# UBIN HALF UNAL INIT(0),
      165    12901    1         2 OFFSET UBIN HALF UNAL INIT(0),
      166    12902    1         2 SUB_TYPE UBIN BYTE UNAL INIT(1),
      167    12903    1         2 SEQUENCE UBIN BYTE UNAL INIT(0);
      168    12904
      169    12905    1   DCL 1 ENTREF_RELOC_KEY STATIC ALIGNED,
      170    12906    1         2 COUNT UBIN BYTE UNAL INIT(12),
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:31   
      171    12907    1         2 * BIT(9) UNAL INIT('777'O),
      172    12908    1         2 UTS UBIN UNAL INIT(0),
      173    12909    1         2 REC_TYPE UBIN BYTE UNAL INIT(10),
      174    12910    1         2 SECT# UBIN HALF UNAL INIT(0),
      175    12911    1         2 OFFSET UBIN HALF UNAL INIT(0),
      176    12912    1         2 SUB_TYPE UBIN BYTE UNAL INIT(1),
      177    12913    1         2 SEQUENCE UBIN BYTE UNAL INIT(1);
      178    12914        %BANNER( ARG=FORM1_REC_TYPES );
             12915        %LSET LISTDIR='0'B;

             12922    1   /*******************************************************************************
             12923    1   *                                                                              *
             12924    1   *                          FORM1_REC_TYPES                                         *
             12925    1   *                                                                              *
             12926    1   *******************************************************************************/

      179    12930    1   DCL FORM1_REC_TYPES (0:2) UBIN CONSTANT INIT( 1, 3, 4 );
      180    12931        %BANNER( ARG=FORM1_BUF_ );
             12932        %LSET LISTDIR='0'B;

             12939    1   /*******************************************************************************
             12940    1   *                                                                              *
             12941    1   *                          FORM1_BUF_                                              *
             12942    1   *                                                                              *
             12943    1   *******************************************************************************/

      181    12947    1   DCL FORM1_BUF_ (0:2) BIT(72) CONSTANT INIT(
      182    12948    1             VECTOR( DN_RECORD ),
      183    12949    1             VECTOR( SC_RECORD ),
      184    12950    1             VECTOR( ED_RECORD ) );
      185    12951        %BANNER( ARG="Relocation records" );
             12952        %LSET LISTDIR='0'B;

             12959    1   /*******************************************************************************
             12960    1   *                                                                              *
             12961    1   *                          Relocation records                                      *
             12962    1   *                                                                              *
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:32   
             12963    1   *******************************************************************************/

      186    12967    1   DCL 1 REPEAT_TRA_RELOC_REC STATIC ALIGNED,
      187    12968    1         2 * UBIN(6) UNAL INIT(0),
      188    12969    1         2 OPRND_TYPE UBIN(4) UNAL INIT(4),
      189    12970    1         2 EVAL_OP UBIN(4) UNAL INIT(7),
      190    12971    1         2 RELOC_OP UBIN(4) UNAL INIT(14),
      191    12972    1         2 OPERAND UBIN HALF UNAL INIT( 0  /* Repeat count */  ),
      192    12973    1         2 DISPLACEMENT UBIN HALF UNAL INIT(0),
      193    12974    1         2 START_BIT UBIN BYTE UNAL INIT(0),
      194    12975    1         2 END_BIT UBIN BYTE UNAL INIT(35),
      195    12976    1         2 VALUE UBIN INIT( BITBIN('710000'O /* Tra 0 instruction */) );
      196    12977
      197    12978    1   DCL 1 EMPTY_SLOT_RELOC STATIC ALIGNED,
      198    12979    1         2 * UBIN(6) UNAL INIT(0),
      199    12980    1         2 OPRND_TYPE UBIN(4) UNAL INIT(4),
      200    12981    1         2 EVAL_OP UBIN(4) UNAL INIT(0),
      201    12982    1         2 RELOC_OP UBIN(4) UNAL INIT(14),
      202    12983    1         2 OPERAND UBIN HALF UNAL INIT(0),
      203    12984    1         2 DISPLACEMENT UBIN HALF UNAL INIT(0),
      204    12985    1         2 START_BIT UBIN BYTE UNAL INIT(0),
      205    12986    1         2 END_BIT UBIN BYTE UNAL INIT(35);
      206    12987
      207    12988    1   DCL 1 ENTREF_RELOC STATIC ALIGNED,
      208    12989    1         2 * UBIN(6) UNAL INIT(0),
      209    12990    1         2 OPRND_TYPE UBIN(4) UNAL INIT(2),
      210    12991    1         2 EVAL_OP UBIN(4) UNAL INIT(0),
      211    12992    1         2 RELOC_OP UBIN(4) UNAL INIT(14),
      212    12993    1         2 OPERAND UBIN HALF UNAL INIT(0),
      213    12994    1         2 DISPLACEMENT UBIN HALF UNAL INIT(0),
      214    12995    1         2 START_BIT UBIN BYTE UNAL INIT(0),
      215    12996    1         2 END_BIT UBIN BYTE UNAL INIT(17);
      216    12997
      217    12998        %B$RELOC2;
             12999    1   DCL 1 B$RELOC2 BASED ALIGNED,
             13000    1         2 MBZ UBIN(6) UNAL,
             13001                /*K*  MBZ is reserved for future use and must be zero. */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:33   
             13002    1         2 OPNDTYP UBIN(4) UNAL,
             13003                /*K*  OPNDTYP -
             13004                      (operand type)  = 1 section
             13005                                      = 2 ENTREF
             13006                                      = 3 SYMREF
             13007                                      = 4 CONSTANT
             13008                                      = 5 SEGDEF
             13009                                      = 6 SEGREF    */
             13010    1         2 EVALOP UBIN(4) UNAL,
             13011                /*K*  EVALOP is the operator to be applied to the VALUE and
             13012                      the evaluation of the operand (yeilding an intermediate
             13013                      result, r).
             13014                      (Evaluation Op)     Meaning
             13015                      ---------------     -------
             13016                             0            indicates VALUE word is not present
             13017                                          (r = E(operand))
             13018                             1            add:  r = E(operand)+VALUE
             13019                             2            subtract:  r = E(operand)-VALUE
             13020                             3            multiply:  r = E(operand)*VALUE
             13021                             4            divide:  r = E(operand)/VALUE
             13022                             5            Shift right
             13023                                          r = E(operand) shifted right by
             13024                                          VALUE (i.e., VALUE = Shift count)
             13025                             6            Shift left
             13026                                          r = E(operand shifted left by
             13027                                          VALUE (i.e., VALUE = Shift count)
             13028                             7            Repeat:  The operand is a repeat
             13029                                          count, n.  Repeat VALUE n times.  */
             13030    1         2 RELOCOP UBIN(4) UNAL,
             13031                /*K*  RELOCOP is the operator to be applied to the intermediate
             13032                      result; r, and the field (defined by DISP, STBIT, and
             13033                      ENDBIT within the current program record).
             13034                      (Relocation Op)     Meaning
             13035                      ---------------     -------
             13036                             0            undefined
             13037                             1            add:  field+r -> field
             13038                             2            subtract:  field-r -> field
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:34   
             13039                             3            multiply:  field*r -> field
             13040                             4            divide:  field/r -> field
             13041                           5-0'15'        undefined
             13042                             0'16'        Store right justified:
             13043                                          r right justified -> field
             13044                             0'17'        Store left justified:
             13045                                          r left justified -> field  */
             13046    1         2 OPERAND UBIN HALF UNAL,
             13047                /*K*  OPERAND - If operand TYPE = 4, the operand field is
             13048                                an unsigned constant.
             13049                                If operand TYPE ~= 4 (or 0), the operand field
             13050                                is an entry number in the table specified by TYPE. */
             13051    1         2 DISP UBIN HALF UNAL,
             13052                /*K*  DISP is the word displacement from OFFSET (in the key)
             13053                      to the relocatable item.  */
             13054    1         2 STBIT UBIN BYTE UNAL,
             13055                /*K*  STBIT is the starting bit offset from the word located
             13056                      by DISP.  */
             13057    1         2 ENDBIT UBIN BYTE UNAL,
             13058                /*K*  ENDBIT is the ending bit offset from the word located
             13059                      by DISP.   */
             13060    1         2 VALUE SBIN;
             13061                /*K*  VALUE is a 36-bit constant to be used in the
             13062                      intermediate result, r.  This word is present only if
             13063                      EVALOP ~= 0.   */
      218    13065
      219    13066        %BANNER(ARG="Binary search variables");
             13067        %LSET LISTDIR='0'B;

             13074    1   /*******************************************************************************
             13075    1   *                                                                              *
             13076    1   *                          Binary search variables                                 *
             13077    1   *                                                                              *
             13078    1   *******************************************************************************/

      220    13082        %BIN_SEARCH_VARS;
             13083    1   DCL BIN_START$          PTR  ALIGNED   AUTO;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:35   
             13084    1   DCL BIN_STOP$           PTR  ALIGNED   AUTO;
             13085    1   DCL BIN_RESULT$         PTR  ALIGNED   AUTO;
             13086    1   DCL BIN_N$              PTR  ALIGNED   AUTO;
             13087    1   DCL BIN_MATCH$          PTR       ALIGNED   AUTO;
             13088    1   DCL BIN_NAME_DISP       UBIN(36)  ALIGNED   AUTO;
             13089    1   DCL BIN_SIZE            UBIN(36)  ALIGNED   AUTO;
      221    13091        %BIN_SEARCH_TEMPS;
             13092    1   DCL BIN_LOW             UBIN(36)  ALIGNED AUTO;
             13093    1   DCL BIN_HIGH            UBIN(36)  ALIGNED AUTO;
             13094    1   DCL BIN_MID             UBIN(36)  ALIGNED AUTO;
             13095    1   DCL BIN_NTEMP$          PTR        ALIGNED AUTO;
             13096    1   DCL BIN_START1$         PTR       ALIGNED AUTO;
      222    13098        %PTR;
             13099        %LSET LISTDIR='0'B;

             13106    1   /*******************************************************************************
             13107    1   *                                                                              *
             13108    1   *                          PTR                                                 *
             13109    1   *                                                                              *
             13110    1   *******************************************************************************/

      223    13114        %POINTER;
             13115    1   DCL P$         PTR       ALIGNED AUTO;
             13116    1   DCL Q$         PTR       ALIGNED AUTO;
             13117    1   DCL R$         PTR       ALIGNED AUTO;
      224    13119    1   DCL NAME$                     PTR;
      225    13120    1   DCL NAME1$                    PTR;
      226    13121    1   DCL NAME2$                    PTR;
      227    13122    1   DCL LIST$                     PTR;
      228    13123    1   DCL START$                    PTR;
      229    13124    1   DCL STOP$                     PTR;
      230    13125    1   DCL ENTDEF$                   PTR;
      231    13126    1   DCL NEXT$                     PTR;
      232    13127    1   DCL RU_DNAME$                 PTR;
      233    13128    1   DCL RU_EDEF$                  PTR;
      234    13129    1   DCL END$                      PTR;
      235    13130    1   DCL RELOC_START$              PTR;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:36   
      236    13131    1   DCL RELOC_END$                PTR;
      237    13132    1   DCL RELOC_CURR$               PTR;
      238    13133    1   DCL RN_START$                 PTR     STATIC      INIT( ADDR(NIL) );
      239    13134    1   DCL ER_START$                 PTR     STATIC      INIT( ADDR(NIL) );
      240    13135    1   DCL ALL$                      PTR;
      241    13136        %S;
             13137        %LSET LISTDIR='0'B;

             13144    1   /*******************************************************************************
             13145    1   *                                                                              *
             13146    1   *                          SBIN                                                 *
             13147    1   *                                                                              *
             13148    1   *******************************************************************************/

      242    13152    1   DCL I                         SBIN;
      243    13153    1   DCL NEXT                      SBIN;
      244    13154    1   DCL OFFSET                    SBIN    STATIC      INIT( 0 );
      245    13155    1   DCL DN_OFFSET                 SBIN    STATIC      INIT( 0 );
      246    13156    1   DCL ER_SIZE                   SBIN    STATIC      INIT( 0 );
      247    13157    1   DCL RN_SIZE                   SBIN    STATIC      INIT( 0 );
      248    13158    1   DCL RU_DNAME_SIZE             SBIN;
      249    13159    1   DCL RU_EDEF_SIZE              SBIN;
      250    13160    1   DCL RU_SDEF_SIZE              SBIN;
      251    13161    1   DCL TABS                      SBIN;
      252    13162    1   DCL SIZE                      SBIN;
      253    13163    1   DCL SLOTS                     SBIN;
      254    13164        %E;
             13165        %LSET LISTDIR='0'B;

             13172    1   /*******************************************************************************
             13173    1   *                                                                              *
             13174    1   *                          ENTRY                                                 *
             13175    1   *                                                                              *
             13176    1   *******************************************************************************/

      255    13180        %ENTRIES;
             13181    1   DCL VXE$ERROR       ENTRY(4);
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:37   
             13182    1   DCL VXE$ERR         ENTRY(3);
             13183    1   DCL VXE$MERC        ENTRY;
             13184    1   DCL VXE$ERRMSG      ENTRY(3);
             13185    1   DCL VXR$READ        ENTRY( 3 );
             13186    1   DCL VXW$WRITE       ENTRY( 3 );
             13187    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             13188    1   DCL VXD$B2C         ENTRY( 5 );
             13189    1   DCL VXD$C2B         ENTRY( 3 );
             13190    1   DCL VXA$GET         ENTRY( 3 );
             13191    1   DCL VXF$FREE        ENTRY( 3 );
             13192    1   DCL VXQ$SORT        ENTRY( 7 );
             13193    1   DCL VXY$YESNO       ENTRY( 1 );
      256    13195        %ENTRIES_IO;
             13196    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             13197    1   DCL VXF$CLOSE       ENTRY(3);
             13198    1   DCL VXU$PREAD       ENTRY(12);
             13199    1   DCL VXK$KEY         ENTRY(4);
             13200    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             13201    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
      257    13203    1   DCL VXQ$SORT_V            ENTRY(7);
      258    13204        %C;
             13205        %LSET LISTDIR='0'B;

             13212    1   /*******************************************************************************
             13213    1   *                                                                              *
             13214    1   *                          CHAR                                                 *
             13215    1   *                                                                              *
             13216    1   *******************************************************************************/

      259    13220    1   DCL BUFFER CHAR(80);
      260    13221    1   DCL 1 TRANS_VECT_MSG STATIC,
      261    13222    1         2 * CHAR(4) INIT(' '),
      262    13223    1         2 ADDR1 CHAR(6) INIT(' '),
      263    13224    1         2 * CHAR(1) INIT(' '),
      264    13225    1         2 NAME1 CHAR(31) INIT(' '),
      265    13226    1         2 * CHAR(4) INIT(' -> '),
      266    13227    1         2 ADDR2 CHAR(6) INIT(' '),
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:38   
      267    13228    1         2 * CHAR(1) INIT(' '),
      268    13229    1         2 NAME2 CHAR(31) INIT(' ');
      269    13230    1   DCL 1 EMPTY_SLOT_MSG STATIC,
      270    13231    1         2 * CHAR(4) INIT(' '),
      271    13232    1         2 ADDR_ CHAR(6) INIT(' '),
      272    13233    1         2 * CHAR(0) INIT(' Empty slot');
      273    13234        %PLIST;
      274    13235        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:39   
      275    13236    1   VXU$INIT_VECTOR: ENTRY ;
      276    13237        /*
      277    13238                          Create the transfer vector file.
      278    13239        */
      279    13240    1         CALL M$OPEN( FPT_OPEN ) ALTRET( OPEN_ERROR );
      280    13241        /*
      281    13242                      Write defined names record, section record and entdef record
      282    13243        */
      283    13244    1         FPT_WRITE.KEY_ = VECTOR( FORM1_KEY );
      284    13245    2         DO I = 0 TO 2;
      285    13246    2             FORM1_KEY.REC_TYPE = FORM1_REC_TYPES(I);
      286    13247    2             FPT_WRITE.BUF_ = FORM1_BUF_(I);
      287    13248    2             CALL M$WRITE(FPT_WRITE)    ALTRET(WRITE_ERROR);
      288    13249    2             END;
      289    13250        /*
      290    13251                          Write the head record
      291    13252        */
      292    13253    1         FPT_WRITE.KEY_ = VECTOR( HEAD_KEY );
      293    13254    1         FPT_WRITE.BUF_ = VECTOR( HEAD_RECORD );
      294    13255    1         CALL M$WRITE(FPT_WRITE)       ALTRET(WRITE_ERROR);
      295    13256        /*
      296    13257                          Allocate a VX$LST list element for the new ou file
      297    13258                          ********************Transfer_vector
      298    13259        */
      299    13260              %ALLOCATE( PTR$=ALL$, TYPE=@GDP, SIZE="SIZEW(VX$LST)" );
      300    13267    1         ALL$->VX$LST.LINK$ = ADDR(NIL);
      301    13268    1         ALL$->VX$LST.TYPE = 0/*@OF*/;
      302    13269    1         ALL$->VX$LST.SUB_TYPE = 0/*@OF_ALL*/;
      303    13270    1         ALL$->VX$LST.OBJECT_NAME$ = ADDR(NIL);
      304    13271    1         ALL$->VX$LST.SC_HEAD$   = ADDR(NIL);
      305    13272    1         ALL$->VX$LST.SC_TAIL$   = ADDR( ALL$->VX$LST.SC_HEAD$ );
      306    13273    1         ALL$->VX$LST.P.NAME_ = VECTOR( VLP_NAME );
      307    13274    1         ALL$->VX$LST.P.ACCT_ = VECTOR( NIL );
      308    13275    1         ALL$->VX$LST.P.PASS_ = VECTOR( NIL );
      309    13276    1         ALL$->VX$LST.P.SN_ = VECTOR( NIL );
      310    13277    1         ALL$->VX$LST.P.WSN_ = VECTOR( NIL );
      311    13278    1         ALL$->VX$LST.P.B.RES = '0'B/*@FALSE_B*/;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:40   
      312    13279    1         ALL$->VX$LST.P.B.ASN = '1'B/*@TRUE_B*/;
      313    13280    1         ALL$->VX$LST.P.ASN = FPT_OPEN.V.ASN#;
      314    13281        /*
      315    13282                 Add the new ou file to the beginning of the file list for the root node
      316    13283        */
      317    13284    1         ALL$->VX$LST.LINK$ = VX_ROOT$->VX$NODE.HEAD$;
      318    13285    1         VX_ROOT$->VX$NODE.HEAD$ = ALL$;
      319    13286    1         CALL M$CLOSE(FPT_CLOSE) ALTRET(CLOSE_ERR);   /* Close the new ou file */
      320    13287    1         RETURN;
      321    13288
      322    13289        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:41   
      323    13290    1   VXU$BUILD_VECTOR: ENTRY;
      324    13291        /*
      325    13292                          Perform initializations
      326    13293         */
      327    13294    1         CALL VXQ$SORT( VX_ROOT$->VX$NODE.L_START.DN$,
      328    13295    1                 VX_ROOT$->VX$NODE.L_START.ED$,
      329    13296    1                 VX_ROOT$->VX$NODE.L_STOP.ED$,
      330    13297    1                 SIZEW(B$EDEF), 1/*@BY_NAME*/, 2, 0 );
      331    13298    1         FPT_OPEN.V.FUN# = 1;
      332    13299    1         CALL M$OPEN(FPT_OPEN) ALTRET(OPEN_ERROR);
      333    13300    1         IF VX_REC_BUF_SIZE < 1024 THEN VX_REC_BUF_SIZE = 1024;
      334    13301              %ALLOCATE( PTR$=RELOC_START$, TYPE=@SD_DS_1, SIZE=1024 );
      335    13308    1         SIZE = 1024;
      336    13309    1         RELOC_CURR$ = RELOC_START$;
      337    13310    1         RELOC_END$ = PINCRW( RELOC_START$, 1024 );
      338    13311    1         FPT_WRITE.BUF_.BUF$ = RELOC_CURR$;
      339    13312    1         FPT_WRITE.BUF_.BOUND = 4095;
      340    13313    1         FPT_WRITE.KEY_ = VECTOR(ENTREF_RELOC_KEY);
      341    13314        /*
      342    13315                              Process transfer vector in run unit file
      343    13316        */
      344    13317    2         IF VX_O.VECTOR_.RF$ ~= ADDR(NIL) THEN DO;
      345    13318    2             CALL READ_RUN_UNIT( VX_O.VECTOR_.RF$, 0/*@OF*/, 2 );
      346    13319    2             BIN_N$ = RU_DNAME$;
      347    13320    2             BIN_START$ = RU_EDEF$;
      348    13321    2             BIN_STOP$ = PINCRW( RU_EDEF$, RU_EDEF_SIZE-SIZEW(B$EDEF) );
      349    13322    2             CALL VXQ$SORT_V(BIN_N$, BIN_START$, BIN_STOP$, SIZEW(B$EDEF), 0
             13322                      /*@BY_VALUE*/, 2, 4 );
      350    13323    2             CALL FIND_ENTDEF( DN_RECORD.TV_ST_NAME, ENTDEF$, 1 );
      351    13324    2             IF ENTDEF$ = RU_EDEF$ THEN
      352    13325    2                 START$ = PINCRW( ENTDEF$, SIZEW(B$EDEF) );
      353    13326    3             ELSE DO;
      354    13327    3                 P$ = PINCRW( ENTDEF$, -SIZEW(B$EDEF) );
      355    13328    3                 IF ENTDEF$->B$EDEF.ISADDR ~= P$->B$EDEF.ISADDR THEN
      356    13329    3                     START$ = PINCRW( ENTDEF$, SIZEW(B$EDEF) );
      357    13330    4                 ELSE DO;
      358    13331    4                     ENTDEF = ENTDEF$->B$EDEF;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:42   
      359    13332    4                     ENTDEF$->B$EDEF = P$->B$EDEF;
      360    13333    4                     P$->B$EDEF = ENTDEF;
      361    13334    4                     START$ = ENTDEF$;
      362    13335    4                     END;
      363    13336    3                 END;
      364    13337    2             CALL FIND_ENTDEF( DN_RECORD.TV_EN_NAME, STOP$, 1 );
      365    13338    2             BIN_N$ = VX_ROOT$->VX$NODE.L_START.DN$;
      366    13339    2             BIN_START$ = VX_ROOT$->VX$NODE.L_START.ED$;
      367    13340    2             BIN_STOP$ = VX_ROOT$->VX$NODE.L_STOP.ED$;
      368    13341    2             I = BITBIN('700004'O);
      369    13342    3             DO WHILE( START$ < STOP$ );
      370    13343    3                 SLOTS = START$->B$EDEF.ISADDR - I;
      371    13344    4                 IF SLOTS > 0 THEN DO;
      372    13345    4                     CALL EMPTY_SLOT( SLOTS );
      373    13346    4                     I = I + SLOTS;
      374    13347    4                     END;
      375    13348    3                 NAME$ = PINCRW( RU_DNAME$, START$->B$EDEF.NPOINTER );
      376    13349                      %BIN_SEARCH(
      377    13350                      MATCH$=NAME$,
      378    13351                      NAME_DISP=2,
      379    13352                      SIZE="SIZEW(B$EDEF)",
      380    13353                      FOUND=RU_ENTRY_FOUND,
      381    13354                      SPLIT=RU_ENTRY_SPLIT,
      382    13355                      CHECK=RU_ENTRY_CHECK,
      383    13356                      ALTRETURN=RU_ENTRY_NOT_DEFINED,
      384    13357                      EMPTY=RU_ENTRY_NOT_DEFINED );
             13359    3           IF BIN_START$ = ADDR(NIL) THEN GOTO RU_ENTRY_NOT_DEFINED;
             13360    4           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) < 17 THEN DO;
             13361    4              BIN_RESULT$ = BIN_START$;        /* Sequential search                  */
             13362    5              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );
             13363    5                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             13364    5                 IF BIN_NTEMP$ -> B$DNAME.TEXT
             13365    5                   >=
             13366    6                   NAME$ -> B$DNAME.TEXT THEN DO;
             13367    6                    IF BIN_NTEMP$ -> B$DNAME.TEXT
             13368    6                      =
             13369    6                      NAME$ -> B$DNAME.TEXT THEN GOTO RU_ENTRY_FOUND;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:43   
             13370    6                    ELSE GOTO RU_ENTRY_NOT_DEFINED;
             13371    6                    END;
             13372    5                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(B$EDEF) );
             13373    5                 END;                      /* Do while                           */
             13374    4              GOTO RU_ENTRY_NOT_DEFINED;
             13375    4              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             13376    4           ELSE DO;                        /* Binary search                      */
             13377    4              BIN_LOW = 0;
             13378    4              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) + 2;
             13379    4              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(B$EDEF) );
             13380    4   RU_ENTRY_SPLIT:     ;
             13381    4              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
             13382    4              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(B$EDEF) );
             13383    4              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             13384    4              IF BIN_NTEMP$ -> B$DNAME.TEXT
             13385    4                <
             13386    5                NAME$ -> B$DNAME.TEXT THEN DO;
             13387    5                 BIN_LOW = BIN_MID;
             13388    5                 GOTO RU_ENTRY_CHECK;
             13389    5                 END;
             13390    4              IF BIN_NTEMP$ -> B$DNAME.TEXT
             13391    4                >
             13392    5                NAME$ -> B$DNAME.TEXT THEN DO;
             13393    5                 BIN_HIGH = BIN_MID;
             13394    5   RU_ENTRY_CHECK:        ;
             13395    5                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO RU_ENTRY_SPLIT;
             13396                                                /* Here => looping or not found       */
             13397                                      /* Result -> < match => a boundary condition    */
             13398    5                 /*
             13399    5                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             13400    5                   <
             13401    5                   NAME$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             13401                            B$EDEF) );
             13402    5                 /**/
             13403    5                   GOTO RU_ENTRY_NOT_DEFINED;
             13404    5                 END;
             13405    4              END;                         /* Else do;                           */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:44   
             13406    3   RU_ENTRY_FOUND:
             13407        /* Here -> found */
      385    13409        /* Here => found */
      386    13410    3                 CALL ADD_VECTOR_ELEMENT( NAME$->B$DNAME, BIN_RESULT$->B$EDEF );
      387    13411    4                 DO WHILE( '0'B );
      388    13412    4   RU_ENTRY_NOT_DEFINED:
      389    13413        /*E*  ERROR: VXU-E$RU_ENTRY_NOT_DEFINED-C
      390    13414              MESSAGE: Transfer vector entry (from %FN) not defined: %U1.
      391    13415                       Empty slot reserved in transfer vector instead.
      392    13416        */
      393    13417    4                     VX_EFIELD1.COUNT = NAME$->B$DNAME.COUNT;
      394    13418    4                     VX_EFIELD1.CHARS = NAME$->B$DNAME.TEXT;
      395    13419    4                     VX_FPT_ERRMSG.V.DCB# = DCBNUM(M$OF);
      396    13420                          %SCREAM( ERR#=E$RU_ENTRY_NOT_DEFINED, MID="'U'", LEVEL=@E$W_VX );
      397    13423    4                     CALL EMPTY_SLOT( 1 );
      398    13424    4                     END;
      399    13425    3                 START$ = PINCRW( START$, SIZEW(B$EDEF) );
      400    13426    3                 I = I + 1;
      401    13427    3                 END;
      402    13428    2             CALL VXF$CLOSE( VX_O.VECTOR_.RF$, 0/*@OF*/, 2/*@SAVE*/ );
      403    13429    2             END;
      404    13430    2         ELSE DO;
      405    13431    2             BIN_N$ = VX_ROOT$->VX$NODE.L_START.DN$;
      406    13432    2             BIN_START$ = VX_ROOT$->VX$NODE.L_START.ED$;
      407    13433    2             BIN_STOP$ = VX_ROOT$->VX$NODE.L_STOP.ED$;
      408    13434    2             END;
      409    13435        /*
      410    13436                          Process transfer vector name list
      411    13437        */
      412    13438    1         LIST$ = VX_O.VECTOR_.LIST$;
      413    13439    2         DO I = 1 TO VX_O.VECTOR_.LIST_SIZE;
      414    13440    2             NAME1$ = PINCRW( LIST$, SIZEW(VX$VECTOR_LST ) );
      415    13441    2             NEXT = LIST$->VX$VECTOR_LST.SIZEW1 + 1;
      416    13442    3             IF LIST$->VX$VECTOR_LST.SIZEW1 = 0 THEN DO; /* Empty slots */
      417    13443    3                 SLOTS = LIST$->VX$VECTOR_LST.SIZEW2;
      418    13444    3                 CALL EMPTY_SLOT( SLOTS );
      419    13445    3                 END;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:45   
      420    13446    2             ELSE
      421    13447    3                 IF LIST$->VX$VECTOR_LST.SIZEW2 = 0 THEN DO;   /* Name */
      422    13448                          %BIN_SEARCH(
      423    13449                          MATCH$=NAME1$,
      424    13450                          NAME_DISP=2,
      425    13451                          SIZE="SIZEW(B$EDEF)",
      426    13452                          SPLIT=NAME_SPLIT,
      427    13453                          FOUND=NAME_FOUND,
      428    13454                          CHECK=NAME_CHECK,
      429    13455                          ALTRETURN=NOT_DEFINED,
      430    13456                          EMPTY=NOT_DEFINED);
             13458    3           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_DEFINED;
             13459    4           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) < 17 THEN DO;
             13460    4              BIN_RESULT$ = BIN_START$;        /* Sequential search                  */
             13461    5              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );
             13462    5                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             13463    5                 IF BIN_NTEMP$ -> B$DNAME.TEXT
             13464    5                   >=
             13465    6                   NAME1$ -> B$DNAME.TEXT THEN DO;
             13466    6                    IF BIN_NTEMP$ -> B$DNAME.TEXT
             13467    6                      =
             13468    6                      NAME1$ -> B$DNAME.TEXT THEN GOTO NAME_FOUND;
             13469    6                    ELSE GOTO NOT_DEFINED;
             13470    6                    END;
             13471    5                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(B$EDEF) );
             13472    5                 END;                      /* Do while                           */
             13473    4              GOTO NOT_DEFINED;
             13474    4              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             13475    4           ELSE DO;                        /* Binary search                      */
             13476    4              BIN_LOW = 0;
             13477    4              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) + 2;
             13478    4              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(B$EDEF) );
             13479    4   NAME_SPLIT:     ;
             13480    4              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
             13481    4              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(B$EDEF) );
             13482    4              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             13483    4              IF BIN_NTEMP$ -> B$DNAME.TEXT
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:46   
             13484    4                <
             13485    5                NAME1$ -> B$DNAME.TEXT THEN DO;
             13486    5                 BIN_LOW = BIN_MID;
             13487    5                 GOTO NAME_CHECK;
             13488    5                 END;
             13489    4              IF BIN_NTEMP$ -> B$DNAME.TEXT
             13490    4                >
             13491    5                NAME1$ -> B$DNAME.TEXT THEN DO;
             13492    5                 BIN_HIGH = BIN_MID;
             13493    5   NAME_CHECK:        ;
             13494    5                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO NAME_SPLIT;
             13495                                                /* Here => looping or not found       */
             13496                                      /* Result -> < match => a boundary condition    */
             13497    5                 /*
             13498    5                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             13499    5                   <
             13500    5                   NAME1$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW
             13500                            (B$EDEF) );
             13501    5                 /**/
             13502    5                   GOTO NOT_DEFINED;
             13503    5                 END;
             13504    4              END;                         /* Else do;                           */
             13505    3   NAME_FOUND:
             13506        /* Here -> found */
      431    13508        /* Here => found */
      432    13509    3                     CALL ADD_VECTOR_ELEMENT( NAME1$->B$DNAME, BIN_RESULT$->B$EDEF );
      433    13510    4                     DO WHILE( '0'B );
      434    13511    4   NOT_DEFINED:                      /* Here => name not found */
      435    13512        /*E*  ERROR: VXU-E$NOT_DEFINED_VX-W
      436    13513              MESSAGE: Transfer vector entry not defined: %U1.
      437    13514                       Empty slot reserved in transfer vector instead.
      438    13515              DESCRIPTION: Self-explanatory.
      439    13516        */
      440    13517    4                         VX_EFIELD1.COUNT = NAME1$->B$DNAME.COUNT;
      441    13518    4                         VX_EFIELD1.CHARS = NAME1$->B$DNAME.TEXT;
      442    13519                              %SCREAM( ERR#=E$NOT_DEFINED_VX, LEVEL=@E$W_VX, MID="'U'" );
      443    13522    4                         CALL EMPTY_SLOT( 1 );
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:47   
      444    13523    4                         END;
      445    13524    3                     END;
      446    13525    3                 ELSE DO;            /* Range */
      447    13526    3                     NAME2$ = PINCRW( NAME1$, LIST$->VX$VECTOR_LST.SIZEW1 );
      448    13527    3                     NEXT = NEXT + LIST$->VX$VECTOR_LST.SIZEW2;
      449    13528    3                     CALL FIND_RANGE_START( NAME1$->B$DNAME, START$ ) ALTRET(NO_RANGE);
      450    13529    3                     CALL FIND_RANGE_END( NAME2$->B$DNAME, START$, END$ ) ALTRET(
             13529                              NO_RANGE);
      451    13530    4                     DO WHILE( START$ <= END$ );
      452    13531    4                         NAME$ = PINCRW( BIN_N$, START$->B$EDEF.NPOINTER );
      453    13532    4                         CALL ADD_VECTOR_ELEMENT( NAME$->B$DNAME, START$->B$EDEF );
      454    13533    4                         START$ = PINCRW( START$, SIZEW(B$EDEF) );
      455    13534    4                         END;
      456    13535    4                     DO WHILE( '0'B );
      457    13536    4   NO_RANGE:
      458    13537        /*E*  ERROR: VXU-E$NO_RANGE_VX-W
      459    13538              MESSAGE: No transfer vector entries exist for the range:
      460    13539                       %U1 - %U2.
      461    13540              DESCRIPTION: Self-explantory.
      462    13541        */
      463    13542    4                         VX_EFIELD1.COUNT = NAME1$->B$DNAME.COUNT;
      464    13543    4                         VX_EFIELD1.CHARS = NAME1$->B$DNAME.TEXT;
      465    13544    4                         VX_EFIELD2.COUNT = NAME2$->B$DNAME.COUNT;
      466    13545    4                         VX_EFIELD2.CHARS = NAME2$->B$DNAME.TEXT;
      467    13546                              %SCREAM( ERR#=E$NO_RANGE_VX, LEVEL=@E$W_VX, MID="'U'" );
      468    13549    4                         END;
      469    13550    3                     END;
      470    13551    2             LIST$ = PINCRW( LIST$, NEXT );
      471    13552    2             END;
      472    13553        /*
      473    13554                          Finish vector
      474    13555         */
      475    13556    1         CALL FIND_ENTDEF( DN_RECORD.TV_EN_NAME, P$, 0 );
      476    13557    1         P$->B$EDEF.OU.OFFSET = OFFSET;
      477    13558    1         ED_RECORD.TV_EN_EDEF.OU.OFFSET = OFFSET;
      478    13559    1         CALL EMPTY_SLOT( 1 );
      479    13560    1         VX_ROOT$->VX$NODE.HEAD$->VX$LST.SC_HEAD$->VX$LLIST_SC.BASE$->VX$SC.SIZE =
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:48   
             13560                  OFFSET;
      480    13561    1         SC_RECORD.SIZE = OFFSET;
      481    13562        /*
      482    13563                          Write the last relocation records
      483    13564        */
      484    13565    2         IF RELOC_CURR$ ~= RELOC_START$ THEN DO;
      485    13566    2             FPT_WRITE.BUF_.BOUND = POFFC( RELOC_CURR$, RELOC_START$ ) - 1;
      486    13567    2             CALL M$WRITE(FPT_WRITE)    ALTRET(WRITE_ERROR);
      487    13568    2             END;
      488    13569    1         REPEAT_TRA_RELOC_REC.OPERAND = OFFSET;
      489    13570    1         FPT_WRITE.KEY_ = VECTOR( REPEAT_TRA_RELOC_REC_KEY );
      490    13571    1         FPT_WRITE.BUF_ = VECTOR( REPEAT_TRA_RELOC_REC );
      491    13572    1         CALL M$WRITE(FPT_WRITE)       ALTRET(WRITE_ERROR);
      492    13573        /*
      493    13574                          Put B_VERSION after the transfer vector for compatiblity
      494    13575                          with previous versions of the transfer vector.
      495    13576        */
      496    13577    2         IF VX_SPC.B$.MINE.VERSION = 1 THEN DO;
      497    13578    2             VX_BIAS.I.RPROC = VX_BIAS.I.RPROC - 2;
      498    13579    2             VX_SPC.B$.VALUE.VERSION = OFFSET + 4;
      499    13580    2             OFFSET = OFFSET + 2;
      500    13581    2             VX_ROOT$->VX$NODE.HEAD$->VX$LST.SC_HEAD$->VX$LLIST_SC.BASE$->VX$SC.SIZE =
             13581                      OFFSET;
      501    13582    2             SC_RECORD.SIZE = OFFSET;
      502    13583    2             END;
      503    13584        /*
      504    13585                      Write section record and entdef record
      505    13586        */
      506    13587    1         FPT_WRITE.KEY_ = VECTOR( FORM1_KEY );
      507    13588    2         DO I = 1 TO 2;
      508    13589    2             FORM1_KEY.REC_TYPE = FORM1_REC_TYPES(I);
      509    13590    2             FPT_WRITE.BUF_ = FORM1_BUF_(I);
      510    13591    2             CALL M$WRITE(FPT_WRITE)    ALTRET(WRITE_ERROR);
      511    13592    2             END;
      512    13593        /*
      513    13594                          Write referenced names record
      514    13595        */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:49   
      515    13596    1         FORM1_KEY.REC_TYPE = 2;
      516    13597    1         HEAD_RECORD.RN_SIZE = RN_SIZE;
      517    13598    1         HEAD_RECORD.RN_PAGE = RN_SIZE;
      518    13599    1         IF VX_PASS2_REF.OU.MAX.RN < RN_SIZE THEN VX_PASS2_REF.OU.MAX.RN = RN_SIZE;
      519    13600    1         FPT_WRITE.BUF_.BUF$ = RN_START$;
      520    13601    1         IF RN_SIZE = 0
      521    13602    1         THEN
      522    13603    1             FPT_WRITE.BUF_.BOUND = 0;
      523    13604    1         ELSE
      524    13605    1             FPT_WRITE.BUF_.BOUND = ( RN_SIZE * 4 ) - 1;
      525    13606    1         CALL M$WRITE(FPT_WRITE)       ALTRET(WRITE_ERROR);
      526    13607
      527    13608        /*
      528    13609                          Fixup referenced names and add to root nodes defined names.
      529    13610        */
      530    13611    1         I = 0;
      531    13612    2         DO WHILE( I < RN_SIZE );
      532    13613    2             NAME$ = PINCRW( RN_START$, I );
      533    13614    2             I = I + ((NAME$->C$DNAME.COUNT+6)/4);
      534    13615    2             CALL INSERT(C$DNAME.TEXT, C$DNAME.COUNT, 1, '_' );
      535    13616    2             C$DNAME.COUNT = C$DNAME.COUNT + 1;
      536    13617    2             END;
      537    13618    1         VX_ROOT$->VX$NODE.L_SIZE.DN = VX_ROOT$->VX$NODE.L_SIZE.DN + RN_SIZE;
      538    13619    1         VX_ROOT$->VX$NODE.L_STOP.DN$ = PINCRW( RN_START$, RN_SIZE );
      539    13620        /*
      540    13621                          Sort entdefs by name
      541    13622        */
      542    13623    1         CALL VXQ$SORT( VX_ROOT$->VX$NODE.L_START.DN$,
      543    13624    1                 VX_ROOT$->VX$NODE.L_START.ED$,
      544    13625    1                 VX_ROOT$->VX$NODE.L_STOP.ED$,
      545    13626    1                 SIZEW(B$EDEF), 1/*@BY_NAME*/, 2, 0 );
      546    13627        /*
      547    13628                          Write entref record
      548    13629        */
      549    13630    1         FORM1_KEY.REC_TYPE = 5;
      550    13631    1         HEAD_RECORD.ER_SIZE = ER_SIZE;
      551    13632    1         HEAD_RECORD.ER_PAGE = ER_SIZE;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:50   
      552    13633    1         IF VX_PASS2_REF.OU.MAX.ER < ER_SIZE THEN VX_PASS2_REF.OU.MAX.ER = ER_SIZE;
      553    13634    1         FPT_WRITE.BUF_.BUF$ = ER_START$;
      554    13635    1         IF ER_SIZE = 0
      555    13636    1         THEN
      556    13637    1             FPT_WRITE.BUF_.BOUND = 0;
      557    13638    1         ELSE
      558    13639    1             FPT_WRITE.BUF_.BOUND = ( ER_SIZE * 4 ) - 1;
      559    13640    1         CALL M$WRITE(FPT_WRITE)       ALTRET(WRITE_ERROR);
      560    13641        /*
      561    13642                          Write the head record
      562    13643        */
      563    13644    1         FPT_WRITE.KEY_ = VECTOR( HEAD_KEY );
      564    13645    1         FPT_WRITE.BUF_ = VECTOR( HEAD_RECORD );
      565    13646    1         CALL M$WRITE(FPT_WRITE)       ALTRET(WRITE_ERROR);
      566    13647        /*
      567    13648                          Close the ou file and free the memory used.
      568    13649        */
      569    13650    1         CALL M$CLOSE(FPT_CLOSE) ALTRET(CLOSE_ERR);
      570    13651    1         CALL VXF$FREE( 3/*@SD_DS_1*/, SIZE, 1);
      571    13652    1         RETURN;
      572    13653        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:51   
      573    13654    1   VXU$FINISH_VECTOR: ENTRY;
      574    13655
      575    13656
      576    13657    1         SIZE = 0;
      577    13658    1         CALL READ_RUN_UNIT( VX_RUF$, 1/*@RF*/, 1 );
      578    13659    1         BIN_N$ = RU_DNAME$;
      579    13660    1         BIN_START$ = RU_EDEF$;
      580    13661    1         BIN_STOP$ = PINCRW( RU_EDEF$, RU_EDEF_SIZE-SIZEW(B$EDEF) );
      581    13662        /*
      582    13663                          Sort entdefs by value
      583    13664        */
      584    13665    1         CALL VXQ$SORT_V(BIN_N$,BIN_START$,BIN_STOP$,SIZEW(B$EDEF),0/*@BY_VALUE*/,2,4);
      585    13666        /*
      586    13667                          Sort entdefs not in transfer vector by name.
      587    13668        */
      588    13669    1         CALL FIND_ENTDEF( DN_RECORD.TV_ST_NAME, START$, 1 );
      589    13670    1         ED_RECORD.TV_ST_EDEF = START$->B$EDEF;
      590    13671    2         IF START$ ~= RU_EDEF$ THEN DO;
      591    13672    2             P$ = PINCRW( START$, -SIZEW(B$EDEF) );
      592    13673    3             IF P$->B$EDEF.ISADDR = START$->B$EDEF.ISADDR THEN DO;
      593    13674    3                 START$->B$EDEF = P$->B$EDEF;
      594    13675    3                 P$->B$EDEF = ED_RECORD.TV_ST_EDEF;
      595    13676    3                 START$ = P$;
      596    13677    3                 END;
      597    13678    2             END;
      598    13679    1         CALL FIND_ENTDEF( DN_RECORD.TV_EN_NAME, STOP$, 1 );
      599    13680    1         ED_RECORD.TV_EN_EDEF = STOP$->B$EDEF;
      600    13681    1         SIZE = POFFW( START$, RU_EDEF$ ) / SIZEW(B$EDEF);
      601    13682    2         DO I = 0 TO SIZE;
      602    13683    2             ENTDEF = RU_EDEF$ -> B$EDEF;
      603    13684    2             P$ = RU_EDEF$;
      604    13685    3             DO WHILE( P$ < STOP$ );
      605    13686    3                 Q$ = PINCRW( P$, SIZEW(B$EDEF) );
      606    13687    3                 P$ -> B$EDEF = Q$ -> B$EDEF;
      607    13688    3                 P$ = Q$;
      608    13689    3                 END;
      609    13690    2             STOP$ -> B$EDEF = ENTDEF;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:52   
      610    13691    2             STOP$ = PINCRW( STOP$, -SIZEW(B$EDEF) );
      611    13692    2             END;
      612    13693    1         BIN_START$ = STOP$;
      613    13694    1         CALL VXQ$SORT(BIN_N$,BIN_START$,BIN_STOP$,SIZEW(B$EDEF),1/*@BY_NAME*/,2,0);
      614    13695        /*
      615    13696                              Now fixup the transfer vector
      616    13697        */
      617    13698    1         CALL VXW$WRITE( ' ', 1, 0 );
      618    13699    1         CALL VXW$WRITE( '*******  T R A N S F E R   V E C T O R  *******', 47, 0);
      619    13700    1         CALL VXW$WRITE( ' ', 1, 0 );
      620    13701    1         START$ = RU_EDEF$;
      621    13702    1         STOP$ = BIN_START$;
      622    13703    1         R$ = BIN_START$;
      623    13704    1         OFFSET = ED_RECORD.TV_ST_EDEF.OU.OFFSET;
      624    13705    2         DO WHILE( START$ < STOP$ );
      625    13706    3             DO WHILE( OFFSET < START$->B$EDEF.ISADDR );
      626    13707    3                 CALL VXD$B2C( EMPTY_SLOT_MSG.ADDR_, 0, 6, OFFSET, 8 );
      627    13708    3                 CALL VXW$WRITE( EMPTY_SLOT_MSG, LENGTHC(EMPTY_SLOT_MSG), 0 );
      628    13709    3                 OFFSET = OFFSET + 1;
      629    13710    3                 END;
      630    13711    2             NAME$ = PINCRW(BIN_N$, START$->B$EDEF.NPOINTER);
      631    13712    2             TRANS_VECT_MSG.NAME2 = NAME$->B$DNAME.TEXT;
      632    13713    2             CALL VXD$B2C( TRANS_VECT_MSG.ADDR1, 0, 6, OFFSET, 8 );
      633    13714                                                         /* Find corresponding entdef */
      634    13715    2             DNAME = NAME$->B$DNAME;
      635    13716    2             DNAME.COUNT = DNAME.COUNT - 1;
      636    13717    2             CALL FIND_ENTDEF( DNAME, ENTDEF$, 0 );
      637    13718    2             TRANS_VECT_MSG.NAME1 = ADDR(DNAME)->B$DNAME.TEXT;
      638    13719    2             I = ENTDEF$->B$EDEF.ISADDR;
      639    13720    2             CALL VXD$B2C( TRANS_VECT_MSG.ADDR2, 0, 6, I, 8 );
      640    13721                                                          /* Set primaryness right */
      641    13722    2             ENTDEF$->B$EDEF.PRI = START$->B$EDEF.PRI;
      642    13723    2             START$->B$EDEF.PRI = '1'B;
      643    13724                                                          /* Switch name pointers */
      644    13725    2             I = START$->B$EDEF.NPOINTER;
      645    13726    2             START$->B$EDEF.NPOINTER = ENTDEF$->B$EDEF.NPOINTER;
      646    13727    2             ENTDEF$->B$EDEF.NPOINTER = I;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:53   
      647    13728                                                          /* Move entdef */
      648    13729    2             ENTDEF = ENTDEF$->B$EDEF;
      649    13730    2             P$ = PINCRW( ENTDEF$, -SIZEW(B$EDEF) );
      650    13731    3             DO WHILE( P$ >= BIN_START$ );
      651    13732    3                 IF PINCRW(BIN_N$, P$->B$EDEF.NPOINTER)->B$DNAME.TEXT
      652    13733    3                         ~= ADDR(DNAME)->B$DNAME.TEXT
      653    13734    3                 THEN GOTO JUMP_OUT1;
      654    13735    3                 P$ = PINCRW( P$, -SIZEW(B$EDEF) );
      655    13736    3                 END;
      656    13737    2   JUMP_OUT1:
      657    13738    2             Q$ = PINCRW( ENTDEF$, SIZEW(B$EDEF) );
      658    13739    3             DO WHILE( Q$ <= BIN_STOP$ );
      659    13740    3                 IF PINCRW(BIN_N$, Q$->B$EDEF.NPOINTER)->B$DNAME.TEXT
      660    13741    3                         ~= ADDR(DNAME)->B$DNAME.TEXT
      661    13742    3                 THEN GOTO JUMP_OUT2;
      662    13743    3                 Q$ = PINCRW( Q$, SIZEW(B$EDEF) );
      663    13744    3                 END;
      664    13745    2   JUMP_OUT2:
      665    13746    2             Q$ = PINCRW(Q$, -SIZEW(B$EDEF) );
      666    13747    3             DO WHILE( P$ >= BIN_START$ );
      667    13748    3                 Q$->B$EDEF = P$->B$EDEF;
      668    13749    3                 Q$ = PINCRW( Q$, -SIZEW(B$EDEF) );
      669    13750    3                 P$ = PINCRW( P$, -SIZEW(B$EDEF) );
      670    13751    3                 END;
      671    13752    2             BIN_START$ = PINCRW( Q$, SIZEW(B$EDEF) );
      672    13753    2             R$->B$EDEF = ENTDEF;
      673    13754    2             R$ = PINCRW( R$, SIZEW(B$EDEF) );
      674    13755    2             CALL VXW$WRITE( TRANS_VECT_MSG, LENGTHC(TRANS_VECT_MSG), 0 );
      675    13756    2             START$ = PINCRW( START$, SIZEW(B$EDEF) );
      676    13757    2             OFFSET = OFFSET + 1;
      677    13758    2             END;
      678    13759    2         DO WHILE(OFFSET < ED_RECORD.TV_EN_EDEF.OU.OFFSET);
      679    13760    2             CALL VXD$B2C( EMPTY_SLOT_MSG.ADDR_, 0, 6, OFFSET, 8 );
      680    13761    2             CALL VXW$WRITE( EMPTY_SLOT_MSG, LENGTHC(EMPTY_SLOT_MSG), 0 );
      681    13762    2             OFFSET = OFFSET + 1;
      682    13763    2             END;
      683    13764        /*
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:54   
      684    13765                                  Report entdefs not in transfer vector.
      685    13766        */
      686    13767    1         CALL VXW$WRITE( ' ', 1, 0 );
      687    13768    1         CALL VXW$WRITE('*******  ENTRY DEFINITIONS NOT IN TRANSFER VECTOR  *******',
             13768                  58, 0 );
      688    13769    1         CALL VXW$WRITE( ' ', 1, 0 );
      689    13770    1         TABS = 0;
      690    13771    1         BUFFER = ' ';
      691    13772    1         START$ = BIN_START$;
      692    13773    2         DO WHILE( START$ <= BIN_STOP$ );
      693    13774    2             NAME$ = PINCRW(BIN_N$, START$->B$EDEF.NPOINTER);
      694    13775    2             NEXT$ = PINCRW( START$, SIZEW(B$EDEF) );
      695    13776    3             DO WHILE( NEXT$ <= BIN_STOP$ );
      696    13777    3                 IF PINCRW(BIN_N$,NEXT$->B$EDEF.NPOINTER)->B$DNAME.TEXT
      697    13778    3                         ~= NAME$->B$DNAME.TEXT
      698    13779    3                 THEN GOTO JUMP_OUT3;
      699    13780    3                 NEXT$ = PINCRW( NEXT$, SIZEW(B$EDEF) );
      700    13781    3                 END;
      701    13782    2   JUMP_OUT3:
      702    13783    3             IF TABS = 2 THEN DO;
      703    13784    3                 CALL VXW$WRITE( BUFFER, 80, 0 );
      704    13785    3                 TABS = 0;
      705    13786    3                 BUFFER = ' ';
      706    13787    3                 END;
      707    13788    2             CALL INSERT( BUFFER, TABS*40+5, , NAME$->B$DNAME.TEXT );
      708    13789    2             TABS = TABS + 1;
      709    13790    2             START$ = NEXT$;
      710    13791    2             END;
      711    13792    1         IF TABS > 0 THEN CALL VXW$WRITE( BUFFER, 80, 0 );
      712    13793
      713    13794    1         IF R$ = BIN_START$ THEN R$ = PINCRW(BIN_STOP$, SIZEW(B$EDEF));
      714    13795    2         ELSE DO;
      715    13796    3             DO WHILE( BIN_START$ <= BIN_STOP$ );
      716    13797    3                 R$->B$EDEF = BIN_START$->B$EDEF;
      717    13798    3                 R$ = PINCRW(R$, SIZEW(B$EDEF));
      718    13799    3                 BIN_START$ = PINCRW( BIN_START$, SIZEW(B$EDEF) );
      719    13800    3                 END;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:55   
      720    13801    2             END;
      721    13802
      722    13803    1         RU_EDEF_SIZE = POFFW(R$, RU_EDEF$ );
      723    13804    1         B$HEAD.EPRECSIZE = RU_EDEF_SIZE;
      724    13805    1         CALL VXK$KEY( 1/*@RF*/, 4, 0, 0 );
      725    13806    1         WRITE_RU.BUF_.BUF$ = RU_EDEF$;
      726    13807    1         WRITE_RU.BUF_.BOUND = (RU_EDEF_SIZE * 4) - 1;
      727    13808        /*
      728    13809                      Mark entdefs not in transfer vector as removed, if
      729    13810                      REMOVE_ENTDEF was specified.
      730    13811        */
      731    13812    2         IF VX_O.VECTOR_.REMOVE_ENTDEF = 1 THEN DO;
      732    13813    2             B$HEAD.REMOVE_ENTDEF = '1'B;
      733    13814    3             DO WHILE( STOP$ < R$ );
      734    13815    3                 STOP$->B$EDEF.LFLAGS.SOURCE = 5;
      735    13816    3                 STOP$ = PINCRW( STOP$, SIZEW(B$EDEF) );
      736    13817    3                 END;
      737    13818    2             END;
      738    13819        /*
      739    13820                      Sort the entdefs by name.
      740    13821        */
      741    13822    1         R$ = PINCRW( R$, -SIZEW(B$EDEF) );
      742    13823    1         CALL VXQ$SORT(BIN_N$, RU_EDEF$, R$, SIZEW(B$EDEF), 1/*@BY_NAME*/, 2, 0);
      743    13824
      744    13825    1         CALL M$WRITE(WRITE_RU) ALTRET(WRITE_ERROR);
      745    13826        /*
      746    13827                      Mark symdefs removed, if REMOVE_SYMDEF specified.
      747    13828        */
      748    13829    1         RU_SDEF_SIZE = B$HEAD.EDRECSIZE;
      749    13830    2         IF VX_O.VECTOR_.REMOVE_SYMDEF = 1 AND RU_SDEF_SIZE > 0 THEN DO;
      750    13831    2             B$HEAD.REMOVE_SYMDEF = '1'B;
      751    13832    2             CALL VXK$KEY( 1/*@RF*/, 6, 0, 0 );
      752    13833                  %ALLOCATE( PTR$=P$, TYPE=@SD_DS_1, SIZE=RU_SDEF_SIZE );
      753    13840    2             SIZE = SIZE + RU_SDEF_SIZE;
      754    13841    2             READ_RU.BUF_.BUF$ = P$;
      755    13842    2             READ_RU.BUF_.BOUND = (RU_SDEF_SIZE * 4) - 1;
      756    13843    2             CALL M$READ( READ_RU ) ALTRET( READ_ERROR );
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:56   
      757    13844    2             Q$ = PINCRW( P$, RU_SDEF_SIZE );
      758    13845    3             DO WHILE( P$ < Q$ );
      759    13846    3                 IF P$ -> VXD$TMPLT.CONSTNT THEN
      760    13847    3                     P$ -> VXD$TMPLT.LFLAGS.SOURCE = 5;
      761    13848    3                 ELSE
      762    13849    3                     P$ -> VXD$TMPLT.AD.LFLAGS.SOURCE = 5;
      763    13850    3                 P$ = PINCRW( P$, SIZEW(B$EDEF) );
      764    13851    3                 END;
      765    13852    2             WRITE_RU.BUF_ = READ_RU.BUF_;
      766    13853    2             CALL M$WRITE( WRITE_RU ) ALTRET( WRITE_ERROR );
      767    13854    2             END;
      768    13855        /*
      769    13856                              Write head record and close ru file.
      770    13857        */
      771    13858    1         VX_R_KEY_BUF.FORM0.COUNT = LENGTHC( VX_R_KEY_HEAD );
      772    13859    1         VX_R_KEY_BUF.FORM0.CHARS = VX_R_KEY_HEAD;
      773    13860    1         WRITE_RU.BUF_ = VECTOR(B$HEAD);
      774    13861    1         CALL M$WRITE(WRITE_RU) ALTRET(WRITE_ERROR);
      775    13862    1         CALL VXF$CLOSE( VX_RUF$, 1/*@RF*/, 2/*@SAVE*/ );
      776    13863    1         CALL VXF$FREE( 3/*@SD_DS_1*/, SIZE, 1 );
      777    13864        /*
      778    13865                          Delete the transfer vector file
      779    13866        */
      780    13867    1         FPT_OPEN.V.DELETE# = '1'B;
      781    13868    1         CALL M$OPEN( FPT_OPEN ) ALTRET( OPEN_ERROR );
      782    13869    1         RETURN;
      783    13870
      784    13871        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:57   
      785    13872    1   OPEN_ERROR:;
      786    13873    1   CLOSE_ERR:;
      787    13874    1   WRITE_ERROR: ;
      788    13875    1   READ_ERROR: ;
      789    13876    1         CALL M$MERC           ALTRET(MERC_ERROR);
      790    13877    2         DO WHILE( '0'B );
      791    13878    2   MERC_ERROR:
      792    13879    2             CALL VXE$MERC;
      793    13880    2             END;
      794    13881              %ERROR_IT;
      795    13884
      796    13885
      797    13886        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:58   
      798    13887    1   FIND_ENTDEF: PROC( NAME, ENTDEF$, SRCH );
      799    13888
      800    13889        %B$DNAME( NAME=NAME, STCLASS=" " );
      801    13908    2   DCL ENTDEF$ PTR;
      802    13909    2   DCL SRCH    UBIN;
      803    13910
      804    13911    2   DCL NAME$   PTR;
      805    13912
      806    13913
      807    13914
      808    13915    3         IF SRCH = 0 /* Binary search */ THEN DO;
      809    13916    3             NAME$ = ADDR(NAME);
      810    13917                  %BIN_SEARCH(
      811    13918                  MATCH$=NAME$,
      812    13919                  NAME_DISP=2,
      813    13920                  SIZE="SIZEW(B$EDEF)",
      814    13921                  SPLIT=NAME_SPLIT,
      815    13922                  FOUND=NAME_FOUND,
      816    13923                  CHECK=NAME_CHECK,
      817    13924                  ALTRETURN=INTERNAL_ERROR,
      818    13925                  EMPTY=INTERNAL_ERROR );
             13927    3           IF BIN_START$ = ADDR(NIL) THEN GOTO INTERNAL_ERROR;
             13928    4           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) < 17 THEN DO;
             13929    4              BIN_RESULT$ = BIN_START$;        /* Sequential search                  */
             13930    5              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );
             13931    5                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             13932    5                 IF BIN_NTEMP$ -> B$DNAME.TEXT
             13933    5                   >=
             13934    6                   NAME$ -> B$DNAME.TEXT THEN DO;
             13935    6                    IF BIN_NTEMP$ -> B$DNAME.TEXT
             13936    6                      =
             13937    6                      NAME$ -> B$DNAME.TEXT THEN GOTO NAME_FOUND;
             13938    6                    ELSE GOTO INTERNAL_ERROR;
             13939    6                    END;
             13940    5                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(B$EDEF) );
             13941    5                 END;                      /* Do while                           */
             13942    4              GOTO INTERNAL_ERROR;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:59   
             13943    4              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             13944    4           ELSE DO;                        /* Binary search                      */
             13945    4              BIN_LOW = 0;
             13946    4              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) + 2;
             13947    4              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(B$EDEF) );
             13948    4   NAME_SPLIT:     ;
             13949    4              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
             13950    4              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(B$EDEF) );
             13951    4              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             13952    4              IF BIN_NTEMP$ -> B$DNAME.TEXT
             13953    4                <
             13954    5                NAME$ -> B$DNAME.TEXT THEN DO;
             13955    5                 BIN_LOW = BIN_MID;
             13956    5                 GOTO NAME_CHECK;
             13957    5                 END;
             13958    4              IF BIN_NTEMP$ -> B$DNAME.TEXT
             13959    4                >
             13960    5                NAME$ -> B$DNAME.TEXT THEN DO;
             13961    5                 BIN_HIGH = BIN_MID;
             13962    5   NAME_CHECK:        ;
             13963    5                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO NAME_SPLIT;
             13964                                                /* Here => looping or not found       */
             13965                                      /* Result -> < match => a boundary condition    */
             13966    5                 /*
             13967    5                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             13968    5                   <
             13969    5                   NAME$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             13969                            B$EDEF) );
             13970    5                 /**/
             13971    5                   GOTO INTERNAL_ERROR;
             13972    5                 END;
             13973    4              END;                         /* Else do;                           */
             13974    3   NAME_FOUND:
             13975        /* Here -> found */
      819    13977        /* Here => found */
      820    13978    3             ENTDEF$ = BIN_RESULT$;
      821    13979    3             RETURN;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:60   
      822    13980    3             END;
      823    13981    3         ELSE DO;              /* Do sequential search */
      824    13982    3             ENTDEF$ = BIN_START$;
      825    13983    4             DO WHILE( ENTDEF$ <= BIN_STOP$ );
      826    13984    4                 NAME$ = PINCRW( BIN_N$, ENTDEF$->B$EDEF.NPOINTER );
      827    13985    4                 IF NAME$->B$DNAME.TEXT = NAME.TEXT THEN RETURN;
      828    13986    4                 ENTDEF$ = PINCRW( ENTDEF$, SIZEW(B$EDEF) );
      829    13987    4                 END;
      830    13988    3             END;
      831    13989
      832    13990        /*E* ERROR:   VXU-E$TRANSVECT_INTERNAL_ERR_VX-C
      833    13991             MESSAGE: Internal link error:  Unable to find %U1 for transfer vector.
      834    13992        */
      835    13993    2   INTERNAL_ERROR:
      836    13994    2         VX_EFIELD1.COUNT = NAME.COUNT;
      837    13995    2         VX_EFIELD1.CHARS = NAME.TEXT;
      838    13996              %SCREAM( ERR#=E$TRANSVECT_INTERNAL_ERR_VX,LEVEL=@E$F_VX, MID="'U'" );
      839    13999
      840    14000    2   END FIND_ENTDEF;
      841    14001
      842    14002        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:61   
      843    14003    1   FIND_RANGE_START: PROC( NAME, START$ )  ALTRET;
      844    14004
      845    14005
      846    14006        %B$DNAME( NAME=NAME, STCLASS=" " );
      847    14025    2   DCL START$            PTR;
      848    14026
      849    14027    2   DCL NAME$             PTR;
      850    14028    2   DCL P$                PTR;
      851    14029    2   DCL LENGTH            UBIN;
      852    14030
      853    14031        %B$DNAME( NAME=B$DNAME, STCLASS="BASED(NAME$)" );
      854    14050        %B$EDEF;
      855    14120
      856    14121    2         P$ = BIN_START$;
      857    14122    3         DO WHILE( P$ <= BIN_STOP$ );
      858    14123    3             NAME$ = PINCRW( BIN_N$, P$->B$EDEF.NPOINTER );
      859    14124    3             IF B$DNAME.COUNT < NAME.COUNT
      860    14125    3             THEN LENGTH = B$DNAME.COUNT;
      861    14126    3             ELSE LENGTH = NAME.COUNT;
      862    14127    3             IF SUBSTR( B$DNAME.TEXT, 0, LENGTH ) >= NAME.TEXT
      863    14128    4             THEN DO;
      864    14129    4                 START$ = P$;
      865    14130    4                 RETURN;
      866    14131    4                 END;
      867    14132    3             P$ = PINCRW( P$, SIZEW(B$EDEF) );
      868    14133    3             END;
      869    14134    2         ALTRETURN;
      870    14135
      871    14136    2   END FIND_RANGE_START;
      872    14137
      873    14138        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:62   
      874    14139    1   FIND_RANGE_END: PROC( NAME, START$, END$ )  ALTRET;
      875    14140
      876    14141
      877    14142        %B$DNAME( NAME=NAME, STCLASS=" " );
      878    14161    2   DCL START$            PTR;
      879    14162    2   DCL END$              PTR;
      880    14163
      881    14164    2   DCL NAME$             PTR;
      882    14165    2   DCL P$                PTR;
      883    14166    2   DCL LENGTH            UBIN;
      884    14167
      885    14168        %B$DNAME( NAME=B$DNAME, STCLASS="BASED(NAME$)" );
      886    14187        %B$EDEF;
      887    14257
      888    14258    2         P$ = START$;
      889    14259    3         DO WHILE( P$ <= BIN_STOP$ );
      890    14260    3             NAME$ = PINCRW( BIN_N$, P$->B$EDEF.NPOINTER );
      891    14261    3             IF B$DNAME.COUNT < NAME.COUNT
      892    14262    3             THEN LENGTH = B$DNAME.COUNT;
      893    14263    3             ELSE LENGTH = NAME.COUNT;
      894    14264    3             IF SUBSTR( B$DNAME.TEXT, 0, LENGTH ) > NAME.TEXT
      895    14265    4             THEN DO;
      896    14266    4                 IF P$ = START$ THEN ALTRETURN;
      897    14267    5                 ELSE DO;
      898    14268    5                     END$ = PINCRW( P$, -SIZEW(B$EDEF) );
      899    14269    5                     RETURN;
      900    14270    5                     END;
      901    14271    4                 END;
      902    14272    3             P$ = PINCRW( P$, SIZEW(B$EDEF) );
      903    14273    3             END;
      904    14274    2         END$ = BIN_STOP$;
      905    14275
      906    14276    2   END FIND_RANGE_END;
      907    14277
      908    14278        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:63   
      909    14279    1   ADD_VECTOR_ELEMENT: PROC( NAME, EDEF );
      910    14280
      911    14281
      912    14282        %B$DNAME( NAME=NAME, STCLASS=" " );
      913    14301        %B$EDEF( NAME=EDEF,  STCLASS=" " );
      914    14371
      915    14372        %B$EDEF( NAME=B$EDEF, STCLASS="BASED(EDEF$)" );
      916    14442    2   DCL EDEF$         PTR;
      917    14443        %B$EREF( NAME=B$EREF, STCLASS="BASED(EREF$)" );
      918    14486    2   DCL EREF$         PTR;
      919    14487    2   DCL NAME_SIZE     SBIN;
      920    14488
      921    14489
      922    14490        /*
      923    14491                          Check if entry has already been added to the transfer vector
      924    14492        */
      925    14493    2         IF NOT EDEF.LFLAGS.USED THEN EDEF.LFLAGS.USED = '1'B/*@TRUE_B*/;
      926    14494    3         ELSE DO;
      927    14495        /*E*  ERROR: VXU-E$DUP_VECT_ELEMENT_VX-0
      928    14496              MESSAGE: Duplicate transfer vector element ignored: %U1.
      929    14497              DESCRIPTION: Self-explantory.
      930    14498        */
      931    14499    3             VX_EFIELD1.COUNT = NAME.COUNT;
      932    14500    3             VX_EFIELD1.CHARS = NAME.TEXT;
      933    14501                  %SCREAM( ERR#=E$DUP_VECT_ELEMENT_VX, MID="'U'", LEVEL=@E$W_VX );
      934    14504    3             RETURN;
      935    14505    3             END;
      936    14506        /*
      937    14507                          Add name of entry to the referenced name pool
      938    14508        */
      939    14509    2         NAME_SIZE = (NAME.COUNT + 6 ) / 4;
      940    14510              %ALLOCATE( PTR$=NAME$, TYPE=@DN_DS_1, SIZE=NAME_SIZE );
      941    14517    3         IF RN_START$ = ADDR(NIL) THEN DO;
      942    14518    3             RN_START$ = NAME$;
      943    14519    3             DN_OFFSET = POFFW( RN_START$, VX_ROOT$->VX$NODE.L_START.DN$ );
      944    14520    3             END;
      945    14521    2         NAME$->B$DNAME.COUNT = NAME.COUNT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:64   
      946    14522    2         NAME$->B$DNAME.TEXT = NAME.TEXT;
      947    14523        /*
      948    14524                    Add an entry in the entref record and add an entdef to the root node
      949    14525        */
      950    14526              %ALLOCATE( PTR$=EREF$, TYPE=@SD_DS_1, SIZE="SIZEW(B$EREF)" );
      951    14533    2         SIZE = SIZE + SIZEW(B$EDEF);
      952    14534              %ALLOCATE( PTR$=EDEF$, TYPE=@ED_DS_1, SIZE="SIZEW(B$EDEF)" );
      953    14541    2         B$EDEF = EDEF;
      954    14542        /*
      955    14543                 Make schema attach to the tv def, since that's the name the code'll get
      956    14544        */
      957    14545    2         EDEF.PRI = '0'B;
      958    14546    2         B$EDEF.NPOINTER = DN_OFFSET + RN_SIZE;
      959    14547    2         EDEF$->VX$TMPLT.W.WORD0 = OFFSET;
      960    14548    2         VX_ROOT$->VX$NODE.L_STOP.ED$ = EDEF$;
      961    14549    2         VX_ROOT$->VX$NODE.L_SIZE.ED = VX_ROOT$->VX$NODE.L_SIZE.ED + SIZEW(B$EDEF);
      962    14550    2         IF ER_START$ = ADDR(NIL) THEN ER_START$ = EREF$;
      963    14551    2         B$EREF.NPOINTER = RN_SIZE;
      964    14552    2         RN_SIZE = RN_SIZE + NAME_SIZE;
      965    14553    2         B$EREF.SREF = '0'B;
      966    14554    2         B$EREF.ALT = EDEF.ALT;
      967    14555    2         B$EREF.CHECK = EDEF.CHECK;
      968    14556    2         B$EREF.CST = EDEF.CST;
      969    14557    2         B$EREF.NPARAM = EDEF.NPARAM;
      970    14558    2         ENTREF_RELOC.OPERAND = ER_SIZE;
      971    14559    2         ER_SIZE = ER_SIZE + SIZEW(B$EREF);
      972    14560        /*
      973    14561                              If the relocation record is full, write it
      974    14562        */
      975    14563    3         IF RELOC_CURR$ = RELOC_END$ THEN DO;
      976    14564    3             CALL M$WRITE(FPT_WRITE) ALTRET(WRITE_ERROR);
      977    14565    3             ENTREF_RELOC_KEY.OFFSET = OFFSET;
      978    14566    3             RELOC_CURR$ = RELOC_START$;
      979    14567    3             END;
      980    14568        /*
      981    14569                      Add relocation directive to store the address of the entref into
      982    14570                      the tra instruction for this transfer vector entry
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:65   
      983    14571        */
      984    14572    2         RELOC_CURR$->B$RELOC2 = ENTREF_RELOC;
      985    14573    2         RELOC_CURR$->B$RELOC2.DISP = OFFSET - ENTREF_RELOC_KEY.OFFSET;
      986    14574    2         RELOC_CURR$ = PINCRW( RELOC_CURR$, SIZEW(ENTREF_RELOC) );
      987    14575    2         OFFSET = OFFSET + 1;
      988    14576    2         RETURN;
      989    14577
      990    14578
      991    14579    2   WRITE_ERROR:
      992    14580    2         CALL M$MERC           ALTRET(MERC_ERROR);
      993    14581    3         DO WHILE( '0'B );
      994    14582    3   MERC_ERROR:
      995    14583    3             CALL VXE$MERC;
      996    14584    3             END;
      997    14585              %ERROR_IT;
      998    14588
      999    14589
     1000    14590    2   END ADD_VECTOR_ELEMENT;
     1001    14591
     1002    14592        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:66   
     1003    14593    1   EMPTY_SLOT: PROC( NUM_EMPTY_SLOTS );
     1004    14594
     1005    14595
     1006    14596    2   DCL NUM_EMPTY_SLOTS     SBIN;
     1007    14597
     1008    14598    2   DCL I                   SBIN;
     1009    14599
     1010    14600
     1011    14601    3         DO I = 1 TO NUM_EMPTY_SLOTS;
     1012    14602                                              /* If relocation record full, write it */
     1013    14603    4             IF RELOC_CURR$ = RELOC_END$ THEN DO;
     1014    14604    4                 CALL M$WRITE(FPT_WRITE) ALTRET(WRITE_ERROR);
     1015    14605    4                 ENTREF_RELOC_KEY.OFFSET = OFFSET;
     1016    14606    4                 RELOC_CURR$ = RELOC_START$;
     1017    14607    4                 END;
     1018    14608                                              /* Add empty slot relocation directive */
     1019    14609    3             RELOC_CURR$->B$RELOC2 = EMPTY_SLOT_RELOC;
     1020    14610    3             RELOC_CURR$->B$RELOC2.DISP = OFFSET - ENTREF_RELOC_KEY.OFFSET;
     1021    14611    3             RELOC_CURR$ = PINCRW( RELOC_CURR$, SIZEW(ENTREF_RELOC) );
     1022    14612    3             OFFSET = OFFSET + 1;
     1023    14613    3             END;
     1024    14614    2         RETURN;
     1025    14615
     1026    14616
     1027    14617    2   WRITE_ERROR:
     1028    14618    2         CALL M$MERC           ALTRET(MERC_ERROR);
     1029    14619    3         DO WHILE( '0'B );
     1030    14620    3   MERC_ERROR:
     1031    14621    3             CALL VXE$MERC;
     1032    14622    3             END;
     1033    14623              %ERROR_IT;
     1034    14626
     1035    14627
     1036    14628    2   END EMPTY_SLOT;
     1037    14629
     1038    14630        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:67   
     1039    14631    1   READ_RUN_UNIT: PROC( RUF$ , TYPE, MODE );
     1040    14632
     1041    14633
     1042    14634    2   DCL RUF$ PTR;
     1043    14635    2   DCL MODE UBIN;
     1044    14636    2   DCL TYPE UBIN;
     1045    14637
     1046    14638    2         CALL VXF$OPEN( RUF$, TYPE, MODE );
     1047    14639    2         IF TYPE = 1/*@RF*/ THEN
     1048    14640    2             READ_RU.V.DCB# = DCBNUM(M$RF);
     1049    14641    2         ELSE
     1050    14642    2             READ_RU.V.DCB# = DCBNUM(M$OF);
     1051    14643    2         VX_R_KEY_BUF.FORM0.COUNT = LENGTHC( VX_R_KEY_HEAD );
     1052    14644    2         VX_R_KEY_BUF.FORM0.CHARS = VX_R_KEY_HEAD ;
     1053    14645    2         READ_RU.BUF_ = VECTOR(B$HEAD);
     1054    14646    2         CALL M$READ(READ_RU) ALTRET(NO_HEAD);
     1055    14647    2         RU_DNAME_SIZE = B$HEAD.NRECSIZE;
     1056    14648              %ALLOCATE( PTR$=RU_DNAME$, TYPE=@SD_DS_1, SIZE=RU_DNAME_SIZE );
     1057    14655    2         SIZE = SIZE + RU_DNAME_SIZE;
     1058    14656    2         CALL VXK$KEY( 1/*@RF*/, 1, 0, 0 );
     1059    14657    2         READ_RU.BUF_.BUF$ = RU_DNAME$;
     1060    14658    2         READ_RU.BUF_.BOUND = (RU_DNAME_SIZE * 4) - 1;
     1061    14659    2         CALL M$READ(READ_RU) ALTRET(READ_ERROR);
     1062    14660    2         RU_EDEF_SIZE = B$HEAD.EPRECSIZE;
     1063    14661              %ALLOCATE( PTR$=RU_EDEF$, TYPE=@SD_DS_1, SIZE=RU_EDEF_SIZE );
     1064    14668    2         SIZE = SIZE + RU_EDEF_SIZE;
     1065    14669    2         CALL VXK$KEY( 1/*@RF*/, 4, 0, 0 );
     1066    14670    2         READ_RU.BUF_.BUF$ = RU_EDEF$;
     1067    14671    2         READ_RU.BUF_.BOUND = (RU_EDEF_SIZE * 4) - 1;
     1068    14672    2         CALL M$READ(READ_RU) ALTRET(READ_ERROR);
     1069    14673    2         RETURN;
     1070    14674
     1071    14675        /*E*  ERROR: VXU-E$TRANSVECT_READ_ERR_VX-C
     1072    14676              MESSAGE: Unable to read record from %FN during transfer vector processing.
     1073    14677        */
     1074    14678    2   READ_ERROR:
     1075    14679    2         VX_FPT_ERRMSG.V.DCB# = READ_RU.V.DCB#;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:68   
     1076    14680              %SCREAM(ERR#=E$TRANSVECT_READ_ERR_VX, MID="'U'", LEVEL=@E$F_VX );
     1077    14683
     1078    14684        /*E*  ERROR: VXU-E$TRANSVECT_NOHEAD_VX-C
     1079    14685        MESSAGE: Unable to read head record for %FN during transfer vector processing.
     1080    14686        */
     1081    14687    2   NO_HEAD:
     1082    14688    2         VX_FPT_ERRMSG.V.DCB# = READ_RU.V.DCB#;
     1083    14689              %SCREAM(ERR#=E$TRANSVECT_NOHEAD_VX, MID="'U'", LEVEL=@E$F_VX );
     1084    14692
     1085    14693    2   END READ_RUN_UNIT;
     1086    14694
     1087    14695
     1088    14696
     1089    14697    1   END VXU$TRANSVECT;

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:69   
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXU$TRANSVECT.

   Procedure VXU$TRANSVECT requires 2143 words for executable code.
   Procedure VXU$TRANSVECT requires 248 words of local(AUTO) storage.

    No errors detected in file VXU$TRANSVECT.:E05TSI    .

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:70   

 Object Unit name= VXU$TRANSVECT                              File name= VXU$TRANSVECT.:E05TOU
 UTS= JUL 30 '97 08:47:39.88 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2   Data  even  none   228    344  VXU$TRANSVECT
    3   DCB   even  none     0      0  M$OF
    4   DCB   even  none     0      0  M$RF
    5   DCB   even  none     0      0  M$LF
    6  RoData even  UTS     49     61  VXU$TRANSVECT
    7   Proc  even  none  2143   4137  VXU$TRANSVECT
    8  RoData even  none   130    202  VXU$TRANSVECT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     7      0   yes            yes      Std        0  VXU$TRANSVECT
     7      3                  yes      Std        0  VXU$INIT_VECTOR
     7    164                  yes      Std        0  VXU$BUILD_VECTOR
     7   1523                  yes      Std        0  VXU$FINISH_VECTOR
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:71   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VXA$GET
         yes           Std       3 VXW$WRITE
         yes           Std       4 VXE$ERROR
         yes           Std       4 VXK$KEY
         yes           Std       7 VXQ$SORT_V
         yes           Std       3 VXF$CLOSE
         yes           Std       3 VXF$FREE
         yes           Std       7 VXQ$SORT
         yes           Std       5 VXD$B2C
         yes           Std       0 VXE$MERC
 yes     yes           Std       3 VXF$OPEN
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_FPT_ERRMSG                         VX_R_KEY_BUF
     VX_OU_HEAD                            VX_ROOT$                              VX_RUF$
     VX_ERRORS                             VX_BIAS                               VX_M_FREE
     VX_M_ALL                              VX_M_BASE_PTR                         VX_O
     VX_EFIELD1                            VX_EFIELD2                            VX_R_KEY_HEAD
     VX_REC_BUF_SIZE                       VX_PASS2_REF                          VX_SPC
     M$OF                                  M$RF                                  M$LF
     B_VECTNIL
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:72   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:73   


        1        1        /*M* Module which builds the transfer vector for shared libraries */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*  DMC,DMR,PLM=6,IND=4,SDI=2,CTI=8,DCI=4,CSU=2,ECU=2,ENI=4,
        8        8              THI=0,DTI=0,IAD=0,CCC                          */
        9        9        VXU$TRANSVECT: PROC ;

      9  7 000000   000000 700200 xent  VXU$TRANSVE* TSX0  ! X66_AUTO_0
         7 000001   000370 000000                    ZERO    248,0
         7 000002   000005 710000 7                  TRA     s:13240

       10       10        %INCLUDE VX_INC_C;
       11    10726        %INCLUDE CP_6_SUBS;
       12    11266        %VX$NODE;

             11278    1   /*******************************************************************************
             11279    1   *                                                                              *
             11280    1   *                          VX$NODE                                                *
             11281    1   *                                                                              *
             11282    1   *******************************************************************************/

             11298    1   DCL 1 VX$NODE      ALIGNED    BASED,
             11299    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             11300    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             11301    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             11302    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             11303    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             11304                              to list of file nodes for this node            */
             11305    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             11306    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             11306                  /* Head pointer to shared library list */
             11307    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             11307                  /* Head pointer to list of shared libraries
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:74   
             11308                                          which have been mapped to included libraries */
             11309    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             11310    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             11311    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             11312    1         2 ADDR_START REDEF  ADDR_START_A,
             11313    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             11314    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             11315    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             11316    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             11317    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             11318    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             11319    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             11320    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             11321    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             11322    1         2 START_PAGE# REDEF START_PAGE#_A,
             11323    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             11324    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             11325    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             11326    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             11327    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             11328    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             11329    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             11330    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             11331    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             11331                  /* Starting pointer for common sections for this node */
             11332    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             11332                  /* Stopping pointer for common sections for this node */
             11333    1         2 L_START,
             11334    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             11335    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             11336    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             11337    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             11338    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             11339    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             11340    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             11341    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             11342    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:75   
             11343    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             11344    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             11345    1         2 L_STOP,
             11346    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             11347    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             11348    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             11349    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             11350    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             11351    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             11352    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             11353    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             11354    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             11355    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             11356    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             11357    1         2 L_SIZE,
             11358    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             11359    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             11360    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             11361    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             11362    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             11363    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             11364    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             11365    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             11366    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             11367    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             11368    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             11369    1         2 L_PREV_SIZE,
             11370    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             11371    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             11372    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             11373    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             11374    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             11375    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             11376    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             11377    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             11378    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             11379    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:76   
             11380    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             11381    1         2 BIT_MAP                ALIGNED,
             11382    1           3 DATA                  ALIGNED,
             11383    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11384    1           3 RPROC                 ALIGNED,
             11385    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11386    1           3 ROS                   ALIGNED,
             11387    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11388    1         2 L_SC_START,
             11389    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             11390    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             11391    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             11392    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             11393    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             11394    1         2 L_SC_STOP,
             11395    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             11396    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             11397    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             11398    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             11399    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             11400    1         2 PROMOTE_HEAD,
             11401    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             11402    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             11403    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             11404    1         2 PROMOTE_TAIL,
             11405    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             11406    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             11407    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             11408    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             11409    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             11410    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             11411    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             11412    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       13    11416        %VX$SC;

             11429    1   /*******************************************************************************
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:77   
             11430    1   *                                                                              *
             11431    1   *                          VX$SC                                                 *
             11432    1   *                                                                              *
             11433    1   *******************************************************************************/

             11438    1   DCL 1 VX$SC BASED ALIGNED,
             11439    1         2 SEG UBIN(3) UNAL,
             11440                /*K*  SEG - The segment number of this section */
             11441    1         2 TYPE UBIN(6) UNAL,
             11442                /*K*  TYPE -
             11443                      Type code      Section type
             11444                      ---------      ------------
             11445                          0          Data control section with write access.
             11446                          1          Procedure control section.
             11447                          2          Unlabeled common, name pointer must be zero.
             11448                          3          Labeled common, with mandatory name pointer.
             11449                                     This is for labeled common which must be
             11450                                     in the root.
             11451                          4          Labeled common, with mandatory name pointer.
             11452                                     This is for labeled common which need not
             11453                                     be in the root.
             11454                          5          DCB, word 1 is name pointer.
             11455                          6          Data control section with read only access,
             11456                                     word 1 = 0 or name pointer.      */
             11457    1         2 EMPTY BIT(1) UNAL,
             11458                /*K*  EMPTY is the empty bit.  This bit is set if the control
             11459                      section is of size zero.  */
             11460    1         2 ATTR UNAL,
             11461    1           3 INT  UBIN(2) UNAL,
             11462                  /*K*  INT is the Section initialization.  */
             11463    1           3 SEGMENT BIT(1) UNAL,
             11464                  /*K* SEGMENT is set if the Section is defined in a data
             11465                       segment.  */
             11466    1           3 ALL BIT(1) UNAL,
             11467                  /*K*  ALL is set if the Section is allocated.  */
             11468    1           3 PRE_DCB BIT(1) UNAL,
             11469                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:78   
             11470    1           3 MES_INIT BIT(1) UNAL,
             11471    1           3 ALIGN UBIN(2) UNAL,
             11472                  /*K*  ALIGN is the Section alignment.  */
             11473    1         2 ADDRESS UBIN HALF UNAL,
             11474                /*K*  ADDRESS is the address within the Instruction Segment of
             11475                      the entry point of the external procedure.  */
             11476    1         2 NAME_DISP SBIN HALF UNAL,
             11477                /*K*  NAME_DISP is the Name index.  */
             11478    1         2 SIZE UBIN HALF UNAL,
             11479                /*K*  SIZE is the size, in words, of the section.  */
             11480    1         2 NODE# UBIN HALF UNAL,
             11481                /*K*  NODE# is the Node number of section.  */
             11482    1         2 COM_LINK UBIN HALF UNAL;
             11483                /*K*  COM_LINK is used internally by linker to link common sections */

             11493    1   /*******************************************************************************
             11494    1   *                                                                              *
             11495    1   *                          VX$SECT                                                *
             11496    1   *                                                                              *
             11497    1   *******************************************************************************/

             11502    1   DCL 1 VX$SECT BASED ALIGNED,
             11503    1         2 TYPE UBIN BYTE UNAL,
             11504                /*K*  TYPE -
             11505                      Type code      Section type
             11506                      ---------      ------------
             11507                          0          Data control section with write access.
             11508                          1          Procedure control section.
             11509                          2          Unlabeled common, name pointer must be zero.
             11510                          3          Labeled common, with mandatory name pointer.
             11511                                     This is for labeled common which must be
             11512                                     in the root.
             11513                          4          Labeled common, with mandatory name pointer.
             11514                                     This is for labeled common which need not
             11515                                     be in the root.
             11516                          5          DCB, word 1 is name pointer.
             11517                          6          Data control section with read only access,
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:79   
             11518                                     word 1 = 0 or name pointer.
             11519                          7          Constant labeled common, with mandatory name pointer.
             11520                                     This is for labeled common which must be
             11521                                     in the root.
             11522                          8          Constant labeled common, with mandatory name pointer.
             11523                                     This is for labeled common which need not
             11524                                     be in the root.                        */
             11525    1         2 * BIT(1),
             11526                /*K*  * is reserved for future use and must be zero. */
             11527    1         2 INITZERO BIT(1),
             11528                /*K*  INITZERO - if 1, initialize with zero.  */
             11529    1         2 INITUTS BIT(1),
             11530                /*K*  INITUTS - if 1, initialize with UTS.  */
             11531    1         2 SEGMENT BIT(1),
             11532                /*K*  SEGMENT - if 1, specifies that this section is
             11533                                to be placed in the segment specified by
             11534                                SEG_NPOINTER.  */
             11535    1         2 * BIT(3),
             11536                /*K*  * is reserved for future use and must be zero. */
             11537    1         2 BOUND UBIN(2) UNAL,
             11538                /*K*  BOUND - bits 6-7 - defines starting location.
             11539                              00 - starts on even word
             11540                              01 - starts on odd word
             11541                              10 - starts on multiple of 8
             11542                              11 - starts on page boundary     */
             11543    1         2 SIZE UBIN HALF UNAL,
             11544                /*K*  SIZE is the size, in words, of the section.  */
             11545    1         2 NPOINTER SBIN HALF UNAL,
             11546                /*K*  NPOINTER is the word displacement into the name record
             11547                      (TYPE 1) locating the name of this section.  If the
             11548                      field is negative, the section has no name.  */
             11549    1         2 MBZ UBIN HALF UNAL,
             11550                /*K*  MBZ is reserved for future expansion and must be zero. */
             11551    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11552                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11553                      Section.  The name must be a valid segment name
             11554                      recognized by the linker.  */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:80   
             11555    1         2 G66 REDEF MBZ,
             11556                /*K*  G66 is not used on CP-6. */
             11557    1           3 * BIT(9),
             11558    1           3 NSAB BIT(9);
       14    11561        %VX$LLIST_SC;

             11573    1   /*******************************************************************************
             11574    1   *                                                                              *
             11575    1   *                          VX$LLIST_SC                                            *
             11576    1   *                                                                              *
             11577    1   *******************************************************************************/

             11582    1   DCL 1 NAME               BASED     ALIGNED,
             11583    1         2 LINK$             PTR,
             11584    1         2 BASE$             PTR,
             11585    1         2 COUNT             UBIN(36);
       15    11588        %VX$VECTOR_LST;

             11601    1   /*******************************************************************************
             11602    1   *                                                                              *
             11603    1   *                          VX$VECTOR_LST                                          *
             11604    1   *                                                                              *
             11605    1   *******************************************************************************/

             11609    1   DCL 1 VX$VECTOR_LST ALIGNED BASED,
             11610    1         2 SIZEW1 UBIN HALF UNAL,
             11611    1         2 SIZEW2 UBIN HALF UNAL;
       16    11613        %VX$LST;

             11626    1   /*******************************************************************************
             11627    1   *                                                                              *
             11628    1   *                          VX$LST                                                 *
             11629    1   *                                                                              *
             11630    1   *******************************************************************************/

             11635    1   DCL 1 VX$LST                          ALIGNED BASED,
             11636    1         2 LINK$        PTR,               /* Link to next item                  */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:81   
             11637    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             11638    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             11639    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             11640    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             11641    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             11642    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             11643    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             11644    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             11645    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             11646    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             11647    1         2 P,
             11648    1           3 NAME_       ALIGNED,
             11649    1             4 BOUND      UBIN(20)  UNAL,
             11650    1             4 FLAGSV     UBIN(11)  UNAL,
             11651    1             4 *          BIT(5)    UNAL,
             11652    1             4 NAME$      PTR,
             11653    1           3 ACCT_       ALIGNED,
             11654    1             4 BOUND      UBIN(20)  UNAL,
             11655    1             4 FLAGSV     UBIN(11)  UNAL,
             11656    1             4 *          BIT(5)    UNAL,
             11657    1             4 ACCT$      PTR,
             11658    1           3 PASS_       ALIGNED,
             11659    1             4 BOUND      UBIN(20)  UNAL,
             11660    1             4 FLAGSV     UBIN(11)  UNAL,
             11661    1             4 *          BIT(5)    UNAL,
             11662    1             4 PASS$      PTR,
             11663    1           3 SN_         ALIGNED,
             11664    1             4 BOUND      UBIN(20)  UNAL,
             11665    1             4 FLAGSV     UBIN(11)  UNAL,
             11666    1             4 *          BIT(5)    UNAL,
             11667    1             4 SN$        PTR,
             11668    1           3 WSN_        ALIGNED,
             11669    1             4 BOUND      UBIN(20)  UNAL,
             11670    1             4 FLAGSV     UBIN(11)  UNAL,
             11671    1             4 *          BIT(5)    UNAL,
             11672    1             4 WSN$       PTR,
             11673    1           3 B           ALIGNED,
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:82   
             11674    1             4 RES        BIT(1)    UNAL,
             11675    1             4 ASN        BIT(1)    UNAL,
             11676    1             4 ACCT       BIT(1)    UNAL,
             11677    1             4 *          BIT(33)   UNAL,
             11678    1           3 RES         CHAR(4)   ALIGNED,
             11679    1           3 ASN         UBIN(36)  ALIGNED;
       17    11682        %VXD$TMPLT;

             11695    1   /*******************************************************************************
             11696    1   *                                                                              *
             11697    1   *                          VXD$TMPLT                                              *
             11698    1   *                                                                              *
             11699    1   *******************************************************************************/

             11703        /*
             11704                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             11705                  ENTDEFs, SYMDEFs and SEGDEFs.
             11706        */
             11708    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             11709    1         2 VALUE SBIN UNAL,
             11710                /*K*  VALUE is the value if this entry is a constant.  */
             11711    1         2 AD REDEF VALUE,
             11712                /*K*  AD is the address if this entry is not constant.  */
             11713    1           3 LFLAGS UNAL,
             11714                  /*K*  LFLAGS is the field reserved for loader to flag load
             11715                        time attributes of the definition and must be zero
             11716                        in the object unit. */
             11717    1             4 SOURCE UBIN(3) UNAL,
             11718                    /*K*  SOURCE - Source of this DEF */
             11719    1             4 DEFINED BIT(1) UNAL,
             11720                    /*K*  DEFINED - Set if this DEF defined */
             11721    1             4 MULTIPLE BIT(1) UNAL,
             11722                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11723    1             4 USED BIT(1) UNAL,
             11724                    /*K*  USED - Set if this DEF is used. */
             11725    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             11726                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:83   
             11727                        than 2048 (RU).  */
             11728    1           3 SECTNUM UBIN(11) UNAL,
             11729                  /*K*  SECTNUM contains an entry number into the section
             11730                        table (TYPE 3).  */
             11731    1           3 ISADDR UBIN HALF UNAL,
             11732                  /*K*  ISADDR - Is Address (RU)  */
             11733    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             11734                  /*K*  OFFSET is the word offset from the origin of the section. */
             11735    1         2 NPOINTER SBIN HALF UNAL,
             11736                /*K*  NPOINTER is a word displacement into the name record
             11737                      (TYPE 1) locating the name (of this entry). */
             11738    1         2 CONSTNT BIT(1) UNAL,
             11739                /*K*  CONSTNT is a flag bit to determine the interpretation
             11740                      of word 0.
             11741                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11742                                    SECTNUM, and ISADDR or OFFSET.
             11743                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11744    1         2 LFLAGS UNAL,
             11745                /*K*  LFLAGS is the field reserved for loader to flag load
             11746                      time attributes and must be zero in the object unit. */
             11747    1           3 MULTIPLE BIT(1) UNAL,
             11748                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11749    1           3 USED BIT(1) UNAL,
             11750                  /*K*  USED - Set if this DEF is used. */
             11751    1           3 SOURCE UBIN(4) UNAL,
             11752                  /*K*  SOURCE - Source of this DEF */
             11753    1           3 IS_DCB BIT(1) UNAL,
             11754                  /*K* IS_DCB - Set if this is a DCB */
             11755    1           3 * BIT(10) UNAL,
             11756                  /*K*  * is reserved for future use and must be zero.  */
             11757    1         2 PROTECTION REDEF LFLAGS,
             11758                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             11759    1           3 TYPE UBIN(5) UNAL,
             11760                  /*K*  TYPE is the Protection type.  */
             11761    1           3 * UBIN(12) UNAL;
             11762                  /*K*  * is reserved for future use and must be zero.  */
       18    11777        %TMPLT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:84   

             11789    1   /*******************************************************************************
             11790    1   *                                                                              *
             11791    1   *                          TMPLT                                                 *
             11792    1   *                                                                              *
             11793    1   *******************************************************************************/

             11798    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11799    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11800    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             11801    1         2 W       REDEF     A,            /* By name                            */
             11802    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11803    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       19    11806        %BANNER( ARG=FPTS );

             11814    1   /*******************************************************************************
             11815    1   *                                                                              *
             11816    1   *                          FPTS                                                 *
             11817    1   *                                                                              *
             11818    1   *******************************************************************************/

       20    11822        %FPT_OPEN(
       21    11823                  ACS=DIRECT,
       22    11824                  ASN=FILE,
       23    11825                  DCB=M$LF,
       24    11826                  FUN=CREATE,
       25    11827                  NAME=VLP_NAME,
       26    11828                  ORG=KEYED);
       27    11937        %FPT_CLOSE( DCB=M$LF, DISP=SAVE );
       28    11979        %FPT_DELREC( DCB=M$RF, KEY=VX_R_KEY_BUF );
       29    11998        %FPT_READ ( FPTN=READ_RU, DCB=M$OF, KEY=VX_R_KEY_BUF, KEYS=YES );
       30    12037        %FPT_WRITE( FPTN=WRITE_RU, DCB=M$RF, KEY=VX_R_KEY_BUF );
       31    12068        %VLP_NAME( NAME='***************Transfer_vector' );
       32    12095        %FPT_WRITE( DCB=M$LF, KEY=ENTREF_RELOC_KEY );
       33    12126        %SET LISTMAC='1'B;
       34    12127        %SET LISTSUB='1'B;
       35    12128        %SET LISTEXP='1'B;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:85   
       36    12129        %BANNER( ARG=DCBS);
             12130        %LSET LISTDIR='0'B;

             12137    1   /*******************************************************************************
             12138    1   *                                                                              *
             12139    1   *                          DCBS                                                 *
             12140    1   *                                                                              *
             12141    1   *******************************************************************************/

       37    12145    1   DCL M$OF DCB;
       38    12146    1   DCL M$RF DCB;
       39    12147    1   DCL M$LF DCB;
       40    12148        %BANNER( ARG=B$HEAD );
             12149        %LSET LISTDIR='0'B;

             12156    1   /*******************************************************************************
             12157    1   *                                                                              *
             12158    1   *                          B$HEAD                                                 *
             12159    1   *                                                                              *
             12160    1   *******************************************************************************/

       41    12164        %B$HEAD( STCLASS=" ", SUBS=NO );
             12165    1   DCL 1 B$HEAD ALIGNED,
             12166    1         2 PRIV BIT(36),
             12167                /*K*  PRIV is a 36 bit field containing privilege flags.  */
             12168    1         2 VPPGS UBIN(14) UNAL,
             12169                /*K*  VPPGS is the number of virtual pages of procedure
             12170                      required for the longest overlay path.
             12171                      (256 words/page if FEP, 1024 words/page if Host)  */
             12172    1         2 * UBIN(2) UNAL,
             12173                /*K*  * is reserved for future use and must be zero.  */
             12174    1         2 RPROC UBIN(20) UNAL,
             12175                /*K*  RPROC is the size, in words, of the procedure for the root.  */
             12176    1         2 VDPGS UBIN(14) UNAL,
             12177                /*K*  VDPGS is the number of virtual pages of data required
             12178                      for the longest overlay path.
             12179                      (256 words/page if FEP, 1024 words/page if Host)
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:86   
             12180                      This includes both library and user defined data.
             12181                       */
             12182    1         2 * UBIN(2) UNAL,
             12183                /*K*  * is reserved for future use and must be zero.  */
             12184    1         2 RDATA UBIN(20) UNAL,
             12185                /*K*  RDATA is the size, in words of the data for the root.
             12186                      This includes both library and user defined data.
             12187                      If this is a host run unit, all data records will be
             12188                      included in the run unit.
             12189                      If this is a FEP run unit,
             12190                      no library data will be included in the run unit itself.
             12191                      The ISADDR field of B$RUKEY for the first user data record
             12192                      may be determined by calculating the FEP word address of
             12193                      B$HEAD.BIAS rounded to the next lower 2048 FEP word boundry.
             12194                      (2048 FEP words is the maximum size of run unit records
             12195                      for FEP run units.)  The data in this record below
             12196                      BIAS will be padded with zeros.
             12197                      The word size of data contained in the FEP run unit
             12198                      may be calculated by subtracting the ISADDR value as
             12199                      calculated for the first data record from the word
             12200                      address of the last word of user data.  The last
             12201                      word of user data is the sum of the default FPRG
             12202                      bias (%GM_ISR1_BASE - EQU is in file GM_LCP6_E) and
             12203                      the total data size (B$HEAD.RDATA).
             12204                      */
             12205    1         2 SEV UBIN BYTE UNAL,
             12206                /*K*  SEV is the maximum severity level of the object units
             12207                      making up the run unit.  */
             12208    1         2 * UBIN(7) UNAL,
             12209                /*K*  * is reserved for future use and must be zero.  */
             12210    1         2 START UBIN(20) UNAL,
             12211                /*K*  START is the address within the instruction segment at
             12212                      which execution will start.  */
             12213    1         2 UDCBNUM UBIN HALF UNAL,
             12214                /*K*  UDCBNUM is the number of DCBs in the Read-Only segment
             12215                      as generated by LINK.   */
             12216    1         2 DCBRES UBIN HALF UNAL,
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:87   
             12217                /*K*  DCBRES is the number of pointers to DCBs as supplied by
             12218                      LINK.   */
             12219    1         2 TREEDISP UBIN HALF UNAL,
             12220                /*K*  TREEDISP is the displacement in words from the start of
             12221                      the variable portion of the Read-Only Segment locating
             12222                      the tree table.   */
             12223    1         2 TCBSIZE UBIN HALF UNAL,
             12224                /*K*  TCBSIZE specifies the number of frames of the Task Control Block;
             12225                      if the size is 0, then a two frame Task Control Block will be
             12226                      built by STEP.   */
             12227    1         2 PRECSIZE UBIN HALF UNAL,
             12228                /*K*  PRECSIZ is the maximum size of any program record
             12229                      in the run unit; words if Host, double words if FEP.
             12230                      */
             12231    1         2 NRECSIZE UBIN HALF UNAL,
             12232                /*K*  NRECSIZ is the maximum size of External Name records in
             12233                      the run unit.   */
             12234    1         2 EPRECSIZE UBIN HALF UNAL,
             12235                /*K*  EPRECSIZE is the maximum size of External Procedure
             12236                      Definition Records in the run unit.   */
             12237    1         2 EDRECSIZE UBIN HALF UNAL,
             12238                /*K*  EDRECSIZE is the maximum size of External Data Definition
             12239                      Records in the run unit.    */
             12240    1         2 SDRECSIZE UBIN HALF UNAL,
             12241                /*K*  SDRECSIZE is the maximum size of External Segment
             12242                      Definition Records in the run unit.   */
             12243    1         2 ROSIZE UBIN HALF UNAL,
             12244                /*K*  ROSIZE is the size of the Read Only Segment Record.  */
             12245    1         2 VERSION# UBIN BYTE UNAL,
             12246                /*K*  VERSION# is the LINK version number.  */
             12247    1         2 MAP_BITS_A(0:2) UNAL,
             12248                /*K*  MAP_BITS_A are used by the linker to produce MAP.  */
             12249    1           3 MULTIPLE BIT(1) UNAL,
             12250                  /*K*  MULTIPLE is set if a multiply defined symbol exists.  */
             12251    1           3 CON BIT(1) UNAL,
             12252                  /*K*  CON is set if a Constant symbol is defined.  */
             12253    1           3 PRIMARY BIT(1) UNAL,
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:88   
             12254                  /*K*  PRIMARY is set if an unresolved primary reference exists.  */
             12255    1           3 SECONDARY BIT(1) UNAL,
             12256                  /*K*  SECONDARY is set if an unresolved secondary reference
             12257                        exists.  */
             12258    1         2 SECTABLESIZE UBIN(8) UNAL,
             12259                /*K*  SECTABLESIZE is the size in words of the record which
             12260                      contains the start location and size of all sections
             12261                      (for BIAS by OU for FEP)   */
             12262    1         2 NSTDINVOC BIT(1) UNAL,
             12263                /*K*  NSTDINVOC indicates that the RU will can tolerate invoking
             12264                      in nonstandard form.   */
             12265    1         2 REMOVE_ENTDEF BIT(1) UNAL,
             12266                /*K*  REMOVE_ENTDEF is set if ENTDEFs not in the transfer
             12267                      vector have been removed from the shared library.  */
             12268    1         2 REMOVE_SYMDEF BIT(1) UNAL,
             12269                /*K*  REMOVE_SYMDEF is set if SYMDEFs not in the transfer
             12270                      vector have been removed from the shared library.  */
             12271    1         2 STATS BIT(1) UNAL,
             12272                /*K*  STATS is set if Statistics are being collected on
             12273                      this processor.  */
             12274    1         2 LAUTO BIT(1) UNAL,
             12275                /*K*  LAUTO is set for a Fep run unit if user auto is to be in
             12276                a small segment, thereby freeing up a large one for other purposes. */
             12277    1         2 * BIT(2) UNAL,
             12278                /*K*  * is reserved for future use and must be zero.  */
             12279    1         2 DATA_SEG (0:5),
             12280                /*K*  DATA_SEG defines the initialized data segment in the RU.  */
             12281    1           3 SIZ UBIN HALF UNAL,
             12282                  /*K* SIZ is the word size of the initialized data segment.  */
             12283    1           3 * UBIN(9) UNAL,
             12284                  /*K*  * is reserved for future use and must be zero.  */
             12285    1           3 PROTECTION UBIN(9) UNAL,
             12286                  /*K*  PROTECTION is the initialized data segment
             12287                        protection.   */
             12288    1         2 LOCK(0:71) BIT(1) UNAL,
             12289                /*K*  LOCK is the Lock for restricted processor.  */
             12290    1         2 FLAVOR UBIN BYTE UNAL,
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:89   
             12291                /*K*  FLAVOR is the flavor of the run unit.  The RU_FLAVORS
             12292                      macro gives the legal values for FLAVOR.  */
             12293    1         2 S BIT(1) UNAL,
             12294                /*K*  S - S = 1 if the run unit is Shareable  */
             12295    1         2 LIB BIT(1) UNAL,
             12296                /*K*  LIB - LIB = 1 if the run unit is a Shared Library  */
             12297    1         2 ASL BIT(1) UNAL,
             12298                /*K*  ASL - ASL = 1 if the run unit is an Alternate Shared
             12299                      Library.   */
             12300    1         2 CMDPROC BIT(1) UNAL,
             12301                /*K*  CMDPROC - CMDPROC = 1 is the run unit is a Command Processor. */
             12302    1         2 DEBUGGER BIT(1) UNAL,
             12303                /*K*  DEBUGGER - DEBUGGER = 1 if the run unit is a Debugger. */
             12304    1         2 OVRL BIT(1) UNAL,
             12305                /*K*  OVRL -  OVRL = 1 if the run unit is overlaid.   */
             12306    1         2 PROCACC BIT(1) UNAL,
             12307                /*K*  PROCACC - If PROCACC = 1,  if the run unit resides in
             12308                      :SYS, it should be charged as processor, not user.  */
             12309    1         2 NOCHGPMEM BIT(1) UNAL,
             12310                /*K*  NOCHGPMEM - If NOCHGPMEM = 1, if the run unit resides in
             12311                      :SYS, the user should not be charged for procedures.  */
             12312    1         2 PROCSURCHG BIT(1) UNAL,
             12313                /*K*  PROCSURCHG - If PROCSURCHG = 1, Surcharge accountings
             12314                      should be applied.  */
             12315    1         2 RESTPROC BIT(1) UNAL,
             12316                /*K*  RESTPROC - If RESTPROC = 1, this is a restricted
             12317                      processor and should be verified against the user's key.  */
             12318    1         2 STRONG_LOCK BIT(1) UNAL,
             12319                /*K*  STRONG_LOCK - If STRONG_LOCK = 1, the restricted
             12320                      processor has a strong lock.  If STRONG_LOCK = 0, the
             12321                      restricted processor has a weak lock.   */
             12322    1         2 * UBIN(16) UNAL,
             12323                /*K*  * is reserved for future use and must be zero. */
             12324    1         2 PSEUDO_COUNT UBIN BYTE UNAL,
             12325                /*K*  PSEUDO_COUNT - If PSEUDO_COUNT > 0, then a pseudo resource
             12326                      is required to execute this run-unit.  */
             12327    1         2 * UBIN(7) UNAL,
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:90   
             12328                /*K*  * is reserved for future use and must be zero.  */
             12329    1         2 BIAS UBIN(20) UNAL,
             12330                /*K*  BIAS is the address within the instruction segment of
             12331                      the beginning of the root data.  */
             12332    1         2 PSEUDO_TEXT CHAR(8),
             12333                /*K*  PSEUDO_TEXT - contains the text of the pseudo resource
             12334                      to acquire when the run-unit is executed.  */
             12335    1         2 * (0:1) UBIN WORD UNAL,
             12336                /*K*  * is reserved for future use and must be zero.  */
             12337    1         2 LIBNAME,
             12338                /*K* LIBNAME gives the name, if any, of the shared library to
             12339                     be associated.  Each name resides in a fixed 8-word field.
             12340                     The first byte contains the character count of the name
             12341                     followed by the name itself.   */
             12342    1           3 CNT UBIN BYTE UNAL,
             12343                  /*K* CNT contains the character count of the name of the
             12344                       shared library.  */
             12345    1           3 TXT CHAR(31) UNAL,
             12346                  /*K*  TXT contains the name itself of the shared library.  */
             12347    1         2 ASLNAME,
             12348                /*K*  ASLNAME gives the name, if any, of the alternate shared
             12349                      library to be associated.  Each name resides in a fixed
             12350                      8-word field.  The first byte contains the character
             12351                      count of the name followed by the name itself.   */
             12352    1           3 CNT UBIN BYTE UNAL,
             12353                  /*K*  CNT contains the character count of the name of
             12354                        the alternate shared library.  */
             12355    1           3 TXT CHAR(31) UNAL;
             12356                  /*K*  TXT contains the name itself of the alternate
             12357                        shared library.  */
             12358        %IF '0'B;
             12362        %ENDIF;
       42    12364        %BANNER(ARG="B$EDEF and ENTDEF" );
             12365        %LSET LISTDIR='0'B;

             12372    1   /*******************************************************************************
             12373    1   *                                                                              *
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:91   
             12374    1   *                          B$EDEF and ENTDEF                                      *
             12375    1   *                                                                              *
             12376    1   *******************************************************************************/

       43    12380        %B$EDEF;
             12381    1   DCL 1 B$EDEF BASED ALIGNED,
             12382    1         2 LFLAGS UNAL,
             12383                /*K*  LFLAGS is the field reserved for loader to flag load
             12384                      time attributes of the definition and must be zero
             12385                      in the object unit. */
             12386    1           3 SOURCE UBIN(3) UNAL,
             12387                  /*K*  SOURCE - Source of this ENTDEF */
             12388    1           3 DEFINED BIT(1)  UNAL,
             12389                  /*K*  DEFINED - Set if this ENTDEF defined */
             12390    1           3 MULTIPLE BIT(1) UNAL,
             12391                  /*K*  MULTIPLE - Set if this ENTDEF is multiply defined. */
             12392    1           3 USED BIT(1) UNAL,
             12393                  /*K*  USED - Set if this ENTDEF is used. */
             12394    1           3 * BIT(2) UNAL,
             12395                  /*K*  * - Unused and must be zero. */
             12396    1           3 FAULTAGS BIT(1) UNAL,
             12397                  /*K*  FAULTAGS - Internal calls fault tags flag. */
             12398    1         2 OU UNAL,
             12399    1           3 SECTNUM UBIN BYTE UNAL,
             12400                  /*K*  SECTNUM contains an entry number into the section
             12401                        table (TYPE 3).  */
             12402    1           3 OFFSET UBIN HALF UNAL,
             12403                  /*K*  OFFSET is the word offset from the origin of the section. */
             12404    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             12405                /*K*  ISADDR - Is Address (RU)  */
             12406    1         2 NPOINTER SBIN HALF UNAL,
             12407                /*K*  NPOINTER is a word displacement into the name record
             12408                      (TYPE 1) locating the name (of this entry). */
             12409    1         2 PRI BIT(1) UNAL,
             12410                /*K*  PRI is a one-bit flag denoting primary entry
             12411                      definition.
             12412                         PRI = 1, primary name (object unit name)
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:92   
             12413                             = 0, not primary name                 */
             12414    1         2 ALT BIT(1) UNAL,
             12415                /*K*  ALT is a one-bit flag denoting permissible alternate
             12416                      return.
             12417                         ALT = 1, alternate return allowed
             12418                             = 0, alternate return not allowed        */
             12419    1         2 CHECK BIT(1) UNAL,
             12420                /*K*  CHECK is a one-bit flag denoting arguments/parameter
             12421                      check and alternate return specification check.
             12422                         CHECK = 0, do not check for matching
             12423                                    arguments/parameters and alternate
             12424                                    return specification check.
             12425                               = 1, check for matching arguments/parameters
             12426                                    and alternate return specification.  */
             12427    1         2 CST UBIN(4) UNAL,
             12428                /*K*  CST is a 4-bit field denoting calling sequence type.
             12429                         CST =  0, Standard CP-6 Callable Procedure
             12430                         CST =  1, Nonstandard Call Type
             12431                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             12432                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             12433                         CST =  4, Standard CP-6 Function Procedure; a
             12434                                   variable table entry will be present to
             12435                                   define the attributes of the function
             12436                         CST =  5, Same as 0, except USE, AVOID, or
             12437                                   MATERIALIZE attributes specified
             12438                         CST =  7, Same as 2, except USE, AVOID, or
             12439                                   MATERIALIZE attributes specified
             12440                         CST =  8, Same as 3, except USE, AVOID, or
             12441                                   MATERIALIZE attributes specified
             12442                         CST =  9, Same as 4, except USE, AVOID, or
             12443                                   MATERIALIZE attributes specified
             12444                         CST = 13, GCOS domain, save
             12445                         CST = 14, GCOS domain, no save
             12446                         CST = 15, Non-Callable Procedure.          */
             12447    1         2 NPARAM UBIN(11) UNAL;
             12448                /*K*  NPARAM is an 11-bit field denoting number of parameters. */
       44    12450        %B$EDEF( NAME=ENTDEF, STCLASS=" " );
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:93   
             12451    1   DCL 1 ENTDEF ALIGNED,
             12452    1         2 LFLAGS UNAL,
             12453                /*K*  LFLAGS is the field reserved for loader to flag load
             12454                      time attributes of the definition and must be zero
             12455                      in the object unit. */
             12456    1           3 SOURCE UBIN(3) UNAL,
             12457                  /*K*  SOURCE - Source of this ENTDEF */
             12458    1           3 DEFINED BIT(1)  UNAL,
             12459                  /*K*  DEFINED - Set if this ENTDEF defined */
             12460    1           3 MULTIPLE BIT(1) UNAL,
             12461                  /*K*  MULTIPLE - Set if this ENTDEF is multiply defined. */
             12462    1           3 USED BIT(1) UNAL,
             12463                  /*K*  USED - Set if this ENTDEF is used. */
             12464    1           3 * BIT(2) UNAL,
             12465                  /*K*  * - Unused and must be zero. */
             12466    1           3 FAULTAGS BIT(1) UNAL,
             12467                  /*K*  FAULTAGS - Internal calls fault tags flag. */
             12468    1         2 OU UNAL,
             12469    1           3 SECTNUM UBIN BYTE UNAL,
             12470                  /*K*  SECTNUM contains an entry number into the section
             12471                        table (TYPE 3).  */
             12472    1           3 OFFSET UBIN HALF UNAL,
             12473                  /*K*  OFFSET is the word offset from the origin of the section. */
             12474    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             12475                /*K*  ISADDR - Is Address (RU)  */
             12476    1         2 NPOINTER SBIN HALF UNAL,
             12477                /*K*  NPOINTER is a word displacement into the name record
             12478                      (TYPE 1) locating the name (of this entry). */
             12479    1         2 PRI BIT(1) UNAL,
             12480                /*K*  PRI is a one-bit flag denoting primary entry
             12481                      definition.
             12482                         PRI = 1, primary name (object unit name)
             12483                             = 0, not primary name                 */
             12484    1         2 ALT BIT(1) UNAL,
             12485                /*K*  ALT is a one-bit flag denoting permissible alternate
             12486                      return.
             12487                         ALT = 1, alternate return allowed
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:94   
             12488                             = 0, alternate return not allowed        */
             12489    1         2 CHECK BIT(1) UNAL,
             12490                /*K*  CHECK is a one-bit flag denoting arguments/parameter
             12491                      check and alternate return specification check.
             12492                         CHECK = 0, do not check for matching
             12493                                    arguments/parameters and alternate
             12494                                    return specification check.
             12495                               = 1, check for matching arguments/parameters
             12496                                    and alternate return specification.  */
             12497    1         2 CST UBIN(4) UNAL,
             12498                /*K*  CST is a 4-bit field denoting calling sequence type.
             12499                         CST =  0, Standard CP-6 Callable Procedure
             12500                         CST =  1, Nonstandard Call Type
             12501                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             12502                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             12503                         CST =  4, Standard CP-6 Function Procedure; a
             12504                                   variable table entry will be present to
             12505                                   define the attributes of the function
             12506                         CST =  5, Same as 0, except USE, AVOID, or
             12507                                   MATERIALIZE attributes specified
             12508                         CST =  7, Same as 2, except USE, AVOID, or
             12509                                   MATERIALIZE attributes specified
             12510                         CST =  8, Same as 3, except USE, AVOID, or
             12511                                   MATERIALIZE attributes specified
             12512                         CST =  9, Same as 4, except USE, AVOID, or
             12513                                   MATERIALIZE attributes specified
             12514                         CST = 13, GCOS domain, save
             12515                         CST = 14, GCOS domain, no save
             12516                         CST = 15, Non-Callable Procedure.          */
             12517    1         2 NPARAM UBIN(11) UNAL;
             12518                /*K*  NPARAM is an 11-bit field denoting number of parameters. */
       45    12520        %BANNER(ARG=B$DNAME);
             12521        %LSET LISTDIR='0'B;

             12528    1   /*******************************************************************************
             12529    1   *                                                                              *
             12530    1   *                          B$DNAME                                                *
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:95   
             12531    1   *                                                                              *
             12532    1   *******************************************************************************/

       46    12536        %B$DNAME;
             12537            %LSET STR='BASED        ';
             12538            %IF
             12539                '0'B;
             12541            %ELSE;
             12542                %LSET INIT=/*;
             12543            %ENDIF;
             12544    1   DCL 1 B$DNAME BASED ALIGNED,
             12545    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             12546                /*K*  COUNT is the number of characters in the name */
             12547            %IF
             12548                '0'B;
             12551            %ELSE;
             12552    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             12553            %ENDIF;
       47    12555        %BANNER( ARG="C$DNAME and DNAME" );
             12556        %LSET LISTDIR='0'B;

             12563    1   /*******************************************************************************
             12564    1   *                                                                              *
             12565    1   *                          C$DNAME and DNAME                                      *
             12566    1   *                                                                              *
             12567    1   *******************************************************************************/

       48    12571    1   DCL 1 C$DNAME BASED(NAME$) ALIGNED,
       49    12572    1         2 COUNT UBIN HALF UNAL,
       50    12573    1         2 TEXT CHAR(512) UNAL,
       51    12574    1         2 TXT(0:511) REDEF TEXT CHAR(1) UNAL;
       52    12575    1   DCL 1 DNAME  ALIGNED,
       53    12576    1         2 COUNT UBIN HALF UNAL,
       54    12577    1         2 TEXT CHAR(514) UNAL,
       55    12578    1         2 TXT(0:513) REDEF TEXT CHAR(1) UNAL;
       56    12579        %BANNER( ARG=SUBS );
             12580        %LSET LISTDIR='0'B;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:96   

             12587    1   /*******************************************************************************
             12588    1   *                                                                              *
             12589    1   *                          SUBS                                                 *
             12590    1   *                                                                              *
             12591    1   *******************************************************************************/

       57    12595        %B$RECORDSUBS;
             12596        %EQU TYPHEAD=0 ;
             12597        %EQU TYPDNAM=1 ;
             12598        %EQU TYPRNAM=2 ;
             12599        %EQU TYPSECT=3 ;
             12600        %EQU TYPEDEF=4 ;
             12601        %EQU TYPEREF=5 ;
             12602        %EQU TYPSDEF=6 ;
             12603        %EQU TYPSREF=7 ;
             12604        %EQU TYPSEGDEF=8 ;
             12605        %EQU TYPSEGREF=9 ;
             12606        %EQU TYPPROG=10 ;
             12607        %EQU SUBTYPPROG=0 ;
             12608        %EQU SUBTYPREL=1 ;
             12609        %EQU TYPLOGBLK=11 ;
             12610        %EQU TYPINTNTRY=12 ;
             12611        %EQU TYPEXST=13 ;
             12612        %EQU TYPVREBL=14 ;
             12613        %EQU TYPDBGNAM=15 ;
             12614        %EQU TYPLV1LB=16 ;
             12615        %EQU TYPLV1=17 ;
             12616        %EQU TYPDATASEG=18 ;
             12617        %EQU TYPRUM=20 ;
             12618        %EQU TYPBIRTH=21 ;
             12619        %EQU TYPPLOVER=22 ;
             12620        %EQU TYPCOMPID=23 ;
             12621        %EQU TYPROS=30 ;
       58    12623        %B$RELOCSUBS;
             12624        %EQU OPERSECT=1 ;
             12625        %EQU OPEREREF=2 ;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:97   
             12626        %EQU OPERSREF=3 ;
             12627        %EQU OPERCONST=4 ;
             12628        %EQU OPERSEGID=5 ;
             12629        %EQU OPERSEGREF=6 ;
             12630        %EQU OPERFREF=15 ;
             12631        %EQU FIELDLH=0 ;
             12632        %EQU FIELDRH=1 ;
             12633        %EQU FIELDSEGID=2 ;
             12634        %EQU FIELDY=3 ;
             12635        %EQU FIELDLAF=3 ;
             12636        %EQU FIELDWORD=4 ;
             12637        %EQU EVALOPIGNORE=0 ;                   /* Value not present, r = E(operand)  */
             12638        %EQU EVALOPADD=1 ;                      /* Add: r = E(operand) + Value  */
             12639        %EQU EVALOPSUB=2 ;                      /* Subtract: r = E(operand) - Value */
             12640        %EQU EVALOPMULT=3 ;                     /* Multiply: r = E(operand) * Value */
             12641        %EQU EVALOPDIV=4 ;                      /* Divide:   r = E(operand) / Value */
             12642        %EQU EVALOPSHFTR=5 ;               /* Shift right: r = E(operand) SR by Value */
             12643        %EQU EVALOPSHFTL=6 ;               /* Shift left:  r = E(operand) SL by Value */
             12644        %EQU EVALOPRPT=7 ;       /* Operand is a repeat count. Repeat Value n times*/
             12645        %EQU EVALOPFREF=8 ;
             12646        %EQU RELOCOPADD=1 ;
             12647        %EQU RELOCOPSUB=2 ;
             12648        %EQU RELOCOPMULT=3 ;
             12649        %EQU RELOCOPDIV=4 ;
             12650        %EQU RELOCOPSTORER=14 ;
             12651        %EQU RELOCOPSTOREL=15 ;
       59    12653        %B$SECTIONSUBS;
             12654        %EQU DATASECTION=0 ;
             12655        %EQU CODESECTION=1 ;
             12656        %EQU UCOMSECTION=2 ;
             12657        %EQU RLCOMSECTION=3 ;
             12658        %EQU LCOMSECTION=4 ;
             12659        %EQU DCBSECTION=5 ;
             12660        %EQU ROSECTION=6 ;
             12661        %EQU RORLCOMSECTION=7 ;
             12662        %EQU ROLCOMSECTION=8 ;
             12663        %EQU EVENBOUNDSECTION=0 ;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:98   
             12664        %EQU ODDBOUNDSECTION=1 ;
             12665        %EQU EIGHTBOUNDSECTION=2 ;
             12666        %EQU PAGEBOUNDSECTION=3 ;
       60    12668        %SUB_CST;
             12669        %EQU STD#=0 ;                           /* Standard CP6 callable procedure */
             12670        %EQU NSTD#=1 ;                          /* Non-standard Call Type  */
             12671        %EQU MAIN#=2 ;                /* Standard CP6 Procedure with MAIN attribute */
             12672        %EQU ASYNC#=3 ;               /* Standard CP6 Procedure with ASYNC attribute */
             12673        %EQU FUNC#=4 ;                /* Standard CP6 Function procedure; a variable */
             12674                                      /* table entry will be present to define the   */
             12675                                      /* attributes of the function.                 */
             12676        %EQU XSTD#=5 ;           /* Same as 0, except AVOID or MATERIALIZE specified */
             12677        %EQU XMAIN#=7 ;          /* Same as 2, except AVOID or MATERIALIZE specified */
             12678        %EQU XASYNC#=8 ;         /* Same as 3, except AVOID or MATERIALIZE specified */
             12679        %EQU XFUNC#=9 ;          /* Same as 4, except AVOID or MATERIALIZE specified */
             12680        %EQU DOMSAV#=13 ;                       /* GCOS domain, save  */
             12681        %EQU DOMNOSAV#=14 ;                     /* GCOS domain, no save  */
             12682        %EQU NOTPROC#=15 ;                      /* Non-callable procedure  */
       61    12684        %SUB_LINKFLAGS;
             12685        %EQU SOURCE_OBJECT#=0 ;
             12686        %EQU SOURCE_SLIB#=1 ;
             12687        %EQU SOURCE_ALIB#=2 ;
             12688        %EQU SOURCE_ULIB#=3 ;
             12689        %EQU SOURCE_RLIB#=4 ;
             12690        %EQU SOURCE_REMOVED#=5 ;
             12691        %EQU SOURCE_LINKER#=6 ;
       62    12693        %BANNER( ARG=HEAD_KEY );
             12694        %LSET LISTDIR='0'B;

             12701    1   /*******************************************************************************
             12702    1   *                                                                              *
             12703    1   *                          HEAD_KEY                                               *
             12704    1   *                                                                              *
             12705    1   *******************************************************************************/

       63    12709    1   DCL 1 HEAD_KEY STATIC,
       64    12710    1         2 COUNT UBIN BYTE UNAL INIT(7),
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:99   
       65    12711    1         2 TEXT CHAR(9) INIT('"_TV_ST');
       66    12712        %BANNER( ARG=HEAD_RECORD );
             12713        %LSET LISTDIR='0'B;

             12720    1   /*******************************************************************************
             12721    1   *                                                                              *
             12722    1   *                          HEAD_RECORD                                            *
             12723    1   *                                                                              *
             12724    1   *******************************************************************************/

       67    12728    1   DCL 1 HEAD_RECORD  STATIC ALIGNED,
       68    12729    1         2 UTS UBIN(36) UNAL INIT(0),
       69    12730    1         2 WORDSIZE UBIN BYTE UNAL INIT(36),
       70    12731    1         2 CMPLRID UBIN(27) UNAL INIT(0),
       71    12732    1         2 START_ADDRESS,
       72    12733    1           3 OPERAND_TYPE UBIN( 4) UNAL INIT(0),
       73    12734    1           3 * BIT ( 5) UNAL INIT('0'B),
       74    12735    1           3 OPERAND UBIN( 9) UNAL INIT(0),
       75    12736    1           3 OFFSET UBIN(18) UNAL INIT(0),
       76    12737    1         2 SEVLEV UBIN(18) UNAL INIT(0),
       77    12738    1         2 LB_SIZE UBIN(18) UNAL INIT(0),
       78    12739    1         2 PR_SIZE UBIN(18) UNAL INIT(0),
       79    12740    1         2 RL_SIZE UBIN(18) UNAL INIT(1024),
       80    12741    1         2 DN_SIZE UBIN(18) UNAL INIT( SIZEW(DN_RECORD) ),
       81    12742    1         2 DN_PAGE UBIN(18) UNAL INIT( SIZEW(DN_RECORD) ),
       82    12743    1         2 RN_SIZE UBIN(18) UNAL INIT(0),
       83    12744    1         2 RN_PAGE UBIN(18) UNAL INIT(0),
       84    12745    1         2 ED_SIZE UBIN(18) UNAL INIT( SIZEW(ED_RECORD) ),
       85    12746    1         2 ED_PAGE UBIN(18) UNAL INIT( SIZEW(ED_RECORD) ),
       86    12747    1         2 ER_SIZE UBIN(18) UNAL INIT(0),
       87    12748    1         2 ER_PAGE UBIN(18) UNAL INIT(0),
       88    12749    1         2 DD_SIZE UBIN(18) UNAL INIT(0),
       89    12750    1         2 DD_PAGE UBIN(18) UNAL INIT(0),
       90    12751    1         2 DR_SIZE UBIN(18) UNAL INIT(0),
       91    12752    1         2 DR_PAGE UBIN(18) UNAL INIT(0),
       92    12753    1         2 SD_SIZE UBIN(18) UNAL INIT(0),
       93    12754    1         2 SD_PAGE UBIN(18) UNAL INIT(0),
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:100  
       94    12755    1         2 SR_SIZE UBIN(18) UNAL INIT(0),
       95    12756    1         2 SR_PAGE UBIN(18) UNAL INIT(0),
       96    12757    1         2 LIB,
       97    12758    1           3 COUNT UBIN( 9) UNAL INIT(0),
       98    12759    1           3 NAME CHAR(31) UNAL
       99    12760    1             INIT('                               '),
      100    12761    1         2 ALIB,
      101    12762    1           3 COUNT UBIN( 9) UNAL INIT(0),
      102    12763    1           3 NAME CHAR(31) UNAL
      103    12764    1             INIT('                               ');
      104    12765        %BANNER( ARG="DN_RECORD - Defined names");
             12766        %LSET LISTDIR='0'B;

             12773    1   /*******************************************************************************
             12774    1   *                                                                              *
             12775    1   *                          DN_RECORD - Defined names                              *
             12776    1   *                                                                              *
             12777    1   *******************************************************************************/

      105    12781    1   DCL 1 DN_RECORD CONSTANT ALIGNED,
      106    12782    1         2 TV_ST_NAME,
      107    12783    1           3 * UBIN HALF UNAL INIT(6),
      108    12784    1           3 * CHAR(6) INIT('_TV_ST'),
      109    12785    1         2 TV_EN_NAME,
      110    12786    1           3 * UBIN HALF UNAL INIT(6),
      111    12787    1           3 * CHAR(6) INIT('_TV_EN'),
      112    12788    1         2 TRANSFER_VECTOR,
      113    12789    1           3 * UBIN HALF UNAL INIT(15),
      114    12790    1           3 * CHAR(18) INIT('Transfer vector');
      115    12791        %BANNER( ARG="SC_RECORD - Defines Sections");
             12792        %LSET LISTDIR='0'B;

             12799    1   /*******************************************************************************
             12800    1   *                                                                              *
             12801    1   *                          SC_RECORD - Defines Sections                           *
             12802    1   *                                                                              *
             12803    1   *******************************************************************************/
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:101  

      116    12807    1   DCL 1 SC_RECORD STATIC ALIGNED,
      117    12808    1         2 TYPE UBIN BYTE UNAL INIT( 1 ),
      118    12809    1         2 * BIT(1) INIT('0'B),
      119    12810    1         2 INITZERO BIT(1) INIT('0'B),
      120    12811    1         2 INITUTS  BIT(1) INIT('0'B),
      121    12812    1         2 SEGMENT  BIT(1) INIT('0'B),
      122    12813    1         2 * BIT(3) INIT('0'B),
      123    12814    1         2 BOUND BIT(2) INIT('0'B),
      124    12815    1         2 SIZE UBIN HALF UNAL INIT(0),
      125    12816    1         2 NPOINTER UBIN HALF UNAL INIT(4),
      126    12817    1         2 * UBIN HALF UNAL INIT(0);
      127    12818        %BANNER( ARG="ED_RECORD - Defines ENTDEFs");
             12819        %LSET LISTDIR='0'B;

             12826    1   /*******************************************************************************
             12827    1   *                                                                              *
             12828    1   *                          ED_RECORD - Defines ENTDEFs                            *
             12829    1   *                                                                              *
             12830    1   *******************************************************************************/

      128    12834    1   DCL 1 ED_RECORD STATIC ALIGNED,
      129    12835    1         2 TV_ST_EDEF,
      130    12836    1           3 LFLAGS UBIN BYTE UNAL INIT(0),
      131    12837    1           3 OU UNAL ,
      132    12838    1             4 SECTNUM UBIN BYTE UNAL INIT(0),
      133    12839    1             4 OFFSET UBIN HALF UNAL INIT(0),
      134    12840    1           3 NPOINTER UBIN HALF UNAL INIT(0),
      135    12841    1           3 PRI BIT(1) UNAL INIT('1'B),
      136    12842    1           3 ALT BIT(1) UNAL INIT('0'B),
      137    12843    1           3 CHECK BIT(1) UNAL INIT('0'B),
      138    12844    1           3 CST UBIN(4) UNAL INIT( 15 ),
      139    12845    1           3 NPARAM UBIN(11) UNAL INIT(0),
      140    12846    1         2 TV_EN_EDEF,
      141    12847    1           3 LFLAGS UBIN BYTE UNAL INIT(0),
      142    12848    1           3 OU UNAL ,
      143    12849    1             4 SECTNUM UBIN BYTE UNAL INIT(0),
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:102  
      144    12850    1             4 OFFSET UBIN HALF UNAL INIT(0),
      145    12851    1           3 NPOINTER UBIN HALF UNAL INIT(2),
      146    12852    1           3 PRI BIT(1) UNAL INIT('0'B),
      147    12853    1           3 ALT BIT(1) UNAL INIT('0'B),
      148    12854    1           3 CHECK BIT(1) UNAL INIT('0'B),
      149    12855    1           3 CST UBIN(4) UNAL INIT( 15 ),
      150    12856    1           3 NPARAM UBIN(11) UNAL INIT(0);
      151    12857        %BANNER( ARG=FORM1_KEY );
             12858        %LSET LISTDIR='0'B;

             12865    1   /*******************************************************************************
             12866    1   *                                                                              *
             12867    1   *                          FORM1_KEY                                              *
             12868    1   *                                                                              *
             12869    1   *******************************************************************************/

      152    12873    1   DCL 1 FORM1_KEY STATIC ALIGNED,
      153    12874    1         2 COUNT UBIN BYTE UNAL INIT(7),
      154    12875    1         2 * BIT(9) UNAL INIT('777'O),
      155    12876    1         2 UTS UBIN UNAL INIT(0),
      156    12877    1         2 REC_TYPE UBIN BYTE UNAL,
      157    12878    1         2 PAGE#    UBIN BYTE UNAL INIT(0);
      158    12879        %BANNER( ARG="Relocation keys" );
             12880        %LSET LISTDIR='0'B;

             12887    1   /*******************************************************************************
             12888    1   *                                                                              *
             12889    1   *                          Relocation keys                                        *
             12890    1   *                                                                              *
             12891    1   *******************************************************************************/

      159    12895    1   DCL 1 REPEAT_TRA_RELOC_REC_KEY CONSTANT ALIGNED,
      160    12896    1         2 COUNT UBIN BYTE UNAL INIT(12),
      161    12897    1         2 * BIT(9) UNAL INIT('777'O),
      162    12898    1         2 UTS UBIN UNAL INIT(0),
      163    12899    1         2 REC_TYPE UBIN BYTE UNAL INIT(10),
      164    12900    1         2 SECT# UBIN HALF UNAL INIT(0),
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:103  
      165    12901    1         2 OFFSET UBIN HALF UNAL INIT(0),
      166    12902    1         2 SUB_TYPE UBIN BYTE UNAL INIT(1),
      167    12903    1         2 SEQUENCE UBIN BYTE UNAL INIT(0);
      168    12904
      169    12905    1   DCL 1 ENTREF_RELOC_KEY STATIC ALIGNED,
      170    12906    1         2 COUNT UBIN BYTE UNAL INIT(12),
      171    12907    1         2 * BIT(9) UNAL INIT('777'O),
      172    12908    1         2 UTS UBIN UNAL INIT(0),
      173    12909    1         2 REC_TYPE UBIN BYTE UNAL INIT(10),
      174    12910    1         2 SECT# UBIN HALF UNAL INIT(0),
      175    12911    1         2 OFFSET UBIN HALF UNAL INIT(0),
      176    12912    1         2 SUB_TYPE UBIN BYTE UNAL INIT(1),
      177    12913    1         2 SEQUENCE UBIN BYTE UNAL INIT(1);
      178    12914        %BANNER( ARG=FORM1_REC_TYPES );
             12915        %LSET LISTDIR='0'B;

             12922    1   /*******************************************************************************
             12923    1   *                                                                              *
             12924    1   *                          FORM1_REC_TYPES                                        *
             12925    1   *                                                                              *
             12926    1   *******************************************************************************/

      179    12930    1   DCL FORM1_REC_TYPES (0:2) UBIN CONSTANT INIT( 1, 3, 4 );
      180    12931        %BANNER( ARG=FORM1_BUF_ );
             12932        %LSET LISTDIR='0'B;

             12939    1   /*******************************************************************************
             12940    1   *                                                                              *
             12941    1   *                          FORM1_BUF_                                             *
             12942    1   *                                                                              *
             12943    1   *******************************************************************************/

      181    12947    1   DCL FORM1_BUF_ (0:2) BIT(72) CONSTANT INIT(
      182    12948    1             VECTOR( DN_RECORD ),
      183    12949    1             VECTOR( SC_RECORD ),
      184    12950    1             VECTOR( ED_RECORD ) );
      185    12951        %BANNER( ARG="Relocation records" );
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:104  
             12952        %LSET LISTDIR='0'B;

             12959    1   /*******************************************************************************
             12960    1   *                                                                              *
             12961    1   *                          Relocation records                                     *
             12962    1   *                                                                              *
             12963    1   *******************************************************************************/

      186    12967    1   DCL 1 REPEAT_TRA_RELOC_REC STATIC ALIGNED,
      187    12968    1         2 * UBIN(6) UNAL INIT(0),
      188    12969    1         2 OPRND_TYPE UBIN(4) UNAL INIT(4),
      189    12970    1         2 EVAL_OP UBIN(4) UNAL INIT(7),
      190    12971    1         2 RELOC_OP UBIN(4) UNAL INIT(14),
      191    12972    1         2 OPERAND UBIN HALF UNAL INIT( 0  /* Repeat count */  ),
      192    12973    1         2 DISPLACEMENT UBIN HALF UNAL INIT(0),
      193    12974    1         2 START_BIT UBIN BYTE UNAL INIT(0),
      194    12975    1         2 END_BIT UBIN BYTE UNAL INIT(35),
      195    12976    1         2 VALUE UBIN INIT( BITBIN('710000'O /* Tra 0 instruction */) );
      196    12977
      197    12978    1   DCL 1 EMPTY_SLOT_RELOC STATIC ALIGNED,
      198    12979    1         2 * UBIN(6) UNAL INIT(0),
      199    12980    1         2 OPRND_TYPE UBIN(4) UNAL INIT(4),
      200    12981    1         2 EVAL_OP UBIN(4) UNAL INIT(0),
      201    12982    1         2 RELOC_OP UBIN(4) UNAL INIT(14),
      202    12983    1         2 OPERAND UBIN HALF UNAL INIT(0),
      203    12984    1         2 DISPLACEMENT UBIN HALF UNAL INIT(0),
      204    12985    1         2 START_BIT UBIN BYTE UNAL INIT(0),
      205    12986    1         2 END_BIT UBIN BYTE UNAL INIT(35);
      206    12987
      207    12988    1   DCL 1 ENTREF_RELOC STATIC ALIGNED,
      208    12989    1         2 * UBIN(6) UNAL INIT(0),
      209    12990    1         2 OPRND_TYPE UBIN(4) UNAL INIT(2),
      210    12991    1         2 EVAL_OP UBIN(4) UNAL INIT(0),
      211    12992    1         2 RELOC_OP UBIN(4) UNAL INIT(14),
      212    12993    1         2 OPERAND UBIN HALF UNAL INIT(0),
      213    12994    1         2 DISPLACEMENT UBIN HALF UNAL INIT(0),
      214    12995    1         2 START_BIT UBIN BYTE UNAL INIT(0),
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:105  
      215    12996    1         2 END_BIT UBIN BYTE UNAL INIT(17);
      216    12997
      217    12998        %B$RELOC2;
             12999    1   DCL 1 B$RELOC2 BASED ALIGNED,
             13000    1         2 MBZ UBIN(6) UNAL,
             13001                /*K*  MBZ is reserved for future use and must be zero. */
             13002    1         2 OPNDTYP UBIN(4) UNAL,
             13003                /*K*  OPNDTYP -
             13004                      (operand type)  = 1 section
             13005                                      = 2 ENTREF
             13006                                      = 3 SYMREF
             13007                                      = 4 CONSTANT
             13008                                      = 5 SEGDEF
             13009                                      = 6 SEGREF    */
             13010    1         2 EVALOP UBIN(4) UNAL,
             13011                /*K*  EVALOP is the operator to be applied to the VALUE and
             13012                      the evaluation of the operand (yeilding an intermediate
             13013                      result, r).
             13014                      (Evaluation Op)     Meaning
             13015                      ---------------     -------
             13016                             0            indicates VALUE word is not present
             13017                                          (r = E(operand))
             13018                             1            add:  r = E(operand)+VALUE
             13019                             2            subtract:  r = E(operand)-VALUE
             13020                             3            multiply:  r = E(operand)*VALUE
             13021                             4            divide:  r = E(operand)/VALUE
             13022                             5            Shift right
             13023                                          r = E(operand) shifted right by
             13024                                          VALUE (i.e., VALUE = Shift count)
             13025                             6            Shift left
             13026                                          r = E(operand shifted left by
             13027                                          VALUE (i.e., VALUE = Shift count)
             13028                             7            Repeat:  The operand is a repeat
             13029                                          count, n.  Repeat VALUE n times.  */
             13030    1         2 RELOCOP UBIN(4) UNAL,
             13031                /*K*  RELOCOP is the operator to be applied to the intermediate
             13032                      result; r, and the field (defined by DISP, STBIT, and
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:106  
             13033                      ENDBIT within the current program record).
             13034                      (Relocation Op)     Meaning
             13035                      ---------------     -------
             13036                             0            undefined
             13037                             1            add:  field+r -> field
             13038                             2            subtract:  field-r -> field
             13039                             3            multiply:  field*r -> field
             13040                             4            divide:  field/r -> field
             13041                           5-0'15'        undefined
             13042                             0'16'        Store right justified:
             13043                                          r right justified -> field
             13044                             0'17'        Store left justified:
             13045                                          r left justified -> field  */
             13046    1         2 OPERAND UBIN HALF UNAL,
             13047                /*K*  OPERAND - If operand TYPE = 4, the operand field is
             13048                                an unsigned constant.
             13049                                If operand TYPE ~= 4 (or 0), the operand field
             13050                                is an entry number in the table specified by TYPE. */
             13051    1         2 DISP UBIN HALF UNAL,
             13052                /*K*  DISP is the word displacement from OFFSET (in the key)
             13053                      to the relocatable item.  */
             13054    1         2 STBIT UBIN BYTE UNAL,
             13055                /*K*  STBIT is the starting bit offset from the word located
             13056                      by DISP.  */
             13057    1         2 ENDBIT UBIN BYTE UNAL,
             13058                /*K*  ENDBIT is the ending bit offset from the word located
             13059                      by DISP.   */
             13060    1         2 VALUE SBIN;
             13061                /*K*  VALUE is a 36-bit constant to be used in the
             13062                      intermediate result, r.  This word is present only if
             13063                      EVALOP ~= 0.   */
      218    13065
      219    13066        %BANNER(ARG="Binary search variables");
             13067        %LSET LISTDIR='0'B;

             13074    1   /*******************************************************************************
             13075    1   *                                                                              *
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:107  
             13076    1   *                          Binary search variables                                *
             13077    1   *                                                                              *
             13078    1   *******************************************************************************/

      220    13082        %BIN_SEARCH_VARS;
             13083    1   DCL BIN_START$          PTR  ALIGNED   AUTO;
             13084    1   DCL BIN_STOP$           PTR  ALIGNED   AUTO;
             13085    1   DCL BIN_RESULT$         PTR  ALIGNED   AUTO;
             13086    1   DCL BIN_N$              PTR  ALIGNED   AUTO;
             13087    1   DCL BIN_MATCH$          PTR       ALIGNED   AUTO;
             13088    1   DCL BIN_NAME_DISP       UBIN(36)  ALIGNED   AUTO;
             13089    1   DCL BIN_SIZE            UBIN(36)  ALIGNED   AUTO;
      221    13091        %BIN_SEARCH_TEMPS;
             13092    1   DCL BIN_LOW             UBIN(36)  ALIGNED AUTO;
             13093    1   DCL BIN_HIGH            UBIN(36)  ALIGNED AUTO;
             13094    1   DCL BIN_MID             UBIN(36)  ALIGNED AUTO;
             13095    1   DCL BIN_NTEMP$          PTR        ALIGNED AUTO;
             13096    1   DCL BIN_START1$         PTR       ALIGNED AUTO;
      222    13098        %PTR;
             13099        %LSET LISTDIR='0'B;

             13106    1   /*******************************************************************************
             13107    1   *                                                                              *
             13108    1   *                          PTR                                                 *
             13109    1   *                                                                              *
             13110    1   *******************************************************************************/

      223    13114        %POINTER;
             13115    1   DCL P$         PTR       ALIGNED AUTO;
             13116    1   DCL Q$         PTR       ALIGNED AUTO;
             13117    1   DCL R$         PTR       ALIGNED AUTO;
      224    13119    1   DCL NAME$                     PTR;
      225    13120    1   DCL NAME1$                    PTR;
      226    13121    1   DCL NAME2$                    PTR;
      227    13122    1   DCL LIST$                     PTR;
      228    13123    1   DCL START$                    PTR;
      229    13124    1   DCL STOP$                     PTR;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:108  
      230    13125    1   DCL ENTDEF$                   PTR;
      231    13126    1   DCL NEXT$                     PTR;
      232    13127    1   DCL RU_DNAME$                 PTR;
      233    13128    1   DCL RU_EDEF$                  PTR;
      234    13129    1   DCL END$                      PTR;
      235    13130    1   DCL RELOC_START$              PTR;
      236    13131    1   DCL RELOC_END$                PTR;
      237    13132    1   DCL RELOC_CURR$               PTR;
      238    13133    1   DCL RN_START$                 PTR     STATIC      INIT( ADDR(NIL) );
      239    13134    1   DCL ER_START$                 PTR     STATIC      INIT( ADDR(NIL) );
      240    13135    1   DCL ALL$                      PTR;
      241    13136        %S;
             13137        %LSET LISTDIR='0'B;

             13144    1   /*******************************************************************************
             13145    1   *                                                                              *
             13146    1   *                          SBIN                                                 *
             13147    1   *                                                                              *
             13148    1   *******************************************************************************/

      242    13152    1   DCL I                         SBIN;
      243    13153    1   DCL NEXT                      SBIN;
      244    13154    1   DCL OFFSET                    SBIN    STATIC      INIT( 0 );
      245    13155    1   DCL DN_OFFSET                 SBIN    STATIC      INIT( 0 );
      246    13156    1   DCL ER_SIZE                   SBIN    STATIC      INIT( 0 );
      247    13157    1   DCL RN_SIZE                   SBIN    STATIC      INIT( 0 );
      248    13158    1   DCL RU_DNAME_SIZE             SBIN;
      249    13159    1   DCL RU_EDEF_SIZE              SBIN;
      250    13160    1   DCL RU_SDEF_SIZE              SBIN;
      251    13161    1   DCL TABS                      SBIN;
      252    13162    1   DCL SIZE                      SBIN;
      253    13163    1   DCL SLOTS                     SBIN;
      254    13164        %E;
             13165        %LSET LISTDIR='0'B;

             13172    1   /*******************************************************************************
             13173    1   *                                                                              *
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:109  
             13174    1   *                          ENTRY                                                 *
             13175    1   *                                                                              *
             13176    1   *******************************************************************************/

      255    13180        %ENTRIES;
             13181    1   DCL VXE$ERROR       ENTRY(4);
             13182    1   DCL VXE$ERR         ENTRY(3);
             13183    1   DCL VXE$MERC        ENTRY;
             13184    1   DCL VXE$ERRMSG      ENTRY(3);
             13185    1   DCL VXR$READ        ENTRY( 3 );
             13186    1   DCL VXW$WRITE       ENTRY( 3 );
             13187    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             13188    1   DCL VXD$B2C         ENTRY( 5 );
             13189    1   DCL VXD$C2B         ENTRY( 3 );
             13190    1   DCL VXA$GET         ENTRY( 3 );
             13191    1   DCL VXF$FREE        ENTRY( 3 );
             13192    1   DCL VXQ$SORT        ENTRY( 7 );
             13193    1   DCL VXY$YESNO       ENTRY( 1 );
      256    13195        %ENTRIES_IO;
             13196    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             13197    1   DCL VXF$CLOSE       ENTRY(3);
             13198    1   DCL VXU$PREAD       ENTRY(12);
             13199    1   DCL VXK$KEY         ENTRY(4);
             13200    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             13201    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
      257    13203    1   DCL VXQ$SORT_V            ENTRY(7);
      258    13204        %C;
             13205        %LSET LISTDIR='0'B;

             13212    1   /*******************************************************************************
             13213    1   *                                                                              *
             13214    1   *                          CHAR                                                 *
             13215    1   *                                                                              *
             13216    1   *******************************************************************************/

      259    13220    1   DCL BUFFER CHAR(80);
      260    13221    1   DCL 1 TRANS_VECT_MSG STATIC,
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:110  
      261    13222    1         2 * CHAR(4) INIT(' '),
      262    13223    1         2 ADDR1 CHAR(6) INIT(' '),
      263    13224    1         2 * CHAR(1) INIT(' '),
      264    13225    1         2 NAME1 CHAR(31) INIT(' '),
      265    13226    1         2 * CHAR(4) INIT(' -> '),
      266    13227    1         2 ADDR2 CHAR(6) INIT(' '),
      267    13228    1         2 * CHAR(1) INIT(' '),
      268    13229    1         2 NAME2 CHAR(31) INIT(' ');
      269    13230    1   DCL 1 EMPTY_SLOT_MSG STATIC,
      270    13231    1         2 * CHAR(4) INIT(' '),
      271    13232    1         2 ADDR_ CHAR(6) INIT(' '),
      272    13233    1         2 * CHAR(0) INIT(' Empty slot');
      273    13234        %PLIST;
      274    13235        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:111  
      275    13236    1   VXU$INIT_VECTOR: ENTRY ;

  13236  7 000003   000000 700200 xent  VXU$INIT_VE* TSX0  ! X66_AUTO_0
         7 000004   000370 000000                    ZERO    248,0

      276    13237        /*
      277    13238                          Create the transfer vector file.
      278    13239        */
      279    13240    1         CALL M$OPEN( FPT_OPEN ) ALTRET( OPEN_ERROR );

  13240  7 000005   000000 630400 2                  EPPR0   FPT_OPEN
         7 000006   450000 713400                    CLIMB   alt,open
         7 000007   410400 401760                    pmme    nvectors=18
         7 000010   002735 702000 7                  TSX2    OPEN_ERROR

      280    13241        /*
      281    13242                      Write defined names record, section record and entdef record
      282    13243        */
      283    13244    1         FPT_WRITE.KEY_ = VECTOR( FORM1_KEY );

  13244  7 000011   000000 237000 8                  LDAQ    0
         7 000012   000206 757000 2                  STAQ    FPT_WRITE+2

      284    13245    2         DO I = 0 TO 2;

  13245  7 000013   200314 450100                    STZ     I,,AUTO

      285    13246    2             FORM1_KEY.REC_TYPE = FORM1_REC_TYPES(I);

  13246  7 000014   200314 720100                    LXL0    I,,AUTO
         7 000015   000015 236010 6                  LDQ     FORM1_REC_TYPES,X0
         7 000016   000011 736000                    QLS     9
         7 000017   000267 552010 2                  STBQ    FORM1_KEY+1,'10'O

      286    13247    2             FPT_WRITE.BUF_ = FORM1_BUF_(I);

  13247  7 000020   200314 235100                    LDA     I,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:112  
         7 000021   000001 735000                    ALS     1
         7 000022   000020 237005 6                  LDAQ    FORM1_BUF_,AL
         7 000023   000210 757000 2                  STAQ    FPT_WRITE+4

      287    13248    2             CALL M$WRITE(FPT_WRITE)    ALTRET(WRITE_ERROR);

  13248  7 000024   000204 630400 2                  EPPR0   FPT_WRITE
         7 000025   440001 713400                    CLIMB   alt,write
         7 000026   401400 401760                    pmme    nvectors=4
         7 000027   002735 702000 7                  TSX2    OPEN_ERROR

      288    13249    2             END;

  13249  7 000030   200314 054100                    AOS     I,,AUTO
         7 000031   200314 235100                    LDA     I,,AUTO
         7 000032   000002 115007                    CMPA    2,DL
         7 000033   000014 604400 7                  TMOZ    s:13246

      289    13250        /*
      290    13251                          Write the head record
      291    13252        */
      292    13253    1         FPT_WRITE.KEY_ = VECTOR( HEAD_KEY );

  13253  7 000034   000002 237000 8                  LDAQ    2
         7 000035   000206 757000 2                  STAQ    FPT_WRITE+2

      293    13254    1         FPT_WRITE.BUF_ = VECTOR( HEAD_RECORD );

  13254  7 000036   000004 237000 8                  LDAQ    4
         7 000037   000210 757000 2                  STAQ    FPT_WRITE+4

      294    13255    1         CALL M$WRITE(FPT_WRITE)       ALTRET(WRITE_ERROR);

  13255  7 000040   000204 630400 2                  EPPR0   FPT_WRITE
         7 000041   440001 713400                    CLIMB   alt,write
         7 000042   401400 401760                    pmme    nvectors=4
         7 000043   002735 702000 7                  TSX2    OPEN_ERROR
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:113  

      295    13256        /*
      296    13257                          Allocate a VX$LST list element for the new ou file
      297    13258                          ********************Transfer_vector
      298    13259        */
      299    13260              %ALLOCATE( PTR$=ALL$, TYPE=@GDP, SIZE="SIZEW(VX$LST)" );

  13261  7 000044   000010 236000 xsym               LDQ     VX_M_ALL+8
         7 000045   000010 136000 xsym               SBLQ    VX_M_FREE+8
         7 000046   000022 116007                    CMPQ    18,DL
         7 000047   000057 604000 7                  TMI     s:13265

  13262  7 000050   000010 236000 xsym               LDQ     VX_M_FREE+8
         7 000051   000022 736000                    QLS     18
         7 000052   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         7 000053   200313 756100                    STQ     ALL$,,AUTO

  13263  7 000054   000022 236007                    LDQ     18,DL
         7 000055   000010 056000 xsym               ASQ     VX_M_FREE+8

  13264  7 000056   000071 710000 7                  TRA     s:13267

  13265  7 000057   000007 236000 8                  LDQ     7
         7 000060   200362 756100                    STQ     LENGTH+4,,AUTO
         7 000061   000010 236000 8                  LDQ     8
         7 000062   200361 756100                    STQ     LENGTH+3,,AUTO
         7 000063   200313 630500                    EPPR0   ALL$,,AUTO
         7 000064   200360 450500                    STP0    LENGTH+2,,AUTO
         7 000065   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 000066   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 000067   000000 701000 xent               TSX1    VXA$GET
         7 000070   000000 011000                    NOP     0

      300    13267    1         ALL$->VX$LST.LINK$ = ADDR(NIL);

  13267  7 000071   000001 236000 xsym               LDQ     B_VECTNIL+1
         7 000072   200313 470500                    LDP0    ALL$,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:114  
         7 000073   000000 756100                    STQ     0,,PR0

      301    13268    1         ALL$->VX$LST.TYPE = 0/*@OF*/;

  13268  7 000074   000000 220003                    LDX0    0,DU
         7 000075   200313 470500                    LDP0    ALL$,,AUTO
         7 000076   000001 740100                    STX0    1,,PR0

      302    13269    1         ALL$->VX$LST.SUB_TYPE = 0/*@OF_ALL*/;

  13269  7 000077   200313 470500                    LDP0    ALL$,,AUTO
         7 000100   000001 440100                    SXL0    1,,PR0

      303    13270    1         ALL$->VX$LST.OBJECT_NAME$ = ADDR(NIL);

  13270  7 000101   000001 236000 xsym               LDQ     B_VECTNIL+1
         7 000102   200313 470500                    LDP0    ALL$,,AUTO
         7 000103   000002 756100                    STQ     2,,PR0

      304    13271    1         ALL$->VX$LST.SC_HEAD$   = ADDR(NIL);

  13271  7 000104   200313 470500                    LDP0    ALL$,,AUTO
         7 000105   000003 756100                    STQ     3,,PR0

      305    13272    1         ALL$->VX$LST.SC_TAIL$   = ADDR( ALL$->VX$LST.SC_HEAD$ );

  13272  7 000106   200313 236100                    LDQ     ALL$,,AUTO
         7 000107   000003 036003                    ADLQ    3,DU
         7 000110   200313 470500                    LDP0    ALL$,,AUTO
         7 000111   000004 756100                    STQ     4,,PR0

      306    13273    1         ALL$->VX$LST.P.NAME_ = VECTOR( VLP_NAME );

  13273  7 000112   200313 470500                    LDP0    ALL$,,AUTO
         7 000113   000012 237000 8                  LDAQ    10
         7 000114   000005 755100                    STA     5,,PR0
         7 000115   000006 756100                    STQ     6,,PR0
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:115  

      307    13274    1         ALL$->VX$LST.P.ACCT_ = VECTOR( NIL );

  13274  7 000116   200313 470500                    LDP0    ALL$,,AUTO
         7 000117   000014 237000 8                  LDAQ    12
         7 000120   000007 755100                    STA     7,,PR0
         7 000121   000010 756100                    STQ     8,,PR0

      308    13275    1         ALL$->VX$LST.P.PASS_ = VECTOR( NIL );

  13275  7 000122   200313 470500                    LDP0    ALL$,,AUTO
         7 000123   000014 237000 8                  LDAQ    12
         7 000124   000011 755100                    STA     9,,PR0
         7 000125   000012 756100                    STQ     10,,PR0

      309    13276    1         ALL$->VX$LST.P.SN_ = VECTOR( NIL );

  13276  7 000126   200313 470500                    LDP0    ALL$,,AUTO
         7 000127   000014 237000 8                  LDAQ    12
         7 000130   000013 755100                    STA     11,,PR0
         7 000131   000014 756100                    STQ     12,,PR0

      310    13277    1         ALL$->VX$LST.P.WSN_ = VECTOR( NIL );

  13277  7 000132   200313 470500                    LDP0    ALL$,,AUTO
         7 000133   000014 237000 8                  LDAQ    12
         7 000134   000015 755100                    STA     13,,PR0
         7 000135   000016 756100                    STQ     14,,PR0

      311    13278    1         ALL$->VX$LST.P.B.RES = '0'B/*@FALSE_B*/;

  13278  7 000136   200313 470500                    LDP0    ALL$,,AUTO
         7 000137   000031 236000 xsym               LDQ     B_VECTNIL+25
         7 000140   000017 356100                    ANSQ    15,,PR0

      312    13279    1         ALL$->VX$LST.P.B.ASN = '1'B/*@TRUE_B*/;

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:116  
  13279  7 000141   200313 470500                    LDP0    ALL$,,AUTO
         7 000142   200000 236003                    LDQ     65536,DU
         7 000143   000017 256100                    ORSQ    15,,PR0

      313    13280    1         ALL$->VX$LST.P.ASN = FPT_OPEN.V.ASN#;

  13280  7 000144   200313 470500                    LDP0    ALL$,,AUTO
         7 000145   000045 236000 2                  LDQ     FPT_OPEN+37
         7 000146   000777 376007                    ANQ     511,DL
         7 000147   000021 756100                    STQ     17,,PR0

      314    13281        /*
      315    13282                 Add the new ou file to the beginning of the file list for the root node
      316    13283        */
      317    13284    1         ALL$->VX$LST.LINK$ = VX_ROOT$->VX$NODE.HEAD$;

  13284  7 000150   000000 470400 xsym               LDP0    VX_ROOT$
         7 000151   000004 236100                    LDQ     4,,PR0
         7 000152   200313 471500                    LDP1    ALL$,,AUTO
         7 000153   100000 756100                    STQ     0,,PR1

      318    13285    1         VX_ROOT$->VX$NODE.HEAD$ = ALL$;

  13285  7 000154   200313 236100                    LDQ     ALL$,,AUTO
         7 000155   000000 470400 xsym               LDP0    VX_ROOT$
         7 000156   000004 756100                    STQ     4,,PR0

      319    13286    1         CALL M$CLOSE(FPT_CLOSE) ALTRET(CLOSE_ERR);   /* Close the new ou file */

  13286  7 000157   000072 630400 2                  EPPR0   FPT_CLOSE
         7 000160   450001 713400                    CLIMB   alt,close
         7 000161   406000 401760                    pmme    nvectors=13
         7 000162   002735 702000 7                  TSX2    OPEN_ERROR

      320    13287    1         RETURN;

  13287  7 000163   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:117  

      321    13288
      322    13289        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:118  
      323    13290    1   VXU$BUILD_VECTOR: ENTRY;

  13290  7 000164   000000 700200 xent  VXU$BUILD_V* TSX0  ! X66_AUTO_0
         7 000165   000370 000000                    ZERO    248,0

      324    13291        /*
      325    13292                          Perform initializations
      326    13293         */
      327    13294    1         CALL VXQ$SORT( VX_ROOT$->VX$NODE.L_START.DN$,

  13294  7 000166   000016 236000 8                  LDQ     14
         7 000167   200366 756100                    STQ     LENGTH+8,,AUTO
         7 000170   000020 237000 8                  LDAQ    16
         7 000171   200364 757100                    STAQ    LENGTH+6,,AUTO
         7 000172   000021 236000 8                  LDQ     17
         7 000173   200363 756100                    STQ     LENGTH+5,,AUTO
         7 000174   000000 236000 xsym               LDQ     VX_ROOT$
         7 000175   000046 036003                    ADLQ    38,DU
         7 000176   200362 756100                    STQ     LENGTH+4,,AUTO
         7 000177   000000 236000 xsym               LDQ     VX_ROOT$
         7 000200   000034 036003                    ADLQ    28,DU
         7 000201   200361 756100                    STQ     LENGTH+3,,AUTO
         7 000202   000000 236000 xsym               LDQ     VX_ROOT$
         7 000203   000031 036003                    ADLQ    25,DU
         7 000204   200360 756100                    STQ     LENGTH+2,,AUTO
         7 000205   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 000206   000025 631400 xsym               EPPR1   B_VECTNIL+21
         7 000207   000000 701000 xent               TSX1    VXQ$SORT
         7 000210   000000 011000                    NOP     0

      328    13295    1                 VX_ROOT$->VX$NODE.L_START.ED$,
      329    13296    1                 VX_ROOT$->VX$NODE.L_STOP.ED$,
      330    13297    1                 SIZEW(B$EDEF), 1/*@BY_NAME*/, 2, 0 );
      331    13298    1         FPT_OPEN.V.FUN# = 1;

  13298  7 000211   001000 236007                    LDQ     512,DL
         7 000212   000045 552010 2                  STBQ    FPT_OPEN+37,'10'O
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:119  

      332    13299    1         CALL M$OPEN(FPT_OPEN) ALTRET(OPEN_ERROR);

  13299  7 000213   000000 630400 2                  EPPR0   FPT_OPEN
         7 000214   450000 713400                    CLIMB   alt,open
         7 000215   410400 401760                    pmme    nvectors=18
         7 000216   002735 702000 7                  TSX2    OPEN_ERROR

      333    13300    1         IF VX_REC_BUF_SIZE < 1024 THEN VX_REC_BUF_SIZE = 1024;

  13300  7 000217   000000 235000 xsym               LDA     VX_REC_BUF_SIZE
         7 000220   002000 115007                    CMPA    1024,DL
         7 000221   000224 603000 7                  TRC     s:13302

  13300  7 000222   002000 236007                    LDQ     1024,DL
         7 000223   000000 756000 xsym               STQ     VX_REC_BUF_SIZE

      334    13301              %ALLOCATE( PTR$=RELOC_START$, TYPE=@SD_DS_1, SIZE=1024 );

  13302  7 000224   000003 236000 xsym               LDQ     VX_M_ALL+3
         7 000225   000003 136000 xsym               SBLQ    VX_M_FREE+3
         7 000226   002000 116007                    CMPQ    1024,DL
         7 000227   000237 604000 7                  TMI     s:13306

  13303  7 000230   000003 236000 xsym               LDQ     VX_M_FREE+3
         7 000231   000022 736000                    QLS     18
         7 000232   000003 036000 xsym               ADLQ    VX_M_BASE_PTR+3
         7 000233   200310 756100                    STQ     RELOC_START$,,AUTO

  13304  7 000234   002000 236007                    LDQ     1024,DL
         7 000235   000003 056000 xsym               ASQ     VX_M_FREE+3

  13305  7 000236   000251 710000 7                  TRA     s:13308

  13306  7 000237   000023 236000 8                  LDQ     19
         7 000240   200362 756100                    STQ     LENGTH+4,,AUTO
         7 000241   000024 236000 8                  LDQ     20
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:120  
         7 000242   200361 756100                    STQ     LENGTH+3,,AUTO
         7 000243   200310 630500                    EPPR0   RELOC_START$,,AUTO
         7 000244   200360 450500                    STP0    LENGTH+2,,AUTO
         7 000245   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 000246   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 000247   000000 701000 xent               TSX1    VXA$GET
         7 000250   000000 011000                    NOP     0

      335    13308    1         SIZE = 1024;

  13308  7 000251   002000 235007                    LDA     1024,DL
         7 000252   200322 755100                    STA     SIZE,,AUTO

      336    13309    1         RELOC_CURR$ = RELOC_START$;

  13309  7 000253   200310 236100                    LDQ     RELOC_START$,,AUTO
         7 000254   200312 756100                    STQ     RELOC_CURR$,,AUTO

      337    13310    1         RELOC_END$ = PINCRW( RELOC_START$, 1024 );

  13310  7 000255   002000 036003                    ADLQ    1024,DU
         7 000256   200311 756100                    STQ     RELOC_END$,,AUTO

      338    13311    1         FPT_WRITE.BUF_.BUF$ = RELOC_CURR$;

  13311  7 000257   200312 236100                    LDQ     RELOC_CURR$,,AUTO
         7 000260   000211 756000 2                  STQ     FPT_WRITE+5

      339    13312    1         FPT_WRITE.BUF_.BOUND = 4095;

  13312  7 000261   000210 236000 2                  LDQ     FPT_WRITE+4
         7 000262   177777 376007                    ANQ     65535,DL
         7 000263   000025 276000 8                  ORQ     21
         7 000264   000210 756000 2                  STQ     FPT_WRITE+4

      340    13313    1         FPT_WRITE.KEY_ = VECTOR(ENTREF_RELOC_KEY);

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:121  
  13313  7 000265   000026 237000 8                  LDAQ    22
         7 000266   000206 757000 2                  STAQ    FPT_WRITE+2

      341    13314        /*
      342    13315                              Process transfer vector in run unit file
      343    13316        */
      344    13317    2         IF VX_O.VECTOR_.RF$ ~= ADDR(NIL) THEN DO;

  13317  7 000267   000155 236000 xsym               LDQ     VX_O+109
         7 000270   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 000271   000636 600000 7                  TZE     s:13431

      345    13318    2             CALL READ_RUN_UNIT( VX_O.VECTOR_.RF$, 0/*@OF*/, 2 );

  13318  7 000272   000016 237000 8                  LDAQ    14
         7 000273   200352 757100                    STAQ    @RUF$+1,,AUTO
         7 000274   000030 236000 8                  LDQ     24
         7 000275   200351 756100                    STQ     BUFFER+21,,AUTO
         7 000276   003726 701000 7                  TSX1    READ_RUN_UNIT
         7 000277   000000 011000                    NOP     0

      346    13319    2             BIN_N$ = RU_DNAME$;

  13319  7 000300   200305 236100                    LDQ     RU_DNAME$,,AUTO
         7 000301   200261 756100                    STQ     BIN_N$,,AUTO

      347    13320    2             BIN_START$ = RU_EDEF$;

  13320  7 000302   200306 236100                    LDQ     RU_EDEF$,,AUTO
         7 000303   200256 756100                    STQ     BIN_START$,,AUTO

      348    13321    2             BIN_STOP$ = PINCRW( RU_EDEF$, RU_EDEF_SIZE-SIZEW(B$EDEF) );

  13321  7 000304   200317 236100                    LDQ     RU_EDEF_SIZE,,AUTO
         7 000305   000022 736000                    QLS     18
         7 000306   000002 136003                    SBLQ    2,DU
         7 000307   200306 036100                    ADLQ    RU_EDEF$,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:122  
         7 000310   200257 756100                    STQ     BIN_STOP$,,AUTO

      349    13322    2             CALL VXQ$SORT_V(BIN_N$, BIN_START$, BIN_STOP$, SIZEW(B$EDEF), 0
             13322                      /*@BY_VALUE*/, 2, 4 );

  13322  7 000311   000031 236000 8                  LDQ     25
         7 000312   200366 756100                    STQ     LENGTH+8,,AUTO
         7 000313   000016 237000 8                  LDAQ    14
         7 000314   200364 757100                    STAQ    LENGTH+6,,AUTO
         7 000315   000017 236000 8                  LDQ     15
         7 000316   200363 756100                    STQ     LENGTH+5,,AUTO
         7 000317   200257 630500                    EPPR0   BIN_STOP$,,AUTO
         7 000320   200362 450500                    STP0    LENGTH+4,,AUTO
         7 000321   200256 631500                    EPPR1   BIN_START$,,AUTO
         7 000322   200361 451500                    STP1    LENGTH+3,,AUTO
         7 000323   200261 633500                    EPPR3   BIN_N$,,AUTO
         7 000324   200360 453500                    STP3    LENGTH+2,,AUTO
         7 000325   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 000326   000025 631400 xsym               EPPR1   B_VECTNIL+21
         7 000327   000000 701000 xent               TSX1    VXQ$SORT_V
         7 000330   000000 011000                    NOP     0

      350    13323    2             CALL FIND_ENTDEF( DN_RECORD.TV_ST_NAME, ENTDEF$, 1 );

  13323  7 000331   000020 236000 8                  LDQ     16
         7 000332   200353 756100                    STQ     @TYPE+1,,AUTO
         7 000333   200303 630500                    EPPR0   ENTDEF$,,AUTO
         7 000334   200352 450500                    STP0    @RUF$+1,,AUTO
         7 000335   000032 236000 8                  LDQ     26
         7 000336   200351 756100                    STQ     BUFFER+21,,AUTO
         7 000337   002747 701000 7                  TSX1    FIND_ENTDEF
         7 000340   000000 011000                    NOP     0

      351    13324    2             IF ENTDEF$ = RU_EDEF$ THEN

  13324  7 000341   200303 236100                    LDQ     ENTDEF$,,AUTO
         7 000342   200306 116100                    CMPQ    RU_EDEF$,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:123  
         7 000343   000347 601000 7                  TNZ     s:13327

      352    13325    2                 START$ = PINCRW( ENTDEF$, SIZEW(B$EDEF) );

  13325  7 000344   000002 036003                    ADLQ    2,DU
         7 000345   200301 756100                    STQ     START$,,AUTO
         7 000346   000377 710000 7                  TRA     s:13337

      353    13326    3             ELSE DO;

      354    13327    3                 P$ = PINCRW( ENTDEF$, -SIZEW(B$EDEF) );

  13327  7 000347   777776 036003                    ADLQ    -2,DU
         7 000350   200272 756100                    STQ     P$,,AUTO

      355    13328    3                 IF ENTDEF$->B$EDEF.ISADDR ~= P$->B$EDEF.ISADDR THEN

  13328  7 000351   200272 470500                    LDP0    P$,,AUTO
         7 000352   200303 471500                    LDP1    ENTDEF$,,AUTO
         7 000353   100000 236100                    LDQ     0,,PR1
         7 000354   000000 676100                    ERQ     0,,PR0
         7 000355   000032 376000 xsym               ANQ     B_VECTNIL+26
         7 000356   000363 600000 7                  TZE     s:13331

      356    13329    3                     START$ = PINCRW( ENTDEF$, SIZEW(B$EDEF) );

  13329  7 000357   200303 236100                    LDQ     ENTDEF$,,AUTO
         7 000360   000002 036003                    ADLQ    2,DU
         7 000361   200301 756100                    STQ     START$,,AUTO
         7 000362   000377 710000 7                  TRA     s:13337

      357    13330    4                 ELSE DO;

      358    13331    4                     ENTDEF = ENTDEF$->B$EDEF;

  13331  7 000363   000100 100500                    MLR     fill='000'O
         7 000364   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:124  
         7 000365   200053 000010                    ADSC9   ENTDEF,,AUTO             cn=0,n=8

      359    13332    4                     ENTDEF$->B$EDEF = P$->B$EDEF;

  13332  7 000366   000100 100500                    MLR     fill='000'O
         7 000367   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         7 000370   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8

      360    13333    4                     P$->B$EDEF = ENTDEF;

  13333  7 000371   200272 470500                    LDP0    P$,,AUTO
         7 000372   000100 100500                    MLR     fill='000'O
         7 000373   200053 000010                    ADSC9   ENTDEF,,AUTO             cn=0,n=8
         7 000374   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

      361    13334    4                     START$ = ENTDEF$;

  13334  7 000375   200303 236100                    LDQ     ENTDEF$,,AUTO
         7 000376   200301 756100                    STQ     START$,,AUTO

      362    13335    4                     END;

      363    13336    3                 END;

      364    13337    2             CALL FIND_ENTDEF( DN_RECORD.TV_EN_NAME, STOP$, 1 );

  13337  7 000377   000020 236000 8                  LDQ     16
         7 000400   200353 756100                    STQ     @TYPE+1,,AUTO
         7 000401   200302 630500                    EPPR0   STOP$,,AUTO
         7 000402   200352 450500                    STP0    @RUF$+1,,AUTO
         7 000403   000033 236000 8                  LDQ     27
         7 000404   200351 756100                    STQ     BUFFER+21,,AUTO
         7 000405   002747 701000 7                  TSX1    FIND_ENTDEF
         7 000406   000000 011000                    NOP     0

      365    13338    2             BIN_N$ = VX_ROOT$->VX$NODE.L_START.DN$;

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:125  
  13338  7 000407   000000 470400 xsym               LDP0    VX_ROOT$
         7 000410   000031 236100                    LDQ     25,,PR0
         7 000411   200261 756100                    STQ     BIN_N$,,AUTO

      366    13339    2             BIN_START$ = VX_ROOT$->VX$NODE.L_START.ED$;

  13339  7 000412   000034 236100                    LDQ     28,,PR0
         7 000413   200256 756100                    STQ     BIN_START$,,AUTO

      367    13340    2             BIN_STOP$ = VX_ROOT$->VX$NODE.L_STOP.ED$;

  13340  7 000414   000046 236100                    LDQ     38,,PR0
         7 000415   200257 756100                    STQ     BIN_STOP$,,AUTO

      368    13341    2             I = BITBIN('700004'O);

  13341  7 000416   700004 235007                    LDA     -32764,DL
         7 000417   200314 755100                    STA     I,,AUTO

      369    13342    3             DO WHILE( START$ < STOP$ );

  13342  7 000420   200301 236100                    LDQ     START$,,AUTO
         7 000421   200302 116100                    CMPQ    STOP$,,AUTO
         7 000422   000631 603000 7                  TRC     s:13428

      370    13343    3                 SLOTS = START$->B$EDEF.ISADDR - I;

  13343  7 000423   200301 470500                    LDP0    START$,,AUTO
         7 000424   000000 236100                    LDQ     0,,PR0
         7 000425   000032 376000 xsym               ANQ     B_VECTNIL+26
         7 000426   200314 136100                    SBLQ    I,,AUTO
         7 000427   200323 756100                    STQ     SLOTS,,AUTO

      371    13344    4                 IF SLOTS > 0 THEN DO;

  13344  7 000430   000440 604400 7                  TMOZ    s:13348

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:126  
      372    13345    4                     CALL EMPTY_SLOT( SLOTS );

  13345  7 000431   200323 631500                    EPPR1   SLOTS,,AUTO
         7 000432   200351 451500                    STP1    BUFFER+21,,AUTO
         7 000433   003644 701000 7                  TSX1    EMPTY_SLOT
         7 000434   000000 011000                    NOP     0

      373    13346    4                     I = I + SLOTS;

  13346  7 000435   200314 236100                    LDQ     I,,AUTO
         7 000436   200323 036100                    ADLQ    SLOTS,,AUTO
         7 000437   200314 756100                    STQ     I,,AUTO

      374    13347    4                     END;

      375    13348    3                 NAME$ = PINCRW( RU_DNAME$, START$->B$EDEF.NPOINTER );

  13348  7 000440   200301 470500                    LDP0    START$,,AUTO
         7 000441   000001 220100                    LDX0    1,,PR0
         7 000442   000000 636010                    EAQ     0,X0
         7 000443   200305 036100                    ADLQ    RU_DNAME$,,AUTO
         7 000444   200275 756100                    STQ     NAME$,,AUTO

      376    13349                      %BIN_SEARCH(
      377    13350                      MATCH$=NAME$,
      378    13351                      NAME_DISP=2,
      379    13352                      SIZE="SIZEW(B$EDEF)",
      380    13353                      FOUND=RU_ENTRY_FOUND,
      381    13354                      SPLIT=RU_ENTRY_SPLIT,
      382    13355                      CHECK=RU_ENTRY_CHECK,
      383    13356                      ALTRETURN=RU_ENTRY_NOT_DEFINED,
      384    13357                      EMPTY=RU_ENTRY_NOT_DEFINED );
             13359    3           IF BIN_START$ = ADDR(NIL) THEN GOTO RU_ENTRY_NOT_DEFINED;

  13359  7 000445   200256 236100                    LDQ     BIN_START$,,AUTO
         7 000446   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 000447   000600 600000 7                  TZE     RU_ENTRY_NOT_DEFINED
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:127  

             13360    4           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) < 17 THEN DO;

  13360  7 000450   200256 235100                    LDA     BIN_START$,,AUTO
         7 000451   000022 771000                    ARL     18
         7 000452   200360 755100                    STA     LENGTH+2,,AUTO
         7 000453   200257 236100                    LDQ     BIN_STOP$,,AUTO
         7 000454   000022 772000                    QRL     18
         7 000455   200360 136100                    SBLQ    LENGTH+2,,AUTO
         7 000456   000002 506007                    DIV     2,DL
         7 000457   000021 116007                    CMPQ    17,DL
         7 000460   000514 605000 7                  TPL     s:13377

             13361    4              BIN_RESULT$ = BIN_START$;        /* Sequential search                 */

  13361  7 000461   200256 236100                    LDQ     BIN_START$,,AUTO
         7 000462   200260 756100                    STQ     BIN_RESULT$,,AUTO

             13362    5              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );

  13362  7 000463   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 000464   000466 600000 7                  TZE     s:13363
         7 000465   000513 603000 7                  TRC     s:13374

             13363    5                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  13363  7 000466   200260 470500                    LDP0    BIN_RESULT$,,AUTO
         7 000467   000001 220100                    LDX0    1,,PR0
         7 000470   000000 636010                    EAQ     0,X0
         7 000471   200261 036100                    ADLQ    BIN_N$,,AUTO
         7 000472   200270 756100                    STQ     BIN_NTEMP$,,AUTO

             13364    5                 IF BIN_NTEMP$ -> B$DNAME.TEXT

  13364  7 000473   200270 471500                    LDP1    BIN_NTEMP$,,AUTO
         7 000474   100000 221100                    LDX1    0,,PR1
         7 000475   200275 473500                    LDP3    NAME$,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:128  
         7 000476   300000 222100                    LDX2    0,,PR3
         7 000477   040140 106540                    CMPC    fill='040'O
         7 000500   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         7 000501   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         7 000502   000505 602000 7                  TNC     s:13372

             13365    5                   >=
             13366    6                   NAME$ -> B$DNAME.TEXT THEN DO;

             13367    6                    IF BIN_NTEMP$ -> B$DNAME.TEXT

  13367  7 000503   000571 600000 7                  TZE     RU_ENTRY_FOUND

             13368    6                      =
             13369    6                      NAME$ -> B$DNAME.TEXT THEN GOTO RU_ENTRY_FOUND;
             13370    6                    ELSE GOTO RU_ENTRY_NOT_DEFINED;

  13370  7 000504   000600 710000 7                  TRA     RU_ENTRY_NOT_DEFINED

             13371    6                    END;
             13372    5                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(B$EDEF) );

  13372  7 000505   200260 236100                    LDQ     BIN_RESULT$,,AUTO
         7 000506   000002 036003                    ADLQ    2,DU
         7 000507   200260 756100                    STQ     BIN_RESULT$,,AUTO

             13373    5                 END;                      /* Do while                           */

  13373  7 000510   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 000511   000466 602000 7                  TNC     s:13363
         7 000512   000466 600000 7                  TZE     s:13363

             13374    4              GOTO RU_ENTRY_NOT_DEFINED;

  13374  7 000513   000600 710000 7                  TRA     RU_ENTRY_NOT_DEFINED

             13375    4              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:129  
             13376    4           ELSE DO;                        /* Binary search                      */

             13377    4              BIN_LOW = 0;

  13377  7 000514   200265 450100                    STZ     BIN_LOW,,AUTO

             13378    4              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) + 2;

  13378  7 000515   200256 235100                    LDA     BIN_START$,,AUTO
         7 000516   000022 771000                    ARL     18
         7 000517   200360 755100                    STA     LENGTH+2,,AUTO
         7 000520   200257 236100                    LDQ     BIN_STOP$,,AUTO
         7 000521   000022 772000                    QRL     18
         7 000522   200360 136100                    SBLQ    LENGTH+2,,AUTO
         7 000523   000002 506007                    DIV     2,DL
         7 000524   000002 036007                    ADLQ    2,DL
         7 000525   200266 756100                    STQ     BIN_HIGH,,AUTO

             13379    4              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(B$EDEF) );

  13379  7 000526   200256 236100                    LDQ     BIN_START$,,AUTO
         7 000527   777776 036003                    ADLQ    -2,DU
         7 000530   200271 756100                    STQ     BIN_START1$,,AUTO

  13379  7 000531                       RU_ENTRY_SP* null
             13380    4   RU_ENTRY_SPLIT:     ;
             13381    4              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

  13381  7 000531   200265 236100                    LDQ     BIN_LOW,,AUTO
         7 000532   200266 036100                    ADLQ    BIN_HIGH,,AUTO
         7 000533   000001 772000                    QRL     1
         7 000534   200267 756100                    STQ     BIN_MID,,AUTO

             13382    4              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(B$EDEF) );

  13382  7 000535   000023 736000                    QLS     19
         7 000536   200271 036100                    ADLQ    BIN_START1$,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:130  
         7 000537   200260 756100                    STQ     BIN_RESULT$,,AUTO

             13383    4              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  13383  7 000540   200260 470500                    LDP0    BIN_RESULT$,,AUTO
         7 000541   000001 220100                    LDX0    1,,PR0
         7 000542   000000 636010                    EAQ     0,X0
         7 000543   200261 036100                    ADLQ    BIN_N$,,AUTO
         7 000544   200270 756100                    STQ     BIN_NTEMP$,,AUTO

             13384    4              IF BIN_NTEMP$ -> B$DNAME.TEXT

  13384  7 000545   200270 471500                    LDP1    BIN_NTEMP$,,AUTO
         7 000546   100000 221100                    LDX1    0,,PR1
         7 000547   200275 473500                    LDP3    NAME$,,AUTO
         7 000550   300000 222100                    LDX2    0,,PR3
         7 000551   040140 106540                    CMPC    fill='040'O
         7 000552   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         7 000553   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         7 000554   000560 603000 7                  TRC     s:13390

             13385    4                <
             13386    5                NAME$ -> B$DNAME.TEXT THEN DO;

             13387    5                 BIN_LOW = BIN_MID;

  13387  7 000555   200267 235100                    LDA     BIN_MID,,AUTO
         7 000556   200265 755100                    STA     BIN_LOW,,AUTO

             13388    5                 GOTO RU_ENTRY_CHECK;

  13388  7 000557   000564 710000 7                  TRA     RU_ENTRY_CHECK

             13389    5                 END;
             13390    4              IF BIN_NTEMP$ -> B$DNAME.TEXT

  13390  7 000560   000571 602000 7                  TNC     RU_ENTRY_FOUND
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:131  
         7 000561   000571 600000 7                  TZE     RU_ENTRY_FOUND

             13391    4                >
             13392    5                NAME$ -> B$DNAME.TEXT THEN DO;

             13393    5                 BIN_HIGH = BIN_MID;

  13393  7 000562   200267 235100                    LDA     BIN_MID,,AUTO
         7 000563   200266 755100                    STA     BIN_HIGH,,AUTO

  13393  7 000564                       RU_ENTRY_CH* null
             13394    5   RU_ENTRY_CHECK:        ;
             13395    5                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO RU_ENTRY_SPLIT;

  13395  7 000564   200265 236100                    LDQ     BIN_LOW,,AUTO
         7 000565   000001 036007                    ADLQ    1,DL
         7 000566   200266 116100                    CMPQ    BIN_HIGH,,AUTO
         7 000567   000531 602000 7                  TNC     RU_ENTRY_SPLIT

             13396                                                /* Here => looping or not found       */
             13397                                      /* Result -> < match => a boundary condition    */
             13398    5                 /*
             13399    5                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             13400    5                   <
             13401    5                  NAME$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             13401                            B$EDEF) );
             13402    5                 /**/
             13403    5                   GOTO RU_ENTRY_NOT_DEFINED;

  13403  7 000570   000600 710000 7                  TRA     RU_ENTRY_NOT_DEFINED

             13404    5                 END;
             13405    4              END;                         /* Else do;                           */
             13406    3   RU_ENTRY_FOUND:
             13407        /* Here -> found */
      385    13409        /* Here => found */
      386    13410    3                 CALL ADD_VECTOR_ELEMENT( NAME$->B$DNAME, BIN_RESULT$->B$EDEF );
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:132  

  13410  7 000571   200260 236100       RU_ENTRY_FO* LDQ     BIN_RESULT$,,AUTO
         7 000572   200352 756100                    STQ     @RUF$+1,,AUTO
         7 000573   200275 236100                    LDQ     NAME$,,AUTO
         7 000574   200351 756100                    STQ     BUFFER+21,,AUTO
         7 000575   003316 701000 7                  TSX1    ADD_VECTOR_ELEMENT
         7 000576   000000 011000                    NOP     0

      387    13411    4                 DO WHILE( '0'B );

  13411  7 000577   000623 710000 7                  TRA     s:13425

      388    13412    4   RU_ENTRY_NOT_DEFINED:
      389    13413        /*E*  ERROR: VXU-E$RU_ENTRY_NOT_DEFINED-C
      390    13414              MESSAGE: Transfer vector entry (from %FN) not defined: %U1.
      391    13415                       Empty slot reserved in transfer vector instead.
      392    13416        */
      393    13417    4                     VX_EFIELD1.COUNT = NAME$->B$DNAME.COUNT;

  13417  7 000600   200275 470500       RU_ENTRY_NO* LDP0    NAME$,,AUTO
         7 000601   000000 236100                    LDQ     0,,PR0
         7 000602   000011 736000                    QLS     9
         7 000603   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      394    13418    4                     VX_EFIELD1.CHARS = NAME$->B$DNAME.TEXT;

  13418  7 000604   000000 220100                    LDX0    0,,PR0
         7 000605   040000 100540                    MLR     fill='040'O
         7 000606   000000 400010                    ADSC9   0,,PR0                   cn=2,n=*X0
         7 000607   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      395    13419    4                     VX_FPT_ERRMSG.V.DCB# = DCBNUM(M$OF);

  13419  7 000610   000000 236007 xsym               LDQ     M$OF,DL
         7 000611   000000 620006                    EAX0    0,QL
         7 000612   000026 740000 xsym               STX0    VX_FPT_ERRMSG+22

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:133  
      396    13420                          %SCREAM( ERR#=E$RU_ENTRY_NOT_DEFINED, MID="'U'", LEVEL=@E$W_VX );

  13421  7 000613   000036 630400 8                  EPPR0   30
         7 000614   000022 631400 xsym               EPPR1   B_VECTNIL+18
         7 000615   000000 701000 xent               TSX1    VXE$ERROR
         7 000616   000000 011000                    NOP     0

      397    13423    4                     CALL EMPTY_SLOT( 1 );

  13423  7 000617   000020 236000 8                  LDQ     16
         7 000620   200351 756100                    STQ     BUFFER+21,,AUTO
         7 000621   003644 701000 7                  TSX1    EMPTY_SLOT
         7 000622   000000 011000                    NOP     0

      398    13424    4                     END;

      399    13425    3                 START$ = PINCRW( START$, SIZEW(B$EDEF) );

  13425  7 000623   200301 236100                    LDQ     START$,,AUTO
         7 000624   000002 036003                    ADLQ    2,DU
         7 000625   200301 756100                    STQ     START$,,AUTO

      400    13426    3                 I = I + 1;

  13426  7 000626   200314 054100                    AOS     I,,AUTO

      401    13427    3                 END;

  13427  7 000627   200302 116100                    CMPQ    STOP$,,AUTO
         7 000630   000423 602000 7                  TNC     s:13343

      402    13428    2             CALL VXF$CLOSE( VX_O.VECTOR_.RF$, 0/*@OF*/, 2/*@SAVE*/ );

  13428  7 000631   000042 630400 8                  EPPR0   34
         7 000632   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 000633   000000 701000 xent               TSX1    VXF$CLOSE
         7 000634   000000 011000                    NOP     0
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:134  

      403    13429    2             END;

  13429  7 000635   000645 710000 7                  TRA     s:13438

      404    13430    2         ELSE DO;

      405    13431    2             BIN_N$ = VX_ROOT$->VX$NODE.L_START.DN$;

  13431  7 000636   000000 470400 xsym               LDP0    VX_ROOT$
         7 000637   000031 236100                    LDQ     25,,PR0
         7 000640   200261 756100                    STQ     BIN_N$,,AUTO

      406    13432    2             BIN_START$ = VX_ROOT$->VX$NODE.L_START.ED$;

  13432  7 000641   000034 236100                    LDQ     28,,PR0
         7 000642   200256 756100                    STQ     BIN_START$,,AUTO

      407    13433    2             BIN_STOP$ = VX_ROOT$->VX$NODE.L_STOP.ED$;

  13433  7 000643   000046 236100                    LDQ     38,,PR0
         7 000644   200257 756100                    STQ     BIN_STOP$,,AUTO

      408    13434    2             END;

      409    13435        /*
      410    13436                          Process transfer vector name list
      411    13437        */
      412    13438    1         LIST$ = VX_O.VECTOR_.LIST$;

  13438  7 000645   000157 236000 xsym               LDQ     VX_O+111
         7 000646   200300 756100                    STQ     LIST$,,AUTO

      413    13439    2         DO I = 1 TO VX_O.VECTOR_.LIST_SIZE;

  13439  7 000647   000001 235007                    LDA     1,DL
         7 000650   200314 755100                    STA     I,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:135  
         7 000651   001155 710000 7                  TRA     s:13552+1

      414    13440    2             NAME1$ = PINCRW( LIST$, SIZEW(VX$VECTOR_LST ) );

  13440  7 000652   200300 236100                    LDQ     LIST$,,AUTO
         7 000653   000001 036003                    ADLQ    1,DU
         7 000654   200276 756100                    STQ     NAME1$,,AUTO

      415    13441    2             NEXT = LIST$->VX$VECTOR_LST.SIZEW1 + 1;

  13441  7 000655   200300 470500                    LDP0    LIST$,,AUTO
         7 000656   000000 236100                    LDQ     0,,PR0
         7 000657   000022 772000                    QRL     18
         7 000660   000001 036007                    ADLQ    1,DL
         7 000661   200315 756100                    STQ     NEXT,,AUTO

      416    13442    3             IF LIST$->VX$VECTOR_LST.SIZEW1 = 0 THEN DO; /* Empty slots */

  13442  7 000662   000000 220100                    LDX0    0,,PR0
         7 000663   000674 601000 7                  TNZ     s:13447

      417    13443    3                 SLOTS = LIST$->VX$VECTOR_LST.SIZEW2;

  13443  7 000664   000000 236100                    LDQ     0,,PR0
         7 000665   777777 376007                    ANQ     -1,DL
         7 000666   200323 756100                    STQ     SLOTS,,AUTO

      418    13444    3                 CALL EMPTY_SLOT( SLOTS );

  13444  7 000667   200323 631500                    EPPR1   SLOTS,,AUTO
         7 000670   200351 451500                    STP1    BUFFER+21,,AUTO
         7 000671   003644 701000 7                  TSX1    EMPTY_SLOT
         7 000672   000000 011000                    NOP     0

      419    13445    3                 END;

  13445  7 000673   001150 710000 7                  TRA     s:13551
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:136  

      420    13446    2             ELSE
      421    13447    3                 IF LIST$->VX$VECTOR_LST.SIZEW2 = 0 THEN DO;   /* Name */

  13447  7 000674   000000 721100                    LXL1    0,,PR0
         7 000675   001052 601000 7                  TNZ     s:13526

      422    13448                          %BIN_SEARCH(
      423    13449                          MATCH$=NAME1$,
      424    13450                          NAME_DISP=2,
      425    13451                          SIZE="SIZEW(B$EDEF)",
      426    13452                          SPLIT=NAME_SPLIT,
      427    13453                          FOUND=NAME_FOUND,
      428    13454                          CHECK=NAME_CHECK,
      429    13455                          ALTRETURN=NOT_DEFINED,
      430    13456                          EMPTY=NOT_DEFINED);
             13458    3           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_DEFINED;

  13458  7 000676   200256 236100                    LDQ     BIN_START$,,AUTO
         7 000677   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 000700   001031 600000 7                  TZE     NOT_DEFINED

             13459    4           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) < 17 THEN DO;

  13459  7 000701   200256 235100                    LDA     BIN_START$,,AUTO
         7 000702   000022 771000                    ARL     18
         7 000703   200360 755100                    STA     LENGTH+2,,AUTO
         7 000704   200257 236100                    LDQ     BIN_STOP$,,AUTO
         7 000705   000022 772000                    QRL     18
         7 000706   200360 136100                    SBLQ    LENGTH+2,,AUTO
         7 000707   000002 506007                    DIV     2,DL
         7 000710   000021 116007                    CMPQ    17,DL
         7 000711   000745 605000 7                  TPL     s:13476

             13460    4              BIN_RESULT$ = BIN_START$;        /* Sequential search                 */

  13460  7 000712   200256 236100                    LDQ     BIN_START$,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:137  
         7 000713   200260 756100                    STQ     BIN_RESULT$,,AUTO

             13461    5              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );

  13461  7 000714   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 000715   000717 600000 7                  TZE     s:13462
         7 000716   000744 603000 7                  TRC     s:13473

             13462    5                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  13462  7 000717   200260 470500                    LDP0    BIN_RESULT$,,AUTO
         7 000720   000001 220100                    LDX0    1,,PR0
         7 000721   000000 636010                    EAQ     0,X0
         7 000722   200261 036100                    ADLQ    BIN_N$,,AUTO
         7 000723   200270 756100                    STQ     BIN_NTEMP$,,AUTO

             13463    5                 IF BIN_NTEMP$ -> B$DNAME.TEXT

  13463  7 000724   200270 471500                    LDP1    BIN_NTEMP$,,AUTO
         7 000725   100000 221100                    LDX1    0,,PR1
         7 000726   200276 473500                    LDP3    NAME1$,,AUTO
         7 000727   300000 222100                    LDX2    0,,PR3
         7 000730   040140 106540                    CMPC    fill='040'O
         7 000731   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         7 000732   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         7 000733   000736 602000 7                  TNC     s:13471

             13464    5                   >=
             13465    6                   NAME1$ -> B$DNAME.TEXT THEN DO;

             13466    6                    IF BIN_NTEMP$ -> B$DNAME.TEXT

  13466  7 000734   001022 600000 7                  TZE     NAME_FOUND

             13467    6                      =
             13468    6                      NAME1$ -> B$DNAME.TEXT THEN GOTO NAME_FOUND;
             13469    6                    ELSE GOTO NOT_DEFINED;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:138  

  13469  7 000735   001031 710000 7                  TRA     NOT_DEFINED

             13470    6                    END;
             13471    5                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(B$EDEF) );

  13471  7 000736   200260 236100                    LDQ     BIN_RESULT$,,AUTO
         7 000737   000002 036003                    ADLQ    2,DU
         7 000740   200260 756100                    STQ     BIN_RESULT$,,AUTO

             13472    5                 END;                      /* Do while                           */

  13472  7 000741   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 000742   000717 602000 7                  TNC     s:13462
         7 000743   000717 600000 7                  TZE     s:13462

             13473    4              GOTO NOT_DEFINED;

  13473  7 000744   001031 710000 7                  TRA     NOT_DEFINED

             13474    4              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             13475    4           ELSE DO;                        /* Binary search                      */

             13476    4              BIN_LOW = 0;

  13476  7 000745   200265 450100                    STZ     BIN_LOW,,AUTO

             13477    4              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) + 2;

  13477  7 000746   200256 235100                    LDA     BIN_START$,,AUTO
         7 000747   000022 771000                    ARL     18
         7 000750   200360 755100                    STA     LENGTH+2,,AUTO
         7 000751   200257 236100                    LDQ     BIN_STOP$,,AUTO
         7 000752   000022 772000                    QRL     18
         7 000753   200360 136100                    SBLQ    LENGTH+2,,AUTO
         7 000754   000002 506007                    DIV     2,DL
         7 000755   000002 036007                    ADLQ    2,DL
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:139  
         7 000756   200266 756100                    STQ     BIN_HIGH,,AUTO

             13478    4              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(B$EDEF) );

  13478  7 000757   200256 236100                    LDQ     BIN_START$,,AUTO
         7 000760   777776 036003                    ADLQ    -2,DU
         7 000761   200271 756100                    STQ     BIN_START1$,,AUTO

  13478  7 000762                       NAME_SPLIT   null
             13479    4   NAME_SPLIT:     ;
             13480    4              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

  13480  7 000762   200265 236100                    LDQ     BIN_LOW,,AUTO
         7 000763   200266 036100                    ADLQ    BIN_HIGH,,AUTO
         7 000764   000001 772000                    QRL     1
         7 000765   200267 756100                    STQ     BIN_MID,,AUTO

             13481    4              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(B$EDEF) );

  13481  7 000766   000023 736000                    QLS     19
         7 000767   200271 036100                    ADLQ    BIN_START1$,,AUTO
         7 000770   200260 756100                    STQ     BIN_RESULT$,,AUTO

             13482    4              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  13482  7 000771   200260 470500                    LDP0    BIN_RESULT$,,AUTO
         7 000772   000001 220100                    LDX0    1,,PR0
         7 000773   000000 636010                    EAQ     0,X0
         7 000774   200261 036100                    ADLQ    BIN_N$,,AUTO
         7 000775   200270 756100                    STQ     BIN_NTEMP$,,AUTO

             13483    4              IF BIN_NTEMP$ -> B$DNAME.TEXT

  13483  7 000776   200270 471500                    LDP1    BIN_NTEMP$,,AUTO
         7 000777   100000 221100                    LDX1    0,,PR1
         7 001000   200276 473500                    LDP3    NAME1$,,AUTO
         7 001001   300000 222100                    LDX2    0,,PR3
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:140  
         7 001002   040140 106540                    CMPC    fill='040'O
         7 001003   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         7 001004   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         7 001005   001011 603000 7                  TRC     s:13489

             13484    4                <
             13485    5                NAME1$ -> B$DNAME.TEXT THEN DO;

             13486    5                 BIN_LOW = BIN_MID;

  13486  7 001006   200267 235100                    LDA     BIN_MID,,AUTO
         7 001007   200265 755100                    STA     BIN_LOW,,AUTO

             13487    5                 GOTO NAME_CHECK;

  13487  7 001010   001015 710000 7                  TRA     NAME_CHECK

             13488    5                 END;
             13489    4              IF BIN_NTEMP$ -> B$DNAME.TEXT

  13489  7 001011   001022 602000 7                  TNC     NAME_FOUND
         7 001012   001022 600000 7                  TZE     NAME_FOUND

             13490    4                >
             13491    5                NAME1$ -> B$DNAME.TEXT THEN DO;

             13492    5                 BIN_HIGH = BIN_MID;

  13492  7 001013   200267 235100                    LDA     BIN_MID,,AUTO
         7 001014   200266 755100                    STA     BIN_HIGH,,AUTO

  13492  7 001015                       NAME_CHECK   null
             13493    5   NAME_CHECK:        ;
             13494    5                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO NAME_SPLIT;

  13494  7 001015   200265 236100                    LDQ     BIN_LOW,,AUTO
         7 001016   000001 036007                    ADLQ    1,DL
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:141  
         7 001017   200266 116100                    CMPQ    BIN_HIGH,,AUTO
         7 001020   000762 602000 7                  TNC     NAME_SPLIT

             13495                                                /* Here => looping or not found       */
             13496                                      /* Result -> < match => a boundary condition    */
             13497    5                 /*
             13498    5                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             13499    5                   <
             13500    5                  NAME1$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW
             13500                            (B$EDEF) );
             13501    5                 /**/
             13502    5                   GOTO NOT_DEFINED;

  13502  7 001021   001031 710000 7                  TRA     NOT_DEFINED

             13503    5                 END;
             13504    4              END;                         /* Else do;                           */
             13505    3   NAME_FOUND:
             13506        /* Here -> found */
      431    13508        /* Here => found */
      432    13509    3                     CALL ADD_VECTOR_ELEMENT( NAME1$->B$DNAME, BIN_RESULT$->B$EDEF );

  13509  7 001022   200260 236100       NAME_FOUND   LDQ     BIN_RESULT$,,AUTO
         7 001023   200352 756100                    STQ     @RUF$+1,,AUTO
         7 001024   200276 236100                    LDQ     NAME1$,,AUTO
         7 001025   200351 756100                    STQ     BUFFER+21,,AUTO
         7 001026   003316 701000 7                  TSX1    ADD_VECTOR_ELEMENT
         7 001027   000000 011000                    NOP     0

      433    13510    4                     DO WHILE( '0'B );

  13510  7 001030   001150 710000 7                  TRA     s:13551

      434    13511    4   NOT_DEFINED:                      /* Here => name not found */
      435    13512        /*E*  ERROR: VXU-E$NOT_DEFINED_VX-W
      436    13513              MESSAGE: Transfer vector entry not defined: %U1.
      437    13514                       Empty slot reserved in transfer vector instead.
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:142  
      438    13515              DESCRIPTION: Self-explanatory.
      439    13516        */
      440    13517    4                         VX_EFIELD1.COUNT = NAME1$->B$DNAME.COUNT;

  13517  7 001031   200276 470500       NOT_DEFINED  LDP0    NAME1$,,AUTO
         7 001032   000000 236100                    LDQ     0,,PR0
         7 001033   000011 736000                    QLS     9
         7 001034   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      441    13518    4                         VX_EFIELD1.CHARS = NAME1$->B$DNAME.TEXT;

  13518  7 001035   000000 220100                    LDX0    0,,PR0
         7 001036   040000 100540                    MLR     fill='040'O
         7 001037   000000 400010                    ADSC9   0,,PR0                   cn=2,n=*X0
         7 001040   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      442    13519                              %SCREAM( ERR#=E$NOT_DEFINED_VX, LEVEL=@E$W_VX, MID="'U'" );

  13520  7 001041   000046 630400 8                  EPPR0   38
         7 001042   000022 631400 xsym               EPPR1   B_VECTNIL+18
         7 001043   000000 701000 xent               TSX1    VXE$ERROR
         7 001044   000000 011000                    NOP     0

      443    13522    4                         CALL EMPTY_SLOT( 1 );

  13522  7 001045   000020 236000 8                  LDQ     16
         7 001046   200351 756100                    STQ     BUFFER+21,,AUTO
         7 001047   003644 701000 7                  TSX1    EMPTY_SLOT
         7 001050   000000 011000                    NOP     0

      444    13523    4                         END;

      445    13524    3                     END;

  13524  7 001051   001150 710000 7                  TRA     s:13551

      446    13525    3                 ELSE DO;            /* Range */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:143  

      447    13526    3                     NAME2$ = PINCRW( NAME1$, LIST$->VX$VECTOR_LST.SIZEW1 );

  13526  7 001052   000000 636010                    EAQ     0,X0
         7 001053   200276 036100                    ADLQ    NAME1$,,AUTO
         7 001054   200277 756100                    STQ     NAME2$,,AUTO

      448    13527    3                     NEXT = NEXT + LIST$->VX$VECTOR_LST.SIZEW2;

  13527  7 001055   000000 236100                    LDQ     0,,PR0
         7 001056   777777 376007                    ANQ     -1,DL
         7 001057   200315 036100                    ADLQ    NEXT,,AUTO
         7 001060   200315 756100                    STQ     NEXT,,AUTO

      449    13528    3                    CALL FIND_RANGE_START( NAME1$->B$DNAME, START$ ) ALTRET(NO_RANGE);

  13528  7 001061   200301 631500                    EPPR1   START$,,AUTO
         7 001062   200352 451500                    STP1    @RUF$+1,,AUTO
         7 001063   200276 236100                    LDQ     NAME1$,,AUTO
         7 001064   200351 756100                    STQ     BUFFER+21,,AUTO
         7 001065   003160 701000 7                  TSX1    FIND_RANGE_START
         7 001066   001124 702000 7                  TSX2    NO_RANGE

      450    13529    3                     CALL FIND_RANGE_END( NAME2$->B$DNAME, START$, END$ ) ALTRET(
             13529                              NO_RANGE);

  13529  7 001067   200307 630500                    EPPR0   END$,,AUTO
         7 001070   200353 450500                    STP0    @TYPE+1,,AUTO
         7 001071   200301 631500                    EPPR1   START$,,AUTO
         7 001072   200352 451500                    STP1    @RUF$+1,,AUTO
         7 001073   200277 236100                    LDQ     NAME2$,,AUTO
         7 001074   200351 756100                    STQ     BUFFER+21,,AUTO
         7 001075   003232 701000 7                  TSX1    FIND_RANGE_END
         7 001076   001124 702000 7                  TSX2    NO_RANGE

      451    13530    4                     DO WHILE( START$ <= END$ );

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:144  
  13530  7 001077   200307 236100                    LDQ     END$,,AUTO
         7 001100   200301 116100                    CMPQ    START$,,AUTO
         7 001101   001123 602000 7                  TNC     s:13535

      452    13531    4                         NAME$ = PINCRW( BIN_N$, START$->B$EDEF.NPOINTER );

  13531  7 001102   200301 470500                    LDP0    START$,,AUTO
         7 001103   000001 220100                    LDX0    1,,PR0
         7 001104   000000 636010                    EAQ     0,X0
         7 001105   200261 036100                    ADLQ    BIN_N$,,AUTO
         7 001106   200275 756100                    STQ     NAME$,,AUTO

      453    13532    4                         CALL ADD_VECTOR_ELEMENT( NAME$->B$DNAME, START$->B$EDEF );

  13532  7 001107   200301 236100                    LDQ     START$,,AUTO
         7 001110   200352 756100                    STQ     @RUF$+1,,AUTO
         7 001111   200275 236100                    LDQ     NAME$,,AUTO
         7 001112   200351 756100                    STQ     BUFFER+21,,AUTO
         7 001113   003316 701000 7                  TSX1    ADD_VECTOR_ELEMENT
         7 001114   000000 011000                    NOP     0

      454    13533    4                         START$ = PINCRW( START$, SIZEW(B$EDEF) );

  13533  7 001115   200301 236100                    LDQ     START$,,AUTO
         7 001116   000002 036003                    ADLQ    2,DU
         7 001117   200301 756100                    STQ     START$,,AUTO

      455    13534    4                         END;

  13534  7 001120   200307 116100                    CMPQ    END$,,AUTO
         7 001121   001102 602000 7                  TNC     s:13531
         7 001122   001102 600000 7                  TZE     s:13531

      456    13535    4                     DO WHILE( '0'B );

  13535  7 001123   001150 710000 7                  TRA     s:13551

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:145  
      457    13536    4   NO_RANGE:
      458    13537        /*E*  ERROR: VXU-E$NO_RANGE_VX-W
      459    13538              MESSAGE: No transfer vector entries exist for the range:
      460    13539                       %U1 - %U2.
      461    13540              DESCRIPTION: Self-explantory.
      462    13541        */
      463    13542    4                         VX_EFIELD1.COUNT = NAME1$->B$DNAME.COUNT;

  13542  7 001124   200276 470500       NO_RANGE     LDP0    NAME1$,,AUTO
         7 001125   000000 236100                    LDQ     0,,PR0
         7 001126   000011 736000                    QLS     9
         7 001127   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      464    13543    4                         VX_EFIELD1.CHARS = NAME1$->B$DNAME.TEXT;

  13543  7 001130   000000 220100                    LDX0    0,,PR0
         7 001131   040000 100540                    MLR     fill='040'O
         7 001132   000000 400010                    ADSC9   0,,PR0                   cn=2,n=*X0
         7 001133   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      465    13544    4                         VX_EFIELD2.COUNT = NAME2$->B$DNAME.COUNT;

  13544  7 001134   200277 471500                    LDP1    NAME2$,,AUTO
         7 001135   100000 236100                    LDQ     0,,PR1
         7 001136   000011 736000                    QLS     9
         7 001137   000000 552040 xsym               STBQ    VX_EFIELD2,'40'O

      466    13545    4                         VX_EFIELD2.CHARS = NAME2$->B$DNAME.TEXT;

  13545  7 001140   100000 220100                    LDX0    0,,PR1
         7 001141   040000 100540                    MLR     fill='040'O
         7 001142   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0
         7 001143   000000 200117 xsym               ADSC9   VX_EFIELD2               cn=1,n=79

      467    13546                              %SCREAM( ERR#=E$NO_RANGE_VX, LEVEL=@E$W_VX, MID="'U'" );

  13547  7 001144   000053 630400 8                  EPPR0   43
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:146  
         7 001145   000022 631400 xsym               EPPR1   B_VECTNIL+18
         7 001146   000000 701000 xent               TSX1    VXE$ERROR
         7 001147   000000 011000                    NOP     0

      468    13549    4                         END;

      469    13550    3                     END;

      470    13551    2             LIST$ = PINCRW( LIST$, NEXT );

  13551  7 001150   200315 236100                    LDQ     NEXT,,AUTO
         7 001151   000022 736000                    QLS     18
         7 001152   200300 036100                    ADLQ    LIST$,,AUTO
         7 001153   200300 756100                    STQ     LIST$,,AUTO

      471    13552    2             END;

  13552  7 001154   200314 054100                    AOS     I,,AUTO
         7 001155   000156 236000 xsym               LDQ     VX_O+110
         7 001156   000652 604000 7                  TMI     s:13440
         7 001157   200314 116100                    CMPQ    I,,AUTO
         7 001160   000652 605000 7                  TPL     s:13440

      472    13553        /*
      473    13554                          Finish vector
      474    13555         */
      475    13556    1         CALL FIND_ENTDEF( DN_RECORD.TV_EN_NAME, P$, 0 );

  13556  7 001161   000016 236000 8                  LDQ     14
         7 001162   200353 756100                    STQ     @TYPE+1,,AUTO
         7 001163   200272 630500                    EPPR0   P$,,AUTO
         7 001164   200352 450500                    STP0    @RUF$+1,,AUTO
         7 001165   000033 236000 8                  LDQ     27
         7 001166   200351 756100                    STQ     BUFFER+21,,AUTO
         7 001167   002747 701000 7                  TSX1    FIND_ENTDEF
         7 001170   000000 011000                    NOP     0

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:147  
      476    13557    1         P$->B$EDEF.OU.OFFSET = OFFSET;

  13557  7 001171   000305 720000 2                  LXL0    OFFSET
         7 001172   200272 470500                    LDP0    P$,,AUTO
         7 001173   000000 440100                    SXL0    0,,PR0

      477    13558    1         ED_RECORD.TV_EN_EDEF.OU.OFFSET = OFFSET;

  13558  7 001174   000305 720000 2                  LXL0    OFFSET
         7 001175   000264 440000 2                  SXL0    ED_RECORD+2

      478    13559    1         CALL EMPTY_SLOT( 1 );

  13559  7 001176   000020 236000 8                  LDQ     16
         7 001177   200351 756100                    STQ     BUFFER+21,,AUTO
         7 001200   003644 701000 7                  TSX1    EMPTY_SLOT
         7 001201   000000 011000                    NOP     0

      479    13560    1         VX_ROOT$->VX$NODE.HEAD$->VX$LST.SC_HEAD$->VX$LLIST_SC.BASE$->VX$SC.SIZE =
             13560                  OFFSET;

  13560  7 001202   000000 470400 xsym               LDP0    VX_ROOT$
         7 001203   000004 471500                    LDP1    4,,PR0
         7 001204   100003 473500                    LDP3    3,,PR1
         7 001205   300001 474500                    LDP4    1,,PR3
         7 001206   000305 720000 2                  LXL0    OFFSET
         7 001207   400001 440100                    SXL0    1,,PR4

      480    13561    1         SC_RECORD.SIZE = OFFSET;

  13561  7 001210   000305 720000 2                  LXL0    OFFSET
         7 001211   000260 440000 2                  SXL0    SC_RECORD

      481    13562        /*
      482    13563                          Write the last relocation records
      483    13564        */
      484    13565    2         IF RELOC_CURR$ ~= RELOC_START$ THEN DO;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:148  

  13565  7 001212   200312 236100                    LDQ     RELOC_CURR$,,AUTO
         7 001213   200310 116100                    CMPQ    RELOC_START$,,AUTO
         7 001214   001234 600000 7                  TZE     s:13569

      485    13566    2             FPT_WRITE.BUF_.BOUND = POFFC( RELOC_CURR$, RELOC_START$ ) - 1;

  13566  7 001215   200310 236100                    LDQ     RELOC_START$,,AUTO
         7 001216   000020 772000                    QRL     16
         7 001217   200360 756100                    STQ     LENGTH+2,,AUTO
         7 001220   200312 236100                    LDQ     RELOC_CURR$,,AUTO
         7 001221   000020 772000                    QRL     16
         7 001222   200360 136100                    SBLQ    LENGTH+2,,AUTO
         7 001223   000001 136007                    SBLQ    1,DL
         7 001224   000020 736000                    QLS     16
         7 001225   000210 676000 2                  ERQ     FPT_WRITE+4
         7 001226   000034 376000 xsym               ANQ     B_VECTNIL+28
         7 001227   000210 656000 2                  ERSQ    FPT_WRITE+4

      486    13567    2             CALL M$WRITE(FPT_WRITE)    ALTRET(WRITE_ERROR);

  13567  7 001230   000204 630400 2                  EPPR0   FPT_WRITE
         7 001231   440001 713400                    CLIMB   alt,write
         7 001232   401400 401760                    pmme    nvectors=4
         7 001233   002735 702000 7                  TSX2    OPEN_ERROR

      487    13568    2             END;

      488    13569    1         REPEAT_TRA_RELOC_REC.OPERAND = OFFSET;

  13569  7 001234   000305 720000 2                  LXL0    OFFSET
         7 001235   000274 440000 2                  SXL0    REPEAT_TRA_RELOC_REC

      489    13570    1         FPT_WRITE.KEY_ = VECTOR( REPEAT_TRA_RELOC_REC_KEY );

  13570  7 001236   000060 237000 8                  LDAQ    48
         7 001237   000206 757000 2                  STAQ    FPT_WRITE+2
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:149  

      490    13571    1         FPT_WRITE.BUF_ = VECTOR( REPEAT_TRA_RELOC_REC );

  13571  7 001240   000062 237000 8                  LDAQ    50
         7 001241   000210 757000 2                  STAQ    FPT_WRITE+4

      491    13572    1         CALL M$WRITE(FPT_WRITE)       ALTRET(WRITE_ERROR);

  13572  7 001242   000204 630400 2                  EPPR0   FPT_WRITE
         7 001243   440001 713400                    CLIMB   alt,write
         7 001244   401400 401760                    pmme    nvectors=4
         7 001245   002735 702000 7                  TSX2    OPEN_ERROR

      492    13573        /*
      493    13574                          Put B_VERSION after the transfer vector for compatiblity
      494    13575                          with previous versions of the transfer vector.
      495    13576        */
      496    13577    2         IF VX_SPC.B$.MINE.VERSION = 1 THEN DO;

  13577  7 001246   000050 235000 xsym               LDA     VX_SPC+40
         7 001247   000001 115007                    CMPA    1,DL
         7 001250   001270 601000 7                  TNZ     s:13587

      497    13578    2             VX_BIAS.I.RPROC = VX_BIAS.I.RPROC - 2;

  13578  7 001251   000002 336007                    LCQ     2,DL
         7 001252   000001 056000 xsym               ASQ     VX_BIAS+1

      498    13579    2             VX_SPC.B$.VALUE.VERSION = OFFSET + 4;

  13579  7 001253   000305 235000 2                  LDA     OFFSET
         7 001254   000004 035007                    ADLA    4,DL
         7 001255   000036 755000 xsym               STA     VX_SPC+30

      499    13580    2             OFFSET = OFFSET + 2;

  13580  7 001256   000002 236007                    LDQ     2,DL
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:150  
         7 001257   000305 056000 2                  ASQ     OFFSET

      500    13581    2             VX_ROOT$->VX$NODE.HEAD$->VX$LST.SC_HEAD$->VX$LLIST_SC.BASE$->VX$SC.SIZE =
             13581                      OFFSET;

  13581  7 001260   000000 470400 xsym               LDP0    VX_ROOT$
         7 001261   000004 471500                    LDP1    4,,PR0
         7 001262   100003 473500                    LDP3    3,,PR1
         7 001263   300001 474500                    LDP4    1,,PR3
         7 001264   000305 720000 2                  LXL0    OFFSET
         7 001265   400001 440100                    SXL0    1,,PR4

      501    13582    2             SC_RECORD.SIZE = OFFSET;

  13582  7 001266   000305 720000 2                  LXL0    OFFSET
         7 001267   000260 440000 2                  SXL0    SC_RECORD

      502    13583    2             END;

      503    13584        /*
      504    13585                      Write section record and entdef record
      505    13586        */
      506    13587    1         FPT_WRITE.KEY_ = VECTOR( FORM1_KEY );

  13587  7 001270   000000 237000 8                  LDAQ    0
         7 001271   000206 757000 2                  STAQ    FPT_WRITE+2

      507    13588    2         DO I = 1 TO 2;

  13588  7 001272   000001 235007                    LDA     1,DL
         7 001273   200314 755100                    STA     I,,AUTO

      508    13589    2             FORM1_KEY.REC_TYPE = FORM1_REC_TYPES(I);

  13589  7 001274   200314 720100                    LXL0    I,,AUTO
         7 001275   000015 236010 6                  LDQ     FORM1_REC_TYPES,X0
         7 001276   000011 736000                    QLS     9
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:151  
         7 001277   000267 552010 2                  STBQ    FORM1_KEY+1,'10'O

      509    13590    2             FPT_WRITE.BUF_ = FORM1_BUF_(I);

  13590  7 001300   200314 235100                    LDA     I,,AUTO
         7 001301   000001 735000                    ALS     1
         7 001302   000020 237005 6                  LDAQ    FORM1_BUF_,AL
         7 001303   000210 757000 2                  STAQ    FPT_WRITE+4

      510    13591    2             CALL M$WRITE(FPT_WRITE)    ALTRET(WRITE_ERROR);

  13591  7 001304   000204 630400 2                  EPPR0   FPT_WRITE
         7 001305   440001 713400                    CLIMB   alt,write
         7 001306   401400 401760                    pmme    nvectors=4
         7 001307   002735 702000 7                  TSX2    OPEN_ERROR

      511    13592    2             END;

  13592  7 001310   200314 054100                    AOS     I,,AUTO
         7 001311   200314 235100                    LDA     I,,AUTO
         7 001312   000002 115007                    CMPA    2,DL
         7 001313   001274 604400 7                  TMOZ    s:13589

      512    13593        /*
      513    13594                          Write referenced names record
      514    13595        */
      515    13596    1         FORM1_KEY.REC_TYPE = 2;

  13596  7 001314   002000 236007                    LDQ     1024,DL
         7 001315   000267 552010 2                  STBQ    FORM1_KEY+1,'10'O

      516    13597    1         HEAD_RECORD.RN_SIZE = RN_SIZE;

  13597  7 001316   000310 720000 2                  LXL0    RN_SIZE
         7 001317   000231 740000 2                  STX0    HEAD_RECORD+6

      517    13598    1         HEAD_RECORD.RN_PAGE = RN_SIZE;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:152  

  13598  7 001320   000231 440000 2                  SXL0    HEAD_RECORD+6

      518    13599    1         IF VX_PASS2_REF.OU.MAX.RN < RN_SIZE THEN VX_PASS2_REF.OU.MAX.RN = RN_SIZE;

  13599  7 001321   000000 236000 xsym               LDQ     VX_PASS2_REF
         7 001322   001327 604000 7                  TMI     s:13600
         7 001323   000310 116000 2                  CMPQ    RN_SIZE
         7 001324   001327 605000 7                  TPL     s:13600

  13599  7 001325   000310 235000 2                  LDA     RN_SIZE
         7 001326   000000 755000 xsym               STA     VX_PASS2_REF

      519    13600    1         FPT_WRITE.BUF_.BUF$ = RN_START$;

  13600  7 001327   000303 236000 2                  LDQ     RN_START$
         7 001330   000211 756000 2                  STQ     FPT_WRITE+5

      520    13601    1         IF RN_SIZE = 0

  13601  7 001331   000310 235000 2                  LDA     RN_SIZE
         7 001332   001336 601000 7                  TNZ     s:13605

      521    13602    1         THEN
      522    13603    1             FPT_WRITE.BUF_.BOUND = 0;

  13603  7 001333   177777 236007                    LDQ     65535,DL
         7 001334   000210 356000 2                  ANSQ    FPT_WRITE+4
         7 001335   001345 710000 7                  TRA     s:13606

      523    13604    1         ELSE
      524    13605    1             FPT_WRITE.BUF_.BOUND = ( RN_SIZE * 4 ) - 1;

  13605  7 001336   000310 236000 2                  LDQ     RN_SIZE
         7 001337   000002 736000                    QLS     2
         7 001340   000001 136007                    SBLQ    1,DL
         7 001341   000020 736000                    QLS     16
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:153  
         7 001342   000210 676000 2                  ERQ     FPT_WRITE+4
         7 001343   000034 376000 xsym               ANQ     B_VECTNIL+28
         7 001344   000210 656000 2                  ERSQ    FPT_WRITE+4

      525    13606    1         CALL M$WRITE(FPT_WRITE)       ALTRET(WRITE_ERROR);

  13606  7 001345   000204 630400 2                  EPPR0   FPT_WRITE
         7 001346   440001 713400                    CLIMB   alt,write
         7 001347   401400 401760                    pmme    nvectors=4
         7 001350   002735 702000 7                  TSX2    OPEN_ERROR

      526    13607
      527    13608        /*
      528    13609                          Fixup referenced names and add to root nodes defined names.
      529    13610        */
      530    13611    1         I = 0;

  13611  7 001351   200314 450100                    STZ     I,,AUTO

      531    13612    2         DO WHILE( I < RN_SIZE );

  13612  7 001352   200314 236100                    LDQ     I,,AUTO
         7 001353   000310 116000 2                  CMPQ    RN_SIZE
         7 001354   001404 605000 7                  TPL     s:13618

      532    13613    2             NAME$ = PINCRW( RN_START$, I );

  13613  7 001355   200314 236100                    LDQ     I,,AUTO
         7 001356   000022 736000                    QLS     18
         7 001357   000303 036000 2                  ADLQ    RN_START$
         7 001360   200275 756100                    STQ     NAME$,,AUTO

      533    13614    2             I = I + ((NAME$->C$DNAME.COUNT+6)/4);

  13614  7 001361   200275 470500                    LDP0    NAME$,,AUTO
         7 001362   000000 236100                    LDQ     0,,PR0
         7 001363   000022 772000                    QRL     18
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:154  
         7 001364   000006 036007                    ADLQ    6,DL
         7 001365   000002 772000                    QRL     2
         7 001366   200314 036100                    ADLQ    I,,AUTO
         7 001367   200314 756100                    STQ     I,,AUTO

      534    13615    2             CALL INSERT(C$DNAME.TEXT, C$DNAME.COUNT, 1, '_' );

  13615  7 001370   000000 236100                    LDQ     0,,PR0
         7 001371   000022 772000                    QRL     18
         7 001372   040106 100400                    MLR     fill='040'O
         7 001373   000064 000001 8                  ADSC9   52                       cn=0,n=1
         7 001374   000000 400001                    ADSC9   0,Q,PR0                  cn=2,n=1

      535    13616    2             C$DNAME.COUNT = C$DNAME.COUNT + 1;

  13616  7 001375   200275 470500                    LDP0    NAME$,,AUTO
         7 001376   000000 220100                    LDX0    0,,PR0
         7 001377   000001 621010                    EAX1    1,X0
         7 001400   000000 741100                    STX1    0,,PR0

      536    13617    2             END;

  13617  7 001401   200314 236100                    LDQ     I,,AUTO
         7 001402   000310 116000 2                  CMPQ    RN_SIZE
         7 001403   001355 604000 7                  TMI     s:13613

      537    13618    1         VX_ROOT$->VX$NODE.L_SIZE.DN = VX_ROOT$->VX$NODE.L_SIZE.DN + RN_SIZE;

  13618  7 001404   000000 470400 xsym               LDP0    VX_ROOT$
         7 001405   000055 236100                    LDQ     45,,PR0
         7 001406   000310 036000 2                  ADLQ    RN_SIZE
         7 001407   000055 756100                    STQ     45,,PR0

      538    13619    1         VX_ROOT$->VX$NODE.L_STOP.DN$ = PINCRW( RN_START$, RN_SIZE );

  13619  7 001410   000310 236000 2                  LDQ     RN_SIZE
         7 001411   000022 736000                    QLS     18
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:155  
         7 001412   000303 036000 2                  ADLQ    RN_START$
         7 001413   000043 756100                    STQ     35,,PR0

      539    13620        /*
      540    13621                          Sort entdefs by name
      541    13622        */
      542    13623    1         CALL VXQ$SORT( VX_ROOT$->VX$NODE.L_START.DN$,

  13623  7 001414   000016 236000 8                  LDQ     14
         7 001415   200366 756100                    STQ     LENGTH+8,,AUTO
         7 001416   000020 237000 8                  LDAQ    16
         7 001417   200364 757100                    STAQ    LENGTH+6,,AUTO
         7 001420   000017 236000 8                  LDQ     15
         7 001421   200363 756100                    STQ     LENGTH+5,,AUTO
         7 001422   000000 236000 xsym               LDQ     VX_ROOT$
         7 001423   000046 036003                    ADLQ    38,DU
         7 001424   200362 756100                    STQ     LENGTH+4,,AUTO
         7 001425   000000 236000 xsym               LDQ     VX_ROOT$
         7 001426   000034 036003                    ADLQ    28,DU
         7 001427   200361 756100                    STQ     LENGTH+3,,AUTO
         7 001430   000000 236000 xsym               LDQ     VX_ROOT$
         7 001431   000031 036003                    ADLQ    25,DU
         7 001432   200360 756100                    STQ     LENGTH+2,,AUTO
         7 001433   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 001434   000025 631400 xsym               EPPR1   B_VECTNIL+21
         7 001435   000000 701000 xent               TSX1    VXQ$SORT
         7 001436   000000 011000                    NOP     0

      543    13624    1                 VX_ROOT$->VX$NODE.L_START.ED$,
      544    13625    1                 VX_ROOT$->VX$NODE.L_STOP.ED$,
      545    13626    1                 SIZEW(B$EDEF), 1/*@BY_NAME*/, 2, 0 );
      546    13627        /*
      547    13628                          Write entref record
      548    13629        */
      549    13630    1         FORM1_KEY.REC_TYPE = 5;

  13630  7 001437   005000 236007                    LDQ     2560,DL
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:156  
         7 001440   000267 552010 2                  STBQ    FORM1_KEY+1,'10'O

      550    13631    1         HEAD_RECORD.ER_SIZE = ER_SIZE;

  13631  7 001441   000307 720000 2                  LXL0    ER_SIZE
         7 001442   000233 740000 2                  STX0    HEAD_RECORD+8

      551    13632    1         HEAD_RECORD.ER_PAGE = ER_SIZE;

  13632  7 001443   000233 440000 2                  SXL0    HEAD_RECORD+8

      552    13633    1         IF VX_PASS2_REF.OU.MAX.ER < ER_SIZE THEN VX_PASS2_REF.OU.MAX.ER = ER_SIZE;

  13633  7 001444   000001 236000 xsym               LDQ     VX_PASS2_REF+1
         7 001445   001452 604000 7                  TMI     s:13634
         7 001446   000307 116000 2                  CMPQ    ER_SIZE
         7 001447   001452 605000 7                  TPL     s:13634

  13633  7 001450   000307 235000 2                  LDA     ER_SIZE
         7 001451   000001 755000 xsym               STA     VX_PASS2_REF+1

      553    13634    1         FPT_WRITE.BUF_.BUF$ = ER_START$;

  13634  7 001452   000304 236000 2                  LDQ     ER_START$
         7 001453   000211 756000 2                  STQ     FPT_WRITE+5

      554    13635    1         IF ER_SIZE = 0

  13635  7 001454   000307 235000 2                  LDA     ER_SIZE
         7 001455   001461 601000 7                  TNZ     s:13639

      555    13636    1         THEN
      556    13637    1             FPT_WRITE.BUF_.BOUND = 0;

  13637  7 001456   177777 236007                    LDQ     65535,DL
         7 001457   000210 356000 2                  ANSQ    FPT_WRITE+4
         7 001460   001470 710000 7                  TRA     s:13640
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:157  

      557    13638    1         ELSE
      558    13639    1             FPT_WRITE.BUF_.BOUND = ( ER_SIZE * 4 ) - 1;

  13639  7 001461   000307 236000 2                  LDQ     ER_SIZE
         7 001462   000002 736000                    QLS     2
         7 001463   000001 136007                    SBLQ    1,DL
         7 001464   000020 736000                    QLS     16
         7 001465   000210 676000 2                  ERQ     FPT_WRITE+4
         7 001466   000034 376000 xsym               ANQ     B_VECTNIL+28
         7 001467   000210 656000 2                  ERSQ    FPT_WRITE+4

      559    13640    1         CALL M$WRITE(FPT_WRITE)       ALTRET(WRITE_ERROR);

  13640  7 001470   000204 630400 2                  EPPR0   FPT_WRITE
         7 001471   440001 713400                    CLIMB   alt,write
         7 001472   401400 401760                    pmme    nvectors=4
         7 001473   002735 702000 7                  TSX2    OPEN_ERROR

      560    13641        /*
      561    13642                          Write the head record
      562    13643        */
      563    13644    1         FPT_WRITE.KEY_ = VECTOR( HEAD_KEY );

  13644  7 001474   000002 237000 8                  LDAQ    2
         7 001475   000206 757000 2                  STAQ    FPT_WRITE+2

      564    13645    1         FPT_WRITE.BUF_ = VECTOR( HEAD_RECORD );

  13645  7 001476   000004 237000 8                  LDAQ    4
         7 001477   000210 757000 2                  STAQ    FPT_WRITE+4

      565    13646    1         CALL M$WRITE(FPT_WRITE)       ALTRET(WRITE_ERROR);

  13646  7 001500   000204 630400 2                  EPPR0   FPT_WRITE
         7 001501   440001 713400                    CLIMB   alt,write
         7 001502   401400 401760                    pmme    nvectors=4
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:158  
         7 001503   002735 702000 7                  TSX2    OPEN_ERROR

      566    13647        /*
      567    13648                          Close the ou file and free the memory used.
      568    13649        */
      569    13650    1         CALL M$CLOSE(FPT_CLOSE) ALTRET(CLOSE_ERR);

  13650  7 001504   000072 630400 2                  EPPR0   FPT_CLOSE
         7 001505   450001 713400                    CLIMB   alt,close
         7 001506   406000 401760                    pmme    nvectors=13
         7 001507   002735 702000 7                  TSX2    OPEN_ERROR

      570    13651    1         CALL VXF$FREE( 3/*@SD_DS_1*/, SIZE, 1);

  13651  7 001510   000020 236000 8                  LDQ     16
         7 001511   200362 756100                    STQ     LENGTH+4,,AUTO
         7 001512   200322 630500                    EPPR0   SIZE,,AUTO
         7 001513   200361 450500                    STP0    LENGTH+3,,AUTO
         7 001514   000024 236000 8                  LDQ     20
         7 001515   200360 756100                    STQ     LENGTH+2,,AUTO
         7 001516   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 001517   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 001520   000000 701000 xent               TSX1    VXF$FREE
         7 001521   000000 011000                    NOP     0

      571    13652    1         RETURN;

  13652  7 001522   000000 702200 xent               TSX2  ! X66_ARET

      572    13653        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:159  
      573    13654    1   VXU$FINISH_VECTOR: ENTRY;

  13654  7 001523   000000 700200 xent  VXU$FINISH_* TSX0  ! X66_AUTO_0
         7 001524   000370 000000                    ZERO    248,0

      574    13655
      575    13656
      576    13657    1         SIZE = 0;

  13657  7 001525   200322 450100                    STZ     SIZE,,AUTO

      577    13658    1         CALL READ_RUN_UNIT( VX_RUF$, 1/*@RF*/, 1 );

  13658  7 001526   000066 237000 8                  LDAQ    54
         7 001527   200352 757100                    STAQ    @RUF$+1,,AUTO
         7 001530   000065 236000 8                  LDQ     53
         7 001531   200351 756100                    STQ     BUFFER+21,,AUTO
         7 001532   003726 701000 7                  TSX1    READ_RUN_UNIT
         7 001533   000000 011000                    NOP     0

      578    13659    1         BIN_N$ = RU_DNAME$;

  13659  7 001534   200305 236100                    LDQ     RU_DNAME$,,AUTO
         7 001535   200261 756100                    STQ     BIN_N$,,AUTO

      579    13660    1         BIN_START$ = RU_EDEF$;

  13660  7 001536   200306 236100                    LDQ     RU_EDEF$,,AUTO
         7 001537   200256 756100                    STQ     BIN_START$,,AUTO

      580    13661    1         BIN_STOP$ = PINCRW( RU_EDEF$, RU_EDEF_SIZE-SIZEW(B$EDEF) );

  13661  7 001540   200317 236100                    LDQ     RU_EDEF_SIZE,,AUTO
         7 001541   000022 736000                    QLS     18
         7 001542   000002 136003                    SBLQ    2,DU
         7 001543   200306 036100                    ADLQ    RU_EDEF$,,AUTO
         7 001544   200257 756100                    STQ     BIN_STOP$,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:160  

      581    13662        /*
      582    13663                          Sort entdefs by value
      583    13664        */
      584    13665    1        CALL VXQ$SORT_V(BIN_N$,BIN_START$,BIN_STOP$,SIZEW(B$EDEF),0/*@BY_VALUE*/,2,4);

  13665  7 001545   000031 236000 8                  LDQ     25
         7 001546   200366 756100                    STQ     LENGTH+8,,AUTO
         7 001547   000016 237000 8                  LDAQ    14
         7 001550   200364 757100                    STAQ    LENGTH+6,,AUTO
         7 001551   000017 236000 8                  LDQ     15
         7 001552   200363 756100                    STQ     LENGTH+5,,AUTO
         7 001553   200257 630500                    EPPR0   BIN_STOP$,,AUTO
         7 001554   200362 450500                    STP0    LENGTH+4,,AUTO
         7 001555   200256 631500                    EPPR1   BIN_START$,,AUTO
         7 001556   200361 451500                    STP1    LENGTH+3,,AUTO
         7 001557   200261 633500                    EPPR3   BIN_N$,,AUTO
         7 001560   200360 453500                    STP3    LENGTH+2,,AUTO
         7 001561   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 001562   000025 631400 xsym               EPPR1   B_VECTNIL+21
         7 001563   000000 701000 xent               TSX1    VXQ$SORT_V
         7 001564   000000 011000                    NOP     0

      585    13666        /*
      586    13667                          Sort entdefs not in transfer vector by name.
      587    13668        */
      588    13669    1         CALL FIND_ENTDEF( DN_RECORD.TV_ST_NAME, START$, 1 );

  13669  7 001565   000020 236000 8                  LDQ     16
         7 001566   200353 756100                    STQ     @TYPE+1,,AUTO
         7 001567   200301 630500                    EPPR0   START$,,AUTO
         7 001570   200352 450500                    STP0    @RUF$+1,,AUTO
         7 001571   000032 236000 8                  LDQ     26
         7 001572   200351 756100                    STQ     BUFFER+21,,AUTO
         7 001573   002747 701000 7                  TSX1    FIND_ENTDEF
         7 001574   000000 011000                    NOP     0

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:161  
      589    13670    1         ED_RECORD.TV_ST_EDEF = START$->B$EDEF;

  13670  7 001575   200301 470500                    LDP0    START$,,AUTO
         7 001576   000000 100500                    MLR     fill='000'O
         7 001577   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         7 001600   000262 000010 2                  ADSC9   ED_RECORD                cn=0,n=8

      590    13671    2         IF START$ ~= RU_EDEF$ THEN DO;

  13671  7 001601   200301 236100                    LDQ     START$,,AUTO
         7 001602   200306 116100                    CMPQ    RU_EDEF$,,AUTO
         7 001603   001624 600000 7                  TZE     s:13679

      591    13672    2             P$ = PINCRW( START$, -SIZEW(B$EDEF) );

  13672  7 001604   777776 036003                    ADLQ    -2,DU
         7 001605   200272 756100                    STQ     P$,,AUTO

      592    13673    3             IF P$->B$EDEF.ISADDR = START$->B$EDEF.ISADDR THEN DO;

  13673  7 001606   200272 471500                    LDP1    P$,,AUTO
         7 001607   100000 236100                    LDQ     0,,PR1
         7 001610   000000 676100                    ERQ     0,,PR0
         7 001611   000032 376000 xsym               ANQ     B_VECTNIL+26
         7 001612   001624 601000 7                  TNZ     s:13679

      593    13674    3                 START$->B$EDEF = P$->B$EDEF;

  13674  7 001613   000100 100500                    MLR     fill='000'O
         7 001614   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
         7 001615   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

      594    13675    3                 P$->B$EDEF = ED_RECORD.TV_ST_EDEF;

  13675  7 001616   200272 470500                    LDP0    P$,,AUTO
         7 001617   000262 237000 2                  LDAQ    ED_RECORD
         7 001620   000000 755100                    STA     0,,PR0
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:162  
         7 001621   000001 756100                    STQ     1,,PR0

      595    13676    3                 START$ = P$;

  13676  7 001622   200272 236100                    LDQ     P$,,AUTO
         7 001623   200301 756100                    STQ     START$,,AUTO

      596    13677    3                 END;

      597    13678    2             END;

      598    13679    1         CALL FIND_ENTDEF( DN_RECORD.TV_EN_NAME, STOP$, 1 );

  13679  7 001624   000020 236000 8                  LDQ     16
         7 001625   200353 756100                    STQ     @TYPE+1,,AUTO
         7 001626   200302 630500                    EPPR0   STOP$,,AUTO
         7 001627   200352 450500                    STP0    @RUF$+1,,AUTO
         7 001630   000033 236000 8                  LDQ     27
         7 001631   200351 756100                    STQ     BUFFER+21,,AUTO
         7 001632   002747 701000 7                  TSX1    FIND_ENTDEF
         7 001633   000000 011000                    NOP     0

      599    13680    1         ED_RECORD.TV_EN_EDEF = STOP$->B$EDEF;

  13680  7 001634   200302 470500                    LDP0    STOP$,,AUTO
         7 001635   000000 100500                    MLR     fill='000'O
         7 001636   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         7 001637   000264 000010 2                  ADSC9   ED_RECORD+2              cn=0,n=8

      600    13681    1         SIZE = POFFW( START$, RU_EDEF$ ) / SIZEW(B$EDEF);

  13681  7 001640   200306 235100                    LDA     RU_EDEF$,,AUTO
         7 001641   000022 771000                    ARL     18
         7 001642   200360 755100                    STA     LENGTH+2,,AUTO
         7 001643   200301 236100                    LDQ     START$,,AUTO
         7 001644   000022 772000                    QRL     18
         7 001645   200360 136100                    SBLQ    LENGTH+2,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:163  
         7 001646   000002 506007                    DIV     2,DL
         7 001647   200322 756100                    STQ     SIZE,,AUTO

      601    13682    2         DO I = 0 TO SIZE;

  13682  7 001650   200314 450100                    STZ     I,,AUTO
         7 001651   001705 710000 7                  TRA     s:13692+1

      602    13683    2             ENTDEF = RU_EDEF$ -> B$EDEF;

  13683  7 001652   200306 470500                    LDP0    RU_EDEF$,,AUTO
         7 001653   000100 100500                    MLR     fill='000'O
         7 001654   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         7 001655   200053 000010                    ADSC9   ENTDEF,,AUTO             cn=0,n=8

      603    13684    2             P$ = RU_EDEF$;

  13684  7 001656   200306 236100                    LDQ     RU_EDEF$,,AUTO
         7 001657   200272 756100                    STQ     P$,,AUTO

      604    13685    3             DO WHILE( P$ < STOP$ );

  13685  7 001660   200302 116100                    CMPQ    STOP$,,AUTO
         7 001661   001675 603000 7                  TRC     s:13690

      605    13686    3                 Q$ = PINCRW( P$, SIZEW(B$EDEF) );

  13686  7 001662   200272 236100                    LDQ     P$,,AUTO
         7 001663   000002 036003                    ADLQ    2,DU
         7 001664   200273 756100                    STQ     Q$,,AUTO

      606    13687    3                 P$ -> B$EDEF = Q$ -> B$EDEF;

  13687  7 001665   200273 470500                    LDP0    Q$,,AUTO
         7 001666   200272 471500                    LDP1    P$,,AUTO
         7 001667   000100 100500                    MLR     fill='000'O
         7 001670   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:164  
         7 001671   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8

      607    13688    3                 P$ = Q$;

  13688  7 001672   200272 756100                    STQ     P$,,AUTO

      608    13689    3                 END;

  13689  7 001673   200302 116100                    CMPQ    STOP$,,AUTO
         7 001674   001662 602000 7                  TNC     s:13686

      609    13690    2             STOP$ -> B$EDEF = ENTDEF;

  13690  7 001675   200302 470500                    LDP0    STOP$,,AUTO
         7 001676   000100 100500                    MLR     fill='000'O
         7 001677   200053 000010                    ADSC9   ENTDEF,,AUTO             cn=0,n=8
         7 001700   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

      610    13691    2             STOP$ = PINCRW( STOP$, -SIZEW(B$EDEF) );

  13691  7 001701   200302 236100                    LDQ     STOP$,,AUTO
         7 001702   777776 036003                    ADLQ    -2,DU
         7 001703   200302 756100                    STQ     STOP$,,AUTO

      611    13692    2             END;

  13692  7 001704   200314 054100                    AOS     I,,AUTO
         7 001705   200314 236100                    LDQ     I,,AUTO
         7 001706   200322 116100                    CMPQ    SIZE,,AUTO
         7 001707   001652 604400 7                  TMOZ    s:13683

      612    13693    1         BIN_START$ = STOP$;

  13693  7 001710   200302 236100                    LDQ     STOP$,,AUTO
         7 001711   200256 756100                    STQ     BIN_START$,,AUTO

      613    13694    1         CALL VXQ$SORT(BIN_N$,BIN_START$,BIN_STOP$,SIZEW(B$EDEF),1/*@BY_NAME*/,2,0);
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:165  

  13694  7 001712   000016 236000 8                  LDQ     14
         7 001713   200366 756100                    STQ     LENGTH+8,,AUTO
         7 001714   000020 237000 8                  LDAQ    16
         7 001715   200364 757100                    STAQ    LENGTH+6,,AUTO
         7 001716   000017 236000 8                  LDQ     15
         7 001717   200363 756100                    STQ     LENGTH+5,,AUTO
         7 001720   200257 630500                    EPPR0   BIN_STOP$,,AUTO
         7 001721   200362 450500                    STP0    LENGTH+4,,AUTO
         7 001722   200256 631500                    EPPR1   BIN_START$,,AUTO
         7 001723   200361 451500                    STP1    LENGTH+3,,AUTO
         7 001724   200261 633500                    EPPR3   BIN_N$,,AUTO
         7 001725   200360 453500                    STP3    LENGTH+2,,AUTO
         7 001726   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 001727   000025 631400 xsym               EPPR1   B_VECTNIL+21
         7 001730   000000 701000 xent               TSX1    VXQ$SORT
         7 001731   000000 011000                    NOP     0

      614    13695        /*
      615    13696                              Now fixup the transfer vector
      616    13697        */
      617    13698    1         CALL VXW$WRITE( ' ', 1, 0 );

  13698  7 001732   000070 630400 8                  EPPR0   56
         7 001733   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 001734   000000 701000 xent               TSX1    VXW$WRITE
         7 001735   000000 011000                    NOP     0

      618    13699    1         CALL VXW$WRITE( '*******  T R A N S F E R   V E C T O R  *******', 47, 0);

  13699  7 001736   000074 630400 8                  EPPR0   60
         7 001737   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 001740   000000 701000 xent               TSX1    VXW$WRITE
         7 001741   000000 011000                    NOP     0

      619    13700    1         CALL VXW$WRITE( ' ', 1, 0 );

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:166  
  13700  7 001742   000070 630400 8                  EPPR0   56
         7 001743   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 001744   000000 701000 xent               TSX1    VXW$WRITE
         7 001745   000000 011000                    NOP     0

      620    13701    1         START$ = RU_EDEF$;

  13701  7 001746   200306 236100                    LDQ     RU_EDEF$,,AUTO
         7 001747   200301 756100                    STQ     START$,,AUTO

      621    13702    1         STOP$ = BIN_START$;

  13702  7 001750   200256 236100                    LDQ     BIN_START$,,AUTO
         7 001751   200302 756100                    STQ     STOP$,,AUTO

      622    13703    1         R$ = BIN_START$;

  13703  7 001752   200274 756100                    STQ     R$,,AUTO

      623    13704    1         OFFSET = ED_RECORD.TV_ST_EDEF.OU.OFFSET;

  13704  7 001753   000262 236000 2                  LDQ     ED_RECORD
         7 001754   777777 376007                    ANQ     -1,DL
         7 001755   000305 756000 2                  STQ     OFFSET

      624    13705    2         DO WHILE( START$ < STOP$ );

  13705  7 001756   200301 236100                    LDQ     START$,,AUTO
         7 001757   200302 116100                    CMPQ    STOP$,,AUTO
         7 001760   002240 603000 7                  TRC     s:13759

      625    13706    3             DO WHILE( OFFSET < START$->B$EDEF.ISADDR );

  13706  7 001761   200301 470500                    LDP0    START$,,AUTO
         7 001762   000000 236100                    LDQ     0,,PR0
         7 001763   000032 376000 xsym               ANQ     B_VECTNIL+26
         7 001764   000305 116000 2                  CMPQ    OFFSET
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:167  
         7 001765   002004 604400 7                  TMOZ    s:13711

      626    13707    3                 CALL VXD$B2C( EMPTY_SLOT_MSG.ADDR_, 0, 6, OFFSET, 8 );

  13707  7 001766   000077 630400 8                  EPPR0   63
         7 001767   000023 631400 xsym               EPPR1   B_VECTNIL+19
         7 001770   000000 701000 xent               TSX1    VXD$B2C
         7 001771   000000 011000                    NOP     0

      627    13708    3                 CALL VXW$WRITE( EMPTY_SLOT_MSG, LENGTHC(EMPTY_SLOT_MSG), 0 );

  13708  7 001772   000105 630400 8                  EPPR0   69
         7 001773   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 001774   000000 701000 xent               TSX1    VXW$WRITE
         7 001775   000000 011000                    NOP     0

      628    13709    3                 OFFSET = OFFSET + 1;

  13709  7 001776   000305 054000 2                  AOS     OFFSET

      629    13710    3                 END;

  13710  7 001777   200301 470500                    LDP0    START$,,AUTO
         7 002000   000000 236100                    LDQ     0,,PR0
         7 002001   000032 376000 xsym               ANQ     B_VECTNIL+26
         7 002002   000305 116000 2                  CMPQ    OFFSET
         7 002003   001766 605400 7                  TPNZ    s:13707

      630    13711    2             NAME$ = PINCRW(BIN_N$, START$->B$EDEF.NPOINTER);

  13711  7 002004   000001 220100                    LDX0    1,,PR0
         7 002005   000000 636010                    EAQ     0,X0
         7 002006   200261 036100                    ADLQ    BIN_N$,,AUTO
         7 002007   200275 756100                    STQ     NAME$,,AUTO

      631    13712    2             TRANS_VECT_MSG.NAME2 = NAME$->B$DNAME.TEXT;

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:168  
  13712  7 002010   200275 471500                    LDP1    NAME$,,AUTO
         7 002011   100000 220100                    LDX0    0,,PR1
         7 002012   040000 100540                    MLR     fill='040'O
         7 002013   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0
         7 002014   000326 200037 2                  ADSC9   TRANS_VECT_MSG+13        cn=1,n=31

      632    13713    2             CALL VXD$B2C( TRANS_VECT_MSG.ADDR1, 0, 6, OFFSET, 8 );

  13713  7 002015   000110 630400 8                  EPPR0   72
         7 002016   000023 631400 xsym               EPPR1   B_VECTNIL+19
         7 002017   000000 701000 xent               TSX1    VXD$B2C
         7 002020   000000 011000                    NOP     0

      633    13714                                                         /* Find corresponding entdef */
      634    13715    2             DNAME = NAME$->B$DNAME;

  13715  7 002021   200275 470500                    LDP0    NAME$,,AUTO
         7 002022   000000 220100                    LDX0    0,,PR0
         7 002023   000002 621010                    EAX1    2,X0
         7 002024   000100 100540                    MLR     fill='000'O
         7 002025   000000 000011                    ADSC9   0,,PR0                   cn=0,n=*X1
         7 002026   200055 001004                    ADSC9   DNAME,,AUTO              cn=0,n=516

      635    13716    2             DNAME.COUNT = DNAME.COUNT - 1;

  13716  7 002027   200055 220100                    LDX0    DNAME,,AUTO
         7 002030   777777 621010                    EAX1    -1,X0
         7 002031   200055 741100                    STX1    DNAME,,AUTO

      636    13717    2             CALL FIND_ENTDEF( DNAME, ENTDEF$, 0 );

  13717  7 002032   000016 236000 8                  LDQ     14
         7 002033   200353 756100                    STQ     @TYPE+1,,AUTO
         7 002034   200303 631500                    EPPR1   ENTDEF$,,AUTO
         7 002035   200352 451500                    STP1    @RUF$+1,,AUTO
         7 002036   200055 633500                    EPPR3   DNAME,,AUTO
         7 002037   200351 453500                    STP3    BUFFER+21,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:169  
         7 002040   002747 701000 7                  TSX1    FIND_ENTDEF
         7 002041   000000 011000                    NOP     0

      637    13718    2             TRANS_VECT_MSG.NAME1 = ADDR(DNAME)->B$DNAME.TEXT;

  13718  7 002042   200055 220100                    LDX0    DNAME,,AUTO
         7 002043   040000 100540                    MLR     fill='040'O
         7 002044   200055 400010                    ADSC9   DNAME,,AUTO              cn=2,n=*X0
         7 002045   000313 600037 2                  ADSC9   TRANS_VECT_MSG+2         cn=3,n=31

      638    13719    2             I = ENTDEF$->B$EDEF.ISADDR;

  13719  7 002046   200303 470500                    LDP0    ENTDEF$,,AUTO
         7 002047   000000 236100                    LDQ     0,,PR0
         7 002050   000032 376000 xsym               ANQ     B_VECTNIL+26
         7 002051   200314 756100                    STQ     I,,AUTO

      639    13720    2             CALL VXD$B2C( TRANS_VECT_MSG.ADDR2, 0, 6, I, 8 );

  13720  7 002052   000010 236000 8                  LDQ     8
         7 002053   200364 756100                    STQ     LENGTH+6,,AUTO
         7 002054   200314 631500                    EPPR1   I,,AUTO
         7 002055   200363 451500                    STP1    LENGTH+5,,AUTO
         7 002056   000101 236000 8                  LDQ     65
         7 002057   200362 756100                    STQ     LENGTH+4,,AUTO
         7 002060   000116 237000 8                  LDAQ    78
         7 002061   200360 757100                    STAQ    LENGTH+2,,AUTO
         7 002062   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 002063   000023 631400 xsym               EPPR1   B_VECTNIL+19
         7 002064   000000 701000 xent               TSX1    VXD$B2C
         7 002065   000000 011000                    NOP     0

      640    13721                                                          /* Set primaryness right */
      641    13722    2             ENTDEF$->B$EDEF.PRI = START$->B$EDEF.PRI;

  13722  7 002066   200303 470500                    LDP0    ENTDEF$,,AUTO
         7 002067   200301 471500                    LDP1    START$,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:170  
         7 002070   100001 236100                    LDQ     1,,PR1
         7 002071   000001 676100                    ERQ     1,,PR0
         7 002072   400000 376007                    ANQ     -131072,DL
         7 002073   000001 656100                    ERSQ    1,,PR0

      642    13723    2             START$->B$EDEF.PRI = '1'B;

  13723  7 002074   200301 470500                    LDP0    START$,,AUTO
         7 002075   400000 236007                    LDQ     -131072,DL
         7 002076   000001 256100                    ORSQ    1,,PR0

      643    13724                                                          /* Switch name pointers */
      644    13725    2             I = START$->B$EDEF.NPOINTER;

  13725  7 002077   200301 470500                    LDP0    START$,,AUTO
         7 002100   000001 236100                    LDQ     1,,PR0
         7 002101   000022 732000                    QRS     18
         7 002102   200314 756100                    STQ     I,,AUTO

      645    13726    2             START$->B$EDEF.NPOINTER = ENTDEF$->B$EDEF.NPOINTER;

  13726  7 002103   200303 471500                    LDP1    ENTDEF$,,AUTO
         7 002104   100001 220100                    LDX0    1,,PR1
         7 002105   000001 740100                    STX0    1,,PR0

      646    13727    2             ENTDEF$->B$EDEF.NPOINTER = I;

  13727  7 002106   200314 720100                    LXL0    I,,AUTO
         7 002107   200303 470500                    LDP0    ENTDEF$,,AUTO
         7 002110   000001 740100                    STX0    1,,PR0

      647    13728                                                          /* Move entdef */
      648    13729    2             ENTDEF = ENTDEF$->B$EDEF;

  13729  7 002111   200303 470500                    LDP0    ENTDEF$,,AUTO
         7 002112   000100 100500                    MLR     fill='000'O
         7 002113   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:171  
         7 002114   200053 000010                    ADSC9   ENTDEF,,AUTO             cn=0,n=8

      649    13730    2             P$ = PINCRW( ENTDEF$, -SIZEW(B$EDEF) );

  13730  7 002115   200303 236100                    LDQ     ENTDEF$,,AUTO
         7 002116   777776 036003                    ADLQ    -2,DU
         7 002117   200272 756100                    STQ     P$,,AUTO

      650    13731    3             DO WHILE( P$ >= BIN_START$ );

  13731  7 002120   200256 116100                    CMPQ    BIN_START$,,AUTO
         7 002121   002142 602000 7                  TNC     JUMP_OUT1

      651    13732    3                 IF PINCRW(BIN_N$, P$->B$EDEF.NPOINTER)->B$DNAME.TEXT

  13732  7 002122   200272 470500                    LDP0    P$,,AUTO
         7 002123   000001 220100                    LDX0    1,,PR0
         7 002124   200261 471500                    LDP1    BIN_N$,,AUTO
         7 002125   100000 221110                    LDX1    0,X0,PR1
         7 002126   000000 635010                    EAA     0,X0
         7 002127   000020 731000                    ARS     16
         7 002130   200055 222100                    LDX2    DNAME,,AUTO
         7 002131   040140 106545                    CMPC    fill='040'O
         7 002132   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         7 002133   200055 400012                    ADSC9   DNAME,,AUTO              cn=2,n=*X2
         7 002134   002142 601000 7                  TNZ     JUMP_OUT1

      652    13733    3                         ~= ADDR(DNAME)->B$DNAME.TEXT
      653    13734    3                 THEN GOTO JUMP_OUT1;
      654    13735    3                 P$ = PINCRW( P$, -SIZEW(B$EDEF) );

  13735  7 002135   200272 236100                    LDQ     P$,,AUTO
         7 002136   777776 036003                    ADLQ    -2,DU
         7 002137   200272 756100                    STQ     P$,,AUTO

      655    13736    3                 END;

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:172  
  13736  7 002140   200256 116100                    CMPQ    BIN_START$,,AUTO
         7 002141   002122 603000 7                  TRC     s:13732

      656    13737    2   JUMP_OUT1:
      657    13738    2             Q$ = PINCRW( ENTDEF$, SIZEW(B$EDEF) );

  13738  7 002142   200303 236100       JUMP_OUT1    LDQ     ENTDEF$,,AUTO
         7 002143   000002 036003                    ADLQ    2,DU
         7 002144   200273 756100                    STQ     Q$,,AUTO

      658    13739    3             DO WHILE( Q$ <= BIN_STOP$ );

  13739  7 002145   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 002146   002150 600000 7                  TZE     s:13740
         7 002147   002171 603000 7                  TRC     JUMP_OUT2

      659    13740    3                 IF PINCRW(BIN_N$, Q$->B$EDEF.NPOINTER)->B$DNAME.TEXT

  13740  7 002150   200273 470500                    LDP0    Q$,,AUTO
         7 002151   000001 220100                    LDX0    1,,PR0
         7 002152   200261 471500                    LDP1    BIN_N$,,AUTO
         7 002153   100000 221110                    LDX1    0,X0,PR1
         7 002154   000000 635010                    EAA     0,X0
         7 002155   000020 731000                    ARS     16
         7 002156   200055 222100                    LDX2    DNAME,,AUTO
         7 002157   040140 106545                    CMPC    fill='040'O
         7 002160   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         7 002161   200055 400012                    ADSC9   DNAME,,AUTO              cn=2,n=*X2
         7 002162   002171 601000 7                  TNZ     JUMP_OUT2

      660    13741    3                         ~= ADDR(DNAME)->B$DNAME.TEXT
      661    13742    3                 THEN GOTO JUMP_OUT2;
      662    13743    3                 Q$ = PINCRW( Q$, SIZEW(B$EDEF) );

  13743  7 002163   200273 236100                    LDQ     Q$,,AUTO
         7 002164   000002 036003                    ADLQ    2,DU
         7 002165   200273 756100                    STQ     Q$,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:173  

      663    13744    3                 END;

  13744  7 002166   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 002167   002150 602000 7                  TNC     s:13740
         7 002170   002150 600000 7                  TZE     s:13740

      664    13745    2   JUMP_OUT2:
      665    13746    2             Q$ = PINCRW(Q$, -SIZEW(B$EDEF) );

  13746  7 002171   200273 236100       JUMP_OUT2    LDQ     Q$,,AUTO
         7 002172   777776 036003                    ADLQ    -2,DU
         7 002173   200273 756100                    STQ     Q$,,AUTO

      666    13747    3             DO WHILE( P$ >= BIN_START$ );

  13747  7 002174   200272 236100                    LDQ     P$,,AUTO
         7 002175   200256 116100                    CMPQ    BIN_START$,,AUTO
         7 002176   002214 602000 7                  TNC     s:13752

      667    13748    3                 Q$->B$EDEF = P$->B$EDEF;

  13748  7 002177   200272 470500                    LDP0    P$,,AUTO
         7 002200   200273 471500                    LDP1    Q$,,AUTO
         7 002201   000100 100500                    MLR     fill='000'O
         7 002202   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         7 002203   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8

      668    13749    3                 Q$ = PINCRW( Q$, -SIZEW(B$EDEF) );

  13749  7 002204   200273 236100                    LDQ     Q$,,AUTO
         7 002205   777776 036003                    ADLQ    -2,DU
         7 002206   200273 756100                    STQ     Q$,,AUTO

      669    13750    3                 P$ = PINCRW( P$, -SIZEW(B$EDEF) );

  13750  7 002207   200272 236100                    LDQ     P$,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:174  
         7 002210   777776 036003                    ADLQ    -2,DU
         7 002211   200272 756100                    STQ     P$,,AUTO

      670    13751    3                 END;

  13751  7 002212   200256 116100                    CMPQ    BIN_START$,,AUTO
         7 002213   002177 603000 7                  TRC     s:13748

      671    13752    2             BIN_START$ = PINCRW( Q$, SIZEW(B$EDEF) );

  13752  7 002214   200273 236100                    LDQ     Q$,,AUTO
         7 002215   000002 036003                    ADLQ    2,DU
         7 002216   200256 756100                    STQ     BIN_START$,,AUTO

      672    13753    2             R$->B$EDEF = ENTDEF;

  13753  7 002217   200274 470500                    LDP0    R$,,AUTO
         7 002220   000100 100500                    MLR     fill='000'O
         7 002221   200053 000010                    ADSC9   ENTDEF,,AUTO             cn=0,n=8
         7 002222   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

      673    13754    2             R$ = PINCRW( R$, SIZEW(B$EDEF) );

  13754  7 002223   200274 236100                    LDQ     R$,,AUTO
         7 002224   000002 036003                    ADLQ    2,DU
         7 002225   200274 756100                    STQ     R$,,AUTO

      674    13755    2             CALL VXW$WRITE( TRANS_VECT_MSG, LENGTHC(TRANS_VECT_MSG), 0 );

  13755  7 002226   000121 630400 8                  EPPR0   81
         7 002227   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 002230   000000 701000 xent               TSX1    VXW$WRITE
         7 002231   000000 011000                    NOP     0

      675    13756    2             START$ = PINCRW( START$, SIZEW(B$EDEF) );

  13756  7 002232   200301 236100                    LDQ     START$,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:175  
         7 002233   000002 036003                    ADLQ    2,DU
         7 002234   200301 756100                    STQ     START$,,AUTO

      676    13757    2             OFFSET = OFFSET + 1;

  13757  7 002235   000305 054000 2                  AOS     OFFSET

      677    13758    2             END;

  13758  7 002236   200302 116100                    CMPQ    STOP$,,AUTO
         7 002237   001761 602000 7                  TNC     s:13706

      678    13759    2         DO WHILE(OFFSET < ED_RECORD.TV_EN_EDEF.OU.OFFSET);

  13759  7 002240   000264 236000 2                  LDQ     ED_RECORD+2
         7 002241   777777 376007                    ANQ     -1,DL
         7 002242   000305 116000 2                  CMPQ    OFFSET
         7 002243   002261 604400 7                  TMOZ    s:13767

      679    13760    2             CALL VXD$B2C( EMPTY_SLOT_MSG.ADDR_, 0, 6, OFFSET, 8 );

  13760  7 002244   000077 630400 8                  EPPR0   63
         7 002245   000023 631400 xsym               EPPR1   B_VECTNIL+19
         7 002246   000000 701000 xent               TSX1    VXD$B2C
         7 002247   000000 011000                    NOP     0

      680    13761    2             CALL VXW$WRITE( EMPTY_SLOT_MSG, LENGTHC(EMPTY_SLOT_MSG), 0 );

  13761  7 002250   000105 630400 8                  EPPR0   69
         7 002251   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 002252   000000 701000 xent               TSX1    VXW$WRITE
         7 002253   000000 011000                    NOP     0

      681    13762    2             OFFSET = OFFSET + 1;

  13762  7 002254   000305 054000 2                  AOS     OFFSET

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:176  
      682    13763    2             END;

  13763  7 002255   000264 236000 2                  LDQ     ED_RECORD+2
         7 002256   777777 376007                    ANQ     -1,DL
         7 002257   000305 116000 2                  CMPQ    OFFSET
         7 002260   002244 605400 7                  TPNZ    s:13760

      683    13764        /*
      684    13765                                  Report entdefs not in transfer vector.
      685    13766        */
      686    13767    1         CALL VXW$WRITE( ' ', 1, 0 );

  13767  7 002261   000070 630400 8                  EPPR0   56
         7 002262   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 002263   000000 701000 xent               TSX1    VXW$WRITE
         7 002264   000000 011000                    NOP     0

      687    13768    1         CALL VXW$WRITE('*******  ENTRY DEFINITIONS NOT IN TRANSFER VECTOR  *******',
             13768                  58, 0 );

  13768  7 002265   000125 630400 8                  EPPR0   85
         7 002266   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 002267   000000 701000 xent               TSX1    VXW$WRITE
         7 002270   000000 011000                    NOP     0

      688    13769    1         CALL VXW$WRITE( ' ', 1, 0 );

  13769  7 002271   000070 630400 8                  EPPR0   56
         7 002272   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 002273   000000 701000 xent               TSX1    VXW$WRITE
         7 002274   000000 011000                    NOP     0

      689    13770    1         TABS = 0;

  13770  7 002275   200321 450100                    STZ     TABS,,AUTO

      690    13771    1         BUFFER = ' ';
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:177  

  13771  7 002276   040100 100400                    MLR     fill='040'O
         7 002277   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         7 002300   200324 000120                    ADSC9   BUFFER,,AUTO             cn=0,n=80

      691    13772    1         START$ = BIN_START$;

  13772  7 002301   200256 236100                    LDQ     BIN_START$,,AUTO
         7 002302   200301 756100                    STQ     START$,,AUTO

      692    13773    2         DO WHILE( START$ <= BIN_STOP$ );

  13773  7 002303   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 002304   002306 600000 7                  TZE     s:13774
         7 002305   002405 603000 7                  TRC     s:13792

      693    13774    2             NAME$ = PINCRW(BIN_N$, START$->B$EDEF.NPOINTER);

  13774  7 002306   200301 470500                    LDP0    START$,,AUTO
         7 002307   000001 220100                    LDX0    1,,PR0
         7 002310   000000 636010                    EAQ     0,X0
         7 002311   200261 036100                    ADLQ    BIN_N$,,AUTO
         7 002312   200275 756100                    STQ     NAME$,,AUTO

      694    13775    2             NEXT$ = PINCRW( START$, SIZEW(B$EDEF) );

  13775  7 002313   200301 236100                    LDQ     START$,,AUTO
         7 002314   000002 036003                    ADLQ    2,DU
         7 002315   200304 756100                    STQ     NEXT$,,AUTO

      695    13776    3             DO WHILE( NEXT$ <= BIN_STOP$ );

  13776  7 002316   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 002317   002321 600000 7                  TZE     s:13777
         7 002320   002343 603000 7                  TRC     JUMP_OUT3

      696    13777    3                 IF PINCRW(BIN_N$,NEXT$->B$EDEF.NPOINTER)->B$DNAME.TEXT
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:178  

  13777  7 002321   200304 470500                    LDP0    NEXT$,,AUTO
         7 002322   000001 220100                    LDX0    1,,PR0
         7 002323   200261 471500                    LDP1    BIN_N$,,AUTO
         7 002324   100000 221110                    LDX1    0,X0,PR1
         7 002325   200275 473500                    LDP3    NAME$,,AUTO
         7 002326   300000 222100                    LDX2    0,,PR3
         7 002327   000000 635010                    EAA     0,X0
         7 002330   000020 731000                    ARS     16
         7 002331   040140 106545                    CMPC    fill='040'O
         7 002332   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         7 002333   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         7 002334   002343 601000 7                  TNZ     JUMP_OUT3

      697    13778    3                         ~= NAME$->B$DNAME.TEXT
      698    13779    3                 THEN GOTO JUMP_OUT3;
      699    13780    3                 NEXT$ = PINCRW( NEXT$, SIZEW(B$EDEF) );

  13780  7 002335   200304 236100                    LDQ     NEXT$,,AUTO
         7 002336   000002 036003                    ADLQ    2,DU
         7 002337   200304 756100                    STQ     NEXT$,,AUTO

      700    13781    3                 END;

  13781  7 002340   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 002341   002321 602000 7                  TNC     s:13777
         7 002342   002321 600000 7                  TZE     s:13777

      701    13782    2   JUMP_OUT3:
      702    13783    3             IF TABS = 2 THEN DO;

  13783  7 002343   200321 235100       JUMP_OUT3    LDA     TABS,,AUTO
         7 002344   000002 115007                    CMPA    2,DL
         7 002345   002364 601000 7                  TNZ     s:13788

      703    13784    3                 CALL VXW$WRITE( BUFFER, 80, 0 );

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:179  
  13784  7 002346   000016 236000 8                  LDQ     14
         7 002347   200362 756100                    STQ     LENGTH+4,,AUTO
         7 002350   000131 236000 8                  LDQ     89
         7 002351   200361 756100                    STQ     LENGTH+3,,AUTO
         7 002352   200324 630500                    EPPR0   BUFFER,,AUTO
         7 002353   200360 450500                    STP0    LENGTH+2,,AUTO
         7 002354   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 002355   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 002356   000000 701000 xent               TSX1    VXW$WRITE
         7 002357   000000 011000                    NOP     0

      704    13785    3                 TABS = 0;

  13785  7 002360   200321 450100                    STZ     TABS,,AUTO

      705    13786    3                 BUFFER = ' ';

  13786  7 002361   040100 100400                    MLR     fill='040'O
         7 002362   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         7 002363   200324 000120                    ADSC9   BUFFER,,AUTO             cn=0,n=80

      706    13787    3                 END;

      707    13788    2             CALL INSERT( BUFFER, TABS*40+5, , NAME$->B$DNAME.TEXT );

  13788  7 002364   200275 470500                    LDP0    NAME$,,AUTO
         7 002365   000000 220100                    LDX0    0,,PR0
         7 002366   000000 236003                    LDQ     0,DU
         7 002367   200321 136100                    SBLQ    TABS,,AUTO
         7 002370   000050 402007                    MPY     40,DL
         7 002371   000113 621006                    EAX1    75,QL
         7 002372   200321 236100                    LDQ     TABS,,AUTO
         7 002373   000050 402007                    MPY     40,DL
         7 002374   040146 100540                    MLR     fill='040'O
         7 002375   000000 400010                    ADSC9   0,,PR0                   cn=2,n=*X0
         7 002376   200325 200011                    ADSC9   BUFFER+1,Q,AUTO          cn=1,n=*X1

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:180  
      708    13789    2             TABS = TABS + 1;

  13789  7 002377   200321 054100                    AOS     TABS,,AUTO

      709    13790    2             START$ = NEXT$;

  13790  7 002400   200304 236100                    LDQ     NEXT$,,AUTO
         7 002401   200301 756100                    STQ     START$,,AUTO

      710    13791    2             END;

  13791  7 002402   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 002403   002306 602000 7                  TNC     s:13774
         7 002404   002306 600000 7                  TZE     s:13774

      711    13792    1         IF TABS > 0 THEN CALL VXW$WRITE( BUFFER, 80, 0 );

  13792  7 002405   200321 235100                    LDA     TABS,,AUTO
         7 002406   002421 604400 7                  TMOZ    s:13794

  13792  7 002407   000016 236000 8                  LDQ     14
         7 002410   200362 756100                    STQ     LENGTH+4,,AUTO
         7 002411   000131 236000 8                  LDQ     89
         7 002412   200361 756100                    STQ     LENGTH+3,,AUTO
         7 002413   200324 630500                    EPPR0   BUFFER,,AUTO
         7 002414   200360 450500                    STP0    LENGTH+2,,AUTO
         7 002415   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 002416   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 002417   000000 701000 xent               TSX1    VXW$WRITE
         7 002420   000000 011000                    NOP     0

      712    13793
      713    13794    1         IF R$ = BIN_START$ THEN R$ = PINCRW(BIN_STOP$, SIZEW(B$EDEF));

  13794  7 002421   200274 236100                    LDQ     R$,,AUTO
         7 002422   200256 116100                    CMPQ    BIN_START$,,AUTO
         7 002423   002430 601000 7                  TNZ     s:13796
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:181  

  13794  7 002424   200257 236100                    LDQ     BIN_STOP$,,AUTO
         7 002425   000002 036003                    ADLQ    2,DU
         7 002426   200274 756100                    STQ     R$,,AUTO
         7 002427   002451 710000 7                  TRA     s:13803

      714    13795    2         ELSE DO;

      715    13796    3             DO WHILE( BIN_START$ <= BIN_STOP$ );

  13796  7 002430   200257 236100                    LDQ     BIN_STOP$,,AUTO
         7 002431   200256 116100                    CMPQ    BIN_START$,,AUTO
         7 002432   002451 602000 7                  TNC     s:13803

      716    13797    3                 R$->B$EDEF = BIN_START$->B$EDEF;

  13797  7 002433   200256 470500                    LDP0    BIN_START$,,AUTO
         7 002434   200274 471500                    LDP1    R$,,AUTO
         7 002435   000100 100500                    MLR     fill='000'O
         7 002436   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         7 002437   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8

      717    13798    3                 R$ = PINCRW(R$, SIZEW(B$EDEF));

  13798  7 002440   200274 236100                    LDQ     R$,,AUTO
         7 002441   000002 036003                    ADLQ    2,DU
         7 002442   200274 756100                    STQ     R$,,AUTO

      718    13799    3                 BIN_START$ = PINCRW( BIN_START$, SIZEW(B$EDEF) );

  13799  7 002443   200256 236100                    LDQ     BIN_START$,,AUTO
         7 002444   000002 036003                    ADLQ    2,DU
         7 002445   200256 756100                    STQ     BIN_START$,,AUTO

      719    13800    3                 END;

  13800  7 002446   200257 116100                    CMPQ    BIN_STOP$,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:182  
         7 002447   002433 602000 7                  TNC     s:13797
         7 002450   002433 600000 7                  TZE     s:13797

      720    13801    2             END;

      721    13802
      722    13803    1         RU_EDEF_SIZE = POFFW(R$, RU_EDEF$ );

  13803  7 002451   200306 235100                    LDA     RU_EDEF$,,AUTO
         7 002452   000022 771000                    ARL     18
         7 002453   200360 755100                    STA     LENGTH+2,,AUTO
         7 002454   200274 236100                    LDQ     R$,,AUTO
         7 002455   000022 772000                    QRL     18
         7 002456   200360 136100                    SBLQ    LENGTH+2,,AUTO
         7 002457   200317 756100                    STQ     RU_EDEF_SIZE,,AUTO

      723    13804    1         B$HEAD.EPRECSIZE = RU_EDEF_SIZE;

  13804  7 002460   000000 620006                    EAX0    0,QL
         7 002461   200012 740100                    STX0    B$HEAD+7,,AUTO

      724    13805    1         CALL VXK$KEY( 1/*@RF*/, 4, 0, 0 );

  13805  7 002462   000132 630400 8                  EPPR0   90
         7 002463   000022 631400 xsym               EPPR1   B_VECTNIL+18
         7 002464   000000 701000 xent               TSX1    VXK$KEY
         7 002465   000000 011000                    NOP     0

      725    13806    1         WRITE_RU.BUF_.BUF$ = RU_EDEF$;

  13806  7 002466   200306 236100                    LDQ     RU_EDEF$,,AUTO
         7 002467   000165 756000 2                  STQ     WRITE_RU+5

      726    13807    1         WRITE_RU.BUF_.BOUND = (RU_EDEF_SIZE * 4) - 1;

  13807  7 002470   200317 236100                    LDQ     RU_EDEF_SIZE,,AUTO
         7 002471   000002 736000                    QLS     2
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:183  
         7 002472   000001 136007                    SBLQ    1,DL
         7 002473   000020 736000                    QLS     16
         7 002474   000164 676000 2                  ERQ     WRITE_RU+4
         7 002475   000034 376000 xsym               ANQ     B_VECTNIL+28
         7 002476   000164 656000 2                  ERSQ    WRITE_RU+4

      727    13808        /*
      728    13809                      Mark entdefs not in transfer vector as removed, if
      729    13810                      REMOVE_ENTDEF was specified.
      730    13811        */
      731    13812    2         IF VX_O.VECTOR_.REMOVE_ENTDEF = 1 THEN DO;

  13812  7 002477   000160 235000 xsym               LDA     VX_O+112
         7 002500   000001 115007                    CMPA    1,DL
         7 002501   002521 601000 7                  TNZ     s:13822

      732    13813    2             B$HEAD.REMOVE_ENTDEF = '1'B;

  13813  7 002502   000040 236007                    LDQ     32,DL
         7 002503   200014 256100                    ORSQ    B$HEAD+9,,AUTO

      733    13814    3             DO WHILE( STOP$ < R$ );

  13814  7 002504   200302 236100                    LDQ     STOP$,,AUTO
         7 002505   200274 116100                    CMPQ    R$,,AUTO
         7 002506   002521 603000 7                  TRC     s:13822

      734    13815    3                 STOP$->B$EDEF.LFLAGS.SOURCE = 5;

  13815  7 002507   200302 470500                    LDP0    STOP$,,AUTO
         7 002510   000000 236100                    LDQ     0,,PR0
         7 002511   000136 376000 8                  ANQ     94
         7 002512   500000 276003                    ORQ     -98304,DU
         7 002513   000000 756100                    STQ     0,,PR0

      735    13816    3                 STOP$ = PINCRW( STOP$, SIZEW(B$EDEF) );

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:184  
  13816  7 002514   200302 236100                    LDQ     STOP$,,AUTO
         7 002515   000002 036003                    ADLQ    2,DU
         7 002516   200302 756100                    STQ     STOP$,,AUTO

      736    13817    3                 END;

  13817  7 002517   200274 116100                    CMPQ    R$,,AUTO
         7 002520   002507 602000 7                  TNC     s:13815

      737    13818    2             END;

      738    13819        /*
      739    13820                      Sort the entdefs by name.
      740    13821        */
      741    13822    1         R$ = PINCRW( R$, -SIZEW(B$EDEF) );

  13822  7 002521   200274 236100                    LDQ     R$,,AUTO
         7 002522   777776 036003                    ADLQ    -2,DU
         7 002523   200274 756100                    STQ     R$,,AUTO

      742    13823    1         CALL VXQ$SORT(BIN_N$, RU_EDEF$, R$, SIZEW(B$EDEF), 1/*@BY_NAME*/, 2, 0);

  13823  7 002524   000016 236000 8                  LDQ     14
         7 002525   200366 756100                    STQ     LENGTH+8,,AUTO
         7 002526   000020 237000 8                  LDAQ    16
         7 002527   200364 757100                    STAQ    LENGTH+6,,AUTO
         7 002530   000017 236000 8                  LDQ     15
         7 002531   200363 756100                    STQ     LENGTH+5,,AUTO
         7 002532   200274 630500                    EPPR0   R$,,AUTO
         7 002533   200362 450500                    STP0    LENGTH+4,,AUTO
         7 002534   200306 631500                    EPPR1   RU_EDEF$,,AUTO
         7 002535   200361 451500                    STP1    LENGTH+3,,AUTO
         7 002536   200261 633500                    EPPR3   BIN_N$,,AUTO
         7 002537   200360 453500                    STP3    LENGTH+2,,AUTO
         7 002540   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 002541   000025 631400 xsym               EPPR1   B_VECTNIL+21
         7 002542   000000 701000 xent               TSX1    VXQ$SORT
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:185  
         7 002543   000000 011000                    NOP     0

      743    13824
      744    13825    1         CALL M$WRITE(WRITE_RU) ALTRET(WRITE_ERROR);

  13825  7 002544   000160 630400 2                  EPPR0   WRITE_RU
         7 002545   440001 713400                    CLIMB   alt,write
         7 002546   401400 401760                    pmme    nvectors=4
         7 002547   002735 702000 7                  TSX2    OPEN_ERROR

      745    13826        /*
      746    13827                      Mark symdefs removed, if REMOVE_SYMDEF specified.
      747    13828        */
      748    13829    1         RU_SDEF_SIZE = B$HEAD.EDRECSIZE;

  13829  7 002550   200012 236100                    LDQ     B$HEAD+7,,AUTO
         7 002551   777777 376007                    ANQ     -1,DL
         7 002552   200320 756100                    STQ     RU_SDEF_SIZE,,AUTO

      749    13830    2         IF VX_O.VECTOR_.REMOVE_SYMDEF = 1 AND RU_SDEF_SIZE > 0 THEN DO;

  13830  7 002553   000161 235000 xsym               LDA     VX_O+113
         7 002554   000001 115007                    CMPA    1,DL
         7 002555   002672 601000 7                  TNZ     s:13858
         7 002556   000000 116003                    CMPQ    0,DU
         7 002557   002672 604400 7                  TMOZ    s:13858

      750    13831    2             B$HEAD.REMOVE_SYMDEF = '1'B;

  13831  7 002560   000020 236007                    LDQ     16,DL
         7 002561   200014 256100                    ORSQ    B$HEAD+9,,AUTO

      751    13832    2             CALL VXK$KEY( 1/*@RF*/, 6, 0, 0 );

  13832  7 002562   000137 630400 8                  EPPR0   95
         7 002563   000022 631400 xsym               EPPR1   B_VECTNIL+18
         7 002564   000000 701000 xent               TSX1    VXK$KEY
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:186  
         7 002565   000000 011000                    NOP     0

      752    13833                  %ALLOCATE( PTR$=P$, TYPE=@SD_DS_1, SIZE=RU_SDEF_SIZE );

  13834  7 002566   000003 236000 xsym               LDQ     VX_M_ALL+3
         7 002567   000003 136000 xsym               SBLQ    VX_M_FREE+3
         7 002570   200320 116100                    CMPQ    RU_SDEF_SIZE,,AUTO
         7 002571   002602 604000 7                  TMI     s:13838

  13835  7 002572   000003 236000 xsym               LDQ     VX_M_FREE+3
         7 002573   000022 736000                    QLS     18
         7 002574   000003 036000 xsym               ADLQ    VX_M_BASE_PTR+3
         7 002575   200272 756100                    STQ     P$,,AUTO

  13836  7 002576   000003 236000 xsym               LDQ     VX_M_FREE+3
         7 002577   200320 036100                    ADLQ    RU_SDEF_SIZE,,AUTO
         7 002600   000003 756000 xsym               STQ     VX_M_FREE+3

  13837  7 002601   002614 710000 7                  TRA     s:13840

  13838  7 002602   200320 630500                    EPPR0   RU_SDEF_SIZE,,AUTO
         7 002603   200362 450500                    STP0    LENGTH+4,,AUTO
         7 002604   000024 236000 8                  LDQ     20
         7 002605   200361 756100                    STQ     LENGTH+3,,AUTO
         7 002606   200272 631500                    EPPR1   P$,,AUTO
         7 002607   200360 451500                    STP1    LENGTH+2,,AUTO
         7 002610   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 002611   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 002612   000000 701000 xent               TSX1    VXA$GET
         7 002613   000000 011000                    NOP     0

      753    13840    2             SIZE = SIZE + RU_SDEF_SIZE;

  13840  7 002614   200322 236100                    LDQ     SIZE,,AUTO
         7 002615   200320 036100                    ADLQ    RU_SDEF_SIZE,,AUTO
         7 002616   200322 756100                    STQ     SIZE,,AUTO

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:187  
      754    13841    2             READ_RU.BUF_.BUF$ = P$;

  13841  7 002617   200272 236100                    LDQ     P$,,AUTO
         7 002620   000147 756000 2                  STQ     READ_RU+5

      755    13842    2             READ_RU.BUF_.BOUND = (RU_SDEF_SIZE * 4) - 1;

  13842  7 002621   200320 236100                    LDQ     RU_SDEF_SIZE,,AUTO
         7 002622   000002 736000                    QLS     2
         7 002623   000001 136007                    SBLQ    1,DL
         7 002624   000020 736000                    QLS     16
         7 002625   000146 676000 2                  ERQ     READ_RU+4
         7 002626   000034 376000 xsym               ANQ     B_VECTNIL+28
         7 002627   000146 656000 2                  ERSQ    READ_RU+4

      756    13843    2             CALL M$READ( READ_RU ) ALTRET( READ_ERROR );

  13843  7 002630   000142 630400 2                  EPPR0   READ_RU
         7 002631   440000 713400                    CLIMB   alt,read
         7 002632   401400 401760                    pmme    nvectors=4
         7 002633   002735 702000 7                  TSX2    OPEN_ERROR

      757    13844    2             Q$ = PINCRW( P$, RU_SDEF_SIZE );

  13844  7 002634   200320 236100                    LDQ     RU_SDEF_SIZE,,AUTO
         7 002635   000022 736000                    QLS     18
         7 002636   200272 036100                    ADLQ    P$,,AUTO
         7 002637   200273 756100                    STQ     Q$,,AUTO

      758    13845    3             DO WHILE( P$ < Q$ );

  13845  7 002640   200272 116100                    CMPQ    P$,,AUTO
         7 002641   002664 602000 7                  TNC     s:13852
         7 002642   002664 600000 7                  TZE     s:13852

      759    13846    3                 IF P$ -> VXD$TMPLT.CONSTNT THEN

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:188  
  13846  7 002643   200272 470500                    LDP0    P$,,AUTO
         7 002644   000001 236100                    LDQ     1,,PR0
         7 002645   400000 316007                    CANQ    -131072,DL
         7 002646   002653 600000 7                  TZE     s:13849

      760    13847    3                     P$ -> VXD$TMPLT.LFLAGS.SOURCE = 5;

  13847  7 002647   000143 376000 8                  ANQ     99
         7 002650   024000 276007                    ORQ     10240,DL
         7 002651   000001 756100                    STQ     1,,PR0
         7 002652   002657 710000 7                  TRA     s:13850

      761    13848    3                 ELSE
      762    13849    3                     P$ -> VXD$TMPLT.AD.LFLAGS.SOURCE = 5;

  13849  7 002653   000000 236100                    LDQ     0,,PR0
         7 002654   000136 376000 8                  ANQ     94
         7 002655   500000 276003                    ORQ     -98304,DU
         7 002656   000000 756100                    STQ     0,,PR0

      763    13850    3                 P$ = PINCRW( P$, SIZEW(B$EDEF) );

  13850  7 002657   200272 236100                    LDQ     P$,,AUTO
         7 002660   000002 036003                    ADLQ    2,DU
         7 002661   200272 756100                    STQ     P$,,AUTO

      764    13851    3                 END;

  13851  7 002662   200273 116100                    CMPQ    Q$,,AUTO
         7 002663   002643 602000 7                  TNC     s:13846

      765    13852    2             WRITE_RU.BUF_ = READ_RU.BUF_;

  13852  7 002664   000146 237000 2                  LDAQ    READ_RU+4
         7 002665   000164 757000 2                  STAQ    WRITE_RU+4

      766    13853    2             CALL M$WRITE( WRITE_RU ) ALTRET( WRITE_ERROR );
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:189  

  13853  7 002666   000160 630400 2                  EPPR0   WRITE_RU
         7 002667   440001 713400                    CLIMB   alt,write
         7 002670   401400 401760                    pmme    nvectors=4
         7 002671   002735 702000 7                  TSX2    OPEN_ERROR

      767    13854    2             END;

      768    13855        /*
      769    13856                              Write head record and close ru file.
      770    13857        */
      771    13858    1         VX_R_KEY_BUF.FORM0.COUNT = LENGTHC( VX_R_KEY_HEAD );

  13858  7 002672   004000 236003                    LDQ     2048,DU
         7 002673   000000 552040 xsym               STBQ    VX_R_KEY_BUF,'40'O

      772    13859    1         VX_R_KEY_BUF.FORM0.CHARS = VX_R_KEY_HEAD;

  13859  7 002674   040000 100400                    MLR     fill='040'O
         7 002675   000000 000004 xsym               ADSC9   VX_R_KEY_HEAD            cn=0,n=4
         7 002676   000000 200005 xsym               ADSC9   VX_R_KEY_BUF             cn=1,n=5

      773    13860    1         WRITE_RU.BUF_ = VECTOR(B$HEAD);

  13860  7 002677   000144 235000 8                  LDA     100
         7 002700   200360 452500                    STP2    LENGTH+2,,AUTO
         7 002701   200360 236100                    LDQ     LENGTH+2,,AUTO
         7 002702   000003 036003                    ADLQ    3,DU
         7 002703   000164 757000 2                  STAQ    WRITE_RU+4

      774    13861    1         CALL M$WRITE(WRITE_RU) ALTRET(WRITE_ERROR);

  13861  7 002704   000160 630400 2                  EPPR0   WRITE_RU
         7 002705   440001 713400                    CLIMB   alt,write
         7 002706   401400 401760                    pmme    nvectors=4
         7 002707   002735 702000 7                  TSX2    OPEN_ERROR

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:190  
      775    13862    1         CALL VXF$CLOSE( VX_RUF$, 1/*@RF*/, 2/*@SAVE*/ );

  13862  7 002710   000145 630400 8                  EPPR0   101
         7 002711   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 002712   000000 701000 xent               TSX1    VXF$CLOSE
         7 002713   000000 011000                    NOP     0

      776    13863    1         CALL VXF$FREE( 3/*@SD_DS_1*/, SIZE, 1 );

  13863  7 002714   000020 236000 8                  LDQ     16
         7 002715   200362 756100                    STQ     LENGTH+4,,AUTO
         7 002716   200322 630500                    EPPR0   SIZE,,AUTO
         7 002717   200361 450500                    STP0    LENGTH+3,,AUTO
         7 002720   000024 236000 8                  LDQ     20
         7 002721   200360 756100                    STQ     LENGTH+2,,AUTO
         7 002722   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 002723   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 002724   000000 701000 xent               TSX1    VXF$FREE
         7 002725   000000 011000                    NOP     0

      777    13864        /*
      778    13865                          Delete the transfer vector file
      779    13866        */
      780    13867    1         FPT_OPEN.V.DELETE# = '1'B;

  13867  7 002726   040000 236007                    LDQ     16384,DL
         7 002727   000044 256000 2                  ORSQ    FPT_OPEN+36

      781    13868    1         CALL M$OPEN( FPT_OPEN ) ALTRET( OPEN_ERROR );

  13868  7 002730   000000 630400 2                  EPPR0   FPT_OPEN
         7 002731   450000 713400                    CLIMB   alt,open
         7 002732   410400 401760                    pmme    nvectors=18
         7 002733   002735 702000 7                  TSX2    OPEN_ERROR

      782    13869    1         RETURN;

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:191  
  13869  7 002734   000000 702200 xent               TSX2  ! X66_ARET

  13867  7 002735                       OPEN_ERROR   null
  13867  7 002735                       CLOSE_ERR    null
  13867  7 002735                       WRITE_ERROR  null
  13867  7 002735                       READ_ERROR   null
      783    13870
      784    13871        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:192  
      785    13872    1   OPEN_ERROR:;
      786    13873    1   CLOSE_ERR:;
      787    13874    1   WRITE_ERROR: ;
      788    13875    1   READ_ERROR: ;
      789    13876    1         CALL M$MERC           ALTRET(MERC_ERROR);

  13876  7 002735   410007 713400                    CLIMB   alt,+4103
         7 002736   000000 401760                    pmme    nvectors=0
         7 002737   002741 702000 7                  TSX2    MERC_ERROR

      790    13877    2         DO WHILE( '0'B );

  13877  7 002740   002744 710000 7                  TRA     s:13882

      791    13878    2   MERC_ERROR:
      792    13879    2             CALL VXE$MERC;

  13879  7 002741   000002 631400 xsym  MERC_ERROR   EPPR1   B_VECTNIL+2
         7 002742   000000 701000 xent               TSX1    VXE$MERC
         7 002743   000000 011000                    NOP     0

      793    13880    2             END;

      794    13881              %ERROR_IT;

  13882  7 002744   000002 713400                    CLIMB   err
         7 002745   000000 401760                    pmme    nvectors=0
         7 002746   004136 710000 7                  TRA     s:14697

      795    13884
      796    13885
      797    13886        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:193  
      798    13887    1   FIND_ENTDEF: PROC( NAME, ENTDEF$, SRCH );

  13887  7 002747   200350 741300       FIND_ENTDEF  STX1  ! BUFFER+20,,AUTO

      799    13888
      800    13889        %B$DNAME( NAME=NAME, STCLASS=" " );
      801    13908    2   DCL ENTDEF$ PTR;
      802    13909    2   DCL SRCH    UBIN;
      803    13910
      804    13911    2   DCL NAME$   PTR;
      805    13912
      806    13913
      807    13914
      808    13915    3         IF SRCH = 0 /* Binary search */ THEN DO;

  13915  7 002750   200353 470500                    LDP0    @SRCH,,AUTO
         7 002751   000000 235100                    LDA     0,,PR0
         7 002752   003106 601000 7                  TNZ     s:13982

      809    13916    3             NAME$ = ADDR(NAME);

  13916  7 002753   200351 236100                    LDQ     @NAME,,AUTO
         7 002754   200354 756100                    STQ     NAME$,,AUTO

      810    13917                  %BIN_SEARCH(
      811    13918                  MATCH$=NAME$,
      812    13919                  NAME_DISP=2,
      813    13920                  SIZE="SIZEW(B$EDEF)",
      814    13921                  SPLIT=NAME_SPLIT,
      815    13922                  FOUND=NAME_FOUND,
      816    13923                  CHECK=NAME_CHECK,
      817    13924                  ALTRETURN=INTERNAL_ERROR,
      818    13925                  EMPTY=INTERNAL_ERROR );
             13927    3           IF BIN_START$ = ADDR(NIL) THEN GOTO INTERNAL_ERROR;

  13927  7 002755   200256 236100                    LDQ     BIN_START$,,AUTO
         7 002756   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:194  
         7 002757   003142 600000 7                  TZE     INTERNAL_ERROR

             13928    4           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) < 17 THEN DO;

  13928  7 002760   200256 235100                    LDA     BIN_START$,,AUTO
         7 002761   000022 771000                    ARL     18
         7 002762   200360 755100                    STA     LENGTH+2,,AUTO
         7 002763   200257 236100                    LDQ     BIN_STOP$,,AUTO
         7 002764   000022 772000                    QRL     18
         7 002765   200360 136100                    SBLQ    LENGTH+2,,AUTO
         7 002766   000002 506007                    DIV     2,DL
         7 002767   000021 116007                    CMPQ    17,DL
         7 002770   003024 605000 7                  TPL     s:13945

             13929    4              BIN_RESULT$ = BIN_START$;        /* Sequential search                 */

  13929  7 002771   200256 236100                    LDQ     BIN_START$,,AUTO
         7 002772   200260 756100                    STQ     BIN_RESULT$,,AUTO

             13930    5              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );

  13930  7 002773   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 002774   002776 600000 7                  TZE     s:13931
         7 002775   003023 603000 7                  TRC     s:13942

             13931    5                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  13931  7 002776   200260 470500                    LDP0    BIN_RESULT$,,AUTO
         7 002777   000001 220100                    LDX0    1,,PR0
         7 003000   000000 636010                    EAQ     0,X0
         7 003001   200261 036100                    ADLQ    BIN_N$,,AUTO
         7 003002   200270 756100                    STQ     BIN_NTEMP$,,AUTO

             13932    5                 IF BIN_NTEMP$ -> B$DNAME.TEXT

  13932  7 003003   200270 471500                    LDP1    BIN_NTEMP$,,AUTO
         7 003004   100000 221100                    LDX1    0,,PR1
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:195  
         7 003005   200354 473500                    LDP3    NAME$,,AUTO
         7 003006   300000 222100                    LDX2    0,,PR3
         7 003007   040140 106540                    CMPC    fill='040'O
         7 003010   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         7 003011   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         7 003012   003015 602000 7                  TNC     s:13940

             13933    5                   >=
             13934    6                   NAME$ -> B$DNAME.TEXT THEN DO;

             13935    6                    IF BIN_NTEMP$ -> B$DNAME.TEXT

  13935  7 003013   003101 600000 7                  TZE     NAME_FOUND

             13936    6                      =
             13937    6                      NAME$ -> B$DNAME.TEXT THEN GOTO NAME_FOUND;
             13938    6                    ELSE GOTO INTERNAL_ERROR;

  13938  7 003014   003142 710000 7                  TRA     INTERNAL_ERROR

             13939    6                    END;
             13940    5                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(B$EDEF) );

  13940  7 003015   200260 236100                    LDQ     BIN_RESULT$,,AUTO
         7 003016   000002 036003                    ADLQ    2,DU
         7 003017   200260 756100                    STQ     BIN_RESULT$,,AUTO

             13941    5                 END;                      /* Do while                           */

  13941  7 003020   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 003021   002776 602000 7                  TNC     s:13931
         7 003022   002776 600000 7                  TZE     s:13931

             13942    4              GOTO INTERNAL_ERROR;

  13942  7 003023   003142 710000 7                  TRA     INTERNAL_ERROR

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:196  
             13943    4              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             13944    4           ELSE DO;                        /* Binary search                      */

             13945    4              BIN_LOW = 0;

  13945  7 003024   200265 450100                    STZ     BIN_LOW,,AUTO

             13946    4              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(B$EDEF) + 2;

  13946  7 003025   200256 235100                    LDA     BIN_START$,,AUTO
         7 003026   000022 771000                    ARL     18
         7 003027   200360 755100                    STA     LENGTH+2,,AUTO
         7 003030   200257 236100                    LDQ     BIN_STOP$,,AUTO
         7 003031   000022 772000                    QRL     18
         7 003032   200360 136100                    SBLQ    LENGTH+2,,AUTO
         7 003033   000002 506007                    DIV     2,DL
         7 003034   000002 036007                    ADLQ    2,DL
         7 003035   200266 756100                    STQ     BIN_HIGH,,AUTO

             13947    4              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(B$EDEF) );

  13947  7 003036   200256 236100                    LDQ     BIN_START$,,AUTO
         7 003037   777776 036003                    ADLQ    -2,DU
         7 003040   200271 756100                    STQ     BIN_START1$,,AUTO

  13947  7 003041                       NAME_SPLIT   null
             13948    4   NAME_SPLIT:     ;
             13949    4              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

  13949  7 003041   200265 236100                    LDQ     BIN_LOW,,AUTO
         7 003042   200266 036100                    ADLQ    BIN_HIGH,,AUTO
         7 003043   000001 772000                    QRL     1
         7 003044   200267 756100                    STQ     BIN_MID,,AUTO

             13950    4              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(B$EDEF) );

  13950  7 003045   000023 736000                    QLS     19
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:197  
         7 003046   200271 036100                    ADLQ    BIN_START1$,,AUTO
         7 003047   200260 756100                    STQ     BIN_RESULT$,,AUTO

             13951    4              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  13951  7 003050   200260 470500                    LDP0    BIN_RESULT$,,AUTO
         7 003051   000001 220100                    LDX0    1,,PR0
         7 003052   000000 636010                    EAQ     0,X0
         7 003053   200261 036100                    ADLQ    BIN_N$,,AUTO
         7 003054   200270 756100                    STQ     BIN_NTEMP$,,AUTO

             13952    4              IF BIN_NTEMP$ -> B$DNAME.TEXT

  13952  7 003055   200270 471500                    LDP1    BIN_NTEMP$,,AUTO
         7 003056   100000 221100                    LDX1    0,,PR1
         7 003057   200354 473500                    LDP3    NAME$,,AUTO
         7 003060   300000 222100                    LDX2    0,,PR3
         7 003061   040140 106540                    CMPC    fill='040'O
         7 003062   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         7 003063   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         7 003064   003070 603000 7                  TRC     s:13958

             13953    4                <
             13954    5                NAME$ -> B$DNAME.TEXT THEN DO;

             13955    5                 BIN_LOW = BIN_MID;

  13955  7 003065   200267 235100                    LDA     BIN_MID,,AUTO
         7 003066   200265 755100                    STA     BIN_LOW,,AUTO

             13956    5                 GOTO NAME_CHECK;

  13956  7 003067   003074 710000 7                  TRA     NAME_CHECK

             13957    5                 END;
             13958    4              IF BIN_NTEMP$ -> B$DNAME.TEXT

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:198  
  13958  7 003070   003101 602000 7                  TNC     NAME_FOUND
         7 003071   003101 600000 7                  TZE     NAME_FOUND

             13959    4                >
             13960    5                NAME$ -> B$DNAME.TEXT THEN DO;

             13961    5                 BIN_HIGH = BIN_MID;

  13961  7 003072   200267 235100                    LDA     BIN_MID,,AUTO
         7 003073   200266 755100                    STA     BIN_HIGH,,AUTO

  13961  7 003074                       NAME_CHECK   null
             13962    5   NAME_CHECK:        ;
             13963    5                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO NAME_SPLIT;

  13963  7 003074   200265 236100                    LDQ     BIN_LOW,,AUTO
         7 003075   000001 036007                    ADLQ    1,DL
         7 003076   200266 116100                    CMPQ    BIN_HIGH,,AUTO
         7 003077   003041 602000 7                  TNC     NAME_SPLIT

             13964                                                /* Here => looping or not found       */
             13965                                      /* Result -> < match => a boundary condition    */
             13966    5                 /*
             13967    5                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             13968    5                   <
             13969    5                  NAME$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             13969                            B$EDEF) );
             13970    5                 /**/
             13971    5                   GOTO INTERNAL_ERROR;

  13971  7 003100   003142 710000 7                  TRA     INTERNAL_ERROR

             13972    5                 END;
             13973    4              END;                         /* Else do;                           */
             13974    3   NAME_FOUND:
             13975        /* Here -> found */
      819    13977        /* Here => found */
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:199  
      820    13978    3             ENTDEF$ = BIN_RESULT$;

  13978  7 003101   200260 236100       NAME_FOUND   LDQ     BIN_RESULT$,,AUTO
         7 003102   200352 474500                    LDP4    @ENTDEF$,,AUTO
         7 003103   400000 756100                    STQ     0,,PR4

      821    13979    3             RETURN;

  13979  7 003104   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 003105   000001 702211                    TSX2  ! 1,X1

      822    13980    3             END;
      823    13981    3         ELSE DO;              /* Do sequential search */

      824    13982    3             ENTDEF$ = BIN_START$;

  13982  7 003106   200256 236100                    LDQ     BIN_START$,,AUTO
         7 003107   200352 471500                    LDP1    @ENTDEF$,,AUTO
         7 003110   100000 756100                    STQ     0,,PR1

      825    13983    4             DO WHILE( ENTDEF$ <= BIN_STOP$ );

  13983  7 003111   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 003112   003114 600000 7                  TZE     s:13984
         7 003113   003142 603000 7                  TRC     INTERNAL_ERROR

      826    13984    4                 NAME$ = PINCRW( BIN_N$, ENTDEF$->B$EDEF.NPOINTER );

  13984  7 003114   200352 470500                    LDP0    @ENTDEF$,,AUTO
         7 003115   000000 471500                    LDP1    0,,PR0
         7 003116   100001 220100                    LDX0    1,,PR1
         7 003117   000000 636010                    EAQ     0,X0
         7 003120   200261 036100                    ADLQ    BIN_N$,,AUTO
         7 003121   200354 756100                    STQ     NAME$,,AUTO

      827    13985    4                 IF NAME$->B$DNAME.TEXT = NAME.TEXT THEN RETURN;

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:200  
  13985  7 003122   200354 473500                    LDP3    NAME$,,AUTO
         7 003123   300000 221100                    LDX1    0,,PR3
         7 003124   200351 474500                    LDP4    @NAME,,AUTO
         7 003125   400000 222100                    LDX2    0,,PR4
         7 003126   040140 106540                    CMPC    fill='040'O
         7 003127   300000 400011                    ADSC9   0,,PR3                   cn=2,n=*X1
         7 003130   400000 400012                    ADSC9   0,,PR4                   cn=2,n=*X2
         7 003131   003134 601000 7                  TNZ     s:13986

  13985  7 003132   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 003133   000001 702211                    TSX2  ! 1,X1

      828    13986    4                 ENTDEF$ = PINCRW( ENTDEF$, SIZEW(B$EDEF) );

  13986  7 003134   000000 236100                    LDQ     0,,PR0
         7 003135   000002 036003                    ADLQ    2,DU
         7 003136   000000 756100                    STQ     0,,PR0

      829    13987    4                 END;

  13987  7 003137   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 003140   003114 602000 7                  TNC     s:13984
         7 003141   003114 600000 7                  TZE     s:13984

      830    13988    3             END;

      831    13989
      832    13990        /*E* ERROR:   VXU-E$TRANSVECT_INTERNAL_ERR_VX-C
      833    13991             MESSAGE: Internal link error:  Unable to find %U1 for transfer vector.
      834    13992        */
      835    13993    2   INTERNAL_ERROR:
      836    13994    2         VX_EFIELD1.COUNT = NAME.COUNT;

  13994  7 003142   200351 470500       INTERNAL_ER* LDP0    @NAME,,AUTO
         7 003143   000000 236100                    LDQ     0,,PR0
         7 003144   000011 736000                    QLS     9
         7 003145   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:201  

      837    13995    2         VX_EFIELD1.CHARS = NAME.TEXT;

  13995  7 003146   000000 220100                    LDX0    0,,PR0
         7 003147   040000 100540                    MLR     fill='040'O
         7 003150   000000 400010                    ADSC9   0,,PR0                   cn=2,n=*X0
         7 003151   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      838    13996              %SCREAM( ERR#=E$TRANSVECT_INTERNAL_ERR_VX,LEVEL=@E$F_VX, MID="'U'" );

  13997  7 003152   000151 630400 8                  EPPR0   105
         7 003153   000022 631400 xsym               EPPR1   B_VECTNIL+18
         7 003154   000000 701000 xent               TSX1    VXE$ERROR
         7 003155   000000 011000                    NOP     0

      839    13999
      840    14000    2   END FIND_ENTDEF;

  14000  7 003156   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 003157   000001 702211                    TSX2  ! 1,X1

      841    14001
      842    14002        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:202  
      843    14003    1   FIND_RANGE_START: PROC( NAME, START$ )  ALTRET;

  14003  7 003160   200350 741300       FIND_RANGE_* STX1  ! BUFFER+20,,AUTO

      844    14004
      845    14005
      846    14006        %B$DNAME( NAME=NAME, STCLASS=" " );
      847    14025    2   DCL START$            PTR;
      848    14026
      849    14027    2   DCL NAME$             PTR;
      850    14028    2   DCL P$                PTR;
      851    14029    2   DCL LENGTH            UBIN;
      852    14030
      853    14031        %B$DNAME( NAME=B$DNAME, STCLASS="BASED(NAME$)" );
      854    14050        %B$EDEF;
      855    14120
      856    14121    2         P$ = BIN_START$;

  14121  7 003161   200256 236100                    LDQ     BIN_START$,,AUTO
         7 003162   200354 756100                    STQ     P$,,AUTO

      857    14122    3         DO WHILE( P$ <= BIN_STOP$ );

  14122  7 003163   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 003164   003166 600000 7                  TZE     s:14123
         7 003165   003230 603000 7                  TRC     s:14134

      858    14123    3             NAME$ = PINCRW( BIN_N$, P$->B$EDEF.NPOINTER );

  14123  7 003166   200354 470500                    LDP0    P$,,AUTO
         7 003167   000001 220100                    LDX0    1,,PR0
         7 003170   000000 636010                    EAQ     0,X0
         7 003171   200261 036100                    ADLQ    BIN_N$,,AUTO
         7 003172   200353 756100                    STQ     NAME$,,AUTO

      859    14124    3             IF B$DNAME.COUNT < NAME.COUNT

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:203  
  14124  7 003173   200353 471500                    LDP1    NAME$,,AUTO
         7 003174   100000 221100                    LDX1    0,,PR1
         7 003175   200351 473500                    LDP3    @NAME,,AUTO
         7 003176   300000 101100                    CMPX1   0,,PR3
         7 003177   003204 603000 7                  TRC     s:14126

      860    14125    3             THEN LENGTH = B$DNAME.COUNT;

  14125  7 003200   100000 236100                    LDQ     0,,PR1
         7 003201   000022 772000                    QRL     18
         7 003202   200355 756100                    STQ     LENGTH,,AUTO
         7 003203   003207 710000 7                  TRA     s:14127

      861    14126    3             ELSE LENGTH = NAME.COUNT;

  14126  7 003204   300000 236100                    LDQ     0,,PR3
         7 003205   000022 772000                    QRL     18
         7 003206   200355 756100                    STQ     LENGTH,,AUTO

      862    14127    3             IF SUBSTR( B$DNAME.TEXT, 0, LENGTH ) >= NAME.TEXT

  14127  7 003207   300000 222100                    LDX2    0,,PR3
         7 003210   000000 623006                    EAX3    0,QL
         7 003211   040140 106540                    CMPC    fill='040'O
         7 003212   100000 400013                    ADSC9   0,,PR1                   cn=2,n=*X3
         7 003213   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         7 003214   003222 602000 7                  TNC     s:14132

      863    14128    4             THEN DO;

      864    14129    4                 START$ = P$;

  14129  7 003215   200354 236100                    LDQ     P$,,AUTO
         7 003216   200352 474500                    LDP4    @START$,,AUTO
         7 003217   400000 756100                    STQ     0,,PR4

      865    14130    4                 RETURN;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:204  

  14130  7 003220   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 003221   000001 702211                    TSX2  ! 1,X1

      866    14131    4                 END;
      867    14132    3             P$ = PINCRW( P$, SIZEW(B$EDEF) );

  14132  7 003222   200354 236100                    LDQ     P$,,AUTO
         7 003223   000002 036003                    ADLQ    2,DU
         7 003224   200354 756100                    STQ     P$,,AUTO

      868    14133    3             END;

  14133  7 003225   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 003226   003166 602000 7                  TNC     s:14123
         7 003227   003166 600000 7                  TZE     s:14123

      869    14134    2         ALTRETURN;

  14134  7 003230   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 003231   000000 702211                    TSX2  ! 0,X1

      870    14135
      871    14136    2   END FIND_RANGE_START;
      872    14137
      873    14138        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:205  
      874    14139    1   FIND_RANGE_END: PROC( NAME, START$, END$ )  ALTRET;

  14139  7 003232   200350 741300       FIND_RANGE_* STX1  ! BUFFER+20,,AUTO

      875    14140
      876    14141
      877    14142        %B$DNAME( NAME=NAME, STCLASS=" " );
      878    14161    2   DCL START$            PTR;
      879    14162    2   DCL END$              PTR;
      880    14163
      881    14164    2   DCL NAME$             PTR;
      882    14165    2   DCL P$                PTR;
      883    14166    2   DCL LENGTH            UBIN;
      884    14167
      885    14168        %B$DNAME( NAME=B$DNAME, STCLASS="BASED(NAME$)" );
      886    14187        %B$EDEF;
      887    14257
      888    14258    2         P$ = START$;

  14258  7 003233   200352 470500                    LDP0    @START$,,AUTO
         7 003234   000000 236100                    LDQ     0,,PR0
         7 003235   200355 756100                    STQ     P$,,AUTO

      889    14259    3         DO WHILE( P$ <= BIN_STOP$ );

  14259  7 003236   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 003237   003241 600000 7                  TZE     s:14260
         7 003240   003311 603000 7                  TRC     s:14274

      890    14260    3             NAME$ = PINCRW( BIN_N$, P$->B$EDEF.NPOINTER );

  14260  7 003241   200355 470500                    LDP0    P$,,AUTO
         7 003242   000001 220100                    LDX0    1,,PR0
         7 003243   000000 636010                    EAQ     0,X0
         7 003244   200261 036100                    ADLQ    BIN_N$,,AUTO
         7 003245   200354 756100                    STQ     NAME$,,AUTO

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:206  
      891    14261    3             IF B$DNAME.COUNT < NAME.COUNT

  14261  7 003246   200354 471500                    LDP1    NAME$,,AUTO
         7 003247   100000 221100                    LDX1    0,,PR1
         7 003250   200351 473500                    LDP3    @NAME,,AUTO
         7 003251   300000 101100                    CMPX1   0,,PR3
         7 003252   003257 603000 7                  TRC     s:14263

      892    14262    3             THEN LENGTH = B$DNAME.COUNT;

  14262  7 003253   100000 236100                    LDQ     0,,PR1
         7 003254   000022 772000                    QRL     18
         7 003255   200356 756100                    STQ     LENGTH,,AUTO
         7 003256   003262 710000 7                  TRA     s:14264

      893    14263    3             ELSE LENGTH = NAME.COUNT;

  14263  7 003257   300000 236100                    LDQ     0,,PR3
         7 003260   000022 772000                    QRL     18
         7 003261   200356 756100                    STQ     LENGTH,,AUTO

      894    14264    3             IF SUBSTR( B$DNAME.TEXT, 0, LENGTH ) > NAME.TEXT

  14264  7 003262   300000 222100                    LDX2    0,,PR3
         7 003263   000000 623006                    EAX3    0,QL
         7 003264   040140 106540                    CMPC    fill='040'O
         7 003265   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         7 003266   100000 400013                    ADSC9   0,,PR1                   cn=2,n=*X3
         7 003267   003303 603000 7                  TRC     s:14272

      895    14265    4             THEN DO;

      896    14266    4                 IF P$ = START$ THEN ALTRETURN;

  14266  7 003270   200352 474500                    LDP4    @START$,,AUTO
         7 003271   200355 236100                    LDQ     P$,,AUTO
         7 003272   400000 116100                    CMPQ    0,,PR4
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:207  
         7 003273   003276 601000 7                  TNZ     s:14268

  14266  7 003274   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 003275   000000 702211                    TSX2  ! 0,X1

      897    14267    5                 ELSE DO;

      898    14268    5                     END$ = PINCRW( P$, -SIZEW(B$EDEF) );

  14268  7 003276   777776 036003                    ADLQ    -2,DU
         7 003277   200353 475500                    LDP5    @END$,,AUTO
         7 003300   500000 756100                    STQ     0,,PR5

      899    14269    5                     RETURN;

  14269  7 003301   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 003302   000001 702211                    TSX2  ! 1,X1

      900    14270    5                     END;
      901    14271    4                 END;
      902    14272    3             P$ = PINCRW( P$, SIZEW(B$EDEF) );

  14272  7 003303   200355 236100                    LDQ     P$,,AUTO
         7 003304   000002 036003                    ADLQ    2,DU
         7 003305   200355 756100                    STQ     P$,,AUTO

      903    14273    3             END;

  14273  7 003306   200257 116100                    CMPQ    BIN_STOP$,,AUTO
         7 003307   003241 602000 7                  TNC     s:14260
         7 003310   003241 600000 7                  TZE     s:14260

      904    14274    2         END$ = BIN_STOP$;

  14274  7 003311   200257 236100                    LDQ     BIN_STOP$,,AUTO
         7 003312   200353 470500                    LDP0    @END$,,AUTO
         7 003313   000000 756100                    STQ     0,,PR0
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:208  

      905    14275
      906    14276    2   END FIND_RANGE_END;

  14276  7 003314   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 003315   000001 702211                    TSX2  ! 1,X1

      907    14277
      908    14278        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:209  
      909    14279    1   ADD_VECTOR_ELEMENT: PROC( NAME, EDEF );

  14279  7 003316   200350 741300       ADD_VECTOR_* STX1  ! BUFFER+20,,AUTO

      910    14280
      911    14281
      912    14282        %B$DNAME( NAME=NAME, STCLASS=" " );
      913    14301        %B$EDEF( NAME=EDEF,  STCLASS=" " );
      914    14371
      915    14372        %B$EDEF( NAME=B$EDEF, STCLASS="BASED(EDEF$)" );
      916    14442    2   DCL EDEF$         PTR;
      917    14443        %B$EREF( NAME=B$EREF, STCLASS="BASED(EREF$)" );
      918    14486    2   DCL EREF$         PTR;
      919    14487    2   DCL NAME_SIZE     SBIN;
      920    14488
      921    14489
      922    14490        /*
      923    14491                          Check if entry has already been added to the transfer vector
      924    14492        */
      925    14493    2         IF NOT EDEF.LFLAGS.USED THEN EDEF.LFLAGS.USED = '1'B/*@TRUE_B*/;

  14493  7 003317   200352 470500                    LDP0    @EDEF,,AUTO
         7 003320   000000 236100                    LDQ     0,,PR0
         7 003321   010000 316003                    CANQ    4096,DU
         7 003322   003326 601000 7                  TNZ     s:14499

  14493  7 003323   010000 236003                    LDQ     4096,DU
         7 003324   000000 256100                    ORSQ    0,,PR0
         7 003325   003344 710000 7                  TRA     s:14509

      926    14494    3         ELSE DO;

      927    14495        /*E*  ERROR: VXU-E$DUP_VECT_ELEMENT_VX-0
      928    14496              MESSAGE: Duplicate transfer vector element ignored: %U1.
      929    14497              DESCRIPTION: Self-explantory.
      930    14498        */
      931    14499    3             VX_EFIELD1.COUNT = NAME.COUNT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:210  

  14499  7 003326   200351 471500                    LDP1    @NAME,,AUTO
         7 003327   100000 236100                    LDQ     0,,PR1
         7 003330   000011 736000                    QLS     9
         7 003331   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      932    14500    3             VX_EFIELD1.CHARS = NAME.TEXT;

  14500  7 003332   100000 220100                    LDX0    0,,PR1
         7 003333   040000 100540                    MLR     fill='040'O
         7 003334   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0
         7 003335   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      933    14501                  %SCREAM( ERR#=E$DUP_VECT_ELEMENT_VX, MID="'U'", LEVEL=@E$W_VX );

  14502  7 003336   000156 630400 8                  EPPR0   110
         7 003337   000022 631400 xsym               EPPR1   B_VECTNIL+18
         7 003340   000000 701000 xent               TSX1    VXE$ERROR
         7 003341   000000 011000                    NOP     0

      934    14504    3             RETURN;

  14504  7 003342   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 003343   000001 702211                    TSX2  ! 1,X1

      935    14505    3             END;
      936    14506        /*
      937    14507                          Add name of entry to the referenced name pool
      938    14508        */
      939    14509    2         NAME_SIZE = (NAME.COUNT + 6 ) / 4;

  14509  7 003344   200351 471500                    LDP1    @NAME,,AUTO
         7 003345   100000 236100                    LDQ     0,,PR1
         7 003346   000022 772000                    QRL     18
         7 003347   000006 036007                    ADLQ    6,DL
         7 003350   000002 772000                    QRL     2
         7 003351   200355 756100                    STQ     NAME_SIZE,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:211  

      940    14510              %ALLOCATE( PTR$=NAME$, TYPE=@DN_DS_1, SIZE=NAME_SIZE );

  14511  7 003352   000004 236000 xsym               LDQ     VX_M_ALL+4
         7 003353   000004 136000 xsym               SBLQ    VX_M_FREE+4
         7 003354   200355 116100                    CMPQ    NAME_SIZE,,AUTO
         7 003355   003366 604000 7                  TMI     s:14515

  14512  7 003356   000004 236000 xsym               LDQ     VX_M_FREE+4
         7 003357   000022 736000                    QLS     18
         7 003360   000004 036000 xsym               ADLQ    VX_M_BASE_PTR+4
         7 003361   200275 756100                    STQ     NAME$,,AUTO

  14513  7 003362   000004 236000 xsym               LDQ     VX_M_FREE+4
         7 003363   200355 036100                    ADLQ    NAME_SIZE,,AUTO
         7 003364   000004 756000 xsym               STQ     VX_M_FREE+4

  14514  7 003365   003400 710000 7                  TRA     s:14517

  14515  7 003366   200355 633500                    EPPR3   NAME_SIZE,,AUTO
         7 003367   200362 453500                    STP3    LENGTH+4,,AUTO
         7 003370   000031 236000 8                  LDQ     25
         7 003371   200361 756100                    STQ     LENGTH+3,,AUTO
         7 003372   200275 634500                    EPPR4   NAME$,,AUTO
         7 003373   200360 454500                    STP4    LENGTH+2,,AUTO
         7 003374   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 003375   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 003376   000000 701000 xent               TSX1    VXA$GET
         7 003377   000000 011000                    NOP     0

      941    14517    3         IF RN_START$ = ADDR(NIL) THEN DO;

  14517  7 003400   000303 236000 2                  LDQ     RN_START$
         7 003401   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 003402   003415 601000 7                  TNZ     s:14521

      942    14518    3             RN_START$ = NAME$;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:212  

  14518  7 003403   200275 236100                    LDQ     NAME$,,AUTO
         7 003404   000303 756000 2                  STQ     RN_START$

      943    14519    3             DN_OFFSET = POFFW( RN_START$, VX_ROOT$->VX$NODE.L_START.DN$ );

  14519  7 003405   000000 470400 xsym               LDP0    VX_ROOT$
         7 003406   000031 236100                    LDQ     25,,PR0
         7 003407   000022 772000                    QRL     18
         7 003410   200360 756100                    STQ     LENGTH+2,,AUTO
         7 003411   000303 236000 2                  LDQ     RN_START$
         7 003412   000022 772000                    QRL     18
         7 003413   200360 136100                    SBLQ    LENGTH+2,,AUTO
         7 003414   000306 756000 2                  STQ     DN_OFFSET

      944    14520    3             END;

      945    14521    2         NAME$->B$DNAME.COUNT = NAME.COUNT;

  14521  7 003415   200351 470500                    LDP0    @NAME,,AUTO
         7 003416   000000 220100                    LDX0    0,,PR0
         7 003417   200275 471500                    LDP1    NAME$,,AUTO
         7 003420   100000 740100                    STX0    0,,PR1

      946    14522    2         NAME$->B$DNAME.TEXT = NAME.TEXT;

  14522  7 003421   200275 471500                    LDP1    NAME$,,AUTO
         7 003422   100000 220100                    LDX0    0,,PR1
         7 003423   000000 221100                    LDX1    0,,PR0
         7 003424   040140 100540                    MLR     fill='040'O
         7 003425   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1
         7 003426   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0

      947    14523        /*
      948    14524                    Add an entry in the entref record and add an entdef to the root node
      949    14525        */
      950    14526              %ALLOCATE( PTR$=EREF$, TYPE=@SD_DS_1, SIZE="SIZEW(B$EREF)" );
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:213  

  14527  7 003427   000003 236000 xsym               LDQ     VX_M_ALL+3
         7 003430   000003 136000 xsym               SBLQ    VX_M_FREE+3
         7 003431   003440 604400 7                  TMOZ    s:14531

  14528  7 003432   000003 236000 xsym               LDQ     VX_M_FREE+3
         7 003433   000022 736000                    QLS     18
         7 003434   000003 036000 xsym               ADLQ    VX_M_BASE_PTR+3
         7 003435   200354 756100                    STQ     EREF$,,AUTO

  14529  7 003436   000003 054000 xsym               AOS     VX_M_FREE+3

  14530  7 003437   003452 710000 7                  TRA     s:14533

  14531  7 003440   000020 236000 8                  LDQ     16
         7 003441   200362 756100                    STQ     LENGTH+4,,AUTO
         7 003442   000024 236000 8                  LDQ     20
         7 003443   200361 756100                    STQ     LENGTH+3,,AUTO
         7 003444   200354 631500                    EPPR1   EREF$,,AUTO
         7 003445   200360 451500                    STP1    LENGTH+2,,AUTO
         7 003446   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 003447   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 003450   000000 701000 xent               TSX1    VXA$GET
         7 003451   000000 011000                    NOP     0

      951    14533    2         SIZE = SIZE + SIZEW(B$EDEF);

  14533  7 003452   000002 236007                    LDQ     2,DL
         7 003453   200322 056100                    ASQ     SIZE,,AUTO

      952    14534              %ALLOCATE( PTR$=EDEF$, TYPE=@ED_DS_1, SIZE="SIZEW(B$EDEF)" );

  14535  7 003454   000005 236000 xsym               LDQ     VX_M_ALL+5
         7 003455   000005 136000 xsym               SBLQ    VX_M_FREE+5
         7 003456   000002 116007                    CMPQ    2,DL
         7 003457   003467 604000 7                  TMI     s:14539

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:214  
  14536  7 003460   000005 236000 xsym               LDQ     VX_M_FREE+5
         7 003461   000022 736000                    QLS     18
         7 003462   000005 036000 xsym               ADLQ    VX_M_BASE_PTR+5
         7 003463   200353 756100                    STQ     EDEF$,,AUTO

  14537  7 003464   000002 236007                    LDQ     2,DL
         7 003465   000005 056000 xsym               ASQ     VX_M_FREE+5

  14538  7 003466   003501 710000 7                  TRA     s:14541

  14539  7 003467   000017 236000 8                  LDQ     15
         7 003470   200362 756100                    STQ     LENGTH+4,,AUTO
         7 003471   000162 236000 8                  LDQ     114
         7 003472   200361 756100                    STQ     LENGTH+3,,AUTO
         7 003473   200353 630500                    EPPR0   EDEF$,,AUTO
         7 003474   200360 450500                    STP0    LENGTH+2,,AUTO
         7 003475   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 003476   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 003477   000000 701000 xent               TSX1    VXA$GET
         7 003500   000000 011000                    NOP     0

      953    14541    2         B$EDEF = EDEF;

  14541  7 003501   200352 470500                    LDP0    @EDEF,,AUTO
         7 003502   200353 471500                    LDP1    EDEF$,,AUTO
         7 003503   000100 100500                    MLR     fill='000'O
         7 003504   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         7 003505   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8

      954    14542        /*
      955    14543                 Make schema attach to the tv def, since that's the name the code'll get
      956    14544        */
      957    14545    2         EDEF.PRI = '0'B;

  14545  7 003506   000163 236000 8                  LDQ     115
         7 003507   000001 356100                    ANSQ    1,,PR0

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:215  
      958    14546    2         B$EDEF.NPOINTER = DN_OFFSET + RN_SIZE;

  14546  7 003510   000306 236000 2                  LDQ     DN_OFFSET
         7 003511   000310 036000 2                  ADLQ    RN_SIZE
         7 003512   000000 620006                    EAX0    0,QL
         7 003513   200353 471500                    LDP1    EDEF$,,AUTO
         7 003514   100001 740100                    STX0    1,,PR1

      959    14547    2         EDEF$->VX$TMPLT.W.WORD0 = OFFSET;

  14547  7 003515   000305 235000 2                  LDA     OFFSET
         7 003516   200353 471500                    LDP1    EDEF$,,AUTO
         7 003517   100000 755100                    STA     0,,PR1

      960    14548    2         VX_ROOT$->VX$NODE.L_STOP.ED$ = EDEF$;

  14548  7 003520   200353 236100                    LDQ     EDEF$,,AUTO
         7 003521   000000 471400 xsym               LDP1    VX_ROOT$
         7 003522   100046 756100                    STQ     38,,PR1

      961    14549    2         VX_ROOT$->VX$NODE.L_SIZE.ED = VX_ROOT$->VX$NODE.L_SIZE.ED + SIZEW(B$EDEF);

  14549  7 003523   100060 235100                    LDA     48,,PR1
         7 003524   000002 035007                    ADLA    2,DL
         7 003525   100060 755100                    STA     48,,PR1

      962    14550    2         IF ER_START$ = ADDR(NIL) THEN ER_START$ = EREF$;

  14550  7 003526   000304 236000 2                  LDQ     ER_START$
         7 003527   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 003530   003533 601000 7                  TNZ     s:14551

  14550  7 003531   200354 236100                    LDQ     EREF$,,AUTO
         7 003532   000304 756000 2                  STQ     ER_START$

      963    14551    2         B$EREF.NPOINTER = RN_SIZE;

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:216  
  14551  7 003533   000310 720000 2                  LXL0    RN_SIZE
         7 003534   200354 473500                    LDP3    EREF$,,AUTO
         7 003535   300000 740100                    STX0    0,,PR3

      964    14552    2         RN_SIZE = RN_SIZE + NAME_SIZE;

  14552  7 003536   000310 236000 2                  LDQ     RN_SIZE
         7 003537   200355 036100                    ADLQ    NAME_SIZE,,AUTO
         7 003540   000310 756000 2                  STQ     RN_SIZE

      965    14553    2         B$EREF.SREF = '0'B;

  14553  7 003541   200354 471500                    LDP1    EREF$,,AUTO
         7 003542   000163 236000 8                  LDQ     115
         7 003543   100000 356100                    ANSQ    0,,PR1

      966    14554    2         B$EREF.ALT = EDEF.ALT;

  14554  7 003544   200354 471500                    LDP1    EREF$,,AUTO
         7 003545   000001 236100                    LDQ     1,,PR0
         7 003546   100000 676100                    ERQ     0,,PR1
         7 003547   200000 376007                    ANQ     65536,DL
         7 003550   100000 656100                    ERSQ    0,,PR1

      967    14555    2         B$EREF.CHECK = EDEF.CHECK;

  14555  7 003551   200354 471500                    LDP1    EREF$,,AUTO
         7 003552   000001 236100                    LDQ     1,,PR0
         7 003553   100000 676100                    ERQ     0,,PR1
         7 003554   100000 376007                    ANQ     32768,DL
         7 003555   100000 656100                    ERSQ    0,,PR1

      968    14556    2         B$EREF.CST = EDEF.CST;

  14556  7 003556   200354 471500                    LDP1    EREF$,,AUTO
         7 003557   000001 236100                    LDQ     1,,PR0
         7 003560   100000 676100                    ERQ     0,,PR1
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:217  
         7 003561   074000 376007                    ANQ     30720,DL
         7 003562   100000 656100                    ERSQ    0,,PR1

      969    14557    2         B$EREF.NPARAM = EDEF.NPARAM;

  14557  7 003563   200354 471500                    LDP1    EREF$,,AUTO
         7 003564   000001 236100                    LDQ     1,,PR0
         7 003565   100000 676100                    ERQ     0,,PR1
         7 003566   003777 376007                    ANQ     2047,DL
         7 003567   100000 656100                    ERSQ    0,,PR1

      970    14558    2         ENTREF_RELOC.OPERAND = ER_SIZE;

  14558  7 003570   000307 720000 2                  LXL0    ER_SIZE
         7 003571   000301 440000 2                  SXL0    ENTREF_RELOC

      971    14559    2         ER_SIZE = ER_SIZE + SIZEW(B$EREF);

  14559  7 003572   000307 054000 2                  AOS     ER_SIZE

      972    14560        /*
      973    14561                              If the relocation record is full, write it
      974    14562        */
      975    14563    3         IF RELOC_CURR$ = RELOC_END$ THEN DO;

  14563  7 003573   200312 236100                    LDQ     RELOC_CURR$,,AUTO
         7 003574   200311 116100                    CMPQ    RELOC_END$,,AUTO
         7 003575   003607 601000 7                  TNZ     s:14572

      976    14564    3             CALL M$WRITE(FPT_WRITE) ALTRET(WRITE_ERROR);

  14564  7 003576   000204 630400 2                  EPPR0   FPT_WRITE
         7 003577   440001 713400                    CLIMB   alt,write
         7 003600   401400 401760                    pmme    nvectors=4
         7 003601   003631 702000 7                  TSX2    WRITE_ERROR

      977    14565    3             ENTREF_RELOC_KEY.OFFSET = OFFSET;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:218  

  14565  7 003602   000305 236000 2                  LDQ     OFFSET
         7 003603   000011 736000                    QLS     9
         7 003604   000272 552030 2                  STBQ    ENTREF_RELOC_KEY+2,'30'O

      978    14566    3             RELOC_CURR$ = RELOC_START$;

  14566  7 003605   200310 236100                    LDQ     RELOC_START$,,AUTO
         7 003606   200312 756100                    STQ     RELOC_CURR$,,AUTO

      979    14567    3             END;

      980    14568        /*
      981    14569                      Add relocation directive to store the address of the entref into
      982    14570                      the tra instruction for this transfer vector entry
      983    14571        */
      984    14572    2         RELOC_CURR$->B$RELOC2 = ENTREF_RELOC;

  14572  7 003607   200312 470500                    LDP0    RELOC_CURR$,,AUTO
         7 003610   000100 100400                    MLR     fill='000'O
         7 003611   000301 000010 2                  ADSC9   ENTREF_RELOC             cn=0,n=8
         7 003612   000000 000014                    ADSC9   0,,PR0                   cn=0,n=12

      985    14573    2         RELOC_CURR$->B$RELOC2.DISP = OFFSET - ENTREF_RELOC_KEY.OFFSET;

  14573  7 003613   000272 236000 2                  LDQ     ENTREF_RELOC_KEY+2
         7 003614   000011 772000                    QRL     9
         7 003615   777777 376007                    ANQ     -1,DL
         7 003616   200360 756100                    STQ     LENGTH+2,,AUTO
         7 003617   000305 236000 2                  LDQ     OFFSET
         7 003620   200360 136100                    SBLQ    LENGTH+2,,AUTO
         7 003621   000000 620006                    EAX0    0,QL
         7 003622   000001 740100                    STX0    1,,PR0

      986    14574    2         RELOC_CURR$ = PINCRW( RELOC_CURR$, SIZEW(ENTREF_RELOC) );

  14574  7 003623   200312 236100                    LDQ     RELOC_CURR$,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:219  
         7 003624   000002 036003                    ADLQ    2,DU
         7 003625   200312 756100                    STQ     RELOC_CURR$,,AUTO

      987    14575    2         OFFSET = OFFSET + 1;

  14575  7 003626   000305 054000 2                  AOS     OFFSET

      988    14576    2         RETURN;

  14576  7 003627   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 003630   000001 702211                    TSX2  ! 1,X1

      989    14577
      990    14578
      991    14579    2   WRITE_ERROR:
      992    14580    2         CALL M$MERC           ALTRET(MERC_ERROR);

  14580  7 003631   410007 713400       WRITE_ERROR  CLIMB   alt,+4103
         7 003632   000000 401760                    pmme    nvectors=0
         7 003633   003635 702000 7                  TSX2    MERC_ERROR

      993    14581    3         DO WHILE( '0'B );

  14581  7 003634   003640 710000 7                  TRA     s:14586

      994    14582    3   MERC_ERROR:
      995    14583    3             CALL VXE$MERC;

  14583  7 003635   000002 631400 xsym  MERC_ERROR   EPPR1   B_VECTNIL+2
         7 003636   000000 701000 xent               TSX1    VXE$MERC
         7 003637   000000 011000                    NOP     0

      996    14584    3             END;

      997    14585              %ERROR_IT;

  14586  7 003640   000002 713400                    CLIMB   err
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:220  
         7 003641   000000 401760                    pmme    nvectors=0

      998    14588
      999    14589
     1000    14590    2   END ADD_VECTOR_ELEMENT;

  14590  7 003642   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 003643   000001 702211                    TSX2  ! 1,X1

     1001    14591
     1002    14592        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:221  
     1003    14593    1   EMPTY_SLOT: PROC( NUM_EMPTY_SLOTS );

  14593  7 003644   200350 741300       EMPTY_SLOT   STX1  ! BUFFER+20,,AUTO

     1004    14594
     1005    14595
     1006    14596    2   DCL NUM_EMPTY_SLOTS     SBIN;
     1007    14597
     1008    14598    2   DCL I                   SBIN;
     1009    14599
     1010    14600
     1011    14601    3         DO I = 1 TO NUM_EMPTY_SLOTS;

  14601  7 003645   000001 235007                    LDA     1,DL
         7 003646   200352 755100                    STA     I,,AUTO
         7 003647   003705 710000 7                  TRA     s:14613+1

     1012    14602                                              /* If relocation record full, write it */
     1013    14603    4             IF RELOC_CURR$ = RELOC_END$ THEN DO;

  14603  7 003650   200312 236100                    LDQ     RELOC_CURR$,,AUTO
         7 003651   200311 116100                    CMPQ    RELOC_END$,,AUTO
         7 003652   003664 601000 7                  TNZ     s:14609

     1014    14604    4                 CALL M$WRITE(FPT_WRITE) ALTRET(WRITE_ERROR);

  14604  7 003653   000204 630400 2                  EPPR0   FPT_WRITE
         7 003654   440001 713400                    CLIMB   alt,write
         7 003655   401400 401760                    pmme    nvectors=4
         7 003656   003713 702000 7                  TSX2    WRITE_ERROR

     1015    14605    4                 ENTREF_RELOC_KEY.OFFSET = OFFSET;

  14605  7 003657   000305 236000 2                  LDQ     OFFSET
         7 003660   000011 736000                    QLS     9
         7 003661   000272 552030 2                  STBQ    ENTREF_RELOC_KEY+2,'30'O

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:222  
     1016    14606    4                 RELOC_CURR$ = RELOC_START$;

  14606  7 003662   200310 236100                    LDQ     RELOC_START$,,AUTO
         7 003663   200312 756100                    STQ     RELOC_CURR$,,AUTO

     1017    14607    4                 END;

     1018    14608                                              /* Add empty slot relocation directive */
     1019    14609    3             RELOC_CURR$->B$RELOC2 = EMPTY_SLOT_RELOC;

  14609  7 003664   200312 470500                    LDP0    RELOC_CURR$,,AUTO
         7 003665   000100 100400                    MLR     fill='000'O
         7 003666   000277 000010 2                  ADSC9   EMPTY_SLOT_RELOC         cn=0,n=8
         7 003667   000000 000014                    ADSC9   0,,PR0                   cn=0,n=12

     1020    14610    3             RELOC_CURR$->B$RELOC2.DISP = OFFSET - ENTREF_RELOC_KEY.OFFSET;

  14610  7 003670   000272 236000 2                  LDQ     ENTREF_RELOC_KEY+2
         7 003671   000011 772000                    QRL     9
         7 003672   777777 376007                    ANQ     -1,DL
         7 003673   200360 756100                    STQ     LENGTH+2,,AUTO
         7 003674   000305 236000 2                  LDQ     OFFSET
         7 003675   200360 136100                    SBLQ    LENGTH+2,,AUTO
         7 003676   000000 620006                    EAX0    0,QL
         7 003677   000001 740100                    STX0    1,,PR0

     1021    14611    3             RELOC_CURR$ = PINCRW( RELOC_CURR$, SIZEW(ENTREF_RELOC) );

  14611  7 003700   200312 236100                    LDQ     RELOC_CURR$,,AUTO
         7 003701   000002 036003                    ADLQ    2,DU
         7 003702   200312 756100                    STQ     RELOC_CURR$,,AUTO

     1022    14612    3             OFFSET = OFFSET + 1;

  14612  7 003703   000305 054000 2                  AOS     OFFSET

     1023    14613    3             END;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:223  

  14613  7 003704   200352 054100                    AOS     I,,AUTO
         7 003705   200351 470500                    LDP0    @NUM_EMPTY_SLOTS,,AUTO
         7 003706   200352 236100                    LDQ     I,,AUTO
         7 003707   000000 116100                    CMPQ    0,,PR0
         7 003710   003650 604400 7                  TMOZ    s:14603

     1024    14614    2         RETURN;

  14614  7 003711   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 003712   000001 702211                    TSX2  ! 1,X1

     1025    14615
     1026    14616
     1027    14617    2   WRITE_ERROR:
     1028    14618    2         CALL M$MERC           ALTRET(MERC_ERROR);

  14618  7 003713   410007 713400       WRITE_ERROR  CLIMB   alt,+4103
         7 003714   000000 401760                    pmme    nvectors=0
         7 003715   003717 702000 7                  TSX2    MERC_ERROR

     1029    14619    3         DO WHILE( '0'B );

  14619  7 003716   003722 710000 7                  TRA     s:14624

     1030    14620    3   MERC_ERROR:
     1031    14621    3             CALL VXE$MERC;

  14621  7 003717   000002 631400 xsym  MERC_ERROR   EPPR1   B_VECTNIL+2
         7 003720   000000 701000 xent               TSX1    VXE$MERC
         7 003721   000000 011000                    NOP     0

     1032    14622    3             END;

     1033    14623              %ERROR_IT;

  14624  7 003722   000002 713400                    CLIMB   err
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:224  
         7 003723   000000 401760                    pmme    nvectors=0

     1034    14626
     1035    14627
     1036    14628    2   END EMPTY_SLOT;

  14628  7 003724   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 003725   000001 702211                    TSX2  ! 1,X1

     1037    14629
     1038    14630        %EJECT;
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:225  
     1039    14631    1   READ_RUN_UNIT: PROC( RUF$ , TYPE, MODE );

  14631  7 003726   200350 741300       READ_RUN_UN* STX1  ! BUFFER+20,,AUTO

     1040    14632
     1041    14633
     1042    14634    2   DCL RUF$ PTR;
     1043    14635    2   DCL MODE UBIN;
     1044    14636    2   DCL TYPE UBIN;
     1045    14637
     1046    14638    2         CALL VXF$OPEN( RUF$, TYPE, MODE );

  14638  7 003727   200351 630500                    EPPR0   @RUF$,,AUTO
         7 003730   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 003731   000000 701000 xent               TSX1    VXF$OPEN
         7 003732   000000 011000                    NOP     0

     1047    14639    2         IF TYPE = 1/*@RF*/ THEN

  14639  7 003733   200352 470500                    LDP0    @TYPE,,AUTO
         7 003734   000000 235100                    LDA     0,,PR0
         7 003735   000001 115007                    CMPA    1,DL
         7 003736   003743 601000 7                  TNZ     s:14642

     1048    14640    2             READ_RU.V.DCB# = DCBNUM(M$RF);

  14640  7 003737   000000 236007 xsym               LDQ     M$RF,DL
         7 003740   000000 620006                    EAX0    0,QL
         7 003741   000152 740000 2                  STX0    READ_RU+8
         7 003742   003746 710000 7                  TRA     s:14643

     1049    14641    2         ELSE
     1050    14642    2             READ_RU.V.DCB# = DCBNUM(M$OF);

  14642  7 003743   000000 236007 xsym               LDQ     M$OF,DL
         7 003744   000000 620006                    EAX0    0,QL
         7 003745   000152 740000 2                  STX0    READ_RU+8
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:226  

     1051    14643    2         VX_R_KEY_BUF.FORM0.COUNT = LENGTHC( VX_R_KEY_HEAD );

  14643  7 003746   004000 236003                    LDQ     2048,DU
         7 003747   000000 552040 xsym               STBQ    VX_R_KEY_BUF,'40'O

     1052    14644    2         VX_R_KEY_BUF.FORM0.CHARS = VX_R_KEY_HEAD ;

  14644  7 003750   040000 100400                    MLR     fill='040'O
         7 003751   000000 000004 xsym               ADSC9   VX_R_KEY_HEAD            cn=0,n=4
         7 003752   000000 200005 xsym               ADSC9   VX_R_KEY_BUF             cn=1,n=5

     1053    14645    2         READ_RU.BUF_ = VECTOR(B$HEAD);

  14645  7 003753   000144 235000 8                  LDA     100
         7 003754   200360 452500                    STP2    LENGTH+2,,AUTO
         7 003755   200360 236100                    LDQ     LENGTH+2,,AUTO
         7 003756   000003 036003                    ADLQ    3,DU
         7 003757   000146 757000 2                  STAQ    READ_RU+4

     1054    14646    2         CALL M$READ(READ_RU) ALTRET(NO_HEAD);

  14646  7 003760   000142 630400 2                  EPPR0   READ_RU
         7 003761   440000 713400                    CLIMB   alt,read
         7 003762   401400 401760                    pmme    nvectors=4
         7 003763   004126 702000 7                  TSX2    NO_HEAD

     1055    14647    2         RU_DNAME_SIZE = B$HEAD.NRECSIZE;

  14647  7 003764   200011 236100                    LDQ     B$HEAD+6,,AUTO
         7 003765   777777 376007                    ANQ     -1,DL
         7 003766   200316 756100                    STQ     RU_DNAME_SIZE,,AUTO

     1056    14648              %ALLOCATE( PTR$=RU_DNAME$, TYPE=@SD_DS_1, SIZE=RU_DNAME_SIZE );

  14649  7 003767   000003 236000 xsym               LDQ     VX_M_ALL+3
         7 003770   000003 136000 xsym               SBLQ    VX_M_FREE+3
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:227  
         7 003771   200316 116100                    CMPQ    RU_DNAME_SIZE,,AUTO
         7 003772   004003 604000 7                  TMI     s:14653

  14650  7 003773   000003 236000 xsym               LDQ     VX_M_FREE+3
         7 003774   000022 736000                    QLS     18
         7 003775   000003 036000 xsym               ADLQ    VX_M_BASE_PTR+3
         7 003776   200305 756100                    STQ     RU_DNAME$,,AUTO

  14651  7 003777   000003 236000 xsym               LDQ     VX_M_FREE+3
         7 004000   200316 036100                    ADLQ    RU_DNAME_SIZE,,AUTO
         7 004001   000003 756000 xsym               STQ     VX_M_FREE+3

  14652  7 004002   004015 710000 7                  TRA     s:14655

  14653  7 004003   200316 630500                    EPPR0   RU_DNAME_SIZE,,AUTO
         7 004004   200362 450500                    STP0    LENGTH+4,,AUTO
         7 004005   000024 236000 8                  LDQ     20
         7 004006   200361 756100                    STQ     LENGTH+3,,AUTO
         7 004007   200305 631500                    EPPR1   RU_DNAME$,,AUTO
         7 004010   200360 451500                    STP1    LENGTH+2,,AUTO
         7 004011   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 004012   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 004013   000000 701000 xent               TSX1    VXA$GET
         7 004014   000000 011000                    NOP     0

     1057    14655    2         SIZE = SIZE + RU_DNAME_SIZE;

  14655  7 004015   200322 236100                    LDQ     SIZE,,AUTO
         7 004016   200316 036100                    ADLQ    RU_DNAME_SIZE,,AUTO
         7 004017   200322 756100                    STQ     SIZE,,AUTO

     1058    14656    2         CALL VXK$KEY( 1/*@RF*/, 1, 0, 0 );

  14656  7 004020   000164 630400 8                  EPPR0   116
         7 004021   000022 631400 xsym               EPPR1   B_VECTNIL+18
         7 004022   000000 701000 xent               TSX1    VXK$KEY
         7 004023   000000 011000                    NOP     0
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:228  

     1059    14657    2         READ_RU.BUF_.BUF$ = RU_DNAME$;

  14657  7 004024   200305 236100                    LDQ     RU_DNAME$,,AUTO
         7 004025   000147 756000 2                  STQ     READ_RU+5

     1060    14658    2         READ_RU.BUF_.BOUND = (RU_DNAME_SIZE * 4) - 1;

  14658  7 004026   200316 236100                    LDQ     RU_DNAME_SIZE,,AUTO
         7 004027   000002 736000                    QLS     2
         7 004030   000001 136007                    SBLQ    1,DL
         7 004031   000020 736000                    QLS     16
         7 004032   000146 676000 2                  ERQ     READ_RU+4
         7 004033   000034 376000 xsym               ANQ     B_VECTNIL+28
         7 004034   000146 656000 2                  ERSQ    READ_RU+4

     1061    14659    2         CALL M$READ(READ_RU) ALTRET(READ_ERROR);

  14659  7 004035   000142 630400 2                  EPPR0   READ_RU
         7 004036   440000 713400                    CLIMB   alt,read
         7 004037   401400 401760                    pmme    nvectors=4
         7 004040   004120 702000 7                  TSX2    READ_ERROR

     1062    14660    2         RU_EDEF_SIZE = B$HEAD.EPRECSIZE;

  14660  7 004041   200012 235100                    LDA     B$HEAD+7,,AUTO
         7 004042   000022 771000                    ARL     18
         7 004043   200317 755100                    STA     RU_EDEF_SIZE,,AUTO

     1063    14661              %ALLOCATE( PTR$=RU_EDEF$, TYPE=@SD_DS_1, SIZE=RU_EDEF_SIZE );

  14662  7 004044   000003 236000 xsym               LDQ     VX_M_ALL+3
         7 004045   000003 136000 xsym               SBLQ    VX_M_FREE+3
         7 004046   200317 116100                    CMPQ    RU_EDEF_SIZE,,AUTO
         7 004047   004060 604000 7                  TMI     s:14666

  14663  7 004050   000003 236000 xsym               LDQ     VX_M_FREE+3
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:229  
         7 004051   000022 736000                    QLS     18
         7 004052   000003 036000 xsym               ADLQ    VX_M_BASE_PTR+3
         7 004053   200306 756100                    STQ     RU_EDEF$,,AUTO

  14664  7 004054   000003 236000 xsym               LDQ     VX_M_FREE+3
         7 004055   200317 036100                    ADLQ    RU_EDEF_SIZE,,AUTO
         7 004056   000003 756000 xsym               STQ     VX_M_FREE+3

  14665  7 004057   004072 710000 7                  TRA     s:14668

  14666  7 004060   200317 630500                    EPPR0   RU_EDEF_SIZE,,AUTO
         7 004061   200362 450500                    STP0    LENGTH+4,,AUTO
         7 004062   000024 236000 8                  LDQ     20
         7 004063   200361 756100                    STQ     LENGTH+3,,AUTO
         7 004064   200306 631500                    EPPR1   RU_EDEF$,,AUTO
         7 004065   200360 451500                    STP1    LENGTH+2,,AUTO
         7 004066   200360 630500                    EPPR0   LENGTH+2,,AUTO
         7 004067   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 004070   000000 701000 xent               TSX1    VXA$GET
         7 004071   000000 011000                    NOP     0

     1064    14668    2         SIZE = SIZE + RU_EDEF_SIZE;

  14668  7 004072   200322 236100                    LDQ     SIZE,,AUTO
         7 004073   200317 036100                    ADLQ    RU_EDEF_SIZE,,AUTO
         7 004074   200322 756100                    STQ     SIZE,,AUTO

     1065    14669    2         CALL VXK$KEY( 1/*@RF*/, 4, 0, 0 );

  14669  7 004075   000132 630400 8                  EPPR0   90
         7 004076   000022 631400 xsym               EPPR1   B_VECTNIL+18
         7 004077   000000 701000 xent               TSX1    VXK$KEY
         7 004100   000000 011000                    NOP     0

     1066    14670    2         READ_RU.BUF_.BUF$ = RU_EDEF$;

  14670  7 004101   200306 236100                    LDQ     RU_EDEF$,,AUTO
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:230  
         7 004102   000147 756000 2                  STQ     READ_RU+5

     1067    14671    2         READ_RU.BUF_.BOUND = (RU_EDEF_SIZE * 4) - 1;

  14671  7 004103   200317 236100                    LDQ     RU_EDEF_SIZE,,AUTO
         7 004104   000002 736000                    QLS     2
         7 004105   000001 136007                    SBLQ    1,DL
         7 004106   000020 736000                    QLS     16
         7 004107   000146 676000 2                  ERQ     READ_RU+4
         7 004110   000034 376000 xsym               ANQ     B_VECTNIL+28
         7 004111   000146 656000 2                  ERSQ    READ_RU+4

     1068    14672    2         CALL M$READ(READ_RU) ALTRET(READ_ERROR);

  14672  7 004112   000142 630400 2                  EPPR0   READ_RU
         7 004113   440000 713400                    CLIMB   alt,read
         7 004114   401400 401760                    pmme    nvectors=4
         7 004115   004120 702000 7                  TSX2    READ_ERROR

     1069    14673    2         RETURN;

  14673  7 004116   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 004117   000001 702211                    TSX2  ! 1,X1

     1070    14674
     1071    14675        /*E*  ERROR: VXU-E$TRANSVECT_READ_ERR_VX-C
     1072    14676              MESSAGE: Unable to read record from %FN during transfer vector processing.
     1073    14677        */
     1074    14678    2   READ_ERROR:
     1075    14679    2         VX_FPT_ERRMSG.V.DCB# = READ_RU.V.DCB#;

  14679  7 004120   000152 220000 2     READ_ERROR   LDX0    READ_RU+8
         7 004121   000026 740000 xsym               STX0    VX_FPT_ERRMSG+22

     1076    14680              %SCREAM(ERR#=E$TRANSVECT_READ_ERR_VX, MID="'U'", LEVEL=@E$F_VX );

  14681  7 004122   000171 630400 8                  EPPR0   121
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:231  
         7 004123   000022 631400 xsym               EPPR1   B_VECTNIL+18
         7 004124   000000 701000 xent               TSX1    VXE$ERROR
         7 004125   000000 011000                    NOP     0

     1077    14683
     1078    14684        /*E*  ERROR: VXU-E$TRANSVECT_NOHEAD_VX-C
     1079    14685        MESSAGE: Unable to read head record for %FN during transfer vector processing.
     1080    14686        */
     1081    14687    2   NO_HEAD:
     1082    14688    2         VX_FPT_ERRMSG.V.DCB# = READ_RU.V.DCB#;

  14688  7 004126   000152 220000 2     NO_HEAD      LDX0    READ_RU+8
         7 004127   000026 740000 xsym               STX0    VX_FPT_ERRMSG+22

     1083    14689              %SCREAM(ERR#=E$TRANSVECT_NOHEAD_VX, MID="'U'", LEVEL=@E$F_VX );

  14690  7 004130   000176 630400 8                  EPPR0   126
         7 004131   000022 631400 xsym               EPPR1   B_VECTNIL+18
         7 004132   000000 701000 xent               TSX1    VXE$ERROR
         7 004133   000000 011000                    NOP     0

     1084    14692
     1085    14693    2   END READ_RUN_UNIT;

  14693  7 004134   200350 221300                    LDX1  ! BUFFER+20,,AUTO
         7 004135   000001 702211                    TSX2  ! 1,X1

     1086    14694
     1087    14695
     1088    14696
     1089    14697    1   END VXU$TRANSVECT;

  14697  7 004136   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:232  
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXU$TRANSVECT.
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:233  

 **** Variables and constants ****

  ****  Section 002  Data  VXU$TRANSVECT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   306-0-0/w SBIN        r     1 DN_OFFSET                262-0-0/w STRC(144)   r     1 ED_RECORD
   336-0-0/c STRC(189)   r     1 EMPTY_SLOT_MSG           277-0-0/w STRC(72)    r     1 EMPTY_SLOT_RELOC
   301-0-0/w STRC(72)    r     1 ENTREF_RELOC             270-0-0/w STRC(117)   r     1 ENTREF_RELOC_KEY
   307-0-0/w SBIN        r     1 ER_SIZE                  304-0-0/w PTR         r     1 ER_START$
   266-0-0/w STRC(72)    r     1 FORM1_KEY                 72-0-0/d STRC(1080)  r     1 FPT_CLOSE
   130-0-0/d STRC(360)   r     1 FPT_DELREC                 0-0-0/d STRC(2088)  r     1 FPT_OPEN
   204-0-0/d STRC(432)   r     1 FPT_WRITE                220-0-0/c STRC(90)    r     1 HEAD_KEY
   223-0-0/w STRC(1044)  r     1 HEAD_RECORD              305-0-0/w SBIN        r     1 OFFSET
   142-0-0/d STRC(504)   r     1 READ_RU                  274-0-0/w STRC(108)   r     1 REPEAT_TRA_RELOC_REC
   310-0-0/w SBIN        r     1 RN_SIZE                  303-0-0/w PTR         r     1 RN_START$
   260-0-0/w STRC(72)    r     1 SC_RECORD                311-0-0/c STRC(756)   r     1 TRANS_VECT_MSG
   174-0-0/c STRC(279)   r     1 VLP_NAME                 160-0-0/d STRC(432)   r     1 WRITE_RU

  ****  Section 006 RoData VXU$TRANSVECT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(324)   r     1 DN_RECORD
    20-0-0/b BIT (72)    r     1 FORM1_BUF_(0:2)
    15-0-0/w UBIN        r     1 FORM1_REC_TYPES(0:2)
    11-0-0/w STRC(117)   r     1 REPEAT_TRA_RELOC_REC_KEY

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   352-0-0/w PTR         r     1 @EDEF                    353-0-0/w PTR         r     1 @END$
   352-0-0/w PTR         r     1 @ENTDEF$                 353-0-0/w PTR         r     1 @MODE
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:234  
   351-0-0/w PTR         r     1 @NAME                    351-0-0/w PTR         r     1 @NAME
   351-0-0/w PTR         r     1 @NAME                    351-0-0/w PTR         r     1 @NAME
   351-0-0/w PTR         r     1 @NUM_EMPTY_SLOTS         351-0-0/w PTR         r     1 @RUF$
   353-0-0/w PTR         r     1 @SRCH                    352-0-0/w PTR         r     1 @START$
   352-0-0/w PTR         r     1 @START$                  352-0-0/w PTR         r     1 @TYPE
   313-0-0/w PTR         r     1 ALL$                       3-0-0/w STRC(1440)  r     1 B$HEAD
   266-0-0/w UBIN        r     1 BIN_HIGH                 265-0-0/w UBIN        r     1 BIN_LOW
   267-0-0/w UBIN        r     1 BIN_MID                  261-0-0/w PTR         r     1 BIN_N$
   270-0-0/w PTR         r     1 BIN_NTEMP$               260-0-0/w PTR         r     1 BIN_RESULT$
   256-0-0/w PTR         r     1 BIN_START$               271-0-0/w PTR         r     1 BIN_START1$
   257-0-0/w PTR         r     1 BIN_STOP$                324-0-0/c CHAR(80)    r     1 BUFFER
    55-0-0/w STRC(4644)  r     1 DNAME                     *0-0-0/w STRC(72)    r     1 EDEF
   353-0-0/w PTR         r     1 EDEF$                    307-0-0/w PTR         r     1 END$
    *0-0-0/w PTR         r     1 END$                      53-0-0/w STRC(72)    r     1 ENTDEF
   303-0-0/w PTR         r     1 ENTDEF$                   *0-0-0/w PTR         r     1 ENTDEF$
   354-0-0/w PTR         r     1 EREF$                    314-0-0/w SBIN        r     1 I
   352-0-0/w SBIN        r     1 I                        355-0-0/w UBIN        r     1 LENGTH
   356-0-0/w UBIN        r     1 LENGTH                   300-0-0/w PTR         r     1 LIST$
    *0-0-0/w UBIN        r     1 MODE                      *0-0-0/w ASTR(18)    r     1 NAME
    *0-0-0/w ASTR(18)    r     1 NAME                      *0-0-0/w ASTR(18)    r     1 NAME
    *0-0-0/w ASTR(18)    r     1 NAME                     275-0-0/w PTR         r     1 NAME$
   354-0-0/w PTR         r     1 NAME$                    353-0-0/w PTR         r     1 NAME$
   354-0-0/w PTR         r     1 NAME$                    276-0-0/w PTR         r     1 NAME1$
   277-0-0/w PTR         r     1 NAME2$                   355-0-0/w SBIN        r     1 NAME_SIZE
   315-0-0/w SBIN        r     1 NEXT                     304-0-0/w PTR         r     1 NEXT$
    *0-0-0/w SBIN        r     1 NUM_EMPTY_SLOTS          272-0-0/w PTR         r     1 P$
   354-0-0/w PTR         r     1 P$                       355-0-0/w PTR         r     1 P$
   273-0-0/w PTR         r     1 Q$                       274-0-0/w PTR         r     1 R$
   312-0-0/w PTR         r     1 RELOC_CURR$              311-0-0/w PTR         r     1 RELOC_END$
   310-0-0/w PTR         r     1 RELOC_START$              *0-0-0/w PTR         r     1 RUF$
   305-0-0/w PTR         r     1 RU_DNAME$                316-0-0/w SBIN        r     1 RU_DNAME_SIZE
   306-0-0/w PTR         r     1 RU_EDEF$                 317-0-0/w SBIN        r     1 RU_EDEF_SIZE
   320-0-0/w SBIN        r     1 RU_SDEF_SIZE             322-0-0/w SBIN        r     1 SIZE
   323-0-0/w SBIN        r     1 SLOTS                     *0-0-0/w UBIN        r     1 SRCH
   301-0-0/w PTR         r     1 START$                    *0-0-0/w PTR         r     1 START$
    *0-0-0/w PTR         r     1 START$                   302-0-0/w PTR         r     1 STOP$
   321-0-0/w SBIN        r     1 TABS                      *0-0-0/w UBIN        r     1 TYPE
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:235  

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(108)   r     1 VX_BIAS                    0-0-0/w STRC(720)   r     1 VX_EFIELD1
     0-0-0/w STRC(720)   r     1 VX_EFIELD2                 0-0-0/d STRC(936)   r     1 VX_FPT_ERRMSG
     0-0-0/w SBIN        r     1 VX_M_ALL(0:8)
     0-0-0/w PTR         r     1 VX_M_BASE_PTR(0:8)
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w STRC(4572)  r     1 VX_O                       0-0-0/w STRC(2340)  r     1 VX_PASS2_REF
     0-0-0/w UBIN        r     1 VX_REC_BUF_SIZE            0-0-0/w PTR         r     1 VX_ROOT$
     0-0-0/w PTR         r     1 VX_RUF$                    0-0-0/w STRC(108)   r     1 VX_R_KEY_BUF
     0-0-0/c CHAR(4)     r     1 VX_R_KEY_HEAD              0-0-0/w STRC(1908)  r     1 VX_SPC

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(18)    r     1 B$DNAME                    0-0-0/w ASTR(18)    r     1 B$DNAME
     0-0-0/w ASTR(18)    r     1 B$DNAME                    0-0-0/w STRC(72)    r     1 B$EDEF
     0-0-0/w STRC(72)    r     1 B$EDEF                     0-0-0/w STRC(72)    r     1 B$EDEF
     0-0-0/w STRC(72)    r     1 B$EDEF                     0-0-0/w STRC        r     1 B$EREF
     0-0-0/w STRC(108)   r     1 B$RELOC2                   0-0-0/w STRC(4626)  r     1 C$DNAME
     0-0-0N  NULL        r     1 M$LF                       0-0-0N  NULL        r     1 M$OF
     0-0-0N  NULL        r     1 M$RF                       0-0-0/w STRC(108)   r     1 VX$LLIST_SC
     0-0-0/w STRC(648)   r     1 VX$LST                     0-0-0/w STRC(3672)  r     1 VX$NODE
     0-0-0/w STRC(108)   r     1 VX$SC                      0-0-0/w STRC(72)    r     1 VX$TMPLT
     0-0-0/w STRC        r     1 VX$VECTOR_LST              0-0-0/w STRC(72)    r     1 VXD$TMPLT


   Procedure VXU$TRANSVECT requires 2143 words for executable code.
   Procedure VXU$TRANSVECT requires 248 words of local(AUTO) storage.
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:236  

    No errors detected in file VXU$TRANSVECT.:E05TSI    .
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:237  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:238  
          MINI XREF LISTING

ADD_VECTOR_ELEMENT
     14279**PROC    13410--CALL    13509--CALL    13532--CALL
ALL$
     13135**DCL     13262<<ASSIGN  13265<>CALL    13267>>ASSIGN  13268>>ASSIGN  13269>>ASSIGN  13270>>ASSIGN
     13271>>ASSIGN  13272>>ASSIGN  13272>>ASSIGN  13273>>ASSIGN  13274>>ASSIGN  13275>>ASSIGN  13276>>ASSIGN
     13277>>ASSIGN  13278>>ASSIGN  13279>>ASSIGN  13280>>ASSIGN  13284>>ASSIGN  13285>>ASSIGN
B$DNAME
     12544**DCL     13410<>CALL    13509<>CALL    13528<>CALL    13529<>CALL    13532<>CALL    13715>>ASSIGN
B$DNAME.COUNT
     12545**DCL     12552--IMP-SIZ 13364>>IF      13364>>IF      13367>>IF      13367>>IF      13384>>IF
     13384>>IF      13390>>IF      13390>>IF      13410>>CALL    13417>>ASSIGN  13418>>ASSIGN  13463>>IF
     13463>>IF      13466>>IF      13466>>IF      13483>>IF      13483>>IF      13489>>IF      13489>>IF
     13509>>CALL    13517>>ASSIGN  13518>>ASSIGN  13528>>CALL    13529>>CALL    13532>>CALL    13542>>ASSIGN
     13543>>ASSIGN  13544>>ASSIGN  13545>>ASSIGN  13712>>ASSIGN  13715>>ASSIGN  13718>>ASSIGN  13732>>IF
     13732>>IF      13740>>IF      13740>>IF      13777>>IF      13777>>IF      13788>>CALLBLT 13932>>IF
     13932>>IF      13935>>IF      13935>>IF      13952>>IF      13952>>IF      13958>>IF      13958>>IF
     13985>>IF      14521<<ASSIGN  14522>>ASSIGN
B$DNAME.TEXT
     12552**DCL     13364>>IF      13364>>IF      13367>>IF      13367>>IF      13384>>IF      13384>>IF
     13390>>IF      13390>>IF      13418>>ASSIGN  13463>>IF      13463>>IF      13466>>IF      13466>>IF
     13483>>IF      13483>>IF      13489>>IF      13489>>IF      13518>>ASSIGN  13543>>ASSIGN  13545>>ASSIGN
     13712>>ASSIGN  13718>>ASSIGN  13732>>IF      13732>>IF      13740>>IF      13740>>IF      13777>>IF
     13777>>IF      13788>>CALLBLT 13932>>IF      13932>>IF      13935>>IF      13935>>IF      13952>>IF
     13952>>IF      13958>>IF      13958>>IF      13985>>IF      14522<<ASSIGN
B$DNAME.COUNT IN PROCEDURE FIND_RANGE_END
     14177**DCL     14184--IMP-SIZ 14261>>IF      14262>>ASSIGN  14264>>IF
B$DNAME.TEXT IN PROCEDURE FIND_RANGE_END
     14184**DCL     14264>>IF
B$DNAME.COUNT IN PROCEDURE FIND_RANGE_START
     14040**DCL     14047--IMP-SIZ 14124>>IF      14125>>ASSIGN  14127>>IF
B$DNAME.TEXT IN PROCEDURE FIND_RANGE_START
     14047**DCL     14127>>IF
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:239  
B$EDEF
     12381**DCL     13294--CALL    13321--ASSIGN  13322--CALL    13325--ASSIGN  13327--ASSIGN  13329--ASSIGN
     13331>>ASSIGN  13332<<ASSIGN  13332>>ASSIGN  13333<<ASSIGN  13360--IF      13372--ASSIGN  13378--ASSIGN
     13379--ASSIGN  13382--ASSIGN  13410<>CALL    13425--ASSIGN  13459--IF      13471--ASSIGN  13477--ASSIGN
     13478--ASSIGN  13481--ASSIGN  13509<>CALL    13532<>CALL    13533--ASSIGN  13623--CALL    13661--ASSIGN
     13665--CALL    13670>>ASSIGN  13672--ASSIGN  13674<<ASSIGN  13674>>ASSIGN  13675<<ASSIGN  13680>>ASSIGN
     13681--ASSIGN  13683>>ASSIGN  13686--ASSIGN  13687<<ASSIGN  13687>>ASSIGN  13690<<ASSIGN  13691--ASSIGN
     13694--CALL    13729>>ASSIGN  13730--ASSIGN  13735--ASSIGN  13738--ASSIGN  13743--ASSIGN  13746--ASSIGN
     13748<<ASSIGN  13748>>ASSIGN  13749--ASSIGN  13750--ASSIGN  13752--ASSIGN  13753<<ASSIGN  13754--ASSIGN
     13756--ASSIGN  13775--ASSIGN  13780--ASSIGN  13794--ASSIGN  13797<<ASSIGN  13797>>ASSIGN  13798--ASSIGN
     13799--ASSIGN  13816--ASSIGN  13822--ASSIGN  13823--CALL    13850--ASSIGN  13928--IF      13940--ASSIGN
     13946--ASSIGN  13947--ASSIGN  13950--ASSIGN  13986--ASSIGN
B$EDEF.ISADDR
     12404**DCL     13328>>IF      13328>>IF      13343>>ASSIGN  13673>>IF      13673>>IF      13706>>DOWHILE
     13719>>ASSIGN
B$EDEF.LFLAGS.SOURCE
     12386**DCL     13815<<ASSIGN
B$EDEF.NPOINTER
     12406**DCL     13348>>ASSIGN  13531>>ASSIGN  13711>>ASSIGN  13725>>ASSIGN  13726<<ASSIGN  13726>>ASSIGN
     13727<<ASSIGN  13732>>IF      13732>>IF      13740>>IF      13740>>IF      13774>>ASSIGN  13777>>IF
     13777>>IF      13984>>ASSIGN
B$EDEF.OU
     12398**DCL     12404--REDEF
B$EDEF.OU.OFFSET
     12402**DCL     13557<<ASSIGN
B$EDEF.PRI
     12409**DCL     13722<<ASSIGN  13722>>ASSIGN  13723<<ASSIGN
B$EDEF IN PROCEDURE ADD_VECTOR_ELEMENT
     14373**DCL     14533--ASSIGN  14535--IF      14537--ASSIGN  14539--CALL    14541<<ASSIGN  14549--ASSIGN
B$EDEF.NPOINTER IN PROCEDURE ADD_VECTOR_ELEMENT
     14398**DCL     14546<<ASSIGN
B$EDEF.OU IN PROCEDURE ADD_VECTOR_ELEMENT
     14390**DCL     14396--REDEF
B$EDEF IN PROCEDURE FIND_RANGE_END
     14188**DCL     14268--ASSIGN  14272--ASSIGN
B$EDEF.NPOINTER IN PROCEDURE FIND_RANGE_END
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:240  
     14213**DCL     14260>>ASSIGN
B$EDEF.OU IN PROCEDURE FIND_RANGE_END
     14205**DCL     14211--REDEF
B$EDEF IN PROCEDURE FIND_RANGE_START
     14051**DCL     14132--ASSIGN
B$EDEF.NPOINTER IN PROCEDURE FIND_RANGE_START
     14076**DCL     14123>>ASSIGN
B$EDEF.OU IN PROCEDURE FIND_RANGE_START
     14068**DCL     14074--REDEF
B$EREF IN PROCEDURE ADD_VECTOR_ELEMENT
     14444**DCL     14527--IF      14529--ASSIGN  14531--CALL    14559--ASSIGN
B$EREF.ALT IN PROCEDURE ADD_VECTOR_ELEMENT
     14451**DCL     14554<<ASSIGN
B$EREF.CHECK IN PROCEDURE ADD_VECTOR_ELEMENT
     14455**DCL     14555<<ASSIGN
B$EREF.CST IN PROCEDURE ADD_VECTOR_ELEMENT
     14463**DCL     14556<<ASSIGN
B$EREF.NPARAM IN PROCEDURE ADD_VECTOR_ELEMENT
     14483**DCL     14557<<ASSIGN
B$EREF.NPOINTER IN PROCEDURE ADD_VECTOR_ELEMENT
     14445**DCL     14551<<ASSIGN
B$EREF.SREF IN PROCEDURE ADD_VECTOR_ELEMENT
     14448**DCL     14553<<ASSIGN
B$HEAD
     12165**DCL     13860--ASSIGN  14645--ASSIGN
B$HEAD.EDRECSIZE
     12237**DCL     13829>>ASSIGN
B$HEAD.EPRECSIZE
     12234**DCL     13804<<ASSIGN  14660>>ASSIGN
B$HEAD.NRECSIZE
     12231**DCL     14647>>ASSIGN
B$HEAD.REMOVE_ENTDEF
     12265**DCL     13813<<ASSIGN
B$HEAD.REMOVE_SYMDEF
     12268**DCL     13831<<ASSIGN
B$RELOC2
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:241  
     12999**DCL     14572<<ASSIGN  14609<<ASSIGN
B$RELOC2.DISP
     13051**DCL     14573<<ASSIGN  14610<<ASSIGN
BIN_HIGH
     13093**DCL     13378<<ASSIGN  13381>>ASSIGN  13393<<ASSIGN  13395>>IF      13477<<ASSIGN  13480>>ASSIGN
     13492<<ASSIGN  13494>>IF      13946<<ASSIGN  13949>>ASSIGN  13961<<ASSIGN  13963>>IF
BIN_LOW
     13092**DCL     13377<<ASSIGN  13381>>ASSIGN  13387<<ASSIGN  13395>>IF      13476<<ASSIGN  13480>>ASSIGN
     13486<<ASSIGN  13494>>IF      13945<<ASSIGN  13949>>ASSIGN  13955<<ASSIGN  13963>>IF
BIN_MID
     13094**DCL     13381<<ASSIGN  13382>>ASSIGN  13387>>ASSIGN  13393>>ASSIGN  13480<<ASSIGN  13481>>ASSIGN
     13486>>ASSIGN  13492>>ASSIGN  13949<<ASSIGN  13950>>ASSIGN  13955>>ASSIGN  13961>>ASSIGN
BIN_N$
     13086**DCL     13319<<ASSIGN  13322<>CALL    13338<<ASSIGN  13363>>ASSIGN  13383>>ASSIGN  13431<<ASSIGN
     13462>>ASSIGN  13482>>ASSIGN  13531>>ASSIGN  13659<<ASSIGN  13665<>CALL    13694<>CALL    13711>>ASSIGN
     13732>>IF      13732>>IF      13740>>IF      13740>>IF      13774>>ASSIGN  13777>>IF      13777>>IF
     13823<>CALL    13931>>ASSIGN  13951>>ASSIGN  13984>>ASSIGN  14123>>ASSIGN  14260>>ASSIGN
BIN_NTEMP$
     13095**DCL     13363<<ASSIGN  13364>>IF      13364>>IF      13367>>IF      13367>>IF      13383<<ASSIGN
     13384>>IF      13384>>IF      13390>>IF      13390>>IF      13462<<ASSIGN  13463>>IF      13463>>IF
     13466>>IF      13466>>IF      13482<<ASSIGN  13483>>IF      13483>>IF      13489>>IF      13489>>IF
     13931<<ASSIGN  13932>>IF      13932>>IF      13935>>IF      13935>>IF      13951<<ASSIGN  13952>>IF
     13952>>IF      13958>>IF      13958>>IF
BIN_RESULT$
     13085**DCL     13361<<ASSIGN  13362>>DOWHILE 13363>>ASSIGN  13372<<ASSIGN  13372>>ASSIGN  13382<<ASSIGN
     13383>>ASSIGN  13410>>CALL    13460<<ASSIGN  13461>>DOWHILE 13462>>ASSIGN  13471<<ASSIGN  13471>>ASSIGN
     13481<<ASSIGN  13482>>ASSIGN  13509>>CALL    13929<<ASSIGN  13930>>DOWHILE 13931>>ASSIGN  13940<<ASSIGN
     13940>>ASSIGN  13950<<ASSIGN  13951>>ASSIGN  13978>>ASSIGN
BIN_START$
     13083**DCL     13320<<ASSIGN  13322<>CALL    13339<<ASSIGN  13359>>IF      13360>>IF      13361>>ASSIGN
     13378>>ASSIGN  13379>>ASSIGN  13432<<ASSIGN  13458>>IF      13459>>IF      13460>>ASSIGN  13477>>ASSIGN
     13478>>ASSIGN  13660<<ASSIGN  13665<>CALL    13693<<ASSIGN  13694<>CALL    13702>>ASSIGN  13703>>ASSIGN
     13731>>DOWHILE 13747>>DOWHILE 13752<<ASSIGN  13772>>ASSIGN  13794>>IF      13796>>DOWHILE 13797>>ASSIGN
     13799<<ASSIGN  13799>>ASSIGN  13927>>IF      13928>>IF      13929>>ASSIGN  13946>>ASSIGN  13947>>ASSIGN
     13982>>ASSIGN  14121>>ASSIGN
BIN_START1$
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:242  
     13096**DCL     13379<<ASSIGN  13382>>ASSIGN  13478<<ASSIGN  13481>>ASSIGN  13947<<ASSIGN  13950>>ASSIGN
BIN_STOP$
     13084**DCL     13321<<ASSIGN  13322<>CALL    13340<<ASSIGN  13360>>IF      13362>>DOWHILE 13378>>ASSIGN
     13433<<ASSIGN  13459>>IF      13461>>DOWHILE 13477>>ASSIGN  13661<<ASSIGN  13665<>CALL    13694<>CALL
     13739>>DOWHILE 13773>>DOWHILE 13776>>DOWHILE 13794>>ASSIGN  13796>>DOWHILE 13928>>IF      13930>>DOWHILE
     13946>>ASSIGN  13983>>DOWHILE 14122>>DOWHILE 14259>>DOWHILE 14274>>ASSIGN
BUFFER
     13220**DCL     13771<<ASSIGN  13784<>CALL    13786<<ASSIGN  13788<<CALLBLT 13792<>CALL
C$DNAME.COUNT
     12572**DCL     13614>>ASSIGN  13615>>CALLBLT 13616<<ASSIGN  13616>>ASSIGN
C$DNAME.TEXT
     12573**DCL     12574--REDEF   13615<<CALLBLT
CLOSE_ERR
     13867**LABEL   13286--CALLALT 13650--CALLALT
DNAME
     12575**DCL     13715<<ASSIGN  13717<>CALL    13718--ASSIGN  13718--ASSIGN  13732--IF      13732--IF
     13740--IF      13740--IF
DNAME.COUNT
     12576**DCL     13716<<ASSIGN  13716>>ASSIGN
DNAME.TEXT
     12577**DCL     12578--REDEF
DN_OFFSET
     13155**DCL     14519<<ASSIGN  14546>>ASSIGN
DN_RECORD
     12781**DCL     12741--DCLINIT 12742--DCLINIT 12948--DCLINIT
DN_RECORD.TV_EN_NAME
     12785**DCL     13337<>CALL    13556<>CALL    13679<>CALL
DN_RECORD.TV_ST_NAME
     12782**DCL     13323<>CALL    13669<>CALL
EDEF IN PROCEDURE ADD_VECTOR_ELEMENT
     14302**DCL     14279--PROC    14541>>ASSIGN
EDEF.ALT IN PROCEDURE ADD_VECTOR_ELEMENT
     14335**DCL     14554>>ASSIGN
EDEF.CHECK IN PROCEDURE ADD_VECTOR_ELEMENT
     14340**DCL     14555>>ASSIGN
EDEF.CST IN PROCEDURE ADD_VECTOR_ELEMENT
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:243  
     14348**DCL     14556>>ASSIGN
EDEF.LFLAGS.USED IN PROCEDURE ADD_VECTOR_ELEMENT
     14313**DCL     14493>>IF      14493<<ASSIGN
EDEF.NPARAM IN PROCEDURE ADD_VECTOR_ELEMENT
     14368**DCL     14557>>ASSIGN
EDEF.OU IN PROCEDURE ADD_VECTOR_ELEMENT
     14319**DCL     14325--REDEF
EDEF.PRI IN PROCEDURE ADD_VECTOR_ELEMENT
     14330**DCL     14545<<ASSIGN
EDEF$ IN PROCEDURE ADD_VECTOR_ELEMENT
     14442**DCL     14373--IMP-PTR 14536<<ASSIGN  14539<>CALL    14541>>ASSIGN  14546>>ASSIGN  14547>>ASSIGN
     14548>>ASSIGN
ED_RECORD
     12834**DCL     12745--DCLINIT 12746--DCLINIT 12950--DCLINIT
ED_RECORD.TV_EN_EDEF
     12846**DCL     13680<<ASSIGN
ED_RECORD.TV_EN_EDEF.OU.OFFSET
     12850**DCL     13558<<ASSIGN  13759>>DOWHILE
ED_RECORD.TV_ST_EDEF
     12835**DCL     13670<<ASSIGN  13675>>ASSIGN
ED_RECORD.TV_ST_EDEF.OU.OFFSET
     12839**DCL     13704>>ASSIGN
EMPTY_SLOT
     14593**PROC    13345--CALL    13423--CALL    13444--CALL    13522--CALL    13559--CALL
EMPTY_SLOT_MSG
     13230**DCL     13708<>CALL    13708--CALL    13761<>CALL    13761--CALL
EMPTY_SLOT_MSG.ADDR_
     13232**DCL     13707<>CALL    13760<>CALL
EMPTY_SLOT_RELOC
     12978**DCL     14609>>ASSIGN
END$
     13129**DCL     13529<>CALL    13530>>DOWHILE
END$ IN PROCEDURE FIND_RANGE_END
     14162**DCL     14139--PROC    14268<<ASSIGN  14274<<ASSIGN
ENTDEF
     12451**DCL     13331<<ASSIGN  13333>>ASSIGN  13683<<ASSIGN  13690>>ASSIGN  13729<<ASSIGN  13753>>ASSIGN
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:244  
ENTDEF.OU
     12468**DCL     12474--REDEF
ENTDEF$
     13125**DCL     13323<>CALL    13324>>IF      13325>>ASSIGN  13327>>ASSIGN  13328>>IF      13329>>ASSIGN
     13331>>ASSIGN  13332>>ASSIGN  13334>>ASSIGN  13717<>CALL    13719>>ASSIGN  13722>>ASSIGN  13726>>ASSIGN
     13727>>ASSIGN  13729>>ASSIGN  13730>>ASSIGN  13738>>ASSIGN
ENTDEF$ IN PROCEDURE FIND_ENTDEF
     13908**DCL     13887--PROC    13978<<ASSIGN  13982<<ASSIGN  13983>>DOWHILE 13984>>ASSIGN  13986<<ASSIGN
     13986>>ASSIGN
ENTREF_RELOC
     12988**DCL     14572>>ASSIGN  14574--ASSIGN  14611--ASSIGN
ENTREF_RELOC.OPERAND
     12993**DCL     14558<<ASSIGN
ENTREF_RELOC_KEY
     12905**DCL     12112--DCLINIT 13313--ASSIGN
ENTREF_RELOC_KEY.OFFSET
     12911**DCL     14565<<ASSIGN  14573>>ASSIGN  14605<<ASSIGN  14610>>ASSIGN
EREF$ IN PROCEDURE ADD_VECTOR_ELEMENT
     14486**DCL     14444--IMP-PTR 14528<<ASSIGN  14531<>CALL    14550>>ASSIGN  14551>>ASSIGN  14553>>ASSIGN
     14554>>ASSIGN  14555>>ASSIGN  14556>>ASSIGN  14557>>ASSIGN
ER_SIZE
     13156**DCL     13631>>ASSIGN  13632>>ASSIGN  13633>>IF      13633>>ASSIGN  13635>>IF      13639>>ASSIGN
     14558>>ASSIGN  14559<<ASSIGN  14559>>ASSIGN
ER_START$
     13134**DCL     13634>>ASSIGN  14550>>IF      14550<<ASSIGN
FIND_ENTDEF
     13887**PROC    13323--CALL    13337--CALL    13556--CALL    13669--CALL    13679--CALL    13717--CALL
FIND_RANGE_END
     14139**PROC    13529--CALL
FIND_RANGE_START
     14003**PROC    13528--CALL
FORM1_BUF_
     12947**DCL     13247>>ASSIGN  13590>>ASSIGN
FORM1_KEY
     12873**DCL     13244--ASSIGN  13587--ASSIGN
FORM1_KEY.REC_TYPE
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:245  
     12877**DCL     13246<<ASSIGN  13589<<ASSIGN  13596<<ASSIGN  13630<<ASSIGN
FORM1_REC_TYPES
     12930**DCL     13246>>ASSIGN  13589>>ASSIGN
FPT_CLOSE
     11960**DCL     13286<>CALL    13650<>CALL
FPT_CLOSE.SN_
     11960**DCL     11960--REDEF
FPT_CLOSE.UTL_
     11961**DCL     11961--REDEF
FPT_CLOSE.V
     11965**DCL     11960--DCLINIT
FPT_CLOSE.V.EXPIRE#
     11975**DCL     11975--REDEF
FPT_CLOSE.V.TYPE#
     11973**DCL     11973--REDEF
FPT_CLOSE.V.XTNSIZE#
     11970**DCL     11970--REDEF   11972--REDEF
FPT_DELREC.V
     11993**DCL     11990--DCLINIT
FPT_OPEN
     11893**DCL     13240<>CALL    13299<>CALL    13868<>CALL
FPT_OPEN.ACSVEH_
     11895**DCL     11896--REDEF
FPT_OPEN.ALTKEYS_
     11901**DCL     11902--REDEF   11902--REDEF
FPT_OPEN.HDR_
     11900**DCL     11901--REDEF
FPT_OPEN.TAB_
     11899**DCL     11900--REDEF
FPT_OPEN.UHL_
     11893**DCL     11894--REDEF   11894--REDEF
FPT_OPEN.V
     11902**DCL     11893--DCLINIT
FPT_OPEN.V.ASN#
     11912**DCL     13280>>ASSIGN
FPT_OPEN.V.DELETE#
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:246  
     11904**DCL     13867<<ASSIGN
FPT_OPEN.V.FSN#
     11933**DCL     11933--REDEF   11933--REDEF
FPT_OPEN.V.FUN#
     11912**DCL     13298<<ASSIGN
FPT_OPEN.WSN_
     11899**DCL     11899--REDEF
FPT_WRITE
     12112**DCL     13248<>CALL    13255<>CALL    13567<>CALL    13572<>CALL    13591<>CALL    13606<>CALL
     13640<>CALL    13646<>CALL    14564<>CALL    14604<>CALL
FPT_WRITE.BUF_
     12112**DCL     13247<<ASSIGN  13254<<ASSIGN  13571<<ASSIGN  13590<<ASSIGN  13645<<ASSIGN
FPT_WRITE.BUF_.BOUND
     12112**DCL     13312<<ASSIGN  13566<<ASSIGN  13603<<ASSIGN  13605<<ASSIGN  13637<<ASSIGN  13639<<ASSIGN
FPT_WRITE.BUF_.BUF$
     12114**DCL     13311<<ASSIGN  13600<<ASSIGN  13634<<ASSIGN
FPT_WRITE.KEY_
     12112**DCL     13244<<ASSIGN  13253<<ASSIGN  13313<<ASSIGN  13570<<ASSIGN  13587<<ASSIGN  13644<<ASSIGN
FPT_WRITE.STATION_
     12114**DCL     12114--REDEF
FPT_WRITE.V
     12115**DCL     12112--DCLINIT
FPT_WRITE.V.DVBYTE.VFC#
     12121**DCL     12121--REDEF
HEAD_KEY
     12709**DCL     13253--ASSIGN  13644--ASSIGN
HEAD_RECORD
     12728**DCL     13254--ASSIGN  13645--ASSIGN
HEAD_RECORD.ER_PAGE
     12748**DCL     13632<<ASSIGN
HEAD_RECORD.ER_SIZE
     12747**DCL     13631<<ASSIGN
HEAD_RECORD.RN_PAGE
     12744**DCL     13598<<ASSIGN
HEAD_RECORD.RN_SIZE
     12743**DCL     13597<<ASSIGN
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:247  
I
     13152**DCL     13245<<DOINDEX 13246>>ASSIGN  13247>>ASSIGN  13341<<ASSIGN  13343>>ASSIGN  13346<<ASSIGN
     13346>>ASSIGN  13426<<ASSIGN  13426>>ASSIGN  13439<<DOINDEX 13588<<DOINDEX 13589>>ASSIGN  13590>>ASSIGN
     13611<<ASSIGN  13612>>DOWHILE 13613>>ASSIGN  13614<<ASSIGN  13614>>ASSIGN  13682<<DOINDEX 13719<<ASSIGN
     13720<>CALL    13725<<ASSIGN  13727>>ASSIGN
I IN PROCEDURE EMPTY_SLOT
     14598**DCL     14601<<DOINDEX
INTERNAL_ERROR IN PROCEDURE FIND_ENTDEF
     13994**LABEL   13927--GOTO    13938--GOTO    13942--GOTO    13971--GOTO
JUMP_OUT1
     13738**LABEL   13734--GOTO
JUMP_OUT2
     13746**LABEL   13742--GOTO
JUMP_OUT3
     13783**LABEL   13779--GOTO
LENGTH IN PROCEDURE FIND_RANGE_END
     14166**DCL     14262<<ASSIGN  14263<<ASSIGN  14264>>IF
LENGTH IN PROCEDURE FIND_RANGE_START
     14029**DCL     14125<<ASSIGN  14126<<ASSIGN  14127>>IF
LIST$
     13122**DCL     13438<<ASSIGN  13440>>ASSIGN  13441>>ASSIGN  13442>>IF      13443>>ASSIGN  13447>>IF
     13526>>ASSIGN  13527>>ASSIGN  13551<<ASSIGN  13551>>ASSIGN
M$CLOSE
      5073**DCL-ENT 13286--CALL    13650--CALL
M$ERR
      5085**DCL-ENT 13882--CALL    14586--CALL    14624--CALL
M$MERC
      5129**DCL-ENT 13876--CALL    14580--CALL    14618--CALL
M$OF
     12145**DCL     13419>>ASSIGN  14642>>ASSIGN
M$OPEN
      5073**DCL-ENT 13240--CALL    13299--CALL    13868--CALL
M$READ
      5074**DCL-ENT 13843--CALL    14646--CALL    14659--CALL    14672--CALL
M$RF
     12146**DCL     14640>>ASSIGN
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:248  
M$WRITE
      5074**DCL-ENT 13248--CALL    13255--CALL    13567--CALL    13572--CALL    13591--CALL    13606--CALL
     13640--CALL    13646--CALL    13825--CALL    13853--CALL    13861--CALL    14564--CALL    14604--CALL
MERC_ERROR
     13879**LABEL   13876--CALLALT
MERC_ERROR IN PROCEDURE ADD_VECTOR_ELEMENT
     14583**LABEL   14580--CALLALT
MERC_ERROR IN PROCEDURE EMPTY_SLOT
     14621**LABEL   14618--CALLALT
MODE IN PROCEDURE READ_RUN_UNIT
     14635**DCL     14631--PROC    14638<>CALL
NAME IN PROCEDURE ADD_VECTOR_ELEMENT
     14290**DCL     14279--PROC
NAME.COUNT IN PROCEDURE ADD_VECTOR_ELEMENT
     14291**DCL     14298--IMP-SIZ 14499>>ASSIGN  14500>>ASSIGN  14509>>ASSIGN  14521>>ASSIGN  14522>>ASSIGN
NAME.TEXT IN PROCEDURE ADD_VECTOR_ELEMENT
     14298**DCL     14500>>ASSIGN  14522>>ASSIGN
NAME IN PROCEDURE FIND_ENTDEF
     13897**DCL     13887--PROC    13916--ASSIGN
NAME.COUNT IN PROCEDURE FIND_ENTDEF
     13898**DCL     13905--IMP-SIZ 13985>>IF      13994>>ASSIGN  13995>>ASSIGN
NAME.TEXT IN PROCEDURE FIND_ENTDEF
     13905**DCL     13985>>IF      13995>>ASSIGN
NAME IN PROCEDURE FIND_RANGE_END
     14150**DCL     14139--PROC
NAME.COUNT IN PROCEDURE FIND_RANGE_END
     14151**DCL     14158--IMP-SIZ 14261>>IF      14263>>ASSIGN  14264>>IF
NAME.TEXT IN PROCEDURE FIND_RANGE_END
     14158**DCL     14264>>IF
NAME IN PROCEDURE FIND_RANGE_START
     14014**DCL     14003--PROC
NAME.COUNT IN PROCEDURE FIND_RANGE_START
     14015**DCL     14022--IMP-SIZ 14124>>IF      14126>>ASSIGN  14127>>IF
NAME.TEXT IN PROCEDURE FIND_RANGE_START
     14022**DCL     14127>>IF
NAME$
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:249  
     13119**DCL     12571--IMP-PTR 13348<<ASSIGN  13364>>IF      13364>>IF      13367>>IF      13367>>IF
     13384>>IF      13384>>IF      13390>>IF      13390>>IF      13410>>CALL    13410>>CALL    13417>>ASSIGN
     13418>>ASSIGN  13418>>ASSIGN  13531<<ASSIGN  13532>>CALL    13532>>CALL    13613<<ASSIGN  13614>>ASSIGN
     13615>>CALLBLT 13615>>CALLBLT 13616>>ASSIGN  13616>>ASSIGN  13711<<ASSIGN  13712>>ASSIGN  13712>>ASSIGN
     13715>>ASSIGN  13715>>ASSIGN  13774<<ASSIGN  13777>>IF      13777>>IF      13788>>CALLBLT 13788>>CALLBLT
     14512<<ASSIGN  14515<>CALL    14518>>ASSIGN  14521>>ASSIGN  14522>>ASSIGN  14522>>ASSIGN
NAME$ IN PROCEDURE FIND_ENTDEF
     13911**DCL     13916<<ASSIGN  13932>>IF      13932>>IF      13935>>IF      13935>>IF      13952>>IF
     13952>>IF      13958>>IF      13958>>IF      13984<<ASSIGN  13985>>IF      13985>>IF
NAME$ IN PROCEDURE FIND_RANGE_END
     14164**DCL     14176--IMP-PTR 14260<<ASSIGN  14261>>IF      14262>>ASSIGN  14264>>IF      14264>>IF
NAME$ IN PROCEDURE FIND_RANGE_START
     14027**DCL     14039--IMP-PTR 14123<<ASSIGN  14124>>IF      14125>>ASSIGN  14127>>IF      14127>>IF
NAME1$
     13120**DCL     13440<<ASSIGN  13463>>IF      13463>>IF      13466>>IF      13466>>IF      13483>>IF
     13483>>IF      13489>>IF      13489>>IF      13509>>CALL    13509>>CALL    13517>>ASSIGN  13518>>ASSIGN
     13518>>ASSIGN  13526>>ASSIGN  13528>>CALL    13528>>CALL    13542>>ASSIGN  13543>>ASSIGN  13543>>ASSIGN
NAME2$
     13121**DCL     13526<<ASSIGN  13529>>CALL    13529>>CALL    13544>>ASSIGN  13545>>ASSIGN  13545>>ASSIGN
NAME_CHECK
     13492**LABEL   13487--GOTO
NAME_CHECK IN PROCEDURE FIND_ENTDEF
     13961**LABEL   13956--GOTO
NAME_FOUND
     13509**LABEL   13468--GOTO
NAME_FOUND IN PROCEDURE FIND_ENTDEF
     13978**LABEL   13937--GOTO
NAME_SIZE IN PROCEDURE ADD_VECTOR_ELEMENT
     14487**DCL     14509<<ASSIGN  14511>>IF      14513>>ASSIGN  14515<>CALL    14552>>ASSIGN
NAME_SPLIT
     13478**LABEL   13494--GOTO
NAME_SPLIT IN PROCEDURE FIND_ENTDEF
     13947**LABEL   13963--GOTO
NEXT
     13153**DCL     13441<<ASSIGN  13527<<ASSIGN  13527>>ASSIGN  13551>>ASSIGN
NEXT$
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:250  
     13126**DCL     13775<<ASSIGN  13776>>DOWHILE 13777>>IF      13777>>IF      13780<<ASSIGN  13780>>ASSIGN
     13790>>ASSIGN
NOT_DEFINED
     13517**LABEL   13458--GOTO    13469--GOTO    13473--GOTO    13502--GOTO
NO_HEAD IN PROCEDURE READ_RUN_UNIT
     14688**LABEL   14646--CALLALT
NO_RANGE
     13542**LABEL   13528--CALLALT 13529--CALLALT
NUM_EMPTY_SLOTS IN PROCEDURE EMPTY_SLOT
     14596**DCL     14593--PROC    14601>>DOINDEX
OFFSET
     13154**DCL     13557>>ASSIGN  13558>>ASSIGN  13560>>ASSIGN  13561>>ASSIGN  13569>>ASSIGN  13579>>ASSIGN
     13580<<ASSIGN  13580>>ASSIGN  13581>>ASSIGN  13582>>ASSIGN  13704<<ASSIGN  13706>>DOWHILE 13707<>CALL
     13709<<ASSIGN  13709>>ASSIGN  13713<>CALL    13757<<ASSIGN  13757>>ASSIGN  13759>>DOWHILE 13760<>CALL
     13762<<ASSIGN  13762>>ASSIGN  14547>>ASSIGN  14565>>ASSIGN  14573>>ASSIGN  14575<<ASSIGN  14575>>ASSIGN
     14605>>ASSIGN  14610>>ASSIGN  14612<<ASSIGN  14612>>ASSIGN
OPEN_ERROR
     13867**LABEL   13240--CALLALT 13299--CALLALT 13868--CALLALT
P$
     13115**DCL     13327<<ASSIGN  13328>>IF      13332>>ASSIGN  13333>>ASSIGN  13556<>CALL    13557>>ASSIGN
     13672<<ASSIGN  13673>>IF      13674>>ASSIGN  13675>>ASSIGN  13676>>ASSIGN  13684<<ASSIGN  13685>>DOWHILE
     13686>>ASSIGN  13687>>ASSIGN  13688<<ASSIGN  13730<<ASSIGN  13731>>DOWHILE 13732>>IF      13732>>IF
     13735<<ASSIGN  13735>>ASSIGN  13747>>DOWHILE 13748>>ASSIGN  13750<<ASSIGN  13750>>ASSIGN  13835<<ASSIGN
     13838<>CALL    13841>>ASSIGN  13844>>ASSIGN  13845>>DOWHILE 13846>>IF      13847>>ASSIGN  13849>>ASSIGN
     13850<<ASSIGN  13850>>ASSIGN
P$ IN PROCEDURE FIND_RANGE_END
     14165**DCL     14258<<ASSIGN  14259>>DOWHILE 14260>>ASSIGN  14266>>IF      14268>>ASSIGN  14272<<ASSIGN
     14272>>ASSIGN
P$ IN PROCEDURE FIND_RANGE_START
     14028**DCL     14121<<ASSIGN  14122>>DOWHILE 14123>>ASSIGN  14129>>ASSIGN  14132<<ASSIGN  14132>>ASSIGN
Q$
     13116**DCL     13686<<ASSIGN  13687>>ASSIGN  13688>>ASSIGN  13738<<ASSIGN  13739>>DOWHILE 13740>>IF
     13740>>IF      13743<<ASSIGN  13743>>ASSIGN  13746<<ASSIGN  13746>>ASSIGN  13748>>ASSIGN  13749<<ASSIGN
     13749>>ASSIGN  13752>>ASSIGN  13844<<ASSIGN  13845>>DOWHILE
R$
     13117**DCL     13703<<ASSIGN  13753>>ASSIGN  13754<<ASSIGN  13754>>ASSIGN  13794>>IF      13794<<ASSIGN
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:251  
     13797>>ASSIGN  13798<<ASSIGN  13798>>ASSIGN  13803>>ASSIGN  13814>>DOWHILE 13822<<ASSIGN  13822>>ASSIGN
     13823<>CALL
READ_ERROR
     13867**LABEL   13843--CALLALT
READ_ERROR IN PROCEDURE READ_RUN_UNIT
     14679**LABEL   14659--CALLALT 14672--CALLALT
READ_RU
     12015**DCL     13843<>CALL    14646<>CALL    14659<>CALL    14672<>CALL
READ_RU.BUF_
     12017**DCL     13852>>ASSIGN  14645<<ASSIGN
READ_RU.BUF_.BOUND
     12017**DCL     13842<<ASSIGN  14658<<ASSIGN  14671<<ASSIGN
READ_RU.BUF_.BUF$
     12018**DCL     13841<<ASSIGN  14657<<ASSIGN  14670<<ASSIGN
READ_RU.STATION_
     12018**DCL     12019--REDEF
READ_RU.V
     12019**DCL     12015--DCLINIT
READ_RU.V.DCB#
     12019**DCL     14640<<ASSIGN  14642<<ASSIGN  14679>>ASSIGN  14688>>ASSIGN
READ_RU.V.DVBYTE.REREAD#
     12030**DCL     12030--REDEF
READ_RU.V.INDX#
     12028**DCL     12028--REDEF
READ_RUN_UNIT
     14631**PROC    13318--CALL    13658--CALL
RELOC_CURR$
     13132**DCL     13309<<ASSIGN  13311>>ASSIGN  13565>>IF      13566>>ASSIGN  14563>>IF      14566<<ASSIGN
     14572>>ASSIGN  14573>>ASSIGN  14574<<ASSIGN  14574>>ASSIGN  14603>>IF      14606<<ASSIGN  14609>>ASSIGN
     14610>>ASSIGN  14611<<ASSIGN  14611>>ASSIGN
RELOC_END$
     13131**DCL     13310<<ASSIGN  14563>>IF      14603>>IF
RELOC_START$
     13130**DCL     13303<<ASSIGN  13306<>CALL    13309>>ASSIGN  13310>>ASSIGN  13565>>IF      13566>>ASSIGN
     14566>>ASSIGN  14606>>ASSIGN
REPEAT_TRA_RELOC_REC
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:252  
     12967**DCL     13571--ASSIGN
REPEAT_TRA_RELOC_REC.OPERAND
     12972**DCL     13569<<ASSIGN
REPEAT_TRA_RELOC_REC_KEY
     12895**DCL     13570--ASSIGN
RN_SIZE
     13157**DCL     13597>>ASSIGN  13598>>ASSIGN  13599>>IF      13599>>ASSIGN  13601>>IF      13605>>ASSIGN
     13612>>DOWHILE 13618>>ASSIGN  13619>>ASSIGN  14546>>ASSIGN  14551>>ASSIGN  14552<<ASSIGN  14552>>ASSIGN
RN_START$
     13133**DCL     13600>>ASSIGN  13613>>ASSIGN  13619>>ASSIGN  14517>>IF      14518<<ASSIGN  14519>>ASSIGN
RUF$ IN PROCEDURE READ_RUN_UNIT
     14634**DCL     14631--PROC    14638<>CALL
RU_DNAME$
     13127**DCL     13319>>ASSIGN  13348>>ASSIGN  13659>>ASSIGN  14650<<ASSIGN  14653<>CALL    14657>>ASSIGN
RU_DNAME_SIZE
     13158**DCL     14647<<ASSIGN  14649>>IF      14651>>ASSIGN  14653<>CALL    14655>>ASSIGN  14658>>ASSIGN
RU_EDEF$
     13128**DCL     13320>>ASSIGN  13321>>ASSIGN  13324>>IF      13660>>ASSIGN  13661>>ASSIGN  13671>>IF
     13681>>ASSIGN  13683>>ASSIGN  13684>>ASSIGN  13701>>ASSIGN  13803>>ASSIGN  13806>>ASSIGN  13823<>CALL
     14663<<ASSIGN  14666<>CALL    14670>>ASSIGN
RU_EDEF_SIZE
     13159**DCL     13321>>ASSIGN  13661>>ASSIGN  13803<<ASSIGN  13804>>ASSIGN  13807>>ASSIGN  14660<<ASSIGN
     14662>>IF      14664>>ASSIGN  14666<>CALL    14668>>ASSIGN  14671>>ASSIGN
RU_ENTRY_CHECK
     13393**LABEL   13388--GOTO
RU_ENTRY_FOUND
     13410**LABEL   13369--GOTO
RU_ENTRY_NOT_DEFINED
     13417**LABEL   13359--GOTO    13370--GOTO    13374--GOTO    13403--GOTO
RU_ENTRY_SPLIT
     13379**LABEL   13395--GOTO
RU_SDEF_SIZE
     13160**DCL     13829<<ASSIGN  13830>>IF      13834>>IF      13836>>ASSIGN  13838<>CALL    13840>>ASSIGN
     13842>>ASSIGN  13844>>ASSIGN
SC_RECORD
     12807**DCL     12949--DCLINIT
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:253  
SC_RECORD.SIZE
     12815**DCL     13561<<ASSIGN  13582<<ASSIGN
SIZE
     13162**DCL     13308<<ASSIGN  13651<>CALL    13657<<ASSIGN  13681<<ASSIGN  13682>>DOINDEX 13840<<ASSIGN
     13840>>ASSIGN  13863<>CALL    14533<<ASSIGN  14533>>ASSIGN  14655<<ASSIGN  14655>>ASSIGN  14668<<ASSIGN
     14668>>ASSIGN
SLOTS
     13163**DCL     13343<<ASSIGN  13344>>IF      13345<>CALL    13346>>ASSIGN  13443<<ASSIGN  13444<>CALL
SRCH IN PROCEDURE FIND_ENTDEF
     13909**DCL     13887--PROC    13915>>IF
START$
     13123**DCL     13325<<ASSIGN  13329<<ASSIGN  13334<<ASSIGN  13342>>DOWHILE 13343>>ASSIGN  13348>>ASSIGN
     13425<<ASSIGN  13425>>ASSIGN  13528<>CALL    13529<>CALL    13530>>DOWHILE 13531>>ASSIGN  13532>>CALL
     13533<<ASSIGN  13533>>ASSIGN  13669<>CALL    13670>>ASSIGN  13671>>IF      13672>>ASSIGN  13673>>IF
     13674>>ASSIGN  13676<<ASSIGN  13681>>ASSIGN  13701<<ASSIGN  13705>>DOWHILE 13706>>DOWHILE 13711>>ASSIGN
     13722>>ASSIGN  13723>>ASSIGN  13725>>ASSIGN  13726>>ASSIGN  13756<<ASSIGN  13756>>ASSIGN  13772<<ASSIGN
     13773>>DOWHILE 13774>>ASSIGN  13775>>ASSIGN  13790<<ASSIGN
START$ IN PROCEDURE FIND_RANGE_END
     14161**DCL     14139--PROC    14258>>ASSIGN  14266>>IF
START$ IN PROCEDURE FIND_RANGE_START
     14025**DCL     14003--PROC    14129<<ASSIGN
STOP$
     13124**DCL     13337<>CALL    13342>>DOWHILE 13679<>CALL    13680>>ASSIGN  13685>>DOWHILE 13690>>ASSIGN
     13691<<ASSIGN  13691>>ASSIGN  13693>>ASSIGN  13702<<ASSIGN  13705>>DOWHILE 13814>>DOWHILE 13815>>ASSIGN
     13816<<ASSIGN  13816>>ASSIGN
TABS
     13161**DCL     13770<<ASSIGN  13783>>IF      13785<<ASSIGN  13788>>CALLBLT 13789<<ASSIGN  13789>>ASSIGN
     13792>>IF
TRANS_VECT_MSG
     13221**DCL     13755<>CALL    13755--CALL
TRANS_VECT_MSG.ADDR1
     13223**DCL     13713<>CALL
TRANS_VECT_MSG.ADDR2
     13227**DCL     13720<>CALL
TRANS_VECT_MSG.NAME1
     13225**DCL     13718<<ASSIGN
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:254  
TRANS_VECT_MSG.NAME2
     13229**DCL     13712<<ASSIGN
TYPE IN PROCEDURE READ_RUN_UNIT
     14636**DCL     14631--PROC    14638<>CALL    14639>>IF
VLP_NAME
     12093**DCL     11894--DCLINIT 13273--ASSIGN
VX$LLIST_SC.BASE$
     11584**DCL     13560>>ASSIGN  13581>>ASSIGN
VX$LST
     11635**DCL     13261--IF      13263--ASSIGN  13265--CALL
VX$LST.LINK$
     11636**DCL     13267<<ASSIGN  13284<<ASSIGN
VX$LST.OBJECT_NAME$
     11639**DCL     11640--REDEF   13270<<ASSIGN
VX$LST.P.ACCT_
     11653**DCL     13274<<ASSIGN
VX$LST.P.ASN
     11679**DCL     13280<<ASSIGN
VX$LST.P.B.ASN
     11675**DCL     13279<<ASSIGN
VX$LST.P.B.RES
     11674**DCL     13278<<ASSIGN
VX$LST.P.NAME_
     11648**DCL     13273<<ASSIGN
VX$LST.P.PASS_
     11658**DCL     13275<<ASSIGN
VX$LST.P.SN_
     11663**DCL     13276<<ASSIGN
VX$LST.P.WSN_
     11668**DCL     13277<<ASSIGN
VX$LST.SC_HEAD$
     11641**DCL     11642--REDEF   13271<<ASSIGN  13272--ASSIGN  13560>>ASSIGN  13581>>ASSIGN
VX$LST.SC_TAIL$
     11643**DCL     11644--REDEF   13272<<ASSIGN
VX$LST.SUB_TYPE
     11638**DCL     13269<<ASSIGN
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:255  
VX$LST.TYPE
     11637**DCL     13268<<ASSIGN
VX$NODE.ADDR_START_A
     11311**DCL     11312--REDEF
VX$NODE.ADDR_STOP_A
     11316**DCL     11317--REDEF
VX$NODE.HEAD$
     11303**DCL     13284>>ASSIGN  13285<<ASSIGN  13560>>ASSIGN  13581>>ASSIGN
VX$NODE.L_PREV_SIZE
     11369**DCL     11380--REDEF
VX$NODE.L_SC_START
     11388**DCL     11393--REDEF
VX$NODE.L_SC_STOP
     11394**DCL     11399--REDEF
VX$NODE.L_SIZE
     11357**DCL     11368--REDEF
VX$NODE.L_SIZE.DN
     11359**DCL     13618<<ASSIGN  13618>>ASSIGN
VX$NODE.L_SIZE.ED
     11362**DCL     14549<<ASSIGN  14549>>ASSIGN
VX$NODE.L_START
     11333**DCL     11344--REDEF
VX$NODE.L_START.DN$
     11335**DCL     13294<>CALL    13338>>ASSIGN  13431>>ASSIGN  13623<>CALL    14519>>ASSIGN
VX$NODE.L_START.ED$
     11338**DCL     13294<>CALL    13339>>ASSIGN  13432>>ASSIGN  13623<>CALL
VX$NODE.L_STOP
     11345**DCL     11356--REDEF
VX$NODE.L_STOP.DN$
     11347**DCL     13619<<ASSIGN
VX$NODE.L_STOP.ED$
     11350**DCL     13294<>CALL    13340>>ASSIGN  13433>>ASSIGN  13623<>CALL    14548<<ASSIGN
VX$NODE.PROMOTE_HEAD
     11400**DCL     11403--REDEF
VX$NODE.PROMOTE_TAIL
     11404**DCL     11407--REDEF
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:256  
VX$NODE.START_PAGE#_A
     11321**DCL     11322--REDEF
VX$NODE.STOP_PAGE#_A
     11326**DCL     11327--REDEF
VX$SC.SIZE
     11478**DCL     13560<<ASSIGN  13581<<ASSIGN
VX$SECT.MBZ
     11549**DCL     11551--REDEF   11555--REDEF
VX$TMPLT.A
     11799**DCL     11800--REDEF   11801--REDEF   13363>>ASSIGN  13383>>ASSIGN  13462>>ASSIGN  13482>>ASSIGN
     13931>>ASSIGN  13951>>ASSIGN
VX$TMPLT.W.WORD0
     11802**DCL     14547<<ASSIGN
VX$VECTOR_LST
     11609**DCL     13440--ASSIGN
VX$VECTOR_LST.SIZEW1
     11610**DCL     13441>>ASSIGN  13442>>IF      13526>>ASSIGN
VX$VECTOR_LST.SIZEW2
     11611**DCL     13443>>ASSIGN  13447>>IF      13527>>ASSIGN
VXA$GET
     13190**DCL-ENT 13265--CALL    13306--CALL    13838--CALL    14515--CALL    14531--CALL    14539--CALL
     14653--CALL    14666--CALL
VXD$B2C
     13188**DCL-ENT 13707--CALL    13713--CALL    13720--CALL    13760--CALL
VXD$TMPLT.AD.ISADDR
     11731**DCL     11733--REDEF
VXD$TMPLT.AD.LFLAGS.SOURCE
     11717**DCL     13849<<ASSIGN
VXD$TMPLT.CONSTNT
     11738**DCL     13846>>IF
VXD$TMPLT.LFLAGS
     11744**DCL     11757--REDEF
VXD$TMPLT.LFLAGS.SOURCE
     11751**DCL     13847<<ASSIGN
VXD$TMPLT.VALUE
     11709**DCL     11711--REDEF
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:257  
VXE$ERROR
     13181**DCL-ENT 13421--CALL    13520--CALL    13547--CALL    13997--CALL    14502--CALL    14681--CALL
     14690--CALL
VXE$MERC
     13183**DCL-ENT 13879--CALL    14583--CALL    14621--CALL
VXF$CLOSE
     13197**DCL-ENT 13428--CALL    13862--CALL
VXF$FREE
     13191**DCL-ENT 13651--CALL    13863--CALL
VXF$OPEN
     13196**DCL-ENT 14638--CALL
VXK$KEY
     13199**DCL-ENT 13805--CALL    13832--CALL    14656--CALL    14669--CALL
VXQ$SORT
     13192**DCL-ENT 13294--CALL    13623--CALL    13694--CALL    13823--CALL
VXQ$SORT_V
     13203**DCL-ENT 13322--CALL    13665--CALL
VXW$WRITE
     13186**DCL-ENT 13698--CALL    13699--CALL    13700--CALL    13708--CALL    13755--CALL    13761--CALL
     13767--CALL    13768--CALL    13769--CALL    13784--CALL    13792--CALL
VX_BIAS.A
      9576**DCL      9577--REDEF
VX_BIAS.I.RPROC
      9579**DCL     13578<<ASSIGN  13578>>ASSIGN
VX_CBUF.CHARS_A
      9510**DCL      9511--REDEF
VX_CONST_DCB.ACTPOS
     10692**DCL     10692--REDEF
VX_CONST_DCB.ARS#
     10651**DCL     10651--REDEF
VX_CONST_DCB.ATTR#
     10681**DCL     10681--REDEF   10683--REDEF
VX_CONST_DCB.BORROW
     10703**DCL     10703--REDEF   10703--REDEF   10703--REDEF
VX_CONST_DCB.EOMCHAR#
     10658**DCL     10659--REDEF
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:258  
VX_CONST_DCB.FLDID
     10695**DCL     10696--REDEF
VX_CONST_DCB.FORM$
     10687**DCL     10687--REDEF
VX_CONST_DCB.FSECT
     10710**DCL     10710--REDEF
VX_CONST_DCB.FSN#
     10677**DCL     10677--REDEF   10677--REDEF   10678--REDEF
VX_CONST_DCB.HEADER$
     10686**DCL     10687--REDEF
VX_CONST_DCB.IXTNSIZE#
     10683**DCL     10684--REDEF
VX_CONST_DCB.LASTSTA$
     10667**DCL     10667--REDEF
VX_CONST_DCB.LVL
     10704**DCL     10704--REDEF
VX_CONST_DCB.NAME#.C
     10667**DCL     10668--REDEF
VX_CONST_DCB.NOEOF
     10699**DCL     10699--REDEF
VX_CONST_DCB.NRECS#
     10684**DCL     10684--REDEF
VX_CONST_DCB.NRECX
     10711**DCL     10711--REDEF
VX_CONST_DCB.OHDR
     10700**DCL     10700--REDEF
VX_CONST_DCB.ORG#
     10675**DCL     10676--REDEF
VX_CONST_DCB.PRECNO
     10708**DCL     10708--REDEF
VX_CONST_DCB.RCSZ
     10716**DCL     10716--REDEF
VX_CONST_DCB.RES#
     10669**DCL     10669--REDEF
VX_CONST_DCB.SETX
     10688**DCL     10688--REDEF
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:259  
VX_CONST_DCB.TAB$
     10687**DCL     10687--REDEF
VX_CONST_DCB.TDA
     10707**DCL     10708--REDEF
VX_CONST_DCB.WSN#
     10669**DCL     10670--REDEF
VX_EBUF.CHARS_A
     10099**DCL     10100--REDEF
VX_EFIELD1.CHARS
     10108**DCL     10109--REDEF   13418<<ASSIGN  13518<<ASSIGN  13543<<ASSIGN  13995<<ASSIGN  14500<<ASSIGN
VX_EFIELD1.COUNT
     10107**DCL     13417<<ASSIGN  13517<<ASSIGN  13542<<ASSIGN  13994<<ASSIGN  14499<<ASSIGN
VX_EFIELD2.CHARS
     10112**DCL     10113--REDEF   13545<<ASSIGN
VX_EFIELD2.COUNT
     10111**DCL     13544<<ASSIGN
VX_EFIELD3.CHARS
     10116**DCL     10117--REDEF
VX_EI_KEY_BUF.KEY
     10492**DCL     10493--REDEF
VX_ERRORS
      9553**DCL      9564--REDEF
VX_ERRORS.CONFLICT_A
      9559**DCL      9560--REDEF
VX_ERRORS.UNSAT_A
      9555**DCL      9556--REDEF
VX_FPT_ERRMSG.V.DCB#
      8501**DCL     13419<<ASSIGN  14679<<ASSIGN  14688<<ASSIGN
VX_IMAGE_DATA.CPAGE#_A
      8690**DCL      8691--REDEF
VX_IMAGE_DATA.NODE_A$
      8702**DCL      8703--REDEF
VX_IMAGE_DATA.START_A$
      8694**DCL      8695--REDEF
VX_IMAGE_DATA.STOP_A$
      8698**DCL      8699--REDEF
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:260  
VX_IMAGE_DS3.CPAGE#_A
      8759**DCL      8760--REDEF
VX_IMAGE_DS3.NODE_A$
      8771**DCL      8772--REDEF
VX_IMAGE_DS3.START_A$
      8763**DCL      8764--REDEF
VX_IMAGE_DS3.STOP_A$
      8767**DCL      8768--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8782**DCL      8783--REDEF
VX_IMAGE_DS4.NODE_A$
      8794**DCL      8795--REDEF
VX_IMAGE_DS4.START_A$
      8786**DCL      8787--REDEF
VX_IMAGE_DS4.STOP_A$
      8790**DCL      8791--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8805**DCL      8806--REDEF
VX_IMAGE_DS5.NODE_A$
      8817**DCL      8818--REDEF
VX_IMAGE_DS5.START_A$
      8809**DCL      8810--REDEF
VX_IMAGE_DS5.STOP_A$
      8813**DCL      8814--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8828**DCL      8829--REDEF
VX_IMAGE_DS6.NODE_A$
      8840**DCL      8841--REDEF
VX_IMAGE_DS6.START_A$
      8832**DCL      8833--REDEF
VX_IMAGE_DS6.STOP_A$
      8836**DCL      8837--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8851**DCL      8852--REDEF
VX_IMAGE_DS7.NODE_A$
      8863**DCL      8864--REDEF
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:261  
VX_IMAGE_DS7.START_A$
      8855**DCL      8856--REDEF
VX_IMAGE_DS7.STOP_A$
      8859**DCL      8860--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8874**DCL      8875--REDEF
VX_IMAGE_DS8.NODE_A$
      8886**DCL      8887--REDEF
VX_IMAGE_DS8.START_A$
      8878**DCL      8879--REDEF
VX_IMAGE_DS8.STOP_A$
      8882**DCL      8883--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8713**DCL      8714--REDEF
VX_IMAGE_PROC.NODE_A$
      8725**DCL      8726--REDEF
VX_IMAGE_PROC.START_A$
      8717**DCL      8718--REDEF
VX_IMAGE_PROC.STOP_A$
      8721**DCL      8722--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8736**DCL      8737--REDEF
VX_IMAGE_ROS.NODE_A$
      8748**DCL      8749--REDEF
VX_IMAGE_ROS.START_A$
      8740**DCL      8741--REDEF
VX_IMAGE_ROS.STOP_A$
      8744**DCL      8745--REDEF
VX_M_ALL
      9587**DCL     13261>>IF      13302>>IF      13834>>IF      14511>>IF      14527>>IF      14535>>IF
     14649>>IF      14662>>IF
VX_M_BASE_PTR
      9589**DCL     13262>>ASSIGN  13303>>ASSIGN  13835>>ASSIGN  14512>>ASSIGN  14528>>ASSIGN  14536>>ASSIGN
     14650>>ASSIGN  14663>>ASSIGN
VX_M_FREE
      9585**DCL     13261>>IF      13262>>ASSIGN  13263<<ASSIGN  13263>>ASSIGN  13302>>IF      13303>>ASSIGN
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:262  
     13304<<ASSIGN  13304>>ASSIGN  13834>>IF      13835>>ASSIGN  13836<<ASSIGN  13836>>ASSIGN  14511>>IF
     14512>>ASSIGN  14513<<ASSIGN  14513>>ASSIGN  14527>>IF      14528>>ASSIGN  14529<<ASSIGN  14529>>ASSIGN
     14535>>IF      14536>>ASSIGN  14537<<ASSIGN  14537>>ASSIGN  14649>>IF      14650>>ASSIGN  14651<<ASSIGN
     14651>>ASSIGN  14662>>IF      14663>>ASSIGN  14664<<ASSIGN  14664>>ASSIGN
VX_M_VECTOR.F
      8541**DCL      8545--REDEF
VX_M_VECTOR_DP.F
      8576**DCL      8580--REDEF
VX_O.ACCTN_A$
      9705**DCL      9706--REDEF
VX_O.DCB_MATCH_A$
      9714**DCL      9715--REDEF
VX_O.DCB_MATCH_HIT_A
      9720**DCL      9721--REDEF
VX_O.FIDN_A$
      9699**DCL      9700--REDEF
VX_O.FID_A$
      9691**DCL      9692--REDEF
VX_O.INCLUDE_A$
      9711**DCL      9712--REDEF
VX_O.MAP_A
      9685**DCL      9686--REDEF
VX_O.NODCB_A
      9742**DCL      9743--REDEF
VX_O.NUM_A
      9630**DCL      9632--REDEF
VX_O.OPT_A
      9730**DCL      9731--REDEF
VX_O.PRIV_A
      9646**DCL      9648--REDEF
VX_O.SIN_A
      9599**DCL      9600--REDEF
VX_O.TCB_A
      9726**DCL      9727--REDEF
VX_O.VECTOR_.LIST$
      9737**DCL     13438>>ASSIGN
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:263  
VX_O.VECTOR_.LIST_SIZE
      9736**DCL     13439>>DOINDEX
VX_O.VECTOR_.REMOVE_ENTDEF
      9738**DCL     13812>>IF
VX_O.VECTOR_.REMOVE_SYMDEF
      9739**DCL     13830>>IF
VX_O.VECTOR_.RF$
      9735**DCL     13317>>IF      13318<>CALL    13428<>CALL
VX_OD.ACCTN_A$
      9903**DCL      9904--REDEF
VX_OD.DCB_MATCH_A$
      9912**DCL      9913--REDEF
VX_OD.FIDN_A$
      9897**DCL      9898--REDEF
VX_OD.FID_A$
      9889**DCL      9890--REDEF
VX_OD.INCLUDE_A$
      9909**DCL      9910--REDEF
VX_OD.MAP_A
      9883**DCL      9884--REDEF
VX_OD.NODCB_A
      9927**DCL      9928--REDEF
VX_OD.NUM_A
      9830**DCL      9831--REDEF
VX_OD.PRIV_A
      9845**DCL      9846--REDEF
VX_OD.SIN_A
      9799**DCL      9800--REDEF
VX_OD.VECTOR_A$
      9918**DCL      9919--REDEF
VX_OL.MAX_A
      9774**DCL      9776--REDEF
VX_OL.MIN_A
      9759**DCL      9760--REDEF
VX_ON.ACCTN_A$
     10048**DCL     10050--REDEF
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:264  
VX_ON.DCB_MATCH_A$
     10059**DCL     10061--REDEF
VX_ON.FIDN_A$
     10041**DCL     10043--REDEF
VX_ON.FID_A$
     10032**DCL     10034--REDEF
VX_ON.INCLUDE_A$
     10055**DCL     10057--REDEF
VX_ON.MAP_A
     10025**DCL     10027--REDEF
VX_ON.NODCB_A$
     10075**DCL     10076--REDEF
VX_ON.NUM_A
      9970**DCL      9972--REDEF
VX_ON.PRIV_A
      9986**DCL      9988--REDEF
VX_ON.SIN_A
      9938**DCL      9940--REDEF
VX_ON.VECTOR_A$
     10066**DCL     10067--REDEF
VX_OUHEAD.VERSION
      9385**DCL      9387--REDEF
VX_OU_HEAD
      9328**DCL      9367--REDEF
VX_OU_HEAD.REC_A
      9340**DCL      9343--REDEF
VX_O_KEY_BUF.FORM0
      8589**DCL      8592--REDEF    8599--REDEF
VX_O_KEY_BUF_L.FORM0
      8612**DCL      8615--REDEF    8622--REDEF
VX_PASS2_REF.OU.L_START
     10278**DCL     10283--REDEF
VX_PASS2_REF.OU.L_STOP
     10284**DCL     10289--REDEF
VX_PASS2_REF.OU.MAX
     10272**DCL     10277--REDEF
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:265  
VX_PASS2_REF.OU.MAX.ER
     10274**DCL     13633>>IF      13633<<ASSIGN
VX_PASS2_REF.OU.MAX.RN
     10273**DCL     13599>>IF      13599<<ASSIGN
VX_PASS2_REF.OU.SIZE
     10290**DCL     10295--REDEF
VX_PASS2_REF.SAT.COUNT
     10317**DCL     10323--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10324**DCL     10330--REDEF
VX_PASS2_REF.SAT.L_START
     10303**DCL     10309--REDEF
VX_PASS2_REF.SAT.L_STOP
     10310**DCL     10316--REDEF
VX_PASS2_REF.SAT.MAX
     10297**DCL     10302--REDEF
VX_PASS2_REF.UNSAT.L_START
     10365**DCL     10370--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10371**DCL     10376--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10377**DCL     10382--REDEF
VX_PASS2_REF.UNSAT.MAX
     10359**DCL     10364--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10389**DCL     10394--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10383**DCL     10388--REDEF
VX_PHRASE.PHRASE
      9791**DCL      9793--REDEF
VX_PROGRAM_BIAS.A
      9569**DCL      9570--REDEF
VX_REC_BUF_SIZE
     10171**DCL     13300>>IF      13300<<ASSIGN
VX_ROOT$
      9542**DCL     13284>>ASSIGN  13285>>ASSIGN  13294>>CALL    13294>>CALL    13294>>CALL    13338>>ASSIGN
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:266  
     13339>>ASSIGN  13340>>ASSIGN  13431>>ASSIGN  13432>>ASSIGN  13433>>ASSIGN  13560>>ASSIGN  13581>>ASSIGN
     13618>>ASSIGN  13618>>ASSIGN  13619>>ASSIGN  13623>>CALL    13623>>CALL    13623>>CALL    14519>>ASSIGN
     14548>>ASSIGN  14549>>ASSIGN  14549>>ASSIGN
VX_RUF$
      9543**DCL     13658<>CALL    13862<>CALL
VX_R_KEY_BUF
      8637**DCL     11990--DCLINIT 11991--DCLINIT 12015--DCLINIT 12016--DCLINIT 12054--DCLINIT
VX_R_KEY_BUF.FORM0
      8638**DCL      8642--REDEF    8648--REDEF
VX_R_KEY_BUF.FORM0.CHARS
      8640**DCL     13859<<ASSIGN  14644<<ASSIGN
VX_R_KEY_BUF.FORM0.COUNT
      8639**DCL     13858<<ASSIGN  14643<<ASSIGN
VX_R_KEY_HEAD
     10150**DCL     13858--ASSIGN  13859>>ASSIGN  14643--ASSIGN  14644>>ASSIGN
VX_SD.A
      8266**DCL      8267--REDEF
VX_SPC.B$.MINE
     10460**DCL     10466--REDEF
VX_SPC.B$.MINE.VERSION
     10465**DCL     13577>>IF
VX_SPC.B$.NAME
     10439**DCL     10445--REDEF
VX_SPC.B$.SKIP
     10453**DCL     10459--REDEF
VX_SPC.B$.VALUE
     10446**DCL     10452--REDEF
VX_SPC.B$.VALUE.VERSION
     10451**DCL     13579<<ASSIGN
VX_SPC.SEG.NAME
     10408**DCL     10414--REDEF
VX_SPC.SEG.VALUE
     10415**DCL     10421--REDEF
VX_TSX0_OVERLAY.H
     10183**DCL     10186--REDEF
WRITE_ERROR
PL6.E3A0      #001=VXU$TRANSVECT File=VXU$TRANSVECT.:E05TSI                      WED 07/30/97 08:47 Page:267  
     13867**LABEL   13248--CALLALT 13255--CALLALT 13567--CALLALT 13572--CALLALT 13591--CALLALT 13606--CALLALT
     13640--CALLALT 13646--CALLALT 13825--CALLALT 13853--CALLALT 13861--CALLALT
WRITE_ERROR IN PROCEDURE ADD_VECTOR_ELEMENT
     14580**LABEL   14564--CALLALT
WRITE_ERROR IN PROCEDURE EMPTY_SLOT
     14618**LABEL   14604--CALLALT
WRITE_RU
     12054**DCL     13825<>CALL    13853<>CALL    13861<>CALL
WRITE_RU.BUF_
     12054**DCL     13852<<ASSIGN  13860<<ASSIGN
WRITE_RU.BUF_.BOUND
     12054**DCL     13807<<ASSIGN
WRITE_RU.BUF_.BUF$
     12056**DCL     13806<<ASSIGN
WRITE_RU.STATION_
     12056**DCL     12056--REDEF
WRITE_RU.V
     12057**DCL     12054--DCLINIT
WRITE_RU.V.DVBYTE.VFC#
     12063**DCL     12063--REDEF
