VERSION E05

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:1    
        1        1        /*M* TOT$ROOT     Total On-Line Testing System ROOT program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOT$ROOT
       12       12             AUTHORS:      Curtis D. Andes
       13       13                           Carl J. Eichert
       14       14                           Scott S. Sheppard
       15       15             PURPOSE:      Provide TOLTS service functions.
       16       16             DESCRIPTION:  1.  Opens terminal for i/o with privs
       17       17                           2.  Establishes condtion handling
       18       18                           3.  Sets the Base Address Register
       19       19                           4.  Gives TOLTS log on salutation
       20       20                           5.  Frees any dynamic pages held by TOLTS
       21       21                           6.  Initializes test request information
       22       22                           7.  Shuts down EISPACT if open
       23       23                           8.  Gets the first TOLTS request
       24       24                           9.  Handles any asynchronous TOLTS requests
       25       25             REFERENCE:   CP-6 Release E0E0
       26       26             LAST UPDATE: 87-09-22
       27       27        */
       28       28        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:2    
       29       29        /*F*  NAME:        TOT$ROOT
       30       30              DESCRIPTION: Procedure Nesting Hierarchy
       31       31
       32       32              TOT$ROOT: procedure
       33       33              TOT$CONSOLE_OUT: entry
       34       34              TOT$PROMPT_OUT: entry
       35       35              TOT$WRITE_READ_IO: entry
       36       36              TOT$CONSOLE_IN: entry
       37       37              TOT$NEXT_TEST_REQ: entry
       38       38              TOT$RESTART: entry
       39       39              TOT$EXIT: entry
       40       40
       41       41                FREE_DYNAMIC_PAGES: procedure
       42       42                FREE_EXCESS_DATA_SEGMENTS: procedure
       43       43                   FREE_SEG: procedure
       44       44                SET_BAR: procedure
       45       45                REQUEST_INITIAL: procedure
       46       46                GET_TOLTS_REQUEST: procedure
       47       47                   SELECT_TOLTS_REQUEST: procedure
       48       48                   SET_DEBUG_FLAGS: procedure
       49       49                   REBUILD_TEST_REQ: procedure
       50       50                   PROCESS_TEST_REQ: procedure
       51       51                      SET_SUBEXEC: procedure
       52       52                      CHECK_SUBEXEC: procedure ALTRET
       53       53                      CHECK_DEBUG: procedure ALTRET
       54       54                      BUILD_INIT_SUBEXEC: procedure
       55       55                      BUILD_ISC_WRITE: procedure
       56       56                   PROCESS_MSG_REQ: procedure
       57       57                      SETUP_BUFFER: procedure
       58       58                      ISSUE_OPERATOR_MESSAGE: procedure
       59       59                      PRINT_OPERATOR_REPLY: procedure
       60       60                CONSOLE_OUT: procedure
       61       61                PROMPT_OUT: procedure
       62       62                SET_SUBEXEC_PROMPT: procedure
       63       63                CONSOLE_IN: procedure
       64       64                PROCESS_EXIT_REQ: procedure
       65       65        */
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:3    
       66       66
       67       67        TOT$ROOT: PROC ;
       68       68
       69       69        /* Include Files */
       70       70
       71       71           %INCLUDE B$JIT ;
       72      674           %INCLUDE CP_6;
       73     6233           %INCLUDE CP_6_SUBS;
       74     6773           %INCLUDE TOT_TOLTS_M ;
       75     7891           %INCLUDE B_ERRORS_C ;
       76     9018           %INCLUDE TOT_RQSTS_E ;
       77     9060           %INCLUDE TO_PERR_C ;
       78     9645           %INCLUDE XUH_MACRO_C ;
       79     9729           %INCLUDE XUG_ENTRY ;
       80     9760           %INCLUDE XU_MACRO_C ;
       81    12866           %INCLUDE XU_PERR_C ;
       82    13057
       83    13058        /* Data Control Blocks */
       84    13059
       85    13060    1      DCL M$SI                       DCB ;
       86    13061           %M$DCB (DCBN = M$PROMPT_USER,
       87    13062                   ASN  = DEVICE,
       88    13063                   DVFC = '@',
       89    13064                   FUN  = UPDATE,
       90    13065                   ORG  = TERMINAL) ;
       91    13139    1      DCL M$DO                       DCB ;
       92    13140    1      DCL M$ME                       DCB ;
       93    13141           %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:4    
       94    13142        /* Variables */
       95    13143
       96    13144           %B$TCB;
       97    13147           %B$ALT ;
       98    13155           %F$DCB ;
       99    13212    1      DCL REQUEST_TYPE         UBIN WORD ;
      100    13213    1      DCL SERVICE_CODE         UBIN HALF ;
      101    13214    1      DCL QUEUE_ENTRY          (0:2) UBIN WORD ;
      102    13215    1      DCL 1 QUEUE_ENTRY_BCD REDEF QUEUE_ENTRY,
      103    13216    1            2 TEST_REQUEST,
      104    13217    1              3 *      (0:10) UBIN (6) UNAL,
      105    13218    1              3 *      BIT (6) UNAL,
      106    13219    1            2 TEST_REQ_ REDEF TEST_REQUEST BIT (72) UNAL,
      107    13220    1            2 *        BIT (36) UNAL;
      108    13221    1      DCL 1 TEST_REQ_BCD STATIC ALIGNED,
      109    13222    1            2 TEST_BCD    (0:10) UBIN (6) UNAL,
      110    13223    1            2 TEST_ZEROS  BIT (6) INIT ('000000'B) UNAL;
      111    13224    1      DCL NO_DO_MSG   CHAR (0) STATIC CALIGNED
      112    13225    1          INIT (
             13225               '**** Experiencing difficulties communicating through M$DO -- TOLTS aborting'
             13225                   );
      113    13226           %VLP_ERRCODE (FPTN = TOT_ERROR_CODE,
      114    13227                         FCG  = 'TO',
      115    13228                         MID  = 'T',
      116    13229                         SEV  = 4) ;
      117    13274           %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:5    
      118    13275        /* External Variables */
      119    13276
      120    13277    1      DCL B$JIT$          PTR SYMREF;
      121    13278    1      DCL B$TCB$          PTR SYMREF ;
      122    13279           %FPT_WRITE (FPTN    = CONSOLE_FPT,
      123    13280                       DCB     = M$DO,
      124    13281                       STCLASS = "STATIC SYMDEF",
      125    13282                       WAIT    = YES) ;
      126    13313           %FPT_READ (FPTN    = READ_IO,
      127    13314                      DCB     = M$SI,
      128    13315                      WAIT    = YES,
      129    13316                      STCLASS = "STATIC SYMDEF") ;
      130    13355           %TOD$QUEUE (STCLASS = SYMREF) ;
      131    13382           %TOF$BAR (STCLASS = SYMREF) ;
      132    13405           %TOM$SEGTBL (STCLASS = BASED) ;
      133    13427           %TOM$SEGTBLS (STCLASS = "BASED (TOT$DMC.TOM$SEGTBLS.PTR$)") ;
      134    13439           %TOO$IO_BUFFER (STCLASS = "BASED (TOT$DMC.TOO$IO_BUFFER.PTR$)") ;
      135    13487           %TOP$TCP (STCLASS = "BASED (TOT$DMC.TOP$TCP.PTR$)") ;
      136    13575           %TOQ$DCP (STCLASS = SYMREF) ;
      137    13607    1      DCL TOS$COMWD       BIT (36) SYMREF ALIGNED ;
      138    13608           %XUG_GETCMD (STCLASS = SYMREF,
      139    13609                        NAME    = TOLTS_GETCMD);
      140    13947           %TOT$DMC (STCLASS = SYMREF) ;
      141    13981           %TOT$ECP (STCLASS = "STATIC SYMDEF") ;
      142    14030           %TOT$IFAD (STCLASS = SYMREF) ;
      143    14047    1      DCL TOT$REINITIALIZE REMEMBER SYMREF DALIGNED ;
      144    14048           %TOT$TOLTS (STCLASS = SYMREF) ;
      145    14069
      146    14070        /* External Entry Points */
      147    14071
      148    14072    1      DCL TOD$DISPATCHER    ENTRY(3);
      149    14073    1      DCL TOT$ASCII_BCD     ENTRY(3);
      150    14074    1      DCL TOS$PACT          ENTRY ;
      151    14075           %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:6    
      152    14076        /*D* NAME:         TOT$ROOT
      153    14077             INTERFACE:    SYSTEM_INITIAL      XUG$CLOSE_DCBS
      154    14078                           EST_COND_HANDLERS   PROCESS_FIRST_TEST_REQUEST
      155    14079                           SET_BAR             TOD$DISPATCHER
      156    14080                           SYSTEM_START_UP     TOF$REMEMBER_SFR
      157    14081                           FREE_DYNAMIC_PAGES  TOF$REMEMBER_SISR
      158    14082                           REQUEST_INITIAL
      159    14083             DESCRIPTION:  This  entry  point  in  this  module is called
      160    14084                           by TOT$MAIN   shortly  after TOLTS is invoked.
      161    14085                           No  parameters are passed  or required.  TOLTS
      162    14086                           is  initialized  and  the  first  test request
      163    14087                           accepted  from the terminal.   This request is
      164    14088                           passed  on to  the requested  subexec which is
      165    14089                           then put into execution.
      166    14090
      167    14091                           PROCESS_FIRST_TEST_REQUEST builds as the first
      168    14092                           entry  in the  dispatcher queue  (a request to
      169    14093                           initialize  a  subexec).  It  also  stores the
      170    14094                           actual  test request in  the dispatcher queue.
      171    14095                           The subexec is put into execution by a call to
      172    14096                           TOD$DISPATCHER   which   services   the  first
      173    14097                           dispatcher queue entry.
      174    14098
      175    14099                           The   dispatcher  transfers   control  to  the
      176    14100                           subexec  which subsequently does  a MME GEINOS
      177    14101                           Interslave Read to get the first test request.
      178    14102                           Thereafter,  this  portion  of  code  is never
      179    14103                           entered.
      180    14104
      181    14105                           Note:   This  transfer  into  the subexec is a
      182    14106                           straightforward "CALL" which will leave behind
      183    14107                           one  auto frame  for TOT$ROOT  for the life of
      184    14108                           TOLTS.  This is not a problem.
      185    14109        */
      186    14110        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:7    
      187    14111        /* **************
      188    14112           * TOLTS ROOT *
      189    14113           ************** */
      190    14114
      191    14115    1      TOLTS_GETCMD.DCB_PARAM# = DCBNUM (NIL);
      192    14116    1      CALL XUG$CLOSE_DCBS (TOLTS_GETCMD);
      193    14117    1      CALL FREE_DYNAMIC_PAGES ;
      194    14118    1      CALL FREE_EXCESS_DATA_SEGMENTS ;
      195    14119    1      CALL SET_BAR ;
      196    14120    1      CALL REQUEST_INITIAL ;
      197    14121    1      CALL GET_TOLTS_REQUEST ;
      198    14122
      199    14123        /* ******************
      200    14124           * END TOLTS ROOT *
      201    14125           ****************** */
      202    14126        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:8    
      203    14127        /*D* NAME:         TOT$CONSOLE_OUT
      204    14128             ENTRY:
      205    14129             INTERFACE:    CONSOLE_OUT
      206    14130             DESCRIPTION:  This entry calls  an internal subroutine to do
      207    14131                           a  write  to  the  terminal.  The  caller must
      208    14132                           invoke  the  macro  FPT_WRITE  with  the  name
      209    14133                           CONSOLE_FPT  with the SYMREF  attribute in his
      210    14134                           routine.      On    calling     this    entry,
      211    14135                           CONSOLE_FPT.BUF_ must frame  the message to be
      212    14136                           output.  On normal termination of the M$WRITE,
      213    14137                           return is  made to the caller  with no status;
      214    14138                           if   there  is  an   ALTRET  on  the  M$WRITE,
      215    14139                           TOX$ALTRET is called to quit.
      216    14140
      217    14141                           All terminal I/O is "wait".
      218    14142        */
      219    14143
      220    14144    1   TOT$CONSOLE_OUT: ENTRY;
      221    14145
      222    14146    1      CALL CONSOLE_OUT;
      223    14147    1      RETURN;
      224    14148
      225    14149        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:9    
      226    14150        /*D* NAME:         TOT$PROMPT_OUT
      227    14151             ENTRY:
      228    14152             INTERFACE:    PROMPT_OUT
      229    14153             DESCRIPTION:  This entry calls  an internal subroutine to do
      230    14154                           a  write  to  the  terminal.  The  caller must
      231    14155                           invoke  the  macro  FPT_WRITE  with  the  name
      232    14156                           CONSOLE_FPT  with the SYMREF  attribute in his
      233    14157                           routine.      On    calling     this    entry,
      234    14158                           CONSOLE_FPT.BUF_ must frame  the message to be
      235    14159                           output. The framed message is then output as a
      236    14160                           simulated prompt,   i.e.   no carriage return,
      237    14161                           line feed is appended to the message.
      238    14162                           All terminal i/o is "wait".
      239    14163        */
      240    14164
      241    14165    1   TOT$PROMPT_OUT: ENTRY ;
      242    14166
      243    14167    1      CALL PROMPT_OUT;
      244    14168    1      RETURN;
      245    14169
      246    14170        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:10   
      247    14171        /*D* NAME:         TOT$WRITE_READ_IO
      248    14172             ENTRY:
      249    14173             INTERFACE:    SET_SUBEXEC_PROMPT
      250    14174                           CONSOLE_IN
      251    14175             DESCRIPTION:  Calls  an  internal  subroutine  to do a write
      252    14176                           immediately followed by a read to simulate the
      253    14177                           GCOS  write-read function  to a  console.  The
      254    14178                           caller  must invoke  the macros  FPT_WRITE and
      255    14179                           FPT_READ with the names CONSOLE_FPTand READ_IO
      256    14180                           with the SYMREF  attribute in his routine.  On
      257    14181                           calling  this entry, CONSOLE_FPT.BUF_ must frame
      258    14182                           the  message to  be output,  and READ_FPT.BUF_
      259    14183                           must  frame  the  area  to  be  read into.  On
      260    14184                           normal  termination  return  is  made  to  the
      261    14185                           caller  without any  status.  Any  ALTRET will
      262    14186                           terminate TOLTS.
      263    14187                           All terminal I/O is "wait".
      264    14188        */
      265    14189
      266    14190    1   TOT$WRITE_READ_IO: ENTRY;
      267    14191
      268    14192    1      CALL SET_SUBEXEC_PROMPT ;
      269    14193    1      CALL CONSOLE_IN;
      270    14194    1      RETURN;
      271    14195
      272    14196        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:11   
      273    14197        /*D* NAME:         TOT$CONSOLE_IN
      274    14198             ENTRY:
      275    14199             INTERFACE:    CONSOLE_IN
      276    14200             DESCRIPTION:  This entry points calls the TOLTS user input
      277    14201                           routine,  CONSOLE_IN,  so that other   TOLTS
      278    14202                           modules can obtain data from the user.
      279    14203        */
      280    14204
      281    14205    1   TOT$CONSOLE_IN: ENTRY ;
      282    14206
      283    14207    1      CALL CONSOLE_IN ;
      284    14208    1      RETURN ;
      285    14209
      286    14210        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:12   
      287    14211        /*D* NAME:         TOT$NEXT_TEST_REQ
      288    14212             ENTRY:
      289    14213             INTERFACE:    GET_NEXT_TEST_REQUEST
      290    14214             DESCRIPTION:  Called  by  the  Break  Handler when user hits
      291    14215                           "break"  key on  terminal.  Calls  an internal
      292    14216                           subroutine  which issues the  prompt (???) and
      293    14217                           reads the test request in and stores it in the
      294    14218                           dispatcher queue for later servicing.
      295    14219                           queue for later servicing.
      296    14220        */
      297    14221
      298    14222    1   TOT$NEXT_TEST_REQ: ENTRY;
      299    14223
      300    14224    1      CALL GET_TOLTS_REQUEST ;
      301    14225    1      RETURN;
      302    14226
      303    14227        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:13   
      304    14228        /*D* NAME:         TOT$RESTART
      305    14229             ENTRY:
      306    14230             INTERFACE:    None.
      307    14231             DESCRIPTION:  This entry points is  called when a subexec no
      308    14232                           longer has  anything to do because of an error
      309    14233                           or a normal termination.      This entry point
      310    14234                           unwinds back to accept another test request.
      311    14235        */
      312    14236
      313    14237    1   TOT$RESTART: ENTRY;
      314    14238
      315    14239    1      UNWIND TO TOT$REINITIALIZE ;
      316    14240
      317    14241        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:14   
      318    14242        /*D* NAME:         TOT$EXIT
      319    14243             ENTRY:
      320    14244             INTERFACE:    PROCESS_EXIT_REQ
      321    14245             DESCRIPTION:  This entry points is  called when TOLTS is to
      322    14246                           be  terminated by an  event  other  than  the
      323    14247                           entering of the END request.
      324    14248        */
      325    14249
      326    14250    1   TOT$EXIT: ENTRY;
      327    14251
      328    14252    1      CALL PROCESS_EXIT_REQ ;
      329    14253
      330    14254        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:15   
      331    14255        /*I*  NAME:        FREE_DYNAMIC_PAGES
      332    14256              AUTHOR:      Scott S. Sheppard
      333    14257              PURPOSE:     Release Pages of Memory
      334    14258              INTERFACE:   M$FDP Monitor Service
      335    14259                           XUG$ERRMSG Library Service
      336    14260                           M$ERR Monitor Service
      337    14261              INPUT:       TOT$ECP.DYNAMIC_PAGE_COUNT - dynamic page count
      338    14262              OUTPUT:      Pages released back to CP-6.
      339    14263              SCRATCH:     No alteration side-effects.
      340    14264              DESCRIPTION: This procedure frees any dynamic pages held by
      341    14265                           TOLTS and resets the base address register.
      342    14266        */
      343    14267
      344    14268    1   FREE_DYNAMIC_PAGES: PROC ;
      345    14269
      346    14270           %FPT_FDP (FPTN = REL_TOLTS_PGS) ;
      347    14284
      348    14285        /* Code */
      349    14286
      350    14287    2      IF TOT$ECP.DYNAMIC_PAGE_COUNT = 0
      351    14288    2      THEN /* TOLTS currently does not have any dynamically acquired pages. */ ;
      352    14289    3      ELSE DO ;
      353    14290    3              REL_TOLTS_PGS.V.PAGES# = TOT$ECP.DYNAMIC_PAGE_COUNT ;
      354    14291    3              CALL M$FDP (REL_TOLTS_PGS) ALTRET (RELEASE_ERROR) ;
      355    14292    3           END /* ELSE */ ;
      356    14293    2      RETURN ;
      357    14294
      358    14295    2   RELEASE_ERROR:
      359    14296    2      TOLTS_GETCMD.ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
      360    14297    2      CALL XUG$ERRMSG (TOLTS_GETCMD);
      361    14298    2      CALL M$ERR ;
      362    14299
      363    14300    2   END FREE_DYNAMIC_PAGES ;
      364    14301        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:16   
      365    14302        /*I* NAME:         FREE_EXCESS_DATA_SEGMENTS
      366    14303             AUTHOR:       Scott S. Sheppard
      367    14304             PURPOSE:      releases unneeded memory
      368    14305             INTERFACE:    FREE_SEG
      369    14306                           ADDR function
      370    14307             PARAMETERS:   None passed.
      371    14308             DATA:         TOT$DMC.TOM$SEGTBLS.PTR$ - input / output
      372    14309                           TOM$SEGTBLS - input (memory released)
      373    14310                           TOM$SEGTBL - input (memory released)
      374    14311             DESCRIPTION:  This   procedure  releases   memory  for  data
      375    14312                           segments which are  no longer needed by TOLTS.
      376    14313                           During  the processing  of NIO  test requests,
      377    14314                           data  segments  are  allocated  to  hold  test
      378    14315                           images loaded from  the deckfile so these test
      379    14316                           images  may  be  accessed  frequently,  in  an
      380    14317                           efficient  manner.  When  MOLTS  ends (the NIO
      381    14318                           test  terminates), any  existing data segments
      382    14319                           are useless. This  procedure steps through the
      383    14320                           table  of segments  and releases  any that are
      384    14321                           present. Since the table itself is only needed
      385    14322                           for  NIO requests,  it too  is kept  in a data
      386    14323                           segment and may be released.
      387    14324        */
      388    14325        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:17   
      389    14326    1   FREE_EXCESS_DATA_SEGMENTS: PROC ;
      390    14327
      391    14328    2      DCL TCX      UBIN WORD ALIGNED ;
      392    14329    2      DCL STX      UBIN WORD ALIGNED ;
      393    14330    2      DCL SEGTBL$  PTR ALIGNED ;
      394    14331
      395    14332        /* Code */
      396    14333
      397    14334    2      IF TOT$DMC.TOM$SEGTBLS.PTR$ = ADDR (NIL)
      398    14335    2      THEN /* no table of segments to free */ ;
      399    14336    3      ELSE DO ;
      400    14337                   /* step through all 8 possible test requests */
      401    14338    4              DO TCX = 0 TO 7 ;
      402    14339                      /* point to the set of segments for a test request */
      403    14340    4                 SEGTBL$ = ADDR (TOM$SEGTBLS(TCX)) ;
      404    14341                      /* step through all 7 possible segments */
      405    14342    5                 DO STX = 0 TO %(MAX_SEGS - 1) ;
      406    14343    5                    IF SEGTBL$ -> TOM$SEGTBL(STX) = '0'B
      407    14344    5                    THEN /* no segment allocated for this slot */ ;
      408    14345    5                    ELSE CALL FREE_SEG (%SEG_LGTH, SEGTBL$ -> TOM$SEGTBL.V(STX)) ;
      409    14346    5                 END /* DO */ ;
      410    14347    4              END /* DO */ ;
      411    14348                   /* free the table of segments itself */
      412    14349    3              CALL FREE_SEG (%TOM$SEGTBLS_LGTH, TOT$DMC.TOM$SEGTBLS) ;
      413    14350    3              TOT$DMC.TOM$SEGTBLS.PTR$ = ADDR (NIL) ;
      414    14351    3           END /* ELSE */ ;
      415    14352    2      RETURN ;
      416    14353
      417    14354        /* END FREE_EXCESS_DATA_SEGMENTS */
      418    14355        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:18   
      419    14356        /*I*  NAME:        FREE_SEG
      420    14357              AUTHOR:      Scott S. Sheppard
      421    14358              PURPOSE:     Frees Dynamic Memory Space
      422    14359              INTERFACE:   M$FDS Monitor Service
      423    14360                           XUG$ERRMSG
      424    14361                           M$ERR
      425    14362              PARAMETERS:  WORD_COUNT   - number of words in segment
      426    14363                           WORD_VECTOR  - vector to the set of words
      427    14364              DESCRIPTION: This procedure frees a set of dynamic words
      428    14365                           that are no longer needed as data space.
      429    14366        */
      430    14367
      431    14368    2   FREE_SEG: PROC (WORD_COUNT, WORD_VECTOR) ;
      432    14369
      433    14370    3      DCL WORD_COUNT     UBIN WORD ALIGNED ;
      434    14371    3      DCL WORD_VECTOR    BIT (72) DALIGNED ;
      435    14372           %FPT_FDS (FPTN = FREE_BUFFER) ;
      436    14387
      437    14388        /* Code */
      438    14389
      439    14390    3      FREE_BUFFER.V.SEGSIZE# = WORD_COUNT ;
      440    14391    3      FREE_BUFFER.RESULTS_ = VECTOR (WORD_VECTOR) ;
      441    14392    3      CALL M$FDS (FREE_BUFFER) ALTRET (FREE_ERROR) ;
      442    14393    3      RETURN ;
      443    14394
      444    14395    3   FREE_ERROR:
      445    14396    3      TOLTS_GETCMD.ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
      446    14397    3      CALL XUG$ERRMSG (TOLTS_GETCMD);
      447    14398    3      CALL M$ERR ;
      448    14399
      449    14400    3   END FREE_SEG ;
      450    14401    2   END FREE_EXCESS_DATA_SEGMENTS ;
      451    14402        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:19   
      452    14403        /*I* NAME:         SET_BAR
      453    14404             DESCRIPTION:  TOF$BAR.FULL  (18 bits)  is build  to simulate
      454    14405                           the  Base  Address  Register  BAR) in the GCOS
      455    14406                           environment.   It represents the  BAR which is
      456    14407                           in effect  when the ISR has  not been shrunken
      457    14408                           around a  test page.  Thus, the  base field is
      458    14409                           initialized  to 0  (i.e., the  base of the BAR
      459    14410                           coincides with  the base of the  ISR), and the
      460    14411                           size field is  initialized to the last address
      461    14412                           of  TOLTS  in  the  ISR.   The  size  field is
      462    14413                           generated        from       the       variable
      463    14414                           B$JIT$ -> B$JIT.TDP(from  the  JIT,  and  is the
      464    14415                           page  number of  the last  page being  used by
      465    14416                           TOLTS.  It is the  page number relative to the
      466    14417                           beginning of TOLTS's working space, so it must
      467    14418                           be  relativezed to  a page  number relative to
      468    14419                           the start of the  ISR.  In CP6, the ISR starts
      469    14420                           at  page  64  in  the  working space, so 64 is
      470    14421                           substracted off, and the resulting page number
      471    14422                           converted to 512 word blocks by multiplying by
      472    14423                           2).
      473    14424
      474    14425                           Thus, the first 9 bits of TOF$BAR.FULL contain
      475    14426                           the simulated GELBAR  base in 512 word blocks,
      476    14427                           and the  next 9 bits contains  the size of the
      477    14428                           program in 512 word blocks.
      478    14429
      479    14430                           TOF$BAR.CURRENT contains  the same information
      480    14431                           as    TOF$BAR.FULL   (in    terms   of   field
      481    14432                           definitions).   It however  represents the BAR
      482    14433                           at any instant.  That  is, if MME GELBAR is in
      483    14434                           effect,  it contains the  BAR which frames the
      484    14435                           test  page.   The  base  field contains a base
      485    14436                           value relative  to the ISR base,  and the size
      486    14437                           field  frames the  test page.  TOF$BAR.CURRENT
      487    14438                           updated  to  TOF$BAR.FULL  whenever  GELBAR is
      488    14439                           "broken".
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:20   
      489    14440
      490    14441                            SET_BAR  initializes  2  variables  which are
      491    14442                           used    to   simulate    GELBAR   for   SOLTS.
      492    14443                           TOF$BAR.FULL  is  the  simulated  Base Address
      493    14444                           Register   (BAR)   covering   the   full  ISR;
      494    14445                           TOF$BAR.CURRENT is the  simulated BAR when the
      495    14446                           ISR has been  shrunken.  See the documentation
      496    14447                           for SET_BAR for  a more complete explaination.
      497    14448                           TOF$REMEMBER_SFR  and TOF$REMEMBER_SISR  are 2
      498    14449                           BMAP routines which build the 2 PL6 "remember"
      499    14450                           variables  TOF$SFR_RV  and  TOF$SISR_RV  which
      500    14451                           allows  TOLTS to enter  GMAP subexecs and test
      501    14452                           pages directly without leaving around PL6 auto
      502    14453                           frames.   These 2 remember  variables are used
      503    14454                           when simulating MME  GELBAR and returning to a
      504    14455                           subexec following a  test page fault.  See the
      505    14456                           documentation  for the 2  subroutines for more
      506    14457                           detail.
      507    14458        */
      508    14459        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:21   
      509    14460    1   SET_BAR: PROC;
      510    14461
      511    14462        /* Code */
      512    14463
      513    14464           /* Get page number of next available page, relative to the
      514    14465              working space. Convert the page number relative  to the
      515    14466              ISR. Convert to the number of 512 word blocks.
      516    14467              Build a simulated bar. */
      517    14468
      518    14469    2      TOF$BAR.FULL.SIZE = (B$JIT$ -> B$JIT.TDP - 64) * 1024 / 512 ;
      519    14470    2      TOF$BAR.FULL.BASE = 0;
      520    14471    2      TOF$BAR.CURRENT = TOF$BAR.FULL;
      521    14472    2      RETURN;
      522    14473
      523    14474    2   END SET_BAR;
      524    14475        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:22   
      525    14476        /*I*  NAME:        REQUEST_INITIAL
      526    14477              AUTHOR:      Scott S. Sheppard
      527    14478              PURPOSE:     TOLTS Request Initialization
      528    14479              INTERFACE:   None called.
      529    14480              INPUT:       No system data accessed.
      530    14481              OUTPUT:      TOD$QUEUE
      531    14482                           TOP$TCP
      532    14483                           TOQ$DCP
      533    14484                           TOS$COMWD
      534    14485                           TOT$ECP
      535    14486              SCRATCH:     No alteration side-effects.
      536    14487              DESCRIPTION: This procedure does all of the variable initialization
      537    14488                           necessary before a non-asynchronous TOLTS test request
      538    14489                           may be accepted.
      539    14490        */
      540    14491
      541    14492    1   REQUEST_INITIAL: PROC ;
      542    14493
      543    14494        /* Code */
      544    14495
      545    14496    2      TOD$QUEUE = '0'B ;
      546    14497    2      TOO$IO_BUFFER = '0'B ;
      547    14498    2      TOP$TCP = '0'B ;
      548    14499    2      TOQ$DCP = '0'B ;
      549    14500    2      TOS$COMWD = '0'B ;
      550    14501    2      TOT$ECP = '0'B ;
      551    14502    2      RETURN ;
      552    14503
      553    14504    2   END REQUEST_INITIAL ;
      554    14505        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:23   
      555    14506        /*I* NAME:         GET_TOLTS_REQUEST
      556    14507             INTERFACE:    SET_TOLTS_PROMPT
      557    14508                           XUG$GETCMD Library Service
      558    14509                           XUG$ERRMSG Library Service
      559    14510                           SELECT_TOLTS_REQUEST
      560    14511             DESCRIPTION:  This routine is called for the first or any
      561    14512                           asynchronous TOLTS requests.    The routine
      562    14513                           accepts a TOLTS request from the user   and
      563    14514                           processes it appropriately.  When  a  TOLTS
      564    14515                           Subexecutive is active,this routine returns
      565    14516                           immediately,  otherwise  it  loops until a
      566    14517                           subexecutive is activated.
      567    14518        */
      568    14519        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:24   
      569    14520    1   GET_TOLTS_REQUEST: PROC;
      570    14521
      571    14522    2      DCL CMD$            PTR ALIGNED ;
      572    14523    2      DCL 1 TOLTS_PROMPT CONSTANT CALIGNED,
      573    14524    2            2 * UBIN BYTE CALIGNED INIT(30), /* <RS> (transition) VFC */
      574    14525    2            2 * CHAR (3) CALIGNED INIT('???');
      575    14526           %PARSE$OUT (NAME = CMDOUT, STCLASS = "BASED (CMD$)") ;
      576    14571           %PARSE$SYM (NAME = CMDSYM, STCLASS = "BASED (CMD$)") ;
      577    14609
      578    14610        /* Code */
      579    14611
      580    14612    3      DO UNTIL (TOT$ECP.SUBEXEC.CURRENT ~= %NONE) ;
      581    14613    3         TOLTS_GETCMD.PROMPT_ = VECTOR (TOLTS_PROMPT);
      582    14614    3         TOLTS_GETCMD.PROMPT_VFC# = '1'B;
      583    14615    3         CALL XUG$GETCMD (TOLTS_GETCMD) WHENRETURN
      584    14616    4              DO ;
      585    14617    4                 CMD$ = TOLTS_GETCMD.OUT$;
      586    14618    4                 CALL SELECT_TOLTS_REQUEST ;
      587    14619    4              END /* WHENRETURN */ ;
      588    14620    3         WHENALTRETURN
      589    14621    4              DO ;
      590    14622    4                 TOLTS_GETCMD.ERR_CODE = TOLTS_GETCMD.ERR#;
      591    14623    4                 CALL XUG$ERRMSG (TOLTS_GETCMD);
      592    14624    4                 IF TOLTS_GETCMD.ERR#.CODE# = %E$EOF THEN
      593    14625    4                    TOT$ECP.SUBEXEC.CURRENT = BITBIN(%TRUE) ; /* 39916 */
      594    14626    4              END ;
      595    14627    3      END /* DO UNTIL */ ;
      596    14628    2      RETURN ;
      597    14629
      598    14630        /* END GET_TOLTS_REQUEST */
      599    14631        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:25   
      600    14632        /*I*  NAME:        SET_TOLTS_PROMPT
      601    14633              AUTHOR:      Scott S. Sheppard
      602    14634              PURPOSE:     Sets TOLTS prompt
      603    14635              INTERFACE:   M$PROMPT
      604    14636              INPUT:       B$JIT.MODE
      605    14637              OUTPUT:      Prompt set to '???'
      606    14638              SCRATCH:     No alteration side-effects.
      607    14639              DESCRIPTION: This procedure sets the TOLTS prompt to the
      608    14640                           standardly recognized three question marks.
      609    14641        */
      610    14642
      611    14643    2   SET_TOLTS_PROMPT: PROC ;
      612    14644
      613    14645    3      DCL TOLTS_PROMPT   CHAR (3) CONSTANT CALIGNED INIT ('???') ;
      614    14646           %FPT_PROMPT (FPTN   = SET_TOLTS_PROMPT,
      615    14647                        PROMPT = TOLTS_PROMPT,
      616    14648                        VFC    = NO) ;
      617    14676
      618    14677        /* Code */
      619    14678
      620    14679    3      IF B$JIT.MODE = %M_INT#
      621    14680    3      THEN CALL M$PROMPT (SET_TOLTS_PROMPT) ;
      622    14681    3      ELSE /* TOLTS is not being run interactively. */ ;
      623    14682    3      RETURN ;
      624    14683
      625    14684    3   END SET_TOLTS_PROMPT ;
      626    14685        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:26   
      627    14686        /*I* NAME:         SELECT_TOLTS_REQUEST
      628    14687             DESCRIPTION:  This procedure selects the appropiate request
      629    14688                           processing module based on TOLTS request type
      630    14689                           information returned by XUG$GETCMD.
      631    14690        */
      632    14691
      633    14692    2   SELECT_TOLTS_REQUEST: PROC ;
      634    14693
      635    14694        /* Code */
      636    14695
      637    14696    4      DO CASE (CMDOUT.CODE) ;
      638    14697    4         CASE (%NULL) ;
      639    14698                 /* Do Nothing */
      640    14699    4         CASE (%TEST) ;
      641    14700    4            CALL REBUILD_TEST_REQ ;
      642    14701    4            CALL PROCESS_TEST_REQ ;
      643    14702    4         CASE (%DEBUG) ;
      644    14703    4            CALL SET_DEBUG_FLAGS ;
      645    14704    4            CALL REBUILD_TEST_REQ ;
      646    14705    4            CALL PROCESS_TEST_REQ ;
      647    14706    4         CASE (%MSG) ;
      648    14707    4            CALL PROCESS_MSG_REQ ;
      649    14708    4         CASE (%QUIT) ;
      650    14709    4            CALL PROCESS_EXIT_REQ ;
      651    14710    4      END /* CASE */ ;
      652    14711    3      RETURN ;
      653    14712
      654    14713    3   END SELECT_TOLTS_REQUEST ;
      655    14714        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:27   
      656    14715        /*I* NAME:         SET_DEBUG_FLAGS
      657    14716             AUTHOR:       Scott S. Sheppard
      658    14717             PURPOSE:      Assigns Debug Processing Flags
      659    14718             INTERFACE:    None called.
      660    14719             PARAMETERS:   None passed.
      661    14720             DATA:         CMD$ - input
      662    14721                           TOQ$DCP.PF.ENABLED - output
      663    14722                           TOQ$DCP.PF.DEBUG_TOLTS - output
      664    14723                           TOQ$DCP.PF.STOP_ON_GELBARS - output
      665    14724                           TOQ$DCP.PF.STOP_ON_IO - output
      666    14725             DESCRIPTION:  This  procedure  assigns the  proper values to the
      667    14726                           processing   flags  (PF)  of   the  Debug  Control
      668    14727                           Parameter  (TOQ$DCP).   TOQ$DCP  is  zeroed out in
      669    14728                           REQUEST_INIITIAL  so  all  initial  values for the
      670    14729                           flags  are  false.  Based  on  the  debug  options
      671    14730                           entered,  the following flags  are enabled (set to
      672    14731                           true).
      673    14732                             TOLTS option          Corresponding Flag
      674    14733                             ------------          ------------------
      675    14734                             AND TOLTS             TOQ$DCP.PF.DEBUG_TOLTS
      676    14735                             STOPPING ON GELBARS   TOQ$DCP.PF.STOP_ON_GELBARS
      677    14736                             STOPPING ON IO        TOQ$DCP.PF.STOP_ON_IO
      678    14737                             SCREAMING MMES        TOQ$DCP.PF.DISP_MMES
      679    14738                           This procedure enables those bits so that calls to
      680    14739                           TOQ$DEBUG can be handled properly.
      681    14740        */
      682    14741        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:28   
      683    14742    2   SET_DEBUG_FLAGS: PROC ;
      684    14743
      685    14744    3      DCL OUTBLK#                    UBIN WORD ALIGNED ;
      686    14745    3      DCL OUTBLK$                    PTR ALIGNED ;
      687    14746           %PARSE$OUT (STCLASS = BASED) ;
      688    14791
      689    14792        /* Code */
      690    14793
      691    14794    3      TOQ$DCP.PF.ENABLED = %TRUE ;
      692    14795    4      DO OUTBLK# = 1 TO CMD$ -> OUT$BLK.NSUBLKS - 1 ;
      693    14796    4         OUTBLK$ = CMD$ -> OUT$BLK.SUBLK$(OUTBLK#) ;
      694    14797    5         DO CASE (OUTBLK$ -> OUT$BLK.CODE) ;
      695    14798    5            CASE (%AND_TOLTS) ;
      696    14799    5               TOQ$DCP.PF.DEBUG_TOLTS = %TRUE ;
      697    14800    5            CASE (%STOP_GELBAR) ;
      698    14801    5               TOQ$DCP.PF.STOP_ON_GELBARS = %TRUE ;
      699    14802    5            CASE (%STOP_IO) ;
      700    14803    5               TOQ$DCP.PF.STOP_ON_IO = %TRUE ;
      701    14804    5            CASE (%STOP_SE) ;
      702    14805    5               TOQ$DCP.PF.STOP_AT_SE = %TRUE ;
      703    14806    5            CASE (%SCREAM_MMES) ;
      704    14807    5               TOQ$DCP.PF.DISP_MMES = %TRUE ;
      705    14808    5         END /* CASE */ ;
      706    14809    4      END /* DO */ ;
      707    14810    3      RETURN ;
      708    14811
      709    14812    3   END SET_DEBUG_FLAGS ;
      710    14813        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:29   
      711    14814        /*I* NAME:         REBUILD_TEST_REQ
      712    14815             INTERFACE:    CONCATenation Function
      713    14816             DESCRIPTION:  In order to correctly parse TOLTS input commands,
      714    14817                           constants signifying the  leading characters  for
      715    14818                           valid  TOLTS  requests  had  to  be  set  up  for
      716    14819                           XUG$GETCMD.    Although this allows XUG$GETCMD to
      717    14820                           flag any string that does not begin with a  legal
      718    14821                           leading character as invalid, XUG$GETCMD does not
      719    14822                           place the leading  constant character(s)  in  the
      720    14823                           literal for the entered request. Thus we have to
      721    14824                           tack the omitted characters back on to the start
      722    14825                           of the TOLTS request string.
      723    14826        */
      724    14827
      725    14828    2   REBUILD_TEST_REQ: PROC ;
      726    14829
      727    14830    3      DCL PREFIX_STRING    CHAR (5) CALIGNED ;
      728    14831    3      DCL PREFIX_LGTH      UBIN BYTE CALIGNED ;
      729    14832           %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:30   
      730    14833        /* Code */
      731    14834
      732    14835    4      DO CASE (CMDOUT.SUBLK$(0) -> CMDOUT.CODE) ;
      733    14836    4         CASE (%COLTS) ;
      734    14837    4            PREFIX_STRING = 'C' ;
      735    14838    4            PREFIX_LGTH = 1 ;
      736    14839    4         CASE (%MOLTS) ;
      737    14840    4            PREFIX_STRING = 'M' ;
      738    14841    4            PREFIX_LGTH = 1 ;
      739    14842    4         CASE (%POLTS) ;
      740    14843    4            PREFIX_STRING = 'P' ;
      741    14844    4            PREFIX_LGTH = 1 ;
      742    14845    4         CASE (%SOLTS) ;
      743    14846    4            PREFIX_STRING = 'S' ;
      744    14847    4            PREFIX_LGTH = 1 ;
      745    14848    4         CASE (%PACT) ;
      746    14849    4            PREFIX_STRING = '$PACT' ;
      747    14850    4            PREFIX_LGTH = 5 ;
      748    14851    4         CASE (%SLTA) ;
      749    14852    4            PREFIX_STRING = '$SLTA' ;
      750    14853    4            PREFIX_LGTH = 5 ;
      751    14854    4         CASE (%NEW_IO) ;
      752    14855    4            PREFIX_STRING = 'NIO' ;
      753    14856    4            PREFIX_LGTH = 3 ;
      754    14857    4         CASE (%SPUD) ;
      755    14858    4            PREFIX_STRING = 'RPM' ;
      756    14859    4            PREFIX_LGTH = 3 ;
      757    14860    4      END /* CASE */ ;
      758    14861    3      IF CMDOUT.SUBLK$(0) -> CMDOUT.NSUBLKS = 0
      759    14862    3      THEN TOT$ECP.TEST_REQ = SUBSTR (PREFIX_STRING, 0, PREFIX_LGTH) ;
      760    14863    3      ELSE CALL CONCAT (TOT$ECP.TEST_REQ,
      761    14864    3                 SUBSTR (PREFIX_STRING, 0, PREFIX_LGTH),
      762    14865    3                 SUBSTR (CMDOUT.SUBLK$(0) -> CMDSYM.TEXTC$ -> CMDSYM.TEXT,0,
      763    14866    3                 CMDOUT.SUBLK$(0) -> CMDSYM.TEXTC$ -> CMDSYM.COUNT)) ;
      764    14867    3      RETURN ;
      765    14868
      766    14869    3   END REBUILD_TEST_REQ ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:31   
      767    14870        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:32   
      768    14871        /*I* NAME:         PROCESS_TEST_REQ
      769    14872             INTERFACE:    SET_SUBEXEC
      770    14873                           CHECK_SUBEXEC
      771    14874                           SET_SYSTEM_TYPE
      772    14875                           CHECK_VALID_SUBEXEC
      773    14876                           CHECK_DEBUG
      774    14877                           CHECK_CONTRACT
      775    14878                           BUILD_INIT_SUBEXEC
      776    14879                           BUILD_ISC_WRITE
      777    14880                           TOS$PACT
      778    14881                           TOD$DISPATCHER
      779    14882             DESCRIPTION:  This routine is called for the first or any
      780    14883                           asynchronous test requests.  This procedure
      781    14884                           handles a test request based on the type of
      782    14885                           request and whether or   not a subexecutive
      783    14886                           is currently active.
      784    14887        */
      785    14888        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:33   
      786    14889    2   PROCESS_TEST_REQ: PROC ;
      787    14890
      788    14891        /* Code */
      789    14892
      790    14893    3      IF TOT$ECP.SUBEXEC.CURRENT = %NONE
      791    14894    4      THEN DO ;
      792    14895    4              CALL CHECK_CONTRACT ;
      793    14896    4              CALL SET_SYSTEM_TYPE;
      794    14897    4              CALL SET_SUBEXEC ;
      795    14898    4              CALL CHECK_VALID_SUBEXEC;
      796    14899    4              CALL BUILD_INIT_SUBEXEC ;
      797    14900    4              IF TOT$ECP.SUBEXEC.CURRENT = %PACT | TOT$ECP.SUBEXEC.CURRENT = %SLTA
      798    14901    4              THEN CALL TOS$PACT ;
      799    14902    4              ELSE /* No need to alter the Communications Word. */ ;
      800    14903    4              CALL BUILD_ISC_WRITE ;
      801    14904    4              REQUEST_TYPE = %DRT_SERVICE ;
      802    14905    4              CALL TOD$DISPATCHER (REQUEST_TYPE,,) ;
      803    14906    4           END /* THEN */ ;
      804    14907    4      ELSE DO ;
      805    14908    4              CALL CHECK_CONTRACT ;
      806    14909    4              CALL CHECK_SUBEXEC ALTRET (NOT_SAME) ;
      807    14910    4              CALL CHECK_DEBUG ALTRET (NOT_SAME) ;
      808    14911    4              IF TOT$ECP.SUBEXEC.CURRENT = %PACT | TOT$ECP.SUBEXEC.CURRENT = %SLTA
      809    14912    4              THEN CALL TOS$PACT ;
      810    14913    4              ELSE /* No need to alter the Communications Word. */ ;
      811    14914    4              CALL BUILD_ISC_WRITE ;
      812    14915    4   NOT_SAME:
      813    14916    4              RETURN ;
      814    14917    4           END /* ELSE */ ;
      815    14918
      816    14919        /* END PROCESS_TEST_REQ */
      817    14920        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:34   
      818    14921        /*I* NAME:         CHECK_CONTRACT
      819    14922             AUTHOR:       Scott S. Sheppard
      820    14923             PURPOSE:      Checks for a Maintenance Contract
      821    14924             INTERFACE:    XUG$ERRMSG
      822    14925                           TOT$RESTART
      823    14926             PARAMETERS:   None passed.
      824    14927             DATA:         TOT$IFAD.MAINTENANCE.CONTRACT - input
      825    14928                           TOT$ECP.TEST_REQ - input
      826    14929             DESCRIPTION:  This   TOLTS   procedure   checks  to   ensure
      827    14930                           that   a  customer  site   has  a  maintenance
      828    14931                           agreement  before  allowing  any  tests, other
      829    14932                           than MTAR or PACT tests, to be run.
      830    14933
      831    14934                           When  the  deckfile  is  built,  the  REVISION
      832    14935                           record  stored  in  the  deckfile contains the
      833    14936                           IFAD  Release of  the tape  used to  build the
      834    14937                           deckfile and a bit which indicates if the site
      835    14938                           has  a maintenance agreement  or not. This bit
      836    14939                           was  set  by  checking  to  see  if  the  deck
      837    14940                           PLT.POLTCM (CPLT) was found on the site's IFAD
      838    14941                           tape.
      839    14942
      840    14943                           The maintenance contract bit  is stored in a 4
      841    14944                           character field.  For sites that do NOT have a
      842    14945                           maintenance  contract,  the  field  looks like
      843    14946                           "CP-6".  This is done  so if a non-maintenance
      844    14947                           site  dumps  the   revision  record  from  the
      845    14948                           deckfile, all will  appear to be normal.  When
      846    14949                           the  bit  is  set  for  maintenance sites, the
      847    14950                           field becomes "CP=6".
      848    14951        */
      849    14952        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:35   
      850    14953    3   CHECK_CONTRACT: PROC ;
      851    14954
      852    14955        /* Code */
      853    14956
      854    14957    4      IF TOT$IFAD.MAINTENANCE.CONTRACT
      855    14958    4      THEN RETURN ;
      856    14959    4      ELSE IF SUBSTR (TOT$ECP.TEST_REQ, 0, 3) = 'MMT' |
      857    14960    4                 SUBSTR (TOT$ECP.TEST_REQ, 0, 4) = 'MEMT' |
      858    14961    4                 SUBSTR (TOT$ECP.TEST_REQ, 0, 4) = 'MOMT' |
      859    14962    4                 SUBSTR (TOT$ECP.TEST_REQ, 0, 2) = 'MW' |
      860    14963    4                 SUBSTR (TOT$ECP.TEST_REQ, 0, 6) = 'MLSTAL' |
      861    14964    4                 SUBSTR (TOT$ECP.TEST_REQ, 0, 5) = '$PACT'
      862    14965    4         THEN RETURN ;
      863    14966    5         ELSE DO ;
      864    14967    5                 TOT_ERROR_CODE.ERR# = %E$NOTNDCONTRACT ;
      865    14968    5                 TOLTS_GETCMD.ERR_CODE = TOT_ERROR_CODE;
      866    14969    5                 TOLTS_GETCMD.FLGLEV# = 4;
      867    14970    5                 CALL XUG$ERRMSG (TOLTS_GETCMD);
      868    14971    5                 CALL TOT$RESTART ;
      869    14972    5              END /* ELSE */ ;
      870    14973
      871    14974    4   END CHECK_CONTRACT ;
      872    14975        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:36   
      873    14976        /*I* NAME:         SET_SYSTEM_TYPE
      874    14977             AUTHOR:       Kathy Larkin
      875    14978             PURPOSE:      Get system information
      876    14979             INTERFACE:    M$MONINFO
      877    14980                           XUG$ERRMSG - prints altret error message text
      878    14981                           M$ERR - exits TOLTS
      879    14982             PARAMETERS:   None passed.
      880    14983             DATA:         TOT$ECP.BOOT_CPU_TYPE
      881    14984             DESCRIPTION:  Calls  M$MONINFO  to  obtain information about
      882    14985                           the  type  of  CPU  the  system was booted on.
      883    14986
      884    14987                              DPS90
      885    14988                              DPS8000
      886    14989                              DPS8
      887    14990        */
      888    14991
      889    14992    3   SET_SYSTEM_TYPE: PROC ;
      890    14993
      891    14994           %FPT_MONINFO                   (FPTN        = GET_INFO,
      892    14995                                           SITEINFO    = SYSTEM_INFO);
      893    15010           %VLR_SITEINFO                  (FPTN        = SYSTEM_INFO);
      894    15029
      895    15030        /* Code */
      896    15031
      897    15032    4      CALL M$MONINFO (GET_INFO) WHENRETURN
      898    15033    5           DO;
      899    15034    5              TOT$ECP.BOOT_CPU_TYPE = SYSTEM_INFO.CPU_TYPE#;
      900    15035    5              RETURN;
      901    15036    5           END /* WHENRETURN DO */;
      902    15037    4      WHENALTRETURN
      903    15038    5           DO;
      904    15039    5              TOLTS_GETCMD.ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
      905    15040    5              CALL XUG$ERRMSG (TOLTS_GETCMD);
      906    15041    5              CALL M$ERR;
      907    15042    5           END /* WHENALTRETURN DO */;
      908    15043    4   END SET_SYSTEM_TYPE;
      909    15044        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:37   
      910    15045        /*I* NAME:         SET_SUBEXEC
      911    15046             INTERFACE:    None Called.
      912    15047             DESCRIPTION:  This routine sets the current TOLTS Subexecutive
      913    15048                           flag from information returned by XUG$GETCMD.
      914    15049        */
      915    15050
      916    15051    3   SET_SUBEXEC: PROC ;
      917    15052
      918    15053        /* Code */
      919    15054
      920    15055    5      DO CASE (CMDOUT.SUBLK$(0) -> CMDOUT.CODE) ;
      921    15056    5         CASE (%NEW_IO, %SPUD) ;
      922    15057    5            TOT$ECP.SUBEXEC.CURRENT = %MOLTS ;
      923    15058    5         CASE (ELSE) ;
      924    15059    5            TOT$ECP.SUBEXEC.CURRENT = CMDOUT.SUBLK$(0) -> CMDOUT.CODE ;
      925    15060    5      END /* CASE */ ;
      926    15061    4      RETURN ;
      927    15062
      928    15063    4   END SET_SUBEXEC ;
      929    15064        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:38   
      930    15065        /*I* NAME:         CHECK_VALID_SUBEXEC
      931    15066             AUTHOR:       Kathy Larkin
      932    15067             PURPOSE:      Checks subexec validity for this system type
      933    15068             INTERFACE:    TOT$RESTART
      934    15069             PARAMETERS:   None passed.
      935    15070             DATA:         TOT$ECP.SUBEXEC.CURRENT - input/output
      936    15071                           TOT$ECP.BOOT_CPU_TYPE - input
      937    15072             DESCRIPTION:  Checks  to  see  if  the  requested subexec is
      938    15073                           permitted to run on  this system type.
      939    15074
      940    15075                           DPS90  -  PACT, POLTS, and SOLTS  tests  are
      941    15076                                     not supported under TOLTS.   If the
      942    15077                                     user attempts  to run  one of these
      943    15078                                     subexecs  on  a  DPS90 system, an
      944    15079                                     error message         will be
      945    15080                                     output, TOT$ECP.SUBEXEC.CURRENT will
      946    15081                                     be set to %NONE, and TOLTS will be
      947    15082                                     restarted.  Some MOLTS tests are run
      948    15083                                     under MSOS on  a DPS90 (MDRs and
      949    15084                                     ITRs),  but the  MOLTS subexec  is
      950    15085                                     responsible for screening the test
      951    15086                                     requests.
      952    15087
      953    15088                         DPS8000  -  PACT, and SOLTS  tests  are not
      954    15089                                     supported  under TOLTS.   If the
      955    15090                                     user attempts  to run  one of these
      956    15091                                     subexecs  on  a  DPS8000 system, an
      957    15092                                     error message         will be
      958    15093                                     output, TOT$ECP.SUBEXEC.CURRENT will
      959    15094                                     be set to %NONE, and TOLTS will be
      960    15095                                     restarted.
      961    15096
      962    15097        */
      963    15098
      964    15099    3   CHECK_VALID_SUBEXEC: PROC;
      965    15100
      966    15101        /* Code */
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:39   
      967    15102
      968    15103    5      DO CASE (TOT$ECP.BOOT_CPU_TYPE) ;
      969    15104    5         CASE ( %DPS90#, %DPS90XA#) ;
      970    15105    6            DO CASE (TOT$ECP.SUBEXEC.CURRENT);
      971    15106    6               CASE (%COLTS, %MOLTS);
      972    15107    6               CASE (%PACT, %POLTS, %SLTA, %SOLTS);
      973    15108    6                  TOT$ECP.SUBEXEC.CURRENT = %NONE;
      974    15109    6                  TOT_ERROR_CODE.ERR# = %E$NOTONDPS90;
      975    15110    6                  TOLTS_GETCMD.ERR_CODE = TOT_ERROR_CODE;
      976    15111    6                  TOLTS_GETCMD.FLGLEV# = 4;
      977    15112    6                  CALL XUG$ERRMSG (TOLTS_GETCMD);
      978    15113    6                  CALL TOT$RESTART;
      979    15114    6            END /* DO CASE DPS90 */;
      980    15115    5         CASE (%DPS8000#) ;
      981    15116    6            DO CASE (TOT$ECP.SUBEXEC.CURRENT);
      982    15117    6               CASE (%COLTS, %MOLTS, %POLTS);
      983    15118    6               CASE (%PACT, %SLTA, %SOLTS);
      984    15119    6                  TOT$ECP.SUBEXEC.CURRENT = %NONE;
      985    15120    6                  TOT_ERROR_CODE.ERR# = %E$NOTONDPS8000;
      986    15121    6                  TOLTS_GETCMD.ERR_CODE = TOT_ERROR_CODE;
      987    15122    6                  TOLTS_GETCMD.FLGLEV# = 4;
      988    15123    6                  CALL XUG$ERRMSG (TOLTS_GETCMD);
      989    15124    6                  CALL TOT$RESTART;
      990    15125    6            END /* DO CASE DPS80 */ ;
      991    15126    5      END /* DO CASE BOOT_CPU_TYPE */ ;
      992    15127    4      RETURN;
      993    15128    4   END CHECK_VALID_SUBEXEC;
      994    15129        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:40   
      995    15130        /*I* NAME:         CHECK_SUBEXEC
      996    15131             INTERFACE:    XUG$ERRMSG
      997    15132             DESCRIPTION:  When a TOLTS Subexecutive is active, only TEST
      998    15133                           requests for the active Subexecutive are allowed.
      999    15134        */
     1000    15135
     1001    15136    3   CHECK_SUBEXEC: PROC ALTRET ;
     1002    15137
     1003    15138        /* Code */
     1004    15139
     1005    15140    5      DO CASE (TOT$ECP.SUBEXEC.CURRENT) ;
     1006    15141    5         CASE (%MOLTS) ;
     1007    15142    5            IF CMDOUT.SUBLK$(0) -> CMDOUT.CODE = %MOLTS |
     1008    15143    5                    CMDOUT.SUBLK$(0) -> CMDOUT.CODE = %NEW_IO |
     1009    15144    5                    CMDOUT.SUBLK$(0) -> CMDOUT.CODE = %SPUD
     1010    15145    5            THEN RETURN ;
     1011    15146    5            ELSE /* not a MOLTS or an NIO request for the MOLTS subexecutive */ ;
     1012    15147    5         CASE (ELSE) ;
     1013    15148    5            IF CMDOUT.SUBLK$(0) -> CMDOUT.CODE = TOT$ECP.SUBEXEC.CURRENT
     1014    15149    5            THEN RETURN ;
     1015    15150    5            ELSE /* not a test request for the running subexecutive */ ;
     1016    15151    5      END /* CASE */ ;
     1017    15152
     1018    15153    4      TOT_ERROR_CODE.ERR# = %E$BADSUBEXEC ;
     1019    15154    4      TOLTS_GETCMD.ERR_CODE = TOT_ERROR_CODE;
     1020    15155    4      CALL XUG$ERRMSG (TOLTS_GETCMD);
     1021    15156    4      ALTRETURN ;
     1022    15157
     1023    15158    4   END CHECK_SUBEXEC ;
     1024    15159        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:41   
     1025    15160        /*I* NAME:         CHECK_DEBUG
     1026    15161             INTERFACE:    XUG$ERRMSG
     1027    15162             DESCRIPTION:  This procedure ensures that only one request is
     1028    15163                           run when TOLTS debug mode is in effect.
     1029    15164                           Only END, WRAP UP, OPTION, or LIST ALL
     1030    15165                           requests are allowed.
     1031    15166        */
     1032    15167
     1033    15168    3   CHECK_DEBUG: PROC ALTRET ;
     1034    15169
     1035    15170        /* Code */
     1036    15171
     1037    15172    4      IF TOQ$DCP.PF.ENABLED
     1038    15173    4      THEN IF TOT$ECP.TEST_REQ_(1) = 'E' |
     1039    15174    4                 TOT$ECP.TEST_REQ_(1) = 'O' |
     1040    15175    4                 TOT$ECP.TEST_REQ_(1) = 'L'
     1041    15176    4         THEN /* Test End request is allowed. */ ;
     1042    15177    5         ELSE DO ;
     1043    15178    5                 TOT_ERROR_CODE.ERR# = %E$ONLYONE ;
     1044    15179    5                 TOLTS_GETCMD.ERR_CODE = TOT_ERROR_CODE;
     1045    15180    5                 CALL XUG$ERRMSG (TOLTS_GETCMD) ;
     1046    15181    5                 ALTRETURN ;
     1047    15182    5              END /* ELSE */ ;
     1048    15183    4      ELSE /* All requests are allowed when TOLTS is not in DEBUG mode. */ ;
     1049    15184    4      RETURN ;
     1050    15185
     1051    15186    4   END CHECK_DEBUG ;
     1052    15187        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:42   
     1053    15188        /*I*  NAME:        BUILD_INIT_SUBEXEC
     1054    15189              AUTHOR:      Scott S. Sheppard
     1055    15190              PURPOSE:     Initialize Subexecutive Request
     1056    15191              INTERFACE:   TOD$DISPATCHER
     1057    15192              INPUT:       REQUEST_TYPE - build as opposed to service
     1058    15193                           SERVICE_CODE - initialize type
     1059    15194                           QUEUE_ENTRY  - not used but passed
     1060    15195              OUTPUT:      Entry placed in dispatcher queue
     1061    15196              SCRATCH:     No alteration side-effects.
     1062    15197              DESCRIPTION: This procedure places an entry in the dispatcher
     1063    15198                           queue  which requests  the initialization  of  a
     1064    15199                           TOLTS subexecutive.
     1065    15200        */
     1066    15201
     1067    15202    3   BUILD_INIT_SUBEXEC: PROC ;
     1068    15203
     1069    15204        /* Code */
     1070    15205
     1071    15206    4      REQUEST_TYPE = %DRT_BUILD;
     1072    15207    4      SERVICE_CODE = %DSC_INIT;
     1073    15208    4      QUEUE_ENTRY = '0'B;
     1074    15209    4      CALL TOD$DISPATCHER (REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY_BCD) ;
     1075    15210    4      RETURN ;
     1076    15211
     1077    15212    4   END BUILD_INIT_SUBEXEC ;
     1078    15213        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:43   
     1079    15214        /*I*  NAME:        BUILD_ISC_WRITE
     1080    15215              AUTHOR:      Scott S. Sheppard
     1081    15216              PURPOSE:     Interslave Write Request
     1082    15217              INTERFACE:   TOD$DISPATCHER
     1083    15218              INPUT:       REQUEST_TYPE - build as opposed to service
     1084    15219                           SERVICE_CODE - interslave write
     1085    15220                           QUEUE_ENTRY  - teest request
     1086    15221              OUTPUT:      Entry placed in dispatcher queue
     1087    15222              SCRATCH:     No alteration side-effects.
     1088    15223              DESCRIPTION: This procedure places an entry in the dispatcher
     1089    15224                           queue  which requests  that an interslave  write
     1090    15225                           be performed for the test request.
     1091    15226        */
     1092    15227        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:44   
     1093    15228    3   BUILD_ISC_WRITE: PROC ;
     1094    15229
     1095    15230    4      DCL SLTA_REQ    CHAR (12) CONSTANT CALIGNED INIT ('S10A') ;
     1096    15231    4      DCL CHAR_COUNT  SBIN STATIC ALIGNED;
     1097    15232
     1098    15233        /* Code */
     1099    15234
     1100    15235    4      IF TOT$ECP.SUBEXEC.CURRENT = %PACT
     1101    15236    4      THEN /* None needed for $PACT requests */ ;
     1102    15237    5      ELSE DO ;
     1103    15238    5              REQUEST_TYPE = %DRT_BUILD;
     1104    15239    5              SERVICE_CODE = %DSC_ISC;
     1105    15240    5              QUEUE_ENTRY_BCD = '0'B;
     1106    15241    5              CHAR_COUNT = 11;
     1107    15242    5              IF TOT$ECP.SUBEXEC.CURRENT = %SLTA
     1108    15243    5              THEN CALL TOT$ASCII_BCD (SLTA_REQ,
     1109    15244    5                         TEST_REQ_BCD.TEST_BCD, CHAR_COUNT) ;
     1110    15245    5              ELSE CALL TOT$ASCII_BCD (TOT$ECP.TEST_REQ,
     1111    15246    5                         TEST_REQ_BCD.TEST_BCD, CHAR_COUNT) ;
     1112    15247    5              QUEUE_ENTRY_BCD.TEST_REQUEST = TEST_REQ_BCD ;
     1113    15248    5              CALL TOD$DISPATCHER (REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY_BCD) ;
     1114    15249    5           END /* ELSE */ ;
     1115    15250    4      RETURN ;
     1116    15251
     1117    15252    4   END BUILD_ISC_WRITE ;
     1118    15253    3   END PROCESS_TEST_REQ ;
     1119    15254        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:45   
     1120    15255        /*I* NAME:         PROCESS_MSG_REQ
     1121    15256             AUTHOR:       Scott S. Sheppard
     1122    15257             PURPOSE:      Sends the Operator A Message
     1123    15258             INTERFACE:    SETUP_BUFFER
     1124    15259                           ISSUE_OPERATOR_MESSAGE
     1125    15260                           PRINT_OPERATOR_REPLY
     1126    15261             PARAMETERS:   None passed.
     1127    15262             DATA:         No external data accessed.
     1128    15263             DESCRIPTION:  The  MSG  command  has  been  implemented into
     1129    15264                           TOLTS  so  that  a  TOLTS  user  can  send the
     1130    15265                           operator  a  message  without  exitting TOLTS.
     1131    15266                           This procedure sets up a buffer from the parse
     1132    15267                           control  blocks and sends  the message. If the
     1133    15268                           message  ends in  a question  mark, a reply is
     1134    15269                           expected and this reply is printed.
     1135    15270        */
     1136    15271        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:46   
     1137    15272    2   PROCESS_MSG_REQ: PROC ;
     1138    15273
     1139    15274    3      DCL 1 BUFFER,
     1140    15275    3            2 REPLY_PENDING          BIT (1) CALIGNED,
     1141    15276    3            2 LGTH                   UBIN BYTE CALIGNED,
     1142    15277    3            2 TEXT_                  CHAR (81) CALIGNED,
     1143    15278    3            2 TEXT (0:80) REDEF TEXT_ CHAR (1) CALIGNED,
     1144    15279    3            2 REPLY,
     1145    15280    3              3 TYC                  UBIN WORD ALIGNED,
     1146    15281    3              3 LGTH                 UBIN WORD ALIGNED ;
     1147    15282
     1148    15283        /* Code */
     1149    15284
     1150    15285    3      CALL SETUP_BUFFER ALTRET (ERROR) ;
     1151    15286    3      CALL ISSUE_OPERATOR_MESSAGE ALTRET (ERROR) ;
     1152    15287    3      CALL PRINT_OPERATOR_REPLY ;
     1153    15288    3      RETURN ;
     1154    15289
     1155    15290    3   ERROR:
     1156    15291    3      RETURN ;
     1157    15292
     1158    15293        /* END PROCESS_MSG_REQ */
     1159    15294        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:47   
     1160    15295        /*I* NAME:         SETUP_BUFFER
     1161    15296             AUTHOR:       Scott S. Sheppard
     1162    15297             PURPOSE:      Sets up Message Buffer from User Input
     1163    15298             INTERFACE:    None called.
     1164    15299             PARAMETERS:   None passed.
     1165    15300             DATA:         CMD$ - input
     1166    15301                           BUFFER - output
     1167    15302             DESCRIPTION:  This procedure sets up the message buffer from
     1168    15303                           the   parse   control   blocks   returned   by
     1169    15304                           XUG$GETCMD.  The list of  blocks is pointed to
     1170    15305                           by  the  pointer  CMD$.  The  various parts of
     1171    15306                           BUFFER are set appropriately.
     1172    15307        */
     1173    15308        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:48   
     1174    15309    3   SETUP_BUFFER: PROC ALTRET ;
     1175    15310
     1176    15311    4      DCL OUTBLK$                    PTR ALIGNED ;
     1177    15312           %PARSE$OUT (STCLASS = BASED) ;
     1178    15357           %PARSE$SYM (STCLASS = BASED) ;
     1179    15395
     1180    15396        /* Code */
     1181    15397
     1182    15398    4      OUTBLK$ = CMD$ -> OUT$BLK.SUBLK$(0) ;
     1183    15399    4      IF OUTBLK$ -> OUT$SYM.COUNT < 81
     1184    15400    5      THEN DO ;
     1185    15401    5              BUFFER.LGTH = OUTBLK$ -> OUT$SYM.COUNT ;
     1186    15402    5              BUFFER.TEXT_ = OUTBLK$ -> OUT$SYM.TEXT ;
     1187    15403    5              IF BUFFER.TEXT(BUFFER.LGTH - 1) = '?'
     1188    15404    5              THEN BUFFER.REPLY_PENDING = %TRUE ;
     1189    15405    5              ELSE BUFFER.REPLY_PENDING = %FALSE ;
     1190    15406    5              BUFFER.REPLY = '0'O ;
     1191    15407    5              RETURN ;
     1192    15408    5           END /* THEN */ ;
     1193    15409    5      ELSE DO ;
     1194    15410    5              TOT_ERROR_CODE.ERR# = %E$MSGTOOLONG ;
     1195    15411    5              TOLTS_GETCMD.ERR_CODE = TOT_ERROR_CODE;
     1196    15412    5              CALL XUG$ERRMSG (TOLTS_GETCMD) ;
     1197    15413    5              ALTRETURN ;
     1198    15414    5           END /* ELSE */ ;
     1199    15415
     1200    15416    4   END SETUP_BUFFER ;
     1201    15417        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:49   
     1202    15418        /*I* NAME:         ISSUE_OPERATOR_MESSAGE
     1203    15419             AUTHOR:       Scott S. Sheppard
     1204    15420             PURPOSE:      Sends Message / Receives Reply
     1205    15421             INTERFACE:    M$KEYIN
     1206    15422                           XUG$ERRMSG
     1207    15423             PARAMETERS:   None passed.
     1208    15424             DATA:         BUFFER - input / output
     1209    15425             DESCRIPTION:  This procedure actually sends the message to
     1210    15426                           the operator's console.
     1211    15427        */
     1212    15428
     1213    15429    3   ISSUE_OPERATOR_MESSAGE: PROC ALTRET ;
     1214    15430
     1215    15431           %FPT_KEYIN (FPTN    = SEND_MSG,
     1216    15432                       OCTYPE  = DEVICE) ;
     1217    15451
     1218    15452        /* Code */
     1219    15453
     1220    15454    4      SEND_MSG.MESS_ = VECTOR (SUBSTR (BUFFER.TEXT_, 0, BUFFER.LGTH)) ;
     1221    15455    4      IF BUFFER.REPLY_PENDING
     1222    15456    4      THEN SEND_MSG.REPLY_ = VECTOR (BUFFER.TEXT_) ;
     1223    15457    4      ELSE SEND_MSG.REPLY_ = VECTOR (NIL) ;
     1224    15458    4      SEND_MSG.RESULTS_ = VECTOR (BUFFER.REPLY) ;
     1225    15459    4      CALL M$KEYIN (SEND_MSG) ALTRET (ERROR) ;
     1226    15460    4      RETURN ;
     1227    15461
     1228    15462    4   ERROR:
     1229    15463    4      TOLTS_GETCMD.ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR ;
     1230    15464    4      CALL XUG$ERRMSG (TOLTS_GETCMD);
     1231    15465    4      ALTRETURN ;
     1232    15466
     1233    15467    4   END ISSUE_OPERATOR_MESSAGE ;
     1234    15468        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:50   
     1235    15469        /*I* NAME:         PRINT_OPERATOR_REPLY
     1236    15470             AUTHOR:       Scott S. Sheppard
     1237    15471             PURPOSE:      Prints the operator's reply
     1238    15472             INTERFACE:    CONSOLE_OUT
     1239    15473             PARAMETERS:   None passed.
     1240    15474             DATA:         BUFFER - input
     1241    15475             DESCRIPTION:  This  procedure prints  the response  input by
     1242    15476                           the operator when one was requested.
     1243    15477        */
     1244    15478
     1245    15479    3   PRINT_OPERATOR_REPLY: PROC ;
     1246    15480
     1247    15481        /* Code */
     1248    15482
     1249    15483    4      IF BUFFER.REPLY_PENDING
     1250    15484    5      THEN DO ;
     1251    15485    5              CONSOLE_FPT.BUF_ =
     1252    15486    5                      VECTOR (SUBSTR (BUFFER.TEXT_, 0, BUFFER.REPLY.LGTH)) ;
     1253    15487    5              CALL CONSOLE_OUT ;
     1254    15488    5           END /* THEN */ ;
     1255    15489    4      ELSE /* No reply to be printed. */ ;
     1256    15490    4      RETURN ;
     1257    15491
     1258    15492    4   END PRINT_OPERATOR_REPLY ;
     1259    15493    3   END PROCESS_MSG_REQ ;
     1260    15494    2   END GET_TOLTS_REQUEST ;
     1261    15495        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:51   
     1262    15496        /*I* NAME:         CONSOLE_OUT
     1263    15497             INTERFACE:    M$WRITE
     1264    15498             INPUT:        CONSOLE_FPT.BUF_ frames message to be output
     1265    15499             OUTPUT:       User message written to terminal
     1266    15500                           TOT$ECP.IO.TYPE
     1267    15501             DESCRIPTION:  This procedure calls M$WRITE to output to the
     1268    15502                           message framed by CONSOLR_FPT.BUF_ to the user's
     1269    15503                           terminal.
     1270    15504        */
     1271    15505
     1272    15506    1   CONSOLE_OUT: PROC ;
     1273    15507
     1274    15508        /* Code */
     1275    15509
     1276    15510    2      TOT$ECP.IO.TYPE = %WRITE ;
     1277    15511    2      CALL M$WRITE (CONSOLE_FPT) ALTRET (CANT_WRITE);
     1278    15512    2      RETURN ;
     1279    15513
     1280    15514    2   CANT_WRITE:
     1281    15515    2      CONSOLE_FPT.V.DCB# = DCBNUM (M$ME);
     1282    15516    2      CONSOLE_FPT.BUF_ = VECTOR (NO_DO_MSG);
     1283    15517    2      CALL M$WRITE (CONSOLE_FPT) ALTRET (NO_HOPE);
     1284    15518    2   NO_HOPE:
     1285    15519    2      CALL M$ERR;
     1286    15520
     1287    15521    2   END CONSOLE_OUT;
     1288    15522        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:52   
     1289    15523        /*I* NAME:         PROMPT_OUT
     1290    15524             INTERFACE:    M$WRITE
     1291    15525             INPUT:        CONSOLE_FPT.BUF_ frames message to be output
     1292    15526             OUTPUT:       Simulated prompt written to the terminal
     1293    15527                           TOT$ECP.IO.TYPE
     1294    15528             DESCRIPTION:  This procedure calls M$WRITE to output to the
     1295    15529                           message framed by the vector in CONSOLE_FPT.BUF_
     1296    15530                           as a prompt with no carriage return, line feed
     1297    15531                           appended.
     1298    15532        */
     1299    15533
     1300    15534    1   PROMPT_OUT: PROC;
     1301    15535
     1302    15536           %FPT_WRITE (FPTN = SIMULATE_PROMPT,
     1303    15537                       DCB  = M$PROMPT_USER,
     1304    15538                       WAIT = YES,
     1305    15539                       BP   = YES) ;
     1306    15570
     1307    15571        /* Code */
     1308    15572
     1309    15573    2      TOT$ECP.IO.TYPE = %WRITE_READ ;
     1310    15574    2      SIMULATE_PROMPT.BUF_ = CONSOLE_FPT.BUF_ ;
     1311    15575    2      CALL M$WRITE (SIMULATE_PROMPT) ;
     1312    15576    2      RETURN;
     1313    15577
     1314    15578    2   END PROMPT_OUT;
     1315    15579        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:53   
     1316    15580        /*I*  NAME:        SET_SUBEXEC_PROMPT
     1317    15581              AUTHOR:      Scott S. Sheppard
     1318    15582              PURPOSE:     Sets Subexecutive prompt
     1319    15583              INTERFACE:   M$PROMPT
     1320    15584              INPUT:       B$JIT.MODE
     1321    15585              OUTPUT:      Prompt set to null
     1322    15586              SCRATCH:     No alteration side-effects.
     1323    15587              DESCRIPTION: This procedure sets the TOLTS prompt to the @
     1324    15588                           sign which is only used for a VFC character.
     1325    15589        */
     1326    15590
     1327    15591    1   SET_SUBEXEC_PROMPT: PROC ;
     1328    15592
     1329    15593    2      DCL SUBEXEC_PROMPT CHAR (1) STATIC CALIGNED INIT ('@') ;
     1330    15594           %FPT_PROMPT (FPTN   = SET_SUBEXEC_PROMPT,
     1331    15595                        PROMPT = SUBEXEC_PROMPT,
     1332    15596                        VFC    = YES) ;
     1333    15624
     1334    15625        /* Code */
     1335    15626
     1336    15627    2      IF B$JIT.MODE = %M_INT#
     1337    15628    2      THEN CALL M$PROMPT (SET_SUBEXEC_PROMPT) ;
     1338    15629    2      ELSE /* TOLTS is not being run interactively. */ ;
     1339    15630    2      RETURN ;
     1340    15631
     1341    15632    2   END SET_SUBEXEC_PROMPT ;
     1342    15633        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:54   
     1343    15634        /*I* NAME:         CONSOLE_IN
     1344    15635             INTERFACE:    M$WRITE
     1345    15636                           M$READ
     1346    15637             INPUT:        WRITE_FPT.BUF_ frames message to be output.
     1347    15638                           READ_FPT.BUF_ frames read buffer.
     1348    15639             OUTPUT:       User message to terminal.
     1349    15640             DESCRIPTION:  This subroutine simulates the GCOS Write/Read
     1350    15641                           operation to the operator's console.  Calls
     1351    15642                           M$WRITE to output to the terminal the message
     1352    15643                           framed by the vector in WRITE_FPT.BUF_ and then
     1353    15644                           M$READ to read the user input into the buffer
     1354    15645                           framed by READ_FPT.BUF_.  Does not return any
     1355    15646                           any status to the user.
     1356    15647        */
     1357    15648
     1358    15649    1   CONSOLE_IN: PROC ;
     1359    15650
     1360    15651
     1361    15652        /* Code */
     1362    15653
     1363    15654    3      DO INHIBIT;
     1364    15655    3         TOT$ECP.ISC.READ_PENDING = %TRUE ;
     1365    15656    3         CALL M$READ (READ_IO) ;
     1366    15657    3         TOT$ECP.ISC.READ_PENDING = %FALSE ;
     1367    15658    3      END /* INHIBIT */ ;
     1368    15659    2      RETURN ;
     1369    15660
     1370    15661    2   END CONSOLE_IN;
     1371    15662        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:55   
     1372    15663        /*I* NAME:         PROCESS_EXIT_REQ
     1373    15664             INTERFACE:    M$TIME
     1374    15665                           CONSOLE_OUT
     1375    15666                           M$EXIT
     1376    15667                           CONCAT function
     1377    15668             INPUT:        TOT$ECP.SUBEXEC.CURRENT
     1378    15669                           TOT$TOLTS.LINK_VERSION
     1379    15670             OUTPUT:       TOLTS termination message to terminal.
     1380    15671                           All test page files closed.
     1381    15672                           Exit via CP6.
     1382    15673             DESCRIPTION:  This procedure checks the current subexecutive to
     1383    15674                           ensure  that it is not  MOLTS.   MOLTS can not be
     1384    15675                           ended while test pages are still running.If there
     1385    15676                           is  NO subexecutive or one other than MOLTS,  the
     1386    15677                           TOLTS log off  message is issued  and  M$EXIT  is
     1387    15678                           called to terminate TOLTS.
     1388    15679        */
     1389    15680        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:56   
     1390    15681    1   PROCESS_EXIT_REQ: PROC;
     1391    15682
     1392    15683    2      DCL 1 OFF_DATE STATIC,
     1393    15684    2            2 *     CHAR (5) CALIGNED INIT (' off '),
     1394    15685    2            2 DATE  CHAR (8) CALIGNED ;
     1395    15686    2      DCL OFF_DATE_ REDEF OFF_DATE CHAR (13) CALIGNED ;
     1396    15687    2      DCL 1 AT_TIME STATIC,
     1397    15688    2            2 *     CHAR (4) CALIGNED INIT (' at '),
     1398    15689    2            2 TIME  CHAR (11) CALIGNED ;
     1399    15690    2      DCL AT_TIME_ REDEF AT_TIME CHAR (15) CALIGNED ;
     1400    15691    2      DCL 1 LINK_DATE STATIC,
     1401    15692    2            2 *     CHAR (1) CALIGNED INIT (' '),
     1402    15693    2            2 DATE  CHAR (6) CALIGNED ;
     1403    15694    2      DCL LINK_DATE_ REDEF LINK_DATE CHAR (7) CALIGNED ;
     1404    15695    2      DCL OUTPUT_BUFFER CHAR (80) STATIC CALIGNED ;
     1405    15696           %FPT_TIME (FPTN   = STOP_TOLTS,
     1406    15697                      SOURCE = CLOCK,
     1407    15698                      DEST   = LOCAL,
     1408    15699                      DATE   = OFF_DATE.DATE,
     1409    15700                      TIME   = AT_TIME.TIME) ;
     1410    15719           %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:57   
     1411    15720        /* Code */
     1412    15721
     1413    15722    2      IF TOT$ECP.SUBEXEC.CURRENT = %MOLTS
     1414    15723    3      THEN DO ;
     1415    15724    3              TOT_ERROR_CODE.ERR# = %E$NOTYET ;
     1416    15725    3              TOLTS_GETCMD.ERR_CODE = TOT_ERROR_CODE;
     1417    15726    3              TOLTS_GETCMD.FLGLEV# = 2;
     1418    15727    3              CALL XUG$ERRMSG (TOLTS_GETCMD);
     1419    15728    3              RETURN ;
     1420    15729    3           END /* THEN */ ;
     1421    15730    3      ELSE DO ;
     1422    15731    3              CALL M$TIME (STOP_TOLTS) ;
     1423    15732    3              LINK_DATE.DATE = TOT$TOLTS.LINK_DATE.ASCII ;
     1424    15733    3              CALL CONCAT (OUTPUT_BUFFER,
     1425    15734    3                      '***TOLTS Executive Version ',
     1426    15735    3                      SUBSTR (TOT$TOLTS.LINK_VERSION.TEXT,0,
     1427    15736    3                      TOT$TOLTS.LINK_VERSION.LGTH),
     1428    15737    3                      LINK_DATE_,
     1429    15738    3                      OFF_DATE_,
     1430    15739    3                      SUBSTR (AT_TIME_, 0, 9)) ;
     1431    15740    3              CONSOLE_FPT.BUF_ = VECTOR (OUTPUT_BUFFER) ;
     1432    15741    3              CALL CONSOLE_OUT;
     1433    15742    3              CALL M$EXIT ;
     1434    15743    3           END /* ELSE */ ;
     1435    15744
     1436    15745    2   END PROCESS_EXIT_REQ;
     1437    15746    1   END TOT$ROOT;

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:58   
--  Include file information  --

   XU_PERR_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   XUG_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   TO_PERR_C.:E05TOU  is referenced.
   TOT_RQSTS_E.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOT$ROOT.

   Procedure TOT$ROOT requires 1035 words for executable code.
   Procedure TOT$ROOT requires 48 words of local(AUTO) storage.

    No errors detected in file TOT$ROOT.:E05TSI    .

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:59   

 Object Unit name= TOT$ROOT                                   File name= TOT$ROOT.:E05TOU
 UTS= JUL 30 '97 06:37:19.84 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$SI
    2   DCB   even  none    98    142  M$PROMPT_USER
    3   DCB   even  none     0      0  M$DO
    4   DCB   even  none     0      0  M$ME
    5   Data  even  none   240    360  TOT$ROOT
    6  RoData even  UTS     24     30  TOT$ROOT
    7   Proc  even  none  1035   2013  TOT$ROOT
    8  RoData even  none    32     40  TOT$ROOT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     7      0   yes            yes      Std        0  TOT$ROOT
     7     22                  yes      Std        0  TOT$CONSOLE_OUT
     7     27                  yes      Std        0  TOT$PROMPT_OUT
     7     34                  yes      Std        0  TOT$WRITE_READ_IO
     7     43                  yes      Std        0  TOT$CONSOLE_IN
     7     50                  yes      Std        0  TOT$NEXT_TEST_REQ
     7     55                  yes      Std        0  TOT$RESTART
     7     62                  yes      Std        0  TOT$EXIT
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:60   

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    5     26  CONSOLE_FPT                        5     42  READ_IO
    5     60  TOT$ECP

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 XUG$CLOSE_DCBS
 yes     yes           Std       1 XUG$ERRMSG
 yes     yes           Std       1 XUG$GETCMD
         yes           Std       0 TOS$PACT
         yes           Std       3 TOD$DISPATCHER
         yes           Std       3 TOT$ASCII_BCD
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AUNWIND

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$SI                                  M$PROMPT_USER
     M$DO                                  M$ME                                  B$JIT$
     B$TCB$                                TOD$QUEUE                             TOF$BAR
     TOQ$DCP                               TOS$COMWD                             TOLTS_GETCMD
     TOT$DMC                               TOT$IFAD                              TOT$REINITIALIZE
     TOT$TOLTS                             B_VECTNIL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:61   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:62   


        1        1        /*M* TOT$ROOT     Total On-Line Testing System ROOT program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOT$ROOT
       12       12             AUTHORS:      Curtis D. Andes
       13       13                           Carl J. Eichert
       14       14                           Scott S. Sheppard
       15       15             PURPOSE:      Provide TOLTS service functions.
       16       16             DESCRIPTION:  1.  Opens terminal for i/o with privs
       17       17                           2.  Establishes condtion handling
       18       18                           3.  Sets the Base Address Register
       19       19                           4.  Gives TOLTS log on salutation
       20       20                           5.  Frees any dynamic pages held by TOLTS
       21       21                           6.  Initializes test request information
       22       22                           7.  Shuts down EISPACT if open
       23       23                           8.  Gets the first TOLTS request
       24       24                           9.  Handles any asynchronous TOLTS requests
       25       25             REFERENCE:   CP-6 Release E0E0
       26       26             LAST UPDATE: 87-09-22
       27       27        */
       28       28        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:63   
       29       29        /*F*  NAME:        TOT$ROOT
       30       30              DESCRIPTION: Procedure Nesting Hierarchy
       31       31
       32       32              TOT$ROOT: procedure
       33       33              TOT$CONSOLE_OUT: entry
       34       34              TOT$PROMPT_OUT: entry
       35       35              TOT$WRITE_READ_IO: entry
       36       36              TOT$CONSOLE_IN: entry
       37       37              TOT$NEXT_TEST_REQ: entry
       38       38              TOT$RESTART: entry
       39       39              TOT$EXIT: entry
       40       40
       41       41                FREE_DYNAMIC_PAGES: procedure
       42       42                FREE_EXCESS_DATA_SEGMENTS: procedure
       43       43                   FREE_SEG: procedure
       44       44                SET_BAR: procedure
       45       45                REQUEST_INITIAL: procedure
       46       46                GET_TOLTS_REQUEST: procedure
       47       47                   SELECT_TOLTS_REQUEST: procedure
       48       48                   SET_DEBUG_FLAGS: procedure
       49       49                   REBUILD_TEST_REQ: procedure
       50       50                   PROCESS_TEST_REQ: procedure
       51       51                      SET_SUBEXEC: procedure
       52       52                      CHECK_SUBEXEC: procedure ALTRET
       53       53                      CHECK_DEBUG: procedure ALTRET
       54       54                      BUILD_INIT_SUBEXEC: procedure
       55       55                      BUILD_ISC_WRITE: procedure
       56       56                   PROCESS_MSG_REQ: procedure
       57       57                      SETUP_BUFFER: procedure
       58       58                      ISSUE_OPERATOR_MESSAGE: procedure
       59       59                      PRINT_OPERATOR_REPLY: procedure
       60       60                CONSOLE_OUT: procedure
       61       61                PROMPT_OUT: procedure
       62       62                SET_SUBEXEC_PROMPT: procedure
       63       63                CONSOLE_IN: procedure
       64       64                PROCESS_EXIT_REQ: procedure
       65       65        */
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:64   
       66       66
       67       67        TOT$ROOT: PROC ;

     67  7 000000   000000 700200 xent  TOT$ROOT     TSX0  ! X66_AUTO_0
         7 000001   000060 000000                    ZERO    48,0

       68       68
       69       69        /* Include Files */
       70       70
       71       71           %INCLUDE B$JIT ;
       72      674           %INCLUDE CP_6;
       73     6233           %INCLUDE CP_6_SUBS;
       74     6773           %INCLUDE TOT_TOLTS_M ;
       75     7891           %INCLUDE B_ERRORS_C ;
       76     9018           %INCLUDE TOT_RQSTS_E ;
       77     9060           %INCLUDE TO_PERR_C ;
       78     9645           %INCLUDE XUH_MACRO_C ;
       79     9729           %INCLUDE XUG_ENTRY ;
       80     9760           %INCLUDE XU_MACRO_C ;
       81    12866           %INCLUDE XU_PERR_C ;
       82    13057
       83    13058        /* Data Control Blocks */
       84    13059
       85    13060    1      DCL M$SI                       DCB ;
       86    13061           %M$DCB (DCBN = M$PROMPT_USER,
       87    13062                   ASN  = DEVICE,
       88    13063                   DVFC = '@',
       89    13064                   FUN  = UPDATE,
       90    13065                   ORG  = TERMINAL) ;
       91    13139    1      DCL M$DO                       DCB ;
       92    13140    1      DCL M$ME                       DCB ;
       93    13141           %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:65   
       94    13142        /* Variables */
       95    13143
       96    13144           %B$TCB;
       97    13147           %B$ALT ;
       98    13155           %F$DCB ;
       99    13212    1      DCL REQUEST_TYPE         UBIN WORD ;
      100    13213    1      DCL SERVICE_CODE         UBIN HALF ;
      101    13214    1      DCL QUEUE_ENTRY          (0:2) UBIN WORD ;
      102    13215    1      DCL 1 QUEUE_ENTRY_BCD REDEF QUEUE_ENTRY,
      103    13216    1            2 TEST_REQUEST,
      104    13217    1              3 *      (0:10) UBIN (6) UNAL,
      105    13218    1              3 *      BIT (6) UNAL,
      106    13219    1            2 TEST_REQ_ REDEF TEST_REQUEST BIT (72) UNAL,
      107    13220    1            2 *        BIT (36) UNAL;
      108    13221    1      DCL 1 TEST_REQ_BCD STATIC ALIGNED,
      109    13222    1            2 TEST_BCD    (0:10) UBIN (6) UNAL,
      110    13223    1            2 TEST_ZEROS  BIT (6) INIT ('000000'B) UNAL;
      111    13224    1      DCL NO_DO_MSG   CHAR (0) STATIC CALIGNED
      112    13225    1          INIT (
             13225              '**** Experiencing difficulties communicating through M$DO -- TOLTS aborting'
             13225                   );
      113    13226           %VLP_ERRCODE (FPTN = TOT_ERROR_CODE,
      114    13227                         FCG  = 'TO',
      115    13228                         MID  = 'T',
      116    13229                         SEV  = 4) ;
      117    13274           %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:66   
      118    13275        /* External Variables */
      119    13276
      120    13277    1      DCL B$JIT$          PTR SYMREF;
      121    13278    1      DCL B$TCB$          PTR SYMREF ;
      122    13279           %FPT_WRITE (FPTN    = CONSOLE_FPT,
      123    13280                       DCB     = M$DO,
      124    13281                       STCLASS = "STATIC SYMDEF",
      125    13282                       WAIT    = YES) ;
      126    13313           %FPT_READ (FPTN    = READ_IO,
      127    13314                      DCB     = M$SI,
      128    13315                      WAIT    = YES,
      129    13316                      STCLASS = "STATIC SYMDEF") ;
      130    13355           %TOD$QUEUE (STCLASS = SYMREF) ;
      131    13382           %TOF$BAR (STCLASS = SYMREF) ;
      132    13405           %TOM$SEGTBL (STCLASS = BASED) ;
      133    13427           %TOM$SEGTBLS (STCLASS = "BASED (TOT$DMC.TOM$SEGTBLS.PTR$)") ;
      134    13439           %TOO$IO_BUFFER (STCLASS = "BASED (TOT$DMC.TOO$IO_BUFFER.PTR$)") ;
      135    13487           %TOP$TCP (STCLASS = "BASED (TOT$DMC.TOP$TCP.PTR$)") ;
      136    13575           %TOQ$DCP (STCLASS = SYMREF) ;
      137    13607    1      DCL TOS$COMWD       BIT (36) SYMREF ALIGNED ;
      138    13608           %XUG_GETCMD (STCLASS = SYMREF,
      139    13609                        NAME    = TOLTS_GETCMD);
      140    13947           %TOT$DMC (STCLASS = SYMREF) ;
      141    13981           %TOT$ECP (STCLASS = "STATIC SYMDEF") ;
      142    14030           %TOT$IFAD (STCLASS = SYMREF) ;
      143    14047    1      DCL TOT$REINITIALIZE REMEMBER SYMREF DALIGNED ;
      144    14048           %TOT$TOLTS (STCLASS = SYMREF) ;
      145    14069
      146    14070        /* External Entry Points */
      147    14071
      148    14072    1      DCL TOD$DISPATCHER    ENTRY(3);
      149    14073    1      DCL TOT$ASCII_BCD     ENTRY(3);
      150    14074    1      DCL TOS$PACT          ENTRY ;
      151    14075           %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:67   
      152    14076        /*D* NAME:         TOT$ROOT
      153    14077             INTERFACE:    SYSTEM_INITIAL      XUG$CLOSE_DCBS
      154    14078                           EST_COND_HANDLERS   PROCESS_FIRST_TEST_REQUEST
      155    14079                           SET_BAR             TOD$DISPATCHER
      156    14080                           SYSTEM_START_UP     TOF$REMEMBER_SFR
      157    14081                           FREE_DYNAMIC_PAGES  TOF$REMEMBER_SISR
      158    14082                           REQUEST_INITIAL
      159    14083             DESCRIPTION:  This  entry  point  in  this  module is called
      160    14084                           by TOT$MAIN   shortly  after TOLTS is invoked.
      161    14085                           No  parameters are passed  or required.  TOLTS
      162    14086                           is  initialized  and  the  first  test request
      163    14087                           accepted  from the terminal.   This request is
      164    14088                           passed  on to  the requested  subexec which is
      165    14089                           then put into execution.
      166    14090
      167    14091                           PROCESS_FIRST_TEST_REQUEST builds as the first
      168    14092                           entry  in the  dispatcher queue  (a request to
      169    14093                           initialize  a  subexec).  It  also  stores the
      170    14094                           actual  test request in  the dispatcher queue.
      171    14095                           The subexec is put into execution by a call to
      172    14096                           TOD$DISPATCHER   which   services   the  first
      173    14097                           dispatcher queue entry.
      174    14098
      175    14099                           The   dispatcher  transfers   control  to  the
      176    14100                           subexec  which subsequently does  a MME GEINOS
      177    14101                           Interslave Read to get the first test request.
      178    14102                           Thereafter,  this  portion  of  code  is never
      179    14103                           entered.
      180    14104
      181    14105                           Note:   This  transfer  into  the subexec is a
      182    14106                           straightforward "CALL" which will leave behind
      183    14107                           one  auto frame  for TOT$ROOT  for the life of
      184    14108                           TOLTS.  This is not a problem.
      185    14109        */
      186    14110        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:68   
      187    14111        /* **************
      188    14112           * TOLTS ROOT *
      189    14113           ************** */
      190    14114
      191    14115    1      TOLTS_GETCMD.DCB_PARAM# = DCBNUM (NIL);

  14115  7 000002   000014 450000 xsym               STZ     TOLTS_GETCMD+12

      192    14116    1      CALL XUG$CLOSE_DCBS (TOLTS_GETCMD);

  14116  7 000003   000000 630400 8                  EPPR0   0
         7 000004   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 000005   000000 701000 xent               TSX1    XUG$CLOSE_DCBS
         7 000006   000000 011000                    NOP     0

      193    14117    1      CALL FREE_DYNAMIC_PAGES ;

  14117  7 000007   000067 701000 7                  TSX1    FREE_DYNAMIC_PAGES
         7 000010   000000 011000                    NOP     0

      194    14118    1      CALL FREE_EXCESS_DATA_SEGMENTS ;

  14118  7 000011   000115 701000 7                  TSX1    FREE_EXCESS_DATA_SEGMENTS
         7 000012   000000 011000                    NOP     0

      195    14119    1      CALL SET_BAR ;

  14119  7 000013   000223 701000 7                  TSX1    SET_BAR
         7 000014   000000 011000                    NOP     0

      196    14120    1      CALL REQUEST_INITIAL ;

  14120  7 000015   000237 701000 7                  TSX1    REQUEST_INITIAL
         7 000016   000000 011000                    NOP     0

      197    14121    1      CALL GET_TOLTS_REQUEST ;

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:69   
  14121  7 000017   000266 701000 7                  TSX1    GET_TOLTS_REQUEST
         7 000020   000000 011000                    NOP     0
         7 000021   000024 710000 7                  TRA     s:14146

      198    14122
      199    14123        /* ******************
      200    14124           * END TOLTS ROOT *
      201    14125           ****************** */
      202    14126        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:70   
      203    14127        /*D* NAME:         TOT$CONSOLE_OUT
      204    14128             ENTRY:
      205    14129             INTERFACE:    CONSOLE_OUT
      206    14130             DESCRIPTION:  This entry calls  an internal subroutine to do
      207    14131                           a  write  to  the  terminal.  The  caller must
      208    14132                           invoke  the  macro  FPT_WRITE  with  the  name
      209    14133                           CONSOLE_FPT  with the SYMREF  attribute in his
      210    14134                           routine.      On    calling     this    entry,
      211    14135                           CONSOLE_FPT.BUF_ must frame  the message to be
      212    14136                           output.  On normal termination of the M$WRITE,
      213    14137                           return is  made to the caller  with no status;
      214    14138                           if   there  is  an   ALTRET  on  the  M$WRITE,
      215    14139                           TOX$ALTRET is called to quit.
      216    14140
      217    14141                           All terminal I/O is "wait".
      218    14142        */
      219    14143
      220    14144    1   TOT$CONSOLE_OUT: ENTRY;

  14144  7 000022   000000 700200 xent  TOT$CONSOLE* TSX0  ! X66_AUTO_0
         7 000023   000060 000000                    ZERO    48,0

      221    14145
      222    14146    1      CALL CONSOLE_OUT;

  14146  7 000024   001626 701000 7                  TSX1    CONSOLE_OUT
         7 000025   000000 011000                    NOP     0

      223    14147    1      RETURN;

  14147  7 000026   000000 702200 xent               TSX2  ! X66_ARET

      224    14148
      225    14149        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:71   
      226    14150        /*D* NAME:         TOT$PROMPT_OUT
      227    14151             ENTRY:
      228    14152             INTERFACE:    PROMPT_OUT
      229    14153             DESCRIPTION:  This entry calls  an internal subroutine to do
      230    14154                           a  write  to  the  terminal.  The  caller must
      231    14155                           invoke  the  macro  FPT_WRITE  with  the  name
      232    14156                           CONSOLE_FPT  with the SYMREF  attribute in his
      233    14157                           routine.      On    calling     this    entry,
      234    14158                           CONSOLE_FPT.BUF_ must frame  the message to be
      235    14159                           output. The framed message is then output as a
      236    14160                           simulated prompt,   i.e.   no carriage return,
      237    14161                           line feed is appended to the message.
      238    14162                           All terminal i/o is "wait".
      239    14163        */
      240    14164
      241    14165    1   TOT$PROMPT_OUT: ENTRY ;

  14165  7 000027   000000 700200 xent  TOT$PROMPT_* TSX0  ! X66_AUTO_0
         7 000030   000060 000000                    ZERO    48,0

      242    14166
      243    14167    1      CALL PROMPT_OUT;

  14167  7 000031   001654 701000 7                  TSX1    PROMPT_OUT
         7 000032   000000 011000                    NOP     0

      244    14168    1      RETURN;

  14168  7 000033   000000 702200 xent               TSX2  ! X66_ARET

      245    14169
      246    14170        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:72   
      247    14171        /*D* NAME:         TOT$WRITE_READ_IO
      248    14172             ENTRY:
      249    14173             INTERFACE:    SET_SUBEXEC_PROMPT
      250    14174                           CONSOLE_IN
      251    14175             DESCRIPTION:  Calls  an  internal  subroutine  to do a write
      252    14176                           immediately followed by a read to simulate the
      253    14177                           GCOS  write-read function  to a  console.  The
      254    14178                           caller  must invoke  the macros  FPT_WRITE and
      255    14179                           FPT_READ with the names CONSOLE_FPTand READ_IO
      256    14180                           with the SYMREF  attribute in his routine.  On
      257    14181                           calling  this entry, CONSOLE_FPT.BUF_ must frame
      258    14182                           the  message to  be output,  and READ_FPT.BUF_
      259    14183                           must  frame  the  area  to  be  read into.  On
      260    14184                           normal  termination  return  is  made  to  the
      261    14185                           caller  without any  status.  Any  ALTRET will
      262    14186                           terminate TOLTS.
      263    14187                           All terminal I/O is "wait".
      264    14188        */
      265    14189
      266    14190    1   TOT$WRITE_READ_IO: ENTRY;

  14190  7 000034   000000 700200 xent  TOT$WRITE_R* TSX0  ! X66_AUTO_0
         7 000035   000060 000000                    ZERO    48,0

      267    14191
      268    14192    1      CALL SET_SUBEXEC_PROMPT ;

  14192  7 000036   001666 701000 7                  TSX1    SET_SUBEXEC_PROMPT
         7 000037   000000 011000                    NOP     0

      269    14193    1      CALL CONSOLE_IN;

  14193  7 000040   001701 701000 7                  TSX1    CONSOLE_IN
         7 000041   000000 011000                    NOP     0

      270    14194    1      RETURN;

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:73   
  14194  7 000042   000000 702200 xent               TSX2  ! X66_ARET

      271    14195
      272    14196        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:74   
      273    14197        /*D* NAME:         TOT$CONSOLE_IN
      274    14198             ENTRY:
      275    14199             INTERFACE:    CONSOLE_IN
      276    14200             DESCRIPTION:  This entry points calls the TOLTS user input
      277    14201                           routine,  CONSOLE_IN,  so that other   TOLTS
      278    14202                           modules can obtain data from the user.
      279    14203        */
      280    14204
      281    14205    1   TOT$CONSOLE_IN: ENTRY ;

  14205  7 000043   000000 700200 xent  TOT$CONSOLE* TSX0  ! X66_AUTO_0
         7 000044   000060 000000                    ZERO    48,0

      282    14206
      283    14207    1      CALL CONSOLE_IN ;

  14207  7 000045   001701 701000 7                  TSX1    CONSOLE_IN
         7 000046   000000 011000                    NOP     0

      284    14208    1      RETURN ;

  14208  7 000047   000000 702200 xent               TSX2  ! X66_ARET

      285    14209
      286    14210        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:75   
      287    14211        /*D* NAME:         TOT$NEXT_TEST_REQ
      288    14212             ENTRY:
      289    14213             INTERFACE:    GET_NEXT_TEST_REQUEST
      290    14214             DESCRIPTION:  Called  by  the  Break  Handler when user hits
      291    14215                           "break"  key on  terminal.  Calls  an internal
      292    14216                           subroutine  which issues the  prompt (???) and
      293    14217                           reads the test request in and stores it in the
      294    14218                           dispatcher queue for later servicing.
      295    14219                           queue for later servicing.
      296    14220        */
      297    14221
      298    14222    1   TOT$NEXT_TEST_REQ: ENTRY;

  14222  7 000050   000000 700200 xent  TOT$NEXT_TE* TSX0  ! X66_AUTO_0
         7 000051   000060 000000                    ZERO    48,0

      299    14223
      300    14224    1      CALL GET_TOLTS_REQUEST ;

  14224  7 000052   000266 701000 7                  TSX1    GET_TOLTS_REQUEST
         7 000053   000000 011000                    NOP     0

      301    14225    1      RETURN;

  14225  7 000054   000000 702200 xent               TSX2  ! X66_ARET

      302    14226
      303    14227        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:76   
      304    14228        /*D* NAME:         TOT$RESTART
      305    14229             ENTRY:
      306    14230             INTERFACE:    None.
      307    14231             DESCRIPTION:  This entry points is  called when a subexec no
      308    14232                           longer has  anything to do because of an error
      309    14233                           or a normal termination.      This entry point
      310    14234                           unwinds back to accept another test request.
      311    14235        */
      312    14236
      313    14237    1   TOT$RESTART: ENTRY;

  14237  7 000055   000000 700200 xent  TOT$RESTART  TSX0  ! X66_AUTO_0
         7 000056   000060 000000                    ZERO    48,0

      314    14238
      315    14239    1      UNWIND TO TOT$REINITIALIZE ;

  14239  7 000057   000000 237200 xsym               LDAQ  ! TOT$REINITIALIZE
         7 000060   000000 700200 xent               TSX0  ! X66_AUNWIND
         7 000061   000000 000200                    ZERO    0,128

      316    14240
      317    14241        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:77   
      318    14242        /*D* NAME:         TOT$EXIT
      319    14243             ENTRY:
      320    14244             INTERFACE:    PROCESS_EXIT_REQ
      321    14245             DESCRIPTION:  This entry points is  called when TOLTS is to
      322    14246                           be  terminated by an  event  other  than  the
      323    14247                           entering of the END request.
      324    14248        */
      325    14249
      326    14250    1   TOT$EXIT: ENTRY;

  14250  7 000062   000000 700200 xent  TOT$EXIT     TSX0  ! X66_AUTO_0
         7 000063   000060 000000                    ZERO    48,0

      327    14251
      328    14252    1      CALL PROCESS_EXIT_REQ ;

  14252  7 000064   001713 701000 7                  TSX1    PROCESS_EXIT_REQ
         7 000065   000000 011000                    NOP     0
         7 000066   002012 710000 7                  TRA     s:15746

      329    14253
      330    14254        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:78   
      331    14255        /*I*  NAME:        FREE_DYNAMIC_PAGES
      332    14256              AUTHOR:      Scott S. Sheppard
      333    14257              PURPOSE:     Release Pages of Memory
      334    14258              INTERFACE:   M$FDP Monitor Service
      335    14259                           XUG$ERRMSG Library Service
      336    14260                           M$ERR Monitor Service
      337    14261              INPUT:       TOT$ECP.DYNAMIC_PAGE_COUNT - dynamic page count
      338    14262              OUTPUT:      Pages released back to CP-6.
      339    14263              SCRATCH:     No alteration side-effects.
      340    14264              DESCRIPTION: This procedure frees any dynamic pages held by
      341    14265                           TOLTS and resets the base address register.
      342    14266        */
      343    14267
      344    14268    1   FREE_DYNAMIC_PAGES: PROC ;

  14268  7 000067   200010 741300       FREE_DYNAMI* STX1  ! QUEUE_ENTRY+3,,AUTO

      345    14269
      346    14270           %FPT_FDP (FPTN = REL_TOLTS_PGS) ;
      347    14284
      348    14285        /* Code */
      349    14286
      350    14287    2      IF TOT$ECP.DYNAMIC_PAGE_COUNT = 0

  14287  7 000070   000066 235000 5                  LDA     TOT$ECP+6
         7 000071   000077 600000 7                  TZE     s:14293

      351    14288    2      THEN /* TOLTS currently does not have any dynamically acquired pages. */ ;
      352    14289    3      ELSE DO ;

      353    14290    3              REL_TOLTS_PGS.V.PAGES# = TOT$ECP.DYNAMIC_PAGE_COUNT ;

  14290  7 000072   000102 755000 5                  STA     REL_TOLTS_PGS+4

      354    14291    3              CALL M$FDP (REL_TOLTS_PGS) ALTRET (RELEASE_ERROR) ;

  14291  7 000073   000076 630400 5                  EPPR0   REL_TOLTS_PGS
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:79   
         7 000074   430004 713400                    CLIMB   alt,+12292
         7 000075   400400 401760                    pmme    nvectors=2
         7 000076   000101 702000 7                  TSX2    RELEASE_ERROR

      355    14292    3           END /* ELSE */ ;

      356    14293    2      RETURN ;

  14293  7 000077   200010 221300                    LDX1  ! QUEUE_ENTRY+3,,AUTO
         7 000100   000001 702211                    TSX2  ! 1,X1

      357    14294
      358    14295    2   RELEASE_ERROR:
      359    14296    2      TOLTS_GETCMD.ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;

  14296  7 000101   000000 470400 xsym  RELEASE_ERR* LDP0    B$TCB$
         7 000102   000000 471500                    LDP1    0,,PR0
         7 000103   100102 236100                    LDQ     66,,PR1
         7 000104   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      360    14297    2      CALL XUG$ERRMSG (TOLTS_GETCMD);

  14297  7 000105   000000 630400 8                  EPPR0   0
         7 000106   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 000107   000000 701000 xent               TSX1    XUG$ERRMSG
         7 000110   000000 011000                    NOP     0

      361    14298    2      CALL M$ERR ;

  14298  7 000111   000002 713400                    CLIMB   err
         7 000112   000000 401760                    pmme    nvectors=0

      362    14299
      363    14300    2   END FREE_DYNAMIC_PAGES ;

  14300  7 000113   200010 221300                    LDX1  ! QUEUE_ENTRY+3,,AUTO
         7 000114   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:80   

      364    14301        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:81   
      365    14302        /*I* NAME:         FREE_EXCESS_DATA_SEGMENTS
      366    14303             AUTHOR:       Scott S. Sheppard
      367    14304             PURPOSE:      releases unneeded memory
      368    14305             INTERFACE:    FREE_SEG
      369    14306                           ADDR function
      370    14307             PARAMETERS:   None passed.
      371    14308             DATA:         TOT$DMC.TOM$SEGTBLS.PTR$ - input / output
      372    14309                           TOM$SEGTBLS - input (memory released)
      373    14310                           TOM$SEGTBL - input (memory released)
      374    14311             DESCRIPTION:  This   procedure  releases   memory  for  data
      375    14312                           segments which are  no longer needed by TOLTS.
      376    14313                           During  the processing  of NIO  test requests,
      377    14314                           data  segments  are  allocated  to  hold  test
      378    14315                           images loaded from  the deckfile so these test
      379    14316                           images  may  be  accessed  frequently,  in  an
      380    14317                           efficient  manner.  When  MOLTS  ends (the NIO
      381    14318                           test  terminates), any  existing data segments
      382    14319                           are useless. This  procedure steps through the
      383    14320                           table  of segments  and releases  any that are
      384    14321                           present. Since the table itself is only needed
      385    14322                           for  NIO requests,  it too  is kept  in a data
      386    14323                           segment and may be released.
      387    14324        */
      388    14325        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:82   
      389    14326    1   FREE_EXCESS_DATA_SEGMENTS: PROC ;

  14326  7 000115   200010 741300       FREE_EXCESS* STX1  ! QUEUE_ENTRY+3,,AUTO

      390    14327
      391    14328    2      DCL TCX      UBIN WORD ALIGNED ;
      392    14329    2      DCL STX      UBIN WORD ALIGNED ;
      393    14330    2      DCL SEGTBL$  PTR ALIGNED ;
      394    14331
      395    14332        /* Code */
      396    14333
      397    14334    2      IF TOT$DMC.TOM$SEGTBLS.PTR$ = ADDR (NIL)

  14334  7 000116   000007 236000 xsym               LDQ     TOT$DMC+7
         7 000117   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 000120   000170 600000 7                  TZE     s:14352

      398    14335    2      THEN /* no table of segments to free */ ;
      399    14336    3      ELSE DO ;

      400    14337                   /* step through all 8 possible test requests */
      401    14338    4              DO TCX = 0 TO 7 ;

  14338  7 000121   200011 450100                    STZ     TCX,,AUTO

      402    14339                      /* point to the set of segments for a test request */
      403    14340    4                 SEGTBL$ = ADDR (TOM$SEGTBLS(TCX)) ;

  14340  7 000122   200011 236100                    LDQ     TCX,,AUTO
         7 000123   000034 402003                    MPY     28,DU
         7 000124   000007 036000 xsym               ADLQ    TOT$DMC+7
         7 000125   200013 756100                    STQ     SEGTBL$,,AUTO

      404    14341                      /* step through all 7 possible segments */
      405    14342    5                 DO STX = 0 TO %(MAX_SEGS - 1) ;

  14342  7 000126   200012 450100                    STZ     STX,,AUTO
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:83   

      406    14343    5                    IF SEGTBL$ -> TOM$SEGTBL(STX) = '0'B

  14343  7 000127   200012 235100                    LDA     STX,,AUTO
         7 000130   000004 735000                    ALS     4
         7 000131   200013 470500                    LDP0    SEGTBL$,,AUTO
         7 000132   000000 106505                    CMPC    fill='000'O
         7 000133   000000 000020                    ADSC9   0,A,PR0                  cn=0,n=16
         7 000134   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         7 000135   000146 600000 7                  TZE     s:14346

      407    14344    5                    THEN /* no segment allocated for this slot */ ;
      408    14345    5                    ELSE CALL FREE_SEG (%SEG_LGTH, SEGTBL$ -> TOM$SEGTBL.V(STX)) ;

  14345  7 000136   200012 236100                    LDQ     STX,,AUTO
         7 000137   000024 736000                    QLS     20
         7 000140   200013 036100                    ADLQ    SEGTBL$,,AUTO
         7 000141   200016 756100                    STQ     BUFFER+1,,AUTO
         7 000142   000002 236000 8                  LDQ     2
         7 000143   200015 756100                    STQ     SEGTBL$+2,,AUTO
         7 000144   000172 701000 7                  TSX1    FREE_SEG
         7 000145   000000 011000                    NOP     0

      409    14346    5                 END /* DO */ ;

  14346  7 000146   200012 235100                    LDA     STX,,AUTO
         7 000147   000001 035007                    ADLA    1,DL
         7 000150   200012 755100                    STA     STX,,AUTO
         7 000151   000007 115007                    CMPA    7,DL
         7 000152   000127 602000 7                  TNC     s:14343

      410    14347    4              END /* DO */ ;

  14347  7 000153   200011 236100                    LDQ     TCX,,AUTO
         7 000154   000001 036007                    ADLQ    1,DL
         7 000155   200011 756100                    STQ     TCX,,AUTO
         7 000156   000010 116007                    CMPQ    8,DL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:84   
         7 000157   000122 602000 7                  TNC     s:14340

      411    14348                   /* free the table of segments itself */
      412    14349    3              CALL FREE_SEG (%TOM$SEGTBLS_LGTH, TOT$DMC.TOM$SEGTBLS) ;

  14349  7 000160   000004 236000 8                  LDQ     4
         7 000161   200016 756100                    STQ     BUFFER+1,,AUTO
         7 000162   000005 236000 8                  LDQ     5
         7 000163   200015 756100                    STQ     SEGTBL$+2,,AUTO
         7 000164   000172 701000 7                  TSX1    FREE_SEG
         7 000165   000000 011000                    NOP     0

      413    14350    3              TOT$DMC.TOM$SEGTBLS.PTR$ = ADDR (NIL) ;

  14350  7 000166   000001 236000 xsym               LDQ     B_VECTNIL+1
         7 000167   000007 756000 xsym               STQ     TOT$DMC+7

      414    14351    3           END /* ELSE */ ;

      415    14352    2      RETURN ;

  14352  7 000170   200010 221300                    LDX1  ! QUEUE_ENTRY+3,,AUTO
         7 000171   000001 702211                    TSX2  ! 1,X1

      416    14353
      417    14354        /* END FREE_EXCESS_DATA_SEGMENTS */
      418    14355        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:85   
      419    14356        /*I*  NAME:        FREE_SEG
      420    14357              AUTHOR:      Scott S. Sheppard
      421    14358              PURPOSE:     Frees Dynamic Memory Space
      422    14359              INTERFACE:   M$FDS Monitor Service
      423    14360                           XUG$ERRMSG
      424    14361                           M$ERR
      425    14362              PARAMETERS:  WORD_COUNT   - number of words in segment
      426    14363                           WORD_VECTOR  - vector to the set of words
      427    14364              DESCRIPTION: This procedure frees a set of dynamic words
      428    14365                           that are no longer needed as data space.
      429    14366        */
      430    14367
      431    14368    2   FREE_SEG: PROC (WORD_COUNT, WORD_VECTOR) ;

  14368  7 000172   200014 741300       FREE_SEG     STX1  ! SEGTBL$+1,,AUTO

      432    14369
      433    14370    3      DCL WORD_COUNT     UBIN WORD ALIGNED ;
      434    14371    3      DCL WORD_VECTOR    BIT (72) DALIGNED ;
      435    14372           %FPT_FDS (FPTN = FREE_BUFFER) ;
      436    14387
      437    14388        /* Code */
      438    14389
      439    14390    3      FREE_BUFFER.V.SEGSIZE# = WORD_COUNT ;

  14390  7 000173   200015 470500                    LDP0    @WORD_COUNT,,AUTO
         7 000174   000000 720100                    LXL0    0,,PR0
         7 000175   000110 440000 5                  SXL0    FREE_BUFFER+4

      440    14391    3      FREE_BUFFER.RESULTS_ = VECTOR (WORD_VECTOR) ;

  14391  7 000176   000006 235000 8                  LDA     6
         7 000177   200016 236100                    LDQ     @WORD_VECTOR,,AUTO
         7 000200   000106 757000 5                  STAQ    FREE_BUFFER+2

      441    14392    3      CALL M$FDS (FREE_BUFFER) ALTRET (FREE_ERROR) ;

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:86   
  14392  7 000201   000104 630400 5                  EPPR0   FREE_BUFFER
         7 000202   430002 713400                    CLIMB   alt,fds
         7 000203   400400 401760                    pmme    nvectors=2
         7 000204   000207 702000 7                  TSX2    FREE_ERROR

      442    14393    3      RETURN ;

  14393  7 000205   200014 221300                    LDX1  ! SEGTBL$+1,,AUTO
         7 000206   000001 702211                    TSX2  ! 1,X1

      443    14394
      444    14395    3   FREE_ERROR:
      445    14396    3      TOLTS_GETCMD.ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;

  14396  7 000207   000000 470400 xsym  FREE_ERROR   LDP0    B$TCB$
         7 000210   000000 471500                    LDP1    0,,PR0
         7 000211   100102 236100                    LDQ     66,,PR1
         7 000212   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      446    14397    3      CALL XUG$ERRMSG (TOLTS_GETCMD);

  14397  7 000213   000000 630400 8                  EPPR0   0
         7 000214   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 000215   000000 701000 xent               TSX1    XUG$ERRMSG
         7 000216   000000 011000                    NOP     0

      447    14398    3      CALL M$ERR ;

  14398  7 000217   000002 713400                    CLIMB   err
         7 000220   000000 401760                    pmme    nvectors=0

      448    14399
      449    14400    3   END FREE_SEG ;

  14400  7 000221   200014 221300                    LDX1  ! SEGTBL$+1,,AUTO
         7 000222   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:87   
      450    14401    2   END FREE_EXCESS_DATA_SEGMENTS ;
      451    14402        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:88   
      452    14403        /*I* NAME:         SET_BAR
      453    14404             DESCRIPTION:  TOF$BAR.FULL  (18 bits)  is build  to simulate
      454    14405                           the  Base  Address  Register  BAR) in the GCOS
      455    14406                           environment.   It represents the  BAR which is
      456    14407                           in effect  when the ISR has  not been shrunken
      457    14408                           around a  test page.  Thus, the  base field is
      458    14409                           initialized  to 0  (i.e., the  base of the BAR
      459    14410                           coincides with  the base of the  ISR), and the
      460    14411                           size field is  initialized to the last address
      461    14412                           of  TOLTS  in  the  ISR.   The  size  field is
      462    14413                           generated        from       the       variable
      463    14414                           B$JIT$ -> B$JIT.TDP(from  the  JIT,  and  is the
      464    14415                           page  number of  the last  page being  used by
      465    14416                           TOLTS.  It is the  page number relative to the
      466    14417                           beginning of TOLTS's working space, so it must
      467    14418                           be  relativezed to  a page  number relative to
      468    14419                           the start of the  ISR.  In CP6, the ISR starts
      469    14420                           at  page  64  in  the  working space, so 64 is
      470    14421                           substracted off, and the resulting page number
      471    14422                           converted to 512 word blocks by multiplying by
      472    14423                           2).
      473    14424
      474    14425                           Thus, the first 9 bits of TOF$BAR.FULL contain
      475    14426                           the simulated GELBAR  base in 512 word blocks,
      476    14427                           and the  next 9 bits contains  the size of the
      477    14428                           program in 512 word blocks.
      478    14429
      479    14430                           TOF$BAR.CURRENT contains  the same information
      480    14431                           as    TOF$BAR.FULL   (in    terms   of   field
      481    14432                           definitions).   It however  represents the BAR
      482    14433                           at any instant.  That  is, if MME GELBAR is in
      483    14434                           effect,  it contains the  BAR which frames the
      484    14435                           test  page.   The  base  field contains a base
      485    14436                           value relative  to the ISR base,  and the size
      486    14437                           field  frames the  test page.  TOF$BAR.CURRENT
      487    14438                           updated  to  TOF$BAR.FULL  whenever  GELBAR is
      488    14439                           "broken".
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:89   
      489    14440
      490    14441                            SET_BAR  initializes  2  variables  which are
      491    14442                           used    to   simulate    GELBAR   for   SOLTS.
      492    14443                           TOF$BAR.FULL  is  the  simulated  Base Address
      493    14444                           Register   (BAR)   covering   the   full  ISR;
      494    14445                           TOF$BAR.CURRENT is the  simulated BAR when the
      495    14446                           ISR has been  shrunken.  See the documentation
      496    14447                           for SET_BAR for  a more complete explaination.
      497    14448                           TOF$REMEMBER_SFR  and TOF$REMEMBER_SISR  are 2
      498    14449                           BMAP routines which build the 2 PL6 "remember"
      499    14450                           variables  TOF$SFR_RV  and  TOF$SISR_RV  which
      500    14451                           allows  TOLTS to enter  GMAP subexecs and test
      501    14452                           pages directly without leaving around PL6 auto
      502    14453                           frames.   These 2 remember  variables are used
      503    14454                           when simulating MME  GELBAR and returning to a
      504    14455                           subexec following a  test page fault.  See the
      505    14456                           documentation  for the 2  subroutines for more
      506    14457                           detail.
      507    14458        */
      508    14459        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:90   
      509    14460    1   SET_BAR: PROC;

  14460  7 000223   200010 741300       SET_BAR      STX1  ! QUEUE_ENTRY+3,,AUTO

      510    14461
      511    14462        /* Code */
      512    14463
      513    14464           /* Get page number of next available page, relative to the
      514    14465              working space. Convert the page number relative  to the
      515    14466              ISR. Convert to the number of 512 word blocks.
      516    14467              Build a simulated bar. */
      517    14468
      518    14469    2      TOF$BAR.FULL.SIZE = (B$JIT$ -> B$JIT.TDP - 64) * 1024 / 512 ;

  14469  7 000224   000000 470400 xsym               LDP0    B$JIT$
         7 000225   000204 236100                    LDQ     132,,PR0
         7 000226   000021 772000                    QRL     17
         7 000227   000007 376000 8                  ANQ     7
         7 000230   000200 136007                    SBLQ    128,DL
         7 000231   000000 552004 xsym               STBQ    TOF$BAR,'04'O

      519    14470    2      TOF$BAR.FULL.BASE = 0;

  14470  7 000232   000000 236003                    LDQ     0,DU
         7 000233   000000 552010 xsym               STBQ    TOF$BAR,'10'O

      520    14471    2      TOF$BAR.CURRENT = TOF$BAR.FULL;

  14471  7 000234   000000 720000 xsym               LXL0    TOF$BAR
         7 000235   000000 740000 xsym               STX0    TOF$BAR

      521    14472    2      RETURN;

  14472  7 000236   000001 702211                    TSX2  ! 1,X1

      522    14473
      523    14474    2   END SET_BAR;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:91   
      524    14475        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:92   
      525    14476        /*I*  NAME:        REQUEST_INITIAL
      526    14477              AUTHOR:      Scott S. Sheppard
      527    14478              PURPOSE:     TOLTS Request Initialization
      528    14479              INTERFACE:   None called.
      529    14480              INPUT:       No system data accessed.
      530    14481              OUTPUT:      TOD$QUEUE
      531    14482                           TOP$TCP
      532    14483                           TOQ$DCP
      533    14484                           TOS$COMWD
      534    14485                           TOT$ECP
      535    14486              SCRATCH:     No alteration side-effects.
      536    14487              DESCRIPTION: This procedure does all of the variable initialization
      537    14488                           necessary before a non-asynchronous TOLTS test request
      538    14489                           may be accepted.
      539    14490        */
      540    14491
      541    14492    1   REQUEST_INITIAL: PROC ;

  14492  7 000237   200010 741300       REQUEST_INI* STX1  ! QUEUE_ENTRY+3,,AUTO

      542    14493
      543    14494        /* Code */
      544    14495
      545    14496    2      TOD$QUEUE = '0'B ;

  14496  7 000240   000000 100400                    MLR     fill='000'O
         7 000241   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         7 000242   000000 000414 xsym               ADSC9   TOD$QUEUE                cn=0,n=268

      546    14497    2      TOO$IO_BUFFER = '0'B ;

  14497  7 000243   000001 470400 xsym               LDP0    TOT$DMC+1
         7 000244   162000 220003                    LDX0    58368,DU
         7 000245   000140 100400                    MLR     fill='000'O
         7 000246   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         7 000247   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:93   
      547    14498    2      TOP$TCP = '0'B ;

  14498  7 000250   000003 470400 xsym               LDP0    TOT$DMC+3
         7 000251   012200 221003                    LDX1    5248,DU
         7 000252   000140 100400                    MLR     fill='000'O
         7 000253   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         7 000254   000000 000011                    ADSC9   0,,PR0                   cn=0,n=*X1

      548    14499    2      TOQ$DCP = '0'B ;

  14499  7 000255   000000 100400                    MLR     fill='000'O
         7 000256   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         7 000257   000000 000054 xsym               ADSC9   TOQ$DCP                  cn=0,n=44

      549    14500    2      TOS$COMWD = '0'B ;

  14500  7 000260   000000 450000 xsym               STZ     TOS$COMWD

      550    14501    2      TOT$ECP = '0'B ;

  14501  7 000261   000000 100400                    MLR     fill='000'O
         7 000262   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         7 000263   000060 000067 5                  ADSC9   TOT$ECP                  cn=0,n=55

      551    14502    2      RETURN ;

  14502  7 000264   200010 221300                    LDX1  ! QUEUE_ENTRY+3,,AUTO
         7 000265   000001 702211                    TSX2  ! 1,X1

      552    14503
      553    14504    2   END REQUEST_INITIAL ;
      554    14505        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:94   
      555    14506        /*I* NAME:         GET_TOLTS_REQUEST
      556    14507             INTERFACE:    SET_TOLTS_PROMPT
      557    14508                           XUG$GETCMD Library Service
      558    14509                           XUG$ERRMSG Library Service
      559    14510                           SELECT_TOLTS_REQUEST
      560    14511             DESCRIPTION:  This routine is called for the first or any
      561    14512                           asynchronous TOLTS requests.    The routine
      562    14513                           accepts a TOLTS request from the user   and
      563    14514                           processes it appropriately.  When  a  TOLTS
      564    14515                           Subexecutive is active,this routine returns
      565    14516                           immediately,  otherwise  it  loops until a
      566    14517                           subexecutive is activated.
      567    14518        */
      568    14519        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:95   
      569    14520    1   GET_TOLTS_REQUEST: PROC;

  14520  7 000266   200010 741300       GET_TOLTS_R* STX1  ! QUEUE_ENTRY+3,,AUTO

      570    14521
      571    14522    2      DCL CMD$            PTR ALIGNED ;
      572    14523    2      DCL 1 TOLTS_PROMPT CONSTANT CALIGNED,
      573    14524    2            2 * UBIN BYTE CALIGNED INIT(30), /* <RS> (transition) VFC */
      574    14525    2            2 * CHAR (3) CALIGNED INIT('???');
      575    14526           %PARSE$OUT (NAME = CMDOUT, STCLASS = "BASED (CMD$)") ;
      576    14571           %PARSE$SYM (NAME = CMDSYM, STCLASS = "BASED (CMD$)") ;
      577    14609
      578    14610        /* Code */
      579    14611
      580    14612    3      DO UNTIL (TOT$ECP.SUBEXEC.CURRENT ~= %NONE) ;

      581    14613    3         TOLTS_GETCMD.PROMPT_ = VECTOR (TOLTS_PROMPT);

  14613  7 000267   000010 237000 8                  LDAQ    8
         7 000270   000025 755000 xsym               STA     TOLTS_GETCMD+21
         7 000271   000026 756000 xsym               STQ     TOLTS_GETCMD+22

      582    14614    3         TOLTS_GETCMD.PROMPT_VFC# = '1'B;

  14614  7 000272   010000 236003                    LDQ     4096,DU
         7 000273   000006 256000 xsym               ORSQ    TOLTS_GETCMD+6

      583    14615    3         CALL XUG$GETCMD (TOLTS_GETCMD) WHENRETURN

  14615  7 000274   000000 630400 8                  EPPR0   0
         7 000275   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 000276   000000 701000 xent               TSX1    XUG$GETCMD
         7 000277   000305 702000 7                  TSX2    s:14622

      584    14616    4              DO ;

      585    14617    4                 CMD$ = TOLTS_GETCMD.OUT$;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:96   

  14617  7 000300   000001 236000 xsym               LDQ     TOLTS_GETCMD+1
         7 000301   200011 756100                    STQ     CMD$,,AUTO

      586    14618    4                 CALL SELECT_TOLTS_REQUEST ;

  14618  7 000302   000340 701000 7                  TSX1    SELECT_TOLTS_REQUEST
         7 000303   000000 011000                    NOP     0

      587    14619    4              END /* WHENRETURN */ ;

  14619  7 000304   000321 710000 7                  TRA     s:14627

      588    14620    3         WHENALTRETURN
      589    14621    4              DO ;

      590    14622    4                 TOLTS_GETCMD.ERR_CODE = TOLTS_GETCMD.ERR#;

  14622  7 000305   000001 236000 xsym               LDQ     TOLTS_GETCMD+1
         7 000306   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      591    14623    4                 CALL XUG$ERRMSG (TOLTS_GETCMD);

  14623  7 000307   000000 630400 8                  EPPR0   0
         7 000310   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 000311   000000 701000 xent               TSX1    XUG$ERRMSG
         7 000312   000000 011000                    NOP     0

      592    14624    4                 IF TOLTS_GETCMD.ERR#.CODE# = %E$EOF THEN

  14624  7 000313   000001 236000 xsym               LDQ     TOLTS_GETCMD+1
         7 000314   377770 376007                    ANQ     131064,DL
         7 000315   000060 116007                    CMPQ    48,DL
         7 000316   000321 601000 7                  TNZ     s:14627

      593    14625    4                    TOT$ECP.SUBEXEC.CURRENT = BITBIN(%TRUE) ; /* 39916 */

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:97   
  14625  7 000317   000001 235007                    LDA     1,DL
         7 000320   000067 755000 5                  STA     TOT$ECP+7

      594    14626    4              END ;

      595    14627    3      END /* DO UNTIL */ ;

  14627  7 000321   000067 235000 5                  LDA     TOT$ECP+7
         7 000322   000267 600000 7                  TZE     s:14613

      596    14628    2      RETURN ;

  14628  7 000323   200010 221300                    LDX1  ! QUEUE_ENTRY+3,,AUTO
         7 000324   000001 702211                    TSX2  ! 1,X1

      597    14629
      598    14630        /* END GET_TOLTS_REQUEST */
      599    14631        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:98   
      600    14632        /*I*  NAME:        SET_TOLTS_PROMPT
      601    14633              AUTHOR:      Scott S. Sheppard
      602    14634              PURPOSE:     Sets TOLTS prompt
      603    14635              INTERFACE:   M$PROMPT
      604    14636              INPUT:       B$JIT.MODE
      605    14637              OUTPUT:      Prompt set to '???'
      606    14638              SCRATCH:     No alteration side-effects.
      607    14639              DESCRIPTION: This procedure sets the TOLTS prompt to the
      608    14640                           standardly recognized three question marks.
      609    14641        */
      610    14642
      611    14643    2   SET_TOLTS_PROMPT: PROC ;

  14643  7 000325   200010 741300       SET_TOLTS_P* STX1  ! QUEUE_ENTRY+3,,AUTO

      612    14644
      613    14645    3      DCL TOLTS_PROMPT   CHAR (3) CONSTANT CALIGNED INIT ('???') ;
      614    14646           %FPT_PROMPT (FPTN   = SET_TOLTS_PROMPT,
      615    14647                        PROMPT = TOLTS_PROMPT,
      616    14648                        VFC    = NO) ;
      617    14676
      618    14677        /* Code */
      619    14678
      620    14679    3      IF B$JIT.MODE = %M_INT#

  14679  7 000326   000000 470400 xsym               LDP0    B$JIT$
         7 000327   000000 236100                    LDQ     0,,PR0
         7 000330   740000 376003                    ANQ     -16384,DU
         7 000331   140000 116003                    CMPQ    49152,DU
         7 000332   000336 601000 7                  TNZ     s:14682

      621    14680    3      THEN CALL M$PROMPT (SET_TOLTS_PROMPT) ;

  14680  7 000333   000112 630400 5                  EPPR0   SET_TOLTS_PROMPT
         7 000334   160002 713400                    CLIMB   57346
         7 000335   401000 401760                    pmme    nvectors=3

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:99   
      622    14681    3      ELSE /* TOLTS is not being run interactively. */ ;
      623    14682    3      RETURN ;

  14682  7 000336   200010 221300                    LDX1  ! QUEUE_ENTRY+3,,AUTO
         7 000337   000001 702211                    TSX2  ! 1,X1

      624    14683
      625    14684    3   END SET_TOLTS_PROMPT ;
      626    14685        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:100  
      627    14686        /*I* NAME:         SELECT_TOLTS_REQUEST
      628    14687             DESCRIPTION:  This procedure selects the appropiate request
      629    14688                           processing module based on TOLTS request type
      630    14689                           information returned by XUG$GETCMD.
      631    14690        */
      632    14691
      633    14692    2   SELECT_TOLTS_REQUEST: PROC ;

  14692  7 000340   200012 741300       SELECT_TOLT* STX1  ! STX,,AUTO

      634    14693
      635    14694        /* Code */
      636    14695
      637    14696    4      DO CASE (CMDOUT.CODE) ;

  14696  7 000341   200011 470500                    LDP0    CMD$,,AUTO
         7 000342   000000 720100                    LXL0    0,,PR0
         7 000343   000010 100003                    CMPX0   8,DU
         7 000344   000346 602010 7                  TNC     s:14696+5,X0
         7 000345   000377 710000 7                  TRA     s:14711
         7 000346   000377 710000 7                  TRA     s:14711
         7 000347   000372 710000 7                  TRA     s:14707
         7 000350   000377 710000 7                  TRA     s:14711
         7 000351   000377 710000 7                  TRA     s:14711
         7 000352   000377 710000 7                  TRA     s:14711
         7 000353   000375 710000 7                  TRA     s:14709
         7 000354   000363 710000 7                  TRA     s:14703
         7 000355   000356 710000 7                  TRA     s:14700

      638    14697    4         CASE (%NULL) ;

      639    14698                 /* Do Nothing */
      640    14699    4         CASE (%TEST) ;

      641    14700    4            CALL REBUILD_TEST_REQ ;

  14700  7 000356   000460 701000 7                  TSX1    REBUILD_TEST_REQ
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:101  
         7 000357   000000 011000                    NOP     0

      642    14701    4            CALL PROCESS_TEST_REQ ;

  14701  7 000360   000620 701000 7                  TSX1    PROCESS_TEST_REQ
         7 000361   000000 011000                    NOP     0
         7 000362   000377 710000 7                  TRA     s:14711

      643    14702    4         CASE (%DEBUG) ;

      644    14703    4            CALL SET_DEBUG_FLAGS ;

  14703  7 000363   000401 701000 7                  TSX1    SET_DEBUG_FLAGS
         7 000364   000000 011000                    NOP     0

      645    14704    4            CALL REBUILD_TEST_REQ ;

  14704  7 000365   000460 701000 7                  TSX1    REBUILD_TEST_REQ
         7 000366   000000 011000                    NOP     0

      646    14705    4            CALL PROCESS_TEST_REQ ;

  14705  7 000367   000620 701000 7                  TSX1    PROCESS_TEST_REQ
         7 000370   000000 011000                    NOP     0
         7 000371   000377 710000 7                  TRA     s:14711

      647    14706    4         CASE (%MSG) ;

      648    14707    4            CALL PROCESS_MSG_REQ ;

  14707  7 000372   001446 701000 7                  TSX1    PROCESS_MSG_REQ
         7 000373   000000 011000                    NOP     0
         7 000374   000377 710000 7                  TRA     s:14711

      649    14708    4         CASE (%QUIT) ;

      650    14709    4            CALL PROCESS_EXIT_REQ ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:102  

  14709  7 000375   001713 701000 7                  TSX1    PROCESS_EXIT_REQ
         7 000376   000000 011000                    NOP     0

      651    14710    4      END /* CASE */ ;

      652    14711    3      RETURN ;

  14711  7 000377   200012 221300                    LDX1  ! STX,,AUTO
         7 000400   000001 702211                    TSX2  ! 1,X1

      653    14712
      654    14713    3   END SELECT_TOLTS_REQUEST ;
      655    14714        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:103  
      656    14715        /*I* NAME:         SET_DEBUG_FLAGS
      657    14716             AUTHOR:       Scott S. Sheppard
      658    14717             PURPOSE:      Assigns Debug Processing Flags
      659    14718             INTERFACE:    None called.
      660    14719             PARAMETERS:   None passed.
      661    14720             DATA:         CMD$ - input
      662    14721                           TOQ$DCP.PF.ENABLED - output
      663    14722                           TOQ$DCP.PF.DEBUG_TOLTS - output
      664    14723                           TOQ$DCP.PF.STOP_ON_GELBARS - output
      665    14724                           TOQ$DCP.PF.STOP_ON_IO - output
      666    14725             DESCRIPTION:  This  procedure  assigns the  proper values to the
      667    14726                           processing   flags  (PF)  of   the  Debug  Control
      668    14727                           Parameter  (TOQ$DCP).   TOQ$DCP  is  zeroed out in
      669    14728                           REQUEST_INIITIAL  so  all  initial  values for the
      670    14729                           flags  are  false.  Based  on  the  debug  options
      671    14730                           entered,  the following flags  are enabled (set to
      672    14731                           true).
      673    14732                             TOLTS option          Corresponding Flag
      674    14733                             ------------          ------------------
      675    14734                             AND TOLTS             TOQ$DCP.PF.DEBUG_TOLTS
      676    14735                             STOPPING ON GELBARS   TOQ$DCP.PF.STOP_ON_GELBARS
      677    14736                             STOPPING ON IO        TOQ$DCP.PF.STOP_ON_IO
      678    14737                             SCREAMING MMES        TOQ$DCP.PF.DISP_MMES
      679    14738                           This procedure enables those bits so that calls to
      680    14739                           TOQ$DEBUG can be handled properly.
      681    14740        */
      682    14741        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:104  
      683    14742    2   SET_DEBUG_FLAGS: PROC ;

  14742  7 000401   200014 741300       SET_DEBUG_F* STX1  ! SEGTBL$+1,,AUTO

      684    14743
      685    14744    3      DCL OUTBLK#                    UBIN WORD ALIGNED ;
      686    14745    3      DCL OUTBLK$                    PTR ALIGNED ;
      687    14746           %PARSE$OUT (STCLASS = BASED) ;
      688    14791
      689    14792        /* Code */
      690    14793
      691    14794    3      TOQ$DCP.PF.ENABLED = %TRUE ;

  14794  7 000402   400000 236003                    LDQ     -131072,DU
         7 000403   000000 256000 xsym               ORSQ    TOQ$DCP

      692    14795    4      DO OUTBLK# = 1 TO CMD$ -> OUT$BLK.NSUBLKS - 1 ;

  14795  7 000404   000001 235007                    LDA     1,DL
         7 000405   200015 755100                    STA     OUTBLK#,,AUTO
         7 000406   000450 710000 7                  TRA     s:14809+3

      693    14796    4         OUTBLK$ = CMD$ -> OUT$BLK.SUBLK$(OUTBLK#) ;

  14796  7 000407   200011 470500                    LDP0    CMD$,,AUTO
         7 000410   200015 720100                    LXL0    OUTBLK#,,AUTO
         7 000411   000003 236110                    LDQ     3,X0,PR0
         7 000412   200016 756100                    STQ     OUTBLK$,,AUTO

      694    14797    5         DO CASE (OUTBLK$ -> OUT$BLK.CODE) ;

  14797  7 000413   200016 471500                    LDP1    OUTBLK$,,AUTO
         7 000414   100000 236100                    LDQ     0,,PR1
         7 000415   777777 376007                    ANQ     -1,DL
         7 000416   000017 136007                    SBLQ    15,DL
         7 000417   000005 116007                    CMPQ    5,DL
         7 000420   000422 602006 7                  TNC     s:14797+7,QL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:105  
         7 000421   000445 710000 7                  TRA     s:14809
         7 000422   000427 710000 7                  TRA     s:14799
         7 000423   000432 710000 7                  TRA     s:14801
         7 000424   000435 710000 7                  TRA     s:14803
         7 000425   000440 710000 7                  TRA     s:14805
         7 000426   000443 710000 7                  TRA     s:14807

      695    14798    5            CASE (%AND_TOLTS) ;

      696    14799    5               TOQ$DCP.PF.DEBUG_TOLTS = %TRUE ;

  14799  7 000427   100000 236003                    LDQ     32768,DU
         7 000430   000000 256000 xsym               ORSQ    TOQ$DCP
         7 000431   000445 710000 7                  TRA     s:14809

      697    14800    5            CASE (%STOP_GELBAR) ;

      698    14801    5               TOQ$DCP.PF.STOP_ON_GELBARS = %TRUE ;

  14801  7 000432   040000 236003                    LDQ     16384,DU
         7 000433   000000 256000 xsym               ORSQ    TOQ$DCP
         7 000434   000445 710000 7                  TRA     s:14809

      699    14802    5            CASE (%STOP_IO) ;

      700    14803    5               TOQ$DCP.PF.STOP_ON_IO = %TRUE ;

  14803  7 000435   020000 236003                    LDQ     8192,DU
         7 000436   000000 256000 xsym               ORSQ    TOQ$DCP
         7 000437   000445 710000 7                  TRA     s:14809

      701    14804    5            CASE (%STOP_SE) ;

      702    14805    5               TOQ$DCP.PF.STOP_AT_SE = %TRUE ;

  14805  7 000440   010000 236003                    LDQ     4096,DU
         7 000441   000000 256000 xsym               ORSQ    TOQ$DCP
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:106  
         7 000442   000445 710000 7                  TRA     s:14809

      703    14806    5            CASE (%SCREAM_MMES) ;

      704    14807    5               TOQ$DCP.PF.DISP_MMES = %TRUE ;

  14807  7 000443   004000 236003                    LDQ     2048,DU
         7 000444   000000 256000 xsym               ORSQ    TOQ$DCP

      705    14808    5         END /* CASE */ ;

      706    14809    4      END /* DO */ ;

  14809  7 000445   200015 235100                    LDA     OUTBLK#,,AUTO
         7 000446   000001 035007                    ADLA    1,DL
         7 000447   200015 755100                    STA     OUTBLK#,,AUTO
         7 000450   200011 470500                    LDP0    CMD$,,AUTO
         7 000451   000001 236100                    LDQ     1,,PR0
         7 000452   000022 772000                    QRL     18
         7 000453   200015 116100                    CMPQ    OUTBLK#,,AUTO
         7 000454   000456 600000 7                  TZE     s:14810
         7 000455   000407 603000 7                  TRC     s:14796

      707    14810    3      RETURN ;

  14810  7 000456   200014 221300                    LDX1  ! SEGTBL$+1,,AUTO
         7 000457   000001 702211                    TSX2  ! 1,X1

      708    14811
      709    14812    3   END SET_DEBUG_FLAGS ;
      710    14813        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:107  
      711    14814        /*I* NAME:         REBUILD_TEST_REQ
      712    14815             INTERFACE:    CONCATenation Function
      713    14816             DESCRIPTION:  In order to correctly parse TOLTS input commands,
      714    14817                           constants signifying the  leading characters  for
      715    14818                           valid  TOLTS  requests  had  to  be  set  up  for
      716    14819                           XUG$GETCMD.    Although this allows XUG$GETCMD to
      717    14820                           flag any string that does not begin with a  legal
      718    14821                           leading character as invalid, XUG$GETCMD does not
      719    14822                           place the leading  constant character(s)  in  the
      720    14823                           literal for the entered request. Thus we have to
      721    14824                           tack the omitted characters back on to the start
      722    14825                           of the TOLTS request string.
      723    14826        */
      724    14827
      725    14828    2   REBUILD_TEST_REQ: PROC ;

  14828  7 000460   200014 741300       REBUILD_TES* STX1  ! SEGTBL$+1,,AUTO

      726    14829
      727    14830    3      DCL PREFIX_STRING    CHAR (5) CALIGNED ;
      728    14831    3      DCL PREFIX_LGTH      UBIN BYTE CALIGNED ;
      729    14832           %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:108  
      730    14833        /* Code */
      731    14834
      732    14835    4      DO CASE (CMDOUT.SUBLK$(0) -> CMDOUT.CODE) ;

  14835  7 000461   200011 470500                    LDP0    CMD$,,AUTO
         7 000462   000003 471500                    LDP1    3,,PR0
         7 000463   100000 236100                    LDQ     0,,PR1
         7 000464   777777 376007                    ANQ     -1,DL
         7 000465   000010 136007                    SBLQ    8,DL
         7 000466   000010 116007                    CMPQ    8,DL
         7 000467   000471 602006 7                  TNC     s:14835+8,QL
         7 000470   000560 710000 7                  TRA     s:14861
         7 000471   000501 710000 7                  TRA     s:14837
         7 000472   000507 710000 7                  TRA     s:14840
         7 000473   000515 710000 7                  TRA     s:14843
         7 000474   000523 710000 7                  TRA     s:14846
         7 000475   000531 710000 7                  TRA     s:14849
         7 000476   000537 710000 7                  TRA     s:14852
         7 000477   000545 710000 7                  TRA     s:14855
         7 000500   000553 710000 7                  TRA     s:14858

      733    14836    4         CASE (%COLTS) ;

      734    14837    4            PREFIX_STRING = 'C' ;

  14837  7 000501   040100 100400                    MLR     fill='040'O
         7 000502   000012 000001 8                  ADSC9   10                       cn=0,n=1
         7 000503   200015 000005                    ADSC9   PREFIX_STRING,,AUTO      cn=0,n=5

      735    14838    4            PREFIX_LGTH = 1 ;

  14838  7 000504   001000 236003                    LDQ     512,DU
         7 000505   200017 756100                    STQ     PREFIX_LGTH,,AUTO
         7 000506   000560 710000 7                  TRA     s:14861

      736    14839    4         CASE (%MOLTS) ;

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:109  
      737    14840    4            PREFIX_STRING = 'M' ;

  14840  7 000507   040100 100400                    MLR     fill='040'O
         7 000510   000013 000001 8                  ADSC9   11                       cn=0,n=1
         7 000511   200015 000005                    ADSC9   PREFIX_STRING,,AUTO      cn=0,n=5

      738    14841    4            PREFIX_LGTH = 1 ;

  14841  7 000512   001000 236003                    LDQ     512,DU
         7 000513   200017 756100                    STQ     PREFIX_LGTH,,AUTO
         7 000514   000560 710000 7                  TRA     s:14861

      739    14842    4         CASE (%POLTS) ;

      740    14843    4            PREFIX_STRING = 'P' ;

  14843  7 000515   040100 100400                    MLR     fill='040'O
         7 000516   000014 000001 8                  ADSC9   12                       cn=0,n=1
         7 000517   200015 000005                    ADSC9   PREFIX_STRING,,AUTO      cn=0,n=5

      741    14844    4            PREFIX_LGTH = 1 ;

  14844  7 000520   001000 236003                    LDQ     512,DU
         7 000521   200017 756100                    STQ     PREFIX_LGTH,,AUTO
         7 000522   000560 710000 7                  TRA     s:14861

      742    14845    4         CASE (%SOLTS) ;

      743    14846    4            PREFIX_STRING = 'S' ;

  14846  7 000523   040100 100400                    MLR     fill='040'O
         7 000524   000015 000001 8                  ADSC9   13                       cn=0,n=1
         7 000525   200015 000005                    ADSC9   PREFIX_STRING,,AUTO      cn=0,n=5

      744    14847    4            PREFIX_LGTH = 1 ;

  14847  7 000526   001000 236003                    LDQ     512,DU
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:110  
         7 000527   200017 756100                    STQ     PREFIX_LGTH,,AUTO
         7 000530   000560 710000 7                  TRA     s:14861

      745    14848    4         CASE (%PACT) ;

      746    14849    4            PREFIX_STRING = '$PACT' ;

  14849  7 000531   040100 100400                    MLR     fill='040'O
         7 000532   000005 000005 6                  ADSC9   SLTA_REQ+3               cn=0,n=5
         7 000533   200015 000005                    ADSC9   PREFIX_STRING,,AUTO      cn=0,n=5

      747    14850    4            PREFIX_LGTH = 5 ;

  14850  7 000534   005000 236003                    LDQ     2560,DU
         7 000535   200017 756100                    STQ     PREFIX_LGTH,,AUTO
         7 000536   000560 710000 7                  TRA     s:14861

      748    14851    4         CASE (%SLTA) ;

      749    14852    4            PREFIX_STRING = '$SLTA' ;

  14852  7 000537   040100 100400                    MLR     fill='040'O
         7 000540   000007 000005 6                  ADSC9   SLTA_REQ+5               cn=0,n=5
         7 000541   200015 000005                    ADSC9   PREFIX_STRING,,AUTO      cn=0,n=5

      750    14853    4            PREFIX_LGTH = 5 ;

  14853  7 000542   005000 236003                    LDQ     2560,DU
         7 000543   200017 756100                    STQ     PREFIX_LGTH,,AUTO
         7 000544   000560 710000 7                  TRA     s:14861

      751    14854    4         CASE (%NEW_IO) ;

      752    14855    4            PREFIX_STRING = 'NIO' ;

  14855  7 000545   040100 100400                    MLR     fill='040'O
         7 000546   000011 000003 6                  ADSC9   SLTA_REQ+7               cn=0,n=3
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:111  
         7 000547   200015 000005                    ADSC9   PREFIX_STRING,,AUTO      cn=0,n=5

      753    14856    4            PREFIX_LGTH = 3 ;

  14856  7 000550   003000 236003                    LDQ     1536,DU
         7 000551   200017 756100                    STQ     PREFIX_LGTH,,AUTO
         7 000552   000560 710000 7                  TRA     s:14861

      754    14857    4         CASE (%SPUD) ;

      755    14858    4            PREFIX_STRING = 'RPM' ;

  14858  7 000553   040100 100400                    MLR     fill='040'O
         7 000554   000012 000003 6                  ADSC9   SLTA_REQ+8               cn=0,n=3
         7 000555   200015 000005                    ADSC9   PREFIX_STRING,,AUTO      cn=0,n=5

      756    14859    4            PREFIX_LGTH = 3 ;

  14859  7 000556   003000 236003                    LDQ     1536,DU
         7 000557   200017 756100                    STQ     PREFIX_LGTH,,AUTO

      757    14860    4      END /* CASE */ ;

      758    14861    3      IF CMDOUT.SUBLK$(0) -> CMDOUT.NSUBLKS = 0

  14861  7 000560   100001 220100                    LDX0    1,,PR1
         7 000561   000571 601000 7                  TNZ     s:14863

      759    14862    3      THEN TOT$ECP.TEST_REQ = SUBSTR (PREFIX_STRING, 0, PREFIX_LGTH) ;

  14862  7 000562   200017 236100                    LDQ     PREFIX_LGTH,,AUTO
         7 000563   000033 772000                    QRL     27
         7 000564   000000 622006                    EAX2    0,QL
         7 000565   040000 100540                    MLR     fill='040'O
         7 000566   200015 000012                    ADSC9   PREFIX_STRING,,AUTO      cn=0,n=*X2
         7 000567   000060 000014 5                  ADSC9   TOT$ECP                  cn=0,n=12
         7 000570   000617 710000 7                  TRA     s:14867
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:112  

      760    14863    3      ELSE CALL CONCAT (TOT$ECP.TEST_REQ,

  14863  7 000571   200017 236100                    LDQ     PREFIX_LGTH,,AUTO
         7 000572   000033 772000                    QRL     27
         7 000573   100003 473500                    LDP3    3,,PR1
         7 000574   000000 622006                    EAX2    0,QL
         7 000575   300004 236100                    LDQ     4,,PR3
         7 000576   000033 772000                    QRL     27
         7 000577   040000 100540                    MLR     fill='040'O
         7 000600   200015 000012                    ADSC9   PREFIX_STRING,,AUTO      cn=0,n=*X2
         7 000601   000060 000014 5                  ADSC9   TOT$ECP                  cn=0,n=12
         7 000602   000000 620006                    EAX0    0,QL
         7 000603   000000 636012                    EAQ     0,X2
         7 000604   000022 772000                    QRL     18
         7 000605   000014 116007                    CMPQ    12,DL
         7 000606   000617 603000 7                  TRC     s:14867
         7 000607   200050 742100                    STX2    OUTBLK$+3,,AUTO
         7 000610   777763 622012                    EAX2    -13,X2
         7 000611   777777 662003                    ERX2    -1,DU
         7 000612   200050 235100                    LDA     OUTBLK$+3,,AUTO
         7 000613   000022 771000                    ARL     18
         7 000614   040045 100540                    MLR     fill='040'O
         7 000615   300004 200010                    ADSC9   4,,PR3                   cn=1,n=*X0
         7 000616   000060 000012 5                  ADSC9   TOT$ECP,A                cn=0,n=*X2

      761    14864    3                 SUBSTR (PREFIX_STRING, 0, PREFIX_LGTH),
      762    14865    3                 SUBSTR (CMDOUT.SUBLK$(0) -> CMDSYM.TEXTC$ -> CMDSYM.TEXT,0,
      763    14866    3                 CMDOUT.SUBLK$(0) -> CMDSYM.TEXTC$ -> CMDSYM.COUNT)) ;
      764    14867    3      RETURN ;

  14867  7 000617   000001 702211                    TSX2  ! 1,X1

      765    14868
      766    14869    3   END REBUILD_TEST_REQ ;
      767    14870        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:113  
      768    14871        /*I* NAME:         PROCESS_TEST_REQ
      769    14872             INTERFACE:    SET_SUBEXEC
      770    14873                           CHECK_SUBEXEC
      771    14874                           SET_SYSTEM_TYPE
      772    14875                           CHECK_VALID_SUBEXEC
      773    14876                           CHECK_DEBUG
      774    14877                           CHECK_CONTRACT
      775    14878                           BUILD_INIT_SUBEXEC
      776    14879                           BUILD_ISC_WRITE
      777    14880                           TOS$PACT
      778    14881                           TOD$DISPATCHER
      779    14882             DESCRIPTION:  This routine is called for the first or any
      780    14883                           asynchronous test requests.  This procedure
      781    14884                           handles a test request based on the type of
      782    14885                           request and whether or   not a subexecutive
      783    14886                           is currently active.
      784    14887        */
      785    14888        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:114  
      786    14889    2   PROCESS_TEST_REQ: PROC ;

  14889  7 000620   200014 741300       PROCESS_TES* STX1  ! SEGTBL$+1,,AUTO

      787    14890
      788    14891        /* Code */
      789    14892
      790    14893    3      IF TOT$ECP.SUBEXEC.CURRENT = %NONE

  14893  7 000621   000067 235000 5                  LDA     TOT$ECP+7
         7 000622   000671 601000 7                  TNZ     s:14908

      791    14894    4      THEN DO ;

      792    14895    4              CALL CHECK_CONTRACT ;

  14895  7 000623   000725 701000 7                  TSX1    CHECK_CONTRACT
         7 000624   000000 011000                    NOP     0

      793    14896    4              CALL SET_SYSTEM_TYPE;

  14896  7 000625   001042 701000 7                  TSX1    SET_SYSTEM_TYPE
         7 000626   000000 011000                    NOP     0

      794    14897    4              CALL SET_SUBEXEC ;

  14897  7 000627   001067 701000 7                  TSX1    SET_SUBEXEC
         7 000630   000000 011000                    NOP     0

      795    14898    4              CALL CHECK_VALID_SUBEXEC;

  14898  7 000631   001111 701000 7                  TSX1    CHECK_VALID_SUBEXEC
         7 000632   000000 011000                    NOP     0

      796    14899    4              CALL BUILD_INIT_SUBEXEC ;

  14899  7 000633   001350 701000 7                  TSX1    BUILD_INIT_SUBEXEC
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:115  
         7 000634   000000 011000                    NOP     0

      797    14900    4              IF TOT$ECP.SUBEXEC.CURRENT = %PACT | TOT$ECP.SUBEXEC.CURRENT = %SLTA

  14900  7 000635   400000 220003                    LDX0    -131072,DU
         7 000636   000067 235000 5                  LDA     TOT$ECP+7
         7 000637   000014 115007                    CMPA    12,DL
         7 000640   000642 600000 7                  TZE     s:14900+5
         7 000641   000000 220003                    LDX0    0,DU
         7 000642   400000 221003                    LDX1    -131072,DU
         7 000643   000015 115007                    CMPA    13,DL
         7 000644   000646 600000 7                  TZE     s:14900+9
         7 000645   000000 221003                    LDX1    0,DU
         7 000646   000000 636011                    EAQ     0,X1
         7 000647   200050 756100                    STQ     OUTBLK$+3,,AUTO
         7 000650   000000 636010                    EAQ     0,X0
         7 000651   200050 276100                    ORQ     OUTBLK$+3,,AUTO
         7 000652   000656 600000 7                  TZE     s:14903

      798    14901    4              THEN CALL TOS$PACT ;

  14901  7 000653   000002 631400 xsym               EPPR1   B_VECTNIL+2
         7 000654   000000 701000 xent               TSX1    TOS$PACT
         7 000655   000000 011000                    NOP     0

      799    14902    4              ELSE /* No need to alter the Communications Word. */ ;
      800    14903    4              CALL BUILD_ISC_WRITE ;

  14903  7 000656   001374 701000 7                  TSX1    BUILD_ISC_WRITE
         7 000657   000000 011000                    NOP     0

      801    14904    4              REQUEST_TYPE = %DRT_SERVICE ;

  14904  7 000660   000002 235007                    LDA     2,DL
         7 000661   200003 755100                    STA     REQUEST_TYPE,,AUTO

      802    14905    4              CALL TOD$DISPATCHER (REQUEST_TYPE,,) ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:116  

  14905  7 000662   200003 630500                    EPPR0   REQUEST_TYPE,,AUTO
         7 000663   200050 450500                    STP0    OUTBLK$+3,,AUTO
         7 000664   200050 630500                    EPPR0   OUTBLK$+3,,AUTO
         7 000665   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 000666   000000 701000 xent               TSX1    TOD$DISPATCHER
         7 000667   000000 011000                    NOP     0

      803    14906    4           END /* THEN */ ;

  14906  7 000670   000724 710000 7                  TRA     NOT_SAME+2

      804    14907    4      ELSE DO ;

      805    14908    4              CALL CHECK_CONTRACT ;

  14908  7 000671   000725 701000 7                  TSX1    CHECK_CONTRACT
         7 000672   000000 011000                    NOP     0

      806    14909    4              CALL CHECK_SUBEXEC ALTRET (NOT_SAME) ;

  14909  7 000673   001210 701000 7                  TSX1    CHECK_SUBEXEC
         7 000674   000722 702000 7                  TSX2    NOT_SAME

      807    14910    4              CALL CHECK_DEBUG ALTRET (NOT_SAME) ;

  14910  7 000675   001276 701000 7                  TSX1    CHECK_DEBUG
         7 000676   000722 702000 7                  TSX2    NOT_SAME

      808    14911    4              IF TOT$ECP.SUBEXEC.CURRENT = %PACT | TOT$ECP.SUBEXEC.CURRENT = %SLTA

  14911  7 000677   400000 220003                    LDX0    -131072,DU
         7 000700   000067 235000 5                  LDA     TOT$ECP+7
         7 000701   000014 115007                    CMPA    12,DL
         7 000702   000704 600000 7                  TZE     s:14911+5
         7 000703   000000 220003                    LDX0    0,DU
         7 000704   400000 221003                    LDX1    -131072,DU
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:117  
         7 000705   000015 115007                    CMPA    13,DL
         7 000706   000710 600000 7                  TZE     s:14911+9
         7 000707   000000 221003                    LDX1    0,DU
         7 000710   000000 636011                    EAQ     0,X1
         7 000711   200050 756100                    STQ     OUTBLK$+3,,AUTO
         7 000712   000000 636010                    EAQ     0,X0
         7 000713   200050 276100                    ORQ     OUTBLK$+3,,AUTO
         7 000714   000720 600000 7                  TZE     s:14914

      809    14912    4              THEN CALL TOS$PACT ;

  14912  7 000715   000002 631400 xsym               EPPR1   B_VECTNIL+2
         7 000716   000000 701000 xent               TSX1    TOS$PACT
         7 000717   000000 011000                    NOP     0

      810    14913    4              ELSE /* No need to alter the Communications Word. */ ;
      811    14914    4              CALL BUILD_ISC_WRITE ;

  14914  7 000720   001374 701000 7                  TSX1    BUILD_ISC_WRITE
         7 000721   000000 011000                    NOP     0

      812    14915    4   NOT_SAME:
      813    14916    4              RETURN ;

  14916  7 000722   200014 221300       NOT_SAME     LDX1  ! SEGTBL$+1,,AUTO
         7 000723   000001 702211                    TSX2  ! 1,X1
         7 000724   001444 710000 7                  TRA     s:15253

      814    14917    4           END /* ELSE */ ;
      815    14918
      816    14919        /* END PROCESS_TEST_REQ */
      817    14920        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:118  
      818    14921        /*I* NAME:         CHECK_CONTRACT
      819    14922             AUTHOR:       Scott S. Sheppard
      820    14923             PURPOSE:      Checks for a Maintenance Contract
      821    14924             INTERFACE:    XUG$ERRMSG
      822    14925                           TOT$RESTART
      823    14926             PARAMETERS:   None passed.
      824    14927             DATA:         TOT$IFAD.MAINTENANCE.CONTRACT - input
      825    14928                           TOT$ECP.TEST_REQ - input
      826    14929             DESCRIPTION:  This   TOLTS   procedure   checks  to   ensure
      827    14930                           that   a  customer  site   has  a  maintenance
      828    14931                           agreement  before  allowing  any  tests, other
      829    14932                           than MTAR or PACT tests, to be run.
      830    14933
      831    14934                           When  the  deckfile  is  built,  the  REVISION
      832    14935                           record  stored  in  the  deckfile contains the
      833    14936                           IFAD  Release of  the tape  used to  build the
      834    14937                           deckfile and a bit which indicates if the site
      835    14938                           has  a maintenance agreement  or not. This bit
      836    14939                           was  set  by  checking  to  see  if  the  deck
      837    14940                           PLT.POLTCM (CPLT) was found on the site's IFAD
      838    14941                           tape.
      839    14942
      840    14943                           The maintenance contract bit  is stored in a 4
      841    14944                           character field.  For sites that do NOT have a
      842    14945                           maintenance  contract,  the  field  looks like
      843    14946                           "CP-6".  This is done  so if a non-maintenance
      844    14947                           site  dumps  the   revision  record  from  the
      845    14948                           deckfile, all will  appear to be normal.  When
      846    14949                           the  bit  is  set  for  maintenance sites, the
      847    14950                           field becomes "CP=6".
      848    14951        */
      849    14952        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:119  
      850    14953    3   CHECK_CONTRACT: PROC ;

  14953  7 000725   200016 741300       CHECK_CONTR* STX1  ! OUTBLK$,,AUTO

      851    14954
      852    14955        /* Code */
      853    14956
      854    14957    4      IF TOT$IFAD.MAINTENANCE.CONTRACT

  14957  7 000726   000002 236000 xsym               LDQ     TOT$IFAD+2
         7 000727   020000 316003                    CANQ    8192,DU
         7 000730   000732 600000 7                  TZE     s:14959

      855    14958    4      THEN RETURN ;

  14958  7 000731   000001 702211                    TSX2  ! 1,X1

      856    14959    4      ELSE IF SUBSTR (TOT$ECP.TEST_REQ, 0, 3) = 'MMT' |

  14959  7 000732   400000 220003                    LDX0    -131072,DU
         7 000733   000060 222000 5                  LDX2    TOT$ECP
         7 000734   000013 102000 6                  CMPX2   SLTA_REQ+9
         7 000735   000737 600000 7                  TZE     s:14959+5
         7 000736   000000 220003                    LDX0    0,DU
         7 000737   400000 223003                    LDX3    -131072,DU
         7 000740   000060 236000 5                  LDQ     TOT$ECP
         7 000741   000014 676000 6                  ERQ     SLTA_REQ+10
         7 000742   000016 376000 8                  ANQ     14
         7 000743   000745 600000 7                  TZE     s:14959+11
         7 000744   000000 223003                    LDX3    0,DU
         7 000745   400000 224003                    LDX4    -131072,DU
         7 000746   000060 236000 5                  LDQ     TOT$ECP
         7 000747   000015 116000 6                  CMPQ    SLTA_REQ+11
         7 000750   000752 600000 7                  TZE     s:14959+16
         7 000751   000000 224003                    LDX4    0,DU
         7 000752   000000 636014                    EAQ     0,X4
         7 000753   200050 756100                    STQ     OUTBLK$+3,,AUTO
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:120  
         7 000754   000000 636013                    EAQ     0,X3
         7 000755   200050 276100                    ORQ     OUTBLK$+3,,AUTO
         7 000756   400000 223003                    LDX3    -131072,DU
         7 000757   200051 756100                    STQ     OUTBLK$+4,,AUTO
         7 000760   000060 236000 5                  LDQ     TOT$ECP
         7 000761   000016 116000 6                  CMPQ    SLTA_REQ+12
         7 000762   000764 600000 7                  TZE     s:14959+26
         7 000763   000000 223003                    LDX3    0,DU
         7 000764   000000 636013                    EAQ     0,X3
         7 000765   200051 276100                    ORQ     OUTBLK$+4,,AUTO
         7 000766   200052 756100                    STQ     OUTBLK$+5,,AUTO
         7 000767   000000 636010                    EAQ     0,X0
         7 000770   200052 276100                    ORQ     OUTBLK$+5,,AUTO
         7 000771   400000 220003                    LDX0    -131072,DU
         7 000772   040000 106400                    CMPC    fill='040'O
         7 000773   000060 000006 5                  ADSC9   TOT$ECP                  cn=0,n=6
         7 000774   000017 000006 6                  ADSC9   SLTA_REQ+13              cn=0,n=6
         7 000775   000777 600000 7                  TZE     s:14959+37
         7 000776   000000 220003                    LDX0    0,DU
         7 000777   200053 756100                    STQ     OUTBLK$+6,,AUTO
         7 001000   000000 636010                    EAQ     0,X0
         7 001001   200054 756100                    STQ     OUTBLK$+7,,AUTO
         7 001002   200053 236100                    LDQ     OUTBLK$+6,,AUTO
         7 001003   200054 276100                    ORQ     OUTBLK$+7,,AUTO
         7 001004   400000 220003                    LDX0    -131072,DU
         7 001005   040000 106400                    CMPC    fill='040'O
         7 001006   000060 000005 5                  ADSC9   TOT$ECP                  cn=0,n=5
         7 001007   000005 000005 6                  ADSC9   SLTA_REQ+3               cn=0,n=5
         7 001010   001012 600000 7                  TZE     s:14959+48
         7 001011   000000 220003                    LDX0    0,DU
         7 001012   200055 756100                    STQ     OUTBLK$+8,,AUTO
         7 001013   000000 636010                    EAQ     0,X0
         7 001014   200056 756100                    STQ     OUTBLK$+9,,AUTO
         7 001015   200055 236100                    LDQ     OUTBLK$+8,,AUTO
         7 001016   200056 276100                    ORQ     OUTBLK$+9,,AUTO
         7 001017   001021 600000 7                  TZE     s:14967

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:121  
      857    14960    4                 SUBSTR (TOT$ECP.TEST_REQ, 0, 4) = 'MEMT' |
      858    14961    4                 SUBSTR (TOT$ECP.TEST_REQ, 0, 4) = 'MOMT' |
      859    14962    4                 SUBSTR (TOT$ECP.TEST_REQ, 0, 2) = 'MW' |
      860    14963    4                 SUBSTR (TOT$ECP.TEST_REQ, 0, 6) = 'MLSTAL' |
      861    14964    4                 SUBSTR (TOT$ECP.TEST_REQ, 0, 5) = '$PACT'
      862    14965    4         THEN RETURN ;

  14965  7 001020   000001 702211                    TSX2  ! 1,X1

      863    14966    5         ELSE DO ;

      864    14967    5                 TOT_ERROR_CODE.ERR# = %E$NOTNDCONTRACT ;

  14967  7 001021   000025 236000 5                  LDQ     TOT_ERROR_CODE
         7 001022   000017 376000 8                  ANQ     15
         7 001023   004100 276007                    ORQ     2112,DL
         7 001024   000025 756000 5                  STQ     TOT_ERROR_CODE

      865    14968    5                 TOLTS_GETCMD.ERR_CODE = TOT_ERROR_CODE;

  14968  7 001025   000025 236000 5                  LDQ     TOT_ERROR_CODE
         7 001026   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      866    14969    5                 TOLTS_GETCMD.FLGLEV# = 4;

  14969  7 001027   000004 236003                    LDQ     4,DU
         7 001030   000006 552020 xsym               STBQ    TOLTS_GETCMD+6,'20'O

      867    14970    5                 CALL XUG$ERRMSG (TOLTS_GETCMD);

  14970  7 001031   000000 630400 8                  EPPR0   0
         7 001032   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 001033   000000 701000 xent               TSX1    XUG$ERRMSG
         7 001034   000000 011000                    NOP     0

      868    14971    5                 CALL TOT$RESTART ;

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:122  
  14971  7 001035   000002 631400 xsym               EPPR1   B_VECTNIL+2
         7 001036   000055 701000 7                  TSX1    s:14237
         7 001037   000000 011000                    NOP     0

      869    14972    5              END /* ELSE */ ;

      870    14973
      871    14974    4   END CHECK_CONTRACT ;

  14974  7 001040   200016 221300                    LDX1  ! OUTBLK$,,AUTO
         7 001041   000001 702211                    TSX2  ! 1,X1

      872    14975        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:123  
      873    14976        /*I* NAME:         SET_SYSTEM_TYPE
      874    14977             AUTHOR:       Kathy Larkin
      875    14978             PURPOSE:      Get system information
      876    14979             INTERFACE:    M$MONINFO
      877    14980                           XUG$ERRMSG - prints altret error message text
      878    14981                           M$ERR - exits TOLTS
      879    14982             PARAMETERS:   None passed.
      880    14983             DATA:         TOT$ECP.BOOT_CPU_TYPE
      881    14984             DESCRIPTION:  Calls  M$MONINFO  to  obtain information about
      882    14985                           the  type  of  CPU  the  system was booted on.
      883    14986
      884    14987                              DPS90
      885    14988                              DPS8000
      886    14989                              DPS8
      887    14990        */
      888    14991
      889    14992    3   SET_SYSTEM_TYPE: PROC ;

  14992  7 001042   200016 741300       SET_SYSTEM_* STX1  ! OUTBLK$,,AUTO

      890    14993
      891    14994           %FPT_MONINFO                   (FPTN        = GET_INFO,
      892    14995                                           SITEINFO    = SYSTEM_INFO);
      893    15010           %VLR_SITEINFO                  (FPTN        = SYSTEM_INFO);
      894    15029
      895    15030        /* Code */
      896    15031
      897    15032    4      CALL M$MONINFO (GET_INFO) WHENRETURN

  15032  7 001043   000124 630400 5                  EPPR0   GET_INFO
         7 001044   420023 713400                    CLIMB   alt,+8211
         7 001045   402400 401760                    pmme    nvectors=6
         7 001046   001053 702000 7                  TSX2    s:15039

      898    15033    5           DO;

      899    15034    5              TOT$ECP.BOOT_CPU_TYPE = SYSTEM_INFO.CPU_TYPE#;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:124  

  15034  7 001047   000227 236000 5                  LDQ     SYSTEM_INFO+55
         7 001050   000075 552010 5                  STBQ    TOT$ECP+13,'10'O

      900    15035    5              RETURN;

  15035  7 001051   200016 221300                    LDX1  ! OUTBLK$,,AUTO
         7 001052   000001 702211                    TSX2  ! 1,X1

      901    15036    5           END /* WHENRETURN DO */;
      902    15037    4      WHENALTRETURN
      903    15038    5           DO;

      904    15039    5              TOLTS_GETCMD.ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;

  15039  7 001053   000000 470400 xsym               LDP0    B$TCB$
         7 001054   000000 471500                    LDP1    0,,PR0
         7 001055   100102 236100                    LDQ     66,,PR1
         7 001056   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      905    15040    5              CALL XUG$ERRMSG (TOLTS_GETCMD);

  15040  7 001057   000000 630400 8                  EPPR0   0
         7 001060   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 001061   000000 701000 xent               TSX1    XUG$ERRMSG
         7 001062   000000 011000                    NOP     0

      906    15041    5              CALL M$ERR;

  15041  7 001063   000002 713400                    CLIMB   err
         7 001064   000000 401760                    pmme    nvectors=0

      907    15042    5           END /* WHENALTRETURN DO */;

      908    15043    4   END SET_SYSTEM_TYPE;

  15043  7 001065   200016 221300                    LDX1  ! OUTBLK$,,AUTO
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:125  
         7 001066   000001 702211                    TSX2  ! 1,X1

      909    15044        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:126  
      910    15045        /*I* NAME:         SET_SUBEXEC
      911    15046             INTERFACE:    None Called.
      912    15047             DESCRIPTION:  This routine sets the current TOLTS Subexecutive
      913    15048                           flag from information returned by XUG$GETCMD.
      914    15049        */
      915    15050
      916    15051    3   SET_SUBEXEC: PROC ;

  15051  7 001067   200016 741300       SET_SUBEXEC  STX1  ! OUTBLK$,,AUTO

      917    15052
      918    15053        /* Code */
      919    15054
      920    15055    5      DO CASE (CMDOUT.SUBLK$(0) -> CMDOUT.CODE) ;

  15055  7 001070   200011 470500                    LDP0    CMD$,,AUTO
         7 001071   000003 471500                    LDP1    3,,PR0
         7 001072   100000 236100                    LDQ     0,,PR1
         7 001073   777777 376007                    ANQ     -1,DL
         7 001074   000016 136007                    SBLQ    14,DL
         7 001075   000002 116007                    CMPQ    2,DL
         7 001076   001100 602006 7                  TNC     s:15055+8,QL
         7 001077   001105 710000 7                  TRA     s:15059
         7 001100   001102 710000 7                  TRA     s:15057
         7 001101   001102 710000 7                  TRA     s:15057

      921    15056    5         CASE (%NEW_IO, %SPUD) ;

      922    15057    5            TOT$ECP.SUBEXEC.CURRENT = %MOLTS ;

  15057  7 001102   000011 235007                    LDA     9,DL
         7 001103   000067 755000 5                  STA     TOT$ECP+7
         7 001104   001110 710000 7                  TRA     s:15061

      923    15058    5         CASE (ELSE) ;

      924    15059    5            TOT$ECP.SUBEXEC.CURRENT = CMDOUT.SUBLK$(0) -> CMDOUT.CODE ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:127  

  15059  7 001105   100000 236100                    LDQ     0,,PR1
         7 001106   777777 376007                    ANQ     -1,DL
         7 001107   000067 756000 5                  STQ     TOT$ECP+7

      925    15060    5      END /* CASE */ ;

      926    15061    4      RETURN ;

  15061  7 001110   000001 702211                    TSX2  ! 1,X1

      927    15062
      928    15063    4   END SET_SUBEXEC ;
      929    15064        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:128  
      930    15065        /*I* NAME:         CHECK_VALID_SUBEXEC
      931    15066             AUTHOR:       Kathy Larkin
      932    15067             PURPOSE:      Checks subexec validity for this system type
      933    15068             INTERFACE:    TOT$RESTART
      934    15069             PARAMETERS:   None passed.
      935    15070             DATA:         TOT$ECP.SUBEXEC.CURRENT - input/output
      936    15071                           TOT$ECP.BOOT_CPU_TYPE - input
      937    15072             DESCRIPTION:  Checks  to  see  if  the  requested subexec is
      938    15073                           permitted to run on  this system type.
      939    15074
      940    15075                           DPS90  -  PACT, POLTS, and SOLTS  tests  are
      941    15076                                     not supported under TOLTS.   If the
      942    15077                                     user attempts  to run  one of these
      943    15078                                     subexecs  on  a  DPS90 system, an
      944    15079                                     error message         will be
      945    15080                                     output, TOT$ECP.SUBEXEC.CURRENT will
      946    15081                                     be set to %NONE, and TOLTS will be
      947    15082                                     restarted.  Some MOLTS tests are run
      948    15083                                     under MSOS on  a DPS90 (MDRs and
      949    15084                                     ITRs),  but the  MOLTS subexec  is
      950    15085                                     responsible for screening the test
      951    15086                                     requests.
      952    15087
      953    15088                         DPS8000  -  PACT, and SOLTS  tests  are not
      954    15089                                     supported  under TOLTS.   If the
      955    15090                                     user attempts  to run  one of these
      956    15091                                     subexecs  on  a  DPS8000 system, an
      957    15092                                     error message         will be
      958    15093                                     output, TOT$ECP.SUBEXEC.CURRENT will
      959    15094                                     be set to %NONE, and TOLTS will be
      960    15095                                     restarted.
      961    15096
      962    15097        */
      963    15098
      964    15099    3   CHECK_VALID_SUBEXEC: PROC;

  15099  7 001111   200016 741300       CHECK_VALID* STX1  ! OUTBLK$,,AUTO
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:129  

      965    15100
      966    15101        /* Code */
      967    15102
      968    15103    5      DO CASE (TOT$ECP.BOOT_CPU_TYPE) ;

  15103  7 001112   000075 236000 5                  LDQ     TOT$ECP+13
         7 001113   000011 772000                    QRL     9
         7 001114   000777 376007                    ANQ     511,DL
         7 001115   000004 136007                    SBLQ    4,DL
         7 001116   000003 116007                    CMPQ    3,DL
         7 001117   001121 602006 7                  TNC     s:15103+7,QL
         7 001120   001206 710000 7                  TRA     s:15127
         7 001121   001124 710000 7                  TRA     s:15105
         7 001122   001124 710000 7                  TRA     s:15105
         7 001123   001156 710000 7                  TRA     s:15116

      969    15104    5         CASE ( %DPS90#, %DPS90XA#) ;

      970    15105    6            DO CASE (TOT$ECP.SUBEXEC.CURRENT);

  15105  7 001124   000067 235000 5                  LDA     TOT$ECP+7
         7 001125   000012 135007                    SBLA    10,DL
         7 001126   000004 115007                    CMPA    4,DL
         7 001127   001131 602005 7                  TNC     s:15105+5,AL
         7 001130   001206 710000 7                  TRA     s:15127
         7 001131   001135 710000 7                  TRA     s:15108
         7 001132   001135 710000 7                  TRA     s:15108
         7 001133   001135 710000 7                  TRA     s:15108
         7 001134   001135 710000 7                  TRA     s:15108

      971    15106    6               CASE (%COLTS, %MOLTS);

      972    15107    6               CASE (%PACT, %POLTS, %SLTA, %SOLTS);

      973    15108    6                  TOT$ECP.SUBEXEC.CURRENT = %NONE;

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:130  
  15108  7 001135   000067 450000 5                  STZ     TOT$ECP+7

      974    15109    6                  TOT_ERROR_CODE.ERR# = %E$NOTONDPS90;

  15109  7 001136   000025 236000 5                  LDQ     TOT_ERROR_CODE
         7 001137   000017 376000 8                  ANQ     15
         7 001140   004120 276007                    ORQ     2128,DL
         7 001141   000025 756000 5                  STQ     TOT_ERROR_CODE

      975    15110    6                  TOLTS_GETCMD.ERR_CODE = TOT_ERROR_CODE;

  15110  7 001142   000025 236000 5                  LDQ     TOT_ERROR_CODE
         7 001143   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      976    15111    6                  TOLTS_GETCMD.FLGLEV# = 4;

  15111  7 001144   000004 236003                    LDQ     4,DU
         7 001145   000006 552020 xsym               STBQ    TOLTS_GETCMD+6,'20'O

      977    15112    6                  CALL XUG$ERRMSG (TOLTS_GETCMD);

  15112  7 001146   000000 630400 8                  EPPR0   0
         7 001147   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 001150   000000 701000 xent               TSX1    XUG$ERRMSG
         7 001151   000000 011000                    NOP     0

      978    15113    6                  CALL TOT$RESTART;

  15113  7 001152   000002 631400 xsym               EPPR1   B_VECTNIL+2
         7 001153   000055 701000 7                  TSX1    s:14237
         7 001154   000000 011000                    NOP     0

      979    15114    6            END /* DO CASE DPS90 */;

  15114  7 001155   001206 710000 7                  TRA     s:15127

      980    15115    5         CASE (%DPS8000#) ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:131  

      981    15116    6            DO CASE (TOT$ECP.SUBEXEC.CURRENT);

  15116  7 001156   000067 235000 5                  LDA     TOT$ECP+7
         7 001157   000013 135007                    SBLA    11,DL
         7 001160   000003 115007                    CMPA    3,DL
         7 001161   001163 602005 7                  TNC     s:15116+5,AL
         7 001162   001206 710000 7                  TRA     s:15127
         7 001163   001166 710000 7                  TRA     s:15119
         7 001164   001166 710000 7                  TRA     s:15119
         7 001165   001166 710000 7                  TRA     s:15119

      982    15117    6               CASE (%COLTS, %MOLTS, %POLTS);

      983    15118    6               CASE (%PACT, %SLTA, %SOLTS);

      984    15119    6                  TOT$ECP.SUBEXEC.CURRENT = %NONE;

  15119  7 001166   000067 450000 5                  STZ     TOT$ECP+7

      985    15120    6                  TOT_ERROR_CODE.ERR# = %E$NOTONDPS8000;

  15120  7 001167   000025 236000 5                  LDQ     TOT_ERROR_CODE
         7 001170   000017 376000 8                  ANQ     15
         7 001171   004130 276007                    ORQ     2136,DL
         7 001172   000025 756000 5                  STQ     TOT_ERROR_CODE

      986    15121    6                  TOLTS_GETCMD.ERR_CODE = TOT_ERROR_CODE;

  15121  7 001173   000025 236000 5                  LDQ     TOT_ERROR_CODE
         7 001174   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      987    15122    6                  TOLTS_GETCMD.FLGLEV# = 4;

  15122  7 001175   000004 236003                    LDQ     4,DU
         7 001176   000006 552020 xsym               STBQ    TOLTS_GETCMD+6,'20'O

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:132  
      988    15123    6                  CALL XUG$ERRMSG (TOLTS_GETCMD);

  15123  7 001177   000000 630400 8                  EPPR0   0
         7 001200   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 001201   000000 701000 xent               TSX1    XUG$ERRMSG
         7 001202   000000 011000                    NOP     0

      989    15124    6                  CALL TOT$RESTART;

  15124  7 001203   000002 631400 xsym               EPPR1   B_VECTNIL+2
         7 001204   000055 701000 7                  TSX1    s:14237
         7 001205   000000 011000                    NOP     0

      990    15125    6            END /* DO CASE DPS80 */ ;

      991    15126    5      END /* DO CASE BOOT_CPU_TYPE */ ;

      992    15127    4      RETURN;

  15127  7 001206   200016 221300                    LDX1  ! OUTBLK$,,AUTO
         7 001207   000001 702211                    TSX2  ! 1,X1

      993    15128    4   END CHECK_VALID_SUBEXEC;
      994    15129        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:133  
      995    15130        /*I* NAME:         CHECK_SUBEXEC
      996    15131             INTERFACE:    XUG$ERRMSG
      997    15132             DESCRIPTION:  When a TOLTS Subexecutive is active, only TEST
      998    15133                           requests for the active Subexecutive are allowed.
      999    15134        */
     1000    15135
     1001    15136    3   CHECK_SUBEXEC: PROC ALTRET ;

  15136  7 001210   200016 741300       CHECK_SUBEX* STX1  ! OUTBLK$,,AUTO

     1002    15137
     1003    15138        /* Code */
     1004    15139
     1005    15140    5      DO CASE (TOT$ECP.SUBEXEC.CURRENT) ;

  15140  7 001211   000067 235000 5                  LDA     TOT$ECP+7
         7 001212   000011 135007                    SBLA    9,DL
         7 001213   000001 115007                    CMPA    1,DL
         7 001214   001216 602005 7                  TNC     s:15140+5,AL
         7 001215   001253 710000 7                  TRA     s:15148
         7 001216   001217 710000 7                  TRA     s:15142

     1006    15141    5         CASE (%MOLTS) ;

     1007    15142    5            IF CMDOUT.SUBLK$(0) -> CMDOUT.CODE = %MOLTS |

  15142  7 001217   200011 470500                    LDP0    CMD$,,AUTO
         7 001220   000003 471500                    LDP1    3,,PR0
         7 001221   400000 220003                    LDX0    -131072,DU
         7 001222   100000 722100                    LXL2    0,,PR1
         7 001223   000011 102003                    CMPX2   9,DU
         7 001224   001226 600000 7                  TZE     s:15142+7
         7 001225   000000 220003                    LDX0    0,DU
         7 001226   400000 223003                    LDX3    -131072,DU
         7 001227   000016 102003                    CMPX2   14,DU
         7 001230   001232 600000 7                  TZE     s:15142+11
         7 001231   000000 223003                    LDX3    0,DU
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:134  
         7 001232   000000 636013                    EAQ     0,X3
         7 001233   200050 756100                    STQ     OUTBLK$+3,,AUTO
         7 001234   000000 636010                    EAQ     0,X0
         7 001235   200050 276100                    ORQ     OUTBLK$+3,,AUTO
         7 001236   000003 471500                    LDP1    3,,PR0
         7 001237   400000 220003                    LDX0    -131072,DU
         7 001240   100000 722100                    LXL2    0,,PR1
         7 001241   000017 102003                    CMPX2   15,DU
         7 001242   001244 600000 7                  TZE     s:15142+21
         7 001243   000000 220003                    LDX0    0,DU
         7 001244   200051 756100                    STQ     OUTBLK$+4,,AUTO
         7 001245   000000 636010                    EAQ     0,X0
         7 001246   200052 756100                    STQ     OUTBLK$+5,,AUTO
         7 001247   200051 236100                    LDQ     OUTBLK$+4,,AUTO
         7 001250   200052 276100                    ORQ     OUTBLK$+5,,AUTO
         7 001251   001262 600000 7                  TZE     s:15153

     1008    15143    5                    CMDOUT.SUBLK$(0) -> CMDOUT.CODE = %NEW_IO |
     1009    15144    5                    CMDOUT.SUBLK$(0) -> CMDOUT.CODE = %SPUD
     1010    15145    5            THEN RETURN ;

  15145  7 001252   000001 702211                    TSX2  ! 1,X1

     1011    15146    5            ELSE /* not a MOLTS or an NIO request for the MOLTS subexecutive */ ;
     1012    15147    5         CASE (ELSE) ;

     1013    15148    5            IF CMDOUT.SUBLK$(0) -> CMDOUT.CODE = TOT$ECP.SUBEXEC.CURRENT

  15148  7 001253   200011 470500                    LDP0    CMD$,,AUTO
         7 001254   000003 471500                    LDP1    3,,PR0
         7 001255   100000 236100                    LDQ     0,,PR1
         7 001256   777777 376007                    ANQ     -1,DL
         7 001257   000067 116000 5                  CMPQ    TOT$ECP+7
         7 001260   001262 601000 7                  TNZ     s:15153

     1014    15149    5            THEN RETURN ;

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:135  
  15149  7 001261   000001 702211                    TSX2  ! 1,X1

     1015    15150    5            ELSE /* not a test request for the running subexecutive */ ;
     1016    15151    5      END /* CASE */ ;

     1017    15152
     1018    15153    4      TOT_ERROR_CODE.ERR# = %E$BADSUBEXEC ;

  15153  7 001262   000025 236000 5                  LDQ     TOT_ERROR_CODE
         7 001263   000017 376000 8                  ANQ     15
         7 001264   004020 276007                    ORQ     2064,DL
         7 001265   000025 756000 5                  STQ     TOT_ERROR_CODE

     1019    15154    4      TOLTS_GETCMD.ERR_CODE = TOT_ERROR_CODE;

  15154  7 001266   000025 236000 5                  LDQ     TOT_ERROR_CODE
         7 001267   000010 756000 xsym               STQ     TOLTS_GETCMD+8

     1020    15155    4      CALL XUG$ERRMSG (TOLTS_GETCMD);

  15155  7 001270   000000 630400 8                  EPPR0   0
         7 001271   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 001272   000000 701000 xent               TSX1    XUG$ERRMSG
         7 001273   000000 011000                    NOP     0

     1021    15156    4      ALTRETURN ;

  15156  7 001274   200016 221300                    LDX1  ! OUTBLK$,,AUTO
         7 001275   000000 702211                    TSX2  ! 0,X1

     1022    15157
     1023    15158    4   END CHECK_SUBEXEC ;
     1024    15159        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:136  
     1025    15160        /*I* NAME:         CHECK_DEBUG
     1026    15161             INTERFACE:    XUG$ERRMSG
     1027    15162             DESCRIPTION:  This procedure ensures that only one request is
     1028    15163                           run when TOLTS debug mode is in effect.
     1029    15164                           Only END, WRAP UP, OPTION, or LIST ALL
     1030    15165                           requests are allowed.
     1031    15166        */
     1032    15167
     1033    15168    3   CHECK_DEBUG: PROC ALTRET ;

  15168  7 001276   200016 741300       CHECK_DEBUG  STX1  ! OUTBLK$,,AUTO

     1034    15169
     1035    15170        /* Code */
     1036    15171
     1037    15172    4      IF TOQ$DCP.PF.ENABLED

  15172  7 001277   000000 234000 xsym               SZN     TOQ$DCP
         7 001300   001347 605000 7                  TPL     s:15184

     1038    15173    4      THEN IF TOT$ECP.TEST_REQ_(1) = 'E' |

  15173  7 001301   400000 220003                    LDX0    -131072,DU
         7 001302   000060 236000 5                  LDQ     TOT$ECP
         7 001303   000777 376003                    ANQ     511,DU
         7 001304   000105 116003                    CMPQ    69,DU
         7 001305   001307 600000 7                  TZE     s:15173+6
         7 001306   000000 220003                    LDX0    0,DU
         7 001307   400000 222003                    LDX2    -131072,DU
         7 001310   000060 236000 5                  LDQ     TOT$ECP
         7 001311   000777 376003                    ANQ     511,DU
         7 001312   000117 116003                    CMPQ    79,DU
         7 001313   001315 600000 7                  TZE     s:15173+12
         7 001314   000000 222003                    LDX2    0,DU
         7 001315   000000 636012                    EAQ     0,X2
         7 001316   200050 756100                    STQ     OUTBLK$+3,,AUTO
         7 001317   000000 636010                    EAQ     0,X0
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:137  
         7 001320   200050 276100                    ORQ     OUTBLK$+3,,AUTO
         7 001321   400000 220003                    LDX0    -131072,DU
         7 001322   200051 756100                    STQ     OUTBLK$+4,,AUTO
         7 001323   000060 236000 5                  LDQ     TOT$ECP
         7 001324   000777 376003                    ANQ     511,DU
         7 001325   000114 116003                    CMPQ    76,DU
         7 001326   001330 600000 7                  TZE     s:15173+23
         7 001327   000000 220003                    LDX0    0,DU
         7 001330   000000 636010                    EAQ     0,X0
         7 001331   200051 276100                    ORQ     OUTBLK$+4,,AUTO
         7 001332   001347 601000 7                  TNZ     s:15184

     1039    15174    4                 TOT$ECP.TEST_REQ_(1) = 'O' |
     1040    15175    4                 TOT$ECP.TEST_REQ_(1) = 'L'
     1041    15176    4         THEN /* Test End request is allowed. */ ;
     1042    15177    5         ELSE DO ;

     1043    15178    5                 TOT_ERROR_CODE.ERR# = %E$ONLYONE ;

  15178  7 001333   000025 236000 5                  LDQ     TOT_ERROR_CODE
         7 001334   000017 376000 8                  ANQ     15
         7 001335   004040 276007                    ORQ     2080,DL
         7 001336   000025 756000 5                  STQ     TOT_ERROR_CODE

     1044    15179    5                 TOLTS_GETCMD.ERR_CODE = TOT_ERROR_CODE;

  15179  7 001337   000025 236000 5                  LDQ     TOT_ERROR_CODE
         7 001340   000010 756000 xsym               STQ     TOLTS_GETCMD+8

     1045    15180    5                 CALL XUG$ERRMSG (TOLTS_GETCMD) ;

  15180  7 001341   000000 630400 8                  EPPR0   0
         7 001342   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 001343   000000 701000 xent               TSX1    XUG$ERRMSG
         7 001344   000000 011000                    NOP     0

     1046    15181    5                 ALTRETURN ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:138  

  15181  7 001345   200016 221300                    LDX1  ! OUTBLK$,,AUTO
         7 001346   000000 702211                    TSX2  ! 0,X1

     1047    15182    5              END /* ELSE */ ;
     1048    15183    4      ELSE /* All requests are allowed when TOLTS is not in DEBUG mode. */ ;
     1049    15184    4      RETURN ;

  15184  7 001347   000001 702211                    TSX2  ! 1,X1

     1050    15185
     1051    15186    4   END CHECK_DEBUG ;
     1052    15187        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:139  
     1053    15188        /*I*  NAME:        BUILD_INIT_SUBEXEC
     1054    15189              AUTHOR:      Scott S. Sheppard
     1055    15190              PURPOSE:     Initialize Subexecutive Request
     1056    15191              INTERFACE:   TOD$DISPATCHER
     1057    15192              INPUT:       REQUEST_TYPE - build as opposed to service
     1058    15193                           SERVICE_CODE - initialize type
     1059    15194                           QUEUE_ENTRY  - not used but passed
     1060    15195              OUTPUT:      Entry placed in dispatcher queue
     1061    15196              SCRATCH:     No alteration side-effects.
     1062    15197              DESCRIPTION: This procedure places an entry in the dispatcher
     1063    15198                           queue  which requests  the initialization  of  a
     1064    15199                           TOLTS subexecutive.
     1065    15200        */
     1066    15201
     1067    15202    3   BUILD_INIT_SUBEXEC: PROC ;

  15202  7 001350   200016 741300       BUILD_INIT_* STX1  ! OUTBLK$,,AUTO

     1068    15203
     1069    15204        /* Code */
     1070    15205
     1071    15206    4      REQUEST_TYPE = %DRT_BUILD;

  15206  7 001351   000001 235007                    LDA     1,DL
         7 001352   200003 755100                    STA     REQUEST_TYPE,,AUTO

     1072    15207    4      SERVICE_CODE = %DSC_INIT;

  15207  7 001353   000001 220003                    LDX0    1,DU
         7 001354   200004 740100                    STX0    SERVICE_CODE,,AUTO

     1073    15208    4      QUEUE_ENTRY = '0'B;

  15208  7 001355   000100 100400                    MLR     fill='000'O
         7 001356   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         7 001357   200005 000014                    ADSC9   QUEUE_ENTRY,,AUTO        cn=0,n=12

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:140  
     1074    15209    4      CALL TOD$DISPATCHER (REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY_BCD) ;

  15209  7 001360   200005 630500                    EPPR0   QUEUE_ENTRY,,AUTO
         7 001361   200052 450500                    STP0    OUTBLK$+5,,AUTO
         7 001362   200004 631500                    EPPR1   SERVICE_CODE,,AUTO
         7 001363   200051 451500                    STP1    OUTBLK$+4,,AUTO
         7 001364   200003 633500                    EPPR3   REQUEST_TYPE,,AUTO
         7 001365   200050 453500                    STP3    OUTBLK$+3,,AUTO
         7 001366   200050 630500                    EPPR0   OUTBLK$+3,,AUTO
         7 001367   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 001370   000000 701000 xent               TSX1    TOD$DISPATCHER
         7 001371   000000 011000                    NOP     0

     1075    15210    4      RETURN ;

  15210  7 001372   200016 221300                    LDX1  ! OUTBLK$,,AUTO
         7 001373   000001 702211                    TSX2  ! 1,X1

     1076    15211
     1077    15212    4   END BUILD_INIT_SUBEXEC ;
     1078    15213        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:141  
     1079    15214        /*I*  NAME:        BUILD_ISC_WRITE
     1080    15215              AUTHOR:      Scott S. Sheppard
     1081    15216              PURPOSE:     Interslave Write Request
     1082    15217              INTERFACE:   TOD$DISPATCHER
     1083    15218              INPUT:       REQUEST_TYPE - build as opposed to service
     1084    15219                           SERVICE_CODE - interslave write
     1085    15220                           QUEUE_ENTRY  - teest request
     1086    15221              OUTPUT:      Entry placed in dispatcher queue
     1087    15222              SCRATCH:     No alteration side-effects.
     1088    15223              DESCRIPTION: This procedure places an entry in the dispatcher
     1089    15224                           queue  which requests  that an interslave  write
     1090    15225                           be performed for the test request.
     1091    15226        */
     1092    15227        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:142  
     1093    15228    3   BUILD_ISC_WRITE: PROC ;

  15228  7 001374   200016 741300       BUILD_ISC_W* STX1  ! OUTBLK$,,AUTO

     1094    15229
     1095    15230    4      DCL SLTA_REQ    CHAR (12) CONSTANT CALIGNED INIT ('S10A') ;
     1096    15231    4      DCL CHAR_COUNT  SBIN STATIC ALIGNED;
     1097    15232
     1098    15233        /* Code */
     1099    15234
     1100    15235    4      IF TOT$ECP.SUBEXEC.CURRENT = %PACT

  15235  7 001375   000067 235000 5                  LDA     TOT$ECP+7
         7 001376   000014 115007                    CMPA    12,DL
         7 001377   001442 600000 7                  TZE     s:15250

     1101    15236    4      THEN /* None needed for $PACT requests */ ;
     1102    15237    5      ELSE DO ;

     1103    15238    5              REQUEST_TYPE = %DRT_BUILD;

  15238  7 001400   000001 236007                    LDQ     1,DL
         7 001401   200003 756100                    STQ     REQUEST_TYPE,,AUTO

     1104    15239    5              SERVICE_CODE = %DSC_ISC;

  15239  7 001402   000002 220003                    LDX0    2,DU
         7 001403   200004 740100                    STX0    SERVICE_CODE,,AUTO

     1105    15240    5              QUEUE_ENTRY_BCD = '0'B;

  15240  7 001404   000100 100400                    MLR     fill='000'O
         7 001405   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         7 001406   200005 000014                    ADSC9   QUEUE_ENTRY,,AUTO        cn=0,n=12

     1106    15241    5              CHAR_COUNT = 11;

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:143  
  15241  7 001407   000013 235007                    LDA     11,DL
         7 001410   000236 755000 5                  STA     CHAR_COUNT

     1107    15242    5              IF TOT$ECP.SUBEXEC.CURRENT = %SLTA

  15242  7 001411   000067 235000 5                  LDA     TOT$ECP+7
         7 001412   000015 115007                    CMPA    13,DL
         7 001413   001421 601000 7                  TNZ     s:15245

     1108    15243    5              THEN CALL TOT$ASCII_BCD (SLTA_REQ,

  15243  7 001414   000020 630400 8                  EPPR0   16
         7 001415   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 001416   000000 701000 xent               TSX1    TOT$ASCII_BCD
         7 001417   000000 011000                    NOP     0
         7 001420   001425 710000 7                  TRA     s:15247

     1109    15244    5                         TEST_REQ_BCD.TEST_BCD, CHAR_COUNT) ;
     1110    15245    5              ELSE CALL TOT$ASCII_BCD (TOT$ECP.TEST_REQ,

  15245  7 001421   000023 630400 8                  EPPR0   19
         7 001422   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 001423   000000 701000 xent               TSX1    TOT$ASCII_BCD
         7 001424   000000 011000                    NOP     0

     1111    15246    5                         TEST_REQ_BCD.TEST_BCD, CHAR_COUNT) ;
     1112    15247    5              QUEUE_ENTRY_BCD.TEST_REQUEST = TEST_REQ_BCD ;

  15247  7 001425   000000 237000 5                  LDAQ    TEST_REQ_BCD
         7 001426   200005 755100                    STA     QUEUE_ENTRY,,AUTO
         7 001427   200006 756100                    STQ     QUEUE_ENTRY+1,,AUTO

     1113    15248    5              CALL TOD$DISPATCHER (REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY_BCD) ;

  15248  7 001430   200005 630500                    EPPR0   QUEUE_ENTRY,,AUTO
         7 001431   200052 450500                    STP0    OUTBLK$+5,,AUTO
         7 001432   200004 631500                    EPPR1   SERVICE_CODE,,AUTO
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:144  
         7 001433   200051 451500                    STP1    OUTBLK$+4,,AUTO
         7 001434   200003 633500                    EPPR3   REQUEST_TYPE,,AUTO
         7 001435   200050 453500                    STP3    OUTBLK$+3,,AUTO
         7 001436   200050 630500                    EPPR0   OUTBLK$+3,,AUTO
         7 001437   000021 631400 xsym               EPPR1   B_VECTNIL+17
         7 001440   000000 701000 xent               TSX1    TOD$DISPATCHER
         7 001441   000000 011000                    NOP     0

     1114    15249    5           END /* ELSE */ ;

     1115    15250    4      RETURN ;

  15250  7 001442   200016 221300                    LDX1  ! OUTBLK$,,AUTO
         7 001443   000001 702211                    TSX2  ! 1,X1

     1116    15251
     1117    15252    4   END BUILD_ISC_WRITE ;
     1118    15253    3   END PROCESS_TEST_REQ ;

  15253  7 001444   200014 221300                    LDX1  ! SEGTBL$+1,,AUTO
         7 001445   000001 702211                    TSX2  ! 1,X1

     1119    15254        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:145  
     1120    15255        /*I* NAME:         PROCESS_MSG_REQ
     1121    15256             AUTHOR:       Scott S. Sheppard
     1122    15257             PURPOSE:      Sends the Operator A Message
     1123    15258             INTERFACE:    SETUP_BUFFER
     1124    15259                           ISSUE_OPERATOR_MESSAGE
     1125    15260                           PRINT_OPERATOR_REPLY
     1126    15261             PARAMETERS:   None passed.
     1127    15262             DATA:         No external data accessed.
     1128    15263             DESCRIPTION:  The  MSG  command  has  been  implemented into
     1129    15264                           TOLTS  so  that  a  TOLTS  user  can  send the
     1130    15265                           operator  a  message  without  exitting TOLTS.
     1131    15266                           This procedure sets up a buffer from the parse
     1132    15267                           control  blocks and sends  the message. If the
     1133    15268                           message  ends in  a question  mark, a reply is
     1134    15269                           expected and this reply is printed.
     1135    15270        */
     1136    15271        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:146  
     1137    15272    2   PROCESS_MSG_REQ: PROC ;

  15272  7 001446   200014 741300       PROCESS_MSG* STX1  ! SEGTBL$+1,,AUTO

     1138    15273
     1139    15274    3      DCL 1 BUFFER,
     1140    15275    3            2 REPLY_PENDING          BIT (1) CALIGNED,
     1141    15276    3            2 LGTH                   UBIN BYTE CALIGNED,
     1142    15277    3            2 TEXT_                  CHAR (81) CALIGNED,
     1143    15278    3            2 TEXT (0:80) REDEF TEXT_ CHAR (1) CALIGNED,
     1144    15279    3            2 REPLY,
     1145    15280    3              3 TYC                  UBIN WORD ALIGNED,
     1146    15281    3              3 LGTH                 UBIN WORD ALIGNED ;
     1147    15282
     1148    15283        /* Code */
     1149    15284
     1150    15285    3      CALL SETUP_BUFFER ALTRET (ERROR) ;

  15285  7 001447   001461 701000 7                  TSX1    SETUP_BUFFER
         7 001450   001457 702000 7                  TSX2    ERROR

     1151    15286    3      CALL ISSUE_OPERATOR_MESSAGE ALTRET (ERROR) ;

  15286  7 001451   001537 701000 7                  TSX1    ISSUE_OPERATOR_MESSAGE
         7 001452   001457 702000 7                  TSX2    ERROR

     1152    15287    3      CALL PRINT_OPERATOR_REPLY ;

  15287  7 001453   001610 701000 7                  TSX1    PRINT_OPERATOR_REPLY
         7 001454   000000 011000                    NOP     0

     1153    15288    3      RETURN ;

  15288  7 001455   200014 221300                    LDX1  ! SEGTBL$+1,,AUTO
         7 001456   000001 702211                    TSX2  ! 1,X1

     1154    15289
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:147  
     1155    15290    3   ERROR:
     1156    15291    3      RETURN ;

  15291  7 001457   200014 221300       ERROR        LDX1  ! SEGTBL$+1,,AUTO
         7 001460   000001 702211                    TSX2  ! 1,X1

     1157    15292
     1158    15293        /* END PROCESS_MSG_REQ */
     1159    15294        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:148  
     1160    15295        /*I* NAME:         SETUP_BUFFER
     1161    15296             AUTHOR:       Scott S. Sheppard
     1162    15297             PURPOSE:      Sets up Message Buffer from User Input
     1163    15298             INTERFACE:    None called.
     1164    15299             PARAMETERS:   None passed.
     1165    15300             DATA:         CMD$ - input
     1166    15301                           BUFFER - output
     1167    15302             DESCRIPTION:  This procedure sets up the message buffer from
     1168    15303                           the   parse   control   blocks   returned   by
     1169    15304                           XUG$GETCMD.  The list of  blocks is pointed to
     1170    15305                           by  the  pointer  CMD$.  The  various parts of
     1171    15306                           BUFFER are set appropriately.
     1172    15307        */
     1173    15308        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:149  
     1174    15309    3   SETUP_BUFFER: PROC ALTRET ;

  15309  7 001461   200044 741300       SETUP_BUFFER STX1  ! PREFIX_LGTH+21,,AUTO

     1175    15310
     1176    15311    4      DCL OUTBLK$                    PTR ALIGNED ;
     1177    15312           %PARSE$OUT (STCLASS = BASED) ;
     1178    15357           %PARSE$SYM (STCLASS = BASED) ;
     1179    15395
     1180    15396        /* Code */
     1181    15397
     1182    15398    4      OUTBLK$ = CMD$ -> OUT$BLK.SUBLK$(0) ;

  15398  7 001462   200011 470500                    LDP0    CMD$,,AUTO
         7 001463   000003 236100                    LDQ     3,,PR0
         7 001464   200045 756100                    STQ     OUTBLK$,,AUTO

     1183    15399    4      IF OUTBLK$ -> OUT$SYM.COUNT < 81

  15399  7 001465   200045 471500                    LDP1    OUTBLK$,,AUTO
         7 001466   100004 236100                    LDQ     4,,PR1
         7 001467   777000 376003                    ANQ     -512,DU
         7 001470   121000 116003                    CMPQ    41472,DU
         7 001471   001523 603000 7                  TRC     s:15410

     1184    15400    5      THEN DO ;

     1185    15401    5              BUFFER.LGTH = OUTBLK$ -> OUT$SYM.COUNT ;

  15401  7 001472   100004 236100                    LDQ     4,,PR1
         7 001473   000011 772000                    QRL     9
         7 001474   200015 552120                    STBQ    BUFFER,'20'O,AUTO

     1186    15402    5              BUFFER.TEXT_ = OUTBLK$ -> OUT$SYM.TEXT ;

  15402  7 001475   100004 236100                    LDQ     4,,PR1
         7 001476   000033 772000                    QRL     27
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:150  
         7 001477   000000 620006                    EAX0    0,QL
         7 001500   040100 100540                    MLR     fill='040'O
         7 001501   100004 200010                    ADSC9   4,,PR1                   cn=1,n=*X0
         7 001502   200015 400121                    ADSC9   BUFFER,,AUTO             cn=2,n=81

     1187    15403    5              IF BUFFER.TEXT(BUFFER.LGTH - 1) = '?'

  15403  7 001503   200015 236100                    LDQ     BUFFER,,AUTO
         7 001504   000022 772000                    QRL     18
         7 001505   000777 376007                    ANQ     511,DL
         7 001506   040000 106506                    CMPC    fill='040'O
         7 001507   200015 200001                    ADSC9   BUFFER,Q,AUTO            cn=1,n=1
         7 001510   000026 000001 8                  ADSC9   22                       cn=0,n=1
         7 001511   001515 601000 7                  TNZ     s:15405

     1188    15404    5              THEN BUFFER.REPLY_PENDING = %TRUE ;

  15404  7 001512   400000 236003                    LDQ     -131072,DU
         7 001513   200015 256100                    ORSQ    BUFFER,,AUTO
         7 001514   001517 710000 7                  TRA     s:15406

     1189    15405    5              ELSE BUFFER.REPLY_PENDING = %FALSE ;

  15405  7 001515   000031 236000 xsym               LDQ     B_VECTNIL+25
         7 001516   200015 356100                    ANSQ    BUFFER,,AUTO

     1190    15406    5              BUFFER.REPLY = '0'O ;

  15406  7 001517   000000 235003                    LDA     0,DU
         7 001520   000000 236003                    LDQ     0,DU
         7 001521   200042 757100                    STAQ    PREFIX_LGTH+19,,AUTO

     1191    15407    5              RETURN ;

  15407  7 001522   000001 702211                    TSX2  ! 1,X1

     1192    15408    5           END /* THEN */ ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:151  
     1193    15409    5      ELSE DO ;

     1194    15410    5              TOT_ERROR_CODE.ERR# = %E$MSGTOOLONG ;

  15410  7 001523   000025 236000 5                  LDQ     TOT_ERROR_CODE
         7 001524   000017 376000 8                  ANQ     15
         7 001525   004060 276007                    ORQ     2096,DL
         7 001526   000025 756000 5                  STQ     TOT_ERROR_CODE

     1195    15411    5              TOLTS_GETCMD.ERR_CODE = TOT_ERROR_CODE;

  15411  7 001527   000025 236000 5                  LDQ     TOT_ERROR_CODE
         7 001530   000010 756000 xsym               STQ     TOLTS_GETCMD+8

     1196    15412    5              CALL XUG$ERRMSG (TOLTS_GETCMD) ;

  15412  7 001531   000000 630400 8                  EPPR0   0
         7 001532   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 001533   000000 701000 xent               TSX1    XUG$ERRMSG
         7 001534   000000 011000                    NOP     0

     1197    15413    5              ALTRETURN ;

  15413  7 001535   200044 221300                    LDX1  ! PREFIX_LGTH+21,,AUTO
         7 001536   000000 702211                    TSX2  ! 0,X1

     1198    15414    5           END /* ELSE */ ;
     1199    15415
     1200    15416    4   END SETUP_BUFFER ;
     1201    15417        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:152  
     1202    15418        /*I* NAME:         ISSUE_OPERATOR_MESSAGE
     1203    15419             AUTHOR:       Scott S. Sheppard
     1204    15420             PURPOSE:      Sends Message / Receives Reply
     1205    15421             INTERFACE:    M$KEYIN
     1206    15422                           XUG$ERRMSG
     1207    15423             PARAMETERS:   None passed.
     1208    15424             DATA:         BUFFER - input / output
     1209    15425             DESCRIPTION:  This procedure actually sends the message to
     1210    15426                           the operator's console.
     1211    15427        */
     1212    15428
     1213    15429    3   ISSUE_OPERATOR_MESSAGE: PROC ALTRET ;

  15429  7 001537   200044 741300       ISSUE_OPERA* STX1  ! PREFIX_LGTH+21,,AUTO

     1214    15430
     1215    15431           %FPT_KEYIN (FPTN    = SEND_MSG,
     1216    15432                       OCTYPE  = DEVICE) ;
     1217    15451
     1218    15452        /* Code */
     1219    15453
     1220    15454    4      SEND_MSG.MESS_ = VECTOR (SUBSTR (BUFFER.TEXT_, 0, BUFFER.LGTH)) ;

  15454  7 001540   200015 220100                    LDX0    BUFFER,,AUTO
         7 001541   000777 360003                    ANX0    511,DU
         7 001542   000000 635010                    EAA     0,X0
         7 001543   000002 771000                    ARL     2
         7 001544   000140 135007                    SBLA    96,DL
         7 001545   200050 452500                    STP2    OUTBLK$+3,,AUTO
         7 001546   200050 236100                    LDQ     OUTBLK$+3,,AUTO
         7 001547   000027 036000 8                  ADLQ    23
         7 001550   000242 757000 5                  STAQ    SEND_MSG+2

     1221    15455    4      IF BUFFER.REPLY_PENDING

  15455  7 001551   200015 234100                    SZN     BUFFER,,AUTO
         7 001552   001561 605000 7                  TPL     s:15457
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:153  

     1222    15456    4      THEN SEND_MSG.REPLY_ = VECTOR (BUFFER.TEXT_) ;

  15456  7 001553   000030 235000 8                  LDA     24
         7 001554   200050 452500                    STP2    OUTBLK$+3,,AUTO
         7 001555   200050 236100                    LDQ     OUTBLK$+3,,AUTO
         7 001556   000027 036000 8                  ADLQ    23
         7 001557   000244 757000 5                  STAQ    SEND_MSG+4
         7 001560   001563 710000 7                  TRA     s:15458

     1223    15457    4      ELSE SEND_MSG.REPLY_ = VECTOR (NIL) ;

  15457  7 001561   000032 237000 8                  LDAQ    26
         7 001562   000244 757000 5                  STAQ    SEND_MSG+4

     1224    15458    4      SEND_MSG.RESULTS_ = VECTOR (BUFFER.REPLY) ;

  15458  7 001563   000006 235000 8                  LDA     6
         7 001564   200050 452500                    STP2    OUTBLK$+3,,AUTO
         7 001565   200050 236100                    LDQ     OUTBLK$+3,,AUTO
         7 001566   000042 036003                    ADLQ    34,DU
         7 001567   000246 757000 5                  STAQ    SEND_MSG+6

     1225    15459    4      CALL M$KEYIN (SEND_MSG) ALTRET (ERROR) ;

  15459  7 001570   000240 630400 5                  EPPR0   SEND_MSG
         7 001571   520000 713400                    CLIMB   alt,+40960
         7 001572   401400 401760                    pmme    nvectors=4
         7 001573   001576 702000 7                  TSX2    ERROR

     1226    15460    4      RETURN ;

  15460  7 001574   200044 221300                    LDX1  ! PREFIX_LGTH+21,,AUTO
         7 001575   000001 702211                    TSX2  ! 1,X1

     1227    15461
     1228    15462    4   ERROR:
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:154  
     1229    15463    4      TOLTS_GETCMD.ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR ;

  15463  7 001576   000000 470400 xsym  ERROR        LDP0    B$TCB$
         7 001577   000000 471500                    LDP1    0,,PR0
         7 001600   100102 236100                    LDQ     66,,PR1
         7 001601   000010 756000 xsym               STQ     TOLTS_GETCMD+8

     1230    15464    4      CALL XUG$ERRMSG (TOLTS_GETCMD);

  15464  7 001602   000000 630400 8                  EPPR0   0
         7 001603   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 001604   000000 701000 xent               TSX1    XUG$ERRMSG
         7 001605   000000 011000                    NOP     0

     1231    15465    4      ALTRETURN ;

  15465  7 001606   200044 221300                    LDX1  ! PREFIX_LGTH+21,,AUTO
         7 001607   000000 702211                    TSX2  ! 0,X1

     1232    15466
     1233    15467    4   END ISSUE_OPERATOR_MESSAGE ;
     1234    15468        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:155  
     1235    15469        /*I* NAME:         PRINT_OPERATOR_REPLY
     1236    15470             AUTHOR:       Scott S. Sheppard
     1237    15471             PURPOSE:      Prints the operator's reply
     1238    15472             INTERFACE:    CONSOLE_OUT
     1239    15473             PARAMETERS:   None passed.
     1240    15474             DATA:         BUFFER - input
     1241    15475             DESCRIPTION:  This  procedure prints  the response  input by
     1242    15476                           the operator when one was requested.
     1243    15477        */
     1244    15478
     1245    15479    3   PRINT_OPERATOR_REPLY: PROC ;

  15479  7 001610   200044 741300       PRINT_OPERA* STX1  ! PREFIX_LGTH+21,,AUTO

     1246    15480
     1247    15481        /* Code */
     1248    15482
     1249    15483    4      IF BUFFER.REPLY_PENDING

  15483  7 001611   200015 234100                    SZN     BUFFER,,AUTO
         7 001612   001624 605000 7                  TPL     s:15490

     1250    15484    5      THEN DO ;

     1251    15485    5              CONSOLE_FPT.BUF_ =

  15485  7 001613   200043 235100                    LDA     PREFIX_LGTH+20,,AUTO
         7 001614   000020 735000                    ALS     16
         7 001615   000140 135007                    SBLA    96,DL
         7 001616   200050 452500                    STP2    OUTBLK$+3,,AUTO
         7 001617   200050 236100                    LDQ     OUTBLK$+3,,AUTO
         7 001620   000027 036000 8                  ADLQ    23
         7 001621   000032 757000 5                  STAQ    CONSOLE_FPT+4

     1252    15486    5                      VECTOR (SUBSTR (BUFFER.TEXT_, 0, BUFFER.REPLY.LGTH)) ;
     1253    15487    5              CALL CONSOLE_OUT ;

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:156  
  15487  7 001622   001626 701000 7                  TSX1    CONSOLE_OUT
         7 001623   000000 011000                    NOP     0

     1254    15488    5           END /* THEN */ ;

     1255    15489    4      ELSE /* No reply to be printed. */ ;
     1256    15490    4      RETURN ;

  15490  7 001624   200044 221300                    LDX1  ! PREFIX_LGTH+21,,AUTO
         7 001625   000001 702211                    TSX2  ! 1,X1

     1257    15491
     1258    15492    4   END PRINT_OPERATOR_REPLY ;
     1259    15493    3   END PROCESS_MSG_REQ ;
     1260    15494    2   END GET_TOLTS_REQUEST ;
     1261    15495        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:157  
     1262    15496        /*I* NAME:         CONSOLE_OUT
     1263    15497             INTERFACE:    M$WRITE
     1264    15498             INPUT:        CONSOLE_FPT.BUF_ frames message to be output
     1265    15499             OUTPUT:       User message written to terminal
     1266    15500                           TOT$ECP.IO.TYPE
     1267    15501             DESCRIPTION:  This procedure calls M$WRITE to output to the
     1268    15502                           message framed by CONSOLR_FPT.BUF_ to the user's
     1269    15503                           terminal.
     1270    15504        */
     1271    15505
     1272    15506    1   CONSOLE_OUT: PROC ;

  15506  7 001626   200046 741300       CONSOLE_OUT  STX1  ! OUTBLK$+1,,AUTO

     1273    15507
     1274    15508        /* Code */
     1275    15509
     1276    15510    2      TOT$ECP.IO.TYPE = %WRITE ;

  15510  7 001627   000001 235007                    LDA     1,DL
         7 001630   000063 755000 5                  STA     TOT$ECP+3

     1277    15511    2      CALL M$WRITE (CONSOLE_FPT) ALTRET (CANT_WRITE);

  15511  7 001631   000026 630400 5                  EPPR0   CONSOLE_FPT
         7 001632   440001 713400                    CLIMB   alt,write
         7 001633   401400 401760                    pmme    nvectors=4
         7 001634   001637 702000 7                  TSX2    CANT_WRITE

     1278    15512    2      RETURN ;

  15512  7 001635   200046 221300                    LDX1  ! OUTBLK$+1,,AUTO
         7 001636   000001 702211                    TSX2  ! 1,X1

     1279    15513
     1280    15514    2   CANT_WRITE:
     1281    15515    2      CONSOLE_FPT.V.DCB# = DCBNUM (M$ME);
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:158  

  15515  7 001637   000000 236007 xsym  CANT_WRITE   LDQ     M$ME,DL
         7 001640   000000 620006                    EAX0    0,QL
         7 001641   000036 740000 5                  STX0    CONSOLE_FPT+8

     1282    15516    2      CONSOLE_FPT.BUF_ = VECTOR (NO_DO_MSG);

  15516  7 001642   000034 237000 8                  LDAQ    28
         7 001643   000032 757000 5                  STAQ    CONSOLE_FPT+4

     1283    15517    2      CALL M$WRITE (CONSOLE_FPT) ALTRET (NO_HOPE);

  15517  7 001644   000026 630400 5                  EPPR0   CONSOLE_FPT
         7 001645   440001 713400                    CLIMB   alt,write
         7 001646   401400 401760                    pmme    nvectors=4
         7 001647   001650 702000 7                  TSX2    NO_HOPE

     1284    15518    2   NO_HOPE:
     1285    15519    2      CALL M$ERR;

  15519  7 001650   000002 713400       NO_HOPE      CLIMB   err
         7 001651   000000 401760                    pmme    nvectors=0

     1286    15520
     1287    15521    2   END CONSOLE_OUT;

  15521  7 001652   200046 221300                    LDX1  ! OUTBLK$+1,,AUTO
         7 001653   000001 702211                    TSX2  ! 1,X1

     1288    15522        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:159  
     1289    15523        /*I* NAME:         PROMPT_OUT
     1290    15524             INTERFACE:    M$WRITE
     1291    15525             INPUT:        CONSOLE_FPT.BUF_ frames message to be output
     1292    15526             OUTPUT:       Simulated prompt written to the terminal
     1293    15527                           TOT$ECP.IO.TYPE
     1294    15528             DESCRIPTION:  This procedure calls M$WRITE to output to the
     1295    15529                           message framed by the vector in CONSOLE_FPT.BUF_
     1296    15530                           as a prompt with no carriage return, line feed
     1297    15531                           appended.
     1298    15532        */
     1299    15533
     1300    15534    1   PROMPT_OUT: PROC;

  15534  7 001654   200010 741300       PROMPT_OUT   STX1  ! QUEUE_ENTRY+3,,AUTO

     1301    15535
     1302    15536           %FPT_WRITE (FPTN = SIMULATE_PROMPT,
     1303    15537                       DCB  = M$PROMPT_USER,
     1304    15538                       WAIT = YES,
     1305    15539                       BP   = YES) ;
     1306    15570
     1307    15571        /* Code */
     1308    15572
     1309    15573    2      TOT$ECP.IO.TYPE = %WRITE_READ ;

  15573  7 001655   000002 235007                    LDA     2,DL
         7 001656   000063 755000 5                  STA     TOT$ECP+3

     1310    15574    2      SIMULATE_PROMPT.BUF_ = CONSOLE_FPT.BUF_ ;

  15574  7 001657   000032 237000 5                  LDAQ    CONSOLE_FPT+4
         7 001660   000262 757000 5                  STAQ    SIMULATE_PROMPT+4

     1311    15575    2      CALL M$WRITE (SIMULATE_PROMPT) ;

  15575  7 001661   000256 630400 5                  EPPR0   SIMULATE_PROMPT
         7 001662   040001 713400                    CLIMB   write
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:160  
         7 001663   401400 401760                    pmme    nvectors=4

     1312    15576    2      RETURN;

  15576  7 001664   200010 221300                    LDX1  ! QUEUE_ENTRY+3,,AUTO
         7 001665   000001 702211                    TSX2  ! 1,X1

     1313    15577
     1314    15578    2   END PROMPT_OUT;
     1315    15579        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:161  
     1316    15580        /*I*  NAME:        SET_SUBEXEC_PROMPT
     1317    15581              AUTHOR:      Scott S. Sheppard
     1318    15582              PURPOSE:     Sets Subexecutive prompt
     1319    15583              INTERFACE:   M$PROMPT
     1320    15584              INPUT:       B$JIT.MODE
     1321    15585              OUTPUT:      Prompt set to null
     1322    15586              SCRATCH:     No alteration side-effects.
     1323    15587              DESCRIPTION: This procedure sets the TOLTS prompt to the @
     1324    15588                           sign which is only used for a VFC character.
     1325    15589        */
     1326    15590
     1327    15591    1   SET_SUBEXEC_PROMPT: PROC ;

  15591  7 001666   200010 741300       SET_SUBEXEC* STX1  ! QUEUE_ENTRY+3,,AUTO

     1328    15592
     1329    15593    2      DCL SUBEXEC_PROMPT CHAR (1) STATIC CALIGNED INIT ('@') ;
     1330    15594           %FPT_PROMPT (FPTN   = SET_SUBEXEC_PROMPT,
     1331    15595                        PROMPT = SUBEXEC_PROMPT,
     1332    15596                        VFC    = YES) ;
     1333    15624
     1334    15625        /* Code */
     1335    15626
     1336    15627    2      IF B$JIT.MODE = %M_INT#

  15627  7 001667   000000 470400 xsym               LDP0    B$JIT$
         7 001670   000000 236100                    LDQ     0,,PR0
         7 001671   740000 376003                    ANQ     -16384,DU
         7 001672   140000 116003                    CMPQ    49152,DU
         7 001673   001677 601000 7                  TNZ     s:15630

     1337    15628    2      THEN CALL M$PROMPT (SET_SUBEXEC_PROMPT) ;

  15628  7 001674   000274 630400 5                  EPPR0   SET_SUBEXEC_PROMPT
         7 001675   160002 713400                    CLIMB   57346
         7 001676   401000 401760                    pmme    nvectors=3

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:162  
     1338    15629    2      ELSE /* TOLTS is not being run interactively. */ ;
     1339    15630    2      RETURN ;

  15630  7 001677   200010 221300                    LDX1  ! QUEUE_ENTRY+3,,AUTO
         7 001700   000001 702211                    TSX2  ! 1,X1

     1340    15631
     1341    15632    2   END SET_SUBEXEC_PROMPT ;
     1342    15633        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:163  
     1343    15634        /*I* NAME:         CONSOLE_IN
     1344    15635             INTERFACE:    M$WRITE
     1345    15636                           M$READ
     1346    15637             INPUT:        WRITE_FPT.BUF_ frames message to be output.
     1347    15638                           READ_FPT.BUF_ frames read buffer.
     1348    15639             OUTPUT:       User message to terminal.
     1349    15640             DESCRIPTION:  This subroutine simulates the GCOS Write/Read
     1350    15641                           operation to the operator's console.  Calls
     1351    15642                           M$WRITE to output to the terminal the message
     1352    15643                           framed by the vector in WRITE_FPT.BUF_ and then
     1353    15644                           M$READ to read the user input into the buffer
     1354    15645                           framed by READ_FPT.BUF_.  Does not return any
     1355    15646                           any status to the user.
     1356    15647        */
     1357    15648
     1358    15649    1   CONSOLE_IN: PROC ;

  15649  7 001701   200010 741300       CONSOLE_IN   STX1  ! QUEUE_ENTRY+3,,AUTO

     1359    15650
     1360    15651
     1361    15652        /* Code */
     1362    15653
     1363    15654    3      DO INHIBIT;

     1364    15655    3         TOT$ECP.ISC.READ_PENDING = %TRUE ;

  15655  7 001702   040000 236203                    LDQ   ! 16384,DU
         7 001703   000065 256200 5                  ORSQ  ! TOT$ECP+5

     1365    15656    3         CALL M$READ (READ_IO) ;

  15656  7 001704   000042 630600 5                  EPPR0 ! READ_IO
         7 001705   040000 713600                    CLIMB ! read
         7 001706   401400 401760                    pmme    nvectors=4

     1366    15657    3         TOT$ECP.ISC.READ_PENDING = %FALSE ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:164  

  15657  7 001707   000031 236200 8                  LDQ   ! 25
         7 001710   000065 356200 5                  ANSQ  ! TOT$ECP+5

     1367    15658    3      END /* INHIBIT */ ;

     1368    15659    2      RETURN ;

  15659  7 001711   200010 221300                    LDX1  ! QUEUE_ENTRY+3,,AUTO
         7 001712   000001 702211                    TSX2  ! 1,X1

     1369    15660
     1370    15661    2   END CONSOLE_IN;
     1371    15662        %EJECT;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:165  
     1372    15663        /*I* NAME:         PROCESS_EXIT_REQ
     1373    15664             INTERFACE:    M$TIME
     1374    15665                           CONSOLE_OUT
     1375    15666                           M$EXIT
     1376    15667                           CONCAT function
     1377    15668             INPUT:        TOT$ECP.SUBEXEC.CURRENT
     1378    15669                           TOT$TOLTS.LINK_VERSION
     1379    15670             OUTPUT:       TOLTS termination message to terminal.
     1380    15671                           All test page files closed.
     1381    15672                           Exit via CP6.
     1382    15673             DESCRIPTION:  This procedure checks the current subexecutive to
     1383    15674                           ensure  that it is not  MOLTS.   MOLTS can not be
     1384    15675                           ended while test pages are still running.If there
     1385    15676                           is  NO subexecutive or one other than MOLTS,  the
     1386    15677                           TOLTS log off  message is issued  and  M$EXIT  is
     1387    15678                           called to terminate TOLTS.
     1388    15679        */
     1389    15680        %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:166  
     1390    15681    1   PROCESS_EXIT_REQ: PROC;

  15681  7 001713   200014 741300       PROCESS_EXI* STX1  ! SEGTBL$+1,,AUTO

     1391    15682
     1392    15683    2      DCL 1 OFF_DATE STATIC,
     1393    15684    2            2 *     CHAR (5) CALIGNED INIT (' off '),
     1394    15685    2            2 DATE  CHAR (8) CALIGNED ;
     1395    15686    2      DCL OFF_DATE_ REDEF OFF_DATE CHAR (13) CALIGNED ;
     1396    15687    2      DCL 1 AT_TIME STATIC,
     1397    15688    2            2 *     CHAR (4) CALIGNED INIT (' at '),
     1398    15689    2            2 TIME  CHAR (11) CALIGNED ;
     1399    15690    2      DCL AT_TIME_ REDEF AT_TIME CHAR (15) CALIGNED ;
     1400    15691    2      DCL 1 LINK_DATE STATIC,
     1401    15692    2            2 *     CHAR (1) CALIGNED INIT (' '),
     1402    15693    2            2 DATE  CHAR (6) CALIGNED ;
     1403    15694    2      DCL LINK_DATE_ REDEF LINK_DATE CHAR (7) CALIGNED ;
     1404    15695    2      DCL OUTPUT_BUFFER CHAR (80) STATIC CALIGNED ;
     1405    15696           %FPT_TIME (FPTN   = STOP_TOLTS,
     1406    15697                      SOURCE = CLOCK,
     1407    15698                      DEST   = LOCAL,
     1408    15699                      DATE   = OFF_DATE.DATE,
     1409    15700                      TIME   = AT_TIME.TIME) ;
     1410    15719           %EJECT ;
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:167  
     1411    15720        /* Code */
     1412    15721
     1413    15722    2      IF TOT$ECP.SUBEXEC.CURRENT = %MOLTS

  15722  7 001714   000067 235000 5                  LDA     TOT$ECP+7
         7 001715   000011 115007                    CMPA    9,DL
         7 001716   001735 601000 7                  TNZ     s:15731

     1414    15723    3      THEN DO ;

     1415    15724    3              TOT_ERROR_CODE.ERR# = %E$NOTYET ;

  15724  7 001717   000025 236000 5                  LDQ     TOT_ERROR_CODE
         7 001720   000017 376000 8                  ANQ     15
         7 001721   004030 276007                    ORQ     2072,DL
         7 001722   000025 756000 5                  STQ     TOT_ERROR_CODE

     1416    15725    3              TOLTS_GETCMD.ERR_CODE = TOT_ERROR_CODE;

  15725  7 001723   000025 236000 5                  LDQ     TOT_ERROR_CODE
         7 001724   000010 756000 xsym               STQ     TOLTS_GETCMD+8

     1417    15726    3              TOLTS_GETCMD.FLGLEV# = 2;

  15726  7 001725   000002 236003                    LDQ     2,DU
         7 001726   000006 552020 xsym               STBQ    TOLTS_GETCMD+6,'20'O

     1418    15727    3              CALL XUG$ERRMSG (TOLTS_GETCMD);

  15727  7 001727   000000 630400 8                  EPPR0   0
         7 001730   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 001731   000000 701000 xent               TSX1    XUG$ERRMSG
         7 001732   000000 011000                    NOP     0

     1419    15728    3              RETURN ;

  15728  7 001733   200014 221300                    LDX1  ! SEGTBL$+1,,AUTO
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:168  
         7 001734   000001 702211                    TSX2  ! 1,X1

     1420    15729    3           END /* THEN */ ;
     1421    15730    3      ELSE DO ;

     1422    15731    3              CALL M$TIME (STOP_TOLTS) ;

  15731  7 001735   000344 630400 5                  EPPR0   STOP_TOLTS
         7 001736   020004 713400                    CLIMB   8196
         7 001737   402000 401760                    pmme    nvectors=5

     1423    15732    3              LINK_DATE.DATE = TOT$TOLTS.LINK_DATE.ASCII ;

  15732  7 001740   040000 100400                    MLR     fill='040'O
         7 001741   000000 000006 xsym               ADSC9   TOT$TOLTS                cn=0,n=6
         7 001742   000316 200006 5                  ADSC9   LINK_DATE                cn=1,n=6

     1424    15733    3              CALL CONCAT (OUTPUT_BUFFER,

  15733  7 001743   000004 236000 xsym               LDQ     TOT$TOLTS+4
         7 001744   000011 772000                    QRL     9
         7 001745   000777 376007                    ANQ     511,DL
         7 001746   040000 100400                    MLR     fill='040'O
         7 001747   000021 000033 6                  ADSC9   SLTA_REQ+15              cn=0,n=27
         7 001750   000320 000033 5                  ADSC9   OUTPUT_BUFFER            cn=0,n=27
         7 001751   000000 620006                    EAX0    0,QL
         7 001752   040000 100440                    MLR     fill='040'O
         7 001753   000004 600010 xsym               ADSC9   TOT$TOLTS+4              cn=3,n=*X0
         7 001754   000326 600065 5                  ADSC9   OUTPUT_BUFFER+6          cn=3,n=53
         7 001755   000065 116007                    CMPQ    53,DL
         7 001756   002002 603000 7                  TRC     s:15740
         7 001757   777712 620006                    EAX0    -54,QL
         7 001760   777777 660003                    ERX0    -1,DU
         7 001761   040046 100400                    MLR     fill='040'O
         7 001762   000316 000007 5                  ADSC9   LINK_DATE                cn=0,n=7
         7 001763   000326 600010 5                  ADSC9   OUTPUT_BUFFER+6,Q        cn=3,n=*X0
         7 001764   000056 116007                    CMPQ    46,DL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:169  
         7 001765   002002 603000 7                  TRC     s:15740
         7 001766   777721 620006                    EAX0    -47,QL
         7 001767   777777 660003                    ERX0    -1,DU
         7 001770   040046 100400                    MLR     fill='040'O
         7 001771   000306 000015 5                  ADSC9   OFF_DATE                 cn=0,n=13
         7 001772   000330 400010 5                  ADSC9   OUTPUT_BUFFER+8,Q        cn=2,n=*X0
         7 001773   000041 116007                    CMPQ    33,DL
         7 001774   002002 603000 7                  TRC     s:15740
         7 001775   777736 620006                    EAX0    -34,QL
         7 001776   777777 660003                    ERX0    -1,DU
         7 001777   040046 100400                    MLR     fill='040'O
         7 002000   000312 000011 5                  ADSC9   AT_TIME                  cn=0,n=9
         7 002001   000333 600010 5                  ADSC9   OUTPUT_BUFFER+11,Q       cn=3,n=*X0

     1425    15734    3                      '***TOLTS Executive Version ',
     1426    15735    3                      SUBSTR (TOT$TOLTS.LINK_VERSION.TEXT,0,
     1427    15736    3                      TOT$TOLTS.LINK_VERSION.LGTH),
     1428    15737    3                      LINK_DATE_,
     1429    15738    3                      OFF_DATE_,
     1430    15739    3                      SUBSTR (AT_TIME_, 0, 9)) ;
     1431    15740    3              CONSOLE_FPT.BUF_ = VECTOR (OUTPUT_BUFFER) ;

  15740  7 002002   000036 237000 8                  LDAQ    30
         7 002003   000032 757000 5                  STAQ    CONSOLE_FPT+4

     1432    15741    3              CALL CONSOLE_OUT;

  15741  7 002004   001626 701000 7                  TSX1    CONSOLE_OUT
         7 002005   000000 011000                    NOP     0

     1433    15742    3              CALL M$EXIT ;

  15742  7 002006   000001 713400                    CLIMB   exit
         7 002007   000000 401760                    pmme    nvectors=0

     1434    15743    3           END /* ELSE */ ;

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:170  
     1435    15744
     1436    15745    2   END PROCESS_EXIT_REQ;

  15745  7 002010   200014 221300                    LDX1  ! SEGTBL$+1,,AUTO
         7 002011   000001 702211                    TSX2  ! 1,X1

     1437    15746    1   END TOT$ROOT;

  15746  7 002012   000000 702200 xent               TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
   2     000   000000 000000   000000 000000   000000 000000   000000 000501    ................
   2     004   000000 000000   000000 000000   000000 006014   000000 006014    ................
   2     010   001040 040040   040040 040040   040040 040040   040040 040040    .
   2     014   040040 040040   040040 040040   040040 040040   040040 040040
   2     024*  040040 040040   040040 040040   115105 040040   040040 040040            ME
   2     030   040040 040040   000000 203015   010001 003000   000000 000000        ............
   2     034   000000 000000   000000 000000   000000 000000   000002 776003    ................
   2     040   001000 000000   000000 000002   000000 000000   000000 000000    ................
   2     044   000000 100111   040040 040040   000000 006014   000000 006014    ..@I    ........
   2     050   000000 006014   000000 000000   000000 000000   000000 006014    ................
   2     054   000000 000000   000000 000000   000000 000000   000000 000000    ................
   2     060   000000 010000   000000 000000   000000 000000   000000 000000    ................
   2     064   000000 000020   000000 000000   000000 006014   000000 000000    ................
   2     070   000000 000000   000000 000000   000000 000000   000000 000000    ................
   2     074   000000 000000   000000 006014   000000 000000   000000 000000    ................
   2     100   000000 000000   000000 000000   000000 000000   000000 000000    ................
   2     104   ****** ******   ****** ******   000000 000000   ****** ******    ................
   2     110   000000 000000   000000 000000   000000 000000   000000 000000    ................
   2     124*  000000 000000   000000 000000   000000 000000   ****** ******    ................
   2     134*  ****** ******   ****** ******   ****** ******   000000 070707    ..............8.
   2     140   ****** ******   ****** ******                                    ........

TEST_REQ_BCD
 Sect OctLoc
   5     000   ****** ******   ****** ****00                                    ........
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:171  

NO_DO_MSG
 Sect OctLoc
   5     002   052052 052052   040105 170160   145162 151145   156143 151156    **** Experiencin
   5     006   147040 144151   146146 151143   165154 164151   145163 040143    g difficulties c
   5     012   157155 155165   156151 143141   164151 156147   040164 150162    ommunicating thr
   5     016   157165 147150   040115 044104   117040 055055   040124 117114    ough M$DO -- TOL
   5     022   124123 040141   142157 162164   151156 147***                    TS aborting.

TOT_ERROR_CODE
 Sect OctLoc
   5     025   241724 000004                                                    ....

CONSOLE_FPT
 Sect OctLoc
   5     026   000003 777640   000036 006000   000000 177640   000000 006014    ................
   5     032   000000 177640   000000 006014   000000 177640   000000 006014    ................
   5     036   000000 400400   000000 000000   000000 000000   000000 000000    ................

READ_IO
 Sect OctLoc
   5     042   000005 777640   000052 006000   000000 177640   000000 006014    .....*..........
   5     046   000000 177640   000000 006014   000000 177640   000000 006014    ................
   5     052   000000 400000   000000 000000   000000 000000   000000 000000    ................
   5     056   000000 000000   000000 000000                                    ........

TOT$ECP
 Sect OctLoc
   5     060   040040 040040   040040 040040   040040 040040   000000 000000                ....
   5     064   000000 000000   00**** ******   000000 000000   000000 000000    ................
   5     070   000000 000000   040040 040040   0***** ******   000000 006014    ....    ........
   5     074   000000 000000   0**0** 000***                                    ........

REL_TOLTS_PGS
 Sect OctLoc
   5     076   000001 777640   000102 006000   000000 177640   000000 006014    .....B..........
   5     102   000000 000000   ****** ******                                    ........
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:172  

FREE_BUFFER
 Sect OctLoc
   5     104   000001 777640   000110 006000   000000 177640   000000 006014    .....H..........
   5     110   000000 000000   ****** ******                                    ........

SET_TOLTS_PROMPT
 Sect OctLoc
   5     112   000003 777640   000120 006000   000000 177640   000000 006014    .....P..........
   5     116   000000 577640   000001 006000   000000 000000   000000 000000    ................
   5     122   000000 000000   000000 000000                                    ........

GET_INFO
 Sect OctLoc
   5     124   000075 777640   000140 006000   000000 177640   000000 006014    .=...`..........
   5     130   000000 177640   000000 006014   000000 177640   000000 006014    ................
   5     134   000000 177640   000000 006014   000000 177640   000000 006014    ................

SYSTEM_INFO
 Sect OctLoc
   5     140   040040 040040   001040 040040   040040 040040   040040 040040        .
   5     144   040040 040040   040040 040040   040040 040040   040040 040040
   5     174*  040040 040040   040040 040040   040040 040040   032007 052052                ..**
   5     200   052103 120055   066040 101124   040131 117125   122040 123105    *CP-6 AT YOUR SE
   5     204   122126 111103   105041 007040   040040 040040   040040 040040    RVICE!.
   5     210   040040 040040   040040 040040   040040 040040   040040 040040
   5     220*  040040 040040   040040 040040   040040 040040   000000 000000                ....
   5     224   040040 040040   000000 000000   040040 040040   040040 000000        ....      ..
   5     230   060060 060060   040040 040040   000000 000000   000000 000000    0000    ........
   5     234   000000 000000   000000 000000                                    ........

SEND_MSG
 Sect OctLoc
   5     240   000005 777640   000250 006000   000000 17764*   000000 006014    ................
   5     244   000000 17764*   000000 006014   000000 177640   000000 006014    ................
   5     250   040040 040040   040040 040040   000000 000000   402000 000000            ........
   5     254   000000 000000   000000 000000                                    ........
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:173  

SIMULATE_PROMPT
 Sect OctLoc
   5     256   000003 777640   000266 006000   000000 177640   000000 006014    ................
   5     262   000000 177640   000000 006014   000000 177640   000000 006014    ................
   5     266   000000 400400   000000 000000   000000 000000   200000 000000    ................

SUBEXEC_PROMPT
 Sect OctLoc
   5     272   100*** ******                                                    @...

SET_SUBEXEC_PROMPT
 Sect OctLoc
   5     274   000003 777640   000302 006000   000000 177640   000000 006014    ................
   5     300   000000 177640   000272 006000   000000 000000   000000 000000    ................
   5     304   100000 000000   000000 000000                                    @.......

OFF_DATE
 Sect OctLoc
   5     306   040157 146146   040*** ******   ****** ******   ****** ******     off ...........

AT_TIME
 Sect OctLoc
   5     312   040141 164040   ****** ******   ****** ******   ****** ******     at ............

LINK_DATE
 Sect OctLoc
   5     316   040*** ******   ****** ******                                     .......

OUTPUT_BUFFER
 Sect OctLoc
   5     320   ****** ******   ****** ******   ****** ******   ****** ******    ................

STOP_TOLTS
 Sect OctLoc
   5     344   000001 777640   000356 006000   000001 777640   000307 206000    ................
   5     350   000002 577640   000313 006000   000000 177640   000000 006014    ................
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:174  
   5     354   000000 177640   000000 006014   000003 000000   ****** ******    ................

TOLTS_PROMPT
 Sect OctLoc
   6     000   036077 077077                                                    .???

TOLTS_PROMPT
 Sect OctLoc
   6     001   077077 077***                                                    ???.

SLTA_REQ
 Sect OctLoc
   6     002   123061 060101   040040 040040   040040 040040                    S10A

(unnamed)
 Sect OctLoc
   6     005   044120 101103   124040 040040   044123 114124   101040 040040    $PACT   $SLTA
   6     011   116111 117040   122120 115040   115127 040040   115115 124040    NIO RPM MW  MMT
   6     015   115105 115124   115117 115124   115114 123124   101114 040040    MEMTMOMTMLSTAL
   6     021   052052 052124   117114 124123   040105 170145   143165 164151    ***TOLTS Executi
   6     025   166145 040126   145162 163151   157156 040040                    ve Version

(unnamed)
 Sect OctLoc
   8     000   000000 006000   000000 040321   000001 006000   000000 000340    ...... .........
   8     004   000006 006000   000003 006000   000001 777640   000001 777776    ................
   8     010   000000 777640   000000 006000   103040 040040   115040 040040    ........C   M
   8     014   120040 040040   123040 040040   777777 777000   777777 400007    P   S   ........
   8     020   000002 006000   000000 006000   000236 006000   000060 006000    .............0..
   8     024   000000 006000   000236 006000   077040 040040   000015 400000    ........?   ....
   8     030   000024 177640   737777 777777   000000 177640   000000 006014    ................
   8     034   000022 577640   000002 006000   000023 777640   000320 006000    ................

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:175  
--  Include file information  --

   XU_PERR_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   XUG_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   TO_PERR_C.:E05TOU  is referenced.
   TOT_RQSTS_E.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOT$ROOT.
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:176  

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    67- 15746    367    92     7      0  y   y    0   1 TOT$ROOT
                                  7     22      y    0     TOT$CONSOLE_OUT
                                  7     27      y    0     TOT$PROMPT_OUT
                                  7     34      y    0     TOT$WRITE_READ_IO
                                  7     43      y    0     TOT$CONSOLE_IN
                                  7     50      y    0     TOT$NEXT_TEST_REQ
                                  7     55      y    0     TOT$RESTART
                                  7     62      y    0     TOT$EXIT
  1 14268- 14300     11     3     7     67  y   y    0     2 FREE_DYNAMIC_PAGES
  2 14326- 14401     23     3     7    115  y   y    0     2 FREE_EXCESS_DATA_SEGMENTS
  3 14368- 14400      9     8     7    172  y   y    2      3 FREE_SEG
  4 14460- 14474      5     0     7    223  y   y    0     2 SET_BAR
  5 14492- 14504      8     0     7    237  y   y    0     2 REQUEST_INITIAL
  6 14520- 15494    249    10     7    266  y   y    0     2 GET_TOLTS_REQUEST
  7 14643- 14684      4     3     7    325  y   y    0      3 SET_TOLTS_PROMPT
  8 14692- 14713     16     0     7    340  y   y    0      3 SELECT_TOLTS_REQUEST
  9 14742- 14812     18     6     7    401  y   y    0      3 SET_DEBUG_FLAGS
 10 14828- 14869     31     2     7    460  y   y    0      3 REBUILD_TEST_REQ
 11 14889- 15253    123     0     7    620  y   y    0      3 PROCESS_TEST_REQ
 12 14953- 14974     13     0     7    725  y   y    0       4 CHECK_CONTRACT
 13 14992- 15043     11     3     7   1042  y   y    0       4 SET_SYSTEM_TYPE
 14 15051- 15063      8     0     7   1067  y   y    0       4 SET_SUBEXEC
 15 15099- 15128     26     0     7   1111  y   y    0       4 CHECK_VALID_SUBEXEC
 16 15136- 15158     13     0     7   1210  y y y    0       4 CHECK_SUBEXEC
 17 15168- 15186      9     0     7   1276  y y y    0       4 CHECK_DEBUG
 18 15202- 15212      6     0     7   1350  y   y    0       4 BUILD_INIT_SUBEXEC
 19 15228- 15252     14     2     7   1374  y   y    0       4 BUILD_ISC_WRITE
 20 15272- 15493     40     7     7   1446  y   y    0      3 PROCESS_MSG_REQ
 21 15309- 15416     16     6     7   1461  y y y    0       4 SETUP_BUFFER
 22 15429- 15467     11     5     7   1537  y y y    0       4 ISSUE_OPERATOR_MESSAGE
 23 15479- 15492      7     0     7   1610  y   y    0       4 PRINT_OPERATOR_REPLY
 24 15506- 15521      9     0     7   1626  y   y    0     2 CONSOLE_OUT
 25 15534- 15578      5     3     7   1654  y   y    0     2 PROMPT_OUT
 26 15591- 15632      4     3     7   1666  y   y    0     2 SET_SUBEXEC_PROMPT
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:177  
 27 15649- 15661      7     0     7   1701  y   y    0     2 CONSOLE_IN
 28 15681- 15745     17    12     7   1713  y   y    0     2 PROCESS_EXIT_REQ
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:178  

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              67   7      0 Proc    0                             14115   7      2 Assign  0
           14116   7      3 Call    0                             14117   7      7 Call    0
           14118   7     11 Call    0                             14119   7     13 Call    0
           14120   7     15 Call    0                             14121   7     17 Call    0
           14144   7     22 Entry   0                             14146   7     24 Call    0
           14147   7     26 Return  0                             14165   7     27 Entry   0
           14167   7     31 Call    0                             14168   7     33 Return  0
           14190   7     34 Entry   0                             14192   7     36 Call    0
           14193   7     40 Call    0                             14194   7     42 Return  0
           14205   7     43 Entry   0                             14207   7     45 Call    0
           14208   7     47 Return  0                             14222   7     50 Entry   0
           14224   7     52 Call    0                             14225   7     54 Return  0
           14237   7     55 Entry   0                             14239   7     57 Unwind  0
           14250   7     62 Entry   0                             14252   7     64 Call    0
           14268   7     67 Proc    1                             14287   7     70 If      1
           14289   7     72 Do      1                             14290   7     72 Assign  1
$$$$$$$$$$ 14291   7     73 MonCal  1                             14292   7     77 EndDo   1
           14293   7     77 Return  1                          $$ 14296   7    101 Assign  1 RELEASE_ERROR
           14297   7    105 Call    1                      $$$$$$ 14298   7    111 MonCal  1
           14300   7    113 EndPrc  1                             14326   7    115 Proc    2
           14334   7    116 If      2                             14336   7    121 Do      2
           14338   7    121 DoIndx  2                           $ 14340   7    122 Assign  2
           14342   7    126 DoIndx  2                          $$ 14343   7    127 If      2
         $ 14345   7    136 Call    2                             14346   7    146 EndInd  2
           14347   7    153 EndInd  2                           $ 14349   7    160 Call    2
           14350   7    166 Assign  2                             14351   7    170 EndDo   2
           14352   7    170 Return  2                             14368   7    172 Proc    3
           14390   7    173 Assign  3                             14391   7    176 Assign  3
$$$$$$$$$$ 14392   7    201 MonCal  3                             14393   7    205 Return  3
        $$ 14396   7    207 Assign  3 FREE_ERROR                  14397   7    213 Call    3
    $$$$$$ 14398   7    217 MonCal  3                             14400   7    221 EndPrc  3
           14460   7    223 Proc    4                          $$ 14469   7    224 Assign  4
           14470   7    232 Assign  4                             14471   7    234 Assign  4
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:179  
           14472   7    236 Return  4                             14492   7    237 Proc    5
           14496   7    240 Assign  5                           $ 14497   7    243 Assign  5
         $ 14498   7    250 Assign  5                             14499   7    255 Assign  5
           14500   7    260 Assign  5                             14501   7    261 Assign  5
           14502   7    264 Return  5                             14520   7    266 Proc    6
           14612   7    267 DoUntl  6                             14613   7    267 Assign  6
           14614   7    272 Assign  6                             14615   7    274 Call    6
           14616   7    300 Do      6                             14617   7    300 Assign  6
           14618   7    302 Call    6                             14619   7    304 EndDo   6
           14621   7    305 Do      6                             14622   7    305 Assign  6
           14623   7    307 Call    6                             14624   7    313 If      6
           14625   7    317 Assign  6                             14626   7    321 EndDo   6
           14627   7    321 EndUnt  6                             14628   7    323 Return  6
           14643   7    325 Proc    7                           $ 14679   7    326 If      7
$$$$$$$$$$ 14680   7    333 MonCal  7                             14682   7    336 Return  7
           14692   7    340 Proc    8                       $$$$$ 14696   7    341 DoCase  8
           14697   7    356 Case    8                             14699   7    356 Case    8
           14700   7    356 Call    8                             14701   7    360 Call    8
           14702   7    363 Case    8                             14703   7    363 Call    8
           14704   7    365 Call    8                             14705   7    367 Call    8
           14706   7    372 Case    8                             14707   7    372 Call    8
           14708   7    375 Case    8                             14709   7    375 Call    8
           14710   7    377 EndCse  8                             14711   7    377 Return  8
           14742   7    401 Proc    9                             14794   7    402 Assign  9
           14795   7    404 DoIndx  9                           $ 14796   7    407 Assign  9
      $$$$ 14797   7    413 DoCase  9                             14798   7    427 Case    9
           14799   7    427 Assign  9                             14800   7    432 Case    9
           14801   7    432 Assign  9                             14802   7    435 Case    9
           14803   7    435 Assign  9                             14804   7    440 Case    9
           14805   7    440 Assign  9                             14806   7    443 Case    9
           14807   7    443 Assign  9                             14808   7    445 EndCse  9
        $$ 14809   7    445 EndInd  9                             14810   7    456 Return  9
           14828   7    460 Proc   10                      $$$$$$ 14835   7    461 DoCase 10
           14836   7    501 Case   10                             14837   7    501 Assign 10
           14838   7    504 Assign 10                             14839   7    507 Case   10
           14840   7    507 Assign 10                             14841   7    512 Assign 10
           14842   7    515 Case   10                             14843   7    515 Assign 10
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:180  
           14844   7    520 Assign 10                             14845   7    523 Case   10
           14846   7    523 Assign 10                             14847   7    526 Assign 10
           14848   7    531 Case   10                             14849   7    531 Assign 10
           14850   7    534 Assign 10                             14851   7    537 Case   10
           14852   7    537 Assign 10                             14853   7    542 Assign 10
           14854   7    545 Case   10                             14855   7    545 Assign 10
           14856   7    550 Assign 10                             14857   7    553 Case   10
           14858   7    553 Assign 10                             14859   7    556 Assign 10
           14860   7    560 EndCse 10                             14861   7    560 If     10
         $ 14862   7    562 Assign 10                    $$$$$$$$ 14863   7    571 IntCal 10
           14867   7    617 Return 10                             14889   7    620 Proc   11
           14893   7    621 If     11                             14894   7    623 Do     11
           14895   7    623 Call   11                             14896   7    625 Call   11
           14897   7    627 Call   11                             14898   7    631 Call   11
           14899   7    633 Call   11                         $$$ 14900   7    635 If     11
           14901   7    653 Call   11                             14903   7    656 Call   11
           14904   7    660 Assign 11                           $ 14905   7    662 Call   11
           14906   7    670 EndDo  11                             14907   7    671 Do     11
           14908   7    671 Call   11                             14909   7    673 Call   11
           14910   7    675 Call   11                         $$$ 14911   7    677 If     11
           14912   7    715 Call   11                             14914   7    720 Call   11
           14916   7    722 Return 11 NOT_SAME                    14953   7    725 Proc   12
           14957   7    726 If     12                             14958   7    731 Return 12
$$$$$$$$$$ 14959   7    732 If     12                             14965   7   1020 Return 12
           14966   7   1021 Do     12                             14967   7   1021 Assign 12
           14968   7   1025 Assign 12                             14969   7   1027 Assign 12
           14970   7   1031 Call   12                             14971   7   1035 Call   12
           14972   7   1040 EndDo  12                             14974   7   1040 EndPrc 12
           14992   7   1042 Proc   13                  $$$$$$$$$$ 15032   7   1043 MonCal 13
           15033   7   1047 Do     13                             15034   7   1047 Assign 13
           15035   7   1051 Return 13                             15038   7   1053 Do     13
        $$ 15039   7   1053 Assign 13                             15040   7   1057 Call   13
    $$$$$$ 15041   7   1063 MonCal 13                             15042   7   1065 EndDo  13
           15043   7   1065 EndPrc 13                             15051   7   1067 Proc   14
      $$$$ 15055   7   1070 DoCase 14                             15056   7   1102 Case   14
           15057   7   1102 Assign 14                             15058   7   1105 Case   14
           15059   7   1105 Assign 14                             15060   7   1110 EndCse 14
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:181  
           15061   7   1110 Return 14                             15099   7   1111 Proc   15
        $$ 15103   7   1112 DoCase 15                             15104   7   1124 Case   15
        $$ 15105   7   1124 DoCase 15                             15106   7   1135 Case   15
           15107   7   1135 Case   15                             15108   7   1135 Assign 15
           15109   7   1136 Assign 15                             15110   7   1142 Assign 15
           15111   7   1144 Assign 15                             15112   7   1146 Call   15
           15113   7   1152 Call   15                             15114   7   1155 EndCse 15
           15115   7   1156 Case   15                          $$ 15116   7   1156 DoCase 15
           15117   7   1166 Case   15                             15118   7   1166 Case   15
           15119   7   1166 Assign 15                             15120   7   1167 Assign 15
           15121   7   1173 Assign 15                             15122   7   1175 Assign 15
           15123   7   1177 Call   15                             15124   7   1203 Call   15
           15125   7   1206 EndCse 15                             15126   7   1206 EndCse 15
           15127   7   1206 Return 15                             15136   7   1210 Proc   16
         $ 15140   7   1211 DoCase 16                             15141   7   1217 Case   16
$$$$$$$$$$ 15142   7   1217 If     16                             15145   7   1252 Return 16
           15147   7   1253 Case   16                          $$ 15148   7   1253 If     16
           15149   7   1261 Return 16                             15151   7   1262 EndCse 16
           15153   7   1262 Assign 16                             15154   7   1266 Assign 16
           15155   7   1270 Call   16                             15156   7   1274 Altret 16
           15168   7   1276 Proc   17                             15172   7   1277 If     17
    $$$$$$ 15173   7   1301 If     17                             15177   7   1333 Do     17
           15178   7   1333 Assign 17                             15179   7   1337 Assign 17
           15180   7   1341 Call   17                             15181   7   1345 Altret 17
           15184   7   1347 Return 17                             15202   7   1350 Proc   18
           15206   7   1351 Assign 18                             15207   7   1353 Assign 18
           15208   7   1355 Assign 18                         $$$ 15209   7   1360 Call   18
           15210   7   1372 Return 18                             15228   7   1374 Proc   19
           15235   7   1375 If     19                             15237   7   1400 Do     19
           15238   7   1400 Assign 19                             15239   7   1402 Assign 19
           15240   7   1404 Assign 19                             15241   7   1407 Assign 19
           15242   7   1411 If     19                             15243   7   1414 Call   19
           15245   7   1421 Call   19                             15247   7   1425 Assign 19
       $$$ 15248   7   1430 Call   19                             15249   7   1442 EndDo  19
           15250   7   1442 Return 19                             15253   7   1444 EndPrc 11
           15272   7   1446 Proc   20                             15285   7   1447 Call   20
           15286   7   1451 Call   20                             15287   7   1453 Call   20
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:182  
           15288   7   1455 Return 20                             15291   7   1457 Return 20 ERROR
           15309   7   1461 Proc   21                             15398   7   1462 Assign 21
         $ 15399   7   1465 If     21                             15400   7   1472 Do     21
           15401   7   1472 Assign 21                           $ 15402   7   1475 Assign 21
         $ 15403   7   1503 If     21                             15404   7   1512 Assign 21
           15405   7   1515 Assign 21                             15406   7   1517 Assign 21
           15407   7   1522 Return 21                             15409   7   1523 Do     21
           15410   7   1523 Assign 21                             15411   7   1527 Assign 21
           15412   7   1531 Call   21                             15413   7   1535 Altret 21
           15429   7   1537 Proc   22                          $$ 15454   7   1540 Assign 22
           15455   7   1551 If     22                           $ 15456   7   1553 Assign 22
           15457   7   1561 Assign 22                             15458   7   1563 Assign 22
$$$$$$$$$$ 15459   7   1570 MonCal 22                             15460   7   1574 Return 22
        $$ 15463   7   1576 Assign 22 ERROR                       15464   7   1602 Call   22
           15465   7   1606 Altret 22                             15479   7   1610 Proc   23
           15483   7   1611 If     23                             15484   7   1613 Do     23
         $ 15485   7   1613 Assign 23                             15487   7   1622 Call   23
           15488   7   1624 EndDo  23                             15490   7   1624 Return 23
           15506   7   1626 Proc   24                             15510   7   1627 Assign 24
$$$$$$$$$$ 15511   7   1631 MonCal 24                             15512   7   1635 Return 24
           15515   7   1637 Assign 24 CANT_WRITE                  15516   7   1642 Assign 24
$$$$$$$$$$ 15517   7   1644 MonCal 24                      $$$$$$ 15519   7   1650 MonCal 24 NO_HOPE
           15521   7   1652 EndPrc 24                             15534   7   1654 Proc   25
           15573   7   1655 Assign 25                             15574   7   1657 Assign 25
$$$$$$$$$$ 15575   7   1661 MonCal 25                             15576   7   1664 Return 25
           15591   7   1666 Proc   26                           $ 15627   7   1667 If     26
$$$$$$$$$$ 15628   7   1674 MonCal 26                             15630   7   1677 Return 26
           15649   7   1701 Proc   27                             15654   7   1702 DoInhi 27
           15655   7   1702 Assign 27                  $$$$$$$$$$ 15656   7   1704 MonCal 27
           15657   7   1707 Assign 27                             15658   7   1711 EndInh 27
           15659   7   1711 Return 27                             15681   7   1713 Proc   28
           15722   7   1714 If     28                             15723   7   1717 Do     28
           15724   7   1717 Assign 28                             15725   7   1723 Assign 28
           15726   7   1725 Assign 28                             15727   7   1727 Call   28
           15728   7   1733 Return 28                             15730   7   1735 Do     28
$$$$$$$$$$ 15731   7   1735 MonCal 28                             15732   7   1740 Assign 28
$$$$$$$$$$ 15733   7   1743 IntCal 28                             15740   7   2002 Assign 28
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:183  
           15741   7   2004 Call   28                      $$$$$$ 15742   7   2006 MonCal 28
           15743   7   2010 EndDo  28                             15745   7   2010 EndPrc 28
           15746   7   2012 EndPrc  0

  **** Statement type totals  ****

   100 Assign    61 Call      16 MonCal    23 If        28 Case      36 Return
     4 Altret     1 Unwind     2 IntCal     1 DoUntl     3 DoIndx     8 DoCase
    16 Do         1 DoInhi     1 EndUnt     3 EndInd     8 EndCse    10 EndDo
     1 EndInh    29 Proc       8 EndPrc     7 Entry      7 Labels

 # major stmts=  255 Code/major= 4.05 # stmts=  367 Code/stmt= 2.82  Point total=106.1
 Cost/major stmt=  4.6 Cost/stmt=  3.2 Total cost=   1190.6

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$$
   6-8  $$$
  8-10  $
 10-12
 12-14
 14-16  $$
 16-18
 18-20
 20-22
 22-??  $$$$
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:184  

 **** Variables and constants ****

  ****  Section 005  Data  TOT$ROOT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   312-0-0/c CHAR(15)    r     1 AT_TIME_                 236-0-0/w SBIN        r     1 CHAR_COUNT
   124-0-0/d STRC(432)   r     1 GET_INFO                 316-0-0/c CHAR(7)     r     1 LINK_DATE_
     2-0-0/c CHAR(75)    r     1 NO_DO_MSG                306-0-0/c CHAR(13)    r     1 OFF_DATE_
   320-0-0/c CHAR(80)    r     1 OUTPUT_BUFFER            272-0-0/c CHAR        r     1 SUBEXEC_PROMPT

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

   312-0-0/c STRC(135)   r     1 AT_TIME
   313-0-0/c CHAR(11)    r         2 TIME

    26-0-0/d STRC(432)   r     1 CONSOLE_FPT
    32-0-0/w STRC(72)    r         2 BUF_
    36-0-0/d STRC(144)   r         2 V
    36-0-0/b UBIN(18)    r          3 DCB#

   104-0-0/d STRC(216)   r     1 FREE_BUFFER
   106-0-0/b BIT (72)    r         2 RESULTS_
   110-0-0/d STRC        r         2 V
   110-2-0/b UBIN(18)    r          3 SEGSIZE#

   316-0-0/c STRC(63)    r     1 LINK_DATE
   316-1-0/c CHAR(6)     r         2 DATE

   306-0-0/c STRC(117)   r     1 OFF_DATE
   307-1-0/c CHAR(8)     r         2 DATE

    42-0-0/d STRC(504)   r     1 READ_IO
    52-0-0/d STRC(216)   r         2 V

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:185  
    76-0-0/d STRC(216)   r     1 REL_TOLTS_PGS
   102-0-0/d STRC        r         2 V
   102-0-0/w UBIN        r          3 PAGES#

   240-0-0/d STRC(504)   r     1 SEND_MSG
   242-0-0/w STRC(72)    r         2 MESS_
   244-0-0/w STRC(72)    r         2 REPLY_
   246-0-0/b BIT (72)    r         2 RESULTS_
   250-0-0/d STRC(216)   r         2 V

   274-0-0/d STRC(360)   r     1 SET_SUBEXEC_PROMPT
   302-0-0/d STRC(144)   r         2 V

   112-0-0/d STRC(360)   r     1 SET_TOLTS_PROMPT
   120-0-0/d STRC(144)   r         2 V

   256-0-0/d STRC(432)   r     1 SIMULATE_PROMPT
   262-0-0/w STRC(72)    r         2 BUF_
   266-0-0/d STRC(144)   r         2 V

   344-0-0/d STRC(432)   r     1 STOP_TOLTS
   356-0-0/d STRC        r         2 V

   140-0-0/d STRC(2232)  r     1 SYSTEM_INFO
   227-2-0/b UBIN(9)     r         2 CPU_TYPE#

     0-0-0/w STRC(72)    r     1 TEST_REQ_BCD
     0-0-0/b UBIN(6)     r         2 TEST_BCD(0:10)

    60-0-0/w STRC(495)   r     1 TOT$ECP
    60-0-0/c CHAR(12)    r         2 TEST_REQ
    60-0-0/c CHAR        r         2 TEST_REQ_(0:11)
    63-0-0/w STRC(72)    r         2 IO
    63-0-0/w UBIN        r          3 TYPE
    65-0-0/c STRC(4)     r         2 ISC
    65-0-3/b BIT         r          3 READ_PENDING
    66-0-0/w UBIN        r         2 DYNAMIC_PAGE_COUNT
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:186  
    67-0-0/w STRC(216)   r         2 SUBEXEC
    67-0-0/w UBIN        r          3 CURRENT
    75-2-0/c UBIN(9)     r         2 BOOT_CPU_TYPE

    25-0-0/w STRC        r     1 TOT_ERROR_CODE
    25-2-1/b UBIN(14)    r         2 ERR#


  ****  Section 006 RoData TOT$ROOT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     2-0-0/c CHAR(12)    r     1 SLTA_REQ                   0-0-0/c STRC        r     1 TOLTS_PROMPT
     1-0-0/c CHAR(3)     r     1 TOLTS_PROMPT

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    15-0-0/w PTR         r     1 @WORD_COUNT               16-0-0/w PTR         r     1 @WORD_VECTOR
    11-0-0/w PTR         r     1 CMD$                      15-0-0/w UBIN        r     1 OUTBLK#
    16-0-0/w PTR         r     1 OUTBLK$                   45-0-0/w PTR         r     1 OUTBLK$
    17-0-0/c UBIN(9)     r     1 PREFIX_LGTH               15-0-0/c CHAR(5)     r     1 PREFIX_STRING
     5-0-0/w UBIN        r     1 QUEUE_ENTRY(0:2)
     3-0-0/w UBIN        r     1 REQUEST_TYPE              13-0-0/w PTR         r     1 SEGTBL$
     4-0-0/w UBIN(18)    r     1 SERVICE_CODE              12-0-0/w UBIN        r     1 STX
    11-0-0/w UBIN        r     1 TCX                       *0-0-0/w UBIN        r     1 WORD_COUNT
    *0-0-0/d BIT (72)    r     1 WORD_VECTOR

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    15-0-0/w STRC(828)   r     1 BUFFER
    15-0-0/c BIT         r         2 REPLY_PENDING
    15-1-0/c UBIN(9)     r         2 LGTH
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:187  
    15-2-0/c CHAR(81)    r         2 TEXT_
    15-2-0/c CHAR        r         2 TEXT(0:80)
    42-0-0/w STRC(72)    r         2 REPLY
    43-0-0/w UBIN        r          3 LGTH

     5-0-0/w STRC(108)   r     1 QUEUE_ENTRY_BCD
     5-0-0/b STRC(72)    r         2 TEST_REQUEST


  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w STRC(2412)  r     1 TOD$QUEUE                  0-0-0/w BIT         r     1 TOS$COMWD
     0-0-0/d REMB        r     1 TOT$REINITIALIZE

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/h STRC(45)    r     1 TOF$BAR
     0-0-0/h STRC(18)    r         2 CURRENT
     0-2-0/h STRC(18)    r         2 FULL
     0-2-0/b UBIN(9)     r          3 BASE
     0-3-0/b UBIN(9)     r          3 SIZE

     0-0-0/d STRC(1512)  r     1 TOLTS_GETCMD
     1-0-0/w PTR         r         2 OUT$
     1-0-0/b STRC        r         2 ERR#
     1-2-1/b UBIN(14)    r          3 CODE#
     6-0-5/b BIT         r         2 PROMPT_VFC#
     6-1-0/c UBIN(9)     r         2 FLGLEV#
    10-0-0/w STRC        r         2 ERR_CODE
    14-0-0/w SBIN        r         2 DCB_PARAM#
    25-0-0/w VECT        r         2 PROMPT_

PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:188  
     0-0-0/w STRC(396)   r     1 TOQ$DCP
     0-0-0/c STRC(18)    r         2 PF
     0-0-0/b BIT         r          3 ENABLED
     0-0-2/b BIT         r          3 DEBUG_TOLTS
     0-0-3/b BIT         r          3 STOP_ON_GELBARS
     0-0-4/b BIT         r          3 STOP_ON_IO
     0-0-5/b BIT         r          3 STOP_AT_SE
     0-0-6/b BIT         r          3 DISP_MMES

     0-0-0/d STRC(288)   r     1 TOT$DMC
     0-0-0/d STRC(72)    r         2 TOO$IO_BUFFER
     1-0-0/b PTR         r          3 PTR$
     2-0-0/d STRC(72)    r         2 TOP$TCP
     3-0-0/b PTR         r          3 PTR$
     6-0-0/d STRC(72)    r         2 TOM$SEGTBLS
     7-0-0/b PTR         r          3 PTR$

     0-0-0/c STRC(189)   r     1 TOT$IFAD
     1-2-0/c STRC        r         2 MAINTENANCE
     2-0-4/b BIT         r          3 CONTRACT

     0-0-0/c STRC(639)   r     1 TOT$TOLTS
     0-0-0/c STRC(90)    r         2 LINK_DATE
     0-0-0/c CHAR(6)     r          3 ASCII
     4-2-0/c STRC(108)   r         2 LINK_VERSION
     4-2-0/c UBIN(9)     r          3 LGTH
     4-3-0/c CHAR(11)    r          3 TEXT


  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$ME
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0/d CHAR(112)   r     1 TOM$SEGTBLS(0:7)
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:189  
     0-0-0/w STRC(65664) r     1 TOO$IO_BUFFER(0:7)
     0-0-0/d STRC(5904)  r     1 TOP$TCP(0:7)

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT
   102-0-0/b STRC        r         2 ERR

     0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/b UBIN(4)     r         2 MODE
   204-0-0/h UBIN(18)    r         2 TDP

     0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w PTR         r         2 ALT$

     0-0-0/w STRC(144)   r     1 CMDOUT
     0-2-0/h UBIN(18)    r         2 CODE
     1-0-0/h UBIN(18)    r         2 NSUBLKS
     3-0-0/b PTR         r         2 SUBLK$(0:0)

     0-0-0/w ASTR(153)   r     1 CMDSYM
     3-0-0/w PTR         r         2 TEXTC$
     4-0-0/c UBIN(9)     r         2 COUNT
     4-1-0/c ACHR        r         2 TEXT

     0-0-0/d ASTR(3528)  r     1 F$DCB
   140-0-0/d ASTR(9)     r         2 DCBNAME
   140-0-4/b UBIN(5)     r          3 L

     0-0-0/d ASTR(3528)  r     1 M$PROMPT_USER
   140-0-0/d ASTR(9)     r         2 DCBNAME
   140-0-4/b UBIN(5)     r          3 L

     0-0-0/w STRC(144)   r     1 OUT$BLK
     0-2-0/h UBIN(18)    r         2 CODE
     1-0-0/h UBIN(18)    r         2 NSUBLKS
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:190  
     3-0-0/b PTR         r         2 SUBLK$(0:0)

     0-0-0/w STRC(144)   r     1 OUT$BLK
     3-0-0/b PTR         r         2 SUBLK$(0:0)

     0-0-0/w ASTR(153)   r     1 OUT$SYM
     4-0-0/c UBIN(9)     r         2 COUNT
     4-1-0/c ACHR        r         2 TEXT

     0-0-0/d STRC(144)   r     1 TOM$SEGTBL(0:6)
     0-0-0/d STRC(72)    r         2 V



   Procedure TOT$ROOT requires 1035 words for executable code.
   Procedure TOT$ROOT requires 48 words of local(AUTO) storage.

    No errors detected in file TOT$ROOT.:E05TSI    .
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:191  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:192  
          MINI XREF LISTING

AT_TIME IN PROCEDURE PROCESS_EXIT_REQ
     15687**DCL     15690--REDEF
AT_TIME.TIME IN PROCEDURE PROCESS_EXIT_REQ
     15689**DCL     15713--DCLINIT 15714--DCLINIT
AT_TIME_ IN PROCEDURE PROCESS_EXIT_REQ
     15690**DCL     15733>>CALLBLT
B$ALT.CODE
     13149**DCL     13149--REDEF   13150--REDEF   13150--REDEF
B$ALT.ERR
     13150**DCL     14296>>ASSIGN  14396>>ASSIGN  15039>>ASSIGN  15463>>ASSIGN
B$ALT.ERR.ERR#
     13151**DCL     13151--REDEF
B$ALT.EVID
     13150**DCL     13150--REDEF   13150--REDEF
B$JIT.CPFLAGS1.SLEAZE
       492**DCL       492--REDEF
B$JIT.ERR.MID
       399**DCL       399--REDEF
B$JIT.JRESPEAK
       560**DCL       561--REDEF
B$JIT.MODE
       393**DCL     14679>>IF      15627>>IF
B$JIT.ORIGINATOR_PORT.FROM_CR
       669**DCL       669--REDEF     670--REDEF
B$JIT.PNR
       573**DCL       573--REDEF
B$JIT.TDP
       558**DCL     14469>>ASSIGN
B$JIT.TSLINE
       667**DCL       668--REDEF
B$JIT$
     13277**DCL       393--IMP-PTR 14469>>ASSIGN  14679>>IF      15627>>IF
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:193  
B$TCB.ALT$
     13145**DCL     14296>>ASSIGN  14396>>ASSIGN  15039>>ASSIGN  15463>>ASSIGN
B$TCB$
     13278**DCL     14296>>ASSIGN  14396>>ASSIGN  15039>>ASSIGN  15463>>ASSIGN
BUFFER.LGTH IN PROCEDURE PROCESS_MSG_REQ
     15276**DCL     15401<<ASSIGN  15403>>IF      15454>>ASSIGN
BUFFER.REPLY IN PROCEDURE PROCESS_MSG_REQ
     15279**DCL     15406<<ASSIGN  15458--ASSIGN
BUFFER.REPLY.LGTH IN PROCEDURE PROCESS_MSG_REQ
     15281**DCL     15485>>ASSIGN
BUFFER.REPLY_PENDING IN PROCEDURE PROCESS_MSG_REQ
     15275**DCL     15404<<ASSIGN  15405<<ASSIGN  15455>>IF      15483>>IF
BUFFER.TEXT IN PROCEDURE PROCESS_MSG_REQ
     15278**DCL     15403>>IF
BUFFER.TEXT_ IN PROCEDURE PROCESS_MSG_REQ
     15277**DCL     15278--REDEF   15402<<ASSIGN  15454--ASSIGN  15456--ASSIGN  15485--ASSIGN
BUILD_INIT_SUBEXEC IN PROCEDURE PROCESS_TEST_REQ
     15202**PROC    14899--CALL
BUILD_ISC_WRITE IN PROCEDURE PROCESS_TEST_REQ
     15228**PROC    14903--CALL    14914--CALL
CANT_WRITE IN PROCEDURE CONSOLE_OUT
     15515**LABEL   15511--CALLALT
CHAR_COUNT IN PROCEDURE BUILD_ISC_WRITE
     15231**DCL     15241<<ASSIGN  15243<>CALL    15245<>CALL
CHECK_CONTRACT IN PROCEDURE PROCESS_TEST_REQ
     14953**PROC    14895--CALL    14908--CALL
CHECK_DEBUG IN PROCEDURE PROCESS_TEST_REQ
     15168**PROC    14910--CALL
CHECK_SUBEXEC IN PROCEDURE PROCESS_TEST_REQ
     15136**PROC    14909--CALL
CHECK_VALID_SUBEXEC IN PROCEDURE PROCESS_TEST_REQ
     15099**PROC    14898--CALL
CMD$ IN PROCEDURE GET_TOLTS_REQUEST
     14522**DCL     14532--IMP-PTR 14578--IMP-PTR 14617<<ASSIGN  14696>>DOCASE  14795>>DOINDEX 14796>>ASSIGN
     14835>>DOCASE  14861>>IF      14863>>CALLBLT 14863>>CALLBLT 14863>>CALLBLT 15055>>DOCASE  15059>>ASSIGN
     15142>>IF      15142>>IF      15142>>IF      15148>>IF      15398>>ASSIGN
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:194  
CMDOUT.CODE IN PROCEDURE GET_TOLTS_REQUEST
     14540**DCL     14696>>DOCASE  14835>>DOCASE  15055>>DOCASE  15059>>ASSIGN  15142>>IF      15142>>IF
     15142>>IF      15148>>IF
CMDOUT.NSUBLKS IN PROCEDURE GET_TOLTS_REQUEST
     14544**DCL     14861>>IF
CMDOUT.SUBLK$ IN PROCEDURE GET_TOLTS_REQUEST
     14565**DCL     14835>>DOCASE  14861>>IF      14863>>CALLBLT 14863>>CALLBLT 14863>>CALLBLT 15055>>DOCASE
     15059>>ASSIGN  15142>>IF      15142>>IF      15142>>IF      15148>>IF
CMDSYM.COUNT IN PROCEDURE GET_TOLTS_REQUEST
     14601**DCL     14604--IMP-SIZ 14863>>CALLBLT 14863>>CALLBLT
CMDSYM.TEXT IN PROCEDURE GET_TOLTS_REQUEST
     14604**DCL     14863>>CALLBLT
CMDSYM.TEXTC$ IN PROCEDURE GET_TOLTS_REQUEST
     14596**DCL     14863>>CALLBLT 14863>>CALLBLT 14863>>CALLBLT
CONSOLE_FPT
     13299**DCL     15511<>CALL    15517<>CALL
CONSOLE_FPT.BUF_
     13299**DCL     15485<<ASSIGN  15516<<ASSIGN  15574>>ASSIGN  15740<<ASSIGN
CONSOLE_FPT.STATION_
     13301**DCL     13301--REDEF
CONSOLE_FPT.V
     13302**DCL     13299--DCLINIT
CONSOLE_FPT.V.DCB#
     13302**DCL     15515<<ASSIGN
CONSOLE_FPT.V.DVBYTE.VFC#
     13308**DCL     13308--REDEF
CONSOLE_IN
     15649**PROC    14193--CALL    14207--CALL
CONSOLE_OUT
     15506**PROC    14146--CALL    15487--CALL    15741--CALL
ERROR IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15463**LABEL   15459--CALLALT
ERROR IN PROCEDURE PROCESS_MSG_REQ
     15291**LABEL   15285--CALLALT 15286--CALLALT
F$DCB.ACTPOS
     13188**DCL     13188--REDEF
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:195  
F$DCB.ARS#
     13162**DCL     13162--REDEF
F$DCB.ATTR
     13181**DCL     13182--REDEF
F$DCB.BORROW
     13196**DCL     13196--REDEF   13196--REDEF   13196--REDEF
F$DCB.DCBNAME.L
     13210**DCL     13210--IMP-SIZ
F$DCB.EOMCHAR#
     13166**DCL     13166--REDEF
F$DCB.FLDID
     13191**DCL     13191--REDEF
F$DCB.FORM$
     13185**DCL     13185--REDEF
F$DCB.FSECT
     13201**DCL     13201--REDEF
F$DCB.FSN#
     13178**DCL     13178--REDEF   13178--REDEF   13179--REDEF
F$DCB.HEADER$
     13184**DCL     13184--REDEF
F$DCB.IXTNSIZE#
     13182**DCL     13182--REDEF
F$DCB.LASTSTA$
     13171**DCL     13171--REDEF
F$DCB.LVL
     13197**DCL     13197--REDEF
F$DCB.NAME#.C
     13172**DCL     13172--REDEF
F$DCB.NOEOF
     13194**DCL     13194--REDEF
F$DCB.NRECS#
     13183**DCL     13183--REDEF
F$DCB.NRECX
     13202**DCL     13202--REDEF
F$DCB.OHDR
     13194**DCL     13194--REDEF
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:196  
F$DCB.ORG#
     13177**DCL     13177--REDEF
F$DCB.PRECNO
     13200**DCL     13200--REDEF
F$DCB.RCSZ
     13206**DCL     13206--REDEF
F$DCB.RES#
     13173**DCL     13173--REDEF
F$DCB.SETX
     13185**DCL     13185--REDEF
F$DCB.TAB$
     13185**DCL     13185--REDEF
F$DCB.TDA
     13199**DCL     13200--REDEF
F$DCB.WSN#
     13173**DCL     13173--REDEF
FREE_BUFFER IN PROCEDURE FREE_SEG
     14383**DCL     14392<>CALL
FREE_BUFFER.RESULTS_ IN PROCEDURE FREE_SEG
     14383**DCL     14391<<ASSIGN
FREE_BUFFER.V IN PROCEDURE FREE_SEG
     14383**DCL     14383--DCLINIT
FREE_BUFFER.V.SEGSIZE# IN PROCEDURE FREE_SEG
     14385**DCL     14390<<ASSIGN
FREE_DYNAMIC_PAGES
     14268**PROC    14117--CALL
FREE_ERROR IN PROCEDURE FREE_SEG
     14396**LABEL   14392--CALLALT
FREE_EXCESS_DATA_SEGMENTS
     14326**PROC    14118--CALL
FREE_SEG IN PROCEDURE FREE_EXCESS_DATA_SEGMENTS
     14368**PROC    14345--CALL    14349--CALL
GET_INFO IN PROCEDURE SET_SYSTEM_TYPE
     15006**DCL     15032<>CALL
GET_TOLTS_REQUEST
     14520**PROC    14121--CALL    14224--CALL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:197  
ISSUE_OPERATOR_MESSAGE IN PROCEDURE PROCESS_MSG_REQ
     15429**PROC    15286--CALL
LINK_DATE IN PROCEDURE PROCESS_EXIT_REQ
     15691**DCL     15694--REDEF
LINK_DATE.DATE IN PROCEDURE PROCESS_EXIT_REQ
     15693**DCL     15732<<ASSIGN
LINK_DATE_ IN PROCEDURE PROCESS_EXIT_REQ
     15694**DCL     15733>>CALLBLT
M$ERR
      6173**DCL-ENT 14298--CALL    14398--CALL    15041--CALL    15519--CALL
M$EXIT
      6173**DCL-ENT 15742--CALL
M$FDP
      6197**DCL-ENT 14291--CALL
M$FDS
      6196**DCL-ENT 14392--CALL
M$KEYIN
      6166**DCL-ENT 15459--CALL
M$ME
     13140**DCL     15515>>ASSIGN
M$MONINFO
      6229**DCL-ENT 15032--CALL
M$PROMPT
      6185**DCL-ENT 14680--CALL    15628--CALL
M$PROMPT_USER.ACTPOS
     13107**DCL     13107--REDEF
M$PROMPT_USER.ARS#
     13066**DCL     13066--REDEF
M$PROMPT_USER.ATTR#
     13096**DCL     13096--REDEF   13098--REDEF
M$PROMPT_USER.BORROW
     13118**DCL     13118--REDEF   13118--REDEF   13118--REDEF
M$PROMPT_USER.DCBNAME.L
     13137**DCL     13137--IMP-SIZ
M$PROMPT_USER.EOMCHAR#
     13073**DCL     13074--REDEF
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:198  
M$PROMPT_USER.FLDID
     13110**DCL     13111--REDEF
M$PROMPT_USER.FORM$
     13102**DCL     13102--REDEF
M$PROMPT_USER.FSECT
     13125**DCL     13125--REDEF
M$PROMPT_USER.FSN#
     13092**DCL     13092--REDEF   13092--REDEF   13093--REDEF
M$PROMPT_USER.HEADER$
     13101**DCL     13102--REDEF
M$PROMPT_USER.IXTNSIZE#
     13098**DCL     13099--REDEF
M$PROMPT_USER.LASTSTA$
     13082**DCL     13082--REDEF
M$PROMPT_USER.LVL
     13119**DCL     13119--REDEF
M$PROMPT_USER.NAME#.C
     13082**DCL     13083--REDEF
M$PROMPT_USER.NOEOF
     13114**DCL     13114--REDEF
M$PROMPT_USER.NRECS#
     13099**DCL     13099--REDEF
M$PROMPT_USER.NRECX
     13126**DCL     13126--REDEF
M$PROMPT_USER.OHDR
     13115**DCL     13115--REDEF
M$PROMPT_USER.ORG#
     13090**DCL     13091--REDEF
M$PROMPT_USER.PRECNO
     13123**DCL     13123--REDEF
M$PROMPT_USER.RCSZ
     13131**DCL     13131--REDEF
M$PROMPT_USER.RES#
     13084**DCL     13084--REDEF
M$PROMPT_USER.SETX
     13103**DCL     13103--REDEF
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:199  
M$PROMPT_USER.TAB$
     13102**DCL     13102--REDEF
M$PROMPT_USER.TDA
     13122**DCL     13123--REDEF
M$PROMPT_USER.WSN#
     13084**DCL     13085--REDEF
M$READ
      6162**DCL-ENT 15656--CALL
M$TIME
      6228**DCL-ENT 15731--CALL
M$WRITE
      6162**DCL-ENT 15511--CALL    15517--CALL    15575--CALL
NOT_SAME IN PROCEDURE PROCESS_TEST_REQ
     14916**LABEL   14909--CALLALT 14910--CALLALT
NO_DO_MSG
     13224**DCL     15516--ASSIGN
NO_HOPE IN PROCEDURE CONSOLE_OUT
     15519**LABEL   15517--CALLALT
OFF_DATE IN PROCEDURE PROCESS_EXIT_REQ
     15683**DCL     15686--REDEF
OFF_DATE.DATE IN PROCEDURE PROCESS_EXIT_REQ
     15685**DCL     15711--DCLINIT 15712--DCLINIT
OFF_DATE_ IN PROCEDURE PROCESS_EXIT_REQ
     15686**DCL     15733>>CALLBLT
OUT$BLK.SUBLK$ IN PROCEDURE SETUP_BUFFER
     15351**DCL     15398>>ASSIGN
OUT$BLK.CODE IN PROCEDURE SET_DEBUG_FLAGS
     14760**DCL     14797>>DOCASE
OUT$BLK.NSUBLKS IN PROCEDURE SET_DEBUG_FLAGS
     14764**DCL     14795>>DOINDEX
OUT$BLK.SUBLK$ IN PROCEDURE SET_DEBUG_FLAGS
     14785**DCL     14796>>ASSIGN
OUT$SYM.COUNT IN PROCEDURE SETUP_BUFFER
     15387**DCL     15390--IMP-SIZ 15399>>IF      15401>>ASSIGN  15402>>ASSIGN
OUT$SYM.TEXT IN PROCEDURE SETUP_BUFFER
     15390**DCL     15402>>ASSIGN
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:200  
OUTBLK# IN PROCEDURE SET_DEBUG_FLAGS
     14744**DCL     14795<<DOINDEX 14796>>ASSIGN
OUTBLK$ IN PROCEDURE SETUP_BUFFER
     15311**DCL     15398<<ASSIGN  15399>>IF      15401>>ASSIGN  15402>>ASSIGN  15402>>ASSIGN
OUTBLK$ IN PROCEDURE SET_DEBUG_FLAGS
     14745**DCL     14796<<ASSIGN  14797>>DOCASE
OUTPUT_BUFFER IN PROCEDURE PROCESS_EXIT_REQ
     15695**DCL     15733<<CALLBLT 15740--ASSIGN
PREFIX_LGTH IN PROCEDURE REBUILD_TEST_REQ
     14831**DCL     14838<<ASSIGN  14841<<ASSIGN  14844<<ASSIGN  14847<<ASSIGN  14850<<ASSIGN  14853<<ASSIGN
     14856<<ASSIGN  14859<<ASSIGN  14862>>ASSIGN  14863>>CALLBLT
PREFIX_STRING IN PROCEDURE REBUILD_TEST_REQ
     14830**DCL     14837<<ASSIGN  14840<<ASSIGN  14843<<ASSIGN  14846<<ASSIGN  14849<<ASSIGN  14852<<ASSIGN
     14855<<ASSIGN  14858<<ASSIGN  14862>>ASSIGN  14863>>CALLBLT
PRINT_OPERATOR_REPLY IN PROCEDURE PROCESS_MSG_REQ
     15479**PROC    15287--CALL
PROCESS_EXIT_REQ
     15681**PROC    14252--CALL    14709--CALL
PROCESS_MSG_REQ IN PROCEDURE GET_TOLTS_REQUEST
     15272**PROC    14707--CALL
PROCESS_TEST_REQ IN PROCEDURE GET_TOLTS_REQUEST
     14889**PROC    14701--CALL    14705--CALL
PROMPT_OUT
     15534**PROC    14167--CALL
QUEUE_ENTRY
     13214**DCL     13215--REDEF   15208<<ASSIGN
QUEUE_ENTRY_BCD
     13215**DCL     15209<>CALL    15240<<ASSIGN  15248<>CALL
QUEUE_ENTRY_BCD.TEST_REQUEST
     13216**DCL     13219--REDEF   15247<<ASSIGN
READ_IO
     13333**DCL     15656<>CALL
READ_IO.STATION_
     13336**DCL     13337--REDEF
READ_IO.V
     13337**DCL     13333--DCLINIT
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:201  
READ_IO.V.DVBYTE.REREAD#
     13348**DCL     13348--REDEF
READ_IO.V.INDX#
     13346**DCL     13346--REDEF
REBUILD_TEST_REQ IN PROCEDURE GET_TOLTS_REQUEST
     14828**PROC    14700--CALL    14704--CALL
RELEASE_ERROR IN PROCEDURE FREE_DYNAMIC_PAGES
     14296**LABEL   14291--CALLALT
REL_TOLTS_PGS IN PROCEDURE FREE_DYNAMIC_PAGES
     14281**DCL     14291<>CALL
REL_TOLTS_PGS.V IN PROCEDURE FREE_DYNAMIC_PAGES
     14281**DCL     14281--DCLINIT
REL_TOLTS_PGS.V.PAGES# IN PROCEDURE FREE_DYNAMIC_PAGES
     14282**DCL     14290<<ASSIGN
REQUEST_INITIAL
     14492**PROC    14120--CALL
REQUEST_TYPE
     13212**DCL     14904<<ASSIGN  14905<>CALL    15206<<ASSIGN  15209<>CALL    15238<<ASSIGN  15248<>CALL
SEGTBL$ IN PROCEDURE FREE_EXCESS_DATA_SEGMENTS
     14330**DCL     14340<<ASSIGN  14343>>IF      14345>>CALL
SELECT_TOLTS_REQUEST IN PROCEDURE GET_TOLTS_REQUEST
     14692**PROC    14618--CALL
SEND_MSG IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15443**DCL     15459<>CALL
SEND_MSG.MESS_ IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15443**DCL     15454<<ASSIGN
SEND_MSG.REPLY_ IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15444**DCL     15456<<ASSIGN  15457<<ASSIGN
SEND_MSG.RESULTS_ IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15445**DCL     15458<<ASSIGN
SEND_MSG.V IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15446**DCL     15443--DCLINIT
SERVICE_CODE
     13213**DCL     15207<<ASSIGN  15209<>CALL    15239<<ASSIGN  15248<>CALL
SETUP_BUFFER IN PROCEDURE PROCESS_MSG_REQ
     15309**PROC    15285--CALL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:202  
SET_BAR
     14460**PROC    14119--CALL
SET_DEBUG_FLAGS IN PROCEDURE GET_TOLTS_REQUEST
     14742**PROC    14703--CALL
SET_SUBEXEC IN PROCEDURE PROCESS_TEST_REQ
     15051**PROC    14897--CALL
SET_SUBEXEC_PROMPT
     15591**PROC    14192--CALL
SET_SUBEXEC_PROMPT IN PROCEDURE SET_SUBEXEC_PROMPT
     15612**DCL     15628<>CALL
SET_SUBEXEC_PROMPT.V IN PROCEDURE SET_SUBEXEC_PROMPT
     15620**DCL     15614--DCLINIT
SET_SYSTEM_TYPE IN PROCEDURE PROCESS_TEST_REQ
     14992**PROC    14896--CALL
SET_TOLTS_PROMPT IN PROCEDURE SET_TOLTS_PROMPT
     14664**DCL     14680<>CALL
SET_TOLTS_PROMPT.V IN PROCEDURE SET_TOLTS_PROMPT
     14672**DCL     14666--DCLINIT
SIMULATE_PROMPT IN PROCEDURE PROMPT_OUT
     15556**DCL     15575<>CALL
SIMULATE_PROMPT.BUF_ IN PROCEDURE PROMPT_OUT
     15556**DCL     15574<<ASSIGN
SIMULATE_PROMPT.STATION_ IN PROCEDURE PROMPT_OUT
     15558**DCL     15558--REDEF
SIMULATE_PROMPT.V IN PROCEDURE PROMPT_OUT
     15559**DCL     15556--DCLINIT
SIMULATE_PROMPT.V.DVBYTE.VFC# IN PROCEDURE PROMPT_OUT
     15565**DCL     15565--REDEF
SLTA_REQ IN PROCEDURE BUILD_ISC_WRITE
     15230**DCL     15243<>CALL
STOP_TOLTS IN PROCEDURE PROCESS_EXIT_REQ
     15711**DCL     15731<>CALL
STOP_TOLTS.V IN PROCEDURE PROCESS_EXIT_REQ
     15715**DCL     15711--DCLINIT
STX IN PROCEDURE FREE_EXCESS_DATA_SEGMENTS
     14329**DCL     14342<<DOINDEX 14343>>IF      14345>>CALL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:203  
SUBEXEC_PROMPT IN PROCEDURE SET_SUBEXEC_PROMPT
     15593**DCL     15618--DCLINIT
SYSTEM_INFO IN PROCEDURE SET_SYSTEM_TYPE
     15021**DCL     15006--DCLINIT
SYSTEM_INFO.CPU_TYPE# IN PROCEDURE SET_SYSTEM_TYPE
     15025**DCL     15034>>ASSIGN
TCX IN PROCEDURE FREE_EXCESS_DATA_SEGMENTS
     14328**DCL     14338<<DOINDEX 14340>>ASSIGN
TEST_REQ_BCD
     13221**DCL     15247>>ASSIGN
TEST_REQ_BCD.TEST_BCD
     13222**DCL     15243<>CALL    15245<>CALL
TOD$DISPATCHER
     14072**DCL-ENT 14905--CALL    15209--CALL    15248--CALL
TOD$QUEUE
     13364**DCL     14496<<ASSIGN
TOF$BAR.CURRENT
     13392**DCL     14471<<ASSIGN
TOF$BAR.FULL
     13397**DCL     14471>>ASSIGN
TOF$BAR.FULL.BASE
     13398**DCL     14470<<ASSIGN
TOF$BAR.FULL.SIZE
     13400**DCL     14469<<ASSIGN
TOLTS_GETCMD
     13622**DCL     14116<>CALL    14297<>CALL    14397<>CALL    14615<>CALL    14623<>CALL    14970<>CALL
     15040<>CALL    15112<>CALL    15123<>CALL    15155<>CALL    15180<>CALL    15412<>CALL    15464<>CALL
     15727<>CALL
TOLTS_GETCMD.DCB_PARAM#
     13802**DCL     14115<<ASSIGN
TOLTS_GETCMD.ERR#
     13633**DCL     14622>>ASSIGN
TOLTS_GETCMD.ERR#.CODE#
     13636**DCL     14624>>IF
TOLTS_GETCMD.ERR_CODE
     13770**DCL     14296<<ASSIGN  14396<<ASSIGN  14622<<ASSIGN  14968<<ASSIGN  15039<<ASSIGN  15110<<ASSIGN
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:204  
     15121<<ASSIGN  15154<<ASSIGN  15179<<ASSIGN  15411<<ASSIGN  15463<<ASSIGN  15725<<ASSIGN
TOLTS_GETCMD.FLGLEV#
     13727**DCL     14969<<ASSIGN  15111<<ASSIGN  15122<<ASSIGN  15726<<ASSIGN
TOLTS_GETCMD.OUT$
     13627**DCL     13633--REDEF   14617>>ASSIGN
TOLTS_GETCMD.PROMPT_
     13831**DCL     14613<<ASSIGN
TOLTS_GETCMD.PROMPT_VFC#
     13697**DCL     14614<<ASSIGN
TOLTS_PROMPT IN PROCEDURE GET_TOLTS_REQUEST
     14523**DCL     14613--ASSIGN
TOLTS_PROMPT IN PROCEDURE SET_TOLTS_PROMPT
     14645**DCL     14670--DCLINIT
TOM$SEGTBL
     13416**DCL     14343>>IF
TOM$SEGTBL.V
     13417**DCL     14345<>CALL
TOM$SEGTBLS
     13436**DCL     14340--ASSIGN
TOO$IO_BUFFER
     13448**DCL     14497<<ASSIGN
TOP$TCP
     13496**DCL     14498<<ASSIGN
TOP$TCP.FICCDD
     13499**DCL     13505--REDEF   13508--REDEF
TOQ$DCP
     13584**DCL     14499<<ASSIGN
TOQ$DCP.PF.DEBUG_TOLTS
     13588**DCL     14799<<ASSIGN
TOQ$DCP.PF.DISP_MMES
     13592**DCL     14807<<ASSIGN
TOQ$DCP.PF.ENABLED
     13586**DCL     14794<<ASSIGN  15172>>IF
TOQ$DCP.PF.STOP_AT_SE
     13591**DCL     14805<<ASSIGN
TOQ$DCP.PF.STOP_ON_GELBARS
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:205  
     13589**DCL     14801<<ASSIGN
TOQ$DCP.PF.STOP_ON_IO
     13590**DCL     14803<<ASSIGN
TOS$COMWD
     13607**DCL     14500<<ASSIGN
TOS$PACT
     14074**DCL-ENT 14901--CALL    14912--CALL
TOT$ASCII_BCD
     14073**DCL-ENT 15243--CALL    15245--CALL
TOT$DMC.TOM$SEGTBLS
     13975**DCL     14349<>CALL
TOT$DMC.TOM$SEGTBLS.PTR$
     13978**DCL     13436--IMP-PTR 14334>>IF      14340>>ASSIGN  14350<<ASSIGN
TOT$DMC.TOO$IO_BUFFER.PTR$
     13963**DCL     13448--IMP-PTR 14497>>ASSIGN
TOT$DMC.TOP$TCP.PTR$
     13968**DCL     13496--IMP-PTR 14498>>ASSIGN
TOT$ECP
     13990**DCL     14501<<ASSIGN
TOT$ECP.BOOT_CPU_TYPE
     14027**DCL     15034<<ASSIGN  15103>>DOCASE
TOT$ECP.DYNAMIC_PAGE_COUNT
     14008**DCL     14287>>IF      14290>>ASSIGN
TOT$ECP.IO.TYPE
     13995**DCL     15510<<ASSIGN  15573<<ASSIGN
TOT$ECP.ISC.READ_PENDING
     14006**DCL     15655<<ASSIGN  15657<<ASSIGN
TOT$ECP.SUBEXEC.CURRENT
     14011**DCL     14612>>DOUNTIL 14625<<ASSIGN  14893>>IF      14900>>IF      14900>>IF      14911>>IF
     14911>>IF      15057<<ASSIGN  15059<<ASSIGN  15105>>DOCASE  15108<<ASSIGN  15116>>DOCASE  15119<<ASSIGN
     15140>>DOCASE  15148>>IF      15235>>IF      15242>>IF      15722>>IF
TOT$ECP.TEST_REQ
     13991**DCL     13993--REDEF   14862<<ASSIGN  14863<<CALLBLT 14959>>IF      14959>>IF      14959>>IF
     14959>>IF      14959>>IF      14959>>IF      15245<>CALL
TOT$ECP.TEST_REQ_
     13993**DCL     15173>>IF      15173>>IF      15173>>IF
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:206  
TOT$IFAD.MAINTENANCE.CONTRACT
     14043**DCL     14957>>IF
TOT$REINITIALIZE
     14047**DCL     14239>>UNWIND
TOT$RESTART
     14237**ENTRY   14971--CALL    15113--CALL    15124--CALL
TOT$TOLTS.LINK_DATE.ASCII
     14059**DCL     15732>>ASSIGN
TOT$TOLTS.LINK_VERSION.LGTH
     14063**DCL     15733>>CALLBLT
TOT$TOLTS.LINK_VERSION.TEXT
     14064**DCL     15733>>CALLBLT
TOT_ERROR_CODE
     13241**DCL     14968>>ASSIGN  15110>>ASSIGN  15121>>ASSIGN  15154>>ASSIGN  15179>>ASSIGN  15411>>ASSIGN
     15725>>ASSIGN
TOT_ERROR_CODE.ERR#
     13271**DCL     14967<<ASSIGN  15109<<ASSIGN  15120<<ASSIGN  15153<<ASSIGN  15178<<ASSIGN  15410<<ASSIGN
     15724<<ASSIGN
WORD_COUNT IN PROCEDURE FREE_SEG
     14370**DCL     14368--PROC    14390>>ASSIGN
WORD_VECTOR IN PROCEDURE FREE_SEG
     14371**DCL     14368--PROC    14391--ASSIGN
XUG$CLOSE_DCBS
      9745**DCL-ENT 14116--CALL
XUG$ERRMSG
      9743**DCL-ENT 14297--CALL    14397--CALL    14623--CALL    14970--CALL    15040--CALL    15112--CALL
     15123--CALL    15155--CALL    15180--CALL    15412--CALL    15464--CALL    15727--CALL
XUG$GETCMD
      9736**DCL-ENT 14615--CALL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:207  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:208  
              FULL UREF LISTING

B$ALT
     13149**DCL
B$ALT.BRKCNT
     13150**DCL
B$ALT.DCB#
     13150**DCL
B$ALT.ERR.CODE
     13151**DCL
B$ALT.ERR.FCG
     13151**DCL
B$ALT.ERR.MID
     13151**DCL
B$ALT.ERR.MON
     13151**DCL
B$ALT.ERR.SEV
     13151**DCL
B$ALT.EVSC
     13150**DCL
B$ALT.FPT
     13149**DCL
B$ALT.FPT.FCG
     13149**DCL
B$ALT.FPT.PMME
     13149**DCL
B$ALT.P#
     13153**DCL
B$ALT.SSFRAME
     13149**DCL
B$ALT.SUBC
     13150**DCL
B$JIT
       393**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:209  
B$JIT.ACCEPT_FLAGS
       546**DCL
B$JIT.ACCEPT_FLAGS.ANNOUNCE
       546**DCL
B$JIT.ACCEPT_FLAGS.BROADCAST
       546**DCL
B$JIT.ACCEPT_FLAGS.SEND
       546**DCL
B$JIT.ACCESS
       666**DCL
B$JIT.ACCESS.FORMS
       666**DCL
B$JIT.ACCESS.PACKS
       666**DCL
B$JIT.ACCESS.TAPES
       666**DCL
B$JIT.ACCN
       398**DCL
B$JIT.APATTR
       671**DCL
B$JIT.ARECX
       666**DCL
B$JIT.BILL
       546**DCL
B$JIT.BLINDACCTNG
       546**DCL
B$JIT.BUDLIM
       535**DCL
B$JIT.CALCNT
       572**DCL
B$JIT.CCARS
       486**DCL
B$JIT.CCBUF
       486**DCL
B$JIT.CCDISP
       486**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:210  
B$JIT.CHECK_CFU
       568**DCL
B$JIT.CLRES
       665**DCL
B$JIT.CPFLAGS1
       487**DCL
B$JIT.CPFLAGS1.BRK
       491**DCL
B$JIT.CPFLAGS1.BUFFULL
       491**DCL
B$JIT.CPFLAGS1.CFREAD
       491**DCL
B$JIT.CPFLAGS1.DELTA
       492**DCL
B$JIT.CPFLAGS1.DONTRFEXT3
       488**DCL
B$JIT.CPFLAGS1.DRIBBLE
       490**DCL
B$JIT.CPFLAGS1.ECHO
       491**DCL
B$JIT.CPFLAGS1.ECHO_LINK
       488**DCL
B$JIT.CPFLAGS1.EXIT#
       490**DCL
B$JIT.CPFLAGS1.FIRSTCP
       489**DCL
B$JIT.CPFLAGS1.INITIALIZE
       490**DCL
B$JIT.CPFLAGS1.JSTEP
       487**DCL
B$JIT.CPFLAGS1.KEEPDS
       490**DCL
B$JIT.CPFLAGS1.LASTCP
       489**DCL
B$JIT.CPFLAGS1.LASTCPEXISTS
       489**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:211  
B$JIT.CPFLAGS1.LNKPMME
       488**DCL
B$JIT.CPFLAGS1.LOGOFF
       487**DCL
B$JIT.CPFLAGS1.NOTIFY
       490**DCL
B$JIT.CPFLAGS1.PROCACCT
       490**DCL
B$JIT.CPFLAGS1.PROTECT
       491**DCL
B$JIT.CPFLAGS1.RUND
       487**DCL
B$JIT.CPFLAGS1.SCREECH
       491**DCL
B$JIT.CPFLAGS1.SKIPABORT
       490**DCL
B$JIT.CPFLAGS1.SOMENOTIFY
       489**DCL
B$JIT.CPFLAGS1.SSTART
       488**DCL
B$JIT.CPFLAGS1.STARPROC
       489**DCL
B$JIT.CPFLAGS1.STARSACC
       489**DCL
B$JIT.CPFLAGS1.STEPACCT
       491**DCL
B$JIT.CPFLAGS1.STEPLMT
       491**DCL
B$JIT.CPFLAGS1.TESTMODE
       489**DCL
B$JIT.CPFLAGS1.TRMNATE
       490**DCL
B$JIT.CPFLAGS1.WHEN_INPUT
       488**DCL
B$JIT.CPFLAGS1.YC
       487**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:212  
B$JIT.CPFLAGS1.YCGET
       488**DCL
B$JIT.CPFLAGS1.YCPMME
       488**DCL
B$JIT.CSLEV
       553**DCL
B$JIT.CTIME
       571**DCL
B$JIT.CURPNUM
       652**DCL
B$JIT.CURRCORE
       560**DCL
B$JIT.CURSUDO
       667**DCL
B$JIT.CURTMPDP
       567**DCL
B$JIT.DCB$
       566**DCL
B$JIT.DCBNO
       479**DCL
B$JIT.DDLL
       556**DCL
B$JIT.DDUL
       556**DCL
B$JIT.DEFEXP
       566**DCL
B$JIT.DEFPRI
       546**DCL
B$JIT.DLL
       556**DCL
B$JIT.DO$
       566**DCL
B$JIT.DUL
       556**DCL
B$JIT.ENQS
       671**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:213  
B$JIT.ERR
       398**DCL
B$JIT.ERR.CODE
       399**DCL
B$JIT.ERR.FCG
       398**DCL
B$JIT.ERR.MON
       399**DCL
B$JIT.ERR.SEV
       399**DCL
B$JIT.ERR.UMID
       399**DCL
B$JIT.EUP
       558**DCL
B$JIT.EXTUS
       574**DCL
B$JIT.FACCN
       398**DCL
B$JIT.FACNACS
       566**DCL
B$JIT.FACNCM
       568**DCL
B$JIT.FBUC
       558**DCL
B$JIT.FBUL
       558**DCL
B$JIT.FEXT
       566**DCL
B$JIT.FPSN
       479**DCL
B$JIT.FRS
       594**DCL
B$JIT.GAC
       567**DCL
B$JIT.HIGHPNUM
       652**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:214  
B$JIT.HPSN
       566**DCL
B$JIT.IDELTAT
       572**DCL
B$JIT.INSTWORD
       486**DCL
B$JIT.INTER
       665**DCL
B$JIT.INTTIME
       571**DCL
B$JIT.JOBNAME
       547**DCL
B$JIT.JOBUNIT
       487**DCL
B$JIT.JORG
       534**DCL
B$JIT.JPEAK
       560**DCL
B$JIT.JSLEV
       535**DCL
B$JIT.JTMPDPPK
       567**DCL
B$JIT.JUNK
       598**DCL
B$JIT.JUNK2
       652**DCL
B$JIT.LANG
       534**DCL
B$JIT.LBJID
       574**DCL
B$JIT.LLL
       562**DCL
B$JIT.LNKCNT
       598**DCL
B$JIT.LOCK
       547**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:215  
B$JIT.LOGONTIME
       535**DCL
B$JIT.LUL
       562**DCL
B$JIT.MAXCORE
       559**DCL
B$JIT.MAXENQ
       671**DCL
B$JIT.MAXEXP
       566**DCL
B$JIT.MAXPRI
       546**DCL
B$JIT.MAXTMPDP
       567**DCL
B$JIT.MMFLGS
       559**DCL
B$JIT.MMFLGS.FREE_PPGS
       559**DCL
B$JIT.MOUNTS
       666**DCL
B$JIT.MRT
       572**DCL
B$JIT.MSGID
       547**DCL
B$JIT.MSGID.PRIMARY
       547**DCL
B$JIT.MSGID.XT
       548**DCL
B$JIT.NEXTCC
       540**DCL
B$JIT.NODOEVER
       665**DCL
B$JIT.NOLOEVER
       665**DCL
B$JIT.NOPOEVER
       665**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:216  
B$JIT.NUTS
       573**DCL
B$JIT.OLTA
       666**DCL
B$JIT.ORIGINATOR_MODE
       665**DCL
B$JIT.ORIGINATOR_PORT
       668**DCL
B$JIT.ORIGINATOR_PORT.FROM_CR.DEVICE
       669**DCL
B$JIT.ORIGINATOR_PORT.FROM_CR.TNAME
       669**DCL
B$JIT.ORIGINATOR_PORT.FROM_GHOST
       669**DCL
B$JIT.ORIGINATOR_PORT.FROM_GHOST.SYSID
       669**DCL
B$JIT.ORIGINATOR_PORT.FROM_INT
       670**DCL
B$JIT.ORIGINATOR_PORT.FROM_INT.SYSID
       670**DCL
B$JIT.ORIGINATOR_PORT.FROM_INT.TSLINE
       670**DCL
B$JIT.OUTPRIO
       479**DCL
B$JIT.PCADS
       562**DCL
B$JIT.PCC
       557**DCL
B$JIT.PCD
       557**DCL
B$JIT.PCDD
       558**DCL
B$JIT.PCDDS
       561**DCL
B$JIT.PCDS
       557**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:217  
B$JIT.PCL
       562**DCL
B$JIT.PCP
       557**DCL
B$JIT.PCROS
       557**DCL
B$JIT.PCV
       562**DCL
B$JIT.PLL
       556**DCL
B$JIT.PMEMTIM
       572**DCL
B$JIT.PMME_COUNT
       670**DCL
B$JIT.PMME_DATA
       670**DCL
B$JIT.PMME_DATA.CPU
       670**DCL
B$JIT.PMME_DATA.I_O
       670**DCL
B$JIT.PMME_DATA.MISC1
       670**DCL
B$JIT.PMME_DATA.MISC2
       671**DCL
B$JIT.PPC
       559**DCL
B$JIT.PPRIV
       454**DCL
B$JIT.PPRIV.CNTRLC
       454**DCL
B$JIT.PPRIV.CNTRLD
       454**DCL
B$JIT.PPRIV.EFT
       454**DCL
B$JIT.PPRIV.EL
       454**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:218  
B$JIT.PPRIV.LABEL
       455**DCL
B$JIT.PPRIV.NETCON
       455**DCL
B$JIT.PPRIV.PADMIN
       456**DCL
B$JIT.PPRIV.PIGC
       455**DCL
B$JIT.PPRIV.PIGD
       455**DCL
B$JIT.PPRIV.PIGETTE
       457**DCL
B$JIT.PPRIV.RATES
       456**DCL
B$JIT.PPRIV.REPLAY
       456**DCL
B$JIT.PPRIV.SPIDERC
       455**DCL
B$JIT.PPRIV.SPIDERD
       455**DCL
B$JIT.PPRIV.SUPER
       455**DCL
B$JIT.PPRIV.SUPERAUTH
       455**DCL
B$JIT.PPRIV.SUPERD
       456**DCL
B$JIT.PPRIV.SUPERFORM
       456**DCL
B$JIT.PPRIV.SUPERWSN
       456**DCL
B$JIT.PPRIV.SYSCON
       456**DCL
B$JIT.PPRIV.VOLINIT
       456**DCL
B$JIT.PRDPRM
       567**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:219  
B$JIT.PRFLAGS
       482**DCL
B$JIT.PRFLAGS.COMMENT
       482**DCL
B$JIT.PRFLAGS.CONTINUED
       482**DCL
B$JIT.PRFLAGS.CORRECT
       483**DCL
B$JIT.PRFLAGS.EXPOUND
       483**DCL
B$JIT.PRFLAGS.LIST
       482**DCL
B$JIT.PRFLAGS.LS
       482**DCL
B$JIT.PRFLAGS.NOSCAN
       483**DCL
B$JIT.PRFLAGS.NSSYNTAX
       482**DCL
B$JIT.PRFLAGS.OU
       482**DCL
B$JIT.PRFLAGS.OUTPUT
       482**DCL
B$JIT.PRFLAGS.POINT
       483**DCL
B$JIT.PRFLAGS.POSITION
       483**DCL
B$JIT.PRFLAGS.SI
       482**DCL
B$JIT.PRFLAGS.UI
       482**DCL
B$JIT.PRFLAGS.WHEN
       483**DCL
B$JIT.PRIINC
       573**DCL
B$JIT.PRIOB
       571**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:220  
B$JIT.PRIOCORE
       559**DCL
B$JIT.PRIOR_CP
       662**DCL
B$JIT.PRIV
       399**DCL
B$JIT.PRIV.ACTIVE
       399**DCL
B$JIT.PRIV.ACTIVE.ASAVE
       401**DCL
B$JIT.PRIV.ACTIVE.CFEP
       402**DCL
B$JIT.PRIV.ACTIVE.CQ
       402**DCL
B$JIT.PRIV.ACTIVE.DISPJOB
       401**DCL
B$JIT.PRIV.ACTIVE.DOMANE
       400**DCL
B$JIT.PRIV.ACTIVE.EXMM
       403**DCL
B$JIT.PRIV.ACTIVE.EXPM
       402**DCL
B$JIT.PRIV.ACTIVE.FMBLK
       399**DCL
B$JIT.PRIV.ACTIVE.FMDIAG
       400**DCL
B$JIT.PRIV.ACTIVE.FMEFT
       399**DCL
B$JIT.PRIV.ACTIVE.FMREAD
       400**DCL
B$JIT.PRIV.ACTIVE.FMSEC
       400**DCL
B$JIT.PRIV.ACTIVE.GPP
       401**DCL
B$JIT.PRIV.ACTIVE.INTCON
       402**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:221  
B$JIT.PRIV.ACTIVE.IOQ
       402**DCL
B$JIT.PRIV.ACTIVE.IOQW
       402**DCL
B$JIT.PRIV.ACTIVE.JIT
       403**DCL
B$JIT.PRIV.ACTIVE.MAXMEM
       403**DCL
B$JIT.PRIV.ACTIVE.MFEP
       402**DCL
B$JIT.PRIV.ACTIVE.MODE
       400**DCL
B$JIT.PRIV.ACTIVE.MSYS
       403**DCL
B$JIT.PRIV.ACTIVE.PM
       402**DCL
B$JIT.PRIV.ACTIVE.SCREECH
       401**DCL
B$JIT.PRIV.ACTIVE.SNAP
       401**DCL
B$JIT.PRIV.ACTIVE.SPCLMM
       403**DCL
B$JIT.PRIV.ACTIVE.SYSACCT
       400**DCL
B$JIT.PRIV.ACTIVE.SYSCON
       401**DCL
B$JIT.PRIV.ACTIVE.SYSLOG
       402**DCL
B$JIT.PRIV.ACTIVE.TND
       402**DCL
B$JIT.PRIV.AUTH
       439**DCL
B$JIT.PRIV.AUTH.ASAVE
       440**DCL
B$JIT.PRIV.AUTH.CFEP
       441**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:222  
B$JIT.PRIV.AUTH.CQ
       441**DCL
B$JIT.PRIV.AUTH.DISPJOB
       440**DCL
B$JIT.PRIV.AUTH.DOMANE
       439**DCL
B$JIT.PRIV.AUTH.EXMM
       442**DCL
B$JIT.PRIV.AUTH.EXPM
       441**DCL
B$JIT.PRIV.AUTH.FMBLK
       439**DCL
B$JIT.PRIV.AUTH.FMDIAG
       439**DCL
B$JIT.PRIV.AUTH.FMEFT
       439**DCL
B$JIT.PRIV.AUTH.FMREAD
       439**DCL
B$JIT.PRIV.AUTH.FMSEC
       439**DCL
B$JIT.PRIV.AUTH.GPP
       441**DCL
B$JIT.PRIV.AUTH.INTCON
       441**DCL
B$JIT.PRIV.AUTH.IOQ
       441**DCL
B$JIT.PRIV.AUTH.IOQW
       441**DCL
B$JIT.PRIV.AUTH.JIT
       442**DCL
B$JIT.PRIV.AUTH.MAXMEM
       442**DCL
B$JIT.PRIV.AUTH.MFEP
       441**DCL
B$JIT.PRIV.AUTH.MODE
       439**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:223  
B$JIT.PRIV.AUTH.MSYS
       442**DCL
B$JIT.PRIV.AUTH.PM
       442**DCL
B$JIT.PRIV.AUTH.SCREECH
       440**DCL
B$JIT.PRIV.AUTH.SNAP
       440**DCL
B$JIT.PRIV.AUTH.SPCLMM
       442**DCL
B$JIT.PRIV.AUTH.SYSACCT
       439**DCL
B$JIT.PRIV.AUTH.SYSCON
       440**DCL
B$JIT.PRIV.AUTH.SYSLOG
       441**DCL
B$JIT.PRIV.AUTH.TND
       442**DCL
B$JIT.PRIV.JOB
       442**DCL
B$JIT.PRIV.JOB.ASAVE
       444**DCL
B$JIT.PRIV.JOB.CFEP
       445**DCL
B$JIT.PRIV.JOB.CQ
       445**DCL
B$JIT.PRIV.JOB.DISPJOB
       444**DCL
B$JIT.PRIV.JOB.DOMANE
       443**DCL
B$JIT.PRIV.JOB.EXMM
       446**DCL
B$JIT.PRIV.JOB.EXPM
       445**DCL
B$JIT.PRIV.JOB.FMBLK
       443**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:224  
B$JIT.PRIV.JOB.FMDIAG
       443**DCL
B$JIT.PRIV.JOB.FMEFT
       442**DCL
B$JIT.PRIV.JOB.FMREAD
       443**DCL
B$JIT.PRIV.JOB.FMSEC
       443**DCL
B$JIT.PRIV.JOB.GPP
       444**DCL
B$JIT.PRIV.JOB.INTCON
       445**DCL
B$JIT.PRIV.JOB.IOQ
       445**DCL
B$JIT.PRIV.JOB.IOQW
       445**DCL
B$JIT.PRIV.JOB.JIT
       446**DCL
B$JIT.PRIV.JOB.MAXMEM
       446**DCL
B$JIT.PRIV.JOB.MFEP
       445**DCL
B$JIT.PRIV.JOB.MODE
       443**DCL
B$JIT.PRIV.JOB.MSYS
       446**DCL
B$JIT.PRIV.JOB.PM
       445**DCL
B$JIT.PRIV.JOB.SCREECH
       444**DCL
B$JIT.PRIV.JOB.SNAP
       444**DCL
B$JIT.PRIV.JOB.SPCLMM
       446**DCL
B$JIT.PRIV.JOB.SYSACCT
       443**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:225  
B$JIT.PRIV.JOB.SYSCON
       444**DCL
B$JIT.PRIV.JOB.SYSLOG
       445**DCL
B$JIT.PRIV.JOB.TND
       446**DCL
B$JIT.PRIV.PRC
       446**DCL
B$JIT.PRIV.PRC.ASAVE
       448**DCL
B$JIT.PRIV.PRC.CFEP
       449**DCL
B$JIT.PRIV.PRC.CQ
       449**DCL
B$JIT.PRIV.PRC.DISPJOB
       448**DCL
B$JIT.PRIV.PRC.DOMANE
       447**DCL
B$JIT.PRIV.PRC.EXMM
       450**DCL
B$JIT.PRIV.PRC.EXPM
       449**DCL
B$JIT.PRIV.PRC.FMBLK
       446**DCL
B$JIT.PRIV.PRC.FMDIAG
       447**DCL
B$JIT.PRIV.PRC.FMEFT
       446**DCL
B$JIT.PRIV.PRC.FMREAD
       447**DCL
B$JIT.PRIV.PRC.FMSEC
       447**DCL
B$JIT.PRIV.PRC.GPP
       448**DCL
B$JIT.PRIV.PRC.INTCON
       449**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:226  
B$JIT.PRIV.PRC.IOQ
       449**DCL
B$JIT.PRIV.PRC.IOQW
       449**DCL
B$JIT.PRIV.PRC.JIT
       450**DCL
B$JIT.PRIV.PRC.MAXMEM
       450**DCL
B$JIT.PRIV.PRC.MFEP
       449**DCL
B$JIT.PRIV.PRC.MODE
       447**DCL
B$JIT.PRIV.PRC.MSYS
       450**DCL
B$JIT.PRIV.PRC.PM
       449**DCL
B$JIT.PRIV.PRC.SCREECH
       448**DCL
B$JIT.PRIV.PRC.SNAP
       448**DCL
B$JIT.PRIV.PRC.SPCLMM
       450**DCL
B$JIT.PRIV.PRC.SYSACCT
       447**DCL
B$JIT.PRIV.PRC.SYSCON
       448**DCL
B$JIT.PRIV.PRC.SYSLOG
       448**DCL
B$JIT.PRIV.PRC.TND
       449**DCL
B$JIT.PRIV.SAVED
       450**DCL
B$JIT.PRIV.SAVED.ASAVE
       452**DCL
B$JIT.PRIV.SAVED.CFEP
       453**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:227  
B$JIT.PRIV.SAVED.CQ
       453**DCL
B$JIT.PRIV.SAVED.DISPJOB
       452**DCL
B$JIT.PRIV.SAVED.DOMANE
       451**DCL
B$JIT.PRIV.SAVED.EXMM
       454**DCL
B$JIT.PRIV.SAVED.EXPM
       453**DCL
B$JIT.PRIV.SAVED.FMBLK
       450**DCL
B$JIT.PRIV.SAVED.FMDIAG
       451**DCL
B$JIT.PRIV.SAVED.FMEFT
       450**DCL
B$JIT.PRIV.SAVED.FMREAD
       451**DCL
B$JIT.PRIV.SAVED.FMSEC
       450**DCL
B$JIT.PRIV.SAVED.GPP
       452**DCL
B$JIT.PRIV.SAVED.INTCON
       453**DCL
B$JIT.PRIV.SAVED.IOQ
       453**DCL
B$JIT.PRIV.SAVED.IOQW
       453**DCL
B$JIT.PRIV.SAVED.JIT
       453**DCL
B$JIT.PRIV.SAVED.MAXMEM
       454**DCL
B$JIT.PRIV.SAVED.MFEP
       453**DCL
B$JIT.PRIV.SAVED.MODE
       451**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:228  
B$JIT.PRIV.SAVED.MSYS
       454**DCL
B$JIT.PRIV.SAVED.PM
       453**DCL
B$JIT.PRIV.SAVED.SCREECH
       452**DCL
B$JIT.PRIV.SAVED.SNAP
       452**DCL
B$JIT.PRIV.SAVED.SPCLMM
       454**DCL
B$JIT.PRIV.SAVED.SYSACCT
       451**DCL
B$JIT.PRIV.SAVED.SYSCON
       452**DCL
B$JIT.PRIV.SAVED.SYSLOG
       452**DCL
B$JIT.PRIV.SAVED.TND
       453**DCL
B$JIT.PROG_ENTRY
       548**DCL
B$JIT.PROMPTS
       547**DCL
B$JIT.PSEUDOPGS
       561**DCL
B$JIT.PSEUDO_COUNT
       662**DCL
B$JIT.PSEUDO_TEXT
       662**DCL
B$JIT.PSLEV
       535**DCL
B$JIT.PTSIZ
       562**DCL
B$JIT.PUL
       556**DCL
B$JIT.QUAN
       571**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:229  
B$JIT.REMCPO
       671**DCL
B$JIT.REMDO
       671**DCL
B$JIT.REMLO
       671**DCL
B$JIT.RERUN
       573**DCL
B$JIT.RESCORE
       667**DCL
B$JIT.RESPEAK
       561**DCL
B$JIT.RNST
       577**DCL
B$JIT.RUNFLAGS
       594**DCL
B$JIT.SAVEDCB$
       568**DCL
B$JIT.SCHTIME
       571**DCL
B$JIT.SINPUTSZ
       547**DCL
B$JIT.SPEAK
       560**DCL
B$JIT.SRESPEAK
       561**DCL
B$JIT.SSLEV
       535**DCL
B$JIT.STAR
       566**DCL
B$JIT.STAR.DA
       566**DCL
B$JIT.STDLOPGS
       666**DCL
B$JIT.STEPCC
       625**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:230  
B$JIT.STEPS
       619**DCL
B$JIT.STEPUNIT
       487**DCL
B$JIT.STIME
       571**DCL
B$JIT.STMPDPPK
       567**DCL
B$JIT.SVLDTF
       639**DCL
B$JIT.SVTUS
       574**DCL
B$JIT.SWITCH
       486**DCL
B$JIT.SYSID
       398**DCL
B$JIT.TMPGAC
       567**DCL
B$JIT.TMPGAC.N
       567**DCL
B$JIT.TMPGAC.TIME
       567**DCL
B$JIT.TPEXT
       572**DCL
B$JIT.TPSVT
       572**DCL
B$JIT.TSLINE.FEX
       667**DCL
B$JIT.TSLINE.LEV
       668**DCL
B$JIT.TSLINE.PORT
       667**DCL
B$JIT.TSLINE.SPEED
       667**DCL
B$JIT.TSLINE.SUBDEVICE
       668**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:231  
B$JIT.TSLINE.SUBSUBDEVICE
       668**DCL
B$JIT.TSLINE.TTYP
       668**DCL
B$JIT.TUEXT
       572**DCL
B$JIT.TUSVT
       572**DCL
B$JIT.UMEMTIM
       572**DCL
B$JIT.UNAME
       398**DCL
B$JIT.USER
       398**DCL
B$JIT.USERWORD
       486**DCL
B$JIT.USRDCB
       547**DCL
B$JIT.USRERR
       534**DCL
B$JIT.USRERR.CODE
       534**DCL
B$JIT.USRERR.FCG
       534**DCL
B$JIT.USRERR.MID
       534**DCL
B$JIT.USRERR.MON
       534**DCL
B$JIT.USRERR.SEV
       534**DCL
B$JIT.USRIC
       535**DCL
B$JIT.USRRNST
       534**DCL
B$JIT.UTIMER
       573**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:232  
B$JIT.VIRTUAL
       563**DCL
B$JIT.VIRTUAL.DCB#
       563**DCL
B$JIT.WOO
       398**DCL
B$JIT.XCONF
       619**DCL
B$JIT.XLIMFLG
       629**DCL
B$JIT.XTIME
       571**DCL
B$JIT.YC0SZ
       535**DCL
B$JIT.YC2SZ
       553**DCL
B$TCB
     13145**DCL
B$TCB.CURRSZ
     13145**DCL
B$TCB.STK$
     13145**DCL
B$TCB.TCBAVSZ
     13145**DCL
BUFFER IN PROCEDURE PROCESS_MSG_REQ
     15274**DCL
BUFFER.REPLY.TYC IN PROCEDURE PROCESS_MSG_REQ
     15280**DCL
CMDOUT IN PROCEDURE GET_TOLTS_REQUEST
     14532**DCL
CMDOUT.CPOS IN PROCEDURE GET_TOLTS_REQUEST
     14558**DCL
CMDOUT.NDTYPE IN PROCEDURE GET_TOLTS_REQUEST
     14535**DCL
CMDOUT.SCRITCH IN PROCEDURE GET_TOLTS_REQUEST
     14548**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:233  
CMDOUT.TEMP IN PROCEDURE GET_TOLTS_REQUEST
     14533**DCL
CMDSYM IN PROCEDURE GET_TOLTS_REQUEST
     14578**DCL
CMDSYM.CODE IN PROCEDURE GET_TOLTS_REQUEST
     14584**DCL
CMDSYM.CPOS IN PROCEDURE GET_TOLTS_REQUEST
     14593**DCL
CMDSYM.NDTYPE IN PROCEDURE GET_TOLTS_REQUEST
     14581**DCL
CMDSYM.NSUBLKS IN PROCEDURE GET_TOLTS_REQUEST
     14587**DCL
CMDSYM.SCRITCH IN PROCEDURE GET_TOLTS_REQUEST
     14590**DCL
CMDSYM.TEMP IN PROCEDURE GET_TOLTS_REQUEST
     14579**DCL
CONSOLE_FPT.BUF_.BOUND
     13299**DCL
CONSOLE_FPT.BUF_.BUF$
     13301**DCL
CONSOLE_FPT.IDBUF_
     13301**DCL
CONSOLE_FPT.KEY_
     13299**DCL
CONSOLE_FPT.V.DVBYTE
     13307**DCL
CONSOLE_FPT.V.DVBYTE.BIN#
     13308**DCL
CONSOLE_FPT.V.DVBYTE.BP#
     13308**DCL
CONSOLE_FPT.V.DVBYTE.CONT#
     13310**DCL
CONSOLE_FPT.V.DVBYTE.NODAT#
     13309**DCL
CONSOLE_FPT.V.DVBYTE.REREAD#
     13308**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:234  
CONSOLE_FPT.V.DVBYTE.RRR#
     13309**DCL
CONSOLE_FPT.V.DVBYTE.TOP#
     13307**DCL
CONSOLE_FPT.V.DVBYTE.TRANS#
     13309**DCL
CONSOLE_FPT.V.EVENT#
     13307**DCL
CONSOLE_FPT.V.FULL#
     13304**DCL
CONSOLE_FPT.V.ID#
     13303**DCL
CONSOLE_FPT.V.IOERROK#
     13306**DCL
CONSOLE_FPT.V.KEYTYPE#
     13306**DCL
CONSOLE_FPT.V.NEWKEY#
     13305**DCL
CONSOLE_FPT.V.NOTIME#
     13305**DCL
CONSOLE_FPT.V.ODFNC#
     13311**DCL
CONSOLE_FPT.V.ONEWKEY#
     13304**DCL
CONSOLE_FPT.V.REWRITE#
     13305**DCL
CONSOLE_FPT.V.SEED#
     13307**DCL
CONSOLE_FPT.V.WAIT#
     13302**DCL
CONSOLE_FPT.V_
     13299**DCL
F$DCB
     13156**DCL
F$DCB.ACCT#
     13172**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:235  
F$DCB.ACS#
     13180**DCL
F$DCB.AFTRBLK
     13196**DCL
F$DCB.AGE
     13207**DCL
F$DCB.ALTKEYX
     13187**DCL
F$DCB.AMFLG
     13193**DCL
F$DCB.AMFLG.ACCF
     13193**DCL
F$DCB.AMFLG.ACSF
     13193**DCL
F$DCB.AMFLG.INSF
     13193**DCL
F$DCB.AMFLG.PROF
     13193**DCL
F$DCB.AMFLG.SNLF
     13193**DCL
F$DCB.AMFLG.USRF
     13193**DCL
F$DCB.AMR#
     13175**DCL
F$DCB.AMRSETSTA
     13174**DCL
F$DCB.ANSISPANSEQ#
     13190**DCL
F$DCB.ASN#
     13177**DCL
F$DCB.ATTR.APL#
     13182**DCL
F$DCB.ATTR.BIN#
     13182**DCL
F$DCB.ATTR.DENS#
     13181**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:236  
F$DCB.ATTR.GRLGL#
     13181**DCL
F$DCB.ATTR.LOWERCASE#
     13182**DCL
F$DCB.ATTR.NATL#
     13181**DCL
F$DCB.ATTR.NOXLATE#
     13181**DCL
F$DCB.ATTR.TRANSLGL#
     13181**DCL
F$DCB.ATTR.TRUOVRPRT#
     13181**DCL
F$DCB.ATTR.UPPERCASE#
     13181**DCL
F$DCB.AU#
     13174**DCL
F$DCB.AUTHFFLG
     13188**DCL
F$DCB.AUTHFFLG.AU#
     13190**DCL
F$DCB.AUTHFFLG.AURD#
     13190**DCL
F$DCB.AUTHFFLG.CREATE#
     13190**DCL
F$DCB.AUTHFFLG.DELF#
     13189**DCL
F$DCB.AUTHFFLG.DELR#
     13189**DCL
F$DCB.AUTHFFLG.EXEC#
     13189**DCL
F$DCB.AUTHFFLG.NOLIST#
     13189**DCL
F$DCB.AUTHFFLG.READ#
     13189**DCL
F$DCB.AUTHFFLG.REATTR#
     13189**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:237  
F$DCB.AUTHFFLG.TCTL#
     13190**DCL
F$DCB.AUTHFFLG.UPD#
     13189**DCL
F$DCB.AUTHFFLG.WNEW#
     13189**DCL
F$DCB.BADARS#
     13191**DCL
F$DCB.BFR
     13207**DCL
F$DCB.BFR.BUFUP
     13208**DCL
F$DCB.BFR.BUFX
     13208**DCL
F$DCB.BFR.CHNG
     13208**DCL
F$DCB.BFR.CVM
     13208**DCL
F$DCB.BFR.DA
     13208**DCL
F$DCB.BFR.SCRUB
     13208**DCL
F$DCB.BFR1
     13208**DCL
F$DCB.BFR1.CX
     13209**DCL
F$DCB.BFR1.FLAGS
     13208**DCL
F$DCB.BFR1.FLAGS.ONE_WORD_HEADER
     13208**DCL
F$DCB.BFR1.SIZ
     13209**DCL
F$DCB.BLKL#
     13178**DCL
F$DCB.BLKLEN
     13201**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:238  
F$DCB.BLOCKED#
     13176**DCL
F$DCB.BOL#
     13179**DCL
F$DCB.BUPF
     13166**DCL
F$DCB.BUPM#
     13177**DCL
F$DCB.BYTESLEFT
     13200**DCL
F$DCB.CACHE
     13195**DCL
F$DCB.CBUFNUM
     13199**DCL
F$DCB.CFU$
     13197**DCL
F$DCB.CHAIN#
     13183**DCL
F$DCB.CHANTIME#
     13183**DCL
F$DCB.CNVRT#
     13175**DCL
F$DCB.CODE16$
     13187**DCL
F$DCB.COMP#
     13176**DCL
F$DCB.CONNCT#
     13182**DCL
F$DCB.CONT
     13195**DCL
F$DCB.CRECNO
     13200**DCL
F$DCB.CRECX
     13199**DCL
F$DCB.CSEED
     13200**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:239  
F$DCB.CTG#
     13176**DCL
F$DCB.CTLCMDIN
     13204**DCL
F$DCB.CVOL#
     13176**DCL
F$DCB.CWORD
     13205**DCL
F$DCB.CX
     13205**DCL
F$DCB.DBGDCBNO#
     13178**DCL
F$DCB.DBGSYSID#
     13178**DCL
F$DCB.DCB#
     13190**DCL
F$DCB.DCBNAME
     13209**DCL
F$DCB.DCBNAME.N
     13210**DCL
F$DCB.DCBNAME.S
     13210**DCL
F$DCB.DCBNAME.X
     13210**DCL
F$DCB.DCT$
     13185**DCL
F$DCB.DDEV
     13168**DCL
F$DCB.DDEV.CP#
     13168**DCL
F$DCB.DDEV.GR#
     13169**DCL
F$DCB.DDEV.IC#
     13168**DCL
F$DCB.DDEV.LP#
     13168**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:240  
F$DCB.DDEV.UCOUT#
     13169**DCL
F$DCB.DDEV.XEQ#
     13169**DCL
F$DCB.DECRYPT
     13203**DCL
F$DCB.DENSITY#
     13183**DCL
F$DCB.DESC
     13169**DCL
F$DCB.DESC.ACTIVE#
     13171**DCL
F$DCB.DESC.ARCHIVE#
     13170**DCL
F$DCB.DESC.BAD#
     13170**DCL
F$DCB.DESC.BUF#
     13170**DCL
F$DCB.DESC.BUPM#
     13170**DCL
F$DCB.DESC.DELF#
     13169**DCL
F$DCB.DESC.FETCH#
     13171**DCL
F$DCB.DESC.NBUF#
     13170**DCL
F$DCB.DESC.NOLIST#
     13170**DCL
F$DCB.DESC.ODSTOW#
     13170**DCL
F$DCB.DESC.QS#
     13170**DCL
F$DCB.DESC.TERMINATE#
     13171**DCL
F$DCB.DESC.TPB#
     13171**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:241  
F$DCB.DEVADR
     13185**DCL
F$DCB.DEVADR.CHAN#
     13186**DCL
F$DCB.DEVADR.DVN#
     13186**DCL
F$DCB.DEVADR.IOM#
     13186**DCL
F$DCB.DISP#
     13177**DCL
F$DCB.DQH$
     13184**DCL
F$DCB.DVBYTE
     13165**DCL
F$DCB.DVBYTE.BIN#
     13165**DCL
F$DCB.DVBYTE.TOP#
     13165**DCL
F$DCB.DVBYTE.TRANS#
     13165**DCL
F$DCB.DVBYTE.VFC#
     13165**DCL
F$DCB.DVFC#
     13184**DCL
F$DCB.DVTYPE#
     13177**DCL
F$DCB.EBCDIC#
     13175**DCL
F$DCB.ENQF
     13195**DCL
F$DCB.EOMVAL#
     13166**DCL
F$DCB.EOMVAL#.VALUE#
     13167**DCL
F$DCB.EOMVAL#.VFLG#
     13166**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:242  
F$DCB.EOP
     13192**DCL
F$DCB.EVENT
     13187**DCL
F$DCB.EXIST#
     13176**DCL
F$DCB.EXPIRE#
     13179**DCL
F$DCB.FCD#
     13175**DCL
F$DCB.FCI#
     13175**DCL
F$DCB.FCN
     13201**DCL
F$DCB.FCN.CNT
     13201**DCL
F$DCB.FCN.F
     13201**DCL
F$DCB.FDCM
     13200**DCL
F$DCB.FEPIO
     13207**DCL
F$DCB.FEPIO.BPP
     13207**DCL
F$DCB.FEPIO.BUFX
     13207**DCL
F$DCB.FEPIO.EVENT
     13207**DCL
F$DCB.FEPIO.KEYX
     13207**DCL
F$DCB.FEPIO.KPP
     13207**DCL
F$DCB.FEPIO2
     13209**DCL
F$DCB.FEPIO3
     13209**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:243  
F$DCB.FEPSIZ
     13206**DCL
F$DCB.FEPSIZ.BUF
     13206**DCL
F$DCB.FEPSIZ.KEY
     13206**DCL
F$DCB.FEXT
     13192**DCL
F$DCB.FEXTX
     13179**DCL
F$DCB.FFLG
     13167**DCL
F$DCB.FFLG.AU#
     13168**DCL
F$DCB.FFLG.AURD#
     13168**DCL
F$DCB.FFLG.CREATE#
     13168**DCL
F$DCB.FFLG.DELF#
     13167**DCL
F$DCB.FFLG.DELR#
     13167**DCL
F$DCB.FFLG.EXEC#
     13168**DCL
F$DCB.FFLG.NOLIST#
     13167**DCL
F$DCB.FFLG.READ#
     13167**DCL
F$DCB.FFLG.REATTR#
     13167**DCL
F$DCB.FFLG.TCTL#
     13168**DCL
F$DCB.FFLG.UPD#
     13167**DCL
F$DCB.FFLG.WNEW#
     13167**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:244  
F$DCB.FIELDX
     13187**DCL
F$DCB.FLPW#
     13162**DCL
F$DCB.FMOD
     13192**DCL
F$DCB.FPRGX
     13187**DCL
F$DCB.FPSTR
     13202**DCL
F$DCB.FTAM
     13196**DCL
F$DCB.FTAM.CTX
     13197**DCL
F$DCB.FTAM.PMME
     13197**DCL
F$DCB.FTAM.USR
     13197**DCL
F$DCB.FUN#
     13177**DCL
F$DCB.GDISP
     13203**DCL
F$DCB.GHSTACS#
     13186**DCL
F$DCB.GRPOS
     13195**DCL
F$DCB.GTYP
     13192**DCL
F$DCB.HASH
     13200**DCL
F$DCB.IASN
     13205**DCL
F$DCB.ID
     13206**DCL
F$DCB.ID.DA
     13206**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:245  
F$DCB.ID.GX
     13206**DCL
F$DCB.IFMT
     13204**DCL
F$DCB.IGNOREFSN#
     13174**DCL
F$DCB.INDX
     13201**DCL
F$DCB.IOERROK#
     13174**DCL
F$DCB.IORG
     13199**DCL
F$DCB.IRRECX
     13191**DCL
F$DCB.IWL
     13204**DCL
F$DCB.IWL.HDRIWL
     13204**DCL
F$DCB.IWL.SEQIWL
     13204**DCL
F$DCB.IWL.TABIWL
     13204**DCL
F$DCB.JRNLBYPASS#
     13186**DCL
F$DCB.KEYL#
     13179**DCL
F$DCB.KEYTYPE#
     13188**DCL
F$DCB.KEYX#
     13179**DCL
F$DCB.KFIELDX
     13188**DCL
F$DCB.LASTKEY
     13196**DCL
F$DCB.LASTKEY$
     13196**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:246  
F$DCB.LDCTX
     13185**DCL
F$DCB.LDFLG
     13194**DCL
F$DCB.LINES#
     13184**DCL
F$DCB.LOAD#
     13174**DCL
F$DCB.LOGSEC
     13203**DCL
F$DCB.LPOOL
     13197**DCL
F$DCB.LRDL0#
     13180**DCL
F$DCB.LSLIDE#
     13180**DCL
F$DCB.LSTAOR#
     13174**DCL
F$DCB.LSTBLK
     13196**DCL
F$DCB.MAXVOL#
     13183**DCL
F$DCB.MEDIA
     13204**DCL
F$DCB.MODCNT
     13202**DCL
F$DCB.MOUNT
     13194**DCL
F$DCB.MOVED
     13205**DCL
F$DCB.MPC$
     13185**DCL
F$DCB.MUST_CVOL
     13193**DCL
F$DCB.NAME#
     13172**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:247  
F$DCB.NAME#.C17
     13172**DCL
F$DCB.NAME#.C17.CC
     13172**DCL
F$DCB.NAME#.L
     13172**DCL
F$DCB.NEW_FSECT
     13194**DCL
F$DCB.OLDIOERR
     13203**DCL
F$DCB.OWNER
     13194**DCL
F$DCB.PASS#
     13172**DCL
F$DCB.PASSF#
     13175**DCL
F$DCB.PATH
     13191**DCL
F$DCB.PATH.CHAN#
     13191**DCL
F$DCB.PATH.IOM#
     13191**DCL
F$DCB.PGINGRAN
     13203**DCL
F$DCB.PRIVOPN
     13203**DCL
F$DCB.PSN#
     13172**DCL
F$DCB.QISS#
     13174**DCL
F$DCB.RA
     13195**DCL
F$DCB.RDL0#
     13166**DCL
F$DCB.REALSPAN
     13203**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:248  
F$DCB.RECL#
     13178**DCL
F$DCB.RESNT
     13173**DCL
F$DCB.RESNT.NUM
     13173**DCL
F$DCB.RESNT.TYP
     13173**DCL
F$DCB.RETRYCNT#
     13169**DCL
F$DCB.RPOS
     13195**DCL
F$DCB.SEED#
     13192**DCL
F$DCB.SEGX
     13202**DCL
F$DCB.SEQ#
     13184**DCL
F$DCB.SEQCOL#
     13184**DCL
F$DCB.SEQID#
     13184**DCL
F$DCB.SETSTA$
     13171**DCL
F$DCB.SEZ_OK
     13193**DCL
F$DCB.SHARE#
     13176**DCL
F$DCB.SHARED
     13192**DCL
F$DCB.SLIDE#
     13166**DCL
F$DCB.SPAN
     13194**DCL
F$DCB.SPANNED#
     13176**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:249  
F$DCB.SPARE#
     13180**DCL
F$DCB.STARF
     13192**DCL
F$DCB.STARTX
     13188**DCL
F$DCB.STARX
     13195**DCL
F$DCB.STR#
     13202**DCL
F$DCB.SYSID#
     13179**DCL
F$DCB.TAPTYP
     13198**DCL
F$DCB.TAPTYP.CP6F
     13198**DCL
F$DCB.TAPTYP.HAVLASTKEY
     13198**DCL
F$DCB.TAPTYP.MANAGED
     13199**DCL
F$DCB.TAPTYP.NOCVOL
     13199**DCL
F$DCB.TAPTYP.PASTFM
     13199**DCL
F$DCB.TAPTYP.RWASC
     13198**DCL
F$DCB.TAPTYP.USRBUF
     13198**DCL
F$DCB.TDALVL
     13197**DCL
F$DCB.TDEXTST$
     13171**DCL
F$DCB.TDFLG
     13182**DCL
F$DCB.TDFLG.SDSK#
     13182**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:250  
F$DCB.TDSTAT#
     13173**DCL
F$DCB.TRNC
     13195**DCL
F$DCB.TYC
     13162**DCL
F$DCB.TYC.BLNKTP#
     13162**DCL
F$DCB.TYC.BOF#
     13162**DCL
F$DCB.TYC.BOT#
     13162**DCL
F$DCB.TYC.CDALRT#
     13164**DCL
F$DCB.TYC.CGCRCW
     13165**DCL
F$DCB.TYC.CGCWRV
     13165**DCL
F$DCB.TYC.CGFULL
     13164**DCL
F$DCB.TYC.CGKEYV
     13164**DCL
F$DCB.TYC.CGLWRV
     13164**DCL
F$DCB.TYC.DACT#
     13163**DCL
F$DCB.TYC.DI#
     13163**DCL
F$DCB.TYC.EGV#
     13162**DCL
F$DCB.TYC.EOD#
     13163**DCL
F$DCB.TYC.EOF#
     13163**DCL
F$DCB.TYC.EOT#
     13162**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:251  
F$DCB.TYC.FRAW#
     13164**DCL
F$DCB.TYC.IOERR#
     13163**DCL
F$DCB.TYC.LAST#
     13164**DCL
F$DCB.TYC.LD#
     13163**DCL
F$DCB.TYC.LDISC#
     13163**DCL
F$DCB.TYC.MTRAP#
     13163**DCL
F$DCB.TYC.OPER#
     13162**DCL
F$DCB.TYC.PROT#
     13164**DCL
F$DCB.TYC.TIMO#
     13164**DCL
F$DCB.TYC.XTRARD
     13164**DCL
F$DCB.TYPE#
     13173**DCL
F$DCB.UB$
     13201**DCL
F$DCB.UBYTES
     13201**DCL
F$DCB.UCOUT
     13198**DCL
F$DCB.UNIQUEBLD
     13205**DCL
F$DCB.UOPT#
     13175**DCL
F$DCB.UPDCNT
     13205**DCL
F$DCB.VFCCHAR#
     13187**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:252  
F$DCB.VOL#
     13183**DCL
F$DCB.VOLACCESS#
     13175**DCL
F$DCB.WAIT
     13195**DCL
F$DCB.WCDATA
     13198**DCL
F$DCB.WIDTH#
     13169**DCL
F$DCB.WRCMP
     13198**DCL
F$DCB.WSR#
     13180**DCL
F$DCB.XTEND#
     13176**DCL
F$DCB.XTNSIZE#
     13180**DCL
FREE_BUFFER.V.AUTOSEG# IN PROCEDURE FREE_SEG
     14384**DCL
FREE_BUFFER.V.COMMON# IN PROCEDURE FREE_SEG
     14384**DCL
FREE_BUFFER.V_ IN PROCEDURE FREE_SEG
     14383**DCL
GET_INFO.HEADER_ IN PROCEDURE SET_SYSTEM_TYPE
     15008**DCL
GET_INFO.MONINFO_ IN PROCEDURE SET_SYSTEM_TYPE
     15006**DCL
GET_INFO.MONPTRS_ IN PROCEDURE SET_SYSTEM_TYPE
     15007**DCL
GET_INFO.SITEINFO_ IN PROCEDURE SET_SYSTEM_TYPE
     15006**DCL
GET_INFO.STYPE_ IN PROCEDURE SET_SYSTEM_TYPE
     15008**DCL
GET_INFO.SYMBINFO_ IN PROCEDURE SET_SYSTEM_TYPE
     15007**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:253  
M$ACCT
      6178**DCL-ENT
M$ACTIVATE
      6181**DCL-ENT
M$ALIB
      6174**DCL-ENT
M$ASUSER
      6176**DCL-ENT
M$ATTACH
      6183**DCL-ENT
M$BADPP
      6201**DCL-ENT
M$CGCTL
      6182**DCL-ENT
M$CGINFO
      6182**DCL-ENT
M$CHECK
      6163**DCL-ENT
M$CHGUNIT
      6221**DCL-ENT
M$CLOSE
      6161**DCL-ENT
M$CLRSTK
      6219**DCL-ENT
M$CMDVAR
      6230**DCL-ENT
M$CONFIG
      6191**DCL-ENT
M$CORRES
      6166**DCL-ENT
M$CPEXIT
      6175**DCL-ENT
M$CVM
      6199**DCL-ENT
M$CVOL
      6164**DCL-ENT
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:254  
M$DCLFLD
      6191**DCL-ENT
M$DEACTIVATE
      6181**DCL-ENT
M$DELREC
      6163**DCL-ENT
M$DEQ
      6228**DCL-ENT
M$DETACH
      6183**DCL-ENT
M$DEVICE
      6165**DCL-ENT
M$DISPLAY
      6228**DCL-ENT
M$DISPRES
      6168**DCL-ENT
M$DLIB
      6174**DCL-ENT
M$DO
     13139**DCL
M$DRIBBLE
      6191**DCL-ENT
M$DRTN
      6219**DCL-ENT
M$DSUSER
      6176**DCL-ENT
M$ENQ
      6227**DCL-ENT
M$EOM
      6186**DCL-ENT
M$ERASE
      6192**DCL-ENT
M$ERRMSG
      6224**DCL-ENT
M$EVENT
      6216**DCL-ENT
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:255  
M$EXHUME
      6225**DCL-ENT
M$EXTEND
      6165**DCL-ENT
M$FEBOOT
      6189**DCL-ENT
M$FECTL
      6190**DCL-ENT
M$FEDUMP
      6189**DCL-ENT
M$FID
      6224**DCL-ENT
M$FINDPROC
      6178**DCL-ENT
M$FSUSER
      6176**DCL-ENT
M$FVP
      6198**DCL-ENT
M$FWCG
      6182**DCL-ENT
M$GBPL
      6202**DCL-ENT
M$GDDL
      6198**DCL-ENT
M$GDP
      6197**DCL-ENT
M$GDS
      6196**DCL-ENT
M$GETDCB
      6167**DCL-ENT
M$GETMOUSE
      6207**DCL-ENT
M$GETPM
      6208**DCL-ENT
M$GJOB
      6226**DCL-ENT
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:256  
M$GLINEATTR
      6186**DCL-ENT
M$GOODPP
      6201**DCL-ENT
M$GPLATEN
      6194**DCL-ENT
M$GPROMPT
      6193**DCL-ENT
M$GTRMATTR
      6187**DCL-ENT
M$GTRMCTL
      6185**DCL-ENT
M$GTRMTAB
      6188**DCL-ENT
M$GVP
      6197**DCL-ENT
M$HELP
      6224**DCL-ENT
M$INT
      6216**DCL-ENT
M$INTRTN
      6177**DCL-ENT
M$IOQ
      6212**DCL-ENT
M$JOBSTATS
      6226**DCL-ENT
M$LDEV
      6161**DCL-ENT
M$LDTRC
      6174**DCL-ENT
M$LIMIT
      6167**DCL-ENT
M$LINES
      6166**DCL-ENT
M$LINK
      6173**DCL-ENT
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:257  
M$MADMUCK
      6169**DCL-ENT
M$MAKUSER
      6200**DCL-ENT
M$MBS
      6168**DCL-ENT
M$MDFFLD
      6192**DCL-ENT
M$MERC
      6217**DCL-ENT
M$MERCS
      6218**DCL-ENT
M$MIRROR
      6212**DCL-ENT
M$MPL
      6202**DCL-ENT
M$NODEINFO
      6193**DCL-ENT
M$NXTUSR
      6227**DCL-ENT
M$OCMSG
      6225**DCL-ENT
M$OLAY
      6173**DCL-ENT
M$OPEN
      6161**DCL-ENT
M$PAS
      6202**DCL-ENT
M$PATHCON
      6225**DCL-ENT
M$PDS
      6196**DCL-ENT
M$PFIL
      6163**DCL-ENT
M$PLATEN
      6187**DCL-ENT
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:258  
M$PRECORD
      6165**DCL-ENT
M$PROCNAME
      6178**DCL-ENT
M$PROFILE
      6189**DCL-ENT
M$PROMPT_USER
     13066**DCL
M$PROMPT_USER.ACCT#
     13083**DCL
M$PROMPT_USER.ACS#
     13094**DCL
M$PROMPT_USER.AFTRBLK
     13117**DCL
M$PROMPT_USER.AGE
     13133**DCL
M$PROMPT_USER.ALTKEYX
     13105**DCL
M$PROMPT_USER.AMFLG
     13112**DCL
M$PROMPT_USER.AMFLG.ACCF
     13112**DCL
M$PROMPT_USER.AMFLG.ACSF
     13113**DCL
M$PROMPT_USER.AMFLG.INSF
     13113**DCL
M$PROMPT_USER.AMFLG.PROF
     13113**DCL
M$PROMPT_USER.AMFLG.SNLF
     13113**DCL
M$PROMPT_USER.AMFLG.USRF
     13113**DCL
M$PROMPT_USER.AMR#
     13088**DCL
M$PROMPT_USER.AMRSETSTA
     13086**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:259  
M$PROMPT_USER.ANSISPANSEQ#
     13109**DCL
M$PROMPT_USER.ASN#
     13091**DCL
M$PROMPT_USER.ATTR
     13096**DCL
M$PROMPT_USER.ATTR.APL#
     13097**DCL
M$PROMPT_USER.ATTR.BIN#
     13097**DCL
M$PROMPT_USER.ATTR.DENS#
     13096**DCL
M$PROMPT_USER.ATTR.GRLGL#
     13096**DCL
M$PROMPT_USER.ATTR.LOWERCASE#
     13098**DCL
M$PROMPT_USER.ATTR.NATL#
     13097**DCL
M$PROMPT_USER.ATTR.NOXLATE#
     13097**DCL
M$PROMPT_USER.ATTR.TRANSLGL#
     13097**DCL
M$PROMPT_USER.ATTR.TRUOVRPRT#
     13097**DCL
M$PROMPT_USER.ATTR.UPPERCASE#
     13097**DCL
M$PROMPT_USER.AU#
     13085**DCL
M$PROMPT_USER.AUTHFFLG
     13107**DCL
M$PROMPT_USER.AUTHFFLG.AU#
     13108**DCL
M$PROMPT_USER.AUTHFFLG.AURD#
     13109**DCL
M$PROMPT_USER.AUTHFFLG.CREATE#
     13108**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:260  
M$PROMPT_USER.AUTHFFLG.DELF#
     13108**DCL
M$PROMPT_USER.AUTHFFLG.DELR#
     13108**DCL
M$PROMPT_USER.AUTHFFLG.EXEC#
     13108**DCL
M$PROMPT_USER.AUTHFFLG.NOLIST#
     13108**DCL
M$PROMPT_USER.AUTHFFLG.READ#
     13107**DCL
M$PROMPT_USER.AUTHFFLG.REATTR#
     13108**DCL
M$PROMPT_USER.AUTHFFLG.TCTL#
     13109**DCL
M$PROMPT_USER.AUTHFFLG.UPD#
     13108**DCL
M$PROMPT_USER.AUTHFFLG.WNEW#
     13108**DCL
M$PROMPT_USER.BADARS#
     13111**DCL
M$PROMPT_USER.BFR
     13134**DCL
M$PROMPT_USER.BFR.BUFUP
     13134**DCL
M$PROMPT_USER.BFR.BUFX
     13134**DCL
M$PROMPT_USER.BFR.CHNG
     13134**DCL
M$PROMPT_USER.BFR.CVM
     13134**DCL
M$PROMPT_USER.BFR.DA
     13135**DCL
M$PROMPT_USER.BFR.SCRUB
     13134**DCL
M$PROMPT_USER.BFR1
     13135**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:261  
M$PROMPT_USER.BFR1.CX
     13136**DCL
M$PROMPT_USER.BFR1.FLAGS
     13135**DCL
M$PROMPT_USER.BFR1.FLAGS.ONE_WORD_HEADER
     13135**DCL
M$PROMPT_USER.BFR1.SIZ
     13136**DCL
M$PROMPT_USER.BLKL#
     13091**DCL
M$PROMPT_USER.BLKLEN
     13124**DCL
M$PROMPT_USER.BLOCKED#
     13090**DCL
M$PROMPT_USER.BOL#
     13093**DCL
M$PROMPT_USER.BUPF
     13073**DCL
M$PROMPT_USER.BUPM#
     13090**DCL
M$PROMPT_USER.BYTESLEFT
     13123**DCL
M$PROMPT_USER.CACHE
     13116**DCL
M$PROMPT_USER.CBUFNUM
     13122**DCL
M$PROMPT_USER.CFU$
     13119**DCL
M$PROMPT_USER.CHAIN#
     13100**DCL
M$PROMPT_USER.CHANTIME#
     13099**DCL
M$PROMPT_USER.CNVRT#
     13087**DCL
M$PROMPT_USER.CODE16$
     13105**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:262  
M$PROMPT_USER.COMP#
     13089**DCL
M$PROMPT_USER.CONNCT#
     13099**DCL
M$PROMPT_USER.CONT
     13117**DCL
M$PROMPT_USER.CRECNO
     13123**DCL
M$PROMPT_USER.CRECX
     13122**DCL
M$PROMPT_USER.CSEED
     13123**DCL
M$PROMPT_USER.CTG#
     13088**DCL
M$PROMPT_USER.CTLCMDIN
     13129**DCL
M$PROMPT_USER.CVOL#
     13089**DCL
M$PROMPT_USER.CWORD
     13131**DCL
M$PROMPT_USER.CX
     13131**DCL
M$PROMPT_USER.DBGDCBNO#
     13092**DCL
M$PROMPT_USER.DBGSYSID#
     13092**DCL
M$PROMPT_USER.DCB#
     13109**DCL
M$PROMPT_USER.DCBNAME
     13137**DCL
M$PROMPT_USER.DCBNAME.N
     13137**DCL
M$PROMPT_USER.DCBNAME.S
     13137**DCL
M$PROMPT_USER.DCBNAME.X
     13137**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:263  
M$PROMPT_USER.DCT$
     13102**DCL
M$PROMPT_USER.DDEV
     13077**DCL
M$PROMPT_USER.DDEV.CP#
     13077**DCL
M$PROMPT_USER.DDEV.GR#
     13078**DCL
M$PROMPT_USER.DDEV.IC#
     13077**DCL
M$PROMPT_USER.DDEV.LP#
     13077**DCL
M$PROMPT_USER.DDEV.UCOUT#
     13077**DCL
M$PROMPT_USER.DDEV.XEQ#
     13077**DCL
M$PROMPT_USER.DECRYPT
     13128**DCL
M$PROMPT_USER.DENSITY#
     13100**DCL
M$PROMPT_USER.DESC
     13078**DCL
M$PROMPT_USER.DESC.ACTIVE#
     13080**DCL
M$PROMPT_USER.DESC.ARCHIVE#
     13080**DCL
M$PROMPT_USER.DESC.BAD#
     13079**DCL
M$PROMPT_USER.DESC.BUF#
     13079**DCL
M$PROMPT_USER.DESC.BUPM#
     13080**DCL
M$PROMPT_USER.DESC.DELF#
     13079**DCL
M$PROMPT_USER.DESC.FETCH#
     13081**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:264  
M$PROMPT_USER.DESC.NBUF#
     13080**DCL
M$PROMPT_USER.DESC.NOLIST#
     13079**DCL
M$PROMPT_USER.DESC.ODSTOW#
     13079**DCL
M$PROMPT_USER.DESC.QS#
     13080**DCL
M$PROMPT_USER.DESC.TERMINATE#
     13081**DCL
M$PROMPT_USER.DESC.TPB#
     13081**DCL
M$PROMPT_USER.DEVADR
     13103**DCL
M$PROMPT_USER.DEVADR.CHAN#
     13103**DCL
M$PROMPT_USER.DEVADR.DVN#
     13103**DCL
M$PROMPT_USER.DEVADR.IOM#
     13103**DCL
M$PROMPT_USER.DISP#
     13091**DCL
M$PROMPT_USER.DQH$
     13102**DCL
M$PROMPT_USER.DVBYTE
     13072**DCL
M$PROMPT_USER.DVBYTE.BIN#
     13072**DCL
M$PROMPT_USER.DVBYTE.TOP#
     13072**DCL
M$PROMPT_USER.DVBYTE.TRANS#
     13072**DCL
M$PROMPT_USER.DVBYTE.VFC#
     13072**DCL
M$PROMPT_USER.DVFC#
     13101**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:265  
M$PROMPT_USER.DVTYPE#
     13091**DCL
M$PROMPT_USER.EBCDIC#
     13088**DCL
M$PROMPT_USER.ENQF
     13116**DCL
M$PROMPT_USER.EOMVAL#
     13074**DCL
M$PROMPT_USER.EOMVAL#.VALUE#
     13074**DCL
M$PROMPT_USER.EOMVAL#.VFLG#
     13074**DCL
M$PROMPT_USER.EOP
     13112**DCL
M$PROMPT_USER.EVENT
     13106**DCL
M$PROMPT_USER.EXIST#
     13089**DCL
M$PROMPT_USER.EXPIRE#
     13093**DCL
M$PROMPT_USER.FCD#
     13088**DCL
M$PROMPT_USER.FCI#
     13088**DCL
M$PROMPT_USER.FCN
     13124**DCL
M$PROMPT_USER.FCN.CNT
     13124**DCL
M$PROMPT_USER.FCN.F
     13124**DCL
M$PROMPT_USER.FDCM
     13124**DCL
M$PROMPT_USER.FEPIO
     13132**DCL
M$PROMPT_USER.FEPIO.BPP
     13133**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:266  
M$PROMPT_USER.FEPIO.BUFX
     13133**DCL
M$PROMPT_USER.FEPIO.EVENT
     13132**DCL
M$PROMPT_USER.FEPIO.KEYX
     13132**DCL
M$PROMPT_USER.FEPIO.KPP
     13133**DCL
M$PROMPT_USER.FEPIO2
     13136**DCL
M$PROMPT_USER.FEPIO3
     13136**DCL
M$PROMPT_USER.FEPSIZ
     13131**DCL
M$PROMPT_USER.FEPSIZ.BUF
     13131**DCL
M$PROMPT_USER.FEPSIZ.KEY
     13131**DCL
M$PROMPT_USER.FEXT
     13111**DCL
M$PROMPT_USER.FEXTX
     13093**DCL
M$PROMPT_USER.FFLG
     13074**DCL
M$PROMPT_USER.FFLG.AU#
     13076**DCL
M$PROMPT_USER.FFLG.AURD#
     13076**DCL
M$PROMPT_USER.FFLG.CREATE#
     13076**DCL
M$PROMPT_USER.FFLG.DELF#
     13075**DCL
M$PROMPT_USER.FFLG.DELR#
     13074**DCL
M$PROMPT_USER.FFLG.EXEC#
     13076**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:267  
M$PROMPT_USER.FFLG.NOLIST#
     13075**DCL
M$PROMPT_USER.FFLG.READ#
     13074**DCL
M$PROMPT_USER.FFLG.REATTR#
     13075**DCL
M$PROMPT_USER.FFLG.TCTL#
     13076**DCL
M$PROMPT_USER.FFLG.UPD#
     13075**DCL
M$PROMPT_USER.FFLG.WNEW#
     13075**DCL
M$PROMPT_USER.FIELDX
     13105**DCL
M$PROMPT_USER.FLPW#
     13066**DCL
M$PROMPT_USER.FMOD
     13112**DCL
M$PROMPT_USER.FPRGX
     13105**DCL
M$PROMPT_USER.FPSTR
     13125**DCL
M$PROMPT_USER.FTAM
     13118**DCL
M$PROMPT_USER.FTAM.CTX
     13118**DCL
M$PROMPT_USER.FTAM.PMME
     13119**DCL
M$PROMPT_USER.FTAM.USR
     13118**DCL
M$PROMPT_USER.FUN#
     13091**DCL
M$PROMPT_USER.GDISP
     13127**DCL
M$PROMPT_USER.GHSTACS#
     13104**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:268  
M$PROMPT_USER.GRPOS
     13116**DCL
M$PROMPT_USER.GTYP
     13112**DCL
M$PROMPT_USER.HASH
     13123**DCL
M$PROMPT_USER.IASN
     13130**DCL
M$PROMPT_USER.ID
     13132**DCL
M$PROMPT_USER.ID.DA
     13132**DCL
M$PROMPT_USER.ID.GX
     13132**DCL
M$PROMPT_USER.IFMT
     13128**DCL
M$PROMPT_USER.IGNOREFSN#
     13085**DCL
M$PROMPT_USER.INDX
     13125**DCL
M$PROMPT_USER.IOERROK#
     13086**DCL
M$PROMPT_USER.IORG
     13122**DCL
M$PROMPT_USER.IRRECX
     13110**DCL
M$PROMPT_USER.IWL
     13129**DCL
M$PROMPT_USER.IWL.HDRIWL
     13129**DCL
M$PROMPT_USER.IWL.SEQIWL
     13129**DCL
M$PROMPT_USER.IWL.TABIWL
     13129**DCL
M$PROMPT_USER.JRNLBYPASS#
     13104**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:269  
M$PROMPT_USER.KEYL#
     13094**DCL
M$PROMPT_USER.KEYTYPE#
     13106**DCL
M$PROMPT_USER.KEYX#
     13094**DCL
M$PROMPT_USER.KFIELDX
     13106**DCL
M$PROMPT_USER.LASTKEY
     13118**DCL
M$PROMPT_USER.LASTKEY$
     13118**DCL
M$PROMPT_USER.LDCTX
     13103**DCL
M$PROMPT_USER.LDFLG
     13115**DCL
M$PROMPT_USER.LINES#
     13100**DCL
M$PROMPT_USER.LOAD#
     13085**DCL
M$PROMPT_USER.LOGSEC
     13127**DCL
M$PROMPT_USER.LPOOL
     13119**DCL
M$PROMPT_USER.LRDL0#
     13095**DCL
M$PROMPT_USER.LSLIDE#
     13095**DCL
M$PROMPT_USER.LSTAOR#
     13086**DCL
M$PROMPT_USER.LSTBLK
     13117**DCL
M$PROMPT_USER.MAXVOL#
     13099**DCL
M$PROMPT_USER.MEDIA
     13128**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:270  
M$PROMPT_USER.MODCNT
     13126**DCL
M$PROMPT_USER.MOUNT
     13114**DCL
M$PROMPT_USER.MOVED
     13130**DCL
M$PROMPT_USER.MPC$
     13102**DCL
M$PROMPT_USER.MUST_CVOL
     13114**DCL
M$PROMPT_USER.NAME#
     13082**DCL
M$PROMPT_USER.NAME#.C17
     13083**DCL
M$PROMPT_USER.NAME#.C17.CC
     13083**DCL
M$PROMPT_USER.NAME#.L
     13082**DCL
M$PROMPT_USER.NEW_FSECT
     13114**DCL
M$PROMPT_USER.OLDIOERR
     13127**DCL
M$PROMPT_USER.OWNER
     13115**DCL
M$PROMPT_USER.PASS#
     13083**DCL
M$PROMPT_USER.PASSF#
     13087**DCL
M$PROMPT_USER.PATH
     13110**DCL
M$PROMPT_USER.PATH.CHAN#
     13110**DCL
M$PROMPT_USER.PATH.IOM#
     13110**DCL
M$PROMPT_USER.PGINGRAN
     13128**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:271  
M$PROMPT_USER.PRIVOPN
     13127**DCL
M$PROMPT_USER.PSN#
     13083**DCL
M$PROMPT_USER.QISS#
     13085**DCL
M$PROMPT_USER.RA
     13115**DCL
M$PROMPT_USER.RDL0#
     13073**DCL
M$PROMPT_USER.REALSPAN
     13128**DCL
M$PROMPT_USER.RECL#
     13092**DCL
M$PROMPT_USER.RESNT
     13084**DCL
M$PROMPT_USER.RESNT.NUM
     13084**DCL
M$PROMPT_USER.RESNT.TYP
     13084**DCL
M$PROMPT_USER.RETRYCNT#
     13078**DCL
M$PROMPT_USER.RPOS
     13116**DCL
M$PROMPT_USER.SEED#
     13111**DCL
M$PROMPT_USER.SEGX
     13126**DCL
M$PROMPT_USER.SEQ#
     13101**DCL
M$PROMPT_USER.SEQCOL#
     13101**DCL
M$PROMPT_USER.SEQID#
     13101**DCL
M$PROMPT_USER.SETSTA$
     13081**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:272  
M$PROMPT_USER.SEZ_OK
     13114**DCL
M$PROMPT_USER.SHARE#
     13089**DCL
M$PROMPT_USER.SHARED
     13112**DCL
M$PROMPT_USER.SLIDE#
     13073**DCL
M$PROMPT_USER.SPAN
     13115**DCL
M$PROMPT_USER.SPANNED#
     13090**DCL
M$PROMPT_USER.SPARE#
     13095**DCL
M$PROMPT_USER.STARF
     13111**DCL
M$PROMPT_USER.STARTX
     13107**DCL
M$PROMPT_USER.STARX
     13116**DCL
M$PROMPT_USER.STR#
     13126**DCL
M$PROMPT_USER.SYSID#
     13093**DCL
M$PROMPT_USER.TAPTYP
     13120**DCL
M$PROMPT_USER.TAPTYP.CP6F
     13120**DCL
M$PROMPT_USER.TAPTYP.HAVLASTKEY
     13121**DCL
M$PROMPT_USER.TAPTYP.MANAGED
     13121**DCL
M$PROMPT_USER.TAPTYP.NOCVOL
     13121**DCL
M$PROMPT_USER.TAPTYP.PASTFM
     13121**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:273  
M$PROMPT_USER.TAPTYP.RWASC
     13120**DCL
M$PROMPT_USER.TAPTYP.USRBUF
     13121**DCL
M$PROMPT_USER.TDALVL
     13119**DCL
M$PROMPT_USER.TDEXTST$
     13082**DCL
M$PROMPT_USER.TDFLG
     13098**DCL
M$PROMPT_USER.TDFLG.SDSK#
     13098**DCL
M$PROMPT_USER.TDSTAT#
     13085**DCL
M$PROMPT_USER.TRNC
     13117**DCL
M$PROMPT_USER.TYC
     13066**DCL
M$PROMPT_USER.TYC.BLNKTP#
     13067**DCL
M$PROMPT_USER.TYC.BOF#
     13067**DCL
M$PROMPT_USER.TYC.BOT#
     13067**DCL
M$PROMPT_USER.TYC.CDALRT#
     13070**DCL
M$PROMPT_USER.TYC.CGCRCW
     13071**DCL
M$PROMPT_USER.TYC.CGCWRV
     13071**DCL
M$PROMPT_USER.TYC.CGFULL
     13071**DCL
M$PROMPT_USER.TYC.CGKEYV
     13070**DCL
M$PROMPT_USER.TYC.CGLWRV
     13070**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:274  
M$PROMPT_USER.TYC.DACT#
     13069**DCL
M$PROMPT_USER.TYC.DI#
     13068**DCL
M$PROMPT_USER.TYC.EGV#
     13066**DCL
M$PROMPT_USER.TYC.EOD#
     13068**DCL
M$PROMPT_USER.TYC.EOF#
     13067**DCL
M$PROMPT_USER.TYC.EOT#
     13067**DCL
M$PROMPT_USER.TYC.FRAW#
     13069**DCL
M$PROMPT_USER.TYC.IOERR#
     13068**DCL
M$PROMPT_USER.TYC.LAST#
     13070**DCL
M$PROMPT_USER.TYC.LD#
     13068**DCL
M$PROMPT_USER.TYC.LDISC#
     13069**DCL
M$PROMPT_USER.TYC.MTRAP#
     13068**DCL
M$PROMPT_USER.TYC.OPER#
     13066**DCL
M$PROMPT_USER.TYC.PROT#
     13069**DCL
M$PROMPT_USER.TYC.TIMO#
     13069**DCL
M$PROMPT_USER.TYC.XTRARD
     13070**DCL
M$PROMPT_USER.TYPE#
     13084**DCL
M$PROMPT_USER.UB$
     13125**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:275  
M$PROMPT_USER.UBYTES
     13125**DCL
M$PROMPT_USER.UCOUT
     13120**DCL
M$PROMPT_USER.UNIQUEBLD
     13130**DCL
M$PROMPT_USER.UOPT#
     13087**DCL
M$PROMPT_USER.UPDCNT
     13130**DCL
M$PROMPT_USER.VFCCHAR#
     13106**DCL
M$PROMPT_USER.VOL#
     13099**DCL
M$PROMPT_USER.VOLACCESS#
     13086**DCL
M$PROMPT_USER.WAIT
     13117**DCL
M$PROMPT_USER.WCDATA
     13120**DCL
M$PROMPT_USER.WIDTH#
     13078**DCL
M$PROMPT_USER.WRCMP
     13120**DCL
M$PROMPT_USER.WSR#
     13095**DCL
M$PROMPT_USER.XTEND#
     13089**DCL
M$PROMPT_USER.XTNSIZE#
     13094**DCL
M$RACST
      6169**DCL-ENT
M$RDSYSLOG
      6210**DCL-ENT
M$RELDCB
      6167**DCL-ENT
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:276  
M$RELRES
      6168**DCL-ENT
M$RELSTARF
      6170**DCL-ENT
M$REM
      6170**DCL-ENT
M$RENV
      6217**DCL-ENT
M$REQUIRE
      6169**DCL-ENT
M$RETRY
      6218**DCL-ENT
M$RETRYS
      6218**DCL-ENT
M$REW
      6164**DCL-ENT
M$RLSFLD
      6192**DCL-ENT
M$RPRIV
      6220**DCL-ENT
M$RSPP
      6199**DCL-ENT
M$RSWITCH
      6221**DCL-ENT
M$RUE
      6227**DCL-ENT
M$SAD
      6200**DCL-ENT
M$SAVE
      6176**DCL-ENT
M$SCON
      6177**DCL-ENT
M$SCREECH
      6175**DCL-ENT
M$SENV
      6217**DCL-ENT
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:277  
M$SETFMA
      6161**DCL-ENT
M$SETFP
      6190**DCL-ENT
M$SI
     13060**DCL
M$SINPUT
      6188**DCL-ENT
M$SLCFLD
      6193**DCL-ENT
M$SMOUSE
      6207**DCL-ENT
M$SMPRT
      6199**DCL-ENT
M$SPRIV
      6220**DCL-ENT
M$SSC
      6200**DCL-ENT
M$SSWITCH
      6220**DCL-ENT
M$STATE
      6229**DCL-ENT
M$STD
      6201**DCL-ENT
M$STIMER
      6215**DCL-ENT
M$STLPP
      6198**DCL-ENT
M$STRAP
      6215**DCL-ENT
M$STRMATTR
      6187**DCL-ENT
M$STRMCTL
      6185**DCL-ENT
M$STRMTAB
      6188**DCL-ENT
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:278  
M$SYMBIO
      6226**DCL-ENT
M$SYSCON
      6212**DCL-ENT
M$SYSID
      6230**DCL-ENT
M$TDCLOSE
      6211**DCL-ENT
M$TDIO
      6211**DCL-ENT
M$TDOPEN
      6210**DCL-ENT
M$TDREQCPU
      6211**DCL-ENT
M$TEMPWROC
      6205**DCL-ENT
M$TRAP
      6215**DCL-ENT
M$TRMISC
      6190**DCL-ENT
M$TRMPRG
      6186**DCL-ENT
M$TRTN
      6219**DCL-ENT
M$TRUNC
      6162**DCL-ENT
M$TTIMER
      6215**DCL-ENT
M$UC
      6185**DCL
M$UMPL
      6202**DCL-ENT
M$UNFID
      6224**DCL-ENT
M$UNLATCH
      6181**DCL-ENT
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:279  
M$UNSHARE
      6178**DCL-ENT
M$USRFIELD
      6221**DCL-ENT
M$VIRTUAL
      6196**DCL-ENT
M$WAIT
      6219**DCL-ENT
M$WEOF
      6164**DCL-ENT
M$WRSYSLOG
      6210**DCL-ENT
M$XCON
      6216**DCL-ENT
M$XCONRTN
      6177**DCL-ENT
M$XEQTIME
      6229**DCL-ENT
M$XFLUSH
      6170**DCL-ENT
M$XMOUSE
      6207**DCL-ENT
M$XXX
      6173**DCL-ENT
M$YC
      6175**DCL-ENT
OUT$BLK IN PROCEDURE SETUP_BUFFER
     15318**DCL
OUT$BLK.CODE IN PROCEDURE SETUP_BUFFER
     15326**DCL
OUT$BLK.CPOS IN PROCEDURE SETUP_BUFFER
     15344**DCL
OUT$BLK.NDTYPE IN PROCEDURE SETUP_BUFFER
     15321**DCL
OUT$BLK.NSUBLKS IN PROCEDURE SETUP_BUFFER
     15330**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:280  
OUT$BLK.SCRITCH IN PROCEDURE SETUP_BUFFER
     15334**DCL
OUT$BLK.TEMP IN PROCEDURE SETUP_BUFFER
     15319**DCL
OUT$BLK IN PROCEDURE SET_DEBUG_FLAGS
     14752**DCL
OUT$BLK.CPOS IN PROCEDURE SET_DEBUG_FLAGS
     14778**DCL
OUT$BLK.NDTYPE IN PROCEDURE SET_DEBUG_FLAGS
     14755**DCL
OUT$BLK.SCRITCH IN PROCEDURE SET_DEBUG_FLAGS
     14768**DCL
OUT$BLK.TEMP IN PROCEDURE SET_DEBUG_FLAGS
     14753**DCL
OUT$SYM IN PROCEDURE SETUP_BUFFER
     15364**DCL
OUT$SYM.CODE IN PROCEDURE SETUP_BUFFER
     15370**DCL
OUT$SYM.CPOS IN PROCEDURE SETUP_BUFFER
     15379**DCL
OUT$SYM.NDTYPE IN PROCEDURE SETUP_BUFFER
     15367**DCL
OUT$SYM.NSUBLKS IN PROCEDURE SETUP_BUFFER
     15373**DCL
OUT$SYM.SCRITCH IN PROCEDURE SETUP_BUFFER
     15376**DCL
OUT$SYM.TEMP IN PROCEDURE SETUP_BUFFER
     15365**DCL
OUT$SYM.TEXTC$ IN PROCEDURE SETUP_BUFFER
     15382**DCL
QUEUE_ENTRY_BCD.TEST_REQ_
     13219**DCL
READ_IO.BUF_
     13335**DCL
READ_IO.BUF_.BOUND
     13335**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:281  
READ_IO.BUF_.BUF$
     13336**DCL
READ_IO.IDBUF_
     13337**DCL
READ_IO.KEY_
     13333**DCL
READ_IO.KEY_.BOUND
     13333**DCL
READ_IO.KEY_.KEY$
     13334**DCL
READ_IO.V.DCB#
     13337**DCL
READ_IO.V.DVBYTE
     13347**DCL
READ_IO.V.DVBYTE.BIN#
     13348**DCL
READ_IO.V.DVBYTE.BP#
     13347**DCL
READ_IO.V.DVBYTE.CONT#
     13350**DCL
READ_IO.V.DVBYTE.NODAT#
     13349**DCL
READ_IO.V.DVBYTE.TOP#
     13347**DCL
READ_IO.V.DVBYTE.TRANS#
     13349**DCL
READ_IO.V.DVBYTE.VFC#
     13348**DCL
READ_IO.V.EVENT#
     13346**DCL
READ_IO.V.FULL#
     13339**DCL
READ_IO.V.ID#
     13338**DCL
READ_IO.V.IDS#
     13339**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:282  
READ_IO.V.IOERROK#
     13340**DCL
READ_IO.V.KEYCHNG#
     13339**DCL
READ_IO.V.KEYR#
     13338**DCL
READ_IO.V.KEYS#
     13338**DCL
READ_IO.V.KEYTYPE#
     13346**DCL
READ_IO.V.ODFNC#
     13351**DCL
READ_IO.V.RECNUM#
     13351**DCL
READ_IO.V.REREADPOS#
     13352**DCL
READ_IO.V.SEED#
     13347**DCL
READ_IO.V.SINPUTSIZE#
     13351**DCL
READ_IO.V.STRPVFC#
     13350**DCL
READ_IO.V.WAIT#
     13337**DCL
READ_IO.V_
     13333**DCL
REL_TOLTS_PGS.RESULTS_ IN PROCEDURE FREE_DYNAMIC_PAGES
     14281**DCL
REL_TOLTS_PGS.V_ IN PROCEDURE FREE_DYNAMIC_PAGES
     14281**DCL
SEND_MSG.MESS_.BOUND IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15443**DCL
SEND_MSG.MESS_.BUF$ IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15444**DCL
SEND_MSG.REPLY_.BOUND IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15444**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:283  
SEND_MSG.REPLY_.BUF$ IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15445**DCL
SEND_MSG.V.DCB# IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15448**DCL
SEND_MSG.V.EVENT# IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15446**DCL
SEND_MSG.V.OCTYPE# IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15447**DCL
SEND_MSG.V.WAIT# IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15447**DCL
SEND_MSG.V.WHO# IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15448**DCL
SEND_MSG.V.WSN# IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15446**DCL
SEND_MSG.V_ IN PROCEDURE ISSUE_OPERATOR_MESSAGE
     15443**DCL
SET_SUBEXEC_PROMPT.PROMPT_ IN PROCEDURE SET_SUBEXEC_PROMPT
     15618**DCL
SET_SUBEXEC_PROMPT.STATION_ IN PROCEDURE SET_SUBEXEC_PROMPT
     15616**DCL
SET_SUBEXEC_PROMPT.V.DCB# IN PROCEDURE SET_SUBEXEC_PROMPT
     15620**DCL
SET_SUBEXEC_PROMPT.V.DVBYTE# IN PROCEDURE SET_SUBEXEC_PROMPT
     15620**DCL
SET_SUBEXEC_PROMPT.V.DVBYTE#.BIN# IN PROCEDURE SET_SUBEXEC_PROMPT
     15621**DCL
SET_SUBEXEC_PROMPT.V.DVBYTE#.TRANS# IN PROCEDURE SET_SUBEXEC_PROMPT
     15621**DCL
SET_SUBEXEC_PROMPT.V.DVBYTE#.VFC# IN PROCEDURE SET_SUBEXEC_PROMPT
     15621**DCL
SET_SUBEXEC_PROMPT.V_ IN PROCEDURE SET_SUBEXEC_PROMPT
     15614**DCL
SET_TOLTS_PROMPT IN PROCEDURE GET_TOLTS_REQUEST
     14643**PROC
SET_TOLTS_PROMPT.PROMPT_ IN PROCEDURE SET_TOLTS_PROMPT
     14670**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:284  
SET_TOLTS_PROMPT.STATION_ IN PROCEDURE SET_TOLTS_PROMPT
     14668**DCL
SET_TOLTS_PROMPT.V.DCB# IN PROCEDURE SET_TOLTS_PROMPT
     14672**DCL
SET_TOLTS_PROMPT.V.DVBYTE# IN PROCEDURE SET_TOLTS_PROMPT
     14672**DCL
SET_TOLTS_PROMPT.V.DVBYTE#.BIN# IN PROCEDURE SET_TOLTS_PROMPT
     14673**DCL
SET_TOLTS_PROMPT.V.DVBYTE#.TRANS# IN PROCEDURE SET_TOLTS_PROMPT
     14673**DCL
SET_TOLTS_PROMPT.V.DVBYTE#.VFC# IN PROCEDURE SET_TOLTS_PROMPT
     14673**DCL
SET_TOLTS_PROMPT.V_ IN PROCEDURE SET_TOLTS_PROMPT
     14666**DCL
SIMULATE_PROMPT.BUF_.BOUND IN PROCEDURE PROMPT_OUT
     15556**DCL
SIMULATE_PROMPT.BUF_.BUF$ IN PROCEDURE PROMPT_OUT
     15558**DCL
SIMULATE_PROMPT.IDBUF_ IN PROCEDURE PROMPT_OUT
     15558**DCL
SIMULATE_PROMPT.KEY_ IN PROCEDURE PROMPT_OUT
     15556**DCL
SIMULATE_PROMPT.V.DCB# IN PROCEDURE PROMPT_OUT
     15559**DCL
SIMULATE_PROMPT.V.DVBYTE IN PROCEDURE PROMPT_OUT
     15564**DCL
SIMULATE_PROMPT.V.DVBYTE.BIN# IN PROCEDURE PROMPT_OUT
     15565**DCL
SIMULATE_PROMPT.V.DVBYTE.BP# IN PROCEDURE PROMPT_OUT
     15565**DCL
SIMULATE_PROMPT.V.DVBYTE.CONT# IN PROCEDURE PROMPT_OUT
     15567**DCL
SIMULATE_PROMPT.V.DVBYTE.NODAT# IN PROCEDURE PROMPT_OUT
     15566**DCL
SIMULATE_PROMPT.V.DVBYTE.REREAD# IN PROCEDURE PROMPT_OUT
     15565**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:285  
SIMULATE_PROMPT.V.DVBYTE.RRR# IN PROCEDURE PROMPT_OUT
     15566**DCL
SIMULATE_PROMPT.V.DVBYTE.TOP# IN PROCEDURE PROMPT_OUT
     15564**DCL
SIMULATE_PROMPT.V.DVBYTE.TRANS# IN PROCEDURE PROMPT_OUT
     15566**DCL
SIMULATE_PROMPT.V.EVENT# IN PROCEDURE PROMPT_OUT
     15564**DCL
SIMULATE_PROMPT.V.FULL# IN PROCEDURE PROMPT_OUT
     15561**DCL
SIMULATE_PROMPT.V.ID# IN PROCEDURE PROMPT_OUT
     15560**DCL
SIMULATE_PROMPT.V.IOERROK# IN PROCEDURE PROMPT_OUT
     15563**DCL
SIMULATE_PROMPT.V.KEYTYPE# IN PROCEDURE PROMPT_OUT
     15563**DCL
SIMULATE_PROMPT.V.NEWKEY# IN PROCEDURE PROMPT_OUT
     15562**DCL
SIMULATE_PROMPT.V.NOTIME# IN PROCEDURE PROMPT_OUT
     15562**DCL
SIMULATE_PROMPT.V.ODFNC# IN PROCEDURE PROMPT_OUT
     15568**DCL
SIMULATE_PROMPT.V.ONEWKEY# IN PROCEDURE PROMPT_OUT
     15561**DCL
SIMULATE_PROMPT.V.REWRITE# IN PROCEDURE PROMPT_OUT
     15562**DCL
SIMULATE_PROMPT.V.SEED# IN PROCEDURE PROMPT_OUT
     15564**DCL
SIMULATE_PROMPT.V.WAIT# IN PROCEDURE PROMPT_OUT
     15559**DCL
SIMULATE_PROMPT.V_ IN PROCEDURE PROMPT_OUT
     15556**DCL
STOP_TOLTS.DATE_ IN PROCEDURE PROCESS_EXIT_REQ
     15711**DCL
STOP_TOLTS.DATE_.BOUND IN PROCEDURE PROCESS_EXIT_REQ
     15711**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:286  
STOP_TOLTS.DATE_.DATE$ IN PROCEDURE PROCESS_EXIT_REQ
     15712**DCL
STOP_TOLTS.DAY_ IN PROCEDURE PROCESS_EXIT_REQ
     15714**DCL
STOP_TOLTS.TIME_ IN PROCEDURE PROCESS_EXIT_REQ
     15713**DCL
STOP_TOLTS.TIME_.BOUND IN PROCEDURE PROCESS_EXIT_REQ
     15713**DCL
STOP_TOLTS.TIME_.TIME$ IN PROCEDURE PROCESS_EXIT_REQ
     15714**DCL
STOP_TOLTS.TSTAMP_ IN PROCEDURE PROCESS_EXIT_REQ
     15714**DCL
STOP_TOLTS.V.DEST# IN PROCEDURE PROCESS_EXIT_REQ
     15715**DCL
STOP_TOLTS.V.DEST_BASIS# IN PROCEDURE PROCESS_EXIT_REQ
     15716**DCL
STOP_TOLTS.V.SOURCE# IN PROCEDURE PROCESS_EXIT_REQ
     15715**DCL
STOP_TOLTS.V.SOURCE_BASIS# IN PROCEDURE PROCESS_EXIT_REQ
     15716**DCL
STOP_TOLTS.V_ IN PROCEDURE PROCESS_EXIT_REQ
     15711**DCL
SYSTEM_INFO.ANSPROT# IN PROCEDURE SET_SYSTEM_TYPE
     15023**DCL
SYSTEM_INFO.MINI_ID# IN PROCEDURE SET_SYSTEM_TYPE
     15021**DCL
SYSTEM_INFO.MON_UTS# IN PROCEDURE SET_SYSTEM_TYPE
     15024**DCL
SYSTEM_INFO.PATCHWEEK# IN PROCEDURE SET_SYSTEM_TYPE
     15026**DCL
SYSTEM_INFO.SALUTATION# IN PROCEDURE SET_SYSTEM_TYPE
     15022**DCL
SYSTEM_INFO.SALUTATION#.C IN PROCEDURE SET_SYSTEM_TYPE
     15023**DCL
SYSTEM_INFO.SALUTATION#.L IN PROCEDURE SET_SYSTEM_TYPE
     15023**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:287  
SYSTEM_INFO.SITE_ID# IN PROCEDURE SET_SYSTEM_TYPE
     15025**DCL
SYSTEM_INFO.SITE_NAME# IN PROCEDURE SET_SYSTEM_TYPE
     15021**DCL
SYSTEM_INFO.SITE_NAME#.C IN PROCEDURE SET_SYSTEM_TYPE
     15022**DCL
SYSTEM_INFO.SITE_NAME#.L IN PROCEDURE SET_SYSTEM_TYPE
     15022**DCL
SYSTEM_INFO.TIMEZONE# IN PROCEDURE SET_SYSTEM_TYPE
     15026**DCL
SYSTEM_INFO.UTC_OFFSET# IN PROCEDURE SET_SYSTEM_TYPE
     15027**DCL
SYSTEM_INFO.VERSION# IN PROCEDURE SET_SYSTEM_TYPE
     15024**DCL
TEST_REQ_BCD.TEST_ZEROS
     13223**DCL
TOD$QUEUE.CURR_SERVICE
     13377**DCL
TOD$QUEUE.E
     13365**DCL
TOD$QUEUE.E.QENTRY
     13368**DCL
TOD$QUEUE.E.SERV_CODE
     13366**DCL
TOD$QUEUE.ENTRIES
     13379**DCL
TOD$QUEUE.NEXT_SLOT
     13375**DCL
TOF$BAR
     13391**DCL
TOF$BAR.CURRENT.BASE
     13393**DCL
TOF$BAR.CURRENT.SIZE
     13395**DCL
TOF$BAR.GELBAR_MODE
     13402**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:288  
TOLTS_GETCMD.ALWAYS_SET_PROMPT#
     13710**DCL
TOLTS_GETCMD.BUF$
     13899**DCL
TOLTS_GETCMD.CONTINUED#
     13682**DCL
TOLTS_GETCMD.CONTINUE_OK#
     13686**DCL
TOLTS_GETCMD.DCB2_PARAM#
     13807**DCL
TOLTS_GETCMD.DISP#
     13813**DCL
TOLTS_GETCMD.ECHO
     13742**DCL
TOLTS_GETCMD.EOMCHAR#
     13762**DCL
TOLTS_GETCMD.EPOS#
     13732**DCL
TOLTS_GETCMD.ERR#.FCG#
     13634**DCL
TOLTS_GETCMD.ERR#.MON#
     13635**DCL
TOLTS_GETCMD.ERR#.SEV#
     13637**DCL
TOLTS_GETCMD.ERRDCB#
     13781**DCL
TOLTS_GETCMD.ERRMFID$
     13641**DCL
TOLTS_GETCMD.ERRMSG_VFC#
     13737**DCL
TOLTS_GETCMD.ERR_CODE.CODE#
     13773**DCL
TOLTS_GETCMD.ERR_CODE.FCG#
     13771**DCL
TOLTS_GETCMD.ERR_CODE.MON#
     13772**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:289  
TOLTS_GETCMD.ERR_CODE.SEV#
     13774**DCL
TOLTS_GETCMD.F1_
     13819**DCL
TOLTS_GETCMD.F2_
     13823**DCL
TOLTS_GETCMD.F3_
     13827**DCL
TOLTS_GETCMD.FPT$
     13919**DCL
TOLTS_GETCMD.INDCB#
     13793**DCL
TOLTS_GETCMD.INFOMSG#
     13718**DCL
TOLTS_GETCMD.NLINES
     13938**DCL
TOLTS_GETCMD.NODES$
     13623**DCL
TOLTS_GETCMD.OUTDCB#
     13798**DCL
TOLTS_GETCMD.PASS
     13752**DCL
TOLTS_GETCMD.PCB$
     13647**DCL
TOLTS_GETCMD.PP_FUN$$
     13840**DCL
TOLTS_GETCMD.PP_ROOT$
     13927**DCL
TOLTS_GETCMD.RCVD_PROMPT#
     13692**DCL
TOLTS_GETCMD.READR$$
     13845**DCL
TOLTS_GETCMD.RFU10#
     13943**DCL
TOLTS_GETCMD.RFU11#
     13944**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:290  
TOLTS_GETCMD.RFU12#
     13945**DCL
TOLTS_GETCMD.RFU2$
     13898**DCL
TOLTS_GETCMD.RFU9#
     13942**DCL
TOLTS_GETCMD.RFUBIT2
     13761**DCL
TOLTS_GETCMD.RFUBYTE
     13769**DCL
TOLTS_GETCMD.RLT$
     13904**DCL
TOLTS_GETCMD.RPROMPT_
     13835**DCL
TOLTS_GETCMD.SFROUTINE$
     13872**DCL
TOLTS_GETCMD.SKIP_PREPROCESS#
     13703**DCL
TOLTS_GETCMD.SYNERR_NODES$
     13911**DCL
TOLTS_GETCMD.TEXT_
     13885**DCL
TOLTS_GETCMD.TREAD#
     13671**DCL
TOLTS_GETCMD.USE_EPOS#
     13665**DCL
TOLTS_GETCMD.UTIL$
     13923**DCL
TOLTS_GETCMD.WORK$
     13655**DCL
TOLTS_GETCMD.XT_PARAM$
     13891**DCL
TOLTS_GETCMD.XUH$
     13660**DCL
TOM$SEGTBL.ACTIVE
     13422**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:291  
TOM$SEGTBL.ENTRY#
     13424**DCL
TOM$SEGTBL.V.PTR$
     13420**DCL
TOO$IO_BUFFER.BUF_AVAILIABLE_FLAG
     13449**DCL
TOO$IO_BUFFER.CHAR_COUNT
     13480**DCL
TOO$IO_BUFFER.EXEC_NUM
     13461**DCL
TOO$IO_BUFFER.IO_ENTRY
     13463**DCL
TOO$IO_BUFFER.IO_REQ_BITS
     13465**DCL
TOO$IO_BUFFER.IO_REQ_BITS.C
     13474**DCL
TOO$IO_BUFFER.IO_REQ_BITS.E
     13466**DCL
TOO$IO_BUFFER.IO_REQ_BITS.M
     13470**DCL
TOO$IO_BUFFER.IO_REQ_BITS.P
     13476**DCL
TOO$IO_BUFFER.IO_REQ_BITS.R
     13468**DCL
TOO$IO_BUFFER.IO_REQ_BITS.S
     13472**DCL
TOO$IO_BUFFER.IO_REQ_SERVICED_FLAG
     13451**DCL
TOO$IO_BUFFER.LID
     13459**DCL
TOO$IO_BUFFER.PAD_CHAR
     13457**DCL
TOO$IO_BUFFER.READ_DATA
     13484**DCL
TOO$IO_BUFFER.READ_FLAG
     13453**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:292  
TOO$IO_BUFFER.TDPCN
     13455**DCL
TOO$IO_BUFFER.WRITE_DATA
     13482**DCL
TOO$IO_BUFFER.WRITE_WD_CNT_BCD
     13478**DCL
TOP$TCP.ADR
     13520**DCL
TOP$TCP.ADR.CSCT
     13523**DCL
TOP$TCP.ADR.IOENTRY
     13527**DCL
TOP$TCP.ADR.PAT
     13525**DCL
TOP$TCP.ADR.SCT
     13521**DCL
TOP$TCP.BFR
     13569**DCL
TOP$TCP.BFR.TRAIN_IMAGE
     13570**DCL
TOP$TCP.BFR.VFC_IMAGE
     13572**DCL
TOP$TCP.DCB#
     13518**DCL
TOP$TCP.DEVICE_CODE
     13516**DCL
TOP$TCP.DEVICE_MODEL
     13515**DCL
TOP$TCP.FICCDD.CHAN#
     13503**DCL
TOP$TCP.FICCDD.DEV#
     13504**DCL
TOP$TCP.FICCDD.FLAG#
     13500**DCL
TOP$TCP.FICCDD.FORMAT#
     13501**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:293  
TOP$TCP.FICCDD.IOM#
     13502**DCL
TOP$TCP.FIRMWARE
     13551**DCL
TOP$TCP.FIRMWARE.CHOICE_MADE
     13552**DCL
TOP$TCP.FIRMWARE.LP_TYPE
     13556**DCL
TOP$TCP.FIRMWARE.RP_TYPE
     13558**DCL
TOP$TCP.FIRMWARE.TYPE
     13554**DCL
TOP$TCP.ICC
     13508**DCL
TOP$TCP.ICC.ICC#
     13510**DCL
TOP$TCP.ICCDD
     13505**DCL
TOP$TCP.ICCDD.ICCDD#
     13507**DCL
TOP$TCP.IN_USE
     13497**DCL
TOP$TCP.IO
     13529**DCL
TOP$TCP.IO.CC_PAID
     13540**DCL
TOP$TCP.IO.CONTROLLER
     13534**DCL
TOP$TCP.IO.DONE
     13538**DCL
TOP$TCP.IO.ISSUED
     13536**DCL
TOP$TCP.IO.ITR_INTERRUPT
     13530**DCL
TOP$TCP.IO.TERMINATED
     13532**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:294  
TOP$TCP.MPC_MODEL
     13514**DCL
TOP$TCP.SCT
     13542**DCL
TOP$TCP.SCT.BIT12
     13547**DCL
TOP$TCP.SCT.BIT13
     13545**DCL
TOP$TCP.SCT.BIT17
     13543**DCL
TOP$TCP.SCT.TAPE_DENSITY
     13549**DCL
TOP$TCP.STATS
     13560**DCL
TOP$TCP.STATS.EDIT_NAME
     13565**DCL
TOP$TCP.STATS.GECALL_NAME
     13567**DCL
TOP$TCP.STATS.LOAD_ADDR
     13561**DCL
TOP$TCP.STATS.MAX_LOAD
     13563**DCL
TOP$TCP.TEST_TYPE
     13512**DCL
TOQ$DCP.BR
     13602**DCL
TOQ$DCP.BR.ADDRESS
     13603**DCL
TOQ$DCP.BR.IC
     13604**DCL
TOQ$DCP.MME
     13605**DCL
TOQ$DCP.PF
     13585**DCL
TOQ$DCP.PF.GELBARRED
     13587**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:295  
TOQ$DCP.PF.REASON
     13593**DCL
TOQ$DCP.SE
     13594**DCL
TOQ$DCP.SE.ADDRESS
     13597**DCL
TOQ$DCP.SE.CATALOG
     13596**DCL
TOQ$DCP.SE.EDIT_NAME
     13595**DCL
TOQ$DCP.TP
     13598**DCL
TOQ$DCP.TP.ADDRESS
     13601**DCL
TOQ$DCP.TP.EDIT_NAME
     13600**DCL
TOQ$DCP.TP.GECALL_NAME
     13599**DCL
TOT$CONSOLE_IN
     14205**ENTRY
TOT$CONSOLE_OUT
     14144**ENTRY
TOT$DMC
     13959**DCL
TOT$DMC.TOM$ITRTBL
     13970**DCL
TOT$DMC.TOM$ITRTBL.PTR$
     13973**DCL
TOT$DMC.TOO$IO_BUFFER
     13960**DCL
TOT$DMC.TOP$TCP
     13965**DCL
TOT$ECP.BREAK_ALLOWED
     14023**DCL
TOT$ECP.BREAK_RECEIVED
     14025**DCL
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:296  
TOT$ECP.IO
     13994**DCL
TOT$ECP.IO.COUNT
     13997**DCL
TOT$ECP.ISC
     13999**DCL
TOT$ECP.ISC.GERELC_WAIT
     14004**DCL
TOT$ECP.ISC.READ_OUT
     14000**DCL
TOT$ECP.ISC.WRITE_OUT
     14002**DCL
TOT$ECP.SUBEXEC
     14010**DCL
TOT$ECP.SUBEXEC.ADDRESS
     14013**DCL
TOT$ECP.SUBEXEC.EDIT_NAME
     14015**DCL
TOT$ECP.SUBEXEC.TEST_PAGE_COUNT
     14021**DCL
TOT$ECP.SUBEXEC.WRAPUP$
     14019**DCL
TOT$ECP.SUBEXEC.WRAPUP_TRIED
     14017**DCL
TOT$EXIT
     14250**ENTRY
TOT$IFAD
     14039**DCL
TOT$IFAD.DEER
     14045**DCL
TOT$IFAD.MAINTENANCE
     14041**DCL
TOT$IFAD.VERSION
     14040**DCL
TOT$NEXT_TEST_REQ
     14222**ENTRY
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:297  
TOT$PROMPT_OUT
     14165**ENTRY
TOT$ROOT
        67**PROC
TOT$TOLTS
     14057**DCL
TOT$TOLTS.DECKFILE
     14065**DCL
TOT$TOLTS.DECKFILE.FID
     14067**DCL
TOT$TOLTS.DECKFILE.LGTH
     14066**DCL
TOT$TOLTS.LINK_DATE
     14058**DCL
TOT$TOLTS.LINK_DATE.BCD
     14060**DCL
TOT$TOLTS.LINK_TIME
     14061**DCL
TOT$TOLTS.LINK_VERSION
     14062**DCL
TOT$WRITE_READ_IO
     14190**ENTRY
TOT_ERROR_CODE.FCG
     13257**DCL
TOT_ERROR_CODE.MID
     13270**DCL
TOT_ERROR_CODE.MON
     13270**DCL
TOT_ERROR_CODE.SEV
     13271**DCL
XUG$ALLMSG
      9753**DCL-ENT
XUG$BLANK_PASSWORD
      9756**DCL-ENT
XUG$BREAK
      9746**DCL-ENT
PL6.E3A0      #001=TOT$ROOT File=TOT$ROOT.:E05TSI                                WED 07/30/97 06:37 Page:298  
XUG$CLRENABLE
      9749**DCL-ENT
XUG$CORRES
      9741**DCL-ENT
XUG$DISABLE
      9747**DCL-ENT
XUG$ECHO
      9739**DCL-ENT
XUG$ECHOIF
      9738**DCL-ENT
XUG$ECHOLAST
      9742**DCL-ENT
XUG$ENABLE
      9748**DCL-ENT
XUG$ERRCNVRT
      9758**DCL-ENT
XUG$ERRPTR
      9737**DCL-ENT
XUG$ERRTOLCP6
      9759**DCL-ENT
XUG$FINDDCB
      9754**DCL-ENT
XUG$GETDCB
      9755**DCL-ENT
XUG$HELP
      9751**DCL-ENT
XUG$INIT
      9740**DCL-ENT
XUG$MOREMSG
      9752**DCL-ENT
XUG$OPENOUT
      9757**DCL-ENT
XUG$SETERRMSG
      9744**DCL-ENT
XUG$SIMULATE_BREAK
      9750**DCL-ENT
