VERSION E05

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:1    
        1        1        /*M* KVM$SND  VDH Message send routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* NSO,PLM=3,SQB=Y,AND=Y,ENI=0,SDI=3,MCL=10,CSI=0,ECI=0,IAD=3,IND=0 */
        8        8        /*P*
        9        9            NAME: KVM$SND
       10       10            PURPOSE:
       11       11                  To put VDH messages into the monitor circular queue (CQ).
       12       12            REFERENCE:
       13       13                  "Handler Monitor Interface User's Guide"   AF 0784 A-0
       14       14        */
       15       15        /*D*
       16       16            NAME: KVM$SND
       17       17            CALL: CALL KVM$SND(KV$SND_x)
       18       18                  Altreturns if no message was sent, perhaps because an
       19       19                  invalid request was made.
       20       20                  If can't find space at all to put
       21       21                  the message, it will screech.
       22       22            PARAMETERS:
       23       23                  Any one of the KV$SND_x structures.
       24       24            INTERFACE:
       25       25                  It calls KVS$GETBFR and KVS$RLSBFR to get and release
       26       26                  buffer for CQ extensions.
       27       27            DESCRIPTION:
       28       28                  Looks at input and determines which message to build.
       29       29                  Each internal message-building routine calls KVM$FNDSPACE
       30       30                  to get CQ space.  On return, it puts the appropriate
       31       31                  message (usually a KV$VDO) in the space pointed to by
       32       32                  the insert pointer (IPTR) of the CQ.
       33       33                  If there is no space in the monitor CQ, KVM$FNDSPACE
       34       34                  will try to get VDH buffer to make a CQ extension. If
       35       35                  that also fails, we will screech thru KVS$GETBFR.
       36       36                  Blocking of data messages going to the same destination
       37       37                  is done to save overhead.
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:2    
       38       38        */
       39       39        KVM$SND: PROC(KV$SND_X) ALTRET;
       40       40        /*
       41       41        INCLUDE files, constants, based structures,
       42       42        and static data contained elsewhere.
       43       43        */
       44       44
       45       45        %INCLUDE LCP_6;
       46      236        %INCLUDE F_ERRORS_C;
       47      476        %INCLUDE K_CP6_M;
       48      672        %INCLUDE KL_AFCN_C;
       49      773        %INCLUDE KL_MACRO_C;
       50     4125
       51     4126        %INCLUDE K_ID_E;
       52     4176        %K#LYRID_E;
       53     4183        %K#ENTID_E;
       54     4202
       55     4203
       56     4204    1   DCL KH_INHLVL UBIN SYMREF;
       57     4205        %INCLUDE KV_INT_M;
       58     4348 S      %INCLUDE KV_GLBCNS_E;
       59     4349        %KV#CQ_HNDID_E;
       60     4354        %KV_USR_EVT_ID_E;
       61     4374        %KV_VDH_EVT_ID_E;
       62     4380        %KV_VDH_FNC_E;
       63     4400        %KV_STRTYP_E;
       64     4438        %KV_MRKTYP_E;
       65     4446        %KV_BFRRLSDSP_E;
       66     4452        %KV#TRCENT_TYP_E;
       67     4462
       68     4463 S      %INCLUDE KV$GLB;
       69     4464 S      %INCLUDE KV$GLBCTX;
       70     4465        %KV$PTR;
       71     4508        %KV$SSN (STCLASS="BASED(Y@SSN$)");
       72     4587        %EQU KV_SSN=CHARTEXT('KV$SSN');
       73     4588        %KV$STT (STCLASS="BASED(Y@STT$)");
       74     4982        %EQU KV_STT=CHARTEXT('KV$STT');
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:3    
       75     4983        %KV$USRPRM;
       76     5034        %KV$VDI (STCLASS="BASED(PUT$)");
       77     5105        %EQU KV_VDI = CHARTEXT('KV$SSN.VDI$->KV$VDI');
       78     5106        %KV$STR;
       79     5193 S      %INCLUDE KV$INT;
       80     5194 S      %INCLUDE KV$VDH;
       81     5195        %KV$VDH_OTPMRK(STCLASS="BASED(KV$SND_MRK.VDH_MRK$)");
       82     5257
       83     5258 S      %INCLUDE KV$SND;
       84     5259        %KV_SND_FNC_E;
       85     5275
       86     5276 S      %INCLUDE KV$VDO;
       87     5277        %KV_VDO_ALL;
       88     7420
       89     7421        /*
       90     7422        static copies of KV$SND structure
       91     7423        */
       92     7424        %KV$SND_CLSSSN (NAME = KV_SND_CLSSSN, STCLASS = CONSTANT SYMDEF);
       93     7480        %KV$SND_CMPDSCSSN (NAME = KV_SND_CMPDSCSSN, STCLASS = CONSTANT SYMDEF);
       94     7535        %KV$SND_CNC (NAME = KV_SND_CNC, STCLASS = CONSTANT SYMDEF);
       95     7623        %KV$SND_DAT (NAME = KV_SND_DAT, STCLASS = CONSTANT SYMDEF);
       96     7742        %KV$SND_DSCSSN (NAME = KV_SND_DSCSSN, STCLASS = CONSTANT SYMDEF);
       97     7797        %KV$SND_EVT (NAME = KV_SND_EVT_BRK, STCLASS = CONSTANT SYMDEF,
       98     7798         EVTTYP = KV_EVTTYP_BRK, RQSMRK_DLTRCVRQS = YES);
       99     7889        %KV$SND_EVT (NAME = KV_SND_EVT_MNTATN, STCLASS = CONSTANT SYMDEF,
      100     7890         EVTTYP = KV_EVTTYP_MNTATN, RQSMRK_DLTRCVRQS = YES);
      101     7981        %KV$SND_MRK (NAME = KV_SND_MRK, STCLASS = CONSTANT SYMDEF);
      102     8037        %KV$SND_OPNSSN (NAME = KV_SND_OPNSSN, STCLASS = CONSTANT SYMDEF);
      103     8092        %KV$SND_PRM (NAME = KV_SND_PRM, STCLASS = CONSTANT SYMDEF);
      104     8177        %KV$SND_RQSDAT_GNR (NAME = KV_SND_RQSDAT_GNR, STCLASS = CONSTANT SYMDEF);
      105     8232        %KV$SND_RQSMRK (NAME=KV_SND_RQSMRK_DLTRCVRQS, RQSMRK_DLTRCVRQS=YES,
      106     8233         STCLASS=CONSTANT SYMDEF);
      107     8289        %KV$SND_RQSMRK (NAME=KV_SND_RQSMRK_DLTRCVDAT, RQSMRK_DLTRCVDAT=YES,
      108     8290         STCLASS=CONSTANT SYMDEF);
      109     8346        %KV$SND_RQSSTT (NAME = KV_SND_RQSSTT, STCLASS = CONSTANT SYMDEF);
      110     8401        %KV$SND_STT (NAME = KV_SND_STT, STCLASS = CONSTANT SYMDEF);
      111     8456        %KV$SND_SCHLCLSSN (NAME = KV_SND_SCHLCLSSN, STCLASS = CONSTANT SYMDEF);
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:4    
      112     8511        /*
      113     8512        dummy parameter is declared variable size so that
      114     8513        actual KV$SND_ structures can be redef'ed after it
      115     8514        */
      116     8515    1   DCL KV$SND_X CHAR(KV$COPY);
      117     8516    1   DCL KV$COPY REDEF KV$SND_X UBIN;
      118     8517        %KV$SND(STCLASS=REDEF KV$SND_X);
      119     8550        %KV$SND_RQSDAT_GNR(STCLASS=REDEF KV$SND_X);
      120     8605        %KV$SND_CNC(STCLASS=REDEF KV$SND_X);
      121     8693        %KV$SND_DAT(STCLASS=REDEF KV$SND_X);
      122     8812        %KV$SND_CMPDSCSSN(STCLASS=REDEF KV$SND_X);
      123     8867        %KV$SND_CLSSSN(STCLASS=REDEF KV$SND_X);
      124     8923        %KV$SND_EVT(STCLASS=REDEF KV$SND_X);
      125     9014        %KV$SND_OPNSSN(STCLASS=REDEF KV$SND_X);
      126     9069        %KV$SND_RQSSTT(STCLASS=REDEF KV$SND_X);
      127     9124        %KV$SND_DSCSSN(STCLASS=REDEF KV$SND_X);
      128     9179        %KV$SND_MRK(STCLASS=REDEF KV$SND_X);
      129     9235        %KV$SND_PRM(STCLASS=REDEF KV$SND_X);
      130     9320        %KV$SND_STT(STCLASS=REDEF KV$SND_X);
      131     9375        %KV$SND_RQSMRK(STCLASS=REDEF KV$SND_X);
      132     9431
      133     9432        %KV$SNDCQ(STCLASS=REDEF KV$SND_X);      /* used by X.25                       */
      134     9614
      135     9615
      136     9616        %INCLUDE KNH_MACRO_C;
      137     9899        %KNH$MESS(FPTN=KNH_MESS,
      138     9900         FUNCTION=%KN_FCN_DATA,
      139     9901         STCLASS=CONSTANT);
      140     9950        %KNH$MESS(FPTN=KNH$MESS,
      141     9951         STCLASS="BASED");
      142    10000        %FPT_CONNECT(STCLASS=CONSTANT,
      143    10001         TYPE=SESSION);
      144    10070        %FPT_CONNECT(FPTN=FPT$CONNECT,STCLASS="BASED");
      145    10139        %FPT_CONNECT_ACK(STCLASS=CONSTANT,
      146    10140         REASON=0);
      147    10189        %FPT_CONNECT_ACK(FPTN=FPT$CONNECT_ACK,STCLASS="BASED");
      148    10238        %FPT_TERM_ACK(STCLASS="CONSTANT");
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:5    
      149    10260        %FPT_TERM_ACK(FPTN=FPT$TERM_ACK,STCLASS="BASED");
      150    10282
      151    10283    1   DCL G$HAND_Q$ PTR SYMREF READONLY;
      152    10284        %INCLUDE KV_GLB;
      153    10307        %KV_CQ;                       /* Circular queue static items declarations.    */
      154    10323        %KNH$QHDR (STCLASS="BASED(KV_SNDCQ_QHDR$)");
      155    10336
      156    10337    1   DCL KVM_SND_BADFNC UBIN STATIC SYMDEF INIT(0); /* count of bad FPTs rcv'd     */
      157    10338        /*
      158    10339        Since .IPTR is a double word offset, I need to keep track of
      159    10340        whether there was a slack word at the end of the last message.
      160    10341        This slack word is to be used up when concatenating messages.
      161    10342        */
      162    10343    1   DCL KVM_SND_SCQ_SLKWRD UBIN STATIC INIT(0);
      163    10344    1   DCL KVM_SND_PRV$ PTR STATIC INIT(ADDR(KVM_SND_PRV$));
      164    10345
      165    10346
      166    10347        %KV$VDH_GETBFR(NAME=KV_VDH_GETBFR,STCLASS=SYMREF READONLY);
      167    10412        %KV$VDH_RLSBFR(NAME=KV_VDH_RLSBFR,STCLASS=SYMREF READONLY);
      168    10448
      169    10449        %INCLUDE KV_SCODE_C;
      170    10470        %VLP_SCODE (FPTN=KVM_BADLDCT,STCLASS=CONSTANT,FCG=KV,MID=M,ERR#=%S$KV_BADLDCT);
      171    10531
      172    10532    1   DCL KHD$SCREECH ENTRY(1);
      173    10533    1   DCL KHI$DISABLE ENTRY(1);
      174    10534    1   DCL KHI$ENABLE ENTRY;
      175    10535    1   DCL KVS$GETBFR ENTRY(1) ALTRET;
      176    10536    1   DCL KVS$RLSBFR ENTRY(1) ALTRET;
      177    10537
      178    10538        %KV$VDO_RQSDAT(NAME=KV_VDO_RQSDAT_GNR,STCLASS=CONSTANT);
      179    10586        %KV$VDO_DAT(NAME=KV_VDO_DAT,STCLASS=CONSTANT,FNC=KV_VDO_FNC_DAT);
      180    10631        %KV$VDO_CLSSSN(NAME=KV_VDO_CLSSSN_RQS,STCLASS=CONSTANT,
      181    10632         FNC=KV_VDO_FNC_CLSSSN_RQS);
      182    10674        %KV$VDO_CLSSSN(NAME=KV_VDO_CLSSSN_RSP,STCLASS=CONSTANT,
      183    10675         FNC=KV_VDO_FNC_CLSSSN_RSP);
      184    10717        %KV$VDO_DSC(NAME=KV_VDO_DSC,STCLASS=CONSTANT, VLP=YES,
      185    10718         FNC=KV_VDO_FNC_DSC_RQS);
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:6    
      186    10760        %KV$VDO_EVT(NAME=KV_VDO_EVT,STCLASS=CONSTANT);
      187    10802        %KV$VDO_MRK(NAME=KV_VDO_MRK,STCLASS=CONSTANT);
      188    10843        %KV$VDO_OPNSSN(NAME=KV_VDO_OPNSSN_RQS,STCLASS=CONSTANT,
      189    10844         FNC=KV_VDO_FNC_OPNSSN_RQS);
      190    10886        %KV$VDO_OPNSSN(NAME=KV_VDO_OPNSSN_RSP,STCLASS=CONSTANT,
      191    10887         FNC=KV_VDO_FNC_OPNSSN_RSP);
      192    10929        %KV$VDO_RQSSTT(NAME=KV_VDO_RQSSTT,STCLASS=CONSTANT);
      193    10970        %KV$VDO_RQSMRK(NAME=KV_VDO_RQSMRK,STCLASS=CONSTANT);
      194    11011        %KV$VDO_PRM(NAME=KV_VDO_PRM_RSP,VLP=YES,STCLASS=CONSTANT,
      195    11012         FNC=KV_VDO_FNC_PRM_RSP);
      196    11053        %KV$VDO_PRM(NAME=KV_VDO_PRM_SET,STCLASS=CONSTANT,
      197    11054         FNC=KV_VDO_FNC_PRM_SET);
      198    11095        %KV$VDOVLP_CG_MSGID(NAME=KV_VDOVLP_CG_MSGID);
      199    11147        %KV$VDOVLP_CG_MSGTYP(NAME=KV_VDOVLP_CG_MSGTYP);
      200    11199        %KV$VDOVLP_CG_STA(NAME=KV_VDOVLP_CG_STA);
      201    11250        %KV$VDOVLP_ERR(NAME=KV_VDOVLP_ERR);
      202    11347        %KV$VDOVLP_FLDID(NAME=KV_VDOVLP_FLDID);
      203    11398        %KV$VDOVLP_KEY(NAME=KV_VDOVLP_KEY,LAST=",");
      204    11448    1      2 DAT CHAR(KV_VDOVLP_KEY.BYTSIZ) CALIGNED;
      205    11449        %KV$VDOVLP_MRK(NAME=KV_VDOVLP_MRK);
      206    11502
      207    11503        /*
      208    11504        constant versions of VDOVLPs for initialization
      209    11505        */
      210    11506
      211    11507        %KV$VDOVLP_MRK(NAME=KV_VDOVLP_MRK_MRK,STCLASS=CONSTANT,
      212    11508         MRKTYP=%KV_VDOMRKTYP_MRK,RSP=YES);
      213    11561        %KV$VDOVLP_MRK(NAME=KV_VDOVLP_MRK_LSTRCRID,STCLASS=CONSTANT,
      214    11562         MRKTYP=%KV_VDOMRKTYP_LSTRCRID,RSP=YES);
      215    11615        %KV$VDOVLP_MRK(NAME=KV_VDOVLP_MRK_ENDACK,STCLASS=CONSTANT,
      216    11616         MRKTYP=%KV_VDOMRKTYP_ENDACK,RSP=YES);
      217    11669
      218    11670        %KV$VDOVLP_ACTPOS(NAME=KV_VDOVLP_ACTPOS,STCLASS=CONSTANT);
      219    11721        %KV$VDOVLP_DAT1(NAME=KV_VDOVLP_DAT1,STCLASS=CONSTANT);
      220    11771        %KV$VDOVLP_DAT2(NAME=KV_VDOVLP_DAT2,STCLASS=CONSTANT);
      221    11821
      222    11822
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:7    
      223    11823    1   DCL PUT$ PTR;
      224    11824    1   DCL Y@SSN$ PTR;
      225    11825    1   DCL Y@KNH$ PTR;
      226    11826    1   DCL Y@STT$ PTR;
      227    11827    1   DCL SZ UBIN;
      228    11828    1   DCL MSGWRDSIZ UBIN;
      229    11829    1   DCL INHLVL UBIN;
      230    11830    1   DCL KONCAT BIT(1);
      231    11831    1   DCL NOT_X25 BIT(1);           /* Flag to indicate if we were called by X.25   */
      232    11832
      233    11833        /* used for VLP's */
      234    11834
      235    11835    1   DCL LOOP_CNT UBIN;
      236    11836    1   DCL VLP_WRDSIZ UBIN;
      237    11837    1   DCL LST_VLP SBIN;
      238    11838    1   DCL SLACK_BYT UBIN;
      239    11839    1   DCL VDOVLP_BYTLNG_ARY(0:6) UBIN CONSTANT INIT(
      240    11840    1    LENGTHC(KV$VDOVLP_CG_MSGID),
      241    11841    1    LENGTHC(KV$VDOVLP_CG_MSGTYP),
      242    11842    1    LENGTHC(KV$VDOVLP_CG_STA),
      243    11843    1    LENGTHC(KV$VDOVLP_ERR),
      244    11844    1    LENGTHC(KV$VDOVLP_FLDID),
      245    11845    1    LENGTHC(KV$VDOVLP_KEY),
      246    11846    1    LENGTHC(KV$VDOVLP_MRK));
      247    11847
      248    11848        /* used for connect message only */
      249    11849
      250    11850    1   DCL LGN_STRING CHAR(TXTBYTSIZ) BASED CALIGNED;
      251    11851
      252    11852        /* used for data messages (KV$VDO_DAT & KV$VDO_PRM_...) only */
      253    11853
      254    11854    1   DCL TXTBYTSIZ UBIN;
      255    11855    1   DCL DATTXT CHAR(TXTBYTSIZ) BASED ALIGNED;
      256    11856    1   DCL DMYTXT CHAR(TXTBYTSIZ) ALIGNED BASED;
      257    11857
      258    11858        /*
      259    11859           A constant array of bits to indicate whether any VDO's
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:8    
      260    11860           are to be generated by this call. The array is indexed
      261    11861           by the KV_SND_FNC_? function code, and so must be aligned
      262    11862           with the equates in KV$SND.
      263    11863        */
      264    11864    1   DCL Y_VDO_YES(0:15) CONSTANT BIT(1) INIT('0'B,'1'B,'0'B*2,'1'B*10,'0'B*2);
      265    11865    1   DCL Y@VDO$ PTR;
      266    11866        %KV$VDH_GETBFR(NAME=KV@VDH_GETBFR,STCLASS=AUTO);
      267    11931        %KV$VDH_RLSBFR(NAME=KV@VDH_RLSBFR,STCLASS=AUTO);
      268    11967
      269    11968
      270    11969        /*
      271    11970        Auto copy of a VDH trace entry.
      272    11971        */
      273    11972        %KV$TRCENT (NAME = Y@TRCENT, STCLASS = AUTO);
      274    12001        /*
      275    12002        Pointer to KV$TRCBFR.
      276    12003        */
      277    12004    1   DCL Y@TRCBFR$ PTR AUTO;
      278    12005        /*
      279    12006        Initialized copies of KV$TRCENT.
      280    12007        */
      281    12008        %KV$TRCENT (NAME = Y_TRCENT_SNDSSN, STCLASS = CONSTANT, TYP = %KV#TRCENT_TYP_SNDSSN)
             12008            ;
      282    12037        %KV$TRCENT (NAME = Y_TRCENT_SNDVDO, STCLASS = CONSTANT, TYP = %KV#TRCENT_TYP_SNDVDO)
             12037            ;
      283    12066        /*
      284    12067        KV$TRCBFR (VDH trace buffer) declaration.
      285    12068        */
      286    12069        %KV$TRCBFR (NAME = Y$TRCBFR, STCLASS = "BASED(Y@TRCBFR$)");
      287    12127        %EQU MESS=CHARTEXT('Y@KNH$->KNH$MESS');
      288    12128        %EQU VDO_RQSDAT_GNR=CHARTEXT('PUT$->KV$VDO_RQSDAT');
      289    12129        %EQU VDO_DAT = CHARTEXT('PUT$->KV$VDO_DAT');
      290    12130        %EQU VDO_CLSSSN = CHARTEXT('PUT$->KV$VDO_CLSSSN');
      291    12131        %EQU VDO_DSC = CHARTEXT('PUT$->KV$VDO_DSC');
      292    12132        %EQU VDO_OPNSSN = CHARTEXT('PUT$->KV$VDO_OPNSSN');
      293    12133        %EQU VDO_RQSSTT = CHARTEXT('PUT$->KV$VDO_RQSSTT');
      294    12134        %EQU VDO_RQSMRK = CHARTEXT('PUT$->KV$VDO_RQSMRK');
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:9    
      295    12135        %EQU VDO_EVT = CHARTEXT('PUT$->KV$VDO_EVT');
      296    12136        %EQU VDO_MRK = CHARTEXT('PUT$->KV$VDO_MRK');
      297    12137        %EQU VDO_PRM = CHARTEXT('PUT$->KV$VDO_PRM');
      298    12138        %EQU VDOVLP_DAT1 = CHARTEXT('PUT$->KV$VDOVLP_DAT1');
      299    12139        %EQU VDOVLP_DAT2 = CHARTEXT('PUT$->KV$VDOVLP_DAT2');
      300    12140        %EQU VDOVLP_ACTPOS = CHARTEXT('PUT$->KV$VDOVLP_ACTPOS');
      301    12141        %EQU VDOVLP_CG_MSGID = CHARTEXT('PUT$->KV_VDOVLP_CG_MSGID');
      302    12142        %EQU VDOVLP_CG_MSGTYP = CHARTEXT('PUT$->KV_VDOVLP_CG_MSGTYP');
      303    12143        %EQU VDOVLP_CG_STA = CHARTEXT('PUT$->KV_VDOVLP_CG_STA');
      304    12144        %EQU VDOVLP_ERR = CHARTEXT('PUT$->KV_VDOVLP_ERR');
      305    12145        %EQU VDOVLP_FLDID = CHARTEXT('PUT$->KV_VDOVLP_FLDID');
      306    12146        %EQU VDOVLP_KEY = CHARTEXT('PUT$->KV_VDOVLP_KEY');
      307    12147        %EQU VDOVLP_MRK = CHARTEXT('PUT$->KV_VDOVLP_MRK');
      308    12148        %EQU NOP_MESS = CHARTEXT('NOP_MSG$->KNH$MESS');
      309    12149        %EQU FPT_CNC=CHARTEXT('PUT$->FPT$CONNECT');
      310    12150        %EQU FPT_CNC_ACK=CHARTEXT('PUT$->FPT$CONNECT_ACK');
      311    12151        %EQU FPT_TRMACK = CHARTEXT('PUT$->FPT$TERM_ACK');
      312    12152
      313    12153        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:10   
      314    12154
      315    12155
      316    12156        /*
      317    12157           This is normal entry (not X.25).
      318    12158        */
      319    12159    1      NOT_X25 = '1'B;
      320    12160    1      Y@SSN$ = KV$PTR.SSN$;
      321    12161    1      Y@STT$ = %KV_USRPRM.STT$;
      322    12162    1      Y@VDO$ = ADDR(NIL);
      323    12163
      324    12164        /* Check for conflicts concerning sending markers                             */
      325    12165    2      IF (KV$SND.FNC = %KV_SND_FNC_MRK) THEN DO;
      326    12166    2         IF KV$SND_MRK.VDH_MRK$=ADDR(NIL) AND KV$SND.VDOVLP.MRK$=ADDR(NIL)
      327    12167    2           OR KV$SND_MRK.VDH_MRK$~=ADDR(NIL) AND KV$SND.VDOVLP.MRK$~=ADDR(NIL)
      328    12168    2           OR KV$SND.RQSMRK THEN ALTRETURN;
      329    12169    2      END;
      330    12170    2      ELSE DO;
      331    12171    2         IF KV$SND.RQSMRK AND KV$SND.VDOVLP.MRK$~=ADDR(NIL)
      332    12172    2         THEN ALTRETURN;
      333    12173    2      END;
      334    12174        /* Are we going to append this message to the previous one,
      335    12175           because they are going to the same destination ? */
      336    12176
      337    12177    1      KONCAT = '0'B;
      338    12178    1      SZ = 0;
      339    12179        /*N*  the host does not handle this yet!
      340    12180                IF KNH$QHDR.SCQ.IPTR ~= KNH$QHDR.SCQ.RPTR THEN DO;
      341    12181                   IF %KV_SSN.SSNCNCID = KVM_SND_PRV$->KNH$MESS.LDCTX AND
      342    12182                     KVM_SND_PRV$->KNH$MESS.FUNCTION = %KN_FCN_DATA THEN
      343    12183                      KONCAT = '1'B;
      344    12184                   END;
      345    12185        */
      346    12186
      347    12187        /* Calculate size of VLP's */
      348    12188
      349    12189    1      VLP_WRDSIZ = 0;
      350    12190    1      SLACK_BYT = 0;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:11   
      351    12191
      352    12192        /* if any of the RQSMRK bits are set, we will send a marker VLP */
      353    12193
      354    12194    1      IF KV$SND.FNC=%KV_SND_FNC_MRK AND KV$SND.VDOVLP.MRK$=ADDR(NIL)
      355    12195    2        OR KV$SND.RQSMRK AND %KV_SSN.MRKRQSENB THEN DO;
      356    12196    2         VLP_WRDSIZ = SIZEW(KV$VDOVLP_MRK);
      357    12197    2         SLACK_BYT = LENGTHC(KV$VDOVLP_MRK);
      358    12198    2      END;
      359    12199
      360    12200    1      LST_VLP = -1;
      361    12201    2      DO LOOP_CNT = 0 TO 6 ;
      362    12202    3         IF KV$SND.VDOVLP_ARY(LOOP_CNT) ~= ADDR(NIL) THEN DO;
      363    12203    3            IF LOOP_CNT = 5 THEN
      364    12204        /* Nomencalture notwithstanding, KEY is the only variable length one. */
      365    12205    3            SLACK_BYT = LENGTHC(KV$SND.VDOVLP.KEY$->KV_VDOVLP_KEY);
      366    12206    3            ELSE SLACK_BYT = VDOVLP_BYTLNG_ARY(LOOP_CNT);
      367    12207    3            VLP_WRDSIZ = VLP_WRDSIZ + (SLACK_BYT+1)/2;
      368    12208    3            LST_VLP = LOOP_CNT;
      369    12209    3         END;
      370    12210    2      END;                                 /* DO LOOP_CNT                        */
      371    12211    1      SLACK_BYT = MOD(SLACK_BYT,2);
      372    12212
      373    12213    1      INHLVL = KH_INHLVL;
      374    12214
      375    12215        /* Do case to branch to appropriate routine  */
      376    12216
      377    12217    2      DO CASE (KV$SND.FNC);
      378    12218    2      CASE(%KV_SND_FNC_CNC);
      379    12219    2         KONCAT = '0'B;
      380    12220    2         CALL KVM$SND_CNC;
      381    12221    2      CASE(%KV_SND_FNC_RQSDAT_GNR);
      382    12222        /* see if we actually want to build a RQSDAT message */
      383    12223    2         IF NOT %KV_SSN.NO_WATREDTRG
      384    12224    2         THEN IF %KV_VDI.RQSOTP OR %KV_SSN.OTPBLK OR %KV_VDI.SSNCNT=1
      385    12225    2         THEN IF NOT %KV_VDI.RQSOTP OR
      386    12226    2           NOT %KV_SSN.OTPBLK
      387    12227    2           AND %KV_SSN.RCVFLWCTRCRDINC<%KV_VDI.RCVFLWCTRMINCRDINC
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:12   
      388    12228    3         THEN DO;
      389    12229    3            ALTRETURN;
      390    12230    3         END;
      391    12231    2         CALL KVM$SND_RQSDAT_GNR;
      392    12232    2      CASE(%KV_SND_FNC_DAT);
      393    12233    2         CALL KVM$SND_DAT;
      394    12234    2         CALL Y$RLSBFR (KV$SND_DAT.DAT__);
      395    12235    2      CASE(%KV_SND_FNC_CLSSSN);
      396    12236    2         CALL KVM$SND_CLSSSN;
      397    12237    2      CASE(%KV_SND_FNC_DSCSSN);
      398    12238    2         CALL KVM$SND_DSCSSN;
      399    12239    2      CASE(%KV_SND_FNC_CMPDSCSSN);
      400    12240    2         KONCAT = '0'B;
      401    12241    2         CALL KVM$SND_CMPDSCSSN;
      402    12242    2      CASE(%KV_SND_FNC_EVT);
      403    12243    2         IF KV$SND_EVT.EVTTYP~=%KV_EVTTYP_BRK AND
      404    12244    2           KV$SND_EVT.EVTTYP~=%KV_EVTTYP_MNTATN
      405    12245    2         THEN ALTRETURN;
      406    12246    2         IF %KV_SSN.BRKCNT<4 AND KV$SND_EVT.EVTTYP=%KV_EVTTYP_BRK
      407    12247    2         THEN %KV_SSN.BRKCNT = %KV_SSN.BRKCNT+1;
      408    12248    3         IF KV$SND_EVT.RQSMRK.DLTRCVRQS AND %KV_SSN.WATINPDLTMRK THEN DO;
      409    12249    3            %KV_SSN.MRKRQSENB = '0'B;
      410    12250    3            RETURN;
      411    12251    3         END;
      412    12252        /* Don't allow an EVT while waiting for a response to the last one */
      413    12253    2         CALL KVM$SND_EVT;
      414    12254    2      CASE(%KV_SND_FNC_MRK);
      415    12255    2         CALL KVM$SND_MRK;
      416    12256    2      CASE(%KV_SND_FNC_OPNSSN);
      417    12257    2         CALL KVM$SND_OPNSSN;
      418    12258    2      CASE(%KV_SND_FNC_PRM);
      419    12259    2         CALL KVM$SND_PRM;
      420    12260    2         CALL Y$RLSBFR (KV$SND_PRM.DAT__);
      421    12261    2      CASE(%KV_SND_FNC_RQSMRK);
      422    12262    2         IF %KV_SSN.MRKRQSENB
      423    12263    2         THEN CALL KVM$SND_RQSMRK;
      424    12264    2      CASE(%KV_SND_FNC_RQSSTT);
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:13   
      425    12265        /* if status request is not enabled, simply return with bad return
      426    12266           status.
      427    12267        */
      428    12268    2         IF NOT %KV_SSN.STTRQSENB THEN
      429    12269    3         DO;
      430    12270    3            ALTRETURN;
      431    12271    3         END;
      432    12272    2         ELSE
      433    12273    2         CALL KVM$SND_RQSSTT;
      434    12274    2      CASE(%KV_SND_FNC_STT);
      435    12275    2         RETURN;                           /* will be implemented later          */
      436    12276    2      CASE (%KV_SND_FNC_SCH);
      437    12277    2         CALL KVM$SND_SCHLCLSSN;
      438    12278        /* bad KV_SND_FNC code */
      439    12279    2      CASE (ELSE);
      440    12280    2         KVM_SND_BADFNC = KVM_SND_BADFNC + 1;
      441    12281    2         ALTRETURN;
      442    12282    2      END;                                 /* case                               */
      443    12283
      444    12284        /* put VLP's in CQ, if there are any */
      445    12285
      446    12286        /* handle the RQSMRK cases first */
      447    12287
      448    12288    1      IF KV$SND.RQSMRK AND (%KV_SSN.MRKRQSENB AND SZ>0
      449    12289    1        OR %KV_SSN.WATINPDLTMRK OR %KV_SSN.WATOTPDLTMRK) THEN
      450    12290    2      DO;
      451    12291    2         IF %KV_SSN.MRKRQSENB THEN
      452    12292    3         DO;
      453    12293    3            %KV_SSN.MRKNMB = %KV_SSN.MRKNMB + 1;
      454    12294    3            %KV_SSN.MRKRQSENB = '0'B;
      455    12295    3            %VDOVLP_MRK = KV_VDOVLP_MRK_MRK;
      456    12296    3            %VDOVLP_MRK.RSP = '0'B;
      457    12297    3            IF (LST_VLP < 0) THEN %VDOVLP_MRK.LST = '1'B;
      458    12298    3            %VDOVLP_MRK.ID.UBIN_DBLBYT = %KV_SSN.MRKNMB;
      459    12299    3            PUT$ = PINCRW(PUT$,SIZEW(KV$VDOVLP_MRK));
      460    12300    3         END;
      461    12301    3         IF (KV$SND.RQSMRK.DLTRCVRQS) THEN DO;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:14   
      462    12302    3            %KV_SSN.INPDLTMRKNMB = %KV_SSN.MRKNMB;
      463    12303    3            %KV_SSN.WATINPDLTMRK = '1'B;
      464    12304    2         END; ELSE
      465    12305    3         IF (KV$SND.RQSMRK.DLTRCVDAT) THEN DO;
      466    12306    3            %KV_SSN.OTPDLTMRKNMB = %KV_SSN.MRKNMB;
      467    12307    3            %KV_SSN.WATOTPDLTMRK = '1'B;
      468    12308    3         END;
      469    12309    2      END;
      470    12310
      471    12311        /*  Altreturn if we didn't send anything. */
      472    12312
      473    12313    1      IF SZ=0 THEN ALTRETURN;
      474    12314
      475    12315        /* then the VLPs passed along by VDOVLP_x$ */
      476    12316
      477    12317    1      LOOP_CNT = 0;
      478    12318    1      IF (LST_VLP >= 0) THEN
      479    12319    2   PUT@VLP: DO WHILE '1'B;
      480    12320    3         IF (KV$SND.VDOVLP_ARY(LOOP_CNT)~=ADDR(NIL)) THEN DO;
      481    12321    3            IF LOOP_CNT~=5 THEN TXTBYTSIZ = VDOVLP_BYTLNG_ARY(LOOP_CNT);
      482    12322    4            ELSE DO;
      483    12323    4               TXTBYTSIZ = LENGTHC(KV$SND.VDOVLP.KEY$->KV_VDOVLP_KEY);
      484    12324    4               TXTBYTSIZ = TXTBYTSIZ+MOD(TXTBYTSIZ,2);
      485    12325    4            END;
      486    12326    3            PUT$->DMYTXT = KV$SND.VDOVLP_ARY(LOOP_CNT)->DMYTXT;
      487    12327    4            IF (LST_VLP = LOOP_CNT) THEN DO;
      488    12328    4               %VDOVLP_MRK.LST = '1'B;
      489    12329    4               EXIT PUT@VLP;
      490    12330    4            END;
      491    12331    3            PUT$ = PINCRW(PUT$, TXTBYTSIZ/2);
      492    12332    3         END;
      493    12333    2         LOOP_CNT = LOOP_CNT + 1;
      494    12334    2      END PUT@VLP;
      495    12335
      496    12336    2      IF Y@VDO$~=ADDR(NIL) THEN DO;
      497    12337    2         IF VLP_WRDSIZ~=0 THEN Y@VDO$->KV$VDO.VLP = '1'B;
      498    12338    2         %KV_STT.SND.VDOBYTCNT = %KV_STT.SND.VDOBYTCNT + 2*MSGWRDSIZ;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:15   
      499    12339    2         %KV_STT.SNDVDOFNCCNT(Y@VDO$->KV$VDO.FNC) =
      500    12340    2           %KV_STT.SNDVDOFNCCNT(Y@VDO$->KV$VDO.FNC)+1;
      501    12341    2         %KV_STT.SND.VDOCNT = %KV_STT.SND.VDOCNT + 1;
      502    12342    2      END;
      503    12343    2      IF NOT KONCAT THEN DO;
      504    12344
      505    12345        /* This VDO didn't get concatenated with other VDOs for the
      506    12346          same session connection, so count up the session interface
      507    12347          data unit count. */
      508    12348
      509    12349    2         %KV_STT.SND.SSNINTDATUNTCNT = %KV_STT.SND.SSNINTDATUNTCNT + 1;
      510    12350    2      END;
      511    12351    1      %KV_STT.SND.SSNINTDATUNTBYTCNT = %KV_STT.SND.SSNINTDATUNTBYTCNT + SZ * 2;
      512    12352    1      Y@TRCBFR$ = %KV_SSN.TRCBFR$;
      513    12353    2      IF Y@TRCBFR$ ~= ADDR(NIL) THEN DO;
      514    12354        /*
      515    12355        The VDH trace buffer does exist.  Do VDH tracing.
      516    12356        */
      517    12357    3         IF Y@KNH$ ~= ADDR(NIL) THEN DO;
      518    12358    3            Y@TRCENT = Y_TRCENT_SNDSSN;
      519    12359    3            Y@TRCENT.FNC = Y@KNH$ -> KNH$MESS.FUNCTION;
      520    12360    3            CALL Y$TRC;
      521    12361    3         END;
      522    12362    3         IF Y@VDO$ ~= ADDR(NIL) THEN DO;
      523    12363    3            Y@TRCENT = Y_TRCENT_SNDVDO;
      524    12364    3            Y@TRCENT.FNC = Y@VDO$ -> KV$VDO.FNC;
      525    12365    3            CALL Y$TRC;
      526    12366    3         END;
      527    12367    2      END;                                 /* END IF TRCBFR$ ~= NIL              */
      528    12368    1      GOTO NRMRET;
      529    12369        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:16   
      530    12370        /*F*
      531    12371            NAME: KVM$FLUSHCQ
      532    12372            DESCRIPTION:
      533    12373                  Simply tries to merge any extensions into the main SCQ, since
      534    12374                  it would only otherwise get done when another message needed to
      535    12375                  get sent.
      536    12376        */
      537    12377    1   KVM$FLUSHCQ: ENTRY ALTRET;
      538    12378
      539    12379    1      NOT_X25 = '1'B;
      540    12380    1      KONCAT = '1'B;
      541    12381    1      MSGWRDSIZ = KVM_SND_SCQ_SLKWRD;
      542    12382    1      VLP_WRDSIZ = 0;
      543    12383    1      INHLVL = KH_INHLVL;
      544    12384    1      CALL KVM$FNDSPACE;
      545    12385    1      IF INHLVL~=KH_INHLVL
      546    12386    1      THEN CALL KHI$ENABLE;
      547    12387    1      RETURN;
      548    12388        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:17   
      549    12389        /*F* NAME:  KVM$SNDCQ - Link-level Send via Circular Queue
      550    12390        The KVM$SNDCQ entry point is provided for link-level access to the
      551    12391        circular queue.  KVM$SNDCQ has no knowledge of the information passed by
      552    12392        the handler.  This routine simply places messages in the send circular queue.
      553    12393
      554    12394        This service takes the alternate return if there is no space available.
      555    12395
      556    12396        The form of the call for this service is:
      557    12397
      558    12398            CALL KVM$SNDCQ(kv$sndcq) ALTRET(label);
      559    12399
      560    12400        where:
      561    12401
      562    12402        .inl 4
      563    12403        .unl 4
      564    12404        kv$sndcq - has essentially six VDH buffer descriptors.
      565    12405        .inl 0
      566    12406        */
      567    12407    1   KVM$SNDCQ: ENTRY(KV$SND_X) ALTRET;
      568    12408
      569    12409    1      NOT_X25 = '0'B;
      570    12410    1      Y@SSN$ = ADDR(NIL);
      571    12411    1      Y@STT$ = ADDR(NIL);
      572    12412    1      KONCAT = '0'B;
      573    12413    1      SZ = (KV$SNDCQ.MSG1_.BYTSIZ
      574    12414    1        + KV$SNDCQ.MSG2_.BYTSIZ
      575    12415    1        + KV$SNDCQ.MSG3_.BYTSIZ
      576    12416    1        + KV$SNDCQ.MSG4_.BYTSIZ
      577    12417    1        + KV$SNDCQ.MSG5_.BYTSIZ
      578    12418    1        + KV$SNDCQ.MSG6_.BYTSIZ + 1) / 2;
      579    12419    1      INHLVL = KH_INHLVL;
      580    12420    2      CALL KVM$FNDSPACE WHENALTRETURN DO;
      581    12421    2         ALTRETURN;
      582    12422    2      END;
      583    12423    1      TXTBYTSIZ = KV$SNDCQ.MSG1_.BYTSIZ;
      584    12424    2      IF TXTBYTSIZ ~= 0 THEN DO;
      585    12425    2         PUT$->DATTXT = SUBSTR(KV$SNDCQ.MSG1_.ADR$->DMYTXT,
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:18   
      586    12426    2           KV$SNDCQ.MSG1_.BYTX, TXTBYTSIZ);
      587    12427    2         PUT$ = PINCRW(PUT$,TXTBYTSIZ/2);  /* MSGn_'s are dword bounded          */
      588    12428    2      END;
      589    12429    1      TXTBYTSIZ = KV$SNDCQ.MSG2_.BYTSIZ;
      590    12430    2      IF TXTBYTSIZ ~= 0 THEN DO;
      591    12431    2         PUT$->DATTXT = SUBSTR(KV$SNDCQ.MSG2_.ADR$->DMYTXT,
      592    12432    2           KV$SNDCQ.MSG2_.BYTX, TXTBYTSIZ);
      593    12433    2         PUT$ = PINCRW(PUT$,TXTBYTSIZ/2);  /* MSGn_'s are dword bounded          */
      594    12434    2      END;
      595    12435    1      TXTBYTSIZ = KV$SNDCQ.MSG3_.BYTSIZ;
      596    12436    2      IF TXTBYTSIZ ~= 0 THEN DO;
      597    12437    2         PUT$->DATTXT = SUBSTR(KV$SNDCQ.MSG3_.ADR$->DMYTXT,
      598    12438    2           KV$SNDCQ.MSG3_.BYTX, TXTBYTSIZ);
      599    12439    2         PUT$ = PINCRW(PUT$,TXTBYTSIZ/2);  /* MSGn_'s are dword bounded          */
      600    12440    2      END;
      601    12441    1      TXTBYTSIZ = KV$SNDCQ.MSG4_.BYTSIZ;
      602    12442    2      IF TXTBYTSIZ ~= 0 THEN DO;
      603    12443    2         PUT$->DATTXT = SUBSTR(KV$SNDCQ.MSG4_.ADR$->DMYTXT,
      604    12444    2           KV$SNDCQ.MSG4_.BYTX, TXTBYTSIZ);
      605    12445    2         PUT$ = PINCRW(PUT$,TXTBYTSIZ/2);  /* MSGn_'s are dword bounded          */
      606    12446    2      END;
      607    12447    1      TXTBYTSIZ = KV$SNDCQ.MSG5_.BYTSIZ;
      608    12448    2      IF TXTBYTSIZ ~= 0 THEN DO;
      609    12449    2         PUT$->DATTXT = SUBSTR(KV$SNDCQ.MSG5_.ADR$->DMYTXT,
      610    12450    2           KV$SNDCQ.MSG5_.BYTX, TXTBYTSIZ);
      611    12451    2         PUT$ = PINCRW(PUT$,TXTBYTSIZ/2);  /* MSGn_'s are dword bounded          */
      612    12452    2      END;
      613    12453    1      TXTBYTSIZ = KV$SNDCQ.MSG6_.BYTSIZ;
      614    12454    2      IF TXTBYTSIZ ~= 0 THEN DO;
      615    12455    2         PUT$->DATTXT = SUBSTR(KV$SNDCQ.MSG6_.ADR$->DMYTXT,
      616    12456    2           KV$SNDCQ.MSG6_.BYTX, TXTBYTSIZ);
      617    12457    2         PUT$ = PINCRW(PUT$,TXTBYTSIZ/2);  /* MSGn_'s are dword bounded          */
      618    12458    2      END;
      619    12459    1      KVM_SND_PRV$->KNH$MESS.LAST_PTR = LOOP_CNT;
      620    12460        /*
      621    12461           That's all we do for X.25.
      622    12462        */
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:19   
      623    12463        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:20   
      624    12464
      625    12465        /*
      626    12466           Normal return
      627    12467        */
      628    12468    1   NRMRET:
      629    12469
      630    12470        /* save IPTR as KVM_SND_PRV_IPTR before updating it */
      631    12471
      632    12472
      633    12473    1      IF INHLVL~=KH_INHLVL
      634    12474    1      THEN CALL KHI$ENABLE;
      635    12475
      636    12476    1      RETURN;
      637    12477
      638    12478        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:21   
      639    12479
      640    12480        /*I*
      641    12481            NAME: KVM$FNDSPACE
      642    12482            PURPOSE:
      643    12483                  Find the space in CQ (or extensions) required by the
      644    12484                  current message.
      645    12485            CALL: calculate the word-size requirement, then CALL KVM$FNDSPACE.
      646    12486            DESCRIPTION:
      647    12487                  The monitor CQ and the CQ extensions, if any exists, form
      648    12488                  a linked list of message holding buffers. At any entry to
      649    12489                  KVM$SND, we may be using the main CQ, or the extensions.
      650    12490                  If we are not using the main CQ, try to absorb as many
      651    12491                  CQ extensions into the main CQ as the latter can hold,
      652    12492                  because only messages there actually got looked at.
      653    12493                  Then see if there is room to meet the current size
      654    12494                  requirement. If so, just return. Otherwise, if we are not called by
      655    12495                  X.25, call KVS$GETBFR to get at least 256 bytes, and use that as
      656    12496                  a CQ extension. If that should fail, we screech.
      657    12497                  We will not attempt to find a CQ extension for X.25.
      658    12498        */
      659    12499    1   KVM$FNDSPACE: PROC ALTRET;
      660    12500        %KNH$QHDR (FPTN=KNH$XTNQ,STCLASS="BASED(KV_SNDCQ_QHDR$)",
      661    12501         EXTENSION=YES,EXTENSION_DWD=STT$ PTR);
      662    12514        %FPT_WRTMLT (FPTN=KV_FPT_WRTMLT,STCLASS=STATIC SYMDEF);
      663    12534    2   DCL 1 CTX BASED,
      664    12535    2          2 LNK$ PTR;
      665    12536    2   DCL DBLWRDSIZ UBIN;
      666    12537    2   DCL KV@SND_SAVE_QHDR$ PTR;
      667    12538    2   DCL NOP_MSG$ PTR;
      668    12539    2   DCL SPACE1 UBIN;
      669    12540    2   DCL SPACE2 UBIN;
      670    12541    2   DCL ABSORB BIT(1);
      671    12542    2   DCL EXT_DBLWRDSIZ UBIN WORD;
      672    12543    2   DCL EXT_BYTSIZ UBIN WORD;
      673    12544    2   DCL EXT_BODY CHAR(EXT_BYTSIZ) ALIGNED BASED;
      674    12545    2   DCL TAKE$ PTR;
      675    12546        %EQU G_QHDR = CHARTEXT('G$HAND_Q$->KNH$QHDR');
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:22   
      676    12547        %EQU K_QHDR = CHARTEXT('KV_SNDCQ_QHDR$->KNH$QHDR');
      677    12548        /* beginning of proc */
      678    12549
      679    12550    2      IF NOT_X25 THEN
      680    12551    3      DO;
      681    12552    3         MSGWRDSIZ = MSGWRDSIZ+VLP_WRDSIZ;
      682    12553    3         IF NOT KONCAT
      683    12554    3         THEN SZ = SZ + SIZEW(KNH$MESS) + MSGWRDSIZ;
      684    12555    3         ELSE SZ = MSGWRDSIZ - KVM_SND_SCQ_SLKWRD;
      685    12556    3      END;
      686    12557    2      CALL KHI$DISABLE (INHLVL);
      687    12558        /* Are we using the main CQ? */
      688    12559
      689    12560    2      IF KV_SNDCQ_QHDR$ ~= G$HAND_Q$ THEN
      690    12561    3      DO;
      691    12562    3         CALL M$WRTMLT (KV_FPT_WRTMLT) WHENRETURN
      692    12563    4         DO;
      693    12564    4            %G_QHDR.SCQ.IPTR = 0;
      694    12565    4            %G_QHDR.SCQ.RPTR = 0;          /* got to play with RPTR here         */
      695    12566    4         END;
      696    12567
      697    12568        /* try to absorb as many extensions as the main CQ can hold */
      698    12569
      699    12570    3         KV@SND_SAVE_QHDR$ = KV_SNDCQ_QHDR$;
      700    12571    3         KV_SNDCQ_QHDR$ = PINCRW(G$HAND_Q$,%G_QHDR.CTX.OFFSET)->CTX.LNK$;
      701    12572    4         DO UNTIL (KV_SNDCQ_QHDR$ = ADDR(NIL));
      702    12573    4            EXT_DBLWRDSIZ = %K_QHDR.SCQ.IPTR - %K_QHDR.SCQ.RPTR;
      703    12574    4            EXT_BYTSIZ = EXT_DBLWRDSIZ * 4;
      704    12575
      705    12576        /* find out if there's room in main CQ */
      706    12577
      707    12578    4            IF %G_QHDR.SCQ.IPTR >= %G_QHDR.SCQ.RPTR THEN
      708    12579    5            DO;
      709    12580    5               SPACE1 = %G_QHDR.SCQ.SZ - %G_QHDR.SCQ.IPTR;
      710    12581    5               SPACE2 = %G_QHDR.SCQ.RPTR;
      711    12582    5            END;
      712    12583    4            ELSE
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:23   
      713    12584    5            DO;
      714    12585    5               SPACE1 = %G_QHDR.SCQ.RPTR - %G_QHDR.SCQ.IPTR;
      715    12586    5               SPACE2 = 0;
      716    12587    5            END;
      717    12588    4            ABSORB = '0'B;
      718    12589    4            IF SPACE1 >= EXT_DBLWRDSIZ + (SIZEW(KNH_MESS) + 1)/2
      719    12590    4            THEN ABSORB='1'B;
      720    12591    4            ELSE
      721    12592    4            IF SPACE2 > EXT_DBLWRDSIZ THEN
      722    12593    5            DO;
      723    12594        /* we need a NOP message to bound out to the end of the CQ */
      724    12595    5               NOP_MSG$ = PINCRW(G$HAND_Q$,%G_QHDR.SCQ.OFFSET+%G_QHDR.SCQ.IPTR*2);
      725    12596    5               %NOP_MESS = KNH_MESS;
      726    12597    5               %NOP_MESS.FUNCTION = %KN_FCN_NOP;
      727    12598    5               %NOP_MESS.FPTSZ = (%G_QHDR.SCQ.SZ - %G_QHDR.SCQ.IPTR - (SIZEW(KNH_MESS)+
             12598                        1)/2 ) * 4;
      728    12599        /* CQ is wrapped. set IPTR to 0 */
      729    12600    5               %G_QHDR.SCQ.IPTR = 0;
      730    12601    5               ABSORB='1'B;
      731    12602    5            END;
      732    12603    4            IF ABSORB THEN
      733    12604    5            DO;
      734    12605    5               PUT$ = PINCRW(G$HAND_Q$,%G_QHDR.SCQ.OFFSET+%G_QHDR.SCQ.IPTR*2);
      735    12606    5               TAKE$ = PINCRW(KV_SNDCQ_QHDR$,%K_QHDR.SCQ.OFFSET);
      736    12607    5               PUT$->EXT_BODY = TAKE$->EXT_BODY;
      737    12608    5               %G_QHDR.SCQ.IPTR = %G_QHDR.SCQ.IPTR + EXT_DBLWRDSIZ;
      738    12609
      739    12610        /* release the buffer to VDH */
      740    12611    5               KV@VDH_RLSBFR = KV_VDH_RLSBFR;
      741    12612    5               KV@VDH_RLSBFR.STRTYP = %KV_STRTYP_MSG;
      742    12613    5               KV@VDH_RLSBFR.BFR$ = KV_SNDCQ_QHDR$;
      743    12614    5               KV@VDH_RLSBFR.BYTSIZ = %K_QHDR.SCQ.SZ*4 + SIZEC(KNH$XTNQ);
      744    12615    5               KV@VDH_RLSBFR.STT$ = KNH$XTNQ.XTNDAT.STT$;
      745    12616        /* Update the link pointer in main CQ, so that the absorbed
      746    12617           extension essentially disappears */
      747    12618
      748    12619    5               KV_SNDCQ_QHDR$ = KNH$XTNQ.XTNDAT.LNK$;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:24   
      749    12620    5               PINCRW(G$HAND_Q$,%G_QHDR.CTX.OFFSET)->CTX.LNK$ = KV_SNDCQ_QHDR$;
      750    12621    5               CALL KVS$RLSBFR(KV@VDH_RLSBFR);
      751    12622    5            END;
      752    12623    4            ELSE                      /* no room to take in this extension, exit */
      753    12624    4            KV_SNDCQ_QHDR$ = ADDR(NIL);
      754    12625    4         END;                              /* of DO UNTIL                        */
      755    12626    3         IF PINCRW(G$HAND_Q$,%G_QHDR.CTX.OFFSET)->CTX.LNK$ = ADDR(NIL)
      756    12627    3         THEN KV_SNDCQ_QHDR$ = G$HAND_Q$;
      757    12628    3         ELSE KV_SNDCQ_QHDR$ = KV@SND_SAVE_QHDR$;
      758    12629    3      END;
      759    12630
      760    12631        /* shuffling is done */
      761    12632
      762    12633    3      IF SZ=0 THEN DO;
      763    12634        /* Just emptying extensions - reset the flag if there are no more */
      764    12635    3         IF KV_SNDCQ_QHDR$=G$HAND_Q$ THEN %K_QHDR.CTX.WU = '0'B;
      765    12636    3         RETURN;
      766    12637    3      END;
      767    12638    2      IF %K_QHDR.SCQ.IPTR >= %K_QHDR.SCQ.RPTR THEN
      768    12639    3      DO;
      769    12640    3         SPACE1 = %K_QHDR.SCQ.SZ - %K_QHDR.SCQ.IPTR;
      770    12641    3         SPACE2 = %K_QHDR.SCQ.RPTR;
      771    12642    3      END;
      772    12643    2      ELSE
      773    12644    3      DO;
      774    12645    3         SPACE1 = %K_QHDR.SCQ.RPTR - %K_QHDR.SCQ.IPTR - 1;
      775    12646    3         SPACE2 = 0;
      776    12647    3      END;
      777    12648    2      DBLWRDSIZ = (SZ + 1) / 2;
      778    12649    2      IF SPACE1 >= DBLWRDSIZ + (SIZEW(KNH_MESS) + 1)/2 THEN
      779    12650    3      DO;
      780    12651    3         PUT$ = PINCRW(KV_SNDCQ_QHDR$,%K_QHDR.SCQ.OFFSET+%K_QHDR.SCQ.IPTR*2);
      781    12652    3         IF KONCAT THEN PUT$ = PINCRW(PUT$,-KVM_SND_SCQ_SLKWRD);
      782    12653    3         GOTO FND_RETURN;
      783    12654    3      END;
      784    12655    2      ELSE
      785    12656    3      DO;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:25   
      786    12657    4         IF KONCAT THEN DO;
      787    12658        /*
      788    12659        We are not able to concatenate the message. So add back the size of
      789    12660        the message header, and the slack word (0 or 1) which we took off
      790    12661        from SZ when we were trying to concatenate.
      791    12662        */
      792    12663        /*N* Until KONCAT is implemented except for DAT VDOs in forms,
      793    12664        just altret here, to terminate the read. */
      794    12665    5            IF SZ>0 THEN DO;
      795    12666    5               SZ = 0;
      796    12667    5               ALTRETURN;
      797    12668    5            END;
      798    12669    4            SZ = SZ + SIZEW(KNH_MESS) + KVM_SND_SCQ_SLKWRD;
      799    12670    4            DBLWRDSIZ = (SZ + 1) / 2;
      800    12671    4            KONCAT = '0'B;
      801    12672    4         END;
      802    12673    3         IF SPACE2 > DBLWRDSIZ THEN
      803    12674    4         DO;
      804    12675        /* we need a NOP message to bound out to the end of the CQ */
      805    12676    4            NOP_MSG$ = PINCRW(KV_SNDCQ_QHDR$,%K_QHDR.SCQ.OFFSET+%K_QHDR.SCQ.IPTR*2);
      806    12677    4            %NOP_MESS = KNH_MESS;
      807    12678    4            %NOP_MESS.FUNCTION = %KN_FCN_NOP;
      808    12679    4            %NOP_MESS.FPTSZ = (%K_QHDR.SCQ.SZ - %K_QHDR.SCQ.IPTR - (SIZEW(KNH_MESS)+1)/
             12679                     2 ) * 4;
      809    12680        /* CQ is wrapped. set IPTR to 0 */
      810    12681    4            %K_QHDR.SCQ.IPTR = 0;
      811    12682    4            PUT$ = PINCRW(KV_SNDCQ_QHDR$,%K_QHDR.SCQ.OFFSET);
      812    12683    4            GOTO FND_RETURN;
      813    12684    4         END;
      814    12685    3         IF %K_QHDR.SCQ.SZ >= DBLWRDSIZ AND %K_QHDR.SCQ.IPTR = %K_QHDR.SCQ.RPTR THEN
      815    12686    4         DO;
      816    12687
      817    12688        /* The Q is actually empty, but this message wont fit in either part.
      818    12689           Make like it wrapped. */
      819    12690
      820    12691    4            %K_QHDR.SCQ.IPTR = 0;
      821    12692    4            %K_QHDR.SCQ.RPTR = 0;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:26   
      822    12693    4            PUT$ = PINCRW(KV_SNDCQ_QHDR$,%K_QHDR.SCQ.OFFSET);
      823    12694    4            GOTO FND_RETURN;
      824    12695    4         END;
      825    12696    4         IF %G_QHDR.SCQ.SZ<DBLWRDSIZ THEN DO;
      826    12697
      827    12698        /* This one's never gonna fit - give up.*/
      828    12699
      829    12700    4            SZ = DBLWRDSIZ-%G_QHDR.SCQ.SZ;
      830    12701    4            ALTRETURN;
      831    12702    4         END;
      832    12703    3      END;
      833    12704
      834    12705        /* For us to get here, the current CQ must be full. Get CQ extension */
      835    12706        /* However, if we are called by X.25, just altret. */
      836    12707
      837    12708    2      IF NOT NOT_X25 THEN ALTRETURN;       /* Excuse the use of 'NOT NOT_X25'    */
      838    12709
      839    12710    2      KV@VDH_GETBFR = KV_VDH_GETBFR;
      840    12711    2      KV@VDH_GETBFR.STRTYP = %KV_STRTYP_MSG;
      841    12712    2      KV@VDH_GETBFR.BYTSIZ = DBLWRDSIZ*4 + SIZEC(KNH$XTNQ);
      842    12713    2      KV@VDH_GETBFR.SCRNO_MMR = '1'B;
      843    12714    2      CALL KVS$GETBFR(KV@VDH_GETBFR);
      844    12715
      845    12716        /* now we have to set up the QHDR of the CQ extension */
      846    12717
      847    12718    2      %G_QHDR.CTX.WU = '1'B;               /* Wake up when the SCQ empties.      */
      848    12719    2      IF KV_SNDCQ_QHDR$ = G$HAND_Q$
      849    12720    2      THEN PINCRW(KV_SNDCQ_QHDR$,%K_QHDR.CTX.OFFSET)->CTX.LNK$ = KV@VDH_GETBFR.BFR$;
      850    12721    2      ELSE %K_QHDR.XTNDAT.LNK$ = KV@VDH_GETBFR.BFR$;
      851    12722    2      KV_SNDCQ_QHDR$ = KV@VDH_GETBFR.BFR$;
      852    12723    2      %K_QHDR.SCQ.IPTR = 0;
      853    12724    2      %K_QHDR.SCQ.RPTR = 0;
      854    12725        /*N* SIZEW of QHDR & CTX must be kept even */
      855    12726    2      %K_QHDR.SCQ.OFFSET = SIZEW(KNH$XTNQ);
      856    12727    2      %K_QHDR.SCQ.SZ = KV@VDH_GETBFR.BYTSIZ/4 - %K_QHDR.SCQ.OFFSET/2;
      857    12728    2      KNH$XTNQ.XTNDAT.STT$ = Y@STT$;
      858    12729    2      KNH$XTNQ.XTNDAT.LNK$ = ADDR(NIL);
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:27   
      859    12730    2      PUT$ = PINCRW(KV_SNDCQ_QHDR$,%K_QHDR.SCQ.OFFSET);
      860    12731    2   FND_RETURN:                             /*  set up some pointers for tracing  */
      861    12732    3      IF NOT KONCAT THEN DO;
      862    12733    3         KVM_SND_PRV$ = PUT$;
      863    12734    3         LOOP_CNT = 0;
      864    12735    3         IF KV_SNDCQ_QHDR$~=G$HAND_Q$ THEN EXIT;
      865    12736    3         LOOP_CNT = KNH$QHDR.LAST_SCQPTR;  /* Save to store in the message       */
      866    12737    3         KNH$QHDR.LAST_SCQPTR = KNH$QHDR.SCQ.IPTR;
      867    12738    3      END;
      868    12739    2      IF NOT_X25 THEN
      869    12740    3      DO;
      870    12741    3         IF KONCAT THEN
      871    12742    4         DO;
      872    12743    4            Y@KNH$ = ADDR(NIL);
      873    12744    4            KVM_SND_PRV$->KNH$MESS.MSGSZ = ((KVM_SND_PRV$->KNH$MESS.MSGSZ+1)/2 +
      874    12745    4              MSGWRDSIZ)*2 - SLACK_BYT;
      875    12746    4         END;
      876    12747    3         ELSE
      877    12748    4         DO;
      878    12749    4            Y@KNH$ = PUT$;
      879    12750    4            %MESS = KNH_MESS;
      880    12751    4            PUT$->KNH$MESS.LAST_PTR = LOOP_CNT;
      881    12752    4            IF %KV_SSN.SSNCNCID=0 AND KV$SND.FNC~=%KV_SND_FNC_SCH
      882    12753    4            THEN IF KV$SND.FNC~=%KV_SND_FNC_CNC OR NOT %KV_SSN.SSNCNCINT THEN
      883    12754    5            DO;
      884    12755    5               CALL KHD$SCREECH (KVM_BADLDCT);
      885    12756    5               ALTRETURN;
      886    12757    5            END;
      887    12758    4            %MESS.LDCTX = %KV_SSN.SSNCNCID;
      888    12759    4            %MESS.UID$ = KV$PTR.SSN$;
      889    12760    4            %MESS.MSGSZ = MSGWRDSIZ*2 - SLACK_BYT;
      890    12761    4            PUT$ = PINCRW(PUT$, SIZEW(KNH$MESS));
      891    12762    4         END;
      892    12763    3         IF Y_VDO_YES(KV$SND.FNC)
      893    12764    3         THEN Y@VDO$ = PUT$;
      894    12765    3      END;
      895    12766    2      KVM_SND_SCQ_SLKWRD = MOD(SZ,2);
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:28   
      896    12767    2      KNH$QHDR.SCQ.IPTR = KNH$QHDR.SCQ.IPTR + (SZ + 1)/2;
      897    12768    2      RETURN;
      898    12769    2   END KVM$FNDSPACE;
      899    12770
      900    12771        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:29   
      901    12772        /*I*
      902    12773            NAME: KVM$SND_CLSSSN
      903    12774            PURPOSE:
      904    12775                  close session messgae.
      905    12776            CALL: similar to that of KVM$SND_RQSDAT_GNR.
      906    12777            DESCRIPTION:
      907    12778                  call KVM$FNDSPACE to get CQ space. Look at session context
      908    12779                  to determine if we are requesting or responding to close
      909    12780                  session, and then build KV$VDO_CLSSSN with corresponding
      910    12781                  function code.
      911    12782        */
      912    12783
      913    12784    1   KVM$SND_CLSSSN: PROC ;
      914    12785
      915    12786        /* see if we have space in CQ */
      916    12787    2      MSGWRDSIZ = SIZEW(KV$VDO_CLSSSN);
      917    12788    2      CALL KVM$FNDSPACE;
      918    12789        /* build the KV$VDO message in the CQ */
      919    12790    2      IF %KV_SSN.SND_CLSSSN_RSP THEN
      920    12791    2      %VDO_CLSSSN = KV_VDO_CLSSSN_RSP;
      921    12792    2      ELSE
      922    12793    2      %VDO_CLSSSN = KV_VDO_CLSSSN_RQS;
      923    12794    2      PUT$ = PINCRW(PUT$,SIZEW(KV$VDO_CLSSSN));
      924    12795    2      RETURN;
      925    12796    2   END KVM$SND_CLSSSN;
      926    12797        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:30   
      927    12798        /*I*
      928    12799            NAME: KVM$SND_CMPDSCSSN
      929    12800            PURPOSE:
      930    12801                  acknowledge termination messgae.
      931    12802            CALL: similar to that of KVM$SND_RQSDAT_GNR.
      932    12803            DESCRIPTION:
      933    12804                  call KVM$FNDSPACE to get CQ space. Build the FPT_TERM_ACK
      934    12805                  return.
      935    12806        */
      936    12807
      937    12808    1   KVM$SND_CMPDSCSSN: PROC ;
      938    12809
      939    12810        /* see if we have space in CQ */
      940    12811    2      MSGWRDSIZ = 0;
      941    12812    2      SZ = SIZEW(FPT_TERM_ACK);
      942    12813    2      CALL KVM$FNDSPACE;
      943    12814        /* build CQ message header */
      944    12815    2      %MESS.FUNCTION=%KN_FCN_TERM_ACK;
      945    12816    2      %MESS.FPTSZ = SIZEW(FPT_TERM_ACK) * 2;
      946    12817        /* build the FPT in the CQ */
      947    12818    2      %FPT_TRMACK = FPT_TERM_ACK;
      948    12819    2      PUT$ = PINCRW(PUT$,SIZEW(FPT_TERM_ACK));
      949    12820    2      %KV_SSN.SSNCNCID = 0;           /* We cant talk thru this one anymore.     */
      950    12821
      951    12822    2      RETURN;
      952    12823    2   END KVM$SND_CMPDSCSSN;
      953    12824
      954    12825        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:31   
      955    12826        /*I*
      956    12827            NAME: KVM$SND_CNC
      957    12828            PURPOSE:
      958    12829                  connect message.
      959    12830            CALL: similar to that of KVM$SND_RQSDAT_GNR.
      960    12831            DESCRIPTION:
      961    12832                  call KVM$FNDSPACE to get CQ space. Build the FPT$CONNECT
      962    12833                  (if we're initiating the session) or FPT$CONNECT_ACK
      963    12834                  (if we've received FPT$CONNECT), followed by possibly
      964    12835                  a logon string.
      965    12836        */
      966    12837
      967    12838    1   KVM$SND_CNC: PROC ;
      968    12839
      969    12840        /* see if we have space in CQ */
      970    12841    2      IF VBASE(KV$SND_CNC.LGN_) = ADDR(NIL) THEN
      971    12842    2      TXTBYTSIZ = 0;
      972    12843    2      ELSE
      973    12844    2      TXTBYTSIZ = VBOUND(KV$SND_CNC.LGN_) + 1;
      974    12845    2      MSGWRDSIZ = (TXTBYTSIZ+1)/2;
      975    12846    2      SZ = SIZEW(FPT_CONNECT);
      976    12847    2      IF NOT %KV_SSN.SSNCNCINT THEN
      977    12848    2      SZ = SIZEW(FPT_CONNECT_ACK);
      978    12849    2      CALL KVM$FNDSPACE;
      979    12850        /* build CQ message header */
      980    12851    3      IF %KV_SSN.SSNCNCINT THEN DO;
      981    12852    3         %MESS.FUNCTION=%KN_FCN_INIT;
      982    12853    3         %MESS.FPTSZ = SIZEW(FPT_CONNECT) * 2;
      983    12854    3         %FPT_CNC = FPT_CONNECT;
      984    12855    3         %FPT_CNC.TERMINAL_ID = KV$SND_CNC.SCNENDPNTID;
      985    12856    3         %FPT_CNC.RLCID = KV$SND_CNC.DSTNTWADR;
      986    12857    3         %FPT_CNC.RESOURCE = KV$SND_CNC.DSTNTWRSR;
      987    12858    3         %FPT_CNC.SPEED = KV$SND_CNC.LINSPD;
      988    12859    3         %FPT_CNC.TYPE = %KN_CON_TYP_SESS;
      989    12860    3         PUT$ = PINCRW(PUT$,SIZEW(FPT_CONNECT));
      990    12861    3      END; ELSE DO;
      991    12862    3         %MESS.FUNCTION=%KN_FCN_INIT_ACK;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:32   
      992    12863    3         %MESS.FPTSZ = SIZEW(FPT_CONNECT_ACK) * 2;
      993    12864    3         %FPT_CNC_ACK = FPT_CONNECT_ACK;
      994    12865    4         IF KV$SND_CNC.ERR THEN DO;
      995    12866    4            %FPT_CNC_ACK.REASON = %KV_STR.ERR.COD;
      996    12867    4            %KV_STR.ERR.COD = 0;
      997    12868    4            %MESS.LDCTX = KV$SND_CNC.DSTNTWADR.LDCTX;
      998    12869    4         END;
      999    12870    3         PUT$ = PINCRW(PUT$,SIZEW(FPT_CONNECT_ACK));
     1000    12871    3      END;
     1001    12872
     1002    12873        /* build the actual message - the logon string - in the CQ */
     1003    12874
     1004    12875    3      IF (TXTBYTSIZ ~= 0) THEN DO;
     1005    12876    3         PUT$->LGN_STRING = VBASE(KV$SND_CNC.LGN_)->LGN_STRING;
     1006    12877    3         PUT$ = PINCRW(PUT$, MSGWRDSIZ);
     1007    12878    3      END;
     1008    12879    2      RETURN;
     1009    12880    2   END KVM$SND_CNC;
     1010    12881
     1011    12882        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:33   
     1012    12883        /*I*
     1013    12884            NAME: KVM$SND_DAT
     1014    12885            PURPOSE: data message.
     1015    12886            CALL: similar to that of KVM$SND_RQSDAT_GNR.
     1016    12887            DESCRIPTION:
     1017    12888                  build the KV$VDOVLP_DAT1 or KV$VDOVLP_DAT2 structure in CQ.
     1018    12889        */
     1019    12890
     1020    12891    1   KVM$SND_DAT: PROC ;
     1021    12892
     1022    12893        %KV$VDOVLP_ERR (STCLASS=CONSTANT, NAME=E$LD, ERR#=%E$LD, FCG=KV,MID=M,MON='1'B);
     1023    12990
     1024    12991    2      TXTBYTSIZ = KV$SND_DAT.DAT__.DATBYTSIZ;
     1025    12992    3      DO UNTIL SZ>0;
     1026    12993    3         IF TXTBYTSIZ = 0 THEN
     1027    12994    3         MSGWRDSIZ = 0;
     1028    12995    3         ELSE IF TXTBYTSIZ < 256 THEN
     1029    12996    3         MSGWRDSIZ = SIZEW(KV$VDOVLP_DAT1);
     1030    12997    3         ELSE
     1031    12998    3         MSGWRDSIZ = SIZEW(KV$VDOVLP_DAT2);
     1032    12999    3         IF KV$SND_DAT.ACTPOS~=0 AND TXTBYTSIZ~=0
     1033    13000    3         THEN MSGWRDSIZ = MSGWRDSIZ + SIZEW(KV_VDOVLP_ACTPOS);
     1034    13001    3         MSGWRDSIZ = MSGWRDSIZ + SIZEW(KV_VDO_DAT) + (TXTBYTSIZ + 1)/2;
     1035    13002
     1036    13003    3         IF VLP_WRDSIZ=0 THEN SLACK_BYT = MOD(TXTBYTSIZ,2);
     1037    13004
     1038    13005    4         IF KV$SND_DAT.KONCAT THEN DO;
     1039    13006        /*
     1040    13007           If the caller wants to tack onto the previously built message,
     1041    13008           make sure it's ok to do it.
     1042    13009        */
     1043    13010    4            IF KVM_SND_PRV$->KNH$MESS.LDCTX=%KV_SSN.SSNCNCID AND %KV_SSN.REDMLT
     1044    13011    4              AND KNH$QHDR.SCQ.IPTR~=KNH$QHDR.SCQ.RPTR
     1045    13012    5            THEN DO;
     1046    13013    5               IF (MSGWRDSIZ+VLP_WRDSIZ)*2>%KV_SSN.SNDMAXNMBBYT
     1047    13014    5               THEN RETURN;           /* we'll eventually ALTRETURN because SZ=0 */
     1048    13015    5               KONCAT = '1'B;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:34   
     1049    13016    5            END;
     1050    13017    4            ELSE KV$SND_DAT.KONCAT = '0'B;
     1051    13018    4         END;
     1052    13019
     1053    13020    4         CALL KVM$FNDSPACE WHENALTRETURN DO;
     1054    13021    4            IF KV$SND_DAT.KONCAT THEN RETURN;
     1055    13022    5            IF KV$SND_DAT.VDOVLP.ERR$=ADDR(NIL) THEN DO;
     1056    13023    5               TXTBYTSIZ = TXTBYTSIZ-SIZEC(E$LD);
     1057    13024    5               VLP_WRDSIZ = VLP_WRDSIZ+SIZEW(E$LD);
     1058    13025    5               IF LST_VLP<3 THEN LST_VLP = 3;
     1059    13026    5            END;
     1060    13027    4            KV$SND_DAT.VDOVLP.ERR$ = ADDR(E$LD);
     1061    13028    4            TXTBYTSIZ = TXTBYTSIZ-SZ*4;
     1062    13029    4            SZ = 0;
     1063    13030    4         END;
     1064    13031    3      END;
     1065    13032
     1066    13033    2      %KV_STT.SND.DATVDOCNT = %KV_STT.SND.DATVDOCNT + 1;
     1067    13034    2      %KV_STT.SND.DATVDOBYTCNT = %KV_STT.SND.DATVDOBYTCNT + MSGWRDSIZ * 2;
     1068    13035    2      %KV_STT.SND.DATVDODATBYTCNT = %KV_STT.SND.DATVDODATBYTCNT + TXTBYTSIZ;
     1069    13036
     1070    13037        /* put KV$VDO_DAT structure in CQ */
     1071    13038
     1072    13039    2      %VDO_DAT = KV_VDO_DAT;
     1073    13040    2      IF TXTBYTSIZ~=0 THEN
     1074    13041    2      %VDO_DAT.VLP = '1'B;
     1075    13042    2      %VDO_DAT.DATCTRCHRTYP = KV$SND_DAT.DATCTRCHRTYP;
     1076    13043    2      %VDO_DAT.DATCTRCHR = KV$SND_DAT.DATCTRCHR;
     1077    13044    2      %VDO_DAT.DATMOD = KV$SND_DAT.DATMOD;
     1078    13045    2      PUT$ = PINCRW(PUT$,SIZEW(KV$VDO_DAT));
     1079    13046
     1080    13047    2      %KV_SSN.SNDMAXNMBBYT = %KV_SSN.SNDMAXNMBBYT - MSGWRDSIZ*2;
     1081    13048    3      IF NOT KONCAT THEN DO;
     1082    13049    3         %KV_STR.SNDMAXNMBRCR = %KV_STR.SNDMAXNMBRCR - 1;
     1083    13050    3         %KV_SSN.REDRSPCNT = %KV_SSN.REDRSPCNT + 1;
     1084    13051    3      END;
     1085    13052    3      IF KV$SND_DAT.ACTPOS~=0 AND TXTBYTSIZ~=0 THEN DO;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:35   
     1086    13053    3         %VDOVLP_ACTPOS = KV_VDOVLP_ACTPOS;
     1087    13054    3         %VDOVLP_ACTPOS.ACTPOS = KV$SND_DAT.ACTPOS;
     1088    13055    3         PUT$ = PINCRW(PUT$,SIZEW(KV$VDOVLP_ACTPOS));
     1089    13056    3      END;
     1090    13057    2      IF TXTBYTSIZ~=0 THEN CALL KVM$SND_PUTDAT;
     1091    13058    2      RETURN;
     1092    13059    2   END KVM$SND_DAT;
     1093    13060
     1094    13061        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:36   
     1095    13062
     1096    13063    1   KVM$SND_DSCSSN: PROC;
     1097    13064    2   DCL COUNTER UBIN(32) ALIGNED BASED;
     1098    13065        /* see if we have space in CQ */
     1099    13066    2      MSGWRDSIZ = SIZEW(KV$VDO_DSC)+SIZEW(KV$VDOVLP_DAT1)+8;
     1100    13067    2      CALL KVM$FNDSPACE;
     1101    13068        /* build the KV$VDO message in the CQ */
     1102    13069    2      %VDO_DSC = KV_VDO_DSC;
     1103    13070    2      PUT$ = PINCRW(PUT$,SIZEW(KV$VDO_DSC));
     1104    13071    2      %VDOVLP_DAT1 = '0'B;
     1105    13072    2      %VDOVLP_DAT1.TYP = %KV_VDOVLP_TYP_DAT1;
     1106    13073    2      %VDOVLP_DAT1.BYTSIZ = 16;
     1107    13074    2      IF (LST_VLP < 0) THEN
     1108    13075    2      %VDOVLP_DAT1.LST = '1'B;
     1109    13076    2      PINCRW(PUT$, SIZEW(%VDOVLP_DAT1)+0)->COUNTER = %KV_SSN.INPCHRCNT;
     1110    13077    2      PINCRW(PUT$, SIZEW(%VDOVLP_DAT1)+2)->COUNTER = %KV_SSN.OTPCHRCNT;
     1111    13078    2      PINCRW(PUT$, SIZEW(%VDOVLP_DAT1)+4)->COUNTER = %KV_SSN.REDRSPCNT;
     1112    13079    2      PINCRW(PUT$, SIZEW(%VDOVLP_DAT1)+6)->COUNTER = %KV_SSN.WRTRQSCNT;
     1113    13080    2      PUT$ = PINCRW(PUT$, SIZEW(%VDOVLP_DAT1)+8);
     1114    13081    2      RETURN;
     1115    13082    2   END KVM$SND_DSCSSN;
     1116    13083        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:37   
     1117    13084        /*I*
     1118    13085            NAME: KVM$SND_EVT
     1119    13086            PURPOSE:
     1120    13087                  event messgae.
     1121    13088            CALL: similar to that of KVM$SND_RQSDAT_GNR.
     1122    13089            DESCRIPTION:
     1123    13090                  call KVM$FNDSPACE to get CQ space.
     1124    13091                  Send a KV$VDO_EVT message.
     1125    13092                  Return.
     1126    13093        */
     1127    13094
     1128    13095    1   KVM$SND_EVT: PROC ;
     1129    13096
     1130    13097        /* see if we have space in CQ */
     1131    13098    2      MSGWRDSIZ = SIZEW(KV_VDO_EVT);
     1132    13099    2      CALL KVM$FNDSPACE;
     1133    13100        /* build the KV$VDO message in the CQ */
     1134    13101    2      %VDO_EVT = KV_VDO_EVT;
     1135    13102    2      %VDO_EVT.TYP = KV$SND_EVT.EVTTYP;
     1136    13103    2      %VDO_EVT.BRKCNT = %KV_SSN.BRKCNT;
     1137    13104    2      PUT$ = PINCRW(PUT$,SIZEW(KV_VDO_EVT));
     1138    13105    2      RETURN;
     1139    13106    2   END KVM$SND_EVT;
     1140    13107        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:38   
     1141    13108        /*I*
     1142    13109            NAME: KVM$SND_OPNSSN
     1143    13110            PURPOSE:
     1144    13111                  open session messgae.
     1145    13112            CALL: similar to that of KVM$SND_RQSDAT_GNR.
     1146    13113            DESCRIPTION:
     1147    13114                  call KVM$FNDSPACE to get CQ space. Look at session context
     1148    13115                  to determine if we are requesting or responding to open
     1149    13116                  session, and then build KV$VDO_OPNSSN with corresponding
     1150    13117                  function code.
     1151    13118        */
     1152    13119
     1153    13120    1   KVM$SND_OPNSSN: PROC ;
     1154    13121
     1155    13122        /* see if we have space in CQ */
     1156    13123    2      MSGWRDSIZ = SIZEW(KV$VDO_OPNSSN);
     1157    13124    2      CALL KVM$FNDSPACE;
     1158    13125        /* build the KV$VDO message in the CQ */
     1159    13126    2      IF %KV_SSN.SND_OPNSSN_RSP THEN
     1160    13127    2      %VDO_OPNSSN = KV_VDO_OPNSSN_RSP;
     1161    13128    2      ELSE
     1162    13129    2      %VDO_OPNSSN = KV_VDO_OPNSSN_RQS;
     1163    13130    2      PUT$ = PINCRW(PUT$,SIZEW(KV$VDO_OPNSSN));
     1164    13131    2      RETURN;
     1165    13132    2   END KVM$SND_OPNSSN;
     1166    13133        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:39   
     1167    13134        /*I*
     1168    13135            NAME: KVM$SND_MRK
     1169    13136            PURPOSE:
     1170    13137                  marker message.
     1171    13138            CALL: similar to that of KVM$SND_RQSDAT_GNR.
     1172    13139            DESCRIPTION:
     1173    13140                  call KVM$FNDSPACE to get CQ space.
     1174    13141                  Send a KV$VDO_MRK message and an appropriate marker VLP.
     1175    13142                  Return.
     1176    13143        */
     1177    13144
     1178    13145    1   KVM$SND_MRK: PROC ;
     1179    13146
     1180    13147        /* see if we have space in CQ */
     1181    13148    2      MSGWRDSIZ = SIZEW(KV_VDO_MRK);
     1182    13149    2      CALL KVM$FNDSPACE;
     1183    13150        /* build the KV$VDO message in the CQ */
     1184    13151    2      %VDO_MRK = KV_VDO_MRK;
     1185    13152    2      PUT$ = PINCRW(PUT$,SIZEW(KV_VDO_MRK));
     1186    13153    3      IF KV$SND_MRK.VDH_MRK$~=ADDR(NIL) THEN DO;
     1187    13154
     1188    13155        /* If this isn't a VDH_MRK call, the marker will be built as a VLP later. */
     1189    13156
     1190    13157        /* NOW BUILD THE APPROPRIATE MARKER VLP */
     1191    13158
     1192    13159    4         DO CASE (KV$VDH_OTPMRK.DAT.TYP);
     1193    13160    4         CASE(%KV_MRKTYP_SNDLSTRCRID );
     1194    13161
     1195    13162        /* This marker is for tracking the last successfully-processed
     1196    13163           record ID (which is probably symbiont deblocker block and
     1197    13164           record number). Send the last record ID we saved.                          */
     1198    13165
     1199    13166    4            %VDOVLP_MRK = KV_VDOVLP_MRK_LSTRCRID;
     1200    13167    4            %VDOVLP_MRK.ID = %KV_SSN.LSTOTPRCRID;
     1201    13168
     1202    13169    4         CASE(%KV_MRKTYP_MRK );
     1203    13170
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:40   
     1204    13171        /* This marker is for marking a point in the data stream,
     1205    13172           possibly all the way from the other end, thru the path,
     1206    13173           and back.                                                                  */
     1207    13174    4            %VDOVLP_MRK = KV_VDOVLP_MRK_MRK;
     1208    13175    4            %VDOVLP_MRK.ID = KV$VDH_OTPMRK.DAT.ID;
     1209    13176
     1210    13177    4         CASE(%KV_MRKTYP_ACK );
     1211    13178
     1212    13179        /* This marker is for verifying that previous data has been
     1213    13180           successfully processed. The other end is waiting for an
     1214    13181           acknowledgement.                                                           */
     1215    13182
     1216    13183    4            %VDOVLP_MRK = KV_VDOVLP_MRK_ENDACK;
     1217    13184    4            %VDOVLP_MRK.ID = KV$VDH_OTPMRK.DAT.ID;
     1218    13185        /*N*          %ERR.COD = KV$VDH_OTPMRK.CMPCOD;  */
     1219    13186    4         END /* CASE */;
     1220    13187    3         IF (LST_VLP < 0) THEN
     1221    13188    3         %VDOVLP_MRK.LST = '1'B;
     1222    13189
     1223    13190    3         PUT$ = PINCRW(PUT$,SIZEW(KV$VDOVLP_MRK));
     1224    13191    3      END;
     1225    13192    2      RETURN;
     1226    13193    2   END KVM$SND_MRK;
     1227    13194        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:41   
     1228    13195
     1229    13196        /*I*
     1230    13197            NAME: KVM$SND_PRM
     1231    13198            PURPOSE: data message.
     1232    13199            CALL: similar to that of KVM$SND_RQSDAT_GNR.
     1233    13200            DESCRIPTION:
     1234    13201                  build the KV$VDOVLP_DAT1 or KV$VDOVLP_DAT2 structure in CQ.
     1235    13202        */
     1236    13203
     1237    13204    1   KVM$SND_PRM: PROC ;
     1238    13205
     1239    13206    2      TXTBYTSIZ = KV$SND_PRM.DAT__.DATBYTSIZ;
     1240    13207    2      IF TXTBYTSIZ < 256 THEN
     1241    13208    2      MSGWRDSIZ = SIZEW(KV$VDOVLP_DAT1);
     1242    13209    2      ELSE
     1243    13210    2      MSGWRDSIZ = SIZEW(KV$VDOVLP_DAT2);
     1244    13211    2      MSGWRDSIZ = MSGWRDSIZ+SIZEW(KV_VDO_PRM_RSP)+(TXTBYTSIZ+1)/2;
     1245    13212    2      IF VLP_WRDSIZ=0 THEN SLACK_BYT = MOD(TXTBYTSIZ,2);
     1246    13213
     1247    13214    2      CALL KVM$FNDSPACE;
     1248    13215
     1249    13216        /* put KV$VDO_PRM structure in CQ */
     1250    13217
     1251    13218    2      %VDO_PRM = KV_VDO_PRM_RSP;
     1252    13219    2      PUT$ = PINCRW (PUT$, SIZEW(KV_VDO_PRM_RSP));
     1253    13220
     1254    13221        /* put KV$VDOVLP_PRM structure in CQ */
     1255    13222
     1256    13223    2   KVM$SND_PUTDAT: ENTRY;
     1257    13224    3      IF TXTBYTSIZ < 256 THEN DO;
     1258    13225    3         %VDOVLP_DAT1 = KV_VDOVLP_DAT1;
     1259    13226    3         IF LST_VLP < 0 THEN
     1260    13227    3         %VDOVLP_DAT1.LST = '1'B;
     1261    13228    3         %VDOVLP_DAT1.BYTSIZ = TXTBYTSIZ;
     1262    13229    3         PUT$ = PINCRW(PUT$, SIZEW(KV$VDOVLP_DAT1));
     1263    13230    3      END; ELSE DO;
     1264    13231    3         %VDOVLP_DAT2 = KV_VDOVLP_DAT2;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:42   
     1265    13232    3         IF LST_VLP < 0 THEN
     1266    13233    3         %VDOVLP_DAT2.LST = '1'B;
     1267    13234    3         %VDOVLP_DAT2.BYTSIZ = TXTBYTSIZ;
     1268    13235    3         PUT$ = PINCRW(PUT$, SIZEW(KV$VDOVLP_DAT2));
     1269    13236    3      END;
     1270    13237
     1271    13238        /* put actual data in CQ */
     1272    13239
     1273    13240    2      PUT$->DATTXT = SUBSTR(KV$SND_DAT.DAT__.ADR$->DMYTXT,
     1274    13241    2        KV$SND_DAT.DAT__.BYTX,TXTBYTSIZ);
     1275    13242    2      PUT$ = PINCRW(Y@VDO$,MSGWRDSIZ-VLP_WRDSIZ);
     1276    13243
     1277    13244        /* that's all */
     1278    13245
     1279    13246    2      RETURN;
     1280    13247    2   END KVM$SND_PRM;
     1281    13248
     1282    13249        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:43   
     1283    13250        /*I*
     1284    13251            NAME: KVM$SND_RQSDAT_GNR
     1285    13252            PURPOSE:
     1286    13253                  request data message.
     1287    13254            CALL: After knowing it is RQSDAT in the DO CASE(KV$SND.FNC),
     1288    13255                  CALL KVM$SND_RQSDAT_GNR.
     1289    13256            DESCRIPTION:
     1290    13257                  Check if it is valid to send this message now. If so
     1291    13258                  build the KV$VDO_RQSDAT message in the CQ.
     1292    13259        */
     1293    13260
     1294    13261    1   KVM$SND_RQSDAT_GNR: PROC ;
     1295    13262
     1296    13263        %INCLUDE KH$CLK;
     1297    13633        %INCLUDE KH_CLKFNC_E;
     1298    13678        %KH$CLK (FPTN=KV_CLK_CANCEL, STCLASS=SYMREF);
     1299    13827        %KH$CLK;
     1300    13976        %EQU KH@CLK=CHARTEXT('ADDR(KV@VDH_GETBFR)->KH$CLK');
     1301    13977        %KV_CLKNMB_E;
     1302    13986
     1303    13987    2   DCL KHC$CLOCK ENTRY(1) ALTRET;
     1304    13988
     1305    13989        /* see if we have space in CQ */
     1306    13990    2      MSGWRDSIZ = SIZEW(KV_VDO_RQSDAT_GNR);
     1307    13991    2      CALL KVM$FNDSPACE;
     1308    13992        /* build the KV$VDO message in the CQ */
     1309    13993    2      %VDO_RQSDAT_GNR = KV_VDO_RQSDAT_GNR;
     1310    13994        /* set .MAXRCRBYTSIZ and .MAXNMBRCR to some high value */
     1311    13995    2      IF NOT %KV_SSN.OUTPUTDISCARD AND NOT %KV_VDI.HALFDUPLEXPAPERTAPE
     1312    13996    2      THEN %VDO_RQSDAT_GNR.MAXRCRBYTSIZ =
     1313    13997    2        KNH$QHDR.RCQ.SZ*4-2*SIZEC(KNH_MESS) /* Room for the NOP mess too         */
     1314    13998    2        -SIZEC(KV$VDO_DAT)-SIZEC(KV$VDOVLP_DAT2)-258; /* Room for a key too      */
     1315    13999    2      IF %KV_SSN.NO_WATREDTRG THEN
     1316    14000
     1317    14001        /* We're trying to start a no-wait read.  Shut down the other end. */
     1318    14002
     1319    14003    2      ;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:44   
     1320    14004    2      ELSE
     1321    14005    2      IF NOT %KV_VDI.RQSOTP THEN
     1322    14006
     1323    14007        /* We're trying to shut down a multiple session instance. */
     1324    14008
     1325    14009    2      ;
     1326    14010    2      ELSE
     1327    14011    2      IF %KV_SSN.OTPBLK THEN
     1328    14012    3      DO;
     1329    14013    3         %KV_SSN.OTPBLK = '0'B;
     1330    14014    3         IF (%KV_SSN.RCVFLWCTRTMPMAXCRD ~= 0) THEN
     1331    14015    4         DO;
     1332    14016    4            %VDO_RQSDAT_GNR.MAXNMBBYT = %KV_SSN.RCVFLWCTRTMPMAXCRD;
     1333    14017    4            %KV_SSN.RCVFLWCTRTMPMAXCRD = 0;
     1334    14018    4         END;
     1335    14019    3         ELSE
     1336    14020    4         DO;
     1337    14021    4            %VDO_RQSDAT_GNR.MAXNMBBYT = %KV_VDI.RCVFLWCTRMAXCRD;
     1338    14022    4         END;
     1339    14023    3         %KV_SSN.RCVFLWCTRCRDINC = 0;
     1340    14024    3         IF %KV_SSN.CLKSET(%KV_CLKNMB_REDTIMOUT) AND NOT %KV_SSN.REDRQSPND THEN
     1341    14025    4         DO;
     1342    14026        /* Cancel the read timeout clock - it was set when we blocked. */
     1343    14027    4            %KV_SSN.CLKSET(%KV_CLKNMB_REDTIMOUT) = '0'B;
     1344    14028    4            %KH@CLK = KV_CLK_CANCEL;
     1345    14029    4            %KH@CLK.UID$ = ADDR(%KV_SSN);
     1346    14030    4            %KH@CLK.UVAL = %KV_CLKNMB_REDTIMOUT;
     1347    14031    4            CALL KHC$CLOCK (%KH@CLK);
     1348    14032    4         END;
     1349    14033    3      END;
     1350    14034    2      ELSE
     1351    14035    3      DO;
     1352    14036    3         %VDO_RQSDAT_GNR.MAXNMBBYT = %KV_SSN.RCVFLWCTRCRDINC;
     1353    14037    3         %VDO_RQSDAT_GNR.INCMAXNMBBYT = '1'B;
     1354    14038    3         %VDO_RQSDAT_GNR.INCMAXNMBRCR = '1'B;
     1355    14039    3         %KV_SSN.RCVFLWCTRCRDINC = 0;
     1356    14040    3      END;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:45   
     1357    14041    2      %VDO_RQSDAT_GNR.MAXNMBRCR = %VDO_RQSDAT_GNR.MAXNMBBYT/20;
     1358    14042    2      PUT$ = PINCRW(PUT$,SIZEW(KV$VDO_RQSDAT));
     1359    14043    2      RETURN;
     1360    14044    2   END KVM$SND_RQSDAT_GNR;
     1361    14045
     1362    14046        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:46   
     1363    14047        /*I*
     1364    14048            NAME: KVM$SND_RQSMRK
     1365    14049            PURPOSE:
     1366    14050                  request marker.
     1367    14051            CALL: similar to that of KVM$SND_RQSDAT_GNR.
     1368    14052            DESCRIPTION:
     1369    14053                  call KVM$FNDSPACE to get CQ space. Send KV$VDO_RQSMRK
     1370    14054                  message.
     1371    14055                  Return.
     1372    14056        */
     1373    14057
     1374    14058    1   KVM$SND_RQSMRK: PROC ;
     1375    14059
     1376    14060        /* see if we have space in CQ */
     1377    14061    2      MSGWRDSIZ = SIZEW(KV_VDO_RQSMRK);
     1378    14062    2      CALL KVM$FNDSPACE;
     1379    14063        /* build the KV$VDO message in the CQ */
     1380    14064    2      %VDO_RQSMRK = KV_VDO_RQSMRK;
     1381    14065    2      PUT$ = PINCRW(PUT$,SIZEW(KV$VDO_RQSMRK));
     1382    14066    2      RETURN;
     1383    14067    2   END KVM$SND_RQSMRK;
     1384    14068        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:47   
     1385    14069        /*I*
     1386    14070            NAME: KVM$SND_RQSSTT
     1387    14071            PURPOSE:
     1388    14072                  request status messgae.
     1389    14073            CALL: similar to that of KVM$SND_RQSDAT_GNR.
     1390    14074            DESCRIPTION:
     1391    14075                  call KVM$FNDSPACE to get CQ space. Send KV$VDO_RQSSTT
     1392    14076                  message. Reset STTRQSENB in session context.
     1393    14077                  Return.
     1394    14078        */
     1395    14079
     1396    14080    1   KVM$SND_RQSSTT: PROC ;
     1397    14081
     1398    14082        /* see if we have space in CQ */
     1399    14083    2      MSGWRDSIZ = SIZEW(KV_VDO_RQSSTT);
     1400    14084    2      CALL KVM$FNDSPACE;
     1401    14085        /* build the KV$VDO message in the CQ */
     1402    14086    2      %VDO_RQSSTT = KV_VDO_RQSSTT;
     1403    14087    2      PUT$ = PINCRW(PUT$,SIZEW(KV$VDO_RQSSTT));
     1404    14088    2      %KV_SSN.STTRQSENB = '0'B;
     1405    14089    2      RETURN;
     1406    14090    2   END KVM$SND_RQSSTT;
     1407    14091        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:48   
     1408    14092        /*I*
     1409    14093             NAME: KVM$SND_SCHLCLSSN
     1410    14094             PURPOSE:
     1411    14095                  Wakeup message
     1412    14096             DESCRIPTION:
     1413    14097                            loops a null message to wake up base level for
     1414    14098                            this Session.
     1415    14099          */
     1416    14100
     1417    14101    1   KVM$SND_SCHLCLSSN: PROC ;
     1418    14102
     1419    14103    2      MSGWRDSIZ = 0;
     1420    14104    2      CALL KVM$FNDSPACE;
     1421    14105
     1422    14106    2      %MESS.FUNCTION=%KN_FCN_LOOP;
     1423    14107    2      RETURN;
     1424    14108
     1425    14109    2   END KVM$SND_SCHLCLSSN;
     1426    14110        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:49   
     1427    14111        /*N*
     1428    14112                dummy procedures
     1429    14113        */
     1430    14114
     1431    14115    1   KVM$SND_STT: PROC;
     1432    14116    2      RETURN;
     1433    14117    2   END KVM$SND_STT;
     1434    14118        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:50   
     1435    14119
     1436    14120        /*I*
     1437    14121            NAME: Y$RLSBFR
     1438    14122            PURPOSE:
     1439    14123                  After putting the KV$SND_DAT/PRM message in CQ, look
     1440    14124                  at the BFRRLSDSP bit ( byte ) to determin whether the
     1441    14125                  message buffer should be released.
     1442    14126             CALL: CALL Y$RLSBFR ( vdh-buffer-descriptor )
     1443    14127                  There is no altreturn.
     1444    14128            PARAMETERS:
     1445    14129                  vdh-buffer-descriptor.
     1446    14130            DESCRIPTION:
     1447    14131                  If BFRRLSDSP byte says to release, call KVS$RLSBFR
     1448    14132                  with the KV$VDH_RLSBFR structure.
     1449    14133        */
     1450    14134
     1451    14135    1   Y$RLSBFR: PROC (Y@BFRDSC__);
     1452    14136
     1453    14137        %KV$BFRDSC (NAME=Y@BFRDSC__, STCLASS=PARAM);
     1454    14164
     1455    14165        /* should we release this buffer ?  */
     1456    14166
     1457    14167    2      IF (Y@BFRDSC__.BFRRLSDSP ~= %KV_BFRRLSDSP_MSG) THEN RETURN;
     1458    14168
     1459    14169    2      KV@VDH_RLSBFR = KV_VDH_RLSBFR;
     1460    14170    2      KV@VDH_RLSBFR.BFR$ = Y@BFRDSC__.ADR$;
     1461    14171    2      KV@VDH_RLSBFR.BYTSIZ = Y@BFRDSC__.BFRBYTSIZ;
     1462    14172    2      KV@VDH_RLSBFR.STRTYP = Y@BFRDSC__.STRTYP;
     1463    14173    2      CALL KVS$RLSBFR (KV@VDH_RLSBFR);
     1464    14174    2      RETURN;
     1465    14175    2   END Y$RLSBFR;
     1466    14176        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:51   
     1467    14177
     1468    14178        %KV$BOX(PAGE = YES, TITLE = "Do VDH tracing");

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:52   
             14196    2   /***************************************************************************
             14197    2    *                                                                         *
             14198    2    *                               Do VDH tracing                            *
             14199    2    *                                                                         *
             14200    2    ***************************************************************************/

     1469    14205    1   Y$TRC: PROC;
     1470    14206    3      IF Y@TRCENT = (Y$TRCBFR.TRCENT(Y$TRCBFR.TRCENTX) & %KV#TRCENT_MSK) THEN DO;
     1471    14207        /*
     1472    14208        The last trace entry is identical to the entry we're about
     1473    14209        to put in, with the possible exception of the multiple
     1474    14210        entry bit.  Just set the multiple entry bit, and don't add
     1475    14211        another entry.
     1476    14212        */
     1477    14213    3         Y$TRCBFR.TRCENT.MLT(Y$TRCBFR.TRCENTX) = '1'B;
     1478    14214    3      END; ELSE DO;
     1479    14215        /*
     1480    14216        The last entry isn't identical to the entry we're about to
     1481    14217        add.  Add another entry, possibly wrapping the index first.
     1482    14218        */
     1483    14219    3         Y$TRCBFR.TRCENTX = Y$TRCBFR.TRCENTX + 1;
     1484    14220    3         IF Y$TRCBFR.TRCENTX > Y$TRCBFR.MAXTRCENTX THEN
     1485    14221    3         Y$TRCBFR.TRCENTX = 0;
     1486    14222
     1487    14223    3         Y$TRCBFR.TRCENT(Y$TRCBFR.TRCENTX) = Y@TRCENT;
     1488    14224    3      END;                                 /* END ELSE IF TRCENTX = MAXTRCENTX   */
     1489    14225    2   END Y$TRC;
     1490    14226    1   END KVM$SND;

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:53   
--  Include file information  --

   KH_CLKFNC_E.:E05TOU  is referenced.
   KH$CLK.:E05TOU  is referenced.
   KV_SCODE_C.:E05TOU  is referenced.
   KV_GLB.:E05TOU  is referenced.
   KNH_MACRO_C.:E05TOU  is referenced.
   KV_INT_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   K_CP6_M.:E05TOU  is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KV_PRMID_E.:E05TOU  was found in the system file and is never referenced.
   KV_GLBCNS_E.:E05TOU  was found in the system file and is referenced.
   KV$VDO.:E05TOU  was found in the system file and is referenced.
   KV$VDH.:E05TOU  was found in the system file and is referenced.
   KV$USR.:E05TOU  was found in the system file and is never referenced.
   KV$SND.:E05TOU  was found in the system file and is referenced.
   KV$INT.:E05TOU  was found in the system file and is referenced.
   KV$GLBCTX.:E05TOU  was found in the system file and is referenced.
   KV$GLB.:E05TOU  was found in the system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KVM$SND.

   Procedure KVM$SND requires 2940 words for executable code.
   Procedure KVM$SND requires 68 words of local(AUTO) storage.
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:54   

    No errors detected in file KVM$SND.:E05TSI    .

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:55   

 Object Unit name= KVM$SND                                    File name= KVM$SND.:E05TOU
 UTS= JUL 30 '97 02:05:39.00 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0  RoData even  UTS    371    173  KVM$SND
    1   Data  even  none    17     11  KVM$SND
    2   Proc  even  none  2940    B7C  KVM$SND
    3  RoData even  none     2      2  KVM$SND

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        1  KVM$SND
     2    28E          yes     yes      Std        0  KVM$FLUSHCQ
     2    2B8          yes     yes      Std        1  KVM$SNDCQ
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:56   

  ****  Data defs  ****

 Sect HexLoc  Name                           Sect HexLoc  Name
    0      0  KV_SND_CLSSSN                      0     10  KV_SND_CMPDSCSSN
    0     1F  KV_SND_CNC                         0     41  KV_SND_DAT
    0     58  KV_SND_DSCSSN                      0     67  KV_SND_EVT_BRK
    0     77  KV_SND_EVT_MNTATN                  0     87  KV_SND_MRK
    0     98  KV_SND_OPNSSN                      0     A7  KV_SND_PRM
    0     BD  KV_SND_RQSDAT_GNR                  0     CC  KV_SND_RQSMRK_DLTRCVRQS
    0     DB  KV_SND_RQSMRK_DLTRCVDAT            0     EA  KV_SND_RQSSTT
    0     F9  KV_SND_STT                         0    108  KV_SND_SCHLCLSSN
    1      0  KVM_SND_BADFNC                     1      4  KV_FPT_WRTMLT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 KHI$ENABLE
         yes           Std       1 KHI$DISABLE
 yes     yes           Std       1 KVS$RLSBFR
 yes     yes           Std       1 KVS$GETBFR
         yes           Std       1 KHD$SCREECH
 yes     yes           Std       1 KHC$CLOCK
                       nStd      0 X6A_AUTO_1
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KH_INHLVL                             KV$PTR$                          r    G$HAND_Q$
     KV_CQ_HNDSBR$                         KV_SNDCQ_QHDR$                   r    KV_VDH_GETBFR
r    KV_VDH_RLSBFR                         KV_CLK_CANCEL                    r    G$ROS$
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:57   


        1        1        /*M* KVM$SND  VDH Message send routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* NSO,PLM=3,SQB=Y,AND=Y,ENI=0,SDI=3,MCL=10,CSI=0,ECI=0,IAD=3,IND=0 */
        8        8        /*P*
        9        9            NAME: KVM$SND
       10       10            PURPOSE:
       11       11                  To put VDH messages into the monitor circular queue (CQ).
       12       12            REFERENCE:
       13       13                  "Handler Monitor Interface User's Guide"   AF 0784 A-0
       14       14        */
       15       15        /*D*
       16       16            NAME: KVM$SND
       17       17            CALL: CALL KVM$SND(KV$SND_x)
       18       18                  Altreturns if no message was sent, perhaps because an
       19       19                  invalid request was made.
       20       20                  If can't find space at all to put
       21       21                  the message, it will screech.
       22       22            PARAMETERS:
       23       23                  Any one of the KV$SND_x structures.
       24       24            INTERFACE:
       25       25                  It calls KVS$GETBFR and KVS$RLSBFR to get and release
       26       26                  buffer for CQ extensions.
       27       27            DESCRIPTION:
       28       28                  Looks at input and determines which message to build.
       29       29                  Each internal message-building routine calls KVM$FNDSPACE
       30       30                  to get CQ space.  On return, it puts the appropriate
       31       31                  message (usually a KV$VDO) in the space pointed to by
       32       32                  the insert pointer (IPTR) of the CQ.
       33       33                  If there is no space in the monitor CQ, KVM$FNDSPACE
       34       34                  will try to get VDH buffer to make a CQ extension. If
       35       35                  that also fails, we will screech thru KVS$GETBFR.
       36       36                  Blocking of data messages going to the same destination
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:58   
       37       37                  is done to save overhead.
       38       38        */
       39       39        KVM$SND: PROC(KV$SND_X) ALTRET;

     39   2 000000  D380 0000 0000  xent KVM$SND         LNJ,B5   X6A_AUTO_1
          2 000003       0044 0001                       DC       68,1

       40       40        /*
       41       41        INCLUDE files, constants, based structures,
       42       42        and static data contained elsewhere.
       43       43        */
       44       44
       45       45        %INCLUDE LCP_6;
       46      236        %INCLUDE F_ERRORS_C;
       47      476        %INCLUDE K_CP6_M;
       48      672        %INCLUDE KL_AFCN_C;
       49      773        %INCLUDE KL_MACRO_C;
       50     4125
       51     4126        %INCLUDE K_ID_E;
       52     4176        %K#LYRID_E;
       53     4183        %K#ENTID_E;
       54     4202
       55     4203
       56     4204    1   DCL KH_INHLVL UBIN SYMREF;
       57     4205        %INCLUDE KV_INT_M;
       58     4348 S      %INCLUDE KV_GLBCNS_E;
       59     4349        %KV#CQ_HNDID_E;
       60     4354        %KV_USR_EVT_ID_E;
       61     4374        %KV_VDH_EVT_ID_E;
       62     4380        %KV_VDH_FNC_E;
       63     4400        %KV_STRTYP_E;
       64     4438        %KV_MRKTYP_E;
       65     4446        %KV_BFRRLSDSP_E;
       66     4452        %KV#TRCENT_TYP_E;
       67     4462
       68     4463 S      %INCLUDE KV$GLB;
       69     4464 S      %INCLUDE KV$GLBCTX;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:59   
       70     4465        %KV$PTR;
       71     4508        %KV$SSN (STCLASS="BASED(Y@SSN$)");
       72     4587        %EQU KV_SSN=CHARTEXT('KV$SSN');
       73     4588        %KV$STT (STCLASS="BASED(Y@STT$)");
       74     4982        %EQU KV_STT=CHARTEXT('KV$STT');
       75     4983        %KV$USRPRM;
       76     5034        %KV$VDI (STCLASS="BASED(PUT$)");
       77     5105        %EQU KV_VDI = CHARTEXT('KV$SSN.VDI$->KV$VDI');
       78     5106        %KV$STR;
       79     5193 S      %INCLUDE KV$INT;
       80     5194 S      %INCLUDE KV$VDH;
       81     5195        %KV$VDH_OTPMRK(STCLASS="BASED(KV$SND_MRK.VDH_MRK$)");
       82     5257
       83     5258 S      %INCLUDE KV$SND;
       84     5259        %KV_SND_FNC_E;
       85     5275
       86     5276 S      %INCLUDE KV$VDO;
       87     5277        %KV_VDO_ALL;
       88     7420
       89     7421        /*
       90     7422        static copies of KV$SND structure
       91     7423        */
       92     7424        %KV$SND_CLSSSN (NAME = KV_SND_CLSSSN, STCLASS = CONSTANT SYMDEF);
       93     7480        %KV$SND_CMPDSCSSN (NAME = KV_SND_CMPDSCSSN, STCLASS = CONSTANT SYMDEF);
       94     7535        %KV$SND_CNC (NAME = KV_SND_CNC, STCLASS = CONSTANT SYMDEF);
       95     7623        %KV$SND_DAT (NAME = KV_SND_DAT, STCLASS = CONSTANT SYMDEF);
       96     7742        %KV$SND_DSCSSN (NAME = KV_SND_DSCSSN, STCLASS = CONSTANT SYMDEF);
       97     7797        %KV$SND_EVT (NAME = KV_SND_EVT_BRK, STCLASS = CONSTANT SYMDEF,
       98     7798         EVTTYP = KV_EVTTYP_BRK, RQSMRK_DLTRCVRQS = YES);
       99     7889        %KV$SND_EVT (NAME = KV_SND_EVT_MNTATN, STCLASS = CONSTANT SYMDEF,
      100     7890         EVTTYP = KV_EVTTYP_MNTATN, RQSMRK_DLTRCVRQS = YES);
      101     7981        %KV$SND_MRK (NAME = KV_SND_MRK, STCLASS = CONSTANT SYMDEF);
      102     8037        %KV$SND_OPNSSN (NAME = KV_SND_OPNSSN, STCLASS = CONSTANT SYMDEF);
      103     8092        %KV$SND_PRM (NAME = KV_SND_PRM, STCLASS = CONSTANT SYMDEF);
      104     8177        %KV$SND_RQSDAT_GNR (NAME = KV_SND_RQSDAT_GNR, STCLASS = CONSTANT SYMDEF);
      105     8232        %KV$SND_RQSMRK (NAME=KV_SND_RQSMRK_DLTRCVRQS, RQSMRK_DLTRCVRQS=YES,
      106     8233         STCLASS=CONSTANT SYMDEF);
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:60   
      107     8289        %KV$SND_RQSMRK (NAME=KV_SND_RQSMRK_DLTRCVDAT, RQSMRK_DLTRCVDAT=YES,
      108     8290         STCLASS=CONSTANT SYMDEF);
      109     8346        %KV$SND_RQSSTT (NAME = KV_SND_RQSSTT, STCLASS = CONSTANT SYMDEF);
      110     8401        %KV$SND_STT (NAME = KV_SND_STT, STCLASS = CONSTANT SYMDEF);
      111     8456        %KV$SND_SCHLCLSSN (NAME = KV_SND_SCHLCLSSN, STCLASS = CONSTANT SYMDEF);
      112     8511        /*
      113     8512        dummy parameter is declared variable size so that
      114     8513        actual KV$SND_ structures can be redef'ed after it
      115     8514        */
      116     8515    1   DCL KV$SND_X CHAR(KV$COPY);
      117     8516    1   DCL KV$COPY REDEF KV$SND_X UBIN;
      118     8517        %KV$SND(STCLASS=REDEF KV$SND_X);
      119     8550        %KV$SND_RQSDAT_GNR(STCLASS=REDEF KV$SND_X);
      120     8605        %KV$SND_CNC(STCLASS=REDEF KV$SND_X);
      121     8693        %KV$SND_DAT(STCLASS=REDEF KV$SND_X);
      122     8812        %KV$SND_CMPDSCSSN(STCLASS=REDEF KV$SND_X);
      123     8867        %KV$SND_CLSSSN(STCLASS=REDEF KV$SND_X);
      124     8923        %KV$SND_EVT(STCLASS=REDEF KV$SND_X);
      125     9014        %KV$SND_OPNSSN(STCLASS=REDEF KV$SND_X);
      126     9069        %KV$SND_RQSSTT(STCLASS=REDEF KV$SND_X);
      127     9124        %KV$SND_DSCSSN(STCLASS=REDEF KV$SND_X);
      128     9179        %KV$SND_MRK(STCLASS=REDEF KV$SND_X);
      129     9235        %KV$SND_PRM(STCLASS=REDEF KV$SND_X);
      130     9320        %KV$SND_STT(STCLASS=REDEF KV$SND_X);
      131     9375        %KV$SND_RQSMRK(STCLASS=REDEF KV$SND_X);
      132     9431
      133     9432        %KV$SNDCQ(STCLASS=REDEF KV$SND_X);      /* used by X.25                       */
      134     9614
      135     9615
      136     9616        %INCLUDE KNH_MACRO_C;
      137     9899        %KNH$MESS(FPTN=KNH_MESS,
      138     9900         FUNCTION=%KN_FCN_DATA,
      139     9901         STCLASS=CONSTANT);
      140     9950        %KNH$MESS(FPTN=KNH$MESS,
      141     9951         STCLASS="BASED");
      142    10000        %FPT_CONNECT(STCLASS=CONSTANT,
      143    10001         TYPE=SESSION);
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:61   
      144    10070        %FPT_CONNECT(FPTN=FPT$CONNECT,STCLASS="BASED");
      145    10139        %FPT_CONNECT_ACK(STCLASS=CONSTANT,
      146    10140         REASON=0);
      147    10189        %FPT_CONNECT_ACK(FPTN=FPT$CONNECT_ACK,STCLASS="BASED");
      148    10238        %FPT_TERM_ACK(STCLASS="CONSTANT");
      149    10260        %FPT_TERM_ACK(FPTN=FPT$TERM_ACK,STCLASS="BASED");
      150    10282
      151    10283    1   DCL G$HAND_Q$ PTR SYMREF READONLY;
      152    10284        %INCLUDE KV_GLB;
      153    10307        %KV_CQ;                       /* Circular queue static items declarations.    */
      154    10323        %KNH$QHDR (STCLASS="BASED(KV_SNDCQ_QHDR$)");
      155    10336
      156    10337    1   DCL KVM_SND_BADFNC UBIN STATIC SYMDEF INIT(0); /* count of bad FPTs rcv'd     */
      157    10338        /*
      158    10339        Since .IPTR is a double word offset, I need to keep track of
      159    10340        whether there was a slack word at the end of the last message.
      160    10341        This slack word is to be used up when concatenating messages.
      161    10342        */
      162    10343    1   DCL KVM_SND_SCQ_SLKWRD UBIN STATIC INIT(0);
      163    10344    1   DCL KVM_SND_PRV$ PTR STATIC INIT(ADDR(KVM_SND_PRV$));
      164    10345
      165    10346
      166    10347        %KV$VDH_GETBFR(NAME=KV_VDH_GETBFR,STCLASS=SYMREF READONLY);
      167    10412        %KV$VDH_RLSBFR(NAME=KV_VDH_RLSBFR,STCLASS=SYMREF READONLY);
      168    10448
      169    10449        %INCLUDE KV_SCODE_C;
      170    10470        %VLP_SCODE (FPTN=KVM_BADLDCT,STCLASS=CONSTANT,FCG=KV,MID=M,ERR#=%S$KV_BADLDCT);
      171    10531
      172    10532    1   DCL KHD$SCREECH ENTRY(1);
      173    10533    1   DCL KHI$DISABLE ENTRY(1);
      174    10534    1   DCL KHI$ENABLE ENTRY;
      175    10535    1   DCL KVS$GETBFR ENTRY(1) ALTRET;
      176    10536    1   DCL KVS$RLSBFR ENTRY(1) ALTRET;
      177    10537
      178    10538        %KV$VDO_RQSDAT(NAME=KV_VDO_RQSDAT_GNR,STCLASS=CONSTANT);
      179    10586        %KV$VDO_DAT(NAME=KV_VDO_DAT,STCLASS=CONSTANT,FNC=KV_VDO_FNC_DAT);
      180    10631        %KV$VDO_CLSSSN(NAME=KV_VDO_CLSSSN_RQS,STCLASS=CONSTANT,
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:62   
      181    10632         FNC=KV_VDO_FNC_CLSSSN_RQS);
      182    10674        %KV$VDO_CLSSSN(NAME=KV_VDO_CLSSSN_RSP,STCLASS=CONSTANT,
      183    10675         FNC=KV_VDO_FNC_CLSSSN_RSP);
      184    10717        %KV$VDO_DSC(NAME=KV_VDO_DSC,STCLASS=CONSTANT, VLP=YES,
      185    10718         FNC=KV_VDO_FNC_DSC_RQS);
      186    10760        %KV$VDO_EVT(NAME=KV_VDO_EVT,STCLASS=CONSTANT);
      187    10802        %KV$VDO_MRK(NAME=KV_VDO_MRK,STCLASS=CONSTANT);
      188    10843        %KV$VDO_OPNSSN(NAME=KV_VDO_OPNSSN_RQS,STCLASS=CONSTANT,
      189    10844         FNC=KV_VDO_FNC_OPNSSN_RQS);
      190    10886        %KV$VDO_OPNSSN(NAME=KV_VDO_OPNSSN_RSP,STCLASS=CONSTANT,
      191    10887         FNC=KV_VDO_FNC_OPNSSN_RSP);
      192    10929        %KV$VDO_RQSSTT(NAME=KV_VDO_RQSSTT,STCLASS=CONSTANT);
      193    10970        %KV$VDO_RQSMRK(NAME=KV_VDO_RQSMRK,STCLASS=CONSTANT);
      194    11011        %KV$VDO_PRM(NAME=KV_VDO_PRM_RSP,VLP=YES,STCLASS=CONSTANT,
      195    11012         FNC=KV_VDO_FNC_PRM_RSP);
      196    11053        %KV$VDO_PRM(NAME=KV_VDO_PRM_SET,STCLASS=CONSTANT,
      197    11054         FNC=KV_VDO_FNC_PRM_SET);
      198    11095        %KV$VDOVLP_CG_MSGID(NAME=KV_VDOVLP_CG_MSGID);
      199    11147        %KV$VDOVLP_CG_MSGTYP(NAME=KV_VDOVLP_CG_MSGTYP);
      200    11199        %KV$VDOVLP_CG_STA(NAME=KV_VDOVLP_CG_STA);
      201    11250        %KV$VDOVLP_ERR(NAME=KV_VDOVLP_ERR);
      202    11347        %KV$VDOVLP_FLDID(NAME=KV_VDOVLP_FLDID);
      203    11398        %KV$VDOVLP_KEY(NAME=KV_VDOVLP_KEY,LAST=",");
      204    11448    1      2 DAT CHAR(KV_VDOVLP_KEY.BYTSIZ) CALIGNED;
      205    11449        %KV$VDOVLP_MRK(NAME=KV_VDOVLP_MRK);
      206    11502
      207    11503        /*
      208    11504        constant versions of VDOVLPs for initialization
      209    11505        */
      210    11506
      211    11507        %KV$VDOVLP_MRK(NAME=KV_VDOVLP_MRK_MRK,STCLASS=CONSTANT,
      212    11508         MRKTYP=%KV_VDOMRKTYP_MRK,RSP=YES);
      213    11561        %KV$VDOVLP_MRK(NAME=KV_VDOVLP_MRK_LSTRCRID,STCLASS=CONSTANT,
      214    11562         MRKTYP=%KV_VDOMRKTYP_LSTRCRID,RSP=YES);
      215    11615        %KV$VDOVLP_MRK(NAME=KV_VDOVLP_MRK_ENDACK,STCLASS=CONSTANT,
      216    11616         MRKTYP=%KV_VDOMRKTYP_ENDACK,RSP=YES);
      217    11669
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:63   
      218    11670        %KV$VDOVLP_ACTPOS(NAME=KV_VDOVLP_ACTPOS,STCLASS=CONSTANT);
      219    11721        %KV$VDOVLP_DAT1(NAME=KV_VDOVLP_DAT1,STCLASS=CONSTANT);
      220    11771        %KV$VDOVLP_DAT2(NAME=KV_VDOVLP_DAT2,STCLASS=CONSTANT);
      221    11821
      222    11822
      223    11823    1   DCL PUT$ PTR;
      224    11824    1   DCL Y@SSN$ PTR;
      225    11825    1   DCL Y@KNH$ PTR;
      226    11826    1   DCL Y@STT$ PTR;
      227    11827    1   DCL SZ UBIN;
      228    11828    1   DCL MSGWRDSIZ UBIN;
      229    11829    1   DCL INHLVL UBIN;
      230    11830    1   DCL KONCAT BIT(1);
      231    11831    1   DCL NOT_X25 BIT(1);           /* Flag to indicate if we were called by X.25   */
      232    11832
      233    11833        /* used for VLP's */
      234    11834
      235    11835    1   DCL LOOP_CNT UBIN;
      236    11836    1   DCL VLP_WRDSIZ UBIN;
      237    11837    1   DCL LST_VLP SBIN;
      238    11838    1   DCL SLACK_BYT UBIN;
      239    11839    1   DCL VDOVLP_BYTLNG_ARY(0:6) UBIN CONSTANT INIT(
      240    11840    1    LENGTHC(KV$VDOVLP_CG_MSGID),
      241    11841    1    LENGTHC(KV$VDOVLP_CG_MSGTYP),
      242    11842    1    LENGTHC(KV$VDOVLP_CG_STA),
      243    11843    1    LENGTHC(KV$VDOVLP_ERR),
      244    11844    1    LENGTHC(KV$VDOVLP_FLDID),
      245    11845    1    LENGTHC(KV$VDOVLP_KEY),
      246    11846    1    LENGTHC(KV$VDOVLP_MRK));
      247    11847
      248    11848        /* used for connect message only */
      249    11849
      250    11850    1   DCL LGN_STRING CHAR(TXTBYTSIZ) BASED CALIGNED;
      251    11851
      252    11852        /* used for data messages (KV$VDO_DAT & KV$VDO_PRM_...) only */
      253    11853
      254    11854    1   DCL TXTBYTSIZ UBIN;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:64   
      255    11855    1   DCL DATTXT CHAR(TXTBYTSIZ) BASED ALIGNED;
      256    11856    1   DCL DMYTXT CHAR(TXTBYTSIZ) ALIGNED BASED;
      257    11857
      258    11858        /*
      259    11859           A constant array of bits to indicate whether any VDO's
      260    11860           are to be generated by this call. The array is indexed
      261    11861           by the KV_SND_FNC_? function code, and so must be aligned
      262    11862           with the equates in KV$SND.
      263    11863        */
      264    11864    1   DCL Y_VDO_YES(0:15) CONSTANT BIT(1) INIT('0'B,'1'B,'0'B*2,'1'B*10,'0'B*2);
      265    11865    1   DCL Y@VDO$ PTR;
      266    11866        %KV$VDH_GETBFR(NAME=KV@VDH_GETBFR,STCLASS=AUTO);
      267    11931        %KV$VDH_RLSBFR(NAME=KV@VDH_RLSBFR,STCLASS=AUTO);
      268    11967
      269    11968
      270    11969        /*
      271    11970        Auto copy of a VDH trace entry.
      272    11971        */
      273    11972        %KV$TRCENT (NAME = Y@TRCENT, STCLASS = AUTO);
      274    12001        /*
      275    12002        Pointer to KV$TRCBFR.
      276    12003        */
      277    12004    1   DCL Y@TRCBFR$ PTR AUTO;
      278    12005        /*
      279    12006        Initialized copies of KV$TRCENT.
      280    12007        */
      281    12008       %KV$TRCENT (NAME = Y_TRCENT_SNDSSN, STCLASS = CONSTANT, TYP = %KV#TRCENT_TYP_SNDSSN)
             12008            ;
      282    12037       %KV$TRCENT (NAME = Y_TRCENT_SNDVDO, STCLASS = CONSTANT, TYP = %KV#TRCENT_TYP_SNDVDO)
             12037            ;
      283    12066        /*
      284    12067        KV$TRCBFR (VDH trace buffer) declaration.
      285    12068        */
      286    12069        %KV$TRCBFR (NAME = Y$TRCBFR, STCLASS = "BASED(Y@TRCBFR$)");
      287    12127        %EQU MESS=CHARTEXT('Y@KNH$->KNH$MESS');
      288    12128        %EQU VDO_RQSDAT_GNR=CHARTEXT('PUT$->KV$VDO_RQSDAT');
      289    12129        %EQU VDO_DAT = CHARTEXT('PUT$->KV$VDO_DAT');
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:65   
      290    12130        %EQU VDO_CLSSSN = CHARTEXT('PUT$->KV$VDO_CLSSSN');
      291    12131        %EQU VDO_DSC = CHARTEXT('PUT$->KV$VDO_DSC');
      292    12132        %EQU VDO_OPNSSN = CHARTEXT('PUT$->KV$VDO_OPNSSN');
      293    12133        %EQU VDO_RQSSTT = CHARTEXT('PUT$->KV$VDO_RQSSTT');
      294    12134        %EQU VDO_RQSMRK = CHARTEXT('PUT$->KV$VDO_RQSMRK');
      295    12135        %EQU VDO_EVT = CHARTEXT('PUT$->KV$VDO_EVT');
      296    12136        %EQU VDO_MRK = CHARTEXT('PUT$->KV$VDO_MRK');
      297    12137        %EQU VDO_PRM = CHARTEXT('PUT$->KV$VDO_PRM');
      298    12138        %EQU VDOVLP_DAT1 = CHARTEXT('PUT$->KV$VDOVLP_DAT1');
      299    12139        %EQU VDOVLP_DAT2 = CHARTEXT('PUT$->KV$VDOVLP_DAT2');
      300    12140        %EQU VDOVLP_ACTPOS = CHARTEXT('PUT$->KV$VDOVLP_ACTPOS');
      301    12141        %EQU VDOVLP_CG_MSGID = CHARTEXT('PUT$->KV_VDOVLP_CG_MSGID');
      302    12142        %EQU VDOVLP_CG_MSGTYP = CHARTEXT('PUT$->KV_VDOVLP_CG_MSGTYP');
      303    12143        %EQU VDOVLP_CG_STA = CHARTEXT('PUT$->KV_VDOVLP_CG_STA');
      304    12144        %EQU VDOVLP_ERR = CHARTEXT('PUT$->KV_VDOVLP_ERR');
      305    12145        %EQU VDOVLP_FLDID = CHARTEXT('PUT$->KV_VDOVLP_FLDID');
      306    12146        %EQU VDOVLP_KEY = CHARTEXT('PUT$->KV_VDOVLP_KEY');
      307    12147        %EQU VDOVLP_MRK = CHARTEXT('PUT$->KV_VDOVLP_MRK');
      308    12148        %EQU NOP_MESS = CHARTEXT('NOP_MSG$->KNH$MESS');
      309    12149        %EQU FPT_CNC=CHARTEXT('PUT$->FPT$CONNECT');
      310    12150        %EQU FPT_CNC_ACK=CHARTEXT('PUT$->FPT$CONNECT_ACK');
      311    12151        %EQU FPT_TRMACK = CHARTEXT('PUT$->FPT$TERM_ACK');
      312    12152
      313    12153        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:66   
      314    12154
      315    12155
      316    12156        /*
      317    12157           This is normal entry (not X.25).
      318    12158        */
      319    12159    1      NOT_X25 = '1'B;

  12159   2 000005  8947 0012                            LBT,'8000'X       NOT_X25,AUTO
  12159   2 000007       8000

      320    12160    1      Y@SSN$ = KV$PTR.SSN$;

  12160   2 000008  EC80 0000 0000  xsym                 LDB,B6   KV$PTR$
          2 00000B  DCC6 0002                            LDB,B5   2,B6
          2 00000D  DFC7 0008                            STB,B5   Y@SSN$,AUTO

      321    12161    1      Y@STT$ = %KV_USRPRM.STT$;

  12161   2 00000F  CC86                                 LDB,B4   ,B6
          2 000010  BCC4 0008                            LDB,B3   8,B4
          2 000012  ACC3 0033                            LDB,B2   51,B3
          2 000014  AFC7 000C                            STB,B2   Y@STT$,AUTO

      322    12162    1      Y@VDO$ = ADDR(NIL);

  12162   2 000016  9B80 0000 0000                       LAB,B1   0
          2 000019  9FC7 0018                            STB,B1   Y@VDO$,AUTO

      323    12163
      324    12164        /* Check for conflicts concerning sending markers                             */
      325    12165    2      IF (KV$SND.FNC = %KV_SND_FNC_MRK) THEN DO;

  12165   2 00001B  ECC7 0004                            LDB,B6   @KV$SND_X,AUTO
          2 00001D  E286                                 LLH,R6   ,B6
          2 00001E  6D07                                 CMV,R6   7
          2 00001F  0981 0018                            BNE      s:12171,PREL

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:67   
      326    12166    2         IF KV$SND_MRK.VDH_MRK$=ADDR(NIL) AND KV$SND.VDOVLP.MRK$=ADDR(NIL)

  12166   2 000021  8DC6 000F                            CMN      15,B6
          2 000023  0981 0005                            BNE      s:12166+8,PREL
          2 000025  8DC6 000D                            CMN      13,B6
          2 000027  0901 000D                            BE       s:12168,PREL
          2 000029  8DC6 000F                            CMN      15,B6
          2 00002B  0901 0005                            BE       s:12166+16,PREL
          2 00002D  8DC6 000D                            CMN      13,B6
          2 00002F  0981 0005                            BNE      s:12168,PREL
          2 000031  8286                                 LB,'00E0'X        ,B6
          2 000032       00E0
          2 000033  0581 000F                            BBF      s:12177,PREL

      327    12167    2           OR KV$SND_MRK.VDH_MRK$~=ADDR(NIL) AND KV$SND.VDOVLP.MRK$~=ADDR(NIL)
      328    12168    2           OR KV$SND.RQSMRK THEN ALTRETURN;

  12168   2 000035  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      329    12169    2      END;
      330    12170    2      ELSE DO;

      331    12171    2         IF KV$SND.RQSMRK AND KV$SND.VDOVLP.MRK$~=ADDR(NIL)

  12171   2 000038  8286                                 LB,'00E0'X        ,B6
  12171   2 000039       00E0
          2 00003A  0581 0008                            BBF      s:12177,PREL
          2 00003C  8DC6 000D                            CMN      13,B6
          2 00003E  0901 0004                            BE       s:12177,PREL

      332    12172    2         THEN ALTRETURN;

  12172   2 000040  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      333    12173    2      END;
      334    12174        /* Are we going to append this message to the previous one,
      335    12175           because they are going to the same destination ? */
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:68   
      336    12176
      337    12177    1      KONCAT = '0'B;

  12177   2 000043  8747 0011                            CL       KONCAT,AUTO

      338    12178    1      SZ = 0;

  12178   2 000045  8747 000E                            CL       SZ,AUTO

      339    12179        /*N*  the host does not handle this yet!
      340    12180                IF KNH$QHDR.SCQ.IPTR ~= KNH$QHDR.SCQ.RPTR THEN DO;
      341    12181                   IF %KV_SSN.SSNCNCID = KVM_SND_PRV$->KNH$MESS.LDCTX AND
      342    12182                     KVM_SND_PRV$->KNH$MESS.FUNCTION = %KN_FCN_DATA THEN
      343    12183                      KONCAT = '1'B;
      344    12184                   END;
      345    12185        */
      346    12186
      347    12187        /* Calculate size of VLP's */
      348    12188
      349    12189    1      VLP_WRDSIZ = 0;

  12189   2 000047  8747 0014                            CL       VLP_WRDSIZ,AUTO

      350    12190    1      SLACK_BYT = 0;

  12190   2 000049  8747 0016                            CL       SLACK_BYT,AUTO

      351    12191
      352    12192        /* if any of the RQSMRK bits are set, we will send a marker VLP */
      353    12193
      354    12194    1      IF KV$SND.FNC=%KV_SND_FNC_MRK AND KV$SND.VDOVLP.MRK$=ADDR(NIL)

  12194   2 00004B  6D07                                 CMV,R6   7
          2 00004C  0981 0005                            BNE      s:12194+7,PREL
          2 00004E  8DC6 000D                            CMN      13,B6
          2 000050  0901 0009                            BE       s:12196,PREL
          2 000052  8286                                 LB,'00E0'X        ,B6
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:69   
          2 000053       00E0
          2 000054  0581 000B                            BBF      s:12200,PREL
          2 000056  89C5 0028                            CMZ      40,B5
          2 000058  0881 0007                            BAGE     s:12200,PREL

      355    12195    2        OR KV$SND.RQSMRK AND %KV_SSN.MRKRQSENB THEN DO;

      356    12196    2         VLP_WRDSIZ = SIZEW(KV$VDOVLP_MRK);

  12196   2 00005A  5C04                                 LDV,R5   4
          2 00005B  DF47 0014                            STR,R5   VLP_WRDSIZ,AUTO

      357    12197    2         SLACK_BYT = LENGTHC(KV$VDOVLP_MRK);

  12197   2 00005D  4C08                                 LDV,R4   8
          2 00005E  CF47 0016                            STR,R4   SLACK_BYT,AUTO

      358    12198    2      END;

      359    12199
      360    12200    1      LST_VLP = -1;

  12200   2 000060  8947 0015                            LBT,'FFFF'X       LST_VLP,AUTO
  12200   2 000062       FFFF

      361    12201    2      DO LOOP_CNT = 0 TO 6 ;

  12201   2 000063  8747 0013                            CL       LOOP_CNT,AUTO

      362    12202    3         IF KV$SND.VDOVLP_ARY(LOOP_CNT) ~= ADDR(NIL) THEN DO;

  12202   2 000065  ECC7 0004                            LDB,B6   @KV$SND_X,AUTO
          2 000067  DBC6 0001                            LAB,B5   1,B6
          2 000069  B847 0013                            LDR,R3   LOOP_CNT,AUTO
          2 00006B  8DB5                                 CMN      ,B5,R3
          2 00006C  0901 001B                            BE       s:12210,PREL

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:70   
      363    12203    3            IF LOOP_CNT = 5 THEN

  12203   2 00006E  3D05                                 CMV,R3   5
          2 00006F  0981 000B                            BNE      s:12206,PREL

      364    12204        /* Nomencalture notwithstanding, KEY is the only variable length one. */
      365    12205    3            SLACK_BYT = LENGTHC(KV$SND.VDOVLP.KEY$->KV_VDOVLP_KEY);

  12205   2 000071  DCC6 000B                            LDB,B5   11,B6
          2 000073  E805                                 LDR,R6   ,B5
          2 000074  E570 00FF                            AND,R6   255,IMO
          2 000076  6E02                                 ADV,R6   2
          2 000077  EF47 0016                            STR,R6   SLACK_BYT,AUTO
          2 000079  0F81 0006                            B        s:12207,PREL

      366    12206    3            ELSE SLACK_BYT = VDOVLP_BYTLNG_ARY(LOOP_CNT);

  12206   2 00007B  E830 0000 0166  00                   LDR,R6   VDOVLP_BYTLNG_ARY,R3
          2 00007E  EF47 0016                            STR,R6   SLACK_BYT,AUTO

      367    12207    3            VLP_WRDSIZ = VLP_WRDSIZ + (SLACK_BYT+1)/2;

  12207   2 000080  6E01                                 ADV,R6   1
          2 000081  6041                                 SOR,R6   1
          2 000082  EA47 0014                            ADD,R6   VLP_WRDSIZ,AUTO
          2 000084  EF47 0014                            STR,R6   VLP_WRDSIZ,AUTO

      368    12208    3            LST_VLP = LOOP_CNT;

  12208   2 000086  BF47 0015                            STR,R3   LST_VLP,AUTO

      369    12209    3         END;

      370    12210    2      END;                                 /* DO LOOP_CNT                        */

  12210   2 000088  8AC7 0013                            INC      LOOP_CNT,AUTO
          2 00008A  E847 0013                            LDR,R6   LOOP_CNT,AUTO
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:71   
          2 00008C  6D06                                 CMV,R6   6
          2 00008D  03D8                                 BLE      s:12202,SPREL

      371    12211    1      SLACK_BYT = MOD(SLACK_BYT,2);

  12211   2 00008E  D847 0016                            LDR,R5   SLACK_BYT,AUTO
          2 000090  D570 0001                            AND,R5   1,IMO
          2 000092  DF47 0016                            STR,R5   SLACK_BYT,AUTO

      372    12212
      373    12213    1      INHLVL = KH_INHLVL;

  12213   2 000094  C800 0000 0000  xsym                 LDR,R4   KH_INHLVL
          2 000097  CF47 0010                            STR,R4   INHLVL,AUTO

      374    12214
      375    12215        /* Do case to branch to appropriate routine  */
      376    12216
      377    12217    2      DO CASE (KV$SND.FNC);

  12217   2 000099  B286                                 LLH,R3   ,B6
          2 00009A  3D0F                                 CMV,R3   15
          2 00009B  0281 00D1                            BGE      s:12280,PREL
          2 00009D  A830 0000 00A3  02                   LDR,R2   s:12217+10,R3
          2 0000A0  83A0 0000 00B2  02                   JMP      s:12219,R2
          2 0000A3       00BB                            DC       s:12280,PREL
          2 0000A4       0044                            DC       s:12236,PREL
          2 0000A5       004E                            DC       s:12240,PREL
          2 0000A6       0000                            DC       s:12219,PREL
          2 0000A7       0036                            DC       s:12233,PREL
          2 0000A8       0049                            DC       s:12238,PREL
          2 0000A9       0055                            DC       s:12243,PREL
          2 0000AA       0081                            DC       s:12255,PREL
          2 0000AB       0086                            DC       s:12257,PREL
          2 0000AC       008B                            DC       s:12259,PREL
          2 0000AD       0007                            DC       s:12223,PREL
          2 0000AE       0099                            DC       s:12262,PREL
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:72   
          2 0000AF       00A4                            DC       s:12268,PREL
          2 0000B0       00B3                            DC       s:12275,PREL
          2 0000B1       00B6                            DC       s:12277,PREL

      378    12218    2      CASE(%KV_SND_FNC_CNC);

      379    12219    2         KONCAT = '0'B;

  12219   2 0000B2  8747 0011                            CL       KONCAT,AUTO

      380    12220    2         CALL KVM$SND_CNC;

  12220   2 0000B4  E3C0 0652                            LNJ,B6   s:0,PREL
          2 0000B6       0001                            DC       s:12220+3,PREL
          2 0000B7  0F81 00BB                            B        s:12288,PREL

      381    12221    2      CASE(%KV_SND_FNC_RQSDAT_GNR);

      382    12222        /* see if we actually want to build a RQSDAT message */
      383    12223    2         IF NOT %KV_SSN.NO_WATREDTRG

  12223   2 0000B9  DCC7 0008                            LDB,B5   Y@SSN$,AUTO
          2 0000BB  82C5 0028                            LB,'0004'X        40,B5
          2 0000BD       0004
          2 0000BE  0501 0024                            BBT      s:12231,PREL

      384    12224    2         THEN IF %KV_VDI.RQSOTP OR %KV_SSN.OTPBLK OR %KV_VDI.SSNCNT=1

  12224   2 0000C0  CC85                                 LDB,B4   ,B5
          2 0000C1  82C4 0019                            LB,'0008'X        25,B4
          2 0000C3       0008
          2 0000C4  0501 000B                            BBT      s:12225,PREL
          2 0000C6  82C5 0028                            LB,'4000'X        40,B5
          2 0000C8       4000
          2 0000C9  0501 0006                            BBT      s:12225,PREL
          2 0000CB  9844 000E                            LDR,R1   14,B4
          2 0000CD  1D01                                 CMV,R1   1
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:73   
          2 0000CE  0981 0014                            BNE      s:12231,PREL

      385    12225    2         THEN IF NOT %KV_VDI.RQSOTP OR

  12225   2 0000D0  82C4 0019                            LB,'0008'X        25,B4
  12225   2 0000D2       0008
          2 0000D3  0581 000C                            BBF      s:12229,PREL
          2 0000D5  82C5 0028                            LB,'4000'X        40,B5
          2 0000D7       4000
          2 0000D8  0501 000A                            BBT      s:12231,PREL
          2 0000DA  9845 001E                            LDR,R1   30,B5
          2 0000DC  9944 001B                            CMR,R1   27,B4
          2 0000DE  0281 0004                            BGE      s:12231,PREL

      386    12226    2           NOT %KV_SSN.OTPBLK
      387    12227    2           AND %KV_SSN.RCVFLWCTRCRDINC<%KV_VDI.RCVFLWCTRMINCRDINC
      388    12228    3         THEN DO;

      389    12229    3            ALTRETURN;

  12229   2 0000E0  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      390    12230    3         END;
      391    12231    2         CALL KVM$SND_RQSDAT_GNR;

  12231   2 0000E3  E3C0 0959                            LNJ,B6   s:0,PREL
          2 0000E5       0001                            DC       s:12231+3,PREL
          2 0000E6  0F81 008C                            B        s:12288,PREL

      392    12232    2      CASE(%KV_SND_FNC_DAT);

      393    12233    2         CALL KVM$SND_DAT;

  12233   2 0000E8  E3C0 06D4                            LNJ,B6   s:0,PREL
          2 0000EA       0001                            DC       s:12234,PREL

      394    12234    2         CALL Y$RLSBFR (KV$SND_DAT.DAT__);
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:74   

  12234   2 0000EB  ECC7 0004                            LDB,B6   @KV$SND_X,AUTO
          2 0000ED  DBC6 000F                            LAB,B5   15,B6
          2 0000EF  DFC7 0032                            STB,B5   Y@TRCBFR$+5,AUTO
          2 0000F1  E3C0 0A2C                            LNJ,B6   s:0,PREL
          2 0000F3       0001                            DC       s:12234+9,PREL
          2 0000F4  0F81 007E                            B        s:12288,PREL

      395    12235    2      CASE(%KV_SND_FNC_CLSSSN);

      396    12236    2         CALL KVM$SND_CLSSSN;

  12236   2 0000F6  E3C0 05C9                            LNJ,B6   s:0,PREL
          2 0000F8       0001                            DC       s:12236+3,PREL
          2 0000F9  0F81 0079                            B        s:12288,PREL

      397    12237    2      CASE(%KV_SND_FNC_DSCSSN);

      398    12238    2         CALL KVM$SND_DSCSSN;

  12238   2 0000FB  E3C0 07CE                            LNJ,B6   s:0,PREL
          2 0000FD       0001                            DC       s:12238+3,PREL
          2 0000FE  0F81 0074                            B        s:12288,PREL

      399    12239    2      CASE(%KV_SND_FNC_CMPDSCSSN);

      400    12240    2         KONCAT = '0'B;

  12240   2 000100  8747 0011                            CL       KONCAT,AUTO

      401    12241    2         CALL KVM$SND_CMPDSCSSN;

  12241   2 000102  E3C0 05E2                            LNJ,B6   s:0,PREL
          2 000104       0001                            DC       s:12241+3,PREL
          2 000105  0F81 006D                            B        s:12288,PREL

      402    12242    2      CASE(%KV_SND_FNC_EVT);
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:75   

      403    12243    2         IF KV$SND_EVT.EVTTYP~=%KV_EVTTYP_BRK AND

  12243   2 000107  92C6 000F                            LLH,R1   15,B6
          2 000109  1D01                                 CMV,R1   1
          2 00010A  0901 0007                            BE       s:12246,PREL
          2 00010C  1D02                                 CMV,R1   2
          2 00010D  0901 0004                            BE       s:12246,PREL

      404    12244    2           KV$SND_EVT.EVTTYP~=%KV_EVTTYP_MNTATN
      405    12245    2         THEN ALTRETURN;

  12245   2 00010F  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      406    12246    2         IF %KV_SSN.BRKCNT<4 AND KV$SND_EVT.EVTTYP=%KV_EVTTYP_BRK

  12246   2 000112  DCC7 0008                            LDB,B5   Y@SSN$,AUTO
          2 000114  E2C5 0025                            LLH,R6   37,B5
          2 000116  6D04                                 CMV,R6   4
          2 000117  0281 0007                            BGE      s:12248,PREL
          2 000119  1D01                                 CMV,R1   1
          2 00011A  0981 0004                            BNE      s:12248,PREL

      407    12247    2         THEN %KV_SSN.BRKCNT = %KV_SSN.BRKCNT+1;

  12247   2 00011C  6E01                                 ADV,R6   1
          2 00011D  E7C5 0025                            STH,R6   37,B5

      408    12248    3         IF KV$SND_EVT.RQSMRK.DLTRCVRQS AND %KV_SSN.WATINPDLTMRK THEN DO;

  12248   2 00011F  8286                                 LB,'0040'X        ,B6
  12248   2 000120       0040
          2 000121  0581 000C                            BBF      s:12253,PREL
          2 000123  82C5 0028                            LB,'1000'X        40,B5
          2 000125       1000
          2 000126  0581 0007                            BBF      s:12253,PREL

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:76   
      409    12249    3            %KV_SSN.MRKRQSENB = '0'B;

  12249   2 000128  8845 0028                            LBF,'8000'X       40,B5
  12249   2 00012A       8000

      410    12250    3            RETURN;

  12250   2 00012B  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      411    12251    3         END;
      412    12252        /* Don't allow an EVT while waiting for a response to the last one */
      413    12253    2         CALL KVM$SND_EVT;

  12253   2 00012E  E3C0 07D5                            LNJ,B6   s:0,PREL
          2 000130       0001                            DC       s:12253+3,PREL
          2 000131  0F81 0041                            B        s:12288,PREL

      414    12254    2      CASE(%KV_SND_FNC_MRK);

      415    12255    2         CALL KVM$SND_MRK;

  12255   2 000133  E3C0 0818                            LNJ,B6   s:0,PREL
          2 000135       0001                            DC       s:12255+3,PREL
          2 000136  0F81 003C                            B        s:12288,PREL

      416    12256    2      CASE(%KV_SND_FNC_OPNSSN);

      417    12257    2         CALL KVM$SND_OPNSSN;

  12257   2 000138  E3C0 07EE                            LNJ,B6   s:0,PREL
          2 00013A       0001                            DC       s:12257+3,PREL
          2 00013B  0F81 0037                            B        s:12288,PREL

      418    12258    2      CASE(%KV_SND_FNC_PRM);

      419    12259    2         CALL KVM$SND_PRM;

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:77   
  12259   2 00013D  E3C0 0880                            LNJ,B6   s:0,PREL
          2 00013F       0001                            DC       s:12260,PREL

      420    12260    2         CALL Y$RLSBFR (KV$SND_PRM.DAT__);

  12260   2 000140  ECC7 0004                            LDB,B6   @KV$SND_X,AUTO
          2 000142  DBC6 000F                            LAB,B5   15,B6
          2 000144  DFC7 0032                            STB,B5   Y@TRCBFR$+5,AUTO
          2 000146  E3C0 09D7                            LNJ,B6   s:0,PREL
          2 000148       0001                            DC       s:12260+9,PREL
          2 000149  0F81 0029                            B        s:12288,PREL

      421    12261    2      CASE(%KV_SND_FNC_RQSMRK);

      422    12262    2         IF %KV_SSN.MRKRQSENB

  12262   2 00014B  DCC7 0008                            LDB,B5   Y@SSN$,AUTO
          2 00014D  89C5 0028                            CMZ      40,B5
          2 00014F  0881 0023                            BAGE     s:12288,PREL

      423    12263    2         THEN CALL KVM$SND_RQSMRK;

  12263   2 000151  E3C0 0986                            LNJ,B6   s:0,PREL
          2 000153       0001                            DC       s:12263+3,PREL
          2 000154  0F81 001E                            B        s:12288,PREL

      424    12264    2      CASE(%KV_SND_FNC_RQSSTT);

      425    12265        /* if status request is not enabled, simply return with bad return
      426    12266           status.
      427    12267        */
      428    12268    2         IF NOT %KV_SSN.STTRQSENB THEN

  12268   2 000156  DCC7 0008                            LDB,B5   Y@SSN$,AUTO
          2 000158  82C5 0028                            LB,'0020'X        40,B5
          2 00015A       0020
          2 00015B  0501 0004                            BBT      s:12273,PREL
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:78   

      429    12269    3         DO;

      430    12270    3            ALTRETURN;

  12270   2 00015D  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      431    12271    3         END;
      432    12272    2         ELSE
      433    12273    2         CALL KVM$SND_RQSSTT;

  12273   2 000160  E3C0 098D                            LNJ,B6   s:0,PREL
          2 000162       0001                            DC       s:12273+3,PREL
          2 000163  0F81 000F                            B        s:12288,PREL

      434    12274    2      CASE(%KV_SND_FNC_STT);

      435    12275    2         RETURN;                           /* will be implemented later          */

  12275   2 000165  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      436    12276    2      CASE (%KV_SND_FNC_SCH);

      437    12277    2         CALL KVM$SND_SCHLCLSSN;

  12277   2 000168  E3C0 09A0                            LNJ,B6   s:0,PREL
          2 00016A       0001                            DC       s:12277+3,PREL
          2 00016B  0F81 0007                            B        s:12288,PREL

      438    12278        /* bad KV_SND_FNC code */
      439    12279    2      CASE (ELSE);

      440    12280    2         KVM_SND_BADFNC = KVM_SND_BADFNC + 1;

  12280   2 00016D  8A80 0000 0000  01                   INC      KVM_SND_BADFNC

      441    12281    2         ALTRETURN;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:79   

  12281   2 000170  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      442    12282    2      END;                                 /* case                               */

      443    12283
      444    12284        /* put VLP's in CQ, if there are any */
      445    12285
      446    12286        /* handle the RQSMRK cases first */
      447    12287
      448    12288    1      IF KV$SND.RQSMRK AND (%KV_SSN.MRKRQSENB AND SZ>0

  12288   2 000173  ECC7 0004                            LDB,B6   @KV$SND_X,AUTO
          2 000175  8286                                 LB,'00E0'X        ,B6
          2 000176       00E0
          2 000177  0581 0058                            BBF      s:12313,PREL
          2 000179  DCC7 0008                            LDB,B5   Y@SSN$,AUTO
          2 00017B  89C5 0028                            CMZ      40,B5
          2 00017D  0881 0005                            BAGE     s:12288+16,PREL
          2 00017F  E847 000E                            LDR,R6   SZ,AUTO
          2 000181  6981 000B                            BNEZ,R6  s:12291,PREL
          2 000183  82C5 0028                            LB,'1000'X        40,B5
          2 000185       1000
          2 000186  0501 0006                            BBT      s:12291,PREL
          2 000188  82C5 0028                            LB,'2000'X        40,B5
          2 00018A       2000
          2 00018B  0581 0044                            BBF      s:12313,PREL

      449    12289    1        OR %KV_SSN.WATINPDLTMRK OR %KV_SSN.WATOTPDLTMRK) THEN
      450    12290    2      DO;

      451    12291    2         IF %KV_SSN.MRKRQSENB THEN

  12291   2 00018D  89C5 0028                            CMZ      40,B5
          2 00018F  0881 0024                            BAGE     s:12301,PREL

      452    12292    3         DO;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:80   

      453    12293    3            %KV_SSN.MRKNMB = %KV_SSN.MRKNMB + 1;

  12293   2 000191  8AC5 0015                            INC      21,B5

      454    12294    3            %KV_SSN.MRKRQSENB = '0'B;

  12294   2 000193  8845 0028                            LBF,'8000'X       40,B5
  12294   2 000195       8000

      455    12295    3            %VDOVLP_MRK = KV_VDOVLP_MRK_MRK;

  12295   2 000196  AB80 0000 0155  00                   LAB,B2   KV_VDOVLP_MRK_MRK
          2 000199  2C00                                 LDV,R2   0
          2 00019A  6C08                                 LDV,R6   8
          2 00019B  BCC7 0006                            LDB,B3   PUT$,AUTO
          2 00019D  3C00                                 LDV,R3   0
          2 00019E  0008                                 MMM

      456    12296    3            %VDOVLP_MRK.RSP = '0'B;

  12296   2 00019F  DCC7 0006                            LDB,B5   PUT$,AUTO
          2 0001A1  8845 0001                            LBF,'8000'X       1,B5
          2 0001A3       8000

      457    12297    3            IF (LST_VLP < 0) THEN %VDOVLP_MRK.LST = '1'B;

  12297   2 0001A4  E847 0015                            LDR,R6   LST_VLP,AUTO
          2 0001A6  6881 0003                            BGEZ,R6  s:12298,PREL

  12297   2 0001A8  8905                                 LBT,'8000'X       ,B5
  12297   2 0001A9       8000

      458    12298    3            %VDOVLP_MRK.ID.UBIN_DBLBYT = %KV_SSN.MRKNMB;

  12298   2 0001AA  CCC7 0008                            LDB,B4   Y@SSN$,AUTO
          2 0001AC  D844 0015                            LDR,R5   21,B4
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:81   
          2 0001AE  DF45 0002                            STR,R5   2,B5

      459    12299    3            PUT$ = PINCRW(PUT$,SIZEW(KV$VDOVLP_MRK));

  12299   2 0001B0  BBC5 0004                            LAB,B3   4,B5
          2 0001B2  BFC7 0006                            STB,B3   PUT$,AUTO

      460    12300    3         END;

      461    12301    3         IF (KV$SND.RQSMRK.DLTRCVRQS) THEN DO;

  12301   2 0001B4  8286                                 LB,'0040'X        ,B6
  12301   2 0001B5       0040
          2 0001B6  0581 000C                            BBF      s:12305,PREL

      462    12302    3            %KV_SSN.INPDLTMRKNMB = %KV_SSN.MRKNMB;

  12302   2 0001B8  DCC7 0008                            LDB,B5   Y@SSN$,AUTO
          2 0001BA  E845 0015                            LDR,R6   21,B5
          2 0001BC  EF45 0017                            STR,R6   23,B5

      463    12303    3            %KV_SSN.WATINPDLTMRK = '1'B;

  12303   2 0001BE  8945 0028                            LBT,'1000'X       40,B5
  12303   2 0001C0       1000

      464    12304    2         END; ELSE

  12304   2 0001C1  0F81 000E                            B        s:12313,PREL

      465    12305    3         IF (KV$SND.RQSMRK.DLTRCVDAT) THEN DO;

  12305   2 0001C3  8286                                 LB,'0080'X        ,B6
  12305   2 0001C4       0080
          2 0001C5  0581 000A                            BBF      s:12313,PREL

      466    12306    3            %KV_SSN.OTPDLTMRKNMB = %KV_SSN.MRKNMB;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:82   

  12306   2 0001C7  DCC7 0008                            LDB,B5   Y@SSN$,AUTO
          2 0001C9  E845 0015                            LDR,R6   21,B5
          2 0001CB  EF45 0016                            STR,R6   22,B5

      467    12307    3            %KV_SSN.WATOTPDLTMRK = '1'B;

  12307   2 0001CD  8945 0028                            LBT,'2000'X       40,B5
  12307   2 0001CF       2000

      468    12308    3         END;

      469    12309    2      END;

      470    12310
      471    12311        /*  Altreturn if we didn't send anything. */
      472    12312
      473    12313    1      IF SZ=0 THEN ALTRETURN;

  12313   2 0001D0  E847 000E                            LDR,R6   SZ,AUTO
          2 0001D2  6981 0004                            BNEZ,R6  s:12317,PREL

  12313   2 0001D4  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      474    12314
      475    12315        /* then the VLPs passed along by VDOVLP_x$ */
      476    12316
      477    12317    1      LOOP_CNT = 0;

  12317   2 0001D7  8747 0013                            CL       LOOP_CNT,AUTO

      478    12318    1      IF (LST_VLP >= 0) THEN

  12318   2 0001D9  D847 0015                            LDR,R5   LST_VLP,AUTO
          2 0001DB  5801 0046                            BLZ,R5   s:12336,PREL

      479    12319    2   PUT@VLP: DO WHILE '1'B;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:83   

  12319   2                              PUT@VLP         null
      480    12320    3         IF (KV$SND.VDOVLP_ARY(LOOP_CNT)~=ADDR(NIL)) THEN DO;

  12320   2 0001DD  ECC7 0004            PUT@VLP         LDB,B6   @KV$SND_X,AUTO
          2 0001DF  DBC6 0001                            LAB,B5   1,B6
          2 0001E1  B847 0013                            LDR,R3   LOOP_CNT,AUTO
          2 0001E3  8DB5                                 CMN      ,B5,R3
          2 0001E4  0901 0039                            BE       s:12333,PREL

      481    12321    3            IF LOOP_CNT~=5 THEN TXTBYTSIZ = VDOVLP_BYTLNG_ARY(LOOP_CNT);

  12321   2 0001E6  3D05                                 CMV,R3   5
          2 0001E7  0901 0008                            BE       s:12323,PREL

  12321   2 0001E9  E830 0000 0166  00                   LDR,R6   VDOVLP_BYTLNG_ARY,R3
          2 0001EC  EF47 0017                            STR,R6   TXTBYTSIZ,AUTO
          2 0001EE  0F81 000F                            B        s:12326,PREL

      482    12322    4            ELSE DO;

      483    12323    4               TXTBYTSIZ = LENGTHC(KV$SND.VDOVLP.KEY$->KV_VDOVLP_KEY);

  12323   2 0001F0  DCC6 000B                            LDB,B5   11,B6
          2 0001F2  E805                                 LDR,R6   ,B5
          2 0001F3  E570 00FF                            AND,R6   255,IMO
          2 0001F5  6E02                                 ADV,R6   2
          2 0001F6  EF47 0017                            STR,R6   TXTBYTSIZ,AUTO

      484    12324    4               TXTBYTSIZ = TXTBYTSIZ+MOD(TXTBYTSIZ,2);

  12324   2 0001F8  E570 0001                            AND,R6   1,IMO
          2 0001FA  EA47 0017                            ADD,R6   TXTBYTSIZ,AUTO
          2 0001FC  EF47 0017                            STR,R6   TXTBYTSIZ,AUTO

      485    12325    4            END;

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:84   
      486    12326    3            PUT$->DMYTXT = KV$SND.VDOVLP_ARY(LOOP_CNT)->DMYTXT;

  12326   2 0001FE  DBC6 0001                            LAB,B5   1,B6
          2 000200  CCB5                                 LDB,B4   ,B5,R3
          2 000201  AB84                                 LAB,B2   ,B4
          2 000202  2C00                                 LDV,R2   0
          2 000203  BCC7 0006                            LDB,B3   PUT$,AUTO
          2 000205  3C00                                 LDV,R3   0
          2 000206  0008                                 MMM

      487    12327    4            IF (LST_VLP = LOOP_CNT) THEN DO;

  12327   2 000207  E847 0015                            LDR,R6   LST_VLP,AUTO
          2 000209  6801 000B                            BLZ,R6   s:12331,PREL
          2 00020B  E947 0013                            CMR,R6   LOOP_CNT,AUTO
          2 00020D  0981 0007                            BNE      s:12331,PREL

      488    12328    4               %VDOVLP_MRK.LST = '1'B;

  12328   2 00020F  DCC7 0006                            LDB,B5   PUT$,AUTO
          2 000211  8905                                 LBT,'8000'X       ,B5
          2 000212       8000

      489    12329    4               EXIT PUT@VLP;

  12329   2 000213  0F81 000E                            B        s:12336,PREL

      490    12330    4            END;
      491    12331    3            PUT$ = PINCRW(PUT$, TXTBYTSIZ/2);

  12331   2 000215  D847 0017                            LDR,R5   TXTBYTSIZ,AUTO
          2 000217  5041                                 SOR,R5   1
          2 000218  F855                                 LDR,R7   R5
          2 000219  6C00                                 LDV,R6   0
          2 00021A  8447 0006                            AID      PUT$,AUTO
          2 00021C  8D47 0006                            SDI      PUT$,AUTO

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:85   
      492    12332    3         END;

      493    12333    2         LOOP_CNT = LOOP_CNT + 1;

  12333   2 00021E  8AC7 0013                            INC      LOOP_CNT,AUTO

      494    12334    2      END PUT@VLP;

  12334   2 000220  0F81 FFBC                            B        s:12319,PREL

      495    12335
      496    12336    2      IF Y@VDO$~=ADDR(NIL) THEN DO;

  12336   2 000222  8DC7 0018                            CMN      Y@VDO$,AUTO
          2 000224  0901 0025                            BE       s:12343,PREL

      497    12337    2         IF VLP_WRDSIZ~=0 THEN Y@VDO$->KV$VDO.VLP = '1'B;

  12337   2 000226  E847 0014                            LDR,R6   VLP_WRDSIZ,AUTO
          2 000228  6901 0005                            BEZ,R6   s:12338,PREL

  12337   2 00022A  DCC7 0018                            LDB,B5   Y@VDO$,AUTO
          2 00022C  8905                                 LBT,'0080'X       ,B5
          2 00022D       0080

      498    12338    2         %KV_STT.SND.VDOBYTCNT = %KV_STT.SND.VDOBYTCNT + 2*MSGWRDSIZ;

  12338   2 00022E  DCC7 000C                            LDB,B5   Y@STT$,AUTO
          2 000230  F847 000F                            LDR,R7   MSGWRDSIZ,AUTO
          2 000232  6C00                                 LDV,R6   0
          2 000233  7081                                 DOL,R7   1
          2 000234  8445 0026                            AID      38,B5
          2 000236  8D45 0026                            SDI      38,B5

      499    12339    2         %KV_STT.SNDVDOFNCCNT(Y@VDO$->KV$VDO.FNC) =

  12339   2 000238  CCC7 0018                            LDB,B4   Y@VDO$,AUTO
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:86   
          2 00023A  B284                                 LLH,R3   ,B4
          2 00023B  BF47 0042                            STR,R3   TAKE$+2,AUTO
          2 00023D  3E48                                 ADV,R3   72
          2 00023E  A847 0042                            LDR,R2   TAKE$+2,AUTO
          2 000240  2E48                                 ADV,R2   72
          2 000241  8CB5                                 LDI      ,B5,R3
          2 000242  8470 0000 0001                       AID      1,IMO
          2 000245  8D25                                 SDI      ,B5,R2

      500    12340    2           %KV_STT.SNDVDOFNCCNT(Y@VDO$->KV$VDO.FNC)+1;
      501    12341    2         %KV_STT.SND.VDOCNT = %KV_STT.SND.VDOCNT + 1;

  12341   2 000246  8AC5 0025                            INC      37,B5
          2 000248  8EC5 0024                            CAD      36,B5

      502    12342    2      END;

      503    12343    2      IF NOT KONCAT THEN DO;

  12343   2 00024A  89C7 0011                            CMZ      KONCAT,AUTO
          2 00024C  0801 0007                            BAL      s:12351,PREL

      504    12344
      505    12345        /* This VDO didn't get concatenated with other VDOs for the
      506    12346          same session connection, so count up the session interface
      507    12347          data unit count. */
      508    12348
      509    12349    2         %KV_STT.SND.SSNINTDATUNTCNT = %KV_STT.SND.SSNINTDATUNTCNT + 1;

  12349   2 00024E  DCC7 000C                            LDB,B5   Y@STT$,AUTO
          2 000250  8AC5 002F                            INC      47,B5
          2 000252  8EC5 002E                            CAD      46,B5

      510    12350    2      END;

      511    12351    1      %KV_STT.SND.SSNINTDATUNTBYTCNT = %KV_STT.SND.SSNINTDATUNTBYTCNT + SZ * 2;

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:87   
  12351   2 000254  DCC7 000C                            LDB,B5   Y@STT$,AUTO
          2 000256  F847 000E                            LDR,R7   SZ,AUTO
          2 000258  6C00                                 LDV,R6   0
          2 000259  7081                                 DOL,R7   1
          2 00025A  8445 0030                            AID      48,B5
          2 00025C  8D45 0030                            SDI      48,B5

      512    12352    1      Y@TRCBFR$ = %KV_SSN.TRCBFR$;

  12352   2 00025E  CCC7 0008                            LDB,B4   Y@SSN$,AUTO
          2 000260  BCC4 0010                            LDB,B3   16,B4
          2 000262  BFC7 002D                            STB,B3   Y@TRCBFR$,AUTO

      513    12353    2      IF Y@TRCBFR$ ~= ADDR(NIL) THEN DO;

  12353   2 000264  8DC7 002D                            CMN      Y@TRCBFR$,AUTO
          2 000266  0901 0025                            BE       s:12368,PREL

      514    12354        /*
      515    12355        The VDH trace buffer does exist.  Do VDH tracing.
      516    12356        */
      517    12357    3         IF Y@KNH$ ~= ADDR(NIL) THEN DO;

  12357   2 000268  8DC7 000A                            CMN      Y@KNH$,AUTO
          2 00026A  0901 000F                            BE       s:12362,PREL

      518    12358    3            Y@TRCENT = Y_TRCENT_SNDSSN;

  12358   2 00026C  D800 0000 016E  00                   LDR,R5   Y_TRCENT_SNDSSN
          2 00026F  DF47 002C                            STR,R5   Y@TRCENT,AUTO

      519    12359    3            Y@TRCENT.FNC = Y@KNH$ -> KNH$MESS.FUNCTION;

  12359   2 000271  ACC7 000A                            LDB,B2   Y@KNH$,AUTO
          2 000273  C802                                 LDR,R4   ,B2
          2 000274  CAC7 002C                            SRM,R4,'00FF'X    Y@TRCENT,AUTO
          2 000276       00FF
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:88   

      520    12360    3            CALL Y$TRC;

  12360   2 000277  E3C0 08D8                            LNJ,B6   s:0,PREL
          2 000279       0001                            DC       s:12362,PREL

      521    12361    3         END;

      522    12362    3         IF Y@VDO$ ~= ADDR(NIL) THEN DO;

  12362   2 00027A  8DC7 0018                            CMN      Y@VDO$,AUTO
          2 00027C  0901 000F                            BE       s:12368,PREL

      523    12363    3            Y@TRCENT = Y_TRCENT_SNDVDO;

  12363   2 00027E  E800 0000 016F  00                   LDR,R6   Y_TRCENT_SNDVDO
          2 000281  EF47 002C                            STR,R6   Y@TRCENT,AUTO

      524    12364    3            Y@TRCENT.FNC = Y@VDO$ -> KV$VDO.FNC;

  12364   2 000283  ECC7 0018                            LDB,B6   Y@VDO$,AUTO
          2 000285  D286                                 LLH,R5   ,B6
          2 000286  DAC7 002C                            SRM,R5,'00FF'X    Y@TRCENT,AUTO
          2 000288       00FF

      525    12365    3            CALL Y$TRC;

  12365   2 000289  E3C0 08C6                            LNJ,B6   s:0,PREL
          2 00028B       0001                            DC       s:12368,PREL

      526    12366    3         END;

      527    12367    2      END;                                 /* END IF TRCBFR$ ~= NIL              */

      528    12368    1      GOTO NRMRET;

  12368   2 00028C  0F81 00FB                            B        s:12473,PREL
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:89   

      529    12369        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:90   
      530    12370        /*F*
      531    12371            NAME: KVM$FLUSHCQ
      532    12372            DESCRIPTION:
      533    12373                  Simply tries to merge any extensions into the main SCQ, since
      534    12374                  it would only otherwise get done when another message needed to
      535    12375                  get sent.
      536    12376        */
      537    12377    1   KVM$FLUSHCQ: ENTRY ALTRET;

  12377   2 00028E  D380 0000 0000  xent KVM$FLUSHCQ     LNJ,B5   X6A_AUTO_1
          2 000291       0044 0001                       DC       68,1

      538    12378
      539    12379    1      NOT_X25 = '1'B;

  12379   2 000293  8947 0012                            LBT,'8000'X       NOT_X25,AUTO
  12379   2 000295       8000

      540    12380    1      KONCAT = '1'B;

  12380   2 000296  8947 0011                            LBT,'8000'X       KONCAT,AUTO
  12380   2 000298       8000

      541    12381    1      MSGWRDSIZ = KVM_SND_SCQ_SLKWRD;

  12381   2 000299  E800 0000 0001  01                   LDR,R6   KVM_SND_SCQ_SLKWRD
          2 00029C  EF47 000F                            STR,R6   MSGWRDSIZ,AUTO

      542    12382    1      VLP_WRDSIZ = 0;

  12382   2 00029E  8747 0014                            CL       VLP_WRDSIZ,AUTO

      543    12383    1      INHLVL = KH_INHLVL;

  12383   2 0002A0  D800 0000 0000  xsym                 LDR,R5   KH_INHLVL
          2 0002A3  DF47 0010                            STR,R5   INHLVL,AUTO

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:91   
      544    12384    1      CALL KVM$FNDSPACE;

  12384   2 0002A5  E3C0 00F2                            LNJ,B6   s:0,PREL
          2 0002A7       0001                            DC       s:12385,PREL

      545    12385    1      IF INHLVL~=KH_INHLVL

  12385   2 0002A8  E847 0010                            LDR,R6   INHLVL,AUTO
          2 0002AA  E900 0000 0000  xsym                 CMR,R6   KH_INHLVL
          2 0002AD  0901 0007                            BE       s:12387,PREL

      546    12386    1      THEN CALL KHI$ENABLE;

  12386   2 0002AF  CBF0 0000                            LAB,B4   0,IMO
          2 0002B1  E380 0000 0000  xent                 LNJ,B6   KHI$ENABLE
          2 0002B4       0001                            DC       s:12387,PREL

      547    12387    1      RETURN;

  12387   2 0002B5  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      548    12388        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:92   
      549    12389        /*F* NAME:  KVM$SNDCQ - Link-level Send via Circular Queue
      550    12390        The KVM$SNDCQ entry point is provided for link-level access to the
      551    12391        circular queue.  KVM$SNDCQ has no knowledge of the information passed by
      552    12392        the handler.  This routine simply places messages in the send circular queue.
      553    12393
      554    12394        This service takes the alternate return if there is no space available.
      555    12395
      556    12396        The form of the call for this service is:
      557    12397
      558    12398            CALL KVM$SNDCQ(kv$sndcq) ALTRET(label);
      559    12399
      560    12400        where:
      561    12401
      562    12402        .inl 4
      563    12403        .unl 4
      564    12404        kv$sndcq - has essentially six VDH buffer descriptors.
      565    12405        .inl 0
      566    12406        */
      567    12407    1   KVM$SNDCQ: ENTRY(KV$SND_X) ALTRET;

  12407   2 0002B8  D380 0000 0000  xent KVM$SNDCQ       LNJ,B5   X6A_AUTO_1
          2 0002BB       0044 0001                       DC       68,1

      568    12408
      569    12409    1      NOT_X25 = '0'B;

  12409   2 0002BD  8747 0012                            CL       NOT_X25,AUTO

      570    12410    1      Y@SSN$ = ADDR(NIL);

  12410   2 0002BF  EB80 0000 0000                       LAB,B6   0
          2 0002C2  EFC7 0008                            STB,B6   Y@SSN$,AUTO

      571    12411    1      Y@STT$ = ADDR(NIL);

  12411   2 0002C4  DB80 0000 0000                       LAB,B5   0
          2 0002C7  DFC7 000C                            STB,B5   Y@STT$,AUTO
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:93   

      572    12412    1      KONCAT = '0'B;

  12412   2 0002C9  8747 0011                            CL       KONCAT,AUTO

      573    12413    1      SZ = (KV$SNDCQ.MSG1_.BYTSIZ

  12413   2 0002CB  CCC7 0004                            LDB,B4   @KV$SND_X,AUTO
          2 0002CD  E844 0003                            LDR,R6   3,B4
          2 0002CF  EA44 0007                            ADD,R6   7,B4
          2 0002D1  EA44 000B                            ADD,R6   11,B4
          2 0002D3  EA44 000F                            ADD,R6   15,B4
          2 0002D5  EA44 0013                            ADD,R6   19,B4
          2 0002D7  EA44 0017                            ADD,R6   23,B4
          2 0002D9  6E01                                 ADV,R6   1
          2 0002DA  6041                                 SOR,R6   1
          2 0002DB  EF47 000E                            STR,R6   SZ,AUTO

      574    12414    1        + KV$SNDCQ.MSG2_.BYTSIZ
      575    12415    1        + KV$SNDCQ.MSG3_.BYTSIZ
      576    12416    1        + KV$SNDCQ.MSG4_.BYTSIZ
      577    12417    1        + KV$SNDCQ.MSG5_.BYTSIZ
      578    12418    1        + KV$SNDCQ.MSG6_.BYTSIZ + 1) / 2;
      579    12419    1      INHLVL = KH_INHLVL;

  12419   2 0002DD  D800 0000 0000  xsym                 LDR,R5   KH_INHLVL
          2 0002E0  DF47 0010                            STR,R5   INHLVL,AUTO

      580    12420    2      CALL KVM$FNDSPACE WHENALTRETURN DO;

  12420   2 0002E2  E3C0 00B5                            LNJ,B6   s:0,PREL
          2 0002E4       0003                            DC       s:12421,PREL
          2 0002E5  0F81 0004                            B        s:12423,PREL

      581    12421    2         ALTRETURN;

  12421   2 0002E7  C380 0000 0000  xent                 LNJ,B4   X6A_AALT
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:94   

      582    12422    2      END;
      583    12423    1      TXTBYTSIZ = KV$SNDCQ.MSG1_.BYTSIZ;

  12423   2 0002EA  ECC7 0004                            LDB,B6   @KV$SND_X,AUTO
          2 0002EC  E846 0003                            LDR,R6   3,B6
          2 0002EE  EF47 0017                            STR,R6   TXTBYTSIZ,AUTO

      584    12424    2      IF TXTBYTSIZ ~= 0 THEN DO;

  12424   2 0002F0  6901 0013                            BEZ,R6   s:12429,PREL

      585    12425    2         PUT$->DATTXT = SUBSTR(KV$SNDCQ.MSG1_.ADR$->DMYTXT,

  12425   2 0002F2  DC86                                 LDB,B5   ,B6
          2 0002F3  D846 0002                            LDR,R5   2,B6
          2 0002F5  AB85                                 LAB,B2   ,B5
          2 0002F6  A855                                 LDR,R2   R5
          2 0002F7  BCC7 0006                            LDB,B3   PUT$,AUTO
          2 0002F9  3C00                                 LDV,R3   0
          2 0002FA  0008                                 MMM

      586    12426    2           KV$SNDCQ.MSG1_.BYTX, TXTBYTSIZ);
      587    12427    2         PUT$ = PINCRW(PUT$,TXTBYTSIZ/2);  /* MSGn_'s are dword bounded          */

  12427   2 0002FB  E847 0017                            LDR,R6   TXTBYTSIZ,AUTO
          2 0002FD  6041                                 SOR,R6   1
          2 0002FE  F856                                 LDR,R7   R6
          2 0002FF  6C00                                 LDV,R6   0
          2 000300  8447 0006                            AID      PUT$,AUTO
          2 000302  8D47 0006                            SDI      PUT$,AUTO

      588    12428    2      END;

      589    12429    1      TXTBYTSIZ = KV$SNDCQ.MSG2_.BYTSIZ;

  12429   2 000304  E846 0007                            LDR,R6   7,B6
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:95   
          2 000306  EF47 0017                            STR,R6   TXTBYTSIZ,AUTO

      590    12430    2      IF TXTBYTSIZ ~= 0 THEN DO;

  12430   2 000308  6901 0014                            BEZ,R6   s:12435,PREL

      591    12431    2         PUT$->DATTXT = SUBSTR(KV$SNDCQ.MSG2_.ADR$->DMYTXT,

  12431   2 00030A  DCC6 0004                            LDB,B5   4,B6
          2 00030C  D846 0006                            LDR,R5   6,B6
          2 00030E  AB85                                 LAB,B2   ,B5
          2 00030F  A855                                 LDR,R2   R5
          2 000310  BCC7 0006                            LDB,B3   PUT$,AUTO
          2 000312  3C00                                 LDV,R3   0
          2 000313  0008                                 MMM

      592    12432    2           KV$SNDCQ.MSG2_.BYTX, TXTBYTSIZ);
      593    12433    2         PUT$ = PINCRW(PUT$,TXTBYTSIZ/2);  /* MSGn_'s are dword bounded          */

  12433   2 000314  E847 0017                            LDR,R6   TXTBYTSIZ,AUTO
          2 000316  6041                                 SOR,R6   1
          2 000317  F856                                 LDR,R7   R6
          2 000318  6C00                                 LDV,R6   0
          2 000319  8447 0006                            AID      PUT$,AUTO
          2 00031B  8D47 0006                            SDI      PUT$,AUTO

      594    12434    2      END;

      595    12435    1      TXTBYTSIZ = KV$SNDCQ.MSG3_.BYTSIZ;

  12435   2 00031D  E846 000B                            LDR,R6   11,B6
          2 00031F  EF47 0017                            STR,R6   TXTBYTSIZ,AUTO

      596    12436    2      IF TXTBYTSIZ ~= 0 THEN DO;

  12436   2 000321  6901 0014                            BEZ,R6   s:12441,PREL

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:96   
      597    12437    2         PUT$->DATTXT = SUBSTR(KV$SNDCQ.MSG3_.ADR$->DMYTXT,

  12437   2 000323  DCC6 0008                            LDB,B5   8,B6
          2 000325  D846 000A                            LDR,R5   10,B6
          2 000327  AB85                                 LAB,B2   ,B5
          2 000328  A855                                 LDR,R2   R5
          2 000329  BCC7 0006                            LDB,B3   PUT$,AUTO
          2 00032B  3C00                                 LDV,R3   0
          2 00032C  0008                                 MMM

      598    12438    2           KV$SNDCQ.MSG3_.BYTX, TXTBYTSIZ);
      599    12439    2         PUT$ = PINCRW(PUT$,TXTBYTSIZ/2);  /* MSGn_'s are dword bounded          */

  12439   2 00032D  E847 0017                            LDR,R6   TXTBYTSIZ,AUTO
          2 00032F  6041                                 SOR,R6   1
          2 000330  F856                                 LDR,R7   R6
          2 000331  6C00                                 LDV,R6   0
          2 000332  8447 0006                            AID      PUT$,AUTO
          2 000334  8D47 0006                            SDI      PUT$,AUTO

      600    12440    2      END;

      601    12441    1      TXTBYTSIZ = KV$SNDCQ.MSG4_.BYTSIZ;

  12441   2 000336  E846 000F                            LDR,R6   15,B6
          2 000338  EF47 0017                            STR,R6   TXTBYTSIZ,AUTO

      602    12442    2      IF TXTBYTSIZ ~= 0 THEN DO;

  12442   2 00033A  6901 0014                            BEZ,R6   s:12447,PREL

      603    12443    2         PUT$->DATTXT = SUBSTR(KV$SNDCQ.MSG4_.ADR$->DMYTXT,

  12443   2 00033C  DCC6 000C                            LDB,B5   12,B6
          2 00033E  D846 000E                            LDR,R5   14,B6
          2 000340  AB85                                 LAB,B2   ,B5
          2 000341  A855                                 LDR,R2   R5
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:97   
          2 000342  BCC7 0006                            LDB,B3   PUT$,AUTO
          2 000344  3C00                                 LDV,R3   0
          2 000345  0008                                 MMM

      604    12444    2           KV$SNDCQ.MSG4_.BYTX, TXTBYTSIZ);
      605    12445    2         PUT$ = PINCRW(PUT$,TXTBYTSIZ/2);  /* MSGn_'s are dword bounded          */

  12445   2 000346  E847 0017                            LDR,R6   TXTBYTSIZ,AUTO
          2 000348  6041                                 SOR,R6   1
          2 000349  F856                                 LDR,R7   R6
          2 00034A  6C00                                 LDV,R6   0
          2 00034B  8447 0006                            AID      PUT$,AUTO
          2 00034D  8D47 0006                            SDI      PUT$,AUTO

      606    12446    2      END;

      607    12447    1      TXTBYTSIZ = KV$SNDCQ.MSG5_.BYTSIZ;

  12447   2 00034F  E846 0013                            LDR,R6   19,B6
          2 000351  EF47 0017                            STR,R6   TXTBYTSIZ,AUTO

      608    12448    2      IF TXTBYTSIZ ~= 0 THEN DO;

  12448   2 000353  6901 0014                            BEZ,R6   s:12453,PREL

      609    12449    2         PUT$->DATTXT = SUBSTR(KV$SNDCQ.MSG5_.ADR$->DMYTXT,

  12449   2 000355  DCC6 0010                            LDB,B5   16,B6
          2 000357  D846 0012                            LDR,R5   18,B6
          2 000359  AB85                                 LAB,B2   ,B5
          2 00035A  A855                                 LDR,R2   R5
          2 00035B  BCC7 0006                            LDB,B3   PUT$,AUTO
          2 00035D  3C00                                 LDV,R3   0
          2 00035E  0008                                 MMM

      610    12450    2           KV$SNDCQ.MSG5_.BYTX, TXTBYTSIZ);
      611    12451    2         PUT$ = PINCRW(PUT$,TXTBYTSIZ/2);  /* MSGn_'s are dword bounded          */
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:98   

  12451   2 00035F  E847 0017                            LDR,R6   TXTBYTSIZ,AUTO
          2 000361  6041                                 SOR,R6   1
          2 000362  F856                                 LDR,R7   R6
          2 000363  6C00                                 LDV,R6   0
          2 000364  8447 0006                            AID      PUT$,AUTO
          2 000366  8D47 0006                            SDI      PUT$,AUTO

      612    12452    2      END;

      613    12453    1      TXTBYTSIZ = KV$SNDCQ.MSG6_.BYTSIZ;

  12453   2 000368  E846 0017                            LDR,R6   23,B6
          2 00036A  EF47 0017                            STR,R6   TXTBYTSIZ,AUTO

      614    12454    2      IF TXTBYTSIZ ~= 0 THEN DO;

  12454   2 00036C  6901 0014                            BEZ,R6   s:12459,PREL

      615    12455    2         PUT$->DATTXT = SUBSTR(KV$SNDCQ.MSG6_.ADR$->DMYTXT,

  12455   2 00036E  DCC6 0014                            LDB,B5   20,B6
          2 000370  D846 0016                            LDR,R5   22,B6
          2 000372  AB85                                 LAB,B2   ,B5
          2 000373  A855                                 LDR,R2   R5
          2 000374  BCC7 0006                            LDB,B3   PUT$,AUTO
          2 000376  3C00                                 LDV,R3   0
          2 000377  0008                                 MMM

      616    12456    2           KV$SNDCQ.MSG6_.BYTX, TXTBYTSIZ);
      617    12457    2         PUT$ = PINCRW(PUT$,TXTBYTSIZ/2);  /* MSGn_'s are dword bounded          */

  12457   2 000378  E847 0017                            LDR,R6   TXTBYTSIZ,AUTO
          2 00037A  6041                                 SOR,R6   1
          2 00037B  F856                                 LDR,R7   R6
          2 00037C  6C00                                 LDV,R6   0
          2 00037D  8447 0006                            AID      PUT$,AUTO
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:99   
          2 00037F  8D47 0006                            SDI      PUT$,AUTO

      618    12458    2      END;

      619    12459    1      KVM_SND_PRV$->KNH$MESS.LAST_PTR = LOOP_CNT;

  12459   2 000381  DC80 0000 0002  01                   LDB,B5   KVM_SND_PRV$
          2 000384  E847 0013                            LDR,R6   LOOP_CNT,AUTO
          2 000386  EF45 0005                            STR,R6   5,B5

      620    12460        /*
      621    12461           That's all we do for X.25.
      622    12462        */
      623    12463        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:100  
      624    12464
      625    12465        /*
      626    12466           Normal return
      627    12467        */
      628    12468    1   NRMRET:
      629    12469
      630    12470        /* save IPTR as KVM_SND_PRV_IPTR before updating it */
      631    12471
      632    12472
      633    12473    1      IF INHLVL~=KH_INHLVL

  12473   2 000388  E847 0010            NRMRET          LDR,R6   INHLVL,AUTO
          2 00038A  E900 0000 0000  xsym                 CMR,R6   KH_INHLVL
          2 00038D  0901 0007                            BE       s:12476,PREL

      634    12474    1      THEN CALL KHI$ENABLE;

  12474   2 00038F  CBF0 0000                            LAB,B4   0,IMO
          2 000391  E380 0000 0000  xent                 LNJ,B6   KHI$ENABLE
          2 000394       0001                            DC       s:12476,PREL

      635    12475
      636    12476    1      RETURN;

  12476   2 000395  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      637    12477
      638    12478        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:101  
      639    12479
      640    12480        /*I*
      641    12481            NAME: KVM$FNDSPACE
      642    12482            PURPOSE:
      643    12483                  Find the space in CQ (or extensions) required by the
      644    12484                  current message.
      645    12485            CALL: calculate the word-size requirement, then CALL KVM$FNDSPACE.
      646    12486            DESCRIPTION:
      647    12487                  The monitor CQ and the CQ extensions, if any exists, form
      648    12488                  a linked list of message holding buffers. At any entry to
      649    12489                  KVM$SND, we may be using the main CQ, or the extensions.
      650    12490                  If we are not using the main CQ, try to absorb as many
      651    12491                  CQ extensions into the main CQ as the latter can hold,
      652    12492                  because only messages there actually got looked at.
      653    12493                  Then see if there is room to meet the current size
      654    12494                  requirement. If so, just return. Otherwise, if we are not called by
      655    12495                  X.25, call KVS$GETBFR to get at least 256 bytes, and use that as
      656    12496                  a CQ extension. If that should fail, we screech.
      657    12497                  We will not attempt to find a CQ extension for X.25.
      658    12498        */
      659    12499    1   KVM$FNDSPACE: PROC ALTRET;

  12499   2 000398  EFC7 0034            KVM$FNDSPACE    STB,B6   @Y@BFRDSC__+2,AUTO

      660    12500        %KNH$QHDR (FPTN=KNH$XTNQ,STCLASS="BASED(KV_SNDCQ_QHDR$)",
      661    12501         EXTENSION=YES,EXTENSION_DWD=STT$ PTR);
      662    12514        %FPT_WRTMLT (FPTN=KV_FPT_WRTMLT,STCLASS=STATIC SYMDEF);
      663    12534    2   DCL 1 CTX BASED,
      664    12535    2          2 LNK$ PTR;
      665    12536    2   DCL DBLWRDSIZ UBIN;
      666    12537    2   DCL KV@SND_SAVE_QHDR$ PTR;
      667    12538    2   DCL NOP_MSG$ PTR;
      668    12539    2   DCL SPACE1 UBIN;
      669    12540    2   DCL SPACE2 UBIN;
      670    12541    2   DCL ABSORB BIT(1);
      671    12542    2   DCL EXT_DBLWRDSIZ UBIN WORD;
      672    12543    2   DCL EXT_BYTSIZ UBIN WORD;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:102  
      673    12544    2   DCL EXT_BODY CHAR(EXT_BYTSIZ) ALIGNED BASED;
      674    12545    2   DCL TAKE$ PTR;
      675    12546        %EQU G_QHDR = CHARTEXT('G$HAND_Q$->KNH$QHDR');
      676    12547        %EQU K_QHDR = CHARTEXT('KV_SNDCQ_QHDR$->KNH$QHDR');
      677    12548        /* beginning of proc */
      678    12549
      679    12550    2      IF NOT_X25 THEN

  12550   2 00039A  89C7 0012                            CMZ      NOT_X25,AUTO
          2 00039C  0881 0017                            BAGE     s:12557,PREL

      680    12551    3      DO;

      681    12552    3         MSGWRDSIZ = MSGWRDSIZ+VLP_WRDSIZ;

  12552   2 00039E  E847 000F                            LDR,R6   MSGWRDSIZ,AUTO
          2 0003A0  EA47 0014                            ADD,R6   VLP_WRDSIZ,AUTO
          2 0003A2  EF47 000F                            STR,R6   MSGWRDSIZ,AUTO

      682    12553    3         IF NOT KONCAT

  12553   2 0003A4  89C7 0011                            CMZ      KONCAT,AUTO
          2 0003A6  0801 0008                            BAL      s:12555,PREL

      683    12554    3         THEN SZ = SZ + SIZEW(KNH$MESS) + MSGWRDSIZ;

  12554   2 0003A8  EA47 000E                            ADD,R6   SZ,AUTO
          2 0003AA  6E08                                 ADV,R6   8
          2 0003AB  EF47 000E                            STR,R6   SZ,AUTO
          2 0003AD  0F81 0006                            B        s:12557,PREL

      684    12555    3         ELSE SZ = MSGWRDSIZ - KVM_SND_SCQ_SLKWRD;

  12555   2 0003AF  E200 0000 0001  01                   SUB,R6   KVM_SND_SCQ_SLKWRD
          2 0003B2  EF47 000E                            STR,R6   SZ,AUTO

      685    12556    3      END;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:103  

      686    12557    2      CALL KHI$DISABLE (INHLVL);

  12557   2 0003B4  DBC7 0010                            LAB,B5   INHLVL,AUTO
          2 0003B6  DFC7 0042                            STB,B5   TAKE$+2,AUTO
          2 0003B8  BBC7 0042                            LAB,B3   TAKE$+2,AUTO
          2 0003BA  CBF0 0100                            LAB,B4   256,IMO
          2 0003BC  E380 0000 0000  xent                 LNJ,B6   KHI$DISABLE
          2 0003BF       0001                            DC       s:12560,PREL

      687    12558        /* Are we using the main CQ? */
      688    12559
      689    12560    2      IF KV_SNDCQ_QHDR$ ~= G$HAND_Q$ THEN

  12560   2 0003C0  EC80 0000 0000  xsym                 LDB,B6   KV_SNDCQ_QHDR$
          2 0003C3  ED80 0000 0000  xsym                 CMB,B6   G$HAND_Q$
          2 0003C6  0901 010F                            BE       s:12633,PREL

      690    12561    3      DO;

      691    12562    3         CALL M$WRTMLT (KV_FPT_WRTMLT) WHENRETURN

  12562   2 0003C8  BB80 0000 0004  01                   LAB,B3   KV_FPT_WRTMLT
          2 0003CB  B870 1144                            LDR,R3   4420,IMO
          2 0003CD  0001                                 MCL
          2 0003CE       0008                            DC       s:12570,PREL

      692    12563    4         DO;

      693    12564    4            %G_QHDR.SCQ.IPTR = 0;

  12564   2 0003CF  EC80 0000 0000  xsym                 LDB,B6   G$HAND_Q$
          2 0003D2  8746 0004                            CL       4,B6

      694    12565    4            %G_QHDR.SCQ.RPTR = 0;          /* got to play with RPTR here         */

  12565   2 0003D4  8746 0005                            CL       5,B6
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:104  

      695    12566    4         END;

      696    12567
      697    12568        /* try to absorb as many extensions as the main CQ can hold */
      698    12569
      699    12570    3         KV@SND_SAVE_QHDR$ = KV_SNDCQ_QHDR$;

  12570   2 0003D6  EC80 0000 0000  xsym                 LDB,B6   KV_SNDCQ_QHDR$
          2 0003D9  EFC7 0037                            STB,B6   KV@SND_SAVE_QHDR$,AUTO

      700    12571    3         KV_SNDCQ_QHDR$ = PINCRW(G$HAND_Q$,%G_QHDR.CTX.OFFSET)->CTX.LNK$;

  12571   2 0003DB  DC80 0000 0000  xsym                 LDB,B5   G$HAND_Q$
          2 0003DE  B845 0008                            LDR,R3   8,B5
          2 0003E0  F853                                 LDR,R7   R3
          2 0003E1  6C00                                 LDV,R6   0
          2 0003E2  8400 0000 0000  xsym                 AID      G$HAND_Q$
          2 0003E5  8D47 0042                            SDI      TAKE$+2,AUTO
          2 0003E7  CCC7 0042                            LDB,B4   TAKE$+2,AUTO
          2 0003E9  BC84                                 LDB,B3   ,B4
          2 0003EA  BF80 0000 0000  xsym                 STB,B3   KV_SNDCQ_QHDR$

      701    12572    4         DO UNTIL (KV_SNDCQ_QHDR$ = ADDR(NIL));

      702    12573    4            EXT_DBLWRDSIZ = %K_QHDR.SCQ.IPTR - %K_QHDR.SCQ.RPTR;

  12573   2 0003ED  EC80 0000 0000  xsym                 LDB,B6   KV_SNDCQ_QHDR$
          2 0003F0  E846 0004                            LDR,R6   4,B6
          2 0003F2  E246 0005                            SUB,R6   5,B6
          2 0003F4  EF47 003E                            STR,R6   EXT_DBLWRDSIZ,AUTO

      703    12574    4            EXT_BYTSIZ = EXT_DBLWRDSIZ * 4;

  12574   2 0003F6  6002                                 SOL,R6   2
          2 0003F7  EF47 003F                            STR,R6   EXT_BYTSIZ,AUTO

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:105  
      704    12575
      705    12576        /* find out if there's room in main CQ */
      706    12577
      707    12578    4            IF %G_QHDR.SCQ.IPTR >= %G_QHDR.SCQ.RPTR THEN

  12578   2 0003F9  DC80 0000 0000  xsym                 LDB,B5   G$HAND_Q$
          2 0003FC  D845 0004                            LDR,R5   4,B5
          2 0003FE  D945 0005                            CMR,R5   5,B5
          2 000400  0201 000C                            BL       s:12585,PREL

      708    12579    5            DO;

      709    12580    5               SPACE1 = %G_QHDR.SCQ.SZ - %G_QHDR.SCQ.IPTR;

  12580   2 000402  D245 0006                            SUB,R5   6,B5
          2 000404  8255                                 NEG      R5
          2 000405  DF47 003B                            STR,R5   SPACE1,AUTO

      710    12581    5               SPACE2 = %G_QHDR.SCQ.RPTR;

  12581   2 000407  C845 0005                            LDR,R4   5,B5
          2 000409  CF47 003C                            STR,R4   SPACE2,AUTO

      711    12582    5            END;

  12582   2 00040B  0F81 0008                            B        s:12588,PREL

      712    12583    4            ELSE
      713    12584    5            DO;

      714    12585    5               SPACE1 = %G_QHDR.SCQ.RPTR - %G_QHDR.SCQ.IPTR;

  12585   2 00040D  D245 0005                            SUB,R5   5,B5
          2 00040F  8255                                 NEG      R5
          2 000410  DF47 003B                            STR,R5   SPACE1,AUTO

      715    12586    5               SPACE2 = 0;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:106  

  12586   2 000412  8747 003C                            CL       SPACE2,AUTO

      716    12587    5            END;

      717    12588    4            ABSORB = '0'B;

  12588   2 000414  8747 003D                            CL       ABSORB,AUTO

      718    12589    4            IF SPACE1 >= EXT_DBLWRDSIZ + (SIZEW(KNH_MESS) + 1)/2

  12589   2 000416  C847 003E                            LDR,R4   EXT_DBLWRDSIZ,AUTO
          2 000418  4E04                                 ADV,R4   4
          2 000419  C955                                 CMR,R4   R5
          2 00041A  0301 0006                            BG       s:12592,PREL

      719    12590    4            THEN ABSORB='1'B;

  12590   2 00041C  8947 003D                            LBT,'8000'X       ABSORB,AUTO
  12590   2 00041E       8000
          2 00041F  0F81 002D                            B        s:12603,PREL

      720    12591    4            ELSE
      721    12592    4            IF SPACE2 > EXT_DBLWRDSIZ THEN

  12592   2 000421  B847 003C                            LDR,R3   SPACE2,AUTO
          2 000423  B947 003E                            CMR,R3   EXT_DBLWRDSIZ,AUTO
          2 000425  0381 0027                            BLE      s:12603,PREL

      722    12593    5            DO;

      723    12594        /* we need a NOP message to bound out to the end of the CQ */
      724    12595    5               NOP_MSG$ = PINCRW(G$HAND_Q$,%G_QHDR.SCQ.OFFSET+%G_QHDR.SCQ.IPTR*2);

  12595   2 000427  A845 0004                            LDR,R2   4,B5
          2 000429  2001                                 SOL,R2   1
          2 00042A  AA45 0007                            ADD,R2   7,B5
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:107  
          2 00042C  F852                                 LDR,R7   R2
          2 00042D  6C00                                 LDV,R6   0
          2 00042E  8400 0000 0000  xsym                 AID      G$HAND_Q$
          2 000431  8D47 0039                            SDI      NOP_MSG$,AUTO

      725    12596    5               %NOP_MESS = KNH_MESS;

  12596   2 000433  AB80 0000 0117  00                   LAB,B2   KNH_MESS
          2 000436  2C00                                 LDV,R2   0
          2 000437  6C10                                 LDV,R6   16
          2 000438  BCC7 0039                            LDB,B3   NOP_MSG$,AUTO
          2 00043A  3C00                                 LDV,R3   0
          2 00043B  0008                                 MMM

      726    12597    5               %NOP_MESS.FUNCTION = %KN_FCN_NOP;

  12597   2 00043C  ECC7 0039                            LDB,B6   NOP_MSG$,AUTO
          2 00043E  6C06                                 LDV,R6   6
          2 00043F  EF06                                 STR,R6   ,B6

      727    12598    5              %NOP_MESS.FPTSZ = (%G_QHDR.SCQ.SZ - %G_QHDR.SCQ.IPTR - (SIZEW(KNH_MESS)+
             12598                        1)/2 ) * 4;

  12598   2 000440  D845 0006                            LDR,R5   6,B5
          2 000442  D245 0004                            SUB,R5   4,B5
          2 000444  5002                                 SOL,R5   2
          2 000445  5EF0                                 ADV,R5   -16
          2 000446  DF46 0006                            STR,R5   6,B6

      728    12599        /* CQ is wrapped. set IPTR to 0 */
      729    12600    5               %G_QHDR.SCQ.IPTR = 0;

  12600   2 000448  8745 0004                            CL       4,B5

      730    12601    5               ABSORB='1'B;

  12601   2 00044A  8947 003D                            LBT,'8000'X       ABSORB,AUTO
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:108  
  12601   2 00044C       8000

      731    12602    5            END;

      732    12603    4            IF ABSORB THEN

  12603   2 00044D  89C7 003D                            CMZ      ABSORB,AUTO
          2 00044F  0881 0060                            BAGE     s:12624,PREL

      733    12604    5            DO;

      734    12605    5               PUT$ = PINCRW(G$HAND_Q$,%G_QHDR.SCQ.OFFSET+%G_QHDR.SCQ.IPTR*2);

  12605   2 000451  E845 0004                            LDR,R6   4,B5
          2 000453  6001                                 SOL,R6   1
          2 000454  EA45 0007                            ADD,R6   7,B5
          2 000456  F856                                 LDR,R7   R6
          2 000457  6C00                                 LDV,R6   0
          2 000458  8400 0000 0000  xsym                 AID      G$HAND_Q$
          2 00045B  8D47 0006                            SDI      PUT$,AUTO

      735    12606    5               TAKE$ = PINCRW(KV_SNDCQ_QHDR$,%K_QHDR.SCQ.OFFSET);

  12606   2 00045D  EC80 0000 0000  xsym                 LDB,B6   KV_SNDCQ_QHDR$
          2 000460  B846 0007                            LDR,R3   7,B6
          2 000462  F853                                 LDR,R7   R3
          2 000463  6C00                                 LDV,R6   0
          2 000464  8400 0000 0000  xsym                 AID      KV_SNDCQ_QHDR$
          2 000467  8D47 0040                            SDI      TAKE$,AUTO

      736    12607    5               PUT$->EXT_BODY = TAKE$->EXT_BODY;

  12607   2 000469  ACC7 0040                            LDB,B2   TAKE$,AUTO
          2 00046B  2C00                                 LDV,R2   0
          2 00046C  E847 003F                            LDR,R6   EXT_BYTSIZ,AUTO
          2 00046E  BCC7 0006                            LDB,B3   PUT$,AUTO
          2 000470  3C00                                 LDV,R3   0
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:109  
          2 000471  0008                                 MMM

      737    12608    5               %G_QHDR.SCQ.IPTR = %G_QHDR.SCQ.IPTR + EXT_DBLWRDSIZ;

  12608   2 000472  E845 0004                            LDR,R6   4,B5
          2 000474  EA47 003E                            ADD,R6   EXT_DBLWRDSIZ,AUTO
          2 000476  EF45 0004                            STR,R6   4,B5

      738    12609
      739    12610        /* release the buffer to VDH */
      740    12611    5               KV@VDH_RLSBFR = KV_VDH_RLSBFR;

  12611   2 000478  AB80 0000 0000  xsym                 LAB,B2   KV_VDH_RLSBFR
          2 00047B  2C00                                 LDV,R2   0
          2 00047C  6C0E                                 LDV,R6   14
          2 00047D  BB87                                 LAB,B3   ,AUTO
          2 00047E  3C4A                                 LDV,R3   74
          2 00047F  0008                                 MMM

      741    12612    5               KV@VDH_RLSBFR.STRTYP = %KV_STRTYP_MSG;

  12612   2 000480  6C0B                                 LDV,R6   11
          2 000481  E7C7 002B                            STH,R6   KV@VDH_RLSBFR+6,AUTO

      742    12613    5               KV@VDH_RLSBFR.BFR$ = KV_SNDCQ_QHDR$;

  12613   2 000483  EC80 0000 0000  xsym                 LDB,B6   KV_SNDCQ_QHDR$
          2 000486  EFC7 0026                            STB,B6   KV@VDH_RLSBFR+1,AUTO

      743    12614    5               KV@VDH_RLSBFR.BYTSIZ = %K_QHDR.SCQ.SZ*4 + SIZEC(KNH$XTNQ);

  12614   2 000488  D846 0006                            LDR,R5   6,B6
          2 00048A  5002                                 SOL,R5   2
          2 00048B  5E10                                 ADV,R5   16
          2 00048C  DF47 0028                            STR,R5   KV@VDH_RLSBFR+3,AUTO

      744    12615    5               KV@VDH_RLSBFR.STT$ = KNH$XTNQ.XTNDAT.STT$;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:110  

  12615   2 00048E  CCC6 0002                            LDB,B4   2,B6
          2 000490  CFC7 0029                            STB,B4   KV@VDH_RLSBFR+4,AUTO

      745    12616        /* Update the link pointer in main CQ, so that the absorbed
      746    12617           extension essentially disappears */
      747    12618
      748    12619    5               KV_SNDCQ_QHDR$ = KNH$XTNQ.XTNDAT.LNK$;

  12619   2 000492  AC86                                 LDB,B2   ,B6
          2 000493  AF80 0000 0000  xsym                 STB,B2   KV_SNDCQ_QHDR$

      749    12620    5               PINCRW(G$HAND_Q$,%G_QHDR.CTX.OFFSET)->CTX.LNK$ = KV_SNDCQ_QHDR$;

  12620   2 000496  B845 0008                            LDR,R3   8,B5
          2 000498  F853                                 LDR,R7   R3
          2 000499  6C00                                 LDV,R6   0
          2 00049A  8400 0000 0000  xsym                 AID      G$HAND_Q$
          2 00049D  8D47 0042                            SDI      TAKE$+2,AUTO
          2 00049F  9CC7 0042                            LDB,B1   TAKE$+2,AUTO
          2 0004A1  AF81                                 STB,B2   ,B1

      750    12621    5               CALL KVS$RLSBFR(KV@VDH_RLSBFR);

  12621   2 0004A2  EBC7 0025                            LAB,B6   KV@VDH_RLSBFR,AUTO
          2 0004A4  EFC7 0042                            STB,B6   TAKE$+2,AUTO
          2 0004A6  BBC7 0042                            LAB,B3   TAKE$+2,AUTO
          2 0004A8  CBF0 0100                            LAB,B4   256,IMO
          2 0004AA  E380 0000 0000  xent                 LNJ,B6   KVS$RLSBFR
          2 0004AD       0001                            DC       s:12622,PREL

      751    12622    5            END;

  12622   2 0004AE  0F81 0007                            B        s:12625,PREL

      752    12623    4            ELSE                      /* no room to take in this extension, exit */
      753    12624    4            KV_SNDCQ_QHDR$ = ADDR(NIL);
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:111  

  12624   2 0004B0  EB80 0000 0000                       LAB,B6   0
          2 0004B3  EF80 0000 0000  xsym                 STB,B6   KV_SNDCQ_QHDR$

      754    12625    4         END;                              /* of DO UNTIL                        */

  12625   2 0004B6  8D80 0000 0000  xsym                 CMN      KV_SNDCQ_QHDR$
          2 0004B9  0981 FF33                            BNE      s:12573,PREL

      755    12626    3         IF PINCRW(G$HAND_Q$,%G_QHDR.CTX.OFFSET)->CTX.LNK$ = ADDR(NIL)

  12626   2 0004BB  EC80 0000 0000  xsym                 LDB,B6   G$HAND_Q$
          2 0004BE  B846 0008                            LDR,R3   8,B6
          2 0004C0  F853                                 LDR,R7   R3
          2 0004C1  6C00                                 LDV,R6   0
          2 0004C2  8400 0000 0000  xsym                 AID      G$HAND_Q$
          2 0004C5  8D47 0042                            SDI      TAKE$+2,AUTO
          2 0004C7  DCC7 0042                            LDB,B5   TAKE$+2,AUTO
          2 0004C9  8D85                                 CMN      ,B5
          2 0004CA  0981 0006                            BNE      s:12628,PREL

      756    12627    3         THEN KV_SNDCQ_QHDR$ = G$HAND_Q$;

  12627   2 0004CC  EF80 0000 0000  xsym                 STB,B6   KV_SNDCQ_QHDR$
          2 0004CF  0F81 0006                            B        s:12633,PREL

      757    12628    3         ELSE KV_SNDCQ_QHDR$ = KV@SND_SAVE_QHDR$;

  12628   2 0004D1  DCC7 0037                            LDB,B5   KV@SND_SAVE_QHDR$,AUTO
          2 0004D3  DF80 0000 0000  xsym                 STB,B5   KV_SNDCQ_QHDR$

      758    12629    3      END;

      759    12630
      760    12631        /* shuffling is done */
      761    12632
      762    12633    3      IF SZ=0 THEN DO;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:112  

  12633   2 0004D6  E847 000E                            LDR,R6   SZ,AUTO
          2 0004D8  6981 0010                            BNEZ,R6  s:12638,PREL

      763    12634        /* Just emptying extensions - reset the flag if there are no more */
      764    12635    3         IF KV_SNDCQ_QHDR$=G$HAND_Q$ THEN %K_QHDR.CTX.WU = '0'B;

  12635   2 0004DA  EC80 0000 0000  xsym                 LDB,B6   KV_SNDCQ_QHDR$
          2 0004DD  ED80 0000 0000  xsym                 CMB,B6   G$HAND_Q$
          2 0004E0  0981 0004                            BNE      s:12636,PREL

  12635   2 0004E2  8846 0009                            LBF,'0001'X       9,B6
  12635   2 0004E4       0001

      765    12636    3         RETURN;

  12636   2 0004E5  ECC7 0034                            LDB,B6   @Y@BFRDSC__+2,AUTO
          2 0004E7  C3C6 0001                            LNJ,B4   1,B6

      766    12637    3      END;
      767    12638    2      IF %K_QHDR.SCQ.IPTR >= %K_QHDR.SCQ.RPTR THEN

  12638   2 0004E9  EC80 0000 0000  xsym                 LDB,B6   KV_SNDCQ_QHDR$
          2 0004EC  D846 0004                            LDR,R5   4,B6
          2 0004EE  D946 0005                            CMR,R5   5,B6
          2 0004F0  0201 000C                            BL       s:12645,PREL

      768    12639    3      DO;

      769    12640    3         SPACE1 = %K_QHDR.SCQ.SZ - %K_QHDR.SCQ.IPTR;

  12640   2 0004F2  D246 0006                            SUB,R5   6,B6
          2 0004F4  8255                                 NEG      R5
          2 0004F5  DF47 003B                            STR,R5   SPACE1,AUTO

      770    12641    3         SPACE2 = %K_QHDR.SCQ.RPTR;

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:113  
  12641   2 0004F7  C846 0005                            LDR,R4   5,B6
          2 0004F9  CF47 003C                            STR,R4   SPACE2,AUTO

      771    12642    3      END;

  12642   2 0004FB  0F81 0008                            B        s:12648,PREL

      772    12643    2      ELSE
      773    12644    3      DO;

      774    12645    3         SPACE1 = %K_QHDR.SCQ.RPTR - %K_QHDR.SCQ.IPTR - 1;

  12645   2 0004FD  D246 0005                            SUB,R5   5,B6
          2 0004FF  8655                                 CPL      R5
          2 000500  DF47 003B                            STR,R5   SPACE1,AUTO

      775    12646    3         SPACE2 = 0;

  12646   2 000502  8747 003C                            CL       SPACE2,AUTO

      776    12647    3      END;

      777    12648    2      DBLWRDSIZ = (SZ + 1) / 2;

  12648   2 000504  6E01                                 ADV,R6   1
          2 000505  6041                                 SOR,R6   1
          2 000506  EF47 0036                            STR,R6   DBLWRDSIZ,AUTO

      778    12649    2      IF SPACE1 >= DBLWRDSIZ + (SIZEW(KNH_MESS) + 1)/2 THEN

  12649   2 000508  6E04                                 ADV,R6   4
          2 000509  E955                                 CMR,R6   R5
          2 00050A  0301 0020                            BG       s:12657,PREL

      779    12650    3      DO;

      780    12651    3         PUT$ = PINCRW(KV_SNDCQ_QHDR$,%K_QHDR.SCQ.OFFSET+%K_QHDR.SCQ.IPTR*2);
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:114  

  12651   2 00050C  C846 0004                            LDR,R4   4,B6
          2 00050E  4001                                 SOL,R4   1
          2 00050F  CA46 0007                            ADD,R4   7,B6
          2 000511  F854                                 LDR,R7   R4
          2 000512  6C00                                 LDV,R6   0
          2 000513  8400 0000 0000  xsym                 AID      KV_SNDCQ_QHDR$
          2 000516  8D47 0006                            SDI      PUT$,AUTO

      781    12652    3         IF KONCAT THEN PUT$ = PINCRW(PUT$,-KVM_SND_SCQ_SLKWRD);

  12652   2 000518  89C7 0011                            CMZ      KONCAT,AUTO
          2 00051A  0881 000E                            BAGE     s:12653,PREL

  12652   2 00051C  F800 0000 0001  01                   LDR,R7   KVM_SND_SCQ_SLKWRD
          2 00051F  6C00                                 LDV,R6   0
          2 000520  84C7 0006                            SID      PUT$,AUTO
          2 000522  8656                                 CPL      R6
          2 000523  8657                                 CPL      R7
          2 000524  8470 0000 0001                       AID      1,IMO
          2 000527  8D47 0006                            SDI      PUT$,AUTO

      782    12653    3         GOTO FND_RETURN;

  12653   2 000529  0F81 00EF                            B        s:12732,PREL

      783    12654    3      END;
      784    12655    2      ELSE
      785    12656    3      DO;

      786    12657    4         IF KONCAT THEN DO;

  12657   2 00052B  89C7 0011                            CMZ      KONCAT,AUTO
          2 00052D  0881 0017                            BAGE     s:12673,PREL

      787    12658        /*
      788    12659        We are not able to concatenate the message. So add back the size of
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:115  
      789    12660        the message header, and the slack word (0 or 1) which we took off
      790    12661        from SZ when we were trying to concatenate.
      791    12662        */
      792    12663        /*N* Until KONCAT is implemented except for DAT VDOs in forms,
      793    12664        just altret here, to terminate the read. */
      794    12665    5            IF SZ>0 THEN DO;

  12665   2 00052F  C847 000E                            LDR,R4   SZ,AUTO
          2 000531  4901 0007                            BEZ,R4   s:12669,PREL

      795    12666    5               SZ = 0;

  12666   2 000533  8747 000E                            CL       SZ,AUTO

      796    12667    5               ALTRETURN;

  12667   2 000535  ECC7 0034                            LDB,B6   @Y@BFRDSC__+2,AUTO
          2 000537  B806                                 LDR,R3   ,B6
          2 000538  C3B6                                 LNJ,B4   ,B6,R3

      797    12668    5            END;
      798    12669    4            SZ = SZ + SIZEW(KNH_MESS) + KVM_SND_SCQ_SLKWRD;

  12669   2 000539  CA00 0000 0001  01                   ADD,R4   KVM_SND_SCQ_SLKWRD
          2 00053C  4E08                                 ADV,R4   8
          2 00053D  CF47 000E                            STR,R4   SZ,AUTO

      799    12670    4            DBLWRDSIZ = (SZ + 1) / 2;

  12670   2 00053F  4E01                                 ADV,R4   1
          2 000540  4041                                 SOR,R4   1
          2 000541  CF47 0036                            STR,R4   DBLWRDSIZ,AUTO

      800    12671    4            KONCAT = '0'B;

  12671   2 000543  8747 0011                            CL       KONCAT,AUTO

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:116  
      801    12672    4         END;

      802    12673    3         IF SPACE2 > DBLWRDSIZ THEN

  12673   2 000545  E847 003C                            LDR,R6   SPACE2,AUTO
          2 000547  E947 0036                            CMR,R6   DBLWRDSIZ,AUTO
          2 000549  0381 0032                            BLE      s:12685,PREL

      803    12674    4         DO;

      804    12675        /* we need a NOP message to bound out to the end of the CQ */
      805    12676    4            NOP_MSG$ = PINCRW(KV_SNDCQ_QHDR$,%K_QHDR.SCQ.OFFSET+%K_QHDR.SCQ.IPTR*2);

  12676   2 00054B  C846 0004                            LDR,R4   4,B6
          2 00054D  4001                                 SOL,R4   1
          2 00054E  CA46 0007                            ADD,R4   7,B6
          2 000550  F854                                 LDR,R7   R4
          2 000551  6C00                                 LDV,R6   0
          2 000552  8400 0000 0000  xsym                 AID      KV_SNDCQ_QHDR$
          2 000555  8D47 0039                            SDI      NOP_MSG$,AUTO

      806    12677    4            %NOP_MESS = KNH_MESS;

  12677   2 000557  AB80 0000 0117  00                   LAB,B2   KNH_MESS
          2 00055A  2C00                                 LDV,R2   0
          2 00055B  6C10                                 LDV,R6   16
          2 00055C  BCC7 0039                            LDB,B3   NOP_MSG$,AUTO
          2 00055E  3C00                                 LDV,R3   0
          2 00055F  0008                                 MMM

      807    12678    4            %NOP_MESS.FUNCTION = %KN_FCN_NOP;

  12678   2 000560  ECC7 0039                            LDB,B6   NOP_MSG$,AUTO
          2 000562  6C06                                 LDV,R6   6
          2 000563  EF06                                 STR,R6   ,B6

      808    12679    4           %NOP_MESS.FPTSZ = (%K_QHDR.SCQ.SZ - %K_QHDR.SCQ.IPTR - (SIZEW(KNH_MESS)+1)/
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:117  
             12679                     2 ) * 4;

  12679   2 000564  DC80 0000 0000  xsym                 LDB,B5   KV_SNDCQ_QHDR$
          2 000567  D845 0006                            LDR,R5   6,B5
          2 000569  D245 0004                            SUB,R5   4,B5
          2 00056B  5002                                 SOL,R5   2
          2 00056C  5EF0                                 ADV,R5   -16
          2 00056D  DF46 0006                            STR,R5   6,B6

      809    12680        /* CQ is wrapped. set IPTR to 0 */
      810    12681    4            %K_QHDR.SCQ.IPTR = 0;

  12681   2 00056F  8745 0004                            CL       4,B5

      811    12682    4            PUT$ = PINCRW(KV_SNDCQ_QHDR$,%K_QHDR.SCQ.OFFSET);

  12682   2 000571  B845 0007                            LDR,R3   7,B5
          2 000573  F853                                 LDR,R7   R3
          2 000574  6C00                                 LDV,R6   0
          2 000575  8400 0000 0000  xsym                 AID      KV_SNDCQ_QHDR$
          2 000578  8D47 0006                            SDI      PUT$,AUTO

      812    12683    4            GOTO FND_RETURN;

  12683   2 00057A  0F81 009E                            B        s:12732,PREL

      813    12684    4         END;
      814    12685    3         IF %K_QHDR.SCQ.SZ >= DBLWRDSIZ AND %K_QHDR.SCQ.IPTR = %K_QHDR.SCQ.RPTR THEN

  12685   2 00057C  C846 0006                            LDR,R4   6,B6
          2 00057E  C947 0036                            CMR,R4   DBLWRDSIZ,AUTO
          2 000580  0201 0016                            BL       s:12696,PREL
          2 000582  B846 0004                            LDR,R3   4,B6
          2 000584  B946 0005                            CMR,R3   5,B6
          2 000586  0981 0010                            BNE      s:12696,PREL

      815    12686    4         DO;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:118  

      816    12687
      817    12688        /* The Q is actually empty, but this message wont fit in either part.
      818    12689           Make like it wrapped. */
      819    12690
      820    12691    4            %K_QHDR.SCQ.IPTR = 0;

  12691   2 000588  8746 0004                            CL       4,B6

      821    12692    4            %K_QHDR.SCQ.RPTR = 0;

  12692   2 00058A  8746 0005                            CL       5,B6

      822    12693    4            PUT$ = PINCRW(KV_SNDCQ_QHDR$,%K_QHDR.SCQ.OFFSET);

  12693   2 00058C  B846 0007                            LDR,R3   7,B6
          2 00058E  F853                                 LDR,R7   R3
          2 00058F  6C00                                 LDV,R6   0
          2 000590  8400 0000 0000  xsym                 AID      KV_SNDCQ_QHDR$
          2 000593  8D47 0006                            SDI      PUT$,AUTO

      823    12694    4            GOTO FND_RETURN;

  12694   2 000595  0F81 0083                            B        s:12732,PREL

      824    12695    4         END;
      825    12696    4         IF %G_QHDR.SCQ.SZ<DBLWRDSIZ THEN DO;

  12696   2 000597  DC80 0000 0000  xsym                 LDB,B5   G$HAND_Q$
          2 00059A  B845 0006                            LDR,R3   6,B5
          2 00059C  B947 0036                            CMR,R3   DBLWRDSIZ,AUTO
          2 00059E  0281 000A                            BGE      s:12708,PREL

      826    12697
      827    12698        /* This one's never gonna fit - give up.*/
      828    12699
      829    12700    4            SZ = DBLWRDSIZ-%G_QHDR.SCQ.SZ;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:119  

  12700   2 0005A0  B247 0036                            SUB,R3   DBLWRDSIZ,AUTO
          2 0005A2  8253                                 NEG      R3
          2 0005A3  BF47 000E                            STR,R3   SZ,AUTO

      830    12701    4            ALTRETURN;

  12701   2 0005A5  ECC7 0034                            LDB,B6   @Y@BFRDSC__+2,AUTO
          2 0005A7  A806                                 LDR,R2   ,B6
          2 0005A8  C3A6                                 LNJ,B4   ,B6,R2

      831    12702    4         END;
      832    12703    3      END;
      833    12704
      834    12705        /* For us to get here, the current CQ must be full. Get CQ extension */
      835    12706        /* However, if we are called by X.25, just altret. */
      836    12707
      837    12708    2      IF NOT NOT_X25 THEN ALTRETURN;       /* Excuse the use of 'NOT NOT_X25'    */

  12708   2 0005A9  89C7 0012                            CMZ      NOT_X25,AUTO
          2 0005AB  0801 0005                            BAL      s:12710,PREL

  12708   2 0005AD  ECC7 0034                            LDB,B6   @Y@BFRDSC__+2,AUTO
          2 0005AF  A806                                 LDR,R2   ,B6
          2 0005B0  C3A6                                 LNJ,B4   ,B6,R2

      838    12709
      839    12710    2      KV@VDH_GETBFR = KV_VDH_GETBFR;

  12710   2 0005B1  AB80 0000 0000  xsym                 LAB,B2   KV_VDH_GETBFR
          2 0005B4  2C00                                 LDV,R2   0
          2 0005B5  6C16                                 LDV,R6   22
          2 0005B6  BB87                                 LAB,B3   ,AUTO
          2 0005B7  3C34                                 LDV,R3   52
          2 0005B8  0008                                 MMM

      840    12711    2      KV@VDH_GETBFR.STRTYP = %KV_STRTYP_MSG;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:120  

  12711   2 0005B9  6C0B                                 LDV,R6   11
          2 0005BA  E7C7 0020                            STH,R6   KV@VDH_GETBFR+6,AUTO

      841    12712    2      KV@VDH_GETBFR.BYTSIZ = DBLWRDSIZ*4 + SIZEC(KNH$XTNQ);

  12712   2 0005BC  D847 0036                            LDR,R5   DBLWRDSIZ,AUTO
          2 0005BE  5002                                 SOL,R5   2
          2 0005BF  5E10                                 ADV,R5   16
          2 0005C0  DF47 001D                            STR,R5   KV@VDH_GETBFR+3,AUTO

      842    12713    2      KV@VDH_GETBFR.SCRNO_MMR = '1'B;

  12713   2 0005C2  8947 0020                            LBT,'0001'X       KV@VDH_GETBFR+6,AUTO
  12713   2 0005C4       0001

      843    12714    2      CALL KVS$GETBFR(KV@VDH_GETBFR);

  12714   2 0005C5  EBC7 001A                            LAB,B6   KV@VDH_GETBFR,AUTO
          2 0005C7  EFC7 0042                            STB,B6   TAKE$+2,AUTO
          2 0005C9  BBC7 0042                            LAB,B3   TAKE$+2,AUTO
          2 0005CB  CBF0 0100                            LAB,B4   256,IMO
          2 0005CD  E380 0000 0000  xent                 LNJ,B6   KVS$GETBFR
          2 0005D0       0001                            DC       s:12718,PREL

      844    12715
      845    12716        /* now we have to set up the QHDR of the CQ extension */
      846    12717
      847    12718    2      %G_QHDR.CTX.WU = '1'B;               /* Wake up when the SCQ empties.      */

  12718   2 0005D1  EC80 0000 0000  xsym                 LDB,B6   G$HAND_Q$
          2 0005D4  8946 0009                            LBT,'0001'X       9,B6
          2 0005D6       0001

      848    12719    2      IF KV_SNDCQ_QHDR$ = G$HAND_Q$

  12719   2 0005D7  DC80 0000 0000  xsym                 LDB,B5   KV_SNDCQ_QHDR$
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:121  
          2 0005DA  DD80 0000 0000  xsym                 CMB,B5   G$HAND_Q$
          2 0005DD  0981 0011                            BNE      s:12721,PREL

      849    12720    2      THEN PINCRW(KV_SNDCQ_QHDR$,%K_QHDR.CTX.OFFSET)->CTX.LNK$ = KV@VDH_GETBFR.BFR$;

  12720   2 0005DF  B845 0008                            LDR,R3   8,B5
          2 0005E1  F853                                 LDR,R7   R3
          2 0005E2  6C00                                 LDV,R6   0
          2 0005E3  8400 0000 0000  xsym                 AID      KV_SNDCQ_QHDR$
          2 0005E6  CCC7 001B                            LDB,B4   KV@VDH_GETBFR+1,AUTO
          2 0005E8  8D47 0042                            SDI      TAKE$+2,AUTO
          2 0005EA  BCC7 0042                            LDB,B3   TAKE$+2,AUTO
          2 0005EC  CF83                                 STB,B4   ,B3
          2 0005ED  0F81 0004                            B        s:12722,PREL

      850    12721    2      ELSE %K_QHDR.XTNDAT.LNK$ = KV@VDH_GETBFR.BFR$;

  12721   2 0005EF  CCC7 001B                            LDB,B4   KV@VDH_GETBFR+1,AUTO
          2 0005F1  CF85                                 STB,B4   ,B5

      851    12722    2      KV_SNDCQ_QHDR$ = KV@VDH_GETBFR.BFR$;

  12722   2 0005F2  DCC7 001B                            LDB,B5   KV@VDH_GETBFR+1,AUTO
          2 0005F4  DF80 0000 0000  xsym                 STB,B5   KV_SNDCQ_QHDR$

      852    12723    2      %K_QHDR.SCQ.IPTR = 0;

  12723   2 0005F7  8745 0004                            CL       4,B5

      853    12724    2      %K_QHDR.SCQ.RPTR = 0;

  12724   2 0005F9  8745 0005                            CL       5,B5

      854    12725        /*N* SIZEW of QHDR & CTX must be kept even */
      855    12726    2      %K_QHDR.SCQ.OFFSET = SIZEW(KNH$XTNQ);

  12726   2 0005FB  6C08                                 LDV,R6   8
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:122  
          2 0005FC  EF45 0007                            STR,R6   7,B5

      856    12727    2      %K_QHDR.SCQ.SZ = KV@VDH_GETBFR.BYTSIZ/4 - %K_QHDR.SCQ.OFFSET/2;

  12727   2 0005FE  D847 001D                            LDR,R5   KV@VDH_GETBFR+3,AUTO
          2 000600  5042                                 SOR,R5   2
          2 000601  6041                                 SOR,R6   1
          2 000602  D256                                 SUB,R5   R6
          2 000603  DF45 0006                            STR,R5   6,B5

      857    12728    2      KNH$XTNQ.XTNDAT.STT$ = Y@STT$;

  12728   2 000605  CCC7 000C                            LDB,B4   Y@STT$,AUTO
          2 000607  CFC5 0002                            STB,B4   2,B5

      858    12729    2      KNH$XTNQ.XTNDAT.LNK$ = ADDR(NIL);

  12729   2 000609  BB80 0000 0000                       LAB,B3   0
          2 00060C  BF85                                 STB,B3   ,B5

      859    12730    2      PUT$ = PINCRW(KV_SNDCQ_QHDR$,%K_QHDR.SCQ.OFFSET);

  12730   2 00060D  DC80 0000 0000  xsym                 LDB,B5   KV_SNDCQ_QHDR$
          2 000610  B845 0007                            LDR,R3   7,B5
          2 000612  F853                                 LDR,R7   R3
          2 000613  6C00                                 LDV,R6   0
          2 000614  8400 0000 0000  xsym                 AID      KV_SNDCQ_QHDR$
          2 000617  8D47 0006                            SDI      PUT$,AUTO

      860    12731    2   FND_RETURN:                             /*  set up some pointers for tracing  */
      861    12732    3      IF NOT KONCAT THEN DO;

  12732   2 000619  89C7 0011            FND_RETURN      CMZ      KONCAT,AUTO
          2 00061B  0801 0018                            BAL      s:12739,PREL

      862    12733    3         KVM_SND_PRV$ = PUT$;

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:123  
  12733   2 00061D  ECC7 0006                            LDB,B6   PUT$,AUTO
          2 00061F  EF80 0000 0002  01                   STB,B6   KVM_SND_PRV$

      863    12734    3         LOOP_CNT = 0;

  12734   2 000622  8747 0013                            CL       LOOP_CNT,AUTO

      864    12735    3         IF KV_SNDCQ_QHDR$~=G$HAND_Q$ THEN EXIT;

  12735   2 000624  DC80 0000 0000  xsym                 LDB,B5   KV_SNDCQ_QHDR$
          2 000627  DD80 0000 0000  xsym                 CMB,B5   G$HAND_Q$
          2 00062A  0981 0009                            BNE      s:12739,PREL

      865    12736    3         LOOP_CNT = KNH$QHDR.LAST_SCQPTR;  /* Save to store in the message       */

  12736   2 00062C  D845 0017                            LDR,R5   23,B5
          2 00062E  DF47 0013                            STR,R5   LOOP_CNT,AUTO

      866    12737    3         KNH$QHDR.LAST_SCQPTR = KNH$QHDR.SCQ.IPTR;

  12737   2 000630  D845 0004                            LDR,R5   4,B5
          2 000632  DF45 0017                            STR,R5   23,B5

      867    12738    3      END;

      868    12739    2      IF NOT_X25 THEN

  12739   2 000634  89C7 0012                            CMZ      NOT_X25,AUTO
          2 000636  0881 0073                            BAGE     s:12766,PREL

      869    12740    3      DO;

      870    12741    3         IF KONCAT THEN

  12741   2 000638  89C7 0011                            CMZ      KONCAT,AUTO
          2 00063A  0881 0018                            BAGE     s:12749,PREL

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:124  
      871    12742    4         DO;

      872    12743    4            Y@KNH$ = ADDR(NIL);

  12743   2 00063C  EB80 0000 0000                       LAB,B6   0
          2 00063F  EFC7 000A                            STB,B6   Y@KNH$,AUTO

      873    12744    4            KVM_SND_PRV$->KNH$MESS.MSGSZ = ((KVM_SND_PRV$->KNH$MESS.MSGSZ+1)/2 +

  12744   2 000641  DC80 0000 0002  01                   LDB,B5   KVM_SND_PRV$
          2 000644  D845 0007                            LDR,R5   7,B5
          2 000646  5E01                                 ADV,R5   1
          2 000647  5041                                 SOR,R5   1
          2 000648  DA47 000F                            ADD,R5   MSGWRDSIZ,AUTO
          2 00064A  5001                                 SOL,R5   1
          2 00064B  8255                                 NEG      R5
          2 00064C  DA47 0016                            ADD,R5   SLACK_BYT,AUTO
          2 00064E  8255                                 NEG      R5
          2 00064F  DF45 0007                            STR,R5   7,B5

      874    12745    4              MSGWRDSIZ)*2 - SLACK_BYT;
      875    12746    4         END;

  12746   2 000651  0F81 004C                            B        s:12763,PREL

      876    12747    3         ELSE
      877    12748    4         DO;

      878    12749    4            Y@KNH$ = PUT$;

  12749   2 000653  ECC7 0006                            LDB,B6   PUT$,AUTO
          2 000655  EFC7 000A                            STB,B6   Y@KNH$,AUTO

      879    12750    4            %MESS = KNH_MESS;

  12750   2 000657  AB80 0000 0117  00                   LAB,B2   KNH_MESS
          2 00065A  2C00                                 LDV,R2   0
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:125  
          2 00065B  6C10                                 LDV,R6   16
          2 00065C  BB86                                 LAB,B3   ,B6
          2 00065D  3C00                                 LDV,R3   0
          2 00065E  0008                                 MMM

      880    12751    4            PUT$->KNH$MESS.LAST_PTR = LOOP_CNT;

  12751   2 00065F  DCC7 0006                            LDB,B5   PUT$,AUTO
          2 000661  E847 0013                            LDR,R6   LOOP_CNT,AUTO
          2 000663  EF45 0005                            STR,R6   5,B5

      881    12752    4            IF %KV_SSN.SSNCNCID=0 AND KV$SND.FNC~=%KV_SND_FNC_SCH

  12752   2 000665  CCC7 0008                            LDB,B4   Y@SSN$,AUTO
          2 000667  D844 0024                            LDR,R5   36,B4
          2 000669  5981 001C                            BNEZ,R5  s:12758,PREL
          2 00066B  ACC7 0004                            LDB,B2   @KV$SND_X,AUTO
          2 00066D  C282                                 LLH,R4   ,B2
          2 00066E  4D0E                                 CMV,R4   14
          2 00066F  0901 0016                            BE       s:12758,PREL

      882    12753    4            THEN IF KV$SND.FNC~=%KV_SND_FNC_CNC OR NOT %KV_SSN.SSNCNCINT THEN

  12753   2 000671  4D03                                 CMV,R4   3
          2 000672  0981 0006                            BNE      s:12755,PREL
          2 000674  82C4 0028                            LB,'0008'X        40,B4
          2 000676       0008
          2 000677  0501 000E                            BBT      s:12758,PREL

      883    12754    5            DO;

      884    12755    5               CALL KHD$SCREECH (KVM_BADLDCT);

  12755   2 000679  BB80 0000 0000  03                   LAB,B3   0
          2 00067C  CBF0 0100                            LAB,B4   256,IMO
          2 00067E  E380 0000 0000  xent                 LNJ,B6   KHD$SCREECH
          2 000681       0001                            DC       s:12756,PREL
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:126  

      885    12756    5               ALTRETURN;

  12756   2 000682  ECC7 0034                            LDB,B6   @Y@BFRDSC__+2,AUTO
          2 000684  B806                                 LDR,R3   ,B6
          2 000685  C3B6                                 LNJ,B4   ,B6,R3

      886    12757    5            END;
      887    12758    4            %MESS.LDCTX = %KV_SSN.SSNCNCID;

  12758   2 000686  ACC7 000A                            LDB,B2   Y@KNH$,AUTO
          2 000688  DF42 0001                            STR,R5   1,B2

      888    12759    4            %MESS.UID$ = KV$PTR.SSN$;

  12759   2 00068A  9C80 0000 0000  xsym                 LDB,B1   KV$PTR$
          2 00068D  ECC1 0002                            LDB,B6   2,B1
          2 00068F  EFC2 0002                            STB,B6   2,B2

      889    12760    4            %MESS.MSGSZ = MSGWRDSIZ*2 - SLACK_BYT;

  12760   2 000691  C847 000F                            LDR,R4   MSGWRDSIZ,AUTO
          2 000693  4001                                 SOL,R4   1
          2 000694  8254                                 NEG      R4
          2 000695  CA47 0016                            ADD,R4   SLACK_BYT,AUTO
          2 000697  8254                                 NEG      R4
          2 000698  CF42 0007                            STR,R4   7,B2

      890    12761    4            PUT$ = PINCRW(PUT$, SIZEW(KNH$MESS));

  12761   2 00069A  BBC5 0008                            LAB,B3   8,B5
          2 00069C  BFC7 0006                            STB,B3   PUT$,AUTO

      891    12762    4         END;

      892    12763    3         IF Y_VDO_YES(KV$SND.FNC)

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:127  
  12763   2 00069E  ECC7 0004                            LDB,B6   @KV$SND_X,AUTO
          2 0006A0  B286                                 LLH,R3   ,B6
          2 0006A1  82B0 0000 016D  00                   LB       Y_VDO_YES,R3
          2 0006A4  0581 0005                            BBF      s:12766,PREL

      893    12764    3         THEN Y@VDO$ = PUT$;

  12764   2 0006A6  DCC7 0006                            LDB,B5   PUT$,AUTO
          2 0006A8  DFC7 0018                            STB,B5   Y@VDO$,AUTO

      894    12765    3      END;

      895    12766    2      KVM_SND_SCQ_SLKWRD = MOD(SZ,2);

  12766   2 0006AA  E847 000E                            LDR,R6   SZ,AUTO
          2 0006AC  E570 0001                            AND,R6   1,IMO
          2 0006AE  EF00 0000 0001  01                   STR,R6   KVM_SND_SCQ_SLKWRD

      896    12767    2      KNH$QHDR.SCQ.IPTR = KNH$QHDR.SCQ.IPTR + (SZ + 1)/2;

  12767   2 0006B1  D847 000E                            LDR,R5   SZ,AUTO
          2 0006B3  5E01                                 ADV,R5   1
          2 0006B4  5041                                 SOR,R5   1
          2 0006B5  EC80 0000 0000  xsym                 LDB,B6   KV_SNDCQ_QHDR$
          2 0006B8  DA46 0004                            ADD,R5   4,B6
          2 0006BA  DF46 0004                            STR,R5   4,B6

      897    12768    2      RETURN;

  12768   2 0006BC  ECC7 0034                            LDB,B6   @Y@BFRDSC__+2,AUTO
          2 0006BE  C3C6 0001                            LNJ,B4   1,B6

      898    12769    2   END KVM$FNDSPACE;
      899    12770
      900    12771        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:128  
      901    12772        /*I*
      902    12773            NAME: KVM$SND_CLSSSN
      903    12774            PURPOSE:
      904    12775                  close session messgae.
      905    12776            CALL: similar to that of KVM$SND_RQSDAT_GNR.
      906    12777            DESCRIPTION:
      907    12778                  call KVM$FNDSPACE to get CQ space. Look at session context
      908    12779                  to determine if we are requesting or responding to close
      909    12780                  session, and then build KV$VDO_CLSSSN with corresponding
      910    12781                  function code.
      911    12782        */
      912    12783
      913    12784    1   KVM$SND_CLSSSN: PROC ;

  12784   2 0006C0  EFC7 0030            KVM$SND_CLSSSN  STB,B6   Y@TRCBFR$+3,AUTO

      914    12785
      915    12786        /* see if we have space in CQ */
      916    12787    2      MSGWRDSIZ = SIZEW(KV$VDO_CLSSSN);

  12787   2 0006C2  6C02                                 LDV,R6   2
          2 0006C3  EF47 000F                            STR,R6   MSGWRDSIZ,AUTO

      917    12788    2      CALL KVM$FNDSPACE;

  12788   2 0006C5  E3C0 FCD2                            LNJ,B6   s:0,PREL
          2 0006C7       0001                            DC       s:12790,PREL

      918    12789        /* build the KV$VDO message in the CQ */
      919    12790    2      IF %KV_SSN.SND_CLSSSN_RSP THEN

  12790   2 0006C8  ECC7 0008                            LDB,B6   Y@SSN$,AUTO
          2 0006CA  82C6 0027                            LB,'0004'X        39,B6
          2 0006CC       0004
          2 0006CD  0581 0009                            BBF      s:12793,PREL

      920    12791    2      %VDO_CLSSSN = KV_VDO_CLSSSN_RSP;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:129  

  12791   2 0006CF  8C80 0000 0146  00                   LDI      KV_VDO_CLSSSN_RSP
          2 0006D2  DCC7 0006                            LDB,B5   PUT$,AUTO
          2 0006D4  8D05                                 SDI      ,B5
          2 0006D5  0F81 0007                            B        s:12794,PREL

      921    12792    2      ELSE
      922    12793    2      %VDO_CLSSSN = KV_VDO_CLSSSN_RQS;

  12793   2 0006D7  8C80 0000 0144  00                   LDI      KV_VDO_CLSSSN_RQS
          2 0006DA  DCC7 0006                            LDB,B5   PUT$,AUTO
          2 0006DC  8D05                                 SDI      ,B5

      923    12794    2      PUT$ = PINCRW(PUT$,SIZEW(KV$VDO_CLSSSN));

  12794   2 0006DD  CBC5 0002                            LAB,B4   2,B5
          2 0006DF  CFC7 0006                            STB,B4   PUT$,AUTO

      924    12795    2      RETURN;

  12795   2 0006E1  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 0006E3  C3C6 0001                            LNJ,B4   1,B6

      925    12796    2   END KVM$SND_CLSSSN;
      926    12797        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:130  
      927    12798        /*I*
      928    12799            NAME: KVM$SND_CMPDSCSSN
      929    12800            PURPOSE:
      930    12801                  acknowledge termination messgae.
      931    12802            CALL: similar to that of KVM$SND_RQSDAT_GNR.
      932    12803            DESCRIPTION:
      933    12804                  call KVM$FNDSPACE to get CQ space. Build the FPT_TERM_ACK
      934    12805                  return.
      935    12806        */
      936    12807
      937    12808    1   KVM$SND_CMPDSCSSN: PROC ;

  12808   2 0006E5  EFC7 0030            KVM$SND_CMPDSCS*STB,B6   Y@TRCBFR$+3,AUTO

      938    12809
      939    12810        /* see if we have space in CQ */
      940    12811    2      MSGWRDSIZ = 0;

  12811   2 0006E7  8747 000F                            CL       MSGWRDSIZ,AUTO

      941    12812    2      SZ = SIZEW(FPT_TERM_ACK);

  12812   2 0006E9  6C02                                 LDV,R6   2
          2 0006EA  EF47 000E                            STR,R6   SZ,AUTO

      942    12813    2      CALL KVM$FNDSPACE;

  12813   2 0006EC  E3C0 FCAB                            LNJ,B6   s:0,PREL
          2 0006EE       0001                            DC       s:12815,PREL

      943    12814        /* build CQ message header */
      944    12815    2      %MESS.FUNCTION=%KN_FCN_TERM_ACK;

  12815   2 0006EF  ECC7 000A                            LDB,B6   Y@KNH$,AUTO
          2 0006F1  6C04                                 LDV,R6   4
          2 0006F2  EF06                                 STR,R6   ,B6

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:131  
      945    12816    2      %MESS.FPTSZ = SIZEW(FPT_TERM_ACK) * 2;

  12816   2 0006F3  EF46 0006                            STR,R6   6,B6

      946    12817        /* build the FPT in the CQ */
      947    12818    2      %FPT_TRMACK = FPT_TERM_ACK;

  12818   2 0006F5  8C80 0000 0138  00                   LDI      FPT_TERM_ACK
          2 0006F8  DCC7 0006                            LDB,B5   PUT$,AUTO
          2 0006FA  8D05                                 SDI      ,B5

      948    12819    2      PUT$ = PINCRW(PUT$,SIZEW(FPT_TERM_ACK));

  12819   2 0006FB  CBC5 0002                            LAB,B4   2,B5
          2 0006FD  CFC7 0006                            STB,B4   PUT$,AUTO

      949    12820    2      %KV_SSN.SSNCNCID = 0;           /* We cant talk thru this one anymore.     */

  12820   2 0006FF  DCC7 0008                            LDB,B5   Y@SSN$,AUTO
          2 000701  8745 0024                            CL       36,B5

      950    12821
      951    12822    2      RETURN;

  12822   2 000703  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 000705  C3C6 0001                            LNJ,B4   1,B6

      952    12823    2   END KVM$SND_CMPDSCSSN;
      953    12824
      954    12825        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:132  
      955    12826        /*I*
      956    12827            NAME: KVM$SND_CNC
      957    12828            PURPOSE:
      958    12829                  connect message.
      959    12830            CALL: similar to that of KVM$SND_RQSDAT_GNR.
      960    12831            DESCRIPTION:
      961    12832                  call KVM$FNDSPACE to get CQ space. Build the FPT$CONNECT
      962    12833                  (if we're initiating the session) or FPT$CONNECT_ACK
      963    12834                  (if we've received FPT$CONNECT), followed by possibly
      964    12835                  a logon string.
      965    12836        */
      966    12837
      967    12838    1   KVM$SND_CNC: PROC ;

  12838   2 000707  EFC7 0030            KVM$SND_CNC     STB,B6   Y@TRCBFR$+3,AUTO

      968    12839
      969    12840        /* see if we have space in CQ */
      970    12841    2      IF VBASE(KV$SND_CNC.LGN_) = ADDR(NIL) THEN

  12841   2 000709  DCC7 0004                            LDB,B5   @KV$SND_X,AUTO
          2 00070B  8DC5 0011                            CMN      17,B5
          2 00070D  0981 0005                            BNE      s:12844,PREL

      971    12842    2      TXTBYTSIZ = 0;

  12842   2 00070F  8747 0017                            CL       TXTBYTSIZ,AUTO
          2 000711  0F81 0006                            B        s:12845,PREL

      972    12843    2      ELSE
      973    12844    2      TXTBYTSIZ = VBOUND(KV$SND_CNC.LGN_) + 1;

  12844   2 000713  E845 0010                            LDR,R6   16,B5
          2 000715  6E01                                 ADV,R6   1
          2 000716  EF47 0017                            STR,R6   TXTBYTSIZ,AUTO

      974    12845    2      MSGWRDSIZ = (TXTBYTSIZ+1)/2;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:133  

  12845   2 000718  E847 0017                            LDR,R6   TXTBYTSIZ,AUTO
          2 00071A  6E01                                 ADV,R6   1
          2 00071B  6041                                 SOR,R6   1
          2 00071C  EF47 000F                            STR,R6   MSGWRDSIZ,AUTO

      975    12846    2      SZ = SIZEW(FPT_CONNECT);

  12846   2 00071E  5C13                                 LDV,R5   19
          2 00071F  DF47 000E                            STR,R5   SZ,AUTO

      976    12847    2      IF NOT %KV_SSN.SSNCNCINT THEN

  12847   2 000721  CCC7 0008                            LDB,B4   Y@SSN$,AUTO
          2 000723  82C4 0028                            LB,'0008'X        40,B4
          2 000725       0008
          2 000726  0501 0004                            BBT      s:12849,PREL

      977    12848    2      SZ = SIZEW(FPT_CONNECT_ACK);

  12848   2 000728  5C06                                 LDV,R5   6
          2 000729  DF47 000E                            STR,R5   SZ,AUTO

      978    12849    2      CALL KVM$FNDSPACE;

  12849   2 00072B  E3C0 FC6C                            LNJ,B6   s:0,PREL
          2 00072D       0001                            DC       s:12851,PREL

      979    12850        /* build CQ message header */
      980    12851    3      IF %KV_SSN.SSNCNCINT THEN DO;

  12851   2 00072E  ECC7 0008                            LDB,B6   Y@SSN$,AUTO
          2 000730  82C6 0028                            LB,'0008'X        40,B6
          2 000732       0008
          2 000733  0581 0034                            BBF      s:12862,PREL

      981    12852    3         %MESS.FUNCTION=%KN_FCN_INIT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:134  

  12852   2 000735  DCC7 000A                            LDB,B5   Y@KNH$,AUTO
          2 000737  6C01                                 LDV,R6   1
          2 000738  EF05                                 STR,R6   ,B5

      982    12853    3         %MESS.FPTSZ = SIZEW(FPT_CONNECT) * 2;

  12853   2 000739  5C26                                 LDV,R5   38
          2 00073A  DF45 0006                            STR,R5   6,B5

      983    12854    3         %FPT_CNC = FPT_CONNECT;

  12854   2 00073C  AB80 0000 011F  00                   LAB,B2   FPT_CONNECT
          2 00073F  2C00                                 LDV,R2   0
          2 000740  6C26                                 LDV,R6   38
          2 000741  BCC7 0006                            LDB,B3   PUT$,AUTO
          2 000743  3C00                                 LDV,R3   0
          2 000744  0008                                 MMM

      984    12855    3         %FPT_CNC.TERMINAL_ID = KV$SND_CNC.SCNENDPNTID;

  12855   2 000745  ACC7 0004                            LDB,B2   @KV$SND_X,AUTO
          2 000747  2C28                                 LDV,R2   40
          2 000748  6C10                                 LDV,R6   16
          2 000749  BCC7 0006                            LDB,B3   PUT$,AUTO
          2 00074B  3C0A                                 LDV,R3   10
          2 00074C  0008                                 MMM

      985    12856    3         %FPT_CNC.RLCID = KV$SND_CNC.DSTNTWADR;

  12856   2 00074D  8CC2 001C                            LDI      28,B2
          2 00074F  ECC7 0006                            LDB,B6   PUT$,AUTO
          2 000751  8D46 000D                            SDI      13,B6

      986    12857    3         %FPT_CNC.RESOURCE = KV$SND_CNC.DSTNTWRSR;

  12857   2 000753  2C3C                                 LDV,R2   60
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:135  
          2 000754  6C08                                 LDV,R6   8
          2 000755  BB86                                 LAB,B3   ,B6
          2 000756  3C02                                 LDV,R3   2
          2 000757  0008                                 MMM

      987    12858    3         %FPT_CNC.SPEED = KV$SND_CNC.LINSPD;

  12858   2 000758  E842 0013                            LDR,R6   19,B2
          2 00075A  E570 00FF                            AND,R6   255,IMO
          2 00075C  DCC7 0006                            LDB,B5   PUT$,AUTO
          2 00075E  E7C5 0010                            STH,R6   16,B5

      988    12859    3         %FPT_CNC.TYPE = %KN_CON_TYP_SESS;

  12859   2 000760  6C01                                 LDV,R6   1
          2 000761  EF05                                 STR,R6   ,B5

      989    12860    3         PUT$ = PINCRW(PUT$,SIZEW(FPT_CONNECT));

  12860   2 000762  CBC5 0013                            LAB,B4   19,B5
          2 000764  CFC7 0006                            STB,B4   PUT$,AUTO

      990    12861    3      END; ELSE DO;

  12861   2 000766  0F81 0034                            B        s:12875,PREL

      991    12862    3         %MESS.FUNCTION=%KN_FCN_INIT_ACK;

  12862   2 000768  DCC7 000A                            LDB,B5   Y@KNH$,AUTO
          2 00076A  6C02                                 LDV,R6   2
          2 00076B  EF05                                 STR,R6   ,B5

      992    12863    3         %MESS.FPTSZ = SIZEW(FPT_CONNECT_ACK) * 2;

  12863   2 00076C  5C0C                                 LDV,R5   12
          2 00076D  DF45 0006                            STR,R5   6,B5

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:136  
      993    12864    3         %FPT_CNC_ACK = FPT_CONNECT_ACK;

  12864   2 00076F  AB80 0000 0132  00                   LAB,B2   FPT_CONNECT_ACK
          2 000772  2C00                                 LDV,R2   0
          2 000773  6C0C                                 LDV,R6   12
          2 000774  BCC7 0006                            LDB,B3   PUT$,AUTO
          2 000776  3C00                                 LDV,R3   0
          2 000777  0008                                 MMM

      994    12865    4         IF KV$SND_CNC.ERR THEN DO;

  12865   2 000778  ECC7 0004                            LDB,B6   @KV$SND_X,AUTO
          2 00077A  89C6 000F                            CMZ      15,B6
          2 00077C  0881 0018                            BAGE     s:12870,PREL

      995    12866    4            %FPT_CNC_ACK.REASON = %KV_STR.ERR.COD;

  12866   2 00077E  DC80 0000 0000  xsym                 LDB,B5   KV$PTR$
          2 000781  CCC5 0004                            LDB,B4   4,B5
          2 000783  BCC7 0006                            LDB,B3   PUT$,AUTO
          2 000785  E844 0013                            LDR,R6   19,B4
          2 000787  EF03                                 STR,R6   ,B3

      996    12867    4            %KV_STR.ERR.COD = 0;

  12867   2 000788  DC80 0000 0000  xsym                 LDB,B5   KV$PTR$
          2 00078B  CCC5 0004                            LDB,B4   4,B5
          2 00078D  8744 0013                            CL       19,B4

      997    12868    4            %MESS.LDCTX = KV$SND_CNC.DSTNTWADR.LDCTX;

  12868   2 00078F  CCC7 000A                            LDB,B4   Y@KNH$,AUTO
          2 000791  E846 001D                            LDR,R6   29,B6
          2 000793  EF44 0001                            STR,R6   1,B4

      998    12869    4         END;

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:137  
      999    12870    3         PUT$ = PINCRW(PUT$,SIZEW(FPT_CONNECT_ACK));

  12870   2 000795  DCC7 0006                            LDB,B5   PUT$,AUTO
          2 000797  CBC5 0006                            LAB,B4   6,B5
          2 000799  CFC7 0006                            STB,B4   PUT$,AUTO

     1000    12871    3      END;

     1001    12872
     1002    12873        /* build the actual message - the logon string - in the CQ */
     1003    12874
     1004    12875    3      IF (TXTBYTSIZ ~= 0) THEN DO;

  12875   2 00079B  E847 0017                            LDR,R6   TXTBYTSIZ,AUTO
          2 00079D  6901 001B                            BEZ,R6   s:12879,PREL

     1005    12876    3         PUT$->LGN_STRING = VBASE(KV$SND_CNC.LGN_)->LGN_STRING;

  12876   2 00079F  ECC7 0004                            LDB,B6   @KV$SND_X,AUTO
          2 0007A1  8CC6 0011                            LDI      17,B6
          2 0007A3  B856                                 LDR,R3   R6
          2 0007A4  E570 7FFF                            AND,R6   32767,IMO
          2 0007A6  8D47 0042                            SDI      TAKE$+2,AUTO
          2 0007A8  DCC7 0042                            LDB,B5   TAKE$+2,AUTO
          2 0007AA  304F                                 SOR,R3   15
          2 0007AB  AB85                                 LAB,B2   ,B5
          2 0007AC  A853                                 LDR,R2   R3
          2 0007AD  E847 0017                            LDR,R6   TXTBYTSIZ,AUTO
          2 0007AF  BB84                                 LAB,B3   ,B4
          2 0007B0  3C00                                 LDV,R3   0
          2 0007B1  0008                                 MMM

     1006    12877    3         PUT$ = PINCRW(PUT$, MSGWRDSIZ);

  12877   2 0007B2  F847 000F                            LDR,R7   MSGWRDSIZ,AUTO
          2 0007B4  6C00                                 LDV,R6   0
          2 0007B5  8447 0006                            AID      PUT$,AUTO
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:138  
          2 0007B7  8D47 0006                            SDI      PUT$,AUTO

     1007    12878    3      END;

     1008    12879    2      RETURN;

  12879   2 0007B9  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 0007BB  C3C6 0001                            LNJ,B4   1,B6

     1009    12880    2   END KVM$SND_CNC;
     1010    12881
     1011    12882        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:139  
     1012    12883        /*I*
     1013    12884            NAME: KVM$SND_DAT
     1014    12885            PURPOSE: data message.
     1015    12886            CALL: similar to that of KVM$SND_RQSDAT_GNR.
     1016    12887            DESCRIPTION:
     1017    12888                  build the KV$VDOVLP_DAT1 or KV$VDOVLP_DAT2 structure in CQ.
     1018    12889        */
     1019    12890
     1020    12891    1   KVM$SND_DAT: PROC ;

  12891   2 0007BD  EFC7 0030            KVM$SND_DAT     STB,B6   Y@TRCBFR$+3,AUTO

     1021    12892
     1022    12893        %KV$VDOVLP_ERR (STCLASS=CONSTANT, NAME=E$LD, ERR#=%E$LD, FCG=KV,MID=M,MON='1'B);
     1023    12990
     1024    12991    2      TXTBYTSIZ = KV$SND_DAT.DAT__.DATBYTSIZ;

  12991   2 0007BF  DCC7 0004                            LDB,B5   @KV$SND_X,AUTO
          2 0007C1  E845 0012                            LDR,R6   18,B5
          2 0007C3  EF47 0017                            STR,R6   TXTBYTSIZ,AUTO

     1025    12992    3      DO UNTIL SZ>0;

     1026    12993    3         IF TXTBYTSIZ = 0 THEN

  12993   2 0007C5  E847 0017                            LDR,R6   TXTBYTSIZ,AUTO
          2 0007C7  6981 0005                            BNEZ,R6  s:12995,PREL

     1027    12994    3         MSGWRDSIZ = 0;

  12994   2 0007C9  8747 000F                            CL       MSGWRDSIZ,AUTO
          2 0007CB  0F81 000D                            B        s:12999,PREL

     1028    12995    3         ELSE IF TXTBYTSIZ < 256 THEN

  12995   2 0007CD  E970 0100                            CMR,R6   256,IMO
          2 0007CF  0281 0006                            BGE      s:12998,PREL
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:140  

     1029    12996    3         MSGWRDSIZ = SIZEW(KV$VDOVLP_DAT1);

  12996   2 0007D1  5C01                                 LDV,R5   1
          2 0007D2  DF47 000F                            STR,R5   MSGWRDSIZ,AUTO
          2 0007D4  0F81 0004                            B        s:12999,PREL

     1030    12997    3         ELSE
     1031    12998    3         MSGWRDSIZ = SIZEW(KV$VDOVLP_DAT2);

  12998   2 0007D6  5C02                                 LDV,R5   2
          2 0007D7  DF47 000F                            STR,R5   MSGWRDSIZ,AUTO

     1032    12999    3         IF KV$SND_DAT.ACTPOS~=0 AND TXTBYTSIZ~=0

  12999   2 0007D9  ECC7 0004                            LDB,B6   @KV$SND_X,AUTO
          2 0007DB  D846 0016                            LDR,R5   22,B6
          2 0007DD  5901 0008                            BEZ,R5   s:13001,PREL
          2 0007DF  6901 0006                            BEZ,R6   s:13001,PREL

     1033    13000    3         THEN MSGWRDSIZ = MSGWRDSIZ + SIZEW(KV_VDOVLP_ACTPOS);

  13000   2 0007E1  C847 000F                            LDR,R4   MSGWRDSIZ,AUTO
          2 0007E3  4E02                                 ADV,R4   2
          2 0007E4  CF47 000F                            STR,R4   MSGWRDSIZ,AUTO

     1034    13001    3         MSGWRDSIZ = MSGWRDSIZ + SIZEW(KV_VDO_DAT) + (TXTBYTSIZ + 1)/2;

  13001   2 0007E6  6E01                                 ADV,R6   1
          2 0007E7  6041                                 SOR,R6   1
          2 0007E8  EA47 000F                            ADD,R6   MSGWRDSIZ,AUTO
          2 0007EA  6E02                                 ADV,R6   2
          2 0007EB  EF47 000F                            STR,R6   MSGWRDSIZ,AUTO

     1035    13002
     1036    13003    3         IF VLP_WRDSIZ=0 THEN SLACK_BYT = MOD(TXTBYTSIZ,2);

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:141  
  13003   2 0007ED  C847 0014                            LDR,R4   VLP_WRDSIZ,AUTO
          2 0007EF  4981 0007                            BNEZ,R4  s:13005,PREL

  13003   2 0007F1  B847 0017                            LDR,R3   TXTBYTSIZ,AUTO
          2 0007F3  B570 0001                            AND,R3   1,IMO
          2 0007F5  BF47 0016                            STR,R3   SLACK_BYT,AUTO

     1037    13004
     1038    13005    4         IF KV$SND_DAT.KONCAT THEN DO;

  13005   2 0007F7  82C6 0015                            LB,'0080'X        21,B6
  13005   2 0007F9       0080
          2 0007FA  0581 002C                            BBF      s:13020,PREL

     1039    13006        /*
     1040    13007           If the caller wants to tack onto the previously built message,
     1041    13008           make sure it's ok to do it.
     1042    13009        */
     1043    13010    4            IF KVM_SND_PRV$->KNH$MESS.LDCTX=%KV_SSN.SSNCNCID AND %KV_SSN.REDMLT

  13010   2 0007FC  DC80 0000 0002  01                   LDB,B5   KVM_SND_PRV$
          2 0007FF  CCC7 0008                            LDB,B4   Y@SSN$,AUTO
          2 000801  B845 0001                            LDR,R3   1,B5
          2 000803  B944 0024                            CMR,R3   36,B4
          2 000805  0981 001E                            BNE      s:13017,PREL
          2 000807  82C4 0037                            LB,'0008'X        55,B4
          2 000809       0008
          2 00080A  0581 0019                            BBF      s:13017,PREL
          2 00080C  BC80 0000 0000  xsym                 LDB,B3   KV_SNDCQ_QHDR$
          2 00080F  A843 0004                            LDR,R2   4,B3
          2 000811  A943 0005                            CMR,R2   5,B3
          2 000813  0901 0010                            BE       s:13017,PREL

     1044    13011    4              AND KNH$QHDR.SCQ.IPTR~=KNH$QHDR.SCQ.RPTR
     1045    13012    5            THEN DO;

     1046    13013    5               IF (MSGWRDSIZ+VLP_WRDSIZ)*2>%KV_SSN.SNDMAXNMBBYT
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:142  

  13013   2 000815  EA54                                 ADD,R6   R4
          2 000816  6001                                 SOL,R6   1
          2 000817  E944 0014                            CMR,R6   20,B4
          2 000819  0381 0005                            BLE      s:13015,PREL

     1047    13014    5               THEN RETURN;           /* we'll eventually ALTRETURN because SZ=0 */

  13014   2 00081B  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 00081D  C3C6 0001                            LNJ,B4   1,B6

     1048    13015    5               KONCAT = '1'B;

  13015   2 00081F  8947 0011                            LBT,'8000'X       KONCAT,AUTO
  13015   2 000821       8000

     1049    13016    5            END;

  13016   2 000822  0F81 0004                            B        s:13020,PREL

     1050    13017    4            ELSE KV$SND_DAT.KONCAT = '0'B;

  13017   2 000824  8846 0015                            LBF,'0080'X       21,B6
  13017   2 000826       0080

     1051    13018    4         END;

     1052    13019
     1053    13020    4         CALL KVM$FNDSPACE WHENALTRETURN DO;

  13020   2 000827  E3C0 FB70                            LNJ,B6   s:0,PREL
          2 000829       0003                            DC       s:13021,PREL
          2 00082A  0F81 0031                            B        s:13031,PREL

     1054    13021    4            IF KV$SND_DAT.KONCAT THEN RETURN;

  13021   2 00082C  ECC7 0004                            LDB,B6   @KV$SND_X,AUTO
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:143  
          2 00082E  82C6 0015                            LB,'0080'X        21,B6
          2 000830       0080
          2 000831  0581 0005                            BBF      s:13022,PREL

  13021   2 000833  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 000835  C3C6 0001                            LNJ,B4   1,B6

     1055    13022    5            IF KV$SND_DAT.VDOVLP.ERR$=ADDR(NIL) THEN DO;

  13022   2 000837  8DC6 0007                            CMN      7,B6
          2 000839  0981 0013                            BNE      s:13027,PREL

     1056    13023    5               TXTBYTSIZ = TXTBYTSIZ-SIZEC(E$LD);

  13023   2 00083B  E847 0017                            LDR,R6   TXTBYTSIZ,AUTO
          2 00083D  6EFA                                 ADV,R6   -6
          2 00083E  EF47 0017                            STR,R6   TXTBYTSIZ,AUTO

     1057    13024    5               VLP_WRDSIZ = VLP_WRDSIZ+SIZEW(E$LD);

  13024   2 000840  D847 0014                            LDR,R5   VLP_WRDSIZ,AUTO
          2 000842  5E03                                 ADV,R5   3
          2 000843  DF47 0014                            STR,R5   VLP_WRDSIZ,AUTO

     1058    13025    5               IF LST_VLP<3 THEN LST_VLP = 3;

  13025   2 000845  C847 0015                            LDR,R4   LST_VLP,AUTO
          2 000847  4D03                                 CMV,R4   3
          2 000848  0881 0004                            BAGE     s:13027,PREL

  13025   2 00084A  4C03                                 LDV,R4   3
          2 00084B  CF47 0015                            STR,R4   LST_VLP,AUTO

     1059    13026    5            END;

     1060    13027    4            KV$SND_DAT.VDOVLP.ERR$ = ADDR(E$LD);

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:144  
  13027   2 00084D  DB80 0000 0170  00                   LAB,B5   E$LD
          2 000850  DFC6 0007                            STB,B5   7,B6

     1061    13028    4            TXTBYTSIZ = TXTBYTSIZ-SZ*4;

  13028   2 000852  E847 000E                            LDR,R6   SZ,AUTO
          2 000854  6002                                 SOL,R6   2
          2 000855  8256                                 NEG      R6
          2 000856  EA47 0017                            ADD,R6   TXTBYTSIZ,AUTO
          2 000858  EF47 0017                            STR,R6   TXTBYTSIZ,AUTO

     1062    13029    4            SZ = 0;

  13029   2 00085A  8747 000E                            CL       SZ,AUTO

     1063    13030    4         END;

     1064    13031    3      END;

  13031   2 00085C  E847 000E                            LDR,R6   SZ,AUTO
          2 00085E  6901 FF66                            BEZ,R6   s:12993,PREL

     1065    13032
     1066    13033    2      %KV_STT.SND.DATVDOCNT = %KV_STT.SND.DATVDOCNT + 1;

  13033   2 000860  ECC7 000C                            LDB,B6   Y@STT$,AUTO
          2 000862  8AC6 0029                            INC      41,B6
          2 000864  8EC6 0028                            CAD      40,B6

     1067    13034    2      %KV_STT.SND.DATVDOBYTCNT = %KV_STT.SND.DATVDOBYTCNT + MSGWRDSIZ * 2;

  13034   2 000866  F847 000F                            LDR,R7   MSGWRDSIZ,AUTO
          2 000868  6C00                                 LDV,R6   0
          2 000869  7081                                 DOL,R7   1
          2 00086A  8446 002A                            AID      42,B6
          2 00086C  8D46 002A                            SDI      42,B6

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:145  
     1068    13035    2      %KV_STT.SND.DATVDODATBYTCNT = %KV_STT.SND.DATVDODATBYTCNT + TXTBYTSIZ;

  13035   2 00086E  F847 0017                            LDR,R7   TXTBYTSIZ,AUTO
          2 000870  6C00                                 LDV,R6   0
          2 000871  8446 002C                            AID      44,B6
          2 000873  8D46 002C                            SDI      44,B6

     1069    13036
     1070    13037        /* put KV$VDO_DAT structure in CQ */
     1071    13038
     1072    13039    2      %VDO_DAT = KV_VDO_DAT;

  13039   2 000875  8C80 0000 0142  00                   LDI      KV_VDO_DAT
          2 000878  DCC7 0006                            LDB,B5   PUT$,AUTO
          2 00087A  8D05                                 SDI      ,B5

     1073    13040    2      IF TXTBYTSIZ~=0 THEN

  13040   2 00087B  D847 0017                            LDR,R5   TXTBYTSIZ,AUTO
          2 00087D  5901 0003                            BEZ,R5   s:13042,PREL

     1074    13041    2      %VDO_DAT.VLP = '1'B;

  13041   2 00087F  8905                                 LBT,'0080'X       ,B5
  13041   2 000880       0080

     1075    13042    2      %VDO_DAT.DATCTRCHRTYP = KV$SND_DAT.DATCTRCHRTYP;

  13042   2 000881  CCC7 0004                            LDB,B4   @KV$SND_X,AUTO
          2 000883  C804                                 LDR,R4   ,B4
          2 000884  4008                                 SOL,R4   8
          2 000885  CAC5 0001                            SRM,R4,'0C00'X    1,B5
          2 000887       0C00

     1076    13043    2      %VDO_DAT.DATCTRCHR = KV$SND_DAT.DATCTRCHR;

  13043   2 000888  C0C4 0015                            LDH,R4   21,B4
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:146  
          2 00088A  CAC5 0001                            SRM,R4,'00FF'X    1,B5
          2 00088C       00FF

     1077    13044    2      %VDO_DAT.DATMOD = KV$SND_DAT.DATMOD;

  13044   2 00088D  C804                                 LDR,R4   ,B4
          2 00088E  4008                                 SOL,R4   8
          2 00088F  CAC5 0001                            SRM,R4,'0300'X    1,B5
          2 000891       0300

     1078    13045    2      PUT$ = PINCRW(PUT$,SIZEW(KV$VDO_DAT));

  13045   2 000892  BBC5 0002                            LAB,B3   2,B5
          2 000894  BFC7 0006                            STB,B3   PUT$,AUTO

     1079    13046
     1080    13047    2      %KV_SSN.SNDMAXNMBBYT = %KV_SSN.SNDMAXNMBBYT - MSGWRDSIZ*2;

  13047   2 000896  DCC7 0008                            LDB,B5   Y@SSN$,AUTO
          2 000898  C847 000F                            LDR,R4   MSGWRDSIZ,AUTO
          2 00089A  4001                                 SOL,R4   1
          2 00089B  8254                                 NEG      R4
          2 00089C  CA45 0014                            ADD,R4   20,B5
          2 00089E  CF45 0014                            STR,R4   20,B5

     1081    13048    3      IF NOT KONCAT THEN DO;

  13048   2 0008A0  89C7 0011                            CMZ      KONCAT,AUTO
          2 0008A2  0801 000C                            BAL      s:13052,PREL

     1082    13049    3         %KV_STR.SNDMAXNMBRCR = %KV_STR.SNDMAXNMBRCR - 1;

  13049   2 0008A4  AC80 0000 0000  xsym                 LDB,B2   KV$PTR$
          2 0008A7  9CC2 0004                            LDB,B1   4,B2
          2 0008A9  88C1 0019                            DEC      25,B1

     1083    13050    3         %KV_SSN.REDRSPCNT = %KV_SSN.REDRSPCNT + 1;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:147  

  13050   2 0008AB  8AC5 001B                            INC      27,B5
          2 0008AD  8EC5 001A                            CAD      26,B5

     1084    13051    3      END;

     1085    13052    3      IF KV$SND_DAT.ACTPOS~=0 AND TXTBYTSIZ~=0 THEN DO;

  13052   2 0008AF  C844 0016                            LDR,R4   22,B4
          2 0008B1  4901 000F                            BEZ,R4   s:13057,PREL
          2 0008B3  5901 000D                            BEZ,R5   s:13057,PREL

     1086    13053    3         %VDOVLP_ACTPOS = KV_VDOVLP_ACTPOS;

  13053   2 0008B5  8C80 0000 0161  00                   LDI      KV_VDOVLP_ACTPOS
          2 0008B8  8D03                                 SDI      ,B3

     1087    13054    3         %VDOVLP_ACTPOS.ACTPOS = KV$SND_DAT.ACTPOS;

  13054   2 0008B9  C844 0016                            LDR,R4   22,B4
          2 0008BB  CF43 0001                            STR,R4   1,B3

     1088    13055    3         PUT$ = PINCRW(PUT$,SIZEW(KV$VDOVLP_ACTPOS));

  13055   2 0008BD  ABC3 0002                            LAB,B2   2,B3
          2 0008BF  AFC7 0006                            STB,B2   PUT$,AUTO

     1089    13056    3      END;

     1090    13057    2      IF TXTBYTSIZ~=0 THEN CALL KVM$SND_PUTDAT;

  13057   2 0008C1  5901 0004                            BEZ,R5   s:13058,PREL

  13057   2 0008C3  E3C0 012E                            LNJ,B6   s:0,PREL
          2 0008C5       0001                            DC       s:13058,PREL

     1091    13058    2      RETURN;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:148  

  13058   2 0008C6  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 0008C8  C3C6 0001                            LNJ,B4   1,B6

     1092    13059    2   END KVM$SND_DAT;
     1093    13060
     1094    13061        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:149  
     1095    13062
     1096    13063    1   KVM$SND_DSCSSN: PROC;

  13063   2 0008CA  EFC7 0030            KVM$SND_DSCSSN  STB,B6   Y@TRCBFR$+3,AUTO

     1097    13064    2   DCL COUNTER UBIN(32) ALIGNED BASED;
     1098    13065        /* see if we have space in CQ */
     1099    13066    2      MSGWRDSIZ = SIZEW(KV$VDO_DSC)+SIZEW(KV$VDOVLP_DAT1)+8;

  13066   2 0008CC  6C0B                                 LDV,R6   11
          2 0008CD  EF47 000F                            STR,R6   MSGWRDSIZ,AUTO

     1100    13067    2      CALL KVM$FNDSPACE;

  13067   2 0008CF  E3C0 FAC8                            LNJ,B6   s:0,PREL
          2 0008D1       0001                            DC       s:13069,PREL

     1101    13068        /* build the KV$VDO message in the CQ */
     1102    13069    2      %VDO_DSC = KV_VDO_DSC;

  13069   2 0008D2  8C80 0000 0148  00                   LDI      KV_VDO_DSC
          2 0008D5  ECC7 0006                            LDB,B6   PUT$,AUTO
          2 0008D7  8D06                                 SDI      ,B6

     1103    13070    2      PUT$ = PINCRW(PUT$,SIZEW(KV$VDO_DSC));

  13070   2 0008D8  DBC6 0002                            LAB,B5   2,B6
          2 0008DA  DFC7 0006                            STB,B5   PUT$,AUTO

     1104    13071    2      %VDOVLP_DAT1 = '0'B;

  13071   2 0008DC  8705                                 CL       ,B5

     1105    13072    2      %VDOVLP_DAT1.TYP = %KV_VDOVLP_TYP_DAT1;

  13072   2 0008DD  D870 0400                            LDR,R5   1024,IMO
          2 0008DF  DA85                                 SRM,R5,'7F00'X    ,B5
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:150  
          2 0008E0       7F00

     1106    13073    2      %VDOVLP_DAT1.BYTSIZ = 16;

  13073   2 0008E1  4C10                                 LDV,R4   16
          2 0008E2  CA85                                 SRM,R4,'00FF'X    ,B5
          2 0008E3       00FF

     1107    13074    2      IF (LST_VLP < 0) THEN

  13074   2 0008E4  B847 0015                            LDR,R3   LST_VLP,AUTO
          2 0008E6  3881 0003                            BGEZ,R3  s:13076,PREL

     1108    13075    2      %VDOVLP_DAT1.LST = '1'B;

  13075   2 0008E8  8905                                 LBT,'8000'X       ,B5
  13075   2 0008E9       8000

     1109    13076    2      PINCRW(PUT$, SIZEW(%VDOVLP_DAT1)+0)->COUNTER = %KV_SSN.INPCHRCNT;

  13076   2 0008EA  ECC7 0008                            LDB,B6   Y@SSN$,AUTO
          2 0008EC  8CC6 0012                            LDI      18,B6
          2 0008EE  8D45 0001                            SDI      1,B5

     1110    13077    2      PINCRW(PUT$, SIZEW(%VDOVLP_DAT1)+2)->COUNTER = %KV_SSN.OTPCHRCNT;

  13077   2 0008F0  8CC6 0018                            LDI      24,B6
          2 0008F2  8D45 0003                            SDI      3,B5

     1111    13078    2      PINCRW(PUT$, SIZEW(%VDOVLP_DAT1)+4)->COUNTER = %KV_SSN.REDRSPCNT;

  13078   2 0008F4  8CC6 001A                            LDI      26,B6
          2 0008F6  8D45 0005                            SDI      5,B5

     1112    13079    2      PINCRW(PUT$, SIZEW(%VDOVLP_DAT1)+6)->COUNTER = %KV_SSN.WRTRQSCNT;

  13079   2 0008F8  8CC6 0020                            LDI      32,B6
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:151  
          2 0008FA  8D45 0007                            SDI      7,B5

     1113    13080    2      PUT$ = PINCRW(PUT$, SIZEW(%VDOVLP_DAT1)+8);

  13080   2 0008FC  CBC5 0009                            LAB,B4   9,B5
          2 0008FE  CFC7 0006                            STB,B4   PUT$,AUTO

     1114    13081    2      RETURN;

  13081   2 000900  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 000902  C3C6 0001                            LNJ,B4   1,B6

     1115    13082    2   END KVM$SND_DSCSSN;
     1116    13083        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:152  
     1117    13084        /*I*
     1118    13085            NAME: KVM$SND_EVT
     1119    13086            PURPOSE:
     1120    13087                  event messgae.
     1121    13088            CALL: similar to that of KVM$SND_RQSDAT_GNR.
     1122    13089            DESCRIPTION:
     1123    13090                  call KVM$FNDSPACE to get CQ space.
     1124    13091                  Send a KV$VDO_EVT message.
     1125    13092                  Return.
     1126    13093        */
     1127    13094
     1128    13095    1   KVM$SND_EVT: PROC ;

  13095   2 000904  EFC7 0030            KVM$SND_EVT     STB,B6   Y@TRCBFR$+3,AUTO

     1129    13096
     1130    13097        /* see if we have space in CQ */
     1131    13098    2      MSGWRDSIZ = SIZEW(KV_VDO_EVT);

  13098   2 000906  6C02                                 LDV,R6   2
          2 000907  EF47 000F                            STR,R6   MSGWRDSIZ,AUTO

     1132    13099    2      CALL KVM$FNDSPACE;

  13099   2 000909  E3C0 FA8E                            LNJ,B6   s:0,PREL
          2 00090B       0001                            DC       s:13101,PREL

     1133    13100        /* build the KV$VDO message in the CQ */
     1134    13101    2      %VDO_EVT = KV_VDO_EVT;

  13101   2 00090C  8C80 0000 014A  00                   LDI      KV_VDO_EVT
          2 00090F  ECC7 0006                            LDB,B6   PUT$,AUTO
          2 000911  8D06                                 SDI      ,B6

     1135    13102    2      %VDO_EVT.TYP = KV$SND_EVT.EVTTYP;

  13102   2 000912  DCC7 0004                            LDB,B5   @KV$SND_X,AUTO
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:153  
          2 000914  D2C5 000F                            LLH,R5   15,B5
          2 000916  DAC6 0001                            SRM,R5,'00FF'X    1,B6
          2 000918       00FF

     1136    13103    2      %VDO_EVT.BRKCNT = %KV_SSN.BRKCNT;

  13103   2 000919  CCC7 0008                            LDB,B4   Y@SSN$,AUTO
          2 00091B  D2C4 0025                            LLH,R5   37,B4
          2 00091D  D7C6 0001                            STH,R5   1,B6

     1137    13104    2      PUT$ = PINCRW(PUT$,SIZEW(KV_VDO_EVT));

  13104   2 00091F  BBC6 0002                            LAB,B3   2,B6
          2 000921  BFC7 0006                            STB,B3   PUT$,AUTO

     1138    13105    2      RETURN;

  13105   2 000923  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 000925  C3C6 0001                            LNJ,B4   1,B6

     1139    13106    2   END KVM$SND_EVT;
     1140    13107        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:154  
     1141    13108        /*I*
     1142    13109            NAME: KVM$SND_OPNSSN
     1143    13110            PURPOSE:
     1144    13111                  open session messgae.
     1145    13112            CALL: similar to that of KVM$SND_RQSDAT_GNR.
     1146    13113            DESCRIPTION:
     1147    13114                  call KVM$FNDSPACE to get CQ space. Look at session context
     1148    13115                  to determine if we are requesting or responding to open
     1149    13116                  session, and then build KV$VDO_OPNSSN with corresponding
     1150    13117                  function code.
     1151    13118        */
     1152    13119
     1153    13120    1   KVM$SND_OPNSSN: PROC ;

  13120   2 000927  EFC7 0030            KVM$SND_OPNSSN  STB,B6   Y@TRCBFR$+3,AUTO

     1154    13121
     1155    13122        /* see if we have space in CQ */
     1156    13123    2      MSGWRDSIZ = SIZEW(KV$VDO_OPNSSN);

  13123   2 000929  6C02                                 LDV,R6   2
          2 00092A  EF47 000F                            STR,R6   MSGWRDSIZ,AUTO

     1157    13124    2      CALL KVM$FNDSPACE;

  13124   2 00092C  E3C0 FA6B                            LNJ,B6   s:0,PREL
          2 00092E       0001                            DC       s:13126,PREL

     1158    13125        /* build the KV$VDO message in the CQ */
     1159    13126    2      IF %KV_SSN.SND_OPNSSN_RSP THEN

  13126   2 00092F  ECC7 0008                            LDB,B6   Y@SSN$,AUTO
          2 000931  82C6 0027                            LB,'0002'X        39,B6
          2 000933       0002
          2 000934  0581 0009                            BBF      s:13129,PREL

     1160    13127    2      %VDO_OPNSSN = KV_VDO_OPNSSN_RSP;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:155  

  13127   2 000936  8C80 0000 014F  00                   LDI      KV_VDO_OPNSSN_RSP
          2 000939  DCC7 0006                            LDB,B5   PUT$,AUTO
          2 00093B  8D05                                 SDI      ,B5
          2 00093C  0F81 0007                            B        s:13130,PREL

     1161    13128    2      ELSE
     1162    13129    2      %VDO_OPNSSN = KV_VDO_OPNSSN_RQS;

  13129   2 00093E  8C80 0000 014D  00                   LDI      KV_VDO_OPNSSN_RQS
          2 000941  DCC7 0006                            LDB,B5   PUT$,AUTO
          2 000943  8D05                                 SDI      ,B5

     1163    13130    2      PUT$ = PINCRW(PUT$,SIZEW(KV$VDO_OPNSSN));

  13130   2 000944  CBC5 0002                            LAB,B4   2,B5
          2 000946  CFC7 0006                            STB,B4   PUT$,AUTO

     1164    13131    2      RETURN;

  13131   2 000948  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 00094A  C3C6 0001                            LNJ,B4   1,B6

     1165    13132    2   END KVM$SND_OPNSSN;
     1166    13133        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:156  
     1167    13134        /*I*
     1168    13135            NAME: KVM$SND_MRK
     1169    13136            PURPOSE:
     1170    13137                  marker message.
     1171    13138            CALL: similar to that of KVM$SND_RQSDAT_GNR.
     1172    13139            DESCRIPTION:
     1173    13140                  call KVM$FNDSPACE to get CQ space.
     1174    13141                  Send a KV$VDO_MRK message and an appropriate marker VLP.
     1175    13142                  Return.
     1176    13143        */
     1177    13144
     1178    13145    1   KVM$SND_MRK: PROC ;

  13145   2 00094C  EFC7 0030            KVM$SND_MRK     STB,B6   Y@TRCBFR$+3,AUTO

     1179    13146
     1180    13147        /* see if we have space in CQ */
     1181    13148    2      MSGWRDSIZ = SIZEW(KV_VDO_MRK);

  13148   2 00094E  6C01                                 LDV,R6   1
          2 00094F  EF47 000F                            STR,R6   MSGWRDSIZ,AUTO

     1182    13149    2      CALL KVM$FNDSPACE;

  13149   2 000951  E3C0 FA46                            LNJ,B6   s:0,PREL
          2 000953       0001                            DC       s:13151,PREL

     1183    13150        /* build the KV$VDO message in the CQ */
     1184    13151    2      %VDO_MRK = KV_VDO_MRK;

  13151   2 000954  ECC7 0006                            LDB,B6   PUT$,AUTO
          2 000956  E800 0000 014C  00                   LDR,R6   KV_VDO_MRK
          2 000959  EF06                                 STR,R6   ,B6

     1185    13152    2      PUT$ = PINCRW(PUT$,SIZEW(KV_VDO_MRK));

  13152   2 00095A  DBC6 0001                            LAB,B5   1,B6
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:157  
          2 00095C  DFC7 0006                            STB,B5   PUT$,AUTO

     1186    13153    3      IF KV$SND_MRK.VDH_MRK$~=ADDR(NIL) THEN DO;

  13153   2 00095E  ECC7 0004                            LDB,B6   @KV$SND_X,AUTO
          2 000960  8DC6 000F                            CMN      15,B6
          2 000962  0901 0057                            BE       s:13192,PREL

     1187    13154
     1188    13155        /* If this isn't a VDH_MRK call, the marker will be built as a VLP later. */
     1189    13156
     1190    13157        /* NOW BUILD THE APPROPRIATE MARKER VLP */
     1191    13158
     1192    13159    4         DO CASE (KV$VDH_OTPMRK.DAT.TYP);

  13159   2 000964  CCC6 000F                            LDB,B4   15,B6
          2 000966  B844 0001                            LDR,R3   1,B4
          2 000968  B570 00FF                            AND,R3   255,IMO
          2 00096A  3D05                                 CMV,R3   5
          2 00096B  0281 0040                            BGE      s:13187,PREL
          2 00096D  A830 0000 0973  02                   LDR,R2   s:13159+15,R3
          2 000970  83A0 0000 0978  02                   JMP      s:13166,R2
          2 000973       0034                            DC       s:13187,PREL
          2 000974       0034                            DC       s:13187,PREL
          2 000975       0012                            DC       s:13174,PREL
          2 000976       0024                            DC       s:13183,PREL
          2 000977       0000                            DC       s:13166,PREL

     1193    13160    4         CASE(%KV_MRKTYP_SNDLSTRCRID );

     1194    13161
     1195    13162        /* This marker is for tracking the last successfully-processed
     1196    13163           record ID (which is probably symbiont deblocker block and
     1197    13164           record number). Send the last record ID we saved.                          */
     1198    13165
     1199    13166    4            %VDOVLP_MRK = KV_VDOVLP_MRK_LSTRCRID;

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:158  
  13166   2 000978  AB80 0000 0159  00                   LAB,B2   KV_VDOVLP_MRK_LSTRCRID
          2 00097B  2C00                                 LDV,R2   0
          2 00097C  6C08                                 LDV,R6   8
          2 00097D  BB85                                 LAB,B3   ,B5
          2 00097E  3C00                                 LDV,R3   0
          2 00097F  0008                                 MMM

     1200    13167    4            %VDOVLP_MRK.ID = %KV_SSN.LSTOTPRCRID;

  13167   2 000980  CCC7 0008                            LDB,B4   Y@SSN$,AUTO
          2 000982  8CC4 001C                            LDI      28,B4
          2 000984  ACC7 0006                            LDB,B2   PUT$,AUTO
          2 000986  8D42 0002                            SDI      2,B2
          2 000988  0F81 0023                            B        s:13187,PREL

     1201    13168
     1202    13169    4         CASE(%KV_MRKTYP_MRK );

     1203    13170
     1204    13171        /* This marker is for marking a point in the data stream,
     1205    13172           possibly all the way from the other end, thru the path,
     1206    13173           and back.                                                                  */
     1207    13174    4            %VDOVLP_MRK = KV_VDOVLP_MRK_MRK;

  13174   2 00098A  AB80 0000 0155  00                   LAB,B2   KV_VDOVLP_MRK_MRK
          2 00098D  2C00                                 LDV,R2   0
          2 00098E  6C08                                 LDV,R6   8
          2 00098F  BB85                                 LAB,B3   ,B5
          2 000990  3C00                                 LDV,R3   0
          2 000991  0008                                 MMM

     1208    13175    4            %VDOVLP_MRK.ID = KV$VDH_OTPMRK.DAT.ID;

  13175   2 000992  CCC6 000F                            LDB,B4   15,B6
          2 000994  8CC4 0002                            LDI      2,B4
          2 000996  ACC7 0006                            LDB,B2   PUT$,AUTO
          2 000998  8D42 0002                            SDI      2,B2
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:159  
          2 00099A  0F81 0011                            B        s:13187,PREL

     1209    13176
     1210    13177    4         CASE(%KV_MRKTYP_ACK );

     1211    13178
     1212    13179        /* This marker is for verifying that previous data has been
     1213    13180           successfully processed. The other end is waiting for an
     1214    13181           acknowledgement.                                                           */
     1215    13182
     1216    13183    4            %VDOVLP_MRK = KV_VDOVLP_MRK_ENDACK;

  13183   2 00099C  AB80 0000 015D  00                   LAB,B2   KV_VDOVLP_MRK_ENDACK
          2 00099F  2C00                                 LDV,R2   0
          2 0009A0  6C08                                 LDV,R6   8
          2 0009A1  BB85                                 LAB,B3   ,B5
          2 0009A2  3C00                                 LDV,R3   0
          2 0009A3  0008                                 MMM

     1217    13184    4            %VDOVLP_MRK.ID = KV$VDH_OTPMRK.DAT.ID;

  13184   2 0009A4  CCC6 000F                            LDB,B4   15,B6
          2 0009A6  8CC4 0002                            LDI      2,B4
          2 0009A8  ACC7 0006                            LDB,B2   PUT$,AUTO
          2 0009AA  8D42 0002                            SDI      2,B2

     1218    13185        /*N*          %ERR.COD = KV$VDH_OTPMRK.CMPCOD;  */
     1219    13186    4         END /* CASE */;

     1220    13187    3         IF (LST_VLP < 0) THEN

  13187   2 0009AC  E847 0015                            LDR,R6   LST_VLP,AUTO
          2 0009AE  6881 0005                            BGEZ,R6  s:13190,PREL

     1221    13188    3         %VDOVLP_MRK.LST = '1'B;

  13188   2 0009B0  DCC7 0006                            LDB,B5   PUT$,AUTO
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:160  
          2 0009B2  8905                                 LBT,'8000'X       ,B5
          2 0009B3       8000

     1222    13189
     1223    13190    3         PUT$ = PINCRW(PUT$,SIZEW(KV$VDOVLP_MRK));

  13190   2 0009B4  DCC7 0006                            LDB,B5   PUT$,AUTO
          2 0009B6  CBC5 0004                            LAB,B4   4,B5
          2 0009B8  CFC7 0006                            STB,B4   PUT$,AUTO

     1224    13191    3      END;

     1225    13192    2      RETURN;

  13192   2 0009BA  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 0009BC  C3C6 0001                            LNJ,B4   1,B6

     1226    13193    2   END KVM$SND_MRK;
     1227    13194        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:161  
     1228    13195
     1229    13196        /*I*
     1230    13197            NAME: KVM$SND_PRM
     1231    13198            PURPOSE: data message.
     1232    13199            CALL: similar to that of KVM$SND_RQSDAT_GNR.
     1233    13200            DESCRIPTION:
     1234    13201                  build the KV$VDOVLP_DAT1 or KV$VDOVLP_DAT2 structure in CQ.
     1235    13202        */
     1236    13203
     1237    13204    1   KVM$SND_PRM: PROC ;

  13204   2 0009BE  EFC7 0032            KVM$SND_PRM     STB,B6   Y@TRCBFR$+5,AUTO

     1238    13205
     1239    13206    2      TXTBYTSIZ = KV$SND_PRM.DAT__.DATBYTSIZ;

  13206   2 0009C0  DCC7 0004                            LDB,B5   @KV$SND_X,AUTO
          2 0009C2  E845 0012                            LDR,R6   18,B5
          2 0009C4  EF47 0017                            STR,R6   TXTBYTSIZ,AUTO

     1240    13207    2      IF TXTBYTSIZ < 256 THEN

  13207   2 0009C6  E970 0100                            CMR,R6   256,IMO
          2 0009C8  0281 0006                            BGE      s:13210,PREL

     1241    13208    2      MSGWRDSIZ = SIZEW(KV$VDOVLP_DAT1);

  13208   2 0009CA  5C01                                 LDV,R5   1
          2 0009CB  DF47 000F                            STR,R5   MSGWRDSIZ,AUTO
          2 0009CD  0F81 0004                            B        s:13211,PREL

     1242    13209    2      ELSE
     1243    13210    2      MSGWRDSIZ = SIZEW(KV$VDOVLP_DAT2);

  13210   2 0009CF  5C02                                 LDV,R5   2
          2 0009D0  DF47 000F                            STR,R5   MSGWRDSIZ,AUTO

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:162  
     1244    13211    2      MSGWRDSIZ = MSGWRDSIZ+SIZEW(KV_VDO_PRM_RSP)+(TXTBYTSIZ+1)/2;

  13211   2 0009D2  6E01                                 ADV,R6   1
          2 0009D3  6041                                 SOR,R6   1
          2 0009D4  EA55                                 ADD,R6   R5
          2 0009D5  D856                                 LDR,R5   R6
          2 0009D6  5E01                                 ADV,R5   1
          2 0009D7  DF47 000F                            STR,R5   MSGWRDSIZ,AUTO

     1245    13212    2      IF VLP_WRDSIZ=0 THEN SLACK_BYT = MOD(TXTBYTSIZ,2);

  13212   2 0009D9  E847 0014                            LDR,R6   VLP_WRDSIZ,AUTO
          2 0009DB  6981 0007                            BNEZ,R6  s:13214,PREL

  13212   2 0009DD  C847 0017                            LDR,R4   TXTBYTSIZ,AUTO
          2 0009DF  C570 0001                            AND,R4   1,IMO
          2 0009E1  CF47 0016                            STR,R4   SLACK_BYT,AUTO

     1246    13213
     1247    13214    2      CALL KVM$FNDSPACE;

  13214   2 0009E3  E3C0 F9B4                            LNJ,B6   s:0,PREL
          2 0009E5       0001                            DC       s:13218,PREL

     1248    13215
     1249    13216        /* put KV$VDO_PRM structure in CQ */
     1250    13217
     1251    13218    2      %VDO_PRM = KV_VDO_PRM_RSP;

  13218   2 0009E6  ECC7 0006                            LDB,B6   PUT$,AUTO
          2 0009E8  E800 0000 0153  00                   LDR,R6   KV_VDO_PRM_RSP
          2 0009EB  EF06                                 STR,R6   ,B6

     1252    13219    2      PUT$ = PINCRW (PUT$, SIZEW(KV_VDO_PRM_RSP));

  13219   2 0009EC  DBC6 0001                            LAB,B5   1,B6
          2 0009EE  DFC7 0006                            STB,B5   PUT$,AUTO
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:163  
          2 0009F0  0F81 0003                            B        s:13224,PREL

     1253    13220
     1254    13221        /* put KV$VDOVLP_PRM structure in CQ */
     1255    13222
     1256    13223    2   KVM$SND_PUTDAT: ENTRY;

  13223   2 0009F2  EFC7 0032            KVM$SND_PUTDAT  STB,B6   Y@TRCBFR$+5,AUTO

     1257    13224    3      IF TXTBYTSIZ < 256 THEN DO;

  13224   2 0009F4  E847 0017                            LDR,R6   TXTBYTSIZ,AUTO
          2 0009F6  E970 0100                            CMR,R6   256,IMO
          2 0009F8  0281 0015                            BGE      s:13231,PREL

     1258    13225    3         %VDOVLP_DAT1 = KV_VDOVLP_DAT1;

  13225   2 0009FA  ECC7 0006                            LDB,B6   PUT$,AUTO
          2 0009FC  D800 0000 0163  00                   LDR,R5   KV_VDOVLP_DAT1
          2 0009FF  DF06                                 STR,R5   ,B6

     1259    13226    3         IF LST_VLP < 0 THEN

  13226   2 000A00  C847 0015                            LDR,R4   LST_VLP,AUTO
          2 000A02  4881 0003                            BGEZ,R4  s:13228,PREL

     1260    13227    3         %VDOVLP_DAT1.LST = '1'B;

  13227   2 000A04  8906                                 LBT,'8000'X       ,B6
  13227   2 000A05       8000

     1261    13228    3         %VDOVLP_DAT1.BYTSIZ = TXTBYTSIZ;

  13228   2 000A06  EA86                                 SRM,R6,'00FF'X    ,B6
  13228   2 000A07       00FF

     1262    13229    3         PUT$ = PINCRW(PUT$, SIZEW(KV$VDOVLP_DAT1));
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:164  

  13229   2 000A08  DBC6 0001                            LAB,B5   1,B6
          2 000A0A  DFC7 0006                            STB,B5   PUT$,AUTO

     1263    13230    3      END; ELSE DO;

  13230   2 000A0C  0F81 0015                            B        s:13240,PREL

     1264    13231    3         %VDOVLP_DAT2 = KV_VDOVLP_DAT2;

  13231   2 000A0E  8C80 0000 0164  00                   LDI      KV_VDOVLP_DAT2
          2 000A11  ECC7 0006                            LDB,B6   PUT$,AUTO
          2 000A13  8D06                                 SDI      ,B6

     1265    13232    3         IF LST_VLP < 0 THEN

  13232   2 000A14  D847 0015                            LDR,R5   LST_VLP,AUTO
          2 000A16  5881 0003                            BGEZ,R5  s:13234,PREL

     1266    13233    3         %VDOVLP_DAT2.LST = '1'B;

  13233   2 000A18  8906                                 LBT,'8000'X       ,B6
  13233   2 000A19       8000

     1267    13234    3         %VDOVLP_DAT2.BYTSIZ = TXTBYTSIZ;

  13234   2 000A1A  C847 0017                            LDR,R4   TXTBYTSIZ,AUTO
          2 000A1C  CF46 0001                            STR,R4   1,B6

     1268    13235    3         PUT$ = PINCRW(PUT$, SIZEW(KV$VDOVLP_DAT2));

  13235   2 000A1E  DBC6 0002                            LAB,B5   2,B6
          2 000A20  DFC7 0006                            STB,B5   PUT$,AUTO

     1269    13236    3      END;

     1270    13237
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:165  
     1271    13238        /* put actual data in CQ */
     1272    13239
     1273    13240    2      PUT$->DATTXT = SUBSTR(KV$SND_DAT.DAT__.ADR$->DMYTXT,

  13240   2 000A22  ECC7 0004                            LDB,B6   @KV$SND_X,AUTO
          2 000A24  CCC6 000F                            LDB,B4   15,B6
          2 000A26  E846 0011                            LDR,R6   17,B6
          2 000A28  AB84                                 LAB,B2   ,B4
          2 000A29  A856                                 LDR,R2   R6
          2 000A2A  E847 0017                            LDR,R6   TXTBYTSIZ,AUTO
          2 000A2C  BB85                                 LAB,B3   ,B5
          2 000A2D  3C00                                 LDV,R3   0
          2 000A2E  0008                                 MMM

     1274    13241    2        KV$SND_DAT.DAT__.BYTX,TXTBYTSIZ);
     1275    13242    2      PUT$ = PINCRW(Y@VDO$,MSGWRDSIZ-VLP_WRDSIZ);

  13242   2 000A2F  E847 000F                            LDR,R6   MSGWRDSIZ,AUTO
          2 000A31  E247 0014                            SUB,R6   VLP_WRDSIZ,AUTO
          2 000A33  9CC7 0018                            LDB,B1   Y@VDO$,AUTO
          2 000A35  B856                                 LDR,R3   R6
          2 000A36  EBB1                                 LAB,B6   ,B1,R3
          2 000A37  EFC7 0006                            STB,B6   PUT$,AUTO

     1276    13243
     1277    13244        /* that's all */
     1278    13245
     1279    13246    2      RETURN;

  13246   2 000A39  ECC7 0032                            LDB,B6   Y@TRCBFR$+5,AUTO
          2 000A3B  C3C6 0001                            LNJ,B4   1,B6

     1280    13247    2   END KVM$SND_PRM;
     1281    13248
     1282    13249        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:166  
     1283    13250        /*I*
     1284    13251            NAME: KVM$SND_RQSDAT_GNR
     1285    13252            PURPOSE:
     1286    13253                  request data message.
     1287    13254            CALL: After knowing it is RQSDAT in the DO CASE(KV$SND.FNC),
     1288    13255                  CALL KVM$SND_RQSDAT_GNR.
     1289    13256            DESCRIPTION:
     1290    13257                  Check if it is valid to send this message now. If so
     1291    13258                  build the KV$VDO_RQSDAT message in the CQ.
     1292    13259        */
     1293    13260
     1294    13261    1   KVM$SND_RQSDAT_GNR: PROC ;

  13261   2 000A3D  EFC7 0030            KVM$SND_RQSDAT_*STB,B6   Y@TRCBFR$+3,AUTO

     1295    13262
     1296    13263        %INCLUDE KH$CLK;
     1297    13633        %INCLUDE KH_CLKFNC_E;
     1298    13678        %KH$CLK (FPTN=KV_CLK_CANCEL, STCLASS=SYMREF);
     1299    13827        %KH$CLK;
     1300    13976        %EQU KH@CLK=CHARTEXT('ADDR(KV@VDH_GETBFR)->KH$CLK');
     1301    13977        %KV_CLKNMB_E;
     1302    13986
     1303    13987    2   DCL KHC$CLOCK ENTRY(1) ALTRET;
     1304    13988
     1305    13989        /* see if we have space in CQ */
     1306    13990    2      MSGWRDSIZ = SIZEW(KV_VDO_RQSDAT_GNR);

  13990   2 000A3F  6C05                                 LDV,R6   5
          2 000A40  EF47 000F                            STR,R6   MSGWRDSIZ,AUTO

     1307    13991    2      CALL KVM$FNDSPACE;

  13991   2 000A42  E3C0 F955                            LNJ,B6   s:0,PREL
          2 000A44       0001                            DC       s:13993,PREL

     1308    13992        /* build the KV$VDO message in the CQ */
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:167  
     1309    13993    2      %VDO_RQSDAT_GNR = KV_VDO_RQSDAT_GNR;

  13993   2 000A45  AB80 0000 013D  00                   LAB,B2   KV_VDO_RQSDAT_GNR
          2 000A48  2C00                                 LDV,R2   0
          2 000A49  6C0A                                 LDV,R6   10
          2 000A4A  BCC7 0006                            LDB,B3   PUT$,AUTO
          2 000A4C  3C00                                 LDV,R3   0
          2 000A4D  0008                                 MMM

     1310    13994        /* set .MAXRCRBYTSIZ and .MAXNMBRCR to some high value */
     1311    13995    2      IF NOT %KV_SSN.OUTPUTDISCARD AND NOT %KV_VDI.HALFDUPLEXPAPERTAPE

  13995   2 000A4E  ECC7 0008                            LDB,B6   Y@SSN$,AUTO
          2 000A50  82C6 0028                            LB,'0800'X        40,B6
          2 000A52       0800
          2 000A53  0501 0013                            BBT      s:13999,PREL
          2 000A55  DC86                                 LDB,B5   ,B6
          2 000A56  82C5 0019                            LB,'0002'X        25,B5
          2 000A58       0002
          2 000A59  0501 000D                            BBT      s:13999,PREL

     1312    13996    2      THEN %VDO_RQSDAT_GNR.MAXRCRBYTSIZ =

  13996   2 000A5B  CCC7 0006                            LDB,B4   PUT$,AUTO
          2 000A5D  BC80 0000 0000  xsym                 LDB,B3   KV_SNDCQ_QHDR$
          2 000A60  E843 0002                            LDR,R6   2,B3
          2 000A62  6002                                 SOL,R6   2
          2 000A63  EA70 FED6                            ADD,R6   -298,IMO
          2 000A65  EF44 0001                            STR,R6   1,B4

     1313    13997    2        KNH$QHDR.RCQ.SZ*4-2*SIZEC(KNH_MESS) /* Room for the NOP mess too         */
     1314    13998    2        -SIZEC(KV$VDO_DAT)-SIZEC(KV$VDOVLP_DAT2)-258; /* Room for a key too      */
     1315    13999    2      IF %KV_SSN.NO_WATREDTRG THEN

  13999   2 000A67  82C6 0028                            LB,'0004'X        40,B6
  13999   2 000A69       0004
          2 000A6A  0501 005B                            BBT      s:14041,PREL
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:168  

     1316    14000
     1317    14001        /* We're trying to start a no-wait read.  Shut down the other end. */
     1318    14002
     1319    14003    2      ;
     1320    14004    2      ELSE
     1321    14005    2      IF NOT %KV_VDI.RQSOTP THEN

  14005   2 000A6C  DC86                                 LDB,B5   ,B6
          2 000A6D  82C5 0019                            LB,'0008'X        25,B5
          2 000A6F       0008
          2 000A70  0581 0055                            BBF      s:14041,PREL

     1322    14006
     1323    14007        /* We're trying to shut down a multiple session instance. */
     1324    14008
     1325    14009    2      ;
     1326    14010    2      ELSE
     1327    14011    2      IF %KV_SSN.OTPBLK THEN

  14011   2 000A72  82C6 0028                            LB,'4000'X        40,B6
  14011   2 000A74       4000
          2 000A75  0581 0042                            BBF      s:14036,PREL

     1328    14012    3      DO;

     1329    14013    3         %KV_SSN.OTPBLK = '0'B;

  14013   2 000A77  8846 0028                            LBF,'4000'X       40,B6
  14013   2 000A79       4000

     1330    14014    3         IF (%KV_SSN.RCVFLWCTRTMPMAXCRD ~= 0) THEN

  14014   2 000A7A  E846 001F                            LDR,R6   31,B6
          2 000A7C  6901 0009                            BEZ,R6   s:14021,PREL

     1331    14015    4         DO;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:169  

     1332    14016    4            %VDO_RQSDAT_GNR.MAXNMBBYT = %KV_SSN.RCVFLWCTRTMPMAXCRD;

  14016   2 000A7E  CCC7 0006                            LDB,B4   PUT$,AUTO
          2 000A80  EF44 0003                            STR,R6   3,B4

     1333    14017    4            %KV_SSN.RCVFLWCTRTMPMAXCRD = 0;

  14017   2 000A82  8746 001F                            CL       31,B6

     1334    14018    4         END;

  14018   2 000A84  0F81 0007                            B        s:14023,PREL

     1335    14019    3         ELSE
     1336    14020    4         DO;

     1337    14021    4            %VDO_RQSDAT_GNR.MAXNMBBYT = %KV_VDI.RCVFLWCTRMAXCRD;

  14021   2 000A86  CCC7 0006                            LDB,B4   PUT$,AUTO
          2 000A88  D845 0017                            LDR,R5   23,B5
          2 000A8A  DF44 0003                            STR,R5   3,B4

     1338    14022    4         END;

     1339    14023    3         %KV_SSN.RCVFLWCTRCRDINC = 0;

  14023   2 000A8C  8746 001E                            CL       30,B6

     1340    14024    3         IF %KV_SSN.CLKSET(%KV_CLKNMB_REDTIMOUT) AND NOT %KV_SSN.REDRQSPND THEN

  14024   2 000A8E  82C6 0029                            LB,'0040'X        41,B6
  14024   2 000A90       0040
          2 000A91  0581 0034                            BBF      s:14041,PREL
          2 000A93  82C6 0028                            LB,'0002'X        40,B6
          2 000A95       0002
          2 000A96  0501 002F                            BBT      s:14041,PREL
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:170  

     1341    14025    4         DO;

     1342    14026        /* Cancel the read timeout clock - it was set when we blocked. */
     1343    14027    4            %KV_SSN.CLKSET(%KV_CLKNMB_REDTIMOUT) = '0'B;

  14027   2 000A98  8846 0029                            LBF,'0040'X       41,B6
  14027   2 000A9A       0040

     1344    14028    4            %KH@CLK = KV_CLK_CANCEL;

  14028   2 000A9B  AB80 0000 0000  xsym                 LAB,B2   KV_CLK_CANCEL
          2 000A9E  2C00                                 LDV,R2   0
          2 000A9F  6C16                                 LDV,R6   22
          2 000AA0  BB87                                 LAB,B3   ,AUTO
          2 000AA1  3C34                                 LDV,R3   52
          2 000AA2  0008                                 MMM

     1345    14029    4            %KH@CLK.UID$ = ADDR(%KV_SSN);

  14029   2 000AA3  ECC7 0008                            LDB,B6   Y@SSN$,AUTO
          2 000AA5  EFC7 001C                            STB,B6   KV@VDH_GETBFR+2,AUTO

     1346    14030    4            %KH@CLK.UVAL = %KV_CLKNMB_REDTIMOUT;

  14030   2 000AA7  6C01                                 LDV,R6   1
          2 000AA8  EF47 001E                            STR,R6   KV@VDH_GETBFR+4,AUTO

     1347    14031    4            CALL KHC$CLOCK (%KH@CLK);

  14031   2 000AAA  DBC7 001A                            LAB,B5   KV@VDH_GETBFR,AUTO
          2 000AAC  DFC7 0042                            STB,B5   TAKE$+2,AUTO
          2 000AAE  BBC7 0042                            LAB,B3   TAKE$+2,AUTO
          2 000AB0  CBF0 0100                            LAB,B4   256,IMO
          2 000AB2  E380 0000 0000  xent                 LNJ,B6   KHC$CLOCK
          2 000AB5       0001                            DC       s:14033,PREL

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:171  
     1348    14032    4         END;

     1349    14033    3      END;

  14033   2 000AB6  0F81 000F                            B        s:14041,PREL

     1350    14034    2      ELSE
     1351    14035    3      DO;

     1352    14036    3         %VDO_RQSDAT_GNR.MAXNMBBYT = %KV_SSN.RCVFLWCTRCRDINC;

  14036   2 000AB8  CCC7 0006                            LDB,B4   PUT$,AUTO
          2 000ABA  E846 001E                            LDR,R6   30,B6
          2 000ABC  EF44 0003                            STR,R6   3,B4

     1353    14037    3         %VDO_RQSDAT_GNR.INCMAXNMBBYT = '1'B;

  14037   2 000ABE  8944 0004                            LBT,'4000'X       4,B4
  14037   2 000AC0       4000

     1354    14038    3         %VDO_RQSDAT_GNR.INCMAXNMBRCR = '1'B;

  14038   2 000AC1  8944 0004                            LBT,'8000'X       4,B4
  14038   2 000AC3       8000

     1355    14039    3         %KV_SSN.RCVFLWCTRCRDINC = 0;

  14039   2 000AC4  8746 001E                            CL       30,B6

     1356    14040    3      END;

     1357    14041    2      %VDO_RQSDAT_GNR.MAXNMBRCR = %VDO_RQSDAT_GNR.MAXNMBBYT/20;

  14041   2 000AC6  ECC7 0006                            LDB,B6   PUT$,AUTO
          2 000AC8  F846 0003                            LDR,R7   3,B6
          2 000ACA  6C00                                 LDV,R6   0
          2 000ACB  F370 0014                            DIV,R7   20,IMO
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:172  
          2 000ACD  E857                                 LDR,R6   R7
          2 000ACE  EF46 0002                            STR,R6   2,B6

     1358    14042    2      PUT$ = PINCRW(PUT$,SIZEW(KV$VDO_RQSDAT));

  14042   2 000AD0  DBC6 0005                            LAB,B5   5,B6
          2 000AD2  DFC7 0006                            STB,B5   PUT$,AUTO

     1359    14043    2      RETURN;

  14043   2 000AD4  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 000AD6  C3C6 0001                            LNJ,B4   1,B6

     1360    14044    2   END KVM$SND_RQSDAT_GNR;
     1361    14045
     1362    14046        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:173  
     1363    14047        /*I*
     1364    14048            NAME: KVM$SND_RQSMRK
     1365    14049            PURPOSE:
     1366    14050                  request marker.
     1367    14051            CALL: similar to that of KVM$SND_RQSDAT_GNR.
     1368    14052            DESCRIPTION:
     1369    14053                  call KVM$FNDSPACE to get CQ space. Send KV$VDO_RQSMRK
     1370    14054                  message.
     1371    14055                  Return.
     1372    14056        */
     1373    14057
     1374    14058    1   KVM$SND_RQSMRK: PROC ;

  14058   2 000AD8  EFC7 0030            KVM$SND_RQSMRK  STB,B6   Y@TRCBFR$+3,AUTO

     1375    14059
     1376    14060        /* see if we have space in CQ */
     1377    14061    2      MSGWRDSIZ = SIZEW(KV_VDO_RQSMRK);

  14061   2 000ADA  6C01                                 LDV,R6   1
          2 000ADB  EF47 000F                            STR,R6   MSGWRDSIZ,AUTO

     1378    14062    2      CALL KVM$FNDSPACE;

  14062   2 000ADD  E3C0 F8BA                            LNJ,B6   s:0,PREL
          2 000ADF       0001                            DC       s:14064,PREL

     1379    14063        /* build the KV$VDO message in the CQ */
     1380    14064    2      %VDO_RQSMRK = KV_VDO_RQSMRK;

  14064   2 000AE0  ECC7 0006                            LDB,B6   PUT$,AUTO
          2 000AE2  E800 0000 0152  00                   LDR,R6   KV_VDO_RQSMRK
          2 000AE5  EF06                                 STR,R6   ,B6

     1381    14065    2      PUT$ = PINCRW(PUT$,SIZEW(KV$VDO_RQSMRK));

  14065   2 000AE6  DBC6 0001                            LAB,B5   1,B6
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:174  
          2 000AE8  DFC7 0006                            STB,B5   PUT$,AUTO

     1382    14066    2      RETURN;

  14066   2 000AEA  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 000AEC  C3C6 0001                            LNJ,B4   1,B6

     1383    14067    2   END KVM$SND_RQSMRK;
     1384    14068        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:175  
     1385    14069        /*I*
     1386    14070            NAME: KVM$SND_RQSSTT
     1387    14071            PURPOSE:
     1388    14072                  request status messgae.
     1389    14073            CALL: similar to that of KVM$SND_RQSDAT_GNR.
     1390    14074            DESCRIPTION:
     1391    14075                  call KVM$FNDSPACE to get CQ space. Send KV$VDO_RQSSTT
     1392    14076                  message. Reset STTRQSENB in session context.
     1393    14077                  Return.
     1394    14078        */
     1395    14079
     1396    14080    1   KVM$SND_RQSSTT: PROC ;

  14080   2 000AEE  EFC7 0030            KVM$SND_RQSSTT  STB,B6   Y@TRCBFR$+3,AUTO

     1397    14081
     1398    14082        /* see if we have space in CQ */
     1399    14083    2      MSGWRDSIZ = SIZEW(KV_VDO_RQSSTT);

  14083   2 000AF0  6C01                                 LDV,R6   1
          2 000AF1  EF47 000F                            STR,R6   MSGWRDSIZ,AUTO

     1400    14084    2      CALL KVM$FNDSPACE;

  14084   2 000AF3  E3C0 F8A4                            LNJ,B6   s:0,PREL
          2 000AF5       0001                            DC       s:14086,PREL

     1401    14085        /* build the KV$VDO message in the CQ */
     1402    14086    2      %VDO_RQSSTT = KV_VDO_RQSSTT;

  14086   2 000AF6  ECC7 0006                            LDB,B6   PUT$,AUTO
          2 000AF8  E800 0000 0151  00                   LDR,R6   KV_VDO_RQSSTT
          2 000AFB  EF06                                 STR,R6   ,B6

     1403    14087    2      PUT$ = PINCRW(PUT$,SIZEW(KV$VDO_RQSSTT));

  14087   2 000AFC  DBC6 0001                            LAB,B5   1,B6
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:176  
          2 000AFE  DFC7 0006                            STB,B5   PUT$,AUTO

     1404    14088    2      %KV_SSN.STTRQSENB = '0'B;

  14088   2 000B00  ECC7 0008                            LDB,B6   Y@SSN$,AUTO
          2 000B02  8846 0028                            LBF,'0020'X       40,B6
          2 000B04       0020

     1405    14089    2      RETURN;

  14089   2 000B05  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 000B07  C3C6 0001                            LNJ,B4   1,B6

     1406    14090    2   END KVM$SND_RQSSTT;
     1407    14091        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:177  
     1408    14092        /*I*
     1409    14093             NAME: KVM$SND_SCHLCLSSN
     1410    14094             PURPOSE:
     1411    14095                  Wakeup message
     1412    14096             DESCRIPTION:
     1413    14097                            loops a null message to wake up base level for
     1414    14098                            this Session.
     1415    14099          */
     1416    14100
     1417    14101    1   KVM$SND_SCHLCLSSN: PROC ;

  14101   2 000B09  EFC7 0030            KVM$SND_SCHLCLS*STB,B6   Y@TRCBFR$+3,AUTO

     1418    14102
     1419    14103    2      MSGWRDSIZ = 0;

  14103   2 000B0B  8747 000F                            CL       MSGWRDSIZ,AUTO

     1420    14104    2      CALL KVM$FNDSPACE;

  14104   2 000B0D  E3C0 F88A                            LNJ,B6   s:0,PREL
          2 000B0F       0001                            DC       s:14106,PREL

     1421    14105
     1422    14106    2      %MESS.FUNCTION=%KN_FCN_LOOP;

  14106   2 000B10  ECC7 000A                            LDB,B6   Y@KNH$,AUTO
          2 000B12  6C07                                 LDV,R6   7
          2 000B13  EF06                                 STR,R6   ,B6

     1423    14107    2      RETURN;

  14107   2 000B14  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 000B16  C3C6 0001                            LNJ,B4   1,B6

     1424    14108
     1425    14109    2   END KVM$SND_SCHLCLSSN;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:178  
     1426    14110        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:179  
     1427    14111        /*N*
     1428    14112                dummy procedures
     1429    14113        */
     1430    14114
     1431    14115    1   KVM$SND_STT: PROC;

  14115   2 000B18  EFC7 0030            KVM$SND_STT     STB,B6   Y@TRCBFR$+3,AUTO

     1432    14116    2      RETURN;

  14116   2 000B1A  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 000B1C  C3C6 0001                            LNJ,B4   1,B6

     1433    14117    2   END KVM$SND_STT;
     1434    14118        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:180  
     1435    14119
     1436    14120        /*I*
     1437    14121            NAME: Y$RLSBFR
     1438    14122            PURPOSE:
     1439    14123                  After putting the KV$SND_DAT/PRM message in CQ, look
     1440    14124                  at the BFRRLSDSP bit ( byte ) to determin whether the
     1441    14125                  message buffer should be released.
     1442    14126             CALL: CALL Y$RLSBFR ( vdh-buffer-descriptor )
     1443    14127                  There is no altreturn.
     1444    14128            PARAMETERS:
     1445    14129                  vdh-buffer-descriptor.
     1446    14130            DESCRIPTION:
     1447    14131                  If BFRRLSDSP byte says to release, call KVS$RLSBFR
     1448    14132                  with the KV$VDH_RLSBFR structure.
     1449    14133        */
     1450    14134
     1451    14135    1   Y$RLSBFR: PROC (Y@BFRDSC__);

  14135   2 000B1E  EFC7 0030            Y$RLSBFR        STB,B6   Y@TRCBFR$+3,AUTO

     1452    14136
     1453    14137        %KV$BFRDSC (NAME=Y@BFRDSC__, STCLASS=PARAM);
     1454    14164
     1455    14165        /* should we release this buffer ?  */
     1456    14166
     1457    14167    2      IF (Y@BFRDSC__.BFRRLSDSP ~= %KV_BFRRLSDSP_MSG) THEN RETURN;

  14167   2 000B20  DCC7 0032                            LDB,B5   @Y@BFRDSC__,AUTO
          2 000B22  E845 0005                            LDR,R6   5,B5
          2 000B24  E570 00FF                            AND,R6   255,IMO
          2 000B26  6D01                                 CMV,R6   1
          2 000B27  0901 0005                            BE       s:14169,PREL

  14167   2 000B29  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 000B2B  C3C6 0001                            LNJ,B4   1,B6

     1458    14168
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:181  
     1459    14169    2      KV@VDH_RLSBFR = KV_VDH_RLSBFR;

  14169   2 000B2D  AB80 0000 0000  xsym                 LAB,B2   KV_VDH_RLSBFR
          2 000B30  2C00                                 LDV,R2   0
          2 000B31  6C0E                                 LDV,R6   14
          2 000B32  BB87                                 LAB,B3   ,AUTO
          2 000B33  3C4A                                 LDV,R3   74
          2 000B34  0008                                 MMM

     1460    14170    2      KV@VDH_RLSBFR.BFR$ = Y@BFRDSC__.ADR$;

  14170   2 000B35  EC85                                 LDB,B6   ,B5
          2 000B36  EFC7 0026                            STB,B6   KV@VDH_RLSBFR+1,AUTO

     1461    14171    2      KV@VDH_RLSBFR.BYTSIZ = Y@BFRDSC__.BFRBYTSIZ;

  14171   2 000B38  E845 0004                            LDR,R6   4,B5
          2 000B3A  EF47 0028                            STR,R6   KV@VDH_RLSBFR+3,AUTO

     1462    14172    2      KV@VDH_RLSBFR.STRTYP = Y@BFRDSC__.STRTYP;

  14172   2 000B3C  D2C5 0005                            LLH,R5   5,B5
          2 000B3E  D7C7 002B                            STH,R5   KV@VDH_RLSBFR+6,AUTO

     1463    14173    2      CALL KVS$RLSBFR (KV@VDH_RLSBFR);

  14173   2 000B40  CBC7 0025                            LAB,B4   KV@VDH_RLSBFR,AUTO
          2 000B42  CFC7 0042                            STB,B4   TAKE$+2,AUTO
          2 000B44  BBC7 0042                            LAB,B3   TAKE$+2,AUTO
          2 000B46  CBF0 0100                            LAB,B4   256,IMO
          2 000B48  E380 0000 0000  xent                 LNJ,B6   KVS$RLSBFR
          2 000B4B       0001                            DC       s:14174,PREL

     1464    14174    2      RETURN;

  14174   2 000B4C  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 000B4E  C3C6 0001                            LNJ,B4   1,B6
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:182  

     1465    14175    2   END Y$RLSBFR;
     1466    14176        %EJECT;
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:183  
     1467    14177
     1468    14178        %KV$BOX(PAGE = YES, TITLE = "Do VDH tracing");

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:184  
             14196    2   /***************************************************************************
             14197    2    *                                                                         *
             14198    2    *                               Do VDH tracing                            *
             14199    2    *                                                                         *
             14200    2    ***************************************************************************/

     1469    14205    1   Y$TRC: PROC;

  14205   2 000B50  EFC7 0030            Y$TRC           STB,B6   Y@TRCBFR$+3,AUTO

     1470    14206    3      IF Y@TRCENT = (Y$TRCBFR.TRCENT(Y$TRCBFR.TRCENTX) & %KV#TRCENT_MSK) THEN DO;

  14206   2 000B52  DCC7 002D                            LDB,B5   Y@TRCBFR$,AUTO
          2 000B54  B845 0001                            LDR,R3   1,B5
          2 000B56  BF47 0042                            STR,R3   TAKE$+2,AUTO
          2 000B58  3E02                                 ADV,R3   2
          2 000B59  B847 0042                            LDR,R3   TAKE$+2,AUTO
          2 000B5B  3E02                                 ADV,R3   2
          2 000B5C  E835                                 LDR,R6   ,B5,R3
          2 000B5D  E570 7FFF                            AND,R6   32767,IMO
          2 000B5F  D847 002C                            LDR,R5   Y@TRCENT,AUTO
          2 000B61  D956                                 CMR,R5   R6
          2 000B62  0981 0008                            BNE      s:14219,PREL

     1471    14207        /*
     1472    14208        The last trace entry is identical to the entry we're about
     1473    14209        to put in, with the possible exception of the multiple
     1474    14210        entry bit.  Just set the multiple entry bit, and don't add
     1475    14211        another entry.
     1476    14212        */
     1477    14213    3         Y$TRCBFR.TRCENT.MLT(Y$TRCBFR.TRCENTX) = '1'B;

  14213   2 000B64  A845 0001                            LDR,R2   1,B5
          2 000B66  2004                                 SOL,R2   4
          2 000B67  2E20                                 ADV,R2   32
          2 000B68  8925                                 LBT      ,B5,R2

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:185  
     1478    14214    3      END; ELSE DO;

  14214   2 000B69  0F81 000E                            B        s:14225,PREL

     1479    14215        /*
     1480    14216        The last entry isn't identical to the entry we're about to
     1481    14217        add.  Add another entry, possibly wrapping the index first.
     1482    14218        */
     1483    14219    3         Y$TRCBFR.TRCENTX = Y$TRCBFR.TRCENTX + 1;

  14219   2 000B6B  8AC5 0001                            INC      1,B5

     1484    14220    3         IF Y$TRCBFR.TRCENTX > Y$TRCBFR.MAXTRCENTX THEN

  14220   2 000B6D  E845 0001                            LDR,R6   1,B5
          2 000B6F  E905                                 CMR,R6   ,B5
          2 000B70  0A81 0003                            BALE     s:14223,PREL

     1485    14221    3         Y$TRCBFR.TRCENTX = 0;

  14221   2 000B72  8745 0001                            CL       1,B5

     1486    14222
     1487    14223    3         Y$TRCBFR.TRCENT(Y$TRCBFR.TRCENTX) = Y@TRCENT;

  14223   2 000B74  A845 0001                            LDR,R2   1,B5
          2 000B76  2E02                                 ADV,R2   2
          2 000B77  DF25                                 STR,R5   ,B5,R2

     1488    14224    3      END;                                 /* END ELSE IF TRCENTX = MAXTRCENTX   */

     1489    14225    2   END Y$TRC;

  14225   2 000B78  ECC7 0030                            LDB,B6   Y@TRCBFR$+3,AUTO
          2 000B7A  C3C6 0001                            LNJ,B4   1,B6
     1490    14226    1   END KVM$SND;

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:186  
--  Include file information  --

   KH_CLKFNC_E.:E05TOU  is referenced.
   KH$CLK.:E05TOU  is referenced.
   KV_SCODE_C.:E05TOU  is referenced.
   KV_GLB.:E05TOU  is referenced.
   KNH_MACRO_C.:E05TOU  is referenced.
   KV_INT_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   K_CP6_M.:E05TOU  is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KV_PRMID_E.:E05TOU  was found in the system file and is never referenced.
   KV_GLBCNS_E.:E05TOU  was found in the system file and is referenced.
   KV$VDO.:E05TOU  was found in the system file and is referenced.
   KV$VDH.:E05TOU  was found in the system file and is referenced.
   KV$USR.:E05TOU  was found in the system file and is never referenced.
   KV$SND.:E05TOU  was found in the system file and is referenced.
   KV$INT.:E05TOU  was found in the system file and is referenced.
   KV$GLBCTX.:E05TOU  was found in the system file and is referenced.
   KV$GLB.:E05TOU  was found in the system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KVM$SND.
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:187  

 **** Variables and constants ****

  ****  Section 000 RoData KVM$SND

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

   170-0-0/w STRC(48)    r     1 E$LD                     11F-0-0/w STRC(304)   r     1 FPT_CONNECT
   132-0-0/w STRC(96)    r     1 FPT_CONNECT_ACK          138-0-0/w STRC(32)    r     1 FPT_TERM_ACK
   117-0-0/c STRC(128)   r     1 KNH_MESS                 13A-0-0/w STRC(48)    r     1 KVM_BADLDCT
   161-0-0/w STRC(32)    r     1 KV_VDOVLP_ACTPOS         163-0-0/w STRC(16)    r     1 KV_VDOVLP_DAT1
   164-0-0/w STRC(32)    r     1 KV_VDOVLP_DAT2           15D-0-0/w STRC(64)    r     1 KV_VDOVLP_MRK_ENDACK
   159-0-0/w STRC(64)    r     1 KV_VDOVLP_MRK_LSTRCRID
   155-0-0/w STRC(64)    r     1 KV_VDOVLP_MRK_MRK        144-0-0/w STRC(32)    r     1 KV_VDO_CLSSSN_RQS
   146-0-0/w STRC(32)    r     1 KV_VDO_CLSSSN_RSP        142-0-0/w STRC(32)    r     1 KV_VDO_DAT
   148-0-0/w STRC(32)    r     1 KV_VDO_DSC               14A-0-0/w STRC(32)    r     1 KV_VDO_EVT
   14C-0-0/w STRC(16)    r     1 KV_VDO_MRK               14D-0-0/w STRC(32)    r     1 KV_VDO_OPNSSN_RQS
   14F-0-0/w STRC(32)    r     1 KV_VDO_OPNSSN_RSP        153-0-0/w STRC(16)    r     1 KV_VDO_PRM_RSP
   13D-0-0/w STRC(80)    r     1 KV_VDO_RQSDAT_GNR        152-0-0/w STRC(16)    r     1 KV_VDO_RQSMRK
   151-0-0/w STRC(16)    r     1 KV_VDO_RQSSTT
   166-0-0/w UBIN(16)    r     1 VDOVLP_BYTLNG_ARY(0:6)
   16E-0-0/w STRC(16)    r     1 Y_TRCENT_SNDSSN          16F-0-0/w STRC(16)    r     1 Y_TRCENT_SNDVDO
   16D-0-0/b BIT         r     1 Y_VDO_YES(0:15)

  ****  Section 001  Data  KVM$SND

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN(16)    r     1 KVM_SND_BADFNC             2-0-0/w PTR         r     1 KVM_SND_PRV$
     1-0-0/w UBIN(16)    r     1 KVM_SND_SCQ_SLKWRD         4-0-0/w STRC(207)   r     1 KV_FPT_WRTMLT

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:188  
     4-0-0/w PTR         r     1 @KV$SND_X                 32-0-0/w PTR         r     1 @Y@BFRDSC__
    3D-0-0/b BIT         r     1 ABSORB                    36-0-0/w UBIN(16)    r     1 DBLWRDSIZ
    3F-0-0/w UBIN(16)    r     1 EXT_BYTSIZ                3E-0-0/w UBIN(16)    r     1 EXT_DBLWRDSIZ
    10-0-0/w UBIN(16)    r     1 INHLVL                    11-0-0/b BIT         r     1 KONCAT
    *0-0-0/w UBIN(16)    r     1 KV$COPY                   *0-0-0/w STRC(240)   r     1 KV$SND
    *0-0-0/w STRC(384)   r     1 KV$SNDCQ                  *0-0-0/w STRC(544)   r     1 KV$SND_CNC
    *0-0-0/w STRC(368)   r     1 KV$SND_DAT                *0-0-0/w STRC(256)   r     1 KV$SND_EVT
    *0-0-0/w STRC(272)   r     1 KV$SND_MRK                *0-0-0/w STRC(352)   r     1 KV$SND_PRM
    *0-0-0/w ACHR        r     1 KV$SND_X                  37-0-0/w PTR         r     1 KV@SND_SAVE_QHDR$
    1A-0-0/w STRC(176)   r     1 KV@VDH_GETBFR             25-0-0/w STRC(112)   r     1 KV@VDH_RLSBFR
    13-0-0/w UBIN(16)    r     1 LOOP_CNT                  15-0-0/w SBIN(16)    r     1 LST_VLP
     F-0-0/w UBIN(16)    r     1 MSGWRDSIZ                 39-0-0/w PTR         r     1 NOP_MSG$
    12-0-0/b BIT         r     1 NOT_X25                    6-0-0/w PTR         r     1 PUT$
    16-0-0/w UBIN(16)    r     1 SLACK_BYT                 3B-0-0/w UBIN(16)    r     1 SPACE1
    3C-0-0/w UBIN(16)    r     1 SPACE2                     E-0-0/w UBIN(16)    r     1 SZ
    40-0-0/w PTR         r     1 TAKE$                     17-0-0/w UBIN(16)    r     1 TXTBYTSIZ
    14-0-0/w UBIN(16)    r     1 VLP_WRDSIZ                *0-0-0/w STRC(96)    r     1 Y@BFRDSC__
     A-0-0/w PTR         r     1 Y@KNH$                     8-0-0/w PTR         r     1 Y@SSN$
     C-0-0/w PTR         r     1 Y@STT$                    2D-0-0/w PTR         r     1 Y@TRCBFR$
    2C-0-0/w STRC(16)    r     1 Y@TRCENT                  18-0-0/w PTR         r     1 Y@VDO$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$HAND_Q$                  0-0-0/w UBIN(16)    r     1 KH_INHLVL
     0-0-0/w PTR         r     1 KV$PTR$                    0-0-0/w STRC(176)   r     1 KV_CLK_CANCEL
     0-0-0/w EPTR        r     1 KV_CQ_HNDSBR$(0:2)
     0-0-0/w PTR         r     1 KV_SNDCQ_QHDR$             0-0-0/w STRC(176)   r     1 KV_VDH_GETBFR
     0-0-0/w STRC(112)   r     1 KV_VDH_RLSBFR

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:189  
     0-0-0/w UBIN(32)    r     1 COUNTER                    0-0-0/w STRC(32)    r     1 CTX
     0-0-0/w ACHR        r     1 DATTXT                     0-0-0/w ACHR        r     1 DMYTXT
     0-0-0/w ACHR        r     1 EXT_BODY                   0-0-0/w STRC(304)   r     1 FPT$CONNECT
     0-0-0/w STRC(96)    r     1 FPT$CONNECT_ACK            0-0-0/w STRC(32)    r     1 FPT$TERM_ACK
     0-0-0/w STRC(176)   r     1 KH$CLK                     0-0-0/c STRC(128)   r     1 KNH$MESS
     0-0-0/w STRC(384)   r     1 KNH$QHDR                   0-0-0/w STRC(128)   r     1 KNH$XTNQ
     0-0-0/w STRC(480)   r     1 KV$PTR                     0-0-0/w STRC(1024)  r     1 KV$SSN
     0-0-0/w STRC(512)   r     1 KV$STR                     0-0-0/w STRC(8960)  r     1 KV$STT
     0-0-0/w STRC(912)   r     1 KV$USRPRM                  0-0-0/w STRC(80)    r     1 KV$VDH_OTPMRK
     0-0-0/w STRC(512)   r     1 KV$VDI                     0-0-0/w STRC(16)    r     1 KV$VDO
     0-0-0/w STRC(32)    r     1 KV$VDOVLP_ACTPOS           0-0-0/w STRC(96)    r     1 KV$VDOVLP_CG_MSGID
     0-0-0/w STRC(96)    r     1 KV$VDOVLP_CG_MSGTYP        0-0-0/w STRC(96)    r     1 KV$VDOVLP_CG_STA
     0-0-0/w STRC(16)    r     1 KV$VDOVLP_DAT1             0-0-0/w STRC(32)    r     1 KV$VDOVLP_DAT2
     0-0-0/w STRC(48)    r     1 KV$VDOVLP_ERR              0-0-0/w STRC(32)    r     1 KV$VDOVLP_FLDID
     0-0-0/w STRC(16)    r     1 KV$VDOVLP_KEY              0-0-0/w STRC(64)    r     1 KV$VDOVLP_MRK
     0-0-0/w STRC(32)    r     1 KV$VDO_CLSSSN              0-0-0/w STRC(32)    r     1 KV$VDO_DAT
     0-0-0/w STRC(32)    r     1 KV$VDO_DSC                 0-0-0/w STRC(32)    r     1 KV$VDO_EVT
     0-0-0/w STRC(16)    r     1 KV$VDO_MRK                 0-0-0/w STRC(32)    r     1 KV$VDO_OPNSSN
     0-0-0/w STRC(16)    r     1 KV$VDO_PRM                 0-0-0/w STRC(80)    r     1 KV$VDO_RQSDAT
     0-0-0/w STRC(16)    r     1 KV$VDO_RQSMRK              0-0-0/w STRC(16)    r     1 KV$VDO_RQSSTT
     0-0-0/w ASTR(16)    r     1 KV_VDOVLP_KEY              0-0-0/w STRC(64)    r     1 KV_VDOVLP_MRK
     0-0-0/c ACHR        r     1 LGN_STRING                 0-0-0/w STRC(48)    r     1 Y$TRCBFR


   Procedure KVM$SND requires 2940 words for executable code.
   Procedure KVM$SND requires 68 words of local(AUTO) storage.

    No errors detected in file KVM$SND.:E05TSI    .
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:190  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:191  
          MINI XREF LISTING

ABSORB IN PROCEDURE KVM$FNDSPACE
     12541**DCL     12588<<ASSIGN  12590<<ASSIGN  12601<<ASSIGN  12603>>IF
COUNTER IN PROCEDURE KVM$SND_DSCSSN
     13064**DCL     13076<<ASSIGN  13077<<ASSIGN  13078<<ASSIGN  13079<<ASSIGN
CTX.LNK$ IN PROCEDURE KVM$FNDSPACE
     12535**DCL     12571>>ASSIGN  12620<<ASSIGN  12626>>IF      12720<<ASSIGN
DATTXT
     11855**DCL     12425<<ASSIGN  12431<<ASSIGN  12437<<ASSIGN  12443<<ASSIGN  12449<<ASSIGN  12455<<ASSIGN
     13240<<ASSIGN
DBLWRDSIZ IN PROCEDURE KVM$FNDSPACE
     12536**DCL     12648<<ASSIGN  12649>>IF      12670<<ASSIGN  12673>>IF      12685>>IF      12696>>IF
     12700>>ASSIGN  12712>>ASSIGN
DMYTXT
     11856**DCL     12326<<ASSIGN  12326>>ASSIGN  12425>>ASSIGN  12431>>ASSIGN  12437>>ASSIGN  12443>>ASSIGN
     12449>>ASSIGN  12455>>ASSIGN  13240>>ASSIGN
E$LD IN PROCEDURE KVM$SND_DAT
     12928**DCL     13023--ASSIGN  13024--ASSIGN  13027--ASSIGN
EXT_BODY IN PROCEDURE KVM$FNDSPACE
     12544**DCL     12607<<ASSIGN  12607>>ASSIGN
EXT_BYTSIZ IN PROCEDURE KVM$FNDSPACE
     12543**DCL     12544--IMP-SIZ 12574<<ASSIGN  12607>>ASSIGN  12607>>ASSIGN
EXT_DBLWRDSIZ IN PROCEDURE KVM$FNDSPACE
     12542**DCL     12573<<ASSIGN  12574>>ASSIGN  12589>>IF      12592>>IF      12608>>ASSIGN
FND_RETURN IN PROCEDURE KVM$FNDSPACE
     12732**LABEL   12653--GOTO    12683--GOTO    12694--GOTO
FPT$CONNECT
     10084**DCL     12854<<ASSIGN
FPT$CONNECT.RESOURCE
     10090**DCL     12857<<ASSIGN
FPT$CONNECT.RLCID
     10120**DCL     12856<<ASSIGN
FPT$CONNECT.RLCID.GENERATION
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:192  
     10120**DCL     10121--REDEF
FPT$CONNECT.RLCID.LDCTX
     10121**DCL     10121--REDEF
FPT$CONNECT.SPEED
     10123**DCL     12858<<ASSIGN
FPT$CONNECT.TERMINAL_ID
     10107**DCL     12855<<ASSIGN
FPT$CONNECT.TERMINAL_ID.TERM
     10109**DCL     10118--REDEF
FPT$CONNECT.TYPE
     10088**DCL     12859<<ASSIGN
FPT$CONNECT_ACK
     10203**DCL     12864<<ASSIGN
FPT$CONNECT_ACK.REASON
     10207**DCL     12866<<ASSIGN
FPT$CONNECT_ACK.UID.UID
     10233**DCL     10233--REDEF   10233--REDEF
FPT$TERM_ACK
     10276**DCL     12818<<ASSIGN
FPT_CONNECT
     10015**DCL     12846--ASSIGN  12853--ASSIGN  12854>>ASSIGN  12860--ASSIGN
FPT_CONNECT.RLCID.GENERATION
     10051**DCL     10052--REDEF
FPT_CONNECT.RLCID.LDCTX
     10052**DCL     10052--REDEF
FPT_CONNECT.TERMINAL_ID.TERM
     10040**DCL     10049--REDEF
FPT_CONNECT_ACK
     10154**DCL     12848--ASSIGN  12863--ASSIGN  12864>>ASSIGN  12870--ASSIGN
FPT_CONNECT_ACK.UID.UID
     10184**DCL     10184--REDEF   10184--REDEF
FPT_TERM_ACK
     10254**DCL     12812--ASSIGN  12816--ASSIGN  12818>>ASSIGN  12819--ASSIGN
G$HAND_Q$
     10283**DCL     12560>>IF      12564>>ASSIGN  12565>>ASSIGN  12571>>ASSIGN  12571>>ASSIGN  12578>>IF
     12578>>IF      12580>>ASSIGN  12580>>ASSIGN  12581>>ASSIGN  12585>>ASSIGN  12585>>ASSIGN  12595>>ASSIGN
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:193  
     12595>>ASSIGN  12595>>ASSIGN  12598>>ASSIGN  12598>>ASSIGN  12600>>ASSIGN  12605>>ASSIGN  12605>>ASSIGN
     12605>>ASSIGN  12608>>ASSIGN  12608>>ASSIGN  12620>>ASSIGN  12620>>ASSIGN  12626>>IF      12626>>IF
     12627>>ASSIGN  12635>>IF      12696>>IF      12700>>ASSIGN  12718>>ASSIGN  12719>>IF      12735>>IF
INHLVL
     11829**DCL     12213<<ASSIGN  12383<<ASSIGN  12385>>IF      12419<<ASSIGN  12473>>IF      12557<>CALL
KH$CLK IN PROCEDURE KVM$SND_RQSDAT_GNR
     13841**DCL     14028<<ASSIGN  14031<>CALL
KH$CLK.UID IN PROCEDURE KVM$SND_RQSDAT_GNR
     13857**DCL     13858--REDEF   13859--REDEF
KH$CLK.UID$ IN PROCEDURE KVM$SND_RQSDAT_GNR
     13858**DCL     14029<<ASSIGN
KH$CLK.UVAL IN PROCEDURE KVM$SND_RQSDAT_GNR
     13864**DCL     14030<<ASSIGN
KHC$CLOCK IN PROCEDURE KVM$SND_RQSDAT_GNR
     13987**DCL-ENT 14031--CALL
KHD$SCREECH
     10532**DCL-ENT 12755--CALL
KHI$DISABLE
     10533**DCL-ENT 12557--CALL
KHI$ENABLE
     10534**DCL-ENT 12386--CALL    12474--CALL
KH_INHLVL
      4204**DCL     12213>>ASSIGN  12383>>ASSIGN  12385>>IF      12419>>ASSIGN  12473>>IF
KNH$MESS
      9964**DCL     12554--ASSIGN  12596<<ASSIGN  12677<<ASSIGN  12750<<ASSIGN  12761--ASSIGN
KNH$MESS.FPTSZ
      9997**DCL     12598<<ASSIGN  12679<<ASSIGN  12816<<ASSIGN  12853<<ASSIGN  12863<<ASSIGN
KNH$MESS.FUNCTION
      9964**DCL      9964--REDEF   12359>>ASSIGN  12597<<ASSIGN  12678<<ASSIGN  12815<<ASSIGN  12852<<ASSIGN
     12862<<ASSIGN  14106<<ASSIGN
KNH$MESS.LAST_PTR
      9997**DCL     12459<<ASSIGN  12751<<ASSIGN
KNH$MESS.LDCTX
      9969**DCL     12758<<ASSIGN  12868<<ASSIGN  13010>>IF
KNH$MESS.MSGSZ
      9998**DCL     12744<<ASSIGN  12744>>ASSIGN  12760<<ASSIGN
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:194  
KNH$MESS.UID
      9994**DCL      9994--REDEF    9994--REDEF
KNH$MESS.UID$
      9994**DCL     12759<<ASSIGN
KNH$QHDR.CTX.OFFSET
     10328**DCL     12571>>ASSIGN  12620>>ASSIGN  12626>>IF      12720>>ASSIGN
KNH$QHDR.CTX.WU
     10332**DCL     12635<<ASSIGN  12718<<ASSIGN
KNH$QHDR.LAST_SCQPTR
     10333**DCL     12736>>ASSIGN  12737<<ASSIGN
KNH$QHDR.RCQ
     10324**DCL     10324--REDEF
KNH$QHDR.RCQ.SZ
     10324**DCL     13996>>ASSIGN
KNH$QHDR.SCQ.IPTR
     10325**DCL     12564<<ASSIGN  12573>>ASSIGN  12578>>IF      12580>>ASSIGN  12585>>ASSIGN  12595>>ASSIGN
     12598>>ASSIGN  12600<<ASSIGN  12605>>ASSIGN  12608<<ASSIGN  12608>>ASSIGN  12638>>IF      12640>>ASSIGN
     12645>>ASSIGN  12651>>ASSIGN  12676>>ASSIGN  12679>>ASSIGN  12681<<ASSIGN  12685>>IF      12691<<ASSIGN
     12723<<ASSIGN  12737>>ASSIGN  12767<<ASSIGN  12767>>ASSIGN  13010>>IF
KNH$QHDR.SCQ.OFFSET
     10325**DCL     12595>>ASSIGN  12605>>ASSIGN  12606>>ASSIGN  12651>>ASSIGN  12676>>ASSIGN  12682>>ASSIGN
     12693>>ASSIGN  12726<<ASSIGN  12727>>ASSIGN  12730>>ASSIGN
KNH$QHDR.SCQ.RPTR
     10325**DCL     12565<<ASSIGN  12573>>ASSIGN  12578>>IF      12581>>ASSIGN  12585>>ASSIGN  12638>>IF
     12641>>ASSIGN  12645>>ASSIGN  12685>>IF      12692<<ASSIGN  12724<<ASSIGN  13010>>IF
KNH$QHDR.SCQ.SZ
     10325**DCL     12580>>ASSIGN  12598>>ASSIGN  12614>>ASSIGN  12640>>ASSIGN  12679>>ASSIGN  12685>>IF
     12696>>IF      12700>>ASSIGN  12727<<ASSIGN
KNH$QHDR.XTNDAT.LNK$
     10325**DCL     12721<<ASSIGN
KNH$XTNQ IN PROCEDURE KVM$FNDSPACE
     12502**DCL     12614--ASSIGN  12712--ASSIGN  12726--ASSIGN
KNH$XTNQ.RCQ IN PROCEDURE KVM$FNDSPACE
     12502**DCL     12502--REDEF
KNH$XTNQ.XTNDAT.LNK$ IN PROCEDURE KVM$FNDSPACE
     12503**DCL     12619>>ASSIGN  12729<<ASSIGN
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:195  
KNH$XTNQ.XTNDAT.STT$ IN PROCEDURE KVM$FNDSPACE
     12503**DCL     12615>>ASSIGN  12728<<ASSIGN
KNH_MESS
      9914**DCL     12589--IF      12596>>ASSIGN  12598--ASSIGN  12649--IF      12669--ASSIGN  12677>>ASSIGN
     12679--ASSIGN  12750>>ASSIGN  13996--ASSIGN
KNH_MESS.FUNCTION
      9914**DCL      9914--REDEF
KNH_MESS.UID
      9944**DCL      9944--REDEF    9944--REDEF
KONCAT
     11830**DCL     12177<<ASSIGN  12219<<ASSIGN  12240<<ASSIGN  12343>>IF      12380<<ASSIGN  12412<<ASSIGN
     12553>>IF      12652>>IF      12657>>IF      12671<<ASSIGN  12732>>IF      12741>>IF      13015<<ASSIGN
     13048>>IF
KV$COPY
      8516**DCL      8515--IMP-SIZ
KV$PTR.INPCNDPND
      4492**DCL      4501--REDEF    4505--REDEF
KV$PTR.LINLST$
      4488**DCL      4489--REDEF
KV$PTR.SSN$
      4486**DCL     12160>>ASSIGN  12759>>ASSIGN
KV$PTR.STR$
      4486**DCL     12866>>ASSIGN  12867>>ASSIGN  13049>>ASSIGN  13049>>ASSIGN
KV$PTR.VDI$
      4486**DCL     12161>>ASSIGN
KV$PTR$
      4480**DCL      4486--IMP-PTR 12160>>ASSIGN  12161>>ASSIGN  12759>>ASSIGN  12866>>ASSIGN  12867>>ASSIGN
     13049>>ASSIGN  13049>>ASSIGN
KV$SND.FNC
      8536**DCL     12165>>IF      12194>>IF      12217>>DOCASE  12752>>IF      12753>>IF      12763>>IF
KV$SND.RQSMRK
      8536**DCL     12166>>IF      12171>>IF      12194>>IF      12288>>IF
KV$SND.RQSMRK.DLTRCVDAT
      8536**DCL     12305>>IF
KV$SND.RQSMRK.DLTRCVRQS
      8537**DCL     12301>>IF
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:196  
KV$SND.VDOVLP
      8544**DCL      8547--REDEF
KV$SND.VDOVLP.KEY$
      8546**DCL     12205>>ASSIGN  12205>>ASSIGN  12323>>ASSIGN  12323>>ASSIGN
KV$SND.VDOVLP.MRK$
      8546**DCL     12166>>IF      12166>>IF      12171>>IF      12194>>IF
KV$SND.VDOVLP_ARY
      8547**DCL     12202>>IF      12320>>IF      12326>>ASSIGN
KV$SNDCQ.MSG1_.ADR$
      9480**DCL     12425>>ASSIGN
KV$SNDCQ.MSG1_.BYTSIZ
      9480**DCL     12413>>ASSIGN  12423>>ASSIGN
KV$SNDCQ.MSG1_.BYTX
      9480**DCL     12425>>ASSIGN
KV$SNDCQ.MSG2_.ADR$
      9506**DCL     12431>>ASSIGN
KV$SNDCQ.MSG2_.BYTSIZ
      9506**DCL     12413>>ASSIGN  12429>>ASSIGN
KV$SNDCQ.MSG2_.BYTX
      9506**DCL     12431>>ASSIGN
KV$SNDCQ.MSG3_.ADR$
      9532**DCL     12437>>ASSIGN
KV$SNDCQ.MSG3_.BYTSIZ
      9532**DCL     12413>>ASSIGN  12435>>ASSIGN
KV$SNDCQ.MSG3_.BYTX
      9532**DCL     12437>>ASSIGN
KV$SNDCQ.MSG4_.ADR$
      9558**DCL     12443>>ASSIGN
KV$SNDCQ.MSG4_.BYTSIZ
      9558**DCL     12413>>ASSIGN  12441>>ASSIGN
KV$SNDCQ.MSG4_.BYTX
      9558**DCL     12443>>ASSIGN
KV$SNDCQ.MSG5_.ADR$
      9584**DCL     12449>>ASSIGN
KV$SNDCQ.MSG5_.BYTSIZ
      9584**DCL     12413>>ASSIGN  12447>>ASSIGN
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:197  
KV$SNDCQ.MSG5_.BYTX
      9584**DCL     12449>>ASSIGN
KV$SNDCQ.MSG6_.ADR$
      9610**DCL     12455>>ASSIGN
KV$SNDCQ.MSG6_.BYTSIZ
      9610**DCL     12413>>ASSIGN  12453>>ASSIGN
KV$SNDCQ.MSG6_.BYTX
      9610**DCL     12455>>ASSIGN
KV$SND_CLSSSN.VDOVLP
      8915**DCL      8918--REDEF
KV$SND_CMPDSCSSN.VDOVLP
      8860**DCL      8863--REDEF
KV$SND_CNC.DSTNTWADR
      8690**DCL     12856>>ASSIGN
KV$SND_CNC.DSTNTWADR.LDCTX
      8690**DCL     12868>>ASSIGN
KV$SND_CNC.DSTNTWRSR
      8690**DCL     12857>>ASSIGN
KV$SND_CNC.ERR
      8659**DCL     12865>>IF
KV$SND_CNC.LGN_
      8659**DCL     12841>>IF      12844>>ASSIGN  12876>>ASSIGN
KV$SND_CNC.LINSPD
      8660**DCL     12858>>ASSIGN
KV$SND_CNC.SCNENDPNTID
      8677**DCL     12855>>ASSIGN
KV$SND_CNC.SCNENDPNTID.TERM
      8679**DCL      8688--REDEF
KV$SND_CNC.VDOVLP
      8653**DCL      8656--REDEF
KV$SND_DAT.ACTPOS
      8810**DCL     12999>>IF      13052>>IF      13054>>ASSIGN
KV$SND_DAT.DATCTRCHR
      8809**DCL     13043>>ASSIGN
KV$SND_DAT.DATCTRCHRTYP
      8745**DCL     13042>>ASSIGN
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:198  
KV$SND_DAT.DATMOD
      8745**DCL     13044>>ASSIGN
KV$SND_DAT.DAT__
      8803**DCL     12234<>CALL
KV$SND_DAT.DAT__.ADR$
      8805**DCL     13240>>ASSIGN
KV$SND_DAT.DAT__.BYTX
      8805**DCL     13240>>ASSIGN
KV$SND_DAT.DAT__.DATBYTSIZ
      8805**DCL     12991>>ASSIGN
KV$SND_DAT.KONCAT
      8809**DCL     13005>>IF      13017<<ASSIGN  13021>>IF
KV$SND_DAT.VDOVLP
      8775**DCL      8778--REDEF
KV$SND_DAT.VDOVLP.ERR$
      8776**DCL     13022>>IF      13027<<ASSIGN
KV$SND_DSCSSN.VDOVLP
      9172**DCL      9175--REDEF
KV$SND_EVT.EVTTYP
      9012**DCL     12243>>IF      12243>>IF      12246>>IF      13102>>ASSIGN
KV$SND_EVT.RQSMRK.DLTRCVRQS
      8963**DCL     12248>>IF
KV$SND_EVT.VDOVLP
      9005**DCL      9008--REDEF
KV$SND_MRK.VDH_MRK$
      9233**DCL      5222--IMP-PTR 12166>>IF      12166>>IF      13153>>IF      13159>>DOCASE  13175>>ASSIGN
     13184>>ASSIGN
KV$SND_MRK.VDOVLP
      9227**DCL      9230--REDEF
KV$SND_OPNSSN.VDOVLP
      9062**DCL      9065--REDEF
KV$SND_PRM.DAT__
      9311**DCL     12260<>CALL
KV$SND_PRM.DAT__.DATBYTSIZ
      9313**DCL     13206>>ASSIGN
KV$SND_PRM.VDOVLP
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:199  
      9283**DCL      9286--REDEF
KV$SND_RQSDAT_GNR.VDOVLP
      8598**DCL      8601--REDEF
KV$SND_RQSMRK.VDOVLP
      9424**DCL      9427--REDEF
KV$SND_RQSSTT.VDOVLP
      9117**DCL      9120--REDEF
KV$SND_STT.VDOVLP
      9368**DCL      9371--REDEF
KV$SND_X
      8515**DCL        39--PROC     8516--REDEF    8532--REDEF    8564--REDEF    8619--REDEF    8707--REDEF
      8826--REDEF    8881--REDEF    8937--REDEF    9028--REDEF    9083--REDEF    9138--REDEF    9193--REDEF
      9249--REDEF    9334--REDEF    9389--REDEF    9451--REDEF   12407--ENTRY
KV$SSN
      4531**DCL     14029--ASSIGN
KV$SSN.BRKCNT
      4541**DCL     12246>>IF      12247<<ASSIGN  12247>>ASSIGN  13103>>ASSIGN
KV$SSN.CLKSET
      4550**DCL     14024>>IF      14027<<ASSIGN
KV$SSN.INPCHRCNT
      4534**DCL     13076>>ASSIGN
KV$SSN.INPDLTMRKNMB
      4536**DCL     12302<<ASSIGN
KV$SSN.LSTOTPRCRID
      4538**DCL     13167>>ASSIGN
KV$SSN.MRKNMB
      4535**DCL     12293<<ASSIGN  12293>>ASSIGN  12298>>ASSIGN  12302>>ASSIGN  12306>>ASSIGN
KV$SSN.MRKRQSENB
      4545**DCL     12194>>IF      12249<<ASSIGN  12262>>IF      12288>>IF      12291>>IF      12294<<ASSIGN
KV$SSN.NO_WATREDTRG
      4549**DCL     12223>>IF      13999>>IF
KV$SSN.OTPBLK
      4545**DCL     12224>>IF      12225>>IF      14011>>IF      14013<<ASSIGN
KV$SSN.OTPCHRCNT
      4537**DCL     13077>>ASSIGN
KV$SSN.OTPDLTMRKNMB
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:200  
      4536**DCL     12306<<ASSIGN
KV$SSN.OUTPUTDISCARD
      4546**DCL     13995>>IF
KV$SSN.RCVFLWCTRCRDINC
      4539**DCL     12225>>IF      14023<<ASSIGN  14036>>ASSIGN  14039<<ASSIGN
KV$SSN.RCVFLWCTRTMPMAXCRD
      4539**DCL     14014>>IF      14016>>ASSIGN  14017<<ASSIGN
KV$SSN.REDMLT
      4582**DCL     13010>>IF
KV$SSN.REDRQSPND
      4549**DCL     14024>>IF
KV$SSN.REDRSPCNT
      4537**DCL      4538--REDEF   13050<<ASSIGN  13050>>ASSIGN  13078>>ASSIGN
KV$SSN.SNDMAXNMBBYT
      4535**DCL     13013>>IF      13047<<ASSIGN  13047>>ASSIGN
KV$SSN.SND_CLSSSN_RSP
      4544**DCL     12790>>IF
KV$SSN.SND_OPNSSN_RSP
      4545**DCL     13126>>IF
KV$SSN.SSNCNCID
      4540**DCL     12752>>IF      12758>>ASSIGN  12820<<ASSIGN  13010>>IF
KV$SSN.SSNCNCINT
      4548**DCL     12753>>IF      12847>>IF      12851>>IF
KV$SSN.STTRQSENB
      4548**DCL     12268>>IF      14088<<ASSIGN
KV$SSN.TRCBFR$
      4534**DCL     12352>>ASSIGN
KV$SSN.VDI$
      4531**DCL     12224>>IF      12224>>IF      12225>>IF      12225>>IF      13995>>IF      14005>>IF
     14021>>ASSIGN
KV$SSN.WATINPDLTMRK
      4546**DCL     12248>>IF      12288>>IF      12303<<ASSIGN
KV$SSN.WATOTPDLTMRK
      4546**DCL     12288>>IF      12307<<ASSIGN
KV$SSN.WRTRQSCNT
      4540**DCL     13079>>ASSIGN
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:201  
KV$STR.ERR.COD
      5181**DCL     12866>>ASSIGN  12867<<ASSIGN
KV$STR.SNDMAXNMBRCR
      5185**DCL     13049<<ASSIGN  13049>>ASSIGN
KV$STT.REQSTATS.DSPMSK
      4861**DCL      4867--REDEF
KV$STT.REQSTATS.SLCMSK
      4902**DCL      4909--REDEF
KV$STT.SND.DATVDOBYTCNT
      4966**DCL     13034<<ASSIGN  13034>>ASSIGN
KV$STT.SND.DATVDOCNT
      4966**DCL     13033<<ASSIGN  13033>>ASSIGN
KV$STT.SND.DATVDODATBYTCNT
      4967**DCL     13035<<ASSIGN  13035>>ASSIGN
KV$STT.SND.SSNINTDATUNTBYTCNT
      4968**DCL     12351<<ASSIGN  12351>>ASSIGN
KV$STT.SND.SSNINTDATUNTCNT
      4967**DCL     12349<<ASSIGN  12349>>ASSIGN
KV$STT.SND.VDOBYTCNT
      4965**DCL     12338<<ASSIGN  12338>>ASSIGN
KV$STT.SND.VDOCNT
      4965**DCL     12341<<ASSIGN  12341>>ASSIGN
KV$STT.SNDVDOFNCCNT
      4975**DCL     12339<<ASSIGN  12339>>ASSIGN
KV$USRPRM.STT$
      5031**DCL     12161>>ASSIGN
KV$VDH_OTPMRK.DAT.ID
      5252**DCL      5252--REDEF    5253--REDEF   13175>>ASSIGN  13184>>ASSIGN
KV$VDH_OTPMRK.DAT.TYP
      5251**DCL     13159>>DOCASE
KV$VDI.HALFDUPLEXPAPERTAPE
      5091**DCL     13995>>IF
KV$VDI.RCVFLWCTRMAXCRD
      5086**DCL     14021>>ASSIGN
KV$VDI.RCVFLWCTRMINCRDINC
      5092**DCL     12225>>IF
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:202  
KV$VDI.RQSOTP
      5091**DCL     12224>>IF      12225>>IF      14005>>IF
KV$VDI.SSNCNT
      5084**DCL     12224>>IF
KV$VDI.USRPRM$
      5056**DCL     12161>>ASSIGN
KV$VDO.FNC
      5382**DCL     12339>>ASSIGN  12339>>ASSIGN  12364>>ASSIGN
KV$VDO.VLP
      5382**DCL     12337<<ASSIGN
KV$VDOVLP_ACTPOS
      6837**DCL     13053<<ASSIGN  13055--ASSIGN
KV$VDOVLP_ACTPOS.ACTPOS
      6851**DCL     13054<<ASSIGN
KV$VDOVLP_CG_MSGID
      6889**DCL     11840--DCLINIT
KV$VDOVLP_CG_MSGTYP
      6942**DCL     11841--DCLINIT
KV$VDOVLP_CG_STA
      6995**DCL     11842--DCLINIT
KV$VDOVLP_DAT1
      7047**DCL     12996--ASSIGN  13066--ASSIGN  13071<<ASSIGN  13076--ASSIGN  13077--ASSIGN  13078--ASSIGN
     13079--ASSIGN  13080--ASSIGN  13208--ASSIGN  13225<<ASSIGN  13229--ASSIGN
KV$VDOVLP_DAT1.BYTSIZ
      7053**DCL     13073<<ASSIGN  13228<<ASSIGN
KV$VDOVLP_DAT1.LST
      7051**DCL     13075<<ASSIGN  13227<<ASSIGN
KV$VDOVLP_DAT1.TYP
      7051**DCL     13072<<ASSIGN
KV$VDOVLP_DAT2
      7098**DCL     12998--ASSIGN  13210--ASSIGN  13231<<ASSIGN  13235--ASSIGN  13996--ASSIGN
KV$VDOVLP_DAT2.BYTSIZ
      7106**DCL     13234<<ASSIGN
KV$VDOVLP_DAT2.LST
      7102**DCL     13233<<ASSIGN
KV$VDOVLP_ERR
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:203  
      7200**DCL     11843--DCLINIT
KV$VDOVLP_FLDID
      7298**DCL     11844--DCLINIT
KV$VDOVLP_KEY
      7350**DCL     11845--DCLINIT
KV$VDOVLP_MRK
      7401**DCL     11846--DCLINIT 12196--ASSIGN  12197--ASSIGN  12299--ASSIGN  13190--ASSIGN
KV$VDO_CLSSSN
      5463**DCL     12787--ASSIGN  12791<<ASSIGN  12793<<ASSIGN  12794--ASSIGN
KV$VDO_DAT
      5550**DCL     13039<<ASSIGN  13045--ASSIGN  13996--ASSIGN
KV$VDO_DAT.DATCTRCHR
      5559**DCL     13043<<ASSIGN
KV$VDO_DAT.DATCTRCHRTYP
      5558**DCL     13042<<ASSIGN
KV$VDO_DAT.DATMOD
      5559**DCL     13044<<ASSIGN
KV$VDO_DAT.VLP
      5554**DCL     13041<<ASSIGN
KV$VDO_DSC
      5813**DCL     13066--ASSIGN  13069<<ASSIGN  13070--ASSIGN
KV$VDO_EVT
      5900**DCL     13101<<ASSIGN
KV$VDO_EVT.BRKCNT
      5907**DCL     13103<<ASSIGN
KV$VDO_EVT.TYP
      5907**DCL     13102<<ASSIGN
KV$VDO_MRK
      5986**DCL     13151<<ASSIGN
KV$VDO_OPNSSN
      6070**DCL     13123--ASSIGN  13127<<ASSIGN  13129<<ASSIGN  13130--ASSIGN
KV$VDO_PRM
      6157**DCL     13218<<ASSIGN
KV$VDO_RQSDAT
      6283**DCL     13993<<ASSIGN  14042--ASSIGN
KV$VDO_RQSDAT.INCMAXNMBBYT
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:204  
      6292**DCL     14037<<ASSIGN
KV$VDO_RQSDAT.INCMAXNMBRCR
      6292**DCL     14038<<ASSIGN
KV$VDO_RQSDAT.MAXNMBBYT
      6291**DCL     14016<<ASSIGN  14021<<ASSIGN  14036<<ASSIGN  14041>>ASSIGN
KV$VDO_RQSDAT.MAXNMBRCR
      6290**DCL     14041<<ASSIGN
KV$VDO_RQSDAT.MAXRCRBYTSIZ
      6290**DCL     13996<<ASSIGN
KV$VDO_RQSMRK
      6332**DCL     14064<<ASSIGN  14065--ASSIGN
KV$VDO_RQSSTT
      6418**DCL     14086<<ASSIGN  14087--ASSIGN
KV@SND_SAVE_QHDR$ IN PROCEDURE KVM$FNDSPACE
     12537**DCL     12570<<ASSIGN  12628>>ASSIGN
KV@VDH_GETBFR
     11893**DCL     12710<<ASSIGN  12714<>CALL    14028--ASSIGN  14029--ASSIGN  14030--ASSIGN  14031--CALL
KV@VDH_GETBFR.BFR$
     11899**DCL     12720>>ASSIGN  12721>>ASSIGN  12722>>ASSIGN
KV@VDH_GETBFR.BYTSIZ
     11899**DCL     12712<<ASSIGN  12727>>ASSIGN
KV@VDH_GETBFR.SCRNO_MMR
     11903**DCL     12713<<ASSIGN
KV@VDH_GETBFR.STRTYP
     11899**DCL     12711<<ASSIGN
KV@VDH_RLSBFR
     11958**DCL     12611<<ASSIGN  12621<>CALL    14169<<ASSIGN  14173<>CALL
KV@VDH_RLSBFR.BFR$
     11964**DCL     12613<<ASSIGN  14170<<ASSIGN
KV@VDH_RLSBFR.BYTSIZ
     11964**DCL     12614<<ASSIGN  14171<<ASSIGN
KV@VDH_RLSBFR.STRTYP
     11964**DCL     12612<<ASSIGN  14172<<ASSIGN
KV@VDH_RLSBFR.STT$
     11964**DCL     12615<<ASSIGN
KVM$FNDSPACE
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:205  
     12499**PROC    12384--CALL    12420--CALL    12788--CALL    12813--CALL    12849--CALL    13020--CALL
     13067--CALL    13099--CALL    13124--CALL    13149--CALL    13214--CALL    13991--CALL    14062--CALL
     14084--CALL    14104--CALL
KVM$SND_CLSSSN
     12784**PROC    12236--CALL
KVM$SND_CMPDSCSSN
     12808**PROC    12241--CALL
KVM$SND_CNC
     12838**PROC    12220--CALL
KVM$SND_DAT
     12891**PROC    12233--CALL
KVM$SND_DSCSSN
     13063**PROC    12238--CALL
KVM$SND_EVT
     13095**PROC    12253--CALL
KVM$SND_MRK
     13145**PROC    12255--CALL
KVM$SND_OPNSSN
     13120**PROC    12257--CALL
KVM$SND_PRM
     13204**PROC    12259--CALL
KVM$SND_PUTDAT IN PROCEDURE KVM$SND_PRM
     13223**ENTRY   13057--CALL
KVM$SND_RQSDAT_GNR
     13261**PROC    12231--CALL
KVM$SND_RQSMRK
     14058**PROC    12263--CALL
KVM$SND_RQSSTT
     14080**PROC    12273--CALL
KVM$SND_SCHLCLSSN
     14101**PROC    12277--CALL
KVM_BADLDCT
     10497**DCL     12755<>CALL
KVM_SND_BADFNC
     10337**DCL     12280<<ASSIGN  12280>>ASSIGN
KVM_SND_PRV$
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:206  
     10344**DCL     10344--DCLINIT 12459>>ASSIGN  12733<<ASSIGN  12744>>ASSIGN  12744>>ASSIGN  13010>>IF
KVM_SND_SCQ_SLKWRD
     10343**DCL     12381>>ASSIGN  12555>>ASSIGN  12652>>ASSIGN  12669>>ASSIGN  12766<<ASSIGN
KVS$GETBFR
     10535**DCL-ENT 12714--CALL
KVS$RLSBFR
     10536**DCL-ENT 12621--CALL    14173--CALL
KV_CLK_CANCEL IN PROCEDURE KVM$SND_RQSDAT_GNR
     13692**DCL     14028>>ASSIGN
KV_CLK_CANCEL.UID IN PROCEDURE KVM$SND_RQSDAT_GNR
     13708**DCL     13709--REDEF   13710--REDEF
KV_FPT_WRTMLT IN PROCEDURE KVM$FNDSPACE
     12527**DCL     12562<>CALL
KV_FPT_WRTMLT.V IN PROCEDURE KVM$FNDSPACE
     12532**DCL     12529--DCLINIT
KV_SNDCQ_QHDR$
     10320**DCL     10324--IMP-PTR 12502--IMP-PTR 12560>>IF      12570>>ASSIGN  12571<<ASSIGN  12572>>DOUNTIL
     12573>>ASSIGN  12573>>ASSIGN  12606>>ASSIGN  12606>>ASSIGN  12613>>ASSIGN  12614>>ASSIGN  12615>>ASSIGN
     12619<<ASSIGN  12619>>ASSIGN  12620>>ASSIGN  12624<<ASSIGN  12627<<ASSIGN  12628<<ASSIGN  12635>>IF
     12635>>ASSIGN  12638>>IF      12638>>IF      12640>>ASSIGN  12640>>ASSIGN  12641>>ASSIGN  12645>>ASSIGN
     12645>>ASSIGN  12651>>ASSIGN  12651>>ASSIGN  12651>>ASSIGN  12676>>ASSIGN  12676>>ASSIGN  12676>>ASSIGN
     12679>>ASSIGN  12679>>ASSIGN  12681>>ASSIGN  12682>>ASSIGN  12682>>ASSIGN  12685>>IF      12685>>IF
     12685>>IF      12691>>ASSIGN  12692>>ASSIGN  12693>>ASSIGN  12693>>ASSIGN  12719>>IF      12720>>ASSIGN
     12720>>ASSIGN  12721>>ASSIGN  12722<<ASSIGN  12723>>ASSIGN  12724>>ASSIGN  12726>>ASSIGN  12727>>ASSIGN
     12727>>ASSIGN  12728>>ASSIGN  12729>>ASSIGN  12730>>ASSIGN  12730>>ASSIGN  12735>>IF      12736>>ASSIGN
     12737>>ASSIGN  12737>>ASSIGN  12767>>ASSIGN  12767>>ASSIGN  13010>>IF      13010>>IF      13996>>ASSIGN
KV_SND_CLSSSN.VDOVLP
      7472**DCL      7475--REDEF
KV_SND_CMPDSCSSN.VDOVLP
      7528**DCL      7531--REDEF
KV_SND_CNC.SCNENDPNTID.TERM
      7609**DCL      7618--REDEF
KV_SND_CNC.VDOVLP
      7583**DCL      7586--REDEF
KV_SND_DAT.VDOVLP
      7705**DCL      7708--REDEF
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:207  
KV_SND_DSCSSN.VDOVLP
      7790**DCL      7793--REDEF
KV_SND_EVT_BRK.VDOVLP
      7880**DCL      7883--REDEF
KV_SND_EVT_MNTATN.VDOVLP
      7972**DCL      7975--REDEF
KV_SND_MRK.VDOVLP
      8029**DCL      8032--REDEF
KV_SND_OPNSSN.VDOVLP
      8085**DCL      8088--REDEF
KV_SND_PRM.VDOVLP
      8140**DCL      8143--REDEF
KV_SND_RQSDAT_GNR.VDOVLP
      8225**DCL      8228--REDEF
KV_SND_RQSMRK_DLTRCVDAT.VDOVLP
      8339**DCL      8342--REDEF
KV_SND_RQSMRK_DLTRCVRQS.VDOVLP
      8282**DCL      8285--REDEF
KV_SND_RQSSTT.VDOVLP
      8394**DCL      8397--REDEF
KV_SND_SCHLCLSSN.VDOVLP
      8504**DCL      8507--REDEF
KV_SND_STT.VDOVLP
      8449**DCL      8452--REDEF
KV_VDH_GETBFR
     10374**DCL     12710>>ASSIGN
KV_VDH_RLSBFR
     10439**DCL     12611>>ASSIGN  14169>>ASSIGN
KV_VDOVLP_ACTPOS
     11705**DCL     13000--ASSIGN  13053>>ASSIGN
KV_VDOVLP_DAT1
     11756**DCL     13225>>ASSIGN
KV_VDOVLP_DAT2
     11806**DCL     13231>>ASSIGN
KV_VDOVLP_KEY
     11433**DCL     12205--ASSIGN  12323--ASSIGN
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:208  
KV_VDOVLP_KEY.BYTSIZ
     11439**DCL     11448--IMP-SIZ 12205>>ASSIGN  12323>>ASSIGN
KV_VDOVLP_MRK
     11484**DCL     12295<<ASSIGN  13166<<ASSIGN  13174<<ASSIGN  13183<<ASSIGN
KV_VDOVLP_MRK.ID
     11499**DCL     13167<<ASSIGN  13175<<ASSIGN  13184<<ASSIGN
KV_VDOVLP_MRK.ID.UBIN_DBLBYT
     11499**DCL     12298<<ASSIGN
KV_VDOVLP_MRK.LST
     11488**DCL     12297<<ASSIGN  12328<<ASSIGN  13188<<ASSIGN
KV_VDOVLP_MRK.RSP
     11498**DCL     12296<<ASSIGN
KV_VDOVLP_MRK_ENDACK
     11651**DCL     13183>>ASSIGN
KV_VDOVLP_MRK_LSTRCRID
     11597**DCL     13166>>ASSIGN
KV_VDOVLP_MRK_MRK
     11543**DCL     12295>>ASSIGN  13174>>ASSIGN
KV_VDO_CLSSSN_RQS
     10665**DCL     12793>>ASSIGN
KV_VDO_CLSSSN_RSP
     10708**DCL     12791>>ASSIGN
KV_VDO_DAT
     10619**DCL     13001--ASSIGN  13039>>ASSIGN
KV_VDO_DSC
     10751**DCL     13069>>ASSIGN
KV_VDO_EVT
     10793**DCL     13098--ASSIGN  13101>>ASSIGN  13104--ASSIGN
KV_VDO_MRK
     10835**DCL     13148--ASSIGN  13151>>ASSIGN  13152--ASSIGN
KV_VDO_OPNSSN_RQS
     10877**DCL     13129>>ASSIGN
KV_VDO_OPNSSN_RSP
     10920**DCL     13127>>ASSIGN
KV_VDO_PRM_RSP
     11045**DCL     13211--ASSIGN  13218>>ASSIGN  13219--ASSIGN
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:209  
KV_VDO_RQSDAT_GNR
     10571**DCL     13990--ASSIGN  13993>>ASSIGN
KV_VDO_RQSMRK
     11003**DCL     14061--ASSIGN  14064>>ASSIGN
KV_VDO_RQSSTT
     10962**DCL     14083--ASSIGN  14086>>ASSIGN
LGN_STRING
     11850**DCL     12876<<ASSIGN  12876>>ASSIGN
LOOP_CNT
     11835**DCL     12201<<DOINDEX 12202>>IF      12203>>IF      12206>>ASSIGN  12208>>ASSIGN  12317<<ASSIGN
     12320>>IF      12321>>IF      12321>>ASSIGN  12326>>ASSIGN  12327>>IF      12333<<ASSIGN  12333>>ASSIGN
     12459>>ASSIGN  12734<<ASSIGN  12736<<ASSIGN  12751>>ASSIGN
LST_VLP
     11837**DCL     12200<<ASSIGN  12208<<ASSIGN  12297>>IF      12318>>IF      12327>>IF      13025>>IF
     13025<<ASSIGN  13074>>IF      13187>>IF      13226>>IF      13232>>IF
M$WRTMLT
       218**DCL-ENT 12562--CALL
MSGWRDSIZ
     11828**DCL     12338>>ASSIGN  12381<<ASSIGN  12552<<ASSIGN  12552>>ASSIGN  12554>>ASSIGN  12555>>ASSIGN
     12744>>ASSIGN  12760>>ASSIGN  12787<<ASSIGN  12811<<ASSIGN  12845<<ASSIGN  12877>>ASSIGN  12994<<ASSIGN
     12996<<ASSIGN  12998<<ASSIGN  13000<<ASSIGN  13000>>ASSIGN  13001<<ASSIGN  13001>>ASSIGN  13013>>IF
     13034>>ASSIGN  13047>>ASSIGN  13066<<ASSIGN  13098<<ASSIGN  13123<<ASSIGN  13148<<ASSIGN  13208<<ASSIGN
     13210<<ASSIGN  13211<<ASSIGN  13211>>ASSIGN  13242>>ASSIGN  13990<<ASSIGN  14061<<ASSIGN  14083<<ASSIGN
     14103<<ASSIGN
NOP_MSG$ IN PROCEDURE KVM$FNDSPACE
     12538**DCL     12595<<ASSIGN  12596>>ASSIGN  12597>>ASSIGN  12598>>ASSIGN  12676<<ASSIGN  12677>>ASSIGN
     12678>>ASSIGN  12679>>ASSIGN
NOT_X25
     11831**DCL     12159<<ASSIGN  12379<<ASSIGN  12409<<ASSIGN  12550>>IF      12708>>IF      12739>>IF
NRMRET
     12473**LABEL   12368--GOTO
PUT$
     11823**DCL      5055--IMP-PTR 12295>>ASSIGN  12296>>ASSIGN  12297>>ASSIGN  12298>>ASSIGN  12299<<ASSIGN
     12299>>ASSIGN  12326>>ASSIGN  12328>>ASSIGN  12331<<ASSIGN  12331>>ASSIGN  12425>>ASSIGN  12427<<ASSIGN
     12427>>ASSIGN  12431>>ASSIGN  12433<<ASSIGN  12433>>ASSIGN  12437>>ASSIGN  12439<<ASSIGN  12439>>ASSIGN
     12443>>ASSIGN  12445<<ASSIGN  12445>>ASSIGN  12449>>ASSIGN  12451<<ASSIGN  12451>>ASSIGN  12455>>ASSIGN
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:210  
     12457<<ASSIGN  12457>>ASSIGN  12605<<ASSIGN  12607>>ASSIGN  12651<<ASSIGN  12652<<ASSIGN  12652>>ASSIGN
     12682<<ASSIGN  12693<<ASSIGN  12730<<ASSIGN  12733>>ASSIGN  12749>>ASSIGN  12751>>ASSIGN  12761<<ASSIGN
     12761>>ASSIGN  12764>>ASSIGN  12791>>ASSIGN  12793>>ASSIGN  12794<<ASSIGN  12794>>ASSIGN  12818>>ASSIGN
     12819<<ASSIGN  12819>>ASSIGN  12854>>ASSIGN  12855>>ASSIGN  12856>>ASSIGN  12857>>ASSIGN  12858>>ASSIGN
     12859>>ASSIGN  12860<<ASSIGN  12860>>ASSIGN  12864>>ASSIGN  12866>>ASSIGN  12870<<ASSIGN  12870>>ASSIGN
     12876>>ASSIGN  12877<<ASSIGN  12877>>ASSIGN  13039>>ASSIGN  13041>>ASSIGN  13042>>ASSIGN  13043>>ASSIGN
     13044>>ASSIGN  13045<<ASSIGN  13045>>ASSIGN  13053>>ASSIGN  13054>>ASSIGN  13055<<ASSIGN  13055>>ASSIGN
     13069>>ASSIGN  13070<<ASSIGN  13070>>ASSIGN  13071>>ASSIGN  13072>>ASSIGN  13073>>ASSIGN  13075>>ASSIGN
     13076>>ASSIGN  13076>>ASSIGN  13077>>ASSIGN  13077>>ASSIGN  13078>>ASSIGN  13078>>ASSIGN  13079>>ASSIGN
     13079>>ASSIGN  13080<<ASSIGN  13080>>ASSIGN  13080>>ASSIGN  13101>>ASSIGN  13102>>ASSIGN  13103>>ASSIGN
     13104<<ASSIGN  13104>>ASSIGN  13127>>ASSIGN  13129>>ASSIGN  13130<<ASSIGN  13130>>ASSIGN  13151>>ASSIGN
     13152<<ASSIGN  13152>>ASSIGN  13166>>ASSIGN  13167>>ASSIGN  13174>>ASSIGN  13175>>ASSIGN  13183>>ASSIGN
     13184>>ASSIGN  13188>>ASSIGN  13190<<ASSIGN  13190>>ASSIGN  13218>>ASSIGN  13219<<ASSIGN  13219>>ASSIGN
     13225>>ASSIGN  13227>>ASSIGN  13228>>ASSIGN  13229<<ASSIGN  13229>>ASSIGN  13231>>ASSIGN  13233>>ASSIGN
     13234>>ASSIGN  13235<<ASSIGN  13235>>ASSIGN  13240>>ASSIGN  13242<<ASSIGN  13993>>ASSIGN  13996>>ASSIGN
     14016>>ASSIGN  14021>>ASSIGN  14036>>ASSIGN  14037>>ASSIGN  14038>>ASSIGN  14041>>ASSIGN  14041>>ASSIGN
     14042<<ASSIGN  14042>>ASSIGN  14064>>ASSIGN  14065<<ASSIGN  14065>>ASSIGN  14086>>ASSIGN  14087<<ASSIGN
     14087>>ASSIGN
PUT@VLP
     12319**LABEL   12329--EXIT
SLACK_BYT
     11838**DCL     12190<<ASSIGN  12197<<ASSIGN  12205<<ASSIGN  12206<<ASSIGN  12207>>ASSIGN  12211<<ASSIGN
     12211>>ASSIGN  12744>>ASSIGN  12760>>ASSIGN  13003<<ASSIGN  13212<<ASSIGN
SPACE1 IN PROCEDURE KVM$FNDSPACE
     12539**DCL     12580<<ASSIGN  12585<<ASSIGN  12589>>IF      12640<<ASSIGN  12645<<ASSIGN  12649>>IF
SPACE2 IN PROCEDURE KVM$FNDSPACE
     12540**DCL     12581<<ASSIGN  12586<<ASSIGN  12592>>IF      12641<<ASSIGN  12646<<ASSIGN  12673>>IF
SZ
     11827**DCL     12178<<ASSIGN  12288>>IF      12313>>IF      12351>>ASSIGN  12413<<ASSIGN  12554<<ASSIGN
     12554>>ASSIGN  12555<<ASSIGN  12633>>IF      12648>>ASSIGN  12665>>IF      12666<<ASSIGN  12669<<ASSIGN
     12669>>ASSIGN  12670>>ASSIGN  12700<<ASSIGN  12766>>ASSIGN  12767>>ASSIGN  12812<<ASSIGN  12846<<ASSIGN
     12848<<ASSIGN  12992>>DOUNTIL 13028>>ASSIGN  13029<<ASSIGN
TAKE$ IN PROCEDURE KVM$FNDSPACE
     12545**DCL     12606<<ASSIGN  12607>>ASSIGN
TXTBYTSIZ
     11854**DCL     11850--IMP-SIZ 11855--IMP-SIZ 11856--IMP-SIZ 12321<<ASSIGN  12323<<ASSIGN  12324<<ASSIGN
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:211  
     12324>>ASSIGN  12324>>ASSIGN  12326>>ASSIGN  12326>>ASSIGN  12331>>ASSIGN  12423<<ASSIGN  12424>>IF
     12425>>ASSIGN  12425>>ASSIGN  12425>>ASSIGN  12427>>ASSIGN  12429<<ASSIGN  12430>>IF      12431>>ASSIGN
     12431>>ASSIGN  12431>>ASSIGN  12433>>ASSIGN  12435<<ASSIGN  12436>>IF      12437>>ASSIGN  12437>>ASSIGN
     12437>>ASSIGN  12439>>ASSIGN  12441<<ASSIGN  12442>>IF      12443>>ASSIGN  12443>>ASSIGN  12443>>ASSIGN
     12445>>ASSIGN  12447<<ASSIGN  12448>>IF      12449>>ASSIGN  12449>>ASSIGN  12449>>ASSIGN  12451>>ASSIGN
     12453<<ASSIGN  12454>>IF      12455>>ASSIGN  12455>>ASSIGN  12455>>ASSIGN  12457>>ASSIGN  12842<<ASSIGN
     12844<<ASSIGN  12845>>ASSIGN  12875>>IF      12876>>ASSIGN  12876>>ASSIGN  12991<<ASSIGN  12993>>IF
     12995>>IF      12999>>IF      13001>>ASSIGN  13003>>ASSIGN  13023<<ASSIGN  13023>>ASSIGN  13028<<ASSIGN
     13028>>ASSIGN  13035>>ASSIGN  13040>>IF      13052>>IF      13057>>IF      13206<<ASSIGN  13207>>IF
     13211>>ASSIGN  13212>>ASSIGN  13224>>IF      13228>>ASSIGN  13234>>ASSIGN  13240>>ASSIGN  13240>>ASSIGN
     13240>>ASSIGN
VDOVLP_BYTLNG_ARY
     11839**DCL     12206>>ASSIGN  12321>>ASSIGN
VLP_WRDSIZ
     11836**DCL     12189<<ASSIGN  12196<<ASSIGN  12207<<ASSIGN  12207>>ASSIGN  12337>>IF      12382<<ASSIGN
     12552>>ASSIGN  13003>>IF      13013>>IF      13024<<ASSIGN  13024>>ASSIGN  13212>>IF      13242>>ASSIGN
Y$RLSBFR
     14135**PROC    12234--CALL    12260--CALL
Y$TRC
     14205**PROC    12360--CALL    12365--CALL
Y$TRCBFR.MAXTRCENTX
     12094**DCL     14220>>IF
Y$TRCBFR.TRCENT
     12119**DCL     14206>>IF      14223<<ASSIGN
Y$TRCBFR.TRCENT.MLT
     12123**DCL     14213<<ASSIGN
Y$TRCBFR.TRCENTX
     12094**DCL     14206>>IF      14213>>ASSIGN  14219<<ASSIGN  14219>>ASSIGN  14220>>IF      14221<<ASSIGN
     14223>>ASSIGN
Y@BFRDSC__ IN PROCEDURE Y$RLSBFR
     14156**DCL     14135--PROC
Y@BFRDSC__.ADR$ IN PROCEDURE Y$RLSBFR
     14160**DCL     14170>>ASSIGN
Y@BFRDSC__.BFRBYTSIZ IN PROCEDURE Y$RLSBFR
     14161**DCL     14171>>ASSIGN
Y@BFRDSC__.BFRRLSDSP IN PROCEDURE Y$RLSBFR
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:212  
     14162**DCL     14167>>IF
Y@BFRDSC__.STRTYP IN PROCEDURE Y$RLSBFR
     14161**DCL     14172>>ASSIGN
Y@KNH$
     11825**DCL     12357>>IF      12359>>ASSIGN  12743<<ASSIGN  12749<<ASSIGN  12750>>ASSIGN  12758>>ASSIGN
     12759>>ASSIGN  12760>>ASSIGN  12815>>ASSIGN  12816>>ASSIGN  12852>>ASSIGN  12853>>ASSIGN  12862>>ASSIGN
     12863>>ASSIGN  12868>>ASSIGN  14106>>ASSIGN
Y@SSN$
     11824**DCL      4531--IMP-PTR 12160<<ASSIGN  12194>>IF      12223>>IF      12224>>IF      12224>>IF
     12224>>IF      12225>>IF      12225>>IF      12225>>IF      12225>>IF      12246>>IF      12247>>ASSIGN
     12247>>ASSIGN  12248>>IF      12249>>ASSIGN  12262>>IF      12268>>IF      12288>>IF      12288>>IF
     12288>>IF      12291>>IF      12293>>ASSIGN  12293>>ASSIGN  12294>>ASSIGN  12298>>ASSIGN  12302>>ASSIGN
     12302>>ASSIGN  12303>>ASSIGN  12306>>ASSIGN  12306>>ASSIGN  12307>>ASSIGN  12352>>ASSIGN  12410<<ASSIGN
     12752>>IF      12753>>IF      12758>>ASSIGN  12790>>IF      12820>>ASSIGN  12847>>IF      12851>>IF
     13010>>IF      13010>>IF      13013>>IF      13047>>ASSIGN  13047>>ASSIGN  13050>>ASSIGN  13050>>ASSIGN
     13076>>ASSIGN  13077>>ASSIGN  13078>>ASSIGN  13079>>ASSIGN  13103>>ASSIGN  13126>>IF      13167>>ASSIGN
     13995>>IF      13995>>IF      13999>>IF      14005>>IF      14011>>IF      14013>>ASSIGN  14014>>IF
     14016>>ASSIGN  14017>>ASSIGN  14021>>ASSIGN  14023>>ASSIGN  14024>>IF      14024>>IF      14027>>ASSIGN
     14029>>ASSIGN  14036>>ASSIGN  14039>>ASSIGN  14088>>ASSIGN
Y@STT$
     11826**DCL      4615--IMP-PTR 12161<<ASSIGN  12338>>ASSIGN  12338>>ASSIGN  12339>>ASSIGN  12339>>ASSIGN
     12341>>ASSIGN  12341>>ASSIGN  12349>>ASSIGN  12349>>ASSIGN  12351>>ASSIGN  12351>>ASSIGN  12411<<ASSIGN
     12728>>ASSIGN  13033>>ASSIGN  13033>>ASSIGN  13034>>ASSIGN  13034>>ASSIGN  13035>>ASSIGN  13035>>ASSIGN
Y@TRCBFR$
     12004**DCL     12088--IMP-PTR 12352<<ASSIGN  12353>>IF      14206>>IF      14206>>IF      14213>>ASSIGN
     14213>>ASSIGN  14219>>ASSIGN  14219>>ASSIGN  14220>>IF      14220>>IF      14221>>ASSIGN  14223>>ASSIGN
     14223>>ASSIGN
Y@TRCENT
     11991**DCL     12358<<ASSIGN  12363<<ASSIGN  14206>>IF      14223>>ASSIGN
Y@TRCENT.FNC
     11999**DCL     12359<<ASSIGN  12364<<ASSIGN
Y@VDO$
     11865**DCL     12162<<ASSIGN  12336>>IF      12337>>ASSIGN  12339>>ASSIGN  12339>>ASSIGN  12362>>IF
     12364>>ASSIGN  12764<<ASSIGN  13242>>ASSIGN
Y_TRCENT_SNDSSN
     12027**DCL     12358>>ASSIGN
PL6.E3A0      #001=KVM$SND File=KVM$SND.:E05TSI                                  WED 07/30/97 02:05 Page:213  
Y_TRCENT_SNDVDO
     12056**DCL     12363>>ASSIGN
Y_VDO_YES
     11864**DCL     12763>>IF
