VERSION E05

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:1    
        1        1        /*M* Least_recently_used - An lru package with all handling routines. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P*
        8        8             NAME: Least recently used
        9        9             PURPOSE:
       10       10                  This is a package to maintain a least recently used list of words.
       11       11                  The user has the full responsibility of maintaining the correct
       12       12                  contents of those words of storage.  The maintenance of the lru list
       13       13                  is taken care of by means of these routines, and their proper use.
       14       14             DESCRIPTION:
       15       15                  The most important item to be remembered is that the lru list will be
       16       16                  maintained internally based on the following assumptions.
       17       17
       18       18                  1) When the user declares a new item to be inserted into the list,
       19       19                  that item will become the least recently used.
       20       20
       21       21                  2) When the user requests the lru item, the list will automatically
       22       22                  be updated to reflect the usage of this lru item.  In other words, it
       23       23                  will go to the most recently used spot.
       24       24             REFERENCE:
       25       25                  The user must be aware of and act in accordance with the following
       26       26                  assertions:
       27       27
       28       28                  1) The user will be given 1 (one) word of storage for each of the
       29       29                  items in the lru list.  The user will have access to this word by
       30       30                  means of a pointer which will be passed back from the appropriate
       31       31                  routines.  The user will have to store this pointer since it will be
       32       32                  the only way of communicating to the lru routines a reference to a
       33       33                  specific lru list item.  More on this in the routine descriptions.
       34       34
       35       35                  2) The user must create a minimum workspace size of ((number of items
       36       36                  to be maintained * 2)+ 3)words.  This size can be any size greater
       37       37                  than 5 words; multiples of 2 are not necessary, but 2 words are
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:2    
       38       38                  necessary to maintain each lru item.  This workspace must be created
       39       39                  on a word aligned boundary.  This workspace must be framed by a
       40       40                  vector.  This vector will always be passed as an input parameter to
       41       41                  all routines.  This vector will always be the FIRST parameter in the
       42       42                  parameter list.
       43       43
       44       44                  3) The user should not try to store more than 1 (one) word in the
       45       45                  area returned for his use.  This can cause untold sorrow for the
       46       46                  user at a later point in time!
       47       47
       48       48                  4) The user must remember to include the file:
       49       49                      XUM_ENTRIES_C
       50       50                  This will perform the appropriate DCLs for all the LRU routines.
       51       51
       52       52        */
       53       53        %LIST;
       54       54        %EQU MINIMUM_WS_BYTE_SIZE = 16;
       55       55        %EQU NUM_BYTES_IN_NODE = 8;
       56       56        %EQU NODE_SIZE_IN_WORDS = 2;
       57       57
       58       58        /*I*
       59       59             NAME: GET_NEXT_FREE_NODE
       60       60             PURPOSE:
       61       61                  To return a pointer to the next block of three words which are used
       62       62                  to define a users item.
       63       63             CALL:
       64       64                  %GET_NEXT_FREE_NODE;
       65       65             DESCRIPTION:
       66       66                  This routine maintains the free chain and returns a pointer to an
       67       67                  unused block of three words.
       68       68             ALTRETURN - Occurs when there are no more free words in the workspace.
       69       69        */
       70       70        %MACRO GET_NEXT_FREE_NODE;
       71       71
       72       72        IF WORKSPACE.FREE_NODE_OFFSET ~= 0 THEN
       73       73        DO;
       74       74          P_NODE_PTR$ = PINCRW(WS_PTR$, WORKSPACE.FREE_NODE_OFFSET);
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:3    
       75       75          WORKSPACE.FREE_NODE_OFFSET = P_NODE_PTR$->NODE.FORWARD_OFFSET;
       76       76          PINCRW(WS_PTR$, WORKSPACE.FREE_NODE_OFFSET)->NODE.BACKWARD_OFFSET = 0;
       77       77        END;
       78       78        ELSE
       79       79        DO;
       80       80          ALTRETURN; /*END OF FREE CHAIN HAS BEEN REACHED*/
       81       81        END;
       82       82
       83       83        %MEND;
       84       84
       85       85        /*I*
       86       86             NAME: RETURN_NODE_TO_FREE_CHAIN
       87       87             PURPOSE:
       88       88                  When a node is deleted from the lru list, it must be returned to the
       89       89                  free chain.
       90       90             CALL:
       91       91                  %RETURN_NODE_TO_FREE_CHAIN;
       92       92             DESCRIPTION:
       93       93                  This routine will take the two words which are referenced by the
       94       94                  NODE_PTR and connect these two words to the list of free words.
       95       95        */
       96       96        %MACRO RETURN_NODE_TO_FREE_CHAIN;
       97       97
       98       98        P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.FREE_NODE_OFFSET;
       99       99        WORKSPACE.FREE_NODE_OFFSET =POFFW(P_NODE_PTR$, WS_PTR$);
      100      100        P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;
      101      101        P_NODE_PTR$ = ADDR(NIL);
      102      102
      103      103        %MEND;
      104      104
      105      105        /*I*
      106      106             NAME: MAKE_NODE_HEAD_NODE
      107      107             PURPOSE:
      108      108                  To place a node at the head position of the lru list.
      109      109             CALL:
      110      110                  %MAKE_NODE_HEAD_NODE;
      111      111             DESCRIPTION:
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:4    
      112      112                  Takes the node pointed to by NODE_PTR and inserts it into the lru
      113      113                  list in the head position.
      114      114        */
      115      115        %MACRO MAKE_NODE_HEAD_NODE;
      116      116
      117      117        P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.HEAD_OFFSET;
      118      118        P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;
      119      119        PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.BACKWARD_OFFSET =
      120      120               POFFW(P_NODE_PTR$, WS_PTR$);
      121      121        WORKSPACE.HEAD_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);
      122      122
      123      123        %MEND;
      124      124
      125      125        /*I*
      126      126             NAME: MAKE_NODE_TAIL_NODE
      127      127             PURPOSE:
      128      128                  To place a node at the tail of the lru list.
      129      129             CALL:
      130      130                  %MAKE_NODE_TAIL_NODE;
      131      131             DESCRIPTION:
      132      132                  Place the referenced node into the tail position of the lru list.
      133      133        */
      134      134        %MACRO MAKE_NODE_TAIL_NODE;
      135      135
      136      136        PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.FORWARD_OFFSET =
      137      137              POFFW(P_NODE_PTR$, WS_PTR$);
      138      138        P_NODE_PTR$->NODE.BACKWARD_OFFSET = WORKSPACE.TAIL_OFFSET;
      139      139        P_NODE_PTR$->NODE.FORWARD_OFFSET = 0;
      140      140        WORKSPACE.TAIL_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);
      141      141
      142      142        %MEND;
      143      143
      144      144        /*I*
      145      145             NAME: REMOVE_HEAD_NODE
      146      146             PURPOSE:
      147      147                  To remove a node that is located in the head position of the lru list.
      148      148             CALL:
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:5    
      149      149                  %REMOVE_HEAD_NODE;
      150      150             DESCRIPTION:
      151      151                  Remove any node from the lru list and return a pointer to it so it
      152      152                  wont get lost.
      153      153        */
      154      154        %MACRO REMOVE_HEAD_NODE;
      155      155
      156      156        WORKSPACE.HEAD_OFFSET = PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.FORWARD_OFFSET;
      157      157        PINCRW(WS_PTR$,WORKSPACE.HEAD_OFFSET)-> NODE.BACKWARD_OFFSET = 0;
      158      158
      159      159        %MEND;
      160      160
      161      161        /*I*
      162      162             NAME: REMOVE_TAIL_NODE
      163      163             PURPOSE:
      164      164                  To remove the tail node of the lru list.
      165      165             CALL:
      166      166                  %REMOVE_TAIL_NODE;
      167      167             DESCRIPTION:
      168      168                  Remove the node at the tail position of the lru list, and return a
      169      169                  pointer to it so it wont get lost or go away.
      170      170        */
      171      171        %MACRO REMOVE_TAIL_NODE;
      172      172
      173      173        WORKSPACE.TAIL_OFFSET = PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.BACKWARD_OFFSET
               173        ;
      174      174        PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.FORWARD_OFFSET = 0;
      175      175
      176      176        %MEND;
      177      177
      178      178        /*I*
      179      179             NAME: REMOVE_INTERIOR_NODE
      180      180             PURPOSE:
      181      181                  To remove any node, which isn't in the head or tail position, from
      182      182                  the lru list.
      183      183             CALL:
      184      184                  %REMOVE_INTERIOR_NODE;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:6    
      185      185             DESCRIPTION:
      186      186                  This routine will set up the links of the lru list to exclude the
      187      187                  node referenced by the NODE_PTR.
      188      188        */
      189      189        %MACRO REMOVE_INTERIOR_NODE;
      190      190
      191      191        PINCRW(WS_PTR$, P_NODE_PTR$->NODE.BACKWARD_OFFSET)->NODE.FORWARD_OFFSET = P_NODE_PTR
               191        $->NODE.FORWARD_OFFSET;
      192      192        PINCRW(WS_PTR$, P_NODE_PTR$->NODE.FORWARD_OFFSET)->NODE.BACKWARD_OFFSET = P_NODE_PTR
               192        $->NODE.BACKWARD_OFFSET;
      193      193
      194      194        %MEND;
      195      195
      196      196
      197      197        /*I*
      198      198             NAME: CHECK_IF_NODE_IS_IN_LRU_LIST
      199      199             PURPOSE:
      200      200                  To determine if a pointer passed into these routines does not
      201      201                  point to a node in the lru list.
      202      202             CALL:
      203      203                  %CHECK_IF_NODE_IS_IN_LRU_LIST;
      204      204             DESCRIPTION:
      205      205                  Check if the pointer passed in is:
      206      206                  1) equal to addr(nil), its missing!
      207      207                  2) pointing to an area prior to where the workspace frames.
      208      208                  3) pointing to an area after where the workspace frames.
      209      209                  4) points to a location that is a node boundry.
      210      210                  5) points to a node in the lru list, not the free chain.
      211      211             ALTRETURN - Occurs when the user passes an invalid pointer.
      212      212        */
      213      213
      214      214        %MACRO CHECK_IF_NODE_IS_IN_LRU_LIST;
      215      215
      216      216        IF (P_NODE_PTR$ = ADDR(NIL)
      217      217           OR
      218      218           P_NODE_PTR$ < PINCRW(VBASE(P_WORKSPACE_), %NODE_SIZE_IN_WORDS)
      219      219           OR
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:7    
      220      220           P_NODE_PTR$ >= PINCRC( VBASE (P_WORKSPACE_), VBOUND (P_WORKSPACE_) )
      221      221           OR
      222      222           MOD (POFFC (P_NODE_PTR$, VBASE(P_WORKSPACE_)), %NUM_BYTES_IN_NODE) ~= 0
      223      223           OR
      224      224           (P_NODE_PTR$ ~= PINCRW(VBASE(P_WORKSPACE_), WORKSPACE.HEAD_OFFSET)
      225      225           AND
      226      226           P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0)) THEN
      227      227        DO;
      228      228           ALTRETURN; /*NODE IS NOT IN LRU LIST*/
      229      229        END;
      230      230
      231      231        %MEND;
      232      232
      233      233        /*I*
      234      234             NAME: CHECK_FOR_EMPTY_LRU_LIST
      235      235             PURPOSE:
      236      236                  To check if the lru list is empty.
      237      237             CALL:
      238      238                  %CHECK_FOR_EMPTY_LRU_LIST;
      239      239             DESCRIPTION:
      240      240                  If the lru list is empty then altreturn.
      241      241             ALTRETURN - Occurs when the user didn't pass a pointer to the workspace.
      242      242        */
      243      243        %MACRO CHECK_FOR_EMPTY_LRU_LIST;
      244      244
      245      245        IF WORKSPACE.HEAD_OFFSET = 0 THEN
      246      246        DO;
      247      247          ALTRETURN;
      248      248        END;
      249      249
      250      250        %MEND;
      251      251
      252      252        /*I*
      253      253             NAME: CHECK_FOR_TWO_PARAMETERS
      254      254             PURPOSE:
      255      255                  To check for the existence of two parameters.
      256      256             CALL:
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:8    
      257      257                  %CHECK_FOR_TWO_PARAMETERS;
      258      258             DESCRIPTION:
      259      259                  If there are LESS than two parameters then altreturn.
      260      260             ALTRETURN - Occurs when the user passes less than 2 parameters.
      261      261        */
      262      262        %MACRO CHECK_FOR_TWO_PARAMETERS;
      263      263
      264      264        IF ADDR(P_WORKSPACE_) = ADDR(NIL)
      265      265           OR
      266      266           ADDR(P_NODE_PTR$) = ADDR(NIL) THEN
      267      267        DO;
      268      268          ALTRETURN;
      269      269        END;
      270      270
      271      271        %MEND;
      272      272
      273      273        XUM$LRU_ROUTINES: PROC (P_WORKSPACE_, P_NODE_PTR$) ALTRET;
      274      274    1   DCL 1 NODE BASED ALIGNED,
      275      275    1         2 USER_INFO BIT (36),
      276      276    1         2 FORWARD_OFFSET SBIN HALF HALIGNED,
      277      277    1         2 BACKWARD_OFFSET SBIN HALF HALIGNED;
      278      278
      279      279    1   DCL 1 WORKSPACE BASED (WS_PTR$) ALIGNED,
      280      280    1         2 HEAD_OFFSET SBIN HALF HALIGNED,
      281      281    1         2 TAIL_OFFSET SBIN HALF HALIGNED,
      282      282    1         2 FREE_NODE_OFFSET SBIN HALF HALIGNED,
      283      283    1         2 * BIT (18) UNAL;
      284      284
      285      285    1   DCL P_NODE_PTR$ PTR;
      286      286    1   DCL P_WORKSPACE_ VECTOR;
      287      287    1   DCL WS_PTR$ PTR;
      288      288    1   DCL TEMP_PTR$ PTR;
      289      289    1   DCL I UBIN;
      290      290    1   DCL NUM_ITERATIONS UBIN;
      291      291
      292      292
      293      293        /*F*
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:9    
      294      294             NAME: XUM$INIT_WORKSPACE
      295      295             PURPOSE:
      296      296                  This is the routine which is called once and first for each lru list
      297      297                  to be created.
      298      298             DESCRIPTION:
      299      299                  INIT will place all the words in the workspace on a free list
      300      300                  and also make an lru list which contains null items.
      301      301                  The workspace parameter MUST be a VECTOR which frames an area to
      302      302                  contain the lru list and user word of data (an item).  The size of
      303      303                  this area must be (# of items * 2 + 3).
      304      304             REFERENCE:
      305      305                  The user must only REMEMBER to call this routine once and first,
      306      306                  and need not deal with it or anything about it afterwards.
      307      307        */
      308      308        /*D*
      309      309             NAME: XUM$INIT_WORKSPACE
      310      310             PURPOSE:
      311      311                  Take the area framed by the workspace vector and format into a chain
      312      312                  of free nodes each node being 2 words.
      313      313             CALL:
      314      314                  CALL XUM$INIT_WORKSPACE (   WORKSPACE) ALTRET;
      315      315             INPUT:
      316      316                  WORKSPACE- A vector framing an area of size (# items * 2 + 3).
      317      317             DATA:
      318      318                  The number of items must be the maximum value the list is going to be
      319      319                  requested to maintain.
      320      320             ALTRETURN - Will occur if the workspace size < 5 or not word aligned,
      321      321                         or if the user didn't pass a parameter (vector).
      322      322        */
      323      323    1   XUM$INIT_WORKSPACE: ENTRY (P_WORKSPACE_) ALTRET;
      324      324
      325      325    1   IF ADDR(P_WORKSPACE_) = ADDR(NIL) THEN
      326      326    2   DO;
      327      327    2     ALTRETURN;
      328      328    2   END;
      329      329
      330      330
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:10   
      331      331    1   IF VBOUND(P_WORKSPACE_) + 1  < %MINIMUM_WS_BYTE_SIZE
      332      332    1      OR
      333      333    1      VBASE(P_WORKSPACE_) ~= PALIGNW (VBASE(P_WORKSPACE_)) THEN
      334      334    2   DO;
      335      335    2     ALTRETURN;
      336      336    2   END;
      337      337
      338      338    1   WS_PTR$ = VBASE(P_WORKSPACE_);
      339      339    1   WORKSPACE.HEAD_OFFSET = 0;
      340      340    1   WORKSPACE.TAIL_OFFSET = 0;
      341      341    1   WORKSPACE.FREE_NODE_OFFSET =  %NODE_SIZE_IN_WORDS;
      342      342
      343      343    1   TEMP_PTR$ =PINCRW(WS_PTR$, %NODE_SIZE_IN_WORDS);
      344      344
      345      345    1   NUM_ITERATIONS = ((VBOUND(P_WORKSPACE_) - %(NUM_BYTES_IN_NODE - 1))
      346      346    1                    / %NUM_BYTES_IN_NODE) - 1;
      347      347    2   DO I = 1 TO NUM_ITERATIONS;
      348      348    2     TEMP_PTR$-> NODE.FORWARD_OFFSET = POFFW(TEMP_PTR$, WS_PTR$) + %NODE_SIZE_IN_WORDS;
      349      349    2     TEMP_PTR$-> NODE.BACKWARD_OFFSET = 0;
      350      350    2     TEMP_PTR$ = PINCRW(TEMP_PTR$, %NODE_SIZE_IN_WORDS);
      351      351    2   END;
      352      352
      353      353    1   TEMP_PTR$->NODE.FORWARD_OFFSET = 0; /*INDICATES LAST NODE ON CHAIN*/
      354      354    1   TEMP_PTR$->NODE.BACKWARD_OFFSET = 0;
      355      355
      356      356    1   RETURN;
      357      357
      358      358        /*D*
      359      359             NAME: XUM$CREATE_NEW_ITEM
      360      360             PURPOSE:
      361      361                  This routine will create an entry in the lru list for a new item.
      362      362
      363      363                  After the initialization is done the user is passed back a pointer
      364      364                  which is used both as a reference to this lru item and as pointer to
      365      365                  the area where the user can store one word of data.  This pointer
      366      366                  should be stored so that the user can reference this item later.
      367      367             CALL:
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:11   
      368      368                  CALL XUM$CREATE_NEW_ITEM (   ITEM_PTR,WORKSPACE) ALTRET;
      369      369             INPUT:
      370      370                  WORKSPACE- This is the same as described in INIT_LRU.
      371      371             OUTPUT:
      372      372                  ITEM_PTR- This is the pointer the user receives which can be used to
      373      373                  reference this specific lru item.  This is also the pointer the user
      374      374                  receives which points to the area in which the user can store one
      375      375                  word of information.  Yes this pointer does have 2 (two) uses!
      376      376             ALTRETURN - Occurs if the workspace has been used up with previous
      377      377                      creates, or if the user didn't pass 2 parameters.
      378      378        */
      379      379    1   XUM$CREATE_NEW_ITEM: ENTRY (P_WORKSPACE_,  P_NODE_PTR$) ALTRET;
      380      380
      381      381        %CHECK_FOR_TWO_PARAMETERS;
               382    1   IF ADDR(P_WORKSPACE_) = ADDR(NIL)
               383    1      OR
               384    1      ADDR(P_NODE_PTR$) = ADDR(NIL) THEN
               385    2   DO;
               386    2     ALTRETURN;
               387    2   END;
      382      389
      383      390    1   WS_PTR$ = VBASE(P_WORKSPACE_);
      384      391        %GET_NEXT_FREE_NODE;
               392    1   IF WORKSPACE.FREE_NODE_OFFSET ~= 0 THEN
               393    2   DO;
               394    2     P_NODE_PTR$ = PINCRW(WS_PTR$, WORKSPACE.FREE_NODE_OFFSET);
               395    2     WORKSPACE.FREE_NODE_OFFSET = P_NODE_PTR$->NODE.FORWARD_OFFSET;
               396    2     PINCRW(WS_PTR$, WORKSPACE.FREE_NODE_OFFSET)->NODE.BACKWARD_OFFSET = 0;
               397    2   END;
               398    1   ELSE
               399    2   DO;
               400    2     ALTRETURN; /*END OF FREE CHAIN HAS BEEN REACHED*/
               401    2   END;
      385      403    1   IF WORKSPACE.HEAD_OFFSET = 0 THEN
      386      404    2   DO;
      387      405    2     WORKSPACE.HEAD_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);
      388      406    2     WORKSPACE.TAIL_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:12   
      389      407    2     P_NODE_PTR$->NODE.FORWARD_OFFSET = 0;
      390      408    2     P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;
      391      409    2   END;
      392      410
      393      411    1   ELSE
      394      412    2   DO;
      395      413          %MAKE_NODE_HEAD_NODE;
               414    2   P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.HEAD_OFFSET;
               415    2   P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;
               416    2   PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.BACKWARD_OFFSET =
               417    2          POFFW(P_NODE_PTR$, WS_PTR$);
               418    2   WORKSPACE.HEAD_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);
      396      420    2   END;
      397      421
      398      422    1   RETURN;
      399      423
      400      424        /*D*
      401      425             NAME: XUM$GET_LRU_ITEM
      402      426             PURPOSE:
      403      427                  This routine will return a pointer to the users word of storage which
      404      428                  was least recently used.
      405      429             CALL:
      406      430                  CALL XUM$GET_LRU_ITEM (ITEM_PTR,   WORKSPACE) ALTRET;
      407      431             INPUT:
      408      432                  WORKSPACE -Same as defined for INIT_LRU routine.
      409      433             OUTPUT:
      410      434                  ITEM_PTR -This is a pointer to the word of user storage that was
      411      435                  inserted into the lru list as the least recently used item.
      412      436             DESCRIPTION:
      413      437                  This routine will return the least recently used item from the lru
      414      438                  list AND ALSO make this item the now most recently used.
      415      439             ALTRETURN - Occurs when the lru list is empty, or 2 parameters
      416      440                         weren't passed into the routine.
      417      441        */
      418      442    1   XUM$GET_LRU_ITEM: ENTRY (P_WORKSPACE_, P_NODE_PTR$) ALTRET;
      419      443
      420      444        %CHECK_FOR_TWO_PARAMETERS;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:13   
               445    1   IF ADDR(P_WORKSPACE_) = ADDR(NIL)
               446    1      OR
               447    1      ADDR(P_NODE_PTR$) = ADDR(NIL) THEN
               448    2   DO;
               449    2     ALTRETURN;
               450    2   END;
      421      452
      422      453    1   WS_PTR$ = VBASE(P_WORKSPACE_);
      423      454        %CHECK_FOR_EMPTY_LRU_LIST;
               455    1   IF WORKSPACE.HEAD_OFFSET = 0 THEN
               456    2   DO;
               457    2     ALTRETURN;
               458    2   END;
      424      460
      425      461    1   IF WORKSPACE.HEAD_OFFSET ~= WORKSPACE.TAIL_OFFSET THEN
      426      462    2   DO;
      427      463    2   P_NODE_PTR$ =PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET);
      428      464        %REMOVE_HEAD_NODE;
               465    2   WORKSPACE.HEAD_OFFSET = PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.FORWARD_OFFSET;
               466    2   PINCRW(WS_PTR$,WORKSPACE.HEAD_OFFSET)-> NODE.BACKWARD_OFFSET = 0;
      429      468        %MAKE_NODE_TAIL_NODE;
               469    2   PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.FORWARD_OFFSET =
               470    2         POFFW(P_NODE_PTR$, WS_PTR$);
               471    2   P_NODE_PTR$->NODE.BACKWARD_OFFSET = WORKSPACE.TAIL_OFFSET;
               472    2   P_NODE_PTR$->NODE.FORWARD_OFFSET = 0;
               473    2   WORKSPACE.TAIL_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);
      430      475    2   END;
      431      476    1   ELSE
      432      477    2   DO;
      433      478    2   P_NODE_PTR$ = PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET);
      434      479    2   END;
      435      480    1   RETURN;
      436      481
      437      482        /*D*
      438      483             NAME: XUM$MAKE_ITEM_MRU
      439      484             PURPOSE:
      440      485                  This routine will take the item pointed to by the user input and make
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:14   
      441      486                  it the most recently used item in the lru list.
      442      487             CALL:
      443      488                  CALL XUM$MAKE_ITEM_MRU (   ITEM_PTR,WORKSPACE) ALTRET;
      444      489             INPUT:
      445      490                  ITEM_PTR -This is the same pointer that the CREATE routine returns.
      446      491                  It is used to reference the item which the user placed into the lru
      447      492                  list.
      448      493                  WORKSPACE -Same as defined in INIT routine.
      449      494             DESCRIPTION:
      450      495                  Takes any item, referenced by ITEM_PTR, and contained in the lru list
      451      496                  and logically moves it to the most recently used position.
      452      497             ALTRETURN - Occurs if the lru list is empty, or 2 parameters weren't
      453      498                         passed into the routine.
      454      499        */
      455      500    1   XUM$MAKE_ITEM_MRU: ENTRY (P_WORKSPACE_, P_NODE_PTR$) ALTRET;
      456      501
      457      502        %CHECK_FOR_TWO_PARAMETERS;
               503    1   IF ADDR(P_WORKSPACE_) = ADDR(NIL)
               504    1      OR
               505    1      ADDR(P_NODE_PTR$) = ADDR(NIL) THEN
               506    2   DO;
               507    2     ALTRETURN;
               508    2   END;
      458      510
      459      511    1   WS_PTR$ = VBASE(P_WORKSPACE_);
      460      512
      461      513        %CHECK_IF_NODE_IS_IN_LRU_LIST;
               514    1   IF (P_NODE_PTR$ = ADDR(NIL)
               515    1      OR
               516    1      P_NODE_PTR$ < PINCRW(VBASE(P_WORKSPACE_), %NODE_SIZE_IN_WORDS)
               517    1      OR
               518    1      P_NODE_PTR$ >= PINCRC( VBASE (P_WORKSPACE_), VBOUND (P_WORKSPACE_) )
               519    1      OR
               520    1      MOD (POFFC (P_NODE_PTR$, VBASE(P_WORKSPACE_)), %NUM_BYTES_IN_NODE) ~= 0
               521    1      OR
               522    1      (P_NODE_PTR$ ~= PINCRW(VBASE(P_WORKSPACE_), WORKSPACE.HEAD_OFFSET)
               523    1      AND
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:15   
               524    1      P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0)) THEN
               525    2   DO;
               526    2      ALTRETURN; /*NODE IS NOT IN LRU LIST*/
               527    2   END;
      462      529
      463      530    1   IF WORKSPACE.HEAD_OFFSET ~= WORKSPACE.TAIL_OFFSET THEN
      464      531    2   DO;
      465      532
      466      533    2   IF P_NODE_PTR$-> NODE.BACKWARD_OFFSET = 0 THEN
      467      534    3   DO; /*HEAD NODE*/
      468      535          %REMOVE_HEAD_NODE;
               536    3   WORKSPACE.HEAD_OFFSET = PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.FORWARD_OFFSET;
               537    3   PINCRW(WS_PTR$,WORKSPACE.HEAD_OFFSET)-> NODE.BACKWARD_OFFSET = 0;
      469      539          %MAKE_NODE_TAIL_NODE;
               540    3   PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.FORWARD_OFFSET =
               541    3         POFFW(P_NODE_PTR$, WS_PTR$);
               542    3   P_NODE_PTR$->NODE.BACKWARD_OFFSET = WORKSPACE.TAIL_OFFSET;
               543    3   P_NODE_PTR$->NODE.FORWARD_OFFSET = 0;
               544    3   WORKSPACE.TAIL_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);
      470      546    3   END;
      471      547    2   ELSE
      472      548    2   IF P_NODE_PTR$->NODE.FORWARD_OFFSET ~= 0 THEN
      473      549    3   DO; /*NODE BETWEEN TWO OTHER NODES*/
      474      550          %REMOVE_INTERIOR_NODE;
               551    3   PINCRW(WS_PTR$, P_NODE_PTR$->NODE.BACKWARD_OFFSET)->NODE.FORWARD_OFFSET =
               551            P_NODE_PTR$->NODE.FORWARD_OFFSET;
               552    3   PINCRW(WS_PTR$, P_NODE_PTR$->NODE.FORWARD_OFFSET)->NODE.BACKWARD_OFFSET =
               552            P_NODE_PTR$->NODE.BACKWARD_OFFSET;
      475      554          %MAKE_NODE_TAIL_NODE;
               555    3   PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.FORWARD_OFFSET =
               556    3         POFFW(P_NODE_PTR$, WS_PTR$);
               557    3   P_NODE_PTR$->NODE.BACKWARD_OFFSET = WORKSPACE.TAIL_OFFSET;
               558    3   P_NODE_PTR$->NODE.FORWARD_OFFSET = 0;
               559    3   WORKSPACE.TAIL_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);
      476      561    3   END;
      477      562
      478      563    2   END;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:16   
      479      564    1   RETURN;
      480      565
      481      566        /*D*
      482      567             NAME: XUM$MAKE_ITEM_LRU
      483      568             PURPOSE:
      484      569                  This routine will place any item referenced through the pointer and
      485      570                  make it the least recently used item in the list.  A subsequent call
      486      571                  to GET_LRU will return this same pointer.
      487      572             CALL:
      488      573                  CALL XUM$MAKE_ITEM_LRU (   ITEM_PTR,WORKSPACE) ALTRET;
      489      574             INPUT:
      490      575                  ITEM_PTR -A pointer which references a particular item in the lru
      491      576                  list, (this is also the pointer to the users one word data area) and
      492      577                  makes this item the least recently used.
      493      578
      494      579                  WORKSPACE -Same as defined for INIT routine.
      495      580             DESCRIPTION:
      496      581                  Takes any item in the lru list referenced by ITEM_PTR and moves it to
      497      582                  the least recently used position.
      498      583             ALTRETURN - Occurs if the lru list is empty, or
      499      584                         if there aren't 2 parameters passed into the routine.
      500      585        */
      501      586    1   XUM$MAKE_ITEM_LRU: ENTRY (P_WORKSPACE_, P_NODE_PTR$) ALTRET;
      502      587
      503      588        %CHECK_FOR_TWO_PARAMETERS;
               589    1   IF ADDR(P_WORKSPACE_) = ADDR(NIL)
               590    1      OR
               591    1      ADDR(P_NODE_PTR$) = ADDR(NIL) THEN
               592    2   DO;
               593    2     ALTRETURN;
               594    2   END;
      504      596
      505      597    1   WS_PTR$ = VBASE(P_WORKSPACE_);
      506      598
      507      599        %CHECK_IF_NODE_IS_IN_LRU_LIST;
               600    1   IF (P_NODE_PTR$ = ADDR(NIL)
               601    1      OR
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:17   
               602    1      P_NODE_PTR$ < PINCRW(VBASE(P_WORKSPACE_), %NODE_SIZE_IN_WORDS)
               603    1      OR
               604    1      P_NODE_PTR$ >= PINCRC( VBASE (P_WORKSPACE_), VBOUND (P_WORKSPACE_) )
               605    1      OR
               606    1      MOD (POFFC (P_NODE_PTR$, VBASE(P_WORKSPACE_)), %NUM_BYTES_IN_NODE) ~= 0
               607    1      OR
               608    1      (P_NODE_PTR$ ~= PINCRW(VBASE(P_WORKSPACE_), WORKSPACE.HEAD_OFFSET)
               609    1      AND
               610    1      P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0)) THEN
               611    2   DO;
               612    2      ALTRETURN; /*NODE IS NOT IN LRU LIST*/
               613    2   END;
      508      615    1   IF WORKSPACE.HEAD_OFFSET ~= WORKSPACE.TAIL_OFFSET THEN
      509      616    2   DO;
      510      617
      511      618    2   IF P_NODE_PTR$->NODE.FORWARD_OFFSET = 0 THEN
      512      619    3   DO; /*TAIL NODE*/
      513      620          %REMOVE_TAIL_NODE;
               621    3   WORKSPACE.TAIL_OFFSET = PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.BACKWARD_OFFSET
               621            ;
               622    3   PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.FORWARD_OFFSET = 0;
      514      624          %MAKE_NODE_HEAD_NODE;
               625    3   P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.HEAD_OFFSET;
               626    3   P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;
               627    3   PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.BACKWARD_OFFSET =
               628    3          POFFW(P_NODE_PTR$, WS_PTR$);
               629    3   WORKSPACE.HEAD_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);
      515      631    3   END;
      516      632    2   ELSE
      517      633    2   IF P_NODE_PTR$->NODE.BACKWARD_OFFSET ~= 0 THEN
      518      634    3   DO;
      519      635          %REMOVE_INTERIOR_NODE;
               636    3   PINCRW(WS_PTR$, P_NODE_PTR$->NODE.BACKWARD_OFFSET)->NODE.FORWARD_OFFSET =
               636            P_NODE_PTR$->NODE.FORWARD_OFFSET;
               637    3   PINCRW(WS_PTR$, P_NODE_PTR$->NODE.FORWARD_OFFSET)->NODE.BACKWARD_OFFSET =
               637            P_NODE_PTR$->NODE.BACKWARD_OFFSET;
      520      639          %MAKE_NODE_HEAD_NODE;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:18   
               640    3   P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.HEAD_OFFSET;
               641    3   P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;
               642    3   PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.BACKWARD_OFFSET =
               643    3          POFFW(P_NODE_PTR$, WS_PTR$);
               644    3   WORKSPACE.HEAD_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);
      521      646    3   END;
      522      647    2   END;
      523      648
      524      649    1   RETURN;
      525      650
      526      651        /*D*
      527      652             NAME: XUM$DELETE_ITEM
      528      653             PURPOSE:
      529      654                  To delete an item from the lru list.
      530      655             CALL:
      531      656                  CALL XUM$DELETE_ITEM (   ITEM_PTR,WORKSPACE) ALTRET;
      532      657             INPUT:
      533      658                  ITEM_PTR -This pointer references the word of user storage to be
      534      659                  deleted.  It is the same pointer as returned from CREATE, for when
      535      660                  this item was created.  On return, this pointer will be the ADDR(NIL).
      536      661
      537      662                  WORKSPACE -Same as defined for INIT routine.
      538      663             DESCRIPTION:
      539      664                  Takes any item in the lru list referenced by ITEM_PTR and deletes the
      540      665                  occurrence of it.
      541      666             ALTRETURN - Occurs if the item to be deleted isn't in the lru list.
      542      667        */
      543      668    1   XUM$DELETE_ITEM: ENTRY (P_WORKSPACE_, P_NODE_PTR$) ALTRET;
      544      669
      545      670        %CHECK_FOR_TWO_PARAMETERS;
               671    1   IF ADDR(P_WORKSPACE_) = ADDR(NIL)
               672    1      OR
               673    1      ADDR(P_NODE_PTR$) = ADDR(NIL) THEN
               674    2   DO;
               675    2     ALTRETURN;
               676    2   END;
      546      678
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:19   
      547      679    1   WS_PTR$ = VBASE(P_WORKSPACE_);
      548      680
      549      681        %CHECK_IF_NODE_IS_IN_LRU_LIST;
               682    1   IF (P_NODE_PTR$ = ADDR(NIL)
               683    1      OR
               684    1      P_NODE_PTR$ < PINCRW(VBASE(P_WORKSPACE_), %NODE_SIZE_IN_WORDS)
               685    1      OR
               686    1      P_NODE_PTR$ >= PINCRC( VBASE (P_WORKSPACE_), VBOUND (P_WORKSPACE_) )
               687    1      OR
               688    1      MOD (POFFC (P_NODE_PTR$, VBASE(P_WORKSPACE_)), %NUM_BYTES_IN_NODE) ~= 0
               689    1      OR
               690    1      (P_NODE_PTR$ ~= PINCRW(VBASE(P_WORKSPACE_), WORKSPACE.HEAD_OFFSET)
               691    1      AND
               692    1      P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0)) THEN
               693    2   DO;
               694    2      ALTRETURN; /*NODE IS NOT IN LRU LIST*/
               695    2   END;
      550      697
      551      698        /*FOR DELETE WHEN THERE IS ONLY ONE NODE REMAINING*/
      552      699    1   IF WORKSPACE.HEAD_OFFSET = WORKSPACE.TAIL_OFFSET THEN
      553      700    2   DO;
      554      701          %RETURN_NODE_TO_FREE_CHAIN;
               702    2   P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.FREE_NODE_OFFSET;
               703    2   WORKSPACE.FREE_NODE_OFFSET =POFFW(P_NODE_PTR$, WS_PTR$);
               704    2   P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;
               705    2   P_NODE_PTR$ = ADDR(NIL);
      555      707    2     WORKSPACE.HEAD_OFFSET = 0;
      556      708    2     WORKSPACE.TAIL_OFFSET = 0;
      557      709    2     RETURN;
      558      710    2   END;
      559      711
      560      712    1   IF P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0 THEN
      561      713    2   DO; /*HEAD NODE*/
      562      714          %REMOVE_HEAD_NODE;
               715    2   WORKSPACE.HEAD_OFFSET = PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.FORWARD_OFFSET;
               716    2   PINCRW(WS_PTR$,WORKSPACE.HEAD_OFFSET)-> NODE.BACKWARD_OFFSET = 0;
      563      718          %RETURN_NODE_TO_FREE_CHAIN;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:20   
               719    2   P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.FREE_NODE_OFFSET;
               720    2   WORKSPACE.FREE_NODE_OFFSET =POFFW(P_NODE_PTR$, WS_PTR$);
               721    2   P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;
               722    2   P_NODE_PTR$ = ADDR(NIL);
      564      724    2   END;
      565      725    1   ELSE
      566      726    1   IF P_NODE_PTR$->NODE.FORWARD_OFFSET ~= 0 THEN
      567      727    2   DO; /*NODE BETWEEN TWO OTHER NODES*/
      568      728          %REMOVE_INTERIOR_NODE;
               729    2   PINCRW(WS_PTR$, P_NODE_PTR$->NODE.BACKWARD_OFFSET)->NODE.FORWARD_OFFSET =
               729            P_NODE_PTR$->NODE.FORWARD_OFFSET;
               730    2   PINCRW(WS_PTR$, P_NODE_PTR$->NODE.FORWARD_OFFSET)->NODE.BACKWARD_OFFSET =
               730            P_NODE_PTR$->NODE.BACKWARD_OFFSET;
      569      732          %RETURN_NODE_TO_FREE_CHAIN;
               733    2   P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.FREE_NODE_OFFSET;
               734    2   WORKSPACE.FREE_NODE_OFFSET =POFFW(P_NODE_PTR$, WS_PTR$);
               735    2   P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;
               736    2   P_NODE_PTR$ = ADDR(NIL);
      570      738    2   END;
      571      739    1   ELSE
      572      740    2   DO; /*TAIL NODE*/
      573      741          %REMOVE_TAIL_NODE;
               742    2   WORKSPACE.TAIL_OFFSET = PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.BACKWARD_OFFSET
               742            ;
               743    2   PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.FORWARD_OFFSET = 0;
      574      745          %RETURN_NODE_TO_FREE_CHAIN;
               746    2   P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.FREE_NODE_OFFSET;
               747    2   WORKSPACE.FREE_NODE_OFFSET =POFFW(P_NODE_PTR$, WS_PTR$);
               748    2   P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;
               749    2   P_NODE_PTR$ = ADDR(NIL);
      575      751    2   END;
      576      752
      577      753    1   RETURN;
      578      754
      579      755
      580      756        /*D*
      581      757             NAME: XUM$GET_MRU_ITEM
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:21   
      582      758             PURPOSE:
      583      759                  This routine returns the most recently used item in the lru list.
      584      760             CALL:
      585      761                  CALL XUM$GET_MRU_ITEM (ITEM_PTR,   WORKSPACE) ALTRET;
      586      762             OUTPUT:
      587      763                  ITEM_PTR -This is a pointer to the one word of user storage, in the
      588      764                  lru list, which was most recently used.
      589      765             INPUT:
      590      766                  WORKSPACE -Same as defined for INIT routine.
      591      767             DESCRIPTION:
      592      768                  Returns the most recently used word.
      593      769             ALTRETURN - Occurs if the lru list is empty,
      594      770                         if there aren't 2 parameters passed into the routine.
      595      771        */
      596      772    1   XUM$GET_MRU_ITEM: ENTRY (P_WORKSPACE_, P_NODE_PTR$) ALTRET;
      597      773
      598      774        %CHECK_FOR_TWO_PARAMETERS;
               775    1   IF ADDR(P_WORKSPACE_) = ADDR(NIL)
               776    1      OR
               777    1      ADDR(P_NODE_PTR$) = ADDR(NIL) THEN
               778    2   DO;
               779    2     ALTRETURN;
               780    2   END;
      599      782
      600      783    1   WS_PTR$ = VBASE(P_WORKSPACE_);
      601      784
      602      785        %CHECK_FOR_EMPTY_LRU_LIST;
               786    1   IF WORKSPACE.HEAD_OFFSET = 0 THEN
               787    2   DO;
               788    2     ALTRETURN;
               789    2   END;
      603      791
      604      792    1   P_NODE_PTR$ = PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET);
      605      793
      606      794    1   RETURN;
      607      795
      608      796    1   END XUM$LRU_ROUTINES;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:22   
      609      797

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:23   
      No diagnostics issued in procedure XUM$LRU_ROUTINES.

   Procedure XUM$LRU_ROUTINES requires 577 words for executable code.
   Procedure XUM$LRU_ROUTINES requires 14 words of local(AUTO) storage.

    No errors detected in file XUM$LRU.:E05TSI    .

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:24   

 Object Unit name= XUM$LRU_ROUTINES                           File name= XUM$LRU.:E05TOU
 UTS= JUL 30 '97 09:21:27.92 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   577   1101  XUM$LRU_ROUTINES
    1  RoData even  none     2      2  XUM$LRU_ROUTINES

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  XUM$LRU_ROUTINES
     0      3          yes     yes      Std        1  XUM$INIT_WORKSPACE
     0    100          yes     yes      Std        2  XUM$CREATE_NEW_ITEM
     0    203          yes     yes      Std        2  XUM$GET_LRU_ITEM
     0    271          yes     yes      Std        2  XUM$MAKE_ITEM_MRU
     0    453          yes     yes      Std        2  XUM$MAKE_ITEM_LRU
     0    634          yes     yes      Std        2  XUM$DELETE_ITEM
     0   1053          yes     yes      Std        2  XUM$GET_MRU_ITEM

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:25   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:26   


        1        1        /*M* Least_recently_used - An lru package with all handling routines. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P*
        8        8             NAME: Least recently used
        9        9             PURPOSE:
       10       10                  This is a package to maintain a least recently used list of words.
       11       11                  The user has the full responsibility of maintaining the correct
       12       12                  contents of those words of storage.  The maintenance of the lru list
       13       13                  is taken care of by means of these routines, and their proper use.
       14       14             DESCRIPTION:
       15       15                  The most important item to be remembered is that the lru list will be
       16       16                  maintained internally based on the following assumptions.
       17       17
       18       18                  1) When the user declares a new item to be inserted into the list,
       19       19                  that item will become the least recently used.
       20       20
       21       21                  2) When the user requests the lru item, the list will automatically
       22       22                  be updated to reflect the usage of this lru item.  In other words, it
       23       23                  will go to the most recently used spot.
       24       24             REFERENCE:
       25       25                  The user must be aware of and act in accordance with the following
       26       26                  assertions:
       27       27
       28       28                  1) The user will be given 1 (one) word of storage for each of the
       29       29                  items in the lru list.  The user will have access to this word by
       30       30                  means of a pointer which will be passed back from the appropriate
       31       31                  routines.  The user will have to store this pointer since it will be
       32       32                  the only way of communicating to the lru routines a reference to a
       33       33                  specific lru list item.  More on this in the routine descriptions.
       34       34
       35       35                  2) The user must create a minimum workspace size of ((number of items
       36       36                  to be maintained * 2)+ 3)words.  This size can be any size greater
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:27   
       37       37                  than 5 words; multiples of 2 are not necessary, but 2 words are
       38       38                  necessary to maintain each lru item.  This workspace must be created
       39       39                  on a word aligned boundary.  This workspace must be framed by a
       40       40                  vector.  This vector will always be passed as an input parameter to
       41       41                  all routines.  This vector will always be the FIRST parameter in the
       42       42                  parameter list.
       43       43
       44       44                  3) The user should not try to store more than 1 (one) word in the
       45       45                  area returned for his use.  This can cause untold sorrow for the
       46       46                  user at a later point in time!
       47       47
       48       48                  4) The user must remember to include the file:
       49       49                      XUM_ENTRIES_C
       50       50                  This will perform the appropriate DCLs for all the LRU routines.
       51       51
       52       52        */
       53       53        %LIST;
       54       54        %EQU MINIMUM_WS_BYTE_SIZE = 16;
       55       55        %EQU NUM_BYTES_IN_NODE = 8;
       56       56        %EQU NODE_SIZE_IN_WORDS = 2;
       57       57
       58       58        /*I*
       59       59             NAME: GET_NEXT_FREE_NODE
       60       60             PURPOSE:
       61       61                  To return a pointer to the next block of three words which are used
       62       62                  to define a users item.
       63       63             CALL:
       64       64                  %GET_NEXT_FREE_NODE;
       65       65             DESCRIPTION:
       66       66                  This routine maintains the free chain and returns a pointer to an
       67       67                  unused block of three words.
       68       68             ALTRETURN - Occurs when there are no more free words in the workspace.
       69       69        */
       70       70        %MACRO GET_NEXT_FREE_NODE;
       71       71
       72       72        IF WORKSPACE.FREE_NODE_OFFSET ~= 0 THEN
       73       73        DO;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:28   
       74       74          P_NODE_PTR$ = PINCRW(WS_PTR$, WORKSPACE.FREE_NODE_OFFSET);
       75       75          WORKSPACE.FREE_NODE_OFFSET = P_NODE_PTR$->NODE.FORWARD_OFFSET;
       76       76          PINCRW(WS_PTR$, WORKSPACE.FREE_NODE_OFFSET)->NODE.BACKWARD_OFFSET = 0;
       77       77        END;
       78       78        ELSE
       79       79        DO;
       80       80          ALTRETURN; /*END OF FREE CHAIN HAS BEEN REACHED*/
       81       81        END;
       82       82
       83       83        %MEND;
       84       84
       85       85        /*I*
       86       86             NAME: RETURN_NODE_TO_FREE_CHAIN
       87       87             PURPOSE:
       88       88                  When a node is deleted from the lru list, it must be returned to the
       89       89                  free chain.
       90       90             CALL:
       91       91                  %RETURN_NODE_TO_FREE_CHAIN;
       92       92             DESCRIPTION:
       93       93                  This routine will take the two words which are referenced by the
       94       94                  NODE_PTR and connect these two words to the list of free words.
       95       95        */
       96       96        %MACRO RETURN_NODE_TO_FREE_CHAIN;
       97       97
       98       98        P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.FREE_NODE_OFFSET;
       99       99        WORKSPACE.FREE_NODE_OFFSET =POFFW(P_NODE_PTR$, WS_PTR$);
      100      100        P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;
      101      101        P_NODE_PTR$ = ADDR(NIL);
      102      102
      103      103        %MEND;
      104      104
      105      105        /*I*
      106      106             NAME: MAKE_NODE_HEAD_NODE
      107      107             PURPOSE:
      108      108                  To place a node at the head position of the lru list.
      109      109             CALL:
      110      110                  %MAKE_NODE_HEAD_NODE;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:29   
      111      111             DESCRIPTION:
      112      112                  Takes the node pointed to by NODE_PTR and inserts it into the lru
      113      113                  list in the head position.
      114      114        */
      115      115        %MACRO MAKE_NODE_HEAD_NODE;
      116      116
      117      117        P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.HEAD_OFFSET;
      118      118        P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;
      119      119        PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.BACKWARD_OFFSET =
      120      120               POFFW(P_NODE_PTR$, WS_PTR$);
      121      121        WORKSPACE.HEAD_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);
      122      122
      123      123        %MEND;
      124      124
      125      125        /*I*
      126      126             NAME: MAKE_NODE_TAIL_NODE
      127      127             PURPOSE:
      128      128                  To place a node at the tail of the lru list.
      129      129             CALL:
      130      130                  %MAKE_NODE_TAIL_NODE;
      131      131             DESCRIPTION:
      132      132                  Place the referenced node into the tail position of the lru list.
      133      133        */
      134      134        %MACRO MAKE_NODE_TAIL_NODE;
      135      135
      136      136        PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.FORWARD_OFFSET =
      137      137              POFFW(P_NODE_PTR$, WS_PTR$);
      138      138        P_NODE_PTR$->NODE.BACKWARD_OFFSET = WORKSPACE.TAIL_OFFSET;
      139      139        P_NODE_PTR$->NODE.FORWARD_OFFSET = 0;
      140      140        WORKSPACE.TAIL_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);
      141      141
      142      142        %MEND;
      143      143
      144      144        /*I*
      145      145             NAME: REMOVE_HEAD_NODE
      146      146             PURPOSE:
      147      147                  To remove a node that is located in the head position of the lru list.
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:30   
      148      148             CALL:
      149      149                  %REMOVE_HEAD_NODE;
      150      150             DESCRIPTION:
      151      151                  Remove any node from the lru list and return a pointer to it so it
      152      152                  wont get lost.
      153      153        */
      154      154        %MACRO REMOVE_HEAD_NODE;
      155      155
      156      156       WORKSPACE.HEAD_OFFSET = PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.FORWARD_OFFSET;
      157      157        PINCRW(WS_PTR$,WORKSPACE.HEAD_OFFSET)-> NODE.BACKWARD_OFFSET = 0;
      158      158
      159      159        %MEND;
      160      160
      161      161        /*I*
      162      162             NAME: REMOVE_TAIL_NODE
      163      163             PURPOSE:
      164      164                  To remove the tail node of the lru list.
      165      165             CALL:
      166      166                  %REMOVE_TAIL_NODE;
      167      167             DESCRIPTION:
      168      168                  Remove the node at the tail position of the lru list, and return a
      169      169                  pointer to it so it wont get lost or go away.
      170      170        */
      171      171        %MACRO REMOVE_TAIL_NODE;
      172      172
      173      173       WORKSPACE.TAIL_OFFSET = PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.BACKWARD_OFFSET
               173        ;
      174      174        PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.FORWARD_OFFSET = 0;
      175      175
      176      176        %MEND;
      177      177
      178      178        /*I*
      179      179             NAME: REMOVE_INTERIOR_NODE
      180      180             PURPOSE:
      181      181                  To remove any node, which isn't in the head or tail position, from
      182      182                  the lru list.
      183      183             CALL:
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:31   
      184      184                  %REMOVE_INTERIOR_NODE;
      185      185             DESCRIPTION:
      186      186                  This routine will set up the links of the lru list to exclude the
      187      187                  node referenced by the NODE_PTR.
      188      188        */
      189      189        %MACRO REMOVE_INTERIOR_NODE;
      190      190
      191      191       PINCRW(WS_PTR$, P_NODE_PTR$->NODE.BACKWARD_OFFSET)->NODE.FORWARD_OFFSET = P_NODE_PTR
               191        $->NODE.FORWARD_OFFSET;
      192      192       PINCRW(WS_PTR$, P_NODE_PTR$->NODE.FORWARD_OFFSET)->NODE.BACKWARD_OFFSET = P_NODE_PTR
               192        $->NODE.BACKWARD_OFFSET;
      193      193
      194      194        %MEND;
      195      195
      196      196
      197      197        /*I*
      198      198             NAME: CHECK_IF_NODE_IS_IN_LRU_LIST
      199      199             PURPOSE:
      200      200                  To determine if a pointer passed into these routines does not
      201      201                  point to a node in the lru list.
      202      202             CALL:
      203      203                  %CHECK_IF_NODE_IS_IN_LRU_LIST;
      204      204             DESCRIPTION:
      205      205                  Check if the pointer passed in is:
      206      206                  1) equal to addr(nil), its missing!
      207      207                  2) pointing to an area prior to where the workspace frames.
      208      208                  3) pointing to an area after where the workspace frames.
      209      209                  4) points to a location that is a node boundry.
      210      210                  5) points to a node in the lru list, not the free chain.
      211      211             ALTRETURN - Occurs when the user passes an invalid pointer.
      212      212        */
      213      213
      214      214        %MACRO CHECK_IF_NODE_IS_IN_LRU_LIST;
      215      215
      216      216        IF (P_NODE_PTR$ = ADDR(NIL)
      217      217           OR
      218      218           P_NODE_PTR$ < PINCRW(VBASE(P_WORKSPACE_), %NODE_SIZE_IN_WORDS)
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:32   
      219      219           OR
      220      220           P_NODE_PTR$ >= PINCRC( VBASE (P_WORKSPACE_), VBOUND (P_WORKSPACE_) )
      221      221           OR
      222      222           MOD (POFFC (P_NODE_PTR$, VBASE(P_WORKSPACE_)), %NUM_BYTES_IN_NODE) ~= 0
      223      223           OR
      224      224           (P_NODE_PTR$ ~= PINCRW(VBASE(P_WORKSPACE_), WORKSPACE.HEAD_OFFSET)
      225      225           AND
      226      226           P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0)) THEN
      227      227        DO;
      228      228           ALTRETURN; /*NODE IS NOT IN LRU LIST*/
      229      229        END;
      230      230
      231      231        %MEND;
      232      232
      233      233        /*I*
      234      234             NAME: CHECK_FOR_EMPTY_LRU_LIST
      235      235             PURPOSE:
      236      236                  To check if the lru list is empty.
      237      237             CALL:
      238      238                  %CHECK_FOR_EMPTY_LRU_LIST;
      239      239             DESCRIPTION:
      240      240                  If the lru list is empty then altreturn.
      241      241             ALTRETURN - Occurs when the user didn't pass a pointer to the workspace.
      242      242        */
      243      243        %MACRO CHECK_FOR_EMPTY_LRU_LIST;
      244      244
      245      245        IF WORKSPACE.HEAD_OFFSET = 0 THEN
      246      246        DO;
      247      247          ALTRETURN;
      248      248        END;
      249      249
      250      250        %MEND;
      251      251
      252      252        /*I*
      253      253             NAME: CHECK_FOR_TWO_PARAMETERS
      254      254             PURPOSE:
      255      255                  To check for the existence of two parameters.
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:33   
      256      256             CALL:
      257      257                  %CHECK_FOR_TWO_PARAMETERS;
      258      258             DESCRIPTION:
      259      259                  If there are LESS than two parameters then altreturn.
      260      260             ALTRETURN - Occurs when the user passes less than 2 parameters.
      261      261        */
      262      262        %MACRO CHECK_FOR_TWO_PARAMETERS;
      263      263
      264      264        IF ADDR(P_WORKSPACE_) = ADDR(NIL)
      265      265           OR
      266      266           ADDR(P_NODE_PTR$) = ADDR(NIL) THEN
      267      267        DO;
      268      268          ALTRETURN;
      269      269        END;
      270      270
      271      271        %MEND;
      272      272
      273      273        XUM$LRU_ROUTINES: PROC (P_WORKSPACE_, P_NODE_PTR$) ALTRET;

    273  0 000000   000000 700200 xent  XUM$LRU_ROU* TSX0  ! X66_AUTO_2
         0 000001   000016 000002                    ZERO    14,2
         0 000002   000005 710000 0                  TRA     s:325

      274      274    1   DCL 1 NODE BASED ALIGNED,
      275      275    1         2 USER_INFO BIT (36),
      276      276    1         2 FORWARD_OFFSET SBIN HALF HALIGNED,
      277      277    1         2 BACKWARD_OFFSET SBIN HALF HALIGNED;
      278      278
      279      279    1   DCL 1 WORKSPACE BASED (WS_PTR$) ALIGNED,
      280      280    1         2 HEAD_OFFSET SBIN HALF HALIGNED,
      281      281    1         2 TAIL_OFFSET SBIN HALF HALIGNED,
      282      282    1         2 FREE_NODE_OFFSET SBIN HALF HALIGNED,
      283      283    1         2 * BIT (18) UNAL;
      284      284
      285      285    1   DCL P_NODE_PTR$ PTR;
      286      286    1   DCL P_WORKSPACE_ VECTOR;
      287      287    1   DCL WS_PTR$ PTR;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:34   
      288      288    1   DCL TEMP_PTR$ PTR;
      289      289    1   DCL I UBIN;
      290      290    1   DCL NUM_ITERATIONS UBIN;
      291      291
      292      292
      293      293        /*F*
      294      294             NAME: XUM$INIT_WORKSPACE
      295      295             PURPOSE:
      296      296                  This is the routine which is called once and first for each lru list
      297      297                  to be created.
      298      298             DESCRIPTION:
      299      299                  INIT will place all the words in the workspace on a free list
      300      300                  and also make an lru list which contains null items.
      301      301                  The workspace parameter MUST be a VECTOR which frames an area to
      302      302                  contain the lru list and user word of data (an item).  The size of
      303      303                  this area must be (# of items * 2 + 3).
      304      304             REFERENCE:
      305      305                  The user must only REMEMBER to call this routine once and first,
      306      306                  and need not deal with it or anything about it afterwards.
      307      307        */
      308      308        /*D*
      309      309             NAME: XUM$INIT_WORKSPACE
      310      310             PURPOSE:
      311      311                  Take the area framed by the workspace vector and format into a chain
      312      312                  of free nodes each node being 2 words.
      313      313             CALL:
      314      314                  CALL XUM$INIT_WORKSPACE (   WORKSPACE) ALTRET;
      315      315             INPUT:
      316      316                  WORKSPACE- A vector framing an area of size (# items * 2 + 3).
      317      317             DATA:
      318      318                  The number of items must be the maximum value the list is going to be
      319      319                  requested to maintain.
      320      320             ALTRETURN - Will occur if the workspace size < 5 or not word aligned,
      321      321                         or if the user didn't pass a parameter (vector).
      322      322        */
      323      323    1   XUM$INIT_WORKSPACE: ENTRY (P_WORKSPACE_) ALTRET;

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:35   
    323  0 000003   000000 700200 xent  XUM$INIT_WO* TSX0  ! X66_AUTO_2
         0 000004   000016 000002                    ZERO    14,2

      324      324
      325      325    1   IF ADDR(P_WORKSPACE_) = ADDR(NIL) THEN

    325  0 000005   200003 236100                    LDQ     @P_WORKSPACE_,,AUTO
         0 000006   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000007   000011 601000 0                  TNZ     s:331

      326      326    2   DO;

      327      327    2     ALTRETURN;

    327  0 000010   000000 702200 xent               TSX2  ! X66_AALT

      328      328    2   END;
      329      329
      330      330
      331      331    1   IF VBOUND(P_WORKSPACE_) + 1  < %MINIMUM_WS_BYTE_SIZE

    331  0 000011   200003 470500                    LDP0    @P_WORKSPACE_,,AUTO
         0 000012   000000 236100                    LDQ     0,,PR0
         0 000013   000034 376000 xsym               ANQ     B_VECTNIL+28
         0 000014   000000 116000 1                  CMPQ    0
         0 000015   000023 602000 0                  TNC     s:335
         0 000016   000001 236100                    LDQ     1,,PR0
         0 000017   770000 036007                    ADLQ    -4096,DL
         0 000020   000001 376000 1                  ANQ     1
         0 000021   000001 116100                    CMPQ    1,,PR0
         0 000022   000024 600000 0                  TZE     s:338

      332      332    1      OR
      333      333    1      VBASE(P_WORKSPACE_) ~= PALIGNW (VBASE(P_WORKSPACE_)) THEN
      334      334    2   DO;

      335      335    2     ALTRETURN;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:36   

    335  0 000023   000000 702200 xent               TSX2  ! X66_AALT

      336      336    2   END;
      337      337
      338      338    1   WS_PTR$ = VBASE(P_WORKSPACE_);

    338  0 000024   000001 236100                    LDQ     1,,PR0
         0 000025   200005 756100                    STQ     WS_PTR$,,AUTO

      339      339    1   WORKSPACE.HEAD_OFFSET = 0;

    339  0 000026   000000 220003                    LDX0    0,DU
         0 000027   200005 471500                    LDP1    WS_PTR$,,AUTO
         0 000030   100000 740100                    STX0    0,,PR1

      340      340    1   WORKSPACE.TAIL_OFFSET = 0;

    340  0 000031   100000 440100                    SXL0    0,,PR1

      341      341    1   WORKSPACE.FREE_NODE_OFFSET =  %NODE_SIZE_IN_WORDS;

    341  0 000032   000002 221003                    LDX1    2,DU
         0 000033   100001 741100                    STX1    1,,PR1

      342      342
      343      343    1   TEMP_PTR$ =PINCRW(WS_PTR$, %NODE_SIZE_IN_WORDS);

    343  0 000034   000002 036003                    ADLQ    2,DU
         0 000035   200006 756100                    STQ     TEMP_PTR$,,AUTO

      344      344
      345      345    1   NUM_ITERATIONS = ((VBOUND(P_WORKSPACE_) - %(NUM_BYTES_IN_NODE - 1))

    345  0 000036   000000 236100                    LDQ     0,,PR0
         0 000037   000020 772000                    QRL     16
         0 000040   000007 136007                    SBLQ    7,DL
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:37   
         0 000041   000010 506007                    DIV     8,DL
         0 000042   000001 136007                    SBLQ    1,DL
         0 000043   200010 756100                    STQ     NUM_ITERATIONS,,AUTO

      346      346    1                    / %NUM_BYTES_IN_NODE) - 1;
      347      347    2   DO I = 1 TO NUM_ITERATIONS;

    347  0 000044   000001 235007                    LDA     1,DL
         0 000045   200007 755100                    STA     I,,AUTO
         0 000046   000070 710000 0                  TRA     s:351+3

      348      348    2    TEMP_PTR$-> NODE.FORWARD_OFFSET = POFFW(TEMP_PTR$, WS_PTR$) + %NODE_SIZE_IN_WORDS;

    348  0 000047   200005 235100                    LDA     WS_PTR$,,AUTO
         0 000050   000022 771000                    ARL     18
         0 000051   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000052   200006 236100                    LDQ     TEMP_PTR$,,AUTO
         0 000053   000022 772000                    QRL     18
         0 000054   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000055   000002 620006                    EAX0    2,QL
         0 000056   200006 470500                    LDP0    TEMP_PTR$,,AUTO
         0 000057   000001 740100                    STX0    1,,PR0

      349      349    2     TEMP_PTR$-> NODE.BACKWARD_OFFSET = 0;

    349  0 000060   000000 221003                    LDX1    0,DU
         0 000061   000001 441100                    SXL1    1,,PR0

      350      350    2     TEMP_PTR$ = PINCRW(TEMP_PTR$, %NODE_SIZE_IN_WORDS);

    350  0 000062   200006 236100                    LDQ     TEMP_PTR$,,AUTO
         0 000063   000002 036003                    ADLQ    2,DU
         0 000064   200006 756100                    STQ     TEMP_PTR$,,AUTO

      351      351    2   END;

    351  0 000065   200007 235100                    LDA     I,,AUTO
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:38   
         0 000066   000001 035007                    ADLA    1,DL
         0 000067   200007 755100                    STA     I,,AUTO
         0 000070   200010 236100                    LDQ     NUM_ITERATIONS,,AUTO
         0 000071   200007 116100                    CMPQ    I,,AUTO
         0 000072   000047 603000 0                  TRC     s:348

      352      352
      353      353    1   TEMP_PTR$->NODE.FORWARD_OFFSET = 0; /*INDICATES LAST NODE ON CHAIN*/

    353  0 000073   000000 220003                    LDX0    0,DU
         0 000074   200006 470500                    LDP0    TEMP_PTR$,,AUTO
         0 000075   000001 740100                    STX0    1,,PR0

      354      354    1   TEMP_PTR$->NODE.BACKWARD_OFFSET = 0;

    354  0 000076   000001 440100                    SXL0    1,,PR0

      355      355
      356      356    1   RETURN;

    356  0 000077   000000 702200 xent               TSX2  ! X66_ARET

      357      357
      358      358        /*D*
      359      359             NAME: XUM$CREATE_NEW_ITEM
      360      360             PURPOSE:
      361      361                  This routine will create an entry in the lru list for a new item.
      362      362
      363      363                  After the initialization is done the user is passed back a pointer
      364      364                  which is used both as a reference to this lru item and as pointer to
      365      365                  the area where the user can store one word of data.  This pointer
      366      366                  should be stored so that the user can reference this item later.
      367      367             CALL:
      368      368                  CALL XUM$CREATE_NEW_ITEM (   ITEM_PTR,WORKSPACE) ALTRET;
      369      369             INPUT:
      370      370                  WORKSPACE- This is the same as described in INIT_LRU.
      371      371             OUTPUT:
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:39   
      372      372                  ITEM_PTR- This is the pointer the user receives which can be used to
      373      373                  reference this specific lru item.  This is also the pointer the user
      374      374                  receives which points to the area in which the user can store one
      375      375                  word of information.  Yes this pointer does have 2 (two) uses!
      376      376             ALTRETURN - Occurs if the workspace has been used up with previous
      377      377                      creates, or if the user didn't pass 2 parameters.
      378      378        */
      379      379    1   XUM$CREATE_NEW_ITEM: ENTRY (P_WORKSPACE_,  P_NODE_PTR$) ALTRET;

    379  0 000100   000000 700200 xent  XUM$CREATE_* TSX0  ! X66_AUTO_2
         0 000101   000016 000002                    ZERO    14,2

      380      380
      381      381        %CHECK_FOR_TWO_PARAMETERS;
               382    1   IF ADDR(P_WORKSPACE_) = ADDR(NIL)

    382  0 000102   200003 236100                    LDQ     @P_WORKSPACE_,,AUTO
         0 000103   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000104   000110 600000 0                  TZE     s:386
         0 000105   200004 236100                    LDQ     @P_NODE_PTR$,,AUTO
         0 000106   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000107   000111 601000 0                  TNZ     s:390

               383    1      OR
               384    1      ADDR(P_NODE_PTR$) = ADDR(NIL) THEN
               385    2   DO;

               386    2     ALTRETURN;

    386  0 000110   000000 702200 xent               TSX2  ! X66_AALT

               387    2   END;
      382      389
      383      390    1   WS_PTR$ = VBASE(P_WORKSPACE_);

    390  0 000111   200003 470500                    LDP0    @P_WORKSPACE_,,AUTO
         0 000112   000001 236100                    LDQ     1,,PR0
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:40   
         0 000113   200005 756100                    STQ     WS_PTR$,,AUTO

      384      391        %GET_NEXT_FREE_NODE;
               392    1   IF WORKSPACE.FREE_NODE_OFFSET ~= 0 THEN

    392  0 000114   200005 471500                    LDP1    WS_PTR$,,AUTO
         0 000115   100001 220100                    LDX0    1,,PR1
         0 000116   000131 600000 0                  TZE     s:400

               393    2   DO;

               394    2     P_NODE_PTR$ = PINCRW(WS_PTR$, WORKSPACE.FREE_NODE_OFFSET);

    394  0 000117   000000 636010                    EAQ     0,X0
         0 000120   200005 036100                    ADLQ    WS_PTR$,,AUTO
         0 000121   200004 473500                    LDP3    @P_NODE_PTR$,,AUTO
         0 000122   300000 756100                    STQ     0,,PR3

               395    2     WORKSPACE.FREE_NODE_OFFSET = P_NODE_PTR$->NODE.FORWARD_OFFSET;

    395  0 000123   300000 474500                    LDP4    0,,PR3
         0 000124   400001 220100                    LDX0    1,,PR4
         0 000125   100001 740100                    STX0    1,,PR1

               396    2     PINCRW(WS_PTR$, WORKSPACE.FREE_NODE_OFFSET)->NODE.BACKWARD_OFFSET = 0;

    396  0 000126   000000 221003                    LDX1    0,DU
         0 000127   100001 441110                    SXL1    1,X0,PR1

               397    2   END;

    397  0 000130   000132 710000 0                  TRA     s:403

               398    1   ELSE
               399    2   DO;

               400    2     ALTRETURN; /*END OF FREE CHAIN HAS BEEN REACHED*/
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:41   

    400  0 000131   000000 702200 xent               TSX2  ! X66_AALT

               401    2   END;
      385      403    1   IF WORKSPACE.HEAD_OFFSET = 0 THEN

    403  0 000132   100000 220100                    LDX0    0,,PR1
         0 000133   000157 601000 0                  TNZ     s:414

      386      404    2   DO;

      387      405    2     WORKSPACE.HEAD_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);

    405  0 000134   200005 235100                    LDA     WS_PTR$,,AUTO
         0 000135   000022 771000                    ARL     18
         0 000136   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000137   300000 236100                    LDQ     0,,PR3
         0 000140   000022 772000                    QRL     18
         0 000141   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000142   000000 620006                    EAX0    0,QL
         0 000143   100000 740100                    STX0    0,,PR1

      388      406    2     WORKSPACE.TAIL_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);

    406  0 000144   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000145   300000 236100                    LDQ     0,,PR3
         0 000146   000022 772000                    QRL     18
         0 000147   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000150   000000 620006                    EAX0    0,QL
         0 000151   100000 440100                    SXL0    0,,PR1

      389      407    2     P_NODE_PTR$->NODE.FORWARD_OFFSET = 0;

    407  0 000152   300000 474500                    LDP4    0,,PR3
         0 000153   400001 741100                    STX1    1,,PR4

      390      408    2     P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:42   

    408  0 000154   300000 474500                    LDP4    0,,PR3
         0 000155   400001 441100                    SXL1    1,,PR4

      391      409    2   END;

    409  0 000156   000202 710000 0                  TRA     s:422

      392      410
      393      411    1   ELSE
      394      412    2   DO;

      395      413          %MAKE_NODE_HEAD_NODE;
               414    2   P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.HEAD_OFFSET;

    414  0 000157   300000 474500                    LDP4    0,,PR3
         0 000160   400001 740100                    STX0    1,,PR4

               415    2   P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;

    415  0 000161   300000 474500                    LDP4    0,,PR3
         0 000162   400001 441100                    SXL1    1,,PR4

               416    2   PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.BACKWARD_OFFSET =

    416  0 000163   100000 220100                    LDX0    0,,PR1
         0 000164   200005 235100                    LDA     WS_PTR$,,AUTO
         0 000165   000022 771000                    ARL     18
         0 000166   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000167   300000 236100                    LDQ     0,,PR3
         0 000170   000022 772000                    QRL     18
         0 000171   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000172   000000 622006                    EAX2    0,QL
         0 000173   100001 442110                    SXL2    1,X0,PR1

               417    2          POFFW(P_NODE_PTR$, WS_PTR$);
               418    2   WORKSPACE.HEAD_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:43   

    418  0 000174   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000175   300000 236100                    LDQ     0,,PR3
         0 000176   000022 772000                    QRL     18
         0 000177   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000200   000000 620006                    EAX0    0,QL
         0 000201   100000 740100                    STX0    0,,PR1

      396      420    2   END;

      397      421
      398      422    1   RETURN;

    422  0 000202   000000 702200 xent               TSX2  ! X66_ARET

      399      423
      400      424        /*D*
      401      425             NAME: XUM$GET_LRU_ITEM
      402      426             PURPOSE:
      403      427                  This routine will return a pointer to the users word of storage which
      404      428                  was least recently used.
      405      429             CALL:
      406      430                  CALL XUM$GET_LRU_ITEM (ITEM_PTR,   WORKSPACE) ALTRET;
      407      431             INPUT:
      408      432                  WORKSPACE -Same as defined for INIT_LRU routine.
      409      433             OUTPUT:
      410      434                  ITEM_PTR -This is a pointer to the word of user storage that was
      411      435                  inserted into the lru list as the least recently used item.
      412      436             DESCRIPTION:
      413      437                  This routine will return the least recently used item from the lru
      414      438                  list AND ALSO make this item the now most recently used.
      415      439             ALTRETURN - Occurs when the lru list is empty, or 2 parameters
      416      440                         weren't passed into the routine.
      417      441        */
      418      442    1   XUM$GET_LRU_ITEM: ENTRY (P_WORKSPACE_, P_NODE_PTR$) ALTRET;

    442  0 000203   000000 700200 xent  XUM$GET_LRU* TSX0  ! X66_AUTO_2
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:44   
         0 000204   000016 000002                    ZERO    14,2

      419      443
      420      444        %CHECK_FOR_TWO_PARAMETERS;
               445    1   IF ADDR(P_WORKSPACE_) = ADDR(NIL)

    445  0 000205   200003 236100                    LDQ     @P_WORKSPACE_,,AUTO
         0 000206   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000207   000213 600000 0                  TZE     s:449
         0 000210   200004 236100                    LDQ     @P_NODE_PTR$,,AUTO
         0 000211   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000212   000214 601000 0                  TNZ     s:453

               446    1      OR
               447    1      ADDR(P_NODE_PTR$) = ADDR(NIL) THEN
               448    2   DO;

               449    2     ALTRETURN;

    449  0 000213   000000 702200 xent               TSX2  ! X66_AALT

               450    2   END;
      421      452
      422      453    1   WS_PTR$ = VBASE(P_WORKSPACE_);

    453  0 000214   200003 470500                    LDP0    @P_WORKSPACE_,,AUTO
         0 000215   000001 236100                    LDQ     1,,PR0
         0 000216   200005 756100                    STQ     WS_PTR$,,AUTO

      423      454        %CHECK_FOR_EMPTY_LRU_LIST;
               455    1   IF WORKSPACE.HEAD_OFFSET = 0 THEN

    455  0 000217   200005 471500                    LDP1    WS_PTR$,,AUTO
         0 000220   100000 220100                    LDX0    0,,PR1
         0 000221   000223 601000 0                  TNZ     s:461

               456    2   DO;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:45   

               457    2     ALTRETURN;

    457  0 000222   000000 702200 xent               TSX2  ! X66_AALT

               458    2   END;
      424      460
      425      461    1   IF WORKSPACE.HEAD_OFFSET ~= WORKSPACE.TAIL_OFFSET THEN

    461  0 000223   100000 721100                    LXL1    0,,PR1
         0 000224   100000 101100                    CMPX1   0,,PR1
         0 000225   000264 600000 0                  TZE     s:478

      426      462    2   DO;

      427      463    2   P_NODE_PTR$ =PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET);

    463  0 000226   000000 636010                    EAQ     0,X0
         0 000227   200005 036100                    ADLQ    WS_PTR$,,AUTO
         0 000230   200004 473500                    LDP3    @P_NODE_PTR$,,AUTO
         0 000231   300000 756100                    STQ     0,,PR3

      428      464        %REMOVE_HEAD_NODE;
               465    2  WORKSPACE.HEAD_OFFSET = PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.FORWARD_OFFSET;

    465  0 000232   100000 220100                    LDX0    0,,PR1
         0 000233   100001 221110                    LDX1    1,X0,PR1
         0 000234   100000 741100                    STX1    0,,PR1

               466    2   PINCRW(WS_PTR$,WORKSPACE.HEAD_OFFSET)-> NODE.BACKWARD_OFFSET = 0;

    466  0 000235   000000 220003                    LDX0    0,DU
         0 000236   100001 440111                    SXL0    1,X1,PR1

      429      468        %MAKE_NODE_TAIL_NODE;
               469    2   PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.FORWARD_OFFSET =

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:46   
    469  0 000237   100000 721100                    LXL1    0,,PR1
         0 000240   200005 235100                    LDA     WS_PTR$,,AUTO
         0 000241   000022 771000                    ARL     18
         0 000242   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000243   300000 236100                    LDQ     0,,PR3
         0 000244   000022 772000                    QRL     18
         0 000245   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000246   000000 622006                    EAX2    0,QL
         0 000247   100001 742111                    STX2    1,X1,PR1

               470    2         POFFW(P_NODE_PTR$, WS_PTR$);
               471    2   P_NODE_PTR$->NODE.BACKWARD_OFFSET = WORKSPACE.TAIL_OFFSET;

    471  0 000250   300000 474500                    LDP4    0,,PR3
         0 000251   100000 721100                    LXL1    0,,PR1
         0 000252   400001 441100                    SXL1    1,,PR4

               472    2   P_NODE_PTR$->NODE.FORWARD_OFFSET = 0;

    472  0 000253   300000 474500                    LDP4    0,,PR3
         0 000254   400001 740100                    STX0    1,,PR4

               473    2   WORKSPACE.TAIL_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);

    473  0 000255   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000256   300000 236100                    LDQ     0,,PR3
         0 000257   000022 772000                    QRL     18
         0 000260   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000261   000000 621006                    EAX1    0,QL
         0 000262   100000 441100                    SXL1    0,,PR1

      430      475    2   END;

    475  0 000263   000270 710000 0                  TRA     s:480

      431      476    1   ELSE
      432      477    2   DO;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:47   

      433      478    2   P_NODE_PTR$ = PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET);

    478  0 000264   000000 636010                    EAQ     0,X0
         0 000265   200005 036100                    ADLQ    WS_PTR$,,AUTO
         0 000266   200004 473500                    LDP3    @P_NODE_PTR$,,AUTO
         0 000267   300000 756100                    STQ     0,,PR3

      434      479    2   END;

      435      480    1   RETURN;

    480  0 000270   000000 702200 xent               TSX2  ! X66_ARET

      436      481
      437      482        /*D*
      438      483             NAME: XUM$MAKE_ITEM_MRU
      439      484             PURPOSE:
      440      485                  This routine will take the item pointed to by the user input and make
      441      486                  it the most recently used item in the lru list.
      442      487             CALL:
      443      488                  CALL XUM$MAKE_ITEM_MRU (   ITEM_PTR,WORKSPACE) ALTRET;
      444      489             INPUT:
      445      490                  ITEM_PTR -This is the same pointer that the CREATE routine returns.
      446      491                  It is used to reference the item which the user placed into the lru
      447      492                  list.
      448      493                  WORKSPACE -Same as defined in INIT routine.
      449      494             DESCRIPTION:
      450      495                  Takes any item, referenced by ITEM_PTR, and contained in the lru list
      451      496                  and logically moves it to the most recently used position.
      452      497             ALTRETURN - Occurs if the lru list is empty, or 2 parameters weren't
      453      498                         passed into the routine.
      454      499        */
      455      500    1   XUM$MAKE_ITEM_MRU: ENTRY (P_WORKSPACE_, P_NODE_PTR$) ALTRET;

    500  0 000271   000000 700200 xent  XUM$MAKE_IT* TSX0  ! X66_AUTO_2
         0 000272   000016 000002                    ZERO    14,2
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:48   

      456      501
      457      502        %CHECK_FOR_TWO_PARAMETERS;
               503    1   IF ADDR(P_WORKSPACE_) = ADDR(NIL)

    503  0 000273   200003 236100                    LDQ     @P_WORKSPACE_,,AUTO
         0 000274   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000275   000301 600000 0                  TZE     s:507
         0 000276   200004 236100                    LDQ     @P_NODE_PTR$,,AUTO
         0 000277   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000300   000302 601000 0                  TNZ     s:511

               504    1      OR
               505    1      ADDR(P_NODE_PTR$) = ADDR(NIL) THEN
               506    2   DO;

               507    2     ALTRETURN;

    507  0 000301   000000 702200 xent               TSX2  ! X66_AALT

               508    2   END;
      458      510
      459      511    1   WS_PTR$ = VBASE(P_WORKSPACE_);

    511  0 000302   200003 470500                    LDP0    @P_WORKSPACE_,,AUTO
         0 000303   000001 236100                    LDQ     1,,PR0
         0 000304   200005 756100                    STQ     WS_PTR$,,AUTO

      460      512
      461      513        %CHECK_IF_NODE_IS_IN_LRU_LIST;
               514    1   IF (P_NODE_PTR$ = ADDR(NIL)

    514  0 000305   200004 471500                    LDP1    @P_NODE_PTR$,,AUTO
         0 000306   100000 236100                    LDQ     0,,PR1
         0 000307   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000310   000355 600000 0                  TZE     s:526
         0 000311   000001 236100                    LDQ     1,,PR0
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:49   
         0 000312   000002 036003                    ADLQ    2,DU
         0 000313   100000 116100                    CMPQ    0,,PR1
         0 000314   000316 600000 0                  TZE     s:514+9
         0 000315   000355 603000 0                  TRC     s:526
         0 000316   000000 236100                    LDQ     0,,PR0
         0 000317   000020 772000                    QRL     16
         0 000320   000001 473500                    LDP3    1,,PR0
         0 000321   000011 402007                    MPY     9,DL
         0 000322   300000 503506                    ABD     0,QL,PR3
         0 000323   200012 453500                    STP3    NUM_ITERATIONS+2,,AUTO
         0 000324   200012 236100                    LDQ     NUM_ITERATIONS+2,,AUTO
         0 000325   100000 116100                    CMPQ    0,,PR1
         0 000326   000355 602000 0                  TNC     s:526
         0 000327   000355 600000 0                  TZE     s:526
         0 000330   000001 236100                    LDQ     1,,PR0
         0 000331   000020 772000                    QRL     16
         0 000332   200013 756100                    STQ     NUM_ITERATIONS+3,,AUTO
         0 000333   100000 236100                    LDQ     0,,PR1
         0 000334   000020 772000                    QRL     16
         0 000335   200013 136100                    SBLQ    NUM_ITERATIONS+3,,AUTO
         0 000336   000010 506007                    DIV     8,DL
         0 000337   000044 733000                    LRS     36
         0 000340   000000 116003                    CMPQ    0,DU
         0 000341   000355 601000 0                  TNZ     s:526
         0 000342   200005 474500                    LDP4    WS_PTR$,,AUTO
         0 000343   400000 220100                    LDX0    0,,PR4
         0 000344   000001 475500                    LDP5    1,,PR0
         0 000345   500000 636510                    EPPR6   0,X0,PR5
         0 000346   200014 456500                    STP6    NUM_ITERATIONS+4,,AUTO
         0 000347   200014 236100                    LDQ     NUM_ITERATIONS+4,,AUTO
         0 000350   100000 116100                    CMPQ    0,,PR1
         0 000351   000356 600000 0                  TZE     s:530
         0 000352   100000 475500                    LDP5    0,,PR1
         0 000353   500001 720100                    LXL0    1,,PR5
         0 000354   000356 601000 0                  TNZ     s:530

               515    1      OR
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:50   
               516    1      P_NODE_PTR$ < PINCRW(VBASE(P_WORKSPACE_), %NODE_SIZE_IN_WORDS)
               517    1      OR
               518    1      P_NODE_PTR$ >= PINCRC( VBASE (P_WORKSPACE_), VBOUND (P_WORKSPACE_) )
               519    1      OR
               520    1      MOD (POFFC (P_NODE_PTR$, VBASE(P_WORKSPACE_)), %NUM_BYTES_IN_NODE) ~= 0
               521    1      OR
               522    1      (P_NODE_PTR$ ~= PINCRW(VBASE(P_WORKSPACE_), WORKSPACE.HEAD_OFFSET)
               523    1      AND
               524    1      P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0)) THEN
               525    2   DO;

               526    2      ALTRETURN; /*NODE IS NOT IN LRU LIST*/

    526  0 000355   000000 702200 xent               TSX2  ! X66_AALT

               527    2   END;
      462      529
      463      530    1   IF WORKSPACE.HEAD_OFFSET ~= WORKSPACE.TAIL_OFFSET THEN

    530  0 000356   400000 720100                    LXL0    0,,PR4
         0 000357   400000 100100                    CMPX0   0,,PR4
         0 000360   000452 600000 0                  TZE     s:564

      464      531    2   DO;

      465      532
      466      533    2   IF P_NODE_PTR$-> NODE.BACKWARD_OFFSET = 0 THEN

    533  0 000361   100000 475500                    LDP5    0,,PR1
         0 000362   500001 721100                    LXL1    1,,PR5
         0 000363   000416 601000 0                  TNZ     s:548

      467      534    3   DO; /*HEAD NODE*/

      468      535          %REMOVE_HEAD_NODE;
               536    3  WORKSPACE.HEAD_OFFSET = PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.FORWARD_OFFSET;

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:51   
    536  0 000364   400000 222100                    LDX2    0,,PR4
         0 000365   400001 223112                    LDX3    1,X2,PR4
         0 000366   400000 743100                    STX3    0,,PR4

               537    3   PINCRW(WS_PTR$,WORKSPACE.HEAD_OFFSET)-> NODE.BACKWARD_OFFSET = 0;

    537  0 000367   000000 221003                    LDX1    0,DU
         0 000370   400001 441113                    SXL1    1,X3,PR4

      469      539          %MAKE_NODE_TAIL_NODE;
               540    3   PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.FORWARD_OFFSET =

    540  0 000371   400000 720100                    LXL0    0,,PR4
         0 000372   200005 235100                    LDA     WS_PTR$,,AUTO
         0 000373   000022 771000                    ARL     18
         0 000374   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000375   100000 236100                    LDQ     0,,PR1
         0 000376   000022 772000                    QRL     18
         0 000377   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000400   000000 622006                    EAX2    0,QL
         0 000401   400001 742110                    STX2    1,X0,PR4

               541    3         POFFW(P_NODE_PTR$, WS_PTR$);
               542    3   P_NODE_PTR$->NODE.BACKWARD_OFFSET = WORKSPACE.TAIL_OFFSET;

    542  0 000402   100000 473500                    LDP3    0,,PR1
         0 000403   400000 720100                    LXL0    0,,PR4
         0 000404   300001 440100                    SXL0    1,,PR3

               543    3   P_NODE_PTR$->NODE.FORWARD_OFFSET = 0;

    543  0 000405   100000 473500                    LDP3    0,,PR1
         0 000406   300001 741100                    STX1    1,,PR3

               544    3   WORKSPACE.TAIL_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);

    544  0 000407   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:52   
         0 000410   100000 236100                    LDQ     0,,PR1
         0 000411   000022 772000                    QRL     18
         0 000412   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000413   000000 620006                    EAX0    0,QL
         0 000414   400000 440100                    SXL0    0,,PR4

      470      546    3   END;

    546  0 000415   000452 710000 0                  TRA     s:564

      471      547    2   ELSE
      472      548    2   IF P_NODE_PTR$->NODE.FORWARD_OFFSET ~= 0 THEN

    548  0 000416   500001 222100                    LDX2    1,,PR5
         0 000417   000452 600000 0                  TZE     s:564

      473      549    3   DO; /*NODE BETWEEN TWO OTHER NODES*/

      474      550          %REMOVE_INTERIOR_NODE;
               551    3   PINCRW(WS_PTR$, P_NODE_PTR$->NODE.BACKWARD_OFFSET)->NODE.FORWARD_OFFSET =
               551            P_NODE_PTR$->NODE.FORWARD_OFFSET;

    551  0 000420   400001 742111                    STX2    1,X1,PR4

               552    3   PINCRW(WS_PTR$, P_NODE_PTR$->NODE.FORWARD_OFFSET)->NODE.BACKWARD_OFFSET =
               552            P_NODE_PTR$->NODE.BACKWARD_OFFSET;

    552  0 000421   100000 473500                    LDP3    0,,PR1
         0 000422   300001 220100                    LDX0    1,,PR3
         0 000423   300001 721100                    LXL1    1,,PR3
         0 000424   400001 441110                    SXL1    1,X0,PR4

      475      554          %MAKE_NODE_TAIL_NODE;
               555    3   PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.FORWARD_OFFSET =

    555  0 000425   400000 720100                    LXL0    0,,PR4
         0 000426   200005 235100                    LDA     WS_PTR$,,AUTO
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:53   
         0 000427   000022 771000                    ARL     18
         0 000430   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000431   100000 236100                    LDQ     0,,PR1
         0 000432   000022 772000                    QRL     18
         0 000433   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000434   000000 621006                    EAX1    0,QL
         0 000435   400001 741110                    STX1    1,X0,PR4

               556    3         POFFW(P_NODE_PTR$, WS_PTR$);
               557    3   P_NODE_PTR$->NODE.BACKWARD_OFFSET = WORKSPACE.TAIL_OFFSET;

    557  0 000436   100000 473500                    LDP3    0,,PR1
         0 000437   400000 720100                    LXL0    0,,PR4
         0 000440   300001 440100                    SXL0    1,,PR3

               558    3   P_NODE_PTR$->NODE.FORWARD_OFFSET = 0;

    558  0 000441   100000 473500                    LDP3    0,,PR1
         0 000442   000000 220003                    LDX0    0,DU
         0 000443   300001 740100                    STX0    1,,PR3

               559    3   WORKSPACE.TAIL_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);

    559  0 000444   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000445   100000 236100                    LDQ     0,,PR1
         0 000446   000022 772000                    QRL     18
         0 000447   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000450   000000 621006                    EAX1    0,QL
         0 000451   400000 441100                    SXL1    0,,PR4

      476      561    3   END;

      477      562
      478      563    2   END;

      479      564    1   RETURN;

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:54   
    564  0 000452   000000 702200 xent               TSX2  ! X66_ARET

      480      565
      481      566        /*D*
      482      567             NAME: XUM$MAKE_ITEM_LRU
      483      568             PURPOSE:
      484      569                  This routine will place any item referenced through the pointer and
      485      570                  make it the least recently used item in the list.  A subsequent call
      486      571                  to GET_LRU will return this same pointer.
      487      572             CALL:
      488      573                  CALL XUM$MAKE_ITEM_LRU (   ITEM_PTR,WORKSPACE) ALTRET;
      489      574             INPUT:
      490      575                  ITEM_PTR -A pointer which references a particular item in the lru
      491      576                  list, (this is also the pointer to the users one word data area) and
      492      577                  makes this item the least recently used.
      493      578
      494      579                  WORKSPACE -Same as defined for INIT routine.
      495      580             DESCRIPTION:
      496      581                  Takes any item in the lru list referenced by ITEM_PTR and moves it to
      497      582                  the least recently used position.
      498      583             ALTRETURN - Occurs if the lru list is empty, or
      499      584                         if there aren't 2 parameters passed into the routine.
      500      585        */
      501      586    1   XUM$MAKE_ITEM_LRU: ENTRY (P_WORKSPACE_, P_NODE_PTR$) ALTRET;

    586  0 000453   000000 700200 xent  XUM$MAKE_IT* TSX0  ! X66_AUTO_2
         0 000454   000016 000002                    ZERO    14,2

      502      587
      503      588        %CHECK_FOR_TWO_PARAMETERS;
               589    1   IF ADDR(P_WORKSPACE_) = ADDR(NIL)

    589  0 000455   200003 236100                    LDQ     @P_WORKSPACE_,,AUTO
         0 000456   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000457   000463 600000 0                  TZE     s:593
         0 000460   200004 236100                    LDQ     @P_NODE_PTR$,,AUTO
         0 000461   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:55   
         0 000462   000464 601000 0                  TNZ     s:597

               590    1      OR
               591    1      ADDR(P_NODE_PTR$) = ADDR(NIL) THEN
               592    2   DO;

               593    2     ALTRETURN;

    593  0 000463   000000 702200 xent               TSX2  ! X66_AALT

               594    2   END;
      504      596
      505      597    1   WS_PTR$ = VBASE(P_WORKSPACE_);

    597  0 000464   200003 470500                    LDP0    @P_WORKSPACE_,,AUTO
         0 000465   000001 236100                    LDQ     1,,PR0
         0 000466   200005 756100                    STQ     WS_PTR$,,AUTO

      506      598
      507      599        %CHECK_IF_NODE_IS_IN_LRU_LIST;
               600    1   IF (P_NODE_PTR$ = ADDR(NIL)

    600  0 000467   200004 471500                    LDP1    @P_NODE_PTR$,,AUTO
         0 000470   100000 236100                    LDQ     0,,PR1
         0 000471   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000472   000537 600000 0                  TZE     s:612
         0 000473   000001 236100                    LDQ     1,,PR0
         0 000474   000002 036003                    ADLQ    2,DU
         0 000475   100000 116100                    CMPQ    0,,PR1
         0 000476   000500 600000 0                  TZE     s:600+9
         0 000477   000537 603000 0                  TRC     s:612
         0 000500   000000 236100                    LDQ     0,,PR0
         0 000501   000020 772000                    QRL     16
         0 000502   000001 473500                    LDP3    1,,PR0
         0 000503   000011 402007                    MPY     9,DL
         0 000504   300000 503506                    ABD     0,QL,PR3
         0 000505   200012 453500                    STP3    NUM_ITERATIONS+2,,AUTO
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:56   
         0 000506   200012 236100                    LDQ     NUM_ITERATIONS+2,,AUTO
         0 000507   100000 116100                    CMPQ    0,,PR1
         0 000510   000537 602000 0                  TNC     s:612
         0 000511   000537 600000 0                  TZE     s:612
         0 000512   000001 236100                    LDQ     1,,PR0
         0 000513   000020 772000                    QRL     16
         0 000514   200013 756100                    STQ     NUM_ITERATIONS+3,,AUTO
         0 000515   100000 236100                    LDQ     0,,PR1
         0 000516   000020 772000                    QRL     16
         0 000517   200013 136100                    SBLQ    NUM_ITERATIONS+3,,AUTO
         0 000520   000010 506007                    DIV     8,DL
         0 000521   000044 733000                    LRS     36
         0 000522   000000 116003                    CMPQ    0,DU
         0 000523   000537 601000 0                  TNZ     s:612
         0 000524   200005 474500                    LDP4    WS_PTR$,,AUTO
         0 000525   400000 220100                    LDX0    0,,PR4
         0 000526   000001 475500                    LDP5    1,,PR0
         0 000527   500000 636510                    EPPR6   0,X0,PR5
         0 000530   200014 456500                    STP6    NUM_ITERATIONS+4,,AUTO
         0 000531   200014 236100                    LDQ     NUM_ITERATIONS+4,,AUTO
         0 000532   100000 116100                    CMPQ    0,,PR1
         0 000533   000540 600000 0                  TZE     s:615
         0 000534   100000 475500                    LDP5    0,,PR1
         0 000535   500001 720100                    LXL0    1,,PR5
         0 000536   000540 601000 0                  TNZ     s:615

               601    1      OR
               602    1      P_NODE_PTR$ < PINCRW(VBASE(P_WORKSPACE_), %NODE_SIZE_IN_WORDS)
               603    1      OR
               604    1      P_NODE_PTR$ >= PINCRC( VBASE (P_WORKSPACE_), VBOUND (P_WORKSPACE_) )
               605    1      OR
               606    1      MOD (POFFC (P_NODE_PTR$, VBASE(P_WORKSPACE_)), %NUM_BYTES_IN_NODE) ~= 0
               607    1      OR
               608    1      (P_NODE_PTR$ ~= PINCRW(VBASE(P_WORKSPACE_), WORKSPACE.HEAD_OFFSET)
               609    1      AND
               610    1      P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0)) THEN
               611    2   DO;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:57   

               612    2      ALTRETURN; /*NODE IS NOT IN LRU LIST*/

    612  0 000537   000000 702200 xent               TSX2  ! X66_AALT

               613    2   END;
      508      615    1   IF WORKSPACE.HEAD_OFFSET ~= WORKSPACE.TAIL_OFFSET THEN

    615  0 000540   400000 720100                    LXL0    0,,PR4
         0 000541   400000 100100                    CMPX0   0,,PR4
         0 000542   000633 600000 0                  TZE     s:649

      509      616    2   DO;

      510      617
      511      618    2   IF P_NODE_PTR$->NODE.FORWARD_OFFSET = 0 THEN

    618  0 000543   100000 475500                    LDP5    0,,PR1
         0 000544   500001 221100                    LDX1    1,,PR5
         0 000545   000577 601000 0                  TNZ     s:633

      512      619    3   DO; /*TAIL NODE*/

      513      620          %REMOVE_TAIL_NODE;
               621    3  WORKSPACE.TAIL_OFFSET = PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.BACKWARD_OFFSET
               621            ;

    621  0 000546   400001 722110                    LXL2    1,X0,PR4
         0 000547   400000 442100                    SXL2    0,,PR4

               622    3   PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.FORWARD_OFFSET = 0;

    622  0 000550   000000 220003                    LDX0    0,DU
         0 000551   400001 740112                    STX0    1,X2,PR4

      514      624          %MAKE_NODE_HEAD_NODE;
               625    3   P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.HEAD_OFFSET;
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:58   

    625  0 000552   100000 473500                    LDP3    0,,PR1
         0 000553   400000 221100                    LDX1    0,,PR4
         0 000554   300001 741100                    STX1    1,,PR3

               626    3   P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;

    626  0 000555   100000 473500                    LDP3    0,,PR1
         0 000556   300001 440100                    SXL0    1,,PR3

               627    3   PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.BACKWARD_OFFSET =

    627  0 000557   400000 221100                    LDX1    0,,PR4
         0 000560   200005 235100                    LDA     WS_PTR$,,AUTO
         0 000561   000022 771000                    ARL     18
         0 000562   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000563   100000 236100                    LDQ     0,,PR1
         0 000564   000022 772000                    QRL     18
         0 000565   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000566   000000 622006                    EAX2    0,QL
         0 000567   400001 442111                    SXL2    1,X1,PR4

               628    3          POFFW(P_NODE_PTR$, WS_PTR$);
               629    3   WORKSPACE.HEAD_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);

    629  0 000570   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000571   100000 236100                    LDQ     0,,PR1
         0 000572   000022 772000                    QRL     18
         0 000573   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000574   000000 621006                    EAX1    0,QL
         0 000575   400000 741100                    STX1    0,,PR4

      515      631    3   END;

    631  0 000576   000633 710000 0                  TRA     s:649

      516      632    2   ELSE
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:59   
      517      633    2   IF P_NODE_PTR$->NODE.BACKWARD_OFFSET ~= 0 THEN

    633  0 000577   500001 722100                    LXL2    1,,PR5
         0 000600   000633 600000 0                  TZE     s:649

      518      634    3   DO;

      519      635          %REMOVE_INTERIOR_NODE;
               636    3   PINCRW(WS_PTR$, P_NODE_PTR$->NODE.BACKWARD_OFFSET)->NODE.FORWARD_OFFSET =
               636            P_NODE_PTR$->NODE.FORWARD_OFFSET;

    636  0 000601   400001 741112                    STX1    1,X2,PR4

               637    3   PINCRW(WS_PTR$, P_NODE_PTR$->NODE.FORWARD_OFFSET)->NODE.BACKWARD_OFFSET =
               637            P_NODE_PTR$->NODE.BACKWARD_OFFSET;

    637  0 000602   100000 473500                    LDP3    0,,PR1
         0 000603   300001 220100                    LDX0    1,,PR3
         0 000604   300001 721100                    LXL1    1,,PR3
         0 000605   400001 441110                    SXL1    1,X0,PR4

      520      639          %MAKE_NODE_HEAD_NODE;
               640    3   P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.HEAD_OFFSET;

    640  0 000606   100000 473500                    LDP3    0,,PR1
         0 000607   400000 220100                    LDX0    0,,PR4
         0 000610   300001 740100                    STX0    1,,PR3

               641    3   P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;

    641  0 000611   100000 473500                    LDP3    0,,PR1
         0 000612   000000 220003                    LDX0    0,DU
         0 000613   300001 440100                    SXL0    1,,PR3

               642    3   PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.BACKWARD_OFFSET =

    642  0 000614   400000 221100                    LDX1    0,,PR4
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:60   
         0 000615   200005 235100                    LDA     WS_PTR$,,AUTO
         0 000616   000022 771000                    ARL     18
         0 000617   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000620   100000 236100                    LDQ     0,,PR1
         0 000621   000022 772000                    QRL     18
         0 000622   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000623   000000 622006                    EAX2    0,QL
         0 000624   400001 442111                    SXL2    1,X1,PR4

               643    3          POFFW(P_NODE_PTR$, WS_PTR$);
               644    3   WORKSPACE.HEAD_OFFSET = POFFW(P_NODE_PTR$, WS_PTR$);

    644  0 000625   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000626   100000 236100                    LDQ     0,,PR1
         0 000627   000022 772000                    QRL     18
         0 000630   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000631   000000 621006                    EAX1    0,QL
         0 000632   400000 741100                    STX1    0,,PR4

      521      646    3   END;

      522      647    2   END;

      523      648
      524      649    1   RETURN;

    649  0 000633   000000 702200 xent               TSX2  ! X66_ARET

      525      650
      526      651        /*D*
      527      652             NAME: XUM$DELETE_ITEM
      528      653             PURPOSE:
      529      654                  To delete an item from the lru list.
      530      655             CALL:
      531      656                  CALL XUM$DELETE_ITEM (   ITEM_PTR,WORKSPACE) ALTRET;
      532      657             INPUT:
      533      658                  ITEM_PTR -This pointer references the word of user storage to be
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:61   
      534      659                  deleted.  It is the same pointer as returned from CREATE, for when
      535      660                  this item was created.  On return, this pointer will be the ADDR(NIL).
      536      661
      537      662                  WORKSPACE -Same as defined for INIT routine.
      538      663             DESCRIPTION:
      539      664                  Takes any item in the lru list referenced by ITEM_PTR and deletes the
      540      665                  occurrence of it.
      541      666             ALTRETURN - Occurs if the item to be deleted isn't in the lru list.
      542      667        */
      543      668    1   XUM$DELETE_ITEM: ENTRY (P_WORKSPACE_, P_NODE_PTR$) ALTRET;

    668  0 000634   000000 700200 xent  XUM$DELETE_* TSX0  ! X66_AUTO_2
         0 000635   000016 000002                    ZERO    14,2

      544      669
      545      670        %CHECK_FOR_TWO_PARAMETERS;
               671    1   IF ADDR(P_WORKSPACE_) = ADDR(NIL)

    671  0 000636   200003 236100                    LDQ     @P_WORKSPACE_,,AUTO
         0 000637   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000640   000644 600000 0                  TZE     s:675
         0 000641   200004 236100                    LDQ     @P_NODE_PTR$,,AUTO
         0 000642   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000643   000645 601000 0                  TNZ     s:679

               672    1      OR
               673    1      ADDR(P_NODE_PTR$) = ADDR(NIL) THEN
               674    2   DO;

               675    2     ALTRETURN;

    675  0 000644   000000 702200 xent               TSX2  ! X66_AALT

               676    2   END;
      546      678
      547      679    1   WS_PTR$ = VBASE(P_WORKSPACE_);

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:62   
    679  0 000645   200003 470500                    LDP0    @P_WORKSPACE_,,AUTO
         0 000646   000001 236100                    LDQ     1,,PR0
         0 000647   200005 756100                    STQ     WS_PTR$,,AUTO

      548      680
      549      681        %CHECK_IF_NODE_IS_IN_LRU_LIST;
               682    1   IF (P_NODE_PTR$ = ADDR(NIL)

    682  0 000650   200004 471500                    LDP1    @P_NODE_PTR$,,AUTO
         0 000651   100000 236100                    LDQ     0,,PR1
         0 000652   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000653   000720 600000 0                  TZE     s:694
         0 000654   000001 236100                    LDQ     1,,PR0
         0 000655   000002 036003                    ADLQ    2,DU
         0 000656   100000 116100                    CMPQ    0,,PR1
         0 000657   000661 600000 0                  TZE     s:682+9
         0 000660   000720 603000 0                  TRC     s:694
         0 000661   000000 236100                    LDQ     0,,PR0
         0 000662   000020 772000                    QRL     16
         0 000663   000001 473500                    LDP3    1,,PR0
         0 000664   000011 402007                    MPY     9,DL
         0 000665   300000 503506                    ABD     0,QL,PR3
         0 000666   200012 453500                    STP3    NUM_ITERATIONS+2,,AUTO
         0 000667   200012 236100                    LDQ     NUM_ITERATIONS+2,,AUTO
         0 000670   100000 116100                    CMPQ    0,,PR1
         0 000671   000720 602000 0                  TNC     s:694
         0 000672   000720 600000 0                  TZE     s:694
         0 000673   000001 236100                    LDQ     1,,PR0
         0 000674   000020 772000                    QRL     16
         0 000675   200013 756100                    STQ     NUM_ITERATIONS+3,,AUTO
         0 000676   100000 236100                    LDQ     0,,PR1
         0 000677   000020 772000                    QRL     16
         0 000700   200013 136100                    SBLQ    NUM_ITERATIONS+3,,AUTO
         0 000701   000010 506007                    DIV     8,DL
         0 000702   000044 733000                    LRS     36
         0 000703   000000 116003                    CMPQ    0,DU
         0 000704   000720 601000 0                  TNZ     s:694
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:63   
         0 000705   200005 474500                    LDP4    WS_PTR$,,AUTO
         0 000706   400000 220100                    LDX0    0,,PR4
         0 000707   000001 475500                    LDP5    1,,PR0
         0 000710   500000 636510                    EPPR6   0,X0,PR5
         0 000711   200014 456500                    STP6    NUM_ITERATIONS+4,,AUTO
         0 000712   200014 236100                    LDQ     NUM_ITERATIONS+4,,AUTO
         0 000713   100000 116100                    CMPQ    0,,PR1
         0 000714   000721 600000 0                  TZE     s:699
         0 000715   100000 475500                    LDP5    0,,PR1
         0 000716   500001 720100                    LXL0    1,,PR5
         0 000717   000721 601000 0                  TNZ     s:699

               683    1      OR
               684    1      P_NODE_PTR$ < PINCRW(VBASE(P_WORKSPACE_), %NODE_SIZE_IN_WORDS)
               685    1      OR
               686    1      P_NODE_PTR$ >= PINCRC( VBASE (P_WORKSPACE_), VBOUND (P_WORKSPACE_) )
               687    1      OR
               688    1      MOD (POFFC (P_NODE_PTR$, VBASE(P_WORKSPACE_)), %NUM_BYTES_IN_NODE) ~= 0
               689    1      OR
               690    1      (P_NODE_PTR$ ~= PINCRW(VBASE(P_WORKSPACE_), WORKSPACE.HEAD_OFFSET)
               691    1      AND
               692    1      P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0)) THEN
               693    2   DO;

               694    2      ALTRETURN; /*NODE IS NOT IN LRU LIST*/

    694  0 000720   000000 702200 xent               TSX2  ! X66_AALT

               695    2   END;
      550      697
      551      698        /*FOR DELETE WHEN THERE IS ONLY ONE NODE REMAINING*/
      552      699    1   IF WORKSPACE.HEAD_OFFSET = WORKSPACE.TAIL_OFFSET THEN

    699  0 000721   400000 720100                    LXL0    0,,PR4
         0 000722   400000 100100                    CMPX0   0,,PR4
         0 000723   000747 601000 0                  TNZ     s:712

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:64   
      553      700    2   DO;

      554      701          %RETURN_NODE_TO_FREE_CHAIN;
               702    2   P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.FREE_NODE_OFFSET;

    702  0 000724   100000 475500                    LDP5    0,,PR1
         0 000725   400001 221100                    LDX1    1,,PR4
         0 000726   500001 741100                    STX1    1,,PR5

               703    2   WORKSPACE.FREE_NODE_OFFSET =POFFW(P_NODE_PTR$, WS_PTR$);

    703  0 000727   200005 235100                    LDA     WS_PTR$,,AUTO
         0 000730   000022 771000                    ARL     18
         0 000731   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000732   100000 236100                    LDQ     0,,PR1
         0 000733   000022 772000                    QRL     18
         0 000734   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000735   000000 620006                    EAX0    0,QL
         0 000736   400001 740100                    STX0    1,,PR4

               704    2   P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;

    704  0 000737   100000 473500                    LDP3    0,,PR1
         0 000740   000000 221003                    LDX1    0,DU
         0 000741   300001 441100                    SXL1    1,,PR3

               705    2   P_NODE_PTR$ = ADDR(NIL);

    705  0 000742   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000743   100000 756100                    STQ     0,,PR1

      555      707    2     WORKSPACE.HEAD_OFFSET = 0;

    707  0 000744   400000 741100                    STX1    0,,PR4

      556      708    2     WORKSPACE.TAIL_OFFSET = 0;

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:65   
    708  0 000745   400000 441100                    SXL1    0,,PR4

      557      709    2     RETURN;

    709  0 000746   000000 702200 xent               TSX2  ! X66_ARET

      558      710    2   END;
      559      711
      560      712    1   IF P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0 THEN

    712  0 000747   100000 475500                    LDP5    0,,PR1
         0 000750   500001 721100                    LXL1    1,,PR5
         0 000751   000777 601000 0                  TNZ     s:726

      561      713    2   DO; /*HEAD NODE*/

      562      714          %REMOVE_HEAD_NODE;
               715    2  WORKSPACE.HEAD_OFFSET = PINCRW(WS_PTR$, WORKSPACE.HEAD_OFFSET)->NODE.FORWARD_OFFSET;

    715  0 000752   400000 222100                    LDX2    0,,PR4
         0 000753   400001 223112                    LDX3    1,X2,PR4
         0 000754   400000 743100                    STX3    0,,PR4

               716    2   PINCRW(WS_PTR$,WORKSPACE.HEAD_OFFSET)-> NODE.BACKWARD_OFFSET = 0;

    716  0 000755   000000 221003                    LDX1    0,DU
         0 000756   400001 441113                    SXL1    1,X3,PR4

      563      718          %RETURN_NODE_TO_FREE_CHAIN;
               719    2   P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.FREE_NODE_OFFSET;

    719  0 000757   100000 473500                    LDP3    0,,PR1
         0 000760   400001 220100                    LDX0    1,,PR4
         0 000761   300001 740100                    STX0    1,,PR3

               720    2   WORKSPACE.FREE_NODE_OFFSET =POFFW(P_NODE_PTR$, WS_PTR$);

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:66   
    720  0 000762   200005 235100                    LDA     WS_PTR$,,AUTO
         0 000763   000022 771000                    ARL     18
         0 000764   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 000765   100000 236100                    LDQ     0,,PR1
         0 000766   000022 772000                    QRL     18
         0 000767   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 000770   000000 620006                    EAX0    0,QL
         0 000771   400001 740100                    STX0    1,,PR4

               721    2   P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;

    721  0 000772   100000 473500                    LDP3    0,,PR1
         0 000773   300001 441100                    SXL1    1,,PR3

               722    2   P_NODE_PTR$ = ADDR(NIL);

    722  0 000774   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000775   100000 756100                    STQ     0,,PR1

      564      724    2   END;

    724  0 000776   001052 710000 0                  TRA     s:753

      565      725    1   ELSE
      566      726    1   IF P_NODE_PTR$->NODE.FORWARD_OFFSET ~= 0 THEN

    726  0 000777   500001 222100                    LDX2    1,,PR5
         0 001000   001027 600000 0                  TZE     s:742

      567      727    2   DO; /*NODE BETWEEN TWO OTHER NODES*/

      568      728          %REMOVE_INTERIOR_NODE;
               729    2   PINCRW(WS_PTR$, P_NODE_PTR$->NODE.BACKWARD_OFFSET)->NODE.FORWARD_OFFSET =
               729            P_NODE_PTR$->NODE.FORWARD_OFFSET;

    729  0 001001   400001 742111                    STX2    1,X1,PR4

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:67   
               730    2   PINCRW(WS_PTR$, P_NODE_PTR$->NODE.FORWARD_OFFSET)->NODE.BACKWARD_OFFSET =
               730            P_NODE_PTR$->NODE.BACKWARD_OFFSET;

    730  0 001002   100000 473500                    LDP3    0,,PR1
         0 001003   300001 220100                    LDX0    1,,PR3
         0 001004   300001 721100                    LXL1    1,,PR3
         0 001005   400001 441110                    SXL1    1,X0,PR4

      569      732          %RETURN_NODE_TO_FREE_CHAIN;
               733    2   P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.FREE_NODE_OFFSET;

    733  0 001006   100000 473500                    LDP3    0,,PR1
         0 001007   400001 220100                    LDX0    1,,PR4
         0 001010   300001 740100                    STX0    1,,PR3

               734    2   WORKSPACE.FREE_NODE_OFFSET =POFFW(P_NODE_PTR$, WS_PTR$);

    734  0 001011   200005 235100                    LDA     WS_PTR$,,AUTO
         0 001012   000022 771000                    ARL     18
         0 001013   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 001014   100000 236100                    LDQ     0,,PR1
         0 001015   000022 772000                    QRL     18
         0 001016   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 001017   000000 620006                    EAX0    0,QL
         0 001020   400001 740100                    STX0    1,,PR4

               735    2   P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;

    735  0 001021   100000 473500                    LDP3    0,,PR1
         0 001022   000000 221003                    LDX1    0,DU
         0 001023   300001 441100                    SXL1    1,,PR3

               736    2   P_NODE_PTR$ = ADDR(NIL);

    736  0 001024   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 001025   100000 756100                    STQ     0,,PR1

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:68   
      570      738    2   END;

    738  0 001026   001052 710000 0                  TRA     s:753

      571      739    1   ELSE
      572      740    2   DO; /*TAIL NODE*/

      573      741          %REMOVE_TAIL_NODE;
               742    2  WORKSPACE.TAIL_OFFSET = PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.BACKWARD_OFFSET
               742            ;

    742  0 001027   400001 723110                    LXL3    1,X0,PR4
         0 001030   400000 443100                    SXL3    0,,PR4

               743    2   PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET)->NODE.FORWARD_OFFSET = 0;

    743  0 001031   000000 220003                    LDX0    0,DU
         0 001032   400001 740113                    STX0    1,X3,PR4

      574      745          %RETURN_NODE_TO_FREE_CHAIN;
               746    2   P_NODE_PTR$->NODE.FORWARD_OFFSET = WORKSPACE.FREE_NODE_OFFSET;

    746  0 001033   100000 473500                    LDP3    0,,PR1
         0 001034   400001 221100                    LDX1    1,,PR4
         0 001035   300001 741100                    STX1    1,,PR3

               747    2   WORKSPACE.FREE_NODE_OFFSET =POFFW(P_NODE_PTR$, WS_PTR$);

    747  0 001036   200005 235100                    LDA     WS_PTR$,,AUTO
         0 001037   000022 771000                    ARL     18
         0 001040   200012 755100                    STA     NUM_ITERATIONS+2,,AUTO
         0 001041   100000 236100                    LDQ     0,,PR1
         0 001042   000022 772000                    QRL     18
         0 001043   200012 136100                    SBLQ    NUM_ITERATIONS+2,,AUTO
         0 001044   000000 621006                    EAX1    0,QL
         0 001045   400001 741100                    STX1    1,,PR4

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:69   
               748    2   P_NODE_PTR$->NODE.BACKWARD_OFFSET = 0;

    748  0 001046   100000 473500                    LDP3    0,,PR1
         0 001047   300001 440100                    SXL0    1,,PR3

               749    2   P_NODE_PTR$ = ADDR(NIL);

    749  0 001050   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 001051   100000 756100                    STQ     0,,PR1

      575      751    2   END;

      576      752
      577      753    1   RETURN;

    753  0 001052   000000 702200 xent               TSX2  ! X66_ARET

      578      754
      579      755
      580      756        /*D*
      581      757             NAME: XUM$GET_MRU_ITEM
      582      758             PURPOSE:
      583      759                  This routine returns the most recently used item in the lru list.
      584      760             CALL:
      585      761                  CALL XUM$GET_MRU_ITEM (ITEM_PTR,   WORKSPACE) ALTRET;
      586      762             OUTPUT:
      587      763                  ITEM_PTR -This is a pointer to the one word of user storage, in the
      588      764                  lru list, which was most recently used.
      589      765             INPUT:
      590      766                  WORKSPACE -Same as defined for INIT routine.
      591      767             DESCRIPTION:
      592      768                  Returns the most recently used word.
      593      769             ALTRETURN - Occurs if the lru list is empty,
      594      770                         if there aren't 2 parameters passed into the routine.
      595      771        */
      596      772    1   XUM$GET_MRU_ITEM: ENTRY (P_WORKSPACE_, P_NODE_PTR$) ALTRET;

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:70   
    772  0 001053   000000 700200 xent  XUM$GET_MRU* TSX0  ! X66_AUTO_2
         0 001054   000016 000002                    ZERO    14,2

      597      773
      598      774        %CHECK_FOR_TWO_PARAMETERS;
               775    1   IF ADDR(P_WORKSPACE_) = ADDR(NIL)

    775  0 001055   200003 236100                    LDQ     @P_WORKSPACE_,,AUTO
         0 001056   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 001057   001063 600000 0                  TZE     s:779
         0 001060   200004 236100                    LDQ     @P_NODE_PTR$,,AUTO
         0 001061   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 001062   001064 601000 0                  TNZ     s:783

               776    1      OR
               777    1      ADDR(P_NODE_PTR$) = ADDR(NIL) THEN
               778    2   DO;

               779    2     ALTRETURN;

    779  0 001063   000000 702200 xent               TSX2  ! X66_AALT

               780    2   END;
      599      782
      600      783    1   WS_PTR$ = VBASE(P_WORKSPACE_);

    783  0 001064   200003 470500                    LDP0    @P_WORKSPACE_,,AUTO
         0 001065   000001 236100                    LDQ     1,,PR0
         0 001066   200005 756100                    STQ     WS_PTR$,,AUTO

      601      784
      602      785        %CHECK_FOR_EMPTY_LRU_LIST;
               786    1   IF WORKSPACE.HEAD_OFFSET = 0 THEN

    786  0 001067   200005 471500                    LDP1    WS_PTR$,,AUTO
         0 001070   100000 220100                    LDX0    0,,PR1
         0 001071   001073 601000 0                  TNZ     s:792
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:71   

               787    2   DO;

               788    2     ALTRETURN;

    788  0 001072   000000 702200 xent               TSX2  ! X66_AALT

               789    2   END;
      603      791
      604      792    1   P_NODE_PTR$ = PINCRW(WS_PTR$, WORKSPACE.TAIL_OFFSET);

    792  0 001073   100000 721100                    LXL1    0,,PR1
         0 001074   000000 636011                    EAQ     0,X1
         0 001075   200005 036100                    ADLQ    WS_PTR$,,AUTO
         0 001076   200004 473500                    LDP3    @P_NODE_PTR$,,AUTO
         0 001077   300000 756100                    STQ     0,,PR3

      605      793
      606      794    1   RETURN;

    794  0 001100   000000 702200 xent               TSX2  ! X66_ARET
      607      795
      608      796    1   END XUM$LRU_ROUTINES;
      609      797

PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:72   
      No diagnostics issued in procedure XUM$LRU_ROUTINES.
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:73   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @P_NODE_PTR$               3-0-0/w PTR         r     1 @P_WORKSPACE_
     7-0-0/w UBIN        r     1 I                         10-0-0/w UBIN        r     1 NUM_ITERATIONS
    *0-0-0/w PTR         r     1 P_NODE_PTR$               *0-0-0/d VECT        r     1 P_WORKSPACE_
     6-0-0/w PTR         r     1 TEMP_PTR$                  5-0-0/w PTR         r     1 WS_PTR$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 NODE                       0-0-0/w STRC(72)    r     1 WORKSPACE


   Procedure XUM$LRU_ROUTINES requires 577 words for executable code.
   Procedure XUM$LRU_ROUTINES requires 14 words of local(AUTO) storage.

    No errors detected in file XUM$LRU.:E05TSI    .
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:74   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:75   
          MINI XREF LISTING

I
       289**DCL       347<<DOINDEX
NODE.BACKWARD_OFFSET
       277**DCL       349<<ASSIGN    354<<ASSIGN    396<<ASSIGN    408<<ASSIGN    415<<ASSIGN    416<<ASSIGN
       466<<ASSIGN    471<<ASSIGN    514>>IF        533>>IF        537<<ASSIGN    542<<ASSIGN    551>>ASSIGN
       552<<ASSIGN    552>>ASSIGN    557<<ASSIGN    600>>IF        621>>ASSIGN    626<<ASSIGN    627<<ASSIGN
       633>>IF        636>>ASSIGN    637<<ASSIGN    637>>ASSIGN    641<<ASSIGN    642<<ASSIGN    682>>IF
       704<<ASSIGN    712>>IF        716<<ASSIGN    721<<ASSIGN    729>>ASSIGN    730<<ASSIGN    730>>ASSIGN
       735<<ASSIGN    742>>ASSIGN    748<<ASSIGN
NODE.FORWARD_OFFSET
       276**DCL       348<<ASSIGN    353<<ASSIGN    395>>ASSIGN    407<<ASSIGN    414<<ASSIGN    465>>ASSIGN
       469<<ASSIGN    472<<ASSIGN    536>>ASSIGN    540<<ASSIGN    543<<ASSIGN    548>>IF        551<<ASSIGN
       551>>ASSIGN    552>>ASSIGN    555<<ASSIGN    558<<ASSIGN    618>>IF        622<<ASSIGN    625<<ASSIGN
       636<<ASSIGN    636>>ASSIGN    637>>ASSIGN    640<<ASSIGN    702<<ASSIGN    715>>ASSIGN    719<<ASSIGN
       726>>IF        729<<ASSIGN    729>>ASSIGN    730>>ASSIGN    733<<ASSIGN    743<<ASSIGN    746<<ASSIGN
NUM_ITERATIONS
       290**DCL       345<<ASSIGN    347>>DOINDEX
P_NODE_PTR$
       285**DCL       273--PROC      379--ENTRY     382--IF        394<<ASSIGN    395>>ASSIGN    405>>ASSIGN
       406>>ASSIGN    407>>ASSIGN    408>>ASSIGN    414>>ASSIGN    415>>ASSIGN    416>>ASSIGN    418>>ASSIGN
       442--ENTRY     445--IF        463<<ASSIGN    469>>ASSIGN    471>>ASSIGN    472>>ASSIGN    473>>ASSIGN
       478<<ASSIGN    500--ENTRY     503--IF        514>>IF        514>>IF        514>>IF        514>>IF
       514>>IF        514>>IF        533>>IF        540>>ASSIGN    542>>ASSIGN    543>>ASSIGN    544>>ASSIGN
       548>>IF        551>>ASSIGN    551>>ASSIGN    552>>ASSIGN    552>>ASSIGN    555>>ASSIGN    557>>ASSIGN
       558>>ASSIGN    559>>ASSIGN    586--ENTRY     589--IF        600>>IF        600>>IF        600>>IF
       600>>IF        600>>IF        600>>IF        618>>IF        625>>ASSIGN    626>>ASSIGN    627>>ASSIGN
       629>>ASSIGN    633>>IF        636>>ASSIGN    636>>ASSIGN    637>>ASSIGN    637>>ASSIGN    640>>ASSIGN
       641>>ASSIGN    642>>ASSIGN    644>>ASSIGN    668--ENTRY     671--IF        682>>IF        682>>IF
       682>>IF        682>>IF        682>>IF        682>>IF        702>>ASSIGN    703>>ASSIGN    704>>ASSIGN
       705<<ASSIGN    712>>IF        719>>ASSIGN    720>>ASSIGN    721>>ASSIGN    722<<ASSIGN    726>>IF
       729>>ASSIGN    729>>ASSIGN    730>>ASSIGN    730>>ASSIGN    733>>ASSIGN    734>>ASSIGN    735>>ASSIGN
       736<<ASSIGN    746>>ASSIGN    747>>ASSIGN    748>>ASSIGN    749<<ASSIGN    772--ENTRY     775--IF
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:76   
       792<<ASSIGN
P_WORKSPACE_
       286**DCL       273--PROC      323--ENTRY     325--IF        331>>IF        331>>IF        331>>IF
       338>>ASSIGN    345>>ASSIGN    379--ENTRY     382--IF        390>>ASSIGN    442--ENTRY     445--IF
       453>>ASSIGN    500--ENTRY     503--IF        511>>ASSIGN    514>>IF        514>>IF        514>>IF
       514>>IF        514>>IF        586--ENTRY     589--IF        597>>ASSIGN    600>>IF        600>>IF
       600>>IF        600>>IF        600>>IF        668--ENTRY     671--IF        679>>ASSIGN    682>>IF
       682>>IF        682>>IF        682>>IF        682>>IF        772--ENTRY     775--IF        783>>ASSIGN
TEMP_PTR$
       288**DCL       343<<ASSIGN    348>>ASSIGN    348>>ASSIGN    349>>ASSIGN    350<<ASSIGN    350>>ASSIGN
       353>>ASSIGN    354>>ASSIGN
WORKSPACE.FREE_NODE_OFFSET
       282**DCL       341<<ASSIGN    392>>IF        394>>ASSIGN    395<<ASSIGN    396>>ASSIGN    702>>ASSIGN
       703<<ASSIGN    719>>ASSIGN    720<<ASSIGN    733>>ASSIGN    734<<ASSIGN    746>>ASSIGN    747<<ASSIGN
WORKSPACE.HEAD_OFFSET
       280**DCL       339<<ASSIGN    403>>IF        405<<ASSIGN    414>>ASSIGN    416>>ASSIGN    418<<ASSIGN
       455>>IF        461>>IF        463>>ASSIGN    465<<ASSIGN    465>>ASSIGN    466>>ASSIGN    478>>ASSIGN
       514>>IF        530>>IF        536<<ASSIGN    536>>ASSIGN    537>>ASSIGN    600>>IF        615>>IF
       625>>ASSIGN    627>>ASSIGN    629<<ASSIGN    640>>ASSIGN    642>>ASSIGN    644<<ASSIGN    682>>IF
       699>>IF        707<<ASSIGN    715<<ASSIGN    715>>ASSIGN    716>>ASSIGN    786>>IF
WORKSPACE.TAIL_OFFSET
       281**DCL       340<<ASSIGN    406<<ASSIGN    461>>IF        469>>ASSIGN    471>>ASSIGN    473<<ASSIGN
       530>>IF        540>>ASSIGN    542>>ASSIGN    544<<ASSIGN    555>>ASSIGN    557>>ASSIGN    559<<ASSIGN
       615>>IF        621<<ASSIGN    621>>ASSIGN    622>>ASSIGN    699>>IF        708<<ASSIGN    742<<ASSIGN
       742>>ASSIGN    743>>ASSIGN    792>>ASSIGN
WS_PTR$
       287**DCL       279--IMP-PTR   338<<ASSIGN    339>>ASSIGN    340>>ASSIGN    341>>ASSIGN    343>>ASSIGN
       348>>ASSIGN    390<<ASSIGN    392>>IF        394>>ASSIGN    394>>ASSIGN    395>>ASSIGN    396>>ASSIGN
       396>>ASSIGN    403>>IF        405>>ASSIGN    405>>ASSIGN    406>>ASSIGN    406>>ASSIGN    414>>ASSIGN
       416>>ASSIGN    416>>ASSIGN    416>>ASSIGN    418>>ASSIGN    418>>ASSIGN    453<<ASSIGN    455>>IF
       461>>IF        461>>IF        463>>ASSIGN    463>>ASSIGN    465>>ASSIGN    465>>ASSIGN    465>>ASSIGN
       466>>ASSIGN    466>>ASSIGN    469>>ASSIGN    469>>ASSIGN    469>>ASSIGN    471>>ASSIGN    473>>ASSIGN
       473>>ASSIGN    478>>ASSIGN    478>>ASSIGN    511<<ASSIGN    514>>IF        530>>IF        530>>IF
       536>>ASSIGN    536>>ASSIGN    536>>ASSIGN    537>>ASSIGN    537>>ASSIGN    540>>ASSIGN    540>>ASSIGN
       540>>ASSIGN    542>>ASSIGN    544>>ASSIGN    544>>ASSIGN    551>>ASSIGN    552>>ASSIGN    555>>ASSIGN
       555>>ASSIGN    555>>ASSIGN    557>>ASSIGN    559>>ASSIGN    559>>ASSIGN    597<<ASSIGN    600>>IF
PL6.E3A0      #001=XUM$LRU_ROUTINES File=XUM$LRU.:E05TSI                         WED 07/30/97 09:21 Page:77   
       615>>IF        615>>IF        621>>ASSIGN    621>>ASSIGN    621>>ASSIGN    622>>ASSIGN    622>>ASSIGN
       625>>ASSIGN    627>>ASSIGN    627>>ASSIGN    627>>ASSIGN    629>>ASSIGN    629>>ASSIGN    636>>ASSIGN
       637>>ASSIGN    640>>ASSIGN    642>>ASSIGN    642>>ASSIGN    642>>ASSIGN    644>>ASSIGN    644>>ASSIGN
       679<<ASSIGN    682>>IF        699>>IF        699>>IF        702>>ASSIGN    703>>ASSIGN    703>>ASSIGN
       707>>ASSIGN    708>>ASSIGN    715>>ASSIGN    715>>ASSIGN    715>>ASSIGN    716>>ASSIGN    716>>ASSIGN
       719>>ASSIGN    720>>ASSIGN    720>>ASSIGN    729>>ASSIGN    730>>ASSIGN    733>>ASSIGN    734>>ASSIGN
       734>>ASSIGN    742>>ASSIGN    742>>ASSIGN    742>>ASSIGN    743>>ASSIGN    743>>ASSIGN    746>>ASSIGN
       747>>ASSIGN    747>>ASSIGN    783<<ASSIGN    786>>IF        792>>ASSIGN    792>>ASSIGN
