

14:33 JUL 28 '97 GD_DATA_M.:E05SI                                          1    
    1      /*M* GD_DATA_M FEP resident debugger static data macros */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X*            */
    8      /*P*     NAME:    GD_DATA_M
    9               DESCRIPTION:  This macro generates the debugger constant data area
   10        used in GD_DATA_D to generate a constant version of the structure
   11        (one that is initialized), and will be used everywhere else to
   12        generate a based version of the structure.  In GDA$BOOT_INIT,
   13        the constant version will be moved into the debuggers data
   14        segment, and a few added inits will be done. All refs to static
   15        data in the debugger (this includes the handler), will be to this
   16        structure.  The structure is based on a monitor supplied pointer
   17        to the debuggers data segment.  All items in the GDA portion of the
   18        structure refer to the handlers static data, whereas all items in
   19        the GD portion of the structure refer to the debuggers static data.
   20      */
   21
   22      %MACRO GD_DATA(FPTN=GD_DATA,STCLASS=CONSTANT SYMDEF);
   23
   24      %LSET LISTDIR='1'B;
   25      %LSET LISTEXP='1'B;
   26      %LSET LISTCOM='1'B;
   27      %LSET LISTSUB='1'B;
   28      %LSET STR=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
   29      %IF (STR='STA') OR (STR='CON') OR STR='EXT';
   30      %LSET INIT=CHARTEXT('INIT');
   31      %LSET EINIT=CHARTEXT('');
   32      %ELSE;
   33      %LSET INIT=CHARTEXT('/*');
   34      %LSET EINIT=CHARTEXT('*/');
   35      %ENDIF;
   36
   37      DCL 1 FPTN STCLASS WALIGNED,
14:33 JUL 28 '97 GD_DATA_M.:E05SI                                          2    
   38
   39            2 DELTAINFO,
   40              3 STACK$ PTR %INIT(ADDR(NIL))%EINIT,
   41              3 TRAP_FLAGS(0:3) BIT(16)%INIT('FFFF'X*0)%EINIT,
   42              3 TSA$ PTR %INIT(ADDR(NIL))%EINIT,
   43            2 GDA,
   44
   45              3 BFRSIZ UBIN  %INIT(0)%EINIT,     /* Used in various places as
   46                                                       a buffer size */
   47              3 CONNECTFLG BIT(1) UNAL %INIT('0'B)%EINIT, /* Flag indicating
   48                                                      whether or not the SATYR
   49                                                      channel is still connected   */
   50              3 XMITFLG BIT(1) UNAL %INIT('0'B)%EINIT, /* Flag indicating
   51                                                      whether or not the
   52                                                      transmitt CCP is active      */
   53              3 * BIT(14) UNAL %INIT('0'B)%EINIT,
   54              3 IOERRCNT UBIN  %INIT(0)%EINIT,   /* Number of I/O errors that
   55                                                  have occurred since boot*/
   56              3 IOLDSIZE UBIN  %INIT(0)%EINIT,/* Number of bytes in an IOLD*/
   57              3 NAKCNT UBIN  %INIT(0)%EINIT, /* Number of I/O naks received
   58                                                since boot time */
   59              3 RCV  ALIGNED,                 /* Receive*/
   60                4 BFR(0:%(GD_MSG_MSIZE*2-1)) UBIN BYTE UNAL, /* Receive buffer      */
   61              3 TRN ALIGNED,                  /* Xmt                                */
   62                4 BFR(0:%(GDA#TRNBFRSIZ-1)) UBIN BYTE UNAL, /* Xmt                  */
   63
   64            2 GD ALIGNED,
   65
   66              3 MODE UBIN %INIT(0)%EINIT,
   67              3 OC_BRKNUM UBIN %INIT(0)%EINIT, /*  ON CALL  Brk number              */
   68              3 ALTRET_ADR$ PTR %INIT(ADDR(NIL))%EINIT,
   69              3 ALTRET_INST UBIN %INIT(0)%EINIT,
   70              3 ONCALLS_BRK$ PTR %INIT(ADDR(NIL))%EINIT,
   71              3 *(0:13) BIT(16) ALIGNED %INIT('0'B*0)%EINIT,
   72              3 ABSADDR PTR  %INIT(ADDR(NIL))%EINIT, /* When the user
   73                                       types GO address this cell contains
   74                                       the address to goto */
14:33 JUL 28 '97 GD_DATA_M.:E05SI                                          3    
   75              3 ASDT_PPNO UBIN  %INIT(0)%EINIT,  /* Physical page number
   76                                       of the HJIT from which the debugger
   77                                       is to get an ASDT */
   78              3 ASDT_OFFSET UBIN  %INIT(0)%EINIT, /* Indicates the offset from
   79                                                  ASDT_PPNO of this ASDT */
   80              3 ASDT_USE_PPNO UBIN %INIT(0)%EINIT, /* PPNO of ASDT user entered trap handler with */
   81              3 ASDT_USE_OFFSET UBIN %INIT(0)%EINIT, /* OFFSET of ASDT user entered trap handler with */
   82              3 USE_USERNO UBIN %INIT(0)%EINIT, /* User number that entered trap handler */
   83              3 IGNARITH BIT(1) UNAL %INIT('0'B)%EINIT, /* Ignore arithmetic traps  */
   84              3 INTERPRETIVE BIT(1) UNAL %INIT('0'B)%EINIT,
   85              3 BFRFULL BIT(1) UNAL  %INIT('0'B)%EINIT, /* This flag
   86                                             is set by SATYR receive code
   87                                             to indicate a complete buffer
   88                                             is ready for processing by the
   89                                             debugger */
   90              3 ONCALLS BIT(1) UNAL %INIT('0'B)%EINIT,
   91              3 ONCALL BIT(1) UNAL %INIT('0'B)%EINIT,
   92              3 ONEXIT BIT(1) UNAL %INIT('0'B)%EINIT,
   93              3 ONABORT BIT(1) UNAL %INIT('0'B)%EINIT,
   94              3 BYPASS BIT(1) UNAL %INIT('0'B)%EINIT,
   95              3 SOC BIT(1) UNAL %INIT('0'B)%EINIT, /* Step one call flag            */
   96              3 GOSCREECH BIT(1) UNAL %INIT('0'B)%EINIT, /* If set the user
   97                                                    has typed GO SCREECH */
   98              3 GOTRAP BIT(1) UNAL %INIT('0'B)%EINIT, /* If set, the user has
   99                                                    typed GO TRAP */
  100              3 KEEPMON BIT(1) UNAL %INIT('0'B)%EINIT, /* When set,
  101                                                and in XDELTA mode Monitor
  102                                                traps ONLY will be handled */
  103              3 USE_REAL BIT(1) UNAL %INIT('0'B)%EINIT, /* When set,
  104                                          addresses passed to the debugger
  105                                          are to be interpreted as real
  106                                          physical addresses */
  107              3 STOPT BIT(1) UNAL %INIT('0'B)%EINIT, /* When set, the FEP
  108                                     is stopped due to trap or breakpoint */
  109              3 ANSWERED BIT(1) UNAL %INIT('0'B)%EINIT,
  110              3 TRACE_ACTIVE BIT(1) UNAL %INIT('0'B)%EINIT, /* Save area for M1.J   */
  111              3 NEWCTL BIT(1) UNAL %INIT('0'B)%EINIT,
14:33 JUL 28 '97 GD_DATA_M.:E05SI                                          4    
  112              3 GO_AGAIN BIT(1) UNAL %INIT('0'B)%EINIT,
  113              3 * BIT(14) UNAL %INIT('0'B)%EINIT,
  114              3 ONCALL$ PTR ALIGNED %INIT(ADDR(NIL))%EINIT,
  115              3 AUTO$ PTR %INIT(ADDR(NIL))%EINIT, /* from VLP_XBREAK                */
  116              3 TRAP# UBIN ALIGNED %INIT(0)%EINIT, /* From G$TSA or VLP_XBREAK      */
  117              3 TRACE UBIN %INIT(0)%EINIT,    /* Trace type                         */
  118              3 XBRKINFO$ PTR %INIT(ADDR(NIL))%EINIT,
  119              3 DYNSP$ PTR %INIT(ADDR(NIL))%EINIT, /* free DB DS                    */
  120              3 DYNSP REDEF DYNSP$ SBIN(32),
  121              3 BRKNUM UBIN  %INIT(0)%EINIT, /* Contains the breakpoint number
  122                                        that needs cleanup by the debuggers
  123                                        trap handler. */
  124              3 BRK$ PTR ALIGNED %INIT(ADDR(NIL))%EINIT, /* Address of breakpoint
  125                                            entry in MYSPACE for BRKNUM */
  126              3 STEP_BRKPNT ALIGNED ,         /* Stepping breakpoint                */
  127                4 ADR$ PTR %INIT(ADDR(NIL))%EINIT, /* ADDR of breakpoint*/
  128                4 ADR REDEF ADR$ SBIN(32),
  129                4 START$ PTR %INIT(ADDR(NIL))%EINIT, /* Start of step               */
  130                4 START REDEF START$ SBIN(32),
  131                4 OLDINST UBIN %INIT(0)%EINIT, /* Saved Instruction                 */
  132                4 USER# UBIN %INIT(0)%EINIT,  /* User # that set this breakpoint    */
  133                4 FLAGS,
  134                  5 ACTIVE BIT(1) UNAL %INIT('0'B)%EINIT, /* Breakpoint# OK         */
  135                  5 ARMED BIT(1) UNAL %INIT('0'B)%EINIT, /* In memory               */
  136                  5 INTERPRETIVE BIT(1) UNAL %INIT('0'B)%EINIT,/*Interpretive*/
  137                  5 BRKNUM_SAVED BIT(1) UNAL %INIT('0'B)%EINIT,
  138                  5 * BIT(4) UNAL %INIT('0'B)%EINIT,
  139                4 OLD_BRKNUM UBIN BYTE %INIT(0)%EINIT,
  140              3 SOC_BRKPNT ALIGNED,           /* Break point for ALTRETs on SOC     */
  141                4 ADR$ PTR %INIT(ADDR(NIL))%EINIT,
  142                4 OLDINST UBIN %INIT(0)%EINIT,
  143                4 USER# UBIN %INIT(0)%EINIT,
  144                4 FLAGS ALIGNED,
  145                  5 ACTIVE BIT(1) UNAL %INIT('0'B)%EINIT,
  146                  5 ARMED BIT(1) UNAL %INIT('0'B)%EINIT,
  147                  5 * BIT(14) UNAL %INIT('0'B)%EINIT,
  148              3 WINDOWSEG BIT(32)%INIT('0'B)%EINIT,
14:33 JUL 28 '97 GD_DATA_M.:E05SI                                          5    
  149              3 STEPCNT SBIN  %INIT(0)%EINIT, /* When the user types GO
  150                                             step this cell indicates how many
  151                                             locations to step before setting
  152                                             the next breakpoint                    */
  153              3 USERNO UBIN  %INIT(0)%EINIT, /* The user number specified by the
  154                                               last USE command (0 if no user number
  155                                               was specified */
  156      /**/
  157              3 MUIS UBIN      %INIT(0)%EINIT,/* Largest index in the user tables   */
  158              3 HIMEM UBIN %INIT(4095)%EINIT, /* Highest page on the machine        */
  159              3 TRAPCNT UBIN %INIT(0)%EINIT,  /* Count of traps in delta.           */
  160
  161
  162              3 VLD(0:4) UBIN %INIT(0,0,0,0,0)%EINIT,
  163              3 ERROR SBIN %INIT(0)%EINIT,
  164              3 ERROR_LOC REMEMBER ALIGNED,
  165              3 HANLZ_DCB SBIN %INIT(0)%EINIT,
  166              3 ASDT_WINDOW$ PTR %INIT(ADDR(NIL))%EINIT, /* Locates HJIT.ASDT.SEG for window */
  167              3 WINDOW$ PTR %INIT(ADDR(NIL))%EINIT, /* Locates base of window segment */
  168            2 MISC WALIGNED,
  169              3 ACCESS BIT(1) UNAL %INIT('0'B)%EINIT,
  170              3 * BIT(15) UNAL %INIT('0'B)%EINIT,
  171                                              /* USER ACCESS FLAG                   */
  172              3 ARRAY,
  173                                              /* Array processing control info      */
  174                4 FIRST BIT(1) UNAL %INIT('0'B)%EINIT,
  175                4 * BIT(15) UNAL %INIT('0'B)%EINIT,
  176                4 CUR SBIN %INIT(0)%EINIT,
  177                4 HIGH SBIN %INIT(0)%EINIT,
  178              3 PEDEF UBIN %INIT(0)%EINIT,
  179                     /* TEMP CELL FOR HOLDING PRIM ENTDEF # OF THIS ITEM IN DDESC   */
  180              3 ASTACKOFF UBIN %INIT(0)%EINIT,
  181      /* TEMP CELL FOR HOLDING STACK OFFSET FOR CURRENT AUTO REFERENCE    */
  182              3 DESC$ PTR %INIT(ADDR(NIL))%EINIT,
  183                               /* POINTER WHERE TO START BUILDING DATA DESCRIPTOR   */
  184              3 DRTN$ PTR %INIT(ADDR(NIL))%EINIT,
  185                                         /* Pointer to FPT$DRTN in DUA$DELTA auto   */
14:33 JUL 28 '97 GD_DATA_M.:E05SI                                          6    
  186              3 FIND,
  187                                              /* SAVE VALUES FOR FIND/STORE         */
  188                4 SEG UBIN %INIT(0)%EINIT,
  189                4 ADDRESS UBIN %INIT(0)%EINIT,
  190                4 DESC# UBIN %INIT(0)%EINIT,
  191                4 NUM UBIN %INIT(0)%EINIT,
  192                4 NOT_IS BIT(1) UNAL %INIT('0'B)%EINIT,
  193                4 * BIT(15) UNAL %INIT('0'B)%EINIT,
  194                4 MASK_F SBIN %INIT(0)%EINIT,
  195                4 * UBIN %INIT(0)%EINIT,
  196              3 NA$ UBIN %INIT(0)%EINIT,
  197                                              /* Next address (after TRA to @)      */
  198              3 O$,
  199                               /* For retaining info about $O (current open cell)   */
  200                4 SEG UBIN %INIT(0)%EINIT,
  201                4 DESC# UBIN %INIT(0)%EINIT,
  202                4 ADDRESS UBIN %INIT(0)%EINIT,
  203                4 NOT_IS BIT(1) UNAL %INIT('0'B)%EINIT,
  204                4 * BIT(15) UNAL %INIT('0'B)%EINIT,
  205              3 RI$,
  206                4 SIZE UBIN %INIT(0)%EINIT,
  207                4 OPS(0:15) UBIN %INIT(0*0)%EINIT,
  208                                              /* Replaced instruction value         */
  209              3 SAD SBIN %INIT(0)%EINIT,
  210                                              /* $SAD descriptor number, -1 if none */
  211              3 SAVEIC UBIN %INIT(0)%EINIT,
  212                                              /* USER'S LAST IC VALUE               */
  213              3 REM_ACCESS REMEMBER ALIGNED,
  214                     /* REMEMBER AUTO AND LABEL IN CASE OF FAULT ACCESSING USER     */
  215              3 SCREECHCODE WALIGNED,
  216                4 FCG BIT(10) UNAL %INIT('0'B)%EINIT,
  217                4 MID BIT(5) UNAL %INIT('0'B)%EINIT,
  218                4 MON BIT(1) UNAL %INIT('0'B)%EINIT,
  219                4 ERR# BIT(13) UNAL %INIT('0'B)%EINIT,
  220                4 SEV BIT(3) UNAL %INIT('0'B)%EINIT,
  221                4 DUMP_BITS UBIN(16) UNAL %INIT(0)%EINIT,
  222            2 MYSPACE(0:%(GD#DYNSZ-1)) UBIN ALIGNED %INIT(0*0)%EINIT; /* This is where
14:33 JUL 28 '97 GD_DATA_M.:E05SI                                          7    
  223                    conditional breakpoint stuff gets saved */
  224      %MEND;
  225      /**/
  226      /*  Some sleaze to allow changing window segment  */
  227      /**/
  228      %EQU ASDT_WINDOW# = CHARTEXT('GD_DATA.GD.ASDT_WINDOW$->G$SEGDESC');
  229      %EQU WINDOW$# = CHARTEXT('GD_DATA.GD.WINDOW$');
  230      /**/
  231      /*  More sleaze  */
  232      /**/
  233      %EQU G$EXCFR# = CHARTEXT('G$ROS$->G$ROS.TCB.ALT$->G$EXCFR');
  234      %EQU GH@VLD = CHARTEXT('ADDR(GD_DATA.GD.VLD)->GH_VLD');
  235      /**/
  236      /*  Some related EQUs  */
  237      /**/
  238      %EQU GD#MODE_USER_DELTA=1;
  239      %EQU GD#MODE_XDELTA=2;
  240      %EQU GD#MODE_ANLZ=3;
  241      %EQU GD#MODE_ANLZ_FILE=4;
  242      %EQU GD#MODE_RUM=5;

