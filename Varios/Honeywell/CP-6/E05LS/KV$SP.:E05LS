

14:54 JUL 28 '97 KV$SP.:E05SI                                              1    
    1      /*M* KV$SP Session protocol sequencing definition */
    2      /*T***********************************************************/

14:54 JUL 28 '97 KV$SP.:E05SI                                              2    
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      %EJECT;
    8      %MACRO KN_SP_INT;
    9      %LSET LISTDIR = '0'B;
   10      %LSET LISTCOM = '0'B;
   11      %SET Y#SP_MSG_FCN = 0;
   12      %SET KN_FCN_HI = 7;  /*N* Put somewhere more appropriate */
   13      %SET Y#1 = CONCAT('FFFFFFFF'X,'FFFFFFFF'X);
   14      %SET Y#0 = CONCAT('00000000'X,'00000000'X);
   15      %MEND;
   16      %EJECT;

14:54 JUL 28 '97 KV$SP.:E05SI                                              3    
   17      %MACRO KV$SP_MSG (NAME = KN$SP_MSG,
   18      LVL = 1,
   19      LAST = ";",
   20      STCLASS = BASED,
   21      CHKSSNCNCID (YES = '1'B, NO = '0'B) = '0'B,
   22      DCLARY (YES = '1'B, NO = '0'B) = '1'B,
   23      FCN = ,
   24      SETUP_SSN (YES = '1'B, NO = '0'B) = '0'B);
   25      %LSET DCLARY = DCLARY;  /* Make PL-6 happy, we don't use DCLARY right now */
   26      %LSET LISTDIR = '0'B;
   27      %LSET LISTEXP = '1'B;
   28      %LSET LISTCOM = '0'B;
   29      %LSET LISTSUB = '1'B;
   30      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
   31      %IF (STR = 'STA') OR (STR = 'CON') OR (STR = 'EXT');
   32      /*
   33      We're generating code (as opposed to referencing via SYMREF or BASED).
   34      */
   35      %LSET INIT = CHARTEXT(' INIT');
   36      %LSET ENIT = CHARTEXT('');
   37      %ELSE;
   38      /*
   39      We're not generating code (we're probably SYMREFing or BASED).
   40      */
   41      %LSET INIT = CHARTEXT('/*');
   42      %LSET ENIT = CHARTEXT('*/');
   43      %ENDIF;
   44      /*
   45      Begin the actual data declaration.
   46      */
   47      %IF LVL = 1;
   48      DCL 1 NAME WALIGNED STCLASS,
   49      %LSET NXTLVL = LVL + 1;
   50      %ELSE;
   51      %IF LENGTHC(TEXTCHAR(FCN)) > 0;
   52      /*
   53      We have been passed a FCN name.
14:54 JUL 28 '97 KV$SP.:E05SI                                              4    
   54      We're not at level 1, use FCN minus the fixed leading portion
   55      of the FCN name as the name of this group.
   56      */
   57      %(LVL) %CHARTEXT(SUBSTR(TEXTCHAR(FCN),3)) WALIGNED,
   58      %LSET NXTLVL = LVL + 1;
   59      %ERROR (FCN ~= Y#SP_MSG_FCN,
   60        'ERROR:  Unexpected FCN.  Entry declaration must be in ascending FCN order');
   61      %SET Y#SP_MSG_FCN = Y#SP_MSG_FCN + 1;
   62      %ELSE;
   63      %LSET NXTLVL = LVL;
   64      %ENDIF;
   65      %ENDIF;
   66      %(NXTLVL) %CHARTEXT('CHKSSNCNCID') BIT(1) %INIT(CHKSSNCNCID)%ENIT UNAL,
   67      /*K* CHKSSNCNCID = {YES | NO}  YES indicates the session connection ID
   68      should be checked (e.g., there is one to check) for validity.
   69      */
   70      %(NXTLVL) %CHARTEXT('SETUP_SSN') BIT(1) %INIT(SETUP_SSN)%ENIT UNAL LAST
   71      /*K* SETUP_SSN = {YES | NO}  YES indicates this message requires that
   72      pointers to session context be set up before processing it.
   73      */
   74      %MEND;
   75      %EJECT;

14:54 JUL 28 '97 KV$SP.:E05SI                                              5    
   76      %MACRO KN_SP_ALL (FCG = KN_, STCLASS = SYMREF READONLY);
   77      %KN_SP_INT;
   78      %KN_SP_MSG_ALL (FCG = FCG, STCLASS = STCLASS);
   79      %MEND;
   80      %EJECT;

14:54 JUL 28 '97 KV$SP.:E05SI                                              6    
   81      %MACRO KN_SP_MSG_ALL (FCG = KN_, STCLASS = SYMREF READONLY);
   82      %LSET LISTDIR = '0'B;
   83      %LSET LISTEXP = '1'B;
   84      %LSET LISTCOM = '0'B;
   85      %LSET LISTSUB = '1'B;
   86      %SET KN_FCN_DUM0 = 0;
   87      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
   88      %IF (STR = 'STA') OR (STR = 'CON') OR (STR = 'EXT');
   89      DCL 1 %CHARTEXT(CONCAT(TEXTCHAR(FCG),'SP_MSG')) WALIGNED STCLASS,
   90
   91      /* DUM0 - Dummy entry number 0 */
   92
   93      %KV$SP_MSG (FCN = %KN_FCN_DUM0,
   94        LVL = 2, STCLASS = NO_INITS, LAST = ",",  /* DUM0 */
   95        CHKSSNCNCID = NO,   /* DUM0 */
   96        SETUP_SSN = NO);  /* DUM0 */
   97
   98      /* INIT - Initialize session (connect in) */
   99
  100      %KV$SP_MSG (FCN = %KN_FCN_INIT,
  101        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* INIT */
  102        CHKSSNCNCID = NO,   /* INIT */
  103        SETUP_SSN = YES);  /* INIT */
  104
  105      /* INIT_ACK - Initialize session acknowledgement (for connect out) */
  106
  107      %KV$SP_MSG (FCN = %KN_FCN_INIT_ACK,
  108        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* INIT_ACK */
  109        CHKSSNCNCID = NO,   /* INIT_ACK */
  110        SETUP_SSN = YES);  /* INIT_ACK */
  111
  112      /* TERM - Terminate session */
  113
  114      %KV$SP_MSG (FCN = %KN_FCN_TERM,
  115        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* TERM */
  116        CHKSSNCNCID = YES,   /* TERM */
  117        SETUP_SSN = YES);  /* TERM */
14:54 JUL 28 '97 KV$SP.:E05SI                                              7    
  118
  119      /* TERM_ACK - Terminate session acknowledgement */
  120
  121      %KV$SP_MSG (FCN = %KN_FCN_TERM_ACK,
  122        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* TERM_ACK */
  123        CHKSSNCNCID = YES,   /* TERM_ACK */
  124        SETUP_SSN = YES);  /* TERM_ACK */
  125
  126      /* DATA - Data (presentation messages) */
  127
  128      %KV$SP_MSG (FCN = %KN_FCN_DATA,
  129        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* DATA */
  130        CHKSSNCNCID = YES,  /* DATA */
  131        SETUP_SSN = YES);  /* DATA */
  132
  133      /* NOP - No operation */
  134
  135      %KV$SP_MSG (FCN = %KN_FCN_NOP,
  136        LVL = 2, STCLASS = STCLASS, LAST = ",",  /* NOP */
  137        CHKSSNCNCID = NO,   /* NOP */
  138        SETUP_SSN = NO);  /* NOP */
  139
  140      /* LOOP - Loop (data thru circular queue) */
  141
  142      %KV$SP_MSG (FCN = %KN_FCN_LOOP,
  143        LVL = 2, STCLASS = STCLASS, LAST = ";",  /* LOOP */
  144        CHKSSNCNCID = NO,  /* LOOP */
  145        SETUP_SSN = NO);  /* LOOP */
  146
  147      %ELSE;
  148      /*
  149      We're not generating code.  Declare an array of KV$SP_MSGs,
  150      without the array declarations (if any) within individual KV$SP_MSGs.
  151      */
  152
  153      DCL 1 %CHARTEXT(CONCAT(TEXTCHAR(FCG),'SP_MSG')) (0:%KN_FCN_HI) WALIGNED STCLASS,
  154      %KV$SP_MSG (FCN = ,
14:54 JUL 28 '97 KV$SP.:E05SI                                              8    
  155        LVL = 2, STCLASS = NO_INITS, LAST = ";", DCLARY = NO);  /* array */
  156      %ENDIF;
  157      %MEND;

