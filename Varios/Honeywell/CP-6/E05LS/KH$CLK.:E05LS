

14:46 JUL 28 '97 KH$CLK.:E05SI                                             1    
    1      /*M* KH$CLK FPTs for calling clock services routines */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*P* NAME: KH$CLK
    8
    9      The KH$CLK file contains the following macros:
   10
   11      .FIF
   12      KH$CLK      Parameter Block for Clock Services
   13      KH$EXP      Expired Clock Event Results Structure
   14      KH$CTBCTX   Clock Timer Block Structure
   15      .FIN
   16      */
   17
   18
   19      /*F* NAME: KH$CLK - Parameter Block for Clock Services
   20           The KH$CLK macro can be used to generate a structure to pass
   21           parameters to the clock services.  Parameters are as follows:
   22                                         */
   23
   24      %MACRO KH$CLK (FPTN = KH$CLK, LVL = 1, STCLASS = BASED,
   25      FNC = 0,
   26      CTBCTX = NIL,
   27      UID = '0'B,
   28      UVAL = 0,
   29      VDH_CLK(YES='1'B, NO='0'B)='0'B,
   30      NO_CTB(YES='1'B, NO='0'B)='0'B,
   31      PERM(YES='1'B, NO='0'B)='01'B,
   32      EXPINH(YES='1'B, NO='0'B)='01'B,
   33      ACCURACY = 0,
   34      SBR = NIL,
   35      PRDUNT(KH#C_TMIL=0, KH#C_SEC=1, KH#C_MIN=2, ANY) = 0,
   36      PRD = 0,
   37      RESULT = 0);
14:46 JUL 28 '97 KH$CLK.:E05SI                                             2    
   38      %LSET LISTDIR = '0'B;
   39      %LSET LISTEXP = '1'B;
   40      %LSET LISTCOM = '0'B;
   41      %LSET LISTSUB = '1'B;
   42      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
   43      %IF STR = 'STA' OR STR = 'CON' OR STR = 'EXT';
   44      %LSET INIT = CHARTEXT(' INIT');
   45      %LSET ENIT = CHARTEXT('');
   46      %ELSE;
   47      %LSET INIT = CHARTEXT('/*');
   48      %LSET ENIT = CHARTEXT('*/');
   49      %ENDIF;
   50      %IF LVL = 1;
   51      DCL 1 FPTN STCLASS WALIGNED,
   52      %ELSE;
   53      %IF TEXTCHAR(FPTN) ~= '';
   54            %(LVL) FPTN,
   55      %ENDIF;
   56      %ENDIF;
   57            %(LVL+1) CTBCTX$ PTR %INIT(ADDR(CTBCTX))%ENIT WALIGNED,
   58      /*K* CTBCTX = PTR  specifies the address of a Clock Timer Block (CTB).
   59      A Clock Timer Block may be generated using the KH$CTBCTX macro.
   60
   61      On SETCLK functions, if the pointer contains ADDR(NIL), clock services
   62      allocate this block from the user's buddy space pool.  Otherwise, if
   63      this field contains a pointer, clock services assume that the user
   64      has allocated this block in advance.
   65
   66      All other functions require that the Clock Timer Block has already
   67      been allocated.
   68      */
   69            %(LVL+1) %CHARTEXT('UID') BIT(32) %INIT(UID)%ENIT WALIGNED,
   70            %(LVL+1) UID$ REDEF %CHARTEXT('UID') PTR,
   71            %(LVL+1) UIDUBN REDEF %CHARTEXT('UID') UBIN(32),
   72      /*K* UID = VALUE-BIT(32). Contains user information which will be
   73      supplied to the user upon clock wake-up.  This field is also defined
   74      as UID$, a pointer.
14:46 JUL 28 '97 KH$CLK.:E05SI                                             3    
   75      */
   76            %(LVL+1) %CHARTEXT('UVAL') UBIN WORD %INIT(UVAL)%ENIT WALIGNED,
   77      /*K* UVAL = VALUE-DEC(0-65535).  Specifies a user-supplied value to be returned
   78      upon expiration of the clock.
   79      */
   80            %(LVL+1) %CHARTEXT('RESULT') UBIN(8) %INIT(0)%ENIT CALIGNED,
   81      /*K* RESULT - Is a status field which can be checked on
   82      ALTRETURNs from clock service calls.  EQUs for the results values
   83      are available in KH_CLKFNC_E.:LIBRARY.
   84
   85      .fif
   86      KH#RES_OK         Successful call completed
   87      KH#RES_NOCTB      Cannot allocate CTB
   88      KH#RES_BADQ       Invalid CTB
   89      KH#RES_NOQ        CTB does not exist
   90      KH#RES_NOREL      Cannot release CTB
   91      KH#RES_EXP        Clock already expired
   92      KH#RES_INVREQ     Invalid call to KHC$CLOCK
   93      KH#RES_EXPIRING   Clock expiring (at a cancel request)
   94      .fin
   95      */
   96            %(LVL+1) %CHARTEXT('FNC') UBIN(8) %INIT(FNC)%ENIT UNAL,
   97      /*K* FNC = OPTION.  Is the clock function describing
   98      the function to be performed.  EQUs for these options are available
   99      in KH_CLKFNC_E.:LIBRARY
  100
  101      .inl +20
  102      .unl 20
  103      Function^^^^^^^^^^^^Description
  104
  105      .unl 20
  106      KH#CLK_SETCLK^^^^^^^Set a one-time clock request.  If this function
  107      is requested, the following in KH$CLK are required:  ACCURACY, FNC,
  108      PRD, PRDUNT, SBR.
  109      .unl 20
  110      KH#CLK_SETCLKPERM^^^Set a periodic (permanent) clock request.  If this
  111      function is requested, the following in KH$CLK are required:  CTBCTX,
14:46 JUL 28 '97 KH$CLK.:E05SI                                             4    
  112      FNC.
  113      .unl 20
  114      KH#CLK_CANCEL^^^^^^^Cancel a clock request.  If this function is
  115      requested, the following in KH$CLK are required:  CTBCTX, FNC.
  116      .unl 20
  117      KH#CLK_RESET^^^^^^^^Reset an existing clock request to
  118      expire at a different time, return to a different
  119      expiration entry address, or return a different
  120      expiration value.  If this function is requested, the following in
  121      KH$CLK are meaningful:  ACCURACY, PERM, PRD, PRDUNT, SBR, UID; the
  122      following in KH$CLK are required:  CTBCTX, FNC.
  123      .unl 20
  124      KH#CLK_RESTART^^^^^^Restart the clock.  If this function is requested,
  125      the following in KH$CLK are required:  CTBCTX, FNC.
  126      .inl -20
  127      */
  128            %(LVL+1) %CHARTEXT('VDH_CLK') BIT(1) %INIT(VDH_CLK)%ENIT UNAL,
  129      /*K* VDH_CLK = {YES|NO}.  Specifies, if YES, that VDH is requesting
  130      service on a clock.  Used for validation checks.
  131      */
  132            %(LVL+1) %CHARTEXT('NO_CTB') BIT(1) %INIT(NO_CTB)%ENIT UNAL,
  133      /*K* NO_CTB = {YES|NO}.  Specifies, if YES, that the user
  134      does not save the CTB$ returned by clock services when a clock
  135      gets set.
  136      */
  137      /********************/
  138      %LSET IFNC=FNC;
  139      %IF FNC~=0; /* DEFAULT TO THE FULL SIZE FPT. */
  140      %LSET IFNC=BITBIN (FNC~=KH#CLK_SETCLK
  141                         AND FNC~=KH#CLK_RESET
  142                         AND FNC~=KH#CLK_SETCLKPERM);
  143      %ENDIF;
  144      %IF IFNC=0;
  145            %(LVL+1) %CHARTEXT('PERM') BIT(2) %INIT(PERM)%ENIT UNAL,
  146      /*K* PERM = OPTION.  Is used only on RESET operations to change the
  147      PERM status of the clock.
  148      EQUs for these options are available in KH_CLKFNC_E.:LIBRARY.
14:46 JUL 28 '97 KH$CLK.:E05SI                                             5    
  149
  150      .fif
  151      KH#C_TEMP      One-shot
  152      KH#C_PERM      Periodic Clock
  153      KH#C_NOCHANGE  No change in RESET FCN
  154      .fin
  155
  156      */
  157            %(LVL+1) %CHARTEXT('EXPINH') BIT(2) %INIT(EXPINH)%ENIT,
  158      /*K* EXPINH = {YES|NO}  specifies that the expiration subroutine is to be
  159      entered with interrupts disabled.
  160      */
  161            %(LVL+1) %CHARTEXT('PRDUNT') UBIN BYTE %INIT(PRDUNT)%ENIT CALIGNED,
  162      /*K* PRDUNT = OPTION.  Specifies the PeRioD UNiTs in which the time interval
  163      is expressed.
  164      EQUs for these options are available in KH_CLKFNC_E.:LIBRARY.
  165
  166      .fif
  167      KH#C_TMIL  Tens of milliseconds
  168      KH#C_SEC   Seconds
  169      KH#C_MIN   Minutes
  170      .fin
  171
  172      The default is tens of milliseconds.
  173      */
  174            %(LVL+1) %CHARTEXT('ACCURACY') UBIN BYTE %INIT(ACCURACY)%ENIT UNAL,
  175      /*K* ACCURACY = VALUE-DEC(0-255).  Specifies  (in units specified by
  176      PRDUNTs) the amount of allowable discrepancy in the wake-up time. */
  177            %(LVL+1) SBR$  EPTR %INIT(ENTADDR(SBR))%ENIT WALIGNED,
  178      /*K* SBR$ = EPTR.  Specifies the user's service routine (entry)
  179      address.
  180      */
  181            %(LVL+1) %CHARTEXT('PRD') UBIN WORD %INIT(PRD)%ENIT UNAL;
  182      /*K* PRD = VALUE-DEC (0-32767).  Specifies the number of PRDUNT units
  183      for this request.
  184      */
  185      %ELSEIF (FNC = KH#CLK_CANCEL);
14:46 JUL 28 '97 KH$CLK.:E05SI                                             6    
  186            %(LVL+1) * UBIN WORD;
  187      %ELSEIF (FNC = KH#CLK_ACTIVE);
  188            %(LVL+1) * UBIN WORD;
  189      %ELSEIF (FNC = KH#CLK_RESTART);
  190            %(LVL+1) * UBIN WORD;
  191      %ELSE;
  192            %(LVL+1) * UBIN WORD;
  193      %ENDIF;
  194      %MEND;
  195
  196      /*F* NAME: KH$EXP - Expired Clock Event Results Structure
  197
  198      The KH$EXP macro can be invoked to generate that structure that
  199      receives the results for an expired clock event.
  200
  201      The contents of the structure are as follows:
  202      */
  203      /**/
  204      %MACRO KH$EXP (FPTN=KH$EXP, LVL=1, STCLASS=BASED,
  205      UID = '0'B,
  206      UVAL = 0,
  207      VDH_CLK = '0'B,
  208      CTBCTX = NIL,
  209      ABORT  (YES = '1'B, NO = '0'B) = '0'B,
  210      RESET  (YES = '1'B, NO = '0'B) = '0'B,
  211      DELETE  (YES = '1'B, NO = '0'B) = '0'B);
  212      %LSET LISTDIR = '0'B;
  213      %LSET LISTEXP = '1'B;
  214      %LSET LISTCOM = '0'B;
  215      %LSET LISTSUB = '1'B;
  216      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '),0,3);
  217      %IF STR = 'STA' OR STR = 'CON' OR STR = 'EXT';
  218      %LSET INIT = CHARTEXT(' INIT');
  219      %LSET ENIT = CHARTEXT('');
  220      %ELSE;
  221      %LSET INIT = CHARTEXT('/*');
  222      %LSET ENIT = CHARTEXT('*/');
14:46 JUL 28 '97 KH$CLK.:E05SI                                             7    
  223      %ENDIF;
  224      %IF LVL = 1;
  225      DCL 1 FPTN STCLASS WALIGNED,
  226      %ELSE;
  227      %IF TEXTCHAR(FPTN) ~= '';
  228            %(LVL) FPTN,
  229      %ENDIF;
  230      %ENDIF;
  231            %(LVL+1) %CHARTEXT('UID') BIT(32) %INIT(UID)%ENIT WALIGNED,
  232            %(LVL+1) UID$ REDEF %CHARTEXT('UID') PTR,
  233      /*K* UID$ - Is the user address (PTR) being returned to the user
  234      upon clock expiration.
  235      */
  236            %(LVL+1) %CHARTEXT('UVAL') UBIN WORD %INIT(UVAL)%ENIT WALIGNED,
  237      /*K* UVAL - Is a user supplied parameter (UBIN WORD) to be returned
  238      upon clock expiration.
  239      */
  240            %(LVL+1) CTBCTX$ PTR %INIT(ADDR(CTBCTX))%ENIT WALIGNED,
  241      /*K* CTBCTX$ - Is a pointer (PTR) to the clock timer block, KH$CTBCTX.
  242      */
  243            %(LVL+1) %CHARTEXT('VDH_CLK') BIT(1) %INIT(VDH_CLK)%ENIT UNAL,
  244      /*K* VDH_CLK - Is a BIT(1) flag which is set if this is a VDH-clock
  245      expiration.
  246      */
  247            %(LVL+1) %CHARTEXT('ABORT') BIT(1) %INIT(ABORT)%ENIT UNAL,
  248      /*K* ABORT - Is a BIT(1) flag which is set if the dispatch
  249      of this clock was interrupted by an cancel interrupt.  When the cancel
  250      interrupt completes, the user may receive a clock expiration event
  251      for the clock that was just deleted.  This bit tells the user that
  252      this block was canceled.  If the user allocates CTBs (instead of clock
  253      services), and deletes them upon completion of a CANCEL clock service,
  254      then upon receipt of an expired clock event with the ABORT bit set,
  255      the user MUST set the DELETE bit in this structure to inform clock
  256      services that the block has been deleted.  Otherwise clock services
  257      will cause unpredictable results.
  258      */
  259            %(LVL+1) %CHARTEXT('RESET') BIT(1) %INIT(RESET)%ENIT UNAL,
14:46 JUL 28 '97 KH$CLK.:E05SI                                             8    
  260      /*K* RESET - Is a BIT(1) flag which is set if
  261      the current clock event was reset to a later time and therefore is to
  262      be ignored.
  263      */
  264            %(LVL+1) %CHARTEXT('DELETE') BIT(1) %INIT(DELETE)%ENIT UNAL,
  265            %(LVL+1) * CHAR(1) CALIGNED %INIT(' ')%ENIT;
  266      /*K* DELETE - Is a BIT(1) flag which is set if
  267      the self-allocated clock block for this event was
  268      deleted by the user.  Users can only delete clock blocks if they
  269      allocated them.  If the ABORT bit was set by clock services (due to
  270      a user CANCEL at a sensitive instant) and the user deleted the clock
  271      block after the cancel, the DELETE bit must be set.
  272      */
  273      %MEND;
  274
  275      /*F* NAME: KH$CTBCTX - Clock Timer Block Structure
  276
  277      The KH$CTBCTX macro in file KH$CLK may be used to generate the
  278      structure for the Clock Timer Block.
  279
  280      The contents of this structure are as follows:
  281      */
  282      %MACRO KH$CTBCTX (FPTN = KH$CTBCTX, LVL = 1, STCLASS = BASED,
  283      LAST=";",
  284      FLNK$ = "ADDR(NIL)",
  285      BLNK$ = "ADDR(NIL)",
  286      UTS = 0,
  287      PRD = 0,
  288      ACCURACY = 0,
  289      SBR = NIL,
  290      UID = '0'B,
  291      UVAL = 0,
  292      VDH_CLK = '0'B,
  293      DYNAMIC = '0'B,
  294      EXPINH='0'B,
  295      TOKEN = '0'B,
  296      PERM = '0'B);
14:46 JUL 28 '97 KH$CLK.:E05SI                                             9    
  297      %LSET LISTDIR = '0'B;
  298      %LSET LISTEXP = '1'B;
  299      %LSET LISTCOM = '0'B;
  300      %LSET LISTSUB = '1'B;
  301      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  302      %IF STR = 'STA' OR STR = 'CON' OR STR = 'EXT';
  303      %LSET INIT = CHARTEXT(' INIT');
  304      %LSET ENIT = CHARTEXT('');
  305      %ELSE;
  306      %LSET INIT = CHARTEXT('/*');
  307      %LSET ENIT = CHARTEXT('*/');
  308      %ENDIF;
  309      %IF LVL = 1;
  310      DCL 1 FPTN STCLASS WALIGNED,
  311      %ELSE;
  312      %IF TEXTCHAR(FPTN) ~= '';
  313            %(LVL) FPTN,
  314      %ENDIF;
  315      %ENDIF;
  316            %(LVL+1) %CHARTEXT('FLNK$') PTR %INIT(FLNK$)%ENIT WALIGNED,
  317      /*K* FLNK$ = PTR.  This is the forward link pointer in the CTB chain.
  318      */
  319            %(LVL+1) %CHARTEXT('BLNK$') PTR %INIT(BLNK$)%ENIT WALIGNED,
  320      /*K* BLNK$ = PTR.  This is the backward link pointer in the CTB chain.
  321      */
  322            %(LVL+1) %CHARTEXT('UTS') UBIN(32) %INIT(UTS)%ENIT WALIGNED,
  323      /*K* UTS = This is where Clock Services stores the actual UTS of when
  324      the clock timer block is to expire.
  325      */
  326            %(LVL+1) %CHARTEXT('PRD') UBIN (32) %INIT(PRD)%ENIT UNAL,
  327      /*K* PRD = This is the period of time to wait specified by the user
  328      at set clock time.  This value is saved for permanent clocks.
  329      */
  330            %(LVL+1) SBR$ EPTR %INIT(ENTADDR(SBR))%ENIT WALIGNED,
  331      /*K* SBR$ = The subroutine entry pointer.  This is the routine that
  332      Clock Services enters when the clock expires.
  333      */
14:46 JUL 28 '97 KH$CLK.:E05SI                                             10   
  334            %(LVL+1) %CHARTEXT('UID') BIT(32) %INIT(UID)%ENIT WALIGNED,
  335            %(LVL+1) UID$ REDEF %CHARTEXT('UID') PTR,
  336      /*K* UID$ = The user supplied pointer to be returned upon clock
  337      expiration.
  338      */
  339            %(LVL+1) %CHARTEXT('ACCURACY') UBIN BYTE %INIT(ACCURACY)%ENIT UNAL,
  340      /*K* ACCURACY = The amount of allowable discrepancy in the wake-up
  341      time. */
  342            %(LVL+1) %CHARTEXT('VDH_CLK') BIT(1) %INIT(VDH_CLK)%ENIT UNAL,
  343      /*K* VDH_CLK = Flag to remember VDH set this clock.
  344      */
  345            %(LVL+1) %CHARTEXT('DYNAMIC') BIT(1) %INIT(DYNAMIC)%ENIT UNAL,
  346      /*K* DYNAMIC = This flag (maintained by Clock Services) indicates
  347      whether or not the CTB was allocated by the user or Clock Services.
  348      */
  349            %(LVL+1) %CHARTEXT('TOKEN') BIT(1) %INIT(TOKEN)%ENIT UNAL,
  350      /*K* TOKEN = This flag (maintained by clock services) indicates
  351      status of this Clock Timer Block.
  352      EQUs for the contents of this field are available in KH_CLKFNC_E.:LIBRARY.
  353
  354      .fif
  355      KH#C_ACTIVE     Active
  356      KH#C_INACTIVE   Inactive
  357      .fin
  358      */
  359            %(LVL+1) %CHARTEXT('PERM') BIT(1) %INIT(PERM)%ENIT UNAL,
  360      /*K* PERM = This flag is set if the user called Clock Services with
  361      the SETCLKPERM function.
  362      */
  363            %(LVL+1) %CHARTEXT('EXPINH') BIT(1) %INIT(EXPINH)%ENIT,
  364      /*K* EXPINH = User supplied EXPINH attribute.
  365      */
  366            %(LVL+1) %CHARTEXT('UVAL') UBIN WORD %INIT(UVAL)%ENIT WALIGNED LAST
  367      /*K* UVAL = User supplied value.
  368      */
  369      %MEND;

