VERSION E05

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:1    
        1        1        /*M*  PSD$DISP    Produce STATS displays                                      */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=5,IND=5,CTI=5,DCI=5,SQB=Y,PRB=Y,DTI=0,ENI=0,AND=Y,ECI=0,CSI=0,THI=0,SDI=5,M
                 7        OC=Y,CRT=1,CLM=5,DMR */
        8        8        /*P*  NAME:    PSD$DISP
        9        9              PURPOSE: This module contains the routines that produce the
       10       10                       once-every-n-minutes STATS displays and performance-log
       11       11                       file entries.                                                  */
       12       12        PSD$DISP: PROC;
       13       13
       14       14        %INCLUDE CP_6;
       15       95        %INCLUDE CP_6_SUBS;
       16      635        %INCLUDE B_ERRORS_C;
       17     1762        %INCLUDE F$DCB;
       18     1811        %INCLUDE NI_DATA_C;
       19     1924        %INCLUDE PS_DATA_R;
       20     7220        %INCLUDE PS_PERR_C;
       21     7251
       22     7252 S      %INCLUDE B$JIT_C;
       23     7253        %INCLUDE XUD_UTS_M;
       24     7335        %XUD$UTS_ENTRIES;
       25     7367        %XUD_UTS_EQU;
       26     7378         %B$JIT0;
       27     7467         %U$JIT1X;
       28     7470         %M$JIT2X;
       29     7473         %F$JIT3X;
       30     7476         %S$JIT4X;
       31     7479         %J$JIT5X;
       32     7482         %A$JIT6X;
       33     7485
       34     7486        %B$TCB;
       35     7489
       36     7490        %B$EXCFR;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:2    
       37     7508        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:3    
       38     7509
       39     7510        %FPT_TIME (SOURCE=CLOCK,
       40     7511         STCLASS=CONSTANT,
       41     7512         DEST=UTS,
       42     7513         TSTAMP=TIME_NOW);
       43     7532
       44     7533        %FPT_TIME (FPTN=CONVERT_TIME,
       45     7534         STCLASS=CONSTANT,
       46     7535         SOURCE=UTS,
       47     7536         DEST=EXT,
       48     7537         DAY=NOW.DAY@,
       49     7538         DATE=NOW.DATE@,
       50     7539         TIME=NOW.TIME@,
       51     7540         TSTAMP=TIME_NOW);
       52     7559
       53     7560        %FPT_WAIT (UNITS=0,
       54     7561         UETIME=TIME_LEFT);
       55     7575
       56     7576        %FPT_OPEN (FPTN=OPEN_LOGFILE,
       57     7577         DCB=F$LOG,
       58     7578         NAME=PS_FILE_PARAMS.NAME@,
       59     7579         ACCT=PS_FILE_PARAMS.ACCT@,
       60     7580         PASS=PS_FILE_PARAMS.PASS@,
       61     7581         SN=PS_FILE_PARAMS.SN@,
       62     7582         SCRUB=YES,
       63     7583         FUN=CREATE,
       64     7584         EXIST=OLDFILE,
       65     7585         CTG=YES,
       66     7586         SHARE=IN,
       67     7587         IXTNSIZE=300,
       68     7588         XTNSIZE=300,
       69     7589         TYPE='DP',
       70     7590         ORG=KEYED,
       71     7591         ACS=DIRECT);
       72     7700
       73     7701        %FPT_WRITE (FPTN=WRITE_LOGFILE,
       74     7702         DCB=F$LOG,
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:4    
       75     7703         KEY=PS_LOGFILE_KEY,
       76     7704         NEWKEY=YES);
       77     7735
       78     7736        %FPT_PRECORD (FPTN=POSITION_LOGFILE,
       79     7737         STCLASS=CONSTANT,
       80     7738         DCB=F$LOG,
       81     7739         KEY=PS_LOGFILE_KEY,
       82     7740         KEYR=YES,
       83     7741         KEYS=YES);
       84     7762
       85     7763        %FPT_PRECORD (FPTN=SCAN_BACKWARDS,
       86     7764         STCLASS=CONSTANT,
       87     7765         DCB=F$LOG,
       88     7766         KEYS=NO,
       89     7767         KEYR=YES,
       90     7768         KEY=PS_LOGFILE_KEY,
       91     7769         N=-1);
       92     7790
       93     7791        %FPT_PRECORD (FPTN=SCAN_FORWARD,
       94     7792         STCLASS=CONSTANT,
       95     7793         DCB=F$LOG,
       96     7794         KEYS=NO,
       97     7795         KEYR=YES,
       98     7796         KEY=PS_LOGFILE_KEY,
       99     7797         N=1);
      100     7818
      101     7819        %FPT_LINES (FPTN=GET_LINES_REMAINING,
      102     7820         STCLASS=CONSTANT,
      103     7821         DCB=M$LO,
      104     7822         LINES=LINES_REMAINING);
      105     7836
      106     7837        %VLR_LINES (FPTN=LINES_REMAINING);
      107     7851
      108     7852        %FPT_TRUNC (FPTN=TRUNC_LOGFILE,
      109     7853         STCLASS=CONSTANT,
      110     7854         DCB=F$LOG);
      111     7868
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:5    
      112     7869        %FPT_DEVICE (FPTN=SET_HEADER_ON_LP,
      113     7870         STCLASS=CONSTANT,
      114     7871         DCB=M$LO,
      115     7872         HDR=VLP_HDR);
      116     7890
      117     7891        %VLP_HDR (LEN=80);
      118     7907
      119     7908        %EXT_TIME (NAME=NOW);
      120     7916        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:6    
      121     7917        /* These variables define the real/simulated time interval over
      122     7918           which we will produce displays.                               */
      123     7919    1   DCL TIME_NOW UBIN STATIC;
      124     7920    1   DCL NEXT_WAKEUP_TIME UBIN STATIC;
      125     7921    1   DCL TIME_LEFT UBIN STATIC;
      126     7922    1   DCL DELTA_T SBIN;
      127     7923    1   DCL B$P$ PTR STATIC SYMDEF;
      128     7924    1   DCL P_NPROCS UBIN STATIC SYMDEF;
      129     7925    1   DCL P_MAXPROCS UBIN STATIC SYMDEF;
      130     7926    1   DCL I SBIN;
      131     7927    1   DCL IFEC UBIN;
      132     7928    1   DCL FEPNO UBIN;
      133     7929    1   DCL PUNT_COUNTER UBIN;
      134     7930    1   DCL WAIT_COUNT UBIN;
      135     7931    1   DCL P$ PTR;
      136     7932    1   DCL COLLECT_COUNT UBIN;
      137     7933    1   DCL COLLECT_SIZE UBIN;
      138     7934    1   DCL COLLECT_OFFSET UBIN;
      139     7935    1   DCL FIRST_TIME LOGICAL;
      140     7936    1   DCL NEED_MORE LOGICAL;
      141     7937    1   DCL FIRST_SLEEP_THIS_INTERVAL LOGICAL;
      142     7938    1   DCL SNORED LOGICAL;
      143     7939    1   DCL CONTINUE_SLEEPING LOGICAL;
      144     7940    1   DCL WAITING_FOR_FEPS LOGICAL;
      145     7941    1   DCL FEP_SHORT_DONE LOGICAL;
      146     7942    1   DCL TFEPNO CHAR(2);
      147     7943    1   DCL CPOS1 UBIN;
      148     7944    1   DCL CPOS2 UBIN;
      149     7945    1   DCL ITEM UBIN;
      150     7946    1   DCL LEN UBIN;
      151     7947    1   DCL TEMP CHAR (140);
      152     7948    1   DCL P_IOS$ PTR;
      153     7949    1   DCL TEMP_UTS UBIN AUTO;
      154     7950    1   DCL 1 BARGRAPH_VECTORS STATIC,
      155     7951    1            2 TITLE_ BIT (72) DALIGNED,
      156     7952    1            2 SCALE_ BIT (72) DALIGNED,
      157     7953    1            2 LOW_ BIT (72) DALIGNED,
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:7    
      158     7954    1            2 HIGH_ BIT (72) DALIGNED;
      159     7955    1   DCL BARGRAPH_TITLE CHAR (40) STATIC;
      160     7956    1   DCL 1 BARGRAPH_FMT CONSTANT,
      161     7957    1            2 L1 CHAR (0) INIT ('%/%Vr%25-%A (%A, %D - %D)      %/%22-'),
      162     7958    1            2 L2 CHAR (0) INIT ('/---|---|---|---|---|---|---|---|---|---|\  ');
      163     7959    1   DCL B$TCB$ PTR SYMREF;
      164     7960    1   DCL B$JIT$ PTR SYMREF;
      165     7961    1   DCL PSD$EJECT ENTRY (1);
      166     7962    1   DCL PSD$SKIP ENTRY;
      167     7963    1   DCL PSD$CPU ENTRY;
      168     7964    1   DCL PSD$RESRCE ENTRY;
      169     7965    1   DCL PSD$FEP ENTRY;
      170     7966    1   DCL PSD$FEPSHORT ENTRY;
      171     7967    1   DCL PSD$DEVICES ENTRY;
      172     7968    1   DCL PSD$CHANNELS ENTRY;
      173     7969    1   DCL PSD$SCPU ENTRY;
      174     7970    1   DCL PSD$PROCS ENTRY;
      175     7971    1   DCL PSD$SUMMARY ENTRY;
      176     7972    1   DCL PSD$HEADER ENTRY (2);
      177     7973    1   DCL PSD$SUM_HEAD ENTRY;
      178     7974    1   DCL PSD$HISTO ENTRY (1);
      179     7975    1   DCL PSD$FAULT ENTRY;
      180     7976    1   DCL PSD$MOUSE ENTRY;
      181     7977    1   DCL PSD$GET_PMDAT ENTRY (2) ALTRET;
      182     7978    1   DCL PSD$GET_MOUSE ENTRY (2) ALTRET;
      183     7979    1   DCL PSD$GET_FEP ENTRY (2) ALTRET;
      184     7980    1   DCL PSD$READ_IN ENTRY (2) ALTRET;
      185     7981    1   DCL PSF$KICKFEP ENTRY;
      186     7982    1   DCL PSF$RELEASE ENTRY;
      187     7983    1   DCL PSF$GETBUF ENTRY (1);
      188     7984    1   DCL PSG$GATHER ENTRY ALTRET;
      189     7985    1   DCL PSR$RESULTS ENTRY;
      190     7986    1   DCL PSR$IDENT ENTRY (6);
      191     7987    1   DCL PSE$ERRMSG ENTRY (5);
      192     7988    1   DCL PSE$GRIPE ENTRY (5);
      193     7989    1   DCL PSM$FREESEG ENTRY (1);
      194     7990    1   DCL PSL$EVAL ENTRY (3);
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:8    
      195     7991    1   DCL PSL$LOCATE ENTRY (3);
      196     7992    1   DCL PSL$TIME ENTRY (2);
      197     7993    1   DCL PSM$SEGOX ENTRY (3);
      198     7994        %INCLUDE XUF_ENTRY;
      199     8002        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:9    
      200     8003    1   ATTACH: PROC (POINTER$, ACTUAL, OLD, HISTORY, ENTRY$) ALTRET;
      201     8004
      202     8005    2   DCL POINTER$ PTR;
      203     8006    2   DCL ACTUAL UBIN;
      204     8007    2   DCL OLD UBIN;
      205     8008    2   DCL HISTORY UBIN;
      206     8009    2   DCL ENTRY$ EPTR;
      207     8010    2   DCL P$ PTR;
      208     8011    2   DCL ERR UBIN WORD;
      209     8012    2   DCL FIRST_ATTACH LOGICAL;
      210     8013    2   DCL I UBIN;
      211     8014
      212     8015    2        IF OLD>0 THEN HISTORY = OLD;
      213     8016
      214     8017    2        NEED_MORE = %YES#;
      215     8018    2        FIRST_ATTACH = %YES#;
      216     8019
      217     8020    3        DO WHILE (NEED_MORE);
      218     8021
      219     8022    3             IF NOT FIRST_ATTACH
      220     8023    3                  OR ACTUAL = 0
      221     8024    3             THEN
      222     8025    3                  CALL PSM$SEGOX (POINTER$, ACTUAL, HISTORY);
      223     8026
      224     8027    3             FIRST_ATTACH = %NO#;
      225     8028    3             PS_USED_FEP_SIZE = 9999;
      226     8029    3             CALL ENTRY$ (POINTER$, ACTUAL) ALTRET (NOT_ENOUGH);
      227     8030
      228     8031    3             NEED_MORE = %NO#;
      229     8032
      230     8033    4             DO NEVER;
      231     8034
      232     8035    4   NOT_ENOUGH:
      233     8036    4                  IF PS_USED_FEP_SIZE = 0 THEN
      234     8037    4                       ALTRETURN;
      235     8038
      236     8039    4                  ERR = B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.CODE;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:10   
      237     8040
      238     8041    4                  IF ERR = %E$EOF
      239     8042    4                  THEN
      240     8043    4                       ALTRETURN;
      241     8044
      242     8045    4                  IF ERR ~= %E$LD
      243     8046    4                  THEN
      244     8047    4                       CALL PSE$ERRMSG ( , SERIOUS#);
      245     8048
      246     8049    4             END;
      247     8050
      248     8051    3        END;
      249     8052
      250     8053    2        IF PS_TAG='D'
      251     8054    3        THEN DO; /* Shrink segment to fit */
      252     8055
      253     8056    3             P$ = POINTER$;
      254     8057
      255     8058    4             DO I = 0 TO SIZEW(PS_PTRS$) - 1;
      256     8059
      257     8060    4                  PS_PTRS$(I) = ADDR(NIL);
      258     8061
      259     8062    4             END;
      260     8063
      261     8064    4             DO WHILE (P$->BLOCK.IDENT ~= -1);
      262     8065
      263     8066    4                  PS_PTRS$(P$ -> BLOCK.IDENT) = P$;
      264     8067
      265     8068    4                  P$ = ADDR(P$->BLOCK.DATA(P$->BLOCK.ENTRIES * P$->BLOCK.WORDS));
      266     8069
      267     8070    4             END;
      268     8071
      269     8072    3             ACTUAL = POFFW(P$, POINTER$) + 1;
      270     8073
      271     8074    3        END;
      272     8075
      273     8076    2        HISTORY = ACTUAL;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:11   
      274     8077
      275     8078    2        RETURN;
      276     8079
      277     8080    2   END ATTACH;
      278     8081        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:12   
      279     8082    1   COLLECT: PROC (INDX, TARGET, COUNT, SIZE, OFFSET);
      280     8083
      281     8084    2   DCL INDX UBIN;
      282     8085    2   DCL TARGET UBIN;
      283     8086    2   DCL COUNT UBIN;
      284     8087    2   DCL SIZE UBIN;
      285     8088    2   DCL OFFSET UBIN;
      286     8089    2   DCL I UBIN;
      287     8090
      288     8091    2        CALL DEFAULT (COUNT, COLLECT_COUNT, 1);
      289     8092    2        CALL DEFAULT (SIZE, COLLECT_SIZE, 1);
      290     8093    2        CALL DEFAULT (OFFSET, COLLECT_OFFSET, 0);
      291     8094
      292     8095    2        CALL PSL$LOCATE (INDX, P$);
      293     8096
      294     8097    2        TARGET = 0;
      295     8098
      296     8099    3        DO I = 1 TO COLLECT_COUNT;
      297     8100
      298     8101    3             TARGET = TARGET + P$ -> BLOCK.DATA(COLLECT_OFFSET);
      299     8102
      300     8103    3             COLLECT_OFFSET = COLLECT_OFFSET + COLLECT_SIZE;
      301     8104
      302     8105    3        END;
      303     8106
      304     8107    2        RETURN;
      305     8108
      306     8109    2   END COLLECT;
      307     8110        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:13   
      308     8111    1   TRANSFER: PROC (INDX, TARGET);
      309     8112
      310     8113    2   DCL INDX UBIN;
      311     8114    2   DCL TARGET (0:0) UBIN WORD;
      312     8115    2   DCL I UBIN;
      313     8116
      314     8117    2        CALL PSL$LOCATE (INDX, P$);
      315     8118
      316     8119    3        DO I = 0 TO P$ -> BLOCK.ENTRIES - 1;
      317     8120
      318     8121    3             TARGET(I) = P$ -> BLOCK.DATA(I);
      319     8122
      320     8123    3        END;
      321     8124
      322     8125    2        RETURN;
      323     8126
      324     8127    2   END TRANSFER;
      325     8128        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:14   
      326     8129    1   DEFAULT: PROC (IN_VAL, OUT_VAL, DEFAULT_VALUE);
      327     8130
      328     8131    2   DCL IN_VAL UBIN;
      329     8132    2   DCL OUT_VAL UBIN;
      330     8133    2   DCL DEFAULT_VALUE UBIN;
      331     8134
      332     8135    2        IF ADDR(IN_VAL) = ADDR(NIL)
      333     8136    2        THEN
      334     8137    2             OUT_VAL = DEFAULT_VALUE;
      335     8138    2        ELSE
      336     8139    2             OUT_VAL = IN_VAL;
      337     8140
      338     8141    2        RETURN;
      339     8142
      340     8143    2   END DEFAULT;
      341     8144        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:15   
      342     8145    1   FIND_END_OF_INTERVAL: PROC;
      343     8146
      344     8147    2        PS_LOGFILE_KEY.COUNT = 5;
      345     8148    2        PS_LOGFILE_KEY.UTS = PS_END_UTS;
      346     8149    2        PS_LOGFILE_KEY.TAG = 'Z';
      347     8150
      348     8151    3        CALL M$PRECORD (POSITION_LOGFILE) WHENALTRETURN DO; END;
      349     8152
      350     8153             /* ALTRET just means that we didn't have an exact match for the
      351     8154                record key.  In fact, it would be more of a suprise if we
      352     8155                didn't altret here.
      353     8156
      354     8157                That should have left us positioned at the next record
      355     8158                (if any) AFTER the last one we really want, or at EOF.
      356     8159                Backing up by one will put us at the last selected record. */
      357     8160
      358     8161    2        CALL M$PRECORD (SCAN_BACKWARDS)
      359     8162    3        WHENALTRETURN DO;
      360     8163
      361     8164
      362     8165    3             IF B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.CODE = %E$BOF
      363     8166    3             THEN
      364     8167    3                  CALL PSE$ERRMSG (E$PS_NO_DATA, WARNING#);
      365     8168    3             ELSE
      366     8169    3                  CALL PSE$ERRMSG (, SERIOUS#);
      367     8170
      368     8171    3        END;
      369     8172
      370     8173             /* Now back up enough to include all the records that were
      371     8174                written at the "same" time.  Let's hope that they will be
      372     8175                within 1/2 minute of this one.  (It could be worse if a
      373     8176                FEP was taking an abnormaly long time to respond, but this
      374     8177                gives us the best chance of finding the right point.)     */
      375     8178
      376     8179    2        TEMP_UTS = PS_LOGFILE_KEY.UTS; /* UNAL DATA WORKAROUND */
      377     8180    2        CALL XUD$UTS_ADJ_25TH (TEMP_UTS, TEMP_UTS, -30*%UTS_25TH_SEC#);
      378     8181    2        PS_LOGFILE_KEY.UTS = TEMP_UTS;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:16   
      379     8182    3        CALL M$PRECORD (POSITION_LOGFILE) WHENALTRETURN DO; END;
      380     8183             /* Again, we dont expect to find exactly that key. */
      381     8184    2   ANOTHER_ALTRET:
      382     8185
      383     8186    2        IF PS_LOGFILE_KEY.UTS <= TIME_NOW
      384     8187    2        THEN
      385     8188    2             CALL PSE$ERRMSG (E$PS_NO_DATA, WARNING#);
      386     8189
      387     8190    2        TIME_NOW = PS_LOGFILE_KEY.UTS;
      388     8191
      389     8192    2        RETURN;
      390     8193
      391     8194    2   END FIND_END_OF_INTERVAL;
      392     8195        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:17   
      393     8196    1   WRITE_LOG: PROC(POINTER$, SIZE, TIME, TAG);
      394     8197
      395     8198    2   DCL POINTER$ PTR;
      396     8199    2   DCL SIZE UBIN WORD;
      397     8200    2   DCL TIME UBIN;
      398     8201    2   DCL TAG CHAR (1) UNAL;
      399     8202
      400     8203
      401     8204    2        WRITE_LOGFILE.BUF_.BUF$ = POINTER$;
      402     8205    2        WRITE_LOGFILE.BUF_.BOUND = (SIZE * 4) - 1;
      403     8206
      404     8207    2        PS_LOGFILE_KEY.UTS = TIME;
      405     8208    2        PS_LOGFILE_KEY.TAG = TAG;
      406     8209    2        PS_LOGFILE_KEY.COUNT = 5;
      407     8210
      408     8211    2        OPEN_LOGFILE.V.RES# = PS_FILE_PARAMS.RES@;
      409     8212    2        OPEN_LOGFILE.V.ASN# = PS_FILE_PARAMS.ASN@;
      410     8213    2        OPEN_LOGFILE.V.FUN# = %CREATE#;
      411     8214    2        OPEN_LOGFILE.V.SHARE# = %IN#;
      412     8215
      413     8216    2        WAIT_COUNT = 6;
      414     8217
      415     8218    2        CALL PSL$TIME (TIME, NOW);
      416     8219    2        IF NOT DCBADDR(DCBNUM(F$LOG))->F$DCB.FCD
      417     8220    2        THEN CALL M$OPEN (OPEN_LOGFILE) ALTRET (OOGH);
      418     8221    2        IF DCBADDR(DCBNUM(F$LOG))->F$DCB.ORG ~= %KEYED#
      419     8222    2        THEN CALL PSE$ERRMSG(E$PS_BAD_FILE,SERIOUS#);
      420     8223    2        CALL M$WRITE (WRITE_LOGFILE) ALTRET (OOGH);
      421     8224    2        CALL M$TRUNC(TRUNC_LOGFILE);
      422     8225
      423     8226    2        IF NOT PS_SUMMARY_ONLY
      424     8227    2        THEN
      425     8228    2             CALL PSE$GRIPE (E$PS_SNAPPED, , VECTOR(PS_LOGFILE_KEY.TAG),
      426     8229    2                  VECTOR(NOW));
      427     8230
      428     8231    2        RETURN;
      429     8232
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:18   
      430     8233
      431     8234    2   OOGH: ;
      432     8235
      433     8236    2        IF B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.CODE ~= %E$FILEBUSY
      434     8237    2        THEN CALL PSE$ERRMSG ( , SERIOUS#);
      435     8238
      436     8239    2        IF WAIT_COUNT > 0
      437     8240    3        THEN DO;
      438     8241
      439     8242    3             CALL M$SENV;
      440     8243
      441     8244    3             WAIT_COUNT = WAIT_COUNT - 1;
      442     8245
      443     8246    3             FPT_WAIT.V.UNITS# = 5;
      444     8247
      445     8248    3             CALL PSE$GRIPE (E$PS_FILE_BUSY, INFORMATION#);
      446     8249
      447     8250    3             CALL M$WAIT (FPT_WAIT);
      448     8251
      449     8252    3             CALL M$RENV;
      450     8253
      451     8254    3             CALL M$RETRY;
      452     8255
      453     8256    3        END;
      454     8257
      455     8258    2        CALL PSE$GRIPE (E$PS_FILE_REALLY_BUSY, SERIOUS#,
      456     8259    2             VECTOR(PS_LOGFILE_KEY.TAG), VECTOR(NOW));
      457     8260
      458     8261    2        RETURN;
      459     8262
      460     8263    2   END WRITE_LOG;
      461     8264        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:19   
      462     8265    1   DETACH: PROC (DISP_FLAG, LOG_FLAG, POINTER$, OLD_POINTER$,
      463     8266    1             SIZE, OLD_SIZE) ALTRET;
      464     8267
      465     8268    2   DCL DISP_FLAG BIT(1) UNAL; /* Yes, I know. */
      466     8269    2   DCL LOG_FLAG BIT(1) UNAL; /* Yes, I know. */
      467     8270    2   DCL POINTER$ PTR;
      468     8271    2   DCL OLD_POINTER$ PTR;
      469     8272    2   DCL SIZE UBIN WORD;
      470     8273    2   DCL OLD_SIZE UBIN WORD;
      471     8274
      472     8275    2        IF NOT DISP_FLAG AND NOT LOG_FLAG THEN ALTRETURN;
      473     8276
      474     8277    2        IF OLD_SIZE ~= 0
      475     8278    2        THEN
      476     8279    2             CALL PSM$FREESEG (OLD_POINTER$);
      477     8280
      478     8281    2        OLD_SIZE = 0;
      479     8282
      480     8283    2        IF DISP_FLAG
      481     8284    3        THEN DO;
      482     8285
      483     8286    3             OLD_POINTER$ = POINTER$;
      484     8287    3             OLD_SIZE = SIZE;
      485     8288
      486     8289    3             POINTER$ = ADDR(NIL);
      487     8290    3             SIZE = 0;
      488     8291
      489     8292    3        END;
      490     8293
      491     8294    3        ELSE DO;
      492     8295
      493     8296    3             IF SIZE ~= 0
      494     8297    3             THEN
      495     8298    3                  CALL PSM$FREESEG (POINTER$);
      496     8299
      497     8300    3             SIZE = 0;
      498     8301
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:20   
      499     8302    3        END;
      500     8303
      501     8304    2        RETURN;
      502     8305
      503     8306    2   END DETACH;
      504     8307        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:21   
      505     8308    1   INITIATE_PROCESS: PROC;
      506     8309
      507     8310    2        IF PS_MODE ~= DISPLAY_MODE#
      508     8311    3        THEN DO;
      509     8312
      510     8313    3             OPEN_LOGFILE.V.FUN# = %IN#;
      511     8314    3             OPEN_LOGFILE.V.SHARE# = %ALL#;
      512     8315    3             OPEN_LOGFILE.V.RES# = PS_FILE_PARAMS.RES@;
      513     8316    3             OPEN_LOGFILE.V.ASN# = PS_FILE_PARAMS.ASN@;
      514     8317
      515     8318    3             CALL M$OPEN (OPEN_LOGFILE) ALTRET (CANT_OPEN_FOR_READ);
      516     8319
      517     8320    4             DO NEVER;
      518     8321
      519     8322    4   CANT_OPEN_FOR_READ: ;
      520     8323
      521     8324    4                  CALL PSE$ERRMSG (, SERIOUS#);
      522     8325    4             END;
      523     8326
      524     8327    3             PS_LOGFILE_KEY.COUNT = 5;
      525     8328    3             PS_LOGFILE_KEY.UTS = PS_START_UTS;
      526     8329    3             PS_LOGFILE_KEY.TAG = 'D';
      527     8330
      528     8331    3             CALL M$PRECORD (POSITION_LOGFILE) ALTRET (IGNORE_POSITION_ERROR);
      529     8332
      530     8333    3   IGNORE_POSITION_ERROR: ;
      531     8334
      532     8335    3             TIME_NOW = PS_LOGFILE_KEY.UTS;
      533     8336    3             PUNT_COUNTER = 0;
      534     8337
      535     8338    3        END;
      536     8339
      537     8340    2        FIRST_TIME = (PS_PUNT_COUNT > 0);
      538     8341
      539     8342    2        PS_WORKING_FLAGS = PS_DISPLAY_FLAGS;
      540     8343    2        PS_WORKING_FLAGS.MOUSE = %NO#;
      541     8344    2        PS_WORKING_FLAGS.FEP = %NO#;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:22   
      542     8345    2        IF PS_WORKING_FLAGS = %NO#
      543     8346    2        THEN
      544     8347    2             PS_PMDAT_FLAGS.DISPLAY = %NO#;
      545     8348    2        ELSE
      546     8349    2             PS_PMDAT_FLAGS.DISPLAY = %YES#;
      547     8350
      548     8351    2        PS_WORKING_FLAGS = PS_LOG_FLAGS;
      549     8352    2        PS_WORKING_FLAGS.MOUSE = %NO#;
      550     8353    2        PS_WORKING_FLAGS.FEP = %NO#;
      551     8354    2        IF PS_WORKING_FLAGS = %NO#
      552     8355    2        THEN
      553     8356    2             PS_PMDAT_FLAGS.LOG = %NO#;
      554     8357    2        ELSE
      555     8358    2             PS_PMDAT_FLAGS.LOG = %YES#;
      556     8359
      557     8360    2        PS_OLD_COLLECT = '0'B;
      558     8361    2        PS_PMDAT_FOUND = '0'B;
      559     8362
      560     8363    2        IF PS_SUMMARY_ITEMS = 0
      561     8364    2        THEN
      562     8365    2             PS_DISPLAY_FLAGS.SUMMARY = %NO#;
      563     8366
      564     8367    2        IF PS_DISPLAY_FLAGS.SUMMARY
      565     8368    3        THEN DO;
      566     8369
      567     8370
      568     8371    3             PS_SUMMARY_HEADER = 'Interval end';
      569     8372    3             CPOS1 = 14;
      570     8373
      571     8374    3             PS_SUMMARY_FORMAT = '%A';
      572     8375    3             CPOS2 = 4;
      573     8376
      574     8377    4             DO I = 0 TO PS_SUMMARY_ITEMS - 1;
      575     8378
      576     8379    4                  ITEM = PS_SUMMARY_LIST (I);
      577     8380
      578     8381    4                  TEMP = PS_SUMMARY_HEADER;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:23   
      579     8382
      580     8383    4                  CALL CONCAT (PS_SUMMARY_HEADER, SUBSTR(TEMP, 0, CPOS1),
      581     8384    4                       ADDR(V_TABLE.TITLE(ITEM)) -> TEXTC.TEXT);
      582     8385
      583     8386    4                  LEN = V_TABLE.TITLE.LEN(ITEM);
      584     8387
      585     8388    4                  CPOS1 = CPOS1 + LEN + 2;
      586     8389
      587     8390    4                  IF V_TABLE.MODE(ITEM) = PERCENT#
      588     8391    5                  THEN DO;
      589     8392
      590     8393    5                       TEMP = PS_SUMMARY_FORMAT;
      591     8394
      592     8395    5                       CALL CONCAT (PS_SUMMARY_FORMAT, SUBSTR(TEMP, 0, CPOS2),
      593     8396    5                            '%', SUBSTR(PS_DIGITS, LEN-2, 1), 'D.%D');
      594     8397
      595     8398    5                       CPOS2 = CPOS2 + 8;
      596     8399
      597     8400    5                  END;
      598     8401
      599     8402    5                  ELSE DO;
      600     8403
      601     8404    5                       TEMP = PS_SUMMARY_FORMAT;
      602     8405
      603     8406    5                       CALL CONCAT (PS_SUMMARY_FORMAT, SUBSTR(TEMP, 0, CPOS2), '%',
      604     8407    5                            SUBSTR(PS_DIGITS, LEN, 1), 'D');
      605     8408
      606     8409    5                       CPOS2 = CPOS2 + 5;
      607     8410
      608     8411    5                  END;
      609     8412
      610     8413    4             END;
      611     8414
      612     8415    3        END;
      613     8416
      614     8417    2        PS_WORKING_FLAGS = %NO#;
      615     8418    2        PS_WORKING_FLAGS.SUMMARY = %YES#;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:24   
      616     8419
      617     8420    2        IF PS_WORKING_FLAGS = PS_DISPLAY_FLAGS
      618     8421    2             AND PS_MODE <= GLOM_MODE#
      619     8422    3        THEN DO;
      620     8423
      621     8424    3             PS_SUMMARY_ONLY = %YES#;
      622     8425    3             CALL PSD$SUM_HEAD;
      623     8426    3        END;
      624     8427
      625     8428    2        ELSE PS_SUMMARY_ONLY = %NO#;
      626     8429
      627     8430    2        DELTA_T = 0;
      628     8431    2        PS_STATS_HITS = 0;
      629     8432
      630     8433    2        IF PS_MODE = BARGRAPH_MODE#
      631     8434    3        THEN DO;
      632     8435
      633     8436    3             CALL PSR$IDENT (0, BARGRAPH_TITLE,
      634     8437    3                  BARGRAPH_VECTORS.TITLE_,
      635     8438    3                  BARGRAPH_VECTORS.SCALE_,
      636     8439    3                  BARGRAPH_VECTORS.LOW_,
      637     8440    3                  BARGRAPH_VECTORS.HIGH_);
      638     8441
      639     8442    3             CALL X$WRITE (PS_FDS, VECTOR(BARGRAPH_FMT),
      640     8443    3                  BARGRAPH_VECTORS.TITLE_,
      641     8444    3                  BARGRAPH_VECTORS.SCALE_,
      642     8445    3                  BARGRAPH_VECTORS.LOW_,
      643     8446    3                  BARGRAPH_VECTORS.HIGH_);
      644     8447
      645     8448    3             VLP_HDR.TITL.L# = LENGTHC(VLP_HDR.TITL.TITLE#);
      646     8449    3             VLP_HDR.TITL.TITLE# = PS_BUFFER;
      647     8450
      648     8451    3             CALL M$DEVICE (SET_HEADER_ON_LP) ALTRET (HEADER_REJECTED);
      649     8452
      650     8453    4             DO NEVER;
      651     8454
      652     8455    4   HEADER_REJECTED:
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:25   
      653     8456
      654     8457    4                  CALL PSE$ERRMSG (, SERIOUS#);
      655     8458
      656     8459    4             END;
      657     8460
      658     8461    3        END;
      659     8462
      660     8463    2        RETURN;
      661     8464
      662     8465    2   END INITIATE_PROCESS;
      663     8466        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:26   
      664     8467    1   PROCESS_PMDAT: PROC;
      665     8468    2        CALL PSL$EVAL (P_NOW#, TIME_NOW);
      666     8469    2        PS_COLLECT.UTS = TIME_NOW;
      667     8470
      668     8471    2        CALL COLLECT(S_UXEQTIME#, PS_COLLECT.USRXEQ, 8);
      669     8472    2        CALL COLLECT(S_USRVTIME#, PS_COLLECT.USRSRV, 8);
      670     8473    2        CALL COLLECT(S_MXEQTIME#, PS_COLLECT.MONXEQ, 8);
      671     8474    2        CALL COLLECT(S_MIDLTIME#, PS_COLLECT.IDLE, 8);
      672     8475    2        CALL COLLECT(S_MIDLWIO#, PS_COLLECT.IDLWIO, 8);
      673     8476    2        CALL COLLECT(S_MIDLWRES#, PS_COLLECT.IDLWRES, 8);
      674     8477    2        CALL COLLECT(S_MIDLWRESIO#, PS_COLLECT.IDLWRESIO, 8);
      675     8478    2        CALL COLLECT(P_CALCNT#, PS_COLLECT.CALCNT, 8);
      676     8479    2        CALL COLLECT (P_SCHD#, PS_COLLECT.SCHEDS, 8);
      677     8480    2        CALL COLLECT (P_RUE#, PS_COLLECT.EVENTS, 8);
      678     8481    2        CALL COLLECT (P_IOS#, PS_COLLECT.IOS, 10);
      679     8482    2        CALL PSL$EVAL (P_ETMF#, PS_COLLECT.ETMF);
      680     8483    2        CALL PSL$EVAL (P_RT90#, PS_COLLECT.RT90);
      681     8484    2        CALL PSL$EVAL (P_AVGETMF#, PS_OLD_COLLECT.ETMF);
      682     8485    2        CALL PSL$EVAL (P_AVGRT90#, PS_OLD_COLLECT.RT90);
      683     8486    2        CALL PSL$EVAL (P_STARTUP#, PS_STARTUP);
      684     8487    2        CALL TRANSFER (S_CUIS#, PS_COLLECT.USERS);
      685     8488    2        CALL PSL$EVAL (S_CTUIS#, PS_COLLECT.USERS.TOTAL);
      686     8489    2        CALL TRANSFER (P_AUIS#, PS_OLD_COLLECT.USERS);
      687     8490    2        CALL PSL$EVAL (P_IOLOAD#, PS_COLLECT.IOLOAD);
      688     8491    2        CALL PSL$EVAL (P_AVGIOL#, PS_OLD_COLLECT.IOLOAD);
      689     8492    2        CALL PSL$EVAL (P_AVAIL_MEM#, PS_COLLECT.AVAIL_MEM);
      690     8493    2        CALL PSL$EVAL (P_AVGAVAIL_MEM#, PS_OLD_COLLECT.AVAIL_MEM);
      691     8494
      692     8495    2        CALL XUD$UTS_DIFF (PS_UPTIME, TIME_NOW, PS_STARTUP);
      693     8496    2        PS_PMDAT_FOUND = '1'B;
      694     8497
      695     8498    2        IF PUNT_COUNTER = 0
      696     8499    2        THEN PS_PREVIOUS_TIME = PS_STARTUP;
      697     8500
      698     8501    2        PS_COLLECT.TOTAL = PS_COLLECT.USRXEQ +
      699     8502    2             PS_COLLECT.USRSRV + PS_COLLECT.MONXEQ +
      700     8503    2             PS_COLLECT.IDLWIO + PS_COLLECT.IDLWRES +
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:27   
      701     8504    2             PS_COLLECT.IDLWRESIO + PS_COLLECT.IDLE;
      702     8505
      703     8506    2        CALL PSL$LOCATE (P_IOS#, P_IOS$);
      704     8507
      705     8508    2        PS_COLLECT.IOS = PS_COLLECT.IOS - P_IOS$ -> BLOCK.DATA(%DV_MPC);
      706     8509
      707     8510    2        PS_COLLECT.SPECIFIC_IOS.DISK = P_IOS$ -> BLOCK.DATA(%DV_DP);
      708     8511
      709     8512    2        PS_COLLECT.SPECIFIC_IOS.TAPE = P_IOS$ -> BLOCK.DATA(%DV_MT);
      710     8513
      711     8514    2        PS_COLLECT.SPECIFIC_IOS.OTHER = PS_COLLECT.IOS -
      712     8515    2             PS_COLLECT.SPECIFIC_IOS.DISK - PS_COLLECT.SPECIFIC_IOS.TAPE;
      713     8516
      714     8517    2        IF PS_COLLECT.USRSRV - PS_OLD_COLLECT.USRSRV > 3435973
      715     8518    2        THEN
      716     8519    2             PS_COLLECT.USEC_PER_PMME = (PS_COLLECT.USRSRV -
      717     8520    2                  PS_OLD_COLLECT.USRSRV) / ((PS_COLLECT.CALCNT -
      718     8521    2                  PS_OLD_COLLECT.CALCNT) / 10000);
      719     8522    2        ELSE
      720     8523    2             PS_COLLECT.USEC_PER_PMME = ((PS_COLLECT.USRSRV - PS_OLD_COLLECT.USRSRV)
      721     8524    2                  * 10000) / (PS_COLLECT.CALCNT - PS_OLD_COLLECT.CALCNT);
      722     8525
      723     8526    2        IF PS_COLLECT.USRSRV > 3435973
      724     8527    2        THEN
      725     8528    2             PS_OLD_COLLECT.USEC_PER_PMME = PS_COLLECT.USRSRV_SBIN /
      726     8529    2                  ( PS_COLLECT.CALCNT_SBIN / 10000 );
      727     8530    2        ELSE
      728     8531    2             PS_OLD_COLLECT.USEC_PER_PMME = ( PS_COLLECT.USRSRV_SBIN * 10000 ) /
      729     8532    2                  PS_COLLECT.CALCNT_SBIN ;
      730     8533
      731     8534    2        CALL XUD$UTS_DIFF (PS_ELAPSED_TIME, TIME_NOW, PS_PREVIOUS_TIME);
      732     8535
      733     8536    2        IF PS_MODE ~= DISPLAY_MODE#
      734     8537    2             AND NOT FIRST_TIME
      735     8538    2        THEN
      736     8539    2             CALL PSG$GATHER ALTRET (SKIP_THIS_INTERVAL);
      737     8540
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:28   
      738     8541    2        IF PS_MODE <= GLOM_MODE#
      739     8542    2             AND NOT FIRST_TIME
      740     8543    3        THEN DO;
      741     8544
      742     8545    3             IF (PS_DISPLAY_FLAGS) AND NOT (PS_SUMMARY_ONLY)
      743     8546    4             THEN DO;
      744     8547
      745     8548    4                  CALL M$LINES (GET_LINES_REMAINING);
      746     8549
      747     8550    4                  IF FIRST_TIME OR (LINES_REMAINING.RLINES# > 0)
      748     8551    4                  THEN
      749     8552    4                       CALL PSD$EJECT;
      750     8553
      751     8554    4                  CALL PSD$HEADER (PS_PREVIOUS_TIME, TIME_NOW);
      752     8555    4             END;
      753     8556
      754     8557    3             IF PS_DISPLAY_FLAGS.CPU
      755     8558    3             THEN
      756     8559    3                  CALL PSD$CPU;
      757     8560
      758     8561    3             IF PS_DISPLAY_FLAGS.SCPU
      759     8562    3             THEN
      760     8563    3                  CALL PSD$SCPU;
      761     8564
      762     8565    3             IF PS_DISPLAY_FLAGS.RESOURCES
      763     8566    3             THEN
      764     8567    3                  CALL PSD$RESRCE;
      765     8568
      766     8569    3             IF PS_DISPLAY_FLAGS.DEVICES
      767     8570    3             THEN
      768     8571    3                  CALL PSD$DEVICES;
      769     8572
      770     8573    3             IF PS_DISPLAY_FLAGS.CHANNELS
      771     8574    3             THEN
      772     8575    3                  CALL PSD$CHANNELS;
      773     8576
      774     8577    3             IF PS_DISPLAY_FLAGS.PROCS
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:29   
      775     8578    3             THEN
      776     8579    3                  CALL PSD$PROCS;
      777     8580
      778     8581    3             IF PS_DISPLAY_FLAGS.FAULT
      779     8582    3             THEN
      780     8583    3                  CALL PSD$FAULT;
      781     8584
      782     8585    3             IF PS_DISPLAY_FLAGS.HISTOGRAMS
      783     8586    3             THEN
      784     8587    3                  CALL PSD$HISTO;
      785     8588
      786     8589    3             IF PS_DISPLAY_FLAGS.SUMMARY
      787     8590    3             THEN
      788     8591    3                  CALL PSD$SUMMARY;
      789     8592
      790     8593    3        END;
      791     8594
      792     8595    2   SKIP_THIS_INTERVAL: ;
      793     8596
      794     8597    2        PS_OLD_COLLECT = PS_COLLECT;
      795     8598    2        PS_OLD_PTRS$ = PS_PTRS$;
      796     8599
      797     8600    2        RETURN;
      798     8601
      799     8602    2   END PROCESS_PMDAT;
      800     8603        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:30   
      801     8604    1   TERMINATE_PROCESS: PROC;
      802     8605
      803     8606    2        IF PS_MODE ~= DISPLAY_MODE#
      804     8607    2        THEN
      805     8608    2             CALL PSR$RESULTS;
      806     8609
      807     8610    2        IF PS_SUMMARY_ONLY
      808     8611    2        THEN
      809     8612    2             CALL PSD$SKIP;
      810     8613
      811     8614    2        RETURN;
      812     8615
      813     8616    2   END TERMINATE_PROCESS;
      814     8617        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:31   
      815     8618        /* PSD$DISP here                                                    */
      816     8619    1        CALL INITIATE_PROCESS;
      817     8620
      818     8621    1        IF PS_MODE = DISPLAY_MODE#
      819     8622    2        THEN DO PUNT_COUNTER = 0 TO PS_PUNT_COUNT;
      820     8623
      821     8624    2             PS_PREVIOUS_TIME = PS_TIME_NOW;
      822     8625    2             CALL M$TIME (FPT_TIME);
      823     8626    2             CALL XUD$UTS_ADJUST (NEXT_WAKEUP_TIME, TIME_NOW, PS_INTERVAL*%
              8626                      UTS_CSEC_MIN# + DELTA_T);
      824     8627    2             PS_TIME_NOW = TIME_NOW;
      825     8628
      826     8629        /* First do all the host displays for this interval, since we have no
      827     8630           trouble getting that data exactly when we feel like it.          */
      828     8631
      829     8632    2             IF PS_PMDAT_FLAGS.DISPLAY OR PS_PMDAT_FLAGS.LOG
      830     8633    3             THEN DO;
      831     8634
      832     8635    3                  CALL ATTACH(PS_PMDAT$, PS_PMDAT_SIZE, PS_OLD_PMDAT_SIZE,
              8635                           PS_NEEDED_PMDAT_SIZE, ENTADDR(PSD$GET_PMDAT));
      833     8636
      834     8637    3                  IF PS_PMDAT_FLAGS.LOG
      835     8638    3                  THEN CALL WRITE_LOG(PS_PMDAT$, PS_PMDAT_SIZE, PS_TIME_NOW, 'D');
      836     8639
      837     8640    3                  CALL PROCESS_PMDAT;
      838     8641
      839     8642    3                  CALL DETACH (PS_PMDAT_FLAGS.DISPLAY, PS_PMDAT_FLAGS.LOG,
      840     8643    3                       PS_PMDAT$, PS_OLD_PMDAT$,
      841     8644    3                       PS_PMDAT_SIZE, PS_OLD_PMDAT_SIZE);
      842     8645
      843     8646    3             END /*IF PMDAT */;
      844     8647
      845     8648    2             IF PS_DISPLAY_FLAGS.MOUSE OR PS_LOG_FLAGS.MOUSE
      846     8649    3             THEN DO;
      847     8650
      848     8651    3                  CALL ATTACH(PS_MOUSE$, PS_MOUSE_SIZE, PS_OLD_MOUSE_SIZE,
              8651                           PS_NEEDED_MOUSE_SIZE, ENTADDR(PSD$GET_MOUSE));
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:32   
      849     8652
      850     8653    3                  IF PS_LOG_FLAGS.MOUSE
      851     8654    3                  THEN CALL WRITE_LOG(PS_MOUSE$, PS_MOUSE_SIZE, PS_TIME_NOW, 'M');
      852     8655
      853     8656    3                  IF PS_DISPLAY_FLAGS.MOUSE
      854     8657    3                  THEN CALL PSD$MOUSE;
      855     8658
      856     8659    3                  CALL DETACH (PS_DISPLAY_FLAGS.MOUSE, PS_LOG_FLAGS.MOUSE,
      857     8660    3                       PS_MOUSE$, PS_OLD_MOUSE$,
      858     8661    3                       PS_MOUSE_SIZE, PS_OLD_MOUSE_SIZE);
      859     8662
      860     8663    3             END /*IF MoUsE */;
      861     8664
      862     8665    2             IF PS_DISPLAY_FLAGS.FEP OR PS_LOG_FLAGS.FEP
      863     8666    3             THEN DO;
      864     8667
      865     8668    3                  CALL ATTACH(PS_FEP$, PS_FEP_SIZE, PS_OLD_FEP_SIZE, PS_NEEDED_FEP_SIZE
              8668                           , ENTADDR(PSD$GET_FEP)) ALTRET(SLEEP);
      866     8669
      867     8670    3                  IF PS_LOG_FLAGS.FEP
      868     8671    3                  THEN CALL WRITE_LOG(PS_FEP$, PS_FEP_SIZE, PS_TIME_NOW, 'F');
      869     8672
      870     8673    3                  IF NOT FIRST_TIME
      871     8674    3                  THEN CALL PSD$FEP;
      872     8675
      873     8676    3                  CALL DETACH (PS_DISPLAY_FLAGS.FEP, PS_LOG_FLAGS.FEP,
      874     8677    3                       PS_FEP$, PS_OLD_FEP$,
      875     8678    3                       PS_FEP_SIZE, PS_OLD_FEP_SIZE);
      876     8679
      877     8680    3             END /*IF FEP */;
      878     8681
      879     8682        /* Now get ready for end-of-interval stuff...                       */
      880     8683
      881     8684    2   SLEEP:    IF FIRST_TIME
      882     8685    2             THEN PS_OLD_COLLECT.UTS = 0; /* for BARGRAPH and REPLAY stuff */
      883     8686
      884     8687    2             SNORED = %NO#;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:33   
      885     8688
      886     8689    3             DO UNTIL NOT CONTINUE_SLEEPING;
      887     8690
      888     8691    3                  CONTINUE_SLEEPING = %NO#;
      889     8692
      890     8693    3                  CALL M$TIME (FPT_TIME);
      891     8694
      892     8695    3                  IF FIRST_SLEEP_THIS_INTERVAL AND TIME_NOW >= NEXT_WAKEUP_TIME
      893     8696    4                  THEN DO; /* WE OVER-SHOT WHILE DOING DISPLAYS */
      894     8697    4                       CALL XUD$UTS_DIFF (DELTA_T, TIME_NOW, NEXT_WAKEUP_TIME);
      895     8698    4                       CALL XUD$UTS_ADJUST (NEXT_WAKEUP_TIME, NEXT_WAKEUP_TIME,
      896     8699    4                            (DELTA_T/%UTS_CSEC_MIN# + 1)*%UTS_CSEC_MIN#);
      897     8700    4                  END;
      898     8701
      899     8702    3                  CALL XUD$UTS_DIFF (DELTA_T, NEXT_WAKEUP_TIME, TIME_NOW);
      900     8703    3                  DELTA_T = (DELTA_T + 50) / 100;
      901     8704
      902     8705
      903     8706    3                  IF PUNT_COUNTER < PS_PUNT_COUNT AND DELTA_T > 0
      904     8707    3                  THEN CONTINUE_SLEEPING = %YES#;
      905     8708
      906     8709    3                  IF DELTA_T < 0 THEN CONTINUE_SLEEPING = %NO#;
      907     8710
      908     8711    4                  IF CONTINUE_SLEEPING THEN DO;
      909     8712
      910     8713    4                       IF NOT PS_SUMMARY_ONLY AND NOT SNORED
      911     8714    5                       THEN DO;
      912     8715    5                            CALL PSE$GRIPE (E$PS_SLEEPING);
      913     8716    5                            SNORED = %YES#;
      914     8717    5                       END;
      915     8718
      916     8719    4                       FPT_WAIT.V.UNITS# = DELTA_T;
      917     8720    4                       CALL M$WAIT (FPT_WAIT);
      918     8721
      919     8722    4                  END /* IF CONTINUE_SLEEPING */;
      920     8723    3             END /*WHILE CONTINUE_SLEEPING */;
      921     8724
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:34   
      922     8725    2             FIRST_TIME = %NO#;
      923     8726
      924     8727    2        END /* IF DISPLAY_MODE# DO PUNT_COUNTER */;
      925     8728        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:35   
      926     8729    1        ELSE /* NOT DISPLAY_MODE */
      927     8730    2        DO WHILE PS_LOGFILE_KEY.UTS<PS_END_UTS;
      928     8731
      929     8732    2   READ_LOG_FILE:
      930     8733    2             CALL ATTACH(PS_LOGFILE$,
      931     8734    2                  PS_LOGFILE_SIZE,
      932     8735    2                  PS_OLD_LOGFILE_SIZE,
      933     8736    2                  PS_NEEDED_LOGFILE_SIZE,
      934     8737    2                  ENTADDR(PSD$READ_IN)) ALTRET(DONE);
      935     8738
      936     8739    2             CALL XUD$UTS_ADJ_25TH (TEMP_UTS, TIME_NOW, 30 * %UTS_25TH_SEC#);
      937     8740    2             IF PS_LOGFILE_KEY.UTS > TEMP_UTS
      938     8741    3             THEN DO;
      939     8742
      940     8743    3                  PUNT_COUNTER = PUNT_COUNTER + 1;
      941     8744    3                  PS_PREVIOUS_TIME = PS_TIME_NOW;
      942     8745    3                  IF FIRST_TIME
      943     8746    4                  THEN DO;
      944     8747    4                       PS_OLD_COLLECT.UTS = 0; /* for BARGRAPH and REPLAY stuff */
      945     8748    4                       FIRST_TIME = %NO#;
      946     8749
      947     8750    4                       IF PS_MODE = GLOM_MODE#
      948     8751    5                       THEN DO;
      949     8752    5                            CALL FIND_END_OF_INTERVAL;
      950     8753    5                            GOTO READ_LOG_FILE;
      951     8754    5                       END;
      952     8755    4                  END;
      953     8756    3             END;
      954     8757
      955     8758    2             PS_TIME_NOW = PS_LOGFILE_KEY.UTS;
      956     8759
      957     8760    2             IF PS_TAG = 'M' THEN
      958     8761    2                  IF PS_DISPLAY_FLAGS.MOUSE
      959     8762    3                  THEN DO;
      960     8763    3                       PS_MOUSE$ = PS_LOGFILE$;
      961     8764    3                       PS_MOUSE_SIZE = PS_LOGFILE_SIZE;
      962     8765
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:36   
      963     8766    3                       CALL PSD$MOUSE;
      964     8767
      965     8768    3                       PS_LOGFILE$ = PS_OLD_MOUSE$;
      966     8769    3                       PS_LOGFILE_SIZE = PS_OLD_MOUSE_SIZE;
      967     8770    3                       PS_OLD_MOUSE$ = PS_MOUSE$;
      968     8771    3                       PS_OLD_MOUSE_SIZE = PS_MOUSE_SIZE;
      969     8772    3                       PS_MOUSE$ = ADDR (NIL);
      970     8773    3                       PS_MOUSE_SIZE = 0;
      971     8774
      972     8775    3                  END /*IF MoUsE */;
      973     8776    2                  ELSE /* Not interested in MoUsE */;
      974     8777
      975     8778    2             ELSE IF PS_TAG='D'
      976     8779    2                  THEN IF PS_PMDAT_FLAGS.DISPLAY
      977     8780    3                       THEN DO;
      978     8781    3                            PS_PMDAT$ = PS_LOGFILE$;
      979     8782    3                            PS_PMDAT_SIZE = PS_LOGFILE_SIZE;
      980     8783
      981     8784    3                            CALL PROCESS_PMDAT;
      982     8785
      983     8786    4                            DO PS_FEPNO = 0 TO %PS_MAXFE#;
      984     8787    4                                 PS_FEP_STATUS(PS_FEPNO) = %FEP_NONE#;
      985     8788    4                            END /* DO PS_FEPNO */;
      986     8789
      987     8790    3                            PS_LOGFILE$ = PS_OLD_PMDAT$;
      988     8791    3                            PS_LOGFILE_SIZE = PS_OLD_PMDAT_SIZE;
      989     8792    3                            PS_OLD_PMDAT$ = PS_PMDAT$;
      990     8793    3                            PS_OLD_PMDAT_SIZE = PS_PMDAT_SIZE;
      991     8794    3                            PS_PMDAT$ = ADDR (NIL);
      992     8795    3                            PS_PMDAT_SIZE = 0;
      993     8796
      994     8797    3                       END /*IF PMDAT */;
      995     8798    2                       ELSE /* Not interested in PMDAT */;
      996     8799
      997     8800    2                  ELSE IF PS_TAG='F'
      998     8801    2                       THEN IF PS_FEPING
      999     8802    3                            THEN DO;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:37   
     1000     8803    3                                 PS_FEP$ = PS_LOGFILE$;
     1001     8804    3                                 PS_FEP_SIZE = PS_LOGFILE_SIZE;
     1002     8805
     1003     8806    3                                 IF PS_MODE <= GLOM_MODE#
     1004     8807    3                                      AND NOT FIRST_TIME
     1005     8808    3                                 THEN CALL PSD$FEP;
     1006     8809
     1007     8810    3                                 PS_LOGFILE$ = PS_OLD_FEP$;
     1008     8811    3                                 PS_LOGFILE_SIZE = PS_OLD_FEP_SIZE;
     1009     8812    3                                 PS_OLD_FEP$ = PS_FEP$;
     1010     8813    3                                 PS_OLD_FEP_SIZE = PS_FEP_SIZE;
     1011     8814    3                                 PS_FEP$ = ADDR (NIL);
     1012     8815    3                                 PS_FEP_SIZE = 0;
     1013     8816
     1014     8817    3                            END /* IF FEP */;
     1015     8818    2                            ELSE /* Not interested in FEP */;
     1016     8819
     1017     8820    2                       ELSE CALL PSE$ERRMSG(E$PS_BAD_FILE, SERIOUS#);
     1018     8821
     1019     8822
     1020     8823
     1021     8824    2        END /* NOT DISPLAY_MODE# */;
     1022     8825
     1023     8826    2        DO NEVER;
     1024     8827    2   DONE:
     1025     8828    2        END;
     1026     8829    1        CALL TERMINATE_PROCESS;
     1027     8830
     1028     8831    1        RETURN;
     1029     8832
     1030     8833    1   END PSD$DISP;
     1031     8834        %EOD;

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:38   
--  Include file information  --

   XUF_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   XUD_UTS_M.:E05TOU  is referenced.
   PS_PERR_C.:E05TOU  is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   NI_DATA_C.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure PSD$DISP.

   Procedure PSD$DISP requires 1464 words for executable code.
   Procedure PSD$DISP requires 86 words of local(AUTO) storage.

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:39   

 Object Unit name= PSD$DISP                                   File name= PSD$DISP.:E05TOU
 UTS= JUL 30 '97 04:26:29.76 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$LO
    2   DCB   even  none     0      0  M$DO
    3   DCB   even  none     0      0  M$SI
    4   DCB   even  none     0      0  F$LOG
    5   DCB   even  none     0      0  M$ME
    6   DCB   even  none     0      0  M$HLPCG
    7  RtLbCm even  none    30     36  PS_FDS
    8  RtLbCm even  none    32     40  PS_SELECT_RPN
    9  RtLbCm even  none    17     21  PS_STATS_RPN
   10  RtLbCm even  none    34     42  PS_STATS_BUCKET
   11  RoData even  UTS    100    144  PSD$DISP
   12   Data  even  none   132    204  PSD$DISP
   13   Proc  even  none  1464   2670  PSD$DISP
   14  RoData even  none   183    267  PSD$DISP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes            yes      Std        0  PSD$DISP

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
   12    157  B$P$                              12    160  P_NPROCS
   12    161  P_MAXPROCS
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:40   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 PSD$GET_PMDAT
 yes     yes           Std       2 PSD$GET_MOUSE
         yes           Std       0 PSD$FEP
         yes           Std       5 PSE$GRIPE
 yes     yes           Std       2 PSD$READ_IN
 yes     yes           Std       3 XUD$UTS_ADJ_25TH
         yes           Std       5 PSE$ERRMSG
         yes           Std       0 PSD$MOUSE
 yes     yes           Std       3 XUD$UTS_ADJUST
 yes     yes           Std       2 PSD$GET_FEP
 yes     yes           Std       3 XUD$UTS_DIFF
         yes           Std       3 PSM$SEGOX
         yes           Std       3 PSL$LOCATE
         yes           Std       2 PSL$TIME
         yes           Std       1 PSM$FREESEG
         yes           Std       0 PSD$SUM_HEAD
         yes           Std       6 PSR$IDENT
         yes           Std      22 X$WRITE
         yes           Std       3 PSL$EVAL
         yes           Std       1 PSD$EJECT
 yes     yes           Std       0 PSG$GATHER
         yes           Std       0 PSD$RESRCE
         yes           Std       0 PSD$DEVICES
         yes           Std       0 PSD$CPU
         yes           Std       0 PSD$SCPU
         yes           Std       0 PSD$PROCS
         yes           Std       0 PSD$FAULT
         yes           Std       2 PSD$HEADER
         yes           Std       1 PSD$HISTO
         yes           Std       0 PSD$CHANNELS
         yes           Std       0 PSD$SUMMARY
         yes           Std       0 PSR$RESULTS
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:41   
         yes           Std       0 PSD$SKIP
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$LO                                  M$DO
     M$SI                                  F$LOG                                 M$ME
     M$HLPCG                               PS_PMDAT$                             PS_OLD_PMDAT$
     PS_LOGFILE$                           PS_MOUSE$                             PS_OLD_MOUSE$
     PS_FEP$                               PS_OLD_FEP$                           PS_PMDAT_SIZE
     PS_OLD_PMDAT_SIZE                     PS_NEEDED_PMDAT_SIZE                  PS_LOGFILE_SIZE
     PS_OLD_LOGFILE_SIZE                   PS_NEEDED_LOGFILE_SIZE                PS_MOUSE_SIZE
     PS_OLD_MOUSE_SIZE                     PS_NEEDED_MOUSE_SIZE                  PS_FEP_SIZE
     PS_OLD_FEP_SIZE                       PS_NEEDED_FEP_SIZE                    PS_DISPLAY_FLAGS
     PS_LOG_FLAGS                          PS_WORKING_FLAGS                      PS_PMDAT_FLAGS
     PS_LOGFILE_KEY                        PS_TAG                                PS_BUFFER
     PS_INTERVAL                           PS_PREVIOUS_TIME                      PS_ELAPSED_TIME
     PS_UPTIME                             PS_STARTUP                            PS_PUNT_COUNT
     V_TABLE                               PS_FILE_PARAMS                        PS_PTRS$
     PS_OLD_PTRS$                          PS_COLLECT                            PS_OLD_COLLECT
     PS_STATS$                             PS_STATS_HITS                         PS_SUMMARY_LIST
     PS_SUMMARY_ITEMS                      PS_SUMMARY_HEADER                     PS_SUMMARY_FORMAT
r    PS_DIGITS                             PS_SUMMARY_ONLY                       PS_MODE
     PS_TIME_NOW                           PS_START_UTS                          PS_END_UTS
     PS_FEPNO                              PS_FEPING                             PS_USED_FEP_SIZE
     PS_PMDAT_FOUND                        PS_FEP_STATUS                         B$TCB$
     B$JIT$                                B_VECTNIL
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:42   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID                                 ROSID
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:43   


        1        1        /*M*  PSD$DISP    Produce STATS displays                                      */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7       /*X* PLM=5,IND=5,CTI=5,DCI=5,SQB=Y,PRB=Y,DTI=0,ENI=0,AND=Y,ECI=0,CSI=0,THI=0,SDI=5,M
                 7        OC=Y,CRT=1,CLM=5,DMR */
        8        8        /*P*  NAME:    PSD$DISP
        9        9              PURPOSE: This module contains the routines that produce the
       10       10                       once-every-n-minutes STATS displays and performance-log
       11       11                       file entries.                                                  */
       12       12        PSD$DISP: PROC;

     12 13 000000   000000 700200 xent  PSD$DISP     TSX0  ! X66_AUTO_0
        13 000001   000126 000000                    ZERO    86,0
        13 000002   002055 710000 13                 TRA     s:8619

       13       13
       14       14        %INCLUDE CP_6;
       15       95        %INCLUDE CP_6_SUBS;
       16      635        %INCLUDE B_ERRORS_C;
       17     1762        %INCLUDE F$DCB;
       18     1811        %INCLUDE NI_DATA_C;
       19     1924        %INCLUDE PS_DATA_R;
       20     7220        %INCLUDE PS_PERR_C;
       21     7251
       22     7252 S      %INCLUDE B$JIT_C;
       23     7253        %INCLUDE XUD_UTS_M;
       24     7335        %XUD$UTS_ENTRIES;
       25     7367        %XUD_UTS_EQU;
       26     7378         %B$JIT0;
       27     7467         %U$JIT1X;
       28     7470         %M$JIT2X;
       29     7473         %F$JIT3X;
       30     7476         %S$JIT4X;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:44   
       31     7479         %J$JIT5X;
       32     7482         %A$JIT6X;
       33     7485
       34     7486        %B$TCB;
       35     7489
       36     7490        %B$EXCFR;
       37     7508        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:45   
       38     7509
       39     7510        %FPT_TIME (SOURCE=CLOCK,
       40     7511         STCLASS=CONSTANT,
       41     7512         DEST=UTS,
       42     7513         TSTAMP=TIME_NOW);
       43     7532
       44     7533        %FPT_TIME (FPTN=CONVERT_TIME,
       45     7534         STCLASS=CONSTANT,
       46     7535         SOURCE=UTS,
       47     7536         DEST=EXT,
       48     7537         DAY=NOW.DAY@,
       49     7538         DATE=NOW.DATE@,
       50     7539         TIME=NOW.TIME@,
       51     7540         TSTAMP=TIME_NOW);
       52     7559
       53     7560        %FPT_WAIT (UNITS=0,
       54     7561         UETIME=TIME_LEFT);
       55     7575
       56     7576        %FPT_OPEN (FPTN=OPEN_LOGFILE,
       57     7577         DCB=F$LOG,
       58     7578         NAME=PS_FILE_PARAMS.NAME@,
       59     7579         ACCT=PS_FILE_PARAMS.ACCT@,
       60     7580         PASS=PS_FILE_PARAMS.PASS@,
       61     7581         SN=PS_FILE_PARAMS.SN@,
       62     7582         SCRUB=YES,
       63     7583         FUN=CREATE,
       64     7584         EXIST=OLDFILE,
       65     7585         CTG=YES,
       66     7586         SHARE=IN,
       67     7587         IXTNSIZE=300,
       68     7588         XTNSIZE=300,
       69     7589         TYPE='DP',
       70     7590         ORG=KEYED,
       71     7591         ACS=DIRECT);
       72     7700
       73     7701        %FPT_WRITE (FPTN=WRITE_LOGFILE,
       74     7702         DCB=F$LOG,
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:46   
       75     7703         KEY=PS_LOGFILE_KEY,
       76     7704         NEWKEY=YES);
       77     7735
       78     7736        %FPT_PRECORD (FPTN=POSITION_LOGFILE,
       79     7737         STCLASS=CONSTANT,
       80     7738         DCB=F$LOG,
       81     7739         KEY=PS_LOGFILE_KEY,
       82     7740         KEYR=YES,
       83     7741         KEYS=YES);
       84     7762
       85     7763        %FPT_PRECORD (FPTN=SCAN_BACKWARDS,
       86     7764         STCLASS=CONSTANT,
       87     7765         DCB=F$LOG,
       88     7766         KEYS=NO,
       89     7767         KEYR=YES,
       90     7768         KEY=PS_LOGFILE_KEY,
       91     7769         N=-1);
       92     7790
       93     7791        %FPT_PRECORD (FPTN=SCAN_FORWARD,
       94     7792         STCLASS=CONSTANT,
       95     7793         DCB=F$LOG,
       96     7794         KEYS=NO,
       97     7795         KEYR=YES,
       98     7796         KEY=PS_LOGFILE_KEY,
       99     7797         N=1);
      100     7818
      101     7819        %FPT_LINES (FPTN=GET_LINES_REMAINING,
      102     7820         STCLASS=CONSTANT,
      103     7821         DCB=M$LO,
      104     7822         LINES=LINES_REMAINING);
      105     7836
      106     7837        %VLR_LINES (FPTN=LINES_REMAINING);
      107     7851
      108     7852        %FPT_TRUNC (FPTN=TRUNC_LOGFILE,
      109     7853         STCLASS=CONSTANT,
      110     7854         DCB=F$LOG);
      111     7868
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:47   
      112     7869        %FPT_DEVICE (FPTN=SET_HEADER_ON_LP,
      113     7870         STCLASS=CONSTANT,
      114     7871         DCB=M$LO,
      115     7872         HDR=VLP_HDR);
      116     7890
      117     7891        %VLP_HDR (LEN=80);
      118     7907
      119     7908        %EXT_TIME (NAME=NOW);
      120     7916        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:48   
      121     7917        /* These variables define the real/simulated time interval over
      122     7918           which we will produce displays.                               */
      123     7919    1   DCL TIME_NOW UBIN STATIC;
      124     7920    1   DCL NEXT_WAKEUP_TIME UBIN STATIC;
      125     7921    1   DCL TIME_LEFT UBIN STATIC;
      126     7922    1   DCL DELTA_T SBIN;
      127     7923    1   DCL B$P$ PTR STATIC SYMDEF;
      128     7924    1   DCL P_NPROCS UBIN STATIC SYMDEF;
      129     7925    1   DCL P_MAXPROCS UBIN STATIC SYMDEF;
      130     7926    1   DCL I SBIN;
      131     7927    1   DCL IFEC UBIN;
      132     7928    1   DCL FEPNO UBIN;
      133     7929    1   DCL PUNT_COUNTER UBIN;
      134     7930    1   DCL WAIT_COUNT UBIN;
      135     7931    1   DCL P$ PTR;
      136     7932    1   DCL COLLECT_COUNT UBIN;
      137     7933    1   DCL COLLECT_SIZE UBIN;
      138     7934    1   DCL COLLECT_OFFSET UBIN;
      139     7935    1   DCL FIRST_TIME LOGICAL;
      140     7936    1   DCL NEED_MORE LOGICAL;
      141     7937    1   DCL FIRST_SLEEP_THIS_INTERVAL LOGICAL;
      142     7938    1   DCL SNORED LOGICAL;
      143     7939    1   DCL CONTINUE_SLEEPING LOGICAL;
      144     7940    1   DCL WAITING_FOR_FEPS LOGICAL;
      145     7941    1   DCL FEP_SHORT_DONE LOGICAL;
      146     7942    1   DCL TFEPNO CHAR(2);
      147     7943    1   DCL CPOS1 UBIN;
      148     7944    1   DCL CPOS2 UBIN;
      149     7945    1   DCL ITEM UBIN;
      150     7946    1   DCL LEN UBIN;
      151     7947    1   DCL TEMP CHAR (140);
      152     7948    1   DCL P_IOS$ PTR;
      153     7949    1   DCL TEMP_UTS UBIN AUTO;
      154     7950    1   DCL 1 BARGRAPH_VECTORS STATIC,
      155     7951    1            2 TITLE_ BIT (72) DALIGNED,
      156     7952    1            2 SCALE_ BIT (72) DALIGNED,
      157     7953    1            2 LOW_ BIT (72) DALIGNED,
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:49   
      158     7954    1            2 HIGH_ BIT (72) DALIGNED;
      159     7955    1   DCL BARGRAPH_TITLE CHAR (40) STATIC;
      160     7956    1   DCL 1 BARGRAPH_FMT CONSTANT,
      161     7957    1            2 L1 CHAR (0) INIT ('%/%Vr%25-%A (%A, %D - %D)      %/%22-'),
      162     7958    1            2 L2 CHAR (0) INIT ('/---|---|---|---|---|---|---|---|---|---|\  ');
      163     7959    1   DCL B$TCB$ PTR SYMREF;
      164     7960    1   DCL B$JIT$ PTR SYMREF;
      165     7961    1   DCL PSD$EJECT ENTRY (1);
      166     7962    1   DCL PSD$SKIP ENTRY;
      167     7963    1   DCL PSD$CPU ENTRY;
      168     7964    1   DCL PSD$RESRCE ENTRY;
      169     7965    1   DCL PSD$FEP ENTRY;
      170     7966    1   DCL PSD$FEPSHORT ENTRY;
      171     7967    1   DCL PSD$DEVICES ENTRY;
      172     7968    1   DCL PSD$CHANNELS ENTRY;
      173     7969    1   DCL PSD$SCPU ENTRY;
      174     7970    1   DCL PSD$PROCS ENTRY;
      175     7971    1   DCL PSD$SUMMARY ENTRY;
      176     7972    1   DCL PSD$HEADER ENTRY (2);
      177     7973    1   DCL PSD$SUM_HEAD ENTRY;
      178     7974    1   DCL PSD$HISTO ENTRY (1);
      179     7975    1   DCL PSD$FAULT ENTRY;
      180     7976    1   DCL PSD$MOUSE ENTRY;
      181     7977    1   DCL PSD$GET_PMDAT ENTRY (2) ALTRET;
      182     7978    1   DCL PSD$GET_MOUSE ENTRY (2) ALTRET;
      183     7979    1   DCL PSD$GET_FEP ENTRY (2) ALTRET;
      184     7980    1   DCL PSD$READ_IN ENTRY (2) ALTRET;
      185     7981    1   DCL PSF$KICKFEP ENTRY;
      186     7982    1   DCL PSF$RELEASE ENTRY;
      187     7983    1   DCL PSF$GETBUF ENTRY (1);
      188     7984    1   DCL PSG$GATHER ENTRY ALTRET;
      189     7985    1   DCL PSR$RESULTS ENTRY;
      190     7986    1   DCL PSR$IDENT ENTRY (6);
      191     7987    1   DCL PSE$ERRMSG ENTRY (5);
      192     7988    1   DCL PSE$GRIPE ENTRY (5);
      193     7989    1   DCL PSM$FREESEG ENTRY (1);
      194     7990    1   DCL PSL$EVAL ENTRY (3);
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:50   
      195     7991    1   DCL PSL$LOCATE ENTRY (3);
      196     7992    1   DCL PSL$TIME ENTRY (2);
      197     7993    1   DCL PSM$SEGOX ENTRY (3);
      198     7994        %INCLUDE XUF_ENTRY;
      199     8002        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:51   
      200     8003    1   ATTACH: PROC (POINTER$, ACTUAL, OLD, HISTORY, ENTRY$) ALTRET;

   8003 13 000003   200100 741300       ATTACH       STX1  ! TEMP_UTS+2,,AUTO

      201     8004
      202     8005    2   DCL POINTER$ PTR;
      203     8006    2   DCL ACTUAL UBIN;
      204     8007    2   DCL OLD UBIN;
      205     8008    2   DCL HISTORY UBIN;
      206     8009    2   DCL ENTRY$ EPTR;
      207     8010    2   DCL P$ PTR;
      208     8011    2   DCL ERR UBIN WORD;
      209     8012    2   DCL FIRST_ATTACH LOGICAL;
      210     8013    2   DCL I UBIN;
      211     8014
      212     8015    2        IF OLD>0 THEN HISTORY = OLD;

   8015 13 000004   200103 470500                    LDP0    @OLD,,AUTO
        13 000005   000000 235100                    LDA     0,,PR0
        13 000006   000011 600000 13                 TZE     s:8017

   8015 13 000007   200104 471500                    LDP1    @HISTORY,,AUTO
        13 000010   100000 755100                    STA     0,,PR1

      213     8016
      214     8017    2        NEED_MORE = %YES#;

   8017 13 000011   400000 236003                    LDQ     -131072,DU
        13 000012   200017 756100                    STQ     NEED_MORE,,AUTO

      215     8018    2        FIRST_ATTACH = %YES#;

   8018 13 000013   200110 756100                    STQ     FIRST_ATTACH,,AUTO

      216     8019
      217     8020    3        DO WHILE (NEED_MORE);

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:52   
   8020 13 000014   200017 234100                    SZN     NEED_MORE,,AUTO
        13 000015   000100 605000 13                 TPL     s:8053

      218     8021
      219     8022    3             IF NOT FIRST_ATTACH

   8022 13 000016   200110 234100                    SZN     FIRST_ATTACH,,AUTO
        13 000017   000023 605000 13                 TPL     s:8025
        13 000020   200102 470500                    LDP0    @ACTUAL,,AUTO
        13 000021   000000 235100                    LDA     0,,PR0
        13 000022   000034 601000 13                 TNZ     s:8027

      220     8023    3                  OR ACTUAL = 0
      221     8024    3             THEN
      222     8025    3                  CALL PSM$SEGOX (POINTER$, ACTUAL, HISTORY);

   8025 13 000023   200104 236100                    LDQ     @HISTORY,,AUTO
        13 000024   200120 756100                    STQ     @DEFAULT_VALUE+3,,AUTO
        13 000025   200102 236100                    LDQ     @ACTUAL,,AUTO
        13 000026   200101 235100                    LDA     @POINTER$,,AUTO
        13 000027   200116 757100                    STAQ    @DEFAULT_VALUE+1,,AUTO
        13 000030   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 000031   000021 631400 xsym               EPPR1   B_VECTNIL+17
        13 000032   000000 701000 xent               TSX1    PSM$SEGOX
        13 000033   000000 011000                    NOP     0

      223     8026
      224     8027    3             FIRST_ATTACH = %NO#;

   8027 13 000034   200110 450100                    STZ     FIRST_ATTACH,,AUTO

      225     8028    3             PS_USED_FEP_SIZE = 9999;

   8028 13 000035   023417 235007                    LDA     9999,DL
        13 000036   000000 755000 xsym               STA     PS_USED_FEP_SIZE

      226     8029    3             CALL ENTRY$ (POINTER$, ACTUAL) ALTRET (NOT_ENOUGH);
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:53   

   8029 13 000037   200101 630500                    EPPR0   @POINTER$,,AUTO
        13 000040   200105 471500                    LDP1    @ENTRY$,,AUTO
        13 000041   100000 220100                    LDX0    0,,PR1
        13 000042   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000043   000000 701010                    TSX1    0,X0
        13 000044   000047 702000 13                 TSX2    NOT_ENOUGH

      227     8030
      228     8031    3             NEED_MORE = %NO#;

   8031 13 000045   200017 450100                    STZ     NEED_MORE,,AUTO

      229     8032
      230     8033    4             DO NEVER;

   8033 13 000046   000076 710000 13                 TRA     s:8051

      231     8034
      232     8035    4   NOT_ENOUGH:
      233     8036    4                  IF PS_USED_FEP_SIZE = 0 THEN

   8036 13 000047   000000 235000 xsym  NOT_ENOUGH   LDA     PS_USED_FEP_SIZE
        13 000050   000053 601000 13                 TNZ     s:8039

      234     8037    4                       ALTRETURN;

   8037 13 000051   200100 221300                    LDX1  ! TEMP_UTS+2,,AUTO
        13 000052   000000 702211                    TSX2  ! 0,X1

      235     8038
      236     8039    4                  ERR = B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.CODE;

   8039 13 000053   000000 470400 xsym               LDP0    B$TCB$
        13 000054   000000 471500                    LDP1    0,,PR0
        13 000055   100102 236100                    LDQ     66,,PR1
        13 000056   000003 772000                    QRL     3
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:54   
        13 000057   037777 376007                    ANQ     16383,DL
        13 000060   200107 756100                    STQ     ERR,,AUTO

      237     8040
      238     8041    4                  IF ERR = %E$EOF

   8041 13 000061   000006 116007                    CMPQ    6,DL
        13 000062   000065 601000 13                 TNZ     s:8045

      239     8042    4                  THEN
      240     8043    4                       ALTRETURN;

   8043 13 000063   200100 221300                    LDX1  ! TEMP_UTS+2,,AUTO
        13 000064   000000 702211                    TSX2  ! 0,X1

      241     8044
      242     8045    4                  IF ERR ~= %E$LD

   8045 13 000065   000007 116007                    CMPQ    7,DL
        13 000066   000076 600000 13                 TZE     s:8051

      243     8046    4                  THEN
      244     8047    4                       CALL PSE$ERRMSG ( , SERIOUS#);

   8047 13 000067   000000 236000 14                 LDQ     0
        13 000070   000001 235000 xsym               LDA     B_VECTNIL+1
        13 000071   200116 757100                    STAQ    @DEFAULT_VALUE+1,,AUTO
        13 000072   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 000073   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000074   000000 701000 xent               TSX1    PSE$ERRMSG
        13 000075   000000 011000                    NOP     0

      245     8048
      246     8049    4             END;

      247     8050
      248     8051    3        END;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:55   

   8051 13 000076   200017 234100                    SZN     NEED_MORE,,AUTO
        13 000077   000016 604000 13                 TMI     s:8022

      249     8052
      250     8053    2        IF PS_TAG='D'

   8053 13 000100   000000 236000 xsym               LDQ     PS_TAG
        13 000101   777000 376003                    ANQ     -512,DU
        13 000102   104000 116003                    CMPQ    34816,DU
        13 000103   000160 601000 13                 TNZ     s:8076

      251     8054    3        THEN DO; /* Shrink segment to fit */

      252     8055
      253     8056    3             P$ = POINTER$;

   8056 13 000104   200101 470500                    LDP0    @POINTER$,,AUTO
        13 000105   000000 236100                    LDQ     0,,PR0
        13 000106   200106 756100                    STQ     P$,,AUTO

      254     8057
      255     8058    4             DO I = 0 TO SIZEW(PS_PTRS$) - 1;

   8058 13 000107   200111 450100                    STZ     I,,AUTO
        13 000110   000117 710000 13                 TRA     s:8062+3

      256     8059
      257     8060    4                  PS_PTRS$(I) = ADDR(NIL);

   8060 13 000111   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 000112   200111 720100                    LXL0    I,,AUTO
        13 000113   000000 756010 xsym               STQ     PS_PTRS$,X0

      258     8061
      259     8062    4             END;

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:56   
   8062 13 000114   200111 235100                    LDA     I,,AUTO
        13 000115   000001 035007                    ADLA    1,DL
        13 000116   200111 755100                    STA     I,,AUTO
        13 000117   200111 235100                    LDA     I,,AUTO
        13 000120   000144 115007                    CMPA    100,DL
        13 000121   000111 602000 13                 TNC     s:8060

      260     8063
      261     8064    4             DO WHILE (P$->BLOCK.IDENT ~= -1);

   8064 13 000122   000142 710000 13                 TRA     s:8070

      262     8065
      263     8066    4                  PS_PTRS$(P$ -> BLOCK.IDENT) = P$;

   8066 13 000123   200106 470500                    LDP0    P$,,AUTO
        13 000124   000000 720100                    LXL0    0,,PR0
        13 000125   200106 236100                    LDQ     P$,,AUTO
        13 000126   000000 756010 xsym               STQ     PS_PTRS$,X0

      264     8067
      265     8068    4                  P$ = ADDR(P$->BLOCK.DATA(P$->BLOCK.ENTRIES * P$->BLOCK.WORDS));

   8068 13 000127   000001 236100                    LDQ     1,,PR0
        13 000130   000022 736000                    QLS     18
        13 000131   000022 732000                    QRS     18
        13 000132   200116 756100                    STQ     @DEFAULT_VALUE+1,,AUTO
        13 000133   000001 236100                    LDQ     1,,PR0
        13 000134   000022 732000                    QRS     18
        13 000135   200116 402100                    MPY     @DEFAULT_VALUE+1,,AUTO
        13 000136   000022 736000                    QLS     18
        13 000137   000002 036003                    ADLQ    2,DU
        13 000140   200106 036100                    ADLQ    P$,,AUTO
        13 000141   200106 756100                    STQ     P$,,AUTO

      266     8069
      267     8070    4             END;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:57   

   8070 13 000142   200106 470500                    LDP0    P$,,AUTO
        13 000143   000000 235100                    LDA     0,,PR0
        13 000144   000027 115000 xsym               CMPA    B_VECTNIL+23
        13 000145   000123 601000 13                 TNZ     s:8066

      268     8071
      269     8072    3             ACTUAL = POFFW(P$, POINTER$) + 1;

   8072 13 000146   200101 471500                    LDP1    @POINTER$,,AUTO
        13 000147   100000 236100                    LDQ     0,,PR1
        13 000150   000022 772000                    QRL     18
        13 000151   200116 756100                    STQ     @DEFAULT_VALUE+1,,AUTO
        13 000152   200106 236100                    LDQ     P$,,AUTO
        13 000153   000022 772000                    QRL     18
        13 000154   200116 136100                    SBLQ    @DEFAULT_VALUE+1,,AUTO
        13 000155   000001 036007                    ADLQ    1,DL
        13 000156   200102 473500                    LDP3    @ACTUAL,,AUTO
        13 000157   300000 756100                    STQ     0,,PR3

      270     8073
      271     8074    3        END;

      272     8075
      273     8076    2        HISTORY = ACTUAL;

   8076 13 000160   200102 470500                    LDP0    @ACTUAL,,AUTO
        13 000161   200104 471500                    LDP1    @HISTORY,,AUTO
        13 000162   000000 235100                    LDA     0,,PR0
        13 000163   100000 755100                    STA     0,,PR1

      274     8077
      275     8078    2        RETURN;

   8078 13 000164   200100 221300                    LDX1  ! TEMP_UTS+2,,AUTO
        13 000165   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:58   
      276     8079
      277     8080    2   END ATTACH;
      278     8081        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:59   
      279     8082    1   COLLECT: PROC (INDX, TARGET, COUNT, SIZE, OFFSET);

   8082 13 000166   200102 741300       COLLECT      STX1  ! @ACTUAL,,AUTO

      280     8083
      281     8084    2   DCL INDX UBIN;
      282     8085    2   DCL TARGET UBIN;
      283     8086    2   DCL COUNT UBIN;
      284     8087    2   DCL SIZE UBIN;
      285     8088    2   DCL OFFSET UBIN;
      286     8089    2   DCL I UBIN;
      287     8090
      288     8091    2        CALL DEFAULT (COUNT, COLLECT_COUNT, 1);

   8091 13 000167   000001 236000 14                 LDQ     1
        13 000170   200115 756100                    STQ     @OUT_VAL+1,,AUTO
        13 000171   200013 630500                    EPPR0   COLLECT_COUNT,,AUTO
        13 000172   200114 450500                    STP0    @IN_VAL+1,,AUTO
        13 000173   200105 236100                    LDQ     @COUNT,,AUTO
        13 000174   200113 756100                    STQ     I+2,,AUTO
        13 000175   000311 701000 13                 TSX1    DEFAULT
        13 000176   000000 011000                    NOP     0

      289     8092    2        CALL DEFAULT (SIZE, COLLECT_SIZE, 1);

   8092 13 000177   000001 236000 14                 LDQ     1
        13 000200   200115 756100                    STQ     @OUT_VAL+1,,AUTO
        13 000201   200014 630500                    EPPR0   COLLECT_SIZE,,AUTO
        13 000202   200114 450500                    STP0    @IN_VAL+1,,AUTO
        13 000203   200106 236100                    LDQ     @SIZE,,AUTO
        13 000204   200113 756100                    STQ     I+2,,AUTO
        13 000205   000311 701000 13                 TSX1    DEFAULT
        13 000206   000000 011000                    NOP     0

      290     8093    2        CALL DEFAULT (OFFSET, COLLECT_OFFSET, 0);

   8093 13 000207   000002 236000 14                 LDQ     2
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:60   
        13 000210   200115 756100                    STQ     @OUT_VAL+1,,AUTO
        13 000211   200015 630500                    EPPR0   COLLECT_OFFSET,,AUTO
        13 000212   200114 450500                    STP0    @IN_VAL+1,,AUTO
        13 000213   200107 236100                    LDQ     @OFFSET,,AUTO
        13 000214   200113 756100                    STQ     I+2,,AUTO
        13 000215   000311 701000 13                 TSX1    DEFAULT
        13 000216   000000 011000                    NOP     0

      291     8094
      292     8095    2        CALL PSL$LOCATE (INDX, P$);

   8095 13 000217   200012 630500                    EPPR0   P$,,AUTO
        13 000220   200117 450500                    STP0    @DEFAULT_VALUE+2,,AUTO
        13 000221   200103 236100                    LDQ     @INDX,,AUTO
        13 000222   200116 756100                    STQ     @DEFAULT_VALUE+1,,AUTO
        13 000223   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 000224   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000225   000000 701000 xent               TSX1    PSL$LOCATE
        13 000226   000000 011000                    NOP     0

      293     8096
      294     8097    2        TARGET = 0;

   8097 13 000227   200104 470500                    LDP0    @TARGET,,AUTO
        13 000230   000000 450100                    STZ     0,,PR0

      295     8098
      296     8099    3        DO I = 1 TO COLLECT_COUNT;

   8099 13 000231   000001 235007                    LDA     1,DL
        13 000232   200110 755100                    STA     I,,AUTO
        13 000233   000250 710000 13                 TRA     s:8105+3

      297     8100
      298     8101    3             TARGET = TARGET + P$ -> BLOCK.DATA(COLLECT_OFFSET);

   8101 13 000234   200104 470500                    LDP0    @TARGET,,AUTO
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:61   
        13 000235   200012 471500                    LDP1    P$,,AUTO
        13 000236   200015 720100                    LXL0    COLLECT_OFFSET,,AUTO
        13 000237   000000 236100                    LDQ     0,,PR0
        13 000240   100002 036110                    ADLQ    2,X0,PR1
        13 000241   000000 756100                    STQ     0,,PR0

      299     8102
      300     8103    3             COLLECT_OFFSET = COLLECT_OFFSET + COLLECT_SIZE;

   8103 13 000242   200015 236100                    LDQ     COLLECT_OFFSET,,AUTO
        13 000243   200014 036100                    ADLQ    COLLECT_SIZE,,AUTO
        13 000244   200015 756100                    STQ     COLLECT_OFFSET,,AUTO

      301     8104
      302     8105    3        END;

   8105 13 000245   200110 235100                    LDA     I,,AUTO
        13 000246   000001 035007                    ADLA    1,DL
        13 000247   200110 755100                    STA     I,,AUTO
        13 000250   200013 236100                    LDQ     COLLECT_COUNT,,AUTO
        13 000251   200110 116100                    CMPQ    I,,AUTO
        13 000252   000234 603000 13                 TRC     s:8101

      303     8106
      304     8107    2        RETURN;

   8107 13 000253   200102 221300                    LDX1  ! @ACTUAL,,AUTO
        13 000254   000001 702211                    TSX2  ! 1,X1

      305     8108
      306     8109    2   END COLLECT;
      307     8110        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:62   
      308     8111    1   TRANSFER: PROC (INDX, TARGET);

   8111 13 000255   200102 741300       TRANSFER     STX1  ! @ACTUAL,,AUTO

      309     8112
      310     8113    2   DCL INDX UBIN;
      311     8114    2   DCL TARGET (0:0) UBIN WORD;
      312     8115    2   DCL I UBIN;
      313     8116
      314     8117    2        CALL PSL$LOCATE (INDX, P$);

   8117 13 000256   200012 630500                    EPPR0   P$,,AUTO
        13 000257   200117 450500                    STP0    @DEFAULT_VALUE+2,,AUTO
        13 000260   200103 236100                    LDQ     @INDX,,AUTO
        13 000261   200116 756100                    STQ     @DEFAULT_VALUE+1,,AUTO
        13 000262   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 000263   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000264   000000 701000 xent               TSX1    PSL$LOCATE
        13 000265   000000 011000                    NOP     0

      315     8118
      316     8119    3        DO I = 0 TO P$ -> BLOCK.ENTRIES - 1;

   8119 13 000266   200105 450100                    STZ     I,,AUTO
        13 000267   000300 710000 13                 TRA     s:8123+3

      317     8120
      318     8121    3             TARGET(I) = P$ -> BLOCK.DATA(I);

   8121 13 000270   200012 470500                    LDP0    P$,,AUTO
        13 000271   200105 720100                    LXL0    I,,AUTO
        13 000272   000002 235110                    LDA     2,X0,PR0
        13 000273   200104 471500                    LDP1    @TARGET,,AUTO
        13 000274   100000 755110                    STA     0,X0,PR1

      319     8122
      320     8123    3        END;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:63   

   8123 13 000275   200105 236100                    LDQ     I,,AUTO
        13 000276   000001 036007                    ADLQ    1,DL
        13 000277   200105 756100                    STQ     I,,AUTO
        13 000300   200012 470500                    LDP0    P$,,AUTO
        13 000301   000001 236100                    LDQ     1,,PR0
        13 000302   000022 732000                    QRS     18
        13 000303   000307 604000 13                 TMI     s:8125
        13 000304   200105 116100                    CMPQ    I,,AUTO
        13 000305   000307 600000 13                 TZE     s:8125
        13 000306   000270 603000 13                 TRC     s:8121

      321     8124
      322     8125    2        RETURN;

   8125 13 000307   200102 221300                    LDX1  ! @ACTUAL,,AUTO
        13 000310   000001 702211                    TSX2  ! 1,X1

      323     8126
      324     8127    2   END TRANSFER;
      325     8128        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:64   
      326     8129    1   DEFAULT: PROC (IN_VAL, OUT_VAL, DEFAULT_VALUE);

   8129 13 000311   200112 741300       DEFAULT      STX1  ! I+1,,AUTO

      327     8130
      328     8131    2   DCL IN_VAL UBIN;
      329     8132    2   DCL OUT_VAL UBIN;
      330     8133    2   DCL DEFAULT_VALUE UBIN;
      331     8134
      332     8135    2        IF ADDR(IN_VAL) = ADDR(NIL)

   8135 13 000312   200113 236100                    LDQ     @IN_VAL,,AUTO
        13 000313   000001 116000 xsym               CMPQ    B_VECTNIL+1
        13 000314   000322 601000 13                 TNZ     s:8139

      333     8136    2        THEN
      334     8137    2             OUT_VAL = DEFAULT_VALUE;

   8137 13 000315   200115 470500                    LDP0    @DEFAULT_VALUE,,AUTO
        13 000316   200114 471500                    LDP1    @OUT_VAL,,AUTO
        13 000317   000000 235100                    LDA     0,,PR0
        13 000320   100000 755100                    STA     0,,PR1
        13 000321   000326 710000 13                 TRA     s:8141

      335     8138    2        ELSE
      336     8139    2             OUT_VAL = IN_VAL;

   8139 13 000322   200113 470500                    LDP0    @IN_VAL,,AUTO
        13 000323   200114 471500                    LDP1    @OUT_VAL,,AUTO
        13 000324   000000 235100                    LDA     0,,PR0
        13 000325   100000 755100                    STA     0,,PR1

      337     8140
      338     8141    2        RETURN;

   8141 13 000326   200112 221300                    LDX1  ! I+1,,AUTO
        13 000327   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:65   

      339     8142
      340     8143    2   END DEFAULT;
      341     8144        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:66   
      342     8145    1   FIND_END_OF_INTERVAL: PROC;

   8145 13 000330   200100 741300       FIND_END_OF* STX1  ! TEMP_UTS+2,,AUTO

      343     8146
      344     8147    2        PS_LOGFILE_KEY.COUNT = 5;

   8147 13 000331   005000 236003                    LDQ     2560,DU
        13 000332   000000 552040 xsym               STBQ    PS_LOGFILE_KEY,'40'O

      345     8148    2        PS_LOGFILE_KEY.UTS = PS_END_UTS;

   8148 13 000333   000000 100400                    MLR     fill='000'O
        13 000334   000000 000004 xsym               ADSC9   PS_END_UTS               cn=0,n=4
        13 000335   000000 200004 xsym               ADSC9   PS_LOGFILE_KEY           cn=1,n=4

      346     8149    2        PS_LOGFILE_KEY.TAG = 'Z';

   8149 13 000336   000132 236003                    LDQ     90,DU
        13 000337   000001 552020 xsym               STBQ    PS_LOGFILE_KEY+1,'20'O

      347     8150
      348     8151    3        CALL M$PRECORD (POSITION_LOGFILE) WHENALTRETURN DO; END;

   8151 13 000340   000030 630400 11                 EPPR0   POSITION_LOGFILE
        13 000341   440003 713400                    CLIMB   alt,+16387
        13 000342   401000 401760                    pmme    nvectors=3
        13 000343   000345 702000 13                 TSX2    s:8161
        13 000344   000345 710000 13                 TRA     s:8161

      349     8152
      350     8153             /* ALTRET just means that we didn't have an exact match for the
      351     8154                record key.  In fact, it would be more of a suprise if we
      352     8155                didn't altret here.
      353     8156
      354     8157                That should have left us positioned at the next record
      355     8158                (if any) AFTER the last one we really want, or at EOF.
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:67   
      356     8159                Backing up by one will put us at the last selected record. */
      357     8160
      358     8161    2        CALL M$PRECORD (SCAN_BACKWARDS)

   8161 13 000345   000042 630400 11                 EPPR0   SCAN_BACKWARDS
        13 000346   440003 713400                    CLIMB   alt,+16387
        13 000347   401000 401760                    pmme    nvectors=3
        13 000350   000352 702000 13                 TSX2    s:8165
        13 000351   000374 710000 13                 TRA     s:8179

      359     8162    3        WHENALTRETURN DO;

      360     8163
      361     8164
      362     8165    3             IF B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.CODE = %E$BOF

   8165 13 000352   000000 470400 xsym               LDP0    B$TCB$
        13 000353   000000 471500                    LDP1    0,,PR0
        13 000354   100102 236100                    LDQ     66,,PR1
        13 000355   377770 376007                    ANQ     131064,DL
        13 000356   000040 116007                    CMPQ    32,DL
        13 000357   000365 601000 13                 TNZ     s:8169

      363     8166    3             THEN
      364     8167    3                  CALL PSE$ERRMSG (E$PS_NO_DATA, WARNING#);

   8167 13 000360   000004 630400 14                 EPPR0   4
        13 000361   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000362   000000 701000 xent               TSX1    PSE$ERRMSG
        13 000363   000000 011000                    NOP     0
        13 000364   000374 710000 13                 TRA     s:8179

      365     8168    3             ELSE
      366     8169    3                  CALL PSE$ERRMSG (, SERIOUS#);

   8169 13 000365   000000 236000 14                 LDQ     0
        13 000366   000001 235000 xsym               LDA     B_VECTNIL+1
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:68   
        13 000367   200116 757100                    STAQ    @DEFAULT_VALUE+1,,AUTO
        13 000370   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 000371   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000372   000000 701000 xent               TSX1    PSE$ERRMSG
        13 000373   000000 011000                    NOP     0

      367     8170
      368     8171    3        END;

      369     8172
      370     8173             /* Now back up enough to include all the records that were
      371     8174                written at the "same" time.  Let's hope that they will be
      372     8175                within 1/2 minute of this one.  (It could be worse if a
      373     8176                FEP was taking an abnormaly long time to respond, but this
      374     8177                gives us the best chance of finding the right point.)     */
      375     8178
      376     8179    2        TEMP_UTS = PS_LOGFILE_KEY.UTS; /* UNAL DATA WORKAROUND */

   8179 13 000374   000000 235000 xsym               LDA     PS_LOGFILE_KEY
        13 000375   000001 236000 xsym               LDQ     PS_LOGFILE_KEY+1
        13 000376   000033 773000                    LRL     27
        13 000377   200076 756100                    STQ     TEMP_UTS,,AUTO

      377     8180    2        CALL XUD$UTS_ADJ_25TH (TEMP_UTS, TEMP_UTS, -30*%UTS_25TH_SEC#);

   8180 13 000400   000007 236000 14                 LDQ     7
        13 000401   200120 756100                    STQ     @DEFAULT_VALUE+3,,AUTO
        13 000402   200076 630500                    EPPR0   TEMP_UTS,,AUTO
        13 000403   200117 450500                    STP0    @DEFAULT_VALUE+2,,AUTO
        13 000404   200076 631500                    EPPR1   TEMP_UTS,,AUTO
        13 000405   200116 451500                    STP1    @DEFAULT_VALUE+1,,AUTO
        13 000406   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 000407   000021 631400 xsym               EPPR1   B_VECTNIL+17
        13 000410   000000 701000 xent               TSX1    XUD$UTS_ADJ_25TH
        13 000411   000000 011000                    NOP     0

      378     8181    2        PS_LOGFILE_KEY.UTS = TEMP_UTS;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:69   

   8181 13 000412   000000 100500                    MLR     fill='000'O
        13 000413   200076 000004                    ADSC9   TEMP_UTS,,AUTO           cn=0,n=4
        13 000414   000000 200004 xsym               ADSC9   PS_LOGFILE_KEY           cn=1,n=4

      379     8182    3        CALL M$PRECORD (POSITION_LOGFILE) WHENALTRETURN DO; END;

   8182 13 000415   000030 630400 11                 EPPR0   POSITION_LOGFILE
        13 000416   440003 713400                    CLIMB   alt,+16387
        13 000417   401000 401760                    pmme    nvectors=3
        13 000420   000422 702000 13                 TSX2    ANOTHER_ALTRET
        13 000421   000422 710000 13                 TRA     ANOTHER_ALTRET

      380     8183             /* Again, we dont expect to find exactly that key. */
      381     8184    2   ANOTHER_ALTRET:
      382     8185
      383     8186    2        IF PS_LOGFILE_KEY.UTS <= TIME_NOW

   8186 13 000422   000000 235000 xsym  ANOTHER_ALT* LDA     PS_LOGFILE_KEY
        13 000423   000001 236000 xsym               LDQ     PS_LOGFILE_KEY+1
        13 000424   000033 773000                    LRL     27
        13 000425   000154 116000 12                 CMPQ    TIME_NOW
        13 000426   000430 600000 13                 TZE     s:8188
        13 000427   000434 603000 13                 TRC     s:8190

      384     8187    2        THEN
      385     8188    2             CALL PSE$ERRMSG (E$PS_NO_DATA, WARNING#);

   8188 13 000430   000004 630400 14                 EPPR0   4
        13 000431   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000432   000000 701000 xent               TSX1    PSE$ERRMSG
        13 000433   000000 011000                    NOP     0

      386     8189
      387     8190    2        TIME_NOW = PS_LOGFILE_KEY.UTS;

   8190 13 000434   000000 235000 xsym               LDA     PS_LOGFILE_KEY
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:70   
        13 000435   000001 236000 xsym               LDQ     PS_LOGFILE_KEY+1
        13 000436   000033 773000                    LRL     27
        13 000437   000154 756000 12                 STQ     TIME_NOW

      388     8191
      389     8192    2        RETURN;

   8192 13 000440   200100 221300                    LDX1  ! TEMP_UTS+2,,AUTO
        13 000441   000001 702211                    TSX2  ! 1,X1

      390     8193
      391     8194    2   END FIND_END_OF_INTERVAL;
      392     8195        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:71   
      393     8196    1   WRITE_LOG: PROC(POINTER$, SIZE, TIME, TAG);

   8196 13 000442   200100 741300       WRITE_LOG    STX1  ! TEMP_UTS+2,,AUTO

      394     8197
      395     8198    2   DCL POINTER$ PTR;
      396     8199    2   DCL SIZE UBIN WORD;
      397     8200    2   DCL TIME UBIN;
      398     8201    2   DCL TAG CHAR (1) UNAL;
      399     8202
      400     8203
      401     8204    2        WRITE_LOGFILE.BUF_.BUF$ = POINTER$;

   8204 13 000443   200101 470500                    LDP0    @POINTER$,,AUTO
        13 000444   000000 236100                    LDQ     0,,PR0
        13 000445   000105 756000 12                 STQ     WRITE_LOGFILE+5

      402     8205    2        WRITE_LOGFILE.BUF_.BOUND = (SIZE * 4) - 1;

   8205 13 000446   200102 471500                    LDP1    @SIZE,,AUTO
        13 000447   100000 236100                    LDQ     0,,PR1
        13 000450   000002 736000                    QLS     2
        13 000451   000001 136007                    SBLQ    1,DL
        13 000452   000020 736000                    QLS     16
        13 000453   000104 676000 12                 ERQ     WRITE_LOGFILE+4
        13 000454   000034 376000 xsym               ANQ     B_VECTNIL+28
        13 000455   000104 656000 12                 ERSQ    WRITE_LOGFILE+4

      403     8206
      404     8207    2        PS_LOGFILE_KEY.UTS = TIME;

   8207 13 000456   200103 473500                    LDP3    @TIME,,AUTO
        13 000457   000000 100500                    MLR     fill='000'O
        13 000460   300000 000004                    ADSC9   0,,PR3                   cn=0,n=4
        13 000461   000000 200004 xsym               ADSC9   PS_LOGFILE_KEY           cn=1,n=4

      405     8208    2        PS_LOGFILE_KEY.TAG = TAG;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:72   

   8208 13 000462   200104 474500                    LDP4    @TAG,,AUTO
        13 000463   040000 100500                    MLR     fill='040'O
        13 000464   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        13 000465   000001 200001 xsym               ADSC9   PS_LOGFILE_KEY+1         cn=1,n=1

      406     8209    2        PS_LOGFILE_KEY.COUNT = 5;

   8209 13 000466   005000 236003                    LDQ     2560,DU
        13 000467   000000 552040 xsym               STBQ    PS_LOGFILE_KEY,'40'O

      407     8210
      408     8211    2        OPEN_LOGFILE.V.RES# = PS_FILE_PARAMS.RES@;

   8211 13 000470   000020 235000 xsym               LDA     PS_FILE_PARAMS+16
        13 000471   000021 236000 xsym               LDQ     PS_FILE_PARAMS+17
        13 000472   000033 773000                    LRL     27
        13 000473   000027 376000 xsym               ANQ     B_VECTNIL+23
        13 000474   000056 756000 12                 STQ     OPEN_LOGFILE+40

      409     8212    2        OPEN_LOGFILE.V.ASN# = PS_FILE_PARAMS.ASN@;

   8212 13 000475   000020 236000 xsym               LDQ     PS_FILE_PARAMS+16
        13 000476   000033 772000                    QRL     27
        13 000477   000053 552004 12                 STBQ    OPEN_LOGFILE+37,'04'O

      410     8213    2        OPEN_LOGFILE.V.FUN# = %CREATE#;

   8213 13 000500   003000 236007                    LDQ     1536,DL
        13 000501   000053 552010 12                 STBQ    OPEN_LOGFILE+37,'10'O

      411     8214    2        OPEN_LOGFILE.V.SHARE# = %IN#;

   8214 13 000502   000052 236000 12                 LDQ     OPEN_LOGFILE+36
        13 000503   000010 376000 14                 ANQ     8
        13 000504   000020 276007                    ORQ     16,DL
        13 000505   000052 756000 12                 STQ     OPEN_LOGFILE+36
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:73   

      412     8215
      413     8216    2        WAIT_COUNT = 6;

   8216 13 000506   000006 235007                    LDA     6,DL
        13 000507   200011 755100                    STA     WAIT_COUNT,,AUTO

      414     8217
      415     8218    2        CALL PSL$TIME (TIME, NOW);

   8218 13 000510   000011 236000 14                 LDQ     9
        13 000511   200103 235100                    LDA     @TIME,,AUTO
        13 000512   200116 757100                    STAQ    @DEFAULT_VALUE+1,,AUTO
        13 000513   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 000514   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000515   000000 701000 xent               TSX1    PSL$TIME
        13 000516   000000 011000                    NOP     0

      416     8219    2        IF NOT DCBADDR(DCBNUM(F$LOG))->F$DCB.FCD

   8219 13 000517   000000 236007 xsym               LDQ     F$LOG,DL
        13 000520   000012 470400 14                 LDP0    10
        13 000521   000000 471500                    LDP1    0,,PR0
        13 000522   100000 473506                    LDP3    0,QL,PR1
        13 000523   300031 236100                    LDQ     25,,PR3
        13 000524   020000 316007                    CANQ    8192,DL
        13 000525   000532 601000 13                 TNZ     s:8221

      417     8220    2        THEN CALL M$OPEN (OPEN_LOGFILE) ALTRET (OOGH);

   8220 13 000526   000006 630400 12                 EPPR0   OPEN_LOGFILE
        13 000527   450000 713400                    CLIMB   alt,open
        13 000530   410400 401760                    pmme    nvectors=18
        13 000531   000572 702000 13                 TSX2    OOGH

      418     8221    2        IF DCBADDR(DCBNUM(F$LOG))->F$DCB.ORG ~= %KEYED#

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:74   
   8221 13 000532   000000 236007 xsym               LDQ     F$LOG,DL
        13 000533   000012 470400 14                 LDP0    10
        13 000534   000000 471500                    LDP1    0,,PR0
        13 000535   100000 473506                    LDP3    0,QL,PR1
        13 000536   300032 236100                    LDQ     26,,PR3
        13 000537   777000 376003                    ANQ     -512,DU
        13 000540   002000 116003                    CMPQ    1024,DU
        13 000541   000546 600000 13                 TZE     s:8223

      419     8222    2        THEN CALL PSE$ERRMSG(E$PS_BAD_FILE,SERIOUS#);

   8222 13 000542   000014 630400 14                 EPPR0   12
        13 000543   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000544   000000 701000 xent               TSX1    PSE$ERRMSG
        13 000545   000000 011000                    NOP     0

      420     8223    2        CALL M$WRITE (WRITE_LOGFILE) ALTRET (OOGH);

   8223 13 000546   000100 630400 12                 EPPR0   WRITE_LOGFILE
        13 000547   440001 713400                    CLIMB   alt,write
        13 000550   401400 401760                    pmme    nvectors=4
        13 000551   000572 702000 13                 TSX2    OOGH

      421     8224    2        CALL M$TRUNC(TRUNC_LOGFILE);

   8224 13 000552   000074 630400 11                 EPPR0   TRUNC_LOGFILE
        13 000553   050003 713400                    CLIMB   20483
        13 000554   400000 401760                    pmme    nvectors=1

      422     8225
      423     8226    2        IF NOT PS_SUMMARY_ONLY

   8226 13 000555   000000 234000 xsym               SZN     PS_SUMMARY_ONLY
        13 000556   000570 604000 13                 TMI     s:8231

      424     8227    2        THEN
      425     8228    2             CALL PSE$GRIPE (E$PS_SNAPPED, , VECTOR(PS_LOGFILE_KEY.TAG),
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:75   

   8228 13 000557   000024 237000 14                 LDAQ    20
        13 000560   200120 757100                    STAQ    @DEFAULT_VALUE+3,,AUTO
        13 000561   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 000562   000023 235000 14                 LDA     19
        13 000563   200116 757100                    STAQ    @DEFAULT_VALUE+1,,AUTO
        13 000564   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 000565   000022 631400 xsym               EPPR1   B_VECTNIL+18
        13 000566   000000 701000 xent               TSX1    PSE$GRIPE
        13 000567   000000 011000                    NOP     0

      426     8229    2                  VECTOR(NOW));
      427     8230
      428     8231    2        RETURN;

   8231 13 000570   200100 221300                    LDX1  ! TEMP_UTS+2,,AUTO
        13 000571   000001 702211                    TSX2  ! 1,X1

   8226 13 000572                       OOGH         null
      429     8232
      430     8233
      431     8234    2   OOGH: ;
      432     8235
      433     8236    2        IF B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.CODE ~= %E$FILEBUSY

   8236 13 000572   000000 470400 xsym               LDP0    B$TCB$
        13 000573   000000 471500                    LDP1    0,,PR0
        13 000574   100102 236100                    LDQ     66,,PR1
        13 000575   377770 376007                    ANQ     131064,DL
        13 000576   001550 116007                    CMPQ    872,DL
        13 000577   000607 600000 13                 TZE     s:8239

      434     8237    2        THEN CALL PSE$ERRMSG ( , SERIOUS#);

   8237 13 000600   000000 236000 14                 LDQ     0
        13 000601   000001 235000 xsym               LDA     B_VECTNIL+1
        13 000602   200116 757100                    STAQ    @DEFAULT_VALUE+1,,AUTO
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:76   
        13 000603   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 000604   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000605   000000 701000 xent               TSX1    PSE$ERRMSG
        13 000606   000000 011000                    NOP     0

      435     8238
      436     8239    2        IF WAIT_COUNT > 0

   8239 13 000607   200011 235100                    LDA     WAIT_COUNT,,AUTO
        13 000610   000633 600000 13                 TZE     s:8258

      437     8240    3        THEN DO;

      438     8241
      439     8242    3             CALL M$SENV;

   8242 13 000611   010011 713400                    CLIMB   4105
        13 000612   000000 401760                    pmme    nvectors=0

      440     8243
      441     8244    3             WAIT_COUNT = WAIT_COUNT - 1;

   8244 13 000613   200011 235100                    LDA     WAIT_COUNT,,AUTO
        13 000614   000001 135007                    SBLA    1,DL
        13 000615   200011 755100                    STA     WAIT_COUNT,,AUTO

      442     8245
      443     8246    3             FPT_WAIT.V.UNITS# = 5;

   8246 13 000616   000005 236007                    LDQ     5,DL
        13 000617   000004 756000 12                 STQ     FPT_WAIT+4

      444     8247
      445     8248    3             CALL PSE$GRIPE (E$PS_FILE_BUSY, INFORMATION#);

   8248 13 000620   000026 630400 14                 EPPR0   22
        13 000621   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:77   
        13 000622   000000 701000 xent               TSX1    PSE$GRIPE
        13 000623   000000 011000                    NOP     0

      446     8249
      447     8250    3             CALL M$WAIT (FPT_WAIT);

   8250 13 000624   000000 630400 12                 EPPR0   FPT_WAIT
        13 000625   020006 713400                    CLIMB   8198
        13 000626   400400 401760                    pmme    nvectors=2

      448     8251
      449     8252    3             CALL M$RENV;

   8252 13 000627   010016 713400                    CLIMB   4110
        13 000630   000000 401760                    pmme    nvectors=0

      450     8253
      451     8254    3             CALL M$RETRY;

   8254 13 000631   010010 713400                    CLIMB   4104
        13 000632   000000 401760                    pmme    nvectors=0

      452     8255
      453     8256    3        END;

      454     8257
      455     8258    2        CALL PSE$GRIPE (E$PS_FILE_REALLY_BUSY, SERIOUS#,

   8258 13 000633   000031 630400 14                 EPPR0   25
        13 000634   000022 631400 xsym               EPPR1   B_VECTNIL+18
        13 000635   000000 701000 xent               TSX1    PSE$GRIPE
        13 000636   000000 011000                    NOP     0

      456     8259    2             VECTOR(PS_LOGFILE_KEY.TAG), VECTOR(NOW));
      457     8260
      458     8261    2        RETURN;

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:78   
   8261 13 000637   200100 221300                    LDX1  ! TEMP_UTS+2,,AUTO
        13 000640   000001 702211                    TSX2  ! 1,X1

      459     8262
      460     8263    2   END WRITE_LOG;
      461     8264        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:79   
      462     8265    1   DETACH: PROC (DISP_FLAG, LOG_FLAG, POINTER$, OLD_POINTER$,

   8265 13 000641   200100 741300       DETACH       STX1  ! TEMP_UTS+2,,AUTO

      463     8266    1             SIZE, OLD_SIZE) ALTRET;
      464     8267
      465     8268    2   DCL DISP_FLAG BIT(1) UNAL; /* Yes, I know. */
      466     8269    2   DCL LOG_FLAG BIT(1) UNAL; /* Yes, I know. */
      467     8270    2   DCL POINTER$ PTR;
      468     8271    2   DCL OLD_POINTER$ PTR;
      469     8272    2   DCL SIZE UBIN WORD;
      470     8273    2   DCL OLD_SIZE UBIN WORD;
      471     8274
      472     8275    2        IF NOT DISP_FLAG AND NOT LOG_FLAG THEN ALTRETURN;

   8275 13 000642   200101 470500                    LDP0    @DISP_FLAG,,AUTO
        13 000643   000000 066500                    CMPB    filb='0'B
        13 000644   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
        13 000645   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
        13 000646   000655 601000 13                 TNZ     s:8277
        13 000647   200102 471500                    LDP1    @LOG_FLAG,,AUTO
        13 000650   000000 066500                    CMPB    filb='1'B
        13 000651   100000 000001                    BDSC    0,,PR1                   by=0,bit=0,n=1
        13 000652   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
        13 000653   000655 601000 13                 TNZ     s:8277

   8275 13 000654   000000 702211                    TSX2  ! 0,X1

      473     8276
      474     8277    2        IF OLD_SIZE ~= 0

   8277 13 000655   200106 471500                    LDP1    @OLD_SIZE,,AUTO
        13 000656   100000 235100                    LDA     0,,PR1
        13 000657   000664 600000 13                 TZE     s:8281

      475     8278    2        THEN
      476     8279    2             CALL PSM$FREESEG (OLD_POINTER$);
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:80   

   8279 13 000660   200104 630500                    EPPR0   @OLD_POINTER$,,AUTO
        13 000661   000017 631400 xsym               EPPR1   B_VECTNIL+15
        13 000662   000000 701000 xent               TSX1    PSM$FREESEG
        13 000663   000000 011000                    NOP     0

      477     8280
      478     8281    2        OLD_SIZE = 0;

   8281 13 000664   200106 470500                    LDP0    @OLD_SIZE,,AUTO
        13 000665   000000 450100                    STZ     0,,PR0

      479     8282
      480     8283    2        IF DISP_FLAG

   8283 13 000666   200101 471500                    LDP1    @DISP_FLAG,,AUTO
        13 000667   000000 066500                    CMPB    filb='0'B
        13 000670   100000 000001                    BDSC    0,,PR1                   by=0,bit=0,n=1
        13 000671   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
        13 000672   000706 600000 13                 TZE     s:8296

      481     8284    3        THEN DO;

      482     8285
      483     8286    3             OLD_POINTER$ = POINTER$;

   8286 13 000673   200103 473500                    LDP3    @POINTER$,,AUTO
        13 000674   300000 236100                    LDQ     0,,PR3
        13 000675   200104 474500                    LDP4    @OLD_POINTER$,,AUTO
        13 000676   400000 756100                    STQ     0,,PR4

      484     8287    3             OLD_SIZE = SIZE;

   8287 13 000677   200105 475500                    LDP5    @SIZE,,AUTO
        13 000700   500000 235100                    LDA     0,,PR5
        13 000701   000000 755100                    STA     0,,PR0

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:81   
      485     8288
      486     8289    3             POINTER$ = ADDR(NIL);

   8289 13 000702   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 000703   300000 756100                    STQ     0,,PR3

      487     8290    3             SIZE = 0;

   8290 13 000704   500000 450100                    STZ     0,,PR5

      488     8291
      489     8292    3        END;

   8292 13 000705   000717 710000 13                 TRA     s:8304

      490     8293
      491     8294    3        ELSE DO;

      492     8295
      493     8296    3             IF SIZE ~= 0

   8296 13 000706   200105 473500                    LDP3    @SIZE,,AUTO
        13 000707   300000 235100                    LDA     0,,PR3
        13 000710   000715 600000 13                 TZE     s:8300

      494     8297    3             THEN
      495     8298    3                  CALL PSM$FREESEG (POINTER$);

   8298 13 000711   200103 630500                    EPPR0   @POINTER$,,AUTO
        13 000712   000017 631400 xsym               EPPR1   B_VECTNIL+15
        13 000713   000000 701000 xent               TSX1    PSM$FREESEG
        13 000714   000000 011000                    NOP     0

      496     8299
      497     8300    3             SIZE = 0;

   8300 13 000715   200105 470500                    LDP0    @SIZE,,AUTO
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:82   
        13 000716   000000 450100                    STZ     0,,PR0

      498     8301
      499     8302    3        END;

      500     8303
      501     8304    2        RETURN;

   8304 13 000717   200100 221300                    LDX1  ! TEMP_UTS+2,,AUTO
        13 000720   000001 702211                    TSX2  ! 1,X1

      502     8305
      503     8306    2   END DETACH;
      504     8307        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:83   
      505     8308    1   INITIATE_PROCESS: PROC;

   8308 13 000721   200100 741300       INITIATE_PR* STX1  ! TEMP_UTS+2,,AUTO

      506     8309
      507     8310    2        IF PS_MODE ~= DISPLAY_MODE#

   8310 13 000722   000000 235000 xsym               LDA     PS_MODE
        13 000723   000776 600000 13                 TZE     s:8340

      508     8311    3        THEN DO;

      509     8312
      510     8313    3             OPEN_LOGFILE.V.FUN# = %IN#;

   8313 13 000724   002000 236007                    LDQ     1024,DL
        13 000725   000053 552010 12                 STBQ    OPEN_LOGFILE+37,'10'O

      511     8314    3             OPEN_LOGFILE.V.SHARE# = %ALL#;

   8314 13 000726   000052 236000 12                 LDQ     OPEN_LOGFILE+36
        13 000727   000010 376000 14                 ANQ     8
        13 000730   000010 276007                    ORQ     8,DL
        13 000731   000052 756000 12                 STQ     OPEN_LOGFILE+36

      512     8315    3             OPEN_LOGFILE.V.RES# = PS_FILE_PARAMS.RES@;

   8315 13 000732   000020 235000 xsym               LDA     PS_FILE_PARAMS+16
        13 000733   000021 236000 xsym               LDQ     PS_FILE_PARAMS+17
        13 000734   000033 773000                    LRL     27
        13 000735   000027 376000 xsym               ANQ     B_VECTNIL+23
        13 000736   000056 756000 12                 STQ     OPEN_LOGFILE+40

      513     8316    3             OPEN_LOGFILE.V.ASN# = PS_FILE_PARAMS.ASN@;

   8316 13 000737   000020 236000 xsym               LDQ     PS_FILE_PARAMS+16
        13 000740   000033 772000                    QRL     27
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:84   
        13 000741   000053 552004 12                 STBQ    OPEN_LOGFILE+37,'04'O

      514     8317
      515     8318    3             CALL M$OPEN (OPEN_LOGFILE) ALTRET (CANT_OPEN_FOR_READ);

   8318 13 000742   000006 630400 12                 EPPR0   OPEN_LOGFILE
        13 000743   450000 713400                    CLIMB   alt,open
        13 000744   410400 401760                    pmme    nvectors=18
        13 000745   000747 702000 13                 TSX2    CANT_OPEN_FOR_READ

      516     8319
      517     8320    4             DO NEVER;

   8320 13 000746   000756 710000 13                 TRA     s:8327

   8318 13 000747                       CANT_OPEN_F* null
      518     8321
      519     8322    4   CANT_OPEN_FOR_READ: ;
      520     8323
      521     8324    4                  CALL PSE$ERRMSG (, SERIOUS#);

   8324 13 000747   000000 236000 14                 LDQ     0
        13 000750   000001 235000 xsym               LDA     B_VECTNIL+1
        13 000751   200116 757100                    STAQ    @DEFAULT_VALUE+1,,AUTO
        13 000752   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 000753   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000754   000000 701000 xent               TSX1    PSE$ERRMSG
        13 000755   000000 011000                    NOP     0

      522     8325    4             END;

      523     8326
      524     8327    3             PS_LOGFILE_KEY.COUNT = 5;

   8327 13 000756   005000 236003                    LDQ     2560,DU
        13 000757   000000 552040 xsym               STBQ    PS_LOGFILE_KEY,'40'O

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:85   
      525     8328    3             PS_LOGFILE_KEY.UTS = PS_START_UTS;

   8328 13 000760   000000 100400                    MLR     fill='000'O
        13 000761   000000 000004 xsym               ADSC9   PS_START_UTS             cn=0,n=4
        13 000762   000000 200004 xsym               ADSC9   PS_LOGFILE_KEY           cn=1,n=4

      526     8329    3             PS_LOGFILE_KEY.TAG = 'D';

   8329 13 000763   000104 236003                    LDQ     68,DU
        13 000764   000001 552020 xsym               STBQ    PS_LOGFILE_KEY+1,'20'O

      527     8330
      528     8331    3             CALL M$PRECORD (POSITION_LOGFILE) ALTRET (IGNORE_POSITION_ERROR);

   8331 13 000765   000030 630400 11                 EPPR0   POSITION_LOGFILE
        13 000766   440003 713400                    CLIMB   alt,+16387
        13 000767   401000 401760                    pmme    nvectors=3
        13 000770   000771 702000 13                 TSX2    IGNORE_POSITION_ERROR

   8329 13 000771                       IGNORE_POSI* null
      529     8332
      530     8333    3   IGNORE_POSITION_ERROR: ;
      531     8334
      532     8335    3             TIME_NOW = PS_LOGFILE_KEY.UTS;

   8335 13 000771   000000 235000 xsym               LDA     PS_LOGFILE_KEY
        13 000772   000001 236000 xsym               LDQ     PS_LOGFILE_KEY+1
        13 000773   000033 773000                    LRL     27
        13 000774   000154 756000 12                 STQ     TIME_NOW

      533     8336    3             PUNT_COUNTER = 0;

   8336 13 000775   200010 450100                    STZ     PUNT_COUNTER,,AUTO

      534     8337
      535     8338    3        END;

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:86   
      536     8339
      537     8340    2        FIRST_TIME = (PS_PUNT_COUNT > 0);

   8340 13 000776   400000 220003                    LDX0    -131072,DU
        13 000777   000000 235000 xsym               LDA     PS_PUNT_COUNT
        13 001000   001002 601000 13                 TNZ     s:8340+4
        13 001001   000000 220003                    LDX0    0,DU
        13 001002   000000 636010                    EAQ     0,X0
        13 001003   200016 756100                    STQ     FIRST_TIME,,AUTO

      538     8341
      539     8342    2        PS_WORKING_FLAGS = PS_DISPLAY_FLAGS;

   8342 13 001004   000000 236000 xsym               LDQ     PS_DISPLAY_FLAGS
        13 001005   777600 376003                    ANQ     -128,DU
        13 001006   000000 756000 xsym               STQ     PS_WORKING_FLAGS

      540     8343    2        PS_WORKING_FLAGS.MOUSE = %NO#;

   8343 13 001007   000035 236000 14                 LDQ     29
        13 001010   000000 356000 xsym               ANSQ    PS_WORKING_FLAGS

      541     8344    2        PS_WORKING_FLAGS.FEP = %NO#;

   8344 13 001011   000036 236000 14                 LDQ     30
        13 001012   000000 356000 xsym               ANSQ    PS_WORKING_FLAGS

      542     8345    2        IF PS_WORKING_FLAGS = %NO#

   8345 13 001013   000000 236000 xsym               LDQ     PS_WORKING_FLAGS
        13 001014   777600 316003                    CANQ    -128,DU
        13 001015   001021 601000 13                 TNZ     s:8349

      543     8346    2        THEN
      544     8347    2             PS_PMDAT_FLAGS.DISPLAY = %NO#;

   8347 13 001016   000031 236000 xsym               LDQ     B_VECTNIL+25
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:87   
        13 001017   000000 356000 xsym               ANSQ    PS_PMDAT_FLAGS
        13 001020   001023 710000 13                 TRA     s:8351

      545     8348    2        ELSE
      546     8349    2             PS_PMDAT_FLAGS.DISPLAY = %YES#;

   8349 13 001021   400000 236003                    LDQ     -131072,DU
        13 001022   000000 256000 xsym               ORSQ    PS_PMDAT_FLAGS

      547     8350
      548     8351    2        PS_WORKING_FLAGS = PS_LOG_FLAGS;

   8351 13 001023   000000 236000 xsym               LDQ     PS_LOG_FLAGS
        13 001024   777600 376003                    ANQ     -128,DU
        13 001025   000000 756000 xsym               STQ     PS_WORKING_FLAGS

      549     8352    2        PS_WORKING_FLAGS.MOUSE = %NO#;

   8352 13 001026   000035 236000 14                 LDQ     29
        13 001027   000000 356000 xsym               ANSQ    PS_WORKING_FLAGS

      550     8353    2        PS_WORKING_FLAGS.FEP = %NO#;

   8353 13 001030   000036 236000 14                 LDQ     30
        13 001031   000000 356000 xsym               ANSQ    PS_WORKING_FLAGS

      551     8354    2        IF PS_WORKING_FLAGS = %NO#

   8354 13 001032   000000 236000 xsym               LDQ     PS_WORKING_FLAGS
        13 001033   777600 316003                    CANQ    -128,DU
        13 001034   001040 601000 13                 TNZ     s:8358

      552     8355    2        THEN
      553     8356    2             PS_PMDAT_FLAGS.LOG = %NO#;

   8356 13 001035   000037 236000 14                 LDQ     31
        13 001036   000000 356000 xsym               ANSQ    PS_PMDAT_FLAGS
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:88   
        13 001037   001042 710000 13                 TRA     s:8360

      554     8357    2        ELSE
      555     8358    2             PS_PMDAT_FLAGS.LOG = %YES#;

   8358 13 001040   200000 236003                    LDQ     65536,DU
        13 001041   000000 256000 xsym               ORSQ    PS_PMDAT_FLAGS

      556     8359
      557     8360    2        PS_OLD_COLLECT = '0'B;

   8360 13 001042   000000 100400                    MLR     fill='000'O
        13 001043   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
        13 001044   000000 000150 xsym               ADSC9   PS_OLD_COLLECT           cn=0,n=104

      558     8361    2        PS_PMDAT_FOUND = '0'B;

   8361 13 001045   000000 450000 xsym               STZ     PS_PMDAT_FOUND

      559     8362
      560     8363    2        IF PS_SUMMARY_ITEMS = 0

   8363 13 001046   000000 236000 xsym               LDQ     PS_SUMMARY_ITEMS
        13 001047   001052 601000 13                 TNZ     s:8367

      561     8364    2        THEN
      562     8365    2             PS_DISPLAY_FLAGS.SUMMARY = %NO#;

   8365 13 001050   000040 236000 14                 LDQ     32
        13 001051   000000 356000 xsym               ANSQ    PS_DISPLAY_FLAGS

      563     8366
      564     8367    2        IF PS_DISPLAY_FLAGS.SUMMARY

   8367 13 001052   000000 236000 xsym               LDQ     PS_DISPLAY_FLAGS
        13 001053   004000 316003                    CANQ    2048,DU
        13 001054   001246 600000 13                 TZE     s:8417
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:89   

      565     8368    3        THEN DO;

      566     8369
      567     8370
      568     8371    3             PS_SUMMARY_HEADER = 'Interval end';

   8371 13 001055   040000 100400                    MLR     fill='040'O
        13 001056   000137 000014 11                 ADSC9   BARGRAPH_FMT+21          cn=0,n=12
        13 001057   000000 000214 xsym               ADSC9   PS_SUMMARY_HEADER        cn=0,n=140

      569     8372    3             CPOS1 = 14;

   8372 13 001060   000016 235007                    LDA     14,DL
        13 001061   200026 755100                    STA     CPOS1,,AUTO

      570     8373
      571     8374    3             PS_SUMMARY_FORMAT = '%A';

   8374 13 001062   040000 100400                    MLR     fill='040'O
        13 001063   000142 000002 11                 ADSC9   BARGRAPH_FMT+24          cn=0,n=2
        13 001064   000000 000214 xsym               ADSC9   PS_SUMMARY_FORMAT        cn=0,n=140

      572     8375    3             CPOS2 = 4;

   8375 13 001065   000004 235007                    LDA     4,DL
        13 001066   200027 755100                    STA     CPOS2,,AUTO

      573     8376
      574     8377    4             DO I = 0 TO PS_SUMMARY_ITEMS - 1;

   8377 13 001067   200005 450100                    STZ     I,,AUTO
        13 001070   001242 710000 13                 TRA     s:8413+1

      575     8378
      576     8379    4                  ITEM = PS_SUMMARY_LIST (I);

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:90   
   8379 13 001071   200005 720100                    LXL0    I,,AUTO
        13 001072   000000 235010 xsym               LDA     PS_SUMMARY_LIST,X0
        13 001073   200030 755100                    STA     ITEM,,AUTO

      577     8380
      578     8381    4                  TEMP = PS_SUMMARY_HEADER;

   8381 13 001074   040100 100400                    MLR     fill='040'O
        13 001075   000000 000214 xsym               ADSC9   PS_SUMMARY_HEADER        cn=0,n=140
        13 001076   200032 000214                    ADSC9   TEMP,,AUTO               cn=0,n=140

      579     8382
      580     8383    4                  CALL CONCAT (PS_SUMMARY_HEADER, SUBSTR(TEMP, 0, CPOS1),

   8383 13 001077   200030 236100                    LDQ     ITEM,,AUTO
        13 001100   000005 402007                    MPY     5,DL
        13 001101   000002 721006 xsym               LXL1    V_TABLE+2,QL
        13 001102   000777 361003                    ANX1    511,DU
        13 001103   200026 722100                    LXL2    CPOS1,,AUTO
        13 001104   040000 100540                    MLR     fill='040'O
        13 001105   200032 000012                    ADSC9   TEMP,,AUTO               cn=0,n=*X2
        13 001106   000000 000214 xsym               ADSC9   PS_SUMMARY_HEADER        cn=0,n=140
        13 001107   200026 236100                    LDQ     CPOS1,,AUTO
        13 001110   000214 116007                    CMPQ    140,DL
        13 001111   001122 603000 13                 TRC     s:8386
        13 001112   200030 236100                    LDQ     ITEM,,AUTO
        13 001113   000024 402007                    MPY     20,DL
        13 001114   777563 622012                    EAX2    -141,X2
        13 001115   777777 662003                    ERX2    -1,DU
        13 001116   200026 235100                    LDA     CPOS1,,AUTO
        13 001117   040045 100446                    MLR     fill='040'O
        13 001120   000003 000011 xsym               ADSC9   V_TABLE+3,Q              cn=0,n=*X1
        13 001121   000000 000012 xsym               ADSC9   PS_SUMMARY_HEADER,A      cn=0,n=*X2

      581     8384    4                       ADDR(V_TABLE.TITLE(ITEM)) -> TEXTC.TEXT);
      582     8385
      583     8386    4                  LEN = V_TABLE.TITLE.LEN(ITEM);
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:91   

   8386 13 001122   200030 236100                    LDQ     ITEM,,AUTO
        13 001123   000005 402007                    MPY     5,DL
        13 001124   000002 236006 xsym               LDQ     V_TABLE+2,QL
        13 001125   000777 376007                    ANQ     511,DL
        13 001126   200031 756100                    STQ     LEN,,AUTO

      584     8387
      585     8388    4                  CPOS1 = CPOS1 + LEN + 2;

   8388 13 001127   200026 036100                    ADLQ    CPOS1,,AUTO
        13 001130   000002 036007                    ADLQ    2,DL
        13 001131   200026 756100                    STQ     CPOS1,,AUTO

      586     8389
      587     8390    4                  IF V_TABLE.MODE(ITEM) = PERCENT#

   8390 13 001132   200030 236100                    LDQ     ITEM,,AUTO
        13 001133   000005 402007                    MPY     5,DL
        13 001134   000002 236006 xsym               LDQ     V_TABLE+2,QL
        13 001135   777000 376007                    ANQ     -512,DL
        13 001136   003000 116007                    CMPQ    1536,DL
        13 001137   001201 601000 13                 TNZ     s:8404

      588     8391    5                  THEN DO;

      589     8392
      590     8393    5                       TEMP = PS_SUMMARY_FORMAT;

   8393 13 001140   040100 100400                    MLR     fill='040'O
        13 001141   000000 000214 xsym               ADSC9   PS_SUMMARY_FORMAT        cn=0,n=140
        13 001142   200032 000214                    ADSC9   TEMP,,AUTO               cn=0,n=140

      591     8394
      592     8395    5                       CALL CONCAT (PS_SUMMARY_FORMAT, SUBSTR(TEMP, 0, CPOS2),

   8395 13 001143   200027 721100                    LXL1    CPOS2,,AUTO
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:92   
        13 001144   040000 100540                    MLR     fill='040'O
        13 001145   200032 000011                    ADSC9   TEMP,,AUTO               cn=0,n=*X1
        13 001146   000000 000214 xsym               ADSC9   PS_SUMMARY_FORMAT        cn=0,n=140
        13 001147   200027 236100                    LDQ     CPOS2,,AUTO
        13 001150   000214 116007                    CMPQ    140,DL
        13 001151   001176 603000 13                 TRC     s:8398
        13 001152   777563 622006                    EAX2    -141,QL
        13 001153   777777 662003                    ERX2    -1,DU
        13 001154   040046 100400                    MLR     fill='040'O
        13 001155   000041 000001 14                 ADSC9   33                       cn=0,n=1
        13 001156   000000 000012 xsym               ADSC9   PS_SUMMARY_FORMAT,Q      cn=0,n=*X2
        13 001157   000213 116007                    CMPQ    139,DL
        13 001160   001176 603000 13                 TRC     s:8398
        13 001161   777564 623006                    EAX3    -140,QL
        13 001162   777777 663003                    ERX3    -1,DU
        13 001163   200031 235100                    LDA     LEN,,AUTO
        13 001164   040046 100405                    MLR     fill='040'O
        13 001165   777777 400001 xsym               ADSC9   PS_DIGITS-1,A            cn=2,n=1
        13 001166   000000 200013 xsym               ADSC9   PS_SUMMARY_FORMAT,Q      cn=1,n=*X3
        13 001167   000212 116007                    CMPQ    138,DL
        13 001170   001176 603000 13                 TRC     s:8398
        13 001171   777565 624006                    EAX4    -139,QL
        13 001172   777777 664003                    ERX4    -1,DU
        13 001173   040046 100400                    MLR     fill='040'O
        13 001174   000143 000004 11                 ADSC9   BARGRAPH_FMT+25          cn=0,n=4
        13 001175   000000 400014 xsym               ADSC9   PS_SUMMARY_FORMAT,Q      cn=2,n=*X4

      593     8396    5                            '%', SUBSTR(PS_DIGITS, LEN-2, 1), 'D.%D');
      594     8397
      595     8398    5                       CPOS2 = CPOS2 + 8;

   8398 13 001176   000010 036007                    ADLQ    8,DL
        13 001177   200027 756100                    STQ     CPOS2,,AUTO

      596     8399
      597     8400    5                  END;

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:93   
   8400 13 001200   001241 710000 13                 TRA     s:8413

      598     8401
      599     8402    5                  ELSE DO;

      600     8403
      601     8404    5                       TEMP = PS_SUMMARY_FORMAT;

   8404 13 001201   040100 100400                    MLR     fill='040'O
        13 001202   000000 000214 xsym               ADSC9   PS_SUMMARY_FORMAT        cn=0,n=140
        13 001203   200032 000214                    ADSC9   TEMP,,AUTO               cn=0,n=140

      602     8405
      603     8406    5                       CALL CONCAT (PS_SUMMARY_FORMAT, SUBSTR(TEMP, 0, CPOS2), '%',

   8406 13 001204   200027 721100                    LXL1    CPOS2,,AUTO
        13 001205   040000 100540                    MLR     fill='040'O
        13 001206   200032 000011                    ADSC9   TEMP,,AUTO               cn=0,n=*X1
        13 001207   000000 000214 xsym               ADSC9   PS_SUMMARY_FORMAT        cn=0,n=140
        13 001210   200027 236100                    LDQ     CPOS2,,AUTO
        13 001211   000214 116007                    CMPQ    140,DL
        13 001212   001237 603000 13                 TRC     s:8409
        13 001213   777563 622006                    EAX2    -141,QL
        13 001214   777777 662003                    ERX2    -1,DU
        13 001215   040046 100400                    MLR     fill='040'O
        13 001216   000041 000001 14                 ADSC9   33                       cn=0,n=1
        13 001217   000000 000012 xsym               ADSC9   PS_SUMMARY_FORMAT,Q      cn=0,n=*X2
        13 001220   000213 116007                    CMPQ    139,DL
        13 001221   001237 603000 13                 TRC     s:8409
        13 001222   777564 623006                    EAX3    -140,QL
        13 001223   777777 663003                    ERX3    -1,DU
        13 001224   200031 235100                    LDA     LEN,,AUTO
        13 001225   040046 100405                    MLR     fill='040'O
        13 001226   000000 000001 xsym               ADSC9   PS_DIGITS,A              cn=0,n=1
        13 001227   000000 200013 xsym               ADSC9   PS_SUMMARY_FORMAT,Q      cn=1,n=*X3
        13 001230   000212 116007                    CMPQ    138,DL
        13 001231   001237 603000 13                 TRC     s:8409
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:94   
        13 001232   777565 624006                    EAX4    -139,QL
        13 001233   777777 664003                    ERX4    -1,DU
        13 001234   040046 100400                    MLR     fill='040'O
        13 001235   000042 000001 14                 ADSC9   34                       cn=0,n=1
        13 001236   000000 400014 xsym               ADSC9   PS_SUMMARY_FORMAT,Q      cn=2,n=*X4

      604     8407    5                            SUBSTR(PS_DIGITS, LEN, 1), 'D');
      605     8408
      606     8409    5                       CPOS2 = CPOS2 + 5;

   8409 13 001237   000005 036007                    ADLQ    5,DL
        13 001240   200027 756100                    STQ     CPOS2,,AUTO

      607     8410
      608     8411    5                  END;

      609     8412
      610     8413    4             END;

   8413 13 001241   200005 054100                    AOS     I,,AUTO
        13 001242   200005 236100                    LDQ     I,,AUTO
        13 001243   001071 604000 13                 TMI     s:8379
        13 001244   000000 116000 xsym               CMPQ    PS_SUMMARY_ITEMS
        13 001245   001071 602000 13                 TNC     s:8379

      611     8414
      612     8415    3        END;

      613     8416
      614     8417    2        PS_WORKING_FLAGS = %NO#;

   8417 13 001246   000000 450000 xsym               STZ     PS_WORKING_FLAGS

      615     8418    2        PS_WORKING_FLAGS.SUMMARY = %YES#;

   8418 13 001247   004000 236003                    LDQ     2048,DU
        13 001250   000000 256000 xsym               ORSQ    PS_WORKING_FLAGS
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:95   

      616     8419
      617     8420    2        IF PS_WORKING_FLAGS = PS_DISPLAY_FLAGS

   8420 13 001251   000000 236000 xsym               LDQ     PS_WORKING_FLAGS
        13 001252   000000 676000 xsym               ERQ     PS_DISPLAY_FLAGS
        13 001253   777600 376003                    ANQ     -128,DU
        13 001254   001266 601000 13                 TNZ     s:8428
        13 001255   000000 235000 xsym               LDA     PS_MODE
        13 001256   000003 115007                    CMPA    3,DL
        13 001257   001266 603000 13                 TRC     s:8428

      618     8421    2             AND PS_MODE <= GLOM_MODE#
      619     8422    3        THEN DO;

      620     8423
      621     8424    3             PS_SUMMARY_ONLY = %YES#;

   8424 13 001260   400000 236003                    LDQ     -131072,DU
        13 001261   000000 756000 xsym               STQ     PS_SUMMARY_ONLY

      622     8425    3             CALL PSD$SUM_HEAD;

   8425 13 001262   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 001263   000000 701000 xent               TSX1    PSD$SUM_HEAD
        13 001264   000000 011000                    NOP     0

      623     8426    3        END;

   8426 13 001265   001267 710000 13                 TRA     s:8430

      624     8427
      625     8428    2        ELSE PS_SUMMARY_ONLY = %NO#;

   8428 13 001266   000000 450000 xsym               STZ     PS_SUMMARY_ONLY

      626     8429
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:96   
      627     8430    2        DELTA_T = 0;

   8430 13 001267   200004 450100                    STZ     DELTA_T,,AUTO

      628     8431    2        PS_STATS_HITS = 0;

   8431 13 001270   000000 450000 xsym               STZ     PS_STATS_HITS

      629     8432
      630     8433    2        IF PS_MODE = BARGRAPH_MODE#

   8433 13 001271   000000 235000 xsym               LDA     PS_MODE
        13 001272   000005 115007                    CMPA    5,DL
        13 001273   001325 601000 13                 TNZ     s:8463

      631     8434    3        THEN DO;

      632     8435
      633     8436    3             CALL PSR$IDENT (0, BARGRAPH_TITLE,

   8436 13 001274   000043 630400 14                 EPPR0   35
        13 001275   000024 631400 xsym               EPPR1   B_VECTNIL+20
        13 001276   000000 701000 xent               TSX1    PSR$IDENT
        13 001277   000000 011000                    NOP     0

      634     8437    3                  BARGRAPH_VECTORS.TITLE_,
      635     8438    3                  BARGRAPH_VECTORS.SCALE_,
      636     8439    3                  BARGRAPH_VECTORS.LOW_,
      637     8440    3                  BARGRAPH_VECTORS.HIGH_);
      638     8441
      639     8442    3             CALL X$WRITE (PS_FDS, VECTOR(BARGRAPH_FMT),

   8442 13 001300   000054 630400 14                 EPPR0   44
        13 001301   000024 631400 xsym               EPPR1   B_VECTNIL+20
        13 001302   000000 701000 xent               TSX1    X$WRITE
        13 001303   000000 011000                    NOP     0

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:97   
      640     8443    3                  BARGRAPH_VECTORS.TITLE_,
      641     8444    3                  BARGRAPH_VECTORS.SCALE_,
      642     8445    3                  BARGRAPH_VECTORS.LOW_,
      643     8446    3                  BARGRAPH_VECTORS.HIGH_);
      644     8447
      645     8448    3             VLP_HDR.TITL.L# = LENGTHC(VLP_HDR.TITL.TITLE#);

   8448 13 001304   120000 236003                    LDQ     40960,DU
        13 001305   000117 552040 12                 STBQ    VLP_HDR+1,'40'O

      646     8449    3             VLP_HDR.TITL.TITLE# = PS_BUFFER;

   8449 13 001306   040000 100400                    MLR     fill='040'O
        13 001307   000000 000120 xsym               ADSC9   PS_BUFFER                cn=0,n=80
        13 001310   000117 200120 12                 ADSC9   VLP_HDR+1                cn=1,n=80

      647     8450
      648     8451    3             CALL M$DEVICE (SET_HEADER_ON_LP) ALTRET (HEADER_REJECTED);

   8451 13 001311   000100 630400 11                 EPPR0   SET_HEADER_ON_LP
        13 001312   450006 713400                    CLIMB   alt,+20486
        13 001313   401000 401760                    pmme    nvectors=3
        13 001314   001316 702000 13                 TSX2    HEADER_REJECTED

      649     8452
      650     8453    4             DO NEVER;

   8453 13 001315   001325 710000 13                 TRA     s:8463

      651     8454
      652     8455    4   HEADER_REJECTED:
      653     8456
      654     8457    4                  CALL PSE$ERRMSG (, SERIOUS#);

   8457 13 001316   000000 236000 14    HEADER_REJE* LDQ     0
        13 001317   000001 235000 xsym               LDA     B_VECTNIL+1
        13 001320   200116 757100                    STAQ    @DEFAULT_VALUE+1,,AUTO
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:98   
        13 001321   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 001322   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 001323   000000 701000 xent               TSX1    PSE$ERRMSG
        13 001324   000000 011000                    NOP     0

      655     8458
      656     8459    4             END;

      657     8460
      658     8461    3        END;

      659     8462
      660     8463    2        RETURN;

   8463 13 001325   200100 221300                    LDX1  ! TEMP_UTS+2,,AUTO
        13 001326   000001 702211                    TSX2  ! 1,X1

      661     8464
      662     8465    2   END INITIATE_PROCESS;
      663     8466        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:99   
      664     8467    1   PROCESS_PMDAT: PROC;

   8467 13 001327   200100 741300       PROCESS_PMD* STX1  ! TEMP_UTS+2,,AUTO

      665     8468    2        CALL PSL$EVAL (P_NOW#, TIME_NOW);

   8468 13 001330   000063 630400 14                 EPPR0   51
        13 001331   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 001332   000000 701000 xent               TSX1    PSL$EVAL
        13 001333   000000 011000                    NOP     0

      666     8469    2        PS_COLLECT.UTS = TIME_NOW;

   8469 13 001334   000154 235000 12                 LDA     TIME_NOW
        13 001335   000022 755000 xsym               STA     PS_COLLECT+18

      667     8470
      668     8471    2        CALL COLLECT(S_UXEQTIME#, PS_COLLECT.USRXEQ, 8);

   8471 13 001336   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 001337   000001 235000 xsym               LDA     B_VECTNIL+1
        13 001340   200106 757100                    STAQ    @OLD_SIZE,,AUTO
        13 001341   000066 237000 14                 LDAQ    54
        13 001342   200104 757100                    STAQ    @OLD_POINTER$,,AUTO
        13 001343   000004 236000 14                 LDQ     4
        13 001344   200103 756100                    STQ     @POINTER$,,AUTO
        13 001345   000166 701000 13                 TSX1    COLLECT
        13 001346   000000 011000                    NOP     0

      669     8472    2        CALL COLLECT(S_USRVTIME#, PS_COLLECT.USRSRV, 8);

   8472 13 001347   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 001350   000001 235000 xsym               LDA     B_VECTNIL+1
        13 001351   200106 757100                    STAQ    @OLD_SIZE,,AUTO
        13 001352   000070 237000 14                 LDAQ    56
        13 001353   200104 757100                    STAQ    @OLD_POINTER$,,AUTO
        13 001354   000014 236000 14                 LDQ     12
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:100  
        13 001355   200103 756100                    STQ     @POINTER$,,AUTO
        13 001356   000166 701000 13                 TSX1    COLLECT
        13 001357   000000 011000                    NOP     0

      670     8473    2        CALL COLLECT(S_MXEQTIME#, PS_COLLECT.MONXEQ, 8);

   8473 13 001360   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 001361   000001 235000 xsym               LDA     B_VECTNIL+1
        13 001362   200106 757100                    STAQ    @OLD_SIZE,,AUTO
        13 001363   000074 237000 14                 LDAQ    60
        13 001364   200104 757100                    STAQ    @OLD_POINTER$,,AUTO
        13 001365   000073 236000 14                 LDQ     59
        13 001366   200103 756100                    STQ     @POINTER$,,AUTO
        13 001367   000166 701000 13                 TSX1    COLLECT
        13 001370   000000 011000                    NOP     0

      671     8474    2        CALL COLLECT(S_MIDLTIME#, PS_COLLECT.IDLE, 8);

   8474 13 001371   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 001372   000001 235000 xsym               LDA     B_VECTNIL+1
        13 001373   200106 757100                    STAQ    @OLD_SIZE,,AUTO
        13 001374   000100 237000 14                 LDAQ    64
        13 001375   200104 757100                    STAQ    @OLD_POINTER$,,AUTO
        13 001376   000077 236000 14                 LDQ     63
        13 001377   200103 756100                    STQ     @POINTER$,,AUTO
        13 001400   000166 701000 13                 TSX1    COLLECT
        13 001401   000000 011000                    NOP     0

      672     8475    2        CALL COLLECT(S_MIDLWIO#, PS_COLLECT.IDLWIO, 8);

   8475 13 001402   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 001403   000001 235000 xsym               LDA     B_VECTNIL+1
        13 001404   200106 757100                    STAQ    @OLD_SIZE,,AUTO
        13 001405   000104 237000 14                 LDAQ    68
        13 001406   200104 757100                    STAQ    @OLD_POINTER$,,AUTO
        13 001407   000103 236000 14                 LDQ     67
        13 001410   200103 756100                    STQ     @POINTER$,,AUTO
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:101  
        13 001411   000166 701000 13                 TSX1    COLLECT
        13 001412   000000 011000                    NOP     0

      673     8476    2        CALL COLLECT(S_MIDLWRES#, PS_COLLECT.IDLWRES, 8);

   8476 13 001413   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 001414   000001 235000 xsym               LDA     B_VECTNIL+1
        13 001415   200106 757100                    STAQ    @OLD_SIZE,,AUTO
        13 001416   000110 237000 14                 LDAQ    72
        13 001417   200104 757100                    STAQ    @OLD_POINTER$,,AUTO
        13 001420   000107 236000 14                 LDQ     71
        13 001421   200103 756100                    STQ     @POINTER$,,AUTO
        13 001422   000166 701000 13                 TSX1    COLLECT
        13 001423   000000 011000                    NOP     0

      674     8477    2        CALL COLLECT(S_MIDLWRESIO#, PS_COLLECT.IDLWRESIO, 8);

   8477 13 001424   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 001425   000001 235000 xsym               LDA     B_VECTNIL+1
        13 001426   200106 757100                    STAQ    @OLD_SIZE,,AUTO
        13 001427   000114 237000 14                 LDAQ    76
        13 001430   200104 757100                    STAQ    @OLD_POINTER$,,AUTO
        13 001431   000113 236000 14                 LDQ     75
        13 001432   200103 756100                    STQ     @POINTER$,,AUTO
        13 001433   000166 701000 13                 TSX1    COLLECT
        13 001434   000000 011000                    NOP     0

      675     8478    2        CALL COLLECT(P_CALCNT#, PS_COLLECT.CALCNT, 8);

   8478 13 001435   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 001436   000001 235000 xsym               LDA     B_VECTNIL+1
        13 001437   200106 757100                    STAQ    @OLD_SIZE,,AUTO
        13 001440   000120 237000 14                 LDAQ    80
        13 001441   200104 757100                    STAQ    @OLD_POINTER$,,AUTO
        13 001442   000117 236000 14                 LDQ     79
        13 001443   200103 756100                    STQ     @POINTER$,,AUTO
        13 001444   000166 701000 13                 TSX1    COLLECT
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:102  
        13 001445   000000 011000                    NOP     0

      676     8479    2        CALL COLLECT (P_SCHD#, PS_COLLECT.SCHEDS, 8);

   8479 13 001446   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 001447   000001 235000 xsym               LDA     B_VECTNIL+1
        13 001450   200106 757100                    STAQ    @OLD_SIZE,,AUTO
        13 001451   000122 237000 14                 LDAQ    82
        13 001452   200104 757100                    STAQ    @OLD_POINTER$,,AUTO
        13 001453   000124 236000 14                 LDQ     84
        13 001454   200103 756100                    STQ     @POINTER$,,AUTO
        13 001455   000166 701000 13                 TSX1    COLLECT
        13 001456   000000 011000                    NOP     0

      677     8480    2        CALL COLLECT (P_RUE#, PS_COLLECT.EVENTS, 8);

   8480 13 001457   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 001460   000001 235000 xsym               LDA     B_VECTNIL+1
        13 001461   200106 757100                    STAQ    @OLD_SIZE,,AUTO
        13 001462   000126 237000 14                 LDAQ    86
        13 001463   200104 757100                    STAQ    @OLD_POINTER$,,AUTO
        13 001464   000130 236000 14                 LDQ     88
        13 001465   200103 756100                    STQ     @POINTER$,,AUTO
        13 001466   000166 701000 13                 TSX1    COLLECT
        13 001467   000000 011000                    NOP     0

      678     8481    2        CALL COLLECT (P_IOS#, PS_COLLECT.IOS, 10);

   8481 13 001470   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 001471   000001 235000 xsym               LDA     B_VECTNIL+1
        13 001472   200106 757100                    STAQ    @OLD_SIZE,,AUTO
        13 001473   000132 237000 14                 LDAQ    90
        13 001474   200104 757100                    STAQ    @OLD_POINTER$,,AUTO
        13 001475   000134 236000 14                 LDQ     92
        13 001476   200103 756100                    STQ     @POINTER$,,AUTO
        13 001477   000166 701000 13                 TSX1    COLLECT
        13 001500   000000 011000                    NOP     0
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:103  

      679     8482    2        CALL PSL$EVAL (P_ETMF#, PS_COLLECT.ETMF);

   8482 13 001501   000135 630400 14                 EPPR0   93
        13 001502   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 001503   000000 701000 xent               TSX1    PSL$EVAL
        13 001504   000000 011000                    NOP     0

      680     8483    2        CALL PSL$EVAL (P_RT90#, PS_COLLECT.RT90);

   8483 13 001505   000137 630400 14                 EPPR0   95
        13 001506   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 001507   000000 701000 xent               TSX1    PSL$EVAL
        13 001510   000000 011000                    NOP     0

      681     8484    2        CALL PSL$EVAL (P_AVGETMF#, PS_OLD_COLLECT.ETMF);

   8484 13 001511   000142 630400 14                 EPPR0   98
        13 001512   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 001513   000000 701000 xent               TSX1    PSL$EVAL
        13 001514   000000 011000                    NOP     0

      682     8485    2        CALL PSL$EVAL (P_AVGRT90#, PS_OLD_COLLECT.RT90);

   8485 13 001515   000145 630400 14                 EPPR0   101
        13 001516   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 001517   000000 701000 xent               TSX1    PSL$EVAL
        13 001520   000000 011000                    NOP     0

      683     8486    2        CALL PSL$EVAL (P_STARTUP#, PS_STARTUP);

   8486 13 001521   000147 630400 14                 EPPR0   103
        13 001522   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 001523   000000 701000 xent               TSX1    PSL$EVAL
        13 001524   000000 011000                    NOP     0

      684     8487    2        CALL TRANSFER (S_CUIS#, PS_COLLECT.USERS);
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:104  

   8487 13 001525   000152 236000 14                 LDQ     106
        13 001526   200104 756100                    STQ     @OLD_POINTER$,,AUTO
        13 001527   000153 236000 14                 LDQ     107
        13 001530   200103 756100                    STQ     @POINTER$,,AUTO
        13 001531   000255 701000 13                 TSX1    TRANSFER
        13 001532   000000 011000                    NOP     0

      685     8488    2        CALL PSL$EVAL (S_CTUIS#, PS_COLLECT.USERS.TOTAL);

   8488 13 001533   000154 630400 14                 EPPR0   108
        13 001534   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 001535   000000 701000 xent               TSX1    PSL$EVAL
        13 001536   000000 011000                    NOP     0

      686     8489    2        CALL TRANSFER (P_AUIS#, PS_OLD_COLLECT.USERS);

   8489 13 001537   000157 236000 14                 LDQ     111
        13 001540   200104 756100                    STQ     @OLD_POINTER$,,AUTO
        13 001541   000160 236000 14                 LDQ     112
        13 001542   200103 756100                    STQ     @POINTER$,,AUTO
        13 001543   000255 701000 13                 TSX1    TRANSFER
        13 001544   000000 011000                    NOP     0

      687     8490    2        CALL PSL$EVAL (P_IOLOAD#, PS_COLLECT.IOLOAD);

   8490 13 001545   000162 630400 14                 EPPR0   114
        13 001546   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 001547   000000 701000 xent               TSX1    PSL$EVAL
        13 001550   000000 011000                    NOP     0

      688     8491    2        CALL PSL$EVAL (P_AVGIOL#, PS_OLD_COLLECT.IOLOAD);

   8491 13 001551   000165 630400 14                 EPPR0   117
        13 001552   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 001553   000000 701000 xent               TSX1    PSL$EVAL
        13 001554   000000 011000                    NOP     0
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:105  

      689     8492    2        CALL PSL$EVAL (P_AVAIL_MEM#, PS_COLLECT.AVAIL_MEM);

   8492 13 001555   000170 630400 14                 EPPR0   120
        13 001556   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 001557   000000 701000 xent               TSX1    PSL$EVAL
        13 001560   000000 011000                    NOP     0

      690     8493    2        CALL PSL$EVAL (P_AVGAVAIL_MEM#, PS_OLD_COLLECT.AVAIL_MEM);

   8493 13 001561   000173 630400 14                 EPPR0   123
        13 001562   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 001563   000000 701000 xent               TSX1    PSL$EVAL
        13 001564   000000 011000                    NOP     0

      691     8494
      692     8495    2        CALL XUD$UTS_DIFF (PS_UPTIME, TIME_NOW, PS_STARTUP);

   8495 13 001565   000175 630400 14                 EPPR0   125
        13 001566   000021 631400 xsym               EPPR1   B_VECTNIL+17
        13 001567   000000 701000 xent               TSX1    XUD$UTS_DIFF
        13 001570   000000 011000                    NOP     0

      693     8496    2        PS_PMDAT_FOUND = '1'B;

   8496 13 001571   400000 236003                    LDQ     -131072,DU
        13 001572   000000 756000 xsym               STQ     PS_PMDAT_FOUND

      694     8497
      695     8498    2        IF PUNT_COUNTER = 0

   8498 13 001573   200010 235100                    LDA     PUNT_COUNTER,,AUTO
        13 001574   001577 601000 13                 TNZ     s:8501

      696     8499    2        THEN PS_PREVIOUS_TIME = PS_STARTUP;

   8499 13 001575   000000 235000 xsym               LDA     PS_STARTUP
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:106  
        13 001576   000000 755000 xsym               STA     PS_PREVIOUS_TIME

      697     8500
      698     8501    2        PS_COLLECT.TOTAL = PS_COLLECT.USRXEQ +

   8501 13 001577   000000 236000 xsym               LDQ     PS_COLLECT
        13 001600   000001 036000 xsym               ADLQ    PS_COLLECT+1
        13 001601   000002 036000 xsym               ADLQ    PS_COLLECT+2
        13 001602   000003 036000 xsym               ADLQ    PS_COLLECT+3
        13 001603   000004 036000 xsym               ADLQ    PS_COLLECT+4
        13 001604   000005 036000 xsym               ADLQ    PS_COLLECT+5
        13 001605   000006 036000 xsym               ADLQ    PS_COLLECT+6
        13 001606   000007 756000 xsym               STQ     PS_COLLECT+7

      699     8502    2             PS_COLLECT.USRSRV + PS_COLLECT.MONXEQ +
      700     8503    2             PS_COLLECT.IDLWIO + PS_COLLECT.IDLWRES +
      701     8504    2             PS_COLLECT.IDLWRESIO + PS_COLLECT.IDLE;
      702     8505
      703     8506    2        CALL PSL$LOCATE (P_IOS#, P_IOS$);

   8506 13 001607   200075 630500                    EPPR0   P_IOS$,,AUTO
        13 001610   200117 450500                    STP0    @DEFAULT_VALUE+2,,AUTO
        13 001611   000134 236000 14                 LDQ     92
        13 001612   200116 756100                    STQ     @DEFAULT_VALUE+1,,AUTO
        13 001613   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 001614   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 001615   000000 701000 xent               TSX1    PSL$LOCATE
        13 001616   000000 011000                    NOP     0

      704     8507
      705     8508    2        PS_COLLECT.IOS = PS_COLLECT.IOS - P_IOS$ -> BLOCK.DATA(%DV_MPC);

   8508 13 001617   200075 470500                    LDP0    P_IOS$,,AUTO
        13 001620   000023 236000 xsym               LDQ     PS_COLLECT+19
        13 001621   000011 136100                    SBLQ    9,,PR0
        13 001622   000023 756000 xsym               STQ     PS_COLLECT+19

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:107  
      706     8509
      707     8510    2        PS_COLLECT.SPECIFIC_IOS.DISK = P_IOS$ -> BLOCK.DATA(%DV_DP);

   8510 13 001623   000010 235100                    LDA     8,,PR0
        13 001624   000026 755000 xsym               STA     PS_COLLECT+22

      708     8511
      709     8512    2        PS_COLLECT.SPECIFIC_IOS.TAPE = P_IOS$ -> BLOCK.DATA(%DV_MT);

   8512 13 001625   000006 235100                    LDA     6,,PR0
        13 001626   000027 755000 xsym               STA     PS_COLLECT+23

      710     8513
      711     8514    2        PS_COLLECT.SPECIFIC_IOS.OTHER = PS_COLLECT.IOS -

   8514 13 001627   000026 136000 xsym               SBLQ    PS_COLLECT+22
        13 001630   000027 136000 xsym               SBLQ    PS_COLLECT+23
        13 001631   000030 756000 xsym               STQ     PS_COLLECT+24

      712     8515    2             PS_COLLECT.SPECIFIC_IOS.DISK - PS_COLLECT.SPECIFIC_IOS.TAPE;
      713     8516
      714     8517    2        IF PS_COLLECT.USRSRV - PS_OLD_COLLECT.USRSRV > 3435973

   8517 13 001632   000001 236000 xsym               LDQ     PS_COLLECT+1
        13 001633   000001 136000 xsym               SBLQ    PS_OLD_COLLECT+1
        13 001634   000200 116000 14                 CMPQ    128
        13 001635   001651 604400 13                 TMOZ    s:8523

      715     8518    2        THEN
      716     8519    2             PS_COLLECT.USEC_PER_PMME = (PS_COLLECT.USRSRV -

   8519 13 001636   000001 236000 xsym               LDQ     PS_COLLECT+1
        13 001637   000001 136000 xsym               SBLQ    PS_OLD_COLLECT+1
        13 001640   200116 756100                    STQ     @DEFAULT_VALUE+1,,AUTO
        13 001641   000021 236000 xsym               LDQ     PS_COLLECT+17
        13 001642   000021 136000 xsym               SBLQ    PS_OLD_COLLECT+17
        13 001643   023420 506007                    DIV     10000,DL
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:108  
        13 001644   200117 756100                    STQ     @DEFAULT_VALUE+2,,AUTO
        13 001645   200116 236100                    LDQ     @DEFAULT_VALUE+1,,AUTO
        13 001646   200117 506100                    DIV     @DEFAULT_VALUE+2,,AUTO
        13 001647   000020 756000 xsym               STQ     PS_COLLECT+16
        13 001650   001663 710000 13                 TRA     s:8526

      717     8520    2                  PS_OLD_COLLECT.USRSRV) / ((PS_COLLECT.CALCNT -
      718     8521    2                  PS_OLD_COLLECT.CALCNT) / 10000);
      719     8522    2        ELSE
      720     8523    2             PS_COLLECT.USEC_PER_PMME = ((PS_COLLECT.USRSRV - PS_OLD_COLLECT.USRSRV)

   8523 13 001651   000001 236000 xsym               LDQ     PS_COLLECT+1
        13 001652   000001 136000 xsym               SBLQ    PS_OLD_COLLECT+1
        13 001653   200116 756100                    STQ     @DEFAULT_VALUE+1,,AUTO
        13 001654   000021 236000 xsym               LDQ     PS_COLLECT+17
        13 001655   000021 136000 xsym               SBLQ    PS_OLD_COLLECT+17
        13 001656   200117 756100                    STQ     @DEFAULT_VALUE+2,,AUTO
        13 001657   200116 236100                    LDQ     @DEFAULT_VALUE+1,,AUTO
        13 001660   023420 402007                    MPY     10000,DL
        13 001661   200117 506100                    DIV     @DEFAULT_VALUE+2,,AUTO
        13 001662   000020 756000 xsym               STQ     PS_COLLECT+16

      721     8524    2                  * 10000) / (PS_COLLECT.CALCNT - PS_OLD_COLLECT.CALCNT);
      722     8525
      723     8526    2        IF PS_COLLECT.USRSRV > 3435973

   8526 13 001663   000001 235000 xsym               LDA     PS_COLLECT+1
        13 001664   000201 115000 14                 CMPA    129
        13 001665   001675 602000 13                 TNC     s:8531

      724     8527    2        THEN
      725     8528    2             PS_OLD_COLLECT.USEC_PER_PMME = PS_COLLECT.USRSRV_SBIN /

   8528 13 001666   000021 236000 xsym               LDQ     PS_COLLECT+17
        13 001667   023420 506007                    DIV     10000,DL
        13 001670   200116 756100                    STQ     @DEFAULT_VALUE+1,,AUTO
        13 001671   000001 236000 xsym               LDQ     PS_COLLECT+1
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:109  
        13 001672   200116 506100                    DIV     @DEFAULT_VALUE+1,,AUTO
        13 001673   000020 756000 xsym               STQ     PS_OLD_COLLECT+16
        13 001674   001701 710000 13                 TRA     s:8534

      726     8529    2                  ( PS_COLLECT.CALCNT_SBIN / 10000 );
      727     8530    2        ELSE
      728     8531    2             PS_OLD_COLLECT.USEC_PER_PMME = ( PS_COLLECT.USRSRV_SBIN * 10000 ) /

   8531 13 001675   000001 236000 xsym               LDQ     PS_COLLECT+1
        13 001676   023420 402007                    MPY     10000,DL
        13 001677   000021 506000 xsym               DIV     PS_COLLECT+17
        13 001700   000020 756000 xsym               STQ     PS_OLD_COLLECT+16

      729     8532    2                  PS_COLLECT.CALCNT_SBIN ;
      730     8533
      731     8534    2        CALL XUD$UTS_DIFF (PS_ELAPSED_TIME, TIME_NOW, PS_PREVIOUS_TIME);

   8534 13 001701   000202 630400 14                 EPPR0   130
        13 001702   000021 631400 xsym               EPPR1   B_VECTNIL+17
        13 001703   000000 701000 xent               TSX1    XUD$UTS_DIFF
        13 001704   000000 011000                    NOP     0

      732     8535
      733     8536    2        IF PS_MODE ~= DISPLAY_MODE#

   8536 13 001705   000000 235000 xsym               LDA     PS_MODE
        13 001706   001714 600000 13                 TZE     s:8541
        13 001707   200016 234100                    SZN     FIRST_TIME,,AUTO
        13 001710   001714 604000 13                 TMI     s:8541

      734     8537    2             AND NOT FIRST_TIME
      735     8538    2        THEN
      736     8539    2             CALL PSG$GATHER ALTRET (SKIP_THIS_INTERVAL);

   8539 13 001711   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 001712   000000 701000 xent               TSX1    PSG$GATHER
        13 001713   002030 702000 13                 TSX2    SKIP_THIS_INTERVAL
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:110  

      737     8540
      738     8541    2        IF PS_MODE <= GLOM_MODE#

   8541 13 001714   000000 235000 xsym               LDA     PS_MODE
        13 001715   000003 115007                    CMPA    3,DL
        13 001716   002030 603000 13                 TRC     SKIP_THIS_INTERVAL
        13 001717   200016 234100                    SZN     FIRST_TIME,,AUTO
        13 001720   002030 604000 13                 TMI     SKIP_THIS_INTERVAL

      739     8542    2             AND NOT FIRST_TIME
      740     8543    3        THEN DO;

      741     8544
      742     8545    3             IF (PS_DISPLAY_FLAGS) AND NOT (PS_SUMMARY_ONLY)

   8545 13 001721   000000 236000 xsym               LDQ     PS_DISPLAY_FLAGS
        13 001722   777600 316003                    CANQ    -128,DU
        13 001723   001744 600000 13                 TZE     s:8557
        13 001724   000000 234000 xsym               SZN     PS_SUMMARY_ONLY
        13 001725   001744 604000 13                 TMI     s:8557

      743     8546    4             THEN DO;

      744     8547
      745     8548    4                  CALL M$LINES (GET_LINES_REMAINING);

   8548 13 001726   000066 630400 11                 EPPR0   GET_LINES_REMAINING
        13 001727   050005 713400                    CLIMB   20485
        13 001730   400400 401760                    pmme    nvectors=2

      746     8549
      747     8550    4                  IF FIRST_TIME OR (LINES_REMAINING.RLINES# > 0)

   8550 13 001731   200016 234100                    SZN     FIRST_TIME,,AUTO
        13 001732   001735 604000 13                 TMI     s:8552
        13 001733   000114 220000 12                 LDX0    LINES_REMAINING
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:111  
        13 001734   001740 604400 13                 TMOZ    s:8554

      748     8551    4                  THEN
      749     8552    4                       CALL PSD$EJECT;

   8552 13 001735   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 001736   000000 701000 xent               TSX1    PSD$EJECT
        13 001737   000000 011000                    NOP     0

      750     8553
      751     8554    4                  CALL PSD$HEADER (PS_PREVIOUS_TIME, TIME_NOW);

   8554 13 001740   000205 630400 14                 EPPR0   133
        13 001741   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 001742   000000 701000 xent               TSX1    PSD$HEADER
        13 001743   000000 011000                    NOP     0

      752     8555    4             END;

      753     8556
      754     8557    3             IF PS_DISPLAY_FLAGS.CPU

   8557 13 001744   000000 234000 xsym               SZN     PS_DISPLAY_FLAGS
        13 001745   001751 605000 13                 TPL     s:8561

      755     8558    3             THEN
      756     8559    3                  CALL PSD$CPU;

   8559 13 001746   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 001747   000000 701000 xent               TSX1    PSD$CPU
        13 001750   000000 011000                    NOP     0

      757     8560
      758     8561    3             IF PS_DISPLAY_FLAGS.SCPU

   8561 13 001751   000000 236000 xsym               LDQ     PS_DISPLAY_FLAGS
        13 001752   020000 316003                    CANQ    8192,DU
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:112  
        13 001753   001757 600000 13                 TZE     s:8565

      759     8562    3             THEN
      760     8563    3                  CALL PSD$SCPU;

   8563 13 001754   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 001755   000000 701000 xent               TSX1    PSD$SCPU
        13 001756   000000 011000                    NOP     0

      761     8564
      762     8565    3             IF PS_DISPLAY_FLAGS.RESOURCES

   8565 13 001757   000000 236000 xsym               LDQ     PS_DISPLAY_FLAGS
        13 001760   200000 316003                    CANQ    65536,DU
        13 001761   001765 600000 13                 TZE     s:8569

      763     8566    3             THEN
      764     8567    3                  CALL PSD$RESRCE;

   8567 13 001762   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 001763   000000 701000 xent               TSX1    PSD$RESRCE
        13 001764   000000 011000                    NOP     0

      765     8568
      766     8569    3             IF PS_DISPLAY_FLAGS.DEVICES

   8569 13 001765   000000 236000 xsym               LDQ     PS_DISPLAY_FLAGS
        13 001766   100000 316003                    CANQ    32768,DU
        13 001767   001773 600000 13                 TZE     s:8573

      767     8570    3             THEN
      768     8571    3                  CALL PSD$DEVICES;

   8571 13 001770   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 001771   000000 701000 xent               TSX1    PSD$DEVICES
        13 001772   000000 011000                    NOP     0

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:113  
      769     8572
      770     8573    3             IF PS_DISPLAY_FLAGS.CHANNELS

   8573 13 001773   000000 236000 xsym               LDQ     PS_DISPLAY_FLAGS
        13 001774   040000 316003                    CANQ    16384,DU
        13 001775   002001 600000 13                 TZE     s:8577

      771     8574    3             THEN
      772     8575    3                  CALL PSD$CHANNELS;

   8575 13 001776   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 001777   000000 701000 xent               TSX1    PSD$CHANNELS
        13 002000   000000 011000                    NOP     0

      773     8576
      774     8577    3             IF PS_DISPLAY_FLAGS.PROCS

   8577 13 002001   000000 236000 xsym               LDQ     PS_DISPLAY_FLAGS
        13 002002   010000 316003                    CANQ    4096,DU
        13 002003   002007 600000 13                 TZE     s:8581

      775     8578    3             THEN
      776     8579    3                  CALL PSD$PROCS;

   8579 13 002004   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 002005   000000 701000 xent               TSX1    PSD$PROCS
        13 002006   000000 011000                    NOP     0

      777     8580
      778     8581    3             IF PS_DISPLAY_FLAGS.FAULT

   8581 13 002007   000000 430000 xsym               FSZN    PS_DISPLAY_FLAGS
        13 002010   002014 605000 13                 TPL     s:8585

      779     8582    3             THEN
      780     8583    3                  CALL PSD$FAULT;

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:114  
   8583 13 002011   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 002012   000000 701000 xent               TSX1    PSD$FAULT
        13 002013   000000 011000                    NOP     0

      781     8584
      782     8585    3             IF PS_DISPLAY_FLAGS.HISTOGRAMS

   8585 13 002014   000000 236000 xsym               LDQ     PS_DISPLAY_FLAGS
        13 002015   002000 316003                    CANQ    1024,DU
        13 002016   002022 600000 13                 TZE     s:8589

      783     8586    3             THEN
      784     8587    3                  CALL PSD$HISTO;

   8587 13 002017   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 002020   000000 701000 xent               TSX1    PSD$HISTO
        13 002021   000000 011000                    NOP     0

      785     8588
      786     8589    3             IF PS_DISPLAY_FLAGS.SUMMARY

   8589 13 002022   000000 236000 xsym               LDQ     PS_DISPLAY_FLAGS
        13 002023   004000 316003                    CANQ    2048,DU
        13 002024   002030 600000 13                 TZE     SKIP_THIS_INTERVAL

      787     8590    3             THEN
      788     8591    3                  CALL PSD$SUMMARY;

   8591 13 002025   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 002026   000000 701000 xent               TSX1    PSD$SUMMARY
        13 002027   000000 011000                    NOP     0

      789     8592
      790     8593    3        END;

   8581 13 002030                       SKIP_THIS_I* null
      791     8594
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:115  
      792     8595    2   SKIP_THIS_INTERVAL: ;
      793     8596
      794     8597    2        PS_OLD_COLLECT = PS_COLLECT;

   8597 13 002030   000000 100400                    MLR     fill='000'O
        13 002031   000000 000150 xsym               ADSC9   PS_COLLECT               cn=0,n=104
        13 002032   000000 000150 xsym               ADSC9   PS_OLD_COLLECT           cn=0,n=104

      795     8598    2        PS_OLD_PTRS$ = PS_PTRS$;

   8598 13 002033   000000 100400                    MLR     fill='000'O
        13 002034   000000 000620 xsym               ADSC9   PS_PTRS$                 cn=0,n=400
        13 002035   000000 000620 xsym               ADSC9   PS_OLD_PTRS$             cn=0,n=400

      796     8599
      797     8600    2        RETURN;

   8600 13 002036   200100 221300                    LDX1  ! TEMP_UTS+2,,AUTO
        13 002037   000001 702211                    TSX2  ! 1,X1

      798     8601
      799     8602    2   END PROCESS_PMDAT;
      800     8603        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:116  
      801     8604    1   TERMINATE_PROCESS: PROC;

   8604 13 002040   200100 741300       TERMINATE_P* STX1  ! TEMP_UTS+2,,AUTO

      802     8605
      803     8606    2        IF PS_MODE ~= DISPLAY_MODE#

   8606 13 002041   000000 235000 xsym               LDA     PS_MODE
        13 002042   002046 600000 13                 TZE     s:8610

      804     8607    2        THEN
      805     8608    2             CALL PSR$RESULTS;

   8608 13 002043   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 002044   000000 701000 xent               TSX1    PSR$RESULTS
        13 002045   000000 011000                    NOP     0

      806     8609
      807     8610    2        IF PS_SUMMARY_ONLY

   8610 13 002046   000000 234000 xsym               SZN     PS_SUMMARY_ONLY
        13 002047   002053 605000 13                 TPL     s:8614

      808     8611    2        THEN
      809     8612    2             CALL PSD$SKIP;

   8612 13 002050   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 002051   000000 701000 xent               TSX1    PSD$SKIP
        13 002052   000000 011000                    NOP     0

      810     8613
      811     8614    2        RETURN;

   8614 13 002053   200100 221300                    LDX1  ! TEMP_UTS+2,,AUTO
        13 002054   000001 702211                    TSX2  ! 1,X1

      812     8615
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:117  
      813     8616    2   END TERMINATE_PROCESS;
      814     8617        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:118  
      815     8618        /* PSD$DISP here                                                    */
      816     8619    1        CALL INITIATE_PROCESS;

   8619 13 002055   000721 701000 13                 TSX1    INITIATE_PROCESS
        13 002056   000000 011000                    NOP     0

      817     8620
      818     8621    1        IF PS_MODE = DISPLAY_MODE#

   8621 13 002057   000000 235000 xsym               LDA     PS_MODE
        13 002060   002441 601000 13                 TNZ     s:8730

      819     8622    2        THEN DO PUNT_COUNTER = 0 TO PS_PUNT_COUNT;

   8622 13 002061   200010 450100                    STZ     PUNT_COUNTER,,AUTO
        13 002062   002435 710000 13                 TRA     s:8727+3

      820     8623
      821     8624    2             PS_PREVIOUS_TIME = PS_TIME_NOW;

   8624 13 002063   000000 235000 xsym               LDA     PS_TIME_NOW
        13 002064   000000 755000 xsym               STA     PS_PREVIOUS_TIME

      822     8625    2             CALL M$TIME (FPT_TIME);

   8625 13 002065   000000 630400 11                 EPPR0   FPT_TIME
        13 002066   020004 713400                    CLIMB   8196
        13 002067   402000 401760                    pmme    nvectors=5

      823     8626    2             CALL XUD$UTS_ADJUST (NEXT_WAKEUP_TIME, TIME_NOW, PS_INTERVAL*%
              8626                      UTS_CSEC_MIN# + DELTA_T);

   8626 13 002070   000000 236000 xsym               LDQ     PS_INTERVAL
        13 002071   013560 402007                    MPY     6000,DL
        13 002072   200004 036100                    ADLQ    DELTA_T,,AUTO
        13 002073   200116 756100                    STQ     @DEFAULT_VALUE+1,,AUTO
        13 002074   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:119  
        13 002075   200121 450500                    STP0    @DEFAULT_VALUE+4,,AUTO
        13 002076   000064 236000 14                 LDQ     52
        13 002077   200120 756100                    STQ     @DEFAULT_VALUE+3,,AUTO
        13 002100   000207 236000 14                 LDQ     135
        13 002101   200117 756100                    STQ     @DEFAULT_VALUE+2,,AUTO
        13 002102   200117 630500                    EPPR0   @DEFAULT_VALUE+2,,AUTO
        13 002103   000021 631400 xsym               EPPR1   B_VECTNIL+17
        13 002104   000000 701000 xent               TSX1    XUD$UTS_ADJUST
        13 002105   000000 011000                    NOP     0

      824     8627    2             PS_TIME_NOW = TIME_NOW;

   8627 13 002106   000154 235000 12                 LDA     TIME_NOW
        13 002107   000000 755000 xsym               STA     PS_TIME_NOW

      825     8628
      826     8629        /* First do all the host displays for this interval, since we have no
      827     8630           trouble getting that data exactly when we feel like it.          */
      828     8631
      829     8632    2             IF PS_PMDAT_FLAGS.DISPLAY OR PS_PMDAT_FLAGS.LOG

   8632 13 002110   000000 234000 xsym               SZN     PS_PMDAT_FLAGS
        13 002111   002115 604000 13                 TMI     s:8635
        13 002112   000000 236000 xsym               LDQ     PS_PMDAT_FLAGS
        13 002113   200000 316003                    CANQ    65536,DU
        13 002114   002160 600000 13                 TZE     s:8648

      830     8633    3             THEN DO;

      831     8634
      832     8635    3                  CALL ATTACH(PS_PMDAT$, PS_PMDAT_SIZE, PS_OLD_PMDAT_SIZE,
              8635                           PS_NEEDED_PMDAT_SIZE, ENTADDR(PSD$GET_PMDAT));

   8635 13 002115   000000 636000 xent               EAQ     PSD$GET_PMDAT
        13 002116   200122 756100                    STQ     @DEFAULT_VALUE+5,,AUTO
        13 002117   200122 630500                    EPPR0   @DEFAULT_VALUE+5,,AUTO
        13 002120   200105 450500                    STP0    @OLD_POINTER$+1,,AUTO
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:120  
        13 002121   000210 236000 14                 LDQ     136
        13 002122   200104 756100                    STQ     @POINTER$+1,,AUTO
        13 002123   000212 237000 14                 LDAQ    138
        13 002124   200102 757100                    STAQ    @DISP_FLAG+1,,AUTO
        13 002125   000214 236000 14                 LDQ     140
        13 002126   200101 756100                    STQ     TEMP_UTS+3,,AUTO
        13 002127   000003 701000 13                 TSX1    ATTACH
        13 002130   000000 011000                    NOP     0

      833     8636
      834     8637    3                  IF PS_PMDAT_FLAGS.LOG

   8637 13 002131   000000 236000 xsym               LDQ     PS_PMDAT_FLAGS
        13 002132   200000 316003                    CANQ    65536,DU
        13 002133   002144 600000 13                 TZE     s:8640

      835     8638    3                  THEN CALL WRITE_LOG(PS_PMDAT$, PS_PMDAT_SIZE, PS_TIME_NOW, 'D');

   8638 13 002134   000215 236000 14                 LDQ     141
        13 002135   200104 756100                    STQ     @POINTER$+1,,AUTO
        13 002136   000216 237000 14                 LDAQ    142
        13 002137   200102 757100                    STAQ    @DISP_FLAG+1,,AUTO
        13 002140   000214 236000 14                 LDQ     140
        13 002141   200101 756100                    STQ     TEMP_UTS+3,,AUTO
        13 002142   000442 701000 13                 TSX1    WRITE_LOG
        13 002143   000000 011000                    NOP     0

      836     8639
      837     8640    3                  CALL PROCESS_PMDAT;

   8640 13 002144   001327 701000 13                 TSX1    PROCESS_PMDAT
        13 002145   000000 011000                    NOP     0

      838     8641
      839     8642    3                  CALL DETACH (PS_PMDAT_FLAGS.DISPLAY, PS_PMDAT_FLAGS.LOG,

   8642 13 002146   000213 236000 14                 LDQ     139
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:121  
        13 002147   200106 756100                    STQ     @SIZE+1,,AUTO
        13 002150   000220 237000 14                 LDAQ    144
        13 002151   200104 757100                    STAQ    @POINTER$+1,,AUTO
        13 002152   000222 237000 14                 LDAQ    146
        13 002153   200102 757100                    STAQ    @DISP_FLAG+1,,AUTO
        13 002154   000224 236000 14                 LDQ     148
        13 002155   200101 756100                    STQ     TEMP_UTS+3,,AUTO
        13 002156   000641 701000 13                 TSX1    DETACH
        13 002157   000000 011000                    NOP     0

      840     8643    3                       PS_PMDAT$, PS_OLD_PMDAT$,
      841     8644    3                       PS_PMDAT_SIZE, PS_OLD_PMDAT_SIZE);
      842     8645
      843     8646    3             END /*IF PMDAT */;

      844     8647
      845     8648    2             IF PS_DISPLAY_FLAGS.MOUSE OR PS_LOG_FLAGS.MOUSE

   8648 13 002160   000000 236000 xsym               LDQ     PS_DISPLAY_FLAGS
        13 002161   000200 316003                    CANQ    128,DU
        13 002162   002166 601000 13                 TNZ     s:8651
        13 002163   000000 236000 xsym               LDQ     PS_LOG_FLAGS
        13 002164   000200 316003                    CANQ    128,DU
        13 002165   002235 600000 13                 TZE     s:8665

      846     8649    3             THEN DO;

      847     8650
      848     8651    3                  CALL ATTACH(PS_MOUSE$, PS_MOUSE_SIZE, PS_OLD_MOUSE_SIZE,
              8651                           PS_NEEDED_MOUSE_SIZE, ENTADDR(PSD$GET_MOUSE));

   8651 13 002166   000000 636000 xent               EAQ     PSD$GET_MOUSE
        13 002167   200123 756100                    STQ     @DEFAULT_VALUE+6,,AUTO
        13 002170   200123 630500                    EPPR0   @DEFAULT_VALUE+6,,AUTO
        13 002171   200105 450500                    STP0    @OLD_POINTER$+1,,AUTO
        13 002172   000225 236000 14                 LDQ     149
        13 002173   200104 756100                    STQ     @POINTER$+1,,AUTO
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:122  
        13 002174   000226 237000 14                 LDAQ    150
        13 002175   200102 757100                    STAQ    @DISP_FLAG+1,,AUTO
        13 002176   000230 236000 14                 LDQ     152
        13 002177   200101 756100                    STQ     TEMP_UTS+3,,AUTO
        13 002200   000003 701000 13                 TSX1    ATTACH
        13 002201   000000 011000                    NOP     0

      849     8652
      850     8653    3                  IF PS_LOG_FLAGS.MOUSE

   8653 13 002202   000000 236000 xsym               LDQ     PS_LOG_FLAGS
        13 002203   000200 316003                    CANQ    128,DU
        13 002204   002215 600000 13                 TZE     s:8656

      851     8654    3                  THEN CALL WRITE_LOG(PS_MOUSE$, PS_MOUSE_SIZE, PS_TIME_NOW, 'M');

   8654 13 002205   000232 236000 14                 LDQ     154
        13 002206   200104 756100                    STQ     @POINTER$+1,,AUTO
        13 002207   000234 237000 14                 LDAQ    156
        13 002210   200102 757100                    STAQ    @DISP_FLAG+1,,AUTO
        13 002211   000230 236000 14                 LDQ     152
        13 002212   200101 756100                    STQ     TEMP_UTS+3,,AUTO
        13 002213   000442 701000 13                 TSX1    WRITE_LOG
        13 002214   000000 011000                    NOP     0

      852     8655
      853     8656    3                  IF PS_DISPLAY_FLAGS.MOUSE

   8656 13 002215   000000 236000 xsym               LDQ     PS_DISPLAY_FLAGS
        13 002216   000200 316003                    CANQ    128,DU
        13 002217   002223 600000 13                 TZE     s:8659

      854     8657    3                  THEN CALL PSD$MOUSE;

   8657 13 002220   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 002221   000000 701000 xent               TSX1    PSD$MOUSE
        13 002222   000000 011000                    NOP     0
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:123  

      855     8658
      856     8659    3                  CALL DETACH (PS_DISPLAY_FLAGS.MOUSE, PS_LOG_FLAGS.MOUSE,

   8659 13 002223   000227 236000 14                 LDQ     151
        13 002224   200106 756100                    STQ     @SIZE+1,,AUTO
        13 002225   000236 237000 14                 LDAQ    158
        13 002226   200104 757100                    STAQ    @POINTER$+1,,AUTO
        13 002227   000240 237000 14                 LDAQ    160
        13 002230   200102 757100                    STAQ    @DISP_FLAG+1,,AUTO
        13 002231   000242 236000 14                 LDQ     162
        13 002232   200101 756100                    STQ     TEMP_UTS+3,,AUTO
        13 002233   000641 701000 13                 TSX1    DETACH
        13 002234   000000 011000                    NOP     0

      857     8660    3                       PS_MOUSE$, PS_OLD_MOUSE$,
      858     8661    3                       PS_MOUSE_SIZE, PS_OLD_MOUSE_SIZE);
      859     8662
      860     8663    3             END /*IF MoUsE */;

      861     8664
      862     8665    2             IF PS_DISPLAY_FLAGS.FEP OR PS_LOG_FLAGS.FEP

   8665 13 002235   000000 236000 xsym               LDQ     PS_DISPLAY_FLAGS
        13 002236   000400 316003                    CANQ    256,DU
        13 002237   002243 601000 13                 TNZ     s:8668
        13 002240   000000 236000 xsym               LDQ     PS_LOG_FLAGS
        13 002241   000400 316003                    CANQ    256,DU
        13 002242   002311 600000 13                 TZE     SLEEP

      863     8666    3             THEN DO;

      864     8667
      865     8668    3                 CALL ATTACH(PS_FEP$, PS_FEP_SIZE, PS_OLD_FEP_SIZE, PS_NEEDED_FEP_SIZE
              8668                           , ENTADDR(PSD$GET_FEP)) ALTRET(SLEEP);

   8668 13 002243   000000 636000 xent               EAQ     PSD$GET_FEP
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:124  
        13 002244   200124 756100                    STQ     @DEFAULT_VALUE+7,,AUTO
        13 002245   200124 630500                    EPPR0   @DEFAULT_VALUE+7,,AUTO
        13 002246   200105 450500                    STP0    @OLD_POINTER$+1,,AUTO
        13 002247   000243 236000 14                 LDQ     163
        13 002250   200104 756100                    STQ     @POINTER$+1,,AUTO
        13 002251   000244 237000 14                 LDAQ    164
        13 002252   200102 757100                    STAQ    @DISP_FLAG+1,,AUTO
        13 002253   000246 236000 14                 LDQ     166
        13 002254   200101 756100                    STQ     TEMP_UTS+3,,AUTO
        13 002255   000003 701000 13                 TSX1    ATTACH
        13 002256   002311 702000 13                 TSX2    SLEEP

      866     8669
      867     8670    3                  IF PS_LOG_FLAGS.FEP

   8670 13 002257   000000 236000 xsym               LDQ     PS_LOG_FLAGS
        13 002260   000400 316003                    CANQ    256,DU
        13 002261   002272 600000 13                 TZE     s:8673

      868     8671    3                  THEN CALL WRITE_LOG(PS_FEP$, PS_FEP_SIZE, PS_TIME_NOW, 'F');

   8671 13 002262   000250 236000 14                 LDQ     168
        13 002263   200104 756100                    STQ     @POINTER$+1,,AUTO
        13 002264   000252 237000 14                 LDAQ    170
        13 002265   200102 757100                    STAQ    @DISP_FLAG+1,,AUTO
        13 002266   000246 236000 14                 LDQ     166
        13 002267   200101 756100                    STQ     TEMP_UTS+3,,AUTO
        13 002270   000442 701000 13                 TSX1    WRITE_LOG
        13 002271   000000 011000                    NOP     0

      869     8672
      870     8673    3                  IF NOT FIRST_TIME

   8673 13 002272   200016 234100                    SZN     FIRST_TIME,,AUTO
        13 002273   002277 604000 13                 TMI     s:8676

      871     8674    3                  THEN CALL PSD$FEP;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:125  

   8674 13 002274   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 002275   000000 701000 xent               TSX1    PSD$FEP
        13 002276   000000 011000                    NOP     0

      872     8675
      873     8676    3                  CALL DETACH (PS_DISPLAY_FLAGS.FEP, PS_LOG_FLAGS.FEP,

   8676 13 002277   000245 236000 14                 LDQ     165
        13 002300   200106 756100                    STQ     @SIZE+1,,AUTO
        13 002301   000254 237000 14                 LDAQ    172
        13 002302   200104 757100                    STAQ    @POINTER$+1,,AUTO
        13 002303   000256 237000 14                 LDAQ    174
        13 002304   200102 757100                    STAQ    @DISP_FLAG+1,,AUTO
        13 002305   000260 236000 14                 LDQ     176
        13 002306   200101 756100                    STQ     TEMP_UTS+3,,AUTO
        13 002307   000641 701000 13                 TSX1    DETACH
        13 002310   000000 011000                    NOP     0

      874     8677    3                       PS_FEP$, PS_OLD_FEP$,
      875     8678    3                       PS_FEP_SIZE, PS_OLD_FEP_SIZE);
      876     8679
      877     8680    3             END /*IF FEP */;

      878     8681
      879     8682        /* Now get ready for end-of-interval stuff...                       */
      880     8683
      881     8684    2   SLEEP:    IF FIRST_TIME

   8684 13 002311   200016 234100       SLEEP        SZN     FIRST_TIME,,AUTO
        13 002312   002314 605000 13                 TPL     s:8687

      882     8685    2             THEN PS_OLD_COLLECT.UTS = 0; /* for BARGRAPH and REPLAY stuff */

   8685 13 002313   000022 450000 xsym               STZ     PS_OLD_COLLECT+18

      883     8686
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:126  
      884     8687    2             SNORED = %NO#;

   8687 13 002314   200021 450100                    STZ     SNORED,,AUTO

      885     8688
      886     8689    3             DO UNTIL NOT CONTINUE_SLEEPING;

      887     8690
      888     8691    3                  CONTINUE_SLEEPING = %NO#;

   8691 13 002315   200022 450100                    STZ     CONTINUE_SLEEPING,,AUTO

      889     8692
      890     8693    3                  CALL M$TIME (FPT_TIME);

   8693 13 002316   000000 630400 11                 EPPR0   FPT_TIME
        13 002317   020004 713400                    CLIMB   8196
        13 002320   402000 401760                    pmme    nvectors=5

      891     8694
      892     8695    3                  IF FIRST_SLEEP_THIS_INTERVAL AND TIME_NOW >= NEXT_WAKEUP_TIME

   8695 13 002321   200020 234100                    SZN     FIRST_SLEEP_THIS_INTERVAL,,AUTO
        13 002322   002356 605000 13                 TPL     s:8702
        13 002323   000154 236000 12                 LDQ     TIME_NOW
        13 002324   000155 116000 12                 CMPQ    NEXT_WAKEUP_TIME
        13 002325   002356 602000 13                 TNC     s:8702

      893     8696    4                  THEN DO; /* WE OVER-SHOT WHILE DOING DISPLAYS */

      894     8697    4                       CALL XUD$UTS_DIFF (DELTA_T, TIME_NOW, NEXT_WAKEUP_TIME);

   8697 13 002326   000207 236000 14                 LDQ     135
        13 002327   200120 756100                    STQ     @DEFAULT_VALUE+3,,AUTO
        13 002330   000064 236000 14                 LDQ     52
        13 002331   200117 756100                    STQ     @DEFAULT_VALUE+2,,AUTO
        13 002332   200004 630500                    EPPR0   DELTA_T,,AUTO
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:127  
        13 002333   200116 450500                    STP0    @DEFAULT_VALUE+1,,AUTO
        13 002334   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 002335   000021 631400 xsym               EPPR1   B_VECTNIL+17
        13 002336   000000 701000 xent               TSX1    XUD$UTS_DIFF
        13 002337   000000 011000                    NOP     0

      895     8698    4                       CALL XUD$UTS_ADJUST (NEXT_WAKEUP_TIME, NEXT_WAKEUP_TIME,

   8698 13 002340   200004 236100                    LDQ     DELTA_T,,AUTO
        13 002341   013560 506007                    DIV     6000,DL
        13 002342   013560 402007                    MPY     6000,DL
        13 002343   013560 036007                    ADLQ    6000,DL
        13 002344   200116 756100                    STQ     @DEFAULT_VALUE+1,,AUTO
        13 002345   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 002346   200121 450500                    STP0    @DEFAULT_VALUE+4,,AUTO
        13 002347   000207 236000 14                 LDQ     135
        13 002350   200120 756100                    STQ     @DEFAULT_VALUE+3,,AUTO
        13 002351   200117 756100                    STQ     @DEFAULT_VALUE+2,,AUTO
        13 002352   200117 630500                    EPPR0   @DEFAULT_VALUE+2,,AUTO
        13 002353   000021 631400 xsym               EPPR1   B_VECTNIL+17
        13 002354   000000 701000 xent               TSX1    XUD$UTS_ADJUST
        13 002355   000000 011000                    NOP     0

      896     8699    4                            (DELTA_T/%UTS_CSEC_MIN# + 1)*%UTS_CSEC_MIN#);
      897     8700    4                  END;

      898     8701
      899     8702    3                  CALL XUD$UTS_DIFF (DELTA_T, NEXT_WAKEUP_TIME, TIME_NOW);

   8702 13 002356   000064 236000 14                 LDQ     52
        13 002357   200120 756100                    STQ     @DEFAULT_VALUE+3,,AUTO
        13 002360   000207 236000 14                 LDQ     135
        13 002361   200117 756100                    STQ     @DEFAULT_VALUE+2,,AUTO
        13 002362   200004 630500                    EPPR0   DELTA_T,,AUTO
        13 002363   200116 450500                    STP0    @DEFAULT_VALUE+1,,AUTO
        13 002364   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 002365   000021 631400 xsym               EPPR1   B_VECTNIL+17
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:128  
        13 002366   000000 701000 xent               TSX1    XUD$UTS_DIFF
        13 002367   000000 011000                    NOP     0

      900     8703    3                  DELTA_T = (DELTA_T + 50) / 100;

   8703 13 002370   200004 236100                    LDQ     DELTA_T,,AUTO
        13 002371   000062 036007                    ADLQ    50,DL
        13 002372   000144 506007                    DIV     100,DL
        13 002373   200004 756100                    STQ     DELTA_T,,AUTO

      901     8704
      902     8705
      903     8706    3                  IF PUNT_COUNTER < PS_PUNT_COUNT AND DELTA_T > 0

   8706 13 002374   200010 236100                    LDQ     PUNT_COUNTER,,AUTO
        13 002375   000000 116000 xsym               CMPQ    PS_PUNT_COUNT
        13 002376   002403 603000 13                 TRC     s:8709
        13 002377   200004 235100                    LDA     DELTA_T,,AUTO
        13 002400   002403 604400 13                 TMOZ    s:8709

      904     8707    3                  THEN CONTINUE_SLEEPING = %YES#;

   8707 13 002401   400000 236003                    LDQ     -131072,DU
        13 002402   200022 756100                    STQ     CONTINUE_SLEEPING,,AUTO

      905     8708
      906     8709    3                  IF DELTA_T < 0 THEN CONTINUE_SLEEPING = %NO#;

   8709 13 002403   200004 235100                    LDA     DELTA_T,,AUTO
        13 002404   002406 605000 13                 TPL     s:8711

   8709 13 002405   200022 450100                    STZ     CONTINUE_SLEEPING,,AUTO

      907     8710
      908     8711    4                  IF CONTINUE_SLEEPING THEN DO;

   8711 13 002406   200022 234100                    SZN     CONTINUE_SLEEPING,,AUTO
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:129  
        13 002407   002427 605000 13                 TPL     s:8723

      909     8712
      910     8713    4                       IF NOT PS_SUMMARY_ONLY AND NOT SNORED

   8713 13 002410   000000 234000 xsym               SZN     PS_SUMMARY_ONLY
        13 002411   002422 604000 13                 TMI     s:8719
        13 002412   200021 234100                    SZN     SNORED,,AUTO
        13 002413   002422 604000 13                 TMI     s:8719

      911     8714    5                       THEN DO;

      912     8715    5                            CALL PSE$GRIPE (E$PS_SLEEPING);

   8715 13 002414   000005 630400 14                 EPPR0   5
        13 002415   000017 631400 xsym               EPPR1   B_VECTNIL+15
        13 002416   000000 701000 xent               TSX1    PSE$GRIPE
        13 002417   000000 011000                    NOP     0

      913     8716    5                            SNORED = %YES#;

   8716 13 002420   400000 236003                    LDQ     -131072,DU
        13 002421   200021 756100                    STQ     SNORED,,AUTO

      914     8717    5                       END;

      915     8718
      916     8719    4                       FPT_WAIT.V.UNITS# = DELTA_T;

   8719 13 002422   200004 235100                    LDA     DELTA_T,,AUTO
        13 002423   000004 755000 12                 STA     FPT_WAIT+4

      917     8720    4                       CALL M$WAIT (FPT_WAIT);

   8720 13 002424   000000 630400 12                 EPPR0   FPT_WAIT
        13 002425   020006 713400                    CLIMB   8198
        13 002426   400400 401760                    pmme    nvectors=2
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:130  

      918     8721
      919     8722    4                  END /* IF CONTINUE_SLEEPING */;

      920     8723    3             END /*WHILE CONTINUE_SLEEPING */;

   8723 13 002427   200022 234100                    SZN     CONTINUE_SLEEPING,,AUTO
        13 002430   002315 604000 13                 TMI     s:8691

      921     8724
      922     8725    2             FIRST_TIME = %NO#;

   8725 13 002431   200016 450100                    STZ     FIRST_TIME,,AUTO

      923     8726
      924     8727    2        END /* IF DISPLAY_MODE# DO PUNT_COUNTER */;

   8727 13 002432   200010 235100                    LDA     PUNT_COUNTER,,AUTO
        13 002433   000001 035007                    ADLA    1,DL
        13 002434   200010 755100                    STA     PUNT_COUNTER,,AUTO
        13 002435   000000 236000 xsym               LDQ     PS_PUNT_COUNT
        13 002436   200010 116100                    CMPQ    PUNT_COUNTER,,AUTO
        13 002437   002063 603000 13                 TRC     s:8624
        13 002440   002664 710000 13                 TRA     s:8826

      925     8728        %EJECT;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:131  
      926     8729    1        ELSE /* NOT DISPLAY_MODE */
      927     8730    2        DO WHILE PS_LOGFILE_KEY.UTS<PS_END_UTS;

   8730 13 002441   000000 235000 xsym               LDA     PS_LOGFILE_KEY
        13 002442   000001 236000 xsym               LDQ     PS_LOGFILE_KEY+1
        13 002443   000033 773000                    LRL     27
        13 002444   000000 116000 xsym               CMPQ    PS_END_UTS
        13 002445   002664 603000 13                 TRC     s:8826

      928     8731
      929     8732    2   READ_LOG_FILE:
      930     8733    2             CALL ATTACH(PS_LOGFILE$,

   8733 13 002446   000000 636000 xent  READ_LOG_FI* EAQ     PSD$READ_IN
        13 002447   200125 756100                    STQ     @DEFAULT_VALUE+8,,AUTO
        13 002450   200125 630500                    EPPR0   @DEFAULT_VALUE+8,,AUTO
        13 002451   200105 450500                    STP0    @OLD_POINTER$+1,,AUTO
        13 002452   000261 236000 14                 LDQ     177
        13 002453   200104 756100                    STQ     @POINTER$+1,,AUTO
        13 002454   000262 237000 14                 LDAQ    178
        13 002455   200102 757100                    STAQ    @DISP_FLAG+1,,AUTO
        13 002456   000264 236000 14                 LDQ     180
        13 002457   200101 756100                    STQ     TEMP_UTS+3,,AUTO
        13 002460   000003 701000 13                 TSX1    ATTACH
        13 002461   002665 702000 13                 TSX2    DONE

      931     8734    2                  PS_LOGFILE_SIZE,
      932     8735    2                  PS_OLD_LOGFILE_SIZE,
      933     8736    2                  PS_NEEDED_LOGFILE_SIZE,
      934     8737    2                  ENTADDR(PSD$READ_IN)) ALTRET(DONE);
      935     8738
      936     8739    2             CALL XUD$UTS_ADJ_25TH (TEMP_UTS, TIME_NOW, 30 * %UTS_25TH_SEC#);

   8739 13 002462   000266 236000 14                 LDQ     182
        13 002463   200120 756100                    STQ     @DEFAULT_VALUE+3,,AUTO
        13 002464   000064 236000 14                 LDQ     52
        13 002465   200117 756100                    STQ     @DEFAULT_VALUE+2,,AUTO
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:132  
        13 002466   200076 630500                    EPPR0   TEMP_UTS,,AUTO
        13 002467   200116 450500                    STP0    @DEFAULT_VALUE+1,,AUTO
        13 002470   200116 630500                    EPPR0   @DEFAULT_VALUE+1,,AUTO
        13 002471   000021 631400 xsym               EPPR1   B_VECTNIL+17
        13 002472   000000 701000 xent               TSX1    XUD$UTS_ADJ_25TH
        13 002473   000000 011000                    NOP     0

      937     8740    2             IF PS_LOGFILE_KEY.UTS > TEMP_UTS

   8740 13 002474   000000 235000 xsym               LDA     PS_LOGFILE_KEY
        13 002475   000001 236000 xsym               LDQ     PS_LOGFILE_KEY+1
        13 002476   000033 773000                    LRL     27
        13 002477   200076 116100                    CMPQ    TEMP_UTS,,AUTO
        13 002500   002521 602000 13                 TNC     s:8758
        13 002501   002521 600000 13                 TZE     s:8758

      938     8741    3             THEN DO;

      939     8742
      940     8743    3                  PUNT_COUNTER = PUNT_COUNTER + 1;

   8743 13 002502   200010 235100                    LDA     PUNT_COUNTER,,AUTO
        13 002503   000001 035007                    ADLA    1,DL
        13 002504   200010 755100                    STA     PUNT_COUNTER,,AUTO

      941     8744    3                  PS_PREVIOUS_TIME = PS_TIME_NOW;

   8744 13 002505   000000 235000 xsym               LDA     PS_TIME_NOW
        13 002506   000000 755000 xsym               STA     PS_PREVIOUS_TIME

      942     8745    3                  IF FIRST_TIME

   8745 13 002507   200016 234100                    SZN     FIRST_TIME,,AUTO
        13 002510   002521 605000 13                 TPL     s:8758

      943     8746    4                  THEN DO;

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:133  
      944     8747    4                       PS_OLD_COLLECT.UTS = 0; /* for BARGRAPH and REPLAY stuff */

   8747 13 002511   000022 450000 xsym               STZ     PS_OLD_COLLECT+18

      945     8748    4                       FIRST_TIME = %NO#;

   8748 13 002512   200016 450100                    STZ     FIRST_TIME,,AUTO

      946     8749
      947     8750    4                       IF PS_MODE = GLOM_MODE#

   8750 13 002513   000000 235000 xsym               LDA     PS_MODE
        13 002514   000002 115007                    CMPA    2,DL
        13 002515   002521 601000 13                 TNZ     s:8758

      948     8751    5                       THEN DO;

      949     8752    5                            CALL FIND_END_OF_INTERVAL;

   8752 13 002516   000330 701000 13                 TSX1    FIND_END_OF_INTERVAL
        13 002517   000000 011000                    NOP     0

      950     8753    5                            GOTO READ_LOG_FILE;

   8753 13 002520   002446 710000 13                 TRA     READ_LOG_FILE

      951     8754    5                       END;
      952     8755    4                  END;
      953     8756    3             END;
      954     8757
      955     8758    2             PS_TIME_NOW = PS_LOGFILE_KEY.UTS;

   8758 13 002521   000000 756000 xsym               STQ     PS_TIME_NOW

      956     8759
      957     8760    2             IF PS_TAG = 'M' THEN

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:134  
   8760 13 002522   000000 236000 xsym               LDQ     PS_TAG
        13 002523   777000 376003                    ANQ     -512,DU
        13 002524   115000 116003                    CMPQ    39424,DU
        13 002525   002554 601000 13                 TNZ     s:8778

      958     8761    2                  IF PS_DISPLAY_FLAGS.MOUSE

   8761 13 002526   000000 236000 xsym               LDQ     PS_DISPLAY_FLAGS
        13 002527   000200 316003                    CANQ    128,DU
        13 002530   002657 600000 13                 TZE     s:8824

      959     8762    3                  THEN DO;

      960     8763    3                       PS_MOUSE$ = PS_LOGFILE$;

   8763 13 002531   000000 236000 xsym               LDQ     PS_LOGFILE$
        13 002532   000000 756000 xsym               STQ     PS_MOUSE$

      961     8764    3                       PS_MOUSE_SIZE = PS_LOGFILE_SIZE;

   8764 13 002533   000000 235000 xsym               LDA     PS_LOGFILE_SIZE
        13 002534   000000 755000 xsym               STA     PS_MOUSE_SIZE

      962     8765
      963     8766    3                       CALL PSD$MOUSE;

   8766 13 002535   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 002536   000000 701000 xent               TSX1    PSD$MOUSE
        13 002537   000000 011000                    NOP     0

      964     8767
      965     8768    3                       PS_LOGFILE$ = PS_OLD_MOUSE$;

   8768 13 002540   000000 236000 xsym               LDQ     PS_OLD_MOUSE$
        13 002541   000000 756000 xsym               STQ     PS_LOGFILE$

      966     8769    3                       PS_LOGFILE_SIZE = PS_OLD_MOUSE_SIZE;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:135  

   8769 13 002542   000000 235000 xsym               LDA     PS_OLD_MOUSE_SIZE
        13 002543   000000 755000 xsym               STA     PS_LOGFILE_SIZE

      967     8770    3                       PS_OLD_MOUSE$ = PS_MOUSE$;

   8770 13 002544   000000 236000 xsym               LDQ     PS_MOUSE$
        13 002545   000000 756000 xsym               STQ     PS_OLD_MOUSE$

      968     8771    3                       PS_OLD_MOUSE_SIZE = PS_MOUSE_SIZE;

   8771 13 002546   000000 235000 xsym               LDA     PS_MOUSE_SIZE
        13 002547   000000 755000 xsym               STA     PS_OLD_MOUSE_SIZE

      969     8772    3                       PS_MOUSE$ = ADDR (NIL);

   8772 13 002550   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 002551   000000 756000 xsym               STQ     PS_MOUSE$

      970     8773    3                       PS_MOUSE_SIZE = 0;

   8773 13 002552   000000 450000 xsym               STZ     PS_MOUSE_SIZE

      971     8774
      972     8775    3                  END /*IF MoUsE */;

   8775 13 002553   002657 710000 13                 TRA     s:8824

      973     8776    2                  ELSE /* Not interested in MoUsE */;
      974     8777
      975     8778    2             ELSE IF PS_TAG='D'

   8778 13 002554   000000 236000 xsym               LDQ     PS_TAG
        13 002555   777000 376003                    ANQ     -512,DU
        13 002556   104000 116003                    CMPQ    34816,DU
        13 002557   002615 601000 13                 TNZ     s:8800

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:136  
      976     8779    2                  THEN IF PS_PMDAT_FLAGS.DISPLAY

   8779 13 002560   000000 234000 xsym               SZN     PS_PMDAT_FLAGS
        13 002561   002657 605000 13                 TPL     s:8824

      977     8780    3                       THEN DO;

      978     8781    3                            PS_PMDAT$ = PS_LOGFILE$;

   8781 13 002562   000000 236000 xsym               LDQ     PS_LOGFILE$
        13 002563   000000 756000 xsym               STQ     PS_PMDAT$

      979     8782    3                            PS_PMDAT_SIZE = PS_LOGFILE_SIZE;

   8782 13 002564   000000 235000 xsym               LDA     PS_LOGFILE_SIZE
        13 002565   000000 755000 xsym               STA     PS_PMDAT_SIZE

      980     8783
      981     8784    3                            CALL PROCESS_PMDAT;

   8784 13 002566   001327 701000 13                 TSX1    PROCESS_PMDAT
        13 002567   000000 011000                    NOP     0

      982     8785
      983     8786    4                            DO PS_FEPNO = 0 TO %PS_MAXFE#;

   8786 13 002570   000000 450000 xsym               STZ     PS_FEPNO

      984     8787    4                                 PS_FEP_STATUS(PS_FEPNO) = %FEP_NONE#;

   8787 13 002571   000000 235000 xsym               LDA     PS_FEPNO
        13 002572   000005 101400                    MRL     fill='000'O
        13 002573   000002 000004 xsym               ADSC9   B_VECTNIL+2              cn=0,n=4
        13 002574   000000 000001 xsym               ADSC9   PS_FEP_STATUS,A          cn=0,n=1

      985     8788    4                            END /* DO PS_FEPNO */;

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:137  
   8788 13 002575   000001 035007                    ADLA    1,DL
        13 002576   000000 755000 xsym               STA     PS_FEPNO
        13 002577   000144 115007                    CMPA    100,DL
        13 002600   002571 602000 13                 TNC     s:8787

      986     8789
      987     8790    3                            PS_LOGFILE$ = PS_OLD_PMDAT$;

   8790 13 002601   000000 236000 xsym               LDQ     PS_OLD_PMDAT$
        13 002602   000000 756000 xsym               STQ     PS_LOGFILE$

      988     8791    3                            PS_LOGFILE_SIZE = PS_OLD_PMDAT_SIZE;

   8791 13 002603   000000 235000 xsym               LDA     PS_OLD_PMDAT_SIZE
        13 002604   000000 755000 xsym               STA     PS_LOGFILE_SIZE

      989     8792    3                            PS_OLD_PMDAT$ = PS_PMDAT$;

   8792 13 002605   000000 236000 xsym               LDQ     PS_PMDAT$
        13 002606   000000 756000 xsym               STQ     PS_OLD_PMDAT$

      990     8793    3                            PS_OLD_PMDAT_SIZE = PS_PMDAT_SIZE;

   8793 13 002607   000000 235000 xsym               LDA     PS_PMDAT_SIZE
        13 002610   000000 755000 xsym               STA     PS_OLD_PMDAT_SIZE

      991     8794    3                            PS_PMDAT$ = ADDR (NIL);

   8794 13 002611   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 002612   000000 756000 xsym               STQ     PS_PMDAT$

      992     8795    3                            PS_PMDAT_SIZE = 0;

   8795 13 002613   000000 450000 xsym               STZ     PS_PMDAT_SIZE

      993     8796
      994     8797    3                       END /*IF PMDAT */;
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:138  

   8797 13 002614   002657 710000 13                 TRA     s:8824

      995     8798    2                       ELSE /* Not interested in PMDAT */;
      996     8799
      997     8800    2                  ELSE IF PS_TAG='F'

   8800 13 002615   000000 236000 xsym               LDQ     PS_TAG
        13 002616   777000 376003                    ANQ     -512,DU
        13 002617   106000 116003                    CMPQ    35840,DU
        13 002620   002653 601000 13                 TNZ     s:8820

      998     8801    2                       THEN IF PS_FEPING

   8801 13 002621   000000 234000 xsym               SZN     PS_FEPING
        13 002622   002657 605000 13                 TPL     s:8824

      999     8802    3                            THEN DO;

     1000     8803    3                                 PS_FEP$ = PS_LOGFILE$;

   8803 13 002623   000000 236000 xsym               LDQ     PS_LOGFILE$
        13 002624   000000 756000 xsym               STQ     PS_FEP$

     1001     8804    3                                 PS_FEP_SIZE = PS_LOGFILE_SIZE;

   8804 13 002625   000000 235000 xsym               LDA     PS_LOGFILE_SIZE
        13 002626   000000 755000 xsym               STA     PS_FEP_SIZE

     1002     8805
     1003     8806    3                                 IF PS_MODE <= GLOM_MODE#

   8806 13 002627   000000 235000 xsym               LDA     PS_MODE
        13 002630   000003 115007                    CMPA    3,DL
        13 002631   002637 603000 13                 TRC     s:8810
        13 002632   200016 234100                    SZN     FIRST_TIME,,AUTO
        13 002633   002637 604000 13                 TMI     s:8810
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:139  

     1004     8807    3                                      AND NOT FIRST_TIME
     1005     8808    3                                 THEN CALL PSD$FEP;

   8808 13 002634   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 002635   000000 701000 xent               TSX1    PSD$FEP
        13 002636   000000 011000                    NOP     0

     1006     8809
     1007     8810    3                                 PS_LOGFILE$ = PS_OLD_FEP$;

   8810 13 002637   000000 236000 xsym               LDQ     PS_OLD_FEP$
        13 002640   000000 756000 xsym               STQ     PS_LOGFILE$

     1008     8811    3                                 PS_LOGFILE_SIZE = PS_OLD_FEP_SIZE;

   8811 13 002641   000000 235000 xsym               LDA     PS_OLD_FEP_SIZE
        13 002642   000000 755000 xsym               STA     PS_LOGFILE_SIZE

     1009     8812    3                                 PS_OLD_FEP$ = PS_FEP$;

   8812 13 002643   000000 236000 xsym               LDQ     PS_FEP$
        13 002644   000000 756000 xsym               STQ     PS_OLD_FEP$

     1010     8813    3                                 PS_OLD_FEP_SIZE = PS_FEP_SIZE;

   8813 13 002645   000000 235000 xsym               LDA     PS_FEP_SIZE
        13 002646   000000 755000 xsym               STA     PS_OLD_FEP_SIZE

     1011     8814    3                                 PS_FEP$ = ADDR (NIL);

   8814 13 002647   000001 236000 xsym               LDQ     B_VECTNIL+1
        13 002650   000000 756000 xsym               STQ     PS_FEP$

     1012     8815    3                                 PS_FEP_SIZE = 0;

   8815 13 002651   000000 450000 xsym               STZ     PS_FEP_SIZE
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:140  

     1013     8816
     1014     8817    3                            END /* IF FEP */;

   8817 13 002652   002657 710000 13                 TRA     s:8824

     1015     8818    2                            ELSE /* Not interested in FEP */;
     1016     8819
     1017     8820    2                       ELSE CALL PSE$ERRMSG(E$PS_BAD_FILE, SERIOUS#);

   8820 13 002653   000014 630400 14                 EPPR0   12
        13 002654   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 002655   000000 701000 xent               TSX1    PSE$ERRMSG
        13 002656   000000 011000                    NOP     0

     1018     8821
     1019     8822
     1020     8823
     1021     8824    2        END /* NOT DISPLAY_MODE# */;

   8824 13 002657   000000 235000 xsym               LDA     PS_LOGFILE_KEY
        13 002660   000001 236000 xsym               LDQ     PS_LOGFILE_KEY+1
        13 002661   000033 773000                    LRL     27
        13 002662   000000 116000 xsym               CMPQ    PS_END_UTS
        13 002663   002446 602000 13                 TNC     READ_LOG_FILE

     1022     8825
     1023     8826    2        DO NEVER;

   8826 13 002664   002665 710000 13                 TRA     DONE

     1024     8827    2   DONE:
     1025     8828    2        END;

   8828 13 002665                       DONE         null
     1026     8829    1        CALL TERMINATE_PROCESS;

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:141  
   8829 13 002665   002040 701000 13                 TSX1    TERMINATE_PROCESS
        13 002666   000000 011000                    NOP     0

     1027     8830
     1028     8831    1        RETURN;

   8831 13 002667   000000 702200 xent               TSX2  ! X66_ARET
     1029     8832
     1030     8833    1   END PSD$DISP;
     1031     8834        %EOD;

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:142  
--  Include file information  --

   XUF_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   XUD_UTS_M.:E05TOU  is referenced.
   PS_PERR_C.:E05TOU  is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   NI_DATA_C.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure PSD$DISP.
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:143  

 **** Variables and constants ****

  ****  Section 007 RtLmCm PS_FDS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(1080)  r     1 PS_FDS

  ****  Section 011 RoData PSD$DISP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   112-0-0/c STRC(729)   r     1 BARGRAPH_FMT              14-0-0/d STRC(432)   r     1 CONVERT_TIME
     0-0-0/d STRC(432)   r     1 FPT_TIME                  66-0-0/d STRC(216)   r     1 GET_LINES_REMAINING
    30-0-0/d STRC(360)   r     1 POSITION_LOGFILE          42-0-0/d STRC(360)   r     1 SCAN_BACKWARDS
    54-0-0/d STRC(360)   r     1 SCAN_FORWARD             100-0-0/d STRC(360)   r     1 SET_HEADER_ON_LP
    74-0-0/d STRC(144)   r     1 TRUNC_LOGFILE

  ****  Section 012  Data  PSD$DISP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   172-0-0/c CHAR(40)    r     1 BARGRAPH_TITLE           162-0-0/d STRC(288)   r     1 BARGRAPH_VECTORS
     0-0-0/d STRC(216)   r     1 FPT_WAIT                 114-0-0/d STRC(72)    r     1 LINES_REMAINING
   155-0-0/w UBIN        r     1 NEXT_WAKEUP_TIME         144-0-0/c STRC(270)   r     1 NOW
     6-0-0/d STRC(2088)  r     1 OPEN_LOGFILE             156-0-0/w UBIN        r     1 TIME_LEFT
   154-0-0/w UBIN        r     1 TIME_NOW                 116-0-0/w STRC(765)   r     1 VLP_HDR
   100-0-0/d STRC(432)   r     1 WRITE_LOGFILE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:144  
   102-0-0/w PTR         r     1 @ACTUAL                  105-0-0/w PTR         r     1 @COUNT
   115-0-0/w PTR         r     1 @DEFAULT_VALUE           101-0-0/w PTR         r     1 @DISP_FLAG
   105-0-0/w PTR         r     1 @ENTRY$                  104-0-0/w PTR         r     1 @HISTORY
   103-0-0/w PTR         r     1 @INDX                    103-0-0/w PTR         r     1 @INDX
   113-0-0/w PTR         r     1 @IN_VAL                  102-0-0/w PTR         r     1 @LOG_FLAG
   107-0-0/w PTR         r     1 @OFFSET                  103-0-0/w PTR         r     1 @OLD
   104-0-0/w PTR         r     1 @OLD_POINTER$            106-0-0/w PTR         r     1 @OLD_SIZE
   114-0-0/w PTR         r     1 @OUT_VAL                 101-0-0/w PTR         r     1 @POINTER$
   101-0-0/w PTR         r     1 @POINTER$                103-0-0/w PTR         r     1 @POINTER$
   106-0-0/w PTR         r     1 @SIZE                    102-0-0/w PTR         r     1 @SIZE
   105-0-0/w PTR         r     1 @SIZE                    104-0-0/w PTR         r     1 @TAG
   104-0-0/w PTR         r     1 @TARGET                  104-0-0/w PTR         r     1 @TARGET
   103-0-0/w PTR         r     1 @TIME                     *0-0-0/w UBIN        r     1 ACTUAL
    13-0-0/w UBIN        r     1 COLLECT_COUNT             15-0-0/w UBIN        r     1 COLLECT_OFFSET
    14-0-0/w UBIN        r     1 COLLECT_SIZE              22-0-0/b BIT         r     1 CONTINUE_SLEEPING
    *0-0-0/w UBIN        r     1 COUNT                     26-0-0/w UBIN        r     1 CPOS1
    27-0-0/w UBIN        r     1 CPOS2                     *0-0-0/w UBIN        r     1 DEFAULT_VALUE
     4-0-0/w SBIN        r     1 DELTA_T                   *0-0-0/b BIT         r     1 DISP_FLAG
    *0-0-0/w EPTR        r     1 ENTRY$                   107-0-0/w UBIN        r     1 ERR
   110-0-0/b BIT         r     1 FIRST_ATTACH
    20-0-0/b BIT         r     1 FIRST_SLEEP_THIS_INTERVAL
    16-0-0/b BIT         r     1 FIRST_TIME                *0-0-0/w UBIN        r     1 HISTORY
     5-0-0/w SBIN        r     1 I                        111-0-0/w UBIN        r     1 I
   110-0-0/w UBIN        r     1 I                        105-0-0/w UBIN        r     1 I
    *0-0-0/w UBIN        r     1 INDX                      *0-0-0/w UBIN        r     1 INDX
    *0-0-0/w UBIN        r     1 IN_VAL                    30-0-0/w UBIN        r     1 ITEM
    31-0-0/w UBIN        r     1 LEN                       *0-0-0/b BIT         r     1 LOG_FLAG
    17-0-0/b BIT         r     1 NEED_MORE                 *0-0-0/w UBIN        r     1 OFFSET
    *0-0-0/w UBIN        r     1 OLD                       *0-0-0/w PTR         r     1 OLD_POINTER$
    *0-0-0/w UBIN        r     1 OLD_SIZE                  *0-0-0/w UBIN        r     1 OUT_VAL
    12-0-0/w PTR         r     1 P$                       106-0-0/w PTR         r     1 P$
    *0-0-0/w PTR         r     1 POINTER$                  *0-0-0/w PTR         r     1 POINTER$
    *0-0-0/w PTR         r     1 POINTER$                  10-0-0/w UBIN        r     1 PUNT_COUNTER
    75-0-0/w PTR         r     1 P_IOS$                    *0-0-0/w UBIN        r     1 SIZE
    *0-0-0/w UBIN        r     1 SIZE                      *0-0-0/w UBIN        r     1 SIZE
    21-0-0/b BIT         r     1 SNORED                    *0-0-0/c CHAR        r     1 TAG
    *0-0-0/w UBIN        r     1 TARGET                    *0-0-0/w UBIN        r     1 TARGET(0:0)
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:145  
    32-0-0/c CHAR(140)   r     1 TEMP                      76-0-0/w UBIN        r     1 TEMP_UTS
    *0-0-0/w UBIN        r     1 TIME                      11-0-0/w UBIN        r     1 WAIT_COUNT

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/c CHAR(140)   r     1 PS_BUFFER                  0-0-0/w STRC(936)   r     1 PS_COLLECT
     0-0-0/c CHAR(10)    r     1 PS_DIGITS                  0-0-0/w STRC(11)    r     1 PS_DISPLAY_FLAGS
     0-0-0/w SBIN        r     1 PS_ELAPSED_TIME            0-0-0/w UBIN        r     1 PS_END_UTS
     0-0-0/w PTR         r     1 PS_FEP$                    0-0-0/b BIT         r     1 PS_FEPING
     0-0-0/w UBIN        r     1 PS_FEPNO                   0-0-0/w UBIN        r     1 PS_FEP_SIZE
     0-0-0/c UBIN(9)     r     1 PS_FEP_STATUS(0:99)
     0-0-0/d STRC(621)   r     1 PS_FILE_PARAMS             0-0-0/w UBIN        r     1 PS_INTERVAL
     0-0-0/w PTR         r     1 PS_LOGFILE$                0-0-0/c STRC(252)   r     1 PS_LOGFILE_KEY
     0-0-0/w SBIN        r     1 PS_LOGFILE_SIZE            0-0-0/w STRC(11)    r     1 PS_LOG_FLAGS
     0-0-0/w UBIN        r     1 PS_MODE                    0-0-0/w PTR         r     1 PS_MOUSE$
     0-0-0/w SBIN        r     1 PS_MOUSE_SIZE              0-0-0/w UBIN        r     1 PS_NEEDED_FEP_SIZE
     0-0-0/w SBIN        r     1 PS_NEEDED_LOGFILE_SIZE
     0-0-0/w SBIN        r     1 PS_NEEDED_MOUSE_SIZE       0-0-0/w SBIN        r     1 PS_NEEDED_PMDAT_SIZE
     0-0-0/w STRC(936)   r     1 PS_OLD_COLLECT             0-0-0/w PTR         r     1 PS_OLD_FEP$
     0-0-0/w UBIN        r     1 PS_OLD_FEP_SIZE            0-0-0/w SBIN        r     1 PS_OLD_LOGFILE_SIZE
     0-0-0/w PTR         r     1 PS_OLD_MOUSE$              0-0-0/w SBIN        r     1 PS_OLD_MOUSE_SIZE
     0-0-0/w PTR         r     1 PS_OLD_PMDAT$              0-0-0/w SBIN        r     1 PS_OLD_PMDAT_SIZE
     0-0-0/w PTR         r     1 PS_OLD_PTRS$(0:99)
     0-0-0/w PTR         r     1 PS_PMDAT$                  0-0-0/b STRC(2)     r     1 PS_PMDAT_FLAGS
     0-0-0/b BIT         r     1 PS_PMDAT_FOUND             0-0-0/w SBIN        r     1 PS_PMDAT_SIZE
     0-0-0/w UBIN        r     1 PS_PREVIOUS_TIME
     0-0-0/w PTR         r     1 PS_PTRS$(0:99)
     0-0-0/w UBIN        r     1 PS_PUNT_COUNT              0-0-0/w UBIN        r     1 PS_STARTUP
     0-0-0/w UBIN        r     1 PS_START_UTS               0-0-0/w PTR         r     1 PS_STATS$
     0-0-0/w SBIN        r     1 PS_STATS_HITS              0-0-0/c CHAR(140)   r     1 PS_SUMMARY_FORMAT
     0-0-0/c CHAR(140)   r     1 PS_SUMMARY_HEADER          0-0-0/w UBIN        r     1 PS_SUMMARY_ITEMS
     0-0-0/w UBIN        r     1 PS_SUMMARY_LIST(0:19)
     0-0-0/b BIT         r     1 PS_SUMMARY_ONLY            0-0-0/c CHAR        r     1 PS_TAG
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:146  
     0-0-0/w UBIN        r     1 PS_TIME_NOW                0-0-0/w SBIN        r     1 PS_UPTIME
     0-0-0/w UBIN        r     1 PS_USED_FEP_SIZE           0-0-0/w STRC(11)    r     1 PS_WORKING_FLAGS
     0-0-0/w STRC(180)   r     1 V_TABLE(0:0)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$EXCFR                    0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w STRC(108)   r     1 BLOCK                      0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0N  NULL        r     1 F$LOG                      0-0-0N  NULL        r     1 M$LO
     0-0-0/c ASTR(9)     r     1 TEXTC


   Procedure PSD$DISP requires 1464 words for executable code.
   Procedure PSD$DISP requires 86 words of local(AUTO) storage.
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:147  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:148  
          MINI XREF LISTING

ACTUAL IN PROCEDURE ATTACH
      8006**DCL      8003--PROC     8022>>IF       8025<>CALL     8029<>CALL     8072<<ASSIGN   8076>>ASSIGN
ATTACH
      8003**PROC     8635--CALL     8651--CALL     8668--CALL     8733--CALL
B$EXCFR.ASL
      7491**DCL      7491--REDEF
B$EXCFR.ERR.CODE
      7505**DCL      8039>>ASSIGN   8165>>IF       8236>>IF
B$EXCFR.ERR.ERR#
      7505**DCL      7505--REDEF
B$EXCFR.EVID
      7504**DCL      7504--REDEF    7505--REDEF
B$EXCFR.IR
      7492**DCL      7492--REDEF
B$EXCFR.PREVSZ
      7491**DCL      7491--REDEF
B$EXCFR.SUBC
      7503**DCL      7503--REDEF    7504--REDEF    7504--REDEF
B$JIT.ERR.MID
      7385**DCL      7385--REDEF
B$JIT$
      7960**DCL      7379--IMP-PTR
B$TCB.ALT$
      7487**DCL      8039>>ASSIGN   8165>>IF       8236>>IF
B$TCB$
      7959**DCL      8039>>ASSIGN   8165>>IF       8236>>IF
BARGRAPH_FMT
      7956**DCL      8442--CALL
BARGRAPH_TITLE
      7955**DCL      8436<>CALL
BARGRAPH_VECTORS.HIGH_
      7954**DCL      8436<>CALL     8442<>CALL
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:149  
BARGRAPH_VECTORS.LOW_
      7953**DCL      8436<>CALL     8442<>CALL
BARGRAPH_VECTORS.SCALE_
      7952**DCL      8436<>CALL     8442<>CALL
BARGRAPH_VECTORS.TITLE_
      7951**DCL      8436<>CALL     8442<>CALL
BLOCK.DATA
      6752**DCL      8068--ASSIGN   8101>>ASSIGN   8121>>ASSIGN   8508>>ASSIGN   8510>>ASSIGN   8512>>ASSIGN
BLOCK.ENTRIES
      6752**DCL      8068>>ASSIGN   8119>>DOINDEX
BLOCK.IDENT
      6751**DCL      8064>>DOWHILE  8066>>ASSIGN
BLOCK.WORDS
      6752**DCL      8068>>ASSIGN
CANT_OPEN_FOR_READ IN PROCEDURE INITIATE_PROCESS
      8318**LABEL    8318--CALLALT
COLLECT
      8082**PROC     8471--CALL     8472--CALL     8473--CALL     8474--CALL     8475--CALL     8476--CALL
      8477--CALL     8478--CALL     8479--CALL     8480--CALL     8481--CALL
COLLECT_COUNT
      7932**DCL      8091<>CALL     8099>>DOINDEX
COLLECT_OFFSET
      7934**DCL      8093<>CALL     8101>>ASSIGN   8103<<ASSIGN   8103>>ASSIGN
COLLECT_SIZE
      7933**DCL      8092<>CALL     8103>>ASSIGN
CONTINUE_SLEEPING
      7939**DCL      8689>>DOUNTIL  8691<<ASSIGN   8707<<ASSIGN   8709<<ASSIGN   8711>>IF
CONVERT_TIME.V
      7555**DCL      7551--DCLINIT
COUNT IN PROCEDURE COLLECT
      8086**DCL      8082--PROC     8091<>CALL
CPOS1
      7943**DCL      8372<<ASSIGN   8383>>CALLBLT  8388<<ASSIGN   8388>>ASSIGN
CPOS2
      7944**DCL      8375<<ASSIGN   8395>>CALLBLT  8398<<ASSIGN   8398>>ASSIGN   8406>>CALLBLT  8409<<ASSIGN
      8409>>ASSIGN
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:150  
DEFAULT
      8129**PROC     8091--CALL     8092--CALL     8093--CALL
DEFAULT_VALUE IN PROCEDURE DEFAULT
      8133**DCL      8129--PROC     8137>>ASSIGN
DELTA_T
      7922**DCL      8430<<ASSIGN   8626>>CALL     8697<>CALL     8698>>CALL     8702<>CALL     8703<<ASSIGN
      8703>>ASSIGN   8706>>IF       8709>>IF       8719>>ASSIGN
DETACH
      8265**PROC     8642--CALL     8659--CALL     8676--CALL
DISP_FLAG IN PROCEDURE DETACH
      8268**DCL      8265--PROC     8275>>IF       8283>>IF
DONE
      8828**LABEL    8733--CALLALT
ENTRY$ IN PROCEDURE ATTACH
      8009**DCL      8003--PROC     8029>>CALL
ERR IN PROCEDURE ATTACH
      8011**DCL      8039<<ASSIGN   8041>>IF       8045>>IF
F$DCB.ACTPOS
      1788**DCL      1788--REDEF
F$DCB.ARS
      1763**DCL      1763--REDEF
F$DCB.ATTR
      1781**DCL      1782--REDEF
F$DCB.BORROW
      1796**DCL      1796--REDEF    1796--REDEF    1796--REDEF
F$DCB.DCBNAME.L
      1810**DCL      1810--IMP-SIZ
F$DCB.EOMCHAR
      1767**DCL      1767--REDEF
F$DCB.FCD
      1776**DCL      8219>>IF
F$DCB.FLDID
      1791**DCL      1791--REDEF
F$DCB.FORM$
      1785**DCL      1785--REDEF
F$DCB.FSECT
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:151  
      1801**DCL      1801--REDEF
F$DCB.FSN
      1778**DCL      1778--REDEF    1778--REDEF    1779--REDEF
F$DCB.HEADER$
      1784**DCL      1784--REDEF
F$DCB.IXTNSIZE
      1782**DCL      1782--REDEF
F$DCB.LASTSTA$
      1772**DCL      1772--REDEF
F$DCB.LVL
      1797**DCL      1797--REDEF
F$DCB.NAME.C
      1772**DCL      1772--REDEF
F$DCB.NOEOF
      1793**DCL      1793--REDEF
F$DCB.NRECS
      1783**DCL      1783--REDEF
F$DCB.NRECX
      1802**DCL      1802--REDEF
F$DCB.OHDR
      1794**DCL      1794--REDEF
F$DCB.ORG
      1777**DCL      1777--REDEF    8221>>IF
F$DCB.PRECNO
      1800**DCL      1800--REDEF
F$DCB.RCSZ
      1805**DCL      1805--REDEF
F$DCB.RES
      1773**DCL      1773--REDEF
F$DCB.SETX
      1785**DCL      1785--REDEF
F$DCB.TAB$
      1784**DCL      1785--REDEF
F$DCB.TDA
      1799**DCL      1799--REDEF
F$DCB.WSN
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:152  
      1774**DCL      1774--REDEF
F$LOG
      1932**DCL      8219--IF       8221--IF
FIND_END_OF_INTERVAL
      8145**PROC     8752--CALL
FIRST_ATTACH IN PROCEDURE ATTACH
      8012**DCL      8018<<ASSIGN   8022>>IF       8027<<ASSIGN
FIRST_SLEEP_THIS_INTERVAL
      7937**DCL      8695>>IF
FIRST_TIME
      7935**DCL      8340<<ASSIGN   8536>>IF       8541>>IF       8550>>IF       8673>>IF       8684>>IF
      8725<<ASSIGN   8745>>IF       8748<<ASSIGN   8806>>IF
FPT_TIME
      7524**DCL      8625<>CALL     8693<>CALL
FPT_TIME.V
      7528**DCL      7524--DCLINIT
FPT_WAIT
      7572**DCL      8250<>CALL     8720<>CALL
FPT_WAIT.V
      7573**DCL      7572--DCLINIT
FPT_WAIT.V.UNITS#
      7573**DCL      8246<<ASSIGN   8719<<ASSIGN
GET_LINES_REMAINING
      7833**DCL      8548<>CALL
GET_LINES_REMAINING.V
      7833**DCL      7833--DCLINIT
HEADER_REJECTED IN PROCEDURE INITIATE_PROCESS
      8457**LABEL    8451--CALLALT
HISTORY IN PROCEDURE ATTACH
      8008**DCL      8003--PROC     8015<<ASSIGN   8025<>CALL     8076<<ASSIGN
I
      7926**DCL      8377<<DOINDEX  8379>>ASSIGN
I IN PROCEDURE ATTACH
      8013**DCL      8058<<DOINDEX  8060>>ASSIGN
I IN PROCEDURE COLLECT
      8089**DCL      8099<<DOINDEX
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:153  
I IN PROCEDURE TRANSFER
      8115**DCL      8119<<DOINDEX  8121>>ASSIGN   8121>>ASSIGN
IGNORE_POSITION_ERROR IN PROCEDURE INITIATE_PROCESS
      8329**LABEL    8331--CALLALT
INDX IN PROCEDURE COLLECT
      8084**DCL      8082--PROC     8095<>CALL
INDX IN PROCEDURE TRANSFER
      8113**DCL      8111--PROC     8117<>CALL
INITIATE_PROCESS
      8308**PROC     8619--CALL
IN_VAL IN PROCEDURE DEFAULT
      8131**DCL      8129--PROC     8135--IF       8139>>ASSIGN
ITEM
      7945**DCL      8379<<ASSIGN   8383>>CALLBLT  8383>>CALLBLT  8386>>ASSIGN   8390>>IF
LEN
      7946**DCL      8386<<ASSIGN   8388>>ASSIGN   8395>>CALLBLT  8406>>CALLBLT
LINES_REMAINING
      7848**DCL      7833--DCLINIT
LINES_REMAINING.RLINES#
      7848**DCL      8550>>IF
LOG_FLAG IN PROCEDURE DETACH
      8269**DCL      8265--PROC     8275>>IF
M$DEVICE
        27**DCL-ENT  8451--CALL
M$LINES
        28**DCL-ENT  8548--CALL
M$OPEN
        23**DCL-ENT  8220--CALL     8318--CALL
M$PRECORD
        27**DCL-ENT  8151--CALL     8161--CALL     8182--CALL     8331--CALL
M$RENV
        79**DCL-ENT  8252--CALL
M$RETRY
        80**DCL-ENT  8254--CALL
M$SENV
        79**DCL-ENT  8242--CALL
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:154  
M$TIME
        90**DCL-ENT  8625--CALL     8693--CALL
M$TRUNC
        24**DCL-ENT  8224--CALL
M$WAIT
        81**DCL-ENT  8250--CALL     8720--CALL
M$WRITE
        24**DCL-ENT  8223--CALL
NEED_MORE
      7936**DCL      8017<<ASSIGN   8020>>DOWHILE  8031<<ASSIGN
NEXT_WAKEUP_TIME
      7920**DCL      8626<>CALL     8695>>IF       8697<>CALL     8698<>CALL     8698<>CALL     8702<>CALL
NOT_ENOUGH IN PROCEDURE ATTACH
      8036**LABEL    8029--CALLALT
NOW
      7909**DCL      8218<>CALL     8228--CALL     8258--CALL
NOW.DATE@
      7912**DCL      7551--DCLINIT  7552--DCLINIT
NOW.DAY@
      7910**DCL      7554--DCLINIT
NOW.TIME@
      7914**DCL      7553--DCLINIT  7554--DCLINIT
OFFSET IN PROCEDURE COLLECT
      8088**DCL      8082--PROC     8093<>CALL
OLD IN PROCEDURE ATTACH
      8007**DCL      8003--PROC     8015>>IF       8015>>ASSIGN
OLD_POINTER$ IN PROCEDURE DETACH
      8271**DCL      8265--PROC     8279<>CALL     8286<<ASSIGN
OLD_SIZE IN PROCEDURE DETACH
      8273**DCL      8265--PROC     8277>>IF       8281<<ASSIGN   8287<<ASSIGN
OOGH IN PROCEDURE WRITE_LOG
      8226**LABEL    8220--CALLALT  8223--CALLALT
OPEN_LOGFILE
      7656**DCL      8220<>CALL     8318<>CALL
OPEN_LOGFILE.ACSVEH_
      7658**DCL      7659--REDEF
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:155  
OPEN_LOGFILE.ALTKEYS_
      7664**DCL      7665--REDEF    7665--REDEF
OPEN_LOGFILE.HDR_
      7663**DCL      7664--REDEF
OPEN_LOGFILE.TAB_
      7662**DCL      7663--REDEF
OPEN_LOGFILE.UHL_
      7656**DCL      7657--REDEF    7657--REDEF
OPEN_LOGFILE.V
      7665**DCL      7656--DCLINIT
OPEN_LOGFILE.V.ASN#
      7675**DCL      8212<<ASSIGN   8316<<ASSIGN
OPEN_LOGFILE.V.FSN#
      7696**DCL      7696--REDEF    7696--REDEF
OPEN_LOGFILE.V.FUN#
      7675**DCL      8213<<ASSIGN   8313<<ASSIGN
OPEN_LOGFILE.V.RES#
      7680**DCL      8211<<ASSIGN   8315<<ASSIGN
OPEN_LOGFILE.V.SHARE#
      7670**DCL      8214<<ASSIGN   8314<<ASSIGN
OPEN_LOGFILE.WSN_
      7662**DCL      7662--REDEF
OUT_VAL IN PROCEDURE DEFAULT
      8132**DCL      8129--PROC     8137<<ASSIGN   8139<<ASSIGN
P$
      7931**DCL      8095<>CALL     8101>>ASSIGN   8117<>CALL     8119>>DOINDEX  8121>>ASSIGN
P$ IN PROCEDURE ATTACH
      8010**DCL      8056<<ASSIGN   8064>>DOWHILE  8066>>ASSIGN   8066>>ASSIGN   8068<<ASSIGN   8068>>ASSIGN
      8068>>ASSIGN   8068>>ASSIGN   8072>>ASSIGN
POINTER$ IN PROCEDURE ATTACH
      8005**DCL      8003--PROC     8025<>CALL     8029<>CALL     8056>>ASSIGN   8072>>ASSIGN
POINTER$ IN PROCEDURE DETACH
      8270**DCL      8265--PROC     8286>>ASSIGN   8289<<ASSIGN   8298<>CALL
POINTER$ IN PROCEDURE WRITE_LOG
      8198**DCL      8196--PROC     8204>>ASSIGN
POSITION_LOGFILE
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:156  
      7752**DCL      8151<>CALL     8182<>CALL     8331<>CALL
POSITION_LOGFILE.V
      7754**DCL      7752--DCLINIT
PROCESS_PMDAT
      8467**PROC     8640--CALL     8784--CALL
PSD$CHANNELS
      7968**DCL-ENT  8575--CALL
PSD$CPU
      7963**DCL-ENT  8559--CALL
PSD$DEVICES
      7967**DCL-ENT  8571--CALL
PSD$EJECT
      7961**DCL-ENT  8552--CALL
PSD$FAULT
      7975**DCL-ENT  8583--CALL
PSD$FEP
      7965**DCL-ENT  8674--CALL     8808--CALL
PSD$GET_FEP
      7979**DCL-ENT  8668--CALL
PSD$GET_MOUSE
      7978**DCL-ENT  8651--CALL
PSD$GET_PMDAT
      7977**DCL-ENT  8635--CALL
PSD$HEADER
      7972**DCL-ENT  8554--CALL
PSD$HISTO
      7974**DCL-ENT  8587--CALL
PSD$MOUSE
      7976**DCL-ENT  8657--CALL     8766--CALL
PSD$PROCS
      7970**DCL-ENT  8579--CALL
PSD$READ_IN
      7980**DCL-ENT  8733--CALL
PSD$RESRCE
      7964**DCL-ENT  8567--CALL
PSD$SCPU
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:157  
      7969**DCL-ENT  8563--CALL
PSD$SKIP
      7962**DCL-ENT  8612--CALL
PSD$SUMMARY
      7971**DCL-ENT  8591--CALL
PSD$SUM_HEAD
      7973**DCL-ENT  8425--CALL
PSE$ERRMSG
      7987**DCL-ENT  8047--CALL     8167--CALL     8169--CALL     8188--CALL     8222--CALL     8237--CALL
      8324--CALL     8457--CALL     8820--CALL
PSE$GRIPE
      7988**DCL-ENT  8228--CALL     8248--CALL     8258--CALL     8715--CALL
PSG$GATHER
      7984**DCL-ENT  8539--CALL
PSL$EVAL
      7990**DCL-ENT  8468--CALL     8482--CALL     8483--CALL     8484--CALL     8485--CALL     8486--CALL
      8488--CALL     8490--CALL     8491--CALL     8492--CALL     8493--CALL
PSL$LOCATE
      7991**DCL-ENT  8095--CALL     8117--CALL     8506--CALL
PSL$TIME
      7992**DCL-ENT  8218--CALL
PSM$FREESEG
      7989**DCL-ENT  8279--CALL     8298--CALL
PSM$SEGOX
      7993**DCL-ENT  8025--CALL
PSR$IDENT
      7986**DCL-ENT  8436--CALL
PSR$RESULTS
      7985**DCL-ENT  8608--CALL
PS_BUFFER
      6755**DCL      6790--DCLINIT  6792--DCLINIT  8449>>ASSIGN
PS_COLLECT
      6907**DCL      8597>>ASSIGN
PS_COLLECT.AVAIL_MEM
      6911**DCL      8492<>CALL
PS_COLLECT.CALCNT
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:158  
      6910**DCL      6910--REDEF    8478<>CALL     8519>>ASSIGN   8523>>ASSIGN
PS_COLLECT.CALCNT_SBIN
      6910**DCL      8528>>ASSIGN   8531>>ASSIGN
PS_COLLECT.ETMF
      6910**DCL      8482<>CALL
PS_COLLECT.EVENTS
      6911**DCL      8480<>CALL
PS_COLLECT.IDLE
      6908**DCL      8474<>CALL     8501>>ASSIGN
PS_COLLECT.IDLWIO
      6908**DCL      8475<>CALL     8501>>ASSIGN
PS_COLLECT.IDLWRES
      6908**DCL      8476<>CALL     8501>>ASSIGN
PS_COLLECT.IDLWRESIO
      6908**DCL      8477<>CALL     8501>>ASSIGN
PS_COLLECT.IOLOAD
      6909**DCL      8490<>CALL
PS_COLLECT.IOS
      6911**DCL      8481<>CALL     8508<<ASSIGN   8508>>ASSIGN   8514>>ASSIGN
PS_COLLECT.MONXEQ
      6908**DCL      8473<>CALL     8501>>ASSIGN
PS_COLLECT.RT90
      6910**DCL      8483<>CALL
PS_COLLECT.SCHEDS
      6911**DCL      8479<>CALL
PS_COLLECT.SPECIFIC_IOS.DISK
      6911**DCL      8510<<ASSIGN   8514>>ASSIGN
PS_COLLECT.SPECIFIC_IOS.OTHER
      6911**DCL      8514<<ASSIGN
PS_COLLECT.SPECIFIC_IOS.TAPE
      6911**DCL      8512<<ASSIGN   8514>>ASSIGN
PS_COLLECT.TOTAL
      6909**DCL      8501<<ASSIGN
PS_COLLECT.USEC_PER_PMME
      6910**DCL      8519<<ASSIGN   8523<<ASSIGN
PS_COLLECT.USERS
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:159  
      6909**DCL      8487<>CALL
PS_COLLECT.USERS.TOTAL
      6909**DCL      8488<>CALL
PS_COLLECT.USRSRV
      6907**DCL      6908--REDEF    8472<>CALL     8501>>ASSIGN   8517>>IF       8519>>ASSIGN   8523>>ASSIGN
      8526>>IF
PS_COLLECT.USRSRV_SBIN
      6908**DCL      8528>>ASSIGN   8531>>ASSIGN
PS_COLLECT.USRXEQ
      6907**DCL      8471<>CALL     8501>>ASSIGN
PS_COLLECT.UTS
      6910**DCL      8469<<ASSIGN
PS_DIGITS
      6922**DCL      8395>>CALLBLT  8406>>CALLBLT
PS_DISPLAY_FLAGS
      6339**DCL      8342>>ASSIGN   8420>>IF       8545>>IF
PS_DISPLAY_FLAGS.CHANNELS
      6340**DCL      8573>>IF
PS_DISPLAY_FLAGS.CPU
      6339**DCL      8557>>IF
PS_DISPLAY_FLAGS.DEVICES
      6339**DCL      8569>>IF
PS_DISPLAY_FLAGS.FAULT
      6340**DCL      8581>>IF
PS_DISPLAY_FLAGS.FEP
      6340**DCL      8665>>IF       8676<>CALL
PS_DISPLAY_FLAGS.HISTOGRAMS
      6340**DCL      8585>>IF
PS_DISPLAY_FLAGS.MOUSE
      6340**DCL      8648>>IF       8656>>IF       8659<>CALL     8761>>IF
PS_DISPLAY_FLAGS.PROCS
      6340**DCL      8577>>IF
PS_DISPLAY_FLAGS.RESOURCES
      6339**DCL      8565>>IF
PS_DISPLAY_FLAGS.SCPU
      6340**DCL      8561>>IF
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:160  
PS_DISPLAY_FLAGS.SUMMARY
      6340**DCL      8365<<ASSIGN   8367>>IF       8589>>IF
PS_ELAPSED_TIME
      6756**DCL      8534<>CALL
PS_END_UTS
      6923**DCL      8148>>ASSIGN   8730>>DOWHILE
PS_FDS
      6772**DCL      8442<>CALL
PS_FEP$
      6335**DCL      8668<>CALL     8671<>CALL     8676<>CALL     8803<<ASSIGN   8812>>ASSIGN   8814<<ASSIGN
PS_FEPING
      6924**DCL      8801>>IF
PS_FEPNO
      6924**DCL      8786<<DOINDEX  8787>>ASSIGN
PS_FEP_SIZE
      6338**DCL      8668<>CALL     8671<>CALL     8676<>CALL     8804<<ASSIGN   8813>>ASSIGN   8815<<ASSIGN
PS_FEP_STATUS
      7219**DCL      8787<<ASSIGN
PS_FILE_PARAMS.ACCT@
      6902**DCL      7661--DCLINIT
PS_FILE_PARAMS.ASN@
      6903**DCL      8212>>ASSIGN   8316>>ASSIGN
PS_FILE_PARAMS.NAME@
      6902**DCL      7657--DCLINIT
PS_FILE_PARAMS.PASS@
      6902**DCL      7658--DCLINIT
PS_FILE_PARAMS.RES@
      6903**DCL      8211>>ASSIGN   8315>>ASSIGN
PS_FILE_PARAMS.SN@
      6902**DCL      7656--DCLINIT
PS_HLPCGBUF.DSPMSK
      7167**DCL      7173--REDEF
PS_HLPCGBUF.SLCMSK
      7208**DCL      7215--REDEF
PS_INTERVAL
      6755**DCL      8626>>CALL
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:161  
PS_LOGFILE$
      6334**DCL      8733<>CALL     8763>>ASSIGN   8768<<ASSIGN   8781>>ASSIGN   8790<<ASSIGN   8803>>ASSIGN
      8810<<ASSIGN
PS_LOGFILE_KEY
      6752**DCL      7721--DCLINIT  7752--DCLINIT  7753--DCLINIT  7780--DCLINIT  7781--DCLINIT  7808--DCLINIT
      7809--DCLINIT
PS_LOGFILE_KEY.COUNT
      6752**DCL      8147<<ASSIGN   8209<<ASSIGN   8327<<ASSIGN
PS_LOGFILE_KEY.TAG
      6753**DCL      8149<<ASSIGN   8208<<ASSIGN   8228--CALL     8258--CALL     8329<<ASSIGN
PS_LOGFILE_KEY.UTS
      6752**DCL      8148<<ASSIGN   8179>>ASSIGN   8181<<ASSIGN   8186>>IF       8190>>ASSIGN   8207<<ASSIGN
      8328<<ASSIGN   8335>>ASSIGN   8730>>DOWHILE  8740>>IF       8758>>ASSIGN
PS_LOGFILE_SIZE
      6336**DCL      8733<>CALL     8764>>ASSIGN   8769<<ASSIGN   8782>>ASSIGN   8791<<ASSIGN   8804>>ASSIGN
      8811<<ASSIGN
PS_LOG_FLAGS
      6341**DCL      8351>>ASSIGN
PS_LOG_FLAGS.FEP
      6342**DCL      8665>>IF       8670>>IF       8676<>CALL
PS_LOG_FLAGS.MOUSE
      6342**DCL      8648>>IF       8653>>IF       8659<>CALL
PS_MODE
      6922**DCL      8310>>IF       8420>>IF       8433>>IF       8536>>IF       8541>>IF       8606>>IF
      8621>>IF       8750>>IF       8806>>IF
PS_MOUSE$
      6334**DCL      8651<>CALL     8654<>CALL     8659<>CALL     8763<<ASSIGN   8770>>ASSIGN   8772<<ASSIGN
PS_MOUSE_SIZE
      6337**DCL      8651<>CALL     8654<>CALL     8659<>CALL     8764<<ASSIGN   8771>>ASSIGN   8773<<ASSIGN
PS_NEEDED_FEP_SIZE
      6339**DCL      8668<>CALL
PS_NEEDED_LOGFILE_SIZE
      6337**DCL      8733<>CALL
PS_NEEDED_MOUSE_SIZE
      6338**DCL      8651<>CALL
PS_NEEDED_PMDAT_SIZE
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:162  
      6336**DCL      8635<>CALL
PS_OLD_COLLECT
      6911**DCL      8360<<ASSIGN   8597<<ASSIGN
PS_OLD_COLLECT.AVAIL_MEM
      6916**DCL      8493<>CALL
PS_OLD_COLLECT.CALCNT
      6914**DCL      6915--REDEF    8519>>ASSIGN   8523>>ASSIGN
PS_OLD_COLLECT.ETMF
      6914**DCL      8484<>CALL
PS_OLD_COLLECT.IOLOAD
      6914**DCL      8491<>CALL
PS_OLD_COLLECT.RT90
      6914**DCL      8485<>CALL
PS_OLD_COLLECT.USEC_PER_PMME
      6914**DCL      8528<<ASSIGN   8531<<ASSIGN
PS_OLD_COLLECT.USERS
      6913**DCL      8489<>CALL
PS_OLD_COLLECT.USRSRV
      6912**DCL      6912--REDEF    8517>>IF       8519>>ASSIGN   8523>>ASSIGN
PS_OLD_COLLECT.UTS
      6915**DCL      8685<<ASSIGN   8747<<ASSIGN
PS_OLD_FEP$
      6335**DCL      8676<>CALL     8810>>ASSIGN   8812<<ASSIGN
PS_OLD_FEP_SIZE
      6338**DCL      8668<>CALL     8676<>CALL     8811>>ASSIGN   8813<<ASSIGN
PS_OLD_LOGFILE_SIZE
      6336**DCL      8733<>CALL
PS_OLD_MOUSE$
      6335**DCL      8659<>CALL     8768>>ASSIGN   8770<<ASSIGN
PS_OLD_MOUSE_SIZE
      6337**DCL      8651<>CALL     8659<>CALL     8769>>ASSIGN   8771<<ASSIGN
PS_OLD_PMDAT$
      6334**DCL      8642<>CALL     8790>>ASSIGN   8792<<ASSIGN
PS_OLD_PMDAT_SIZE
      6335**DCL      8635<>CALL     8642<>CALL     8791>>ASSIGN   8793<<ASSIGN
PS_OLD_PTRS$
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:163  
      6907**DCL      8598<<ASSIGN
PS_PMDAT$
      6334**DCL      8635<>CALL     8638<>CALL     8642<>CALL     8781<<ASSIGN   8792>>ASSIGN   8794<<ASSIGN
PS_PMDAT_FLAGS.DISPLAY
      6749**DCL      8347<<ASSIGN   8349<<ASSIGN   8632>>IF       8642<>CALL     8779>>IF
PS_PMDAT_FLAGS.LOG
      6749**DCL      8356<<ASSIGN   8358<<ASSIGN   8632>>IF       8637>>IF       8642<>CALL
PS_PMDAT_FOUND
      6925**DCL      8361<<ASSIGN   8496<<ASSIGN
PS_PMDAT_SIZE
      6335**DCL      8635<>CALL     8638<>CALL     8642<>CALL     8782<<ASSIGN   8793>>ASSIGN   8795<<ASSIGN
PS_PREVIOUS_TIME
      6756**DCL      8499<<ASSIGN   8534<>CALL     8554<>CALL     8624<<ASSIGN   8744<<ASSIGN
PS_PTRS$
      6907**DCL      8058--DOINDEX  8060<<ASSIGN   8066<<ASSIGN   8598>>ASSIGN
PS_PUNT_COUNT
      6757**DCL      8340>>ASSIGN   8622>>DOINDEX  8706>>IF
PS_STARTUP
      6757**DCL      8486<>CALL     8495<>CALL     8499>>ASSIGN
PS_START_UTS
      6923**DCL      8328>>ASSIGN
PS_STATS$
      6916**DCL      6918--IMP-PTR
PS_STATS_HITS
      6917**DCL      8431<<ASSIGN
PS_SUMMARY_FORMAT
      6921**DCL      8374<<ASSIGN   8393>>ASSIGN   8395<<CALLBLT  8404>>ASSIGN   8406<<CALLBLT
PS_SUMMARY_HEADER
      6921**DCL      8371<<ASSIGN   8381>>ASSIGN   8383<<CALLBLT
PS_SUMMARY_ITEMS
      6921**DCL      8363>>IF       8377>>DOINDEX
PS_SUMMARY_LIST
      6920**DCL      8379>>ASSIGN
PS_SUMMARY_ONLY
      6922**DCL      8226>>IF       8424<<ASSIGN   8428<<ASSIGN   8545>>IF       8610>>IF       8713>>IF
PS_TAG
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:164  
      6753**DCL      8053>>IF       8760>>IF       8778>>IF       8800>>IF
PS_TIME_NOW
      6923**DCL      8624>>ASSIGN   8627<<ASSIGN   8638<>CALL     8654<>CALL     8671<>CALL     8744>>ASSIGN
      8758<<ASSIGN
PS_UPTIME
      6756**DCL      8495<>CALL
PS_USED_FEP_SIZE
      6924**DCL      8028<<ASSIGN   8036>>IF
PS_WORKING_FLAGS
      6346**DCL      8342<<ASSIGN   8345>>IF       8351<<ASSIGN   8354>>IF       8417<<ASSIGN   8420>>IF
PS_WORKING_FLAGS.FEP
      6347**DCL      8344<<ASSIGN   8353<<ASSIGN
PS_WORKING_FLAGS.MOUSE
      6347**DCL      8343<<ASSIGN   8352<<ASSIGN
PS_WORKING_FLAGS.SUMMARY
      6347**DCL      8418<<ASSIGN
PUNT_COUNTER
      7929**DCL      8336<<ASSIGN   8498>>IF       8622<<DOINDEX  8706>>IF       8743<<ASSIGN   8743>>ASSIGN
P_IOS$
      7948**DCL      8506<>CALL     8508>>ASSIGN   8510>>ASSIGN   8512>>ASSIGN
READ_LOG_FILE
      8733**LABEL    8753--GOTO
SCAN_BACKWARDS
      7780**DCL      8161<>CALL
SCAN_BACKWARDS.V
      7782**DCL      7780--DCLINIT
SCAN_FORWARD.V
      7810**DCL      7808--DCLINIT
SET_HEADER_ON_LP
      7883**DCL      8451<>CALL
SET_HEADER_ON_LP.V
      7884**DCL      7883--DCLINIT
SIZE IN PROCEDURE COLLECT
      8087**DCL      8082--PROC     8092<>CALL
SIZE IN PROCEDURE DETACH
      8272**DCL      8265--PROC     8287>>ASSIGN   8290<<ASSIGN   8296>>IF       8300<<ASSIGN
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:165  
SIZE IN PROCEDURE WRITE_LOG
      8199**DCL      8196--PROC     8205>>ASSIGN
SKIP_THIS_INTERVAL IN PROCEDURE PROCESS_PMDAT
      8581**LABEL    8539--CALLALT
SLEEP
      8684**LABEL    8668--CALLALT
SNORED
      7938**DCL      8687<<ASSIGN   8713>>IF       8716<<ASSIGN
TAG IN PROCEDURE WRITE_LOG
      8201**DCL      8196--PROC     8208>>ASSIGN
TARGET IN PROCEDURE COLLECT
      8085**DCL      8082--PROC     8097<<ASSIGN   8101<<ASSIGN   8101>>ASSIGN
TARGET IN PROCEDURE TRANSFER
      8114**DCL      8111--PROC     8121<<ASSIGN
TEMP
      7947**DCL      8381<<ASSIGN   8383>>CALLBLT  8393<<ASSIGN   8395>>CALLBLT  8404<<ASSIGN   8406>>CALLBLT
TEMP_UTS
      7949**DCL      8179<<ASSIGN   8180<>CALL     8180<>CALL     8181>>ASSIGN   8739<>CALL     8740>>IF
TERMINATE_PROCESS
      8604**PROC     8829--CALL
TEXTC.LEN
      6920**DCL      6920--IMP-SIZ  8383>>CALLBLT
TEXTC.TEXT
      6920**DCL      8383>>CALLBLT
TIME IN PROCEDURE WRITE_LOG
      8200**DCL      8196--PROC     8207>>ASSIGN   8218<>CALL
TIME_LEFT
      7921**DCL      7572--DCLINIT
TIME_NOW
      7919**DCL      7528--DCLINIT  7555--DCLINIT  8186>>IF       8190<<ASSIGN   8335<<ASSIGN   8468<>CALL
      8469>>ASSIGN   8495<>CALL     8534<>CALL     8554<>CALL     8626<>CALL     8627>>ASSIGN   8695>>IF
      8697<>CALL     8702<>CALL     8739<>CALL
TRANSFER
      8111**PROC     8487--CALL     8489--CALL
TRUNC_LOGFILE
      7865**DCL      8224<>CALL
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:166  
TRUNC_LOGFILE.V
      7865**DCL      7865--DCLINIT
VLP_HDR
      7902**DCL      7884--DCLINIT
VLP_HDR.TITL.L#
      7904**DCL      8448<<ASSIGN
VLP_HDR.TITL.TITLE#
      7905**DCL      8448--ASSIGN   8449<<ASSIGN
V_TABLE.MODE
      6894**DCL      8390>>IF
V_TABLE.TITLE
      6894**DCL      8383--CALLBLT  8383--CALLBLT
V_TABLE.TITLE.LEN
      6894**DCL      8386>>ASSIGN
WAIT_COUNT
      7930**DCL      8216<<ASSIGN   8239>>IF       8244<<ASSIGN   8244>>ASSIGN
WRITE_LOG
      8196**PROC     8638--CALL     8654--CALL     8671--CALL
WRITE_LOGFILE
      7721**DCL      8223<>CALL
WRITE_LOGFILE.BUF_.BOUND
      7721**DCL      8205<<ASSIGN
WRITE_LOGFILE.BUF_.BUF$
      7723**DCL      8204<<ASSIGN
WRITE_LOGFILE.STATION_
      7723**DCL      7723--REDEF
WRITE_LOGFILE.V
      7724**DCL      7721--DCLINIT
WRITE_LOGFILE.V.DVBYTE.VFC#
      7730**DCL      7730--REDEF
X$WRITE
      8000**DCL-ENT  8442--CALL
XUD$UTS_ADJUST
      7354**DCL-ENT  8626--CALL     8698--CALL
XUD$UTS_ADJ_25TH
      7360**DCL-ENT  8180--CALL     8739--CALL
PL6.E3A0      #001=PSD$DISP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:26 Page:167  
XUD$UTS_DIFF
      7336**DCL-ENT  8495--CALL     8534--CALL     8697--CALL     8702--CALL

PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:168  
     1032        1        /*T***********************************************************/
     1033        2        /*T*                                                         */
     1034        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1035        4        /*T*                                                         */
     1036        5        /*T***********************************************************/
     1037        6        /*X* PLM=5,IND=5,CTI=5,DCI=5,SQB=Y,PRB=Y,DTI=0,ENI=0,AND=Y,ECI=0,CSI=0,THI=0,SDI=5,M
                 6        OC=Y,CRT=1,CLM=5,DMR */
     1038        7        PSD$READ_IN: PROC (POINTER$, ACTUAL) ALTRET;
     1039        8        %INCLUDE CP_6;
     1040       89        %INCLUDE CP_6_SUBS;
     1041      629        %INCLUDE PS_DATA_R;
     1042     5925        %INCLUDE PS_PERR_C;
     1043     5956
     1044     5957        %B$TCB;
     1045     5960
     1046     5961        %B$EXCFR;
     1047     5979        %INCLUDE B_ERRORS_C;
     1048     7106
     1049     7107        %FPT_GETPM;
     1050     7120
     1051     7121        %FPT_GETMOUSE;
     1052     7135
     1053     7136        %FPT_READ (DCB=F$LOG,
     1054     7137         KEY=PS_LOGFILE_KEY,
     1055     7138         KEYR=YES,
     1056     7139         KEYS=NO);
     1057     7178
     1058     7179        %FPT_PRECORD (DCB=F$LOG,
     1059     7180         STCLASS=CONSTANT,
     1060     7181         N=-1);
     1061     7202
     1062     7203
     1063     7204
     1064     7205    1   DCL B$JIT$ PTR SYMREF;
     1065     7206 S      %INCLUDE B$JIT_C;
     1066     7207         %B$JIT0;
     1067     7296         %U$JIT1X;
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:169  
     1068     7299         %M$JIT2X;
     1069     7302         %F$JIT3X;
     1070     7305         %S$JIT4X;
     1071     7308         %J$JIT5X;
     1072     7311         %A$JIT6X;
     1073     7314
     1074     7315        %F$DCB;
     1075     7372
     1076     7373        %FPT_OPEN (FPTN=OPEN_HLPCG,
     1077     7374         STCLASS=CONSTANT,
     1078     7375         ASN=COMGROUP,
     1079     7376         DCB=M$HLPCG,
     1080     7377         NAME=NAME_HLPCG,
     1081     7378         ACCT=ACCT_HLPCG,
     1082     7379         REASSIGN=YES,
     1083     7380         SETSTA=SETSTA_ST,
     1084     7381         FUN=UPDATE);
     1085     7490
     1086     7491        %VLP_NAME (FPTN=NAME_HLPCG,
     1087     7492         STCLASS=CONSTANT,
     1088     7493         NAME='HLPCG');
     1089     7520
     1090     7521        %VLP_ACCT (FPTN=ACCT_HLPCG,
     1091     7522         STCLASS=CONSTANT,
     1092     7523         ACCT=':SYS');
     1093     7536
     1094     7537        %VLP_SETSTA (FPTN=SETSTA_ST,
     1095     7538         STCLASS=STATIC,
     1096     7539         DIRONLY=YES,
     1097     7540         WAS=NO);
     1098     7568
     1099     7569        %VLP_STATION (FPTN=HLP_STA,
     1100     7570         STCLASS=CONSTANT,
     1101     7571         STATION='HLPADMIN');
     1102     7598
     1103     7599        %FPT_WRITE (FPTN=WRITE_STATSRQS,
     1104     7600         STCLASS=STATIC,
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:170  
     1105     7601         BUF=KL_REQSTATS,
     1106     7602         DCB=M$HLPCG,
     1107     7603         STATION=HLP_STA);
     1108     7634
     1109     7635        %FPT_CLOSE (FPTN=CLOSE_HLPCG,
     1110     7636         STCLASS=CONSTANT,
     1111     7637         DCB=M$HLPCG,
     1112     7638         DISP=SAVE);
     1113     7680
     1114     7681        %FPT_READ (FPTN=READ_HLPCG,
     1115     7682         STCLASS=CONSTANT,
     1116     7683         DCB=M$HLPCG,
     1117     7684         BUF=PS_HLPCGBUF,
     1118     7685         WAIT=NO,
     1119     7686         EVENT=1);
     1120     7725
     1121     7726        %KL_REQSTATS(STCLASS=STATIC);
     1122     8019
     1123     8020        %PS_FEPMASK (NAME=MONMSK, STCLASS=CONSTANT, MONITOR=YES);
     1124     8086        %FPT_EVENT (FPTN=TAKE_CONTROL,
     1125     8087         STCLASS=STATIC,
     1126     8088         UENTRY=PSF$FEPSTATS);
     1127     8102
     1128     8103        %FPT_MONINFO (MONINFO=VLR_MONINFO,
     1129     8104         STCLASS=CONSTANT);
     1130     8119        %VLR_MONINFO;
     1131     8137
     1132     8138        %FPT_WAIT(UNITS=12);
     1133     8152
     1134     8153    1   DCL PSF$FEPSTATS ENTRY ASYNC;
     1135     8154    1   DCL FEPNO UBIN;
     1136     8155
     1137     8156    1   DCL POINTER$ PTR;
     1138     8157    1   DCL ACTUAL UBIN;
     1139     8158    1   DCL ERR UBIN WORD;
     1140     8159    1   DCL B$TCB$ PTR SYMREF;
     1141     8160    1   DCL PSE$ERRMSG ENTRY (5);
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:171  
     1142     8161    1   DCL PSE$GRIPE ENTRY (5);
     1143     8162        %EJECT;
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:172  
     1144     8163    1   MAKE_VECTOR: PROC (VECTOR_, POINTER$, WORD_COUNT);
     1145     8164
     1146     8165    2   DCL 1 VECTOR_,
     1147     8166    2            2 SIZE UBIN(20) UNAL,
     1148     8167    2            2 * BIT(16) UNAL,
     1149     8168    2            2 PTR$ PTR;
     1150     8169    2   DCL POINTER$ PTR;
     1151     8170    2   DCL WORD_COUNT UBIN;
     1152     8171
     1153     8172    2        VECTOR_.PTR$ = POINTER$;
     1154     8173
     1155     8174    2        VECTOR_.SIZE = (WORD_COUNT * 4) - 1;
     1156     8175
     1157     8176    2        RETURN;
     1158     8177
     1159     8178    2   END MAKE_VECTOR;
     1160     8179        %EJECT;
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:173  
     1161     8180        /* PSD$READ_IN procedure.                                           */
     1162     8181
     1163     8182    1        CALL MAKE_VECTOR (FPT_READ.BUF_, POINTER$, ACTUAL);
     1164     8183
     1165     8184
     1166     8185    1        ERR = 0;
     1167     8186
     1168     8187    1        CALL M$READ (FPT_READ) ALTRET (READ_ALTRET);
     1169     8188    1        PS_TAG = PS_LOGFILE_KEY.TAG;
     1170     8189    1        IF PS_LOGFILE_KEY.COUNT~=5
     1171     8190    1        THEN CALL PSE$ERRMSG (E$PS_BAD_FILE, SERIOUS#);
     1172     8191
     1173     8192    1        RETURN;
     1174     8193
     1175     8194    1   READ_ALTRET:
     1176     8195    1        ERR = B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.CODE;
     1177     8196
     1178     8197    1        IF ERR = %E$LD
     1179     8198    1        THEN
     1180     8199    1             CALL M$PRECORD (FPT_PRECORD);
     1181     8200
     1182     8201    1        ALTRETURN;
     1183     8202
     1184     8203        %EJECT;
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:174  
     1185     8204    1   PSD$GET_PMDAT: ENTRY (POINTER$, ACTUAL) ALTRET;
     1186     8205
     1187     8206    1        CALL MAKE_VECTOR (FPT_GETPM.RESULTS_, POINTER$, ACTUAL);
     1188     8207
     1189     8208    1        CALL M$GETPM (FPT_GETPM) ALTRET (GLURP);
     1190     8209
     1191     8210    1        PS_TAG = 'D';
     1192     8211
     1193     8212    1        RETURN;
     1194     8213
     1195     8214        %SPACE 6;

     1196     8215    1   PSD$GET_MOUSE: ENTRY (POINTER$, ACTUAL) ALTRET;
     1197     8216
     1198     8217    1        CALL MAKE_VECTOR (FPT_GETMOUSE.RESULTS_, POINTER$, ACTUAL);
     1199     8218
     1200     8219    1        CALL M$GETMOUSE (FPT_GETMOUSE) ALTRET (GLURP);
     1201     8220
     1202     8221    1        PS_TAG = 'M';
     1203     8222
     1204     8223    1        RETURN;
     1205     8224
     1206     8225
     1207     8226    1   GLURP: /* ALTRETURN from here tells ATTACH to make buffer bigger
     1208     8227             and try again. */
     1209     8228    1        ALTRETURN;
     1210     8229        %EJECT;
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:175  
     1211     8230    1   PSD$GET_FEP: ENTRY (POINTER$, ACTUAL) ALTRET;
     1212     8231
     1213     8232    1        IF NOT DCBADDR(DCBNUM(M$HLPCG))->F$DCB.FCD#
     1214     8233    2        THEN DO;
     1215     8234    2             IF NOT B$JIT.PRIV.ACTIVE&%PR_PM#
     1216     8235    2             THEN CALL PSE$ERRMSG(E$PS_NEED_EXPM,SERIOUS#);
     1217     8236
     1218     8237    2             CALL BINCHAR(SETSTA_ST.MYSTATION#,B$JIT.SYSID);
     1219     8238    2             CALL INSERT(SETSTA_ST.MYSTATION#,0,2,'ST');
     1220     8239    2             CALL M$OPEN(OPEN_HLPCG) ALTRET (ERRMSG);
     1221     8240    2             CALL M$EVENT(TAKE_CONTROL) ALTRET(ERRMSG);
     1222     8241
     1223     8242    2             CALL M$MONINFO(FPT_MONINFO);
     1224     8243    2             PS_NUM_NODES = VLR_MONINFO.NUM_NODES;
     1225     8244
     1226     8245    2        END;
     1227     8246
     1228     8247    1        KL_REQSTATS.FNC = %IGA_REQSTATS;
     1229     8248    1        CALL BINCHAR(KL_REQSTATS.STATSSTA,B$JIT.SYSID);
     1230     8249    1        CALL INSERT(KL_REQSTATS.STATSSTA,0,2,'ST');
     1231     8250
     1232     8251    2        DO FEPNO = 1 TO PS_NUM_NODES;
     1233     8252
     1234     8253    2             IF PS_FEP_DISP_FLAGS.DISP (FEPNO)
     1235     8254    3                  OR PS_FEP_LOG_FLAGS.DISP (FEPNO) THEN DO;
     1236     8255    3   WRITE_IT: /* A convenient place for a breakpoint */
     1237     8256    3                  PS_NEED_READ_HLPCG = %YES#;
     1238     8257    3                  KL_REQSTATS.NODE_NUM = FEPNO;
     1239     8258    3   /*N* TEMP*/    CALL BINCHAR(KL_REQSTATS.FEPNAME, FEPNO);
     1240     8259
     1241     8260    3                  CALL COMPFLAGS(KL_REQSTATS.DSPMSK, PS_FEP_DISP_FLAGS.DISP(FEPNO),
     1242     8261    3                       PS_FEP_LOG_FLAGS.DISP(FEPNO));
     1243     8262    3                  CALL COMPFLAGS(KL_REQSTATS.SLCMSK, PS_FEP_DISP_FLAGS.SLCT(FEPNO),
     1244     8263    3                       PS_FEP_LOG_FLAGS.SLCT(FEPNO));
     1245     8264        /*N*  KLUDGE to get ALL handlers to return ALL stats.
     1246     8265              When all handlers honor and obey SLCT and DISP bits,
     1247     8266              this kludge can be removed.  ---gordon.
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:176  
     1248     8267        */
     1249     8268    3                  CALL COMPFLAGS ( KL_REQSTATS.DSPMSK, '037777777777'O, '000000000000'O
              8268                           ) ;
     1250     8269    3                  CALL COMPFLAGS ( KL_REQSTATS.SLCMSK, '037777777777'O, '000000000000'O
              8269                           ) ;
     1251     8270    3                  CALL M$WRITE(WRITE_STATSRQS) ALTRET(ERRMSG);
     1252     8271    3                  PS_FEP_STATUS(FEPNO) = %FEP_KICKED#;
     1253     8272    3             END;
     1254     8273    2        END /* DO FEPNO */;
     1255     8274
     1256     8275    1        PS_USED_FEP_SIZE = 0;
     1257     8276
     1258     8277    2        DO INHIBIT; /* So interrupts can't strike between testing
     1259     8278             PS_NEED_READ_HLPCG and doing M$WAIT     */
     1260     8279
     1261     8280    3             DO WHILE(PS_NEED_READ_HLPCG);
     1262     8281    3                  PS_NEED_READ_HLPCG = %NO#;
     1263     8282    3                  CALL M$READ(READ_HLPCG) ALTRET(ERRMSG);
     1264     8283    3                  IF NOT PS_NEED_READ_HLPCG
     1265     8284    3                  THEN CALL M$WAIT (FPT_WAIT);
     1266     8285    3             END;
     1267     8286    2        END /* INHIBIT */;
     1268     8287
     1269     8288    1        IF DCBADDR(DCBNUM(M$HLPCG)) -> F$DCB.FCD#
     1270     8289    1        THEN CALL M$CLOSE(CLOSE_HLPCG)
     1271     8290    2             WHENALTRETURN DO; END;
     1272     8291    1        IF PS_USED_FEP_SIZE = 0 THEN
     1273     8292    2        DO;
     1274     8293    2             CALL PSE$GRIPE(%E$PS_FEP_KICKED,WARNING#);
     1275     8294    2             ALTRETURN;
     1276     8295    2        END;
     1277     8296
     1278     8297    1        PS_TAG = 'F';
     1279     8298
     1280     8299    1        RETURN;
     1281     8300
     1282     8301    1   ERRMSG:
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:177  
     1283     8302    1        CALL PSE$ERRMSG(,SERIOUS#);
     1284     8303             /* ALTRETing here would only cause ATTACH to try again; that can't help. */
     1285     8304
     1286     8305        %EJECT;
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:178  
     1287     8306    1   COMPFLAGS: PROC( FEPFLAGS, DSPFLAGS, LOGFLAGS);
     1288     8307
     1289     8308    2   DCL 1 FEPFLAGS ALIGNED,
     1290     8309    2            2 * BIT(1) UNAL,
     1291     8310    2            2 DBYTE0 BIT(8) UNAL,
     1292     8311    2            2 * BIT(1) UNAL,
     1293     8312    2            2 DBYTE1 BIT(8) UNAL,
     1294     8313    2            2 * BIT(1) UNAL,
     1295     8314    2            2 DBYTE2 BIT(8) UNAL,
     1296     8315    2            2 * BIT(1) UNAL,
     1297     8316    2            2 DBYTE3 BIT(8) UNAL;
     1298     8317
     1299     8318    2   DCL DSPFLAGS BIT(36) ALIGNED;
     1300     8319    2   DCL LOGFLAGS BIT(36) ALIGNED;
     1301     8320
     1302     8321    2   DCL 1 LCLFLAGS ALIGNED,
     1303     8322    2            2 * BIT(4) UNAL,
     1304     8323    2            2 DBYTE0 BIT(8) UNAL,
     1305     8324    2            2 DBYTE1 BIT(8) UNAL,
     1306     8325    2            2 DBYTE2 BIT(8) UNAL,
     1307     8326    2            2 DBYTE3 BIT(8) UNAL;
     1308     8327
     1309     8328    2        LCLFLAGS = DSPFLAGS | LOGFLAGS;
     1310     8329
     1311     8330    2        FEPFLAGS.DBYTE0 = LCLFLAGS.DBYTE0;
     1312     8331    2        FEPFLAGS.DBYTE1 = LCLFLAGS.DBYTE1;
     1313     8332    2        FEPFLAGS.DBYTE2 = LCLFLAGS.DBYTE2;
     1314     8333    2        FEPFLAGS.DBYTE3 = LCLFLAGS.DBYTE3;
     1315     8334
     1316     8335    2        RETURN;
     1317     8336    2   END COMPFLAGS;
     1318     8337    1   END PSD$READ_IN;
     1319     8338        %EOD;

PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:179  
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   PS_PERR_C.:E05TOU  is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure PSD$READ_IN.

   Procedure PSD$READ_IN requires 286 words for executable code.
   Procedure PSD$READ_IN requires 16 words of local(AUTO) storage.

PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:180  

 Object Unit name= PSD$READ_IN                                File name= PSD$DISP.:E05TOU
 UTS= JUL 30 '97 04:28:19.88 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$LO
    2   DCB   even  none     0      0  M$DO
    3   DCB   even  none     0      0  M$SI
    4   DCB   even  none     0      0  F$LOG
    5   DCB   even  none     0      0  M$ME
    6   DCB   even  none     0      0  M$HLPCG
    7  RtLbCm even  none    30     36  PS_FDS
    8  RtLbCm even  none    32     40  PS_SELECT_RPN
    9  RtLbCm even  none    17     21  PS_STATS_RPN
   10  RtLbCm even  none    34     42  PS_STATS_BUCKET
   11   Data  even  none    78    116  PSD$READ_IN
   12  RoData even  UTS    141    215  PSD$READ_IN
   13   Proc  even  none   286    436  PSD$READ_IN
   14  RoData even  none    21     25  PSD$READ_IN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes    yes     yes      Std        2  PSD$READ_IN
    13     70          yes     yes      Std        2  PSD$GET_PMDAT
    13    110          yes     yes      Std        2  PSD$GET_MOUSE
    13    131          yes     yes      Std        2  PSD$GET_FEP
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:181  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          Async      0 PSF$FEPSTATS
         yes           Std       5 PSE$ERRMSG
         yes           Std       5 PSE$GRIPE
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$LO                                  M$DO
     M$SI                                  F$LOG                                 M$ME
     M$HLPCG                               PS_FEP_DISP_FLAGS                     PS_FEP_LOG_FLAGS
     PS_LOGFILE_KEY                        PS_TAG                                PS_BUFFER
     PS_STATS$                             PS_NEED_READ_HLPCG                    PS_USED_FEP_SIZE
     PS_HLPCGBUF                           PS_NUM_NODES                          PS_FEP_STATUS
     B$JIT$                                B$TCB$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID                                 ROSID
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:182  


     1032        1        /*T***********************************************************/
     1033        2        /*T*                                                         */
     1034        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1035        4        /*T*                                                         */
     1036        5        /*T***********************************************************/
     1037        6       /*X* PLM=5,IND=5,CTI=5,DCI=5,SQB=Y,PRB=Y,DTI=0,ENI=0,AND=Y,ECI=0,CSI=0,THI=0,SDI=5,M
                 6        OC=Y,CRT=1,CLM=5,DMR */
     1038        7        PSD$READ_IN: PROC (POINTER$, ACTUAL) ALTRET;

      7 13 000000   000000 700200 xent  PSD$READ_IN  TSX0  ! X66_AUTO_2
        13 000001   000020 000002                    ZERO    16,2
        13 000002   000022 710000 13                 TRA     s:8182

     1039        8        %INCLUDE CP_6;
     1040       89        %INCLUDE CP_6_SUBS;
     1041      629        %INCLUDE PS_DATA_R;
     1042     5925        %INCLUDE PS_PERR_C;
     1043     5956
     1044     5957        %B$TCB;
     1045     5960
     1046     5961        %B$EXCFR;
     1047     5979        %INCLUDE B_ERRORS_C;
     1048     7106
     1049     7107        %FPT_GETPM;
     1050     7120
     1051     7121        %FPT_GETMOUSE;
     1052     7135
     1053     7136        %FPT_READ (DCB=F$LOG,
     1054     7137         KEY=PS_LOGFILE_KEY,
     1055     7138         KEYR=YES,
     1056     7139         KEYS=NO);
     1057     7178
     1058     7179        %FPT_PRECORD (DCB=F$LOG,
     1059     7180         STCLASS=CONSTANT,
     1060     7181         N=-1);
     1061     7202
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:183  
     1062     7203
     1063     7204
     1064     7205    1   DCL B$JIT$ PTR SYMREF;
     1065     7206 S      %INCLUDE B$JIT_C;
     1066     7207         %B$JIT0;
     1067     7296         %U$JIT1X;
     1068     7299         %M$JIT2X;
     1069     7302         %F$JIT3X;
     1070     7305         %S$JIT4X;
     1071     7308         %J$JIT5X;
     1072     7311         %A$JIT6X;
     1073     7314
     1074     7315        %F$DCB;
     1075     7372
     1076     7373        %FPT_OPEN (FPTN=OPEN_HLPCG,
     1077     7374         STCLASS=CONSTANT,
     1078     7375         ASN=COMGROUP,
     1079     7376         DCB=M$HLPCG,
     1080     7377         NAME=NAME_HLPCG,
     1081     7378         ACCT=ACCT_HLPCG,
     1082     7379         REASSIGN=YES,
     1083     7380         SETSTA=SETSTA_ST,
     1084     7381         FUN=UPDATE);
     1085     7490
     1086     7491        %VLP_NAME (FPTN=NAME_HLPCG,
     1087     7492         STCLASS=CONSTANT,
     1088     7493         NAME='HLPCG');
     1089     7520
     1090     7521        %VLP_ACCT (FPTN=ACCT_HLPCG,
     1091     7522         STCLASS=CONSTANT,
     1092     7523         ACCT=':SYS');
     1093     7536
     1094     7537        %VLP_SETSTA (FPTN=SETSTA_ST,
     1095     7538         STCLASS=STATIC,
     1096     7539         DIRONLY=YES,
     1097     7540         WAS=NO);
     1098     7568
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:184  
     1099     7569        %VLP_STATION (FPTN=HLP_STA,
     1100     7570         STCLASS=CONSTANT,
     1101     7571         STATION='HLPADMIN');
     1102     7598
     1103     7599        %FPT_WRITE (FPTN=WRITE_STATSRQS,
     1104     7600         STCLASS=STATIC,
     1105     7601         BUF=KL_REQSTATS,
     1106     7602         DCB=M$HLPCG,
     1107     7603         STATION=HLP_STA);
     1108     7634
     1109     7635        %FPT_CLOSE (FPTN=CLOSE_HLPCG,
     1110     7636         STCLASS=CONSTANT,
     1111     7637         DCB=M$HLPCG,
     1112     7638         DISP=SAVE);
     1113     7680
     1114     7681        %FPT_READ (FPTN=READ_HLPCG,
     1115     7682         STCLASS=CONSTANT,
     1116     7683         DCB=M$HLPCG,
     1117     7684         BUF=PS_HLPCGBUF,
     1118     7685         WAIT=NO,
     1119     7686         EVENT=1);
     1120     7725
     1121     7726        %KL_REQSTATS(STCLASS=STATIC);
     1122     8019
     1123     8020        %PS_FEPMASK (NAME=MONMSK, STCLASS=CONSTANT, MONITOR=YES);
     1124     8086        %FPT_EVENT (FPTN=TAKE_CONTROL,
     1125     8087         STCLASS=STATIC,
     1126     8088         UENTRY=PSF$FEPSTATS);
     1127     8102
     1128     8103        %FPT_MONINFO (MONINFO=VLR_MONINFO,
     1129     8104         STCLASS=CONSTANT);
     1130     8119        %VLR_MONINFO;
     1131     8137
     1132     8138        %FPT_WAIT(UNITS=12);
     1133     8152
     1134     8153    1   DCL PSF$FEPSTATS ENTRY ASYNC;
     1135     8154    1   DCL FEPNO UBIN;
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:185  
     1136     8155
     1137     8156    1   DCL POINTER$ PTR;
     1138     8157    1   DCL ACTUAL UBIN;
     1139     8158    1   DCL ERR UBIN WORD;
     1140     8159    1   DCL B$TCB$ PTR SYMREF;
     1141     8160    1   DCL PSE$ERRMSG ENTRY (5);
     1142     8161    1   DCL PSE$GRIPE ENTRY (5);
     1143     8162        %EJECT;
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:186  
     1144     8163    1   MAKE_VECTOR: PROC (VECTOR_, POINTER$, WORD_COUNT);

   8163 13 000003   200010 741300       MAKE_VECTOR  STX1  ! ERR+1,,AUTO

     1145     8164
     1146     8165    2   DCL 1 VECTOR_,
     1147     8166    2            2 SIZE UBIN(20) UNAL,
     1148     8167    2            2 * BIT(16) UNAL,
     1149     8168    2            2 PTR$ PTR;
     1150     8169    2   DCL POINTER$ PTR;
     1151     8170    2   DCL WORD_COUNT UBIN;
     1152     8171
     1153     8172    2        VECTOR_.PTR$ = POINTER$;

   8172 13 000004   200012 470500                    LDP0    @POINTER$,,AUTO
        13 000005   000000 236100                    LDQ     0,,PR0
        13 000006   200011 471500                    LDP1    @VECTOR_,,AUTO
        13 000007   100001 756100                    STQ     1,,PR1

     1154     8173
     1155     8174    2        VECTOR_.SIZE = (WORD_COUNT * 4) - 1;

   8174 13 000010   200013 473500                    LDP3    @WORD_COUNT,,AUTO
        13 000011   300000 236100                    LDQ     0,,PR3
        13 000012   000002 736000                    QLS     2
        13 000013   000001 136007                    SBLQ    1,DL
        13 000014   000020 736000                    QLS     16
        13 000015   100000 676100                    ERQ     0,,PR1
        13 000016   000034 376000 xsym               ANQ     B_VECTNIL+28
        13 000017   100000 656100                    ERSQ    0,,PR1

     1156     8175
     1157     8176    2        RETURN;

   8176 13 000020   200010 221300                    LDX1  ! ERR+1,,AUTO
        13 000021   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:187  
     1158     8177
     1159     8178    2   END MAKE_VECTOR;
     1160     8179        %EJECT;
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:188  
     1161     8180        /* PSD$READ_IN procedure.                                           */
     1162     8181
     1163     8182    1        CALL MAKE_VECTOR (FPT_READ.BUF_, POINTER$, ACTUAL);

   8182 13 000022   200004 236100                    LDQ     @ACTUAL,,AUTO
        13 000023   200003 235100                    LDA     @POINTER$,,AUTO
        13 000024   200012 757100                    STAQ    @FEPFLAGS+1,,AUTO
        13 000025   000000 236000 14                 LDQ     0
        13 000026   200011 756100                    STQ     ERR+2,,AUTO
        13 000027   000003 701000 13                 TSX1    MAKE_VECTOR
        13 000030   000000 011000                    NOP     0

     1164     8183
     1165     8184
     1166     8185    1        ERR = 0;

   8185 13 000031   200007 450100                    STZ     ERR,,AUTO

     1167     8186
     1168     8187    1        CALL M$READ (FPT_READ) ALTRET (READ_ALTRET);

   8187 13 000032   000004 630400 11                 EPPR0   FPT_READ
        13 000033   440000 713400                    CLIMB   alt,read
        13 000034   401400 401760                    pmme    nvectors=4
        13 000035   000054 702000 13                 TSX2    READ_ALTRET

     1169     8188    1        PS_TAG = PS_LOGFILE_KEY.TAG;

   8188 13 000036   000001 236000 xsym               LDQ     PS_LOGFILE_KEY+1
        13 000037   000011 736000                    QLS     9
        13 000040   777000 376003                    ANQ     -512,DU
        13 000041   000001 276000 14                 ORQ     1
        13 000042   000000 756000 xsym               STQ     PS_TAG

     1170     8189    1        IF PS_LOGFILE_KEY.COUNT~=5

   8189 13 000043   000000 236000 xsym               LDQ     PS_LOGFILE_KEY
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:189  
        13 000044   777000 376003                    ANQ     -512,DU
        13 000045   005000 116003                    CMPQ    2560,DU
        13 000046   000053 600000 13                 TZE     s:8192

     1171     8190    1        THEN CALL PSE$ERRMSG (E$PS_BAD_FILE, SERIOUS#);

   8190 13 000047   000003 630400 14                 EPPR0   3
        13 000050   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000051   000000 701000 xent               TSX1    PSE$ERRMSG
        13 000052   000000 011000                    NOP     0

     1172     8191
     1173     8192    1        RETURN;

   8192 13 000053   000000 702200 xent               TSX2  ! X66_ARET

     1174     8193
     1175     8194    1   READ_ALTRET:
     1176     8195    1        ERR = B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.CODE;

   8195 13 000054   000000 470400 xsym  READ_ALTRET  LDP0    B$TCB$
        13 000055   000000 471500                    LDP1    0,,PR0
        13 000056   100102 236100                    LDQ     66,,PR1
        13 000057   000003 772000                    QRL     3
        13 000060   037777 376007                    ANQ     16383,DL
        13 000061   200007 756100                    STQ     ERR,,AUTO

     1177     8196
     1178     8197    1        IF ERR = %E$LD

   8197 13 000062   000007 116007                    CMPQ    7,DL
        13 000063   000067 601000 13                 TNZ     s:8201

     1179     8198    1        THEN
     1180     8199    1             CALL M$PRECORD (FPT_PRECORD);

   8199 13 000064   000000 630400 12                 EPPR0   FPT_PRECORD
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:190  
        13 000065   040003 713400                    CLIMB   16387
        13 000066   401000 401760                    pmme    nvectors=3

     1181     8200
     1182     8201    1        ALTRETURN;

   8201 13 000067   000000 702200 xent               TSX2  ! X66_AALT

     1183     8202
     1184     8203        %EJECT;
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:191  
     1185     8204    1   PSD$GET_PMDAT: ENTRY (POINTER$, ACTUAL) ALTRET;

   8204 13 000070   000000 700200 xent  PSD$GET_PMD* TSX0  ! X66_AUTO_2
        13 000071   000020 000002                    ZERO    16,2

     1186     8205
     1187     8206    1        CALL MAKE_VECTOR (FPT_GETPM.RESULTS_, POINTER$, ACTUAL);

   8206 13 000072   200004 236100                    LDQ     @ACTUAL,,AUTO
        13 000073   200003 235100                    LDA     @POINTER$,,AUTO
        13 000074   200012 757100                    STAQ    @FEPFLAGS+1,,AUTO
        13 000075   000005 236000 14                 LDQ     5
        13 000076   200011 756100                    STQ     ERR+2,,AUTO
        13 000077   000003 701000 13                 TSX1    MAKE_VECTOR
        13 000100   000000 011000                    NOP     0

     1188     8207
     1189     8208    1        CALL M$GETPM (FPT_GETPM) ALTRET (GLURP);

   8208 13 000101   000000 630400 11                 EPPR0   FPT_GETPM
        13 000102   540006 713400                    CLIMB   alt,+49158
        13 000103   400000 401760                    pmme    nvectors=1
        13 000104   000130 702000 13                 TSX2    GLURP

     1190     8209
     1191     8210    1        PS_TAG = 'D';

   8210 13 000105   104000 236003                    LDQ     34816,DU
        13 000106   000000 756000 xsym               STQ     PS_TAG

     1192     8211
     1193     8212    1        RETURN;

   8212 13 000107   000000 702200 xent               TSX2  ! X66_ARET

     1194     8213
     1195     8214        %SPACE 6;
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:192  

     1196     8215    1   PSD$GET_MOUSE: ENTRY (POINTER$, ACTUAL) ALTRET;

   8215 13 000110   000000 700200 xent  PSD$GET_MOU* TSX0  ! X66_AUTO_2
        13 000111   000020 000002                    ZERO    16,2

     1197     8216
     1198     8217    1        CALL MAKE_VECTOR (FPT_GETMOUSE.RESULTS_, POINTER$, ACTUAL);

   8217 13 000112   200004 236100                    LDQ     @ACTUAL,,AUTO
        13 000113   200003 235100                    LDA     @POINTER$,,AUTO
        13 000114   200012 757100                    STAQ    @FEPFLAGS+1,,AUTO
        13 000115   000006 236000 14                 LDQ     6
        13 000116   200011 756100                    STQ     ERR+2,,AUTO
        13 000117   000003 701000 13                 TSX1    MAKE_VECTOR
        13 000120   000000 011000                    NOP     0

     1199     8218
     1200     8219    1        CALL M$GETMOUSE (FPT_GETMOUSE) ALTRET (GLURP);

   8219 13 000121   000002 630400 11                 EPPR0   FPT_GETMOUSE
        13 000122   540005 713400                    CLIMB   alt,+49157
        13 000123   400000 401760                    pmme    nvectors=1
        13 000124   000130 702000 13                 TSX2    GLURP

     1201     8220
     1202     8221    1        PS_TAG = 'M';

   8221 13 000125   115000 236003                    LDQ     39424,DU
        13 000126   000000 756000 xsym               STQ     PS_TAG

     1203     8222
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:193  
     1204     8223    1        RETURN;

   8223 13 000127   000000 702200 xent               TSX2  ! X66_ARET

     1205     8224
     1206     8225
     1207     8226    1   GLURP: /* ALTRETURN from here tells ATTACH to make buffer bigger
     1208     8227             and try again. */
     1209     8228    1        ALTRETURN;

   8228 13 000130   000000 702200 xent  GLURP        TSX2  ! X66_AALT

     1210     8229        %EJECT;
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:194  
     1211     8230    1   PSD$GET_FEP: ENTRY (POINTER$, ACTUAL) ALTRET;

   8230 13 000131   000000 700200 xent  PSD$GET_FEP  TSX0  ! X66_AUTO_2
        13 000132   000020 000002                    ZERO    16,2

     1212     8231
     1213     8232    1        IF NOT DCBADDR(DCBNUM(M$HLPCG))->F$DCB.FCD#

   8232 13 000133   000000 236007 xsym               LDQ     M$HLPCG,DL
        13 000134   000007 470400 14                 LDP0    7
        13 000135   000000 471500                    LDP1    0,,PR0
        13 000136   100000 473506                    LDP3    0,QL,PR1
        13 000137   300031 236100                    LDQ     25,,PR3
        13 000140   020000 316007                    CANQ    8192,DL
        13 000141   000201 601000 13                 TNZ     s:8247

     1214     8233    2        THEN DO;

     1215     8234    2             IF NOT B$JIT.PRIV.ACTIVE&%PR_PM#

   8234 13 000142   000000 473400 xsym               LDP3    B$JIT$
        13 000143   300013 236100                    LDQ     11,,PR3
        13 000144   000212 376000 12                 ANQ     FPT_MONINFO+12
        13 000145   000152 601000 13                 TNZ     s:8237

     1216     8235    2             THEN CALL PSE$ERRMSG(E$PS_NEED_EXPM,SERIOUS#);

   8235 13 000146   000010 630400 14                 EPPR0   8
        13 000147   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000150   000000 701000 xent               TSX1    PSE$ERRMSG
        13 000151   000000 011000                    NOP     0

     1217     8236
     1218     8237    2             CALL BINCHAR(SETSTA_ST.MYSTATION#,B$JIT.SYSID);

   8237 13 000152   000000 470400 xsym               LDP0    B$JIT$
        13 000153   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:195  
        13 000154   777777 376007                    ANQ     -1,DL
        13 000155   000000 235003                    LDA     0,DU
        13 000156   200016 757100                    STAQ    LCLFLAGS+2,,AUTO
        13 000157   000000 301500                    BTD
        13 000160   200016 000010                    NDSC9   LCLFLAGS+2,,AUTO         cn=0,s=lsgnf,sf=0,n=8
        13 000161   000022 030010 11                 NDSC9   SETSTA_ST                cn=0,s=nosgn,sf=0,n=8

     1219     8238    2             CALL INSERT(SETSTA_ST.MYSTATION#,0,2,'ST');

   8238 13 000162   000213 220000 12                 LDX0    FPT_MONINFO+13
        13 000163   000022 740000 11                 STX0    SETSTA_ST

     1220     8239    2             CALL M$OPEN(OPEN_HLPCG) ALTRET (ERRMSG);

   8239 13 000164   000012 630400 12                 EPPR0   OPEN_HLPCG
        13 000165   450000 713400                    CLIMB   alt,open
        13 000166   410400 401760                    pmme    nvectors=18
        13 000167   000372 702000 13                 TSX2    ERRMSG

     1221     8240    2             CALL M$EVENT(TAKE_CONTROL) ALTRET(ERRMSG);

   8240 13 000170   000064 630400 11                 EPPR0   TAKE_CONTROL
        13 000171   410001 713400                    CLIMB   alt,+4097
        13 000172   400000 401760                    pmme    nvectors=1
        13 000173   000372 702000 13                 TSX2    ERRMSG

     1222     8241
     1223     8242    2             CALL M$MONINFO(FPT_MONINFO);

   8242 13 000174   000176 630400 12                 EPPR0   FPT_MONINFO
        13 000175   020023 713400                    CLIMB   8211
        13 000176   402400 401760                    pmme    nvectors=6

     1224     8243    2             PS_NUM_NODES = VLR_MONINFO.NUM_NODES;

   8243 13 000177   000104 235000 11                 LDA     VLR_MONINFO+12
        13 000200   000000 755000 xsym               STA     PS_NUM_NODES
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:196  

     1225     8244
     1226     8245    2        END;

     1227     8246
     1228     8247    1        KL_REQSTATS.FNC = %IGA_REQSTATS;

   8247 13 000201   044000 236003                    LDQ     18432,DU
        13 000202   000052 552040 11                 STBQ    KL_REQSTATS,'40'O

     1229     8248    1        CALL BINCHAR(KL_REQSTATS.STATSSTA,B$JIT.SYSID);

   8248 13 000203   000000 470400 xsym               LDP0    B$JIT$
        13 000204   000000 236100                    LDQ     0,,PR0
        13 000205   777777 376007                    ANQ     -1,DL
        13 000206   000000 235003                    LDA     0,DU
        13 000207   200016 757100                    STAQ    LCLFLAGS+2,,AUTO
        13 000210   000000 301500                    BTD
        13 000211   200016 000010                    NDSC9   LCLFLAGS+2,,AUTO         cn=0,s=lsgnf,sf=0,n=8
        13 000212   000054 030010 11                 NDSC9   KL_REQSTATS+2            cn=0,s=nosgn,sf=0,n=8

     1230     8249    1        CALL INSERT(KL_REQSTATS.STATSSTA,0,2,'ST');

   8249 13 000213   000213 220000 12                 LDX0    FPT_MONINFO+13
        13 000214   000054 740000 11                 STX0    KL_REQSTATS+2

     1231     8250
     1232     8251    2        DO FEPNO = 1 TO PS_NUM_NODES;

   8251 13 000215   000001 236007                    LDQ     1,DL
        13 000216   200006 756100                    STQ     FEPNO,,AUTO
        13 000217   000322 710000 13                 TRA     s:8273+3

     1233     8252
     1234     8253    2             IF PS_FEP_DISP_FLAGS.DISP (FEPNO)

   8253 13 000220   200006 235100                    LDA     FEPNO,,AUTO
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:197  
        13 000221   000002 735000                    ALS     2
        13 000222   000000 235005 xsym               LDA     PS_FEP_DISP_FLAGS,AL
        13 000223   000230 601000 13                 TNZ     WRITE_IT
        13 000224   200006 235100                    LDA     FEPNO,,AUTO
        13 000225   000002 735000                    ALS     2
        13 000226   000000 235005 xsym               LDA     PS_FEP_LOG_FLAGS,AL
        13 000227   000317 600000 13                 TZE     s:8273

     1235     8254    3                  OR PS_FEP_LOG_FLAGS.DISP (FEPNO) THEN DO;

     1236     8255    3   WRITE_IT: /* A convenient place for a breakpoint */
     1237     8256    3                  PS_NEED_READ_HLPCG = %YES#;

   8256 13 000230   400000 236003       WRITE_IT     LDQ     -131072,DU
        13 000231   000000 756000 xsym               STQ     PS_NEED_READ_HLPCG

     1238     8257    3                  KL_REQSTATS.NODE_NUM = FEPNO;

   8257 13 000232   200006 236100                    LDQ     FEPNO,,AUTO
        13 000233   000022 736000                    QLS     18
        13 000234   000052 552020 11                 STBQ    KL_REQSTATS,'20'O

     1239     8258    3   /*N* TEMP*/    CALL BINCHAR(KL_REQSTATS.FEPNAME, FEPNO);

   8258 13 000235   200006 235100                    LDA     FEPNO,,AUTO
        13 000236   000044 773000                    LRL     36
        13 000237   200016 757100                    STAQ    LCLFLAGS+2,,AUTO
        13 000240   000000 301500                    BTD
        13 000241   200016 000010                    NDSC9   LCLFLAGS+2,,AUTO         cn=0,s=lsgnf,sf=0,n=8
        13 000242   000056 030010 11                 NDSC9   KL_REQSTATS+4            cn=0,s=nosgn,sf=0,n=8

     1240     8259
     1241     8260    3                  CALL COMPFLAGS(KL_REQSTATS.DSPMSK, PS_FEP_DISP_FLAGS.DISP(FEPNO),

   8260 13 000243   200006 236100                    LDQ     FEPNO,,AUTO
        13 000244   000024 736000                    QLS     20
        13 000245   000012 036000 14                 ADLQ    10
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:198  
        13 000246   200013 756100                    STQ     @DSPFLAGS+1,,AUTO
        13 000247   200006 236100                    LDQ     FEPNO,,AUTO
        13 000250   000024 736000                    QLS     20
        13 000251   000013 036000 14                 ADLQ    11
        13 000252   200012 756100                    STQ     @FEPFLAGS+1,,AUTO
        13 000253   000014 236000 14                 LDQ     12
        13 000254   200011 756100                    STQ     ERR+2,,AUTO
        13 000255   000402 701000 13                 TSX1    COMPFLAGS
        13 000256   000000 011000                    NOP     0

     1242     8261    3                       PS_FEP_LOG_FLAGS.DISP(FEPNO));
     1243     8262    3                  CALL COMPFLAGS(KL_REQSTATS.SLCMSK, PS_FEP_DISP_FLAGS.SLCT(FEPNO),

   8262 13 000257   200006 236100                    LDQ     FEPNO,,AUTO
        13 000260   000024 736000                    QLS     20
        13 000261   000015 036000 14                 ADLQ    13
        13 000262   200013 756100                    STQ     @DSPFLAGS+1,,AUTO
        13 000263   200006 236100                    LDQ     FEPNO,,AUTO
        13 000264   000024 736000                    QLS     20
        13 000265   000016 036000 14                 ADLQ    14
        13 000266   200012 756100                    STQ     @FEPFLAGS+1,,AUTO
        13 000267   000017 236000 14                 LDQ     15
        13 000270   200011 756100                    STQ     ERR+2,,AUTO
        13 000271   000402 701000 13                 TSX1    COMPFLAGS
        13 000272   000000 011000                    NOP     0

     1244     8263    3                       PS_FEP_LOG_FLAGS.SLCT(FEPNO));
     1245     8264        /*N*  KLUDGE to get ALL handlers to return ALL stats.
     1246     8265              When all handlers honor and obey SLCT and DISP bits,
     1247     8266              this kludge can be removed.  ---gordon.
     1248     8267        */
     1249     8268    3                 CALL COMPFLAGS ( KL_REQSTATS.DSPMSK, '037777777777'O, '000000000000'O
              8268                           ) ;

   8268 13 000273   000020 237000 14                 LDAQ    16
        13 000274   200012 757100                    STAQ    @FEPFLAGS+1,,AUTO
        13 000275   000014 236000 14                 LDQ     12
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:199  
        13 000276   200011 756100                    STQ     ERR+2,,AUTO
        13 000277   000402 701000 13                 TSX1    COMPFLAGS
        13 000300   000000 011000                    NOP     0

     1250     8269    3                 CALL COMPFLAGS ( KL_REQSTATS.SLCMSK, '037777777777'O, '000000000000'O
              8269                           ) ;

   8269 13 000301   000020 237000 14                 LDAQ    16
        13 000302   200012 757100                    STAQ    @FEPFLAGS+1,,AUTO
        13 000303   000017 236000 14                 LDQ     15
        13 000304   200011 756100                    STQ     ERR+2,,AUTO
        13 000305   000402 701000 13                 TSX1    COMPFLAGS
        13 000306   000000 011000                    NOP     0

     1251     8270    3                  CALL M$WRITE(WRITE_STATSRQS) ALTRET(ERRMSG);

   8270 13 000307   000036 630400 11                 EPPR0   WRITE_STATSRQS
        13 000310   440001 713400                    CLIMB   alt,write
        13 000311   401400 401760                    pmme    nvectors=4
        13 000312   000372 702000 13                 TSX2    ERRMSG

     1252     8271    3                  PS_FEP_STATUS(FEPNO) = %FEP_KICKED#;

   8271 13 000313   200006 235100                    LDA     FEPNO,,AUTO
        13 000314   000005 101400                    MRL     fill='000'O
        13 000315   000006 000004 xsym               ADSC9   B_VECTNIL+6              cn=0,n=4
        13 000316   000000 000001 xsym               ADSC9   PS_FEP_STATUS,A          cn=0,n=1

     1253     8272    3             END;

     1254     8273    2        END /* DO FEPNO */;

   8273 13 000317   200006 235100                    LDA     FEPNO,,AUTO
        13 000320   000001 035007                    ADLA    1,DL
        13 000321   200006 755100                    STA     FEPNO,,AUTO
        13 000322   000000 236000 xsym               LDQ     PS_NUM_NODES
        13 000323   200006 116100                    CMPQ    FEPNO,,AUTO
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:200  
        13 000324   000220 603000 13                 TRC     s:8253

     1255     8274
     1256     8275    1        PS_USED_FEP_SIZE = 0;

   8275 13 000325   000000 450000 xsym               STZ     PS_USED_FEP_SIZE

     1257     8276
     1258     8277    2        DO INHIBIT; /* So interrupts can't strike between testing

     1259     8278             PS_NEED_READ_HLPCG and doing M$WAIT     */
     1260     8279
     1261     8280    3             DO WHILE(PS_NEED_READ_HLPCG);

   8280 13 000326   000000 234200 xsym               SZN   ! PS_NEED_READ_HLPCG
        13 000327   000344 605200 13                 TPL   ! s:8288

     1262     8281    3                  PS_NEED_READ_HLPCG = %NO#;

   8281 13 000330   000000 450200 xsym               STZ   ! PS_NEED_READ_HLPCG

     1263     8282    3                  CALL M$READ(READ_HLPCG) ALTRET(ERRMSG);

   8282 13 000331   000156 630600 12                 EPPR0 ! READ_HLPCG
        13 000332   440000 713600                    CLIMB ! alt,read
        13 000333   401400 401760                    pmme    nvectors=4
        13 000334   000372 702200 13                 TSX2  ! ERRMSG

     1264     8283    3                  IF NOT PS_NEED_READ_HLPCG

   8283 13 000335   000000 234200 xsym               SZN   ! PS_NEED_READ_HLPCG
        13 000336   000342 604200 13                 TMI   ! s:8285

     1265     8284    3                  THEN CALL M$WAIT (FPT_WAIT);

   8284 13 000337   000110 630600 11                 EPPR0 ! FPT_WAIT
        13 000340   020006 713600                    CLIMB ! 8198
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:201  
        13 000341   400400 401760                    pmme    nvectors=2

     1266     8285    3             END;

   8285 13 000342   000000 234200 xsym               SZN   ! PS_NEED_READ_HLPCG
        13 000343   000330 604200 13                 TMI   ! s:8281

     1267     8286    2        END /* INHIBIT */;

     1268     8287
     1269     8288    1        IF DCBADDR(DCBNUM(M$HLPCG)) -> F$DCB.FCD#

   8288 13 000344   000000 236007 xsym               LDQ     M$HLPCG,DL
        13 000345   000007 470400 14                 LDP0    7
        13 000346   000000 471500                    LDP1    0,,PR0
        13 000347   100000 473506                    LDP3    0,QL,PR1
        13 000350   300031 236100                    LDQ     25,,PR3
        13 000351   020000 316007                    CANQ    8192,DL
        13 000352   000360 600000 13                 TZE     s:8291

     1270     8289    1        THEN CALL M$CLOSE(CLOSE_HLPCG)

   8289 13 000353   000120 630400 12                 EPPR0   CLOSE_HLPCG
        13 000354   450001 713400                    CLIMB   alt,close
        13 000355   406000 401760                    pmme    nvectors=13
        13 000356   000360 702000 13                 TSX2    s:8291
        13 000357   000360 710000 13                 TRA     s:8291

     1271     8290    2             WHENALTRETURN DO; END;

     1272     8291    1        IF PS_USED_FEP_SIZE = 0 THEN

   8291 13 000360   000000 235000 xsym               LDA     PS_USED_FEP_SIZE
        13 000361   000367 601000 13                 TNZ     s:8297

     1273     8292    2        DO;

PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:202  
     1274     8293    2             CALL PSE$GRIPE(%E$PS_FEP_KICKED,WARNING#);

   8293 13 000362   000023 630400 14                 EPPR0   19
        13 000363   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000364   000000 701000 xent               TSX1    PSE$GRIPE
        13 000365   000000 011000                    NOP     0

     1275     8294    2             ALTRETURN;

   8294 13 000366   000000 702200 xent               TSX2  ! X66_AALT

     1276     8295    2        END;
     1277     8296
     1278     8297    1        PS_TAG = 'F';

   8297 13 000367   106000 236003                    LDQ     35840,DU
        13 000370   000000 756000 xsym               STQ     PS_TAG

     1279     8298
     1280     8299    1        RETURN;

   8299 13 000371   000000 702200 xent               TSX2  ! X66_ARET

     1281     8300
     1282     8301    1   ERRMSG:
     1283     8302    1        CALL PSE$ERRMSG(,SERIOUS#);

   8302 13 000372   000004 236000 14    ERRMSG       LDQ     4
        13 000373   000001 235000 xsym               LDA     B_VECTNIL+1
        13 000374   200016 757100                    STAQ    LCLFLAGS+2,,AUTO
        13 000375   200016 630500                    EPPR0   LCLFLAGS+2,,AUTO
        13 000376   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000377   000000 701000 xent               TSX1    PSE$ERRMSG
        13 000400   000000 011000                    NOP     0
        13 000401   000435 710000 13                 TRA     s:8337

     1284     8303             /* ALTRETing here would only cause ATTACH to try again; that can't help. */
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:203  
     1285     8304
     1286     8305        %EJECT;
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:204  
     1287     8306    1   COMPFLAGS: PROC( FEPFLAGS, DSPFLAGS, LOGFLAGS);

   8306 13 000402   200010 741300       COMPFLAGS    STX1  ! ERR+1,,AUTO

     1288     8307
     1289     8308    2   DCL 1 FEPFLAGS ALIGNED,
     1290     8309    2            2 * BIT(1) UNAL,
     1291     8310    2            2 DBYTE0 BIT(8) UNAL,
     1292     8311    2            2 * BIT(1) UNAL,
     1293     8312    2            2 DBYTE1 BIT(8) UNAL,
     1294     8313    2            2 * BIT(1) UNAL,
     1295     8314    2            2 DBYTE2 BIT(8) UNAL,
     1296     8315    2            2 * BIT(1) UNAL,
     1297     8316    2            2 DBYTE3 BIT(8) UNAL;
     1298     8317
     1299     8318    2   DCL DSPFLAGS BIT(36) ALIGNED;
     1300     8319    2   DCL LOGFLAGS BIT(36) ALIGNED;
     1301     8320
     1302     8321    2   DCL 1 LCLFLAGS ALIGNED,
     1303     8322    2            2 * BIT(4) UNAL,
     1304     8323    2            2 DBYTE0 BIT(8) UNAL,
     1305     8324    2            2 DBYTE1 BIT(8) UNAL,
     1306     8325    2            2 DBYTE2 BIT(8) UNAL,
     1307     8326    2            2 DBYTE3 BIT(8) UNAL;
     1308     8327
     1309     8328    2        LCLFLAGS = DSPFLAGS | LOGFLAGS;

   8328 13 000403   200012 470500                    LDP0    @DSPFLAGS,,AUTO
        13 000404   200013 471500                    LDP1    @LOGFLAGS,,AUTO
        13 000405   000000 236100                    LDQ     0,,PR0
        13 000406   100000 276100                    ORQ     0,,PR1
        13 000407   200014 756100                    STQ     LCLFLAGS,,AUTO

     1310     8329
     1311     8330    2        FEPFLAGS.DBYTE0 = LCLFLAGS.DBYTE0;

   8330 13 000410   200011 473500                    LDP3    @FEPFLAGS,,AUTO
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:205  
        13 000411   000003 736000                    QLS     3
        13 000412   300000 676100                    ERQ     0,,PR3
        13 000413   377000 376003                    ANQ     130560,DU
        13 000414   300000 656100                    ERSQ    0,,PR3

     1312     8331    2        FEPFLAGS.DBYTE1 = LCLFLAGS.DBYTE1;

   8331 13 000415   200014 236100                    LDQ     LCLFLAGS,,AUTO
        13 000416   000002 736000                    QLS     2
        13 000417   300000 676100                    ERQ     0,,PR3
        13 000420   000377 376003                    ANQ     255,DU
        13 000421   300000 656100                    ERSQ    0,,PR3

     1313     8332    2        FEPFLAGS.DBYTE2 = LCLFLAGS.DBYTE2;

   8332 13 000422   200014 236100                    LDQ     LCLFLAGS,,AUTO
        13 000423   000001 736000                    QLS     1
        13 000424   300000 676100                    ERQ     0,,PR3
        13 000425   377000 376007                    ANQ     130560,DL
        13 000426   300000 656100                    ERSQ    0,,PR3

     1314     8333    2        FEPFLAGS.DBYTE3 = LCLFLAGS.DBYTE3;

   8333 13 000427   200014 236100                    LDQ     LCLFLAGS,,AUTO
        13 000430   300000 676100                    ERQ     0,,PR3
        13 000431   000377 376007                    ANQ     255,DL
        13 000432   300000 656100                    ERSQ    0,,PR3

     1315     8334
     1316     8335    2        RETURN;

   8335 13 000433   200010 221300                    LDX1  ! ERR+1,,AUTO
        13 000434   000001 702211                    TSX2  ! 1,X1

     1317     8336    2   END COMPFLAGS;
     1318     8337    1   END PSD$READ_IN;

PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:206  
   8337 13 000435   000000 702200 xent               TSX2  ! X66_ARET
     1319     8338        %EOD;

PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:207  
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   PS_PERR_C.:E05TOU  is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure PSD$READ_IN.
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:208  

 **** Variables and constants ****

  ****  Section 011  Data  PSD$READ_IN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     2-0-0/d STRC(72)    r     1 FPT_GETMOUSE               0-0-0/d STRC(72)    r     1 FPT_GETPM
     4-0-0/d STRC(504)   r     1 FPT_READ                 110-0-0/d STRC(216)   r     1 FPT_WAIT
    52-0-0/w STRC(360)   r     1 KL_REQSTATS               22-0-0/w STRC(432)   r     1 SETSTA_ST
    64-0-0/d STRC(144)   r     1 TAKE_CONTROL              70-0-0/d STRC(540)   r     1 VLR_MONINFO
    36-0-0/d STRC(432)   r     1 WRITE_STATSRQS

  ****  Section 012 RoData PSD$READ_IN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   106-0-0/c STRC(72)    r     1 ACCT_HLPCG               120-0-0/d STRC(1080)  r     1 CLOSE_HLPCG
   176-0-0/d STRC(432)   r     1 FPT_MONINFO                0-0-0/d STRC(360)   r     1 FPT_PRECORD
   110-0-0/w STRC(288)   r     1 HLP_STA                  104-0-0/c STRC(54)    r     1 NAME_HLPCG
    12-0-0/d STRC(2088)  r     1 OPEN_HLPCG               156-0-0/d STRC(504)   r     1 READ_HLPCG

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @ACTUAL                   12-0-0/w PTR         r     1 @DSPFLAGS
    11-0-0/w PTR         r     1 @FEPFLAGS                 13-0-0/w PTR         r     1 @LOGFLAGS
     3-0-0/w PTR         r     1 @POINTER$                 12-0-0/w PTR         r     1 @POINTER$
    11-0-0/w PTR         r     1 @VECTOR_                  13-0-0/w PTR         r     1 @WORD_COUNT
    *0-0-0/w UBIN        r     1 ACTUAL                    *0-0-0/w BIT         r     1 DSPFLAGS
     7-0-0/w UBIN        r     1 ERR                       *0-0-0/w STRC        r     1 FEPFLAGS
     6-0-0/w UBIN        r     1 FEPNO                     14-0-0/w STRC        r     1 LCLFLAGS
    *0-0-0/w BIT         r     1 LOGFLAGS                  *0-0-0/w PTR         r     1 POINTER$
    *0-0-0/w PTR         r     1 POINTER$                  *0-0-0/w STRC(72)    r     1 VECTOR_
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:209  
    *0-0-0/w UBIN        r     1 WORD_COUNT

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/c CHAR(140)   r     1 PS_BUFFER
     0-0-0/w STRC(144)   r     1 PS_FEP_DISP_FLAGS(0:99)
     0-0-0/w STRC(144)   r     1 PS_FEP_LOG_FLAGS(0:99)
     0-0-0/c UBIN(9)     r     1 PS_FEP_STATUS(0:99)
     0-0-0/w STRC(14760) r     1 PS_HLPCGBUF                0-0-0/c STRC(252)   r     1 PS_LOGFILE_KEY
     0-0-0/b BIT         r     1 PS_NEED_READ_HLPCG         0-0-0/w UBIN        r     1 PS_NUM_NODES
     0-0-0/w PTR         r     1 PS_STATS$                  0-0-0/c CHAR        r     1 PS_TAG
     0-0-0/w UBIN        r     1 PS_USED_FEP_SIZE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$EXCFR                    0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0N  NULL        r     1 F$LOG                      0-0-0N  NULL        r     1 M$HLPCG
     0-0-0N  NULL        r     1 M$LO                       0-0-0/c ASTR(9)     r     1 TEXTC


   Procedure PSD$READ_IN requires 286 words for executable code.
   Procedure PSD$READ_IN requires 16 words of local(AUTO) storage.
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:210  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:211  
          MINI XREF LISTING

ACCT_HLPCG
      7534**DCL      7451--DCLINIT
ACTUAL
      8157**DCL         7--PROC     8182<>CALL     8204--ENTRY    8206<>CALL     8215--ENTRY    8217<>CALL
      8230--ENTRY
B$EXCFR.ASL
      5962**DCL      5962--REDEF
B$EXCFR.ERR.CODE
      5976**DCL      8195>>ASSIGN
B$EXCFR.ERR.ERR#
      5976**DCL      5976--REDEF
B$EXCFR.EVID
      5975**DCL      5975--REDEF    5976--REDEF
B$EXCFR.IR
      5963**DCL      5963--REDEF
B$EXCFR.PREVSZ
      5962**DCL      5962--REDEF
B$EXCFR.SUBC
      5974**DCL      5974--REDEF    5975--REDEF    5975--REDEF
B$JIT.ERR.MID
      7214**DCL      7214--REDEF
B$JIT.PRIV.ACTIVE
      7214**DCL      8234>>IF
B$JIT.SYSID
      7213**DCL      8237>>CALLBLT  8248>>CALLBLT
B$JIT$
      7205**DCL      7208--IMP-PTR  8234>>IF       8237>>CALLBLT  8248>>CALLBLT
B$TCB.ALT$
      5958**DCL      8195>>ASSIGN
B$TCB$
      8159**DCL      8195>>ASSIGN
CLOSE_HLPCG
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:212  
      7661**DCL      8289<>CALL
CLOSE_HLPCG.SN_
      7661**DCL      7661--REDEF
CLOSE_HLPCG.UTL_
      7662**DCL      7662--REDEF
CLOSE_HLPCG.V
      7666**DCL      7661--DCLINIT
CLOSE_HLPCG.V.EXPIRE#
      7676**DCL      7676--REDEF
CLOSE_HLPCG.V.TYPE#
      7674**DCL      7674--REDEF
CLOSE_HLPCG.V.XTNSIZE#
      7671**DCL      7671--REDEF    7673--REDEF
COMPFLAGS
      8306**PROC     8260--CALL     8262--CALL     8268--CALL     8269--CALL
DSPFLAGS IN PROCEDURE COMPFLAGS
      8318**DCL      8306--PROC     8328>>ASSIGN
ERR
      8158**DCL      8185<<ASSIGN   8195<<ASSIGN   8197>>IF
ERRMSG
      8302**LABEL    8239--CALLALT  8240--CALLALT  8270--CALLALT  8282--CALLALT
F$DCB.ACTPOS
      7348**DCL      7348--REDEF
F$DCB.ARS#
      7322**DCL      7322--REDEF
F$DCB.ATTR
      7341**DCL      7342--REDEF
F$DCB.BORROW
      7356**DCL      7356--REDEF    7356--REDEF    7356--REDEF
F$DCB.DCBNAME.L
      7370**DCL      7370--IMP-SIZ
F$DCB.EOMCHAR#
      7326**DCL      7326--REDEF
F$DCB.FCD#
      7335**DCL      8232>>IF       8288>>IF
F$DCB.FLDID
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:213  
      7351**DCL      7351--REDEF
F$DCB.FORM$
      7345**DCL      7345--REDEF
F$DCB.FSECT
      7361**DCL      7361--REDEF
F$DCB.FSN#
      7338**DCL      7338--REDEF    7338--REDEF    7339--REDEF
F$DCB.HEADER$
      7344**DCL      7344--REDEF
F$DCB.IXTNSIZE#
      7342**DCL      7342--REDEF
F$DCB.LASTSTA$
      7331**DCL      7331--REDEF
F$DCB.LVL
      7357**DCL      7357--REDEF
F$DCB.NAME#.C
      7332**DCL      7332--REDEF
F$DCB.NOEOF
      7354**DCL      7354--REDEF
F$DCB.NRECS#
      7343**DCL      7343--REDEF
F$DCB.NRECX
      7362**DCL      7362--REDEF
F$DCB.OHDR
      7354**DCL      7354--REDEF
F$DCB.ORG#
      7337**DCL      7337--REDEF
F$DCB.PRECNO
      7360**DCL      7360--REDEF
F$DCB.RCSZ
      7366**DCL      7366--REDEF
F$DCB.RES#
      7333**DCL      7333--REDEF
F$DCB.SETX
      7345**DCL      7345--REDEF
F$DCB.TAB$
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:214  
      7345**DCL      7345--REDEF
F$DCB.TDA
      7359**DCL      7360--REDEF
F$DCB.WSN#
      7333**DCL      7333--REDEF
FEPFLAGS IN PROCEDURE COMPFLAGS
      8308**DCL      8306--PROC
FEPFLAGS.DBYTE0 IN PROCEDURE COMPFLAGS
      8310**DCL      8330<<ASSIGN
FEPFLAGS.DBYTE1 IN PROCEDURE COMPFLAGS
      8312**DCL      8331<<ASSIGN
FEPFLAGS.DBYTE2 IN PROCEDURE COMPFLAGS
      8314**DCL      8332<<ASSIGN
FEPFLAGS.DBYTE3 IN PROCEDURE COMPFLAGS
      8316**DCL      8333<<ASSIGN
FEPNO
      8154**DCL      8251<<DOINDEX  8253>>IF       8253>>IF       8257>>ASSIGN   8258>>CALLBLT  8260>>CALL
      8260>>CALL     8262>>CALL     8262>>CALL     8271>>ASSIGN
FPT_GETMOUSE
      7132**DCL      8219<>CALL
FPT_GETMOUSE.RESULTS_
      7132**DCL      8217<>CALL
FPT_GETPM
      7118**DCL      8208<>CALL
FPT_GETPM.RESULTS_
      7118**DCL      8206<>CALL
FPT_MONINFO
      8115**DCL      8242<>CALL
FPT_PRECORD
      7192**DCL      8199<>CALL
FPT_PRECORD.V
      7194**DCL      7192--DCLINIT
FPT_READ
      7156**DCL      8187<>CALL
FPT_READ.BUF_
      7158**DCL      8182<>CALL
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:215  
FPT_READ.STATION_
      7159**DCL      7160--REDEF
FPT_READ.V
      7160**DCL      7156--DCLINIT
FPT_READ.V.DVBYTE.REREAD#
      7171**DCL      7171--REDEF
FPT_READ.V.INDX#
      7169**DCL      7169--REDEF
FPT_WAIT
      8149**DCL      8284<>CALL
FPT_WAIT.V
      8150**DCL      8149--DCLINIT
GLURP
      8228**LABEL    8208--CALLALT  8219--CALLALT
HLP_STA
      7583**DCL      7622--DCLINIT
HLP_STA.MSGIDXT
      7593**DCL      7596--REDEF
KL_REQSTATS
      7878**DCL      7621--DCLINIT  7622--DCLINIT
KL_REQSTATS.DSPMSK
      7967**DCL      7973--REDEF    8260<>CALL     8268<>CALL
KL_REQSTATS.FEPNAME
      7948**DCL      8258<<CALLBLT
KL_REQSTATS.FNC
      7886**DCL      8247<<ASSIGN
KL_REQSTATS.NODE_NUM
      7891**DCL      8257<<ASSIGN
KL_REQSTATS.SLCMSK
      8008**DCL      8015--REDEF    8262<>CALL     8269<>CALL
KL_REQSTATS.STATSSTA
      7944**DCL      8248<<CALLBLT  8249<<CALLBLT
LCLFLAGS IN PROCEDURE COMPFLAGS
      8321**DCL      8328<<ASSIGN
LCLFLAGS.DBYTE0 IN PROCEDURE COMPFLAGS
      8323**DCL      8330>>ASSIGN
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:216  
LCLFLAGS.DBYTE1 IN PROCEDURE COMPFLAGS
      8324**DCL      8331>>ASSIGN
LCLFLAGS.DBYTE2 IN PROCEDURE COMPFLAGS
      8325**DCL      8332>>ASSIGN
LCLFLAGS.DBYTE3 IN PROCEDURE COMPFLAGS
      8326**DCL      8333>>ASSIGN
LOGFLAGS IN PROCEDURE COMPFLAGS
      8319**DCL      8306--PROC     8328>>ASSIGN
M$CLOSE
        17**DCL-ENT  8289--CALL
M$EVENT
        72**DCL-ENT  8240--CALL
M$GETMOUSE
        63**DCL-ENT  8219--CALL
M$GETPM
        64**DCL-ENT  8208--CALL
M$HLPCG
       637**DCL      8232--IF       8288--IF
M$MONINFO
        85**DCL-ENT  8242--CALL
M$OPEN
        17**DCL-ENT  8239--CALL
M$PRECORD
        21**DCL-ENT  8199--CALL
M$READ
        18**DCL-ENT  8187--CALL     8282--CALL
M$WAIT
        75**DCL-ENT  8284--CALL
M$WRITE
        18**DCL-ENT  8270--CALL
MAKE_VECTOR
      8163**PROC     8182--CALL     8206--CALL     8217--CALL
NAME_HLPCG
      7518**DCL      7447--DCLINIT
OPEN_HLPCG
      7446**DCL      8239<>CALL
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:217  
OPEN_HLPCG.ACSVEH_
      7448**DCL      7449--REDEF
OPEN_HLPCG.ALTKEYS_
      7454**DCL      7455--REDEF    7455--REDEF
OPEN_HLPCG.HDR_
      7453**DCL      7454--REDEF
OPEN_HLPCG.TAB_
      7452**DCL      7453--REDEF
OPEN_HLPCG.UHL_
      7446**DCL      7447--REDEF    7447--REDEF
OPEN_HLPCG.V
      7455**DCL      7446--DCLINIT
OPEN_HLPCG.V.FSN#
      7486**DCL      7486--REDEF    7486--REDEF
OPEN_HLPCG.WSN_
      7452**DCL      7452--REDEF
POINTER$
      8156**DCL         7--PROC     8182<>CALL     8204--ENTRY    8206<>CALL     8215--ENTRY    8217<>CALL
      8230--ENTRY
POINTER$ IN PROCEDURE MAKE_VECTOR
      8169**DCL      8163--PROC     8172>>ASSIGN
PSE$ERRMSG
      8160**DCL-ENT  8190--CALL     8235--CALL     8302--CALL
PSE$GRIPE
      8161**DCL-ENT  8293--CALL
PSF$FEPSTATS
      8153**DCL-ENT  8099--DCLINIT
PS_BUFFER
      5460**DCL      5495--DCLINIT  5497--DCLINIT
PS_COLLECT.CALCNT
      5615**DCL      5615--REDEF
PS_COLLECT.USRSRV
      5612**DCL      5613--REDEF
PS_FEP_DISP_FLAGS.DISP
      5110**DCL      8253>>IF       8260<>CALL
PS_FEP_DISP_FLAGS.SLCT
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:218  
      5176**DCL      8262<>CALL
PS_FEP_LOG_FLAGS.DISP
      5243**DCL      8253>>IF       8260<>CALL
PS_FEP_LOG_FLAGS.SLCT
      5309**DCL      8262<>CALL
PS_FEP_STATUS
      5924**DCL      8271<<ASSIGN
PS_HLPCGBUF
      5783**DCL      7705--DCLINIT  7706--DCLINIT
PS_HLPCGBUF.DSPMSK
      5872**DCL      5878--REDEF
PS_HLPCGBUF.SLCMSK
      5913**DCL      5920--REDEF
PS_LOGFILE_KEY
      5457**DCL      7156--DCLINIT  7157--DCLINIT
PS_LOGFILE_KEY.COUNT
      5457**DCL      8189>>IF
PS_LOGFILE_KEY.TAG
      5458**DCL      8188>>ASSIGN
PS_NEED_READ_HLPCG
      5629**DCL      8256<<ASSIGN   8280>>DOWHILE  8281<<ASSIGN   8283>>IF
PS_NUM_NODES
      5924**DCL      8243<<ASSIGN   8251>>DOINDEX
PS_OLD_COLLECT.CALCNT
      5619**DCL      5620--REDEF
PS_OLD_COLLECT.USRSRV
      5617**DCL      5617--REDEF
PS_STATS$
      5621**DCL      5623--IMP-PTR
PS_TAG
      5458**DCL      8188<<ASSIGN   8210<<ASSIGN   8221<<ASSIGN   8297<<ASSIGN
PS_USED_FEP_SIZE
      5629**DCL      8275<<ASSIGN   8291>>IF
READ_ALTRET
      8195**LABEL    8187--CALLALT
READ_HLPCG
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:219  
      7703**DCL      8282<>CALL
READ_HLPCG.STATION_
      7706**DCL      7707--REDEF
READ_HLPCG.V
      7707**DCL      7703--DCLINIT
READ_HLPCG.V.DVBYTE.REREAD#
      7718**DCL      7718--REDEF
READ_HLPCG.V.INDX#
      7716**DCL      7716--REDEF
SETSTA_ST
      7552**DCL      7447--DCLINIT
SETSTA_ST.MYSTATION#
      7556**DCL      8237<<CALLBLT  8238<<CALLBLT
TAKE_CONTROL
      8099**DCL      8240<>CALL
TAKE_CONTROL.V
      8099**DCL      8099--DCLINIT
TEXTC.LEN
      5625**DCL      5625--IMP-SIZ
VECTOR_ IN PROCEDURE MAKE_VECTOR
      8165**DCL      8163--PROC
VECTOR_.PTR$ IN PROCEDURE MAKE_VECTOR
      8168**DCL      8172<<ASSIGN
VECTOR_.SIZE IN PROCEDURE MAKE_VECTOR
      8166**DCL      8174<<ASSIGN
VLR_MONINFO
      8130**DCL      8115--DCLINIT
VLR_MONINFO.NUM_NODES
      8134**DCL      8243>>ASSIGN
WORD_COUNT IN PROCEDURE MAKE_VECTOR
      8170**DCL      8163--PROC     8174>>ASSIGN
WRITE_STATSRQS
      7620**DCL      8270<>CALL
WRITE_STATSRQS.STATION_
      7622**DCL      7622--REDEF
WRITE_STATSRQS.V
PL6.E3A0      #002=PSD$READ_IN File=PSD$DISP.:E05TSI                             WED 07/30/97 04:28 Page:220  
      7623**DCL      7620--DCLINIT
WRITE_STATSRQS.V.DVBYTE.VFC#
      7629**DCL      7629--REDEF

PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:221  
     1320        1        /*M*  PSD$EJECT   Eject the M$LO DCB if it's open */
     1321        2        /*T***********************************************************/
     1322        3        /*T*                                                         */
     1323        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1324        5        /*T*                                                         */
     1325        6        /*T***********************************************************/
     1326        7        /*X* PLM=5,IND=5,CTI=5,DCI=5,SQB=Y,PRB=Y,DTI=0,ENI=0,AND=Y,ECI=0,CSI=0,THI=0,SDI=5,M
                 7        OC=Y,CRT=1,CLM=5,DMR */
     1327        8        PSD$EJECT: PROC (LINES_NEEDED);
     1328        9
     1329       10        %INCLUDE CP_6;
     1330       91        %INCLUDE CP_6_SUBS;
     1331      631        %INCLUDE PS_DATA_R;
     1332     5927
     1333     5928    1   DCL LINES_NEEDED UBIN;
     1334     5929
     1335     5930
     1336     5931        %FPT_DEVICE (DCB=M$LO,
     1337     5932         STCLASS=CONSTANT,
     1338     5933         PAGE=YES);
     1339     5951
     1340     5952
     1341     5953        %FPT_LINES (FPTN=GET_LINES_REMAINING,
     1342     5954         STCLASS=CONSTANT,
     1343     5955         DCB=M$LO,
     1344     5956         LINES=LINES_REMAINING);
     1345     5970
     1346     5971
     1347     5972        %VLR_LINES (FPTN=LINES_REMAINING);
     1348     5986
     1349     5987
     1350     5988        %F$DCB;
     1351     6045
     1352     6046    1   DCL PSD$SKIP ENTRY;
     1353     6047
     1354     6048    1        IF DCBADDR(DCBNUM(M$LO)) -> F$DCB.FCD#
     1355     6049    2        THEN DO;
PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:222  
     1356     6050
     1357     6051    2             CALL M$LINES (GET_LINES_REMAINING);
     1358     6052
     1359     6053    2             IF LINES_REMAINING.RLINES# = -1
     1360     6054    3             THEN DO;
     1361     6055
     1362     6056    3                  IF ADDR(LINES_NEEDED) = ADDR(NIL)
     1363     6057    3                  THEN
     1364     6058    3                       CALL PSD$SKIP;
     1365     6059
     1366     6060    3             END;
     1367     6061
     1368     6062    2             ELSE
     1369     6063    2                  IF ADDR(LINES_NEEDED) = ADDR(NIL)
     1370     6064    2                       OR LINES_NEEDED > LINES_REMAINING.RLINES#
     1371     6065    2                  THEN
     1372     6066    2                       CALL M$DEVICE (FPT_DEVICE);
     1373     6067
     1374     6068    2        END;
     1375     6069
     1376     6070    1        RETURN;
     1377     6071
     1378     6072    1   END PSD$EJECT;
     1379     6073        %EOD;

PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:223  
--  Include file information  --

   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure PSD$EJECT.

   Procedure PSD$EJECT requires 35 words for executable code.
   Procedure PSD$EJECT requires 6 words of local(AUTO) storage.

PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:224  

 Object Unit name= PSD$EJECT                                  File name= PSD$DISP.:E05TOU
 UTS= JUL 30 '97 04:29:29.80 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$LO
    2   DCB   even  none     0      0  M$DO
    3   DCB   even  none     0      0  M$SI
    4   DCB   even  none     0      0  F$LOG
    5   DCB   even  none     0      0  M$ME
    6   DCB   even  none     0      0  M$HLPCG
    7  RtLbCm even  none    30     36  PS_FDS
    8  RtLbCm even  none    32     40  PS_SELECT_RPN
    9  RtLbCm even  none    17     21  PS_STATS_RPN
   10  RtLbCm even  none    34     42  PS_STATS_BUCKET
   11  RoData even  UTS     16     20  PSD$EJECT
   12   Data  even  none     2      2  PSD$EJECT
   13   Proc  even  none    35     43  PSD$EJECT
   14  RoData even  none     1      1  PSD$EJECT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes            yes      Std        1  PSD$EJECT
PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:225  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 PSD$SKIP
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$LO                                  M$DO
     M$SI                                  F$LOG                                 M$ME
     M$HLPCG                               PS_BUFFER                             PS_STATS$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID                                 ROSID
PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:226  


     1320        1        /*M*  PSD$EJECT   Eject the M$LO DCB if it's open */
     1321        2        /*T***********************************************************/
     1322        3        /*T*                                                         */
     1323        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1324        5        /*T*                                                         */
     1325        6        /*T***********************************************************/
     1326        7       /*X* PLM=5,IND=5,CTI=5,DCI=5,SQB=Y,PRB=Y,DTI=0,ENI=0,AND=Y,ECI=0,CSI=0,THI=0,SDI=5,M
                 7        OC=Y,CRT=1,CLM=5,DMR */
     1327        8        PSD$EJECT: PROC (LINES_NEEDED);

      8 13 000000   000000 700200 xent  PSD$EJECT    TSX0  ! X66_AUTO_1
        13 000001   000006 000001                    ZERO    6,1

     1328        9
     1329       10        %INCLUDE CP_6;
     1330       91        %INCLUDE CP_6_SUBS;
     1331      631        %INCLUDE PS_DATA_R;
     1332     5927
     1333     5928    1   DCL LINES_NEEDED UBIN;
     1334     5929
     1335     5930
     1336     5931        %FPT_DEVICE (DCB=M$LO,
     1337     5932         STCLASS=CONSTANT,
     1338     5933         PAGE=YES);
     1339     5951
     1340     5952
     1341     5953        %FPT_LINES (FPTN=GET_LINES_REMAINING,
     1342     5954         STCLASS=CONSTANT,
     1343     5955         DCB=M$LO,
     1344     5956         LINES=LINES_REMAINING);
     1345     5970
     1346     5971
     1347     5972        %VLR_LINES (FPTN=LINES_REMAINING);
     1348     5986
     1349     5987
     1350     5988        %F$DCB;
PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:227  
     1351     6045
     1352     6046    1   DCL PSD$SKIP ENTRY;
     1353     6047
     1354     6048    1        IF DCBADDR(DCBNUM(M$LO)) -> F$DCB.FCD#

   6048 13 000002   000000 236007 xsym               LDQ     M$LO,DL
        13 000003   000000 470400 14                 LDP0    0
        13 000004   000000 471500                    LDP1    0,,PR0
        13 000005   100000 473506                    LDP3    0,QL,PR1
        13 000006   300031 236100                    LDQ     25,,PR3
        13 000007   020000 316007                    CANQ    8192,DL
        13 000010   000042 600000 13                 TZE     s:6070

     1355     6049    2        THEN DO;

     1356     6050
     1357     6051    2             CALL M$LINES (GET_LINES_REMAINING);

   6051 13 000011   000012 630400 11                 EPPR0   GET_LINES_REMAINING
        13 000012   050005 713400                    CLIMB   20485
        13 000013   400400 401760                    pmme    nvectors=2

     1358     6052
     1359     6053    2             IF LINES_REMAINING.RLINES# = -1

   6053 13 000014   000000 220000 12                 LDX0    LINES_REMAINING
        13 000015   777777 100003                    CMPX0   -1,DU
        13 000016   000026 601000 13                 TNZ     s:6063

     1360     6054    3             THEN DO;

     1361     6055
     1362     6056    3                  IF ADDR(LINES_NEEDED) = ADDR(NIL)

   6056 13 000017   200003 236100                    LDQ     @LINES_NEEDED,,AUTO
        13 000020   000001 116000 xsym               CMPQ    B_VECTNIL+1
        13 000021   000042 601000 13                 TNZ     s:6070
PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:228  

     1363     6057    3                  THEN
     1364     6058    3                       CALL PSD$SKIP;

   6058 13 000022   000002 631400 xsym               EPPR1   B_VECTNIL+2
        13 000023   000000 701000 xent               TSX1    PSD$SKIP
        13 000024   000000 011000                    NOP     0

     1365     6059
     1366     6060    3             END;

   6060 13 000025   000042 710000 13                 TRA     s:6070

     1367     6061
     1368     6062    2             ELSE
     1369     6063    2                  IF ADDR(LINES_NEEDED) = ADDR(NIL)

   6063 13 000026   200003 236100                    LDQ     @LINES_NEEDED,,AUTO
        13 000027   000001 116000 xsym               CMPQ    B_VECTNIL+1
        13 000030   000037 600000 13                 TZE     s:6066
        13 000031   200003 470500                    LDP0    @LINES_NEEDED,,AUTO
        13 000032   000000 236000 12                 LDQ     LINES_REMAINING
        13 000033   000022 732000                    QRS     18
        13 000034   000037 604000 13                 TMI     s:6066
        13 000035   000000 116100                    CMPQ    0,,PR0
        13 000036   000042 603000 13                 TRC     s:6070

     1370     6064    2                       OR LINES_NEEDED > LINES_REMAINING.RLINES#
     1371     6065    2                  THEN
     1372     6066    2                       CALL M$DEVICE (FPT_DEVICE);

   6066 13 000037   000000 630400 11                 EPPR0   FPT_DEVICE
        13 000040   050006 713400                    CLIMB   20486
        13 000041   401000 401760                    pmme    nvectors=3

     1373     6067
     1374     6068    2        END;
PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:229  

     1375     6069
     1376     6070    1        RETURN;

   6070 13 000042   000000 702200 xent               TSX2  ! X66_ARET
     1377     6071
     1378     6072    1   END PSD$EJECT;
     1379     6073        %EOD;

PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:230  
--  Include file information  --

   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure PSD$EJECT.
PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:231  

 **** Variables and constants ****

  ****  Section 011 RoData PSD$EJECT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(360)   r     1 FPT_DEVICE                12-0-0/d STRC(216)   r     1 GET_LINES_REMAINING

  ****  Section 012  Data  PSD$EJECT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(72)    r     1 LINES_REMAINING

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @LINES_NEEDED             *0-0-0/w UBIN        r     1 LINES_NEEDED

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(140)   r     1 PS_BUFFER                  0-0-0/w PTR         r     1 PS_STATS$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0N  NULL        r     1 M$LO
     0-0-0/c ASTR(9)     r     1 TEXTC
PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:232  


   Procedure PSD$EJECT requires 35 words for executable code.
   Procedure PSD$EJECT requires 6 words of local(AUTO) storage.
PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:233  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:234  
          MINI XREF LISTING

F$DCB.ACTPOS
      6021**DCL      6021--REDEF
F$DCB.ARS#
      5995**DCL      5995--REDEF
F$DCB.ATTR
      6014**DCL      6015--REDEF
F$DCB.BORROW
      6029**DCL      6029--REDEF    6029--REDEF    6029--REDEF
F$DCB.DCBNAME.L
      6043**DCL      6043--IMP-SIZ
F$DCB.EOMCHAR#
      5999**DCL      5999--REDEF
F$DCB.FCD#
      6008**DCL      6048>>IF
F$DCB.FLDID
      6024**DCL      6024--REDEF
F$DCB.FORM$
      6018**DCL      6018--REDEF
F$DCB.FSECT
      6034**DCL      6034--REDEF
F$DCB.FSN#
      6011**DCL      6011--REDEF    6011--REDEF    6012--REDEF
F$DCB.HEADER$
      6017**DCL      6017--REDEF
F$DCB.IXTNSIZE#
      6015**DCL      6015--REDEF
F$DCB.LASTSTA$
      6004**DCL      6004--REDEF
F$DCB.LVL
      6030**DCL      6030--REDEF
F$DCB.NAME#.C
      6005**DCL      6005--REDEF
PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:235  
F$DCB.NOEOF
      6027**DCL      6027--REDEF
F$DCB.NRECS#
      6016**DCL      6016--REDEF
F$DCB.NRECX
      6035**DCL      6035--REDEF
F$DCB.OHDR
      6027**DCL      6027--REDEF
F$DCB.ORG#
      6010**DCL      6010--REDEF
F$DCB.PRECNO
      6033**DCL      6033--REDEF
F$DCB.RCSZ
      6039**DCL      6039--REDEF
F$DCB.RES#
      6006**DCL      6006--REDEF
F$DCB.SETX
      6018**DCL      6018--REDEF
F$DCB.TAB$
      6018**DCL      6018--REDEF
F$DCB.TDA
      6032**DCL      6033--REDEF
F$DCB.WSN#
      6006**DCL      6006--REDEF
FPT_DEVICE
      5944**DCL      6066<>CALL
FPT_DEVICE.V
      5945**DCL      5944--DCLINIT
GET_LINES_REMAINING
      5967**DCL      6051<>CALL
GET_LINES_REMAINING.V
      5967**DCL      5967--DCLINIT
LINES_NEEDED
      5928**DCL         8--PROC     6056--IF       6063--IF       6063>>IF
LINES_REMAINING
      5983**DCL      5967--DCLINIT
PL6.E3A0      #003=PSD$EJECT File=PSD$DISP.:E05TSI                               WED 07/30/97 04:29 Page:236  
LINES_REMAINING.RLINES#
      5983**DCL      6053>>IF       6063>>IF
M$DEVICE
        23**DCL-ENT  6066--CALL
M$LINES
        24**DCL-ENT  6051--CALL
M$LO
       639**DCL      6048--IF
PSD$SKIP
      6046**DCL-ENT  6058--CALL
PS_BUFFER
      5462**DCL      5497--DCLINIT  5499--DCLINIT
PS_COLLECT.CALCNT
      5617**DCL      5617--REDEF
PS_COLLECT.USRSRV
      5614**DCL      5615--REDEF
PS_HLPCGBUF.DSPMSK
      5874**DCL      5880--REDEF
PS_HLPCGBUF.SLCMSK
      5915**DCL      5922--REDEF
PS_OLD_COLLECT.CALCNT
      5621**DCL      5622--REDEF
PS_OLD_COLLECT.USRSRV
      5619**DCL      5619--REDEF
PS_STATS$
      5623**DCL      5625--IMP-PTR
TEXTC.LEN
      5627**DCL      5627--IMP-SIZ

PL6.E3A0      #004=PSD$SKIP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:30 Page:237  
     1380        1        /*T***********************************************************/
     1381        2        /*T*                                                         */
     1382        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1383        4        /*T*                                                         */
     1384        5        /*T***********************************************************/
     1385        6        PSD$SKIP: PROC;
     1386        7        %INCLUDE CP_6;
     1387       88        %INCLUDE PS_DATA_R;
     1388     5384    1   DCL SKIP_FMT CHAR(0) CONSTANT INIT (' ');
     1389     5385        %INCLUDE XUF_ENTRY;
     1390     5393
     1391     5394    1        CALL X$WRITE (PS_FDS, VECTOR(SKIP_FMT));
     1392     5395
     1393     5396    1        RETURN;
     1394     5397
     1395     5398    1   END PSD$SKIP;
     1396     5399        %EOD;

PL6.E3A0      #004=PSD$SKIP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:30 Page:238  
--  Include file information  --

   XUF_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure PSD$SKIP.

   Procedure PSD$SKIP requires 7 words for executable code.
   Procedure PSD$SKIP requires 4 words of local(AUTO) storage.

PL6.E3A0      #004=PSD$SKIP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:30 Page:239  

 Object Unit name= PSD$SKIP                                   File name= PSD$DISP.:E05TOU
 UTS= JUL 30 '97 04:30:05.16 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$LO
    2   DCB   even  none     0      0  M$DO
    3   DCB   even  none     0      0  M$SI
    4   DCB   even  none     0      0  F$LOG
    5   DCB   even  none     0      0  M$ME
    6   DCB   even  none     0      0  M$HLPCG
    7  RtLbCm even  none    30     36  PS_FDS
    8  RtLbCm even  none    32     40  PS_SELECT_RPN
    9  RtLbCm even  none    17     21  PS_STATS_RPN
   10  RtLbCm even  none    34     42  PS_STATS_BUCKET
   11  RoData even  UTS      1      1  PSD$SKIP
   12   Proc  even  none     7      7  PSD$SKIP
   13  RoData even  none     4      4  PSD$SKIP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        0  PSD$SKIP
PL6.E3A0      #004=PSD$SKIP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:30 Page:240  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std      22 X$WRITE
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$LO                                  M$DO
     M$SI                                  F$LOG                                 M$ME
     M$HLPCG                               PS_BUFFER                             PS_STATS$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #004=PSD$SKIP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:30 Page:241  


     1380        1        /*T***********************************************************/
     1381        2        /*T*                                                         */
     1382        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1383        4        /*T*                                                         */
     1384        5        /*T***********************************************************/
     1385        6        PSD$SKIP: PROC;

      6 12 000000   000000 700200 xent  PSD$SKIP     TSX0  ! X66_AUTO_0
        12 000001   000004 000000                    ZERO    4,0

     1386        7        %INCLUDE CP_6;
     1387       88        %INCLUDE PS_DATA_R;
     1388     5384    1   DCL SKIP_FMT CHAR(0) CONSTANT INIT (' ');
     1389     5385        %INCLUDE XUF_ENTRY;
     1390     5393
     1391     5394    1        CALL X$WRITE (PS_FDS, VECTOR(SKIP_FMT));

   5394 12 000002   000002 630400 13                 EPPR0   2
        12 000003   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000004   000000 701000 xent               TSX1    X$WRITE
        12 000005   000000 011000                    NOP     0

     1392     5395
     1393     5396    1        RETURN;

   5396 12 000006   000000 702200 xent               TSX2  ! X66_ARET
     1394     5397
     1395     5398    1   END PSD$SKIP;
     1396     5399        %EOD;

PL6.E3A0      #004=PSD$SKIP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:30 Page:242  
--  Include file information  --

   XUF_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure PSD$SKIP.
PL6.E3A0      #004=PSD$SKIP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:30 Page:243  

 **** Variables and constants ****

  ****  Section 007 RtLmCm PS_FDS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(1080)  r     1 PS_FDS

  ****  Section 011 RoData PSD$SKIP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR        r     1 SKIP_FMT

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(140)   r     1 PS_BUFFER                  0-0-0/w PTR         r     1 PS_STATS$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$LO                       0-0-0/c ASTR(9)     r     1 TEXTC


   Procedure PSD$SKIP requires 7 words for executable code.
   Procedure PSD$SKIP requires 4 words of local(AUTO) storage.
PL6.E3A0      #004=PSD$SKIP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:30 Page:244  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=PSD$SKIP File=PSD$DISP.:E05TSI                                WED 07/30/97 04:30 Page:245  
          MINI XREF LISTING

PS_BUFFER
      4919**DCL      4954--DCLINIT  4956--DCLINIT
PS_COLLECT.CALCNT
      5074**DCL      5074--REDEF
PS_COLLECT.USRSRV
      5071**DCL      5072--REDEF
PS_FDS
      4936**DCL      5394<>CALL
PS_HLPCGBUF.DSPMSK
      5331**DCL      5337--REDEF
PS_HLPCGBUF.SLCMSK
      5372**DCL      5379--REDEF
PS_OLD_COLLECT.CALCNT
      5078**DCL      5079--REDEF
PS_OLD_COLLECT.USRSRV
      5076**DCL      5076--REDEF
PS_STATS$
      5080**DCL      5082--IMP-PTR
SKIP_FMT
      5384**DCL      5394--CALL
TEXTC.LEN
      5084**DCL      5084--IMP-SIZ
X$WRITE
      5391**DCL-ENT  5394--CALL

PL6.E3A0      #005=PSD$HEADER File=PSD$DISP.:E05TSI                              WED 07/30/97 04:30 Page:246  
     1397        1        /*T***********************************************************/
     1398        2        /*T*                                                         */
     1399        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1400        4        /*T*                                                         */
     1401        5        /*T***********************************************************/
     1402        6        PSD$HEADER: PROC (INTERVAL_START, INTERVAL_END);
     1403        7        %INCLUDE CP_6;
     1404       88        %INCLUDE PS_DATA_R;
     1405     5384
     1406     5385    1   DCL 1 HEADER_FORMAT CONSTANT,
     1407     5386    1            2 * CHAR(0) INIT ('%/%22-CP-6 STATS performance displays%/%/'),
     1408     5387    1            2 * CHAR(0) INIT ('%15-Interval from  %A%/%26-to  %A');
     1409     5388
     1410     5389    1   DCL FAST_FORMAT CHAR (0) CONSTANT
     1411     5390    1    INIT ('%/%15-STATS interval from %A to %A   ');
     1412     5391
     1413     5392
     1414     5393
     1415     5394        %EXT_TIME (NAME=INT_START, STCLASS=STATIC);
     1416     5402
     1417     5403        %EXT_TIME (NAME=INT_END, STCLASS=STATIC);
     1418     5411
     1419     5412    1   DCL INTERVAL_START UBIN;
     1420     5413    1   DCL INTERVAL_END UBIN;
     1421     5414    1   DCL PSL$TIME ENTRY (2);
     1422     5415        %INCLUDE XUF_ENTRY;
     1423     5423
     1424     5424    1        CALL PSL$TIME (INTERVAL_START, INT_START);
     1425     5425    1        CALL PSL$TIME (INTERVAL_END, INT_END);
     1426     5426
     1427     5427    1        IF PS_TODAYS_DATE = INT_START.DATE@
     1428     5428    1             AND PS_TODAYS_DATE = INT_END.DATE@
     1429     5429    1        THEN
     1430     5430    1             CALL X$WRITE (PS_FDS, VECTOR(FAST_FORMAT),
     1431     5431    1                  VECTOR(INT_START.TIME@), VECTOR(INT_END.TIME@));
     1432     5432    1        ELSE
     1433     5433    1             CALL X$WRITE (PS_FDS, VECTOR(HEADER_FORMAT),
PL6.E3A0      #005=PSD$HEADER File=PSD$DISP.:E05TSI                              WED 07/30/97 04:30 Page:247  
     1434     5434    1                  VECTOR(INT_START), VECTOR(INT_END));
     1435     5435
     1436     5436    1        RETURN;
     1437     5437
     1438     5438    1   END PSD$HEADER;

PL6.E3A0      #005=PSD$HEADER File=PSD$DISP.:E05TSI                              WED 07/30/97 04:30 Page:248  
--  Include file information  --

   XUF_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure PSD$HEADER.

   Procedure PSD$HEADER requires 34 words for executable code.
   Procedure PSD$HEADER requires 8 words of local(AUTO) storage.

    No errors detected in file PSD$DISP.:E05TSI    .

PL6.E3A0      #005=PSD$HEADER File=PSD$DISP.:E05TSI                              WED 07/30/97 04:30 Page:249  

 Object Unit name= PSD$HEADER                                 File name= PSD$DISP.:E05TOU
 UTS= JUL 30 '97 04:30:40.84 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$LO
    2   DCB   even  none     0      0  M$DO
    3   DCB   even  none     0      0  M$SI
    4   DCB   even  none     0      0  F$LOG
    5   DCB   even  none     0      0  M$ME
    6   DCB   even  none     0      0  M$HLPCG
    7  RtLbCm even  none    30     36  PS_FDS
    8  RtLbCm even  none    32     40  PS_SELECT_RPN
    9  RtLbCm even  none    17     21  PS_STATS_RPN
   10  RtLbCm even  none    34     42  PS_STATS_BUCKET
   11  RoData even  UTS     29     35  PSD$HEADER
   12   Data  even  none    16     20  PSD$HEADER
   13   Proc  even  none    34     42  PSD$HEADER
   14  RoData even  none    22     26  PSD$HEADER

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes            yes      Std        2  PSD$HEADER
PL6.E3A0      #005=PSD$HEADER File=PSD$DISP.:E05TSI                              WED 07/30/97 04:30 Page:250  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 PSL$TIME
         yes           Std      22 X$WRITE
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$LO                                  M$DO
     M$SI                                  F$LOG                                 M$ME
     M$HLPCG                               PS_BUFFER                             PS_TODAYS_DATE
     PS_STATS$                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #005=PSD$HEADER File=PSD$DISP.:E05TSI                              WED 07/30/97 04:30 Page:251  


     1397        1        /*T***********************************************************/
     1398        2        /*T*                                                         */
     1399        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1400        4        /*T*                                                         */
     1401        5        /*T***********************************************************/
     1402        6        PSD$HEADER: PROC (INTERVAL_START, INTERVAL_END);

      6 13 000000   000000 700200 xent  PSD$HEADER   TSX0  ! X66_AUTO_2
        13 000001   000010 000002                    ZERO    8,2

     1403        7        %INCLUDE CP_6;
     1404       88        %INCLUDE PS_DATA_R;
     1405     5384
     1406     5385    1   DCL 1 HEADER_FORMAT CONSTANT,
     1407     5386    1            2 * CHAR(0) INIT ('%/%22-CP-6 STATS performance displays%/%/'),
     1408     5387    1            2 * CHAR(0) INIT ('%15-Interval from  %A%/%26-to  %A');
     1409     5388
     1410     5389    1   DCL FAST_FORMAT CHAR (0) CONSTANT
     1411     5390    1    INIT ('%/%15-STATS interval from %A to %A   ');
     1412     5391
     1413     5392
     1414     5393
     1415     5394        %EXT_TIME (NAME=INT_START, STCLASS=STATIC);
     1416     5402
     1417     5403        %EXT_TIME (NAME=INT_END, STCLASS=STATIC);
     1418     5411
     1419     5412    1   DCL INTERVAL_START UBIN;
     1420     5413    1   DCL INTERVAL_END UBIN;
     1421     5414    1   DCL PSL$TIME ENTRY (2);
     1422     5415        %INCLUDE XUF_ENTRY;
     1423     5423
     1424     5424    1        CALL PSL$TIME (INTERVAL_START, INT_START);

   5424 13 000002   000000 236000 14                 LDQ     0
        13 000003   200003 235100                    LDA     @INTERVAL_START,,AUTO
        13 000004   200006 757100                    STAQ    @INTERVAL_END+2,,AUTO
PL6.E3A0      #005=PSD$HEADER File=PSD$DISP.:E05TSI                              WED 07/30/97 04:30 Page:252  
        13 000005   200006 630500                    EPPR0   @INTERVAL_END+2,,AUTO
        13 000006   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000007   000000 701000 xent               TSX1    PSL$TIME
        13 000010   000000 011000                    NOP     0

     1425     5425    1        CALL PSL$TIME (INTERVAL_END, INT_END);

   5425 13 000011   000001 236000 14                 LDQ     1
        13 000012   200004 235100                    LDA     @INTERVAL_END,,AUTO
        13 000013   200006 757100                    STAQ    @INTERVAL_END+2,,AUTO
        13 000014   200006 630500                    EPPR0   @INTERVAL_END+2,,AUTO
        13 000015   000020 631400 xsym               EPPR1   B_VECTNIL+16
        13 000016   000000 701000 xent               TSX1    PSL$TIME
        13 000017   000000 011000                    NOP     0

     1426     5426
     1427     5427    1        IF PS_TODAYS_DATE = INT_START.DATE@

   5427 13 000020   040000 106400                    CMPC    fill='040'O
        13 000021   000000 000012 xsym               ADSC9   PS_TODAYS_DATE           cn=0,n=10
        13 000022   000001 200012 12                 ADSC9   INT_START+1              cn=1,n=10
        13 000023   000035 601000 13                 TNZ     s:5433
        13 000024   040000 106400                    CMPC    fill='040'O
        13 000025   000000 000012 xsym               ADSC9   PS_TODAYS_DATE           cn=0,n=10
        13 000026   000011 200012 12                 ADSC9   INT_END+1                cn=1,n=10
        13 000027   000035 601000 13                 TNZ     s:5433

     1428     5428    1             AND PS_TODAYS_DATE = INT_END.DATE@
     1429     5429    1        THEN
     1430     5430    1             CALL X$WRITE (PS_FDS, VECTOR(FAST_FORMAT),

   5430 13 000030   000010 630400 14                 EPPR0   8
        13 000031   000022 631400 xsym               EPPR1   B_VECTNIL+18
        13 000032   000000 701000 xent               TSX1    X$WRITE
        13 000033   000000 011000                    NOP     0
        13 000034   000041 710000 13                 TRA     s:5436

PL6.E3A0      #005=PSD$HEADER File=PSD$DISP.:E05TSI                              WED 07/30/97 04:30 Page:253  
     1431     5431    1                  VECTOR(INT_START.TIME@), VECTOR(INT_END.TIME@));
     1432     5432    1        ELSE
     1433     5433    1             CALL X$WRITE (PS_FDS, VECTOR(HEADER_FORMAT),

   5433 13 000035   000022 630400 14                 EPPR0   18
        13 000036   000022 631400 xsym               EPPR1   B_VECTNIL+18
        13 000037   000000 701000 xent               TSX1    X$WRITE
        13 000040   000000 011000                    NOP     0

     1434     5434    1                  VECTOR(INT_START), VECTOR(INT_END));
     1435     5435
     1436     5436    1        RETURN;

   5436 13 000041   000000 702200 xent               TSX2  ! X66_ARET
     1437     5437
     1438     5438    1   END PSD$HEADER;

PL6.E3A0      #005=PSD$HEADER File=PSD$DISP.:E05TSI                              WED 07/30/97 04:30 Page:254  
--  Include file information  --

   XUF_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure PSD$HEADER.
PL6.E3A0      #005=PSD$HEADER File=PSD$DISP.:E05TSI                              WED 07/30/97 04:30 Page:255  

 **** Variables and constants ****

  ****  Section 007 RtLmCm PS_FDS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(1080)  r     1 PS_FDS

  ****  Section 011 RoData PSD$HEADER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    23-0-0/c CHAR(37)    r     1 FAST_FORMAT                0-0-0/c STRC(666)   r     1 HEADER_FORMAT

  ****  Section 012  Data  PSD$HEADER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    10-0-0/c STRC(270)   r     1 INT_END                    0-0-0/c STRC(270)   r     1 INT_START

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @INTERVAL_END              3-0-0/w PTR         r     1 @INTERVAL_START
    *0-0-0/w UBIN        r     1 INTERVAL_END              *0-0-0/w UBIN        r     1 INTERVAL_START

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(140)   r     1 PS_BUFFER                  0-0-0/w PTR         r     1 PS_STATS$
PL6.E3A0      #005=PSD$HEADER File=PSD$DISP.:E05TSI                              WED 07/30/97 04:30 Page:256  
     0-0-0/c CHAR(10)    r     1 PS_TODAYS_DATE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$LO                       0-0-0/c ASTR(9)     r     1 TEXTC


   Procedure PSD$HEADER requires 34 words for executable code.
   Procedure PSD$HEADER requires 8 words of local(AUTO) storage.

    No errors detected in file PSD$DISP.:E05TSI    .
PL6.E3A0      #005=PSD$HEADER File=PSD$DISP.:E05TSI                              WED 07/30/97 04:30 Page:257  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=PSD$HEADER File=PSD$DISP.:E05TSI                              WED 07/30/97 04:30 Page:258  
          MINI XREF LISTING

FAST_FORMAT
      5389**DCL      5430--CALL
HEADER_FORMAT
      5385**DCL      5433--CALL
INTERVAL_END
      5413**DCL         6--PROC     5425<>CALL
INTERVAL_START
      5412**DCL         6--PROC     5424<>CALL
INT_END
      5404**DCL      5425<>CALL     5433--CALL
INT_END.DATE@
      5407**DCL      5427>>IF
INT_END.TIME@
      5409**DCL      5430--CALL
INT_START
      5395**DCL      5424<>CALL     5433--CALL
INT_START.DATE@
      5398**DCL      5427>>IF
INT_START.TIME@
      5400**DCL      5430--CALL
PSL$TIME
      5414**DCL-ENT  5424--CALL     5425--CALL
PS_BUFFER
      4919**DCL      4954--DCLINIT  4956--DCLINIT
PS_COLLECT.CALCNT
      5074**DCL      5074--REDEF
PS_COLLECT.USRSRV
      5071**DCL      5072--REDEF
PS_FDS
      4936**DCL      5430<>CALL     5433<>CALL
PS_HLPCGBUF.DSPMSK
      5331**DCL      5337--REDEF
PL6.E3A0      #005=PSD$HEADER File=PSD$DISP.:E05TSI                              WED 07/30/97 04:30 Page:259  
PS_HLPCGBUF.SLCMSK
      5372**DCL      5379--REDEF
PS_OLD_COLLECT.CALCNT
      5078**DCL      5079--REDEF
PS_OLD_COLLECT.USRSRV
      5076**DCL      5076--REDEF
PS_STATS$
      5080**DCL      5082--IMP-PTR
PS_TODAYS_DATE
      4921**DCL      5427>>IF       5427>>IF
TEXTC.LEN
      5084**DCL      5084--IMP-SIZ
X$WRITE
      5421**DCL-ENT  5430--CALL     5433--CALL
