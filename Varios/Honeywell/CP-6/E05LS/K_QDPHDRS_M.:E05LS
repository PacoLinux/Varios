

15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        1    
    1      /*M* K_QDPHDRS_M - Macros to generate QDP message headers */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* MEC,MOC,EXM=20,CLM=20,CRM=80   */
    8
    9
   10                          /*F* NAME: K$NQDP_HDR - QDP Network Message Header
   11
   12                          The K$NQDP_HDR macro in file K_QDPHDRS_M generates
   13                          the structure for the Network Layer message headers
   14                          that are used for messages when both end points of
   15                          the network connection reside on a CP-6 node and the
   16                          message does not traverse through any other network.
   17
   18                          This macro is also used to generate the structures
   19                          for the message headers for OSI connections that
   20                          are used by the network layer to transfer OSI messages
   21                          over the Coupler to the adjacent local fep where the
   22                          OSI network layer header is built.
   23
   24
   25                          When both end points are on a closed CP-6 network,
   26                          the network header contains only the source and
   27                          destination node numbers and a hop count.  If the
   28                          header is for messages on an OSI connection, the
   29                          source and destination NSAPs are appended to the
   30                          CP-6 header.
   31
   32                          The format of the header to be generated is specified
   33                          by the MSGTYPE option.  Permissable specification,
   34                          the associated value, and the type of header generated
   35                          is one of the following:
   36                          .fif
   37                          }
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        2    
   38                          } OSI_INIT   251   OSI Session - Connection Initiation
   39                          } OSI_DATA   252   OSI Session - Data
   40                          } CP6_CL4    253   CP6 Session - Class 4 Transport
   41                          } CP6_QDP    254   CP6 Session - No Transport
   42
   43                          When OSI_INIT is specified, the type of NSAP to be
   44                          generated is specified by the ADRTYP option.
   45                          Permissable values for ADRTYP are:
   46                          .fif
   47                          }
   48                          } X121
   49                          } FEP
   50                          } LACS
   51                          .fin
   52
   53                          This macro is used by both host and fep modules.
   54
   55                          The fields in the K$NQDP_HDR structure are:
   56                          */
   57
   58
   59                          /*N*
   60                          In all other cases the OSI Network Layer message
   61                          headers are used.  The structures for OSI network
   62                          headers are in file K_NETWORK_M.
   63                          */
   64      %MACRO K$NQDP_HDR (NAME=K$NQDP_HDR,
   65                      MSGTYPE(OSI_INIT=251,OSI_DATA=252,CP6_CL4=253,CP6_QDP=254,ANY)=253,
   66                      ADRTYP(X121=1,FEP=2,LACS=3,NET=4,ANY)=1,
   67                      ALGN=ALIGNED,
   68                      LAST(YES=";",NO=",",ANY)=";",
   69                      STCLASS=BASED);
   70
   71
   72      %LSET LISTDIR='0'B;
   73      %LSET LISTEXP='1'B;
   74      %LSET LISTCOM='0'B;
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        3    
   75      %LSET LISTSUB='1'B;
   76      %LSET L6=BITBIN(MODE_FEP);
   77      %LSET ALG=TEXTCHAR(ALGN);
   78      %IF ALG = '';
   79      %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
   80      %ENDIF;
   81      %LSET ALG=CHARTEXT(ALG);
   82      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   83      %IF (SUBSTR(STR,0,6)='STATIC') OR
   84      (SUBSTR(STR,0,8)='CONSTANT') OR
   85      (SUBSTR(STR,0,3)='EXT');
   86      %LSET INIT=CHARTEXT('INIT');
   87      %LSET EINIT=CHARTEXT('');
   88      %ELSE;
   89      %LSET INIT=CHARTEXT('/*');
   90      %LSET EINIT=CHARTEXT('*/');
   91      %ENDIF;
   92
   93
   94      DCL 1 NAME STCLASS %ALG,
   95
   96            2 %CHARTEXT('MSGTYP UBIN BYTE UNAL') %INIT(MSGTYPE)%EINIT,
   97                          /*K* MSGTYP - UBIN BYTE.
   98                          Contains a value to indicate what kind of message
   99                          the header introduces.  The file K_QDPHDRS_M
  100                          contains a set of EQUs that may be used to reference
  101                          this field.
  102
  103                          The EQUed values and their meanings are:
  104
  105                          .fif
  106                          } K_MSGTYP_OSI_INIT#   251   OSI Session - Connect
  107                          } K_MSGTYP_OSI_DATA#   252   OSI Session - Data
  108                          } K_MSGTYP_CP6_CL4#    253   CP6 Session - Class 4 Transport
  109                          } K_MSGTYP_CP6_QDP#    254   CP6 Session - No Transport
  110                          } K_MSGTYP_OSI#        129   Standard OSI format
  111                          .fin
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        4    
  112                          */
  113            2 HOP_COUNT UBIN BYTE UNAL %INIT(0)%EINIT,
  114                          /*K* HOP_COUNT - UBIN BYTE.
  115                          Contains a count of the number of nodes this
  116                          message has traversed.
  117                          */
  118            2 DEST_NODE UBIN BYTE UNAL %INIT(1)%EINIT,
  119                          /*K* DEST_NODE - UBIN BYTE.
  120                          Contains the number of the destination node +1.
  121                          Valid node numbers are 0 through 255.
  122                          */
  123      %IF (MSGTYPE>251);
  124            2 SOURCE_NODE UBIN BYTE UNAL %INIT(1)%EINIT LAST
  125      %ELSE;
  126            2 SOURCE_NODE UBIN BYTE UNAL %INIT(1)%EINIT,
  127                          /*K* SOURCE_NODE - UBIN BYTE.
  128                          Contains the number of the source node +1.
  129                          Valid node numbers are 0 through 255.
  130                          */
  131            %K$NSAP (FPTN=DST_NSAP, STCLASS=STCLASS, LVL=2, ADRTYP=ADRTYP, LAST=",");
  132                          /*K* DST_NSAP - Structure.
  133                          Contains the destination NSAP.  This field is
  134                          not present unless OSI_INIT is specified for MSGTYPE.
  135                          Refer to the K$NSAP macro in file K_ADDRESS_M
  136                          for details.
  137                          */
  138            %K$NSAP (FPTN=SRC_NSAP, STCLASS=STCLASS, LVL=2, ADRTYP=ADRTYP, LAST=",");
  139                          /*K* SRC_NSAP - Structure.
  140                          Contains the source NSAP.  This field is
  141                          not present unless OSI_INIT is specified
  142                          for MSGTYP.  Refer to the K$NSAP macro in file
  143                          K_ADDRESS_M for details.
  144                          */
  145            %K$FPT_CONNECT_OSI (NAME=TR_OPTIONS, STCLASS=STCLASS, LVL=2, FULL=NO, LAST=LAST, ALGN=CALIGNED);
  146                          /*K* TR_OPTNS - Structure.
  147                          Contains the transport options that have been selected.
  148                          Refer to the K$FPT_CONNECT_OSI macro in file
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        5    
  149                          K_INTERFACE_M for details.
  150                          */
  151      %ENDIF;
  152      %MEND;
  153
  154      %EQU K_MSGTYP_INTNET_PKT# = 0;
  155      %EQU K_MSGTYP_NULL_PKT# = 1;
  156      %EQU K_MSGTYP_OSI# = 129;
  157      %EQU K_MSGTYP_OSI_INIT# = 251;
  158      %EQU K_MSGTYP_OSI_DATA# = 252;
  159      %EQU K_MSGTYP_CP6_CL4# = 253;
  160      %EQU K_MSGTYP_CP6_QDP# = 254;
  161      %EQU K_MSGTYP_NWCTL# = 255;
  162
  163
  164
  165
  166      /*F* NAME: QDP_Session_Headers
  167
  168      The macros that generate the QDP session message headers are:
  169
  170      .fif
  171      }    K$SQDP_INIT     - Initiate Connection
  172      }    K$SQDP_INIT_ACK - Initiate Acknowledgement
  173      }    K$SQDP_TERM     - Terminate Connection
  174      }    K$SQDP_DATA     - Data
  175      .fin
  176
  177      These macros may be used by both host and fep modules.
  178
  179      Each of these macros generates the same fixed part of the message
  180      header; a LDCT index and a TYPE code.  The EQUs for the type code are
  181      also in this files.   Each has the form:
  182
  183      }         K_SQDP_type
  184
  185      where "type" is INIT, INIT_ACK, TERM or DATA.
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        6    
  186
  187      These EQUs may also be used when referencing KN$NETPARM.RECTYPE.
  188      */
  189
  190      %EQU K_SQDP_DATA = 0;
  191      %EQU K_SQDP_INIT = 1;
  192      %EQU K_SQDP_INIT_ACK = 2;
  193      %EQU K_SQDP_TERM = 3;
  194
  195
  196                          /*F* NAME: K$SQDP_HDR - QDP Session Header Prolog
  197
  198                          The K$SQDP_HDR macro in file K_QDPHDRS_M generates
  199                          the structure for the fixed portion of any QDP
  200                          session message header.
  201
  202                          K$SQDP_HDR contains the following:
  203                          */
  204
  205
  206      %MACRO K$SQDP_HDR (NAME=K$SQDP_HDR,
  207                      ALGN=,
  208                      LVL=1,
  209                      LAST(YES=";",NO=",",ANY)=";",
  210                      HOST_TYPE(STANDARD=0,UNPACKED=1,ANY)=0,
  211                      STCLASS=BASED);
  212
  213
  214      %LSET LISTDIR='0'B;
  215      %LSET LISTEXP='1'B;
  216      %LSET LISTCOM='0'B;
  217      %LSET LISTSUB='1'B;
  218      %LSET L6=BITBIN(MODE_FEP);
  219      %LSET ALG=TEXTCHAR(ALGN);
  220      %IF ALG = '';
  221      %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
  222      %ENDIF;
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        7    
  223      %LSET ALG=CHARTEXT(ALG);
  224      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  225      %IF (SUBSTR(STR,0,6)='STATIC') OR
  226      (SUBSTR(STR,0,8)='CONSTANT') OR
  227      (SUBSTR(STR,0,3)='EXT');
  228      %LSET INIT=CHARTEXT('INIT');
  229      %LSET EINIT=CHARTEXT('');
  230      %ELSE;
  231      %LSET INIT=CHARTEXT('/*');
  232      %LSET EINIT=CHARTEXT('*/');
  233      %ENDIF;
  234
  235
  236      %IF LVL=1;
  237      DCL 1 NAME STCLASS ALGN,
  238      %ELSE;
  239           %(LVL) NAME,
  240      %ENDIF;
  241
  242      %IF (HOST_TYPE=0);
  243            %(LVL+1) LDCT UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  244      %ELSE;
  245            %(LVL+1) LDCT UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  246
  247            %(LVL+1) LDCT_UNPK REDEF LDCT,
  248              %(LVL+2) * BIT(1) UNAL,
  249              %(LVL+2) HIBYTE UBIN(8) UNAL,
  250              %(LVL+2) * BIT(1) UNAL,
  251              %(LVL+2) LOBYTE UBIN(8) UNAL,
  252
  253            %(LVL+1) LDCT_PK REDEF LDCT,
  254              %(LVL+2) * BIT(2) UNAL,
  255              %(LVL+2) HIBYTE UBIN(8) UNAL,
  256              %(LVL+2) LOBYTE UBIN(8) UNAL,
  257      %ENDIF;
  258                          /*K* LDCT - UBIN(18)-host; UBIN(16)-fep.
  259                          Contains the destination LDCTX.
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        8    
  260                          */
  261            %(LVL+1) CNTRL BIT(%(2-L6)) UNAL %INIT('0'B)%EINIT,
  262                          /*K* CNTRL - BIT(2)-host; BIT(1)-fep.
  263                          Set to zero if the message type is data.
  264                          Set to one if the message is a session control message.
  265                          */
  266            %(LVL+1) QDP BIT(1) UNAL %INIT('0'B)%EINIT,
  267                          /*K* QDP - BIT(1).
  268                          Indicates the session connection is to use the
  269                          QDP path.  This bit is used only on init requests.
  270                          */
  271      %IF (HOST_TYPE=0);
  272            %(LVL+1) TYPE UBIN(%(15-L6)) UNAL %INIT(0)%EINIT LAST
  273      %ELSE;
  274            %(LVL+1) TYPE UBIN(%(15-L6)) UNAL %INIT(0)%EINIT,
  275
  276            %(LVL+1) TYPE_UNPK REDEF TYPE,
  277              %(LVL+2) HIBYTE UBIN(6) UNAL,
  278              %(LVL+2) * BIT(1) UNAL,
  279              %(LVL+2) LOBYTE UBIN(8) UNAL,
  280
  281            %(LVL+1) TYPE_PK REDEF TYPE,
  282              %(LVL+2) * BIT(1) UNAL,
  283              %(LVL+2) HIBYTE UBIN(6) UNAL,
  284              %(LVL+2) LOBYTE UBIN(8) UNAL LAST
  285      %ENDIF;
  286                          /*K* TYPE - UBIN(15)-host; UBIN(14)-fep.
  287                          When the message type is control, contains a value
  288                          to indicate which type of control message.
  289
  290                          When the message type is data, contains the value
  291                          passed in KN$NETPARM.RECTYPE or K$RWPARM.RECTYPE.
  292                          */
  293      %MEND;
  294
  295
  296
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        9    
  297
  298                          /*F* NAME: K$SQDP_TRLR - QDP Session Header Trailer
  299                          */
  300      %MACRO K$SQDP_TRLR (NAME=K$SQDP_TRLR,
  301                      ALGN=,
  302                      LVL=1,
  303                      LAST(YES=";",NO=",",ANY)=";",
  304                      HOST_TYPE(STANDARD=0,UNPACKED=1,ANY)=0,
  305                      STCLASS=BASED);
  306
  307      %LSET LISTDIR='0'B;
  308      %LSET LISTEXP='1'B;
  309      %LSET LISTCOM='0'B;
  310      %LSET LISTSUB='1'B;
  311      %LSET L6=BITBIN(MODE_FEP);
  312      %LSET ALG=TEXTCHAR(ALGN);
  313      %IF ALG = '';
  314      %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
  315      %ENDIF;
  316      %LSET ALG=CHARTEXT(ALG);
  317      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  318      %IF (SUBSTR(STR,0,6)='STATIC') OR
  319      (SUBSTR(STR,0,8)='CONSTANT') OR
  320      (SUBSTR(STR,0,3)='EXT');
  321      %LSET INIT=CHARTEXT('INIT');
  322      %LSET EINIT=CHARTEXT('');
  323      %ELSE;
  324      %LSET INIT=CHARTEXT('/*');
  325      %LSET EINIT=CHARTEXT('*/');
  326      %ENDIF;
  327
  328
  329      %IF LVL=1;
  330      DCL 1 NAME STCLASS ALGN,
  331      %ELSE;
  332           %(LVL) NAME,
  333      %ENDIF;
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        10   
  334
  335      %IF (HOST_TYPE=0);
  336            %(LVL+1) TYPE UBIN(%(18-L6*2)) UNAL %INIT(0)%EINIT,
  337      %ELSE;
  338            %(LVL+1) TYPE UBIN(%(18-L6*2)) UNAL %INIT(0)%EINIT,
  339
  340            %(LVL+1) TYPE_UNPK REDEF TYPE,
  341              %(LVL+2) * BIT(1) UNAL,
  342              %(LVL+2) HIBYTE UBIN(8) UNAL,
  343              %(LVL+2) * BIT(1) UNAL,
  344              %(LVL+2) LOBYTE UBIN(8) UNAL,
  345
  346            %(LVL+1) TYPE_PK REDEF TYPE,
  347              %(LVL+2) * BIT(2) UNAL,
  348              %(LVL+2) HIBYTE UBIN(8) UNAL,
  349              %(LVL+2) LOBYTE UBIN(8) UNAL,
  350      %ENDIF;
  351                          /*K* DATA_HDR.TYPE - UBIN(18)-host; UBIN(16)-fep.
  352                          */
  353      %IF (HOST_TYPE=0);
  354              %(LVL+1) LENGTH UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT LAST
  355      %ELSE;
  356              %(LVL+1) LENGTH UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  357
  358              %(LVL+1) LENGTH_UNPK REDEF LENGTH,
  359                %(LVL+2) * BIT(1) UNAL,
  360                %(LVL+2) HIBYTE UBIN(8) UNAL,
  361                %(LVL+2) * BIT(1) UNAL,
  362                %(LVL+2) LOBYTE UBIN(8) UNAL,
  363
  364              %(LVL+1) LENGTH_PK REDEF LENGTH,
  365                %(LVL+2) * BIT(2) UNAL,
  366                %(LVL+2) HIBYTE UBIN(8) UNAL,
  367                %(LVL+2) LOBYTE UBIN(8) UNAL LAST
  368      %ENDIF;
  369                          /*K* DATA_HDR.LENGTH - UBIN(18)-host; UBIN(16)-fep.
  370                          */
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        11   
  371      %MEND;
  372
  373
  374
  375
  376
  377                          /*F* NAME: K$SQDP_DATA - QDP Session Data Header
  378
  379                          The K$SQDP_DATA macro in file K_QDPHDRS_M generates
  380                          the structure for the QDP Session data message header.
  381
  382                          K$SQDP_DATA contains the following:
  383                          */
  384
  385
  386      %MACRO K$SQDP_DATA (NAME=K$SQDP_DATA,
  387                      ALGN=,
  388                      LVL=1,
  389                      LAST(YES=";",NO=",",ANY)=";",
  390                      HOST_TYPE(STANDARD=0,UNPACKED=1,ANY)=0,
  391                      STCLASS=BASED);
  392
  393
  394      %LSET LISTDIR='0'B;
  395      %LSET LISTEXP='1'B;
  396      %LSET LISTCOM='0'B;
  397      %LSET LISTSUB='1'B;
  398      %LSET L6=BITBIN(MODE_FEP);
  399      %LSET ALG=TEXTCHAR(ALGN);
  400      %IF ALG = '';
  401      %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
  402      %ENDIF;
  403      %LSET ALG=CHARTEXT(ALG);
  404      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  405      %IF (SUBSTR(STR,0,6)='STATIC') OR
  406      (SUBSTR(STR,0,8)='CONSTANT') OR
  407      (SUBSTR(STR,0,3)='EXT');
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        12   
  408      %LSET INIT=CHARTEXT('INIT');
  409      %LSET EINIT=CHARTEXT('');
  410      %ELSE;
  411      %LSET INIT=CHARTEXT('/*');
  412      %LSET EINIT=CHARTEXT('*/');
  413      %ENDIF;
  414
  415       %K$SQDP_HDR(NAME=NAME,ALGN=ALGN,LVL=LVL,STCLASS=STCLASS,
  416                      HOST_TYPE=HOST_TYPE, LAST=NO);
  417
  418                          /*K* LDCT - UBIN(18)-host; UBIN(16)-fep.
  419                          Contains the destination LDCTX.
  420                          */
  421
  422                          /*K* CNTRL - BIT(2)-host; BIT(1)-fep.
  423                          Set to zero to indicate that the message type is data.
  424                          */
  425
  426                          /*K* TYPE - UBIN(16)-host; UBIN(15)-fep.
  427                          When the message CNTRL bit is zero, contains the value
  428                          passed in KN$NETPARM.RECTYPE or K$RWPARM.RECTYPE.
  429                          */
  430      %IF (HOST_TYPE=0);
  431              2 LENGTH UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT LAST
  432      %ELSE;
  433                2 LENGTH UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  434
  435                2 LENGTH_UNPK REDEF LENGTH,
  436                3 * BIT(1) UNAL,
  437                3 HIBYTE UBIN(8) UNAL,
  438                3 * BIT(1) UNAL,
  439                3 LOBYTE UBIN(8) UNAL,
  440
  441                2 LENGTH_PK REDEF LENGTH,
  442                3 * BIT(2) UNAL,
  443                3 HIBYTE UBIN(8) UNAL,
  444                3 LOBYTE UBIN(8) UNAL LAST
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        13   
  445      %ENDIF;
  446                          /*K* LENGTH - UBIN(18) host; UBIN(16) fep.
  447                          Contains the byte size of the presentation header (VDO)
  448                          plus the size of the user application data that follows.
  449                          .XEQ
  450
  451                          }          KN$NETPARM.MSGSZ + KN$NETPARM.UHDRSZ    if fep
  452                          }          K$RWPARM.MSGSZ + K$RWPARM.UHDRSZ        if host
  453                          */
  454      %MEND;
  455
  456
  457
  458                          /*F* NAME: K$SQDP_INIT - QDP Initiate Session Header
  459
  460                          All QDP Session connections are initiated from the
  461                          FEP nodes and may have either a FEP node or a host
  462                          node for the destingation end point.  All inbound
  463                          connect requests for a FEP node must be directed to
  464                          NODEADMN however.
  465
  466                          The K$SQDP_INIT macro in file K_QDPHDRS_M generates
  467                          the structure for the QDP Initiate Connection
  468                          message header.
  469
  470                          K$SQDP_INIT contains the following:
  471                          */
  472
  473
  474      %MACRO K$SQDP_INIT (NAME=K$SQDP_INIT,
  475                      ALGN=,
  476                      LVL=1,
  477                      LAST(YES=";",NO=",",ANY)=";",
  478                      HOST_TYPE(STANDARD=0,UNPACKED=1,ANY)=0,
  479                      STCLASS=BASED);
  480
  481
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        14   
  482      %LSET LISTDIR='0'B;
  483      %LSET LISTEXP='1'B;
  484      %LSET LISTCOM='0'B;
  485      %LSET LISTSUB='1'B;
  486      %LSET L6=BITBIN(MODE_FEP);
  487      %LSET ALG=TEXTCHAR(ALGN);
  488      %IF ALG = '';
  489      %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
  490      %ENDIF;
  491      %LSET ALG=CHARTEXT(ALG);
  492      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  493      %IF (SUBSTR(STR,0,6)='STATIC') OR
  494      (SUBSTR(STR,0,8)='CONSTANT') OR
  495      (SUBSTR(STR,0,3)='EXT');
  496      %LSET INIT=CHARTEXT('INIT');
  497      %LSET EINIT=CHARTEXT('');
  498      %ELSE;
  499      %LSET INIT=CHARTEXT('/*');
  500      %LSET EINIT=CHARTEXT('*/');
  501      %ENDIF;
  502
  503                %K$SQDP_HDR(NAME=NAME,ALGN=ALGN,LVL=LVL,STCLASS=STCLASS,
  504                HOST_TYPE=HOST_TYPE, LAST=NO);
  505                          /*K* LDCT - UBIN(18)-host; UBIN(16)-fep.
  506                          Contains the destination LDCTX.
  507                          */
  508
  509                          /*K* CNTRL - BIT(2)-host; BIT(1)-fep.
  510                          Set to non-zero to indicate this is a control type
  511                          message.
  512                          */
  513
  514                          /*K* TYPE - UBIN(18)-host; UBIN(16)-fep.
  515                          Contains the value K_SQDP_INIT (1) that indicates
  516                          this is an initiate session connection message.
  517                          */
  518              %K$RLCID (NAME=RLCID,LVL=2,STCLASS=STCLASS,HOST_TYPE=HOST_TYPE,LAST=NO);
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        15   
  519                          /*K* RLCID - UBIN(36)-host; UBIN(32)-fep.
  520                          Contains the RLCID for the other end point.
  521
  522                          KNS$SEND builds RLCID in the initiate session
  523                          header as follows:
  524                          .fif
  525                          }   RLCID.NODE       - from KN_NODE#
  526                          }   RLCID.GENERATION - from KN$LDCT.GENERATION
  527                          }   RLCID.LDCTX      - from KN$LDCT.LDCTX
  528                          .fin
  529
  530                          KNS$RECV, on receipt of an initiate session request,
  531                          gets an LDCT for the end point on this fep and sets
  532                          KN$LDCT.RLCID from this field.
  533
  534                          KIS$RECV uses this to build NK$LDCT.RLCID.
  535                          */
  536      %IF (HOST_TYPE=0);
  537            2 SYSID UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  538      %ELSE;
  539            2 SYSID UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  540
  541            2 SYSID_UNPK REDEF SYSID,
  542              3 * BIT(1) UNAL,
  543              3 HIBYTE UBIN(8) UNAL,
  544              3 * BIT(1) UNAL,
  545              3 LOBYTE UBIN(8) UNAL,
  546
  547            2 SYSID_PK REDEF SYSID,
  548              3 * BIT(2) UNAL,
  549              3 HIBYTE UBIN(8) UNAL,
  550              3 LOBYTE UBIN(8) UNAL,
  551      %ENDIF;
  552                          /*K* SYSID - UBIN(18)-host; UBIN(16)-fep.
  553                          KNS$SEND fills this field from FPT_CONNECT.USER.SYSID.
  554                          KIS$RECV remebers it in NK$LDCT.SYSID.
  555
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        16   
  556                          KNS$RECV, on receipt of an initiate session request,
  557                          builds a connect fpt to be passed to KNH$SEND.
  558                          FPT_CONNECT.USER.SYSID is initialized from this field.
  559                          */
  560            2 TERMINAL_SPEED UBIN BYTE CALIGNED,
  561                          /*K* TERMINAL_SPEED - UBIN(8).
  562
  563                          KNS$SEND initilizes this field from FPT_CONNECT.SPEED.
  564
  565                          .xeq KNH_MACRO_C FPT_CONNNECT SPEED
  566
  567                          KNS$RECV, on receipt of an initiate session request,
  568                          uses this field to build FPT_CONNECT.SPEED.
  569
  570                          KIS$RECV ignores this field.
  571                          */
  572            2 DEST_GENERATION UBIN BYTE CALIGNED %INIT(0)%EINIT,
  573                          /*K* DEST_GENERATION - UBIN(18)-host; UBIN(16)-fep.
  574
  575                     KNS$SEND initializes this field from KN$LDCT.RLCID.GENERATION.
  576
  577                     KNS$RECV and KIS$RECV, on receipt of an initiate session
  578                     request, checks this value against LDCT.GENERATION.
  579                     */
  580            2 NODE_NAME CHAR(8) CALIGNED,
  581                          /*K* NODE_NAME - CHAR(8).
  582                          Contains the name of the node on which the
  583                          initiating session resides.
  584
  585                          KNS$SEND set the text of the node name from
  586                          KN_NODE_TEXT here.
  587
  588                          KIS$RECV uses this to build KL_SNG.LOGON.LGNTEX
  589                          if the request is for a connection to 'NETMAN'.
  590                          */
  591
  592            2 RESOURCE CHAR(8) CALIGNED,
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        17   
  593                          /*K* RESOURCE - CHAR(8).
  594
  595                          KNS$SEND sets the value from FPT_CONNECT.RESOURCE here.
  596                          .xeq KNH_MACRO_C FPT_CONNECT RESOURCE
  597
  598                          KNS$RECV, on receipt of an initiate session request,
  599                          builds a connect fpt to be passed to KNH$SEND.
  600                          FPT_CONNECT.RESOURCE is initialized from this field.
  601
  602                          KIS$RECV uses this to determine if the connection is for
  603                          'NETMAN' or not and builds KL_SGN accordingly.
  604                          */
  605
  606              %B$TERMINAL_ID(FPTN=TERMINAL_ID,LAST=",",LVL=2);
  607                          /*K* TERMINAL_ID - Structure.
  608                          See B$TERMINAL_ID.
  609
  610                          KNS$SEND initilizes this field from FPT_CONNECT.TERMINAL_ID.
  611
  612                          KNS$RECV, on receipt of an initiate session request,
  613                          uses this field to build FPT_CONNECT.TERMINAL_ID.
  614
  615                          KIS$RECV uses this to build KL_SGN.TERMINAL_ID.
  616                          */
  617
  618              %K$SQDP_TRLR (NAME=DATA_HDR,LVL=2,STCLASS=STCLASS,HOST_TYPE=HOST_TYPE,LAST=LAST);
  619                          /*K* DATA_HDR.TYPE - UBIN(18)-host; UBIN(16)-fep.
  620
  621                          KNS$SEND builds this field in the initiate session
  622                          header from the value passed in KN$NETPARM.RECTYPE.
  623
  624                          KNS$RECV, on receipt of an initiate acknowledgement,
  625                          moves this value to KN$NETPARM.RECTYPE prior to calling
  626                          LDCT.USER_ENTRY$ with the INIT function.
  627
  628                          Used only for FEP to FEP connections; KIS$RECV
  629                          ignores this field.
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        18   
  630                          */
  631
  632                          /*K* DATA_HDR.LENGTH - UBIN(18)-host; UBIN(16)-fep.
  633                          Contains the byte size of all user data that follows
  634                          the session header.
  635
  636                          KNS$SEND builds this field in the initiate session
  637                          header from the values passed in KN$NETPARM.
  638                          .xeq K_QDPHDRS_M K$SQDP_DATA LENGTH
  639
  640                          On inbound connect request, this field is used by
  641                          to build K$RWPARM or KN$NETPARM .UHDRSZ.
  642                          */
  643      %MEND;
  644
  645
  646
  647
  648
  649                          /*F* NAME: K$SQDP_INIT_ACK - QDP Initiate Ack Session Header
  650
  651                          The K$SQDP_INIT_ACK macro generates the structure
  652                          for the QDP Initiate Connection Acknowledgement
  653                          message header.
  654
  655                          K$SQDP_INIT_ACK contains the following:
  656                          */
  657
  658
  659      %MACRO K$SQDP_INIT_ACK (NAME=K$SQDP_INIT_ACK,
  660                      ALGN=,
  661                      LVL=1,
  662                      LAST(YES=";",NO=",",ANY)=";",
  663                      HOST_TYPE(STANDARD=0,UNPACKED=1,ANY)=0,
  664                      STCLASS=BASED);
  665
  666
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        19   
  667      %LSET LISTDIR='0'B;
  668      %LSET LISTEXP='1'B;
  669      %LSET LISTCOM='0'B;
  670      %LSET LISTSUB='1'B;
  671      %LSET L6=BITBIN(MODE_FEP);
  672      %LSET ALG=TEXTCHAR(ALGN);
  673      %IF ALG = '';
  674      %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
  675      %ENDIF;
  676      %LSET ALG=CHARTEXT(ALG);
  677      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  678      %IF (SUBSTR(STR,0,6)='STATIC') OR
  679      (SUBSTR(STR,0,8)='CONSTANT') OR
  680      (SUBSTR(STR,0,3)='EXT');
  681      %LSET INIT=CHARTEXT('INIT');
  682      %LSET EINIT=CHARTEXT('');
  683      %ELSE;
  684      %LSET INIT=CHARTEXT('/*');
  685      %LSET EINIT=CHARTEXT('*/');
  686      %ENDIF;
  687
  688
  689              %K$SQDP_HDR(NAME=NAME,ALGN=ALGN,LVL=LVL,STCLASS=STCLASS,
  690              HOST_TYPE=HOST_TYPE, LAST=NO);
  691
  692                          /*K* LDCT - UBIN(18)-host; UBIN(16)-fep.
  693                          Contains the destination LDCTX.
  694                          */
  695
  696                          /*K* CNTRL - BIT(2)-host; BIT(1)-fep.
  697                          Set to non-zero to indicate this is a control type
  698                          message.
  699                          */
  700
  701                          /*K* TYPE - UBIN(18)-host; UBIN(16)-fep.
  702                          Contains the value K_SQDP_INIT_ACK (2) that indicates
  703                          this is an initiate session acknowledgement message.
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        20   
  704                          */
  705              %K$RLCID (NAME=RLCID,LVL=2,STCLASS=STCLASS,HOST_TYPE=HOST_TYPE,LAST=NO);
  706                          /*K* RLCID - UBIN(36)-host; UBIN(32)-fep.
  707                          Contains the RLCID for the responding end point.
  708
  709                          */
  710
  711      %IF (HOST_TYPE=0);
  712            2 REASON UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  713      %ELSE;
  714            2 REASON UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  715
  716            2 REASON_UNPK REDEF REASON,
  717              3 * BIT(1) UNAL,
  718              3 HIBYTE UBIN(8) UNAL,
  719              3 * BIT(1) UNAL,
  720              3 LOBYTE UBIN(8) UNAL,
  721
  722            2 REASON_PK REDEF REASON,
  723              3 * BIT(2) UNAL,
  724              3 HIBYTE UBIN(8) UNAL,
  725              3 LOBYTE UBIN(8) UNAL,
  726      %ENDIF;
  727                          /*K* REASON - UBIN(18)-host; UBIN(16)-fep.
  728                          KNS$SEND builds this field in the initiate acknowledgement
  729                          header from the value passed in FPT_CONNECT_ACK.REASON:
  730
  731                          .xeq KNH_MACRO_C FPT_CONNECT_ACK REASON
  732
  733                          KIS$SEND builds this field from K$RWPARM.ERR.
  734                          KIS$RECV only uses NORMAL, BADGEN and NOLDCT.
  735
  736                          On receipt of an initiate acknowledgement, KNS$RECV
  737                          checks this field to determine if there was an error.  If
  738                          non-zero, the initiate connection has been rejected.
  739                          */
  740            2 * UBIN BYTE CALIGNED %INIT(0)%EINIT,
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        21   
  741            2 * UBIN(%(5-L6)) UNAL %INIT(0)%EINIT,
  742
  743            2 RESCODE UBIN(4) UNAL %INIT(0)%EINIT,
  744                          /*K* RESCODE - BYTE.
  745                     KIS$SEND sets this field from NK$LDCT.RESCOD when called from
  746                     KIA$FPCNCT when the host LDCT.RESCOD is TSFPRG or CGFPRG.
  747                     All other Initaite Connection Ack letters from the host leave
  748                     this field set to zero.
  749
  750                     On receipt of an initiate acknowledgement, KNS$RECV
  751                     sets the value in KN$LDCT.RESCOD from this field.
  752                     */
  753
  754              %K$SQDP_TRLR (NAME=DATA_HDR,LVL=2,STCLASS=STCLASS,HOST_TYPE=HOST_TYPE,LAST=YES);
  755                          /*K* DATA_HDR.TYPE - UBIN(18)-host; UBIN(16)-fep.
  756
  757                          KNS$SEND builds this field in the initiate acknowledgement
  758                          header from the value passed in KN$NETPARM.RECTYPE.
  759
  760                          On receipt of an initiate acknowledgement, KNS$RECV
  761                          moves this value to KN$NETPARM.RECTYPE prior to calling
  762                          LDCT.USER_ENTRY$ with the INIT_ACK function.
  763
  764                          Used only for FEP to FEP connections; KIS$RECV
  765                          ignores this field.
  766                          */
  767
  768                          /*K* DATA_HDR.LENGTH - UBIN(18)-host; UBIN(16)-fep.
  769
  770                          Contains the byte size of all user data that follows
  771                          the session header.
  772                          */
  773      %MEND;
  774
  775
  776
  777
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        22   
  778
  779
  780
  781                          /*F* NAME: K$SQDP_TERM - QDP Terminate Session Header
  782
  783                          The K$SQDP_TERM macro generates the structure
  784                          for the QDP Terminate Connection message header.
  785
  786                          K$SQDP_TERM contains the following:
  787                          */
  788
  789
  790      %MACRO K$SQDP_TERM (NAME=K$SQDP_TERM,
  791                      ALGN=,
  792                      LVL=1,
  793                      LAST(YES=";",NO=",",ANY)=";",
  794                      HOST_TYPE(STANDARD=0,UNPACKED=1,ANY)=0,
  795                      STCLASS=BASED);
  796
  797
  798      %LSET LISTDIR='0'B;
  799      %LSET LISTEXP='1'B;
  800      %LSET LISTCOM='0'B;
  801      %LSET LISTSUB='1'B;
  802      %LSET L6=BITBIN(MODE_FEP);
  803      %LSET ALG=TEXTCHAR(ALGN);
  804      %IF ALG = '';
  805      %LSET ALG=CONCAT(SUBSTR('D',L6),'ALIGNED');
  806      %ENDIF;
  807      %LSET ALG=CHARTEXT(ALG);
  808      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  809      %IF (SUBSTR(STR,0,6)='STATIC') OR
  810      (SUBSTR(STR,0,8)='CONSTANT') OR
  811      (SUBSTR(STR,0,3)='EXT');
  812      %LSET INIT=CHARTEXT('INIT');
  813      %LSET EINIT=CHARTEXT('');
  814      %ELSE;
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        23   
  815      %LSET INIT=CHARTEXT('/*');
  816      %LSET EINIT=CHARTEXT('*/');
  817      %ENDIF;
  818
  819              %K$SQDP_HDR(NAME=NAME,ALGN=ALGN,LVL=LVL,STCLASS=STCLASS,
  820              HOST_TYPE=HOST_TYPE, LAST=NO);
  821                          /*K* LDCT - UBIN(18)-host; UBIN(16)-fep.
  822                          Contains the destination LDCTX.
  823                          */
  824
  825                          /*K* CNTRL - BIT(2)-host; BIT(1)-fep.
  826                          Set to non-zero to indicate this is a control type
  827                          message.
  828                          */
  829
  830                          /*K* TYPE - UBIN(18)-host; UBIN(16)-fep.
  831                          Contains the value K_SQDP_TERM (3) that indicates
  832                          this is an initiate session connection message.
  833                          */
  834              %K$RLCID (NAME=RLCID,LVL=2,STCLASS=STCLASS,HOST_TYPE=HOST_TYPE,LAST=NO);
  835                          /*K* RLCID - UBIN(36)-host; UBIN(32)-fep.
  836                          Identifies the LDCT associated with the endpoint
  837                          to be disconnected.
  838
  839                          KNS$SEND builds this from FPT_TERM.RLCID.
  840
  841                          Used only for FEP to FEP connections; KIS$RECV
  842                          ignores this field.
  843                          */
  844
  845      %IF (HOST_TYPE=0);
  846            2 REASON UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  847      %ELSE;
  848            2 REASON UBIN(%(18-L6*2)) CALIGNED %INIT(0)%EINIT,
  849
  850            2 REASON_UNPK REDEF REASON,
  851              3 * BIT(1) UNAL,
15:03 JUL 28 '97 K_QDPHDRS_M.:E05SI                                        24   
  852              3 HIBYTE UBIN(8) UNAL,
  853              3 * BIT(1) UNAL,
  854              3 LOBYTE UBIN(8) UNAL,
  855
  856            2 REASON_PK REDEF REASON,
  857              3 * BIT(2) UNAL,
  858              3 HIBYTE UBIN(8) UNAL,
  859              3 LOBYTE UBIN(8) UNAL,
  860      %ENDIF;
  861                          /*K* REASON - UBIN(18)-host; UBIN(16)-fep.
  862                          On the host this is set from K$RWPARM.ERR.
  863
  864                          On the fep this is set from FPT_TERM.REASON:
  865
  866                          .xeq KNH_MACRO_C FPT_TERM REASON
  867                          */
  868              %K$SQDP_TRLR (NAME=DATA_HDR,LVL=2,STCLASS=STCLASS,HOST_TYPE=HOST_TYPE,LAST=LAST);
  869
  870                          /*K* DATA_HDR.TYPE - UBIN(18)-host; UBIN(16)-fep.
  871                          Set from K$RWPARM.RECTYPE on the host and passed
  872                          passed to the application layer entry (LDCT.USER_ENTRY)
  873                          on the fep in KN$NETPARM.RECTYPE.
  874                          */
  875
  876                          /*K* DATA_HDR.LENGTH - UBIN(18)-host; UBIN(16)-fep.
  877                          Contains the byte size of the user data;
  878                          from KN$NETPARM.UHDRSZ if fep, or from
  879                          K$RWPARM.UHDRSZ if host.
  880                          */
  881      %MEND;

