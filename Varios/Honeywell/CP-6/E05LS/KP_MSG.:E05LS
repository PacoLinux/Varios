

14:51 JUL 28 '97 KP_MSG.:E05SI                                             1    
    1      /*M*     KP_MSG    Structures for msgs to/from the host */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*F*     NAME:          KP_MSG
    8               PURPOSE:       Structures for the msgs to/from the host
    9      */
   10      /**/
   11      /*  NOTE:  These structures must be essentially byte-oriented.  This is       */
   12      /*         forced by the 8/9-bit conversion when passing messages between     */
   13      /*         HOST and FEP.                                                      */
   14      /**/
   15      %MACRO KP$MSG (NAME = KP$MSG,
   16                     INCL_DATA(NO='0'B,YES='1'B)='1'B,
   17                     STCLASS = BASED);
   18      DCL 1 NAME STCLASS WALIGNED,
   19            2 HEAD CALIGNED,                  /* Message header, always present     */
   20              3 MSG_TYPE UBIN BYTE CALIGNED,  /* Msg type                           */
   21              3 DRIVE_NO UBIN BYTE CALIGNED,  /* Drive number                       */
   22              3 IOTYPE UBIN BYTE CALIGNED,    /* 1=DIAGNOSTIC, 2=DELETED, 0=NORMAL  */
   23              3 OPERATION_STATUS UBIN BYTE CALIGNED, /* Status of this operation    */
   24              3 DEV_STATUS CALIGNED,          /* Status from the drive              */
   25                4 HOB UBIN BYTE CALIGNED,
   26                4 LOB UBIN BYTE CALIGNED,
   27              3 NUM_BYTES CALIGNED,           /* Number of bytes in the TDATA       */
   28                                              /* field.  For 'write data', this     */
   29                                              /* is to be size of data to write.    */
   30                                              /* For 'read data', this is size of   */
   31                                              /* data to read.                      */
   32                4 HOB UBIN BYTE CALIGNED,
   33                4 LOB UBIN BYTE CALIGNED,
   34              3 SIDE UBIN BYTE CALIGNED,      /* Side code:  0=normal, 1=extra      */
   35              3 TRACK_NO UBIN BYTE CALIGNED,  /* Track address                      */
   36              3 SECTOR_NO UBIN BYTE CALIGNED, /* Sector address                     */
   37              3 SEC_SIZE UBIN BYTE CALIGNED,  /* Sector size, 0=128, 1=256          */
14:51 JUL 28 '97 KP_MSG.:E05SI                                             2    
   38              3 RETRIES UBIN BYTE CALIGNED,   /* NUMBER OF RE-TRIES IT TOOK TO WORK */
   39              3 CMDSPEC1 UBIN BYTE CALIGNED,  /* COMMAND-SPECIFIC #1                */
   40              3 * UBIN BYTE CALIGNED,         /* *SPARE*                            */
   41              3 * CHAR(03) CALIGNED           /* SPARE, !!! TO INSURE TDATA ALIGNED */
   42      %IF INCL_DATA;
   43            ,
   44            2 TDATA(0:%(KP_BLOCK_SIZE#-1)) UBIN BYTE CALIGNED, /* Data for transfer */
   45            2 TDATA_C REDEF TDATA CHAR(%KP_BLOCK_SIZE#) CALIGNED,
   46            2 VINIT_RQS REDEF TDATA CALIGNED,
   47              3 SECTOR_HI UBIN BYTE CALIGNED,
   48              3 TRACK_HI UBIN BYTE CALIGNED,
   49              3 SIDE_HI UBIN BYTE CALIGNED,
   50              3 SPARE CHAR(%(KP_BLOCK_SIZE#-3)) CALIGNED,
   51            2 CHECK_RSP REDEF TDATA CALIGNED,
   52              3 DRIVE(0:%KP_MAX_DRIVE#) CALIGNED,
   53                4 NUMBER UBIN BYTE CALIGNED,
   54                4 OPERATION_STATUS UBIN BYTE CALIGNED,
   55                4 DEV_STATUS CALIGNED,
   56                  5 HOB UBIN BYTE CALIGNED,
   57                  5 LOB UBIN BYTE CALIGNED,
   58                4 TYPE,
   59                  5 HOB UBIN BYTE CALIGNED,
   60                  5 LOB UBIN BYTE CALIGNED,
   61                4 CHAN,
   62                  5 HOB UBIN BYTE CALIGNED,
   63                  5 LOB UBIN BYTE CALIGNED,
   64              3 SPARE CHAR(%(KP_BLOCK_SIZE#-8*(KP_MAX_DRIVE#+1))) CALIGNED,
   65            2 CER2_RQS REDEF TDATA CALIGNED,
   66              3 SECTOR_HI UBIN BYTE CALIGNED,
   67              3 SIDE_HI UBIN BYTE CALIGNED,
   68              3 TRACK_HI UBIN BYTE CALIGNED,
   69              3 SPARE CHAR(%(KP_BLOCK_SIZE#-3)) CALIGNED,
   70            2 CER2_RSP REDEF TDATA CALIGNED,
   71              3 PRINTTHROUGH UBIN BYTE CALIGNED,
   72              3 CROSSTALK UBIN BYTE CALIGNED,
   73              3 SPARE CHAR(%(KP_BLOCK_SIZE#-2)) CALIGNED ,
   74            2 CLONE_RQS REDEF TDATA CALIGNED,
14:51 JUL 28 '97 KP_MSG.:E05SI                                             3    
   75              3 SECTOR_HI UBIN BYTE CALIGNED,
   76              3 SIDE_HI UBIN BYTE CALIGNED,
   77              3 TRACK_HI UBIN BYTE CALIGNED,
   78              3 DEST_DRIVE UBIN BYTE CALIGNED,
   79              3 SPARE CHAR(%(KP_BLOCK_SIZE#-4)) CALIGNED,
   80            2 CRTFY_RQS REDEF TDATA CALIGNED,
   81              3 SECTOR_HI UBIN BYTE CALIGNED,
   82              3 SPARE CHAR(%(KP_BLOCK_SIZE#-1)) CALIGNED,
   83            2 CRTFY_RSP REDEF TDATA CALIGNED,
   84              3 VINIT_RETRIES UBIN BYTE CALIGNED,
   85              3 WRITE_RETRIES UBIN BYTE CALIGNED,
   86              3 READ_RETRIES UBIN BYTE CALIGNED,
   87              3 READ_DATA_ERRORS UBIN BYTE CALIGNED,
   88              3 SPARE CHAR(%(KP_BLOCK_SIZE#-4)) CALIGNED ;
   89      %ELSE;
   90            ;
   91      %ENDIF;
   92      %MEND;

