

15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      %MACRO CTEXT(NAME="*",SIZE=0,STRING="'*'",LAST=",");
    7            2 NAME     ALIGNED,
    8              3 *           UBIN( 9)  UNAL           INIT(SIZE),
    9              3 *           CHAR( SIZE)  UNAL           INIT(STRING)LAST
   10      %MEND;
   11      %MACRO HTEXT(NAME="*",SIZE=0,STRING="'*'",LAST=",");
   12            2 NAME     ALIGNED,
   13              3 *           UBIN(18)  UNAL           INIT(SIZE),
   14              3 *           CHAR( SIZE)  UNAL           INIT(STRING)LAST
   15      %MEND;
   16      %MACRO WTEXT(NAME="*",SIZE=0,STRING="'*'",LAST=",");
   17            2 NAME     ALIGNED,
   18              3 *           UBIN(36)  UNAL           INIT(SIZE),
   19              3 *           CHAR( SIZE)  UNAL           INIT(STRING)LAST
   20      %MEND;
   21      %MACRO T$H;
   22      %LSET LISTDIR='0'B;
   23      %LSET LISTMAC='1'B;
   24      %BANNER(ARG=T$H);
   25      %T$H_;
   26      %MEND;
   27      %MACRO T$H_;
   28      DCL 1 T$H           BASED     ALIGNED,  /* Text half-word                     */
   29            2 COUNT        UBIN(18) UNAL,
   30            2 CHARS        CHAR( T$H.COUNT )   UNAL;
   31      %MEND;
   32      %MACRO T$C;
   33      %LSET LISTDIR='0'B;
   34      %LSET LISTEXP='1'B;
   35      %LSET LISTMAC='1'B;
   36      %BANNER(ARG=T$C);
   37      %T$C_;
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         2    
   38      %MEND;
   39      %MACRO T$C_;
   40      DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
   41            2 COUNT        UBIN( 9) UNAL,
   42            2 CHARS        CHAR( T$C.COUNT )   UNAL;
   43      DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
   44            2 COUNT        UBIN( 9) UNAL,
   45            2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
   46      %MEND;
   47      %MACRO TXT$H;
   48      DCL 1 TEXT$H          BASED ALIGNED,
   49            2 COUNT        UBIN(18) UNAL,
   50            2 CHARS(0:0)   CHAR(1) UNAL;
   51      %MEND;
   52      %MACRO TXT$C;
   53      DCL 1 TEXT$C          BASED ALIGNED,
   54            2 COUNT        UBIN(9)  UNAL,
   55            2 CHARS(0:0)   CHAR(1)  UNAL;
   56      %MEND;
   57      %MACRO MAK_DEF(
   58            NAME="*",
   59            NAME1="*",          INIT1="0",
   60            NAME2="*",          INIT2="0",
   61            NAME3="*",          INIT3="0",
   62            NAME4="*",          INIT4="0",
   63            NAME5="*",          INIT5="0",
   64            NAME6="*",          INIT6="0",
   65                                                    LAST=",");
   66            2 NAME                   ALIGNED,
   67              3 NAME1       UBIN(18)  UNAL      INIT(INIT1),
   68              3 NAME2       UBIN(18)  UNAL      INIT(INIT2),
   69              3 NAME3       UBIN(18)  UNAL      INIT(INIT3),
   70              3 NAME4       UBIN(18)  UNAL      INIT(INIT4),
   71              3 NAME5       UBIN(18)  UNAL      INIT(INIT5),
   72              3 NAME6       UBIN(18)  UNAL      INIT(INIT6)LAST
   73      %MEND;
   74      %MACRO BAN_NER( ARG=ARG, SPACEVALUE=1 );
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         3    
   75      %LSET LISTDIR='0'B;
   76      %LSET LISTSUB='1'B;
   77      %LSET LISTEXP='1'B;
   78      %SPACE SPACEVALUE;
   79      %CHARTEXT('/*')******************************************************************************
   80      *                                                                              *
   81      *                          ARG                                                 *
   82      *                                                                              *
   83      ******************************************************************************%CHARTEXT('*/')
   84      %SPACE SPACEVALUE;
   85      %MEND;
   86      %MACRO BANNER(ARG= ,SPACEVALUE=1);
   87      %LSET LISTDIR='0'B;
   88      %LSET LISTMAC='1'B;
   89      %BAN_NER(ARG=ARG,SPACEVALUE=SPACEVALUE);
   90      %MEND;
   91      %MACRO B;
   92      %LSET LISTDIR='0'B;
   93      %LSET LISTMAC='1'B;
   94      %BAN_NER(ARG=BIT,SPACEVALUE=1);
   95      %MEND;
   96      %MACRO C;
   97      %LSET LISTDIR='0'B;
   98      %LSET LISTMAC='1'B;
   99      %BAN_NER(ARG=CHAR,SPACEVALUE=1);
  100      %MEND;
  101      %MACRO E;
  102      %LSET LISTDIR='0'B;
  103      %LSET LISTMAC='1'B;
  104      %BAN_NER(ARG=ENTRY,SPACEVALUE=1);
  105      %MEND;
  106      %MACRO P;
  107      %LSET LISTDIR='0'B;
  108      %LSET LISTMAC='1'B;
  109      %BAN_NER(ARG=PARAMETERS,SPACEVALUE=1);
  110      %MEND;
  111      %MACRO PTR;
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         4    
  112      %LSET LISTDIR='0'B;
  113      %LSET LISTMAC='1'B;
  114      %BAN_NER(ARG=PTR,SPACEVALUE=1);
  115      %MEND;
  116      %MACRO S;
  117      %LSET LISTDIR='0'B;
  118      %LSET LISTMAC='1'B;
  119      %BAN_NER(ARG=SBIN,SPACEVALUE=1);
  120      %MEND;
  121      %MACRO U;
  122      %LSET LISTDIR='0'B;
  123      %LSET LISTMAC='1'B;
  124      %BAN_NER(ARG=UBIN,SPACEVALUE=1);
  125      %MEND;
  126      %MACRO R;
  127      %LSET LISTDIR='0'B;
  128      %LSET LISTMAC='1'B;
  129      %BAN_NER(ARG="REF'S",SPACEVALUE=1);
  130      %MEND;
  131      %MACRO INDEX;
  132      DCL I          UBIN(36) ALIGNED AUTO;
  133      DCL SI REDEF I SBIN WORD ALIGNED;
  134      DCL J          UBIN(36) ALIGNED AUTO;
  135      DCL SJ REDEF J SBIN WORD ALIGNED;
  136      DCL K          UBIN(36) ALIGNED AUTO;
  137      DCL SK REDEF K SBIN WORD ALIGNED;
  138      DCL L          UBIN(36) ALIGNED AUTO;
  139      DCL SL REDEF L    SBIN WORD ALIGNED;
  140      %MEND;
  141      %MACRO POINTER;
  142      DCL P$         PTR       ALIGNED AUTO;
  143      DCL Q$         PTR       ALIGNED AUTO;
  144      DCL R$         PTR       ALIGNED AUTO;
  145      %MEND;
  146      %MACRO VX$NODE(NAME=VX$NODE,STCLASS=BASED);
  147      %LSET LISTDIR='0'B;
  148      %LSET LISTEXP='1'B;
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         5    
  149      %LSET LISTMAC='1'B;
  150      %BANNER(ARG=NAME);
  151      %VX$NODE_(NAME=NAME,STCLASS=STCLASS);
  152      %SPACE 1;
  153      %MEND;
  154
  155      %MACRO VX$NODE_(NAME=VX$NODE, STCLASS=BASED);
  156      %LSET LISTDIR='0'B;
  157      %LSET LISTEXP='1'B;
  158      %LSET LISTSUB='1'B;
  159      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  160      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
  161      %LSET INIT1=CHARTEXT('INIT');
  162      %LSET INIT2=CHARTEXT(' ');
  163      %ELSE;
  164      %LSET INIT1=CHARTEXT('/*');
  165      %LSET INIT2=CHARTEXT('*/');
  166      %ENDIF;
  167      DCL 1 NAME      ALIGNED    STCLASS,
  168            2 SON$ PTR %INIT1(ADDR(NIL))%INIT2, /* Son pointer                      */
  169            2 BROTHER$ PTR %INIT1(ADDR(NIL))%INIT2, /* Brother pointer              */
  170            2 FATHER$ PTR %INIT1(ADDR(NIL))%INIT2, /* Father pointer                */
  171            2 PATH$ PTR %INIT1(ADDR(NIL))%INIT2, /* Path   pointer                  */
  172            2 HEAD$       PTR %INIT1(ADDR(NIL))%INIT2, /* Head pointer to
  173                            to list of file nodes for this node            */
  174            2 TAIL$ PTR %INIT1(ADDR(NIL))%INIT2, /* Tail pointer to list            */
  175            2 SHARED_LIB_HEAD$ PTR %INIT1(ADDR(NIL))%INIT2, /* Head pointer to shared library list */
  176            2 LIB_HEAD$         PTR %INIT1(ADDR(NIL))%INIT2, /* Head pointer to list of shared libraries
  177                                        which have been mapped to included libraries */
  178            2 NUM          UBIN(36)  UNAL,    /* Node number                        */
  179            2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
  180            2 ADDR_START_A(0:@ROS) SBIN WORD %INIT1(0*3)%INIT2, /* Array            */
  181            2 ADDR_START REDEF  ADDR_START_A,
  182              3 RDATA       SBIN WORD,   /* First address for this node in data     */
  183              3 RPROC       SBIN WORD,   /* First address for this node in proc     */
  184              3 ROS       SBIN WORD,          /* Last address for program in ros    */
  185            2 ADDR_STOP_A(0:@ROS) SBIN WORD %INIT1(-1*3)%INIT2, /* Array            */
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         6    
  186            2 ADDR_STOP  REDEF  ADDR_STOP_A,
  187              3 RDATA       SBIN WORD,        /* Last address for this node in data */
  188              3 RPROC       SBIN WORD,        /* Last address for this node in proc */
  189              3 ROS       SBIN WORD,          /* Last address for program in ros    */
  190            2 START_PAGE#_A(0:@ROS) SBIN WORD %INIT1(0*3)%INIT2, /* Array           */
  191            2 START_PAGE# REDEF START_PAGE#_A,
  192              3 RDATA       SBIN WORD,   /* First page    for this node in data     */
  193              3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
  194              3 ROS       SBIN WORD,          /* First page   for program in ros    */
  195            2 STOP_PAGE#_A(0:@ROS) SBIN WORD %INIT1(-1*3)%INIT2, /* Array*/
  196            2 STOP_PAGE#  REDEF STOP_PAGE#_A,
  197              3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
  198              3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
  199              3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
  200            2 START_SC_ALL$ PTR %INIT1(ADDR(NIL))%INIT2, /* Starting pointer for common sections for this node */
  201            2 STOP_SC_ALL$ PTR %INIT1(ADDR(NIL))%INIT2, /* Stopping pointer for common sections for this node */
  202            2 L_START,
  203              3 SN$ PTR %INIT1(ADDR(NIL))%INIT2, /* Segment definition names        */
  204              3 DN$ PTR %INIT1(ADDR(NIL))%INIT2, /* Def names                       */
  205              3 RN$ PTR %INIT1(ADDR(NIL))%INIT2, /* Ref names                       */
  206              3 SC$ PTR %INIT1(ADDR(NIL))%INIT2, /* Sections                        */
  207              3 ED$ PTR %INIT1(ADDR(NIL))%INIT2, /* Entry defs*/
  208              3 ER$ PTR %INIT1(ADDR(NIL))%INIT2, /* Entry refs*/
  209              3 DD$ PTR %INIT1(ADDR(NIL))%INIT2, /* Data defs                       */
  210              3 DR$ PTR %INIT1(ADDR(NIL))%INIT2, /* Data refs                       */
  211              3 SD$ PTR %INIT1(ADDR(NIL))%INIT2, /* Seg defs                        */
  212              3 SR$ PTR %INIT1(ADDR(NIL))%INIT2, /* Seg refs                        */
  213            2 L_START_A$(0:9)     REDEF L_START PTR,
  214            2 L_STOP,
  215              3 SN$ PTR %INIT1(ADDR(NIL))%INIT2, /* Segment definition names        */
  216              3 DN$ PTR %INIT1(ADDR(NIL))%INIT2, /* Def names                       */
  217              3 RN$ PTR %INIT1(ADDR(NIL))%INIT2, /* Ref names                       */
  218              3 SC$ PTR %INIT1(ADDR(NIL))%INIT2, /* Sections                        */
  219              3 ED$ PTR %INIT1(ADDR(NIL))%INIT2, /* Entry defs*/
  220              3 ER$ PTR %INIT1(ADDR(NIL))%INIT2, /* Entry refs*/
  221              3 DD$ PTR %INIT1(ADDR(NIL))%INIT2, /* Data defs                       */
  222              3 DR$ PTR %INIT1(ADDR(NIL))%INIT2, /* Data refs                       */
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         7    
  223              3 SD$ PTR %INIT1(ADDR(NIL))%INIT2, /* Seg defs                        */
  224              3 SR$ PTR %INIT1(ADDR(NIL))%INIT2, /* Seg refs                        */
  225            2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
  226            2 L_SIZE,
  227              3 SN      UBIN %INIT1(0)%INIT2, /* Segment definition names           */
  228              3 DN      UBIN %INIT1(0)%INIT2, /* Def names                          */
  229              3 RN      UBIN %INIT1(0)%INIT2, /* Ref names                          */
  230              3 SC      UBIN %INIT1(0)%INIT2, /* Sections                           */
  231              3 ED      UBIN %INIT1(0)%INIT2, /* Entry defs*/
  232              3 ER      UBIN %INIT1(0)%INIT2, /* Entry refs*/
  233              3 DD      UBIN %INIT1(0)%INIT2, /* Data defs                          */
  234              3 DR      UBIN %INIT1(0)%INIT2, /* Data refs                          */
  235              3 SD      UBIN %INIT1(0)%INIT2, /* Seg defs                           */
  236              3 SR      UBIN %INIT1(0)%INIT2, /* Seg refs                           */
  237            2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
  238            2 L_PREV_SIZE,
  239              3 SN      UBIN %INIT1(0)%INIT2, /* Segment definition names           */
  240              3 DN      UBIN %INIT1(0)%INIT2, /* Def names                          */
  241              3 RN      UBIN %INIT1(0)%INIT2, /* Ref names                          */
  242              3 SC      UBIN %INIT1(0)%INIT2, /* Sections                           */
  243              3 ED      UBIN %INIT1(0)%INIT2, /* Entry defs*/
  244              3 ER      UBIN %INIT1(0)%INIT2, /* Entry refs*/
  245              3 DD      UBIN %INIT1(0)%INIT2, /* Data defs                          */
  246              3 DR      UBIN %INIT1(0)%INIT2, /* Data refs                          */
  247              3 SD      UBIN %INIT1(0)%INIT2, /* Seg defs                           */
  248              3 SR      UBIN %INIT1(0)%INIT2, /* Seg refs                           */
  249            2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
  250            2 BIT_MAP                ALIGNED,
  251              3 DATA                  ALIGNED,
  252                4 BITS(0:255)          BIT(1)    UNAL %INIT1('0'B*256)%INIT2,
  253              3 RPROC                 ALIGNED,
  254                4 BITS(0:255)          BIT(1)    UNAL %INIT1('0'B*256)%INIT2,
  255              3 ROS                   ALIGNED,
  256                4 BITS(0:255)          BIT(1)    UNAL %INIT1('0'B*256)%INIT2,
  257            2 L_SC_START,
  258              3 SC_BLK_COM$ PTR %INIT1(ADDR(NIL))%INIT2, /* Blank common            */
  259              3 SC_ROOT_LBL_COM$ PTR %INIT1(ADDR(NIL))%INIT2, /* Root labelled common */
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         8    
  260              3 SC_LBL_COM$ PTR %INIT1(ADDR(NIL))%INIT2, /* Labelled common         */
  261              3 SC_DCB$ PTR %INIT1(ADDR(NIL))%INIT2, /* Dcbs                        */
  262            2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
  263            2 L_SC_STOP,
  264              3 SC_BLK_COM$ PTR %INIT1(ADDR(NIL))%INIT2, /* Blank common            */
  265              3 SC_ROOT_LBL_COM$ PTR %INIT1(ADDR(NIL))%INIT2, /* Root labelled common */
  266              3 SC_LBL_COM$ PTR %INIT1(ADDR(NIL))%INIT2, /* Labelled common         */
  267              3 SC_DCB$ PTR %INIT1(ADDR(NIL))%INIT2, /* Dcbs                        */
  268            2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
  269            2 PROMOTE_HEAD,
  270              3 BLK_COM$              PTR %INIT1(ADDR(NIL))%INIT2,
  271              3 LBL_COM$              PTR %INIT1(ADDR(NIL))%INIT2,
  272            2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
  273            2 PROMOTE_TAIL,
  274              3 BLK_COM$              PTR %INIT1(ADDR(NIL))%INIT2,
  275              3 LBL_COM$              PTR %INIT1(ADDR(NIL))%INIT2,
  276            2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
  277            2 HAVE_ASL          BIT(1)    UNAL %INIT1('0'B)%INIT2,
  278            2 ALL_BLK_COM          BIT(1)    UNAL %INIT1('0'B)%INIT2,
  279            2 USE_NODE          BIT(1)    UNAL %INIT1('0'B)%INIT2,
  280            2 *                 BIT(33)   UNAL %INIT1('0'B)%INIT2,
  281            2 BLANK_COMMON$     PTR       ALIGNED %INIT1(ADDR(NIL))%INIT2;
  282      %MEND;
  283      %MACRO VX$LST( NAME=VX$LST, STCLASS=BASED );
  284      %LSET LISTDIR='0'B;
  285      %LSET LISTEXP='1'B;
  286      %LSET LISTMAC='1'B;
  287      %LSET LISTSUB='1'B;
  288      %BANNER(ARG=NAME);
  289      %VX$LST_( NAME=NAME, STCLASS=STCLASS );
  290      %MEND;
  291      %MACRO VX$LST_(NAME=NAME,STCLASS=STCLASS);
  292      DCL 1 NAME                          ALIGNED STCLASS,
  293            2 LINK$        PTR,               /* Link to next item                  */
  294            2 TYPE         UBIN( 18) UNAL,    /* Type                               */
  295            2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
  296            2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         9    
  297            2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
  298            2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
  299            2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
  300            2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
  301            2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
  302              3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
  303              3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
  304            2 P,
  305              3 NAME_       ALIGNED,
  306                4 BOUND      UBIN(20)  UNAL,
  307                4 FLAGSV     UBIN(11)  UNAL,
  308                4 *          BIT(5)    UNAL,
  309                4 NAME$      PTR,
  310              3 ACCT_       ALIGNED,
  311                4 BOUND      UBIN(20)  UNAL,
  312                4 FLAGSV     UBIN(11)  UNAL,
  313                4 *          BIT(5)    UNAL,
  314                4 ACCT$      PTR,
  315              3 PASS_       ALIGNED,
  316                4 BOUND      UBIN(20)  UNAL,
  317                4 FLAGSV     UBIN(11)  UNAL,
  318                4 *          BIT(5)    UNAL,
  319                4 PASS$      PTR,
  320              3 SN_         ALIGNED,
  321                4 BOUND      UBIN(20)  UNAL,
  322                4 FLAGSV     UBIN(11)  UNAL,
  323                4 *          BIT(5)    UNAL,
  324                4 SN$        PTR,
  325              3 WSN_        ALIGNED,
  326                4 BOUND      UBIN(20)  UNAL,
  327                4 FLAGSV     UBIN(11)  UNAL,
  328                4 *          BIT(5)    UNAL,
  329                4 WSN$       PTR,
  330              3 B           ALIGNED,
  331                4 RES        BIT(1)    UNAL,
  332                4 ASN        BIT(1)    UNAL,
  333                4 ACCT       BIT(1)    UNAL,
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         10   
  334                4 *          BIT(33)   UNAL,
  335              3 RES         CHAR(4)   ALIGNED,
  336              3 ASN         UBIN(36)  ALIGNED;
  337      %MEND;
  338      %MACRO VX$SECTNUM;
  339      %LSET LISTDIR='0'B;
  340      %LSET LISTMAC='1'B;
  341      %LSET LISTEXP='1'B;
  342      %LSET LISTSUB='1'B;
  343      %BANNER(ARG=VX$SECTNUM);
  344      %VX$SECTNUM_;
  345      %MEND;
  346      %MACRO VX$SECTNUM_;
  347      DCL 1 VX$SECTNUM ALIGNED BASED,
  348            2 NEXT$ PTR,
  349            2 SECT#    UBIN HALF HALIGNED,
  350            2 NPOINTER UBIN HALF HALIGNED,
  351            2 NODE#    UBIN HALF HALIGNED,
  352            2 RU_SECT# UBIN HALF HALIGNED;
  353      %MEND;
  354      %MACRO VX$ACCT;
  355      %LSET LISTDIR='0'B;
  356      %LSET LISTMAC='1'B;
  357      %LSET LISTEXP='1'B;
  358      %LSET LISTSUB='1'B;
  359      %BANNER(ARG=VX$ACCT);
  360      %VX$ACCT_;
  361      %MEND;
  362      %MACRO VX$ACCT_;
  363      DCL 1 VX$ACCT ALIGNED BASED,
  364            2 LINK$ PTR,
  365            2 ACCT_,
  366              3 * UBIN WORD,
  367              3 ACCT$ PTR,
  368            2 SN_,
  369              3 * UBIN WORD,
  370              3 SN$ PTR;
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         11   
  371      %MEND;
  372      %MACRO TMPLT;
  373      %LSET LISTDIR='0'B;
  374      %LSET LISTEXP='1'B;
  375      %LSET LISTMAC='1'B;
  376      %BANNER(ARG=TMPLT);
  377      %TMPLT_;
  378      %MEND;
  379      %MACRO TMPLT_;
  380      DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
  381            2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
  382            2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
  383            2 W       REDEF     A,            /* By name                            */
  384              3 WORD0       UBIN(36)  UNAL,   /* First word                         */
  385              3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
  386      %MEND;
  387      %MACRO VXD$TMPLT( EDEF(YES='1'B,NO='0'B)='0'B, SDEF(YES='1'B,NO='0'B)='0'B,
  388                        SEGDEF(YES='1'B,NO='0'B)='0'B );
  389      %LSET LISTDIR='0'B;
  390      %LSET LISTEXP='1'B;
  391      %LSET LISTSUB='1'B;
  392      %LSET LISTMAC='1'B;
  393      %BANNER(ARG=VXD$TMPLT);
  394      /*
  395                VXD$TMPLT (B$RU_DEF) is used to reference fields common to
  396                ENTDEFs, SYMDEFs and SEGDEFs.
  397      */
  398      %B$RU_DEF( NAME=VXD$TMPLT, STCLASS=BASED );
  399      %IF EDEF='1'B;
  400      %BANNER( ARG=B$EDEF );
  401      %B$EDEF;
  402      %ENDIF;
  403      %IF SDEF='1'B;
  404      %BANNER( ARG=B$SDEF );
  405      %B$SDEF;
  406      %ENDIF;
  407      %IF SEGDEF='1'B;
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         12   
  408      %BANNER( ARG=B$SEGDEF );
  409      %B$SEGDEF;
  410      %ENDIF;
  411      %MEND;
  412      /* Macro to generate a template for a 2-WORD nsa vector */
  413      %MACRO VECTOR(NAME=B$VECTOR,STCLASS=BASED,INT_U=" ",INT_B=" ");
  414      %LSET LISTDIR='0'B;
  415      %LSET LISTEXP='1'B;
  416      %LSET LISTMAC='1'B;
  417      %LSET LISTSUB='1'B;
  418      %BANNER(ARG=TEMPLATE FOR 2-WORD NSA VECTOR);
  419      %VECTOR_(NAME=NAME,STCLASS=STCLASS,INT_U=INT_U,INT_B=INT_B);
  420      %MEND;
  421      %MACRO VECTOR_(NAME=B$VECTOR,STCLASS=BASED,INT_U=" ",INT_B=" ");
  422      DCL 1 NAME STCLASS ALIGNED,
  423            2 VSIZE UBIN(20) UNAL INT_U,      /* Size field of vector               */
  424            2 FLAGS BIT(9) UNAL INT_B,        /* FLAGS...                           */
  425            2 V BIT(2) UNAL INT_B,            /* Vector type field                  */
  426            2 Z5 BIT(5) UNAL INT_B,           /* Unused                             */
  427            2 F,
  428              3 BASE UBIN(20) UNAL INT_U,     /* Base for vector                    */
  429              3 Z4 BIT(4) UNAL INT_B,         /* Unused                             */
  430              3 SEGID UBIN(12) UNAL INT_U,    /* Segid                              */
  431            2 P       REDEF     F,            /* To extract the pointer             */
  432              3 POINTER          PTR UNAL;
  433      %MEND;
  434      %MACRO ENTRIES;
  435      DCL VXE$ERROR       ENTRY(4);
  436      DCL VXE$ERR         ENTRY(3);
  437      DCL VXE$MERC        ENTRY;
  438      DCL VXE$ERRMSG      ENTRY(3);
  439      DCL VXR$READ        ENTRY( 3 );
  440      DCL VXW$WRITE       ENTRY( 3 );
  441      DCL VXW$WRITE_DO    ENTRY( 2 );
  442      DCL VXD$B2C         ENTRY( 5 );
  443      DCL VXD$C2B         ENTRY( 3 );
  444      DCL VXA$GET         ENTRY( 3 );
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         13   
  445      DCL VXF$FREE        ENTRY( 3 );
  446      DCL VXQ$SORT        ENTRY( 7 );
  447      DCL VXY$YESNO       ENTRY( 1 );
  448      %MEND;
  449      %MACRO FILE;
  450      DCL 1 F$NAME_                 BASED,
  451            2 COUNT             UBIN( 9) UNAL,
  452            2 CHARS             CHAR( F$NAME_.COUNT ) UNAL;
  453      DCL F$ACCT_         CHAR(@F_ACCT_SIZEC) BASED;
  454      DCL F$ACCT_A(0:@F_ACCT_SIZEC1)     CHAR(1)   BASED;
  455      DCL F$PASS_         CHAR(@F_PASS_SIZEC) BASED;
  456      DCL F$PASS_A(0:@F_PASS_SIZEC1)     CHAR(1)   BASED;
  457      %MEND;
  458      %MACRO O_KEY_BUF(
  459            KEYBUF=KEYBUF,
  460            STCLASS="STATIC",
  461            INT="  ");
  462      DCL 1 KEYBUF ALIGNED STCLASS,
  463             2 FORM0 ,
  464              3 COUNT       UBIN( 9)  UNAL INT,
  465              3 CHARS       CHAR(512) UNAL,
  466            2 FORM1        REDEF     FORM0,
  467              3 COUNT       UBIN( 9)  UNAL,
  468              3 O777        UBIN( 9)  UNAL,   /* <- '777'O                          */
  469              3 UTS         UBIN(36)  UNAL,
  470              3 REC_TYPE    UBIN( 9)  UNAL,
  471              3 PAGE#       UBIN( 9)  UNAL,
  472              3 *           CHAR(505) UNAL,
  473            2 FORM2        REDEF     FORM0,
  474              3 COUNT       UBIN( 9)  UNAL,
  475              3 O777        UBIN( 9)  UNAL,   /* <- '777'O                          */
  476              3 UTS         UBIN(36)  UNAL,
  477              3 D10         UBIN( 9)  UNAL,   /* <- 10                              */
  478              3 SECT#       UBIN(18)  UNAL,
  479              3 OFFSET      UBIN(18)  UNAL,
  480              3 STYPE       UBIN( 9)  UNAL,
  481              3 SEQUENCE    UBIN( 9)  UNAL,
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         14   
  482              3 *           CHAR(500) UNAL ;
  483            %MEND;
  484      %MACRO R_KEY_BUF(
  485            KEYBUF=KEYBUF,
  486            STCLASS="STATIC",
  487            INT=" ");
  488      DCL 1 KEYBUF                        STCLASS,
  489            2 FORM0                  ALIGNED,
  490              3 COUNT       UBIN( 9)  UNAL INT,
  491              3 CHARS       CHAR( 5)  UNAL,
  492              3 *           CHAR( 6)  UNAL,
  493            2 FORM1        REDEF     FORM0,
  494              3 COUNT       UBIN( 9)  UNAL,
  495              3 REC_TYPE    UBIN( 9)  UNAL,
  496              3 NODE#       UBIN(18)  UNAL,
  497              3 OFFSET      UBIN(18)  UNAL,
  498              3 *           CHAR( 6)  UNAL,
  499            2 FORM2        REDEF     FORM0,
  500              3 COUNT       UBIN( 9)  UNAL,
  501              3 O777        UBIN( 9)  UNAL,   /* <- '777'O                          */
  502              3 NODE#       UBIN(18)  UNAL,
  503              3 P_ENTDEF    UBIN(18)  UNAL,
  504              3 REC_TYPE    UBIN( 9)  UNAL,
  505              3 PAGE#       UBIN( 9)  UNAL,
  506              3 *           CHAR( 4)  UNAL;
  507            %MEND;
  508      %MACRO KEY_VARS(
  509            KEYVARS=KEYVARS,
  510            STCLASS=STATIC,
  511            INT_C=" ",
  512            INT1=" ",
  513            INT=" ");
  514      DCL 1 KEYVARS                  STCLASS,
  515            2 KFILE                  UBIN(36) ALIGNED INT,
  516            2 KTYPE                  SBIN WORD ALIGNED INT1,
  517            2 KRTYPE                 UBIN(36) ALIGNED INT,
  518            2 KPAGE#                 SBIN WORD ALIGNED INT1,
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         15   
  519            2 KOFSET                 UBIN(36) ALIGNED INT,
  520            2 KSTYPE                 UBIN(36) ALIGNED INT,
  521            2 KSEQUENCE              SBIN WORD ALIGNED INT1,
  522            2 KSECT#                 UBIN(36) ALIGNED INT,
  523            2 KNODE#                 UBIN(36) ALIGNED INT,
  524            2 KPEDX                  UBIN(36) ALIGNED INT,
  525            2 KATYPE                 SBIN WORD ALIGNED INT1,
  526            2 OUNAME,
  527              3 COUNT                 UBIN( 9) UNAL INT,
  528               3 CHARS             CHAR(31) UNAL INT_C,
  529            2 FILE                   ALIGNED,
  530              3 OFNAME                ALIGNED,
  531                4 COUNT                UBIN(9)   UNAL INT,
  532                4 CHARS                CHAR(40)  UNAL INT_C,
  533              3 RFNAME                ALIGNED,
  534                4 COUNT                UBIN(9)   UNAL INT,
  535                4 CHARS                CHAR(40)  UNAL INT_C;
  536      %MEND;
  537      %MACRO BIN_SEARCH_VARS(
  538            START$ = BIN_START$,
  539            STOP$ = BIN_STOP$,
  540            RESULT$ = BIN_RESULT$,
  541            N$ = BIN_N$,
  542            MATCH$ = BIN_MATCH$,
  543            NAME_DISP = BIN_NAME_DISP,
  544            SIZE = BIN_SIZE);
  545      DCL START$          PTR  ALIGNED   AUTO;
  546      DCL STOP$           PTR  ALIGNED   AUTO;
  547      DCL RESULT$         PTR  ALIGNED   AUTO;
  548      DCL N$              PTR  ALIGNED   AUTO;
  549      DCL MATCH$          PTR       ALIGNED   AUTO;
  550      DCL NAME_DISP       UBIN(36)  ALIGNED   AUTO;
  551      DCL SIZE            UBIN(36)  ALIGNED   AUTO;
  552      %MEND;
  553      %MACRO BIN_SEARCH_TEMPS(
  554            LOW = BIN_LOW,
  555            HIGH = BIN_HIGH,
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         16   
  556            START1$ = BIN_START1$,
  557            MID = BIN_MID,
  558            NTEMP$ = BIN_NTEMP$);
  559      DCL LOW             UBIN(36)  ALIGNED AUTO;
  560      DCL HIGH            UBIN(36)  ALIGNED AUTO;
  561      DCL MID             UBIN(36)  ALIGNED AUTO;
  562      DCL NTEMP$          PTR        ALIGNED AUTO;
  563      DCL START1$         PTR       ALIGNED AUTO;
  564      %MEND;
  565      %MACRO BIN_SEARCH(
  566            RESULT$ = BIN_RESULT$,
  567            N$    = BIN_N$,
  568            NAME_DISP = BIN_NAME_DISP,
  569            START$ = BIN_START$,
  570            STOP$ = BIN_STOP$,
  571            SIZE = BIN_SIZE,
  572            MATCH$ = BIN_MATCH$,
  573            TRADE_OFF_POINT = 17,
  574            ADDITIVE=" ",
  575            FOUND = BIN_FOUND,
  576            ALTRETURN = BIN_ALTRETURN,
  577            EMPTY = BIN_EMPTY,
  578            SPLIT = BIN_SPLIT,
  579            CHECK = BIN_CHECK,
  580            NEG=%@COMMENT,
  581            GEN=%@TNEMMOC,
  582            LOW = BIN_LOW,
  583            HIGH = BIN_HIGH,
  584            START1$ = BIN_START1$,
  585            MID = BIN_MID,
  586            NTEMP$ = BIN_NTEMP$);
  587            %LSET LISTMAC = '1'B ;
  588              IF START$ = ADDR(NIL) THEN GOTO EMPTY;
  589              IF POFFW( STOP$, START$ ) / SIZE < TRADE_OFF_POINT THEN DO;
  590                 RESULT$ = START$;            /* Sequential search                  */
  591                 DO WHILE( RESULT$ <= STOP$ );
  592                    NTEMP$ = PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE );
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         17   
  593                    IF NTEMP$ -> B$DNAME.TEXT
  594                      >=
  595                      MATCH$ -> B$DNAME.TEXT THEN DO;
  596                       IF NTEMP$ -> B$DNAME.TEXT
  597                         =
  598                         MATCH$ -> B$DNAME.TEXT THEN GOTO FOUND;
  599                       ELSE GOTO ALTRETURN;
  600                       END;
  601                    RESULT$ = PINCRW( RESULT$, SIZE );
  602                    END;                      /* Do while                           */
  603                 GOTO ALTRETURN;
  604                 END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
  605              ELSE DO;                        /* Binary search                      */
  606                 LOW = 0;
  607                 HIGH = POFFW( STOP$, START$ ) / SIZE + 2;
  608                 START1$ = PINCRW( START$, -SIZE );
  609      SPLIT:     ;
  610                 MID = ( LOW + HIGH ) / 2;
  611                 RESULT$ = PINCRW( START1$, MID*SIZE );
  612                 NTEMP$ = PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE );
  613                 IF NTEMP$ -> B$DNAME.TEXT
  614                   <
  615                   MATCH$ -> B$DNAME.TEXT THEN DO;
  616                    LOW = MID;
  617                    GOTO CHECK;
  618                    END;
  619                 IF NTEMP$ -> B$DNAME.TEXT
  620                   >
  621                   MATCH$ -> B$DNAME.TEXT THEN DO;
  622                    HIGH = MID;
  623      CHECK:        ;
  624                    IF LOW + 1    < HIGH THEN GOTO SPLIT;
  625                                              /* Here => looping or not found       */
  626                                    /* Result -> < match => a boundary condition    */
  627                    NEG
  628                      IF PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE ) -> B$DNAME.TEXT
  629                      <
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         18   
  630                      MATCH$ -> B$DNAME.TEXT THEN RESULT$ = PINCRW( RESULT$, SIZE );
  631                    GEN
  632                      GOTO ALTRETURN;
  633                    END;
  634                 END;                         /* Else do;                           */
  635      FOUND:
  636      /* Here -> found */
  637      %MEND;
  638      %MACRO CHECK( SEV = SEV );
  639              IF VX_ERR_SEV < SEV THEN VX_ERR_SEV = SEV;
  640      %MEND;
  641
  642      %MACRO SCREAM( ERR#=0, LEVEL=@E$S_VX, MID=@E$DEFAULT_MID_VX, AUX=0 );
  643              CALL VXE$ERROR( ERR#, LEVEL, AUX, MID );
  644      %MEND;
  645
  646      %MACRO ERRMSG ( ERR#=0, LEVEL=0, MID='E', DCB#=NIL,
  647                      FCG='VX', MON(YES='1'B,NO='0'B)='0'B, SEV=0 );
  648
  649      %LSET LISTDIR='0'B;
  650      %LSET FCG#=CONCAT(SUBBIT(ASCBIT(SUBSTR(FCG,0,1)),3,6),SUBBIT(ASCBIT(SUBSTR(FCG,1,1)),3,6));
  651      %LSET MID#=SUBBIT(ASCBIT(MID),3,6);
  652      %LSET ERROR#=BINBIT(ERR#,14);
  653      %LSET SEV#=BINBIT(SEV,3);
  654      %LSET ERR_CODE=CONCAT(%(FCG#),%(MID#),MON,%(ERROR#),%(SEV#));
  655
  656            CALL VXE$ERRMSG( %(ERR_CODE), LEVEL, DCBNUM(DCB#) );
  657
  658      %MEND;
  659
  660      %MACRO NUMBER(
  661                NUM1="VX_DUMMY",
  662                NUM2="VX_DUMMY",
  663                NUM3="VX_DUMMY",
  664                BUF1 ="VX_EFIELD1.CHARS_A",
  665                BUF2 ="VX_EFIELD2.CHARS_A",
  666                BUF3 ="VX_EFIELD3.CHARS_A",
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         19   
  667                SIZE1=2,SIZE2=2,SIZE3=2,
  668                BASE1 = 10,
  669                BASE2 = 10,
  670                BASE3 = 10 );
  671      %@COMMENT
  672            SIZE1 SIZE2 SIZE3
  673      %@TNEMMOC
  674              %LSET STR = CONCAT( TEXTCHAR(NUM1), '        ' );
  675              %IF (SUBSTR( STR, 0, 8 ) ~= 'VX_DUMMY');
  676              CALL VXD$B2C( BUF1, 0, -1, NUM1, BASE1 );
  677              %ENDIF;
  678              %LSET STR = CONCAT( TEXTCHAR(NUM2), '        ' );
  679              %IF (SUBSTR( STR, 0, 8 ) ~= 'VX_DUMMY');
  680              CALL VXD$B2C( BUF2, 0, -2, NUM2, BASE2 );
  681              %ENDIF;
  682              %LSET STR = CONCAT( TEXTCHAR(NUM3), '        ' );
  683              %IF (SUBSTR( STR, 0, 8 ) ~= 'VX_DUMMY');
  684              CALL VXD$B2C( BUF3, 0, -3, NUM3, BASE3 );
  685              %ENDIF;
  686      %MEND;
  687              %MACRO IMAGE_BUFFERS(
  688                NAME=VX_IMAGE,
  689                STCLASS=STATIC,
  690                INT_PTR=" ",
  691                INT_UBIN=" ",
  692                INT_SBIN=" ");
  693      DCL 1 NAME           ALIGNED        STCLASS,
  694            2 CPAGE#_A(0:1) SBIN WORD ALIGNED INT_SBIN, /* Current page # in buffer # */
  695            2 CPAGE# REDEF CPAGE#_A,
  696              3 BUF0                  SBIN WORD ALIGNED,
  697              3 BUF1                  SBIN WORD ALIGNED,
  698            2 START_A$(0:1) PTR ALIGNED INT_PTR, /* Pointer to start of buffer #    */
  699            2 START$ REDEF START_A$,
  700              3 BUF0$                 PTR       ALIGNED,
  701              3 BUF1$                 PTR       ALIGNED,
  702            2 STOP_A$(0:1)           PTR       ALIGNED INT_PTR,
  703            2 STOP$  REDEF STOP_A$,           /* Pointer to end of buffer #         */
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         20   
  704              3 BUF0$                 PTR       ALIGNED,
  705              3 BUF1$                 PTR       ALIGNED,
  706            2 NODE_A$(0:1) PTR ALIGNED INT_PTR, /* Pointer to node  of buffer #     */
  707            2 NODE$  REDEF NODE_A$,
  708              3 BUF0$                 PTR       ALIGNED,
  709              3 BUF1$                 PTR       ALIGNED,
  710            2 BEGIN$                 PTR       ALIGNED,
  711            2 END$                   PTR       ALIGNED,
  712            2 SPAGE#                 UBIN(36)  ALIGNED INT_UBIN,
  713            2 EPAGE#                 UBIN(36)  ALIGNED INT_UBIN;
  714      %MEND;
  715      %MACRO BIT_MAP(
  716            NAME=VX_BIT_MAP,
  717            STCLASS=STATIC,
  718            INT_BIT=" ");
  719      DCL NAME(0:@MAX_IS_K1)         BIT(1)    UNAL STCLASS   INT_BIT;
  720      %MEND;
  721      %MACRO MOVE_TMPLT(
  722            TNAME = VX$TARGET_B,
  723            TCOUNT = VX_TARGET_COUNT,
  724            TSTCLASS ="BASED",
  725            SNAME = VX$SOURCE_B,
  726            SCOUNT = VX_SOURCE_COUNT,
  727            SSTCLASS ="BASED",
  728            TNAME_C = VX$TARGET_C,
  729            TCOUNT_C = VX_TARGET_COUNT,
  730            TSTCLASS_C ="BASED",
  731            SNAME_C = VX$SOURCE_C,
  732            SCOUNT_C = VX_SOURCE_COUNT,
  733            SSTCLASS_C ="BASED");
  734      DCL TNAME           BIT( TCOUNT ) ALIGNED    TSTCLASS;
  735      DCL SNAME           BIT( SCOUNT ) ALIGNED    SSTCLASS;
  736      DCL TNAME_C         CHAR( TCOUNT_C ) ALIGNED TSTCLASS_C;
  737      DCL SNAME_C         CHAR( SCOUNT_C ) ALIGNED SSTCLASS_C;
  738      %MEND;
  739      %MACRO ERROR_IT;
  740              CALL M$ERR;
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         21   
  741      %MEND;
  742              %MACRO ENTRIES_IO;
  743      DCL VXF$OPEN        ENTRY(3) ALTRET;
  744      DCL VXF$CLOSE       ENTRY(3);
  745      DCL VXU$PREAD       ENTRY(12);
  746      DCL VXK$KEY         ENTRY(4);
  747      DCL VXI$READ        ENTRY(4)  ALTRET;
  748      DCL VXI$WRITE       ENTRY(4)  ALTRET;
  749      %MEND;
  750      %MACRO VX$LLIST;
  751      %LSET LISTDIR='0'B;
  752      %LSET LISTEXP='1'B;
  753      %LSET LISTMAC='1'B;
  754      %BANNER(ARG=VX$LLIST);
  755      %VX$LLIST_;
  756      %MEND;
  757      %MACRO VX$LLIST_;
  758      DCL 1 VX$LLIST                BASED     ALIGNED,
  759            2 LINK$                  PTR  ALIGNED,
  760            2 ITEM$                  PTR  ALIGNED;
  761      %MEND;
  762      %MACRO VX$LLIST_SL;
  763      %LSET LISTDIR='0'B;
  764      %LSET LISTEXP='1'B;
  765      %LSET LISTMAC='1'B;
  766      %BANNER(ARG=VX$LLIST_SL);
  767      %VX$LLIST_SL_;
  768      %MEND;
  769      %MACRO VX$LLIST_SL_;
  770      DCL 1 VX$LLIST_SL             BASED     ALIGNED,
  771            2 LINK$                  PTR  ALIGNED,
  772            2 ITEM$                  PTR  ALIGNED,
  773            2 PRECEDENCE            UBIN WORD,
  774            2 NAME ,
  775              3 CNT UBIN BYTE UNAL,
  776              3 TXT CHAR(31);
  777      %MEND;
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         22   
  778      %MACRO VX$LLIST_SC(NAME=VX$LLIST_SC);
  779      %LSET LISTDIR='0'B;
  780      %LSET LISTEXP='1'B;
  781      %LSET LISTMAC='1'B;
  782      %BANNER(ARG=VX$LLIST_SC);
  783      %VX$LLIST_SC_(NAME=NAME);
  784      %MEND;
  785      %MACRO VX$LLIST_SC_(
  786            NAME=VX$LLIST_SC);
  787      DCL 1 NAME               BASED     ALIGNED,
  788            2 LINK$             PTR,
  789            2 BASE$             PTR,
  790            2 COUNT             UBIN(36);
  791      %MEND;
  792      %MACRO VX$WORD(PTR=" ");
  793      %LSET LISTDIR='0'B;
  794      %LSET LISTEXP='1'B;
  795      %LSET LISTMAC='1'B;
  796      %BANNER(ARG=VX$WORD);
  797      %VX$WORD_(PTR=PTR);
  798      %MEND;
  799      %MACRO VX$WORD_(PTR=" ");
  800      DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
  801      DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
  802      DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
  803      DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
  804      /**/
  805      DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
  806      DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
  807      DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
  808      DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
  809      %MEND;
  810      %MACRO VX$SC(LINK_NAME=VX$SC,EXTERNAL_NAME=VX$SECT);
  811      %LSET LISTDIR='0'B;
  812      %LSET LISTEXP='1'B;
  813      %LSET LISTMAC='1'B;
  814      %LSET LISTSUB='1'B;
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         23   
  815      %BANNER( ARG=VX$SC );
  816      %B$RUSECT( NAME=LINK_NAME );
  817      %BANNER( ARG=VX$SECT );
  818      %B$SECTION( NAME=EXTERNAL_NAME );
  819      %MEND;
  820      %MACRO MAK_DUP(PTR=PTR$);
  821              IF RTYPE ~= TYPEDEF AND WHICH$ -> VXD$TMPLT.CONSTNT THEN DO;
  822                 WHICH$ -> VXD$TMPLT.LFLAGS.MULTIPLE = @YES_B; /* Also here              */
  823                 END;
  824              ELSE DO;
  825                 WHICH$ -> VXD$TMPLT.AD.LFLAGS.MULTIPLE = @YES_B; /* Also here            */
  826                 END;
  827              SAVE_NAME_DISP = PTR -> VXD$TMPLT.NPOINTER;
  828              PTR -> VXD$TMPLT = WHICH$ -> VXD$TMPLT;
  829              PTR -> VXD$TMPLT.NPOINTER = SAVE_NAME_DISP;
  830      %MEND;
  831              %MACRO DUP_STATS;
  832              VX_ERRORS.MULTIPLE = VX_ERRORS.MULTIPLE + 1;
  833      %MEND;
  834      %MACRO VXR$TMPLT(NAME=VXR$TMPLT,
  835                       EREF(YES='1'B,NO='0'B)='0'B,
  836                       SREF(YES='1'B,NO='0'B)='0'B,
  837                       SEGREF(YES='1'B,NO='0'B)='0'B );
  838      %LSET LISTDIR='0'B;
  839      %LSET LISTEXP='1'B;
  840      %LSET LISTMAC='1'B;
  841      %LSET LISTSUB='1'B;
  842      %BANNER( ARG=VXR$TMPLT );
  843      %B$UNSATREF( NAME=NAME );
  844      %IF EREF='1'B;
  845      %BANNER( ARG=B$EREF );
  846      %B$EREF;
  847      %ENDIF;
  848      %IF SREF='1'B;
  849      %BANNER( ARG=B$SREF );
  850      %B$SREF;
  851      %ENDIF;
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         24   
  852      %IF SEGREF='1'B;
  853      %BANNER( ARG=B$SEGREF );
  854      %B$SEGREF;
  855      %ENDIF;
  856      %BANNER( ARG=VXR$SAT );
  857      DCL 1 VXR$SAT                 ALIGNED   BASED,
  858            2 VALUE        UBIN(36)  ALIGNED,
  859            2 SEG   REDEF  VALUE,
  860              3 OFFSET     UBIN(18)  UNAL,
  861              3 *          BIT(6)    UNAL,
  862              3 SEGID      UBIN(12)  UNAL,
  863            2 BELOW        BIT(1)    UNAL,
  864            2 *            BIT(17)   UNAL,
  865            2 NODE#        UBIN(18)  UNAL;
  866      %MEND;
  867      %MACRO SEQ_SEARCH_VARS(
  868                 START$ = SEQ_START$,
  869                 STOP$  = SEQ_STOP$,
  870                 NAME$ = SEQ_NAME$ );
  871      DCL START$                    PTR  ALIGNED   AUTO;
  872      DCL STOP$                     PTR  ALIGNED   AUTO;
  873      DCL NAME$                     PTR  ALIGNED   AUTO;
  874      %MEND;
  875      %MACRO SEQ_SEARCH_TEMPS(
  876            TEMP$ = SEQ_TEMP$,
  877            MATCH$ = SEQ_MATCH$);
  878      DCL TEMP$                     PTR  ALIGNED   AUTO;
  879      DCL MATCH$                    PTR  ALIGNED   AUTO;
  880      %MEND;
  881      %MACRO SEQ_SEARCH(
  882                 START$ = SEQ_START$,
  883                 STOP$  = SEQ_STOP$,
  884                 NAME$ = NAME$,
  885                 STR    = STR,
  886                 STRREF = STRREF,
  887                 MATCH$ = SEQ_MATCH$,
  888                 TEMP$=TEMP$,
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         25   
  889                 DO_CASE=" ",
  890                 CASE_TYPE=" ",
  891                 DO_END=" ",
  892                 NEG=%@COMMENT,
  893                 GEN=%@TNEMMOC,
  894                 EMPTY = EMPTY,
  895                 FOUND = SEQ_FOUND);
  896              TEMP$ = START$;
  897              IF TEMP$ = ADDR(NIL) THEN GOTO EMPTY;
  898              DO WHILE ( TEMP$  <= STOP$ );
  899                 DO_CASE
  900                   CASE_TYPE
  901                   NEG IF TEMP$ -> STRREF > 0 THEN GEN
  902                   IF PINCRW( NAME$, TEMP$  -> STRREF ) -> B$DNAME.TEXT
  903                   =
  904                   MATCH$ -> B$DNAME.TEXT THEN GOTO FOUND;
  905                 DO_END
  906                   TEMP$  = PINCRW( TEMP$,  SIZEW(STR) );
  907                 END;
  908      /* Here => not found */
  909      %MEND;
  910              %MACRO CC( LINES = 1 );
  911              VX_EBUF.CHARS = ' ';
  912              DO VX_DUMMY = 1 TO LINES;
  913                 CALL VXW$WRITE( VX_EBUF.CHARS, 2, 0 );
  914                 END;
  915      %MEND;
  916              %MACRO M_NUMBER_DCL(
  917                THREE$BITS=THREE$BITS,
  918                WORK_BUF=WORK_BUF,
  919                SIG=SIG,
  920                K_INDEX=K_INDEX,
  921                L_INDEX=L_INDEX);
  922      DCL THREE$BITS(0:11)          BIT(3)    UNAL BASED;
  923      DCL 1 WORK_BUF           ALIGNED   STATIC,
  924            2 COMPOSITE         ALIGNED,
  925              3 H                UBIN(6)   UNAL INIT( BITBIN('06'O) ),
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         26   
  926              3 UBN              UBIN(3)   UNAL,
  927            2 CHR REDEF COMPOSITE    CHAR(1) ALIGNED;
  928      DCL SIG                  BIT(1)    ALIGNED   STATIC    INIT('0'B);
  929      DCL K_INDEX              UBIN(36)  ALIGNED   AUTO;
  930      DCL L_INDEX              UBIN(36)  ALIGNED   AUTO;
  931      %MEND;
  932      %MACRO M_NUMBER(
  933                 VAR=VAR,
  934                 START=START,
  935                 FLD_SIZE=6,
  936                 THREE$BITS=THREE$BITS,
  937                 WORK_BUF=WORK_BUF,
  938                 SIG=SIG,
  939                 K_INDEX=K_INDEX,
  940                 L_INDEX=L_INDEX);
  941              VAR
  942                SIG ='0'B;
  943              DO K_INDEX = 0 TO FLD_SIZE -1 ;
  944                 L_INDEX = K_INDEX + START;
  945                 WORK_BUF.COMPOSITE.UBN = BITBIN( R$ -> THREE$BITS(K_INDEX) );
  946                 IF WORK_BUF.COMPOSITE.UBN = 0 THEN DO;
  947                    IF SIG THEN VX_MBUF.CHARS_A(L_INDEX) = '0'; /* Have significance start */
  948                    ELSE IF K_INDEX = FLD_SIZE - 1 THEN VX_MBUF.CHARS_A(L_INDEX) = '0';
  949                       ELSE VX_MBUF.CHARS_A(L_INDEX) =' ';
  950                    END;
  951                 ELSE DO;
  952                    SIG = '1'B;
  953                    VX_MBUF.CHARS_A(L_INDEX) = WORK_BUF.CHR;
  954                    END;
  955                 END;                         /* Do k = 0 to FLD_SIZE - 1 ;         */
  956      %MEND;
  957              %MACRO M_WRITE(
  958                             BEFORE=" ",
  959                             CLEAR="VX_MBUF.CHARS='A ';",
  960                             DIAG(YES='1'B,NO='0'B)='0'B,
  961                             ZERO="VX_CTAB=0;");
  962              BEFORE
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         27   
  963              CALL M$WRITE( VX_MAP_LO_FPT_WRITE)      ALTRET(MAP_IO_ERROR);
  964              %IF DIAG='1'B;
  965              IF VX_LO_DO_DIFFER THEN CALL M$WRITE(DIAG_FPT_WRITE) ALTRET(MAP_IO_ERROR);
  966              %ENDIF;
  967              CLEAR
  968              ZERO
  969      %MEND;
  970              %MACRO MOVE_NAME_DCL(
  971                                 T$VAR=T$VAR,
  972                                 MOVE_SIZE=MOVE_SIZE,
  973                                 SOURCE$=SOURCE$);
  974      DCL MOVE_SIZE           UBIN  ALIGNED   AUTO;
  975      DCL T$VAR             CHAR(MOVE_SIZE)   BASED;
  976      DCL SOURCE$              PTR  ALIGNED   AUTO;
  977      %MEND;
  978      %MACRO MOVE_NAME(
  979            SOURCE$ =SOURCE$,
  980            PTR$="P$ ->",
  981            NAME$=NAME$,
  982            TABBER=TABBER,
  983            REF1="VX$TMPLT.A(2)");
  984              SOURCE$ = PINCRW( NAME$, PTR$ REF1 );
  985              CALL INSERT(VX_MBUF.CHARS, TABBER, SOURCE$->B$DNAME.COUNT, SOURCE$->B$DNAME.TEXT);
  986      %MEND;
  987              %MACRO WR_LIT(DIAG(YES='1'B,NO='0'B)='0'B, MES1=MES1);
  988              VX_MAP_LIT_LO_FPT_WRITE.BUF_ = VECTOR( MES1 );
  989              CALL M$WRITE( VX_MAP_LIT_LO_FPT_WRITE ) ALTRET(MAP_IO_ERROR);
  990              %IF  DIAG='1'B;
  991              IF VX_LO_DO_DIFFER  THEN DO;
  992                  DIAG_LIT_FPT_WRITE.BUF_ = VECTOR( MES1 );
  993                  CALL M$WRITE( DIAG_LIT_FPT_WRITE ) ALTRET(MAP_IO_ERROR);
  994                  END;
  995              %ENDIF;
  996                %MEND;
  997              %MACRO BUMP_CTAB_DCL(
  998                LAST_TAB=LAST_TAB);
  999      DCL LAST_TAB             UBIN(36)  ALIGNED   AUTO;
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         28   
 1000      %MEND;
 1001      %MACRO BUMP_CTAB(
 1002                     TAB_A=VX_MAP_TABS_A,
 1003                     SPACE=11,
 1004                     INC=INC);
 1005              LAST_TAB = TAB_A(VX_CTAB) + INC + SPACE;
 1006              DO WHILE ( LAST_TAB > TAB_A( VX_CTAB ) );
 1007                 VX_CTAB = VX_CTAB + 1;
 1008                 END;
 1009      %MEND;
 1010              %MACRO MOVE_PAGE_DCL(
 1011                MOVE_PAGE_REMAIN=MOVE_PAGE_REMAIN,
 1012                MOVE_TARGET$=MOVE_TARGET$,
 1013                MOVE_ADR_TEMP=MOVE_ADR_TEMP,
 1014                MOVE_SRC$=MOVE_SRC$,
 1015                MOVE_TEMP=MOVE_TEMP);
 1016      DCL MOVE_PAGE_REMAIN          SBIN WORD ALIGNED   AUTO;
 1017      DCL MOVE_TARGET$              PTR       ALIGNED   AUTO;
 1018      DCL MOVE_ADR_TEMP             UBIN(36)  ALIGNED   AUTO;
 1019      DCL MOVE_SRC$                 PTR       ALIGNED   AUTO;
 1020      DCL MOVE_TEMP                 UBIN(36)  ALIGNED   AUTO;
 1021      %MEND;
 1022      %MACRO MOVE_PAGE(
 1023            MOVE_SOURCE$=MOVE_SOURCE$,
 1024            MOVE_UNIT=@BUF_SIZE,
 1025            MOVE_PAGE_SIZE=MOVE_PAGE_SIZE,
 1026            MOVE_TARGET$=MOVE_TARGET$,
 1027            MOVE_BUFTYP=MOVE_BUFTYP,
 1028            MOVE_ADR=MOVE_ADR,
 1029            MOVE_NODE#=MOVE_NODE#,
 1030            MOVE_PAGE_REMAIN=MOVE_PAGE_REMAIN,
 1031            MOVE_SRC$=MOVE_SRC$,
 1032            MOVE_TEMP=MOVE_TEMP);
 1033      /**/
 1034      /**/
 1035              MOVE_ADR_TEMP = MOVE_ADR;
 1036              MOVE_PAGE_REMAIN = MOVE_PAGE_SIZE;
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         29   
 1037              MOVE_SRC$ = MOVE_SOURCE$;
 1038              DO WHILE( MOVE_PAGE_REMAIN > 0 );
 1039                 IF MOVE_PAGE_REMAIN >= MOVE_UNIT THEN MOVE_TEMP = MOVE_UNIT;
 1040                 ELSE MOVE_TEMP = MOVE_PAGE_REMAIN;
 1041                 CALL VXU$SETUP( MOVE_TARGET$, MOVE_BUFTYP, MOVE_ADR_TEMP, MOVE_TEMP, MOVE_NODE# );
 1042                 VX_TARGET_COUNT = MOVE_TEMP * @CHAR_WORD;
 1043                 VX_SOURCE_COUNT = VX_TARGET_COUNT;
 1044                 MOVE_TARGET$ -> VX$TARGET_C = MOVE_SRC$ -> VX$SOURCE_C;
 1045                 MOVE_SRC$  = PINCRW( MOVE_SRC$,  MOVE_TEMP );
 1046                 MOVE_PAGE_REMAIN = MOVE_PAGE_REMAIN - MOVE_TEMP;
 1047                 MOVE_ADR_TEMP = MOVE_ADR_TEMP + MOVE_TEMP;
 1048                 END;
 1049      %MEND;
 1050              %MACRO TEXTC_SIZEW( CNT   = 0 );
 1051            ( CNT   + @CHAR_WORD ) / @CHAR_WORD
 1052      %MEND;
 1053              %MACRO TEXTH_SIZEW( CNT   = 0 );
 1054            ( CNT   + @CHAR_WORD + 1 ) / @CHAR_WORD
 1055      %MEND;
 1056      %MACRO VX$DCB;
 1057      %BANNER( ARG=VX$DCB );
 1058      %LIST;
 1059      DCL 1 VX$DCB                       ALIGNED   BASED,
 1060            2 * CHAR( VX_DCB_SIZEC);
 1061      /* End of actual DCB; now for NAME: Just one word in this description */
 1062      /* Dcb name description */
 1063      DCL 1 VX$DCB$T$C                   ALIGNED   BASED,
 1064            2 LOGICAL_DCB_NUM             UBIN(3)   UNAL,
 1065            2 INT                         BIT(1)    UNAL,      /* '1'=> no relocation
 1066                                                                      '0' => relocation */
 1067            2 COUNT                       UBIN(5)   UNAL,
 1068            2 CHARS                       CHAR( VX$DCB$T$C.COUNT ) UNAL;
 1069      %MEND;
 1070      %MACRO VX$PTR$;
 1071      DCL VX$PTR$(0:0)         PTR  ALIGNED   BASED( VX_SC_X_NODE$ );
 1072                                    /* Section allocated NODE# to node pointer map  */
 1073      %MEND;
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         30   
 1074      %MACRO VX$BREF(
 1075            NAME=VX$BREF,
 1076            PTR="(VX_NEXT_BREF$)");
 1077      DCL 1 NAME                    ALIGNED     BASED PTR,
 1078            2 WORD_A(0:1)       UBIN(36)  ALIGNED,
 1079            2 I  REDEF     WORD_A         ALIGNED,
 1080              3 WORD0            UBIN(36)  ALIGNED,
 1081              3 WORD1            UBIN(36)  ALIGNED;
 1082      %MEND;
 1083      %MACRO INHIBIT(
 1084            INDEX=INDEX,
 1085            GEN=" ",
 1086            NEG=" ");
 1087              GEN
 1088                IF VX_SPC.FAULT > 0 THEN VX_BIAS.I.DATA = VX_BIAS.I.DATA
 1089                -
 1090                @SPC_FAULT_AREA_SIZEW;
 1091              NEG
 1092                VX_SPC.FAULT = -1;
 1093              GEN
 1094                IF VX_SPC.TCBSIZE > 0 THEN VX_BIAS.I.DATA = VX_BIAS.I.DATA - VX_SPC.TCBSIZE;
 1095              NEG
 1096                VX_SPC.TCBSIZE = -1;
 1097              DO INDEX = 0 TO SIZEW( VX_SPC.B$.NAME_A$ ) - 1;
 1098                 GEN
 1099                   IF VX_SPC.B$.MINE_A( INDEX ) = 1 THEN DO;
 1100                 VX_BIAS.I.RPROC = VX_BIAS.I.RPROC - 1;
 1101                 NEG
 1102                   VX_SPC.B$.SKIP_A( INDEX ) = @YES;
 1103                 VX_SPC.B$.MINE_A( INDEX ) = @NO;
 1104                 GEN
 1105                   IF INDEX = 1 THEN DO;
 1106                 VX_BIAS.I.DATA = VX_BIAS.I.DATA - @SPC_DELTA_AREA_SIZEW;
 1107                 VX_SPC.DELTA_DATA_AREA = 0;
 1108                 END;
 1109              END;
 1110              NEG
15:21 JUL 28 '97 VX_MACRO_C.:E05SI                                         31   
 1111                END;
 1112              GEN
 1113                IF VX_BIAS.I.DATA < 0 THEN VX_BIAS.I.DATA = 0;
 1114              IF VX_BIAS.I.RPROC < 0 THEN VX_BIAS.I.RPROC = 0;
 1115              NEG
 1116      %MEND;
 1117              %MACRO ALLOCATE(
 1118                PTR$=PTR$,
 1119                TYPE=TYPE,
 1120                SIZE=SIZE);
 1121              IF SIZE <= VX_M_ALL(TYPE) - VX_M_FREE(TYPE) THEN DO;
 1122                 PTR$ = PINCRW( VX_M_BASE_PTR(TYPE), VX_M_FREE(TYPE) );
 1123                 VX_M_FREE(TYPE) = VX_M_FREE(TYPE) + SIZE;
 1124                 END;
 1125              ELSE CALL VXA$GET( PTR$, TYPE, SIZE );
 1126      %MEND;
 1127      %MACRO VX$VECTOR_LST;
 1128      %LSET LISTDIR='0'B;
 1129      %LSET LISTEXP='1'B;
 1130      %LSET LISTMAC='1'B;
 1131      %LSET LISTSUB='1'B;
 1132      %BANNER(ARG=VX$VECTOR_LST);
 1133      DCL 1 VX$VECTOR_LST ALIGNED BASED,
 1134            2 SIZEW1 UBIN HALF UNAL,
 1135            2 SIZEW2 UBIN HALF UNAL;
 1136      %MEND;

