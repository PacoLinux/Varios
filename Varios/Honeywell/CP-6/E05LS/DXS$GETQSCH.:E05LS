VERSION E05

PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:1    
        1        1        /*M* DXS$GETQSCH Setup to access in memory schema */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
        8        8        /*F* NAME: DXS$GETQSCH
        9        9             PURPOSE: To setup to access the schema specified by S_D.QSCH.
       10       10             DESCRIPTION: Searches the in memory schema directory for an entry
       11       11                          with the desired name pointer. Upon finding the entry
       12       12                          the pointers to the various debug records are setup.
       13       13                          D_QSCH$ is set to the address of the just located directory.
       14       14                          RETURNs when done if successful. ALTRETURNs if the directory
       15       15                          cannot be located, or the logical block record is too small. */
       16       16        /*D* NAME: DDS$GETQSCH
       17       17             CALL: CALL DDS$GETQSCH ALTRET( can't do );
       18       18             ENVIRONMENT: Xdelta.
       19       19             INPUT: S_D.QSCH - describes which schema to setup access to.
       20       20             OUTPUT: S_D.QSCH.OK - set if successful.
       21       21                     S_D.DBG$ - ptr to beginning of debug names page.
       22       22                     S_D.EXST$ - ptr to beginning of executable statements page.
       23       23                     S_D.IE$ - ptr to beginning of internal entrys page.
       24       24                     S_D.VREBL$ - ptr to beginning of variables page.
       25       25                     D_QSCH$ - ptr to im memory schema directory.
       26       26             SCRATCH: Local auto.
       27       27             DESCRIPTION: Searches the in memory schema directory for an entry
       28       28                          with the desired name pointer. Upon finding the entry
       29       29                          the pointers to the various debug records are setup.
       30       30                          D_QSCH$ is set to the address of the just located directory.
       31       31                          RETURNs when done if successful. ALTRETURNs if the directory
       32       32                          cannot be located, or the logical block record is too small. */
       33       33                                                /**/
       34       34        DDS$GETQSCH: PROC ALTRET;
       35       35                                                /**/
       36       36    1   DCL OUCNT UBIN;
       37       37    1   DCL PTR$ PTR;
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:2    
       38       38    1   DCL IX UBIN;
       39       39    1   DCL TEMP UBIN;
       40       40        %INCLUDE DD$BASED;
       41     1343        %DX$OUCNT;
       42     1348        %DX$SCHEMA;
       43     1362        %INCLUDE B$OBJECT_C;
       44     4792        %B$LBNTRY0;
       45     4828        %B$LBNTRY1;
       46     4855        %B$LOGBLK;
       47     4886        %B$EXST;
       48     4993        %B$INTNTRY;
       49     5051        %B$VREBL;
       50     5215    1   DCL D_SCHEMA$ PTR SYMREF;
       51     5216        %INCLUDE XUH_MACRO_C;
       52     5300        %INCLUDE DD_SD_M;
       53     6636        %S_D;
       54     7954                                                /**/
       55     7955                                                /* Initialization */
       56     7956    1        IF S_D.EDEF$ = ADDR( NIL )
       57     7957    1        THEN ALTRETURN;                    /* No ENTDEFs */
       58     7958    1        S_D.LB0$ = ADDR( NIL );
       59     7959    1        S_D.DBG$ = ADDR( NIL );
       60     7960    1        S_D.EXST$ = ADDR( NIL );
       61     7961    1        S_D.IE$ = ADDR( NIL );
       62     7962    1        S_D.VREBL$ = ADDR( NIL );
       63     7963                                                /* Get the name pointer */
       64     7964    1        IF S_D.QSCH.OK
       65     7965    1        THEN PTR$ = S_D.QSCH.PTR$;
       66     7966    2        ELSE DO;
       67     7967    2             OUCNT = D_SCHEMA$ -> DX$OUCNT.CNT;
       68     7968    2             PTR$ = PINCRW( D_SCHEMA$, SIZEW( DX$OUCNT ) );
       69     7969    3             DO IX = 1 TO OUCNT;
       70     7970    3                  IF S_D.QSCH.NPOINTER = PTR$ -> DX$SCH.NPOINTER
       71     7971    3                  THEN GOTO OUT;
       72     7972    3                  PTR$ = PINCRW( PTR$, SIZEW( DX$SCH ) );
       73     7973    3                END;
       74     7974    2             ALTRETURN;                    /* No name pointer */
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:3    
       75     7975    2   OUT:
       76     7976    2             TEMP = PTR$ -> DX$SCH.LBSIZ;
       77     7977    2             IF TEMP < SIZEW( B$LBNTRY0 ) + SIZEW( B$LBNTRY1 ) + SIZEW( B$LOGBLK )
       78     7978    2             THEN ALTRETURN;               /* Too small is not enough */
       79     7979                                                /* Got logical block record */
       80     7980    2             S_D.QSCH.OK = '1'B;
       81     7981    2             S_D.QSCH.PTR$ = PTR$;
       82     7982    2           END;
       83     7983    1        S_D.LB0$ = PTR$ -> DX$SCH.LB$;
       84     7984    1        S_D.LB1$ = PINCRW( S_D.LB0$, SIZEW( B$LBNTRY0 ) );
       85     7985    1        S_D.LB$ = PINCRW( S_D.LB1$, SIZEW( B$LBNTRY1 ) );
       86     7986    1        S_D.LB_EYOND$ = PINCRW( S_D.LB0$, TEMP );
       87     7987    1        IF PTR$ -> DX$SCH.IESIZ > 0
       88     7988    2        THEN DO;
       89     7989    2             S_D.IE$ = PTR$ -> DX$SCH.IE$;
       90     7990    2             S_D.IE_END$ = PINCRW( S_D.IE$, PTR$ -> DX$SCH.IESIZ - SIZEW( B$INTNTRY ) )
              7990                      ;
       91     7991    2           END;
       92     7992    1        IF PTR$ -> DX$SCH.STMTSIZ > 0
       93     7993    2        THEN DO;
       94     7994    2             S_D.EXST$ = PTR$ -> DX$SCH.STMT$;
       95     7995    2             S_D.EXST_END$ = PINCRW( S_D.EXST$, PTR$ -> DX$SCH.STMTSIZ - SIZEW( B$EXST
              7995                      ) );
       96     7996    2           END;
       97     7997    1        IF PTR$ -> DX$SCH.VRBLSIZ > 0
       98     7998    2        THEN DO;
       99     7999    2             S_D.VREBL$ = PTR$ -> DX$SCH.VRBL$;
      100     8000    2             S_D.VREBL_END$ = PINCRW( S_D.VREBL$, PTR$ -> DX$SCH.VRBLSIZ - SIZEW(
              8000                      B$VREBL ) );
      101     8001    2           END;
      102     8002    1        IF PTR$ -> DX$SCH.DNAMSIZ > 0
      103     8003    1        THEN S_D.DBG$ = PTR$ -> DX$SCH.DNAM$;
      104     8004    1        RETURN;
      105     8005                                                /**/
      106     8006    1   END DDS$GETQSCH;

PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:4    
--  Include file information  --

   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDS$GETQSCH.

   Procedure DDS$GETQSCH requires 93 words for executable code.
   Procedure DDS$GETQSCH requires 8 words of local(AUTO) storage.

    No errors detected in file DXS$GETQSCH.:E05TSI    .

PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:5    

 Object Unit name= DDS$GETQSCH                                File name= DXS$GETQSCH.:E05TOU
 UTS= JUL 29 '97 15:13:27.16 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    93    135  DDS$GETQSCH

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        0  DDS$GETQSCH

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     D_SCHEMA$                        r    S_D$                                  B_VECTNIL
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:6    


        1        1        /*M* DXS$GETQSCH Setup to access in memory schema */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
        8        8        /*F* NAME: DXS$GETQSCH
        9        9             PURPOSE: To setup to access the schema specified by S_D.QSCH.
       10       10             DESCRIPTION: Searches the in memory schema directory for an entry
       11       11                          with the desired name pointer. Upon finding the entry
       12       12                          the pointers to the various debug records are setup.
       13       13                          D_QSCH$ is set to the address of the just located directory.
       14       14                          RETURNs when done if successful. ALTRETURNs if the directory
       15       15                          cannot be located, or the logical block record is too small. */
       16       16        /*D* NAME: DDS$GETQSCH
       17       17             CALL: CALL DDS$GETQSCH ALTRET( can't do );
       18       18             ENVIRONMENT: Xdelta.
       19       19             INPUT: S_D.QSCH - describes which schema to setup access to.
       20       20             OUTPUT: S_D.QSCH.OK - set if successful.
       21       21                     S_D.DBG$ - ptr to beginning of debug names page.
       22       22                     S_D.EXST$ - ptr to beginning of executable statements page.
       23       23                     S_D.IE$ - ptr to beginning of internal entrys page.
       24       24                     S_D.VREBL$ - ptr to beginning of variables page.
       25       25                     D_QSCH$ - ptr to im memory schema directory.
       26       26             SCRATCH: Local auto.
       27       27             DESCRIPTION: Searches the in memory schema directory for an entry
       28       28                          with the desired name pointer. Upon finding the entry
       29       29                          the pointers to the various debug records are setup.
       30       30                          D_QSCH$ is set to the address of the just located directory.
       31       31                          RETURNs when done if successful. ALTRETURNs if the directory
       32       32                          cannot be located, or the logical block record is too small. */
       33       33                                                /**/
       34       34        DDS$GETQSCH: PROC ALTRET;

     34  0 000000   000000 700200 xent  DDS$GETQSCH  TSX0  ! X66_AUTO_0
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:7    
         0 000001   000010 000000                    ZERO    8,0

       35       35                                                /**/
       36       36    1   DCL OUCNT UBIN;
       37       37    1   DCL PTR$ PTR;
       38       38    1   DCL IX UBIN;
       39       39    1   DCL TEMP UBIN;
       40       40        %INCLUDE DD$BASED;
       41     1343        %DX$OUCNT;
       42     1348        %DX$SCHEMA;
       43     1362        %INCLUDE B$OBJECT_C;
       44     4792        %B$LBNTRY0;
       45     4828        %B$LBNTRY1;
       46     4855        %B$LOGBLK;
       47     4886        %B$EXST;
       48     4993        %B$INTNTRY;
       49     5051        %B$VREBL;
       50     5215    1   DCL D_SCHEMA$ PTR SYMREF;
       51     5216        %INCLUDE XUH_MACRO_C;
       52     5300        %INCLUDE DD_SD_M;
       53     6636        %S_D;
       54     7954                                                /**/
       55     7955                                                /* Initialization */
       56     7956    1        IF S_D.EDEF$ = ADDR( NIL )

   7956  0 000002   000000 470400 xsym               LDP0    S_D$
         0 000003   001042 236100                    LDQ     546,,PR0
         0 000004   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000005   000007 601000 0                  TNZ     s:7958

       57     7957    1        THEN ALTRETURN;                    /* No ENTDEFs */

   7957  0 000006   000000 702200 xent               TSX2  ! X66_AALT

       58     7958    1        S_D.LB0$ = ADDR( NIL );

   7958  0 000007   000001 236000 xsym               LDQ     B_VECTNIL+1
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:8    
         0 000010   001035 756100                    STQ     541,,PR0

       59     7959    1        S_D.DBG$ = ADDR( NIL );

   7959  0 000011   001005 756100                    STQ     517,,PR0

       60     7960    1        S_D.EXST$ = ADDR( NIL );

   7960  0 000012   001010 756100                    STQ     520,,PR0

       61     7961    1        S_D.IE$ = ADDR( NIL );

   7961  0 000013   001013 756100                    STQ     523,,PR0

       62     7962    1        S_D.VREBL$ = ADDR( NIL );

   7962  0 000014   001016 756100                    STQ     526,,PR0

       63     7963                                                /* Get the name pointer */
       64     7964    1        IF S_D.QSCH.OK

   7964  0 000015   000733 234100                    SZN     475,,PR0
         0 000016   000022 605000 0                  TPL     s:7967

       65     7965    1        THEN PTR$ = S_D.QSCH.PTR$;

   7965  0 000017   000741 236100                    LDQ     481,,PR0
         0 000020   200004 756100                    STQ     PTR$,,AUTO
         0 000021   000065 710000 0                  TRA     s:7983

       66     7966    2        ELSE DO;

       67     7967    2             OUCNT = D_SCHEMA$ -> DX$OUCNT.CNT;

   7967  0 000022   000000 471400 xsym               LDP1    D_SCHEMA$
         0 000023   100000 236100                    LDQ     0,,PR1
         0 000024   777777 376007                    ANQ     -1,DL
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:9    
         0 000025   200003 756100                    STQ     OUCNT,,AUTO

       68     7968    2             PTR$ = PINCRW( D_SCHEMA$, SIZEW( DX$OUCNT ) );

   7968  0 000026   000000 236000 xsym               LDQ     D_SCHEMA$
         0 000027   000001 036003                    ADLQ    1,DU
         0 000030   200004 756100                    STQ     PTR$,,AUTO

       69     7969    3             DO IX = 1 TO OUCNT;

   7969  0 000031   000001 235007                    LDA     1,DL
         0 000032   200005 755100                    STA     IX,,AUTO
         0 000033   000050 710000 0                  TRA     s:7973+3

       70     7970    3                  IF S_D.QSCH.NPOINTER = PTR$ -> DX$SCH.NPOINTER

   7970  0 000034   000000 470400 xsym               LDP0    S_D$
         0 000035   200004 471500                    LDP1    PTR$,,AUTO
         0 000036   000736 236100                    LDQ     478,,PR0
         0 000037   000042 604000 0                  TMI     s:7972
         0 000040   100000 116100                    CMPQ    0,,PR1
         0 000041   000054 600000 0                  TZE     OUT

       71     7971    3                  THEN GOTO OUT;
       72     7972    3                  PTR$ = PINCRW( PTR$, SIZEW( DX$SCH ) );

   7972  0 000042   200004 236100                    LDQ     PTR$,,AUTO
         0 000043   000013 036003                    ADLQ    11,DU
         0 000044   200004 756100                    STQ     PTR$,,AUTO

       73     7973    3                END;

   7973  0 000045   200005 235100                    LDA     IX,,AUTO
         0 000046   000001 035007                    ADLA    1,DL
         0 000047   200005 755100                    STA     IX,,AUTO
         0 000050   200003 236100                    LDQ     OUCNT,,AUTO
         0 000051   200005 116100                    CMPQ    IX,,AUTO
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:10   
         0 000052   000034 603000 0                  TRC     s:7970

       74     7974    2             ALTRETURN;                    /* No name pointer */

   7974  0 000053   000000 702200 xent               TSX2  ! X66_AALT

       75     7975    2   OUT:
       76     7976    2             TEMP = PTR$ -> DX$SCH.LBSIZ;

   7976  0 000054   100002 235100       OUT          LDA     2,,PR1
         0 000055   200006 755100                    STA     TEMP,,AUTO

       77     7977    2             IF TEMP < SIZEW( B$LBNTRY0 ) + SIZEW( B$LBNTRY1 ) + SIZEW( B$LOGBLK )

   7977  0 000056   000014 115007                    CMPA    12,DL
         0 000057   000061 603000 0                  TRC     s:7980

       78     7978    2             THEN ALTRETURN;               /* Too small is not enough */

   7978  0 000060   000000 702200 xent               TSX2  ! X66_AALT

       79     7979                                                /* Got logical block record */
       80     7980    2             S_D.QSCH.OK = '1'B;

   7980  0 000061   400000 236003                    LDQ     -131072,DU
         0 000062   000733 756100                    STQ     475,,PR0

       81     7981    2             S_D.QSCH.PTR$ = PTR$;

   7981  0 000063   200004 236100                    LDQ     PTR$,,AUTO
         0 000064   000741 756100                    STQ     481,,PR0

       82     7982    2           END;

       83     7983    1        S_D.LB0$ = PTR$ -> DX$SCH.LB$;

   7983  0 000065   200004 471500                    LDP1    PTR$,,AUTO
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:11   
         0 000066   100001 236100                    LDQ     1,,PR1
         0 000067   001035 756100                    STQ     541,,PR0

       84     7984    1        S_D.LB1$ = PINCRW( S_D.LB0$, SIZEW( B$LBNTRY0 ) );

   7984  0 000070   000004 036003                    ADLQ    4,DU
         0 000071   001036 756100                    STQ     542,,PR0

       85     7985    1        S_D.LB$ = PINCRW( S_D.LB1$, SIZEW( B$LBNTRY1 ) );

   7985  0 000072   000004 036003                    ADLQ    4,DU
         0 000073   001037 756100                    STQ     543,,PR0

       86     7986    1        S_D.LB_EYOND$ = PINCRW( S_D.LB0$, TEMP );

   7986  0 000074   001035 473500                    LDP3    541,,PR0
         0 000075   200006 720100                    LXL0    TEMP,,AUTO
         0 000076   300000 634510                    EPPR4   0,X0,PR3
         0 000077   001040 454500                    STP4    544,,PR0

       87     7987    1        IF PTR$ -> DX$SCH.IESIZ > 0

   7987  0 000100   100004 235100                    LDA     4,,PR1
         0 000101   000110 604400 0                  TMOZ    s:7992

       88     7988    2        THEN DO;

       89     7989    2             S_D.IE$ = PTR$ -> DX$SCH.IE$;

   7989  0 000102   100003 236100                    LDQ     3,,PR1
         0 000103   001013 756100                    STQ     523,,PR0

       90     7990    2            S_D.IE_END$ = PINCRW( S_D.IE$, PTR$ -> DX$SCH.IESIZ - SIZEW( B$INTNTRY ) )
              7990                      ;

   7990  0 000104   100004 236100                    LDQ     4,,PR1
         0 000105   001013 475500                    LDP5    523,,PR0
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:12   
         0 000106   577776 636506                    EPPR6   -2,QL,PR5
         0 000107   001014 456500                    STP6    524,,PR0

       91     7991    2           END;

       92     7992    1        IF PTR$ -> DX$SCH.STMTSIZ > 0

   7992  0 000110   100006 235100                    LDA     6,,PR1
         0 000111   000120 604400 0                  TMOZ    s:7997

       93     7993    2        THEN DO;

       94     7994    2             S_D.EXST$ = PTR$ -> DX$SCH.STMT$;

   7994  0 000112   100005 236100                    LDQ     5,,PR1
         0 000113   001010 756100                    STQ     520,,PR0

       95     7995    2             S_D.EXST_END$ = PINCRW( S_D.EXST$, PTR$ -> DX$SCH.STMTSIZ - SIZEW( B$EXST
              7995                      ) );

   7995  0 000114   100006 236100                    LDQ     6,,PR1
         0 000115   001010 475500                    LDP5    520,,PR0
         0 000116   577775 636506                    EPPR6   -3,QL,PR5
         0 000117   001011 456500                    STP6    521,,PR0

       96     7996    2           END;

       97     7997    1        IF PTR$ -> DX$SCH.VRBLSIZ > 0

   7997  0 000120   100010 235100                    LDA     8,,PR1
         0 000121   000130 604400 0                  TMOZ    s:8002

       98     7998    2        THEN DO;

       99     7999    2             S_D.VREBL$ = PTR$ -> DX$SCH.VRBL$;

   7999  0 000122   100007 236100                    LDQ     7,,PR1
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:13   
         0 000123   001016 756100                    STQ     526,,PR0

      100     8000    2             S_D.VREBL_END$ = PINCRW( S_D.VREBL$, PTR$ -> DX$SCH.VRBLSIZ - SIZEW(
              8000                      B$VREBL ) );

   8000  0 000124   100010 236100                    LDQ     8,,PR1
         0 000125   001016 475500                    LDP5    526,,PR0
         0 000126   577773 636506                    EPPR6   -5,QL,PR5
         0 000127   001017 456500                    STP6    527,,PR0

      101     8001    2           END;

      102     8002    1        IF PTR$ -> DX$SCH.DNAMSIZ > 0

   8002  0 000130   100012 235100                    LDA     10,,PR1
         0 000131   000134 604400 0                  TMOZ    s:8004

      103     8003    1        THEN S_D.DBG$ = PTR$ -> DX$SCH.DNAM$;

   8003  0 000132   100011 236100                    LDQ     9,,PR1
         0 000133   001005 756100                    STQ     517,,PR0

      104     8004    1        RETURN;

   8004  0 000134   000000 702200 xent               TSX2  ! X66_ARET
      105     8005                                                /**/
      106     8006    1   END DDS$GETQSCH;

PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:14   
--  Include file information  --

   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDS$GETQSCH.

   Procedure DDS$GETQSCH requires 93 words for executable code.
   Procedure DDS$GETQSCH requires 8 words of local(AUTO) storage.

    No errors detected in file DXS$GETQSCH.:E05TSI    .
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:15   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:16   
          MINI XREF LISTING

B$EXST
      4887**DCL      7995--ASSIGN
B$EXST.OU
      4896**DCL      4902--REDEF
B$INTNTRY
      4994**DCL      7990--ASSIGN
B$INTNTRY.OU
      4998**DCL      5005--REDEF
B$LBNTRY0
      4793**DCL      7977--IF       7984--ASSIGN
B$LBNTRY0.NO_AUTO
      4819**DCL      4824--REDEF
B$LBNTRY0.VERSION
      4808**DCL      4810--REDEF
B$LBNTRY1
      4829**DCL      7977--IF       7985--ASSIGN
B$LOGBLK
      4856**DCL      7977--IF
B$VREBL
      5052**DCL      8000--ASSIGN
B$VREBL.ADR
      5053**DCL      5065--REDEF
DX$OUCNT
      1344**DCL      7968--ASSIGN
DX$OUCNT.CNT
      1346**DCL      7967>>ASSIGN
DX$SCH
      1349**DCL      7972--ASSIGN
DX$SCH.DNAM$
      1359**DCL      8003>>ASSIGN
DX$SCH.DNAMSIZ
      1360**DCL      8002>>IF
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:17   
DX$SCH.IE$
      1353**DCL      7989>>ASSIGN
DX$SCH.IESIZ
      1354**DCL      7987>>IF       7990>>ASSIGN
DX$SCH.LB$
      1351**DCL      7983>>ASSIGN
DX$SCH.LBSIZ
      1352**DCL      7976>>ASSIGN
DX$SCH.NPOINTER
      1350**DCL      7970>>IF
DX$SCH.STMT$
      1355**DCL      7994>>ASSIGN
DX$SCH.STMTSIZ
      1356**DCL      7992>>IF       7995>>ASSIGN
DX$SCH.VRBL$
      1357**DCL      7999>>ASSIGN
DX$SCH.VRBLSIZ
      1358**DCL      7997>>IF       8000>>ASSIGN
D_SCHEMA$
      5215**DCL      7967>>ASSIGN   7968>>ASSIGN
IX
        38**DCL      7969<<DOINDEX
OUCNT
        36**DCL      7967<<ASSIGN   7969>>DOINDEX
OUT
      7976**LABEL    7971--GOTO
PTR$
        37**DCL      7965<<ASSIGN   7968<<ASSIGN   7970>>IF       7972<<ASSIGN   7972>>ASSIGN   7976>>ASSIGN
      7981>>ASSIGN   7983>>ASSIGN   7987>>IF       7989>>ASSIGN   7990>>ASSIGN   7992>>IF       7994>>ASSIGN
      7995>>ASSIGN   7997>>IF       7999>>ASSIGN   8000>>ASSIGN   8002>>IF       8003>>ASSIGN
S_D.CURRENT_CHANNEL
      7588**DCL      7590--REDEF
S_D.DBG$
      7038**DCL      7959<<ASSIGN   8003<<ASSIGN
S_D.DEBUGA
      6740**DCL      6742--REDEF
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:18   
S_D.EDEF$
      7084**DCL      7956>>IF
S_D.EIS
      7698**DCL      7727--REDEF
S_D.EXST$
      7044**DCL      7960<<ASSIGN   7994<<ASSIGN   7995>>ASSIGN
S_D.EXST_END$
      7046**DCL      7995<<ASSIGN
S_D.HOST_MESSAGE_BUF_REMOTE
      7631**DCL      7632--REDEF    7646--REDEF
S_D.IE$
      7050**DCL      7961<<ASSIGN   7989<<ASSIGN   7990>>ASSIGN
S_D.IE_END$
      7052**DCL      7990<<ASSIGN
S_D.JDE
      7245**DCL      7246--REDEF
S_D.L$.VALUE
      6798**DCL      6804--REDEF    6812--REDEF    6815--REDEF    6818--REDEF    6821--REDEF
S_D.L$.VALUE.L
      6799**DCL      6800--REDEF    6801--REDEF
S_D.L6_MESSAGE_BUF
      7652**DCL      7654--REDEF
S_D.LB$
      7078**DCL      7985<<ASSIGN
S_D.LB0$
      7074**DCL      7958<<ASSIGN   7983<<ASSIGN   7984>>ASSIGN   7986>>ASSIGN
S_D.LB1$
      7076**DCL      7984<<ASSIGN   7985>>ASSIGN
S_D.LB_EYOND$
      7080**DCL      7986<<ASSIGN
S_D.OUTPUT
      7618**DCL      7620--REDEF
S_D.QSCH.NPOINTER
      6950**DCL      7970>>IF
S_D.QSCH.OK
      6944**DCL      7964>>IF       7980<<ASSIGN
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:19   
S_D.QSCH.PTR$
      6956**DCL      7965>>ASSIGN   7981<<ASSIGN
S_D.REMOTE_MSG.FNCC
      7637**DCL      7638--REDEF
S_D.REMOTE_MSG.STXC
      7633**DCL      7634--REDEF
S_D.REMOTE_MSG.SUBFNCC
      7641**DCL      7642--REDEF
S_D.SV
      6697**DCL      6718--REDEF
S_D.VREBL$
      7056**DCL      7962<<ASSIGN   7999<<ASSIGN   8000>>ASSIGN
S_D.VREBL_END$
      7058**DCL      8000<<ASSIGN
S_D$
      7949**DCL      6645--IMP-PTR  7956>>IF       7958>>ASSIGN   7959>>ASSIGN   7960>>ASSIGN   7961>>ASSIGN
      7962>>ASSIGN   7964>>IF       7965>>ASSIGN   7970>>IF       7980>>ASSIGN   7981>>ASSIGN   7983>>ASSIGN
      7984>>ASSIGN   7984>>ASSIGN   7985>>ASSIGN   7985>>ASSIGN   7986>>ASSIGN   7986>>ASSIGN   7989>>ASSIGN
      7990>>ASSIGN   7990>>ASSIGN   7994>>ASSIGN   7995>>ASSIGN   7995>>ASSIGN   7999>>ASSIGN   8000>>ASSIGN
      8000>>ASSIGN   8003>>ASSIGN
TEMP
        39**DCL      7976<<ASSIGN   7977>>IF       7986>>ASSIGN
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:20   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DDS$GETQSCH File=DXS$GETQSCH.:E05TSI                          TUE 07/29/97 15:13 Page:21   
              MINI UREF LISTING

DDS$GETQSCH      34**PROC
