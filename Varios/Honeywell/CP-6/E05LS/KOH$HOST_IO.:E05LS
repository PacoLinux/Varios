VERSION E05

PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:1    
        1        1        /*M* KOH$HOST_IO - Code to perform HOST I/O for PIGLET                        */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        KOH$HOST_IO: PROC(FUNCTION) ALTRET;
        8        8        /**/
        9        9        /*  KOH$HOST_IO                                                               */
       10       10        /*   This routine performs all I/O dealing with the HOST.  The FUNCTION       */
       11       11        /*   parameter is required.  It indicates what we are to do.  The buffer      */
       12       12        /*   used for ALL host I/O operations is described by HOST_BUF.               */
       13       13        /*   As a result, you can't have a READ pending while you're doing            */
       14       14        /*   a write (currently)!                                                     */
       15       15        /*                                                                            */
       16       16        /*   One more little quirk:  M$READ/WAIT=NO is not currently implemented.     */
       17       17        /*   The closest we can come is getting an event on any state changes for the */
       18       18        /*   host-connected DCB.  So we get the event, if it says data available we   */
       19       19        /*   do a WAIT=YES READ in the event handler.                                 */
       20       20        /**/
       21       21        /**/
       22       22        /*  PARAMETERS  */
       23       23        /**/
       24       24    1   DCL FUNCTION SBIN WORD;
       25       25        /**/
       26       26        /*  INCLUDE FILES  */
       27       27        /**/
       28       28        %INCLUDE KO_DATA_R;
       29     3775        /**/
       30     3776        /*  CONSTANT DATA  */
       31     3777        /**/
       32     3778        %FPT_OPEN (FPTN = OPEN_HOST,
       33     3779                   ORG = CONSEC,
       34     3780                   RES = 'HO',
       35     3781                   ASN = DEVICE,
       36     3782                   DCB = M$HOST,
       37     3783                   EVENT = %EVENT_HOST_DONE#,
PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:2    
       38     3784                   STCLASS = CONSTANT);
       39     3812        %FPT_CLOSE (FPTN = CLOSE_HOST,
       40     3813                    DCB = M$HOST,
       41     3814                    STCLASS = CONSTANT);
       42     3834        /**/
       43     3835        /*  STATIC DATA  */
       44     3836        /**/
       45     3837        %FPT_READ (FPTN = READ_HOST,
       46     3838                   NODAT = YES,                 /*N* Until REAL events work           */
       47     3839                   DCB = M$HOST,
       48     3840                   STCLASS = STATIC);
       49     3866        %FPT_WRITE (FPTN = WRITE_HOST,
       50     3867                    TRANS = YES,
       51     3868                   DCB = M$HOST,
       52     3869                   EVENT = 0,
       53     3870                   STCLASS = STATIC);
       54     3894        /**/
       55     3895        /*  BASED DATA  */
       56     3896        /**/
       57     3897        %G$ROS;
       58     3941        %G$EXCFR;
       59     4323        /**/
       60     4324        /*  AUTO DATA  */
       61     4325        /**/
       62     4326    1   DCL BUF_ENTRY$ PTR AUTO;
       63     4327    1   DCL DATA_LEN_BYTES UBIN WORD;
       64     4328        /**/
       65     4329        /*  ENTRY DCLS  */
       66     4330        /**/
       67     4331        %KO_ENTRIES (OMIT=KOH$HOST_IO);
       68     4387        %EJECT;
PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:3    
       69     4388    2             DO CASE(FUNCTION);
       70     4389    2                CASE(%KOH_OPEN_HOST#);     /* OPEN connection to host            */
       71     4390    2                  CALL M$OPEN (OPEN_HOST) ALTRET(WERE_DOOMED);
       72     4391    2                CASE(%KOH_CLOSE_HOST#);    /* CLOSE connection to host           */
       73     4392    2                  CALL M$CLOSE (CLOSE_HOST) ALTRET(WERE_DOOMED);
       74     4393    2                CASE(%KOH_WRITE_HOST#);    /* Send buffer to host                */
       75     4394    2                  VBASE(WRITE_HOST.BUF_) = HOST_BUF$;
       76     4395    2                  VBOUND(WRITE_HOST.BUF_) = HOST_MES_LEN -1;
       77     4396    2                  CALL M$WRITE (WRITE_HOST) ALTRET(WERE_DOOMED);
       78     4397    2                CASE(%KOH_READ_HOST#);     /* Post WAIT=YES read for host        */
       79     4398    2                  VBASE(READ_HOST.BUF_) = HOST_BUF$;
       80     4399    2                  VBOUND(READ_HOST.BUF_) = HOST_LEN -1;
       81     4400    2                  CALL M$READ (READ_HOST) ALTRET(WERE_DOOMED);
       82     4401    2                CASE(ELSE);                /* Unknown operation code             */
       83     4402    2                  GOTO WERE_DOOMED;
       84     4403    2                END;                       /* END DO CASE ON FUNCTION            */
       85     4404    1             RETURN;
       86     4405        /**/
       87     4406    1   WERE_DOOMED: ;
       88     4407    1             MONERR = G$ROS$->G$ROS.TCB.ALT$->G$EXCFR.TRLR.ERR;
       89     4408    1             ALTRETURN;
       90     4409        /**/
       91     4410    1             END KOH$HOST_IO;

PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:4    
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KOH$HOST_IO.

   Procedure KOH$HOST_IO requires 102 words for executable code.
   Procedure KOH$HOST_IO requires 10 words of local(AUTO) storage.

    No errors detected in file KOH$HOST_IO.:E05TSI    .

PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:5    

 Object Unit name= KOH$HOST_IO                                File name= KOH$HOST_IO.:E05TOU
 UTS= JUL 30 '97 01:14:34.16 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   DCB   even  none     0      0  M$HOST
    1  RoData even  UTS     63     3F  KOH$HOST_IO
    2   Data  even  none    36     24  KOH$HOST_IO
    3   Proc  even  none   102     66  KOH$HOST_IO

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        1  KOH$HOST_IO

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X6A_AUTO_1
                       nStd      0 X6A_ARET
                       nStd      0 X6A_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KH_CHNHI                              KH_CHNLOW                             HOST_LEN
     HOST_MES_LEN                          HOST_BUF$                             MONERR
     G$ROS$                                M$HOST                           r    G$ROS$
PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:6    


        1        1        /*M* KOH$HOST_IO - Code to perform HOST I/O for PIGLET                        */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        KOH$HOST_IO: PROC(FUNCTION) ALTRET;

      7   3 000000  D380 0000 0000  xent KOH$HOST_IO     LNJ,B5   X6A_AUTO_1
          3 000003       000A 0001                       DC       10,1

        8        8        /**/
        9        9        /*  KOH$HOST_IO                                                               */
       10       10        /*   This routine performs all I/O dealing with the HOST.  The FUNCTION       */
       11       11        /*   parameter is required.  It indicates what we are to do.  The buffer      */
       12       12        /*   used for ALL host I/O operations is described by HOST_BUF.               */
       13       13        /*   As a result, you can't have a READ pending while you're doing            */
       14       14        /*   a write (currently)!                                                     */
       15       15        /*                                                                            */
       16       16        /*   One more little quirk:  M$READ/WAIT=NO is not currently implemented.     */
       17       17        /*   The closest we can come is getting an event on any state changes for the */
       18       18        /*   host-connected DCB.  So we get the event, if it says data available we   */
       19       19        /*   do a WAIT=YES READ in the event handler.                                 */
       20       20        /**/
       21       21        /**/
       22       22        /*  PARAMETERS  */
       23       23        /**/
       24       24    1   DCL FUNCTION SBIN WORD;
       25       25        /**/
       26       26        /*  INCLUDE FILES  */
       27       27        /**/
       28       28        %INCLUDE KO_DATA_R;
       29     3775        /**/
       30     3776        /*  CONSTANT DATA  */
       31     3777        /**/
       32     3778        %FPT_OPEN (FPTN = OPEN_HOST,
PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:7    
       33     3779                   ORG = CONSEC,
       34     3780                   RES = 'HO',
       35     3781                   ASN = DEVICE,
       36     3782                   DCB = M$HOST,
       37     3783                   EVENT = %EVENT_HOST_DONE#,
       38     3784                   STCLASS = CONSTANT);
       39     3812        %FPT_CLOSE (FPTN = CLOSE_HOST,
       40     3813                    DCB = M$HOST,
       41     3814                    STCLASS = CONSTANT);
       42     3834        /**/
       43     3835        /*  STATIC DATA  */
       44     3836        /**/
       45     3837        %FPT_READ (FPTN = READ_HOST,
       46     3838                   NODAT = YES,                 /*N* Until REAL events work           */
       47     3839                   DCB = M$HOST,
       48     3840                   STCLASS = STATIC);
       49     3866        %FPT_WRITE (FPTN = WRITE_HOST,
       50     3867                    TRANS = YES,
       51     3868                   DCB = M$HOST,
       52     3869                   EVENT = 0,
       53     3870                   STCLASS = STATIC);
       54     3894        /**/
       55     3895        /*  BASED DATA  */
       56     3896        /**/
       57     3897        %G$ROS;
       58     3941        %G$EXCFR;
       59     4323        /**/
       60     4324        /*  AUTO DATA  */
       61     4325        /**/
       62     4326    1   DCL BUF_ENTRY$ PTR AUTO;
       63     4327    1   DCL DATA_LEN_BYTES UBIN WORD;
       64     4328        /**/
       65     4329        /*  ENTRY DCLS  */
       66     4330        /**/
       67     4331        %KO_ENTRIES (OMIT=KOH$HOST_IO);
       68     4387        %EJECT;
PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:8    
       69     4388    2             DO CASE(FUNCTION);

   4388   3 000005  ECC7 0004                            LDB,B6   @FUNCTION,AUTO
          3 000007  B806                                 LDR,R3   ,B6
          3 000008  3D05                                 CMV,R3   5
          3 000009  0281 004A                            BGE      s:4402,PREL
          3 00000B  A830 0000 0011  03                   LDR,R2   s:4388+12,R3
          3 00000E  83A0 0000 0016  03                   JMP      s:4390,R2
          3 000011       003E                            DC       s:4402,PREL
          3 000012       0000                            DC       s:4390,PREL
          3 000013       0009                            DC       s:4392,PREL
          3 000014       0028                            DC       s:4398,PREL
          3 000015       0012                            DC       s:4394,PREL

       70     4389    2                CASE(%KOH_OPEN_HOST#);     /* OPEN connection to host            */

       71     4390    2                  CALL M$OPEN (OPEN_HOST) ALTRET(WERE_DOOMED);

   4390   3 000016  BB80 0000 0000  01                   LAB,B3   OPEN_HOST
          3 000019  B870 3540                            LDR,R3   13632,IMO
          3 00001B  0001                                 MCL
          3 00001C       003D                            DC       s:4400,PREL
          3 00001D  0F81 0038                            B        s:4404,PREL

       72     4391    2                CASE(%KOH_CLOSE_HOST#);    /* CLOSE connection to host           */

       73     4392    2                  CALL M$CLOSE (CLOSE_HOST) ALTRET(WERE_DOOMED);

   4392   3 00001F  BB80 0000 002F  01                   LAB,B3   CLOSE_HOST
          3 000022  B870 1541                            LDR,R3   5441,IMO
          3 000024  0001                                 MCL
          3 000025       0034                            DC       s:4400,PREL
          3 000026  0F81 002F                            B        s:4404,PREL

       74     4393    2                CASE(%KOH_WRITE_HOST#);    /* Send buffer to host                */

       75     4394    2                  VBASE(WRITE_HOST.BUF_) = HOST_BUF$;
PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:9    

   4394   3 000028  DC80 0000 0000  xsym                 LDB,B5   HOST_BUF$
          3 00002B  DF80 0000 0019  02                   STB,B5   WRITE_HOST+7

       76     4395    2                  VBOUND(WRITE_HOST.BUF_) = HOST_MES_LEN -1;

   4395   3 00002E  E800 0000 0000  xsym                 LDR,R6   HOST_MES_LEN
          3 000031  6EFF                                 ADV,R6   -1
          3 000032  EF00 0000 0018  02                   STR,R6   WRITE_HOST+6

       77     4396    2                  CALL M$WRITE (WRITE_HOST) ALTRET(WERE_DOOMED);

   4396   3 000035  BB80 0000 0012  02                   LAB,B3   WRITE_HOST
          3 000038  B870 1543                            LDR,R3   5443,IMO
          3 00003A  0001                                 MCL
          3 00003B       001E                            DC       s:4400,PREL
          3 00003C  0F81 0019                            B        s:4404,PREL

       78     4397    2                CASE(%KOH_READ_HOST#);     /* Post WAIT=YES read for host        */

       79     4398    2                  VBASE(READ_HOST.BUF_) = HOST_BUF$;

   4398   3 00003E  DC80 0000 0000  xsym                 LDB,B5   HOST_BUF$
          3 000041  DF80 0000 0007  02                   STB,B5   READ_HOST+7

       80     4399    2                  VBOUND(READ_HOST.BUF_) = HOST_LEN -1;

   4399   3 000044  E800 0000 0000  xsym                 LDR,R6   HOST_LEN
          3 000047  6EFF                                 ADV,R6   -1
          3 000048  EF00 0000 0006  02                   STR,R6   READ_HOST+6

       81     4400    2                  CALL M$READ (READ_HOST) ALTRET(WERE_DOOMED);

   4400   3 00004B  BB80 0000 0000  02                   LAB,B3   READ_HOST
          3 00004E  B870 1542                            LDR,R3   5442,IMO
          3 000050  0001                                 MCL
          3 000051       0008                            DC       s:4400,PREL
PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:10   
          3 000052  0F81 0003                            B        s:4404,PREL

       82     4401    2                CASE(ELSE);                /* Unknown operation code             */

       83     4402    2                  GOTO WERE_DOOMED;

   4402   3 000054  0F81 0004                            B        s:4400,PREL

       84     4403    2                END;                       /* END DO CASE ON FUNCTION            */

       85     4404    1             RETURN;

   4404   3 000056  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

   4400   3                              WERE_DOOMED     null
       86     4405        /**/
       87     4406    1   WERE_DOOMED: ;
       88     4407    1             MONERR = G$ROS$->G$ROS.TCB.ALT$->G$EXCFR.TRLR.ERR;

   4407   3 000059  EC80 0000 0000  xsym WERE_DOOMED     LDB,B6   G$ROS$
          3 00005C  DCC6 0004                            LDB,B5   4,B6
          3 00005E  8CC5 002B                            LDI      43,B5
          3 000060  8D00 0000 0000  xsym                 SDI      MONERR

       89     4408    1             ALTRETURN;

   4408   3 000063  C380 0000 0000  xent                 LNJ,B4   X6A_AALT
       90     4409        /**/
       91     4410    1             END KOH$HOST_IO;

PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:11   
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   G_ROS_M.:E05TOU  is referenced.
   KL_CONTROL_C.:E05TOU  is referenced.
   KH_MACRO_C.:E05TOU  is referenced.
   KH_CHN.:E05TOU  is referenced.
   KP_MSG.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KO_SUBS.:E05TOU  is referenced.
   KO_MACRO_C.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KO_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KOH$HOST_IO.
PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:12   

 **** Variables and constants ****

  ****  Section 001 RoData KOH$HOST_IO

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

    2F-0-0/w STRC(256)   r     1 CLOSE_HOST                 0-0-0/w STRC(752)   r     1 OPEN_HOST

  ****  Section 002  Data  KOH$HOST_IO

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(288)   r     1 READ_HOST                 12-0-0/w STRC(288)   r     1 WRITE_HOST

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @FUNCTION                 *0-0-0/w SBIN(16)    r     1 FUNCTION

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$ROS$                     0-0-0/w PTR         r     1 HOST_BUF$
     0-0-0/w SBIN(16)    r     1 HOST_LEN                   0-0-0/w SBIN(16)    r     1 HOST_MES_LEN
     0-0-0/w STRC(32)    r     1 MONERR

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:13   
     0-0-0/w STRC(736)   r     1 G$EXCFR                    0-0-0/w STRC(928)   r     1 G$ROS
     0-0-0N  NULL        r     1 M$HOST


   Procedure KOH$HOST_IO requires 102 words for executable code.
   Procedure KOH$HOST_IO requires 10 words of local(AUTO) storage.

    No errors detected in file KOH$HOST_IO.:E05TSI    .
PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:14   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:15   
          MINI XREF LISTING

CLOSE_HOST
      3827**DCL      4392<>CALL
CLOSE_HOST.V
      3832**DCL      3829--DCLINIT
FUNCTION
        24**DCL         7--PROC     4388>>DOCASE
G$EXCFR.P$$
      4010**DCL      4010--REDEF    4010--REDEF
G$EXCFR.PREVSZ
      3960**DCL      3960--REDEF
G$EXCFR.TRLR.ERR
      4290**DCL      4407>>ASSIGN
G$EXCFR.TRLR.EVID
      4247**DCL      4265--REDEF    4273--REDEF    4273--REDEF
G$EXCFR.TRLR.SUBC
      4224**DCL      4224--REDEF    4242--REDEF    4246--REDEF    4246--REDEF
G$ROS.AUTO_DS$
      3920**DCL      3921--REDEF
G$ROS.AUTO_T$
      3921**DCL      3921--REDEF
G$ROS.TCB.ALT$
      3916**DCL      4407>>ASSIGN
G$ROS$
      3774**DCL      4407>>ASSIGN
HOST_BUF$
      3401**DCL      3601--IMP-PTR  4394>>ASSIGN   4398>>ASSIGN
HOST_LEN
      3401**DCL      4399>>ASSIGN
HOST_MES_LEN
      3401**DCL      4395>>ASSIGN
KH_CHNHI
      3184**DCL      3185--REDEF
PL6.E3A0      #001=KOH$HOST_IO File=KOH$HOST_IO.:E05TSI                          WED 07/30/97 01:14 Page:16   
KH_CHNLOW
      3185**DCL      3186--REDEF
KP_MSG.TDATA
      3627**DCL      3628--REDEF    3629--REDEF    3634--REDEF    3648--REDEF    3653--REDEF    3657--REDEF
      3663--REDEF    3666--REDEF
M$CLOSE
       208**DCL-ENT  4392--CALL
M$OPEN
       208**DCL-ENT  4390--CALL
M$READ
       208**DCL-ENT  4400--CALL
M$WRITE
       209**DCL-ENT  4396--CALL
MONERR
      3471**DCL      4407<<ASSIGN
OPEN_HOST
      3797**DCL      4390<>CALL
OPEN_HOST.V
      3805**DCL      3799--DCLINIT
PIGLET_SEGMENT.BASE
      3521**DCL      3521--REDEF
READ_HOST
      3853**DCL      4400<>CALL
READ_HOST.BUF_
      3855**DCL      4398<<ASSIGN   4399<<ASSIGN
READ_HOST.V
      3858**DCL      3855--DCLINIT
WERE_DOOMED
      4400**LABEL    4390--CALLALT  4392--CALLALT  4396--CALLALT  4400--CALLALT  4402--GOTO
WRITE_HOST
      3883**DCL      4396<>CALL
WRITE_HOST.BUF_
      3885**DCL      4394<<ASSIGN   4395<<ASSIGN
WRITE_HOST.V
      3888**DCL      3885--DCLINIT
