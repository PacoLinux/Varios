

14:35 JUL 28 '97 GJ_MACROS_M.:E05SI                                        1    
    1      /*M* GJ_MACROS_M   LCP-6 Job Step Macros */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /*X*  MEC,MOC,EXM=20,CLM=30,CRM=100       */
    9
   10
   11
   12
   13
   14                          /*F*   NAME:  GJ_MACROS_M.
   15
   16                          The file GJ_MACROS_M contains the macro definitions
   17                          that are used to generate the data structures and
   18                          corresponding EQU statements that are used internally
   19                          by the LCP-6 Job Step modules.
   20
   21                          Macros contained in this file include the following:
   22                          }
   23                          } GJ_SFILE_TBL
   24                          } GJ_SFILE_PARAMS
   25                          } GJ_FID
   26                          } GJ_GETPROC_PARAMS
   27                          } GJ_READ_PARAMS
   28                          }
   29                          */
   30
   31
   32                          /*F* NAME: GJ_SFILE_TBL
   33
   34                          The GJ_SFILE_TBL is used to generate the data
   35                          required by the LCP-6 shared file logic that
   36                          is resident in the monitor instruction segment.
   37
14:35 JUL 28 '97 GJ_MACROS_M.:E05SI                                        2    
   38                          This macro may also be used to generate a BASED
   39                          structure that defines that data.  The pointer
   40                          at G$BOBCAT.SFDATA$ will contain the address of
   41                          this data.
   42
   43                          To generate the data in monitor static data the
   44                          only option to specify is TYPE=DATA.  To generate
   45                          a BASED structure of that data, TYPE=STRUCTURE should
   46                          be specified.
   47                          */
   48
   49
   50      %MACRO GJ_SFILE_TBL
   51        (TYPE(DATA='0'B,STRUCTURE='1'B,ANY)='0'B,
   52         STCLASS=BASED,
   53         FPTN=GJ$SFILE);
   54
   55      %LSET LISTDIR='0'B;
   56      %LSET LISTEXP='1'B;
   57      %LSET LISTCOM='1'B;
   58      %LSET LISTSUB='1'B;
   59
   60      %IF TYPE='1'B;
   61      DCL 1 FPTN STCLASS ALIGNED,
   62      %LSET LVL=CHARTEXT('2 ');
   63      %LSET INIT=CHARTEXT(',');
   64      %LSET PINIT=CHARTEXT(',');
   65      %LSET TERM=CHARTEXT(';');
   66
   67      %ELSE;
   68      %LSET LVL=CHARTEXT('DCL 1 GJ_SFILE_');
   69      %LSET INIT=CHARTEXT(' INIT(0) STATIC SYMDEF;');
   70      %LSET PINIT=CHARTEXT(' INIT(ADDR(NIL)) STATIC SYMDEF;');
   71      %LSET TERM=CHARTEXT(' INIT(0) STATIC SYMDEF;');
   72      %ENDIF;
   73
   74            %(LVL)START$ PTR CALIGNED%PINIT
14:35 JUL 28 '97 GJ_MACROS_M.:E05SI                                        3    
   75                          /*K* START$ - PTR.
   76                          Contains the address of the Shared File Table in
   77                          in the BOBCAT segment.  Set by BIGFOOT.
   78                          */
   79            %(LVL)CURR# UBIN(16) CALIGNED%INIT
   80                          /*K* CURR# - UBIN WORD.
   81                          Contains the number Shared File Table entries
   82                          currently in use.
   83                          */
   84            %(LVL)MAX# UBIN(16) CALIGNED%INIT
   85                          /*K* MAX# - UBIN WORD.
   86                          Contains the number of Shared File Table entries
   87                          in the BOBCAT segment.  Set by BIGFOOT.
   88                          */
   89            %(LVL)PEAK# UBIN(16) CALIGNED%INIT
   90                          /*K* PEAK# - UBIN WORD.
   91                          Contains the maximum number of Shared File Table
   92                          entries ever in use at any one time.
   93                          */
   94            %(LVL)LIB_DATA UBIN(16) CALIGNED%INIT
   95                          /*K* LIB_DATA - UBIN WORD.
   96                          Contains the number of pages currently being used
   97                          to cache the shared library data pages.
   98                          */
   99            %(LVL)CUR_DATA UBIN(16) CALIGNED%INIT
  100                          /*K* CUR_DATA - UBIN WORD.
  101                          Contains the number of pages currently being used
  102                          to cache the shared processor data pages.
  103                          */
  104            %(LVL)MAX_DATA UBIN(16) CALIGNED%INIT
  105                          /*K* MAX_DATA - UBIN WORD.
  106                          Contains the maximum number of pages that may be used
  107                          to cache the shared processor data pages.
  108                          */
  109            %(LVL)PEAK_DATA UBIN(16) CALIGNED%INIT
  110                          /*K* PEAK_DATA - UBIN WORD.
  111                          Contains the maximum number of pages ever used at
14:35 JUL 28 '97 GJ_MACROS_M.:E05SI                                        4    
  112                          any one time to cache the shared processor data pages.
  113                          */
  114            %(LVL)CUR_PROC UBIN(16) CALIGNED%INIT
  115                          /*K* CUR_PROC - UBIN WORD.
  116                          Contains the number of pages currently allocated
  117                          for shared processor procedure pages.  This count
  118                          does not include DELTA_F procedure pages.
  119                          */
  120            %(LVL)PEAK_PROC UBIN(16) CALIGNED%INIT
  121                          /*K* PEAK_PROC - UBIN WORD.
  122                          Contains the maximum number of pages ever used at
  123                          any one time to cache the shared processor procedure pages.
  124                          */
  125            %(LVL)FRQ UBIN(16) CALIGNED%INIT
  126                          /*K* FRQ - UBIN WORD.
  127                          Contains the minimum value of the frequency counter
  128                          that will cause a copy of the shared processor data
  129                          to be cached in memory.
  130                          */
  131            %(LVL)TBL_FULL UBIN(16) CALIGNED%INIT
  132                          /*K* TBL_FULL - UBIN WORD.
  133                          Contains the number of times the system was unable
  134                          to enter an Fprg in the Shared File Table because
  135                          all the entries were in use.
  136                          */
  137            %(LVL)REL_4MEM UBIN(16) CALIGNED%INIT
  138                          /*K* REL_4MEM - UBIN WORD.
  139                          Contains the number of times the system had to
  140                          release entries from the shared file table to
  141                          free the memory for other uses.
  142                          */
  143            %(LVL)REL_4SFILE UBIN(16) CALIGNED%TERM
  144                          /*K* REL_4SFILE - UBIN WORD.
  145                          Contains the number of times the system had to
  146                          release entries from the shared file table to
  147                          make a table entry available for another Fprg.
  148                          */
14:35 JUL 28 '97 GJ_MACROS_M.:E05SI                                        5    
  149      %MEND;
  150
  151
  152                          /*F* NAME: GJ_SFILE_PARAMS
  153
  154                          The GJ_SFILE_PARAMS macro generates the structure that
  155                          is used to communicate between the GJS$GETPROG module
  156                          and the GJS$SFILE routines.
  157
  158                          This structure contains the following:
  159                          */
  160
  161      %MACRO GJ_SFILE_PARAMS (FPTN=GJ_SFILE_PARAMS,
  162          OPEN(YES=1,NO=0,ANY)=1,
  163          GEN_EQUS(YES=1,NO=2,ANY)=1,
  164          STCLASS=AUTO,
  165          ALGN=WALIGNED);
  166
  167      %LSET LISTDIR='0'B;
  168      %LSET LISTEXP='1'B;
  169      %LSET LISTCOM='0'B;
  170      %LSET LISTSUB='1'B;
  171
  172      DCL 1 FPTN STCLASS ALGN,
  173            2 FID$ PTR,
  174                          /*K* FID$ - PTR.  Contains the address of the
  175                          structure that contains the file identifier of
  176                          the run-unit or the library.  See GJ_FID.
  177                          */
  178            2 FCN UBIN BYTE UNAL,
  179                          /*K* FCN - UBIN BYTE.  Contains a value to
  180                          indicate the action to be taken:
  181                          }
  182                          } GJ_FIND_PROC#  - Simply find the fid in the shared file
  183                          }                  table and return the index to it; don't
  184                          }                  associate it.
  185                          }
14:35 JUL 28 '97 GJ_MACROS_M.:E05SI                                        6    
  186                          } GJ_OPEN_PROC# -  Find the fid in the shared file tables
  187                          }                  and associate the file with this user.
  188                          }                  If it doesn't exist, begin the
  189                          }                  installation of it.
  190                          }
  191                          } GJ_CLOSE_PROC# - Disassociate this user from the file.
  192                          }                  Don't delete the entry from the shared
  193                          }                  file tables.
  194                          }
  195                          } GJ_DEL_PROC#   - Release the specified shared file
  196                          }                  table entry.
  197                          }
  198                          */
  199            2 PNUM UBIN BYTE UNAL,
  200                          /*K* PNUM - UBIN BYTE.  When the FCN is FIND or
  201                          OPEN, the G$SFILE routine returns the shared file
  202                          table index here.  When the FCN is CLOSE or DEL,
  203                          the G$SFILE expects the shared file table index to
  204                          be here.
  205                          */
  206            2 PTYPE BIT(16) UNAL,
  207                          /*K* PTYPE - BIT(16).  Contains the bit
  208                          settings to be compared with and G$SFILE.RU_FLGS.
  209                          */
  210      %IF OPEN=0;
  211            %VLP_ERRCODE (FPTN=ERR,STCLASS=STCLASS,LVL=2,LAST=YES);
  212                          /*K* ERR - BIT(32).  Used to convey error
  213                          information to the calling routine.
  214                          */
  215      %ELSE;
  216            %VLP_ERRCODE (FPTN=ERR,STCLASS=STCLASS,LVL=2,LAST=NO);
  217
  218            2 WAIT UBIN,
  219                          /*K* WAIT- UBIN.  This field is to be set by the
  220                          calling routine when the FCN is OPEN.  If non-zero,
  221                          and the request file is being installed by another
  222                          user, the GJS$OPEN_SHARED routine will REG the user
14:35 JUL 28 '97 GJ_MACROS_M.:E05SI                                        7    
  223                          wainting for the shared file to be installed.  If
  224                          zero, GJS$OPEN_SHARED will return to the calling
  225                          routine with the ERR.ERR field set to E$BADSSP.
  226                          */
  227            2 TYC,
  228                          /*K* TYC.  When the FCN is OPEN, GJS$SFILE
  229                          will set these type completion codes as follows:
  230                          */
  231              3 SFILE$ PTR,
  232                          /*K* TYC.SFILE$  This field will contain the pointer
  233                          to the entry in the shared file tables.
  234                          */
  235              3 GET_PROC UBIN,
  236                          /*K* TYC.GET_PROC - UBIN.  This word will be
  237                          set non-zero if the caller is the first user of the
  238                          file and LCP6 must GET the PROCedure from the
  239                          Host.  If an entry has been allocated for this file
  240                          in the shared file tables (TYC.SHARE_PROC = 1),
  241                          it is then up to the caller of GJS$OPEN_SHARED  to
  242                          complete the initialization of the shared file table
  243                          entry identified by SFILE$.
  244                          */
  245              3 SHARE_PROC UBIN;
  246                          /*K* TYC.SHARE_PROC - UBIN.  This word will be
  247                          positive if the file does not already exists and
  248                          an entry has been allocated so that the calling
  249                          routine may install the shared processor.  When
  250                          SHARE_PROC is zero and GET_PROC is non-zero it
  251                          indicates that there is no available entry in
  252                          the shared file tables.
  253                          */
  254      %ENDIF;
  255      %IF GEN_EQUS=1;
  256      %EQU GJ_FIND_PROC#=0;
  257      %EQU GJ_INSTALL_PROC#=1;
  258      %EQU GJ_OPEN_PROC#=1;
  259      %EQU GJ_CLOSE_PROC#=2;
14:35 JUL 28 '97 GJ_MACROS_M.:E05SI                                        8    
  260      %EQU GJ_DEL_PROC#=3;
  261      %ENDIF;
  262
  263      %MEND;
  264
  265
  266
  267
  268
  269                          /*F* NAME: GJ_FID
  270
  271                          The GJ_FID macro gemerates the structure that
  272                          contains the file identifer for a file that is
  273                          to be added to or compared with the file identifier
  274                          in the shared file table.  This structure contains
  275                          the following:
  276                          */
  277
  278      %MACRO GJ_FID (FPTN=GJ_FID,
  279          STCLASS=AUTO,
  280          ALGN=WALIGNED);
  281
  282      %LSET LISTDIR='0'B;
  283      %LSET LISTEXP='1'B;
  284      %LSET LISTCOM='0'B;
  285      %LSET LISTSUB='1'B;
  286
  287      DCL 1 FPTN STCLASS ALGN,
  288            2 NAME,
  289              3 L UBIN BYTE UNAL,
  290              3 TEXT CHAR(31) UNAL,
  291                          /*K* NAME = TEXTC(31).  Contains the file NAME of the file.
  292                          */
  293            2 ACCT CHAR(8) UNAL,
  294                          /*K* ACCT = CHAR(8).  Contains the ACCounT from where the
  295                          file was fetched.
  296                          */
14:35 JUL 28 '97 GJ_MACROS_M.:E05SI                                        9    
  297            2 PASS CHAR(8) UNAL,
  298                          /*K* PASS = CHAR(8).  Contains the PASSword associated with
  299                          the file.
  300                          */
  301            2 PSN CHAR(6) UNAL,
  302                          /*K* PSN = CHAR(8).  Contains the Pack Set Name of the
  303                          pack set on which the file resides.
  304                          */
  305            2 MODTIME UBIN(32);
  306                          /*K* MODTIME = VALUE-UBIN(32).  Contains the MODification
  307                          TIME of the file to be associated.
  308                          */
  309      %MEND;
  310
  311
  312
  313
  314
  315                          /*F* NAME:GJ_GETPROC_PARAMS
  316
  317                          The GJ_GETPROC_PARAMS macro generates the structure
  318                          that is used to communicate with the GJS$GET_PROC
  319                          routine.
  320                          */
  321
  322      %MACRO GJ_GETPROC_PARAMS (FPTN=GJ_GETPROC_PARAMS,
  323          STCLASS=AUTO,
  324          ALGN=WALIGNED);
  325
  326      %LSET LISTDIR='0'B;
  327      %LSET LISTEXP='1'B;
  328      %LSET LISTCOM='0'B;
  329      %LSET LISTSUB='1'B;
  330
  331      DCL 1 FPTN STCLASS ALGN,
  332            2 RD_PARAMS$ PTR,
  333                          /*K* RD_PARAMS$ - PTR.  Contains the address of
14:35 JUL 28 '97 GJ_MACROS_M.:E05SI                                        10   
  334                          the structure that contains the parameters to be
  335                          passed to the GJS$READ_RU routine.  If the GET_PROC
  336                          parameter contains a zero, this may be the ADDR(NIL);
  337                          if not, all values must be initialized.
  338                          */
  339            2 SHARE,
  340                          /*K* SHARE.  Contains the shared file information if
  341                          the procedure we are associating is already shared or
  342                          is to be made shared.
  343                          */
  344              3 SFILE$ PTR,
  345                          /*K* SHARE.SFILE$ - PTR.  PROC$ is to contain the address
  346                          of the run-unit entry in the shared file tables.
  347                          This field is ignored if SHARE.SHARE_PROC is set to zero.
  348                          */
  349              3 GET_PROC UBIN,
  350                          /*K* SHARE.GET_PROC - UBIN.  GET_PROC is to be set non-zero
  351                          if the procedure is to be read from the host.
  352                          */
  353              3 SHARE_PROC SBIN,
  354                          /*K* SHARE.SHARE_PROC - SBIN.  SHARE_PROC is to be set
  355                          positive if, after reading the procedure from the host, the
  356                          procedure is to be made shared in the shared file tables
  357                          entry identified by SFILE$.  If set to zero the procedure
  358                          will not be made shared.  If set negative, this is
  359                          a request to unshare the run-unit specified by SFILE$
  360                          for this user.
  361                          */
  362            2 VP# UBIN,
  363                          /*K* VP# - UBIN.  Contains the first virtual page
  364                          of this program section.
  365                          */
  366            2 PGSZ UBIN;
  367                          /*K* PGSZ - UBIN.  Contains the number of pages
  368                          in this program section.
  369                          */
  370      %MEND;
14:35 JUL 28 '97 GJ_MACROS_M.:E05SI                                        11   
  371
  372
  373
  374
  375
  376                          /*F* NAME: GJ_SHARE#
  377
  378                          The GJ_SHARE# macro generates the EQUs for the
  379                          SHARE_PROC value that is in the GJ_GETPROC_PARAMS
  380                          and GJ_SFILE_PARAMS structures.  The values generated
  381                          are:
  382                          }
  383                          } GJ_SHARE#      1    The program is to be made shared
  384                          }                     after it is read from the host.
  385                          }
  386                          } GJ_DONTSHARE#  0    The program is not to be entered into
  387                          }                     the shared file tables after it is read.
  388                          }
  389                          } GJ_UNSHARE#   -1    The program is to be made unshared for
  390                          }                     this user.
  391
  392                          } GJ_COPYDATA#  -2    The data for this shared program is to
  393                          }                     be copied into the user pages.
  394                          }
  395                          */
  396
  397      %MACRO GJ_SHARE#;
  398
  399      %EQU GJ_SHARE# = 1;
  400      %EQU GJ_DONTSHARE# = 0;
  401      %EQU GJ_UNSHARE#= -1;
  402      %EQU GJ_COPYDATA# = -2;
  403
  404      %MEND;
  405
  406
  407
14:35 JUL 28 '97 GJ_MACROS_M.:E05SI                                        12   
  408
  409                          /*F* NAME: GJ_READ_PARAMS
  410
  411                          The GJ_READ_PARAMS macro generates the structure that
  412                          is used to communicate between the GJS$GETPROG module
  413                          and the GJS$READ_RU module.
  414                          */
  415
  416      %MACRO GJ_READ_PARAMS (FPTN=GJ_READ_PARAMS,
  417          STCLASS=AUTO,
  418          ALGN=WALIGNED);
  419
  420      %LSET LISTDIR='0'B;
  421      %LSET LISTEXP='1'B;
  422      %LSET LISTCOM='0'B;
  423      %LSET LISTSUB='1'B;
  424
  425      DCL 1 FPTN STCLASS ALGN,
  426            2 PROG_TYPE UBIN UNAL,
  427                          /*K* PROG_TYPE = UBIN BYTE.  Used to indicate if the
  428                          program to be read is a user program, a library, a
  429                          debugger or command processor.  See GJ_FCN# in GJ_MSG_M
  430                          for values and meanings.
  431                          */
  432            2 SECT_TYPE UBIN BYTE UNAL,
  433            2 BIAS UBIN(32),
  434                          /*K* BIAS - UBIN(32).  Contains the address
  435                          within the instruction segment of the beginning of
  436                          the data.  This word is from B$HEAD.BIAS via SETFP_MSG.DATA_BIAS.
  437                          */
  438                          /*K* SECT_TYPE = UBIN BYTE.  Used to indicate the section
  439                          of the run-unit that is to be read.  See B$RECORDSUBS in
  440                          B$OBJECT_C for values and meanings.
  441                          */
  442            2 MAX_RECSZ UBIN,
  443                          /*K* MAX_RECSZ = UBIN WORD.  Contains the L6 word size of the
  444                          largest record in the run-unit.  From GJ_SETFP_MSG.PRECSIZE
14:35 JUL 28 '97 GJ_MACROS_M.:E05SI                                        13   
  445                          multiplied by 2.
  446                          */
  447            2 TOT_SECTSZ UBIN(32),
  448                          /*K* TOT_SECTSZ = UBIN(32).  Contains the total L6 word size
  449                          of all records that make up this section of the run-unit.
  450                          */
  451            2 USR_LOC$ PTR,
  452            2 USR_LOC REDEF USR_LOC$ UBIN(32),
  453                          /*K* USR_LOC$ = PTR.  Contains the address into the user's
  454                          virtual space of where the first record of this program
  455                          section is to be read.
  456                          */
  457            2 HOST_OFFSET UBIN(32),
  458                          /*K* HOST_OFFSET = UBIN(32).  Contains the offset into
  459                          the boot image for this portion of the run-unit or it's
  460                          library.  This field is meaningful only if this is an
  461                          initial user started by BIGFOOT.
  462                          */
  463            2 DCB# UBIN,
  464                          /*K* DCB# = UBIN.  Contains the number of the LCP-6
  465                          DCB to be used to read the run-unit.
  466                          */
  467            %VLP_ERRCODE (FPTN=ERR,STCLASS=STCLASS,LVL=2,LAST=YES);
  468                          /*K* ERR = BIT(32).  Contains the error code.  This
  469                          field is set by the GJS$READ_RU when an error is detected.
  470                          */
  471
  472      %MEND;

