

15:15 JUL 28 '97 Q_MACRO_C.:E05SI                                          1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6
    7      /******************************************************************************/
    8      /*  FPL interpreter-to-Transaction Processing Administrator communication.    */
    9      /*  The FPL interpreter communicates with TPA, or any other Transaction       */
   10      /*  Processing Administrator, through messages defined below.  These          */
   11      /*  messages are generated during:                                            */
   12      /*  1)  A "LOAD <type> BY TYPE" statement;                                    */
   13      /*  2)  an FPL interpreter abort condition.                                   */
   14      /******************************************************************************/
   15
   16               /***************************************/
   17               /*          Q_LDBYTYP                  */
   18               /***************************************/
   19
   20      /*F* NAME: Q_LDBYTYP
   21
   22      The FPL interpreter supports the "LOAD <type> BY TYPE" statement for
   23      comgroup-connected FPRGs by sending a Q_LDBYTYP message into the
   24      comgroup with a message type of '*FPRQ   '. This message will
   25      then be read by the AU of the comgroup. The AU of the comgroup,
   26      (TPA for CP-6 TP) should then respond by writing a Q_LDBYTYPRSP
   27      message back to the originating FPRG terminal station. This
   28      message must have message type '*FPRQRSP' since FPL is reading
   29      for that message type to complete the load-by-type protocol.
   30
   31      The LOAD <type> BY TYPE may be rejected by TPA setting Q_LDBYTYPRSP.ERR#
   32      to an appropriate LCP6 error code.
   33      */
   34
   35      %MACRO Q_LDBYTYP (FPTN=Q_LDBYTYP,
   36                        STCLASS=STATIC,
   37                        TYPE=' ');
15:15 JUL 28 '97 Q_MACRO_C.:E05SI                                          2    
   38
   39       %LSET LISTDIR='0'B;
   40       %LSET LISTEXP='1'B;
   41       %LSET LISTCOM='0'B;
   42       %LSET LISTSUB='1'B;
   43       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   44       %IF (SUBSTR(STR,0,6)='STATIC') OR
   45       (SUBSTR(STR,0,8)='CONSTANT') OR
   46       (SUBSTR(STR,0,3)='EXT');
   47       %LSET INIT=CHARTEXT('INIT');
   48       %LSET EINIT=CHARTEXT('');
   49       %ELSE;
   50       %LSET INIT=CHARTEXT('/*');
   51       %LSET EINIT=CHARTEXT('*/');
   52       %ENDIF;
   53
   54      DCL 1 FPTN STCLASS,
   55            2 TYPE# CHAR(8) %INIT(TYPE)%EINIT;
   56                  /*K* TYPE = VALUE-CHAR(8) specifies the <type> from the
   57                  originating FPL "LOAD <type> BY TYPE" statement.
   58                  */
   59      %MEND;
   60
   61
   62               /***************************************/
   63               /*          Q_LDBYTYPRSP               */
   64               /***************************************/
   65
   66      %MACRO Q_LDBYTYPRSP (FPTN=Q_LDBYTYPRSP,
   67                           STCLASS=STATIC,
   68                           PSN=' ',
   69                           NAME=' ',
   70                           ACCT=' ',
   71                           PASS=' ');
   72
   73       %LSET LISTDIR='0'B;
   74       %LSET LISTEXP='1'B;
15:15 JUL 28 '97 Q_MACRO_C.:E05SI                                          3    
   75       %LSET LISTCOM='0'B;
   76       %LSET LISTSUB='1'B;
   77       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   78       %IF (SUBSTR(STR,0,6)='STATIC') OR
   79       (SUBSTR(STR,0,8)='CONSTANT') OR
   80       (SUBSTR(STR,0,3)='EXT');
   81       %LSET INIT=CHARTEXT('INIT');
   82       %LSET EINIT=CHARTEXT('');
   83       %ELSE;
   84       %LSET INIT=CHARTEXT('/*');
   85       %LSET EINIT=CHARTEXT('*/');
   86       %ENDIF;
   87
   88      DCL 1 FPTN STCLASS,
   89            %VLP_ERRCODE ( FPTN=ERR, LVL=2, ALGN=CALIGNED, STCLASS="", LAST="," );
   90                  /*K* ERR = VLP_ERRCODE.  Contains the error code
   91                  returned to the FPL interpreter.  If ERR is '0'B,
   92                  the rest of this structure defines the values which
   93                  the FPL interpreter uses to issue an M$LDTRC to
   94                  satisfy the "LOAD <type> BY TYPE" statement.
   95
   96                  ERR is a standard LCP6 error code.  Note that the
   97                  host program may need to convert its error code into
   98                  FEP format.
   99                  */
  100            2 PSN# CHAR(6) CALIGNED %INIT(PSN)%EINIT,
  101                  /*K* PSN = VALUE-CHAR(6).  Specifies the packset
  102                  containing the FEP rununit which the FPL interpreter
  103                  is to M$LDTRC to.
  104                  */
  105            2 %CHARTEXT('NAME') CALIGNED,
  106               3 LEN# UBIN BYTE UNAL %INIT(LENGTHC(%CHARTEXT(CONCAT(TEXTCHAR(FPTN),'.NAME.NAME#'))))%EINIT,
  107
  108               3 NAME# CHAR(31) CALIGNED %INIT(NAME)%EINIT,
  109                  /*K* NAME = VALUE-CHAR.  Specifies, in TEXTC-format,
  110                  the name of the FEP rununit which the FPL interpreter
  111                  is to M$LDTRC to.
15:15 JUL 28 '97 Q_MACRO_C.:E05SI                                          4    
  112                  */
  113            2 ACCT# CHAR(8) CALIGNED %INIT(ACCT)%EINIT,
  114                  /*K* ACCT = VALUE-CHAR(8).  Specifies the account
  115                  of the FEP rununit which the FPL interpreter is to
  116                  M$LDTRC to.
  117                  */
  118            2 PASS# CHAR(8) CALIGNED %INIT(PASS)%EINIT;
  119                  /*K* PASS = VALUE-CHAR(8).  Specifies the password
  120                  of the FEP rununit which the FPL interpreter is to
  121                  M$LDTRC to.
  122                  */
  123      %MEND;
  124
  125
  126               /***************************************/
  127               /*               Q_FPABT               */
  128               /***************************************/
  129
  130      /*F* NAME: Q_FPABT
  131
  132      The FPL interpreter reports program aborts by writing a message
  133      to the host with a message type of '*FPABT  '.  This message
  134      will begin with the text '*FPABT  ' to identify it as such for
  135      readers who may not be connected through a comgroup.  The message
  136      contains the language of the fprg user and an array of error codes
  137      and substitutions.  These error codes and substitutions may then
  138      be passed directly to M$ERRMSG within the host to obtain their
  139      corresponding texts.
  140      */
  141
  142      %MACRO Q_FPABT (FPTN = Q_FPABT,
  143                      STCLASS = STATIC,
  144                      FPABTTXT = '*FPABT',
  145                      LANG = ' ',
  146                      MSGCNT = 3);
  147
  148       %LSET LISTDIR='0'B;
15:15 JUL 28 '97 Q_MACRO_C.:E05SI                                          5    
  149       %LSET LISTEXP='1'B;
  150       %LSET LISTCOM='0'B;
  151       %LSET LISTSUB='1'B;
  152       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  153       %IF (SUBSTR(STR,0,6)='STATIC') OR
  154       (SUBSTR(STR,0,8)='CONSTANT') OR
  155       (SUBSTR(STR,0,3)='EXT');
  156       %LSET INIT=CHARTEXT('INIT');
  157       %LSET EINIT=CHARTEXT('');
  158       %ELSE;
  159       %LSET INIT=CHARTEXT('/*');
  160       %LSET EINIT=CHARTEXT('*/');
  161       %ENDIF;
  162
  163      DCL 1 FPTN STCLASS,
  164            2 FPABTTXT# CHAR(6) %INIT(FPABTTXT)%EINIT,
  165                  /*K* FPABTTXT = VALUE-CHAR(6).  Contains '*FPABT'.
  166                   This is message type sent from the FPL interpreter,
  167                   duplicated within the record itself to identify
  168                   the record for non-TP connected readers.
  169                   */
  170            2 LANG# CHAR(1) CALIGNED %INIT(LANG)%EINIT,
  171                  /*K* LANG = VALUE-CHAR(1).  G$JIT.LANG.
  172                   */
  173            2 MSGCNT# UBIN BYTE UNAL %INIT(MSGCNT)%EINIT,
  174                  /*K* MSGCNT = VALUE-DEC(0-n).  Specifies the number of
  175                   elements in the MSGS array.
  176                   */
  177            2 MSGS(0:%(MSGCNT-1)) CALIGNED,
  178                  /*K* MSGS = ARRAY(0:%(MSGCNT-1)).  MSGS is an array
  179                   containing an L6 VLP_ERRCODE and three TEXTC
  180                   substitution strings per entry.  */
  181              %VLP_ERRCODE ( FPTN=ERR, LVL=3, ALGN=CALIGNED, STCLASS="", LAST="," );
  182              3 U1 CALIGNED,
  183                4 LEN# UBIN BYTE UNAL,
  184                4 NAME# CHAR(31) CALIGNED,
  185              3 U2 CALIGNED,
15:15 JUL 28 '97 Q_MACRO_C.:E05SI                                          6    
  186                4 LEN# UBIN BYTE UNAL,
  187                4 NAME# CHAR(31) CALIGNED,
  188              3 U3 CALIGNED,
  189                4 LEN# UBIN BYTE UNAL,
  190                4 NAME# CHAR(31) CALIGNED;
  191      %MEND;
  192
  193
  194      /******************************************************************************/
  195      /*  Command Forms Program-to-Transaction Processing Administrator             */
  196      /*  communication.                                                            */
  197      /*  The Command Forms Program communicates with TPA, or any other Transaction */
  198      /*  Processing Administrator, through messages defined below.  Similarly, any */
  199      /*  user-written Command Forms Program must communicate with CP6 TPA using    */
  200      /*  the following messages, which are generated during:                       */
  201      /*  1)  Command Forms Program startup;                                        */
  202      /*  2)  the Transaction Processing Administrator's generation of messages to  */
  203      /*      the Command Forms Program which contain abort conditions, etc., and   */
  204      /*      which are to be formatted onto the screen by the Command Forms        */
  205      /*      program;                                                              */
  206      /*  3)  the Command Forms Program's generation of messages to the Transaction */
  207      /*      Processing Administrator which contain commands to be executed.       */
  208      /******************************************************************************/
  209
  210               /***************************************/
  211               /*              Q_MESSAGE              */
  212               /***************************************/
  213
  214      /*F* NAME: Q_MESSAGE
  215
  216      The Command Forms Program receives two types of messages from TPA.
  217      Messages in the first category are REPORTs (not RESPONSEs), and have a
  218      message type of 'MSGG    '.   These generally contain information which
  219      was written into the TP comgroup when the Command Forms Program was not
  220      running (e.g., aborts of other TP stations destined for an MCT station).
  221      The Command Forms Program reads and formats any and all such messages
  222      immediately before reading the screen.
15:15 JUL 28 '97 Q_MACRO_C.:E05SI                                          7    
  223      Messages in the second category are RESPONSEs (message type '*RESP    ')
  224      to a previous write of message type '*TPCMD  ' (see Q_COMMAND).
  225      These RESPONSEs contain a "function" within the first three characters,
  226      which defines the action to be taken by the Command Forms Program.  These
  227      functions are:
  228      1)  FUNCTION = '001'.
  229          A "BEGIN <type>" or "DEBUG <type>" command was issued.  The Command Forms
  230          Program should exit the system (M$EXIT, STOP RUN).  When the TPA receives
  231          an event notifying it of the exit, it starts (M$SETFP) the new program.
  232      2)  FUNCTION = '002'.
  233          A command was issued which resulted in textual information to be formatted
  234          onto the screen.  The rest of this response contains such information.
  235      3)  FUNCTION = '003'.
  236          Either a command was issued which resulted in no textual response, or
  237          the last of such responses has already been formatted.  The Command
  238          Forms Program should now read the screen.
  239      4)  FUNCTION = '004'.
  240          The STATIONMAX limit has been exceeded.  The Command Forms Program
  241          should report an appropriate error to the screen and exit.
  242      5)  FUNCTION = '005'.
  243          The command line should be cleared before the next command is
  244          accepted.  This is sent as the first message function.  All other
  245          message functions will still be a '002'.
  246      */
  247
  248      %MACRO Q_MESSAGE (FPTN=Q_MESSAGE,
  249                        STCLASS=STATIC,
  250                        FUNCTION='003',
  251                        TEXT=' ');
  252
  253       %LSET LISTDIR='0'B;
  254       %LSET LISTEXP='1'B;
  255       %LSET LISTCOM='0'B;
  256       %LSET LISTSUB='1'B;
  257       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  258       %IF (SUBSTR(STR,0,6)='STATIC') OR
  259       (SUBSTR(STR,0,8)='CONSTANT') OR
15:15 JUL 28 '97 Q_MACRO_C.:E05SI                                          8    
  260       (SUBSTR(STR,0,3)='EXT');
  261       %LSET INIT=CHARTEXT('INIT');
  262       %LSET EINIT=CHARTEXT('');
  263       %ELSE;
  264       %LSET INIT=CHARTEXT('/*');
  265       %LSET EINIT=CHARTEXT('*/');
  266       %ENDIF;
  267
  268      DCL 1 FPTN STCLASS,
  269            2 FUNCTION# CHAR(3) CALIGNED %INIT(FUNCTION)%EINIT,
  270                  /*K* FUNCTION = VALUE-CHAR(3).  Specifies the action to be
  271                  taken by the Command Forms Program upon reading this
  272                  Q_MESSAGE as a RESPONSE to a '*TPCMD  ' write (see Q_COMMAND).
  273                  1)  FUNCTION = '001':  exit.
  274                  2)  FUNCTION = '002':  format TEXT# onto screen.
  275                  3)  FUNCTION = '003':  read screen.
  276                  4)  FUNCTION = '004':  report "STATIONMAX exceeded" and exit.
  277                  5)  FUNCTION = '005':  clear the command line before next command.
  278                  */
  279            2 TEXT# CHAR(80) CALIGNED %INIT(TEXT)%EINIT;
  280                  /*K* TYPE = VALUE-CHAR(80) specifies the text which is to
  281                  be formatted onto the screen by the Command Forms Program.
  282                  The text is significant if the message type read was 'MSGG    ',
  283                  or if the message type was '*RESP   ', in RESPONSE to a message
  284                  type of '*TPCMD  ' (see Q_COMMAND), and FUNCTION# is '002'.
  285                  */
  286      %MEND;
  287
  288
  289               /***************************************/
  290               /*              Q_COMMAND              */
  291               /***************************************/
  292
  293      /*F* NAME: Q_COMMAND
  294
  295      The Transaction Processing Administrator executes commands received from
  296      the Command Forms Program; these commands have a message type of '*TPCMD  '
15:15 JUL 28 '97 Q_MACRO_C.:E05SI                                          9    
  297      when written to the TPA.
  298      To initialize communication with the TPA, the Command Forms Program
  299      writes a command with a message type of '*IAMRDY ', and then reads for a
  300      RESPONSE.  In this case, the text of the command may contain the station's
  301      node/port/controller/device address, which the TPA supplied with CP-6 will
  302      use in creating a messages pertaining to that station.
  303      */
  304
  305      %MACRO Q_COMMAND (FPTN=Q_COMMAND,
  306                        STCLASS=STATIC,
  307                        TEXT=' ');
  308
  309       %LSET LISTDIR='0'B;
  310       %LSET LISTEXP='1'B;
  311       %LSET LISTCOM='0'B;
  312       %LSET LISTSUB='1'B;
  313       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  314       %IF (SUBSTR(STR,0,6)='STATIC') OR
  315       (SUBSTR(STR,0,8)='CONSTANT') OR
  316       (SUBSTR(STR,0,3)='EXT');
  317       %LSET INIT=CHARTEXT('INIT');
  318       %LSET EINIT=CHARTEXT('');
  319       %ELSE;
  320       %LSET INIT=CHARTEXT('/*');
  321       %LSET EINIT=CHARTEXT('*/');
  322       %ENDIF;
  323
  324      DCL 1 FPTN STCLASS,
  325            2 TEXT# CHAR(80) CALIGNED %INIT(TEXT)%EINIT,
  326                  /*K* TEXT = VALUE-CHAR(80).  For a write from the Command
  327                  Forms Program, with a message type of '*TPCMD  ', contains
  328                  the command to be executed by the Transaction Processing
  329                  Administrator.
  330                  */
  331            2 IAMRDY_TEXT# REDEF TEXT#,
  332                  /*K* IAMRDY is a redefinition of TEXT#, containing four
  333                  fields which may be filled in by the Command Forms Program
15:15 JUL 28 '97 Q_MACRO_C.:E05SI                                          10   
  334                  before writing its initialization message (with a message
  335                  type of '*IAMRDY ').  The fields are compatible with the
  336                  FPL 'ACCEPT identifier FROM TERMINAL-ATTRIBUTES' statement,
  337                  and with the M$GLINEATTR FEP monitor service.
  338                  */
  339              3 CP_6_NODE CHAR(4),
  340              3 CP_6_PORT CHAR(4),
  341              3 CP_6_CONTROLLER CHAR(4),
  342              3 CP_6_DEVICE CHAR(4),
  343              3 * CHAR(64),
  344            2 * CHAR(3) CALIGNED;
  345      %MEND;

