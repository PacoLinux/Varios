VERSION E05

PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:1    
        1        1        /*M* KPE$ERR_SPLIT      Splits the bit descriptor returned from the FEP into a list
                 1        of errors */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*F*   NAME:  KPE$CHECK_ERR
        8        8               PURPOSE:  Determine whether or not transaction from PIGLET
        9        9                         reported an error.  If it did report an error,
       10       10                         print appropriate error message and ALTRETURN.
       11       11                         If all is OK, do a normal return.
       12       12
       13       13                         The caller may also pass a message type code.  If
       14       14                         the received message is not of the expected type,
       15       15                         an error message is displayed.
       16       16        */
       17       17        KPE$CHECK_ERR: PROC(MSG_TYPE) ALTRET;
       18       18        /**/
       19       19        /*  INCLUDE FILES  */
       20       20        /**/
       21       21        %INCLUDE KP_DATA_R;
       22     1273        %INCLUDE KP_MSG;
       23     1366        /**/
       24     1367        /*  PARAMETERS  */
       25     1368        /**/
       26     1369    1   DCL MSG_TYPE SBIN;
       27     1370        /**/
       28     1371        /*  ENTRY DCLS  */
       29     1372        /**/
       30     1373        %KP_ENTRIES (OMIT=KPE$CHECK_ERR);
       31     1479        /**/
       32     1480        /*  Local things  */
       33     1481        /**/
       34     1482    1   DCL DEV_STATUS UBIN(16) UNAL;
       35     1483    1   DCL 1 D_STATUS REDEF DEV_STATUS,
       36     1484    1         2 HOB UBIN(8) UNAL,
PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:2    
       37     1485    1         2 LOB UBIN(8) UNAL;
       38     1486    1   DCL ERR SBIN;
       39     1487        /**/
       40     1488        /*  BASED  */
       41     1489        /**/
       42     1490        %KP$MSG (NAME = KP$MSG,STCLASS = BASED);
       43     1566        %EJECT;
PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:3    
       44     1567    1           IF ADDR(MSG_TYPE) ~= ADDR(NIL) THEN
       45     1568    2              DO;
       46     1569    2                IF KP_FECG_IN$ -> KP$MSG.HEAD.MSG_TYPE ~= MSG_TYPE THEN
       47     1570    3                   DO;
       48     1571    3                     CALL KPE$ERROR (E$MSG_SYNCH_ERR);
       49     1572    3                     ALTRETURN;
       50     1573    3                     END;
       51     1574    2                END;
       52     1575    1           ERR = KP_FECG_IN$ -> KP$MSG.HEAD.OPERATION_STATUS;
       53     1576    1           IF ERR = %E$KP_ALLOK THEN
       54     1577    1              RETURN;
       55     1578    1           IF ERR = %E$KP_DEV_ERR THEN
       56     1579    2              DO;
       57     1580    2                D_STATUS.HOB = KP_FECG_IN$ -> KP$MSG.HEAD.DEV_STATUS.HOB;
       58     1581    2                D_STATUS.LOB = KP_FECG_IN$ -> KP$MSG.HEAD.DEV_STATUS.LOB;
       59     1582    2                CALL KPE$ERR_SPLIT (DEV_STATUS);
       60     1583    2                END;
       61     1584    1           ELSE
       62     1585    2              DO;
       63     1586    2                CALL KPE$ERROR (ERR);
       64     1587    2                END;
       65     1588    1           ALTRETURN;
       66     1589    1           END KPE$CHECK_ERR;
       67     1590        %EOD;

PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:4    
--  Include file information  --

   KP_MSG.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPE$CHECK_ERR.

   Procedure KPE$CHECK_ERR requires 49 words for executable code.
   Procedure KPE$CHECK_ERR requires 8 words of local(AUTO) storage.

PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:5    

 Object Unit name= KPE$CHECK_ERR                              File name= KPE$ERR_SPLIT.:E05TOU
 UTS= JUL 30 '97 01:18:41.68 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    49     61  KPE$CHECK_ERR
    2  RoData even  none     2      2  KPE$CHECK_ERR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        1  KPE$CHECK_ERR

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 KPE$ERROR
         yes           Std       1 KPE$ERR_SPLIT
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:6    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INBUF                              KP_RU_OUTBUF
     KP_FECG_IN$                           KP_RU_KEY                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:7    


        1        1        /*M* KPE$ERR_SPLIT      Splits the bit descriptor returned from the FEP into a list
                 1        of errors */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*F*   NAME:  KPE$CHECK_ERR
        8        8               PURPOSE:  Determine whether or not transaction from PIGLET
        9        9                         reported an error.  If it did report an error,
       10       10                         print appropriate error message and ALTRETURN.
       11       11                         If all is OK, do a normal return.
       12       12
       13       13                         The caller may also pass a message type code.  If
       14       14                         the received message is not of the expected type,
       15       15                         an error message is displayed.
       16       16        */
       17       17        KPE$CHECK_ERR: PROC(MSG_TYPE) ALTRET;

     17  1 000000   000000 700200 xent  KPE$CHECK_E* TSX0  ! X66_AUTO_1
         1 000001   000010 000001                    ZERO    8,1

       18       18        /**/
       19       19        /*  INCLUDE FILES  */
       20       20        /**/
       21       21        %INCLUDE KP_DATA_R;
       22     1273        %INCLUDE KP_MSG;
       23     1366        /**/
       24     1367        /*  PARAMETERS  */
       25     1368        /**/
       26     1369    1   DCL MSG_TYPE SBIN;
       27     1370        /**/
       28     1371        /*  ENTRY DCLS  */
       29     1372        /**/
       30     1373        %KP_ENTRIES (OMIT=KPE$CHECK_ERR);
       31     1479        /**/
PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:8    
       32     1480        /*  Local things  */
       33     1481        /**/
       34     1482    1   DCL DEV_STATUS UBIN(16) UNAL;
       35     1483    1   DCL 1 D_STATUS REDEF DEV_STATUS,
       36     1484    1         2 HOB UBIN(8) UNAL,
       37     1485    1         2 LOB UBIN(8) UNAL;
       38     1486    1   DCL ERR SBIN;
       39     1487        /**/
       40     1488        /*  BASED  */
       41     1489        /**/
       42     1490        %KP$MSG (NAME = KP$MSG,STCLASS = BASED);
       43     1566        %EJECT;
PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:9    
       44     1567    1           IF ADDR(MSG_TYPE) ~= ADDR(NIL) THEN

   1567  1 000002   200003 236100                    LDQ     @MSG_TYPE,,AUTO
         1 000003   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000004   000020 600000 1                  TZE     s:1575

       45     1568    2              DO;

       46     1569    2                IF KP_FECG_IN$ -> KP$MSG.HEAD.MSG_TYPE ~= MSG_TYPE THEN

   1569  1 000005   200003 470500                    LDP0    @MSG_TYPE,,AUTO
         1 000006   000000 471400 xsym               LDP1    KP_FECG_IN$
         1 000007   100000 236100                    LDQ     0,,PR1
         1 000010   000033 772000                    QRL     27
         1 000011   000000 116100                    CMPQ    0,,PR0
         1 000012   000020 600000 1                  TZE     s:1575

       47     1570    3                   DO;

       48     1571    3                     CALL KPE$ERROR (E$MSG_SYNCH_ERR);

   1571  1 000013   000001 630400 2                  EPPR0   1
         1 000014   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000015   000000 701000 xent               TSX1    KPE$ERROR
         1 000016   000000 011000                    NOP     0

       49     1572    3                     ALTRETURN;

   1572  1 000017   000000 702200 xent               TSX2  ! X66_AALT

       50     1573    3                     END;
       51     1574    2                END;
       52     1575    1           ERR = KP_FECG_IN$ -> KP$MSG.HEAD.OPERATION_STATUS;

   1575  1 000020   000000 470400 xsym               LDP0    KP_FECG_IN$
         1 000021   000000 236100                    LDQ     0,,PR0
         1 000022   000777 376007                    ANQ     511,DL
PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:10   
         1 000023   200005 756100                    STQ     ERR,,AUTO

       53     1576    1           IF ERR = %E$KP_ALLOK THEN

   1576  1 000024   000310 116007                    CMPQ    200,DL
         1 000025   000027 601000 1                  TNZ     s:1578

       54     1577    1              RETURN;

   1577  1 000026   000000 702200 xent               TSX2  ! X66_ARET

       55     1578    1           IF ERR = %E$KP_DEV_ERR THEN

   1578  1 000027   000313 116007                    CMPQ    203,DL
         1 000030   000052 601000 1                  TNZ     s:1586

       56     1579    2              DO;

       57     1580    2                D_STATUS.HOB = KP_FECG_IN$ -> KP$MSG.HEAD.DEV_STATUS.HOB;

   1580  1 000031   000001 236100                    LDQ     1,,PR0
         1 000032   000001 736000                    QLS     1
         1 000033   200004 676100                    ERQ     DEV_STATUS,,AUTO
         1 000034   776000 376003                    ANQ     -1024,DU
         1 000035   200004 656100                    ERSQ    DEV_STATUS,,AUTO

       58     1581    2                D_STATUS.LOB = KP_FECG_IN$ -> KP$MSG.HEAD.DEV_STATUS.LOB;

   1581  1 000036   000001 236100                    LDQ     1,,PR0
         1 000037   000002 736000                    QLS     2
         1 000040   200004 676100                    ERQ     DEV_STATUS,,AUTO
         1 000041   001774 376003                    ANQ     1020,DU
         1 000042   200004 656100                    ERSQ    DEV_STATUS,,AUTO

       59     1582    2                CALL KPE$ERR_SPLIT (DEV_STATUS);

   1582  1 000043   200004 631500                    EPPR1   DEV_STATUS,,AUTO
PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:11   
         1 000044   200006 451500                    STP1    ERR+1,,AUTO
         1 000045   200006 630500                    EPPR0   ERR+1,,AUTO
         1 000046   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000047   000000 701000 xent               TSX1    KPE$ERR_SPLIT
         1 000050   000000 011000                    NOP     0

       60     1583    2                END;

   1583  1 000051   000060 710000 1                  TRA     s:1588

       61     1584    1           ELSE
       62     1585    2              DO;

       63     1586    2                CALL KPE$ERROR (ERR);

   1586  1 000052   200005 631500                    EPPR1   ERR,,AUTO
         1 000053   200006 451500                    STP1    ERR+1,,AUTO
         1 000054   200006 630500                    EPPR0   ERR+1,,AUTO
         1 000055   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000056   000000 701000 xent               TSX1    KPE$ERROR
         1 000057   000000 011000                    NOP     0

       64     1587    2                END;

       65     1588    1           ALTRETURN;

   1588  1 000060   000000 702200 xent               TSX2  ! X66_AALT
       66     1589    1           END KPE$CHECK_ERR;
       67     1590        %EOD;

PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:12   
--  Include file information  --

   KP_MSG.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPE$CHECK_ERR.
PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:13   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @MSG_TYPE                  4-0-0/b UBIN(16)    r     1 DEV_STATUS
     4-0-0/b STRC(16)    r     1 D_STATUS                   5-0-0/w SBIN        r     1 ERR
    *0-0-0/w SBIN        r     1 MSG_TYPE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 KP_FECG_IN$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(18594) r     1 KP$MSG


   Procedure KPE$CHECK_ERR requires 49 words for executable code.
   Procedure KPE$CHECK_ERR requires 8 words of local(AUTO) storage.
PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:14   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:15   
          MINI XREF LISTING

DEV_STATUS
      1482**DCL      1483--REDEF    1582<>CALL
D_STATUS.HOB
      1484**DCL      1580<<ASSIGN
D_STATUS.LOB
      1485**DCL      1581<<ASSIGN
ERR
      1486**DCL      1575<<ASSIGN   1576>>IF       1578>>IF       1586<>CALL
KP$MSG.HEAD.DEV_STATUS.HOB
      1498**DCL      1580>>ASSIGN
KP$MSG.HEAD.DEV_STATUS.LOB
      1499**DCL      1581>>ASSIGN
KP$MSG.HEAD.MSG_TYPE
      1493**DCL      1569>>IF
KP$MSG.HEAD.OPERATION_STATUS
      1496**DCL      1575>>ASSIGN
KP$MSG.TDATA
      1517**DCL      1518--REDEF    1519--REDEF    1524--REDEF    1538--REDEF    1543--REDEF    1547--REDEF
      1553--REDEF    1556--REDEF
KPE$ERROR
      1396**DCL-ENT  1571--CALL     1586--CALL
KPE$ERR_SPLIT
      1399**DCL-ENT  1582--CALL
KP_EXIT.V.STEPCC#
       944**DCL       944--REDEF
KP_FECG_IN$
       870**DCL      1569>>IF       1575>>ASSIGN   1580>>ASSIGN   1581>>ASSIGN
KP_INBUF
       866**DCL       866--REDEF
KP_RU_KEY
       874**DCL       875--REDEF
KP_RU_KEY.NODE
PL6.E3A0      #001=KPE$CHECK_ERR File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:16   
       874**DCL       874--REDEF
KP_RU_KEY.PAGE
       875**DCL       875--REDEF
KP_RU_OUTBUF
       868**DCL       868--REDEF
MSG_TYPE
      1369**DCL        17--PROC     1567--IF       1569>>IF

PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:17   
       68        1        /*T***********************************************************/
       69        2        /*T*                                                         */
       70        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       71        4        /*T*                                                         */
       72        5        /*T***********************************************************/
       73        6        /*F*     NAME:          KPE$ERR_SPLIT
       74        7                 PURPOSE:       Break up the device status word from the fep.
       75        8                 DESCRIPTION:   This routine is called after PIGETTE has
       76        9                                determined that a hardware error has occured
       77       10                                on the diskette drive that we are using.
       78       11
       79       12                                We have been passed the device status word
       80       13                                from the FEP, a 16-bit mask of possible.  If
       81       14                                an error did occur, the corresponding bit
       82       15                                will be '1'B.  NOTE that PIGLET has to munge
       83       16                                some bits from the original hardware
       84       17                                representation to make them active-true.
       85       18
       86       19                                This subroutine uses a table of masks and
       87       20                                corresponding error codes to generate all
       88       21                                the appropriate messages.  After all the
       89       22                                errors are printed, the current status is
       90       23                                displayed.
       91       24        */
       92       25        KPE$ERR_SPLIT : PROC( ERROR_CODE );
       93       26        /**/
       94       27        /*  INCLUDE FILES  */
       95       28        /**/
       96       29        %INCLUDE KP_DATA_R;
       97     1281        %INCLUDE XUF_ENTRY;
       98     1289        %INCLUDE KP_MSG;
       99     1382        /**/
      100     1383        /*  PARAMETERS  */
      101     1384        /**/
      102     1385    1   DCL ERROR_CODE(0:15) BIT(1) UNAL;
      103     1386        /**/
      104     1387        /*  LOCAL AUTO  */
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:18   
      105     1388        /**/
      106     1389    1   DCL I UBIN WORD;
      107     1390    1   DCL DRIVE UBIN WORD STATIC;
      108     1391    1   DCL TRACK UBIN WORD STATIC;
      109     1392    1   DCL SECTOR UBIN WORD STATIC;
      110     1393    1   DCL SIDE UBIN WORD STATIC;
      111     1394        /**/
      112     1395        /*  FPTS  */
      113     1396        /**/
      114     1397        /**/
      115     1398        /*  CONSTANTS  */
      116     1399        /**/
      117     1400    1   DCL FMT1 CONSTANT CHAR(0) INIT(
      118     1401    1   '    while writing Track %D Side %D Sector %D on FEP %D Drive %D' );
      119     1402    1   DCL FMT2 CONSTANT CHAR(0) INIT(
      120     1403    1   '    while reading Track %D Side %D Sector %D on FEP %D Drive %D' );
      121     1404    1   DCL FMT3 CONSTANT CHAR(0) INIT(
      122     1405    1   '    while no diskette activity was going on' );
      123     1406    1   DCL FMT4 CONSTANT CHAR(0) INIT(
      124     1407    1   '    while voliniting Track %D on FEP %D Drive %D' );
      125     1408    1   DCL FMT5 CONSTANT CHAR(0) INIT(
      126     1409    1   '    while certifying Track %D Side %D on FEP %D Drive %D' );
      127     1410    1   DCL FMT6 CONSTANT CHAR(0) INIT(
      128     1411    1   '    while UNKNOWN activity on Track %D Side %D Sector %D on FEP %D Drive %D' );
      129     1412    1   DCL FMT7 CONSTANT CHAR(0) INIT(
      130     1413    1   '    during cert2 activity on FEP %D Drive %D' );
      131     1414    1   DCL FMT8 CONSTANT CHAR(0) INIT(
      132     1415    1   '    during cloning at Track %D on FEP %D' );
      133     1416        /* This table has one entry for each bit in the error mask returned           */
      134     1417        /* by the FEP.  The entries must be arranged in bit-position order!           */
      135     1418    1   DCL 1 ERROR_MAP (0:15) CONSTANT,
      136     1419    1         2 CODE SBIN WORD INIT(
      137     1420    1           %E$KP_NOT_READY,   /* '8000'X */
      138     1421    1           0,                 /* '4000'X   ATTENTION                             */
      139     1422    1           %E$KP_OVER_RUN,    /* '2000'X */
      140     1423    1           %E$KP_DEL_DATA,    /* '1000'X */
      141     1424    1           %E$KP_READ_ERR,    /* '0800'X */
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:19   
      142     1425    1           %E$KP_DEV_FAULT,   /* '0400'X */
      143     1426    1           %E$KP_DATA_SYNC,   /* '0200'X */
      144     1427    1           %E$KP_BAD_SRCH,    /* '0100'X */
      145     1428    1           0,                 /* '0080'X   DOUBLE-SIDED DISK                     */
      146     1429    1           0,                 /* '0040'X   RESERVED                              */
      147     1430    1           %E$KP_SEEK_ERR,    /* '0020'X */
      148     1431    1           0,                 /* '0010'X   RESERVED                              */
      149     1432    1           %E$KP_C_MEM_ERR,   /* '0008'X */
      150     1433    1           %E$KP_NO_RSRC,     /* '0004'X */
      151     1434    1           %E$KP_BUS_ERR,     /* '0002'X */
      152     1435    1           %E$KP_U_MEM_ERR);  /* '0001'X */
      153     1436        /**/
      154     1437        /*  ENTRY DCLS  */
      155     1438        /**/
      156     1439        %KP_ENTRIES (OMIT=KPE$ERR_SPLIT);
      157     1545        /**/
      158     1546        /*  BASED  */
      159     1547        /**/
      160     1548        %KP$MSG (NAME = KP$MSG,STCLASS = BASED);
      161     1624        /**/
      162     1625    2             DO I = 0 TO 15;
      163     1626    2                IF ERROR_CODE(I) = '1'B
      164     1627    2                   AND ERROR_MAP.CODE(I) ~= 0 THEN
      165     1628    2                       CALL KPE$ERROR( ERROR_MAP.CODE(I) );
      166     1629    2                END;
      167     1630        %EJECT;
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:20   
      168     1631        /**/
      169     1632        /* Tell him where he is. */
      170     1633        /**/
      171     1634    1             TRACK = KP_FECG_IN$ -> KP$MSG.HEAD.TRACK_NO;
      172     1635    1             SECTOR = KP_FECG_IN$ -> KP$MSG.HEAD.SECTOR_NO;
      173     1636    1             DRIVE = KP_FECG_IN$ -> KP$MSG.HEAD.DRIVE_NO;
      174     1637    1             SIDE = KP_FECG_IN$ -> KP$MSG.HEAD.SIDE;
      175     1638    2               DO CASE( KP_DISK_ACTIVITY );
      176     1639    2                 CASE ( %KP_DISK_WRITING# );
      177     1640    2                   CALL X$WRITE( F_FDS, VECTOR(FMT1),
      178     1641    2                                 VECTOR(TRACK),
      179     1642    2                                 VECTOR(SIDE),
      180     1643    2                                 VECTOR(SECTOR),
      181     1644    2                                 VECTOR(KP_FEP_NO),
      182     1645    2                                 VECTOR(DRIVE) );
      183     1646    2                 CASE ( %KP_DISK_READING# );
      184     1647    2                   CALL X$WRITE( F_FDS, VECTOR(FMT2),
      185     1648    2                                 VECTOR(TRACK),
      186     1649    2                                 VECTOR(SIDE),
      187     1650    2                                 VECTOR(SECTOR),
      188     1651    2                                 VECTOR(KP_FEP_NO),
      189     1652    2                                 VECTOR(DRIVE) );
      190     1653    2                 CASE ( %KP_DISK_INACTIVE# );
      191     1654    2                   KP_OUTBUF = FMT3;
      192     1655    2                 CASE ( %KP_DISK_VOLINITING#);
      193     1656    2                   CALL X$WRITE( F_FDS, VECTOR(FMT4),
      194     1657    2                                 VECTOR(TRACK),
      195     1658    2                                 VECTOR(KP_FEP_NO),
      196     1659    2                                 VECTOR(DRIVE) );
      197     1660    2                 CASE ( %KP_DISK_CERTIFYING#);
      198     1661    2                   CALL X$WRITE( F_FDS, VECTOR(FMT5),
      199     1662    2                                 VECTOR(TRACK),
      200     1663    2                                 VECTOR(SIDE),
      201     1664    2                                 VECTOR(KP_FEP_NO),
      202     1665    2                                 VECTOR(DRIVE) );
      203     1666    2                 CASE ( %KP_DISK_CERT2#);
      204     1667    2                   CALL X$WRITE( F_FDS, VECTOR(FMT7),
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:21   
      205     1668    2                                 VECTOR(KP_FEP_NO),
      206     1669    2                                 VECTOR(DRIVE) );
      207     1670    2                 CASE ( %KP_DISK_CLONING#);
      208     1671    2                   CALL X$WRITE( F_FDS, VECTOR(FMT8),
      209     1672    2                                 VECTOR(TRACK),
      210     1673    2                                 VECTOR(KP_FEP_NO) );
      211     1674    2                 CASE ( ELSE );            /* UNKNOWN!                           */
      212     1675    2                   CALL X$WRITE( F_FDS, VECTOR(FMT6),
      213     1676    2                                 VECTOR(TRACK),
      214     1677    2                                 VECTOR(SIDE),
      215     1678    2                                 VECTOR(SECTOR),
      216     1679    2                                 VECTOR(KP_FEP_NO),
      217     1680    2                                 VECTOR(DRIVE) );
      218     1681    2                 END;
      219     1682    1             CALL KPE$ERR_TEXT;
      220     1683    1   END KPE$ERR_SPLIT;

PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:22   
--  Include file information  --

   KP_MSG.:E05TOU  is referenced.
   XUF_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPE$ERR_SPLIT.

   Procedure KPE$ERR_SPLIT requires 93 words for executable code.
   Procedure KPE$ERR_SPLIT requires 8 words of local(AUTO) storage.

    No errors detected in file KPE$ERR_SPLIT.:E05TSI    .

PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:23   

 Object Unit name= KPE$ERR_SPLIT                              File name= KPE$ERR_SPLIT.:E05TOU
 UTS= JUL 30 '97 01:18:57.88 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none     4      4  KPE$ERR_SPLIT
    2  RoData even  UTS    125    175  KPE$ERR_SPLIT
    3   Proc  even  none    93    135  KPE$ERR_SPLIT
    4  RoData even  none    67    103  KPE$ERR_SPLIT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        1  KPE$ERR_SPLIT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 KPE$ERROR
         yes           Std      22 X$WRITE
 yes     yes           Std       0 KPE$ERR_TEXT
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:24   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INBUF                              KP_OUTBUF
     KP_RU_OUTBUF                          KP_FECG_IN$                           KP_FEP_NO
     KP_RU_KEY                             KP_DISK_ACTIVITY                      F_FDS
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:25   


       68        1        /*T***********************************************************/
       69        2        /*T*                                                         */
       70        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       71        4        /*T*                                                         */
       72        5        /*T***********************************************************/
       73        6        /*F*     NAME:          KPE$ERR_SPLIT
       74        7                 PURPOSE:       Break up the device status word from the fep.
       75        8                 DESCRIPTION:   This routine is called after PIGETTE has
       76        9                                determined that a hardware error has occured
       77       10                                on the diskette drive that we are using.
       78       11
       79       12                                We have been passed the device status word
       80       13                                from the FEP, a 16-bit mask of possible.  If
       81       14                                an error did occur, the corresponding bit
       82       15                                will be '1'B.  NOTE that PIGLET has to munge
       83       16                                some bits from the original hardware
       84       17                                representation to make them active-true.
       85       18
       86       19                                This subroutine uses a table of masks and
       87       20                                corresponding error codes to generate all
       88       21                                the appropriate messages.  After all the
       89       22                                errors are printed, the current status is
       90       23                                displayed.
       91       24        */
       92       25        KPE$ERR_SPLIT : PROC( ERROR_CODE );

     25  3 000000   000000 700200 xent  KPE$ERR_SPL* TSX0  ! X66_AUTO_1
         3 000001   000010 000001                    ZERO    8,1

       93       26        /**/
       94       27        /*  INCLUDE FILES  */
       95       28        /**/
       96       29        %INCLUDE KP_DATA_R;
       97     1281        %INCLUDE XUF_ENTRY;
       98     1289        %INCLUDE KP_MSG;
       99     1382        /**/
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:26   
      100     1383        /*  PARAMETERS  */
      101     1384        /**/
      102     1385    1   DCL ERROR_CODE(0:15) BIT(1) UNAL;
      103     1386        /**/
      104     1387        /*  LOCAL AUTO  */
      105     1388        /**/
      106     1389    1   DCL I UBIN WORD;
      107     1390    1   DCL DRIVE UBIN WORD STATIC;
      108     1391    1   DCL TRACK UBIN WORD STATIC;
      109     1392    1   DCL SECTOR UBIN WORD STATIC;
      110     1393    1   DCL SIDE UBIN WORD STATIC;
      111     1394        /**/
      112     1395        /*  FPTS  */
      113     1396        /**/
      114     1397        /**/
      115     1398        /*  CONSTANTS  */
      116     1399        /**/
      117     1400    1   DCL FMT1 CONSTANT CHAR(0) INIT(
      118     1401    1   '    while writing Track %D Side %D Sector %D on FEP %D Drive %D' );
      119     1402    1   DCL FMT2 CONSTANT CHAR(0) INIT(
      120     1403    1   '    while reading Track %D Side %D Sector %D on FEP %D Drive %D' );
      121     1404    1   DCL FMT3 CONSTANT CHAR(0) INIT(
      122     1405    1   '    while no diskette activity was going on' );
      123     1406    1   DCL FMT4 CONSTANT CHAR(0) INIT(
      124     1407    1   '    while voliniting Track %D on FEP %D Drive %D' );
      125     1408    1   DCL FMT5 CONSTANT CHAR(0) INIT(
      126     1409    1   '    while certifying Track %D Side %D on FEP %D Drive %D' );
      127     1410    1   DCL FMT6 CONSTANT CHAR(0) INIT(
      128     1411    1   '    while UNKNOWN activity on Track %D Side %D Sector %D on FEP %D Drive %D' );
      129     1412    1   DCL FMT7 CONSTANT CHAR(0) INIT(
      130     1413    1   '    during cert2 activity on FEP %D Drive %D' );
      131     1414    1   DCL FMT8 CONSTANT CHAR(0) INIT(
      132     1415    1   '    during cloning at Track %D on FEP %D' );
      133     1416        /* This table has one entry for each bit in the error mask returned           */
      134     1417        /* by the FEP.  The entries must be arranged in bit-position order!           */
      135     1418    1   DCL 1 ERROR_MAP (0:15) CONSTANT,
      136     1419    1         2 CODE SBIN WORD INIT(
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:27   
      137     1420    1           %E$KP_NOT_READY,   /* '8000'X */
      138     1421    1           0,                 /* '4000'X   ATTENTION                             */
      139     1422    1           %E$KP_OVER_RUN,    /* '2000'X */
      140     1423    1           %E$KP_DEL_DATA,    /* '1000'X */
      141     1424    1           %E$KP_READ_ERR,    /* '0800'X */
      142     1425    1           %E$KP_DEV_FAULT,   /* '0400'X */
      143     1426    1           %E$KP_DATA_SYNC,   /* '0200'X */
      144     1427    1           %E$KP_BAD_SRCH,    /* '0100'X */
      145     1428    1           0,                 /* '0080'X   DOUBLE-SIDED DISK                     */
      146     1429    1           0,                 /* '0040'X   RESERVED                              */
      147     1430    1           %E$KP_SEEK_ERR,    /* '0020'X */
      148     1431    1           0,                 /* '0010'X   RESERVED                              */
      149     1432    1           %E$KP_C_MEM_ERR,   /* '0008'X */
      150     1433    1           %E$KP_NO_RSRC,     /* '0004'X */
      151     1434    1           %E$KP_BUS_ERR,     /* '0002'X */
      152     1435    1           %E$KP_U_MEM_ERR);  /* '0001'X */
      153     1436        /**/
      154     1437        /*  ENTRY DCLS  */
      155     1438        /**/
      156     1439        %KP_ENTRIES (OMIT=KPE$ERR_SPLIT);
      157     1545        /**/
      158     1546        /*  BASED  */
      159     1547        /**/
      160     1548        %KP$MSG (NAME = KP$MSG,STCLASS = BASED);
      161     1624        /**/
      162     1625    2             DO I = 0 TO 15;

   1625  3 000002   200004 450100                    STZ     I,,AUTO

      163     1626    2                IF ERROR_CODE(I) = '1'B

   1626  3 000003   200003 470500                    LDP0    @ERROR_CODE,,AUTO
         3 000004   200004 235100                    LDA     I,,AUTO
         3 000005   000000 066505                    CMPB    filb='0'B
         3 000006   000000 000001                    BDSC    0,A,PR0                  by=0,bit=0,n=1
         3 000007   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         3 000010   000022 600000 3                  TZE     s:1629
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:28   
         3 000011   000155 235005 2                  LDA     ERROR_MAP,AL
         3 000012   000022 600000 3                  TZE     s:1629

      164     1627    2                   AND ERROR_MAP.CODE(I) ~= 0 THEN
      165     1628    2                       CALL KPE$ERROR( ERROR_MAP.CODE(I) );

   1628  3 000013   200004 720100                    LXL0    I,,AUTO
         3 000014   000155 631410 2                  EPPR1   ERROR_MAP,X0
         3 000015   200006 451500                    STP1    I+2,,AUTO
         3 000016   200006 630500                    EPPR0   I+2,,AUTO
         3 000017   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000020   000000 701000 xent               TSX1    KPE$ERROR
         3 000021   000000 011000                    NOP     0

      166     1629    2                END;

   1629  3 000022   200004 235100                    LDA     I,,AUTO
         3 000023   000001 035007                    ADLA    1,DL
         3 000024   200004 755100                    STA     I,,AUTO
         3 000025   000020 115007                    CMPA    16,DL
         3 000026   000003 602000 3                  TNC     s:1626

      167     1630        %EJECT;
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:29   
      168     1631        /**/
      169     1632        /* Tell him where he is. */
      170     1633        /**/
      171     1634    1             TRACK = KP_FECG_IN$ -> KP$MSG.HEAD.TRACK_NO;

   1634  3 000027   000000 470400 xsym               LDP0    KP_FECG_IN$
         3 000030   000002 236100                    LDQ     2,,PR0
         3 000031   000022 772000                    QRL     18
         3 000032   000777 376007                    ANQ     511,DL
         3 000033   000001 756000 1                  STQ     TRACK

      172     1635    1             SECTOR = KP_FECG_IN$ -> KP$MSG.HEAD.SECTOR_NO;

   1635  3 000034   000002 236100                    LDQ     2,,PR0
         3 000035   000011 772000                    QRL     9
         3 000036   000777 376007                    ANQ     511,DL
         3 000037   000002 756000 1                  STQ     SECTOR

      173     1636    1             DRIVE = KP_FECG_IN$ -> KP$MSG.HEAD.DRIVE_NO;

   1636  3 000040   000000 236100                    LDQ     0,,PR0
         3 000041   000022 772000                    QRL     18
         3 000042   000777 376007                    ANQ     511,DL
         3 000043   000000 756000 1                  STQ     DRIVE

      174     1637    1             SIDE = KP_FECG_IN$ -> KP$MSG.HEAD.SIDE;

   1637  3 000044   000002 236100                    LDQ     2,,PR0
         3 000045   000033 772000                    QRL     27
         3 000046   000003 756000 1                  STQ     SIDE

      175     1638    2               DO CASE( KP_DISK_ACTIVITY );

   1638  3 000047   000000 235000 xsym               LDA     KP_DISK_ACTIVITY
         3 000050   000010 115007                    CMPA    8,DL
         3 000051   000053 602005 3                  TNC     s:1638+4,AL
         3 000052   000125 710000 3                  TRA     s:1675
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:30   
         3 000053   000125 710000 3                  TRA     s:1675
         3 000054   000063 710000 3                  TRA     s:1640
         3 000055   000070 710000 3                  TRA     s:1647
         3 000056   000075 710000 3                  TRA     s:1654
         3 000057   000101 710000 3                  TRA     s:1656
         3 000060   000106 710000 3                  TRA     s:1661
         3 000061   000113 710000 3                  TRA     s:1667
         3 000062   000120 710000 3                  TRA     s:1671

      176     1639    2                 CASE ( %KP_DISK_WRITING# );

      177     1640    2                   CALL X$WRITE( F_FDS, VECTOR(FMT1),

   1640  3 000063   000014 630400 4                  EPPR0   12
         3 000064   000025 631400 xsym               EPPR1   B_VECTNIL+21
         3 000065   000000 701000 xent               TSX1    X$WRITE
         3 000066   000000 011000                    NOP     0
         3 000067   000131 710000 3                  TRA     s:1682

      178     1641    2                                 VECTOR(TRACK),
      179     1642    2                                 VECTOR(SIDE),
      180     1643    2                                 VECTOR(SECTOR),
      181     1644    2                                 VECTOR(KP_FEP_NO),
      182     1645    2                                 VECTOR(DRIVE) );
      183     1646    2                 CASE ( %KP_DISK_READING# );

      184     1647    2                   CALL X$WRITE( F_FDS, VECTOR(FMT2),

   1647  3 000070   000026 630400 4                  EPPR0   22
         3 000071   000025 631400 xsym               EPPR1   B_VECTNIL+21
         3 000072   000000 701000 xent               TSX1    X$WRITE
         3 000073   000000 011000                    NOP     0
         3 000074   000131 710000 3                  TRA     s:1682

      185     1648    2                                 VECTOR(TRACK),
      186     1649    2                                 VECTOR(SIDE),
      187     1650    2                                 VECTOR(SECTOR),
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:31   
      188     1651    2                                 VECTOR(KP_FEP_NO),
      189     1652    2                                 VECTOR(DRIVE) );
      190     1653    2                 CASE ( %KP_DISK_INACTIVE# );

      191     1654    2                   KP_OUTBUF = FMT3;

   1654  3 000075   040000 100400                    MLR     fill='040'O
         3 000076   000040 000053 2                  ADSC9   FMT3                     cn=0,n=43
         3 000077   000000 000170 xsym               ADSC9   KP_OUTBUF                cn=0,n=120
         3 000100   000131 710000 3                  TRA     s:1682

      192     1655    2                 CASE ( %KP_DISK_VOLINITING#);

      193     1656    2                   CALL X$WRITE( F_FDS, VECTOR(FMT4),

   1656  3 000101   000040 630400 4                  EPPR0   32
         3 000102   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 000103   000000 701000 xent               TSX1    X$WRITE
         3 000104   000000 011000                    NOP     0
         3 000105   000131 710000 3                  TRA     s:1682

      194     1657    2                                 VECTOR(TRACK),
      195     1658    2                                 VECTOR(KP_FEP_NO),
      196     1659    2                                 VECTOR(DRIVE) );
      197     1660    2                 CASE ( %KP_DISK_CERTIFYING#);

      198     1661    2                   CALL X$WRITE( F_FDS, VECTOR(FMT5),

   1661  3 000106   000050 630400 4                  EPPR0   40
         3 000107   000024 631400 xsym               EPPR1   B_VECTNIL+20
         3 000110   000000 701000 xent               TSX1    X$WRITE
         3 000111   000000 011000                    NOP     0
         3 000112   000131 710000 3                  TRA     s:1682

      199     1662    2                                 VECTOR(TRACK),
      200     1663    2                                 VECTOR(SIDE),
      201     1664    2                                 VECTOR(KP_FEP_NO),
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:32   
      202     1665    2                                 VECTOR(DRIVE) );
      203     1666    2                 CASE ( %KP_DISK_CERT2#);

      204     1667    2                   CALL X$WRITE( F_FDS, VECTOR(FMT7),

   1667  3 000113   000060 630400 4                  EPPR0   48
         3 000114   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000115   000000 701000 xent               TSX1    X$WRITE
         3 000116   000000 011000                    NOP     0
         3 000117   000131 710000 3                  TRA     s:1682

      205     1668    2                                 VECTOR(KP_FEP_NO),
      206     1669    2                                 VECTOR(DRIVE) );
      207     1670    2                 CASE ( %KP_DISK_CLONING#);

      208     1671    2                   CALL X$WRITE( F_FDS, VECTOR(FMT8),

   1671  3 000120   000066 630400 4                  EPPR0   54
         3 000121   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000122   000000 701000 xent               TSX1    X$WRITE
         3 000123   000000 011000                    NOP     0
         3 000124   000131 710000 3                  TRA     s:1682

      209     1672    2                                 VECTOR(TRACK),
      210     1673    2                                 VECTOR(KP_FEP_NO) );
      211     1674    2                 CASE ( ELSE );            /* UNKNOWN!                           */

      212     1675    2                   CALL X$WRITE( F_FDS, VECTOR(FMT6),

   1675  3 000125   000074 630400 4                  EPPR0   60
         3 000126   000025 631400 xsym               EPPR1   B_VECTNIL+21
         3 000127   000000 701000 xent               TSX1    X$WRITE
         3 000130   000000 011000                    NOP     0

      213     1676    2                                 VECTOR(TRACK),
      214     1677    2                                 VECTOR(SIDE),
      215     1678    2                                 VECTOR(SECTOR),
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:33   
      216     1679    2                                 VECTOR(KP_FEP_NO),
      217     1680    2                                 VECTOR(DRIVE) );
      218     1681    2                 END;

      219     1682    1             CALL KPE$ERR_TEXT;

   1682  3 000131   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000132   000000 701000 xent               TSX1    KPE$ERR_TEXT
         3 000133   000000 011000                    NOP     0

      220     1683    1   END KPE$ERR_SPLIT;

   1683  3 000134   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:34   
--  Include file information  --

   KP_MSG.:E05TOU  is referenced.
   XUF_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPE$ERR_SPLIT.
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:35   

 **** Variables and constants ****

  ****  Section 001  Data  KPE$ERR_SPLIT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 DRIVE                      2-0-0/w UBIN        r     1 SECTOR
     3-0-0/w UBIN        r     1 SIDE                       1-0-0/w UBIN        r     1 TRACK

  ****  Section 002 RoData KPE$ERR_SPLIT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   155-0-0/w STRC        r     1 ERROR_MAP(0:15)
     0-0-0/c CHAR(63)    r     1 FMT1                      20-0-0/c CHAR(63)    r     1 FMT2
    40-0-0/c CHAR(43)    r     1 FMT3                      53-0-0/c CHAR(48)    r     1 FMT4
    67-0-0/c CHAR(56)    r     1 FMT5                     105-0-0/c CHAR(75)    r     1 FMT6
   130-0-0/c CHAR(44)    r     1 FMT7                     143-0-0/c CHAR(40)    r     1 FMT8

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ERROR_CODE
    *0-0-0/b BIT         r     1 ERROR_CODE(0:15)
     4-0-0/w UBIN        r     1 I

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(1080)  r     1 F_FDS                      0-0-0/w SBIN        r     1 KP_DISK_ACTIVITY
     0-0-0/w PTR         r     1 KP_FECG_IN$                0-0-0/w SBIN        r     1 KP_FEP_NO
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:36   
     0-0-0/c CHAR(120)   r     1 KP_OUTBUF

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(18594) r     1 KP$MSG


   Procedure KPE$ERR_SPLIT requires 93 words for executable code.
   Procedure KPE$ERR_SPLIT requires 8 words of local(AUTO) storage.

    No errors detected in file KPE$ERR_SPLIT.:E05TSI    .
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:37   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:38   
          MINI XREF LISTING

DRIVE
      1390**DCL      1636<<ASSIGN   1640--CALL     1647--CALL     1656--CALL     1661--CALL     1667--CALL
      1675--CALL
ERROR_CODE
      1385**DCL        25--PROC     1626>>IF
ERROR_MAP.CODE
      1419**DCL      1626>>IF       1628<>CALL
FMT1
      1400**DCL      1640--CALL
FMT2
      1402**DCL      1647--CALL
FMT3
      1404**DCL      1654>>ASSIGN
FMT4
      1406**DCL      1656--CALL
FMT5
      1408**DCL      1661--CALL
FMT6
      1410**DCL      1675--CALL
FMT7
      1412**DCL      1667--CALL
FMT8
      1414**DCL      1671--CALL
F_FDS
      1130**DCL      1640<>CALL     1647<>CALL     1656<>CALL     1661<>CALL     1667<>CALL     1671<>CALL
      1675<>CALL
I
      1389**DCL      1625<<DOINDEX  1626>>IF       1626>>IF       1628>>CALL
KP$MSG.HEAD.DRIVE_NO
      1552**DCL      1636>>ASSIGN
KP$MSG.HEAD.SECTOR_NO
      1567**DCL      1635>>ASSIGN
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:39   
KP$MSG.HEAD.SIDE
      1565**DCL      1637>>ASSIGN
KP$MSG.HEAD.TRACK_NO
      1566**DCL      1634>>ASSIGN
KP$MSG.TDATA
      1575**DCL      1576--REDEF    1577--REDEF    1582--REDEF    1596--REDEF    1601--REDEF    1605--REDEF
      1611--REDEF    1614--REDEF
KPE$ERROR
      1462**DCL-ENT  1628--CALL
KPE$ERR_TEXT
      1468**DCL-ENT  1682--CALL
KP_DISK_ACTIVITY
       885**DCL      1638>>DOCASE
KP_EXIT.V.STEPCC#
       952**DCL       952--REDEF
KP_FECG_IN$
       878**DCL      1634>>ASSIGN   1635>>ASSIGN   1636>>ASSIGN   1637>>ASSIGN
KP_FEP_NO
       880**DCL      1640--CALL     1647--CALL     1656--CALL     1661--CALL     1667--CALL     1671--CALL
      1675--CALL
KP_INBUF
       874**DCL       874--REDEF
KP_OUTBUF
       875**DCL      1654<<ASSIGN
KP_RU_KEY
       882**DCL       883--REDEF
KP_RU_KEY.NODE
       882**DCL       882--REDEF
KP_RU_KEY.PAGE
       883**DCL       883--REDEF
KP_RU_OUTBUF
       876**DCL       876--REDEF
SECTOR
      1392**DCL      1635<<ASSIGN   1640--CALL     1647--CALL     1675--CALL
SIDE
      1393**DCL      1637<<ASSIGN   1640--CALL     1647--CALL     1661--CALL     1675--CALL
PL6.E3A0      #002=KPE$ERR_SPLIT File=KPE$ERR_SPLIT.:E05TSI                      WED 07/30/97 01:18 Page:40   
TRACK
      1391**DCL      1634<<ASSIGN   1640--CALL     1647--CALL     1656--CALL     1661--CALL     1671--CALL
      1675--CALL
X$WRITE
      1287**DCL-ENT  1640--CALL     1647--CALL     1656--CALL     1661--CALL     1667--CALL     1671--CALL
      1675--CALL
