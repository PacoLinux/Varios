

15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         1    
    1      /*M* VP_MACRO_C This module contains macros used exclusively by PCL   */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      %MACRO OCB(FPTN = OCB,STCLASS = STATIC SYMDEF);
    8      DCL 1 FPTN STCLASS DALIGNED,
    9            2 DCBNM UBIN,
   10            2 DCBPTR$ PTR,
   11            2 CRPT UBIN WORD,
   12            2 RECSIZE,                        /* Size of data record                */
   13              3 MIN_SPEC BIT(1) ALIGNED,
   14              3 MIN_SIZE SBIN,
   15              3 MAX_SPEC BIT(1),
   16              3 MAX_SIZE SBIN,
   17            2 CS,
   18              3 SPEC SBIN WORD,
   19              3 ID,
   20                4 L UBIN BYTE UNAL,
   21                4 C CHAR(4),
   22              3 CURRENT SBIN WORD,
   23              3 N SBIN WORD,
   24              3 K SBIN WORD,
   25            2 CR_NCR SBIN WORD,
   26            2 BIN SBIN WORD,                  /* 0=DEFAULT, 1=NBIN, 2=BIN           */
   27            2 TRANS SBIN WORD,                /* 0=DEFAULT, 1=NTRANS, 2=TRANS       */
   28            2 COMP SBIN WORD,                 /* 0=DEFAULT, 1=NCOMP, 2=COMPRESSED   */
   29            2 NEWKEY SBIN WORD,
   30            2 VFC_CHAR CHAR(1) CALIGNED,      /* VFC character to apply             */
   31            2 VFC_USE SBIN WORD,              /* 0=IGNORE, 1=USE FOR DEFAULT,       */
   32                                              /* 2=USE FOR ALL RECORDS              */
   33            2 VFC UBIN(2) UNAL,               /* 0=DEFAULT, 1=NVFC, 2=VFC, 3=SVFC   */
   34            2 FVFC BIT(1),
   35            2 NFA BIT(1) ALIGNED,
   36            2 KEYS SBIN WORD,
   37            2 UC_LC SBIN WORD,
15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         2    
   38            2 LN,
   39              3 KEY,
   40                4 LEN UBIN BYTE UNAL,
   41                4 CURRENT UBIN(27) UNAL,
   42              3 CURRENT SBIN WORD,
   43              3 N SBIN WORD,
   44              3 K SBIN WORD,
   45            2 NB SBIN WORD,
   46            2 ORG SBIN WORD,
   47            2 OCT_HEX,
   48              3 TYPE SBIN WORD,               /* 0=NORMAL, 1=OCTAL, 2=X, 3=X1       */
   49              3 TEXT SBIN WORD,               /* 0=DEFAULT, 1=NTEXT, 2=TEXT         */
   50              3 DUPE SBIN WORD,               /* 0=DEFAULT, 1=NDUPE, 2=DUPE         */
   51              3 * SBIN WORD,                  /* SPARE                              */
   52              3 * SBIN WORD,                  /* SPARE                              */
   53            2 RELEASE UBIN BYTE UNAL,
   54            2 TYPE CHAR(2),
   55            2 TYPE_BIT REDEF TYPE BIT(18),
   56            2 GHSTACS UBIN,
   57            2 ACSVEH,                         /* ACCESS VEHICLE CONTROL LIST        */
   58              3 LEN UBIN WORD,                /* Length in bytes                    */
   59              3 LIST(0:49) UBIN WORD,
   60            2 ACCESS,                         /* ACCOUNT ACCESS CONTROL LIST        */
   61              3 LEN UBIN WORD,                /* Length in bytes                    */
   62              3 LIST(0:19),
   63                4 SPEC_TYPE UBIN(9) UNAL,
   64                4 CNTLS BIT(18),
   65                4 ACCT CHAR(8),
   66            2 TX SBIN WORD ALIGNED,
   67            2 BACKUP SBIN WORD,
   68            2 LRDL0 SBIN,
   69            2 LSLIDE SBIN,
   70            2 SPARE SBIN,
   71            2 XTNSIZE SBIN,
   72            2 EXPIRE SBIN WORD,
   73            2 REBUILD BIT(1) ALIGNED,
   74            2 ALTBLD SBIN,
15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         3    
   75            2 MOD_NAME,
   76              3 LEN UBIN BYTE UNAL,
   77              3 STRING CHAR(31),
   78            2 MOD_PASS CHAR(8),
   79            2 MOD_PASS_FLG BIT(1) ALIGNED,
   80            2 COPIES UBIN(9) ALIGNED,         /* COPIES to UR devices               */
   81            2 COPIES_FLG BIT(1) ALIGNED,      /* A COPIES spec exists               */
   82            2 FORM CHAR(6) ALIGNED,
   83            2 FORM_FLG BIT(1) ALIGNED,
   84            2 ACSVEH_REPLACE BIT(1) ALIGNED,  /* Replace any existing ACS controls  */
   85            2 ACSVEH_FLG BIT(1) ALIGNED,      /* New ACS controls exist             */
   86            2 ACCESS_REPLACE BIT(1) ALIGNED,
   87            2 ACCESS_FLG BIT(1) ALIGNED,
   88            2 DEV_MASK ALIGNED,               /* Mask of device attributes          */
   89              3 * BIT(2),
   90              3 CG BIT(1),                    /* COMGROUP                           */
   91              3 DEVICE BIT(1),                /* Non FT DEVICE                      */
   92              3 IC BIT(1),                    /* IC set                             */
   93              3 LP BIT(1),                    /* LP set                             */
   94              3 FT BIT(1),                    /* Free tape                          */
   95              3 LT BIT(1),                    /* Labeled tape                       */
   96              3 FILE BIT(1),                  /* Disc file                          */
   97            2 FLAVOR ALIGNED,                 /* Any bits that apply                */
   98              3 CARRY_ATTR BIT(1),            /* Carry record/file attributes       */
   99              3 FORMATTED BIT(1),             /* OCT/X/X1/K formatting              */
  100              3 GRANB BIT(1),                 /* Org likes I/O in granl-sized chunk */
  101              3 JE BIT(1),                    /* JE or JF                           */
  102              3 MANAGED BIT(1),               /* Managed tape of disc               */
  103              3 FFTAPE BIT(1),                /* FREE-FREE tape                     */
  104              3 TAPE BIT(1),                  /* Any kind of tape                   */
  105              3 UR BIT(1),                    /* Treatable as UR                    */
  106              3 NPRECORDF BIT(1),             /* Unable to position foreward        */
  107              3 NPRECORDB BIT(1),             /* Unable to position backward        */
  108            2 ANSISPAN BIT(1) UNAL,           /* ANSI/IBM spanning data             */
  109            2 * BIT(8) UNAL,                  /* SPARE                              */
  110            2 * BIT(9) UNAL,                  /* SPARE                              */
  111            2 WRAP SBIN WORD,                 /* 0=DEFAULT, 1=NWRAP, 2=WRAP, 3=WORD */
15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         4    
  112            2 WIDTH,                          /* Width of output place              */
  113              3 SPEC BIT(1) ALIGNED,
  114              3 SIZE SBIN,
  115            2 HEAD SBIN WORD,                 /* 0=DEFAULT, 1=NHEAD, 2=HEAD         */
  116            2 PAGE SBIN WORD,                 /* 0=DEFAULT, 1=NPAGE, 2=PAGE         */
  117            %KEYOPTS (FPTN = KEY ,LVL = 2, LAST = ",",STCLASS = STCLASS);
  118            2 SUMMARY SBIN WORD,              /* 0=DEFAULT, 1=SUMMARY, 2=NSUMMARY   */
  119            2 ERR_SAVE SBIN WORD,             /* 0=DEFAULT, 1=ALWAYS SAVE OUTFILE   */
  120            2 SPARE3 SBIN WORD,               /* SPARE:  FOR PATCHING ONLY          */
  121            2 SPARE2 SBIN WORD,               /* SPARE:  FOR PATCHING ONLY          */
  122            2 SPARE1 SBIN WORD;               /* SPARE: FOR PATCHING ONLY (AT END)  */
  123      %MEND;
  124      %EJECT;

15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         5    
  125      %MACRO ICB(FPTN = ICB,STCLASS = STATIC SYMDEF);
  126      DCL 1 FPTN STCLASS DALIGNED,
  127            2 EBCDIC BIT(1) ALIGNED,
  128            2 BIN BIT(1) ALIGNED,
  129            2 NSPAN BIT(1) ALIGNED,
  130            2 NBLOCK BIT(1) ALIGNED,
  131            2 TRANS BIT(1) ALIGNED,
  132            2 NCNVRT BIT(1) ALIGNED,
  133            2 SHARE SBIN,
  134            2 CRPT UBIN WORD,
  135            2 DEOD SBIN WORD,
  136            2 PHYSICAL SBIN WORD,
  137            2 BLKL SBIN WORD,
  138            2 RECL SBIN WORD,
  139            2 A_EA_C SBIN WORD,               /* 0=DEFAULT, 3=A, 1=COL, 4=EA, 5=FA  */
  140            2 HEAD_OPT SBIN WORD,             /* 0=DEFAULT, 1=NHEAD, 2=HEAD         */
  141            2 COLS SBIN WORD,
  142            2 SPEC_TYPE SBIN WORD,
  143            2 FID,
  144              3 LEN UBIN BYTE UNAL,
  145              3 STRING CHAR(79),
  146              3 STR_ARY(0:78) REDEF STRING CHAR(1),
  147            2 FSN ALIGNED,
  148              3 START UBIN(18) UNAL,
  149              3 FINISH UBIN(18) UNAL,
  150            2 KEY_SEL BIT(1) ALIGNED,
  151            2 LREC_SEL BIT(1) ALIGNED,
  152            2 REC_SEL,
  153              3 CNT SBIN WORD,
  154              3 SPEC(0:9),
  155                4 TYPE SBIN WORD,
  156                4 START,
  157                  5 KEY$ PTR UNAL,
  158                  5 SEQ UBIN WORD UNAL,
  159                4 FINISH,
  160                  5 KEY$ PTR UNAL,
  161                  5 SEQ UBIN WORD UNAL,
15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         6    
  162            2 SPAREO3 SBIN WORD,              /* SPARE:  for patching only          */
  163            2 SPAREO2 SBIN WORD,              /* SPARE:  for patching only          */
  164            2 SPAREO1 SBIN WORD,              /* SPARE:  for patching only          */
  165            2 ORG(0:35) BIT(1) UNAL,
  166            2 ORG_NEG BIT(1) ALIGNED,
  167            2 FFID BIT(1) ALIGNED,
  168            2 NAME_RANGE_END CHAR(31),
  169            2 TYPE,
  170              3 COUNT SBIN WORD,
  171              3 NEG BIT(1) ALIGNED,
  172              3 STRING(0:9) CHAR(2),
  173            2 VOL UBIN BYTE UNAL,
  174            2 FTORG UBIN BYTE UNAL,
  175            2 DATE,
  176              3 TYPE UBIN WORD,
  177              3 ROUNDING_TYPE UBIN WORD,      /* See VPD$PROCESS_DATE               */
  178              3 RELATION UBIN WORD,
  179              3 UTS UBIN WORD,
  180              3 TEXT CHAR(10),
  181            2 CAT UBIN BYTE UNAL,
  182            2 SRCHCOND UNAL,                  /* MUST BE IN SAME POSITION AS M$OPEN */
  183              3 DELF BIT(1) UNAL,
  184              3 NOLIST BIT(1) UNAL,
  185              3 BUF BIT(1) UNAL,
  186              3 * BIT(1) UNAL,
  187              3 BAD BIT(1) UNAL,
  188              3 QS BIT(1) UNAL,
  189              3 * BIT(2) UNAL,
  190              3 ARCHIVE BIT(1) UNAL,
  191              3 ANYF BIT(1) UNAL,
  192              3 * BIT(7) UNAL,
  193              3 REV BIT(1) UNAL,
  194            2 * BIT(1) ALIGNED,               /* SPARE                              */
  195            2 DEV_MASK ALIGNED,
  196              3 DEVICE BIT(1),                /* Default, CG or non-tape device     */
  197              3 MAN_DISC BIT(1),              /* Managed disc                       */
  198              3 MAN_TAPE BIT(1),              /* Managed tape (LT)                  */
15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         7    
  199              3 DEV_TAPE BIT(1),              /* Device tape (FT, MT, 9T)         */
  200              3 * BIT(5),
  201            2 FLAVOR ALIGNED,                 /* Any bits that apply                */
  202              3 * BIT(7) UNAL,                /* SPARE!                             */
  203              3 LTOORG BIT(1) UNAL,           /* This ORG only usable for LT        */
  204              3 KNOWKEY BIT(1) UNAL,          /* Known key type:  KEY, IDX, IREL    */
  205              3 IOERROK BIT(1),               /* Tape I/O error OK flag             */
  206              3 GRANB BIT(1) UNAL,            /* Input gran-size blocks             */
  207              3 KEY_USABLE BIT(1),            /* A key may be used for M$READ       */
  208              3 FFTAPE BIT(1),                /* FREE-FREE tape                     */
  209              3 HOLY_ORG BIT(1),              /* ORG allows 'holes' (E$DI)          */
  210              3 MANAGED BIT(1),               /* Managed tape or disc               */
  211              3 TAPE BIT(1),                  /* Any kind of tape                   */
  212              3 UR BIT(1),                    /* Treatable as UR                    */
  213              3 NPRECORDF BIT(1),             /* Unable to position foreward        */
  214              3 NPRECORDB BIT(1),             /* Unable to position backward        */
  215            2 CREATOR_SEL UBIN WORD ALIGNED,  /* 0=UNUSED, 1=MYSELF, 2=SPECIFIC     */
  216            2 CREATOR_NEG BIT(1) ALIGNED,
  217            2 CREATOR CALIGNED,
  218              3 C UBIN BYTE CALIGNED,
  219              3 TEXT CHAR(21) CALIGNED,       /* 12 + 1 + 8                         */
  220            2 FPARAM_REQUIRED ALIGNED,
  221              3 FOR_SELECTION BIT(1) UNAL,    /* To pick the files we want          */
  222              3 FOR_OPERATION BIT(1) UNAL,    /* To perform command itself          */
  223            2 SORTING_ORDER,
  224              3 COUNT SBIN WORD,
  225              3 FIELD (0:10),
  226                4 DESCENDING BIT(1),
  227                4 TYPE SBIN WORD,
  228            2 CLPOS SBIN WORD,                /* 0=DEFAULT,1=EOF,2=BOF,3=BOT        */
  229            2 NUMFIELDS SBIN,                 /* Number of fields in IREL file      */
  230            2 TAPEIOERR UBIN BYTE CALIGNED,   /* Used in displaying tape I/O errors */
  231            2 IGNOREFSN BIT(1) ALIGNED,       /* Should TFM ignore FSN's            */
  232            2 ANSISPAN BIT(1) UNAL,           /* ANSI/IBM spanning data             */
  233            2 * BIT(8) UNAL,                  /* SPARE                              */
  234            2 * BIT(9) UNAL,                  /* SPARE                              */
  235            2 SPARE3 SBIN WORD,               /* SPARE:  for patching only          */
15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         8    
  236            2 SPARE2 SBIN WORD,               /* SPARE:  for patching only          */
  237            2 SPARE1 SBIN WORD;               /* SPARE:  for patching only, at END  */
  238      %MEND;
  239      %EJECT;

15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         9    
  240      %MACRO KEYOPTS(FPTN = KEYOPTS,
  241                  LVL = 1,
  242                  LAST = ";",
  243                  STCLASS = STATIC);
  244       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  245       %IF (SUBSTR(STR,0,6)='STATIC') OR
  246       (SUBSTR(STR,0,8)='CONSTANT') OR
  247       (SUBSTR(STR,0,3)='EXT');
  248       %LSET INIT=CHARTEXT('INIT');
  249       %ELSE;
  250       %LSET INIT=CHARTEXT('/*');
  251       %ENDIF;
  252
  253      %IF LVL = 1;
  254
  255      DCL 1 FPTN ALIGNED STCLASS,
  256
  257      %ELSE;
  258
  259              %LVL FPTN ALIGNED,
  260
  261      %ENDIF;
  262
  263              %(LVL+1) FORMAT ALIGNED,        /* '0'=DEFAULT                        */
  264                %(LVL+2) X BIT(1) UNAL,       /* X                                  */
  265                %(LVL+2) X1 BIT(1) UNAL,      /* X1                                 */
  266                %(LVL+2) O BIT(1) UNAL,       /* OCTAL                              */
  267                %(LVL+2) C BIT(1) UNAL,       /* CHARACTER                          */
  268                %(LVL+2) S BIT(1) UNAL,       /* SEQUENCE NUMBER                    */
  269                %(LVL+2) E BIT(1) UNAL,       /* EDIT                               */
  270                %(LVL+2) * BIT(3) UNAL,       /* (SPARE)                            */
  271              %(LVL+1) DVBYTE SBIN WORD,      /* 0=DEFAULT, 1=NO, 2=YES             */
  272              %(LVL+1) RECSIZ SBIN WORD,      /* 0=DEFAULT, 1=NO, 2=YES             */
  273              %(LVL+1) ONDATA SBIN WORD LAST  /* 0=DEFAULT, 1=NO, 2=YES             */
  274      %MEND;
  275      %EJECT;

15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         10   
  276      %MACRO PCL_SN(FPTN = PCL_SN,
  277                  LVL = 1,
  278                  LAST = ";",
  279                  STCLASS = STATIC);
  280       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  281       %IF (SUBSTR(STR,0,6)='STATIC') OR
  282       (SUBSTR(STR,0,8)='CONSTANT') OR
  283       (SUBSTR(STR,0,3)='EXT');
  284       %LSET INIT=CHARTEXT('INIT');
  285       %ELSE;
  286       %LSET INIT=CHARTEXT('/*');
  287       %ENDIF;
  288
  289      %IF LVL = 1;
  290
  291      DCL 1 FPTN ALIGNED STCLASS,
  292
  293      %ELSE;
  294
  295              %LVL FPTN,
  296
  297      %ENDIF;
  298
  299                %(LVL+1) COUNT SBIN WORD UNAL %INIT(0)%CHARTEXT('/**/'),
  300                %(LVL+1) SN(0:19) CHAR(6) UNAL %INIT(' '*20)%CHARTEXT('/**/'),
  301                %(LVL+1) SNLIST REDEF SN CHAR(120) UNAL;
  302      %MEND;
  303      /**/
  304      /*  This MACRO knows how to DCL all the entry points in PCL.                  */
  305      /**/
  306      %MACRO VP_ENTRIES (OMIT=NIL);
  307      %IF TEXTCHAR(OMIT)~='VPC$CALL_OPEN';
  308         DCL VPC$CALL_CLOSE ENTRY(1) ALTRET;
  309         DCL VPC$CALL_OPEN ENTRY (1) ALTRET;
  310         %ENDIF;
  311      %IF TEXTCHAR(OMIT)~='VPD$CONTINUE';
  312         DCL VPD$CONTINUE ENTRY;
15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         11   
  313         %ENDIF;
  314      %IF TEXTCHAR(OMIT)~='VPC$SETOUT';
  315         DCL VPC$SETMOD ENTRY(1);
  316         DCL VPC$SETOUT ENTRY(1);
  317         %ENDIF;
  318      %IF TEXTCHAR(OMIT)~='VPD$ABORT';
  319         DCL VPD$ABORT ENTRY;
  320         %ENDIF;
  321      %IF TEXTCHAR(OMIT)~='VPD$ANAL_NAME';
  322         DCL VPD$ANAL_NAME ENTRY(2);
  323         %ENDIF;
  324      %IF TEXTCHAR(OMIT)~='VPD$BREAK';
  325         DCL VPD$BREAK ENTRY ALTRET;
  326         %ENDIF;
  327      %IF TEXTCHAR(OMIT)~='VPD$CHECK_VOL';
  328         DCL VPD$CHECK_VOL ENTRY(5);
  329         %ENDIF;
  330      %IF TEXTCHAR(OMIT)~='VPD$CLOSE_OUT';
  331         DCL VPD$CLOSE_OUT ENTRY(1);
  332         %ENDIF;
  333      %IF TEXTCHAR(OMIT)~='VPD$CLOBBERLZ';
  334         DCL VPD$CLOBBERLZ ENTRY(1);
  335         %ENDIF;
  336      %IF TEXTCHAR(OMIT)~='VPD$COUNTER_BUMP';
  337         DCL VPD$COUNTER_BUMP ENTRY(1);
  338         DCL VPD$COUNTER_PRINT ENTRY(1);
  339         %ENDIF;
  340      %IF TEXTCHAR(OMIT)~='VPD$ENLARGE_BUF';
  341         DCL VPD$ENLARGE_BUF ENTRY(1);
  342         DCL VPD$INIT_BUF ENTRY;
  343         DCL VPD$MINIMIZE_BUF ENTRY;
  344         %ENDIF;
  345      %IF TEXTCHAR(OMIT)~='VPD$FID';
  346         DCL VPD$FID ENTRY(2) ALTRET;
  347         %ENDIF;
  348      %IF TEXTCHAR(OMIT)~='VPD$OUT_NAMES';
  349         DCL VPD$FINISH_NLIST ENTRY(2);
15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         12   
  350         DCL VPD$OUT_NAMES ENTRY(2);
  351         %ENDIF;
  352      %IF TEXTCHAR(OMIT)~='VPD$GET_BUF';
  353         DCL VPD$GET_BUF ENTRY(2) ALTRET;
  354         DCL VPD$REL_BUF ENTRY(2) ALTRET;
  355         %ENDIF;
  356      %IF TEXTCHAR(OMIT)~='VPD$GET_INPUT';
  357         DCL VPD$GET_INPUT ENTRY(1);
  358         %ENDIF;
  359      %IF TEXTCHAR(OMIT)~='VPD$GET_IN_DEV_MASK';
  360         DCL VPD$GET_IN_DEV_MASK ENTRY(1);
  361         %ENDIF;
  362      %IF TEXTCHAR(OMIT)~='VPD$GET_KEY_OR_NUM';
  363         DCL VPD$GET_KEY_OR_NUM ENTRY(2) ALTRET;
  364         %ENDIF;
  365      %IF TEXTCHAR(OMIT)~='VPD$GET_OUT_FLAVOR';
  366         DCL VPD$GET_OUT_FLAVOR ENTRY;
  367         %ENDIF;
  368      %IF TEXTCHAR(OMIT)~='VPD$GET_SPEC_BUF';
  369         DCL VPD$GET_SPEC_BUF ENTRY(2);
  370         %ENDIF;
  371      %IF TEXTCHAR(OMIT)~='VPD$INITIALIZE';
  372         DCL VPD$INITIALIZE ENTRY;
  373         %ENDIF;
  374      %IF TEXTCHAR(OMIT)~='VPD$INIT_STD_FILE';
  375         DCL VPD$INIT_STD_FILE ENTRY(1);
  376         %ENDIF;
  377      %IF TEXTCHAR(OMIT)~='VPD$MAKE_WILD_OUT';
  378         DCL VPD$MAKE_WILD_OUT ENTRY(2);
  379         %ENDIF;
  380      %IF TEXTCHAR(OMIT)~='VPD$PROCESS_CONTROLS';
  381      DCL VPD$PROCESS_CONTROLS ENTRY(2);
  382      %ENDIF;
  383      %IF TEXTCHAR(OMIT)~='VPD$PROCESS_DATE';
  384         DCL VPD$PROCESS_DATE ENTRY(4) ALTRET;
  385         DCL VPD$ROUND_DATE ENTRY(4) ALTRET;
  386         %ENDIF;
15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         13   
  387      %IF TEXTCHAR(OMIT)~='VPD$TEXTC_CHARBIN';
  388         DCL VPD$TEXTC_CHARBIN ENTRY(4) ALTRET;
  389         %ENDIF;
  390      %IF TEXTCHAR(OMIT)~='VPD$U$';
  391         DCL VPD$U$ ENTRY(1);
  392         %ENDIF;
  393      %IF TEXTCHAR(OMIT)~='VPD$WILD_COMPARE';
  394         DCL VPD$WILD_COMPARE ENTRY(2) ALTRET;
  395         %ENDIF;
  396      %IF TEXTCHAR(OMIT)~='VPE$COPY';
  397         DCL VPE$COPY ENTRY;
  398         %ENDIF;
  399      %IF TEXTCHAR(OMIT)~='VPE$COPYALL';
  400         DCL VPE$COPYALL ENTRY;
  401         DCL VPE$COPYSTD ENTRY;
  402         %ENDIF;
  403      %IF TEXTCHAR(OMIT)~='VPE$READ_WRITE';
  404         DCL VPE$READ_WRITE ENTRY ALTRET;
  405         %ENDIF;
  406      %IF TEXTCHAR(OMIT)~='VPE$FMT_ABORT';
  407      DCL VPE$FMT_ABORT ENTRY(4);
  408      %ENDIF;
  409      %IF TEXTCHAR(OMIT)~='VPF$CALL_OPEN';
  410         DCL VPF$CALL_CLOSE ENTRY(1) ALTRET;
  411         DCL VPF$CALL_OPEN ENTRY(1) ALTRET;
  412         %ENDIF;
  413      %IF TEXTCHAR(OMIT)~='VPF$CLOSE_IN';
  414         DCL VPF$CLOSE_IN ENTRY(1) ALTRET;
  415         %ENDIF;
  416      %IF TEXTCHAR(OMIT)~='VPF$GET_NEXT_SPEC';
  417         DCL VPF$GET_NEXT_SPEC ENTRY(2);
  418         %ENDIF;
  419      %IF TEXTCHAR(OMIT)~='VPF$OPEN_NEXT';
  420         DCL VPF$OPEN_NEXT ENTRY(3);
  421         %ENDIF;
  422      %IF TEXTCHAR(OMIT)~='VPF$PROCESS_INPUT_OPT';
  423         DCL VPF$PROCESS_INPUT_OPT ENTRY(1) ALTRET;
15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         14   
  424         %ENDIF;
  425      %IF TEXTCHAR(OMIT)~='VPF$SET_FROM_INFO';
  426         DCL VPF$SET_FROM_INFO ENTRY(1);
  427         %ENDIF;
  428      %IF TEXTCHAR(OMIT)~='VPG$SET_UP_WRITE';
  429         DCL VPG$SET_UP_WRITE ENTRY;
  430         %ENDIF;
  431      %IF TEXTCHAR(OMIT)~='VPG$WRITE_OUT';
  432         DCL VPG$WRITE_OUT ENTRY(2);
  433         %ENDIF;
  434      %IF TEXTCHAR(OMIT)~='VPH$GET_LIST_BUFS';
  435         DCL VPH$GET_LIST_BUFS ENTRY(1);
  436         %ENDIF;
  437      %IF TEXTCHAR(OMIT)~='VPH$LIST';
  438         DCL VPH$LIST ENTRY;
  439         DCL VPH$LISTSTD ENTRY;
  440         DCL VPH$REVIEW ENTRY;
  441         DCL VPH$REVIEWSTD ENTRY;
  442         %ENDIF;
  443      %IF TEXTCHAR(OMIT)~='VPI$DELETE';
  444         DCL VPI$DELETE ENTRY;
  445         DCL VPI$DELETESTD ENTRY;
  446         %ENDIF;
  447      %IF TEXTCHAR(OMIT)~='VPI$DELETE_SPEC';
  448         DCL VPI$DELETE_SPEC ENTRY;
  449         %ENDIF;
  450      %IF TEXTCHAR(OMIT)~='VPJ$MOUNT';
  451         DCL VPJ$MOUNT ENTRY(1);
  452         %ENDIF;
  453      %IF TEXTCHAR(OMIT)~='VPJ$SCAN';
  454         DCL VPJ$SCAN ENTRY;
  455         %ENDIF;
  456      %IF TEXTCHAR(OMIT)~='VPJ$SPE';
  457         DCL VPJ$SPE ENTRY;
  458         DCL VPJ$SPF ENTRY;
  459         DCL VPJ$SPR ENTRY;
  460         %ENDIF;
15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         15   
  461      %IF TEXTCHAR(OMIT)~='VPJ$WEOF';
  462         DCL VPJ$WEOF ENTRY;
  463         %ENDIF;
  464      %IF TEXTCHAR(OMIT)~='VPK$DELREC';
  465         DCL VPK$DELREC ENTRY;
  466         %ENDIF;
  467      %IF TEXTCHAR(OMIT)~='VPK$LINK';
  468         DCL VPK$LINK ENTRY;
  469         %ENDIF;
  470      %IF TEXTCHAR(OMIT)~='VPK$MODIFY';
  471         DCL VPK$MODIFY ENTRY;
  472         %ENDIF;
  473      %IF TEXTCHAR(OMIT)~='VPK$PCL_INVOCATION';
  474         DCL VPK$PCL_INVOCATION ENTRY;
  475         %ENDIF;
  476      %IF TEXTCHAR(OMIT)~='VPK$READ';
  477         DCL VPK$READ ENTRY;
  478         %ENDIF;
  479      %IF TEXTCHAR(OMIT)~='VPK$STATUS';
  480         DCL VPK$STATUS ENTRY;
  481         %ENDIF;
  482      %IF TEXTCHAR(OMIT)~='VPK$TX';
  483         DCL VPK$TX ENTRY;
  484         %ENDIF;
  485      %IF TEXTCHAR(OMIT)~='VPL$ERR_PROC';
  486         DCL VPL$ERR_FETCH ENTRY(8);
  487         DCL VPL$ERR_NO_PRINT ENTRY(8);
  488         DCL VPL$ERR_PROC ENTRY(8);
  489         DCL VPL$ERR_SEV_HANDLER ENTRY(8);
  490         DCL VPL$QUEST ENTRY;
  491         %ENDIF;
  492      %IF TEXTCHAR(OMIT)~='VPL$HELP';
  493         DCL VPL$HELP ENTRY;
  494         %ENDIF;
  495      %IF TEXTCHAR(OMIT)~='VPL$TRAP';
  496         DCL VPL$TRAP ENTRY ASYNC;
  497         %ENDIF;
15:20 JUL 28 '97 VP_MACRO_C.:E05SI                                         16   
  498      %IF TEXTCHAR(OMIT)~='VPD$MNG_CRPT';
  499         DCL VPD$MNG_CRPT ENTRY(2) ALTRET;
  500         %ENDIF;
  501      %IF TEXTCHAR(OMIT)~='VPF$SORT_FID';
  502         DCL VPF$SORT_FID ENTRY(2);
  503         %ENDIF;
  504      %IF TEXTCHAR(OMIT)~='VPD$DECI_MUNGE';
  505         DCL VPD$DECI_MUNGE ENTRY(4) ALTRET;
  506         %ENDIF;
  507      %IF TEXTCHAR(OMIT)~='VPD$FETCH_CREATOR';
  508         DCL VPD$FETCH_CREATOR ENTRY(1) ALTRET;
  509         %ENDIF;
  510      %IF TEXTCHAR(OMIT)~='VPD$INIT_COMMANDS';
  511         DCL VPD$INIT_COMMANDS ENTRY;
  512         %ENDIF;
  513      %MEND;

