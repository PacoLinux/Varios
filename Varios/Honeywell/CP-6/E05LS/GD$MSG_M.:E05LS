

14:32 JUL 28 '97 GD$MSG_M.:E05SI                                           1    
    1      /*M* GD_MSG_M Macro to gen message exchanged between host and us              */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X*             */
    8      /*                                                                            */
    9      %EQU GD_MSG_MSIZE=209;                  /* Max message size, 2-byte chunks    */
   10      %MACRO GD$MSG(FPTN=GD$MSG,STCLASS=BASED,L6(YES='1'B,NO='0'B)='1'B,L6PTR=PTR);
   11      %IF NOT(L6);
   12      %LSET BITSPER2BYT=%CHARTEXT('18');
   13      %LSET BITORPTR=%CHARTEXT('UBIN(36) UNAL');
   14      %LSET BITSPER2WRD=%CHARTEXT('36');
   15      %LSET BITSPERHALF=%CHARTEXT('17');
   16      %LSET BITSPERBYT=%CHARTEXT('9');
   17      %ELSE;
   18      %LSET BITSPER2BYT=%CHARTEXT('16');
   19      %LSET BITORPTR=%CHARTEXT(%TEXTCHAR(L6PTR));
   20      %LSET BITSPER2WRD=%CHARTEXT('32');
   21      %LSET BITSPERHALF=%CHARTEXT('15');
   22      %LSET BITSPERBYT=%CHARTEXT('8');
   23      %ENDIF;
   24      %LSET DISPMEM_DD_SIZE=%CHARTEXT('132'); /* 2-byte chunks                      */
   25      %LSET LETMEM_DD_SIZE=%CHARTEXT('117');  /* 2-byte chunks                      */
   26      %LSET IFSPEC_DD_SIZE=%CHARTEXT('117');  /* 2-byte chunks                      */
   27      /**/
   28      /*  This message is exchanged between the debugging code in the FEP           */
   29      /*  being debugged and the remote debugger in the HOST.  One structure        */
   30      /*  contains all the possible message formats.                                */
   31      /**/
   32      /*  WARNING:  The L66 version of this structure is NOT compatible with        */
   33      /*  the L6 version.  Some bit positions don't map properly from L6 into L66.  */
   34      /*  The 8/9 size adjustment part of this MACRO works, so the L66 version      */
   35      /*  may be used to define an I/O buffer that is packed and unpacked en-mass   */
   36      /*  between the L6 version.  Any code that accesses individual fields in      */
   37      /*  in the structure should use the L6 version.                               */
14:32 JUL 28 '97 GD$MSG_M.:E05SI                                           2    
   38      /**/
   39      DCL 1 FPTN STCLASS ALIGNED,
   40            2 FNC UBIN(%BITSPERBYT) UNAL,     /* Type of message                    */
   41            2 SUBFNC UBIN(%BITSPERBYT) UNAL,  /* Subtype of message                 */
   42            2 SUBFB REDEF SUBFNC,            /* Used for GORQS to determine steps or
   43                                                addresses                           */
   44      %IF NOT(L6);
   45              3 * BIT(1) UNAL,
   46      %ENDIF;
   47              3 POSTASSOC BIT(1) UNAL,
   48                          /* This bit shouldn't be used if matters for L6 XDELTA    */
   49              3 SHARED BIT(1) UNAL,      /* This bit shouldn't matter for L6 XDELTA */
   50              3 ADR BIT(1) UNAL,              /* GO address                         */
   51              3 STEP BIT(1) UNAL,             /* GO step                            */
   52              3 GOTRAP BIT(1) UNAL,           /* GO trap                            */
   53              3 INTERPRETIVE BIT(1) UNAL,     /* Message about interpreted lang.    */
   54              3 BYPASS BIT(1) UNAL,
   55              3 SOC BIT(1) UNAL,
   56            2 CHAR# REDEF SUBFNC UBIN(%BITSPERBYT) UNAL, /* # of characters in RSPDISPCHAR message */
   57            2 MESSAGE (0:155) UBIN(%BITSPER2BYT) UNAL, /* All items are 156 words long */
   58            2 DISPCHAR(0:311) REDEF MESSAGE UBIN(%BITSPERBYT) UNAL,
   59            2 ERROR_D REDEF MESSAGE,
   60              3 ERRCODE BIT(%BITSPER2WRD) UNAL,
   61              3 * (0:153) UBIN(%BITSPER2BYT) UNAL,
   62            2 DISPMEM REDEF MESSAGE,          /* DISPLAY MEMORY                     */
   63              3 ADR$ %BITORPTR,               /* Address to be displayed            */
   64              3 DATA(0:15) UBIN(%BITSPER2BYT) UNAL, /* Data passed back             */
   65              3 * (0:137) UBIN(%BITSPER2BYT) UNAL,
   66            2 DISPMEM_D REDEF MESSAGE,        /* DISPLAY MEMORY                     */
   67      %IF NOT(L6);
   68              3 * BIT(1) UNAL,
   69      %ENDIF;
   70              3 DD_EXISTS BIT(1) UNAL,        /* Set if data descriptor present,
   71                                                 otherwise use ADDRESS, SEG, DESC#, NOT_IS */
   72              3 EXPR_OP BIT(1) UNAL,          /* Set if address modification        */
   73              3 NOT_IS BIT(1) UNAL,
   74              3 IS_PTR BIT(1) UNAL,
14:32 JUL 28 '97 GD$MSG_M.:E05SI                                           3    
   75              3 REAL_SIZE BIT(1) UNAL,
   76              3 ARRAY_FIRST BIT(1) UNAL,
   77              3 CONTINUE BIT(1) UNAL, /* set if RSPDISPCHAR to follow this message  */
   78              3 DUMPCMD BIT(1) UNAL,
   79              3 DATA_SIZE UBIN(%BITSPERBYT) UNAL,
   80              3 ARRAY_CUR UBIN(%BITSPER2BYT) UNAL,
   81              3 ARRAY_HIGH UBIN(%BITSPER2BYT) UNAL,
   82              3 ADDRESS UBIN(%BITSPER2WRD) UNAL,
   83      %IF NOT(L6);
   84              3 * BIT(1) UNAL,
   85      %ENDIF;
   86              3 EVALCMD BIT(1) UNAL,
   87              3 SEG UBIN(7) UNAL,
   88              3 DESC# UBIN(%BITSPERBYT) UNAL,
   89              3 SIZE UBIN(%BITSPER2BYT) UNAL, /* Size of item in bits               */
   90              3 DATA(0:15) UBIN(%BITSPER2BYT) UNAL, /* Data passed back             */
   91              3 DATA_DESC (0:%DISPMEM_DD_SIZE) UBIN(%BITSPER2BYT) UNAL, /* Data descriptor if DD_EXISTS= 1 */
   92            2 LETMEM_D REDEF MESSAGE,         /* LET MEMORY                         */
   93      %IF NOT(L6);
   94              3 * BIT(1) UNAL,
   95      %ENDIF;
   96              3 NOT_IS BIT(1) UNAL,
   97              3 * BIT(7) UNAL,
   98              3 DATA_SIZE UBIN(%BITSPERBYT) UNAL,
   99              3 ADDRESS UBIN(%BITSPER2WRD) UNAL,
  100              3 SEG UBIN(%BITSPERBYT) UNAL,
  101              3 DESC# UBIN(%BITSPERBYT) UNAL,
  102              3 SIZE UBIN(%BITSPER2BYT) UNAL, /* Size of item in bits               */
  103              3 TYPE UBIN(%BITSPER2BYT) UNAL, /* type of LET constant               */
  104              3 VALUE,
  105                4 SIZE UBIN(%BITSPERBYT) UNAL, /* SIZE IN NATURAL UNITS             */
  106                4 EXP REDEF SIZE SBIN(%BITSPERBYT) UNAL, /* UNPACKED DECIMAL EXPONENT */
  107                4 TEXT(0:62) UBIN(%BITSPERBYT) UNAL,
  108                4 TEXTB(0:62) REDEF TEXT BIT(%BITSPERBYT) UNAL,
  109                4 CONS REDEF TEXT,            /* DECIMAL OR .OCTAL CONSTANT         */
  110                  5 * UBIN(%BITSPERBYT) UNAL, /* UNUSED                             */
  111                  5 TANT SBIN(%BITSPER2WRD) UNAL, /* CONSTANT VALUE                 */
14:32 JUL 28 '97 GD$MSG_M.:E05SI                                           4    
  112                  5 * (0:57) UBIN(%BITSPERBYT) UNAL, /* UNUSED                      */
  113                4 BITS REDEF TEXT,            /* BIT STRING OR FORTRAN REAL         */
  114                  5 * UBIN(%BITSPERBYT) UNAL, /* UNUSED                             */
  115                  5 TRING (0:1) BIT(%BITSPER2WRD) UNAL, /* CONSTANT VALUE           */
  116                  5 * (0:53) UBIN(%BITSPERBYT) UNAL, /* UNUSED                      */
  117                4 P REDEF TEXT,               /* POINTER CONSTANT                   */
  118      %IF NOT(L6);
  119                  5 * BIT(5) UNAL,
  120      %ENDIF;
  121                  5 * UBIN(19) UNAL,          /* UNUSED                             */
  122                  5 W UBIN(20) UNAL,          /* WORD                               */
  123                  5 C UBIN(1) UNAL,           /* CHAR                               */
  124                  5 * (0:57) UBIN(%BITSPERBYT) UNAL, /* UNUSED                      */
  125              3 DATA_DESC (0:%LETMEM_DD_SIZE) UBIN(%BITSPER2BYT) UNAL, /* Data descriptor if DD_EXISTS= 1 */
  126            2 MODMEM REDEF MESSAGE,           /* MODIFY MEMORY                      */
  127              3 MM,                           /* Must Modify flags                  */
  128                4 FLGS(0:%BITSPERHALF) BIT(1) UNAL,
  129              3 NM,                           /* Store Ok flags                     */
  130                4 FLGS(0:%BITSPERHALF) BIT(1) UNAL,
  131      %IF NOT(L6);
  132              3 * BIT(1) UNAL,
  133      %ENDIF;
  134              3 SO BIT(1) UNAL,               /* Store OK bit                       */
  135              3 * BIT(7) UNAL,
  136              3 MODCNT UBIN(%BITSPERBYT) UNAL, /* Number of MOD units               */
  137              3 MODS(0:15),                   /* 1 for each modify request          */
  138                4 ADR$ %BITORPTR,             /* Address to modify                  */
  139                4 OLD UBIN(%BITSPER2BYT) UNAL, /* Old value                         */
  140                4 NEW UBIN(%BITSPER2BYT) UNAL, /* New value                         */
  141              3 * (0:88) UBIN(%BITSPER2BYT) UNAL,
  142            2 MODMEM_D REDEF MESSAGE,         /* MODIFY MEMORY                      */
  143              3 MM,                           /* Must Modify flags                  */
  144                4 FLGS(0:%BITSPERHALF) BIT(1) UNAL,
  145              3 NM,                           /* Store Ok flags                     */
  146                4 FLGS(0:%BITSPERHALF) BIT(1) UNAL,
  147      %IF NOT(L6);
  148              3 * BIT(1) UNAL,
14:32 JUL 28 '97 GD$MSG_M.:E05SI                                           5    
  149      %ENDIF;
  150              3 SO BIT(1) UNAL,               /* Store OK bit                       */
  151              3 NOT_IS BIT(1) UNAL,
  152              3 * BIT(6) UNAL,
  153              3 MODCNT UBIN(%BITSPERBYT) UNAL, /* Number of MOD units               */
  154              3 * UBIN(%BITSPER2BYT) UNAL,
  155              3 ADDRESS UBIN(%BITSPER2WRD) UNAL, /* ADDRESS, SEG, DESC#, and NOT_IS */
  156              3 SEG UBIN(%BITSPERBYT) UNAL,   /* describe the location to modify    */
  157              3 DESC# UBIN(%BITSPERBYT) UNAL,
  158              3 MODS(0:15),
  159                4 OLD UBIN(%BITSPER2BYT) UNAL, /* Old value                         */
  160                4 NEW UBIN(%BITSPER2BYT) UNAL, /* New value                         */
  161              3 * (0:116) UBIN(%BITSPER2BYT) UNAL,
  162            2 BRKRQS REDEF MESSAGE,           /* Request to set a breakpoint        */
  163              3 BRKNUM UBIN(%BITSPERBYT) UNAL, /* Breakpoint number                 */
  164      %IF NOT(L6);
  165              3 * BIT(1) UNAL,
  166      %ENDIF;
  167              3 IFSPEC BIT(1) UNAL,      /* Set if IF condition for this breakpoint */
  168              3 * BIT(7) UNAL,
  169              3 BYPASSCOUNT UBIN(%BITSPER2BYT) UNAL,
  170              3 ADR$ %BITORPTR,               /* Breakpoint address                 */
  171              3 * UBIN(%BITSPERBYT) UNAL,
  172      %IF NOT(L6);
  173              3 * BIT(1) UNAL,
  174      %ENDIF;
  175              3 CTYPE UBIN(5) UNAL,           /* IF condition type                  */
  176              3 COND UBIN(3) UNAL,            /* IF condition                       */
  177              3 IF$CONST,
  178                4 SIZE UBIN(%BITSPERBYT) UNAL, /* SIZE IN NATURAL UNITS             */
  179                4 EXP REDEF SIZE SBIN(%BITSPERBYT) UNAL, /* UNPACKED DECIMAL EXPONENT */
  180                4 TEXT(0:62) UBIN(%BITSPERBYT) UNAL,
  181                4 TEXTB(0:62) REDEF TEXT BIT(%BITSPERBYT) UNAL,
  182                4 CONS REDEF TEXT,            /* DECIMAL OR .OCTAL CONSTANT         */
  183                  5 * UBIN(%BITSPERBYT) UNAL, /* UNUSED                             */
  184                  5 TANT SBIN(%BITSPER2WRD) UNAL, /* CONSTANT VALUE                 */
  185                  5 * (0:57) UBIN(%BITSPERBYT) UNAL, /* UNUSED                      */
14:32 JUL 28 '97 GD$MSG_M.:E05SI                                           6    
  186                4 BITS REDEF TEXT,            /* BIT STRING OR FORTRAN REAL         */
  187                  5 * UBIN(%BITSPERBYT) UNAL, /* UNUSED                             */
  188                  5 TRING (0:1) BIT(%BITSPER2WRD) UNAL, /* CONSTANT VALUE           */
  189                  5 * (0:53) UBIN(%BITSPERBYT) UNAL, /* UNUSED                      */
  190                4 P REDEF TEXT,               /* POINTER CONSTANT                   */
  191      %IF NOT(L6);
  192                  5 * BIT(5) UNAL,
  193      %ENDIF;
  194                  5 * UBIN(19) UNAL,          /* UNUSED                             */
  195                  5 W UBIN(20) UNAL,          /* WORD                               */
  196                  5 C UBIN(1) UNAL,           /* BYTE                               */
  197                  5 * (0:57) UBIN(%BITSPERBYT) UNAL, /* UNUSED                      */
  198              3 DATA_DESC_SIZE UBIN(%BITSPER2BYT) UNAL,
  199              3 IF_DATA_DESC (0:%IFSPEC_DD_SIZE) UBIN(%BITSPER2BYT) UNAL, /* IF Data descriptor */
  200            2 GORQS REDEF MESSAGE,            /* User has typed GO                  */
  201              3 ADR$ %BITORPTR,               /* GO address                         */
  202              3 TSA$ %BITORPTR,               /* TSA address for this trap          */
  203              3 SIZE UBIN(%BITSPER2BYT) UNAL, /* This trap #                        */
  204              3 GOFLAGS,
  205      %IF NOT(L6);
  206                4 * BIT(1) UNAL,
  207      %ENDIF;
  208                4 AT_PROC BIT(1) UNAL, /* Set if sitting on a PROC, FOR SOC  of a PROC, if we ever implement it in the Fep */
  209                4 *(0:6) BIT(1) UNAL,
  210              3 * UBIN(%BITSPERBYT) UNAL,
  211              3 * (0:149) UBIN(%BITSPER2BYT) UNAL,
  212            2 BRKRSP REDEF MESSAGE,           /* We have gotten a break or trap     */
  213              3 ADR$ %BITORPTR,               /* Address of breakpoint or trap      */
  214              3 TSA$ %BITORPTR,               /* TSA associated with break, trap    */
  215              3 BRK# UBIN(%BITSPER2BYT) UNAL, /* Breakpoint #                       */
  216              3 TRAP# REDEF BRK# UBIN(%BITSPER2BYT) UNAL, /* Trap#                  */
  217              3 USER# UBIN(%BITSPER2BYT) UNAL, /* User # that hit this break        */
  218              3 ON_TRAP# REDEF USER# UBIN(%BITSPER2BYT) UNAL, /* ONABORT/ONEXIT TRAP#*/
  219              3 ERRCODE BIT(%BITSPER2WRD) UNAL,
  220              3 DATA(0:15) UBIN(%BITSPER2BYT) UNAL, /* BRKRSP.ADR$->0,16            */
  221              3 DATA_SIZE UBIN(%BITSPERBYT) UNAL,
  222      %IF NOT(L6);
14:32 JUL 28 '97 GD$MSG_M.:E05SI                                           7    
  223              3 * BIT(1) UNAL,
  224      %ENDIF;
  225              3 MBU BIT(1) UNAL,
  226                                         /* Monitor running on behalf of user USER# */
  227              3 SHARED BIT(1) UNAL,
  228              3 * BIT(6) UNAL,
  229              3 ADR_FROM$ %BITORPTR,
  230              3 * (0:128) UBIN(%BITSPER2BYT) UNAL,
  231            2 KILLRQS REDEF MESSAGE,          /* Request to kill a breakpoint       */
  232              3 BRK# UBIN(%BITSPERBYT) UNAL,  /* Breakpoint to kill                 */
  233              3 * UBIN(%BITSPERBYT) UNAL,
  234              3 * (0:154) UBIN(%BITSPER2BYT) UNAL,
  235            2 TSA REDEF MESSAGE,              /* TSA Request                        */
  236              3 ADDRESS$ %BITORPTR,
  237              3 TSAL$ UBIN(%BITSPER2WRD) UNAL,
  238              3 I UBIN(%BITSPER2BYT) UNAL,
  239              3 IREG REDEF I,
  240                4 TRAPNO UBIN(%BITSPERBYT) UNAL,
  241                4 * UBIN(%BITSPERBYT) UNAL,
  242              3 R3 UBIN(%BITSPER2BYT) UNAL,
  243              3 INST UBIN(%BITSPER2BYT) UNAL,
  244              3 Z UBIN(%BITSPER2BYT) UNAL,
  245              3 A$ UBIN(%BITSPER2WRD) UNAL,
  246              3 P$$ UBIN(%BITSPER2WRD) UNAL,
  247              3 B3$ UBIN(%BITSPER2WRD) UNAL,
  248              3 S UBIN(%BITSPER2BYT) UNAL,
  249              3 S1 REDEF S,
  250      %IF NOT(L6);
  251                4 * BIT(1) UNAL,
  252      %ENDIF;
  253                4 QLT BIT(1) UNAL,
  254                4 RING UBIN(2) UNAL,
  255                4 * BIT(5) UNAL,
  256      %IF NOT(L6);
  257                4 * BIT(1) UNAL,
  258      %ENDIF;
  259                4 IP UBIN(2) UNAL,
14:32 JUL 28 '97 GD$MSG_M.:E05SI                                           8    
  260                4 LEVEL UBIN(6) UNAL,
  261              3 ISA,
  262                4 ASV$ UBIN(%BITSPER2WRD) UNAL,
  263                4 * UBIN(%BITSPER2BYT) UNAL,
  264                4 TSAP$ UBIN(%BITSPER2WRD) UNAL,
  265                4 DEV UBIN(%BITSPER2BYT) UNAL,
  266                4 ISM1,
  267      %IF NOT(L6);
  268                  5 * BIT(1) UNAL,
  269      %ENDIF;
  270                  5 M1 BIT(1) UNAL,
  271                  5 RREG (0:6) BIT(1) UNAL,
  272      %IF NOT(L6);
  273                  5 * BIT(1) UNAL,
  274      %ENDIF;
  275                  5 I BIT(1) UNAL,
  276                  5 BREG (0:6) BIT(1) UNAL,
  277                4 ISM2,
  278      %IF NOT(L6);
  279                  5 * BIT(1) UNAL,
  280      %ENDIF;
  281                  5 MMU BIT(1) UNAL,
  282                  5 NATSAP UBIN(3) UNAL,
  283                  5 * BIT(2) UNAL,
  284                  5 SIP BIT(1) UNAL,
  285                  5 CIP BIT(1) UNAL,
  286      %IF NOT(L6);
  287                  5 * BIT(1) UNAL,
  288      %ENDIF;
  289                  5 * BIT(6) UNAL,
  290                  5 T BIT(1) UNAL,
  291                  5 M2_M7 BIT(1) UNAL,
  292                4 P$$ UBIN(%BITSPER2WRD) UNAL,
  293                4 S UBIN(%BITSPER2BYT) UNAL,
  294                4 REGS (0:33) UBIN(%BITSPER2BYT) UNAL,
  295              3 * (0:95) UBIN(%BITSPER2BYT) UNAL,
  296            2 USERQS REDEF MESSAGE,           /* Use Request                        */
14:32 JUL 28 '97 GD$MSG_M.:E05SI                                           9    
  297              3 ASDT$ UBIN(%BITSPER2WRD) UNAL, /* Pointer to ASDT                   */
  298              3 USERNUM REDEF ASDT$ UNAL,     /* We got a USE USER#                 */
  299                4 * UBIN(%BITSPER2BYT) UNAL,
  300                4 USER# UBIN(%BITSPER2BYT) UNAL,
  301              3 IL REDEF ASDT$ UNAL,          /* We got a USE IL#                   */
  302                4 * UBIN(%BITSPER2BYT) UNAL,
  303                4 IL# UBIN(%BITSPER2BYT) UNAL,
  304              3 * (0:153) UBIN(%BITSPER2BYT) UNAL,
  305            2 LCTMSG REDEF MESSAGE,           /* Display and Mod LCTs RQS and RSP   */
  306      %IF NOT(L6);
  307              3 CHANNEL UBIN(18) UNAL,
  308      %ELSE;
  309              3 CHANNEL,                      /* Channel to use                     */
  310                4 CHN UBIN(10) UNAL,
  311                4 * UBIN(6) UNAL,
  312      %ENDIF;
  313              3 OLDMEM UBIN(%BITSPERBYT) UNAL, /* Old contents of LCT               */
  314              3 NEWMEM UBIN(%BITSPERBYT) UNAL, /* New contents of LCT               */
  315              3 LCTNUM UBIN(%BITSPERBYT) UNAL, /* LCT to use                        */
  316              3 FLAGS,                        /* Assorted flags                     */
  317      %IF NOT(L6);
  318                4 * BIT(1) UNAL,
  319      %ENDIF;
  320                4 NEC BIT(1) UNAL,            /* Non existant channel               */
  321                4 LID BIT(1) UNAL,            /* Line is dead                       */
  322                4 BLN BIT(1) UNAL,            /* Bad MLCP addr                      */
  323                4 NMD BIT(1) UNAL,            /* Not LCT device                     */
  324                4 SO BIT(1) UNAL,             /* Store OK                           */
  325                4 NM BIT(1) UNAL,             /* No Match                           */
  326                4 MM BIT(1) UNAL,             /* Must match                         */
  327                4 DUMP BIT(1) UNAL,           /* Dump 16 at a time                  */
  328              3 LCTMEM(0:15) UBIN(%BITSPERBYT) UNAL, /* The dump itself             */
  329              3 * (0:144) UBIN(%BITSPER2BYT) UNAL,
  330            2 UNFID REDEF MESSAGE,            /* Request for UNFID of DCB           */
  331              3 DCB# UBIN(%BITSPERBYT) UNAL,  /* DCB# to UNFID from Host            */
  332      %IF NOT(L6);
  333              3 * BIT(1) UNAL,
14:32 JUL 28 '97 GD$MSG_M.:E05SI                                           10   
  334      %ENDIF;
  335              3 K13 BIT(1) UNAL,              /* Set if Unfidding a range of DCBS   */
  336              3 OPEN BIT(1) UNAL,             /* Bit indicating DCB is open         */
  337              3 WAS_OPEN BIT(1) UNAL,         /* DCB was once open                  */
  338              3 NEVER_OPEN BIT(1) UNAL,       /* DCB is closed, never open          */
  339              3 ERROR BIT(1) UNAL,            /* Error occurred in the Fep          */
  340              3 * BIT(3) UNAL,
  341              3 NUMDCBS UBIN(%BITSPERBYT) UNAL,/* Set to highest DCB to unfid       */
  342              3 FUN# UBIN(%BITSPERBYT) UNAL, /* Indicates FUN of DCB we're Unfidding */
  343              3 ORG# UBIN(%BITSPERBYT) UNAL, /* Indicates ORG of DCB we're Unfidding */
  344              3 DCBNAME,                 /* Obviously DCB NAME, in TEXTC format     */
  345                4 L UBIN(%BITSPERBYT) UNAL,
  346                4 NAME(0:30) UBIN(%BITSPERBYT) UNAL,
  347              3 RES BIT(%BITSPER2WRD) UNAL,   /* DCB Resource type                  */
  348              3 NAME,
  349                4 L UBIN(%BITSPERBYT) UNAL,
  350                4 C(0:30) UBIN(%BITSPERBYT) UNAL,
  351              3 ACCT (0:7) BIT(%BITSPERBYT) UNAL,/* Account name portion of Fid DCB is attached to */
  352              3 *(0:230) UBIN(%BITSPERBYT) UNAL,
  353            2 KTI REDEF MESSAGE,              /* Request for KEEP/TRAP/IGNORE       */
  354      %IF NOT(L6);
  355              3 * BIT(1) UNAL,
  356      %ENDIF;
  357              3 KEEP(0:5) BIT(1) UNAL, /* 0=MCL,1=EVENT,2=BREAK,3=XCON,4=TRAP,5=ARITHMETIC - USER DELTA */
  358                                         /* 0=ALL,1=NONE,2=MON,3=SCREECH - XDELTA   */
  359              3 * BIT(2) UNAL,
  360      %IF NOT(L6);
  361              3 * BIT(1) UNAL,
  362      %ENDIF;
  363              3 TRAP(0:5) BIT(1) UNAL, /* 0=MCL,1=EVENT,2=BREAK,3=XCON,4=TRAP,5=ARITHMETIC */
  364              3 * BIT(2) UNAL,
  365      %IF NOT(L6);
  366              3 * BIT(1) UNAL,
  367      %ENDIF;
  368              3 IGNORE(0:5) BIT(1) UNAL,      /* 5=ARITHMETIC                       */
  369              3 * BIT(2) UNAL,
  370              3 CMD_TYPE UBIN(%BITSPERBYT) UNAL,
14:32 JUL 28 '97 GD$MSG_M.:E05SI                                           11   
  371              3 * (0:153) UBIN(%BITSPER2BYT) UNAL,
  372            2 STOPRQS REDEF MESSAGE,          /* Stop this FPRG                     */
  373              3 * (0:155) UBIN(%BITSPER2BYT) UNAL
  374      %IF MODE_FEP;
  375              ,2 * (0:51) UBIN(%BITSPER2BYT) UNAL
  376           /* Extra space for FD in XDELTA mode - 9-6 conversion in receive buffer  */
  377      %ENDIF;
  378                ;
  379      %MEND;

