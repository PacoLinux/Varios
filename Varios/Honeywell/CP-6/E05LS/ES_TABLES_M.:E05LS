

14:23 JUL 28 '97 ES_TABLES_M.:E05SI                                        1    
    1      /*M* ES_TABLES_M - BASED STRUCTURES USED BY SECURITY LOGGING */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* */
    8      /* ! C ! */
    9      /*F* NAME: ES_TABLES_M.
   10
   11           The ES_TABLES_M include file contains macros for structures
   12           used when creating security log files. The ES$SECLOG macro
   13           describes the informational portion of any security log
   14           record and is the only structure of interest to the user.
   15      */
   16      /*F* NAME:  D_ES$SECLOG
   17      .IBL D:ES$SECLOG
   18      */
   19      /*F* NAME:  ES$SECLOG
   20
   21           The ES$SECLOG macro defines a structure which describes the
   22           informational portion of any security log (:SECLOGyyyymmdd.:SYS)
   23           record. Each record in the security log also contains a
   24           header portion which is defined by the EL$HDR macro contained
   25           in the EL$TABLES include file. These two macros are used in
   26           conjunction when security log records are written. They may
   27           also be similarly used to extract information from the logs
   28           by including both the EL$TABLES and ES_TABLES_M include files
   29           and invoking both macros. E.g.,
   30
   31      .fif
   32           %INCLUDE EL$TABLES;
   33           %INCLUDE ES_TABLES_M;
   34           %EL$HDR(NAME=SECLOGREC,STCLASS=STATIC,HDRONLY=YES,FILE=FILENUM);
   35           %ES$SECLOG(DCLNAME=NO,STCLASS=STATIC);
   36      .fin
   37
14:23 JUL 28 '97 ES_TABLES_M.:E05SI                                        2    
   38           Since the same structure is used for all categories of security
   39           log records, not all fields will be used for all records. Also,
   40           a few fields have been redefined for use with different
   41           categories. The various uses of each field and references to
   42           include files containing value equates or subs are contained
   43           in the individual field descriptions.
   44      */
   45      /**/
   46      /* Main structure for all security log records */
   47      /**/
   48      %MACRO ES$SECLOG(NAME=ES$SECLOG,
   49                       DCLNAME (YES='1'B,NO='0'B)='1'B,
   50                       STCLASS=BASED);
   51      %LSET LISTDIR='0'B;
   52      %LSET LISTEXP='1'B;
   53      %LSET LISTCOM='0'B;
   54      %LSET LISTSUB='1'B;
   55      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   56      %IF (SUBSTR(STR,0,6)='STATIC') OR
   57          (SUBSTR(STR,0,8)='CONSTANT') OR
   58          (SUBSTR(STR,0,3)='EXT');
   59      %LSET INIT=CHARTEXT('INIT');
   60      %ELSE;
   61      %LSET INIT=CHARTEXT('/*');
   62      %ENDIF;
   63      %IF DCLNAME;
   64      DCL 1 NAME STCLASS ALIGNED,
   65      %ENDIF;
   66            2 REASON        UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
   67                            /*K*  REASON - UBIN BYTE. Gives a more specific
   68                            reason why this TYPE of security record was
   69                            logged. EQUs for values may be found in the
   70                            ES_SUBS_E include file.                     */
   71            2 GRANTED       BIT(1) UNAL    %INIT('0'B)%CHARTEXT('/**/'),
   72                            /*K*  GRANTED - BIT(1). Indicates whether a
   73                            request was granted or not. Yes=1, no=0.     */
   74            2 *             BIT(26) UNAL   %INIT('0'B)%CHARTEXT('/**/'),
14:23 JUL 28 '97 ES_TABLES_M.:E05SI                                        3    
   75            2 MODE          UBIN(4) UNAL   %INIT(0)%CHARTEXT('/**/'),
   76                            /*K*  MODE - UBIN(4). From B$JIT.MODE if the
   77                            user was already logged on. If the record type
   78                            is system access, the mode is determined by the
   79                            logon process. Equates for values may be found
   80                            in the B$JIT0 and B$JIT0_ES_MODES macros.   */
   81            2 DOMAYN        UBIN(5)   UNAL %INIT(0)%CHARTEXT('/**/'),
   82                            /*K*  DOMAYN - UBIN(5). Indicates in which
   83                            domain (user, debugger, ASL, or CP) the user was
   84                            running when this record was logged. The
   85                            processor name, account, and privilege
   86                            information given in the record will relate
   87                            directly to the domain. Zero if the record is
   88                            system access type. CP=4, debugger=5, ASL=6,
   89                            user=7.                                     */
   90            2 USER          UBIN(9) UNAL   %INIT(0)%CHARTEXT('/**/'),
   91                            /*K*  USER - UBIN(9). User number from
   92                            B$JIT.USER if the user was already logged on.
   93                            Zero otherwise.                             */
   94            2 SYSID         UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
   95                            /*K*  SYSID - UBIN HALF. From B$JIT.SYSID if the
   96                            user was already logged on. Zero otherwise. */
   97            2 ACCN          CHAR(8) UNAL   %INIT(' ')%CHARTEXT('/**/'),
   98                            /*K*  ACCN - CHAR(8). Logon account from
   99                            B$JIT.ACCN or filled in during the logon
  100                            process.                                     */
  101            2 UNAME         CHAR(12) UNAL  %INIT(' ')%CHARTEXT('/**/'),
  102                            /*K*  UNAME - CHAR(12). Logon name from
  103                            B$JIT.UNAME or filled in during the logon
  104                            process.                                     */
  105            2 FACCN         CHAR(8) UNAL   %INIT(' ')%CHARTEXT('/**/'),
  106                            /*K*  FACCN - CHAR(8). File management account
  107                            from B$JIT.FACCN if the user was already logged
  108                            on. Blank otherwise.                         */
  109            2 PASSWORD REDEF FACCN CHAR(8) UNAL,
  110                            /*K*  PASSWORD - REDEF FACCN CHAR(8).
  111                            If the record is a system access
14:23 JUL 28 '97 ES_TABLES_M.:E05SI                                        4    
  112                            record and the logon was determined to be
  113                            correct except for the password, the bad
  114                            password is given here. Blank otherwise.    */
  115            2 WOO           CHAR(8) UNAL   %INIT(' ')%CHARTEXT('/**/'),
  116                            /*K*  WOO - CHAR(8).  From B$JIT.WOO if the user
  117                            was already logged on. Blank otherwise.     */
  118            2 ERR,
  119                            /*K*  ERR. If the record is a file access,
  120                            privilege change, or monitor service type and
  121                            the request was denied, the error information
  122                            from B$JIT.ERR is placed here. Zero otherwise.*/
  123              3 FCG         BIT(12)   UNAL %INIT('0'B)%CHARTEXT('/**/'),
  124                            /*K* ERR.FCG - BIT(12). See B$JIT.ERR.FCG.   */
  125              3 MID         BIT(6)    UNAL %INIT('0'B)%CHARTEXT('/**/'),
  126                            /*K* ERR.MID - BIT(6). See B$JIT.ERR.MID.    */
  127              3 MON         BIT(1)    UNAL %INIT('0'B)%CHARTEXT('/**/'),
  128                            /*K* ERR.MON - BIT(1). See B$JIT.ERR.MON.    */
  129              3 CODE        UBIN(14)  UNAL %INIT(0)%CHARTEXT('/**/'),
  130                            /*K* ERR.CODE - UBIN(14). See B$JIT.ERR.CODE.*/
  131              3 SEV         UBIN(3)  UNAL  %INIT(0)%CHARTEXT('/**/'),
  132                            /*K* ERR.SEV - UBIN(3). See B$JIT.ERR.SEV.   */
  133            2 PRIV          BIT(36)        %INIT('0'B)%CHARTEXT('/**/'),
  134                            /*K* PRIV - BIT(36). From B$JIT.PRIV.AUTH if the
  135                            user was already logged on. If the record is a
  136                            system access record and the logon was determined
  137                            to be correct except for the password, the
  138                            account privileges for the mode of logon are
  139                            given here. Zero otherwise.                  */
  140            2 PPRIV         BIT(36)        %INIT('0'B)%CHARTEXT('/**/'),
  141                            /*K*  PPRIV - BIT(36). From B$JIT.PPRIV if the
  142                            user was already logged on. If the record is a
  143                            system access record and the logon was determined
  144                            to be correct except for the password, the
  145                            account processor privileges for the mode of
  146                            logon are given here. Zero otherwise.        */
  147            2 PRIV_ACTIVE   BIT(36)        %INIT('0'B)%CHARTEXT('/**/'),
  148                            /*K* PRIV_ACTIVE - BIT(36). From
14:23 JUL 28 '97 ES_TABLES_M.:E05SI                                        5    
  149                            B$JIT.PRIV.ACTIVE if the user was already logged
  150                            on. Zero otherwise.                          */
  151            2 PRIV_PRC      BIT(36) UNAL   %INIT('0'B)%CHARTEXT('/**/'),
  152                            /*K* PRIV_PRC - BIT(36). From B$JIT.PRIV.PRC if
  153                            the user was already logged on. Zero otherwise.*/
  154            2 LOGON,
  155                            /*K*  LOGON - TEXTC format. If the record is a
  156                            system access record and the logon process was
  157                            not able to parse the logon, the first 31
  158                            characters of the attempted logon will be placed
  159                            here.                                        */
  160              3 L           UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  161                            /*K* LOGON.L - UBIN BYTE. Length in characters
  162                            of the significant portion of LOGON.C.       */
  163              3 C           CHAR(31)  UNAL %INIT(' ')%CHARTEXT('/**/'),
  164                            /*K* LOGON.C - CHAR(31). The first 31 characters
  165                            of the attempted logon.                      */
  166            2 PROC_NAME REDEF LOGON,
  167                            /*K*  PROC_NAME - REDEF LOGON. TEXTC format. The
  168                            name of the debugger, ASL, CP, or run unit in
  169                            question, depending on domain. Taken from the
  170                            M$LM dcb if the domain is user. Not meaningful
  171                            if the record is system access type.         */
  172              3 L           UBIN BYTE UNAL,
  173                            /*K* PROC_NAME.L - UBIN BYTE. Length of the
  174                            significant portion of PROC_NAME.C.          */
  175              3 C           CHAR(31) UNAL,
  176                            /*K* PROC_NAME.C - CHAR(31). Processor name
  177                            text.                                        */
  178            2 PROC_ACCT     CHAR(8) UNAL   %INIT(' ')%CHARTEXT('/**/'),
  179                            /*K*  PROC_ACCT - CHAR(8). If the domain is
  180                            user, the account is taken from the M$LM DCB.
  181                            Otherwise, it will be :SYS for DB, CP, or ASL.
  182                            Blank if the record is system access type.   */
  183            2 PROC_PSN      CHAR(6) UNAL   %INIT(' ')%CHARTEXT('/**/'),
  184                            /*K*  PROC_PSN - CHAR(6). PSN will be #SYS if
  185                            the domain is not user. Otherwise, the pack set
14:23 JUL 28 '97 ES_TABLES_M.:E05SI                                        6    
  186                            from which the M$LM run unit was fetched is
  187                            given here. Blank if the record is system access
  188                            type.                                        */
  189            2 ORIG_SYSID    UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  190                            /*K* ORIG_SYSID - UBIN HALF. If it can be
  191                            determined that the original user which spawned
  192                            this job was a ghost, the SYSID of that ghost
  193                            will be given here. Zero otherwise.          */
  194            2 TSLINE,
  195                            /*K*  TSLINE. Time sharing line information.
  196                            If a system access for a batch job is logged and
  197                            it is determined that the original user who
  198                            spawned the job was an on-line user, TSLINE
  199                            information for the original on-line user is
  200                            recorded here. If logging a system access other
  201                            than batch, TSLINE information for the instance
  202                            currently attempting logon is recorded here. If
  203                            any other type of record is logged, TSLINE
  204                            information from B$JIT.TSLINE is recorded here
  205                            if the mode is interactive. Zero otherwise.  */
  206              3 FEX         UBIN(9) UNAL   %INIT(0)%CHARTEXT('/**/'),
  207                            /*K* TSLINE.FEX - UBIN(9). See
  208                            B$JIT.TSLINE.FEX.                            */
  209              3 PORT        UBIN(18) UNAL  %INIT(0)%CHARTEXT('/**/'),
  210                            /*K* TSLINE.PORT - UBIN(18). See
  211                            B$JIT.TSLINE.PORT.                           */
  212              3 LEV         UBIN(9) UNAL   %INIT(0)%CHARTEXT('/**/'),
  213                            /*K* TSLINE.LEV - UBIN(9). See
  214                            B$JIT.TSLINE.LEV.                             */
  215              3 SUBDEVICE   UBIN(18) UNAL  %INIT(0)%CHARTEXT('/**/'),
  216                            /*K* TSLINE.SUBDEVICE - UBIN(18). See
  217                            B$JIT.TSLINE.SUBDEVICE.                      */
  218              3 SUBSUBDEVICE UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
  219                            /*K* TSLINE.SUBSUBDEVICE - UBIN(18). See
  220                            B$JIT.TSLINE.SUBSUBDEVICE.                   */
  221            2 DEVICE        CHAR(4) UNAL %INIT(' ')%CHARTEXT('/**/'),
  222                            /*K* DEVICE - CHAR(4). If the original job
14:23 JUL 28 '97 ES_TABLES_M.:E05SI                                        7    
  223                            spawning this job came from a device or this job
  224                            came directly from a device, the device type is
  225                            given here. Blank otherwise.                 */
  226            2 DEVICE_TNAME  CHAR(8) UNAL %INIT(' ')%CHARTEXT('/**/'),
  227                            /*K* DEVICE_TNAME - CHAR(8). If the original job
  228                            spawning this job was a device or this job came
  229                            directly from a device, the TNAME of that device
  230                            is given here. Blank otherwise.             */
  231            2 PRIVS_REQUIRED BIT(36)       %INIT('0'B)%CHARTEXT('/**/'),
  232                            /*K* PRIVS_REQUIRED - BIT(36). If this is a
  233                            privilege change record, privileges requested by
  234                            the user which caused the request to be logged
  235                            are placed here. If this is a monitor service
  236                            record, the privileges required to perform the
  237                            monitor service are placed here. Zero
  238                            otherwise.
  239
  240                            Note that there are several pseudo-privileges
  241                            which may also be returned in this field if
  242                            the record is monitor service type. They exist
  243                            only to give additional information concerning
  244                            a failed monitor service request. They are:
  245
  246                            PR_DOMAIN#   User's domain was wrong. That
  247                                         service may only be used by special
  248                                         shared processors.
  249
  250                            PR_SYSACCT#  That service may only be used by
  251                                         processors run from :SYS.
  252
  253                            PR_MODE#     User's mode was wrong. That service
  254                                         may only be used by system ghosts.
  255                            */
  256            2 PMME_TYPE     UBIN(18) UNAL  %INIT(0)%CHARTEXT('/**/'),
  257                            /*K*  PMME_TYPE - UBIN(18). If the record was
  258                            logged due to attempted use of a privileged
  259                            PMME, the PMME code is given here. Zero
14:23 JUL 28 '97 ES_TABLES_M.:E05SI                                        8    
  260                            otherwise. EQUs for the values may be found in
  261                            the UD_EQU_E include file.                 */
  262            2 ORIG_MODE     UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  263                            /*K* ORIG_MODE - UBIN BYTE. Mode of the
  264                            original user who submitted this job. May be
  265                            used to decide which of ORIG_SYSID (ghost),
  266                            TSLINE (online), or DEVICE and DEVICE_TNAME
  267                            (batch) is of interest.                    */
  268            2 *             BIT(9)    UNAL %INIT('0'B)%CHARTEXT('/**/'),
  269            2 FILE,
  270                            /*K* FILE. If logging a file access, information
  271                            describing the file will be placed here from the
  272                            DCB. If logging an ARES_BYPASS record,
  273                            ARES-supplied information describing the ARES
  274                            model will be placed here.                   */
  275              3 FUN         UBIN(9) UNAL   %INIT(0)%CHARTEXT('/**/'),
  276                            /*K* FILE.FUN - UBIN(9). See M$OPEN.         */
  277              3 ASN         UBIN(9) UNAL   %INIT(0)%CHARTEXT('/**/'),
  278                            /*K* FILE.ASN - UBIN(9). See M$OPEN.         */
  279              3 FFLG        BIT(18) UNAL   %INIT('0'B)%CHARTEXT('/**/'),
  280                            /*K* FILE.FFLG - BIT(18). See M$DCB. Zero (not
  281                            used) if logging an ARES_BYPASS record.      */
  282              3 *           UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  283              3 SN          CHAR(6) UNAL   %INIT(' ')%CHARTEXT('/**/'),
  284                            /*K* FILE.SN - CHAR(6). See M$OPEN.          */
  285              3 RES         CHAR(4) UNAL   %INIT(' ')%CHARTEXT('/**/'),
  286                            /*K* FILE.RES - CHAR(4). See M$OPEN.         */
  287              3 ACCT        CHAR(8) UNAL   %INIT(' ')%CHARTEXT('/**/'),
  288                            /*K* FILE.ACCT - CHAR(8). Account specified
  289                            by the user (see M$OPEN) or from B$JIT.FACCN
  290                            if no account was specified.                */
  291              3 NAME#,
  292                            /*K* FILE.NAME# - TEXTC format. Name of file or
  293                            ARES model.                                   */
  294                4 L         UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  295                            /*K* FILE.NAME#.L - UBIN BYTE. Length of the
  296                            significant portion of FILE.NAME#.C.         */
14:23 JUL 28 '97 ES_TABLES_M.:E05SI                                        9    
  297                4 C         CHAR(31)  UNAL %INIT(' ')%CHARTEXT('/**/'),
  298                            /*K* FILE.NAME#.C - CHAR(31). Name text of the
  299                            file or ARES model.                          */
  300            2 PREV_USER REDEF FILE,
  301                            /*K* PREV_USER - REDEF FILE. If logging a batch
  302                            logon, the account, uname, mode, and SYSID of
  303                            the user who batched the job will be placed here.
  304                            Note that this is not necessarily the original
  305                            user or job heading a chain of spawned jobs; it
  306                            reflects the immediate predecessor of the
  307                            current job.                                 */
  308              3 MODE        UBIN(9) UNAL,
  309                            /*K* PREV_USER.MODE - UBIN(9). Mode of the
  310                            previous user.                              */
  311              3 *           UBIN(9) UNAL,
  312              3 *           BIT(18) UNAL,
  313              3 SYSID       UBIN HALF UNAL,
  314                            /*K* PREV_USER.SYSID - UBIN HALF.  SYSID of the
  315                            previous user.                              */
  316              3 *           CHAR(6) UNAL,
  317              3 *           CHAR(4) UNAL,
  318              3 ACCT        CHAR(8) UNAL,
  319                            /*K* PREV_USER.ACCT - CHAR(8). Logon account
  320                            of the previous user.                       */
  321              3 UNAME,
  322                            /*K* PREV_USER.UNAME - TEXTC format. Logon
  323                            user name of the previous user.             */
  324                4 L         UBIN BYTE UNAL,
  325                            /*K* PREV_USER.UNAME.L - UBIN BYTE. Maximum
  326                            length in characters of any user name.      */
  327                4 C         CHAR(31)  UNAL;
  328                            /*K* PREV_USER.UNAME.C - CHAR(31). User name
  329                            text.                                       */
  330      %MEND;
  331      /* ! ! */
  332      /**/
  333      /*F* NAME:  ES$FILE_ACCESS
14:23 JUL 28 '97 ES_TABLES_M.:E05SI                                        10   
  334
  335           Used to trigger logging of granted or denied file accesses in
  336           the security log.
  337      */
  338      /**/
  339      %MACRO ES$FILE_ACCESS(NAME=ES$FILE_ACCESS,
  340                            STCLASS=BASED,
  341                            REASON=0,
  342                            GRANTED (YES='1'B,NO='0'B)='0'B);
  343      %LSET LISTDIR='0'B;
  344      %LSET LISTEXP='1'B;
  345      %LSET LISTCOM='0'B;
  346      %LSET LISTSUB='1'B;
  347      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  348      %IF (SUBSTR(STR,0,6)='STATIC') OR
  349          (SUBSTR(STR,0,8)='CONSTANT') OR
  350          (SUBSTR(STR,0,3)='EXT');
  351      %LSET INIT=CHARTEXT('INIT');
  352      %ELSE;
  353      %LSET INIT=CHARTEXT('/*');
  354      %ENDIF;
  355      DCL 1 NAME STCLASS ALIGNED,
  356            2 REASON#       UBIN BYTE UNAL %INIT(REASON)%CHARTEXT('/**/'),
  357                            /*B* REASON. The reason for logging.          */
  358            2 GRANTED#      BIT(1)    UNAL %INIT(GRANTED)%CHARTEXT('/**/'),
  359                            /*B* GRANTED. Whether file access was granted
  360                            or not.                                      */
  361            2 *             BIT(26)   UNAL %INIT('0'B)%CHARTEXT('/**/');
  362      %MEND;
  363      /**/
  364      /*F* NAME:  ES$PRIV_CHANGE
  365
  366           Used to trigger logging of granted or denied privilege requests
  367           in the security log.
  368      */
  369      /**/
  370      %MACRO ES$PRIV_CHANGE(NAME=ES$PRIV_CHANGE,
14:23 JUL 28 '97 ES_TABLES_M.:E05SI                                        11   
  371                            STCLASS=BASED,
  372                            REASON=0,
  373                            GRANTED (YES='1'B,NO='0'B)='0'B,
  374                            PRIV='0'B);
  375      %LSET LISTDIR='0'B;
  376      %LSET LISTEXP='1'B;
  377      %LSET LISTCOM='0'B;
  378      %LSET LISTSUB='1'B;
  379      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  380      %IF (SUBSTR(STR,0,6)='STATIC') OR
  381          (SUBSTR(STR,0,8)='CONSTANT') OR
  382          (SUBSTR(STR,0,3)='EXT');
  383      %LSET INIT=CHARTEXT('INIT');
  384      %ELSE;
  385      %LSET INIT=CHARTEXT('/*');
  386      %ENDIF;
  387      DCL 1 NAME STCLASS ALIGNED,
  388            2 REASON#       UBIN BYTE UNAL %INIT(REASON)%CHARTEXT('/**/'),
  389                            /*B* REASON. Why we're logging this privilege
  390                            request.                                     */
  391            2 GRANTED#      BIT(1)  UNAL   %INIT(GRANTED)%CHARTEXT('/**/'),
  392                            /*B* GRANTED. Was the request granted or not.*/
  393            2 *             BIT(26) UNAL   %INIT('0'B)%CHARTEXT('/**/'),
  394            2 PRIV#         BIT(36) UNAL   %INIT(PRIV)%CHARTEXT('/**/');
  395                            /*B* PRIV. What interesting privilege(s) were
  396                            requested.                                  */
  397      %MEND;
  398      /**/
  399      /*F* NAME:  ES$MON_SRV
  400
  401           Used to trigger logging of interesting, privileged monitor
  402           service calls in the security log.  Currently, these are only
  403           logged when denied.
  404      */
  405      /**/
  406      %MACRO ES$MON_SRV(NAME=ES$MON_SRV,
  407                        STCLASS=BASED,
14:23 JUL 28 '97 ES_TABLES_M.:E05SI                                        12   
  408                        REASON=0,
  409                        GRANTED (YES='1'B,NO='0'B)='0'B,
  410                        PMME_TYPE=0,
  411                        PRIV='0'B);
  412      %LSET LISTDIR='0'B;
  413      %LSET LISTEXP='1'B;
  414      %LSET LISTCOM='0'B;
  415      %LSET LISTSUB='1'B;
  416      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  417      %IF (SUBSTR(STR,0,6)='STATIC') OR
  418          (SUBSTR(STR,0,8)='CONSTANT') OR
  419          (SUBSTR(STR,0,3)='EXT');
  420      %LSET INIT=CHARTEXT('INIT');
  421      %ELSE;
  422      %LSET INIT=CHARTEXT('/*');
  423      %ENDIF;
  424      DCL 1 NAME STCLASS ALIGNED,
  425            2 REASON#       UBIN BYTE UNAL %INIT(REASON)%CHARTEXT('/**/'),
  426                            /*B* REASON. Reason for logging.             */
  427            2 GRANTED#      BIT(1)    UNAL %INIT(GRANTED)%CHARTEXT('/**/'),
  428                            /*B* GRANTED. Was the request granted or not.*/
  429            2 *             BIT(26)   UNAL %INIT('0'B)%CHARTEXT('/**/'),
  430            2 PMME_TYPE#    UBIN(18) UNAL  %INIT(PMME_TYPE)%CHARTEXT('/**/'),
  431                            /*B* PMME_TYPE. Which PMME caused this to be
  432                            logged.                                     */
  433            2 *             UBIN(18) UNAL  %INIT(0)%CHARTEXT('/**/'),
  434            2 PRIV#         BIT(36)        %INIT(PRIV)%CHARTEXT('/**/');
  435                            /*B* PRIV. Which required privilege(s) were
  436                            needed.                                     */
  437      %MEND;
  438      /**/
  439      /*F* NAME:  ES$SYS_EXIT
  440
  441           Used to trigger logging of system exits (logoff) in the security
  442           log.
  443      */
  444      /**/
14:23 JUL 28 '97 ES_TABLES_M.:E05SI                                        13   
  445      %MACRO ES$SYS_EXIT(NAME=ES$SYS_EXIT,
  446                         STCLASS=BASED,
  447                         REASON=0,
  448                         JITPTR="ADDR(NIL)");
  449      %LSET LISTDIR='0'B;
  450      %LSET LISTEXP='1'B;
  451      %LSET LISTCOM='0'B;
  452      %LSET LISTSUB='1'B;
  453      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  454      %IF (SUBSTR(STR,0,6)='STATIC') OR
  455          (SUBSTR(STR,0,8)='CONSTANT') OR
  456          (SUBSTR(STR,0,3)='EXT');
  457      %LSET INIT=CHARTEXT('INIT');
  458      %ELSE;
  459      %LSET INIT=CHARTEXT('/*');
  460      %ENDIF;
  461      DCL 1 NAME STCLASS ALIGNED,
  462            2 REASON#       UBIN BYTE UNAL %INIT(REASON)%CHARTEXT('/**/'),
  463                            /*B* REASON. Reason for logging.             */
  464            2 *             BIT(27)   UNAL %INIT('0'B)%CHARTEXT('/**/'),
  465            2 JIT$          PTR            %INIT(JITPTR)%CHARTEXT('/**/');
  466                            /*B* JITPTR. Pointer to the user's JIT.      */
  467                            /* This won't necessarily be B$JIT$ if
  468                               recovery.                                 */
  469      %MEND;
  470      /**/
  471      /*F* NAME:  ES$ARES_BYPASS
  472
  473           Causes logging of an ARES model in the security log.  These are
  474           logged when the normal ARES security checks have been bypassed.
  475           The final security log record produced resembles a file access
  476           record except that one model name is logged instead of several
  477           individual files.
  478      */
  479      /**/
  480      %MACRO ES$ARES_BYPASS(NAME=ES$ARES_BYPASS,
  481                         STCLASS=BASED,
14:23 JUL 28 '97 ES_TABLES_M.:E05SI                                        14   
  482                         REASON=0,
  483                         GRANTED (YES='1'B,NO='0'B)='1'B);
  484      %LSET LISTDIR='0'B;
  485      %LSET LISTEXP='1'B;
  486      %LSET LISTCOM='0'B;
  487      %LSET LISTSUB='1'B;
  488      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  489      %IF (SUBSTR(STR,0,6)='STATIC') OR
  490          (SUBSTR(STR,0,8)='CONSTANT') OR
  491          (SUBSTR(STR,0,3)='EXT');
  492      %LSET INIT=CHARTEXT('INIT');
  493      %ELSE;
  494      %LSET INIT=CHARTEXT('/*');
  495      %ENDIF;
  496      DCL 1 NAME STCLASS DALIGNED,
  497            2 REASON#       UBIN BYTE CALIGNED %INIT(REASON)%CHARTEXT('/**/'),
  498                            /*B* REASON - UBIN BYTE. Reason for logging. */
  499            2 GRANTED#      BIT(1)    UNAL %INIT(GRANTED)%CHARTEXT('/**/'),
  500                            /*B* GRANTED - BIT(1). Whether access was
  501                            granted or not.                              */
  502            2 *             BIT(8)    UNAL %INIT('0'B)%CHARTEXT('/**/'),
  503            2 PSN#          CHAR(6)   CALIGNED %INIT(' ')%CHARTEXT('/**/'),
  504                            /*B* PSN# - CHAR(6). Packset name.           */
  505            2 ACCT#         CHAR(8)   CALIGNED %INIT(' ')%CHARTEXT('/**/'),
  506                            /*B* ACCT# - CHAR(8). Name of the account in
  507                            which the ARES files in question reside.     */
  508            2 MODEL_NAME,
  509                            /*B* MODEL_NAME - TEXTC format. Name of the
  510                            ARES model in question.                      */
  511              3 L#          UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
  512                            /*B* MODEL_NAME.L# - UBIN BYTE. Length of the
  513                            significant portion of MODEL_NAME.C#.        */
  514              3 C#          CHAR(31)  CALIGNED %INIT(' ')%CHARTEXT('/**/');
  515                            /*B* MODEL_NAME.C# - CHAR(31). Model name text.
  516                            Note that the file names of the ARES files in
  517                            question will begin with the model name.     */
  518      %MEND;

