

07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           1    
    1      /*M* TD_CP6 */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7       /*X* MEC,MOC,EXM=20,CRM=78 */
    8                                              /* TABS 7,9,11,25,31,40,79          */
    9                                              /**/
   10                          /*F* NAME: Test and Diagnostic Services.
   11
   12                          ..::L1 "Introduction to Test and Diagnostic Services\\X"
   13                          The monitor services in this section are provided
   14                          for advanced system programmers and require
   15                          special privilege.
   16
   17                          The Test and Diagnostics (T&D) interface provides
   18                          direct access to devices on a running CP-6 system
   19                          for preventive and emergency maintenance procedures.
   20                          The T&D interface permits a hardware diagnostic
   21                          program to be executed as a user job running in
   22                          slave mode.  The interface allows the user to
   23                          specify:
   24
   25                            o  The device to be tested (device number)
   26
   27                            o  The path to that device (IOM number, channel
   28                               number)
   29
   30                            o  The PCW (Peripheral Control Word) and channel;
   31                               program to be issued to that device.
   32
   33                          The T&D tests are classified according to their
   34                          requirements.  Peripheral On-Line Test Systems
   35                          (POLTS) test a peripheral device and run with the
   36                          application firmware in the associated
   37                          Micro-Programmed Controller.  Micro-coded Device
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           2    
   38                          Routines (MDRs) also test a peripheral device, but
   39                          reside in an overlay that is called into the
   40                          associated Micro-Programmed Controller.  Isolation
   41                          Test Routines (ITRs) test the actual MPC and
   42                          completely replace the application firmware in the
   43                          MPC.  The FEP test is used to perform
   44                          online testing of a FEP.  The test
   45                          software completely replaces the CP-6
   46                          front end software.
   47                          ..::L3 "Access Restrictions\\X"
   48                          A series of checks made prior to any T&D input or
   49                          output ensures that the security of the system is
   50                          not compromised.  Those checks are discussed in
   51                          the following paragraphs.
   52                          ..::L3 "T&D Service Access\\X"
   53                          Diagnostic privilege is required to access the T&D
   54                          services.  In other words, the user's account must
   55                          have diagnostic privilege; or the diagnostic
   56                          program must be a processor filed in :SYS, the
   57                          CP-6 system account.  In addition, the operator's
   58                          permission is required for a program to use the
   59                          T&D monitor services.
   60                          ..::L3 "Device Access\\X"
   61                          Generally T&Ds are permitted only on a peripheral
   62                          device that is idle and partitioned out of the
   63                          system.  The  exceptions are the system console,
   64                          which is not available for T&D, and shared
   65                          disks.  The availability of shared disks is
   66                          discussed later.  For any device to be available
   67                          for T&D the TDOK bit in the device's Device Control
   68                          Table (DCT) must be set.
   69
   70                          The two types of tests for peripheral devices,
   71                          POLTS and MDRs, can be run provided the path to
   72                          the device is available.  A Micro-Programmed
   73                          Controller loaded with the application firmware
   74                          can support any number of simultaneous POLTS tests
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           3    
   75                          on different devices, or can support one MDR at a
   76                          time.
   77
   78                          The monitor honors a request for an MDR, provided
   79                          the MPC is not running an ITR or another MDR.  The
   80                          monitor also honors a request for an MDR for a
   81                          disk drive attached to an MPC which is part of a
   82                          dual MPC subsystem, provided the other MPC is
   83                          available to the system (that is, not partitioned
   84                          out of the system and not running an ITR or
   85                          another MDR).
   86
   87                          A shared disk is any disk device that contains
   88                          a pack that is a member of a CP-6 packset or
   89                          does not have a pack mounted at the time of the
   90                          M$TDOPEN.  If the pack on the requested drive
   91                          is a scratch pack or not a CP-6 pack then the
   92                          shared disk restriction is not in effect.  The
   93                          diagnostic program is restricted to writing only
   94                          to the diagnostic cylinders of a shared disk.
   95                          ..::L3 "MPC Access\\X"
   96                          The MPC need not be partitioned out of the system
   97                          to be accessed for Test and Diagnostics.  The MPC
   98                          itself can be tested by an ITR, which completely
   99                          replaces the application firmware.  When an ITR is
  100                          running, normal I/O and POLTS tests are suspended.
  101                          The application firmware is immediately restored
  102                          on completion of the ITR; and normal I/O and POLTS
  103                          tests are resumed.
  104
  105                          The monitor honors a request for an ITR, provided
  106                          an MDR or another ITR is not running in the MPC.
  107                          The monitor also honors a request for an ITR for
  108                          an active MPC which is part of a dual MPC disk
  109                          subsystem, provided the other MPC is available to
  110                          the system (that is, not partitioned out and not
  111                          running another ITR or an MDR).*/
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           4    
  112                                              /**/
  113                          /*F* NAME: M$RDSYSLOG - Read System Log.
  114
  115                          The M$RDSYSLOG service returns the first filled or
  116                          partially filled system log buffer to the area
  117                          specified by BUF.  This service is used only by
  118                          the ELF ghost to maintain the system log files.
  119                          Each record in the buffer contains a 5-word header
  120                          and a log entry; for the format of the header,
  121                          include the file EL$TABLES and invoke the macro
  122                          %EL$HDR.
  123
  124                          The form of the call for this service is:
  125
  126                          CALL M$RDSYSLOG (FPT_RDSYSLOG) [ALTRET (label)];
  127
  128                          The parameter for this service is as follows:
  129                          */
  130      DCL M$RDSYSLOG ENTRY(1) CONV(1,1,28672) ALTRET;
  131                                              /**/
  132       %MACRO FPT_RDSYSLOG(FPTN=FPT_RDSYSLOG,
  133                       STCLASS=STATIC,
  134                       BUF=NIL);
  135
  136       %LSET LISTDIR='0'B;
  137       %LSET LISTEXP='1'B;
  138       %LSET LISTCOM='0'B;
  139       %LSET LISTSUB='1'B;
  140       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  141       %IF (SUBSTR(STR,0,6)='STATIC') OR
  142       (SUBSTR(STR,0,8)='CONSTANT') OR
  143       (SUBSTR(STR,0,3)='EXT');
  144       %LSET INIT=CHARTEXT('INIT');
  145       %ELSE;
  146       %LSET INIT=CHARTEXT('/*');
  147       %ENDIF;
  148
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           5    
  149      DCL 1 FPTN STCLASS DALIGNED,
  150            2 BUF_ BIT(72) %INIT(VECTOR(BUF))%CHARTEXT('/**/');
  151                          /*K* BUF = VARIABLE  specifies the location of a
  152                          512-word buffer that is to receive the system log
  153                          buffer.  The default is NIL.
  154                          */
  155       %MEND;
  156                                              /**/
  157                                              /**/
  158                                              /**/
  159      DCL M$WRSYSLOG ENTRY(1) CONV(1,2,28673) ALTRET;
  160                                              /**/
  161                          /*F* NAME: M$WRSYSLOG - Write System Log.
  162
  163                          The M$WRSYSLOG service allows users with Test and
  164                          Diagnostic or SYSLOG privilege to place an entry in the
  165                          system log.  If the entry is larger than 1000
  166                          words, an error code is returned and the alternate
  167                          return is taken.
  168
  169                          The form of the call for this service is:
  170
  171                          CALL M$WRSYSLOG (FPT_WRSYSLOG) [ALTRET (label)];
  172
  173                          The parameters for this service are as follows:
  174                          */
  175       %MACRO FPT_WRSYSLOG(FPTN=FPT_WRSYSLOG,
  176                       STCLASS=STATIC,
  177                       ENTRY=NIL,
  178                       MMINHIB(YES='1'B,NO='0'B)='0'B,
  179                       TYPE=0,
  180                       SIZE=0,
  181                       FILENUM(ERRLOG=1,ACCOUNTING=2,SECLOG=3,ANY)=1);
  182
  183       %LSET LISTDIR='0'B;
  184       %LSET LISTEXP='1'B;
  185       %LSET LISTCOM='0'B;
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           6    
  186       %LSET LISTSUB='1'B;
  187       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  188       %IF (SUBSTR(STR,0,6)='STATIC') OR
  189       (SUBSTR(STR,0,8)='CONSTANT') OR
  190       (SUBSTR(STR,0,3)='EXT');
  191       %LSET INIT=CHARTEXT('INIT');
  192       %ELSE;
  193       %LSET INIT=CHARTEXT('/*');
  194       %ENDIF;
  195
  196      DCL 1 FPTN STCLASS,
  197            2 V_ BIT(72) %INIT(VECTOR(FPTN.V))%CHARTEXT('/**/'),
  198            2 ENTRY_ BIT(72) %INIT(VECTOR(ENTRY))%CHARTEXT('/**/'),
  199                          /*K* ENTRY = VARIABLE  specifies the location of an
  200                          entry to be placed in the system log.  The entry
  201                          does not include the 5-word header.
  202                          The default is NIL.
  203                          */
  204            2 V DALIGNED,
  205              3 MMINHIB# BIT(1) %INIT(MMINHIB)%CHARTEXT('/**/'),
  206                          /*K* MMINHIB = {YES|NO}  specifies, if YES, that the
  207                          system logging routine is prevented from stealing
  208                          a page for buffer space on this call.  If no room
  209                          exists on the current buffer page, the error is
  210                          counted as a lost error.  The default is NO.
  211                          */
  212              3 * BIT(26) %INIT('0'B)%CHARTEXT('/**/'),
  213              3 TYPE# UBIN(36) %INIT(TYPE)%CHARTEXT('/**/'),
  214                          /*K* TYPE = VALUE-DEC(0-511) is the user-defined type
  215                          code to be placed in the entry header.  The default is 0.
  216                          */
  217              3 SIZE# UBIN(36) %INIT(SIZE)%CHARTEXT('/**/'),
  218                          /*K* SIZE = VALUE-DEC(0-500) specifies the size of the
  219                          entry in words.  This size does not include the
  220                          5-word header.  The default is 0.
  221                          */
  222              3 FILENUM# UBIN(36) %INIT(FILENUM)%CHARTEXT('/**/');
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           7    
  223                          /*K* FILENUM = {ERRLOG|ACCOUNTING|SECLOG|VALUE-DEC(4-99)}
  224                          specifies the file to
  225                          which the entry is to be written.  File number 1
  226                          is ERRLOG, file number 2 is ACCOUNTING, and file
  227                          number 3 is SECLOG.  All other files have the name
  228                          :ELFnn, where nn is the file number.  (A :ELFnn
  229                          file is created as a consecutive file if it does
  230                          not exist; however, if the file is created by
  231                          another process, it may be an indexed file, in
  232                          which case KEYX=3 and KEYL=5 are appropriate.)
  233                          The default
  234                          is 1 (ERRLOG).
  235                          */
  236       %MEND;
  237                                              /**/
  238                          /*F* NAME: M$TDOPEN - Open DCB for T&D.
  239
  240                          The M$TDOPEN service prepares for Test and
  241                          Diagnostic input or output for a specific
  242                          peripheral device or for a Micro-Programmed
  243                          Controller.  The open procedure consists of a
  244                          series of checks.  If a device is not known to the
  245                          system, if it cannot be accessed (see "Access
  246                          Restrictions" explained previously), if the device
  247                          is already open for T&D, or if the user does not
  248                          have diagnostic privilege, the monitor stores an
  249                          error code and takes the alternate
  250                          return.
  251
  252                          If the operator has not granted permission for
  253                          Test and Diagnostics, the monitor sends a message
  254                          to the operator.  If the operator grants
  255                          permission, the procedure continues.  If the
  256                          operator responds negatively, the monitor stores
  257                          an error code and takes the alternate
  258                          return.
  259
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           8    
  260                          The monitor sets up the DCB, which includes
  261                          clearing TYC, CONNCT#, CHANTIME#, FCN, and FCNF.
  262                          The device is prepared for Test and Diagnostics at
  263                          this point.
  264
  265                          The form of the call for this service is:
  266
  267                          CALL M$TDOPEN (FPT_TDOPEN) [ALTRET (label)];
  268
  269                          The parameters for this service are:
  270
  271                          */
  272      DCL M$TDOPEN ENTRY (1) CONV(1,4,28674) ALTRET;
  273                                              /**/
  274       %MACRO FPT_TDOPEN(FPTN=FPT_TDOPEN,
  275                      STCLASS=STATIC,
  276                      CHAIN=NIL,
  277                      VFC=NIL,
  278                      WINDOW=NIL,
  279                      DCB=NIL,
  280                      TEST(POLTS=1,ITR=2,MDR=3,MTAR=4,FEP=5,MCA=7,IPC=8)=0,
  281                      IOM=0,CHAN=0,DVN=0,NCHANS=0,
  282                      SPEVENT=0);
  283
  284       %LSET LISTDIR='0'B;
  285       %LSET LISTEXP='1'B;
  286       %LSET LISTCOM='0'B;
  287       %LSET LISTSUB='1'B;
  288       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  289       %IF (SUBSTR(STR,0,6)='STATIC') OR
  290       (SUBSTR(STR,0,8)='CONSTANT') OR
  291       (SUBSTR(STR,0,3)='EXT');
  292       %LSET INIT=CHARTEXT('INIT');
  293       %ELSE;
  294       %LSET INIT=CHARTEXT('/*');
  295       %ENDIF;
  296
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           9    
  297      DCL 1 FPTN STCLASS,
  298            2 V_ BIT(72) %INIT(VECTOR(FPTN.V))%CHARTEXT('/**/'),
  299            2 CHAIN_ BIT(72) %INIT(VECTOR(CHAIN))%CHARTEXT('/**/'), /* (PRINTER) CHAIN IMAGE BUFFER */
  300                          /*K* CHAIN = VARIABLE   locates an area to receive the
  301                          line printer chain image.  The default is NIL.
  302                          */
  303            2 VFC_ BIT(72) %INIT(VECTOR(VFC))%CHARTEXT('/**/'), /* (PRINTER) VFC IMAGE BUFFER */
  304                          /*K* VFC = VARIABLE   locates an area to receive the line
  305                          printer VFC image.  The default is NIL.
  306                          */
  307            2 WINDOW_ BIT(72) %INIT(VECTOR(WINDOW))%CHARTEXT('/**/'),
  308                          /*K* WINDOW = VARIABLE   locates an area in the user's
  309                          memory which is to be mapped into the base of the
  310                          FEP's working space quarter for FEP opens.  This
  311                          area must begin and end on page boundaries.  Word
  312                          zero of this area will be the coupler's L66 mailbox.
  313                          */
  314            2 V DALIGNED,
  315              3 DCB# UBIN(18) UNAL %INIT(DCBNUM(DCB))%CHARTEXT('/**/'),
  316                          /*K* DCB = DCBNAME   must be specified by the time of
  317                          the call for this service.  The default is NIL.
  318                          */
  319              3 DEVICE,                       /* DEVICE ID                        */
  320                4 DVN# UBIN(6) UNAL %INIT(DVN)%CHARTEXT('/**/'),
  321                          /*K* DVN = VALUE-DEC(0-63)  specifies the device number
  322                          of the device to be tested.  Device number zero
  323                          requests direct access to a Micro-Programmed
  324                          Controller, rather than a peripheral device
  325                          associated with the controller.  If TEST is equal
  326                          to FEP then DVN is the FEP number of the FEP to
  327                          be opened.  The default for DVN is 0.
  328                          */
  329                4 IOM# UBIN(3) UNAL %INIT(IOM)%CHARTEXT('/**/'),
  330                          /*K* IOM = VALUE-DEC(0-7)  specifies the IOM number of
  331                          the device to be tested.  The default is 0.
  332                          */
  333                4 CHAN# UBIN(9) UNAL %INIT(CHAN)%CHARTEXT('/**/'),
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           10   
  334                          /*K* CHAN = VALUE-DEC(0-127)  specifies the channel
  335                          number of the device to be tested.  The default is 0.
  336                          */
  337              3 SPEVENT# SBIN %INIT(SPEVENT)%CHARTEXT('/**/'), /* SPECIAL INTERRUPT EVENT */
  338                          /*K* SPEVENT = VALUE-DEC(0-n) specifies a code to
  339                          returned for special interrupts on this device or
  340                          channel.  Each special interrupt causes an event
  341                          completion notice containing the status word to be
  342                          sent to the user's event completion entry point.
  343                          This code will be returned on all coupler interrupts
  344                          for FEP opens.  The default is 0.
  345                          */
  346              3 TEST# UBIN(6) UNAL %INIT(TEST)%CHARTEXT('/**/'), /* TEST MODE (POLTS,ITR,MDR) */
  347                          /*K* TEST = OPTION    specifies the type of test to be
  348                               be run:  POLTS, MDR, ITR, MTAR, FEP, MCA, or IPC.
  349                               This parameter must be
  350                              specified by the time of the call for this
  351                              service.  Test opens can also be done by specifying
  352                              DEV or MPC.  The default is 0.  The default causes the
  353                              monitor to attempt a device test open.
  354                                                                                  */
  355              3 NCHANS# UBIN(6) UNAL %INIT(NCHANS)%CHARTEXT('/**/'), /* NO OF CHANS FOR TEST IPC */
  356                          /*K* NCHANS = VALUE-DEC(0-63)  specifies the number
  357                              of channels that are to be tested if TEST is
  358                              IPC.  If TEST is not IPC, this parameter is
  359                              ignored.  The default is 0.
  360                                                                      */
  361              3 * BIT(60) UNAL %INIT('0'B)%CHARTEXT('/**/');
  362       %MEND;
  363                                              /**/
  364                          /*F* NAME: M$TDCLOSE - Close DCB for T&D.
  365
  366                          The M$TDCLOSE service closes a peripheral device
  367                          Micro-Programmed Controller or FEP for Test and
  368                          Diagnostics.  The close process waits for any
  369                          outstanding T&D input or output to complete.  The
  370                          monitor also reloads the application firmware in
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           11   
  371                          an MPC if an ITR was running and, if necessary,
  372                          releases the MPC to perform normal I/O if an ITR
  373                          or MDR was running.
  374
  375                          This service is also called by the job step
  376                          cleanup routine for each open T&D DCB when a job
  377                          step terminates.
  378
  379                          The form of the call for this service is:
  380
  381                          CALL M$TDCLOSE (FPT_TDCLOSE) [ALTRET (label)];
  382
  383                          The parameter for this service is:
  384                          */
  385      DCL M$TDCLOSE ENTRY (1) CONV(1,1,28675) ALTRET;
  386                                              /**/
  387       %MACRO FPT_TDCLOSE(FPTN=FPT_TDCLOSE,
  388                       STCLASS=STATIC,
  389                       DCB=NIL);
  390
  391       %LSET LISTDIR='0'B;
  392       %LSET LISTEXP='1'B;
  393       %LSET LISTCOM='0'B;
  394       %LSET LISTSUB='1'B;
  395       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  396       %IF (SUBSTR(STR,0,6)='STATIC') OR
  397       (SUBSTR(STR,0,8)='CONSTANT') OR
  398       (SUBSTR(STR,0,3)='EXT');
  399       %LSET INIT=CHARTEXT('INIT');
  400       %ELSE;
  401       %LSET INIT=CHARTEXT('/*');
  402       %ENDIF;
  403
  404      DCL 1 FPTN STCLASS,
  405            2 V_ BIT(72) %INIT(VECTOR(FPTN.V))%CHARTEXT('/**/'),
  406            2 V DALIGNED,
  407              3 DCB# UBIN(18) UNAL %INIT(DCBNUM(DCB))%CHARTEXT('/**/');
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           12   
  408                          /*K* DCB = DCBNAME  must be specified by the time of
  409                          the call for this service.  The default is 0.
  410                          */
  411       %MEND;
  412                                              /**/
  413                          /*F* NAME: M$TDIO - Perform T&D I/O.
  414
  415                          The M$TDIO service requests that T&D input or
  416                          output be performed.  The DCWLIST parameter
  417                          supplies the channel program to be performed.  The
  418                          user may also specify an alternate path to access
  419                          the device.  The monitor sets up the I/O request
  420                          packet and calls the appropriate device scheduler
  421                          to start the I/O, after certain preliminary checks
  422                          discussed later.  The I/O can be requested with or
  423                          without a wait.  The M$CHECK monitor service may
  424                          be used to await the completion of a T&D I/O.  Or,
  425                          if WAIT=NO, the monitor takes the normal return at
  426                          this point.
  427
  428                          On completion of the I/O, the DCB is set with the
  429                          hardware status doubleword, the final LPW, and a
  430                          completion code.  The monitor sends notice of
  431                          event completion, if requested by the EVENT
  432                          parameter.  If WAIT=YES, the monitor takes the
  433                          normal return.
  434
  435                          The monitor takes the alternate return for the
  436                          service call if any of the following conditions
  437                          are detected:
  438
  439                            o  The specified DCB is not open for T&D.
  440
  441                            o  The access restrictions are not met for the
  442                               alternate path to the device (the same checks
  443                               performed by M$TDOPEN occur for the alternate
  444                               path).
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           13   
  445
  446                            o  The device is a shared disk and the diagnostic
  447                               program attempts to write on other than the
  448                               diagnostic cylinders.
  449
  450                            o  For ITR and MDR tests, the first IDCW in the
  451                               DCWLIST is not a suspend command and the suspend
  452                               flag is not set for the MPC in the DCT entry.
  453
  454                          If the T&D DCB is open to an FEP then only the
  455                          DCB and PCW parameters to M$TDIO are significant.
  456                          Bits 21-23 of PCW are moved to the corresponding
  457                          bits of the PCW for the connect on the coupler
  458                          channel.  All other bits of PCW are ignored.
  459                          The caller must have set up the WINDOW area (see
  460                          M$TDOPEN) prior to the call to M$TDIO.  M$TDIO
  461                          will always return immediately after issuing the
  462                          connect to the coupler.
  463
  464                          NOTE: During T&D I/O no error recovery is
  465                          performed.  If a fault interrupt occurs for the
  466                          specified channel during the request, the system
  467                          fault word is returned and the I/O request is
  468                          terminated.
  469
  470                          The form of the call for this service is:
  471
  472                          CALL M$TDIO (FPT_TDIO) [ALTRET (label)];
  473
  474                          The parameters for this service are:
  475                          */
  476      DCL M$TDIO ENTRY (1) CONV(1,3,28676) ALTRET;
  477                                              /**/
  478       %MACRO FPT_TDIO(FPTN=FPT_TDIO,
  479                    STCLASS=STATIC,
  480                    DCWLIST=NIL,
  481                    DATA=NIL,
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           14   
  482                    DCB=NIL,
  483                    WAIT(YES='1'B,NO='0'B)='1'B,
  484                    TIMEOUT=0,
  485                    IOM=0,CHAN=0,
  486                    PCW='000000700000'O,
  487                    EVENT=0);
  488
  489       %LSET LISTDIR='0'B;
  490       %LSET LISTEXP='1'B;
  491       %LSET LISTCOM='0'B;
  492       %LSET LISTSUB='1'B;
  493       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  494       %IF (SUBSTR(STR,0,6)='STATIC') OR
  495       (SUBSTR(STR,0,8)='CONSTANT') OR
  496       (SUBSTR(STR,0,3)='EXT');
  497       %LSET INIT=CHARTEXT('INIT');
  498       %ELSE;
  499       %LSET INIT=CHARTEXT('/*');
  500       %ENDIF;
  501
  502      DCL 1 FPTN STCLASS,
  503            2 V_ BIT(72) %INIT(VECTOR(FPTN.V))%CHARTEXT('/**/'),
  504            2 DCWLIST_ BIT(72) %INIT(VECTOR(DCWLIST))%CHARTEXT('/**/'), /* DCW LIST PTR */
  505                          /*K* DCWLIST = VARIABLE  locates an area containing the
  506                          Data Control Word List.  The DCW List must be
  507                          below the upper bound of the data buffer area but
  508                          is not necessarily within the data buffer area.
  509                          All DCW addresses must be in relation to the
  510                          beginning of the data buffer area.
  511                          .spf
  512                          Note:  For the DPS8000, in a DCW list a Transfer
  513                          DCW (TDCW) is not allowed to follow the last
  514                          Instruction DCW (IDCW).  This restriction is
  515                          required for the DPS 8000 because the TDCWs must
  516                          be modified by the operating system prior to
  517                          performing the requested IO.  No attempt is made
  518                          to scan a DCW list beyond its last IDCW.
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           15   
  519
  520                          The DCWLIST parameter must be specified by the
  521                          time of the call for this service.  The default
  522                          is NIL.
  523                          */
  524            2 DATA_ BIT(72) %INIT(VECTOR(DATA))%CHARTEXT('/**/'), /* FRAMES DATA BUFFER AREA */
  525                          /*K* DATA = VARIABLE   locates a buffer area to be used
  526                          for T&D input or output.  All these data buffers
  527                          must be in the area framed by FPT_TDIO.DATA_; the
  528                          entire area must be on a doubleword boundary.  If
  529                          it is not, the hardware reports boundary
  530                          violations in bits 21-23 of the first hardware
  531                          status word.  All T&D I/O is done in NSA paged
  532                          mode with LPW address and segmented DCW
  533                          addressing.  The lower bound and size of the
  534                          payload channel LPW will frame the area specified
  535                          by FPT_TDIO.DATA_.  The default is NIL.
  536                          */
  537            2 V DALIGNED,
  538              3 DCB# UBIN(18) UNAL %INIT(DCBNUM(DCB))%CHARTEXT('/**/'),
  539                          /*K* DCB = DCBNAME   must be specified by the time of
  540                          the call for this service.  The default is NIL.
  541                          */
  542              3 WAIT# BIT(1) %INIT(WAIT)%CHARTEXT('/**/'), /* WAIT FLAG           */
  543                          /*K* WAIT = {YES|NO}    specifies, if YES, that the user
  544                          is to be blocked until the I/O is complete.
  545                          The default is YES.
  546                          */
  547              3 * BIT(5) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  548              3 ALTPATH,                      /* ALTERNATE PATH SELECTION IF  =0  */
  549                4 IOM# UBIN(3) UNAL %INIT(IOM)%CHARTEXT('/**/'), /* IOM NUMBER    */
  550                          /*K* IOM = VALUE-DEC(0-7)  specifies the IOM number, if
  551                          a path other than the one specified in the DCB is
  552                          to be used.  The default is 0./
  553                          */
  554                4 CHAN# UBIN(9) UNAL %INIT(CHAN)%CHARTEXT('/**/'), /* CHANNEL NUMBER */
  555                          /*K* CHAN = VALUE-DEC(0-127)  specifies the channel
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           16   
  556                          number if a path other than the one specified in
  557                          the DCB is to be used.  The default is 0.
  558                          */
  559              3 PCW# BIT(36) ALIGNED %INIT(PCW)%CHARTEXT('/**/'), /* PERIPHERAL CONTROL WORD */
  560                          /*K* PCW = VALUE-BIT(36)  specifies the first word of
  561                          the Peripheral Control Word as an octal string.
  562                          The default is '000000700000'O.
  563                          */
  564              3 EVENT# SBIN %INIT(EVENT)%CHARTEXT('/**/'), /* COMPLETION EVENT    */
  565                          /*K* EVENT = VALUE-DEC(0-n)  specifies the code to be
  566                          returned on completion of no-wait I/O.  If the value is 0
  567                          then no event will be reported.  The default is 0.
  568                          */
  569              3 TIMEOUT# UBIN(6) UNAL %INIT(TIMEOUT)%CHARTEXT('/**/'),
  570                          /*K*  TIMEOUT = VALUE-DEC(0-63).  Specifies the number
  571                          of five
  572                          second intervals after which this I/O is to be timed out.
  573                          A value of N means the timeout will occur in (N-1)*5 to
  574                          N*5 seconds.  A value of 0 is interpreted as 64 intervals.
  575                          The default is 0.                                       */
  576              3 * BIT(30) UNAL %INIT('0'B)%CHARTEXT('/**/');
  577       %MEND;
  578                                              /**/
  579
  580                          /*F* NAME: M$TDREQCPU - Request CPU for T&D.
  581
  582                          The Request CPU service allows a user with
  583                          diagnostic feature authorization to request that a
  584                          specified processor (CPU) be placed in diagnostic
  585                          mode, and to specify whether or not execution of
  586                          the current job step is to be performed by the
  587                          processor only.  Only one user on one processor may be in
  588                          diagnostic mode at any time, and that processor
  589                          may not be removed from service by an operator
  590                          STOP or MAKE key-in.
  591
  592                          The form of the call for this service is:
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           17   
  593
  594                          CALL M$TDREQCPU (FPT_TDREQCPU) [ALTRET(label)];
  595
  596                          The parameters for this service are as follows:
  597                          */
  598      DCL M$TDREQCPU ENTRY(1) ALTRET CONV(1,1,28677);
  599                                              /**/
  600       %MACRO FPT_TDREQCPU (FPTN=FPT_TDREQCPU,
  601                        STCLASS=STATIC,
  602                        MODE(DIAG=1,NORMAL=2)=0,
  603                        XEQ(NONTDJASSIGN=3,JASSIGN=2,ASSIGN=1,ANY=0)=0,
  604                        TYPE(L66=0,DPSE=1,ELS=2,DPS90=4,DPS90XA=5,DPS8000=6)=0,
  605                        CPU=511);
  606
  607       %LSET LISTDIR='0'B;
  608       %LSET LISTEXP='1'B;
  609       %LSET LISTCOM='0'B;
  610       %LSET LISTSUB='1'B;
  611       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  612       %IF (SUBSTR(STR,0,6)='STATIC') OR
  613       (SUBSTR(STR,0,8)='CONSTANT') OR
  614       (SUBSTR(STR,0,3)='EXT');
  615       %LSET INIT=CHARTEXT('INIT');
  616       %ELSE;
  617       %LSET INIT=CHARTEXT('/*');
  618       %ENDIF;
  619
  620      DCL 1 FPTN STCLASS,
  621            2 V_ BIT(72) %INIT(VECTOR(FPTN.V))%CHARTEXT('/**/'),
  622            2 V DALIGNED,
  623              3 MODE# UBIN(9) UNAL %INIT(MODE)%CHARTEXT('/**/'),
  624                          /*K* MODE = {DIAG|NORMAL} DIAG specifies the processor is
  625                          to be placed in diagnostic mode and NORMAL
  626                          specifies it is to be released from diagnostic
  627                          mode.  If MODE is not specified, no change is made
  628                          in the processor mode.  At completion of the
  629                          current job step, the processor mode is reset to
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           18   
  630                          normal.  If NORMAL is specified, XEQ is ignored.
  631                          The default is NIL.
  632                          */
  633              3 * BIT(27) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  634              3 XEQ# UBIN(9) UNAL %INIT(XEQ)%CHARTEXT('/**/'),
  635                     /*K* XEQ = {NONTDJASSIGN|JASSIGN|ASSIGN|ANY}  ASSIGN specifies
  636                that subsequent slave mode execution during the current job step
  637                is to be performed by the specified diagnostic
  638                mode processor.  JASSIGN specifies that execution is to
  639                be performed by the specified diagnostic mode processor for
  640                the remainder of the job or session.  If MODE is DIAG,
  641                NONTDJASSIGN specifies that execution is to be performed
  642                on a specific processor or a specific processor type for
  643                the remainder of the job or session.  Multiple users may be
  644                running in NONTDJASSIGN mode at the same time on the same
  645                processor or on different processors.  If NONTDJASSIGN is
  646                specified and CPU is ~=511, then execution is performed
  647                on the CPU specified by the CPU field; if CPU is 511, then
  648                execution is performed on a processor of the type specified
  649                by the TYPE field.  ANY specifies that execution may
  650                be performed by any processor in diagnostic mode.  The
  651                default for ASSIGN is ANY.
  652                */
  653              3 * BIT(27) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  654              3 TYPE# UBIN(9) UNAL %INIT(TYPE)%CHARTEXT('/**/'),
  655       /*K* TYPE = {L66|DPSE|ELS|DPS8000|DPS90|DPS90XA|DPS8000} TYPE specifies the CPU
  656       type on which the user wants to run.  If MODE is
  657       DIAG and XEQ is NONTDJASSIGN and CPU is zero, then
  658       execution is to be performed on a CPU of the
  659       specified type for the remainder of the job or
  660       session without checking or setting diagnostic
  661       mode.  The default is L66.
  662       */
  663              3 * BIT(27) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  664              3 CPU# UBIN(9) UNAL %INIT(CPU)%CHARTEXT('/**/'),
  665                          /*K* CPU = VALUE-DEC(0-n)   specifies a processor port
  666                          number.  The default is 511.
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           19   
  667                          */
  668              3 * BIT(27) UNAL %INIT('0'B)%CHARTEXT('/**/');
  669       %MEND;
  670                          /*F* NAME: M$IOQ - Input or Output Queueing.
  671
  672                          The M$IOQ service perform a direct I/O request.
  673                It performs its I/O through NIO$QUE and thus is not for T&D I/O.
  674                The PR_IOQ# privilege is required to use M$IOQ.
  675                The PR_IOQW# privilege is also required for write operations.
  676
  677                The form of the call for this service is:
  678
  679                CALL M$IOQ (FPT_IOQ) [ALTRET (label)];
  680
  681                The parameters for this service are as follows:
  682                */
  683      DCL M$IOQ ENTRY (1) CONV(1,2,28678) ALTRET;
  684                                              /**/
  685       %MACRO FPT_IOQ(FPTN=FPT_IOQ,
  686                    STCLASS=STATIC,
  687                    BPMIR(YES='1'B,NO='0'B)='0'B,
  688                    BUF=NIL,
  689                    CHAN=0,
  690                    DCB=NIL,
  691                    DCTX=0,DRELADDR=0,
  692                    EVENT=0,
  693                    FC=0,
  694                    IOM=0,
  695                    WAIT(YES='1'B,NO='0'B)='1'B) ;
  696
  697       %LSET LISTDIR='0'B;
  698       %LSET LISTEXP='1'B;
  699       %LSET LISTCOM='0'B;
  700       %LSET LISTSUB='1'B;
  701       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  702       %IF (SUBSTR(STR,0,6)='STATIC') OR
  703       (SUBSTR(STR,0,8)='CONSTANT') OR
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           20   
  704       (SUBSTR(STR,0,3)='EXT');
  705       %LSET INIT=CHARTEXT('INIT');
  706       %ELSE;
  707       %LSET INIT=CHARTEXT('/*');
  708       %ENDIF;
  709
  710      DCL 1 FPTN STCLASS,
  711            2 V_ BIT(72) %INIT(VECTOR(FPTN.V))%CHARTEXT('/**/'),
  712            2 BUF_,
  713              3 BOUND UBIN(20) UNAL %INIT(SIZEV(BUF))%CHARTEXT('/**/'),
  714              3 * BIT(12) %INIT('7772'O)%CHARTEXT('/**/'),
  715              3 * BIT(4) %INIT('0'B)%CHARTEXT('/**/'),
  716              3 BUF$ PTR %INIT(ADDR(BUF))%CHARTEXT('/**/'),
  717                          /*K* BUF = VARIABLE  Locates a data buffer or DCW
  718                          list followed by a data buffer.  The default is NIL.
  719                          .spf
  720                          Note:  For the DPS8000, in a DCW list a Transfer
  721                          DCW (TDCW) is not allowed to follow the last
  722                          Instruction DCW (IDCW).  This restriction is
  723                          required for the DPS 8000 because the TDCWs must
  724                          be modified by the operating system prior to
  725                          performing the requested IO.  No attempt is made
  726                          to scan a DCW list beyond its last DCW.
  727                          */
  728            2 V DALIGNED,
  729              3 DCB# UBIN(18) UNAL %INIT(DCBNUM(DCB))%CHARTEXT('/**/'),
  730                          /*K* DCB = VALUE-DEC(0-n).  Specifies a DCB number for
  731                          synchronizing I/O.  The default is NIL.                 */
  732              3 FC# UBIN(6) UNAL %INIT(FC)%CHARTEXT('/**/'),
  733                          /*K* FC = VALUE-DEC(0-n).  Specifies a logical Function
  734                          code.  The default is 0.                                */
  735              3 WAIT# BIT(1) %INIT(WAIT)%CHARTEXT('/**/'),
  736                          /*K* WAIT = {YES|NO}  WAIT=YES specifies that the
  737                          operation is to be completed before control is
  738                          returned to the user program.  If WAIT=YES, the
  739                          DCB must be specified.  WAIT=NO requests the monitor
  740                          to transfer control to the next user statement
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           21   
  741                          after the I/O operation is started.  The default is YES.
  742                          */
  743
  744              3 BPMIR# BIT(1) %INIT(BPMIR)%CHARTEXT('/**/'),
  745                          /*K* BPMIR = {YES|NO}  BPMIR=NO specifies that normal
  746                          Mirrored Disk IO processing is to be used (i.e.,
  747                          not bypassed).
  748                          If BPMIR=YES, then the normal Mirrored Disk IO
  749                          processing will be bypassed and the IO will
  750                          be done only on the device specified.
  751                          This parameter is examined only if this operation
  752                          is done to a Mirrored Disk.  The default is NO (i.e.,
  753                          do not bypass normal Mirrored Disk IO processing).
  754                          */
  755
  756              3 * BIT(10) %INIT('0'B)%CHARTEXT('/**/'),
  757              3 DLA ALIGNED,
  758                          /*B* DLA = Device Logical Address                       */
  759                4 DCTX# UBIN(15) UNAL %INIT(DCTX)%CHARTEXT('/**/'),
  760                          /*K* DCTX = VALUE-DEC(1-n).  Specifies the DCT
  761                          index portion of the device logical address.  The
  762                          maximum value of DCTX is NK_MXLOCAL, a value
  763                          calculated at tape boot time.  (NK_MXLOCAL may be
  764                          set as high as 2**15-1, but it is usually a great
  765                          deal less than that.)
  766                          This value is stored in the field DLA.DCTX#.
  767                          The default is 0.                                       */
  768                4 DRELADDR# UBIN(21) UNAL %INIT(DRELADDR)%CHARTEXT('/**/'),
  769                          /*K* DRELADDR = VALUE-DEC(0-2**21-1).  Specifies
  770                          the device relative address (e.g., granule number)
  771                          portion of the device logical address.
  772                          This value is stored in the field DLA.DRELADDR#.
  773                          The default is 0.
  774                          */
  775
  776              3 EVENT# SBIN %INIT(EVENT)%CHARTEXT('/**/'),
  777                          /*K* EVENT = VALUE-DEC(0-n).  Specifies the event
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           22   
  778                          completion code to be reported when I/O completes.
  779                          EVENT is used only when WAIT=NO.  The default is 0.     */
  780              3 IOM# UBIN(9) UNAL %INIT(IOM)%CHARTEXT('/**/'),
  781                          /*K* IOM = VALUE-DEC(0-3).  Specifies the logical
  782                          IOM number to be used to do the IO if CHAN is not
  783                          equal to 0.
  784                          This value is stored in the field IOM#.
  785                          The default is 0.                                       */
  786              3 CHAN# UBIN(9) UNAL %INIT(CHAN)%CHARTEXT('/**/') ;
  787                          /*K* CHAN = VALUE-DEC(0-127).  Specifies the
  788                          logical channel number to be used to do the IO
  789                          if the value is greater than 0.  If the value is
  790                          zero, the IO system will choose the channel to
  791                          do the IO to the specified DCTX.
  792                          This value is stored in the field CHAN#.
  793                          The default is 0.                                       */
  794       %MEND;
  795                                              /**/
  796                                              /**/
  797                          /*F* NAME: M$SYSCON - Peripheral Control or Status.
  798
  799                          This service is used by the SYSCON processor to
  800                          partition and return peripheral components and to get
  801                          the current status of a component.
  802
  803                          The M$SYSCON monitor services provides several
  804                          safeguards:
  805
  806                          .inl 4
  807                          .unl 4
  808                          o^^^M$SYSCON will not allow the last remaining
  809                          console to be partitioned.
  810
  811                          .unl 4
  812                          o^^^M$SYSCON does not allow the channels associated
  813                          with FEPs and consoles to be partitioned separately;
  814                          they are partitioned when those devices are
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           23   
  815                          partitioned.
  816
  817                          .unl 4
  818                          o^^^M$SYSCON does not allow devices requiring a
  819                          controller (all devices except FEPs and consoles)
  820                          to be returned unless both a channel and controller
  821                          are available.
  822                          .inl 0
  823
  824                          The form of the call for this service is:
  825
  826                          CALL M$SYSCON (FPT_SYSCON) [ALTRET(label)];
  827
  828                          The parameters for this service are as follows:
  829                          */
  830                                              /**/
  831      DCL M$SYSCON ENTRY(1) CONV(1,2,28679) ALTRET;
  832                                              /**/
  833       %MACRO FPT_SYSCON (FPTN=FPT_SYSCON,
  834                       STCLASS=STATIC,
  835                       RESULT=NIL,
  836                       DEVNM=' ',
  837                       IOM=0,CHAN=0,
  838                       FUNCTION(PARTITION=1,RETURN=2,DISPLAY=3,SETFLAG=4,RELEASE=5)=0,
  839                       COMPONENT(CHANNEL=1,DVC=2,MPC=3,FEP=4,IOM=5)=0,
  840                       FLAG(TDOK=1,CHECKWRITE=2)=0,
  841                       FLAGVAL(YES='1'B,NO='0'B)='0'B);
  842
  843       %LSET LISTDIR='0'B;
  844       %LSET LISTEXP='1'B;
  845       %LSET LISTCOM='0'B;
  846       %LSET LISTSUB='1'B;
  847       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  848       %IF (SUBSTR(STR,0,6)='STATIC') OR
  849       (SUBSTR(STR,0,8)='CONSTANT') OR
  850       (SUBSTR(STR,0,3)='EXT');
  851       %LSET INIT=CHARTEXT('INIT');
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           24   
  852       %ELSE;
  853       %LSET INIT=CHARTEXT('/*');
  854       %ENDIF;
  855
  856      DCL 1 FPTN STCLASS,
  857            2 V_ BIT(72) %INIT(VECTOR(FPTN.V))%CHARTEXT('/**/'),
  858            2 RESULT_ BIT(72) %INIT(VECTOR(RESULT))%CHARTEXT('/**/'),
  859                          /*K* RESULT = VARIABLE  Locates an area into which the
  860                          status of the component is to be returned.  See
  861                          VLR_SYSCON macro for description.                       */
  862            2 V DALIGNED,
  863              3 FUNCTION# UBIN BYTE UNAL %INIT(FUNCTION)%CHARTEXT('/**/'),
  864           /*K* FUNCTION = {PARTITION|RETURN|DISPLAY|SETFLAG|RELEASE}  Specifies
  865           the action to be taken.  PARTITION means the component
  866           specified is to be partitioned from the system.  RETURN
  867           means the specified component that has previously been
  868           partitioned is to be returned.  DISPLAY means return
  869           the current status of the component in the RESULT area.
  870           SETFLAG means to set the flag specified in FLAG to the value
  871           specified in FLAGVAL.  RELEASE means the component is
  872           to be released from the system.                                        */
  873              3 COMPONENT# UBIN BYTE UNAL %INIT(COMPONENT)%CHARTEXT('/**/'),
  874                          /*K* COMPONENT = {CHANNEL|DVC|MPC|FEP|IOM|CPU|SCU}
  875                          Specifies type of component.                            */
  876              3 IOM# UBIN BYTE UNAL %INIT(IOM)%CHARTEXT('/**/'),
  877                          /*K* IOM = VALUE-DEC(0-7).  Specifies the IOM number
  878                          and is significant only if COMPONENT = CHANNEL or
  879                          IOM.
  880                          */
  881              3 CPU# REDEF IOM# UBIN BYTE UNAL,
  882                          /*K* CPU = VALUE-DEC(0-7).  Specifies the CPU number and
  883                          is significant only if COMPONENT is CPU.
  884                          */
  885              3 SCU# REDEF IOM# UBIN BYTE UNAL,
  886                          /*K* SCU = VALUE-DEC(0-1).  Specifies the SCU number and
  887                          is significant only if COMPONENT is SCU.
  888                          */
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           25   
  889              3 CHAN# UBIN BYTE UNAL %INIT(CHAN)%CHARTEXT('/**/'),
  890                          /*K* CHAN = VALUE-DEC(0-127).  Specifies the channel
  891                          number and is significant only if COMPONENT = CHANNEL
  892                          or FEP.  If COMPONENT=FEP, then CHAN is the FEP number.
  893                          */
  894              3 DEVNM# CHAR(8) %INIT(DEVNM)%CHARTEXT('/**/'),
  895                          /*K* DEVNM = VALUE-CHAR(8).  Specifies the name of the
  896                          component and is significant only if COMPONENT = DVC
  897                          or MPC.                                                 */
  898              3 FLAG# UBIN BYTE UNAL %INIT(FLAG)%CHARTEXT('/**/'),
  899                          /*K* FLAG = {TDOK|CHECKWRITE}   Specifies the flag
  900                               which is to be set to FLAGVAL.  TDOK means the
  901                               TDOK bit in the corresponding Device Control Table (DCT)
  902                               or Driver Queue Header (DQH).  CHECKWRITE means
  903                               the CHECKWRITE bit in the corresponding
  904                          DCT.
  905
  906                          CHECKWRITE is meaningful for disks only.  TDOK is not
  907                          meaningful for an IOM.                                  */
  908              3 FLAGVAL# BIT(1) %INIT(FLAGVAL)%CHARTEXT('/**/');
  909                          /*K* FLAGVAL = VALUE-BIT(1).  Specifies the value to be
  910                               placed in the bit specified by FLAG.               */
  911       %MEND;
  912                                              /**/
  913                          /*F* NAME: VLR_SYSCON
  914
  915                                   The VLR_SYSCON macro generates an area for
  916                                   the results of the M$SYSCON service.  The
  917                                   contents of this area are as follows:
  918                                                                             */
  919       %MACRO VLR_SYSCON (FPTN=VLR_SYSCON,
  920                       STCLASS=STATIC);
  921
  922       %LSET LISTDIR='0'B;
  923       %LSET LISTEXP='1'B;
  924       %LSET LISTCOM='0'B;
  925       %LSET LISTSUB='1'B;
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           26   
  926       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  927       %IF (SUBSTR(STR,0,6)='STATIC') OR
  928       (SUBSTR(STR,0,8)='CONSTANT') OR
  929       (SUBSTR(STR,0,3)='EXT');
  930       %LSET INIT=CHARTEXT('INIT');
  931       %ELSE;
  932       %LSET INIT=CHARTEXT('/*');
  933       %ENDIF;
  934
  935      DCL 1 FPTN STCLASS DALIGNED,
  936            2 PART# BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  937                          /*K* PART = VALUE-BIT(1).  Set if the component is
  938                          partitioned.                                            */
  939            2 TDOK# BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  940                          /*K* TDOK = VALUE-BIT(1).  Set if T&D is allowed on this
  941                          component.                                              */
  942            2 CHECKWRITE# BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  943                          /*K* CHECKWRITE = VALUE-BIT(1).  Set if CHECKWRITE is
  944                          turned on for this device.  Applies to disk only.       */
  945            2 RELEASED# BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  946                          /*K* RELEASED = VALUE-BIT(1).  Set if the component is
  947                          released.
  948                          */
  949            2 * BIT(2) %INIT('0'B)%CHARTEXT('/**/'),
  950                               /* This space is reserved so that we can say RESULT=
  951                               DCT.STATUS or DQH.STATUS.                          */
  952            2 SYSCONPART# BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  953                          /*K* SYSCONPART = VALUE-BIT(1).  Set if the component has
  954                          been partitioned via the M$SYSCON monitor service.      */
  955            2 MSOSPART# BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  956                          /*K* MSOSPART = VALUE-BIT(1).  Set if the component
  957                          has been partitioned by MSOS.
  958
  959                          This flag is valid only for DPS90 systems.              */
  960            2 * BIT(19) %INIT('0'B) %CHARTEXT('/**/'),
  961            2 BOOTINFO,
  962              3 OLD# BIT(1) %INIT('0'B) %CHARTEXT('/**/'),
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           27   
  963                          /*K* OLD = VALUE BIT(1).  Set if the previous boot
  964                          information was partitioned.
  965
  966                          The fully qualified name of this entry is
  967                          VLR_SYSCON.BOOTINFO.OLD#.                               */
  968              3 NEW# BIT(1) %INIT('0'B) %CHARTEXT('/**/'),
  969                          /*K* NEW = VALUE-BIT(1).  Set if the boot information
  970                          was changed to a new value.
  971
  972                          The fully qualified name of this entry is
  973                          VLR_SYSCON.BOOTINFO.NEW#.                               */
  974              3 ERR# BIT(1) %INIT('0'B) %CHARTEXT('/**/'),
  975                          /*K* ERR = VALUE-BIT(1).  Set if an error occurred
  976                          in rewriting new boot information to disk.
  977
  978                          The fully qualified name of this entry is
  979                          VLR_SYSCON.BOOTINFO.ERR#.                               */
  980              3 * BIT(6) %INIT('0'B) %CHARTEXT('/**/'),
  981              3 OLDIOM# UBIN(2) UNAL %INIT(0) %CHARTEXT('/**/'),
  982                          /*K* OLDIOM = VALUE-UBIN(2).  Set to the logical
  983                          IOM number of the previous boot-time information.
  984
  985                          This value is valid only if
  986                          VLR_SYSCON.BOOTINFO.OLD# is set.
  987
  988                          The fully qualified name of this entry is
  989                          VLR_SYSCON.BOOTINFO.OLDIOM#.                            */
  990              3 OLDCHAN# UBIN(7) UNAL %INIT(0) %CHARTEXT('/**/'),
  991                          /*K* OLDCHAN = VALUE-UBIN(7).  Set to the
  992                          channel number of the previous boot-time
  993                          information.
  994
  995                          This value is valid only if
  996                          VLR_SYSCON.BOOTINFO.OLD# is set.
  997
  998                          The fully qualified name of this entry is
  999                          VLR_SYSCON.BOOTINFO.OLDCHAN#.                           */
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           28   
 1000              3 * UBIN(9) UNAL %INIT(0) %CHARTEXT('/**/'),
 1001              3 NEWIOM# UBIN(2) UNAL %INIT(0) %CHARTEXT('/**/'),
 1002                          /*K* NEWIOM = VALUE-UBIN(2).  Set to the logical
 1003                          IOM number of the new boot-time information.
 1004
 1005                          This value is valid only if
 1006                          VLR_SYSCON.BOOTINFO.NEW# is set.
 1007
 1008                          The fully qualified name of this entry is
 1009                          VLR_SYSCON.BOOTINFO.NEWIOM#.                            */
 1010              3 NEWCHAN# UBIN(7) UNAL %INIT(0) %CHARTEXT('/**/'),
 1011                          /*K* NEWCHAN = VALUE-UBIN(7).  Set to the
 1012                          channel number of the new boot-time
 1013                          information.
 1014
 1015                          This value is valid only if
 1016                          VLR_SYSCON.BOOTINFO.NEW# is set.
 1017
 1018                          The fully qualified name of this entry is
 1019                          VLR_SYSCON.BOOTINFO.NEWCHAN#.                           */
 1020              3 * UBIN(9) UNAL %INIT(0) %CHARTEXT('/**/') ;
 1021       %MEND;
 1022                          /*F* NAME: M$MIRROR - Manipulate Mirrored Disks.
 1023
 1024                          The M$MIRROR service is used to manipulate Mirrored
 1025                          Disk devices.  The purpose of this PMME is to set values
 1026                     within DCTs for Mirrored Disk devices and to make error log
 1027                     entries for the change of state of Mirrored Disk devices.
 1028
 1029                     The PR_IOQ# and PR_IOQW# privileges are required to use M$IOQ.
 1030
 1031                     The form of the call for this service is:
 1032
 1033                     CALL M$MIRROR (FPT_MIRROR) [ALTRET (label)];
 1034
 1035                     The parameters for this service are as follows:
 1036                     */
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           29   
 1037      DCL M$MIRROR ENTRY (1) CONV(1,1,28680) ALTRET;
 1038                                              /**/
 1039       %MACRO FPT_MIRROR(FPTN=FPT_MIRROR,
 1040                         STCLASS=STATIC,
 1041                         DCTX=0,
 1042                         DRZERO=0,
 1043                         FUNCTION(BREAK=1,
 1044                                  CHGSTATE=2,
 1045                                  LOCK=3,
 1046                                  MAKE=4,
 1047                                  SWITCH=5,
 1048                                  UNLOCK=6)=0,
 1049                         MDCTX=0,
 1050                         MSTATE(FAIL=1,
 1051                                OPER=0,
 1052                                REST=2,
 1053                                WAIT=3)=0,
 1054                         PRIMARY(YES='1'B,NO='0'B)='0'B,
 1055                         STATE(FAIL=1,
 1056                               OPER=0,
 1057                               REST=2,
 1058                               WAIT=3)=0,
 1059                         UTS=0 ) ;
 1060
 1061       %LSET LISTDIR='0'B;
 1062       %LSET LISTEXP='1'B;
 1063       %LSET LISTCOM='0'B;
 1064       %LSET LISTSUB='1'B;
 1065       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1066       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1067       (SUBSTR(STR,0,8)='CONSTANT') OR
 1068       (SUBSTR(STR,0,3)='EXT');
 1069       %LSET INIT=CHARTEXT('INIT');
 1070       %ELSE;
 1071       %LSET INIT=CHARTEXT('/*');
 1072       %ENDIF;
 1073
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           30   
 1074      %EQU  TMD#BREAK         =  1 /* TMD#BREAK    */ ;
 1075      %EQU  TMD#CHGSTATE      =  2 /* TMD#CHGSTATE */ ;
 1076      %EQU  TMD#LOCK          =  3 /* TMD#LOCK     */ ;
 1077      %EQU  TMD#MAKE          =  4 /* TMD#MAKE     */ ;
 1078      %EQU  TMD#SWITCH        =  5 /* TMD#SWITCH   */ ;
 1079      %EQU  TMD#UNLOCK        =  6 /* TMD#UNLOCK   */ ;
 1080
 1081      DCL 1 FPTN STCLASS,
 1082            2 V_ BIT(72) %INIT(VECTOR(FPTN.V))%CHARTEXT('/**/'),
 1083            2 V DALIGNED,
 1084              3 FUNCTION# UBIN(6) UNAL %INIT(FUNCTION)%CHARTEXT('/**/'),
 1085                          /*K* FUNCTION = {BREAK|CHGSTATE|LOCK|MAKE|SWITCH|UNLOCK}
 1086                     Specifies the function to be performed by this M$MIRROR PMME.
 1087
 1088                     BREAK specifies that a Mirrored Disk operation is to be
 1089                     terminated.  DCTX must be a primary Mirrored Disk device
 1090                     and must be OPERational.  MDCTX must be a secondary
 1091                     Mirrored Disk device and must be either FAILed or
 1092                     OPERational.
 1093
 1094                     CHGSTATE specifies that the state of the DCTX Mirrored
 1095                     Disk device is to be changed to the value specified by
 1096                     STATE.
 1097
 1098                     LOCK specifies that the DCTX Mirrored Disk device is to
 1099                     be LOCKed.
 1100
 1101                     MAKE specifies that a Mirrored Disk device pair is to
 1102                     be created.  DCTX will be set to the state specified by
 1103                     STATE.  MDCTX will be set to the state specified by
 1104                     MSTATE.  If PRIMARY=YES, then DCTX will be the primary
 1105                     Mirrored Disk device and MDCTX will be the secondary
 1106                     Mirrored Disk device.  If PRIMARY=NO, then MDCTX will be
 1107                     the primary Mirrored Disk device and DCTX will be the
 1108                     secondary Mirrored Disk device.
 1109
 1110                     SWITCH specifies that the primary Mirrored Disk device
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           31   
 1111                     is to be changed to the device specified by DCTX.  DCTX
 1112                     must not currently be the primary Mirrored Disk device
 1113                     and DCTX must be operational.
 1114
 1115                     UNLOCK specifies that the DCTX Mirrored Disk device is
 1116                     to be UNLOCKed.
 1117                                                   */
 1118              3 STATE# UBIN(6) UNAL %INIT(STATE)%CHARTEXT('/**/'),
 1119                          /*K* STATE = {FAIL|OPER|REST|WAIT}
 1120                          Specifies the new value for the state of the
 1121                          DCTX Mirrored Disk device.  For FUNCTION=CHGSTATE, all
 1122                          outstanding IOs are completed before the state change
 1123                          is made.  This parameter is used only if
 1124                          FUNCTION=MAKE or FUNCTION=CHGSTATE.
 1125                          The default is FAIL.                                    */
 1126              3 PRIMARY# BIT(1) UNAL %INIT(PRIMARY)%CHARTEXT('/**/'),
 1127                          /*K* PRIMARY = {YES|NO}
 1128                          Specifies whether or not the DCTX Mirrored Disk device
 1129                          is the primary Mirrored Disk device.  This parameter is
 1130                          used only if FUNCTION=MAKE.                             */
 1131              3 * BIT(5) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1132              3 DCTX# UBIN(18) UNAL %INIT(DCTX)%CHARTEXT('/**/'),
 1133                          /*K* DCTX = VALUE-DEC(0-(NK_MXLOCAL-1)).  Specifies the
 1134                     DCT index of the first Mirrored Disk device to be modified.
 1135                     This parameter must be specified.
 1136                     The default is 0.                                            */
 1137              3 * BIT(6) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1138              3 MSTATE# UBIN(6) UNAL %INIT(MSTATE)%CHARTEXT('/**/'),
 1139                          /*K* MSTATE = {FAIL|OPER|REST|WAIT}
 1140                          Specifies the new value for the state of
 1141                          MDCTX Mirrored Disk device.
 1142                          This parameter is used only if FUNCTION=MAKE.
 1143                          The default is FAIL.                                    */
 1144              3 * BIT(6) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1145              3 MDCTX# UBIN(18) UNAL %INIT(MDCTX)%CHARTEXT('/**/'),
 1146                          /*K* MDCTX = VALUE-DEC(0-(NK_MXLOCAL-1)).  Specifies the
 1147                     DCT index of the second Mirrored Disk device to be modified.
07:32 JUL 29 '97 TD_CP6_C.:E05SI                                           32   
 1148                     This parameter is used only if FUNCTION=MAKE.
 1149                     The default is 0.                                            */
 1150              3 DRZERO# UBIN(36) ALIGNED %INIT(DRZERO)%CHARTEXT('/**/'),
 1151                          /*K* DRZERO = VALUE-DEC.  Specifies the minimum device
 1152                          relative address that is to use normal Mirrored Disk
 1153                          IO processing.  This parameter is only used if
 1154                          FUNCTION=MAKE.
 1155                          The default is 0.                                       */
 1156              3 UTS# UBIN(36) ALIGNED %INIT(UTS)%CHARTEXT('/**/') ;
 1157                          /*K*  UTS=VALUE-DEC.  Specifies the UTS value that is
 1158                          to be used when setting the new state of the Mirrored
 1159                          Disk device.  This parameter must be specified if
 1160                          CHGSTATE is specified.                                  */
 1161       %MEND;

