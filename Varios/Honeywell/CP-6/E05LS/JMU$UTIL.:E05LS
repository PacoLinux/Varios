VERSION E05

PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:1    
        1        1        /*M* JMU$UTIL BATCH SCHEDULER UTILITY ROUTINES                              */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*F*   NAME:   JMU$ALLOC_SLOTS                                     */
        8        8        /*F*   PURPOSE: To allocate (another) page of memory to the free   */
        9        9        /*,*           slot list in data segment #5, chaining the new       */
       10       10        /*,*           slots   onto the free list.                         */
       11       11        JMU$ALLOC_SLOTS: PROC;
       12       12        /**/
       13       13
       14       14
       15       15
       16       16        /**/
       17       17        /* INCLUDES */
       18       18        %INCLUDE CP_6;                          /* FPT DEFINITIONS                    */
       19       99        %INCLUDE B_SEGIDS_C;                    /* SEGID DEFINITINS                   */
       20      638        %INCLUDE JM$STRUCT;                     /* MBS TABLE STRUCTURES               */
       21     1383        %INCLUDE JMC_DATA_R;                    /* MBS-RESIDENT STATIC GLOBAL DATA    */
       22     1398        %INCLUDE JM_SCODE_C;
       23     1425        %SUB F_JM='1215'O;
       24     1426        %SUB M_U='25'O;
       25     1427        %INCLUDE FOS_SUBS_C;
       26     1444
       27     1445
       28     1446
       29     1447        /**/
       30     1448        /* BASED STRUCTURES */
       31     1449        /**/
       32     1450        %JM_SN (FPTN=JM$QSN,STCLASS=BASED);
       33     1489        %JM_RES (FPTN=JM$QRIT,STCLASS=BASED);
       34     1526
       35     1527
       36     1528
       37     1529        /**/
PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:2    
       38     1530        /* AUTO */
       39     1531        /**/
       40     1532    1   DCL TOP SBIN;
       41     1533    1   DCL TPTR$ PTR;
       42     1534    1   DCL LPTR$ PTR;
       43     1535    1   DCL I SBIN;
       44     1536
       45     1537
       46     1538
       47     1539        /**/
       48     1540        /* STATIC */
       49     1541        /**/
       50     1542        %FPT_GDS(FPTN=GET_SLOTSEG,
       51     1543                 RESULTS=SLOT_VEC,
       52     1544                 SEGSIZE=1024);
       53     1560        %FPT_JOBSTATS(FPTN=MAP_RESTBL,
       54     1561                      ORDER=REMAP,
       55     1562                      STATSEG=FOSS_MBSRES#);
       56     1582    1   DCL 1 SLOT_VEC STATIC DALIGNED,
       57     1583    1         2 WD1,
       58     1584    1           3 SIZ UBIN(20) UNAL,
       59     1585    1           3 * UBIN(16) UNAL,
       60     1586    1         2 WD2,
       61     1587    1           3 * UBIN(24) UNAL,
       62     1588    1           3 SEGID BIT(12) UNAL INIT(%DS5SID),
       63     1589    1         2 PTR$ REDEF WD2 PTR;
       64     1590
       65     1591
       66     1592
       67     1593        /**/
       68     1594        /* SYMREFS */
       69     1595        /**/
       70     1596    1   DCL B$DS5$ PTR SYMREF;
       71     1597
       72     1598
       73     1599
       74     1600        /**/
PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:3    
       75     1601        /* ENTREFS */
       76     1602        /**/
       77     1603    1   DCL FOI$CRASH     ENTRY(3) ALTRET;
       78     1604        /**/
       79     1605        /**/
       80     1606    1         CALL M$GDS(GET_SLOTSEG) ALTRET(BAD_GDS);
       81     1607        /* GET NEW TOP OF SEG & BACK OFF A PAGE TO POINT TO START OF PAGE  */
       82     1608        /* WE JUST GOT.                                                    */
       83     1609    1         TOP = (SLOT_VEC.WD1.SIZ + 1)/4 - 1024;
       84     1610    1         TPTR$ = PINCRW(SLOT_VEC.PTR$,TOP);
       85     1611        /* FIGURE OUT HOW MANY OF THE 'SLOTS' FIT IN A PAGE & LINK 'EM UP  */
       86     1612    1         JMC_SLOTHD$ = TPTR$;
       87     1613    1         JMC_SLOTCNT = 1024/SIZEW(B$DS5$->JM$QRIT);
       88     1614    2           DO I = 1 TO JMC_SLOTCNT-1;
       89     1615    2           LPTR$ = PINCRW(TPTR$,SIZEW(B$DS5$->JM$QRIT));
       90     1616    2           TPTR$->JM$QRIT.NXT$ = LPTR$;
       91     1617    2           TPTR$ = LPTR$;
       92     1618    2           END;
       93     1619    1         TPTR$->JM$QRIT.NXT$  = ADDR(NIL);
       94     1620    1         JMC_SLOTTL$ = TPTR$;
       95     1621    1         MAP_RESTBL.BUF_ = SLOT_VEC;
       96     1622    1         CALL M$JOBSTATS(MAP_RESTBL) ALTRET(RESMAP_ERR);
       97     1623    1         RETURN;
       98     1624        /**/
       99     1625    1   BAD_GDS:
      100     1626        /*S* SCREECH_CODE: JMU-S$JM225
      101     1627             TYPE:         SCREECH
      102     1628             MESSAGE:      MBS can't get data segment space for packsets
      103     1629                           or resources
      104     1630        */
      105     1631    1         CALL FOI$CRASH (%S$JM225,F_JM,M_U);
      106     1632        /**/
      107     1633    1   RESMAP_ERR:
      108     1634        /*S* SCREECH_CODE: JMU-S$JM239
      109     1635             TYPE:         SCREECH
      110     1636             MESSAGE:      MBS can't remap packset or resource data segment
      111     1637                           for M$JOBSTATS
PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:4    
      112     1638        */
      113     1639    1         CALL FOI$CRASH (%S$JM239,F_JM,M_U);
      114     1640    1   END JMU$ALLOC_SLOTS;
      115     1641        %EOD;

PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:5    
--  Include file information  --

   FOS_SUBS_C.:E05TOU  is referenced.
   JM_SCODE_C.:E05TOU  is referenced.
   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JMU$ALLOC_SLOTS.

   Procedure JMU$ALLOC_SLOTS requires 52 words for executable code.
   Procedure JMU$ALLOC_SLOTS requires 8 words of local(AUTO) storage.

PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:6    

 Object Unit name= JMU$ALLOC_SLOTS                            File name= JMU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:32:01.88 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    44     54  JMU$ALLOC_SLOTS
    2   Proc  even  none    52     64  JMU$ALLOC_SLOTS
    3  RoData even  none    10     12  JMU$ALLOC_SLOTS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        0  JMU$ALLOC_SLOTS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 FOI$CRASH
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:7    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  JMC_CH                                JMC_SLOTHD$
     JMC_SLOTTL$                           JMC_SLOTCNT                           B$DS5$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:8    


        1        1        /*M* JMU$UTIL BATCH SCHEDULER UTILITY ROUTINES                              */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*F*   NAME:   JMU$ALLOC_SLOTS                                     */
        8        8        /*F*   PURPOSE: To allocate (another) page of memory to the free   */
        9        9        /*,*           slot list in data segment #5, chaining the new       */
       10       10        /*,*           slots   onto the free list.                         */
       11       11        JMU$ALLOC_SLOTS: PROC;

     11  2 000000   000000 700200 xent  JMU$ALLOC_S* TSX0  ! X66_AUTO_0
         2 000001   000010 000000                    ZERO    8,0

       12       12        /**/
       13       13
       14       14
       15       15
       16       16        /**/
       17       17        /* INCLUDES */
       18       18        %INCLUDE CP_6;                          /* FPT DEFINITIONS                    */
       19       99        %INCLUDE B_SEGIDS_C;                    /* SEGID DEFINITINS                   */
       20      638        %INCLUDE JM$STRUCT;                     /* MBS TABLE STRUCTURES               */
       21     1383        %INCLUDE JMC_DATA_R;                    /* MBS-RESIDENT STATIC GLOBAL DATA    */
       22     1398        %INCLUDE JM_SCODE_C;
       23     1425        %SUB F_JM='1215'O;
       24     1426        %SUB M_U='25'O;
       25     1427        %INCLUDE FOS_SUBS_C;
       26     1444
       27     1445
       28     1446
       29     1447        /**/
       30     1448        /* BASED STRUCTURES */
       31     1449        /**/
       32     1450        %JM_SN (FPTN=JM$QSN,STCLASS=BASED);
PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:9    
       33     1489        %JM_RES (FPTN=JM$QRIT,STCLASS=BASED);
       34     1526
       35     1527
       36     1528
       37     1529        /**/
       38     1530        /* AUTO */
       39     1531        /**/
       40     1532    1   DCL TOP SBIN;
       41     1533    1   DCL TPTR$ PTR;
       42     1534    1   DCL LPTR$ PTR;
       43     1535    1   DCL I SBIN;
       44     1536
       45     1537
       46     1538
       47     1539        /**/
       48     1540        /* STATIC */
       49     1541        /**/
       50     1542        %FPT_GDS(FPTN=GET_SLOTSEG,
       51     1543                 RESULTS=SLOT_VEC,
       52     1544                 SEGSIZE=1024);
       53     1560        %FPT_JOBSTATS(FPTN=MAP_RESTBL,
       54     1561                      ORDER=REMAP,
       55     1562                      STATSEG=FOSS_MBSRES#);
       56     1582    1   DCL 1 SLOT_VEC STATIC DALIGNED,
       57     1583    1         2 WD1,
       58     1584    1           3 SIZ UBIN(20) UNAL,
       59     1585    1           3 * UBIN(16) UNAL,
       60     1586    1         2 WD2,
       61     1587    1           3 * UBIN(24) UNAL,
       62     1588    1           3 SEGID BIT(12) UNAL INIT(%DS5SID),
       63     1589    1         2 PTR$ REDEF WD2 PTR;
       64     1590
       65     1591
       66     1592
       67     1593        /**/
       68     1594        /* SYMREFS */
       69     1595        /**/
PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:10   
       70     1596    1   DCL B$DS5$ PTR SYMREF;
       71     1597
       72     1598
       73     1599
       74     1600        /**/
       75     1601        /* ENTREFS */
       76     1602        /**/
       77     1603    1   DCL FOI$CRASH     ENTRY(3) ALTRET;
       78     1604        /**/
       79     1605        /**/
       80     1606    1         CALL M$GDS(GET_SLOTSEG) ALTRET(BAD_GDS);

   1606  2 000002   000000 630400 1                  EPPR0   GET_SLOTSEG
         2 000003   430001 713400                    CLIMB   alt,gds
         2 000004   400400 401760                    pmme    nvectors=2
         2 000005   000053 702000 2                  TSX2    BAD_GDS

       81     1607        /* GET NEW TOP OF SEG & BACK OFF A PAGE TO POINT TO START OF PAGE  */
       82     1608        /* WE JUST GOT.                                                    */
       83     1609    1         TOP = (SLOT_VEC.WD1.SIZ + 1)/4 - 1024;

   1609  2 000006   000052 236000 1                  LDQ     SLOT_VEC
         2 000007   000020 772000                    QRL     16
         2 000010   000001 036007                    ADLQ    1,DL
         2 000011   000002 772000                    QRL     2
         2 000012   002000 136007                    SBLQ    1024,DL
         2 000013   200003 756100                    STQ     TOP,,AUTO

       84     1610    1         TPTR$ = PINCRW(SLOT_VEC.PTR$,TOP);

   1610  2 000014   000022 736000                    QLS     18
         2 000015   000053 036000 1                  ADLQ    SLOT_VEC+1
         2 000016   200004 756100                    STQ     TPTR$,,AUTO

       85     1611        /* FIGURE OUT HOW MANY OF THE 'SLOTS' FIT IN A PAGE & LINK 'EM UP  */
       86     1612    1         JMC_SLOTHD$ = TPTR$;

PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:11   
   1612  2 000017   000000 756000 xsym               STQ     JMC_SLOTHD$

       87     1613    1         JMC_SLOTCNT = 1024/SIZEW(B$DS5$->JM$QRIT);

   1613  2 000020   000525 235007                    LDA     341,DL
         2 000021   000000 755000 xsym               STA     JMC_SLOTCNT

       88     1614    2           DO I = 1 TO JMC_SLOTCNT-1;

   1614  2 000022   000001 235007                    LDA     1,DL
         2 000023   200006 755100                    STA     I,,AUTO
         2 000024   000034 710000 2                  TRA     s:1618+1

       89     1615    2           LPTR$ = PINCRW(TPTR$,SIZEW(B$DS5$->JM$QRIT));

   1615  2 000025   200004 236100                    LDQ     TPTR$,,AUTO
         2 000026   000003 036003                    ADLQ    3,DU
         2 000027   200005 756100                    STQ     LPTR$,,AUTO

       90     1616    2           TPTR$->JM$QRIT.NXT$ = LPTR$;

   1616  2 000030   200004 470500                    LDP0    TPTR$,,AUTO
         2 000031   000002 756100                    STQ     2,,PR0

       91     1617    2           TPTR$ = LPTR$;

   1617  2 000032   200004 756100                    STQ     TPTR$,,AUTO

       92     1618    2           END;

   1618  2 000033   200006 054100                    AOS     I,,AUTO
         2 000034   200006 236100                    LDQ     I,,AUTO
         2 000035   000000 116000 xsym               CMPQ    JMC_SLOTCNT
         2 000036   000025 604000 2                  TMI     s:1615

       93     1619    1         TPTR$->JM$QRIT.NXT$  = ADDR(NIL);

PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:12   
   1619  2 000037   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000040   200004 470500                    LDP0    TPTR$,,AUTO
         2 000041   000002 756100                    STQ     2,,PR0

       94     1620    1         JMC_SLOTTL$ = TPTR$;

   1620  2 000042   200004 236100                    LDQ     TPTR$,,AUTO
         2 000043   000000 756000 xsym               STQ     JMC_SLOTTL$

       95     1621    1         MAP_RESTBL.BUF_ = SLOT_VEC;

   1621  2 000044   000052 237000 1                  LDAQ    SLOT_VEC
         2 000045   000010 757000 1                  STAQ    MAP_RESTBL+2

       96     1622    1         CALL M$JOBSTATS(MAP_RESTBL) ALTRET(RESMAP_ERR);

   1622  2 000046   000006 630400 1                  EPPR0   MAP_RESTBL
         2 000047   570001 713400                    CLIMB   alt,+61441
         2 000050   405400 401760                    pmme    nvectors=12
         2 000051   000057 702000 2                  TSX2    RESMAP_ERR

       97     1623    1         RETURN;

   1623  2 000052   000000 702200 xent               TSX2  ! X66_ARET

       98     1624        /**/
       99     1625    1   BAD_GDS:
      100     1626        /*S* SCREECH_CODE: JMU-S$JM225
      101     1627             TYPE:         SCREECH
      102     1628             MESSAGE:      MBS can't get data segment space for packsets
      103     1629                           or resources
      104     1630        */
      105     1631    1         CALL FOI$CRASH (%S$JM225,F_JM,M_U);

   1631  2 000053   000003 630400 3     BAD_GDS      EPPR0   3
         2 000054   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000055   000000 701000 xent               TSX1    FOI$CRASH
PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:13   
         2 000056   000000 011000                    NOP     0

      106     1632        /**/
      107     1633    1   RESMAP_ERR:
      108     1634        /*S* SCREECH_CODE: JMU-S$JM239
      109     1635             TYPE:         SCREECH
      110     1636             MESSAGE:      MBS can't remap packset or resource data segment
      111     1637                           for M$JOBSTATS
      112     1638        */
      113     1639    1         CALL FOI$CRASH (%S$JM239,F_JM,M_U);

   1639  2 000057   000007 630400 3     RESMAP_ERR   EPPR0   7
         2 000060   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000061   000000 701000 xent               TSX1    FOI$CRASH
         2 000062   000000 011000                    NOP     0

      114     1640    1   END JMU$ALLOC_SLOTS;

   1640  2 000063   000000 702200 xent               TSX2  ! X66_ARET
      115     1641        %EOD;

PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:14   
--  Include file information  --

   FOS_SUBS_C.:E05TOU  is referenced.
   JM_SCODE_C.:E05TOU  is referenced.
   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JMU$ALLOC_SLOTS.
PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:15   

 **** Variables and constants ****

  ****  Section 001  Data  JMU$ALLOC_SLOTS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 GET_SLOTSEG                6-0-0/d STRC(1296)  r     1 MAP_RESTBL
    52-0-0/d STRC(72)    r     1 SLOT_VEC

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w SBIN        r     1 I                          5-0-0/w PTR         r     1 LPTR$
     3-0-0/w SBIN        r     1 TOP                        4-0-0/w PTR         r     1 TPTR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$DS5$                     0-0-0/w SBIN        r     1 JMC_SLOTCNT
     0-0-0/w PTR         r     1 JMC_SLOTHD$                0-0-0/w PTR         r     1 JMC_SLOTTL$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(108)   r     1 JM$QRIT


   Procedure JMU$ALLOC_SLOTS requires 52 words for executable code.
   Procedure JMU$ALLOC_SLOTS requires 8 words of local(AUTO) storage.
PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:16   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:17   
          MINI XREF LISTING

B$DS5$
      1596**DCL      1613>>ASSIGN   1615>>ASSIGN
BAD_GDS
      1631**LABEL    1606--CALLALT
FOI$CRASH
      1603**DCL-ENT  1631--CALL     1639--CALL
GET_SLOTSEG
      1555**DCL      1606<>CALL
GET_SLOTSEG.V
      1555**DCL      1555--DCLINIT
I
      1535**DCL      1614<<DOINDEX
JM$QRIT
      1504**DCL      1613--ASSIGN   1615--ASSIGN
JM$QRIT.NXT$
      1520**DCL      1616<<ASSIGN   1619<<ASSIGN
JM$QRIT.VNUM
      1511**DCL      1513--REDEF
JMC_CH
      1391**DCL      1392--REDEF
JMC_SLOTCNT
      1395**DCL      1613<<ASSIGN   1614>>DOINDEX
JMC_SLOTHD$
      1394**DCL      1612<<ASSIGN
JMC_SLOTTL$
      1394**DCL      1620<<ASSIGN
LPTR$
      1534**DCL      1615<<ASSIGN   1616>>ASSIGN   1617>>ASSIGN
M$GDS
        62**DCL-ENT  1606--CALL
M$JOBSTATS
        92**DCL-ENT  1622--CALL
PL6.E3A0      #001=JMU$ALLOC_SLOTS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:32 Page:18   
MAP_RESTBL
      1573**DCL      1622<>CALL
MAP_RESTBL.BUF_
      1573**DCL      1621<<ASSIGN
MAP_RESTBL.V
      1577**DCL      1573--DCLINIT
RESMAP_ERR
      1639**LABEL    1622--CALLALT
SLOT_VEC
      1582**DCL      1555--DCLINIT  1621>>ASSIGN
SLOT_VEC.PTR$
      1589**DCL      1610>>ASSIGN
SLOT_VEC.WD1.SIZ
      1584**DCL      1609>>ASSIGN
SLOT_VEC.WD2
      1586**DCL      1589--REDEF
TOP
      1532**DCL      1609<<ASSIGN   1610>>ASSIGN
TPTR$
      1533**DCL      1610<<ASSIGN   1612>>ASSIGN   1615>>ASSIGN   1616>>ASSIGN   1617<<ASSIGN   1619>>ASSIGN
      1620>>ASSIGN

PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:19   
      116        1        /*T***********************************************************/
      117        2        /*T*                                                         */
      118        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      119        4        /*T*                                                         */
      120        5        /*T***********************************************************/
      121        6        /*X* DMC,PLM=6,IND=0,IDT=2,SDI=2,CTI=0,ENU=0,AND,DCI=4,CSU=2,ECU=4,THI=0,DTI=0,STI=1
                 6        ,IAD=0,PRB */
      122        7        /*F*   NAME:   JMU$ARRANGEQ                                        */
      123        8        /*F*   PURPOSE: To arrange (ADD2Q, ADD2RAQ, ADD2HD, ADD2TL,        */
      124        9        /*,*           UNLINK, MOVE) JM$IF structures within MBS's queues. */
      125       10        JMU$ARRANGEQ: PROC (FROM#,TO#,IF$);
      126       11        /**/
      127       12
      128       13
      129       14
      130       15        /**/
      131       16        /* INCLUDES */
      132       17        /**/
      133       18        %INCLUDE CP_6;
      134       99        %INCLUDE JM_SCODE_C;
      135      126        %SUB F_JM='1215'O;
      136      127        %SUB M_U='25'O;
      137      128        %INCLUDE JM$STRUCT;                 /* MBS table structures.       */
      138      873        %INCLUDE JMC_DATA_R;                /* MBS-resident STATIC data.   */
      139      888        %INCLUDE JM_SUBS_C;                 /* MBS queue index equates.    */
      140      994        %INCLUDE B_STRINGS_C;               /* Systemwide equates.         */
      141     1123
      142     1124
      143     1125
      144     1126        /**/
      145     1127        /* PARAMETERS */
      146     1128        /**/
      147     1129    1   DCL FROM# SBIN;                     /* Queue to move from...       */
      148     1130    1   DCL TO# SBIN;                       /* ...queue to move to...      */
      149     1131    1   DCL IF$ PTR;                        /* ...JM$IF entry to be moved. */
      150     1132
      151     1133
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:20   
      152     1134
      153     1135        /**/
      154     1136        /* BASED */
      155     1137        /**/
      156     1138        %JM_IF (FPTN=JM$IF,STCLASS=BASED);
      157     1296
      158     1297
      159     1298
      160     1299        /**/
      161     1300        /* AUTO */
      162     1301        /**/
      163     1302    1   DCL LPTR$ PTR;
      164     1303    1   DCL QPTR$ PTR;
      165     1304    1   DCL TPTR$ PTR;
      166     1305
      167     1306
      168     1307
      169     1308        /**/
      170     1309        /* ENTREFS */
      171     1310        /**/
      172     1311    1   DCL FOI$CRASH     ENTRY(3) ALTRET;
      173     1312
      174     1313        %EJECT;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:21   
      175     1314        /**/
      176     1315        /*F*   NAME:   JMU$MOVE_IF                                         */
      177     1316        /*F*   PURPOSE: To move a given input file entry from one of the   */
      178     1317        /*,*           batch scheduler queues to another.                  */
      179     1318    1   JMU$MOVE_IF: ENTRY (FROM#,TO#,IF$);
      180     1319        /**/
      181     1320        /* Unlink the entry pointed to by IF$ from the FROM# queue.        */
      182     1321    1         CALL UNLINK_IF;
      183     1322        /* Then, fall through to JMU$ADD2Q to place the entry into the     */
      184     1323        /* TO# queue.                                                      */
      185     1324
      186     1325        /**/
      187     1326        /*F*   NAME:   JMU$ADD2Q                                           */
      188     1327        /*F*   PURPOSE: To place an input job file in a particular queue.  */
      189     1328        /* FROM# is unused.                                                */
      190     1329    1   JMU$ADD2Q: ENTRY (FROM#,TO#,IF$);
      191     1330        /**/
      192     1331        /* If the TO# queue is empty, then just add to its tail.           */
      193     1332    1         IF (JMC_CHAINS.HEAD$(TO#) = ADDR(NIL)) THEN
      194     1333    2           DO;
      195     1334    2           CALL ADD2TL;
      196     1335    2           RETURN;
      197     1336    2           END;
      198     1337    1         ELSE
      199     1338    2           DO;
      200     1339        /* Add to the tail if the new file's SUBMIT_TIME is greater than   */
      201     1340        /* or equal to that of the last queue entry.                       */
      202     1341    2           IF IF$->JM$IF.SUBMIT_TIME >=
      203     1342    2           JMC_CHAINS.TAIL$(TO#)->JM$IF.SUBMIT_TIME THEN
      204     1343    3             DO;
      205     1344    3             CALL ADD2TL;
      206     1345    3             RETURN;
      207     1346    3             END;
      208     1347        /* Add to the head if the new file's SUBMIT_TIME is less than that */
      209     1348        /* of the first queue entry.                                       */
      210     1349    2           IF IF$->JM$IF.SUBMIT_TIME <
      211     1350    2           JMC_CHAINS.HEAD$(TO#)->JM$IF.SUBMIT_TIME THEN
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:22   
      212     1351    3             DO;
      213     1352    3             CALL ADD2HD;
      214     1353    3             RETURN;
      215     1354    3             END;
      216     1355        /* Otherwise, find out where it goes in the queue and insert it.   */
      217     1356    2           LPTR$ = JMC_CHAINS.HEAD$(TO#);
      218     1357        /* Record MBS queue index as job's status...                       */
      219     1358    2           IF$->JM$IF.STATUS = TO#;
      220     1359    3             DO WHILE(%TRUE);
      221     1360    3             QPTR$ = LPTR$->JM$IF.LNK$;
      222     1361    3             IF  (IF$->JM$IF.SUBMIT_TIME >= LPTR$->JM$IF.SUBMIT_TIME)
      223     1362    3             AND (IF$->JM$IF.SUBMIT_TIME < QPTR$->JM$IF.SUBMIT_TIME) THEN
      224     1363    4               DO;
      225     1364    5                 DO INHIBIT;
      226     1365    5                 JMC_CH.LOCK=JMC_CH.LOCK+1;
      227     1366    5                 END;
      228     1367    4               LPTR$->JM$IF.LNK$ = IF$;
      229     1368    4               IF$->JM$IF.LNK$ = QPTR$;
      230     1369    5                 DO INHIBIT;
      231     1370    5                 JMC_CH.LOCK=JMC_CH.LOCK-1;
      232     1371    5                 END;
      233     1372    4               RETURN;
      234     1373    4               END;
      235     1374    3             LPTR$ = QPTR$;
      236     1375    3             END;
      237     1376    2           END;
      238     1377
      239     1378        %EJECT;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:23   
      240     1379        /*F*   NAME:   JMU$ADD2RAQ                                         */
      241     1380        /*F*   PURPOSE: To add an input file to the 'runafter' (DEFER)     */
      242     1381        /*,*           queue.                                              */
      243     1382        /* FROM# is unused.  Note that TO# must specify JM_Q$WR.           */
      244     1383    1   JMU$ADD2RAQ: ENTRY (FROM#,TO#,IF$);
      245     1384        /**/
      246     1385        /* Since the 'runafter' queue is kept in increasing DEFERtime      */
      247     1386        /* order instead of increasing SUBMIT_TIME order, the code         */
      248     1387        /* following this entrypoint is a duplication of JMU$ADD2Q,        */
      249     1388        /* tailored specifically for the DEFER queue.                      */
      250     1389
      251     1390        /* If the TO# queue is empty, then just add to its tail.           */
      252     1391    1         IF (JMC_CH.HWR$ = ADDR(NIL)) THEN
      253     1392    2           DO;
      254     1393    2           CALL ADD2TL;
      255     1394    2           RETURN;
      256     1395    2           END;
      257     1396    1         ELSE
      258     1397    2           DO;
      259     1398        /* Add to the tail if the new file's RATIM is greater than or      */
      260     1399        /* equal to that of the last queue entry.                          */
      261     1400    2           IF IF$->JM$IF.RATIM >= JMC_CH.TWR$->JM$IF.RATIM THEN
      262     1401    3             DO;
      263     1402    3             CALL ADD2TL;
      264     1403    3             RETURN;
      265     1404    3             END;
      266     1405        /* Add to the head if the new file's RATIM is less than that       */
      267     1406        /* of the first queue entry.                                       */
      268     1407    2           IF IF$->JM$IF.RATIM < JMC_CH.HWR$->JM$IF.RATIM THEN
      269     1408    3             DO;
      270     1409    3             CALL ADD2HD;
      271     1410    3             RETURN;
      272     1411    3             END;
      273     1412        /* Otherwise, find out where it goes in the queue and insert it.   */
      274     1413    2           LPTR$ = JMC_CH.HWR$;
      275     1414        /* Record MBS queue index as job's status...                       */
      276     1415    2           IF$->JM$IF.STATUS = JM_Q$WR;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:24   
      277     1416    3             DO WHILE(%TRUE);
      278     1417    3             QPTR$ = LPTR$->JM$IF.LNK$;
      279     1418    3             IF  (IF$->JM$IF.RATIM >= LPTR$->JM$IF.RATIM)
      280     1419    3             AND (IF$->JM$IF.RATIM < QPTR$->JM$IF.RATIM) THEN
      281     1420    4               DO;
      282     1421    5                 DO INHIBIT;
      283     1422    5                 JMC_CH.LOCK=JMC_CH.LOCK+1;
      284     1423    5                 END;
      285     1424    4               LPTR$->JM$IF.LNK$ = IF$;
      286     1425    4               IF$->JM$IF.LNK$ = QPTR$;
      287     1426    5                 DO INHIBIT;
      288     1427    5                 JMC_CH.LOCK=JMC_CH.LOCK-1;
      289     1428    5                 END;
      290     1429    4               RETURN;
      291     1430    4               END;
      292     1431    3             LPTR$ = QPTR$;
      293     1432    3             END;
      294     1433    2           END;
      295     1434
      296     1435        %EJECT;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:25   
      297     1436        /**/
      298     1437        /*F*   NAME:   JMU$UNLINK_IF                                       */
      299     1438        /*F*   PURPOSE: To unlink an input job file entry from a queue.    */
      300     1439        /*     TO# is unused.                                              */
      301     1440    1   JMU$UNLINK_IF: ENTRY (FROM#,TO#,IF$);
      302     1441        /**/
      303     1442    1         CALL UNLINK_IF;
      304     1443
      305     1444    1         RETURN;
      306     1445        /**/
      307     1446        /*   The following two EXTERNAL entrypoints are currently not used */
      308     1447        /*   (C00) but were in previous releases.  They're still here just */
      309     1448        /*   in case they might be needed in the future, and in case there */
      310     1449        /*   turns out to be something radically wrong with the way this   */
      311     1450        /*   was re-coded.                                                 */
      312     1451        /**/
      313     1452        /*F*   NAME:   JMU$ADD2TL                                          */
      314     1453        /*F*   PURPOSE: To add an entry to the tail of a batch scheduler   */
      315     1454        /*,*           queue.                                              */
      316     1455        /*     FROM# is unused.                                            */
      317     1456    1   JMU$ADD2TL: ENTRY (FROM#,TO#,IF$);
      318     1457        /**/
      319     1458    1         CALL ADD2TL;
      320     1459
      321     1460    1         RETURN;
      322     1461        /**/
      323     1462        /*F*   NAME:   JMU$ADD2HD                                          */
      324     1463        /*F*   PURPOSE: To add an entry to the head of a batch scheduler   */
      325     1464        /*,*           queue.                                              */
      326     1465        /*     FROM# is unused.                                            */
      327     1466    1   JMU$ADD2HD: ENTRY (FROM#,TO#,IF$);
      328     1467        /**/
      329     1468    1         CALL ADD2HD;
      330     1469
      331     1470    1         RETURN;
      332     1471        %EJECT;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:26   
      333     1472        /**/
      334     1473        /*I*   NAME:   UNLINK_IF                                           */
      335     1474        /*I*   PURPOSE: To unlink an input job file entry from a queue.    */
      336     1475    1   UNLINK_IF: PROC;
      337     1476        /**/
      338     1477        /* Unlink the entry pointed to by IF$ from the FROM# queue.        */
      339     1478    3           DO INHIBIT;
      340     1479    3           JMC_CH.LOCK=JMC_CH.LOCK+1;
      341     1480    3           END;
      342     1481
      343     1482    2         TPTR$ = JMC_CHAINS.HEAD$(FROM#);
      344     1483
      345     1484    2         IF TPTR$ = IF$ THEN
      346     1485    2          JMC_CHAINS.HEAD$(FROM#) = IF$->JM$IF.LNK$;
      347     1486    2         ELSE
      348     1487    3           DO;
      349     1488    4             DO WHILE(TPTR$->JM$IF.LNK$ ~= ADDR(NIL));
      350     1489    4             IF TPTR$->JM$IF.LNK$ = IF$ THEN GOTO FOUND_IF;
      351     1490    4             TPTR$ = TPTR$->JM$IF.LNK$;
      352     1491    4             END;
      353     1492        /*S*    SCREECH_CODE:   JMU-S$JM227                                */
      354     1493        /*S*   TYPE:   SCREECH                                             */
      355     1494        /*S*   MESSAGE: Queue inconsistancy in JMU - can't find entry.     */
      356     1495    3           CALL FOI$CRASH (S$JM227,F_JM,M_U);
      357     1496
      358     1497    3   FOUND_IF:
      359     1498    3           TPTR$->JM$IF.LNK$  = IF$->JM$IF.LNK$;
      360     1499    3           END;
      361     1500
      362     1501        /* The following method of fixing the tail works for empty queues  */
      363     1502        /* because the empty queue indicator is 'HEAD$ = ADDR(NIL)'.       */
      364     1503    2         IF JMC_CHAINS.TAIL$(FROM#) = IF$ THEN
      365     1504    2          JMC_CHAINS.TAIL$(FROM#) = TPTR$;
      366     1505
      367     1506    3           DO INHIBIT;
      368     1507    3           JMC_CH.LOCK=JMC_CH.LOCK-1;
      369     1508    3           END;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:27   
      370     1509
      371     1510    2         RETURN;
      372     1511
      373     1512    2   END UNLINK_IF;
      374     1513        %EJECT;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:28   
      375     1514        /**/
      376     1515        /*I*   NAME:   ADD2TL                                              */
      377     1516        /*I*   PURPOSE: To add an entry to the tail of a batch scheduler   */
      378     1517        /*,*           queue.                                              */
      379     1518    1   ADD2TL: PROC;
      380     1519        /**/
      381     1520    3           DO INHIBIT;
      382     1521    3           JMC_CH.LOCK=JMC_CH.LOCK+1;
      383     1522    3           END;
      384     1523
      385     1524    2         IF$->JM$IF.LNK$  = ADDR(NIL);
      386     1525
      387     1526    2         IF JMC_CHAINS.HEAD$(TO#) = ADDR(NIL) THEN
      388     1527    2          JMC_CHAINS.HEAD$(TO#) = IF$;
      389     1528    2         ELSE JMC_CHAINS.TAIL$(TO#)->JM$IF.LNK$  = IF$;
      390     1529
      391     1530        /* Record MBS queue index as job's status...                       */
      392     1531    2         IF$->JM$IF.STATUS = TO#;
      393     1532
      394     1533    2         JMC_CHAINS.TAIL$(TO#) = IF$;
      395     1534
      396     1535    3           DO INHIBIT;
      397     1536    3           JMC_CH.LOCK=JMC_CH.LOCK-1;
      398     1537    3           END;
      399     1538
      400     1539    2         RETURN;
      401     1540
      402     1541    2   END ADD2TL;
      403     1542        %EJECT;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:29   
      404     1543        /**/
      405     1544        /*I*   NAME:   ADD2HD                                              */
      406     1545        /*I*   PURPOSE: To add an entry to the head of a batch scheduler   */
      407     1546        /*,*           queue.                                              */
      408     1547    1   ADD2HD: PROC;
      409     1548        /**/
      410     1549    3           DO INHIBIT;
      411     1550    3           JMC_CH.LOCK=JMC_CH.LOCK+1;
      412     1551    3           END;
      413     1552
      414     1553    2         IF JMC_CHAINS.HEAD$(TO#) = ADDR(NIL) THEN
      415     1554    2          JMC_CHAINS.TAIL$(TO#) = IF$;
      416     1555
      417     1556    2         IF$->JM$IF.LNK$ = JMC_CHAINS.HEAD$(TO#);
      418     1557
      419     1558        /* Record MBS queue index as job's status...                       */
      420     1559    2         IF$->JM$IF.STATUS = TO#;
      421     1560
      422     1561    2         JMC_CHAINS.HEAD$(TO#) = IF$;
      423     1562
      424     1563    3           DO INHIBIT;
      425     1564    3           JMC_CH.LOCK=JMC_CH.LOCK-1;
      426     1565    3           END;
      427     1566
      428     1567    2         RETURN;
      429     1568
      430     1569    2   END ADD2HD;
      431     1570    1   END JMU$ARRANGEQ;
      432     1571        %EOD;

PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:30   
--  Include file information  --

   B_STRINGS_C.:E05TOU  is referenced.
   JM_SUBS_C.:E05TOU  is referenced.
   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   JM_SCODE_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JMU$ARRANGEQ.

   Procedure JMU$ARRANGEQ requires 246 words for executable code.
   Procedure JMU$ARRANGEQ requires 12 words of local(AUTO) storage.

PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:31   

 Object Unit name= JMU$ARRANGEQ                               File name= JMU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:32:34.60 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   246    366  JMU$ARRANGEQ
    2  RoData even  none     6      6  JMU$ARRANGEQ

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        3  JMU$ARRANGEQ
     1      3                  yes      Std        3  JMU$MOVE_IF
     1     10                  yes      Std        3  JMU$ADD2Q
     1    103                  yes      Std        3  JMU$ADD2RAQ
     1    165                  yes      Std        3  JMU$UNLINK_IF
     1    172                  yes      Std        3  JMU$ADD2TL
     1    177                  yes      Std        3  JMU$ADD2HD

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 FOI$CRASH
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:32   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  JMC_CH                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:33   


      116        1        /*T***********************************************************/
      117        2        /*T*                                                         */
      118        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      119        4        /*T*                                                         */
      120        5        /*T***********************************************************/
      121        6       /*X* DMC,PLM=6,IND=0,IDT=2,SDI=2,CTI=0,ENU=0,AND,DCI=4,CSU=2,ECU=4,THI=0,DTI=0,STI=1
                 6        ,IAD=0,PRB */
      122        7        /*F*   NAME:   JMU$ARRANGEQ                                        */
      123        8        /*F*   PURPOSE: To arrange (ADD2Q, ADD2RAQ, ADD2HD, ADD2TL,        */
      124        9        /*,*           UNLINK, MOVE) JM$IF structures within MBS's queues. */
      125       10        JMU$ARRANGEQ: PROC (FROM#,TO#,IF$);

     10  1 000000   000000 700200 xent  JMU$ARRANGEQ TSX0  ! X66_AUTO_3
         1 000001   000014 000003                    ZERO    12,3
         1 000002   000005 710000 1                  TRA     s:1321

      126       11        /**/
      127       12
      128       13
      129       14
      130       15        /**/
      131       16        /* INCLUDES */
      132       17        /**/
      133       18        %INCLUDE CP_6;
      134       99        %INCLUDE JM_SCODE_C;
      135      126        %SUB F_JM='1215'O;
      136      127        %SUB M_U='25'O;
      137      128        %INCLUDE JM$STRUCT;                 /* MBS table structures.       */
      138      873        %INCLUDE JMC_DATA_R;                /* MBS-resident STATIC data.   */
      139      888        %INCLUDE JM_SUBS_C;                 /* MBS queue index equates.    */
      140      994        %INCLUDE B_STRINGS_C;               /* Systemwide equates.         */
      141     1123
      142     1124
      143     1125
      144     1126        /**/
      145     1127        /* PARAMETERS */
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:34   
      146     1128        /**/
      147     1129    1   DCL FROM# SBIN;                     /* Queue to move from...       */
      148     1130    1   DCL TO# SBIN;                       /* ...queue to move to...      */
      149     1131    1   DCL IF$ PTR;                        /* ...JM$IF entry to be moved. */
      150     1132
      151     1133
      152     1134
      153     1135        /**/
      154     1136        /* BASED */
      155     1137        /**/
      156     1138        %JM_IF (FPTN=JM$IF,STCLASS=BASED);
      157     1296
      158     1297
      159     1298
      160     1299        /**/
      161     1300        /* AUTO */
      162     1301        /**/
      163     1302    1   DCL LPTR$ PTR;
      164     1303    1   DCL QPTR$ PTR;
      165     1304    1   DCL TPTR$ PTR;
      166     1305
      167     1306
      168     1307
      169     1308        /**/
      170     1309        /* ENTREFS */
      171     1310        /**/
      172     1311    1   DCL FOI$CRASH     ENTRY(3) ALTRET;
      173     1312
      174     1313        %EJECT;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:35   
      175     1314        /**/
      176     1315        /*F*   NAME:   JMU$MOVE_IF                                         */
      177     1316        /*F*   PURPOSE: To move a given input file entry from one of the   */
      178     1317        /*,*           batch scheduler queues to another.                  */
      179     1318    1   JMU$MOVE_IF: ENTRY (FROM#,TO#,IF$);

   1318  1 000003   000000 700200 xent  JMU$MOVE_IF  TSX0  ! X66_AUTO_3
         1 000004   000014 000003                    ZERO    12,3

      180     1319        /**/
      181     1320        /* Unlink the entry pointed to by IF$ from the FROM# queue.        */
      182     1321    1         CALL UNLINK_IF;

   1321  1 000005   000204 701000 1                  TSX1    UNLINK_IF
         1 000006   000000 011000                    NOP     0
         1 000007   000012 710000 1                  TRA     s:1332

      183     1322        /* Then, fall through to JMU$ADD2Q to place the entry into the     */
      184     1323        /* TO# queue.                                                      */
      185     1324
      186     1325        /**/
      187     1326        /*F*   NAME:   JMU$ADD2Q                                           */
      188     1327        /*F*   PURPOSE: To place an input job file in a particular queue.  */
      189     1328        /* FROM# is unused.                                                */
      190     1329    1   JMU$ADD2Q: ENTRY (FROM#,TO#,IF$);

   1329  1 000010   000000 700200 xent  JMU$ADD2Q    TSX0  ! X66_AUTO_3
         1 000011   000014 000003                    ZERO    12,3

      191     1330        /**/
      192     1331        /* If the TO# queue is empty, then just add to its tail.           */
      193     1332    1         IF (JMC_CHAINS.HEAD$(TO#) = ADDR(NIL)) THEN

   1332  1 000012   200004 470500                    LDP0    @TO#,,AUTO
         1 000013   000000 235100                    LDA     0,,PR0
         1 000014   000001 735000                    ALS     1
         1 000015   000000 236005 xsym               LDQ     JMC_CH,AL
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:36   
         1 000016   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000017   000023 601000 1                  TNZ     s:1341

      194     1333    2           DO;

      195     1334    2           CALL ADD2TL;

   1334  1 000020   000267 701000 1                  TSX1    ADD2TL
         1 000021   000000 011000                    NOP     0

      196     1335    2           RETURN;

   1335  1 000022   000000 702200 xent               TSX2  ! X66_ARET

      197     1336    2           END;
      198     1337    1         ELSE
      199     1338    2           DO;

      200     1339        /* Add to the tail if the new file's SUBMIT_TIME is greater than   */
      201     1340        /* or equal to that of the last queue entry.                       */
      202     1341    2           IF IF$->JM$IF.SUBMIT_TIME >=

   1341  1 000023   200005 471500                    LDP1    @IF$,,AUTO
         1 000024   100000 473500                    LDP3    0,,PR1
         1 000025   000000 235100                    LDA     0,,PR0
         1 000026   000001 735000                    ALS     1
         1 000027   000001 474405 xsym               LDP4    JMC_CH+1,AL
         1 000030   300007 236100                    LDQ     7,,PR3
         1 000031   400007 116100                    CMPQ    7,,PR4
         1 000032   000036 602000 1                  TNC     s:1349

      203     1342    2           JMC_CHAINS.TAIL$(TO#)->JM$IF.SUBMIT_TIME THEN
      204     1343    3             DO;

      205     1344    3             CALL ADD2TL;

   1344  1 000033   000267 701000 1                  TSX1    ADD2TL
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:37   
         1 000034   000000 011000                    NOP     0

      206     1345    3             RETURN;

   1345  1 000035   000000 702200 xent               TSX2  ! X66_ARET

      207     1346    3             END;
      208     1347        /* Add to the head if the new file's SUBMIT_TIME is less than that */
      209     1348        /* of the first queue entry.                                       */
      210     1349    2           IF IF$->JM$IF.SUBMIT_TIME <

   1349  1 000036   000000 235100                    LDA     0,,PR0
         1 000037   000001 735000                    ALS     1
         1 000040   000000 474405 xsym               LDP4    JMC_CH,AL
         1 000041   400007 116100                    CMPQ    7,,PR4
         1 000042   000046 603000 1                  TRC     s:1356

      211     1350    2           JMC_CHAINS.HEAD$(TO#)->JM$IF.SUBMIT_TIME THEN
      212     1351    3             DO;

      213     1352    3             CALL ADD2HD;

   1352  1 000043   000330 701000 1                  TSX1    ADD2HD
         1 000044   000000 011000                    NOP     0

      214     1353    3             RETURN;

   1353  1 000045   000000 702200 xent               TSX2  ! X66_ARET

      215     1354    3             END;
      216     1355        /* Otherwise, find out where it goes in the queue and insert it.   */
      217     1356    2           LPTR$ = JMC_CHAINS.HEAD$(TO#);

   1356  1 000046   000000 235100                    LDA     0,,PR0
         1 000047   000001 735000                    ALS     1
         1 000050   000000 236005 xsym               LDQ     JMC_CH,AL
         1 000051   200006 756100                    STQ     LPTR$,,AUTO
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:38   

      218     1357        /* Record MBS queue index as job's status...                       */
      219     1358    2           IF$->JM$IF.STATUS = TO#;

   1358  1 000052   000000 236100                    LDQ     0,,PR0
         1 000053   300013 552104                    STBQ    11,'04'O,PR3

      220     1359    3             DO WHILE(%TRUE);

      221     1360    3             QPTR$ = LPTR$->JM$IF.LNK$;

   1360  1 000054   200006 470500                    LDP0    LPTR$,,AUTO
         1 000055   000000 236100                    LDQ     0,,PR0
         1 000056   200007 756100                    STQ     QPTR$,,AUTO

      222     1361    3             IF  (IF$->JM$IF.SUBMIT_TIME >= LPTR$->JM$IF.SUBMIT_TIME)

   1361  1 000057   200005 471500                    LDP1    @IF$,,AUTO
         1 000060   100000 473500                    LDP3    0,,PR1
         1 000061   300007 236100                    LDQ     7,,PR3
         1 000062   000007 116100                    CMPQ    7,,PR0
         1 000063   000100 602000 1                  TNC     s:1374
         1 000064   200007 474500                    LDP4    QPTR$,,AUTO
         1 000065   400007 116100                    CMPQ    7,,PR4
         1 000066   000100 603000 1                  TRC     s:1374

      223     1362    3             AND (IF$->JM$IF.SUBMIT_TIME < QPTR$->JM$IF.SUBMIT_TIME) THEN
      224     1363    4               DO;

      225     1364    5                 DO INHIBIT;

      226     1365    5                 JMC_CH.LOCK=JMC_CH.LOCK+1;

   1365  1 000067   000056 054200 xsym               AOS   ! JMC_CH+46

      227     1366    5                 END;

PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:39   
      228     1367    4               LPTR$->JM$IF.LNK$ = IF$;

   1367  1 000070   100000 236100                    LDQ     0,,PR1
         1 000071   000000 756100                    STQ     0,,PR0

      229     1368    4               IF$->JM$IF.LNK$ = QPTR$;

   1368  1 000072   100000 473500                    LDP3    0,,PR1
         1 000073   200007 236100                    LDQ     QPTR$,,AUTO
         1 000074   300000 756100                    STQ     0,,PR3

      230     1369    5                 DO INHIBIT;

      231     1370    5                 JMC_CH.LOCK=JMC_CH.LOCK-1;

   1370  1 000075   000001 336207                    LCQ   ! 1,DL
         1 000076   000056 056200 xsym               ASQ   ! JMC_CH+46

      232     1371    5                 END;

      233     1372    4               RETURN;

   1372  1 000077   000000 702200 xent               TSX2  ! X66_ARET

      234     1373    4               END;
      235     1374    3             LPTR$ = QPTR$;

   1374  1 000100   200007 236100                    LDQ     QPTR$,,AUTO
         1 000101   200006 756100                    STQ     LPTR$,,AUTO

      236     1375    3             END;

   1375  1 000102   000054 710000 1                  TRA     s:1360

      237     1376    2           END;
      238     1377
      239     1378        %EJECT;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:40   
      240     1379        /*F*   NAME:   JMU$ADD2RAQ                                         */
      241     1380        /*F*   PURPOSE: To add an input file to the 'runafter' (DEFER)     */
      242     1381        /*,*           queue.                                              */
      243     1382        /* FROM# is unused.  Note that TO# must specify JM_Q$WR.           */
      244     1383    1   JMU$ADD2RAQ: ENTRY (FROM#,TO#,IF$);

   1383  1 000103   000000 700200 xent  JMU$ADD2RAQ  TSX0  ! X66_AUTO_3
         1 000104   000014 000003                    ZERO    12,3

      245     1384        /**/
      246     1385        /* Since the 'runafter' queue is kept in increasing DEFERtime      */
      247     1386        /* order instead of increasing SUBMIT_TIME order, the code         */
      248     1387        /* following this entrypoint is a duplication of JMU$ADD2Q,        */
      249     1388        /* tailored specifically for the DEFER queue.                      */
      250     1389
      251     1390        /* If the TO# queue is empty, then just add to its tail.           */
      252     1391    1         IF (JMC_CH.HWR$ = ADDR(NIL)) THEN

   1391  1 000105   000004 236000 xsym               LDQ     JMC_CH+4
         1 000106   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000107   000113 601000 1                  TNZ     s:1400

      253     1392    2           DO;

      254     1393    2           CALL ADD2TL;

   1393  1 000110   000267 701000 1                  TSX1    ADD2TL
         1 000111   000000 011000                    NOP     0

      255     1394    2           RETURN;

   1394  1 000112   000000 702200 xent               TSX2  ! X66_ARET

      256     1395    2           END;
      257     1396    1         ELSE
      258     1397    2           DO;

PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:41   
      259     1398        /* Add to the tail if the new file's RATIM is greater than or      */
      260     1399        /* equal to that of the last queue entry.                          */
      261     1400    2           IF IF$->JM$IF.RATIM >= JMC_CH.TWR$->JM$IF.RATIM THEN

   1400  1 000113   200005 470500                    LDP0    @IF$,,AUTO
         1 000114   000000 471500                    LDP1    0,,PR0
         1 000115   000005 473400 xsym               LDP3    JMC_CH+5
         1 000116   100026 236100                    LDQ     22,,PR1
         1 000117   300026 116100                    CMPQ    22,,PR3
         1 000120   000124 602000 1                  TNC     s:1407

      262     1401    3             DO;

      263     1402    3             CALL ADD2TL;

   1402  1 000121   000267 701000 1                  TSX1    ADD2TL
         1 000122   000000 011000                    NOP     0

      264     1403    3             RETURN;

   1403  1 000123   000000 702200 xent               TSX2  ! X66_ARET

      265     1404    3             END;
      266     1405        /* Add to the head if the new file's RATIM is less than that       */
      267     1406        /* of the first queue entry.                                       */
      268     1407    2           IF IF$->JM$IF.RATIM < JMC_CH.HWR$->JM$IF.RATIM THEN

   1407  1 000124   000004 474400 xsym               LDP4    JMC_CH+4
         1 000125   400026 116100                    CMPQ    22,,PR4
         1 000126   000132 603000 1                  TRC     s:1413

      269     1408    3             DO;

      270     1409    3             CALL ADD2HD;

   1409  1 000127   000330 701000 1                  TSX1    ADD2HD
         1 000130   000000 011000                    NOP     0
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:42   

      271     1410    3             RETURN;

   1410  1 000131   000000 702200 xent               TSX2  ! X66_ARET

      272     1411    3             END;
      273     1412        /* Otherwise, find out where it goes in the queue and insert it.   */
      274     1413    2           LPTR$ = JMC_CH.HWR$;

   1413  1 000132   000004 236000 xsym               LDQ     JMC_CH+4
         1 000133   200006 756100                    STQ     LPTR$,,AUTO

      275     1414        /* Record MBS queue index as job's status...                       */
      276     1415    2           IF$->JM$IF.STATUS = JM_Q$WR;

   1415  1 000134   000002 236007                    LDQ     2,DL
         1 000135   100013 552104                    STBQ    11,'04'O,PR1

      277     1416    3             DO WHILE(%TRUE);

      278     1417    3             QPTR$ = LPTR$->JM$IF.LNK$;

   1417  1 000136   200006 470500                    LDP0    LPTR$,,AUTO
         1 000137   000000 236100                    LDQ     0,,PR0
         1 000140   200007 756100                    STQ     QPTR$,,AUTO

      279     1418    3             IF  (IF$->JM$IF.RATIM >= LPTR$->JM$IF.RATIM)

   1418  1 000141   200005 471500                    LDP1    @IF$,,AUTO
         1 000142   100000 473500                    LDP3    0,,PR1
         1 000143   300026 236100                    LDQ     22,,PR3
         1 000144   000026 116100                    CMPQ    22,,PR0
         1 000145   000162 602000 1                  TNC     s:1431
         1 000146   200007 474500                    LDP4    QPTR$,,AUTO
         1 000147   400026 116100                    CMPQ    22,,PR4
         1 000150   000162 603000 1                  TRC     s:1431

PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:43   
      280     1419    3             AND (IF$->JM$IF.RATIM < QPTR$->JM$IF.RATIM) THEN
      281     1420    4               DO;

      282     1421    5                 DO INHIBIT;

      283     1422    5                 JMC_CH.LOCK=JMC_CH.LOCK+1;

   1422  1 000151   000056 054200 xsym               AOS   ! JMC_CH+46

      284     1423    5                 END;

      285     1424    4               LPTR$->JM$IF.LNK$ = IF$;

   1424  1 000152   100000 236100                    LDQ     0,,PR1
         1 000153   000000 756100                    STQ     0,,PR0

      286     1425    4               IF$->JM$IF.LNK$ = QPTR$;

   1425  1 000154   100000 473500                    LDP3    0,,PR1
         1 000155   200007 236100                    LDQ     QPTR$,,AUTO
         1 000156   300000 756100                    STQ     0,,PR3

      287     1426    5                 DO INHIBIT;

      288     1427    5                 JMC_CH.LOCK=JMC_CH.LOCK-1;

   1427  1 000157   000001 336207                    LCQ   ! 1,DL
         1 000160   000056 056200 xsym               ASQ   ! JMC_CH+46

      289     1428    5                 END;

      290     1429    4               RETURN;

   1429  1 000161   000000 702200 xent               TSX2  ! X66_ARET

      291     1430    4               END;
      292     1431    3             LPTR$ = QPTR$;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:44   

   1431  1 000162   200007 236100                    LDQ     QPTR$,,AUTO
         1 000163   200006 756100                    STQ     LPTR$,,AUTO

      293     1432    3             END;

   1432  1 000164   000136 710000 1                  TRA     s:1417

      294     1433    2           END;
      295     1434
      296     1435        %EJECT;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:45   
      297     1436        /**/
      298     1437        /*F*   NAME:   JMU$UNLINK_IF                                       */
      299     1438        /*F*   PURPOSE: To unlink an input job file entry from a queue.    */
      300     1439        /*     TO# is unused.                                              */
      301     1440    1   JMU$UNLINK_IF: ENTRY (FROM#,TO#,IF$);

   1440  1 000165   000000 700200 xent  JMU$UNLINK_* TSX0  ! X66_AUTO_3
         1 000166   000014 000003                    ZERO    12,3

      302     1441        /**/
      303     1442    1         CALL UNLINK_IF;

   1442  1 000167   000204 701000 1                  TSX1    UNLINK_IF
         1 000170   000000 011000                    NOP     0

      304     1443
      305     1444    1         RETURN;

   1444  1 000171   000000 702200 xent               TSX2  ! X66_ARET

      306     1445        /**/
      307     1446        /*   The following two EXTERNAL entrypoints are currently not used */
      308     1447        /*   (C00) but were in previous releases.  They're still here just */
      309     1448        /*   in case they might be needed in the future, and in case there */
      310     1449        /*   turns out to be something radically wrong with the way this   */
      311     1450        /*   was re-coded.                                                 */
      312     1451        /**/
      313     1452        /*F*   NAME:   JMU$ADD2TL                                          */
      314     1453        /*F*   PURPOSE: To add an entry to the tail of a batch scheduler   */
      315     1454        /*,*           queue.                                              */
      316     1455        /*     FROM# is unused.                                            */
      317     1456    1   JMU$ADD2TL: ENTRY (FROM#,TO#,IF$);

   1456  1 000172   000000 700200 xent  JMU$ADD2TL   TSX0  ! X66_AUTO_3
         1 000173   000014 000003                    ZERO    12,3

      318     1457        /**/
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:46   
      319     1458    1         CALL ADD2TL;

   1458  1 000174   000267 701000 1                  TSX1    ADD2TL
         1 000175   000000 011000                    NOP     0

      320     1459
      321     1460    1         RETURN;

   1460  1 000176   000000 702200 xent               TSX2  ! X66_ARET

      322     1461        /**/
      323     1462        /*F*   NAME:   JMU$ADD2HD                                          */
      324     1463        /*F*   PURPOSE: To add an entry to the head of a batch scheduler   */
      325     1464        /*,*           queue.                                              */
      326     1465        /*     FROM# is unused.                                            */
      327     1466    1   JMU$ADD2HD: ENTRY (FROM#,TO#,IF$);

   1466  1 000177   000000 700200 xent  JMU$ADD2HD   TSX0  ! X66_AUTO_3
         1 000200   000014 000003                    ZERO    12,3

      328     1467        /**/
      329     1468    1         CALL ADD2HD;

   1468  1 000201   000330 701000 1                  TSX1    ADD2HD
         1 000202   000000 011000                    NOP     0

      330     1469
      331     1470    1         RETURN;

   1470  1 000203   000000 702200 xent               TSX2  ! X66_ARET

      332     1471        %EJECT;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:47   
      333     1472        /**/
      334     1473        /*I*   NAME:   UNLINK_IF                                           */
      335     1474        /*I*   PURPOSE: To unlink an input job file entry from a queue.    */
      336     1475    1   UNLINK_IF: PROC;

   1475  1 000204   200012 741300       UNLINK_IF    STX1  ! TPTR$+2,,AUTO

      337     1476        /**/
      338     1477        /* Unlink the entry pointed to by IF$ from the FROM# queue.        */
      339     1478    3           DO INHIBIT;

      340     1479    3           JMC_CH.LOCK=JMC_CH.LOCK+1;

   1479  1 000205   000056 054200 xsym               AOS   ! JMC_CH+46

      341     1480    3           END;

      342     1481
      343     1482    2         TPTR$ = JMC_CHAINS.HEAD$(FROM#);

   1482  1 000206   200003 470500                    LDP0    @FROM#,,AUTO
         1 000207   000000 235100                    LDA     0,,PR0
         1 000210   000001 735000                    ALS     1
         1 000211   000000 236005 xsym               LDQ     JMC_CH,AL
         1 000212   200010 756100                    STQ     TPTR$,,AUTO

      344     1483
      345     1484    2         IF TPTR$ = IF$ THEN

   1484  1 000213   200005 471500                    LDP1    @IF$,,AUTO
         1 000214   100000 116100                    CMPQ    0,,PR1
         1 000215   000224 601000 1                  TNZ     s:1488

      346     1485    2          JMC_CHAINS.HEAD$(FROM#) = IF$->JM$IF.LNK$;

   1485  1 000216   000000 235100                    LDA     0,,PR0
         1 000217   000001 735000                    ALS     1
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:48   
         1 000220   100000 473500                    LDP3    0,,PR1
         1 000221   300000 236100                    LDQ     0,,PR3
         1 000222   000000 756005 xsym               STQ     JMC_CH,AL
         1 000223   000250 710000 1                  TRA     s:1503

      347     1486    2         ELSE
      348     1487    3           DO;

      349     1488    4             DO WHILE(TPTR$->JM$IF.LNK$ ~= ADDR(NIL));

   1488  1 000224   000233 710000 1                  TRA     s:1491

      350     1489    4             IF TPTR$->JM$IF.LNK$ = IF$ THEN GOTO FOUND_IF;

   1489  1 000225   200010 470500                    LDP0    TPTR$,,AUTO
         1 000226   200005 471500                    LDP1    @IF$,,AUTO
         1 000227   000000 236100                    LDQ     0,,PR0
         1 000230   100000 116100                    CMPQ    0,,PR1
         1 000231   000243 600000 1                  TZE     FOUND_IF

      351     1490    4             TPTR$ = TPTR$->JM$IF.LNK$;

   1490  1 000232   200010 756100                    STQ     TPTR$,,AUTO

      352     1491    4             END;

   1491  1 000233   200010 470500                    LDP0    TPTR$,,AUTO
         1 000234   000000 236100                    LDQ     0,,PR0
         1 000235   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000236   000225 601000 1                  TNZ     s:1489

      353     1492        /*S*    SCREECH_CODE:   JMU-S$JM227                                */
      354     1493        /*S*   TYPE:   SCREECH                                             */
      355     1494        /*S*   MESSAGE: Queue inconsistancy in JMU - can't find entry.     */
      356     1495    3           CALL FOI$CRASH (S$JM227,F_JM,M_U);

   1495  1 000237   000003 630400 2                  EPPR0   3
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:49   
         1 000240   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000241   000000 701000 xent               TSX1    FOI$CRASH
         1 000242   000000 011000                    NOP     0

      357     1496
      358     1497    3   FOUND_IF:
      359     1498    3           TPTR$->JM$IF.LNK$  = IF$->JM$IF.LNK$;

   1498  1 000243   200005 470500       FOUND_IF     LDP0    @IF$,,AUTO
         1 000244   000000 471500                    LDP1    0,,PR0
         1 000245   100000 236100                    LDQ     0,,PR1
         1 000246   200010 473500                    LDP3    TPTR$,,AUTO
         1 000247   300000 756100                    STQ     0,,PR3

      360     1499    3           END;

      361     1500
      362     1501        /* The following method of fixing the tail works for empty queues  */
      363     1502        /* because the empty queue indicator is 'HEAD$ = ADDR(NIL)'.       */
      364     1503    2         IF JMC_CHAINS.TAIL$(FROM#) = IF$ THEN

   1503  1 000250   200003 470500                    LDP0    @FROM#,,AUTO
         1 000251   000000 235100                    LDA     0,,PR0
         1 000252   000001 735000                    ALS     1
         1 000253   200005 471500                    LDP1    @IF$,,AUTO
         1 000254   000001 236005 xsym               LDQ     JMC_CH+1,AL
         1 000255   100000 116100                    CMPQ    0,,PR1
         1 000256   000263 601000 1                  TNZ     s:1507

      365     1504    2          JMC_CHAINS.TAIL$(FROM#) = TPTR$;

   1504  1 000257   000000 235100                    LDA     0,,PR0
         1 000260   000001 735000                    ALS     1
         1 000261   200010 236100                    LDQ     TPTR$,,AUTO
         1 000262   000001 756005 xsym               STQ     JMC_CH+1,AL

      366     1505
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:50   
      367     1506    3           DO INHIBIT;

      368     1507    3           JMC_CH.LOCK=JMC_CH.LOCK-1;

   1507  1 000263   000001 336207                    LCQ   ! 1,DL
         1 000264   000056 056200 xsym               ASQ   ! JMC_CH+46

      369     1508    3           END;

      370     1509
      371     1510    2         RETURN;

   1510  1 000265   200012 221300                    LDX1  ! TPTR$+2,,AUTO
         1 000266   000001 702211                    TSX2  ! 1,X1

      372     1511
      373     1512    2   END UNLINK_IF;
      374     1513        %EJECT;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:51   
      375     1514        /**/
      376     1515        /*I*   NAME:   ADD2TL                                              */
      377     1516        /*I*   PURPOSE: To add an entry to the tail of a batch scheduler   */
      378     1517        /*,*           queue.                                              */
      379     1518    1   ADD2TL: PROC;

   1518  1 000267   200012 741300       ADD2TL       STX1  ! TPTR$+2,,AUTO

      380     1519        /**/
      381     1520    3           DO INHIBIT;

      382     1521    3           JMC_CH.LOCK=JMC_CH.LOCK+1;

   1521  1 000270   000056 054200 xsym               AOS   ! JMC_CH+46

      383     1522    3           END;

      384     1523
      385     1524    2         IF$->JM$IF.LNK$  = ADDR(NIL);

   1524  1 000271   200005 470500                    LDP0    @IF$,,AUTO
         1 000272   000000 471500                    LDP1    0,,PR0
         1 000273   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000274   100000 756100                    STQ     0,,PR1

      386     1525
      387     1526    2         IF JMC_CHAINS.HEAD$(TO#) = ADDR(NIL) THEN

   1526  1 000275   200004 471500                    LDP1    @TO#,,AUTO
         1 000276   100000 235100                    LDA     0,,PR1
         1 000277   000001 735000                    ALS     1
         1 000300   000000 236005 xsym               LDQ     JMC_CH,AL
         1 000301   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000302   000310 601000 1                  TNZ     s:1528

      388     1527    2          JMC_CHAINS.HEAD$(TO#) = IF$;

PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:52   
   1527  1 000303   100000 235100                    LDA     0,,PR1
         1 000304   000001 735000                    ALS     1
         1 000305   000000 236100                    LDQ     0,,PR0
         1 000306   000000 756005 xsym               STQ     JMC_CH,AL
         1 000307   000315 710000 1                  TRA     s:1531

      389     1528    2         ELSE JMC_CHAINS.TAIL$(TO#)->JM$IF.LNK$  = IF$;

   1528  1 000310   100000 235100                    LDA     0,,PR1
         1 000311   000001 735000                    ALS     1
         1 000312   000001 473405 xsym               LDP3    JMC_CH+1,AL
         1 000313   000000 236100                    LDQ     0,,PR0
         1 000314   300000 756100                    STQ     0,,PR3

      390     1529
      391     1530        /* Record MBS queue index as job's status...                       */
      392     1531    2         IF$->JM$IF.STATUS = TO#;

   1531  1 000315   000000 473500                    LDP3    0,,PR0
         1 000316   100000 236100                    LDQ     0,,PR1
         1 000317   300013 552104                    STBQ    11,'04'O,PR3

      393     1532
      394     1533    2         JMC_CHAINS.TAIL$(TO#) = IF$;

   1533  1 000320   100000 235100                    LDA     0,,PR1
         1 000321   000001 735000                    ALS     1
         1 000322   000000 236100                    LDQ     0,,PR0
         1 000323   000001 756005 xsym               STQ     JMC_CH+1,AL

      395     1534
      396     1535    3           DO INHIBIT;

      397     1536    3           JMC_CH.LOCK=JMC_CH.LOCK-1;

   1536  1 000324   000001 336207                    LCQ   ! 1,DL
         1 000325   000056 056200 xsym               ASQ   ! JMC_CH+46
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:53   

      398     1537    3           END;

      399     1538
      400     1539    2         RETURN;

   1539  1 000326   200012 221300                    LDX1  ! TPTR$+2,,AUTO
         1 000327   000001 702211                    TSX2  ! 1,X1

      401     1540
      402     1541    2   END ADD2TL;
      403     1542        %EJECT;
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:54   
      404     1543        /**/
      405     1544        /*I*   NAME:   ADD2HD                                              */
      406     1545        /*I*   PURPOSE: To add an entry to the head of a batch scheduler   */
      407     1546        /*,*           queue.                                              */
      408     1547    1   ADD2HD: PROC;

   1547  1 000330   200012 741300       ADD2HD       STX1  ! TPTR$+2,,AUTO

      409     1548        /**/
      410     1549    3           DO INHIBIT;

      411     1550    3           JMC_CH.LOCK=JMC_CH.LOCK+1;

   1550  1 000331   000056 054200 xsym               AOS   ! JMC_CH+46

      412     1551    3           END;

      413     1552
      414     1553    2         IF JMC_CHAINS.HEAD$(TO#) = ADDR(NIL) THEN

   1553  1 000332   200004 470500                    LDP0    @TO#,,AUTO
         1 000333   000000 235100                    LDA     0,,PR0
         1 000334   000001 735000                    ALS     1
         1 000335   000000 236005 xsym               LDQ     JMC_CH,AL
         1 000336   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000337   000345 601000 1                  TNZ     s:1556

      415     1554    2          JMC_CHAINS.TAIL$(TO#) = IF$;

   1554  1 000340   000000 235100                    LDA     0,,PR0
         1 000341   000001 735000                    ALS     1
         1 000342   200005 471500                    LDP1    @IF$,,AUTO
         1 000343   100000 236100                    LDQ     0,,PR1
         1 000344   000001 756005 xsym               STQ     JMC_CH+1,AL

      416     1555
      417     1556    2         IF$->JM$IF.LNK$ = JMC_CHAINS.HEAD$(TO#);
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:55   

   1556  1 000345   200005 471500                    LDP1    @IF$,,AUTO
         1 000346   100000 473500                    LDP3    0,,PR1
         1 000347   000000 235100                    LDA     0,,PR0
         1 000350   000001 735000                    ALS     1
         1 000351   000000 236005 xsym               LDQ     JMC_CH,AL
         1 000352   300000 756100                    STQ     0,,PR3

      418     1557
      419     1558        /* Record MBS queue index as job's status...                       */
      420     1559    2         IF$->JM$IF.STATUS = TO#;

   1559  1 000353   100000 473500                    LDP3    0,,PR1
         1 000354   000000 236100                    LDQ     0,,PR0
         1 000355   300013 552104                    STBQ    11,'04'O,PR3

      421     1560
      422     1561    2         JMC_CHAINS.HEAD$(TO#) = IF$;

   1561  1 000356   000000 235100                    LDA     0,,PR0
         1 000357   000001 735000                    ALS     1
         1 000360   100000 236100                    LDQ     0,,PR1
         1 000361   000000 756005 xsym               STQ     JMC_CH,AL

      423     1562
      424     1563    3           DO INHIBIT;

      425     1564    3           JMC_CH.LOCK=JMC_CH.LOCK-1;

   1564  1 000362   000001 336207                    LCQ   ! 1,DL
         1 000363   000056 056200 xsym               ASQ   ! JMC_CH+46

      426     1565    3           END;

      427     1566
      428     1567    2         RETURN;

PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:56   
   1567  1 000364   200012 221300                    LDX1  ! TPTR$+2,,AUTO
         1 000365   000001 702211                    TSX2  ! 1,X1
      429     1568
      430     1569    2   END ADD2HD;
      431     1570    1   END JMU$ARRANGEQ;
      432     1571        %EOD;

PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:57   
--  Include file information  --

   B_STRINGS_C.:E05TOU  is referenced.
   JM_SUBS_C.:E05TOU  is referenced.
   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   JM_SCODE_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JMU$ARRANGEQ.
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:58   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @FROM#                     5-0-0/w PTR         r     1 @IF$
     4-0-0/w PTR         r     1 @TO#                      *0-0-0/w SBIN        r     1 FROM#
    *0-0-0/w PTR         r     1 IF$                        6-0-0/w PTR         r     1 LPTR$
     7-0-0/w PTR         r     1 QPTR$                     *0-0-0/w SBIN        r     1 TO#
    10-0-0/w PTR         r     1 TPTR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(1728)  r     1 JMC_CH
     0-0-0/w STRC(72)    r     1 JMC_CHAINS(0:23)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(1665)  r     1 JM$IF


   Procedure JMU$ARRANGEQ requires 246 words for executable code.
   Procedure JMU$ARRANGEQ requires 12 words of local(AUTO) storage.
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:59   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:60   
          MINI XREF LISTING

ADD2HD
      1547**PROC     1352--CALL     1409--CALL     1468--CALL
ADD2TL
      1518**PROC     1334--CALL     1344--CALL     1393--CALL     1402--CALL     1458--CALL
FOI$CRASH
      1311**DCL-ENT  1495--CALL
FOUND_IF IN PROCEDURE UNLINK_IF
      1498**LABEL    1489--GOTO
FROM#
      1129**DCL        10--PROC     1318--ENTRY    1329--ENTRY    1383--ENTRY    1440--ENTRY    1456--ENTRY
      1466--ENTRY    1482>>ASSIGN   1485>>ASSIGN   1503>>IF       1504>>ASSIGN
IF$
      1131**DCL        10--PROC     1318--ENTRY    1329--ENTRY    1341>>IF       1349>>IF       1358>>ASSIGN
      1361>>IF       1361>>IF       1367>>ASSIGN   1368>>ASSIGN   1383--ENTRY    1400>>IF       1407>>IF
      1415>>ASSIGN   1418>>IF       1418>>IF       1424>>ASSIGN   1425>>ASSIGN   1440--ENTRY    1456--ENTRY
      1466--ENTRY    1484>>IF       1485>>ASSIGN   1489>>IF       1498>>ASSIGN   1503>>IF       1524>>ASSIGN
      1527>>ASSIGN   1528>>ASSIGN   1531>>ASSIGN   1533>>ASSIGN   1554>>ASSIGN   1556>>ASSIGN   1559>>ASSIGN
      1561>>ASSIGN
JM$IF.JNL
      1281**DCL      1293--IMP-SIZ
JM$IF.LNK$
      1155**DCL      1360>>ASSIGN   1367<<ASSIGN   1368<<ASSIGN   1417>>ASSIGN   1424<<ASSIGN   1425<<ASSIGN
      1485>>ASSIGN   1488>>DOWHILE  1489>>IF       1490>>ASSIGN   1498<<ASSIGN   1498>>ASSIGN   1524<<ASSIGN
      1528<<ASSIGN   1556<<ASSIGN
JM$IF.RATIM
      1235**DCL      1400>>IF       1400>>IF       1407>>IF       1407>>IF       1418>>IF       1418>>IF
      1418>>IF       1418>>IF
JM$IF.STATUS
      1217**DCL      1358<<ASSIGN   1415<<ASSIGN   1531<<ASSIGN   1559<<ASSIGN
JM$IF.SUBMIT_TIME
      1179**DCL      1341>>IF       1341>>IF       1349>>IF       1349>>IF       1361>>IF       1361>>IF
      1361>>IF       1361>>IF
PL6.E3A0      #002=JMU$ARRANGEQ File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:32 Page:61   
JMC_CH
       881**DCL       882--REDEF
JMC_CH.HWR$
       881**DCL      1391>>IF       1407>>IF       1413>>ASSIGN
JMC_CH.LOCK
       882**DCL      1365<<ASSIGN   1365>>ASSIGN   1370<<ASSIGN   1370>>ASSIGN   1422<<ASSIGN   1422>>ASSIGN
      1427<<ASSIGN   1427>>ASSIGN   1479<<ASSIGN   1479>>ASSIGN   1507<<ASSIGN   1507>>ASSIGN   1521<<ASSIGN
      1521>>ASSIGN   1536<<ASSIGN   1536>>ASSIGN   1550<<ASSIGN   1550>>ASSIGN   1564<<ASSIGN   1564>>ASSIGN
JMC_CH.TWR$
       881**DCL      1400>>IF
JMC_CHAINS.HEAD$
       883**DCL      1332>>IF       1349>>IF       1356>>ASSIGN   1482>>ASSIGN   1485<<ASSIGN   1526>>IF
      1527<<ASSIGN   1553>>IF       1556>>ASSIGN   1561<<ASSIGN
JMC_CHAINS.TAIL$
       883**DCL      1341>>IF       1503>>IF       1504<<ASSIGN   1528>>ASSIGN   1533<<ASSIGN   1554<<ASSIGN
LPTR$
      1302**DCL      1356<<ASSIGN   1360>>ASSIGN   1361>>IF       1367>>ASSIGN   1374<<ASSIGN   1413<<ASSIGN
      1417>>ASSIGN   1418>>IF       1424>>ASSIGN   1431<<ASSIGN
QPTR$
      1303**DCL      1360<<ASSIGN   1361>>IF       1368>>ASSIGN   1374>>ASSIGN   1417<<ASSIGN   1418>>IF
      1425>>ASSIGN   1431>>ASSIGN
TO#
      1130**DCL        10--PROC     1318--ENTRY    1329--ENTRY    1332>>IF       1341>>IF       1349>>IF
      1356>>ASSIGN   1358>>ASSIGN   1383--ENTRY    1440--ENTRY    1456--ENTRY    1466--ENTRY    1526>>IF
      1527>>ASSIGN   1528>>ASSIGN   1531>>ASSIGN   1533>>ASSIGN   1553>>IF       1554>>ASSIGN   1556>>ASSIGN
      1559>>ASSIGN   1561>>ASSIGN
TPTR$
      1304**DCL      1482<<ASSIGN   1484>>IF       1488>>DOWHILE  1489>>IF       1490<<ASSIGN   1490>>ASSIGN
      1498>>ASSIGN   1504>>ASSIGN
UNLINK_IF
      1475**PROC     1321--CALL     1442--CALL

PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:62   
      433        1        /*T***********************************************************/
      434        2        /*T*                                                         */
      435        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      436        4        /*T*                                                         */
      437        5        /*T***********************************************************/
      438        6        /*F*   NAME:   JMU$GETPMASK                                        */
      439        7        /*F*   PURPOSE: To return a bit set for each partition which is    */
      440        8        /*,*           neither locked nor full and for which the minimum   */
      441        9        /*,*           resources are available.                            */
      442       10        JMU$GETPMASK: PROC(PMASK,RESLIST$);
      443       11        /**/
      444       12
      445       13
      446       14
      447       15        /**/
      448       16        /* INCLUDES */
      449       17        /**/
      450       18        %INCLUDE B_SEGIDS_C;
      451      557        %INCLUDE JM$STRUCT;
      452     1302        %INCLUDE JM_SUBS_C;
      453     1408        %INCLUDE JMC_DATA_R;
      454     1423        %INCLUDE FR$RESLIST;
      455     1446
      456     1447
      457     1448
      458     1449        /**/
      459     1450        /* PARAMETERS */
      460     1451        /**/
      461     1452    1   DCL PMASK BIT(16);
      462     1453    1   DCL RESLIST$ PTR;
      463     1454
      464     1455
      465     1456
      466     1457        /**/
      467     1458        /* BASED */
      468     1459        /**/
      469     1460        %FR$RESLIST;
PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:63   
      470     1472    1   DCL APTR$ PTR BASED ALIGNED;
      471     1473    1   DCL AWORD SBIN BASED ALIGNED;
      472     1474        %JM_PART (FPTN=JM$PART,STCLASS=BASED);
      473     1529
      474     1530
      475     1531
      476     1532        /**/
      477     1533        /* AUTO */
      478     1534        /**/
      479     1535    1   DCL I SBIN;
      480     1536    1   DCL J SBIN;
      481     1537    1   DCL PPTR$ PTR;
      482     1538    1   DCL ABIT BIT(16);
      483     1539
      484     1540
      485     1541
      486     1542        /**/
      487     1543        /* ENTREFS */
      488     1544        /**/
      489     1545    1   DCL JMU$SETSEG    ENTRY(2);
      490     1546
      491     1547
      492     1548
      493     1549        /**/
      494     1550        /* SUBS */
      495     1551        /**/
      496     1552        /**/
      497     1553        %SUB   JM$PART = PPTR$->JM$PART;
      498     1554        %SUB   FR$RESLIST = RESLIST$->FR$RESLIST;
      499     1555        /**/
      500     1556        /**/
      501     1557    1         PMASK = '0'B;
      502     1558    1         ABIT = '1000000000000000'B;
      503     1559    2           DO I = 0 TO JMC_NPART$->AWORD - 1;
      504     1560    2           PPTR$ = PINCRW(JMC_PPTR$,I);  /* PTR TO PART. TBL. PTR              */
      505     1561    2           PPTR$ = PPTR$->APTR$;         /* ACTUAL PART. TBL. PTR              */
      506     1562    2           CALL JMU$SETSEG(PPTR$,%SPCL1SID); /* SET CORRECT SEGID FOR MBS       */
PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:64   
      507     1563    2           IF JM$PART.FLG.LOCK THEN GOTO NXTPART;
      508     1564    2           IF JM$PART.CUR >= JM$PART.MAX THEN GOTO NXTPART;
      509     1565        /* Well, its neither locked nor full, so lets see if its minimum   */
      510     1566        /* resources are currently available...                            */
      511     1567    2           IF JM$PART.RMIN(JM_RX$MEM) > FR$RESLIST.MEMORY THEN GOTO  NXTPART;
      512     1568    2           IF JM$PART.RMIN(JM_RX$DP) > FR$RESLIST.DISK THEN GOTO NXTPART;
      513     1569    2           IF JM$PART.RMIN(JM_RX$MT) > FR$RESLIST.TAPES THEN GOTO NXTPART;
      514     1570    3             DO J = 0 TO 7;
      515     1571    3             IF JM$PART.RMIN(JM_RX$PR1 + J) > FR$RESLIST.SULST(J)
      516     1572    3             THEN GOTO NXTPART;
      517     1573    3             END;
      518     1574        /* We've got a useable partition, so 'OR' its bit into PMASK.      */
      519     1575    2           PMASK = PMASK | ABIT;
      520     1576    2   NXTPART:
      521     1577    2           ABIT = BINBIT(BITBIN(ABIT)/2,16);
      522     1578    2           END;
      523     1579    1         RETURN;
      524     1580    1   END JMU$GETPMASK;
      525     1581        %EOD;

PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:65   
--  Include file information  --

   FR$RESLIST.:E05TOU  is referenced.
   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM_SUBS_C.:E05TOU  is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure JMU$GETPMASK.

   Procedure JMU$GETPMASK requires 97 words for executable code.
   Procedure JMU$GETPMASK requires 14 words of local(AUTO) storage.

PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:66   

 Object Unit name= JMU$GETPMASK                               File name= JMU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:33:26.88 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    97    141  JMU$GETPMASK
    1  RoData even  none     2      2  JMU$GETPMASK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        2  JMU$GETPMASK

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 JMU$SETSEG
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     JMC_CH                                JMC_NPART$                            JMC_PPTR$
     B_VECTNIL
PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:67   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:68   


      433        1        /*T***********************************************************/
      434        2        /*T*                                                         */
      435        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      436        4        /*T*                                                         */
      437        5        /*T***********************************************************/
      438        6        /*F*   NAME:   JMU$GETPMASK                                        */
      439        7        /*F*   PURPOSE: To return a bit set for each partition which is    */
      440        8        /*,*           neither locked nor full and for which the minimum   */
      441        9        /*,*           resources are available.                            */
      442       10        JMU$GETPMASK: PROC(PMASK,RESLIST$);

     10  0 000000   000000 700200 xent  JMU$GETPMASK TSX0  ! X66_AUTO_2
         0 000001   000016 000002                    ZERO    14,2

      443       11        /**/
      444       12
      445       13
      446       14
      447       15        /**/
      448       16        /* INCLUDES */
      449       17        /**/
      450       18        %INCLUDE B_SEGIDS_C;
      451      557        %INCLUDE JM$STRUCT;
      452     1302        %INCLUDE JM_SUBS_C;
      453     1408        %INCLUDE JMC_DATA_R;
      454     1423        %INCLUDE FR$RESLIST;
      455     1446
      456     1447
      457     1448
      458     1449        /**/
      459     1450        /* PARAMETERS */
      460     1451        /**/
      461     1452    1   DCL PMASK BIT(16);
      462     1453    1   DCL RESLIST$ PTR;
      463     1454
      464     1455
PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:69   
      465     1456
      466     1457        /**/
      467     1458        /* BASED */
      468     1459        /**/
      469     1460        %FR$RESLIST;
      470     1472    1   DCL APTR$ PTR BASED ALIGNED;
      471     1473    1   DCL AWORD SBIN BASED ALIGNED;
      472     1474        %JM_PART (FPTN=JM$PART,STCLASS=BASED);
      473     1529
      474     1530
      475     1531
      476     1532        /**/
      477     1533        /* AUTO */
      478     1534        /**/
      479     1535    1   DCL I SBIN;
      480     1536    1   DCL J SBIN;
      481     1537    1   DCL PPTR$ PTR;
      482     1538    1   DCL ABIT BIT(16);
      483     1539
      484     1540
      485     1541
      486     1542        /**/
      487     1543        /* ENTREFS */
      488     1544        /**/
      489     1545    1   DCL JMU$SETSEG    ENTRY(2);
      490     1546
      491     1547
      492     1548
      493     1549        /**/
      494     1550        /* SUBS */
      495     1551        /**/
      496     1552        /**/
      497     1553        %SUB   JM$PART = PPTR$->JM$PART;
      498     1554        %SUB   FR$RESLIST = RESLIST$->FR$RESLIST;
      499     1555        /**/
      500     1556        /**/
      501     1557    1         PMASK = '0'B;
PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:70   

   1557  0 000002   200003 470500                    LDP0    @PMASK,,AUTO
         0 000003   003100 060400                    CSL     bolr='003'O
         0 000004   000002 000001 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=1
         0 000005   000000 000020                    BDSC    0,,PR0                   by=0,bit=0,n=16

      502     1558    1         ABIT = '1000000000000000'B;

   1558  0 000006   400000 236003                    LDQ     -131072,DU
         0 000007   200010 756100                    STQ     ABIT,,AUTO

      503     1559    2           DO I = 0 TO JMC_NPART$->AWORD - 1;

   1559  0 000010   200005 450100                    STZ     I,,AUTO
         0 000011   000134 710000 0                  TRA     s:1578+1

      504     1560    2           PPTR$ = PINCRW(JMC_PPTR$,I);  /* PTR TO PART. TBL. PTR              */

   1560  0 000012   200005 236100                    LDQ     I,,AUTO
         0 000013   000022 736000                    QLS     18
         0 000014   000000 036000 xsym               ADLQ    JMC_PPTR$
         0 000015   200007 756100                    STQ     PPTR$,,AUTO

      505     1561    2           PPTR$ = PPTR$->APTR$;         /* ACTUAL PART. TBL. PTR              */

   1561  0 000016   200007 470500                    LDP0    PPTR$,,AUTO
         0 000017   000000 236100                    LDQ     0,,PR0
         0 000020   200007 756100                    STQ     PPTR$,,AUTO

      506     1562    2           CALL JMU$SETSEG(PPTR$,%SPCL1SID); /* SET CORRECT SEGID FOR MBS       */

   1562  0 000021   000001 236000 1                  LDQ     1
         0 000022   200013 756100                    STQ     ABIT+3,,AUTO
         0 000023   200007 630500                    EPPR0   PPTR$,,AUTO
         0 000024   200012 450500                    STP0    ABIT+2,,AUTO
         0 000025   200012 630500                    EPPR0   ABIT+2,,AUTO
         0 000026   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:71   
         0 000027   000000 701000 xent               TSX1    JMU$SETSEG
         0 000030   000000 011000                    NOP     0

      507     1563    2           IF JM$PART.FLG.LOCK THEN GOTO NXTPART;

   1563  0 000031   200007 470500                    LDP0    PPTR$,,AUTO
         0 000032   000004 236100                    LDQ     4,,PR0
         0 000033   000001 316007                    CANQ    1,DL
         0 000034   000126 601000 0                  TNZ     NXTPART

      508     1564    2           IF JM$PART.CUR >= JM$PART.MAX THEN GOTO NXTPART;

   1564  0 000035   000003 236100                    LDQ     3,,PR0
         0 000036   000033 772000                    QRL     27
         0 000037   200012 756100                    STQ     ABIT+2,,AUTO
         0 000040   000003 236100                    LDQ     3,,PR0
         0 000041   000022 772000                    QRL     18
         0 000042   000777 376007                    ANQ     511,DL
         0 000043   200012 116100                    CMPQ    ABIT+2,,AUTO
         0 000044   000126 605000 0                  TPL     NXTPART

      509     1565        /* Well, its neither locked nor full, so lets see if its minimum   */
      510     1566        /* resources are currently available...                            */
      511     1567    2           IF JM$PART.RMIN(JM_RX$MEM) > FR$RESLIST.MEMORY THEN GOTO  NXTPART;

   1567  0 000045   200004 471500                    LDP1    @RESLIST$,,AUTO
         0 000046   100000 473500                    LDP3    0,,PR1
         0 000047   300002 220100                    LDX0    2,,PR3
         0 000050   000015 100100                    CMPX0   13,,PR0
         0 000051   000126 602000 0                  TNC     NXTPART

      512     1568    2           IF JM$PART.RMIN(JM_RX$DP) > FR$RESLIST.DISK THEN GOTO NXTPART;

   1568  0 000052   000015 236100                    LDQ     13,,PR0
         0 000053   777777 376007                    ANQ     -1,DL
         0 000054   200012 756100                    STQ     ABIT+2,,AUTO
         0 000055   300002 236100                    LDQ     2,,PR3
PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:72   
         0 000056   777777 376007                    ANQ     -1,DL
         0 000057   200012 116100                    CMPQ    ABIT+2,,AUTO
         0 000060   000126 604000 0                  TMI     NXTPART

      513     1569    2           IF JM$PART.RMIN(JM_RX$MT) > FR$RESLIST.TAPES THEN GOTO NXTPART;

   1569  0 000061   100000 473500                    LDP3    0,,PR1
         0 000062   300003 220100                    LDX0    3,,PR3
         0 000063   000016 100100                    CMPX0   14,,PR0
         0 000064   000126 602000 0                  TNC     NXTPART

      514     1570    3             DO J = 0 TO 7;

   1570  0 000065   200006 450100                    STZ     J,,AUTO

      515     1571    3             IF JM$PART.RMIN(JM_RX$PR1 + J) > FR$RESLIST.SULST(J)

   1571  0 000066   200004 470500                    LDP0    @RESLIST$,,AUTO
         0 000067   000000 471500                    LDP1    0,,PR0
         0 000070   200006 235100                    LDA     J,,AUTO
         0 000071   000001 735000                    ALS     1
         0 000072   200007 473500                    LDP3    PPTR$,,AUTO
         0 000073   000100 101505                    MRL     fill='000'O
         0 000074   300017 000002                    ADSC9   15,A,PR3                 cn=0,n=2
         0 000075   200012 000004                    ADSC9   ABIT+2,,AUTO             cn=0,n=4
         0 000076   200006 236100                    LDQ     J,,AUTO
         0 000077   000100 101506                    MRL     fill='000'O
         0 000100   100004 000001                    ADSC9   4,Q,PR1                  cn=0,n=1
         0 000101   200013 000004                    ADSC9   ABIT+3,,AUTO             cn=0,n=4
         0 000102   200013 236100                    LDQ     ABIT+3,,AUTO
         0 000103   200012 116100                    CMPQ    ABIT+2,,AUTO
         0 000104   000126 604000 0                  TMI     NXTPART

      516     1572    3             THEN GOTO NXTPART;
      517     1573    3             END;

   1573  0 000105   200006 054100                    AOS     J,,AUTO
PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:73   
         0 000106   200006 235100                    LDA     J,,AUTO
         0 000107   000007 115007                    CMPA    7,DL
         0 000110   000066 604400 0                  TMOZ    s:1571

      518     1574        /* We've got a useable partition, so 'OR' its bit into PMASK.      */
      519     1575    2           PMASK = PMASK | ABIT;

   1575  0 000111   200010 236100                    LDQ     ABIT,,AUTO
         0 000112   777774 376003                    ANQ     -4,DU
         0 000113   200012 756100                    STQ     ABIT+2,,AUTO
         0 000114   200003 471500                    LDP1    @PMASK,,AUTO
         0 000115   003100 060500                    CSL     bolr='003'O
         0 000116   100000 000020                    BDSC    0,,PR1                   by=0,bit=0,n=16
         0 000117   200013 000044                    BDSC    ABIT+3,,AUTO             by=0,bit=0,n=36
         0 000120   200013 236100                    LDQ     ABIT+3,,AUTO
         0 000121   200012 276100                    ORQ     ABIT+2,,AUTO
         0 000122   200014 756100                    STQ     ABIT+4,,AUTO
         0 000123   003100 060500                    CSL     bolr='003'O
         0 000124   200014 000044                    BDSC    ABIT+4,,AUTO             by=0,bit=0,n=36
         0 000125   100000 000020                    BDSC    0,,PR1                   by=0,bit=0,n=16

      520     1576    2   NXTPART:
      521     1577    2           ABIT = BINBIT(BITBIN(ABIT)/2,16);

   1577  0 000126   200010 236100       NXTPART      LDQ     ABIT,,AUTO
         0 000127   000024 772000                    QRL     20
         0 000130   000001 772000                    QRL     1
         0 000131   000024 736000                    QLS     20
         0 000132   200010 756100                    STQ     ABIT,,AUTO

      522     1578    2           END;

   1578  0 000133   200005 054100                    AOS     I,,AUTO
         0 000134   000000 470400 xsym               LDP0    JMC_NPART$
         0 000135   200005 236100                    LDQ     I,,AUTO
         0 000136   000000 116100                    CMPQ    0,,PR0
         0 000137   000012 604000 0                  TMI     s:1560
PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:74   

      523     1579    1         RETURN;

   1579  0 000140   000000 702200 xent               TSX2  ! X66_ARET
      524     1580    1   END JMU$GETPMASK;
      525     1581        %EOD;

PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:75   
--  Include file information  --

   FR$RESLIST.:E05TOU  is referenced.
   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM_SUBS_C.:E05TOU  is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure JMU$GETPMASK.
PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:76   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @PMASK                     4-0-0/w PTR         r     1 @RESLIST$
    10-0-0/b BIT (16)    r     1 ABIT                       5-0-0/w SBIN        r     1 I
     6-0-0/w SBIN        r     1 J                         *0-0-0/b BIT (16)    r     1 PMASK
     7-0-0/w PTR         r     1 PPTR$                     *0-0-0/w PTR         r     1 RESLIST$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 JMC_NPART$                 0-0-0/w PTR         r     1 JMC_PPTR$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 APTR$                      0-0-0/w SBIN        r     1 AWORD
     0-0-0/d STRC(216)   r     1 FR$RESLIST                 0-0-0/w STRC(684)   r     1 JM$PART


   Procedure JMU$GETPMASK requires 97 words for executable code.
   Procedure JMU$GETPMASK requires 14 words of local(AUTO) storage.
PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:77   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:78   
          MINI XREF LISTING

ABIT
      1538**DCL      1558<<ASSIGN   1575>>ASSIGN   1577<<ASSIGN   1577>>ASSIGN
APTR$
      1472**DCL      1561>>ASSIGN
AWORD
      1473**DCL      1559>>DOINDEX
FR$RESLIST.DISK
      1466**DCL      1568>>IF
FR$RESLIST.MEMORY
      1465**DCL      1567>>IF
FR$RESLIST.SULST
      1469**DCL      1571>>IF
FR$RESLIST.TAPES
      1467**DCL      1569>>IF
I
      1535**DCL      1559<<DOINDEX  1560>>ASSIGN
J
      1536**DCL      1570<<DOINDEX  1571>>IF       1571>>IF
JM$PART.CUR
      1502**DCL      1564>>IF
JM$PART.FLG.LOCK
      1514**DCL      1563>>IF
JM$PART.MAX
      1500**DCL      1564>>IF
JM$PART.RMIN
      1526**DCL      1567>>IF       1568>>IF       1569>>IF       1571>>IF
JMC_CH
      1416**DCL      1417--REDEF
JMC_NPART$
      1421**DCL      1559>>DOINDEX
JMC_PPTR$
      1421**DCL      1560>>ASSIGN
PL6.E3A0      #003=JMU$GETPMASK File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:79   
JMU$SETSEG
      1545**DCL-ENT  1562--CALL
NXTPART
      1577**LABEL    1563--GOTO     1564--GOTO     1567--GOTO     1568--GOTO     1569--GOTO     1572--GOTO
PMASK
      1452**DCL        10--PROC     1557<<ASSIGN   1575<<ASSIGN   1575>>ASSIGN
PPTR$
      1537**DCL      1560<<ASSIGN   1561<<ASSIGN   1561>>ASSIGN   1562<>CALL     1563>>IF       1564>>IF
      1564>>IF       1567>>IF       1568>>IF       1569>>IF       1571>>IF
RESLIST$
      1453**DCL        10--PROC     1567>>IF       1568>>IF       1569>>IF       1571>>IF

PL6.E3A0      #004=JMU$GET_SLOT File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:80   
      526        1        /*T***********************************************************/
      527        2        /*T*                                                         */
      528        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      529        4        /*T*                                                         */
      530        5        /*T***********************************************************/
      531        6        /*F*   NAME:   JMU$GET_SLOT                                        */
      532        7        /*F*   PURPOSE: To allocate an entry from the list of free 'slots' */
      533        8        /*,*           for use in packset or virtual resource lists.       */
      534        9        JMU$GET_SLOT: PROC(SLOT$);
      535       10        /**/
      536       11
      537       12
      538       13
      539       14        /**/
      540       15        /* INCLUDES */
      541       16        /**/
      542       17        %INCLUDE JM$STRUCT;
      543      762        %INCLUDE JMC_DATA_R;
      544      777
      545      778
      546      779
      547      780        /**/
      548      781        /* BASED STRUCTURES */
      549      782        /**/
      550      783        %JM_RES (FPTN=JM$QRIT,STCLASS=BASED);
      551      820
      552      821
      553      822
      554      823        /**/
      555      824        /* PARAMETERS */
      556      825        /**/
      557      826    1   DCL SLOT$ PTR;
      558      827
      559      828
      560      829
      561      830        /**/
      562      831        /* ENTREFS */
PL6.E3A0      #004=JMU$GET_SLOT File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:81   
      563      832        /**/
      564      833    1   DCL JMU$ALLOC_SLOTS ENTRY;
      565      834        /**/
      566      835        /**/
      567      836        /* NOTE: Packset name and virtual resource list entries are        */
      568      837        /*     always the same size, and have the link field in the same   */
      569      838        /*     position. Therefore, for consistancy in the slot allocation */
      570      839        /*     routines, I will always use the JM$QRIT structure when      */
      571      840        /*     manipulating the 'slots'.                                   */
      572      841    1         IF JMC_SLOTCNT = 0 THEN CALL JMU$ALLOC_SLOTS;
      573      842    1         SLOT$ = JMC_SLOTHD$;
      574      843    1         JMC_SLOTHD$ = SLOT$->JM$QRIT.NXT$;
      575      844    1         JMC_SLOTCNT = JMC_SLOTCNT - 1;
      576      845    1         RETURN;
      577      846        /*F*   NAME:   JMU$REL_SLOT                                        */
      578      847        /*F*   PURPOSE: To return a 'slot' to the free list.               */
      579      848    1   JMU$REL_SLOT: ENTRY (SLOT$);
      580      849        /**/
      581      850    1         SLOT$->JM$QRIT.NXT$ = ADDR(NIL);
      582      851    1         IF JMC_SLOTHD$ = ADDR(NIL) THEN
      583      852    1          JMC_SLOTHD$ = SLOT$;
      584      853    1         ELSE JMC_SLOTTL$->JM$QRIT.NXT$ = SLOT$;
      585      854    1         JMC_SLOTTL$ = SLOT$;
      586      855    1         JMC_SLOTCNT = JMC_SLOTCNT + 1;
      587      856    1         RETURN;
      588      857    1   END JMU$GET_SLOT;
      589      858        %EOD;

PL6.E3A0      #004=JMU$GET_SLOT File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:82   
--  Include file information  --

   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure JMU$GET_SLOT.

   Procedure JMU$GET_SLOT requires 35 words for executable code.
   Procedure JMU$GET_SLOT requires 4 words of local(AUTO) storage.

PL6.E3A0      #004=JMU$GET_SLOT File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:83   

 Object Unit name= JMU$GET_SLOT                               File name= JMU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:33:52.36 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    35     43  JMU$GET_SLOT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        1  JMU$GET_SLOT
     0     20                  yes      Std        1  JMU$REL_SLOT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 JMU$ALLOC_SLOTS
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     JMC_CH                                JMC_SLOTHD$                           JMC_SLOTTL$
     JMC_SLOTCNT                           B_VECTNIL
PL6.E3A0      #004=JMU$GET_SLOT File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:84   


      526        1        /*T***********************************************************/
      527        2        /*T*                                                         */
      528        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      529        4        /*T*                                                         */
      530        5        /*T***********************************************************/
      531        6        /*F*   NAME:   JMU$GET_SLOT                                        */
      532        7        /*F*   PURPOSE: To allocate an entry from the list of free 'slots' */
      533        8        /*,*           for use in packset or virtual resource lists.       */
      534        9        JMU$GET_SLOT: PROC(SLOT$);

      9  0 000000   000000 700200 xent  JMU$GET_SLOT TSX0  ! X66_AUTO_1
         0 000001   000004 000001                    ZERO    4,1

      535       10        /**/
      536       11
      537       12
      538       13
      539       14        /**/
      540       15        /* INCLUDES */
      541       16        /**/
      542       17        %INCLUDE JM$STRUCT;
      543      762        %INCLUDE JMC_DATA_R;
      544      777
      545      778
      546      779
      547      780        /**/
      548      781        /* BASED STRUCTURES */
      549      782        /**/
      550      783        %JM_RES (FPTN=JM$QRIT,STCLASS=BASED);
      551      820
      552      821
      553      822
      554      823        /**/
      555      824        /* PARAMETERS */
      556      825        /**/
      557      826    1   DCL SLOT$ PTR;
PL6.E3A0      #004=JMU$GET_SLOT File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:85   
      558      827
      559      828
      560      829
      561      830        /**/
      562      831        /* ENTREFS */
      563      832        /**/
      564      833    1   DCL JMU$ALLOC_SLOTS ENTRY;
      565      834        /**/
      566      835        /**/
      567      836        /* NOTE: Packset name and virtual resource list entries are        */
      568      837        /*     always the same size, and have the link field in the same   */
      569      838        /*     position. Therefore, for consistancy in the slot allocation */
      570      839        /*     routines, I will always use the JM$QRIT structure when      */
      571      840        /*     manipulating the 'slots'.                                   */
      572      841    1         IF JMC_SLOTCNT = 0 THEN CALL JMU$ALLOC_SLOTS;

    841  0 000002   000000 235000 xsym               LDA     JMC_SLOTCNT
         0 000003   000007 601000 0                  TNZ     s:842

    841  0 000004   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000005   000000 701000 xent               TSX1    JMU$ALLOC_SLOTS
         0 000006   000000 011000                    NOP     0

      573      842    1         SLOT$ = JMC_SLOTHD$;

    842  0 000007   000000 236000 xsym               LDQ     JMC_SLOTHD$
         0 000010   200003 470500                    LDP0    @SLOT$,,AUTO
         0 000011   000000 756100                    STQ     0,,PR0

      574      843    1         JMC_SLOTHD$ = SLOT$->JM$QRIT.NXT$;

    843  0 000012   000000 471500                    LDP1    0,,PR0
         0 000013   100002 236100                    LDQ     2,,PR1
         0 000014   000000 756000 xsym               STQ     JMC_SLOTHD$

      575      844    1         JMC_SLOTCNT = JMC_SLOTCNT - 1;

PL6.E3A0      #004=JMU$GET_SLOT File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:86   
    844  0 000015   000001 336007                    LCQ     1,DL
         0 000016   000000 056000 xsym               ASQ     JMC_SLOTCNT

      576      845    1         RETURN;

    845  0 000017   000000 702200 xent               TSX2  ! X66_ARET

      577      846        /*F*   NAME:   JMU$REL_SLOT                                        */
      578      847        /*F*   PURPOSE: To return a 'slot' to the free list.               */
      579      848    1   JMU$REL_SLOT: ENTRY (SLOT$);

    848  0 000020   000000 700200 xent  JMU$REL_SLOT TSX0  ! X66_AUTO_1
         0 000021   000004 000001                    ZERO    4,1

      580      849        /**/
      581      850    1         SLOT$->JM$QRIT.NXT$ = ADDR(NIL);

    850  0 000022   200003 470500                    LDP0    @SLOT$,,AUTO
         0 000023   000000 471500                    LDP1    0,,PR0
         0 000024   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000025   100002 756100                    STQ     2,,PR1

      582      851    1         IF JMC_SLOTHD$ = ADDR(NIL) THEN

    851  0 000026   000000 236000 xsym               LDQ     JMC_SLOTHD$
         0 000027   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000030   000034 601000 0                  TNZ     s:853

      583      852    1          JMC_SLOTHD$ = SLOT$;

    852  0 000031   000000 236100                    LDQ     0,,PR0
         0 000032   000000 756000 xsym               STQ     JMC_SLOTHD$
         0 000033   000037 710000 0                  TRA     s:854

      584      853    1         ELSE JMC_SLOTTL$->JM$QRIT.NXT$ = SLOT$;

    853  0 000034   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #004=JMU$GET_SLOT File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:87   
         0 000035   000000 471400 xsym               LDP1    JMC_SLOTTL$
         0 000036   100002 756100                    STQ     2,,PR1

      585      854    1         JMC_SLOTTL$ = SLOT$;

    854  0 000037   000000 236100                    LDQ     0,,PR0
         0 000040   000000 756000 xsym               STQ     JMC_SLOTTL$

      586      855    1         JMC_SLOTCNT = JMC_SLOTCNT + 1;

    855  0 000041   000000 054000 xsym               AOS     JMC_SLOTCNT

      587      856    1         RETURN;

    856  0 000042   000000 702200 xent               TSX2  ! X66_ARET
      588      857    1   END JMU$GET_SLOT;
      589      858        %EOD;

PL6.E3A0      #004=JMU$GET_SLOT File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:88   
--  Include file information  --

   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure JMU$GET_SLOT.
PL6.E3A0      #004=JMU$GET_SLOT File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:89   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @SLOT$                    *0-0-0/w PTR         r     1 SLOT$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 JMC_SLOTCNT                0-0-0/w PTR         r     1 JMC_SLOTHD$
     0-0-0/w PTR         r     1 JMC_SLOTTL$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(108)   r     1 JM$QRIT


   Procedure JMU$GET_SLOT requires 35 words for executable code.
   Procedure JMU$GET_SLOT requires 4 words of local(AUTO) storage.
PL6.E3A0      #004=JMU$GET_SLOT File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:90   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=JMU$GET_SLOT File=JMU$UTIL.:E05TSI                            TUE 07/29/97 23:33 Page:91   
          MINI XREF LISTING

JM$QRIT.NXT$
       814**DCL       843>>ASSIGN    850<<ASSIGN    853<<ASSIGN
JM$QRIT.VNUM
       805**DCL       807--REDEF
JMC_CH
       770**DCL       771--REDEF
JMC_SLOTCNT
       774**DCL       841>>IF        844<<ASSIGN    844>>ASSIGN    855<<ASSIGN    855>>ASSIGN
JMC_SLOTHD$
       773**DCL       842>>ASSIGN    843<<ASSIGN    851>>IF        852<<ASSIGN
JMC_SLOTTL$
       773**DCL       853>>ASSIGN    854<<ASSIGN
JMU$ALLOC_SLOTS
       833**DCL-ENT   841--CALL
SLOT$
       826**DCL         9--PROC      842<<ASSIGN    843>>ASSIGN    848--ENTRY     850>>ASSIGN    852>>ASSIGN
       853>>ASSIGN    854>>ASSIGN

PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:92   
      590        1        /*T***********************************************************/
      591        2        /*T*                                                         */
      592        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      593        4        /*T*                                                         */
      594        5        /*T***********************************************************/
      595        6        /*F*   NAME:   JMU$QEV                                             */
      596        7        /*F*   PURPOSE: To place an event onto the event queue for later   */
      597        8        /*,*           action.                                             */
      598        9        JMU$QEV: PROC(EVENT) ALTRET; /* !!Doesn't ALTRET!! */
      599       10        /**/
      600       11
      601       12
      602       13
      603       14        /**/
      604       15        /* INCLUDES */
      605       16        /**/
      606       17        %INCLUDE JM$STRUCT;                     /* MBS TABLE STRUCTURES               */
      607      762        %INCLUDE JMC_DATA_R;                    /* MBS-RESIDENT STATIC GLOBAL DATA    */
      608      777
      609      778
      610      779
      611      780        /**/
      612      781        /* PARAMETERS */
      613      782        /**/
      614      783        %JM_EVENT (FPTN=EVENT,STCLASS="");
      615      869
      616      870
      617      871
      618      872        /**/
      619      873        /* BASED */
      620      874        /**/
      621      875        %JM_IF (FPTN=JM$IF,STCLASS=BASED);
      622     1033        %JM_EVENT (FPTN=JM$EVENT,STCLASS=BASED);
      623     1119
      624     1120
      625     1121
      626     1122        /**/
PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:93   
      627     1123        /* AUTO */
      628     1124        /**/
      629     1125    1   DCL QENT$ PTR;
      630     1126        /**/
      631     1127    2           DO INHIBIT;
      632     1128        /* GET A FREE QUEUE ENTRY, COPY THE EVENT CITATION DATA INTO IT,   */
      633     1129        /* AND CHAIN IT TO THE EVENT QUEUE.                                */
      634     1130    2           QENT$ = JMC_FQHD$;
      635     1131    2           JMC_FQHD$ = JMC_FQHD$->JM$EVENT.LNK$;
      636     1132    2           JMC_FQCNT = JMC_FQCNT - 1;
      637     1133    2           QENT$->JM$EVENT   = EVENT;
      638     1134    2           QENT$->JM$EVENT.LNK$ = ADDR(NIL);
      639     1135    2           IF JMC_EVQCNT = 0 THEN     /* EMPTY QUEUE IS A LITTLE DIFFERENT...    */
      640     1136    2            JMC_EVQHD$ = QENT$;
      641     1137    2           ELSE JMC_EVQTL$->JM$EVENT.LNK$  = QENT$;
      642     1138    2           JMC_EVQTL$ = QENT$;
      643     1139    2           JMC_EVQCNT = JMC_EVQCNT + 1;
      644     1140    2           RETURN;
      645     1141    2           END; /* Inhibit */
      646     1142        %EJECT;
PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:94   
      647     1143        /*F*    NAME:   JMU$DQEV                                           */
      648     1144        /*F*   PURPOSE: To dequeue the next entry on the event queue and   */
      649     1145        /*,*           pass the event citation data back to the caller.    */
      650     1146    1   JMU$DQEV: ENTRY(EVENT) ALTRET;
      651     1147        /**/
      652     1148    2           DO INHIBIT;
      653     1149        /* ALTRETURN IF THERE'S NOTHING ON THE QUEUE... */
      654     1150    2           IF JMC_EVQCNT = 0 THEN ALTRETURN;
      655     1151        /* OTHERWISE, COPY THE DATA FROM THE FIRST ENTRY, AND RETURN THE   */
      656     1152        /* QUEUE ENTRY TO THE FREE LIST.                                   */
      657     1153    2           QENT$ = JMC_EVQHD$;
      658     1154    2           EVENT   = QENT$->JM$EVENT;
      659     1155    2           JMC_EVQHD$ = QENT$->JM$EVENT.LNK$;
      660     1156    2           JMC_EVQCNT = JMC_EVQCNT - 1;
      661     1157    2           QENT$->JM$EVENT.LNK$ = ADDR(NIL);
      662     1158    2           IF JMC_FQCNT = 0 THEN
      663     1159    2            JMC_FQHD$ = QENT$;
      664     1160    2           ELSE JMC_FQTL$->JM$EVENT.LNK$  = QENT$;
      665     1161    2           JMC_FQTL$ = QENT$;
      666     1162    2           JMC_FQCNT = JMC_FQCNT + 1;
      667     1163    2           RETURN;
      668     1164    2           END; /* Inhibit */
      669     1165    1   END JMU$QEV;
      670     1166        %EOD;

PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:95   
--  Include file information  --

   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure JMU$QEV.

   Procedure JMU$QEV requires 58 words for executable code.
   Procedure JMU$QEV requires 6 words of local(AUTO) storage.

PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:96   

 Object Unit name= JMU$QEV                                    File name= JMU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:34:07.68 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    58     72  JMU$QEV

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        1  JMU$QEV
     0     34          yes     yes      Std        1  JMU$DQEV

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     JMC_CH                                JMC_EVQHD$                            JMC_EVQTL$
     JMC_EVQCNT                            JMC_FQHD$                             JMC_FQTL$
     JMC_FQCNT                             B_VECTNIL
PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:97   


      590        1        /*T***********************************************************/
      591        2        /*T*                                                         */
      592        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      593        4        /*T*                                                         */
      594        5        /*T***********************************************************/
      595        6        /*F*   NAME:   JMU$QEV                                             */
      596        7        /*F*   PURPOSE: To place an event onto the event queue for later   */
      597        8        /*,*           action.                                             */
      598        9        JMU$QEV: PROC(EVENT) ALTRET; /* !!Doesn't ALTRET!! */

      9  0 000000   000000 700200 xent  JMU$QEV      TSX0  ! X66_AUTO_1
         0 000001   000006 000001                    ZERO    6,1

      599       10        /**/
      600       11
      601       12
      602       13
      603       14        /**/
      604       15        /* INCLUDES */
      605       16        /**/
      606       17        %INCLUDE JM$STRUCT;                     /* MBS TABLE STRUCTURES               */
      607      762        %INCLUDE JMC_DATA_R;                    /* MBS-RESIDENT STATIC GLOBAL DATA    */
      608      777
      609      778
      610      779
      611      780        /**/
      612      781        /* PARAMETERS */
      613      782        /**/
      614      783        %JM_EVENT (FPTN=EVENT,STCLASS="");
      615      869
      616      870
      617      871
      618      872        /**/
      619      873        /* BASED */
      620      874        /**/
      621      875        %JM_IF (FPTN=JM$IF,STCLASS=BASED);
PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:98   
      622     1033        %JM_EVENT (FPTN=JM$EVENT,STCLASS=BASED);
      623     1119
      624     1120
      625     1121
      626     1122        /**/
      627     1123        /* AUTO */
      628     1124        /**/
      629     1125    1   DCL QENT$ PTR;
      630     1126        /**/
      631     1127    2           DO INHIBIT;

      632     1128        /* GET A FREE QUEUE ENTRY, COPY THE EVENT CITATION DATA INTO IT,   */
      633     1129        /* AND CHAIN IT TO THE EVENT QUEUE.                                */
      634     1130    2           QENT$ = JMC_FQHD$;

   1130  0 000002   000000 236200 xsym               LDQ   ! JMC_FQHD$
         0 000003   200004 756300                    STQ   ! QENT$,,AUTO

      635     1131    2           JMC_FQHD$ = JMC_FQHD$->JM$EVENT.LNK$;

   1131  0 000004   000000 470600 xsym               LDP0  ! JMC_FQHD$
         0 000005   000000 236300                    LDQ   ! 0,,PR0
         0 000006   000000 756200 xsym               STQ   ! JMC_FQHD$

      636     1132    2           JMC_FQCNT = JMC_FQCNT - 1;

   1132  0 000007   000001 336207                    LCQ   ! 1,DL
         0 000010   000000 056200 xsym               ASQ   ! JMC_FQCNT

      637     1133    2           QENT$->JM$EVENT   = EVENT;

   1133  0 000011   200003 470700                    LDP0  ! @EVENT,,AUTO
         0 000012   200004 471700                    LDP1  ! QENT$,,AUTO
         0 000013   000100 100700                    MLR   ! fill='000'O
         0 000014   000000 000040                    ADSC9   0,,PR0                   cn=0,n=32
         0 000015   100000 000040                    ADSC9   0,,PR1                   cn=0,n=32

PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:99   
      638     1134    2           QENT$->JM$EVENT.LNK$ = ADDR(NIL);

   1134  0 000016   000001 236200 xsym               LDQ   ! B_VECTNIL+1
         0 000017   100000 756300                    STQ   ! 0,,PR1

      639     1135    2           IF JMC_EVQCNT = 0 THEN     /* EMPTY QUEUE IS A LITTLE DIFFERENT...    */

   1135  0 000020   000000 235200 xsym               LDA   ! JMC_EVQCNT
         0 000021   000025 601200 0                  TNZ   ! s:1137

      640     1136    2            JMC_EVQHD$ = QENT$;

   1136  0 000022   200004 236300                    LDQ   ! QENT$,,AUTO
         0 000023   000000 756200 xsym               STQ   ! JMC_EVQHD$
         0 000024   000030 710200 0                  TRA   ! s:1138

      641     1137    2           ELSE JMC_EVQTL$->JM$EVENT.LNK$  = QENT$;

   1137  0 000025   200004 236300                    LDQ   ! QENT$,,AUTO
         0 000026   000000 473600 xsym               LDP3  ! JMC_EVQTL$
         0 000027   300000 756300                    STQ   ! 0,,PR3

      642     1138    2           JMC_EVQTL$ = QENT$;

   1138  0 000030   000000 756200 xsym               STQ   ! JMC_EVQTL$

      643     1139    2           JMC_EVQCNT = JMC_EVQCNT + 1;

   1139  0 000031   000000 054200 xsym               AOS   ! JMC_EVQCNT

      644     1140    2           RETURN;

   1140  0 000032   000000 702200 xent               TSX2  ! X66_ARET

      645     1141    2           END; /* Inhibit */

   1141  0 000033   000036 710000 0                  TRA     s:1150
PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:100  

      646     1142        %EJECT;
PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:101  
      647     1143        /*F*    NAME:   JMU$DQEV                                           */
      648     1144        /*F*   PURPOSE: To dequeue the next entry on the event queue and   */
      649     1145        /*,*           pass the event citation data back to the caller.    */
      650     1146    1   JMU$DQEV: ENTRY(EVENT) ALTRET;

   1146  0 000034   000000 700200 xent  JMU$DQEV     TSX0  ! X66_AUTO_1
         0 000035   000006 000001                    ZERO    6,1

      651     1147        /**/
      652     1148    2           DO INHIBIT;

      653     1149        /* ALTRETURN IF THERE'S NOTHING ON THE QUEUE... */
      654     1150    2           IF JMC_EVQCNT = 0 THEN ALTRETURN;

   1150  0 000036   000000 235200 xsym               LDA   ! JMC_EVQCNT
         0 000037   000041 601200 0                  TNZ   ! s:1153

   1150  0 000040   000000 702200 xent               TSX2  ! X66_AALT

      655     1151        /* OTHERWISE, COPY THE DATA FROM THE FIRST ENTRY, AND RETURN THE   */
      656     1152        /* QUEUE ENTRY TO THE FREE LIST.                                   */
      657     1153    2           QENT$ = JMC_EVQHD$;

   1153  0 000041   000000 236200 xsym               LDQ   ! JMC_EVQHD$
         0 000042   200004 756300                    STQ   ! QENT$,,AUTO

      658     1154    2           EVENT   = QENT$->JM$EVENT;

   1154  0 000043   200004 470700                    LDP0  ! QENT$,,AUTO
         0 000044   200003 471700                    LDP1  ! @EVENT,,AUTO
         0 000045   000100 100700                    MLR   ! fill='000'O
         0 000046   000000 000040                    ADSC9   0,,PR0                   cn=0,n=32
         0 000047   100000 000040                    ADSC9   0,,PR1                   cn=0,n=32

      659     1155    2           JMC_EVQHD$ = QENT$->JM$EVENT.LNK$;

   1155  0 000050   000000 236300                    LDQ   ! 0,,PR0
PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:102  
         0 000051   000000 756200 xsym               STQ   ! JMC_EVQHD$

      660     1156    2           JMC_EVQCNT = JMC_EVQCNT - 1;

   1156  0 000052   000001 336207                    LCQ   ! 1,DL
         0 000053   000000 056200 xsym               ASQ   ! JMC_EVQCNT

      661     1157    2           QENT$->JM$EVENT.LNK$ = ADDR(NIL);

   1157  0 000054   000001 236200 xsym               LDQ   ! B_VECTNIL+1
         0 000055   000000 756300                    STQ   ! 0,,PR0

      662     1158    2           IF JMC_FQCNT = 0 THEN

   1158  0 000056   000000 235200 xsym               LDA   ! JMC_FQCNT
         0 000057   000063 601200 0                  TNZ   ! s:1160

      663     1159    2            JMC_FQHD$ = QENT$;

   1159  0 000060   200004 236300                    LDQ   ! QENT$,,AUTO
         0 000061   000000 756200 xsym               STQ   ! JMC_FQHD$
         0 000062   000066 710200 0                  TRA   ! s:1161

      664     1160    2           ELSE JMC_FQTL$->JM$EVENT.LNK$  = QENT$;

   1160  0 000063   200004 236300                    LDQ   ! QENT$,,AUTO
         0 000064   000000 473600 xsym               LDP3  ! JMC_FQTL$
         0 000065   300000 756300                    STQ   ! 0,,PR3

      665     1161    2           JMC_FQTL$ = QENT$;

   1161  0 000066   000000 756200 xsym               STQ   ! JMC_FQTL$

      666     1162    2           JMC_FQCNT = JMC_FQCNT + 1;

   1162  0 000067   000000 054200 xsym               AOS   ! JMC_FQCNT

PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:103  
      667     1163    2           RETURN;

   1163  0 000070   000000 702200 xent               TSX2  ! X66_ARET

      668     1164    2           END; /* Inhibit */

      669     1165    1   END JMU$QEV;

   1165  0 000071   000000 702200 xent               TSX2  ! X66_ARET
      670     1166        %EOD;

PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:104  
--  Include file information  --

   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure JMU$QEV.
PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:105  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @EVENT                    *0-0-0/w STRC(288)   r     1 EVENT
     4-0-0/w PTR         r     1 QENT$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 JMC_EVQCNT                 0-0-0/w PTR         r     1 JMC_EVQHD$
     0-0-0/w PTR         r     1 JMC_EVQTL$                 0-0-0/w SBIN        r     1 JMC_FQCNT
     0-0-0/w PTR         r     1 JMC_FQHD$                  0-0-0/w PTR         r     1 JMC_FQTL$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(288)   r     1 JM$EVENT                   0-0-0/w ASTR(1665)  r     1 JM$IF


   Procedure JMU$QEV requires 58 words for executable code.
   Procedure JMU$QEV requires 6 words of local(AUTO) storage.
PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:106  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=JMU$QEV File=JMU$UTIL.:E05TSI                                 TUE 07/29/97 23:34 Page:107  
          MINI XREF LISTING

EVENT
       798**DCL         9--PROC     1133>>ASSIGN   1146--ENTRY    1154<<ASSIGN
EVENT.CITE.ACCT
       847**DCL       850--REDEF
JM$EVENT
      1048**DCL      1133<<ASSIGN   1154>>ASSIGN
JM$EVENT.CITE.ACCT
      1097**DCL      1100--REDEF
JM$EVENT.LNK$
      1054**DCL      1131>>ASSIGN   1134<<ASSIGN   1137<<ASSIGN   1155>>ASSIGN   1157<<ASSIGN   1160<<ASSIGN
JM$IF.JNL
      1018**DCL      1030--IMP-SIZ
JMC_CH
       770**DCL       771--REDEF
JMC_EVQCNT
       772**DCL      1135>>IF       1139<<ASSIGN   1139>>ASSIGN   1150>>IF       1156<<ASSIGN   1156>>ASSIGN
JMC_EVQHD$
       772**DCL      1136<<ASSIGN   1153>>ASSIGN   1155<<ASSIGN
JMC_EVQTL$
       772**DCL      1137>>ASSIGN   1138<<ASSIGN
JMC_FQCNT
       773**DCL      1132<<ASSIGN   1132>>ASSIGN   1158>>IF       1162<<ASSIGN   1162>>ASSIGN
JMC_FQHD$
       773**DCL      1130>>ASSIGN   1131<<ASSIGN   1131>>ASSIGN   1159<<ASSIGN
JMC_FQTL$
       773**DCL      1160>>ASSIGN   1161<<ASSIGN
QENT$
      1125**DCL      1130<<ASSIGN   1133>>ASSIGN   1134>>ASSIGN   1136>>ASSIGN   1137>>ASSIGN   1138>>ASSIGN
      1153<<ASSIGN   1154>>ASSIGN   1155>>ASSIGN   1157>>ASSIGN   1159>>ASSIGN   1160>>ASSIGN   1161>>ASSIGN

PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:108  
      671        1        /*T***********************************************************/
      672        2        /*T*                                                         */
      673        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      674        4        /*T*                                                         */
      675        5        /*T***********************************************************/
      676        6        /*F*   NAME:    JMU$REPART                                         */
      677        7        /*F*   PURPOSE: To reevaluate the legal partition bit mask,        */
      678        8        /*,*           JM$IF.PART,  for every waiting job following a      */
      679        9        /*,*           change in the partition definitions.                */
      680       10        JMU$REPART: PROC;
      681       11
      682       12
      683       13
      684       14        /**/
      685       15        /* INCLUDES */
      686       16        /**/
      687       17        %INCLUDE JM_SUBS_C;                     /* MBS QUEUE INDEX DEFINITIONS        */
      688      123        %INCLUDE JM$STRUCT;                     /* MBS TABLE STRUCTURES               */
      689      868        %INCLUDE JMC_DATA_R;                    /* MBS-RESIDENT STATIC GLOBAL DATA    */
      690      883
      691      884
      692      885
      693      886        /**/
      694      887        /* BASED */
      695      888        /**/
      696      889        %JM_IF (FPTN=JM$IF,STCLASS=BASED);
      697     1047    1   DCL PBITS BIT(16) BASED ALIGNED;
      698     1048
      699     1049
      700     1050
      701     1051        /**/
      702     1052        /* AUTO */
      703     1053        /**/
      704     1054    1   DCL TAIL$ PTR;
      705     1055    1   DCL IF$ PTR;
      706     1056    1   DCL TIF$ PTR;
      707     1057    1   DCL I SBIN;
PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:109  
      708     1058    1   DCL QNUM UBIN WORD;
      709     1059
      710     1060
      711     1061
      712     1062        /**/
      713     1063        /* ENTREFS */
      714     1064        /**/
      715     1065    1   DCL JMU$ADD2Q     ENTRY(3);
      716     1066    1   DCL JMU$SELECTQ   ENTRY(2);
      717     1067    1   DCL JMU$SET_PARTS ENTRY(1);
      718     1068    1   DCL JMU$UNLINK_IF ENTRY(3);
      719     1069
      720     1070
      721     1071
      722     1072        /**/
      723     1073        /* SUBS */
      724     1074        /**/
      725     1075        %SUB JM$IF  = IF$->JM$IF;
      726     1076        /**/
      727     1077        /* See if we really want to be here... */
      728     1078    1         IF JMC_CHNG$->PBITS = '0'B THEN RETURN;
      729     1079        /* Remember the tail of 'Waiting for Partition' jobs so that we    */
      730     1080        /* won't process unnecessary jobs when we do this list last.       */
      731     1081    1         TAIL$ = JMC_CH.TWP$;
      732     1082    2           DO I = JM_Q$WR TO JM_Q$P15;
      733     1083    2           IF$ = JMC_CHAINS.HEAD$(I);
      734     1084    3             DO WHILE (IF$ ~= ADDR(NIL));
      735     1085    3             TIF$ = JM$IF.LNK$;          /* REMEMBER LINK IN CASE OF MOVE      */
      736     1086    3             CALL JMU$SET_PARTS(IF$);
      737     1087    3             IF JM$IF.PART = '0'B THEN
      738     1088    4               DO;
      739     1089    4               CALL JMU$UNLINK_IF(I,,IF$);
      740     1090    4               CALL JMU$ADD2Q(0,JM_Q$WP,IF$);
      741     1091    4               END;
      742     1092    3             IF$ = TIF$;
      743     1093    3             END;
      744     1094    2           END;
PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:110  
      745     1095        /* Lastly, process the jobs which were previously waiting for a    */
      746     1096        /* useable partition to see if they now have one.                  */
      747     1097    1         IF$ = JMC_CH.HWP$;
      748     1098    2           DO WHILE (IF$ ~= ADDR(NIL));
      749     1099    2           TIF$ = JM$IF.LNK$;
      750     1100    2           CALL JMU$SET_PARTS(IF$);
      751     1101    2           IF JM$IF.PART ~= '0'B THEN
      752     1102    3             DO;
      753     1103    3             CALL JMU$UNLINK_IF(JM_Q$WP,,IF$);
      754     1104    3             CALL JMU$SELECTQ(IF$,QNUM);
      755     1105    3             END;
      756     1106    2           IF IF$ = TAIL$ THEN GOTO DONE;
      757     1107    2           IF$ = TIF$;
      758     1108    2           END;
      759     1109    1   DONE: JMC_CHNG$->PBITS  = '0'B;
      760     1110    1         RETURN;
      761     1111        /**/
      762     1112    1   END JMU$REPART;
      763     1113        %EOD;

PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:111  
--  Include file information  --

   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   JM_SUBS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure JMU$REPART.

   Procedure JMU$REPART requires 98 words for executable code.
   Procedure JMU$REPART requires 12 words of local(AUTO) storage.

PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:112  

 Object Unit name= JMU$REPART                                 File name= JMU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:34:27.68 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    98    142  JMU$REPART
    1  RoData even  none     2      2  JMU$REPART

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        0  JMU$REPART

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 JMU$SET_PARTS
         yes           Std       3 JMU$UNLINK_IF
         yes           Std       3 JMU$ADD2Q
         yes           Std       2 JMU$SELECTQ
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     JMC_CH                                JMC_CHNG$                             B_VECTNIL
PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:113  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:114  


      671        1        /*T***********************************************************/
      672        2        /*T*                                                         */
      673        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      674        4        /*T*                                                         */
      675        5        /*T***********************************************************/
      676        6        /*F*   NAME:    JMU$REPART                                         */
      677        7        /*F*   PURPOSE: To reevaluate the legal partition bit mask,        */
      678        8        /*,*           JM$IF.PART,  for every waiting job following a      */
      679        9        /*,*           change in the partition definitions.                */
      680       10        JMU$REPART: PROC;

     10  0 000000   000000 700200 xent  JMU$REPART   TSX0  ! X66_AUTO_0
         0 000001   000014 000000                    ZERO    12,0

      681       11
      682       12
      683       13
      684       14        /**/
      685       15        /* INCLUDES */
      686       16        /**/
      687       17        %INCLUDE JM_SUBS_C;                     /* MBS QUEUE INDEX DEFINITIONS        */
      688      123        %INCLUDE JM$STRUCT;                     /* MBS TABLE STRUCTURES               */
      689      868        %INCLUDE JMC_DATA_R;                    /* MBS-RESIDENT STATIC GLOBAL DATA    */
      690      883
      691      884
      692      885
      693      886        /**/
      694      887        /* BASED */
      695      888        /**/
      696      889        %JM_IF (FPTN=JM$IF,STCLASS=BASED);
      697     1047    1   DCL PBITS BIT(16) BASED ALIGNED;
      698     1048
      699     1049
      700     1050
      701     1051        /**/
      702     1052        /* AUTO */
PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:115  
      703     1053        /**/
      704     1054    1   DCL TAIL$ PTR;
      705     1055    1   DCL IF$ PTR;
      706     1056    1   DCL TIF$ PTR;
      707     1057    1   DCL I SBIN;
      708     1058    1   DCL QNUM UBIN WORD;
      709     1059
      710     1060
      711     1061
      712     1062        /**/
      713     1063        /* ENTREFS */
      714     1064        /**/
      715     1065    1   DCL JMU$ADD2Q     ENTRY(3);
      716     1066    1   DCL JMU$SELECTQ   ENTRY(2);
      717     1067    1   DCL JMU$SET_PARTS ENTRY(1);
      718     1068    1   DCL JMU$UNLINK_IF ENTRY(3);
      719     1069
      720     1070
      721     1071
      722     1072        /**/
      723     1073        /* SUBS */
      724     1074        /**/
      725     1075        %SUB JM$IF  = IF$->JM$IF;
      726     1076        /**/
      727     1077        /* See if we really want to be here... */
      728     1078    1         IF JMC_CHNG$->PBITS = '0'B THEN RETURN;

   1078  0 000002   000000 470400 xsym               LDP0    JMC_CHNG$
         0 000003   000000 236100                    LDQ     0,,PR0
         0 000004   777774 316003                    CANQ    -4,DU
         0 000005   000007 601000 0                  TNZ     s:1081

   1078  0 000006   000000 702200 xent               TSX2  ! X66_ARET

      729     1079        /* Remember the tail of 'Waiting for Partition' jobs so that we    */
      730     1080        /* won't process unnecessary jobs when we do this list last.       */
      731     1081    1         TAIL$ = JMC_CH.TWP$;
PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:116  

   1081  0 000007   000003 236000 xsym               LDQ     JMC_CH+3
         0 000010   200003 756100                    STQ     TAIL$,,AUTO

      732     1082    2           DO I = JM_Q$WR TO JM_Q$P15;

   1082  0 000011   000002 235007                    LDA     2,DL
         0 000012   200006 755100                    STA     I,,AUTO

      733     1083    2           IF$ = JMC_CHAINS.HEAD$(I);

   1083  0 000013   200006 235100                    LDA     I,,AUTO
         0 000014   000001 735000                    ALS     1
         0 000015   000000 236005 xsym               LDQ     JMC_CH,AL
         0 000016   200004 756100                    STQ     IF$,,AUTO

      734     1084    3             DO WHILE (IF$ ~= ADDR(NIL));

   1084  0 000017   000061 710000 0                  TRA     s:1093

      735     1085    3             TIF$ = JM$IF.LNK$;          /* REMEMBER LINK IN CASE OF MOVE      */

   1085  0 000020   200004 470500                    LDP0    IF$,,AUTO
         0 000021   000000 236100                    LDQ     0,,PR0
         0 000022   200005 756100                    STQ     TIF$,,AUTO

      736     1086    3             CALL JMU$SET_PARTS(IF$);

   1086  0 000023   200004 631500                    EPPR1   IF$,,AUTO
         0 000024   200010 451500                    STP1    QNUM+1,,AUTO
         0 000025   200010 630500                    EPPR0   QNUM+1,,AUTO
         0 000026   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000027   000000 701000 xent               TSX1    JMU$SET_PARTS
         0 000030   000000 011000                    NOP     0

      737     1087    3             IF JM$IF.PART = '0'B THEN

PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:117  
   1087  0 000031   200004 470500                    LDP0    IF$,,AUTO
         0 000032   000005 236100                    LDQ     5,,PR0
         0 000033   177777 316007                    CANQ    65535,DL
         0 000034   000057 601000 0                  TNZ     s:1092

      738     1088    4               DO;

      739     1089    4               CALL JMU$UNLINK_IF(I,,IF$);

   1089  0 000035   200004 631500                    EPPR1   IF$,,AUTO
         0 000036   200012 451500                    STP1    QNUM+3,,AUTO
         0 000037   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000040   200011 756100                    STQ     QNUM+2,,AUTO
         0 000041   200006 633500                    EPPR3   I,,AUTO
         0 000042   200010 453500                    STP3    QNUM+1,,AUTO
         0 000043   200010 630500                    EPPR0   QNUM+1,,AUTO
         0 000044   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000045   000000 701000 xent               TSX1    JMU$UNLINK_IF
         0 000046   000000 011000                    NOP     0

      740     1090    4               CALL JMU$ADD2Q(0,JM_Q$WP,IF$);

   1090  0 000047   200004 630500                    EPPR0   IF$,,AUTO
         0 000050   200012 450500                    STP0    QNUM+3,,AUTO
         0 000051   000000 237000 1                  LDAQ    0
         0 000052   200010 757100                    STAQ    QNUM+1,,AUTO
         0 000053   200010 630500                    EPPR0   QNUM+1,,AUTO
         0 000054   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000055   000000 701000 xent               TSX1    JMU$ADD2Q
         0 000056   000000 011000                    NOP     0

      741     1091    4               END;

      742     1092    3             IF$ = TIF$;

   1092  0 000057   200005 236100                    LDQ     TIF$,,AUTO
         0 000060   200004 756100                    STQ     IF$,,AUTO
PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:118  

      743     1093    3             END;

   1093  0 000061   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000062   000020 601000 0                  TNZ     s:1085

      744     1094    2           END;

   1094  0 000063   200006 054100                    AOS     I,,AUTO
         0 000064   200006 235100                    LDA     I,,AUTO
         0 000065   000025 115007                    CMPA    21,DL
         0 000066   000013 604400 0                  TMOZ    s:1083

      745     1095        /* Lastly, process the jobs which were previously waiting for a    */
      746     1096        /* useable partition to see if they now have one.                  */
      747     1097    1         IF$ = JMC_CH.HWP$;

   1097  0 000067   000002 236000 xsym               LDQ     JMC_CH+2
         0 000070   200004 756100                    STQ     IF$,,AUTO

      748     1098    2           DO WHILE (IF$ ~= ADDR(NIL));

   1098  0 000071   000135 710000 0                  TRA     s:1108

      749     1099    2           TIF$ = JM$IF.LNK$;

   1099  0 000072   200004 470500                    LDP0    IF$,,AUTO
         0 000073   000000 236100                    LDQ     0,,PR0
         0 000074   200005 756100                    STQ     TIF$,,AUTO

      750     1100    2           CALL JMU$SET_PARTS(IF$);

   1100  0 000075   200004 631500                    EPPR1   IF$,,AUTO
         0 000076   200010 451500                    STP1    QNUM+1,,AUTO
         0 000077   200010 630500                    EPPR0   QNUM+1,,AUTO
         0 000100   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000101   000000 701000 xent               TSX1    JMU$SET_PARTS
PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:119  
         0 000102   000000 011000                    NOP     0

      751     1101    2           IF JM$IF.PART ~= '0'B THEN

   1101  0 000103   200004 470500                    LDP0    IF$,,AUTO
         0 000104   000005 236100                    LDQ     5,,PR0
         0 000105   177777 316007                    CANQ    65535,DL
         0 000106   000130 600000 0                  TZE     s:1106

      752     1102    3             DO;

      753     1103    3             CALL JMU$UNLINK_IF(JM_Q$WP,,IF$);

   1103  0 000107   200004 631500                    EPPR1   IF$,,AUTO
         0 000110   200012 451500                    STP1    QNUM+3,,AUTO
         0 000111   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000112   000001 235000 1                  LDA     1
         0 000113   200010 757100                    STAQ    QNUM+1,,AUTO
         0 000114   200010 630500                    EPPR0   QNUM+1,,AUTO
         0 000115   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000116   000000 701000 xent               TSX1    JMU$UNLINK_IF
         0 000117   000000 011000                    NOP     0

      754     1104    3             CALL JMU$SELECTQ(IF$,QNUM);

   1104  0 000120   200007 630500                    EPPR0   QNUM,,AUTO
         0 000121   200011 450500                    STP0    QNUM+2,,AUTO
         0 000122   200004 631500                    EPPR1   IF$,,AUTO
         0 000123   200010 451500                    STP1    QNUM+1,,AUTO
         0 000124   200010 630500                    EPPR0   QNUM+1,,AUTO
         0 000125   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000126   000000 701000 xent               TSX1    JMU$SELECTQ
         0 000127   000000 011000                    NOP     0

      755     1105    3             END;

      756     1106    2           IF IF$ = TAIL$ THEN GOTO DONE;
PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:120  

   1106  0 000130   200004 236100                    LDQ     IF$,,AUTO
         0 000131   200003 116100                    CMPQ    TAIL$,,AUTO
         0 000132   000137 600000 0                  TZE     DONE

      757     1107    2           IF$ = TIF$;

   1107  0 000133   200005 236100                    LDQ     TIF$,,AUTO
         0 000134   200004 756100                    STQ     IF$,,AUTO

      758     1108    2           END;

   1108  0 000135   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000136   000072 601000 0                  TNZ     s:1099

      759     1109    1   DONE: JMC_CHNG$->PBITS  = '0'B;

   1109  0 000137   000000 470400 xsym  DONE         LDP0    JMC_CHNG$
         0 000140   000000 450100                    STZ     0,,PR0

      760     1110    1         RETURN;

   1110  0 000141   000000 702200 xent               TSX2  ! X66_ARET
      761     1111        /**/
      762     1112    1   END JMU$REPART;
      763     1113        %EOD;

PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:121  
--  Include file information  --

   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   JM_SUBS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure JMU$REPART.
PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:122  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w SBIN        r     1 I                          4-0-0/w PTR         r     1 IF$
     7-0-0/w UBIN        r     1 QNUM                       3-0-0/w PTR         r     1 TAIL$
     5-0-0/w PTR         r     1 TIF$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(1728)  r     1 JMC_CH
     0-0-0/w STRC(72)    r     1 JMC_CHAINS(0:23)
     0-0-0/w PTR         r     1 JMC_CHNG$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(1665)  r     1 JM$IF                      0-0-0/w BIT (16)    r     1 PBITS


   Procedure JMU$REPART requires 98 words for executable code.
   Procedure JMU$REPART requires 12 words of local(AUTO) storage.
PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:123  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:124  
          MINI XREF LISTING

DONE
      1109**LABEL    1106--GOTO
I
      1057**DCL      1082<<DOINDEX  1083>>ASSIGN   1089<>CALL
IF$
      1055**DCL      1083<<ASSIGN   1084>>DOWHILE  1085>>ASSIGN   1086<>CALL     1087>>IF       1089<>CALL
      1090<>CALL     1092<<ASSIGN   1097<<ASSIGN   1098>>DOWHILE  1099>>ASSIGN   1100<>CALL     1101>>IF
      1103<>CALL     1104<>CALL     1106>>IF       1107<<ASSIGN
JM$IF.JNL
      1032**DCL      1044--IMP-SIZ
JM$IF.LNK$
       906**DCL      1085>>ASSIGN   1099>>ASSIGN
JM$IF.PART
       919**DCL      1087>>IF       1101>>IF
JMC_CH
       876**DCL       877--REDEF
JMC_CH.HWP$
       876**DCL      1097>>ASSIGN
JMC_CH.TWP$
       876**DCL      1081>>ASSIGN
JMC_CHAINS.HEAD$
       878**DCL      1083>>ASSIGN
JMC_CHNG$
       880**DCL      1078>>IF       1109>>ASSIGN
JMU$ADD2Q
      1065**DCL-ENT  1090--CALL
JMU$SELECTQ
      1066**DCL-ENT  1104--CALL
JMU$SET_PARTS
      1067**DCL-ENT  1086--CALL     1100--CALL
JMU$UNLINK_IF
      1068**DCL-ENT  1089--CALL     1103--CALL
PL6.E3A0      #006=JMU$REPART File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:34 Page:125  
PBITS
      1047**DCL      1078>>IF       1109<<ASSIGN
QNUM
      1058**DCL      1104<>CALL
TAIL$
      1054**DCL      1081<<ASSIGN   1106>>IF
TIF$
      1056**DCL      1085<<ASSIGN   1092>>ASSIGN   1099<<ASSIGN   1107>>ASSIGN

PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:126  
      764        1        /*T***********************************************************/
      765        2        /*T*                                                         */
      766        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      767        4        /*T*                                                         */
      768        5        /*T***********************************************************/
      769        6        /*F*   NAME:   JMU$SELECTQ                                         */
      770        7        /*F*   PURPOSE: To place a job on the proper scheduler queue based */
      771        8        /*,*           on its attributes and resouce requirements.         */
      772        9        JMU$SELECTQ: PROC(IF$,QNUM);
      773       10        /**/
      774       11
      775       12
      776       13
      777       14        /**/
      778       15        /* INCLUDES */
      779       16        /**/
      780       17        %INCLUDE CP_6;                          /* Cp-6 fpt definitions               */
      781       98        %INCLUDE CP_6_SUBS;
      782      638        %SUB F_JM='1215'O;
      783      639        %SUB M_U='25'O;
      784      640        %INCLUDE JM_SCODE_C;
      785      667        %INCLUDE JM$STRUCT;                     /* Mbs table structures               */
      786     1412        %INCLUDE JMC_DATA_R;                    /* Mbs-resident global data           */
      787     1427        %INCLUDE JM_SUBS_C;                     /* Queue index definitions            */
      788     1533
      789     1534
      790     1535
      791     1536        /**/
      792     1537        /* BASED STRUCTURES */
      793     1538        /**/
      794     1539        %JM_RES (FPTN=JM$QRIT,STCLASS=BASED);
      795     1576        %JM_SN (FPTN=JM$QSN,STCLASS=BASED);
      796     1615
      797     1616
      798     1617
      799     1618        /**/
      800     1619        /* PARAMETERS */
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:127  
      801     1620        /**/
      802     1621    1   DCL IF$ PTR;
      803     1622    1   DCL QNUM SBIN;
      804     1623
      805     1624
      806     1625
      807     1626        /**/
      808     1627        /* BASED */
      809     1628        /**/
      810     1629        %JM_IF (FPTN=JM$IF,STCLASS=BASED);
      811     1787
      812     1788
      813     1789
      814     1790        /**/
      815     1791        /* AUTO */
      816     1792        /**/
      817     1793    1   DCL I SBIN;
      818     1794    1   DCL PRIO SBIN;
      819     1795    1   DCL PKSET$ PTR;
      820     1796
      821     1797
      822     1798
      823     1799        /**/
      824     1800        /* STATIC */
      825     1801        /**/
      826     1802    1   DCL CUTS UBIN(36) STATIC DALIGNED;
      827     1803        %FPT_TIME(SOURCE=CLOCK,
      828     1804                  DEST=UTS,
      829     1805                  TSTAMP=CUTS);
      830     1824        %FPT_RESCTL(FPTN=GET_PKSETS,
      831     1825                    MBSDISP=YES,
      832     1826                    RPSN=PSNLIST);
      833     1843        %VLP_RPSN(FPTN=PSNLIST,N=128);
      834     1858
      835     1859
      836     1860
      837     1861        /**/
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:128  
      838     1862        /* ENTREFS */
      839     1863        /**/
      840     1864    1   DCL FOI$SNAP      ENTRY(4) ALTRET;
      841     1865    1   DCL JMR$CHK_OLDJD ENTRY(1) ;
      842     1866    1   DCL JMU$ADD2RAQ   ENTRY(3);
      843     1867    1   DCL JMU$ADD2Q     ENTRY(3);
      844     1868
      845     1869
      846     1870
      847     1871        /**/
      848     1872        /* SUBS */
      849     1873        /**/
      850     1874        %SUB JM$IF  = IF$->JM$IF;
      851     1875        %SUB JM$QSN = PKSET$->JM$QSN;
      852     1876        %EJECT;
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:129  
      853     1877        /* For jobs which specified DEFER, get the current uts (CUTS),     */
      854     1878        /* and add the job to the 'RUNAFTER' queue if its DEFER time       */
      855     1879        /* has not yet been reached.                                       */
      856     1880    1         IF JM$IF.FLG.RA THEN
      857     1881    2           DO;
      858     1882    2           CALL M$TIME(FPT_TIME);
      859     1883    2           IF JM$IF.RATIM > CUTS THEN
      860     1884    3             DO;
      861     1885    3             CALL JMU$ADD2RAQ(0,JM_Q$WR,IF$);
      862     1886    3             QNUM = JM_Q$WR;
      863     1887    3             RETURN;
      864     1888    3             END;
      865     1889    2           END;
      866     1890        /* Check for job id - final stepcc type of dependency. If specified */
      867     1891        /* then put this job on the job id dependency queue.                */
      868     1892    1         IF (JM$IF.FLG.O3 AND (JM$IF.UNSAT_COUNT > 0)) THEN
      869     1893    2           DO;
      870     1894    2           CALL JMU$ADD2Q(0,JM_Q$JD,IF$);
      871     1895        /* Now, let's check to see if any already completed jobs have this */
      872     1896        /* job's dependency conditions.                                    */
      873     1897    2           CALL JMR$CHK_OLDJD(IF$);
      874     1898    2           QNUM = JM_Q$JD;
      875     1899    2           RETURN;
      876     1900    2           END;
      877     1901        /* If the job can't run in any of the currently defined partitions */
      878     1902        /* then put it on the 'waiting for useable partition' queue.       */
      879     1903    1         IF JM$IF.PART = '0'B THEN
      880     1904    2           DO;
      881     1905    2           CALL JMU$ADD2Q(0,JM_Q$WP,IF$);
      882     1906    2           QNUM = JM_Q$WP;               /* Return assigned queue #            */
      883     1907    2           RETURN;
      884     1908    2           END;
      885     1909        /* See that all of the job's required shared packsets are currently
      886     1910           mounted (as shared) before we will consider it to be schedulable */
      887     1911    1         CALL M$MBS(GET_PKSETS) ALTRET(MMBS_ERR);
      888     1912    1         PKSET$ = JM$IF.SLNK$;
      889     1913    2           DO WHILE (PKSET$ ~= ADDR(NIL));
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:130  
      890     1914    3             DO I = 0 TO PSNLIST.NN# - 1;
      891     1915    3             IF (JM$QSN.TXT = PSNLIST.RPLIST.PSN#(I)) AND
      892     1916    3             (PSNLIST.RPLIST.USAGE#(I) = %SHARED#)
      893     1917    3             THEN GOTO NXT_PSN;
      894     1918    3             END;
      895     1919    2           GOTO PKSET_NOT_UP;
      896     1920    2   NXT_PSN: PKSET$ = JM$QSN.NXT$;
      897     1921    2           END;
      898     1922        /* If we got here, the job is schedulable. Place it onto the proper */
      899     1923        /* priority chain.                                                  */
      900     1924    1         PRIO = JM_Q$P0 + JM$IF.PRIO;
      901     1925    1         CALL JMU$ADD2Q(0,PRIO,IF$);
      902     1926    1         QNUM = PRIO;
      903     1927    1         RETURN;
      904     1928        /**/
      905     1929    1   MMBS_ERR:
      906     1930        /*S*    SCREECH_CODE:   JMU-S$JM240
      907     1931                TYPE:   SNAP
      908     1932                MESSAGE: Error on M$MBS requesting current mounted packsets. */
      909     1933    1         CALL FOI$SNAP (%S$JM240,F_JM,M_U);
      910     1934    1   PKSET_NOT_UP:
      911     1935        /* Place this job on the waiting-for-packset queue */
      912     1936    1         CALL JMU$ADD2Q(0,JM_Q$DP,IF$);
      913     1937    1         QNUM = JM_Q$DP;
      914     1938    1         RETURN;
      915     1939        /**/
      916     1940        /**/
      917     1941    1   END JMU$SELECTQ;
      918     1942        %EOD;

PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:131  
--  Include file information  --

   JM_SUBS_C.:E05TOU  is referenced.
   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   JM_SCODE_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JMU$SELECTQ.

   Procedure JMU$SELECTQ requires 134 words for executable code.
   Procedure JMU$SELECTQ requires 12 words of local(AUTO) storage.

PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:132  

 Object Unit name= JMU$SELECTQ                                File name= JMU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:34:44.00 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none   550   1046  JMU$SELECTQ
    2   Proc  even  none   134    206  JMU$SELECTQ
    3  RoData even  none    14     16  JMU$SELECTQ

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        2  JMU$SELECTQ

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 JMU$ADD2RAQ
         yes           Std       3 JMU$ADD2Q
         yes           Std       1 JMR$CHK_OLDJD
 yes     yes           Std       4 FOI$SNAP
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:133  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  JMC_CH                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:134  


      764        1        /*T***********************************************************/
      765        2        /*T*                                                         */
      766        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      767        4        /*T*                                                         */
      768        5        /*T***********************************************************/
      769        6        /*F*   NAME:   JMU$SELECTQ                                         */
      770        7        /*F*   PURPOSE: To place a job on the proper scheduler queue based */
      771        8        /*,*           on its attributes and resouce requirements.         */
      772        9        JMU$SELECTQ: PROC(IF$,QNUM);

      9  2 000000   000000 700200 xent  JMU$SELECTQ  TSX0  ! X66_AUTO_2
         2 000001   000014 000002                    ZERO    12,2

      773       10        /**/
      774       11
      775       12
      776       13
      777       14        /**/
      778       15        /* INCLUDES */
      779       16        /**/
      780       17        %INCLUDE CP_6;                          /* Cp-6 fpt definitions               */
      781       98        %INCLUDE CP_6_SUBS;
      782      638        %SUB F_JM='1215'O;
      783      639        %SUB M_U='25'O;
      784      640        %INCLUDE JM_SCODE_C;
      785      667        %INCLUDE JM$STRUCT;                     /* Mbs table structures               */
      786     1412        %INCLUDE JMC_DATA_R;                    /* Mbs-resident global data           */
      787     1427        %INCLUDE JM_SUBS_C;                     /* Queue index definitions            */
      788     1533
      789     1534
      790     1535
      791     1536        /**/
      792     1537        /* BASED STRUCTURES */
      793     1538        /**/
      794     1539        %JM_RES (FPTN=JM$QRIT,STCLASS=BASED);
      795     1576        %JM_SN (FPTN=JM$QSN,STCLASS=BASED);
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:135  
      796     1615
      797     1616
      798     1617
      799     1618        /**/
      800     1619        /* PARAMETERS */
      801     1620        /**/
      802     1621    1   DCL IF$ PTR;
      803     1622    1   DCL QNUM SBIN;
      804     1623
      805     1624
      806     1625
      807     1626        /**/
      808     1627        /* BASED */
      809     1628        /**/
      810     1629        %JM_IF (FPTN=JM$IF,STCLASS=BASED);
      811     1787
      812     1788
      813     1789
      814     1790        /**/
      815     1791        /* AUTO */
      816     1792        /**/
      817     1793    1   DCL I SBIN;
      818     1794    1   DCL PRIO SBIN;
      819     1795    1   DCL PKSET$ PTR;
      820     1796
      821     1797
      822     1798
      823     1799        /**/
      824     1800        /* STATIC */
      825     1801        /**/
      826     1802    1   DCL CUTS UBIN(36) STATIC DALIGNED;
      827     1803        %FPT_TIME(SOURCE=CLOCK,
      828     1804                  DEST=UTS,
      829     1805                  TSTAMP=CUTS);
      830     1824        %FPT_RESCTL(FPTN=GET_PKSETS,
      831     1825                    MBSDISP=YES,
      832     1826                    RPSN=PSNLIST);
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:136  
      833     1843        %VLP_RPSN(FPTN=PSNLIST,N=128);
      834     1858
      835     1859
      836     1860
      837     1861        /**/
      838     1862        /* ENTREFS */
      839     1863        /**/
      840     1864    1   DCL FOI$SNAP      ENTRY(4) ALTRET;
      841     1865    1   DCL JMR$CHK_OLDJD ENTRY(1) ;
      842     1866    1   DCL JMU$ADD2RAQ   ENTRY(3);
      843     1867    1   DCL JMU$ADD2Q     ENTRY(3);
      844     1868
      845     1869
      846     1870
      847     1871        /**/
      848     1872        /* SUBS */
      849     1873        /**/
      850     1874        %SUB JM$IF  = IF$->JM$IF;
      851     1875        %SUB JM$QSN = PKSET$->JM$QSN;
      852     1876        %EJECT;
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:137  
      853     1877        /* For jobs which specified DEFER, get the current uts (CUTS),     */
      854     1878        /* and add the job to the 'RUNAFTER' queue if its DEFER time       */
      855     1879        /* has not yet been reached.                                       */
      856     1880    1         IF JM$IF.FLG.RA THEN

   1880  2 000002   200003 470500                    LDP0    @IF$,,AUTO
         2 000003   000000 471500                    LDP1    0,,PR0
         2 000004   100013 236100                    LDQ     11,,PR1
         2 000005   002000 316007                    CANQ    1024,DL
         2 000006   000033 600000 2                  TZE     s:1892

      857     1881    2           DO;

      858     1882    2           CALL M$TIME(FPT_TIME);

   1882  2 000007   000002 630400 1                  EPPR0   FPT_TIME
         2 000010   020004 713400                    CLIMB   8196
         2 000011   402000 401760                    pmme    nvectors=5

      859     1883    2           IF JM$IF.RATIM > CUTS THEN

   1883  2 000012   200003 470500                    LDP0    @IF$,,AUTO
         2 000013   000000 471500                    LDP1    0,,PR0
         2 000014   000000 236000 1                  LDQ     CUTS
         2 000015   100026 116100                    CMPQ    22,,PR1
         2 000016   000033 603000 2                  TRC     s:1892

      860     1884    3             DO;

      861     1885    3             CALL JMU$ADD2RAQ(0,JM_Q$WR,IF$);

   1885  2 000017   200003 236100                    LDQ     @IF$,,AUTO
         2 000020   200012 756100                    STQ     PKSET$+3,,AUTO
         2 000021   000000 237000 3                  LDAQ    0
         2 000022   200010 757100                    STAQ    PKSET$+1,,AUTO
         2 000023   200010 630500                    EPPR0   PKSET$+1,,AUTO
         2 000024   000021 631400 xsym               EPPR1   B_VECTNIL+17
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:138  
         2 000025   000000 701000 xent               TSX1    JMU$ADD2RAQ
         2 000026   000000 011000                    NOP     0

      862     1886    3             QNUM = JM_Q$WR;

   1886  2 000027   000002 235007                    LDA     2,DL
         2 000030   200004 470500                    LDP0    @QNUM,,AUTO
         2 000031   000000 755100                    STA     0,,PR0

      863     1887    3             RETURN;

   1887  2 000032   000000 702200 xent               TSX2  ! X66_ARET

      864     1888    3             END;
      865     1889    2           END;
      866     1890        /* Check for job id - final stepcc type of dependency. If specified */
      867     1891        /* then put this job on the job id dependency queue.                */
      868     1892    1         IF (JM$IF.FLG.O3 AND (JM$IF.UNSAT_COUNT > 0)) THEN

   1892  2 000033   100013 236100                    LDQ     11,,PR1
         2 000034   100000 316007                    CANQ    32768,DL
         2 000035   000061 600000 2                  TZE     s:1903
         2 000036   100006 236100                    LDQ     6,,PR1
         2 000037   000777 316003                    CANQ    511,DU
         2 000040   000061 600000 2                  TZE     s:1903

      869     1893    2           DO;

      870     1894    2           CALL JMU$ADD2Q(0,JM_Q$JD,IF$);

   1894  2 000041   200003 236100                    LDQ     @IF$,,AUTO
         2 000042   200012 756100                    STQ     PKSET$+3,,AUTO
         2 000043   000002 237000 3                  LDAQ    2
         2 000044   200010 757100                    STAQ    PKSET$+1,,AUTO
         2 000045   200010 630500                    EPPR0   PKSET$+1,,AUTO
         2 000046   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000047   000000 701000 xent               TSX1    JMU$ADD2Q
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:139  
         2 000050   000000 011000                    NOP     0

      871     1895        /* Now, let's check to see if any already completed jobs have this */
      872     1896        /* job's dependency conditions.                                    */
      873     1897    2           CALL JMR$CHK_OLDJD(IF$);

   1897  2 000051   200003 630500                    EPPR0   @IF$,,AUTO
         2 000052   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000053   000000 701000 xent               TSX1    JMR$CHK_OLDJD
         2 000054   000000 011000                    NOP     0

      874     1898    2           QNUM = JM_Q$JD;

   1898  2 000055   000004 235007                    LDA     4,DL
         2 000056   200004 470500                    LDP0    @QNUM,,AUTO
         2 000057   000000 755100                    STA     0,,PR0

      875     1899    2           RETURN;

   1899  2 000060   000000 702200 xent               TSX2  ! X66_ARET

      876     1900    2           END;
      877     1901        /* If the job can't run in any of the currently defined partitions */
      878     1902        /* then put it on the 'waiting for useable partition' queue.       */
      879     1903    1         IF JM$IF.PART = '0'B THEN

   1903  2 000061   100005 236100                    LDQ     5,,PR1
         2 000062   177777 316007                    CANQ    65535,DL
         2 000063   000100 601000 2                  TNZ     s:1911

      880     1904    2           DO;

      881     1905    2           CALL JMU$ADD2Q(0,JM_Q$WP,IF$);

   1905  2 000064   200003 236100                    LDQ     @IF$,,AUTO
         2 000065   200012 756100                    STQ     PKSET$+3,,AUTO
         2 000066   000004 237000 3                  LDAQ    4
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:140  
         2 000067   200010 757100                    STAQ    PKSET$+1,,AUTO
         2 000070   200010 630500                    EPPR0   PKSET$+1,,AUTO
         2 000071   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000072   000000 701000 xent               TSX1    JMU$ADD2Q
         2 000073   000000 011000                    NOP     0

      882     1906    2           QNUM = JM_Q$WP;               /* Return assigned queue #            */

   1906  2 000074   000001 235007                    LDA     1,DL
         2 000075   200004 470500                    LDP0    @QNUM,,AUTO
         2 000076   000000 755100                    STA     0,,PR0

      883     1907    2           RETURN;

   1907  2 000077   000000 702200 xent               TSX2  ! X66_ARET

      884     1908    2           END;
      885     1909        /* See that all of the job's required shared packsets are currently
      886     1910           mounted (as shared) before we will consider it to be schedulable */
      887     1911    1         CALL M$MBS(GET_PKSETS) ALTRET(MMBS_ERR);

   1911  2 000100   000016 630400 1                  EPPR0   GET_PKSETS
         2 000101   550001 713400                    CLIMB   alt,+53249
         2 000102   402400 401760                    pmme    nvectors=6
         2 000103   000166 702000 2                  TSX2    MMBS_ERR

      888     1912    1         PKSET$ = JM$IF.SLNK$;

   1912  2 000104   200003 470500                    LDP0    @IF$,,AUTO
         2 000105   000000 471500                    LDP1    0,,PR0
         2 000106   100004 236100                    LDQ     4,,PR1
         2 000107   200007 756100                    STQ     PKSET$,,AUTO

      889     1913    2           DO WHILE (PKSET$ ~= ADDR(NIL));

   1913  2 000110   000137 710000 2                  TRA     s:1921

PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:141  
      890     1914    3             DO I = 0 TO PSNLIST.NN# - 1;

   1914  2 000111   200005 450100                    STZ     I,,AUTO
         2 000112   000131 710000 2                  TRA     s:1918+1

      891     1915    3             IF (JM$QSN.TXT = PSNLIST.RPLIST.PSN#(I)) AND

   1915  2 000113   200005 235100                    LDA     I,,AUTO
         2 000114   000004 735000                    ALS     4
         2 000115   200007 470500                    LDP0    PKSET$,,AUTO
         2 000116   040005 106500                    CMPC    fill='040'O
         2 000117   000000 000006                    ADSC9   0,,PR0                   cn=0,n=6
         2 000120   000042 000006 1                  ADSC9   PSNLIST+2,A              cn=0,n=6
         2 000121   000130 601000 2                  TNZ     s:1918
         2 000122   200005 236100                    LDQ     I,,AUTO
         2 000123   000002 736000                    QLS     2
         2 000124   000043 236006 1                  LDQ     PSNLIST+3,QL
         2 000125   777000 376007                    ANQ     -512,DL
         2 000126   001000 116007                    CMPQ    512,DL
         2 000127   000135 600000 2                  TZE     NXT_PSN

      892     1916    3             (PSNLIST.RPLIST.USAGE#(I) = %SHARED#)
      893     1917    3             THEN GOTO NXT_PSN;
      894     1918    3             END;

   1918  2 000130   200005 054100                    AOS     I,,AUTO
         2 000131   200005 236100                    LDQ     I,,AUTO
         2 000132   000040 116000 1                  CMPQ    PSNLIST
         2 000133   000113 604000 2                  TMI     s:1915

      895     1919    2           GOTO PKSET_NOT_UP;

   1919  2 000134   000172 710000 2                  TRA     PKSET_NOT_UP

      896     1920    2   NXT_PSN: PKSET$ = JM$QSN.NXT$;

   1920  2 000135   000002 236100       NXT_PSN      LDQ     2,,PR0
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:142  
         2 000136   200007 756100                    STQ     PKSET$,,AUTO

      897     1921    2           END;

   1921  2 000137   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000140   000111 601000 2                  TNZ     s:1914

      898     1922        /* If we got here, the job is schedulable. Place it onto the proper */
      899     1923        /* priority chain.                                                  */
      900     1924    1         PRIO = JM_Q$P0 + JM$IF.PRIO;

   1924  2 000141   200003 470500                    LDP0    @IF$,,AUTO
         2 000142   000000 471500                    LDP1    0,,PR0
         2 000143   100013 236100                    LDQ     11,,PR1
         2 000144   000022 772000                    QRL     18
         2 000145   000777 376007                    ANQ     511,DL
         2 000146   000006 036007                    ADLQ    6,DL
         2 000147   200006 756100                    STQ     PRIO,,AUTO

      901     1925    1         CALL JMU$ADD2Q(0,PRIO,IF$);

   1925  2 000150   200003 236100                    LDQ     @IF$,,AUTO
         2 000151   200012 756100                    STQ     PKSET$+3,,AUTO
         2 000152   200006 631500                    EPPR1   PRIO,,AUTO
         2 000153   200011 451500                    STP1    PKSET$+2,,AUTO
         2 000154   000000 236000 3                  LDQ     0
         2 000155   200010 756100                    STQ     PKSET$+1,,AUTO
         2 000156   200010 630500                    EPPR0   PKSET$+1,,AUTO
         2 000157   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000160   000000 701000 xent               TSX1    JMU$ADD2Q
         2 000161   000000 011000                    NOP     0

      902     1926    1         QNUM = PRIO;

   1926  2 000162   200004 470500                    LDP0    @QNUM,,AUTO
         2 000163   200006 235100                    LDA     PRIO,,AUTO
         2 000164   000000 755100                    STA     0,,PR0
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:143  

      903     1927    1         RETURN;

   1927  2 000165   000000 702200 xent               TSX2  ! X66_ARET

      904     1928        /**/
      905     1929    1   MMBS_ERR:
      906     1930        /*S*    SCREECH_CODE:   JMU-S$JM240
      907     1931                TYPE:   SNAP
      908     1932                MESSAGE: Error on M$MBS requesting current mounted packsets. */
      909     1933    1         CALL FOI$SNAP (%S$JM240,F_JM,M_U);

   1933  2 000166   000011 630400 3     MMBS_ERR     EPPR0   9
         2 000167   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000170   000000 701000 xent               TSX1    FOI$SNAP
         2 000171   000000 011000                    NOP     0

      910     1934    1   PKSET_NOT_UP:
      911     1935        /* Place this job on the waiting-for-packset queue */
      912     1936    1         CALL JMU$ADD2Q(0,JM_Q$DP,IF$);

   1936  2 000172   200003 236100       PKSET_NOT_UP LDQ     @IF$,,AUTO
         2 000173   200012 756100                    STQ     PKSET$+3,,AUTO
         2 000174   000014 237000 3                  LDAQ    12
         2 000175   200010 757100                    STAQ    PKSET$+1,,AUTO
         2 000176   200010 630500                    EPPR0   PKSET$+1,,AUTO
         2 000177   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000200   000000 701000 xent               TSX1    JMU$ADD2Q
         2 000201   000000 011000                    NOP     0

      913     1937    1         QNUM = JM_Q$DP;

   1937  2 000202   000005 235007                    LDA     5,DL
         2 000203   200004 470500                    LDP0    @QNUM,,AUTO
         2 000204   000000 755100                    STA     0,,PR0

      914     1938    1         RETURN;
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:144  

   1938  2 000205   000000 702200 xent               TSX2  ! X66_ARET
      915     1939        /**/
      916     1940        /**/
      917     1941    1   END JMU$SELECTQ;
      918     1942        %EOD;

PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:145  
--  Include file information  --

   JM_SUBS_C.:E05TOU  is referenced.
   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   JM_SCODE_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JMU$SELECTQ.
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:146  

 **** Variables and constants ****

  ****  Section 001  Data  JMU$SELECTQ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d UBIN        r     1 CUTS                       2-0-0/d STRC(432)   r     1 FPT_TIME
    16-0-0/d STRC(648)   r     1 GET_PKSETS                40-0-0/d STRC(18648) r     1 PSNLIST

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @IF$                       4-0-0/w PTR         r     1 @QNUM
     5-0-0/w SBIN        r     1 I                         *0-0-0/w PTR         r     1 IF$
     7-0-0/w PTR         r     1 PKSET$                     6-0-0/w SBIN        r     1 PRIO
    *0-0-0/w SBIN        r     1 QNUM

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(1665)  r     1 JM$IF                      0-0-0/w STRC(108)   r     1 JM$QSN


   Procedure JMU$SELECTQ requires 134 words for executable code.
   Procedure JMU$SELECTQ requires 12 words of local(AUTO) storage.
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:147  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:148  
          MINI XREF LISTING

CUTS
      1802**DCL      1820--DCLINIT  1883>>IF
FOI$SNAP
      1864**DCL-ENT  1933--CALL
FPT_TIME
      1816**DCL      1882<>CALL
FPT_TIME.V
      1820**DCL      1816--DCLINIT
GET_PKSETS
      1837**DCL      1911<>CALL
GET_PKSETS.V
      1839**DCL      1837--DCLINIT
I
      1793**DCL      1914<<DOINDEX  1915>>IF       1915>>IF
IF$
      1621**DCL         9--PROC     1880>>IF       1883>>IF       1885<>CALL     1892>>IF       1892>>IF
      1894<>CALL     1897<>CALL     1903>>IF       1905<>CALL     1912>>ASSIGN   1924>>ASSIGN   1925<>CALL
      1936<>CALL
JM$IF.FLG.O3
      1694**DCL      1892>>IF
JM$IF.FLG.RA
      1704**DCL      1880>>IF
JM$IF.JNL
      1772**DCL      1784--IMP-SIZ
JM$IF.PART
      1659**DCL      1903>>IF
JM$IF.PRIO
      1686**DCL      1924>>ASSIGN
JM$IF.RATIM
      1726**DCL      1883>>IF
JM$IF.SLNK$
      1654**DCL      1912>>ASSIGN
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:149  
JM$IF.UNSAT_COUNT
      1663**DCL      1892>>IF
JM$QRIT.VNUM
      1561**DCL      1563--REDEF
JM$QSN.NXT$
      1607**DCL      1920>>ASSIGN
JM$QSN.TXT
      1596**DCL      1915>>IF
JMC_CH
      1420**DCL      1421--REDEF
JMR$CHK_OLDJD
      1865**DCL-ENT  1897--CALL
JMU$ADD2Q
      1867**DCL-ENT  1894--CALL     1905--CALL     1925--CALL     1936--CALL
JMU$ADD2RAQ
      1866**DCL-ENT  1885--CALL
M$MBS
        33**DCL-ENT  1911--CALL
M$TIME
        93**DCL-ENT  1882--CALL
MMBS_ERR
      1933**LABEL    1911--CALLALT
NXT_PSN
      1920**LABEL    1917--GOTO
PKSET$
      1795**DCL      1912<<ASSIGN   1913>>DOWHILE  1915>>IF       1920<<ASSIGN   1920>>ASSIGN
PKSET_NOT_UP
      1936**LABEL    1919--GOTO
PRIO
      1794**DCL      1924<<ASSIGN   1925<>CALL     1926>>ASSIGN
PSNLIST
      1854**DCL      1838--DCLINIT
PSNLIST.NN#
      1854**DCL      1914>>DOINDEX
PSNLIST.RPLIST.PSN#
      1854**DCL      1915>>IF
PL6.E3A0      #007=JMU$SELECTQ File=JMU$UTIL.:E05TSI                             TUE 07/29/97 23:34 Page:150  
PSNLIST.RPLIST.USAGE#
      1855**DCL      1915>>IF
QNUM
      1622**DCL         9--PROC     1886<<ASSIGN   1898<<ASSIGN   1906<<ASSIGN   1926<<ASSIGN   1937<<ASSIGN

PL6.E3A0      #008=JMU$SETSEG File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:35 Page:151  
      919        1        /*T***********************************************************/
      920        2        /*T*                                                         */
      921        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      922        4        /*T*                                                         */
      923        5        /*T***********************************************************/
      924        6        /*F*   NAME:   JMU$SETSEG                                          */
      925        7        /*F*   PURPOSE: To set the SEGID field of a pointer to some value. */
      926        8        JMU$SETSEG: PROC(PTR$,SID);
      927        9    1   DCL PTR$ PTR;                           /* THE POINTER TO BE CHANGED          */
      928       10    1   DCL SID BIT(12);                        /* THE NEW SEGID VALUE                */
      929       11        /**/
      930       12    1   DCL SPTR$ PTR;
      931       13    1   DCL 1 B$PTR BASED ALIGNED,
      932       14    1         2 OFFSET UBIN(24) UNAL,
      933       15    1         2 SID BIT(12) UNAL;
      934       16        /**/
      935       17    1         SPTR$ = ADDR(PTR$);
      936       18    1         SPTR$->B$PTR.SID = SID;
      937       19    1         RETURN;
      938       20    1   END JMU$SETSEG;
      939       21        %EOD;

PL6.E3A0      #008=JMU$SETSEG File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:35 Page:152  
--  Include file information  --

   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure JMU$SETSEG.

   Procedure JMU$SETSEG requires 10 words for executable code.
   Procedure JMU$SETSEG requires 6 words of local(AUTO) storage.

PL6.E3A0      #008=JMU$SETSEG File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:35 Page:153  

 Object Unit name= JMU$SETSEG                                 File name= JMU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:35:09.28 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    10     12  JMU$SETSEG

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        2  JMU$SETSEG

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
PL6.E3A0      #008=JMU$SETSEG File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:35 Page:154  


      919        1        /*T***********************************************************/
      920        2        /*T*                                                         */
      921        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      922        4        /*T*                                                         */
      923        5        /*T***********************************************************/
      924        6        /*F*   NAME:   JMU$SETSEG                                          */
      925        7        /*F*   PURPOSE: To set the SEGID field of a pointer to some value. */
      926        8        JMU$SETSEG: PROC(PTR$,SID);

      8  0 000000   000000 700200 xent  JMU$SETSEG   TSX0  ! X66_AUTO_2
         0 000001   000006 000002                    ZERO    6,2

      927        9    1   DCL PTR$ PTR;                           /* THE POINTER TO BE CHANGED          */
      928       10    1   DCL SID BIT(12);                        /* THE NEW SEGID VALUE                */
      929       11        /**/
      930       12    1   DCL SPTR$ PTR;
      931       13    1   DCL 1 B$PTR BASED ALIGNED,
      932       14    1         2 OFFSET UBIN(24) UNAL,
      933       15    1         2 SID BIT(12) UNAL;
      934       16        /**/
      935       17    1         SPTR$ = ADDR(PTR$);

     17  0 000002   200003 236100                    LDQ     @PTR$,,AUTO
         0 000003   200005 756100                    STQ     SPTR$,,AUTO

      936       18    1         SPTR$->B$PTR.SID = SID;

     18  0 000004   200004 470500                    LDP0    @SID,,AUTO
         0 000005   200005 471500                    LDP1    SPTR$,,AUTO
         0 000006   003100 060500                    CSL     bolr='003'O
         0 000007   000000 000014                    BDSC    0,,PR0                   by=0,bit=0,n=12
         0 000010   100000 460014                    BDSC    0,,PR1                   by=2,bit=6,n=12

      937       19    1         RETURN;

     19  0 000011   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #008=JMU$SETSEG File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:35 Page:155  
      938       20    1   END JMU$SETSEG;
      939       21        %EOD;

PL6.E3A0      #008=JMU$SETSEG File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:35 Page:156  
--  Include file information  --

   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure JMU$SETSEG.
PL6.E3A0      #008=JMU$SETSEG File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:35 Page:157  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @PTR$                      4-0-0/w PTR         r     1 @SID
    *0-0-0/w PTR         r     1 PTR$                      *0-0-0/b BIT (12)    r     1 SID
     5-0-0/w PTR         r     1 SPTR$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 B$PTR


   Procedure JMU$SETSEG requires 10 words for executable code.
   Procedure JMU$SETSEG requires 6 words of local(AUTO) storage.
PL6.E3A0      #008=JMU$SETSEG File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:35 Page:158  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=JMU$SETSEG File=JMU$UTIL.:E05TSI                              TUE 07/29/97 23:35 Page:159  
          MINI XREF LISTING

B$PTR.SID
        15**DCL        18<<ASSIGN
PTR$
         9**DCL         8--PROC       17--ASSIGN
SID
        10**DCL         8--PROC       18>>ASSIGN
SPTR$
        12**DCL        17<<ASSIGN     18>>ASSIGN

PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:160  
      940        1        /*T***********************************************************/
      941        2        /*T*                                                         */
      942        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      943        4        /*T*                                                         */
      944        5        /*T***********************************************************/
      945        6        /*F*   NAME:   JMU$SET_PARTS                                       */
      946        7        /*F*   PURPOSE: To set the bits in JM$IF.PART corresponding to     */
      947        8        /*F*           the partitions into which the job can be placed.    */
      948        9        JMU$SET_PARTS: PROC (IF$);
      949       10        /**/
      950       11
      951       12
      952       13
      953       14        /**/
      954       15        /* INCLUDES */
      955       16        /**/
      956       17        %INCLUDE JM$STRUCT;                 /* MBS table structures.       */
      957      762        %INCLUDE JMC_DATA_R;                /* MBS-resident STATIC data.   */
      958      777        %INCLUDE B_SEGIDS_C;
      959     1316
      960     1317
      961     1318
      962     1319        /**/
      963     1320        /* PARAMETERS */
      964     1321        /**/
      965     1322    1   DCL IF$ PTR;
      966     1323
      967     1324
      968     1325
      969     1326        /**/
      970     1327        /* BASED STRUCTURES */
      971     1328        /**/
      972     1329        %JM_IF (FPTN=JM$IF,STCLASS=BASED);
      973     1487    1   DCL APTR$ PTR BASED ALIGNED;
      974     1488    1   DCL AWORD UBIN(36) BASED ALIGNED;
      975     1489        %JM_PART (FPTN=JM$PART,STCLASS=BASED);
      976     1544
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:161  
      977     1545
      978     1546
      979     1547        /**/
      980     1548        /* AUTO */
      981     1549        /**/
      982     1550    1   DCL PPTR$ PTR;
      983     1551    1   DCL I SBIN;
      984     1552    1   DCL J SBIN;
      985     1553    1   DCL PFLGS BIT(16);
      986     1554    1   DCL ABIT BIT(16);
      987     1555    1   DCL TIME_IN_MINUTES UBIN;
      988     1556
      989     1557
      990     1558
      991     1559        /**/
      992     1560        /* ENTREFS */
      993     1561        /**/
      994     1562    1   DCL JMU$SETSEG    ENTRY(2);
      995     1563
      996     1564
      997     1565
      998     1566        /**/
      999     1567        /* SUBS */
     1000     1568        /**/
     1001     1569        %SUB JM$PART  = PPTR$->JM$PART;
     1002     1570        /**/
     1003     1571        /**/
     1004     1572        /* First, get a pointer to the in-monitor partition tables by      */
     1005     1573        /* stuffing the segid of MBS's special descriptor#1 into the PTR.  */
     1006     1574    1         ABIT = '1000000000000000'B;     /* BIT FOR PARTITION #1               */
     1007     1575    1         PFLGS = '0'B;
     1008     1576
     1009     1577    2           DO I = 0 TO JMC_NPART$->AWORD - 1;
     1010     1578    2           PPTR$ = PINCRW(JMC_PPTR$,I);  /* -> to partition table ->  */
     1011     1579    2           PPTR$ = PPTR$->APTR$;         /* partition table entry ->  */
     1012     1580    2           CALL JMU$SETSEG(PPTR$,%SPCL1SID);
     1013     1581
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:162  
     1014     1582        /* Now that we can address a partition table entry, start checking */
     1015     1583        /* which partition(s) this job can be run in.                      */
     1016     1584        /* If the partition is LOCKed, forget it.                          */
     1017     1585    2           IF JM$PART.FLG.LOCK THEN GOTO NXTPART;
     1018     1586    2           IF JM$PART.MAX = 0 THEN GOTO NXTPART;
     1019     1587
     1020     1588        /* For TIMe:  if seconds were specified (!RES TIME=11:11),         */
     1021     1589        /* round up to the next minute.                                    */
     1022     1590    2           IF MOD(IF$->JM$IF.TIM / 100, 60) ~= 0 THEN
     1023     1591    2            TIME_IN_MINUTES = ( ( IF$->JM$IF.TIM / 6000 ) + 1 ) * 6000;
     1024     1592    2           ELSE TIME_IN_MINUTES = IF$->JM$IF.TIM;
     1025     1593    2           IF (TIME_IN_MINUTES < JM$PART.TL)
     1026     1594    2           OR (TIME_IN_MINUTES > JM$PART.TU) THEN
     1027     1595    2            GOTO NXTPART;
     1028     1596
     1029     1597        /* Do RESource checks against the partition definition.            */
     1030     1598    3             DO J = 0 TO JMC_NRES$->AWORD - 1;
     1031     1599    3             IF (IF$->JM$IF.RRT(J) < JM$PART.RMIN(J))
     1032     1600    3             OR (IF$->JM$IF.RRT(J) > JM$PART.RMAX(J)) THEN
     1033     1601    3              GOTO NXTPART;
     1034     1602    3             END;
     1035     1603
     1036     1604        /* If we got this far, we can run the job in this partition.       */
     1037     1605    2           PFLGS = PFLGS | ABIT;
     1038     1606
     1039     1607    2   NXTPART:
     1040     1608    2           ABIT = BINBIT(BITBIN(ABIT)/2,16);
     1041     1609    2           END;
     1042     1610
     1043     1611    1         IF$->JM$IF.PART  = PFLGS;
     1044     1612    1         RETURN;
     1045     1613
     1046     1614    1   END JMU$SET_PARTS;
     1047     1615        %EOD;

PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:163  
--  Include file information  --

   B_SEGIDS_C.:E05TOU  is referenced.
   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure JMU$SET_PARTS.

   Procedure JMU$SET_PARTS requires 112 words for executable code.
   Procedure JMU$SET_PARTS requires 14 words of local(AUTO) storage.

PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:164  

 Object Unit name= JMU$SET_PARTS                              File name= JMU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:35:12.92 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   112    160  JMU$SET_PARTS
    1  RoData even  none     2      2  JMU$SET_PARTS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        1  JMU$SET_PARTS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 JMU$SETSEG
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     JMC_CH                                JMC_NPART$                            JMC_NRES$
     JMC_PPTR$                             B_VECTNIL
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:165  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:166  


      940        1        /*T***********************************************************/
      941        2        /*T*                                                         */
      942        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      943        4        /*T*                                                         */
      944        5        /*T***********************************************************/
      945        6        /*F*   NAME:   JMU$SET_PARTS                                       */
      946        7        /*F*   PURPOSE: To set the bits in JM$IF.PART corresponding to     */
      947        8        /*F*           the partitions into which the job can be placed.    */
      948        9        JMU$SET_PARTS: PROC (IF$);

      9  0 000000   000000 700200 xent  JMU$SET_PAR* TSX0  ! X66_AUTO_1
         0 000001   000016 000001                    ZERO    14,1

      949       10        /**/
      950       11
      951       12
      952       13
      953       14        /**/
      954       15        /* INCLUDES */
      955       16        /**/
      956       17        %INCLUDE JM$STRUCT;                 /* MBS table structures.       */
      957      762        %INCLUDE JMC_DATA_R;                /* MBS-resident STATIC data.   */
      958      777        %INCLUDE B_SEGIDS_C;
      959     1316
      960     1317
      961     1318
      962     1319        /**/
      963     1320        /* PARAMETERS */
      964     1321        /**/
      965     1322    1   DCL IF$ PTR;
      966     1323
      967     1324
      968     1325
      969     1326        /**/
      970     1327        /* BASED STRUCTURES */
      971     1328        /**/
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:167  
      972     1329        %JM_IF (FPTN=JM$IF,STCLASS=BASED);
      973     1487    1   DCL APTR$ PTR BASED ALIGNED;
      974     1488    1   DCL AWORD UBIN(36) BASED ALIGNED;
      975     1489        %JM_PART (FPTN=JM$PART,STCLASS=BASED);
      976     1544
      977     1545
      978     1546
      979     1547        /**/
      980     1548        /* AUTO */
      981     1549        /**/
      982     1550    1   DCL PPTR$ PTR;
      983     1551    1   DCL I SBIN;
      984     1552    1   DCL J SBIN;
      985     1553    1   DCL PFLGS BIT(16);
      986     1554    1   DCL ABIT BIT(16);
      987     1555    1   DCL TIME_IN_MINUTES UBIN;
      988     1556
      989     1557
      990     1558
      991     1559        /**/
      992     1560        /* ENTREFS */
      993     1561        /**/
      994     1562    1   DCL JMU$SETSEG    ENTRY(2);
      995     1563
      996     1564
      997     1565
      998     1566        /**/
      999     1567        /* SUBS */
     1000     1568        /**/
     1001     1569        %SUB JM$PART  = PPTR$->JM$PART;
     1002     1570        /**/
     1003     1571        /**/
     1004     1572        /* First, get a pointer to the in-monitor partition tables by      */
     1005     1573        /* stuffing the segid of MBS's special descriptor#1 into the PTR.  */
     1006     1574    1         ABIT = '1000000000000000'B;     /* BIT FOR PARTITION #1               */

   1574  0 000002   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:168  
         0 000003   200010 756100                    STQ     ABIT,,AUTO

     1007     1575    1         PFLGS = '0'B;

   1575  0 000004   200007 450100                    STZ     PFLGS,,AUTO

     1008     1576
     1009     1577    2           DO I = 0 TO JMC_NPART$->AWORD - 1;

   1577  0 000005   200005 450100                    STZ     I,,AUTO
         0 000006   000143 710000 0                  TRA     s:1609+1

     1010     1578    2           PPTR$ = PINCRW(JMC_PPTR$,I);  /* -> to partition table ->  */

   1578  0 000007   200005 236100                    LDQ     I,,AUTO
         0 000010   000022 736000                    QLS     18
         0 000011   000000 036000 xsym               ADLQ    JMC_PPTR$
         0 000012   200004 756100                    STQ     PPTR$,,AUTO

     1011     1579    2           PPTR$ = PPTR$->APTR$;         /* partition table entry ->  */

   1579  0 000013   200004 470500                    LDP0    PPTR$,,AUTO
         0 000014   000000 236100                    LDQ     0,,PR0
         0 000015   200004 756100                    STQ     PPTR$,,AUTO

     1012     1580    2           CALL JMU$SETSEG(PPTR$,%SPCL1SID);

   1580  0 000016   000001 236000 1                  LDQ     1
         0 000017   200013 756100                    STQ     TIME_IN_MINUTES+2,,AUTO
         0 000020   200004 630500                    EPPR0   PPTR$,,AUTO
         0 000021   200012 450500                    STP0    TIME_IN_MINUTES+1,,AUTO
         0 000022   200012 630500                    EPPR0   TIME_IN_MINUTES+1,,AUTO
         0 000023   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000024   000000 701000 xent               TSX1    JMU$SETSEG
         0 000025   000000 011000                    NOP     0

     1013     1581
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:169  
     1014     1582        /* Now that we can address a partition table entry, start checking */
     1015     1583        /* which partition(s) this job can be run in.                      */
     1016     1584        /* If the partition is LOCKed, forget it.                          */
     1017     1585    2           IF JM$PART.FLG.LOCK THEN GOTO NXTPART;

   1585  0 000026   200004 470500                    LDP0    PPTR$,,AUTO
         0 000027   000004 236100                    LDQ     4,,PR0
         0 000030   000001 316007                    CANQ    1,DL
         0 000031   000135 601000 0                  TNZ     NXTPART

     1018     1586    2           IF JM$PART.MAX = 0 THEN GOTO NXTPART;

   1586  0 000032   000003 236100                    LDQ     3,,PR0
         0 000033   777000 316003                    CANQ    -512,DU
         0 000034   000135 600000 0                  TZE     NXTPART

     1019     1587
     1020     1588        /* For TIMe:  if seconds were specified (!RES TIME=11:11),         */
     1021     1589        /* round up to the next minute.                                    */
     1022     1590    2           IF MOD(IF$->JM$IF.TIM / 100, 60) ~= 0 THEN

   1590  0 000035   200003 471500                    LDP1    @IF$,,AUTO
         0 000036   100000 473500                    LDP3    0,,PR1
         0 000037   300012 236100                    LDQ     10,,PR3
         0 000040   000001 772000                    QRL     1
         0 000041   000062 506007                    DIV     50,DL
         0 000042   000044 737000                    LLS     36
         0 000043   000043 773000                    LRL     35
         0 000044   000074 507007                    DVF     60,DL
         0 000045   000000 116003                    CMPQ    0,DU
         0 000046   000056 600000 0                  TZE     s:1592

     1023     1591    2            TIME_IN_MINUTES = ( ( IF$->JM$IF.TIM / 6000 ) + 1 ) * 6000;

   1591  0 000047   300012 236100                    LDQ     10,,PR3
         0 000050   000001 772000                    QRL     1
         0 000051   005670 506007                    DIV     3000,DL
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:170  
         0 000052   013560 402007                    MPY     6000,DL
         0 000053   013560 036007                    ADLQ    6000,DL
         0 000054   200011 756100                    STQ     TIME_IN_MINUTES,,AUTO
         0 000055   000060 710000 0                  TRA     s:1593

     1024     1592    2           ELSE TIME_IN_MINUTES = IF$->JM$IF.TIM;

   1592  0 000056   300012 235100                    LDA     10,,PR3
         0 000057   200011 755100                    STA     TIME_IN_MINUTES,,AUTO

     1025     1593    2           IF (TIME_IN_MINUTES < JM$PART.TL)

   1593  0 000060   200011 236100                    LDQ     TIME_IN_MINUTES,,AUTO
         0 000061   000000 116100                    CMPQ    0,,PR0
         0 000062   000135 602000 0                  TNC     NXTPART
         0 000063   000001 116100                    CMPQ    1,,PR0
         0 000064   000066 600000 0                  TZE     s:1598
         0 000065   000135 603000 0                  TRC     NXTPART

     1026     1594    2           OR (TIME_IN_MINUTES > JM$PART.TU) THEN
     1027     1595    2            GOTO NXTPART;
     1028     1596
     1029     1597        /* Do RESource checks against the partition definition.            */
     1030     1598    3             DO J = 0 TO JMC_NRES$->AWORD - 1;

   1598  0 000066   200006 450100                    STZ     J,,AUTO
         0 000067   000121 710000 0                  TRA     s:1602+1

     1031     1599    3             IF (IF$->JM$IF.RRT(J) < JM$PART.RMIN(J))

   1599  0 000070   200003 470500                    LDP0    @IF$,,AUTO
         0 000071   000000 471500                    LDP1    0,,PR0
         0 000072   200006 235100                    LDA     J,,AUTO
         0 000073   000001 735000                    ALS     1
         0 000074   200004 473500                    LDP3    PPTR$,,AUTO
         0 000075   000100 101505                    MRL     fill='000'O
         0 000076   300015 000002                    ADSC9   13,A,PR3                 cn=0,n=2
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:171  
         0 000077   200012 000004                    ADSC9   TIME_IN_MINUTES+1,,AUTO  cn=0,n=4
         0 000100   000100 101505                    MRL     fill='000'O
         0 000101   100041 000002                    ADSC9   33,A,PR1                 cn=0,n=2
         0 000102   200013 000004                    ADSC9   TIME_IN_MINUTES+2,,AUTO  cn=0,n=4
         0 000103   200013 236100                    LDQ     TIME_IN_MINUTES+2,,AUTO
         0 000104   200012 116100                    CMPQ    TIME_IN_MINUTES+1,,AUTO
         0 000105   000135 604000 0                  TMI     NXTPART
         0 000106   000000 471500                    LDP1    0,,PR0
         0 000107   000100 101505                    MRL     fill='000'O
         0 000110   100041 000002                    ADSC9   33,A,PR1                 cn=0,n=2
         0 000111   200014 000004                    ADSC9   TIME_IN_MINUTES+3,,AUTO  cn=0,n=4
         0 000112   000100 101505                    MRL     fill='000'O
         0 000113   300007 000002                    ADSC9   7,A,PR3                  cn=0,n=2
         0 000114   200015 000004                    ADSC9   TIME_IN_MINUTES+4,,AUTO  cn=0,n=4
         0 000115   200015 236100                    LDQ     TIME_IN_MINUTES+4,,AUTO
         0 000116   200014 116100                    CMPQ    TIME_IN_MINUTES+3,,AUTO
         0 000117   000135 604000 0                  TMI     NXTPART

     1032     1600    3             OR (IF$->JM$IF.RRT(J) > JM$PART.RMAX(J)) THEN
     1033     1601    3              GOTO NXTPART;
     1034     1602    3             END;

   1602  0 000120   200006 054100                    AOS     J,,AUTO
         0 000121   000000 470400 xsym               LDP0    JMC_NRES$
         0 000122   200006 236100                    LDQ     J,,AUTO
         0 000123   000070 604000 0                  TMI     s:1599
         0 000124   000000 116100                    CMPQ    0,,PR0
         0 000125   000070 602000 0                  TNC     s:1599

     1035     1603
     1036     1604        /* If we got this far, we can run the job in this partition.       */
     1037     1605    2           PFLGS = PFLGS | ABIT;

   1605  0 000126   200010 236100                    LDQ     ABIT,,AUTO
         0 000127   777774 376003                    ANQ     -4,DU
         0 000130   200012 756100                    STQ     TIME_IN_MINUTES+1,,AUTO
         0 000131   200007 236100                    LDQ     PFLGS,,AUTO
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:172  
         0 000132   777774 376003                    ANQ     -4,DU
         0 000133   200012 276100                    ORQ     TIME_IN_MINUTES+1,,AUTO
         0 000134   200007 756100                    STQ     PFLGS,,AUTO

     1038     1606
     1039     1607    2   NXTPART:
     1040     1608    2           ABIT = BINBIT(BITBIN(ABIT)/2,16);

   1608  0 000135   200010 236100       NXTPART      LDQ     ABIT,,AUTO
         0 000136   000024 772000                    QRL     20
         0 000137   000001 772000                    QRL     1
         0 000140   000024 736000                    QLS     20
         0 000141   200010 756100                    STQ     ABIT,,AUTO

     1041     1609    2           END;

   1609  0 000142   200005 054100                    AOS     I,,AUTO
         0 000143   000000 470400 xsym               LDP0    JMC_NPART$
         0 000144   200005 236100                    LDQ     I,,AUTO
         0 000145   000007 604000 0                  TMI     s:1578
         0 000146   000000 116100                    CMPQ    0,,PR0
         0 000147   000007 602000 0                  TNC     s:1578

     1042     1610
     1043     1611    1         IF$->JM$IF.PART  = PFLGS;

   1611  0 000150   200003 471500                    LDP1    @IF$,,AUTO
         0 000151   100000 473500                    LDP3    0,,PR1
         0 000152   200007 236100                    LDQ     PFLGS,,AUTO
         0 000153   000024 772000                    QRL     20
         0 000154   300005 676100                    ERQ     5,,PR3
         0 000155   177777 376007                    ANQ     65535,DL
         0 000156   300005 656100                    ERSQ    5,,PR3

     1044     1612    1         RETURN;

   1612  0 000157   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:173  
     1045     1613
     1046     1614    1   END JMU$SET_PARTS;
     1047     1615        %EOD;

PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:174  
--  Include file information  --

   B_SEGIDS_C.:E05TOU  is referenced.
   JMC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure JMU$SET_PARTS.
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:175  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @IF$                      10-0-0/b BIT (16)    r     1 ABIT
     5-0-0/w SBIN        r     1 I                         *0-0-0/w PTR         r     1 IF$
     6-0-0/w SBIN        r     1 J                          7-0-0/b BIT (16)    r     1 PFLGS
     4-0-0/w PTR         r     1 PPTR$                     11-0-0/w UBIN        r     1 TIME_IN_MINUTES

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 JMC_NPART$                 0-0-0/w PTR         r     1 JMC_NRES$
     0-0-0/w PTR         r     1 JMC_PPTR$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 APTR$                      0-0-0/w UBIN        r     1 AWORD
     0-0-0/w ASTR(1665)  r     1 JM$IF                      0-0-0/w STRC(684)   r     1 JM$PART


   Procedure JMU$SET_PARTS requires 112 words for executable code.
   Procedure JMU$SET_PARTS requires 14 words of local(AUTO) storage.
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:176  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:177  
          MINI XREF LISTING

ABIT
      1554**DCL      1574<<ASSIGN   1605>>ASSIGN   1608<<ASSIGN   1608>>ASSIGN
APTR$
      1487**DCL      1579>>ASSIGN
AWORD
      1488**DCL      1577>>DOINDEX  1598>>DOINDEX
I
      1551**DCL      1577<<DOINDEX  1578>>ASSIGN
IF$
      1322**DCL         9--PROC     1590>>IF       1591>>ASSIGN   1592>>ASSIGN   1599>>IF       1599>>IF
      1611>>ASSIGN
J
      1552**DCL      1598<<DOINDEX  1599>>IF       1599>>IF       1599>>IF       1599>>IF
JM$IF.JNL
      1472**DCL      1484--IMP-SIZ
JM$IF.PART
      1359**DCL      1611<<ASSIGN
JM$IF.RRT
      1458**DCL      1599>>IF       1599>>IF
JM$IF.TIM
      1380**DCL      1590>>IF       1591>>ASSIGN   1592>>ASSIGN
JM$PART.FLG.LOCK
      1529**DCL      1585>>IF
JM$PART.MAX
      1515**DCL      1586>>IF
JM$PART.RMAX
      1538**DCL      1599>>IF
JM$PART.RMIN
      1541**DCL      1599>>IF
JM$PART.TL
      1509**DCL      1593>>IF
JM$PART.TU
PL6.E3A0      #009=JMU$SET_PARTS File=JMU$UTIL.:E05TSI                           TUE 07/29/97 23:35 Page:178  
      1511**DCL      1593>>IF
JMC_CH
       770**DCL       771--REDEF
JMC_NPART$
       775**DCL      1577>>DOINDEX
JMC_NRES$
       775**DCL      1598>>DOINDEX
JMC_PPTR$
       775**DCL      1578>>ASSIGN
JMU$SETSEG
      1562**DCL-ENT  1580--CALL
NXTPART
      1608**LABEL    1585--GOTO     1586--GOTO     1595--GOTO     1601--GOTO
PFLGS
      1553**DCL      1575<<ASSIGN   1605<<ASSIGN   1605>>ASSIGN   1611>>ASSIGN
PPTR$
      1550**DCL      1578<<ASSIGN   1579<<ASSIGN   1579>>ASSIGN   1580<>CALL     1585>>IF       1586>>IF
      1593>>IF       1593>>IF       1599>>IF       1599>>IF
TIME_IN_MINUTES
      1555**DCL      1591<<ASSIGN   1592<<ASSIGN   1593>>IF       1593>>IF

PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:179  
     1048        1        /*T***********************************************************/
     1049        2        /*T*                                                         */
     1050        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1051        4        /*T*                                                         */
     1052        5        /*T***********************************************************/
     1053        6        /**/
     1054        7        /*F*    NAME:   JMU$WRITE_STATS
     1055        8                PURPOSE: To write the job status file whenever a job is
     1056        9                        deleted, canceled, deleted due to unmet FOLLOW
     1057       10                        condition,etc. (i.e. when a submitted job is
     1058       11                        removed from MBS without ever running).            */
     1059       12        JMU$WRITE_STATS: PROC(IF$);
     1060       13
     1061       14
     1062       15
     1063       16        /**/
     1064       17        /* INCLUDES */
     1065       18        /**/
     1066       19        %INCLUDE U$JIT_C;
     1067      205        %INCLUDE CP_6;
     1068      286        %INCLUDE XSJ_MAC_C;
     1069      365        %INCLUDE XSJ_SUBS_C;
     1070      392        %INCLUDE JM$STRUCT;
     1071     1137        %INCLUDE JM_SUBS_C;
     1072     1243        %SUB F_JM='1215'O;
     1073     1244        %SUB M_U='25'O;
     1074     1245
     1075     1246
     1076     1247
     1077     1248        /**/
     1078     1249        /* PARAMETERS */
     1079     1250        /**/
     1080     1251    1   DCL IF$ PTR;
     1081     1252
     1082     1253
     1083     1254
     1084     1255        /**/
PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:180  
     1085     1256        /* DCBS */
     1086     1257        /**/
     1087     1258    1   DCL M$STATUS   DCB;
     1088     1259
     1089     1260
     1090     1261
     1091     1262        /**/
     1092     1263        /* BASED */
     1093     1264        /**/
     1094     1265        %JM_IF (FPTN=JM$IF,STCLASS=BASED);
     1095     1423
     1096     1424
     1097     1425
     1098     1426        /**/
     1099     1427        /* STATIC */
     1100     1428        /**/
     1101     1429    1   DCL CUTS UBIN WORD STATIC DALIGNED;
     1102     1430        %XSJ_JOBINFO;
     1103     1445        %XSJ_PARAM(FPTN=INFO_PARAM,
     1104     1446                   DCB=M$STATUS,
     1105     1447                   TYPE=%TYP_INFO#);
     1106     1464        %FPT_TIME(SOURCE=CLOCK,
     1107     1465                  DEST=UTS,
     1108     1466                  TSTAMP=CUTS);
     1109     1485
     1110     1486
     1111     1487
     1112     1488        /**/
     1113     1489        /* SYMREFS */
     1114     1490        /**/
     1115     1491    1   DCL B$JIT$ PTR SYMREF;
     1116     1492
     1117     1493
     1118     1494
     1119     1495        /**/
     1120     1496        /* ENTREFS */
     1121     1497        /**/
PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:181  
     1122     1498    1   DCL FOI$SNAP  ENTRY(4) ALTRET;
     1123     1499    1   DCL XSJ$WRITE ENTRY(1) ALTRET;
     1124     1500
     1125     1501
     1126     1502
     1127     1503        /**/
     1128     1504        /* SUBS */
     1129     1505        /**/
     1130     1506        %SUB JM$IF = IF$->JM$IF;
     1131     1507        /**/
     1132     1508    1         XSJ_JOBINFO = '0'B;
     1133     1509    1         CALL M$TIME (FPT_TIME) ALTRET(TIMEFAIL);
     1134     1510    1         XSJ_JOBINFO.OFF_TIME#=CUTS;
     1135     1511    1   TIMEFAIL:;
     1136     1512    1         XSJ_JOBINFO.STATUS# = JM$IF.STATUS;
     1137     1513    1         XSJ_JOBINFO.ACCT# = JM$IF.ACCT;
     1138     1514    1         INFO_PARAM.BUF_ = VECTOR(XSJ_JOBINFO);
     1139     1515    1         INFO_PARAM.SYSID# = JM$IF.SYSID;
     1140     1516    1         CALL XSJ$WRITE(INFO_PARAM) ALTRET(IGNORE);
     1141     1517    1   IGNORE:;
     1142     1518    1         RETURN;
     1143     1519        /**/
     1144     1520    1   END JMU$WRITE_STATS;

PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:182  
--  Include file information  --

   JM_SUBS_C.:E05TOU  is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   XSJ_SUBS_C.:E05TOU  is referenced.
   XSJ_MAC_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   U$JIT_C.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JMU$WRITE_STATS.

   Procedure JMU$WRITE_STATS requires 29 words for executable code.
   Procedure JMU$WRITE_STATS requires 4 words of local(AUTO) storage.

    No errors detected in file JMU$UTIL.:E05TSI    .

PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:183  

 Object Unit name= JMU$WRITE_STATS                            File name= JMU$UTIL.:E05TOU
 UTS= JUL 29 '97 23:35:30.48 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$STATUS
    2   Data  even  none    28     34  JMU$WRITE_STATS
    3   Proc  even  none    29     35  JMU$WRITE_STATS
    4  RoData even  none     3      3  JMU$WRITE_STATS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        1  JMU$WRITE_STATS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 XSJ$WRITE
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:184  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$STATUS                              B$JIT$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:185  


     1048        1        /*T***********************************************************/
     1049        2        /*T*                                                         */
     1050        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1051        4        /*T*                                                         */
     1052        5        /*T***********************************************************/
     1053        6        /**/
     1054        7        /*F*    NAME:   JMU$WRITE_STATS
     1055        8                PURPOSE: To write the job status file whenever a job is
     1056        9                        deleted, canceled, deleted due to unmet FOLLOW
     1057       10                        condition,etc. (i.e. when a submitted job is
     1058       11                        removed from MBS without ever running).            */
     1059       12        JMU$WRITE_STATS: PROC(IF$);

     12  3 000000   000000 700200 xent  JMU$WRITE_S* TSX0  ! X66_AUTO_1
         3 000001   000004 000001                    ZERO    4,1

     1060       13
     1061       14
     1062       15
     1063       16        /**/
     1064       17        /* INCLUDES */
     1065       18        /**/
     1066       19        %INCLUDE U$JIT_C;
     1067      205        %INCLUDE CP_6;
     1068      286        %INCLUDE XSJ_MAC_C;
     1069      365        %INCLUDE XSJ_SUBS_C;
     1070      392        %INCLUDE JM$STRUCT;
     1071     1137        %INCLUDE JM_SUBS_C;
     1072     1243        %SUB F_JM='1215'O;
     1073     1244        %SUB M_U='25'O;
     1074     1245
     1075     1246
     1076     1247
     1077     1248        /**/
     1078     1249        /* PARAMETERS */
     1079     1250        /**/
PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:186  
     1080     1251    1   DCL IF$ PTR;
     1081     1252
     1082     1253
     1083     1254
     1084     1255        /**/
     1085     1256        /* DCBS */
     1086     1257        /**/
     1087     1258    1   DCL M$STATUS   DCB;
     1088     1259
     1089     1260
     1090     1261
     1091     1262        /**/
     1092     1263        /* BASED */
     1093     1264        /**/
     1094     1265        %JM_IF (FPTN=JM$IF,STCLASS=BASED);
     1095     1423
     1096     1424
     1097     1425
     1098     1426        /**/
     1099     1427        /* STATIC */
     1100     1428        /**/
     1101     1429    1   DCL CUTS UBIN WORD STATIC DALIGNED;
     1102     1430        %XSJ_JOBINFO;
     1103     1445        %XSJ_PARAM(FPTN=INFO_PARAM,
     1104     1446                   DCB=M$STATUS,
     1105     1447                   TYPE=%TYP_INFO#);
     1106     1464        %FPT_TIME(SOURCE=CLOCK,
     1107     1465                  DEST=UTS,
     1108     1466                  TSTAMP=CUTS);
     1109     1485
     1110     1486
     1111     1487
     1112     1488        /**/
     1113     1489        /* SYMREFS */
     1114     1490        /**/
     1115     1491    1   DCL B$JIT$ PTR SYMREF;
     1116     1492
PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:187  
     1117     1493
     1118     1494
     1119     1495        /**/
     1120     1496        /* ENTREFS */
     1121     1497        /**/
     1122     1498    1   DCL FOI$SNAP  ENTRY(4) ALTRET;
     1123     1499    1   DCL XSJ$WRITE ENTRY(1) ALTRET;
     1124     1500
     1125     1501
     1126     1502
     1127     1503        /**/
     1128     1504        /* SUBS */
     1129     1505        /**/
     1130     1506        %SUB JM$IF = IF$->JM$IF;
     1131     1507        /**/
     1132     1508    1         XSJ_JOBINFO = '0'B;

   1508  3 000002   000000 100400                    MLR     fill='000'O
         3 000003   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 000004   000002 000024 2                  ADSC9   XSJ_JOBINFO              cn=0,n=20

     1133     1509    1         CALL M$TIME (FPT_TIME) ALTRET(TIMEFAIL);

   1509  3 000005   000020 630400 2                  EPPR0   FPT_TIME
         3 000006   420004 713400                    CLIMB   alt,+8196
         3 000007   402000 401760                    pmme    nvectors=5
         3 000010   000013 702000 3                  TSX2    TIMEFAIL

     1134     1510    1         XSJ_JOBINFO.OFF_TIME#=CUTS;

   1510  3 000011   000000 235000 2                  LDA     CUTS
         3 000012   000004 755000 2                  STA     XSJ_JOBINFO+2

   1510  3 000013                       TIMEFAIL     null
     1135     1511    1   TIMEFAIL:;
     1136     1512    1         XSJ_JOBINFO.STATUS# = JM$IF.STATUS;

PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:188  
   1512  3 000013   200003 470500                    LDP0    @IF$,,AUTO
         3 000014   000000 471500                    LDP1    0,,PR0
         3 000015   100013 236100                    LDQ     11,,PR1
         3 000016   000002 552004 2                  STBQ    XSJ_JOBINFO,'04'O

     1137     1513    1         XSJ_JOBINFO.ACCT# = JM$IF.ACCT;

   1513  3 000017   000000 471500                    LDP1    0,,PR0
         3 000020   040000 100500                    MLR     fill='040'O
         3 000021   100015 000010                    ADSC9   13,,PR1                  cn=0,n=8
         3 000022   000005 000010 2                  ADSC9   XSJ_JOBINFO+3            cn=0,n=8

     1138     1514    1         INFO_PARAM.BUF_ = VECTOR(XSJ_JOBINFO);

   1514  3 000023   000000 237000 4                  LDAQ    0
         3 000024   000010 757000 2                  STAQ    INFO_PARAM

     1139     1515    1         INFO_PARAM.SYSID# = JM$IF.SYSID;

   1515  3 000025   000000 471500                    LDP1    0,,PR0
         3 000026   100014 720100                    LXL0    12,,PR1
         3 000027   000014 440000 2                  SXL0    INFO_PARAM+4

     1140     1516    1         CALL XSJ$WRITE(INFO_PARAM) ALTRET(IGNORE);

   1516  3 000030   000002 630400 4                  EPPR0   2
         3 000031   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000032   000000 701000 xent               TSX1    XSJ$WRITE
         3 000033   000034 702000 3                  TSX2    IGNORE

   1515  3 000034                       IGNORE       null
     1141     1517    1   IGNORE:;
     1142     1518    1         RETURN;

   1518  3 000034   000000 702200 xent               TSX2  ! X66_ARET
     1143     1519        /**/
     1144     1520    1   END JMU$WRITE_STATS;
PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:189  

PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:190  
--  Include file information  --

   JM_SUBS_C.:E05TOU  is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   XSJ_SUBS_C.:E05TOU  is referenced.
   XSJ_MAC_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   U$JIT_C.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JMU$WRITE_STATS.
PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:191  

 **** Variables and constants ****

  ****  Section 002  Data  JMU$WRITE_STATS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d UBIN        r     1 CUTS                      20-0-0/d STRC(432)   r     1 FPT_TIME
    10-0-0/d STRC(288)   r     1 INFO_PARAM                 2-0-0/w STRC(180)   r     1 XSJ_JOBINFO

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @IF$                      *0-0-0/w PTR         r     1 IF$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(1665)  r     1 JM$IF                      0-0-0N  NULL        r     1 M$STATUS


   Procedure JMU$WRITE_STATS requires 29 words for executable code.
   Procedure JMU$WRITE_STATS requires 4 words of local(AUTO) storage.
PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:192  

    No errors detected in file JMU$UTIL.:E05TSI    .
PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:193  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:194  
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
       127**DCL       127--REDEF
B$JIT.ERR.MID
        34**DCL        34--REDEF
B$JIT$
      1491**DCL        28--IMP-PTR
CUTS
      1429**DCL      1481--DCLINIT  1510>>ASSIGN
FPT_TIME
      1477**DCL      1509<>CALL
FPT_TIME.V
      1481**DCL      1477--DCLINIT
IF$
      1251**DCL        12--PROC     1512>>ASSIGN   1513>>ASSIGN   1515>>ASSIGN
IGNORE
      1515**LABEL    1516--CALLALT
INFO_PARAM
      1458**DCL      1516<>CALL
INFO_PARAM.BUF_
      1458**DCL      1514<<ASSIGN
INFO_PARAM.SYSID#
      1461**DCL      1515<<ASSIGN
JM$IF.ACCT
      1354**DCL      1513>>ASSIGN
JM$IF.JNL
      1408**DCL      1420--IMP-SIZ
JM$IF.STATUS
      1344**DCL      1512>>ASSIGN
JM$IF.SYSID
      1352**DCL      1515>>ASSIGN
M$TIME
       281**DCL-ENT  1509--CALL
PL6.E3A0      #010=JMU$WRITE_STATS File=JMU$UTIL.:E05TSI                         TUE 07/29/97 23:35 Page:195  
TIMEFAIL
      1510**LABEL    1509--CALLALT
XSJ$WRITE
      1499**DCL-ENT  1516--CALL
XSJ_JOBINFO
      1441**DCL      1508<<ASSIGN   1514--ASSIGN
XSJ_JOBINFO.ACCT#
      1443**DCL      1513<<ASSIGN
XSJ_JOBINFO.OFF_TIME#
      1442**DCL      1510<<ASSIGN
XSJ_JOBINFO.STATUS#
      1442**DCL      1512<<ASSIGN
