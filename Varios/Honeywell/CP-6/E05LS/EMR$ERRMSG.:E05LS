VERSION E05

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:1    
        1        1        /*M*     EMR$ERRMSG - ERROR MESSAGE REPORTER */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*/
        8        8        /*P*     NAME:     EMR$ERRMSG
        9        9        *
       10       10                 PURPOSE:  EMR$ERRMSG is a monitor service called to read messages
       11       11                      from a file and output them to the user.  */
       12       12        /**/
       13       13        /*F*     NAME:     EMR$ERRMSG
       14       14        *
       15       15                 FUNCTION: EMR$ERRMSG is a service called by the user to read
       16       16                      messages from a file into the users buffer and to optionally
       17       17                      output them through the users DCBs. The message is requested
       18       18                      from the appropriate error message file with an ERROR CODE
       19       19                      with the possibility of a substitue message being supplied
       20       20                      if the requested one doesn't exist. The requested message
       21       21                      may have a DCB name, file name, serial number and up to three
       22       22                      user passed fields substituted into it before being
       23       23                      returned to the caller.                          */
       24       24        /**/
       25       25        /*D*     NAME:     EMR$ERRMSG
       26       26        *
       27       27                 CALL:     EMR$ERRMSG is called via a PMME with an FPT containing
       28       28                      ten parameters. These parameters are:
       29       29        *
       30       30                      V - Value field of FPT contains:
       31       31                           DCB - number of DCB on which error occured if applicable
       32       32                                 DCB is used to obtain DCB name, file name and
       33       33                                 serial number to substitute into message.
       34       34                           OUTDCB1 -  number of DCB to output message through.
       35       35                           OUTDCB2 -  number of second output DCB.
       36       36                           FLAGLEV -  number of asterisks that are to be used to
       37       37                                 flag this message as an error message.
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:2    
       38       38                           TYC - bit indicating whether or not TYC information from
       39       39                                 DCB is to be displayed.
       40       40                           SUBMESS - bit indicating whether or not a substitute
       41       41                                 message is acceptable.
       42       42                           SUBFN -
       43       43                           SUBDC -
       44       44                           SUBSN - BITS INDICATING WHETHER OR NOT THE SPECIAL
       45       45                                FIELDS %FN,%DC AND %SN ARE TO BE CONSIDERED AS
       46       46                                CANDIDATES FOR SUBSTITUTION.
       47       47        *
       48       48                      CODE - ERROR CODE used as a key to find the correct message
       49       49        *
       50       50                      BUF - Users buffer consisting of some number of 120 character
       51       51                           slots into which the message is read.
       52       52        *
       53       53                      FILENAME - File from which the message is to be read.
       54       54        *
       55       55                      FILEACCT - Account of error message file.
       56       56        *
       57       57                      FILEPASS - Password of error message file.
       58       58        *
       59       59                      FIELD1 - First user passed text field to substitute into the
       60       60                           message.
       61       61        *
       62       62                      FIELD2 - Second user passed field.
       63       63        *
       64       64                      FIELD3 - Third user passed field
       65       65        *
       66       66                      RESULTS - A word of status communicated to the user about
       67       67                           this call to EMR$ERRMSG. RESULTS contains:
       68       68                           NOFILE - bit indicating that EMR$ERRMSG was unable to
       69       69                                open the requested file.
       70       70                           NOMSG - Bit indicating that no message for the requested
       71       71                                code was found.
       72       72                           ALTMSG - Bit indicating that a substitute message was
       73       73                                used.
       74       74                           MSGCOMP - Bit indicating that the entire message is
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:3    
       75       75                                contained in the users buffer.
       76       76                           BADCALL - EMR$ERRMSG was called with illegal parameters.
       77       77                           OUTERR1 - EMR$ERRMSG recieved an error writing through
       78       78                                the first user passed DCB.
       79       79                           OUTERR2 - Error on second output DCB.
       80       80                           RECCNT - Ubin(9) field containing the number of
       81       81                                significant records in the users buffer. That is
       82       82                                the number of slots in the buffer that were filled
       83       83                                on this call to EMR$ERRMSG.
       84       84        *
       85       85            INTERFACE: EMR$ERRMSG calls:
       86       86                      FMM$DFLOPN - To open M$* to error message file.
       87       87                      FMP$CLSTAR - TO CLOSE M$*.
       88       88                      Also EMR$ERRMSG uses the B$PSn$ pointers to look at
       89       89                        the parameters passed to it.
       90       90        *
       91       91            DESCRIPTION:   When EMR$ERRMSG is entered it initializes a
       92       92                 some pointers and the FPTs in the AUTO stack. If the users
       93       93                 buffer is too small or the passed ERROR CODE is illegal then
       94       94                 BADCALL is set in the RESULTS area and an ALTRETURN is made
       95       95                 to the caller.
       96       96                   Otherwise M$* DCB is set up to open either the user passed
       97       97                 file or the default file for the passed code. If this open fails
       98       98                 then the NOFILE bit is set and EMR$ERRMSG ALTRETURNS.  If the
       99       99                 open is sucessful then the passed code is used as a key in
      100      100                 reading the file. If no record with this key exists then if
      101      101                 if no substitute message is allowed then NOMSG is set and an
      102      102                 ALTRETURN executed. If a substitute message is desired then a
      103      103                 search is made first for a less verbose message and then for
      104      104                 the default message for this ERROR#. If a message is
      105      105                 found it is used else NOMSG is set and an ALTRETURN executed.
      106      106                   THE REQUESTED NUMBER OF ASTERISKS (0-4) ARE PLACED IN THE
      107      107                 FIRST FOUR CHARACTER POSITIONS OF THE BUFFER. IF THE TEXT CODE
      108      108                 IS TO BE OUTPUT THEN IT IS CONVERTED TO TEXT, PLACED IN THE
      109      109                 BUFFER AND WRITTEN AS THE FIRST RECORD OF THE MESSAGE.
      110      110                   When a record is read the control flags in the first byte of
      111      111                 the record are examined to see if any substitution is to be
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:4    
      112      112                 performed. If it is then ERRMSG_SUB is called to do it, it calls
      113      113                 PUSH_RIGHT to make room in the record for the substitution.
      114      114                 The substituted message is then written out if DCBs are
      115      115                 provided.  If VFC is specified, the record is copied into a
      116      116                 buffer and written out with the specified VFC in front and
      117      117                 VFC = YES.
      118      118                   If the message is continued then the next record from the file
      119      119                 is read into the next slot in the buffer until the buffer is full
      120      120                 and then the last buffer slot is used. When all records in
      121      121                 the message have been read and written to the user then
      122      122                 RECCNT is set in RESULTS and EMR$ERRMSG returns.
      123      123        *
      124      124        */
      125      125        /**/
      126      126        /*K*     ERROR_CODE     An ERROR CODE is the means by which a user of CP-6
      127      127                      is informed of any error condition that might arise in the
      128      128                      course of his processing. All ERROR CODES have the same
      129      129                      format no matter what the source.
      130      130                      This format is:
      131      131                           XYZ-#####-S
      132      132        *
      133      133                                XY - is the two letter FCG identifing the functional
      134      134                                   area which detected the error.
      135      135                                Z - the one letter identifer of the module within
      136      136                                   the FCG.
      137      137                                ##### - is the ERROR# uniquely identifing
      138      138                                  the error condition detected, The ERROR# will be
      139      139                                  the same for a given error regardless of where
      140      140                                  it was detected. For monitor detected errors the
      141      141                                  ERROR# is preceded by an 'M'.
      142      142                                S - The severity of the error.When communicated to
      143      143                                  the user the SEVERITY indicates whether a job
      144      144                                  encountreing this error and chosing to let the
      145      145                                  monitor handle it would be errored,aborted or
      146      146                                  allowed to continue. When the ERROR CODE is used
      147      147                                  in an M$ERRMSG call the SEVERITY field
      148      148                                  indicates the level of detail requested in the
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:5    
      149      149                                  error message.                                 */
      150      150        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:6    
      151      151        EMR$ERRMSG: PROC ;
      152      152        /**/
      153      153        /*************************************************************/
      154      154        /*   %SUBS   %SUBS   %SUBS   %SUBS   %SUBS   %SUBS   %SUBS   */
      155      155        /*************************************************************/
      156      156        /**/
      157      157        %SUB TRUE = '1'B;
      158      158        %SUB FALSE = '0'B;
      159      159        %SUB SLOT_SIZE = 120;
      160      160        %SUB TEXT_CODE_SIZE = 12;
      161      161        %SUB MAX_SUB_SIZE = 31;
      162      162        %SUB NUM_TYCS = 25;
      163      163        %SUB FNSUB = 0;
      164      164        %SUB ACSUB = 1;
      165      165        %SUB DCSUB = 2;
      166      166        %SUB SNSUB = 3;
      167      167        %SUB TASUB = 4;
      168      168        %SUB U1SUB = 5;
      169      169        %SUB U2SUB = 6;
      170      170        %SUB U3SUB = 7;
      171      171        %SUB UFSUB = 8;
      172      172        /**/
      173      173        %SUB V$#=B$PS0$;
      174      174        %SUB CODE$#=B$PS1$;
      175      175        %SUB BUF$#=B$PS2$;
      176      176        %SUB NAME$#=B$PS3$;
      177      177        %SUB ACCT$#=B$PS4$;
      178      178        %SUB PASS$#=B$PS5$;
      179      179        %SUB FIELD1$#=B$PS6$;
      180      180        %SUB FIELD2$#=B$PS7$;
      181      181        %SUB FIELD3$#=B$PS8$;
      182      182        %SUB RESULTS$#=B$PS9$;
      183      183        %SUB ALTCODE$#=B$PS10$;
      184      184        /**/
      185      185        %SUB V_PS# = 0;
      186      186        %SUB CODE_PS# = 1;
      187      187        %SUB BUF_PS# = 2;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:7    
      188      188        %SUB NAME_PS# = 3;
      189      189        %SUB ACCT_PS# = 4;
      190      190        %SUB PASS_PS# = 5;
      191      191        %SUB FIELD1_PS# = 6;
      192      192        %SUB FIELD2_PS# = 7;
      193      193        %SUB FIELD3_PS# = 8;
      194      194        %SUB RESULTS_PS# = 9;
      195      195        %SUB ALTCODE_PS# = 10;
      196      196        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:8    
      197      197        /***********************************************************************/
      198      198        /*    ENTRY DCLS   ENTRY DCLS   ENTRY DCLS   ENTRY DCLS   ENTRY DCLS   */
      199      199        /**********************************************************************/
      200      200    1   DCL EMR$FEP2HOST ENTRY(2);     /* To convert LCP-6 err words to CP-6 format */
      201      201    1   DCL FMF$ICORRES ENTRY(4);               /* To check DCBs                      */
      202      202    1   DCL FMM$DFLOPN ENTRY;                   /* TO OPEN M$* TO ERRMSG FILE         */
      203      203    1   DCL FMM$SCRUB ENTRY(1);
      204      204    1   DCL FMP$CLSJ ENTRY;
      205      205    1   DCL FMP$CLSTAR ENTRY;                   /* TO CLOSE M$*                       */
      206      206    1   DCL UDN$MAGIC ENTRY;                    /* To build MAGIC segment             */
      207      207    1   DCL HFF$DSIZ ENTRY(2) ALTRET;           /* GET PSn SIZE                       */
      208      208    1   DCL HFF$NILERASE ENTRY(1) ALTRET;       /* TO TEST PS DESC. FOR NULL          */
      209      209    1   DCL HFF$TRAPALT ENTRY ALTRET;           /* TO PROVIDE TRAP ENTRY ADDRESS      */
      210      210    1   DCL M$MREAD ENTRY(1) ALTRET;            /* INTERNAL READ                      */
      211      211    1   DCL M$MWRITE ENTRY(1) ALTRET;           /* INTERNAL WRITE                     */
      212      212    1   DCL M$MPRECORD ENTRY(1) ALTRET;         /* INTERNAL PRECORD                   */
      213      213    1   DCL M$MUNFID ENTRY(1) ALTRET;           /* INTERNAL UNFID                     */
      214      214    1   DCL FMD$GBUF ENTRY(1);                  /* TO ALLOCATE A POOL BUFFER          */
      215      215    1   DCL FMD$RBUF ENTRY(1);                  /* TO RELEASE A POOL BUFFER           */
      216      216    1   DCL UMD$CHKOPN ENTRY ALTRET;            /* TO OPEN M$DRIBBLE (IF DRIBBLING)   */
      217      217        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:9    
      218      218        /*********************************************************************/
      219      219        /*   INCLUDE FILES   INCLUDE FILES   INCLUDE FILES   INCLUDE FILES   */
      220      220        /*********************************************************************/
      221      221        %INCLUDE F$DCB;
      222      270        %INCLUDE FM$SET;
      223      297        %INCLUDE CP_6_SUBS;
      224      837        %INCLUDE CP_6;
      225     6396        %INCLUDE B$JIT;
      226     6999        %INCLUDE B$ROSEG;
      227     7062        %INCLUDE UM$CP6V_C;
      228     7249        %INCLUDE UM_ERRORS_C;
      229     7283        %INCLUDE B_MAGIC_C;                     /* MAGIC to examine TCB               */
      230     7401        %INCLUDE B_MACROS_C;                    /* MAGIC MACROS                       */
      231     7512        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:10   
      232     7513        /********************************************************************/
      233     7514        /*   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   */
      234     7515        /********************************************************************/
      235     7516        /**/
      236     7517        %FPT_READ     (FPTN=EMR_RFPT,
      237     7518                       STCLASS = AUTO);
      238     7557        %FPT_WRITE    (FPTN=EMR_WFPT,
      239     7558                       STCLASS = AUTO);
      240     7589        %FPT_PRECORD  (FPTN=EMR_PRECFPT,
      241     7590                       STCLASS = AUTO);
      242     7611        %FPT_UNFID    (FPTN = EMR_UNFIDFPT,
      243     7612                       STCLASS = AUTO);
      244     7630        /**/
      245     7631        %FPT_READ     (FPTN = INIT_RFPT,
      246     7632                       KEYR = YES,
      247     7633                       STCLASS = CONSTANT);
      248     7672        %FPT_WRITE    (FPTN = INIT_WFPT,
      249     7673                       STCLASS = CONSTANT);
      250     7704        %FPT_PRECORD  (FPTN = INIT_PRECFPT,
      251     7705                       KEYR = YES,
      252     7706                       STCLASS = CONSTANT);
      253     7727        %FPT_UNFID    (FPTN = INIT_UNFIDFPT,
      254     7728                       STCLASS = CONSTANT);
      255     7746        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:11   
      256     7747        /*****************************************************************************/
      257     7748        /*   CONSTANTS   CONSTANTS   CONSTANTS   CONSTANTS   CONSTANTS   CONSTANTS   */
      258     7749        /*****************************************************************************/
      259     7750        /**/
      260     7751        %EQU TOP_2SUBS# = 8;                    /* NINE TWO LETTER CODES              */
      261     7752    1   DCL SUBTYPE_TBL(0:%TOP_2SUBS#) CONSTANT CHAR(2) ALIGNED INIT(
      262     7753    1       'FN','AC','DC','SN','TA','U1','U2','U3','UF' );
      263     7754    1   DCL TYC_NAME(0:NUM_TYCS) CHAR(8) CONSTANT INIT('        ',
      264     7755    1       'EGV     ',   'OPER    ',   'EOT     ',   'BOT     ',   'BOF     ',
      265     7756    1       'BLNKTP  ',   'EOF     ',   'LD      ',   'IOERR   ',   'DI      ',
      266     7757    1       'EOD     ',   'MTRAP   ',   'DISC    ',   'DACT    ',   'TIMO    ',
      267     7758    1       'PROT    ',   'FRAW    ',   'LAST    ',   'CDALRT  ',   'XTRARD  ',
      268     7759    1       'CGKEYV  ',   'CGLWRV  ',   'CGFULL  ',   'CGCRCW  ',   'CGCWRV  ');
      269     7760    1   DCL TYC_MASK(0:NUM_TYCS) BIT(36) CONSTANT INIT('0'B,
      270     7761    1       %TYC_EGV,     %TYC_OPER,    %TYC_EOT,     %TYC_BOT,     %TYC_BOF,
      271     7762    1       %TYC_BLNKTP,  %TYC_EOF,     %TYC_LD,      %TYC_IOERR,   %TYC_DI,
      272     7763    1       %TYC_EOD,     %TYC_MTRAP,   %TYC_DISC,    %TYC_DACT,    %TYC_TIMO,
      273     7764    1       %TYC_PROT,    %TYC_FRAW,    %TYC_LAST,    %TYC_CDALRT,  %TYC_XTRARD,
      274     7765    1       %TYC_CGKEYV,  %TYC_CGLWRV,  %TYC_CGFULL,  %TYC_CGCRCW,  %TYC_CGCWRV);
      275     7766    1   DCL TYC_N_LEN(0:NUM_TYCS) SBIN WORD CONSTANT INIT(0,
      276     7767    1       03,           04,           03,           03,          03,
      277     7768    1       06,           03,           02,           05,          02,
      278     7769    1       03,           05,           04,           04,          04,
      279     7770    1       04,           04,           04,           06,          06,
      280     7771    1       06,           06,           06,           06,          06);
      281     7772    1   DCL FLAGBUF CHAR(4) ALIGNED INIT ('****') CONSTANT;
      282     7773    1   DCL BLANKS CHAR(4) ALIGNED CONSTANT INIT('    ');
      283     7774    1   DCL 1 B$PS10 CONSTANT,                  /* B$PS10$ isn't SYMREFed             */
      284     7775    1         2 OFFSET UBIN(24) INIT(0) UNAL,
      285     7776    1         2 SID BIT(12) INIT('0012'O) UNAL;
      286     7777    1   DCL 1 B$PS10$ REDEF B$PS10 PTR;
      287     7778    1   DCL SYSV BIT(36) ALIGNED CONSTANT INIT('050002006000'O);/*CEPXY*/
      288     7779    1   DCL SYSVA(0:35) REDEF SYSV BIT(1);
      289     7780        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:12   
      290     7781        /*****************************************************************/
      291     7782        /*   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   */
      292     7783        /*****************************************************************/
      293     7784        /**/
      294     7785    1   DCL B$JIT$ PTR SYMREF;
      295     7786    1   DCL B$ROSEG$ PTR SYMREF;
      296     7787    1   DCL FM$SET$ PTR SYMREF;
      297     7788    1   DCL B$PS0$ PTR SYMREF;
      298     7789    1   DCL B$PS1$ PTR SYMREF;
      299     7790    1   DCL B$PS2$ PTR SYMREF;
      300     7791    1   DCL B$PS3$ PTR SYMREF;
      301     7792    1   DCL B$PS4$ PTR SYMREF;
      302     7793    1   DCL B$PS5$ PTR SYMREF;
      303     7794    1   DCL B$PS6$ PTR SYMREF;
      304     7795    1   DCL B$PS7$ PTR SYMREF;
      305     7796    1   DCL B$PS8$ PTR SYMREF;
      306     7797    1   DCL B$PS9$ PTR SYMREF;
      307     7798        /* B$PS10$ is not SYMREFed, see CONSTANT */
      308     7799        %B_MPT(FPTN = B_MPT,STCLASS = SYMREF);  /* DCL MAGIC pointers                 */
      309     7892        /**/
      310     7893        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:13   
      311     7894        /***************************************************************/
      312     7895        /* AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   */
      313     7896        /***************************************************************/
      314     7897        /**/
      315     7898    1   DCL CUR_REC UBIN(36);                   /* CURRENT RECORD IN BUFFER           */
      316     7899    1   DCL ERR_RECS UBIN(36);                  /* TOTAL RECORD SLOTS IN BUFFER       */
      317     7900    1   DCL REC_COUNT UBIN(36);                 /* BUFFER SLOTS USED                  */
      318     7901    1   DCL I SBIN;                             /* INDEX                              */
      319     7902    1   DCL J SBIN;                             /* INDEX                              */
      320     7903    1   DCL K SBIN;                             /* INDEX                              */
      321     7904    1   DCL FLAG# UBIN(36);
      322     7905    1   DCL COUNT SBIN WORD;                    /* CHAR COUNT OF SUBS                 */
      323     7906    1   DCL MSG_SIZE UBIN(36);                  /* CHARACTER COUNT IN MESSAGE         */
      324     7907    1   DCL CPH_CLMN SBIN;                      /* START OF CONDITIONAL PHRASE        */
      325     7908    1   DCL UNSAT_SUB SBIN;              /* FLAG FOR SUB FIELDS IN COND. PHRASE     */
      326     7909    1   DCL USER_FILE BIT(1);                   /* USING USERS SPECIFIED FILE         */
      327     7910    1   DCL NATIVE_LANG BIT(1);                 /* File is in user's native language  */
      328     7911    1   DCL ALTCODE_EXISTS BIT(1);              /* ALTCODE has been specified         */
      329     7912    1   DCL ALTRET_FLAG BIT(1);                 /* ALTRET TO CALLER FLAG              */
      330     7913    1   DCL 1 MSG_FLGS,                         /* MESSAGE CONTROL FLAGS              */
      331     7914    1         2 SUB BIT(1) UNAL,
      332     7915    1         2 CONT BIT(1) UNAL,
      333     7916    1         2 * BIT(7) UNAL;
      334     7917    1   DCL MSG_FLGS_CHAR REDEF MSG_FLGS CHAR(1);
      335     7918    1   DCL LANG CHAR(1) ALIGNED;
      336     7919    1   DCL SUB_CODE CHAR(2) ALIGNED;           /* SUBSTITUTION TYPE                  */
      337     7920    1   DCL 1 CODE ALIGNED,
      338     7921    1         2 FCGMID(0:2) UBIN(6) UNAL,
      339     7922    1         2 MON BIT(1) UNAL,
      340     7923    1         2 ERROR UBIN(14) UNAL,
      341     7924    1         2 SEV UBIN(3) UNAL;
      342     7925    1   DCL 1 CODE_ REDEF CODE ALIGNED,
      343     7926    1         2 FCG UBIN(12) UNAL,
      344     7927    1         2 MID UBIN(6) UNAL,
      345     7928    1         2 MON BIT(1) UNAL,
      346     7929    1         2 ERROR UBIN(14) UNAL,
      347     7930    1         2 SEV UBIN(3) UNAL;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:14   
      348     7931    1   DCL CODE_CHAR REDEF CODE CHAR(4);       /* CHAR MOVE PARAMATERS               */
      349     7932    1   DCL B$M$STAR$ PTR SYMREF READONLY;
      350     7933    1   DCL M$STAR$ REDEF B$M$STAR$ PTR ALIGNED;  /* A NICER NAME FOR IT              */
      351     7934    1   DCL B$M$LM$ PTR SYMREF READONLY;        /* POINTER TO M$LM                    */
      352     7935    1   DCL DCB$ PTR ALIGNED;                   /* USERS DCB                          */
      353     7936    1   DCL ERR_DCB UBIN WORD;                  /* Number of error DCB                */
      354     7937    1   DCL BUF$ PTR ALIGNED;                   /* Points to current buffer slot      */
      355     7938    1   DCL POOLBUF$ PTR ALIGNED;               /* Points to allocated pool buffer    */
      356     7939    1   DCL AD_WRBUF$ PTR ALIGNED;              /* Points first allocated structure   */
      357     7940    1   DCL AD_PRKEY$ PTR ALIGNED;              /* Points second allocated structure  */
      358     7941    1   DCL AD_RDKEY$ PTR ALIGNED;              /* Points third allocated structure   */
      359     7942    1   DCL 1 BUF_VECTOR,                       /* Frames part of buf slot for M$READ */
      360     7943    1         2 BOUND UBIN(20) UNAL,            /* SET TO READ SIZE                   */
      361     7944    1         2 FLAGSV UBIN(11) UNAL,           /* SET TO 2045                        */
      362     7945    1         2 * BIT(5) UNAL,
      363     7946    1         2 PTR$ PTR UNAL;                  /* SET TO BUF$                        */
      364     7947    1   DCL 1 TEXT_BUF,
      365     7948    1         2 COUNT UBIN(9) UNAL,
      366     7949    1         2 COUNT_CHAR REDEF COUNT CHAR(1) UNAL,
      367     7950    1         2 TEXT CHAR(43) UNAL,
      368     7951    1         2 TEXT_ARRAY(0:42) REDEF TEXT CHAR(1) UNAL,
      369     7952    1         2 UBIN_ARRAY(0:42) REDEF TEXT UBIN(9) UNAL;
      370     7953    1   DCL V_BUF_SIZE UBIN WORD;               /* Size of passed buffer               */
      371     7954        %VLR_ERRMSG (FPTN = EMR_RESULTS,
      372     7955                           STCLASS = AUTO);
      373     7977    1   DCL EMR_RESULTS_CHAR REDEF EMR_RESULTS CHAR(16);
      374     7978    1   DCL POINT$ PTR ALIGNED;
      375     7979        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:15   
      376     7980        /**********************************************************************/
      377     7981        /*   ALLOCATED DATA   ALLOCATED DATA   ALLOCATEDD DATA   ALLOCATED DATA       */
      378     7982        /**********************************************************************/
      379     7983        /**/
      380     7984        /*  The following data resides in a one-page pool buffer that we request on   */
      381     7985        /*  entry and must release on exit.  Implied pointers are used so that this   */
      382     7986        /*  area 'looks like' AUTO                                                    */
      383     7987        /**/
      384     7988    1   DCL 1 WR_VFC_BUF ALIGNED BASED(AD_WRBUF$),  /* For use writing with VFC       */
      385     7989    1         2 VFC CHAR(1) UNAL,
      386     7990    1         2 TEXT CHAR(SLOT_SIZE);
      387     7991    1   DCL 1 PRECKEY DALIGNED BASED(AD_PRKEY$), /* KEY BUFFER FOR PRECORD            */
      388     7992    1         2 COUNT UBIN(9) UNAL,             /* TEXTC COUNT                        */
      389     7993    1         2 CODE,
      390     7994    1           3 FCG UBIN(12) UNAL,
      391     7995    1           3 FCG_ REDEF FCG UNAL,
      392     7996    1             4 CHAR1 UBIN(6) UNAL,
      393     7997    1             4 CHAR2 UBIN(6) UNAL,
      394     7998    1           3 MID UBIN(6) UNAL,
      395     7999    1           3 MON BIT(1) UNAL,
      396     8000    1           3 ERROR UBIN(14) UNAL,
      397     8001    1           3 SEV UBIN(3) UNAL,
      398     8002    1         2 SEQ UBIN(9) UNAL,
      399     8003    1         2 * CHAR(250) UNAL;               /* Room for bad return key overflow   */
      400     8004    1   DCL 1 READKEY DALIGNED BASED(AD_RDKEY$), /* KEY BUFFER FOR READ               */
      401     8005    1         2 COUNT UBIN(9) UNAL,             /* TEXTC COUNT                        */
      402     8006    1         2 CODE,
      403     8007    1           3 FCG UBIN(12) UNAL,
      404     8008    1           3 FCG_ REDEF FCG UNAL,
      405     8009    1             4 CHAR1 UBIN(6) UNAL,
      406     8010    1             4 CHAR2 UBIN(6) UNAL,
      407     8011    1           3 MID UBIN(6) UNAL,
      408     8012    1           3 MON BIT(1) UNAL,
      409     8013    1           3 ERROR UBIN(14) UNAL,
      410     8014    1           3 SEV UBIN(3) UNAL,
      411     8015    1         2 SEQ UBIN(9) UNAL,
      412     8016    1         2 * CHAR(250) UNAL;               /* Room for bad return key overflow   */
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:16   
      413     8017        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:17   
      414     8018        /**********************************************************************/
      415     8019        /*   BASED DATA   BASED DATA   BASED DATA   BASED DATA   BASED DATA   */
      416     8020        /**********************************************************************/
      417     8021        /**/
      418     8022        %FPT$ERRMSG_V  (FPTN = FPT$ERRMSG);
      419     8028        %VLR_ERRMSG (FPTN = EMR$RESULTS,STCLASS = BASED);
      420     8050    1   DCL EMR$RESULTS_CHAR REDEF EMR$RESULTS CHAR(16);
      421     8051        /**/
      422     8052    1   DCL CODE$CHAR CHAR(4) BASED;
      423     8053    1   DCL MSG$SLOT CHAR(SLOT_SIZE) BASED UNAL;
      424     8054    1   DCL MSG$SLOTARRAY(0:%(SLOT_SIZE -1)) CHAR(1) UNAL BASED;
      425     8055    1   DCL CHAR$1 CHAR(1) UNAL BASED;
      426     8056    1   DCL 1 TEXT$BUF BASED,                   /* TEXTC BUFER                        */
      427     8057    1         2 COUNT UBIN(9) UNAL,
      428     8058    1         2 COUNT_CHAR REDEF COUNT CHAR(1) UNAL,
      429     8059    1         2 TEXT CHAR(31) UNAL;
      430     8060    1   DCL 1 VLP$NAME BASED,                   /* FILE NAME                          */
      431     8061    1         2 COUNT UBIN(9) UNAL,
      432     8062    1         2 COUNT_CHAR REDEF COUNT CHAR(1) UNAL,
      433     8063    1         2 TEXT CHAR(31) UNAL;
      434     8064    1   DCL VLP$ACCT BASED CHAR(8);
      435     8065    1   DCL VLP$PASS BASED CHAR(8);
      436     8066        %B$TCB;
      437     8069        %B$ALT;
      438     8077        %B$EXCFR;
      439     8095        /**/
      440     8096        %FM$SET;
      441     8101        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:18   
      442     8102        /**/
      443     8103        /*****************************************************************************/
      444     8104        /*   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   */
      445     8105        /*****************************************************************************/
      446     8106        /**/
      447     8107    1           EMR_RESULTS = FALSE;            /* Clear RESULTS area                 */
      448     8108        /**/
      449     8109    1           CALL FMD$GBUF(POOLBUF$);        /* GET A POOL BUFFER                  */
      450     8110    1           CALL HFF$TRAPALT ALTRET(ERRMSG_BAILOUT); /* RELEASE IT IF WE TRAP     */
      451     8111    1           AD_WRBUF$ = POOLBUF$;           /* First item in allocated buffer     */
      452     8112    1           AD_PRKEY$ = PINCRC(AD_WRBUF$,SIZEC(WR_VFC_BUF)); /* Second item       */
      453     8113    1           AD_RDKEY$ = PINCRC(AD_PRKEY$,SIZEC(PRECKEY)); /* Third item           */
      454     8114        /**/
      455     8115        /**/
      456     8116    1           USER_FILE = FALSE;
      457     8117    1           ALTRET_FLAG = FALSE;
      458     8118        /**/
      459     8119    1           REC_COUNT = 0;
      460     8120    1           CUR_REC=0;
      461     8121        /**/
      462     8122    1           CALL UDN$MAGIC;                 /* Fill MAGIC pointers                */
      463     8123        /**/
      464     8124    1           ERR_DCB = V$# -> FPT$ERRMSG.DCB#; /* Find error DCB          */
      465     8125    1           IF NOT V$# -> FPT$ERRMSG.NREAD
      466     8126    1           THEN
      467     8127    2             DO;
      468     8128    3              DO CASE(V$# -> FPT$ERRMSG.SOURCE);
      469     8129    3                CASE(0);                   /* PASS source                        */
      470     8130    3                    CALL HFF$NILERASE(CODE_PS#) ALTRET(NO_CODE); /* CODE passed? */
      471     8131    4                    DO WHILE (FALSE);      /* NEVER DO                           */
      472     8132    4   NO_CODE:            EMR_RESULTS.BADCALL = TRUE;
      473     8133    4                       IF TRUE THEN GOTO ERRMSG_ALTRTN; /* QUIT via compil kluge */
      474     8134    4                       END;
      475     8135    3                    IF NOT V$# -> FPT$ERRMSG.L6_CODE
      476     8136    3                    THEN
      477     8137    3                       CODE_CHAR = CODE$# -> CODE$CHAR;
      478     8138    3                    ELSE
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:19   
      479     8139    3                       CALL EMR$FEP2HOST(CODE$# -> CODE$CHAR, CODE_CHAR);
      480     8140    3                CASE(1);                   /* TRAP source                        */
      481     8141    3                    IF B_MPT.TCB$ -> B$TCB.CURRSZ = 0
      482     8142    3                     THEN                  /* No top stack frame to use          */
      483     8143    3                       GOTO NO_CODE;
      484     8144    3                    POINT$ = B_MPT.TCB$ -> B$TCB.STK$;
      485     8145    3                    CALL TOUCH_UP(B_MPT.TCB$,POINT$);
      486     8146    3                    CODE = POINT$ -> B$EXCFR.ERR;
      487     8147    3                    CODE.SEV = 0;          /* Assume least verbose message       */
      488     8148    3                CASE(2);                   /* ALTRET source                      */
      489     8149    3                    POINT$ = B_MPT.TCB$ -> B$TCB.ALT$;
      490     8150    3                    CALL TOUCH_UP(B_MPT.TCB$,POINT$);
      491     8151    3                    IF POINT$ -> B$EXCFR.ALTEMPTY ~= 0
      492     8152    3                     THEN                  /* No ALTRET CODE to use              */
      493     8153    3                       GOTO NO_CODE;
      494     8154    3                    POINT$ = B_MPT.TCB$ -> B$TCB.ALT$;
      495     8155    3                    CALL TOUCH_UP(B_MPT.TCB$,POINT$);
      496     8156    3                    CODE = POINT$ -> B$ALT.ERR;
      497     8157    3                    CODE.SEV = 0;          /* Assume least verbose message       */
      498     8158    3                    ERR_DCB = POINT$ -> B$ALT.DCB#; /* Err DCB                   */
      499     8159    3                END;                       /* END DO CASE                        */
      500     8160        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:20   
      501     8161        /**/                                    /* Test for alternate error code      */
      502     8162    2              CALL HFF$NILERASE(ALTCODE_PS#) ALTRET(NO_ALTCODE);
      503     8163    2              ALTCODE_EXISTS = TRUE;
      504     8164    3              DO WHILE(FALSE);
      505     8165    3   NO_ALTCODE:   ALTCODE_EXISTS = FALSE;   /* ALTCODE not specified              */
      506     8166    3                 END;
      507     8167        /**/                                    /* Set up the error DCB               */
      508     8168    2              END;
      509     8169        /**/
      510     8170    1           IF ERR_DCB > B$ROSEG$ -> B$ROSEG.NUMDCBS /* User doesn't own DCB      */
      511     8171    1            OR ERR_DCB = %M$STAR#          /* We cleared M$*, can't substitute   */
      512     8172    1            THEN                           /* Don't allow DCB substitutions!     */
      513     8173    1             DCB$ = ADDR(NIL);
      514     8174    1           ELSE                            /* Make pointer to error DCB          */
      515     8175    1             DCB$ = DCBADDR(ERR_DCB);
      516     8176        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:21   
      517     8177        /**/                                    /* Check DCBs                         */
      518     8178    1           CALL FMF$ICORRES(V$# -> FPT$ERRMSG.OUTDCB1,
      519     8179    1            V$# -> FPT$ERRMSG.OUTDCB2,
      520     8180    1            EMR_RESULTS.ERRCODE1,
      521     8181    1            EMR_RESULTS.ERRCODE2);
      522     8182    1           IF EMR_RESULTS.ERRCODE1.ERR# ~= 0
      523     8183    1            THEN                           /* Bad DCB1                           */
      524     8184    1              EMR_RESULTS.OUTERR1 = TRUE;
      525     8185    1           IF EMR_RESULTS.ERRCODE2.ERR# ~= 0
      526     8186    1            THEN                           /* Bad DCB2 or corresponds to DCB1    */
      527     8187    1              EMR_RESULTS.OUTERR2 = TRUE;
      528     8188    1           IF V$# -> FPT$ERRMSG.OUTDCB1 ~= 0
      529     8189    1            AND EMR_RESULTS.OUTERR1 = FALSE
      530     8190    1            AND NOT DCBADDR(V$# -> FPT$ERRMSG.OUTDCB1) -> F$DCB.FCD
      531     8191    1            THEN                           /* We have to OPEN the DCB            */
      532     8192    2              DO;
      533     8193    2                IF DCBADDR(V$# -> FPT$ERRMSG.OUTDCB1) -> F$DCB.FUN = 0
      534     8194    2                 THEN                      /* FUN unknown                        */
      535     8195    2                   DCBADDR(V$# -> FPT$ERRMSG.OUTDCB1) -> F$DCB.FUN = %CREATE#;
      536     8196    2                B$JIT$ -> B$JIT.DCB$ = DCBADDR(V$# -> FPT$ERRMSG.OUTDCB1);
      537     8197    2                CALL FMM$DFLOPN;           /* OPEN it                            */
      538     8198    2                CALL HFF$TRAPALT ALTRET(BAD_OUTDCB1);
      539     8199    2                IF DCBADDR(V$# -> FPT$ERRMSG.OUTDCB1) -> F$DCB.FCD = FALSE
      540     8200    2                 THEN                      /* OPEN didn't work                   */
      541     8201    3   BAD_OUTDCB1:    DO;
      542     8202    3                     EMR_RESULTS.OUTERR1 = TRUE;
      543     8203    3                     EMR_RESULTS.ERRCODE1 = B$JIT$ -> B$JIT.ERR;
      544     8204    3                     END;
      545     8205    2                END;
      546     8206    1           IF V$# -> FPT$ERRMSG.OUTDCB2 ~= 0
      547     8207    1            AND EMR_RESULTS.OUTERR2 = FALSE
      548     8208    1            AND NOT DCBADDR(V$# -> FPT$ERRMSG.OUTDCB2) -> F$DCB.FCD
      549     8209    1            THEN                           /* We have to OPEN the DCB            */
      550     8210    2              DO;
      551     8211    2                IF DCBADDR(V$# -> FPT$ERRMSG.OUTDCB2) -> F$DCB.FUN = 0
      552     8212    2                 THEN                      /* FUN unknown                        */
      553     8213    2                  DCBADDR(V$# -> FPT$ERRMSG.OUTDCB2) -> F$DCB.FUN = %CREATE#;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:22   
      554     8214    2                B$JIT$ -> B$JIT.DCB$ = DCBADDR(V$# -> FPT$ERRMSG.OUTDCB2);
      555     8215    2                CALL FMM$DFLOPN;           /* OPEN it                            */
      556     8216    2                CALL HFF$TRAPALT ALTRET(BAD_OUTDCB2);
      557     8217    2                IF NOT DCBADDR(V$# -> FPT$ERRMSG.OUTDCB2) -> F$DCB.FCD
      558     8218    2                 THEN                      /* OPEN didn't work                   */
      559     8219    3   BAD_OUTDCB2:    DO;
      560     8220    3                     EMR_RESULTS.OUTERR2 = TRUE;
      561     8221    3                     EMR_RESULTS.ERRCODE2 = B$JIT$ -> B$JIT.ERR;
      562     8222    3                     END;
      563     8223    2                END;
      564     8224        /**/                                    /* Move flag level to local storage   */
      565     8225    1           FLAG# = V$# -> FPT$ERRMSG.FLAGLEV; /* Fetch requested number of flags */
      566     8226    1           IF FLAG# > 4
      567     8227    1            THEN                           /* Too many requested                 */
      568     8228    1              FLAG# = 4;
      569     8229        /**/
      570     8230        /*  This is a quickie fix for STAR #8807.  It should be fixed in a classy     */
      571     8231        /*  way in C00.  Note similar fix to M$HELP.                                  */
      572     8232        /**/
      573     8233    1           CALL UMD$CHKOPN ALTRET(DRIBBLE_ALT); /* OPEN M$DRIBBLE if needed      */
      574     8234    1   DRIBBLE_ALT: ;
      575     8235        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:23   
      576     8236        /**/                                    /* FPT INITIALIZATION                 */
      577     8237    1           EMR_RFPT = INIT_RFPT;
      578     8238    1           EMR_RFPT.KEY_ = VECTOR(READKEY);
      579     8239    1           EMR_RFPT.V_ = VECTOR(EMR_RFPT.V);
      580     8240    1           EMR_RFPT.V.DCB# = %M$STAR#;
      581     8241        /**/
      582     8242    1           EMR_WFPT = INIT_WFPT;
      583     8243    1           EMR_WFPT.V_ = VECTOR(EMR_WFPT.V);
      584     8244    1           IF (V$# -> FPT$ERRMSG.VFC ~= BINASC(0))
      585     8245    1            THEN                           /* VFC has been specified             */
      586     8246    2              DO;
      587     8247    2                EMR_WFPT.V.DVBYTE.VFC# = TRUE ; /* Force all WRITEs with VFC     */
      588     8248    2                WR_VFC_BUF.VFC = V$# -> FPT$ERRMSG.VFC; /* Put default VFC in    */
      589     8249                                                /* first buffer position              */
      590     8250    2                END;
      591     8251    1            ELSE                           /* VFC has not been specified         */
      592     8252    1             EMR_WFPT.V.DVBYTE.VFC# = FALSE ; /* Specify all WRITEs without VFC  */
      593     8253        /**/
      594     8254    1           EMR_PRECFPT = INIT_PRECFPT;
      595     8255    1           EMR_PRECFPT.V_ = VECTOR(EMR_PRECFPT.V);
      596     8256    1           EMR_PRECFPT.V.DCB# = %M$STAR#;
      597     8257    1           EMR_PRECFPT.KEY_ = VECTOR(PRECKEY);
      598     8258        /**/
      599     8259    1           EMR_UNFIDFPT = INIT_UNFIDFPT;
      600     8260    1           EMR_UNFIDFPT.V_ = VECTOR(EMR_UNFIDFPT.V);
      601     8261        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:24   
      602     8262    1           CALL HFF$TRAPALT ALTRET(ERRMSG_BAILOUT);
      603     8263    1           BUF$ = BUF$#;                   /* Point to user buffer               */
      604     8264    1           CALL HFF$DSIZ(BUF_PS#,V_BUF_SIZE) ALTRET (BUF_ERR);
      605     8265    1           ERR_RECS = V_BUF_SIZE/SLOT_SIZE;
      606     8266                                                /* NUMBER OF 120 BYTE SLOTS IN BUFFER */
      607     8267    1           IF (ERR_RECS < 1)
      608     8268    1            THEN
      609     8269    2             DO;
      610     8270    2   BUF_ERR:   EMR_RESULTS.BADCALL = TRUE;
      611     8271    2              EMR_RESULTS.BUFERR = TRUE;
      612     8272    2              GOTO ERRMSG_ALTRTN;
      613     8273    2              END;
      614     8274        /**/
      615     8275    1           ERR_RECS = ERR_RECS - 1;        /* CONVERT TO INDEX*/
      616     8276        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:25   
      617     8277    1           IF V$# -> FPT$ERRMSG.NREAD = TRUE
      618     8278    1            THEN                           /* NREAD, use buffer as passed        */
      619     8279    2              DO;
      620     8280    2                MSG_FLGS = FALSE;          /* We will have to construct flags    */
      621     8281    2                MSG_FLGS.SUB = TRUE;       /* Assume substitutions               */
      622     8282                                                /* Find size of passed record         */
      623     8283    2                MSG_SIZE = SLOT_SIZE;
      624     8284    3                DO WHILE (BUF$ -> MSG$SLOTARRAY(MSG_SIZE -1) = ' '
      625     8285    3                 AND MSG_SIZE > 1);
      626     8286    3                   MSG_SIZE = MSG_SIZE -1;
      627     8287    3                   END;
      628     8288                                                /* Insert FLAGLEV markers             */
      629     8289    2                IF FLAG# > 0
      630     8290    2                 THEN
      631     8291    3                   DO;
      632     8292    3                     COUNT = FLAG#+1;
      633     8293    3                     CALL PUSH_RIGHT(0,0,1); /* Make room                        */
      634     8294    3                     CALL INSERT(BUF$ -> MSG$SLOT,0,FLAG# +1,
      635     8295    3                       SUBSTR(FLAGBUF,0,FLAG#),' ');
      636     8296    3                     END;
      637     8297    2                GOTO ERRMSG_2;
      638     8298    2                END;
      639     8299        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:26   
      640     8300    1   PREPARE_FILE:                           /* CLEAR and set up error msg file    */
      641     8301    1           IF (M$STAR$ -> F$DCB.FCD = TRUE)
      642     8302    1            THEN                           /* STAR is OPEN, CLOSE it             */
      643     8303    2             DO;
      644     8304    2              B$JIT$ -> B$JIT.DCB$ = M$STAR$;
      645     8305    2              CALL FMP$CLSJ;
      646     8306    2              END;
      647     8307    1           CALL FMM$SCRUB(M$STAR$);
      648     8308        /**/
      649     8309    1           BUF$ -> MSG$SLOT = SUBSTR(FLAGBUF,0,FLAG#); /* Clear the buffer       */
      650     8310        /**/
      651     8311    1           BUF_VECTOR.PTR$ = PINCRC(BUF$,FLAG#);
      652     8312    1           BUF_VECTOR.FLAGSV = 2045;
      653     8313    1           BUF_VECTOR.BOUND = SLOT_SIZE - FLAG# - 1;
      654     8314        /**/
      655     8315    1           M$STAR$ -> F$DCB.FUN = %IN#;
      656     8316    1           M$STAR$ -> F$DCB.ASN = %FILE#;
      657     8317    1           M$STAR$ -> F$DCB.ACS = %DIRECT#;
      658     8318    1           M$STAR$ -> F$DCB.RES= ' ';
      659     8319    1           M$STAR$ -> F$DCB.AMFLG = FALSE;
      660     8320    1           B$JIT$ -> B$JIT.DCB$ = M$STAR$;
      661     8321        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:27   
      662     8322        /**/
      663     8323    1           CALL HFF$NILERASE(NAME_PS#) ALTRET (DFLT_FILENAME);
      664     8324                                                /* TEST NAME$# FOR NULL-ERASE         */
      665     8325    1           TEXT_BUF.COUNT_CHAR = NAME$# -> VLP$NAME.COUNT_CHAR;
      666     8326    1           M$STAR$ -> F$DCB.NAME.L = TEXT_BUF.COUNT;
      667     8327    1           TEXT_BUF.TEXT = SUBSTR(NAME$# -> VLP$NAME.TEXT,0,TEXT_BUF.COUNT);
      668     8328    1           USER_FILE = TRUE;
      669     8329        /**/
      670     8330    1           CALL HFF$NILERASE(PASS_PS#) ALTRET (NO_FILEPASS);
      671     8331    1           M$STAR$ -> F$DCB.PASS = PASS$# -> VLP$PASS;
      672     8332    2           DO WHILE (FALSE);
      673     8333    2   NO_FILEPASS: ;
      674     8334    2              M$STAR$ -> F$DCB.PASS = ' ';
      675     8335    2              END;
      676     8336        /**/
      677     8337    2           DO WHILE (FALSE);
      678     8338    2   DFLT_FILENAME:;
      679     8339    2              USER_FILE = FALSE;
      680     8340    2              M$STAR$->F$DCB.NAME.L = 7;
      681     8341    2              TEXT_BUF.TEXT = ':ERRMSG';   /* STANDARD FILE NAME                 */
      682     8342    2              IF CODE.MON = FALSE
      683     8343    2               THEN                        /* Default is FCG-specific            */
      684     8344    2                 IF CODE.FCGMID(0) = 26    /* 26 = Z - LANGUAGE PROCESSOR        */
      685     8345    2                  OR CODE.FCGMID(0) = 17   /* 17 = Q - TP's forms language       */
      686     8346    2                  OR CODE.FCGMID(0) = 24   /* 24 = X - LIBRARY                   */
      687     8347    2                  OR CODE.FCGMID(0) = 25   /* 25 = Y - INSTALLATION SPECIFIC ERR */
      688     8348    2                  OR (CODE.FCGMID(0) = 22   /* 22 = V - SOME NOT (C,E,P,X,Y) */
      689     8349    2                     AND NOT SYSVA(CODE.FCGMID(1)))
      690     8350    2                  THEN
      691     8351    3                    DO;
      692     8352    3                      M$STAR$ -> F$DCB.NAME.L = 9;
      693     8353    3                      TEXT_BUF.TEXT = ':::ERRMSG';
      694     8354    3                      TEXT_BUF.TEXT_ARRAY(1) = BINASC(CODE.FCGMID(0) + 64);
      695     8355    3                      IF (CODE.FCGMID(1) < 48) THEN /* < '60'O MEANS LETTER      */
      696     8356    3                         TEXT_BUF.UBIN_ARRAY(2) = CODE.FCGMID(1) + 64;
      697     8357    3                      ELSE
      698     8358    3                         TEXT_BUF.UBIN_ARRAY(2) = CODE.FCGMID(1);
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:28   
      699     8359    3                      END;
      700     8360    2              M$STAR$ -> F$DCB.PASS = ' ';
      701     8361    2              END;
      702     8362        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:29   
      703     8363    1   SET_M$STAR_LANG:
      704     8364    1           IF V$# -> FPT$ERRMSG.MY_LANG
      705     8365    1           THEN LANG = B$JIT$ -> B$JIT.LANG;
      706     8366    1           ELSE LANG = V$# -> FPT$ERRMSG.LANG;
      707     8367    1           IF ( LANG ~= BINASC(0)) AND (LANG ~= ' ')
      708     8368    1             THEN                          /* User has a native language         */
      709     8369    2               DO;
      710     8370    2               NATIVE_LANG = TRUE;
      711     8371    2               EMR_RESULTS.NNATIVE = FALSE;
      712     8372    2               TEXT_BUF.TEXT_ARRAY(M$STAR$ -> F$DCB.NAME.L) = LANG;
      713     8373    2               M$STAR$ -> F$DCB.NAME.L = M$STAR$ -> F$DCB.NAME.L + 1;
      714     8374    2               END;
      715     8375    1             ELSE                          /* User has NO native language        */
      716     8376    1              NATIVE_LANG = FALSE;
      717     8377        /**/
      718     8378    1   SET_M$STAR_NAME:
      719     8379    1           M$STAR$ -> F$DCB.NAME.C = SUBSTR (TEXT_BUF.TEXT,0,M$STAR$ -> F$DCB.NAME.L);
      720     8380        /**/
      721     8381    1           CALL HFF$NILERASE(ACCT_PS#) ALTRET (DFLT_FILEACCT);
      722     8382    1           M$STAR$ -> F$DCB.ACCT = ACCT$# -> VLP$ACCT;
      723     8383    2           DO WHILE (FALSE);
      724     8384    2   DFLT_FILEACCT: ;
      725     8385    2              IF CODE.MON = FALSE
      726     8386    2                THEN
      727     8387    3                  DO;
      728     8388    3   LM_FILEACCT:   M$STAR$ -> F$DCB.ACCT = B$M$LM$ -> F$DCB.ACCT;
      729     8389    3                  IF M$STAR$ -> F$DCB.ACCT = ' ' THEN GOTO SY_FILEACCT;
      730     8390    3                  IF NOT B$M$LM$->F$DCB.FCD THEN GOTO SY_FILEACCT;
      731     8391    3                  IF M$STAR$->F$DCB.NAME.C = ':ERRMSG' THEN GOTO SY_FILEACCT;
      732     8392    3                  END;
      733     8393    2                ELSE
      734     8394    2   SY_FILEACCT:   M$STAR$ -> F$DCB.ACCT = ':SYS';
      735     8395    2              END;
      736     8396        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:30   
      737     8397        /**/
      738     8398        /*  The DCB is now set up.  Try the OPEN and see what happens.                */
      739     8399        /**/
      740     8400    1           CALL HFF$TRAPALT ALTRET(BAD_MSG_FILE); /* Quit if TRAP on OPEN      */
      741     8401    1           CALL FMM$DFLOPN;
      742     8402    1           IF M$STAR$ -> F$DCB.FCD = TRUE
      743     8403    1            THEN                           /* Got it OPEN!                       */
      744     8404    1              GOTO ERRMSG_OPENED;
      745     8405        /**/
      746     8406        /*  Perhaps we failed by picking the wrong ACCOUNT.  We should try            */
      747     8407        /*  another one.  The search order is:                                        */
      748     8408        /*      as specified by caller                                                */
      749     8409        /*      that in M$LM (if not MON)                                             */
      750     8410        /*      :SYS                                                                  */
      751     8411        /**/
      752     8412    1           IF (M$STAR$ -> F$DCB.ACCT = B$M$LM$ -> F$DCB.ACCT) AND
      753     8413    1              (M$STAR$ -> F$DCB.ACCT ~= ':SYS')
      754     8414    1            THEN                           /* ALREADY TRIED FROM M$LM            */
      755     8415    1              GOTO SY_FILEACCT;
      756     8416    1           IF M$STAR$ -> F$DCB.ACCT ~= ':SYS'
      757     8417    1            THEN                           /* ~SY, ~LM, MUST HAVE BEEN PASSED    */
      758     8418    1              GOTO DFLT_FILEACCT;          /* PICK SOME DEFAULT                  */
      759     8419        /**/
      760     8420        /*  Perhaps we failed as the result of using a native language.  Try          */
      761     8421        /*  for a file in the default language.                                       */
      762     8422        /**/
      763     8423    1           IF NATIVE_LANG
      764     8424    1            AND V$# -> FPT$ERRMSG.SUBLANG
      765     8425    1            THEN                           /* We failed with native language     */
      766     8426    2             DO;
      767     8427    2               NATIVE_LANG = FALSE;        /* Try again without native language  */
      768     8428    2               EMR_RESULTS.NNATIVE = TRUE;
      769     8429    2               M$STAR$ -> F$DCB.NAME.L = M$STAR$ -> F$DCB.NAME.L -1;
      770     8430    2               GOTO SET_M$STAR_NAME;
      771     8431    2               END;
      772     8432        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:31   
      773     8433        /**/
      774     8434        /*  We have failed at all attempts to use the specified file name.  Try       */
      775     8435        /*  crafting up a default file from the error message.                        */
      776     8436        /**/
      777     8437    1           IF USER_FILE
      778     8438    1            THEN                           /* Failed on the user file            */
      779     8439    1              GOTO DFLT_FILENAME;          /* Try the default                    */
      780     8440        /**/
      781     8441        /*  We have exhausted all the possibilities for this error code, but we       */
      782     8442        /*  might be able to build a good file name with the ALTERNATE error code.    */
      783     8443        /**/
      784     8444    1           IF ALTCODE_EXISTS
      785     8445    1            THEN                           /* Try it all again with new CODE     */
      786     8446    2              DO;
      787     8447    2                IF NOT V$# -> FPT$ERRMSG.L6_ALTCODE THEN
      788     8448    2                   CODE_CHAR = ALTCODE$# -> CODE$CHAR;  /* Use new CODE          */
      789     8449    2                ELSE
      790     8450    2                   CALL EMR$FEP2HOST(ALTCODE$# -> CODE$CHAR, CODE_CHAR);
      791     8451    2                ALTCODE_EXISTS = FALSE;    /* Don't come through again           */
      792     8452    2                GOTO DFLT_FILENAME;        /* Build new NAME from CODE           */
      793     8453    2                END;
      794     8454        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:32   
      795     8455        /**/
      796     8456        /*  Just can't get an error message file ANYWHERE.  This is where we give up  */
      797     8457        /*  in disgust!                                                               */
      798     8458        /**/
      799     8459    1           EMR_RESULTS.NOFILE = TRUE;
      800     8460    1   CODE_ONLY:                              /* Output code only                   */
      801     8461    1           EMR_RESULTS.MSGCOMP = TRUE;     /* CODEONLY fits in buffer            */
      802     8462    1           EMR_RESULTS.NOMSG = TRUE;       /* Let him know it's a fake           */
      803     8463    1           EMR_RESULTS.ALTMSG = TRUE;      /* It's not exactly his desire        */
      804     8464    1           REC_COUNT = 1;
      805     8465    1           BUF$ -> MSG$SLOT = ' ';
      806     8466    1           CALL ERRMSG_CODE2TEXT;
      807     8467    1           BUF_VECTOR.PTR$ -> CHAR$1 = ' '; /* BLANK OUT FLAGS                   */
      808     8468    1           CALL INSERT (BUF$ -> MSG$SLOT,FLAG#+1,TEXT_CODE_SIZE,TEXT_BUF.TEXT);
      809     8469    1           MSG_SIZE = TEXT_CODE_SIZE +FLAG# + 1;
      810     8470    1           CALL ERRMSG_WRITE;
      811     8471    1           GOTO ERRMSG_EXIT;
      812     8472        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:33   
      813     8473                                                /* A file is open                     */
      814     8474    1   ERRMSG_OPENED: ;
      815     8475    1           IF M$STAR$ -> F$DCB.ORG ~= %KEYED#
      816     8476    1            THEN                           /* Unsuitable for use as message file */
      817     8477    2              DO;
      818     8478    2   BAD_MSG_FILE:  EMR_RESULTS.NOFILE = TRUE;
      819     8479    2                  GOTO ERRMSG_BAILOUT;
      820     8480    2                  END;
      821     8481        /**/
      822     8482    1           READKEY.COUNT = 5;              /* FIVE BYTE KEYS                     */
      823     8483    1           READKEY.CODE = CODE;            /* USE CODE FOR KEY                   */
      824     8484    1           READKEY.SEQ = 0;                /* FIRST REC IN MESSAGE               */
      825     8485        /**/
      826     8486    1           EMR_RFPT.BUF_ = BUF_VECTOR;
      827     8487    1           EMR_RFPT.V.KEYS# = TRUE;        /* KEYED READ                         */
      828     8488    1           CALL M$MREAD (EMR_RFPT) ALTRET (ERRMSG_KRERR);
      829     8489        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:34   
      830     8490    1   ERRMSG_1:                               /* We are positioned in the file      */
      831     8491                                                /* after reading a record             */
      832     8492        /**/
      833     8493    1           IF V$# -> FPT$ERRMSG.POINTER > 0 THEN
      834     8494    2              DO;                          /* Request to print pointer           */
      835     8495    2                IF V$# -> FPT$ERRMSG.POINTER > %SLOT_SIZE THEN
      836     8496    3                   DO;                     /* It won't fit in first slot.        */
      837     8497    3                     EMR_RESULTS.BADPOINT = TRUE;
      838     8498    3                     GOTO ERRMSG_ALTRTN;
      839     8499    3                     END;
      840     8500    2                BUF$ -> MSG$SLOT = ' ';    /* Clear the buffer slot              */
      841     8501    2                BUF$ -> MSG$SLOTARRAY(V$# -> FPT$ERRMSG.POINTER -1) = '^';
      842     8502    2                MSG_SIZE = V$# -> FPT$ERRMSG.POINTER;
      843     8503    2                CALL ERRMSG_WRITE;
      844     8504        /**/                                    /* Pointer printed.  Must restore msg */
      845     8505    2                EMR_PRECFPT.V.KEYS# = FALSE;
      846     8506    2                EMR_PRECFPT.V.N# = -1;
      847     8507    2                CALL M$MPRECORD (EMR_PRECFPT) ALTRET(ERRMSG_ALTRTN);
      848     8508    2                CALL HFF$TRAPALT ALTRET(ERRMSG_BAILOUT); /* Re-establish         */
      849     8509    2                EMR_RFPT.V.KEYS# = FALSE;
      850     8510    2                BUF$ -> MSG$SLOT = ' ';
      851     8511    2                BUF$ -> MSG$SLOT = SUBSTR(FLAGBUF,0,FLAG#); /* Clear the buffer  */
      852     8512    2                CALL M$MREAD (EMR_RFPT) ALTRET(ERRMSG_ALTRTN);
      853     8513    2                CALL HFF$TRAPALT ALTRET(ERRMSG_BAILOUT); /* Re-establish         */
      854     8514    2                END;
      855     8515        /**/
      856     8516    1           EMR_RESULTS.MSGCOMP = TRUE;     /* Assume message will fit in buffer  */
      857     8517    1           EMR_RFPT.V.KEYS# = FALSE;       /* SEQUEN READS                       */
      858     8518    1           MSG_SIZE = M$STAR$ -> F$DCB.ARS + FLAG#; /* GET MESSAGE SIZE          */
      859     8519    1           MSG_FLGS_CHAR = BUF_VECTOR.PTR$ -> CHAR$1;
      860     8520                                                /* GET CONTROL FLAGS FROM RECORD      */
      861     8521    1           BUF_VECTOR.PTR$ -> CHAR$1 = ' ';
      862     8522                                                /* AND BLANK THEM OUT IN BUFFER       */
      863     8523        /**/
      864     8524    1           EMR_RESULTS.CODEUSED = READKEY.CODE;
      865     8525        /**/
      866     8526    1   ERRMSG_2:                               /* We read (or were passed) a record  */
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:35   
      867     8527    1           REC_COUNT = 1;
      868     8528                                                /* Do some formatting on the text     */
      869     8529    1           IF MSG_FLGS.SUB = TRUE          /* IF possible substitutions          */
      870     8530    1            THEN
      871     8531    1               CALL ERRMSG_SUB ALTRET(ERRMSG_ALTRTN);
      872     8532    1           IF V$# -> FPT$ERRMSG.INCLCODE   /* IF error code to be included       */
      873     8533    1            AND V$# -> FPT$ERRMSG.NREAD = FALSE /* AND error code is meaningful  */
      874     8534    1            THEN
      875     8535    1              CALL INCLCODE;
      876     8536        /**/
      877     8537    1           CALL ERRMSG_WRITE;              /* Write the first (substituted)      */
      878     8538                                                /* record of ERRMSG text              */
      879     8539        /**/
      880     8540    2           DO WHILE (MSG_FLGS.CONT = TRUE); /* LOOP UNTIL DONE WITH MESSAGE      */
      881     8541    2              CALL BUMP_BUFFER ALTRET(ERRMSG_EXIT);
      882     8542        /**/
      883     8543    2              EMR_RFPT.BUF_ = BUF_VECTOR;
      884     8544    2              CALL M$MREAD (EMR_RFPT) ALTRET (READ_NXT_ALT); /* Read next record */
      885     8545    3              DO WHILE (FALSE);            /* NEVER DO                           */
      886     8546    3   READ_NXT_ALT: EMR_RESULTS.INERR = TRUE;
      887     8547    3                 IF TRUE THEN GOTO ERRMSG_EXIT; /* Quit via compiler kluge       */
      888     8548    3                 END;
      889     8549                                                /* READ NEXT RECORD TO BUFFER         */
      890     8550    2              MSG_SIZE = M$STAR$ -> F$DCB.ARS + FLAG#; /* SET MESSAGE SIZE       */
      891     8551    2              REC_COUNT = REC_COUNT + 1;
      892     8552    2              MSG_FLGS_CHAR = BUF_VECTOR.PTR$ -> CHAR$1;
      893     8553    2              BUF_VECTOR.PTR$ -> CHAR$1 = ' ';
      894     8554                                                /* PICK UP AND BLANK OUT FLAGS        */
      895     8555    2              IF MSG_FLGS.SUB = TRUE THEN
      896     8556    2                 CALL ERRMSG_SUB ALTRET(ERRMSG_ALTRTN);
      897     8557                                                /* DO THE SUBSTITUTION                */
      898     8558    2              IF (V$# -> FPT$ERRMSG.INCLCODE)
      899     8559    2               THEN                        /* ALIGN                              */
      900     8560    3                DO;
      901     8561    3                 COUNT = TEXT_CODE_SIZE +1;
      902     8562    3                 CALL PUSH_RIGHT(0,0,1);
      903     8563    3                 CALL INSERT(BUF$ -> MSG$SLOT,FLAG#+1,COUNT,' ');
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:36   
      904     8564    3                 END;
      905     8565    2              CALL ERRMSG_WRITE;
      906     8566    2              END;
      907     8567        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:37   
      908     8568                                                /* The message is finished            */
      909     8569        /**/
      910     8570    1           IF V$# -> FPT$ERRMSG.TYC       /* TYC display requested              */
      911     8571    1             AND DCB$ ~= ADDR(NIL)         /* A DCB does exist                   */
      912     8572    1           THEN                            /* Display the TYC information        */
      913     8573    2           DO J = 0 TO 1;                  /* There are two types of TYC words   */
      914     8574    2              CALL BUMP_BUFFER ALTRET(ERRMSG_EXIT);
      915     8575    2              CALL INSERT (BUF$ -> MSG$SLOT,MSG_SIZE,,'TYC=');
      916     8576    2              MSG_SIZE = MSG_SIZE +4;
      917     8577    3              DO I = 1 TO NUM_TYCS;
      918     8578    3                 IF DCB$ -> F$DCB.TYC (J) & TYC_MASK(I)
      919     8579    3                 THEN                      /* This TYC bit is active             */
      920     8580    4                 DO;
      921     8581    4                    CALL INSERT (BUF$ -> MSG$SLOT,MSG_SIZE,,
      922     8582    4                      SUBSTR(TYC_NAME(I),0,TYC_N_LEN(I)),',');
      923     8583    4                    MSG_SIZE = MSG_SIZE + TYC_N_LEN(I) +1;
      924     8584    4                    END;
      925     8585    3                 END;
      926     8586    2              IF SUBSTR(BUF$->MSG$SLOT,MSG_SIZE-1,1) = ',' THEN
      927     8587    3               DO;
      928     8588    3                 MSG_SIZE = MSG_SIZE -1;   /* Stomp on dangling comma            */
      929     8589    3                 CALL INSERT (BUF$ -> MSG$SLOT,MSG_SIZE,,' ');
      930     8590    3                 CALL ERRMSG_WRITE;
      931     8591    3                 END;
      932     8592    2              END;
      933     8593        /**/
      934     8594    1           GOTO ERRMSG_EXIT;
      935     8595        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:38   
      936     8596    1   ERRMSG_KRERR:                           /* The EXACT message is not available */
      937     8597                                                /* Perhaps SUBSTITUTIONs would help?  */
      938     8598        /**/
      939     8599    1           IF NOT V$# -> FPT$ERRMSG.SUBMESS
      940     8600    1            THEN                           /* Doesn't want substitute message    */
      941     8601    1              GOTO SETNOMSG;
      942     8602        /**/
      943     8603        /*  Look for lower SEV message                                                */
      944     8604        /**/
      945     8605    1           EMR_PRECFPT.V.KEYS# = FALSE;    /* POSITION BY NUMBER NOT KEY         */
      946     8606    1           EMR_PRECFPT.V.N# = -1;          /* MOVE BACK ONE                      */
      947     8607        /**/
      948     8608    1           CALL M$MPRECORD (EMR_PRECFPT) ALTRET (MID_DFLT);
      949     8609        /**/
      950     8610    1           IF PRECKEY.CODE.ERROR = CODE.ERROR
      951     8611    1            AND PRECKEY.CODE.MON = CODE.MON
      952     8612    1            AND PRECKEY.CODE.MID = CODE_.MID
      953     8613    1            AND PRECKEY.CODE.FCG = CODE_.FCG
      954     8614    1            THEN                           /* Lower SEV worked                   */
      955     8615    2              DO;
      956     8616    2   SUB_FOUND:                              /* We found a substitute!             */
      957     8617    2              IF PRECKEY.SEQ > 0
      958     8618    2               THEN                        /* We need to back up a little        */
      959     8619    3                DO;
      960     8620    3                 EMR_PRECFPT.V.N# = -(PRECKEY.SEQ);
      961     8621    3                 EMR_PRECFPT.V.KEYS# = FALSE;
      962     8622                                                /* Back up SEQ records                */
      963     8623    3                 CALL M$MPRECORD (EMR_PRECFPT) ALTRET (SETNOMSG);
      964     8624    3                 END;
      965     8625        /**/
      966     8626    2              EMR_RFPT.V.KEYS# = FALSE;    /* Sequential READ of associated data */
      967     8627    2              CALL M$MREAD (EMR_RFPT) ALTRET (SETNOMSG);
      968     8628        /**/
      969     8629    2              EMR_RESULTS.ALTMSG = TRUE;   /* We used a substitute message       */
      970     8630    2              GOTO ERRMSG_1;               /* Return to READing file             */
      971     8631    2              END;
      972     8632        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:39   
      973     8633    1   MID_DFLT:                               /* Try it with null MID               */
      974     8634    1           EMR_PRECFPT.V.KEYS# = TRUE;     /* Position by KEY                    */
      975     8635    1           EMR_PRECFPT.V.N# = 0;
      976     8636    1           PRECKEY.COUNT = 5;
      977     8637    1           PRECKEY.CODE = CODE;
      978     8638    1           PRECKEY.CODE.MID = 0;
      979     8639    1           PRECKEY.SEQ=0;
      980     8640        /**/
      981     8641    1           CALL M$MPRECORD (EMR_PRECFPT) ALTRET (MID_DFLT2);
      982     8642        /**/
      983     8643    1           IF PRECKEY.CODE.ERROR = CODE.ERROR
      984     8644    1            AND PRECKEY.CODE.MON = CODE.MON
      985     8645    1            AND PRECKEY.CODE.MID = 0
      986     8646    1            AND PRECKEY.CODE.FCG = CODE_.FCG
      987     8647    1              THEN                         /* Null MID worked                    */
      988     8648    1               GOTO SUB_FOUND;
      989     8649        /**/
      990     8650    1   MID_DFLT2:                              /* Look for lower SEV, null MID       */
      991     8651    1           EMR_PRECFPT.V.KEYS# = FALSE;    /* POSITION BY NUMBER                 */
      992     8652    1           EMR_PRECFPT.V.N# = -1;          /* BACK UP ONE                        */
      993     8653        /**/
      994     8654    1           CALL M$MPRECORD(EMR_PRECFPT) ALTRET(FCG_DFLT);
      995     8655        /**/
      996     8656    1           IF PRECKEY.CODE.ERROR = CODE.ERROR
      997     8657    1            AND PRECKEY.CODE.MON = CODE.MON
      998     8658    1            AND PRECKEY.CODE.MID = 0
      999     8659    1            AND PRECKEY.CODE.FCG = CODE_.FCG
     1000     8660    1             THEN                          /* Lower SEV, nul MID worked          */
     1001     8661    1               GOTO SUB_FOUND;
     1002     8662        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:40   
     1003     8663    1   FCG_DFLT:                               /* Try null FCG and MID               */
     1004     8664    1           EMR_PRECFPT.V.KEYS# = TRUE;     /* Position by KEY                    */
     1005     8665    1           EMR_PRECFPT.V.N# = 0;
     1006     8666    1           PRECKEY.COUNT = 5;
     1007     8667    1           PRECKEY.CODE = CODE;
     1008     8668    1           PRECKEY.CODE.FCG_ = FALSE;
     1009     8669    1           PRECKEY.CODE.MID = 0;
     1010     8670    1           PRECKEY.SEQ = 0;
     1011     8671        /**/
     1012     8672    1           CALL M$MPRECORD(EMR_PRECFPT) ALTRET(FCG_DFLT2);
     1013     8673        /**/
     1014     8674    1           IF PRECKEY.CODE.ERROR = CODE.ERROR
     1015     8675    1            AND PRECKEY.CODE.MON = CODE.MON
     1016     8676    1            AND PRECKEY.CODE.MID = 0
     1017     8677    1            AND PRECKEY.CODE.FCG = 0
     1018     8678    1             THEN                          /* Null FCG & MID worked              */
     1019     8679    1               GOTO SUB_FOUND;
     1020     8680        /**/
     1021     8681    1   FCG_DFLT2:                              /* Try lower SEV, null FCG & MID      */
     1022     8682    1           EMR_PRECFPT.V.KEYS# = FALSE;    /* POSITION BY NUMBER                 */
     1023     8683    1           EMR_PRECFPT.V.N# = -1;          /* BACK UP ONE                        */
     1024     8684        /**/
     1025     8685    1           CALL M$MPRECORD (EMR_PRECFPT) ALTRET (SETNOMSG);
     1026     8686        /**/
     1027     8687    1           IF PRECKEY.CODE.ERROR = CODE.ERROR
     1028     8688    1            AND PRECKEY.CODE.MON = CODE.MON
     1029     8689    1            AND PRECKEY.CODE.MID = 0
     1030     8690    1            AND PRECKEY.CODE.FCG = 0
     1031     8691    1             THEN                          /* Null FCG & MID & lower SEV worked  */
     1032     8692    1                GOTO SUB_FOUND;
     1033     8693        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:41   
     1034     8694        /**/
     1035     8695        /*  We have tried and failed with all SUBMESS forms that the user allows.     */
     1036     8696        /**/
     1037     8697    1   SETNOMSG:                               /* Can't find usable message for CODE */
     1038     8698    1           IF USER_FILE AND V$# -> FPT$ERRMSG.SUBFILE
     1039     8699    1            THEN                           /* Try a new file with the same CODE  */
     1040     8700    2            DO;
     1041     8701    2              USER_FILE = FALSE;
     1042     8702    2              B$JIT$ -> B$JIT.DCB$ = M$STAR$;
     1043     8703    2              CALL FMP$CLSTAR;
     1044     8704    2              GOTO DFLT_FILENAME;
     1045     8705    2              END;
     1046     8706        /**/
     1047     8707    1           IF ALTCODE_EXISTS
     1048     8708    1            THEN                           /* Try it all again with a new CODE   */
     1049     8709    2              DO;
     1050     8710    2             IF NOT V$# -> FPT$ERRMSG.L6_ALTCODE
     1051     8711    2             THEN
     1052     8712    2                CODE_CHAR = ALTCODE$# -> CODE$CHAR; /* Move in new CODE          */
     1053     8713    2             ELSE
     1054     8714    2                CALL EMR$FEP2HOST(ALTCODE$# -> CODE$CHAR, CODE_CHAR);
     1055     8715    2                ALTCODE_EXISTS = FALSE;    /* Don't come through again           */
     1056     8716    2                GOTO PREPARE_FILE;         /* Try new CODE with passed file NAME */
     1057     8717    2                END;
     1058     8718        /**/                                    /* GIVE UP: no text, no way!          */
     1059     8719    1           IF V$# -> FPT$ERRMSG.SUBMESS
     1060     8720    1            THEN                           /* We can give him just the FCG       */
     1061     8721    1              GOTO CODE_ONLY;
     1062     8722    1            ELSE                           /* Nothing else will do               */
     1063     8723    2              DO;
     1064     8724    2                EMR_RESULTS.NOMSG = TRUE;
     1065     8725    2                GOTO ERRMSG_ALTRTN;
     1066     8726    2                END;
     1067     8727        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:42   
     1068     8728    1   ERRMSG_ALTRTN:
     1069     8729    1           ALTRET_FLAG = TRUE;
     1070     8730        /**/
     1071     8731    1   ERRMSG_EXIT:                            /* RETURN TO PMME HANDLER             */
     1072     8732    1           EMR_RESULTS.RECCNT = REC_COUNT;
     1073     8733    1           CALL HFF$NILERASE(RESULTS_PS#) ALTRET (RESULTS_MOVED); /* RESULTS?    */
     1074     8734    1           CALL HFF$TRAPALT ALTRET (RESULTS_MOVED); /*Don't get lost*/
     1075     8735    1           RESULTS$# -> EMR$RESULTS_CHAR = EMR_RESULTS_CHAR; /* MOVE RESULTS     */
     1076     8736    1   RESULTS_MOVED:  ;
     1077     8737        /**/
     1078     8738    1   ERRMSG_BAILOUT:  ;
     1079     8739        /**/
     1080     8740        /*  THIS ROUTINE MUST BE USED TO EXIT FROM M$ERRMSG.  NOTE THAT THE FPT       */
     1081     8741        /*  CHECKER MAY BE ENTERED IF WE TRAP.  THESE SHOULD AT LEAST BE CAUGHT WITH  */
     1082     8742        /*  AN 'HFF$TRAPALT ALTRET(ERRMSG_BAILOUT)'.  NOTE THAT THIS ROUTINE IS ALSO  */
     1083     8743        /*  SUITABLE FOR NORMAL RETURNS!                                              */
     1084     8744        /**/
     1085     8745    1           CALL HFF$TRAPALT;               /* RESET TRAP HANDLER                 */
     1086     8746    1           CALL FMD$RBUF(POOLBUF$);        /* RELEASE OUR POOL BUFFER            */
     1087     8747    1           IF ALTRET_FLAG THEN
     1088     8748    2             DO;
     1089     8749    2              B$JIT.ERR.FCG = '0515'O;     /* EM                                 */
     1090     8750    2              B$JIT.ERR.MID = '22'O;       /* R                                  */
     1091     8751    2              B$JIT.ERR.MON = '1'B;
     1092     8752    2              B$JIT.ERR.CODE = %E$ERRMSGALT;
     1093     8753    2              B$JIT.ERR.SEV = 0;
     1094     8754        /*E*    ERROR:    EMR-E$ERRMSGALT-0
     1095     8755                MESSAGE: M$ERRMSG altreturned to user.
     1096     8756                DESCRIPTION: M$ERRMSG USES THIS CODE TO ALTRET   */
     1097     8757    2              END;
     1098     8758    1            ELSE                           /* Normal return                      */
     1099     8759    1             B$JIT.ERR = '0'B;
     1100     8760        /**/
     1101     8761    1           B$JIT$ -> B$JIT.DCB$ = M$STAR$;
     1102     8762    1           CALL FMP$CLSTAR;
     1103     8763        /**/
     1104     8764    1           RETURN;                         /* RETURN TO USER                     */
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:43   
     1105     8765        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:44   
     1106     8766        /**/
     1107     8767        /*F*     NAME:     INCLCODE
     1108     8768                 DESCRIPTION: INCLCODE converts the error code into text and
     1109     8769                              adds it the the current record.
     1110     8770        */
     1111     8771        /**/
     1112     8772    1   INCLCODE: PROC;
     1113     8773        /**/
     1114     8774    2              CALL ERRMSG_CODE2TEXT;
     1115     8775    2              IF (SLOT_SIZE - MSG_SIZE >= TEXT_CODE_SIZE)
     1116     8776    2               THEN
     1117     8777    3                 DO;
     1118     8778    3                   COUNT = TEXT_CODE_SIZE + 1;
     1119     8779    3                   CALL PUSH_RIGHT(0,0,1);
     1120     8780    3                   CALL INSERT(BUF$ -> MSG$SLOT,FLAG#+1,COUNT,TEXT_BUF.TEXT);
     1121     8781    3                   END;
     1122     8782        /**/
     1123     8783    2               ELSE                         /* NO ROOM FOR TEXT CODE              */
     1124     8784    3                DO;
     1125     8785    3                  CALL INSERT(TEXT_BUF.TEXT,18,TEXT_CODE_SIZE,
     1126     8786    3                    SUBSTR(BUF$ -> MSG$SLOT,FLAG#+1,TEXT_CODE_SIZE));
     1127     8787    3                  CALL INSERT(BUF$ -> MSG$SLOT,FLAG#+1,TEXT_CODE_SIZE,TEXT_BUF.TEXT);
     1128     8788    3                  J = MSG_SIZE;
     1129     8789    3                  MSG_SIZE = TEXT_CODE_SIZE + FLAG# + 1;
     1130     8790    3                  CALL ERRMSG_WRITE;
     1131     8791    3                  MSG_SIZE = J;
     1132     8792    3                  CALL INSERT(BUF$ -> MSG$SLOT,FLAG#+1,TEXT_CODE_SIZE,
     1133     8793    3                    SUBSTR(TEXT_BUF.TEXT,18,TEXT_CODE_SIZE));
     1134     8794    3                  END;
     1135     8795    2             RETURN;
     1136     8796    2   END INCLCODE;
     1137     8797        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:45   
     1138     8798        /**/
     1139     8799        /*F*     NAME:     TOUCH_UP
     1140     8800                 DESCRIPTION:  Touches up the S and D fields of a pointer to
     1141     8801                               match one that we've already mapped on.
     1142     8802        */
     1143     8803    1   TOUCH_UP: PROC (SAMPLE,VICTIM);
     1144     8804        /**/
     1145     8805    2   DCL 1 SAMPLE ALIGNED,
     1146     8806    2         2 * BIT(24) UNAL,
     1147     8807    2         2 SD BIT(12) UNAL;
     1148     8808    2   DCL 1 VICTIM ALIGNED,
     1149     8809    2         2 * BIT(24) UNAL,
     1150     8810    2         2 SD BIT(12) UNAL;
     1151     8811        /**/
     1152     8812    2              VICTIM.SD = SAMPLE.SD;
     1153     8813    2              RETURN;
     1154     8814    2   END TOUCH_UP;
     1155     8815        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:46   
     1156     8816        /**/
     1157     8817        /*F*     NAME:     ERRMSG_SUB
     1158     8818                 DESCRIPTION: ERRMSG_SUB PERFORMS ANY SUBSTITUTION CALLED FOR
     1159     8819                           BY THE MESSAGE.
     1160     8820        */
     1161     8821        /**/
     1162     8822    1   ERRMSG_SUB: PROC ALTRET;
     1163     8823        /**/
     1164     8824    2           IF V$# -> FPT$ERRMSG.LEAVETOKEN THEN
     1165     8825    2              RETURN;
     1166     8826        /**/
     1167     8827    2           I = FLAG#;
     1168     8828    2           CPH_CLMN = -1;                  /* NOT IN CONDITIONAL PHRASE          */
     1169     8829        /**/
     1170     8830    2   SUB_1:
     1171     8831    2           CALL INDEX (I,'%',BUF$ -> MSG$SLOT,I); /* SEARCH FOR '%'              */
     1172     8832    2           IF (I >= MSG_SIZE) THEN RETURN;
     1173     8833        /**/
     1174     8834    2           IF SUBSTR(BUF$ -> MSG$SLOT,I+1,1) = 'L'
     1175     8835    2            THEN                           /* %Ln means 'n' literal              */
     1176     8836    3              DO;
     1177     8837    3                COUNT = 0;                 /* MAKE NO ROOM                       */
     1178     8838    3                CALL PUSH_RIGHT(I,2,0);    /* BUT EAT TWO                        */
     1179     8839    3                I = I+1;                   /* DON'T EXAMINE THIS LITERAL!        */
     1180     8840    3                GOTO SUB_1;
     1181     8841    3                END;
     1182     8842        /**/
     1183     8843    2           SUB_CODE = SUBSTR(BUF$ -> MSG$SLOT,I+1,2);
     1184     8844    2           J = %TOP_2SUBS#;                /* Top index for %SUB table           */
     1185     8845    3           DO WHILE (J >= 0);
     1186     8846    3              IF (SUBTYPE_TBL(J) = SUB_CODE) THEN GOTO SUBFOUND;
     1187     8847    3              J=J-1;
     1188     8848    3              END;
     1189     8849        /**/
     1190     8850    3           IF (CPH_CLMN = -1 OR UNSAT_SUB > 0) THEN DO;
     1191     8851    3              UNSAT_SUB = 1; /* NO POSSIBLE SUBS FOUND YET */
     1192     8852    3              CPH_CLMN = I;                /* START OF COND. PHRASE              */
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:47   
     1193     8853    3              I = I + 1;
     1194     8854    3              GOTO SUB_1;
     1195     8855    3              END;
     1196     8856        /**/
     1197     8857    3           IF (UNSAT_SUB < 0) THEN DO;         /* END OF PHRASE WITH MISSING SUB */
     1198     8858    3              CALL INSERT (BUF$ -> MSG$SLOT, /* DELETE PHRASE                    */
     1199     8859    3                CPH_CLMN,(SLOT_SIZE-(CPH_CLMN+1)),
     1200     8860    3                SUBSTR (BUF$ -> MSG$SLOT,(I+1)));
     1201     8861    3              MSG_SIZE = MSG_SIZE - ( I - CPH_CLMN + 1 );
     1202     8862    3              I = CPH_CLMN;
     1203     8863    3              END;
     1204     8864        /**/
     1205     8865    3           ELSE DO;                        /* KEEP PHRASE                        */
     1206     8866    3              CALL INSERT (BUF$ -> MSG$SLOT, /* DELETE % SIGNS                   */
     1207     8867    3                CPH_CLMN,( I -(CPH_CLMN+1)),
     1208     8868    3                SUBSTR (BUF$ -> MSG$SLOT,CPH_CLMN+1,(I-(CPH_CLMN+1))));
     1209     8869    3              CALL INSERT (BUF$ -> MSG$SLOT,
     1210     8870    3                I-1,(SLOT_SIZE-(I-1)),
     1211     8871    3                SUBSTR(BUF$ -> MSG$SLOT,I+1,SLOT_SIZE-(I+1)));
     1212     8872    3              I = I-1;
     1213     8873    3              MSG_SIZE = MSG_SIZE - 2;     /* DELETE TWO % SIGNS                 */
     1214     8874    3              END;
     1215     8875        /**/
     1216     8876    2           CPH_CLMN = -1;                  /* NOT IN COND. PHRASE                */
     1217     8877    2           GOTO SUB_1;
     1218     8878        /**/
     1219     8879    2   NO_FIELD:
     1220     8880    2           UNSAT_SUB = -1;   /* DELETE THIS PHRASE IF IT IS CONDITIONAL          */
     1221     8881    2           I = I + 1;
     1222     8882    2           GOTO SUB_1;                     /* NOT A SUBSTITUTE FIELD             */
     1223     8883        /**/
     1224     8884    2   SUBFOUND: IF UNSAT_SUB > 0 THEN UNSAT_SUB = 0; /* FOUND SOMEWHERE TO SUB      */
     1225     8885    2           CALL INSERT (BUF$ -> MSG$SLOT,I,3,BLANKS); /* BLANK %XX               */
     1226     8886    3           DO CASE(J);
     1227     8887        /**/
     1228     8888    3            CASE (FNSUB);                  /* FILE NAME                          */
     1229     8889    3              IF ((DCB$ = ADDR(NIL)) OR ~(V$# -> FPT$ERRMSG.SUBFN)OR
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:48   
     1230     8890    3                ((DCB$ -> F$DCB.ASN ~= %FILE#)AND(DCB$ -> F$DCB.ASN ~= %TAPE#)))
     1231     8891    3              THEN GOTO NO_FIELD;          /* NO SUBSTITUTION                    */
     1232     8892    3              TEXT_BUF.COUNT = DCB$ -> F$DCB.NAME.L;
     1233     8893    3              IF (TEXT_BUF.COUNT > MAX_SUB_SIZE) THEN TEXT_BUF.COUNT = MAX_SUB_SIZE;
     1234     8894    3              TEXT_BUF.TEXT = SUBSTR(DCB$ -> F$DCB.NAME.C,0,TEXT_BUF.COUNT);
     1235     8895    3              IF (DCB$ -> F$DCB.ACCT ~= ' ')AND
     1236     8896    4                (DCB$ -> F$DCB.ACCT ~= B$JIT$ -> B$JIT.FACCN) THEN DO;
     1237     8897    4                 COUNT = 0;
     1238     8898    5                 DO WHILE ((COUNT < SIZEC(DCB$-> F$DCB.ACCT))AND
     1239     8899    5                      (SUBSTR(DCB$ -> F$DCB.ACCT,COUNT,1) ~= ' '));
     1240     8900    5                    COUNT = COUNT + 1;
     1241     8901    5                    END;
     1242     8902    4                 CALL INSERT(TEXT_BUF.TEXT,TEXT_BUF.COUNT,COUNT+1,'.',
     1243     8903    4                   DCB$ -> F$DCB.ACCT);
     1244     8904    4                 TEXT_BUF.COUNT = TEXT_BUF.COUNT + COUNT + 1;
     1245     8905    4                 END;
     1246     8906    3              COUNT = TEXT_BUF.COUNT;
     1247     8907    3              CALL PUSH_RIGHT(I,3,1) ALTRET(NO_FIELD);
     1248     8908    3              CALL INSERT(BUF$ -> MSG$SLOT,I,COUNT,TEXT_BUF.TEXT);
     1249     8909        /**/
     1250     8910    3            CASE (ACSUB);                  /* ACCOUNT                            */
     1251     8911    3              IF ((DCB$ = ADDR(NIL)) OR ~(V$# -> FPT$ERRMSG.SUBAC))
     1252     8912    3                THEN                       /* ACCOUNT substitution not requested */
     1253     8913                                                /* or not possible.                   */
     1254     8914    3                 GOTO NO_FIELD;
     1255     8915    3              IF ((DCB$ -> F$DCB.ASN ~= %FILE#) AND
     1256     8916    3                (SUBSTR(DCB$ -> F$DCB.RES,0,2) ~= 'DP'))
     1257     8917    3                THEN                       /* Not a file or device disc          */
     1258     8918    3                 GOTO NO_FIELD;
     1259     8919    3              COUNT = SIZEC(F$DCB.ACCT);
     1260     8920    3              TEXT_BUF.TEXT = DCB$ -> F$DCB.ACCT;
     1261     8921    3              IF (TEXT_BUF.TEXT = ' ') THEN
     1262     8922    3                 TEXT_BUF.TEXT = B$JIT$ -> B$JIT.FACCN;
     1263     8923    4              DO WHILE ((COUNT > 0)AND(SUBSTR(TEXT_BUF.TEXT,COUNT-1,1) = ' '));
     1264     8924    4                 COUNT = COUNT - 1;
     1265     8925    4                 END;
     1266     8926    3              CALL PUSH_RIGHT(I,3,1) ALTRET(NO_FIELD);
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:49   
     1267     8927    3              CALL INSERT(BUF$ -> MSG$SLOT,I,COUNT,TEXT_BUF.TEXT);
     1268     8928        /**/
     1269     8929    3            CASE (DCSUB);                  /* DCBNAME                            */
     1270     8930    3              IF ((DCB$ = ADDR(NIL)) OR ~(V$# -> FPT$ERRMSG.SUBDC))
     1271     8931    3              THEN GOTO NO_FIELD;
     1272     8932    3              COUNT = DCB$ -> F$DCB.DCBNAME.L;
     1273     8933    3              CALL PUSH_RIGHT(I,3,1) ALTRET(NO_FIELD);
     1274     8934    3              CALL INSERT (BUF$ -> MSG$SLOT,I,COUNT,DCB$ -> F$DCB.DCBNAME.N);
     1275     8935        /**/
     1276     8936    3            CASE (SNSUB);                  /* SERIAL NUMBER                      */
     1277     8937    3              IF ((DCB$ = ADDR(NIL)) OR ~(V$# -> FPT$ERRMSG.SUBSN))
     1278     8938    3              THEN GOTO NO_FIELD;
     1279     8939    3              IF (DCB$ -> F$DCB.PSN = ' ')AND(DCB$ -> F$DCB.SETX = 0) THEN GOTO
              8939                       NO_FIELD;
     1280     8940    3              COUNT = SIZEC(F$DCB.PSN);
     1281     8941    3              IF DCB$ -> F$DCB.PSN ~= ' '
     1282     8942    3               THEN
     1283     8943    3                 TEXT_BUF.TEXT = DCB$ -> F$DCB.PSN;
     1284     8944    3               ELSE
     1285     8945    3                TEXT_BUF.TEXT = FM$SET$ -> FM$SET.PSN(DCB$ -> F$DCB.SETX);
     1286     8946    4              DO WHILE ((COUNT > 0)AND(SUBSTR(TEXT_BUF.TEXT,COUNT-1,1) = ' '));
     1287     8947    4                 COUNT = COUNT - 1;
     1288     8948    4                 END;
     1289     8949    3              IF TEXT_BUF.TEXT <= ' '
     1290     8950    3              THEN GOTO NO_FIELD;
     1291     8951    3              CALL PUSH_RIGHT(I,3,1) ALTRET(NO_FIELD);
     1292     8952    3              CALL INSERT(BUF$ -> MSG$SLOT,I,COUNT,TEXT_BUF.TEXT);
     1293     8953        /**/
     1294     8954    3            CASE(TASUB);                   /* TAPE SUB FIELD                     */
     1295     8955    3              IF (DCB$ = ADDR(NIL))OR
     1296     8956    3                (DCB$ -> F$DCB.IASN ~= %TAPE#) THEN GOTO NO_FIELD;
     1297     8957    3              TEXT_BUF.COUNT = 2;
     1298     8958    3              IF DCB$ -> F$DCB.ASN = %TAPE#
     1299     8959    3               THEN
     1300     8960    3                 TEXT_BUF.TEXT = 'LT';
     1301     8961    3               ELSE
     1302     8962    3                 IF DCB$ -> F$DCB.ORG = %FREE#
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:50   
     1303     8963    3                   THEN TEXT_BUF.TEXT = 'FT';
     1304     8964    3                   ELSE TEXT_BUF.TEXT = 'MT';
     1305     8965    3              IF DCB$ -> F$DCB.PSN ~= ' '
     1306     8966    3               THEN
     1307     8967    4                DO;
     1308     8968    4                 CALL INSERT(TEXT_BUF.TEXT,2,7,'#',DCB$ -> F$DCB.PSN);
     1309     8969    4                 TEXT_BUF.COUNT = 9;
     1310     8970    5                 DO WHILE ((TEXT_BUF.COUNT > 3)AND
     1311     8971    5                      (SUBSTR(TEXT_BUF.TEXT,TEXT_BUF.COUNT-1,1) = ' '));
     1312     8972    5                    TEXT_BUF.COUNT = TEXT_BUF.COUNT - 1;
     1313     8973    5                    END;
     1314     8974    4                 END;
     1315     8975    4              IF (DCB$ -> F$DCB.ASN = %TAPE#) THEN DO;
     1316     8976    4                 CALL INSERT(TEXT_BUF.TEXT,TEXT_BUF.COUNT,DCB$ -> F$DCB.NAME.L+1,
     1317     8977    4                   '/',DCB$ -> F$DCB.NAME.C);
     1318     8978    4                 TEXT_BUF.COUNT = TEXT_BUF.COUNT + DCB$ -> F$DCB.NAME.L + 1;
     1319     8979    4                 END;
     1320     8980    3              COUNT = TEXT_BUF.COUNT;
     1321     8981    3              CALL PUSH_RIGHT(I,3,1) ALTRET(NO_FIELD);
     1322     8982    3              CALL INSERT(BUF$ -> MSG$SLOT,I,COUNT,TEXT_BUF.TEXT);
     1323     8983        /**/
     1324     8984    3            CASE (U1SUB);
     1325     8985    3              K = FIELD1_PS#;
     1326     8986    3              POINT$ = FIELD1$#;
     1327     8987    3              GOTO USER_FIELD;
     1328     8988    3            CASE (U2SUB);
     1329     8989    3              K = FIELD2_PS#;
     1330     8990    3              POINT$ = FIELD2$#;
     1331     8991    3              GOTO USER_FIELD;
     1332     8992    3            CASE (U3SUB);
     1333     8993    3              K = FIELD3_PS#;
     1334     8994    3              POINT$ = FIELD3$#;
     1335     8995    3   USER_FIELD: ;                           /* COMMON CODE                        */
     1336     8996    3              CALL HFF$DSIZ(K,COUNT) ALTRET (NO_FIELD);
     1337     8997    3              TEXT_BUF.COUNT_CHAR = POINT$ -> TEXT$BUF.COUNT_CHAR;
     1338     8998    3              IF TEXT_BUF.COUNT > MAX_SUB_SIZE
     1339     8999    3               OR TEXT_BUF.COUNT > COUNT-1 /* BIGGER THAN FRAMED TEXT PART       */
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:51   
     1340     9000    3               THEN
     1341     9001    4                 DO;
     1342     9002    4                   EMR_RESULTS.BADUSUB = TRUE;
     1343     9003    4                   ALTRETURN;
     1344     9004    4                   END;
     1345     9005    3              COUNT = TEXT_BUF.COUNT;
     1346     9006    3              TEXT_BUF.TEXT = SUBSTR(POINT$ -> TEXT$BUF.TEXT,0,COUNT);
     1347     9007    3              CALL PUSH_RIGHT(I,3,1) ALTRET(NO_FIELD);
     1348     9008    3              CALL INSERT (BUF$ -> MSG$SLOT,I,COUNT,TEXT_BUF.TEXT);
     1349     9009        /**/
     1350     9010    3            CASE (UFSUB);
     1351     9011    3              IF (DCB$ = ADDR(NIL)) THEN GOTO NO_FIELD;
     1352     9012    3              EMR_UNFIDFPT.V.DCB# = ERR_DCB;
     1353     9013    3              EMR_UNFIDFPT.TEXTFID_ = VECTOR(TEXT_BUF.TEXT);
     1354     9014        /**/
     1355     9015    3              CALL M$MUNFID (EMR_UNFIDFPT) ALTRET (UNFID_ALT);
     1356     9016        /**/
     1357     9017    3   UNFID_ALT:
     1358     9018    3              COUNT = SIZEC(TEXT_BUF.TEXT);
     1359     9019    4              DO WHILE ((TEXT_BUF.TEXT_ARRAY(COUNT-1) = ' ')AND
     1360     9020    4                   (COUNT > 0));
     1361     9021    4                 COUNT = COUNT-1;
     1362     9022    4                 END;
     1363     9023    3              CALL PUSH_RIGHT(I,3,1) ALTRET(NO_FIELD);
     1364     9024    3              CALL INSERT (BUF$ -> MSG$SLOT,I,COUNT,TEXT_BUF.TEXT);
     1365     9025    3            END;                           /* END DO CASE                        */
     1366     9026    2           I = I + COUNT;
     1367     9027    2           GOTO SUB_1;
     1368     9028    2   END;                                    /* END SUB                            */
     1369     9029        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:52   
     1370     9030        /**/
     1371     9031        /*F*     NAME: ERRMSG_CODE2TEXT
     1372     9032                 DESCRIPTION: ERRMSG_CODE2TEXT TAKE THE CONTENTS OF THE CELL CODE
     1373     9033                       CONVERTS IT TO PRINTABLE TEXT IN THE CELL TEXT_BUF.
     1374     9034        */
     1375     9035        /**/
     1376     9036    1   ERRMSG_CODE2TEXT: PROC;
     1377     9037    3           DO I = 0 TO 2;                  /* TRANSLATE FCG - MID                */
     1378     9038    3              IF (CODE.FCGMID(I) = 0) THEN TEXT_BUF.TEXT_ARRAY(I) = ' ';
     1379     9039    3              ELSE IF (CODE.FCGMID(I) < 48) THEN /* ITS A LETTER                 */
     1380     9040    3                    TEXT_BUF.UBIN_ARRAY(I) = CODE.FCGMID(I) + 64;
     1381     9041    3                 ELSE TEXT_BUF.UBIN_ARRAY(I) = CODE.FCGMID(I);
     1382     9042    3              END;
     1383     9043        /**/
     1384     9044    2           TEXT_BUF.TEXT_ARRAY(3) = '-';
     1385     9045    2           I = 4;
     1386     9046        /**/
     1387     9047    3           IF (CODE.MON = TRUE) THEN DO;
     1388     9048    3              TEXT_BUF.TEXT_ARRAY(I) = 'M';
     1389     9049    3              I = I + 1;
     1390     9050    3              END;
     1391     9051        /**/
     1392     9052    2           CALL BINCHAR (SUBSTR(TEXT_BUF.TEXT,I,5),CODE.ERROR);
     1393     9053    2           I = I + 5;
     1394     9054        /**/
     1395     9055    2           TEXT_BUF.TEXT_ARRAY(I) = '-';
     1396     9056    2           I = I + 1;
     1397     9057        /**/
     1398     9058    2           CALL BINCHAR (SUBSTR(TEXT_BUF.TEXT,I,1),CODE.SEV);
     1399     9059    2           I = I + 1;
     1400     9060        /**/
     1401     9061    2           CALL INSERT (TEXT_BUF.TEXT,I,TEXT_CODE_SIZE+1-I,BLANKS);
     1402     9062        /**/
     1403     9063    2           RETURN;
     1404     9064    2   END;                                    /* END CODE2 TEXT                     */
     1405     9065        /**/
     1406     9066        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:53   
     1407     9067        /**/
     1408     9068        /*F*     NAME: ERRMSG_WRITE
     1409     9069        *
     1410     9070                 DESCRIPTION: ERRMSG_WRITE WRITES THE ERROR MESSAGE THROUGH ANY
     1411     9071                      USER PASSED DCBS.
     1412     9072        */
     1413     9073    1   ERRMSG_WRITE: PROC ;
     1414     9074        /**/
     1415     9075    2           IF EMR_WFPT.V.DVBYTE.VFC# = FALSE
     1416     9076    2            THEN
     1417     9077    3              DO;
     1418     9078    3               EMR_WFPT.BUF_.BUF$ = BUF$;
     1419     9079    3               EMR_WFPT.BUF_.BOUND = MSG_SIZE - 1;
     1420     9080    3               END;
     1421     9081    2            ELSE
     1422     9082    3              DO;
     1423     9083    3               EMR_WFPT.BUF_.BUF$ = ADDR(WR_VFC_BUF);
     1424     9084    3               EMR_WFPT.BUF_.BOUND = MSG_SIZE;
     1425     9085    3               WR_VFC_BUF.TEXT = BUF$ -> MSG$SLOT; /* Put text in VFC            */
     1426     9086    3               END;
     1427     9087        /**/
     1428     9088    2           IF V$# -> FPT$ERRMSG.OUTDCB1 ~= 0
     1429     9089    2            AND EMR_RESULTS.OUTERR1 = FALSE THEN
     1430     9090    3            DO;
     1431     9091    3              EMR_WFPT.V.DCB# = V$# -> FPT$ERRMSG.OUTDCB1;
     1432     9092    3              CALL M$MWRITE (EMR_WFPT) ALTRET (ERRMSG_W1ERR);
     1433     9093    4              DO WHILE(FALSE);
     1434     9094    4   ERRMSG_W1ERR: EMR_RESULTS.OUTERR1 = TRUE;
     1435     9095    4                 EMR_RESULTS.ERRCODE1 = B$JIT$ -> B$JIT.ERR;
     1436     9096    4                 END;
     1437     9097    3              END;
     1438     9098        /**/
     1439     9099    2   WRITE_2:
     1440     9100    2           IF V$# -> FPT$ERRMSG.OUTDCB2 ~= 0
     1441     9101    2            AND EMR_RESULTS.OUTERR2 = FALSE THEN
     1442     9102    3            DO;
     1443     9103    3              EMR_WFPT.V.DCB# = V$# -> FPT$ERRMSG.OUTDCB2;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:54   
     1444     9104    3              CALL M$MWRITE (EMR_WFPT) ALTRET (ERRMSG_W2ERR);
     1445     9105    4              DO WHILE(FALSE);
     1446     9106    4   ERRMSG_W2ERR: EMR_RESULTS.OUTERR2 = TRUE;
     1447     9107    4                 EMR_RESULTS.ERRCODE2 = B$JIT$ -> B$JIT.ERR;
     1448     9108    4                 END;
     1449     9109    3              END;
     1450     9110        /**/
     1451     9111    2           RETURN;
     1452     9112        /**/
     1453     9113    2        END ERRMSG_WRITE;
     1454     9114        /**/
     1455     9115        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:55   
     1456     9116        /**/
     1457     9117        /*F*     NAME: BUMP_BUFFER
     1458     9118        *
     1459     9119                 DESCRIPTION: BUMP_BUFFER increments the buffer pointer and
     1460     9120                      does all the necessary accounting.  This routine will
     1461     9121                      ALTRET if there is no room in the buffer and no DCBs
     1462     9122                      are left.
     1463     9123        */
     1464     9124    1   BUMP_BUFFER: PROC ALTRET;
     1465     9125        /**/
     1466     9126    2           IF (CUR_REC < ERR_RECS)
     1467     9127    2            THEN                           /* Empty slots remain                 */
     1468     9128    3            DO;
     1469     9129    3              CUR_REC = CUR_REC + 1;       /*      NEXT SLOT                     */
     1470     9130    3              BUF$ = PINCRC(BUF$,SLOT_SIZE);
     1471     9131    3              END;
     1472     9132    2           ELSE                            /* No slots left to read in message   */
     1473     9133    3            DO;
     1474     9134    3              EMR_RESULTS.MSGCOMP = FALSE; /* Message didn't fit in buffer       */
     1475     9135    3              IF (V$# -> FPT$ERRMSG.OUTDCB1 = 0)AND
     1476     9136    3                (V$# -> FPT$ERRMSG.OUTDCB2 = 0)
     1477     9137    3                THEN                       /* No place to write to               */
     1478     9138    3                  ALTRETURN;               /* Abandon ship                       */
     1479     9139    3               ELSE                        /* DCBs still are useable             */
     1480     9140    3                  ;                        /* Write over last buffer slot        */
     1481     9141    3              END;
     1482     9142        /**/
     1483     9143    2           BUF_VECTOR.PTR$ = PINCRC(BUF$,FLAG#);
     1484     9144    2           BUF_VECTOR.BOUND = SLOT_SIZE - FLAG# - 1;
     1485     9145    2           BUF$ -> MSG$SLOT = ' ';
     1486     9146    2           MSG_SIZE = FLAG#;
     1487     9147        /**/
     1488     9148    2           RETURN;
     1489     9149        /**/
     1490     9150    2        END BUMP_BUFFER;
     1491     9151        /**/
     1492     9152        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:56   
     1493     9153        /**/
     1494     9154        /*F*     NAME: PUSH_RIGHT
     1495     9155        *
     1496     9156                 DESCRIPTION: PUSH_RIGHT WILL CREATE A HOLE IN THE ERROR MESSAGE
     1497     9157                      in the buffer so that a field can be substituted into it.
     1498     9158                      The field begins at char START and is COUNT long.  NOTE that
     1499     9159                      this routine assumes that START points to a TOKLEN-character token
     1500     9160                      that is to be eliminated (in favor of the thing to be
     1501     9161                      put in the hole).
     1502     9162        */
     1503     9163        /**/
     1504     9164    1   PUSH_RIGHT: PROC (START,TOKLEN,MIN_HOLE) ALTRET;
     1505     9165    2   DCL START SBIN;                         /* Start of string to move            */
     1506     9166    2   DCL TOKLEN SBIN;                        /* Length of token to eliminate       */
     1507     9167    2   DCL MIN_HOLE SBIN;                      /* Minimum length of hole to be made  */
     1508     9168        /**/
     1509     9169    2           IF COUNT < MIN_HOLE THEN
     1510     9170    2              ALTRETURN;
     1511     9171        /**/
     1512     9172    2           IF (MSG_SIZE + COUNT - TOKLEN) > SLOT_SIZE THEN
     1513     9173    3              DO;
     1514     9174    3                COUNT = SLOT_SIZE - MSG_SIZE + TOKLEN;
     1515     9175    3                EMR_RESULTS.TRUNCSUB = TRUE;
     1516     9176    3                END;
     1517     9177        /**/
     1518     9178        /* Now, depending on the size of the hole to be made, we either move          */
     1519     9179        /* from right to left, left to right, or not at all.                          */
     1520     9180        /**/
     1521     9181    2           IF COUNT > TOKLEN THEN
     1522     9182    3              DO;
     1523     9183    3                J = MSG_SIZE-1;
     1524     9184    4                DO WHILE (J >= START+TOKLEN);
     1525     9185    4                   BUF$ -> MSG$SLOTARRAY(J+COUNT-TOKLEN) =
     1526     9186    4                     BUF$ -> MSG$SLOTARRAY(J);
     1527     9187    4                   J = J-1;
     1528     9188    4                   END;
     1529     9189    3                END;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:57   
     1530     9190        /**/
     1531     9191    2           IF (COUNT < TOKLEN) THEN
     1532     9192    3              DO;
     1533     9193    4                DO J = START+TOKLEN TO MSG_SIZE - 1;
     1534     9194    4                   BUF$ -> MSG$SLOTARRAY(J+COUNT-TOKLEN) =
     1535     9195    4                     BUF$ -> MSG$SLOTARRAY(J);
     1536     9196    4                   END;
     1537     9197    3                CALL INSERT(BUF$ -> MSG$SLOT,MSG_SIZE-(TOKLEN-COUNT),(TOKLEN-COUNT),' '
              9197                         );
     1538     9198    3                END;
     1539     9199        /**/
     1540     9200    2           MSG_SIZE = MSG_SIZE + COUNT - TOKLEN;
     1541     9201        /**/
     1542     9202    2           RETURN;
     1543     9203        /**/
     1544     9204    2        END PUSH_RIGHT;
     1545     9205        /**/
     1546     9206    1   END EMR$ERRMSG;

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:58   
--  Include file information  --

   B_MACROS_C.:E05TOU  is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
   UM_ERRORS_C.:E05TOU  is referenced.
   UM$CP6V_C.:E05TOU  is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   FM$SET.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure EMR$ERRMSG.

   Procedure EMR$ERRMSG requires 2175 words for executable code.
   Procedure EMR$ERRMSG requires 118 words of local(AUTO) storage.

    No errors detected in file EMR$ERRMSG.:E05TSI    .

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:59   

 Object Unit name= EMR$ERRMSG                                 File name= EMR$ERRMSG.:E05TOU
 UTS= JUL 29 '97 15:21:48.60 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS    186    272  EMR$ERRMSG
    2   Proc  even  none  2175   4177  EMR$ERRMSG
    3  RoData even  none    45     55  EMR$ERRMSG

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        0  EMR$ERRMSG
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:60   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 FMD$GBUF
 yes     yes           Std       0 HFF$TRAPALT
 yes     yes           Std       1 HFF$NILERASE
 yes     yes           Std       1 M$MPRECORD
 yes     yes           Std       2 HFF$DSIZ
         yes           Std       4 FMF$ICORRES
         yes           Std       0 FMP$CLSJ
         yes           Std       1 FMM$SCRUB
 yes     yes           Std       1 M$MREAD
         yes           Std       1 FMD$RBUF
         yes           Std       0 UDN$MAGIC
         yes           Std       2 EMR$FEP2HOST
         yes           Std       0 FMP$CLSTAR
 yes     yes           Std       0 UMD$CHKOPN
         yes           Std       0 FMM$DFLOPN
 yes     yes           Std       1 M$MUNFID
 yes     yes           Std       1 M$MWRITE
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$JIT$                                B$ROSEG$
     FM$SET$                               B$PS0$                                B$PS1$
     B$PS2$                                B$PS3$                                B$PS4$
     B$PS5$                                B$PS6$                                B$PS7$
     B$PS8$                                B$PS9$                                B_MPT
r    B$M$STAR$                        r    B$M$LM$                               B_VECTNIL
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:61   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:62   


        1        1        /*M*     EMR$ERRMSG - ERROR MESSAGE REPORTER */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*/
        8        8        /*P*     NAME:     EMR$ERRMSG
        9        9        *
       10       10                 PURPOSE:  EMR$ERRMSG is a monitor service called to read messages
       11       11                      from a file and output them to the user.  */
       12       12        /**/
       13       13        /*F*     NAME:     EMR$ERRMSG
       14       14        *
       15       15                 FUNCTION: EMR$ERRMSG is a service called by the user to read
       16       16                      messages from a file into the users buffer and to optionally
       17       17                      output them through the users DCBs. The message is requested
       18       18                      from the appropriate error message file with an ERROR CODE
       19       19                      with the possibility of a substitue message being supplied
       20       20                      if the requested one doesn't exist. The requested message
       21       21                      may have a DCB name, file name, serial number and up to three
       22       22                      user passed fields substituted into it before being
       23       23                      returned to the caller.                          */
       24       24        /**/
       25       25        /*D*     NAME:     EMR$ERRMSG
       26       26        *
       27       27                 CALL:     EMR$ERRMSG is called via a PMME with an FPT containing
       28       28                      ten parameters. These parameters are:
       29       29        *
       30       30                      V - Value field of FPT contains:
       31       31                           DCB - number of DCB on which error occured if applicable
       32       32                                 DCB is used to obtain DCB name, file name and
       33       33                                 serial number to substitute into message.
       34       34                           OUTDCB1 -  number of DCB to output message through.
       35       35                           OUTDCB2 -  number of second output DCB.
       36       36                           FLAGLEV -  number of asterisks that are to be used to
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:63   
       37       37                                 flag this message as an error message.
       38       38                           TYC - bit indicating whether or not TYC information from
       39       39                                 DCB is to be displayed.
       40       40                           SUBMESS - bit indicating whether or not a substitute
       41       41                                 message is acceptable.
       42       42                           SUBFN -
       43       43                           SUBDC -
       44       44                           SUBSN - BITS INDICATING WHETHER OR NOT THE SPECIAL
       45       45                                FIELDS %FN,%DC AND %SN ARE TO BE CONSIDERED AS
       46       46                                CANDIDATES FOR SUBSTITUTION.
       47       47        *
       48       48                      CODE - ERROR CODE used as a key to find the correct message
       49       49        *
       50       50                      BUF - Users buffer consisting of some number of 120 character
       51       51                           slots into which the message is read.
       52       52        *
       53       53                      FILENAME - File from which the message is to be read.
       54       54        *
       55       55                      FILEACCT - Account of error message file.
       56       56        *
       57       57                      FILEPASS - Password of error message file.
       58       58        *
       59       59                      FIELD1 - First user passed text field to substitute into the
       60       60                           message.
       61       61        *
       62       62                      FIELD2 - Second user passed field.
       63       63        *
       64       64                      FIELD3 - Third user passed field
       65       65        *
       66       66                      RESULTS - A word of status communicated to the user about
       67       67                           this call to EMR$ERRMSG. RESULTS contains:
       68       68                           NOFILE - bit indicating that EMR$ERRMSG was unable to
       69       69                                open the requested file.
       70       70                           NOMSG - Bit indicating that no message for the requested
       71       71                                code was found.
       72       72                           ALTMSG - Bit indicating that a substitute message was
       73       73                                used.
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:64   
       74       74                           MSGCOMP - Bit indicating that the entire message is
       75       75                                contained in the users buffer.
       76       76                           BADCALL - EMR$ERRMSG was called with illegal parameters.
       77       77                           OUTERR1 - EMR$ERRMSG recieved an error writing through
       78       78                                the first user passed DCB.
       79       79                           OUTERR2 - Error on second output DCB.
       80       80                           RECCNT - Ubin(9) field containing the number of
       81       81                                significant records in the users buffer. That is
       82       82                                the number of slots in the buffer that were filled
       83       83                                on this call to EMR$ERRMSG.
       84       84        *
       85       85            INTERFACE: EMR$ERRMSG calls:
       86       86                      FMM$DFLOPN - To open M$* to error message file.
       87       87                      FMP$CLSTAR - TO CLOSE M$*.
       88       88                      Also EMR$ERRMSG uses the B$PSn$ pointers to look at
       89       89                        the parameters passed to it.
       90       90        *
       91       91            DESCRIPTION:   When EMR$ERRMSG is entered it initializes a
       92       92                 some pointers and the FPTs in the AUTO stack. If the users
       93       93                 buffer is too small or the passed ERROR CODE is illegal then
       94       94                 BADCALL is set in the RESULTS area and an ALTRETURN is made
       95       95                 to the caller.
       96       96                   Otherwise M$* DCB is set up to open either the user passed
       97       97                 file or the default file for the passed code. If this open fails
       98       98                 then the NOFILE bit is set and EMR$ERRMSG ALTRETURNS.  If the
       99       99                 open is sucessful then the passed code is used as a key in
      100      100                 reading the file. If no record with this key exists then if
      101      101                 if no substitute message is allowed then NOMSG is set and an
      102      102                 ALTRETURN executed. If a substitute message is desired then a
      103      103                 search is made first for a less verbose message and then for
      104      104                 the default message for this ERROR#. If a message is
      105      105                 found it is used else NOMSG is set and an ALTRETURN executed.
      106      106                   THE REQUESTED NUMBER OF ASTERISKS (0-4) ARE PLACED IN THE
      107      107                 FIRST FOUR CHARACTER POSITIONS OF THE BUFFER. IF THE TEXT CODE
      108      108                 IS TO BE OUTPUT THEN IT IS CONVERTED TO TEXT, PLACED IN THE
      109      109                 BUFFER AND WRITTEN AS THE FIRST RECORD OF THE MESSAGE.
      110      110                   When a record is read the control flags in the first byte of
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:65   
      111      111                 the record are examined to see if any substitution is to be
      112      112                 performed. If it is then ERRMSG_SUB is called to do it, it calls
      113      113                 PUSH_RIGHT to make room in the record for the substitution.
      114      114                 The substituted message is then written out if DCBs are
      115      115                 provided.  If VFC is specified, the record is copied into a
      116      116                 buffer and written out with the specified VFC in front and
      117      117                 VFC = YES.
      118      118                   If the message is continued then the next record from the file
      119      119                 is read into the next slot in the buffer until the buffer is full
      120      120                 and then the last buffer slot is used. When all records in
      121      121                 the message have been read and written to the user then
      122      122                 RECCNT is set in RESULTS and EMR$ERRMSG returns.
      123      123        *
      124      124        */
      125      125        /**/
      126      126        /*K*     ERROR_CODE     An ERROR CODE is the means by which a user of CP-6
      127      127                      is informed of any error condition that might arise in the
      128      128                      course of his processing. All ERROR CODES have the same
      129      129                      format no matter what the source.
      130      130                      This format is:
      131      131                           XYZ-#####-S
      132      132        *
      133      133                                XY - is the two letter FCG identifing the functional
      134      134                                   area which detected the error.
      135      135                                Z - the one letter identifer of the module within
      136      136                                   the FCG.
      137      137                                ##### - is the ERROR# uniquely identifing
      138      138                                  the error condition detected, The ERROR# will be
      139      139                                  the same for a given error regardless of where
      140      140                                  it was detected. For monitor detected errors the
      141      141                                  ERROR# is preceded by an 'M'.
      142      142                                S - The severity of the error.When communicated to
      143      143                                  the user the SEVERITY indicates whether a job
      144      144                                  encountreing this error and chosing to let the
      145      145                                  monitor handle it would be errored,aborted or
      146      146                                  allowed to continue. When the ERROR CODE is used
      147      147                                  in an M$ERRMSG call the SEVERITY field
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:66   
      148      148                                  indicates the level of detail requested in the
      149      149                                  error message.                                 */
      150      150        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:67   
      151      151        EMR$ERRMSG: PROC ;

    151  2 000000   000000 700200 xent  EMR$ERRMSG   TSX0  ! X66_AUTO_0
         2 000001   000166 000000                    ZERO    118,0

      152      152        /**/
      153      153        /*************************************************************/
      154      154        /*   %SUBS   %SUBS   %SUBS   %SUBS   %SUBS   %SUBS   %SUBS   */
      155      155        /*************************************************************/
      156      156        /**/
      157      157        %SUB TRUE = '1'B;
      158      158        %SUB FALSE = '0'B;
      159      159        %SUB SLOT_SIZE = 120;
      160      160        %SUB TEXT_CODE_SIZE = 12;
      161      161        %SUB MAX_SUB_SIZE = 31;
      162      162        %SUB NUM_TYCS = 25;
      163      163        %SUB FNSUB = 0;
      164      164        %SUB ACSUB = 1;
      165      165        %SUB DCSUB = 2;
      166      166        %SUB SNSUB = 3;
      167      167        %SUB TASUB = 4;
      168      168        %SUB U1SUB = 5;
      169      169        %SUB U2SUB = 6;
      170      170        %SUB U3SUB = 7;
      171      171        %SUB UFSUB = 8;
      172      172        /**/
      173      173        %SUB V$#=B$PS0$;
      174      174        %SUB CODE$#=B$PS1$;
      175      175        %SUB BUF$#=B$PS2$;
      176      176        %SUB NAME$#=B$PS3$;
      177      177        %SUB ACCT$#=B$PS4$;
      178      178        %SUB PASS$#=B$PS5$;
      179      179        %SUB FIELD1$#=B$PS6$;
      180      180        %SUB FIELD2$#=B$PS7$;
      181      181        %SUB FIELD3$#=B$PS8$;
      182      182        %SUB RESULTS$#=B$PS9$;
      183      183        %SUB ALTCODE$#=B$PS10$;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:68   
      184      184        /**/
      185      185        %SUB V_PS# = 0;
      186      186        %SUB CODE_PS# = 1;
      187      187        %SUB BUF_PS# = 2;
      188      188        %SUB NAME_PS# = 3;
      189      189        %SUB ACCT_PS# = 4;
      190      190        %SUB PASS_PS# = 5;
      191      191        %SUB FIELD1_PS# = 6;
      192      192        %SUB FIELD2_PS# = 7;
      193      193        %SUB FIELD3_PS# = 8;
      194      194        %SUB RESULTS_PS# = 9;
      195      195        %SUB ALTCODE_PS# = 10;
      196      196        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:69   
      197      197        /***********************************************************************/
      198      198        /*    ENTRY DCLS   ENTRY DCLS   ENTRY DCLS   ENTRY DCLS   ENTRY DCLS   */
      199      199        /**********************************************************************/
      200      200    1   DCL EMR$FEP2HOST ENTRY(2);     /* To convert LCP-6 err words to CP-6 format */
      201      201    1   DCL FMF$ICORRES ENTRY(4);               /* To check DCBs                      */
      202      202    1   DCL FMM$DFLOPN ENTRY;                   /* TO OPEN M$* TO ERRMSG FILE         */
      203      203    1   DCL FMM$SCRUB ENTRY(1);
      204      204    1   DCL FMP$CLSJ ENTRY;
      205      205    1   DCL FMP$CLSTAR ENTRY;                   /* TO CLOSE M$*                       */
      206      206    1   DCL UDN$MAGIC ENTRY;                    /* To build MAGIC segment             */
      207      207    1   DCL HFF$DSIZ ENTRY(2) ALTRET;           /* GET PSn SIZE                       */
      208      208    1   DCL HFF$NILERASE ENTRY(1) ALTRET;       /* TO TEST PS DESC. FOR NULL          */
      209      209    1   DCL HFF$TRAPALT ENTRY ALTRET;           /* TO PROVIDE TRAP ENTRY ADDRESS      */
      210      210    1   DCL M$MREAD ENTRY(1) ALTRET;            /* INTERNAL READ                      */
      211      211    1   DCL M$MWRITE ENTRY(1) ALTRET;           /* INTERNAL WRITE                     */
      212      212    1   DCL M$MPRECORD ENTRY(1) ALTRET;         /* INTERNAL PRECORD                   */
      213      213    1   DCL M$MUNFID ENTRY(1) ALTRET;           /* INTERNAL UNFID                     */
      214      214    1   DCL FMD$GBUF ENTRY(1);                  /* TO ALLOCATE A POOL BUFFER          */
      215      215    1   DCL FMD$RBUF ENTRY(1);                  /* TO RELEASE A POOL BUFFER           */
      216      216    1   DCL UMD$CHKOPN ENTRY ALTRET;            /* TO OPEN M$DRIBBLE (IF DRIBBLING)   */
      217      217        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:70   
      218      218        /*********************************************************************/
      219      219        /*   INCLUDE FILES   INCLUDE FILES   INCLUDE FILES   INCLUDE FILES   */
      220      220        /*********************************************************************/
      221      221        %INCLUDE F$DCB;
      222      270        %INCLUDE FM$SET;
      223      297        %INCLUDE CP_6_SUBS;
      224      837        %INCLUDE CP_6;
      225     6396        %INCLUDE B$JIT;
      226     6999        %INCLUDE B$ROSEG;
      227     7062        %INCLUDE UM$CP6V_C;
      228     7249        %INCLUDE UM_ERRORS_C;
      229     7283        %INCLUDE B_MAGIC_C;                     /* MAGIC to examine TCB               */
      230     7401        %INCLUDE B_MACROS_C;                    /* MAGIC MACROS                       */
      231     7512        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:71   
      232     7513        /********************************************************************/
      233     7514        /*   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   FPTS   */
      234     7515        /********************************************************************/
      235     7516        /**/
      236     7517        %FPT_READ     (FPTN=EMR_RFPT,
      237     7518                       STCLASS = AUTO);
      238     7557        %FPT_WRITE    (FPTN=EMR_WFPT,
      239     7558                       STCLASS = AUTO);
      240     7589        %FPT_PRECORD  (FPTN=EMR_PRECFPT,
      241     7590                       STCLASS = AUTO);
      242     7611        %FPT_UNFID    (FPTN = EMR_UNFIDFPT,
      243     7612                       STCLASS = AUTO);
      244     7630        /**/
      245     7631        %FPT_READ     (FPTN = INIT_RFPT,
      246     7632                       KEYR = YES,
      247     7633                       STCLASS = CONSTANT);
      248     7672        %FPT_WRITE    (FPTN = INIT_WFPT,
      249     7673                       STCLASS = CONSTANT);
      250     7704        %FPT_PRECORD  (FPTN = INIT_PRECFPT,
      251     7705                       KEYR = YES,
      252     7706                       STCLASS = CONSTANT);
      253     7727        %FPT_UNFID    (FPTN = INIT_UNFIDFPT,
      254     7728                       STCLASS = CONSTANT);
      255     7746        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:72   
      256     7747        /*****************************************************************************/
      257     7748        /*   CONSTANTS   CONSTANTS   CONSTANTS   CONSTANTS   CONSTANTS   CONSTANTS   */
      258     7749        /*****************************************************************************/
      259     7750        /**/
      260     7751        %EQU TOP_2SUBS# = 8;                    /* NINE TWO LETTER CODES              */
      261     7752    1   DCL SUBTYPE_TBL(0:%TOP_2SUBS#) CONSTANT CHAR(2) ALIGNED INIT(
      262     7753    1       'FN','AC','DC','SN','TA','U1','U2','U3','UF' );
      263     7754    1   DCL TYC_NAME(0:NUM_TYCS) CHAR(8) CONSTANT INIT('        ',
      264     7755    1       'EGV     ',   'OPER    ',   'EOT     ',   'BOT     ',   'BOF     ',
      265     7756    1       'BLNKTP  ',   'EOF     ',   'LD      ',   'IOERR   ',   'DI      ',
      266     7757    1       'EOD     ',   'MTRAP   ',   'DISC    ',   'DACT    ',   'TIMO    ',
      267     7758    1       'PROT    ',   'FRAW    ',   'LAST    ',   'CDALRT  ',   'XTRARD  ',
      268     7759    1       'CGKEYV  ',   'CGLWRV  ',   'CGFULL  ',   'CGCRCW  ',   'CGCWRV  ');
      269     7760    1   DCL TYC_MASK(0:NUM_TYCS) BIT(36) CONSTANT INIT('0'B,
      270     7761    1       %TYC_EGV,     %TYC_OPER,    %TYC_EOT,     %TYC_BOT,     %TYC_BOF,
      271     7762    1       %TYC_BLNKTP,  %TYC_EOF,     %TYC_LD,      %TYC_IOERR,   %TYC_DI,
      272     7763    1       %TYC_EOD,     %TYC_MTRAP,   %TYC_DISC,    %TYC_DACT,    %TYC_TIMO,
      273     7764    1       %TYC_PROT,    %TYC_FRAW,    %TYC_LAST,    %TYC_CDALRT,  %TYC_XTRARD,
      274     7765    1       %TYC_CGKEYV,  %TYC_CGLWRV,  %TYC_CGFULL,  %TYC_CGCRCW,  %TYC_CGCWRV);
      275     7766    1   DCL TYC_N_LEN(0:NUM_TYCS) SBIN WORD CONSTANT INIT(0,
      276     7767    1       03,           04,           03,           03,          03,
      277     7768    1       06,           03,           02,           05,          02,
      278     7769    1       03,           05,           04,           04,          04,
      279     7770    1       04,           04,           04,           06,          06,
      280     7771    1       06,           06,           06,           06,          06);
      281     7772    1   DCL FLAGBUF CHAR(4) ALIGNED INIT ('****') CONSTANT;
      282     7773    1   DCL BLANKS CHAR(4) ALIGNED CONSTANT INIT('    ');
      283     7774    1   DCL 1 B$PS10 CONSTANT,                  /* B$PS10$ isn't SYMREFed             */
      284     7775    1         2 OFFSET UBIN(24) INIT(0) UNAL,
      285     7776    1         2 SID BIT(12) INIT('0012'O) UNAL;
      286     7777    1   DCL 1 B$PS10$ REDEF B$PS10 PTR;
      287     7778    1   DCL SYSV BIT(36) ALIGNED CONSTANT INIT('050002006000'O);/*CEPXY*/
      288     7779    1   DCL SYSVA(0:35) REDEF SYSV BIT(1);
      289     7780        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:73   
      290     7781        /*****************************************************************/
      291     7782        /*   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   */
      292     7783        /*****************************************************************/
      293     7784        /**/
      294     7785    1   DCL B$JIT$ PTR SYMREF;
      295     7786    1   DCL B$ROSEG$ PTR SYMREF;
      296     7787    1   DCL FM$SET$ PTR SYMREF;
      297     7788    1   DCL B$PS0$ PTR SYMREF;
      298     7789    1   DCL B$PS1$ PTR SYMREF;
      299     7790    1   DCL B$PS2$ PTR SYMREF;
      300     7791    1   DCL B$PS3$ PTR SYMREF;
      301     7792    1   DCL B$PS4$ PTR SYMREF;
      302     7793    1   DCL B$PS5$ PTR SYMREF;
      303     7794    1   DCL B$PS6$ PTR SYMREF;
      304     7795    1   DCL B$PS7$ PTR SYMREF;
      305     7796    1   DCL B$PS8$ PTR SYMREF;
      306     7797    1   DCL B$PS9$ PTR SYMREF;
      307     7798        /* B$PS10$ is not SYMREFed, see CONSTANT */
      308     7799        %B_MPT(FPTN = B_MPT,STCLASS = SYMREF);  /* DCL MAGIC pointers                 */
      309     7892        /**/
      310     7893        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:74   
      311     7894        /***************************************************************/
      312     7895        /* AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   */
      313     7896        /***************************************************************/
      314     7897        /**/
      315     7898    1   DCL CUR_REC UBIN(36);                   /* CURRENT RECORD IN BUFFER           */
      316     7899    1   DCL ERR_RECS UBIN(36);                  /* TOTAL RECORD SLOTS IN BUFFER       */
      317     7900    1   DCL REC_COUNT UBIN(36);                 /* BUFFER SLOTS USED                  */
      318     7901    1   DCL I SBIN;                             /* INDEX                              */
      319     7902    1   DCL J SBIN;                             /* INDEX                              */
      320     7903    1   DCL K SBIN;                             /* INDEX                              */
      321     7904    1   DCL FLAG# UBIN(36);
      322     7905    1   DCL COUNT SBIN WORD;                    /* CHAR COUNT OF SUBS                 */
      323     7906    1   DCL MSG_SIZE UBIN(36);                  /* CHARACTER COUNT IN MESSAGE         */
      324     7907    1   DCL CPH_CLMN SBIN;                      /* START OF CONDITIONAL PHRASE        */
      325     7908    1   DCL UNSAT_SUB SBIN;              /* FLAG FOR SUB FIELDS IN COND. PHRASE     */
      326     7909    1   DCL USER_FILE BIT(1);                   /* USING USERS SPECIFIED FILE         */
      327     7910    1   DCL NATIVE_LANG BIT(1);                 /* File is in user's native language  */
      328     7911    1   DCL ALTCODE_EXISTS BIT(1);              /* ALTCODE has been specified         */
      329     7912    1   DCL ALTRET_FLAG BIT(1);                 /* ALTRET TO CALLER FLAG              */
      330     7913    1   DCL 1 MSG_FLGS,                         /* MESSAGE CONTROL FLAGS              */
      331     7914    1         2 SUB BIT(1) UNAL,
      332     7915    1         2 CONT BIT(1) UNAL,
      333     7916    1         2 * BIT(7) UNAL;
      334     7917    1   DCL MSG_FLGS_CHAR REDEF MSG_FLGS CHAR(1);
      335     7918    1   DCL LANG CHAR(1) ALIGNED;
      336     7919    1   DCL SUB_CODE CHAR(2) ALIGNED;           /* SUBSTITUTION TYPE                  */
      337     7920    1   DCL 1 CODE ALIGNED,
      338     7921    1         2 FCGMID(0:2) UBIN(6) UNAL,
      339     7922    1         2 MON BIT(1) UNAL,
      340     7923    1         2 ERROR UBIN(14) UNAL,
      341     7924    1         2 SEV UBIN(3) UNAL;
      342     7925    1   DCL 1 CODE_ REDEF CODE ALIGNED,
      343     7926    1         2 FCG UBIN(12) UNAL,
      344     7927    1         2 MID UBIN(6) UNAL,
      345     7928    1         2 MON BIT(1) UNAL,
      346     7929    1         2 ERROR UBIN(14) UNAL,
      347     7930    1         2 SEV UBIN(3) UNAL;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:75   
      348     7931    1   DCL CODE_CHAR REDEF CODE CHAR(4);       /* CHAR MOVE PARAMATERS               */
      349     7932    1   DCL B$M$STAR$ PTR SYMREF READONLY;
      350     7933    1   DCL M$STAR$ REDEF B$M$STAR$ PTR ALIGNED;  /* A NICER NAME FOR IT              */
      351     7934    1   DCL B$M$LM$ PTR SYMREF READONLY;        /* POINTER TO M$LM                    */
      352     7935    1   DCL DCB$ PTR ALIGNED;                   /* USERS DCB                          */
      353     7936    1   DCL ERR_DCB UBIN WORD;                  /* Number of error DCB                */
      354     7937    1   DCL BUF$ PTR ALIGNED;                   /* Points to current buffer slot      */
      355     7938    1   DCL POOLBUF$ PTR ALIGNED;               /* Points to allocated pool buffer    */
      356     7939    1   DCL AD_WRBUF$ PTR ALIGNED;              /* Points first allocated structure   */
      357     7940    1   DCL AD_PRKEY$ PTR ALIGNED;              /* Points second allocated structure  */
      358     7941    1   DCL AD_RDKEY$ PTR ALIGNED;              /* Points third allocated structure   */
      359     7942    1   DCL 1 BUF_VECTOR,                       /* Frames part of buf slot for M$READ */
      360     7943    1         2 BOUND UBIN(20) UNAL,            /* SET TO READ SIZE                   */
      361     7944    1         2 FLAGSV UBIN(11) UNAL,           /* SET TO 2045                        */
      362     7945    1         2 * BIT(5) UNAL,
      363     7946    1         2 PTR$ PTR UNAL;                  /* SET TO BUF$                        */
      364     7947    1   DCL 1 TEXT_BUF,
      365     7948    1         2 COUNT UBIN(9) UNAL,
      366     7949    1         2 COUNT_CHAR REDEF COUNT CHAR(1) UNAL,
      367     7950    1         2 TEXT CHAR(43) UNAL,
      368     7951    1         2 TEXT_ARRAY(0:42) REDEF TEXT CHAR(1) UNAL,
      369     7952    1         2 UBIN_ARRAY(0:42) REDEF TEXT UBIN(9) UNAL;
      370     7953    1   DCL V_BUF_SIZE UBIN WORD;               /* Size of passed buffer               */
      371     7954        %VLR_ERRMSG (FPTN = EMR_RESULTS,
      372     7955                           STCLASS = AUTO);
      373     7977    1   DCL EMR_RESULTS_CHAR REDEF EMR_RESULTS CHAR(16);
      374     7978    1   DCL POINT$ PTR ALIGNED;
      375     7979        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:76   
      376     7980        /**********************************************************************/
      377     7981        /*   ALLOCATED DATA   ALLOCATED DATA   ALLOCATEDD DATA   ALLOCATED DATA       */
      378     7982        /**********************************************************************/
      379     7983        /**/
      380     7984        /*  The following data resides in a one-page pool buffer that we request on   */
      381     7985        /*  entry and must release on exit.  Implied pointers are used so that this   */
      382     7986        /*  area 'looks like' AUTO                                                    */
      383     7987        /**/
      384     7988    1   DCL 1 WR_VFC_BUF ALIGNED BASED(AD_WRBUF$),  /* For use writing with VFC       */
      385     7989    1         2 VFC CHAR(1) UNAL,
      386     7990    1         2 TEXT CHAR(SLOT_SIZE);
      387     7991    1   DCL 1 PRECKEY DALIGNED BASED(AD_PRKEY$), /* KEY BUFFER FOR PRECORD            */
      388     7992    1         2 COUNT UBIN(9) UNAL,             /* TEXTC COUNT                        */
      389     7993    1         2 CODE,
      390     7994    1           3 FCG UBIN(12) UNAL,
      391     7995    1           3 FCG_ REDEF FCG UNAL,
      392     7996    1             4 CHAR1 UBIN(6) UNAL,
      393     7997    1             4 CHAR2 UBIN(6) UNAL,
      394     7998    1           3 MID UBIN(6) UNAL,
      395     7999    1           3 MON BIT(1) UNAL,
      396     8000    1           3 ERROR UBIN(14) UNAL,
      397     8001    1           3 SEV UBIN(3) UNAL,
      398     8002    1         2 SEQ UBIN(9) UNAL,
      399     8003    1         2 * CHAR(250) UNAL;               /* Room for bad return key overflow   */
      400     8004    1   DCL 1 READKEY DALIGNED BASED(AD_RDKEY$), /* KEY BUFFER FOR READ               */
      401     8005    1         2 COUNT UBIN(9) UNAL,             /* TEXTC COUNT                        */
      402     8006    1         2 CODE,
      403     8007    1           3 FCG UBIN(12) UNAL,
      404     8008    1           3 FCG_ REDEF FCG UNAL,
      405     8009    1             4 CHAR1 UBIN(6) UNAL,
      406     8010    1             4 CHAR2 UBIN(6) UNAL,
      407     8011    1           3 MID UBIN(6) UNAL,
      408     8012    1           3 MON BIT(1) UNAL,
      409     8013    1           3 ERROR UBIN(14) UNAL,
      410     8014    1           3 SEV UBIN(3) UNAL,
      411     8015    1         2 SEQ UBIN(9) UNAL,
      412     8016    1         2 * CHAR(250) UNAL;               /* Room for bad return key overflow   */
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:77   
      413     8017        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:78   
      414     8018        /**********************************************************************/
      415     8019        /*   BASED DATA   BASED DATA   BASED DATA   BASED DATA   BASED DATA   */
      416     8020        /**********************************************************************/
      417     8021        /**/
      418     8022        %FPT$ERRMSG_V  (FPTN = FPT$ERRMSG);
      419     8028        %VLR_ERRMSG (FPTN = EMR$RESULTS,STCLASS = BASED);
      420     8050    1   DCL EMR$RESULTS_CHAR REDEF EMR$RESULTS CHAR(16);
      421     8051        /**/
      422     8052    1   DCL CODE$CHAR CHAR(4) BASED;
      423     8053    1   DCL MSG$SLOT CHAR(SLOT_SIZE) BASED UNAL;
      424     8054    1   DCL MSG$SLOTARRAY(0:%(SLOT_SIZE -1)) CHAR(1) UNAL BASED;
      425     8055    1   DCL CHAR$1 CHAR(1) UNAL BASED;
      426     8056    1   DCL 1 TEXT$BUF BASED,                   /* TEXTC BUFER                        */
      427     8057    1         2 COUNT UBIN(9) UNAL,
      428     8058    1         2 COUNT_CHAR REDEF COUNT CHAR(1) UNAL,
      429     8059    1         2 TEXT CHAR(31) UNAL;
      430     8060    1   DCL 1 VLP$NAME BASED,                   /* FILE NAME                          */
      431     8061    1         2 COUNT UBIN(9) UNAL,
      432     8062    1         2 COUNT_CHAR REDEF COUNT CHAR(1) UNAL,
      433     8063    1         2 TEXT CHAR(31) UNAL;
      434     8064    1   DCL VLP$ACCT BASED CHAR(8);
      435     8065    1   DCL VLP$PASS BASED CHAR(8);
      436     8066        %B$TCB;
      437     8069        %B$ALT;
      438     8077        %B$EXCFR;
      439     8095        /**/
      440     8096        %FM$SET;
      441     8101        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:79   
      442     8102        /**/
      443     8103        /*****************************************************************************/
      444     8104        /*   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   */
      445     8105        /*****************************************************************************/
      446     8106        /**/
      447     8107    1           EMR_RESULTS = FALSE;            /* Clear RESULTS area                 */

   8107  2 000002   000100 100400                    MLR     fill='000'O
         2 000003   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 000004   200146 000020                    ADSC9   EMR_RESULTS,,AUTO        cn=0,n=16

      448     8108        /**/
      449     8109    1           CALL FMD$GBUF(POOLBUF$);        /* GET A POOL BUFFER                  */

   8109  2 000005   200124 630500                    EPPR0   POOLBUF$,,AUTO
         2 000006   200162 450500                    STP0    @MIN_HOLE+1,,AUTO
         2 000007   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 000010   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000011   000000 701000 xent               TSX1    FMD$GBUF
         2 000012   000000 011000                    NOP     0

      450     8110    1           CALL HFF$TRAPALT ALTRET(ERRMSG_BAILOUT); /* RELEASE IT IF WE TRAP     */

   8110  2 000013   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000014   000000 701000 xent               TSX1    HFF$TRAPALT
         2 000015   002317 702000 2                  TSX2    RESULTS_MOVED

      451     8111    1           AD_WRBUF$ = POOLBUF$;           /* First item in allocated buffer     */

   8111  2 000016   200124 236100                    LDQ     POOLBUF$,,AUTO
         2 000017   200125 756100                    STQ     AD_WRBUF$,,AUTO

      452     8112    1           AD_PRKEY$ = PINCRC(AD_WRBUF$,SIZEC(WR_VFC_BUF)); /* Second item       */

   8112  2 000020   000037 036003                    ADLQ    31,DU
         2 000021   200126 756100                    STQ     AD_PRKEY$,,AUTO

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:80   
      453     8113    1           AD_RDKEY$ = PINCRC(AD_PRKEY$,SIZEC(PRECKEY)); /* Third item           */

   8113  2 000022   000100 036003                    ADLQ    64,DU
         2 000023   200127 756100                    STQ     AD_RDKEY$,,AUTO

      454     8114        /**/
      455     8115        /**/
      456     8116    1           USER_FILE = FALSE;

   8116  2 000024   200111 450100                    STZ     USER_FILE,,AUTO

      457     8117    1           ALTRET_FLAG = FALSE;

   8117  2 000025   200114 450100                    STZ     ALTRET_FLAG,,AUTO

      458     8118        /**/
      459     8119    1           REC_COUNT = 0;

   8119  2 000026   200100 450100                    STZ     REC_COUNT,,AUTO

      460     8120    1           CUR_REC=0;

   8120  2 000027   200076 450100                    STZ     CUR_REC,,AUTO

      461     8121        /**/
      462     8122    1           CALL UDN$MAGIC;                 /* Fill MAGIC pointers                */

   8122  2 000030   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000031   000000 701000 xent               TSX1    UDN$MAGIC
         2 000032   000000 011000                    NOP     0

      463     8123        /**/
      464     8124    1           ERR_DCB = V$# -> FPT$ERRMSG.DCB#; /* Find error DCB          */

   8124  2 000033   000000 470400 xsym               LDP0    B$PS0$
         2 000034   000000 236100                    LDQ     0,,PR0
         2 000035   000022 772000                    QRL     18
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:81   
         2 000036   200122 756100                    STQ     ERR_DCB,,AUTO

      465     8125    1           IF NOT V$# -> FPT$ERRMSG.NREAD

   8125  2 000037   000002 236100                    LDQ     2,,PR0
         2 000040   400000 316007                    CANQ    -131072,DL
         2 000041   000172 601000 2                  TNZ     s:8170

      466     8126    1           THEN
      467     8127    2             DO;

      468     8128    3              DO CASE(V$# -> FPT$ERRMSG.SOURCE);

   8128  2 000042   000002 236100                    LDQ     2,,PR0
         2 000043   000016 772000                    QRL     14
         2 000044   000007 376007                    ANQ     7,DL
         2 000045   000003 116007                    CMPQ    3,DL
         2 000046   000050 602006 2                  TNC     s:8128+6,QL
         2 000047   000162 710000 2                  TRA     s:8162
         2 000050   000053 710000 2                  TRA     s:8130
         2 000051   000105 710000 2                  TRA     s:8141
         2 000052   000126 710000 2                  TRA     s:8149

      469     8129    3                CASE(0);                   /* PASS source                        */

      470     8130    3                    CALL HFF$NILERASE(CODE_PS#) ALTRET(NO_CODE); /* CODE passed? */

   8130  2 000053   000000 630400 3                  EPPR0   0
         2 000054   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000055   000000 701000 xent               TSX1    HFF$NILERASE
         2 000056   000060 702000 2                  TSX2    NO_CODE

      471     8131    4                    DO WHILE (FALSE);      /* NEVER DO                           */

   8131  2 000057   000063 710000 2                  TRA     s:8135

      472     8132    4   NO_CODE:            EMR_RESULTS.BADCALL = TRUE;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:82   

   8132  2 000060   400000 236003       NO_CODE      LDQ     -131072,DU
         2 000061   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      473     8133    4                       IF TRUE THEN GOTO ERRMSG_ALTRTN; /* QUIT via compil kluge */

   8133  2 000062   002300 710000 2                  TRA     ERRMSG_ALTRTN

      474     8134    4                       END;

      475     8135    3                    IF NOT V$# -> FPT$ERRMSG.L6_CODE

   8135  2 000063   000000 470400 xsym               LDP0    B$PS0$
         2 000064   000002 236100                    LDQ     2,,PR0
         2 000065   000004 316007                    CANQ    4,DL
         2 000066   000074 601000 2                  TNZ     s:8139

      476     8136    3                    THEN
      477     8137    3                       CODE_CHAR = CODE$# -> CODE$CHAR;

   8137  2 000067   000000 471400 xsym               LDP1    B$PS1$
         2 000070   040100 100500                    MLR     fill='040'O
         2 000071   100000 000004                    ADSC9   0,,PR1                   cn=0,n=4
         2 000072   200120 000004                    ADSC9   CODE,,AUTO               cn=0,n=4
         2 000073   000162 710000 2                  TRA     s:8162

      478     8138    3                    ELSE
      479     8139    3                       CALL EMR$FEP2HOST(CODE$# -> CODE$CHAR, CODE_CHAR);

   8139  2 000074   200120 631500                    EPPR1   CODE,,AUTO
         2 000075   200163 451500                    STP1    @MIN_HOLE+2,,AUTO
         2 000076   000000 236000 xsym               LDQ     B$PS1$
         2 000077   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 000100   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 000101   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000102   000000 701000 xent               TSX1    EMR$FEP2HOST
         2 000103   000000 011000                    NOP     0
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:83   
         2 000104   000162 710000 2                  TRA     s:8162

      480     8140    3                CASE(1);                   /* TRAP source                        */

      481     8141    3                    IF B_MPT.TCB$ -> B$TCB.CURRSZ = 0

   8141  2 000105   000004 471400 xsym               LDP1    B_MPT+4
         2 000106   100002 720100                    LXL0    2,,PR1
         2 000107   000060 600000 2                  TZE     NO_CODE

      482     8142    3                     THEN                  /* No top stack frame to use          */
      483     8143    3                       GOTO NO_CODE;
      484     8144    3                    POINT$ = B_MPT.TCB$ -> B$TCB.STK$;

   8144  2 000110   100001 236100                    LDQ     1,,PR1
         2 000111   200152 756100                    STQ     POINT$,,AUTO

      485     8145    3                    CALL TOUCH_UP(B_MPT.TCB$,POINT$);

   8145  2 000112   200152 633500                    EPPR3   POINT$,,AUTO
         2 000113   200156 453500                    STP3    @SAMPLE+1,,AUTO
         2 000114   000001 236000 3                  LDQ     1
         2 000115   200155 756100                    STQ     POINT$+3,,AUTO
         2 000116   002433 701000 2                  TSX1    TOUCH_UP
         2 000117   000000 011000                    NOP     0

      486     8146    3                    CODE = POINT$ -> B$EXCFR.ERR;

   8146  2 000120   200152 470500                    LDP0    POINT$,,AUTO
         2 000121   000102 236100                    LDQ     66,,PR0
         2 000122   200120 756100                    STQ     CODE,,AUTO

      487     8147    3                    CODE.SEV = 0;          /* Assume least verbose message       */

   8147  2 000123   000002 236000 3                  LDQ     2
         2 000124   200120 356100                    ANSQ    CODE,,AUTO
         2 000125   000162 710000 2                  TRA     s:8162
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:84   

      488     8148    3                CASE(2);                   /* ALTRET source                      */

      489     8149    3                    POINT$ = B_MPT.TCB$ -> B$TCB.ALT$;

   8149  2 000126   000004 471400 xsym               LDP1    B_MPT+4
         2 000127   100000 236100                    LDQ     0,,PR1
         2 000130   200152 756100                    STQ     POINT$,,AUTO

      490     8150    3                    CALL TOUCH_UP(B_MPT.TCB$,POINT$);

   8150  2 000131   200152 633500                    EPPR3   POINT$,,AUTO
         2 000132   200156 453500                    STP3    @SAMPLE+1,,AUTO
         2 000133   000001 236000 3                  LDQ     1
         2 000134   200155 756100                    STQ     POINT$+3,,AUTO
         2 000135   002433 701000 2                  TSX1    TOUCH_UP
         2 000136   000000 011000                    NOP     0

      491     8151    3                    IF POINT$ -> B$EXCFR.ALTEMPTY ~= 0

   8151  2 000137   200152 470500                    LDP0    POINT$,,AUTO
         2 000140   000000 220100                    LDX0    0,,PR0
         2 000141   000060 601000 2                  TNZ     NO_CODE

      492     8152    3                     THEN                  /* No ALTRET CODE to use              */
      493     8153    3                       GOTO NO_CODE;
      494     8154    3                    POINT$ = B_MPT.TCB$ -> B$TCB.ALT$;

   8154  2 000142   000004 471400 xsym               LDP1    B_MPT+4
         2 000143   100000 236100                    LDQ     0,,PR1
         2 000144   200152 756100                    STQ     POINT$,,AUTO

      495     8155    3                    CALL TOUCH_UP(B_MPT.TCB$,POINT$);

   8155  2 000145   200152 630500                    EPPR0   POINT$,,AUTO
         2 000146   200156 450500                    STP0    @SAMPLE+1,,AUTO
         2 000147   000001 236000 3                  LDQ     1
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:85   
         2 000150   200155 756100                    STQ     POINT$+3,,AUTO
         2 000151   002433 701000 2                  TSX1    TOUCH_UP
         2 000152   000000 011000                    NOP     0

      496     8156    3                    CODE = POINT$ -> B$ALT.ERR;

   8156  2 000153   200152 470500                    LDP0    POINT$,,AUTO
         2 000154   000102 236100                    LDQ     66,,PR0
         2 000155   200120 756100                    STQ     CODE,,AUTO

      497     8157    3                    CODE.SEV = 0;          /* Assume least verbose message       */

   8157  2 000156   000002 236000 3                  LDQ     2
         2 000157   200120 356100                    ANSQ    CODE,,AUTO

      498     8158    3                    ERR_DCB = POINT$ -> B$ALT.DCB#; /* Err DCB                   */

   8158  2 000160   000101 235100                    LDA     65,,PR0
         2 000161   200122 755100                    STA     ERR_DCB,,AUTO

      499     8159    3                END;                       /* END DO CASE                        */

      500     8160        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:86   
      501     8161        /**/                                    /* Test for alternate error code      */
      502     8162    2              CALL HFF$NILERASE(ALTCODE_PS#) ALTRET(NO_ALTCODE);

   8162  2 000162   000003 630400 3                  EPPR0   3
         2 000163   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000164   000000 701000 xent               TSX1    HFF$NILERASE
         2 000165   000171 702000 2                  TSX2    NO_ALTCODE

      503     8163    2              ALTCODE_EXISTS = TRUE;

   8163  2 000166   400000 236003                    LDQ     -131072,DU
         2 000167   200113 756100                    STQ     ALTCODE_EXISTS,,AUTO

      504     8164    3              DO WHILE(FALSE);

   8164  2 000170   000172 710000 2                  TRA     s:8170

      505     8165    3   NO_ALTCODE:   ALTCODE_EXISTS = FALSE;   /* ALTCODE not specified              */

   8165  2 000171   200113 450100       NO_ALTCODE   STZ     ALTCODE_EXISTS,,AUTO

      506     8166    3                 END;

      507     8167        /**/                                    /* Set up the error DCB               */
      508     8168    2              END;

      509     8169        /**/
      510     8170    1           IF ERR_DCB > B$ROSEG$ -> B$ROSEG.NUMDCBS /* User doesn't own DCB      */

   8170  2 000172   000000 470400 xsym               LDP0    B$ROSEG$
         2 000173   000002 236100                    LDQ     2,,PR0
         2 000174   000022 772000                    QRL     18
         2 000175   200122 116100                    CMPQ    ERR_DCB,,AUTO
         2 000176   000202 602000 2                  TNC     s:8173
         2 000177   200122 235100                    LDA     ERR_DCB,,AUTO
         2 000200   000001 115007                    CMPA    1,DL
         2 000201   000205 601000 2                  TNZ     s:8175
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:87   

      511     8171    1            OR ERR_DCB = %M$STAR#          /* We cleared M$*, can't substitute   */
      512     8172    1            THEN                           /* Don't allow DCB substitutions!     */
      513     8173    1             DCB$ = ADDR(NIL);

   8173  2 000202   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000203   200121 756100                    STQ     DCB$,,AUTO
         2 000204   000211 710000 2                  TRA     s:8178

      514     8174    1           ELSE                            /* Make pointer to error DCB          */
      515     8175    1             DCB$ = DCBADDR(ERR_DCB);

   8175  2 000205   000004 471400 3                  LDP1    4
         2 000206   100000 473500                    LDP3    0,,PR1
         2 000207   300000 236105                    LDQ     0,AL,PR3
         2 000210   200121 756100                    STQ     DCB$,,AUTO

      516     8176        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:88   
      517     8177        /**/                                    /* Check DCBs                         */
      518     8178    1           CALL FMF$ICORRES(V$# -> FPT$ERRMSG.OUTDCB1,

   8178  2 000211   200150 631500                    EPPR1   EMR_RESULTS+2,,AUTO
         2 000212   200165 451500                    STP1    @MIN_HOLE+4,,AUTO
         2 000213   200147 633500                    EPPR3   EMR_RESULTS+1,,AUTO
         2 000214   200164 453500                    STP3    @MIN_HOLE+3,,AUTO
         2 000215   000000 236000 xsym               LDQ     B$PS0$
         2 000216   000001 036003                    ADLQ    1,DU
         2 000217   200163 756100                    STQ     @MIN_HOLE+2,,AUTO
         2 000220   000000 236000 xsym               LDQ     B$PS0$
         2 000221   400000 036007                    ADLQ    -131072,DL
         2 000222   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 000223   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 000224   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000225   000000 701000 xent               TSX1    FMF$ICORRES
         2 000226   000000 011000                    NOP     0

      519     8179    1            V$# -> FPT$ERRMSG.OUTDCB2,
      520     8180    1            EMR_RESULTS.ERRCODE1,
      521     8181    1            EMR_RESULTS.ERRCODE2);
      522     8182    1           IF EMR_RESULTS.ERRCODE1.ERR# ~= 0

   8182  2 000227   200147 236100                    LDQ     EMR_RESULTS+1,,AUTO
         2 000230   377770 316007                    CANQ    131064,DL
         2 000231   000234 600000 2                  TZE     s:8185

      523     8183    1            THEN                           /* Bad DCB1                           */
      524     8184    1              EMR_RESULTS.OUTERR1 = TRUE;

   8184  2 000232   010000 236003                    LDQ     4096,DU
         2 000233   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      525     8185    1           IF EMR_RESULTS.ERRCODE2.ERR# ~= 0

   8185  2 000234   200150 236100                    LDQ     EMR_RESULTS+2,,AUTO
         2 000235   377770 316007                    CANQ    131064,DL
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:89   
         2 000236   000241 600000 2                  TZE     s:8188

      526     8186    1            THEN                           /* Bad DCB2 or corresponds to DCB1    */
      527     8187    1              EMR_RESULTS.OUTERR2 = TRUE;

   8187  2 000237   004000 236003                    LDQ     2048,DU
         2 000240   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      528     8188    1           IF V$# -> FPT$ERRMSG.OUTDCB1 ~= 0

   8188  2 000241   000000 470400 xsym               LDP0    B$PS0$
         2 000242   000000 720100                    LXL0    0,,PR0
         2 000243   000311 600000 2                  TZE     s:8206
         2 000244   200146 236100                    LDQ     EMR_RESULTS,,AUTO
         2 000245   010000 316003                    CANQ    4096,DU
         2 000246   000311 601000 2                  TNZ     s:8206
         2 000247   000004 471400 3                  LDP1    4
         2 000250   100000 473500                    LDP3    0,,PR1
         2 000251   300000 474510                    LDP4    0,X0,PR3
         2 000252   400031 236100                    LDQ     25,,PR4
         2 000253   020000 316007                    CANQ    8192,DL
         2 000254   000311 601000 2                  TNZ     s:8206

      529     8189    1            AND EMR_RESULTS.OUTERR1 = FALSE
      530     8190    1            AND NOT DCBADDR(V$# -> FPT$ERRMSG.OUTDCB1) -> F$DCB.FCD
      531     8191    1            THEN                           /* We have to OPEN the DCB            */
      532     8192    2              DO;

      533     8193    2                IF DCBADDR(V$# -> FPT$ERRMSG.OUTDCB1) -> F$DCB.FUN = 0

   8193  2 000255   400032 236100                    LDQ     26,,PR4
         2 000256   000777 316003                    CANQ    511,DU
         2 000257   000262 601000 2                  TNZ     s:8196

      534     8194    2                 THEN                      /* FUN unknown                        */
      535     8195    2                   DCBADDR(V$# -> FPT$ERRMSG.OUTDCB1) -> F$DCB.FUN = %CREATE#;

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:90   
   8195  2 000260   000003 236003                    LDQ     3,DU
         2 000261   400032 552120                    STBQ    26,'20'O,PR4

      536     8196    2                B$JIT$ -> B$JIT.DCB$ = DCBADDR(V$# -> FPT$ERRMSG.OUTDCB1);

   8196  2 000262   000000 720100                    LXL0    0,,PR0
         2 000263   300000 236110                    LDQ     0,X0,PR3
         2 000264   000000 474400 xsym               LDP4    B$JIT$
         2 000265   400232 756100                    STQ     154,,PR4

      537     8197    2                CALL FMM$DFLOPN;           /* OPEN it                            */

   8197  2 000266   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000267   000000 701000 xent               TSX1    FMM$DFLOPN
         2 000270   000000 011000                    NOP     0

      538     8198    2                CALL HFF$TRAPALT ALTRET(BAD_OUTDCB1);

   8198  2 000271   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000272   000000 701000 xent               TSX1    HFF$TRAPALT
         2 000273   000304 702000 2                  TSX2    BAD_OUTDCB1

      539     8199    2                IF DCBADDR(V$# -> FPT$ERRMSG.OUTDCB1) -> F$DCB.FCD = FALSE

   8199  2 000274   000004 470400 3                  LDP0    4
         2 000275   000000 471500                    LDP1    0,,PR0
         2 000276   000000 473400 xsym               LDP3    B$PS0$
         2 000277   300000 720100                    LXL0    0,,PR3
         2 000300   100000 474510                    LDP4    0,X0,PR1
         2 000301   400031 236100                    LDQ     25,,PR4
         2 000302   020000 316007                    CANQ    8192,DL
         2 000303   000311 601000 2                  TNZ     s:8206

      540     8200    2                 THEN                      /* OPEN didn't work                   */
      541     8201    3   BAD_OUTDCB1:    DO;

   8201  2 000304                       BAD_OUTDCB1  null
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:91   
      542     8202    3                     EMR_RESULTS.OUTERR1 = TRUE;

   8202  2 000304   010000 236003                    LDQ     4096,DU
         2 000305   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      543     8203    3                     EMR_RESULTS.ERRCODE1 = B$JIT$ -> B$JIT.ERR;

   8203  2 000306   000000 470400 xsym               LDP0    B$JIT$
         2 000307   000012 236100                    LDQ     10,,PR0
         2 000310   200147 756100                    STQ     EMR_RESULTS+1,,AUTO

      544     8204    3                     END;

      545     8205    2                END;

      546     8206    1           IF V$# -> FPT$ERRMSG.OUTDCB2 ~= 0

   8206  2 000311   000000 470400 xsym               LDP0    B$PS0$
         2 000312   000001 220100                    LDX0    1,,PR0
         2 000313   000361 600000 2                  TZE     s:8225
         2 000314   200146 236100                    LDQ     EMR_RESULTS,,AUTO
         2 000315   004000 316003                    CANQ    2048,DU
         2 000316   000361 601000 2                  TNZ     s:8225
         2 000317   000004 471400 3                  LDP1    4
         2 000320   100000 473500                    LDP3    0,,PR1
         2 000321   300000 474510                    LDP4    0,X0,PR3
         2 000322   400031 236100                    LDQ     25,,PR4
         2 000323   020000 316007                    CANQ    8192,DL
         2 000324   000361 601000 2                  TNZ     s:8225

      547     8207    1            AND EMR_RESULTS.OUTERR2 = FALSE
      548     8208    1            AND NOT DCBADDR(V$# -> FPT$ERRMSG.OUTDCB2) -> F$DCB.FCD
      549     8209    1            THEN                           /* We have to OPEN the DCB            */
      550     8210    2              DO;

      551     8211    2                IF DCBADDR(V$# -> FPT$ERRMSG.OUTDCB2) -> F$DCB.FUN = 0

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:92   
   8211  2 000325   400032 236100                    LDQ     26,,PR4
         2 000326   000777 316003                    CANQ    511,DU
         2 000327   000332 601000 2                  TNZ     s:8214

      552     8212    2                 THEN                      /* FUN unknown                        */
      553     8213    2                  DCBADDR(V$# -> FPT$ERRMSG.OUTDCB2) -> F$DCB.FUN = %CREATE#;

   8213  2 000330   000003 236003                    LDQ     3,DU
         2 000331   400032 552120                    STBQ    26,'20'O,PR4

      554     8214    2                B$JIT$ -> B$JIT.DCB$ = DCBADDR(V$# -> FPT$ERRMSG.OUTDCB2);

   8214  2 000332   000001 220100                    LDX0    1,,PR0
         2 000333   300000 236110                    LDQ     0,X0,PR3
         2 000334   000000 474400 xsym               LDP4    B$JIT$
         2 000335   400232 756100                    STQ     154,,PR4

      555     8215    2                CALL FMM$DFLOPN;           /* OPEN it                            */

   8215  2 000336   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000337   000000 701000 xent               TSX1    FMM$DFLOPN
         2 000340   000000 011000                    NOP     0

      556     8216    2                CALL HFF$TRAPALT ALTRET(BAD_OUTDCB2);

   8216  2 000341   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000342   000000 701000 xent               TSX1    HFF$TRAPALT
         2 000343   000354 702000 2                  TSX2    BAD_OUTDCB2

      557     8217    2                IF NOT DCBADDR(V$# -> FPT$ERRMSG.OUTDCB2) -> F$DCB.FCD

   8217  2 000344   000004 470400 3                  LDP0    4
         2 000345   000000 471500                    LDP1    0,,PR0
         2 000346   000000 473400 xsym               LDP3    B$PS0$
         2 000347   300001 220100                    LDX0    1,,PR3
         2 000350   100000 474510                    LDP4    0,X0,PR1
         2 000351   400031 236100                    LDQ     25,,PR4
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:93   
         2 000352   020000 316007                    CANQ    8192,DL
         2 000353   000361 601000 2                  TNZ     s:8225

      558     8218    2                 THEN                      /* OPEN didn't work                   */
      559     8219    3   BAD_OUTDCB2:    DO;

   8219  2 000354                       BAD_OUTDCB2  null
      560     8220    3                     EMR_RESULTS.OUTERR2 = TRUE;

   8220  2 000354   004000 236003                    LDQ     2048,DU
         2 000355   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      561     8221    3                     EMR_RESULTS.ERRCODE2 = B$JIT$ -> B$JIT.ERR;

   8221  2 000356   000000 470400 xsym               LDP0    B$JIT$
         2 000357   000012 236100                    LDQ     10,,PR0
         2 000360   200150 756100                    STQ     EMR_RESULTS+2,,AUTO

      562     8222    3                     END;

      563     8223    2                END;

      564     8224        /**/                                    /* Move flag level to local storage   */
      565     8225    1           FLAG# = V$# -> FPT$ERRMSG.FLAGLEV; /* Fetch requested number of flags */

   8225  2 000361   000000 470400 xsym               LDP0    B$PS0$
         2 000362   000001 236100                    LDQ     1,,PR0
         2 000363   000011 772000                    QRL     9
         2 000364   000777 376007                    ANQ     511,DL
         2 000365   200104 756100                    STQ     FLAG#,,AUTO

      566     8226    1           IF FLAG# > 4

   8226  2 000366   000005 116007                    CMPQ    5,DL
         2 000367   000372 602000 2                  TNC     s:8233

      567     8227    1            THEN                           /* Too many requested                 */
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:94   
      568     8228    1              FLAG# = 4;

   8228  2 000370   000004 235007                    LDA     4,DL
         2 000371   200104 755100                    STA     FLAG#,,AUTO

      569     8229        /**/
      570     8230        /*  This is a quickie fix for STAR #8807.  It should be fixed in a classy     */
      571     8231        /*  way in C00.  Note similar fix to M$HELP.                                  */
      572     8232        /**/
      573     8233    1           CALL UMD$CHKOPN ALTRET(DRIBBLE_ALT); /* OPEN M$DRIBBLE if needed      */

   8233  2 000372   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000373   000000 701000 xent               TSX1    UMD$CHKOPN
         2 000374   000375 702000 2                  TSX2    DRIBBLE_ALT

   8226  2 000375                       DRIBBLE_ALT  null
      574     8234    1   DRIBBLE_ALT: ;
      575     8235        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:95   
      576     8236        /**/                                    /* FPT INITIALIZATION                 */
      577     8237    1           EMR_RFPT = INIT_RFPT;

   8237  2 000375   000100 100400                    MLR     fill='000'O
         2 000376   000000 000070 1                  ADSC9   INIT_RFPT                cn=0,n=56
         2 000377   200004 000070                    ADSC9   EMR_RFPT,,AUTO           cn=0,n=56

      578     8238    1           EMR_RFPT.KEY_ = VECTOR(READKEY);

   8238  2 000400   000005 235000 3                  LDA     5
         2 000401   200127 236100                    LDQ     AD_RDKEY$,,AUTO
         2 000402   200006 757100                    STAQ    EMR_RFPT+2,,AUTO

      579     8239    1           EMR_RFPT.V_ = VECTOR(EMR_RFPT.V);

   8239  2 000403   000006 235000 3                  LDA     6
         2 000404   200162 452500                    STP2    @MIN_HOLE+1,,AUTO
         2 000405   200162 236100                    LDQ     @MIN_HOLE+1,,AUTO
         2 000406   000014 036003                    ADLQ    12,DU
         2 000407   200004 757100                    STAQ    EMR_RFPT,,AUTO

      580     8240    1           EMR_RFPT.V.DCB# = %M$STAR#;

   8240  2 000410   000001 220003                    LDX0    1,DU
         2 000411   200014 740100                    STX0    EMR_RFPT+8,,AUTO

      581     8241        /**/
      582     8242    1           EMR_WFPT = INIT_WFPT;

   8242  2 000412   000100 100400                    MLR     fill='000'O
         2 000413   000016 000060 1                  ADSC9   INIT_WFPT                cn=0,n=48
         2 000414   200022 000060                    ADSC9   EMR_WFPT,,AUTO           cn=0,n=48

      583     8243    1           EMR_WFPT.V_ = VECTOR(EMR_WFPT.V);

   8243  2 000415   000007 235000 3                  LDA     7
         2 000416   200162 452500                    STP2    @MIN_HOLE+1,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:96   
         2 000417   200162 236100                    LDQ     @MIN_HOLE+1,,AUTO
         2 000420   000032 036003                    ADLQ    26,DU
         2 000421   200022 757100                    STAQ    EMR_WFPT,,AUTO

      584     8244    1           IF (V$# -> FPT$ERRMSG.VFC ~= BINASC(0))

   8244  2 000422   000000 470400 xsym               LDP0    B$PS0$
         2 000423   000001 236100                    LDQ     1,,PR0
         2 000424   000777 376007                    ANQ     511,DL
         2 000425   000000 116003                    CMPQ    0,DU
         2 000426   000436 600000 2                  TZE     s:8252

      585     8245    1            THEN                           /* VFC has been specified             */
      586     8246    2              DO;

      587     8247    2                EMR_WFPT.V.DVBYTE.VFC# = TRUE ; /* Force all WRITEs with VFC     */

   8247  2 000427   100000 236003                    LDQ     32768,DU
         2 000430   200035 256100                    ORSQ    EMR_WFPT+11,,AUTO

      588     8248    2                WR_VFC_BUF.VFC = V$# -> FPT$ERRMSG.VFC; /* Put default VFC in    */

   8248  2 000431   200125 471500                    LDP1    AD_WRBUF$,,AUTO
         2 000432   000001 236100                    LDQ     1,,PR0
         2 000433   000033 736000                    QLS     27
         2 000434   100000 552140                    STBQ    0,'40'O,PR1

      589     8249                                                /* first buffer position              */
      590     8250    2                END;

   8250  2 000435   000440 710000 2                  TRA     s:8254

      591     8251    1            ELSE                           /* VFC has not been specified         */
      592     8252    1             EMR_WFPT.V.DVBYTE.VFC# = FALSE ; /* Specify all WRITEs without VFC  */

   8252  2 000436   000010 236000 3                  LDQ     8
         2 000437   200035 356100                    ANSQ    EMR_WFPT+11,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:97   

      593     8253        /**/
      594     8254    1           EMR_PRECFPT = INIT_PRECFPT;

   8254  2 000440   000100 100400                    MLR     fill='000'O
         2 000441   000032 000050 1                  ADSC9   INIT_PRECFPT             cn=0,n=40
         2 000442   200036 000050                    ADSC9   EMR_PRECFPT,,AUTO        cn=0,n=40

      595     8255    1           EMR_PRECFPT.V_ = VECTOR(EMR_PRECFPT.V);

   8255  2 000443   000007 235000 3                  LDA     7
         2 000444   200162 452500                    STP2    @MIN_HOLE+1,,AUTO
         2 000445   200162 236100                    LDQ     @MIN_HOLE+1,,AUTO
         2 000446   000044 036003                    ADLQ    36,DU
         2 000447   200036 757100                    STAQ    EMR_PRECFPT,,AUTO

      596     8256    1           EMR_PRECFPT.V.DCB# = %M$STAR#;

   8256  2 000450   200044 740100                    STX0    EMR_PRECFPT+6,,AUTO

      597     8257    1           EMR_PRECFPT.KEY_ = VECTOR(PRECKEY);

   8257  2 000451   000005 235000 3                  LDA     5
         2 000452   200126 236100                    LDQ     AD_PRKEY$,,AUTO
         2 000453   200040 757100                    STAQ    EMR_PRECFPT+2,,AUTO

      598     8258        /**/
      599     8259    1           EMR_UNFIDFPT = INIT_UNFIDFPT;

   8259  2 000454   000100 100400                    MLR     fill='000'O
         2 000455   000044 000130 1                  ADSC9   INIT_UNFIDFPT            cn=0,n=88
         2 000456   200050 000130                    ADSC9   EMR_UNFIDFPT,,AUTO       cn=0,n=88

      600     8260    1           EMR_UNFIDFPT.V_ = VECTOR(EMR_UNFIDFPT.V);

   8260  2 000457   000011 235000 3                  LDA     9
         2 000460   200162 452500                    STP2    @MIN_HOLE+1,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:98   
         2 000461   200162 236100                    LDQ     @MIN_HOLE+1,,AUTO
         2 000462   000074 036003                    ADLQ    60,DU
         2 000463   200050 757100                    STAQ    EMR_UNFIDFPT,,AUTO

      601     8261        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:99   
      602     8262    1           CALL HFF$TRAPALT ALTRET(ERRMSG_BAILOUT);

   8262  2 000464   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000465   000000 701000 xent               TSX1    HFF$TRAPALT
         2 000466   002317 702000 2                  TSX2    RESULTS_MOVED

      603     8263    1           BUF$ = BUF$#;                   /* Point to user buffer               */

   8263  2 000467   000000 236000 xsym               LDQ     B$PS2$
         2 000470   200123 756100                    STQ     BUF$,,AUTO

      604     8264    1           CALL HFF$DSIZ(BUF_PS#,V_BUF_SIZE) ALTRET (BUF_ERR);

   8264  2 000471   200145 630500                    EPPR0   V_BUF_SIZE,,AUTO
         2 000472   200163 450500                    STP0    @MIN_HOLE+2,,AUTO
         2 000473   000012 236000 3                  LDQ     10
         2 000474   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 000475   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 000476   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000477   000000 701000 xent               TSX1    HFF$DSIZ
         2 000500   000507 702000 2                  TSX2    BUF_ERR

      605     8265    1           ERR_RECS = V_BUF_SIZE/SLOT_SIZE;

   8265  2 000501   200145 236100                    LDQ     V_BUF_SIZE,,AUTO
         2 000502   000001 772000                    QRL     1
         2 000503   000074 506007                    DIV     60,DL
         2 000504   200077 756100                    STQ     ERR_RECS,,AUTO

      606     8266                                                /* NUMBER OF 120 BYTE SLOTS IN BUFFER */
      607     8267    1           IF (ERR_RECS < 1)

   8267  2 000505   000000 116003                    CMPQ    0,DU
         2 000506   000514 601000 2                  TNZ     s:8275

      608     8268    1            THEN
      609     8269    2             DO;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:100  

      610     8270    2   BUF_ERR:   EMR_RESULTS.BADCALL = TRUE;

   8270  2 000507   400000 236003       BUF_ERR      LDQ     -131072,DU
         2 000510   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      611     8271    2              EMR_RESULTS.BUFERR = TRUE;

   8271  2 000511   001000 236003                    LDQ     512,DU
         2 000512   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      612     8272    2              GOTO ERRMSG_ALTRTN;

   8272  2 000513   002300 710000 2                  TRA     ERRMSG_ALTRTN

      613     8273    2              END;
      614     8274        /**/
      615     8275    1           ERR_RECS = ERR_RECS - 1;        /* CONVERT TO INDEX*/

   8275  2 000514   000001 136007                    SBLQ    1,DL
         2 000515   200077 756100                    STQ     ERR_RECS,,AUTO

      616     8276        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:101  
      617     8277    1           IF V$# -> FPT$ERRMSG.NREAD = TRUE

   8277  2 000516   000000 470400 xsym               LDP0    B$PS0$
         2 000517   000002 236100                    LDQ     2,,PR0
         2 000520   400000 316007                    CANQ    -131072,DL
         2 000521   000576 600000 2                  TZE     PREPARE_FILE

      618     8278    1            THEN                           /* NREAD, use buffer as passed        */
      619     8279    2              DO;

      620     8280    2                MSG_FLGS = FALSE;          /* We will have to construct flags    */

   8280  2 000522   000000 236003                    LDQ     0,DU
         2 000523   200115 552140                    STBQ    MSG_FLGS,'40'O,AUTO

      621     8281    2                MSG_FLGS.SUB = TRUE;       /* Assume substitutions               */

   8281  2 000524   400000 236003                    LDQ     -131072,DU
         2 000525   200115 256100                    ORSQ    MSG_FLGS,,AUTO

      622     8282                                                /* Find size of passed record         */
      623     8283    2                MSG_SIZE = SLOT_SIZE;

   8283  2 000526   000170 235007                    LDA     120,DL
         2 000527   200106 755100                    STA     MSG_SIZE,,AUTO

      624     8284    3                DO WHILE (BUF$ -> MSG$SLOTARRAY(MSG_SIZE -1) = ' '

   8284  2 000530   000534 710000 2                  TRA     s:8287

      625     8285    3                 AND MSG_SIZE > 1);
      626     8286    3                   MSG_SIZE = MSG_SIZE -1;

   8286  2 000531   200106 235100                    LDA     MSG_SIZE,,AUTO
         2 000532   000001 135007                    SBLA    1,DL
         2 000533   200106 755100                    STA     MSG_SIZE,,AUTO

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:102  
      627     8287    3                   END;

   8287  2 000534   200123 470500                    LDP0    BUF$,,AUTO
         2 000535   040000 106505                    CMPC    fill='040'O
         2 000536   077777 600001                    ADSC9   -1,A,PR0                 cn=3,n=1
         2 000537   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000540   000543 601000 2                  TNZ     s:8289
         2 000541   000002 115007                    CMPA    2,DL
         2 000542   000531 603000 2                  TRC     s:8286

      628     8288                                                /* Insert FLAGLEV markers             */
      629     8289    2                IF FLAG# > 0

   8289  2 000543   200104 236100                    LDQ     FLAG#,,AUTO
         2 000544   000575 600000 2                  TZE     s:8297

      630     8290    2                 THEN
      631     8291    3                   DO;

      632     8292    3                     COUNT = FLAG#+1;

   8292  2 000545   000001 036007                    ADLQ    1,DL
         2 000546   200105 756100                    STQ     COUNT,,AUTO

      633     8293    3                     CALL PUSH_RIGHT(0,0,1); /* Make room                        */

   8293  2 000547   000014 237000 3                  LDAQ    12
         2 000550   200160 757100                    STAQ    @START+1,,AUTO
         2 000551   000014 236000 3                  LDQ     12
         2 000552   200157 756100                    STQ     @VICTIM+1,,AUTO
         2 000553   004052 701000 2                  TSX1    PUSH_RIGHT
         2 000554   000000 011000                    NOP     0

      634     8294    3                     CALL INSERT(BUF$ -> MSG$SLOT,0,FLAG# +1,

   8294  2 000555   200104 720100                    LXL0    FLAG#,,AUTO
         2 000556   000001 621010                    EAX1    1,X0
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:103  
         2 000557   200104 722100                    LXL2    FLAG#,,AUTO
         2 000560   200123 470500                    LDP0    BUF$,,AUTO
         2 000561   040140 100440                    MLR     fill='040'O
         2 000562   000253 000012 1                  ADSC9   FLAGBUF                  cn=0,n=*X2
         2 000563   000000 000011                    ADSC9   0,,PR0                   cn=0,n=*X1
         2 000564   200104 236100                    LDQ     FLAG#,,AUTO
         2 000565   200104 136100                    SBLQ    FLAG#,,AUTO
         2 000566   000027 116000 xsym               CMPQ    B_VECTNIL+23
         2 000567   000575 604400 2                  TMOZ    s:8297
         2 000570   000001 623006                    EAX3    1,QL
         2 000571   200104 235100                    LDA     FLAG#,,AUTO
         2 000572   040145 100400                    MLR     fill='040'O
         2 000573   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 000574   000000 000013                    ADSC9   0,A,PR0                  cn=0,n=*X3

      635     8295    3                       SUBSTR(FLAGBUF,0,FLAG#),' ');
      636     8296    3                     END;

      637     8297    2                GOTO ERRMSG_2;

   8297  2 000575   001430 710000 2                  TRA     ERRMSG_2

      638     8298    2                END;
      639     8299        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:104  
      640     8300    1   PREPARE_FILE:                           /* CLEAR and set up error msg file    */
      641     8301    1           IF (M$STAR$ -> F$DCB.FCD = TRUE)

   8301  2 000576   000000 470400 xsym  PREPARE_FILE LDP0    B$M$STAR$
         2 000577   000031 236100                    LDQ     25,,PR0
         2 000600   020000 316007                    CANQ    8192,DL
         2 000601   000610 600000 2                  TZE     s:8307

      642     8302    1            THEN                           /* STAR is OPEN, CLOSE it             */
      643     8303    2             DO;

      644     8304    2              B$JIT$ -> B$JIT.DCB$ = M$STAR$;

   8304  2 000602   000000 236000 xsym               LDQ     B$M$STAR$
         2 000603   000000 471400 xsym               LDP1    B$JIT$
         2 000604   100232 756100                    STQ     154,,PR1

      645     8305    2              CALL FMP$CLSJ;

   8305  2 000605   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000606   000000 701000 xent               TSX1    FMP$CLSJ
         2 000607   000000 011000                    NOP     0

      646     8306    2              END;

      647     8307    1           CALL FMM$SCRUB(M$STAR$);

   8307  2 000610   000016 630400 3                  EPPR0   14
         2 000611   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000612   000000 701000 xent               TSX1    FMM$SCRUB
         2 000613   000000 011000                    NOP     0

      648     8308        /**/
      649     8309    1           BUF$ -> MSG$SLOT = SUBSTR(FLAGBUF,0,FLAG#); /* Clear the buffer       */

   8309  2 000614   200104 720100                    LXL0    FLAG#,,AUTO
         2 000615   200123 470500                    LDP0    BUF$,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:105  
         2 000616   040100 100440                    MLR     fill='040'O
         2 000617   000253 000010 1                  ADSC9   FLAGBUF                  cn=0,n=*X0
         2 000620   000000 000170                    ADSC9   0,,PR0                   cn=0,n=120

      650     8310        /**/
      651     8311    1           BUF_VECTOR.PTR$ = PINCRC(BUF$,FLAG#);

   8311  2 000621   200104 236100                    LDQ     FLAG#,,AUTO
         2 000622   000020 736000                    QLS     16
         2 000623   200123 036100                    ADLQ    BUF$,,AUTO
         2 000624   200131 756100                    STQ     BUF_VECTOR+1,,AUTO

      652     8312    1           BUF_VECTOR.FLAGSV = 2045;

   8312  2 000625   200130 236100                    LDQ     BUF_VECTOR,,AUTO
         2 000626   000017 376000 3                  ANQ     15
         2 000627   177640 276007                    ORQ     65440,DL
         2 000630   200130 756100                    STQ     BUF_VECTOR,,AUTO

      653     8313    1           BUF_VECTOR.BOUND = SLOT_SIZE - FLAG# - 1;

   8313  2 000631   000167 236007                    LDQ     119,DL
         2 000632   200104 136100                    SBLQ    FLAG#,,AUTO
         2 000633   000020 736000                    QLS     16
         2 000634   200130 676100                    ERQ     BUF_VECTOR,,AUTO
         2 000635   000034 376000 xsym               ANQ     B_VECTNIL+28
         2 000636   200130 656100                    ERSQ    BUF_VECTOR,,AUTO

      654     8314        /**/
      655     8315    1           M$STAR$ -> F$DCB.FUN = %IN#;

   8315  2 000637   000000 471400 xsym               LDP1    B$M$STAR$
         2 000640   000002 236003                    LDQ     2,DU
         2 000641   100032 552120                    STBQ    26,'20'O,PR1

      656     8316    1           M$STAR$ -> F$DCB.ASN = %FILE#;

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:106  
   8316  2 000642   001000 236007                    LDQ     512,DL
         2 000643   100032 552110                    STBQ    26,'10'O,PR1

      657     8317    1           M$STAR$ -> F$DCB.ACS = %DIRECT#;

   8317  2 000644   000002 236007                    LDQ     2,DL
         2 000645   100036 552104                    STBQ    30,'04'O,PR1

      658     8318    1           M$STAR$ -> F$DCB.RES= ' ';

   8318  2 000646   000035 236000 xsym               LDQ     B_VECTNIL+29
         2 000647   100026 756100                    STQ     22,,PR1

      659     8319    1           M$STAR$ -> F$DCB.AMFLG = FALSE;

   8319  2 000650   000020 236000 3                  LDQ     16
         2 000651   100064 356100                    ANSQ    52,,PR1

      660     8320    1           B$JIT$ -> B$JIT.DCB$ = M$STAR$;

   8320  2 000652   000000 236000 xsym               LDQ     B$M$STAR$
         2 000653   000000 473400 xsym               LDP3    B$JIT$
         2 000654   300232 756100                    STQ     154,,PR3

      661     8321        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:107  
      662     8322        /**/
      663     8323    1           CALL HFF$NILERASE(NAME_PS#) ALTRET (DFLT_FILENAME);

   8323  2 000655   000021 630400 3                  EPPR0   17
         2 000656   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000657   000000 701000 xent               TSX1    HFF$NILERASE
         2 000660   000717 702000 2                  TSX2    DFLT_FILENAME

      664     8324                                                /* TEST NAME$# FOR NULL-ERASE         */
      665     8325    1           TEXT_BUF.COUNT_CHAR = NAME$# -> VLP$NAME.COUNT_CHAR;

   8325  2 000661   000000 470400 xsym               LDP0    B$PS3$
         2 000662   040100 100500                    MLR     fill='040'O
         2 000663   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 000664   200132 000001                    ADSC9   TEXT_BUF,,AUTO           cn=0,n=1

      666     8326    1           M$STAR$ -> F$DCB.NAME.L = TEXT_BUF.COUNT;

   8326  2 000665   000000 471400 xsym               LDP1    B$M$STAR$
         2 000666   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 000667   100010 552140                    STBQ    8,'40'O,PR1

      667     8327    1           TEXT_BUF.TEXT = SUBSTR(NAME$# -> VLP$NAME.TEXT,0,TEXT_BUF.COUNT);

   8327  2 000670   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 000671   000033 772000                    QRL     27
         2 000672   000000 620006                    EAX0    0,QL
         2 000673   040100 100540                    MLR     fill='040'O
         2 000674   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         2 000675   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43

      668     8328    1           USER_FILE = TRUE;

   8328  2 000676   400000 236003                    LDQ     -131072,DU
         2 000677   200111 756100                    STQ     USER_FILE,,AUTO

      669     8329        /**/
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:108  
      670     8330    1           CALL HFF$NILERASE(PASS_PS#) ALTRET (NO_FILEPASS);

   8330  2 000700   000022 630400 3                  EPPR0   18
         2 000701   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000702   000000 701000 xent               TSX1    HFF$NILERASE
         2 000703   000712 702000 2                  TSX2    NO_FILEPASS

      671     8331    1           M$STAR$ -> F$DCB.PASS = PASS$# -> VLP$PASS;

   8331  2 000704   000000 470400 xsym               LDP0    B$PS5$
         2 000705   000000 471400 xsym               LDP1    B$M$STAR$
         2 000706   040100 100500                    MLR     fill='040'O
         2 000707   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         2 000710   100022 000010                    ADSC9   18,,PR1                  cn=0,n=8

      672     8332    2           DO WHILE (FALSE);

   8332  2 000711   000716 710000 2                  TRA     s:8337

   8330  2 000712                       NO_FILEPASS  null
      673     8333    2   NO_FILEPASS: ;
      674     8334    2              M$STAR$ -> F$DCB.PASS = ' ';

   8334  2 000712   000035 235000 xsym               LDA     B_VECTNIL+29
         2 000713   000035 236000 xsym               LDQ     B_VECTNIL+29
         2 000714   000000 470400 xsym               LDP0    B$M$STAR$
         2 000715   000022 757100                    STAQ    18,,PR0

      675     8335    2              END;

      676     8336        /**/
      677     8337    2           DO WHILE (FALSE);

   8337  2 000716   001011 710000 2                  TRA     SET_M$STAR_LANG

   8334  2 000717                       DFLT_FILENA* null
      678     8338    2   DFLT_FILENAME:;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:109  
      679     8339    2              USER_FILE = FALSE;

   8339  2 000717   200111 450100                    STZ     USER_FILE,,AUTO

      680     8340    2              M$STAR$->F$DCB.NAME.L = 7;

   8340  2 000720   000000 470400 xsym               LDP0    B$M$STAR$
         2 000721   007000 236003                    LDQ     3584,DU
         2 000722   000010 552140                    STBQ    8,'40'O,PR0

      681     8341    2              TEXT_BUF.TEXT = ':ERRMSG';   /* STANDARD FILE NAME                 */

   8341  2 000723   040100 100400                    MLR     fill='040'O
         2 000724   000257 000007 1                  ADSC9   SYSV+1                   cn=0,n=7
         2 000725   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43

      682     8342    2              IF CODE.MON = FALSE

   8342  2 000726   200120 236100                    LDQ     CODE,,AUTO
         2 000727   400000 316007                    CANQ    -131072,DL
         2 000730   001006 601000 2                  TNZ     s:8360

      683     8343    2               THEN                        /* Default is FCG-specific            */
      684     8344    2                 IF CODE.FCGMID(0) = 26    /* 26 = Z - LANGUAGE PROCESSOR        */

   8344  2 000731   200120 236100                    LDQ     CODE,,AUTO
         2 000732   770000 376003                    ANQ     -4096,DU
         2 000733   320000 116003                    CMPQ    106496,DU
         2 000734   000754 600000 2                  TZE     s:8352
         2 000735   210000 116003                    CMPQ    69632,DU
         2 000736   000754 600000 2                  TZE     s:8352
         2 000737   300000 116003                    CMPQ    98304,DU
         2 000740   000754 600000 2                  TZE     s:8352
         2 000741   310000 116003                    CMPQ    102400,DU
         2 000742   000754 600000 2                  TZE     s:8352
         2 000743   260000 116003                    CMPQ    90112,DU
         2 000744   001006 601000 2                  TNZ     s:8360
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:110  
         2 000745   200120 236100                    LDQ     CODE,,AUTO
         2 000746   000030 772000                    QRL     24
         2 000747   000077 376007                    ANQ     63,DL
         2 000750   000000 066406                    CMPB    filb='0'B
         2 000751   000256 000001 1                  BDSC    SYSV,Q                   by=0,bit=0,n=1
         2 000752   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         2 000753   001006 601000 2                  TNZ     s:8360

      685     8345    2                  OR CODE.FCGMID(0) = 17   /* 17 = Q - TP's forms language       */
      686     8346    2                  OR CODE.FCGMID(0) = 24   /* 24 = X - LIBRARY                   */
      687     8347    2                  OR CODE.FCGMID(0) = 25   /* 25 = Y - INSTALLATION SPECIFIC ERR */
      688     8348    2                  OR (CODE.FCGMID(0) = 22   /* 22 = V - SOME NOT (C,E,P,X,Y) */
      689     8349    2                     AND NOT SYSVA(CODE.FCGMID(1)))
      690     8350    2                  THEN
      691     8351    3                    DO;

      692     8352    3                      M$STAR$ -> F$DCB.NAME.L = 9;

   8352  2 000754   011000 236003                    LDQ     4608,DU
         2 000755   000010 552140                    STBQ    8,'40'O,PR0

      693     8353    3                      TEXT_BUF.TEXT = ':::ERRMSG';

   8353  2 000756   040100 100400                    MLR     fill='040'O
         2 000757   000261 000011 1                  ADSC9   SYSV+3                   cn=0,n=9
         2 000760   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43

      694     8354    3                      TEXT_BUF.TEXT_ARRAY(1) = BINASC(CODE.FCGMID(0) + 64);

   8354  2 000761   200120 236100                    LDQ     CODE,,AUTO
         2 000762   000036 772000                    QRL     30
         2 000763   000100 036007                    ADLQ    64,DL
         2 000764   000033 736000                    QLS     27
         2 000765   000023 276000 3                  ORQ     19
         2 000766   000022 772000                    QRL     18
         2 000767   200132 552110                    STBQ    TEXT_BUF,'10'O,AUTO

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:111  
      695     8355    3                      IF (CODE.FCGMID(1) < 48) THEN /* < '60'O MEANS LETTER      */

   8355  2 000770   200120 236100                    LDQ     CODE,,AUTO
         2 000771   007700 376003                    ANQ     4032,DU
         2 000772   006000 116003                    CMPQ    3072,DU
         2 000773   001002 603000 2                  TRC     s:8358

      696     8356    3                         TEXT_BUF.UBIN_ARRAY(2) = CODE.FCGMID(1) + 64;

   8356  2 000774   200120 236100                    LDQ     CODE,,AUTO
         2 000775   000030 772000                    QRL     24
         2 000776   000077 376007                    ANQ     63,DL
         2 000777   000100 036007                    ADLQ    64,DL
         2 001000   200132 552104                    STBQ    TEXT_BUF,'04'O,AUTO
         2 001001   001006 710000 2                  TRA     s:8360

      697     8357    3                      ELSE
      698     8358    3                         TEXT_BUF.UBIN_ARRAY(2) = CODE.FCGMID(1);

   8358  2 001002   200120 236100                    LDQ     CODE,,AUTO
         2 001003   007700 376003                    ANQ     4032,DU
         2 001004   000030 772000                    QRL     24
         2 001005   200132 552104                    STBQ    TEXT_BUF,'04'O,AUTO

      699     8359    3                      END;

      700     8360    2              M$STAR$ -> F$DCB.PASS = ' ';

   8360  2 001006   000035 235000 xsym               LDA     B_VECTNIL+29
         2 001007   000035 236000 xsym               LDQ     B_VECTNIL+29
         2 001010   000022 757100                    STAQ    18,,PR0

      701     8361    2              END;

      702     8362        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:112  
      703     8363    1   SET_M$STAR_LANG:
      704     8364    1           IF V$# -> FPT$ERRMSG.MY_LANG

   8364  2 001011   000000 470400 xsym  SET_M$STAR_* LDP0    B$PS0$
         2 001012   000002 236100                    LDQ     2,,PR0
         2 001013   000001 316007                    CANQ    1,DL
         2 001014   001023 600000 2                  TZE     s:8366

      705     8365    1           THEN LANG = B$JIT$ -> B$JIT.LANG;

   8365  2 001015   000000 471400 xsym               LDP1    B$JIT$
         2 001016   100145 236100                    LDQ     101,,PR1
         2 001017   000033 736000                    QLS     27
         2 001020   000023 276000 3                  ORQ     19
         2 001021   200116 756100                    STQ     LANG,,AUTO
         2 001022   001027 710000 2                  TRA     s:8367

      706     8366    1           ELSE LANG = V$# -> FPT$ERRMSG.LANG;

   8366  2 001023   000003 236100                    LDQ     3,,PR0
         2 001024   777000 376003                    ANQ     -512,DU
         2 001025   000023 276000 3                  ORQ     19
         2 001026   200116 756100                    STQ     LANG,,AUTO

      707     8367    1           IF ( LANG ~= BINASC(0)) AND (LANG ~= ' ')

   8367  2 001027   200116 236100                    LDQ     LANG,,AUTO
         2 001030   777000 376003                    ANQ     -512,DU
         2 001031   000000 116003                    CMPQ    0,DU
         2 001032   001055 600000 2                  TZE     s:8376
         2 001033   200116 236100                    LDQ     LANG,,AUTO
         2 001034   777000 376003                    ANQ     -512,DU
         2 001035   040000 116003                    CMPQ    16384,DU
         2 001036   001055 600000 2                  TZE     s:8376

      708     8368    1             THEN                          /* User has a native language         */
      709     8369    2               DO;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:113  

      710     8370    2               NATIVE_LANG = TRUE;

   8370  2 001037   400000 236003                    LDQ     -131072,DU
         2 001040   200112 756100                    STQ     NATIVE_LANG,,AUTO

      711     8371    2               EMR_RESULTS.NNATIVE = FALSE;

   8371  2 001041   000024 236000 3                  LDQ     20
         2 001042   200146 356100                    ANSQ    EMR_RESULTS,,AUTO

      712     8372    2               TEXT_BUF.TEXT_ARRAY(M$STAR$ -> F$DCB.NAME.L) = LANG;

   8372  2 001043   000000 471400 xsym               LDP1    B$M$STAR$
         2 001044   100010 236100                    LDQ     8,,PR1
         2 001045   000033 772000                    QRL     27
         2 001046   040106 100500                    MLR     fill='040'O
         2 001047   200116 000001                    ADSC9   LANG,,AUTO               cn=0,n=1
         2 001050   200132 200001                    ADSC9   TEXT_BUF,Q,AUTO          cn=1,n=1

      713     8373    2               M$STAR$ -> F$DCB.NAME.L = M$STAR$ -> F$DCB.NAME.L + 1;

   8373  2 001051   100010 236100                    LDQ     8,,PR1
         2 001052   001000 036003                    ADLQ    512,DU
         2 001053   100010 552140                    STBQ    8,'40'O,PR1

      714     8374    2               END;

   8374  2 001054   001056 710000 2                  TRA     SET_M$STAR_NAME

      715     8375    1             ELSE                          /* User has NO native language        */
      716     8376    1              NATIVE_LANG = FALSE;

   8376  2 001055   200112 450100                    STZ     NATIVE_LANG,,AUTO

      717     8377        /**/
      718     8378    1   SET_M$STAR_NAME:
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:114  
      719     8379    1           M$STAR$ -> F$DCB.NAME.C = SUBSTR (TEXT_BUF.TEXT,0,M$STAR$ -> F$DCB.NAME.L);

   8379  2 001056   000000 470400 xsym  SET_M$STAR_* LDP0    B$M$STAR$
         2 001057   000010 236100                    LDQ     8,,PR0
         2 001060   000033 772000                    QRL     27
         2 001061   000000 620006                    EAX0    0,QL
         2 001062   040100 100540                    MLR     fill='040'O
         2 001063   200132 200010                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=*X0
         2 001064   000010 200037                    ADSC9   8,,PR0                   cn=1,n=31

      720     8380        /**/
      721     8381    1           CALL HFF$NILERASE(ACCT_PS#) ALTRET (DFLT_FILEACCT);

   8381  2 001065   000025 630400 3                  EPPR0   21
         2 001066   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001067   000000 701000 xent               TSX1    HFF$NILERASE
         2 001070   001077 702000 2                  TSX2    DFLT_FILEACCT

      722     8382    1           M$STAR$ -> F$DCB.ACCT = ACCT$# -> VLP$ACCT;

   8382  2 001071   000000 470400 xsym               LDP0    B$PS4$
         2 001072   000000 471400 xsym               LDP1    B$M$STAR$
         2 001073   040100 100500                    MLR     fill='040'O
         2 001074   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         2 001075   100020 000010                    ADSC9   16,,PR1                  cn=0,n=8

      723     8383    2           DO WHILE (FALSE);

   8383  2 001076   001125 710000 2                  TRA     s:8400

   8381  2 001077                       DFLT_FILEAC* null
      724     8384    2   DFLT_FILEACCT: ;
      725     8385    2              IF CODE.MON = FALSE

   8385  2 001077   200120 236100                    LDQ     CODE,,AUTO
         2 001100   400000 316007                    CANQ    -131072,DL
         2 001101   001121 601000 2                  TNZ     SY_FILEACCT
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:115  

      726     8386    2                THEN
      727     8387    3                  DO;

      728     8388    3   LM_FILEACCT:   M$STAR$ -> F$DCB.ACCT = B$M$LM$ -> F$DCB.ACCT;

   8388  2 001102   000000 470400 xsym  LM_FILEACCT  LDP0    B$M$LM$
         2 001103   000020 237100                    LDAQ    16,,PR0
         2 001104   000000 471400 xsym               LDP1    B$M$STAR$
         2 001105   100020 757100                    STAQ    16,,PR1

      729     8389    3                  IF M$STAR$ -> F$DCB.ACCT = ' ' THEN GOTO SY_FILEACCT;

   8389  2 001106   100020 237100                    LDAQ    16,,PR1
         2 001107   000026 117000 3                  CMPAQ   22
         2 001110   001121 600000 2                  TZE     SY_FILEACCT

      730     8390    3                  IF NOT B$M$LM$->F$DCB.FCD THEN GOTO SY_FILEACCT;

   8390  2 001111   000031 236100                    LDQ     25,,PR0
         2 001112   020000 316007                    CANQ    8192,DL
         2 001113   001121 600000 2                  TZE     SY_FILEACCT

      731     8391    3                  IF M$STAR$->F$DCB.NAME.C = ':ERRMSG' THEN GOTO SY_FILEACCT;

   8391  2 001114   040000 106500                    CMPC    fill='040'O
         2 001115   100010 200037                    ADSC9   8,,PR1                   cn=1,n=31
         2 001116   000257 000007 1                  ADSC9   SYSV+1                   cn=0,n=7
         2 001117   001121 600000 2                  TZE     SY_FILEACCT

      732     8392    3                  END;

   8392  2 001120   001125 710000 2                  TRA     s:8400

      733     8393    2                ELSE
      734     8394    2   SY_FILEACCT:   M$STAR$ -> F$DCB.ACCT = ':SYS';

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:116  
   8394  2 001121   000264 235000 1     SY_FILEACCT  LDA     SYSV+6
         2 001122   000035 236000 xsym               LDQ     B_VECTNIL+29
         2 001123   000000 470400 xsym               LDP0    B$M$STAR$
         2 001124   000020 757100                    STAQ    16,,PR0

      735     8395    2              END;

      736     8396        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:117  
      737     8397        /**/
      738     8398        /*  The DCB is now set up.  Try the OPEN and see what happens.                */
      739     8399        /**/
      740     8400    1           CALL HFF$TRAPALT ALTRET(BAD_MSG_FILE); /* Quit if TRAP on OPEN      */

   8400  2 001125   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001126   000000 701000 xent               TSX1    HFF$TRAPALT
         2 001127   001261 702000 2                  TSX2    BAD_MSG_FILE

      741     8401    1           CALL FMM$DFLOPN;

   8401  2 001130   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001131   000000 701000 xent               TSX1    FMM$DFLOPN
         2 001132   000000 011000                    NOP     0

      742     8402    1           IF M$STAR$ -> F$DCB.FCD = TRUE

   8402  2 001133   000000 470400 xsym               LDP0    B$M$STAR$
         2 001134   000031 236100                    LDQ     25,,PR0
         2 001135   020000 316007                    CANQ    8192,DL
         2 001136   001255 601000 2                  TNZ     ERRMSG_OPENED

      743     8403    1            THEN                           /* Got it OPEN!                       */
      744     8404    1              GOTO ERRMSG_OPENED;
      745     8405        /**/
      746     8406        /*  Perhaps we failed by picking the wrong ACCOUNT.  We should try            */
      747     8407        /*  another one.  The search order is:                                        */
      748     8408        /*      as specified by caller                                                */
      749     8409        /*      that in M$LM (if not MON)                                             */
      750     8410        /*      :SYS                                                                  */
      751     8411        /**/
      752     8412    1           IF (M$STAR$ -> F$DCB.ACCT = B$M$LM$ -> F$DCB.ACCT) AND

   8412  2 001137   000000 471400 xsym               LDP1    B$M$LM$
         2 001140   000020 237100                    LDAQ    16,,PR0
         2 001141   100020 117100                    CMPAQ   16,,PR1
         2 001142   001147 601000 2                  TNZ     s:8416
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:118  
         2 001143   040000 106500                    CMPC    fill='040'O
         2 001144   000020 000010                    ADSC9   16,,PR0                  cn=0,n=8
         2 001145   000264 000004 1                  ADSC9   SYSV+6                   cn=0,n=4
         2 001146   001121 601000 2                  TNZ     SY_FILEACCT

      753     8413    1              (M$STAR$ -> F$DCB.ACCT ~= ':SYS')
      754     8414    1            THEN                           /* ALREADY TRIED FROM M$LM            */
      755     8415    1              GOTO SY_FILEACCT;
      756     8416    1           IF M$STAR$ -> F$DCB.ACCT ~= ':SYS'

   8416  2 001147   040000 106500                    CMPC    fill='040'O
         2 001150   000020 000010                    ADSC9   16,,PR0                  cn=0,n=8
         2 001151   000264 000004 1                  ADSC9   SYSV+6                   cn=0,n=4
         2 001152   001077 601000 2                  TNZ     DFLT_FILEACCT

      757     8417    1            THEN                           /* ~SY, ~LM, MUST HAVE BEEN PASSED    */
      758     8418    1              GOTO DFLT_FILEACCT;          /* PICK SOME DEFAULT                  */
      759     8419        /**/
      760     8420        /*  Perhaps we failed as the result of using a native language.  Try          */
      761     8421        /*  for a file in the default language.                                       */
      762     8422        /**/
      763     8423    1           IF NATIVE_LANG

   8423  2 001153   200112 234100                    SZN     NATIVE_LANG,,AUTO
         2 001154   001170 605000 2                  TPL     s:8437
         2 001155   000000 473400 xsym               LDP3    B$PS0$
         2 001156   300002 236100                    LDQ     2,,PR3
         2 001157   020000 316007                    CANQ    8192,DL
         2 001160   001170 600000 2                  TZE     s:8437

      764     8424    1            AND V$# -> FPT$ERRMSG.SUBLANG
      765     8425    1            THEN                           /* We failed with native language     */
      766     8426    2             DO;

      767     8427    2               NATIVE_LANG = FALSE;        /* Try again without native language  */

   8427  2 001161   200112 450100                    STZ     NATIVE_LANG,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:119  

      768     8428    2               EMR_RESULTS.NNATIVE = TRUE;

   8428  2 001162   002000 236003                    LDQ     1024,DU
         2 001163   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      769     8429    2               M$STAR$ -> F$DCB.NAME.L = M$STAR$ -> F$DCB.NAME.L -1;

   8429  2 001164   000010 236100                    LDQ     8,,PR0
         2 001165   777000 036003                    ADLQ    -512,DU
         2 001166   000010 552140                    STBQ    8,'40'O,PR0

      770     8430    2               GOTO SET_M$STAR_NAME;

   8430  2 001167   001056 710000 2                  TRA     SET_M$STAR_NAME

      771     8431    2               END;
      772     8432        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:120  
      773     8433        /**/
      774     8434        /*  We have failed at all attempts to use the specified file name.  Try       */
      775     8435        /*  crafting up a default file from the error message.                        */
      776     8436        /**/
      777     8437    1           IF USER_FILE

   8437  2 001170   200111 234100                    SZN     USER_FILE,,AUTO
         2 001171   000717 604000 2                  TMI     DFLT_FILENAME

      778     8438    1            THEN                           /* Failed on the user file            */
      779     8439    1              GOTO DFLT_FILENAME;          /* Try the default                    */
      780     8440        /**/
      781     8441        /*  We have exhausted all the possibilities for this error code, but we       */
      782     8442        /*  might be able to build a good file name with the ALTERNATE error code.    */
      783     8443        /**/
      784     8444    1           IF ALTCODE_EXISTS

   8444  2 001172   200113 234100                    SZN     ALTCODE_EXISTS,,AUTO
         2 001173   001217 605000 2                  TPL     s:8459

      785     8445    1            THEN                           /* Try it all again with new CODE     */
      786     8446    2              DO;

      787     8447    2                IF NOT V$# -> FPT$ERRMSG.L6_ALTCODE THEN

   8447  2 001174   000000 473400 xsym               LDP3    B$PS0$
         2 001175   300002 236100                    LDQ     2,,PR3
         2 001176   000002 316007                    CANQ    2,DL
         2 001177   001205 601000 2                  TNZ     s:8450

      788     8448    2                   CODE_CHAR = ALTCODE$# -> CODE$CHAR;  /* Use new CODE          */

   8448  2 001200   000255 474400 1                  LDP4    B$PS10
         2 001201   040100 100500                    MLR     fill='040'O
         2 001202   400000 000004                    ADSC9   0,,PR4                   cn=0,n=4
         2 001203   200120 000004                    ADSC9   CODE,,AUTO               cn=0,n=4
         2 001204   001215 710000 2                  TRA     s:8451
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:121  

      789     8449    2                ELSE
      790     8450    2                   CALL EMR$FEP2HOST(ALTCODE$# -> CODE$CHAR, CODE_CHAR);

   8450  2 001205   200120 634500                    EPPR4   CODE,,AUTO
         2 001206   200163 454500                    STP4    @MIN_HOLE+2,,AUTO
         2 001207   000255 236000 1                  LDQ     B$PS10
         2 001210   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 001211   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 001212   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 001213   000000 701000 xent               TSX1    EMR$FEP2HOST
         2 001214   000000 011000                    NOP     0

      791     8451    2                ALTCODE_EXISTS = FALSE;    /* Don't come through again           */

   8451  2 001215   200113 450100                    STZ     ALTCODE_EXISTS,,AUTO

      792     8452    2                GOTO DFLT_FILENAME;        /* Build new NAME from CODE           */

   8452  2 001216   000717 710000 2                  TRA     DFLT_FILENAME

      793     8453    2                END;
      794     8454        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:122  
      795     8455        /**/
      796     8456        /*  Just can't get an error message file ANYWHERE.  This is where we give up  */
      797     8457        /*  in disgust!                                                               */
      798     8458        /**/
      799     8459    1           EMR_RESULTS.NOFILE = TRUE;

   8459  2 001217   200000 236003                    LDQ     65536,DU
         2 001220   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      800     8460    1   CODE_ONLY:                              /* Output code only                   */
      801     8461    1           EMR_RESULTS.MSGCOMP = TRUE;     /* CODEONLY fits in buffer            */

   8461  2 001221   020000 236003       CODE_ONLY    LDQ     8192,DU
         2 001222   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      802     8462    1           EMR_RESULTS.NOMSG = TRUE;       /* Let him know it's a fake           */

   8462  2 001223   100000 236003                    LDQ     32768,DU
         2 001224   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      803     8463    1           EMR_RESULTS.ALTMSG = TRUE;      /* It's not exactly his desire        */

   8463  2 001225   040000 236003                    LDQ     16384,DU
         2 001226   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      804     8464    1           REC_COUNT = 1;

   8464  2 001227   000001 235007                    LDA     1,DL
         2 001230   200100 755100                    STA     REC_COUNT,,AUTO

      805     8465    1           BUF$ -> MSG$SLOT = ' ';

   8465  2 001231   200123 470500                    LDP0    BUF$,,AUTO
         2 001232   040100 100400                    MLR     fill='040'O
         2 001233   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 001234   000000 000170                    ADSC9   0,,PR0                   cn=0,n=120

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:123  
      806     8466    1           CALL ERRMSG_CODE2TEXT;

   8466  2 001235   003536 701000 2                  TSX1    ERRMSG_CODE2TEXT
         2 001236   000000 011000                    NOP     0

      807     8467    1           BUF_VECTOR.PTR$ -> CHAR$1 = ' '; /* BLANK OUT FLAGS                   */

   8467  2 001237   200131 470500                    LDP0    BUF_VECTOR+1,,AUTO
         2 001240   040100 100400                    MLR     fill='040'O
         2 001241   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 001242   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

      808     8468    1           CALL INSERT (BUF$ -> MSG$SLOT,FLAG#+1,TEXT_CODE_SIZE,TEXT_BUF.TEXT);

   8468  2 001243   200123 471500                    LDP1    BUF$,,AUTO
         2 001244   200104 235100                    LDA     FLAG#,,AUTO
         2 001245   040105 100500                    MLR     fill='040'O
         2 001246   200132 200014                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=12
         2 001247   100000 200014                    ADSC9   0,A,PR1                  cn=1,n=12

      809     8469    1           MSG_SIZE = TEXT_CODE_SIZE +FLAG# + 1;

   8469  2 001250   000015 035007                    ADLA    13,DL
         2 001251   200106 755100                    STA     MSG_SIZE,,AUTO

      810     8470    1           CALL ERRMSG_WRITE;

   8470  2 001252   003705 701000 2                  TSX1    ERRMSG_WRITE
         2 001253   000000 011000                    NOP     0

      811     8471    1           GOTO ERRMSG_EXIT;

   8471  2 001254   002302 710000 2                  TRA     ERRMSG_EXIT

   8469  2 001255                       ERRMSG_OPEN* null
      812     8472        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:124  
      813     8473                                                /* A file is open                     */
      814     8474    1   ERRMSG_OPENED: ;
      815     8475    1           IF M$STAR$ -> F$DCB.ORG ~= %KEYED#

   8475  2 001255   000032 236100                    LDQ     26,,PR0
         2 001256   777000 376003                    ANQ     -512,DU
         2 001257   002000 116003                    CMPQ    1024,DU
         2 001260   001264 600000 2                  TZE     s:8482

      816     8476    1            THEN                           /* Unsuitable for use as message file */
      817     8477    2              DO;

      818     8478    2   BAD_MSG_FILE:  EMR_RESULTS.NOFILE = TRUE;

   8478  2 001261   200000 236003       BAD_MSG_FILE LDQ     65536,DU
         2 001262   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      819     8479    2                  GOTO ERRMSG_BAILOUT;

   8479  2 001263   002317 710000 2                  TRA     RESULTS_MOVED

      820     8480    2                  END;
      821     8481        /**/
      822     8482    1           READKEY.COUNT = 5;              /* FIVE BYTE KEYS                     */

   8482  2 001264   200127 471500                    LDP1    AD_RDKEY$,,AUTO
         2 001265   005000 236003                    LDQ     2560,DU
         2 001266   100000 552140                    STBQ    0,'40'O,PR1

      823     8483    1           READKEY.CODE = CODE;            /* USE CODE FOR KEY                   */

   8483  2 001267   000100 100500                    MLR     fill='000'O
         2 001270   200120 000004                    ADSC9   CODE,,AUTO               cn=0,n=4
         2 001271   100000 200004                    ADSC9   0,,PR1                   cn=1,n=4

      824     8484    1           READKEY.SEQ = 0;                /* FIRST REC IN MESSAGE               */

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:125  
   8484  2 001272   000000 236003                    LDQ     0,DU
         2 001273   100001 552120                    STBQ    1,'20'O,PR1

      825     8485        /**/
      826     8486    1           EMR_RFPT.BUF_ = BUF_VECTOR;

   8486  2 001274   200130 237100                    LDAQ    BUF_VECTOR,,AUTO
         2 001275   200010 757100                    STAQ    EMR_RFPT+4,,AUTO

      827     8487    1           EMR_RFPT.V.KEYS# = TRUE;        /* KEYED READ                         */

   8487  2 001276   200000 236007                    LDQ     65536,DL
         2 001277   200014 256100                    ORSQ    EMR_RFPT+8,,AUTO

      828     8488    1           CALL M$MREAD (EMR_RFPT) ALTRET (ERRMSG_KRERR);

   8488  2 001300   200004 633500                    EPPR3   EMR_RFPT,,AUTO
         2 001301   200162 453500                    STP3    @MIN_HOLE+1,,AUTO
         2 001302   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 001303   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001304   000000 701000 xent               TSX1    M$MREAD
         2 001305   001665 702000 2                  TSX2    ERRMSG_KRERR

      829     8489        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:126  
      830     8490    1   ERRMSG_1:                               /* We are positioned in the file      */
      831     8491                                                /* after reading a record             */
      832     8492        /**/
      833     8493    1           IF V$# -> FPT$ERRMSG.POINTER > 0 THEN

   8493  2 001306   000000 470400 xsym  ERRMSG_1     LDP0    B$PS0$
         2 001307   000002 236100                    LDQ     2,,PR0
         2 001310   000777 316003                    CANQ    511,DU
         2 001311   001403 600000 2                  TZE     s:8516

      834     8494    2              DO;                          /* Request to print pointer           */

      835     8495    2                IF V$# -> FPT$ERRMSG.POINTER > %SLOT_SIZE THEN

   8495  2 001312   000002 236100                    LDQ     2,,PR0
         2 001313   000777 376003                    ANQ     511,DU
         2 001314   000171 116003                    CMPQ    121,DU
         2 001315   001321 602000 2                  TNC     s:8500

      836     8496    3                   DO;                     /* It won't fit in first slot.        */

      837     8497    3                     EMR_RESULTS.BADPOINT = TRUE;

   8497  2 001316   000100 236003                    LDQ     64,DU
         2 001317   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      838     8498    3                     GOTO ERRMSG_ALTRTN;

   8498  2 001320   002300 710000 2                  TRA     ERRMSG_ALTRTN

      839     8499    3                     END;
      840     8500    2                BUF$ -> MSG$SLOT = ' ';    /* Clear the buffer slot              */

   8500  2 001321   200123 471500                    LDP1    BUF$,,AUTO
         2 001322   040100 100400                    MLR     fill='040'O
         2 001323   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 001324   100000 000170                    ADSC9   0,,PR1                   cn=0,n=120
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:127  

      841     8501    2                BUF$ -> MSG$SLOTARRAY(V$# -> FPT$ERRMSG.POINTER -1) = '^';

   8501  2 001325   000000 470400 xsym               LDP0    B$PS0$
         2 001326   000002 236100                    LDQ     2,,PR0
         2 001327   000022 772000                    QRL     18
         2 001330   000777 376007                    ANQ     511,DL
         2 001331   040106 100400                    MLR     fill='040'O
         2 001332   000030 000001 3                  ADSC9   24                       cn=0,n=1
         2 001333   177777 600001                    ADSC9   -1,Q,PR1                 cn=3,n=1

      842     8502    2                MSG_SIZE = V$# -> FPT$ERRMSG.POINTER;

   8502  2 001334   000000 470400 xsym               LDP0    B$PS0$
         2 001335   000002 236100                    LDQ     2,,PR0
         2 001336   000022 772000                    QRL     18
         2 001337   000777 376007                    ANQ     511,DL
         2 001340   200106 756100                    STQ     MSG_SIZE,,AUTO

      843     8503    2                CALL ERRMSG_WRITE;

   8503  2 001341   003705 701000 2                  TSX1    ERRMSG_WRITE
         2 001342   000000 011000                    NOP     0

      844     8504        /**/                                    /* Pointer printed.  Must restore msg */
      845     8505    2                EMR_PRECFPT.V.KEYS# = FALSE;

   8505  2 001343   000031 236000 3                  LDQ     25
         2 001344   200044 356100                    ANSQ    EMR_PRECFPT+6,,AUTO

      846     8506    2                EMR_PRECFPT.V.N# = -1;

   8506  2 001345   000001 335007                    LCA     1,DL
         2 001346   200045 755100                    STA     EMR_PRECFPT+7,,AUTO

      847     8507    2                CALL M$MPRECORD (EMR_PRECFPT) ALTRET(ERRMSG_ALTRTN);

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:128  
   8507  2 001347   200036 630500                    EPPR0   EMR_PRECFPT,,AUTO
         2 001350   200162 450500                    STP0    @MIN_HOLE+1,,AUTO
         2 001351   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 001352   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001353   000000 701000 xent               TSX1    M$MPRECORD
         2 001354   002300 702000 2                  TSX2    ERRMSG_ALTRTN

      848     8508    2                CALL HFF$TRAPALT ALTRET(ERRMSG_BAILOUT); /* Re-establish         */

   8508  2 001355   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001356   000000 701000 xent               TSX1    HFF$TRAPALT
         2 001357   002317 702000 2                  TSX2    RESULTS_MOVED

      849     8509    2                EMR_RFPT.V.KEYS# = FALSE;

   8509  2 001360   000032 236000 3                  LDQ     26
         2 001361   200014 356100                    ANSQ    EMR_RFPT+8,,AUTO

      850     8510    2                BUF$ -> MSG$SLOT = ' ';

   8510  2 001362   200123 470500                    LDP0    BUF$,,AUTO
         2 001363   040100 100400                    MLR     fill='040'O
         2 001364   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 001365   000000 000170                    ADSC9   0,,PR0                   cn=0,n=120

      851     8511    2                BUF$ -> MSG$SLOT = SUBSTR(FLAGBUF,0,FLAG#); /* Clear the buffer  */

   8511  2 001366   200104 720100                    LXL0    FLAG#,,AUTO
         2 001367   040100 100440                    MLR     fill='040'O
         2 001370   000253 000010 1                  ADSC9   FLAGBUF                  cn=0,n=*X0
         2 001371   000000 000170                    ADSC9   0,,PR0                   cn=0,n=120

      852     8512    2                CALL M$MREAD (EMR_RFPT) ALTRET(ERRMSG_ALTRTN);

   8512  2 001372   200004 631500                    EPPR1   EMR_RFPT,,AUTO
         2 001373   200162 451500                    STP1    @MIN_HOLE+1,,AUTO
         2 001374   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:129  
         2 001375   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001376   000000 701000 xent               TSX1    M$MREAD
         2 001377   002300 702000 2                  TSX2    ERRMSG_ALTRTN

      853     8513    2                CALL HFF$TRAPALT ALTRET(ERRMSG_BAILOUT); /* Re-establish         */

   8513  2 001400   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001401   000000 701000 xent               TSX1    HFF$TRAPALT
         2 001402   002317 702000 2                  TSX2    RESULTS_MOVED

      854     8514    2                END;

      855     8515        /**/
      856     8516    1           EMR_RESULTS.MSGCOMP = TRUE;     /* Assume message will fit in buffer  */

   8516  2 001403   020000 236003                    LDQ     8192,DU
         2 001404   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      857     8517    1           EMR_RFPT.V.KEYS# = FALSE;       /* SEQUEN READS                       */

   8517  2 001405   000032 236000 3                  LDQ     26
         2 001406   200014 356100                    ANSQ    EMR_RFPT+8,,AUTO

      858     8518    1           MSG_SIZE = M$STAR$ -> F$DCB.ARS + FLAG#; /* GET MESSAGE SIZE          */

   8518  2 001407   000000 470400 xsym               LDP0    B$M$STAR$
         2 001410   000000 236100                    LDQ     0,,PR0
         2 001411   200104 036100                    ADLQ    FLAG#,,AUTO
         2 001412   200106 756100                    STQ     MSG_SIZE,,AUTO

      859     8519    1           MSG_FLGS_CHAR = BUF_VECTOR.PTR$ -> CHAR$1;

   8519  2 001413   200131 471500                    LDP1    BUF_VECTOR+1,,AUTO
         2 001414   040100 100500                    MLR     fill='040'O
         2 001415   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 001416   200115 000001                    ADSC9   MSG_FLGS,,AUTO           cn=0,n=1

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:130  
      860     8520                                                /* GET CONTROL FLAGS FROM RECORD      */
      861     8521    1           BUF_VECTOR.PTR$ -> CHAR$1 = ' ';

   8521  2 001417   040100 100400                    MLR     fill='040'O
         2 001420   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 001421   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

      862     8522                                                /* AND BLANK THEM OUT IN BUFFER       */
      863     8523        /**/
      864     8524    1           EMR_RESULTS.CODEUSED = READKEY.CODE;

   8524  2 001422   200127 473500                    LDP3    AD_RDKEY$,,AUTO
         2 001423   300000 235100                    LDA     0,,PR3
         2 001424   300001 236100                    LDQ     1,,PR3
         2 001425   000033 773000                    LRL     27
         2 001426   000027 376000 xsym               ANQ     B_VECTNIL+23
         2 001427   200151 756100                    STQ     EMR_RESULTS+3,,AUTO

      865     8525        /**/
      866     8526    1   ERRMSG_2:                               /* We read (or were passed) a record  */
      867     8527    1           REC_COUNT = 1;

   8527  2 001430   000001 235007       ERRMSG_2     LDA     1,DL
         2 001431   200100 755100                    STA     REC_COUNT,,AUTO

      868     8528                                                /* Do some formatting on the text     */
      869     8529    1           IF MSG_FLGS.SUB = TRUE          /* IF possible substitutions          */

   8529  2 001432   200115 234100                    SZN     MSG_FLGS,,AUTO
         2 001433   001436 605000 2                  TPL     s:8532

      870     8530    1            THEN
      871     8531    1               CALL ERRMSG_SUB ALTRET(ERRMSG_ALTRTN);

   8531  2 001434   002442 701000 2                  TSX1    ERRMSG_SUB
         2 001435   002300 702000 2                  TSX2    ERRMSG_ALTRTN

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:131  
      872     8532    1           IF V$# -> FPT$ERRMSG.INCLCODE   /* IF error code to be included       */

   8532  2 001436   000000 470400 xsym               LDP0    B$PS0$
         2 001437   000002 236100                    LDQ     2,,PR0
         2 001440   004000 316003                    CANQ    2048,DU
         2 001441   001446 600000 2                  TZE     s:8537
         2 001442   400000 316007                    CANQ    -131072,DL
         2 001443   001446 601000 2                  TNZ     s:8537

      873     8533    1            AND V$# -> FPT$ERRMSG.NREAD = FALSE /* AND error code is meaningful  */
      874     8534    1            THEN
      875     8535    1              CALL INCLCODE;

   8535  2 001444   002360 701000 2                  TSX1    INCLCODE
         2 001445   000000 011000                    NOP     0

      876     8536        /**/
      877     8537    1           CALL ERRMSG_WRITE;              /* Write the first (substituted)      */

   8537  2 001446   003705 701000 2                  TSX1    ERRMSG_WRITE
         2 001447   000000 011000                    NOP     0

      878     8538                                                /* record of ERRMSG text              */
      879     8539        /**/
      880     8540    2           DO WHILE (MSG_FLGS.CONT = TRUE); /* LOOP UNTIL DONE WITH MESSAGE      */

   8540  2 001450   200115 236100                    LDQ     MSG_FLGS,,AUTO
         2 001451   200000 316003                    CANQ    65536,DU
         2 001452   001542 600000 2                  TZE     s:8570

      881     8541    2              CALL BUMP_BUFFER ALTRET(ERRMSG_EXIT);

   8541  2 001453   004006 701000 2                  TSX1    BUMP_BUFFER
         2 001454   002302 702000 2                  TSX2    ERRMSG_EXIT

      882     8542        /**/
      883     8543    2              EMR_RFPT.BUF_ = BUF_VECTOR;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:132  

   8543  2 001455   200130 237100                    LDAQ    BUF_VECTOR,,AUTO
         2 001456   200010 757100                    STAQ    EMR_RFPT+4,,AUTO

      884     8544    2              CALL M$MREAD (EMR_RFPT) ALTRET (READ_NXT_ALT); /* Read next record */

   8544  2 001457   200004 630500                    EPPR0   EMR_RFPT,,AUTO
         2 001460   200162 450500                    STP0    @MIN_HOLE+1,,AUTO
         2 001461   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 001462   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001463   000000 701000 xent               TSX1    M$MREAD
         2 001464   001466 702000 2                  TSX2    READ_NXT_ALT

      885     8545    3              DO WHILE (FALSE);            /* NEVER DO                           */

   8545  2 001465   001471 710000 2                  TRA     s:8550

      886     8546    3   READ_NXT_ALT: EMR_RESULTS.INERR = TRUE;

   8546  2 001466   000400 236003       READ_NXT_ALT LDQ     256,DU
         2 001467   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      887     8547    3                 IF TRUE THEN GOTO ERRMSG_EXIT; /* Quit via compiler kluge       */

   8547  2 001470   002302 710000 2                  TRA     ERRMSG_EXIT

      888     8548    3                 END;

      889     8549                                                /* READ NEXT RECORD TO BUFFER         */
      890     8550    2              MSG_SIZE = M$STAR$ -> F$DCB.ARS + FLAG#; /* SET MESSAGE SIZE       */

   8550  2 001471   000000 470400 xsym               LDP0    B$M$STAR$
         2 001472   000000 236100                    LDQ     0,,PR0
         2 001473   200104 036100                    ADLQ    FLAG#,,AUTO
         2 001474   200106 756100                    STQ     MSG_SIZE,,AUTO

      891     8551    2              REC_COUNT = REC_COUNT + 1;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:133  

   8551  2 001475   200100 235100                    LDA     REC_COUNT,,AUTO
         2 001476   000001 035007                    ADLA    1,DL
         2 001477   200100 755100                    STA     REC_COUNT,,AUTO

      892     8552    2              MSG_FLGS_CHAR = BUF_VECTOR.PTR$ -> CHAR$1;

   8552  2 001500   200131 471500                    LDP1    BUF_VECTOR+1,,AUTO
         2 001501   040100 100500                    MLR     fill='040'O
         2 001502   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 001503   200115 000001                    ADSC9   MSG_FLGS,,AUTO           cn=0,n=1

      893     8553    2              BUF_VECTOR.PTR$ -> CHAR$1 = ' ';

   8553  2 001504   040100 100400                    MLR     fill='040'O
         2 001505   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 001506   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

      894     8554                                                /* PICK UP AND BLANK OUT FLAGS        */
      895     8555    2              IF MSG_FLGS.SUB = TRUE THEN

   8555  2 001507   200115 234100                    SZN     MSG_FLGS,,AUTO
         2 001510   001513 605000 2                  TPL     s:8558

      896     8556    2                 CALL ERRMSG_SUB ALTRET(ERRMSG_ALTRTN);

   8556  2 001511   002442 701000 2                  TSX1    ERRMSG_SUB
         2 001512   002300 702000 2                  TSX2    ERRMSG_ALTRTN

      897     8557                                                /* DO THE SUBSTITUTION                */
      898     8558    2              IF (V$# -> FPT$ERRMSG.INCLCODE)

   8558  2 001513   000000 470400 xsym               LDP0    B$PS0$
         2 001514   000002 236100                    LDQ     2,,PR0
         2 001515   004000 316003                    CANQ    2048,DU
         2 001516   001535 600000 2                  TZE     s:8565

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:134  
      899     8559    2               THEN                        /* ALIGN                              */
      900     8560    3                DO;

      901     8561    3                 COUNT = TEXT_CODE_SIZE +1;

   8561  2 001517   000015 235007                    LDA     13,DL
         2 001520   200105 755100                    STA     COUNT,,AUTO

      902     8562    3                 CALL PUSH_RIGHT(0,0,1);

   8562  2 001521   000014 237000 3                  LDAQ    12
         2 001522   200160 757100                    STAQ    @START+1,,AUTO
         2 001523   000014 236000 3                  LDQ     12
         2 001524   200157 756100                    STQ     @VICTIM+1,,AUTO
         2 001525   004052 701000 2                  TSX1    PUSH_RIGHT
         2 001526   000000 011000                    NOP     0

      903     8563    3                 CALL INSERT(BUF$ -> MSG$SLOT,FLAG#+1,COUNT,' ');

   8563  2 001527   200123 470500                    LDP0    BUF$,,AUTO
         2 001530   200105 720100                    LXL0    COUNT,,AUTO
         2 001531   200104 235100                    LDA     FLAG#,,AUTO
         2 001532   040145 100400                    MLR     fill='040'O
         2 001533   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 001534   000000 200010                    ADSC9   0,A,PR0                  cn=1,n=*X0

      904     8564    3                 END;

      905     8565    2              CALL ERRMSG_WRITE;

   8565  2 001535   003705 701000 2                  TSX1    ERRMSG_WRITE
         2 001536   000000 011000                    NOP     0

      906     8566    2              END;

   8566  2 001537   200115 236100                    LDQ     MSG_FLGS,,AUTO
         2 001540   200000 316003                    CANQ    65536,DU
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:135  
         2 001541   001453 601000 2                  TNZ     s:8541

      907     8567        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:136  
      908     8568                                                /* The message is finished            */
      909     8569        /**/
      910     8570    1           IF V$# -> FPT$ERRMSG.TYC       /* TYC display requested              */

   8570  2 001542   000000 470400 xsym               LDP0    B$PS0$
         2 001543   000002 236100                    LDQ     2,,PR0
         2 001544   002000 316003                    CANQ    1024,DU
         2 001545   001664 600000 2                  TZE     s:8594
         2 001546   200121 236100                    LDQ     DCB$,,AUTO
         2 001547   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 001550   001664 600000 2                  TZE     s:8594

      911     8571    1             AND DCB$ ~= ADDR(NIL)         /* A DCB does exist                   */
      912     8572    1           THEN                            /* Display the TYC information        */
      913     8573    2           DO J = 0 TO 1;                  /* There are two types of TYC words   */

   8573  2 001551   200102 450100                    STZ     J,,AUTO

      914     8574    2              CALL BUMP_BUFFER ALTRET(ERRMSG_EXIT);

   8574  2 001552   004006 701000 2                  TSX1    BUMP_BUFFER
         2 001553   002302 702000 2                  TSX2    ERRMSG_EXIT

      915     8575    2              CALL INSERT (BUF$ -> MSG$SLOT,MSG_SIZE,,'TYC=');

   8575  2 001554   200106 720100                    LXL0    MSG_SIZE,,AUTO
         2 001555   777607 620010                    EAX0    -121,X0
         2 001556   777777 660003                    ERX0    -1,DU
         2 001557   200123 470500                    LDP0    BUF$,,AUTO
         2 001560   200106 235100                    LDA     MSG_SIZE,,AUTO
         2 001561   040145 100400                    MLR     fill='040'O
         2 001562   000265 000004 1                  ADSC9   SYSV+7                   cn=0,n=4
         2 001563   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0

      916     8576    2              MSG_SIZE = MSG_SIZE +4;

   8576  2 001564   000004 035007                    ADLA    4,DL
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:137  
         2 001565   200106 755100                    STA     MSG_SIZE,,AUTO

      917     8577    3              DO I = 1 TO NUM_TYCS;

   8577  2 001566   000001 236007                    LDQ     1,DL
         2 001567   200101 756100                    STQ     I,,AUTO

      918     8578    3                 IF DCB$ -> F$DCB.TYC (J) & TYC_MASK(I)

   8578  2 001570   200101 720100                    LXL0    I,,AUTO
         2 001571   200121 470500                    LDP0    DCB$,,AUTO
         2 001572   200102 721100                    LXL1    J,,AUTO
         2 001573   000001 236111                    LDQ     1,X1,PR0
         2 001574   000167 376010 1                  ANQ     TYC_MASK,X0
         2 001575   001635 600000 2                  TZE     s:8585

      919     8579    3                 THEN                      /* This TYC bit is active             */
      920     8580    4                 DO;

      921     8581    4                    CALL INSERT (BUF$ -> MSG$SLOT,MSG_SIZE,,

   8581  2 001576   000221 722010 1                  LXL2    TYC_N_LEN,X0
         2 001577   200101 235100                    LDA     I,,AUTO
         2 001600   000003 735000                    ALS     3
         2 001601   200106 723100                    LXL3    MSG_SIZE,,AUTO
         2 001602   777607 623013                    EAX3    -121,X3
         2 001603   777777 663003                    ERX3    -1,DU
         2 001604   200123 471500                    LDP1    BUF$,,AUTO
         2 001605   200106 236100                    LDQ     MSG_SIZE,,AUTO
         2 001606   040146 100445                    MLR     fill='040'O
         2 001607   000103 000012 1                  ADSC9   TYC_NAME,A               cn=0,n=*X2
         2 001610   100000 000013                    ADSC9   0,Q,PR1                  cn=0,n=*X3
         2 001611   000000 636012                    EAQ     0,X2
         2 001612   000022 772000                    QRL     18
         2 001613   200106 036100                    ADLQ    MSG_SIZE,,AUTO
         2 001614   000170 116007                    CMPQ    120,DL
         2 001615   001630 603000 2                  TRC     s:8583
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:138  
         2 001616   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 001617   000000 636012                    EAQ     0,X2
         2 001620   000022 772000                    QRL     18
         2 001621   200106 036100                    ADLQ    MSG_SIZE,,AUTO
         2 001622   200162 720100                    LXL0    @MIN_HOLE+1,,AUTO
         2 001623   777607 620010                    EAX0    -121,X0
         2 001624   777777 660003                    ERX0    -1,DU
         2 001625   040146 100400                    MLR     fill='040'O
         2 001626   000033 000001 3                  ADSC9   27                       cn=0,n=1
         2 001627   100000 000010                    ADSC9   0,Q,PR1                  cn=0,n=*X0

      922     8582    4                      SUBSTR(TYC_NAME(I),0,TYC_N_LEN(I)),',');
      923     8583    4                    MSG_SIZE = MSG_SIZE + TYC_N_LEN(I) +1;

   8583  2 001630   200101 720100                    LXL0    I,,AUTO
         2 001631   200106 236100                    LDQ     MSG_SIZE,,AUTO
         2 001632   000221 036010 1                  ADLQ    TYC_N_LEN,X0
         2 001633   000001 036007                    ADLQ    1,DL
         2 001634   200106 756100                    STQ     MSG_SIZE,,AUTO

      924     8584    4                    END;

      925     8585    3                 END;

   8585  2 001635   200101 054100                    AOS     I,,AUTO
         2 001636   200101 235100                    LDA     I,,AUTO
         2 001637   000031 115007                    CMPA    25,DL
         2 001640   001570 604400 2                  TMOZ    s:8578

      926     8586    2              IF SUBSTR(BUF$->MSG$SLOT,MSG_SIZE-1,1) = ',' THEN

   8586  2 001641   200123 471500                    LDP1    BUF$,,AUTO
         2 001642   200106 236100                    LDQ     MSG_SIZE,,AUTO
         2 001643   040000 106506                    CMPC    fill='040'O
         2 001644   177777 600001                    ADSC9   -1,Q,PR1                 cn=3,n=1
         2 001645   000033 000001 3                  ADSC9   27                       cn=0,n=1
         2 001646   001660 601000 2                  TNZ     s:8592
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:139  

      927     8587    3               DO;

      928     8588    3                 MSG_SIZE = MSG_SIZE -1;   /* Stomp on dangling comma            */

   8588  2 001647   000001 136007                    SBLQ    1,DL
         2 001650   200106 756100                    STQ     MSG_SIZE,,AUTO

      929     8589    3                 CALL INSERT (BUF$ -> MSG$SLOT,MSG_SIZE,,' ');

   8589  2 001651   777607 620006                    EAX0    -121,QL
         2 001652   777777 660003                    ERX0    -1,DU
         2 001653   040146 100400                    MLR     fill='040'O
         2 001654   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 001655   100000 000010                    ADSC9   0,Q,PR1                  cn=0,n=*X0

      930     8590    3                 CALL ERRMSG_WRITE;

   8590  2 001656   003705 701000 2                  TSX1    ERRMSG_WRITE
         2 001657   000000 011000                    NOP     0

      931     8591    3                 END;

      932     8592    2              END;

   8592  2 001660   200102 054100                    AOS     J,,AUTO
         2 001661   200102 235100                    LDA     J,,AUTO
         2 001662   000001 115007                    CMPA    1,DL
         2 001663   001552 604400 2                  TMOZ    s:8574

      933     8593        /**/
      934     8594    1           GOTO ERRMSG_EXIT;

   8594  2 001664   002302 710000 2                  TRA     ERRMSG_EXIT

      935     8595        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:140  
      936     8596    1   ERRMSG_KRERR:                           /* The EXACT message is not available */
      937     8597                                                /* Perhaps SUBSTITUTIONs would help?  */
      938     8598        /**/
      939     8599    1           IF NOT V$# -> FPT$ERRMSG.SUBMESS

   8599  2 001665   000000 470400 xsym  ERRMSG_KRERR LDP0    B$PS0$
         2 001666   000002 430100                    FSZN    2,,PR0
         2 001667   002227 605000 2                  TPL     SETNOMSG

      940     8600    1            THEN                           /* Doesn't want substitute message    */
      941     8601    1              GOTO SETNOMSG;
      942     8602        /**/
      943     8603        /*  Look for lower SEV message                                                */
      944     8604        /**/
      945     8605    1           EMR_PRECFPT.V.KEYS# = FALSE;    /* POSITION BY NUMBER NOT KEY         */

   8605  2 001670   000031 236000 3                  LDQ     25
         2 001671   200044 356100                    ANSQ    EMR_PRECFPT+6,,AUTO

      946     8606    1           EMR_PRECFPT.V.N# = -1;          /* MOVE BACK ONE                      */

   8606  2 001672   000001 335007                    LCA     1,DL
         2 001673   200045 755100                    STA     EMR_PRECFPT+7,,AUTO

      947     8607        /**/
      948     8608    1           CALL M$MPRECORD (EMR_PRECFPT) ALTRET (MID_DFLT);

   8608  2 001674   200036 631500                    EPPR1   EMR_PRECFPT,,AUTO
         2 001675   200162 451500                    STP1    @MIN_HOLE+1,,AUTO
         2 001676   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 001677   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001700   000000 701000 xent               TSX1    M$MPRECORD
         2 001701   001777 702000 2                  TSX2    MID_DFLT

      949     8609        /**/
      950     8610    1           IF PRECKEY.CODE.ERROR = CODE.ERROR

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:141  
   8610  2 001702   200120 236100                    LDQ     CODE,,AUTO
         2 001703   000003 772000                    QRL     3
         2 001704   037777 376007                    ANQ     16383,DL
         2 001705   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 001706   200126 470500                    LDP0    AD_PRKEY$,,AUTO
         2 001707   000000 235100                    LDA     0,,PR0
         2 001710   000001 236100                    LDQ     1,,PR0
         2 001711   000036 773000                    LRL     30
         2 001712   037777 376007                    ANQ     16383,DL
         2 001713   200162 116100                    CMPQ    @MIN_HOLE+1,,AUTO
         2 001714   001777 601000 2                  TNZ     MID_DFLT
         2 001715   000100 066500                    CMPB    filb='0'B
         2 001716   000000 600001                    BDSC    0,,PR0                   by=3,bit=0,n=1
         2 001717   200120 400001                    BDSC    CODE,,AUTO               by=2,bit=0,n=1
         2 001720   001777 601000 2                  TNZ     MID_DFLT
         2 001721   200120 236100                    LDQ     CODE,,AUTO
         2 001722   000022 772000                    QRL     18
         2 001723   000077 376007                    ANQ     63,DL
         2 001724   200163 756100                    STQ     @MIN_HOLE+2,,AUTO
         2 001725   000000 236100                    LDQ     0,,PR0
         2 001726   000011 772000                    QRL     9
         2 001727   000077 376007                    ANQ     63,DL
         2 001730   200163 116100                    CMPQ    @MIN_HOLE+2,,AUTO
         2 001731   001777 601000 2                  TNZ     MID_DFLT
         2 001732   200120 236100                    LDQ     CODE,,AUTO
         2 001733   000030 772000                    QRL     24
         2 001734   200164 756100                    STQ     @MIN_HOLE+3,,AUTO
         2 001735   000000 236100                    LDQ     0,,PR0
         2 001736   000017 772000                    QRL     15
         2 001737   007777 376007                    ANQ     4095,DL
         2 001740   200164 116100                    CMPQ    @MIN_HOLE+3,,AUTO
         2 001741   001777 601000 2                  TNZ     MID_DFLT

      951     8611    1            AND PRECKEY.CODE.MON = CODE.MON
      952     8612    1            AND PRECKEY.CODE.MID = CODE_.MID
      953     8613    1            AND PRECKEY.CODE.FCG = CODE_.FCG
      954     8614    1            THEN                           /* Lower SEV worked                   */
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:142  
      955     8615    2              DO;

      956     8616    2   SUB_FOUND:                              /* We found a substitute!             */
      957     8617    2              IF PRECKEY.SEQ > 0

   8617  2 001742   200126 470500       SUB_FOUND    LDP0    AD_PRKEY$,,AUTO
         2 001743   000001 236100                    LDQ     1,,PR0
         2 001744   000777 316003                    CANQ    511,DU
         2 001745   001764 600000 2                  TZE     s:8626

      958     8618    2               THEN                        /* We need to back up a little        */
      959     8619    3                DO;

      960     8620    3                 EMR_PRECFPT.V.N# = -(PRECKEY.SEQ);

   8620  2 001746   000001 236100                    LDQ     1,,PR0
         2 001747   000022 772000                    QRL     18
         2 001750   000777 376007                    ANQ     511,DL
         2 001751   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 001752   000001 036007                    ADLQ    1,DL
         2 001753   200045 756100                    STQ     EMR_PRECFPT+7,,AUTO

      961     8621    3                 EMR_PRECFPT.V.KEYS# = FALSE;

   8621  2 001754   000031 236000 3                  LDQ     25
         2 001755   200044 356100                    ANSQ    EMR_PRECFPT+6,,AUTO

      962     8622                                                /* Back up SEQ records                */
      963     8623    3                 CALL M$MPRECORD (EMR_PRECFPT) ALTRET (SETNOMSG);

   8623  2 001756   200036 631500                    EPPR1   EMR_PRECFPT,,AUTO
         2 001757   200162 451500                    STP1    @MIN_HOLE+1,,AUTO
         2 001760   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 001761   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001762   000000 701000 xent               TSX1    M$MPRECORD
         2 001763   002227 702000 2                  TSX2    SETNOMSG

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:143  
      964     8624    3                 END;

      965     8625        /**/
      966     8626    2              EMR_RFPT.V.KEYS# = FALSE;    /* Sequential READ of associated data */

   8626  2 001764   000032 236000 3                  LDQ     26
         2 001765   200014 356100                    ANSQ    EMR_RFPT+8,,AUTO

      967     8627    2              CALL M$MREAD (EMR_RFPT) ALTRET (SETNOMSG);

   8627  2 001766   200004 630500                    EPPR0   EMR_RFPT,,AUTO
         2 001767   200162 450500                    STP0    @MIN_HOLE+1,,AUTO
         2 001770   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 001771   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001772   000000 701000 xent               TSX1    M$MREAD
         2 001773   002227 702000 2                  TSX2    SETNOMSG

      968     8628        /**/
      969     8629    2              EMR_RESULTS.ALTMSG = TRUE;   /* We used a substitute message       */

   8629  2 001774   040000 236003                    LDQ     16384,DU
         2 001775   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

      970     8630    2              GOTO ERRMSG_1;               /* Return to READing file             */

   8630  2 001776   001306 710000 2                  TRA     ERRMSG_1

      971     8631    2              END;
      972     8632        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:144  
      973     8633    1   MID_DFLT:                               /* Try it with null MID               */
      974     8634    1           EMR_PRECFPT.V.KEYS# = TRUE;     /* Position by KEY                    */

   8634  2 001777   400000 236007       MID_DFLT     LDQ     -131072,DL
         2 002000   200044 256100                    ORSQ    EMR_PRECFPT+6,,AUTO

      975     8635    1           EMR_PRECFPT.V.N# = 0;

   8635  2 002001   200045 450100                    STZ     EMR_PRECFPT+7,,AUTO

      976     8636    1           PRECKEY.COUNT = 5;

   8636  2 002002   200126 470500                    LDP0    AD_PRKEY$,,AUTO
         2 002003   005000 236003                    LDQ     2560,DU
         2 002004   000000 552140                    STBQ    0,'40'O,PR0

      977     8637    1           PRECKEY.CODE = CODE;

   8637  2 002005   000100 100500                    MLR     fill='000'O
         2 002006   200120 000004                    ADSC9   CODE,,AUTO               cn=0,n=4
         2 002007   000000 200004                    ADSC9   0,,PR0                   cn=1,n=4

      978     8638    1           PRECKEY.CODE.MID = 0;

   8638  2 002010   000034 236000 3                  LDQ     28
         2 002011   000000 356100                    ANSQ    0,,PR0

      979     8639    1           PRECKEY.SEQ=0;

   8639  2 002012   000000 236003                    LDQ     0,DU
         2 002013   000001 552120                    STBQ    1,'20'O,PR0

      980     8640        /**/
      981     8641    1           CALL M$MPRECORD (EMR_PRECFPT) ALTRET (MID_DFLT2);

   8641  2 002014   200036 631500                    EPPR1   EMR_PRECFPT,,AUTO
         2 002015   200162 451500                    STP1    @MIN_HOLE+1,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:145  
         2 002016   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 002017   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002020   000000 701000 xent               TSX1    M$MPRECORD
         2 002021   002054 702000 2                  TSX2    MID_DFLT2

      982     8642        /**/
      983     8643    1           IF PRECKEY.CODE.ERROR = CODE.ERROR

   8643  2 002022   200120 236100                    LDQ     CODE,,AUTO
         2 002023   000003 772000                    QRL     3
         2 002024   037777 376007                    ANQ     16383,DL
         2 002025   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 002026   200126 470500                    LDP0    AD_PRKEY$,,AUTO
         2 002027   000000 235100                    LDA     0,,PR0
         2 002030   000001 236100                    LDQ     1,,PR0
         2 002031   000036 773000                    LRL     30
         2 002032   037777 376007                    ANQ     16383,DL
         2 002033   200162 116100                    CMPQ    @MIN_HOLE+1,,AUTO
         2 002034   002054 601000 2                  TNZ     MID_DFLT2
         2 002035   000100 066500                    CMPB    filb='0'B
         2 002036   000000 600001                    BDSC    0,,PR0                   by=3,bit=0,n=1
         2 002037   200120 400001                    BDSC    CODE,,AUTO               by=2,bit=0,n=1
         2 002040   002054 601000 2                  TNZ     MID_DFLT2
         2 002041   000000 236100                    LDQ     0,,PR0
         2 002042   077000 316007                    CANQ    32256,DL
         2 002043   002054 601000 2                  TNZ     MID_DFLT2
         2 002044   200120 236100                    LDQ     CODE,,AUTO
         2 002045   000030 772000                    QRL     24
         2 002046   200163 756100                    STQ     @MIN_HOLE+2,,AUTO
         2 002047   000000 236100                    LDQ     0,,PR0
         2 002050   000017 772000                    QRL     15
         2 002051   007777 376007                    ANQ     4095,DL
         2 002052   200163 116100                    CMPQ    @MIN_HOLE+2,,AUTO
         2 002053   001742 600000 2                  TZE     SUB_FOUND

      984     8644    1            AND PRECKEY.CODE.MON = CODE.MON
      985     8645    1            AND PRECKEY.CODE.MID = 0
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:146  
      986     8646    1            AND PRECKEY.CODE.FCG = CODE_.FCG
      987     8647    1              THEN                         /* Null MID worked                    */
      988     8648    1               GOTO SUB_FOUND;
      989     8649        /**/
      990     8650    1   MID_DFLT2:                              /* Look for lower SEV, null MID       */
      991     8651    1           EMR_PRECFPT.V.KEYS# = FALSE;    /* POSITION BY NUMBER                 */

   8651  2 002054   000031 236000 3     MID_DFLT2    LDQ     25
         2 002055   200044 356100                    ANSQ    EMR_PRECFPT+6,,AUTO

      992     8652    1           EMR_PRECFPT.V.N# = -1;          /* BACK UP ONE                        */

   8652  2 002056   000001 335007                    LCA     1,DL
         2 002057   200045 755100                    STA     EMR_PRECFPT+7,,AUTO

      993     8653        /**/
      994     8654    1           CALL M$MPRECORD(EMR_PRECFPT) ALTRET(FCG_DFLT);

   8654  2 002060   200036 630500                    EPPR0   EMR_PRECFPT,,AUTO
         2 002061   200162 450500                    STP0    @MIN_HOLE+1,,AUTO
         2 002062   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 002063   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002064   000000 701000 xent               TSX1    M$MPRECORD
         2 002065   002120 702000 2                  TSX2    FCG_DFLT

      995     8655        /**/
      996     8656    1           IF PRECKEY.CODE.ERROR = CODE.ERROR

   8656  2 002066   200120 236100                    LDQ     CODE,,AUTO
         2 002067   000003 772000                    QRL     3
         2 002070   037777 376007                    ANQ     16383,DL
         2 002071   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 002072   200126 470500                    LDP0    AD_PRKEY$,,AUTO
         2 002073   000000 235100                    LDA     0,,PR0
         2 002074   000001 236100                    LDQ     1,,PR0
         2 002075   000036 773000                    LRL     30
         2 002076   037777 376007                    ANQ     16383,DL
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:147  
         2 002077   200162 116100                    CMPQ    @MIN_HOLE+1,,AUTO
         2 002100   002120 601000 2                  TNZ     FCG_DFLT
         2 002101   000100 066500                    CMPB    filb='0'B
         2 002102   000000 600001                    BDSC    0,,PR0                   by=3,bit=0,n=1
         2 002103   200120 400001                    BDSC    CODE,,AUTO               by=2,bit=0,n=1
         2 002104   002120 601000 2                  TNZ     FCG_DFLT
         2 002105   000000 236100                    LDQ     0,,PR0
         2 002106   077000 316007                    CANQ    32256,DL
         2 002107   002120 601000 2                  TNZ     FCG_DFLT
         2 002110   200120 236100                    LDQ     CODE,,AUTO
         2 002111   000030 772000                    QRL     24
         2 002112   200163 756100                    STQ     @MIN_HOLE+2,,AUTO
         2 002113   000000 236100                    LDQ     0,,PR0
         2 002114   000017 772000                    QRL     15
         2 002115   007777 376007                    ANQ     4095,DL
         2 002116   200163 116100                    CMPQ    @MIN_HOLE+2,,AUTO
         2 002117   001742 600000 2                  TZE     SUB_FOUND

      997     8657    1            AND PRECKEY.CODE.MON = CODE.MON
      998     8658    1            AND PRECKEY.CODE.MID = 0
      999     8659    1            AND PRECKEY.CODE.FCG = CODE_.FCG
     1000     8660    1             THEN                          /* Lower SEV, nul MID worked          */
     1001     8661    1               GOTO SUB_FOUND;
     1002     8662        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:148  
     1003     8663    1   FCG_DFLT:                               /* Try null FCG and MID               */
     1004     8664    1           EMR_PRECFPT.V.KEYS# = TRUE;     /* Position by KEY                    */

   8664  2 002120   400000 236007       FCG_DFLT     LDQ     -131072,DL
         2 002121   200044 256100                    ORSQ    EMR_PRECFPT+6,,AUTO

     1005     8665    1           EMR_PRECFPT.V.N# = 0;

   8665  2 002122   200045 450100                    STZ     EMR_PRECFPT+7,,AUTO

     1006     8666    1           PRECKEY.COUNT = 5;

   8666  2 002123   200126 470500                    LDP0    AD_PRKEY$,,AUTO
         2 002124   005000 236003                    LDQ     2560,DU
         2 002125   000000 552140                    STBQ    0,'40'O,PR0

     1007     8667    1           PRECKEY.CODE = CODE;

   8667  2 002126   000100 100500                    MLR     fill='000'O
         2 002127   200120 000004                    ADSC9   CODE,,AUTO               cn=0,n=4
         2 002130   000000 200004                    ADSC9   0,,PR0                   cn=1,n=4

     1008     8668    1           PRECKEY.CODE.FCG_ = FALSE;

   8668  2 002131   000035 236000 3                  LDQ     29
         2 002132   000000 356100                    ANSQ    0,,PR0

     1009     8669    1           PRECKEY.CODE.MID = 0;

   8669  2 002133   000034 236000 3                  LDQ     28
         2 002134   000000 356100                    ANSQ    0,,PR0

     1010     8670    1           PRECKEY.SEQ = 0;

   8670  2 002135   000000 236003                    LDQ     0,DU
         2 002136   000001 552120                    STBQ    1,'20'O,PR0

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:149  
     1011     8671        /**/
     1012     8672    1           CALL M$MPRECORD(EMR_PRECFPT) ALTRET(FCG_DFLT2);

   8672  2 002137   200036 631500                    EPPR1   EMR_PRECFPT,,AUTO
         2 002140   200162 451500                    STP1    @MIN_HOLE+1,,AUTO
         2 002141   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 002142   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002143   000000 701000 xent               TSX1    M$MPRECORD
         2 002144   002171 702000 2                  TSX2    FCG_DFLT2

     1013     8673        /**/
     1014     8674    1           IF PRECKEY.CODE.ERROR = CODE.ERROR

   8674  2 002145   200120 236100                    LDQ     CODE,,AUTO
         2 002146   000003 772000                    QRL     3
         2 002147   037777 376007                    ANQ     16383,DL
         2 002150   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 002151   200126 470500                    LDP0    AD_PRKEY$,,AUTO
         2 002152   000000 235100                    LDA     0,,PR0
         2 002153   000001 236100                    LDQ     1,,PR0
         2 002154   000036 773000                    LRL     30
         2 002155   037777 376007                    ANQ     16383,DL
         2 002156   200162 116100                    CMPQ    @MIN_HOLE+1,,AUTO
         2 002157   002171 601000 2                  TNZ     FCG_DFLT2
         2 002160   000100 066500                    CMPB    filb='0'B
         2 002161   000000 600001                    BDSC    0,,PR0                   by=3,bit=0,n=1
         2 002162   200120 400001                    BDSC    CODE,,AUTO               by=2,bit=0,n=1
         2 002163   002171 601000 2                  TNZ     FCG_DFLT2
         2 002164   000000 236100                    LDQ     0,,PR0
         2 002165   077000 316007                    CANQ    32256,DL
         2 002166   002171 601000 2                  TNZ     FCG_DFLT2
         2 002167   000036 316000 3                  CANQ    30
         2 002170   001742 600000 2                  TZE     SUB_FOUND

     1015     8675    1            AND PRECKEY.CODE.MON = CODE.MON
     1016     8676    1            AND PRECKEY.CODE.MID = 0
     1017     8677    1            AND PRECKEY.CODE.FCG = 0
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:150  
     1018     8678    1             THEN                          /* Null FCG & MID worked              */
     1019     8679    1               GOTO SUB_FOUND;
     1020     8680        /**/
     1021     8681    1   FCG_DFLT2:                              /* Try lower SEV, null FCG & MID      */
     1022     8682    1           EMR_PRECFPT.V.KEYS# = FALSE;    /* POSITION BY NUMBER                 */

   8682  2 002171   000031 236000 3     FCG_DFLT2    LDQ     25
         2 002172   200044 356100                    ANSQ    EMR_PRECFPT+6,,AUTO

     1023     8683    1           EMR_PRECFPT.V.N# = -1;          /* BACK UP ONE                        */

   8683  2 002173   000001 335007                    LCA     1,DL
         2 002174   200045 755100                    STA     EMR_PRECFPT+7,,AUTO

     1024     8684        /**/
     1025     8685    1           CALL M$MPRECORD (EMR_PRECFPT) ALTRET (SETNOMSG);

   8685  2 002175   200036 630500                    EPPR0   EMR_PRECFPT,,AUTO
         2 002176   200162 450500                    STP0    @MIN_HOLE+1,,AUTO
         2 002177   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 002200   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002201   000000 701000 xent               TSX1    M$MPRECORD
         2 002202   002227 702000 2                  TSX2    SETNOMSG

     1026     8686        /**/
     1027     8687    1           IF PRECKEY.CODE.ERROR = CODE.ERROR

   8687  2 002203   200120 236100                    LDQ     CODE,,AUTO
         2 002204   000003 772000                    QRL     3
         2 002205   037777 376007                    ANQ     16383,DL
         2 002206   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 002207   200126 470500                    LDP0    AD_PRKEY$,,AUTO
         2 002210   000000 235100                    LDA     0,,PR0
         2 002211   000001 236100                    LDQ     1,,PR0
         2 002212   000036 773000                    LRL     30
         2 002213   037777 376007                    ANQ     16383,DL
         2 002214   200162 116100                    CMPQ    @MIN_HOLE+1,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:151  
         2 002215   002227 601000 2                  TNZ     SETNOMSG
         2 002216   000100 066500                    CMPB    filb='0'B
         2 002217   000000 600001                    BDSC    0,,PR0                   by=3,bit=0,n=1
         2 002220   200120 400001                    BDSC    CODE,,AUTO               by=2,bit=0,n=1
         2 002221   002227 601000 2                  TNZ     SETNOMSG
         2 002222   000000 236100                    LDQ     0,,PR0
         2 002223   077000 316007                    CANQ    32256,DL
         2 002224   002227 601000 2                  TNZ     SETNOMSG
         2 002225   000036 316000 3                  CANQ    30
         2 002226   001742 600000 2                  TZE     SUB_FOUND

     1028     8688    1            AND PRECKEY.CODE.MON = CODE.MON
     1029     8689    1            AND PRECKEY.CODE.MID = 0
     1030     8690    1            AND PRECKEY.CODE.FCG = 0
     1031     8691    1             THEN                          /* Null FCG & MID & lower SEV worked  */
     1032     8692    1                GOTO SUB_FOUND;
     1033     8693        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:152  
     1034     8694        /**/
     1035     8695        /*  We have tried and failed with all SUBMESS forms that the user allows.     */
     1036     8696        /**/
     1037     8697    1   SETNOMSG:                               /* Can't find usable message for CODE */
     1038     8698    1           IF USER_FILE AND V$# -> FPT$ERRMSG.SUBFILE

   8698  2 002227   200111 234100       SETNOMSG     SZN     USER_FILE,,AUTO
         2 002230   002245 605000 2                  TPL     s:8707
         2 002231   000000 470400 xsym               LDP0    B$PS0$
         2 002232   000002 236100                    LDQ     2,,PR0
         2 002233   200000 316003                    CANQ    65536,DU
         2 002234   002245 600000 2                  TZE     s:8707

     1039     8699    1            THEN                           /* Try a new file with the same CODE  */
     1040     8700    2            DO;

     1041     8701    2              USER_FILE = FALSE;

   8701  2 002235   200111 450100                    STZ     USER_FILE,,AUTO

     1042     8702    2              B$JIT$ -> B$JIT.DCB$ = M$STAR$;

   8702  2 002236   000000 236000 xsym               LDQ     B$M$STAR$
         2 002237   000000 471400 xsym               LDP1    B$JIT$
         2 002240   100232 756100                    STQ     154,,PR1

     1043     8703    2              CALL FMP$CLSTAR;

   8703  2 002241   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002242   000000 701000 xent               TSX1    FMP$CLSTAR
         2 002243   000000 011000                    NOP     0

     1044     8704    2              GOTO DFLT_FILENAME;

   8704  2 002244   000717 710000 2                  TRA     DFLT_FILENAME

     1045     8705    2              END;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:153  
     1046     8706        /**/
     1047     8707    1           IF ALTCODE_EXISTS

   8707  2 002245   200113 234100                    SZN     ALTCODE_EXISTS,,AUTO
         2 002246   002272 605000 2                  TPL     s:8719

     1048     8708    1            THEN                           /* Try it all again with a new CODE   */
     1049     8709    2              DO;

     1050     8710    2             IF NOT V$# -> FPT$ERRMSG.L6_ALTCODE

   8710  2 002247   000000 470400 xsym               LDP0    B$PS0$
         2 002250   000002 236100                    LDQ     2,,PR0
         2 002251   000002 316007                    CANQ    2,DL
         2 002252   002260 601000 2                  TNZ     s:8714

     1051     8711    2             THEN
     1052     8712    2                CODE_CHAR = ALTCODE$# -> CODE$CHAR; /* Move in new CODE          */

   8712  2 002253   000255 471400 1                  LDP1    B$PS10
         2 002254   040100 100500                    MLR     fill='040'O
         2 002255   100000 000004                    ADSC9   0,,PR1                   cn=0,n=4
         2 002256   200120 000004                    ADSC9   CODE,,AUTO               cn=0,n=4
         2 002257   002270 710000 2                  TRA     s:8715

     1053     8713    2             ELSE
     1054     8714    2                CALL EMR$FEP2HOST(ALTCODE$# -> CODE$CHAR, CODE_CHAR);

   8714  2 002260   200120 631500                    EPPR1   CODE,,AUTO
         2 002261   200163 451500                    STP1    @MIN_HOLE+2,,AUTO
         2 002262   000255 236000 1                  LDQ     B$PS10
         2 002263   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 002264   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 002265   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 002266   000000 701000 xent               TSX1    EMR$FEP2HOST
         2 002267   000000 011000                    NOP     0

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:154  
     1055     8715    2                ALTCODE_EXISTS = FALSE;    /* Don't come through again           */

   8715  2 002270   200113 450100                    STZ     ALTCODE_EXISTS,,AUTO

     1056     8716    2                GOTO PREPARE_FILE;         /* Try new CODE with passed file NAME */

   8716  2 002271   000576 710000 2                  TRA     PREPARE_FILE

     1057     8717    2                END;
     1058     8718        /**/                                    /* GIVE UP: no text, no way!          */
     1059     8719    1           IF V$# -> FPT$ERRMSG.SUBMESS

   8719  2 002272   000000 470400 xsym               LDP0    B$PS0$
         2 002273   000002 430100                    FSZN    2,,PR0
         2 002274   001221 604000 2                  TMI     CODE_ONLY

     1060     8720    1            THEN                           /* We can give him just the FCG       */
     1061     8721    1              GOTO CODE_ONLY;
     1062     8722    1            ELSE                           /* Nothing else will do               */
     1063     8723    2              DO;

     1064     8724    2                EMR_RESULTS.NOMSG = TRUE;

   8724  2 002275   100000 236003                    LDQ     32768,DU
         2 002276   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

     1065     8725    2                GOTO ERRMSG_ALTRTN;

   8725  2 002277   002300 710000 2                  TRA     ERRMSG_ALTRTN

     1066     8726    2                END;
     1067     8727        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:155  
     1068     8728    1   ERRMSG_ALTRTN:
     1069     8729    1           ALTRET_FLAG = TRUE;

   8729  2 002300   400000 236003       ERRMSG_ALTR* LDQ     -131072,DU
         2 002301   200114 756100                    STQ     ALTRET_FLAG,,AUTO

     1070     8730        /**/
     1071     8731    1   ERRMSG_EXIT:                            /* RETURN TO PMME HANDLER             */
     1072     8732    1           EMR_RESULTS.RECCNT = REC_COUNT;

   8732  2 002302   200100 236100       ERRMSG_EXIT  LDQ     REC_COUNT,,AUTO
         2 002303   200146 552104                    STBQ    EMR_RESULTS,'04'O,AUTO

     1073     8733    1           CALL HFF$NILERASE(RESULTS_PS#) ALTRET (RESULTS_MOVED); /* RESULTS?    */

   8733  2 002304   000037 630400 3                  EPPR0   31
         2 002305   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002306   000000 701000 xent               TSX1    HFF$NILERASE
         2 002307   002317 702000 2                  TSX2    RESULTS_MOVED

     1074     8734    1           CALL HFF$TRAPALT ALTRET (RESULTS_MOVED); /*Don't get lost*/

   8734  2 002310   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002311   000000 701000 xent               TSX1    HFF$TRAPALT
         2 002312   002317 702000 2                  TSX2    RESULTS_MOVED

     1075     8735    1           RESULTS$# -> EMR$RESULTS_CHAR = EMR_RESULTS_CHAR; /* MOVE RESULTS     */

   8735  2 002313   000000 470400 xsym               LDP0    B$PS9$
         2 002314   040100 100500                    MLR     fill='040'O
         2 002315   200146 000020                    ADSC9   EMR_RESULTS,,AUTO        cn=0,n=16
         2 002316   000000 000020                    ADSC9   0,,PR0                   cn=0,n=16

   8735  2 002317                       RESULTS_MOV* null
   8735  2 002317                       ERRMSG_BAIL* null
     1076     8736    1   RESULTS_MOVED:  ;
     1077     8737        /**/
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:156  
     1078     8738    1   ERRMSG_BAILOUT:  ;
     1079     8739        /**/
     1080     8740        /*  THIS ROUTINE MUST BE USED TO EXIT FROM M$ERRMSG.  NOTE THAT THE FPT       */
     1081     8741        /*  CHECKER MAY BE ENTERED IF WE TRAP.  THESE SHOULD AT LEAST BE CAUGHT WITH  */
     1082     8742        /*  AN 'HFF$TRAPALT ALTRET(ERRMSG_BAILOUT)'.  NOTE THAT THIS ROUTINE IS ALSO  */
     1083     8743        /*  SUITABLE FOR NORMAL RETURNS!                                              */
     1084     8744        /**/
     1085     8745    1           CALL HFF$TRAPALT;               /* RESET TRAP HANDLER                 */

   8745  2 002317   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002320   000000 701000 xent               TSX1    HFF$TRAPALT
         2 002321   000000 011000                    NOP     0

     1086     8746    1           CALL FMD$RBUF(POOLBUF$);        /* RELEASE OUR POOL BUFFER            */

   8746  2 002322   200124 630500                    EPPR0   POOLBUF$,,AUTO
         2 002323   200162 450500                    STP0    @MIN_HOLE+1,,AUTO
         2 002324   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 002325   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 002326   000000 701000 xent               TSX1    FMD$RBUF
         2 002327   000000 011000                    NOP     0

     1087     8747    1           IF ALTRET_FLAG THEN

   8747  2 002330   200114 234100                    SZN     ALTRET_FLAG,,AUTO
         2 002331   002350 605000 2                  TPL     s:8759

     1088     8748    2             DO;

     1089     8749    2              B$JIT.ERR.FCG = '0515'O;     /* EM                                 */

   8749  2 002332   000000 470400 xsym               LDP0    B$JIT$
         2 002333   051500 236003                    LDQ     21312,DU
         2 002334   000012 752160                    STCQ    10,'60'O,PR0

     1090     8750    2              B$JIT.ERR.MID = '22'O;       /* R                                  */

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:157  
   8750  2 002335   000022 236003                    LDQ     18,DU
         2 002336   000012 752110                    STCQ    10,'10'O,PR0

     1091     8751    2              B$JIT.ERR.MON = '1'B;

   8751  2 002337   400000 236007                    LDQ     -131072,DL
         2 002340   000012 256100                    ORSQ    10,,PR0

     1092     8752    2              B$JIT.ERR.CODE = %E$ERRMSGALT;

   8752  2 002341   000012 236100                    LDQ     10,,PR0
         2 002342   000040 376000 3                  ANQ     32
         2 002343   015250 276007                    ORQ     6824,DL
         2 002344   000012 756100                    STQ     10,,PR0

     1093     8753    2              B$JIT.ERR.SEV = 0;

   8753  2 002345   000002 236000 3                  LDQ     2
         2 002346   000012 356100                    ANSQ    10,,PR0

     1094     8754        /*E*    ERROR:    EMR-E$ERRMSGALT-0
     1095     8755                MESSAGE: M$ERRMSG altreturned to user.
     1096     8756                DESCRIPTION: M$ERRMSG USES THIS CODE TO ALTRET   */
     1097     8757    2              END;

   8757  2 002347   002352 710000 2                  TRA     s:8761

     1098     8758    1            ELSE                           /* Normal return                      */
     1099     8759    1             B$JIT.ERR = '0'B;

   8759  2 002350   000000 470400 xsym               LDP0    B$JIT$
         2 002351   000012 450100                    STZ     10,,PR0

     1100     8760        /**/
     1101     8761    1           B$JIT$ -> B$JIT.DCB$ = M$STAR$;

   8761  2 002352   000000 236000 xsym               LDQ     B$M$STAR$
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:158  
         2 002353   000232 756100                    STQ     154,,PR0

     1102     8762    1           CALL FMP$CLSTAR;

   8762  2 002354   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002355   000000 701000 xent               TSX1    FMP$CLSTAR
         2 002356   000000 011000                    NOP     0

     1103     8763        /**/
     1104     8764    1           RETURN;                         /* RETURN TO USER                     */

   8764  2 002357   000000 702200 xent               TSX2  ! X66_ARET

     1105     8765        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:159  
     1106     8766        /**/
     1107     8767        /*F*     NAME:     INCLCODE
     1108     8768                 DESCRIPTION: INCLCODE converts the error code into text and
     1109     8769                              adds it the the current record.
     1110     8770        */
     1111     8771        /**/
     1112     8772    1   INCLCODE: PROC;

   8772  2 002360   200154 741300       INCLCODE     STX1  ! POINT$+2,,AUTO

     1113     8773        /**/
     1114     8774    2              CALL ERRMSG_CODE2TEXT;

   8774  2 002361   003536 701000 2                  TSX1    ERRMSG_CODE2TEXT
         2 002362   000000 011000                    NOP     0

     1115     8775    2              IF (SLOT_SIZE - MSG_SIZE >= TEXT_CODE_SIZE)

   8775  2 002363   200106 235100                    LDA     MSG_SIZE,,AUTO
         2 002364   000155 115007                    CMPA    109,DL
         2 002365   002405 603000 2                  TRC     s:8785

     1116     8776    2               THEN
     1117     8777    3                 DO;

     1118     8778    3                   COUNT = TEXT_CODE_SIZE + 1;

   8778  2 002366   000015 236007                    LDQ     13,DL
         2 002367   200105 756100                    STQ     COUNT,,AUTO

     1119     8779    3                   CALL PUSH_RIGHT(0,0,1);

   8779  2 002370   000014 237000 3                  LDAQ    12
         2 002371   200160 757100                    STAQ    @START+1,,AUTO
         2 002372   000014 236000 3                  LDQ     12
         2 002373   200157 756100                    STQ     @VICTIM+1,,AUTO
         2 002374   004052 701000 2                  TSX1    PUSH_RIGHT
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:160  
         2 002375   000000 011000                    NOP     0

     1120     8780    3                   CALL INSERT(BUF$ -> MSG$SLOT,FLAG#+1,COUNT,TEXT_BUF.TEXT);

   8780  2 002376   200123 470500                    LDP0    BUF$,,AUTO
         2 002377   200105 720100                    LXL0    COUNT,,AUTO
         2 002400   200104 235100                    LDA     FLAG#,,AUTO
         2 002401   040145 100500                    MLR     fill='040'O
         2 002402   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43
         2 002403   000000 200010                    ADSC9   0,A,PR0                  cn=1,n=*X0

     1121     8781    3                   END;

   8781  2 002404   002431 710000 2                  TRA     s:8795

     1122     8782        /**/
     1123     8783    2               ELSE                         /* NO ROOM FOR TEXT CODE              */
     1124     8784    3                DO;

     1125     8785    3                  CALL INSERT(TEXT_BUF.TEXT,18,TEXT_CODE_SIZE,

   8785  2 002405   200123 470500                    LDP0    BUF$,,AUTO
         2 002406   200104 236100                    LDQ     FLAG#,,AUTO
         2 002407   040100 100506                    MLR     fill='040'O
         2 002410   000000 200014                    ADSC9   0,Q,PR0                  cn=1,n=12
         2 002411   200136 600014                    ADSC9   TEXT_BUF+4,,AUTO         cn=3,n=12

     1126     8786    3                    SUBSTR(BUF$ -> MSG$SLOT,FLAG#+1,TEXT_CODE_SIZE));
     1127     8787    3                  CALL INSERT(BUF$ -> MSG$SLOT,FLAG#+1,TEXT_CODE_SIZE,TEXT_BUF.TEXT);

   8787  2 002412   040106 100500                    MLR     fill='040'O
         2 002413   200132 200014                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=12
         2 002414   000000 200014                    ADSC9   0,Q,PR0                  cn=1,n=12

     1128     8788    3                  J = MSG_SIZE;

   8788  2 002415   200102 755100                    STA     J,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:161  

     1129     8789    3                  MSG_SIZE = TEXT_CODE_SIZE + FLAG# + 1;

   8789  2 002416   000015 036007                    ADLQ    13,DL
         2 002417   200106 756100                    STQ     MSG_SIZE,,AUTO

     1130     8790    3                  CALL ERRMSG_WRITE;

   8790  2 002420   003705 701000 2                  TSX1    ERRMSG_WRITE
         2 002421   000000 011000                    NOP     0

     1131     8791    3                  MSG_SIZE = J;

   8791  2 002422   200102 235100                    LDA     J,,AUTO
         2 002423   200106 755100                    STA     MSG_SIZE,,AUTO

     1132     8792    3                  CALL INSERT(BUF$ -> MSG$SLOT,FLAG#+1,TEXT_CODE_SIZE,

   8792  2 002424   200123 470500                    LDP0    BUF$,,AUTO
         2 002425   200104 236100                    LDQ     FLAG#,,AUTO
         2 002426   040106 100500                    MLR     fill='040'O
         2 002427   200136 600014                    ADSC9   TEXT_BUF+4,,AUTO         cn=3,n=12
         2 002430   000000 200014                    ADSC9   0,Q,PR0                  cn=1,n=12

     1133     8793    3                    SUBSTR(TEXT_BUF.TEXT,18,TEXT_CODE_SIZE));
     1134     8794    3                  END;

     1135     8795    2             RETURN;

   8795  2 002431   200154 221300                    LDX1  ! POINT$+2,,AUTO
         2 002432   000001 702211                    TSX2  ! 1,X1

     1136     8796    2   END INCLCODE;
     1137     8797        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:162  
     1138     8798        /**/
     1139     8799        /*F*     NAME:     TOUCH_UP
     1140     8800                 DESCRIPTION:  Touches up the S and D fields of a pointer to
     1141     8801                               match one that we've already mapped on.
     1142     8802        */
     1143     8803    1   TOUCH_UP: PROC (SAMPLE,VICTIM);

   8803  2 002433   200154 741300       TOUCH_UP     STX1  ! POINT$+2,,AUTO

     1144     8804        /**/
     1145     8805    2   DCL 1 SAMPLE ALIGNED,
     1146     8806    2         2 * BIT(24) UNAL,
     1147     8807    2         2 SD BIT(12) UNAL;
     1148     8808    2   DCL 1 VICTIM ALIGNED,
     1149     8809    2         2 * BIT(24) UNAL,
     1150     8810    2         2 SD BIT(12) UNAL;
     1151     8811        /**/
     1152     8812    2              VICTIM.SD = SAMPLE.SD;

   8812  2 002434   200156 470500                    LDP0    @VICTIM,,AUTO
         2 002435   200155 471500                    LDP1    @SAMPLE,,AUTO
         2 002436   100000 236100                    LDQ     0,,PR1
         2 002437   000000 752103                    STCQ    0,'03'O,PR0

     1153     8813    2              RETURN;

   8813  2 002440   200154 221300                    LDX1  ! POINT$+2,,AUTO
         2 002441   000001 702211                    TSX2  ! 1,X1

     1154     8814    2   END TOUCH_UP;
     1155     8815        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:163  
     1156     8816        /**/
     1157     8817        /*F*     NAME:     ERRMSG_SUB
     1158     8818                 DESCRIPTION: ERRMSG_SUB PERFORMS ANY SUBSTITUTION CALLED FOR
     1159     8819                           BY THE MESSAGE.
     1160     8820        */
     1161     8821        /**/
     1162     8822    1   ERRMSG_SUB: PROC ALTRET;

   8822  2 002442   200154 741300       ERRMSG_SUB   STX1  ! POINT$+2,,AUTO

     1163     8823        /**/
     1164     8824    2           IF V$# -> FPT$ERRMSG.LEAVETOKEN THEN

   8824  2 002443   000000 470400 xsym               LDP0    B$PS0$
         2 002444   000002 234100                    SZN     2,,PR0
         2 002445   002447 605000 2                  TPL     s:8827

     1165     8825    2              RETURN;

   8825  2 002446   000001 702211                    TSX2  ! 1,X1

     1166     8826        /**/
     1167     8827    2           I = FLAG#;

   8827  2 002447   200104 235100                    LDA     FLAG#,,AUTO
         2 002450   200101 755100                    STA     I,,AUTO

     1168     8828    2           CPH_CLMN = -1;                  /* NOT IN CONDITIONAL PHRASE          */

   8828  2 002451   000001 336007                    LCQ     1,DL
         2 002452   200107 756100                    STQ     CPH_CLMN,,AUTO

     1169     8829        /**/
     1170     8830    2   SUB_1:
     1171     8831    2           CALL INDEX (I,'%',BUF$ -> MSG$SLOT,I); /* SEARCH FOR '%'              */

   8831  2 002453   200101 720100       SUB_1        LXL0    I,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:164  
         2 002454   777607 620010                    EAX0    -121,X0
         2 002455   777777 660003                    ERX0    -1,DU
         2 002456   200101 236100                    LDQ     I,,AUTO
         2 002457   200123 470500                    LDP0    BUF$,,AUTO
         2 002460   200101 235100                    LDA     I,,AUTO
         2 002461   000000 124545                    SCM     mask='000'O
         2 002462   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
         2 002463   000041 000001 3                  ADSC9   33                       cn=0,n=1
         2 002464   200101 000100                    ARG     I,,AUTO
         2 002465   200101 056100                    ASQ     I,,AUTO

     1172     8832    2           IF (I >= MSG_SIZE) THEN RETURN;

   8832  2 002466   200101 236100                    LDQ     I,,AUTO
         2 002467   002474 604000 2                  TMI     s:8834
         2 002470   200106 116100                    CMPQ    MSG_SIZE,,AUTO
         2 002471   002474 602000 2                  TNC     s:8834

   8832  2 002472   200154 221300                    LDX1  ! POINT$+2,,AUTO
         2 002473   000001 702211                    TSX2  ! 1,X1

     1173     8833        /**/
     1174     8834    2           IF SUBSTR(BUF$ -> MSG$SLOT,I+1,1) = 'L'

   8834  2 002474   040000 106506                    CMPC    fill='040'O
         2 002475   000000 200001                    ADSC9   0,Q,PR0                  cn=1,n=1
         2 002476   000042 000001 3                  ADSC9   34                       cn=0,n=1
         2 002477   002511 601000 2                  TNZ     s:8843

     1175     8835    2            THEN                           /* %Ln means 'n' literal              */
     1176     8836    3              DO;

     1177     8837    3                COUNT = 0;                 /* MAKE NO ROOM                       */

   8837  2 002500   200105 450100                    STZ     COUNT,,AUTO

     1178     8838    3                CALL PUSH_RIGHT(I,2,0);    /* BUT EAT TWO                        */
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:165  

   8838  2 002501   000012 237000 3                  LDAQ    10
         2 002502   200160 757100                    STAQ    @START+1,,AUTO
         2 002503   200101 631500                    EPPR1   I,,AUTO
         2 002504   200157 451500                    STP1    @VICTIM+1,,AUTO
         2 002505   004052 701000 2                  TSX1    PUSH_RIGHT
         2 002506   000000 011000                    NOP     0

     1179     8839    3                I = I+1;                   /* DON'T EXAMINE THIS LITERAL!        */

   8839  2 002507   200101 054100                    AOS     I,,AUTO

     1180     8840    3                GOTO SUB_1;

   8840  2 002510   002453 710000 2                  TRA     SUB_1

     1181     8841    3                END;
     1182     8842        /**/
     1183     8843    2           SUB_CODE = SUBSTR(BUF$ -> MSG$SLOT,I+1,2);

   8843  2 002511   040100 100506                    MLR     fill='040'O
         2 002512   000000 200002                    ADSC9   0,Q,PR0                  cn=1,n=2
         2 002513   200117 000002                    ADSC9   SUB_CODE,,AUTO           cn=0,n=2

     1184     8844    2           J = %TOP_2SUBS#;                /* Top index for %SUB table           */

   8844  2 002514   000010 235007                    LDA     8,DL
         2 002515   200102 755100                    STA     J,,AUTO

     1185     8845    3           DO WHILE (J >= 0);

   8845  2 002516   002526 604000 2                  TMI     s:8850

     1186     8846    3              IF (SUBTYPE_TBL(J) = SUB_CODE) THEN GOTO SUBFOUND;

   8846  2 002517   200102 720100                    LXL0    J,,AUTO
         2 002520   000072 221010 1                  LDX1    SUBTYPE_TBL,X0
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:166  
         2 002521   200117 101100                    CMPX1   SUB_CODE,,AUTO
         2 002522   002631 600000 2                  TZE     SUBFOUND

     1187     8847    3              J=J-1;

   8847  2 002523   000001 336007                    LCQ     1,DL
         2 002524   200102 056100                    ASQ     J,,AUTO

     1188     8848    3              END;

   8848  2 002525   002517 605000 2                  TPL     s:8846

     1189     8849        /**/
     1190     8850    3           IF (CPH_CLMN = -1 OR UNSAT_SUB > 0) THEN DO;

   8850  2 002526   200107 235100                    LDA     CPH_CLMN,,AUTO
         2 002527   000027 115000 xsym               CMPA    B_VECTNIL+23
         2 002530   002533 600000 2                  TZE     s:8851
         2 002531   200110 236100                    LDQ     UNSAT_SUB,,AUTO
         2 002532   002541 604400 2                  TMOZ    s:8857

     1191     8851    3              UNSAT_SUB = 1; /* NO POSSIBLE SUBS FOUND YET */

   8851  2 002533   000001 236007                    LDQ     1,DL
         2 002534   200110 756100                    STQ     UNSAT_SUB,,AUTO

     1192     8852    3              CPH_CLMN = I;                /* START OF COND. PHRASE              */

   8852  2 002535   200101 235100                    LDA     I,,AUTO
         2 002536   200107 755100                    STA     CPH_CLMN,,AUTO

     1193     8853    3              I = I + 1;

   8853  2 002537   200101 054100                    AOS     I,,AUTO

     1194     8854    3              GOTO SUB_1;

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:167  
   8854  2 002540   002453 710000 2                  TRA     SUB_1

     1195     8855    3              END;
     1196     8856        /**/
     1197     8857    3           IF (UNSAT_SUB < 0) THEN DO;         /* END OF PHRASE WITH MISSING SUB */

   8857  2 002541   002567 605000 2                  TPL     s:8866

     1198     8858    3              CALL INSERT (BUF$ -> MSG$SLOT, /* DELETE PHRASE                    */

   8858  2 002542   200101 720100                    LXL0    I,,AUTO
         2 002543   777610 620010                    EAX0    -120,X0
         2 002544   777777 660003                    ERX0    -1,DU
         2 002545   777610 621005                    EAX1    -120,AL
         2 002546   777777 661003                    ERX1    -1,DU
         2 002547   200123 470500                    LDP0    BUF$,,AUTO
         2 002550   200101 235100                    LDA     I,,AUTO
         2 002551   200107 236100                    LDQ     CPH_CLMN,,AUTO
         2 002552   040146 100545                    MLR     fill='040'O
         2 002553   000000 200010                    ADSC9   0,A,PR0                  cn=1,n=*X0
         2 002554   000000 000011                    ADSC9   0,Q,PR0                  cn=0,n=*X1

     1199     8859    3                CPH_CLMN,(SLOT_SIZE-(CPH_CLMN+1)),
     1200     8860    3                SUBSTR (BUF$ -> MSG$SLOT,(I+1)));
     1201     8861    3              MSG_SIZE = MSG_SIZE - ( I - CPH_CLMN + 1 );

   8861  2 002555   200101 236100                    LDQ     I,,AUTO
         2 002556   200107 136100                    SBLQ    CPH_CLMN,,AUTO
         2 002557   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 002560   200106 236100                    LDQ     MSG_SIZE,,AUTO
         2 002561   200162 136100                    SBLQ    @MIN_HOLE+1,,AUTO
         2 002562   000001 136007                    SBLQ    1,DL
         2 002563   200106 756100                    STQ     MSG_SIZE,,AUTO

     1202     8862    3              I = CPH_CLMN;

   8862  2 002564   200107 235100                    LDA     CPH_CLMN,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:168  
         2 002565   200101 755100                    STA     I,,AUTO

     1203     8863    3              END;

   8863  2 002566   002622 710000 2                  TRA     s:8876

     1204     8864        /**/
     1205     8865    3           ELSE DO;                        /* KEEP PHRASE                        */

     1206     8866    3              CALL INSERT (BUF$ -> MSG$SLOT, /* DELETE % SIGNS                   */

   8866  2 002567   200101 236100                    LDQ     I,,AUTO
         2 002570   200107 136100                    SBLQ    CPH_CLMN,,AUTO
         2 002571   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 002572   200101 236100                    LDQ     I,,AUTO
         2 002573   200107 136100                    SBLQ    CPH_CLMN,,AUTO
         2 002574   777777 620006                    EAX0    -1,QL
         2 002575   200162 721100                    LXL1    @MIN_HOLE+1,,AUTO
         2 002576   777777 622011                    EAX2    -1,X1
         2 002577   200123 470500                    LDP0    BUF$,,AUTO
         2 002600   040145 100545                    MLR     fill='040'O
         2 002601   000000 200010                    ADSC9   0,A,PR0                  cn=1,n=*X0
         2 002602   000000 000012                    ADSC9   0,A,PR0                  cn=0,n=*X2

     1207     8867    3                CPH_CLMN,( I -(CPH_CLMN+1)),
     1208     8868    3                SUBSTR (BUF$ -> MSG$SLOT,CPH_CLMN+1,(I-(CPH_CLMN+1))));
     1209     8869    3              CALL INSERT (BUF$ -> MSG$SLOT,

   8869  2 002603   200101 720100                    LXL0    I,,AUTO
         2 002604   777610 620010                    EAX0    -120,X0
         2 002605   777777 660003                    ERX0    -1,DU
         2 002606   200101 721100                    LXL1    I,,AUTO
         2 002607   777606 621011                    EAX1    -122,X1
         2 002610   777777 661003                    ERX1    -1,DU
         2 002611   200101 236100                    LDQ     I,,AUTO
         2 002612   040146 100546                    MLR     fill='040'O
         2 002613   000000 200010                    ADSC9   0,Q,PR0                  cn=1,n=*X0
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:169  
         2 002614   077777 600011                    ADSC9   -1,Q,PR0                 cn=3,n=*X1

     1210     8870    3                I-1,(SLOT_SIZE-(I-1)),
     1211     8871    3                SUBSTR(BUF$ -> MSG$SLOT,I+1,SLOT_SIZE-(I+1)));
     1212     8872    3              I = I-1;

   8872  2 002615   000001 336007                    LCQ     1,DL
         2 002616   200101 056100                    ASQ     I,,AUTO

     1213     8873    3              MSG_SIZE = MSG_SIZE - 2;     /* DELETE TWO % SIGNS                 */

   8873  2 002617   200106 235100                    LDA     MSG_SIZE,,AUTO
         2 002620   000002 135007                    SBLA    2,DL
         2 002621   200106 755100                    STA     MSG_SIZE,,AUTO

     1214     8874    3              END;

     1215     8875        /**/
     1216     8876    2           CPH_CLMN = -1;                  /* NOT IN COND. PHRASE                */

   8876  2 002622   000001 335007                    LCA     1,DL
         2 002623   200107 755100                    STA     CPH_CLMN,,AUTO

     1217     8877    2           GOTO SUB_1;

   8877  2 002624   002453 710000 2                  TRA     SUB_1

     1218     8878        /**/
     1219     8879    2   NO_FIELD:
     1220     8880    2           UNSAT_SUB = -1;   /* DELETE THIS PHRASE IF IT IS CONDITIONAL          */

   8880  2 002625   000001 335007       NO_FIELD     LCA     1,DL
         2 002626   200110 755100                    STA     UNSAT_SUB,,AUTO

     1221     8881    2           I = I + 1;

   8881  2 002627   200101 054100                    AOS     I,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:170  

     1222     8882    2           GOTO SUB_1;                     /* NOT A SUBSTITUTE FIELD             */

   8882  2 002630   002453 710000 2                  TRA     SUB_1

     1223     8883        /**/
     1224     8884    2   SUBFOUND: IF UNSAT_SUB > 0 THEN UNSAT_SUB = 0; /* FOUND SOMEWHERE TO SUB      */

   8884  2 002631   200110 235100       SUBFOUND     LDA     UNSAT_SUB,,AUTO
         2 002632   002634 604400 2                  TMOZ    s:8885

   8884  2 002633   200110 450100                    STZ     UNSAT_SUB,,AUTO

     1225     8885    2           CALL INSERT (BUF$ -> MSG$SLOT,I,3,BLANKS); /* BLANK %XX               */

   8885  2 002634   200123 470500                    LDP0    BUF$,,AUTO
         2 002635   200101 235100                    LDA     I,,AUTO
         2 002636   040105 100400                    MLR     fill='040'O
         2 002637   000254 000003 1                  ADSC9   BLANKS                   cn=0,n=3
         2 002640   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3

     1226     8886    3           DO CASE(J);

   8886  2 002641   200102 235100                    LDA     J,,AUTO
         2 002642   000011 115007                    CMPA    9,DL
         2 002643   002645 602005 2                  TNC     s:8886+4,AL
         2 002644   003532 710000 2                  TRA     s:9026
         2 002645   002656 710000 2                  TRA     s:8889
         2 002646   003004 710000 2                  TRA     s:8911
         2 002647   003070 710000 2                  TRA     s:8930
         2 002650   003130 710000 2                  TRA     s:8937
         2 002651   003224 710000 2                  TRA     s:8955
         2 002652   003372 710000 2                  TRA     s:8985
         2 002653   003377 710000 2                  TRA     s:8989
         2 002654   003404 710000 2                  TRA     s:8993
         2 002655   003462 710000 2                  TRA     s:9011

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:171  
     1227     8887        /**/
     1228     8888    3            CASE (FNSUB);                  /* FILE NAME                          */

     1229     8889    3              IF ((DCB$ = ADDR(NIL)) OR ~(V$# -> FPT$ERRMSG.SUBFN)OR

   8889  2 002656   200121 236100                    LDQ     DCB$,,AUTO
         2 002657   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002660   002625 600000 2                  TZE     NO_FIELD
         2 002661   000000 471400 xsym               LDP1    B$PS0$
         2 002662   100002 236100                    LDQ     2,,PR1
         2 002663   000002 736000                    QLS     2
         2 002664   400000 376003                    ANQ     -131072,DU
         2 002665   400000 676003                    ERQ     -131072,DU
         2 002666   002625 601000 2                  TNZ     NO_FIELD
         2 002667   200121 473500                    LDP3    DCB$,,AUTO
         2 002670   300032 236100                    LDQ     26,,PR3
         2 002671   777000 376007                    ANQ     -512,DL
         2 002672   001000 116007                    CMPQ    512,DL
         2 002673   002676 600000 2                  TZE     s:8892
         2 002674   002000 116007                    CMPQ    1024,DL
         2 002675   002625 601000 2                  TNZ     NO_FIELD

     1230     8890    3                ((DCB$ -> F$DCB.ASN ~= %FILE#)AND(DCB$ -> F$DCB.ASN ~= %TAPE#)))
     1231     8891    3              THEN GOTO NO_FIELD;          /* NO SUBSTITUTION                    */
     1232     8892    3              TEXT_BUF.COUNT = DCB$ -> F$DCB.NAME.L;

   8892  2 002676   300010 236100                    LDQ     8,,PR3
         2 002677   200132 552140                    STBQ    TEXT_BUF,'40'O,AUTO

     1233     8893    3              IF (TEXT_BUF.COUNT > MAX_SUB_SIZE) THEN TEXT_BUF.COUNT = MAX_SUB_SIZE;

   8893  2 002700   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 002701   777000 376003                    ANQ     -512,DU
         2 002702   040000 116003                    CMPQ    16384,DU
         2 002703   002706 602000 2                  TNC     s:8894

   8893  2 002704   037000 236003                    LDQ     15872,DU
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:172  
         2 002705   200132 552140                    STBQ    TEXT_BUF,'40'O,AUTO

     1234     8894    3              TEXT_BUF.TEXT = SUBSTR(DCB$ -> F$DCB.NAME.C,0,TEXT_BUF.COUNT);

   8894  2 002706   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 002707   000033 772000                    QRL     27
         2 002710   000000 622006                    EAX2    0,QL
         2 002711   040100 100540                    MLR     fill='040'O
         2 002712   300010 200012                    ADSC9   8,,PR3                   cn=1,n=*X2
         2 002713   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43

     1235     8895    3              IF (DCB$ -> F$DCB.ACCT ~= ' ')AND

   8895  2 002714   300020 237100                    LDAQ    16,,PR3
         2 002715   000026 117000 3                  CMPAQ   22
         2 002716   002764 600000 2                  TZE     s:8906
         2 002717   000000 474400 xsym               LDP4    B$JIT$
         2 002720   300020 237100                    LDAQ    16,,PR3
         2 002721   400006 117100                    CMPAQ   6,,PR4
         2 002722   002764 600000 2                  TZE     s:8906

     1236     8896    4                (DCB$ -> F$DCB.ACCT ~= B$JIT$ -> B$JIT.FACCN) THEN DO;

     1237     8897    4                 COUNT = 0;

   8897  2 002723   200105 450100                    STZ     COUNT,,AUTO

     1238     8898    5                 DO WHILE ((COUNT < SIZEC(DCB$-> F$DCB.ACCT))AND

   8898  2 002724   002726 710000 2                  TRA     s:8901

     1239     8899    5                      (SUBSTR(DCB$ -> F$DCB.ACCT,COUNT,1) ~= ' '));
     1240     8900    5                    COUNT = COUNT + 1;

   8900  2 002725   200105 054100                    AOS     COUNT,,AUTO

     1241     8901    5                    END;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:173  

   8901  2 002726   200105 235100                    LDA     COUNT,,AUTO
         2 002727   000010 115007                    CMPA    8,DL
         2 002730   002736 605000 2                  TPL     s:8902
         2 002731   200121 470500                    LDP0    DCB$,,AUTO
         2 002732   040000 106505                    CMPC    fill='040'O
         2 002733   000020 000001                    ADSC9   16,A,PR0                 cn=0,n=1
         2 002734   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 002735   002725 601000 2                  TNZ     s:8900

     1242     8902    4                 CALL INSERT(TEXT_BUF.TEXT,TEXT_BUF.COUNT,COUNT+1,'.',

   8902  2 002736   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 002737   000033 772000                    QRL     27
         2 002740   000001 620005                    EAX0    1,AL
         2 002741   040146 100400                    MLR     fill='040'O
         2 002742   000043 000001 3                  ADSC9   35                       cn=0,n=1
         2 002743   200132 200010                    ADSC9   TEXT_BUF,Q,AUTO          cn=1,n=*X0
         2 002744   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 002745   200105 236100                    LDQ     COUNT,,AUTO
         2 002746   000000 116003                    CMPQ    0,DU
         2 002747   002756 604400 2                  TMOZ    s:8904
         2 002750   200121 470500                    LDP0    DCB$,,AUTO
         2 002751   000000 620006                    EAX0    0,QL
         2 002752   200162 235100                    LDA     @MIN_HOLE+1,,AUTO
         2 002753   040145 100500                    MLR     fill='040'O
         2 002754   000020 000010                    ADSC9   16,,PR0                  cn=0,n=8
         2 002755   200132 400010                    ADSC9   TEXT_BUF,A,AUTO          cn=2,n=*X0

     1243     8903    4                   DCB$ -> F$DCB.ACCT);
     1244     8904    4                 TEXT_BUF.COUNT = TEXT_BUF.COUNT + COUNT + 1;

   8904  2 002756   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 002757   000033 772000                    QRL     27
         2 002760   200105 036100                    ADLQ    COUNT,,AUTO
         2 002761   000001 036007                    ADLQ    1,DL
         2 002762   000033 736000                    QLS     27
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:174  
         2 002763   200132 552140                    STBQ    TEXT_BUF,'40'O,AUTO

     1245     8905    4                 END;

     1246     8906    3              COUNT = TEXT_BUF.COUNT;

   8906  2 002764   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 002765   000033 772000                    QRL     27
         2 002766   200105 756100                    STQ     COUNT,,AUTO

     1247     8907    3              CALL PUSH_RIGHT(I,3,1) ALTRET(NO_FIELD);

   8907  2 002767   000044 237000 3                  LDAQ    36
         2 002770   200160 757100                    STAQ    @START+1,,AUTO
         2 002771   200101 630500                    EPPR0   I,,AUTO
         2 002772   200157 450500                    STP0    @VICTIM+1,,AUTO
         2 002773   004052 701000 2                  TSX1    PUSH_RIGHT
         2 002774   002625 702000 2                  TSX2    NO_FIELD

     1248     8908    3              CALL INSERT(BUF$ -> MSG$SLOT,I,COUNT,TEXT_BUF.TEXT);

   8908  2 002775   200123 470500                    LDP0    BUF$,,AUTO
         2 002776   200105 720100                    LXL0    COUNT,,AUTO
         2 002777   200101 235100                    LDA     I,,AUTO
         2 003000   040145 100500                    MLR     fill='040'O
         2 003001   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43
         2 003002   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
         2 003003   003532 710000 2                  TRA     s:9026

     1249     8909        /**/
     1250     8910    3            CASE (ACSUB);                  /* ACCOUNT                            */

     1251     8911    3              IF ((DCB$ = ADDR(NIL)) OR ~(V$# -> FPT$ERRMSG.SUBAC))

   8911  2 003004   200121 236100                    LDQ     DCB$,,AUTO
         2 003005   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 003006   002625 600000 2                  TZE     NO_FIELD
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:175  
         2 003007   000000 471400 xsym               LDP1    B$PS0$
         2 003010   100002 236100                    LDQ     2,,PR1
         2 003011   000003 736000                    QLS     3
         2 003012   400000 376003                    ANQ     -131072,DU
         2 003013   400000 676003                    ERQ     -131072,DU
         2 003014   002625 601000 2                  TNZ     NO_FIELD

     1252     8912    3                THEN                       /* ACCOUNT substitution not requested */
     1253     8913                                                /* or not possible.                   */
     1254     8914    3                 GOTO NO_FIELD;
     1255     8915    3              IF ((DCB$ -> F$DCB.ASN ~= %FILE#) AND

   8915  2 003015   200121 473500                    LDP3    DCB$,,AUTO
         2 003016   300032 236100                    LDQ     26,,PR3
         2 003017   777000 376007                    ANQ     -512,DL
         2 003020   001000 116007                    CMPQ    512,DL
         2 003021   003025 600000 2                  TZE     s:8919
         2 003022   300026 222100                    LDX2    22,,PR3
         2 003023   000266 102000 1                  CMPX2   SYSV+8
         2 003024   002625 601000 2                  TNZ     NO_FIELD

     1256     8916    3                (SUBSTR(DCB$ -> F$DCB.RES,0,2) ~= 'DP'))
     1257     8917    3                THEN                       /* Not a file or device disc          */
     1258     8918    3                 GOTO NO_FIELD;
     1259     8919    3              COUNT = SIZEC(F$DCB.ACCT);

   8919  2 003025   000010 235007                    LDA     8,DL
         2 003026   200105 755100                    STA     COUNT,,AUTO

     1260     8920    3              TEXT_BUF.TEXT = DCB$ -> F$DCB.ACCT;

   8920  2 003027   040100 100500                    MLR     fill='040'O
         2 003030   300020 000010                    ADSC9   16,,PR3                  cn=0,n=8
         2 003031   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43

     1261     8921    3              IF (TEXT_BUF.TEXT = ' ') THEN

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:176  
   8921  2 003032   040000 106500                    CMPC    fill='040'O
         2 003033   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43
         2 003034   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003035   003042 601000 2                  TNZ     s:8923

     1262     8922    3                 TEXT_BUF.TEXT = B$JIT$ -> B$JIT.FACCN;

   8922  2 003036   000000 474400 xsym               LDP4    B$JIT$
         2 003037   040100 100500                    MLR     fill='040'O
         2 003040   400006 000010                    ADSC9   6,,PR4                   cn=0,n=8
         2 003041   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43

     1263     8923    4              DO WHILE ((COUNT > 0)AND(SUBSTR(TEXT_BUF.TEXT,COUNT-1,1) = ' '));

   8923  2 003042   003045 710000 2                  TRA     s:8925

     1264     8924    4                 COUNT = COUNT - 1;

   8924  2 003043   000001 336007                    LCQ     1,DL
         2 003044   200105 056100                    ASQ     COUNT,,AUTO

     1265     8925    4                 END;

   8925  2 003045   200105 235100                    LDA     COUNT,,AUTO
         2 003046   003053 604400 2                  TMOZ    s:8926
         2 003047   040000 106505                    CMPC    fill='040'O
         2 003050   200132 000001                    ADSC9   TEXT_BUF,A,AUTO          cn=0,n=1
         2 003051   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003052   003043 600000 2                  TZE     s:8924

     1266     8926    3              CALL PUSH_RIGHT(I,3,1) ALTRET(NO_FIELD);

   8926  2 003053   000044 237000 3                  LDAQ    36
         2 003054   200160 757100                    STAQ    @START+1,,AUTO
         2 003055   200101 630500                    EPPR0   I,,AUTO
         2 003056   200157 450500                    STP0    @VICTIM+1,,AUTO
         2 003057   004052 701000 2                  TSX1    PUSH_RIGHT
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:177  
         2 003060   002625 702000 2                  TSX2    NO_FIELD

     1267     8927    3              CALL INSERT(BUF$ -> MSG$SLOT,I,COUNT,TEXT_BUF.TEXT);

   8927  2 003061   200123 470500                    LDP0    BUF$,,AUTO
         2 003062   200105 720100                    LXL0    COUNT,,AUTO
         2 003063   200101 235100                    LDA     I,,AUTO
         2 003064   040145 100500                    MLR     fill='040'O
         2 003065   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43
         2 003066   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
         2 003067   003532 710000 2                  TRA     s:9026

     1268     8928        /**/
     1269     8929    3            CASE (DCSUB);                  /* DCBNAME                            */

     1270     8930    3              IF ((DCB$ = ADDR(NIL)) OR ~(V$# -> FPT$ERRMSG.SUBDC))

   8930  2 003070   200121 236100                    LDQ     DCB$,,AUTO
         2 003071   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 003072   002625 600000 2                  TZE     NO_FIELD
         2 003073   000000 471400 xsym               LDP1    B$PS0$
         2 003074   100002 236100                    LDQ     2,,PR1
         2 003075   000004 736000                    QLS     4
         2 003076   400000 376003                    ANQ     -131072,DU
         2 003077   400000 676003                    ERQ     -131072,DU
         2 003100   002625 601000 2                  TNZ     NO_FIELD

     1271     8931    3              THEN GOTO NO_FIELD;
     1272     8932    3              COUNT = DCB$ -> F$DCB.DCBNAME.L;

   8932  2 003101   200121 473500                    LDP3    DCB$,,AUTO
         2 003102   300140 236100                    LDQ     96,,PR3
         2 003103   000033 772000                    QRL     27
         2 003104   000037 376007                    ANQ     31,DL
         2 003105   200105 756100                    STQ     COUNT,,AUTO

     1273     8933    3              CALL PUSH_RIGHT(I,3,1) ALTRET(NO_FIELD);
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:178  

   8933  2 003106   000044 237000 3                  LDAQ    36
         2 003107   200160 757100                    STAQ    @START+1,,AUTO
         2 003110   200101 634500                    EPPR4   I,,AUTO
         2 003111   200157 454500                    STP4    @VICTIM+1,,AUTO
         2 003112   004052 701000 2                  TSX1    PUSH_RIGHT
         2 003113   002625 702000 2                  TSX2    NO_FIELD

     1274     8934    3              CALL INSERT (BUF$ -> MSG$SLOT,I,COUNT,DCB$ -> F$DCB.DCBNAME.N);

   8934  2 003114   200121 470500                    LDP0    DCB$,,AUTO
         2 003115   000140 236100                    LDQ     96,,PR0
         2 003116   000033 772000                    QRL     27
         2 003117   000037 376007                    ANQ     31,DL
         2 003120   000000 620006                    EAX0    0,QL
         2 003121   200123 471500                    LDP1    BUF$,,AUTO
         2 003122   200105 721100                    LXL1    COUNT,,AUTO
         2 003123   200101 235100                    LDA     I,,AUTO
         2 003124   040145 100540                    MLR     fill='040'O
         2 003125   000140 200010                    ADSC9   96,,PR0                  cn=1,n=*X0
         2 003126   100000 000011                    ADSC9   0,A,PR1                  cn=0,n=*X1
         2 003127   003532 710000 2                  TRA     s:9026

     1275     8935        /**/
     1276     8936    3            CASE (SNSUB);                  /* SERIAL NUMBER                      */

     1277     8937    3              IF ((DCB$ = ADDR(NIL)) OR ~(V$# -> FPT$ERRMSG.SUBSN))

   8937  2 003130   200121 236100                    LDQ     DCB$,,AUTO
         2 003131   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 003132   002625 600000 2                  TZE     NO_FIELD
         2 003133   000000 471400 xsym               LDP1    B$PS0$
         2 003134   100002 236100                    LDQ     2,,PR1
         2 003135   000005 736000                    QLS     5
         2 003136   400000 376003                    ANQ     -131072,DU
         2 003137   400000 676003                    ERQ     -131072,DU
         2 003140   002625 601000 2                  TNZ     NO_FIELD
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:179  

     1278     8938    3              THEN GOTO NO_FIELD;
     1279     8939    3              IF (DCB$ -> F$DCB.PSN = ' ')AND(DCB$ -> F$DCB.SETX = 0) THEN GOTO
              8939                       NO_FIELD;

   8939  2 003141   200121 473500                    LDP3    DCB$,,AUTO
         2 003142   040000 106500                    CMPC    fill='040'O
         2 003143   300024 000006                    ADSC9   20,,PR3                  cn=0,n=6
         2 003144   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003145   003150 601000 2                  TNZ     s:8940
         2 003146   300051 722100                    LXL2    41,,PR3
         2 003147   002625 600000 2                  TZE     NO_FIELD

     1280     8940    3              COUNT = SIZEC(F$DCB.PSN);

   8940  2 003150   000006 236007                    LDQ     6,DL
         2 003151   200105 756100                    STQ     COUNT,,AUTO

     1281     8941    3              IF DCB$ -> F$DCB.PSN ~= ' '

   8941  2 003152   040000 106500                    CMPC    fill='040'O
         2 003153   300024 000006                    ADSC9   20,,PR3                  cn=0,n=6
         2 003154   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003155   003162 600000 2                  TZE     s:8945

     1282     8942    3               THEN
     1283     8943    3                 TEXT_BUF.TEXT = DCB$ -> F$DCB.PSN;

   8943  2 003156   040100 100500                    MLR     fill='040'O
         2 003157   300024 000006                    ADSC9   20,,PR3                  cn=0,n=6
         2 003160   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43
         2 003161   003172 710000 2                  TRA     s:8946

     1284     8944    3               ELSE
     1285     8945    3                TEXT_BUF.TEXT = FM$SET$ -> FM$SET.PSN(DCB$ -> F$DCB.SETX);

   8945  2 003162   300051 236100                    LDQ     41,,PR3
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:180  
         2 003163   000003 736000                    QLS     3
         2 003164   000046 376000 3                  ANQ     38
         2 003165   000002 736000                    QLS     2
         2 003166   000000 474400 xsym               LDP4    FM$SET$
         2 003167   040100 100506                    MLR     fill='040'O
         2 003170   400000 400006                    ADSC9   0,Q,PR4                  cn=2,n=6
         2 003171   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43

     1286     8946    4              DO WHILE ((COUNT > 0)AND(SUBSTR(TEXT_BUF.TEXT,COUNT-1,1) = ' '));

   8946  2 003172   003175 710000 2                  TRA     s:8948

     1287     8947    4                 COUNT = COUNT - 1;

   8947  2 003173   000001 336007                    LCQ     1,DL
         2 003174   200105 056100                    ASQ     COUNT,,AUTO

     1288     8948    4                 END;

   8948  2 003175   200105 235100                    LDA     COUNT,,AUTO
         2 003176   003203 604400 2                  TMOZ    s:8949
         2 003177   040000 106505                    CMPC    fill='040'O
         2 003200   200132 000001                    ADSC9   TEXT_BUF,A,AUTO          cn=0,n=1
         2 003201   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003202   003173 600000 2                  TZE     s:8947

     1289     8949    3              IF TEXT_BUF.TEXT <= ' '

   8949  2 003203   040100 106400                    CMPC    fill='040'O
         2 003204   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003205   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43
         2 003206   002625 603000 2                  TRC     NO_FIELD

     1290     8950    3              THEN GOTO NO_FIELD;
     1291     8951    3              CALL PUSH_RIGHT(I,3,1) ALTRET(NO_FIELD);

   8951  2 003207   000044 237000 3                  LDAQ    36
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:181  
         2 003210   200160 757100                    STAQ    @START+1,,AUTO
         2 003211   200101 630500                    EPPR0   I,,AUTO
         2 003212   200157 450500                    STP0    @VICTIM+1,,AUTO
         2 003213   004052 701000 2                  TSX1    PUSH_RIGHT
         2 003214   002625 702000 2                  TSX2    NO_FIELD

     1292     8952    3              CALL INSERT(BUF$ -> MSG$SLOT,I,COUNT,TEXT_BUF.TEXT);

   8952  2 003215   200123 470500                    LDP0    BUF$,,AUTO
         2 003216   200105 720100                    LXL0    COUNT,,AUTO
         2 003217   200101 235100                    LDA     I,,AUTO
         2 003220   040145 100500                    MLR     fill='040'O
         2 003221   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43
         2 003222   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
         2 003223   003532 710000 2                  TRA     s:9026

     1293     8953        /**/
     1294     8954    3            CASE(TASUB);                   /* TAPE SUB FIELD                     */

     1295     8955    3              IF (DCB$ = ADDR(NIL))OR

   8955  2 003224   200121 236100                    LDQ     DCB$,,AUTO
         2 003225   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 003226   002625 600000 2                  TZE     NO_FIELD
         2 003227   200121 471500                    LDP1    DCB$,,AUTO
         2 003230   100103 236100                    LDQ     67,,PR1
         2 003231   000777 376007                    ANQ     511,DL
         2 003232   000002 116007                    CMPQ    2,DL
         2 003233   002625 601000 2                  TNZ     NO_FIELD

     1296     8956    3                (DCB$ -> F$DCB.IASN ~= %TAPE#) THEN GOTO NO_FIELD;
     1297     8957    3              TEXT_BUF.COUNT = 2;

   8957  2 003234   002000 236003                    LDQ     1024,DU
         2 003235   200132 552140                    STBQ    TEXT_BUF,'40'O,AUTO

     1298     8958    3              IF DCB$ -> F$DCB.ASN = %TAPE#
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:182  

   8958  2 003236   100032 236100                    LDQ     26,,PR1
         2 003237   777000 376007                    ANQ     -512,DL
         2 003240   002000 116007                    CMPQ    1024,DL
         2 003241   003246 601000 2                  TNZ     s:8962

     1299     8959    3               THEN
     1300     8960    3                 TEXT_BUF.TEXT = 'LT';

   8960  2 003242   040100 100400                    MLR     fill='040'O
         2 003243   000267 000002 1                  ADSC9   SYSV+9                   cn=0,n=2
         2 003244   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43
         2 003245   003261 710000 2                  TRA     s:8965

     1301     8961    3               ELSE
     1302     8962    3                 IF DCB$ -> F$DCB.ORG = %FREE#

   8962  2 003246   100032 236100                    LDQ     26,,PR1
         2 003247   777000 376003                    ANQ     -512,DU
         2 003250   023000 116003                    CMPQ    9728,DU
         2 003251   003256 601000 2                  TNZ     s:8964

     1303     8963    3                   THEN TEXT_BUF.TEXT = 'FT';

   8963  2 003252   040100 100400                    MLR     fill='040'O
         2 003253   000270 000002 1                  ADSC9   SYSV+10                  cn=0,n=2
         2 003254   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43
         2 003255   003261 710000 2                  TRA     s:8965

     1304     8964    3                   ELSE TEXT_BUF.TEXT = 'MT';

   8964  2 003256   040100 100400                    MLR     fill='040'O
         2 003257   000271 000002 1                  ADSC9   SYSV+11                  cn=0,n=2
         2 003260   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43

     1305     8965    3              IF DCB$ -> F$DCB.PSN ~= ' '

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:183  
   8965  2 003261   040000 106500                    CMPC    fill='040'O
         2 003262   100024 000006                    ADSC9   20,,PR1                  cn=0,n=6
         2 003263   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003264   003312 600000 2                  TZE     s:8975

     1306     8966    3               THEN
     1307     8967    4                DO;

     1308     8968    4                 CALL INSERT(TEXT_BUF.TEXT,2,7,'#',DCB$ -> F$DCB.PSN);

   8968  2 003265   000043 236007                    LDQ     35,DL
         2 003266   200132 552104                    STBQ    TEXT_BUF,'04'O,AUTO
         2 003267   040100 100500                    MLR     fill='040'O
         2 003270   100024 000006                    ADSC9   20,,PR1                  cn=0,n=6
         2 003271   200133 000006                    ADSC9   TEXT_BUF+1,,AUTO         cn=0,n=6

     1309     8969    4                 TEXT_BUF.COUNT = 9;

   8969  2 003272   011000 236003                    LDQ     4608,DU
         2 003273   200132 552140                    STBQ    TEXT_BUF,'40'O,AUTO

     1310     8970    5                 DO WHILE ((TEXT_BUF.COUNT > 3)AND

   8970  2 003274   003300 710000 2                  TRA     s:8973

     1311     8971    5                      (SUBSTR(TEXT_BUF.TEXT,TEXT_BUF.COUNT-1,1) = ' '));
     1312     8972    5                    TEXT_BUF.COUNT = TEXT_BUF.COUNT - 1;

   8972  2 003275   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 003276   777000 036003                    ADLQ    -512,DU
         2 003277   200132 552140                    STBQ    TEXT_BUF,'40'O,AUTO

     1313     8973    5                    END;

   8973  2 003300   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 003301   777000 376003                    ANQ     -512,DU
         2 003302   004000 116003                    CMPQ    2048,DU
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:184  
         2 003303   003312 602000 2                  TNC     s:8975
         2 003304   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 003305   000033 772000                    QRL     27
         2 003306   040000 106506                    CMPC    fill='040'O
         2 003307   200132 000001                    ADSC9   TEXT_BUF,Q,AUTO          cn=0,n=1
         2 003310   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003311   003275 600000 2                  TZE     s:8972

     1314     8974    4                 END;

     1315     8975    4              IF (DCB$ -> F$DCB.ASN = %TAPE#) THEN DO;

   8975  2 003312   200121 470500                    LDP0    DCB$,,AUTO
         2 003313   000032 236100                    LDQ     26,,PR0
         2 003314   777000 376007                    ANQ     -512,DL
         2 003315   002000 116007                    CMPQ    1024,DL
         2 003316   003352 601000 2                  TNZ     s:8980

     1316     8976    4                 CALL INSERT(TEXT_BUF.TEXT,TEXT_BUF.COUNT,DCB$ -> F$DCB.NAME.L+1,

   8976  2 003317   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 003320   000033 772000                    QRL     27
         2 003321   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 003322   000010 236100                    LDQ     8,,PR0
         2 003323   000033 772000                    QRL     27
         2 003324   000001 620006                    EAX0    1,QL
         2 003325   200162 235100                    LDA     @MIN_HOLE+1,,AUTO
         2 003326   040145 100400                    MLR     fill='040'O
         2 003327   000047 000001 3                  ADSC9   39                       cn=0,n=1
         2 003330   200132 200010                    ADSC9   TEXT_BUF,A,AUTO          cn=1,n=*X0
         2 003331   000000 636010                    EAQ     0,X0
         2 003332   000022 772000                    QRL     18
         2 003333   000002 116007                    CMPQ    2,DL
         2 003334   003341 602000 2                  TNC     s:8978
         2 003335   777777 621010                    EAX1    -1,X0
         2 003336   040145 100500                    MLR     fill='040'O
         2 003337   000010 200037                    ADSC9   8,,PR0                   cn=1,n=31
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:185  
         2 003340   200132 400011                    ADSC9   TEXT_BUF,A,AUTO          cn=2,n=*X1

     1317     8977    4                   '/',DCB$ -> F$DCB.NAME.C);
     1318     8978    4                 TEXT_BUF.COUNT = TEXT_BUF.COUNT + DCB$ -> F$DCB.NAME.L + 1;

   8978  2 003341   000010 236100                    LDQ     8,,PR0
         2 003342   000033 772000                    QRL     27
         2 003343   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 003344   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 003345   000033 772000                    QRL     27
         2 003346   200162 036100                    ADLQ    @MIN_HOLE+1,,AUTO
         2 003347   000001 036007                    ADLQ    1,DL
         2 003350   000033 736000                    QLS     27
         2 003351   200132 552140                    STBQ    TEXT_BUF,'40'O,AUTO

     1319     8979    4                 END;

     1320     8980    3              COUNT = TEXT_BUF.COUNT;

   8980  2 003352   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 003353   000033 772000                    QRL     27
         2 003354   200105 756100                    STQ     COUNT,,AUTO

     1321     8981    3              CALL PUSH_RIGHT(I,3,1) ALTRET(NO_FIELD);

   8981  2 003355   000044 237000 3                  LDAQ    36
         2 003356   200160 757100                    STAQ    @START+1,,AUTO
         2 003357   200101 631500                    EPPR1   I,,AUTO
         2 003360   200157 451500                    STP1    @VICTIM+1,,AUTO
         2 003361   004052 701000 2                  TSX1    PUSH_RIGHT
         2 003362   002625 702000 2                  TSX2    NO_FIELD

     1322     8982    3              CALL INSERT(BUF$ -> MSG$SLOT,I,COUNT,TEXT_BUF.TEXT);

   8982  2 003363   200123 470500                    LDP0    BUF$,,AUTO
         2 003364   200105 720100                    LXL0    COUNT,,AUTO
         2 003365   200101 235100                    LDA     I,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:186  
         2 003366   040145 100500                    MLR     fill='040'O
         2 003367   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43
         2 003370   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
         2 003371   003532 710000 2                  TRA     s:9026

     1323     8983        /**/
     1324     8984    3            CASE (U1SUB);

     1325     8985    3              K = FIELD1_PS#;

   8985  2 003372   000006 236007                    LDQ     6,DL
         2 003373   200103 756100                    STQ     K,,AUTO

     1326     8986    3              POINT$ = FIELD1$#;

   8986  2 003374   000000 236000 xsym               LDQ     B$PS6$
         2 003375   200152 756100                    STQ     POINT$,,AUTO

     1327     8987    3              GOTO USER_FIELD;

   8987  2 003376   003410 710000 2                  TRA     USER_FIELD

     1328     8988    3            CASE (U2SUB);

     1329     8989    3              K = FIELD2_PS#;

   8989  2 003377   000007 236007                    LDQ     7,DL
         2 003400   200103 756100                    STQ     K,,AUTO

     1330     8990    3              POINT$ = FIELD2$#;

   8990  2 003401   000000 236000 xsym               LDQ     B$PS7$
         2 003402   200152 756100                    STQ     POINT$,,AUTO

     1331     8991    3              GOTO USER_FIELD;

   8991  2 003403   003410 710000 2                  TRA     USER_FIELD
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:187  

     1332     8992    3            CASE (U3SUB);

     1333     8993    3              K = FIELD3_PS#;

   8993  2 003404   000010 236007                    LDQ     8,DL
         2 003405   200103 756100                    STQ     K,,AUTO

     1334     8994    3              POINT$ = FIELD3$#;

   8994  2 003406   000000 236000 xsym               LDQ     B$PS8$
         2 003407   200152 756100                    STQ     POINT$,,AUTO

   8994  2 003410                       USER_FIELD   null
     1335     8995    3   USER_FIELD: ;                           /* COMMON CODE                        */
     1336     8996    3              CALL HFF$DSIZ(K,COUNT) ALTRET (NO_FIELD);

   8996  2 003410   200105 631500                    EPPR1   COUNT,,AUTO
         2 003411   200163 451500                    STP1    @MIN_HOLE+2,,AUTO
         2 003412   200103 633500                    EPPR3   K,,AUTO
         2 003413   200162 453500                    STP3    @MIN_HOLE+1,,AUTO
         2 003414   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 003415   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 003416   000000 701000 xent               TSX1    HFF$DSIZ
         2 003417   002625 702000 2                  TSX2    NO_FIELD

     1337     8997    3              TEXT_BUF.COUNT_CHAR = POINT$ -> TEXT$BUF.COUNT_CHAR;

   8997  2 003420   200152 470500                    LDP0    POINT$,,AUTO
         2 003421   040100 100500                    MLR     fill='040'O
         2 003422   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 003423   200132 000001                    ADSC9   TEXT_BUF,,AUTO           cn=0,n=1

     1338     8998    3              IF TEXT_BUF.COUNT > MAX_SUB_SIZE

   8998  2 003424   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 003425   777000 376003                    ANQ     -512,DU
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:188  
         2 003426   040000 116003                    CMPQ    16384,DU
         2 003427   003434 603000 2                  TRC     s:9002
         2 003430   200132 236100                    LDQ     TEXT_BUF,,AUTO
         2 003431   000033 772000                    QRL     27
         2 003432   200105 116100                    CMPQ    COUNT,,AUTO
         2 003433   003440 604000 2                  TMI     s:9005

     1339     8999    3               OR TEXT_BUF.COUNT > COUNT-1 /* BIGGER THAN FRAMED TEXT PART       */
     1340     9000    3               THEN
     1341     9001    4                 DO;

     1342     9002    4                   EMR_RESULTS.BADUSUB = TRUE;

   9002  2 003434   000040 236003                    LDQ     32,DU
         2 003435   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

     1343     9003    4                   ALTRETURN;

   9003  2 003436   200154 221300                    LDX1  ! POINT$+2,,AUTO
         2 003437   000000 702211                    TSX2  ! 0,X1

     1344     9004    4                   END;
     1345     9005    3              COUNT = TEXT_BUF.COUNT;

   9005  2 003440   200105 756100                    STQ     COUNT,,AUTO

     1346     9006    3              TEXT_BUF.TEXT = SUBSTR(POINT$ -> TEXT$BUF.TEXT,0,COUNT);

   9006  2 003441   000000 620006                    EAX0    0,QL
         2 003442   040100 100540                    MLR     fill='040'O
         2 003443   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         2 003444   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43

     1347     9007    3              CALL PUSH_RIGHT(I,3,1) ALTRET(NO_FIELD);

   9007  2 003445   000044 237000 3                  LDAQ    36
         2 003446   200160 757100                    STAQ    @START+1,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:189  
         2 003447   200101 631500                    EPPR1   I,,AUTO
         2 003450   200157 451500                    STP1    @VICTIM+1,,AUTO
         2 003451   004052 701000 2                  TSX1    PUSH_RIGHT
         2 003452   002625 702000 2                  TSX2    NO_FIELD

     1348     9008    3              CALL INSERT (BUF$ -> MSG$SLOT,I,COUNT,TEXT_BUF.TEXT);

   9008  2 003453   200123 470500                    LDP0    BUF$,,AUTO
         2 003454   200105 720100                    LXL0    COUNT,,AUTO
         2 003455   200101 235100                    LDA     I,,AUTO
         2 003456   040145 100500                    MLR     fill='040'O
         2 003457   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43
         2 003460   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
         2 003461   003532 710000 2                  TRA     s:9026

     1349     9009        /**/
     1350     9010    3            CASE (UFSUB);

     1351     9011    3              IF (DCB$ = ADDR(NIL)) THEN GOTO NO_FIELD;

   9011  2 003462   200121 236100                    LDQ     DCB$,,AUTO
         2 003463   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 003464   002625 600000 2                  TZE     NO_FIELD

     1352     9012    3              EMR_UNFIDFPT.V.DCB# = ERR_DCB;

   9012  2 003465   200122 722100                    LXL2    ERR_DCB,,AUTO
         2 003466   200074 742100                    STX2    EMR_UNFIDFPT+20,,AUTO

     1353     9013    3              EMR_UNFIDFPT.TEXTFID_ = VECTOR(TEXT_BUF.TEXT);

   9013  2 003467   000050 235000 3                  LDA     40
         2 003470   200162 452500                    STP2    @MIN_HOLE+1,,AUTO
         2 003471   200162 236100                    LDQ     @MIN_HOLE+1,,AUTO
         2 003472   000051 036000 3                  ADLQ    41
         2 003473   200052 757100                    STAQ    EMR_UNFIDFPT+2,,AUTO

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:190  
     1354     9014        /**/
     1355     9015    3              CALL M$MUNFID (EMR_UNFIDFPT) ALTRET (UNFID_ALT);

   9015  2 003474   200050 631500                    EPPR1   EMR_UNFIDFPT,,AUTO
         2 003475   200162 451500                    STP1    @MIN_HOLE+1,,AUTO
         2 003476   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 003477   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003500   000000 701000 xent               TSX1    M$MUNFID
         2 003501   003502 702000 2                  TSX2    UNFID_ALT

     1356     9016        /**/
     1357     9017    3   UNFID_ALT:
     1358     9018    3              COUNT = SIZEC(TEXT_BUF.TEXT);

   9018  2 003502   000053 235007       UNFID_ALT    LDA     43,DL
         2 003503   200105 755100                    STA     COUNT,,AUTO

     1359     9019    4              DO WHILE ((TEXT_BUF.TEXT_ARRAY(COUNT-1) = ' ')AND

   9019  2 003504   003507 710000 2                  TRA     s:9022

     1360     9020    4                   (COUNT > 0));
     1361     9021    4                 COUNT = COUNT-1;

   9021  2 003505   000001 336007                    LCQ     1,DL
         2 003506   200105 056100                    ASQ     COUNT,,AUTO

     1362     9022    4                 END;

   9022  2 003507   200105 235100                    LDA     COUNT,,AUTO
         2 003510   040000 106505                    CMPC    fill='040'O
         2 003511   200132 000001                    ADSC9   TEXT_BUF,A,AUTO          cn=0,n=1
         2 003512   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003513   003516 601000 2                  TNZ     s:9023
         2 003514   000000 115003                    CMPA    0,DU
         2 003515   003505 605400 2                  TPNZ    s:9021

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:191  
     1363     9023    3              CALL PUSH_RIGHT(I,3,1) ALTRET(NO_FIELD);

   9023  2 003516   000044 237000 3                  LDAQ    36
         2 003517   200160 757100                    STAQ    @START+1,,AUTO
         2 003520   200101 630500                    EPPR0   I,,AUTO
         2 003521   200157 450500                    STP0    @VICTIM+1,,AUTO
         2 003522   004052 701000 2                  TSX1    PUSH_RIGHT
         2 003523   002625 702000 2                  TSX2    NO_FIELD

     1364     9024    3              CALL INSERT (BUF$ -> MSG$SLOT,I,COUNT,TEXT_BUF.TEXT);

   9024  2 003524   200123 470500                    LDP0    BUF$,,AUTO
         2 003525   200105 720100                    LXL0    COUNT,,AUTO
         2 003526   200101 235100                    LDA     I,,AUTO
         2 003527   040145 100500                    MLR     fill='040'O
         2 003530   200132 200053                    ADSC9   TEXT_BUF,,AUTO           cn=1,n=43
         2 003531   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0

     1365     9025    3            END;                           /* END DO CASE                        */

     1366     9026    2           I = I + COUNT;

   9026  2 003532   200101 236100                    LDQ     I,,AUTO
         2 003533   200105 036100                    ADLQ    COUNT,,AUTO
         2 003534   200101 756100                    STQ     I,,AUTO

     1367     9027    2           GOTO SUB_1;

   9027  2 003535   002453 710000 2                  TRA     SUB_1

     1368     9028    2   END;                                    /* END SUB                            */
     1369     9029        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:192  
     1370     9030        /**/
     1371     9031        /*F*     NAME: ERRMSG_CODE2TEXT
     1372     9032                 DESCRIPTION: ERRMSG_CODE2TEXT TAKE THE CONTENTS OF THE CELL CODE
     1373     9033                       CONVERTS IT TO PRINTABLE TEXT IN THE CELL TEXT_BUF.
     1374     9034        */
     1375     9035        /**/
     1376     9036    1   ERRMSG_CODE2TEXT: PROC;

   9036  2 003536   200156 741300       ERRMSG_CODE* STX1  ! @VICTIM,,AUTO

     1377     9037    3           DO I = 0 TO 2;                  /* TRANSLATE FCG - MID                */

   9037  2 003537   200101 450100                    STZ     I,,AUTO

     1378     9038    3              IF (CODE.FCGMID(I) = 0) THEN TEXT_BUF.TEXT_ARRAY(I) = ' ';

   9038  2 003540   200101 235100                    LDA     I,,AUTO
         2 003541   003543 605000 2                  TPL     s:9038+3
         2 003542   000006 035003                    ADLA    6,DU
         2 003543   000100 101505                    MRL     fill='000'O
         2 003544   200120 020001                    ADSC6   CODE,A,AUTO              cn=0,n=1
         2 003545   200162 020006                    ADSC6   @MIN_HOLE+1,,AUTO        cn=0,n=6
         2 003546   200162 236100                    LDQ     @MIN_HOLE+1,,AUTO
         2 003547   000000 116003                    CMPQ    0,DU
         2 003550   003556 601000 2                  TNZ     s:9039

   9038  2 003551   200101 235100                    LDA     I,,AUTO
         2 003552   040105 100400                    MLR     fill='040'O
         2 003553   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003554   200132 200001                    ADSC9   TEXT_BUF,A,AUTO          cn=1,n=1
         2 003555   003624 710000 2                  TRA     s:9042

     1379     9039    3              ELSE IF (CODE.FCGMID(I) < 48) THEN /* ITS A LETTER                 */

   9039  2 003556   200101 235100                    LDA     I,,AUTO
         2 003557   003561 605000 2                  TPL     s:9039+3
         2 003560   000006 035003                    ADLA    6,DU
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:193  
         2 003561   000100 101505                    MRL     fill='000'O
         2 003562   200120 020001                    ADSC6   CODE,A,AUTO              cn=0,n=1
         2 003563   200162 020006                    ADSC6   @MIN_HOLE+1,,AUTO        cn=0,n=6
         2 003564   200162 236100                    LDQ     @MIN_HOLE+1,,AUTO
         2 003565   000060 116007                    CMPQ    48,DL
         2 003566   003605 605000 2                  TPL     s:9041

     1380     9040    3                    TEXT_BUF.UBIN_ARRAY(I) = CODE.FCGMID(I) + 64;

   9040  2 003567   200101 235100                    LDA     I,,AUTO
         2 003570   003572 605000 2                  TPL     s:9040+3
         2 003571   000006 035003                    ADLA    6,DU
         2 003572   000100 101505                    MRL     fill='000'O
         2 003573   200120 020001                    ADSC6   CODE,A,AUTO              cn=0,n=1
         2 003574   200163 020006                    ADSC6   @MIN_HOLE+2,,AUTO        cn=0,n=6
         2 003575   200163 236100                    LDQ     @MIN_HOLE+2,,AUTO
         2 003576   000100 036007                    ADLQ    64,DL
         2 003577   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 003600   200101 235100                    LDA     I,,AUTO
         2 003601   000105 101500                    MRL     fill='000'O
         2 003602   200162 000004                    ADSC9   @MIN_HOLE+1,,AUTO        cn=0,n=4
         2 003603   200132 200001                    ADSC9   TEXT_BUF,A,AUTO          cn=1,n=1
         2 003604   003624 710000 2                  TRA     s:9042

     1381     9041    3                 ELSE TEXT_BUF.UBIN_ARRAY(I) = CODE.FCGMID(I);

   9041  2 003605   200101 236100                    LDQ     I,,AUTO
         2 003606   000006 402007                    MPY     6,DL
         2 003607   000000 116003                    CMPQ    0,DU
         2 003610   003612 605000 2                  TPL     s:9041+5
         2 003611   000044 036003                    ADLQ    36,DU
         2 003612   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 003613   200101 236100                    LDQ     I,,AUTO
         2 003614   000011 402007                    MPY     9,DL
         2 003615   000000 116003                    CMPQ    0,DU
         2 003616   003620 605000 2                  TPL     s:9041+11
         2 003617   000044 036003                    ADLQ    36,DU
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:194  
         2 003620   200162 235100                    LDA     @MIN_HOLE+1,,AUTO
         2 003621   003106 061505                    CSR     bolr='003'O
         2 003622   200120 000006                    BDSC    CODE,A,AUTO              by=0,bit=0,n=6
         2 003623   200132 200011                    BDSC    TEXT_BUF,Q,AUTO          by=1,bit=0,n=9

     1382     9042    3              END;

   9042  2 003624   200101 054100                    AOS     I,,AUTO
         2 003625   200101 235100                    LDA     I,,AUTO
         2 003626   000002 115007                    CMPA    2,DL
         2 003627   003540 604400 2                  TMOZ    s:9038

     1383     9043        /**/
     1384     9044    2           TEXT_BUF.TEXT_ARRAY(3) = '-';

   9044  2 003630   055000 236003                    LDQ     23040,DU
         2 003631   200133 552140                    STBQ    TEXT_BUF+1,'40'O,AUTO

     1385     9045    2           I = 4;

   9045  2 003632   000004 235007                    LDA     4,DL
         2 003633   200101 755100                    STA     I,,AUTO

     1386     9046        /**/
     1387     9047    3           IF (CODE.MON = TRUE) THEN DO;

   9047  2 003634   200120 236100                    LDQ     CODE,,AUTO
         2 003635   400000 316007                    CANQ    -131072,DL
         2 003636   003643 600000 2                  TZE     s:9052

     1388     9048    3              TEXT_BUF.TEXT_ARRAY(I) = 'M';

   9048  2 003637   040105 100400                    MLR     fill='040'O
         2 003640   000052 000001 3                  ADSC9   42                       cn=0,n=1
         2 003641   200132 200001                    ADSC9   TEXT_BUF,A,AUTO          cn=1,n=1

     1389     9049    3              I = I + 1;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:195  

   9049  2 003642   200101 054100                    AOS     I,,AUTO

     1390     9050    3              END;

     1391     9051        /**/
     1392     9052    2           CALL BINCHAR (SUBSTR(TEXT_BUF.TEXT,I,5),CODE.ERROR);

   9052  2 003643   200120 236100                    LDQ     CODE,,AUTO
         2 003644   000003 772000                    QRL     3
         2 003645   037777 376007                    ANQ     16383,DL
         2 003646   000000 235003                    LDA     0,DU
         2 003647   200162 757100                    STAQ    @MIN_HOLE+1,,AUTO
         2 003650   200101 235100                    LDA     I,,AUTO
         2 003651   000105 301500                    BTD
         2 003652   200162 000010                    NDSC9   @MIN_HOLE+1,,AUTO        cn=0,s=lsgnf,sf=0,n=8
         2 003653   200132 230005                    NDSC9   TEXT_BUF,A,AUTO          cn=1,s=nosgn,sf=0,n=5

     1393     9053    2           I = I + 5;

   9053  2 003654   000005 236007                    LDQ     5,DL
         2 003655   200101 056100                    ASQ     I,,AUTO

     1394     9054        /**/
     1395     9055    2           TEXT_BUF.TEXT_ARRAY(I) = '-';

   9055  2 003656   200101 235100                    LDA     I,,AUTO
         2 003657   040105 100400                    MLR     fill='040'O
         2 003660   000053 000001 3                  ADSC9   43                       cn=0,n=1
         2 003661   200132 200001                    ADSC9   TEXT_BUF,A,AUTO          cn=1,n=1

     1396     9056    2           I = I + 1;

   9056  2 003662   200101 054100                    AOS     I,,AUTO

     1397     9057        /**/
     1398     9058    2           CALL BINCHAR (SUBSTR(TEXT_BUF.TEXT,I,1),CODE.SEV);
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:196  

   9058  2 003663   200120 236100                    LDQ     CODE,,AUTO
         2 003664   000007 376007                    ANQ     7,DL
         2 003665   000000 235003                    LDA     0,DU
         2 003666   200162 757100                    STAQ    @MIN_HOLE+1,,AUTO
         2 003667   200101 235100                    LDA     I,,AUTO
         2 003670   000105 301500                    BTD
         2 003671   200162 000010                    NDSC9   @MIN_HOLE+1,,AUTO        cn=0,s=lsgnf,sf=0,n=8
         2 003672   200132 230001                    NDSC9   TEXT_BUF,A,AUTO          cn=1,s=nosgn,sf=0,n=1

     1399     9059    2           I = I + 1;

   9059  2 003673   200101 054100                    AOS     I,,AUTO

     1400     9060        /**/
     1401     9061    2           CALL INSERT (TEXT_BUF.TEXT,I,TEXT_CODE_SIZE+1-I,BLANKS);

   9061  2 003674   200101 720100                    LXL0    I,,AUTO
         2 003675   777762 620010                    EAX0    -14,X0
         2 003676   777777 660003                    ERX0    -1,DU
         2 003677   200101 235100                    LDA     I,,AUTO
         2 003700   040145 100400                    MLR     fill='040'O
         2 003701   000254 000004 1                  ADSC9   BLANKS                   cn=0,n=4
         2 003702   200132 200010                    ADSC9   TEXT_BUF,A,AUTO          cn=1,n=*X0

     1402     9062        /**/
     1403     9063    2           RETURN;

   9063  2 003703   200156 221300                    LDX1  ! @VICTIM,,AUTO
         2 003704   000001 702211                    TSX2  ! 1,X1

     1404     9064    2   END;                                    /* END CODE2 TEXT                     */
     1405     9065        /**/
     1406     9066        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:197  
     1407     9067        /**/
     1408     9068        /*F*     NAME: ERRMSG_WRITE
     1409     9069        *
     1410     9070                 DESCRIPTION: ERRMSG_WRITE WRITES THE ERROR MESSAGE THROUGH ANY
     1411     9071                      USER PASSED DCBS.
     1412     9072        */
     1413     9073    1   ERRMSG_WRITE: PROC ;

   9073  2 003705   200156 741300       ERRMSG_WRITE STX1  ! @VICTIM,,AUTO

     1414     9074        /**/
     1415     9075    2           IF EMR_WFPT.V.DVBYTE.VFC# = FALSE

   9075  2 003706   200035 236100                    LDQ     EMR_WFPT+11,,AUTO
         2 003707   100000 316003                    CANQ    32768,DU
         2 003710   003722 601000 2                  TNZ     s:9083

     1416     9076    2            THEN
     1417     9077    3              DO;

     1418     9078    3               EMR_WFPT.BUF_.BUF$ = BUF$;

   9078  2 003711   200123 236100                    LDQ     BUF$,,AUTO
         2 003712   200027 756100                    STQ     EMR_WFPT+5,,AUTO

     1419     9079    3               EMR_WFPT.BUF_.BOUND = MSG_SIZE - 1;

   9079  2 003713   200106 236100                    LDQ     MSG_SIZE,,AUTO
         2 003714   000001 136007                    SBLQ    1,DL
         2 003715   000020 736000                    QLS     16
         2 003716   200026 676100                    ERQ     EMR_WFPT+4,,AUTO
         2 003717   000034 376000 xsym               ANQ     B_VECTNIL+28
         2 003720   200026 656100                    ERSQ    EMR_WFPT+4,,AUTO

     1420     9080    3               END;

   9080  2 003721   003736 710000 2                  TRA     s:9088
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:198  

     1421     9081    2            ELSE
     1422     9082    3              DO;

     1423     9083    3               EMR_WFPT.BUF_.BUF$ = ADDR(WR_VFC_BUF);

   9083  2 003722   200125 236100                    LDQ     AD_WRBUF$,,AUTO
         2 003723   200027 756100                    STQ     EMR_WFPT+5,,AUTO

     1424     9084    3               EMR_WFPT.BUF_.BOUND = MSG_SIZE;

   9084  2 003724   200106 236100                    LDQ     MSG_SIZE,,AUTO
         2 003725   000020 736000                    QLS     16
         2 003726   200026 676100                    ERQ     EMR_WFPT+4,,AUTO
         2 003727   000034 376000 xsym               ANQ     B_VECTNIL+28
         2 003730   200026 656100                    ERSQ    EMR_WFPT+4,,AUTO

     1425     9085    3               WR_VFC_BUF.TEXT = BUF$ -> MSG$SLOT; /* Put text in VFC            */

   9085  2 003731   200123 470500                    LDP0    BUF$,,AUTO
         2 003732   200125 471500                    LDP1    AD_WRBUF$,,AUTO
         2 003733   040100 100500                    MLR     fill='040'O
         2 003734   000000 000170                    ADSC9   0,,PR0                   cn=0,n=120
         2 003735   100000 200170                    ADSC9   0,,PR1                   cn=1,n=120

     1426     9086    3               END;

     1427     9087        /**/
     1428     9088    2           IF V$# -> FPT$ERRMSG.OUTDCB1 ~= 0

   9088  2 003736   000000 470400 xsym               LDP0    B$PS0$
         2 003737   000000 720100                    LXL0    0,,PR0
         2 003740   003761 600000 2                  TZE     WRITE_2
         2 003741   200146 236100                    LDQ     EMR_RESULTS,,AUTO
         2 003742   010000 316003                    CANQ    4096,DU
         2 003743   003761 601000 2                  TNZ     WRITE_2

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:199  
     1429     9089    2            AND EMR_RESULTS.OUTERR1 = FALSE THEN
     1430     9090    3            DO;

     1431     9091    3              EMR_WFPT.V.DCB# = V$# -> FPT$ERRMSG.OUTDCB1;

   9091  2 003744   200032 740100                    STX0    EMR_WFPT+8,,AUTO

     1432     9092    3              CALL M$MWRITE (EMR_WFPT) ALTRET (ERRMSG_W1ERR);

   9092  2 003745   200022 631500                    EPPR1   EMR_WFPT,,AUTO
         2 003746   200162 451500                    STP1    @MIN_HOLE+1,,AUTO
         2 003747   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 003750   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003751   000000 701000 xent               TSX1    M$MWRITE
         2 003752   003754 702000 2                  TSX2    ERRMSG_W1ERR

     1433     9093    4              DO WHILE(FALSE);

   9093  2 003753   003761 710000 2                  TRA     WRITE_2

     1434     9094    4   ERRMSG_W1ERR: EMR_RESULTS.OUTERR1 = TRUE;

   9094  2 003754   010000 236003       ERRMSG_W1ERR LDQ     4096,DU
         2 003755   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

     1435     9095    4                 EMR_RESULTS.ERRCODE1 = B$JIT$ -> B$JIT.ERR;

   9095  2 003756   000000 470400 xsym               LDP0    B$JIT$
         2 003757   000012 236100                    LDQ     10,,PR0
         2 003760   200147 756100                    STQ     EMR_RESULTS+1,,AUTO

     1436     9096    4                 END;

     1437     9097    3              END;

     1438     9098        /**/
     1439     9099    2   WRITE_2:
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:200  
     1440     9100    2           IF V$# -> FPT$ERRMSG.OUTDCB2 ~= 0

   9100  2 003761   000000 470400 xsym  WRITE_2      LDP0    B$PS0$
         2 003762   000001 220100                    LDX0    1,,PR0
         2 003763   004004 600000 2                  TZE     s:9111
         2 003764   200146 236100                    LDQ     EMR_RESULTS,,AUTO
         2 003765   004000 316003                    CANQ    2048,DU
         2 003766   004004 601000 2                  TNZ     s:9111

     1441     9101    2            AND EMR_RESULTS.OUTERR2 = FALSE THEN
     1442     9102    3            DO;

     1443     9103    3              EMR_WFPT.V.DCB# = V$# -> FPT$ERRMSG.OUTDCB2;

   9103  2 003767   200032 740100                    STX0    EMR_WFPT+8,,AUTO

     1444     9104    3              CALL M$MWRITE (EMR_WFPT) ALTRET (ERRMSG_W2ERR);

   9104  2 003770   200022 631500                    EPPR1   EMR_WFPT,,AUTO
         2 003771   200162 451500                    STP1    @MIN_HOLE+1,,AUTO
         2 003772   200162 630500                    EPPR0   @MIN_HOLE+1,,AUTO
         2 003773   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 003774   000000 701000 xent               TSX1    M$MWRITE
         2 003775   003777 702000 2                  TSX2    ERRMSG_W2ERR

     1445     9105    4              DO WHILE(FALSE);

   9105  2 003776   004004 710000 2                  TRA     s:9111

     1446     9106    4   ERRMSG_W2ERR: EMR_RESULTS.OUTERR2 = TRUE;

   9106  2 003777   004000 236003       ERRMSG_W2ERR LDQ     2048,DU
         2 004000   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

     1447     9107    4                 EMR_RESULTS.ERRCODE2 = B$JIT$ -> B$JIT.ERR;

   9107  2 004001   000000 470400 xsym               LDP0    B$JIT$
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:201  
         2 004002   000012 236100                    LDQ     10,,PR0
         2 004003   200150 756100                    STQ     EMR_RESULTS+2,,AUTO

     1448     9108    4                 END;

     1449     9109    3              END;

     1450     9110        /**/
     1451     9111    2           RETURN;

   9111  2 004004   200156 221300                    LDX1  ! @VICTIM,,AUTO
         2 004005   000001 702211                    TSX2  ! 1,X1

     1452     9112        /**/
     1453     9113    2        END ERRMSG_WRITE;
     1454     9114        /**/
     1455     9115        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:202  
     1456     9116        /**/
     1457     9117        /*F*     NAME: BUMP_BUFFER
     1458     9118        *
     1459     9119                 DESCRIPTION: BUMP_BUFFER increments the buffer pointer and
     1460     9120                      does all the necessary accounting.  This routine will
     1461     9121                      ALTRET if there is no room in the buffer and no DCBs
     1462     9122                      are left.
     1463     9123        */
     1464     9124    1   BUMP_BUFFER: PROC ALTRET;

   9124  2 004006   200154 741300       BUMP_BUFFER  STX1  ! POINT$+2,,AUTO

     1465     9125        /**/
     1466     9126    2           IF (CUR_REC < ERR_RECS)

   9126  2 004007   200076 236100                    LDQ     CUR_REC,,AUTO
         2 004010   200077 116100                    CMPQ    ERR_RECS,,AUTO
         2 004011   004020 603000 2                  TRC     s:9134

     1467     9127    2            THEN                           /* Empty slots remain                 */
     1468     9128    3            DO;

     1469     9129    3              CUR_REC = CUR_REC + 1;       /*      NEXT SLOT                     */

   9129  2 004012   000001 036007                    ADLQ    1,DL
         2 004013   200076 756100                    STQ     CUR_REC,,AUTO

     1470     9130    3              BUF$ = PINCRC(BUF$,SLOT_SIZE);

   9130  2 004014   200123 236100                    LDQ     BUF$,,AUTO
         2 004015   000036 036003                    ADLQ    30,DU
         2 004016   200123 756100                    STQ     BUF$,,AUTO

     1471     9131    3              END;

   9131  2 004017   004030 710000 2                  TRA     s:9143

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:203  
     1472     9132    2           ELSE                            /* No slots left to read in message   */
     1473     9133    3            DO;

     1474     9134    3              EMR_RESULTS.MSGCOMP = FALSE; /* Message didn't fit in buffer       */

   9134  2 004020   000054 236000 3                  LDQ     44
         2 004021   200146 356100                    ANSQ    EMR_RESULTS,,AUTO

     1475     9135    3              IF (V$# -> FPT$ERRMSG.OUTDCB1 = 0)AND

   9135  2 004022   000000 470400 xsym               LDP0    B$PS0$
         2 004023   000000 720100                    LXL0    0,,PR0
         2 004024   004030 601000 2                  TNZ     s:9143
         2 004025   000001 222100                    LDX2    1,,PR0
         2 004026   004030 601000 2                  TNZ     s:9143

     1476     9136    3                (V$# -> FPT$ERRMSG.OUTDCB2 = 0)
     1477     9137    3                THEN                       /* No place to write to               */
     1478     9138    3                  ALTRETURN;               /* Abandon ship                       */

   9138  2 004027   000000 702211                    TSX2  ! 0,X1

     1479     9139    3               ELSE                        /* DCBs still are useable             */
     1480     9140    3                  ;                        /* Write over last buffer slot        */
     1481     9141    3              END;
     1482     9142        /**/
     1483     9143    2           BUF_VECTOR.PTR$ = PINCRC(BUF$,FLAG#);

   9143  2 004030   200104 236100                    LDQ     FLAG#,,AUTO
         2 004031   000020 736000                    QLS     16
         2 004032   200123 036100                    ADLQ    BUF$,,AUTO
         2 004033   200131 756100                    STQ     BUF_VECTOR+1,,AUTO

     1484     9144    2           BUF_VECTOR.BOUND = SLOT_SIZE - FLAG# - 1;

   9144  2 004034   000167 236007                    LDQ     119,DL
         2 004035   200104 136100                    SBLQ    FLAG#,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:204  
         2 004036   000020 736000                    QLS     16
         2 004037   200130 676100                    ERQ     BUF_VECTOR,,AUTO
         2 004040   000034 376000 xsym               ANQ     B_VECTNIL+28
         2 004041   200130 656100                    ERSQ    BUF_VECTOR,,AUTO

     1485     9145    2           BUF$ -> MSG$SLOT = ' ';

   9145  2 004042   200123 470500                    LDP0    BUF$,,AUTO
         2 004043   040100 100400                    MLR     fill='040'O
         2 004044   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 004045   000000 000170                    ADSC9   0,,PR0                   cn=0,n=120

     1486     9146    2           MSG_SIZE = FLAG#;

   9146  2 004046   200104 235100                    LDA     FLAG#,,AUTO
         2 004047   200106 755100                    STA     MSG_SIZE,,AUTO

     1487     9147        /**/
     1488     9148    2           RETURN;

   9148  2 004050   200154 221300                    LDX1  ! POINT$+2,,AUTO
         2 004051   000001 702211                    TSX2  ! 1,X1

     1489     9149        /**/
     1490     9150    2        END BUMP_BUFFER;
     1491     9151        /**/
     1492     9152        %EJECT;
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:205  
     1493     9153        /**/
     1494     9154        /*F*     NAME: PUSH_RIGHT
     1495     9155        *
     1496     9156                 DESCRIPTION: PUSH_RIGHT WILL CREATE A HOLE IN THE ERROR MESSAGE
     1497     9157                      in the buffer so that a field can be substituted into it.
     1498     9158                      The field begins at char START and is COUNT long.  NOTE that
     1499     9159                      this routine assumes that START points to a TOKLEN-character token
     1500     9160                      that is to be eliminated (in favor of the thing to be
     1501     9161                      put in the hole).
     1502     9162        */
     1503     9163        /**/
     1504     9164    1   PUSH_RIGHT: PROC (START,TOKLEN,MIN_HOLE) ALTRET;

   9164  2 004052   200156 741300       PUSH_RIGHT   STX1  ! @VICTIM,,AUTO

     1505     9165    2   DCL START SBIN;                         /* Start of string to move            */
     1506     9166    2   DCL TOKLEN SBIN;                        /* Length of token to eliminate       */
     1507     9167    2   DCL MIN_HOLE SBIN;                      /* Minimum length of hole to be made  */
     1508     9168        /**/
     1509     9169    2           IF COUNT < MIN_HOLE THEN

   9169  2 004053   200161 470500                    LDP0    @MIN_HOLE,,AUTO
         2 004054   200105 236100                    LDQ     COUNT,,AUTO
         2 004055   000000 116100                    CMPQ    0,,PR0
         2 004056   004060 605000 2                  TPL     s:9172

     1510     9170    2              ALTRETURN;

   9170  2 004057   000000 702211                    TSX2  ! 0,X1

     1511     9171        /**/
     1512     9172    2           IF (MSG_SIZE + COUNT - TOKLEN) > SLOT_SIZE THEN

   9172  2 004060   200106 036100                    ADLQ    MSG_SIZE,,AUTO
         2 004061   200160 471500                    LDP1    @TOKLEN,,AUTO
         2 004062   100000 136100                    SBLQ    0,,PR1
         2 004063   000170 116007                    CMPQ    120,DL
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:206  
         2 004064   004073 604400 2                  TMOZ    s:9181

     1513     9173    3              DO;

     1514     9174    3                COUNT = SLOT_SIZE - MSG_SIZE + TOKLEN;

   9174  2 004065   100000 236100                    LDQ     0,,PR1
         2 004066   200106 136100                    SBLQ    MSG_SIZE,,AUTO
         2 004067   000170 036007                    ADLQ    120,DL
         2 004070   200105 756100                    STQ     COUNT,,AUTO

     1515     9175    3                EMR_RESULTS.TRUNCSUB = TRUE;

   9175  2 004071   000200 236003                    LDQ     128,DU
         2 004072   200146 256100                    ORSQ    EMR_RESULTS,,AUTO

     1516     9176    3                END;

     1517     9177        /**/
     1518     9178        /* Now, depending on the size of the hole to be made, we either move          */
     1519     9179        /* from right to left, left to right, or not at all.                          */
     1520     9180        /**/
     1521     9181    2           IF COUNT > TOKLEN THEN

   9181  2 004073   200105 236100                    LDQ     COUNT,,AUTO
         2 004074   100000 116100                    CMPQ    0,,PR1
         2 004075   004123 604400 2                  TMOZ    s:9191

     1522     9182    3              DO;

     1523     9183    3                J = MSG_SIZE-1;

   9183  2 004076   200106 235100                    LDA     MSG_SIZE,,AUTO
         2 004077   000001 135007                    SBLA    1,DL
         2 004100   200102 755100                    STA     J,,AUTO

     1524     9184    4                DO WHILE (J >= START+TOKLEN);
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:207  

   9184  2 004101   004115 710000 2                  TRA     s:9188

     1525     9185    4                   BUF$ -> MSG$SLOTARRAY(J+COUNT-TOKLEN) =

   9185  2 004102   200102 236100                    LDQ     J,,AUTO
         2 004103   200105 036100                    ADLQ    COUNT,,AUTO
         2 004104   200160 470500                    LDP0    @TOKLEN,,AUTO
         2 004105   000000 136100                    SBLQ    0,,PR0
         2 004106   200123 471500                    LDP1    BUF$,,AUTO
         2 004107   200102 235100                    LDA     J,,AUTO
         2 004110   040106 100505                    MLR     fill='040'O
         2 004111   100000 000001                    ADSC9   0,A,PR1                  cn=0,n=1
         2 004112   100000 000001                    ADSC9   0,Q,PR1                  cn=0,n=1

     1526     9186    4                     BUF$ -> MSG$SLOTARRAY(J);
     1527     9187    4                   J = J-1;

   9187  2 004113   000001 336007                    LCQ     1,DL
         2 004114   200102 056100                    ASQ     J,,AUTO

     1528     9188    4                   END;

   9188  2 004115   200157 470500                    LDP0    @START,,AUTO
         2 004116   200160 471500                    LDP1    @TOKLEN,,AUTO
         2 004117   000000 236100                    LDQ     0,,PR0
         2 004120   100000 036100                    ADLQ    0,,PR1
         2 004121   200102 116100                    CMPQ    J,,AUTO
         2 004122   004102 604400 2                  TMOZ    s:9185

     1529     9189    3                END;

     1530     9190        /**/
     1531     9191    2           IF (COUNT < TOKLEN) THEN

   9191  2 004123   200105 236100                    LDQ     COUNT,,AUTO
         2 004124   100000 116100                    CMPQ    0,,PR1
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:208  
         2 004125   004170 605000 2                  TPL     s:9200

     1532     9192    3              DO;

     1533     9193    4                DO J = START+TOKLEN TO MSG_SIZE - 1;

   9193  2 004126   200157 470500                    LDP0    @START,,AUTO
         2 004127   000000 236100                    LDQ     0,,PR0
         2 004130   100000 036100                    ADLQ    0,,PR1
         2 004131   200102 756100                    STQ     J,,AUTO
         2 004132   004145 710000 2                  TRA     s:9196+1

     1534     9194    4                   BUF$ -> MSG$SLOTARRAY(J+COUNT-TOKLEN) =

   9194  2 004133   200102 236100                    LDQ     J,,AUTO
         2 004134   200105 036100                    ADLQ    COUNT,,AUTO
         2 004135   200160 470500                    LDP0    @TOKLEN,,AUTO
         2 004136   000000 136100                    SBLQ    0,,PR0
         2 004137   200123 471500                    LDP1    BUF$,,AUTO
         2 004140   200102 235100                    LDA     J,,AUTO
         2 004141   040106 100505                    MLR     fill='040'O
         2 004142   100000 000001                    ADSC9   0,A,PR1                  cn=0,n=1
         2 004143   100000 000001                    ADSC9   0,Q,PR1                  cn=0,n=1

     1535     9195    4                     BUF$ -> MSG$SLOTARRAY(J);
     1536     9196    4                   END;

   9196  2 004144   200102 054100                    AOS     J,,AUTO
         2 004145   200102 236100                    LDQ     J,,AUTO
         2 004146   004133 604000 2                  TMI     s:9194
         2 004147   200106 116100                    CMPQ    MSG_SIZE,,AUTO
         2 004150   004133 602000 2                  TNC     s:9194

     1537     9197    3               CALL INSERT(BUF$ -> MSG$SLOT,MSG_SIZE-(TOKLEN-COUNT),(TOKLEN-COUNT),' '
              9197                         );

   9197  2 004151   200160 470500                    LDP0    @TOKLEN,,AUTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:209  
         2 004152   000000 236100                    LDQ     0,,PR0
         2 004153   200105 136100                    SBLQ    COUNT,,AUTO
         2 004154   200162 756100                    STQ     @MIN_HOLE+1,,AUTO
         2 004155   200106 236100                    LDQ     MSG_SIZE,,AUTO
         2 004156   200162 136100                    SBLQ    @MIN_HOLE+1,,AUTO
         2 004157   200163 756100                    STQ     @MIN_HOLE+2,,AUTO
         2 004160   000000 236100                    LDQ     0,,PR0
         2 004161   200105 136100                    SBLQ    COUNT,,AUTO
         2 004162   200123 471500                    LDP1    BUF$,,AUTO
         2 004163   000000 620006                    EAX0    0,QL
         2 004164   200163 235100                    LDA     @MIN_HOLE+2,,AUTO
         2 004165   040145 100400                    MLR     fill='040'O
         2 004166   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 004167   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0

     1538     9198    3                END;

     1539     9199        /**/
     1540     9200    2           MSG_SIZE = MSG_SIZE + COUNT - TOKLEN;

   9200  2 004170   200106 236100                    LDQ     MSG_SIZE,,AUTO
         2 004171   200105 036100                    ADLQ    COUNT,,AUTO
         2 004172   200160 470500                    LDP0    @TOKLEN,,AUTO
         2 004173   000000 136100                    SBLQ    0,,PR0
         2 004174   200106 756100                    STQ     MSG_SIZE,,AUTO

     1541     9201        /**/
     1542     9202    2           RETURN;

   9202  2 004175   200156 221300                    LDX1  ! @VICTIM,,AUTO
         2 004176   000001 702211                    TSX2  ! 1,X1

INIT_RFPT
 Sect OctLoc
   1     000   000005 777640   000010 006000   000000 177640   000000 006014    ................
   1     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     010   000000 500000   000000 000000   000000 000000   000000 000000    ................
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:210  
   1     014   000000 000000   000000 000000                                    ........

INIT_WFPT
 Sect OctLoc
   1     016   000003 777640   000026 006000   000000 177640   000000 006014    ................
   1     022   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     026   000000 400400   000000 000000   000000 000000   000000 000000    ................

INIT_PRECFPT
 Sect OctLoc
   1     032   000003 777640   000040 006000   000000 177640   000000 006014    ..... ..........
   1     036   000000 177640   000000 006014   000000 200000   000000 000000    ................
   1     042   000000 000000   0***** ******                                    ........

INIT_UNFIDFPT
 Sect OctLoc
   1     044   000001 777640   000070 006000   000000 177640   000000 006014    .....8..........
   1     050   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     070*  000000 000000   0***** ******                                    ........

SUBTYPE_TBL
 Sect OctLoc
   1     072   106116 040040   101103 040040   104103 040040   123116 040040    FN  AC  DC  SN
   1     076   124101 040040   125061 040040   125062 040040   125063 040040    TA  U1  U2  U3
   1     102   125106 040040                                                    UF

TYC_NAME
 Sect OctLoc
   1     103   040040 040040   040040 040040   105107 126040   040040 040040            EGV
   1     107   117120 105122   040040 040040   105117 124040   040040 040040    OPER    EOT
   1     113   102117 124040   040040 040040   102117 106040   040040 040040    BOT     BOF
   1     117   102114 116113   124120 040040   105117 106040   040040 040040    BLNKTP  EOF
   1     123   114104 040040   040040 040040   111117 105122   122040 040040    LD      IOERR
   1     127   104111 040040   040040 040040   105117 104040   040040 040040    DI      EOD
   1     133   115124 122101   120040 040040   104111 123103   040040 040040    MTRAP   DISC
   1     137   104101 103124   040040 040040   124111 115117   040040 040040    DACT    TIMO
   1     143   120122 117124   040040 040040   106122 101127   040040 040040    PROT    FRAW
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:211  
   1     147   114101 123124   040040 040040   103104 101114   122124 040040    LAST    CDALRT
   1     153   130124 122101   122104 040040   103107 113105   131126 040040    XTRARD  CGKEYV
   1     157   103107 114127   122126 040040   103107 106125   114114 040040    CGLWRV  CGFULL
   1     163   103107 103122   103127 040040   103107 103127   122126 040040    CGCRCW  CGCWRV

TYC_MASK
 Sect OctLoc
   1     167   000000 000000   400000 000000   200000 000000   100000 000000    ............@...
   1     173   040000 000000   020000 000000   010000 000000   004000 000000     ...............
   1     177   002000 000000   001000 000000   000400 000000   000200 000000    ................
   1     203   000100 000000   000040 000000   000020 000000   000010 000000    .@... ..........
   1     207   000004 000000   000002 000000   000001 000000   000000 400000    ................
   1     213   000000 200000   000000 100000   000000 040000   000000 020000    ......@... .....
   1     217   000000 010000   000000 004000                                    ........

TYC_N_LEN
 Sect OctLoc
   1     221   000000 000000   000000 000003   000000 000004   000000 000003    ................
   1     225   000000 000003   000000 000003   000000 000006   000000 000003    ................
   1     231   000000 000002   000000 000005   000000 000002   000000 000003    ................
   1     235   000000 000005   000000 000004   000000 000004   000000 000004    ................
   1     241   000000 000004   000000 000004   000000 000004   000000 000006    ................
   1     245   000000 000006   000000 000006   000000 000006   000000 000006    ................
   1     251   000000 000006   000000 000006                                    ........

FLAGBUF
 Sect OctLoc
   1     253   052052 052052                                                    ****

BLANKS
 Sect OctLoc
   1     254   040040 040040

B$PS10
 Sect OctLoc
   1     255   000000 000012                                                    ....

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:212  
SYSV
 Sect OctLoc
   1     256   050002 006000                                                    (...

(unnamed)
 Sect OctLoc
   1     257   072105 122122   115123 107040   072072 072105   122122 115123    :ERRMSG :::ERRMS
   1     263   107040 040040   072123 131123   124131 103075   104120 040040    G   :SYSTYC=DP
   1     267   114124 040040   106124 040040   115124 040040                    LT  FT  MT

(unnamed)
 Sect OctLoc
   3     000   000003 006000   000004 006000   777777 777770   000014 006000    ................
   3     004   000000 006003   000077 777640   000005 777640   000003 777640    .....?..........
   3     010   677777 777777   000001 777640   000004 006000   000002 006000    ................
   3     014   000002 006000   000003 006000   000000 006000   777777 600037    ................
   3     020   777007 777777   000005 006000   000007 006000   000040 040040    .............
   3     024   775777 777777   000006 006000   040040 040040   040040 040040    ........
   3     030   136040 040040   777777 377777   777777 577777   054040 040040    ^   ........,
   3     034   777777 700777   777000 077777   000777 700000   000013 006000    ......?.........
   3     040   777777 400007   045040 040040   114040 040040   056040 040040    ....%   L   .
   3     044   000005 006000   000003 006000   000007 777770   057040 040040    ............/
   3     050   000012 577640   000132 200000   115040 040040   055040 040040    .....Z..M   -
   3     054   757777 777777                                                    ....
     1543     9203        /**/
     1544     9204    2        END PUSH_RIGHT;
     1545     9205        /**/
     1546     9206    1   END EMR$ERRMSG;

PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:213  
--  Include file information  --

   B_MACROS_C.:E05TOU  is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
   UM_ERRORS_C.:E05TOU  is referenced.
   UM$CP6V_C.:E05TOU  is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   FM$SET.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure EMR$ERRMSG.
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:214  

 **** Variables and constants ****

  ****  Section 001 RoData EMR$ERRMSG

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   255-0-0/b STRC        r     1 B$PS10                   255-0-0/w PTR         r     1 B$PS10$
   254-0-0/w CHAR(4)     r     1 BLANKS                   253-0-0/w CHAR(4)     r     1 FLAGBUF
    32-0-0/d STRC(360)   r     1 INIT_PRECFPT               0-0-0/d STRC(504)   r     1 INIT_RFPT
    44-0-0/d STRC(792)   r     1 INIT_UNFIDFPT             16-0-0/d STRC(432)   r     1 INIT_WFPT
    72-0-0/w CHAR(2)     r     1 SUBTYPE_TBL(0:8)
   256-0-0/w BIT         r     1 SYSV                     256-0-0/w BIT         r     1 SYSVA(0:35)
   167-0-0/b BIT         r     1 TYC_MASK(0:25)
   103-0-0/c CHAR(8)     r     1 TYC_NAME(0:25)
   221-0-0/w SBIN        r     1 TYC_N_LEN(0:25)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   161-0-0/w PTR         r     1 @MIN_HOLE                155-0-0/w PTR         r     1 @SAMPLE
   157-0-0/w PTR         r     1 @START                   160-0-0/w PTR         r     1 @TOKLEN
   156-0-0/w PTR         r     1 @VICTIM                  126-0-0/w PTR         r     1 AD_PRKEY$
   127-0-0/w PTR         r     1 AD_RDKEY$                125-0-0/w PTR         r     1 AD_WRBUF$
   113-0-0/b BIT         r     1 ALTCODE_EXISTS           114-0-0/b BIT         r     1 ALTRET_FLAG
   123-0-0/w PTR         r     1 BUF$                     130-0-0/b STRC(72)    r     1 BUF_VECTOR
   120-0-0/w STRC        r     1 CODE                     120-0-0/w STRC        r     1 CODE_
   120-0-0/w CHAR(4)     r     1 CODE_CHAR                105-0-0/w SBIN        r     1 COUNT
   107-0-0/w SBIN        r     1 CPH_CLMN                  76-0-0/w UBIN        r     1 CUR_REC
   121-0-0/w PTR         r     1 DCB$                      36-0-0/d STRC(360)   r     1 EMR_PRECFPT
   146-0-0/d STRC(144)   r     1 EMR_RESULTS              146-0-0/d CHAR(16)    r     1 EMR_RESULTS_CHAR
     4-0-0/d STRC(504)   r     1 EMR_RFPT                  50-0-0/d STRC(792)   r     1 EMR_UNFIDFPT
    22-0-0/d STRC(432)   r     1 EMR_WFPT                 122-0-0/w UBIN        r     1 ERR_DCB
    77-0-0/w UBIN        r     1 ERR_RECS                 104-0-0/w UBIN        r     1 FLAG#
   101-0-0/w SBIN        r     1 I                        102-0-0/w SBIN        r     1 J
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:215  
   103-0-0/w SBIN        r     1 K                        116-0-0/w CHAR        r     1 LANG
    *0-0-0/w SBIN        r     1 MIN_HOLE                 115-0-0/b STRC(9)     r     1 MSG_FLGS
   115-0-0/c CHAR        r     1 MSG_FLGS_CHAR            106-0-0/w UBIN        r     1 MSG_SIZE
   112-0-0/b BIT         r     1 NATIVE_LANG              152-0-0/w PTR         r     1 POINT$
   124-0-0/w PTR         r     1 POOLBUF$                 100-0-0/w UBIN        r     1 REC_COUNT
    *0-0-0/w STRC        r     1 SAMPLE                    *0-0-0/w SBIN        r     1 START
   117-0-0/w CHAR(2)     r     1 SUB_CODE                 132-0-0/c STRC(396)   r     1 TEXT_BUF
    *0-0-0/w SBIN        r     1 TOKLEN                   110-0-0/w SBIN        r     1 UNSAT_SUB
   111-0-0/b BIT         r     1 USER_FILE                 *0-0-0/w STRC        r     1 VICTIM
   145-0-0/w UBIN        r     1 V_BUF_SIZE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$M$LM$
     0-0-0/w PTR         r     1 B$M$STAR$                  0-0-0/w PTR         r     1 B$PS0$
     0-0-0/w PTR         r     1 B$PS1$                     0-0-0/w PTR         r     1 B$PS2$
     0-0-0/w PTR         r     1 B$PS3$                     0-0-0/w PTR         r     1 B$PS4$
     0-0-0/w PTR         r     1 B$PS5$                     0-0-0/w PTR         r     1 B$PS6$
     0-0-0/w PTR         r     1 B$PS7$                     0-0-0/w PTR         r     1 B$PS8$
     0-0-0/w PTR         r     1 B$PS9$                     0-0-0/w PTR         r     1 B$ROSEG$
     0-0-0/d STRC(432)   r     1 B_MPT                      0-0-0/w PTR         r     1 FM$SET$
     0-0-0/w PTR         r     1 M$STAR$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(2448)  r     1 B$EXCFR
     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/d STRC(3024)  r     1 B$ROSEG
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/c CHAR        r     1 CHAR$1
     0-0-0/c CHAR(4)     r     1 CODE$CHAR                  0-0-0/d STRC(144)   r     1 EMR$RESULTS
     0-0-0/d CHAR(16)    r     1 EMR$RESULTS_CHAR           0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/w STRC(288)   r     1 FM$SET(0:0)                0-0-0/d STRC(144)   r     1 FPT$ERRMSG
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:216  
     0-0-0/c CHAR(120)   r     1 MSG$SLOT
     0-0-0/c CHAR        r     1 MSG$SLOTARRAY(0:119)
     0-0-0/d STRC(2304)  r     1 PRECKEY                    0-0-0/d STRC(2304)  r     1 READKEY
     0-0-0/c STRC(288)   r     1 TEXT$BUF                   0-0-0/c CHAR(8)     r     1 VLP$ACCT
     0-0-0/c STRC(288)   r     1 VLP$NAME                   0-0-0/c CHAR(8)     r     1 VLP$PASS
     0-0-0/w STRC(1089)  r     1 WR_VFC_BUF


   Procedure EMR$ERRMSG requires 2175 words for executable code.
   Procedure EMR$ERRMSG requires 118 words of local(AUTO) storage.

    No errors detected in file EMR$ERRMSG.:E05TSI    .
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:217  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:218  
          MINI XREF LISTING

AD_PRKEY$
      7940**DCL      7991--IMP-PTR  8112<<ASSIGN   8113>>ASSIGN   8257>>ASSIGN   8610>>IF       8610>>IF
      8610>>IF       8610>>IF       8617>>IF       8620>>ASSIGN   8636>>ASSIGN   8637>>ASSIGN   8638>>ASSIGN
      8639>>ASSIGN   8643>>IF       8643>>IF       8643>>IF       8643>>IF       8656>>IF       8656>>IF
      8656>>IF       8656>>IF       8666>>ASSIGN   8667>>ASSIGN   8668>>ASSIGN   8669>>ASSIGN   8670>>ASSIGN
      8674>>IF       8674>>IF       8674>>IF       8674>>IF       8687>>IF       8687>>IF       8687>>IF
      8687>>IF
AD_RDKEY$
      7941**DCL      8004--IMP-PTR  8113<<ASSIGN   8238>>ASSIGN   8482>>ASSIGN   8483>>ASSIGN   8484>>ASSIGN
      8524>>ASSIGN
AD_WRBUF$
      7939**DCL      7988--IMP-PTR  8111<<ASSIGN   8112>>ASSIGN   8248>>ASSIGN   9083>>ASSIGN   9085>>ASSIGN
ALTCODE_EXISTS
      7911**DCL      8163<<ASSIGN   8165<<ASSIGN   8444>>IF       8451<<ASSIGN   8707>>IF       8715<<ASSIGN
ALTRET_FLAG
      7912**DCL      8117<<ASSIGN   8729<<ASSIGN   8747>>IF
B$ALT.CODE
      8071**DCL      8071--REDEF    8072--REDEF    8072--REDEF
B$ALT.DCB#
      8072**DCL      8158>>ASSIGN
B$ALT.ERR
      8072**DCL      8156>>ASSIGN
B$ALT.ERR.ERR#
      8073**DCL      8073--REDEF
B$ALT.EVID
      8072**DCL      8072--REDEF    8072--REDEF
B$EXCFR.ALTEMPTY
      8078**DCL      8151>>IF
B$EXCFR.ASL
      8078**DCL      8078--REDEF
B$EXCFR.ERR
      8092**DCL      8146>>ASSIGN
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:219  
B$EXCFR.ERR.ERR#
      8092**DCL      8092--REDEF
B$EXCFR.EVID
      8091**DCL      8091--REDEF    8092--REDEF
B$EXCFR.IR
      8079**DCL      8079--REDEF
B$EXCFR.PREVSZ
      8078**DCL      8078--REDEF
B$EXCFR.SUBC
      8090**DCL      8090--REDEF    8091--REDEF    8091--REDEF
B$JIT.CPFLAGS1.SLEAZE
      6817**DCL      6817--REDEF
B$JIT.DCB$
      6891**DCL      8196<<ASSIGN   8214<<ASSIGN   8304<<ASSIGN   8320<<ASSIGN   8702<<ASSIGN   8761<<ASSIGN
B$JIT.ERR
      6723**DCL      8203>>ASSIGN   8221>>ASSIGN   8759<<ASSIGN   9095>>ASSIGN   9107>>ASSIGN
B$JIT.ERR.CODE
      6724**DCL      8752<<ASSIGN
B$JIT.ERR.FCG
      6723**DCL      8749<<ASSIGN
B$JIT.ERR.MID
      6724**DCL      6724--REDEF    8750<<ASSIGN
B$JIT.ERR.MON
      6724**DCL      8751<<ASSIGN
B$JIT.ERR.SEV
      6724**DCL      8753<<ASSIGN
B$JIT.FACCN
      6723**DCL      8895>>IF       8922>>ASSIGN
B$JIT.JRESPEAK
      6885**DCL      6886--REDEF
B$JIT.LANG
      6859**DCL      8365>>ASSIGN
B$JIT.ORIGINATOR_PORT.FROM_CR
      6994**DCL      6994--REDEF    6995--REDEF
B$JIT.PNR
      6898**DCL      6898--REDEF
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:220  
B$JIT.TSLINE
      6992**DCL      6993--REDEF
B$JIT$
      7785**DCL      6718--IMP-PTR  8196>>ASSIGN   8203>>ASSIGN   8214>>ASSIGN   8221>>ASSIGN   8304>>ASSIGN
      8320>>ASSIGN   8365>>ASSIGN   8702>>ASSIGN   8749>>ASSIGN   8750>>ASSIGN   8751>>ASSIGN   8752>>ASSIGN
      8753>>ASSIGN   8759>>ASSIGN   8761>>ASSIGN   8895>>IF       8922>>ASSIGN   9095>>ASSIGN   9107>>ASSIGN
B$M$LM$
      7934**DCL      8388>>ASSIGN   8390>>IF       8412>>IF
B$M$STAR$
      7932**DCL      7933--REDEF
B$PS0$
      7788**DCL      8124>>ASSIGN   8125>>IF       8128>>DOCASE   8135>>IF       8178>>CALL     8178>>CALL
      8188>>IF       8188>>IF       8193>>IF       8195>>ASSIGN   8196>>ASSIGN   8199>>IF       8206>>IF
      8206>>IF       8211>>IF       8213>>ASSIGN   8214>>ASSIGN   8217>>IF       8225>>ASSIGN   8244>>IF
      8248>>ASSIGN   8277>>IF       8364>>IF       8366>>ASSIGN   8423>>IF       8447>>IF       8493>>IF
      8495>>IF       8501>>ASSIGN   8502>>ASSIGN   8532>>IF       8532>>IF       8558>>IF       8570>>IF
      8599>>IF       8698>>IF       8710>>IF       8719>>IF       8824>>IF       8889>>IF       8911>>IF
      8930>>IF       8937>>IF       9088>>IF       9091>>ASSIGN   9100>>IF       9103>>ASSIGN   9135>>IF
      9135>>IF
B$PS1$
      7789**DCL      8137>>ASSIGN   8139>>CALL
B$PS10
      7774**DCL      7777--REDEF
B$PS10$
      7777**DCL      8448>>ASSIGN   8450>>CALL     8712>>ASSIGN   8714>>CALL
B$PS2$
      7790**DCL      8263>>ASSIGN
B$PS3$
      7791**DCL      8325>>ASSIGN   8327>>ASSIGN
B$PS4$
      7792**DCL      8382>>ASSIGN
B$PS5$
      7793**DCL      8331>>ASSIGN
B$PS6$
      7794**DCL      8986>>ASSIGN
B$PS7$
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:221  
      7795**DCL      8990>>ASSIGN
B$PS8$
      7796**DCL      8994>>ASSIGN
B$PS9$
      7797**DCL      8735>>ASSIGN
B$ROSEG.NUMDCBS
      7012**DCL      8170>>IF
B$ROSEG$
      7786**DCL      8170>>IF
B$TCB.ALT$
      8067**DCL      8149>>ASSIGN   8154>>ASSIGN
B$TCB.CURRSZ
      8067**DCL      8141>>IF
B$TCB.STK$
      8067**DCL      8144>>ASSIGN
BAD_MSG_FILE
      8478**LABEL    8400--CALLALT
BAD_OUTDCB1
      8201**LABEL    8198--CALLALT
BAD_OUTDCB2
      8219**LABEL    8216--CALLALT
BLANKS
      7773**DCL      8885>>CALLBLT  9061>>CALLBLT
BUF$
      7937**DCL      8263<<ASSIGN   8284>>DOWHILE  8294>>CALLBLT  8309>>ASSIGN   8311>>ASSIGN   8465>>ASSIGN
      8468>>CALLBLT  8500>>ASSIGN   8501>>ASSIGN   8510>>ASSIGN   8511>>ASSIGN   8563>>CALLBLT  8575>>CALLBLT
      8581>>CALLBLT  8586>>IF       8589>>CALLBLT  8780>>CALLBLT  8785>>CALLBLT  8787>>CALLBLT  8792>>CALLBLT
      8831>>CALLBLT  8834>>IF       8843>>ASSIGN   8858>>CALLBLT  8858>>CALLBLT  8866>>CALLBLT  8866>>CALLBLT
      8869>>CALLBLT  8869>>CALLBLT  8885>>CALLBLT  8908>>CALLBLT  8927>>CALLBLT  8934>>CALLBLT  8952>>CALLBLT
      8982>>CALLBLT  9008>>CALLBLT  9024>>CALLBLT  9078>>ASSIGN   9085>>ASSIGN   9130<<ASSIGN   9130>>ASSIGN
      9143>>ASSIGN   9145>>ASSIGN   9185>>ASSIGN   9185>>ASSIGN   9194>>ASSIGN   9194>>ASSIGN   9197>>CALLBLT
BUF_ERR
      8270**LABEL    8264--CALLALT
BUF_VECTOR
      7942**DCL      8486>>ASSIGN   8543>>ASSIGN
BUF_VECTOR.BOUND
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:222  
      7943**DCL      8313<<ASSIGN   9144<<ASSIGN
BUF_VECTOR.FLAGSV
      7944**DCL      8312<<ASSIGN
BUF_VECTOR.PTR$
      7946**DCL      8311<<ASSIGN   8467>>ASSIGN   8519>>ASSIGN   8521>>ASSIGN   8552>>ASSIGN   8553>>ASSIGN
      9143<<ASSIGN
BUMP_BUFFER
      9124**PROC     8541--CALL     8574--CALL
B_MPT.AS
      7835**DCL      7838--REDEF
B_MPT.ASDESC
      7867**DCL      7871--REDEF
B_MPT.ECCB
      7850**DCL      7853--REDEF
B_MPT.ECCBDESC
      7885**DCL      7889--REDEF
B_MPT.LS
      7830**DCL      7833--REDEF
B_MPT.LSDESC
      7861**DCL      7865--REDEF
B_MPT.PS
      7840**DCL      7843--REDEF
B_MPT.PSDESC
      7873**DCL      7877--REDEF
B_MPT.SS
      7825**DCL      7828--REDEF
B_MPT.SSDESC
      7855**DCL      7859--REDEF
B_MPT.TCB
      7845**DCL      7848--REDEF
B_MPT.TCB$
      7848**DCL      8141>>IF       8144>>ASSIGN   8145<>CALL     8149>>ASSIGN   8150<>CALL     8154>>ASSIGN
      8155<>CALL
B_MPT.TCBDESC
      7879**DCL      7883--REDEF
CHAR$1
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:223  
      8055**DCL      8467<<ASSIGN   8519>>ASSIGN   8521<<ASSIGN   8552>>ASSIGN   8553<<ASSIGN
CODE
      7920**DCL      7925--REDEF    7931--REDEF    8146<<ASSIGN   8156<<ASSIGN   8483>>ASSIGN   8637>>ASSIGN
      8667>>ASSIGN
CODE.ERROR
      7923**DCL      8610>>IF       8643>>IF       8656>>IF       8674>>IF       8687>>IF       9052>>CALLBLT
CODE.FCGMID
      7921**DCL      8344>>IF       8344>>IF       8344>>IF       8344>>IF       8344>>IF       8344>>IF
      8354>>ASSIGN   8355>>IF       8356>>ASSIGN   8358>>ASSIGN   9038>>IF       9039>>IF       9040>>ASSIGN
      9041>>ASSIGN
CODE.MON
      7922**DCL      8342>>IF       8385>>IF       8610>>IF       8643>>IF       8656>>IF       8674>>IF
      8687>>IF       9047>>IF
CODE.SEV
      7924**DCL      8147<<ASSIGN   8157<<ASSIGN   9058>>CALLBLT
CODE$CHAR
      8052**DCL      8137>>ASSIGN   8139<>CALL     8448>>ASSIGN   8450<>CALL     8712>>ASSIGN   8714<>CALL
CODE_.FCG
      7926**DCL      8610>>IF       8643>>IF       8656>>IF
CODE_.MID
      7927**DCL      8610>>IF
CODE_CHAR
      7931**DCL      8137<<ASSIGN   8139<>CALL     8448<<ASSIGN   8450<>CALL     8712<<ASSIGN   8714<>CALL
CODE_ONLY
      8461**LABEL    8721--GOTO
COUNT
      7905**DCL      8292<<ASSIGN   8561<<ASSIGN   8563>>CALLBLT  8778<<ASSIGN   8780>>CALLBLT  8837<<ASSIGN
      8897<<ASSIGN   8898>>DOWHILE  8898>>DOWHILE  8900<<ASSIGN   8900>>ASSIGN   8902>>CALLBLT  8904>>ASSIGN
      8906<<ASSIGN   8908>>CALLBLT  8919<<ASSIGN   8923>>DOWHILE  8923>>DOWHILE  8924<<ASSIGN   8924>>ASSIGN
      8927>>CALLBLT  8932<<ASSIGN   8934>>CALLBLT  8940<<ASSIGN   8946>>DOWHILE  8946>>DOWHILE  8947<<ASSIGN
      8947>>ASSIGN   8952>>CALLBLT  8980<<ASSIGN   8982>>CALLBLT  8996<>CALL     8998>>IF       9005<<ASSIGN
      9006>>ASSIGN   9008>>CALLBLT  9018<<ASSIGN   9019>>DOWHILE  9019>>DOWHILE  9021<<ASSIGN   9021>>ASSIGN
      9024>>CALLBLT  9026>>ASSIGN   9169>>IF       9172>>IF       9174<<ASSIGN   9181>>IF       9185>>ASSIGN
      9191>>IF       9194>>ASSIGN   9197>>CALLBLT  9197>>CALLBLT  9200>>ASSIGN
CPH_CLMN
      7907**DCL      8828<<ASSIGN   8850>>IF       8852<<ASSIGN   8858>>CALLBLT  8858>>CALLBLT  8861>>ASSIGN
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:224  
      8862>>ASSIGN   8866>>CALLBLT  8866>>CALLBLT  8866>>CALLBLT  8866>>CALLBLT  8876<<ASSIGN
CUR_REC
      7898**DCL      8120<<ASSIGN   9126>>IF       9129<<ASSIGN   9129>>ASSIGN
DCB$
      7935**DCL      8173<<ASSIGN   8175<<ASSIGN   8570>>IF       8578>>IF       8889>>IF       8889>>IF
      8889>>IF       8892>>ASSIGN   8894>>ASSIGN   8895>>IF       8895>>IF       8898>>DOWHILE  8898>>DOWHILE
      8902>>CALLBLT  8911>>IF       8915>>IF       8915>>IF       8920>>ASSIGN   8930>>IF       8932>>ASSIGN
      8934>>CALLBLT  8934>>CALLBLT  8937>>IF       8939>>IF       8939>>IF       8941>>IF       8943>>ASSIGN
      8945>>ASSIGN   8955>>IF       8955>>IF       8958>>IF       8962>>IF       8965>>IF       8968>>CALLBLT
      8975>>IF       8976>>CALLBLT  8976>>CALLBLT  8978>>ASSIGN   9011>>IF
DFLT_FILEACCT
      8381**LABEL    8381--CALLALT  8418--GOTO
DFLT_FILENAME
      8334**LABEL    8323--CALLALT  8439--GOTO     8452--GOTO     8704--GOTO
DRIBBLE_ALT
      8226**LABEL    8233--CALLALT
EMR$FEP2HOST
       200**DCL-ENT  8139--CALL     8450--CALL     8714--CALL
EMR$RESULTS
      8039**DCL      8050--REDEF
EMR$RESULTS_CHAR
      8050**DCL      8735<<ASSIGN
EMR_PRECFPT
      7601**DCL      8254<<ASSIGN   8507<>CALL     8608<>CALL     8623<>CALL     8641<>CALL     8654<>CALL
      8672<>CALL     8685<>CALL
EMR_PRECFPT.KEY_
      7601**DCL      8257<<ASSIGN
EMR_PRECFPT.V
      7603**DCL      8255--ASSIGN
EMR_PRECFPT.V.DCB#
      7603**DCL      8256<<ASSIGN
EMR_PRECFPT.V.KEYS#
      7604**DCL      8505<<ASSIGN   8605<<ASSIGN   8621<<ASSIGN   8634<<ASSIGN   8651<<ASSIGN   8664<<ASSIGN
      8682<<ASSIGN
EMR_PRECFPT.V.N#
      7607**DCL      8506<<ASSIGN   8606<<ASSIGN   8620<<ASSIGN   8635<<ASSIGN   8652<<ASSIGN   8665<<ASSIGN
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:225  
      8683<<ASSIGN
EMR_PRECFPT.V_
      7601**DCL      8255<<ASSIGN
EMR_RESULTS
      7966**DCL      7977--REDEF    8107<<ASSIGN
EMR_RESULTS.ALTMSG
      7967**DCL      8463<<ASSIGN   8629<<ASSIGN
EMR_RESULTS.BADCALL
      7966**DCL      8132<<ASSIGN   8270<<ASSIGN
EMR_RESULTS.BADPOINT
      7969**DCL      8497<<ASSIGN
EMR_RESULTS.BADUSUB
      7970**DCL      9002<<ASSIGN
EMR_RESULTS.BUFERR
      7968**DCL      8271<<ASSIGN
EMR_RESULTS.CODEUSED
      7974**DCL      8524<<ASSIGN
EMR_RESULTS.ERRCODE1
      7971**DCL      8178<>CALL     8203<<ASSIGN   9095<<ASSIGN
EMR_RESULTS.ERRCODE1.ERR#
      7972**DCL      8182>>IF
EMR_RESULTS.ERRCODE2
      7972**DCL      8178<>CALL     8221<<ASSIGN   9107<<ASSIGN
EMR_RESULTS.ERRCODE2.ERR#
      7973**DCL      8185>>IF
EMR_RESULTS.INERR
      7969**DCL      8546<<ASSIGN
EMR_RESULTS.MSGCOMP
      7967**DCL      8461<<ASSIGN   8516<<ASSIGN   9134<<ASSIGN
EMR_RESULTS.NNATIVE
      7968**DCL      8371<<ASSIGN   8428<<ASSIGN
EMR_RESULTS.NOFILE
      7966**DCL      8459<<ASSIGN   8478<<ASSIGN
EMR_RESULTS.NOMSG
      7966**DCL      8462<<ASSIGN   8724<<ASSIGN
EMR_RESULTS.OUTERR1
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:226  
      7967**DCL      8184<<ASSIGN   8188>>IF       8202<<ASSIGN   9088>>IF       9094<<ASSIGN
EMR_RESULTS.OUTERR2
      7968**DCL      8187<<ASSIGN   8206>>IF       8220<<ASSIGN   9100>>IF       9106<<ASSIGN
EMR_RESULTS.RECCNT
      7970**DCL      8732<<ASSIGN
EMR_RESULTS.TRUNCSUB
      7969**DCL      9175<<ASSIGN
EMR_RESULTS_CHAR
      7977**DCL      8735>>ASSIGN
EMR_RFPT
      7535**DCL      8237<<ASSIGN   8488<>CALL     8512<>CALL     8544<>CALL     8627<>CALL
EMR_RFPT.BUF_
      7537**DCL      8486<<ASSIGN   8543<<ASSIGN
EMR_RFPT.KEY_
      7535**DCL      8238<<ASSIGN
EMR_RFPT.STATION_
      7538**DCL      7539--REDEF
EMR_RFPT.V
      7539**DCL      8239--ASSIGN
EMR_RFPT.V.DCB#
      7539**DCL      8240<<ASSIGN
EMR_RFPT.V.DVBYTE.REREAD#
      7550**DCL      7550--REDEF
EMR_RFPT.V.INDX#
      7548**DCL      7548--REDEF
EMR_RFPT.V.KEYS#
      7540**DCL      8487<<ASSIGN   8509<<ASSIGN   8517<<ASSIGN   8626<<ASSIGN
EMR_RFPT.V_
      7535**DCL      8239<<ASSIGN
EMR_UNFIDFPT
      7623**DCL      8259<<ASSIGN   9015<>CALL
EMR_UNFIDFPT.TEXTFID_
      7623**DCL      9013<<ASSIGN
EMR_UNFIDFPT.V
      7627**DCL      8260--ASSIGN
EMR_UNFIDFPT.V.DCB#
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:227  
      7627**DCL      9012<<ASSIGN
EMR_UNFIDFPT.V_
      7623**DCL      8260<<ASSIGN
EMR_WFPT
      7575**DCL      8242<<ASSIGN   9092<>CALL     9104<>CALL
EMR_WFPT.BUF_.BOUND
      7575**DCL      9079<<ASSIGN   9084<<ASSIGN
EMR_WFPT.BUF_.BUF$
      7577**DCL      9078<<ASSIGN   9083<<ASSIGN
EMR_WFPT.STATION_
      7577**DCL      7577--REDEF
EMR_WFPT.V
      7578**DCL      8243--ASSIGN
EMR_WFPT.V.DCB#
      7578**DCL      9091<<ASSIGN   9103<<ASSIGN
EMR_WFPT.V.DVBYTE.VFC#
      7584**DCL      7584--REDEF    8247<<ASSIGN   8252<<ASSIGN   9075>>IF
EMR_WFPT.V_
      7575**DCL      8243<<ASSIGN
ERRMSG_1
      8493**LABEL    8630--GOTO
ERRMSG_2
      8527**LABEL    8297--GOTO
ERRMSG_ALTRTN
      8729**LABEL    8133--GOTO     8272--GOTO     8498--GOTO     8507--CALLALT  8512--CALLALT  8531--CALLALT
      8556--CALLALT  8725--GOTO
ERRMSG_BAILOUT
      8735**LABEL    8110--CALLALT  8262--CALLALT  8479--GOTO     8508--CALLALT  8513--CALLALT
ERRMSG_CODE2TEXT
      9036**PROC     8466--CALL     8774--CALL
ERRMSG_EXIT
      8732**LABEL    8471--GOTO     8541--CALLALT  8547--GOTO     8574--CALLALT  8594--GOTO
ERRMSG_KRERR
      8599**LABEL    8488--CALLALT
ERRMSG_OPENED
      8469**LABEL    8404--GOTO
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:228  
ERRMSG_SUB
      8822**PROC     8531--CALL     8556--CALL
ERRMSG_W1ERR IN PROCEDURE ERRMSG_WRITE
      9094**LABEL    9092--CALLALT
ERRMSG_W2ERR IN PROCEDURE ERRMSG_WRITE
      9106**LABEL    9104--CALLALT
ERRMSG_WRITE
      9073**PROC     8470--CALL     8503--CALL     8537--CALL     8565--CALL     8590--CALL     8790--CALL
ERR_DCB
      7936**DCL      8124<<ASSIGN   8158<<ASSIGN   8170>>IF       8170>>IF       8175--ASSIGN   9012>>ASSIGN
ERR_RECS
      7899**DCL      8265<<ASSIGN   8267>>IF       8275<<ASSIGN   8275>>ASSIGN   9126>>IF
F$DCB.ACCT
       232**DCL      8382<<ASSIGN   8388<<ASSIGN   8388>>ASSIGN   8389>>IF       8394<<ASSIGN   8412>>IF
      8412>>IF       8412>>IF       8416>>IF       8895>>IF       8895>>IF       8898--DOWHILE  8898>>DOWHILE
      8902>>CALLBLT  8919--ASSIGN   8920>>ASSIGN
F$DCB.ACS
       239**DCL      8317<<ASSIGN
F$DCB.ACTPOS
       247**DCL       247--REDEF
F$DCB.AMFLG
       251**DCL      8319<<ASSIGN
F$DCB.ARS
       222**DCL       222--REDEF    8518>>ASSIGN   8550>>ASSIGN
F$DCB.ASN
       237**DCL      8316<<ASSIGN   8889>>IF       8889>>IF       8915>>IF       8958>>IF       8975>>IF
F$DCB.ATTR
       240**DCL       241--REDEF
F$DCB.BORROW
       255**DCL       255--REDEF     255--REDEF     255--REDEF
F$DCB.DCBNAME.L
       269**DCL       269--IMP-SIZ  8932>>ASSIGN   8934>>CALLBLT
F$DCB.DCBNAME.N
       269**DCL      8934>>CALLBLT
F$DCB.EOMCHAR
       226**DCL       226--REDEF
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:229  
F$DCB.FCD
       235**DCL      8188>>IF       8199>>IF       8206>>IF       8217>>IF       8301>>IF       8390>>IF
      8402>>IF
F$DCB.FLDID
       250**DCL       250--REDEF
F$DCB.FORM$
       244**DCL       244--REDEF
F$DCB.FSECT
       260**DCL       260--REDEF
F$DCB.FSN
       237**DCL       237--REDEF     237--REDEF     238--REDEF
F$DCB.FUN
       236**DCL      8193>>IF       8195<<ASSIGN   8211>>IF       8213<<ASSIGN   8315<<ASSIGN
F$DCB.HEADER$
       243**DCL       243--REDEF
F$DCB.IASN
       263**DCL      8955>>IF
F$DCB.IXTNSIZE
       241**DCL       241--REDEF
F$DCB.LASTSTA$
       231**DCL       231--REDEF
F$DCB.LVL
       256**DCL       256--REDEF
F$DCB.NAME.C
       231**DCL       231--REDEF    8379<<ASSIGN   8391>>IF       8894>>ASSIGN   8976>>CALLBLT
F$DCB.NAME.L
       231**DCL      8326<<ASSIGN   8340<<ASSIGN   8352<<ASSIGN   8372>>ASSIGN   8373<<ASSIGN   8373>>ASSIGN
      8379>>ASSIGN   8429<<ASSIGN   8429>>ASSIGN   8892>>ASSIGN   8976>>CALLBLT  8978>>ASSIGN
F$DCB.NOEOF
       252**DCL       252--REDEF
F$DCB.NRECS
       242**DCL       242--REDEF
F$DCB.NRECX
       261**DCL       261--REDEF
F$DCB.OHDR
       253**DCL       253--REDEF
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:230  
F$DCB.ORG
       236**DCL       236--REDEF    8475>>IF       8962>>IF
F$DCB.PASS
       232**DCL      8331<<ASSIGN   8334<<ASSIGN   8360<<ASSIGN
F$DCB.PRECNO
       259**DCL       259--REDEF
F$DCB.PSN
       232**DCL      8939>>IF       8940--ASSIGN   8941>>IF       8943>>ASSIGN   8965>>IF       8968>>CALLBLT
F$DCB.RCSZ
       264**DCL       264--REDEF
F$DCB.RES
       232**DCL       232--REDEF    8318<<ASSIGN   8915>>IF
F$DCB.SETX
       244**DCL       244--REDEF    8939>>IF       8945>>ASSIGN
F$DCB.TAB$
       243**DCL       244--REDEF
F$DCB.TDA
       258**DCL       258--REDEF
F$DCB.TYC
       222**DCL      8578>>IF
F$DCB.WSN
       233**DCL       233--REDEF
FCG_DFLT
      8664**LABEL    8654--CALLALT
FCG_DFLT2
      8682**LABEL    8672--CALLALT
FLAG#
      7904**DCL      8225<<ASSIGN   8226>>IF       8228<<ASSIGN   8289>>IF       8292>>ASSIGN   8294>>CALLBLT
      8294>>CALLBLT  8309>>ASSIGN   8311>>ASSIGN   8313>>ASSIGN   8468>>CALLBLT  8469>>ASSIGN   8511>>ASSIGN
      8518>>ASSIGN   8550>>ASSIGN   8563>>CALLBLT  8780>>CALLBLT  8785>>CALLBLT  8787>>CALLBLT  8789>>ASSIGN
      8792>>CALLBLT  8827>>ASSIGN   9143>>ASSIGN   9144>>ASSIGN   9146>>ASSIGN
FLAGBUF
      7772**DCL      8294>>CALLBLT  8309>>ASSIGN   8511>>ASSIGN
FM$SET.PSN
      8097**DCL      8945>>ASSIGN
FM$SET.USERLIST
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:231  
      8098**DCL      8098--REDEF
FM$SET$
      7787**DCL      8945>>ASSIGN
FMD$GBUF
       214**DCL-ENT  8109--CALL
FMD$RBUF
       215**DCL-ENT  8746--CALL
FMF$ICORRES
       201**DCL-ENT  8178--CALL
FMM$DFLOPN
       202**DCL-ENT  8197--CALL     8215--CALL     8401--CALL
FMM$SCRUB
       203**DCL-ENT  8307--CALL
FMP$CLSJ
       204**DCL-ENT  8305--CALL
FMP$CLSTAR
       205**DCL-ENT  8703--CALL     8762--CALL
FPT$ERRMSG.DCB#
      8023**DCL      8124>>ASSIGN
FPT$ERRMSG.FLAGLEV
      8023**DCL      8225>>ASSIGN
FPT$ERRMSG.INCLCODE
      8024**DCL      8532>>IF       8558>>IF
FPT$ERRMSG.L6_ALTCODE
      8025**DCL      8447>>IF       8710>>IF
FPT$ERRMSG.L6_CODE
      8025**DCL      8135>>IF
FPT$ERRMSG.LANG
      8026**DCL      8366>>ASSIGN
FPT$ERRMSG.LEAVETOKEN
      8023**DCL      8824>>IF
FPT$ERRMSG.MY_LANG
      8026**DCL      8364>>IF
FPT$ERRMSG.NREAD
      8025**DCL      8125>>IF       8277>>IF       8532>>IF
FPT$ERRMSG.OUTDCB1
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:232  
      8023**DCL      8178<>CALL     8188>>IF       8188--IF       8193--IF       8195--ASSIGN   8196--ASSIGN
      8199--IF       9088>>IF       9091>>ASSIGN   9135>>IF
FPT$ERRMSG.OUTDCB2
      8023**DCL      8178<>CALL     8206>>IF       8206--IF       8211--IF       8213--ASSIGN   8214--ASSIGN
      8217--IF       9100>>IF       9103>>ASSIGN   9135>>IF
FPT$ERRMSG.POINTER
      8025**DCL      8493>>IF       8495>>IF       8501>>ASSIGN   8502>>ASSIGN
FPT$ERRMSG.SOURCE
      8025**DCL      8128>>DOCASE
FPT$ERRMSG.SUBAC
      8024**DCL      8911>>IF
FPT$ERRMSG.SUBDC
      8024**DCL      8930>>IF
FPT$ERRMSG.SUBFILE
      8024**DCL      8698>>IF
FPT$ERRMSG.SUBFN
      8024**DCL      8889>>IF
FPT$ERRMSG.SUBLANG
      8025**DCL      8423>>IF
FPT$ERRMSG.SUBMESS
      8024**DCL      8599>>IF       8719>>IF
FPT$ERRMSG.SUBSN
      8024**DCL      8937>>IF
FPT$ERRMSG.TYC
      8024**DCL      8570>>IF
FPT$ERRMSG.VFC
      8023**DCL      8244>>IF       8248>>ASSIGN
HFF$DSIZ
       207**DCL-ENT  8264--CALL     8996--CALL
HFF$NILERASE
       208**DCL-ENT  8130--CALL     8162--CALL     8323--CALL     8330--CALL     8381--CALL     8733--CALL
HFF$TRAPALT
       209**DCL-ENT  8110--CALL     8198--CALL     8216--CALL     8262--CALL     8400--CALL     8508--CALL
      8513--CALL     8734--CALL     8745--CALL
I
      7901**DCL      8577<<DOINDEX  8578>>IF       8581>>CALLBLT  8581>>CALLBLT  8583>>ASSIGN   8827<<ASSIGN
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:233  
      8831<<CALLBLT  8831>>CALLBLT  8832>>IF       8834>>IF       8838<>CALL     8839<<ASSIGN   8839>>ASSIGN
      8843>>ASSIGN   8852>>ASSIGN   8853<<ASSIGN   8853>>ASSIGN   8858>>CALLBLT  8861>>ASSIGN   8862<<ASSIGN
      8866>>CALLBLT  8866>>CALLBLT  8869>>CALLBLT  8869>>CALLBLT  8869>>CALLBLT  8869>>CALLBLT  8872<<ASSIGN
      8872>>ASSIGN   8881<<ASSIGN   8881>>ASSIGN   8885>>CALLBLT  8907<>CALL     8908>>CALLBLT  8926<>CALL
      8927>>CALLBLT  8933<>CALL     8934>>CALLBLT  8951<>CALL     8952>>CALLBLT  8981<>CALL     8982>>CALLBLT
      9007<>CALL     9008>>CALLBLT  9023<>CALL     9024>>CALLBLT  9026<<ASSIGN   9026>>ASSIGN   9037<<DOINDEX
      9038>>IF       9038>>ASSIGN   9039>>IF       9040>>ASSIGN   9040>>ASSIGN   9041>>ASSIGN   9041>>ASSIGN
      9045<<ASSIGN   9048>>ASSIGN   9049<<ASSIGN   9049>>ASSIGN   9052>>CALLBLT  9053<<ASSIGN   9053>>ASSIGN
      9055>>ASSIGN   9056<<ASSIGN   9056>>ASSIGN   9058>>CALLBLT  9059<<ASSIGN   9059>>ASSIGN   9061>>CALLBLT
      9061>>CALLBLT
INCLCODE
      8772**PROC     8535--CALL
INIT_PRECFPT
      7717**DCL      8254>>ASSIGN
INIT_PRECFPT.V
      7719**DCL      7717--DCLINIT
INIT_RFPT
      7650**DCL      8237>>ASSIGN
INIT_RFPT.STATION_
      7653**DCL      7654--REDEF
INIT_RFPT.V
      7654**DCL      7650--DCLINIT
INIT_RFPT.V.DVBYTE.REREAD#
      7665**DCL      7665--REDEF
INIT_RFPT.V.INDX#
      7663**DCL      7663--REDEF
INIT_UNFIDFPT
      7739**DCL      8259>>ASSIGN
INIT_UNFIDFPT.V
      7743**DCL      7739--DCLINIT
INIT_WFPT
      7690**DCL      8242>>ASSIGN
INIT_WFPT.STATION_
      7692**DCL      7692--REDEF
INIT_WFPT.V
      7693**DCL      7690--DCLINIT
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:234  
INIT_WFPT.V.DVBYTE.VFC#
      7699**DCL      7699--REDEF
J
      7902**DCL      8573<<DOINDEX  8578>>IF       8788<<ASSIGN   8791>>ASSIGN   8844<<ASSIGN   8845>>DOWHILE
      8846>>IF       8847<<ASSIGN   8847>>ASSIGN   8886>>DOCASE   9183<<ASSIGN   9184>>DOWHILE  9185>>ASSIGN
      9185>>ASSIGN   9187<<ASSIGN   9187>>ASSIGN   9193<<DOINDEX  9194>>ASSIGN   9194>>ASSIGN
K
      7903**DCL      8985<<ASSIGN   8989<<ASSIGN   8993<<ASSIGN   8996<>CALL
LANG
      7918**DCL      8365<<ASSIGN   8366<<ASSIGN   8367>>IF       8367>>IF       8372>>ASSIGN
M$MPRECORD
       212**DCL-ENT  8507--CALL     8608--CALL     8623--CALL     8641--CALL     8654--CALL     8672--CALL
      8685--CALL
M$MREAD
       210**DCL-ENT  8488--CALL     8512--CALL     8544--CALL     8627--CALL
M$MUNFID
       213**DCL-ENT  9015--CALL
M$MWRITE
       211**DCL-ENT  9092--CALL     9104--CALL
M$STAR$
      7933**DCL      8301>>IF       8304>>ASSIGN   8307<>CALL     8315>>ASSIGN   8316>>ASSIGN   8317>>ASSIGN
      8318>>ASSIGN   8319>>ASSIGN   8320>>ASSIGN   8326>>ASSIGN   8331>>ASSIGN   8334>>ASSIGN   8340>>ASSIGN
      8352>>ASSIGN   8360>>ASSIGN   8372>>ASSIGN   8373>>ASSIGN   8373>>ASSIGN   8379>>ASSIGN   8379>>ASSIGN
      8382>>ASSIGN   8388>>ASSIGN   8389>>IF       8391>>IF       8394>>ASSIGN   8402>>IF       8412>>IF
      8412>>IF       8416>>IF       8429>>ASSIGN   8429>>ASSIGN   8475>>IF       8518>>ASSIGN   8550>>ASSIGN
      8702>>ASSIGN   8761>>ASSIGN
MID_DFLT
      8634**LABEL    8608--CALLALT
MID_DFLT2
      8651**LABEL    8641--CALLALT
MIN_HOLE IN PROCEDURE PUSH_RIGHT
      9167**DCL      9164--PROC     9169>>IF
MSG$SLOT
      8053**DCL      8294<<CALLBLT  8309<<ASSIGN   8465<<ASSIGN   8468<<CALLBLT  8500<<ASSIGN   8510<<ASSIGN
      8511<<ASSIGN   8563<<CALLBLT  8575<<CALLBLT  8581<<CALLBLT  8586>>IF       8589<<CALLBLT  8780<<CALLBLT
      8785>>CALLBLT  8787<<CALLBLT  8792<<CALLBLT  8831>>CALLBLT  8834>>IF       8843>>ASSIGN   8858<<CALLBLT
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:235  
      8858>>CALLBLT  8866<<CALLBLT  8866>>CALLBLT  8869<<CALLBLT  8869>>CALLBLT  8885<<CALLBLT  8908<<CALLBLT
      8927<<CALLBLT  8934<<CALLBLT  8952<<CALLBLT  8982<<CALLBLT  9008<<CALLBLT  9024<<CALLBLT  9085>>ASSIGN
      9145<<ASSIGN   9197<<CALLBLT
MSG$SLOTARRAY
      8054**DCL      8284>>DOWHILE  8501<<ASSIGN   9185<<ASSIGN   9185>>ASSIGN   9194<<ASSIGN   9194>>ASSIGN
MSG_FLGS
      7913**DCL      7917--REDEF    8280<<ASSIGN
MSG_FLGS.CONT
      7915**DCL      8540>>DOWHILE
MSG_FLGS.SUB
      7914**DCL      8281<<ASSIGN   8529>>IF       8555>>IF
MSG_FLGS_CHAR
      7917**DCL      8519<<ASSIGN   8552<<ASSIGN
MSG_SIZE
      7906**DCL      8283<<ASSIGN   8284>>DOWHILE  8284>>DOWHILE  8286<<ASSIGN   8286>>ASSIGN   8469<<ASSIGN
      8502<<ASSIGN   8518<<ASSIGN   8550<<ASSIGN   8575>>CALLBLT  8576<<ASSIGN   8576>>ASSIGN   8581>>CALLBLT
      8583<<ASSIGN   8583>>ASSIGN   8586>>IF       8588<<ASSIGN   8588>>ASSIGN   8589>>CALLBLT  8775>>IF
      8788>>ASSIGN   8789<<ASSIGN   8791<<ASSIGN   8832>>IF       8861<<ASSIGN   8861>>ASSIGN   8873<<ASSIGN
      8873>>ASSIGN   9079>>ASSIGN   9084>>ASSIGN   9146<<ASSIGN   9172>>IF       9174>>ASSIGN   9183>>ASSIGN
      9193>>DOINDEX  9197>>CALLBLT  9200<<ASSIGN   9200>>ASSIGN
NATIVE_LANG
      7910**DCL      8370<<ASSIGN   8376<<ASSIGN   8423>>IF       8427<<ASSIGN
NO_ALTCODE
      8165**LABEL    8162--CALLALT
NO_CODE
      8132**LABEL    8130--CALLALT  8143--GOTO     8153--GOTO
NO_FIELD IN PROCEDURE ERRMSG_SUB
      8880**LABEL    8891--GOTO     8907--CALLALT  8914--GOTO     8918--GOTO     8926--CALLALT  8931--GOTO
      8933--CALLALT  8938--GOTO     8939--GOTO     8950--GOTO     8951--CALLALT  8956--GOTO     8981--CALLALT
      8996--CALLALT  9007--CALLALT  9011--GOTO     9023--CALLALT
NO_FILEPASS
      8330**LABEL    8330--CALLALT
POINT$
      7978**DCL      8144<<ASSIGN   8145<>CALL     8146>>ASSIGN   8149<<ASSIGN   8150<>CALL     8151>>IF
      8154<<ASSIGN   8155<>CALL     8156>>ASSIGN   8158>>ASSIGN   8986<<ASSIGN   8990<<ASSIGN   8994<<ASSIGN
      8997>>ASSIGN   9006>>ASSIGN
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:236  
POOLBUF$
      7938**DCL      8109<>CALL     8111>>ASSIGN   8746<>CALL
PRECKEY
      7991**DCL      8113--ASSIGN   8257--ASSIGN
PRECKEY.CODE
      7993**DCL      8637<<ASSIGN   8667<<ASSIGN
PRECKEY.CODE.ERROR
      8000**DCL      8610>>IF       8643>>IF       8656>>IF       8674>>IF       8687>>IF
PRECKEY.CODE.FCG
      7994**DCL      7995--REDEF    8610>>IF       8643>>IF       8656>>IF       8674>>IF       8687>>IF
PRECKEY.CODE.FCG_
      7995**DCL      8668<<ASSIGN
PRECKEY.CODE.MID
      7998**DCL      8610>>IF       8638<<ASSIGN   8643>>IF       8656>>IF       8669<<ASSIGN   8674>>IF
      8687>>IF
PRECKEY.CODE.MON
      7999**DCL      8610>>IF       8643>>IF       8656>>IF       8674>>IF       8687>>IF
PRECKEY.COUNT
      7992**DCL      8636<<ASSIGN   8666<<ASSIGN
PRECKEY.SEQ
      8002**DCL      8617>>IF       8620>>ASSIGN   8639<<ASSIGN   8670<<ASSIGN
PREPARE_FILE
      8301**LABEL    8716--GOTO
PUSH_RIGHT
      9164**PROC     8293--CALL     8562--CALL     8779--CALL     8838--CALL     8907--CALL     8926--CALL
      8933--CALL     8951--CALL     8981--CALL     9007--CALL     9023--CALL
READKEY
      8004**DCL      8238--ASSIGN
READKEY.CODE
      8006**DCL      8483<<ASSIGN   8524>>ASSIGN
READKEY.CODE.FCG
      8007**DCL      8008--REDEF
READKEY.COUNT
      8005**DCL      8482<<ASSIGN
READKEY.SEQ
      8015**DCL      8484<<ASSIGN
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:237  
READ_NXT_ALT
      8546**LABEL    8544--CALLALT
REC_COUNT
      7900**DCL      8119<<ASSIGN   8464<<ASSIGN   8527<<ASSIGN   8551<<ASSIGN   8551>>ASSIGN   8732>>ASSIGN
RESULTS_MOVED
      8735**LABEL    8733--CALLALT  8734--CALLALT
SAMPLE IN PROCEDURE TOUCH_UP
      8805**DCL      8803--PROC
SAMPLE.SD IN PROCEDURE TOUCH_UP
      8807**DCL      8812>>ASSIGN
SETNOMSG
      8698**LABEL    8601--GOTO     8623--CALLALT  8627--CALLALT  8685--CALLALT
SET_M$STAR_NAME
      8379**LABEL    8430--GOTO
START IN PROCEDURE PUSH_RIGHT
      9165**DCL      9164--PROC     9184>>DOWHILE  9193>>DOINDEX
SUBFOUND IN PROCEDURE ERRMSG_SUB
      8884**LABEL    8846--GOTO
SUBTYPE_TBL
      7752**DCL      8846>>IF
SUB_1 IN PROCEDURE ERRMSG_SUB
      8831**LABEL    8840--GOTO     8854--GOTO     8877--GOTO     8882--GOTO     9027--GOTO
SUB_CODE
      7919**DCL      8843<<ASSIGN   8846>>IF
SUB_FOUND
      8617**LABEL    8648--GOTO     8661--GOTO     8679--GOTO     8692--GOTO
SYSV
      7778**DCL      7779--REDEF
SYSVA
      7779**DCL      8344>>IF
SY_FILEACCT
      8394**LABEL    8389--GOTO     8390--GOTO     8391--GOTO     8415--GOTO
TEXT$BUF.COUNT
      8057**DCL      8058--REDEF
TEXT$BUF.COUNT_CHAR
      8058**DCL      8997>>ASSIGN
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:238  
TEXT$BUF.TEXT
      8059**DCL      9006>>ASSIGN
TEXT_BUF.COUNT
      7948**DCL      7949--REDEF    8326>>ASSIGN   8327>>ASSIGN   8892<<ASSIGN   8893>>IF       8893<<ASSIGN
      8894>>ASSIGN   8902>>CALLBLT  8904<<ASSIGN   8904>>ASSIGN   8906>>ASSIGN   8957<<ASSIGN   8969<<ASSIGN
      8970>>DOWHILE  8970>>DOWHILE  8972<<ASSIGN   8972>>ASSIGN   8976>>CALLBLT  8978<<ASSIGN   8978>>ASSIGN
      8980>>ASSIGN   8998>>IF       8998>>IF       9005>>ASSIGN
TEXT_BUF.COUNT_CHAR
      7949**DCL      8325<<ASSIGN   8997<<ASSIGN
TEXT_BUF.TEXT
      7950**DCL      7951--REDEF    7952--REDEF    8327<<ASSIGN   8341<<ASSIGN   8353<<ASSIGN   8379>>ASSIGN
      8468>>CALLBLT  8780>>CALLBLT  8785<<CALLBLT  8787>>CALLBLT  8792>>CALLBLT  8894<<ASSIGN   8902<<CALLBLT
      8908>>CALLBLT  8920<<ASSIGN   8921>>IF       8922<<ASSIGN   8923>>DOWHILE  8927>>CALLBLT  8943<<ASSIGN
      8945<<ASSIGN   8946>>DOWHILE  8949>>IF       8952>>CALLBLT  8960<<ASSIGN   8963<<ASSIGN   8964<<ASSIGN
      8968<<CALLBLT  8970>>DOWHILE  8976<<CALLBLT  8982>>CALLBLT  9006<<ASSIGN   9008>>CALLBLT  9013--ASSIGN
      9018--ASSIGN   9024>>CALLBLT  9052<<CALLBLT  9058<<CALLBLT  9061<<CALLBLT
TEXT_BUF.TEXT_ARRAY
      7951**DCL      8354<<ASSIGN   8372<<ASSIGN   9019>>DOWHILE  9038<<ASSIGN   9044<<ASSIGN   9048<<ASSIGN
      9055<<ASSIGN
TEXT_BUF.UBIN_ARRAY
      7952**DCL      8356<<ASSIGN   8358<<ASSIGN   9040<<ASSIGN   9041<<ASSIGN
TOKLEN IN PROCEDURE PUSH_RIGHT
      9166**DCL      9164--PROC     9172>>IF       9174>>ASSIGN   9181>>IF       9184>>DOWHILE  9185>>ASSIGN
      9191>>IF       9193>>DOINDEX  9194>>ASSIGN   9197>>CALLBLT  9197>>CALLBLT  9200>>ASSIGN
TOUCH_UP
      8803**PROC     8145--CALL     8150--CALL     8155--CALL
TYC_MASK
      7760**DCL      8578>>IF
TYC_NAME
      7754**DCL      8581>>CALLBLT
TYC_N_LEN
      7766**DCL      8581>>CALLBLT  8583>>ASSIGN
UDN$MAGIC
       206**DCL-ENT  8122--CALL
UMD$CHKOPN
       216**DCL-ENT  8233--CALL
PL6.E3A0      #001=EMR$ERRMSG File=EMR$ERRMSG.:E05TSI                            TUE 07/29/97 15:21 Page:239  
UNFID_ALT IN PROCEDURE ERRMSG_SUB
      9018**LABEL    9015--CALLALT
UNSAT_SUB
      7908**DCL      8850>>IF       8851<<ASSIGN   8857>>IF       8880<<ASSIGN   8884>>IF       8884<<ASSIGN
USER_FIELD IN PROCEDURE ERRMSG_SUB
      8994**LABEL    8987--GOTO     8991--GOTO
USER_FILE
      7909**DCL      8116<<ASSIGN   8328<<ASSIGN   8339<<ASSIGN   8437>>IF       8698>>IF       8701<<ASSIGN
VICTIM IN PROCEDURE TOUCH_UP
      8808**DCL      8803--PROC
VICTIM.SD IN PROCEDURE TOUCH_UP
      8810**DCL      8812<<ASSIGN
VLP$ACCT
      8064**DCL      8382>>ASSIGN
VLP$NAME.COUNT
      8061**DCL      8062--REDEF
VLP$NAME.COUNT_CHAR
      8062**DCL      8325>>ASSIGN
VLP$NAME.TEXT
      8063**DCL      8327>>ASSIGN
VLP$PASS
      8065**DCL      8331>>ASSIGN
V_BUF_SIZE
      7953**DCL      8264<>CALL     8265>>ASSIGN
WR_VFC_BUF
      7988**DCL      8112--ASSIGN   9083--ASSIGN
WR_VFC_BUF.TEXT
      7990**DCL      9085<<ASSIGN
WR_VFC_BUF.VFC
      7989**DCL      8248<<ASSIGN
