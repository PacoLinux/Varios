VERSION E05

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:1    
        1        1        /*M* TOS$SOLTS     TOLTS System On-Line Testing System */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOS$SOLTS
       12       12             PURPOSE:      MME Service Routines for SOLTS.
       13       13                           $PACT / $SLTA communications word alterations
       14       14             DESCRIPTION:  Procedures necessary to handle SOLTS MMES.
       15       15             REFERENCE:    CP-6 Release D0E0
       16       16             LAST UPDATE:  02/25/86
       17       17        */
       18       18        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:2    
       19       19        /*F* NAME:         TOS$SOLTS
       20       20             DESCRIPTION:  MME Service Routines
       21       21                           TOS$SOLTS: procedure
       22       22                           TOS$PACT: entry
       23       23                              TOS$MME_COMWD
       24       24                              TOS$MME_CPUASG
       25       25                              TOS$MME_CPUREL
       26       26                              TOS$MME_HISREG
       27       27                              TOS$MME_RETRY
       28       28                              TOS$MME_SCUASG
       29       29                              TOS$MME_SCUREL
       30       30                              TOS$MME_TAKCPU
       31       31                              TOS$MME_RETCPU
       32       32                              TOS$PROCESS_PACT
       33       33                                 PROCESS_$PACT
       34       34                                 PROCESS_$PACTC
       35       35                                 PROCESS_$PACTN
       36       36                                 PROCESS_$PACTP
       37       37                                 PROCESS_$PACTNNN
       38       38                                 PROCESS_$PACT_ERROR
       39       39        */
       40       40
       41       41        TOS$SOLTS: PROC (MME,MREG,MME_INSTR$,RETURN_DELTA);
       42       42
       43       43        /* Include Files */
       44       44
       45       45           %INCLUDE B_ERRORS_C ;
       46     1172           %INCLUDE B_SEGIDS_C;
       47     1711           %INCLUDE CP_6;
       48     7270           %INCLUDE CP_6_SUBS;
       49     7810           %INCLUDE TOT_TOLTS_M;
       50     8928           %INCLUDE TO_PERR_C ;
       51     9513           %INCLUDE XUG_ENTRY ;
       52     9544           %INCLUDE XU_MACRO_C;
       53    12650           %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:3    
       54    12651        /* Variables */
       55    12652
       56    12653           %MME ;
       57    12674           %MREG ;
       58    12696           %MME_INSTR$ ;
       59    12699           %RETURN_DELTA ;
       60    12702           %B$TCB ;
       61    12705           %B$ALT ;
       62    12713           %VLP_ERRCODE (FPTN = TOS_ERROR_CODE,
       63    12714                         FCG  = 'TO',
       64    12715                         MID  = 'S',
       65    12716                         SEV  = 0) ;
       66    12761
       67    12762        /* External Variables */
       68    12763
       69    12764    1      DCL B$TCB$                PTR SYMREF ;
       70    12765    1      DCL B$IS$                 PTR SYMREF;
       71    12766    1      DCL B$SPCL1$              PTR SYMREF;
       72    12767    1      DCL S_PORTNR BIT(1)  SYMREF;
       73    12768    1      DCL S_MPSTATE BIT(1) SYMREF;
       74    12769    1      DCL 1 H_DPS8000_SCU_INFO BIT(1) SYMREF;
       75    12770    1      DCL TOS$COMWD             BIT (36) STATIC SYMDEF ALIGNED;
       76    12771    1      DCL TOS$RSW_AREG          BIT (36) STATIC SYMDEF ALIGNED ;
       77    12772           %TOT$ECP (STCLASS = SYMREF) ;
       78    12821           %XUG_GETCMD (STCLASS  = SYMREF,
       79    12822                        NAME     = TOLTS_GETCMD,
       80    12823                        FLGLEV   = 0);
       81    13161           %FPT_SAD(USERSID=%SPCL1SID,MONSID=%ISSID);
       82    13176
       83    13177        /* External Entry Points */
       84    13178
       85    13179    1      DCL TOS$RSW2                      ENTRY ;
       86    13180    1      DCL TOD$DISPATCHER                 ENTRY(3) ;
       87    13181
       88    13182        /* Local Variables and Flag */
       89    13183
       90    13184    1      DCL SCUX UBIN ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:4    
       91    13185    1      DCL B$SCU$ PTR STATIC INIT(ADDR(NIL));
       92    13186    1      DCL B$PORT$  PTR STATIC INIT(ADDR(NIL));
       93    13187    1      DCL B$MPSTATE$  PTR STATIC INIT(ADDR(NIL));
       94    13188    1      DCL B$WORD(0:0) UBIN WORD BASED;
       95    13189    1      DCL QUEUE_ENTRY                    (0:2) UBIN(36);
       96    13190    1      DCL REQUEST_TYPE                   UBIN (36) ;
       97    13191    1      DCL SERVICE_CODE                   UBIN (18) ;
       98    13192    1      DCL 1 STATUS_WD_A STATIC,
       99    13193    1            2 RASE_CODE       BIT(18) UNAL INIT ('203333'O) ,
      100    13194    1            2 SUB_EXEC        UBIN (18) UNAL ;
      101    13195    1      DCL ENTRY_A REDEF STATUS_WD_A UBIN (36) ;
      102    13196    1      DCL 1 STATUS_WD_B STATIC,
      103    13197    1            2 STATUS_CODE     UBIN (18) UNAL ,
      104    13198    1            2 FUNCTION_CODE   UBIN (9) UNAL ,
      105    13199    1            2 FUNCTION_TYPE   UBIN (9) UNAL ;
      106    13200    1      DCL ENTRY_B REDEF STATUS_WD_B UBIN (36) ;
      107    13201    1      DCL ENTRY_C             UBIN (36) UNAL STATIC ;
      108    13202         /* SCU TBL FROM HF_DATA_D */
      109    13203    1      DCL 1 SCU_INFO (0:1) BASED ALIGNED,
      110    13204    1            2 LOWER_BOUND UBIN HALF UNAL,
      111    13205             /* Lower bound of SCU - modulo 1MW */
      112    13206    1            2 UPPER_BOUND UBIN HALF UNAL,
      113    13207             /* Upper bound of SCU - module 1MW */
      114    13208    1            2 PAGES UBIN HALF UNAL,
      115    13209            /* Number of pages left to release or return */
      116    13210    1            2 SCU_STATUS,
      117    13211    1              3 NOT_CONFIG BIT(1) UNAL,
      118    13212             /* SCU not configured            */
      119    13213    1              3 REL_BIT BIT(1) UNAL,
      120    13214             /* SCU released                  */
      121    13215    1              3 REL_IN_PROGRESS BIT(1) UNAL,
      122    13216             /* Memory release in progress   */
      123    13217    1              3 RET_IN_PROGRESS BIT(1) UNAL,
      124    13218             /* Memory return in progress    */
      125    13219    1              3 LOW_MEM BIT(1) UNAL,
      126    13220             /* Set if this is low memory */
      127    13221    1              3 * BIT(13) UNAL;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:5    
      128    13222           %EJECT;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:6    
      129    13223        /*D* NAME:         TOS$SOLTS
      130    13224             CALL:         CALL TOS$SOLTS(MME,MREG,MME_INSTR$,RETURN_DELTA);
      131    13225             INTERFACE:    TOS$MME_COMWD
      132    13226                           TOS$MME_HISREG
      133    13227                           TOS$MME_RETCPU
      134    13228                           TOS$MME_RETRY
      135    13229                           TOS$MME_TAKCPU
      136    13230             INPUT:        MME is an array of the the MME instruction and the
      137    13231                           first 6 words following it in the subexec.
      138    13232
      139    13233                           MREG is a structure of the registers at the time of
      140    13234                           the MME.
      141    13235
      142    13236                           MME_INSTR$ is a pointer to the MME instruction.
      143    13237
      144    13238             OUTPUT:       RETURN_DELTA is the number of words to return
      145    13239                           pass the MME instruction when returning to the
      146    13240                           subexec.
      147    13241             DESCRIPTION:  Calls a MME Service routine to service one of the
      148    13242                           SOLTS unique MMEs.
      149    13243        */
      150    13244        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:7    
      151    13245        /* Decode MME */
      152    13246
      153    13247    2      DO CASE (-MME.INST.NO);
      154    13248    2         CASE (%COMWD);
      155    13249    2            CALL TOS$MME_COMWD(MREG.A,MREG.Q,RETURN_DELTA);
      156    13250    2         CASE (%CPUASG) ;
      157    13251    2            CALL TOS$MME_CPUASG (MREG.X2, MREG.X4, MREG.A, MREG.Q,  RETURN_DELTA);
      158    13252    2         CASE (%CPUREL) ;
      159    13253    2            CALL TOS$MME_CPUREL (MREG.X2, MREG.X4, MREG.A, MREG.Q, RETURN_DELTA);
      160    13254    2         CASE (%HISREG);
      161    13255    2            CALL TOS$MME_HISREG(MREG.A,RETURN_DELTA);
      162    13256    2         CASE (%RETCPU);
      163    13257    2            CALL TOS$MME_RETCPU(MREG.A,RETURN_DELTA);
      164    13258    2         CASE (%RETRY);
      165    13259    2            CALL TOS$MME_RETRY(MREG.A,RETURN_DELTA);
      166    13260    2         CASE (%SCUASG) ;
      167    13261    2            CALL TOS$MME_SCUASG (MREG.A,MREG.X4,RETURN_DELTA);
      168    13262    2         CASE (%SCUREL) ;
      169    13263    2            CALL TOS$MME_SCUREL (MREG.A,MREG.X4,RETURN_DELTA);
      170    13264    2         CASE (%TAKCPU);
      171    13265    2            CALL TOS$MME_TAKCPU(MREG.A,MREG.Q,MREG.X1,RETURN_DELTA);
      172    13266    2      END /* CASE */ ;
      173    13267    1      RETURN;
      174    13268
      175    13269        /* END TOS$SOLTS */
      176    13270        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:8    
      177    13271        /*D*  NAME:        TOS$PACT
      178    13272              ENTRY:
      179    13273              AUTHOR:      Scott S. Sheppard
      180    13274              INTERFACE:   TOS$PROCESS_PACT
      181    13275              DESCRIPTION: This entry point calls procedure TOS$PROCESS_PACT
      182    13276                           to handle PACT requests from TOLTS.
      183    13277        */
      184    13278
      185    13279    1   TOS$PACT: ENTRY ;
      186    13280
      187    13281    1      CALL TOS$PROCESS_PACT ;
      188    13282    1      RETURN ;
      189    13283
      190    13284        %EJECT;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:9    
      191    13285        /*I* NAME:         TOS$MME_COMWD
      192    13286             CALL:         CALL TOS$MME_COMWD(AREG,QREG,RETURN_DELTA);
      193    13287             INPUT:        AREG
      194    13288                           QREG
      195    13289             OUTPUT:       RETURN_DELTA = 1
      196    13290                           TOS$COMWD
      197    13291             DESCRIPTION:  This procedure alters the SOLTS communications
      198    13292                           word. The A register contains bits that are to
      199    13293                           be ANDed in/out of the word.    The Q register
      200    13294                           contains bits to be  ORed  in.   The resulting
      201    13295                           communications  word is returned to the  TOLTS
      202    13296                           Subexecutive in the Q register.
      203    13297        */
      204    13298
      205    13299    1   TOS$MME_COMWD: PROC (A, Q, RETURN_DELTA);
      206    13300
      207    13301    2      DCL A            BIT (36) ALIGNED ;
      208    13302    2      DCL Q            BIT (36) ALIGNED ;
      209    13303    2      DCL RETURN_DELTA SBIN HALF;
      210    13304
      211    13305    3      DO INHIBIT;
      212    13306    3         TOS$COMWD = A & TOS$COMWD;
      213    13307    3         TOS$COMWD = Q | TOS$COMWD;
      214    13308    3         Q = TOS$COMWD;
      215    13309    3      END;
      216    13310    2      RETURN_DELTA = 1;
      217    13311    2      RETURN;
      218    13312
      219    13313    2   END TOS$MME_COMWD;
      220    13314        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:10   
      221    13315        /*I* NAME:         TOS$MME_CPUASG
      222    13316             PURPOSE:      Informs user that CPU should be assigned
      223    13317             INTERFACE:    XUG$ERRMSG
      224    13318             PARAMETERS:   X2 - console code (bits 0 - 5)
      225    13319                           X4 - logical processor number (input)
      226    13320                           AL - subexec number (30 - 32)
      227    13321                                test page number (33 - 35)
      228    13322             OUTPUT:       STATUS_WD_A - '203333'O               (0 - 17)
      229    13323                                         subexec # / test page # (30 - 35)
      230    13324
      231    13325                           STATUS_WD_B - Status                  (0 - 17)
      232    13326                                         00 = successful
      233    13327                                         14 = CPU not assignable
      234    13328                                         Function Code           (18 - 26)
      235    13329                                         Console Code            (27 - 35)
      236    13330                           RETURN_DELTA - set to 1
      237    13331             DATA:         TOS_ERROR_CODE - input/output
      238    13332             DESCRIPTION:  This   procedure  handles  MME CPU assign for
      239    13333                           CP6.   TOLTS   does   not  have  this capability
      240    13334                           instead,  a  warning  message  is issued to the
      241    13335                           user indicating that the CPU can be assigned
      242    13336                           using the START Keyin at the System Console.
      243    13337                           The status  value  is  set to 14 octal, indicating
      244    13338                           that the processor has not been assigned.
      245    13339        */
      246    13340        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:11   
      247    13341    1   TOS$MME_CPUASG: PROC (X2, X4, A, Q, RETURN_DELTA) ;
      248    13342
      249    13343    2      DCL X2           UBIN HALF HALIGNED ;
      250    13344    2      DCL X4           UBIN HALF HALIGNED ;
      251    13345    2      DCL A            UBIN WORD ALIGNED ;
      252    13346    2      DCL 1 A_REG REDEF A,
      253    13347    2            2 * UBIN (30) UNAL,
      254    13348    2            2 SUBEXEC UBIN (3) UNAL,
      255    13349    2            2 TP_NUM UBIN (3) UNAL;
      256    13350    2      DCL Q            UBIN WORD ALIGNED;
      257    13351    2      DCL 1 Q_REG REDEF Q,
      258    13352    2            2 PHYS_PORT_NUM UBIN (6) UNAL,
      259    13353    2            2 *            UBIN (30) UNAL;
      260    13354    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
      261    13355    2      DCL 1 LOGICAL_PORT,
      262    13356    2            2 LGTH    UBIN BYTE CALIGNED,
      263    13357    2            2 NUMBER    CHAR (2)  CALIGNED;
      264    13358    2      DCL 1 PHYSICAL_PORT,
      265    13359    2            2 LGTH   UBIN BYTE CALIGNED,
      266    13360    2            2 NUMBER  CHAR (2) CALIGNED;
      267    13361        /* Code */
      268    13362
      269    13363    3      IF (B$PORT$ = ADDR(NIL)) THEN DO;
      270    13364    3              CALL M$SAD(FPT_SAD) WHENALTRETURN
      271    13365    4                   DO;
      272    13366    4                      STATUS_WD_B.STATUS_CODE = 12; /* OCTAL 14 */
      273    13367    4                      RETURN_DELTA = 1;
      274    13368    4                   END;
      275    13369    3              B$PORT$ = PINCRW(B$SPCL1$, POFFW(ADDR(S_PORTNR),B$IS$));
      276    13370    3              B$MPSTATE$ = PINCRW(B$SPCL1$, POFFW(ADDR(S_MPSTATE),B$IS$));
      277    13371    3           END;
      278    13372
      279    13373           /* Issue warning message */
      280    13374    2      LOGICAL_PORT.LGTH = 2 ;
      281    13375    2      CALL BINCHAR (LOGICAL_PORT.NUMBER, X4) ;
      282    13376    2      Q_REG.PHYS_PORT_NUM = B$PORT$ -> B$WORD(X4); /* SET Q-REG FOR CMLT */
      283    13377    2      PHYSICAL_PORT.LGTH = 2;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:12   
      284    13378    2      CALL BINCHAR (PHYSICAL_PORT.NUMBER,X4);
      285    13379    2      TOS_ERROR_CODE.ERR# = %E$RPMASGCPU;
      286    13380    2      TOLTS_GETCMD.ERR_CODE = TOS_ERROR_CODE;
      287    13381    2      TOLTS_GETCMD.F1_ = VECTOR (LOGICAL_PORT);
      288    13382    2      TOLTS_GETCMD.F2_ = VECTOR (PHYSICAL_PORT);
      289    13383    2      TOLTS_GETCMD.FLGLEV# = 4;
      290    13384          /* Verify CPU is STOPPED (still) */
      291    13385    3      IF B$MPSTATE$ -> B$WORD(X4) ~= 0 THEN DO;
      292    13386    3              STATUS_WD_B.STATUS_CODE = 12; /* 14 OCTAL */
      293    13387    3              TOS_ERROR_CODE.ERR# = %E$ASGCPU_NOT_STOPPED;
      294    13388    3              RETURN_DELTA = 1;
      295    13389    3           END;
      296    13390    3      ELSE DO;
      297    13391    3              STATUS_WD_B.STATUS_CODE = 0; /* MAKE STATUS GOOD */
      298    13392    3              RETURN_DELTA = 1;
      299    13393    3              TOS_ERROR_CODE.ERR# = %E$RPMASGCPU;
      300    13394    3           END;
      301    13395    2      CALL XUG$ERRMSG (TOLTS_GETCMD);
      302    13396    2      STATUS_WD_A.SUB_EXEC = A ;
      303    13397    2      STATUS_WD_B.FUNCTION_CODE = %SOLTS_ASGCPU ;
      304    13398    2      STATUS_WD_B.FUNCTION_TYPE = X4 ;
      305    13399           /* SETUP INTER COMM IO CALL TO DISPATCHER */
      306    13400    2      QUEUE_ENTRY(0) = ENTRY_A;
      307    13401    2      QUEUE_ENTRY(1) = ENTRY_B;
      308    13402    2      QUEUE_ENTRY(2) = 0;
      309    13403    2      REQUEST_TYPE = %DRT_BUILD ;
      310    13404    2      SERVICE_CODE = %DSC_ISC ;
      311    13405    2      CALL TOD$DISPATCHER( REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY) ;
      312    13406           /* Set Return Values */
      313    13407    2      RETURN ;
      314    13408
      315    13409    2   END TOS$MME_CPUASG ;
      316    13410           % EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:13   
      317    13411        /*I* NAME:         TOS$MME_CPUREL
      318    13412             AUTHOR:       Scott S. Sheppard
      319    13413             PURPOSE:      Informs user that CPU should be released
      320    13414             INTERFACE:    XUG$ERRMSG
      321    13415             PARAMETERS:   X2 - console code (bits 0 - 5)
      322    13416                           X4 - logical processor number (input)
      323    13417                           AL - subexec number (30 - 32)
      324    13418                                test page number (33 - 35)
      325    13419             OUTPUT:       STATUS_WD_A - '203333'O               (0 - 17)
      326    13420                                         subexec # / test page # (30 - 35)
      327    13421
      328    13422                           STATUS_WD_B - Status                  (0 - 17)
      329    13423                                         00 = successful
      330    13424                                         14 = CPU not RELEASED
      331    13425                                         Function Code           (18 - 26)
      332    13426                                         Console Code            (27 - 35)
      333    13427                           RETURN_DELTA - set to 1
      334    13428             DATA:         TOS_ERROR_CODE - input/output
      335    13429             DESCRIPTION:  This   procedure  handles  MME CPU release for
      336    13430                           CP-6. On GCOS systems, when a request to releases
      337    13431                           a CPU from the system is made, a call will be made
      338    13432                           to the OS to release the CPU.  CP6 TOLTS does not
      339    13433                           have the ability to release a CPU on the fly;
      340    13434                           instead the CPU in question must be released via
      341    13435                           an operator console verb "STOP" keyin.  If the CPU
      342    13436                           has already been stopped prior to the MME CPUREL a
      343    13437                           status code of 00 will be returned, else a code of
      344    13438                           14 octal will be returned (CPU not released), and a
      345    13439                           warning message issued to the affect that the user
      346    13440                           must release the CPU with a "STOP" keyin.
      347    13441        */
      348    13442        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:14   
      349    13443    1   TOS$MME_CPUREL: PROC (X2, X4, A, Q,  RETURN_DELTA) ;
      350    13444
      351    13445    2      DCL X2           UBIN HALF HALIGNED ;
      352    13446    2      DCL X4           UBIN HALF HALIGNED ;
      353    13447    2      DCL A            UBIN WORD ALIGNED ;
      354    13448    2      DCL 1 A_REG REDEF A,
      355    13449    2            2 *        UBIN (30) UNAL,
      356    13450    2            2 SUBEXEC  UBIN (3)  UNAL,
      357    13451    2            2 TP_NUM   UBIN (3)  UNAL;
      358    13452    2      DCL Q  UBIN WORD ALIGNED;
      359    13453    2      DCL 1 Q_REG REDEF Q,
      360    13454    2            2 PHYS_PORT_NUM UBIN (6) UNAL,
      361    13455    2            2 *          UBIN (30) UNAL;
      362    13456    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
      363    13457    2      DCL 1 LOGICAL_PORT,
      364    13458    2            2 LGTH   UBIN BYTE CALIGNED,
      365    13459    2            2 NUMBER    CHAR (2) CALIGNED;
      366    13460    2      DCL 1 PHYSICAL_PORT,
      367    13461    2            2 LGTH   UBIN BYTE CALIGNED,
      368    13462    2            2 NUMBER  CHAR (2) CALIGNED;
      369    13463
      370    13464        /* Code */
      371    13465    3      IF (B$PORT$ = ADDR(NIL)) THEN DO;
      372    13466    3              CALL M$SAD(FPT_SAD) WHENALTRETURN
      373    13467    4                   DO;
      374    13468    4                      STATUS_WD_B.STATUS_CODE = 12;
      375    13469    4                      RETURN_DELTA = 1;
      376    13470    4                   END;
      377    13471    3              B$PORT$ = PINCRW(B$SPCL1$,POFFW(ADDR(S_PORTNR),B$IS$));
      378    13472    3              B$MPSTATE$ = PINCRW(B$SPCL1$,POFFW(ADDR(S_MPSTATE),B$IS$));
      379    13473    3           END;
      380    13474           /* Issue warning message */
      381    13475    2      LOGICAL_PORT.LGTH = 2 ;
      382    13476    2      CALL BINCHAR (LOGICAL_PORT.NUMBER, X4) ;
      383    13477    2      Q_REG.PHYS_PORT_NUM = B$PORT$ -> B$WORD(X4);
      384    13478    2      PHYSICAL_PORT.LGTH = 2;
      385    13479    2      CALL BINCHAR (PHYSICAL_PORT.NUMBER, X4);
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:15   
      386    13480
      387    13481           /* CHECK TO SEE IF $PACT REQUEST */
      388    13482
      389    13483           /* VERIFY THAT CPU IS STOPPED */
      390    13484    3      IF B$MPSTATE$ -> B$WORD(X4) ~= 0 THEN DO;
      391    13485    3              STATUS_WD_B.STATUS_CODE = 12;
      392    13486    3              TOS_ERROR_CODE.ERR# = %E$RELCPU_NOT_STOPPED;
      393    13487    3              RETURN_DELTA = 1;
      394    13488    3           END;
      395    13489    3      ELSE DO;
      396    13490    3              STATUS_WD_B.STATUS_CODE = 0; /* MAKE STATUS GOOD */
      397    13491    3              RETURN_DELTA = 1;
      398    13492    3              IF (A_REG.SUBEXEC = 4)
      399    13493    3              THEN TOS_ERROR_CODE.ERR# = %E$PLSRELCPU ;
      400    13494    3              ELSE TOS_ERROR_CODE.ERR# = %E$RPMRELCPU ;
      401    13495    3           END;
      402    13496    2      TOLTS_GETCMD.ERR_CODE = TOS_ERROR_CODE;
      403    13497    2      TOLTS_GETCMD.F1_ = VECTOR (LOGICAL_PORT);
      404    13498    2      TOLTS_GETCMD.F2_ = VECTOR (PHYSICAL_PORT);
      405    13499    2      TOLTS_GETCMD.FLGLEV# = 4;
      406    13500    2      CALL XUG$ERRMSG (TOLTS_GETCMD);
      407    13501    2      STATUS_WD_A.SUB_EXEC = A ;
      408    13502    2      STATUS_WD_B.FUNCTION_CODE = %SOLTS_RELCPU ;
      409    13503    2      STATUS_WD_B.FUNCTION_TYPE = X4 ;
      410    13504           /* SETUP INTER COMM IO CALL TO DISPATCHER */
      411    13505    2      QUEUE_ENTRY(0) = ENTRY_A;
      412    13506    2      QUEUE_ENTRY(1) = ENTRY_B;
      413    13507    2      QUEUE_ENTRY(2) = 0;
      414    13508    2      REQUEST_TYPE = %DRT_BUILD ;
      415    13509    2      SERVICE_CODE = %DSC_ISC ;
      416    13510    2      CALL TOD$DISPATCHER( REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY) ;
      417    13511           /* Set Return Values */
      418    13512
      419    13513    2      RETURN ;
      420    13514
      421    13515    2   END TOS$MME_CPUREL ;
      422    13516        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:16   
      423    13517        /*I* NAME:         TOS$MME_HISREG
      424    13518             CALL:         CALL TOS$MME_HISREG(AREG,RETURN_DELTA);
      425    13519             INPUT:        AREG
      426    13520             OUTPUT:       RETURN_DELTA = 1
      427    13521             DESCRIPTION:  The intent of the MME is to indicate to TOLTS
      428    13522                           that on the occurence of certain types of faults in
      429    13523                           SOLTS, a History Register buffer is to be
      430    13524                           written into SOLTS, containing hardware history
      431    13525                           register information.  The address of that area in
      432    13526                           SOLTS is passed via this MME.  It is then up to the
      433    13527                           TOLTS Fault Handler to decide under what circumstance
      434    13528                           History Register information is to be returned to
      435    13529                           SOLTS.
      436    13530
      437    13531                           This feature is not yet implemented in TOLTS.
      438    13532                           Among other things, the exact format of that
      439    13533                           History Register buffer has never been defined, and
      440    13534                           it was claimed that this feature was not needed for
      441    13535                           anything execpt debug.
      442    13536
      443    13537                           The rudiments of the design had this MME service
      444    13538                           routine setting a flag which would then be checked
      445    13539                           by the Fault Handler when processing faults for
      446    13540                           SOLTS.  If the flag were set, a routine in TOS$SOLTs
      447    13541                           would be called to build the buffer and return it to
      448    13542                           SOLTS.
      449    13543        */
      450    13544        %EJECT;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:17   
      451    13545    1   TOS$MME_HISREG: PROC (P_AREG,RETURN_DELTA);
      452    13546
      453    13547    2      DCL P_AREG UBIN(36);
      454    13548    2      DCL RETURN_DELTA SBIN HALF;
      455    13549
      456    13550        /* CODE */
      457    13551
      458    13552    2      RETURN_DELTA = 1;
      459    13553    2      RETURN;
      460    13554
      461    13555    2   END TOS$MME_HISREG;
      462    13556        %EJECT;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:18   
      463    13557        /*I* NAME:         TOS$MME_RETRY
      464    13558             CALL:         CALL TOS$MME_RETRY(AREG,RETURN_DELTA);
      465    13559             INPUT:        AREG
      466    13560             OUTPUT:       RETURN_DELTA = 1
      467    13561             DESCRIPTION:  Another SOLTS NOP; this feature is meaningful only
      468    13562                           in a GCOS environment.
      469    13563        */
      470    13564
      471    13565    1   TOS$MME_RETRY: PROC (A, RETURN_DELTA);
      472    13566
      473    13567    2      DCL 1 A ALIGNED,
      474    13568    2            2 *            UBIN(12) UNAL,
      475    13569    2            2 CPU_NUMBER   UBIN(6) UNAL,
      476    13570    2            2 *            UBIN(15) UNAL,
      477    13571    2            2 RETRY_LIMIT  UBIN(3) UNAL;
      478    13572    2      DCL RETURN_DELTA SBIN HALF ;
      479    13573
      480    13574        /* CODE */
      481    13575
      482    13576    2      RETURN_DELTA = 1;
      483    13577    2      RETURN;
      484    13578
      485    13579    2   END TOS$MME_RETRY;
      486    13580        %EJECT;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:19   
      487    13581        /*I* NAME:         TOS$MME_TAKCPU
      488    13582             CALL:         CALL TOS$MME_TAKCPU(AREG,RETURN_DELTA);
      489    13583             INPUT:        AREG bits 30-35 contains the CPU to execute on.
      490    13584             OUTPUT:       RETURN_DELTA = 1 if CPU not configured.
      491    13585                           RETURN_DELTA = 2 if CPU is stopped.
      492    13586                           RETURN_DELTA = 3 if request is honored.
      493    13587                           AREG contains the RSW 2 information.
      494    13588                           X1 contains 0.
      495    13589             DESCRIPTION:  This routine calls M$TDREQCPU to put a CPU into
      496    13590                           Diagnostic Mode.  This is essentially the
      497    13591                           CPU allocation function of SOLTS.  For debug
      498    13592                           purposes, an ALTRET results in a TOLTS
      499    13593                           abort.
      500    13594
      501    13595        */
      502    13596        %EJECT;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:20   
      503    13597    1   TOS$MME_TAKCPU: PROC (A, Q, X1, RETURN_DELTA) ;
      504    13598
      505    13599    2      DCL 1 A ALIGNED,
      506    13600    2            2 MBZ             UBIN(12) UNAL,
      507    13601    2            2 PHYSICAL_CPU    UBIN(6) UNAL ,
      508    13602    2            2 LOGICAL_CPU     UBIN(12) UNAL ,
      509    13603    2            2 PORT_ASSIGNMENT UBIN(6) UNAL;
      510    13604    2      DCL A_REG REDEF A BIT (36) ALIGNED ;
      511    13605    2      DCL Q                   UBIN (36) ALIGNED ;
      512    13606    2      DCL X1                  UBIN (18) HALIGNED ;
      513    13607    2      DCL RETURN_DELTA        SBIN HALF HALIGNED ;
      514    13608           %EQU FAKPORT# = 0;
      515    13609           %FPT_TDREQCPU (FPTN = TAKCPU_FPT, MODE=DIAG, XEQ=ASSIGN);
      516    13625
      517    13626        /* CODE */
      518    13627
      519    13628    2      X1 = %FAKPORT#;
      520    13629    2      TAKCPU_FPT.V.CPU# = A.PORT_ASSIGNMENT;
      521    13630    2      CALL M$TDREQCPU (TAKCPU_FPT) WHENRETURN
      522    13631    3           DO ;
      523    13632    3              CALL TOS$RSW2;
      524    13633    3              A_REG = TOS$RSW_AREG;
      525    13634    3              Q = 128;
      526    13635    3              RETURN_DELTA = 3;
      527    13636    3           END /* WHENRETURN */ ;
      528    13637    2      WHENALTRETURN
      529    13638    3           DO ;
      530    13639    3              IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.ERR# = %E$CPUSTOPPED
      531    13640    3              THEN RETURN_DELTA = 2 ;
      532    13641    3              ELSE RETURN_DELTA = 1 ;
      533    13642    3           END /* WHENALTRETURN */ ;
      534    13643    2      RETURN ;
      535    13644
      536    13645    2   END TOS$MME_TAKCPU;
      537    13646        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:21   
      538    13647        /*I* NAME:         TOS$MME_SCUASG
      539    13648             INTERFACE:
      540    13649             INPUT:        AL   = Subexec # (30 - 32)
      541    13650                                  Test Page # (33 - 35)
      542    13651                           X4   = SCU #
      543    13652             OUTPUT:       STATUS_WD_A - '203333'O               (0 - 17)
      544    13653                                         subexec # / test page # (30 - 35)
      545    13654
      546    13655                           STATUS_WD_B - Status                  (0 successful
      547    13656                                         23 = SCU not ASSIGNED
      548    13657                                         Function Code           (18 - 26)
      549    13658                                         Console Code            (27 - 35)
      550    13659                           RETURN_DELTA - set to 1
      551    13660             DESCRIPTION:  This routine processes the request to ASSIGN an SCU to the
      552    13661                           system.  Unlike a GCOS system CP6 does not have the ability
      553    13662                           to assign an SCU on the fly.  A warning message will be
      554    13663                           issued to that effect, and a status code of 23 (SCU not
      555    13664                           ASSIGNED) will be returned to the user.
      556    13665        */
      557    13666    1   TOS$MME_SCUASG: PROC (A,X4,RETURN_DELTA) ;
      558    13667
      559    13668    2      DCL A                     UBIN WORD ALIGNED;
      560    13669    2      DCL X4                      UBIN HALF ALIGNED;
      561    13670    2      DCL 1 PORT,
      562    13671    2            2 LGTH     UBIN BYTE CALIGNED,
      563    13672    2            2 NUMBER   CHAR (2) CALIGNED ;
      564    13673    2      DCL RETURN_DELTA            SBIN HALF HALIGNED;
      565    13674        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:22   
      566    13675    3      IF (B$SCU$ = ADDR(NIL)) THEN DO;
      567    13676    3              CALL M$SAD(FPT_SAD) WHENALTRETURN
      568    13677    4                   DO;
      569    13678    4                      STATUS_WD_B.STATUS_CODE = 19;
      570    13679    4                      RETURN_DELTA = 1;
      571    13680    4                   END;
      572    13681    3              B$SCU$ = PINCRW(B$SPCL1$,POFFW(ADDR(H_DPS8000_SCU_INFO),B$IS$));
      573    13682    3           END;
      574    13683    2      PORT.LGTH = 2 ;
      575    13684    2      CALL BINCHAR (PORT.NUMBER, X4) ;
      576    13685    2      TOS_ERROR_CODE.ERR# = %E$RPMASGSCU;
      577    13686    2      TOLTS_GETCMD.ERR_CODE = TOS_ERROR_CODE;
      578    13687    2      TOLTS_GETCMD.F1_ = VECTOR (PORT);
      579    13688    2      TOLTS_GETCMD.FLGLEV# = 4;
      580    13689           /* VERIFY THAT SCU IS (STILL) RELEASED */
      581    13690    3      IF B$SCU$ -> SCU_INFO.SCU_STATUS.REL_BIT(X4) THEN DO ;
      582    13691    3              RETURN_DELTA = 1 ;
      583    13692    3              STATUS_WD_B.STATUS_CODE = 0 ;
      584    13693    3           END;
      585    13694    3      ELSE DO;
      586    13695    3              RETURN_DELTA = 1 ;
      587    13696    3              STATUS_WD_B.STATUS_CODE = 19 ;
      588    13697    3           END;
      589    13698    2      CALL XUG$ERRMSG (TOLTS_GETCMD);
      590    13699    2      STATUS_WD_A.SUB_EXEC = A ;
      591    13700    2      STATUS_WD_B.FUNCTION_CODE = %SOLTS_ASGSCU ;
      592    13701    2      STATUS_WD_B.FUNCTION_TYPE = 0 ;
      593    13702           /* SETUP INTER COMM IO CALL TO DISPATCHER */
      594    13703    2      QUEUE_ENTRY(0) = ENTRY_A;
      595    13704    2      QUEUE_ENTRY(1) = ENTRY_B;
      596    13705    2      QUEUE_ENTRY(2) = 0;
      597    13706    2      REQUEST_TYPE = %DRT_BUILD ;
      598    13707    2      SERVICE_CODE = %DSC_ISC ;
      599    13708    2      CALL TOD$DISPATCHER( REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY) ;
      600    13709    2      RETURN ;
      601    13710    2   END TOS$MME_SCUASG ;
      602    13711        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:23   
      603    13712        /*I* NAME:         TOS$MME_SCUREL
      604    13713             INTERFACE:
      605    13714             INPUT:        AL   = Subexec # (30 - 32)
      606    13715                                  Test Page # (33 - 35)
      607    13716                           X4   = SCU #
      608    13717             OUTPUT:       STATUS_WD_A - '203333'O               (0 - 17)
      609    13718                                         subexec # / test page # (30 - 35)
      610    13719
      611    13720                           STATUS_WD_B - Status                  (0 - 17)
      612    13721                                         00 = successful
      613    13722                                         23 = SCU not RELEASED
      614    13723                                         Function Code           (18 - 26)
      615    13724                                         Console Code            (27 - 35)
      616    13725                           RETURN_DELTA - set to 1
      617    13726             DESCRIPTION:  This routine processes the request to RELEASE an SCU from
      618    13727                           the system.  Unlike a GCOS system CP6 does not have the
      619    13728                           ability to release an SCU on the fly.  A warning message
      620    13729                           will be issued to that effect, and a status code of 23
      621    13730                           (SCU not RELEASED) will be returned to the user.
      622    13731        */
      623    13732    1   TOS$MME_SCUREL: PROC (A,X4,RETURN_DELTA) ;
      624    13733
      625    13734    2      DCL A                     UBIN WORD ALIGNED;
      626    13735    2      DCL X4                      UBIN HALF ALIGNED;
      627    13736    2      DCL 1 PORT,
      628    13737    2            2 LGTH     UBIN BYTE CALIGNED,
      629    13738    2            2 NUMBER   CHAR (2) CALIGNED ;
      630    13739    2      DCL RETURN_DELTA            SBIN HALF HALIGNED;
      631    13740        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:24   
      632    13741    3      IF (B$SCU$ = ADDR(NIL)) THEN DO;
      633    13742    3              CALL M$SAD(FPT_SAD) WHENALTRETURN
      634    13743    4                   DO;
      635    13744    4                      STATUS_WD_B.STATUS_CODE = 19;
      636    13745    4                      RETURN_DELTA = 1;
      637    13746    4                   END;
      638    13747    3              B$SCU$ = PINCRW(B$SPCL1$,POFFW(ADDR(H_DPS8000_SCU_INFO),B$IS$));
      639    13748    3           END;
      640    13749           /* VERIFY THAT SCU IS RELEASED (PARTITIONED) */
      641    13750    3      IF B$SCU$ -> SCU_INFO.SCU_STATUS.REL_BIT(X4) THEN DO;
      642    13751    3              RETURN_DELTA = 1 ;
      643    13752    3              STATUS_WD_B.STATUS_CODE = 0 ;
      644    13753    3           END ;
      645    13754    3      ELSE DO;
      646    13755    3              STATUS_WD_B.STATUS_CODE = 19 ;
      647    13756    3              RETURN_DELTA = 1 ;
      648    13757    3           END;
      649    13758    2      PORT.LGTH = 2 ;
      650    13759    2      CALL BINCHAR (PORT.NUMBER, X4) ;
      651    13760    2      TOS_ERROR_CODE.ERR# = %E$RPMRELSCU;
      652    13761    2      TOLTS_GETCMD.ERR_CODE = TOS_ERROR_CODE;
      653    13762    2      TOLTS_GETCMD.F1_ = VECTOR (PORT);
      654    13763    2      TOLTS_GETCMD.FLGLEV# = 4;
      655    13764    2      CALL XUG$ERRMSG (TOLTS_GETCMD);
      656    13765    2      STATUS_WD_A.SUB_EXEC = A ;
      657    13766    2      STATUS_WD_B.FUNCTION_CODE = %SOLTS_RELSCU ;
      658    13767    2      STATUS_WD_B.FUNCTION_TYPE = X4 ;
      659    13768           /* SETUP INTER COMM IO CALL TO DISPATCHER */
      660    13769    2      QUEUE_ENTRY(0) = ENTRY_A;
      661    13770    2      QUEUE_ENTRY(1) = ENTRY_B;
      662    13771    2      QUEUE_ENTRY(2) = 0;
      663    13772    2      REQUEST_TYPE = %DRT_BUILD ;
      664    13773    2      SERVICE_CODE = %DSC_ISC ;
      665    13774    2      CALL TOD$DISPATCHER( REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY) ;
      666    13775    2      RETURN ;
      667    13776    2   END TOS$MME_SCUREL ;
      668    13777        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:25   
      669    13778        /*I* NAME:         TOS$MME_RETCPU
      670    13779             CALL:         CALL TOS$MME_RETCPU(AREG,RETURN_DELTA);
      671    13780             INPUT:        AREG bits 30-35 contains the CPU port number.
      672    13781             OUTPUT:       RETURN_DELTA = 1 if CPU not configured.
      673    13782                           RETURN_DELTA = 2 if CPU is stopped.
      674    13783                           RETURN_DELTA = 3 if request honored.
      675    13784             DESCRIPTION:  M$TDREQCPU is called to return the CPU specified
      676    13785                           to a normal mode.
      677    13786        */
      678    13787
      679    13788    1   TOS$MME_RETCPU: PROC (A, RETURN_DELTA);
      680    13789
      681    13790    2      DCL 1 A ALIGNED,
      682    13791    2            2 MBZ             UBIN(12) UNAL,
      683    13792    2            2 PHYSICAL_CPU    UBIN(6) UNAL ,
      684    13793    2            2 LOGICAL_CPU     UBIN(12) UNAL ,
      685    13794    2            2 PORT_ASSIGNMENT UBIN(6) UNAL;
      686    13795    2      DCL RETURN_DELTA        SBIN HALF HALIGNED ;
      687    13796           %FPT_TDREQCPU (FPTN = RETCPU_FPT, MODE=NORMAL);
      688    13812
      689    13813        /* CODE */
      690    13814
      691    13815    2      RETCPU_FPT.V.CPU# = A.PORT_ASSIGNMENT;
      692    13816    2      CALL M$TDREQCPU (RETCPU_FPT) WHENRETURN
      693    13817    3           DO ;
      694    13818    3              RETURN_DELTA = 3 ;
      695    13819    3           END /* WHENRETURN */ ;
      696    13820    2      WHENALTRETURN
      697    13821    3           DO ;
      698    13822    3              RETURN_DELTA = 1 ;
      699    13823    3           END /* WHENALTRETURN */ ;
      700    13824    2      RETURN ;
      701    13825
      702    13826    2   END TOS$MME_RETCPU;
      703    13827        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:26   
      704    13828        /*I* NAME:         TOS$PROCESS_PACT
      705    13829             AUTHOR:       Scott S. Sheppard
      706    13830             CALL:         CALL TOS$PROCESS_PACT
      707    13831             INTERFACE:    PROCESS_$PACTC
      708    13832                           PROCESS_$PATCP
      709    13833                           PROCESS_$PACTN
      710    13834                           PROCESS_$PACTnnn
      711    13835                           PROCESS_$PACT
      712    13836                           PROCESS_$PACT_ERROR
      713    13837             INPUT:        TEST_INPUT_REQ.TEST_INPUT
      714    13838                           TOS$COMWD
      715    13839             OUTPUT:       TOS$COMWD
      716    13840             DESCRIPTION:  Sets up the  TOLTS <-> PACT  communications word
      717    13841                           (i.e, TOS$COMWD) which is periodically picked up
      718    13842                           by PACT using a MME COMWD request.
      719    13843
      720    13844                           $PACT or $SLTA command options:
      721    13845                              C     - set time count for continuous processing
      722    13846                              NPm   - stop looping on port m
      723    13847                                         where 0 <= m <= 7
      724    13848                              Pm    - loop on port m
      725    13849                                         where 0 <= m <= 7
      726    13850                              nnn   - set time count to nnn minutes where
      727    13851                                         0 <= nnn <= 240
      728    13852        */
      729    13853        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:27   
      730    13854    1   TOS$PROCESS_PACT: PROC ;
      731    13855
      732    13856    2      DCL TOS$COMWD       BIT (36) SYMREF ALIGNED ;
      733    13857    2      DCL 1 COMWD         ALIGNED,
      734    13858    2            2 PROCESSOR   (0:7) BIT (1) UNAL,
      735    13859    2            2 ZERO_CPUS   REDEF PROCESSOR UBIN (8) UNAL,
      736    13860    2            2 *           BIT (10) UNAL,
      737    13861    2            2 STOP_BIT    BIT (1)  UNAL,
      738    13862    2            2 *           BIT (5)  UNAL,
      739    13863    2            2 TIME_COUNT  UBIN (12) UNAL ;
      740    13864    2      DCL 1 BINARY_WORD   ALIGNED,
      741    13865    2            2 *           UBIN (24) UNAL,
      742    13866    2            2 LAST12      UBIN (12) UNAL ;
      743    13867    2      DCL BINARY_WORD_ REDEF BINARY_WORD UBIN (36) ALIGNED ;
      744    13868    2      DCL VALID_PACT_RQST BIT (1) CALIGNED ;
      745    13869    2      DCL CUR_CHAR        UBIN (36) ALIGNED ;
      746    13870    2      DCL LGTH            UBIN (36) ALIGNED ;
      747    13871    2      DCL ON              BIT (1) CONSTANT CALIGNED INIT ('1'B) ;
      748    13872    2      DCL OFF             BIT (1) CONSTANT CALIGNED INIT ('0'B) ;
      749    13873           %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:28   
      750    13874        /* Code */
      751    13875
      752    13876           /* Initialization */
      753    13877    2      COMWD = TOS$COMWD ;
      754    13878    2      VALID_PACT_RQST = %TRUE ;
      755    13879
      756    13880           /* Find length and parse through various PACT options. */
      757    13881    2      CALL INDEX (LGTH, ' ', TOT$ECP.TEST_REQ, 6) ;
      758    13882    2      CUR_CHAR = 5 ;
      759    13883    3      DO WHILE (CUR_CHAR < LGTH  AND  VALID_PACT_RQST) ;
      760    13884    4         DO SELECT (TOT$ECP.TEST_REQ_(CUR_CHAR)) ;
      761    13885    4            SELECT (' ') ;
      762    13886    4            CALL PROCESS_$PACT ;
      763    13887    4            SELECT ('C') ;
      764    13888    4            CALL PROCESS_$PACTC ;
      765    13889    4            SELECT ('N') ;
      766    13890    4            CALL PROCESS_$PACTN ;
      767    13891    4            SELECT ('P') ;
      768    13892    4            CALL PROCESS_$PACTP (ON) ;
      769    13893    4            SELECT ('0','1','2','3','4','5','6','7','8','9') ;
      770    13894    4            CALL PROCESS_$PACTNNN ;
      771    13895    4            SELECT (ELSE) ;
      772    13896    4         CALL PROCESS_$PACT_ERROR (%E$BADPACTREQ) ;
      773    13897    4         END /* SELECT */ ;
      774    13898    3      END /* WHILE */ ;
      775    13899
      776    13900           /* Assign local comwd to actual comwd if valid. */
      777    13901    2      IF VALID_PACT_RQST
      778    13902    2      THEN TOS$COMWD = COMWD ;
      779    13903    2      ELSE CALL PROCESS_$PACT_ERROR (%E$NOCOMWDALTER) ;
      780    13904    2      RETURN ;
      781    13905
      782    13906        /* END TOS$PROCESS_PACT */
      783    13907        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:29   
      784    13908        /*I* NAME:         PROCESS_$PACT
      785    13909             AUTHOR:       Scott S. Sheppard
      786    13910             CALL:         CALL PROCESS_$PACT
      787    13911             INTERFACE:    None Called.
      788    13912             INPUT:        No system data accessed.
      789    13913             OUTPUT:       COMWD.STOP_BIT - Set to terminate PACT
      790    13914                           CUR_CHAR - set to move past the trailing blank
      791    13915             DESCRIPTION:  Sets up the  TOLTS <-> PACT  communications word
      792    13916                           for PACT termination request.
      793    13917                           Valid Form: $PACT
      794    13918        */
      795    13919
      796    13920    2   PROCESS_$PACT: PROC ;
      797    13921
      798    13922        /* Code */
      799    13923
      800    13924    3      COMWD.STOP_BIT = '1'B ;
      801    13925    3      CUR_CHAR = CUR_CHAR + 1 ;
      802    13926    3      RETURN ;
      803    13927
      804    13928    3   END PROCESS_$PACT ;
      805    13929        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:30   
      806    13930        /*I* NAME:         PROCESS_$PACTC
      807    13931             AUTHOR:       Scott S. Sheppard
      808    13932             CALL:         CALL PROCESS_$PACTC
      809    13933             INTERFACE:    None Called.
      810    13934             INPUT:        CUR_CHAR - Current index into the $PACT request
      811    13935             OUTPUT:       COMWD.TIME_COUNT - set to zero (Continuous Checking)
      812    13936                           CUR_CHAR         - Advanced to next character
      813    13937             DESCRIPTION:  Sets up the  TOLTS <-> PACT  communications word
      814    13938                           for continuous processing mode.
      815    13939                           Valid Form: $PACT[options]C[options]
      816    13940        */
      817    13941
      818    13942    2   PROCESS_$PACTC: PROC ;
      819    13943
      820    13944        /* Code */
      821    13945
      822    13946    3      COMWD.TIME_COUNT = 0 ;
      823    13947    3      CUR_CHAR = CUR_CHAR + 1 ;
      824    13948    3      RETURN ;
      825    13949
      826    13950    3   END PROCESS_$PACTC ;
      827    13951        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:31   
      828    13952        /*I* NAME:         PROCESS_$PACTN
      829    13953             AUTHOR:       Scott S. Sheppard
      830    13954             CALL:         CALL PROCESS_$PACTN
      831    13955             INTERFACE:    PROCESS_$PACTP
      832    13956                           PROCESS_$PACT_ERROR
      833    13957             INPUT:        TOT$ECP.TEST_REQ     CUR_CHAR
      834    13958             OUTPUT:       CUR_CHAR - advanced to next character
      835    13959             DESCRIPTION:  Sets up the  TOLTS <-> PACT  communications word
      836    13960                           to cancel port loop processing mode.
      837    13961                           Valid Form: $PACT[options] NPm[options]
      838    13962        */
      839    13963
      840    13964    2   PROCESS_$PACTN: PROC ;
      841    13965
      842    13966        /* Code */
      843    13967
      844    13968    3      IF CUR_CHAR < LGTH - 2
      845    13969    4      THEN DO ;
      846    13970    4              CUR_CHAR = CUR_CHAR + 1 ;
      847    13971    4              IF TOT$ECP.TEST_REQ_(CUR_CHAR) = 'P'
      848    13972    4              THEN CALL PROCESS_$PACTP (OFF) ;
      849    13973    4              ELSE CALL PROCESS_$PACT_ERROR (%E$BADNPFORM) ;
      850    13974    4           END /* THEN */ ;
      851    13975    3      ELSE CALL PROCESS_$PACT_ERROR (%E$BADNPFORM) ;
      852    13976    3      RETURN ;
      853    13977
      854    13978    3   END PROCESS_$PACTN ;
      855    13979        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:32   
      856    13980        /*I* NAME:         PROCESS_$PACTP
      857    13981             AUTHOR:       Scott S. Sheppard
      858    13982             CALL:         CALL PROCESS_$PACTP (BIT)
      859    13983             INTERFACE:    CHARBIN
      860    13984                           PROCESS_$PACT_ERROR
      861    13985             INPUT:        BIT     - set port to on or off
      862    13986                           TOT$ECP.TEST_REQ
      863    13987                           CUR_CHAR- current character under examination
      864    13988                           LGTH    - number of characters entered for
      865    13989                                     the $PACT command
      866    13990             OUTPUT:       COMWD.PROCESSOR   - corresponding bit set for port
      867    13991                                               number entered
      868    13992                           CUR_CHAR          _ advanced to the next character
      869    13993             DESCRIPTION:  Sets up the  TOLTS <-> PACT  communications word
      870    13994                           to modify port status.
      871    13995                           Valid Form: $PACT[options][N]Pm[options]
      872    13996        */
      873    13997        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:33   
      874    13998    2   PROCESS_$PACTP: PROC (SET_CPU_PORT) ;
      875    13999
      876    14000    3      DCL SET_CPU_PORT               BIT (1) CALIGNED ;
      877    14001
      878    14002        /* Code */
      879    14003
      880    14004    3      IF CUR_CHAR < LGTH - 1
      881    14005    4      THEN DO ;
      882    14006    4              CUR_CHAR = CUR_CHAR + 1 ;
      883    14007    4              IF TOT$ECP.TEST_REQ_(CUR_CHAR) >= '0' AND TOT$ECP.TEST_REQ_(CUR_CHAR) <
             14007                       '8'
      884    14008    5              THEN DO ;
      885    14009    5                      CALL CHARBIN (BINARY_WORD_, TOT$ECP.TEST_REQ_(CUR_CHAR)) ;
      886    14010    5                      COMWD.PROCESSOR(BINARY_WORD_) = SET_CPU_PORT ;
      887    14011    5                      CUR_CHAR = CUR_CHAR + 1 ;
      888    14012    5                   END /* THEN */ ;
      889    14013    4              ELSE CALL PROCESS_$PACT_ERROR (%E$BADPORT) ;
      890    14014    4           END /* THEN */ ;
      891    14015    3      ELSE CALL PROCESS_$PACT_ERROR (%E$BADPORT) ;
      892    14016    3      RETURN ;
      893    14017
      894    14018    3   END PROCESS_$PACTP ;
      895    14019        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:34   
      896    14020        /*I* NAME:         PROCESS_$PACTnnn
      897    14021             AUTHOR:       Scott S. Sheppard
      898    14022             CALL:         CALL PROCESS_$PACTNNN
      899    14023             INTERFACE:    CHARBIN
      900    14024                           SUBSTRING
      901    14025                           PROCESS_$PACT_ERROR
      902    14026             INPUT:        TOT$ECP.TEST_REQ
      903    14027                           CUR_CHAR- current character under examination
      904    14028                           LGTH    - number of characters entered for
      905    14029                                     the $PACT command
      906    14030             OUTPUT:       COMWD.TIME_COUNT - Number of minutes to run PACT
      907    14031                           CUR_CHAR         - Advanced past nnn sequence
      908    14032             DESCRIPTION:  Sets up the  TOLTS <-> PACT  communications word
      909    14033                           with time count specified.
      910    14034                           Valid Form: $PACT[options]nnn[options]
      911    14035        */
      912    14036        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:35   
      913    14037    2   PROCESS_$PACTNNN: PROC ;
      914    14038
      915    14039    3      DCL DIGITS                     UBIN (36) ALIGNED ;
      916    14040    3      DCL START                      UBIN (36) ALIGNED ;
      917    14041
      918    14042        /* Code */
      919    14043
      920    14044    3      DIGITS = 0 ;
      921    14045    3      START = CUR_CHAR ;
      922    14046    4      DO WHILE (TOT$ECP.TEST_REQ_(CUR_CHAR) >= '0' AND
      923    14047    4              TOT$ECP.TEST_REQ_(CUR_CHAR) <= '9' AND
      924    14048    4              CUR_CHAR < LGTH) ;
      925    14049    4         DIGITS = DIGITS + 1 ;
      926    14050    4         CUR_CHAR = CUR_CHAR + 1 ;
      927    14051    4      END /* WHILE */ ;
      928    14052
      929    14053    3      IF DIGITS < 4
      930    14054    4      THEN DO ;
      931    14055    4              CALL CHARBIN (BINARY_WORD_,
      932    14056    4                      SUBSTR (TOT$ECP.TEST_REQ, START, DIGITS)) ;
      933    14057    4              IF BINARY_WORD_ < 241
      934    14058    4              THEN COMWD.TIME_COUNT = BINARY_WORD.LAST12 ;
      935    14059    4              ELSE CALL PROCESS_$PACT_ERROR (%E$BADNNN) ;
      936    14060    4           END /* THEN */ ;
      937    14061    3      ELSE CALL PROCESS_$PACT_ERROR (%E$BADNNN) ;
      938    14062    3      RETURN ;
      939    14063
      940    14064    3   END PROCESS_$PACTNNN ;
      941    14065        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:36   
      942    14066        /*I* NAME:         PROCESS_$PACT_ERROR
      943    14067             PURPOSE:      Informs of an invalid request
      944    14068             INPUT:        ERROR_VALUE
      945    14069             OUTPUT:       TOS_ERROR_CODE
      946    14070                           VALID_PACT_REQUEST
      947    14071             DESCRIPTION:  This procedure assigns the passed error value to
      948    14072                           the error code and calls XUG$ERRMSG to print  an
      949    14073                           error message.
      950    14074        */
      951    14075
      952    14076    2   PROCESS_$PACT_ERROR: PROC (ERROR_VALUE) ;
      953    14077
      954    14078    3      DCL ERROR_VALUE                UBIN WORD ALIGNED ;
      955    14079    3      DCL 1 PACTSLTA STATIC,
      956    14080    3            2 *                      UBIN BYTE UNAL INIT (5),
      957    14081    3            2 REQ                    CHAR (5)  UNAL ;
      958    14082
      959    14083        /* Code */
      960    14084
      961    14085    3      VALID_PACT_RQST = %FALSE ;
      962    14086    3      PACTSLTA.REQ = SUBSTR (TOT$ECP.TEST_REQ, 0, 5) ;
      963    14087    3      TOS_ERROR_CODE.ERR# = ERROR_VALUE ;
      964    14088    3      TOLTS_GETCMD.ERR_CODE = TOS_ERROR_CODE;
      965    14089    3      TOLTS_GETCMD.F1_ = VECTOR (PACTSLTA);
      966    14090    3      TOLTS_GETCMD.FLGLEV# = 1;
      967    14091    3      CALL XUG$ERRMSG (TOLTS_GETCMD);
      968    14092    3      RETURN ;
      969    14093
      970    14094    3   END PROCESS_$PACT_ERROR ;
      971    14095    2   END TOS$PROCESS_PACT ;
      972    14096    1   END TOS$SOLTS;

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:37   
--  Include file information  --

   XU_MACRO_C.:E05TOU  is referenced.
   XUG_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   TO_PERR_C.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure TOS$SOLTS.

   Procedure TOS$SOLTS requires 1045 words for executable code.
   Procedure TOS$SOLTS requires 30 words of local(AUTO) storage.

    No errors detected in file TOS$SOLTS.:E05TSI    .

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:38   

 Object Unit name= TOS$SOLTS                                  File name= TOS$SOLTS.:E05TOU
 UTS= JUL 30 '97 06:35:08.56 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    28     34  TOS$SOLTS
    2  RoData even  UTS      2      2  TOS$SOLTS
    3   Proc  even  none  1045   2025  TOS$SOLTS
    4  RoData even  none    32     40  TOS$SOLTS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        4  TOS$SOLTS
     3    253                  yes      Std        0  TOS$PACT

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    1      1  TOS$COMWD                          1      2  TOS$RSW_AREG
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:39   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 XUG$ERRMSG
         yes           Std       3 TOD$DISPATCHER
         yes           Std       0 TOS$RSW2
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                B$IS$
     B$SPCL1$                              S_PORTNR                              S_MPSTATE
     H_DPS8000_SCU_INFO                    TOT$ECP                               TOLTS_GETCMD
     TOS$COMWD                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:40   


        1        1        /*M* TOS$SOLTS     TOLTS System On-Line Testing System */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOS$SOLTS
       12       12             PURPOSE:      MME Service Routines for SOLTS.
       13       13                           $PACT / $SLTA communications word alterations
       14       14             DESCRIPTION:  Procedures necessary to handle SOLTS MMES.
       15       15             REFERENCE:    CP-6 Release D0E0
       16       16             LAST UPDATE:  02/25/86
       17       17        */
       18       18        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:41   
       19       19        /*F* NAME:         TOS$SOLTS
       20       20             DESCRIPTION:  MME Service Routines
       21       21                           TOS$SOLTS: procedure
       22       22                           TOS$PACT: entry
       23       23                              TOS$MME_COMWD
       24       24                              TOS$MME_CPUASG
       25       25                              TOS$MME_CPUREL
       26       26                              TOS$MME_HISREG
       27       27                              TOS$MME_RETRY
       28       28                              TOS$MME_SCUASG
       29       29                              TOS$MME_SCUREL
       30       30                              TOS$MME_TAKCPU
       31       31                              TOS$MME_RETCPU
       32       32                              TOS$PROCESS_PACT
       33       33                                 PROCESS_$PACT
       34       34                                 PROCESS_$PACTC
       35       35                                 PROCESS_$PACTN
       36       36                                 PROCESS_$PACTP
       37       37                                 PROCESS_$PACTNNN
       38       38                                 PROCESS_$PACT_ERROR
       39       39        */
       40       40
       41       41        TOS$SOLTS: PROC (MME,MREG,MME_INSTR$,RETURN_DELTA);

     41  3 000000   000000 700200 xent  TOS$SOLTS    TSX0  ! X66_AUTO_4
         3 000001   000036 000004                    ZERO    30,4

       42       42
       43       43        /* Include Files */
       44       44
       45       45           %INCLUDE B_ERRORS_C ;
       46     1172           %INCLUDE B_SEGIDS_C;
       47     1711           %INCLUDE CP_6;
       48     7270           %INCLUDE CP_6_SUBS;
       49     7810           %INCLUDE TOT_TOLTS_M;
       50     8928           %INCLUDE TO_PERR_C ;
       51     9513           %INCLUDE XUG_ENTRY ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:42   
       52     9544           %INCLUDE XU_MACRO_C;
       53    12650           %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:43   
       54    12651        /* Variables */
       55    12652
       56    12653           %MME ;
       57    12674           %MREG ;
       58    12696           %MME_INSTR$ ;
       59    12699           %RETURN_DELTA ;
       60    12702           %B$TCB ;
       61    12705           %B$ALT ;
       62    12713           %VLP_ERRCODE (FPTN = TOS_ERROR_CODE,
       63    12714                         FCG  = 'TO',
       64    12715                         MID  = 'S',
       65    12716                         SEV  = 0) ;
       66    12761
       67    12762        /* External Variables */
       68    12763
       69    12764    1      DCL B$TCB$                PTR SYMREF ;
       70    12765    1      DCL B$IS$                 PTR SYMREF;
       71    12766    1      DCL B$SPCL1$              PTR SYMREF;
       72    12767    1      DCL S_PORTNR BIT(1)  SYMREF;
       73    12768    1      DCL S_MPSTATE BIT(1) SYMREF;
       74    12769    1      DCL 1 H_DPS8000_SCU_INFO BIT(1) SYMREF;
       75    12770    1      DCL TOS$COMWD             BIT (36) STATIC SYMDEF ALIGNED;
       76    12771    1      DCL TOS$RSW_AREG          BIT (36) STATIC SYMDEF ALIGNED ;
       77    12772           %TOT$ECP (STCLASS = SYMREF) ;
       78    12821           %XUG_GETCMD (STCLASS  = SYMREF,
       79    12822                        NAME     = TOLTS_GETCMD,
       80    12823                        FLGLEV   = 0);
       81    13161           %FPT_SAD(USERSID=%SPCL1SID,MONSID=%ISSID);
       82    13176
       83    13177        /* External Entry Points */
       84    13178
       85    13179    1      DCL TOS$RSW2                      ENTRY ;
       86    13180    1      DCL TOD$DISPATCHER                 ENTRY(3) ;
       87    13181
       88    13182        /* Local Variables and Flag */
       89    13183
       90    13184    1      DCL SCUX UBIN ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:44   
       91    13185    1      DCL B$SCU$ PTR STATIC INIT(ADDR(NIL));
       92    13186    1      DCL B$PORT$  PTR STATIC INIT(ADDR(NIL));
       93    13187    1      DCL B$MPSTATE$  PTR STATIC INIT(ADDR(NIL));
       94    13188    1      DCL B$WORD(0:0) UBIN WORD BASED;
       95    13189    1      DCL QUEUE_ENTRY                    (0:2) UBIN(36);
       96    13190    1      DCL REQUEST_TYPE                   UBIN (36) ;
       97    13191    1      DCL SERVICE_CODE                   UBIN (18) ;
       98    13192    1      DCL 1 STATUS_WD_A STATIC,
       99    13193    1            2 RASE_CODE       BIT(18) UNAL INIT ('203333'O) ,
      100    13194    1            2 SUB_EXEC        UBIN (18) UNAL ;
      101    13195    1      DCL ENTRY_A REDEF STATUS_WD_A UBIN (36) ;
      102    13196    1      DCL 1 STATUS_WD_B STATIC,
      103    13197    1            2 STATUS_CODE     UBIN (18) UNAL ,
      104    13198    1            2 FUNCTION_CODE   UBIN (9) UNAL ,
      105    13199    1            2 FUNCTION_TYPE   UBIN (9) UNAL ;
      106    13200    1      DCL ENTRY_B REDEF STATUS_WD_B UBIN (36) ;
      107    13201    1      DCL ENTRY_C             UBIN (36) UNAL STATIC ;
      108    13202         /* SCU TBL FROM HF_DATA_D */
      109    13203    1      DCL 1 SCU_INFO (0:1) BASED ALIGNED,
      110    13204    1            2 LOWER_BOUND UBIN HALF UNAL,
      111    13205             /* Lower bound of SCU - modulo 1MW */
      112    13206    1            2 UPPER_BOUND UBIN HALF UNAL,
      113    13207             /* Upper bound of SCU - module 1MW */
      114    13208    1            2 PAGES UBIN HALF UNAL,
      115    13209            /* Number of pages left to release or return */
      116    13210    1            2 SCU_STATUS,
      117    13211    1              3 NOT_CONFIG BIT(1) UNAL,
      118    13212             /* SCU not configured            */
      119    13213    1              3 REL_BIT BIT(1) UNAL,
      120    13214             /* SCU released                  */
      121    13215    1              3 REL_IN_PROGRESS BIT(1) UNAL,
      122    13216             /* Memory release in progress   */
      123    13217    1              3 RET_IN_PROGRESS BIT(1) UNAL,
      124    13218             /* Memory return in progress    */
      125    13219    1              3 LOW_MEM BIT(1) UNAL,
      126    13220             /* Set if this is low memory */
      127    13221    1              3 * BIT(13) UNAL;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:45   
      128    13222           %EJECT;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:46   
      129    13223        /*D* NAME:         TOS$SOLTS
      130    13224             CALL:         CALL TOS$SOLTS(MME,MREG,MME_INSTR$,RETURN_DELTA);
      131    13225             INTERFACE:    TOS$MME_COMWD
      132    13226                           TOS$MME_HISREG
      133    13227                           TOS$MME_RETCPU
      134    13228                           TOS$MME_RETRY
      135    13229                           TOS$MME_TAKCPU
      136    13230             INPUT:        MME is an array of the the MME instruction and the
      137    13231                           first 6 words following it in the subexec.
      138    13232
      139    13233                           MREG is a structure of the registers at the time of
      140    13234                           the MME.
      141    13235
      142    13236                           MME_INSTR$ is a pointer to the MME instruction.
      143    13237
      144    13238             OUTPUT:       RETURN_DELTA is the number of words to return
      145    13239                           pass the MME instruction when returning to the
      146    13240                           subexec.
      147    13241             DESCRIPTION:  Calls a MME Service routine to service one of the
      148    13242                           SOLTS unique MMEs.
      149    13243        */
      150    13244        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:47   
      151    13245        /* Decode MME */
      152    13246
      153    13247    2      DO CASE (-MME.INST.NO);

  13247  3 000002   200003 470500                    LDP0    @MME,,AUTO
         3 000003   000000 236100                    LDQ     0,,PR0
         3 000004   000022 732000                    QRS     18
         3 000005   000027 676000 xsym               ERQ     B_VECTNIL+23
         3 000006   000052 136007                    SBLQ    42,DL
         3 000007   000070 116007                    CMPQ    56,DL
         3 000010   000012 602006 3                  TNC     s:13247+8,QL
         3 000011   000252 710000 3                  TRA     s:13267
         3 000012   000102 710000 3                  TRA     s:13249
         3 000013   000157 710000 3                  TRA     s:13255
         3 000014   000167 710000 3                  TRA     s:13257
         3 000015   000177 710000 3                  TRA     s:13259
         3 000016   000235 710000 3                  TRA     s:13265
         3 000017   000252 710000 3                  TRA     s:13267
         3 000020   000252 710000 3                  TRA     s:13267
         3 000021   000252 710000 3                  TRA     s:13267
         3 000022   000252 710000 3                  TRA     s:13267
         3 000023   000252 710000 3                  TRA     s:13267
         3 000024   000252 710000 3                  TRA     s:13267
         3 000025   000252 710000 3                  TRA     s:13267
         3 000026   000252 710000 3                  TRA     s:13267
         3 000027   000252 710000 3                  TRA     s:13267
         3 000030   000252 710000 3                  TRA     s:13267
         3 000031   000252 710000 3                  TRA     s:13267
         3 000032   000252 710000 3                  TRA     s:13267
         3 000033   000252 710000 3                  TRA     s:13267
         3 000034   000252 710000 3                  TRA     s:13267
         3 000035   000252 710000 3                  TRA     s:13267
         3 000036   000252 710000 3                  TRA     s:13267
         3 000037   000252 710000 3                  TRA     s:13267
         3 000040   000252 710000 3                  TRA     s:13267
         3 000041   000252 710000 3                  TRA     s:13267
         3 000042   000252 710000 3                  TRA     s:13267
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:48   
         3 000043   000252 710000 3                  TRA     s:13267
         3 000044   000252 710000 3                  TRA     s:13267
         3 000045   000252 710000 3                  TRA     s:13267
         3 000046   000252 710000 3                  TRA     s:13267
         3 000047   000252 710000 3                  TRA     s:13267
         3 000050   000252 710000 3                  TRA     s:13267
         3 000051   000252 710000 3                  TRA     s:13267
         3 000052   000252 710000 3                  TRA     s:13267
         3 000053   000252 710000 3                  TRA     s:13267
         3 000054   000136 710000 3                  TRA     s:13253
         3 000055   000115 710000 3                  TRA     s:13251
         3 000056   000252 710000 3                  TRA     s:13267
         3 000057   000252 710000 3                  TRA     s:13267
         3 000060   000252 710000 3                  TRA     s:13267
         3 000061   000252 710000 3                  TRA     s:13267
         3 000062   000252 710000 3                  TRA     s:13267
         3 000063   000252 710000 3                  TRA     s:13267
         3 000064   000252 710000 3                  TRA     s:13267
         3 000065   000252 710000 3                  TRA     s:13267
         3 000066   000252 710000 3                  TRA     s:13267
         3 000067   000252 710000 3                  TRA     s:13267
         3 000070   000252 710000 3                  TRA     s:13267
         3 000071   000252 710000 3                  TRA     s:13267
         3 000072   000252 710000 3                  TRA     s:13267
         3 000073   000252 710000 3                  TRA     s:13267
         3 000074   000252 710000 3                  TRA     s:13267
         3 000075   000252 710000 3                  TRA     s:13267
         3 000076   000252 710000 3                  TRA     s:13267
         3 000077   000252 710000 3                  TRA     s:13267
         3 000100   000207 710000 3                  TRA     s:13261
         3 000101   000222 710000 3                  TRA     s:13263

      154    13248    2         CASE (%COMWD);

      155    13249    2            CALL TOS$MME_COMWD(MREG.A,MREG.Q,RETURN_DELTA);

  13249  3 000102   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:49   
         3 000103   200021 756100                    STQ     BINARY_WORD+1,,AUTO
         3 000104   200004 236100                    LDQ     @MREG,,AUTO
         3 000105   000005 036003                    ADLQ    5,DU
         3 000106   200020 756100                    STQ     COMWD+1,,AUTO
         3 000107   200004 236100                    LDQ     @MREG,,AUTO
         3 000110   000004 036003                    ADLQ    4,DU
         3 000111   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000112   000260 701000 3                  TSX1    TOS$MME_COMWD
         3 000113   000000 011000                    NOP     0
         3 000114   000252 710000 3                  TRA     s:13267

      156    13250    2         CASE (%CPUASG) ;

      157    13251    2            CALL TOS$MME_CPUASG (MREG.X2, MREG.X4, MREG.A, MREG.Q,  RETURN_DELTA);

  13251  3 000115   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000116   200023 756100                    STQ     CUR_CHAR+1,,AUTO
         3 000117   200004 236100                    LDQ     @MREG,,AUTO
         3 000120   000005 036003                    ADLQ    5,DU
         3 000121   200022 756100                    STQ     VALID_PACT_RQST+1,,AUTO
         3 000122   200004 236100                    LDQ     @MREG,,AUTO
         3 000123   000004 036003                    ADLQ    4,DU
         3 000124   200021 756100                    STQ     BINARY_WORD+1,,AUTO
         3 000125   200004 236100                    LDQ     @MREG,,AUTO
         3 000126   000002 036003                    ADLQ    2,DU
         3 000127   200020 756100                    STQ     COMWD+1,,AUTO
         3 000130   200004 236100                    LDQ     @MREG,,AUTO
         3 000131   000001 036003                    ADLQ    1,DU
         3 000132   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000133   000276 701000 3                  TSX1    TOS$MME_CPUASG
         3 000134   000000 011000                    NOP     0
         3 000135   000252 710000 3                  TRA     s:13267

      158    13252    2         CASE (%CPUREL) ;

      159    13253    2            CALL TOS$MME_CPUREL (MREG.X2, MREG.X4, MREG.A, MREG.Q, RETURN_DELTA);

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:50   
  13253  3 000136   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000137   200023 756100                    STQ     CUR_CHAR+1,,AUTO
         3 000140   200004 236100                    LDQ     @MREG,,AUTO
         3 000141   000005 036003                    ADLQ    5,DU
         3 000142   200022 756100                    STQ     VALID_PACT_RQST+1,,AUTO
         3 000143   200004 236100                    LDQ     @MREG,,AUTO
         3 000144   000004 036003                    ADLQ    4,DU
         3 000145   200021 756100                    STQ     BINARY_WORD+1,,AUTO
         3 000146   200004 236100                    LDQ     @MREG,,AUTO
         3 000147   000002 036003                    ADLQ    2,DU
         3 000150   200020 756100                    STQ     COMWD+1,,AUTO
         3 000151   200004 236100                    LDQ     @MREG,,AUTO
         3 000152   000001 036003                    ADLQ    1,DU
         3 000153   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000154   000517 701000 3                  TSX1    TOS$MME_CPUREL
         3 000155   000000 011000                    NOP     0
         3 000156   000252 710000 3                  TRA     s:13267

      160    13254    2         CASE (%HISREG);

      161    13255    2            CALL TOS$MME_HISREG(MREG.A,RETURN_DELTA);

  13255  3 000157   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000160   200020 756100                    STQ     COMWD+1,,AUTO
         3 000161   200004 236100                    LDQ     @MREG,,AUTO
         3 000162   000004 036003                    ADLQ    4,DU
         3 000163   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000164   000746 701000 3                  TSX1    TOS$MME_HISREG
         3 000165   000000 011000                    NOP     0
         3 000166   000252 710000 3                  TRA     s:13267

      162    13256    2         CASE (%RETCPU);

      163    13257    2            CALL TOS$MME_RETCPU(MREG.A,RETURN_DELTA);

  13257  3 000167   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000170   200020 756100                    STQ     COMWD+1,,AUTO
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:51   
         3 000171   200004 236100                    LDQ     @MREG,,AUTO
         3 000172   000004 036003                    ADLQ    4,DU
         3 000173   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000174   001347 701000 3                  TSX1    TOS$MME_RETCPU
         3 000175   000000 011000                    NOP     0
         3 000176   000252 710000 3                  TRA     s:13267

      164    13258    2         CASE (%RETRY);

      165    13259    2            CALL TOS$MME_RETRY(MREG.A,RETURN_DELTA);

  13259  3 000177   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000200   200020 756100                    STQ     COMWD+1,,AUTO
         3 000201   200004 236100                    LDQ     @MREG,,AUTO
         3 000202   000004 036003                    ADLQ    4,DU
         3 000203   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000204   000754 701000 3                  TSX1    TOS$MME_RETRY
         3 000205   000000 011000                    NOP     0
         3 000206   000252 710000 3                  TRA     s:13267

      166    13260    2         CASE (%SCUASG) ;

      167    13261    2            CALL TOS$MME_SCUASG (MREG.A,MREG.X4,RETURN_DELTA);

  13261  3 000207   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000210   200021 756100                    STQ     BINARY_WORD+1,,AUTO
         3 000211   200004 236100                    LDQ     @MREG,,AUTO
         3 000212   000002 036003                    ADLQ    2,DU
         3 000213   200020 756100                    STQ     COMWD+1,,AUTO
         3 000214   200004 236100                    LDQ     @MREG,,AUTO
         3 000215   000004 036003                    ADLQ    4,DU
         3 000216   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000217   001037 701000 3                  TSX1    TOS$MME_SCUASG
         3 000220   000000 011000                    NOP     0
         3 000221   000252 710000 3                  TRA     s:13267

      168    13262    2         CASE (%SCUREL) ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:52   

      169    13263    2            CALL TOS$MME_SCUREL (MREG.A,MREG.X4,RETURN_DELTA);

  13263  3 000222   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000223   200021 756100                    STQ     BINARY_WORD+1,,AUTO
         3 000224   200004 236100                    LDQ     @MREG,,AUTO
         3 000225   000002 036003                    ADLQ    2,DU
         3 000226   200020 756100                    STQ     COMWD+1,,AUTO
         3 000227   200004 236100                    LDQ     @MREG,,AUTO
         3 000230   000004 036003                    ADLQ    4,DU
         3 000231   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000232   001202 701000 3                  TSX1    TOS$MME_SCUREL
         3 000233   000000 011000                    NOP     0
         3 000234   000252 710000 3                  TRA     s:13267

      170    13264    2         CASE (%TAKCPU);

      171    13265    2            CALL TOS$MME_TAKCPU(MREG.A,MREG.Q,MREG.X1,RETURN_DELTA);

  13265  3 000235   200006 236100                    LDQ     @RETURN_DELTA,,AUTO
         3 000236   200022 756100                    STQ     VALID_PACT_RQST+1,,AUTO
         3 000237   200004 236100                    LDQ     @MREG,,AUTO
         3 000240   400000 036007                    ADLQ    -131072,DL
         3 000241   200021 756100                    STQ     BINARY_WORD+1,,AUTO
         3 000242   200004 236100                    LDQ     @MREG,,AUTO
         3 000243   000005 036003                    ADLQ    5,DU
         3 000244   200020 756100                    STQ     COMWD+1,,AUTO
         3 000245   200004 236100                    LDQ     @MREG,,AUTO
         3 000246   000004 036003                    ADLQ    4,DU
         3 000247   200017 756100                    STQ     SERVICE_CODE+3,,AUTO
         3 000250   000762 701000 3                  TSX1    TOS$MME_TAKCPU
         3 000251   000000 011000                    NOP     0

      172    13266    2      END /* CASE */ ;

      173    13267    1      RETURN;

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:53   
  13267  3 000252   000000 702200 xent               TSX2  ! X66_ARET

      174    13268
      175    13269        /* END TOS$SOLTS */
      176    13270        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:54   
      177    13271        /*D*  NAME:        TOS$PACT
      178    13272              ENTRY:
      179    13273              AUTHOR:      Scott S. Sheppard
      180    13274              INTERFACE:   TOS$PROCESS_PACT
      181    13275              DESCRIPTION: This entry point calls procedure TOS$PROCESS_PACT
      182    13276                           to handle PACT requests from TOLTS.
      183    13277        */
      184    13278
      185    13279    1   TOS$PACT: ENTRY ;

  13279  3 000253   000000 700200 xent  TOS$PACT     TSX0  ! X66_AUTO_4
         3 000254   000036 000004                    ZERO    30,4

      186    13280
      187    13281    1      CALL TOS$PROCESS_PACT ;

  13281  3 000255   001374 701000 3                  TSX1    TOS$PROCESS_PACT
         3 000256   000000 011000                    NOP     0

      188    13282    1      RETURN ;

  13282  3 000257   000000 702200 xent               TSX2  ! X66_ARET

      189    13283
      190    13284        %EJECT;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:55   
      191    13285        /*I* NAME:         TOS$MME_COMWD
      192    13286             CALL:         CALL TOS$MME_COMWD(AREG,QREG,RETURN_DELTA);
      193    13287             INPUT:        AREG
      194    13288                           QREG
      195    13289             OUTPUT:       RETURN_DELTA = 1
      196    13290                           TOS$COMWD
      197    13291             DESCRIPTION:  This procedure alters the SOLTS communications
      198    13292                           word. The A register contains bits that are to
      199    13293                           be ANDed in/out of the word.    The Q register
      200    13294                           contains bits to be  ORed  in.   The resulting
      201    13295                           communications  word is returned to the  TOLTS
      202    13296                           Subexecutive in the Q register.
      203    13297        */
      204    13298
      205    13299    1   TOS$MME_COMWD: PROC (A, Q, RETURN_DELTA);

  13299  3 000260   200016 741300       TOS$MME_COM* STX1  ! SERVICE_CODE+2,,AUTO

      206    13300
      207    13301    2      DCL A            BIT (36) ALIGNED ;
      208    13302    2      DCL Q            BIT (36) ALIGNED ;
      209    13303    2      DCL RETURN_DELTA SBIN HALF;
      210    13304
      211    13305    3      DO INHIBIT;

      212    13306    3         TOS$COMWD = A & TOS$COMWD;

  13306  3 000261   200017 470700                    LDP0  ! @A,,AUTO
         3 000262   000000 236300                    LDQ   ! 0,,PR0
         3 000263   000001 376200 1                  ANQ   ! TOS$COMWD
         3 000264   000001 756200 1                  STQ   ! TOS$COMWD

      213    13307    3         TOS$COMWD = Q | TOS$COMWD;

  13307  3 000265   200020 471700                    LDP1  ! @Q,,AUTO
         3 000266   100000 276300                    ORQ   ! 0,,PR1
         3 000267   000001 756200 1                  STQ   ! TOS$COMWD
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:56   

      214    13308    3         Q = TOS$COMWD;

  13308  3 000270   100000 756300                    STQ   ! 0,,PR1

      215    13309    3      END;

      216    13310    2      RETURN_DELTA = 1;

  13310  3 000271   000001 220003                    LDX0    1,DU
         3 000272   200021 473500                    LDP3    @RETURN_DELTA,,AUTO
         3 000273   300000 740100                    STX0    0,,PR3

      217    13311    2      RETURN;

  13311  3 000274   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 000275   000001 702211                    TSX2  ! 1,X1

      218    13312
      219    13313    2   END TOS$MME_COMWD;
      220    13314        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:57   
      221    13315        /*I* NAME:         TOS$MME_CPUASG
      222    13316             PURPOSE:      Informs user that CPU should be assigned
      223    13317             INTERFACE:    XUG$ERRMSG
      224    13318             PARAMETERS:   X2 - console code (bits 0 - 5)
      225    13319                           X4 - logical processor number (input)
      226    13320                           AL - subexec number (30 - 32)
      227    13321                                test page number (33 - 35)
      228    13322             OUTPUT:       STATUS_WD_A - '203333'O               (0 - 17)
      229    13323                                         subexec # / test page # (30 - 35)
      230    13324
      231    13325                           STATUS_WD_B - Status                  (0 - 17)
      232    13326                                         00 = successful
      233    13327                                         14 = CPU not assignable
      234    13328                                         Function Code           (18 - 26)
      235    13329                                         Console Code            (27 - 35)
      236    13330                           RETURN_DELTA - set to 1
      237    13331             DATA:         TOS_ERROR_CODE - input/output
      238    13332             DESCRIPTION:  This   procedure  handles  MME CPU assign for
      239    13333                           CP6.   TOLTS   does   not  have  this capability
      240    13334                           instead,  a  warning  message  is issued to the
      241    13335                           user indicating that the CPU can be assigned
      242    13336                           using the START Keyin at the System Console.
      243    13337                           The status  value  is  set to 14 octal, indicating
      244    13338                           that the processor has not been assigned.
      245    13339        */
      246    13340        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:58   
      247    13341    1   TOS$MME_CPUASG: PROC (X2, X4, A, Q, RETURN_DELTA) ;

  13341  3 000276   200016 741300       TOS$MME_CPU* STX1  ! SERVICE_CODE+2,,AUTO

      248    13342
      249    13343    2      DCL X2           UBIN HALF HALIGNED ;
      250    13344    2      DCL X4           UBIN HALF HALIGNED ;
      251    13345    2      DCL A            UBIN WORD ALIGNED ;
      252    13346    2      DCL 1 A_REG REDEF A,
      253    13347    2            2 * UBIN (30) UNAL,
      254    13348    2            2 SUBEXEC UBIN (3) UNAL,
      255    13349    2            2 TP_NUM UBIN (3) UNAL;
      256    13350    2      DCL Q            UBIN WORD ALIGNED;
      257    13351    2      DCL 1 Q_REG REDEF Q,
      258    13352    2            2 PHYS_PORT_NUM UBIN (6) UNAL,
      259    13353    2            2 *            UBIN (30) UNAL;
      260    13354    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
      261    13355    2      DCL 1 LOGICAL_PORT,
      262    13356    2            2 LGTH    UBIN BYTE CALIGNED,
      263    13357    2            2 NUMBER    CHAR (2)  CALIGNED;
      264    13358    2      DCL 1 PHYSICAL_PORT,
      265    13359    2            2 LGTH   UBIN BYTE CALIGNED,
      266    13360    2            2 NUMBER  CHAR (2) CALIGNED;
      267    13361        /* Code */
      268    13362
      269    13363    3      IF (B$PORT$ = ADDR(NIL)) THEN DO;

  13363  3 000277   000011 236000 1                  LDQ     B$PORT$
         3 000300   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000301   000335 601000 3                  TNZ     s:13374

      270    13364    3              CALL M$SAD(FPT_SAD) WHENALTRETURN

  13364  3 000302   000004 630400 1                  EPPR0   FPT_SAD
         3 000303   430015 713400                    CLIMB   alt,+12301
         3 000304   400000 401760                    pmme    nvectors=1
         3 000305   000307 702000 3                  TSX2    s:13366
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:59   
         3 000306   000315 710000 3                  TRA     s:13369

      271    13365    4                   DO;

      272    13366    4                      STATUS_WD_B.STATUS_CODE = 12; /* OCTAL 14 */

  13366  3 000307   000014 220003                    LDX0    12,DU
         3 000310   000014 740000 1                  STX0    STATUS_WD_B

      273    13367    4                      RETURN_DELTA = 1;

  13367  3 000311   200023 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 000312   000100 101400                    MRL     fill='000'O
         3 000313   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 000314   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

      274    13368    4                   END;

      275    13369    3              B$PORT$ = PINCRW(B$SPCL1$, POFFW(ADDR(S_PORTNR),B$IS$));

  13369  3 000315   000000 236000 4                  LDQ     0
         3 000316   000022 772000                    QRL     18
         3 000317   000000 235000 xsym               LDA     B$IS$
         3 000320   000022 771000                    ARL     18
         3 000321   200032 755100                    STA     @ERROR_VALUE+1,,AUTO
         3 000322   200032 136100                    SBLQ    @ERROR_VALUE+1,,AUTO
         3 000323   000022 736000                    QLS     18
         3 000324   000000 036000 xsym               ADLQ    B$SPCL1$
         3 000325   000011 756000 1                  STQ     B$PORT$

      276    13370    3              B$MPSTATE$ = PINCRW(B$SPCL1$, POFFW(ADDR(S_MPSTATE),B$IS$));

  13370  3 000326   000001 236000 4                  LDQ     1
         3 000327   000022 772000                    QRL     18
         3 000330   200032 755100                    STA     @ERROR_VALUE+1,,AUTO
         3 000331   200032 136100                    SBLQ    @ERROR_VALUE+1,,AUTO
         3 000332   000022 736000                    QLS     18
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:60   
         3 000333   000000 036000 xsym               ADLQ    B$SPCL1$
         3 000334   000012 756000 1                  STQ     B$MPSTATE$

      277    13371    3           END;

      278    13372
      279    13373           /* Issue warning message */
      280    13374    2      LOGICAL_PORT.LGTH = 2 ;

  13374  3 000335   002000 236003                    LDQ     1024,DU
         3 000336   200024 552140                    STBQ    LOGICAL_PORT,'40'O,AUTO

      281    13375    2      CALL BINCHAR (LOGICAL_PORT.NUMBER, X4) ;

  13375  3 000337   200020 470500                    LDP0    @X4,,AUTO
         3 000340   000100 101500                    MRL     fill='000'O
         3 000341   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 000342   200032 000004                    ADSC9   @ERROR_VALUE+1,,AUTO     cn=0,n=4
         3 000343   200032 236100                    LDQ     @ERROR_VALUE+1,,AUTO
         3 000344   000000 235003                    LDA     0,DU
         3 000345   200034 757100                    STAQ    @ERROR_VALUE+3,,AUTO
         3 000346   000100 301500                    BTD
         3 000347   200034 000010                    NDSC9   @ERROR_VALUE+3,,AUTO     cn=0,s=lsgnf,sf=0,n=8
         3 000350   200024 230002                    NDSC9   LOGICAL_PORT,,AUTO       cn=1,s=nosgn,sf=0,n=2

      282    13376    2      Q_REG.PHYS_PORT_NUM = B$PORT$ -> B$WORD(X4); /* SET Q-REG FOR CMLT */

  13376  3 000351   000100 100500                    MLR     fill='000'O
         3 000352   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 000353   200032 000004                    ADSC9   @ERROR_VALUE+1,,AUTO     cn=0,n=4
         3 000354   200032 220100                    LDX0    @ERROR_VALUE+1,,AUTO
         3 000355   000011 471400 1                  LDP1    B$PORT$
         3 000356   200022 473500                    LDP3    @Q,,AUTO
         3 000357   100000 236110                    LDQ     0,X0,PR1
         3 000360   000036 736000                    QLS     30
         3 000361   300000 752140                    STCQ    0,'40'O,PR3

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:61   
      283    13377    2      PHYSICAL_PORT.LGTH = 2;

  13377  3 000362   002000 236003                    LDQ     1024,DU
         3 000363   200025 552140                    STBQ    PHYSICAL_PORT,'40'O,AUTO

      284    13378    2      CALL BINCHAR (PHYSICAL_PORT.NUMBER,X4);

  13378  3 000364   000100 101500                    MRL     fill='000'O
         3 000365   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 000366   200032 000004                    ADSC9   @ERROR_VALUE+1,,AUTO     cn=0,n=4
         3 000367   200032 236100                    LDQ     @ERROR_VALUE+1,,AUTO
         3 000370   000000 235003                    LDA     0,DU
         3 000371   200034 757100                    STAQ    @ERROR_VALUE+3,,AUTO
         3 000372   000100 301500                    BTD
         3 000373   200034 000010                    NDSC9   @ERROR_VALUE+3,,AUTO     cn=0,s=lsgnf,sf=0,n=8
         3 000374   200025 230002                    NDSC9   PHYSICAL_PORT,,AUTO      cn=1,s=nosgn,sf=0,n=2

      285    13379    2      TOS_ERROR_CODE.ERR# = %E$RPMASGCPU;

  13379  3 000375   000000 236000 1                  LDQ     TOS_ERROR_CODE
         3 000376   000002 376000 4                  ANQ     2
         3 000377   003620 276007                    ORQ     1936,DL
         3 000400   000000 756000 1                  STQ     TOS_ERROR_CODE

      286    13380    2      TOLTS_GETCMD.ERR_CODE = TOS_ERROR_CODE;

  13380  3 000401   000000 236000 1                  LDQ     TOS_ERROR_CODE
         3 000402   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      287    13381    2      TOLTS_GETCMD.F1_ = VECTOR (LOGICAL_PORT);

  13381  3 000403   577640 235007                    LDA     -65632,DL
         3 000404   200032 452500                    STP2    @ERROR_VALUE+1,,AUTO
         3 000405   200032 236100                    LDQ     @ERROR_VALUE+1,,AUTO
         3 000406   000024 036003                    ADLQ    20,DU
         3 000407   000017 755000 xsym               STA     TOLTS_GETCMD+15
         3 000410   000020 756000 xsym               STQ     TOLTS_GETCMD+16
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:62   

      288    13382    2      TOLTS_GETCMD.F2_ = VECTOR (PHYSICAL_PORT);

  13382  3 000411   577640 235007                    LDA     -65632,DL
         3 000412   200032 452500                    STP2    @ERROR_VALUE+1,,AUTO
         3 000413   200032 236100                    LDQ     @ERROR_VALUE+1,,AUTO
         3 000414   000025 036003                    ADLQ    21,DU
         3 000415   000021 755000 xsym               STA     TOLTS_GETCMD+17
         3 000416   000022 756000 xsym               STQ     TOLTS_GETCMD+18

      289    13383    2      TOLTS_GETCMD.FLGLEV# = 4;

  13383  3 000417   000004 236003                    LDQ     4,DU
         3 000420   000006 552020 xsym               STBQ    TOLTS_GETCMD+6,'20'O

      290    13384          /* Verify CPU is STOPPED (still) */
      291    13385    3      IF B$MPSTATE$ -> B$WORD(X4) ~= 0 THEN DO;

  13385  3 000421   000100 100500                    MLR     fill='000'O
         3 000422   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 000423   200032 000004                    ADSC9   @ERROR_VALUE+1,,AUTO     cn=0,n=4
         3 000424   200032 220100                    LDX0    @ERROR_VALUE+1,,AUTO
         3 000425   000012 474400 1                  LDP4    B$MPSTATE$
         3 000426   400000 235110                    LDA     0,X0,PR4
         3 000427   000443 600000 3                  TZE     s:13391

      292    13386    3              STATUS_WD_B.STATUS_CODE = 12; /* 14 OCTAL */

  13386  3 000430   000014 220003                    LDX0    12,DU
         3 000431   000014 740000 1                  STX0    STATUS_WD_B

      293    13387    3              TOS_ERROR_CODE.ERR# = %E$ASGCPU_NOT_STOPPED;

  13387  3 000432   000000 236000 1                  LDQ     TOS_ERROR_CODE
         3 000433   000002 376000 4                  ANQ     2
         3 000434   003670 276007                    ORQ     1976,DL
         3 000435   000000 756000 1                  STQ     TOS_ERROR_CODE
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:63   

      294    13388    3              RETURN_DELTA = 1;

  13388  3 000436   200023 475500                    LDP5    @RETURN_DELTA,,AUTO
         3 000437   000100 101400                    MRL     fill='000'O
         3 000440   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 000441   500000 000002                    ADSC9   0,,PR5                   cn=0,n=2

      295    13389    3           END;

  13389  3 000442   000455 710000 3                  TRA     s:13395

      296    13390    3      ELSE DO;

      297    13391    3              STATUS_WD_B.STATUS_CODE = 0; /* MAKE STATUS GOOD */

  13391  3 000443   000000 221003                    LDX1    0,DU
         3 000444   000014 741000 1                  STX1    STATUS_WD_B

      298    13392    3              RETURN_DELTA = 1;

  13392  3 000445   200023 475500                    LDP5    @RETURN_DELTA,,AUTO
         3 000446   000100 101400                    MRL     fill='000'O
         3 000447   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 000450   500000 000002                    ADSC9   0,,PR5                   cn=0,n=2

      299    13393    3              TOS_ERROR_CODE.ERR# = %E$RPMASGCPU;

  13393  3 000451   000000 236000 1                  LDQ     TOS_ERROR_CODE
         3 000452   000002 376000 4                  ANQ     2
         3 000453   003620 276007                    ORQ     1936,DL
         3 000454   000000 756000 1                  STQ     TOS_ERROR_CODE

      300    13394    3           END;

      301    13395    2      CALL XUG$ERRMSG (TOLTS_GETCMD);

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:64   
  13395  3 000455   000003 630400 4                  EPPR0   3
         3 000456   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000457   000000 701000 xent               TSX1    XUG$ERRMSG
         3 000460   000000 011000                    NOP     0

      302    13396    2      STATUS_WD_A.SUB_EXEC = A ;

  13396  3 000461   200021 470500                    LDP0    @A,,AUTO
         3 000462   000000 720100                    LXL0    0,,PR0
         3 000463   000013 440000 1                  SXL0    STATUS_WD_A

      303    13397    2      STATUS_WD_B.FUNCTION_CODE = %SOLTS_ASGCPU ;

  13397  3 000464   002000 236007                    LDQ     1024,DL
         3 000465   000014 552010 1                  STBQ    STATUS_WD_B,'10'O

      304    13398    2      STATUS_WD_B.FUNCTION_TYPE = X4 ;

  13398  3 000466   200020 471500                    LDP1    @X4,,AUTO
         3 000467   000000 101500                    MRL     fill='000'O
         3 000470   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         3 000471   000014 600001 1                  ADSC9   STATUS_WD_B              cn=3,n=1

      305    13399           /* SETUP INTER COMM IO CALL TO DISPATCHER */
      306    13400    2      QUEUE_ENTRY(0) = ENTRY_A;

  13400  3 000472   000013 235000 1                  LDA     STATUS_WD_A
         3 000473   200010 755100                    STA     QUEUE_ENTRY,,AUTO

      307    13401    2      QUEUE_ENTRY(1) = ENTRY_B;

  13401  3 000474   000014 235000 1                  LDA     STATUS_WD_B
         3 000475   200011 755100                    STA     QUEUE_ENTRY+1,,AUTO

      308    13402    2      QUEUE_ENTRY(2) = 0;

  13402  3 000476   200012 450100                    STZ     QUEUE_ENTRY+2,,AUTO
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:65   

      309    13403    2      REQUEST_TYPE = %DRT_BUILD ;

  13403  3 000477   000001 235007                    LDA     1,DL
         3 000500   200013 755100                    STA     REQUEST_TYPE,,AUTO

      310    13404    2      SERVICE_CODE = %DSC_ISC ;

  13404  3 000501   000002 221003                    LDX1    2,DU
         3 000502   200014 741100                    STX1    SERVICE_CODE,,AUTO

      311    13405    2      CALL TOD$DISPATCHER( REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY) ;

  13405  3 000503   200010 633500                    EPPR3   QUEUE_ENTRY,,AUTO
         3 000504   200034 453500                    STP3    @ERROR_VALUE+3,,AUTO
         3 000505   200014 634500                    EPPR4   SERVICE_CODE,,AUTO
         3 000506   200033 454500                    STP4    @ERROR_VALUE+2,,AUTO
         3 000507   200013 635500                    EPPR5   REQUEST_TYPE,,AUTO
         3 000510   200032 455500                    STP5    @ERROR_VALUE+1,,AUTO
         3 000511   200032 630500                    EPPR0   @ERROR_VALUE+1,,AUTO
         3 000512   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000513   000000 701000 xent               TSX1    TOD$DISPATCHER
         3 000514   000000 011000                    NOP     0

      312    13406           /* Set Return Values */
      313    13407    2      RETURN ;

  13407  3 000515   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 000516   000001 702211                    TSX2  ! 1,X1

      314    13408
      315    13409    2   END TOS$MME_CPUASG ;
      316    13410           % EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:66   
      317    13411        /*I* NAME:         TOS$MME_CPUREL
      318    13412             AUTHOR:       Scott S. Sheppard
      319    13413             PURPOSE:      Informs user that CPU should be released
      320    13414             INTERFACE:    XUG$ERRMSG
      321    13415             PARAMETERS:   X2 - console code (bits 0 - 5)
      322    13416                           X4 - logical processor number (input)
      323    13417                           AL - subexec number (30 - 32)
      324    13418                                test page number (33 - 35)
      325    13419             OUTPUT:       STATUS_WD_A - '203333'O               (0 - 17)
      326    13420                                         subexec # / test page # (30 - 35)
      327    13421
      328    13422                           STATUS_WD_B - Status                  (0 - 17)
      329    13423                                         00 = successful
      330    13424                                         14 = CPU not RELEASED
      331    13425                                         Function Code           (18 - 26)
      332    13426                                         Console Code            (27 - 35)
      333    13427                           RETURN_DELTA - set to 1
      334    13428             DATA:         TOS_ERROR_CODE - input/output
      335    13429             DESCRIPTION:  This   procedure  handles  MME CPU release for
      336    13430                           CP-6. On GCOS systems, when a request to releases
      337    13431                           a CPU from the system is made, a call will be made
      338    13432                           to the OS to release the CPU.  CP6 TOLTS does not
      339    13433                           have the ability to release a CPU on the fly;
      340    13434                           instead the CPU in question must be released via
      341    13435                           an operator console verb "STOP" keyin.  If the CPU
      342    13436                           has already been stopped prior to the MME CPUREL a
      343    13437                           status code of 00 will be returned, else a code of
      344    13438                           14 octal will be returned (CPU not released), and a
      345    13439                           warning message issued to the affect that the user
      346    13440                           must release the CPU with a "STOP" keyin.
      347    13441        */
      348    13442        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:67   
      349    13443    1   TOS$MME_CPUREL: PROC (X2, X4, A, Q,  RETURN_DELTA) ;

  13443  3 000517   200016 741300       TOS$MME_CPU* STX1  ! SERVICE_CODE+2,,AUTO

      350    13444
      351    13445    2      DCL X2           UBIN HALF HALIGNED ;
      352    13446    2      DCL X4           UBIN HALF HALIGNED ;
      353    13447    2      DCL A            UBIN WORD ALIGNED ;
      354    13448    2      DCL 1 A_REG REDEF A,
      355    13449    2            2 *        UBIN (30) UNAL,
      356    13450    2            2 SUBEXEC  UBIN (3)  UNAL,
      357    13451    2            2 TP_NUM   UBIN (3)  UNAL;
      358    13452    2      DCL Q  UBIN WORD ALIGNED;
      359    13453    2      DCL 1 Q_REG REDEF Q,
      360    13454    2            2 PHYS_PORT_NUM UBIN (6) UNAL,
      361    13455    2            2 *          UBIN (30) UNAL;
      362    13456    2      DCL RETURN_DELTA SBIN HALF HALIGNED ;
      363    13457    2      DCL 1 LOGICAL_PORT,
      364    13458    2            2 LGTH   UBIN BYTE CALIGNED,
      365    13459    2            2 NUMBER    CHAR (2) CALIGNED;
      366    13460    2      DCL 1 PHYSICAL_PORT,
      367    13461    2            2 LGTH   UBIN BYTE CALIGNED,
      368    13462    2            2 NUMBER  CHAR (2) CALIGNED;
      369    13463
      370    13464        /* Code */
      371    13465    3      IF (B$PORT$ = ADDR(NIL)) THEN DO;

  13465  3 000520   000011 236000 1                  LDQ     B$PORT$
         3 000521   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000522   000556 601000 3                  TNZ     s:13475

      372    13466    3              CALL M$SAD(FPT_SAD) WHENALTRETURN

  13466  3 000523   000004 630400 1                  EPPR0   FPT_SAD
         3 000524   430015 713400                    CLIMB   alt,+12301
         3 000525   400000 401760                    pmme    nvectors=1
         3 000526   000530 702000 3                  TSX2    s:13468
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:68   
         3 000527   000536 710000 3                  TRA     s:13471

      373    13467    4                   DO;

      374    13468    4                      STATUS_WD_B.STATUS_CODE = 12;

  13468  3 000530   000014 220003                    LDX0    12,DU
         3 000531   000014 740000 1                  STX0    STATUS_WD_B

      375    13469    4                      RETURN_DELTA = 1;

  13469  3 000532   200023 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 000533   000100 101400                    MRL     fill='000'O
         3 000534   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 000535   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

      376    13470    4                   END;

      377    13471    3              B$PORT$ = PINCRW(B$SPCL1$,POFFW(ADDR(S_PORTNR),B$IS$));

  13471  3 000536   000000 236000 4                  LDQ     0
         3 000537   000022 772000                    QRL     18
         3 000540   000000 235000 xsym               LDA     B$IS$
         3 000541   000022 771000                    ARL     18
         3 000542   200032 755100                    STA     @ERROR_VALUE+1,,AUTO
         3 000543   200032 136100                    SBLQ    @ERROR_VALUE+1,,AUTO
         3 000544   000022 736000                    QLS     18
         3 000545   000000 036000 xsym               ADLQ    B$SPCL1$
         3 000546   000011 756000 1                  STQ     B$PORT$

      378    13472    3              B$MPSTATE$ = PINCRW(B$SPCL1$,POFFW(ADDR(S_MPSTATE),B$IS$));

  13472  3 000547   000001 236000 4                  LDQ     1
         3 000550   000022 772000                    QRL     18
         3 000551   200032 755100                    STA     @ERROR_VALUE+1,,AUTO
         3 000552   200032 136100                    SBLQ    @ERROR_VALUE+1,,AUTO
         3 000553   000022 736000                    QLS     18
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:69   
         3 000554   000000 036000 xsym               ADLQ    B$SPCL1$
         3 000555   000012 756000 1                  STQ     B$MPSTATE$

      379    13473    3           END;

      380    13474           /* Issue warning message */
      381    13475    2      LOGICAL_PORT.LGTH = 2 ;

  13475  3 000556   002000 236003                    LDQ     1024,DU
         3 000557   200024 552140                    STBQ    LOGICAL_PORT,'40'O,AUTO

      382    13476    2      CALL BINCHAR (LOGICAL_PORT.NUMBER, X4) ;

  13476  3 000560   200020 470500                    LDP0    @X4,,AUTO
         3 000561   000100 101500                    MRL     fill='000'O
         3 000562   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 000563   200032 000004                    ADSC9   @ERROR_VALUE+1,,AUTO     cn=0,n=4
         3 000564   200032 236100                    LDQ     @ERROR_VALUE+1,,AUTO
         3 000565   000000 235003                    LDA     0,DU
         3 000566   200034 757100                    STAQ    @ERROR_VALUE+3,,AUTO
         3 000567   000100 301500                    BTD
         3 000570   200034 000010                    NDSC9   @ERROR_VALUE+3,,AUTO     cn=0,s=lsgnf,sf=0,n=8
         3 000571   200024 230002                    NDSC9   LOGICAL_PORT,,AUTO       cn=1,s=nosgn,sf=0,n=2

      383    13477    2      Q_REG.PHYS_PORT_NUM = B$PORT$ -> B$WORD(X4);

  13477  3 000572   000100 100500                    MLR     fill='000'O
         3 000573   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 000574   200032 000004                    ADSC9   @ERROR_VALUE+1,,AUTO     cn=0,n=4
         3 000575   200032 220100                    LDX0    @ERROR_VALUE+1,,AUTO
         3 000576   000011 471400 1                  LDP1    B$PORT$
         3 000577   200022 473500                    LDP3    @Q,,AUTO
         3 000600   100000 236110                    LDQ     0,X0,PR1
         3 000601   000036 736000                    QLS     30
         3 000602   300000 752140                    STCQ    0,'40'O,PR3

      384    13478    2      PHYSICAL_PORT.LGTH = 2;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:70   

  13478  3 000603   002000 236003                    LDQ     1024,DU
         3 000604   200025 552140                    STBQ    PHYSICAL_PORT,'40'O,AUTO

      385    13479    2      CALL BINCHAR (PHYSICAL_PORT.NUMBER, X4);

  13479  3 000605   000100 101500                    MRL     fill='000'O
         3 000606   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 000607   200032 000004                    ADSC9   @ERROR_VALUE+1,,AUTO     cn=0,n=4
         3 000610   200032 236100                    LDQ     @ERROR_VALUE+1,,AUTO
         3 000611   000000 235003                    LDA     0,DU
         3 000612   200034 757100                    STAQ    @ERROR_VALUE+3,,AUTO
         3 000613   000100 301500                    BTD
         3 000614   200034 000010                    NDSC9   @ERROR_VALUE+3,,AUTO     cn=0,s=lsgnf,sf=0,n=8
         3 000615   200025 230002                    NDSC9   PHYSICAL_PORT,,AUTO      cn=1,s=nosgn,sf=0,n=2

      386    13480
      387    13481           /* CHECK TO SEE IF $PACT REQUEST */
      388    13482
      389    13483           /* VERIFY THAT CPU IS STOPPED */
      390    13484    3      IF B$MPSTATE$ -> B$WORD(X4) ~= 0 THEN DO;

  13484  3 000616   000100 100500                    MLR     fill='000'O
         3 000617   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 000620   200032 000004                    ADSC9   @ERROR_VALUE+1,,AUTO     cn=0,n=4
         3 000621   200032 220100                    LDX0    @ERROR_VALUE+1,,AUTO
         3 000622   000012 474400 1                  LDP4    B$MPSTATE$
         3 000623   400000 235110                    LDA     0,X0,PR4
         3 000624   000640 600000 3                  TZE     s:13490

      391    13485    3              STATUS_WD_B.STATUS_CODE = 12;

  13485  3 000625   000014 220003                    LDX0    12,DU
         3 000626   000014 740000 1                  STX0    STATUS_WD_B

      392    13486    3              TOS_ERROR_CODE.ERR# = %E$RELCPU_NOT_STOPPED;

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:71   
  13486  3 000627   000000 236000 1                  LDQ     TOS_ERROR_CODE
         3 000630   000002 376000 4                  ANQ     2
         3 000631   003660 276007                    ORQ     1968,DL
         3 000632   000000 756000 1                  STQ     TOS_ERROR_CODE

      393    13487    3              RETURN_DELTA = 1;

  13487  3 000633   200023 475500                    LDP5    @RETURN_DELTA,,AUTO
         3 000634   000100 101400                    MRL     fill='000'O
         3 000635   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 000636   500000 000002                    ADSC9   0,,PR5                   cn=0,n=2

      394    13488    3           END;

  13488  3 000637   000664 710000 3                  TRA     s:13496

      395    13489    3      ELSE DO;

      396    13490    3              STATUS_WD_B.STATUS_CODE = 0; /* MAKE STATUS GOOD */

  13490  3 000640   000000 221003                    LDX1    0,DU
         3 000641   000014 741000 1                  STX1    STATUS_WD_B

      397    13491    3              RETURN_DELTA = 1;

  13491  3 000642   200023 475500                    LDP5    @RETURN_DELTA,,AUTO
         3 000643   000100 101400                    MRL     fill='000'O
         3 000644   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 000645   500000 000002                    ADSC9   0,,PR5                   cn=0,n=2

      398    13492    3              IF (A_REG.SUBEXEC = 4)

  13492  3 000646   200021 476500                    LDP6    @A,,AUTO
         3 000647   600000 236100                    LDQ     0,,PR6
         3 000650   000070 376007                    ANQ     56,DL
         3 000651   000040 116007                    CMPQ    32,DL
         3 000652   000660 601000 3                  TNZ     s:13494
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:72   

      399    13493    3              THEN TOS_ERROR_CODE.ERR# = %E$PLSRELCPU ;

  13493  3 000653   000000 236000 1                  LDQ     TOS_ERROR_CODE
         3 000654   000002 376000 4                  ANQ     2
         3 000655   003610 276007                    ORQ     1928,DL
         3 000656   000000 756000 1                  STQ     TOS_ERROR_CODE
         3 000657   000664 710000 3                  TRA     s:13496

      400    13494    3              ELSE TOS_ERROR_CODE.ERR# = %E$RPMRELCPU ;

  13494  3 000660   000000 236000 1                  LDQ     TOS_ERROR_CODE
         3 000661   000002 376000 4                  ANQ     2
         3 000662   003630 276007                    ORQ     1944,DL
         3 000663   000000 756000 1                  STQ     TOS_ERROR_CODE

      401    13495    3           END;

      402    13496    2      TOLTS_GETCMD.ERR_CODE = TOS_ERROR_CODE;

  13496  3 000664   000000 236000 1                  LDQ     TOS_ERROR_CODE
         3 000665   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      403    13497    2      TOLTS_GETCMD.F1_ = VECTOR (LOGICAL_PORT);

  13497  3 000666   577640 235007                    LDA     -65632,DL
         3 000667   200032 452500                    STP2    @ERROR_VALUE+1,,AUTO
         3 000670   200032 236100                    LDQ     @ERROR_VALUE+1,,AUTO
         3 000671   000024 036003                    ADLQ    20,DU
         3 000672   000017 755000 xsym               STA     TOLTS_GETCMD+15
         3 000673   000020 756000 xsym               STQ     TOLTS_GETCMD+16

      404    13498    2      TOLTS_GETCMD.F2_ = VECTOR (PHYSICAL_PORT);

  13498  3 000674   577640 235007                    LDA     -65632,DL
         3 000675   200032 452500                    STP2    @ERROR_VALUE+1,,AUTO
         3 000676   200032 236100                    LDQ     @ERROR_VALUE+1,,AUTO
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:73   
         3 000677   000025 036003                    ADLQ    21,DU
         3 000700   000021 755000 xsym               STA     TOLTS_GETCMD+17
         3 000701   000022 756000 xsym               STQ     TOLTS_GETCMD+18

      405    13499    2      TOLTS_GETCMD.FLGLEV# = 4;

  13499  3 000702   000004 236003                    LDQ     4,DU
         3 000703   000006 552020 xsym               STBQ    TOLTS_GETCMD+6,'20'O

      406    13500    2      CALL XUG$ERRMSG (TOLTS_GETCMD);

  13500  3 000704   000003 630400 4                  EPPR0   3
         3 000705   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000706   000000 701000 xent               TSX1    XUG$ERRMSG
         3 000707   000000 011000                    NOP     0

      407    13501    2      STATUS_WD_A.SUB_EXEC = A ;

  13501  3 000710   200021 470500                    LDP0    @A,,AUTO
         3 000711   000000 720100                    LXL0    0,,PR0
         3 000712   000013 440000 1                  SXL0    STATUS_WD_A

      408    13502    2      STATUS_WD_B.FUNCTION_CODE = %SOLTS_RELCPU ;

  13502  3 000713   001000 236007                    LDQ     512,DL
         3 000714   000014 552010 1                  STBQ    STATUS_WD_B,'10'O

      409    13503    2      STATUS_WD_B.FUNCTION_TYPE = X4 ;

  13503  3 000715   200020 471500                    LDP1    @X4,,AUTO
         3 000716   000000 101500                    MRL     fill='000'O
         3 000717   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         3 000720   000014 600001 1                  ADSC9   STATUS_WD_B              cn=3,n=1

      410    13504           /* SETUP INTER COMM IO CALL TO DISPATCHER */
      411    13505    2      QUEUE_ENTRY(0) = ENTRY_A;

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:74   
  13505  3 000721   000013 235000 1                  LDA     STATUS_WD_A
         3 000722   200010 755100                    STA     QUEUE_ENTRY,,AUTO

      412    13506    2      QUEUE_ENTRY(1) = ENTRY_B;

  13506  3 000723   000014 235000 1                  LDA     STATUS_WD_B
         3 000724   200011 755100                    STA     QUEUE_ENTRY+1,,AUTO

      413    13507    2      QUEUE_ENTRY(2) = 0;

  13507  3 000725   200012 450100                    STZ     QUEUE_ENTRY+2,,AUTO

      414    13508    2      REQUEST_TYPE = %DRT_BUILD ;

  13508  3 000726   000001 235007                    LDA     1,DL
         3 000727   200013 755100                    STA     REQUEST_TYPE,,AUTO

      415    13509    2      SERVICE_CODE = %DSC_ISC ;

  13509  3 000730   000002 221003                    LDX1    2,DU
         3 000731   200014 741100                    STX1    SERVICE_CODE,,AUTO

      416    13510    2      CALL TOD$DISPATCHER( REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY) ;

  13510  3 000732   200010 633500                    EPPR3   QUEUE_ENTRY,,AUTO
         3 000733   200034 453500                    STP3    @ERROR_VALUE+3,,AUTO
         3 000734   200014 634500                    EPPR4   SERVICE_CODE,,AUTO
         3 000735   200033 454500                    STP4    @ERROR_VALUE+2,,AUTO
         3 000736   200013 635500                    EPPR5   REQUEST_TYPE,,AUTO
         3 000737   200032 455500                    STP5    @ERROR_VALUE+1,,AUTO
         3 000740   200032 630500                    EPPR0   @ERROR_VALUE+1,,AUTO
         3 000741   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000742   000000 701000 xent               TSX1    TOD$DISPATCHER
         3 000743   000000 011000                    NOP     0

      417    13511           /* Set Return Values */
      418    13512
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:75   
      419    13513    2      RETURN ;

  13513  3 000744   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 000745   000001 702211                    TSX2  ! 1,X1

      420    13514
      421    13515    2   END TOS$MME_CPUREL ;
      422    13516        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:76   
      423    13517        /*I* NAME:         TOS$MME_HISREG
      424    13518             CALL:         CALL TOS$MME_HISREG(AREG,RETURN_DELTA);
      425    13519             INPUT:        AREG
      426    13520             OUTPUT:       RETURN_DELTA = 1
      427    13521             DESCRIPTION:  The intent of the MME is to indicate to TOLTS
      428    13522                           that on the occurence of certain types of faults in
      429    13523                           SOLTS, a History Register buffer is to be
      430    13524                           written into SOLTS, containing hardware history
      431    13525                           register information.  The address of that area in
      432    13526                           SOLTS is passed via this MME.  It is then up to the
      433    13527                           TOLTS Fault Handler to decide under what circumstance
      434    13528                           History Register information is to be returned to
      435    13529                           SOLTS.
      436    13530
      437    13531                           This feature is not yet implemented in TOLTS.
      438    13532                           Among other things, the exact format of that
      439    13533                           History Register buffer has never been defined, and
      440    13534                           it was claimed that this feature was not needed for
      441    13535                           anything execpt debug.
      442    13536
      443    13537                           The rudiments of the design had this MME service
      444    13538                           routine setting a flag which would then be checked
      445    13539                           by the Fault Handler when processing faults for
      446    13540                           SOLTS.  If the flag were set, a routine in TOS$SOLTs
      447    13541                           would be called to build the buffer and return it to
      448    13542                           SOLTS.
      449    13543        */
      450    13544        %EJECT;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:77   
      451    13545    1   TOS$MME_HISREG: PROC (P_AREG,RETURN_DELTA);

  13545  3 000746   200016 741300       TOS$MME_HIS* STX1  ! SERVICE_CODE+2,,AUTO

      452    13546
      453    13547    2      DCL P_AREG UBIN(36);
      454    13548    2      DCL RETURN_DELTA SBIN HALF;
      455    13549
      456    13550        /* CODE */
      457    13551
      458    13552    2      RETURN_DELTA = 1;

  13552  3 000747   000001 220003                    LDX0    1,DU
         3 000750   200020 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 000751   000000 740100                    STX0    0,,PR0

      459    13553    2      RETURN;

  13553  3 000752   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 000753   000001 702211                    TSX2  ! 1,X1

      460    13554
      461    13555    2   END TOS$MME_HISREG;
      462    13556        %EJECT;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:78   
      463    13557        /*I* NAME:         TOS$MME_RETRY
      464    13558             CALL:         CALL TOS$MME_RETRY(AREG,RETURN_DELTA);
      465    13559             INPUT:        AREG
      466    13560             OUTPUT:       RETURN_DELTA = 1
      467    13561             DESCRIPTION:  Another SOLTS NOP; this feature is meaningful only
      468    13562                           in a GCOS environment.
      469    13563        */
      470    13564
      471    13565    1   TOS$MME_RETRY: PROC (A, RETURN_DELTA);

  13565  3 000754   200016 741300       TOS$MME_RET* STX1  ! SERVICE_CODE+2,,AUTO

      472    13566
      473    13567    2      DCL 1 A ALIGNED,
      474    13568    2            2 *            UBIN(12) UNAL,
      475    13569    2            2 CPU_NUMBER   UBIN(6) UNAL,
      476    13570    2            2 *            UBIN(15) UNAL,
      477    13571    2            2 RETRY_LIMIT  UBIN(3) UNAL;
      478    13572    2      DCL RETURN_DELTA SBIN HALF ;
      479    13573
      480    13574        /* CODE */
      481    13575
      482    13576    2      RETURN_DELTA = 1;

  13576  3 000755   000001 220003                    LDX0    1,DU
         3 000756   200020 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 000757   000000 740100                    STX0    0,,PR0

      483    13577    2      RETURN;

  13577  3 000760   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 000761   000001 702211                    TSX2  ! 1,X1

      484    13578
      485    13579    2   END TOS$MME_RETRY;
      486    13580        %EJECT;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:79   
      487    13581        /*I* NAME:         TOS$MME_TAKCPU
      488    13582             CALL:         CALL TOS$MME_TAKCPU(AREG,RETURN_DELTA);
      489    13583             INPUT:        AREG bits 30-35 contains the CPU to execute on.
      490    13584             OUTPUT:       RETURN_DELTA = 1 if CPU not configured.
      491    13585                           RETURN_DELTA = 2 if CPU is stopped.
      492    13586                           RETURN_DELTA = 3 if request is honored.
      493    13587                           AREG contains the RSW 2 information.
      494    13588                           X1 contains 0.
      495    13589             DESCRIPTION:  This routine calls M$TDREQCPU to put a CPU into
      496    13590                           Diagnostic Mode.  This is essentially the
      497    13591                           CPU allocation function of SOLTS.  For debug
      498    13592                           purposes, an ALTRET results in a TOLTS
      499    13593                           abort.
      500    13594
      501    13595        */
      502    13596        %EJECT;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:80   
      503    13597    1   TOS$MME_TAKCPU: PROC (A, Q, X1, RETURN_DELTA) ;

  13597  3 000762   200016 741300       TOS$MME_TAK* STX1  ! SERVICE_CODE+2,,AUTO

      504    13598
      505    13599    2      DCL 1 A ALIGNED,
      506    13600    2            2 MBZ             UBIN(12) UNAL,
      507    13601    2            2 PHYSICAL_CPU    UBIN(6) UNAL ,
      508    13602    2            2 LOGICAL_CPU     UBIN(12) UNAL ,
      509    13603    2            2 PORT_ASSIGNMENT UBIN(6) UNAL;
      510    13604    2      DCL A_REG REDEF A BIT (36) ALIGNED ;
      511    13605    2      DCL Q                   UBIN (36) ALIGNED ;
      512    13606    2      DCL X1                  UBIN (18) HALIGNED ;
      513    13607    2      DCL RETURN_DELTA        SBIN HALF HALIGNED ;
      514    13608           %EQU FAKPORT# = 0;
      515    13609           %FPT_TDREQCPU (FPTN = TAKCPU_FPT, MODE=DIAG, XEQ=ASSIGN);
      516    13625
      517    13626        /* CODE */
      518    13627
      519    13628    2      X1 = %FAKPORT#;

  13628  3 000763   200021 470500                    LDP0    @X1,,AUTO
         3 000764   000100 101400                    MRL     fill='000'O
         3 000765   000002 000004 xsym               ADSC9   B_VECTNIL+2              cn=0,n=4
         3 000766   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

      520    13629    2      TAKCPU_FPT.V.CPU# = A.PORT_ASSIGNMENT;

  13629  3 000767   200017 471500                    LDP1    @A,,AUTO
         3 000770   100000 236100                    LDQ     0,,PR1
         3 000771   000077 376007                    ANQ     63,DL
         3 000772   000033 736000                    QLS     27
         3 000773   000023 552040 1                  STBQ    TAKCPU_FPT+5,'40'O

      521    13630    2      CALL M$TDREQCPU (TAKCPU_FPT) WHENRETURN

  13630  3 000774   000016 630400 1                  EPPR0   TAKCPU_FPT
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:81   
         3 000775   470005 713400                    CLIMB   alt,+28677
         3 000776   400000 401760                    pmme    nvectors=1
         3 000777   001016 702000 3                  TSX2    s:13639

      522    13631    3           DO ;

      523    13632    3              CALL TOS$RSW2;

  13632  3 001000   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 001001   000000 701000 xent               TSX1    TOS$RSW2
         3 001002   000000 011000                    NOP     0

      524    13633    3              A_REG = TOS$RSW_AREG;

  13633  3 001003   000002 236000 1                  LDQ     TOS$RSW_AREG
         3 001004   200017 470500                    LDP0    @A,,AUTO
         3 001005   000000 756100                    STQ     0,,PR0

      525    13634    3              Q = 128;

  13634  3 001006   000200 235007                    LDA     128,DL
         3 001007   200020 471500                    LDP1    @Q,,AUTO
         3 001010   100000 755100                    STA     0,,PR1

      526    13635    3              RETURN_DELTA = 3;

  13635  3 001011   200022 473500                    LDP3    @RETURN_DELTA,,AUTO
         3 001012   000100 101400                    MRL     fill='000'O
         3 001013   000005 000004 xsym               ADSC9   B_VECTNIL+5              cn=0,n=4
         3 001014   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2

      527    13636    3           END /* WHENRETURN */ ;

  13636  3 001015   001035 710000 3                  TRA     s:13643

      528    13637    2      WHENALTRETURN
      529    13638    3           DO ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:82   

      530    13639    3              IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.ERR# = %E$CPUSTOPPED

  13639  3 001016   000000 470400 xsym               LDP0    B$TCB$
         3 001017   000000 471500                    LDP1    0,,PR0
         3 001020   100102 236100                    LDQ     66,,PR1
         3 001021   377770 376007                    ANQ     131064,DL
         3 001022   016230 116007                    CMPQ    7320,DL
         3 001023   001031 601000 3                  TNZ     s:13641

      531    13640    3              THEN RETURN_DELTA = 2 ;

  13640  3 001024   200022 473500                    LDP3    @RETURN_DELTA,,AUTO
         3 001025   000100 101400                    MRL     fill='000'O
         3 001026   000004 000004 xsym               ADSC9   B_VECTNIL+4              cn=0,n=4
         3 001027   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2
         3 001030   001035 710000 3                  TRA     s:13643

      532    13641    3              ELSE RETURN_DELTA = 1 ;

  13641  3 001031   200022 473500                    LDP3    @RETURN_DELTA,,AUTO
         3 001032   000100 101400                    MRL     fill='000'O
         3 001033   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 001034   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2

      533    13642    3           END /* WHENALTRETURN */ ;

      534    13643    2      RETURN ;

  13643  3 001035   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 001036   000001 702211                    TSX2  ! 1,X1

      535    13644
      536    13645    2   END TOS$MME_TAKCPU;
      537    13646        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:83   
      538    13647        /*I* NAME:         TOS$MME_SCUASG
      539    13648             INTERFACE:
      540    13649             INPUT:        AL   = Subexec # (30 - 32)
      541    13650                                  Test Page # (33 - 35)
      542    13651                           X4   = SCU #
      543    13652             OUTPUT:       STATUS_WD_A - '203333'O               (0 - 17)
      544    13653                                         subexec # / test page # (30 - 35)
      545    13654
      546    13655                           STATUS_WD_B - Status                  (0 successful
      547    13656                                         23 = SCU not ASSIGNED
      548    13657                                         Function Code           (18 - 26)
      549    13658                                         Console Code            (27 - 35)
      550    13659                           RETURN_DELTA - set to 1
      551    13660             DESCRIPTION:  This routine processes the request to ASSIGN an SCU to the
      552    13661                           system.  Unlike a GCOS system CP6 does not have the ability
      553    13662                           to assign an SCU on the fly.  A warning message will be
      554    13663                           issued to that effect, and a status code of 23 (SCU not
      555    13664                           ASSIGNED) will be returned to the user.
      556    13665        */
      557    13666    1   TOS$MME_SCUASG: PROC (A,X4,RETURN_DELTA) ;

  13666  3 001037   200016 741300       TOS$MME_SCU* STX1  ! SERVICE_CODE+2,,AUTO

      558    13667
      559    13668    2      DCL A                     UBIN WORD ALIGNED;
      560    13669    2      DCL X4                      UBIN HALF ALIGNED;
      561    13670    2      DCL 1 PORT,
      562    13671    2            2 LGTH     UBIN BYTE CALIGNED,
      563    13672    2            2 NUMBER   CHAR (2) CALIGNED ;
      564    13673    2      DCL RETURN_DELTA            SBIN HALF HALIGNED;
      565    13674        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:84   
      566    13675    3      IF (B$SCU$ = ADDR(NIL)) THEN DO;

  13675  3 001040   000010 236000 1                  LDQ     B$SCU$
         3 001041   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001042   001067 601000 3                  TNZ     s:13683

      567    13676    3              CALL M$SAD(FPT_SAD) WHENALTRETURN

  13676  3 001043   000004 630400 1                  EPPR0   FPT_SAD
         3 001044   430015 713400                    CLIMB   alt,+12301
         3 001045   400000 401760                    pmme    nvectors=1
         3 001046   001050 702000 3                  TSX2    s:13678
         3 001047   001056 710000 3                  TRA     s:13681

      568    13677    4                   DO;

      569    13678    4                      STATUS_WD_B.STATUS_CODE = 19;

  13678  3 001050   000023 220003                    LDX0    19,DU
         3 001051   000014 740000 1                  STX0    STATUS_WD_B

      570    13679    4                      RETURN_DELTA = 1;

  13679  3 001052   200021 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 001053   000100 101400                    MRL     fill='000'O
         3 001054   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 001055   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

      571    13680    4                   END;

      572    13681    3              B$SCU$ = PINCRW(B$SPCL1$,POFFW(ADDR(H_DPS8000_SCU_INFO),B$IS$));

  13681  3 001056   000004 236000 4                  LDQ     4
         3 001057   000022 772000                    QRL     18
         3 001060   000000 235000 xsym               LDA     B$IS$
         3 001061   000022 771000                    ARL     18
         3 001062   200032 755100                    STA     @ERROR_VALUE+1,,AUTO
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:85   
         3 001063   200032 136100                    SBLQ    @ERROR_VALUE+1,,AUTO
         3 001064   000022 736000                    QLS     18
         3 001065   000000 036000 xsym               ADLQ    B$SPCL1$
         3 001066   000010 756000 1                  STQ     B$SCU$

      573    13682    3           END;

      574    13683    2      PORT.LGTH = 2 ;

  13683  3 001067   002000 236003                    LDQ     1024,DU
         3 001070   200022 552140                    STBQ    PORT,'40'O,AUTO

      575    13684    2      CALL BINCHAR (PORT.NUMBER, X4) ;

  13684  3 001071   200020 470500                    LDP0    @X4,,AUTO
         3 001072   000000 236100                    LDQ     0,,PR0
         3 001073   000022 772000                    QRL     18
         3 001074   000000 235003                    LDA     0,DU
         3 001075   200032 757100                    STAQ    @ERROR_VALUE+1,,AUTO
         3 001076   000100 301500                    BTD
         3 001077   200032 000010                    NDSC9   @ERROR_VALUE+1,,AUTO     cn=0,s=lsgnf,sf=0,n=8
         3 001100   200022 230002                    NDSC9   PORT,,AUTO               cn=1,s=nosgn,sf=0,n=2

      576    13685    2      TOS_ERROR_CODE.ERR# = %E$RPMASGSCU;

  13685  3 001101   000000 236000 1                  LDQ     TOS_ERROR_CODE
         3 001102   000002 376000 4                  ANQ     2
         3 001103   003640 276007                    ORQ     1952,DL
         3 001104   000000 756000 1                  STQ     TOS_ERROR_CODE

      577    13686    2      TOLTS_GETCMD.ERR_CODE = TOS_ERROR_CODE;

  13686  3 001105   000000 236000 1                  LDQ     TOS_ERROR_CODE
         3 001106   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      578    13687    2      TOLTS_GETCMD.F1_ = VECTOR (PORT);

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:86   
  13687  3 001107   577640 235007                    LDA     -65632,DL
         3 001110   200032 452500                    STP2    @ERROR_VALUE+1,,AUTO
         3 001111   200032 236100                    LDQ     @ERROR_VALUE+1,,AUTO
         3 001112   000022 036003                    ADLQ    18,DU
         3 001113   000017 755000 xsym               STA     TOLTS_GETCMD+15
         3 001114   000020 756000 xsym               STQ     TOLTS_GETCMD+16

      579    13688    2      TOLTS_GETCMD.FLGLEV# = 4;

  13688  3 001115   000004 236003                    LDQ     4,DU
         3 001116   000006 552020 xsym               STBQ    TOLTS_GETCMD+6,'20'O

      580    13689           /* VERIFY THAT SCU IS (STILL) RELEASED */
      581    13690    3      IF B$SCU$ -> SCU_INFO.SCU_STATUS.REL_BIT(X4) THEN DO ;

  13690  3 001117   000000 220100                    LDX0    0,,PR0
         3 001120   000000 020100                    ADLX0   0,,PR0
         3 001121   000010 471400 1                  LDP1    B$SCU$
         3 001122   100001 236110                    LDQ     1,X0,PR1
         3 001123   200000 316007                    CANQ    65536,DL
         3 001124   001134 600000 3                  TZE     s:13695

      582    13691    3              RETURN_DELTA = 1 ;

  13691  3 001125   200021 473500                    LDP3    @RETURN_DELTA,,AUTO
         3 001126   000100 101400                    MRL     fill='000'O
         3 001127   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 001130   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2

      583    13692    3              STATUS_WD_B.STATUS_CODE = 0 ;

  13692  3 001131   000000 220003                    LDX0    0,DU
         3 001132   000014 740000 1                  STX0    STATUS_WD_B

      584    13693    3           END;

  13693  3 001133   001142 710000 3                  TRA     s:13698
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:87   

      585    13694    3      ELSE DO;

      586    13695    3              RETURN_DELTA = 1 ;

  13695  3 001134   200021 473500                    LDP3    @RETURN_DELTA,,AUTO
         3 001135   000100 101400                    MRL     fill='000'O
         3 001136   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 001137   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2

      587    13696    3              STATUS_WD_B.STATUS_CODE = 19 ;

  13696  3 001140   000023 220003                    LDX0    19,DU
         3 001141   000014 740000 1                  STX0    STATUS_WD_B

      588    13697    3           END;

      589    13698    2      CALL XUG$ERRMSG (TOLTS_GETCMD);

  13698  3 001142   000003 630400 4                  EPPR0   3
         3 001143   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001144   000000 701000 xent               TSX1    XUG$ERRMSG
         3 001145   000000 011000                    NOP     0

      590    13699    2      STATUS_WD_A.SUB_EXEC = A ;

  13699  3 001146   200017 470500                    LDP0    @A,,AUTO
         3 001147   000000 720100                    LXL0    0,,PR0
         3 001150   000013 440000 1                  SXL0    STATUS_WD_A

      591    13700    2      STATUS_WD_B.FUNCTION_CODE = %SOLTS_ASGSCU ;

  13700  3 001151   006000 236007                    LDQ     3072,DL
         3 001152   000014 552010 1                  STBQ    STATUS_WD_B,'10'O

      592    13701    2      STATUS_WD_B.FUNCTION_TYPE = 0 ;

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:88   
  13701  3 001153   000000 236003                    LDQ     0,DU
         3 001154   000014 552004 1                  STBQ    STATUS_WD_B,'04'O

      593    13702           /* SETUP INTER COMM IO CALL TO DISPATCHER */
      594    13703    2      QUEUE_ENTRY(0) = ENTRY_A;

  13703  3 001155   000013 235000 1                  LDA     STATUS_WD_A
         3 001156   200010 755100                    STA     QUEUE_ENTRY,,AUTO

      595    13704    2      QUEUE_ENTRY(1) = ENTRY_B;

  13704  3 001157   000014 235000 1                  LDA     STATUS_WD_B
         3 001160   200011 755100                    STA     QUEUE_ENTRY+1,,AUTO

      596    13705    2      QUEUE_ENTRY(2) = 0;

  13705  3 001161   200012 450100                    STZ     QUEUE_ENTRY+2,,AUTO

      597    13706    2      REQUEST_TYPE = %DRT_BUILD ;

  13706  3 001162   000001 235007                    LDA     1,DL
         3 001163   200013 755100                    STA     REQUEST_TYPE,,AUTO

      598    13707    2      SERVICE_CODE = %DSC_ISC ;

  13707  3 001164   000002 221003                    LDX1    2,DU
         3 001165   200014 741100                    STX1    SERVICE_CODE,,AUTO

      599    13708    2      CALL TOD$DISPATCHER( REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY) ;

  13708  3 001166   200010 631500                    EPPR1   QUEUE_ENTRY,,AUTO
         3 001167   200034 451500                    STP1    @ERROR_VALUE+3,,AUTO
         3 001170   200014 633500                    EPPR3   SERVICE_CODE,,AUTO
         3 001171   200033 453500                    STP3    @ERROR_VALUE+2,,AUTO
         3 001172   200013 634500                    EPPR4   REQUEST_TYPE,,AUTO
         3 001173   200032 454500                    STP4    @ERROR_VALUE+1,,AUTO
         3 001174   200032 630500                    EPPR0   @ERROR_VALUE+1,,AUTO
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:89   
         3 001175   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 001176   000000 701000 xent               TSX1    TOD$DISPATCHER
         3 001177   000000 011000                    NOP     0

      600    13709    2      RETURN ;

  13709  3 001200   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 001201   000001 702211                    TSX2  ! 1,X1

      601    13710    2   END TOS$MME_SCUASG ;
      602    13711        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:90   
      603    13712        /*I* NAME:         TOS$MME_SCUREL
      604    13713             INTERFACE:
      605    13714             INPUT:        AL   = Subexec # (30 - 32)
      606    13715                                  Test Page # (33 - 35)
      607    13716                           X4   = SCU #
      608    13717             OUTPUT:       STATUS_WD_A - '203333'O               (0 - 17)
      609    13718                                         subexec # / test page # (30 - 35)
      610    13719
      611    13720                           STATUS_WD_B - Status                  (0 - 17)
      612    13721                                         00 = successful
      613    13722                                         23 = SCU not RELEASED
      614    13723                                         Function Code           (18 - 26)
      615    13724                                         Console Code            (27 - 35)
      616    13725                           RETURN_DELTA - set to 1
      617    13726             DESCRIPTION:  This routine processes the request to RELEASE an SCU from
      618    13727                           the system.  Unlike a GCOS system CP6 does not have the
      619    13728                           ability to release an SCU on the fly.  A warning message
      620    13729                           will be issued to that effect, and a status code of 23
      621    13730                           (SCU not RELEASED) will be returned to the user.
      622    13731        */
      623    13732    1   TOS$MME_SCUREL: PROC (A,X4,RETURN_DELTA) ;

  13732  3 001202   200016 741300       TOS$MME_SCU* STX1  ! SERVICE_CODE+2,,AUTO

      624    13733
      625    13734    2      DCL A                     UBIN WORD ALIGNED;
      626    13735    2      DCL X4                      UBIN HALF ALIGNED;
      627    13736    2      DCL 1 PORT,
      628    13737    2            2 LGTH     UBIN BYTE CALIGNED,
      629    13738    2            2 NUMBER   CHAR (2) CALIGNED ;
      630    13739    2      DCL RETURN_DELTA            SBIN HALF HALIGNED;
      631    13740        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:91   
      632    13741    3      IF (B$SCU$ = ADDR(NIL)) THEN DO;

  13741  3 001203   000010 236000 1                  LDQ     B$SCU$
         3 001204   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001205   001232 601000 3                  TNZ     s:13750

      633    13742    3              CALL M$SAD(FPT_SAD) WHENALTRETURN

  13742  3 001206   000004 630400 1                  EPPR0   FPT_SAD
         3 001207   430015 713400                    CLIMB   alt,+12301
         3 001210   400000 401760                    pmme    nvectors=1
         3 001211   001213 702000 3                  TSX2    s:13744
         3 001212   001221 710000 3                  TRA     s:13747

      634    13743    4                   DO;

      635    13744    4                      STATUS_WD_B.STATUS_CODE = 19;

  13744  3 001213   000023 220003                    LDX0    19,DU
         3 001214   000014 740000 1                  STX0    STATUS_WD_B

      636    13745    4                      RETURN_DELTA = 1;

  13745  3 001215   200021 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 001216   000100 101400                    MRL     fill='000'O
         3 001217   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 001220   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

      637    13746    4                   END;

      638    13747    3              B$SCU$ = PINCRW(B$SPCL1$,POFFW(ADDR(H_DPS8000_SCU_INFO),B$IS$));

  13747  3 001221   000004 236000 4                  LDQ     4
         3 001222   000022 772000                    QRL     18
         3 001223   000000 235000 xsym               LDA     B$IS$
         3 001224   000022 771000                    ARL     18
         3 001225   200032 755100                    STA     @ERROR_VALUE+1,,AUTO
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:92   
         3 001226   200032 136100                    SBLQ    @ERROR_VALUE+1,,AUTO
         3 001227   000022 736000                    QLS     18
         3 001230   000000 036000 xsym               ADLQ    B$SPCL1$
         3 001231   000010 756000 1                  STQ     B$SCU$

      639    13748    3           END;

      640    13749           /* VERIFY THAT SCU IS RELEASED (PARTITIONED) */
      641    13750    3      IF B$SCU$ -> SCU_INFO.SCU_STATUS.REL_BIT(X4) THEN DO;

  13750  3 001232   200020 470500                    LDP0    @X4,,AUTO
         3 001233   000000 220100                    LDX0    0,,PR0
         3 001234   000000 020100                    ADLX0   0,,PR0
         3 001235   000010 471400 1                  LDP1    B$SCU$
         3 001236   100001 236110                    LDQ     1,X0,PR1
         3 001237   200000 316007                    CANQ    65536,DL
         3 001240   001250 600000 3                  TZE     s:13755

      642    13751    3              RETURN_DELTA = 1 ;

  13751  3 001241   200021 473500                    LDP3    @RETURN_DELTA,,AUTO
         3 001242   000100 101400                    MRL     fill='000'O
         3 001243   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 001244   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2

      643    13752    3              STATUS_WD_B.STATUS_CODE = 0 ;

  13752  3 001245   000000 220003                    LDX0    0,DU
         3 001246   000014 740000 1                  STX0    STATUS_WD_B

      644    13753    3           END ;

  13753  3 001247   001256 710000 3                  TRA     s:13758

      645    13754    3      ELSE DO;

      646    13755    3              STATUS_WD_B.STATUS_CODE = 19 ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:93   

  13755  3 001250   000023 221003                    LDX1    19,DU
         3 001251   000014 741000 1                  STX1    STATUS_WD_B

      647    13756    3              RETURN_DELTA = 1 ;

  13756  3 001252   200021 473500                    LDP3    @RETURN_DELTA,,AUTO
         3 001253   000100 101400                    MRL     fill='000'O
         3 001254   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 001255   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2

      648    13757    3           END;

      649    13758    2      PORT.LGTH = 2 ;

  13758  3 001256   002000 236003                    LDQ     1024,DU
         3 001257   200022 552140                    STBQ    PORT,'40'O,AUTO

      650    13759    2      CALL BINCHAR (PORT.NUMBER, X4) ;

  13759  3 001260   000000 236100                    LDQ     0,,PR0
         3 001261   000022 772000                    QRL     18
         3 001262   000000 235003                    LDA     0,DU
         3 001263   200032 757100                    STAQ    @ERROR_VALUE+1,,AUTO
         3 001264   000100 301500                    BTD
         3 001265   200032 000010                    NDSC9   @ERROR_VALUE+1,,AUTO     cn=0,s=lsgnf,sf=0,n=8
         3 001266   200022 230002                    NDSC9   PORT,,AUTO               cn=1,s=nosgn,sf=0,n=2

      651    13760    2      TOS_ERROR_CODE.ERR# = %E$RPMRELSCU;

  13760  3 001267   000000 236000 1                  LDQ     TOS_ERROR_CODE
         3 001270   000002 376000 4                  ANQ     2
         3 001271   003650 276007                    ORQ     1960,DL
         3 001272   000000 756000 1                  STQ     TOS_ERROR_CODE

      652    13761    2      TOLTS_GETCMD.ERR_CODE = TOS_ERROR_CODE;

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:94   
  13761  3 001273   000000 236000 1                  LDQ     TOS_ERROR_CODE
         3 001274   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      653    13762    2      TOLTS_GETCMD.F1_ = VECTOR (PORT);

  13762  3 001275   577640 235007                    LDA     -65632,DL
         3 001276   200032 452500                    STP2    @ERROR_VALUE+1,,AUTO
         3 001277   200032 236100                    LDQ     @ERROR_VALUE+1,,AUTO
         3 001300   000022 036003                    ADLQ    18,DU
         3 001301   000017 755000 xsym               STA     TOLTS_GETCMD+15
         3 001302   000020 756000 xsym               STQ     TOLTS_GETCMD+16

      654    13763    2      TOLTS_GETCMD.FLGLEV# = 4;

  13763  3 001303   000004 236003                    LDQ     4,DU
         3 001304   000006 552020 xsym               STBQ    TOLTS_GETCMD+6,'20'O

      655    13764    2      CALL XUG$ERRMSG (TOLTS_GETCMD);

  13764  3 001305   000003 630400 4                  EPPR0   3
         3 001306   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 001307   000000 701000 xent               TSX1    XUG$ERRMSG
         3 001310   000000 011000                    NOP     0

      656    13765    2      STATUS_WD_A.SUB_EXEC = A ;

  13765  3 001311   200017 470500                    LDP0    @A,,AUTO
         3 001312   000000 720100                    LXL0    0,,PR0
         3 001313   000013 440000 1                  SXL0    STATUS_WD_A

      657    13766    2      STATUS_WD_B.FUNCTION_CODE = %SOLTS_RELSCU ;

  13766  3 001314   005000 236007                    LDQ     2560,DL
         3 001315   000014 552010 1                  STBQ    STATUS_WD_B,'10'O

      658    13767    2      STATUS_WD_B.FUNCTION_TYPE = X4 ;

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:95   
  13767  3 001316   200020 471500                    LDP1    @X4,,AUTO
         3 001317   100000 236100                    LDQ     0,,PR1
         3 001320   000022 772000                    QRL     18
         3 001321   000014 552004 1                  STBQ    STATUS_WD_B,'04'O

      659    13768           /* SETUP INTER COMM IO CALL TO DISPATCHER */
      660    13769    2      QUEUE_ENTRY(0) = ENTRY_A;

  13769  3 001322   000013 235000 1                  LDA     STATUS_WD_A
         3 001323   200010 755100                    STA     QUEUE_ENTRY,,AUTO

      661    13770    2      QUEUE_ENTRY(1) = ENTRY_B;

  13770  3 001324   000014 236000 1                  LDQ     STATUS_WD_B
         3 001325   200011 756100                    STQ     QUEUE_ENTRY+1,,AUTO

      662    13771    2      QUEUE_ENTRY(2) = 0;

  13771  3 001326   200012 450100                    STZ     QUEUE_ENTRY+2,,AUTO

      663    13772    2      REQUEST_TYPE = %DRT_BUILD ;

  13772  3 001327   000001 235007                    LDA     1,DL
         3 001330   200013 755100                    STA     REQUEST_TYPE,,AUTO

      664    13773    2      SERVICE_CODE = %DSC_ISC ;

  13773  3 001331   000002 221003                    LDX1    2,DU
         3 001332   200014 741100                    STX1    SERVICE_CODE,,AUTO

      665    13774    2      CALL TOD$DISPATCHER( REQUEST_TYPE, SERVICE_CODE, QUEUE_ENTRY) ;

  13774  3 001333   200010 633500                    EPPR3   QUEUE_ENTRY,,AUTO
         3 001334   200034 453500                    STP3    @ERROR_VALUE+3,,AUTO
         3 001335   200014 634500                    EPPR4   SERVICE_CODE,,AUTO
         3 001336   200033 454500                    STP4    @ERROR_VALUE+2,,AUTO
         3 001337   200013 635500                    EPPR5   REQUEST_TYPE,,AUTO
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:96   
         3 001340   200032 455500                    STP5    @ERROR_VALUE+1,,AUTO
         3 001341   200032 630500                    EPPR0   @ERROR_VALUE+1,,AUTO
         3 001342   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 001343   000000 701000 xent               TSX1    TOD$DISPATCHER
         3 001344   000000 011000                    NOP     0

      666    13775    2      RETURN ;

  13775  3 001345   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 001346   000001 702211                    TSX2  ! 1,X1

      667    13776    2   END TOS$MME_SCUREL ;
      668    13777        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:97   
      669    13778        /*I* NAME:         TOS$MME_RETCPU
      670    13779             CALL:         CALL TOS$MME_RETCPU(AREG,RETURN_DELTA);
      671    13780             INPUT:        AREG bits 30-35 contains the CPU port number.
      672    13781             OUTPUT:       RETURN_DELTA = 1 if CPU not configured.
      673    13782                           RETURN_DELTA = 2 if CPU is stopped.
      674    13783                           RETURN_DELTA = 3 if request honored.
      675    13784             DESCRIPTION:  M$TDREQCPU is called to return the CPU specified
      676    13785                           to a normal mode.
      677    13786        */
      678    13787
      679    13788    1   TOS$MME_RETCPU: PROC (A, RETURN_DELTA);

  13788  3 001347   200016 741300       TOS$MME_RET* STX1  ! SERVICE_CODE+2,,AUTO

      680    13789
      681    13790    2      DCL 1 A ALIGNED,
      682    13791    2            2 MBZ             UBIN(12) UNAL,
      683    13792    2            2 PHYSICAL_CPU    UBIN(6) UNAL ,
      684    13793    2            2 LOGICAL_CPU     UBIN(12) UNAL ,
      685    13794    2            2 PORT_ASSIGNMENT UBIN(6) UNAL;
      686    13795    2      DCL RETURN_DELTA        SBIN HALF HALIGNED ;
      687    13796           %FPT_TDREQCPU (FPTN = RETCPU_FPT, MODE=NORMAL);
      688    13812
      689    13813        /* CODE */
      690    13814
      691    13815    2      RETCPU_FPT.V.CPU# = A.PORT_ASSIGNMENT;

  13815  3 001350   200017 470500                    LDP0    @A,,AUTO
         3 001351   000000 236100                    LDQ     0,,PR0
         3 001352   000077 376007                    ANQ     63,DL
         3 001353   000033 736000                    QLS     27
         3 001354   000031 552040 1                  STBQ    RETCPU_FPT+5,'40'O

      692    13816    2      CALL M$TDREQCPU (RETCPU_FPT) WHENRETURN

  13816  3 001355   000024 630400 1                  EPPR0   RETCPU_FPT
         3 001356   470005 713400                    CLIMB   alt,+28677
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:98   
         3 001357   400000 401760                    pmme    nvectors=1
         3 001360   001366 702000 3                  TSX2    s:13822

      693    13817    3           DO ;

      694    13818    3              RETURN_DELTA = 3 ;

  13818  3 001361   200020 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 001362   000100 101400                    MRL     fill='000'O
         3 001363   000005 000004 xsym               ADSC9   B_VECTNIL+5              cn=0,n=4
         3 001364   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

      695    13819    3           END /* WHENRETURN */ ;

  13819  3 001365   001372 710000 3                  TRA     s:13824

      696    13820    2      WHENALTRETURN
      697    13821    3           DO ;

      698    13822    3              RETURN_DELTA = 1 ;

  13822  3 001366   200020 470500                    LDP0    @RETURN_DELTA,,AUTO
         3 001367   000100 101400                    MRL     fill='000'O
         3 001370   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         3 001371   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

      699    13823    3           END /* WHENALTRETURN */ ;

      700    13824    2      RETURN ;

  13824  3 001372   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 001373   000001 702211                    TSX2  ! 1,X1

      701    13825
      702    13826    2   END TOS$MME_RETCPU;
      703    13827        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:99   
      704    13828        /*I* NAME:         TOS$PROCESS_PACT
      705    13829             AUTHOR:       Scott S. Sheppard
      706    13830             CALL:         CALL TOS$PROCESS_PACT
      707    13831             INTERFACE:    PROCESS_$PACTC
      708    13832                           PROCESS_$PATCP
      709    13833                           PROCESS_$PACTN
      710    13834                           PROCESS_$PACTnnn
      711    13835                           PROCESS_$PACT
      712    13836                           PROCESS_$PACT_ERROR
      713    13837             INPUT:        TEST_INPUT_REQ.TEST_INPUT
      714    13838                           TOS$COMWD
      715    13839             OUTPUT:       TOS$COMWD
      716    13840             DESCRIPTION:  Sets up the  TOLTS <-> PACT  communications word
      717    13841                           (i.e, TOS$COMWD) which is periodically picked up
      718    13842                           by PACT using a MME COMWD request.
      719    13843
      720    13844                           $PACT or $SLTA command options:
      721    13845                              C     - set time count for continuous processing
      722    13846                              NPm   - stop looping on port m
      723    13847                                         where 0 <= m <= 7
      724    13848                              Pm    - loop on port m
      725    13849                                         where 0 <= m <= 7
      726    13850                              nnn   - set time count to nnn minutes where
      727    13851                                         0 <= nnn <= 240
      728    13852        */
      729    13853        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:100  
      730    13854    1   TOS$PROCESS_PACT: PROC ;

  13854  3 001374   200016 741300       TOS$PROCESS* STX1  ! SERVICE_CODE+2,,AUTO

      731    13855
      732    13856    2      DCL TOS$COMWD       BIT (36) SYMREF ALIGNED ;
      733    13857    2      DCL 1 COMWD         ALIGNED,
      734    13858    2            2 PROCESSOR   (0:7) BIT (1) UNAL,
      735    13859    2            2 ZERO_CPUS   REDEF PROCESSOR UBIN (8) UNAL,
      736    13860    2            2 *           BIT (10) UNAL,
      737    13861    2            2 STOP_BIT    BIT (1)  UNAL,
      738    13862    2            2 *           BIT (5)  UNAL,
      739    13863    2            2 TIME_COUNT  UBIN (12) UNAL ;
      740    13864    2      DCL 1 BINARY_WORD   ALIGNED,
      741    13865    2            2 *           UBIN (24) UNAL,
      742    13866    2            2 LAST12      UBIN (12) UNAL ;
      743    13867    2      DCL BINARY_WORD_ REDEF BINARY_WORD UBIN (36) ALIGNED ;
      744    13868    2      DCL VALID_PACT_RQST BIT (1) CALIGNED ;
      745    13869    2      DCL CUR_CHAR        UBIN (36) ALIGNED ;
      746    13870    2      DCL LGTH            UBIN (36) ALIGNED ;
      747    13871    2      DCL ON              BIT (1) CONSTANT CALIGNED INIT ('1'B) ;
      748    13872    2      DCL OFF             BIT (1) CONSTANT CALIGNED INIT ('0'B) ;
      749    13873           %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:101  
      750    13874        /* Code */
      751    13875
      752    13876           /* Initialization */
      753    13877    2      COMWD = TOS$COMWD ;

  13877  3 001375   000000 236000 xsym               LDQ     TOS$COMWD
         3 001376   200017 756100                    STQ     COMWD,,AUTO

      754    13878    2      VALID_PACT_RQST = %TRUE ;

  13878  3 001377   400000 236003                    LDQ     -131072,DU
         3 001400   200021 756100                    STQ     VALID_PACT_RQST,,AUTO

      755    13879
      756    13880           /* Find length and parse through various PACT options. */
      757    13881    2      CALL INDEX (LGTH, ' ', TOT$ECP.TEST_REQ, 6) ;

  13881  3 001401   000000 124400                    SCM     mask='000'O
         3 001402   000001 400006 xsym               ADSC9   TOT$ECP+1                cn=2,n=6
         3 001403   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 001404   200023 000100                    ARG     LGTH,,AUTO
         3 001405   200023 235100                    LDA     LGTH,,AUTO
         3 001406   000006 035007                    ADLA    6,DL
         3 001407   200023 755100                    STA     LGTH,,AUTO

      758    13882    2      CUR_CHAR = 5 ;

  13882  3 001410   000005 235007                    LDA     5,DL
         3 001411   200022 755100                    STA     CUR_CHAR,,AUTO

      759    13883    3      DO WHILE (CUR_CHAR < LGTH  AND  VALID_PACT_RQST) ;

  13883  3 001412   001547 710000 3                  TRA     s:13898

      760    13884    4         DO SELECT (TOT$ECP.TEST_REQ_(CUR_CHAR)) ;

  13884  3 001413   200022 235100                    LDA     CUR_CHAR,,AUTO
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:102  
         3 001414   040000 106405                    CMPC    fill='040'O
         3 001415   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001416   000005 000001 4                  ADSC9   5                        cn=0,n=1
         3 001417   001471 602000 3                  TNC     s:13884+46
         3 001420   001540 600000 3                  TZE     s:13894
         3 001421   040000 106405                    CMPC    fill='040'O
         3 001422   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001423   000006 000001 4                  ADSC9   6                        cn=0,n=1
         3 001424   001440 602000 3                  TNC     s:13884+21
         3 001425   001525 600000 3                  TZE     s:13888
         3 001426   040000 106405                    CMPC    fill='040'O
         3 001427   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001430   000007 000001 4                  ADSC9   7                        cn=0,n=1
         3 001431   001543 602000 3                  TNC     s:13896
         3 001432   001530 600000 3                  TZE     s:13890
         3 001433   040000 106405                    CMPC    fill='040'O
         3 001434   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001435   000010 000001 4                  ADSC9   8                        cn=0,n=1
         3 001436   001543 601000 3                  TNZ     s:13896
         3 001437   001533 710000 3                  TRA     s:13892
         3 001440   040000 106405                    CMPC    fill='040'O
         3 001441   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001442   000011 000001 4                  ADSC9   9                        cn=0,n=1
         3 001443   001464 602000 3                  TNC     s:13884+41
         3 001444   001540 600000 3                  TZE     s:13894
         3 001445   040000 106405                    CMPC    fill='040'O
         3 001446   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001447   000012 000001 4                  ADSC9   10                       cn=0,n=1
         3 001450   001457 602000 3                  TNC     s:13884+36
         3 001451   001540 600000 3                  TZE     s:13894
         3 001452   040000 106405                    CMPC    fill='040'O
         3 001453   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001454   000013 000001 4                  ADSC9   11                       cn=0,n=1
         3 001455   001543 601000 3                  TNZ     s:13896
         3 001456   001540 710000 3                  TRA     s:13894
         3 001457   040000 106405                    CMPC    fill='040'O
         3 001460   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:103  
         3 001461   000014 000001 4                  ADSC9   12                       cn=0,n=1
         3 001462   001543 601000 3                  TNZ     s:13896
         3 001463   001540 710000 3                  TRA     s:13894
         3 001464   040000 106405                    CMPC    fill='040'O
         3 001465   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001466   000015 000001 4                  ADSC9   13                       cn=0,n=1
         3 001467   001543 601000 3                  TNZ     s:13896
         3 001470   001540 710000 3                  TRA     s:13894
         3 001471   040000 106405                    CMPC    fill='040'O
         3 001472   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001473   000016 000001 4                  ADSC9   14                       cn=0,n=1
         3 001474   001503 602000 3                  TNC     s:13884+56
         3 001475   001540 600000 3                  TZE     s:13894
         3 001476   040000 106405                    CMPC    fill='040'O
         3 001477   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001500   000017 000001 4                  ADSC9   15                       cn=0,n=1
         3 001501   001543 601000 3                  TNZ     s:13896
         3 001502   001540 710000 3                  TRA     s:13894
         3 001503   040000 106405                    CMPC    fill='040'O
         3 001504   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001505   000020 000001 4                  ADSC9   16                       cn=0,n=1
         3 001506   001515 602000 3                  TNC     s:13884+66
         3 001507   001540 600000 3                  TZE     s:13894
         3 001510   040000 106405                    CMPC    fill='040'O
         3 001511   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001512   000021 000001 4                  ADSC9   17                       cn=0,n=1
         3 001513   001543 601000 3                  TNZ     s:13896
         3 001514   001540 710000 3                  TRA     s:13894
         3 001515   040000 106405                    CMPC    fill='040'O
         3 001516   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001517   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         3 001520   001543 601000 3                  TNZ     s:13896
         3 001521   001522 710000 3                  TRA     s:13886

      761    13885    4            SELECT (' ') ;

      762    13886    4            CALL PROCESS_$PACT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:104  

  13886  3 001522   001567 701000 3                  TSX1    PROCESS_$PACT
         3 001523   000000 011000                    NOP     0
         3 001524   001547 710000 3                  TRA     s:13898

      763    13887    4            SELECT ('C') ;

      764    13888    4            CALL PROCESS_$PACTC ;

  13888  3 001525   001576 701000 3                  TSX1    PROCESS_$PACTC
         3 001526   000000 011000                    NOP     0
         3 001527   001547 710000 3                  TRA     s:13898

      765    13889    4            SELECT ('N') ;

      766    13890    4            CALL PROCESS_$PACTN ;

  13890  3 001530   001605 701000 3                  TSX1    PROCESS_$PACTN
         3 001531   000000 011000                    NOP     0
         3 001532   001547 710000 3                  TRA     s:13898

      767    13891    4            SELECT ('P') ;

      768    13892    4            CALL PROCESS_$PACTP (ON) ;

  13892  3 001533   000022 236000 4                  LDQ     18
         3 001534   200027 756100                    STQ     START+1,,AUTO
         3 001535   001643 701000 3                  TSX1    PROCESS_$PACTP
         3 001536   000000 011000                    NOP     0
         3 001537   001547 710000 3                  TRA     s:13898

      769    13893    4            SELECT ('0','1','2','3','4','5','6','7','8','9') ;

      770    13894    4            CALL PROCESS_$PACTNNN ;

  13894  3 001540   001714 701000 3                  TSX1    PROCESS_$PACTNNN
         3 001541   000000 011000                    NOP     0
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:105  
         3 001542   001547 710000 3                  TRA     s:13898

      771    13895    4            SELECT (ELSE) ;

      772    13896    4         CALL PROCESS_$PACT_ERROR (%E$BADPACTREQ) ;

  13896  3 001543   000024 236000 4                  LDQ     20
         3 001544   200031 756100                    STQ     @SET_CPU_PORT+2,,AUTO
         3 001545   001775 701000 3                  TSX1    PROCESS_$PACT_ERROR
         3 001546   000000 011000                    NOP     0

      773    13897    4         END /* SELECT */ ;

      774    13898    3      END /* WHILE */ ;

  13898  3 001547   200022 236100                    LDQ     CUR_CHAR,,AUTO
         3 001550   200023 116100                    CMPQ    LGTH,,AUTO
         3 001551   001554 603000 3                  TRC     s:13901
         3 001552   200021 234100                    SZN     VALID_PACT_RQST,,AUTO
         3 001553   001413 604000 3                  TMI     s:13884

      775    13899
      776    13900           /* Assign local comwd to actual comwd if valid. */
      777    13901    2      IF VALID_PACT_RQST

  13901  3 001554   200021 234100                    SZN     VALID_PACT_RQST,,AUTO
         3 001555   001561 605000 3                  TPL     s:13903

      778    13902    2      THEN TOS$COMWD = COMWD ;

  13902  3 001556   200017 236100                    LDQ     COMWD,,AUTO
         3 001557   000000 756000 xsym               STQ     TOS$COMWD
         3 001560   001565 710000 3                  TRA     s:13904

      779    13903    2      ELSE CALL PROCESS_$PACT_ERROR (%E$NOCOMWDALTER) ;

  13903  3 001561   000026 236000 4                  LDQ     22
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:106  
         3 001562   200031 756100                    STQ     @SET_CPU_PORT+2,,AUTO
         3 001563   001775 701000 3                  TSX1    PROCESS_$PACT_ERROR
         3 001564   000000 011000                    NOP     0

      780    13904    2      RETURN ;

  13904  3 001565   200016 221300                    LDX1  ! SERVICE_CODE+2,,AUTO
         3 001566   000001 702211                    TSX2  ! 1,X1

      781    13905
      782    13906        /* END TOS$PROCESS_PACT */
      783    13907        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:107  
      784    13908        /*I* NAME:         PROCESS_$PACT
      785    13909             AUTHOR:       Scott S. Sheppard
      786    13910             CALL:         CALL PROCESS_$PACT
      787    13911             INTERFACE:    None Called.
      788    13912             INPUT:        No system data accessed.
      789    13913             OUTPUT:       COMWD.STOP_BIT - Set to terminate PACT
      790    13914                           CUR_CHAR - set to move past the trailing blank
      791    13915             DESCRIPTION:  Sets up the  TOLTS <-> PACT  communications word
      792    13916                           for PACT termination request.
      793    13917                           Valid Form: $PACT
      794    13918        */
      795    13919
      796    13920    2   PROCESS_$PACT: PROC ;

  13920  3 001567   200024 741300       PROCESS_$PA* STX1  ! LOGICAL_PORT,,AUTO

      797    13921
      798    13922        /* Code */
      799    13923
      800    13924    3      COMWD.STOP_BIT = '1'B ;

  13924  3 001570   400000 236007                    LDQ     -131072,DL
         3 001571   200017 256100                    ORSQ    COMWD,,AUTO

      801    13925    3      CUR_CHAR = CUR_CHAR + 1 ;

  13925  3 001572   200022 235100                    LDA     CUR_CHAR,,AUTO
         3 001573   000001 035007                    ADLA    1,DL
         3 001574   200022 755100                    STA     CUR_CHAR,,AUTO

      802    13926    3      RETURN ;

  13926  3 001575   000001 702211                    TSX2  ! 1,X1

      803    13927
      804    13928    3   END PROCESS_$PACT ;
      805    13929        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:108  
      806    13930        /*I* NAME:         PROCESS_$PACTC
      807    13931             AUTHOR:       Scott S. Sheppard
      808    13932             CALL:         CALL PROCESS_$PACTC
      809    13933             INTERFACE:    None Called.
      810    13934             INPUT:        CUR_CHAR - Current index into the $PACT request
      811    13935             OUTPUT:       COMWD.TIME_COUNT - set to zero (Continuous Checking)
      812    13936                           CUR_CHAR         - Advanced to next character
      813    13937             DESCRIPTION:  Sets up the  TOLTS <-> PACT  communications word
      814    13938                           for continuous processing mode.
      815    13939                           Valid Form: $PACT[options]C[options]
      816    13940        */
      817    13941
      818    13942    2   PROCESS_$PACTC: PROC ;

  13942  3 001576   200024 741300       PROCESS_$PA* STX1  ! LOGICAL_PORT,,AUTO

      819    13943
      820    13944        /* Code */
      821    13945
      822    13946    3      COMWD.TIME_COUNT = 0 ;

  13946  3 001577   000000 236003                    LDQ     0,DU
         3 001600   200017 752103                    STCQ    COMWD,'03'O,AUTO

      823    13947    3      CUR_CHAR = CUR_CHAR + 1 ;

  13947  3 001601   200022 235100                    LDA     CUR_CHAR,,AUTO
         3 001602   000001 035007                    ADLA    1,DL
         3 001603   200022 755100                    STA     CUR_CHAR,,AUTO

      824    13948    3      RETURN ;

  13948  3 001604   000001 702211                    TSX2  ! 1,X1

      825    13949
      826    13950    3   END PROCESS_$PACTC ;
      827    13951        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:109  
      828    13952        /*I* NAME:         PROCESS_$PACTN
      829    13953             AUTHOR:       Scott S. Sheppard
      830    13954             CALL:         CALL PROCESS_$PACTN
      831    13955             INTERFACE:    PROCESS_$PACTP
      832    13956                           PROCESS_$PACT_ERROR
      833    13957             INPUT:        TOT$ECP.TEST_REQ     CUR_CHAR
      834    13958             OUTPUT:       CUR_CHAR - advanced to next character
      835    13959             DESCRIPTION:  Sets up the  TOLTS <-> PACT  communications word
      836    13960                           to cancel port loop processing mode.
      837    13961                           Valid Form: $PACT[options] NPm[options]
      838    13962        */
      839    13963
      840    13964    2   PROCESS_$PACTN: PROC ;

  13964  3 001605   200024 741300       PROCESS_$PA* STX1  ! LOGICAL_PORT,,AUTO

      841    13965
      842    13966        /* Code */
      843    13967
      844    13968    3      IF CUR_CHAR < LGTH - 2

  13968  3 001606   200023 236100                    LDQ     LGTH,,AUTO
         3 001607   000002 136007                    SBLQ    2,DL
         3 001610   001635 604000 3                  TMI     s:13975
         3 001611   200022 116100                    CMPQ    CUR_CHAR,,AUTO
         3 001612   001635 602000 3                  TNC     s:13975
         3 001613   001635 600000 3                  TZE     s:13975

      845    13969    4      THEN DO ;

      846    13970    4              CUR_CHAR = CUR_CHAR + 1 ;

  13970  3 001614   200022 235100                    LDA     CUR_CHAR,,AUTO
         3 001615   000001 035007                    ADLA    1,DL
         3 001616   200022 755100                    STA     CUR_CHAR,,AUTO

      847    13971    4              IF TOT$ECP.TEST_REQ_(CUR_CHAR) = 'P'
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:110  

  13971  3 001617   040000 106405                    CMPC    fill='040'O
         3 001620   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001621   000010 000001 4                  ADSC9   8                        cn=0,n=1
         3 001622   001630 601000 3                  TNZ     s:13973

      848    13972    4              THEN CALL PROCESS_$PACTP (OFF) ;

  13972  3 001623   000027 236000 4                  LDQ     23
         3 001624   200027 756100                    STQ     START+1,,AUTO
         3 001625   001643 701000 3                  TSX1    PROCESS_$PACTP
         3 001626   000000 011000                    NOP     0
         3 001627   001641 710000 3                  TRA     s:13976

      849    13973    4              ELSE CALL PROCESS_$PACT_ERROR (%E$BADNPFORM) ;

  13973  3 001630   000031 236000 4                  LDQ     25
         3 001631   200031 756100                    STQ     @SET_CPU_PORT+2,,AUTO
         3 001632   001775 701000 3                  TSX1    PROCESS_$PACT_ERROR
         3 001633   000000 011000                    NOP     0

      850    13974    4           END /* THEN */ ;

  13974  3 001634   001641 710000 3                  TRA     s:13976

      851    13975    3      ELSE CALL PROCESS_$PACT_ERROR (%E$BADNPFORM) ;

  13975  3 001635   000031 236000 4                  LDQ     25
         3 001636   200031 756100                    STQ     @SET_CPU_PORT+2,,AUTO
         3 001637   001775 701000 3                  TSX1    PROCESS_$PACT_ERROR
         3 001640   000000 011000                    NOP     0

      852    13976    3      RETURN ;

  13976  3 001641   200024 221300                    LDX1  ! LOGICAL_PORT,,AUTO
         3 001642   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:111  
      853    13977
      854    13978    3   END PROCESS_$PACTN ;
      855    13979        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:112  
      856    13980        /*I* NAME:         PROCESS_$PACTP
      857    13981             AUTHOR:       Scott S. Sheppard
      858    13982             CALL:         CALL PROCESS_$PACTP (BIT)
      859    13983             INTERFACE:    CHARBIN
      860    13984                           PROCESS_$PACT_ERROR
      861    13985             INPUT:        BIT     - set port to on or off
      862    13986                           TOT$ECP.TEST_REQ
      863    13987                           CUR_CHAR- current character under examination
      864    13988                           LGTH    - number of characters entered for
      865    13989                                     the $PACT command
      866    13990             OUTPUT:       COMWD.PROCESSOR   - corresponding bit set for port
      867    13991                                               number entered
      868    13992                           CUR_CHAR          _ advanced to the next character
      869    13993             DESCRIPTION:  Sets up the  TOLTS <-> PACT  communications word
      870    13994                           to modify port status.
      871    13995                           Valid Form: $PACT[options][N]Pm[options]
      872    13996        */
      873    13997        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:113  
      874    13998    2   PROCESS_$PACTP: PROC (SET_CPU_PORT) ;

  13998  3 001643   200026 741300       PROCESS_$PA* STX1  ! DIGITS+1,,AUTO

      875    13999
      876    14000    3      DCL SET_CPU_PORT               BIT (1) CALIGNED ;
      877    14001
      878    14002        /* Code */
      879    14003
      880    14004    3      IF CUR_CHAR < LGTH - 1

  14004  3 001644   200023 236100                    LDQ     LGTH,,AUTO
         3 001645   000001 136007                    SBLQ    1,DL
         3 001646   001706 604000 3                  TMI     s:14015
         3 001647   200022 116100                    CMPQ    CUR_CHAR,,AUTO
         3 001650   001706 602000 3                  TNC     s:14015
         3 001651   001706 600000 3                  TZE     s:14015

      881    14005    4      THEN DO ;

      882    14006    4              CUR_CHAR = CUR_CHAR + 1 ;

  14006  3 001652   200022 235100                    LDA     CUR_CHAR,,AUTO
         3 001653   000001 035007                    ADLA    1,DL
         3 001654   200022 755100                    STA     CUR_CHAR,,AUTO

      883    14007    4              IF TOT$ECP.TEST_REQ_(CUR_CHAR) >= '0' AND TOT$ECP.TEST_REQ_(CUR_CHAR) <
             14007                       '8'

  14007  3 001655   040000 106405                    CMPC    fill='040'O
         3 001656   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001657   000020 000001 4                  ADSC9   16                       cn=0,n=1
         3 001660   001701 602000 3                  TNC     s:14013
         3 001661   040000 106405                    CMPC    fill='040'O
         3 001662   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001663   000012 000001 4                  ADSC9   10                       cn=0,n=1
         3 001664   001701 603000 3                  TRC     s:14013
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:114  

      884    14008    5              THEN DO ;

      885    14009    5                      CALL CHARBIN (BINARY_WORD_, TOT$ECP.TEST_REQ_(CUR_CHAR)) ;

  14009  3 001665   000100 305405                    DTB
         3 001666   000000 030001 xsym               NDSC9   TOT$ECP,A                cn=0,s=nosgn,sf=0,n=1
         3 001667   200020 000004                    NDSC9   BINARY_WORD,,AUTO        cn=0,s=lsgnf,sf=0,n=4

      886    14010    5                      COMWD.PROCESSOR(BINARY_WORD_) = SET_CPU_PORT ;

  14010  3 001670   200027 470500                    LDP0    @SET_CPU_PORT,,AUTO
         3 001671   200020 235100                    LDA     BINARY_WORD,,AUTO
         3 001672   003105 060500                    CSL     bolr='003'O
         3 001673   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
         3 001674   200017 000001                    BDSC    COMWD,A,AUTO             by=0,bit=0,n=1

      887    14011    5                      CUR_CHAR = CUR_CHAR + 1 ;

  14011  3 001675   200022 235100                    LDA     CUR_CHAR,,AUTO
         3 001676   000001 035007                    ADLA    1,DL
         3 001677   200022 755100                    STA     CUR_CHAR,,AUTO

      888    14012    5                   END /* THEN */ ;

  14012  3 001700   001712 710000 3                  TRA     s:14016

      889    14013    4              ELSE CALL PROCESS_$PACT_ERROR (%E$BADPORT) ;

  14013  3 001701   000033 236000 4                  LDQ     27
         3 001702   200031 756100                    STQ     @SET_CPU_PORT+2,,AUTO
         3 001703   001775 701000 3                  TSX1    PROCESS_$PACT_ERROR
         3 001704   000000 011000                    NOP     0

      890    14014    4           END /* THEN */ ;

  14014  3 001705   001712 710000 3                  TRA     s:14016
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:115  

      891    14015    3      ELSE CALL PROCESS_$PACT_ERROR (%E$BADPORT) ;

  14015  3 001706   000033 236000 4                  LDQ     27
         3 001707   200031 756100                    STQ     @SET_CPU_PORT+2,,AUTO
         3 001710   001775 701000 3                  TSX1    PROCESS_$PACT_ERROR
         3 001711   000000 011000                    NOP     0

      892    14016    3      RETURN ;

  14016  3 001712   200026 221300                    LDX1  ! DIGITS+1,,AUTO
         3 001713   000001 702211                    TSX2  ! 1,X1

      893    14017
      894    14018    3   END PROCESS_$PACTP ;
      895    14019        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:116  
      896    14020        /*I* NAME:         PROCESS_$PACTnnn
      897    14021             AUTHOR:       Scott S. Sheppard
      898    14022             CALL:         CALL PROCESS_$PACTNNN
      899    14023             INTERFACE:    CHARBIN
      900    14024                           SUBSTRING
      901    14025                           PROCESS_$PACT_ERROR
      902    14026             INPUT:        TOT$ECP.TEST_REQ
      903    14027                           CUR_CHAR- current character under examination
      904    14028                           LGTH    - number of characters entered for
      905    14029                                     the $PACT command
      906    14030             OUTPUT:       COMWD.TIME_COUNT - Number of minutes to run PACT
      907    14031                           CUR_CHAR         - Advanced past nnn sequence
      908    14032             DESCRIPTION:  Sets up the  TOLTS <-> PACT  communications word
      909    14033                           with time count specified.
      910    14034                           Valid Form: $PACT[options]nnn[options]
      911    14035        */
      912    14036        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:117  
      913    14037    2   PROCESS_$PACTNNN: PROC ;

  14037  3 001714   200024 741300       PROCESS_$PA* STX1  ! LOGICAL_PORT,,AUTO

      914    14038
      915    14039    3      DCL DIGITS                     UBIN (36) ALIGNED ;
      916    14040    3      DCL START                      UBIN (36) ALIGNED ;
      917    14041
      918    14042        /* Code */
      919    14043
      920    14044    3      DIGITS = 0 ;

  14044  3 001715   200025 450100                    STZ     DIGITS,,AUTO

      921    14045    3      START = CUR_CHAR ;

  14045  3 001716   200022 235100                    LDA     CUR_CHAR,,AUTO
         3 001717   200026 755100                    STA     START,,AUTO

      922    14046    4      DO WHILE (TOT$ECP.TEST_REQ_(CUR_CHAR) >= '0' AND

  14046  3 001720   001727 710000 3                  TRA     s:14051

      923    14047    4              TOT$ECP.TEST_REQ_(CUR_CHAR) <= '9' AND
      924    14048    4              CUR_CHAR < LGTH) ;
      925    14049    4         DIGITS = DIGITS + 1 ;

  14049  3 001721   200025 235100                    LDA     DIGITS,,AUTO
         3 001722   000001 035007                    ADLA    1,DL
         3 001723   200025 755100                    STA     DIGITS,,AUTO

      926    14050    4         CUR_CHAR = CUR_CHAR + 1 ;

  14050  3 001724   200022 236100                    LDQ     CUR_CHAR,,AUTO
         3 001725   000001 036007                    ADLQ    1,DL
         3 001726   200022 756100                    STQ     CUR_CHAR,,AUTO

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:118  
      927    14051    4      END /* WHILE */ ;

  14051  3 001727   200022 235100                    LDA     CUR_CHAR,,AUTO
         3 001730   040000 106405                    CMPC    fill='040'O
         3 001731   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001732   000020 000001 4                  ADSC9   16                       cn=0,n=1
         3 001733   001743 602000 3                  TNC     s:14053
         3 001734   040005 106400                    CMPC    fill='040'O
         3 001735   000013 000001 4                  ADSC9   11                       cn=0,n=1
         3 001736   000000 000001 xsym               ADSC9   TOT$ECP,A                cn=0,n=1
         3 001737   001743 602000 3                  TNC     s:14053
         3 001740   200022 236100                    LDQ     CUR_CHAR,,AUTO
         3 001741   200023 116100                    CMPQ    LGTH,,AUTO
         3 001742   001721 602000 3                  TNC     s:14049

      928    14052
      929    14053    3      IF DIGITS < 4

  14053  3 001743   200025 236100                    LDQ     DIGITS,,AUTO
         3 001744   000004 116007                    CMPQ    4,DL
         3 001745   001767 603000 3                  TRC     s:14061

      930    14054    4      THEN DO ;

      931    14055    4              CALL CHARBIN (BINARY_WORD_,

  14055  3 001746   000000 620006                    EAX0    0,QL
         3 001747   200026 236100                    LDQ     START,,AUTO
         3 001750   000100 305446                    DTB
         3 001751   000000 030010 xsym               NDSC9   TOT$ECP,Q                cn=0,s=nosgn,sf=0,n=*X0
         3 001752   200032 000010                    NDSC9   @ERROR_VALUE+1,,AUTO     cn=0,s=lsgnf,sf=0,n=8
         3 001753   200033 235100                    LDA     @ERROR_VALUE+2,,AUTO
         3 001754   200020 755100                    STA     BINARY_WORD,,AUTO

      932    14056    4                      SUBSTR (TOT$ECP.TEST_REQ, START, DIGITS)) ;
      933    14057    4              IF BINARY_WORD_ < 241

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:119  
  14057  3 001755   000361 115007                    CMPA    241,DL
         3 001756   001762 603000 3                  TRC     s:14059

      934    14058    4              THEN COMWD.TIME_COUNT = BINARY_WORD.LAST12 ;

  14058  3 001757   200020 236100                    LDQ     BINARY_WORD,,AUTO
         3 001760   200017 752103                    STCQ    COMWD,'03'O,AUTO
         3 001761   001773 710000 3                  TRA     s:14062

      935    14059    4              ELSE CALL PROCESS_$PACT_ERROR (%E$BADNNN) ;

  14059  3 001762   000035 236000 4                  LDQ     29
         3 001763   200031 756100                    STQ     @SET_CPU_PORT+2,,AUTO
         3 001764   001775 701000 3                  TSX1    PROCESS_$PACT_ERROR
         3 001765   000000 011000                    NOP     0

      936    14060    4           END /* THEN */ ;

  14060  3 001766   001773 710000 3                  TRA     s:14062

      937    14061    3      ELSE CALL PROCESS_$PACT_ERROR (%E$BADNNN) ;

  14061  3 001767   000035 236000 4                  LDQ     29
         3 001770   200031 756100                    STQ     @SET_CPU_PORT+2,,AUTO
         3 001771   001775 701000 3                  TSX1    PROCESS_$PACT_ERROR
         3 001772   000000 011000                    NOP     0

      938    14062    3      RETURN ;

  14062  3 001773   200024 221300                    LDX1  ! LOGICAL_PORT,,AUTO
         3 001774   000001 702211                    TSX2  ! 1,X1

      939    14063
      940    14064    3   END PROCESS_$PACTNNN ;
      941    14065        %EJECT ;
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:120  
      942    14066        /*I* NAME:         PROCESS_$PACT_ERROR
      943    14067             PURPOSE:      Informs of an invalid request
      944    14068             INPUT:        ERROR_VALUE
      945    14069             OUTPUT:       TOS_ERROR_CODE
      946    14070                           VALID_PACT_REQUEST
      947    14071             DESCRIPTION:  This procedure assigns the passed error value to
      948    14072                           the error code and calls XUG$ERRMSG to print  an
      949    14073                           error message.
      950    14074        */
      951    14075
      952    14076    2   PROCESS_$PACT_ERROR: PROC (ERROR_VALUE) ;

  14076  3 001775   200030 741300       PROCESS_$PA* STX1  ! @SET_CPU_PORT+1,,AUTO

      953    14077
      954    14078    3      DCL ERROR_VALUE                UBIN WORD ALIGNED ;
      955    14079    3      DCL 1 PACTSLTA STATIC,
      956    14080    3            2 *                      UBIN BYTE UNAL INIT (5),
      957    14081    3            2 REQ                    CHAR (5)  UNAL ;
      958    14082
      959    14083        /* Code */
      960    14084
      961    14085    3      VALID_PACT_RQST = %FALSE ;

  14085  3 001776   200021 450100                    STZ     VALID_PACT_RQST,,AUTO

      962    14086    3      PACTSLTA.REQ = SUBSTR (TOT$ECP.TEST_REQ, 0, 5) ;

  14086  3 001777   040000 100400                    MLR     fill='040'O
         3 002000   000000 000005 xsym               ADSC9   TOT$ECP                  cn=0,n=5
         3 002001   000032 200005 1                  ADSC9   PACTSLTA                 cn=1,n=5

      963    14087    3      TOS_ERROR_CODE.ERR# = ERROR_VALUE ;

  14087  3 002002   200031 470500                    LDP0    @ERROR_VALUE,,AUTO
         3 002003   000000 236100                    LDQ     0,,PR0
         3 002004   000003 736000                    QLS     3
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:121  
         3 002005   000000 676000 1                  ERQ     TOS_ERROR_CODE
         3 002006   377770 376007                    ANQ     131064,DL
         3 002007   000000 656000 1                  ERSQ    TOS_ERROR_CODE

      964    14088    3      TOLTS_GETCMD.ERR_CODE = TOS_ERROR_CODE;

  14088  3 002010   000000 236000 1                  LDQ     TOS_ERROR_CODE
         3 002011   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      965    14089    3      TOLTS_GETCMD.F1_ = VECTOR (PACTSLTA);

  14089  3 002012   000036 237000 4                  LDAQ    30
         3 002013   000017 755000 xsym               STA     TOLTS_GETCMD+15
         3 002014   000020 756000 xsym               STQ     TOLTS_GETCMD+16

      966    14090    3      TOLTS_GETCMD.FLGLEV# = 1;

  14090  3 002015   000001 236003                    LDQ     1,DU
         3 002016   000006 552020 xsym               STBQ    TOLTS_GETCMD+6,'20'O

      967    14091    3      CALL XUG$ERRMSG (TOLTS_GETCMD);

  14091  3 002017   000003 630400 4                  EPPR0   3
         3 002020   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 002021   000000 701000 xent               TSX1    XUG$ERRMSG
         3 002022   000000 011000                    NOP     0

      968    14092    3      RETURN ;

  14092  3 002023   200030 221300                    LDX1  ! @SET_CPU_PORT+1,,AUTO
         3 002024   000001 702211                    TSX2  ! 1,X1

TOS_ERROR_CODE
 Sect OctLoc
   1     000   241723 000000                                                    ....

FPT_SAD
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:122  
 Sect OctLoc
   1     004   000001 777640   000006 006000   006021 006000   ****** ******    ................

B$SCU$
 Sect OctLoc
   1     010   000000 006014                                                    ....

B$PORT$
 Sect OctLoc
   1     011   000000 006014                                                    ....

B$MPSTATE$
 Sect OctLoc
   1     012   000000 006014                                                    ....

STATUS_WD_A
 Sect OctLoc
   1     013   203333 ******                                                    ....

TAKCPU_FPT
 Sect OctLoc
   1     016   000003 777640   000020 006000   001000 000000   001000 000000    ................
   1     022   000000 000000   777000 000000                                    ........

RETCPU_FPT
 Sect OctLoc
   1     024   000003 777640   000026 006000   002000 000000   000000 000000    ................
   1     030   000000 000000   777000 000000                                    ........

PACTSLTA
 Sect OctLoc
   1     032   005*** ******   ****** ******                                    ........

ON
 Sect OctLoc
   2     000   4***** ******                                                    ....

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:123  
OFF
 Sect OctLoc
   2     001   0***** ******                                                    ....

(unnamed)
 Sect OctLoc
   4     000   000000 006000   000000 006000   777777 400007   000000 006000    ................
   4     004   000000 006000   064040 040040   103040 040040   116040 040040    ....4   C   N
   4     010   120040 040040   066040 040040   070040 040040   071040 040040    P   6   8   9
   4     014   067040 040040   065040 040040   062040 040040   063040 040040    7   5   2   3
   4     020   060040 040040   061040 040040   000000 006000   000000 000354    0   1   ........
   4     024   000023 006000   000000 000355   000025 006000   000001 006000    ................
   4     030   000000 000356   000030 006000   000000 000357   000032 006000    ................
   4     034   000000 000360   000034 006000   000001 377640   000032 006000    ................
      969    14093
      970    14094    3   END PROCESS_$PACT_ERROR ;
      971    14095    2   END TOS$PROCESS_PACT ;
      972    14096    1   END TOS$SOLTS;

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:124  
--  Include file information  --

   XU_MACRO_C.:E05TOU  is referenced.
   XUG_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   TO_PERR_C.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure TOS$SOLTS.
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:125  

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    41- 14096    306    58     3      0  y   y    4   1 TOS$SOLTS
                                  3    253      y    0     TOS$PACT
  1 13299- 13313      8     6     3    260  y   y    3     2 TOS$MME_COMWD
  2 13341- 13409     43    18     3    276  y   y    5     2 TOS$MME_CPUASG
  3 13443- 13515     44    20     3    517  y   y    5     2 TOS$MME_CPUREL
  4 13545- 13555      3     4     3    746  y   y    2     2 TOS$MME_HISREG
  5 13565- 13579      3     4     3    754  y   y    2     2 TOS$MME_RETRY
  6 13597- 13645     16    13     3    762  y   y    4     2 TOS$MME_TAKCPU
  7 13666- 13710     36     9     3   1037  y   y    3     2 TOS$MME_SCUASG
  8 13732- 13776     36     9     3   1202  y   y    3     2 TOS$MME_SCUREL
  9 13788- 13826     10     8     3   1347  y   y    2     2 TOS$MME_RETCPU
 10 13854- 14095     82    13     3   1374  y   y    0     2 TOS$PROCESS_PACT
 11 13920- 13928      4     0     3   1567  y   y    0      3 PROCESS_$PACT
 12 13942- 13950      4     0     3   1576  y   y    0      3 PROCESS_$PACTC
 13 13964- 13978     10     0     3   1605  y   y    0      3 PROCESS_$PACTN
 14 13998- 14018     14     2     3   1643  y   y    1      3 PROCESS_$PACTP
 15 14037- 14064     16     2     3   1714  y   y    0      3 PROCESS_$PACTNNN
 16 14076- 14094      9     4     3   1775  y   y    1      3 PROCESS_$PACT_ERROR
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:126  

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              41   3      0 Proc    0                  $$$$$$$$$$ 13247   3      2 DoCase  0
           13248   3    102 Case    0                         $$$ 13249   3    102 Call    0
           13250   3    115 Case    0                       $$$$$ 13251   3    115 Call    0
           13252   3    136 Case    0                       $$$$$ 13253   3    136 Call    0
           13254   3    157 Case    0                           $ 13255   3    157 Call    0
           13256   3    167 Case    0                           $ 13257   3    167 Call    0
           13258   3    177 Case    0                           $ 13259   3    177 Call    0
           13260   3    207 Case    0                         $$$ 13261   3    207 Call    0
           13262   3    222 Case    0                         $$$ 13263   3    222 Call    0
           13264   3    235 Case    0                         $$$ 13265   3    235 Call    0
           13266   3    252 EndCse  0                             13267   3    252 Return  0
           13279   3    253 Entry   0                             13281   3    255 Call    0
           13282   3    257 Return  0                             13299   3    260 Proc    1
           13305   3    261 DoInhi  1                           $ 13306   3    261 Assign  1
           13307   3    265 Assign  1                             13308   3    270 Assign  1
           13309   3    271 EndInh  1                             13310   3    271 Assign  1
           13311   3    274 Return  1                             13341   3    276 Proc    2
           13363   3    277 If      2                             13363   3    302 Do      2
 $$$$$$$$$ 13364   3    302 MonCal  2                             13365   3    307 Do      2
           13366   3    307 Assign  2                          $$ 13367   3    311 Assign  2
           13368   3    315 EndDo   2                          $$ 13369   3    315 Assign  2
         $ 13370   3    326 Assign  2                             13371   3    335 EndDo   2
           13374   3    335 Assign  2                  $$$$$$$$$$ 13375   3    337 IntCal  2
      $$$$ 13376   3    351 Assign  2                             13377   3    362 Assign  2
$$$$$$$$$$ 13378   3    364 IntCal  2                             13379   3    375 Assign  2
           13380   3    401 Assign  2                           $ 13381   3    403 Assign  2
         $ 13382   3    411 Assign  2                             13383   3    417 Assign  2
        $$ 13385   3    421 If      2                             13385   3    430 Do      2
           13386   3    430 Assign  2                             13387   3    432 Assign  2
        $$ 13388   3    436 Assign  2                             13389   3    442 EndDo   2
           13390   3    443 Do      2                             13391   3    443 Assign  2
        $$ 13392   3    445 Assign  2                             13393   3    451 Assign  2
           13394   3    455 EndDo   2                             13395   3    455 Call    2
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:127  
           13396   3    461 Assign  2                             13397   3    464 Assign  2
        $$ 13398   3    466 Assign  2                             13400   3    472 Assign  2
           13401   3    474 Assign  2                             13402   3    476 Assign  2
           13403   3    477 Assign  2                             13404   3    501 Assign  2
       $$$ 13405   3    503 Call    2                             13407   3    515 Return  2
           13443   3    517 Proc    3                             13465   3    520 If      3
           13465   3    523 Do      3                   $$$$$$$$$ 13466   3    523 MonCal  3
           13467   3    530 Do      3                             13468   3    530 Assign  3
        $$ 13469   3    532 Assign  3                             13470   3    536 EndDo   3
        $$ 13471   3    536 Assign  3                           $ 13472   3    547 Assign  3
           13473   3    556 EndDo   3                             13475   3    556 Assign  3
$$$$$$$$$$ 13476   3    560 IntCal  3                        $$$$ 13477   3    572 Assign  3
           13478   3    603 Assign  3                  $$$$$$$$$$ 13479   3    605 IntCal  3
        $$ 13484   3    616 If      3                             13484   3    625 Do      3
           13485   3    625 Assign  3                             13486   3    627 Assign  3
        $$ 13487   3    633 Assign  3                             13488   3    637 EndDo   3
           13489   3    640 Do      3                             13490   3    640 Assign  3
        $$ 13491   3    642 Assign  3                           $ 13492   3    646 If      3
           13493   3    653 Assign  3                             13494   3    660 Assign  3
           13495   3    664 EndDo   3                             13496   3    664 Assign  3
         $ 13497   3    666 Assign  3                           $ 13498   3    674 Assign  3
           13499   3    702 Assign  3                             13500   3    704 Call    3
           13501   3    710 Assign  3                             13502   3    713 Assign  3
        $$ 13503   3    715 Assign  3                             13505   3    721 Assign  3
           13506   3    723 Assign  3                             13507   3    725 Assign  3
           13508   3    726 Assign  3                             13509   3    730 Assign  3
       $$$ 13510   3    732 Call    3                             13513   3    744 Return  3
           13545   3    746 Proc    4                             13552   3    747 Assign  4
           13553   3    752 Return  4                             13565   3    754 Proc    5
           13576   3    755 Assign  5                             13577   3    760 Return  5
           13597   3    762 Proc    6                          $$ 13628   3    763 Assign  6
         $ 13629   3    767 Assign  6                   $$$$$$$$$ 13630   3    774 MonCal  6
           13631   3   1000 Do      6                             13632   3   1000 Call    6
           13633   3   1003 Assign  6                             13634   3   1006 Assign  6
        $$ 13635   3   1011 Assign  6                             13636   3   1015 EndDo   6
           13638   3   1016 Do      6                          $$ 13639   3   1016 If      6
        $$ 13640   3   1024 Assign  6                          $$ 13641   3   1031 Assign  6
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:128  
           13642   3   1035 EndDo   6                             13643   3   1035 Return  6
           13666   3   1037 Proc    7                             13675   3   1040 If      7
           13675   3   1043 Do      7                   $$$$$$$$$ 13676   3   1043 MonCal  7
           13677   3   1050 Do      7                             13678   3   1050 Assign  7
        $$ 13679   3   1052 Assign  7                             13680   3   1056 EndDo   7
        $$ 13681   3   1056 Assign  7                             13682   3   1067 EndDo   7
           13683   3   1067 Assign  7                   $$$$$$$$$ 13684   3   1071 IntCal  7
           13685   3   1101 Assign  7                             13686   3   1105 Assign  7
         $ 13687   3   1107 Assign  7                             13688   3   1115 Assign  7
         $ 13690   3   1117 If      7                             13690   3   1125 Do      7
        $$ 13691   3   1125 Assign  7                             13692   3   1131 Assign  7
           13693   3   1133 EndDo   7                             13694   3   1134 Do      7
        $$ 13695   3   1134 Assign  7                             13696   3   1140 Assign  7
           13697   3   1142 EndDo   7                             13698   3   1142 Call    7
           13699   3   1146 Assign  7                             13700   3   1151 Assign  7
           13701   3   1153 Assign  7                             13703   3   1155 Assign  7
           13704   3   1157 Assign  7                             13705   3   1161 Assign  7
           13706   3   1162 Assign  7                             13707   3   1164 Assign  7
       $$$ 13708   3   1166 Call    7                             13709   3   1200 Return  7
           13732   3   1202 Proc    8                             13741   3   1203 If      8
           13741   3   1206 Do      8                   $$$$$$$$$ 13742   3   1206 MonCal  8
           13743   3   1213 Do      8                             13744   3   1213 Assign  8
        $$ 13745   3   1215 Assign  8                             13746   3   1221 EndDo   8
        $$ 13747   3   1221 Assign  8                             13748   3   1232 EndDo   8
        $$ 13750   3   1232 If      8                             13750   3   1241 Do      8
        $$ 13751   3   1241 Assign  8                             13752   3   1245 Assign  8
           13753   3   1247 EndDo   8                             13754   3   1250 Do      8
           13755   3   1250 Assign  8                          $$ 13756   3   1252 Assign  8
           13757   3   1256 EndDo   8                             13758   3   1256 Assign  8
  $$$$$$$$ 13759   3   1260 IntCal  8                             13760   3   1267 Assign  8
           13761   3   1273 Assign  8                           $ 13762   3   1275 Assign  8
           13763   3   1303 Assign  8                             13764   3   1305 Call    8
           13765   3   1311 Assign  8                             13766   3   1314 Assign  8
         $ 13767   3   1316 Assign  8                             13769   3   1322 Assign  8
           13770   3   1324 Assign  8                             13771   3   1326 Assign  8
           13772   3   1327 Assign  8                             13773   3   1331 Assign  8
       $$$ 13774   3   1333 Call    8                             13775   3   1345 Return  8
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:129  
           13788   3   1347 Proc    9                           $ 13815   3   1350 Assign  9
 $$$$$$$$$ 13816   3   1355 MonCal  9                             13817   3   1361 Do      9
        $$ 13818   3   1361 Assign  9                             13819   3   1365 EndDo   9
           13821   3   1366 Do      9                          $$ 13822   3   1366 Assign  9
           13823   3   1372 EndDo   9                             13824   3   1372 Return  9
           13854   3   1374 Proc   10                             13877   3   1375 Assign 10
           13878   3   1377 Assign 10                         $$$ 13881   3   1401 IntCal 10
           13882   3   1410 Assign 10                             13883   3   1412 DoWhil 10
$$$$$$$$$$ 13884   3   1413 Do Sel 10                             13885   3   1522 Select 10
           13886   3   1522 Call   10                             13887   3   1525 Select 10
           13888   3   1525 Call   10                             13889   3   1530 Select 10
           13890   3   1530 Call   10                             13891   3   1533 Select 10
           13892   3   1533 Call   10                             13893   3   1540 Select 10
           13894   3   1540 Call   10                             13895   3   1543 Select 10
           13896   3   1543 Call   10                             13897   3   1547 EndSel 10
           13898   3   1547 EndWhi 10                             13901   3   1554 If     10
           13902   3   1556 Assign 10                             13903   3   1561 Call   10
           13904   3   1565 Return 10                             13920   3   1567 Proc   11
           13924   3   1570 Assign 11                             13925   3   1572 Assign 11
           13926   3   1575 Return 11                             13942   3   1576 Proc   12
           13946   3   1577 Assign 12                             13947   3   1601 Assign 12
           13948   3   1604 Return 12                             13964   3   1605 Proc   13
           13968   3   1606 If     13                             13969   3   1614 Do     13
           13970   3   1614 Assign 13                             13971   3   1617 If     13
           13972   3   1623 Call   13                             13973   3   1630 Call   13
           13974   3   1634 EndDo  13                             13975   3   1635 Call   13
           13976   3   1641 Return 13                             13998   3   1643 Proc   14
           14004   3   1644 If     14                             14005   3   1652 Do     14
           14006   3   1652 Assign 14                          $$ 14007   3   1655 If     14
           14008   3   1665 Do     14                      $$$$$$ 14009   3   1665 IntCal 14
       $$$ 14010   3   1670 Assign 14                             14011   3   1675 Assign 14
           14012   3   1700 EndDo  14                             14013   3   1701 Call   14
           14014   3   1705 EndDo  14                             14015   3   1706 Call   14
           14016   3   1712 Return 14                             14037   3   1714 Proc   15
           14044   3   1715 Assign 15                             14045   3   1716 Assign 15
           14046   3   1720 DoWhil 15                             14049   3   1721 Assign 15
           14050   3   1724 Assign 15                        $$$$ 14051   3   1727 EndWhi 15
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:130  
           14053   3   1743 If     15                             14054   3   1746 Do     15
  $$$$$$$$ 14055   3   1746 IntCal 15                             14057   3   1755 If     15
           14058   3   1757 Assign 15                             14059   3   1762 Call   15
           14060   3   1766 EndDo  15                             14061   3   1767 Call   15
           14062   3   1773 Return 15                             14076   3   1775 Proc   16
           14085   3   1776 Assign 16                             14086   3   1777 Assign 16
        $$ 14087   3   2002 Assign 16                             14088   3   2010 Assign 16
           14089   3   2012 Assign 16                             14090   3   2015 Assign 16
           14091   3   2017 Call   16                             14092   3   2023 Return 16


  **** Statement type totals  ****

   131 Assign    34 Call       6 MonCal    17 If         9 Case      18 Return
     9 IntCal     1 Do Sel     1 EndSel     6 Select     2 DoWhil     1 DoCase
    24 Do         1 DoInhi     2 EndWhi     1 EndCse    24 EndDo      1 EndInh
    17 Proc       1 Entry

 # major stmts=  226 Code/major= 4.62 # stmts=  306 Code/stmt= 3.41  Point total=102.6
 Cost/major stmt=  5.1 Cost/stmt=  3.7 Total cost=   1152.9

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$$$
   6-8  $$$$$$$$$$$$
  8-10  $$$$
 10-12  $
 12-14
 14-16
 16-18
 18-20
 20-22  $$
 22-??  $$
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:131  

 **** Variables and constants ****

  ****  Section 001  Data  TOS$SOLTS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    12-0-0/w PTR         r     1 B$MPSTATE$                11-0-0/w PTR         r     1 B$PORT$
    10-0-0/w PTR         r     1 B$SCU$                    13-0-0/w UBIN        r     1 ENTRY_A
    14-0-0/w UBIN        r     1 ENTRY_B                    1-0-0/w BIT         r     1 TOS$COMWD
     2-0-0/w BIT         r     1 TOS$RSW_AREG

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/d STRC(144)   r     1 FPT_SAD
     6-0-0/d STRC        r         2 V

    32-0-0/c STRC(54)    r     1 PACTSLTA
    32-1-0/c CHAR(5)     r         2 REQ

    24-0-0/d STRC(216)   r     1 RETCPU_FPT
    26-0-0/d STRC(144)   r         2 V
    31-0-0/b UBIN(9)     r          3 CPU#

    13-0-0/b STRC        r     1 STATUS_WD_A
    13-2-0/b UBIN(18)    r         2 SUB_EXEC

    14-0-0/b STRC        r     1 STATUS_WD_B
    14-0-0/b UBIN(18)    r         2 STATUS_CODE
    14-2-0/b UBIN(9)     r         2 FUNCTION_CODE
    14-3-0/b UBIN(9)     r         2 FUNCTION_TYPE

    16-0-0/d STRC(216)   r     1 TAKCPU_FPT
    20-0-0/d STRC(144)   r         2 V
    23-0-0/b UBIN(9)     r          3 CPU#

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:132  
     0-0-0/w STRC        r     1 TOS_ERROR_CODE
     0-2-1/b UBIN(14)    r         2 ERR#


  ****  Section 002 RoData TOS$SOLTS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/c BIT         r     1 OFF                        0-0-0/c BIT         r     1 ON

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    17-0-0/w PTR         r     1 @A                        21-0-0/w PTR         r     1 @A
    21-0-0/w PTR         r     1 @A                        17-0-0/w PTR         r     1 @A
    17-0-0/w PTR         r     1 @A                        17-0-0/w PTR         r     1 @A
    17-0-0/w PTR         r     1 @A                        17-0-0/w PTR         r     1 @A
    31-0-0/w PTR         r     1 @ERROR_VALUE               3-0-0/w PTR         r     1 @MME
     5-0-0/w PTR         r     1 @MME_INSTR$                4-0-0/w PTR         r     1 @MREG
    17-0-0/w PTR         r     1 @P_AREG                   20-0-0/w PTR         r     1 @Q
    22-0-0/w PTR         r     1 @Q                        22-0-0/w PTR         r     1 @Q
    20-0-0/w PTR         r     1 @Q                         6-0-0/w PTR         r     1 @RETURN_DELTA
    21-0-0/w PTR         r     1 @RETURN_DELTA             23-0-0/w PTR         r     1 @RETURN_DELTA
    23-0-0/w PTR         r     1 @RETURN_DELTA             20-0-0/w PTR         r     1 @RETURN_DELTA
    20-0-0/w PTR         r     1 @RETURN_DELTA             22-0-0/w PTR         r     1 @RETURN_DELTA
    21-0-0/w PTR         r     1 @RETURN_DELTA             21-0-0/w PTR         r     1 @RETURN_DELTA
    20-0-0/w PTR         r     1 @RETURN_DELTA             27-0-0/w PTR         r     1 @SET_CPU_PORT
    21-0-0/w PTR         r     1 @X1                       17-0-0/w PTR         r     1 @X2
    17-0-0/w PTR         r     1 @X2                       20-0-0/w PTR         r     1 @X4
    20-0-0/w PTR         r     1 @X4                       20-0-0/w PTR         r     1 @X4
    20-0-0/w PTR         r     1 @X4                       *0-0-0/w BIT         r     1 A
    *0-0-0/w UBIN        r     1 A                         *0-0-0/w UBIN        r     1 A
    *0-0-0/w STRC        r     1 A                         *0-0-0/w UBIN        r     1 A
    *0-0-0/w UBIN        r     1 A                         *0-0-0/w BIT         r     1 A_REG
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:133  
    20-0-0/w UBIN        r     1 BINARY_WORD_              22-0-0/w UBIN        r     1 CUR_CHAR
    25-0-0/w UBIN        r     1 DIGITS                    *0-0-0/w UBIN        r     1 ERROR_VALUE
    23-0-0/w UBIN        r     1 LGTH                      *0-0-0/w PTR         r     1 MME_INSTR$
    *0-0-0/w UBIN        r     1 P_AREG                    *0-0-0/w BIT         r     1 Q
    *0-0-0/w UBIN        r     1 Q                         *0-0-0/w UBIN        r     1 Q
    *0-0-0/w UBIN        r     1 Q
    10-0-0/w UBIN        r     1 QUEUE_ENTRY(0:2)
    13-0-0/w UBIN        r     1 REQUEST_TYPE              *0-0-0/w SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/h SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/h SBIN(18)    r     1 RETURN_DELTA              *0-0-0/w SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/w SBIN(18)    r     1 RETURN_DELTA              *0-0-0/h SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/h SBIN(18)    r     1 RETURN_DELTA              *0-0-0/h SBIN(18)    r     1 RETURN_DELTA
    *0-0-0/h SBIN(18)    r     1 RETURN_DELTA              14-0-0/w UBIN(18)    r     1 SERVICE_CODE
    *0-0-0/c BIT         r     1 SET_CPU_PORT              26-0-0/w UBIN        r     1 START
    21-0-0/c BIT         r     1 VALID_PACT_RQST           *0-0-0/h UBIN(18)    r     1 X1
    *0-0-0/h UBIN(18)    r     1 X2                        *0-0-0/h UBIN(18)    r     1 X2
    *0-0-0/h UBIN(18)    r     1 X4                        *0-0-0/h UBIN(18)    r     1 X4
    *0-0-0/w UBIN(18)    r     1 X4                        *0-0-0/w UBIN(18)    r     1 X4

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    *0-0-0/w STRC        r     1 A
     0-3-3/b UBIN(6)     r         2 PORT_ASSIGNMENT

    *0-0-0/w STRC        r     1 A
     0-3-3/b UBIN(6)     r         2 PORT_ASSIGNMENT

    *0-0-0/w STRC        r     1 A_REG
     0-3-3/b UBIN(3)     r         2 SUBEXEC

    20-0-0/w STRC        r     1 BINARY_WORD
    20-2-6/b UBIN(12)    r         2 LAST12

    17-0-0/w STRC        r     1 COMWD
    17-0-0/b BIT         r         2 PROCESSOR(0:7)
    17-2-0/b BIT         r         2 STOP_BIT
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:134  
    17-2-6/b UBIN(12)    r         2 TIME_COUNT

    24-0-0/c STRC(27)    r     1 LOGICAL_PORT
    24-0-0/c UBIN(9)     r         2 LGTH
    24-1-0/c CHAR(2)     r         2 NUMBER

    24-0-0/c STRC(27)    r     1 LOGICAL_PORT
    24-0-0/c UBIN(9)     r         2 LGTH
    24-1-0/c CHAR(2)     r         2 NUMBER

    *0-0-0/w STRC(252)   r     1 MME
     0-0-0/b STRC        r         2 INST
     0-0-0/b SBIN(18)    r          3 NO

    *0-0-0/d STRC(252)   r     1 MREG
     0-2-0/b UBIN(18)    r         2 X1
     1-0-0/b UBIN(18)    r         2 X2
     2-0-0/b UBIN(18)    r         2 X4
     4-0-0/b UBIN        r         2 A
     5-0-0/b UBIN        r         2 Q

    25-0-0/c STRC(27)    r     1 PHYSICAL_PORT
    25-0-0/c UBIN(9)     r         2 LGTH
    25-1-0/c CHAR(2)     r         2 NUMBER

    25-0-0/c STRC(27)    r     1 PHYSICAL_PORT
    25-0-0/c UBIN(9)     r         2 LGTH
    25-1-0/c CHAR(2)     r         2 NUMBER

    22-0-0/c STRC(27)    r     1 PORT
    22-0-0/c UBIN(9)     r         2 LGTH
    22-1-0/c CHAR(2)     r         2 NUMBER

    22-0-0/c STRC(27)    r     1 PORT
    22-0-0/c UBIN(9)     r         2 LGTH
    22-1-0/c CHAR(2)     r         2 NUMBER

PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:135  
    *0-0-0/w STRC        r     1 Q_REG
     0-0-0/b UBIN(6)     r         2 PHYS_PORT_NUM

    *0-0-0/w STRC        r     1 Q_REG
     0-0-0/b UBIN(6)     r         2 PHYS_PORT_NUM


  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$IS$                      0-0-0/w PTR         r     1 B$SPCL1$
     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/b BIT         r     1 H_DPS8000_SCU_INFO
     0-0-0/b BIT         r     1 S_MPSTATE                  0-0-0/b BIT         r     1 S_PORTNR
     0-0-0/w BIT         r     1 TOS$COMWD

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(1512)  r     1 TOLTS_GETCMD
     6-1-0/c UBIN(9)     r         2 FLGLEV#
    10-0-0/w STRC        r         2 ERR_CODE
    17-0-0/w VECT        r         2 F1_
    21-0-0/w VECT        r         2 F2_

     0-0-0/w STRC(495)   r     1 TOT$ECP
     0-0-0/c CHAR(12)    r         2 TEST_REQ
     0-0-0/c CHAR        r         2 TEST_REQ_(0:11)


  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 B$WORD(0:0)
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:136  

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT
   102-0-0/b STRC        r         2 ERR
   102-2-1/b UBIN(14)    r          3 ERR#

     0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w PTR         r         2 ALT$

     0-0-0/w STRC(72)    r     1 SCU_INFO(0:1)
     1-2-0/b STRC(18)    r         2 SCU_STATUS
     1-2-1/b BIT         r          3 REL_BIT



   Procedure TOS$SOLTS requires 1045 words for executable code.
   Procedure TOS$SOLTS requires 30 words of local(AUTO) storage.

    No errors detected in file TOS$SOLTS.:E05TSI    .
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:137  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:138  
          MINI XREF LISTING

A IN PROCEDURE TOS$MME_COMWD
     13301**DCL     13299--PROC    13306>>ASSIGN
A IN PROCEDURE TOS$MME_CPUASG
     13345**DCL     13341--PROC    13346--REDEF   13396>>ASSIGN
A IN PROCEDURE TOS$MME_CPUREL
     13447**DCL     13443--PROC    13448--REDEF   13501>>ASSIGN
A IN PROCEDURE TOS$MME_RETCPU
     13790**DCL     13788--PROC
A.PORT_ASSIGNMENT IN PROCEDURE TOS$MME_RETCPU
     13794**DCL     13815>>ASSIGN
A IN PROCEDURE TOS$MME_RETRY
     13567**DCL     13565--PROC
A IN PROCEDURE TOS$MME_SCUASG
     13668**DCL     13666--PROC    13699>>ASSIGN
A IN PROCEDURE TOS$MME_SCUREL
     13734**DCL     13732--PROC    13765>>ASSIGN
A IN PROCEDURE TOS$MME_TAKCPU
     13599**DCL     13597--PROC    13604--REDEF
A.PORT_ASSIGNMENT IN PROCEDURE TOS$MME_TAKCPU
     13603**DCL     13629>>ASSIGN
A_REG.SUBEXEC IN PROCEDURE TOS$MME_CPUREL
     13450**DCL     13492>>IF
A_REG IN PROCEDURE TOS$MME_TAKCPU
     13604**DCL     13633<<ASSIGN
B$ALT.CODE
     12707**DCL     12707--REDEF   12708--REDEF   12708--REDEF
B$ALT.ERR.ERR#
     12709**DCL     12709--REDEF   13639>>IF
B$ALT.EVID
     12708**DCL     12708--REDEF   12708--REDEF
B$IS$
     12765**DCL     13369>>ASSIGN  13370>>ASSIGN  13471>>ASSIGN  13472>>ASSIGN  13681>>ASSIGN  13747>>ASSIGN
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:139  
B$MPSTATE$
     13187**DCL     13370<<ASSIGN  13385>>IF      13472<<ASSIGN  13484>>IF
B$PORT$
     13186**DCL     13363>>IF      13369<<ASSIGN  13376>>ASSIGN  13465>>IF      13471<<ASSIGN  13477>>ASSIGN
B$SCU$
     13185**DCL     13675>>IF      13681<<ASSIGN  13690>>IF      13741>>IF      13747<<ASSIGN  13750>>IF
B$SPCL1$
     12766**DCL     13369>>ASSIGN  13370>>ASSIGN  13471>>ASSIGN  13472>>ASSIGN  13681>>ASSIGN  13747>>ASSIGN
B$TCB.ALT$
     12703**DCL     13639>>IF
B$TCB$
     12764**DCL     13639>>IF
B$WORD
     13188**DCL     13376>>ASSIGN  13385>>IF      13477>>ASSIGN  13484>>IF
BINARY_WORD IN PROCEDURE TOS$PROCESS_PACT
     13864**DCL     13867--REDEF
BINARY_WORD.LAST12 IN PROCEDURE TOS$PROCESS_PACT
     13866**DCL     14058>>ASSIGN
BINARY_WORD_ IN PROCEDURE TOS$PROCESS_PACT
     13867**DCL     14009<<CALLBLT 14010>>ASSIGN  14055<<CALLBLT 14057>>IF
COMWD IN PROCEDURE TOS$PROCESS_PACT
     13857**DCL     13877<<ASSIGN  13902>>ASSIGN
COMWD.PROCESSOR IN PROCEDURE TOS$PROCESS_PACT
     13858**DCL     13859--REDEF   14010<<ASSIGN
COMWD.STOP_BIT IN PROCEDURE TOS$PROCESS_PACT
     13861**DCL     13924<<ASSIGN
COMWD.TIME_COUNT IN PROCEDURE TOS$PROCESS_PACT
     13863**DCL     13946<<ASSIGN  14058<<ASSIGN
CUR_CHAR IN PROCEDURE TOS$PROCESS_PACT
     13869**DCL     13882<<ASSIGN  13883>>DOWHILE 13884>>DOSELCT 13925<<ASSIGN  13925>>ASSIGN  13947<<ASSIGN
     13947>>ASSIGN  13968>>IF      13970<<ASSIGN  13970>>ASSIGN  13971>>IF      14004>>IF      14006<<ASSIGN
     14006>>ASSIGN  14007>>IF      14007>>IF      14009>>CALLBLT 14011<<ASSIGN  14011>>ASSIGN  14045>>ASSIGN
     14046>>DOWHILE 14046>>DOWHILE 14046>>DOWHILE 14050<<ASSIGN  14050>>ASSIGN
DIGITS IN PROCEDURE PROCESS_$PACTNNN
     14039**DCL     14044<<ASSIGN  14049<<ASSIGN  14049>>ASSIGN  14053>>IF      14055>>CALLBLT
ENTRY_A
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:140  
     13195**DCL     13400>>ASSIGN  13505>>ASSIGN  13703>>ASSIGN  13769>>ASSIGN
ENTRY_B
     13200**DCL     13401>>ASSIGN  13506>>ASSIGN  13704>>ASSIGN  13770>>ASSIGN
ERROR_VALUE IN PROCEDURE PROCESS_$PACT_ERROR
     14078**DCL     14076--PROC    14087>>ASSIGN
FPT_SAD
     13172**DCL     13364<>CALL    13466<>CALL    13676<>CALL    13742<>CALL
FPT_SAD.V
     13172**DCL     13172--DCLINIT
H_DPS8000_SCU_INFO
     12769**DCL     13681--ASSIGN  13747--ASSIGN
LGTH IN PROCEDURE TOS$PROCESS_PACT
     13870**DCL     13881<<CALLBLT 13883>>DOWHILE 13968>>IF      14004>>IF      14046>>DOWHILE
LOGICAL_PORT IN PROCEDURE TOS$MME_CPUASG
     13355**DCL     13381--ASSIGN
LOGICAL_PORT.LGTH IN PROCEDURE TOS$MME_CPUASG
     13356**DCL     13374<<ASSIGN
LOGICAL_PORT.NUMBER IN PROCEDURE TOS$MME_CPUASG
     13357**DCL     13375<<CALLBLT
LOGICAL_PORT IN PROCEDURE TOS$MME_CPUREL
     13457**DCL     13497--ASSIGN
LOGICAL_PORT.LGTH IN PROCEDURE TOS$MME_CPUREL
     13458**DCL     13475<<ASSIGN
LOGICAL_PORT.NUMBER IN PROCEDURE TOS$MME_CPUREL
     13459**DCL     13476<<CALLBLT
M$SAD
      7237**DCL-ENT 13364--CALL    13466--CALL    13676--CALL    13742--CALL
M$TDREQCPU
      7248**DCL-ENT 13630--CALL    13816--CALL
MME
     12662**DCL        41--PROC
MME.INST.NO
     12665**DCL     13247>>DOCASE
MME.INSTR
     12663**DCL     12664--REDEF
MME_INSTR$
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:141  
     12697**DCL        41--PROC
MREG
     12683**DCL        41--PROC
MREG.A
     12692**DCL     13249<>CALL    13251<>CALL    13253<>CALL    13255<>CALL    13257<>CALL    13259<>CALL
     13261<>CALL    13263<>CALL    13265<>CALL
MREG.Q
     12693**DCL     13249<>CALL    13251<>CALL    13253<>CALL    13265<>CALL
MREG.X1
     12685**DCL     13265<>CALL
MREG.X2
     12686**DCL     13251<>CALL    13253<>CALL
MREG.X4
     12688**DCL     13251<>CALL    13253<>CALL    13261<>CALL    13263<>CALL
OFF IN PROCEDURE TOS$PROCESS_PACT
     13872**DCL     13972<>CALL
ON IN PROCEDURE TOS$PROCESS_PACT
     13871**DCL     13892<>CALL
PACTSLTA IN PROCEDURE PROCESS_$PACT_ERROR
     14079**DCL     14089--ASSIGN
PACTSLTA.REQ IN PROCEDURE PROCESS_$PACT_ERROR
     14081**DCL     14086<<ASSIGN
PHYSICAL_PORT IN PROCEDURE TOS$MME_CPUASG
     13358**DCL     13382--ASSIGN
PHYSICAL_PORT.LGTH IN PROCEDURE TOS$MME_CPUASG
     13359**DCL     13377<<ASSIGN
PHYSICAL_PORT.NUMBER IN PROCEDURE TOS$MME_CPUASG
     13360**DCL     13378<<CALLBLT
PHYSICAL_PORT IN PROCEDURE TOS$MME_CPUREL
     13460**DCL     13498--ASSIGN
PHYSICAL_PORT.LGTH IN PROCEDURE TOS$MME_CPUREL
     13461**DCL     13478<<ASSIGN
PHYSICAL_PORT.NUMBER IN PROCEDURE TOS$MME_CPUREL
     13462**DCL     13479<<CALLBLT
PORT IN PROCEDURE TOS$MME_SCUASG
     13670**DCL     13687--ASSIGN
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:142  
PORT.LGTH IN PROCEDURE TOS$MME_SCUASG
     13671**DCL     13683<<ASSIGN
PORT.NUMBER IN PROCEDURE TOS$MME_SCUASG
     13672**DCL     13684<<CALLBLT
PORT IN PROCEDURE TOS$MME_SCUREL
     13736**DCL     13762--ASSIGN
PORT.LGTH IN PROCEDURE TOS$MME_SCUREL
     13737**DCL     13758<<ASSIGN
PORT.NUMBER IN PROCEDURE TOS$MME_SCUREL
     13738**DCL     13759<<CALLBLT
PROCESS_$PACT IN PROCEDURE TOS$PROCESS_PACT
     13920**PROC    13886--CALL
PROCESS_$PACTC IN PROCEDURE TOS$PROCESS_PACT
     13942**PROC    13888--CALL
PROCESS_$PACTN IN PROCEDURE TOS$PROCESS_PACT
     13964**PROC    13890--CALL
PROCESS_$PACTNNN IN PROCEDURE TOS$PROCESS_PACT
     14037**PROC    13894--CALL
PROCESS_$PACTP IN PROCEDURE TOS$PROCESS_PACT
     13998**PROC    13892--CALL    13972--CALL
PROCESS_$PACT_ERROR IN PROCEDURE TOS$PROCESS_PACT
     14076**PROC    13896--CALL    13903--CALL    13973--CALL    13975--CALL    14013--CALL    14015--CALL
     14059--CALL    14061--CALL
P_AREG IN PROCEDURE TOS$MME_HISREG
     13547**DCL     13545--PROC
Q IN PROCEDURE TOS$MME_COMWD
     13302**DCL     13299--PROC    13307>>ASSIGN  13308<<ASSIGN
Q IN PROCEDURE TOS$MME_CPUASG
     13350**DCL     13341--PROC    13351--REDEF
Q IN PROCEDURE TOS$MME_CPUREL
     13452**DCL     13443--PROC    13453--REDEF
Q IN PROCEDURE TOS$MME_TAKCPU
     13605**DCL     13597--PROC    13634<<ASSIGN
QUEUE_ENTRY
     13189**DCL     13400<<ASSIGN  13401<<ASSIGN  13402<<ASSIGN  13405<>CALL    13505<<ASSIGN  13506<<ASSIGN
     13507<<ASSIGN  13510<>CALL    13703<<ASSIGN  13704<<ASSIGN  13705<<ASSIGN  13708<>CALL    13769<<ASSIGN
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:143  
     13770<<ASSIGN  13771<<ASSIGN  13774<>CALL
Q_REG.PHYS_PORT_NUM IN PROCEDURE TOS$MME_CPUASG
     13352**DCL     13376<<ASSIGN
Q_REG.PHYS_PORT_NUM IN PROCEDURE TOS$MME_CPUREL
     13454**DCL     13477<<ASSIGN
REQUEST_TYPE
     13190**DCL     13403<<ASSIGN  13405<>CALL    13508<<ASSIGN  13510<>CALL    13706<<ASSIGN  13708<>CALL
     13772<<ASSIGN  13774<>CALL
RETCPU_FPT IN PROCEDURE TOS$MME_RETCPU
     13807**DCL     13816<>CALL
RETCPU_FPT.V IN PROCEDURE TOS$MME_RETCPU
     13807**DCL     13807--DCLINIT
RETCPU_FPT.V.CPU# IN PROCEDURE TOS$MME_RETCPU
     13809**DCL     13815<<ASSIGN
RETURN_DELTA
     12700**DCL        41--PROC    13249<>CALL    13251<>CALL    13253<>CALL    13255<>CALL    13257<>CALL
     13259<>CALL    13261<>CALL    13263<>CALL    13265<>CALL
RETURN_DELTA IN PROCEDURE TOS$MME_COMWD
     13303**DCL     13299--PROC    13310<<ASSIGN
RETURN_DELTA IN PROCEDURE TOS$MME_CPUASG
     13354**DCL     13341--PROC    13367<<ASSIGN  13388<<ASSIGN  13392<<ASSIGN
RETURN_DELTA IN PROCEDURE TOS$MME_CPUREL
     13456**DCL     13443--PROC    13469<<ASSIGN  13487<<ASSIGN  13491<<ASSIGN
RETURN_DELTA IN PROCEDURE TOS$MME_HISREG
     13548**DCL     13545--PROC    13552<<ASSIGN
RETURN_DELTA IN PROCEDURE TOS$MME_RETCPU
     13795**DCL     13788--PROC    13818<<ASSIGN  13822<<ASSIGN
RETURN_DELTA IN PROCEDURE TOS$MME_RETRY
     13572**DCL     13565--PROC    13576<<ASSIGN
RETURN_DELTA IN PROCEDURE TOS$MME_SCUASG
     13673**DCL     13666--PROC    13679<<ASSIGN  13691<<ASSIGN  13695<<ASSIGN
RETURN_DELTA IN PROCEDURE TOS$MME_SCUREL
     13739**DCL     13732--PROC    13745<<ASSIGN  13751<<ASSIGN  13756<<ASSIGN
RETURN_DELTA IN PROCEDURE TOS$MME_TAKCPU
     13607**DCL     13597--PROC    13635<<ASSIGN  13640<<ASSIGN  13641<<ASSIGN
SCU_INFO.SCU_STATUS.REL_BIT
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:144  
     13213**DCL     13690>>IF      13750>>IF
SERVICE_CODE
     13191**DCL     13404<<ASSIGN  13405<>CALL    13509<<ASSIGN  13510<>CALL    13707<<ASSIGN  13708<>CALL
     13773<<ASSIGN  13774<>CALL
SET_CPU_PORT IN PROCEDURE PROCESS_$PACTP
     14000**DCL     13998--PROC    14010>>ASSIGN
START IN PROCEDURE PROCESS_$PACTNNN
     14040**DCL     14045<<ASSIGN  14055>>CALLBLT
STATUS_WD_A
     13192**DCL     13195--REDEF
STATUS_WD_A.SUB_EXEC
     13194**DCL     13396<<ASSIGN  13501<<ASSIGN  13699<<ASSIGN  13765<<ASSIGN
STATUS_WD_B
     13196**DCL     13200--REDEF
STATUS_WD_B.FUNCTION_CODE
     13198**DCL     13397<<ASSIGN  13502<<ASSIGN  13700<<ASSIGN  13766<<ASSIGN
STATUS_WD_B.FUNCTION_TYPE
     13199**DCL     13398<<ASSIGN  13503<<ASSIGN  13701<<ASSIGN  13767<<ASSIGN
STATUS_WD_B.STATUS_CODE
     13197**DCL     13366<<ASSIGN  13386<<ASSIGN  13391<<ASSIGN  13468<<ASSIGN  13485<<ASSIGN  13490<<ASSIGN
     13678<<ASSIGN  13692<<ASSIGN  13696<<ASSIGN  13744<<ASSIGN  13752<<ASSIGN  13755<<ASSIGN
S_MPSTATE
     12768**DCL     13370--ASSIGN  13472--ASSIGN
S_PORTNR
     12767**DCL     13369--ASSIGN  13471--ASSIGN
TAKCPU_FPT IN PROCEDURE TOS$MME_TAKCPU
     13620**DCL     13630<>CALL
TAKCPU_FPT.V IN PROCEDURE TOS$MME_TAKCPU
     13620**DCL     13620--DCLINIT
TAKCPU_FPT.V.CPU# IN PROCEDURE TOS$MME_TAKCPU
     13622**DCL     13629<<ASSIGN
TOD$DISPATCHER
     13180**DCL-ENT 13405--CALL    13510--CALL    13708--CALL    13774--CALL
TOLTS_GETCMD
     12836**DCL     13395<>CALL    13500<>CALL    13698<>CALL    13764<>CALL    14091<>CALL
TOLTS_GETCMD.ERR_CODE
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:145  
     12984**DCL     13380<<ASSIGN  13496<<ASSIGN  13686<<ASSIGN  13761<<ASSIGN  14088<<ASSIGN
TOLTS_GETCMD.F1_
     13033**DCL     13381<<ASSIGN  13497<<ASSIGN  13687<<ASSIGN  13762<<ASSIGN  14089<<ASSIGN
TOLTS_GETCMD.F2_
     13037**DCL     13382<<ASSIGN  13498<<ASSIGN
TOLTS_GETCMD.FLGLEV#
     12941**DCL     13383<<ASSIGN  13499<<ASSIGN  13688<<ASSIGN  13763<<ASSIGN  14090<<ASSIGN
TOLTS_GETCMD.OUT$
     12841**DCL     12847--REDEF
TOS$COMWD
     12770**DCL     13306<<ASSIGN  13306>>ASSIGN  13307<<ASSIGN  13307>>ASSIGN  13308>>ASSIGN
TOS$COMWD IN PROCEDURE TOS$PROCESS_PACT
     13856**DCL     13877>>ASSIGN  13902<<ASSIGN
TOS$MME_COMWD
     13299**PROC    13249--CALL
TOS$MME_CPUASG
     13341**PROC    13251--CALL
TOS$MME_CPUREL
     13443**PROC    13253--CALL
TOS$MME_HISREG
     13545**PROC    13255--CALL
TOS$MME_RETCPU
     13788**PROC    13257--CALL
TOS$MME_RETRY
     13565**PROC    13259--CALL
TOS$MME_SCUASG
     13666**PROC    13261--CALL
TOS$MME_SCUREL
     13732**PROC    13263--CALL
TOS$MME_TAKCPU
     13597**PROC    13265--CALL
TOS$PROCESS_PACT
     13854**PROC    13281--CALL
TOS$RSW2
     13179**DCL-ENT 13632--CALL
TOS$RSW_AREG
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:146  
     12771**DCL     13633>>ASSIGN
TOS_ERROR_CODE
     12728**DCL     13380>>ASSIGN  13496>>ASSIGN  13686>>ASSIGN  13761>>ASSIGN  14088>>ASSIGN
TOS_ERROR_CODE.ERR#
     12758**DCL     13379<<ASSIGN  13387<<ASSIGN  13393<<ASSIGN  13486<<ASSIGN  13493<<ASSIGN  13494<<ASSIGN
     13685<<ASSIGN  13760<<ASSIGN  14087<<ASSIGN
TOT$ECP.TEST_REQ
     12782**DCL     12784--REDEF   13881>>CALLBLT 14055>>CALLBLT 14086>>ASSIGN
TOT$ECP.TEST_REQ_
     12784**DCL     13884>>DOSELCT 13971>>IF      14007>>IF      14007>>IF      14009>>CALLBLT 14046>>DOWHILE
     14046>>DOWHILE
VALID_PACT_RQST IN PROCEDURE TOS$PROCESS_PACT
     13868**DCL     13878<<ASSIGN  13883>>DOWHILE 13901>>IF      14085<<ASSIGN
X1 IN PROCEDURE TOS$MME_TAKCPU
     13606**DCL     13597--PROC    13628<<ASSIGN
X2 IN PROCEDURE TOS$MME_CPUASG
     13343**DCL     13341--PROC
X2 IN PROCEDURE TOS$MME_CPUREL
     13445**DCL     13443--PROC
X4 IN PROCEDURE TOS$MME_CPUASG
     13344**DCL     13341--PROC    13375>>CALLBLT 13376>>ASSIGN  13378>>CALLBLT 13385>>IF      13398>>ASSIGN
X4 IN PROCEDURE TOS$MME_CPUREL
     13446**DCL     13443--PROC    13476>>CALLBLT 13477>>ASSIGN  13479>>CALLBLT 13484>>IF      13503>>ASSIGN
X4 IN PROCEDURE TOS$MME_SCUASG
     13669**DCL     13666--PROC    13684>>CALLBLT 13690>>IF
X4 IN PROCEDURE TOS$MME_SCUREL
     13735**DCL     13732--PROC    13750>>IF      13759>>CALLBLT 13767>>ASSIGN
XUG$ERRMSG
      9527**DCL-ENT 13395--CALL    13500--CALL    13698--CALL    13764--CALL    14091--CALL
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:147  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:148  
              FULL UREF LISTING

A.LOGICAL_CPU IN PROCEDURE TOS$MME_RETCPU
     13793**DCL
A.MBZ IN PROCEDURE TOS$MME_RETCPU
     13791**DCL
A.PHYSICAL_CPU IN PROCEDURE TOS$MME_RETCPU
     13792**DCL
A.CPU_NUMBER IN PROCEDURE TOS$MME_RETRY
     13569**DCL
A.RETRY_LIMIT IN PROCEDURE TOS$MME_RETRY
     13571**DCL
A.LOGICAL_CPU IN PROCEDURE TOS$MME_TAKCPU
     13602**DCL
A.MBZ IN PROCEDURE TOS$MME_TAKCPU
     13600**DCL
A.PHYSICAL_CPU IN PROCEDURE TOS$MME_TAKCPU
     13601**DCL
A_REG IN PROCEDURE TOS$MME_CPUASG
     13346**DCL
A_REG.SUBEXEC IN PROCEDURE TOS$MME_CPUASG
     13348**DCL
A_REG.TP_NUM IN PROCEDURE TOS$MME_CPUASG
     13349**DCL
A_REG IN PROCEDURE TOS$MME_CPUREL
     13448**DCL
A_REG.TP_NUM IN PROCEDURE TOS$MME_CPUREL
     13451**DCL
B$ALT
     12707**DCL
B$ALT.BRKCNT
     12708**DCL
B$ALT.DCB#
     12708**DCL
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:149  
B$ALT.ERR
     12708**DCL
B$ALT.ERR.CODE
     12709**DCL
B$ALT.ERR.FCG
     12709**DCL
B$ALT.ERR.MID
     12709**DCL
B$ALT.ERR.MON
     12709**DCL
B$ALT.ERR.SEV
     12709**DCL
B$ALT.EVSC
     12708**DCL
B$ALT.FPT
     12707**DCL
B$ALT.FPT.FCG
     12707**DCL
B$ALT.FPT.PMME
     12707**DCL
B$ALT.P#
     12711**DCL
B$ALT.SSFRAME
     12707**DCL
B$ALT.SUBC
     12708**DCL
B$TCB
     12703**DCL
B$TCB.CURRSZ
     12703**DCL
B$TCB.STK$
     12703**DCL
B$TCB.TCBAVSZ
     12703**DCL
COMWD.ZERO_CPUS IN PROCEDURE TOS$PROCESS_PACT
     13859**DCL
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:150  
ENTRY_C
     13201**DCL
FPT_SAD.V.MONSID#
     13173**DCL
FPT_SAD.V.USERSID#
     13172**DCL
FPT_SAD.V_
     13172**DCL
M$ACCT
      7215**DCL-ENT
M$ACTIVATE
      7218**DCL-ENT
M$ALIB
      7211**DCL-ENT
M$ASUSER
      7213**DCL-ENT
M$ATTACH
      7220**DCL-ENT
M$BADPP
      7238**DCL-ENT
M$CGCTL
      7219**DCL-ENT
M$CGINFO
      7219**DCL-ENT
M$CHECK
      7200**DCL-ENT
M$CHGUNIT
      7258**DCL-ENT
M$CLOSE
      7198**DCL-ENT
M$CLRSTK
      7256**DCL-ENT
M$CMDVAR
      7267**DCL-ENT
M$CONFIG
      7228**DCL-ENT
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:151  
M$CORRES
      7203**DCL-ENT
M$CPEXIT
      7212**DCL-ENT
M$CVM
      7236**DCL-ENT
M$CVOL
      7201**DCL-ENT
M$DCLFLD
      7228**DCL-ENT
M$DEACTIVATE
      7218**DCL-ENT
M$DELREC
      7200**DCL-ENT
M$DEQ
      7265**DCL-ENT
M$DETACH
      7220**DCL-ENT
M$DEVICE
      7202**DCL-ENT
M$DISPLAY
      7265**DCL-ENT
M$DISPRES
      7205**DCL-ENT
M$DLIB
      7211**DCL-ENT
M$DRIBBLE
      7228**DCL-ENT
M$DRTN
      7256**DCL-ENT
M$DSUSER
      7213**DCL-ENT
M$ENQ
      7264**DCL-ENT
M$EOM
      7223**DCL-ENT
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:152  
M$ERASE
      7229**DCL-ENT
M$ERR
      7210**DCL-ENT
M$ERRMSG
      7261**DCL-ENT
M$EVENT
      7253**DCL-ENT
M$EXHUME
      7262**DCL-ENT
M$EXIT
      7210**DCL-ENT
M$EXTEND
      7202**DCL-ENT
M$FDP
      7234**DCL-ENT
M$FDS
      7233**DCL-ENT
M$FEBOOT
      7226**DCL-ENT
M$FECTL
      7227**DCL-ENT
M$FEDUMP
      7226**DCL-ENT
M$FID
      7261**DCL-ENT
M$FINDPROC
      7215**DCL-ENT
M$FSUSER
      7213**DCL-ENT
M$FVP
      7235**DCL-ENT
M$FWCG
      7219**DCL-ENT
M$GBPL
      7239**DCL-ENT
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:153  
M$GDDL
      7235**DCL-ENT
M$GDP
      7234**DCL-ENT
M$GDS
      7233**DCL-ENT
M$GETDCB
      7204**DCL-ENT
M$GETMOUSE
      7244**DCL-ENT
M$GETPM
      7245**DCL-ENT
M$GJOB
      7263**DCL-ENT
M$GLINEATTR
      7223**DCL-ENT
M$GOODPP
      7238**DCL-ENT
M$GPLATEN
      7231**DCL-ENT
M$GPROMPT
      7230**DCL-ENT
M$GTRMATTR
      7224**DCL-ENT
M$GTRMCTL
      7222**DCL-ENT
M$GTRMTAB
      7225**DCL-ENT
M$GVP
      7234**DCL-ENT
M$HELP
      7261**DCL-ENT
M$INT
      7253**DCL-ENT
M$INTRTN
      7214**DCL-ENT
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:154  
M$IOQ
      7249**DCL-ENT
M$JOBSTATS
      7263**DCL-ENT
M$KEYIN
      7203**DCL-ENT
M$LDEV
      7198**DCL-ENT
M$LDTRC
      7211**DCL-ENT
M$LIMIT
      7204**DCL-ENT
M$LINES
      7203**DCL-ENT
M$LINK
      7210**DCL-ENT
M$MADMUCK
      7206**DCL-ENT
M$MAKUSER
      7237**DCL-ENT
M$MBS
      7205**DCL-ENT
M$MDFFLD
      7229**DCL-ENT
M$MERC
      7254**DCL-ENT
M$MERCS
      7255**DCL-ENT
M$MIRROR
      7249**DCL-ENT
M$MONINFO
      7266**DCL-ENT
M$MPL
      7239**DCL-ENT
M$NODEINFO
      7230**DCL-ENT
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:155  
M$NXTUSR
      7264**DCL-ENT
M$OCMSG
      7262**DCL-ENT
M$OLAY
      7210**DCL-ENT
M$OPEN
      7198**DCL-ENT
M$PAS
      7239**DCL-ENT
M$PATHCON
      7262**DCL-ENT
M$PDS
      7233**DCL-ENT
M$PFIL
      7200**DCL-ENT
M$PLATEN
      7224**DCL-ENT
M$PRECORD
      7202**DCL-ENT
M$PROCNAME
      7215**DCL-ENT
M$PROFILE
      7226**DCL-ENT
M$PROMPT
      7222**DCL-ENT
M$RACST
      7206**DCL-ENT
M$RDSYSLOG
      7247**DCL-ENT
M$READ
      7199**DCL-ENT
M$RELDCB
      7204**DCL-ENT
M$RELRES
      7205**DCL-ENT
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:156  
M$RELSTARF
      7207**DCL-ENT
M$REM
      7207**DCL-ENT
M$RENV
      7254**DCL-ENT
M$REQUIRE
      7206**DCL-ENT
M$RETRY
      7255**DCL-ENT
M$RETRYS
      7255**DCL-ENT
M$REW
      7201**DCL-ENT
M$RLSFLD
      7229**DCL-ENT
M$RPRIV
      7257**DCL-ENT
M$RSPP
      7236**DCL-ENT
M$RSWITCH
      7258**DCL-ENT
M$RUE
      7264**DCL-ENT
M$SAVE
      7213**DCL-ENT
M$SCON
      7214**DCL-ENT
M$SCREECH
      7212**DCL-ENT
M$SENV
      7254**DCL-ENT
M$SETFMA
      7198**DCL-ENT
M$SETFP
      7227**DCL-ENT
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:157  
M$SINPUT
      7225**DCL-ENT
M$SLCFLD
      7230**DCL-ENT
M$SMOUSE
      7244**DCL-ENT
M$SMPRT
      7236**DCL-ENT
M$SPRIV
      7257**DCL-ENT
M$SSC
      7237**DCL-ENT
M$SSWITCH
      7257**DCL-ENT
M$STATE
      7266**DCL-ENT
M$STD
      7238**DCL-ENT
M$STIMER
      7252**DCL-ENT
M$STLPP
      7235**DCL-ENT
M$STRAP
      7252**DCL-ENT
M$STRMATTR
      7224**DCL-ENT
M$STRMCTL
      7222**DCL-ENT
M$STRMTAB
      7225**DCL-ENT
M$SYMBIO
      7263**DCL-ENT
M$SYSCON
      7249**DCL-ENT
M$SYSID
      7267**DCL-ENT
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:158  
M$TDCLOSE
      7248**DCL-ENT
M$TDIO
      7248**DCL-ENT
M$TDOPEN
      7247**DCL-ENT
M$TEMPWROC
      7242**DCL-ENT
M$TIME
      7265**DCL-ENT
M$TRAP
      7252**DCL-ENT
M$TRMISC
      7227**DCL-ENT
M$TRMPRG
      7223**DCL-ENT
M$TRTN
      7256**DCL-ENT
M$TRUNC
      7199**DCL-ENT
M$TTIMER
      7252**DCL-ENT
M$UC
      7222**DCL
M$UMPL
      7239**DCL-ENT
M$UNFID
      7261**DCL-ENT
M$UNLATCH
      7218**DCL-ENT
M$UNSHARE
      7215**DCL-ENT
M$USRFIELD
      7258**DCL-ENT
M$VIRTUAL
      7233**DCL-ENT
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:159  
M$WAIT
      7256**DCL-ENT
M$WEOF
      7201**DCL-ENT
M$WRITE
      7199**DCL-ENT
M$WRSYSLOG
      7247**DCL-ENT
M$XCON
      7253**DCL-ENT
M$XCONRTN
      7214**DCL-ENT
M$XEQTIME
      7266**DCL-ENT
M$XFLUSH
      7207**DCL-ENT
M$XMOUSE
      7244**DCL-ENT
M$XXX
      7210**DCL-ENT
M$YC
      7212**DCL-ENT
MME.INST
     12664**DCL
MME.INST.OP
     12666**DCL
MME.WD_1
     12667**DCL
MME.WD_2
     12668**DCL
MME.WD_3
     12669**DCL
MME.WD_4
     12670**DCL
MME.WD_5
     12671**DCL
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:160  
MME.WD_6
     12672**DCL
MREG.E
     12694**DCL
MREG.X0
     12684**DCL
MREG.X3
     12687**DCL
MREG.X5
     12689**DCL
MREG.X6
     12690**DCL
MREG.X7
     12691**DCL
Q_REG IN PROCEDURE TOS$MME_CPUASG
     13351**DCL
Q_REG IN PROCEDURE TOS$MME_CPUREL
     13453**DCL
RETCPU_FPT.V.MODE# IN PROCEDURE TOS$MME_RETCPU
     13807**DCL
RETCPU_FPT.V.TYPE# IN PROCEDURE TOS$MME_RETCPU
     13808**DCL
RETCPU_FPT.V.XEQ# IN PROCEDURE TOS$MME_RETCPU
     13808**DCL
RETCPU_FPT.V_ IN PROCEDURE TOS$MME_RETCPU
     13807**DCL
SCUX
     13184**DCL
SCU_INFO
     13203**DCL
SCU_INFO.LOWER_BOUND
     13204**DCL
SCU_INFO.PAGES
     13208**DCL
SCU_INFO.SCU_STATUS
     13210**DCL
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:161  
SCU_INFO.SCU_STATUS.LOW_MEM
     13219**DCL
SCU_INFO.SCU_STATUS.NOT_CONFIG
     13211**DCL
SCU_INFO.SCU_STATUS.REL_IN_PROGRESS
     13215**DCL
SCU_INFO.SCU_STATUS.RET_IN_PROGRESS
     13217**DCL
SCU_INFO.UPPER_BOUND
     13206**DCL
STATUS_WD_A.RASE_CODE
     13193**DCL
TAKCPU_FPT.V.MODE# IN PROCEDURE TOS$MME_TAKCPU
     13620**DCL
TAKCPU_FPT.V.TYPE# IN PROCEDURE TOS$MME_TAKCPU
     13621**DCL
TAKCPU_FPT.V.XEQ# IN PROCEDURE TOS$MME_TAKCPU
     13621**DCL
TAKCPU_FPT.V_ IN PROCEDURE TOS$MME_TAKCPU
     13620**DCL
TOLTS_GETCMD.ALWAYS_SET_PROMPT#
     12924**DCL
TOLTS_GETCMD.BUF$
     13113**DCL
TOLTS_GETCMD.CONTINUED#
     12896**DCL
TOLTS_GETCMD.CONTINUE_OK#
     12900**DCL
TOLTS_GETCMD.DCB2_PARAM#
     13021**DCL
TOLTS_GETCMD.DCB_PARAM#
     13016**DCL
TOLTS_GETCMD.DISP#
     13027**DCL
TOLTS_GETCMD.ECHO
     12956**DCL
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:162  
TOLTS_GETCMD.EOMCHAR#
     12976**DCL
TOLTS_GETCMD.EPOS#
     12946**DCL
TOLTS_GETCMD.ERR#
     12847**DCL
TOLTS_GETCMD.ERR#.CODE#
     12850**DCL
TOLTS_GETCMD.ERR#.FCG#
     12848**DCL
TOLTS_GETCMD.ERR#.MON#
     12849**DCL
TOLTS_GETCMD.ERR#.SEV#
     12851**DCL
TOLTS_GETCMD.ERRDCB#
     12995**DCL
TOLTS_GETCMD.ERRMFID$
     12855**DCL
TOLTS_GETCMD.ERRMSG_VFC#
     12951**DCL
TOLTS_GETCMD.ERR_CODE.CODE#
     12987**DCL
TOLTS_GETCMD.ERR_CODE.FCG#
     12985**DCL
TOLTS_GETCMD.ERR_CODE.MON#
     12986**DCL
TOLTS_GETCMD.ERR_CODE.SEV#
     12988**DCL
TOLTS_GETCMD.F3_
     13041**DCL
TOLTS_GETCMD.FPT$
     13133**DCL
TOLTS_GETCMD.INDCB#
     13007**DCL
TOLTS_GETCMD.INFOMSG#
     12932**DCL
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:163  
TOLTS_GETCMD.NLINES
     13152**DCL
TOLTS_GETCMD.NODES$
     12837**DCL
TOLTS_GETCMD.OUTDCB#
     13012**DCL
TOLTS_GETCMD.PASS
     12966**DCL
TOLTS_GETCMD.PCB$
     12861**DCL
TOLTS_GETCMD.PP_FUN$$
     13054**DCL
TOLTS_GETCMD.PP_ROOT$
     13141**DCL
TOLTS_GETCMD.PROMPT_
     13045**DCL
TOLTS_GETCMD.PROMPT_VFC#
     12911**DCL
TOLTS_GETCMD.RCVD_PROMPT#
     12906**DCL
TOLTS_GETCMD.READR$$
     13059**DCL
TOLTS_GETCMD.RFU10#
     13157**DCL
TOLTS_GETCMD.RFU11#
     13158**DCL
TOLTS_GETCMD.RFU12#
     13159**DCL
TOLTS_GETCMD.RFU2$
     13112**DCL
TOLTS_GETCMD.RFU9#
     13156**DCL
TOLTS_GETCMD.RFUBIT2
     12975**DCL
TOLTS_GETCMD.RFUBYTE
     12983**DCL
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:164  
TOLTS_GETCMD.RLT$
     13118**DCL
TOLTS_GETCMD.RPROMPT_
     13049**DCL
TOLTS_GETCMD.SFROUTINE$
     13086**DCL
TOLTS_GETCMD.SKIP_PREPROCESS#
     12917**DCL
TOLTS_GETCMD.SYNERR_NODES$
     13125**DCL
TOLTS_GETCMD.TEXT_
     13099**DCL
TOLTS_GETCMD.TREAD#
     12885**DCL
TOLTS_GETCMD.USE_EPOS#
     12879**DCL
TOLTS_GETCMD.UTIL$
     13137**DCL
TOLTS_GETCMD.WORK$
     12869**DCL
TOLTS_GETCMD.XT_PARAM$
     13105**DCL
TOLTS_GETCMD.XUH$
     12874**DCL
TOS$PACT
     13279**ENTRY
TOS$SOLTS
        41**PROC
TOS_ERROR_CODE.FCG
     12744**DCL
TOS_ERROR_CODE.MID
     12757**DCL
TOS_ERROR_CODE.MON
     12757**DCL
TOS_ERROR_CODE.SEV
     12758**DCL
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:165  
TOT$ECP
     12781**DCL
TOT$ECP.BOOT_CPU_TYPE
     12818**DCL
TOT$ECP.BREAK_ALLOWED
     12814**DCL
TOT$ECP.BREAK_RECEIVED
     12816**DCL
TOT$ECP.DYNAMIC_PAGE_COUNT
     12799**DCL
TOT$ECP.IO
     12785**DCL
TOT$ECP.IO.COUNT
     12788**DCL
TOT$ECP.IO.TYPE
     12786**DCL
TOT$ECP.ISC
     12790**DCL
TOT$ECP.ISC.GERELC_WAIT
     12795**DCL
TOT$ECP.ISC.READ_OUT
     12791**DCL
TOT$ECP.ISC.READ_PENDING
     12797**DCL
TOT$ECP.ISC.WRITE_OUT
     12793**DCL
TOT$ECP.SUBEXEC
     12801**DCL
TOT$ECP.SUBEXEC.ADDRESS
     12804**DCL
TOT$ECP.SUBEXEC.CURRENT
     12802**DCL
TOT$ECP.SUBEXEC.EDIT_NAME
     12806**DCL
TOT$ECP.SUBEXEC.TEST_PAGE_COUNT
     12812**DCL
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:166  
TOT$ECP.SUBEXEC.WRAPUP$
     12810**DCL
TOT$ECP.SUBEXEC.WRAPUP_TRIED
     12808**DCL
XUG$ALLMSG
      9537**DCL-ENT
XUG$BLANK_PASSWORD
      9540**DCL-ENT
XUG$BREAK
      9530**DCL-ENT
XUG$CLOSE_DCBS
      9529**DCL-ENT
XUG$CLRENABLE
      9533**DCL-ENT
XUG$CORRES
      9525**DCL-ENT
XUG$DISABLE
      9531**DCL-ENT
XUG$ECHO
      9523**DCL-ENT
XUG$ECHOIF
      9522**DCL-ENT
XUG$ECHOLAST
      9526**DCL-ENT
XUG$ENABLE
      9532**DCL-ENT
XUG$ERRCNVRT
      9542**DCL-ENT
XUG$ERRPTR
      9521**DCL-ENT
XUG$ERRTOLCP6
      9543**DCL-ENT
XUG$FINDDCB
      9538**DCL-ENT
XUG$GETCMD
      9520**DCL-ENT
PL6.E3A0      #001=TOS$SOLTS File=TOS$SOLTS.:E05TSI                              WED 07/30/97 06:35 Page:167  
XUG$GETDCB
      9539**DCL-ENT
XUG$HELP
      9535**DCL-ENT
XUG$INIT
      9524**DCL-ENT
XUG$MOREMSG
      9536**DCL-ENT
XUG$OPENOUT
      9541**DCL-ENT
XUG$SETERRMSG
      9528**DCL-ENT
XUG$SIMULATE_BREAK
      9534**DCL-ENT
