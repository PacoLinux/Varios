VERSION E05

PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:1    
        1        1        /*M* FLI$ALLOC - EFT I/O routines - buffer allocation */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* THI=1,PLM=3 */
        8        8        FLI$ALLOC: PROC( ASIZEW, APTR$ );
        9        9        /*F*  NAME: FLI$ALLOC
       10       10              PURPOSE: Handles allocation of memory.
       11       11         ***/
       12       12
       13       13    1   DCL ASIZEW SBIN ALIGNED;                /* If positive, number of words needed;
       14       14                                                   if negative, -number of words unneeded */
       15       15    1   DCL APTR$ PTR ALIGNED;             /* Returned pointer to first word of area  */
       16       16
       17       17         /***
       18       18          *** INCLUDE
       19       19          ***/
       20       20
       21       21        %INCLUDE CP_6;
       22     5580
       23     5581         /***
       24     5582          *** ENTRY
       25     5583          ***/
       26     5584
       27     5585    1   DCL FLI$RPT_ERR ENTRY(5);
       28     5586
       29     5587         /***
       30     5588          *** STATIC
       31     5589          ***/
       32     5590
       33     5591    1   DCL SEGSTART$ PTR STATIC INIT(ADDR(NIL));
       34     5592    1   DCL HAVE SBIN STATIC INIT(0);           /* Number of words we have            */
       35     5593    1   DCL USING SBIN STATIC INIT(0);          /* Number of words we're using        */
       36     5594
       37     5595         /***
PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:2    
       38     5596          *** AUTO
       39     5597          ***/
       40     5598
       41     5599    1   DCL NEED SBIN AUTO;                     /* Number of words needed             */
       42     5600
       43     5601         /***
       44     5602          *** FPT
       45     5603          ***/
       46     5604
       47     5605        %FPT_GDS( FPTN=GET_MEM,
       48     5606                  FREE=YES,
       49     5607                  PROTECTION=DSWRITE,
       50     5608                  RESULTS=RESULT );
       51     5624
       52     5625        %FPT_FDS( FPTN=FREE_MEM,
       53     5626                  RESULTS=RESULT,
       54     5627                  SEGSIZE="BITBIN('777777'O)" );
       55     5642
       56     5643        %VLP_VECTOR( FPTN=RESULT );
       57     5658
       58     5659        %VLP_VECTOR( FPTN=CLEAN_RESULT );
       59     5674
       60     5675        /****************************************/
       61     5676
       62     5677         /***
       63     5678          *** If no arguments, release memory.
       64     5679          ***/
       65     5680
       66     5681    1      IF ADDR(ASIZEW) = ADDR(NIL)
       67     5682    2       THEN DO;
       68     5683    2         CALL M$FDS( FREE_MEM )
       69     5684    3          WHENALTRETURN DO;
       70     5685    3            END;
       71     5686    2         RESULT = CLEAN_RESULT;
       72     5687    2         SEGSTART$ = ADDR(NIL);
       73     5688    2         HAVE = 0;
       74     5689    2         USING = 0;
PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:3    
       75     5690    2         RETURN;
       76     5691    2         END;
       77     5692
       78     5693         /***
       79     5694          *** Check if words being returned.
       80     5695          ***/
       81     5696
       82     5697    1      IF ASIZEW <= 0
       83     5698    2       THEN DO;
       84     5699    2         USING = USING + (ASIZEW/2)*2;
       85     5700    2         RETURN;
       86     5701    2         END;
       87     5702
       88     5703         /***
       89     5704          *** Calculate needed amount.  If need more, get it (in page chunks).
       90     5705          ***/
       91     5706
       92     5707    1      NEED = USING + ( (ASIZEW+1)/2 )*2;
       93     5708    1      IF NEED > HAVE
       94     5709    2       THEN DO;                            /* Get more                           */
       95     5710    2         GET_MEM.V.SEGSIZE# = ( (NEED - HAVE + 1023)/1024 )*1024;
       96     5711    2         CALL M$GDS( GET_MEM )
       97     5712    3          WHENALTRETURN DO;
       98     5713    3            CALL FLI$RPT_ERR( , );
       99     5714    3            CALL M$XXX; /*N* Probably should handle this more gracefully */
      100     5715    3            END;
      101     5716    2         IF SEGSTART$ = ADDR(NIL) THEN SEGSTART$ = RESULT.PTR$;
      102     5717    2         HAVE = HAVE + GET_MEM.V.SEGSIZE#;
      103     5718    2         END;
      104     5719
      105     5720    1      APTR$ = PINCRW( SEGSTART$, USING );
      106     5721    1      USING = NEED;
      107     5722    1      RETURN;
      108     5723
      109     5724    1   END FLI$ALLOC;
      110     5725        %EOD;

PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:4    
--  Include file information  --

   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FLI$ALLOC.

   Procedure FLI$ALLOC requires 67 words for executable code.
   Procedure FLI$ALLOC requires 6 words of local(AUTO) storage.

PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:5    

 Object Unit name= FLI$ALLOC                                  File name= FLI$ALLOC.:E05TOU
 UTS= JUL 29 '97 15:47:36.20 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    20     24  FLI$ALLOC
    2   Proc  even  none    67    103  FLI$ALLOC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        2  FLI$ALLOC

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       5 FLI$RPT_ERR
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_VECTNIL
PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:6    

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:7    


        1        1        /*M* FLI$ALLOC - EFT I/O routines - buffer allocation */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* THI=1,PLM=3 */
        8        8        FLI$ALLOC: PROC( ASIZEW, APTR$ );

      8  2 000000   000000 700200 xent  FLI$ALLOC    TSX0  ! X66_AUTO_2
         2 000001   000006 000002                    ZERO    6,2

        9        9        /*F*  NAME: FLI$ALLOC
       10       10              PURPOSE: Handles allocation of memory.
       11       11         ***/
       12       12
       13       13    1   DCL ASIZEW SBIN ALIGNED;                /* If positive, number of words needed;
       14       14                                                  if negative, -number of words unneeded */
       15       15    1   DCL APTR$ PTR ALIGNED;             /* Returned pointer to first word of area  */
       16       16
       17       17         /***
       18       18          *** INCLUDE
       19       19          ***/
       20       20
       21       21        %INCLUDE CP_6;
       22     5580
       23     5581         /***
       24     5582          *** ENTRY
       25     5583          ***/
       26     5584
       27     5585    1   DCL FLI$RPT_ERR ENTRY(5);
       28     5586
       29     5587         /***
       30     5588          *** STATIC
       31     5589          ***/
       32     5590
PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:8    
       33     5591    1   DCL SEGSTART$ PTR STATIC INIT(ADDR(NIL));
       34     5592    1   DCL HAVE SBIN STATIC INIT(0);           /* Number of words we have            */
       35     5593    1   DCL USING SBIN STATIC INIT(0);          /* Number of words we're using        */
       36     5594
       37     5595         /***
       38     5596          *** AUTO
       39     5597          ***/
       40     5598
       41     5599    1   DCL NEED SBIN AUTO;                     /* Number of words needed             */
       42     5600
       43     5601         /***
       44     5602          *** FPT
       45     5603          ***/
       46     5604
       47     5605        %FPT_GDS( FPTN=GET_MEM,
       48     5606                  FREE=YES,
       49     5607                  PROTECTION=DSWRITE,
       50     5608                  RESULTS=RESULT );
       51     5624
       52     5625        %FPT_FDS( FPTN=FREE_MEM,
       53     5626                  RESULTS=RESULT,
       54     5627                  SEGSIZE="BITBIN('777777'O)" );
       55     5642
       56     5643        %VLP_VECTOR( FPTN=RESULT );
       57     5658
       58     5659        %VLP_VECTOR( FPTN=CLEAN_RESULT );
       59     5674
       60     5675        /****************************************/
       61     5676
       62     5677         /***
       63     5678          *** If no arguments, release memory.
       64     5679          ***/
       65     5680
       66     5681    1      IF ADDR(ASIZEW) = ADDR(NIL)

   5681  2 000002   200003 236100                    LDQ     @ASIZEW,,AUTO
         2 000003   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:9    
         2 000004   000021 601000 2                  TNZ     s:5697

       67     5682    2       THEN DO;

       68     5683    2         CALL M$FDS( FREE_MEM )

   5683  2 000005   000012 630400 1                  EPPR0   FREE_MEM
         2 000006   430002 713400                    CLIMB   alt,fds
         2 000007   400400 401760                    pmme    nvectors=2
         2 000010   000012 702000 2                  TSX2    s:5686
         2 000011   000012 710000 2                  TRA     s:5686

       69     5684    3          WHENALTRETURN DO;

       70     5685    3            END;

       71     5686    2         RESULT = CLEAN_RESULT;

   5686  2 000012   000022 237000 1                  LDAQ    CLEAN_RESULT
         2 000013   000020 757000 1                  STAQ    RESULT

       72     5687    2         SEGSTART$ = ADDR(NIL);

   5687  2 000014   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000015   000000 756000 1                  STQ     SEGSTART$

       73     5688    2         HAVE = 0;

   5688  2 000016   000001 450000 1                  STZ     HAVE

       74     5689    2         USING = 0;

   5689  2 000017   000002 450000 1                  STZ     USING

       75     5690    2         RETURN;

   5690  2 000020   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:10   

       76     5691    2         END;
       77     5692
       78     5693         /***
       79     5694          *** Check if words being returned.
       80     5695          ***/
       81     5696
       82     5697    1      IF ASIZEW <= 0

   5697  2 000021   200003 470500                    LDP0    @ASIZEW,,AUTO
         2 000022   000000 235100                    LDA     0,,PR0
         2 000023   000032 605400 2                  TPNZ    s:5707

       83     5698    2       THEN DO;

       84     5699    2         USING = USING + (ASIZEW/2)*2;

   5699  2 000024   000000 236100                    LDQ     0,,PR0
         2 000025   000002 506007                    DIV     2,DL
         2 000026   000001 736000                    QLS     1
         2 000027   000002 036000 1                  ADLQ    USING
         2 000030   000002 756000 1                  STQ     USING

       85     5700    2         RETURN;

   5700  2 000031   000000 702200 xent               TSX2  ! X66_ARET

       86     5701    2         END;
       87     5702
       88     5703         /***
       89     5704          *** Calculate needed amount.  If need more, get it (in page chunks).
       90     5705          ***/
       91     5706
       92     5707    1      NEED = USING + ( (ASIZEW+1)/2 )*2;

   5707  2 000032   000000 236100                    LDQ     0,,PR0
         2 000033   000001 036007                    ADLQ    1,DL
PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:11   
         2 000034   000002 506007                    DIV     2,DL
         2 000035   000001 736000                    QLS     1
         2 000036   000002 036000 1                  ADLQ    USING
         2 000037   200005 756100                    STQ     NEED,,AUTO

       93     5708    1      IF NEED > HAVE

   5708  2 000040   000001 116000 1                  CMPQ    HAVE
         2 000041   000073 604400 2                  TMOZ    s:5720

       94     5709    2       THEN DO;                            /* Get more                           */

       95     5710    2         GET_MEM.V.SEGSIZE# = ( (NEED - HAVE + 1023)/1024 )*1024;

   5710  2 000042   000001 136000 1                  SBLQ    HAVE
         2 000043   001777 036007                    ADLQ    1023,DL
         2 000044   002000 506007                    DIV     1024,DL
         2 000045   000012 736000                    QLS     10
         2 000046   000000 620006                    EAX0    0,QL
         2 000047   000010 440000 1                  SXL0    GET_MEM+4

       96     5711    2         CALL M$GDS( GET_MEM )

   5711  2 000050   000004 630400 1                  EPPR0   GET_MEM
         2 000051   430001 713400                    CLIMB   alt,gds
         2 000052   400400 401760                    pmme    nvectors=2
         2 000053   000055 702000 2                  TSX2    s:5713
         2 000054   000062 710000 2                  TRA     s:5716

       97     5712    3          WHENALTRETURN DO;

       98     5713    3            CALL FLI$RPT_ERR( , );

   5713  2 000055   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000056   000000 701000 xent               TSX1    FLI$RPT_ERR
         2 000057   000000 011000                    NOP     0

PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:12   
       99     5714    3            CALL M$XXX; /*N* Probably should handle this more gracefully */

   5714  2 000060   000003 713400                    CLIMB   3
         2 000061   000000 401760                    pmme    nvectors=0

      100     5715    3            END;

      101     5716    2         IF SEGSTART$ = ADDR(NIL) THEN SEGSTART$ = RESULT.PTR$;

   5716  2 000062   000000 236000 1                  LDQ     SEGSTART$
         2 000063   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000064   000067 601000 2                  TNZ     s:5717

   5716  2 000065   000021 236000 1                  LDQ     RESULT+1
         2 000066   000000 756000 1                  STQ     SEGSTART$

      102     5717    2         HAVE = HAVE + GET_MEM.V.SEGSIZE#;

   5717  2 000067   000010 236000 1                  LDQ     GET_MEM+4
         2 000070   777777 376007                    ANQ     -1,DL
         2 000071   000001 036000 1                  ADLQ    HAVE
         2 000072   000001 756000 1                  STQ     HAVE

      103     5718    2         END;

      104     5719
      105     5720    1      APTR$ = PINCRW( SEGSTART$, USING );

   5720  2 000073   000002 236000 1                  LDQ     USING
         2 000074   000022 736000                    QLS     18
         2 000075   000000 036000 1                  ADLQ    SEGSTART$
         2 000076   200004 470500                    LDP0    @APTR$,,AUTO
         2 000077   000000 756100                    STQ     0,,PR0

      106     5721    1      USING = NEED;

   5721  2 000100   200005 235100                    LDA     NEED,,AUTO
PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:13   
         2 000101   000002 755000 1                  STA     USING

      107     5722    1      RETURN;

   5722  2 000102   000000 702200 xent               TSX2  ! X66_ARET
      108     5723
      109     5724    1   END FLI$ALLOC;
      110     5725        %EOD;

PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:14   
--  Include file information  --

   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FLI$ALLOC.
PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:15   

 **** Variables and constants ****

  ****  Section 001  Data  FLI$ALLOC

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    22-0-0/d STRC(72)    r     1 CLEAN_RESULT              12-0-0/d STRC(216)   r     1 FREE_MEM
     4-0-0/d STRC(216)   r     1 GET_MEM                    1-0-0/w SBIN        r     1 HAVE
    20-0-0/d STRC(72)    r     1 RESULT                     0-0-0/w PTR         r     1 SEGSTART$
     2-0-0/w SBIN        r     1 USING

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @APTR$                     3-0-0/w PTR         r     1 @ASIZEW
    *0-0-0/w PTR         r     1 APTR$                     *0-0-0/w SBIN        r     1 ASIZEW
     5-0-0/w SBIN        r     1 NEED


   Procedure FLI$ALLOC requires 67 words for executable code.
   Procedure FLI$ALLOC requires 6 words of local(AUTO) storage.
PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:16   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:17   
          MINI XREF LISTING

APTR$
        15**DCL         8--PROC     5720<<ASSIGN
ASIZEW
        13**DCL         8--PROC     5681--IF       5697>>IF       5699>>ASSIGN   5707>>ASSIGN
CLEAN_RESULT
      5670**DCL      5686>>ASSIGN
CLEAN_RESULT.W2
      5671**DCL      5672--REDEF
FLI$RPT_ERR
      5585**DCL-ENT  5713--CALL
FREE_MEM
      5638**DCL      5683<>CALL
FREE_MEM.V
      5638**DCL      5638--DCLINIT
GET_MEM
      5619**DCL      5711<>CALL
GET_MEM.V
      5619**DCL      5619--DCLINIT
GET_MEM.V.SEGSIZE#
      5622**DCL      5710<<ASSIGN   5717>>ASSIGN
HAVE
      5592**DCL      5688<<ASSIGN   5708>>IF       5710>>ASSIGN   5717<<ASSIGN   5717>>ASSIGN
M$FDS
      5543**DCL-ENT  5683--CALL
M$GDS
      5543**DCL-ENT  5711--CALL
M$XXX
      5520**DCL-ENT  5714--CALL
NEED
      5599**DCL      5707<<ASSIGN   5708>>IF       5710>>ASSIGN   5721>>ASSIGN
RESULT
      5654**DCL      5619--DCLINIT  5638--DCLINIT  5686<<ASSIGN
PL6.E3A0      #001=FLI$ALLOC File=FLI$ALLOC.:E05TSI                              TUE 07/29/97 15:47 Page:18   
RESULT.PTR$
      5656**DCL      5716>>ASSIGN
RESULT.W2
      5655**DCL      5656--REDEF
SEGSTART$
      5591**DCL      5687<<ASSIGN   5716>>IF       5716<<ASSIGN   5720>>ASSIGN
USING
      5593**DCL      5689<<ASSIGN   5699<<ASSIGN   5699>>ASSIGN   5707>>ASSIGN   5720>>ASSIGN   5721<<ASSIGN

PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:19   
      111        1        /*T***********************************************************/
      112        2        /*T*                                                         */
      113        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      114        4        /*T*                                                         */
      115        5        /*T***********************************************************/
      116        6        FLI$ALLOC_BUF: PROC( BUF_, NBR_GRANS );
      117        7        /*F*  NAME: FLI$ALLOC_BUF
      118        8              PURPOSE: Allocates buffers for caller.
      119        9         ***/
      120       10
      121       11    1   DCL BUF_ BIT(72) ALIGNED;               /* Vector framing returned buffer     */
      122       12    1   DCL NBR_GRANS SBIN ALIGNED;        /* Number of grans needed if specified     */
      123       13
      124       14         /***
      125       15          *** INCLUDE
      126       16          ***/
      127       17
      128       18        %INCLUDE CP_6;
      129     5577        %INCLUDE FLI_DATA_R;
      130     6991
      131     6992         /***
      132     6993          *** ENTRY
      133     6994          ***/
      134     6995
      135     6996    1   DCL FLI$RPT_ERR ENTRY(5);
      136     6997
      137     6998         /***
      138     6999          *** STATIC
      139     7000          ***/
      140     7001
      141     7002    1   DCL SEGSTART$ PTR STATIC INIT(ADDR(NIL));
      142     7003    1   DCL HAVE SBIN STATIC INIT(0);           /* Number of words we have            */
      143     7004    1   DCL USING SBIN STATIC INIT(0);          /* Number of words we're using        */
      144     7005
      145     7006         /***
      146     7007          *** AUTO
      147     7008          ***/
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:20   
      148     7009
      149     7010    1   DCL NEED SBIN AUTO;                     /* Number of words needed             */
      150     7011    1   DCL BUFSIZEW SBIN AUTO;                 /* Buffer size in words               */
      151     7012
      152     7013         /***
      153     7014          *** FPT
      154     7015          ***/
      155     7016
      156     7017        %FPT_GDS( FPTN=GET_MEM,
      157     7018                  FREE=YES,
      158     7019                  PROTECTION=DSWRITE,
      159     7020                  RESULTS=RESULT );
      160     7036
      161     7037        %FPT_FDS( FPTN=FREE_MEM,
      162     7038                  RESULTS=RESULT,
      163     7039                  SEGSIZE="BITBIN('777777'O)" );
      164     7054
      165     7055        %VLP_VECTOR( FPTN=RESULT );
      166     7070
      167     7071        %VLP_VECTOR( FPTN=CLEAN_RESULT );
      168     7086
      169     7087        /****************************************/
      170     7088
      171     7089         /***
      172     7090          *** If no arguments, release memory.
      173     7091          ***/
      174     7092
      175     7093    1      IF ADDR(BUF_) = ADDR(NIL)
      176     7094    2       THEN DO;
      177     7095    2         CALL M$FDS( FREE_MEM )
      178     7096    3          WHENALTRETURN DO;
      179     7097    3            END;
      180     7098    2         RESULT = CLEAN_RESULT;
      181     7099    2         SEGSTART$ = ADDR(NIL);
      182     7100    2         HAVE = 0;
      183     7101    2         USING = 0;
      184     7102    2         RETURN;
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:21   
      185     7103    2         END;
      186     7104
      187     7105         /***
      188     7106          *** Calculate needed amount.
      189     7107          ***/
      190     7108
      191     7109    1      BUFSIZEW = NBR_GRANS * 1024;
      192     7110    1      NEED = USING + BUFSIZEW;
      193     7111
      194     7112         /***
      195     7113          *** If we need more, get it (in page increments).
      196     7114          ***/
      197     7115
      198     7116    1      IF NEED > HAVE
      199     7117    2       THEN DO;
      200     7118    2         GET_MEM.V.SEGSIZE# = ( (NEED - HAVE + 1023)/1024 )*1024;
      201     7119    2         CALL M$GDS( GET_MEM )
      202     7120    3          WHENALTRETURN DO;
      203     7121    3            CALL FLI$RPT_ERR( , );
      204     7122    3            CALL M$XXX; /*N* Probably should handle this more gracefully */
      205     7123    3            END;
      206     7124    2         IF SEGSTART$ = ADDR(NIL) THEN SEGSTART$ = RESULT.PTR$;
      207     7125    2         HAVE = HAVE + GET_MEM.V.SEGSIZE#;
      208     7126    2         END;
      209     7127
      210     7128    1      TVECTOR = RESULT;
      211     7129    1      TVECTOR.PTR$ = PINCRW( SEGSTART$, USING );
      212     7130    1      TVECTOR.W1.VSIZE# = BUFSIZEW * 4 - 1;
      213     7131    1      BUF_ = TVECTOR;
      214     7132    1      USING = NEED;
      215     7133    1      RETURN;
      216     7134
      217     7135    1   END FLI$ALLOC_BUF;
      218     7136        %EOD;

PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:22   
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   FLB_SUBS_C.:E05TOU  is referenced.
   FLI_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FLI$ALLOC_BUF.

   Procedure FLI$ALLOC_BUF requires 71 words for executable code.
   Procedure FLI$ALLOC_BUF requires 8 words of local(AUTO) storage.

PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:23   

 Object Unit name= FLI$ALLOC_BUF                              File name= FLI$ALLOC.:E05TOU
 UTS= JUL 29 '97 15:47:45.56 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$PRE_RET
    2   Data  even  none    26     32  FLI$ALLOC_BUF
    3   Proc  even  none    71    107  FLI$ALLOC_BUF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        2  FLI$ALLOC_BUF

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       5 FLI$RPT_ERR
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:24   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  TAPE_DCBLIST$                         SNVECLIST$
     TVECTOR                               DPLIST$                               DPRESLIST$
     DISK_FILE_SPEC$                       SPECCHARS                             EFTWORD
     M$PRE_RET                             RET_CMDS_NAME                         B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:25   


      111        1        /*T***********************************************************/
      112        2        /*T*                                                         */
      113        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      114        4        /*T*                                                         */
      115        5        /*T***********************************************************/
      116        6        FLI$ALLOC_BUF: PROC( BUF_, NBR_GRANS );

      6  3 000000   000000 700200 xent  FLI$ALLOC_B* TSX0  ! X66_AUTO_2
         3 000001   000010 000002                    ZERO    8,2

      117        7        /*F*  NAME: FLI$ALLOC_BUF
      118        8              PURPOSE: Allocates buffers for caller.
      119        9         ***/
      120       10
      121       11    1   DCL BUF_ BIT(72) ALIGNED;               /* Vector framing returned buffer     */
      122       12    1   DCL NBR_GRANS SBIN ALIGNED;        /* Number of grans needed if specified     */
      123       13
      124       14         /***
      125       15          *** INCLUDE
      126       16          ***/
      127       17
      128       18        %INCLUDE CP_6;
      129     5577        %INCLUDE FLI_DATA_R;
      130     6991
      131     6992         /***
      132     6993          *** ENTRY
      133     6994          ***/
      134     6995
      135     6996    1   DCL FLI$RPT_ERR ENTRY(5);
      136     6997
      137     6998         /***
      138     6999          *** STATIC
      139     7000          ***/
      140     7001
      141     7002    1   DCL SEGSTART$ PTR STATIC INIT(ADDR(NIL));
      142     7003    1   DCL HAVE SBIN STATIC INIT(0);           /* Number of words we have            */
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:26   
      143     7004    1   DCL USING SBIN STATIC INIT(0);          /* Number of words we're using        */
      144     7005
      145     7006         /***
      146     7007          *** AUTO
      147     7008          ***/
      148     7009
      149     7010    1   DCL NEED SBIN AUTO;                     /* Number of words needed             */
      150     7011    1   DCL BUFSIZEW SBIN AUTO;                 /* Buffer size in words               */
      151     7012
      152     7013         /***
      153     7014          *** FPT
      154     7015          ***/
      155     7016
      156     7017        %FPT_GDS( FPTN=GET_MEM,
      157     7018                  FREE=YES,
      158     7019                  PROTECTION=DSWRITE,
      159     7020                  RESULTS=RESULT );
      160     7036
      161     7037        %FPT_FDS( FPTN=FREE_MEM,
      162     7038                  RESULTS=RESULT,
      163     7039                  SEGSIZE="BITBIN('777777'O)" );
      164     7054
      165     7055        %VLP_VECTOR( FPTN=RESULT );
      166     7070
      167     7071        %VLP_VECTOR( FPTN=CLEAN_RESULT );
      168     7086
      169     7087        /****************************************/
      170     7088
      171     7089         /***
      172     7090          *** If no arguments, release memory.
      173     7091          ***/
      174     7092
      175     7093    1      IF ADDR(BUF_) = ADDR(NIL)

   7093  3 000002   200003 236100                    LDQ     @BUF_,,AUTO
         3 000003   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000004   000021 601000 3                  TNZ     s:7109
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:27   

      176     7094    2       THEN DO;

      177     7095    2         CALL M$FDS( FREE_MEM )

   7095  3 000005   000020 630400 2                  EPPR0   FREE_MEM
         3 000006   430002 713400                    CLIMB   alt,fds
         3 000007   400400 401760                    pmme    nvectors=2
         3 000010   000012 702000 3                  TSX2    s:7098
         3 000011   000012 710000 3                  TRA     s:7098

      178     7096    3          WHENALTRETURN DO;

      179     7097    3            END;

      180     7098    2         RESULT = CLEAN_RESULT;

   7098  3 000012   000030 237000 2                  LDAQ    CLEAN_RESULT
         3 000013   000026 757000 2                  STAQ    RESULT

      181     7099    2         SEGSTART$ = ADDR(NIL);

   7099  3 000014   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000015   000006 756000 2                  STQ     SEGSTART$

      182     7100    2         HAVE = 0;

   7100  3 000016   000007 450000 2                  STZ     HAVE

      183     7101    2         USING = 0;

   7101  3 000017   000010 450000 2                  STZ     USING

      184     7102    2         RETURN;

   7102  3 000020   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:28   
      185     7103    2         END;
      186     7104
      187     7105         /***
      188     7106          *** Calculate needed amount.
      189     7107          ***/
      190     7108
      191     7109    1      BUFSIZEW = NBR_GRANS * 1024;

   7109  3 000021   200004 470500                    LDP0    @NBR_GRANS,,AUTO
         3 000022   000000 235100                    LDA     0,,PR0
         3 000023   000012 735000                    ALS     10
         3 000024   200006 755100                    STA     BUFSIZEW,,AUTO

      192     7110    1      NEED = USING + BUFSIZEW;

   7110  3 000025   000010 236000 2                  LDQ     USING
         3 000026   200006 036100                    ADLQ    BUFSIZEW,,AUTO
         3 000027   200005 756100                    STQ     NEED,,AUTO

      193     7111
      194     7112         /***
      195     7113          *** If we need more, get it (in page increments).
      196     7114          ***/
      197     7115
      198     7116    1      IF NEED > HAVE

   7116  3 000030   000007 116000 2                  CMPQ    HAVE
         3 000031   000063 604400 3                  TMOZ    s:7128

      199     7117    2       THEN DO;

      200     7118    2         GET_MEM.V.SEGSIZE# = ( (NEED - HAVE + 1023)/1024 )*1024;

   7118  3 000032   000007 136000 2                  SBLQ    HAVE
         3 000033   001777 036007                    ADLQ    1023,DL
         3 000034   002000 506007                    DIV     1024,DL
         3 000035   000012 736000                    QLS     10
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:29   
         3 000036   000000 620006                    EAX0    0,QL
         3 000037   000016 440000 2                  SXL0    GET_MEM+4

      201     7119    2         CALL M$GDS( GET_MEM )

   7119  3 000040   000012 630400 2                  EPPR0   GET_MEM
         3 000041   430001 713400                    CLIMB   alt,gds
         3 000042   400400 401760                    pmme    nvectors=2
         3 000043   000045 702000 3                  TSX2    s:7121
         3 000044   000052 710000 3                  TRA     s:7124

      202     7120    3          WHENALTRETURN DO;

      203     7121    3            CALL FLI$RPT_ERR( , );

   7121  3 000045   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000046   000000 701000 xent               TSX1    FLI$RPT_ERR
         3 000047   000000 011000                    NOP     0

      204     7122    3            CALL M$XXX; /*N* Probably should handle this more gracefully */

   7122  3 000050   000003 713400                    CLIMB   3
         3 000051   000000 401760                    pmme    nvectors=0

      205     7123    3            END;

      206     7124    2         IF SEGSTART$ = ADDR(NIL) THEN SEGSTART$ = RESULT.PTR$;

   7124  3 000052   000006 236000 2                  LDQ     SEGSTART$
         3 000053   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000054   000057 601000 3                  TNZ     s:7125

   7124  3 000055   000027 236000 2                  LDQ     RESULT+1
         3 000056   000006 756000 2                  STQ     SEGSTART$

      207     7125    2         HAVE = HAVE + GET_MEM.V.SEGSIZE#;

PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:30   
   7125  3 000057   000016 236000 2                  LDQ     GET_MEM+4
         3 000060   777777 376007                    ANQ     -1,DL
         3 000061   000007 036000 2                  ADLQ    HAVE
         3 000062   000007 756000 2                  STQ     HAVE

      208     7126    2         END;

      209     7127
      210     7128    1      TVECTOR = RESULT;

   7128  3 000063   000026 237000 2                  LDAQ    RESULT
         3 000064   000000 757000 xsym               STAQ    TVECTOR

      211     7129    1      TVECTOR.PTR$ = PINCRW( SEGSTART$, USING );

   7129  3 000065   000010 236000 2                  LDQ     USING
         3 000066   000022 736000                    QLS     18
         3 000067   000006 036000 2                  ADLQ    SEGSTART$
         3 000070   000001 756000 xsym               STQ     TVECTOR+1

      212     7130    1      TVECTOR.W1.VSIZE# = BUFSIZEW * 4 - 1;

   7130  3 000071   200006 236100                    LDQ     BUFSIZEW,,AUTO
         3 000072   000002 736000                    QLS     2
         3 000073   000001 136007                    SBLQ    1,DL
         3 000074   000020 736000                    QLS     16
         3 000075   000000 676000 xsym               ERQ     TVECTOR
         3 000076   000034 376000 xsym               ANQ     B_VECTNIL+28
         3 000077   000000 656000 xsym               ERSQ    TVECTOR

      213     7131    1      BUF_ = TVECTOR;

   7131  3 000100   200003 470500                    LDP0    @BUF_,,AUTO
         3 000101   000000 237000 xsym               LDAQ    TVECTOR
         3 000102   000000 755100                    STA     0,,PR0
         3 000103   000001 756100                    STQ     1,,PR0

PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:31   
      214     7132    1      USING = NEED;

   7132  3 000104   200005 235100                    LDA     NEED,,AUTO
         3 000105   000010 755000 2                  STA     USING

      215     7133    1      RETURN;

   7133  3 000106   000000 702200 xent               TSX2  ! X66_ARET
      216     7134
      217     7135    1   END FLI$ALLOC_BUF;
      218     7136        %EOD;

PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:32   
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   FLB_SUBS_C.:E05TOU  is referenced.
   FLI_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FLI$ALLOC_BUF.
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:33   

 **** Variables and constants ****

  ****  Section 002  Data  FLI$ALLOC_BUF

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    30-0-0/d STRC(72)    r     1 CLEAN_RESULT              20-0-0/d STRC(216)   r     1 FREE_MEM
    12-0-0/d STRC(216)   r     1 GET_MEM                    7-0-0/w SBIN        r     1 HAVE
    26-0-0/d STRC(72)    r     1 RESULT                     6-0-0/w PTR         r     1 SEGSTART$
    10-0-0/w SBIN        r     1 USING

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @BUF_                      4-0-0/w PTR         r     1 @NBR_GRANS
     6-0-0/w SBIN        r     1 BUFSIZEW                  *0-0-0/w BIT (72)    r     1 BUF_
    *0-0-0/w SBIN        r     1 NBR_GRANS                  5-0-0/w SBIN        r     1 NEED

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 DISK_FILE_SPEC$            0-0-0/w PTR         r     1 DPLIST$
     0-0-0/w PTR         r     1 DPRESLIST$                 0-0-0/c ASTR(9)     r     1 RET_CMDS_NAME
     0-0-0/w PTR         r     1 SNVECLIST$                 0-0-0/w PTR         r     1 TAPE_DCBLIST$
     0-0-0/d STRC(72)    r     1 TVECTOR


   Procedure FLI$ALLOC_BUF requires 71 words for executable code.
   Procedure FLI$ALLOC_BUF requires 8 words of local(AUTO) storage.
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:34   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:35   
          MINI XREF LISTING

BUFSIZEW
      7011**DCL      7109<<ASSIGN   7110>>ASSIGN   7130>>ASSIGN
BUF_
        11**DCL         6--PROC     7093--IF       7131<<ASSIGN
CLEAN_RESULT
      7082**DCL      7098>>ASSIGN
CLEAN_RESULT.W2
      7083**DCL      7084--REDEF
DISK_CLOSE.SN_
      6188**DCL      6188--REDEF
DISK_CLOSE.UTL_
      6189**DCL      6189--REDEF
DISK_CLOSE.V.EXPIRE#
      6203**DCL      6203--REDEF
DISK_CLOSE.V.TYPE#
      6201**DCL      6201--REDEF
DISK_CLOSE.V.XTNSIZE#
      6198**DCL      6198--REDEF    6200--REDEF
DISK_FILE_SPEC.SPEC
      6553**DCL      6555--REDEF
DISK_FILE_SPEC.SPEC.START
      6554**DCL      6554--REDEF
DISK_FILE_SPEC.SPEC.STOP
      6555**DCL      6555--REDEF
DISK_FILE_SPEC$
      6552**DCL      6553--IMP-PTR
DISK_OPEN.ACSVEH_
      6053**DCL      6054--REDEF
DISK_OPEN.ALTKEYS_
      6059**DCL      6060--REDEF    6060--REDEF
DISK_OPEN.HDR_
      6058**DCL      6059--REDEF
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:36   
DISK_OPEN.TAB_
      6057**DCL      6058--REDEF
DISK_OPEN.UHL_
      6051**DCL      6052--REDEF    6052--REDEF
DISK_OPEN.V.FSN#
      6091**DCL      6091--REDEF    6091--REDEF
DISK_OPEN.WSN_
      6057**DCL      6057--REDEF
DISK_READ.STATION_
      6115**DCL      6116--REDEF
DISK_READ.V.DVBYTE.REREAD#
      6127**DCL      6127--REDEF
DISK_READ.V.INDX#
      6125**DCL      6125--REDEF
DISK_WRITE.STATION_
      6153**DCL      6153--REDEF
DISK_WRITE.V.DVBYTE.VFC#
      6160**DCL      6160--REDEF
DPLIST$
      6538**DCL      6550--IMP-PTR
DPRESLIST$
      6552**DCL      6552--IMP-PTR
EFTWORD
      6673**DCL      6673--REDEF
FLI$RPT_ERR
      6996**DCL-ENT  7121--CALL
FPT_EXIT.V.STEPCC#
      5978**DCL      5978--REDEF
FREE_MEM
      7050**DCL      7095<>CALL
FREE_MEM.V
      7050**DCL      7050--DCLINIT
GET_MEM
      7031**DCL      7119<>CALL
GET_MEM.V
      7031**DCL      7031--DCLINIT
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:37   
GET_MEM.V.SEGSIZE#
      7034**DCL      7118<<ASSIGN   7125>>ASSIGN
HAVE
      7003**DCL      7100<<ASSIGN   7116>>IF       7118>>ASSIGN   7125<<ASSIGN   7125>>ASSIGN
M$FDS
      5540**DCL-ENT  7095--CALL
M$GDS
      5540**DCL-ENT  7119--CALL
M$XXX
      5517**DCL-ENT  7122--CALL
NBR_GRANS
        12**DCL         6--PROC     7109>>ASSIGN
NEED
      7010**DCL      7110<<ASSIGN   7116>>IF       7118>>ASSIGN   7132>>ASSIGN
PRE_RET_CLOSE.SN_
      6916**DCL      6916--REDEF
PRE_RET_CLOSE.UTL_
      6917**DCL      6917--REDEF
PRE_RET_CLOSE.V.EXPIRE#
      6931**DCL      6931--REDEF
PRE_RET_CLOSE.V.TYPE#
      6929**DCL      6929--REDEF
PRE_RET_CLOSE.V.XTNSIZE#
      6926**DCL      6926--REDEF    6928--REDEF
PRE_RET_OPEN.ACSVEH_
      6851**DCL      6852--REDEF
PRE_RET_OPEN.ALTKEYS_
      6857**DCL      6858--REDEF    6858--REDEF
PRE_RET_OPEN.HDR_
      6856**DCL      6857--REDEF
PRE_RET_OPEN.TAB_
      6855**DCL      6856--REDEF
PRE_RET_OPEN.UHL_
      6849**DCL      6850--REDEF    6850--REDEF
PRE_RET_OPEN.V.FSN#
      6889**DCL      6889--REDEF    6889--REDEF
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:38   
PRE_RET_OPEN.WSN_
      6855**DCL      6855--REDEF
PRE_RET_READ.STATION_
      6706**DCL      6707--REDEF
PRE_RET_READ.V.DVBYTE.REREAD#
      6718**DCL      6718--REDEF
PRE_RET_READ.V.INDX#
      6716**DCL      6716--REDEF
PRE_RET_WRITE.STATION_
      6744**DCL      6744--REDEF
PRE_RET_WRITE.V.DVBYTE.VFC#
      6751**DCL      6751--REDEF
RESULT
      7066**DCL      7031--DCLINIT  7050--DCLINIT  7098<<ASSIGN   7128>>ASSIGN
RESULT.PTR$
      7068**DCL      7124>>ASSIGN
RESULT.W2
      7067**DCL      7068--REDEF
RET_CMDS_NAME.L#
      6960**DCL      6960--IMP-SIZ
SEGSTART$
      7002**DCL      7099<<ASSIGN   7124>>IF       7124<<ASSIGN   7129>>ASSIGN
SNVECLIST$
      6492**DCL      6492--IMP-PTR
SPEC.START
      6556**DCL      6557--REDEF
SPEC.STOP
      6557**DCL      6558--REDEF
SPECCHARS
      6556**DCL      6556--REDEF
TAPE_CLOSE.SN_
      6409**DCL      6409--REDEF
TAPE_CLOSE.UTL_
      6410**DCL      6410--REDEF
TAPE_CLOSE.V.EXPIRE#
      6424**DCL      6424--REDEF
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:39   
TAPE_CLOSE.V.TYPE#
      6422**DCL      6422--REDEF
TAPE_CLOSE.V.XTNSIZE#
      6419**DCL      6419--REDEF    6421--REDEF
TAPE_DCBLIST$
      5965**DCL      5965--IMP-PTR
TAPE_OPEN.ACSVEH_
      6274**DCL      6275--REDEF
TAPE_OPEN.ALTKEYS_
      6280**DCL      6281--REDEF    6281--REDEF
TAPE_OPEN.HDR_
      6279**DCL      6280--REDEF
TAPE_OPEN.TAB_
      6278**DCL      6279--REDEF
TAPE_OPEN.UHL_
      6272**DCL      6273--REDEF    6273--REDEF
TAPE_OPEN.V.FSN#
      6312**DCL      6312--REDEF    6312--REDEF
TAPE_OPEN.WSN_
      6278**DCL      6278--REDEF
TAPE_READ.STATION_
      6336**DCL      6337--REDEF
TAPE_READ.V.DVBYTE.REREAD#
      6348**DCL      6348--REDEF
TAPE_READ.V.INDX#
      6346**DCL      6346--REDEF
TAPE_WRITE.STATION_
      6374**DCL      6374--REDEF
TAPE_WRITE.V.DVBYTE.VFC#
      6381**DCL      6381--REDEF
TVECTOR
      6504**DCL      7128<<ASSIGN   7131>>ASSIGN
TVECTOR.PTR$
      6506**DCL      7129<<ASSIGN
TVECTOR.W1.VSIZE#
      6504**DCL      7130<<ASSIGN
PL6.E3A0      #002=FLI$ALLOC_BUF File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:47 Page:40   
TVECTOR.W2
      6505**DCL      6506--REDEF
USING
      7004**DCL      7101<<ASSIGN   7110>>ASSIGN   7129>>ASSIGN   7132<<ASSIGN

PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:41   
      219        1        /*T***********************************************************/
      220        2        /*T*                                                         */
      221        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      222        4        /*T*                                                         */
      223        5        /*T***********************************************************/
      224        6        FLI$RETURN_BUF: PROC( BIX );
      225        7        /*F*  NAME: FLI$RETURN_BUF
      226        8              PURPOSE: Return buffer to free pool.
      227        9         */
      228       10
      229       11    1   DCL BIX SBIN ALIGNED;                   /* Buffer index                       */
      230       12
      231       13         /***
      232       14          *** INCLUDE
      233       15          ***/
      234       16
      235       17        %INCLUDE CP_6;
      236     5576        %INCLUDE FLI_DATA_R;
      237     6990        %INCLUDE FLE_DATA_R;
      238    12941
      239    12942         /***
      240    12943          *** ENTRY
      241    12944          ***/
      242    12945
      243    12946    1   DCL FLI$RPT_ERR ENTRY(5);
      244    12947
      245    12948        /****************************************/
      246    12949
      247    12950    1      IF NOT OUTSTANDING_IO.RELEASED(BIX)
      248    12951    2       THEN DO;
      249    12952    2         CALL FLI$RPT_ERR( E_IE_FRB,  );
      250    12953    2         CALL M$XXX;
      251    12954    2         END;
      252    12955
      253    12956    2      DO INHIBIT;
      254    12957    2         OUTSTANDING_IO.RELEASED(BIX) = '0'B;
      255    12958    2         OUTSTANDING_IO.NEXT_IX(BIX) = LAST_FREE_IX;
PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:42   
      256    12959    2         LAST_FREE_IX = BIX;
      257    12960    2         END;
      258    12961
      259    12962    1      RETURN;
      260    12963
      261    12964    1   END FLI$RETURN_BUF;
      262    12965        %EOD;

PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:43   
--  Include file information  --

   FL_PERR_C.:E05TOU  is referenced.
   FLE_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   FLB_SUBS_C.:E05TOU  is referenced.
   FLI_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FLI$RETURN_BUF.

   Procedure FLI$RETURN_BUF requires 30 words for executable code.
   Procedure FLI$RETURN_BUF requires 4 words of local(AUTO) storage.

PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:44   

 Object Unit name= FLI$RETURN_BUF                             File name= FLI$ALLOC.:E05TOU
 UTS= JUL 29 '97 15:48:05.24 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$PRE_RET
    2   Data  even  none     6      6  FLI$RETURN_BUF
    3   Proc  even  none    30     36  FLI$RETURN_BUF
    4  RoData even  none     2      2  FLI$RETURN_BUF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        1  FLI$RETURN_BUF

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       5 FLI$RPT_ERR
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:45   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  TAPE_DCBLIST$                         SNVECLIST$
     LAST_FREE_IX                          OUTSTANDING_IO                        DPLIST$
     DPRESLIST$                            DISK_FILE_SPEC$                       SPECCHARS
     EFTWORD                               M$PRE_RET                             RET_CMDS_NAME
r    E_IE_FRB                              B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:46   


      219        1        /*T***********************************************************/
      220        2        /*T*                                                         */
      221        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      222        4        /*T*                                                         */
      223        5        /*T***********************************************************/
      224        6        FLI$RETURN_BUF: PROC( BIX );

      6  3 000000   000000 700200 xent  FLI$RETURN_* TSX0  ! X66_AUTO_1
         3 000001   000004 000001                    ZERO    4,1

      225        7        /*F*  NAME: FLI$RETURN_BUF
      226        8              PURPOSE: Return buffer to free pool.
      227        9         */
      228       10
      229       11    1   DCL BIX SBIN ALIGNED;                   /* Buffer index                       */
      230       12
      231       13         /***
      232       14          *** INCLUDE
      233       15          ***/
      234       16
      235       17        %INCLUDE CP_6;
      236     5576        %INCLUDE FLI_DATA_R;
      237     6990        %INCLUDE FLE_DATA_R;
      238    12941
      239    12942         /***
      240    12943          *** ENTRY
      241    12944          ***/
      242    12945
      243    12946    1   DCL FLI$RPT_ERR ENTRY(5);
      244    12947
      245    12948        /****************************************/
      246    12949
      247    12950    1      IF NOT OUTSTANDING_IO.RELEASED(BIX)

  12950  3 000002   200003 470500                    LDP0    @BIX,,AUTO
         3 000003   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:47   
         3 000004   000003 402007                    MPY     3,DL
         3 000005   000001 736000                    QLS     1
         3 000006   000002 236006 xsym               LDQ     OUTSTANDING_IO+2,QL
         3 000007   000002 316007                    CANQ    2,DL
         3 000010   000017 601000 3                  TNZ     s:12957

      248    12951    2       THEN DO;

      249    12952    2         CALL FLI$RPT_ERR( E_IE_FRB,  );

  12952  3 000011   000000 630400 4                  EPPR0   0
         3 000012   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000013   000000 701000 xent               TSX1    FLI$RPT_ERR
         3 000014   000000 011000                    NOP     0

      250    12953    2         CALL M$XXX;

  12953  3 000015   000003 713400                    CLIMB   3
         3 000016   000000 401760                    pmme    nvectors=0

      251    12954    2         END;

      252    12955
      253    12956    2      DO INHIBIT;

      254    12957    2         OUTSTANDING_IO.RELEASED(BIX) = '0'B;

  12957  3 000017   200003 470700                    LDP0  ! @BIX,,AUTO
         3 000020   000000 236300                    LDQ   ! 0,,PR0
         3 000021   000003 402207                    MPY   ! 3,DL
         3 000022   000001 736200                    QLS   ! 1
         3 000023   000000 620206                    EAX0  ! 0,QL
         3 000024   000001 236200 4                  LDQ   ! 1
         3 000025   000002 356210 xsym               ANSQ  ! OUTSTANDING_IO+2,X0

      255    12958    2         OUTSTANDING_IO.NEXT_IX(BIX) = LAST_FREE_IX;

PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:48   
  12958  3 000026   000000 236300                    LDQ   ! 0,,PR0
         3 000027   000003 402207                    MPY   ! 3,DL
         3 000030   000001 736200                    QLS   ! 1
         3 000031   000000 235200 xsym               LDA   ! LAST_FREE_IX
         3 000032   000004 755206 xsym               STA   ! OUTSTANDING_IO+4,QL

      256    12959    2         LAST_FREE_IX = BIX;

  12959  3 000033   000000 235300                    LDA   ! 0,,PR0
         3 000034   000000 755200 xsym               STA   ! LAST_FREE_IX

      257    12960    2         END;

      258    12961
      259    12962    1      RETURN;

  12962  3 000035   000000 702200 xent               TSX2  ! X66_ARET
      260    12963
      261    12964    1   END FLI$RETURN_BUF;
      262    12965        %EOD;

PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:49   
--  Include file information  --

   FL_PERR_C.:E05TOU  is referenced.
   FLE_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   FLB_SUBS_C.:E05TOU  is referenced.
   FLI_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FLI$RETURN_BUF.
PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:50   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @BIX                      *0-0-0/w SBIN        r     1 BIX

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 DISK_FILE_SPEC$            0-0-0/w PTR         r     1 DPLIST$
     0-0-0/w PTR         r     1 DPRESLIST$                 0-0-0/w STRC        r     1 E_IE_FRB
     0-0-0/w SBIN        r     1 LAST_FREE_IX
     0-0-0/d STRC(216)   r     1 OUTSTANDING_IO(0:8191)
     0-0-0/c ASTR(9)     r     1 RET_CMDS_NAME              0-0-0/w PTR         r     1 SNVECLIST$
     0-0-0/w PTR         r     1 TAPE_DCBLIST$


   Procedure FLI$RETURN_BUF requires 30 words for executable code.
   Procedure FLI$RETURN_BUF requires 4 words of local(AUTO) storage.
PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:51   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:52   
          MINI XREF LISTING

BIX
        11**DCL         6--PROC    12950>>IF      12957>>ASSIGN  12958>>ASSIGN  12959>>ASSIGN
DISK_CLOSE.SN_
      6187**DCL      6187--REDEF
DISK_CLOSE.UTL_
      6188**DCL      6188--REDEF
DISK_CLOSE.V.EXPIRE#
      6202**DCL      6202--REDEF
DISK_CLOSE.V.TYPE#
      6200**DCL      6200--REDEF
DISK_CLOSE.V.XTNSIZE#
      6197**DCL      6197--REDEF    6199--REDEF
DISK_FILE_SPEC.SPEC
      6552**DCL      6554--REDEF
DISK_FILE_SPEC.SPEC.START
      6553**DCL      6553--REDEF
DISK_FILE_SPEC.SPEC.STOP
      6554**DCL      6554--REDEF
DISK_FILE_SPEC$
      6551**DCL      6552--IMP-PTR
DISK_OPEN.ACSVEH_
      6052**DCL      6053--REDEF
DISK_OPEN.ALTKEYS_
      6058**DCL      6059--REDEF    6059--REDEF
DISK_OPEN.HDR_
      6057**DCL      6058--REDEF
DISK_OPEN.TAB_
      6056**DCL      6057--REDEF
DISK_OPEN.UHL_
      6050**DCL      6051--REDEF    6051--REDEF
DISK_OPEN.V.FSN#
      6090**DCL      6090--REDEF    6090--REDEF
PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:53   
DISK_OPEN.WSN_
      6056**DCL      6056--REDEF
DISK_READ.STATION_
      6114**DCL      6115--REDEF
DISK_READ.V.DVBYTE.REREAD#
      6126**DCL      6126--REDEF
DISK_READ.V.INDX#
      6124**DCL      6124--REDEF
DISK_WRITE.STATION_
      6152**DCL      6152--REDEF
DISK_WRITE.V.DVBYTE.VFC#
      6159**DCL      6159--REDEF
DPLIST$
      6537**DCL      6549--IMP-PTR
DPRESLIST$
      6551**DCL      6551--IMP-PTR
EFTWORD
      6672**DCL      6672--REDEF
E_IE_FRB
      7237**DCL     12952<>CALL
FLI$RPT_ERR
     12946**DCL-ENT 12952--CALL
FPT_EXIT.V.STEPCC#
      5977**DCL      5977--REDEF
LAST_FREE_IX
      6508**DCL     12958>>ASSIGN  12959<<ASSIGN
M$XXX
      5516**DCL-ENT 12953--CALL
OUTSTANDING_IO.NEXT_IX
      6515**DCL     12958<<ASSIGN
OUTSTANDING_IO.RELEASED
      6514**DCL     12950>>IF      12957<<ASSIGN
PRE_RET_CLOSE.SN_
      6915**DCL      6915--REDEF
PRE_RET_CLOSE.UTL_
      6916**DCL      6916--REDEF
PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:54   
PRE_RET_CLOSE.V.EXPIRE#
      6930**DCL      6930--REDEF
PRE_RET_CLOSE.V.TYPE#
      6928**DCL      6928--REDEF
PRE_RET_CLOSE.V.XTNSIZE#
      6925**DCL      6925--REDEF    6927--REDEF
PRE_RET_OPEN.ACSVEH_
      6850**DCL      6851--REDEF
PRE_RET_OPEN.ALTKEYS_
      6856**DCL      6857--REDEF    6857--REDEF
PRE_RET_OPEN.HDR_
      6855**DCL      6856--REDEF
PRE_RET_OPEN.TAB_
      6854**DCL      6855--REDEF
PRE_RET_OPEN.UHL_
      6848**DCL      6849--REDEF    6849--REDEF
PRE_RET_OPEN.V.FSN#
      6888**DCL      6888--REDEF    6888--REDEF
PRE_RET_OPEN.WSN_
      6854**DCL      6854--REDEF
PRE_RET_READ.STATION_
      6705**DCL      6706--REDEF
PRE_RET_READ.V.DVBYTE.REREAD#
      6717**DCL      6717--REDEF
PRE_RET_READ.V.INDX#
      6715**DCL      6715--REDEF
PRE_RET_WRITE.STATION_
      6743**DCL      6743--REDEF
PRE_RET_WRITE.V.DVBYTE.VFC#
      6750**DCL      6750--REDEF
RET_CMDS_NAME.L#
      6959**DCL      6959--IMP-SIZ
SNVECLIST$
      6491**DCL      6491--IMP-PTR
SPEC.START
      6555**DCL      6556--REDEF
PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:55   
SPEC.STOP
      6556**DCL      6557--REDEF
SPECCHARS
      6555**DCL      6555--REDEF
TAPE_CLOSE.SN_
      6408**DCL      6408--REDEF
TAPE_CLOSE.UTL_
      6409**DCL      6409--REDEF
TAPE_CLOSE.V.EXPIRE#
      6423**DCL      6423--REDEF
TAPE_CLOSE.V.TYPE#
      6421**DCL      6421--REDEF
TAPE_CLOSE.V.XTNSIZE#
      6418**DCL      6418--REDEF    6420--REDEF
TAPE_DCBLIST$
      5964**DCL      5964--IMP-PTR
TAPE_OPEN.ACSVEH_
      6273**DCL      6274--REDEF
TAPE_OPEN.ALTKEYS_
      6279**DCL      6280--REDEF    6280--REDEF
TAPE_OPEN.HDR_
      6278**DCL      6279--REDEF
TAPE_OPEN.TAB_
      6277**DCL      6278--REDEF
TAPE_OPEN.UHL_
      6271**DCL      6272--REDEF    6272--REDEF
TAPE_OPEN.V.FSN#
      6311**DCL      6311--REDEF    6311--REDEF
TAPE_OPEN.WSN_
      6277**DCL      6277--REDEF
TAPE_READ.STATION_
      6335**DCL      6336--REDEF
TAPE_READ.V.DVBYTE.REREAD#
      6347**DCL      6347--REDEF
TAPE_READ.V.INDX#
      6345**DCL      6345--REDEF
PL6.E3A0      #003=FLI$RETURN_BUF File=FLI$ALLOC.:E05TSI                         TUE 07/29/97 15:48 Page:56   
TAPE_WRITE.STATION_
      6373**DCL      6373--REDEF
TAPE_WRITE.V.DVBYTE.VFC#
      6380**DCL      6380--REDEF
TVECTOR.W2
      6504**DCL      6505--REDEF

PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:57   
      263        1        /*T***********************************************************/
      264        2        /*T*                                                         */
      265        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      266        4        /*T*                                                         */
      267        5        /*T***********************************************************/
      268        6        FLI$GET_FREE_BUF: PROC( BUF_, BIX );
      269        7        /*F*  NAME: FLI$GET_FREE_BUF
      270        8              PURPOSE: Get a free buffer from the buffer pool.
      271        9         */
      272       10
      273       11    1   DCL BUF_ BIT(72) DALIGNED;              /* Frames buffer                      */
      274       12    1   DCL BIX SBIN ALIGNED;                   /* Buffer index                       */
      275       13
      276       14         /***
      277       15          *** INCLUDE
      278       16          ***/
      279       17
      280       18        %INCLUDE CP_6;
      281     5577        %INCLUDE FLI_DATA_R;
      282     6991
      283     6992         /***
      284     6993          *** ENTRY
      285     6994          ***/
      286     6995
      287     6996    1   DCL FLI$FREE_SPIN ENTRY;
      288     6997
      289     6998        /****************************************/
      290     6999
      291     7000    2      DO INHIBIT;
      292     7001    3         DO WHILE( LAST_FREE_IX = 0 );
      293     7002             /*** FLI$FREE_SPIN is not inhibited but in this loop, effect is same ***/
      294     7003    3            CALL FLI$FREE_SPIN;
      295     7004    3            END;
      296     7005    2         BUF_ = OUTSTANDING_IO.BUF_(LAST_FREE_IX);
      297     7006    2         BIX = LAST_FREE_IX;
      298     7007    2         OUTSTANDING_IO.RELEASED(LAST_FREE_IX) = '1'B;
      299     7008    2         LAST_FREE_IX = OUTSTANDING_IO.NEXT_IX(LAST_FREE_IX);
PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:58   
      300     7009    2         END;
      301     7010
      302     7011    1      RETURN;
      303     7012
      304     7013    1   END FLI$GET_FREE_BUF;
      305     7014        %EOD;

PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:59   
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   FLB_SUBS_C.:E05TOU  is referenced.
   FLI_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FLI$GET_FREE_BUF.

   Procedure FLI$GET_FREE_BUF requires 25 words for executable code.
   Procedure FLI$GET_FREE_BUF requires 6 words of local(AUTO) storage.

PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:60   

 Object Unit name= FLI$GET_FREE_BUF                           File name= FLI$ALLOC.:E05TOU
 UTS= JUL 29 '97 15:48:38.28 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$PRE_RET
    2   Data  even  none     6      6  FLI$GET_FREE_BUF
    3   Proc  even  none    25     31  FLI$GET_FREE_BUF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        2  FLI$GET_FREE_BUF

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 FLI$FREE_SPIN
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:61   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  TAPE_DCBLIST$                         SNVECLIST$
     LAST_FREE_IX                          OUTSTANDING_IO                        DPLIST$
     DPRESLIST$                            DISK_FILE_SPEC$                       SPECCHARS
     EFTWORD                               M$PRE_RET                             RET_CMDS_NAME
     B_VECTNIL
PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:62   


      263        1        /*T***********************************************************/
      264        2        /*T*                                                         */
      265        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      266        4        /*T*                                                         */
      267        5        /*T***********************************************************/
      268        6        FLI$GET_FREE_BUF: PROC( BUF_, BIX );

      6  3 000000   000000 700200 xent  FLI$GET_FRE* TSX0  ! X66_AUTO_2
         3 000001   000006 000002                    ZERO    6,2

      269        7        /*F*  NAME: FLI$GET_FREE_BUF
      270        8              PURPOSE: Get a free buffer from the buffer pool.
      271        9         */
      272       10
      273       11    1   DCL BUF_ BIT(72) DALIGNED;              /* Frames buffer                      */
      274       12    1   DCL BIX SBIN ALIGNED;                   /* Buffer index                       */
      275       13
      276       14         /***
      277       15          *** INCLUDE
      278       16          ***/
      279       17
      280       18        %INCLUDE CP_6;
      281     5577        %INCLUDE FLI_DATA_R;
      282     6991
      283     6992         /***
      284     6993          *** ENTRY
      285     6994          ***/
      286     6995
      287     6996    1   DCL FLI$FREE_SPIN ENTRY;
      288     6997
      289     6998        /****************************************/
      290     6999
      291     7000    2      DO INHIBIT;

      292     7001    3         DO WHILE( LAST_FREE_IX = 0 );

PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:63   
   7001  3 000002   000000 235200 xsym               LDA   ! LAST_FREE_IX
         3 000003   000011 601200 3                  TNZ   ! s:7005

      293     7002             /*** FLI$FREE_SPIN is not inhibited but in this loop, effect is same ***/
      294     7003    3            CALL FLI$FREE_SPIN;

   7003  3 000004   000002 631600 xsym               EPPR1 ! B_VECTNIL+2
         3 000005   000000 701200 xent               TSX1  ! FLI$FREE_SPIN
         3 000006   000000 011200                    NOP   ! 0

      295     7004    3            END;

   7004  3 000007   000000 235200 xsym               LDA   ! LAST_FREE_IX
         3 000010   000004 600200 3                  TZE   ! s:7003

      296     7005    2         BUF_ = OUTSTANDING_IO.BUF_(LAST_FREE_IX);

   7005  3 000011   000000 236200 xsym               LDQ   ! LAST_FREE_IX
         3 000012   000006 402207                    MPY   ! 6,DL
         3 000013   000000 237206 xsym               LDAQ  ! OUTSTANDING_IO,QL
         3 000014   200003 470700                    LDP0  ! @BUF_,,AUTO
         3 000015   000000 757300                    STAQ  ! 0,,PR0

      297     7006    2         BIX = LAST_FREE_IX;

   7006  3 000016   200004 471700                    LDP1  ! @BIX,,AUTO
         3 000017   000000 235200 xsym               LDA   ! LAST_FREE_IX
         3 000020   100000 755300                    STA   ! 0,,PR1

      298     7007    2         OUTSTANDING_IO.RELEASED(LAST_FREE_IX) = '1'B;

   7007  3 000021   000000 236200 xsym               LDQ   ! LAST_FREE_IX
         3 000022   000006 402207                    MPY   ! 6,DL
         3 000023   000000 620206                    EAX0  ! 0,QL
         3 000024   000002 236207                    LDQ   ! 2,DL
         3 000025   000002 256210 xsym               ORSQ  ! OUTSTANDING_IO+2,X0

PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:64   
      299     7008    2         LAST_FREE_IX = OUTSTANDING_IO.NEXT_IX(LAST_FREE_IX);

   7008  3 000026   000004 235210 xsym               LDA   ! OUTSTANDING_IO+4,X0
         3 000027   000000 755200 xsym               STA   ! LAST_FREE_IX

      300     7009    2         END;

      301     7010
      302     7011    1      RETURN;

   7011  3 000030   000000 702200 xent               TSX2  ! X66_ARET
      303     7012
      304     7013    1   END FLI$GET_FREE_BUF;
      305     7014        %EOD;

PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:65   
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   FLB_SUBS_C.:E05TOU  is referenced.
   FLI_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FLI$GET_FREE_BUF.
PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:66   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @BIX                       3-0-0/w PTR         r     1 @BUF_
    *0-0-0/w SBIN        r     1 BIX                       *0-0-0/d BIT (72)    r     1 BUF_

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 DISK_FILE_SPEC$            0-0-0/w PTR         r     1 DPLIST$
     0-0-0/w PTR         r     1 DPRESLIST$                 0-0-0/w SBIN        r     1 LAST_FREE_IX
     0-0-0/d STRC(216)   r     1 OUTSTANDING_IO(0:8191)
     0-0-0/c ASTR(9)     r     1 RET_CMDS_NAME              0-0-0/w PTR         r     1 SNVECLIST$
     0-0-0/w PTR         r     1 TAPE_DCBLIST$


   Procedure FLI$GET_FREE_BUF requires 25 words for executable code.
   Procedure FLI$GET_FREE_BUF requires 6 words of local(AUTO) storage.
PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:67   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:68   
          MINI XREF LISTING

BIX
        12**DCL         6--PROC     7006<<ASSIGN
BUF_
        11**DCL         6--PROC     7005<<ASSIGN
DISK_CLOSE.SN_
      6188**DCL      6188--REDEF
DISK_CLOSE.UTL_
      6189**DCL      6189--REDEF
DISK_CLOSE.V.EXPIRE#
      6203**DCL      6203--REDEF
DISK_CLOSE.V.TYPE#
      6201**DCL      6201--REDEF
DISK_CLOSE.V.XTNSIZE#
      6198**DCL      6198--REDEF    6200--REDEF
DISK_FILE_SPEC.SPEC
      6553**DCL      6555--REDEF
DISK_FILE_SPEC.SPEC.START
      6554**DCL      6554--REDEF
DISK_FILE_SPEC.SPEC.STOP
      6555**DCL      6555--REDEF
DISK_FILE_SPEC$
      6552**DCL      6553--IMP-PTR
DISK_OPEN.ACSVEH_
      6053**DCL      6054--REDEF
DISK_OPEN.ALTKEYS_
      6059**DCL      6060--REDEF    6060--REDEF
DISK_OPEN.HDR_
      6058**DCL      6059--REDEF
DISK_OPEN.TAB_
      6057**DCL      6058--REDEF
DISK_OPEN.UHL_
      6051**DCL      6052--REDEF    6052--REDEF
PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:69   
DISK_OPEN.V.FSN#
      6091**DCL      6091--REDEF    6091--REDEF
DISK_OPEN.WSN_
      6057**DCL      6057--REDEF
DISK_READ.STATION_
      6115**DCL      6116--REDEF
DISK_READ.V.DVBYTE.REREAD#
      6127**DCL      6127--REDEF
DISK_READ.V.INDX#
      6125**DCL      6125--REDEF
DISK_WRITE.STATION_
      6153**DCL      6153--REDEF
DISK_WRITE.V.DVBYTE.VFC#
      6160**DCL      6160--REDEF
DPLIST$
      6538**DCL      6550--IMP-PTR
DPRESLIST$
      6552**DCL      6552--IMP-PTR
EFTWORD
      6673**DCL      6673--REDEF
FLI$FREE_SPIN
      6996**DCL-ENT  7003--CALL
FPT_EXIT.V.STEPCC#
      5978**DCL      5978--REDEF
LAST_FREE_IX
      6509**DCL      7001>>DOWHILE  7005>>ASSIGN   7006>>ASSIGN   7007>>ASSIGN   7008<<ASSIGN   7008>>ASSIGN
OUTSTANDING_IO.BUF_
      6515**DCL      7005>>ASSIGN
OUTSTANDING_IO.NEXT_IX
      6516**DCL      7008>>ASSIGN
OUTSTANDING_IO.RELEASED
      6515**DCL      7007<<ASSIGN
PRE_RET_CLOSE.SN_
      6916**DCL      6916--REDEF
PRE_RET_CLOSE.UTL_
      6917**DCL      6917--REDEF
PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:70   
PRE_RET_CLOSE.V.EXPIRE#
      6931**DCL      6931--REDEF
PRE_RET_CLOSE.V.TYPE#
      6929**DCL      6929--REDEF
PRE_RET_CLOSE.V.XTNSIZE#
      6926**DCL      6926--REDEF    6928--REDEF
PRE_RET_OPEN.ACSVEH_
      6851**DCL      6852--REDEF
PRE_RET_OPEN.ALTKEYS_
      6857**DCL      6858--REDEF    6858--REDEF
PRE_RET_OPEN.HDR_
      6856**DCL      6857--REDEF
PRE_RET_OPEN.TAB_
      6855**DCL      6856--REDEF
PRE_RET_OPEN.UHL_
      6849**DCL      6850--REDEF    6850--REDEF
PRE_RET_OPEN.V.FSN#
      6889**DCL      6889--REDEF    6889--REDEF
PRE_RET_OPEN.WSN_
      6855**DCL      6855--REDEF
PRE_RET_READ.STATION_
      6706**DCL      6707--REDEF
PRE_RET_READ.V.DVBYTE.REREAD#
      6718**DCL      6718--REDEF
PRE_RET_READ.V.INDX#
      6716**DCL      6716--REDEF
PRE_RET_WRITE.STATION_
      6744**DCL      6744--REDEF
PRE_RET_WRITE.V.DVBYTE.VFC#
      6751**DCL      6751--REDEF
RET_CMDS_NAME.L#
      6960**DCL      6960--IMP-SIZ
SNVECLIST$
      6492**DCL      6492--IMP-PTR
SPEC.START
      6556**DCL      6557--REDEF
PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:71   
SPEC.STOP
      6557**DCL      6558--REDEF
SPECCHARS
      6556**DCL      6556--REDEF
TAPE_CLOSE.SN_
      6409**DCL      6409--REDEF
TAPE_CLOSE.UTL_
      6410**DCL      6410--REDEF
TAPE_CLOSE.V.EXPIRE#
      6424**DCL      6424--REDEF
TAPE_CLOSE.V.TYPE#
      6422**DCL      6422--REDEF
TAPE_CLOSE.V.XTNSIZE#
      6419**DCL      6419--REDEF    6421--REDEF
TAPE_DCBLIST$
      5965**DCL      5965--IMP-PTR
TAPE_OPEN.ACSVEH_
      6274**DCL      6275--REDEF
TAPE_OPEN.ALTKEYS_
      6280**DCL      6281--REDEF    6281--REDEF
TAPE_OPEN.HDR_
      6279**DCL      6280--REDEF
TAPE_OPEN.TAB_
      6278**DCL      6279--REDEF
TAPE_OPEN.UHL_
      6272**DCL      6273--REDEF    6273--REDEF
TAPE_OPEN.V.FSN#
      6312**DCL      6312--REDEF    6312--REDEF
TAPE_OPEN.WSN_
      6278**DCL      6278--REDEF
TAPE_READ.STATION_
      6336**DCL      6337--REDEF
TAPE_READ.V.DVBYTE.REREAD#
      6348**DCL      6348--REDEF
TAPE_READ.V.INDX#
      6346**DCL      6346--REDEF
PL6.E3A0      #004=FLI$GET_FREE_BUF File=FLI$ALLOC.:E05TSI                       TUE 07/29/97 15:48 Page:72   
TAPE_WRITE.STATION_
      6374**DCL      6374--REDEF
TAPE_WRITE.V.DVBYTE.VFC#
      6381**DCL      6381--REDEF
TVECTOR.W2
      6505**DCL      6506--REDEF

PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:73   
      306        1        /*T***********************************************************/
      307        2        /*T*                                                         */
      308        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      309        4        /*T*                                                         */
      310        5        /*T***********************************************************/
      311        6        FLI$FREE_SPIN: PROC;
      312        7        /*F*  NAME: FLI$FREE_SPIN
      313        8              PURPOSE: Wait until next buffer is free.
      314        9         */
      315       10
      316       11         /***
      317       12          *** INCLUDE
      318       13          ***/
      319       14
      320       15        %INCLUDE CP_6;
      321     5574        %INCLUDE FLI_DATA_R;
      322     6988        %INCLUDE XUD_UTS_M;
      323     7070
      324     7071         /***
      325     7072          *** ENTRY
      326     7073          ***/
      327     7074
      328     7075    1   DCL FLI$SPIN_CHK ENTRY(2);
      329     7076        %XUD$UTS_ENTRIES;
      330     7108
      331     7109         /***
      332     7110          *** AUTO
      333     7111          ***/
      334     7112
      335     7113    1   DCL IO_WAIT_UTS UBIN WORD AUTO;
      336     7114    1   DCL SPIN SBIN AUTO;
      337     7115    1   DCL TEMP SBIN AUTO;
      338     7116
      339     7117
      340     7118        /******************************/
      341     7119
      342     7120         /***
PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:74   
      343     7121          *** Get the current time so we'll be able to tell when we've
      344     7122          *** spun too long.
      345     7123          ***/
      346     7124
      347     7125    1      CALL M$TIME( GET_NOW_UTS );
      348     7126    1      IO_WAIT_UTS = NOW_UTS;
      349     7127
      350     7128    1      SPIN = 0;
      351     7129    2      DO WHILE( LAST_FREE_IX = 0 );
      352     7130    2         SPIN = SPIN + 1;
      353     7131    2         IF SPIN >= 100000            /* Just to keep from doing to many M$TIMEs */
      354     7132    3          THEN DO;
      355     7133    3            SPIN = 0;
      356     7134    3            CALL FLI$SPIN_CHK( IO_WAIT_UTS, );
      357     7135    3            END;
      358     7136    2         END;
      359     7137
      360     7138    1      CALL M$TIME( GET_NOW_UTS );
      361     7139    1      CALL XUD$UTS_DIFF(TEMP,NOW_UTS,IO_WAIT_UTS);
      362     7140    1      ACCUMULATED_SPIN_TIME = ACCUMULATED_SPIN_TIME + TEMP;
      363     7141
      364     7142    1      RETURN;
      365     7143
      366     7144    1   END FLI$FREE_SPIN;

PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:75   
--  Include file information  --

   XUD_UTS_M.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   FLB_SUBS_C.:E05TOU  is referenced.
   FLI_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FLI$FREE_SPIN.

   Procedure FLI$FREE_SPIN requires 40 words for executable code.
   Procedure FLI$FREE_SPIN requires 10 words of local(AUTO) storage.

    No errors detected in file FLI$ALLOC.:E05TSI    .

PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:76   

 Object Unit name= FLI$FREE_SPIN                              File name= FLI$ALLOC.:E05TOU
 UTS= JUL 29 '97 15:48:56.68 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$PRE_RET
    2   Data  even  none     6      6  FLI$FREE_SPIN
    3   Proc  even  none    40     50  FLI$FREE_SPIN
    4  RoData even  none     1      1  FLI$FREE_SPIN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        0  FLI$FREE_SPIN

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 FLI$SPIN_CHK
 yes     yes           Std       3 XUD$UTS_DIFF
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:77   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  TAPE_DCBLIST$                         SNVECLIST$
     LAST_FREE_IX                          NOW_UTS                               GET_NOW_UTS
     ACCUMULATED_SPIN_TIME                 DPLIST$                               DPRESLIST$
     DISK_FILE_SPEC$                       SPECCHARS                             EFTWORD
     M$PRE_RET                             RET_CMDS_NAME                         B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:78   


      306        1        /*T***********************************************************/
      307        2        /*T*                                                         */
      308        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      309        4        /*T*                                                         */
      310        5        /*T***********************************************************/
      311        6        FLI$FREE_SPIN: PROC;

      6  3 000000   000000 700200 xent  FLI$FREE_SP* TSX0  ! X66_AUTO_0
         3 000001   000012 000000                    ZERO    10,0

      312        7        /*F*  NAME: FLI$FREE_SPIN
      313        8              PURPOSE: Wait until next buffer is free.
      314        9         */
      315       10
      316       11         /***
      317       12          *** INCLUDE
      318       13          ***/
      319       14
      320       15        %INCLUDE CP_6;
      321     5574        %INCLUDE FLI_DATA_R;
      322     6988        %INCLUDE XUD_UTS_M;
      323     7070
      324     7071         /***
      325     7072          *** ENTRY
      326     7073          ***/
      327     7074
      328     7075    1   DCL FLI$SPIN_CHK ENTRY(2);
      329     7076        %XUD$UTS_ENTRIES;
      330     7108
      331     7109         /***
      332     7110          *** AUTO
      333     7111          ***/
      334     7112
      335     7113    1   DCL IO_WAIT_UTS UBIN WORD AUTO;
      336     7114    1   DCL SPIN SBIN AUTO;
      337     7115    1   DCL TEMP SBIN AUTO;
PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:79   
      338     7116
      339     7117
      340     7118        /******************************/
      341     7119
      342     7120         /***
      343     7121          *** Get the current time so we'll be able to tell when we've
      344     7122          *** spun too long.
      345     7123          ***/
      346     7124
      347     7125    1      CALL M$TIME( GET_NOW_UTS );

   7125  3 000002   000000 630400 xsym               EPPR0   GET_NOW_UTS
         3 000003   020004 713400                    CLIMB   8196
         3 000004   402000 401760                    pmme    nvectors=5

      348     7126    1      IO_WAIT_UTS = NOW_UTS;

   7126  3 000005   000000 235000 xsym               LDA     NOW_UTS
         3 000006   200003 755100                    STA     IO_WAIT_UTS,,AUTO

      349     7127
      350     7128    1      SPIN = 0;

   7128  3 000007   200004 450100                    STZ     SPIN,,AUTO

      351     7129    2      DO WHILE( LAST_FREE_IX = 0 );

   7129  3 000010   000000 236000 xsym               LDQ     LAST_FREE_IX
         3 000011   000027 601000 3                  TNZ     s:7138

      352     7130    2         SPIN = SPIN + 1;

   7130  3 000012   200004 054100                    AOS     SPIN,,AUTO

      353     7131    2         IF SPIN >= 100000            /* Just to keep from doing to many M$TIMEs */

   7131  3 000013   200004 235100                    LDA     SPIN,,AUTO
PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:80   
         3 000014   303240 115007                    CMPA    100000,DL
         3 000015   000025 604000 3                  TMI     s:7136

      354     7132    3          THEN DO;

      355     7133    3            SPIN = 0;

   7133  3 000016   200004 450100                    STZ     SPIN,,AUTO

      356     7134    3            CALL FLI$SPIN_CHK( IO_WAIT_UTS, );

   7134  3 000017   200003 630500                    EPPR0   IO_WAIT_UTS,,AUTO
         3 000020   200006 450500                    STP0    TEMP+1,,AUTO
         3 000021   200006 630500                    EPPR0   TEMP+1,,AUTO
         3 000022   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000023   000000 701000 xent               TSX1    FLI$SPIN_CHK
         3 000024   000000 011000                    NOP     0

      357     7135    3            END;

      358     7136    2         END;

   7136  3 000025   000000 235000 xsym               LDA     LAST_FREE_IX
         3 000026   000012 600000 3                  TZE     s:7130

      359     7137
      360     7138    1      CALL M$TIME( GET_NOW_UTS );

   7138  3 000027   000000 630400 xsym               EPPR0   GET_NOW_UTS
         3 000030   020004 713400                    CLIMB   8196
         3 000031   402000 401760                    pmme    nvectors=5

      361     7139    1      CALL XUD$UTS_DIFF(TEMP,NOW_UTS,IO_WAIT_UTS);

   7139  3 000032   200003 630500                    EPPR0   IO_WAIT_UTS,,AUTO
         3 000033   200010 450500                    STP0    TEMP+3,,AUTO
         3 000034   000000 236000 4                  LDQ     0
PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:81   
         3 000035   200007 756100                    STQ     TEMP+2,,AUTO
         3 000036   200005 631500                    EPPR1   TEMP,,AUTO
         3 000037   200006 451500                    STP1    TEMP+1,,AUTO
         3 000040   200006 630500                    EPPR0   TEMP+1,,AUTO
         3 000041   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000042   000000 701000 xent               TSX1    XUD$UTS_DIFF
         3 000043   000000 011000                    NOP     0

      362     7140    1      ACCUMULATED_SPIN_TIME = ACCUMULATED_SPIN_TIME + TEMP;

   7140  3 000044   000000 236000 xsym               LDQ     ACCUMULATED_SPIN_TIME
         3 000045   200005 036100                    ADLQ    TEMP,,AUTO
         3 000046   000000 756000 xsym               STQ     ACCUMULATED_SPIN_TIME

      363     7141
      364     7142    1      RETURN;

   7142  3 000047   000000 702200 xent               TSX2  ! X66_ARET
      365     7143
      366     7144    1   END FLI$FREE_SPIN;

PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:82   
--  Include file information  --

   XUD_UTS_M.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   FLB_SUBS_C.:E05TOU  is referenced.
   FLI_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FLI$FREE_SPIN.
PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:83   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w UBIN        r     1 IO_WAIT_UTS                4-0-0/w SBIN        r     1 SPIN
     5-0-0/w SBIN        r     1 TEMP

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 ACCUMULATED_SPIN_TIME
     0-0-0/w PTR         r     1 DISK_FILE_SPEC$            0-0-0/w PTR         r     1 DPLIST$
     0-0-0/w PTR         r     1 DPRESLIST$                 0-0-0/d STRC(432)   r     1 GET_NOW_UTS
     0-0-0/w SBIN        r     1 LAST_FREE_IX               0-0-0/w UBIN        r     1 NOW_UTS
     0-0-0/c ASTR(9)     r     1 RET_CMDS_NAME              0-0-0/w PTR         r     1 SNVECLIST$
     0-0-0/w PTR         r     1 TAPE_DCBLIST$


   Procedure FLI$FREE_SPIN requires 40 words for executable code.
   Procedure FLI$FREE_SPIN requires 10 words of local(AUTO) storage.

    No errors detected in file FLI$ALLOC.:E05TSI    .
PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:84   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:85   
          MINI XREF LISTING

ACCUMULATED_SPIN_TIME
      6534**DCL      7140<<ASSIGN   7140>>ASSIGN
DISK_CLOSE.SN_
      6185**DCL      6185--REDEF
DISK_CLOSE.UTL_
      6186**DCL      6186--REDEF
DISK_CLOSE.V.EXPIRE#
      6200**DCL      6200--REDEF
DISK_CLOSE.V.TYPE#
      6198**DCL      6198--REDEF
DISK_CLOSE.V.XTNSIZE#
      6195**DCL      6195--REDEF    6197--REDEF
DISK_FILE_SPEC.SPEC
      6550**DCL      6552--REDEF
DISK_FILE_SPEC.SPEC.START
      6551**DCL      6551--REDEF
DISK_FILE_SPEC.SPEC.STOP
      6552**DCL      6552--REDEF
DISK_FILE_SPEC$
      6549**DCL      6550--IMP-PTR
DISK_OPEN.ACSVEH_
      6050**DCL      6051--REDEF
DISK_OPEN.ALTKEYS_
      6056**DCL      6057--REDEF    6057--REDEF
DISK_OPEN.HDR_
      6055**DCL      6056--REDEF
DISK_OPEN.TAB_
      6054**DCL      6055--REDEF
DISK_OPEN.UHL_
      6048**DCL      6049--REDEF    6049--REDEF
DISK_OPEN.V.FSN#
      6088**DCL      6088--REDEF    6088--REDEF
PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:86   
DISK_OPEN.WSN_
      6054**DCL      6054--REDEF
DISK_READ.STATION_
      6112**DCL      6113--REDEF
DISK_READ.V.DVBYTE.REREAD#
      6124**DCL      6124--REDEF
DISK_READ.V.INDX#
      6122**DCL      6122--REDEF
DISK_WRITE.STATION_
      6150**DCL      6150--REDEF
DISK_WRITE.V.DVBYTE.VFC#
      6157**DCL      6157--REDEF
DPLIST$
      6535**DCL      6547--IMP-PTR
DPRESLIST$
      6549**DCL      6549--IMP-PTR
EFTWORD
      6670**DCL      6670--REDEF
FLI$SPIN_CHK
      7075**DCL-ENT  7134--CALL
FPT_EXIT.V.STEPCC#
      5975**DCL      5975--REDEF
GET_NOW_UTS
      6526**DCL      7125<>CALL     7138<>CALL
IO_WAIT_UTS
      7113**DCL      7126<<ASSIGN   7134<>CALL     7139<>CALL
LAST_FREE_IX
      6506**DCL      7129>>DOWHILE
M$TIME
      5569**DCL-ENT  7125--CALL     7138--CALL
NOW_UTS
      6514**DCL      7126>>ASSIGN   7139<>CALL
PRE_RET_CLOSE.SN_
      6913**DCL      6913--REDEF
PRE_RET_CLOSE.UTL_
      6914**DCL      6914--REDEF
PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:87   
PRE_RET_CLOSE.V.EXPIRE#
      6928**DCL      6928--REDEF
PRE_RET_CLOSE.V.TYPE#
      6926**DCL      6926--REDEF
PRE_RET_CLOSE.V.XTNSIZE#
      6923**DCL      6923--REDEF    6925--REDEF
PRE_RET_OPEN.ACSVEH_
      6848**DCL      6849--REDEF
PRE_RET_OPEN.ALTKEYS_
      6854**DCL      6855--REDEF    6855--REDEF
PRE_RET_OPEN.HDR_
      6853**DCL      6854--REDEF
PRE_RET_OPEN.TAB_
      6852**DCL      6853--REDEF
PRE_RET_OPEN.UHL_
      6846**DCL      6847--REDEF    6847--REDEF
PRE_RET_OPEN.V.FSN#
      6886**DCL      6886--REDEF    6886--REDEF
PRE_RET_OPEN.WSN_
      6852**DCL      6852--REDEF
PRE_RET_READ.STATION_
      6703**DCL      6704--REDEF
PRE_RET_READ.V.DVBYTE.REREAD#
      6715**DCL      6715--REDEF
PRE_RET_READ.V.INDX#
      6713**DCL      6713--REDEF
PRE_RET_WRITE.STATION_
      6741**DCL      6741--REDEF
PRE_RET_WRITE.V.DVBYTE.VFC#
      6748**DCL      6748--REDEF
RET_CMDS_NAME.L#
      6957**DCL      6957--IMP-SIZ
SNVECLIST$
      6489**DCL      6489--IMP-PTR
SPEC.START
      6553**DCL      6554--REDEF
PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:88   
SPEC.STOP
      6554**DCL      6555--REDEF
SPECCHARS
      6553**DCL      6553--REDEF
SPIN
      7114**DCL      7128<<ASSIGN   7130<<ASSIGN   7130>>ASSIGN   7131>>IF       7133<<ASSIGN
TAPE_CLOSE.SN_
      6406**DCL      6406--REDEF
TAPE_CLOSE.UTL_
      6407**DCL      6407--REDEF
TAPE_CLOSE.V.EXPIRE#
      6421**DCL      6421--REDEF
TAPE_CLOSE.V.TYPE#
      6419**DCL      6419--REDEF
TAPE_CLOSE.V.XTNSIZE#
      6416**DCL      6416--REDEF    6418--REDEF
TAPE_DCBLIST$
      5962**DCL      5962--IMP-PTR
TAPE_OPEN.ACSVEH_
      6271**DCL      6272--REDEF
TAPE_OPEN.ALTKEYS_
      6277**DCL      6278--REDEF    6278--REDEF
TAPE_OPEN.HDR_
      6276**DCL      6277--REDEF
TAPE_OPEN.TAB_
      6275**DCL      6276--REDEF
TAPE_OPEN.UHL_
      6269**DCL      6270--REDEF    6270--REDEF
TAPE_OPEN.V.FSN#
      6309**DCL      6309--REDEF    6309--REDEF
TAPE_OPEN.WSN_
      6275**DCL      6275--REDEF
TAPE_READ.STATION_
      6333**DCL      6334--REDEF
TAPE_READ.V.DVBYTE.REREAD#
      6345**DCL      6345--REDEF
PL6.E3A0      #005=FLI$FREE_SPIN File=FLI$ALLOC.:E05TSI                          TUE 07/29/97 15:48 Page:89   
TAPE_READ.V.INDX#
      6343**DCL      6343--REDEF
TAPE_WRITE.STATION_
      6371**DCL      6371--REDEF
TAPE_WRITE.V.DVBYTE.VFC#
      6378**DCL      6378--REDEF
TEMP
      7115**DCL      7139<>CALL     7140>>ASSIGN
TVECTOR.W2
      6502**DCL      6503--REDEF
XUD$UTS_DIFF
      7077**DCL-ENT  7139--CALL
