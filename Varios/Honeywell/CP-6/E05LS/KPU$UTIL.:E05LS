VERSION E05

PL6.E3A0      #001=KPU$DISK2VSEC File=KPU$UTIL.:E05TSI                           WED 07/30/97 01:22 Page:1    
        1        1        /*M*     KPU$UTIL Utility routines used throughout PIGETTE */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*F*     NAME:          KPU$DISK2VSEC
        8        8                 PURPOSE:       Convert from disk parameters to VSEC.
        9        9        */
       10       10        KPU$DISK2VSEC: PROC(SIDE,TRACK,SECTOR,VSECTOR,DRIVE);
       11       11        /**/
       12       12        /*  INCLUDE FILES  */
       13       13        /**/
       14       14        %INCLUDE KP_DATA_R;
       15     1266        /**/
       16     1267        /*  Parameters  */
       17     1268        /**/
       18     1269    1   DCL SIDE SBIN;
       19     1270    1   DCL TRACK SBIN;
       20     1271    1   DCL SECTOR SBIN;
       21     1272    1   DCL VSECTOR SBIN;
       22     1273    1   DCL DRIVE SBIN;
       23     1274        /**/
       24     1275        /*  AUTO  */
       25     1276        /**/
       26     1277    1   DCL LEFT SBIN;
       27     1278        /**/
       28     1279    1      VSECTOR = DRIVE*2560 + TRACK*32 + SIDE*16 + SECTOR;
       29     1280    1      RETURN;
       30     1281        /**/
       31     1282    1   KPU$VSEC2DISK: ENTRY(SIDE,TRACK,SECTOR,VSECTOR,DRIVE);
       32     1283    1           DRIVE = VSECTOR / 2560;
       33     1284    1           LEFT = MOD(VSECTOR,2560);
       34     1285    1           TRACK = LEFT / 32;
       35     1286    1           LEFT = MOD(LEFT,32);
       36     1287    1           SIDE = LEFT / 16;
       37     1288    1           LEFT = MOD(LEFT,16);
PL6.E3A0      #001=KPU$DISK2VSEC File=KPU$UTIL.:E05TSI                           WED 07/30/97 01:22 Page:2    
       38     1289    1           SECTOR = LEFT;
       39     1290    1      RETURN;
       40     1291        /**/
       41     1292    1      END KPU$DISK2VSEC;
       42     1293        %EOD;

PL6.E3A0      #001=KPU$DISK2VSEC File=KPU$UTIL.:E05TSI                           WED 07/30/97 01:22 Page:3    
--  Include file information  --

   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPU$DISK2VSEC.

   Procedure KPU$DISK2VSEC requires 43 words for executable code.
   Procedure KPU$DISK2VSEC requires 10 words of local(AUTO) storage.

PL6.E3A0      #001=KPU$DISK2VSEC File=KPU$UTIL.:E05TSI                           WED 07/30/97 01:22 Page:4    

 Object Unit name= KPU$DISK2VSEC                              File name= KPU$UTIL.:E05TOU
 UTS= JUL 30 '97 01:22:10.60 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    43     53  KPU$DISK2VSEC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        5  KPU$DISK2VSEC
     1     20                  yes      Std        5  KPU$VSEC2DISK

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_5
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INBUF                              KP_RU_OUTBUF
     KP_RU_KEY
PL6.E3A0      #001=KPU$DISK2VSEC File=KPU$UTIL.:E05TSI                           WED 07/30/97 01:22 Page:5    


        1        1        /*M*     KPU$UTIL Utility routines used throughout PIGETTE */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*F*     NAME:          KPU$DISK2VSEC
        8        8                 PURPOSE:       Convert from disk parameters to VSEC.
        9        9        */
       10       10        KPU$DISK2VSEC: PROC(SIDE,TRACK,SECTOR,VSECTOR,DRIVE);

     10  1 000000   000000 700200 xent  KPU$DISK2VS* TSX0  ! X66_AUTO_5
         1 000001   000012 000005                    ZERO    10,5

       11       11        /**/
       12       12        /*  INCLUDE FILES  */
       13       13        /**/
       14       14        %INCLUDE KP_DATA_R;
       15     1266        /**/
       16     1267        /*  Parameters  */
       17     1268        /**/
       18     1269    1   DCL SIDE SBIN;
       19     1270    1   DCL TRACK SBIN;
       20     1271    1   DCL SECTOR SBIN;
       21     1272    1   DCL VSECTOR SBIN;
       22     1273    1   DCL DRIVE SBIN;
       23     1274        /**/
       24     1275        /*  AUTO  */
       25     1276        /**/
       26     1277    1   DCL LEFT SBIN;
       27     1278        /**/
       28     1279    1      VSECTOR = DRIVE*2560 + TRACK*32 + SIDE*16 + SECTOR;

   1279  1 000002   200004 470500                    LDP0    @TRACK,,AUTO
         1 000003   200007 471500                    LDP1    @DRIVE,,AUTO
         1 000004   100000 236100                    LDQ     0,,PR1
PL6.E3A0      #001=KPU$DISK2VSEC File=KPU$UTIL.:E05TSI                           WED 07/30/97 01:22 Page:6    
         1 000005   000120 402007                    MPY     80,DL
         1 000006   000000 036100                    ADLQ    0,,PR0
         1 000007   200003 473500                    LDP3    @SIDE,,AUTO
         1 000010   000001 736000                    QLS     1
         1 000011   300000 036100                    ADLQ    0,,PR3
         1 000012   200005 474500                    LDP4    @SECTOR,,AUTO
         1 000013   000004 736000                    QLS     4
         1 000014   400000 036100                    ADLQ    0,,PR4
         1 000015   200006 475500                    LDP5    @VSECTOR,,AUTO
         1 000016   500000 756100                    STQ     0,,PR5

       29     1280    1      RETURN;

   1280  1 000017   000000 702200 xent               TSX2  ! X66_ARET

       30     1281        /**/
       31     1282    1   KPU$VSEC2DISK: ENTRY(SIDE,TRACK,SECTOR,VSECTOR,DRIVE);

   1282  1 000020   000000 700200 xent  KPU$VSEC2DI* TSX0  ! X66_AUTO_5
         1 000021   000012 000005                    ZERO    10,5

       32     1283    1           DRIVE = VSECTOR / 2560;

   1283  1 000022   200006 470500                    LDP0    @VSECTOR,,AUTO
         1 000023   000000 236100                    LDQ     0,,PR0
         1 000024   005000 506007                    DIV     2560,DL
         1 000025   200007 471500                    LDP1    @DRIVE,,AUTO
         1 000026   100000 756100                    STQ     0,,PR1

       33     1284    1           LEFT = MOD(VSECTOR,2560);

   1284  1 000027   000000 236100                    LDQ     0,,PR0
         1 000030   005000 506007                    DIV     2560,DL
         1 000031   200010 755100                    STA     LEFT,,AUTO

       34     1285    1           TRACK = LEFT / 32;

PL6.E3A0      #001=KPU$DISK2VSEC File=KPU$UTIL.:E05TSI                           WED 07/30/97 01:22 Page:7    
   1285  1 000032   200010 236100                    LDQ     LEFT,,AUTO
         1 000033   000040 506007                    DIV     32,DL
         1 000034   200004 473500                    LDP3    @TRACK,,AUTO
         1 000035   300000 756100                    STQ     0,,PR3

       35     1286    1           LEFT = MOD(LEFT,32);

   1286  1 000036   200010 236100                    LDQ     LEFT,,AUTO
         1 000037   000040 506007                    DIV     32,DL
         1 000040   200010 755100                    STA     LEFT,,AUTO

       36     1287    1           SIDE = LEFT / 16;

   1287  1 000041   200010 236100                    LDQ     LEFT,,AUTO
         1 000042   000020 506007                    DIV     16,DL
         1 000043   200003 474500                    LDP4    @SIDE,,AUTO
         1 000044   400000 756100                    STQ     0,,PR4

       37     1288    1           LEFT = MOD(LEFT,16);

   1288  1 000045   200010 236100                    LDQ     LEFT,,AUTO
         1 000046   000020 506007                    DIV     16,DL
         1 000047   200010 755100                    STA     LEFT,,AUTO

       38     1289    1           SECTOR = LEFT;

   1289  1 000050   200005 475500                    LDP5    @SECTOR,,AUTO
         1 000051   500000 755100                    STA     0,,PR5

       39     1290    1      RETURN;

   1290  1 000052   000000 702200 xent               TSX2  ! X66_ARET
       40     1291        /**/
       41     1292    1      END KPU$DISK2VSEC;
       42     1293        %EOD;

PL6.E3A0      #001=KPU$DISK2VSEC File=KPU$UTIL.:E05TSI                           WED 07/30/97 01:22 Page:8    
--  Include file information  --

   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPU$DISK2VSEC.
PL6.E3A0      #001=KPU$DISK2VSEC File=KPU$UTIL.:E05TSI                           WED 07/30/97 01:22 Page:9    

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     7-0-0/w PTR         r     1 @DRIVE                     5-0-0/w PTR         r     1 @SECTOR
     3-0-0/w PTR         r     1 @SIDE                      4-0-0/w PTR         r     1 @TRACK
     6-0-0/w PTR         r     1 @VSECTOR                  *0-0-0/w SBIN        r     1 DRIVE
    10-0-0/w SBIN        r     1 LEFT                      *0-0-0/w SBIN        r     1 SECTOR
    *0-0-0/w SBIN        r     1 SIDE                      *0-0-0/w SBIN        r     1 TRACK
    *0-0-0/w SBIN        r     1 VSECTOR


   Procedure KPU$DISK2VSEC requires 43 words for executable code.
   Procedure KPU$DISK2VSEC requires 10 words of local(AUTO) storage.
PL6.E3A0      #001=KPU$DISK2VSEC File=KPU$UTIL.:E05TSI                           WED 07/30/97 01:22 Page:10   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KPU$DISK2VSEC File=KPU$UTIL.:E05TSI                           WED 07/30/97 01:22 Page:11   
          MINI XREF LISTING

DRIVE
      1273**DCL        10--PROC     1279>>ASSIGN   1282--ENTRY    1283<<ASSIGN
KP_EXIT.V.STEPCC#
       937**DCL       937--REDEF
KP_INBUF
       859**DCL       859--REDEF
KP_RU_KEY
       867**DCL       868--REDEF
KP_RU_KEY.NODE
       867**DCL       867--REDEF
KP_RU_KEY.PAGE
       868**DCL       868--REDEF
KP_RU_OUTBUF
       861**DCL       861--REDEF
LEFT
      1277**DCL      1284<<ASSIGN   1285>>ASSIGN   1286<<ASSIGN   1286>>ASSIGN   1287>>ASSIGN   1288<<ASSIGN
      1288>>ASSIGN   1289>>ASSIGN
SECTOR
      1271**DCL        10--PROC     1279>>ASSIGN   1282--ENTRY    1289<<ASSIGN
SIDE
      1269**DCL        10--PROC     1279>>ASSIGN   1282--ENTRY    1287<<ASSIGN
TRACK
      1270**DCL        10--PROC     1279>>ASSIGN   1282--ENTRY    1285<<ASSIGN
VSECTOR
      1272**DCL        10--PROC     1279<<ASSIGN   1282--ENTRY    1283>>ASSIGN   1284>>ASSIGN

PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:12   
       43        1        /*T***********************************************************/
       44        2        /*T*                                                         */
       45        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       46        4        /*T*                                                         */
       47        5        /*T***********************************************************/
       48        6        /*X* DMC,DFC */
       49        7        /*F*     NAME:          KPU$FEP_AND_DRIVE
       50        8                 PURPOSE:       Process a parse block that specifies a FEP number
       51        9                                and optional drive number.
       52       10        */
       53       11        KPU$FEP_AND_DRIVE: PROC(FEP$BLK,FEP,DRIVE) ALTRET;
       54       12        /**/
       55       13        /*  INCLUDE FILES  */
       56       14        /**/
       57       15        %INCLUDE KP_DATA_R;
       58     1267        %INCLUDE XU_MACRO_C;
       59     4373        %INCLUDE XU_SUBS_C;
       60     4465        /**/
       61     4466        /*  ENTRY DCLS  */
       62     4467        /**/
       63     4468    1   DCL KPE$ERROR ENTRY(1) ALTRET;
       64     4469        /**/
       65     4470        /*  PARAMETERS  */
       66     4471        /**/
       67     4472        %PARSE$OUT(NAME=FEP$BLK,STCLASS="");
       68     4517    1   DCL FEP UBIN WORD;
       69     4518    1   DCL DRIVE UBIN WORD;
       70     4519    1   DCL DRIVE$ PTR;
       71     4520        /**/
       72     4521        /*  BASED DATA  */
       73     4522        /**/
       74     4523        %PARSE$SYM(NAME=OUT$SYM,STCLASS=BASED);
       75     4561        %PARSE$OUT(NAME=OUT$BLK,STCLASS=BASED);
       76     4606        %EJECT;
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:13   
       77     4607        /**/
       78     4608        /*  Process the FEP number or NODE-NAME  */
       79     4609        /**/
       80     4610    1       DRIVE$ = ADDR(NIL);
       81     4611    1       IF FEP$BLK.NSUBLKS = 2 THEN         /* Drive number supplied           */
       82     4612    1          DRIVE$ = FEP$BLK.SUBLK$(1);
       83     4613    1       ELSE IF FEP$BLK.NSUBLKS = 0 THEN      /* Nothing supplied, use default */
       84     4614    1          GOTO NO_FEP;
       85     4615    2       DO CASE (FEP$BLK.SUBLK$(0) -> OUT$BLK.CODE);
       86     4616    2       CASE (1); /* FEP NUMBER               */
       87     4617    2            CALL CHARBIN( FEP, SUBSTR( FEP$BLK.SUBLK$(0) -> OUT$SYM.TEXT,
       88     4618    2                          0, FEP$BLK.SUBLK$(0) -> OUT$SYM.COUNT ) );
       89     4619    2            IF FEP > MAX_FEP_NO THEN       /* Fep # was bogus                    */
       90     4620    3               DO;
       91     4621    3   BOGUS_FEP:    ;
       92     4622    3                 CALL KPE$ERROR( E$FEP_OUT_OF_RANGE );
       93     4623    3                 ALTRETURN;
       94     4624    3                 END;
       95     4625    2       CASE (2);                           /* NODE NAME                          */
       96     4626    2            FPT_NODEINFO.V.NODENAME# = SUBSTR( FEP$BLK.SUBLK$(0) -> OUT$SYM.TEXT,
       97     4627    2                     0, FEP$BLK.SUBLK$(0) -> OUT$SYM.COUNT );
       98     4628    2            CALL M$NODEINFO (FPT_NODEINFO) ALTRET(BOGUS_FEP);
       99     4629    2            IF VLR_NODEINFO.HOST# THEN     /* That node name is not a FEP        */
      100     4630    3               DO;
      101     4631    3                 CALL KPE$ERROR( E$NODE_NOT_FEP );
      102     4632    3                 ALTRETURN;
      103     4633    3                 END;
      104     4634    2            FEP = VLR_NODEINFO.NODENUM#;
      105     4635    2       CASE (3);                           /* DRIVE NUMBER (ONLY) */
      106     4636    2            DRIVE$ = FEP$BLK.SUBLK$(0);
      107     4637    2   NO_FEP:  IF KP_FEP_NO <= 0 THEN GOTO BOGUS_FEP;
      108     4638    2            FEP = KP_FEP_NO;
      109     4639    2            END;
      110     4640        %EJECT;
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:14   
      111     4641        /**/
      112     4642        /*  Process the drive number, if one is supplied.  */
      113     4643        /**/
      114     4644    1       IF DRIVE$ = ADDR(NIL) THEN         /* No drive number supplied           */
      115     4645    1          DRIVE = 0;
      116     4646    1       ELSE                                /* Process drive number               */
      117     4647    1          CALL CHARBIN( DRIVE, SUBSTR(
      118     4648    1                        DRIVE$ -> OUT$SYM.TEXT, 0,
      119     4649    1                        DRIVE$ -> OUT$SYM.COUNT ) );
      120     4650    1       IF DRIVE > MAX_DRIVE_NO THEN        /* Drive was bogus                    */
      121     4651    2          DO;
      122     4652    2             CALL KPE$ERROR( E$DRIVE_OUT_OF_RANGE );
      123     4653    2             ALTRETURN;
      124     4654    2             END;
      125     4655        /**/
      126     4656        /*  OK, all done.  */
      127     4657        /**/
      128     4658    1       RETURN;                             /* NORMAL RETURN                      */
      129     4659    1       END KPU$FEP_AND_DRIVE;
      130     4660        %EOD;

PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:15   
--  Include file information  --

   XU_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPU$FEP_AND_DRIVE.

   Procedure KPU$FEP_AND_DRIVE requires 94 words for executable code.
   Procedure KPU$FEP_AND_DRIVE requires 10 words of local(AUTO) storage.

PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:16   

 Object Unit name= KPU$FEP_AND_DRIVE                          File name= KPU$UTIL.:E05TOU
 UTS= JUL 30 '97 01:22:23.80 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    94    136  KPU$FEP_AND_DRIVE
    2  RoData even  none     4      4  KPU$FEP_AND_DRIVE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        3  KPU$FEP_AND_DRIVE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 KPE$ERROR
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:17   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INBUF                              KP_RU_OUTBUF
     KP_FEP_NO                             KP_RU_KEY                             MAX_FEP_NO
r    MAX_DRIVE_NO                          FPT_NODEINFO                          VLR_NODEINFO
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:18   


       43        1        /*T***********************************************************/
       44        2        /*T*                                                         */
       45        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       46        4        /*T*                                                         */
       47        5        /*T***********************************************************/
       48        6        /*X* DMC,DFC */
       49        7        /*F*     NAME:          KPU$FEP_AND_DRIVE
       50        8                 PURPOSE:       Process a parse block that specifies a FEP number
       51        9                                and optional drive number.
       52       10        */
       53       11        KPU$FEP_AND_DRIVE: PROC(FEP$BLK,FEP,DRIVE) ALTRET;

     11  1 000000   000000 700200 xent  KPU$FEP_AND* TSX0  ! X66_AUTO_3
         1 000001   000012 000003                    ZERO    10,3

       54       12        /**/
       55       13        /*  INCLUDE FILES  */
       56       14        /**/
       57       15        %INCLUDE KP_DATA_R;
       58     1267        %INCLUDE XU_MACRO_C;
       59     4373        %INCLUDE XU_SUBS_C;
       60     4465        /**/
       61     4466        /*  ENTRY DCLS  */
       62     4467        /**/
       63     4468    1   DCL KPE$ERROR ENTRY(1) ALTRET;
       64     4469        /**/
       65     4470        /*  PARAMETERS  */
       66     4471        /**/
       67     4472        %PARSE$OUT(NAME=FEP$BLK,STCLASS="");
       68     4517    1   DCL FEP UBIN WORD;
       69     4518    1   DCL DRIVE UBIN WORD;
       70     4519    1   DCL DRIVE$ PTR;
       71     4520        /**/
       72     4521        /*  BASED DATA  */
       73     4522        /**/
       74     4523        %PARSE$SYM(NAME=OUT$SYM,STCLASS=BASED);
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:19   
       75     4561        %PARSE$OUT(NAME=OUT$BLK,STCLASS=BASED);
       76     4606        %EJECT;
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:20   
       77     4607        /**/
       78     4608        /*  Process the FEP number or NODE-NAME  */
       79     4609        /**/
       80     4610    1       DRIVE$ = ADDR(NIL);

   4610  1 000002   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000003   200006 756100                    STQ     DRIVE$,,AUTO

       81     4611    1       IF FEP$BLK.NSUBLKS = 2 THEN         /* Drive number supplied           */

   4611  1 000004   200003 470500                    LDP0    @FEP$BLK,,AUTO
         1 000005   000001 220100                    LDX0    1,,PR0
         1 000006   000002 100003                    CMPX0   2,DU
         1 000007   000013 601000 1                  TNZ     s:4613

       82     4612    1          DRIVE$ = FEP$BLK.SUBLK$(1);

   4612  1 000010   000004 236100                    LDQ     4,,PR0
         1 000011   200006 756100                    STQ     DRIVE$,,AUTO
         1 000012   000015 710000 1                  TRA     s:4615

       83     4613    1       ELSE IF FEP$BLK.NSUBLKS = 0 THEN      /* Nothing supplied, use default */

   4613  1 000013   000000 100003                    CMPX0   0,DU
         1 000014   000100 600000 1                  TZE     NO_FEP

       84     4614    1          GOTO NO_FEP;
       85     4615    2       DO CASE (FEP$BLK.SUBLK$(0) -> OUT$BLK.CODE);

   4615  1 000015   000003 471500                    LDP1    3,,PR0
         1 000016   100000 721100                    LXL1    0,,PR1
         1 000017   000004 101003                    CMPX1   4,DU
         1 000020   000022 602011 1                  TNC     s:4615+5,X1
         1 000021   000104 710000 1                  TRA     s:4644
         1 000022   000104 710000 1                  TRA     s:4644
         1 000023   000026 710000 1                  TRA     s:4617
         1 000024   000047 710000 1                  TRA     s:4626
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:21   
         1 000025   000076 710000 1                  TRA     s:4636

       86     4616    2       CASE (1); /* FEP NUMBER               */

       87     4617    2            CALL CHARBIN( FEP, SUBSTR( FEP$BLK.SUBLK$(0) -> OUT$SYM.TEXT,

   4617  1 000026   100004 236100                    LDQ     4,,PR1
         1 000027   000033 772000                    QRL     27
         1 000030   000000 622006                    EAX2    0,QL
         1 000031   000100 305540                    DTB
         1 000032   100004 230012                    NDSC9   4,,PR1                   cn=1,s=nosgn,sf=0,n=*X2
         1 000033   200010 000010                    NDSC9   DRIVE$+2,,AUTO           cn=0,s=lsgnf,sf=0,n=8
         1 000034   200004 471500                    LDP1    @FEP,,AUTO
         1 000035   200011 235100                    LDA     DRIVE$+3,,AUTO
         1 000036   100000 755100                    STA     0,,PR1

       88     4618    2                          0, FEP$BLK.SUBLK$(0) -> OUT$SYM.COUNT ) );
       89     4619    2            IF FEP > MAX_FEP_NO THEN       /* Fep # was bogus                    */

   4619  1 000037   000000 236000 xsym               LDQ     MAX_FEP_NO
         1 000040   100000 116100                    CMPQ    0,,PR1
         1 000041   000104 603000 1                  TRC     s:4644

       90     4620    3               DO;

   4618  1 000042                       BOGUS_FEP    null
       91     4621    3   BOGUS_FEP:    ;
       92     4622    3                 CALL KPE$ERROR( E$FEP_OUT_OF_RANGE );

   4622  1 000042   000000 630400 2                  EPPR0   0
         1 000043   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000044   000000 701000 xent               TSX1    KPE$ERROR
         1 000045   000000 011000                    NOP     0

       93     4623    3                 ALTRETURN;

   4623  1 000046   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:22   

       94     4624    3                 END;
       95     4625    2       CASE (2);                           /* NODE NAME                          */

       96     4626    2            FPT_NODEINFO.V.NODENAME# = SUBSTR( FEP$BLK.SUBLK$(0) -> OUT$SYM.TEXT,

   4626  1 000047   100004 236100                    LDQ     4,,PR1
         1 000050   000033 772000                    QRL     27
         1 000051   000000 622006                    EAX2    0,QL
         1 000052   040000 100540                    MLR     fill='040'O
         1 000053   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
         1 000054   000004 000010 xsym               ADSC9   FPT_NODEINFO+4           cn=0,n=8

       97     4627    2                     0, FEP$BLK.SUBLK$(0) -> OUT$SYM.COUNT );
       98     4628    2            CALL M$NODEINFO (FPT_NODEINFO) ALTRET(BOGUS_FEP);

   4628  1 000055   000000 630400 xsym               EPPR0   FPT_NODEINFO
         1 000056   560031 713400                    CLIMB   alt,+57369
         1 000057   400400 401760                    pmme    nvectors=2
         1 000060   000042 702000 1                  TSX2    BOGUS_FEP

       99     4629    2            IF VLR_NODEINFO.HOST# THEN     /* That node name is not a FEP        */

   4629  1 000061   000002 236000 xsym               LDQ     VLR_NODEINFO+2
         1 000062   000400 316003                    CANQ    256,DU
         1 000063   000071 600000 1                  TZE     s:4634

      100     4630    3               DO;

      101     4631    3                 CALL KPE$ERROR( E$NODE_NOT_FEP );

   4631  1 000064   000002 630400 2                  EPPR0   2
         1 000065   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000066   000000 701000 xent               TSX1    KPE$ERROR
         1 000067   000000 011000                    NOP     0

      102     4632    3                 ALTRETURN;
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:23   

   4632  1 000070   000000 702200 xent               TSX2  ! X66_AALT

      103     4633    3                 END;
      104     4634    2            FEP = VLR_NODEINFO.NODENUM#;

   4634  1 000071   200004 470500                    LDP0    @FEP,,AUTO
         1 000072   000002 236000 xsym               LDQ     VLR_NODEINFO+2
         1 000073   000033 772000                    QRL     27
         1 000074   000000 756100                    STQ     0,,PR0
         1 000075   000104 710000 1                  TRA     s:4644

      105     4635    2       CASE (3);                           /* DRIVE NUMBER (ONLY) */

      106     4636    2            DRIVE$ = FEP$BLK.SUBLK$(0);

   4636  1 000076   000003 236100                    LDQ     3,,PR0
         1 000077   200006 756100                    STQ     DRIVE$,,AUTO

      107     4637    2   NO_FEP:  IF KP_FEP_NO <= 0 THEN GOTO BOGUS_FEP;

   4637  1 000100   000000 235000 xsym  NO_FEP       LDA     KP_FEP_NO
         1 000101   000042 604400 1                  TMOZ    BOGUS_FEP

      108     4638    2            FEP = KP_FEP_NO;

   4638  1 000102   200004 471500                    LDP1    @FEP,,AUTO
         1 000103   100000 755100                    STA     0,,PR1

      109     4639    2            END;

      110     4640        %EJECT;
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:24   
      111     4641        /**/
      112     4642        /*  Process the drive number, if one is supplied.  */
      113     4643        /**/
      114     4644    1       IF DRIVE$ = ADDR(NIL) THEN         /* No drive number supplied           */

   4644  1 000104   200006 236100                    LDQ     DRIVE$,,AUTO
         1 000105   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000106   000112 601000 1                  TNZ     s:4647

      115     4645    1          DRIVE = 0;

   4645  1 000107   200005 470500                    LDP0    @DRIVE,,AUTO
         1 000110   000000 450100                    STZ     0,,PR0
         1 000111   000124 710000 1                  TRA     s:4650

      116     4646    1       ELSE                                /* Process drive number               */
      117     4647    1          CALL CHARBIN( DRIVE, SUBSTR(

   4647  1 000112   200006 470500                    LDP0    DRIVE$,,AUTO
         1 000113   000004 236100                    LDQ     4,,PR0
         1 000114   000033 772000                    QRL     27
         1 000115   000000 620006                    EAX0    0,QL
         1 000116   000100 305540                    DTB
         1 000117   000004 230010                    NDSC9   4,,PR0                   cn=1,s=nosgn,sf=0,n=*X0
         1 000120   200010 000010                    NDSC9   DRIVE$+2,,AUTO           cn=0,s=lsgnf,sf=0,n=8
         1 000121   200005 471500                    LDP1    @DRIVE,,AUTO
         1 000122   200011 235100                    LDA     DRIVE$+3,,AUTO
         1 000123   100000 755100                    STA     0,,PR1

      118     4648    1                        DRIVE$ -> OUT$SYM.TEXT, 0,
      119     4649    1                        DRIVE$ -> OUT$SYM.COUNT ) );
      120     4650    1       IF DRIVE > MAX_DRIVE_NO THEN        /* Drive was bogus                    */

   4650  1 000124   200005 470500                    LDP0    @DRIVE,,AUTO
         1 000125   000000 236000 xsym               LDQ     MAX_DRIVE_NO
         1 000126   000000 116100                    CMPQ    0,,PR0
         1 000127   000135 603000 1                  TRC     s:4658
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:25   

      121     4651    2          DO;

      122     4652    2             CALL KPE$ERROR( E$DRIVE_OUT_OF_RANGE );

   4652  1 000130   000003 630400 2                  EPPR0   3
         1 000131   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000132   000000 701000 xent               TSX1    KPE$ERROR
         1 000133   000000 011000                    NOP     0

      123     4653    2             ALTRETURN;

   4653  1 000134   000000 702200 xent               TSX2  ! X66_AALT

      124     4654    2             END;
      125     4655        /**/
      126     4656        /*  OK, all done.  */
      127     4657        /**/
      128     4658    1       RETURN;                             /* NORMAL RETURN                      */

   4658  1 000135   000000 702200 xent               TSX2  ! X66_ARET
      129     4659    1       END KPU$FEP_AND_DRIVE;
      130     4660        %EOD;

PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:26   
--  Include file information  --

   XU_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPU$FEP_AND_DRIVE.
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:27   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @DRIVE                     4-0-0/w PTR         r     1 @FEP
     3-0-0/w PTR         r     1 @FEP$BLK                  *0-0-0/w UBIN        r     1 DRIVE
     6-0-0/w PTR         r     1 DRIVE$                    *0-0-0/w UBIN        r     1 FEP
    *0-0-0/w STRC(144)   r     1 FEP$BLK

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(288)   r     1 FPT_NODEINFO               0-0-0/w SBIN        r     1 KP_FEP_NO
     0-0-0/w UBIN        r     1 MAX_DRIVE_NO               0-0-0/w UBIN        r     1 MAX_FEP_NO
     0-0-0/d STRC(216)   r     1 VLR_NODEINFO

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 OUT$BLK                    0-0-0/w ASTR(153)   r     1 OUT$SYM


   Procedure KPU$FEP_AND_DRIVE requires 94 words for executable code.
   Procedure KPU$FEP_AND_DRIVE requires 10 words of local(AUTO) storage.
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:28   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:29   
          MINI XREF LISTING

BOGUS_FEP
      4618**LABEL    4628--CALLALT  4637--GOTO
DRIVE
      4518**DCL        11--PROC     4645<<ASSIGN   4647<<CALLBLT  4650>>IF
DRIVE$
      4519**DCL      4610<<ASSIGN   4612<<ASSIGN   4636<<ASSIGN   4644>>IF       4647>>CALLBLT  4647>>CALLBLT
      4647>>CALLBLT
FEP
      4517**DCL        11--PROC     4617<<CALLBLT  4619>>IF       4634<<ASSIGN   4638<<ASSIGN
FEP$BLK
      4478**DCL        11--PROC
FEP$BLK.NSUBLKS
      4490**DCL      4611>>IF       4613>>IF
FEP$BLK.SUBLK$
      4511**DCL      4612>>ASSIGN   4615>>DOCASE   4617>>CALLBLT  4617>>CALLBLT  4617>>CALLBLT  4626>>ASSIGN
      4626>>ASSIGN   4626>>ASSIGN   4636>>ASSIGN
FPT_NODEINFO
      1084**DCL      4628<>CALL
FPT_NODEINFO.V.NODENAME#
      1084**DCL      4626<<ASSIGN
KPE$ERROR
      4468**DCL-ENT  4622--CALL     4631--CALL     4652--CALL
KP_EXIT.V.STEPCC#
       938**DCL       938--REDEF
KP_FEP_NO
       866**DCL      4637>>IF       4638>>ASSIGN
KP_INBUF
       860**DCL       860--REDEF
KP_RU_KEY
       868**DCL       869--REDEF
KP_RU_KEY.NODE
       868**DCL       868--REDEF
PL6.E3A0      #002=KPU$FEP_AND_DRIVE File=KPU$UTIL.:E05TSI                       WED 07/30/97 01:22 Page:30   
KP_RU_KEY.PAGE
       869**DCL       869--REDEF
KP_RU_OUTBUF
       862**DCL       862--REDEF
M$NODEINFO
       658**DCL-ENT  4628--CALL
MAX_DRIVE_NO
       941**DCL      4650>>IF
MAX_FEP_NO
       941**DCL      4619>>IF
NO_FEP
      4637**LABEL    4614--GOTO
OUT$BLK.CODE
      4575**DCL      4615>>DOCASE
OUT$SYM.COUNT
      4553**DCL      4556--IMP-SIZ  4617>>CALLBLT  4617>>CALLBLT  4626>>ASSIGN   4626>>ASSIGN   4647>>CALLBLT
      4647>>CALLBLT
OUT$SYM.TEXT
      4556**DCL      4617>>CALLBLT  4626>>ASSIGN   4647>>CALLBLT
VLR_NODEINFO.HOST#
      1096**DCL      4629>>IF
VLR_NODEINFO.NODENUM#
      1096**DCL      4634>>ASSIGN

PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:31   
      131        1        /*T***********************************************************/
      132        2        /*T*                                                         */
      133        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      134        4        /*T*                                                         */
      135        5        /*T***********************************************************/
      136        6        /*X* DMC,DFC */
      137        7        KPU$OPTIONS: PROC(OPTS,PART$) ALTRET ;
      138        8        /**/
      139        9        /*  Include files  */
      140       10        /**/
      141       11        %INCLUDE XU_MACRO_C;
      142     3117        %INCLUDE KP_DATA_R;
      143     4369        %INCLUDE XU_SUBS_C;
      144     4461        /**/
      145     4462        /*  PARAMETERS  */
      146     4463        /**/
      147     4464        %KP_OPTIONS (FPTN=OPTS,STCLASS="");
      148     4497    1   DCL PART$ PTR;
      149     4498        /**/
      150     4499        /*  BASED  */
      151     4500        /**/
      152     4501        %PARSE$OUT    ( NAME    = OUT$BLK,
      153     4502                        STCLASS = BASED );
      154     4547        %PARSE$SYM(NAME=OUT$SYM,STCLASS=BASED);
      155     4585        /**/
      156     4586        /*  LOCAL AUTO  */
      157     4587        /**/
      158     4588    1   DCL I SBIN WORD;
      159     4589    1   DCL J SBIN WORD;
      160     4590    1   DCL OPT SBIN WORD;
      161     4591    1   DCL OPT$ PTR;
      162     4592    1   DCL TRASH SBIN;
      163     4593        /**/
      164     4594        /*  ENTRY DCLS  */
      165     4595        /**/
      166     4596        %KP_ENTRIES (OMIT=KPU$OPTIONS);
      167     4702        /**/
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:32   
      168     4703    2         DO OPT = 0 TO PART$ -> OUT$BLK.NSUBLKS -1;
      169     4704    2            OPT$ = PART$ -> OUT$BLK.SUBLK$(OPT);
      170     4705    3            DO CASE( OPT$ -> OUT$BLK.CODE);
      171     4706    3               CASE(1);            /* TRACK                              */
      172     4707    3                 CALL KPU$RANGE(OPT$ -> OUT$BLK,
      173     4708    3                  OPTS.TRACK_LO,OPTS.TRACK_HI);
      174     4709    3               CASE(2);            /* SECTOR                             */
      175     4710    3                 CALL KPU$RANGE(OPT$ -> OUT$BLK,
      176     4711    3                  OPTS.SECTOR_LO,OPTS.SECTOR_HI);
      177     4712    3               CASE(3);                    /* ANNOUNCE threshold                 */
      178     4713    3                 CALL KPU$RANGE(OPT$ -> OUT$BLK,
      179     4714    3                  OPTS.ANNOUNCE_LIMIT,OPTS.ANNOUNCE_LIMIT);
      180     4715    3               CASE(4);            /* WAIT option                        */
      181     4716    3                 OPTS.USER_WAIT = 1;
      182     4717    3               CASE(5);            /* SIDE                               */
      183     4718    3                 CALL KPU$RANGE(OPT$ -> OUT$BLK,
      184     4719    3                  OPTS.SIDE_LO,OPTS.SIDE_HI);
      185     4720    3               CASE(6);            /* SSIZE                              */
      186     4721    3                 CALL KPU$RANGE(OPT$ -> OUT$BLK,
      187     4722    3                  OPTS.SECTOR_SIZE,OPTS.SECTOR_SIZE);
      188     4723    3               CASE(7);            /* TYPE                               */
      189     4724    3                 I = OPT$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE;
      190     4725    3                 CALL KPD$DISK_TYPE(OPTS,I);
      191     4726    3               CASE(8);            /* NWARN                              */
      192     4727    3                 OPTS.WARN_CODE = 3;
      193     4728    3               CASE(9);            /* WARN CODE                          */
      194     4729    3                 OPTS.WARN_CODE = OPT$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE;
      195     4730    3               CASE(10);           /* DIAGNOSTIC option                  */
      196     4731    3                 OPTS.IOTYPE = 1;
      197     4732    3               CASE(11);           /* DELETED option                     */
      198     4733    3                 OPTS.IOTYPE = 2;
      199     4734    3               CASE(12);           /* VSECTOR option                     */
      200     4735    3                 CALL KPU$RANGE(OPT$ -> OUT$BLK,I,J);
      201     4736    3                 CALL KPU$VSEC2DISK(OPTS.SIDE_LO,
      202     4737    3                                    OPTS.TRACK_LO,
      203     4738    3                                    OPTS.SECTOR_LO,
      204     4739    3                                    I,TRASH);
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:33   
      205     4740    3                 CALL KPU$VSEC2DISK(OPTS.SIDE_HI,
      206     4741    3                                    OPTS.TRACK_HI,
      207     4742    3                                    OPTS.SECTOR_HI,
      208     4743    3                                    J,TRASH);
      209     4744    3               END;                /* END DO CASE                        */
      210     4745    2            END;                   /* END DO INDEX                       */
      211     4746        %EJECT;
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:34   
      212     4747        /**/
      213     4748        /*  Check limits for processed options  */
      214     4749        /**/
      215     4750    1         IF OPTS.SECTOR_HI < OPTS.SECTOR_LO
      216     4751    1          OR OPTS.TRACK_HI < OPTS.TRACK_LO
      217     4752    1          OR OPTS.ANNOUNCE_LIMIT > 100
      218     4753    1          OR (OPTS.SECTOR_SIZE~=128 AND OPTS.SECTOR_SIZE~=256)
      219     4754    1          THEN
      220     4755    2            DO;
      221     4756    2              CALL KPE$ERROR( %E$BAD_OPT_VAL );
      222     4757    2              ALTRETURN;
      223     4758    2              END;
      224     4759        /**/
      225     4760        /*  Munge options that need it.  */
      226     4761        /**/
      227     4762    1         IF OPTS.SECTOR_SIZE=128 THEN
      228     4763    1            OPTS.SSIZE_CODE = 0;
      229     4764    1         ELSE
      230     4765    1            OPTS.SSIZE_CODE = 1;
      231     4766        /**/
      232     4767    1         RETURN;
      233     4768    1   END KPU$OPTIONS;
      234     4769        %EOD;

PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:35   
--  Include file information  --

   XU_SUBS_C.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPU$OPTIONS.

   Procedure KPU$OPTIONS requires 192 words for executable code.
   Procedure KPU$OPTIONS requires 16 words of local(AUTO) storage.

PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:36   

 Object Unit name= KPU$OPTIONS                                File name= KPU$UTIL.:E05TOU
 UTS= JUL 30 '97 01:22:47.24 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   192    300  KPU$OPTIONS
    2  RoData even  none     2      2  KPU$OPTIONS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  KPU$OPTIONS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 KPU$RANGE
         yes           Std       2 KPD$DISK_TYPE
         yes           Std       5 KPU$VSEC2DISK
 yes     yes           Std       1 KPE$ERROR
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:37   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INBUF                              KP_RU_OUTBUF
     KP_RU_KEY                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:38   


      131        1        /*T***********************************************************/
      132        2        /*T*                                                         */
      133        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      134        4        /*T*                                                         */
      135        5        /*T***********************************************************/
      136        6        /*X* DMC,DFC */
      137        7        KPU$OPTIONS: PROC(OPTS,PART$) ALTRET ;

      7  1 000000   000000 700200 xent  KPU$OPTIONS  TSX0  ! X66_AUTO_2
         1 000001   000020 000002                    ZERO    16,2

      138        8        /**/
      139        9        /*  Include files  */
      140       10        /**/
      141       11        %INCLUDE XU_MACRO_C;
      142     3117        %INCLUDE KP_DATA_R;
      143     4369        %INCLUDE XU_SUBS_C;
      144     4461        /**/
      145     4462        /*  PARAMETERS  */
      146     4463        /**/
      147     4464        %KP_OPTIONS (FPTN=OPTS,STCLASS="");
      148     4497    1   DCL PART$ PTR;
      149     4498        /**/
      150     4499        /*  BASED  */
      151     4500        /**/
      152     4501        %PARSE$OUT    ( NAME    = OUT$BLK,
      153     4502                        STCLASS = BASED );
      154     4547        %PARSE$SYM(NAME=OUT$SYM,STCLASS=BASED);
      155     4585        /**/
      156     4586        /*  LOCAL AUTO  */
      157     4587        /**/
      158     4588    1   DCL I SBIN WORD;
      159     4589    1   DCL J SBIN WORD;
      160     4590    1   DCL OPT SBIN WORD;
      161     4591    1   DCL OPT$ PTR;
      162     4592    1   DCL TRASH SBIN;
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:39   
      163     4593        /**/
      164     4594        /*  ENTRY DCLS  */
      165     4595        /**/
      166     4596        %KP_ENTRIES (OMIT=KPU$OPTIONS);
      167     4702        /**/
      168     4703    2         DO OPT = 0 TO PART$ -> OUT$BLK.NSUBLKS -1;

   4703  1 000002   200007 450100                    STZ     OPT,,AUTO
         1 000003   000237 710000 1                  TRA     s:4745+1

      169     4704    2            OPT$ = PART$ -> OUT$BLK.SUBLK$(OPT);

   4704  1 000004   200004 470500                    LDP0    @PART$,,AUTO
         1 000005   000000 471500                    LDP1    0,,PR0
         1 000006   200007 720100                    LXL0    OPT,,AUTO
         1 000007   100003 236110                    LDQ     3,X0,PR1
         1 000010   200010 756100                    STQ     OPT$,,AUTO

      170     4705    3            DO CASE( OPT$ -> OUT$BLK.CODE);

   4705  1 000011   200010 473500                    LDP3    OPT$,,AUTO
         1 000012   300000 721100                    LXL1    0,,PR3
         1 000013   000015 101003                    CMPX1   13,DU
         1 000014   000016 602011 1                  TNC     s:4705+5,X1
         1 000015   000236 710000 1                  TRA     s:4745
         1 000016   000236 710000 1                  TRA     s:4745
         1 000017   000033 710000 1                  TRA     s:4707
         1 000020   000046 710000 1                  TRA     s:4710
         1 000021   000062 710000 1                  TRA     s:4713
         1 000022   000074 710000 1                  TRA     s:4716
         1 000023   000100 710000 1                  TRA     s:4718
         1 000024   000114 710000 1                  TRA     s:4721
         1 000025   000126 710000 1                  TRA     s:4724
         1 000026   000143 710000 1                  TRA     s:4727
         1 000027   000147 710000 1                  TRA     s:4729
         1 000030   000155 710000 1                  TRA     s:4731
         1 000031   000161 710000 1                  TRA     s:4733
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:40   
         1 000032   000165 710000 1                  TRA     s:4735

      171     4706    3               CASE(1);            /* TRACK                              */

      172     4707    3                 CALL KPU$RANGE(OPT$ -> OUT$BLK,

   4707  1 000033   200003 236100                    LDQ     @OPTS,,AUTO
         1 000034   000001 036003                    ADLQ    1,DU
         1 000035   200014 756100                    STQ     TRASH+3,,AUTO
         1 000036   200003 236100                    LDQ     @OPTS,,AUTO
         1 000037   200010 235100                    LDA     OPT$,,AUTO
         1 000040   200012 757100                    STAQ    TRASH+1,,AUTO
         1 000041   200012 630500                    EPPR0   TRASH+1,,AUTO
         1 000042   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000043   000000 701000 xent               TSX1    KPU$RANGE
         1 000044   000000 011000                    NOP     0
         1 000045   000236 710000 1                  TRA     s:4745

      173     4708    3                  OPTS.TRACK_LO,OPTS.TRACK_HI);
      174     4709    3               CASE(2);            /* SECTOR                             */

      175     4710    3                 CALL KPU$RANGE(OPT$ -> OUT$BLK,

   4710  1 000046   200003 236100                    LDQ     @OPTS,,AUTO
         1 000047   000003 036003                    ADLQ    3,DU
         1 000050   200014 756100                    STQ     TRASH+3,,AUTO
         1 000051   200003 236100                    LDQ     @OPTS,,AUTO
         1 000052   000002 036003                    ADLQ    2,DU
         1 000053   200010 235100                    LDA     OPT$,,AUTO
         1 000054   200012 757100                    STAQ    TRASH+1,,AUTO
         1 000055   200012 630500                    EPPR0   TRASH+1,,AUTO
         1 000056   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000057   000000 701000 xent               TSX1    KPU$RANGE
         1 000060   000000 011000                    NOP     0
         1 000061   000236 710000 1                  TRA     s:4745

      176     4711    3                  OPTS.SECTOR_LO,OPTS.SECTOR_HI);
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:41   
      177     4712    3               CASE(3);                    /* ANNOUNCE threshold                 */

      178     4713    3                 CALL KPU$RANGE(OPT$ -> OUT$BLK,

   4713  1 000062   200003 236100                    LDQ     @OPTS,,AUTO
         1 000063   000006 036003                    ADLQ    6,DU
         1 000064   200014 756100                    STQ     TRASH+3,,AUTO
         1 000065   200010 235100                    LDA     OPT$,,AUTO
         1 000066   200012 757100                    STAQ    TRASH+1,,AUTO
         1 000067   200012 630500                    EPPR0   TRASH+1,,AUTO
         1 000070   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000071   000000 701000 xent               TSX1    KPU$RANGE
         1 000072   000000 011000                    NOP     0
         1 000073   000236 710000 1                  TRA     s:4745

      179     4714    3                  OPTS.ANNOUNCE_LIMIT,OPTS.ANNOUNCE_LIMIT);
      180     4715    3               CASE(4);            /* WAIT option                        */

      181     4716    3                 OPTS.USER_WAIT = 1;

   4716  1 000074   000001 235007                    LDA     1,DL
         1 000075   200003 474500                    LDP4    @OPTS,,AUTO
         1 000076   400007 755100                    STA     7,,PR4
         1 000077   000236 710000 1                  TRA     s:4745

      182     4717    3               CASE(5);            /* SIDE                               */

      183     4718    3                 CALL KPU$RANGE(OPT$ -> OUT$BLK,

   4718  1 000100   200003 236100                    LDQ     @OPTS,,AUTO
         1 000101   000005 036003                    ADLQ    5,DU
         1 000102   200014 756100                    STQ     TRASH+3,,AUTO
         1 000103   200003 236100                    LDQ     @OPTS,,AUTO
         1 000104   000004 036003                    ADLQ    4,DU
         1 000105   200010 235100                    LDA     OPT$,,AUTO
         1 000106   200012 757100                    STAQ    TRASH+1,,AUTO
         1 000107   200012 630500                    EPPR0   TRASH+1,,AUTO
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:42   
         1 000110   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000111   000000 701000 xent               TSX1    KPU$RANGE
         1 000112   000000 011000                    NOP     0
         1 000113   000236 710000 1                  TRA     s:4745

      184     4719    3                  OPTS.SIDE_LO,OPTS.SIDE_HI);
      185     4720    3               CASE(6);            /* SSIZE                              */

      186     4721    3                 CALL KPU$RANGE(OPT$ -> OUT$BLK,

   4721  1 000114   200003 236100                    LDQ     @OPTS,,AUTO
         1 000115   000010 036003                    ADLQ    8,DU
         1 000116   200014 756100                    STQ     TRASH+3,,AUTO
         1 000117   200010 235100                    LDA     OPT$,,AUTO
         1 000120   200012 757100                    STAQ    TRASH+1,,AUTO
         1 000121   200012 630500                    EPPR0   TRASH+1,,AUTO
         1 000122   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000123   000000 701000 xent               TSX1    KPU$RANGE
         1 000124   000000 011000                    NOP     0
         1 000125   000236 710000 1                  TRA     s:4745

      187     4722    3                  OPTS.SECTOR_SIZE,OPTS.SECTOR_SIZE);
      188     4723    3               CASE(7);            /* TYPE                               */

      189     4724    3                 I = OPT$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE;

   4724  1 000126   300003 474500                    LDP4    3,,PR3
         1 000127   400000 236100                    LDQ     0,,PR4
         1 000130   777777 376007                    ANQ     -1,DL
         1 000131   200005 756100                    STQ     I,,AUTO

      190     4725    3                 CALL KPD$DISK_TYPE(OPTS,I);

   4725  1 000132   200005 631500                    EPPR1   I,,AUTO
         1 000133   200013 451500                    STP1    TRASH+2,,AUTO
         1 000134   200003 236100                    LDQ     @OPTS,,AUTO
         1 000135   200012 756100                    STQ     TRASH+1,,AUTO
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:43   
         1 000136   200012 630500                    EPPR0   TRASH+1,,AUTO
         1 000137   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000140   000000 701000 xent               TSX1    KPD$DISK_TYPE
         1 000141   000000 011000                    NOP     0
         1 000142   000236 710000 1                  TRA     s:4745

      191     4726    3               CASE(8);            /* NWARN                              */

      192     4727    3                 OPTS.WARN_CODE = 3;

   4727  1 000143   000003 235007                    LDA     3,DL
         1 000144   200003 474500                    LDP4    @OPTS,,AUTO
         1 000145   400012 755100                    STA     10,,PR4
         1 000146   000236 710000 1                  TRA     s:4745

      193     4728    3               CASE(9);            /* WARN CODE                          */

      194     4729    3                 OPTS.WARN_CODE = OPT$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE;

   4729  1 000147   300003 474500                    LDP4    3,,PR3
         1 000150   400000 236100                    LDQ     0,,PR4
         1 000151   777777 376007                    ANQ     -1,DL
         1 000152   200003 475500                    LDP5    @OPTS,,AUTO
         1 000153   500012 756100                    STQ     10,,PR5
         1 000154   000236 710000 1                  TRA     s:4745

      195     4730    3               CASE(10);           /* DIAGNOSTIC option                  */

      196     4731    3                 OPTS.IOTYPE = 1;

   4731  1 000155   000001 235007                    LDA     1,DL
         1 000156   200003 474500                    LDP4    @OPTS,,AUTO
         1 000157   400013 755100                    STA     11,,PR4
         1 000160   000236 710000 1                  TRA     s:4745

      197     4732    3               CASE(11);           /* DELETED option                     */

PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:44   
      198     4733    3                 OPTS.IOTYPE = 2;

   4733  1 000161   000002 235007                    LDA     2,DL
         1 000162   200003 474500                    LDP4    @OPTS,,AUTO
         1 000163   400013 755100                    STA     11,,PR4
         1 000164   000236 710000 1                  TRA     s:4745

      199     4734    3               CASE(12);           /* VSECTOR option                     */

      200     4735    3                 CALL KPU$RANGE(OPT$ -> OUT$BLK,I,J);

   4735  1 000165   200006 634500                    EPPR4   J,,AUTO
         1 000166   200014 454500                    STP4    TRASH+3,,AUTO
         1 000167   200005 631500                    EPPR1   I,,AUTO
         1 000170   200013 451500                    STP1    TRASH+2,,AUTO
         1 000171   200012 756100                    STQ     TRASH+1,,AUTO
         1 000172   200012 630500                    EPPR0   TRASH+1,,AUTO
         1 000173   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000174   000000 701000 xent               TSX1    KPU$RANGE
         1 000175   000000 011000                    NOP     0

      201     4736    3                 CALL KPU$VSEC2DISK(OPTS.SIDE_LO,

   4736  1 000176   200011 630500                    EPPR0   TRASH,,AUTO
         1 000177   200016 450500                    STP0    TRASH+5,,AUTO
         1 000200   200005 631500                    EPPR1   I,,AUTO
         1 000201   200015 451500                    STP1    TRASH+4,,AUTO
         1 000202   200003 236100                    LDQ     @OPTS,,AUTO
         1 000203   000002 036003                    ADLQ    2,DU
         1 000204   200014 756100                    STQ     TRASH+3,,AUTO
         1 000205   200003 236100                    LDQ     @OPTS,,AUTO
         1 000206   200013 756100                    STQ     TRASH+2,,AUTO
         1 000207   000004 036003                    ADLQ    4,DU
         1 000210   200012 756100                    STQ     TRASH+1,,AUTO
         1 000211   200012 630500                    EPPR0   TRASH+1,,AUTO
         1 000212   000023 631400 xsym               EPPR1   B_VECTNIL+19
         1 000213   000000 701000 xent               TSX1    KPU$VSEC2DISK
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:45   
         1 000214   000000 011000                    NOP     0

      202     4737    3                                    OPTS.TRACK_LO,
      203     4738    3                                    OPTS.SECTOR_LO,
      204     4739    3                                    I,TRASH);
      205     4740    3                 CALL KPU$VSEC2DISK(OPTS.SIDE_HI,

   4740  1 000215   200011 630500                    EPPR0   TRASH,,AUTO
         1 000216   200016 450500                    STP0    TRASH+5,,AUTO
         1 000217   200006 631500                    EPPR1   J,,AUTO
         1 000220   200015 451500                    STP1    TRASH+4,,AUTO
         1 000221   200003 236100                    LDQ     @OPTS,,AUTO
         1 000222   000003 036003                    ADLQ    3,DU
         1 000223   200014 756100                    STQ     TRASH+3,,AUTO
         1 000224   200003 236100                    LDQ     @OPTS,,AUTO
         1 000225   000001 036003                    ADLQ    1,DU
         1 000226   200013 756100                    STQ     TRASH+2,,AUTO
         1 000227   200003 236100                    LDQ     @OPTS,,AUTO
         1 000230   000005 036003                    ADLQ    5,DU
         1 000231   200012 756100                    STQ     TRASH+1,,AUTO
         1 000232   200012 630500                    EPPR0   TRASH+1,,AUTO
         1 000233   000023 631400 xsym               EPPR1   B_VECTNIL+19
         1 000234   000000 701000 xent               TSX1    KPU$VSEC2DISK
         1 000235   000000 011000                    NOP     0

      206     4741    3                                    OPTS.TRACK_HI,
      207     4742    3                                    OPTS.SECTOR_HI,
      208     4743    3                                    J,TRASH);
      209     4744    3               END;                /* END DO CASE                        */

      210     4745    2            END;                   /* END DO INDEX                       */

   4745  1 000236   200007 054100                    AOS     OPT,,AUTO
         1 000237   200004 470500                    LDP0    @PART$,,AUTO
         1 000240   000000 471500                    LDP1    0,,PR0
         1 000241   100001 236100                    LDQ     1,,PR1
         1 000242   000022 772000                    QRL     18
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:46   
         1 000243   200007 116100                    CMPQ    OPT,,AUTO
         1 000244   000004 605400 1                  TPNZ    s:4704

      211     4746        %EJECT;
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:47   
      212     4747        /**/
      213     4748        /*  Check limits for processed options  */
      214     4749        /**/
      215     4750    1         IF OPTS.SECTOR_HI < OPTS.SECTOR_LO

   4750  1 000245   200003 473500                    LDP3    @OPTS,,AUTO
         1 000246   300003 236100                    LDQ     3,,PR3
         1 000247   300002 116100                    CMPQ    2,,PR3
         1 000250   000264 604000 1                  TMI     s:4756
         1 000251   300001 236100                    LDQ     1,,PR3
         1 000252   300000 116100                    CMPQ    0,,PR3
         1 000253   000264 604000 1                  TMI     s:4756
         1 000254   300006 235100                    LDA     6,,PR3
         1 000255   000144 115007                    CMPA    100,DL
         1 000256   000264 605400 1                  TPNZ    s:4756
         1 000257   300010 235100                    LDA     8,,PR3
         1 000260   000200 115007                    CMPA    128,DL
         1 000261   000271 600000 1                  TZE     s:4762
         1 000262   000400 115007                    CMPA    256,DL
         1 000263   000271 600000 1                  TZE     s:4762

      216     4751    1          OR OPTS.TRACK_HI < OPTS.TRACK_LO
      217     4752    1          OR OPTS.ANNOUNCE_LIMIT > 100
      218     4753    1          OR (OPTS.SECTOR_SIZE~=128 AND OPTS.SECTOR_SIZE~=256)
      219     4754    1          THEN
      220     4755    2            DO;

      221     4756    2              CALL KPE$ERROR( %E$BAD_OPT_VAL );

   4756  1 000264   000001 630400 2                  EPPR0   1
         1 000265   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000266   000000 701000 xent               TSX1    KPE$ERROR
         1 000267   000000 011000                    NOP     0

      222     4757    2              ALTRETURN;

   4757  1 000270   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:48   

      223     4758    2              END;
      224     4759        /**/
      225     4760        /*  Munge options that need it.  */
      226     4761        /**/
      227     4762    1         IF OPTS.SECTOR_SIZE=128 THEN

   4762  1 000271   000200 115007                    CMPA    128,DL
         1 000272   000275 601000 1                  TNZ     s:4765

      228     4763    1            OPTS.SSIZE_CODE = 0;

   4763  1 000273   300011 450100                    STZ     9,,PR3
         1 000274   000277 710000 1                  TRA     s:4767

      229     4764    1         ELSE
      230     4765    1            OPTS.SSIZE_CODE = 1;

   4765  1 000275   000001 235007                    LDA     1,DL
         1 000276   300011 755100                    STA     9,,PR3

      231     4766        /**/
      232     4767    1         RETURN;

   4767  1 000277   000000 702200 xent               TSX2  ! X66_ARET
      233     4768    1   END KPU$OPTIONS;
      234     4769        %EOD;

PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:49   
--  Include file information  --

   XU_SUBS_C.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPU$OPTIONS.
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:50   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @OPTS                      4-0-0/w PTR         r     1 @PART$
     5-0-0/w SBIN        r     1 I                          6-0-0/w SBIN        r     1 J
     7-0-0/w SBIN        r     1 OPT                       10-0-0/w PTR         r     1 OPT$
    *0-0-0/w STRC(468)   r     1 OPTS                      *0-0-0/w PTR         r     1 PART$
    11-0-0/w SBIN        r     1 TRASH

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 OUT$BLK                    0-0-0/w ASTR(153)   r     1 OUT$SYM


   Procedure KPU$OPTIONS requires 192 words for executable code.
   Procedure KPU$OPTIONS requires 16 words of local(AUTO) storage.
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:51   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:52   
          MINI XREF LISTING

I
      4588**DCL      4724<<ASSIGN   4725<>CALL     4735<>CALL     4736<>CALL
J
      4589**DCL      4735<>CALL     4740<>CALL
KPD$DISK_TYPE
      4613**DCL-ENT  4725--CALL
KPE$ERROR
      4619**DCL-ENT  4756--CALL
KPU$RANGE
      4659**DCL-ENT  4707--CALL     4710--CALL     4713--CALL     4718--CALL     4721--CALL     4735--CALL
KPU$VSEC2DISK
      4689**DCL-ENT  4736--CALL     4740--CALL
KP_EXIT.V.STEPCC#
      4040**DCL      4040--REDEF
KP_INBUF
      3962**DCL      3962--REDEF
KP_RU_KEY
      3970**DCL      3971--REDEF
KP_RU_KEY.NODE
      3970**DCL      3970--REDEF
KP_RU_KEY.PAGE
      3971**DCL      3971--REDEF
KP_RU_OUTBUF
      3964**DCL      3964--REDEF
OPT
      4590**DCL      4703<<DOINDEX  4704>>ASSIGN
OPT$
      4591**DCL      4704<<ASSIGN   4705>>DOCASE   4707>>CALL     4710>>CALL     4713>>CALL     4718>>CALL
      4721>>CALL     4724>>ASSIGN   4729>>ASSIGN   4735>>CALL
OPTS
      4478**DCL         7--PROC     4725<>CALL
OPTS.ANNOUNCE_LIMIT
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:53   
      4485**DCL      4713<>CALL     4713<>CALL     4750>>IF
OPTS.IOTYPE
      4494**DCL      4731<<ASSIGN   4733<<ASSIGN
OPTS.SECTOR_HI
      4482**DCL      4710<>CALL     4740<>CALL     4750>>IF
OPTS.SECTOR_LO
      4481**DCL      4710<>CALL     4736<>CALL     4750>>IF
OPTS.SECTOR_SIZE
      4487**DCL      4721<>CALL     4721<>CALL     4750>>IF       4750>>IF       4762>>IF
OPTS.SIDE_HI
      4484**DCL      4718<>CALL     4740<>CALL
OPTS.SIDE_LO
      4483**DCL      4718<>CALL     4736<>CALL
OPTS.SSIZE_CODE
      4488**DCL      4763<<ASSIGN   4765<<ASSIGN
OPTS.TRACK_HI
      4480**DCL      4707<>CALL     4740<>CALL     4750>>IF
OPTS.TRACK_LO
      4479**DCL      4707<>CALL     4736<>CALL     4750>>IF
OPTS.USER_WAIT
      4486**DCL      4716<<ASSIGN
OPTS.WARN_CODE
      4489**DCL      4727<<ASSIGN   4729<<ASSIGN
OUT$BLK
      4508**DCL      4707<>CALL     4710<>CALL     4713<>CALL     4718<>CALL     4721<>CALL     4735<>CALL
OUT$BLK.CODE
      4516**DCL      4705>>DOCASE   4724>>ASSIGN   4729>>ASSIGN
OUT$BLK.NSUBLKS
      4520**DCL      4703>>DOINDEX
OUT$BLK.SUBLK$
      4541**DCL      4704>>ASSIGN   4724>>ASSIGN   4729>>ASSIGN
OUT$SYM.COUNT
      4577**DCL      4580--IMP-SIZ
PART$
      4497**DCL         7--PROC     4703>>DOINDEX  4704>>ASSIGN
TRASH
PL6.E3A0      #003=KPU$OPTIONS File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:22 Page:54   
      4592**DCL      4736<>CALL     4740<>CALL

PL6.E3A0      #004=KPU$RANGE File=KPU$UTIL.:E05TSI                               WED 07/30/97 01:23 Page:55   
      235        1        /*T***********************************************************/
      236        2        /*T*                                                         */
      237        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      238        4        /*T*                                                         */
      239        5        /*T***********************************************************/
      240        6        /*F*     NAME:          KPU$RANGE
      241        7                 PURPOSE:       Process a parse block that specifies a number/range.
      242        8        */
      243        9        KPU$RANGE: PROC(OUT_BLK,LO_NO,HI_NO) ALTRET;
      244       10        /**/
      245       11        /*  INCLUDE FILES  */
      246       12        /**/
      247       13        %INCLUDE XU_MACRO_C;
      248     3119        /**/
      249     3120        /*  PARAMETERS  */
      250     3121        /**/
      251     3122        %PARSE$OUT(NAME=OUT_BLK,STCLASS="");
      252     3167    1   DCL LO_NO UBIN WORD;
      253     3168    1   DCL HI_NO UBIN WORD;
      254     3169        /**/
      255     3170        /*  BASED DATA  */
      256     3171        /**/
      257     3172        %PARSE$SYM(NAME=OUT$SYM,STCLASS=BASED);
      258     3210        /**/
      259     3211    1       CALL CHARBIN(LO_NO,
      260     3212    1        SUBSTR(OUT_BLK.SUBLK$(0) ->
      261     3213    1        OUT$SYM.TEXT,0,
      262     3214    1        OUT_BLK.SUBLK$(0) ->
      263     3215    1        OUT$SYM.COUNT) );
      264     3216    1       IF OUT_BLK.NSUBLKS > 1
      265     3217    1        THEN             /* Upper limit specified              */
      266     3218    1          CALL CHARBIN(HI_NO,
      267     3219    1           SUBSTR(OUT_BLK.SUBLK$(1) ->
      268     3220    1           OUT$SYM.TEXT,0,
      269     3221    1           OUT_BLK.SUBLK$(1) ->
      270     3222    1           OUT$SYM.COUNT) );
      271     3223    1        ELSE                               /* NO upper limit:  assume HI=LO      */
PL6.E3A0      #004=KPU$RANGE File=KPU$UTIL.:E05TSI                               WED 07/30/97 01:23 Page:56   
      272     3224    1           HI_NO = LO_NO;
      273     3225    1       RETURN;
      274     3226    1       END KPU$RANGE;
      275     3227        %EOD;

PL6.E3A0      #004=KPU$RANGE File=KPU$UTIL.:E05TSI                               WED 07/30/97 01:23 Page:57   
--  Include file information  --

   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure KPU$RANGE.

   Procedure KPU$RANGE requires 30 words for executable code.
   Procedure KPU$RANGE requires 8 words of local(AUTO) storage.

PL6.E3A0      #004=KPU$RANGE File=KPU$UTIL.:E05TSI                               WED 07/30/97 01:23 Page:58   

 Object Unit name= KPU$RANGE                                  File name= KPU$UTIL.:E05TOU
 UTS= JUL 30 '97 01:23:09.12 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    30     36  KPU$RANGE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        3  KPU$RANGE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET
PL6.E3A0      #004=KPU$RANGE File=KPU$UTIL.:E05TSI                               WED 07/30/97 01:23 Page:59   


      235        1        /*T***********************************************************/
      236        2        /*T*                                                         */
      237        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      238        4        /*T*                                                         */
      239        5        /*T***********************************************************/
      240        6        /*F*     NAME:          KPU$RANGE
      241        7                 PURPOSE:       Process a parse block that specifies a number/range.
      242        8        */
      243        9        KPU$RANGE: PROC(OUT_BLK,LO_NO,HI_NO) ALTRET;

      9  0 000000   000000 700200 xent  KPU$RANGE    TSX0  ! X66_AUTO_3
         0 000001   000010 000003                    ZERO    8,3

      244       10        /**/
      245       11        /*  INCLUDE FILES  */
      246       12        /**/
      247       13        %INCLUDE XU_MACRO_C;
      248     3119        /**/
      249     3120        /*  PARAMETERS  */
      250     3121        /**/
      251     3122        %PARSE$OUT(NAME=OUT_BLK,STCLASS="");
      252     3167    1   DCL LO_NO UBIN WORD;
      253     3168    1   DCL HI_NO UBIN WORD;
      254     3169        /**/
      255     3170        /*  BASED DATA  */
      256     3171        /**/
      257     3172        %PARSE$SYM(NAME=OUT$SYM,STCLASS=BASED);
      258     3210        /**/
      259     3211    1       CALL CHARBIN(LO_NO,

   3211  0 000002   200003 470500                    LDP0    @OUT_BLK,,AUTO
         0 000003   000003 471500                    LDP1    3,,PR0
         0 000004   100004 236100                    LDQ     4,,PR1
         0 000005   000033 772000                    QRL     27
         0 000006   000000 620006                    EAX0    0,QL
         0 000007   000100 305540                    DTB
PL6.E3A0      #004=KPU$RANGE File=KPU$UTIL.:E05TSI                               WED 07/30/97 01:23 Page:60   
         0 000010   100004 230010                    NDSC9   4,,PR1                   cn=1,s=nosgn,sf=0,n=*X0
         0 000011   200006 000010                    NDSC9   @HI_NO+1,,AUTO           cn=0,s=lsgnf,sf=0,n=8
         0 000012   200004 471500                    LDP1    @LO_NO,,AUTO
         0 000013   200007 235100                    LDA     @HI_NO+2,,AUTO
         0 000014   100000 755100                    STA     0,,PR1

      260     3212    1        SUBSTR(OUT_BLK.SUBLK$(0) ->
      261     3213    1        OUT$SYM.TEXT,0,
      262     3214    1        OUT_BLK.SUBLK$(0) ->
      263     3215    1        OUT$SYM.COUNT) );
      264     3216    1       IF OUT_BLK.NSUBLKS > 1

   3216  0 000015   000001 220100                    LDX0    1,,PR0
         0 000016   000002 100003                    CMPX0   2,DU
         0 000017   000033 602000 0                  TNC     s:3224

      265     3217    1        THEN             /* Upper limit specified              */
      266     3218    1          CALL CHARBIN(HI_NO,

   3218  0 000020   000004 473500                    LDP3    4,,PR0
         0 000021   300004 236100                    LDQ     4,,PR3
         0 000022   000033 772000                    QRL     27
         0 000023   000000 621006                    EAX1    0,QL
         0 000024   000100 305540                    DTB
         0 000025   300004 230011                    NDSC9   4,,PR3                   cn=1,s=nosgn,sf=0,n=*X1
         0 000026   200006 000010                    NDSC9   @HI_NO+1,,AUTO           cn=0,s=lsgnf,sf=0,n=8
         0 000027   200005 473500                    LDP3    @HI_NO,,AUTO
         0 000030   200007 235100                    LDA     @HI_NO+2,,AUTO
         0 000031   300000 755100                    STA     0,,PR3
         0 000032   000035 710000 0                  TRA     s:3225

      267     3219    1           SUBSTR(OUT_BLK.SUBLK$(1) ->
      268     3220    1           OUT$SYM.TEXT,0,
      269     3221    1           OUT_BLK.SUBLK$(1) ->
      270     3222    1           OUT$SYM.COUNT) );
      271     3223    1        ELSE                               /* NO upper limit:  assume HI=LO      */
      272     3224    1           HI_NO = LO_NO;
PL6.E3A0      #004=KPU$RANGE File=KPU$UTIL.:E05TSI                               WED 07/30/97 01:23 Page:61   

   3224  0 000033   200005 473500                    LDP3    @HI_NO,,AUTO
         0 000034   300000 755100                    STA     0,,PR3

      273     3225    1       RETURN;

   3225  0 000035   000000 702200 xent               TSX2  ! X66_ARET
      274     3226    1       END KPU$RANGE;
      275     3227        %EOD;

PL6.E3A0      #004=KPU$RANGE File=KPU$UTIL.:E05TSI                               WED 07/30/97 01:23 Page:62   
--  Include file information  --

   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure KPU$RANGE.
PL6.E3A0      #004=KPU$RANGE File=KPU$UTIL.:E05TSI                               WED 07/30/97 01:23 Page:63   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @HI_NO                     4-0-0/w PTR         r     1 @LO_NO
     3-0-0/w PTR         r     1 @OUT_BLK                  *0-0-0/w UBIN        r     1 HI_NO
    *0-0-0/w UBIN        r     1 LO_NO                     *0-0-0/w STRC(144)   r     1 OUT_BLK

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(153)   r     1 OUT$SYM


   Procedure KPU$RANGE requires 30 words for executable code.
   Procedure KPU$RANGE requires 8 words of local(AUTO) storage.
PL6.E3A0      #004=KPU$RANGE File=KPU$UTIL.:E05TSI                               WED 07/30/97 01:23 Page:64   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=KPU$RANGE File=KPU$UTIL.:E05TSI                               WED 07/30/97 01:23 Page:65   
          MINI XREF LISTING

HI_NO
      3168**DCL         9--PROC     3218<<CALLBLT  3224<<ASSIGN
LO_NO
      3167**DCL         9--PROC     3211<<CALLBLT  3224>>ASSIGN
OUT$SYM.COUNT
      3202**DCL      3205--IMP-SIZ  3211>>CALLBLT  3211>>CALLBLT  3218>>CALLBLT  3218>>CALLBLT
OUT$SYM.TEXT
      3205**DCL      3211>>CALLBLT  3218>>CALLBLT
OUT_BLK
      3128**DCL         9--PROC
OUT_BLK.NSUBLKS
      3140**DCL      3216>>IF
OUT_BLK.SUBLK$
      3161**DCL      3211>>CALLBLT  3211>>CALLBLT  3211>>CALLBLT  3218>>CALLBLT  3218>>CALLBLT  3218>>CALLBLT

PL6.E3A0      #005=KPU$SECURITY File=KPU$UTIL.:E05TSI                            WED 07/30/97 01:23 Page:66   
      276        1        /*T***********************************************************/
      277        2        /*T*                                                         */
      278        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      279        4        /*T*                                                         */
      280        5        /*T***********************************************************/
      281        6        /*F*     NAME:          KPU$SECURITY
      282        7                 PURPOSE:       Insure that the user is authorized to perform
      283        8                                the command he has issued.
      284        9        */
      285       10        KPU$SECURITY: PROC(OPERATION) ALTRET;
      286       11        /**/
      287       12        /*  INCLUDE FILES  */
      288       13        /**/
      289       14        %INCLUDE KP_DATA_R;
      290     1266        %INCLUDE B$JIT;
      291     1556        %INCLUDE CP_6_SUBS;
      292     2096        /**/
      293     2097        /*  PARAMETERS  */
      294     2098        /**/
      295     2099    1   DCL OPERATION SBIN;
      296     2100        /**/
      297     2101        /*  ENTRY DCLS  */
      298     2102        /**/
      299     2103        %KP_ENTRIES (OMIT=KPU$SECURITY);
      300     2209        /**/
      301     2210        /*  SYMREFS  */
      302     2211        /**/
      303     2212    1   DCL B$JIT$ PTR SYMREF;
      304     2213        %EJECT;
PL6.E3A0      #005=KPU$SECURITY File=KPU$UTIL.:E05TSI                            WED 07/30/97 01:23 Page:67   
      305     2214    1       IF B$JIT$ -> B$JIT.PPRIV & %PPR_PIGETTE# THEN
      306     2215    1          GOTO ITS_OK;
      307     2216    2       DO CASE(OPERATION);
      308     2217    2          CASE(%KP_PRIV_RD#);
      309     2218    2            IF NOT (B$JIT$ -> B$JIT.PRIV.AUTH & (%PR_CFEP#|%PR_MFEP#)) THEN
      310     2219    2               GOTO BOGART;
      311     2220    2          CASE(%KP_PRIV_WR#);
      312     2221    2            IF NOT (B$JIT$ -> B$JIT.PRIV.AUTH & %PR_MFEP#) THEN
      313     2222    2               GOTO BOGART;
      314     2223    2          END;                             /* END CASE                           */
      315     2224    1   ITS_OK: ;
      316     2225    1       RETURN;
      317     2226        /**/
      318     2227    1   BOGART: ;
      319     2228    1       CALL KPE$ERROR (%E$SECURITY_VIOLATION);
      320     2229    1       ALTRETURN;
      321     2230        /**/
      322     2231    1       END KPU$SECURITY;
      323     2232        %EOD;

PL6.E3A0      #005=KPU$SECURITY File=KPU$UTIL.:E05TSI                            WED 07/30/97 01:23 Page:68   
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPU$SECURITY.

   Procedure KPU$SECURITY requires 28 words for executable code.
   Procedure KPU$SECURITY requires 4 words of local(AUTO) storage.

PL6.E3A0      #005=KPU$SECURITY File=KPU$UTIL.:E05TSI                            WED 07/30/97 01:23 Page:69   

 Object Unit name= KPU$SECURITY                               File name= KPU$UTIL.:E05TOU
 UTS= JUL 30 '97 01:23:19.32 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      3      3  KPU$SECURITY
    2   Proc  even  none    28     34  KPU$SECURITY
    3  RoData even  none     2      2  KPU$SECURITY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        1  KPU$SECURITY

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 KPE$ERROR
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
PL6.E3A0      #005=KPU$SECURITY File=KPU$UTIL.:E05TSI                            WED 07/30/97 01:23 Page:70   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INBUF                              KP_RU_OUTBUF
     KP_RU_KEY                             B$JIT$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #005=KPU$SECURITY File=KPU$UTIL.:E05TSI                            WED 07/30/97 01:23 Page:71   


      276        1        /*T***********************************************************/
      277        2        /*T*                                                         */
      278        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      279        4        /*T*                                                         */
      280        5        /*T***********************************************************/
      281        6        /*F*     NAME:          KPU$SECURITY
      282        7                 PURPOSE:       Insure that the user is authorized to perform
      283        8                                the command he has issued.
      284        9        */
      285       10        KPU$SECURITY: PROC(OPERATION) ALTRET;

     10  2 000000   000000 700200 xent  KPU$SECURITY TSX0  ! X66_AUTO_1
         2 000001   000004 000001                    ZERO    4,1

      286       11        /**/
      287       12        /*  INCLUDE FILES  */
      288       13        /**/
      289       14        %INCLUDE KP_DATA_R;
      290     1266        %INCLUDE B$JIT;
      291     1556        %INCLUDE CP_6_SUBS;
      292     2096        /**/
      293     2097        /*  PARAMETERS  */
      294     2098        /**/
      295     2099    1   DCL OPERATION SBIN;
      296     2100        /**/
      297     2101        /*  ENTRY DCLS  */
      298     2102        /**/
      299     2103        %KP_ENTRIES (OMIT=KPU$SECURITY);
      300     2209        /**/
      301     2210        /*  SYMREFS  */
      302     2211        /**/
      303     2212    1   DCL B$JIT$ PTR SYMREF;
      304     2213        %EJECT;
PL6.E3A0      #005=KPU$SECURITY File=KPU$UTIL.:E05TSI                            WED 07/30/97 01:23 Page:72   
      305     2214    1       IF B$JIT$ -> B$JIT.PPRIV & %PPR_PIGETTE# THEN

   2214  2 000002   000000 470400 xsym               LDP0    B$JIT$
         2 000003   000020 236100                    LDQ     16,,PR0
         2 000004   000000 376000 1                  ANQ     0
         2 000005   000026 601000 2                  TNZ     ITS_OK

      306     2215    1          GOTO ITS_OK;
      307     2216    2       DO CASE(OPERATION);

   2216  2 000006   200003 471500                    LDP1    @OPERATION,,AUTO
         2 000007   100000 235100                    LDA     0,,PR1
         2 000010   000003 115007                    CMPA    3,DL
         2 000011   000013 602005 2                  TNC     s:2216+5,AL
         2 000012   000026 710000 2                  TRA     ITS_OK
         2 000013   000026 710000 2                  TRA     ITS_OK
         2 000014   000023 710000 2                  TRA     s:2221
         2 000015   000016 710000 2                  TRA     s:2218

      308     2217    2          CASE(%KP_PRIV_RD#);

      309     2218    2            IF NOT (B$JIT$ -> B$JIT.PRIV.AUTH & (%PR_CFEP#|%PR_MFEP#)) THEN

   2218  2 000016   000001 236000 1                  LDQ     1
         2 000017   000002 276000 1                  ORQ     2
         2 000020   000014 376100                    ANQ     12,,PR0
         2 000021   000027 600000 2                  TZE     BOGART
         2 000022   000026 710000 2                  TRA     ITS_OK

      310     2219    2               GOTO BOGART;
      311     2220    2          CASE(%KP_PRIV_WR#);

      312     2221    2            IF NOT (B$JIT$ -> B$JIT.PRIV.AUTH & %PR_MFEP#) THEN

   2221  2 000023   000014 236100                    LDQ     12,,PR0
         2 000024   000002 376000 1                  ANQ     2
         2 000025   000027 600000 2                  TZE     BOGART
PL6.E3A0      #005=KPU$SECURITY File=KPU$UTIL.:E05TSI                            WED 07/30/97 01:23 Page:73   

      313     2222    2               GOTO BOGART;
      314     2223    2          END;                             /* END CASE                           */

   2222  2 000026                       ITS_OK       null
      315     2224    1   ITS_OK: ;
      316     2225    1       RETURN;

   2225  2 000026   000000 702200 xent               TSX2  ! X66_ARET

   2222  2 000027                       BOGART       null
      317     2226        /**/
      318     2227    1   BOGART: ;
      319     2228    1       CALL KPE$ERROR (%E$SECURITY_VIOLATION);

   2228  2 000027   000001 630400 3                  EPPR0   1
         2 000030   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000031   000000 701000 xent               TSX1    KPE$ERROR
         2 000032   000000 011000                    NOP     0

      320     2229    1       ALTRETURN;

   2229  2 000033   000000 702200 xent               TSX2  ! X66_AALT
      321     2230        /**/
      322     2231    1       END KPU$SECURITY;
      323     2232        %EOD;

PL6.E3A0      #005=KPU$SECURITY File=KPU$UTIL.:E05TSI                            WED 07/30/97 01:23 Page:74   
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPU$SECURITY.
PL6.E3A0      #005=KPU$SECURITY File=KPU$UTIL.:E05TSI                            WED 07/30/97 01:23 Page:75   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @OPERATION                *0-0-0/w SBIN        r     1 OPERATION

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT


   Procedure KPU$SECURITY requires 28 words for executable code.
   Procedure KPU$SECURITY requires 4 words of local(AUTO) storage.
PL6.E3A0      #005=KPU$SECURITY File=KPU$UTIL.:E05TSI                            WED 07/30/97 01:23 Page:76   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=KPU$SECURITY File=KPU$UTIL.:E05TSI                            WED 07/30/97 01:23 Page:77   
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
      1374**DCL      1374--REDEF
B$JIT.ERR.MID
      1281**DCL      1281--REDEF
B$JIT.JRESPEAK
      1442**DCL      1443--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      1551**DCL      1551--REDEF    1552--REDEF
B$JIT.PNR
      1455**DCL      1455--REDEF
B$JIT.PPRIV
      1336**DCL      2214>>IF
B$JIT.PRIV.AUTH
      1321**DCL      2218>>IF       2221>>IF
B$JIT.TSLINE
      1549**DCL      1550--REDEF
B$JIT$
      2212**DCL      1275--IMP-PTR  2214>>IF       2218>>IF       2221>>IF
BOGART
      2222**LABEL    2219--GOTO     2222--GOTO
ITS_OK
      2222**LABEL    2215--GOTO
KPE$ERROR
      2126**DCL-ENT  2228--CALL
KP_EXIT.V.STEPCC#
       937**DCL       937--REDEF
KP_INBUF
       859**DCL       859--REDEF
KP_RU_KEY
       867**DCL       868--REDEF
KP_RU_KEY.NODE
       867**DCL       867--REDEF
PL6.E3A0      #005=KPU$SECURITY File=KPU$UTIL.:E05TSI                            WED 07/30/97 01:23 Page:78   
KP_RU_KEY.PAGE
       868**DCL       868--REDEF
KP_RU_OUTBUF
       861**DCL       861--REDEF
OPERATION
      2099**DCL        10--PROC     2216>>DOCASE

PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:79   
      324        1        /*T***********************************************************/
      325        2        /*T*                                                         */
      326        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      327        4        /*T*                                                         */
      328        5        /*T***********************************************************/
      329        6        /*X* DMC,DFC */
      330        7        KPU$GETVSEC: PROC(TRACK_ID,SECTOR_ID,SECTOR,SIZE,SIDE_ID) ALTRET ;
      331        8        /*
      332        9              This module provides I/O for 'virtual floppies' contained in CP-6
      333       10              keyed files.
      334       11              PARAMETERS:
      335       12                 TRACK_ID - track on the 'virtual floppy' to access.
      336       13                 SECTOR_ID - first sector on the 'virtual floppy' to access.
      337       14                 SIZE - number of consecutive sectors to transfer.
      338       15                 SECTOR - data buffer to be transfered.  Unpacked data in
      339       16                          CHAR(n) format.
      340       17        */
      341       18        /**/
      342       19        /*  Include files  */
      343       20        /**/
      344       21        %INCLUDE KP_DATA_R;
      345     1273        /**/
      346     1274        /*  PARAMETERS  */
      347     1275        /**/
      348     1276    1   DCL TRACK_ID UBIN WORD;
      349     1277    1   DCL SECTOR_ID UBIN WORD;
      350     1278    1   DCL SECTOR CHAR(%KP_MAX_BYTES_IN_SEC#);
      351     1279    1   DCL SIZE SBIN WORD;                     /* Number of sectors                  */
      352     1280    1   DCL SIDE_ID SBIN WORD;
      353     1281        /**/
      354     1282        /*  ENTRY DCLS  */
      355     1283        /**/
      356     1284        %KP_ENTRIES (OMIT=KPU$GETVSEC);
      357     1390        /**/
      358     1391        /*  BASED DATA  */
      359     1392        /**/
      360     1393    1   DCL B$SECTOR CHAR(IN_OPTS.SECTOR_SIZE) BASED CALIGNED;
PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:80   
      361     1394        /**/
      362     1395        /*  LOCAL AUTO  */
      363     1396        /**/
      364     1397    1   DCL SEC_OFFSET SBIN WORD;
      365     1398    1   DCL READING BIT(1) ALIGNED;
      366     1399        /**/
      367     1400    1         READING = '1'B;
      368     1401    1         GOTO COMMON_CODE;
      369     1402        /**/
      370     1403    1   KPU$PUTVSEC: ENTRY( TRACK_ID,SECTOR_ID,SECTOR,SIZE,SIDE_ID) ALTRET ;
      371     1404        /**/
      372     1405    1         READING = '0'B;
      373     1406        /**/
      374     1407    1   COMMON_CODE: ;
      375     1408    2         DO SEC_OFFSET = 0 TO SIZE -1;
      376     1409    2            KP_RU_KEY1.COUNT = 3;
      377     1410    2            KP_RU_KEY1.BYT1 = SIDE_ID;
      378     1411    2            KP_RU_KEY1.BYT3 = SECTOR_ID + SEC_OFFSET;
      379     1412    2            KP_RU_KEY1.BYT2 = TRACK_ID;
      380     1413    2            IF READING
      381     1414    2             THEN                          /* INPUT from virtual floppy          */
      382     1415    3              DO;
      383     1416    3                CALL KPI$IO_SVC (%KP_RU_KEYED_READ#) ALTRET(MONERR);
      384     1417    3                IF KP_INPUT_COUNT ~= IN_OPTS.SECTOR_SIZE
      385     1418    3                 THEN
      386     1419    4                   DO;
      387     1420    4                     CALL KPE$ERROR (%E$VD_RDSIZERR);
      388     1421    4                     GOTO BAILOUT;
      389     1422    4                     END;
      390     1423    3                PINCRC(ADDR(SECTOR),SEC_OFFSET*IN_OPTS.SECTOR_SIZE) -> B$SECTOR =
              1423                         KP_INBUF;
      391     1424    3                END;
      392     1425    2             ELSE                          /* OUTPUT to virtual floppy           */
      393     1426    3              DO;
      394     1427    3                KP_RU_RECL = IN_OPTS.SECTOR_SIZE;
      395     1428    3                KP_RU_OUTBUF = PINCRC(ADDR(SECTOR),SEC_OFFSET*IN_OPTS.SECTOR_SIZE) ->
              1428                         B$SECTOR;
PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:81   
      396     1429    3                CALL KPI$IO_SVC (%KP_RU_WRITE#) ALTRET(MONERR);
      397     1430    3                END;
      398     1431    2            END;                           /* Next sector, please                */
      399     1432    1           RETURN;
      400     1433        /**/
      401     1434    1   MONERR: ;                               /* Error already printed              */
      402     1435    1   BAILOUT: ;
      403     1436    1           ALTRETURN;
      404     1437    1           END KPU$GETVSEC;
      405     1438        %EOD;

PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:82   
--  Include file information  --

   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPU$GETVSEC.

   Procedure KPU$GETVSEC requires 67 words for executable code.
   Procedure KPU$GETVSEC requires 10 words of local(AUTO) storage.

PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:83   

 Object Unit name= KPU$GETVSEC                                File name= KPU$UTIL.:E05TOU
 UTS= JUL 30 '97 01:23:40.00 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    67    103  KPU$GETVSEC
    2  RoData even  none     5      5  KPU$GETVSEC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        5  KPU$GETVSEC
     1      5          yes     yes      Std        5  KPU$PUTVSEC

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 KPI$IO_SVC
 yes     yes           Std       1 KPE$ERROR
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:84   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INPUT_COUNT                        KP_INBUF
     KP_RU_OUTBUF                          KP_RU_RECL                            KP_RU_KEY
     IN_OPTS                               B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:85   


      324        1        /*T***********************************************************/
      325        2        /*T*                                                         */
      326        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      327        4        /*T*                                                         */
      328        5        /*T***********************************************************/
      329        6        /*X* DMC,DFC */
      330        7        KPU$GETVSEC: PROC(TRACK_ID,SECTOR_ID,SECTOR,SIZE,SIDE_ID) ALTRET ;

      7  1 000000   000000 700200 xent  KPU$GETVSEC  TSX0  ! X66_AUTO_5
         1 000001   000012 000005                    ZERO    10,5

      331        8        /*
      332        9              This module provides I/O for 'virtual floppies' contained in CP-6
      333       10              keyed files.
      334       11              PARAMETERS:
      335       12                 TRACK_ID - track on the 'virtual floppy' to access.
      336       13                 SECTOR_ID - first sector on the 'virtual floppy' to access.
      337       14                 SIZE - number of consecutive sectors to transfer.
      338       15                 SECTOR - data buffer to be transfered.  Unpacked data in
      339       16                          CHAR(n) format.
      340       17        */
      341       18        /**/
      342       19        /*  Include files  */
      343       20        /**/
      344       21        %INCLUDE KP_DATA_R;
      345     1273        /**/
      346     1274        /*  PARAMETERS  */
      347     1275        /**/
      348     1276    1   DCL TRACK_ID UBIN WORD;
      349     1277    1   DCL SECTOR_ID UBIN WORD;
      350     1278    1   DCL SECTOR CHAR(%KP_MAX_BYTES_IN_SEC#);
      351     1279    1   DCL SIZE SBIN WORD;                     /* Number of sectors                  */
      352     1280    1   DCL SIDE_ID SBIN WORD;
      353     1281        /**/
      354     1282        /*  ENTRY DCLS  */
      355     1283        /**/
PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:86   
      356     1284        %KP_ENTRIES (OMIT=KPU$GETVSEC);
      357     1390        /**/
      358     1391        /*  BASED DATA  */
      359     1392        /**/
      360     1393    1   DCL B$SECTOR CHAR(IN_OPTS.SECTOR_SIZE) BASED CALIGNED;
      361     1394        /**/
      362     1395        /*  LOCAL AUTO  */
      363     1396        /**/
      364     1397    1   DCL SEC_OFFSET SBIN WORD;
      365     1398    1   DCL READING BIT(1) ALIGNED;
      366     1399        /**/
      367     1400    1         READING = '1'B;

   1400  1 000002   400000 236003                    LDQ     -131072,DU
         1 000003   200011 756100                    STQ     READING,,AUTO

      368     1401    1         GOTO COMMON_CODE;

   1401  1 000004   000010 710000 1                  TRA     COMMON_CODE

      369     1402        /**/
      370     1403    1   KPU$PUTVSEC: ENTRY( TRACK_ID,SECTOR_ID,SECTOR,SIZE,SIDE_ID) ALTRET ;

   1403  1 000005   000000 700200 xent  KPU$PUTVSEC  TSX0  ! X66_AUTO_5
         1 000006   000012 000005                    ZERO    10,5

      371     1404        /**/
      372     1405    1         READING = '0'B;

   1405  1 000007   200011 450100                    STZ     READING,,AUTO

   1405  1 000010                       COMMON_CODE  null
      373     1406        /**/
      374     1407    1   COMMON_CODE: ;
      375     1408    2         DO SEC_OFFSET = 0 TO SIZE -1;

   1408  1 000010   200010 450100                    STZ     SEC_OFFSET,,AUTO
PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:87   
         1 000011   000075 710000 1                  TRA     s:1431+1

      376     1409    2            KP_RU_KEY1.COUNT = 3;

   1409  1 000012   003000 236003                    LDQ     1536,DU
         1 000013   000000 552040 xsym               STBQ    KP_RU_KEY,'40'O

      377     1410    2            KP_RU_KEY1.BYT1 = SIDE_ID;

   1410  1 000014   200007 470500                    LDP0    @SIDE_ID,,AUTO
         1 000015   000000 236100                    LDQ     0,,PR0
         1 000016   000022 736000                    QLS     18
         1 000017   000000 552020 xsym               STBQ    KP_RU_KEY,'20'O

      378     1411    2            KP_RU_KEY1.BYT3 = SECTOR_ID + SEC_OFFSET;

   1411  1 000020   200004 471500                    LDP1    @SECTOR_ID,,AUTO
         1 000021   100000 236100                    LDQ     0,,PR1
         1 000022   200010 036100                    ADLQ    SEC_OFFSET,,AUTO
         1 000023   000000 552004 xsym               STBQ    KP_RU_KEY,'04'O

      379     1412    2            KP_RU_KEY1.BYT2 = TRACK_ID;

   1412  1 000024   200003 473500                    LDP3    @TRACK_ID,,AUTO
         1 000025   300000 236100                    LDQ     0,,PR3
         1 000026   000011 736000                    QLS     9
         1 000027   000000 552010 xsym               STBQ    KP_RU_KEY,'10'O

      380     1413    2            IF READING

   1413  1 000030   200011 234100                    SZN     READING,,AUTO
         1 000031   000057 605000 1                  TPL     s:1427

      381     1414    2             THEN                          /* INPUT from virtual floppy          */
      382     1415    3              DO;

      383     1416    3                CALL KPI$IO_SVC (%KP_RU_KEYED_READ#) ALTRET(MONERR);
PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:88   

   1416  1 000032   000001 630400 2                  EPPR0   1
         1 000033   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000034   000000 701000 xent               TSX1    KPI$IO_SVC
         1 000035   000102 702000 1                  TSX2    MONERR

      384     1417    3                IF KP_INPUT_COUNT ~= IN_OPTS.SECTOR_SIZE

   1417  1 000036   000000 236000 xsym               LDQ     KP_INPUT_COUNT
         1 000037   000042 604000 1                  TMI     s:1420
         1 000040   000010 116000 xsym               CMPQ    IN_OPTS+8
         1 000041   000047 600000 1                  TZE     s:1423

      385     1418    3                 THEN
      386     1419    4                   DO;

      387     1420    4                     CALL KPE$ERROR (%E$VD_RDSIZERR);

   1420  1 000042   000002 630400 2                  EPPR0   2
         1 000043   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000044   000000 701000 xent               TSX1    KPE$ERROR
         1 000045   000000 011000                    NOP     0

      388     1421    4                     GOTO BAILOUT;

   1421  1 000046   000102 710000 1                  TRA     MONERR

      389     1422    4                     END;
      390     1423    3                PINCRC(ADDR(SECTOR),SEC_OFFSET*IN_OPTS.SECTOR_SIZE) -> B$SECTOR =
              1423                         KP_INBUF;

   1423  1 000047   200010 236100                    LDQ     SEC_OFFSET,,AUTO
         1 000050   000010 402000 xsym               MPY     IN_OPTS+8
         1 000051   200005 470500                    LDP0    @SECTOR,,AUTO
         1 000052   000010 720000 xsym               LXL0    IN_OPTS+8
         1 000053   040146 100400                    MLR     fill='040'O
         1 000054   000000 001000 xsym               ADSC9   KP_INBUF                 cn=0,n=512
PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:89   
         1 000055   000000 000010                    ADSC9   0,Q,PR0                  cn=0,n=*X0

      391     1424    3                END;

   1424  1 000056   000074 710000 1                  TRA     s:1431

      392     1425    2             ELSE                          /* OUTPUT to virtual floppy           */
      393     1426    3              DO;

      394     1427    3                KP_RU_RECL = IN_OPTS.SECTOR_SIZE;

   1427  1 000057   000010 235000 xsym               LDA     IN_OPTS+8
         1 000060   000000 755000 xsym               STA     KP_RU_RECL

      395     1428    3                KP_RU_OUTBUF = PINCRC(ADDR(SECTOR),SEC_OFFSET*IN_OPTS.SECTOR_SIZE) ->
              1428                         B$SECTOR;

   1428  1 000061   200010 236100                    LDQ     SEC_OFFSET,,AUTO
         1 000062   000010 402000 xsym               MPY     IN_OPTS+8
         1 000063   200005 474500                    LDP4    @SECTOR,,AUTO
         1 000064   000010 720000 xsym               LXL0    IN_OPTS+8
         1 000065   040000 100546                    MLR     fill='040'O
         1 000066   400000 000010                    ADSC9   0,Q,PR4                  cn=0,n=*X0
         1 000067   000000 001000 xsym               ADSC9   KP_RU_OUTBUF             cn=0,n=512

      396     1429    3                CALL KPI$IO_SVC (%KP_RU_WRITE#) ALTRET(MONERR);

   1429  1 000070   000004 630400 2                  EPPR0   4
         1 000071   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000072   000000 701000 xent               TSX1    KPI$IO_SVC
         1 000073   000102 702000 1                  TSX2    MONERR

      397     1430    3                END;

      398     1431    2            END;                           /* Next sector, please                */

   1431  1 000074   200010 054100                    AOS     SEC_OFFSET,,AUTO
PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:90   
         1 000075   200006 470500                    LDP0    @SIZE,,AUTO
         1 000076   200010 236100                    LDQ     SEC_OFFSET,,AUTO
         1 000077   000000 116100                    CMPQ    0,,PR0
         1 000100   000012 604000 1                  TMI     s:1409

      399     1432    1           RETURN;

   1432  1 000101   000000 702200 xent               TSX2  ! X66_ARET

   1428  1 000102                       MONERR       null
   1428  1 000102                       BAILOUT      null
      400     1433        /**/
      401     1434    1   MONERR: ;                               /* Error already printed              */
      402     1435    1   BAILOUT: ;
      403     1436    1           ALTRETURN;

   1436  1 000102   000000 702200 xent               TSX2  ! X66_AALT
      404     1437    1           END KPU$GETVSEC;
      405     1438        %EOD;

PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:91   
--  Include file information  --

   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPU$GETVSEC.
PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:92   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @SECTOR                    4-0-0/w PTR         r     1 @SECTOR_ID
     7-0-0/w PTR         r     1 @SIDE_ID                   6-0-0/w PTR         r     1 @SIZE
     3-0-0/w PTR         r     1 @TRACK_ID                 11-0-0/w BIT         r     1 READING
    *0-0-0/c CHAR(1024)  r     1 SECTOR                    *0-0-0/w UBIN        r     1 SECTOR_ID
    10-0-0/w SBIN        r     1 SEC_OFFSET                *0-0-0/w SBIN        r     1 SIDE_ID
    *0-0-0/w SBIN        r     1 SIZE                      *0-0-0/w UBIN        r     1 TRACK_ID

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(468)   r     1 IN_OPTS                    0-0-0/c CHAR(512)   r     1 KP_INBUF
     0-0-0/w UBIN        r     1 KP_INPUT_COUNT             0-0-0/b STRC(54)    r     1 KP_RU_KEY
     0-0-0/b STRC(54)    r     1 KP_RU_KEY1                 0-0-0/c CHAR(512)   r     1 KP_RU_OUTBUF
     0-0-0/w UBIN        r     1 KP_RU_RECL

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c ACHR        r     1 B$SECTOR


   Procedure KPU$GETVSEC requires 67 words for executable code.
   Procedure KPU$GETVSEC requires 10 words of local(AUTO) storage.
PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:93   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:94   
          MINI XREF LISTING

B$SECTOR
      1393**DCL      1423<<ASSIGN   1428>>ASSIGN
BAILOUT
      1428**LABEL    1421--GOTO
COMMON_CODE
      1405**LABEL    1401--GOTO
IN_OPTS.SECTOR_SIZE
      1037**DCL      1393--IMP-SIZ  1417>>IF       1423>>ASSIGN   1423>>ASSIGN   1427>>ASSIGN   1428>>ASSIGN
      1428>>ASSIGN
KPE$ERROR
      1307**DCL-ENT  1420--CALL
KPI$IO_SVC
      1319**DCL-ENT  1416--CALL     1429--CALL
KP_EXIT.V.STEPCC#
       944**DCL       944--REDEF
KP_INBUF
       866**DCL       866--REDEF    1423>>ASSIGN
KP_INPUT_COUNT
       866**DCL      1417>>IF
KP_RU_KEY
       874**DCL       875--REDEF
KP_RU_KEY.NODE
       874**DCL       874--REDEF
KP_RU_KEY.PAGE
       875**DCL       875--REDEF
KP_RU_KEY1.BYT1
       876**DCL      1410<<ASSIGN
KP_RU_KEY1.BYT2
       876**DCL      1412<<ASSIGN
KP_RU_KEY1.BYT3
       876**DCL      1411<<ASSIGN
KP_RU_KEY1.COUNT
PL6.E3A0      #006=KPU$GETVSEC File=KPU$UTIL.:E05TSI                             WED 07/30/97 01:23 Page:95   
       875**DCL      1409<<ASSIGN
KP_RU_OUTBUF
       868**DCL       868--REDEF    1428<<ASSIGN
KP_RU_RECL
       869**DCL      1427<<ASSIGN
MONERR
      1428**LABEL    1416--CALLALT  1429--CALLALT
READING
      1398**DCL      1400<<ASSIGN   1405<<ASSIGN   1413>>IF
SECTOR
      1278**DCL         7--PROC     1403--ENTRY    1423--ASSIGN   1428--ASSIGN
SECTOR_ID
      1277**DCL         7--PROC     1403--ENTRY    1411>>ASSIGN
SEC_OFFSET
      1397**DCL      1408<<DOINDEX  1411>>ASSIGN   1423>>ASSIGN   1428>>ASSIGN
SIDE_ID
      1280**DCL         7--PROC     1403--ENTRY    1410>>ASSIGN
SIZE
      1279**DCL         7--PROC     1403--ENTRY    1408>>DOINDEX
TRACK_ID
      1276**DCL         7--PROC     1403--ENTRY    1412>>ASSIGN

PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:96   
      406        1        /*T***********************************************************/
      407        2        /*T*                                                         */
      408        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      409        4        /*T*                                                         */
      410        5        /*T***********************************************************/
      411        6        /*X* DMC,DFC */
      412        7        KPU$READ_BLOCK: PROC(FEP,DRIVE,VSECTOR,DATA$,NSECTORS) ALTRET ;
      413        8        /*
      414        9              This module provides access to a number of contigous sectors on
      415       10              a CP-6 RFEP boot diskette.
      416       11              PARAMETERS:
      417       12                 FEP - FEP number.
      418       13                 DRIVE - Drive number.
      419       14                 VSECTOR - virtual sector number of first sector to access.
      420       15                 DATA$ - pointer to data buffer.
      421       16                 NSECTORS - number of sectors to snuffle.
      422       17        */
      423       18        /**/
      424       19        /*  Include files  */
      425       20        /**/
      426       21        %INCLUDE KP_DATA_R;
      427     1273        /**/
      428     1274        /*  PARAMETERS  */
      429     1275        /**/
      430     1276    1   DCL FEP SBIN;
      431     1277    1   DCL DRIVE SBIN;
      432     1278    1   DCL VSECTOR SBIN;
      433     1279    1   DCL DATA$ PTR;
      434     1280    1   DCL NSECTORS SBIN;
      435     1281        /**/
      436     1282        /*  AUTO DATA  */
      437     1283        /**/
      438     1284    1   DCL WRITE BIT(1);
      439     1285    1   DCL CUR_SECTOR SBIN;
      440     1286    1   DCL CUR_TRACK SBIN;
      441     1287    1   DCL CUR_SIDE SBIN;
      442     1288    1   DCL CUR_VSECTOR SBIN;
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:97   
      443     1289    1   DCL CUR_NSECTORS SBIN;
      444     1290    1   DCL CUR_DATA$ PTR;
      445     1291    1   DCL CHUNK_SECTORS SBIN;
      446     1292    1   DCL DISK_OFFSET SBIN;
      447     1293        /**/
      448     1294        /*  BASED  */
      449     1295        /**/
      450     1296    1   DCL B$DUMMY BIT(1) BASED CALIGNED;
      451     1297        /**/
      452     1298        /*  ENTRY DCLS  */
      453     1299        /**/
      454     1300        %KP_ENTRIES (OMIT=KPU$READ_BLOCK);
      455     1406        %EJECT;
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:98   
      456     1407    1      WRITE = '0'B;
      457     1408    1      GOTO COMMON_CODE;
      458     1409        /**/
      459     1410    1   KPU$WRITE_BLOCK: ENTRY(FEP,DRIVE,VSECTOR,DATA$,NSECTORS) ALTRET ;
      460     1411    1      WRITE = '1'B;
      461     1412        /**/
      462     1413    1   COMMON_CODE: ;
      463     1414    1      CUR_DATA$ = DATA$;
      464     1415    1      CUR_VSECTOR = VSECTOR;
      465     1416    1      CUR_NSECTORS = NSECTORS;
      466     1417        /**/
      467     1418    2      DO WHILE (CUR_NSECTORS > 0);
      468     1419    2         CALL KPU$VSEC2DISK (CUR_SIDE,
      469     1420    2                             CUR_TRACK,
      470     1421    2                             CUR_SECTOR,
      471     1422    2                             CUR_VSECTOR,
      472     1423    2                             DISK_OFFSET);
      473     1424    2         CHUNK_SECTORS = MINIMUM(CUR_NSECTORS,
      474     1425    2                                 15-CUR_SECTOR+1,
      475     1426    2                                 %KP_BLOCK_SIZE#/256);
      476     1427    2         IF WRITE THEN
      477     1428    2            CALL KPX$PUTSEC(FEP,
      478     1429    2                            DRIVE+DISK_OFFSET,
      479     1430    2                            CUR_TRACK,
      480     1431    2                            CUR_SECTOR,
      481     1432    2                            CHUNK_SECTORS,
      482     1433    2                            CUR_DATA$ -> B$DUMMY,
      483     1434    2                            CUR_SIDE) ALTRET(TROUBLE);
      484     1435    2         ELSE
      485     1436    2            CALL KPX$GETSEC(FEP,
      486     1437    2                            DRIVE+DISK_OFFSET,
      487     1438    2                            CUR_TRACK,
      488     1439    2                            CUR_SECTOR,
      489     1440    2                            CHUNK_SECTORS,
      490     1441    2                            CUR_DATA$ -> B$DUMMY,
      491     1442    2                            CUR_SIDE) ALTRET(TROUBLE);
      492     1443    2         CUR_NSECTORS = CUR_NSECTORS - CHUNK_SECTORS;
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:99   
      493     1444    2         CUR_VSECTOR = CUR_VSECTOR + CHUNK_SECTORS;
      494     1445    2         CUR_DATA$ = PINCRC(CUR_DATA$,CHUNK_SECTORS*256);
      495     1446    2         END;
      496     1447    1      RETURN;
      497     1448        /**/
      498     1449    1   TROUBLE: ;
      499     1450    1      ALTRETURN;
      500     1451        /**/
      501     1452    1     END KPU$READ_BLOCK;

PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:100  
--  Include file information  --

   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPU$READ_BLOCK.

   Procedure KPU$READ_BLOCK requires 102 words for executable code.
   Procedure KPU$READ_BLOCK requires 26 words of local(AUTO) storage.

    No errors detected in file KPU$UTIL.:E05TSI    .

PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:101  

 Object Unit name= KPU$READ_BLOCK                             File name= KPU$UTIL.:E05TOU
 UTS= JUL 30 '97 01:23:58.24 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   102    146  KPU$READ_BLOCK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        5  KPU$READ_BLOCK
     1      4          yes     yes      Std        5  KPU$WRITE_BLOCK

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       5 KPU$VSEC2DISK
 yes     yes           Std       7 KPX$GETSEC
 yes     yes           Std       7 KPX$PUTSEC
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:102  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INBUF                              KP_RU_OUTBUF
     KP_RU_KEY                             B_VECTNIL
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:103  


      406        1        /*T***********************************************************/
      407        2        /*T*                                                         */
      408        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      409        4        /*T*                                                         */
      410        5        /*T***********************************************************/
      411        6        /*X* DMC,DFC */
      412        7        KPU$READ_BLOCK: PROC(FEP,DRIVE,VSECTOR,DATA$,NSECTORS) ALTRET ;

      7  1 000000   000000 700200 xent  KPU$READ_BL* TSX0  ! X66_AUTO_5
         1 000001   000032 000005                    ZERO    26,5

      413        8        /*
      414        9              This module provides access to a number of contigous sectors on
      415       10              a CP-6 RFEP boot diskette.
      416       11              PARAMETERS:
      417       12                 FEP - FEP number.
      418       13                 DRIVE - Drive number.
      419       14                 VSECTOR - virtual sector number of first sector to access.
      420       15                 DATA$ - pointer to data buffer.
      421       16                 NSECTORS - number of sectors to snuffle.
      422       17        */
      423       18        /**/
      424       19        /*  Include files  */
      425       20        /**/
      426       21        %INCLUDE KP_DATA_R;
      427     1273        /**/
      428     1274        /*  PARAMETERS  */
      429     1275        /**/
      430     1276    1   DCL FEP SBIN;
      431     1277    1   DCL DRIVE SBIN;
      432     1278    1   DCL VSECTOR SBIN;
      433     1279    1   DCL DATA$ PTR;
      434     1280    1   DCL NSECTORS SBIN;
      435     1281        /**/
      436     1282        /*  AUTO DATA  */
      437     1283        /**/
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:104  
      438     1284    1   DCL WRITE BIT(1);
      439     1285    1   DCL CUR_SECTOR SBIN;
      440     1286    1   DCL CUR_TRACK SBIN;
      441     1287    1   DCL CUR_SIDE SBIN;
      442     1288    1   DCL CUR_VSECTOR SBIN;
      443     1289    1   DCL CUR_NSECTORS SBIN;
      444     1290    1   DCL CUR_DATA$ PTR;
      445     1291    1   DCL CHUNK_SECTORS SBIN;
      446     1292    1   DCL DISK_OFFSET SBIN;
      447     1293        /**/
      448     1294        /*  BASED  */
      449     1295        /**/
      450     1296    1   DCL B$DUMMY BIT(1) BASED CALIGNED;
      451     1297        /**/
      452     1298        /*  ENTRY DCLS  */
      453     1299        /**/
      454     1300        %KP_ENTRIES (OMIT=KPU$READ_BLOCK);
      455     1406        %EJECT;
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:105  
      456     1407    1      WRITE = '0'B;

   1407  1 000002   200010 450100                    STZ     WRITE,,AUTO

      457     1408    1      GOTO COMMON_CODE;

   1408  1 000003   000010 710000 1                  TRA     COMMON_CODE

      458     1409        /**/
      459     1410    1   KPU$WRITE_BLOCK: ENTRY(FEP,DRIVE,VSECTOR,DATA$,NSECTORS) ALTRET ;

   1410  1 000004   000000 700200 xent  KPU$WRITE_B* TSX0  ! X66_AUTO_5
         1 000005   000032 000005                    ZERO    26,5

      460     1411    1      WRITE = '1'B;

   1411  1 000006   400000 236003                    LDQ     -131072,DU
         1 000007   200010 756100                    STQ     WRITE,,AUTO

   1411  1 000010                       COMMON_CODE  null
      461     1412        /**/
      462     1413    1   COMMON_CODE: ;
      463     1414    1      CUR_DATA$ = DATA$;

   1414  1 000010   200006 470500                    LDP0    @DATA$,,AUTO
         1 000011   000000 236100                    LDQ     0,,PR0
         1 000012   200016 756100                    STQ     CUR_DATA$,,AUTO

      464     1415    1      CUR_VSECTOR = VSECTOR;

   1415  1 000013   200005 471500                    LDP1    @VSECTOR,,AUTO
         1 000014   100000 235100                    LDA     0,,PR1
         1 000015   200014 755100                    STA     CUR_VSECTOR,,AUTO

      465     1416    1      CUR_NSECTORS = NSECTORS;

   1416  1 000016   200007 473500                    LDP3    @NSECTORS,,AUTO
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:106  
         1 000017   300000 235100                    LDA     0,,PR3
         1 000020   200015 755100                    STA     CUR_NSECTORS,,AUTO

      466     1417        /**/
      467     1418    2      DO WHILE (CUR_NSECTORS > 0);

   1418  1 000021   000144 604400 1                  TMOZ    s:1447

      468     1419    2         CALL KPU$VSEC2DISK (CUR_SIDE,

   1419  1 000022   200020 630500                    EPPR0   DISK_OFFSET,,AUTO
         1 000023   200026 450500                    STP0    DISK_OFFSET+6,,AUTO
         1 000024   200014 631500                    EPPR1   CUR_VSECTOR,,AUTO
         1 000025   200025 451500                    STP1    DISK_OFFSET+5,,AUTO
         1 000026   200011 633500                    EPPR3   CUR_SECTOR,,AUTO
         1 000027   200024 453500                    STP3    DISK_OFFSET+4,,AUTO
         1 000030   200012 634500                    EPPR4   CUR_TRACK,,AUTO
         1 000031   200023 454500                    STP4    DISK_OFFSET+3,,AUTO
         1 000032   200013 635500                    EPPR5   CUR_SIDE,,AUTO
         1 000033   200022 455500                    STP5    DISK_OFFSET+2,,AUTO
         1 000034   200022 630500                    EPPR0   DISK_OFFSET+2,,AUTO
         1 000035   000023 631400 xsym               EPPR1   B_VECTNIL+19
         1 000036   000000 701000 xent               TSX1    KPU$VSEC2DISK
         1 000037   000000 011000                    NOP     0

      469     1420    2                             CUR_TRACK,
      470     1421    2                             CUR_SECTOR,
      471     1422    2                             CUR_VSECTOR,
      472     1423    2                             DISK_OFFSET);
      473     1424    2         CHUNK_SECTORS = MINIMUM(CUR_NSECTORS,

   1424  1 000040   000020 236007                    LDQ     16,DL
         1 000041   200011 136100                    SBLQ    CUR_SECTOR,,AUTO
         1 000042   000010 116007                    CMPQ    8,DL
         1 000043   000045 604400 1                  TMOZ    s:1424+5
         1 000044   000010 236007                    LDQ     8,DL
         1 000045   200015 116100                    CMPQ    CUR_NSECTORS,,AUTO
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:107  
         1 000046   000050 604400 1                  TMOZ    s:1424+8
         1 000047   200015 236100                    LDQ     CUR_NSECTORS,,AUTO
         1 000050   200017 756100                    STQ     CHUNK_SECTORS,,AUTO

      474     1425    2                                 15-CUR_SECTOR+1,
      475     1426    2                                 %KP_BLOCK_SIZE#/256);
      476     1427    2         IF WRITE THEN

   1427  1 000051   200010 234100                    SZN     WRITE,,AUTO
         1 000052   000102 605000 1                  TPL     s:1436

      477     1428    2            CALL KPX$PUTSEC(FEP,

   1428  1 000053   200004 470500                    LDP0    @DRIVE,,AUTO
         1 000054   000000 236100                    LDQ     0,,PR0
         1 000055   200020 036100                    ADLQ    DISK_OFFSET,,AUTO
         1 000056   200022 756100                    STQ     DISK_OFFSET+2,,AUTO
         1 000057   200013 631500                    EPPR1   CUR_SIDE,,AUTO
         1 000060   200031 451500                    STP1    DISK_OFFSET+9,,AUTO
         1 000061   200016 236100                    LDQ     CUR_DATA$,,AUTO
         1 000062   200030 756100                    STQ     DISK_OFFSET+8,,AUTO
         1 000063   200017 633500                    EPPR3   CHUNK_SECTORS,,AUTO
         1 000064   200027 453500                    STP3    DISK_OFFSET+7,,AUTO
         1 000065   200011 634500                    EPPR4   CUR_SECTOR,,AUTO
         1 000066   200026 454500                    STP4    DISK_OFFSET+6,,AUTO
         1 000067   200012 635500                    EPPR5   CUR_TRACK,,AUTO
         1 000070   200025 455500                    STP5    DISK_OFFSET+5,,AUTO
         1 000071   200022 636500                    EPPR6   DISK_OFFSET+2,,AUTO
         1 000072   200024 456500                    STP6    DISK_OFFSET+4,,AUTO
         1 000073   200003 236100                    LDQ     @FEP,,AUTO
         1 000074   200023 756100                    STQ     DISK_OFFSET+3,,AUTO
         1 000075   200023 630500                    EPPR0   DISK_OFFSET+3,,AUTO
         1 000076   000025 631400 xsym               EPPR1   B_VECTNIL+21
         1 000077   000000 701000 xent               TSX1    KPX$PUTSEC
         1 000100   000145 702000 1                  TSX2    TROUBLE
         1 000101   000130 710000 1                  TRA     s:1443

PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:108  
      478     1429    2                            DRIVE+DISK_OFFSET,
      479     1430    2                            CUR_TRACK,
      480     1431    2                            CUR_SECTOR,
      481     1432    2                            CHUNK_SECTORS,
      482     1433    2                            CUR_DATA$ -> B$DUMMY,
      483     1434    2                            CUR_SIDE) ALTRET(TROUBLE);
      484     1435    2         ELSE
      485     1436    2            CALL KPX$GETSEC(FEP,

   1436  1 000102   200004 470500                    LDP0    @DRIVE,,AUTO
         1 000103   000000 236100                    LDQ     0,,PR0
         1 000104   200020 036100                    ADLQ    DISK_OFFSET,,AUTO
         1 000105   200022 756100                    STQ     DISK_OFFSET+2,,AUTO
         1 000106   200013 631500                    EPPR1   CUR_SIDE,,AUTO
         1 000107   200031 451500                    STP1    DISK_OFFSET+9,,AUTO
         1 000110   200016 236100                    LDQ     CUR_DATA$,,AUTO
         1 000111   200030 756100                    STQ     DISK_OFFSET+8,,AUTO
         1 000112   200017 633500                    EPPR3   CHUNK_SECTORS,,AUTO
         1 000113   200027 453500                    STP3    DISK_OFFSET+7,,AUTO
         1 000114   200011 634500                    EPPR4   CUR_SECTOR,,AUTO
         1 000115   200026 454500                    STP4    DISK_OFFSET+6,,AUTO
         1 000116   200012 635500                    EPPR5   CUR_TRACK,,AUTO
         1 000117   200025 455500                    STP5    DISK_OFFSET+5,,AUTO
         1 000120   200022 636500                    EPPR6   DISK_OFFSET+2,,AUTO
         1 000121   200024 456500                    STP6    DISK_OFFSET+4,,AUTO
         1 000122   200003 236100                    LDQ     @FEP,,AUTO
         1 000123   200023 756100                    STQ     DISK_OFFSET+3,,AUTO
         1 000124   200023 630500                    EPPR0   DISK_OFFSET+3,,AUTO
         1 000125   000025 631400 xsym               EPPR1   B_VECTNIL+21
         1 000126   000000 701000 xent               TSX1    KPX$GETSEC
         1 000127   000145 702000 1                  TSX2    TROUBLE

      486     1437    2                            DRIVE+DISK_OFFSET,
      487     1438    2                            CUR_TRACK,
      488     1439    2                            CUR_SECTOR,
      489     1440    2                            CHUNK_SECTORS,
      490     1441    2                            CUR_DATA$ -> B$DUMMY,
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:109  
      491     1442    2                            CUR_SIDE) ALTRET(TROUBLE);
      492     1443    2         CUR_NSECTORS = CUR_NSECTORS - CHUNK_SECTORS;

   1443  1 000130   200015 236100                    LDQ     CUR_NSECTORS,,AUTO
         1 000131   200017 136100                    SBLQ    CHUNK_SECTORS,,AUTO
         1 000132   200015 756100                    STQ     CUR_NSECTORS,,AUTO

      493     1444    2         CUR_VSECTOR = CUR_VSECTOR + CHUNK_SECTORS;

   1444  1 000133   200014 236100                    LDQ     CUR_VSECTOR,,AUTO
         1 000134   200017 036100                    ADLQ    CHUNK_SECTORS,,AUTO
         1 000135   200014 756100                    STQ     CUR_VSECTOR,,AUTO

      494     1445    2         CUR_DATA$ = PINCRC(CUR_DATA$,CHUNK_SECTORS*256);

   1445  1 000136   200017 236100                    LDQ     CHUNK_SECTORS,,AUTO
         1 000137   000030 736000                    QLS     24
         1 000140   200016 036100                    ADLQ    CUR_DATA$,,AUTO
         1 000141   200016 756100                    STQ     CUR_DATA$,,AUTO

      495     1446    2         END;

   1446  1 000142   200015 235100                    LDA     CUR_NSECTORS,,AUTO
         1 000143   000022 605400 1                  TPNZ    s:1419

      496     1447    1      RETURN;

   1447  1 000144   000000 702200 xent               TSX2  ! X66_ARET

   1445  1 000145                       TROUBLE      null
      497     1448        /**/
      498     1449    1   TROUBLE: ;
      499     1450    1      ALTRETURN;

   1450  1 000145   000000 702200 xent               TSX2  ! X66_AALT
      500     1451        /**/
      501     1452    1     END KPU$READ_BLOCK;
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:110  

PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:111  
--  Include file information  --

   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPU$READ_BLOCK.
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:112  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w PTR         r     1 @DATA$                     4-0-0/w PTR         r     1 @DRIVE
     3-0-0/w PTR         r     1 @FEP                       7-0-0/w PTR         r     1 @NSECTORS
     5-0-0/w PTR         r     1 @VSECTOR                  17-0-0/w SBIN        r     1 CHUNK_SECTORS
    16-0-0/w PTR         r     1 CUR_DATA$                 15-0-0/w SBIN        r     1 CUR_NSECTORS
    11-0-0/w SBIN        r     1 CUR_SECTOR                13-0-0/w SBIN        r     1 CUR_SIDE
    12-0-0/w SBIN        r     1 CUR_TRACK                 14-0-0/w SBIN        r     1 CUR_VSECTOR
    *0-0-0/w PTR         r     1 DATA$                     20-0-0/w SBIN        r     1 DISK_OFFSET
    *0-0-0/w SBIN        r     1 DRIVE                     *0-0-0/w SBIN        r     1 FEP
    *0-0-0/w SBIN        r     1 NSECTORS                  *0-0-0/w SBIN        r     1 VSECTOR
    10-0-0/b BIT         r     1 WRITE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c BIT         r     1 B$DUMMY


   Procedure KPU$READ_BLOCK requires 102 words for executable code.
   Procedure KPU$READ_BLOCK requires 26 words of local(AUTO) storage.

    No errors detected in file KPU$UTIL.:E05TSI    .
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:113  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:114  
          MINI XREF LISTING

B$DUMMY
      1296**DCL      1428<>CALL     1436<>CALL
CHUNK_SECTORS
      1291**DCL      1424<<ASSIGN   1428<>CALL     1436<>CALL     1443>>ASSIGN   1444>>ASSIGN   1445>>ASSIGN
COMMON_CODE
      1411**LABEL    1408--GOTO
CUR_DATA$
      1290**DCL      1414<<ASSIGN   1428>>CALL     1436>>CALL     1445<<ASSIGN   1445>>ASSIGN
CUR_NSECTORS
      1289**DCL      1416<<ASSIGN   1418>>DOWHILE  1424>>ASSIGN   1443<<ASSIGN   1443>>ASSIGN
CUR_SECTOR
      1285**DCL      1419<>CALL     1424>>ASSIGN   1428<>CALL     1436<>CALL
CUR_SIDE
      1287**DCL      1419<>CALL     1428<>CALL     1436<>CALL
CUR_TRACK
      1286**DCL      1419<>CALL     1428<>CALL     1436<>CALL
CUR_VSECTOR
      1288**DCL      1415<<ASSIGN   1419<>CALL     1444<<ASSIGN   1444>>ASSIGN
DATA$
      1279**DCL         7--PROC     1410--ENTRY    1414>>ASSIGN
DISK_OFFSET
      1292**DCL      1419<>CALL     1428>>CALL     1436>>CALL
DRIVE
      1277**DCL         7--PROC     1410--ENTRY    1428>>CALL     1436>>CALL
FEP
      1276**DCL         7--PROC     1410--ENTRY    1428<>CALL     1436<>CALL
KPU$VSEC2DISK
      1393**DCL-ENT  1419--CALL
KPX$GETSEC
      1372**DCL-ENT  1436--CALL
KPX$PUTSEC
      1382**DCL-ENT  1428--CALL
PL6.E3A0      #007=KPU$READ_BLOCK File=KPU$UTIL.:E05TSI                          WED 07/30/97 01:23 Page:115  
KP_EXIT.V.STEPCC#
       944**DCL       944--REDEF
KP_INBUF
       866**DCL       866--REDEF
KP_RU_KEY
       874**DCL       875--REDEF
KP_RU_KEY.NODE
       874**DCL       874--REDEF
KP_RU_KEY.PAGE
       875**DCL       875--REDEF
KP_RU_OUTBUF
       868**DCL       868--REDEF
NSECTORS
      1280**DCL         7--PROC     1410--ENTRY    1416>>ASSIGN
TROUBLE
      1445**LABEL    1428--CALLALT  1436--CALLALT
VSECTOR
      1278**DCL         7--PROC     1410--ENTRY    1415>>ASSIGN
WRITE
      1284**DCL      1407<<ASSIGN   1411<<ASSIGN   1427>>IF
