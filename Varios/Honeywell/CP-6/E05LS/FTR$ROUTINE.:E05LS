VERSION E05

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:1    
        1        1        /*M* FTR$ROUTINE tape file management routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* THI=1,PLM=3,MCL=10 */
        8        8
        9        9        FTR$ROUTINE: PROC(N,P$) ALTRET;
       10       10
       11       11         /***
       12       12          *** INCLUDE files:
       13       13          ***/
       14       14
       15       15        %INCLUDE B$USER;
       16      231        %B$USERREFS;
       17      235        %INCLUDE CP_6;
       18     5794        %INCLUDE CP_6_SUBS;
       19     6334        %MACRO F$DCBBJ(BASED=BASED);
       20     6335        %INCLUDE F$DCB;
       21     6384        %MEND;
       22     6385           %F$DCBBJ(BASED="BASED(JDCB$)");
       23     6435        %INCLUDE B$JIT_C;
       24     6749           %B$JIT0;
       25     6838           %U$JIT1X;
       26     6841           %M$JIT2X;
       27     6844           %F$JIT3;
       28     6849           %S$JIT4X;
       29     6852           %J$JIT5X;
       30     6855           %A$JIT6X;
       31     6858        %INCLUDE F_ERRORS_C;
       32     7098        %INCLUDE FM$CFU;
       33     7143           %FT$CFUSN;
       34     7146           %FM$CFUJ;
       35     7151        %INCLUDE FM$FIT;
       36     7372        %CODE16;
       37     7380        %INCLUDE FR_SUBS;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:2    
       38     7448        %MACRO FT$DDTBD(BASED=BASED);
       39     7449        %INCLUDE FT$DDT;
       40     7510        %MEND;
       41     7511           %FT$DDTBD(BASED="BASED(DDDT$)");
       42     7573        %INCLUDE FT_SUBS;
       43     7653        %INCLUDE NK$LDCT;
       44     7755           %NK$LDCT;
       45     7801        %INCLUDE NK_LDCT_R;
       46     7810        %INCLUDE NK_VFC_C;
       47     7884        %INCLUDE OC_SUBS_C;
       48     8615        %INCLUDE SS_SCHED_C;
       49     8848
       50     8849         /***
       51     8850          *** External routines:
       52     8851          ***/
       53     8852
       54     8853    1   DCL FMD$RELBUF ENTRY(1);                /* Release specified FPOOL buffer     */
       55     8854    1   DCL FMR$G8 ENTRY(2) ALTRET;             /* Get CFU block                      */
       56     8855    1   DCL FMR$Z8 ENTRY(1);                    /* Release specified CFU block        */
       57     8856    1   DCL FRA$COPN ENTRY ALTRET;              /* Change volume                      */
       58     8857    1   DCL FRA$OPR ENTRY ALTRET;               /* Get tape mounted                   */
       59     8858    1   DCL FRB$CREM ENTRY;                     /* Dismount tape                      */
       60     8859    1   DCL FTI$PERMIT ENTRY ALTRET;            /* Permit write                       */
       61     8860    1   DCL FTI$REWIND ENTRY ALTRET;            /* Rewind tape                        */
       62     8861    1   DCL FTI$SD800 ENTRY ALTRET;             /* Set density to 800 BPI             */
       63     8862    1   DCL FTI$SD1600 ENTRY ALTRET;            /* Set density to 1600 BPI            */
       64     8863    1   DCL FTI$SD6250 ENTRY ALTRET;            /* Set density to 6250 BPI            */
       65     8864    1   DCL FTI$SPFILE ENTRY ALTRET;            /* Space DCB.ARS files                */
       66     8865    1   DCL FTI$SPREC ENTRY ALTRET;             /* Space DCB.ARS records              */
       67     8866    1   DCL FTI$WRFM ENTRY ALTRET;              /* Write file mark                    */
       68     8867    1   DCL FTL$GETFSN ENTRY ALTRET;            /* Get file sequence number from HDR1 */
       69     8868    1   DCL M$MWRITE ENTRY(1) ALTRET;
       70     8869    1   DCL OCI$MK_WR ENTRY(7);                 /* Ask operator                       */
       71     8870    1   DCL SSR$REG ENTRY(3) ALTRET;            /* Wait awhile                        */
       72     8871
       73     8872         /***
       74     8873          *** SYMREF data:
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:3    
       75     8874          ***/
       76     8875
       77     8876    1   DCL B$JIT$ PTR SYMREF;
       78     8877    1   DCL F$CFU$ PTR SYMREF;                  /* CFUs are that way                  */
       79     8878    1   DCL FT_DENS(0:5) BIT(18) SYMREF;        /* Bits correspond to densities       */
       80     8879
       81     8880         /***
       82     8881          *** Parameter:
       83     8882          ***/
       84     8883
       85     8884    1   DCL N SBIN;                             /* Argument integer                   */
       86     8885    1   DCL P$ PTR;                             /* Pointer to argument                */
       87     8886         /***
       88     8887          *** AUTO data:
       89     8888          ***/
       90     8889
       91     8890    1   DCL CFU$ PTR AUTO;                      /* Pointer to current CFU$            */
       92     8891    1   DCL DDDT$ PTR AUTO;                     /* Pointer to DDT entry               */
       93     8892    1   DCL I SBIN WORD AUTO;                   /* Index                              */
       94     8893    1   DCL J SBIN AUTO;                        /* Another index                      */
       95     8894    1   DCL JDCB$ PTR AUTO;                     /* Pointer to DCB                     */
       96     8895    1   DCL 1 JDCB REDEF JDCB$,
       97     8896    1         2 DCBX UBIN HALF UNAL,            /* Index of DCB                       */
       98     8897    1         2 * UBIN HALF UNAL;
       99     8898    1   DCL 1 MSGS ALIGNED AUTO,
      100     8899    1         2 MG1 CHAR(6) UNAL,
      101     8900    1         2 MG2 UBIN BYTE UNAL;
      102     8901    1   DCL REWIND BIT(1) ALIGNED AUTO;         /* Rewind tape flag                   */
      103     8902        %FPT_WRITE(FPTN=ROMSGAUTO,STCLASS=AUTO);
      104     8933                                                /* RING, OVER user message            */
      105     8934    1   DCL 1 ROMSGMSGAUTO AUTO,
      106     8935    1         2 PREF,
      107     8936    1           3 VFC CHAR(1) UNAL,
      108     8937    1           3 DOTS CHAR(3) UNAL,
      109     8938    1         2 ROOPT CHAR(4) UNAL,
      110     8939    1         2 * CHAR(19) UNAL,
      111     8940    1         2 TT CHAR(2) UNAL,
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:4    
      112     8941    1         2 * CHAR(1) UNAL,
      113     8942    1         2 SN CHAR(6) UNAL;
      114     8943    1   DCL SAVEXP CHAR(6) ALIGNED AUTO;        /* Saved expiration date              */
      115     8944    1   DCL SAVOWNR CHAR(8) ALIGNED AUTO;       /* Saved owner account                */
      116     8945    1   DCL SAVPROT SBIN ALIGNED AUTO;          /* Saved volume protection            */
      117     8946    1   DCL SAVPSN CHAR(6) ALIGNED AUTO;        /* Saved SN                           */
      118     8947    1   DCL SCRATCH BIT(1) ALIGNED AUTO;        /* Flag indicating if scratch mount   */
      119     8948    1   DCL TEMP$ PTR AUTO;                     /* A pointer                          */
      120     8949    1   DCL TEMP SBIN AUTO;                     /* An SBIN                            */
      121     8950    1   DCL THESN CHAR(6) BASED UNAL;           /* Based serial number                */
      122     8951
      123     8952         /***
      124     8953          *** STATIC data:
      125     8954          ***/
      126     8955
      127     8956    1   DCL FT_PROT SBIN WORD SYMREF;
      128     8957                                                /* Unexpired ANS tape protection      */
      129     8958
      130     8959         /***
      131     8960          *** CONSTANT data:
      132     8961          ***/
      133     8962    1   DCL FT_TAPETYPECHK SBIN WORD CONSTANT SYMDEF INIT(0); /* Ignore tape type     */
      134     8963    1   DCL FT_RINGBOTONLY SBIN WORD CONSTANT SYMDEF INIT(0); /* Permit RING keyin always */
      135     8964        %FPT_WRITE(FPTN=ROMSG,STCLASS=CONSTANT,DCB=M$UC,VFC=YES,BUF=ROMSGMSG);
      136     8995                                                /* RING, OVER user message            */
      137     8996    1   DCL 1 ROMSGMSG CONSTANT,
      138     8997    1         2 PREF,
      139     8998    1           3 VFC CHAR(1) UNAL INIT(%VFC_TRANSITION1),
      140     8999    1           3 DOTS CHAR(3) UNAL INIT('...'),
      141     9000    1         2 ROOPT CHAR(4) UNAL INIT('XXXX'),
      142     9001    1         2 * CHAR(19) UNAL INIT(' keyin pending for '),
      143     9002    1         2 TT CHAR(2) UNAL INIT('XX'),
      144     9003    1         2 * CHAR(1) UNAL INIT('#'),
      145     9004    1         2 SN CHAR(6) UNAL INIT('XXXXXX');
      146     9005
      147     9006        %FT$ERR( ERRNAME=E_TAPBRK, MID='22'O, CODE=%E$TAPBRK, SEV=2 );
      148     9014        /*E*     ERROR: FTR-E$TAPBRK-2
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:5    
      149     9015                 MESSAGE: Break or ctrl-Y during RING/OVER keyin request% for %TA%
      150     9016                 DESCRIPTION: While waiting for RING/OVER keyin, SSR$REQ
      151     9017                    altreturned.
      152     9018         ***/
      153     9019
      154     9020        %FT$ERR( ERRNAME=E_DENSBAD, MID='22'O, CODE=%E$DENSBAD, SEV=2 );
      155     9028        /*E*     ERROR: FTR-E$DENSBAD-2
      156     9029                 MESSAGE: Unavailable density% for %TA%
      157     9030                 DESCRIPTION: Attempt to open tape to a density which
      158     9031                    is unavailable in system or on drive.
      159     9032         ***/
      160     9033
      161     9034        %FT$ERR( ERRNAME=E_NOCFUS, MID='22'O, CODE=%E$NOCFUS, SEV=2 );
      162     9042        /*E*     ERROR: FTR-E$NOCFUS-2
      163     9043                 MESSAGE: No system table space for SN list% for %TA%
      164     9044         ***/
      165     9045
      166     9046        %FT$ERR( ERRNAME=E_NORING, MID='22'O, CODE=%E$NORING, SEV=2 );
      167     9054        /*E*     ERROR: FTR-E$NORING-2
      168     9055                 MESSAGE: Ring for volume% #%SN% denied
      169     9056                 MESSAGE1: Operator refused to put a ring in your tape.
      170     9057                 DESCRIPTION: The operator replied CANT RING on a ring request.
      171     9058         ***/
      172     9059
      173     9060        %FT$ERR( ERRNAME=E_NOTANS, MID='22'O, CODE=%E$NOTANS, SEV=2 );
      174     9068        /*E*     ERROR: FTR-E$NOTANS-2
      175     9069                 MESSAGE: Not an ANS volume% -- FT#%SN%
      176     9070                 MESSAGE1: Attempt to open or use an unlabelled tape as an ANS tape.
      177     9071         ***/
      178     9072
      179     9073        %FT$ERR( ERRNAME=E_NOTDEV, MID='22'O, CODE=%E$NOTDEV, SEV=2 );
      180     9081        /*E*     ERROR: FTR-E$NOTDEV-2
      181     9082                 MESSAGE: Not an unlabelled tape% LT#%SN%
      182     9083                 MESSAGE1: You can't open an ANS volume as an unlabelled tape.
      183     9084                 DESCRIPTION: Attempt to change to a tape which is not a device tape.
      184     9085         ***/
      185     9086
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:6    
      186     9087        %FT$ERR( ERRNAME=E_NOTOWNR, MID='22'O, CODE=%E$NOTOWNR, SEV=2 );
      187     9095        /*E*     ERROR: FTR-E$NOTOWNR-2
      188     9096                 MESSAGE: Only owner access allowed% to LT#%SN%
      189     9097                 MESSAGE1: The owner of this volume set protected this volume
      190     9098                    against all public access.
      191     9099         ***/
      192     9100
      193     9101        %FT$ERR( ERRNAME=E_NOTOWNRW, MID='22'O, CODE=%E$NOTOWNRW, SEV=2 );
      194     9109        /*E*     ERROR: FTR-E$NOTOWNRW-2
      195     9110                 MESSAGE: Only owner write access allowed% to LT#%SN%
      196     9111                 MESSAGE1: The owner of this volume set protected this volume
      197     9112                    against all public write access.
      198     9113         ***/
      199     9114
      200     9115
      201     9116        %FT$ERR( ERRNAME=E_OPROT, MID='22'O, CODE=%E$OPROT, SEV=2 );
      202     9124        /*E*     ERROR: FTR-E$OPROT-2
      203     9125                 MESSAGE: Write access to volume% #%SN% denied
      204     9126                 DESCRIPTION: Either: 1) after being asked to put a ring in
      205     9127                    volume operator decided not to or 2) after being asked for
      206     9128                    an OVER keyin operator decided not to.
      207     9129         ***/
      208     9130
      209     9131        %FT$ERR( ERRNAME=E_PROT, MID='22'O, CODE=%E$PROT, SEV=2 );
      210     9139        /*E*     ERROR: FTR-E$PROT-2
      211     9140                 MESSAGE: Volume protected% -- #%SN%
      212     9141                 MESSAGE1: Volume has no ring and is not at beginning of volume.
      213     9142                 DESCRIPTION: System does not permit RING keyin for tapes
      214     9143                    which are not at beginning of volume.
      215     9144         ***/
      216     9145
      217     9146        %FT$ERR( ERRNAME=E_UNEXPIRED, MID='22'O, CODE=%E$UNEXPIRED, SEV=2 );
      218     9154
      219     9155        /*E*     ERROR: FTR-E$UNEXPIRED-2
      220     9156                 MESSAGE: Volume unexpired% -- #%SN%
      221     9157                 MESSAGE1: You can't write on unexpired volumes.
      222     9158                 DESCRIPTION: Attempt to open an unexpired ANS tape for output.
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:7    
      223     9159         ***/
      224     9160
      225     9161        %FT$ERR( ERRNAME=E_VOLORDER, MID='22'O, CODE=%E$VOLORDER, SEV=2 );
      226     9169        /*E*     ERROR: FTR-E$VOLORDER-2
      227     9170                 MESSAGE: Volume missing% for %TA%
      228     9171                 MESSAGE1: A file section can not be found...a volume must be missing.
      229     9172                 DESCRIPTION: An attempt to change to a missing volume or
      230     9173                    find a non-existent file by its sequence number was made.
      231     9174         ***/
      232     9175
      233     9176        %FT$ERR( ERRNAME=E_VOLOUT, MID='22'O, CODE=%E$VOLOUT, SEV=2 );
      234     9184        /*E*     ERROR: FTR-E$VOLOUT-2
      235     9185                 MESSAGE: No more volumes% for %TA%
      236     9186                 DESCRIPTION: DCB.MAXVOL = 0 and no more serial
      237     9187                    numbers exist.
      238     9188         ***/
      239     9189
      240     9190        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:8    
      241     9191        /*********************************************************************/
      242     9192    1   FTR$RELFPOOLS: ENTRY ALTRET;
      243     9193        /*F*    NAME: FTR$RELFPOOLS
      244     9194                PURPOSE: Release all FPOOL buffers.
      245     9195         ***/
      246     9196
      247     9197
      248     9198        /********************/
      249     9199
      250     9200    1      JDCB$ = B$JIT.DCB$;                  /* Get pointer to DCB                 */
      251     9201    2      DO TEMP=0 TO 4;
      252     9202    2         IF F$DCB.BFR.BUFX(TEMP) > 0
      253     9203    3          THEN DO;                         /* Buffer to release                  */
      254     9204    4            DO CASE(TEMP);
      255     9205    4             CASE(ELSE);
      256     9206    4               CALL FMD$RELBUF(TEMP);      /* Just release                       */
      257     9207    4             CASE(1);
      258     9208    4               IF F$DCB.ACS ~= %JRNL#
      259     9209    4                THEN CALL FMD$RELBUF( TEMP );
      260     9210    4             END;
      261     9211    3            END;
      262     9212    2         END;
      263     9213    1      F$DCB.LPOOL = 0;                     /* No label FPOOL buffer              */
      264     9214    1      F$DCB.CBUFNUM = 0;
      265     9215    1      RETURN;
      266     9216
      267     9217        /*********************************************************************/
      268     9218        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:9    
      269     9219        /*********************************************************************/
      270     9220    1   FTR$GETSN: ENTRY(N,P$) ALTRET;
      271     9221        /*F*     NAME: FTR$GETSN
      272     9222                 PURPOSE: Get specified serial number.
      273     9223         ***/
      274     9224
      275     9225        /********************/
      276     9226
      277     9227    1      REWIND = %YES#;                      /* Remember GET                       */
      278     9228    1      GOTO FNDSN;
      279     9229
      280     9230    1   FTR$SETSN: ENTRY(N,P$) ALTRET;
      281     9231        /*F*  NAME: FTR$SETSN
      282     9232              PURPOSE: Set specified serial number.
      283     9233         ***/
      284     9234
      285     9235        /********************/
      286     9236
      287     9237    1      REWIND = %NO#;
      288     9238
      289     9239    1   FNDSN: ;
      290     9240
      291     9241    1      IF N < 1 THEN ALTRETURN;
      292     9242    1      JDCB$ = B$JIT.DCB$;                  /* Get DCB pointer                    */
      293     9243    1      IF F$DCB.ACS = %JRNL#           /* Determine beginning of SN CFU chain     */
      294     9244    2       THEN DO;
      295     9245    2         TEMP = F$DCB.CFU$->FM$CFUJ.SNLINKX;
      296     9246    2         IF TEMP <= 0
      297     9247    2          THEN CFU$ = ADDR(NIL);
      298     9248    2          ELSE CFU$ = PINCRW( F$CFU$, TEMP );
      299     9249    2         END;
      300     9250    1       ELSE CFU$ = F$DCB.CFU$;
      301     9251    1      IF CFU$ = ADDR(NIL)
      302     9252    2       THEN DO;                            /* Only SN is primary                 */
      303     9253    2         IF N > 1 THEN ALTRETURN;
      304     9254    2         IF REWIND
      305     9255    2          THEN P$->THESN = F$DCB.PSN;      /* Get                                */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:10   
      306     9256    2          ELSE F$DCB.PSN = P$->THESN;      /* Set                                */
      307     9257    2         END;
      308     9258    2       ELSE DO;                            /* Have a CFU list                    */
      309     9259    2         I = N - 1;                        /* Index of SN                        */
      310     9260    3         DO WHILE(I >= 4);
      311     9261    3            TEMP = CFU$->FT$CFUSN.LINKX;   /* Offset to next                     */
      312     9262    3            IF TEMP = 0 THEN ALTRETURN;
      313     9263    3            CFU$ = PINCRW( F$CFU$, TEMP );
      314     9264    3            I = I - 4;
      315     9265    3            END;
      316     9266    2         IF I >= CFU$->FT$CFUSN.NUM THEN ALTRETURN;
      317     9267    2         IF REWIND
      318     9268    2          THEN P$->THESN = CFU$->FT$CFUSN.SN(I); /* Get                          */
      319     9269    2          ELSE CFU$->FT$CFUSN.SN(I) = P$->THESN; /* Set                          */
      320     9270    2         END;
      321     9271    1      RETURN;
      322     9272
      323     9273        /*********************************************************************/
      324     9274        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:11   
      325     9275        /*********************************************************************/
      326     9276    1   FTR$RELCFUS: ENTRY ALTRET;
      327     9277        /*F*     NAME: FTR$RELCFUS
      328     9278                 PURPOSE: Release all CFUs.
      329     9279         ***/
      330     9280
      331     9281        /********************/
      332     9282
      333     9283         /***
      334     9284          *** Get pointer to first CFU.
      335     9285          ***/
      336     9286
      337     9287    1      JDCB$ = B$JIT.DCB$;
      338     9288    1      CFU$ = F$DCB.CFU$;
      339     9289    1      IF F$DCB.ACS = %JRNL#
      340     9290    1       THEN IF NOT F$DCB.OWNER
      341     9291    1          THEN RETURN;                     /* Don't release for non-owner        */
      342     9292    2          ELSE DO;
      343     9293    2            TEMP = CFU$->FM$CFUJ.SNLINKX;
      344     9294    2            IF TEMP <= 0 THEN RETURN;
      345     9295    2            CFU$ = PINCRW( F$CFU$, TEMP );
      346     9296    2            END;
      347     9297    1      IF CFU$ = ADDR(NIL) THEN RETURN;     /* Return if none                     */
      348     9298
      349     9299         /***
      350     9300          *** Release CFUs 'til none left.
      351     9301          ***/
      352     9302
      353     9303    2      DO WHILE('1'B);
      354     9304    2         TEMP = CFU$->FT$CFUSN.LINKX;      /* Get link to next CFU               */
      355     9305    2         CALL FMR$Z8(CFU$);                /* Release CFU                        */
      356     9306    2         IF TEMP <= 0
      357     9307    3          THEN DO;                         /* End of SN CFU chain                */
      358     9308    3            IF B$JIT.DCB$->F$DCB.ACS = %JRNL# THEN
      359     9309    3               B$JIT.DCB$->F$DCB.CFU$->FM$CFUJ.SNLINKX=0;
      360     9310    3             ELSE B$JIT.DCB$->F$DCB.CFU$=ADDR(NIL);
      361     9311    3            RETURN;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:12   
      362     9312    3            END;
      363     9313    2         CFU$ = PINCRW( F$CFU$, TEMP );    /* Point to next CFU                  */
      364     9314    2         END;
      365     9315
      366     9316        /*********************************************************************/
      367     9317        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:13   
      368     9318        /********************************************************************/
      369     9319    1   FTR$JRNLDCB: ENTRY ALTRET;
      370     9320        /*F*     NAME: FTR$JRNLDCB
      371     9321                 PURPOSE: Sets up DCB from JRNL CFU.
      372     9322         ***/
      373     9323
      374     9324        /********************/
      375     9325
      376     9326    1      JDCB$ = B$JIT.DCB$;
      377     9327    1      CFU$ = F$DCB.CFU$;
      378     9328
      379     9329    1      F$DCB.CNVRT = %NO#;
      380     9330    1      F$DCB.RPOS = %YES#;
      381     9331    1      F$DCB.CRECX = CFU$->FM$CFUJ.BLKLEN;
      382     9332    1      F$DCB.NRECX = 0;
      383     9333    1      F$DCB.CRECNO = 0;
      384     9334    1      F$DCB.PRECNO = CFU$->FM$CFUJ.PRECNO;
      385     9335    1      F$DCB.AFTRBLK = %NO#;
      386     9336    1      F$DCB.BLKLEN = CFU$->FM$CFUJ.BLKLEN;
      387     9337    1      F$DCB.NEW_FSECT = %NO#;
      388     9338    1      F$DCB.CBUFNUM = 1;
      389     9339    1      F$DCB.TRNC = FT_NOTRUNC#;
      390     9340    1      F$DCB.MUST_CVOL = %NO#;
      391     9341    1      F$DCB.VOL = CFU$->FM$CFUJ.VOL;
      392     9342    1      F$DCB.MAXVOL = CFU$->FM$CFUJ.MAXVOL;
      393     9343    1      F$DCB.SETX = CFU$->FM$CFUJ.DCTX;
      394     9344    1      RETURN;
      395     9345
      396     9346        /********************************************************************/
      397     9347        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:14   
      398     9348        /********************************************************************/
      399     9349    1   FTR$UNJRNLDCB: ENTRY ALTRET;
      400     9350        /*F*     NAME: FTR$UNJRNLDCB
      401     9351                 PURPOSE: Saves DCB information from last operation in
      402     9352                    JRNL CFU.
      403     9353         ***/
      404     9354
      405     9355        /********************/
      406     9356
      407     9357    1      JDCB$ = B$JIT.DCB$;
      408     9358    1      CFU$ = F$DCB.CFU$;
      409     9359
      410     9360    1      CFU$->FM$CFUJ.VOL = F$DCB.VOL;
      411     9361    1      CFU$->FM$CFUJ.MAXVOL = F$DCB.MAXVOL;
      412     9362    1      CFU$->FM$CFUJ.PRECNO = F$DCB.PRECNO;
      413     9363    1      CFU$->FM$CFUJ.BLKLEN = F$DCB.BLKLEN;
      414     9364    1      CFU$->FM$CFUJ.DCTX = F$DCB.SETX;
      415     9365    1      RETURN;
      416     9366
      417     9367        /********************************************************************/
      418     9368        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:15   
      419     9369        /*********************************************************************/
      420     9370    1   FTR$DPT: ENTRY ALTRET;
      421     9371        /*F*     NAME: FTR$DPT
      422     9372                 PURPOSE: Density, write permit and type checking for
      423     9373                    newly mounted tape.
      424     9374                 INPUT: DCB.NOEOF is set if the open may cause tape to be written.
      425     9375         ***/
      426     9376
      427     9377        /********************/
      428     9378
      429     9379         /***
      430     9380          *** Verify tape type according to table below:
      431     9381          ***
      432     9382          *** AS - ANSscratch, EA - expired ANS, UA - unexpired ANS, F - unlabeled
      433     9383          *** AO - ANS ooutput, AI - ANS input, FO - free output, FI - free input
      434     9384          ***
      435     9385          ***       \  AS | EA | UA | F
      436     9386          ***     AO | K  | K  | NOK| K
      437     9387          ***     AI | K  | K  | K  | N
      438     9388          ***     FO | NOK| NOK| NOK| K
      439     9389          ***     FI | F  | F  | F  | K
      440     9390          ***
      441     9391          *** K - ok, N - no way, F - requires fauth, NOK - if unprot
      442     9392          ***    system ok, if semiprot requires OVER keyin, if fully prot
      443     9393          ***    no way, C - OK if not tape type check system
      444     9394          ***/
      445     9395
      446     9396    1      JDCB$ = B$JIT.DCB$;
      447     9397    1      DDDT$ = NK$LDCT$(F$DCB.SETX)->NK$LDCT.DDT$;
      448     9398    1      SCRATCH = %NO#;                      /* Init flag                          */
      449     9399    2      IF F$DCB.ASN = %DEVICE# THEN DO;     /* Device tape DCB                    */
      450     9400    3         IF FT$DDT.ANST THEN DO;           /* Open to ANS tape?                  */
      451     9401    3            IF B$JIT.PRIV.ACTIVE & %PR_FMSEC# THEN
      452     9402    3               ;                           /* This user can get away with it     */
      453     9403    4             ELSE DO;
      454     9404    5               IF F$DCB.NOEOF THEN DO;     /* Trying to write tape               */
      455     9405    6                  IF FT_TAPETYPECHK ~= 0 OR FT_PROT = FT_FULLPROT# THEN DO;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:16   
      456     9406                                                /* Can't change ANS tape to free tape */
      457     9407    6                     B$JIT.ERR = E_NOTDEV; /*E* ERROR: FTR-E$NOTDEV */
      458     9408    6                     ALTRETURN;
      459     9409    6                     END;
      460     9410    6                   ELSE DO;                /* Might be able to change tape type  */
      461     9411    6                     IF FT$DDT.POS = FTP_BOV# THEN
      462     9412    6                        ;             /* Ok at BOV since label is written over   */
      463     9413    7                      ELSE DO;        /* Can't write free tape amidst ANS files  */
      464     9414    7                        B$JIT.ERR = E_NOTDEV; /*E* ERROR: FTR-E$NOTDEV */
      465     9415    7                        ALTRETURN;
      466     9416    7                        END;
      467     9417    6                     END;
      468     9418    5                  END;
      469     9419    5                ELSE DO; /* Can't read ANS tape as free tape (bypasses file checks) */
      470     9420    5                  IF B$JIT.PRIV.ACTIVE & (%PR_FMBLK# | %PR_FMREAD#) THEN
      471     9421    5                     ;                     /* Permit read of LT as FT            */
      472     9422    6                   ELSE DO;
      473     9423    6                     B$JIT.ERR = E_NOTDEV; /*E* ERROR: FTR-E$NOTDEV */
      474     9424    6                     ALTRETURN;
      475     9425    6                     END;
      476     9426    5                  END;
      477     9427    4               END;
      478     9428    3            END;
      479     9429    2          ELSE
      480     9430    2            ;                         /* Open device tape DCB to free tape ok    */
      481     9431    2         END;
      482     9432    2       ELSE DO;                            /* ANS tape DCB                       */
      483     9433    2         IF FT$DDT.ANST OR (NOT FT$DDT.ANST AND FT$DDT.NOWANS) THEN
      484     9434    2            ;                              /* Ok to ANS type tape                */
      485     9435    3          ELSE DO;                         /* To free tape...check this          */
      486     9436    4            IF F$DCB.NOEOF THEN DO;        /* For output                         */
      487     9437    4               IF B$JIT.PRIV.ACTIVE & %PR_FMSEC# THEN
      488     9438    4                  ;                        /* This user is able to               */
      489     9439    5                ELSE DO;                   /* Check further                      */
      490     9440    6                  IF FT$DDT.POS ~= FTP_BOV# THEN DO;
      491     9441                                      /* Not at beginning of tape and not privileged  */
      492     9442    6                     B$JIT.ERR = E_NOTANS; /*E* ERROR: FTR-E$NOTANS */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:17   
      493     9443    6                     ALTRETURN;
      494     9444    6                     END;
      495     9445    5                  END;
      496     9446    4               END;
      497     9447    4             ELSE DO;                      /* Can't open free tape for ANS input */
      498     9448    4               B$JIT.ERR = E_NOTANS; /*E* ERROR: FTR-E$NOTANS */
      499     9449    4               ALTRETURN;
      500     9450    4               END;
      501     9451    3            END;
      502     9452    2         END;
      503     9453
      504     9454         /***
      505     9455          *** Perform user and system specified volume protection checks
      506     9456          *** if user is not bypassing file management security checks.
      507     9457          ***/
      508     9458
      509     9459    1      IF FT$DDT.ANST AND NOT B$JIT.PRIV.ACTIVE & %PR_FMSEC#
      510     9460    2       THEN DO;                            /* Protect ANS volume                 */
      511     9461    2         IF (B$JIT.ACCN ~= FT$DDT.ACCT) AND (NOT FT$DDT.EXPIRED) AND
      512     9462    2           (FT_PROT ~= FT_UNPROT#)
      513     9463    3          THEN DO;                         /* User is not volume owner           */
      514     9464    4            DO CASE(FT$DDT.VOLACCESS);     /* Determine what to do               */
      515     9465    4             CASE(%NONE#);       /* Owner doesn't want anyone else to use it     */
      516     9466    4               IF B$JIT.PRIV.ACTIVE & %PR_FMBLK# AND F$DCB.FUN = %IN#
      517     9467    4                THEN ;                     /* Reading allowed, and only reading  */
      518     9468    5                ELSE DO;
      519     9469    5                  B$JIT.ERR = E_NOTOWNR; /*E* ERROR: FTR-E$NOTOWNR */
      520     9470    5                  ALTRETURN;
      521     9471    5                  END;
      522     9472    4             CASE(%IN#);                   /* Owner only permits readers         */
      523     9473    4               IF F$DCB.NOEOF
      524     9474    5                THEN DO;                   /* But this is a writer               */
      525     9475    5                  B$JIT.ERR = E_NOTOWNRW; /*E* ERROR: FTR-E$NOTOWNRW */
      526     9476    5                  ALTRETURN;
      527     9477    5                  END;
      528     9478    4             CASE(0,%ALL#);                /* Owner doesn't care or permits all  */
      529     9479    5               DO; END;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:18   
      530     9480    4             CASE(ELSE);                   /* Permit all...owner strange         */
      531     9481    5               DO; END;
      532     9482    4             END;
      533     9483    3            END;
      534     9484
      535     9485    2         IF FT$DDT.ANST AND F$DCB.NOEOF    /* Output to ANS tape?                */
      536     9486    2           AND NOT (FT$DDT.SCRTCH OR FT$DDT.EXPIRED) /* Volume unexpired?        */
      537     9487    2           AND NOT (F$DCB.XTEND AND F$DCB.FUN = %CREATE#) /* Overwriting files?  */
      538     9488    2           AND NOT FT$DDT.WRITE       /* User doesn't yet have write privilege   */
      539     9489    2           AND FT_PROT ~= FT_UNPROT#       /* Semi- or fully protected system?   */
      540     9490    3          THEN DO;                         /* Then OVER keyin might be needed    */
      541     9491    3            IF F$DCB.ASN ~= %DEVICE#
      542     9492    4             THEN DO;            /* Might be CVOL to already modified volume     */
      543     9493                    /*N* MIGHT_WANT_MORE_COMPLETE_CHECK_HERE */
      544     9494    4               GOTO NOCVOLCHK;
      545     9495    4               END;
      546     9496    4             ELSE DO;
      547     9497    4   NOCVOLCHK:  ;
      548     9498    4               IF FT_PROT = FT_FULLPROT#
      549     9499    5                THEN DO;                   /* Illegal                            */
      550     9500    5                  B$JIT.ERR = E_UNEXPIRED; /*E* FTR-E$UNEXPIRED */
      551     9501    5                  ALTRETURN;
      552     9502    5                  END;
      553     9503    5                ELSE DO;                   /* Request OVER keyin                 */
      554     9504    5                  MSGS.MG1 = F$DCB.PSN;    /* Tell opr SN if any                 */
      555     9505    5                  MSGS.MG2 = 0;            /* Reason for OVER is unexpired       */
      556     9506    5                  TEMP = F$DCB.SETX;
      557     9507    5                  FT$DDT.SOLICIT = FT_OVERSOL#; /* Remember asking               */
      558     9508    5                  CALL FTR_ROMSG('OVER');  /* Tell user                          */
      559     9509    6                  DO WHILE(FT$DDT.SOLICIT = FT_OVERSOL#);
      560     9510    6                     CALL OCI$MK_WR(M_TAPE,OVER_MSG#,2,'006001'O,MSGS,TEMP);
              9510                              /* Ask for over keyin */
      561     9511    6                     CALL SSR$REG(%SS_SL,ADDR(NIL),MNTWAIT) ALTRET(NOOVER);
      562     9512    6                     END;
      563     9513    5                  IF FT$DDT.SOLICIT ~= 0
      564     9514    6                   THEN DO;                /* Wouldn't over tape                 */
      565     9515    6                     FT$DDT.SOLICIT = 0;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:19   
      566     9516    6                     B$JIT.ERR = E_OPROT; /*E* ERROR: FTR-E$OPROT */
      567     9517    6                     ALTRETURN;
      568     9518    6                     END;
      569     9519    5                  END;
      570     9520    4               END;
      571     9521    3            END;
      572     9522    2         END;
      573     9523
      574     9524         /***
      575     9525          *** OVER keyin is needed to change ANS tape to free tape and vice
      576     9526          *** versa for semi-protected systems.  This type of change is illegal
      577     9527          *** in fully protected systems and is caught above.
      578     9528          ***/
      579     9529
      580     9530    1      IF NOT B$JIT.PRIV.ACTIVE & %PR_FMSEC# /* Not allowed to bypass             */
      581     9531    1        AND ( ( (FT$DDT.ANST OR (NOT FT$DDT.ANST AND FT$DDT.NOWANS))
      582     9532    1        AND F$DCB.ASN = %DEVICE#)          /* Changing tape type                 */
      583     9533    1        OR (NOT (FT$DDT.ANST OR (NOT FT$DDT.ANST AND FT$DDT.NOWANS))
      584     9534    1        AND F$DCB.ASN ~= %DEVICE#) )
      585     9535    1        AND ( (FT_PROT = FT_SEMIPROT#)
              9535                 /* If system requires type change verification */
      586     9536    1        OR (FT_PROT = FT_UNPROT# AND FT_TAPETYPECHK ~= 0) )
      587     9537    2       THEN DO;                            /* Require OVER keyin                 */
      588     9538    2         MSGS.MG1 = F$DCB.PSN;             /* Tell opr SN if any                 */
      589     9539    2         IF FT$DDT.ANST
      590     9540    2          THEN MSGS.MG2 = 2;               /* Changing ANS to non-ans            */
      591     9541    2          ELSE MSGS.MG2 = 1;               /* Changing non-ANS to ANS            */
      592     9542    2         TEMP = F$DCB.SETX;
      593     9543    2         FT$DDT.SOLICIT = FT_OVERSOL#;     /* Remember asking                    */
      594     9544    2         CALL FTR_ROMSG('OVER');           /* Tell user                          */
      595     9545    3         DO WHILE(FT$DDT.SOLICIT = FT_OVERSOL#);
      596     9546    3            CALL OCI$MK_WR(M_TAPE,OVER_MSG#,2,'006001'O,MSGS,TEMP);
              9546                     /* Ask for over keyin */
      597     9547    3            CALL SSR$REG(%SS_SL,ADDR(NIL),MNTWAIT) ALTRET(NOOVER);
      598     9548    3            END;
      599     9549    2         IF FT$DDT.SOLICIT ~= 0
      600     9550    3          THEN DO;                         /* Wouldn't over tape                 */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:20   
      601     9551    3            FT$DDT.SOLICIT = 0;
      602     9552    3            B$JIT.ERR = E_OPROT; /*E* ERROR: FTR-E$OPROT */
      603     9553    3            ALTRETURN;
      604     9554    3            END;
      605     9555    2         END;
      606     9556
      607     9557         /***
      608     9558          *** Now worry about writing on tape.
      609     9559          ***/
      610     9560
      611     9561    1      IF F$DCB.FUN ~= %IN#
      612     9562    2       THEN DO;                            /* Must permit tape write             */
      613     9563    2         CALL FTR_GETRING ALTRET(JUSTALT);
      614     9564    2         END;
      615     9565
      616     9566         /***
      617     9567          *** Now check/set density.  Setting is only permitted at load point.
      618     9568          *** We further restrict this to output tapes or tapes whose density
      619     9569          *** could not be determined during AVR due to errors.
      620     9570          ***/
      621     9571
      622     9572    1      IF FT$DDT.POS = FTP_BOV# AND
      623     9573    1        (F$DCB.NOEOF OR FT$DDT.DENSITY = %D_UNKNOWN#) AND
      624     9574    1        F$DCB.IASN ~= %OD#
      625     9575    2       THEN DO;                            /* Beginning of volume for write      */
      626     9576    2         IF F$DCB.DENSITY = 0
      627     9577    3          THEN DO;               /* Density unspecified; pick highest available  */
      628     9578    3            I = 5;
      629     9579    4            DO WHILE (I >= 0);
      630     9580    4               IF FT_DENS(I) & F$DCB.ATTR
      631     9581    5                THEN DO;
      632     9582    5                  F$DCB.DENSITY = I;       /* Found highest                      */
      633     9583    5                  I = -2;
      634     9584    5                  END;
      635     9585    4                ELSE I = I - 1;
      636     9586    4               END;
      637     9587    3            IF I = -1
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:21   
      638     9588    4             THEN DO;                 /* Drive does not have specified density   */
      639     9589    4               B$JIT.ERR = E_DENSBAD; /*E* ERROR: FTR-E$DENSBAD */
      640     9590    4               ALTRETURN;
      641     9591    4               END;
      642     9592    3            END;
      643     9593    3          ELSE DO;                    /* Density is specified; must be on drive  */
      644     9594    3            IF NOT F$DCB.ATTR & FT_DENS(F$DCB.DENSITY)
      645     9595    4             THEN DO;                 /* Drive does not have specified density   */
      646     9596    4               B$JIT.ERR = E_DENSBAD; /*E* ERROR: FTR-E$DENSBAD */
      647     9597    4               ALTRETURN;
      648     9598    4               END;
      649     9599    3            END;
      650     9600    2         IF F$DCB.DENSITY ~= FT$DDT.DENSITY
      651     9601    3          THEN DO;                         /* Density change necessary           */
      652     9602    4            DO CASE(F$DCB.DENSITY);        /* Do by desired density              */
      653     9603    4             CASE(%D800#);
      654     9604    4               CALL FTI$SD800 ALTRET(JUSTALT);
      655     9605    4             CASE(%D1600#);
      656     9606    4               CALL FTI$SD1600 ALTRET(JUSTALT);
      657     9607    4             CASE(%D6250#);
      658     9608    4               CALL FTI$SD6250 ALTRET(JUSTALT);
      659     9609    4             CASE(ELSE);                   /* Anything else is unsupported       */
      660     9610    4               B$JIT.ERR = E_DENSBAD; /*E* ERROR: FTR-E$DENSBAD */
      661     9611    4               ALTRETURN;
      662     9612    4             END;
      663     9613    3            END;
      664     9614    2         IF F$DCB.NOEOF AND F$DCB.ASN ~= %DEVICE#
      665     9615    2           AND NOT FT$DDT.ANST
      666     9616    3          THEN DO;                         /* Starting ANS tape at free tape BOV */
      667     9617    3            FT$DDT.ANST   = %YES#;
      668     9618    3            FT$DDT.NOWANS = %NO#;
      669     9619    3            END;
      670     9620    2         END;
      671     9621    2       ELSE DO;                  /* Not at BOV...get drive's current density     */
      672     9622    2         F$DCB.DENSITY = FT$DDT.DENSITY;
      673     9623    2         END;
      674     9624
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:22   
      675     9625         /***
      676     9626          *** If ANS tape is modified as a free tape, loose its ANSness.
      677     9627          *** If a device tape is modified as an ANS tape, make it NOWANS.
      678     9628          ***/
      679     9629
      680     9630    1      IF F$DCB.ASN = %DEVICE#
      681     9631    2       THEN DO;
      682     9632    2         IF FT$DDT.ANST AND F$DCB.FUN ~= %IN#
      683     9633    3          THEN DO;                         /* ANS tape losing ANSness            */
      684     9634    3            FT$DDT.ANST = %NO#;
      685     9635    3            FT$DDT.FSN = 0;
      686     9636    3            END;
      687     9637    2          ELSE ;                           /* Unnecessary, I know                */
      688     9638    2         END;
      689     9639    2       ELSE DO;
      690     9640    2         IF NOT FT$DDT.ANST AND F$DCB.FUN ~= %IN#
      691     9641    2          THEN FT$DDT.NOWANS = %YES#;      /* Now ANS portion exists             */
      692     9642    2          ELSE ;
      693     9643    2         END;
      694     9644    1      RETURN;
      695     9645
      696     9646    1   NOOVER: ;                               /* Didn't wait for over keyin         */
      697     9647    1      FT$DDT.SOLICIT = 0;
      698     9648    1      CALL OCI$MK_WR(M_TAPE,DBOVER_MSG#,1,'006'O,MSGS,TEMP);
      699     9649                                                /* Don't bother overing               */
      700     9650    1      B$JIT.ERR = E_TAPBRK; /*E* ERROR: FTR-E$TAPBRK */
      701     9651    1      ALTRETURN;
      702     9652
      703     9653        /*********************************************************************/
      704     9654        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:23   
      705     9655        /********************************************************************/
      706     9656    1   FTR_ROMSG: PROC(MSG);
      707     9657        /*F*     NAME: FTR_ROMSG
      708     9658                 PURPOSE: Tell user that RING or OVER keyin is pending.
      709     9659         ***/
      710     9660
      711     9661         /***
      712     9662          *** Parameter:
      713     9663          ***/
      714     9664
      715     9665    2   DCL MSG CHAR(4);                        /* Either 'RING' or 'OVER'            */
      716     9666
      717     9667        /********************/
      718     9668
      719     9669    2      IF B$JIT.MODE ~= %M_INT# OR NOT S$CU$->B$U.FLG.ANNCE THEN RETURN;
      720     9670    2      ROMSGMSGAUTO = ROMSGMSG;
      721     9671    2      ROMSGAUTO = ROMSG;
      722     9672    2      ROMSGAUTO.V_ = VECTOR(ROMSGAUTO.V);
      723     9673    2      ROMSGAUTO.BUF_ = VECTOR(ROMSGMSGAUTO);
      724     9674    2      ROMSGMSGAUTO.SN = F$DCB.PSN;
      725     9675    2      ROMSGMSGAUTO.TT = F$DCB.RESNT.TYP;
      726     9676    2      ROMSGMSGAUTO.ROOPT = MSG;
      727     9677    2      CALL M$MWRITE(ROMSGAUTO) ALTRET(SOWHAT);
      728     9678    2   SOWHAT: ;
      729     9679    2      B$JIT.DCB$ = JDCB$;                  /* Restore DCB pointer                */
      730     9680    2      RETURN;
      731     9681
      732     9682    2   END FTR_ROMSG;
      733     9683        /********************************************************************/
      734     9684        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:24   
      735     9685        /*********************************************************************/
      736     9686    1   FTR_GETRING: PROC ALTRET;
      737     9687        /*F*     NAME: FTR_GETRING
      738     9688                 PURPOSE: Gets ring in tape.
      739     9689         ***/
      740     9690
      741     9691         /***
      742     9692          *** Locals:
      743     9693          ***/
      744     9694
      745     9695    2   DCL POS_KNOWN BIT(1) AUTO;              /* Indicates if position known        */
      746     9696    2   DCL SAVFSN SBIN AUTO;                   /* Saves DDT fields                   */
      747     9697    2   DCL SAVFRSTFSN SBIN AUTO;
      748     9698    2   DCL SAVFMCNT SBIN AUTO;
      749     9699    2   DCL SAVEBCDIC BIT(1) AUTO;
      750     9700    2   DCL SAVPOS SBIN AUTO;
      751     9701    2   DCL SAVDEVICE SBIN AUTO;
      752     9702
      753     9703        /********************/
      754     9704
      755     9705         /***
      756     9706          *** Already done if write access allowed.
      757     9707          ***/
      758     9708
      759     9709    2      IF FT$DDT.WRITE THEN RETURN;         /* Already have write access          */
      760     9710    2      IF FT$DDT.RINGIN THEN GOTO GOT_RING; /* Ring exists already                */
      761     9711         /***
      762     9712          *** Ask operator if he wants to put a ring in current tape.
      763     9713          *** If not, return protected error.  If so, determine current
      764     9714          *** position, dismount tape to permit ring insertion, then ask
      765     9715          *** for tape again.
      766     9716          ***/
      767     9717
      768     9718    2      POS_KNOWN = %NO#;                    /* Position not known yet             */
      769     9719    2      I = 0;
      770     9720    2      J = 0;
      771     9721    3      DO WHILE(NOT FT$DDT.RINGIN);
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:25   
      772     9722    3         IF FT_RINGBOTONLY > 0 AND FT$DDT.POS ~= FTP_BOV#
      773     9723    4          THEN DO;                         /* Ring allowed at bot only           */
      774     9724    4            B$JIT.ERR = E_PROT; /*E* ERROR: FTR-E$PROT */
      775     9725    4            RETURN;
      776     9726    4            END;
      777     9727    3         MSGS.MG1 = F$DCB.PSN;             /* Tell opr SN if any                 */
      778     9728    3         TEMP = F$DCB.SETX;
      779     9729    3         FT$DDT.SOLICIT = FT_RINGSOL#;     /* Remember asking                    */
      780     9730    3         CALL FTR_ROMSG('RING');           /* Tell user                          */
      781     9731    4         DO WHILE(FT$DDT.SOLICIT = FT_RINGSOL#);
      782     9732    4            CALL OCI$MK_WR(M_TAPE,RING_MSG#,1,'006'O,MSGS,TEMP); /* Ask for ring */
      783     9733    4            CALL SSR$REG(%SS_SL,ADDR(NIL),MNTWAIT) ALTRET(NORING);
      784     9734    4            END;
      785     9735    3         IF FT$DDT.SOLICIT ~= 0
      786     9736    4          THEN DO;                         /* Wouldn't ring tape                 */
      787     9737    4            FT$DDT.SOLICIT = 0;
      788     9738    4            B$JIT.ERR = E_NORING; /*E* ERROR: FTR-E$NORING */
      789     9739    4            ALTRETURN;
      790     9740    4            END;
      791     9741    4          ELSE DO;
      792     9742    4            SAVPOS = FT$DDT.POS;
      793     9743    4            SAVDEVICE = F$DCB.ASN;
      794     9744    4            IF (SAVPOS = FTP_HDR#) THEN
      795     9745    5            DO;
      796     9746    5               SAVFSN = FT$DDT.FSN;
      797     9747    5               SAVFRSTFSN= FT$DDT.FRSTFSN;
      798     9748    5               CALL FTI$REWIND ALTRET(JUSTALT);
      799     9749    5               END;
      800     9750    5             ELSE DO;                      /* Operator asked to put ring in tape */
      801     9751    5               IF NOT POS_KNOWN
      802     9752    6                THEN DO;                   /* Determine tape position            */
      803     9753    6                  SAVFSN = FT$DDT.FSN;     /* Save critical DDT items            */
      804     9754    6                  SAVFRSTFSN = FT$DDT.FRSTFSN;
      805     9755    6                  SAVFMCNT = FT$DDT.FMCNT;
      806     9756    6                  SAVEBCDIC = FT$DDT.EBCDIC;
      807     9757    6                  I = 0;
      808     9758    6                  F$DCB.TYC(1) = '0'B;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:26   
      809     9759    7                  DO WHILE (NOT F$DCB.TYC(1));
      810     9760    7                     F$DCB.ARS = -65500;
      811     9761    7                     CALL FTI$SPREC ALTRET(JUSTALT);
      812     9762    7                     I = I + F$DCB.ARS;    /* Count records                      */
      813     9763    7                     END;
      814     9764    6                  IF F$DCB.TYC.BOF(1)
      815     9765    7                   THEN DO;                /* Don't count file mark as record    */
      816     9766    7                     I = I - 1;
      817     9767    7                     J = 1;                /* One file mark hit                  */
      818     9768    7                     END;
      819     9769    6                   ELSE J = 0;
      820     9770    7                  DO WHILE(NOT F$DCB.TYC.BOT(1));
      821     9771    7                     F$DCB.ARS = -65500;
      822     9772    7                     CALL FTI$SPFILE ALTRET(JUSTALT);
      823     9773    7                     J = J + F$DCB.ARS;    /* Count file marks                   */
      824     9774    7                     END;
      825     9775    6                  POS_KNOWN = %YES#;       /* Know tape position                 */
      826     9776    6                  END;
      827     9777    5               END;
      828     9778
      829     9779    4            CALL FRB$CREM;                 /* Dismount tape                      */
      830     9780    4            CALL FRA$OPR ALTRET(JUSTALT);  /* Get it back with ring in           */
      831     9781    4            DDDT$ = NK$LDCT$(F$DCB.SETX)->NK$LDCT.DDT$;
      832     9782    4            FT$DDT.SN = F$DCB.PSN;         /* Set actual serial number           */
      833     9783    4            CALL FTR$SETSN(F$DCB.VOL+0,ADDR(F$DCB.PSN)) ALTRET(NEVER0);
      834     9784    4   NEVER0:  ;
      835     9785    4            END;
      836     9786    3         END /* DO WHILE NOT RINGIN */ ;
      837     9787
      838     9788         /***
      839     9789          *** Ring is in.  Position where we were.
      840     9790          ***/
      841     9791
      842     9792    2      IF (SAVPOS = FTP_HDR#) THEN
      843     9793    3      DO;
      844     9794    3         IF (F$DCB.ASN = %DEVICE#) THEN
      845     9795    3            F$DCB.ARS = SAVFSN - 1;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:27   
      846     9796    3          ELSE
      847     9797    3            F$DCB.ARS = (SAVFSN - SAVFRSTFSN) * 3;
      848     9798    3         CALL FTI$SPFILE ALTRET(JUSTALT);
      849     9799    3         FT$DDT.POS = SAVPOS;
      850     9800    3         FT$DDT.FSN = SAVFSN;
      851     9801    3         FT$DDT.FRSTFSN = SAVFRSTFSN;
      852     9802    3         END;
      853     9803    2       ELSE
      854     9804    3      DO;
      855     9805    3         IF J > 0
      856     9806    4          THEN DO;                         /* Position to proper file            */
      857     9807    5            DO WHILE(J > 65500);
      858     9808    5               F$DCB.ARS = 65500;
      859     9809    5               CALL FTI$SPFILE ALTRET(JUSTALT);
      860     9810    5               J = J - F$DCB.ARS;
      861     9811    5               END;
      862     9812    4            F$DCB.ARS = J;
      863     9813    4            CALL FTI$SPFILE ALTRET(JUSTALT);
      864     9814    4            FT$DDT.POS = FTP_HDR#;         /* Must be at HDR                     */
      865     9815    4            END;
      866     9816    3         IF I > 0
      867     9817    4          THEN DO;                         /* Position to proper record          */
      868     9818    5            DO WHILE(I > 65500);
      869     9819    5               F$DCB.ARS = 65500;
      870     9820    5               CALL FTI$SPREC ALTRET(JUSTALT);
      871     9821    5               I = I - F$DCB.ARS;
      872     9822    5               END;
      873     9823    4            F$DCB.ARS = I;
      874     9824    4            CALL FTI$SPREC ALTRET(JUSTALT);
      875     9825    4            FT$DDT.POS = FTP_BOD#;         /* Must be in data                    */
      876     9826    4            END;
      877     9827    3         IF POS_KNOWN
      878     9828    4          THEN DO;                         /* Restore critical DDT items         */
      879     9829    4            FT$DDT.FSN = SAVFSN;           /* Restore critical DDT items         */
      880     9830    4            FT$DDT.FRSTFSN = SAVFRSTFSN;
      881     9831    4            FT$DDT.FMCNT = SAVFMCNT;
      882     9832    4            FT$DDT.EBCDIC = SAVEBCDIC;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:28   
      883     9833    4            END;
      884     9834    3         END;
      885     9835
      886     9836    2   GOT_RING:;
      887     9837    2      CALL FTI$PERMIT ALTRET(JUSTALT);     /* Permit write                       */
      888     9838    2      FT$DDT.WRITE = %YES#;                /* Write permit allowed               */
      889     9839    2      FT$DDT.SCRTCH = %NO#;                /* No longer scratch                  */
      890     9840    2      FT$DDT.EXPIRED = %NO#;               /* No longer simply expired           */
      891     9841    2      RETURN;
      892     9842
      893     9843    2   NORING: ;                          /* Altret while waiting for RING keyin     */
      894     9844    2      FT$DDT.SOLICIT = 0;                  /* Not waiting any more               */
      895     9845    2      CALL OCI$MK_WR(M_TAPE,DBRING_MSG#,1,'006'O,MSGS,TEMP);
      896     9846                                                /* Don't bother ringing               */
      897     9847    2      B$JIT.ERR = E_TAPBRK; /*E* ERROR: FTR-E$TAPBRK */
      898     9848
      899     9849    2   JUSTALT: ;
      900     9850    2      ALTRETURN;
      901     9851
      902     9852    2   END FTR_GETRING;
      903     9853        /*********************************************************************/
      904     9854        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:29   
      905     9855        /*********************************************************************/
      906     9856    1   FTR$CHNGVOL: ENTRY(N) ALTRET;
      907     9857    1      REWIND = %YES#;
      908     9858    1      GOTO CHNGVOL;
      909     9859    1   FTR$CHNGVOLNR: ENTRY(N) ALTRET;
      910     9860    1      REWIND = %NO#;
      911     9861    1   CHNGVOL: ;
      912     9862        /*F*     NAME: FTR$CHNGVOL(NR)
      913     9863                 PURPOSE: Change to volume specified by N.  NR for no rewind.
      914     9864                 INPUT: DCB.SEZ_OK if change to scratch ok.
      915     9865                    DCB.NOEOF if tape desired for output.
      916     9866         ***/
      917     9867
      918     9868        /********************/
      919     9869
      920     9870         /***
      921     9871          *** N must be greater than 0.
      922     9872          *** Set up pointers to DCB and DDT.
      923     9873          ***/
      924     9874
      925     9875    1      IF N < 1 THEN GOTO VOLORDER;         /* Illegal volume                     */
      926     9876    1      JDCB$ = B$JIT.DCB$;
      927     9877    1      DDDT$ = NK$LDCT$(F$DCB.SETX)->NK$LDCT.DDT$;
      928     9878
      929     9879         /***
      930     9880          *** Set up to find if volume is scratch or not.
      931     9881          ***/
      932     9882
      933     9883    1      SCRATCH = %NO#;                      /* Assume not scratch                 */
      934     9884    1      I = N - 1;                           /* Get index of next volume           */
      935     9885    1      IF F$DCB.ACS = %JRNL#                /* Get pointer to first SN CFU        */
      936     9886    2       THEN DO;
      937     9887    2         TEMP = F$DCB.CFU$->FM$CFUJ.SNLINKX;
      938     9888    2         IF TEMP <= 0
      939     9889    2          THEN CFU$ = ADDR(NIL);           /* No SN CFU chain                    */
      940     9890    2          ELSE CFU$ = PINCRW( F$CFU$, TEMP );
      941     9891    2         END;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:30   
      942     9892    1       ELSE CFU$ = F$DCB.CFU$;
      943     9893
      944     9894         /***
      945     9895          *** Determine SN from DCB.VOL, DCB.PSN and the SN CFUs.
      946     9896          ***/
      947     9897
      948     9898    1      IF CFU$ ~= ADDR(NIL)
      949     9899    2       THEN DO;                            /* Have a SN CFU chain                */
      950     9900    3         DO WHILE (I > 4);            /* Find CFU in which DCB.VOL SN resides    */
      951     9901    3            TEMP = CFU$->FT$CFUSN.LINKX;   /* Get ix of next CFU                 */
      952     9902    3            IF TEMP <= 0 THEN GOTO VOLORDER; /* Illegal volume                   */
      953     9903    3            CFU$ = PINCRW( F$CFU$, TEMP ); /* Point to it                        */
      954     9904    3            I = I - 4;
      955     9905    3            END;
      956     9906    2         IF I = 4
      957     9907    3          THEN DO;                         /* Vol might be first of next SN CFU  */
      958     9908    3            TEMP = CFU$->FT$CFUSN.LINKX;
      959     9909    3            IF TEMP > 0
      960     9910    4             THEN DO;                      /* Volume is first of next SN CFU     */
      961     9911    4               CFU$ = PINCRW( F$CFU$, TEMP );
      962     9912    4               I = 0;
      963     9913    4               END;
      964     9914    3             ELSE SCRATCH = %YES#;         /* No next block                      */
      965     9915    3            END;
      966     9916    3          ELSE DO;                         /* Vol might be within this SN CFU    */
      967     9917    3            IF I = CFU$->FT$CFUSN.NUM
      968     9918    3             THEN SCRATCH = %YES#;         /* Next (scratch) vol specified       */
      969     9919    3             ELSE IF I > CFU$->FT$CFUSN.NUM THEN GOTO VOLORDER;
      970     9920    3            END;
      971     9921    2         IF NOT SCRATCH THEN F$DCB.PSN = CFU$->FT$CFUSN.SN(I);
      972     9922    2         END;
      973     9923    2       ELSE DO;                            /* No SN CFUs...only one vol          */
      974     9924    2         IF I = 1
      975     9925    3          THEN DO;                         /* No SN CFU -> next vol is scratch   */
      976     9926    3            SAVPSN = F$DCB.PSN;            /* Save                               */
      977     9927    3            SCRATCH = %YES#;
      978     9928    3            I = 4;                         /* Indicates a new SN  CFU is needed  */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:31   
      979     9929    3            END;
      980     9930    2          ELSE IF I > 0
      981     9931    2             THEN GOTO VOLORDER;           /* Illegal volume                     */
      982     9932    2         END;
      983     9933
      984     9934         /***
      985     9935          *** What we have: I is index to current SN CFU or 4 indicating
      986     9936          *** a new one is needed; CFU$ points to the current SN CFU or is
      987     9937          *** ADDR(NIL) indicating the new SN CFU is the first; SCRATCH is
      988     9938          *** set if the next volume is scratch, reset if DCB.PSN contains
      989     9939          *** the next volume SN.
      990     9940          ***/
      991     9941
      992     9942    1      IF SCRATCH
      993     9943    2       THEN DO;                            /* Need scratch SN                    */
      994     9944    2         IF NOT F$DCB.SEZ_OK OR F$DCB.MAXVOL <= 0
      995     9945    3          THEN DO;          /* Scratch tape not allowed by caller or no more     */
      996     9946    3            B$JIT.ERR = E_VOLOUT; /*E* ERROR: FTR-E$VOLOUT */
      997     9947    3            ALTRETURN;
      998     9948    3            END;
      999     9949    2         F$DCB.MAXVOL = F$DCB.MAXVOL - 1;  /* Account scratch                    */
     1000     9950    2         F$DCB.PSN = ' ';
     1001     9951    2         END;
     1002     9952    1      F$DCB.ATTR = FT_DENS(FT$DDT.DENSITY);
     1003     9953                                           /* Erase UR tape file attrs for Res Mgmt   */
     1004     9954                                 /* Next tape should have same density as previous    */
     1005     9955    1      SAVEXP = FT$DDT.EXPIRE;              /* Save expiration date               */
     1006     9956    1      SAVOWNR = FT$DDT.ACCT;               /* Save owner account                 */
     1007     9957    1      SAVPROT = FT$DDT.VOLACCESS;          /* Save volume protection             */
     1008     9958    1      J = FT$DDT.FSN;                      /* Save file sequence number          */
     1009     9959
     1010     9960         /***
     1011     9961          *** Get next tape mounted.
     1012     9962          ***/
     1013     9963
     1014     9964    1      CALL FRA$COPN ALTRET(JUSTALT);
     1015     9965    1      IF F$DCB.FUN=%CREATE# THEN
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:32   
     1016     9966    2      DO CASE(F$DCB.ORG);
     1017     9967    2       CASE(%UR#,%SYMB#);
     1018     9968                                           /* Get UR tape file attrs back into DCB    */
     1019     9969    2         F$DCB.ATTR=F$DCB.ATTR|F$DCB.FORM$->CODE16.ATTR;
     1020     9970    2       END;
     1021     9971    1      F$DCB.VOL = N;                       /* Got volume N                       */
     1022     9972    1      DDDT$ = NK$LDCT$(F$DCB.SETX)->NK$LDCT.DDT$;
     1023     9973    1      IF F$DCB.ACS = %JRNL#
     1024     9974    1       THEN F$DCB.CFU$->FM$CFUJ.DCTX = F$DCB.SETX;
     1025     9975    1      FT$DDT.SN = F$DCB.PSN;               /* Set actual serial number           */
     1026     9976    1      CALL FTR$SETSN(F$DCB.VOL+0,ADDR(F$DCB.PSN)) ALTRET(NEVER1);
     1027     9977    1   NEVER1: ;
     1028     9978    1      IF REWIND AND F$DCB.IASN ~= %OD#
     1029     9979    2       THEN DO;
     1030     9980    2         IF FT$DDT.FMNEEDED
     1031     9981    3          THEN DO;
     1032     9982    3            FT$DDT.FMNEEDED = %NO#;
     1033     9983    3            CALL FTI$WRFM ALTRET(JUSTALT);
     1034     9984    3            END;
     1035     9985    2         CALL FTI$REWIND ALTRET(JUSTALT);
     1036     9986    2         END;
     1037     9987    1      IF FT$DDT.SCRTCH OR F$DCB.ASN = %DEVICE# OR NOT FT$DDT.ANST
     1038     9988    1        OR (F$DCB.NOEOF AND REWIND)
     1039     9989    2       THEN DO;                            /* Assume CVOL                        */
     1040     9990    2         FT$DDT.FSN = J;
     1041     9991    2         FT$DDT.FRSTFSN = J-1;
     1042     9992    2         END;
     1043     9993    2       ELSE IF F$DCB.IASN ~= %OD# THEN DO;
     1044     9994    2            CALL FTL$GETFSN ALTRET(JUSTALT); /* Get sequence number              */
     1045     9995    2            IF REWIND THEN CALL FTI$REWIND ALTRET(JUSTALT);
     1046     9996    2            END;
     1047     9997    1      IF F$DCB.IASN ~= %OD# THEN
     1048     9998    1         CALL FTR$DPT ALTRET(JUSTALT);     /* Check/set density, prot, type      */
     1049     9999
     1050    10000         /***
     1051    10001          *** If expiration date from previous tape is blank, it was probably
     1052    10002          *** the first volume of a PO tape in which case we'll use the
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:33   
     1053    10003          *** expiration date of the second volume.  For output CVOL, always
     1054    10004          *** use expiration date of first volume.
     1055    10005          ***/
     1056    10006
     1057    10007    1      IF SAVEXP ~= ' ' OR F$DCB.NOEOF
     1058    10008    2       THEN DO;
     1059    10009    2         FT$DDT.EXPIRE = SAVEXP;           /* Same expiration date               */
     1060    10010    2         FT$DDT.ACCT = SAVOWNR;            /* Same owner                         */
     1061    10011    2         FT$DDT.VOLACCESS = SAVPROT;       /* Same protection                    */
     1062    10012    2         END;
     1063    10013    1      IF F$DCB.NOEOF AND REWIND
     1064    10014    1       THEN FT$DDT.EBCDIC = F$DCB.EBCDIC;  /* Output CVOL...change tape type     */
     1065    10015
     1066    10016         /***
     1067    10017          *** If a scratch tape was mounted, add the actual SN to the SN CFU.
     1068    10018          ***/
     1069    10019
     1070    10020    1      IF SCRATCH
     1071    10021    2       THEN DO;                            /* A scratch tape was mounted         */
     1072    10022    2         IF I = 4
     1073    10023    3          THEN DO;                         /* Need another SN CFU for next SN    */
     1074    10024    3            CALL FMR$G8(TEMP$,TEMP) ALTRET(NOCFUS);
     1075    10025    3            IF CFU$ = ADDR(NIL)
     1076    10026    4             THEN DO;                      /* DCB's first SN CFU                 */
     1077    10027    4               IF F$DCB.ACS = %JRNL#
     1078    10028    4                THEN F$DCB.CFU$->FM$CFUJ.SNLINKX = TEMP;
     1079    10029    4                ELSE F$DCB.CFU$ = TEMP$;
     1080    10030    4               TEMP$->FT$CFUSN.NUM = 1;
     1081    10031    4               TEMP$->FT$CFUSN.SN(0) = SAVPSN;
     1082    10032    4               I = 1;
     1083    10033    4               END;
     1084    10034    4             ELSE DO;                      /* Link to last in list               */
     1085    10035    4               CFU$->FT$CFUSN.LINKX = TEMP;
     1086    10036    4               I = 0;
     1087    10037    4               END;
     1088    10038    3            END;
     1089    10039    2          ELSE TEMP$ = CFU$;               /* Already had last SN CFU            */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:34   
     1090    10040    2         TEMP$->FT$CFUSN.NUM = I + 1;      /* Number of SNs                      */
     1091    10041    2         TEMP$->FT$CFUSN.SN(I) = F$DCB.PSN;
     1092    10042    2         TEMP$->FT$CFUSN.SYSID = B$JIT.SYSID; /* Remember user info              */
     1093    10043    2         TEMP$->FT$CFUSN.DCBX = JDCB.DCBX;
     1094    10044    2         END;
     1095    10045    2       ELSE DO;                            /* Non-scratch mount                  */
     1096    10046    2         IF FT$DDT.SCRTCH AND NOT F$DCB.SEZ_OK THEN GOTO VOLORDER;
     1097    10047                                                /* Scratch tapes weren't allowed      */
     1098    10048    2         END;
     1099    10049
     1100    10050         /***
     1101    10051          *** Next volume is mounted...all's well.
     1102    10052          ***/
     1103    10053
     1104    10054    1      RETURN;
     1105    10055
     1106    10056    1   NOCFUS: ;
     1107    10057    1      B$JIT.ERR = E_NOCFUS; /*E* ERROR: FTR-E$NOCFUS */
     1108    10058    1      ALTRETURN;
     1109    10059
     1110    10060    1   VOLORDER: ;
     1111    10061    1      B$JIT.ERR = E_VOLORDER; /*E* ERROR: FTR-E$VOLORDER */
     1112    10062
     1113    10063    1   JUSTALT: ;
     1114    10064    1      ALTRETURN;
     1115    10065    1   END FTR$ROUTINE;
     1116    10066        /*********************************************************************/

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:35   
--  Include file information  --

   SS_SCHED_C.:E05TOU  is referenced.
   OC_SUBS_C.:E05TOU  is referenced.
   NK_VFC_C.:E05TOU  is referenced.
   NK_LDCT_R.:E05TOU  cannot be made into a system file and is referenced.
   NK$LDCT.:E05TOU  is referenced.
   FT_SUBS.:E05TOU  is referenced.
   FT$DDT.:E05TOU  is referenced.
   FR_SUBS.:E05TOU  is referenced.
   FM$FIT.:E05TOU  is referenced.
   FM$CFU.:E05TOU  is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   F$DCB.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FTR$ROUTINE.

   Procedure FTR$ROUTINE requires 1522 words for executable code.
   Procedure FTR$ROUTINE requires 62 words of local(AUTO) storage.

    No errors detected in file FTR$ROUTINE.:E05TSI    .

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:36   

 Object Unit name= FTR$ROUTINE                                File name= FTR$ROUTINE.:E05TOU
 UTS= JUL 29 '97 18:01:32.96 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     41     51  FTR$ROUTINE
    2   Proc  even  none  1522   2762  FTR$ROUTINE
    3  RoData even  none    40     50  FTR$ROUTINE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        2  FTR$ROUTINE
     2      3          yes     yes      Std        0  FTR$RELFPOOLS
     2     57          yes     yes      Std        2  FTR$GETSN
     2     64          yes     yes      Std        2  FTR$SETSN
     2    224          yes     yes      Std        0  FTR$RELCFUS
     2    317          yes     yes      Std        0  FTR$JRNLDCB
     2    373          yes     yes      Std        0  FTR$UNJRNLDCB
     2    424          yes     yes      Std        0  FTR$DPT
     2   2152          yes     yes      Std        1  FTR$CHNGVOL
     2   2157          yes     yes      Std        1  FTR$CHNGVOLNR

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    1      0  FT_TAPETYPECHK                     1      1  FT_RINGBOTONLY
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:37   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 FMD$RELBUF
         yes           Std       1 FMR$Z8
 yes     yes           Std       3 SSR$REG
         yes           Std       7 OCI$MK_WR
 yes     yes           Std       0 FTI$WRFM
 yes     yes           Std       0 FTI$SD6250
 yes     yes           Std       0 FTL$GETFSN
 yes     yes           Std       2 FMR$G8
 yes     yes           Std       0 FRA$COPN
 yes     yes           Std       0 FTI$SD800
 yes     yes           Std       0 FTI$SD1600
 yes     yes           Std       0 FTI$REWIND
 yes     yes           Std       1 M$MWRITE
 yes     yes           Std       0 FTI$PERMIT
 yes     yes           Std       0 FTI$SPREC
 yes     yes           Std       0 FTI$SPFILE
         yes           Std       0 FRB$CREM
 yes     yes           Std       0 FRA$OPR
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     S$CU$                                 M$UC                                  N$DCT$$
     B$JIT$                                F$CFU$                                FT_DENS
     FT_PROT                               B_VECTNIL
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:38   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:39   


        1        1        /*M* FTR$ROUTINE tape file management routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* THI=1,PLM=3,MCL=10 */
        8        8
        9        9        FTR$ROUTINE: PROC(N,P$) ALTRET;

      9  2 000000   000000 700200 xent  FTR$ROUTINE  TSX0  ! X66_AUTO_2
         2 000001   000076 000002                    ZERO    62,2
         2 000002   000005 710000 2                  TRA     s:9200

       10       10
       11       11         /***
       12       12          *** INCLUDE files:
       13       13          ***/
       14       14
       15       15        %INCLUDE B$USER;
       16      231        %B$USERREFS;
       17      235        %INCLUDE CP_6;
       18     5794        %INCLUDE CP_6_SUBS;
       19     6334        %MACRO F$DCBBJ(BASED=BASED);
       20     6335        %INCLUDE F$DCB;
       21     6384        %MEND;
       22     6385           %F$DCBBJ(BASED="BASED(JDCB$)");
       23     6435        %INCLUDE B$JIT_C;
       24     6749           %B$JIT0;
       25     6838           %U$JIT1X;
       26     6841           %M$JIT2X;
       27     6844           %F$JIT3;
       28     6849           %S$JIT4X;
       29     6852           %J$JIT5X;
       30     6855           %A$JIT6X;
       31     6858        %INCLUDE F_ERRORS_C;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:40   
       32     7098        %INCLUDE FM$CFU;
       33     7143           %FT$CFUSN;
       34     7146           %FM$CFUJ;
       35     7151        %INCLUDE FM$FIT;
       36     7372        %CODE16;
       37     7380        %INCLUDE FR_SUBS;
       38     7448        %MACRO FT$DDTBD(BASED=BASED);
       39     7449        %INCLUDE FT$DDT;
       40     7510        %MEND;
       41     7511           %FT$DDTBD(BASED="BASED(DDDT$)");
       42     7573        %INCLUDE FT_SUBS;
       43     7653        %INCLUDE NK$LDCT;
       44     7755           %NK$LDCT;
       45     7801        %INCLUDE NK_LDCT_R;
       46     7810        %INCLUDE NK_VFC_C;
       47     7884        %INCLUDE OC_SUBS_C;
       48     8615        %INCLUDE SS_SCHED_C;
       49     8848
       50     8849         /***
       51     8850          *** External routines:
       52     8851          ***/
       53     8852
       54     8853    1   DCL FMD$RELBUF ENTRY(1);                /* Release specified FPOOL buffer     */
       55     8854    1   DCL FMR$G8 ENTRY(2) ALTRET;             /* Get CFU block                      */
       56     8855    1   DCL FMR$Z8 ENTRY(1);                    /* Release specified CFU block        */
       57     8856    1   DCL FRA$COPN ENTRY ALTRET;              /* Change volume                      */
       58     8857    1   DCL FRA$OPR ENTRY ALTRET;               /* Get tape mounted                   */
       59     8858    1   DCL FRB$CREM ENTRY;                     /* Dismount tape                      */
       60     8859    1   DCL FTI$PERMIT ENTRY ALTRET;            /* Permit write                       */
       61     8860    1   DCL FTI$REWIND ENTRY ALTRET;            /* Rewind tape                        */
       62     8861    1   DCL FTI$SD800 ENTRY ALTRET;             /* Set density to 800 BPI             */
       63     8862    1   DCL FTI$SD1600 ENTRY ALTRET;            /* Set density to 1600 BPI            */
       64     8863    1   DCL FTI$SD6250 ENTRY ALTRET;            /* Set density to 6250 BPI            */
       65     8864    1   DCL FTI$SPFILE ENTRY ALTRET;            /* Space DCB.ARS files                */
       66     8865    1   DCL FTI$SPREC ENTRY ALTRET;             /* Space DCB.ARS records              */
       67     8866    1   DCL FTI$WRFM ENTRY ALTRET;              /* Write file mark                    */
       68     8867    1   DCL FTL$GETFSN ENTRY ALTRET;            /* Get file sequence number from HDR1 */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:41   
       69     8868    1   DCL M$MWRITE ENTRY(1) ALTRET;
       70     8869    1   DCL OCI$MK_WR ENTRY(7);                 /* Ask operator                       */
       71     8870    1   DCL SSR$REG ENTRY(3) ALTRET;            /* Wait awhile                        */
       72     8871
       73     8872         /***
       74     8873          *** SYMREF data:
       75     8874          ***/
       76     8875
       77     8876    1   DCL B$JIT$ PTR SYMREF;
       78     8877    1   DCL F$CFU$ PTR SYMREF;                  /* CFUs are that way                  */
       79     8878    1   DCL FT_DENS(0:5) BIT(18) SYMREF;        /* Bits correspond to densities       */
       80     8879
       81     8880         /***
       82     8881          *** Parameter:
       83     8882          ***/
       84     8883
       85     8884    1   DCL N SBIN;                             /* Argument integer                   */
       86     8885    1   DCL P$ PTR;                             /* Pointer to argument                */
       87     8886         /***
       88     8887          *** AUTO data:
       89     8888          ***/
       90     8889
       91     8890    1   DCL CFU$ PTR AUTO;                      /* Pointer to current CFU$            */
       92     8891    1   DCL DDDT$ PTR AUTO;                     /* Pointer to DDT entry               */
       93     8892    1   DCL I SBIN WORD AUTO;                   /* Index                              */
       94     8893    1   DCL J SBIN AUTO;                        /* Another index                      */
       95     8894    1   DCL JDCB$ PTR AUTO;                     /* Pointer to DCB                     */
       96     8895    1   DCL 1 JDCB REDEF JDCB$,
       97     8896    1         2 DCBX UBIN HALF UNAL,            /* Index of DCB                       */
       98     8897    1         2 * UBIN HALF UNAL;
       99     8898    1   DCL 1 MSGS ALIGNED AUTO,
      100     8899    1         2 MG1 CHAR(6) UNAL,
      101     8900    1         2 MG2 UBIN BYTE UNAL;
      102     8901    1   DCL REWIND BIT(1) ALIGNED AUTO;         /* Rewind tape flag                   */
      103     8902        %FPT_WRITE(FPTN=ROMSGAUTO,STCLASS=AUTO);
      104     8933                                                /* RING, OVER user message            */
      105     8934    1   DCL 1 ROMSGMSGAUTO AUTO,
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:42   
      106     8935    1         2 PREF,
      107     8936    1           3 VFC CHAR(1) UNAL,
      108     8937    1           3 DOTS CHAR(3) UNAL,
      109     8938    1         2 ROOPT CHAR(4) UNAL,
      110     8939    1         2 * CHAR(19) UNAL,
      111     8940    1         2 TT CHAR(2) UNAL,
      112     8941    1         2 * CHAR(1) UNAL,
      113     8942    1         2 SN CHAR(6) UNAL;
      114     8943    1   DCL SAVEXP CHAR(6) ALIGNED AUTO;        /* Saved expiration date              */
      115     8944    1   DCL SAVOWNR CHAR(8) ALIGNED AUTO;       /* Saved owner account                */
      116     8945    1   DCL SAVPROT SBIN ALIGNED AUTO;          /* Saved volume protection            */
      117     8946    1   DCL SAVPSN CHAR(6) ALIGNED AUTO;        /* Saved SN                           */
      118     8947    1   DCL SCRATCH BIT(1) ALIGNED AUTO;        /* Flag indicating if scratch mount   */
      119     8948    1   DCL TEMP$ PTR AUTO;                     /* A pointer                          */
      120     8949    1   DCL TEMP SBIN AUTO;                     /* An SBIN                            */
      121     8950    1   DCL THESN CHAR(6) BASED UNAL;           /* Based serial number                */
      122     8951
      123     8952         /***
      124     8953          *** STATIC data:
      125     8954          ***/
      126     8955
      127     8956    1   DCL FT_PROT SBIN WORD SYMREF;
      128     8957                                                /* Unexpired ANS tape protection      */
      129     8958
      130     8959         /***
      131     8960          *** CONSTANT data:
      132     8961          ***/
      133     8962    1   DCL FT_TAPETYPECHK SBIN WORD CONSTANT SYMDEF INIT(0); /* Ignore tape type     */
      134     8963    1  DCL FT_RINGBOTONLY SBIN WORD CONSTANT SYMDEF INIT(0); /* Permit RING keyin always */
      135     8964        %FPT_WRITE(FPTN=ROMSG,STCLASS=CONSTANT,DCB=M$UC,VFC=YES,BUF=ROMSGMSG);
      136     8995                                                /* RING, OVER user message            */
      137     8996    1   DCL 1 ROMSGMSG CONSTANT,
      138     8997    1         2 PREF,
      139     8998    1           3 VFC CHAR(1) UNAL INIT(%VFC_TRANSITION1),
      140     8999    1           3 DOTS CHAR(3) UNAL INIT('...'),
      141     9000    1         2 ROOPT CHAR(4) UNAL INIT('XXXX'),
      142     9001    1         2 * CHAR(19) UNAL INIT(' keyin pending for '),
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:43   
      143     9002    1         2 TT CHAR(2) UNAL INIT('XX'),
      144     9003    1         2 * CHAR(1) UNAL INIT('#'),
      145     9004    1         2 SN CHAR(6) UNAL INIT('XXXXXX');
      146     9005
      147     9006        %FT$ERR( ERRNAME=E_TAPBRK, MID='22'O, CODE=%E$TAPBRK, SEV=2 );
      148     9014        /*E*     ERROR: FTR-E$TAPBRK-2
      149     9015                 MESSAGE: Break or ctrl-Y during RING/OVER keyin request% for %TA%
      150     9016                 DESCRIPTION: While waiting for RING/OVER keyin, SSR$REQ
      151     9017                    altreturned.
      152     9018         ***/
      153     9019
      154     9020        %FT$ERR( ERRNAME=E_DENSBAD, MID='22'O, CODE=%E$DENSBAD, SEV=2 );
      155     9028        /*E*     ERROR: FTR-E$DENSBAD-2
      156     9029                 MESSAGE: Unavailable density% for %TA%
      157     9030                 DESCRIPTION: Attempt to open tape to a density which
      158     9031                    is unavailable in system or on drive.
      159     9032         ***/
      160     9033
      161     9034        %FT$ERR( ERRNAME=E_NOCFUS, MID='22'O, CODE=%E$NOCFUS, SEV=2 );
      162     9042        /*E*     ERROR: FTR-E$NOCFUS-2
      163     9043                 MESSAGE: No system table space for SN list% for %TA%
      164     9044         ***/
      165     9045
      166     9046        %FT$ERR( ERRNAME=E_NORING, MID='22'O, CODE=%E$NORING, SEV=2 );
      167     9054        /*E*     ERROR: FTR-E$NORING-2
      168     9055                 MESSAGE: Ring for volume% #%SN% denied
      169     9056                 MESSAGE1: Operator refused to put a ring in your tape.
      170     9057                 DESCRIPTION: The operator replied CANT RING on a ring request.
      171     9058         ***/
      172     9059
      173     9060        %FT$ERR( ERRNAME=E_NOTANS, MID='22'O, CODE=%E$NOTANS, SEV=2 );
      174     9068        /*E*     ERROR: FTR-E$NOTANS-2
      175     9069                 MESSAGE: Not an ANS volume% -- FT#%SN%
      176     9070                 MESSAGE1: Attempt to open or use an unlabelled tape as an ANS tape.
      177     9071         ***/
      178     9072
      179     9073        %FT$ERR( ERRNAME=E_NOTDEV, MID='22'O, CODE=%E$NOTDEV, SEV=2 );
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:44   
      180     9081        /*E*     ERROR: FTR-E$NOTDEV-2
      181     9082                 MESSAGE: Not an unlabelled tape% LT#%SN%
      182     9083                 MESSAGE1: You can't open an ANS volume as an unlabelled tape.
      183     9084                 DESCRIPTION: Attempt to change to a tape which is not a device tape.
      184     9085         ***/
      185     9086
      186     9087        %FT$ERR( ERRNAME=E_NOTOWNR, MID='22'O, CODE=%E$NOTOWNR, SEV=2 );
      187     9095        /*E*     ERROR: FTR-E$NOTOWNR-2
      188     9096                 MESSAGE: Only owner access allowed% to LT#%SN%
      189     9097                 MESSAGE1: The owner of this volume set protected this volume
      190     9098                    against all public access.
      191     9099         ***/
      192     9100
      193     9101        %FT$ERR( ERRNAME=E_NOTOWNRW, MID='22'O, CODE=%E$NOTOWNRW, SEV=2 );
      194     9109        /*E*     ERROR: FTR-E$NOTOWNRW-2
      195     9110                 MESSAGE: Only owner write access allowed% to LT#%SN%
      196     9111                 MESSAGE1: The owner of this volume set protected this volume
      197     9112                    against all public write access.
      198     9113         ***/
      199     9114
      200     9115
      201     9116        %FT$ERR( ERRNAME=E_OPROT, MID='22'O, CODE=%E$OPROT, SEV=2 );
      202     9124        /*E*     ERROR: FTR-E$OPROT-2
      203     9125                 MESSAGE: Write access to volume% #%SN% denied
      204     9126                 DESCRIPTION: Either: 1) after being asked to put a ring in
      205     9127                    volume operator decided not to or 2) after being asked for
      206     9128                    an OVER keyin operator decided not to.
      207     9129         ***/
      208     9130
      209     9131        %FT$ERR( ERRNAME=E_PROT, MID='22'O, CODE=%E$PROT, SEV=2 );
      210     9139        /*E*     ERROR: FTR-E$PROT-2
      211     9140                 MESSAGE: Volume protected% -- #%SN%
      212     9141                 MESSAGE1: Volume has no ring and is not at beginning of volume.
      213     9142                 DESCRIPTION: System does not permit RING keyin for tapes
      214     9143                    which are not at beginning of volume.
      215     9144         ***/
      216     9145
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:45   
      217     9146        %FT$ERR( ERRNAME=E_UNEXPIRED, MID='22'O, CODE=%E$UNEXPIRED, SEV=2 );
      218     9154
      219     9155        /*E*     ERROR: FTR-E$UNEXPIRED-2
      220     9156                 MESSAGE: Volume unexpired% -- #%SN%
      221     9157                 MESSAGE1: You can't write on unexpired volumes.
      222     9158                 DESCRIPTION: Attempt to open an unexpired ANS tape for output.
      223     9159         ***/
      224     9160
      225     9161        %FT$ERR( ERRNAME=E_VOLORDER, MID='22'O, CODE=%E$VOLORDER, SEV=2 );
      226     9169        /*E*     ERROR: FTR-E$VOLORDER-2
      227     9170                 MESSAGE: Volume missing% for %TA%
      228     9171                 MESSAGE1: A file section can not be found...a volume must be missing.
      229     9172                 DESCRIPTION: An attempt to change to a missing volume or
      230     9173                    find a non-existent file by its sequence number was made.
      231     9174         ***/
      232     9175
      233     9176        %FT$ERR( ERRNAME=E_VOLOUT, MID='22'O, CODE=%E$VOLOUT, SEV=2 );
      234     9184        /*E*     ERROR: FTR-E$VOLOUT-2
      235     9185                 MESSAGE: No more volumes% for %TA%
      236     9186                 DESCRIPTION: DCB.MAXVOL = 0 and no more serial
      237     9187                    numbers exist.
      238     9188         ***/
      239     9189
      240     9190        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:46   
      241     9191        /*********************************************************************/
      242     9192    1   FTR$RELFPOOLS: ENTRY ALTRET;

   9192  2 000003   000000 700200 xent  FTR$RELFPOO* TSX0  ! X66_AUTO_2
         2 000004   000076 000002                    ZERO    62,2

      243     9193        /*F*    NAME: FTR$RELFPOOLS
      244     9194                PURPOSE: Release all FPOOL buffers.
      245     9195         ***/
      246     9196
      247     9197
      248     9198        /********************/
      249     9199
      250     9200    1      JDCB$ = B$JIT.DCB$;                  /* Get pointer to DCB                 */

   9200  2 000005   000000 470400 xsym               LDP0    B$JIT$
         2 000006   000232 236100                    LDQ     154,,PR0
         2 000007   200011 756100                    STQ     JDCB$,,AUTO

      251     9201    2      DO TEMP=0 TO 4;

   9201  2 000010   200054 450100                    STZ     TEMP,,AUTO

      252     9202    2         IF F$DCB.BFR.BUFX(TEMP) > 0

   9202  2 000011   200011 470500                    LDP0    JDCB$,,AUTO
         2 000012   200054 720100                    LXL0    TEMP,,AUTO
         2 000013   000115 236110                    LDQ     77,X0,PR0
         2 000014   037000 316003                    CANQ    15872,DU
         2 000015   000045 600000 2                  TZE     s:9212

      253     9203    3          THEN DO;                         /* Buffer to release                  */

      254     9204    4            DO CASE(TEMP);

   9204  2 000016   200054 235100                    LDA     TEMP,,AUTO
         2 000017   000002 115007                    CMPA    2,DL
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:47   
         2 000020   000022 602005 2                  TNC     s:9204+4,AL
         2 000021   000024 710000 2                  TRA     s:9206
         2 000022   000024 710000 2                  TRA     s:9206
         2 000023   000033 710000 2                  TRA     s:9208

      255     9205    4             CASE(ELSE);

      256     9206    4               CALL FMD$RELBUF(TEMP);      /* Just release                       */

   9206  2 000024   200054 631500                    EPPR1   TEMP,,AUTO
         2 000025   200070 451500                    STP1    @MSG+1,,AUTO
         2 000026   200070 630500                    EPPR0   @MSG+1,,AUTO
         2 000027   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000030   000000 701000 xent               TSX1    FMD$RELBUF
         2 000031   000000 011000                    NOP     0
         2 000032   000045 710000 2                  TRA     s:9212

      257     9207    4             CASE(1);

      258     9208    4               IF F$DCB.ACS ~= %JRNL#

   9208  2 000033   000036 236100                    LDQ     30,,PR0
         2 000034   000777 376007                    ANQ     511,DL
         2 000035   000004 116007                    CMPQ    4,DL
         2 000036   000045 600000 2                  TZE     s:9212

      259     9209    4                THEN CALL FMD$RELBUF( TEMP );

   9209  2 000037   200054 631500                    EPPR1   TEMP,,AUTO
         2 000040   200070 451500                    STP1    @MSG+1,,AUTO
         2 000041   200070 630500                    EPPR0   @MSG+1,,AUTO
         2 000042   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000043   000000 701000 xent               TSX1    FMD$RELBUF
         2 000044   000000 011000                    NOP     0

      260     9210    4             END;

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:48   
      261     9211    3            END;

      262     9212    2         END;

   9212  2 000045   200054 054100                    AOS     TEMP,,AUTO
         2 000046   200054 235100                    LDA     TEMP,,AUTO
         2 000047   000004 115007                    CMPA    4,DL
         2 000050   000011 604400 2                  TMOZ    s:9202

      263     9213    1      F$DCB.LPOOL = 0;                     /* No label FPOOL buffer              */

   9213  2 000051   200011 470500                    LDP0    JDCB$,,AUTO
         2 000052   000000 236000 3                  LDQ     0
         2 000053   000067 356100                    ANSQ    55,,PR0

      264     9214    1      F$DCB.CBUFNUM = 0;

   9214  2 000054   000001 236000 3                  LDQ     1
         2 000055   000070 356100                    ANSQ    56,,PR0

      265     9215    1      RETURN;

   9215  2 000056   000000 702200 xent               TSX2  ! X66_ARET

      266     9216
      267     9217        /*********************************************************************/
      268     9218        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:49   
      269     9219        /*********************************************************************/
      270     9220    1   FTR$GETSN: ENTRY(N,P$) ALTRET;

   9220  2 000057   000000 700200 xent  FTR$GETSN    TSX0  ! X66_AUTO_2
         2 000060   000076 000002                    ZERO    62,2

      271     9221        /*F*     NAME: FTR$GETSN
      272     9222                 PURPOSE: Get specified serial number.
      273     9223         ***/
      274     9224
      275     9225        /********************/
      276     9226
      277     9227    1      REWIND = %YES#;                      /* Remember GET                       */

   9227  2 000061   400000 236003                    LDQ     -131072,DU
         2 000062   200014 756100                    STQ     REWIND,,AUTO

      278     9228    1      GOTO FNDSN;

   9228  2 000063   000067 710000 2                  TRA     FNDSN

      279     9229
      280     9230    1   FTR$SETSN: ENTRY(N,P$) ALTRET;

   9230  2 000064   000000 700200 xent  FTR$SETSN    TSX0  ! X66_AUTO_2
         2 000065   000076 000002                    ZERO    62,2

      281     9231        /*F*  NAME: FTR$SETSN
      282     9232              PURPOSE: Set specified serial number.
      283     9233         ***/
      284     9234
      285     9235        /********************/
      286     9236
      287     9237    1      REWIND = %NO#;

   9237  2 000066   200014 450100                    STZ     REWIND,,AUTO

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:50   
   9237  2 000067                       FNDSN        null
      288     9238
      289     9239    1   FNDSN: ;
      290     9240
      291     9241    1      IF N < 1 THEN ALTRETURN;

   9241  2 000067   200003 470500                    LDP0    @N,,AUTO
         2 000070   000000 235100                    LDA     0,,PR0
         2 000071   000073 605400 2                  TPNZ    s:9242

   9241  2 000072   000000 702200 xent               TSX2  ! X66_AALT

      292     9242    1      JDCB$ = B$JIT.DCB$;                  /* Get DCB pointer                    */

   9242  2 000073   000000 471400 xsym               LDP1    B$JIT$
         2 000074   100232 236100                    LDQ     154,,PR1
         2 000075   200011 756100                    STQ     JDCB$,,AUTO

      293     9243    1      IF F$DCB.ACS = %JRNL#           /* Determine beginning of SN CFU chain     */

   9243  2 000076   200011 473500                    LDP3    JDCB$,,AUTO
         2 000077   300036 236100                    LDQ     30,,PR3
         2 000100   000777 376007                    ANQ     511,DL
         2 000101   000004 116007                    CMPQ    4,DL
         2 000102   000117 601000 2                  TNZ     s:9250

      294     9244    2       THEN DO;

      295     9245    2         TEMP = F$DCB.CFU$->FM$CFUJ.SNLINKX;

   9245  2 000103   300066 474500                    LDP4    54,,PR3
         2 000104   400006 236100                    LDQ     6,,PR4
         2 000105   777777 376007                    ANQ     -1,DL
         2 000106   200054 756100                    STQ     TEMP,,AUTO

      296     9246    2         IF TEMP <= 0

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:51   
   9246  2 000107   000113 605400 2                  TPNZ    s:9248

      297     9247    2          THEN CFU$ = ADDR(NIL);

   9247  2 000110   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000111   200005 756100                    STQ     CFU$,,AUTO
         2 000112   000121 710000 2                  TRA     s:9251

      298     9248    2          ELSE CFU$ = PINCRW( F$CFU$, TEMP );

   9248  2 000113   000022 736000                    QLS     18
         2 000114   000000 036000 xsym               ADLQ    F$CFU$
         2 000115   200005 756100                    STQ     CFU$,,AUTO

      299     9249    2         END;

   9249  2 000116   000121 710000 2                  TRA     s:9251

      300     9250    1       ELSE CFU$ = F$DCB.CFU$;

   9250  2 000117   300066 236100                    LDQ     54,,PR3
         2 000120   200005 756100                    STQ     CFU$,,AUTO

      301     9251    1      IF CFU$ = ADDR(NIL)

   9251  2 000121   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000122   000145 601000 2                  TNZ     s:9259

      302     9252    2       THEN DO;                            /* Only SN is primary                 */

      303     9253    2         IF N > 1 THEN ALTRETURN;

   9253  2 000123   000000 235100                    LDA     0,,PR0
         2 000124   000001 115007                    CMPA    1,DL
         2 000125   000127 604400 2                  TMOZ    s:9254

   9253  2 000126   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:52   

      304     9254    2         IF REWIND

   9254  2 000127   200014 234100                    SZN     REWIND,,AUTO
         2 000130   000137 605000 2                  TPL     s:9256

      305     9255    2          THEN P$->THESN = F$DCB.PSN;      /* Get                                */

   9255  2 000131   200004 474500                    LDP4    @P$,,AUTO
         2 000132   400000 475500                    LDP5    0,,PR4
         2 000133   040100 100500                    MLR     fill='040'O
         2 000134   300024 000006                    ADSC9   20,,PR3                  cn=0,n=6
         2 000135   500000 000006                    ADSC9   0,,PR5                   cn=0,n=6
         2 000136   000223 710000 2                  TRA     s:9271

      306     9256    2          ELSE F$DCB.PSN = P$->THESN;      /* Set                                */

   9256  2 000137   200004 474500                    LDP4    @P$,,AUTO
         2 000140   400000 475500                    LDP5    0,,PR4
         2 000141   040100 100500                    MLR     fill='040'O
         2 000142   500000 000006                    ADSC9   0,,PR5                   cn=0,n=6
         2 000143   300024 000006                    ADSC9   20,,PR3                  cn=0,n=6

      307     9257    2         END;

   9257  2 000144   000223 710000 2                  TRA     s:9271

      308     9258    2       ELSE DO;                            /* Have a CFU list                    */

      309     9259    2         I = N - 1;                        /* Index of SN                        */

   9259  2 000145   000000 235100                    LDA     0,,PR0
         2 000146   000001 135007                    SBLA    1,DL
         2 000147   200007 755100                    STA     I,,AUTO

      310     9260    3         DO WHILE(I >= 4);

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:53   
   9260  2 000150   000004 115007                    CMPA    4,DL
         2 000151   000172 604000 2                  TMI     s:9266

      311     9261    3            TEMP = CFU$->FT$CFUSN.LINKX;   /* Offset to next                     */

   9261  2 000152   200005 470500                    LDP0    CFU$,,AUTO
         2 000153   000100 101500                    MRL     fill='000'O
         2 000154   000000 400002                    ADSC9   0,,PR0                   cn=2,n=2
         2 000155   200054 000004                    ADSC9   TEMP,,AUTO               cn=0,n=4

      312     9262    3            IF TEMP = 0 THEN ALTRETURN;

   9262  2 000156   200054 235100                    LDA     TEMP,,AUTO
         2 000157   000161 601000 2                  TNZ     s:9263

   9262  2 000160   000000 702200 xent               TSX2  ! X66_AALT

      313     9263    3            CFU$ = PINCRW( F$CFU$, TEMP );

   9263  2 000161   200054 236100                    LDQ     TEMP,,AUTO
         2 000162   000022 736000                    QLS     18
         2 000163   000000 036000 xsym               ADLQ    F$CFU$
         2 000164   200005 756100                    STQ     CFU$,,AUTO

      314     9264    3            I = I - 4;

   9264  2 000165   000004 336007                    LCQ     4,DL
         2 000166   200007 056100                    ASQ     I,,AUTO

      315     9265    3            END;

   9265  2 000167   200007 235100                    LDA     I,,AUTO
         2 000170   000004 115007                    CMPA    4,DL
         2 000171   000152 605000 2                  TPL     s:9261

      316     9266    2         IF I >= CFU$->FT$CFUSN.NUM THEN ALTRETURN;

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:54   
   9266  2 000172   200005 470500                    LDP0    CFU$,,AUTO
         2 000173   000100 101500                    MRL     fill='000'O
         2 000174   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         2 000175   200070 000004                    ADSC9   @MSG+1,,AUTO             cn=0,n=4
         2 000176   200070 236100                    LDQ     @MSG+1,,AUTO
         2 000177   200007 116100                    CMPQ    I,,AUTO
         2 000200   000202 605400 2                  TPNZ    s:9267

   9266  2 000201   000000 702200 xent               TSX2  ! X66_AALT

      317     9267    2         IF REWIND

   9267  2 000202   200014 234100                    SZN     REWIND,,AUTO
         2 000203   000214 605000 2                  TPL     s:9269

      318     9268    2          THEN P$->THESN = CFU$->FT$CFUSN.SN(I); /* Get                          */

   9268  2 000204   200004 471500                    LDP1    @P$,,AUTO
         2 000205   100000 473500                    LDP3    0,,PR1
         2 000206   200007 236100                    LDQ     I,,AUTO
         2 000207   000006 402007                    MPY     6,DL
         2 000210   040100 100506                    MLR     fill='040'O
         2 000211   000001 000006                    ADSC9   1,Q,PR0                  cn=0,n=6
         2 000212   300000 000006                    ADSC9   0,,PR3                   cn=0,n=6
         2 000213   000223 710000 2                  TRA     s:9271

      319     9269    2          ELSE CFU$->FT$CFUSN.SN(I) = P$->THESN; /* Set                          */

   9269  2 000214   200004 471500                    LDP1    @P$,,AUTO
         2 000215   100000 473500                    LDP3    0,,PR1
         2 000216   200007 236100                    LDQ     I,,AUTO
         2 000217   000006 402007                    MPY     6,DL
         2 000220   040106 100500                    MLR     fill='040'O
         2 000221   300000 000006                    ADSC9   0,,PR3                   cn=0,n=6
         2 000222   000001 000006                    ADSC9   1,Q,PR0                  cn=0,n=6

      320     9270    2         END;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:55   

      321     9271    1      RETURN;

   9271  2 000223   000000 702200 xent               TSX2  ! X66_ARET

      322     9272
      323     9273        /*********************************************************************/
      324     9274        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:56   
      325     9275        /*********************************************************************/
      326     9276    1   FTR$RELCFUS: ENTRY ALTRET;

   9276  2 000224   000000 700200 xent  FTR$RELCFUS  TSX0  ! X66_AUTO_2
         2 000225   000076 000002                    ZERO    62,2

      327     9277        /*F*     NAME: FTR$RELCFUS
      328     9278                 PURPOSE: Release all CFUs.
      329     9279         ***/
      330     9280
      331     9281        /********************/
      332     9282
      333     9283         /***
      334     9284          *** Get pointer to first CFU.
      335     9285          ***/
      336     9286
      337     9287    1      JDCB$ = B$JIT.DCB$;

   9287  2 000226   000000 470400 xsym               LDP0    B$JIT$
         2 000227   000232 236100                    LDQ     154,,PR0
         2 000230   200011 756100                    STQ     JDCB$,,AUTO

      338     9288    1      CFU$ = F$DCB.CFU$;

   9288  2 000231   200011 471500                    LDP1    JDCB$,,AUTO
         2 000232   100066 236100                    LDQ     54,,PR1
         2 000233   200005 756100                    STQ     CFU$,,AUTO

      339     9289    1      IF F$DCB.ACS = %JRNL#

   9289  2 000234   100036 236100                    LDQ     30,,PR1
         2 000235   000777 376007                    ANQ     511,DL
         2 000236   000004 116007                    CMPQ    4,DL
         2 000237   000255 601000 2                  TNZ     s:9297

      340     9290    1       THEN IF NOT F$DCB.OWNER

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:57   
   9290  2 000240   100064 236100                    LDQ     52,,PR1
         2 000241   040000 316007                    CANQ    16384,DL
         2 000242   000244 601000 2                  TNZ     s:9293

      341     9291    1          THEN RETURN;                     /* Don't release for non-owner        */

   9291  2 000243   000000 702200 xent               TSX2  ! X66_ARET

      342     9292    2          ELSE DO;

      343     9293    2            TEMP = CFU$->FM$CFUJ.SNLINKX;

   9293  2 000244   200005 473500                    LDP3    CFU$,,AUTO
         2 000245   300006 236100                    LDQ     6,,PR3
         2 000246   777777 376007                    ANQ     -1,DL
         2 000247   200054 756100                    STQ     TEMP,,AUTO

      344     9294    2            IF TEMP <= 0 THEN RETURN;

   9294  2 000250   000252 605400 2                  TPNZ    s:9295

   9294  2 000251   000000 702200 xent               TSX2  ! X66_ARET

      345     9295    2            CFU$ = PINCRW( F$CFU$, TEMP );

   9295  2 000252   000022 736000                    QLS     18
         2 000253   000000 036000 xsym               ADLQ    F$CFU$
         2 000254   200005 756100                    STQ     CFU$,,AUTO

      346     9296    2            END;

      347     9297    1      IF CFU$ = ADDR(NIL) THEN RETURN;     /* Return if none                     */

   9297  2 000255   200005 236100                    LDQ     CFU$,,AUTO
         2 000256   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000257   000261 601000 2                  TNZ     s:9304

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:58   
   9297  2 000260   000000 702200 xent               TSX2  ! X66_ARET

      348     9298
      349     9299         /***
      350     9300          *** Release CFUs 'til none left.
      351     9301          ***/
      352     9302
      353     9303    2      DO WHILE('1'B);

      354     9304    2         TEMP = CFU$->FT$CFUSN.LINKX;      /* Get link to next CFU               */

   9304  2 000261   200005 470500                    LDP0    CFU$,,AUTO
         2 000262   000100 101500                    MRL     fill='000'O
         2 000263   000000 400002                    ADSC9   0,,PR0                   cn=2,n=2
         2 000264   200054 000004                    ADSC9   TEMP,,AUTO               cn=0,n=4

      355     9305    2         CALL FMR$Z8(CFU$);                /* Release CFU                        */

   9305  2 000265   200005 631500                    EPPR1   CFU$,,AUTO
         2 000266   200070 451500                    STP1    @MSG+1,,AUTO
         2 000267   200070 630500                    EPPR0   @MSG+1,,AUTO
         2 000270   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000271   000000 701000 xent               TSX1    FMR$Z8
         2 000272   000000 011000                    NOP     0

      356     9306    2         IF TEMP <= 0

   9306  2 000273   200054 235100                    LDA     TEMP,,AUTO
         2 000274   000312 605400 2                  TPNZ    s:9313

      357     9307    3          THEN DO;                         /* End of SN CFU chain                */

      358     9308    3            IF B$JIT.DCB$->F$DCB.ACS = %JRNL# THEN

   9308  2 000275   000000 470400 xsym               LDP0    B$JIT$
         2 000276   000232 471500                    LDP1    154,,PR0
         2 000277   100036 236100                    LDQ     30,,PR1
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:59   
         2 000300   000777 376007                    ANQ     511,DL
         2 000301   000004 116007                    CMPQ    4,DL
         2 000302   000307 601000 2                  TNZ     s:9310

      359     9309    3               B$JIT.DCB$->F$DCB.CFU$->FM$CFUJ.SNLINKX=0;

   9309  2 000303   100066 473500                    LDP3    54,,PR1
         2 000304   000000 220003                    LDX0    0,DU
         2 000305   300006 440100                    SXL0    6,,PR3
         2 000306   000311 710000 2                  TRA     s:9311

      360     9310    3             ELSE B$JIT.DCB$->F$DCB.CFU$=ADDR(NIL);

   9310  2 000307   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000310   100066 756100                    STQ     54,,PR1

      361     9311    3            RETURN;

   9311  2 000311   000000 702200 xent               TSX2  ! X66_ARET

      362     9312    3            END;
      363     9313    2         CFU$ = PINCRW( F$CFU$, TEMP );    /* Point to next CFU                  */

   9313  2 000312   200054 236100                    LDQ     TEMP,,AUTO
         2 000313   000022 736000                    QLS     18
         2 000314   000000 036000 xsym               ADLQ    F$CFU$
         2 000315   200005 756100                    STQ     CFU$,,AUTO

      364     9314    2         END;

   9314  2 000316   000261 710000 2                  TRA     s:9304

      365     9315
      366     9316        /*********************************************************************/
      367     9317        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:60   
      368     9318        /********************************************************************/
      369     9319    1   FTR$JRNLDCB: ENTRY ALTRET;

   9319  2 000317   000000 700200 xent  FTR$JRNLDCB  TSX0  ! X66_AUTO_2
         2 000320   000076 000002                    ZERO    62,2

      370     9320        /*F*     NAME: FTR$JRNLDCB
      371     9321                 PURPOSE: Sets up DCB from JRNL CFU.
      372     9322         ***/
      373     9323
      374     9324        /********************/
      375     9325
      376     9326    1      JDCB$ = B$JIT.DCB$;

   9326  2 000321   000000 470400 xsym               LDP0    B$JIT$
         2 000322   000232 236100                    LDQ     154,,PR0
         2 000323   200011 756100                    STQ     JDCB$,,AUTO

      377     9327    1      CFU$ = F$DCB.CFU$;

   9327  2 000324   200011 471500                    LDP1    JDCB$,,AUTO
         2 000325   100066 236100                    LDQ     54,,PR1
         2 000326   200005 756100                    STQ     CFU$,,AUTO

      378     9328
      379     9329    1      F$DCB.CNVRT = %NO#;

   9329  2 000327   000002 236000 3                  LDQ     2
         2 000330   100031 356100                    ANSQ    25,,PR1

      380     9330    1      F$DCB.RPOS = %YES#;

   9330  2 000331   010000 236007                    LDQ     4096,DL
         2 000332   100064 256100                    ORSQ    52,,PR1

      381     9331    1      F$DCB.CRECX = CFU$->FM$CFUJ.BLKLEN;

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:61   
   9331  2 000333   200005 473500                    LDP3    CFU$,,AUTO
         2 000334   300006 220100                    LDX0    6,,PR3
         2 000335   100067 440100                    SXL0    55,,PR1

      382     9332    1      F$DCB.NRECX = 0;

   9332  2 000336   000000 221003                    LDX1    0,DU
         2 000337   100100 741100                    STX1    64,,PR1

      383     9333    1      F$DCB.CRECNO = 0;

   9333  2 000340   100071 450100                    STZ     57,,PR1

      384     9334    1      F$DCB.PRECNO = CFU$->FM$CFUJ.PRECNO;

   9334  2 000341   300007 235100                    LDA     7,,PR3
         2 000342   100072 755100                    STA     58,,PR1

      385     9335    1      F$DCB.AFTRBLK = %NO#;

   9335  2 000343   000003 236000 3                  LDQ     3
         2 000344   100064 356100                    ANSQ    52,,PR1

      386     9336    1      F$DCB.BLKLEN = CFU$->FM$CFUJ.BLKLEN;

   9336  2 000345   300006 222100                    LDX2    6,,PR3
         2 000346   100074 442100                    SXL2    60,,PR1

      387     9337    1      F$DCB.NEW_FSECT = %NO#;

   9337  2 000347   000004 236000 3                  LDQ     4
         2 000350   100064 356100                    ANSQ    52,,PR1

      388     9338    1      F$DCB.CBUFNUM = 1;

   9338  2 000351   100070 236100                    LDQ     56,,PR1
         2 000352   000001 376000 3                  ANQ     1
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:62   
         2 000353   100000 276003                    ORQ     32768,DU
         2 000354   100070 756100                    STQ     56,,PR1

      389     9339    1      F$DCB.TRNC = FT_NOTRUNC#;

   9339  2 000355   000005 236000 3                  LDQ     5
         2 000356   100064 356100                    ANSQ    52,,PR1

      390     9340    1      F$DCB.MUST_CVOL = %NO#;

   9340  2 000357   000006 236000 3                  LDQ     6
         2 000360   100064 356100                    ANSQ    52,,PR1

      391     9341    1      F$DCB.VOL = CFU$->FM$CFUJ.VOL;

   9341  2 000361   300004 236100                    LDQ     4,,PR3
         2 000362   000022 736000                    QLS     18
         2 000363   100043 552140                    STBQ    35,'40'O,PR1

      392     9342    1      F$DCB.MAXVOL = CFU$->FM$CFUJ.MAXVOL;

   9342  2 000364   300004 236100                    LDQ     4,,PR3
         2 000365   000022 736000                    QLS     18
         2 000366   100043 552120                    STBQ    35,'20'O,PR1

      393     9343    1      F$DCB.SETX = CFU$->FM$CFUJ.DCTX;

   9343  2 000367   300004 223100                    LDX3    4,,PR3
         2 000370   000777 363003                    ANX3    511,DU
         2 000371   100051 443100                    SXL3    41,,PR1

      394     9344    1      RETURN;

   9344  2 000372   000000 702200 xent               TSX2  ! X66_ARET

      395     9345
      396     9346        /********************************************************************/
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:63   
      397     9347        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:64   
      398     9348        /********************************************************************/
      399     9349    1   FTR$UNJRNLDCB: ENTRY ALTRET;

   9349  2 000373   000000 700200 xent  FTR$UNJRNLD* TSX0  ! X66_AUTO_2
         2 000374   000076 000002                    ZERO    62,2

      400     9350        /*F*     NAME: FTR$UNJRNLDCB
      401     9351                 PURPOSE: Saves DCB information from last operation in
      402     9352                    JRNL CFU.
      403     9353         ***/
      404     9354
      405     9355        /********************/
      406     9356
      407     9357    1      JDCB$ = B$JIT.DCB$;

   9357  2 000375   000000 470400 xsym               LDP0    B$JIT$
         2 000376   000232 236100                    LDQ     154,,PR0
         2 000377   200011 756100                    STQ     JDCB$,,AUTO

      408     9358    1      CFU$ = F$DCB.CFU$;

   9358  2 000400   200011 471500                    LDP1    JDCB$,,AUTO
         2 000401   100066 236100                    LDQ     54,,PR1
         2 000402   200005 756100                    STQ     CFU$,,AUTO

      409     9359
      410     9360    1      CFU$->FM$CFUJ.VOL = F$DCB.VOL;

   9360  2 000403   200005 473500                    LDP3    CFU$,,AUTO
         2 000404   100043 236100                    LDQ     35,,PR1
         2 000405   000022 772000                    QRL     18
         2 000406   300004 552110                    STBQ    4,'10'O,PR3

      411     9361    1      CFU$->FM$CFUJ.MAXVOL = F$DCB.MAXVOL;

   9361  2 000407   200005 473500                    LDP3    CFU$,,AUTO
         2 000410   100043 236100                    LDQ     35,,PR1
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:65   
         2 000411   000022 772000                    QRL     18
         2 000412   300004 552104                    STBQ    4,'04'O,PR3

      412     9362    1      CFU$->FM$CFUJ.PRECNO = F$DCB.PRECNO;

   9362  2 000413   200005 473500                    LDP3    CFU$,,AUTO
         2 000414   100072 235100                    LDA     58,,PR1
         2 000415   300007 755100                    STA     7,,PR3

      413     9363    1      CFU$->FM$CFUJ.BLKLEN = F$DCB.BLKLEN;

   9363  2 000416   100074 720100                    LXL0    60,,PR1
         2 000417   300006 740100                    STX0    6,,PR3

      414     9364    1      CFU$->FM$CFUJ.DCTX = F$DCB.SETX;

   9364  2 000420   100051 236100                    LDQ     41,,PR1
         2 000421   000022 736000                    QLS     18
         2 000422   300004 552120                    STBQ    4,'20'O,PR3

      415     9365    1      RETURN;

   9365  2 000423   000000 702200 xent               TSX2  ! X66_ARET

      416     9366
      417     9367        /********************************************************************/
      418     9368        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:66   
      419     9369        /*********************************************************************/
      420     9370    1   FTR$DPT: ENTRY ALTRET;

   9370  2 000424   000000 700200 xent  FTR$DPT      TSX0  ! X66_AUTO_2
         2 000425   000076 000002                    ZERO    62,2

      421     9371        /*F*     NAME: FTR$DPT
      422     9372                 PURPOSE: Density, write permit and type checking for
      423     9373                    newly mounted tape.
      424     9374                 INPUT: DCB.NOEOF is set if the open may cause tape to be written.
      425     9375         ***/
      426     9376
      427     9377        /********************/
      428     9378
      429     9379         /***
      430     9380          *** Verify tape type according to table below:
      431     9381          ***
      432     9382          *** AS - ANSscratch, EA - expired ANS, UA - unexpired ANS, F - unlabeled
      433     9383          *** AO - ANS ooutput, AI - ANS input, FO - free output, FI - free input
      434     9384          ***
      435     9385          ***       \  AS | EA | UA | F
      436     9386          ***     AO | K  | K  | NOK| K
      437     9387          ***     AI | K  | K  | K  | N
      438     9388          ***     FO | NOK| NOK| NOK| K
      439     9389          ***     FI | F  | F  | F  | K
      440     9390          ***
      441     9391          *** K - ok, N - no way, F - requires fauth, NOK - if unprot
      442     9392          ***    system ok, if semiprot requires OVER keyin, if fully prot
      443     9393          ***    no way, C - OK if not tape type check system
      444     9394          ***/
      445     9395
      446     9396    1      JDCB$ = B$JIT.DCB$;

   9396  2 000426   000000 470400 xsym               LDP0    B$JIT$
         2 000427   000232 236100                    LDQ     154,,PR0
         2 000430   200011 756100                    STQ     JDCB$,,AUTO

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:67   
      447     9397    1      DDDT$ = NK$LDCT$(F$DCB.SETX)->NK$LDCT.DDT$;

   9397  2 000431   200011 471500                    LDP1    JDCB$,,AUTO
         2 000432   100051 720100                    LXL0    41,,PR1
         2 000433   000000 473400 xsym               LDP3    N$DCT$$
         2 000434   300000 474510                    LDP4    0,X0,PR3
         2 000435   400004 236100                    LDQ     4,,PR4
         2 000436   200006 756100                    STQ     DDDT$,,AUTO

      448     9398    1      SCRATCH = %NO#;                      /* Init flag                          */

   9398  2 000437   200052 450100                    STZ     SCRATCH,,AUTO

      449     9399    2      IF F$DCB.ASN = %DEVICE# THEN DO;     /* Device tape DCB                    */

   9399  2 000440   100032 236100                    LDQ     26,,PR1
         2 000441   777000 376007                    ANQ     -512,DL
         2 000442   003000 116007                    CMPQ    1536,DL
         2 000443   000504 601000 2                  TNZ     s:9433

      450     9400    3         IF FT$DDT.ANST THEN DO;           /* Open to ANS tape?                  */

   9400  2 000444   200006 475500                    LDP5    DDDT$,,AUTO
         2 000445   500006 236100                    LDQ     6,,PR5
         2 000446   400000 316007                    CANQ    -131072,DL
         2 000447   000534 600000 2                  TZE     s:9459

      451     9401    3            IF B$JIT.PRIV.ACTIVE & %PR_FMSEC# THEN

   9401  2 000450   000013 236100                    LDQ     11,,PR0
         2 000451   000044 376000 1                  ANQ     E_VOLOUT+1
         2 000452   000534 601000 2                  TNZ     s:9459

      452     9402    3               ;                           /* This user can get away with it     */
      453     9403    4             ELSE DO;

      454     9404    5               IF F$DCB.NOEOF THEN DO;     /* Trying to write tape               */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:68   

   9404  2 000453   100064 236100                    LDQ     52,,PR1
         2 000454   400000 316007                    CANQ    -131072,DL
         2 000455   000475 600000 2                  TZE     s:9420

      455     9405    6                  IF FT_TAPETYPECHK ~= 0 OR FT_PROT = FT_FULLPROT# THEN DO;

   9405  2 000456   000000 235000 1                  LDA     FT_TAPETYPECHK
         2 000457   000463 601000 2                  TNZ     s:9407
         2 000460   000000 235000 xsym               LDA     FT_PROT
         2 000461   000002 115007                    CMPA    2,DL
         2 000462   000466 601000 2                  TNZ     s:9411

      456     9406                                                /* Can't change ANS tape to free tape */
      457     9407    6                     B$JIT.ERR = E_NOTDEV; /*E* ERROR: FTR-E$NOTDEV */

   9407  2 000463   000034 236000 1                  LDQ     E_NOTDEV
         2 000464   000012 756100                    STQ     10,,PR0

      458     9408    6                     ALTRETURN;

   9408  2 000465   000000 702200 xent               TSX2  ! X66_AALT

      459     9409    6                     END;
      460     9410    6                   ELSE DO;                /* Might be able to change tape type  */

      461     9411    6                     IF FT$DDT.POS = FTP_BOV# THEN

   9411  2 000466   500006 236100                    LDQ     6,,PR5
         2 000467   000160 376007                    ANQ     112,DL
         2 000470   000020 116007                    CMPQ    16,DL
         2 000471   000534 600000 2                  TZE     s:9459

      462     9412    6                        ;             /* Ok at BOV since label is written over   */
      463     9413    7                      ELSE DO;        /* Can't write free tape amidst ANS files  */

      464     9414    7                        B$JIT.ERR = E_NOTDEV; /*E* ERROR: FTR-E$NOTDEV */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:69   

   9414  2 000472   000034 236000 1                  LDQ     E_NOTDEV
         2 000473   000012 756100                    STQ     10,,PR0

      465     9415    7                        ALTRETURN;

   9415  2 000474   000000 702200 xent               TSX2  ! X66_AALT

      466     9416    7                        END;
      467     9417    6                     END;
      468     9418    5                  END;
      469     9419    5                ELSE DO; /* Can't read ANS tape as free tape (bypasses file checks) */

      470     9420    5                  IF B$JIT.PRIV.ACTIVE & (%PR_FMBLK# | %PR_FMREAD#) THEN

   9420  2 000475   000045 236000 1                  LDQ     E_VOLOUT+2
         2 000476   000046 276000 1                  ORQ     E_VOLOUT+3
         2 000477   000013 376100                    ANQ     11,,PR0
         2 000500   000534 601000 2                  TNZ     s:9459

      471     9421    5                     ;                     /* Permit read of LT as FT            */
      472     9422    6                   ELSE DO;

      473     9423    6                     B$JIT.ERR = E_NOTDEV; /*E* ERROR: FTR-E$NOTDEV */

   9423  2 000501   000034 236000 1                  LDQ     E_NOTDEV
         2 000502   000012 756100                    STQ     10,,PR0

      474     9424    6                     ALTRETURN;

   9424  2 000503   000000 702200 xent               TSX2  ! X66_AALT

      475     9425    6                     END;
      476     9426    5                  END;
      477     9427    4               END;
      478     9428    3            END;
      479     9429    2          ELSE
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:70   
      480     9430    2            ;                         /* Open device tape DCB to free tape ok    */
      481     9431    2         END;
      482     9432    2       ELSE DO;                            /* ANS tape DCB                       */

      483     9433    2         IF FT$DDT.ANST OR (NOT FT$DDT.ANST AND FT$DDT.NOWANS) THEN

   9433  2 000504   200006 475500                    LDP5    DDDT$,,AUTO
         2 000505   500006 236100                    LDQ     6,,PR5
         2 000506   400000 316007                    CANQ    -131072,DL
         2 000507   000534 601000 2                  TNZ     s:9459
         2 000510   400000 316007                    CANQ    -131072,DL
         2 000511   000514 601000 2                  TNZ     s:9436
         2 000512   010000 316007                    CANQ    4096,DL
         2 000513   000534 601000 2                  TNZ     s:9459

      484     9434    2            ;                              /* Ok to ANS type tape                */
      485     9435    3          ELSE DO;                         /* To free tape...check this          */

      486     9436    4            IF F$DCB.NOEOF THEN DO;        /* For output                         */

   9436  2 000514   100064 236100                    LDQ     52,,PR1
         2 000515   400000 316007                    CANQ    -131072,DL
         2 000516   000531 600000 2                  TZE     s:9448

      487     9437    4               IF B$JIT.PRIV.ACTIVE & %PR_FMSEC# THEN

   9437  2 000517   000013 236100                    LDQ     11,,PR0
         2 000520   000044 376000 1                  ANQ     E_VOLOUT+1
         2 000521   000534 601000 2                  TNZ     s:9459

      488     9438    4                  ;                        /* This user is able to               */
      489     9439    5                ELSE DO;                   /* Check further                      */

      490     9440    6                  IF FT$DDT.POS ~= FTP_BOV# THEN DO;

   9440  2 000522   500006 236100                    LDQ     6,,PR5
         2 000523   000160 376007                    ANQ     112,DL
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:71   
         2 000524   000020 116007                    CMPQ    16,DL
         2 000525   000534 600000 2                  TZE     s:9459

      491     9441                                      /* Not at beginning of tape and not privileged  */
      492     9442    6                     B$JIT.ERR = E_NOTANS; /*E* ERROR: FTR-E$NOTANS */

   9442  2 000526   000033 236000 1                  LDQ     E_NOTANS
         2 000527   000012 756100                    STQ     10,,PR0

      493     9443    6                     ALTRETURN;

   9443  2 000530   000000 702200 xent               TSX2  ! X66_AALT

      494     9444    6                     END;
      495     9445    5                  END;
      496     9446    4               END;
      497     9447    4             ELSE DO;                      /* Can't open free tape for ANS input */

      498     9448    4               B$JIT.ERR = E_NOTANS; /*E* ERROR: FTR-E$NOTANS */

   9448  2 000531   000033 236000 1                  LDQ     E_NOTANS
         2 000532   000012 756100                    STQ     10,,PR0

      499     9449    4               ALTRETURN;

   9449  2 000533   000000 702200 xent               TSX2  ! X66_AALT

      500     9450    4               END;
      501     9451    3            END;
      502     9452    2         END;
      503     9453
      504     9454         /***
      505     9455          *** Perform user and system specified volume protection checks
      506     9456          *** if user is not bypassing file management security checks.
      507     9457          ***/
      508     9458
      509     9459    1      IF FT$DDT.ANST AND NOT B$JIT.PRIV.ACTIVE & %PR_FMSEC#
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:72   

   9459  2 000534   500006 236100                    LDQ     6,,PR5
         2 000535   400000 316007                    CANQ    -131072,DL
         2 000536   000741 600000 2                  TZE     s:9530
         2 000537   000013 236100                    LDQ     11,,PR0
         2 000540   000044 376000 1                  ANQ     E_VOLOUT+1
         2 000541   000741 601000 2                  TNZ     s:9530

      510     9460    2       THEN DO;                            /* Protect ANS volume                 */

      511     9461    2         IF (B$JIT.ACCN ~= FT$DDT.ACCT) AND (NOT FT$DDT.EXPIRED) AND

   9461  2 000542   040100 106500                    CMPC    fill='040'O
         2 000543   000001 000010                    ADSC9   1,,PR0                   cn=0,n=8
         2 000544   500000 000010                    ADSC9   0,,PR5                   cn=0,n=8
         2 000545   000605 600000 2                  TZE     s:9485
         2 000546   500006 236100                    LDQ     6,,PR5
         2 000547   000010 316007                    CANQ    8,DL
         2 000550   000605 601000 2                  TNZ     s:9485
         2 000551   000000 235000 xsym               LDA     FT_PROT
         2 000552   000605 600000 2                  TZE     s:9485

      512     9462    2           (FT_PROT ~= FT_UNPROT#)
      513     9463    3          THEN DO;                         /* User is not volume owner           */

      514     9464    4            DO CASE(FT$DDT.VOLACCESS);     /* Determine what to do               */

   9464  2 000553   500007 721100                    LXL1    7,,PR5
         2 000554   000003 361003                    ANX1    3,DU
         2 000555   000004 101003                    CMPX1   4,DU
         2 000556   000560 602011 2                  TNC     s:9464+5,X1
         2 000557   000605 710000 2                  TRA     s:9485
         2 000560   000604 710000 2                  TRA     s:9479
         2 000561   000604 710000 2                  TRA     s:9479
         2 000562   000576 710000 2                  TRA     s:9473
         2 000563   000564 710000 2                  TRA     s:9466

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:73   
      515     9465    4             CASE(%NONE#);       /* Owner doesn't want anyone else to use it     */

      516     9466    4               IF B$JIT.PRIV.ACTIVE & %PR_FMBLK# AND F$DCB.FUN = %IN#

   9466  2 000564   000013 236100                    LDQ     11,,PR0
         2 000565   000045 376000 1                  ANQ     E_VOLOUT+2
         2 000566   000573 600000 2                  TZE     s:9469
         2 000567   100032 236100                    LDQ     26,,PR1
         2 000570   000777 376003                    ANQ     511,DU
         2 000571   000002 116003                    CMPQ    2,DU
         2 000572   000605 600000 2                  TZE     s:9485

      517     9467    4                THEN ;                     /* Reading allowed, and only reading  */
      518     9468    5                ELSE DO;

      519     9469    5                  B$JIT.ERR = E_NOTOWNR; /*E* ERROR: FTR-E$NOTOWNR */

   9469  2 000573   000035 236000 1                  LDQ     E_NOTOWNR
         2 000574   000012 756100                    STQ     10,,PR0

      520     9470    5                  ALTRETURN;

   9470  2 000575   000000 702200 xent               TSX2  ! X66_AALT

      521     9471    5                  END;
      522     9472    4             CASE(%IN#);                   /* Owner only permits readers         */

      523     9473    4               IF F$DCB.NOEOF

   9473  2 000576   100064 236100                    LDQ     52,,PR1
         2 000577   400000 316007                    CANQ    -131072,DL
         2 000600   000605 600000 2                  TZE     s:9485

      524     9474    5                THEN DO;                   /* But this is a writer               */

      525     9475    5                  B$JIT.ERR = E_NOTOWNRW; /*E* ERROR: FTR-E$NOTOWNRW */

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:74   
   9475  2 000601   000036 236000 1                  LDQ     E_NOTOWNRW
         2 000602   000012 756100                    STQ     10,,PR0

      526     9476    5                  ALTRETURN;

   9476  2 000603   000000 702200 xent               TSX2  ! X66_AALT

      527     9477    5                  END;
      528     9478    4             CASE(0,%ALL#);                /* Owner doesn't care or permits all  */

      529     9479    5               DO; END;

   9479  2 000604   000605 710000 2                  TRA     s:9485

      530     9480    4             CASE(ELSE);                   /* Permit all...owner strange         */

      531     9481    5               DO; END;

      532     9482    4             END;

      533     9483    3            END;

      534     9484
      535     9485    2         IF FT$DDT.ANST AND F$DCB.NOEOF    /* Output to ANS tape?                */

   9485  2 000605   500006 236100                    LDQ     6,,PR5
         2 000606   400000 316007                    CANQ    -131072,DL
         2 000607   000741 600000 2                  TZE     s:9530
         2 000610   100064 236100                    LDQ     52,,PR1
         2 000611   400000 316007                    CANQ    -131072,DL
         2 000612   000741 600000 2                  TZE     s:9530
         2 000613   500006 236100                    LDQ     6,,PR5
         2 000614   200000 316007                    CANQ    65536,DL
         2 000615   000741 601000 2                  TNZ     s:9530
         2 000616   000010 316007                    CANQ    8,DL
         2 000617   000741 601000 2                  TNZ     s:9530
         2 000620   100031 236100                    LDQ     25,,PR1
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:75   
         2 000621   000040 316007                    CANQ    32,DL
         2 000622   000627 600000 2                  TZE     s:9485+18
         2 000623   100032 236100                    LDQ     26,,PR1
         2 000624   000777 376003                    ANQ     511,DU
         2 000625   000003 116003                    CMPQ    3,DU
         2 000626   000741 600000 2                  TZE     s:9530
         2 000627   500006 236100                    LDQ     6,,PR5
         2 000630   020000 316007                    CANQ    8192,DL
         2 000631   000741 601000 2                  TNZ     s:9530
         2 000632   000000 235000 xsym               LDA     FT_PROT
         2 000633   000741 600000 2                  TZE     s:9530

      536     9486    2           AND NOT (FT$DDT.SCRTCH OR FT$DDT.EXPIRED) /* Volume unexpired?        */
      537     9487    2           AND NOT (F$DCB.XTEND AND F$DCB.FUN = %CREATE#) /* Overwriting files?  */
      538     9488    2           AND NOT FT$DDT.WRITE       /* User doesn't yet have write privilege   */
      539     9489    2           AND FT_PROT ~= FT_UNPROT#       /* Semi- or fully protected system?   */
      540     9490    3          THEN DO;                         /* Then OVER keyin might be needed    */

      541     9491    3            IF F$DCB.ASN ~= %DEVICE#

   9491  2 000634   100032 236100                    LDQ     26,,PR1
         2 000635   777000 376007                    ANQ     -512,DL
         2 000636   003000 116007                    CMPQ    1536,DL
         2 000637   000641 600000 2                  TZE     NOCVOLCHK

      542     9492    4             THEN DO;            /* Might be CVOL to already modified volume     */

      543     9493                    /*N* MIGHT_WANT_MORE_COMPLETE_CHECK_HERE */
      544     9494    4               GOTO NOCVOLCHK;

   9494  2 000640   000641 710000 2                  TRA     NOCVOLCHK

      545     9495    4               END;
      546     9496    4             ELSE DO;

   9491  2 000641                       NOCVOLCHK    null
      547     9497    4   NOCVOLCHK:  ;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:76   
      548     9498    4               IF FT_PROT = FT_FULLPROT#

   9498  2 000641   000002 115007                    CMPA    2,DL
         2 000642   000646 601000 2                  TNZ     s:9504

      549     9499    5                THEN DO;                   /* Illegal                            */

      550     9500    5                  B$JIT.ERR = E_UNEXPIRED; /*E* FTR-E$UNEXPIRED */

   9500  2 000643   000041 236000 1                  LDQ     E_UNEXPIRED
         2 000644   000012 756100                    STQ     10,,PR0

      551     9501    5                  ALTRETURN;

   9501  2 000645   000000 702200 xent               TSX2  ! X66_AALT

      552     9502    5                  END;
      553     9503    5                ELSE DO;                   /* Request OVER keyin                 */

      554     9504    5                  MSGS.MG1 = F$DCB.PSN;    /* Tell opr SN if any                 */

   9504  2 000646   040100 100500                    MLR     fill='040'O
         2 000647   100024 000006                    ADSC9   20,,PR1                  cn=0,n=6
         2 000650   200012 000006                    ADSC9   MSGS,,AUTO               cn=0,n=6

      555     9505    5                  MSGS.MG2 = 0;            /* Reason for OVER is unexpired       */

   9505  2 000651   000000 236003                    LDQ     0,DU
         2 000652   200013 552110                    STBQ    MSGS+1,'10'O,AUTO

      556     9506    5                  TEMP = F$DCB.SETX;

   9506  2 000653   100051 236100                    LDQ     41,,PR1
         2 000654   777777 376007                    ANQ     -1,DL
         2 000655   200054 756100                    STQ     TEMP,,AUTO

      557     9507    5                  FT$DDT.SOLICIT = FT_OVERSOL#; /* Remember asking               */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:77   

   9507  2 000656   500006 236100                    LDQ     6,,PR5
         2 000657   000007 376000 3                  ANQ     7
         2 000660   000001 276007                    ORQ     1,DL
         2 000661   500006 756100                    STQ     6,,PR5

      558     9508    5                  CALL FTR_ROMSG('OVER');  /* Tell user                          */

   9508  2 000662   000010 236000 3                  LDQ     8
         2 000663   200067 756100                    STQ     SAVDEVICE+2,,AUTO
         2 000664   001366 701000 2                  TSX1    FTR_ROMSG
         2 000665   000000 011000                    NOP     0

      559     9509    6                  DO WHILE(FT$DDT.SOLICIT = FT_OVERSOL#);

   9509  2 000666   200006 470500                    LDP0    DDDT$,,AUTO
         2 000667   000006 236100                    LDQ     6,,PR0
         2 000670   000007 376007                    ANQ     7,DL
         2 000671   000001 116007                    CMPQ    1,DL
         2 000672   000730 601000 2                  TNZ     s:9513

      560     9510    6                     CALL OCI$MK_WR(M_TAPE,OVER_MSG#,2,'006001'O,MSGS,TEMP);
              9510                              /* Ask for over keyin */

   9510  2 000673   200054 630500                    EPPR0   TEMP,,AUTO
         2 000674   200075 450500                    STP0    @MSG+6,,AUTO
         2 000675   200012 631500                    EPPR1   MSGS,,AUTO
         2 000676   200074 451500                    STP1    @MSG+5,,AUTO
         2 000677   000014 237000 3                  LDAQ    12
         2 000700   200072 757100                    STAQ    @MSG+3,,AUTO
         2 000701   000016 237000 3                  LDAQ    14
         2 000702   200070 757100                    STAQ    @MSG+1,,AUTO
         2 000703   200070 630500                    EPPR0   @MSG+1,,AUTO
         2 000704   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 000705   000000 701000 xent               TSX1    OCI$MK_WR
         2 000706   000000 011000                    NOP     0

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:78   
      561     9511    6                     CALL SSR$REG(%SS_SL,ADDR(NIL),MNTWAIT) ALTRET(NOOVER);

   9511  2 000707   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000710   200070 756100                    STQ     @MSG+1,,AUTO
         2 000711   000022 236000 3                  LDQ     18
         2 000712   200073 756100                    STQ     @MSG+4,,AUTO
         2 000713   200070 630500                    EPPR0   @MSG+1,,AUTO
         2 000714   200072 450500                    STP0    @MSG+3,,AUTO
         2 000715   000023 236000 3                  LDQ     19
         2 000716   200071 756100                    STQ     @MSG+2,,AUTO
         2 000717   200071 630500                    EPPR0   @MSG+2,,AUTO
         2 000720   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000721   000000 701000 xent               TSX1    SSR$REG
         2 000722   001343 702000 2                  TSX2    NOOVER

      562     9512    6                     END;

   9512  2 000723   200006 470500                    LDP0    DDDT$,,AUTO
         2 000724   000006 236100                    LDQ     6,,PR0
         2 000725   000007 376007                    ANQ     7,DL
         2 000726   000001 116007                    CMPQ    1,DL
         2 000727   000673 600000 2                  TZE     s:9510

      563     9513    5                  IF FT$DDT.SOLICIT ~= 0

   9513  2 000730   000006 236100                    LDQ     6,,PR0
         2 000731   000007 316007                    CANQ    7,DL
         2 000732   000741 600000 2                  TZE     s:9530

      564     9514    6                   THEN DO;                /* Wouldn't over tape                 */

      565     9515    6                     FT$DDT.SOLICIT = 0;

   9515  2 000733   000007 236000 3                  LDQ     7
         2 000734   000006 356100                    ANSQ    6,,PR0

      566     9516    6                     B$JIT.ERR = E_OPROT; /*E* ERROR: FTR-E$OPROT */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:79   

   9516  2 000735   000037 236000 1                  LDQ     E_OPROT
         2 000736   000000 471400 xsym               LDP1    B$JIT$
         2 000737   100012 756100                    STQ     10,,PR1

      567     9517    6                     ALTRETURN;

   9517  2 000740   000000 702200 xent               TSX2  ! X66_AALT

      568     9518    6                     END;
      569     9519    5                  END;
      570     9520    4               END;
      571     9521    3            END;
      572     9522    2         END;
      573     9523
      574     9524         /***
      575     9525          *** OVER keyin is needed to change ANS tape to free tape and vice
      576     9526          *** versa for semi-protected systems.  This type of change is illegal
      577     9527          *** in fully protected systems and is caught above.
      578     9528          ***/
      579     9529
      580     9530    1      IF NOT B$JIT.PRIV.ACTIVE & %PR_FMSEC# /* Not allowed to bypass             */

   9530  2 000741   000000 470400 xsym               LDP0    B$JIT$
         2 000742   000013 236100                    LDQ     11,,PR0
         2 000743   000044 376000 1                  ANQ     E_VOLOUT+1
         2 000744   001106 601000 2                  TNZ     s:9561
         2 000745   200006 471500                    LDP1    DDDT$,,AUTO
         2 000746   100006 236100                    LDQ     6,,PR1
         2 000747   400000 316007                    CANQ    -131072,DL
         2 000750   000755 601000 2                  TNZ     s:9530+12
         2 000751   400000 316007                    CANQ    -131072,DL
         2 000752   000762 601000 2                  TNZ     s:9530+17
         2 000753   010000 316007                    CANQ    4096,DL
         2 000754   000762 600000 2                  TZE     s:9530+17
         2 000755   200011 473500                    LDP3    JDCB$,,AUTO
         2 000756   300032 236100                    LDQ     26,,PR3
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:80   
         2 000757   777000 376007                    ANQ     -512,DL
         2 000760   003000 116007                    CMPQ    1536,DL
         2 000761   000776 600000 2                  TZE     s:9530+29
         2 000762   100006 236100                    LDQ     6,,PR1
         2 000763   400000 316007                    CANQ    -131072,DL
         2 000764   001106 601000 2                  TNZ     s:9561
         2 000765   400000 316007                    CANQ    -131072,DL
         2 000766   000771 601000 2                  TNZ     s:9530+24
         2 000767   010000 316007                    CANQ    4096,DL
         2 000770   001106 601000 2                  TNZ     s:9561
         2 000771   200011 473500                    LDP3    JDCB$,,AUTO
         2 000772   300032 236100                    LDQ     26,,PR3
         2 000773   777000 376007                    ANQ     -512,DL
         2 000774   003000 116007                    CMPQ    1536,DL
         2 000775   001106 600000 2                  TZE     s:9561
         2 000776   000000 235000 xsym               LDA     FT_PROT
         2 000777   000001 115007                    CMPA    1,DL
         2 001000   001005 600000 2                  TZE     s:9538
         2 001001   000000 115003                    CMPA    0,DU
         2 001002   001106 601000 2                  TNZ     s:9561
         2 001003   000000 235000 1                  LDA     FT_TAPETYPECHK
         2 001004   001106 600000 2                  TZE     s:9561

      581     9531    1        AND ( ( (FT$DDT.ANST OR (NOT FT$DDT.ANST AND FT$DDT.NOWANS))
      582     9532    1        AND F$DCB.ASN = %DEVICE#)          /* Changing tape type                 */
      583     9533    1        OR (NOT (FT$DDT.ANST OR (NOT FT$DDT.ANST AND FT$DDT.NOWANS))
      584     9534    1        AND F$DCB.ASN ~= %DEVICE#) )
      585     9535    1        AND ( (FT_PROT = FT_SEMIPROT#)
              9535                 /* If system requires type change verification */
      586     9536    1        OR (FT_PROT = FT_UNPROT# AND FT_TAPETYPECHK ~= 0) )
      587     9537    2       THEN DO;                            /* Require OVER keyin                 */

      588     9538    2         MSGS.MG1 = F$DCB.PSN;             /* Tell opr SN if any                 */

   9538  2 001005   040100 100500                    MLR     fill='040'O
         2 001006   300024 000006                    ADSC9   20,,PR3                  cn=0,n=6
         2 001007   200012 000006                    ADSC9   MSGS,,AUTO               cn=0,n=6
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:81   

      589     9539    2         IF FT$DDT.ANST

   9539  2 001010   100006 236100                    LDQ     6,,PR1
         2 001011   400000 316007                    CANQ    -131072,DL
         2 001012   001016 600000 2                  TZE     s:9541

      590     9540    2          THEN MSGS.MG2 = 2;               /* Changing ANS to non-ans            */

   9540  2 001013   002000 236007                    LDQ     1024,DL
         2 001014   200013 552110                    STBQ    MSGS+1,'10'O,AUTO
         2 001015   001020 710000 2                  TRA     s:9542

      591     9541    2          ELSE MSGS.MG2 = 1;               /* Changing non-ANS to ANS            */

   9541  2 001016   001000 236007                    LDQ     512,DL
         2 001017   200013 552110                    STBQ    MSGS+1,'10'O,AUTO

      592     9542    2         TEMP = F$DCB.SETX;

   9542  2 001020   300051 236100                    LDQ     41,,PR3
         2 001021   777777 376007                    ANQ     -1,DL
         2 001022   200054 756100                    STQ     TEMP,,AUTO

      593     9543    2         FT$DDT.SOLICIT = FT_OVERSOL#;     /* Remember asking                    */

   9543  2 001023   100006 236100                    LDQ     6,,PR1
         2 001024   000007 376000 3                  ANQ     7
         2 001025   000001 276007                    ORQ     1,DL
         2 001026   100006 756100                    STQ     6,,PR1

      594     9544    2         CALL FTR_ROMSG('OVER');           /* Tell user                          */

   9544  2 001027   000010 236000 3                  LDQ     8
         2 001030   200067 756100                    STQ     SAVDEVICE+2,,AUTO
         2 001031   001366 701000 2                  TSX1    FTR_ROMSG
         2 001032   000000 011000                    NOP     0
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:82   

      595     9545    3         DO WHILE(FT$DDT.SOLICIT = FT_OVERSOL#);

   9545  2 001033   200006 470500                    LDP0    DDDT$,,AUTO
         2 001034   000006 236100                    LDQ     6,,PR0
         2 001035   000007 376007                    ANQ     7,DL
         2 001036   000001 116007                    CMPQ    1,DL
         2 001037   001075 601000 2                  TNZ     s:9549

      596     9546    3            CALL OCI$MK_WR(M_TAPE,OVER_MSG#,2,'006001'O,MSGS,TEMP);
              9546                     /* Ask for over keyin */

   9546  2 001040   200054 630500                    EPPR0   TEMP,,AUTO
         2 001041   200075 450500                    STP0    @MSG+6,,AUTO
         2 001042   200012 631500                    EPPR1   MSGS,,AUTO
         2 001043   200074 451500                    STP1    @MSG+5,,AUTO
         2 001044   000014 237000 3                  LDAQ    12
         2 001045   200072 757100                    STAQ    @MSG+3,,AUTO
         2 001046   000016 237000 3                  LDAQ    14
         2 001047   200070 757100                    STAQ    @MSG+1,,AUTO
         2 001050   200070 630500                    EPPR0   @MSG+1,,AUTO
         2 001051   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 001052   000000 701000 xent               TSX1    OCI$MK_WR
         2 001053   000000 011000                    NOP     0

      597     9547    3            CALL SSR$REG(%SS_SL,ADDR(NIL),MNTWAIT) ALTRET(NOOVER);

   9547  2 001054   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 001055   200070 756100                    STQ     @MSG+1,,AUTO
         2 001056   000022 236000 3                  LDQ     18
         2 001057   200073 756100                    STQ     @MSG+4,,AUTO
         2 001060   200070 630500                    EPPR0   @MSG+1,,AUTO
         2 001061   200072 450500                    STP0    @MSG+3,,AUTO
         2 001062   000023 236000 3                  LDQ     19
         2 001063   200071 756100                    STQ     @MSG+2,,AUTO
         2 001064   200071 630500                    EPPR0   @MSG+2,,AUTO
         2 001065   000021 631400 xsym               EPPR1   B_VECTNIL+17
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:83   
         2 001066   000000 701000 xent               TSX1    SSR$REG
         2 001067   001343 702000 2                  TSX2    NOOVER

      598     9548    3            END;

   9548  2 001070   200006 470500                    LDP0    DDDT$,,AUTO
         2 001071   000006 236100                    LDQ     6,,PR0
         2 001072   000007 376007                    ANQ     7,DL
         2 001073   000001 116007                    CMPQ    1,DL
         2 001074   001040 600000 2                  TZE     s:9546

      599     9549    2         IF FT$DDT.SOLICIT ~= 0

   9549  2 001075   000006 236100                    LDQ     6,,PR0
         2 001076   000007 316007                    CANQ    7,DL
         2 001077   001106 600000 2                  TZE     s:9561

      600     9550    3          THEN DO;                         /* Wouldn't over tape                 */

      601     9551    3            FT$DDT.SOLICIT = 0;

   9551  2 001100   000007 236000 3                  LDQ     7
         2 001101   000006 356100                    ANSQ    6,,PR0

      602     9552    3            B$JIT.ERR = E_OPROT; /*E* ERROR: FTR-E$OPROT */

   9552  2 001102   000037 236000 1                  LDQ     E_OPROT
         2 001103   000000 471400 xsym               LDP1    B$JIT$
         2 001104   100012 756100                    STQ     10,,PR1

      603     9553    3            ALTRETURN;

   9553  2 001105   000000 702200 xent               TSX2  ! X66_AALT

      604     9554    3            END;
      605     9555    2         END;
      606     9556
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:84   
      607     9557         /***
      608     9558          *** Now worry about writing on tape.
      609     9559          ***/
      610     9560
      611     9561    1      IF F$DCB.FUN ~= %IN#

   9561  2 001106   200011 470500                    LDP0    JDCB$,,AUTO
         2 001107   000032 236100                    LDQ     26,,PR0
         2 001110   000777 376003                    ANQ     511,DU
         2 001111   000002 116003                    CMPQ    2,DU
         2 001112   001115 600000 2                  TZE     s:9572

      612     9562    2       THEN DO;                            /* Must permit tape write             */

      613     9563    2         CALL FTR_GETRING ALTRET(JUSTALT);

   9563  2 001113   001447 701000 2                  TSX1    FTR_GETRING
         2 001114   002761 702000 2                  TSX2    JUSTALT

      614     9564    2         END;

      615     9565
      616     9566         /***
      617     9567          *** Now check/set density.  Setting is only permitted at load point.
      618     9568          *** We further restrict this to output tapes or tapes whose density
      619     9569          *** could not be determined during AVR due to errors.
      620     9570          ***/
      621     9571
      622     9572    1      IF FT$DDT.POS = FTP_BOV# AND

   9572  2 001115   200006 470500                    LDP0    DDDT$,,AUTO
         2 001116   000006 236100                    LDQ     6,,PR0
         2 001117   000160 376007                    ANQ     112,DL
         2 001120   000020 116007                    CMPQ    16,DL
         2 001121   001301 601000 2                  TNZ     s:9622
         2 001122   200011 471500                    LDP1    JDCB$,,AUTO
         2 001123   100064 236100                    LDQ     52,,PR1
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:85   
         2 001124   400000 316007                    CANQ    -131072,DL
         2 001125   001131 601000 2                  TNZ     s:9572+12
         2 001126   000006 236100                    LDQ     6,,PR0
         2 001127   003400 316007                    CANQ    1792,DL
         2 001130   001301 601000 2                  TNZ     s:9622
         2 001131   100103 236100                    LDQ     67,,PR1
         2 001132   000777 376007                    ANQ     511,DL
         2 001133   000012 116007                    CMPQ    10,DL
         2 001134   001301 600000 2                  TZE     s:9622

      623     9573    1        (F$DCB.NOEOF OR FT$DDT.DENSITY = %D_UNKNOWN#) AND
      624     9574    1        F$DCB.IASN ~= %OD#
      625     9575    2       THEN DO;                            /* Beginning of volume for write      */

      626     9576    2         IF F$DCB.DENSITY = 0

   9576  2 001135   100043 236100                    LDQ     35,,PR1
         2 001136   000777 316007                    CANQ    511,DL
         2 001137   001176 601000 2                  TNZ     s:9594

      627     9577    3          THEN DO;               /* Density unspecified; pick highest available  */

      628     9578    3            I = 5;

   9578  2 001140   000005 235007                    LDA     5,DL
         2 001141   200007 755100                    STA     I,,AUTO

      629     9579    4            DO WHILE (I >= 0);

   9579  2 001142   001170 604000 2                  TMI     s:9587

      630     9580    4               IF FT_DENS(I) & F$DCB.ATTR

   9580  2 001143   200011 470500                    LDP0    JDCB$,,AUTO
         2 001144   000040 236100                    LDQ     32,,PR0
         2 001145   000022 736000                    QLS     18
         2 001146   200070 756100                    STQ     @MSG+1,,AUTO
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:86   
         2 001147   200007 235100                    LDA     I,,AUTO
         2 001150   000001 735000                    ALS     1
         2 001151   000100 100405                    MLR     fill='000'O
         2 001152   000000 000002 xsym               ADSC9   FT_DENS,A                cn=0,n=2
         2 001153   200071 000004                    ADSC9   @MSG+2,,AUTO             cn=0,n=4
         2 001154   200071 236100                    LDQ     @MSG+2,,AUTO
         2 001155   200070 376100                    ANQ     @MSG+1,,AUTO
         2 001156   001164 600000 2                  TZE     s:9585

      631     9581    5                THEN DO;

      632     9582    5                  F$DCB.DENSITY = I;       /* Found highest                      */

   9582  2 001157   200007 236100                    LDQ     I,,AUTO
         2 001160   000043 552104                    STBQ    35,'04'O,PR0

      633     9583    5                  I = -2;

   9583  2 001161   000002 335007                    LCA     2,DL
         2 001162   200007 755100                    STA     I,,AUTO

      634     9584    5                  END;

   9584  2 001163   001166 710000 2                  TRA     s:9586

      635     9585    4                ELSE I = I - 1;

   9585  2 001164   000001 336007                    LCQ     1,DL
         2 001165   200007 056100                    ASQ     I,,AUTO

      636     9586    4               END;

   9586  2 001166   200007 235100                    LDA     I,,AUTO
         2 001167   001143 605000 2                  TPL     s:9580

      637     9587    3            IF I = -1

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:87   
   9587  2 001170   000027 115000 xsym               CMPA    B_VECTNIL+23
         2 001171   001214 601000 2                  TNZ     s:9600

      638     9588    4             THEN DO;                 /* Drive does not have specified density   */

      639     9589    4               B$JIT.ERR = E_DENSBAD; /*E* ERROR: FTR-E$DENSBAD */

   9589  2 001172   000030 236000 1                  LDQ     E_DENSBAD
         2 001173   000000 470400 xsym               LDP0    B$JIT$
         2 001174   000012 756100                    STQ     10,,PR0

      640     9590    4               ALTRETURN;

   9590  2 001175   000000 702200 xent               TSX2  ! X66_AALT

      641     9591    4               END;
      642     9592    3            END;
      643     9593    3          ELSE DO;                    /* Density is specified; must be on drive  */

      644     9594    3            IF NOT F$DCB.ATTR & FT_DENS(F$DCB.DENSITY)

   9594  2 001176   100043 236100                    LDQ     35,,PR1
         2 001177   000777 376007                    ANQ     511,DL
         2 001200   000001 736000                    QLS     1
         2 001201   000100 100406                    MLR     fill='000'O
         2 001202   000000 000002 xsym               ADSC9   FT_DENS,Q                cn=0,n=2
         2 001203   200070 000004                    ADSC9   @MSG+1,,AUTO             cn=0,n=4
         2 001204   100040 236100                    LDQ     32,,PR1
         2 001205   000022 736000                    QLS     18
         2 001206   200070 376100                    ANQ     @MSG+1,,AUTO
         2 001207   001214 601000 2                  TNZ     s:9600

      645     9595    4             THEN DO;                 /* Drive does not have specified density   */

      646     9596    4               B$JIT.ERR = E_DENSBAD; /*E* ERROR: FTR-E$DENSBAD */

   9596  2 001210   000030 236000 1                  LDQ     E_DENSBAD
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:88   
         2 001211   000000 473400 xsym               LDP3    B$JIT$
         2 001212   300012 756100                    STQ     10,,PR3

      647     9597    4               ALTRETURN;

   9597  2 001213   000000 702200 xent               TSX2  ! X66_AALT

      648     9598    4               END;
      649     9599    3            END;
      650     9600    2         IF F$DCB.DENSITY ~= FT$DDT.DENSITY

   9600  2 001214   200006 470500                    LDP0    DDDT$,,AUTO
         2 001215   000006 236100                    LDQ     6,,PR0
         2 001216   000010 772000                    QRL     8
         2 001217   000007 376007                    ANQ     7,DL
         2 001220   200070 756100                    STQ     @MSG+1,,AUTO
         2 001221   200011 471500                    LDP1    JDCB$,,AUTO
         2 001222   100043 236100                    LDQ     35,,PR1
         2 001223   000777 376007                    ANQ     511,DL
         2 001224   200070 116100                    CMPQ    @MSG+1,,AUTO
         2 001225   001260 600000 2                  TZE     s:9614

      651     9601    3          THEN DO;                         /* Density change necessary           */

      652     9602    4            DO CASE(F$DCB.DENSITY);        /* Do by desired density              */

   9602  2 001226   100043 720100                    LXL0    35,,PR1
         2 001227   000777 360003                    ANX0    511,DU
         2 001230   000005 100003                    CMPX0   5,DU
         2 001231   001233 602010 2                  TNC     s:9602+5,X0
         2 001232   001254 710000 2                  TRA     s:9610
         2 001233   001254 710000 2                  TRA     s:9610
         2 001234   001254 710000 2                  TRA     s:9610
         2 001235   001240 710000 2                  TRA     s:9604
         2 001236   001244 710000 2                  TRA     s:9606
         2 001237   001250 710000 2                  TRA     s:9608

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:89   
      653     9603    4             CASE(%D800#);

      654     9604    4               CALL FTI$SD800 ALTRET(JUSTALT);

   9604  2 001240   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001241   000000 701000 xent               TSX1    FTI$SD800
         2 001242   002761 702000 2                  TSX2    JUSTALT
         2 001243   001260 710000 2                  TRA     s:9614

      655     9605    4             CASE(%D1600#);

      656     9606    4               CALL FTI$SD1600 ALTRET(JUSTALT);

   9606  2 001244   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001245   000000 701000 xent               TSX1    FTI$SD1600
         2 001246   002761 702000 2                  TSX2    JUSTALT
         2 001247   001260 710000 2                  TRA     s:9614

      657     9607    4             CASE(%D6250#);

      658     9608    4               CALL FTI$SD6250 ALTRET(JUSTALT);

   9608  2 001250   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001251   000000 701000 xent               TSX1    FTI$SD6250
         2 001252   002761 702000 2                  TSX2    JUSTALT
         2 001253   001260 710000 2                  TRA     s:9614

      659     9609    4             CASE(ELSE);                   /* Anything else is unsupported       */

      660     9610    4               B$JIT.ERR = E_DENSBAD; /*E* ERROR: FTR-E$DENSBAD */

   9610  2 001254   000030 236000 1                  LDQ     E_DENSBAD
         2 001255   000000 473400 xsym               LDP3    B$JIT$
         2 001256   300012 756100                    STQ     10,,PR3

      661     9611    4               ALTRETURN;

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:90   
   9611  2 001257   000000 702200 xent               TSX2  ! X66_AALT

      662     9612    4             END;

      663     9613    3            END;
      664     9614    2         IF F$DCB.NOEOF AND F$DCB.ASN ~= %DEVICE#

   9614  2 001260   200011 470500                    LDP0    JDCB$,,AUTO
         2 001261   000064 236100                    LDQ     52,,PR0
         2 001262   400000 316007                    CANQ    -131072,DL
         2 001263   001306 600000 2                  TZE     s:9630
         2 001264   000032 236100                    LDQ     26,,PR0
         2 001265   777000 376007                    ANQ     -512,DL
         2 001266   003000 116007                    CMPQ    1536,DL
         2 001267   001306 600000 2                  TZE     s:9630
         2 001270   200006 471500                    LDP1    DDDT$,,AUTO
         2 001271   100006 236100                    LDQ     6,,PR1
         2 001272   400000 316007                    CANQ    -131072,DL
         2 001273   001306 601000 2                  TNZ     s:9630

      665     9615    2           AND NOT FT$DDT.ANST
      666     9616    3          THEN DO;                         /* Starting ANS tape at free tape BOV */

      667     9617    3            FT$DDT.ANST   = %YES#;

   9617  2 001274   400000 236007                    LDQ     -131072,DL
         2 001275   100006 256100                    ORSQ    6,,PR1

      668     9618    3            FT$DDT.NOWANS = %NO#;

   9618  2 001276   000024 236000 3                  LDQ     20
         2 001277   100006 356100                    ANSQ    6,,PR1

      669     9619    3            END;

      670     9620    2         END;

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:91   
   9620  2 001300   001306 710000 2                  TRA     s:9630

      671     9621    2       ELSE DO;                  /* Not at BOV...get drive's current density     */

      672     9622    2         F$DCB.DENSITY = FT$DDT.DENSITY;

   9622  2 001301   200011 471500                    LDP1    JDCB$,,AUTO
         2 001302   000006 236100                    LDQ     6,,PR0
         2 001303   003400 376007                    ANQ     1792,DL
         2 001304   000010 772000                    QRL     8
         2 001305   100043 552104                    STBQ    35,'04'O,PR1

      673     9623    2         END;

      674     9624
      675     9625         /***
      676     9626          *** If ANS tape is modified as a free tape, loose its ANSness.
      677     9627          *** If a device tape is modified as an ANS tape, make it NOWANS.
      678     9628          ***/
      679     9629
      680     9630    1      IF F$DCB.ASN = %DEVICE#

   9630  2 001306   200011 470500                    LDP0    JDCB$,,AUTO
         2 001307   000032 236100                    LDQ     26,,PR0
         2 001310   777000 376007                    ANQ     -512,DL
         2 001311   003000 116007                    CMPQ    1536,DL
         2 001312   001330 601000 2                  TNZ     s:9640

      681     9631    2       THEN DO;

      682     9632    2         IF FT$DDT.ANST AND F$DCB.FUN ~= %IN#

   9632  2 001313   200006 471500                    LDP1    DDDT$,,AUTO
         2 001314   100006 236100                    LDQ     6,,PR1
         2 001315   400000 316007                    CANQ    -131072,DL
         2 001316   001342 600000 2                  TZE     s:9644
         2 001317   000032 236100                    LDQ     26,,PR0
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:92   
         2 001320   000777 376003                    ANQ     511,DU
         2 001321   000002 116003                    CMPQ    2,DU
         2 001322   001342 600000 2                  TZE     s:9644

      683     9633    3          THEN DO;                         /* ANS tape losing ANSness            */

      684     9634    3            FT$DDT.ANST = %NO#;

   9634  2 001323   000025 236000 3                  LDQ     21
         2 001324   100006 356100                    ANSQ    6,,PR1

      685     9635    3            FT$DDT.FSN = 0;

   9635  2 001325   000000 220003                    LDX0    0,DU
         2 001326   100005 740100                    STX0    5,,PR1

      686     9636    3            END;

      687     9637    2          ELSE ;                           /* Unnecessary, I know                */
      688     9638    2         END;

   9638  2 001327   001342 710000 2                  TRA     s:9644

      689     9639    2       ELSE DO;

      690     9640    2         IF NOT FT$DDT.ANST AND F$DCB.FUN ~= %IN#

   9640  2 001330   200006 471500                    LDP1    DDDT$,,AUTO
         2 001331   100006 236100                    LDQ     6,,PR1
         2 001332   400000 316007                    CANQ    -131072,DL
         2 001333   001342 601000 2                  TNZ     s:9644
         2 001334   000032 236100                    LDQ     26,,PR0
         2 001335   000777 376003                    ANQ     511,DU
         2 001336   000002 116003                    CMPQ    2,DU
         2 001337   001342 600000 2                  TZE     s:9644

      691     9641    2          THEN FT$DDT.NOWANS = %YES#;      /* Now ANS portion exists             */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:93   

   9641  2 001340   010000 236007                    LDQ     4096,DL
         2 001341   100006 256100                    ORSQ    6,,PR1

      692     9642    2          ELSE ;
      693     9643    2         END;

      694     9644    1      RETURN;

   9644  2 001342   000000 702200 xent               TSX2  ! X66_ARET

   9640  2 001343                       NOOVER       null
      695     9645
      696     9646    1   NOOVER: ;                               /* Didn't wait for over keyin         */
      697     9647    1      FT$DDT.SOLICIT = 0;

   9647  2 001343   200006 470500                    LDP0    DDDT$,,AUTO
         2 001344   000007 236000 3                  LDQ     7
         2 001345   000006 356100                    ANSQ    6,,PR0

      698     9648    1      CALL OCI$MK_WR(M_TAPE,DBOVER_MSG#,1,'006'O,MSGS,TEMP);

   9648  2 001346   200054 631500                    EPPR1   TEMP,,AUTO
         2 001347   200075 451500                    STP1    @MSG+6,,AUTO
         2 001350   200012 633500                    EPPR3   MSGS,,AUTO
         2 001351   200074 453500                    STP3    @MSG+5,,AUTO
         2 001352   000030 237000 3                  LDAQ    24
         2 001353   200072 757100                    STAQ    @MSG+3,,AUTO
         2 001354   000032 237000 3                  LDAQ    26
         2 001355   200070 757100                    STAQ    @MSG+1,,AUTO
         2 001356   200070 630500                    EPPR0   @MSG+1,,AUTO
         2 001357   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 001360   000000 701000 xent               TSX1    OCI$MK_WR
         2 001361   000000 011000                    NOP     0

      699     9649                                                /* Don't bother overing               */
      700     9650    1      B$JIT.ERR = E_TAPBRK; /*E* ERROR: FTR-E$TAPBRK */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:94   

   9650  2 001362   000027 236000 1                  LDQ     E_TAPBRK
         2 001363   000000 470400 xsym               LDP0    B$JIT$
         2 001364   000012 756100                    STQ     10,,PR0

      701     9651    1      ALTRETURN;

   9651  2 001365   000000 702200 xent               TSX2  ! X66_AALT

      702     9652
      703     9653        /*********************************************************************/
      704     9654        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:95   
      705     9655        /********************************************************************/
      706     9656    1   FTR_ROMSG: PROC(MSG);

   9656  2 001366   200066 741300       FTR_ROMSG    STX1  ! SAVDEVICE+1,,AUTO

      707     9657        /*F*     NAME: FTR_ROMSG
      708     9658                 PURPOSE: Tell user that RING or OVER keyin is pending.
      709     9659         ***/
      710     9660
      711     9661         /***
      712     9662          *** Parameter:
      713     9663          ***/
      714     9664
      715     9665    2   DCL MSG CHAR(4);                        /* Either 'RING' or 'OVER'            */
      716     9666
      717     9667        /********************/
      718     9668
      719     9669    2      IF B$JIT.MODE ~= %M_INT# OR NOT S$CU$->B$U.FLG.ANNCE THEN RETURN;

   9669  2 001367   000000 470400 xsym               LDP0    B$JIT$
         2 001370   000000 236100                    LDQ     0,,PR0
         2 001371   740000 376003                    ANQ     -16384,DU
         2 001372   140000 116003                    CMPQ    49152,DU
         2 001373   001400 601000 2                  TNZ     s:9669+9
         2 001374   000000 471400 xsym               LDP1    S$CU$
         2 001375   100000 236100                    LDQ     0,,PR1
         2 001376   040000 316007                    CANQ    16384,DL
         2 001377   001401 601000 2                  TNZ     s:9670

   9669  2 001400   000001 702211                    TSX2  ! 1,X1

      720     9670    2      ROMSGMSGAUTO = ROMSGMSG;

   9670  2 001401   000100 100400                    MLR     fill='000'O
         2 001402   000016 000044 1                  ADSC9   ROMSGMSG                 cn=0,n=36
         2 001403   200032 000044                    ADSC9   ROMSGMSGAUTO,,AUTO       cn=0,n=36

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:96   
      721     9671    2      ROMSGAUTO = ROMSG;

   9671  2 001404   000100 100400                    MLR     fill='000'O
         2 001405   000002 000060 1                  ADSC9   ROMSG                    cn=0,n=48
         2 001406   200016 000060                    ADSC9   ROMSGAUTO,,AUTO          cn=0,n=48

      722     9672    2      ROMSGAUTO.V_ = VECTOR(ROMSGAUTO.V);

   9672  2 001407   000034 235000 3                  LDA     28
         2 001410   200070 452500                    STP2    @MSG+1,,AUTO
         2 001411   200070 236100                    LDQ     @MSG+1,,AUTO
         2 001412   000026 036003                    ADLQ    22,DU
         2 001413   200016 757100                    STAQ    ROMSGAUTO,,AUTO

      723     9673    2      ROMSGAUTO.BUF_ = VECTOR(ROMSGMSGAUTO);

   9673  2 001414   000035 235000 3                  LDA     29
         2 001415   200070 452500                    STP2    @MSG+1,,AUTO
         2 001416   200070 236100                    LDQ     @MSG+1,,AUTO
         2 001417   000032 036003                    ADLQ    26,DU
         2 001420   200022 757100                    STAQ    ROMSGAUTO+4,,AUTO

      724     9674    2      ROMSGMSGAUTO.SN = F$DCB.PSN;

   9674  2 001421   200011 473500                    LDP3    JDCB$,,AUTO
         2 001422   040100 100500                    MLR     fill='040'O
         2 001423   300024 000006                    ADSC9   20,,PR3                  cn=0,n=6
         2 001424   200041 400006                    ADSC9   ROMSGMSGAUTO+7,,AUTO     cn=2,n=6

      725     9675    2      ROMSGMSGAUTO.TT = F$DCB.RESNT.TYP;

   9675  2 001425   040100 100500                    MLR     fill='040'O
         2 001426   300026 000002                    ADSC9   22,,PR3                  cn=0,n=2
         2 001427   200040 600002                    ADSC9   ROMSGMSGAUTO+6,,AUTO     cn=3,n=2

      726     9676    2      ROMSGMSGAUTO.ROOPT = MSG;

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:97   
   9676  2 001430   200067 474500                    LDP4    @MSG,,AUTO
         2 001431   040100 100500                    MLR     fill='040'O
         2 001432   400000 000004                    ADSC9   0,,PR4                   cn=0,n=4
         2 001433   200033 000004                    ADSC9   ROMSGMSGAUTO+1,,AUTO     cn=0,n=4

      727     9677    2      CALL M$MWRITE(ROMSGAUTO) ALTRET(SOWHAT);

   9677  2 001434   200016 635500                    EPPR5   ROMSGAUTO,,AUTO
         2 001435   200070 455500                    STP5    @MSG+1,,AUTO
         2 001436   200070 630500                    EPPR0   @MSG+1,,AUTO
         2 001437   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001440   000000 701000 xent               TSX1    M$MWRITE
         2 001441   001442 702000 2                  TSX2    SOWHAT

   9676  2 001442                       SOWHAT       null
      728     9678    2   SOWHAT: ;
      729     9679    2      B$JIT.DCB$ = JDCB$;                  /* Restore DCB pointer                */

   9679  2 001442   200011 236100                    LDQ     JDCB$,,AUTO
         2 001443   000000 470400 xsym               LDP0    B$JIT$
         2 001444   000232 756100                    STQ     154,,PR0

      730     9680    2      RETURN;

   9680  2 001445   200066 221300                    LDX1  ! SAVDEVICE+1,,AUTO
         2 001446   000001 702211                    TSX2  ! 1,X1

      731     9681
      732     9682    2   END FTR_ROMSG;
      733     9683        /********************************************************************/
      734     9684        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:98   
      735     9685        /*********************************************************************/
      736     9686    1   FTR_GETRING: PROC ALTRET;

   9686  2 001447   200056 741300       FTR_GETRING  STX1  ! TEMP+2,,AUTO

      737     9687        /*F*     NAME: FTR_GETRING
      738     9688                 PURPOSE: Gets ring in tape.
      739     9689         ***/
      740     9690
      741     9691         /***
      742     9692          *** Locals:
      743     9693          ***/
      744     9694
      745     9695    2   DCL POS_KNOWN BIT(1) AUTO;              /* Indicates if position known        */
      746     9696    2   DCL SAVFSN SBIN AUTO;                   /* Saves DDT fields                   */
      747     9697    2   DCL SAVFRSTFSN SBIN AUTO;
      748     9698    2   DCL SAVFMCNT SBIN AUTO;
      749     9699    2   DCL SAVEBCDIC BIT(1) AUTO;
      750     9700    2   DCL SAVPOS SBIN AUTO;
      751     9701    2   DCL SAVDEVICE SBIN AUTO;
      752     9702
      753     9703        /********************/
      754     9704
      755     9705         /***
      756     9706          *** Already done if write access allowed.
      757     9707          ***/
      758     9708
      759     9709    2      IF FT$DDT.WRITE THEN RETURN;         /* Already have write access          */

   9709  2 001450   200006 470500                    LDP0    DDDT$,,AUTO
         2 001451   000006 236100                    LDQ     6,,PR0
         2 001452   020000 316007                    CANQ    8192,DL
         2 001453   001455 600000 2                  TZE     s:9710

   9709  2 001454   000001 702211                    TSX2  ! 1,X1

      760     9710    2      IF FT$DDT.RINGIN THEN GOTO GOT_RING; /* Ring exists already                */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:99   

   9710  2 001455   040000 316007                    CANQ    16384,DL
         2 001456   002112 601000 2                  TNZ     GOT_RING

      761     9711         /***
      762     9712          *** Ask operator if he wants to put a ring in current tape.
      763     9713          *** If not, return protected error.  If so, determine current
      764     9714          *** position, dismount tape to permit ring insertion, then ask
      765     9715          *** for tape again.
      766     9716          ***/
      767     9717
      768     9718    2      POS_KNOWN = %NO#;                    /* Position not known yet             */

   9718  2 001457   200057 450100                    STZ     POS_KNOWN,,AUTO

      769     9719    2      I = 0;

   9719  2 001460   200007 450100                    STZ     I,,AUTO

      770     9720    2      J = 0;

   9720  2 001461   200010 450100                    STZ     J,,AUTO

      771     9721    3      DO WHILE(NOT FT$DDT.RINGIN);

   9721  2 001462   001745 710000 2                  TRA     NEVER0

      772     9722    3         IF FT_RINGBOTONLY > 0 AND FT$DDT.POS ~= FTP_BOV#

   9722  2 001463   000001 235000 1                  LDA     FT_RINGBOTONLY
         2 001464   001477 604400 2                  TMOZ    s:9727
         2 001465   200006 470500                    LDP0    DDDT$,,AUTO
         2 001466   000006 236100                    LDQ     6,,PR0
         2 001467   000160 376007                    ANQ     112,DL
         2 001470   000020 116007                    CMPQ    16,DL
         2 001471   001477 600000 2                  TZE     s:9727

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:100  
      773     9723    4          THEN DO;                         /* Ring allowed at bot only           */

      774     9724    4            B$JIT.ERR = E_PROT; /*E* ERROR: FTR-E$PROT */

   9724  2 001472   000040 236000 1                  LDQ     E_PROT
         2 001473   000000 471400 xsym               LDP1    B$JIT$
         2 001474   100012 756100                    STQ     10,,PR1

      775     9725    4            RETURN;

   9725  2 001475   200056 221300                    LDX1  ! TEMP+2,,AUTO
         2 001476   000001 702211                    TSX2  ! 1,X1

      776     9726    4            END;
      777     9727    3         MSGS.MG1 = F$DCB.PSN;             /* Tell opr SN if any                 */

   9727  2 001477   200011 470500                    LDP0    JDCB$,,AUTO
         2 001500   040100 100500                    MLR     fill='040'O
         2 001501   000024 000006                    ADSC9   20,,PR0                  cn=0,n=6
         2 001502   200012 000006                    ADSC9   MSGS,,AUTO               cn=0,n=6

      778     9728    3         TEMP = F$DCB.SETX;

   9728  2 001503   000051 236100                    LDQ     41,,PR0
         2 001504   777777 376007                    ANQ     -1,DL
         2 001505   200054 756100                    STQ     TEMP,,AUTO

      779     9729    3         FT$DDT.SOLICIT = FT_RINGSOL#;     /* Remember asking                    */

   9729  2 001506   200006 471500                    LDP1    DDDT$,,AUTO
         2 001507   100006 236100                    LDQ     6,,PR1
         2 001510   000007 376000 3                  ANQ     7
         2 001511   000002 276007                    ORQ     2,DL
         2 001512   100006 756100                    STQ     6,,PR1

      780     9730    3         CALL FTR_ROMSG('RING');           /* Tell user                          */

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:101  
   9730  2 001513   000036 236000 3                  LDQ     30
         2 001514   200067 756100                    STQ     @MSG,,AUTO
         2 001515   001366 701000 2                  TSX1    FTR_ROMSG
         2 001516   000000 011000                    NOP     0

      781     9731    4         DO WHILE(FT$DDT.SOLICIT = FT_RINGSOL#);

   9731  2 001517   200006 470500                    LDP0    DDDT$,,AUTO
         2 001520   000006 236100                    LDQ     6,,PR0
         2 001521   000007 376007                    ANQ     7,DL
         2 001522   000002 116007                    CMPQ    2,DL
         2 001523   001561 601000 2                  TNZ     s:9735

      782     9732    4            CALL OCI$MK_WR(M_TAPE,RING_MSG#,1,'006'O,MSGS,TEMP); /* Ask for ring */

   9732  2 001524   200054 630500                    EPPR0   TEMP,,AUTO
         2 001525   200075 450500                    STP0    @MSG+6,,AUTO
         2 001526   200012 631500                    EPPR1   MSGS,,AUTO
         2 001527   200074 451500                    STP1    @MSG+5,,AUTO
         2 001530   000030 237000 3                  LDAQ    24
         2 001531   200072 757100                    STAQ    @MSG+3,,AUTO
         2 001532   000040 237000 3                  LDAQ    32
         2 001533   200070 757100                    STAQ    @MSG+1,,AUTO
         2 001534   200070 630500                    EPPR0   @MSG+1,,AUTO
         2 001535   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 001536   000000 701000 xent               TSX1    OCI$MK_WR
         2 001537   000000 011000                    NOP     0

      783     9733    4            CALL SSR$REG(%SS_SL,ADDR(NIL),MNTWAIT) ALTRET(NORING);

   9733  2 001540   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 001541   200070 756100                    STQ     @MSG+1,,AUTO
         2 001542   000022 236000 3                  LDQ     18
         2 001543   200073 756100                    STQ     @MSG+4,,AUTO
         2 001544   200070 630500                    EPPR0   @MSG+1,,AUTO
         2 001545   200072 450500                    STP0    @MSG+3,,AUTO
         2 001546   000023 236000 3                  LDQ     19
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:102  
         2 001547   200071 756100                    STQ     @MSG+2,,AUTO
         2 001550   200071 630500                    EPPR0   @MSG+2,,AUTO
         2 001551   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 001552   000000 701000 xent               TSX1    SSR$REG
         2 001553   002126 702000 2                  TSX2    NORING

      784     9734    4            END;

   9734  2 001554   200006 470500                    LDP0    DDDT$,,AUTO
         2 001555   000006 236100                    LDQ     6,,PR0
         2 001556   000007 376007                    ANQ     7,DL
         2 001557   000002 116007                    CMPQ    2,DL
         2 001560   001524 600000 2                  TZE     s:9732

      785     9735    3         IF FT$DDT.SOLICIT ~= 0

   9735  2 001561   000006 236100                    LDQ     6,,PR0
         2 001562   000007 316007                    CANQ    7,DL
         2 001563   001573 600000 2                  TZE     s:9742

      786     9736    4          THEN DO;                         /* Wouldn't ring tape                 */

      787     9737    4            FT$DDT.SOLICIT = 0;

   9737  2 001564   000007 236000 3                  LDQ     7
         2 001565   000006 356100                    ANSQ    6,,PR0

      788     9738    4            B$JIT.ERR = E_NORING; /*E* ERROR: FTR-E$NORING */

   9738  2 001566   000032 236000 1                  LDQ     E_NORING
         2 001567   000000 471400 xsym               LDP1    B$JIT$
         2 001570   100012 756100                    STQ     10,,PR1

      789     9739    4            ALTRETURN;

   9739  2 001571   200056 221300                    LDX1  ! TEMP+2,,AUTO
         2 001572   000000 702211                    TSX2  ! 0,X1
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:103  

      790     9740    4            END;
      791     9741    4          ELSE DO;

      792     9742    4            SAVPOS = FT$DDT.POS;

   9742  2 001573   000006 236100                    LDQ     6,,PR0
         2 001574   000004 772000                    QRL     4
         2 001575   000007 376007                    ANQ     7,DL
         2 001576   200064 756100                    STQ     SAVPOS,,AUTO

      793     9743    4            SAVDEVICE = F$DCB.ASN;

   9743  2 001577   200011 471500                    LDP1    JDCB$,,AUTO
         2 001600   100032 236100                    LDQ     26,,PR1
         2 001601   000011 772000                    QRL     9
         2 001602   000777 376007                    ANQ     511,DL
         2 001603   200065 756100                    STQ     SAVDEVICE,,AUTO

      794     9744    4            IF (SAVPOS = FTP_HDR#) THEN

   9744  2 001604   200064 235100                    LDA     SAVPOS,,AUTO
         2 001605   000002 115007                    CMPA    2,DL
         2 001606   001621 601000 2                  TNZ     s:9751

      795     9745    5            DO;

      796     9746    5               SAVFSN = FT$DDT.FSN;

   9746  2 001607   000005 236100                    LDQ     5,,PR0
         2 001610   000022 772000                    QRL     18
         2 001611   200060 756100                    STQ     SAVFSN,,AUTO

      797     9747    5               SAVFRSTFSN= FT$DDT.FRSTFSN;

   9747  2 001612   000005 236100                    LDQ     5,,PR0
         2 001613   777777 376007                    ANQ     -1,DL
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:104  
         2 001614   200061 756100                    STQ     SAVFRSTFSN,,AUTO

      798     9748    5               CALL FTI$REWIND ALTRET(JUSTALT);

   9748  2 001615   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001616   000000 701000 xent               TSX1    FTI$REWIND
         2 001617   002150 702000 2                  TSX2    JUSTALT

      799     9749    5               END;

   9749  2 001620   001711 710000 2                  TRA     s:9779

      800     9750    5             ELSE DO;                      /* Operator asked to put ring in tape */

      801     9751    5               IF NOT POS_KNOWN

   9751  2 001621   200057 234100                    SZN     POS_KNOWN,,AUTO
         2 001622   001711 604000 2                  TMI     s:9779

      802     9752    6                THEN DO;                   /* Determine tape position            */

      803     9753    6                  SAVFSN = FT$DDT.FSN;     /* Save critical DDT items            */

   9753  2 001623   000005 236100                    LDQ     5,,PR0
         2 001624   000022 772000                    QRL     18
         2 001625   200060 756100                    STQ     SAVFSN,,AUTO

      804     9754    6                  SAVFRSTFSN = FT$DDT.FRSTFSN;

   9754  2 001626   000005 236100                    LDQ     5,,PR0
         2 001627   777777 376007                    ANQ     -1,DL
         2 001630   200061 756100                    STQ     SAVFRSTFSN,,AUTO

      805     9755    6                  SAVFMCNT = FT$DDT.FMCNT;

   9755  2 001631   000006 236100                    LDQ     6,,PR0
         2 001632   000022 772000                    QRL     18
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:105  
         2 001633   200062 756100                    STQ     SAVFMCNT,,AUTO

      806     9756    6                  SAVEBCDIC = FT$DDT.EBCDIC;

   9756  2 001634   000006 236100                    LDQ     6,,PR0
         2 001635   000024 736000                    QLS     20
         2 001636   400000 376003                    ANQ     -131072,DU
         2 001637   200063 756100                    STQ     SAVEBCDIC,,AUTO

      807     9757    6                  I = 0;

   9757  2 001640   200007 450100                    STZ     I,,AUTO

      808     9758    6                  F$DCB.TYC(1) = '0'B;

   9758  2 001641   100002 450100                    STZ     2,,PR1

      809     9759    7                  DO WHILE (NOT F$DCB.TYC(1));

   9759  2 001642   001655 710000 2                  TRA     s:9763

      810     9760    7                     F$DCB.ARS = -65500;

   9760  2 001643   177734 335007                    LCA     65500,DL
         2 001644   200011 470500                    LDP0    JDCB$,,AUTO
         2 001645   000000 755100                    STA     0,,PR0

      811     9761    7                     CALL FTI$SPREC ALTRET(JUSTALT);

   9761  2 001646   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001647   000000 701000 xent               TSX1    FTI$SPREC
         2 001650   002150 702000 2                  TSX2    JUSTALT

      812     9762    7                     I = I + F$DCB.ARS;    /* Count records                      */

   9762  2 001651   200011 470500                    LDP0    JDCB$,,AUTO
         2 001652   200007 236100                    LDQ     I,,AUTO
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:106  
         2 001653   000000 036100                    ADLQ    0,,PR0
         2 001654   200007 756100                    STQ     I,,AUTO

      813     9763    7                     END;

   9763  2 001655   200011 470500                    LDP0    JDCB$,,AUTO
         2 001656   000002 235100                    LDA     2,,PR0
         2 001657   001643 600000 2                  TZE     s:9760

      814     9764    6                  IF F$DCB.TYC.BOF(1)

   9764  2 001660   000002 236100                    LDQ     2,,PR0
         2 001661   020000 316003                    CANQ    8192,DU
         2 001662   001670 600000 2                  TZE     s:9769

      815     9765    7                   THEN DO;                /* Don't count file mark as record    */

      816     9766    7                     I = I - 1;

   9766  2 001663   000001 336007                    LCQ     1,DL
         2 001664   200007 056100                    ASQ     I,,AUTO

      817     9767    7                     J = 1;                /* One file mark hit                  */

   9767  2 001665   000001 235007                    LDA     1,DL
         2 001666   200010 755100                    STA     J,,AUTO

      818     9768    7                     END;

   9768  2 001667   001671 710000 2                  TRA     s:9770

      819     9769    6                   ELSE J = 0;

   9769  2 001670   200010 450100                    STZ     J,,AUTO

      820     9770    7                  DO WHILE(NOT F$DCB.TYC.BOT(1));

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:107  
   9770  2 001671   001704 710000 2                  TRA     s:9774

      821     9771    7                     F$DCB.ARS = -65500;

   9771  2 001672   177734 335007                    LCA     65500,DL
         2 001673   200011 470500                    LDP0    JDCB$,,AUTO
         2 001674   000000 755100                    STA     0,,PR0

      822     9772    7                     CALL FTI$SPFILE ALTRET(JUSTALT);

   9772  2 001675   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001676   000000 701000 xent               TSX1    FTI$SPFILE
         2 001677   002150 702000 2                  TSX2    JUSTALT

      823     9773    7                     J = J + F$DCB.ARS;    /* Count file marks                   */

   9773  2 001700   200011 470500                    LDP0    JDCB$,,AUTO
         2 001701   200010 236100                    LDQ     J,,AUTO
         2 001702   000000 036100                    ADLQ    0,,PR0
         2 001703   200010 756100                    STQ     J,,AUTO

      824     9774    7                     END;

   9774  2 001704   000002 236100                    LDQ     2,,PR0
         2 001705   040000 316003                    CANQ    16384,DU
         2 001706   001672 600000 2                  TZE     s:9771

      825     9775    6                  POS_KNOWN = %YES#;       /* Know tape position                 */

   9775  2 001707   400000 236003                    LDQ     -131072,DU
         2 001710   200057 756100                    STQ     POS_KNOWN,,AUTO

      826     9776    6                  END;

      827     9777    5               END;

      828     9778
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:108  
      829     9779    4            CALL FRB$CREM;                 /* Dismount tape                      */

   9779  2 001711   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001712   000000 701000 xent               TSX1    FRB$CREM
         2 001713   000000 011000                    NOP     0

      830     9780    4            CALL FRA$OPR ALTRET(JUSTALT);  /* Get it back with ring in           */

   9780  2 001714   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001715   000000 701000 xent               TSX1    FRA$OPR
         2 001716   002150 702000 2                  TSX2    JUSTALT

      831     9781    4            DDDT$ = NK$LDCT$(F$DCB.SETX)->NK$LDCT.DDT$;

   9781  2 001717   200011 470500                    LDP0    JDCB$,,AUTO
         2 001720   000051 720100                    LXL0    41,,PR0
         2 001721   000000 471400 xsym               LDP1    N$DCT$$
         2 001722   100000 473510                    LDP3    0,X0,PR1
         2 001723   300004 236100                    LDQ     4,,PR3
         2 001724   200006 756100                    STQ     DDDT$,,AUTO

      832     9782    4            FT$DDT.SN = F$DCB.PSN;         /* Set actual serial number           */

   9782  2 001725   200006 474500                    LDP4    DDDT$,,AUTO
         2 001726   040100 100500                    MLR     fill='040'O
         2 001727   000024 000006                    ADSC9   20,,PR0                  cn=0,n=6
         2 001730   400002 000006                    ADSC9   2,,PR4                   cn=0,n=6

      833     9783    4            CALL FTR$SETSN(F$DCB.VOL+0,ADDR(F$DCB.PSN)) ALTRET(NEVER0);

   9783  2 001731   200011 236100                    LDQ     JDCB$,,AUTO
         2 001732   000024 036003                    ADLQ    20,DU
         2 001733   200070 756100                    STQ     @MSG+1,,AUTO
         2 001734   200070 633500                    EPPR3   @MSG+1,,AUTO
         2 001735   200073 453500                    STP3    @MSG+4,,AUTO
         2 001736   200011 236100                    LDQ     JDCB$,,AUTO
         2 001737   000043 036003                    ADLQ    35,DU
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:109  
         2 001740   200072 756100                    STQ     @MSG+3,,AUTO
         2 001741   200072 630500                    EPPR0   @MSG+3,,AUTO
         2 001742   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 001743   000064 701000 2                  TSX1    s:9230
         2 001744   001745 702000 2                  TSX2    NEVER0

   9782  2 001745                       NEVER0       null
      834     9784    4   NEVER0:  ;
      835     9785    4            END;

      836     9786    3         END /* DO WHILE NOT RINGIN */ ;

   9786  2 001745   200006 470500                    LDP0    DDDT$,,AUTO
         2 001746   000006 236100                    LDQ     6,,PR0
         2 001747   040000 316007                    CANQ    16384,DL
         2 001750   001463 600000 2                  TZE     s:9722

      837     9787
      838     9788         /***
      839     9789          *** Ring is in.  Position where we were.
      840     9790          ***/
      841     9791
      842     9792    2      IF (SAVPOS = FTP_HDR#) THEN

   9792  2 001751   200064 235100                    LDA     SAVPOS,,AUTO
         2 001752   000002 115007                    CMPA    2,DL
         2 001753   002007 601000 2                  TNZ     s:9805

      843     9793    3      DO;

      844     9794    3         IF (F$DCB.ASN = %DEVICE#) THEN

   9794  2 001754   200011 471500                    LDP1    JDCB$,,AUTO
         2 001755   100032 236100                    LDQ     26,,PR1
         2 001756   777000 376007                    ANQ     -512,DL
         2 001757   003000 116007                    CMPQ    1536,DL
         2 001760   001765 601000 2                  TNZ     s:9797
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:110  

      845     9795    3            F$DCB.ARS = SAVFSN - 1;

   9795  2 001761   200060 235100                    LDA     SAVFSN,,AUTO
         2 001762   000001 135007                    SBLA    1,DL
         2 001763   100000 755100                    STA     0,,PR1
         2 001764   001771 710000 2                  TRA     s:9798

      846     9796    3          ELSE
      847     9797    3            F$DCB.ARS = (SAVFSN - SAVFRSTFSN) * 3;

   9797  2 001765   200060 236100                    LDQ     SAVFSN,,AUTO
         2 001766   200061 136100                    SBLQ    SAVFRSTFSN,,AUTO
         2 001767   000003 402007                    MPY     3,DL
         2 001770   100000 756100                    STQ     0,,PR1

      848     9798    3         CALL FTI$SPFILE ALTRET(JUSTALT);

   9798  2 001771   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001772   000000 701000 xent               TSX1    FTI$SPFILE
         2 001773   002150 702000 2                  TSX2    JUSTALT

      849     9799    3         FT$DDT.POS = SAVPOS;

   9799  2 001774   200006 470500                    LDP0    DDDT$,,AUTO
         2 001775   200064 236100                    LDQ     SAVPOS,,AUTO
         2 001776   000004 736000                    QLS     4
         2 001777   000006 676100                    ERQ     6,,PR0
         2 002000   000160 376007                    ANQ     112,DL
         2 002001   000006 656100                    ERSQ    6,,PR0

      850     9800    3         FT$DDT.FSN = SAVFSN;

   9800  2 002002   200060 720100                    LXL0    SAVFSN,,AUTO
         2 002003   000005 740100                    STX0    5,,PR0

      851     9801    3         FT$DDT.FRSTFSN = SAVFRSTFSN;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:111  

   9801  2 002004   200061 721100                    LXL1    SAVFRSTFSN,,AUTO
         2 002005   000005 441100                    SXL1    5,,PR0

      852     9802    3         END;

   9802  2 002006   002112 710000 2                  TRA     GOT_RING

      853     9803    2       ELSE
      854     9804    3      DO;

      855     9805    3         IF J > 0

   9805  2 002007   200010 235100                    LDA     J,,AUTO
         2 002010   002042 604400 2                  TMOZ    s:9816

      856     9806    4          THEN DO;                         /* Position to proper file            */

      857     9807    5            DO WHILE(J > 65500);

   9807  2 002011   177734 115007                    CMPA    65500,DL
         2 002012   002027 604400 2                  TMOZ    s:9812

      858     9808    5               F$DCB.ARS = 65500;

   9808  2 002013   177734 235007                    LDA     65500,DL
         2 002014   200011 470500                    LDP0    JDCB$,,AUTO
         2 002015   000000 755100                    STA     0,,PR0

      859     9809    5               CALL FTI$SPFILE ALTRET(JUSTALT);

   9809  2 002016   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002017   000000 701000 xent               TSX1    FTI$SPFILE
         2 002020   002150 702000 2                  TSX2    JUSTALT

      860     9810    5               J = J - F$DCB.ARS;

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:112  
   9810  2 002021   200011 470500                    LDP0    JDCB$,,AUTO
         2 002022   200010 236100                    LDQ     J,,AUTO
         2 002023   000000 136100                    SBLQ    0,,PR0
         2 002024   200010 756100                    STQ     J,,AUTO

      861     9811    5               END;

   9811  2 002025   177734 116007                    CMPQ    65500,DL
         2 002026   002013 605400 2                  TPNZ    s:9808

      862     9812    4            F$DCB.ARS = J;

   9812  2 002027   200011 470500                    LDP0    JDCB$,,AUTO
         2 002030   200010 235100                    LDA     J,,AUTO
         2 002031   000000 755100                    STA     0,,PR0

      863     9813    4            CALL FTI$SPFILE ALTRET(JUSTALT);

   9813  2 002032   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002033   000000 701000 xent               TSX1    FTI$SPFILE
         2 002034   002150 702000 2                  TSX2    JUSTALT

      864     9814    4            FT$DDT.POS = FTP_HDR#;         /* Must be at HDR                     */

   9814  2 002035   200006 470500                    LDP0    DDDT$,,AUTO
         2 002036   000006 236100                    LDQ     6,,PR0
         2 002037   000042 376000 3                  ANQ     34
         2 002040   000040 276007                    ORQ     32,DL
         2 002041   000006 756100                    STQ     6,,PR0

      865     9815    4            END;

      866     9816    3         IF I > 0

   9816  2 002042   200007 235100                    LDA     I,,AUTO
         2 002043   002075 604400 2                  TMOZ    s:9827

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:113  
      867     9817    4          THEN DO;                         /* Position to proper record          */

      868     9818    5            DO WHILE(I > 65500);

   9818  2 002044   177734 115007                    CMPA    65500,DL
         2 002045   002062 604400 2                  TMOZ    s:9823

      869     9819    5               F$DCB.ARS = 65500;

   9819  2 002046   177734 235007                    LDA     65500,DL
         2 002047   200011 470500                    LDP0    JDCB$,,AUTO
         2 002050   000000 755100                    STA     0,,PR0

      870     9820    5               CALL FTI$SPREC ALTRET(JUSTALT);

   9820  2 002051   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002052   000000 701000 xent               TSX1    FTI$SPREC
         2 002053   002150 702000 2                  TSX2    JUSTALT

      871     9821    5               I = I - F$DCB.ARS;

   9821  2 002054   200011 470500                    LDP0    JDCB$,,AUTO
         2 002055   200007 236100                    LDQ     I,,AUTO
         2 002056   000000 136100                    SBLQ    0,,PR0
         2 002057   200007 756100                    STQ     I,,AUTO

      872     9822    5               END;

   9822  2 002060   177734 116007                    CMPQ    65500,DL
         2 002061   002046 605400 2                  TPNZ    s:9819

      873     9823    4            F$DCB.ARS = I;

   9823  2 002062   200011 470500                    LDP0    JDCB$,,AUTO
         2 002063   200007 235100                    LDA     I,,AUTO
         2 002064   000000 755100                    STA     0,,PR0

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:114  
      874     9824    4            CALL FTI$SPREC ALTRET(JUSTALT);

   9824  2 002065   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002066   000000 701000 xent               TSX1    FTI$SPREC
         2 002067   002150 702000 2                  TSX2    JUSTALT

      875     9825    4            FT$DDT.POS = FTP_BOD#;         /* Must be in data                    */

   9825  2 002070   200006 470500                    LDP0    DDDT$,,AUTO
         2 002071   000006 236100                    LDQ     6,,PR0
         2 002072   000042 376000 3                  ANQ     34
         2 002073   000060 276007                    ORQ     48,DL
         2 002074   000006 756100                    STQ     6,,PR0

      876     9826    4            END;

      877     9827    3         IF POS_KNOWN

   9827  2 002075   200057 234100                    SZN     POS_KNOWN,,AUTO
         2 002076   002112 605000 2                  TPL     GOT_RING

      878     9828    4          THEN DO;                         /* Restore critical DDT items         */

      879     9829    4            FT$DDT.FSN = SAVFSN;           /* Restore critical DDT items         */

   9829  2 002077   200060 720100                    LXL0    SAVFSN,,AUTO
         2 002100   000005 740100                    STX0    5,,PR0

      880     9830    4            FT$DDT.FRSTFSN = SAVFRSTFSN;

   9830  2 002101   200061 721100                    LXL1    SAVFRSTFSN,,AUTO
         2 002102   000005 441100                    SXL1    5,,PR0

      881     9831    4            FT$DDT.FMCNT = SAVFMCNT;

   9831  2 002103   200062 722100                    LXL2    SAVFMCNT,,AUTO
         2 002104   000006 742100                    STX2    6,,PR0
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:115  

      882     9832    4            FT$DDT.EBCDIC = SAVEBCDIC;

   9832  2 002105   200063 236100                    LDQ     SAVEBCDIC,,AUTO
         2 002106   000024 772000                    QRL     20
         2 002107   000006 676100                    ERQ     6,,PR0
         2 002110   100000 376007                    ANQ     32768,DL
         2 002111   000006 656100                    ERSQ    6,,PR0

      883     9833    4            END;

      884     9834    3         END;

   9831  2 002112                       GOT_RING     null
      885     9835
      886     9836    2   GOT_RING:;
      887     9837    2      CALL FTI$PERMIT ALTRET(JUSTALT);     /* Permit write                       */

   9837  2 002112   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002113   000000 701000 xent               TSX1    FTI$PERMIT
         2 002114   002150 702000 2                  TSX2    JUSTALT

      888     9838    2      FT$DDT.WRITE = %YES#;                /* Write permit allowed               */

   9838  2 002115   200006 470500                    LDP0    DDDT$,,AUTO
         2 002116   020000 236007                    LDQ     8192,DL
         2 002117   000006 256100                    ORSQ    6,,PR0

      889     9839    2      FT$DDT.SCRTCH = %NO#;                /* No longer scratch                  */

   9839  2 002120   000002 236000 3                  LDQ     2
         2 002121   000006 356100                    ANSQ    6,,PR0

      890     9840    2      FT$DDT.EXPIRED = %NO#;               /* No longer simply expired           */

   9840  2 002122   000043 236000 3                  LDQ     35
         2 002123   000006 356100                    ANSQ    6,,PR0
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:116  

      891     9841    2      RETURN;

   9841  2 002124   200056 221300                    LDX1  ! TEMP+2,,AUTO
         2 002125   000001 702211                    TSX2  ! 1,X1

   9840  2 002126                       NORING       null
      892     9842
      893     9843    2   NORING: ;                          /* Altret while waiting for RING keyin     */
      894     9844    2      FT$DDT.SOLICIT = 0;                  /* Not waiting any more               */

   9844  2 002126   200006 470500                    LDP0    DDDT$,,AUTO
         2 002127   000007 236000 3                  LDQ     7
         2 002130   000006 356100                    ANSQ    6,,PR0

      895     9845    2      CALL OCI$MK_WR(M_TAPE,DBRING_MSG#,1,'006'O,MSGS,TEMP);

   9845  2 002131   200054 631500                    EPPR1   TEMP,,AUTO
         2 002132   200075 451500                    STP1    @MSG+6,,AUTO
         2 002133   200012 633500                    EPPR3   MSGS,,AUTO
         2 002134   200074 453500                    STP3    @MSG+5,,AUTO
         2 002135   000030 237000 3                  LDAQ    24
         2 002136   200072 757100                    STAQ    @MSG+3,,AUTO
         2 002137   000046 237000 3                  LDAQ    38
         2 002140   200070 757100                    STAQ    @MSG+1,,AUTO
         2 002141   200070 630500                    EPPR0   @MSG+1,,AUTO
         2 002142   000024 631400 xsym               EPPR1   B_VECTNIL+20
         2 002143   000000 701000 xent               TSX1    OCI$MK_WR
         2 002144   000000 011000                    NOP     0

      896     9846                                                /* Don't bother ringing               */
      897     9847    2      B$JIT.ERR = E_TAPBRK; /*E* ERROR: FTR-E$TAPBRK */

   9847  2 002145   000027 236000 1                  LDQ     E_TAPBRK
         2 002146   000000 470400 xsym               LDP0    B$JIT$
         2 002147   000012 756100                    STQ     10,,PR0

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:117  
   9847  2 002150                       JUSTALT      null
      898     9848
      899     9849    2   JUSTALT: ;
      900     9850    2      ALTRETURN;

   9850  2 002150   200056 221300                    LDX1  ! TEMP+2,,AUTO
         2 002151   000000 702211                    TSX2  ! 0,X1

      901     9851
      902     9852    2   END FTR_GETRING;
      903     9853        /*********************************************************************/
      904     9854        %EJECT;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:118  
      905     9855        /*********************************************************************/
      906     9856    1   FTR$CHNGVOL: ENTRY(N) ALTRET;

   9856  2 002152   000000 700200 xent  FTR$CHNGVOL  TSX0  ! X66_AUTO_2
         2 002153   000076 000002                    ZERO    62,2

      907     9857    1      REWIND = %YES#;

   9857  2 002154   400000 236003                    LDQ     -131072,DU
         2 002155   200014 756100                    STQ     REWIND,,AUTO

      908     9858    1      GOTO CHNGVOL;

   9858  2 002156   002162 710000 2                  TRA     CHNGVOL

      909     9859    1   FTR$CHNGVOLNR: ENTRY(N) ALTRET;

   9859  2 002157   000000 700200 xent  FTR$CHNGVOL* TSX0  ! X66_AUTO_2
         2 002160   000076 000002                    ZERO    62,2

      910     9860    1      REWIND = %NO#;

   9860  2 002161   200014 450100                    STZ     REWIND,,AUTO

   9860  2 002162                       CHNGVOL      null
      911     9861    1   CHNGVOL: ;
      912     9862        /*F*     NAME: FTR$CHNGVOL(NR)
      913     9863                 PURPOSE: Change to volume specified by N.  NR for no rewind.
      914     9864                 INPUT: DCB.SEZ_OK if change to scratch ok.
      915     9865                    DCB.NOEOF if tape desired for output.
      916     9866         ***/
      917     9867
      918     9868        /********************/
      919     9869
      920     9870         /***
      921     9871          *** N must be greater than 0.
      922     9872          *** Set up pointers to DCB and DDT.
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:119  
      923     9873          ***/
      924     9874
      925     9875    1      IF N < 1 THEN GOTO VOLORDER;         /* Illegal volume                     */

   9875  2 002162   200003 470500                    LDP0    @N,,AUTO
         2 002163   000000 235100                    LDA     0,,PR0
         2 002164   002756 604400 2                  TMOZ    VOLORDER

      926     9876    1      JDCB$ = B$JIT.DCB$;

   9876  2 002165   000000 471400 xsym               LDP1    B$JIT$
         2 002166   100232 236100                    LDQ     154,,PR1
         2 002167   200011 756100                    STQ     JDCB$,,AUTO

      927     9877    1      DDDT$ = NK$LDCT$(F$DCB.SETX)->NK$LDCT.DDT$;

   9877  2 002170   200011 473500                    LDP3    JDCB$,,AUTO
         2 002171   300051 720100                    LXL0    41,,PR3
         2 002172   000000 474400 xsym               LDP4    N$DCT$$
         2 002173   400000 475510                    LDP5    0,X0,PR4
         2 002174   500004 236100                    LDQ     4,,PR5
         2 002175   200006 756100                    STQ     DDDT$,,AUTO

      928     9878
      929     9879         /***
      930     9880          *** Set up to find if volume is scratch or not.
      931     9881          ***/
      932     9882
      933     9883    1      SCRATCH = %NO#;                      /* Assume not scratch                 */

   9883  2 002176   200052 450100                    STZ     SCRATCH,,AUTO

      934     9884    1      I = N - 1;                           /* Get index of next volume           */

   9884  2 002177   000001 135007                    SBLA    1,DL
         2 002200   200007 755100                    STA     I,,AUTO

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:120  
      935     9885    1      IF F$DCB.ACS = %JRNL#                /* Get pointer to first SN CFU        */

   9885  2 002201   300036 236100                    LDQ     30,,PR3
         2 002202   000777 376007                    ANQ     511,DL
         2 002203   000004 116007                    CMPQ    4,DL
         2 002204   002221 601000 2                  TNZ     s:9892

      936     9886    2       THEN DO;

      937     9887    2         TEMP = F$DCB.CFU$->FM$CFUJ.SNLINKX;

   9887  2 002205   300066 476500                    LDP6    54,,PR3
         2 002206   600006 236100                    LDQ     6,,PR6
         2 002207   777777 376007                    ANQ     -1,DL
         2 002210   200054 756100                    STQ     TEMP,,AUTO

      938     9888    2         IF TEMP <= 0

   9888  2 002211   002215 605400 2                  TPNZ    s:9890

      939     9889    2          THEN CFU$ = ADDR(NIL);           /* No SN CFU chain                    */

   9889  2 002212   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 002213   200005 756100                    STQ     CFU$,,AUTO
         2 002214   002223 710000 2                  TRA     s:9898

      940     9890    2          ELSE CFU$ = PINCRW( F$CFU$, TEMP );

   9890  2 002215   000022 736000                    QLS     18
         2 002216   000000 036000 xsym               ADLQ    F$CFU$
         2 002217   200005 756100                    STQ     CFU$,,AUTO

      941     9891    2         END;

   9891  2 002220   002223 710000 2                  TRA     s:9898

      942     9892    1       ELSE CFU$ = F$DCB.CFU$;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:121  

   9892  2 002221   300066 236100                    LDQ     54,,PR3
         2 002222   200005 756100                    STQ     CFU$,,AUTO

      943     9893
      944     9894         /***
      945     9895          *** Determine SN from DCB.VOL, DCB.PSN and the SN CFUs.
      946     9896          ***/
      947     9897
      948     9898    1      IF CFU$ ~= ADDR(NIL)

   9898  2 002223   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002224   002317 600000 2                  TZE     s:9924

      949     9899    2       THEN DO;                            /* Have a SN CFU chain                */

      950     9900    3         DO WHILE (I > 4);            /* Find CFU in which DCB.VOL SN resides    */

   9900  2 002225   000004 115007                    CMPA    4,DL
         2 002226   002246 604400 2                  TMOZ    s:9906

      951     9901    3            TEMP = CFU$->FT$CFUSN.LINKX;   /* Get ix of next CFU                 */

   9901  2 002227   200005 470500                    LDP0    CFU$,,AUTO
         2 002230   000100 101500                    MRL     fill='000'O
         2 002231   000000 400002                    ADSC9   0,,PR0                   cn=2,n=2
         2 002232   200054 000004                    ADSC9   TEMP,,AUTO               cn=0,n=4

      952     9902    3            IF TEMP <= 0 THEN GOTO VOLORDER; /* Illegal volume                   */

   9902  2 002233   200054 235100                    LDA     TEMP,,AUTO
         2 002234   002756 604400 2                  TMOZ    VOLORDER

      953     9903    3            CFU$ = PINCRW( F$CFU$, TEMP ); /* Point to it                        */

   9903  2 002235   200054 236100                    LDQ     TEMP,,AUTO
         2 002236   000022 736000                    QLS     18
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:122  
         2 002237   000000 036000 xsym               ADLQ    F$CFU$
         2 002240   200005 756100                    STQ     CFU$,,AUTO

      954     9904    3            I = I - 4;

   9904  2 002241   000004 336007                    LCQ     4,DL
         2 002242   200007 056100                    ASQ     I,,AUTO

      955     9905    3            END;

   9905  2 002243   200007 235100                    LDA     I,,AUTO
         2 002244   000004 115007                    CMPA    4,DL
         2 002245   002227 605400 2                  TPNZ    s:9901

      956     9906    2         IF I = 4

   9906  2 002246   002265 601000 2                  TNZ     s:9917

      957     9907    3          THEN DO;                         /* Vol might be first of next SN CFU  */

      958     9908    3            TEMP = CFU$->FT$CFUSN.LINKX;

   9908  2 002247   200005 470500                    LDP0    CFU$,,AUTO
         2 002250   000100 101500                    MRL     fill='000'O
         2 002251   000000 400002                    ADSC9   0,,PR0                   cn=2,n=2
         2 002252   200054 000004                    ADSC9   TEMP,,AUTO               cn=0,n=4

      959     9909    3            IF TEMP > 0

   9909  2 002253   200054 236100                    LDQ     TEMP,,AUTO
         2 002254   002262 604400 2                  TMOZ    s:9914

      960     9910    4             THEN DO;                      /* Volume is first of next SN CFU     */

      961     9911    4               CFU$ = PINCRW( F$CFU$, TEMP );

   9911  2 002255   000022 736000                    QLS     18
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:123  
         2 002256   000000 036000 xsym               ADLQ    F$CFU$
         2 002257   200005 756100                    STQ     CFU$,,AUTO

      962     9912    4               I = 0;

   9912  2 002260   200007 450100                    STZ     I,,AUTO

      963     9913    4               END;

   9913  2 002261   002305 710000 2                  TRA     s:9921

      964     9914    3             ELSE SCRATCH = %YES#;         /* No next block                      */

   9914  2 002262   400000 236003                    LDQ     -131072,DU
         2 002263   200052 756100                    STQ     SCRATCH,,AUTO

      965     9915    3            END;

   9915  2 002264   002305 710000 2                  TRA     s:9921

      966     9916    3          ELSE DO;                         /* Vol might be within this SN CFU    */

      967     9917    3            IF I = CFU$->FT$CFUSN.NUM

   9917  2 002265   200005 470500                    LDP0    CFU$,,AUTO
         2 002266   000100 101500                    MRL     fill='000'O
         2 002267   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         2 002270   200070 000004                    ADSC9   @MSG+1,,AUTO             cn=0,n=4
         2 002271   200070 236100                    LDQ     @MSG+1,,AUTO
         2 002272   200007 116100                    CMPQ    I,,AUTO
         2 002273   002277 601000 2                  TNZ     s:9919

      968     9918    3             THEN SCRATCH = %YES#;         /* Next (scratch) vol specified       */

   9918  2 002274   400000 236003                    LDQ     -131072,DU
         2 002275   200052 756100                    STQ     SCRATCH,,AUTO
         2 002276   002305 710000 2                  TRA     s:9921
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:124  

      969     9919    3             ELSE IF I > CFU$->FT$CFUSN.NUM THEN GOTO VOLORDER;

   9919  2 002277   000100 101500                    MRL     fill='000'O
         2 002300   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         2 002301   200070 000004                    ADSC9   @MSG+1,,AUTO             cn=0,n=4
         2 002302   200070 236100                    LDQ     @MSG+1,,AUTO
         2 002303   200007 116100                    CMPQ    I,,AUTO
         2 002304   002756 604000 2                  TMI     VOLORDER

      970     9920    3            END;

      971     9921    2         IF NOT SCRATCH THEN F$DCB.PSN = CFU$->FT$CFUSN.SN(I);

   9921  2 002305   200052 234100                    SZN     SCRATCH,,AUTO
         2 002306   002333 604000 2                  TMI     s:9942

   9921  2 002307   200007 236100                    LDQ     I,,AUTO
         2 002310   000006 402007                    MPY     6,DL
         2 002311   200005 470500                    LDP0    CFU$,,AUTO
         2 002312   200011 471500                    LDP1    JDCB$,,AUTO
         2 002313   040100 100506                    MLR     fill='040'O
         2 002314   000001 000006                    ADSC9   1,Q,PR0                  cn=0,n=6
         2 002315   100024 000006                    ADSC9   20,,PR1                  cn=0,n=6

      972     9922    2         END;

   9922  2 002316   002333 710000 2                  TRA     s:9942

      973     9923    2       ELSE DO;                            /* No SN CFUs...only one vol          */

      974     9924    2         IF I = 1

   9924  2 002317   000001 115007                    CMPA    1,DL
         2 002320   002331 601000 2                  TNZ     s:9930

      975     9925    3          THEN DO;                         /* No SN CFU -> next vol is scratch   */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:125  

      976     9926    3            SAVPSN = F$DCB.PSN;            /* Save                               */

   9926  2 002321   040100 100500                    MLR     fill='040'O
         2 002322   300024 000006                    ADSC9   20,,PR3                  cn=0,n=6
         2 002323   200050 000006                    ADSC9   SAVPSN,,AUTO             cn=0,n=6

      977     9927    3            SCRATCH = %YES#;

   9927  2 002324   400000 236003                    LDQ     -131072,DU
         2 002325   200052 756100                    STQ     SCRATCH,,AUTO

      978     9928    3            I = 4;                         /* Indicates a new SN  CFU is needed  */

   9928  2 002326   000004 235007                    LDA     4,DL
         2 002327   200007 755100                    STA     I,,AUTO

      979     9929    3            END;

   9929  2 002330   002333 710000 2                  TRA     s:9942

      980     9930    2          ELSE IF I > 0

   9930  2 002331   000000 115003                    CMPA    0,DU
         2 002332   002756 605400 2                  TPNZ    VOLORDER

      981     9931    2             THEN GOTO VOLORDER;           /* Illegal volume                     */
      982     9932    2         END;

      983     9933
      984     9934         /***
      985     9935          *** What we have: I is index to current SN CFU or 4 indicating
      986     9936          *** a new one is needed; CFU$ points to the current SN CFU or is
      987     9937          *** ADDR(NIL) indicating the new SN CFU is the first; SCRATCH is
      988     9938          *** set if the next volume is scratch, reset if DCB.PSN contains
      989     9939          *** the next volume SN.
      990     9940          ***/
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:126  
      991     9941
      992     9942    1      IF SCRATCH

   9942  2 002333   200052 234100                    SZN     SCRATCH,,AUTO
         2 002334   002355 605000 2                  TPL     s:9952

      993     9943    2       THEN DO;                            /* Need scratch SN                    */

      994     9944    2         IF NOT F$DCB.SEZ_OK OR F$DCB.MAXVOL <= 0

   9944  2 002335   200011 470500                    LDP0    JDCB$,,AUTO
         2 002336   000064 236100                    LDQ     52,,PR0
         2 002337   000004 316003                    CANQ    4,DU
         2 002340   002344 600000 2                  TZE     s:9946
         2 002341   000043 236100                    LDQ     35,,PR0
         2 002342   000777 316003                    CANQ    511,DU
         2 002343   002350 601000 2                  TNZ     s:9949

      995     9945    3          THEN DO;          /* Scratch tape not allowed by caller or no more     */

      996     9946    3            B$JIT.ERR = E_VOLOUT; /*E* ERROR: FTR-E$VOLOUT */

   9946  2 002344   000043 236000 1                  LDQ     E_VOLOUT
         2 002345   000000 471400 xsym               LDP1    B$JIT$
         2 002346   100012 756100                    STQ     10,,PR1

      997     9947    3            ALTRETURN;

   9947  2 002347   000000 702200 xent               TSX2  ! X66_AALT

      998     9948    3            END;
      999     9949    2         F$DCB.MAXVOL = F$DCB.MAXVOL - 1;  /* Account scratch                    */

   9949  2 002350   000777 036003                    ADLQ    511,DU
         2 002351   000043 552120                    STBQ    35,'20'O,PR0

     1000     9950    2         F$DCB.PSN = ' ';
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:127  

   9950  2 002352   040100 100400                    MLR     fill='040'O
         2 002353   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 002354   000024 000006                    ADSC9   20,,PR0                  cn=0,n=6

     1001     9951    2         END;

     1002     9952    1      F$DCB.ATTR = FT_DENS(FT$DDT.DENSITY);

   9952  2 002355   200006 470500                    LDP0    DDDT$,,AUTO
         2 002356   000006 236100                    LDQ     6,,PR0
         2 002357   000010 772000                    QRL     8
         2 002360   000007 376007                    ANQ     7,DL
         2 002361   000001 736000                    QLS     1
         2 002362   200011 471500                    LDP1    JDCB$,,AUTO
         2 002363   000100 100406                    MLR     fill='000'O
         2 002364   000000 000002 xsym               ADSC9   FT_DENS,Q                cn=0,n=2
         2 002365   100040 400002                    ADSC9   32,,PR1                  cn=2,n=2

     1003     9953                                           /* Erase UR tape file attrs for Res Mgmt   */
     1004     9954                                 /* Next tape should have same density as previous    */
     1005     9955    1      SAVEXP = FT$DDT.EXPIRE;              /* Save expiration date               */

   9955  2 002366   040100 100500                    MLR     fill='040'O
         2 002367   000003 400006                    ADSC9   3,,PR0                   cn=2,n=6
         2 002370   200043 000006                    ADSC9   SAVEXP,,AUTO             cn=0,n=6

     1006     9956    1      SAVOWNR = FT$DDT.ACCT;               /* Save owner account                 */

   9956  2 002371   040100 100500                    MLR     fill='040'O
         2 002372   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         2 002373   200045 000010                    ADSC9   SAVOWNR,,AUTO            cn=0,n=8

     1007     9957    1      SAVPROT = FT$DDT.VOLACCESS;          /* Save volume protection             */

   9957  2 002374   000007 236100                    LDQ     7,,PR0
         2 002375   000003 376007                    ANQ     3,DL
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:128  
         2 002376   200047 756100                    STQ     SAVPROT,,AUTO

     1008     9958    1      J = FT$DDT.FSN;                      /* Save file sequence number          */

   9958  2 002377   000005 236100                    LDQ     5,,PR0
         2 002400   000022 772000                    QRL     18
         2 002401   200010 756100                    STQ     J,,AUTO

     1009     9959
     1010     9960         /***
     1011     9961          *** Get next tape mounted.
     1012     9962          ***/
     1013     9963
     1014     9964    1      CALL FRA$COPN ALTRET(JUSTALT);

   9964  2 002402   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002403   000000 701000 xent               TSX1    FRA$COPN
         2 002404   002761 702000 2                  TSX2    JUSTALT

     1015     9965    1      IF F$DCB.FUN=%CREATE# THEN

   9965  2 002405   200011 470500                    LDP0    JDCB$,,AUTO
         2 002406   000032 236100                    LDQ     26,,PR0
         2 002407   000777 376003                    ANQ     511,DU
         2 002410   000003 116003                    CMPQ    3,DU
         2 002411   002440 601000 2                  TNZ     s:9971

     1016     9966    2      DO CASE(F$DCB.ORG);

   9966  2 002412   000032 236100                    LDQ     26,,PR0
         2 002413   000033 772000                    QRL     27
         2 002414   000004 136007                    SBLQ    4,DL
         2 002415   000006 116007                    CMPQ    6,DL
         2 002416   002420 602006 2                  TNC     s:9966+6,QL
         2 002417   002440 710000 2                  TRA     s:9971
         2 002420   002426 710000 2                  TRA     s:9969
         2 002421   002440 710000 2                  TRA     s:9971
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:129  
         2 002422   002440 710000 2                  TRA     s:9971
         2 002423   002440 710000 2                  TRA     s:9971
         2 002424   002440 710000 2                  TRA     s:9971
         2 002425   002426 710000 2                  TRA     s:9969

     1017     9967    2       CASE(%UR#,%SYMB#);

     1018     9968                                           /* Get UR tape file attrs back into DCB    */
     1019     9969    2         F$DCB.ATTR=F$DCB.ATTR|F$DCB.FORM$->CODE16.ATTR;

   9969  2 002426   000050 471500                    LDP1    40,,PR0
         2 002427   100003 236100                    LDQ     3,,PR1
         2 002430   000022 736000                    QLS     18
         2 002431   200070 756100                    STQ     @MSG+1,,AUTO
         2 002432   000040 236100                    LDQ     32,,PR0
         2 002433   000022 736000                    QLS     18
         2 002434   200070 276100                    ORQ     @MSG+1,,AUTO
         2 002435   000022 772000                    QRL     18
         2 002436   000000 620006                    EAX0    0,QL
         2 002437   000040 440100                    SXL0    32,,PR0

     1020     9970    2       END;

     1021     9971    1      F$DCB.VOL = N;                       /* Got volume N                       */

   9971  2 002440   200003 471500                    LDP1    @N,,AUTO
         2 002441   100000 236100                    LDQ     0,,PR1
         2 002442   000033 736000                    QLS     27
         2 002443   000043 552140                    STBQ    35,'40'O,PR0

     1022     9972    1      DDDT$ = NK$LDCT$(F$DCB.SETX)->NK$LDCT.DDT$;

   9972  2 002444   000051 720100                    LXL0    41,,PR0
         2 002445   000000 473400 xsym               LDP3    N$DCT$$
         2 002446   300000 474510                    LDP4    0,X0,PR3
         2 002447   400004 236100                    LDQ     4,,PR4
         2 002450   200006 756100                    STQ     DDDT$,,AUTO
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:130  

     1023     9973    1      IF F$DCB.ACS = %JRNL#

   9973  2 002451   000036 236100                    LDQ     30,,PR0
         2 002452   000777 376007                    ANQ     511,DL
         2 002453   000004 116007                    CMPQ    4,DL
         2 002454   002461 601000 2                  TNZ     s:9975

     1024     9974    1       THEN F$DCB.CFU$->FM$CFUJ.DCTX = F$DCB.SETX;

   9974  2 002455   000066 475500                    LDP5    54,,PR0
         2 002456   000051 236100                    LDQ     41,,PR0
         2 002457   000022 736000                    QLS     18
         2 002460   500004 552120                    STBQ    4,'20'O,PR5

     1025     9975    1      FT$DDT.SN = F$DCB.PSN;               /* Set actual serial number           */

   9975  2 002461   200006 474500                    LDP4    DDDT$,,AUTO
         2 002462   040100 100500                    MLR     fill='040'O
         2 002463   000024 000006                    ADSC9   20,,PR0                  cn=0,n=6
         2 002464   400002 000006                    ADSC9   2,,PR4                   cn=0,n=6

     1026     9976    1      CALL FTR$SETSN(F$DCB.VOL+0,ADDR(F$DCB.PSN)) ALTRET(NEVER1);

   9976  2 002465   200011 236100                    LDQ     JDCB$,,AUTO
         2 002466   000024 036003                    ADLQ    20,DU
         2 002467   200070 756100                    STQ     @MSG+1,,AUTO
         2 002470   200070 635500                    EPPR5   @MSG+1,,AUTO
         2 002471   200073 455500                    STP5    @MSG+4,,AUTO
         2 002472   200011 236100                    LDQ     JDCB$,,AUTO
         2 002473   000043 036003                    ADLQ    35,DU
         2 002474   200072 756100                    STQ     @MSG+3,,AUTO
         2 002475   200072 630500                    EPPR0   @MSG+3,,AUTO
         2 002476   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 002477   000064 701000 2                  TSX1    s:9230
         2 002500   002501 702000 2                  TSX2    NEVER1

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:131  
   9975  2 002501                       NEVER1       null
     1027     9977    1   NEVER1: ;
     1028     9978    1      IF REWIND AND F$DCB.IASN ~= %OD#

   9978  2 002501   200014 234100                    SZN     REWIND,,AUTO
         2 002502   002524 605000 2                  TPL     s:9987
         2 002503   200011 470500                    LDP0    JDCB$,,AUTO
         2 002504   000103 236100                    LDQ     67,,PR0
         2 002505   000777 376007                    ANQ     511,DL
         2 002506   000012 116007                    CMPQ    10,DL
         2 002507   002524 600000 2                  TZE     s:9987

     1029     9979    2       THEN DO;

     1030     9980    2         IF FT$DDT.FMNEEDED

   9980  2 002510   200006 471500                    LDP1    DDDT$,,AUTO
         2 002511   100006 236100                    LDQ     6,,PR1
         2 002512   000200 316007                    CANQ    128,DL
         2 002513   002521 600000 2                  TZE     s:9985

     1031     9981    3          THEN DO;

     1032     9982    3            FT$DDT.FMNEEDED = %NO#;

   9982  2 002514   000045 236000 3                  LDQ     37
         2 002515   100006 356100                    ANSQ    6,,PR1

     1033     9983    3            CALL FTI$WRFM ALTRET(JUSTALT);

   9983  2 002516   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002517   000000 701000 xent               TSX1    FTI$WRFM
         2 002520   002761 702000 2                  TSX2    JUSTALT

     1034     9984    3            END;

     1035     9985    2         CALL FTI$REWIND ALTRET(JUSTALT);
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:132  

   9985  2 002521   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002522   000000 701000 xent               TSX1    FTI$REWIND
         2 002523   002761 702000 2                  TSX2    JUSTALT

     1036     9986    2         END;

     1037     9987    1      IF FT$DDT.SCRTCH OR F$DCB.ASN = %DEVICE# OR NOT FT$DDT.ANST

   9987  2 002524   200006 470500                    LDP0    DDDT$,,AUTO
         2 002525   000006 236100                    LDQ     6,,PR0
         2 002526   200000 316007                    CANQ    65536,DL
         2 002527   002545 601000 2                  TNZ     s:9990
         2 002530   200011 471500                    LDP1    JDCB$,,AUTO
         2 002531   100032 236100                    LDQ     26,,PR1
         2 002532   777000 376007                    ANQ     -512,DL
         2 002533   003000 116007                    CMPQ    1536,DL
         2 002534   002545 600000 2                  TZE     s:9990
         2 002535   000006 236100                    LDQ     6,,PR0
         2 002536   400000 316007                    CANQ    -131072,DL
         2 002537   002545 600000 2                  TZE     s:9990
         2 002540   100064 236100                    LDQ     52,,PR1
         2 002541   400000 316007                    CANQ    -131072,DL
         2 002542   002552 600000 2                  TZE     s:9993
         2 002543   200014 234100                    SZN     REWIND,,AUTO
         2 002544   002552 605000 2                  TPL     s:9993

     1038     9988    1        OR (F$DCB.NOEOF AND REWIND)
     1039     9989    2       THEN DO;                            /* Assume CVOL                        */

     1040     9990    2         FT$DDT.FSN = J;

   9990  2 002545   200010 720100                    LXL0    J,,AUTO
         2 002546   000005 740100                    STX0    5,,PR0

     1041     9991    2         FT$DDT.FRSTFSN = J-1;

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:133  
   9991  2 002547   777777 621010                    EAX1    -1,X0
         2 002550   000005 441100                    SXL1    5,,PR0

     1042     9992    2         END;

   9992  2 002551   002566 710000 2                  TRA     s:9997

     1043     9993    2       ELSE IF F$DCB.IASN ~= %OD# THEN DO;

   9993  2 002552   100103 236100                    LDQ     67,,PR1
         2 002553   000777 376007                    ANQ     511,DL
         2 002554   000012 116007                    CMPQ    10,DL
         2 002555   002566 600000 2                  TZE     s:9997

     1044     9994    2            CALL FTL$GETFSN ALTRET(JUSTALT); /* Get sequence number              */

   9994  2 002556   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002557   000000 701000 xent               TSX1    FTL$GETFSN
         2 002560   002761 702000 2                  TSX2    JUSTALT

     1045     9995    2            IF REWIND THEN CALL FTI$REWIND ALTRET(JUSTALT);

   9995  2 002561   200014 234100                    SZN     REWIND,,AUTO
         2 002562   002566 605000 2                  TPL     s:9997

   9995  2 002563   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002564   000000 701000 xent               TSX1    FTI$REWIND
         2 002565   002761 702000 2                  TSX2    JUSTALT

     1046     9996    2            END;

     1047     9997    1      IF F$DCB.IASN ~= %OD# THEN

   9997  2 002566   200011 470500                    LDP0    JDCB$,,AUTO
         2 002567   000103 236100                    LDQ     67,,PR0
         2 002570   000777 376007                    ANQ     511,DL
         2 002571   000012 116007                    CMPQ    10,DL
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:134  
         2 002572   002576 600000 2                  TZE     s:10007

     1048     9998    1         CALL FTR$DPT ALTRET(JUSTALT);     /* Check/set density, prot, type      */

   9998  2 002573   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 002574   000424 701000 2                  TSX1    s:9370
         2 002575   002761 702000 2                  TSX2    JUSTALT

     1049     9999
     1050    10000         /***
     1051    10001          *** If expiration date from previous tape is blank, it was probably
     1052    10002          *** the first volume of a PO tape in which case we'll use the
     1053    10003          *** expiration date of the second volume.  For output CVOL, always
     1054    10004          *** use expiration date of first volume.
     1055    10005          ***/
     1056    10006
     1057    10007    1      IF SAVEXP ~= ' ' OR F$DCB.NOEOF

  10007  2 002576   040000 106500                    CMPC    fill='040'O
         2 002577   200043 000006                    ADSC9   SAVEXP,,AUTO             cn=0,n=6
         2 002600   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 002601   002606 601000 2                  TNZ     s:10009
         2 002602   200011 470500                    LDP0    JDCB$,,AUTO
         2 002603   000064 236100                    LDQ     52,,PR0
         2 002604   400000 316007                    CANQ    -131072,DL
         2 002605   002621 600000 2                  TZE     s:10013

     1058    10008    2       THEN DO;

     1059    10009    2         FT$DDT.EXPIRE = SAVEXP;           /* Same expiration date               */

  10009  2 002606   200006 470500                    LDP0    DDDT$,,AUTO
         2 002607   040100 100500                    MLR     fill='040'O
         2 002610   200043 000006                    ADSC9   SAVEXP,,AUTO             cn=0,n=6
         2 002611   000003 400006                    ADSC9   3,,PR0                   cn=2,n=6

     1060    10010    2         FT$DDT.ACCT = SAVOWNR;            /* Same owner                         */
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:135  

  10010  2 002612   040100 100500                    MLR     fill='040'O
         2 002613   200045 000010                    ADSC9   SAVOWNR,,AUTO            cn=0,n=8
         2 002614   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

     1061    10011    2         FT$DDT.VOLACCESS = SAVPROT;       /* Same protection                    */

  10011  2 002615   200047 236100                    LDQ     SAVPROT,,AUTO
         2 002616   000007 676100                    ERQ     7,,PR0
         2 002617   000003 376007                    ANQ     3,DL
         2 002620   000007 656100                    ERSQ    7,,PR0

     1062    10012    2         END;

     1063    10013    1      IF F$DCB.NOEOF AND REWIND

  10013  2 002621   200011 470500                    LDP0    JDCB$,,AUTO
         2 002622   000064 236100                    LDQ     52,,PR0
         2 002623   400000 316007                    CANQ    -131072,DL
         2 002624   002634 600000 2                  TZE     s:10020
         2 002625   200014 234100                    SZN     REWIND,,AUTO
         2 002626   002634 605000 2                  TPL     s:10020

     1064    10014    1       THEN FT$DDT.EBCDIC = F$DCB.EBCDIC;  /* Output CVOL...change tape type     */

  10014  2 002627   200006 471500                    LDP1    DDDT$,,AUTO
         2 002630   000031 236100                    LDQ     25,,PR0
         2 002631   100006 676100                    ERQ     6,,PR1
         2 002632   100000 376007                    ANQ     32768,DL
         2 002633   100006 656100                    ERSQ    6,,PR1

     1065    10015
     1066    10016         /***
     1067    10017          *** If a scratch tape was mounted, add the actual SN to the SN CFU.
     1068    10018          ***/
     1069    10019
     1070    10020    1      IF SCRATCH
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:136  

  10020  2 002634   200052 234100                    SZN     SCRATCH,,AUTO
         2 002635   002742 605000 2                  TPL     s:10046

     1071    10021    2       THEN DO;                            /* A scratch tape was mounted         */

     1072    10022    2         IF I = 4

  10022  2 002636   200007 235100                    LDA     I,,AUTO
         2 002637   000004 115007                    CMPA    4,DL
         2 002640   002710 601000 2                  TNZ     s:10039

     1073    10023    3          THEN DO;                         /* Need another SN CFU for next SN    */

     1074    10024    3            CALL FMR$G8(TEMP$,TEMP) ALTRET(NOCFUS);

  10024  2 002641   200054 631500                    EPPR1   TEMP,,AUTO
         2 002642   200071 451500                    STP1    @MSG+2,,AUTO
         2 002643   200053 633500                    EPPR3   TEMP$,,AUTO
         2 002644   200070 453500                    STP3    @MSG+1,,AUTO
         2 002645   200070 630500                    EPPR0   @MSG+1,,AUTO
         2 002646   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 002647   000000 701000 xent               TSX1    FMR$G8
         2 002650   002752 702000 2                  TSX2    NOCFUS

     1075    10025    3            IF CFU$ = ADDR(NIL)

  10025  2 002651   200005 236100                    LDQ     CFU$,,AUTO
         2 002652   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002653   002702 601000 2                  TNZ     s:10035

     1076    10026    4             THEN DO;                      /* DCB's first SN CFU                 */

     1077    10027    4               IF F$DCB.ACS = %JRNL#

  10027  2 002654   200011 470500                    LDP0    JDCB$,,AUTO
         2 002655   000036 236100                    LDQ     30,,PR0
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:137  
         2 002656   000777 376007                    ANQ     511,DL
         2 002657   000004 116007                    CMPQ    4,DL
         2 002660   002665 601000 2                  TNZ     s:10029

     1078    10028    4                THEN F$DCB.CFU$->FM$CFUJ.SNLINKX = TEMP;

  10028  2 002661   000066 471500                    LDP1    54,,PR0
         2 002662   200054 720100                    LXL0    TEMP,,AUTO
         2 002663   100006 440100                    SXL0    6,,PR1
         2 002664   002667 710000 2                  TRA     s:10030

     1079    10029    4                ELSE F$DCB.CFU$ = TEMP$;

  10029  2 002665   200053 236100                    LDQ     TEMP$,,AUTO
         2 002666   000066 756100                    STQ     54,,PR0

     1080    10030    4               TEMP$->FT$CFUSN.NUM = 1;

  10030  2 002667   200053 471500                    LDP1    TEMP$,,AUTO
         2 002670   000100 101400                    MRL     fill='000'O
         2 002671   000003 000004 xsym               ADSC9   B_VECTNIL+3              cn=0,n=4
         2 002672   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

     1081    10031    4               TEMP$->FT$CFUSN.SN(0) = SAVPSN;

  10031  2 002673   200053 471500                    LDP1    TEMP$,,AUTO
         2 002674   040100 100500                    MLR     fill='040'O
         2 002675   200050 000006                    ADSC9   SAVPSN,,AUTO             cn=0,n=6
         2 002676   100001 000006                    ADSC9   1,,PR1                   cn=0,n=6

     1082    10032    4               I = 1;

  10032  2 002677   000001 235007                    LDA     1,DL
         2 002700   200007 755100                    STA     I,,AUTO

     1083    10033    4               END;

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:138  
  10033  2 002701   002712 710000 2                  TRA     s:10040

     1084    10034    4             ELSE DO;                      /* Link to last in list               */

     1085    10035    4               CFU$->FT$CFUSN.LINKX = TEMP;

  10035  2 002702   200005 470500                    LDP0    CFU$,,AUTO
         2 002703   000100 101500                    MRL     fill='000'O
         2 002704   200054 000004                    ADSC9   TEMP,,AUTO               cn=0,n=4
         2 002705   000000 400002                    ADSC9   0,,PR0                   cn=2,n=2

     1086    10036    4               I = 0;

  10036  2 002706   200007 450100                    STZ     I,,AUTO

     1087    10037    4               END;

     1088    10038    3            END;

  10038  2 002707   002712 710000 2                  TRA     s:10040

     1089    10039    2          ELSE TEMP$ = CFU$;               /* Already had last SN CFU            */

  10039  2 002710   200005 236100                    LDQ     CFU$,,AUTO
         2 002711   200053 756100                    STQ     TEMP$,,AUTO

     1090    10040    2         TEMP$->FT$CFUSN.NUM = I + 1;      /* Number of SNs                      */

  10040  2 002712   200007 236100                    LDQ     I,,AUTO
         2 002713   000001 036007                    ADLQ    1,DL
         2 002714   200070 756100                    STQ     @MSG+1,,AUTO
         2 002715   200053 470500                    LDP0    TEMP$,,AUTO
         2 002716   000100 101500                    MRL     fill='000'O
         2 002717   200070 000004                    ADSC9   @MSG+1,,AUTO             cn=0,n=4
         2 002720   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

     1091    10041    2         TEMP$->FT$CFUSN.SN(I) = F$DCB.PSN;
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:139  

  10041  2 002721   200007 236100                    LDQ     I,,AUTO
         2 002722   000006 402007                    MPY     6,DL
         2 002723   200011 470500                    LDP0    JDCB$,,AUTO
         2 002724   200053 471500                    LDP1    TEMP$,,AUTO
         2 002725   040106 100500                    MLR     fill='040'O
         2 002726   000024 000006                    ADSC9   20,,PR0                  cn=0,n=6
         2 002727   100001 000006                    ADSC9   1,Q,PR1                  cn=0,n=6

     1092    10042    2         TEMP$->FT$CFUSN.SYSID = B$JIT.SYSID; /* Remember user info              */

  10042  2 002730   000000 471400 xsym               LDP1    B$JIT$
         2 002731   200053 473500                    LDP3    TEMP$,,AUTO
         2 002732   000100 100500                    MLR     fill='000'O
         2 002733   100000 400002                    ADSC9   0,,PR1                   cn=2,n=2
         2 002734   300007 000002                    ADSC9   7,,PR3                   cn=0,n=2

     1093    10043    2         TEMP$->FT$CFUSN.DCBX = JDCB.DCBX;

  10043  2 002735   200053 473500                    LDP3    TEMP$,,AUTO
         2 002736   000100 100500                    MLR     fill='000'O
         2 002737   200011 000002                    ADSC9   JDCB$,,AUTO              cn=0,n=2
         2 002740   300007 400002                    ADSC9   7,,PR3                   cn=2,n=2

     1094    10044    2         END;

  10044  2 002741   002751 710000 2                  TRA     s:10054

     1095    10045    2       ELSE DO;                            /* Non-scratch mount                  */

     1096    10046    2         IF FT$DDT.SCRTCH AND NOT F$DCB.SEZ_OK THEN GOTO VOLORDER;

  10046  2 002742   200006 471500                    LDP1    DDDT$,,AUTO
         2 002743   100006 236100                    LDQ     6,,PR1
         2 002744   200000 316007                    CANQ    65536,DL
         2 002745   002751 600000 2                  TZE     s:10054
         2 002746   000064 236100                    LDQ     52,,PR0
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:140  
         2 002747   000004 316003                    CANQ    4,DU
         2 002750   002756 600000 2                  TZE     VOLORDER

     1097    10047                                                /* Scratch tapes weren't allowed      */
     1098    10048    2         END;

     1099    10049
     1100    10050         /***
     1101    10051          *** Next volume is mounted...all's well.
     1102    10052          ***/
     1103    10053
     1104    10054    1      RETURN;

  10054  2 002751   000000 702200 xent               TSX2  ! X66_ARET

  10045  2 002752                       NOCFUS       null
     1105    10055
     1106    10056    1   NOCFUS: ;
     1107    10057    1      B$JIT.ERR = E_NOCFUS; /*E* ERROR: FTR-E$NOCFUS */

  10057  2 002752   000031 236000 1                  LDQ     E_NOCFUS
         2 002753   000000 470400 xsym               LDP0    B$JIT$
         2 002754   000012 756100                    STQ     10,,PR0

     1108    10058    1      ALTRETURN;

  10058  2 002755   000000 702200 xent               TSX2  ! X66_AALT

  10057  2 002756                       VOLORDER     null
     1109    10059
     1110    10060    1   VOLORDER: ;
     1111    10061    1      B$JIT.ERR = E_VOLORDER; /*E* ERROR: FTR-E$VOLORDER */

  10061  2 002756   000042 236000 1                  LDQ     E_VOLORDER
         2 002757   000000 470400 xsym               LDP0    B$JIT$
         2 002760   000012 756100                    STQ     10,,PR0

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:141  
  10061  2 002761                       JUSTALT      null
     1112    10062
     1113    10063    1   JUSTALT: ;
     1114    10064    1      ALTRETURN;

  10064  2 002761   000000 702200 xent               TSX2  ! X66_AALT

FT_TAPETYPECHK
 Sect OctLoc
   1     000   000000 000000                                                    ....

FT_RINGBOTONLY
 Sect OctLoc
   1     001   000000 000000                                                    ....

ROMSG
 Sect OctLoc
   1     002   000003 777640   000012 006000   000000 177640   000000 006014    ................
   1     006   000010 777640   000016 006000   000000 177640   000000 006014    ................
   1     012   000000 400400   000000 000000   000000 000000   100000 000000    ............@...

ROMSGMSG
 Sect OctLoc
   1     016   037056 056056   130130 130130   040153 145171   151156 040160    ....XXXX keyin p
   1     022   145156 144151   156147 040146   157162 040130   130043 130130    ending for XX#XX
   1     026   130130 130130                                                    XXXX

E_TAPBRK
 Sect OctLoc
   1     027   062422 413162                                                    2..r

E_DENSBAD
 Sect OctLoc
   1     030   062422 413322                                                    2...

E_NOCFUS
 Sect OctLoc
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:142  
   1     031   062422 401572                                                    2...

E_NORING
 Sect OctLoc
   1     032   062422 413072                                                    2..:

E_NOTANS
 Sect OctLoc
   1     033   062422 413432                                                    2...

E_NOTDEV
 Sect OctLoc
   1     034   062422 413442                                                    2...

E_NOTOWNR
 Sect OctLoc
   1     035   062422 413502                                                    2...

E_NOTOWNRW
 Sect OctLoc
   1     036   062422 413512                                                    2...

E_OPROT
 Sect OctLoc
   1     037   062422 413462                                                    2...

E_PROT
 Sect OctLoc
   1     040   062422 400172                                                    2..z

E_UNEXPIRED
 Sect OctLoc
   1     041   062422 413452                                                    2...

E_VOLORDER
 Sect OctLoc
   1     042   062422 413302                                                    2...
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:143  

E_VOLOUT
 Sect OctLoc
   1     043   062422 413272                                                    2...

(unnamed)
 Sect OctLoc
   1     044   100000 000000   200000 000000   020000 000000   117126 105122    @...........OVER
   1     050   122111 116107                                                    RING

(unnamed)
 Sect OctLoc
   3     000   707777 777777   077777 777777   777777 577777   777777 777775    ....?...........
   3     004   777776 777777   777777 777763   777775 777777   777777 777770    ................
   3     010   000047 006000   100000 000000   000000 000373   006001 000000    .'..@...........
   3     014   000004 006000   000013 006000   000011 006000   000012 006000    ................
   3     020   000000 000031   000000 000170   000021 006000   000020 006000    .......x........
   3     024   777777 767777   777777 377777   000000 000375   006000 000000    ................
   3     030   000003 006000   000027 006000   000011 006000   000026 006000    ................
   3     034   000003 777640   000010 777640   000050 006000   000000 000372    .........(......
   3     040   000011 006000   000037 006000   777777 777617   777777 777767    ................
   3     044   000000 000374   777777 777577   000011 006000   000044 006000    .............$..
     1115    10065    1   END FTR$ROUTINE;
     1116    10066        /*********************************************************************/

PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:144  
--  Include file information  --

   SS_SCHED_C.:E05TOU  is referenced.
   OC_SUBS_C.:E05TOU  is referenced.
   NK_VFC_C.:E05TOU  is referenced.
   NK_LDCT_R.:E05TOU  cannot be made into a system file and is referenced.
   NK$LDCT.:E05TOU  is referenced.
   FT_SUBS.:E05TOU  is referenced.
   FT$DDT.:E05TOU  is referenced.
   FR_SUBS.:E05TOU  is referenced.
   FM$FIT.:E05TOU  is referenced.
   FM$CFU.:E05TOU  is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  is referenced.
   F$DCB.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FTR$ROUTINE.
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:145  

 **** Variables and constants ****

  ****  Section 001 RoData FTR$ROUTINE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    30-0-0/b STRC        r     1 E_DENSBAD                 31-0-0/b STRC        r     1 E_NOCFUS
    32-0-0/b STRC        r     1 E_NORING                  33-0-0/b STRC        r     1 E_NOTANS
    34-0-0/b STRC        r     1 E_NOTDEV                  35-0-0/b STRC        r     1 E_NOTOWNR
    36-0-0/b STRC        r     1 E_NOTOWNRW                37-0-0/b STRC        r     1 E_OPROT
    40-0-0/b STRC        r     1 E_PROT                    27-0-0/b STRC        r     1 E_TAPBRK
    41-0-0/b STRC        r     1 E_UNEXPIRED               42-0-0/b STRC        r     1 E_VOLORDER
    43-0-0/b STRC        r     1 E_VOLOUT                   1-0-0/w SBIN        r     1 FT_RINGBOTONLY
     0-0-0/w SBIN        r     1 FT_TAPETYPECHK             2-0-0/d STRC(432)   r     1 ROMSG
    16-0-0/c STRC(324)   r     1 ROMSGMSG

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    67-0-0/w PTR         r     1 @MSG                       3-0-0/w PTR         r     1 @N
     4-0-0/w PTR         r     1 @P$                        5-0-0/w PTR         r     1 CFU$
     6-0-0/w PTR         r     1 DDDT$                      7-0-0/w SBIN        r     1 I
    10-0-0/w SBIN        r     1 J                         11-0-0/w STRC        r     1 JDCB
    11-0-0/w PTR         r     1 JDCB$                     *0-0-0/c CHAR(4)     r     1 MSG
    12-0-0/w STRC(63)    r     1 MSGS                      *0-0-0/w SBIN        r     1 N
    *0-0-0/w PTR         r     1 P$                        57-0-0/b BIT         r     1 POS_KNOWN
    14-0-0/w BIT         r     1 REWIND                    16-0-0/d STRC(432)   r     1 ROMSGAUTO
    32-0-0/c STRC(324)   r     1 ROMSGMSGAUTO              65-0-0/w SBIN        r     1 SAVDEVICE
    63-0-0/b BIT         r     1 SAVEBCDIC                 43-0-0/w CHAR(6)     r     1 SAVEXP
    62-0-0/w SBIN        r     1 SAVFMCNT                  61-0-0/w SBIN        r     1 SAVFRSTFSN
    60-0-0/w SBIN        r     1 SAVFSN                    45-0-0/w CHAR(8)     r     1 SAVOWNR
    64-0-0/w SBIN        r     1 SAVPOS                    47-0-0/w SBIN        r     1 SAVPROT
    50-0-0/w CHAR(6)     r     1 SAVPSN                    52-0-0/w BIT         r     1 SCRATCH
    54-0-0/w SBIN        r     1 TEMP                      53-0-0/w PTR         r     1 TEMP$
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:146  

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 F$CFU$
     0-0-0/b BIT (18)    r     1 FT_DENS(0:5)
     0-0-0/w SBIN        r     1 FT_PROT                    0-0-0/w PTR         r     1 N$DCT$$
     0-0-0/w PTR         r     1 S$CU$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/d STRC(576)   r     1 B$U
     0-0-0/w STRC(1404)  r     1 CODE16                     0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/w STRC(288)   r     1 FM$CFUJ                    0-0-0/c STRC(288)   r     1 FT$CFUSN
     0-0-0/w STRC(288)   r     1 FT$DDT                     0-0-0N  NULL        r     1 M$UC
     0-0-0/d STRC(864)   r     1 NK$LDCT
     0-0-0/w PTR         r     1 NK$LDCT$(0:0)
     0-0-0/c CHAR(6)     r     1 THESN


   Procedure FTR$ROUTINE requires 1522 words for executable code.
   Procedure FTR$ROUTINE requires 62 words of local(AUTO) storage.

    No errors detected in file FTR$ROUTINE.:E05TSI    .
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:147  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:148  
          MINI XREF LISTING

B$DO.ECCINFO
       166**DCL       167--REDEF
B$JIT.ACCN
      6755**DCL      9461>>IF
B$JIT.DCB$
      6845**DCL      9200>>ASSIGN   9242>>ASSIGN   9287>>ASSIGN   9308>>IF       9309>>ASSIGN   9310>>ASSIGN
      9326>>ASSIGN   9357>>ASSIGN   9396>>ASSIGN   9679<<ASSIGN   9876>>ASSIGN
B$JIT.ERR
      6755**DCL      9407<<ASSIGN   9414<<ASSIGN   9423<<ASSIGN   9442<<ASSIGN   9448<<ASSIGN   9469<<ASSIGN
      9475<<ASSIGN   9500<<ASSIGN   9516<<ASSIGN   9552<<ASSIGN   9589<<ASSIGN   9596<<ASSIGN   9610<<ASSIGN
      9650<<ASSIGN   9724<<ASSIGN   9738<<ASSIGN   9847<<ASSIGN   9946<<ASSIGN  10057<<ASSIGN  10061<<ASSIGN
B$JIT.ERR.MID
      6756**DCL      6756--REDEF
B$JIT.MODE
      6750**DCL      9669>>IF
B$JIT.PRIV.ACTIVE
      6756**DCL      9401>>IF       9420>>IF       9437>>IF       9459>>IF       9466>>IF       9530>>IF
B$JIT.SYSID
      6755**DCL     10042>>ASSIGN
B$JIT$
      8876**DCL      6750--IMP-PTR  9200>>ASSIGN   9242>>ASSIGN   9287>>ASSIGN   9308>>IF       9309>>ASSIGN
      9310>>ASSIGN   9326>>ASSIGN   9357>>ASSIGN   9396>>ASSIGN   9401>>IF       9407>>ASSIGN   9414>>ASSIGN
      9420>>IF       9423>>ASSIGN   9437>>IF       9442>>ASSIGN   9448>>ASSIGN   9459>>IF       9461>>IF
      9466>>IF       9469>>ASSIGN   9475>>ASSIGN   9500>>ASSIGN   9516>>ASSIGN   9530>>IF       9552>>ASSIGN
      9589>>ASSIGN   9596>>ASSIGN   9610>>ASSIGN   9650>>ASSIGN   9669>>IF       9679>>ASSIGN   9724>>ASSIGN
      9738>>ASSIGN   9847>>ASSIGN   9876>>ASSIGN   9946>>ASSIGN  10042>>ASSIGN  10057>>ASSIGN  10061>>ASSIGN
B$U.FLG.ANNCE
        61**DCL      9669>>IF
B$U.MISC
       145**DCL       146--REDEF
B$USER.MISC
       221**DCL       222--REDEF
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:149  
CFU$
      8890**DCL      9247<<ASSIGN   9248<<ASSIGN   9250<<ASSIGN   9251>>IF       9261>>ASSIGN   9263<<ASSIGN
      9266>>IF       9268>>ASSIGN   9269>>ASSIGN   9288<<ASSIGN   9293>>ASSIGN   9295<<ASSIGN   9297>>IF
      9304>>ASSIGN   9305<>CALL     9313<<ASSIGN   9327<<ASSIGN   9331>>ASSIGN   9334>>ASSIGN   9336>>ASSIGN
      9341>>ASSIGN   9342>>ASSIGN   9343>>ASSIGN   9358<<ASSIGN   9360>>ASSIGN   9361>>ASSIGN   9362>>ASSIGN
      9363>>ASSIGN   9364>>ASSIGN   9889<<ASSIGN   9890<<ASSIGN   9892<<ASSIGN   9898>>IF       9901>>ASSIGN
      9903<<ASSIGN   9908>>ASSIGN   9911<<ASSIGN   9917>>IF       9919>>IF       9921>>ASSIGN  10025>>IF
     10035>>ASSIGN  10039>>ASSIGN
CHNGVOL
      9860**LABEL    9858--GOTO
CODE16.ATTR
      7373**DCL      9969>>ASSIGN
DDDT$
      8891**DCL      7519--IMP-PTR  9397<<ASSIGN   9400>>IF       9411>>IF       9433>>IF       9433>>IF
      9433>>IF       9440>>IF       9459>>IF       9461>>IF       9461>>IF       9464>>DOCASE   9485>>IF
      9485>>IF       9485>>IF       9485>>IF       9507>>ASSIGN   9509>>DOWHILE  9513>>IF       9515>>ASSIGN
      9530>>IF       9530>>IF       9530>>IF       9530>>IF       9530>>IF       9530>>IF       9539>>IF
      9543>>ASSIGN   9545>>DOWHILE  9549>>IF       9551>>ASSIGN   9572>>IF       9572>>IF       9600>>IF
      9614>>IF       9617>>ASSIGN   9618>>ASSIGN   9622>>ASSIGN   9632>>IF       9634>>ASSIGN   9635>>ASSIGN
      9640>>IF       9641>>ASSIGN   9647>>ASSIGN   9709>>IF       9710>>IF       9721>>DOWHILE  9722>>IF
      9729>>ASSIGN   9731>>DOWHILE  9735>>IF       9737>>ASSIGN   9742>>ASSIGN   9746>>ASSIGN   9747>>ASSIGN
      9753>>ASSIGN   9754>>ASSIGN   9755>>ASSIGN   9756>>ASSIGN   9781<<ASSIGN   9782>>ASSIGN   9799>>ASSIGN
      9800>>ASSIGN   9801>>ASSIGN   9814>>ASSIGN   9825>>ASSIGN   9829>>ASSIGN   9830>>ASSIGN   9831>>ASSIGN
      9832>>ASSIGN   9838>>ASSIGN   9839>>ASSIGN   9840>>ASSIGN   9844>>ASSIGN   9877<<ASSIGN   9952>>ASSIGN
      9955>>ASSIGN   9956>>ASSIGN   9957>>ASSIGN   9958>>ASSIGN   9972<<ASSIGN   9975>>ASSIGN   9980>>IF
      9982>>ASSIGN   9987>>IF       9987>>IF       9990>>ASSIGN   9991>>ASSIGN  10009>>ASSIGN  10010>>ASSIGN
     10011>>ASSIGN  10014>>ASSIGN  10046>>IF
E_DENSBAD
      9021**DCL      9589>>ASSIGN   9596>>ASSIGN   9610>>ASSIGN
E_NOCFUS
      9035**DCL     10057>>ASSIGN
E_NORING
      9047**DCL      9738>>ASSIGN
E_NOTANS
      9061**DCL      9442>>ASSIGN   9448>>ASSIGN
E_NOTDEV
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:150  
      9074**DCL      9407>>ASSIGN   9414>>ASSIGN   9423>>ASSIGN
E_NOTOWNR
      9088**DCL      9469>>ASSIGN
E_NOTOWNRW
      9102**DCL      9475>>ASSIGN
E_OPROT
      9117**DCL      9516>>ASSIGN   9552>>ASSIGN
E_PROT
      9132**DCL      9724>>ASSIGN
E_TAPBRK
      9007**DCL      9650>>ASSIGN   9847>>ASSIGN
E_UNEXPIRED
      9147**DCL      9500>>ASSIGN
E_VOLORDER
      9162**DCL     10061>>ASSIGN
E_VOLOUT
      9177**DCL      9946>>ASSIGN
F$CFU$
      8877**DCL      9248>>ASSIGN   9263>>ASSIGN   9295>>ASSIGN   9313>>ASSIGN   9890>>ASSIGN   9903>>ASSIGN
      9911>>ASSIGN
F$DCB.ACS
      6403**DCL      9208>>IF       9243>>IF       9289>>IF       9308>>IF       9885>>IF       9973>>IF
     10027>>IF
F$DCB.ACTPOS
      6411**DCL      6411--REDEF
F$DCB.AFTRBLK
      6418**DCL      9335<<ASSIGN
F$DCB.ARS
      6386**DCL      6386--REDEF    9760<<ASSIGN   9762>>ASSIGN   9771<<ASSIGN   9773>>ASSIGN   9795<<ASSIGN
      9797<<ASSIGN   9808<<ASSIGN   9810>>ASSIGN   9812<<ASSIGN   9819<<ASSIGN   9821>>ASSIGN   9823<<ASSIGN
F$DCB.ASN
      6401**DCL      9399>>IF       9491>>IF       9530>>IF       9530>>IF       9614>>IF       9630>>IF
      9743>>ASSIGN   9794>>IF       9987>>IF
F$DCB.ATTR
      6404**DCL      6405--REDEF    9580>>IF       9594>>IF       9952<<ASSIGN   9969<<ASSIGN   9969>>ASSIGN
F$DCB.BFR.BUFX
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:151  
      6431**DCL      9202>>IF
F$DCB.BLKLEN
      6424**DCL      9336<<ASSIGN   9363>>ASSIGN
F$DCB.BORROW
      6419**DCL      6419--REDEF    6419--REDEF    6419--REDEF
F$DCB.CBUFNUM
      6422**DCL      9214<<ASSIGN   9338<<ASSIGN
F$DCB.CFU$
      6420**DCL      9245>>ASSIGN   9250>>ASSIGN   9288>>ASSIGN   9309>>ASSIGN   9310<<ASSIGN   9327>>ASSIGN
      9358>>ASSIGN   9887>>ASSIGN   9892>>ASSIGN   9974>>ASSIGN  10028>>ASSIGN  10029<<ASSIGN
F$DCB.CNVRT
      6398**DCL      9329<<ASSIGN
F$DCB.CRECNO
      6423**DCL      9333<<ASSIGN
F$DCB.CRECX
      6422**DCL      9331<<ASSIGN
F$DCB.DCBNAME.L
      6433**DCL      6433--IMP-SIZ
F$DCB.DENSITY
      6406**DCL      9576>>IF       9582<<ASSIGN   9594>>IF       9600>>IF       9602>>DOCASE   9622<<ASSIGN
F$DCB.EBCDIC
      6398**DCL     10014>>ASSIGN
F$DCB.EOMCHAR
      6390**DCL      6390--REDEF
F$DCB.FLDID
      6414**DCL      6414--REDEF
F$DCB.FORM$
      6408**DCL      6408--REDEF    9969>>ASSIGN
F$DCB.FSECT
      6424**DCL      6424--REDEF
F$DCB.FSN
      6401**DCL      6401--REDEF    6401--REDEF    6402--REDEF
F$DCB.FUN
      6400**DCL      9466>>IF       9485>>IF       9561>>IF       9632>>IF       9640>>IF       9965>>IF
F$DCB.HEADER$
      6407**DCL      6407--REDEF
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:152  
F$DCB.IASN
      6427**DCL      9572>>IF       9978>>IF       9993>>IF       9997>>IF
F$DCB.IXTNSIZE
      6405**DCL      6405--REDEF
F$DCB.LASTSTA$
      6395**DCL      6395--REDEF
F$DCB.LPOOL
      6420**DCL      9213<<ASSIGN
F$DCB.LVL
      6420**DCL      6420--REDEF
F$DCB.MAXVOL
      6406**DCL      9342<<ASSIGN   9361>>ASSIGN   9944>>IF       9949<<ASSIGN   9949>>ASSIGN
F$DCB.MUST_CVOL
      6416**DCL      9340<<ASSIGN
F$DCB.NAME.C
      6395**DCL      6395--REDEF
F$DCB.NEW_FSECT
      6416**DCL      9337<<ASSIGN
F$DCB.NOEOF
      6416**DCL      6416--REDEF    9404>>IF       9436>>IF       9473>>IF       9485>>IF       9572>>IF
      9614>>IF       9987>>IF      10007>>IF      10013>>IF
F$DCB.NRECS
      6406**DCL      6406--REDEF
F$DCB.NRECX
      6425**DCL      6425--REDEF    9332<<ASSIGN
F$DCB.OHDR
      6417**DCL      6417--REDEF
F$DCB.ORG
      6400**DCL      6400--REDEF    9966>>DOCASE
F$DCB.OWNER
      6417**DCL      9290>>IF
F$DCB.PRECNO
      6423**DCL      6423--REDEF    9334<<ASSIGN   9362>>ASSIGN
F$DCB.PSN
      6396**DCL      9255>>ASSIGN   9256<<ASSIGN   9504>>ASSIGN   9538>>ASSIGN   9674>>ASSIGN   9727>>ASSIGN
      9782>>ASSIGN   9783--CALL     9921<<ASSIGN   9926>>ASSIGN   9950<<ASSIGN   9975>>ASSIGN   9976--CALL
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:153  
     10041>>ASSIGN
F$DCB.RCSZ
      6428**DCL      6428--REDEF
F$DCB.RES
      6396**DCL      6396--REDEF
F$DCB.RESNT.TYP
      6396**DCL      9675>>ASSIGN
F$DCB.RPOS
      6417**DCL      9330<<ASSIGN
F$DCB.SETX
      6408**DCL      6408--REDEF    9343<<ASSIGN   9364>>ASSIGN   9397>>ASSIGN   9506>>ASSIGN   9542>>ASSIGN
      9728>>ASSIGN   9781>>ASSIGN   9877>>ASSIGN   9972>>ASSIGN   9974>>ASSIGN
F$DCB.SEZ_OK
      6416**DCL      9944>>IF      10046>>IF
F$DCB.TAB$
      6407**DCL      6408--REDEF
F$DCB.TDA
      6422**DCL      6422--REDEF
F$DCB.TRNC
      6418**DCL      9339<<ASSIGN
F$DCB.TYC
      6386**DCL      9758<<ASSIGN   9759>>DOWHILE
F$DCB.TYC.BOF
      6386**DCL      9764>>IF
F$DCB.TYC.BOT
      6386**DCL      9770>>DOWHILE
F$DCB.VOL
      6406**DCL      9341<<ASSIGN   9360>>ASSIGN   9783>>CALL     9971<<ASSIGN   9976>>CALL
F$DCB.WSN
      6397**DCL      6397--REDEF
F$DCB.XTEND
      6399**DCL      9485>>IF
FM$CFUJ.BLKLEN
      7148**DCL      9331>>ASSIGN   9336>>ASSIGN   9363<<ASSIGN
FM$CFUJ.DCTX
      7147**DCL      9343>>ASSIGN   9364<<ASSIGN   9974<<ASSIGN
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:154  
FM$CFUJ.MAXVOL
      7147**DCL      9342>>ASSIGN   9361<<ASSIGN
FM$CFUJ.PRECNO
      7149**DCL      9334>>ASSIGN   9362<<ASSIGN
FM$CFUJ.SNLINKX
      7148**DCL      9245>>ASSIGN   9293>>ASSIGN   9309<<ASSIGN   9887>>ASSIGN  10028<<ASSIGN
FM$CFUJ.VOL
      7147**DCL      9341>>ASSIGN   9360<<ASSIGN
FMD$RELBUF
      8853**DCL-ENT  9206--CALL     9209--CALL
FMR$G8
      8854**DCL-ENT 10024--CALL
FMR$Z8
      8855**DCL-ENT  9305--CALL
FNDSN
      9237**LABEL    9228--GOTO
FRA$COPN
      8856**DCL-ENT  9964--CALL
FRA$OPR
      8857**DCL-ENT  9780--CALL
FRB$CREM
      8858**DCL-ENT  9779--CALL
FT$CFUSN.DCBX
      7144**DCL     10043<<ASSIGN
FT$CFUSN.LINKX
      7144**DCL      9261>>ASSIGN   9304>>ASSIGN   9901>>ASSIGN   9908>>ASSIGN  10035<<ASSIGN
FT$CFUSN.NUM
      7144**DCL      9266>>IF       9917>>IF       9919>>IF      10030<<ASSIGN  10040<<ASSIGN
FT$CFUSN.SN
      7144**DCL      9268>>ASSIGN   9269<<ASSIGN   9921>>ASSIGN  10031<<ASSIGN  10041<<ASSIGN
FT$CFUSN.SYSID
      7144**DCL     10042<<ASSIGN
FT$DDT.ACCT
      7520**DCL      9461>>IF       9956>>ASSIGN  10010<<ASSIGN
FT$DDT.ANST
      7535**DCL      9400>>IF       9433>>IF       9433>>IF       9459>>IF       9485>>IF       9530>>IF
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:155  
      9530>>IF       9530>>IF       9530>>IF       9539>>IF       9614>>IF       9617<<ASSIGN   9632>>IF
      9634<<ASSIGN   9640>>IF       9987>>IF
FT$DDT.DENSITY
      7550**DCL      9572>>IF       9600>>IF       9622>>ASSIGN   9952>>ASSIGN
FT$DDT.EBCDIC
      7538**DCL      9756>>ASSIGN   9832<<ASSIGN  10014<<ASSIGN
FT$DDT.EXPIRE
      7528**DCL      9955>>ASSIGN  10009<<ASSIGN
FT$DDT.EXPIRED
      7554**DCL      9461>>IF       9485>>IF       9840<<ASSIGN
FT$DDT.FMCNT
      7533**DCL      9755>>ASSIGN   9831<<ASSIGN
FT$DDT.FMNEEDED
      7551**DCL      9980>>IF       9982<<ASSIGN
FT$DDT.FRSTFSN
      7531**DCL      9747>>ASSIGN   9754>>ASSIGN   9801<<ASSIGN   9830<<ASSIGN   9991<<ASSIGN
FT$DDT.FSN
      7529**DCL      9635<<ASSIGN   9746>>ASSIGN   9753>>ASSIGN   9800<<ASSIGN   9829<<ASSIGN   9958>>ASSIGN
      9990<<ASSIGN
FT$DDT.NOWANS
      7542**DCL      9433>>IF       9530>>IF       9530>>IF       9618<<ASSIGN   9641<<ASSIGN
FT$DDT.POS
      7553**DCL      9411>>IF       9440>>IF       9572>>IF       9722>>IF       9742>>ASSIGN   9799<<ASSIGN
      9814<<ASSIGN   9825<<ASSIGN
FT$DDT.RINGIN
      7539**DCL      9710>>IF       9721>>DOWHILE
FT$DDT.SCRTCH
      7537**DCL      9485>>IF       9839<<ASSIGN   9987>>IF      10046>>IF
FT$DDT.SN
      7524**DCL      9782<<ASSIGN   9975<<ASSIGN
FT$DDT.SOLICIT
      7555**DCL      9507<<ASSIGN   9509>>DOWHILE  9513>>IF       9515<<ASSIGN   9543<<ASSIGN   9545>>DOWHILE
      9549>>IF       9551<<ASSIGN   9647<<ASSIGN   9729<<ASSIGN   9731>>DOWHILE  9735>>IF       9737<<ASSIGN
      9844<<ASSIGN
FT$DDT.VOLACCESS
      7571**DCL      9464>>DOCASE   9957>>ASSIGN  10011<<ASSIGN
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:156  
FT$DDT.WRITE
      7540**DCL      9485>>IF       9709>>IF       9838<<ASSIGN
FTI$PERMIT
      8859**DCL-ENT  9837--CALL
FTI$REWIND
      8860**DCL-ENT  9748--CALL     9985--CALL     9995--CALL
FTI$SD1600
      8862**DCL-ENT  9606--CALL
FTI$SD6250
      8863**DCL-ENT  9608--CALL
FTI$SD800
      8861**DCL-ENT  9604--CALL
FTI$SPFILE
      8864**DCL-ENT  9772--CALL     9798--CALL     9809--CALL     9813--CALL
FTI$SPREC
      8865**DCL-ENT  9761--CALL     9820--CALL     9824--CALL
FTI$WRFM
      8866**DCL-ENT  9983--CALL
FTL$GETFSN
      8867**DCL-ENT  9994--CALL
FTR$DPT
      9370**ENTRY    9998--CALL
FTR$SETSN
      9230**ENTRY    9783--CALL     9976--CALL
FTR_GETRING
      9686**PROC     9563--CALL
FTR_ROMSG
      9656**PROC     9508--CALL     9544--CALL     9730--CALL
FT_DENS
      8878**DCL      9580>>IF       9594>>IF       9952>>ASSIGN
FT_PROT
      8956**DCL      9405>>IF       9461>>IF       9485>>IF       9498>>IF       9530>>IF       9530>>IF
FT_RINGBOTONLY
      8963**DCL      9722>>IF
FT_TAPETYPECHK
      8962**DCL      9405>>IF       9530>>IF
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:157  
GOT_RING IN PROCEDURE FTR_GETRING
      9831**LABEL    9710--GOTO
I
      8892**DCL      9259<<ASSIGN   9260>>DOWHILE  9264<<ASSIGN   9264>>ASSIGN   9266>>IF       9268>>ASSIGN
      9269>>ASSIGN   9578<<ASSIGN   9579>>DOWHILE  9580>>IF       9582>>ASSIGN   9583<<ASSIGN   9585<<ASSIGN
      9585>>ASSIGN   9587>>IF       9719<<ASSIGN   9757<<ASSIGN   9762<<ASSIGN   9762>>ASSIGN   9766<<ASSIGN
      9766>>ASSIGN   9816>>IF       9818>>DOWHILE  9821<<ASSIGN   9821>>ASSIGN   9823>>ASSIGN   9884<<ASSIGN
      9900>>DOWHILE  9904<<ASSIGN   9904>>ASSIGN   9906>>IF       9912<<ASSIGN   9917>>IF       9919>>IF
      9921>>ASSIGN   9924>>IF       9928<<ASSIGN   9930>>IF      10022>>IF      10032<<ASSIGN  10036<<ASSIGN
     10040>>ASSIGN  10041>>ASSIGN
J
      8893**DCL      9720<<ASSIGN   9767<<ASSIGN   9769<<ASSIGN   9773<<ASSIGN   9773>>ASSIGN   9805>>IF
      9807>>DOWHILE  9810<<ASSIGN   9810>>ASSIGN   9812>>ASSIGN   9958<<ASSIGN   9990>>ASSIGN   9991>>ASSIGN
JDCB.DCBX
      8896**DCL     10043>>ASSIGN
JDCB$
      8894**DCL      6386--IMP-PTR  8895--REDEF    9200<<ASSIGN   9202>>IF       9208>>IF       9213>>ASSIGN
      9214>>ASSIGN   9242<<ASSIGN   9243>>IF       9245>>ASSIGN   9250>>ASSIGN   9255>>ASSIGN   9256>>ASSIGN
      9287<<ASSIGN   9288>>ASSIGN   9289>>IF       9290>>IF       9326<<ASSIGN   9327>>ASSIGN   9329>>ASSIGN
      9330>>ASSIGN   9331>>ASSIGN   9332>>ASSIGN   9333>>ASSIGN   9334>>ASSIGN   9335>>ASSIGN   9336>>ASSIGN
      9337>>ASSIGN   9338>>ASSIGN   9339>>ASSIGN   9340>>ASSIGN   9341>>ASSIGN   9342>>ASSIGN   9343>>ASSIGN
      9357<<ASSIGN   9358>>ASSIGN   9360>>ASSIGN   9361>>ASSIGN   9362>>ASSIGN   9363>>ASSIGN   9364>>ASSIGN
      9396<<ASSIGN   9397>>ASSIGN   9399>>IF       9404>>IF       9436>>IF       9466>>IF       9473>>IF
      9485>>IF       9485>>IF       9485>>IF       9491>>IF       9504>>ASSIGN   9506>>ASSIGN   9530>>IF
      9530>>IF       9538>>ASSIGN   9542>>ASSIGN   9561>>IF       9572>>IF       9572>>IF       9576>>IF
      9580>>IF       9582>>ASSIGN   9594>>IF       9594>>IF       9600>>IF       9602>>DOCASE   9614>>IF
      9614>>IF       9622>>ASSIGN   9630>>IF       9632>>IF       9640>>IF       9674>>ASSIGN   9675>>ASSIGN
      9679>>ASSIGN   9727>>ASSIGN   9728>>ASSIGN   9743>>ASSIGN   9758>>ASSIGN   9759>>DOWHILE  9760>>ASSIGN
      9762>>ASSIGN   9764>>IF       9770>>DOWHILE  9771>>ASSIGN   9773>>ASSIGN   9781>>ASSIGN   9782>>ASSIGN
      9783>>CALL     9783>>CALL     9794>>IF       9795>>ASSIGN   9797>>ASSIGN   9808>>ASSIGN   9810>>ASSIGN
      9812>>ASSIGN   9819>>ASSIGN   9821>>ASSIGN   9823>>ASSIGN   9876<<ASSIGN   9877>>ASSIGN   9885>>IF
      9887>>ASSIGN   9892>>ASSIGN   9921>>ASSIGN   9926>>ASSIGN   9944>>IF       9944>>IF       9949>>ASSIGN
      9949>>ASSIGN   9950>>ASSIGN   9952>>ASSIGN   9965>>IF       9966>>DOCASE   9969>>ASSIGN   9969>>ASSIGN
      9969>>ASSIGN   9971>>ASSIGN   9972>>ASSIGN   9973>>IF       9974>>ASSIGN   9974>>ASSIGN   9975>>ASSIGN
      9976>>CALL     9976>>CALL     9978>>IF       9987>>IF       9987>>IF       9993>>IF       9997>>IF
     10007>>IF      10013>>IF      10014>>ASSIGN  10027>>IF      10028>>ASSIGN  10029>>ASSIGN  10041>>ASSIGN
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:158  
     10046>>IF
JUSTALT
     10061**LABEL    9563--CALLALT  9604--CALLALT  9606--CALLALT  9608--CALLALT  9964--CALLALT  9983--CALLALT
      9985--CALLALT  9994--CALLALT  9995--CALLALT  9998--CALLALT
JUSTALT IN PROCEDURE FTR_GETRING
      9847**LABEL    9748--CALLALT  9761--CALLALT  9772--CALLALT  9780--CALLALT  9798--CALLALT  9809--CALLALT
      9813--CALLALT  9820--CALLALT  9824--CALLALT  9837--CALLALT
M$MWRITE
      8868**DCL-ENT  9677--CALL
MSG IN PROCEDURE FTR_ROMSG
      9665**DCL      9656--PROC     9676>>ASSIGN
MSGS
      8898**DCL      9510<>CALL     9546<>CALL     9648<>CALL     9732<>CALL     9845<>CALL
MSGS.MG1
      8899**DCL      9504<<ASSIGN   9538<<ASSIGN   9727<<ASSIGN
MSGS.MG2
      8900**DCL      9505<<ASSIGN   9540<<ASSIGN   9541<<ASSIGN
N
      8884**DCL         9--PROC     9220--ENTRY    9230--ENTRY    9241>>IF       9253>>IF       9259>>ASSIGN
      9856--ENTRY    9859--ENTRY    9875>>IF       9884>>ASSIGN   9971>>ASSIGN
N$DCT$$
      7808**DCL      7808--IMP-PTR  9397>>ASSIGN   9781>>ASSIGN   9877>>ASSIGN   9972>>ASSIGN
NEVER0 IN PROCEDURE FTR_GETRING
      9782**LABEL    9783--CALLALT
NEVER1
      9975**LABEL    9976--CALLALT
NK$LDCT.DDT$
      7770**DCL      7770--REDEF    9397>>ASSIGN   9781>>ASSIGN   9877>>ASSIGN   9972>>ASSIGN
NK$LDCT.IOQ$
      7769**DCL      7770--REDEF
NK$LDCT.LDCTX
      7771**DCL      7771--REDEF
NK$LDCT.LKFLG.ABORTED
      7783**DCL      7784--REDEF
NK$LDCT.RLCID.LDCTX
      7793**DCL      7793--REDEF
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:159  
NK$LDCT.STA$
      7789**DCL      7790--REDEF
NK$LDCT.SYMB$
      7768**DCL      7768--REDEF    7768--REDEF    7769--REDEF
NK$LDCT$
      7808**DCL      9397>>ASSIGN   9781>>ASSIGN   9877>>ASSIGN   9972>>ASSIGN
NOCFUS
     10045**LABEL   10024--CALLALT
NOCVOLCHK
      9491**LABEL    9494--GOTO
NOOVER
      9640**LABEL    9511--CALLALT  9547--CALLALT
NORING IN PROCEDURE FTR_GETRING
      9840**LABEL    9733--CALLALT
OCI$MK_WR
      8869**DCL-ENT  9510--CALL     9546--CALL     9648--CALL     9732--CALL     9845--CALL
P$
      8885**DCL         9--PROC     9220--ENTRY    9230--ENTRY    9255>>ASSIGN   9256>>ASSIGN   9268>>ASSIGN
      9269>>ASSIGN
POS_KNOWN IN PROCEDURE FTR_GETRING
      9695**DCL      9718<<ASSIGN   9751>>IF       9775<<ASSIGN   9827>>IF
REWIND
      8901**DCL      9227<<ASSIGN   9237<<ASSIGN   9254>>IF       9267>>IF       9857<<ASSIGN   9860<<ASSIGN
      9978>>IF       9987>>IF       9995>>IF      10013>>IF
ROMSG
      8981**DCL      9671>>ASSIGN
ROMSG.STATION_
      8983**DCL      8983--REDEF
ROMSG.V
      8984**DCL      8981--DCLINIT
ROMSG.V.DVBYTE.VFC#
      8990**DCL      8990--REDEF
ROMSGAUTO
      8919**DCL      9671<<ASSIGN   9677<>CALL
ROMSGAUTO.BUF_
      8919**DCL      9673<<ASSIGN
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:160  
ROMSGAUTO.STATION_
      8921**DCL      8921--REDEF
ROMSGAUTO.V
      8922**DCL      9672--ASSIGN
ROMSGAUTO.V.DVBYTE.VFC#
      8928**DCL      8928--REDEF
ROMSGAUTO.V_
      8919**DCL      9672<<ASSIGN
ROMSGMSG
      8996**DCL      8982--DCLINIT  8983--DCLINIT  9670>>ASSIGN
ROMSGMSGAUTO
      8934**DCL      9670<<ASSIGN   9673--ASSIGN
ROMSGMSGAUTO.ROOPT
      8938**DCL      9676<<ASSIGN
ROMSGMSGAUTO.SN
      8942**DCL      9674<<ASSIGN
ROMSGMSGAUTO.TT
      8940**DCL      9675<<ASSIGN
S$CU$
       232**DCL      9669>>IF
SAVDEVICE IN PROCEDURE FTR_GETRING
      9701**DCL      9743<<ASSIGN
SAVEBCDIC IN PROCEDURE FTR_GETRING
      9699**DCL      9756<<ASSIGN   9832>>ASSIGN
SAVEXP
      8943**DCL      9955<<ASSIGN  10007>>IF      10009>>ASSIGN
SAVFMCNT IN PROCEDURE FTR_GETRING
      9698**DCL      9755<<ASSIGN   9831>>ASSIGN
SAVFRSTFSN IN PROCEDURE FTR_GETRING
      9697**DCL      9747<<ASSIGN   9754<<ASSIGN   9797>>ASSIGN   9801>>ASSIGN   9830>>ASSIGN
SAVFSN IN PROCEDURE FTR_GETRING
      9696**DCL      9746<<ASSIGN   9753<<ASSIGN   9795>>ASSIGN   9797>>ASSIGN   9800>>ASSIGN   9829>>ASSIGN
SAVOWNR
      8944**DCL      9956<<ASSIGN  10010>>ASSIGN
SAVPOS IN PROCEDURE FTR_GETRING
      9700**DCL      9742<<ASSIGN   9744>>IF       9792>>IF       9799>>ASSIGN
PL6.E3A0      #001=FTR$ROUTINE File=FTR$ROUTINE.:E05TSI                          TUE 07/29/97 18:01 Page:161  
SAVPROT
      8945**DCL      9957<<ASSIGN  10011>>ASSIGN
SAVPSN
      8946**DCL      9926<<ASSIGN  10031>>ASSIGN
SCRATCH
      8947**DCL      9398<<ASSIGN   9883<<ASSIGN   9914<<ASSIGN   9918<<ASSIGN   9921>>IF       9927<<ASSIGN
      9942>>IF      10020>>IF
SOWHAT IN PROCEDURE FTR_ROMSG
      9676**LABEL    9677--CALLALT
SSR$REG
      8870**DCL-ENT  9511--CALL     9547--CALL     9733--CALL
TEMP
      8949**DCL      9201<<DOINDEX  9202>>IF       9204>>DOCASE   9206<>CALL     9209<>CALL     9245<<ASSIGN
      9246>>IF       9248>>ASSIGN   9261<<ASSIGN   9262>>IF       9263>>ASSIGN   9293<<ASSIGN   9294>>IF
      9295>>ASSIGN   9304<<ASSIGN   9306>>IF       9313>>ASSIGN   9506<<ASSIGN   9510<>CALL     9542<<ASSIGN
      9546<>CALL     9648<>CALL     9728<<ASSIGN   9732<>CALL     9845<>CALL     9887<<ASSIGN   9888>>IF
      9890>>ASSIGN   9901<<ASSIGN   9902>>IF       9903>>ASSIGN   9908<<ASSIGN   9909>>IF       9911>>ASSIGN
     10024<>CALL    10028>>ASSIGN  10035>>ASSIGN
TEMP$
      8948**DCL     10024<>CALL    10029>>ASSIGN  10030>>ASSIGN  10031>>ASSIGN  10039<<ASSIGN  10040>>ASSIGN
     10041>>ASSIGN  10042>>ASSIGN  10043>>ASSIGN
THESN
      8950**DCL      9255<<ASSIGN   9256>>ASSIGN   9268<<ASSIGN   9269>>ASSIGN
VOLORDER
     10057**LABEL    9875--GOTO     9902--GOTO     9919--GOTO     9931--GOTO    10046--GOTO
