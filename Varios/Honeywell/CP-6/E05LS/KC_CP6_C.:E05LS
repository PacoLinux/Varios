

07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           1    
    1      /*M* KC_CP6_C - Macro definitions for comgroup PMMEs */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /**/
    8      /*X* DMC,DFC */
    9      /**/
   10                          /*F* NAME:  Comgroups
   11
   12
   13                          The following discussion of comgroups
   14                          is intended to give an overview of the nature
   15                          and usage of CP-6 comgroups.  Some of the
   16                          information provided is of a technical and
   17                          detailed nature, and is given in order that
   18                          the sophisticated user may intelligently use
   19                          all of the services which the CP-6 system provides
   20                          in connection with administration and
   21                          efficient usage of this facility.  The
   22                          material presented here is intended to
   23                          bring together, as well as complement,
   24                          the information provided in the discussions
   25                          of the individual monitor services.
   26                          ..::L2 "Introduction to Comgroups\\X"
   27       A comgroup (communications group) is a private message-switching mechanism.
   28       Its function is to transmit messages between stations.
   29       A station is a 'member' of a comgroup, is the element which
   30       transmits and receives messages, and has a unique name.
   31       CP-6 provides user program access to comgroups
   32       as  unique media, through the standard input/output
   33       mechanisms.
   34
   35       A comgroup always resides in a disk file.  When a comgroup
   36       is inactive, that is, no stations are connected to it,
   37       it resides entirely in its disk file.  When it is
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           2    
   38       active, it resides partly in its file and partly
   39       in main memory.  The latter permits messages to
   40       be transferred without requiring access to
   41       disk.  When the comgroup goes from active to
   42       inactive state, the active context is packaged
   43       and stored in the disk file.
   44
   45       A comgroup may be listed with PCL at any time, but
   46       may only be copied using EFT, and then
   47       only when it is inactive.  PCL may be used to
   48       delete a comgroup, but only when it is inactive.
   49      ..::L1 "^\X"
   50      ..::L2 "The Physical Comgroup\\X"
   51       This subsection discusses the aspects of
   52       comgroups as files.  Although comgroups are used
   53       to transmit messages, they have physical existence
   54       as disk files, and are therefore subject
   55       to many rules as discussed below.
   56
   57       A comgroup is created when a DCB is opened
   58       in CREATE mode specifying ASN=COMGROUP.  The resultant
   59       file is subject to most of the rules and means of access
   60       which apply to disk files in general.  That is, the
   61       file resides in a particular file management account,
   62       has a creator, a list of accounts which may READ, WRITE,
   63       DELETE and otherwise access it, takes up storage space
   64       which is charged to the creator.  Thus most of the
   65       considerations which apply to KEYED, RANDOM, INDEXED,
   66       RELATIVE and CONSECUTIVE files also apply to COMGROUP
   67       files.  In particular, once such a file has been created
   68       it will appear in a PCL list of the account in which
   69       it resides, just as any other file.
   70       Note, however, that a comgroup cannot be
   71       created as a STAR or SCRATCH file.
   72
   73       Certain special attributes of a comgroup file
   74       are notable.  As discussed in a following subsection, an
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           3    
   75       active comgroup may have a special station called the
   76       administrative user (AU).  In brief, an AU is a station
   77       with wide-ranging powers to control and manipulate the
   78       comgroup.  The comgroup  creator specifies a list of accounts
   79       which may be the AU of his comgroup, in the same way that
   80       he specifies the list of accounts which may READ the
   81       comgroup.  This type of access is called AU.  Also,
   82       CP-6 provides certain services normally used only by
   83       an AU which provide information about, but do not
   84       change, an active comgroup.  The creator may provide
   85       a list of accounts which may use these informational
   86       services.  This type of access is called AURD.
   87       A third special type of access control, called TCTL,
   88       lists accounts which are permitted to issue terminal
   89       control services (e.g., M$STRMATTR) directed at terminals
   90       connected to the comgroup.
   91
   92       A user program may not normally open a DCB
   93       to a comgroup other than as a comgroup, that is, other
   94       than with ASN=COMGROUP.  This ASN indicates that the
   95       DCB wishes to join the comgroup as a station, and
   96       is of course the usual way of opening.
   97       The other legal ASN, FILE, indicates a desire to treat the
   98       comgroup as a file.  If the file is opened by a
   99       user who does not possess FMDIAG privilege, then
  100       all accesses are turned off, with the exception
  101       of DELF, REATTR, EXEC, and NOLIST.  Thus a user with
  102       REATTR access to a comgroup file may use PCL to
  103       modify the file (i.e., change its attributes).
  104       When a comgroup is opened as a file by a user
  105       with FMDIAG privilege, it may be treated as a
  106       RANDOM file, subject of course to access
  107       restrictions.  Since the data thus read and
  108       written is the raw structure of the comgroup,
  109       random access mode is of essentially no use
  110       other than to special CP-6 processors.
  111
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           4    
  112       The comgroup file serves multiple purposes.
  113       It is, as is the case with all files, the repository
  114       of access control information as discussed above.
  115       Also, it provides an overflow area for use in the
  116       case where the information in the active comgroup
  117       is too large to hold in main memory.  Lastly,
  118       every comgroup file has an area reserved for the
  119       active context.  When a comgroup becomes inactive,
  120       the memory-resident portion of the comgroup is written
  121       to this 'save area' of the file.  The size of
  122       this area must therefore always be at least as large
  123       as the memory-resident portion of the comgroup.
  124       The size of the comgroup file, and the limits on the
  125       size of the memory-resident area, are discussed in
  126       detail in the subsection concerning administration.
  127      ..::L2 "Comgroup Stations\\X"
  128       The unit of membership in a comgroup is
  129       the station.  A station is either a DCB or a device.
  130       DCBs join a comgroup via M$OPEN.  Devices join a
  131       comgroup by logging on to the CP-6 system.
  132       Each station has a name unique within the
  133       particular comgroup, the name being limited
  134       to 8 characters in length.
  135
  136       A DCB joins a comgroup by issuing an M$OPEN
  137       which identifies the comgroup file in the usual
  138       way (name, account, password, and possibly packset name),
  139       and specifies ASN=COMGROUP.  The M$OPEN may specify
  140       the station name with which the DCB wishes to join,
  141       or may (in absence of such specification) request
  142       that an arbitrary name be assigned by the CP-6 system.  Note
  143       that this latter name is not reproducible, so that
  144       if it is used, none of the DCB's business with the
  145       comgroup must depend on its station name.
  146       If the comgroup is inactive at the time the
  147       M$OPEN is issued, it is made active.  If any
  148       other stations are to be permitted to join the
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           5    
  149       comgroup while this DCB is connected, the DCB
  150       must be opened in SHARE=ALL mode (the default).  Once
  151       connected to the comgroup, the DCB may read and
  152       write messages, subject to
  153       restrictions detailed in the subsection concerning DCB STATIONS.
  154       Reading and writing of messages is accomplished
  155       by the M$READ and M$WRITE services.
  156
  157       A device (or TERMINAL, as devices are
  158       called within a comgroup) joins a comgroup by
  159       logging on to the CP-6 system with a logon which specifies
  160       that the device's mode of connection to the system is
  161       as a comgroup TERMINAL.  Note that among the
  162       other possibilities for the connection mode for
  163       a given logon is timesharing user.  Note also that
  164       operator consoles which log on to the CP-6 system do so
  165       as comgroup TERMINALs on a special system-controlled
  166       comgroup.
  167
  168       The system manager, in creating such a logon, specifies
  169       the comgroup to which the device is to be connected
  170       in the usual way,
  171       and gives the station name with which
  172       the device is to join the comgroup.  It is important
  173       to mention on this context that an active comgroup MUST
  174       possess at least one DCB station.  In other words,
  175       a device which attempts to log on to the CP-6 system with a logon that
  176       specifies a comgroup that happens to be inactive
  177       cannot be connected to the comgroup.
  178      ..::L2 "Comgroup Messages\\X"
  179       A comgroup message has two important
  180       parts:  the data, which is supplied by the
  181       writing station, and attributes, partly assigned
  182       by the comgroup and partly assigned by the
  183       writing station (called the origin station).
  184       This separation is of great importance to
  185       an understanding of the way in which comgroups
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           6    
  186       operate.  The content of the data part of a message is of
  187       no interest whatsoever to the CP-6 system in terms of
  188       managing the comgroup; it is of interest only
  189       to the station which will receive the message.
  190       The values of the attributes, on the other hand, are of
  191       first importance since they control to a large
  192       extent how and when the message will be delivered.
  193
  194       The attributes of a comgroup message
  195       are here listed:
  196
  197
  198      .FIF
  199       ID -          An integer message identifier assigned
  200      }              by the comgroup, and unique to this
  201      }              message.
  202
  203       TYPE -        A textual message type assigned by
  204      }              the origin station, and a maximum of
  205      }              8 characters in length.
  206
  207       TIME STAMP -  A system time stamp assigned by the
  208      }              comgroup at the instant the message
  209      }              is written.
  210
  211       ORIGIN -      The name of the origin (writing) station.
  212
  213       DESTINATION - A message is destined either for a
  214      }              specific station (called a directed
  215      }              message) or for the anonymous
  216      }              queue. This is a queue into which any
  217      }              station may write messages and from
  218      }              which any DCB station may read messages.
  219      }              DCB stations assign destination when
  220      }              writing messages.  When a terminal station
  221      }              writes a message, destination is always
  222      }              the anonymous queue.
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           7    
  223
  224       PRIORITY -    The priority of a message is determined
  225      }              from its type and origin.  Each message
  226      }              type is known to the comgroup, and each
  227      }              has an intrinsic priority.  Similarly,
  228      }              each station has an intrinsic priority
  229      }              of submittal.  These two values are
  230      }              concatenated to produce the message
  231      }              priority.  The most significant contribution
  232      }              to the priority comes from the attribute
  233      }              which keys the anonymous queue (see the
  234      }              discussion of the anonymous queue below).
  235      }              In other words, if the anonymous queue
  236      }              is keyed by message type, then the
  237      }              priority of each message in the comgroup
  238      }              is formulated with the priority of its
  239      }              message type being most significant
  240      }              and the priority of its originating station
  241      }              being least significant, and vice versa
  242      }              if the anonymous queue is keyed by origin
  243      }              station.
  244
  245       SIZE -        The size attribute of a message is the
  246      }              length (in bytes) of the data portion.
  247
  248      .FIN
  249
  250       The attributes of a message, being necessary
  251       to the delivery and manipulation of the message,
  252       are kept together and are always logically in main
  253       memory, that is, in the active portion of the
  254       comgroup.  It is convenient to view these attributes
  255       as a block which completely describes the message,
  256       in other words a message block, hereafter referred
  257       to as an MBLK.  Should the number of messages in
  258       a comgroup be so large that the MBLKs describing them
  259       will not fit in main memory, they are written
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           8    
  260       to the file, but this is viewed as an exceptional
  261       situation.  This treatment is possible because the
  262       MBLK is of a fixed and small known size, and facilitates
  263       keeping track of a large number of messages in a small
  264       amount of main memory.
  265
  266       The data portion of a message is, on the
  267       other hand, not necessary to the manipulation of
  268       the message, and furthermore is of an arbitrary
  269       size since it is assigned when the message is
  270       written.  Thus the management of the data portions
  271       of the messages in a comgroup is a much more
  272       unpredictable and complex task.  For this reason,
  273       the data portion of a comgroup message is always
  274       logically on disk, in the comgroup file.  The
  275       comgroup maintains a disk data cache in main
  276       memory.  Thus, given a reasonable relationship
  277       between the activity level in the comgroup and
  278       the amount of main memory available, the number
  279       of file accesses for message data is small.  The
  280       data portion of a message is referred to as a
  281       data block or DBLK.  Thus a message consists
  282       of an MBLK which contains the attributes, and
  283       the disk address of the data or DBLK, plus the
  284       DBLK itself which contains the data.
  285
  286       Every message in a comgroup belongs
  287       to exactly one queue.  A queue is a linear list of
  288       messages blocks.  Therefore even though a queue
  289       is said to 'contain messages', it physically
  290       only contains the MBLK for each message, with the
  291       data part of the message being kept in the data
  292       cache.  This makes it possible for a comgroup
  293       to have a large number of long message queues
  294       without necessarily occupying a great deal of
  295       main memory.  A single comgroup contains
  296       many queues.  In particular, each station possesses
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           9    
  297       a queue containing the messages which have been
  298       written directly to that station but have not
  299       been read yet.  All comgroup queues are identical
  300       in structure and function.  Each is ordered by
  301       priority, and within priority by time of
  302       submittal with the older messages preceding
  303       newer ones.  When
  304       a message is to be read from a queue, it is
  305       read from the front.  In other words, the message
  306       selected is that having highest priority, and within
  307       that priority, least recent time of arrival.
  308      ..::L2 "Comgroup Structure\\X"
  309       This section describes the basic structure
  310       of a comgroup, in order to provide a framework
  311       within which the following discussions can be
  312       placed.  The nature of this structure is important
  313       because it makes it possible to understand what
  314       types of operations a comgroup performs in
  315       a natural and efficient manner.
  316
  317       Every comgroup contains a height-balanced
  318       binary tree with one node for every station known
  319       to the comgroup, keyed by station name.  In brief,
  320       such a structure facilitates rapid lookup by station
  321       name, such that the time required to find a particular
  322       station is very small irrespective of the number of
  323       stations.  This tree is called the station tree.
  324       The node for a particular station contains
  325       all the information that the comgroup requires
  326       in order to control the activities of the
  327       station.  In particular, the queue of messages
  328       written directly to the station but not read
  329       yet, is headed in the station node.  The station
  330       tree is always kept in main memory when the comgroup is active, thus a
  331       comgroup must always be able to acquire
  332       sufficient main memory to hold all the nodes of this tree.
  333       Note that the stations listed therein are
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           10   
  334       not only those which are currently connected
  335       to the comgroup; stations which are absent
  336       but which have messages saved against their
  337       future connection are also listed.  One of the
  338       uses of the station tree is for directed
  339       write operations: when one station writes
  340       a message to another specifying a direct
  341       station name, the destination station is
  342       found by looking it up in the station tree;
  343       the message is then inserted into the
  344       destination station's queue.
  345
  346       Every comgroup contains a height-balanced
  347       binary tree with one node for every message type known
  348       to the comgroup, keyed by message type name.
  349       This tree is called the message type tree.
  350       Each node in the tree contains information pertaining
  351       to a particular message type, for example
  352       statistics pertaining to activity of messages
  353       of that type.
  354       As in the case of the station tree, the
  355       message type tree is always kept in main memory.
  356
  357       The anonymous queue is a comgroup
  358       structure which in some ways may be viewed
  359       logically as a linear queue.  Messages may
  360       be written into the anonymous queue by
  361       any station, and may be read from it by any
  362       DCB station.  Terminal stations always write to the
  363       anonymous queue.  It is called 'anonymous' because
  364       it is intended for use in applications where
  365       a group of stations submit messages without
  366       caring which station processes them, and thus
  367       their destination is 'anonymous'.  The stations
  368       which read this queue may however be
  369       interested only in certain message types,
  370       or possibly only in messages originating
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           11   
  371       from certain stations.  In order to make
  372       such searches of the queue faster, the
  373       anonymous queue is physically organized either by
  374       origin station or by message type.  The
  375       type of organization is selected when
  376       the comgroup is created via the QISS parameter
  377       in M$OPEN.  If, for example, the anonymous queue is
  378       to be organized by message type (the default), then all
  379       messages in the anonymous queue of a given message
  380       type will be kept in a queue headed in
  381       the message type tree node for that
  382       message type.  The result of this
  383       division of the anonymous queue is that a
  384       read request for some particular
  385       message type from the anonymous queue simply
  386       and quickly finds the appropriate
  387       node in the message type tree, and
  388       then need only examine that shorter
  389       queue, rather than search through
  390       many messages of the wrong type.
  391       Notice that if the anonymous queue is organized
  392       by station name, then all messages
  393       in the anonymous queue submitted by a particular
  394       station will be kept in a queue headed
  395       in that station's station tree node.
  396       It is important not to confuse this
  397       queue with the queue of messages
  398       written TO that station.  In sum,
  399       the anonymous queue is also kept
  400       as a binary tree, utilizing either
  401       the station tree or the message
  402       type tree.
  403       The tree in which the anonymous queue is embedded
  404       is sometimes referred to as the Q-tree.
  405
  406       It is important to note that the anonymous
  407       queue is not strictly a linear queue when
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           12   
  408       viewed by a reader.  Anonymous messages
  409       are not strictly ordered by priority and
  410       time of arrival.  Specifically, messages
  411       are always read in priority order, BUT
  412       not necessarily in order of arrival.  This
  413       occurs because of the organization
  414       of the anonymous queue, in that messages
  415       are kept in separate queues, one per Q-tree
  416       node.  Thus we have the following anomaly:  if the
  417       anonymous queue is keyed by message
  418       type, and consists of the message types ABC and XYZ, having
  419       the same intrinsic priority, and there is
  420       one message of each type present, then the
  421       message of type ABC will be read first even
  422       if it arrived later than the one of type XYZ.
  423       This is because ABC occurs alphabetically
  424       before XYZ, and thus the ABC subqueue is
  425       searched before the XYZ subqueue.
  426
  427       The third binary tree in a comgroup
  428       is the data cache tree.  Recall that the
  429       data cache is used to keep data blocks in
  430       main memory as much as possible, despite
  431       the fact that they are always logically
  432       in the disk file.
  433       When a data block is created, it
  434       is allocated some part of a granule
  435       from the disk file.  Each such
  436       data granule contains some header
  437       information regarding allocation of
  438       data blocks within it, some allocated
  439       data blocks, and some free space.
  440       Once a data block has been allocated,
  441       it cannot be moved about within the
  442       granule (note that this may result
  443       in fragmentation of the granule which
  444       the comgroup makes no attempt to alleviate).
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           13   
  445       Subject to main memory limitations
  446       (see the section regarding administration),
  447       the comgroup will keep as many data
  448       granules as possible in memory.  Each
  449       such granule is entered as a node in
  450       the data cache binary tree, which is
  451       keyed by disk address.  Thus the
  452       fetching of a data block is an extremely
  453       rapid process if the data block's granule
  454       is in the data cache.  It is important
  455       to note that this cache is NOT write-through,
  456       that is, when a data granule is updated,
  457       it is not automatically written to the
  458       file.  This means that a comgroup may
  459       be active for a long period of time,
  460       with many messages being written and
  461       read, without ever having to access
  462       the file.
  463
  464       Thus a comgroup contains four basic
  465       structures: the station tree, the message type tree,
  466       the disk cache tree, and the anonymous queue (which is really
  467       superimposed on one of the first two).  These
  468       structures, together with the various message
  469       queues, form the essential elements of an
  470       active comgroup.
  471      ..::L2 "DCB Stations\\X"
  472       This section discusses the facilities available
  473       to a DCB station on a comgroup.
  474
  475       Like all stations, a DCB station's activities
  476       consist of reading and writing messages.  This is
  477       accomplished by means of the M$READ and M$WRITE
  478       monitor services.  However, the ability to do so
  479       is limited in various ways by the administrative
  480       user (if any) of the comgroup, and by the access
  481       that the user has to the comgroup.  First, reading
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           14   
  482       and writing require, respectively, READ and WRITE
  483       access to the comgroup file.  Second, neither
  484       can be done until the station has been activated.
  485       A detailed discussion of this aspect may be
  486       found in the subsection on administration; but, in
  487       brief, a station is restricted from reading
  488       and writing until it is 'activated'.  Activation
  489       and deactivation of stations takes place at
  490       the whim of the AU.  M$READ and M$WRITE
  491       service requests return an error if the
  492       DCB station is deactivated.
  493       Third, the AU may
  494       restrict, or supply defaults for, the options
  495       applicable to M$READ and M$WRITE directed at
  496       the comgroup.
  497
  498       Associated with each DCB may be
  499       a set of defaults for I/O options applicable to
  500       M$READ and M$WRITE.  These
  501       defaults are contained in a structure called
  502       VLP_SETSTA.  Refer to the discussion of this
  503       structure for details regarding the way in
  504       which it supplies defaults for, and
  505       restricts, the options available.
  506       VLP_SETSTA may be associated with the DCB
  507       in any one of three ways.  First, it may
  508       be specified on a !SET command.  Next, it may
  509       be supplied on M$OPEN, in which case it will
  510       unconditionally replace that specified on !SET.
  511       Thus, by the time the DCB attempts to join
  512       the comgroup, it may have a VLP_SETSTA associated
  513       with it.  The comgroup itself may have a
  514       VLP_SETSTA, supplied by the AU, which is to
  515       be applied to all DCB stations.  This is
  516       a complex procedure if the DCB already
  517       has a VLP_SETSTA.  The process which
  518       takes place is exactly the same as that
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           15   
  519       which takes place when an M$READ or M$WRITE
  520       supplies a VLP_STATION through a DCB which
  521       possesses a VLP_SETSTA, and is described
  522       in detail in the discussion of VLP_SETSTA.
  523       In brief, however, the ILOCK and OLOCK
  524       bits in the comgroup's VLP_SETSTA specify
  525       whether the DCB's VLP_SETSTA is to be
  526       overridden (LOCK = YES) or simply
  527       augmented (LOCK = NO) by the comgroup
  528       VLP_SETSTA.  The result of this process
  529       is a single VLP_SETSTA associated with
  530       the DCB which cannot be altered by the
  531       AU as long as the DCB remains connected
  532       to the comgroup.
  533
  534       The M$WRITE service creates a
  535       message in the comgroup, and supplies the
  536       data, message type, and destination.  The
  537       data is supplied in the BUF parameter, and the
  538       other options of interest in the STATION
  539       parameter, which frames a VLP_STATION.  These
  540       parameters may be supplied as defaults in, or be
  541       overridden by, the VLP_SETSTA in the DCB
  542       and LASTSTA$ in the DCB.  The latter
  543       is a VLP_STATION describing the message most
  544       recently read or written by the station.
  545       If LSTAOR is set in the DCB, then LASTSTA$
  546       is updated only by M$READ; otherwise it
  547       is updated by M$WRITE as well (see M$OPEN).  Note
  548       that in the case of a streamed DCB, the LASTSTA$
  549       involved is that in the 'real' DCB.   This
  550       means that if two DCBs correspond to a single
  551       comgroup station via streaming, an M$READ
  552       through the first DCB will set the effective
  553       LASTSTA$ for the next M$WRITE through either
  554       DCB.  Currently the only use of LASTSTA$ is
  555       to assign destination on M$WRITE if it is not
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           16   
  556       otherwise specified, that is, if neither
  557       M$WRITE nor VLP_SETSTA in the DCB
  558       specify destination, then LASTSTA$
  559       is used.
  560
  561       The message may be directed to
  562       the anonymous queue or one or more specific
  563       stations.  Writing to stations not currently
  564       connected to the comgroup is controlled by
  565       an option in VLP_STATION.  The message may
  566       be latched to a currently-latched input
  567       message (see the discussion of LATCH below).
  568       All of these possibilities are discussed in
  569       detail under VLP_STATION.
  570
  571       If the CONT option is specified on M$WRITE,
  572       it means that the service is not to create
  573       a single message, but rather to accept the
  574       data being written as one part of a message.
  575       This option can be used to create a message
  576       of arbitrary length, irrespective of the
  577       AU-set limit on message size, since there
  578       is no limit to the sum of the sizes of the
  579       parts of a message created in this way.
  580       A message which is to be created in N parts
  581       is built by issuing N M$WRITE services,
  582       where the first (N-1) of them specify
  583       CONT = YES, and the last specifies CONT = NO.
  584       Such a message is referred to as a continued
  585       message.  When read by a DCB station, a
  586       continued message is seen as a single 'record'
  587       of data, that is to say the DCB station has
  588       no way of knowing that the message was written
  589       with CONT, much less any knowledge of the
  590       sizes of the individual parts.  Note then
  591       that CONT on M$WRITE has nothing to do
  592       with CONT on M$READ (see below).  On the
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           17   
  593       other hand, when a continued message is read
  594       by a terminal station, the situation is
  595       reversed.  The terminal receives, in succession,
  596       each part of the message exactly as supplied
  597       by the M$WRITE.  By 'in succession' we mean that
  598       when a terminal 'reads' for a message and happens
  599       to find a continued one, then the data supplied
  600       in response to that 'read' is the first part
  601       of the message (corresponding to the first
  602       M$WRITE), and subsequent 'reads' receive the
  603       rest of the parts in order.  The terminal station
  604       may not read the continued message as a single
  605       concatenated 'record'.  Note that in future releases
  606       TERMINAL stations may read CONTinued messages
  607       in the same manner that DCB stations read them.
  608       If so, however, a method will be provided to
  609       produce the current behavior.
  610
  611       The M$READ service reads one message
  612       from the comgroup.  The message data is to
  613       be read into the buffer specified by BUF.
  614       The maximum size of the buffer is 4096 bytes
  615       (this is independent of the comgroup control parameter
  616       MAXMC).
  617       The options controlling the read are specified
  618       by the STATION parameter which frames a VLP_STATION.
  619       The first important distinction provided therein
  620       is which queues are to be searched.  If DIRONLY
  621       is specified, then only messages written directly
  622       to this station are to be considered.  Otherwise,
  623       the anonymous queue will be searched if no
  624       directed message is found.  Next, the reader
  625       may limit the set of messages to be considered
  626       by restricting message type and/or origin station.
  627       This is done through the MSGTYP and STATION
  628       options in VLP_STATION.  Thus specifying
  629       MSGTYP = AB? and STATION = GORGO causes the
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           18   
  630       read request to search for a message from
  631       station GORGO with message type beginning with
  632       AB.  The ability to do this may be
  633       limited by the AU, who may define a restricted
  634       set of stations and/or message types in his
  635       comgroup; thus attempting to read for
  636       message type ABX may produce an error if
  637       that message type could never exist.
  638
  639       Within the set of available such
  640       messages, that of highest priority and
  641       least recent submittal time is selected.
  642       If no qualifying message is available
  643       immediately, then normally the read request is
  644       left pending, to be satisfied when one
  645       such message is written.  The reader may, however,
  646       specify EOFNONE, requesting an end-of-file
  647       error in such a case.
  648      The reader may also specify EOFTIME= n requesting an
  649      end-of-file error if n seconds go by without any
  650      messages entering the comgroup to satisfy this read.
  651
  652       When the DCB is closed, its station
  653       disconnects from the comgroup.  Depending upon
  654       control parameters established by the AU, this
  655       may or may not result in any unread messages written
  656       to the disconnecting station being deleted.  In the latter
  657       case the messages will still be available when
  658       a DCB (or TERMINAL) re-connects to the comgroup
  659       under the same station name.  Note, however, that
  660       messages written by the disconnecting station
  661       are in no way affected by the disconnection.
  662       This fact illustrates the essential disjunction
  663       between member stations.  Once a message
  664       has been written, it 'disappears' into the
  665       comgroup, to be delivered if and when the
  666       destination station wishes to read it, and is
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           19   
  667       not visible in any way to the originator.
  668
  669       When a message is found as a result
  670       of an M$READ, it is attached to the
  671       reading station as its current input
  672       message.  Once this has occurred, then
  673       LASTSTA$ in the DCB (which is a
  674       VLP_STATION pointed to by F$DCB.LASTSTA$)
  675       will be updated to reflect the message
  676       found.  Note that this updating will
  677       take place even if an error condition
  678       is encountered while transferring the
  679       data.  Errors encountered before a
  680       message is found (illegal parameters,
  681       for example) do NOT update LASTSTA$.
  682       The CONT option (see FPT_READ)
  683       may be used to read the message in
  684       sections, if the buffer is not sufficiently
  685       large.
  686
  687       The LATCH option for M$READ has multiple
  688       effects.  When an M$READ with LATCH finds
  689       a message, that message is attached to the
  690       reading station as its current latched input
  691       message.  Such a message may NOT be deleted
  692       until it has been read successfully and in
  693       entirety.  Once it has been so read, it
  694       may be unlatched and deleted in one
  695       of two ways: by issuing another M$READ, or
  696       by issuing the M$UNLATCH service and specifying
  697       DELETE.  If a message is latched but has
  698       not been successfully read, it can only
  699       be unlatched through M$UNLATCH, and then
  700       cannot be deleted.  Instead, it can be
  701       put back in the queue from which it came
  702       (RERUN), or placed in hold status for
  703       the AU to examine it (HOLD).
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           20   
  704
  705       Note that re-reading a message takes
  706       different forms depending on whether
  707       CONT or simply LATCH is used.  If
  708       LATCH is used without CONT, then every
  709       M$READ will attempt to transfer the
  710       entire message.  When CONT is used,
  711       each M$READ attempts to transfer only
  712       the unread portion of the message.
  713
  714       If a DCB station possesses
  715       a successfully-read latched input message,
  716       it can 'latch' output messages to the
  717       input message.  This is accomplished by
  718       specifying LATCH on M$WRITE.  Such latched outputs
  719       are invisible, that is, they do not really
  720       go to their destination but are saved at
  721       the originating station, to be transmitted
  722       when they are unlatched.  The message ID created
  723       for a latched output message is related to
  724       that of the latched input message.  See the
  725       discussion of MSGID and MSGIDXT in VLP_STATION.
  726       The M$UNLATCH service may be used to manipulate
  727       these messages.  It can delete the most
  728       recently-written latched output, or all
  729       of them.  It can also, in conjunction with
  730       unlatching the input message, send all
  731       the latched outputs to their respective
  732       destinations, or delete them.
  733
  734       Closing a DCB causes an
  735       implicit M$UNLATCH.  If the DCB is closed
  736       SAVE, then the latched input is deleted and
  737       the latched outputs sent to their destination;
  738       otherwise, the latched input is sent to the HOLDSTA
  739       (or is RERUN if there is no HOLDSTA) and the
  740       latched outputs are deleted.  Note that this latter
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           21   
  741       action is taken in ALL cases other than an
  742       explicit M$CLOSE with SAVE, in particular, if
  743       the reading program exits or aborts.
  744
  745       The LATCH feature is therefore
  746       useful if the program wishes to ensure
  747       that the input message and any resulting
  748       output messages are processed completely
  749       before any irrevocable action (i.e., deleting
  750       the input or sending any outputs) is taken.
  751      ..::L2 "Terminal Stations\\X"
  752       A terminal station joins a comgroup
  753       by logging on to CP-6 with a logon that has
  754       been specified by the system manager to cause
  755       connection to a particular comgroup.  Such
  756       a logon has associated with it a parameter
  757       indicating to the CP-6 system the action to be taken
  758       in the event that the comgroup is not
  759       active.  This action may be one of the following:
  760       disconnect the terminal (to permit another
  761       logon), send an explanatory message and
  762       wait, or simply wait.  The latter two
  763       cases cause the terminal to remain connected
  764       to the CP-6 system, waiting for the comgroup to become
  765       active.  A terminal in this state is said to
  766       be in 'limbo'.  When the comgroup becomes active,
  767       the terminal will be connected to it.  Note that
  768       the same sequence of events takes place for
  769       all TERMINAL stations on a comgroup when the
  770       last DCB leaves the comgroup and thus causes
  771       it to become inactive.
  772
  773       The CP-6 system makes no attempt to force a comgroup
  774       to become active when a terminal attempts to connect to it.
  775
  776       Once the terminal has been connected,
  777       it may or may not be activated, depending on
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           22   
  778       the whim of the comgroup's AU and/or the
  779       pre-established control parameters in the
  780       comgroup.  Until it is activated, it can
  781       neither send nor receive data.  However, DCB stations with TCTL
  782       permission are permitted to make use of Terminal Control services
  783       for an inactive terminal.
  784       ..::HL "(See Section 5, Terminal Services.)"
  785
  786       When activation occurs, the comgroup will
  787       begin to read and/or write the terminal.
  788       This activity is controlled by parameters
  789       associated by the system manager with the
  790       logon used: terminals may be designated as
  791       INPUT or OUTPUT or both.  An INPUT terminal
  792       may only submit data to the comgroup; an
  793       OUTPUT terminal may only receive data from the
  794       comgroup.  The classic examples of such terminals
  795       are, respectively, card readers and line printers.
  796       Terminals may be designated as both input and
  797       output.  For example, operator consoles are
  798       INPUT/OUTPUT terminals on a special system-controlled
  799       comgroup, and as such are permitted to send
  800       data to the comgroup (KEYINs), and receive
  801       data (operator console messages).
  802
  803       Terminal stations, unlike DCB stations,
  804       have their input controlled by the
  805       comgroup.  Whereas a DCB station may write a
  806       message at any time, a terminal station may
  807       only submit a message when the comgroup 'reads'
  808       for one.  Thus INPUT terminals 'write' messages
  809       into the comgroup in response to the comgroup
  810       'reading' for data.  When a terminal is activated,
  811       the comgroup will perpetually 'read' for data
  812       from the device; this process ceases when the
  813       terminal is deactivated by the AU.  This control
  814       is necessary because most terminals require
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           23   
  815       the comgroup to request data from them before
  816       they will submit data (e.g., card readers).
  817       On the other hand, certain terminal devices
  818       (operator consoles, for example) will submit
  819       data of their own volition.  In either case
  820       it suffices to have the comgroup perpetually
  821      requesting data by the following mechanism.  The comgroup
  822      sends a message to the terminal handler to request data.  In the
  823      message are three items that can be configured in the comgroup.
  824      First is the number of messages that the terminal is permitted
  825      to send (MAXRD).  Second is the size that each message may be (i.e.,
  826      TRMRDSIZ).  Third is the kind of "reading" to do (TRANS, REREAD, and
  827      BIN in DVBYTE).  The message also always specifies WAIT=NO
  828      ..::HL "(see M$READ elsewhere in this section).\(see M$READ WAIT)."
  829      The comgroup sends this message first when the station is
  830      activated, and thereafter at intervals determined by MINRD; namely
  831      every time another (MAXRD-MINRD) messages have been received.
  832      This mechanism ensures that the terminal gets another request before
  833      it has sent MAXRD messages after the last request, since then it would
  834      have to save any further messages somewhere.  Guidelines for setting
  835      MAXRD and MINRD are discussed in the parameter descriptions where
  836      VLP_CGCP is discussed.  The MAXRD and MINRD values are established
  837      for the entire comgroup in VLP_CGCP, and may be altered for a
  838      specific terminal station by means of the MAXRD and MINRD parameters
  839      of M$ACTIVATE and M$DEACTIVATE.
  840
  841      Because the 'reads' are done with WAIT=NO, input from the terminal station will
  842      normally interrupt output from the application in order to display the prompt
  843      and echo the input message as it is received.  Output is temporarily held up in
  844      the comgroup until the input message has been completed.  This behavior is not
  845      required if TRANS=YES is specified, however; because in that case, no prompt is
  846      displayed, and the input characters are not echoed.  Some applications will
  847      require that input from terminal stations be disallowed until a DCB station has
  848      had a chance to configure the terminal station properly.  For example, unless
  849      TRANS=YES is used, it is always a good idea for INPUT/OUTPUT terminal stations
  850      to be configured via M$EOM's EOMTIME option to prevent output from backing up
  851      indefinitely in the comgroup.  By setting TERMCONAU=NO, TERMCONNAU=NO,
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           24   
  852      TERMCONLGL=YES, and AUCONTERM=NC in the comgroup with VLP_CGCP, a terminal
  853      station can connect at any time, but will remain inactive, and therefore
  854      incapable of input or output, until a DCB station issues M$ACTIVATE for it.
  855
  856      Note that terminal stations
  857       under normal conditions only submit messages
  858       to the anonymous queue.  The only exceptions
  859       to this rule are for certain special cases.
  860       All of the exceptions may be classified
  861       under the heading of 'control messages';
  862       thus terminal stations cannot submit
  863       true 'data' messages other than to the
  864       anonymous queue.
  865
  866       OUTPUT terminals are a slightly
  867       different case.  From the comgroup's point
  868       of view, they, like DCB stations, request
  869       data from the comgroup by 'reading' for it.
  870       Note that a terminal station may only read
  871       messages written directly to it; it may
  872       not read from the anonymous queue.  Most
  873       terminal devices are unintelligent, in the
  874       sense that they read for 'any' message and
  875       thus will always read the message at the
  876       front of their queue.
  877       Connection of an OUTPUT terminal to a comgroup
  878       causes the CP-6 system to perpetually 'read' the
  879       comgroup for data on behalf of the terminal.  Thus when an
  880       operator console logs on to the CP-6 system,
  881       it will perpetually request the
  882       comgroup for messages, and output them
  883       on the device as they become available.
  884
  885       It is now appropriate to
  886       state the following example.  All
  887       operator consoles are connected as terminal stations to
  888       a single system-controlled comgroup.
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           25   
  889       This comgroup is managed by a CP-6
  890       process which has a single DCB open
  891       to it.  KEYINs typed on the consoles
  892       are input by their terminal stations
  893       into the comgroup's anonymous queue.
  894       The DCB station perpetually reads the
  895       anonymous queue.  When it reads a message
  896       (i.e., a KEYIN), it processes it as
  897       appropriate.  If the KEYIN requires a
  898       response, the DCB station writes that
  899       response directly to the station which
  900       submitted the original message.  Since
  901       the terminal is perpetually reading for
  902       messages from the comgroup, this response
  903       message is eventually read, and appears
  904       on the originating console.  In addition,
  905       each console
  906       receives a certain subset of all system
  907       activity messages (e.g., requests for
  908       tape mounts).  The DCB station takes each
  909       such message and writes it to every terminal
  910       station that corresponds to a console
  911       designated for that information.
  912       Thus each terminal station is continually
  913       receiving messages with data consisting
  914       of informational text.  Again, since the
  915       terminal station is perpetually reading the
  916       comgroup, these messages are read and
  917       output on the console.
  918      ..::L2 "FPRG Terminal Stations\\X"
  919       An FPRG terminal station is a terminal station
  920       attached to an FPRG (Front-end user PRoGram)
  921       instead of a device. This FPRG is in turn attached
  922       to a device. This type of connection allows an
  923       intelligent process to be inserted between the
  924       comgroup and a device allowing more customized
  925       device interactions. FPRG terminal stations are
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           26   
  926       created via the M$ACTIVATE monitor service.
  927
  928       Two forms of FPRG terminal station exist; pure
  929       FPRG terminal stations and transformed FPRG
  930       terminal stations. All FPRG terminal stations are
  931       created by referencing a normal terminal station.
  932       Transformed FPRG terminal stations are actually the
  933       referenced terminal stations transformed into
  934       FPRG terminal stations. Pure FPRG terminal stations
  935       are created anew with, of course, their own station
  936       name and upon creation are completely independent
  937       of the referenced terminal station. The FPRG for
  938       either a pure or a transformed FPRG terminal station
  939       is attached to the same device as the reference
  940       terminal station.
  941
  942       FPRG terminal stations require the presence of an AU.
  943       As a result of this, FPRG terminal stations may
  944       not exist without the presence of an AU. Whenever
  945       the AU disconnects from the comgroup, all FPRG
  946       terminal stations are automatically deactivated.
  947       This deactivation will cause transformed FPRG
  948       terminal stations to revert to deactivated normal
  949       terminal stations and cause pure FPRG terminal
  950       stations to be disconnected from the comgroup.
  951      ..::L2 "Administration\\X"
  952       This section discusses in some
  953       detail the powers and responsibilities of
  954       a comgroup administrative user (AU).
  955
  956       A comgroup may have at most
  957       one AU at any given time.  The AU is
  958       a DCB station having special powers to
  959       control the comgroup.  In order to
  960       become the AU of a comgroup, a CP-6 user
  961       must open a DCB to that comgroup and
  962       request (via the AU parameter on M$OPEN)
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           27   
  963       to become AU.  The request is accepted
  964       provided that the comgroup does not
  965       presently have an AU and the user's account
  966       has AU access to the comgroup file.  Note
  967       that an AU station may use any station name
  968       it wishes.
  969
  970       Upon joining the comgroup as
  971       AU, the DCB acquires certain powers
  972       and responsibilities.  The powers take
  973       the form of special monitor services
  974       which change and control the comgroup.
  975       The responsibilities take the form of
  976       certain actions which the comgroup expects
  977       the AU to take in order to ensure proper
  978       operation of the comgroup.
  979
  980       It is important to note that
  981       a comgroup is not required to have an AU.
  982       The default comgroup control parameters
  983       are set up in such a way that a small
  984       and simple comgroup application need
  985       never have an AU connected to the
  986       comgroup.  Furthermore, certain large
  987       and complex, but relatively stable
  988       applications may only require an
  989       AU to connect to the comgroup once
  990       (in order to establish the desired
  991       control parameters).  Thereafter,
  992       the comgroup is capable
  993       of running without the aid of an
  994       AU.  Only when the complexity of the
  995       environment in the comgroup exceeds
  996       the ability of the CP-6 system to control the
  997       comgroup's operations, is the
  998       constant presence of an AU required.
  999
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           28   
 1000       The AU controls the comgroup
 1001       by means of special information provided him
 1002       by the comgroup, and
 1003       by means of the following special
 1004       monitor services: M$CGCTL, M$ACTIVATE,
 1005       M$DEACTIVATE, and M$FWCG.
 1006
 1007       M$CGCTL establishes the parameters
 1008       which tell CP-6 file management how the comgroup is to
 1009       be operated.  The details may be found
 1010       in the section describing this monitor
 1011       service.  Essentially, however, M$CGCTL
 1012       describes the physical parameters of the
 1013       comgroup, and
 1014       allows a wide range of different 'types'
 1015       of comgroups to be established.  For
 1016       example, the AU can supply a list of
 1017       legal station names and message types
 1018       for his comgroup, and further specify
 1019       that any others are illegal.
 1020       He can also provide a VLP_SETSTA
 1021       which specifies defaults for, or
 1022       restrictions on, DCB stations'
 1023       read and write operations.
 1024
 1025       M$CGCTL specifies how
 1026       much main memory is to be allocated
 1027       to the active comgroup, and how that
 1028       memory is to be divided between the data
 1029       cache and everything else.  A single comgroup
 1030       is currently limited to 250 pages of
 1031       main memory.
 1032
 1033       The special information provided
 1034       to the AU, in order to aid in control of
 1035       the comgroup, takes many forms.  The AU
 1036       may, via M$CGCTL, specify which types
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           29   
 1037       of such information he wishes to receive.
 1038
 1039       The M$ACTIVATE and M$DEACTIVATE
 1040       services are used to perform control actions
 1041       on specific stations.
 1042       Their most important
 1043       function is to activate, deactivate, and
 1044       disconnect stations.
 1045
 1046       A station may not read and write
 1047       messages unless it is 'activated'.  The AU
 1048       may activate or deactivate a station at any
 1049       time.  Furthermore, TERMINAL stations may
 1050       be disconnected from the comgroup and from
 1051       the CP-6 system by means of M$DEACTIVATE with DISCONNECT
 1052       specified.  A DCB station will receive a
 1053       'deactivated' error if it issues an M$READ
 1054       or M$WRITE service and is not active.  Note
 1055       also that if a DCB station has a read request
 1056       pending and is then deactivated by the AU,
 1057       the request is terminated with the same
 1058       error.
 1059
 1060       In addition to activation and deactivation,
 1061       other actions (such as deleting
 1062       a station's message queue and creating FPRG
 1063       terminal stations) may be specified.
 1064
 1065       The M$FWCG service selects a subset
 1066       of the messages within a comgroup,
 1067       and then optionally produces a
 1068       report concerning the messages
 1069       found, as well as optionally
 1070       deleting or changing them.
 1071       The report feature is limited
 1072       to users having AURD access to
 1073       the comgroup.  The delete or
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           30   
 1074       change feature is limited to
 1075       the AU.
 1076
 1077       The M$CGINFO service provides a
 1078       snapshot of the current state of various
 1079       parts of the comgroup.  Its use is not limited
 1080       to the AU; any DCB station which has AURD
 1081       access to the comgroup file may issue this
 1082       service.
 1083
 1084       The information provided to the
 1085       AU by the comgroup takes the form of special
 1086       messages directed to his station.  These
 1087       messages are distinguished by their message
 1088       type: '*AUEV'.  Each such message has a
 1089       code in it, indicating what event caused
 1090       the message to be generated.  The messages
 1091       are:
 1092
 1093
 1094       .FIF
 1095      }             MESSAGE                       EXPLANATION
 1096      }
 1097      }       DCB open                  A DCB has joined the comgroup
 1098      }
 1099      }       TERMINAL connect          A TERMINAL station has joined
 1100      }                                 the comgroup
 1101      }
 1102      }       DCB close                 A DCB station has left the comgroup
 1103      }
 1104      }       TERMINAL disconnect
 1105      }                request          A TERMINAL station is attempting to
 1106      }                                 leave the comgroup (see DSCREQ in
 1107      }                                 VLP_CGCP).
 1108      }
 1109      }       TERMINAL disconnect       A TERMINAL station has left
 1110      }                                 the comgroup
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           31   
 1111      }
 1112      }       TERMINAL break            A TERMINAL station has submitted
 1113      }                                 a break event.  This can be
 1114      }                                 an asynchronous terminal device
 1115      }                                 BREAK key or CONTROL-Y, or
 1116      }                                 a card reader sending input-ready.
 1117      }
 1118      }       UNLATCH                   A DCB station has issued an
 1119      }                                 M$UNLATCH service that caused
 1120      }                                 a message or messages to be
 1121      }                                 unlatched.  The type of the
 1122      }                                 unlatch performed (rerun, hold,
 1123      }                                 or delete) is designated.
 1124      }
 1125      }       WARNING                   The comgroup file has become
 1126      }                                 low on disk space, or the
 1127      }                                 amount of main memory available
 1128      }                                 to the comgroup has become
 1129      }                                 low.
 1130      }
 1131      }       FWCG report               A report has been generated
 1132      }                                 by M$FWCG concerning the
 1133      }                                 selected messages due to
 1134      }                                 INFORM=YES being specified.
 1135      }
 1136      }       Journalled message
 1137      }                  deleted        A previously journalled message
 1138      }                                 has been deleted from the
 1139      }                                 comgroup.
 1140      }
 1141      }       FPRG TERMINAL exit        An FPRG TERMINAL station is now at
 1142      }                                 jobstep due to issuing an M$EXIT. It
 1143      }                                 will now accept an M$SETFP call.
 1144      }
 1145      }       FPRG TERMINAL abort       An FPRG TERMINAL station is now at
 1146      }                                 jobstep due to aborting. The reason
 1147      }                                 for the abort is reported in
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           32   
 1148      }                                 B$CGAURD.INFO in B$JIT.ERR form.
 1149      }                                 It will now accept an M$SETFP call.
 1150      }
 1151      }       FPRG TERMINAL ldtrc       An FPRG TERMINAL station just
 1152      }                     complete    successfully completed an M$LDTRC.
 1153      }                                 The B$CGAURD structure may be
 1154      }                                 followed immediately by a VLP_FPRG
 1155      }                                 to obtain the new FPRG's description.
 1156
 1157       .FIN
 1158       The structure of such messages is detailed in the
 1159       discussion of the macros B$CGAURD and B$CGAUCI.
 1160       In general, however, each message contains
 1161       information pertinent to the event which
 1162       has occurred.  For example, the information
 1163       accompanying the TERMINAL CONNECT message
 1164       includes the station name with which the
 1165       device has joined the comgroup, the name
 1166       and account it specified in logging on to
 1167       the CP-6 system, and information about the device's
 1168       physical characteristics.
 1169
 1170       These special messages have the highest
 1171       priority of any message in the comgroup.  Therefore,
 1172       if an AU reads through his AU DCB without specifying
 1173       any STATION or MSGTYP restrictions, he will naturally
 1174       receive AUEV messages in preference to any other messages
 1175       which may be present.  The comgroup, however, takes
 1176       even stronger measures to ensure prompt delivery of
 1177       these messages.  The STATION and MSGTYP parameters
 1178       specified on an M$READ through an AU DCB will be
 1179       ignored if an AUEV message is present.  In other
 1180       words, an AU must be prepared to receive AUEV
 1181       messages in response to an M$READ that attempts
 1182       to read, for example, only messages of type 'XYZ'.
 1183
 1184       An important responsibility of an AU is the
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           33   
 1185       maintenance of available space in the comgroup.
 1186       The AU's interaction with CP-6 file management to this end is
 1187       rather complex.
 1188
 1189       First, and simplest, is the control of
 1190       the comgroup file.  The size of the file is
 1191       established first by the IXTNSIZE parameter on
 1192       M$OPEN.  Any subsequent increase must take place
 1193       via the M$EXTEND monitor service.  In this sense
 1194       a comgroup is treated like a RANDOM file:  CP-6 file management
 1195       will never automatically allocate more space to
 1196       the file.  The file can be viewed as consisting
 1197       of three sections: the control area, the save
 1198       area, and the message storage area.  The control
 1199       area is of concern only to CP-6 file management, and is about
 1200       one granule in length.  The save area is the section
 1201       of the file to which the active comgroup is
 1202       written when the comgroup becomes inactive.  The
 1203       size of this area is MAXPG granules, where MAXPG
 1204       is the parameter specified in VLP_CGCP.  Since
 1205       this parameter can be changed at any time by
 1206       the AU, CP-6 file management ensures that the save area will
 1207       be available when needed by reserving the
 1208       appropriate number of granules in the file
 1209       for that purpose.  Note then, that an M$CGCTL
 1210       service which attempts to increase MAXPG may
 1211       be rejected if the file contains insufficient
 1212       free space for the necessary increase to the
 1213       save area.
 1214
 1215       The rest of the file is dedicated to
 1216       message storage.  It is this section of the
 1217       file that is cached in the data cache tree.
 1218       Data cache granules are written to this section
 1219       of the file as required.  Note, however, that
 1220       every data block, and hence every data cache
 1221       page, logically belongs on disk and thus
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           34   
 1222       causes space to be allocated from the message
 1223       storage area of the file.  Thus, no matter
 1224       how large the data cache may be, the message
 1225       storage area of the file must be sufficiently
 1226       large to hold the data blocks of all the messages
 1227       in the comgroup.  In order to
 1228       allow the file to grow if necessary, the comgroup
 1229       will send a special warning message to the AU
 1230       when the amount of free space in the message
 1231       storage area of the file sinks below a
 1232       preselected level.  The AU is then expected
 1233       to react by M$EXTENDing the file.
 1234       Should the message storage area become full,
 1235       the comgroup is considered to be full (see below).
 1236
 1237       The second interaction concerning
 1238       availability of space has to do with the active
 1239       comgroup.  The comgroup must have sufficient
 1240       main memory to hold the station and message type
 1241       trees, as well as a minimum of one MBLK per
 1242       message queue.  Full details are given in the
 1243       subsection on performance considerations.  In brief,
 1244       however, the amount of memory consistent with
 1245       efficient operation fluctuates with the level
 1246       of activity in the comgroup, since the CP-6 system will
 1247       attempt to acquire memory for the above items
 1248       and will resort to spilling MBLKs to disk if
 1249       memory is not available.  This has limited
 1250       effect in the sense that the station and message
 1251       type trees cannot be so spilled, and thus
 1252       a situation may arise where the comgroup
 1253       cannot obtain sufficient memory to operate;
 1254       the comgroup is then considered to be full.
 1255       In order to prevent this situation, and to
 1256       allow the AU to ensure efficient operation of
 1257       the comgroup if he so desires, a special
 1258       warning message will be sent to the AU should
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           35   
 1259       the amount of potentially-available memory
 1260       sink below a preselected level.  The AU can
 1261       then react by increasing the MAXPG parameter.
 1262
 1263       When a comgroup becomes full as
 1264       a result of insufficient disk space or main
 1265       memory, the following specific actions
 1266       are taken.  First, all TERMINAL stations
 1267       are disassociated from the comgroup as though
 1268       the comgroup had become inactive through
 1269       the disconnection of its last DCB.  Next,
 1270       the comgroup control parameters are altered
 1271       to disallow activity in the comgroup;
 1272       specifically:
 1273
 1274      .FIF
 1275      }   TERMCONLGL     is set to NO
 1276      }   DCBCONLGL      is set to NO
 1277      }   DCBCONAU       is set to NO
 1278      }   DCBCONNAU      is set to NO
 1279      }   TERMCONAU      is set to NO
 1280      }   TERMCONNAU     is set to NO
 1281      }   AUCONDCB       is set to DEACTIVATE
 1282      }   AUDCONDCB      is set to DEACTIVATE
 1283      }   AUCONTERM      is set to DEACTIVATE
 1284      }   AUDCONTERM     is set to DEACTIVATE
 1285      .FIN
 1286
 1287       (see VLP_CGCP for the meanings of these
 1288       parameters).  Last, all DCB stations
 1289       are deactivated, INCLUDING the AU's station.
 1290       Thus, the AU is informed that the comgroup
 1291       became full by his being deactivated.
 1292
 1293       When faced with this situation, the
 1294       AU must first rectify the cause; that is,
 1295       he must allocate more space in the comgroup
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           36   
 1296       file and/or increase the value of MAXPG.  This
 1297       is possible since neither M$EXTEND nor M$CGCTL
 1298       requires that his AU station be activated.
 1299       Then, DCB stations may be selectively re-activated,
 1300       including the AU's own station (note that M$ACTIVATE
 1301       also may be issued when the AU is deactivated).
 1302       Finally, TERMINAL stations which are in 'limbo'
 1303       may be re-connected to the comgroup by issuing
 1304       M$CGCTL setting TERMCONLGL to YES again.
 1305       Naturally, if the comgroup has no AU it simply
 1306       stops operation until such time as an AU
 1307       joins and takes appropriate action.
 1308      ..::L2 "Performance Considerations\\X"
 1309       The performance level of a comgroup
 1310       is indirectly controlled by the AU, or more exactly
 1311       by the control parameters he establishes.  The
 1312       main factor here is the amount of main memory
 1313       available to the comgroup.
 1314
 1315       The system manager, via the PIG
 1316       processor, establishes for each file management
 1317       account a limit on the total main memory
 1318       available to all comgroups residing in that
 1319       account.  Thus the comgroups in a file management
 1320       account 'draw' their main memory from a common
 1321       well.  Next, each comgroup has a limit on the
 1322       main memory it may acquire when active.  This
 1323       limit is established by the AU (MAXPG in VLP_CGCP).
 1324       A comgroup will normally acquire memory only
 1325       as needed, up to that limit.  However, an AU
 1326       may set a lower limit (MINPG in VLP_CGCP)
 1327       on his comgroup's main
 1328       memory utilization, thus forcing CP-6 file management to allocate
 1329       that amount to the comgroup the instant it
 1330       becomes active.  This guarantees that the
 1331       comgroup will have at least that much memory
 1332       available.  This feature is useful because
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           37   
 1333       of course there is no guarantee that a given
 1334       comgroup will be able to acquire memory when
 1335       it needs to (due to the account limit).
 1336
 1337       A comgroup's requirements for memory
 1338       come from three sources: data cache, MBLK storage,
 1339       and 'permanent' storage (the station and message-type
 1340       trees).  Memory is divided into two 'buckets':  data
 1341       cache and everything else.  The size of
 1342       each of these 'buckets' is controlled by the AU
 1343       through the MAXPG, MINPG, and DATAPGS parameters (see VLP_CGCP).
 1344       The 'permanent' storage requirement is a fairly static
 1345       one, since message types are rarely
 1346       redefined and the number of stations is in
 1347       most cases almost constant.
 1348       The two former sources are different, however.
 1349       The amount of memory required here varies
 1350       according to the number and size of the
 1351       messages in the comgroup, which can vary
 1352       rapidly and widely.  Thus the problem of
 1353       managing the comgroup might seem to be
 1354       an intractable one.  However, the CP-6 system makes
 1355       a great effort to smooth out such fluctuations.
 1356
 1357       In the first place, the data cache
 1358       automatically spills to disk the data parts
 1359       of messages not immediately required, and does
 1360       so in an efficient manner.  The CP-6 system permits the
 1361       data cache to grow to the maximum size set
 1362       by the AU, but releases memory from the cache
 1363       when it is not required.  Clearly, then, a
 1364       comgroup will operate with a very small data
 1365       cache, but will benefit from a larger one.
 1366       The AU must balance the cost of additional
 1367       disk I/O against the cost of memory residency
 1368       in deciding what maximum he will establish
 1369       for the data cache size.  Note that cache
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           38   
 1370       I/O activity, as well as all other 'hidden'
 1371       overhead in the operation of the comgroup,
 1372       is charged to the comgroup file's creator.
 1373
 1374       In the second place, the CP-6 system will
 1375       spill to disk the MBLK parts of messages
 1376       if the comgroup cannot fit them into memory.
 1377       The amount of space available for MBLK storage
 1378       is the effective maximum size of the comgroup
 1379       minus the size of the data cache, minus the
 1380       space required for the 'permanent' items.
 1381       A station tree node and message type tree node
 1382       each require on the order of 40 words of memory,
 1383       whereas an MBLK requires on the order of 16
 1384       words of memory.  Thus the AU should be able
 1385       to roughly calculate how many messages his
 1386       comgroup will hold without having to resort
 1387       to MBLK spillage.  This may be important, since
 1388       such spillage is a relatively expensive process,
 1389       except in certain special cases.  For example,
 1390       it is inexpensive to spill to disk a queue
 1391       of 10000 messages all destined for a station
 1392       which is not connected to the comgroup.  On the
 1393       other hand, a connected DCB station which is
 1394       reading its message queue and specifying
 1395       a combination of STATION and MSGTYP will cause
 1396       great overhead if its message queue is on disk,
 1397       since every M$READ will cause multiple disk
 1398       accesses.  As a rough guide then, it may be
 1399       stated that, if efficiency is desired, the
 1400       comgroup should possess sufficient
 1401       memory to hold all the messages queues that are
 1402       being accessed frequently.  Particular performance
 1403       gains will be achieved by having sufficient memory
 1404       to hold all the queues that are being accessed
 1405       out of order, that is by MSGTYP and/or STATION
 1406       as opposed to priority and time of arrival.  This
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           39   
 1407       is because message queues are ordered in the latter
 1408       way, thus that type of access simply involves picking
 1409       the message at the head of the queue.
 1410       When the CP-6 system is forced to resort to MBLK spillage,
 1411       the first candidates for spillage are queues
 1412       which are unlikely to be accessed, for example
 1413       those for absent stations.
 1414      ..::L2 "Rebuilding a Comgroup\\X"
 1415       Given certain 'backed-up' information,
 1416       an AU may in a certain sense, rebuild
 1417       his comgroup.  Beginning with a comgroup
 1418       opened in create mode, that is to say
 1419       an essentially empty comgroup, an AU
 1420       may turn that comgroup into an almost
 1421       perfect image of some other comgroup,
 1422       with as many of the original comgroup's
 1423       messages and attributes as he desires.
 1424
 1425       In order to accomplish this, two classes
 1426       of 'backed-up' information are required.
 1427       First, the AU must know all the AU-controlled
 1428       parameters of the comgroup he wishes to
 1429       recreate.  Since all of this information
 1430       in the original comgroup was supplied
 1431       by the AU (for example the control parameters
 1432       and list of legal message types), CP-6
 1433       file management makes no attempt to
 1434       aid the AU in remembering this class
 1435       of data.  The second class of information
 1436       is of course the actual messages present
 1437       in the original comgroup.  As may be
 1438       expected, the problem of preserving
 1439       this information breaks down into two
 1440       parts, that of preserving the data,
 1441       and the attributes, of these messages.
 1442       CP-6 file management provides special
 1443       capabilities which aid the AU in
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           40   
 1444       remembering and restoring this
 1445       information.
 1446
 1447       We will consider first the problem
 1448       of preserving the messages.  For those
 1449       messages which are to be preserved, the
 1450       data and attributes must be accessed from
 1451       the comgroup, and written to some private
 1452       storage medium from which they will be
 1453       restored when the comgroup is rebuilt.
 1454       There are essentially two methods of
 1455       approaching this problem.  The first,
 1456       referred to as journaling, involves
 1457       saving each message as it appears for
 1458       the first time, in other words when
 1459       it is written into the comgroup.  Since
 1460       the message is not normally visible to
 1461       the AU at this time, CP-6 file management
 1462       makes it possible for the AU to intervene
 1463       and 'see' the message before it is actually
 1464       written to its destination.  A detailed
 1465       discussion of this process is given below.
 1466       The second approach is that of deciding at
 1467       some particular time that the contents of
 1468       the comgroup are to be saved, and at that
 1469       time accessing all of the selected messages
 1470       and saving them.  This process may be
 1471       performed by use of the M$FWCG service.
 1472       In brief, it involves using M$FWCG to
 1473       re-direct the selected messages to the
 1474       AU, who will then perform the 'journal'
 1475       procedure described below, and subsequently
 1476       re-direct the messages to their original
 1477       destination.  The re-direction is required
 1478       since M$FWCG, while it can inform the caller
 1479       of message attributes, cannot access message
 1480       data.  One of the prime features
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           41   
 1481       of this approach is that unlike the first
 1482       method, it perturbs the operation of the
 1483       comgroup in a way that is 'visible' to,
 1484       and may have an effect on, other member
 1485       stations.  This is because messages
 1486       are removed from their proper queues, if
 1487       only momentarily.  The first method does
 1488       not have this effect, since the essential
 1489       disjunction between member stations makes
 1490       the 'window' during which a message is
 1491       journaled (after being written but before
 1492       being delivered to its destination) invisible
 1493       to the stations involved.
 1494
 1495       The process of journaling operates in the
 1496       following manner.  Each message type
 1497       has an attribute called JOURNAL, controlled
 1498       by the AU.  If JOURNAL is set to YES, then
 1499       every message written with that type is
 1500       to be journaled.  This means that instead
 1501       of being sent to its destination, the message
 1502       will be directed to the station given by
 1503       the AU as JRNLSTA in M$CGCTL.  Note,
 1504       however, that the destination attribute
 1505       of the message is intact, just as for
 1506       messages written to HOLDSTA as a result
 1507       of M$UNLATCH HOLD.  The designated station
 1508       then reads the message with LATCH, and
 1509       as a result obtains the message data.
 1510       The message attributes are obtained by
 1511       issuing an M$FWCG service specifying
 1512       ONEATTR, and NIL for CRITERIA (this
 1513       selects the currently-latched input
 1514       message).  The data and attributes
 1515       together are then saved appropriately,
 1516       whereupon the message is re-directed
 1517       to its proper destination via
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           42   
 1518       M$UNLATCH RERUN.  When the message is
 1519       finally deleted from the comgroup,
 1520       a JOURNAL DELETE message with a message
 1521       type of '*AUEV' is generated
 1522       and sent to the journal station.
 1523       This message informs the journal
 1524       station of the MSGID of the message
 1525       that has just been deleted.
 1526       Note that none of
 1527       the steps of this process require
 1528       the journal station to be the AU;
 1529       it need only have AURD access to
 1530       the comgroup.
 1531
 1532       We arrive now at the problem of
 1533       re-structuring the newly-opened
 1534       comgroup to be a copy of the
 1535       original.  First, the comgroup
 1536       attributes and control parameters
 1537       must be re-established via
 1538       M$CGCTL.  The information required
 1539       here may have been saved in a
 1540       variety of ways, according to
 1541       the whim of the particular AU.
 1542       Next and last, the saved
 1543       messages must be restored into
 1544       the comgroup.  This process
 1545       MUST be performed by the
 1546       AU, since it involves using
 1547       the operational form of
 1548       M$FWCG.  There are in fact
 1549       a variety of ways to do this,
 1550       but the simplest is given
 1551       here.  Each saved message is
 1552       retrieved, both data and
 1553       attributes.  The AU then
 1554       writes the message data
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           43   
 1555       into the comgroup, specifying
 1556       any message type he desires,
 1557       and himself as destination.
 1558       The completion of this write
 1559       operation will return the
 1560       MSGID, say X, in the new comgroup of
 1561       the message just created.
 1562       The AU then issues an M$FWCG
 1563       call specifying the following
 1564       criteria:
 1565       .FIF
 1566
 1567       DEST=himself
 1568       QSELECT=DIRECT
 1569       MSGID=X
 1570
 1571       .FIN
 1572       The REATTR parameter frames
 1573       the saved message attributes,
 1574       and SRA frames a VLP_SCGMA with
 1575       all the options set to YES.
 1576       The effect of this is to restore
 1577       to the message all of its original
 1578       attributes, including MSGID and
 1579       destination.
 1580       After performing this process on
 1581       all of the saved messages, the
 1582       new comgroup will contain all
 1583       of the saved messages, each
 1584       in its original state.
 1585
 1586       A few caveats are in order.
 1587       First, in order to avoid
 1588       duplicate MSGIDs in the
 1589       new comgroup, the AU should
 1590       ensure that he is the only
 1591       station connected to the
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           44   
 1592       comgroup while it is being
 1593       rebuilt (see also MSGID in VLP_SCGMA).
 1594       Second, note
 1595       that if the saved messages
 1596       were obtained by the journal
 1597       method, then the special
 1598       AU event messages will not
 1599       be saved, inasmuch as their
 1600       message type, '*AUEV', never
 1601       appears in the message type
 1602       list and thus cannot have
 1603       the JOURNAL attribute attached
 1604       to it.
 1605       */
 1606                                    /****************************************
 1607                                     ***                                  ***
 1608                                     ***            M$CGCTL               ***
 1609                                     ***                                  ***
 1610                                     ****************************************/
 1611
 1612
 1613                          /*F* NAME: M$CGCTL - Comgroup Control.
 1614
 1615                          The M$CGCTL service provides a comgroup administrative
 1616                          user (AU) with the capability to change the control
 1617                          parameters of his comgroup.  When a comgroup is created,
 1618                          all of the parameters changeable via M$CGCTL are set to
 1619                          default values.  At any time thereafter, the AU may
 1620                          change these by issuing M$CGCTL.  In general,
 1621                          changes requested through this service take effect
 1622                          immediately and will be visible to active stations
 1623                          connected to the comgroup at the time M$CGCTL is
 1624                          issued, as well as stations that become active
 1625                          later.  However, some parameters of the CGCP that
 1626                          affect the way stations are read and written to,
 1627                          such as DVBYTE, TRANS, MAXRD, MINRD, etc. will not
 1628                          affect active stations, but only stations that
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           45   
 1629                          become active after the M$CGCTL services is
 1630                          performed.  If a user wants to ensure that the
 1631                          comgroup is set up properly before stations are
 1632                          allowed to connect to it, open the comgroup with
 1633                          SHARE=NONE, perform the M$CGCTL, close the
 1634                          comgroup, and open the comgroup again with
 1635                          SHARE=ALL.
 1636
 1637                          The various parameters are processed in the
 1638                          following order:  CGCP,
 1639                          TYPLIST, STALIST, SETSTA.
 1640                          This can be important since there is some
 1641                          interaction between the options (e.g. one
 1642                          cannot delete a default message type; if
 1643                          a single service request sets CGCP and specifies
 1644                          a list of message types to be deleted, the
 1645                          default types specified in the former cannot
 1646                          be specified in the latter).
 1647
 1648                          The form of the call for this service is:
 1649
 1650                          CALL M$CGCTL (FPT_CGCTL) [ALTRET (label)];
 1651
 1652                          The parameters for this service are as follows:         */
 1653
 1654      %MACRO FPT_CGCTL (FPTN=FPT_CGCTL,
 1655               DCB       = NIL,
 1656               STCLASS   = STATIC,
 1657               TYPFC     (CHGATTR=1,ADD=2,DELETE=3,SETLIST=4)= 2,
 1658               STAFC     (CHGATTR=1,ADD=2,DELETE=3,SETLIST=4)= 2,
 1659               PRIO      (YES='1'B,NO='0'B)= '0'B,
 1660               MXACT     (YES='1'B,NO='0'B)= '0'B,
 1661               PERM      (YES='1'B,NO='0'B)= '0'B,
 1662               AUP       (YES='1'B,NO='0'B)= '0'B,
 1663               JOURNAL   (YES='1'B,NO='0'B)= '0'B,
 1664               ONEREPORT (YES='1'B,NO='0'B)= '0'B,
 1665               MAXLATCH  (YES='1'B,NO='0'B)= '0'B,
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           46   
 1666               TYPLIST   = NIL,
 1667               STALIST   = NIL,
 1668               CGCP      = NIL,
 1669               SETSTA    = NIL,
 1670               HOLDSTA   = NIL,
 1671               JRNLSTA   = NIL,
 1672               JRNLFID   = NIL,
 1673               QLIST     = NIL);
 1674
 1675       %LSET LISTDIR='0'B;
 1676       %LSET LISTEXP='1'B;
 1677       %LSET LISTCOM='0'B;
 1678       %LSET LISTSUB='1'B;
 1679       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1680       %IF (SUBSTR(STR,0,6)='STATIC') OR
 1681       (SUBSTR(STR,0,8)='CONSTANT') OR
 1682       (SUBSTR(STR,0,3)='EXT');
 1683       %LSET INIT=CHARTEXT('INIT');
 1684       %ELSE;
 1685       %LSET INIT=CHARTEXT('/*');
 1686       %ENDIF;
 1687
 1688      DCL 1 FPTN STCLASS DALIGNED,
 1689            2 V_ BIT(72) UNAL %INIT(VECTOR(FPTN.V))%CHARTEXT('/**/'),
 1690
 1691            2 TYPLIST_ BIT(72) UNAL %INIT(VECTOR(TYPLIST))%CHARTEXT('/**/'),
 1692                          /*K* TYPLIST = VARIABLE locates a VLP_CGTYPL area.
 1693                          This contains a list of message types to be used
 1694                          according to the value of TYPFC. TYPLIST must frame the
 1695                          exact number of message types passed in via VLP_CGTYPL;
 1696                          VLP_CGTYPL.FOUND# is not used for M$CGCTL.               */
 1697
 1698            2 STALIST_ BIT(72) UNAL %INIT(VECTOR(STALIST))%CHARTEXT('/**/'),
 1699                          /*K* STALIST = VARIABLE locates a VLP_CGSTAL area.
 1700                          This contains a list of stations to be used
 1701                          according to the value of STAFC. STALIST must frame the
 1702                          exact number of message types passed in via VLP_CGSTAL;
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           47   
 1703                          VLP_CGSTAL.FOUND# is not used for M$CGCTL.               */
 1704
 1705            2 CGCP_ BIT(72) UNAL %INIT(VECTOR(CGCP))%CHARTEXT('/**/'),
 1706                          /*K* CGCP = VARIABLE locates a VLP_CGCP area.  All
 1707                          of the comgroup control parameters will be changed
 1708                          to reflect the values contained in the VLP_CGCP
 1709                          area.                                                   */
 1710
 1711            2 SETSTA_ BIT(72) UNAL %INIT(VECTOR(SETSTA))%CHARTEXT('/**/'),
 1712                          /*K* SETSTA = VARIABLE locates a VLP_SETSTA area
 1713                          which is to be supplied to any DCB which opens to
 1714                          the comgroup.  Note that the administrative user (AU)
 1715                          will receive this same VLP_SETSTA when opening his
 1716                          DCB to the comgroup, but that he is exempt from
 1717                          lock violation errors that may result, whereas other
 1718                          users are not.                                          */
 1719
 1720            2 QLIST_ BIT(72) UNAL %INIT(VECTOR(QLIST))%CHARTEXT('/**/'),
 1721                          /*K* QLIST = VARIABLE locates a VLP_CGQL area.
 1722                          This contains a list of attributes for the anonymous
 1723                          queue nodes.  This list is parallel to the VLP_CGTYPL
 1724                          or VLP_CGSTAL list (depending upon which way the
 1725                          queue is keyed), and is used by the ADD and CHGATTR
 1726                          functions.                                              */
 1727
 1728            2 * BIT(72) %INIT(VECTOR(NIL)) %CHARTEXT('/**/'),
 1729                          /* Used to be FPRG_ in B03 */
 1730            2 * BIT(72) %INIT(VECTOR(NIL)) %CHARTEXT('/**/'),
 1731                          /* Used to be FPRQSTA_ in B03 */
 1732            2 HOLDSTA_ BIT(72) UNAL %INIT(VECTOR(HOLDSTA))%CHARTEXT('/**/'),
 1733                          /*K* HOLDSTA = VARIABLE locates a VLP_STATION
 1734                          area which names the DCB station to which
 1735                          messages placed in 'hold'
 1736                          status via M$UNLATCH will be written.
 1737
 1738                          The station designated here will become
 1739                          a 'special' station. A special station has
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           48   
 1740                          the following attributes:
 1741
 1742                          o  It is created by the M$CGCTL service call
 1743                          which defines it.
 1744
 1745                          o  Once a special station has been defined
 1746                          for a special purpose such as HOLDSTA,
 1747                          it remains defined until changed by M$CGCTL.
 1748                          At that time,
 1749                          the old special station has its 'special'
 1750                          attribute removed.  Until then, however,
 1751                          the special station may not be deleted
 1752                          by means of M$CGCTL SETLIST or DELETE.
 1753                          Furthermore, special stations are treated
 1754                          as though their PERM attributes were
 1755                          YES (see VLP_CGSTAL).
 1756
 1757                          o  A terminal may not join a comgroup under
 1758                          a special station name.
 1759
 1760                          o  Once a special station has been defined,
 1761                          issuing M$CGCTL and specifying NIL for
 1762                          the corresponding parameter, or specifying
 1763                          the parameter with a STATION# of blanks,
 1764                          have no effect.
 1765
 1766                          o  Once a special station has been defined,
 1767                          issuing M$CGCTL and specifying ERASE
 1768                          for the corresponding parameter will
 1769                          cause the comgroup to no longer possess
 1770                          the special attribute, and the actual
 1771                          station previously defined will lose
 1772                          its special status.
 1773
 1774                          o  When first created, a comgroup has no
 1775                          special stations of any kind.
 1776
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           49   
 1777                          M$UNLATCH HOLD services
 1778                          cause the unlatched message to be written to
 1779                          the station specified by HOLDSTA without any
 1780                          of their original parameters being changed, and
 1781                          may subsequently by read by that station.
 1782
 1783                          If no HOLDSTA has ever been specified, or
 1784                          after it has been ERASEd, messages placed
 1785                          in 'hold' are simply deleted.
 1786
 1787                          The default is NIL. */
 1788
 1789            2 JRNLSTA_ BIT(72) UNAL %INIT(VECTOR(JRNLSTA))%CHARTEXT('/**/'),
 1790                          /*K* JRNLSTA = VARIABLE locates a VLP_STATION
 1791                          area which names the DCB station to which
 1792                          messages whose type has the JOURNAL attribute
 1793                          are to be written, and to which journal
 1794                          delete messages are to be written.
 1795                          See JOURNAL in VLP_CGTYPL.
 1796
 1797                          The station designated here will become
 1798                          a 'special' station (see HOLDSTA).
 1799
 1800                          This writing of the message to the station
 1801                          specified here will occur at the time when
 1802                          the message would otherwise be sent to its
 1803                          destination, and takes place with the message's
 1804                          destination attribute intact.  Thus if the
 1805                          station named here reads such a message with
 1806                          LATCH, and then performs an M$UNLATCH RERUN,
 1807                          the message will be sent to its intended
 1808                          destination, with neither the originator
 1809                          nor the reader being aware of the detour.
 1810                          When the message is finally deleted from
 1811                          the comgroup, this station will receive a
 1812                          JOURNAL DELETE '*AUEV' message containing
 1813                          the MSGID of the message just deleted.
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           50   
 1814                          The default for JRNLSTA is NIL, and indicates
 1815                          simply that the 'journal detour' is not to
 1816                          be performed regardless of the JOURNAL attribute
 1817                          of any message type.
 1818
 1819                          Should the station designated here be present
 1820                          on the comgroup and then disconnect, then
 1821                          independent of WAS (see VLP_CGCP), the journal
 1822                          detour
 1823                          will be performed despite the absence of the
 1824                          journal station, with the to-be-journaled
 1825                          messages awaiting the arrival of the journal
 1826                          station.  Messages waiting at the journal station
 1827                          are retained independent of SMD (see VLP_CGCP).
 1828
 1829                          If the comgroup is to be journaled by the
 1830                          system JOURNAL GHOST (see GHSTACS in M$DCB),
 1831                          then the name of the journal station MUST
 1832                          be JRNLSTA (this is required in order that
 1833                          the ghost know what station name to open
 1834                          with).  When the ghost attempts to open
 1835                          the comgroup and asks to be station 'JRNLSTA',
 1836                          then the open will fail unless the comgroup
 1837                          has a special journal station of that name.
 1838                          Note that the JOURNAL GHOST will be informed
 1839                          if JRNLSTA is changed.
 1840
 1841                          The JRNLFID parameter specifies which
 1842                          journal file is to be used.
 1843
 1844                          The default is NIL. */
 1845
 1846            2 JRNLFID_ BIT(72) UNAL %INIT(VECTOR(JRNLFID))%CHARTEXT('/**/'),
 1847                          /*K* JRNLFID = VARIABLE locates a VLP_JRNLFID
 1848                          area.
 1849
 1850                          A comgroup may or may not possess a
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           51   
 1851                          journal FID which specifies the file
 1852                          to which journal records are to be
 1853                          written by the journal station.
 1854                          When a comgroup is first created,
 1855                          it has none.
 1856
 1857                          Issuing M$CGCTL with JRNLFID framing
 1858                          a VLP_JRNLFID will cause the comgroup's
 1859                          journal FID to be set to the one specified.
 1860
 1861                          Issuing M$CGCTL with JRNLFID = ERASE
 1862                          causes the comgroup to have no journal
 1863                          FID.
 1864
 1865                          Issuing M$CGCTL with JRNLFID = NIL will
 1866                          cause no change.
 1867
 1868                          The M$CGINFO service may be used to
 1869                          retrieve the comgroup's journal FID.
 1870                          If the comgroup has none, then
 1871                          VLP_JRNLFID.L# is returned as zero.
 1872                          This should be construed by the journaling
 1873                          process to mean that the comgroup is
 1874                          not to be journaled.
 1875
 1876                          If the comgroup is being journaled by
 1877                          the system JOURNAL GHOST (see GHSTACS
 1878                          in M$DCB), then the ghost will be
 1879                          informed whenever the comgroup's
 1880                          journal FID is changed or ERASEd.
 1881                          If the FID is being changed, then
 1882                          the ghost will attempt to start
 1883                          journaling to the newly-specified
 1884                          file.  Any error encountered by
 1885                          the ghost in attempting to open the
 1886                          new journal file will be passed back
 1887                          as an error to the M$CGCTL service caller,
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           52   
 1888                          and journaling will stop.  Note that
 1889                          in this case the comgroup's journal FID
 1890                          will be left set the to newly-specified
 1891                          value.
 1892
 1893                          The default for JRNLFID is NIL. */
 1894
 1895            2 * (0:8) BIT(72) UNAL %INIT(VECTOR(NIL)*0)%CHARTEXT('/**/'),
 1896
 1897            2 V DALIGNED,
 1898              3 DCB# UBIN HALF UNAL %INIT(DCBNUM(DCB))%CHARTEXT('/**/'),
 1899                          /*K* DCB = DCBNAME specifies the DCB associated
 1900                          with the comgroup.
 1901                          */
 1902
 1903              3 * BIT(12) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1904
 1905              3 TYPFC# UBIN(3) UNAL %INIT(TYPFC)%CHARTEXT('/**/'),
 1906                          /*K* TYPFC = OPTION indicates the function of
 1907                          the message type list (if present).
 1908                          The comgroup maintains a list of known message
 1909                          types, each with associated control parameters.
 1910                          This list, if XTYPLGL is reset (see VLP_CGCP),
 1911                          constitutes the totality of legal message types.
 1912                          On the other hand, if XTYPLGL is set, it simply
 1913                          provides a way for the AU to attach different
 1914                          attributes to different message types.  When
 1915                          XTYPLGL is set and a previously unknown message
 1916                          type is used, an entry for that type is created
 1917                          with the default message type priority (see
 1918                          VLP_CGCP.MTPRIO).  The TYPFC options are as follows:
 1919
 1920                          TYPFC = ADD requests that any previously unknown message
 1921                          types listed in VLP_CGTYPL, are to be added to
 1922                          the comgroup's list.  All listed types are to have
 1923                          all of their attributes changed.  The attribute
 1924                          values are taken from the fields specified in
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           53   
 1925                          VLP_CGTYPL and, if the queue is keyed by message
 1926                          type, from VLP_CGQL.  Note that if QLIST is not
 1927                          specified and the queue is keyed by type, then
 1928                          default values are used.
 1929
 1930                          TYPFC = DELETE requests that each type listed in VLP_CGTYPL
 1931                          is to be deleted from the comgroup's list.  Note
 1932                          that if the queue is keyed by message type, then
 1933                          queued messages of the listed types will be
 1934                          deleted.
 1935
 1936                          TYPFC = CHGATTR requests that each type listed have
 1937                          the attributes specified in ATTRS set as provided.
 1938                          Note that some of these attributes apply only if
 1939                          the queue is keyed by message type, and are to be
 1940                          provided in QLIST (which locates a VLP_CGQL).
 1941
 1942                          TYPFC = SETLIST requests that the list of legal
 1943                          types be set to the one provided.  That is,
 1944                          the given types are ADDed, then any not present
 1945                          in the given list are DELETEd.
 1946
 1947                          The default is ADD.                                          */
 1948
 1949              3 STAFC# UBIN(3) UNAL %INIT(STAFC)%CHARTEXT('/**/'),
 1950                          /*K* STAFC = OPTION indicates the function of
 1951                          the station list (if present).  The comgroup
 1952                          maintains a list of known stations, each with
 1953                          associated control parameters.  This list, if
 1954                          XSTALGL is reset (see VLP_CGCP), constitutes the
 1955                          totality of legal stations.  On the other hand, if
 1956                          XSTALGL is set, it simply provides a way for the AU
 1957                          to attach different attributes to different stations.
 1958                          When XSTALGL is set and a previously unknown station
 1959                          is written to, an entry for that station is created
 1960                          with the default station priority (see VLP_CGCP.
 1961                          STAPRIO).  The STAFC options are as follows:
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           54   
 1962
 1963
 1964                          STAFC = ADD requests that any previously unknown
 1965                          stations listed in VLP_CGTYPL, are to be added to
 1966                          the comgroup's list.  All stations listed will
 1967                          have all of their attributes changed.  The attribute
 1968                          values are taken from the fields specified in
 1969                          VLP_CGSTAL and, if the queue is keyed by
 1970                          station, from VLP_CGQL.  Note that if QLIST is not
 1971                          specified and the queue is keyed by station, then
 1972                          default values are used.
 1973
 1974                          STAFC = DELETE requests that each station listed
 1975                          is to be deleted from the comgroup's list.  Note
 1976                          that if the queue is keyed by station, then
 1977                          queued messages from the listed stations will be
 1978                          deleted.  Messages written to the listed
 1979                          stations will also be deleted.
 1980
 1981                          STAFC = CHGATTR requests that each station listed have
 1982                          the attributes specified in ATTRS set as provided.
 1983                          Note that some of these attributes apply only if
 1984                          the queue is keyed by  station, and are to be
 1985                          provided in QLIST (which locates a VLP_CGQL).
 1986
 1987                          STAFC = SETLIST requests that the list of legal
 1988                          stations be set to the one provided.  That is,
 1989                          the given stations are ADDed, then any not
 1990                          present in the given list are DELETEd.
 1991
 1992                          The default is ADD.                                     */
 1993
 1994              3 ATTRS,
 1995                          /*K* ATTRS specifies the attributes to be changed
 1996                          by CHGATTR.                                             */
 1997                4 PRIO# BIT(1) UNAL %INIT(PRIO)%CHARTEXT('/**/'),
 1998                          /*K* ATTRS.PRIO = {YES|NO} specifies whether or
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           55   
 1999                          not the priorities of the message types and/or
 2000                          stations are to be changed.  The values will be
 2001                          taken from LIST.PRIO# in VLP_CGTYPL and/or
 2002                          VLP_CGSTAL.  The default is NO. */
 2003
 2004                4 MXACT# BIT(1) UNAL %INIT(MXACT)%CHARTEXT('/**/'),
 2005                          /*K* ATTRS.MXACT = {YES|NO} specifies whether or
 2006                          not the maximum-active limits for the queue nodes
 2007                          are to be changed.  The values will be taken from
 2008                          LIST.MXACT# in VLP_CGQL.  The default is NO.            */
 2009
 2010                4 PERM# BIT(1) UNAL %INIT(PERM)%CHARTEXT('/**/'),
 2011                          /*K* ATTRS.PERM = {YES|NO} specifies whether
 2012                          or not the PERM attributes of the message types
 2013                          and/or stations are to be changed.  The values
 2014                          will be taken from LIST.PERM# in VLP_CGTYPL
 2015                          and/or VLP_CGSTAL.  The default is NO. */
 2016
 2017                4 AUP# BIT(1) UNAL %INIT(AUP)%CHARTEXT('/**/'),
 2018                          /*K* ATTRS.AUP = {YES|NO} specifies whether
 2019                          or not the AUP attributes of the stations
 2020                          are to be changed.  The values
 2021                          will be taken from LIST.AUP# in VLP_CGSTAL.
 2022                          The default is NO. */
 2023
 2024                4 JOURNAL# BIT(1) UNAL %INIT(JOURNAL)%CHARTEXT('/**/'),
 2025                          /*K* ATTRS.JOURNAL = {YES|NO} specifies whether
 2026                          or not the JOURNAL attributes of the message types
 2027                          are to be changed.  The values
 2028                          will be taken from LIST.JOURNAL# in VLP_CGTYPL.
 2029                          The default is NO. */
 2030
 2031                4 ONEREPORT# BIT(1) UNAL %INIT(ONEREPORT)%CHARTEXT('/**/'),
 2032                          /*K* ATTRS.ONEREPORT = {YES|NO} specifies whether
 2033                          or not the ONEREPORT attributes of the message types
 2034                          are to be changed.  The values
 2035                          will be taken from LIST.ONEREPORT# in VLP_CGTYPL.
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           56   
 2036                          The default is NO. */
 2037
 2038                4 MAXLATCH# BIT(1) UNAL %INIT(MAXLATCH)%CHARTEXT('/**/'),
 2039                          /*K* ATTRS.MAXLATCH = {YES|NO} specifies whether
 2040                          or not the MAXLATCH attributes of the message types
 2041                          are to be changed.  The values
 2042                          will be taken from LIST.MAXLATCH# in VLP_CGTYPL.
 2043                          The default is NO. */
 2044
 2045                4 * BIT(29) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2046                4 * BIT(30) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2047
 2048              3 * (0:7) UBIN WORD %INIT(0*0)%CHARTEXT('/**/');
 2049      %MEND;
 2050
 2051
 2052
 2053                          /*F* NAME: VLP_CGTYPL
 2054
 2055                          This macro generates an area for use with the
 2056                          M$CGCTL and M$CGINFO services.  It generates an
 2057                          array of message types, each with a name and a list
 2058                          of attributes.  All information in the array is
 2059                          returned by the M$CGINFO service.  Parameters that
 2060                          can be provided to the M$CGCTL service are distinguished
 2061                          by the fact that they have default values.
 2062
 2063                          Note that if more than one station is being
 2064                          generated to be supplied to M$CGCTL, then in
 2065                          general the values for the different stations must
 2066                          be assigned at execution time.  This is because
 2067                          when the macro is invoked at compile time, only
 2068                          one value may be specified for NAME and the
 2069                          various attributes.  The value specified for
 2070                          NAME will initialize NAME# only in the first
 2071                          array element.  The values specified for the
 2072                          various attributes will initialize ALL the
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           57   
 2073                          array elements, thus at least providing
 2074                          'default' values.
 2075      */
 2076
 2077      %MACRO VLP_CGTYPL (FPTN=VLP_CGTYPL,
 2078               STCLASS   = STATIC,
 2079               NAME      = ' ',
 2080               %NTYP=1,
 2081               PERM      (YES='1'B,NO='0'B)= '1'B,
 2082               JOURNAL   (YES='1'B,NO='0'B)= '0'B,
 2083               ONEREPORT (YES='1'B,NO='0'B)= '0'B,
 2084               MAXLATCH  = 262143,
 2085               PRIO      = 1);
 2086
 2087       %LSET LISTDIR='0'B;
 2088       %LSET LISTEXP='1'B;
 2089       %LSET LISTCOM='0'B;
 2090       %LSET LISTSUB='1'B;
 2091       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2092       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2093       (SUBSTR(STR,0,8)='CONSTANT') OR
 2094       (SUBSTR(STR,0,3)='EXT');
 2095       %LSET INIT=CHARTEXT('INIT');
 2096       %ELSE;
 2097       %LSET INIT=CHARTEXT('/*');
 2098       %ENDIF;
 2099
 2100       %IF   (%NTYP = 1) ;
 2101       %LSET  NAM = CHARTEXT(' ');
 2102       %LSET  ZERO = CHARTEXT(' ');
 2103       %ELSE ;
 2104       %LSET  NAM = CHARTEXT(', '' ''*0');
 2105       %LSET  ZERO = CHARTEXT('*0');
 2106       %ENDIF;
 2107
 2108      DCL 1 FPTN STCLASS DALIGNED,
 2109                          /*K* NTYP = VALUE-DEC(1-n) is the number
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           58   
 2110                          of message type slots to be generated.
 2111                          The default is 1.                                       */
 2112
 2113            2 FOUND# UBIN WORD UNAL %INIT(0)%CHARTEXT('/**/'),
 2114                          /*K* FOUND = VALUE-DEC(0-n) is set to the
 2115                          number of message types found by M$CGINFO
 2116                          DUMP. Note that FOUND is not used by M$CGCTL.           */
 2117
 2118            2 LIST (0:%(NTYP-1)) UNAL,
 2119                          /*K* LIST is the array of message types.                */
 2120
 2121              3 NAME# CHAR(8) UNAL %INIT(NAME%NAM)%CHARTEXT('/**/'),
 2122                          /*K* LIST.NAME = VALUE-CHAR(8) is the name of the
 2123                          message type.  This must be supplied when calling
 2124                          M$CGCTL.
 2125                          Message type names may be composed of any
 2126                          characters, with the exception of the
 2127                          first character.  The first character
 2128                          must be one of the following:
 2129
 2130                          }   *ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_
 2131                          }   :$&-abcdefghijklmnopqrstuvwxyz
 2132
 2133                          Note that although the character '*' is present
 2134                          in this list, CP-6 file management reserves the
 2135                          '*AUEV' message type for its own use.
 2136                          */
 2137
 2138              3 PRIO# UBIN BYTE UNAL %INIT(PRIO%ZERO)%CHARTEXT('/**/'),
 2139                          /*K* LIST.PRIO = VALUE-DEC(1-500) is the contribution
 2140                          to total priority of messages written with
 2141                          this type.  The default is 1.                           */
 2142
 2143              3 PERM# BIT(1) UNAL %INIT(PERM%ZERO)%CHARTEXT('/**/'),
 2144                          /*K* LIST.PERM = {YES|NO} indicates whether
 2145                          (YES) or not (NO) this type is permanent
 2146                          and not to be deleted.  Note that 'deleted'
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           59   
 2147                          refers to the type node itself, not
 2148                          to messages written of that type.  In
 2149                          particular, a type node may be deleted at
 2150                          any time if PERM is NO and (if the message
 2151                          type tree is the Q-tree) the node's Q-tree
 2152                          queue is empty.  The PERM parameter may be
 2153                          set to NO to prevent such nodes from cluttering
 2154                          up the comgroup.
 2155
 2156                          The PERM attribute interacts with XTYPLGL
 2157                          (see VLP_CGCP).  If XTYPLGL is YES, then
 2158                          PERM for a type only affects its deletion
 2159                          as discussed above.  If, however, XTYPLGL
 2160                          is NO, then only those types designated
 2161                          as PERM are guaranteed to be always legal.
 2162                          This is because a type with PERM = NO
 2163                          may be deleted from the comgroup under the
 2164                          conditions detailed above, and when this
 2165                          happens the type name becomes illegal
 2166                          to write with, by virtue of
 2167                          XTYPLGL being NO.  Note that changing XTYPLGL
 2168                          from YES to NO does not make non-PERM types
 2169                          instantly illegal.  Thus, creating non-PERM
 2170                          types via M$CGCTL, in a comgroup with
 2171                          XTYPLGL = NO, causes certain anomalies.
 2172
 2173                          The default is YES. */
 2174
 2175              3 JOURNAL# BIT(1) UNAL %INIT(JOURNAL%ZERO)%CHARTEXT('/**/'),
 2176                          /*K* LIST.JOURNAL = {YES|NO} indicates whether
 2177                          (YES) or not (NO) messages of this type are
 2178                          to be journaled.  If YES, then two specific
 2179                          processes are invoked.  First, when a message
 2180                          of this type is created (i.e. written into
 2181                          the comgroup), it will be sent to the station
 2182                          specified by JRNLSTA (see FPT_CGCTL) instead
 2183                          of to its proper destination.  Second, when
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           60   
 2184                          a message of this type is finally deleted from
 2185                          the comgroup, a special journal delete message
 2186                          will be sent to the station specified by
 2187                          JRNLSTA, provided that it has been M$UNLATCHed
 2188                          with the RERUN and JOURNALED options by the
 2189                          journal station.
 2190
 2191                          The journal delete message has MSGTYP '*AUEV'.
 2192                          Like all other AU-event messages, the data
 2193                          portion is framed by B$CGAURD, in which
 2194                          B$CGAURD.EVENT contains the value CG_JNLD#,
 2195                          and B$CGAURD.MID contains the MSGID of the
 2196                          message just deleted.  The origin station
 2197                          of this message (reported in B$CGAURD.STATION
 2198                          and VLP_STATION.STATION) is undefined.
 2199
 2200                          The default is NO. */
 2201
 2202              3 ONEREPORT# BIT(1) UNAL %INIT(ONEREPORT%ZERO)%CHARTEXT('/**/'),
 2203                          /*K* LIST.ONEREPORT = {YES|NO} indicate whether
 2204                          (YES) or not (NO), latched outputs of this
 2205                          message type are to be grouped as single
 2206                          reports.
 2207
 2208                          When ONEREPORT is YES, all LATCHed M$WRITEs
 2209                          through a given DCB are treated as though
 2210                          CONT was specified as YES on the M$WRITE.
 2211                          The effect of this is that the M$WRITEs,
 2212                          instead of creating multiple messages,
 2213                          create a single continued message.  The
 2214                          message will automatically be ended when
 2215                          unlatch is performed.
 2216
 2217                          ONEREPORT is intended for use in cases
 2218                          where the destination of the message is
 2219                          a TERMINAL station and many records are
 2220                          being written which are logically a
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           61   
 2221                          single 'report'.  It has the desired
 2222                          effect (that is, the target station
 2223                          reads the message in 'chunks' with each
 2224                          chunk corresponding to a single M$WRITE)
 2225                          because TERMINAL stations, unlike DCB
 2226                          stations, 'see' the divisions between
 2227                          pieces of a CONTinued message.
 2228
 2229                          Since such a message may only be ended
 2230                          by an unlatch operation, ONEREPORT is
 2231                          of limited utility for normal user programs
 2232                          inasmuch as it limits them to a single
 2233                          output message per latched input.  However,
 2234                          for TP users only, output DCBs may, if they
 2235                          are opened in CREATE mode to the comgroup,
 2236                          be used to create ONEREPORT reports, one
 2237                          per DCB.  Thus the TP user will have one
 2238                          output DCB for each report of this type
 2239                          that is to be produced for the input
 2240                          'transaction'.
 2241
 2242                          The actual operation of ONEREPORT (i.e.
 2243                          the forcing of CONT on the M$WRITE) may
 2244                          change in future releases, but the overall
 2245                          effect will be the same, at least for
 2246                          target TERMINAL stations.  The result
 2247                          of using ONEREPORT to write to a DCB
 2248                          station is undefined.
 2249
 2250                          The default is NO. */
 2251
 2252              3 * UBIN(24) UNAL %INIT(0%ZERO)%CHARTEXT('/**/'),
 2253              3 NUMWRITES# SBIN WORD UNAL %INIT(0%ZERO) %CHARTEXT('/**/'),
 2254
 2255          /*K*   LIST.NUMWRITE = VALUE-DEC(0-n) is the number of
 2256                 messages of this type that have been written.
 2257                 Note that NUMWRITES is not used by M$CGCTL.  */
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           62   
 2258
 2259              3 MAXLATCH# UBIN HALF UNAL %INIT(MAXLATCH%ZERO) %CHARTEXT('/**/'),
 2260
 2261          /*K*   LIST.MAXLATCH = VALUE-DEC(0-n) is the number of
 2262                 LATCHed WRITES that can be attached to a LATCHed
 2263                 READ of this MSGTYP.
 2264
 2265                 The default is 262143.                         */
 2266
 2267              3 * UBIN HALF UNAL %INIT(0%ZERO)%CHARTEXT('/**/'),
 2268              3 * UBIN WORD UNAL %INIT(0%ZERO)%CHARTEXT('/**/'),
 2269              3 * UBIN WORD UNAL %INIT(0%ZERO)%CHARTEXT('/**/');
 2270      %MEND;
 2271
 2272
 2273
 2274
 2275                          /*F* NAME: VLP_CGSTAL
 2276
 2277                          This macro generates an area for use with the
 2278                          M$CGCTL and M$CGINFO services.  It generates
 2279                          an array of stations, each with a name and
 2280                          a list of attributes.  All information in the
 2281                          array is returned by the M$CGINFO service.
 2282                          Parameters that can be provided to the
 2283                          M$CGCTL service are distinguished by the fact
 2284                          that they have default values.
 2285
 2286                          Note that if more than one station is being
 2287                          generated to be supplied to M$CGCTL, then in
 2288                          general the values for the different stations must
 2289                          be assigned at execution time.  This is because
 2290                          when the macro is invoked at compile time, only
 2291                          one value may be specified for NAME and the
 2292                          various attributes.  The value specified for
 2293                          NAME will initialize NAME# only in the first
 2294                          array element.  The values specified for the
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           63   
 2295                          various attributes will initialize ALL the
 2296                          array elements, thus at least providing
 2297                          'default' values.
 2298      */
 2299
 2300      %MACRO VLP_CGSTAL (FPTN=VLP_CGSTAL,
 2301               STCLASS   = STATIC,
 2302               NAME      = ' ',
 2303               %NSTA=1,
 2304               AUP       (YES='1'B,NO='0'B)= '0'B,
 2305               PERM      (YES='1'B,NO='0'B)= '1'B,
 2306               PRIO      = 1);
 2307
 2308       %LSET LISTDIR='0'B;
 2309       %LSET LISTEXP='1'B;
 2310       %LSET LISTCOM='0'B;
 2311       %LSET LISTSUB='1'B;
 2312       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2313       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2314       (SUBSTR(STR,0,8)='CONSTANT') OR
 2315       (SUBSTR(STR,0,3)='EXT');
 2316       %LSET INIT=CHARTEXT('INIT');
 2317       %ELSE;
 2318       %LSET INIT=CHARTEXT('/*');
 2319       %ENDIF;
 2320
 2321       %IF   (%NSTA = 1) ;
 2322       %LSET  NAM = CHARTEXT(' ');
 2323       %LSET  ZERO = CHARTEXT(' ');
 2324       %ELSE ;
 2325       %LSET  NAM = CHARTEXT(', '' ''*0');
 2326       %LSET  ZERO = CHARTEXT('*0');
 2327       %ENDIF;
 2328
 2329      DCL 1 FPTN STCLASS DALIGNED,
 2330                          /*K* NSTA = VALUE-DEC(0-n) is the number
 2331                          of station slots to be generated.
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           64   
 2332                          The default is 1.                                       */
 2333
 2334            2 FOUND# UBIN WORD UNAL %INIT(0)%CHARTEXT('/**/'),
 2335                          /*K* FOUND = VALUE-DEC(0-n) is set to the
 2336                          number of stations found by M$CGINFO
 2337                          DUMP. Note that FOUND is not used by M$CGCTL.           */
 2338
 2339            2 LIST (0:%(NSTA-1)) UNAL,
 2340                          /*K* LIST is the array of stations.                     */
 2341
 2342              3 NAME# CHAR(8) UNAL %INIT(NAME%NAM)%CHARTEXT('/**/'),
 2343                          /*K* LIST.NAME = VALUE-CHAR(8) is the name of the
 2344                          station.  This must be supplied to M$CGCTL.
 2345                          Station names may be composed of any characters,
 2346                          with the exception of the first character which
 2347                          must belong to the list given under NAME# in
 2348                          VLP_CGTYPL. Also, the first character may not
 2349                          be the character '&'.                                 */
 2350
 2351              3 PRIO# UBIN BYTE UNAL %INIT(PRIO%ZERO)%CHARTEXT('/**/'),
 2352                          /*K* LIST.PRIO = VALUE-DEC(1-500) is the contribution
 2353                          to total priority of messages written from this
 2354                          station.  The default is 1.                             */
 2355
 2356              3 PERM# BIT(1) UNAL %INIT(PERM%ZERO)%CHARTEXT('/**/'),
 2357                          /*K* LIST.PERM = {YES|NO} indicates whether
 2358                          (YES) or not (NO) this station is permanent
 2359                          and not to be deleted.  Note that 'deleted'
 2360                          refers to the station node itself, not
 2361                          to messages written to the station.  In
 2362                          particular, a station node is only considered
 2363                          for deletion when the station has left the
 2364                          comgroup and there are no messages in its
 2365                          message queue (and, if it is a Q-tree node
 2366                          also, there are no messages in its Q-tree
 2367                          queue).  Thus the PERM parameter only takes
 2368                          effect in that situation, and may be set
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           65   
 2369                          NO to prevent such station nodes from cluttering
 2370                          up the comgroup.
 2371
 2372                          The PERM attribute interacts with XSTALGL
 2373                          (see VLP_CGCP).  If XSTALGL is YES, then
 2374                          PERM for a station only affects its deletion
 2375                          as discussed above.  If, however, XSTALGL
 2376                          is NO, then only those stations designated as
 2377                          PERM (or SPECIAL - see HOLDSTA in FPT_CGCTL)
 2378                          are guaranteed to be always legal.  This is
 2379                          because a station with PERM = NO may be deleted
 2380                          from the comgroup under the conditions detailed
 2381                          above, and when this happens, the station name
 2382                          becomes illegal
 2383                          to write to or join under, by virtue of
 2384                          XSTALGL being NO.  Note that changing XSTALGL
 2385                          from YES to NO does not make non-PERM stations
 2386                          instantly illegal.  Thus, creating non-PERM
 2387                          stations via M$CGCTL, in a comgroup with
 2388                          XSTALGL = NO, causes certain anomalies.
 2389
 2390                          The default is YES. */
 2391
 2392              3 CON# BIT(1) UNAL %INIT('0'B%ZERO)%CHARTEXT('/**/'),
 2393                          /*K* LIST.CON = VALUE-BIT(1) is set if the station
 2394                          is connected.                                           */
 2395
 2396              3 ACTIVE# BIT(1) UNAL %INIT('0'B%ZERO)%CHARTEXT('/**/'),
 2397                          /*K* LIST.ACTIVE = VALUE-BIT(1)is set if the station
 2398                          is activated.                                           */
 2399
 2400              3 AUP# BIT(1) UNAL %INIT(AUP%ZERO)%CHARTEXT('/**/'),
 2401                          /*K* LIST.AUP = {YES|NO} specifies whether (YES)
 2402                          or not (NO) this station is administrative
 2403                          user proprietary.  Such a station has two special
 2404                          features.  First, it cannot be written to by a
 2405                          normal write operation.  If one is attempted,
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           66   
 2406                          then the writer perceives the destination
 2407                          station as being absent (independent of
 2408                          WAS in his VLP_STATION, and independent of
 2409                          the comgroup control parameter WAS), and
 2410                          is given an error.  The following is a list
 2411                          of the only classes of messages which may
 2412                          be sent to an AUP station:
 2413
 2414                          o  HELD messages if the station is HOLDSTA
 2415                          (see FPT_CGCTL).
 2416
 2417                          o  JOURNALed messages if the station is JRNLSTA
 2418                          (see FPT_CGCTL).
 2419
 2420                          o  Any message whose type begins with '*'.  This
 2421                          of course includes all AU event messages.
 2422
 2423                          Second, no terminal is
 2424                          permitted to join the comgroup under that
 2425                          station name, and no DCB is permitted to join the
 2426                          comgroup under that name unless the DCB owner
 2427                          already has an AU DCB open to the comgroup.
 2428
 2429                          Thus, the AUP attribute is even more restrictive
 2430                          that the 'special' attribute discussed under
 2431                          HOLDSTA in FPT_CGCTL.  A typical usage for
 2432                          AUP is its application to the station designated
 2433                          as HOLDSTA (see FPT_CGCTL).
 2434
 2435                          The default is NO.                                      */
 2436
 2437              3 * BIT(23) UNAL %INIT('0'B%ZERO)%CHARTEXT('/**/'),
 2438
 2439              3 MSGCNT# UBIN WORD %INIT(0%ZERO)%CHARTEXT('/**/'),
 2440                          /*K* LIST.MSGCNT = VALUE-DEC(0-?) is the count
 2441                          of messages written specifically to this station,
 2442                          and waiting to be read.                                 */
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           67   
 2443
 2444              3 READS UBIN WORD %INIT(0%ZERO)%CHARTEXT('/**/'),
 2445                          /*K* LIST.READS = VALUE-DEC(0-?) is the number
 2446                          of messages read by the station.  This value
 2447                          is reset to zero each time the station joins
 2448                          the comgroup (but not when it disconnects). */
 2449
 2450              3 WRITES UBIN WORD %INIT(0%ZERO)%CHARTEXT('/**/'),
 2451                          /*K* LIST.WRITES = VALUE-DEC(0-?) is the number
 2452                          of messages written into the comgroup by the
 2453                          station.  This value is reset to zero each time
 2454                          the station joins the comgroup (but not when
 2455                          it disconnects). */
 2456
 2457              3 * UBIN WORD %INIT(0%ZERO)%CHARTEXT('/**/'),
 2458              3 * UBIN WORD %INIT(0%ZERO)%CHARTEXT('/**/');
 2459      %MEND;
 2460
 2461                          /*F* NAME:   VLP_CGQL
 2462
 2463                          The VLP_CGQL macro generates an area for use
 2464                          with the M$CGCTL and M$CGINFO services.  It
 2465                          generates an array of parameters and statistics,
 2466                          with one entry for each anonymous queue node.  The array
 2467                          is parallel to the array in VLP_CGSTAL or VLP_CGTYPL,
 2468                          depending upon how the queue is keyed.  All items
 2469                          are returned by the M$CGINFO service while some
 2470                          can be provided to the M$CGCTL service.  These
 2471                          are distinguished by the fact that they have
 2472                          default values.
 2473
 2474                          Note that if more than one queue node is being
 2475                          generated to be supplied to M$CGCTL, then in
 2476                          general the values for the different queue nodes must
 2477                          be assigned at execution time.  This is because
 2478                          when the macro is invoked at compile time, only
 2479                          one value may be specified for the
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           68   
 2480                          various attributes.
 2481                          The values specified for the
 2482                          various attributes will initialize ALL the
 2483                          array elements, thus at least providing
 2484                          'default' values.
 2485      */
 2486
 2487      %MACRO VLP_CGQL (FPTN=VLP_CGQL,
 2488               STCLASS   = STATIC,
 2489               MXACT     = 9999999,
 2490               %NLIST=1,
 2491               AUTORCVR  (YES='1'B,NO='0'B)= '1'B);
 2492
 2493       %LSET LISTDIR='0'B;
 2494       %LSET LISTEXP='1'B;
 2495       %LSET LISTCOM='0'B;
 2496       %LSET LISTSUB='1'B;
 2497       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2498       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2499       (SUBSTR(STR,0,8)='CONSTANT') OR
 2500       (SUBSTR(STR,0,3)='EXT');
 2501       %LSET INIT=CHARTEXT('INIT');
 2502       %ELSE;
 2503       %LSET INIT=CHARTEXT('/*');
 2504       %ENDIF;
 2505
 2506       %IF   (%NLIST = 1) ;
 2507       %LSET  ZERO = CHARTEXT(' ');
 2508       %ELSE ;
 2509       %LSET  ZERO = CHARTEXT('*0');
 2510       %ENDIF;
 2511
 2512      DCL 1 FPTN STCLASS DALIGNED,
 2513                          /*K* NLIST = VALUE-DEC(1-n) is the number
 2514                          of queue node slots to be generated.  The
 2515                          default is 1.                                           */
 2516
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           69   
 2517            2 LIST (0:%(NLIST-1)) UNAL,
 2518                          /*K* LIST is the array of queue nodes.                  */
 2519
 2520              3 MXACT# UBIN WORD UNAL %INIT(MXACT%ZERO)%CHARTEXT('/**/'),
 2521                          /*K* LIST.MXACT = VALUE-DEC(0-?) is the
 2522                          maximum number of messages from this queue
 2523                          node which may be active (read with LATCH)
 2524                          at any time.  The default is 9999999.                   */
 2525
 2526              3 CNACT# UBIN WORD %INIT(0%ZERO)%CHARTEXT('/**/'),
 2527                          /*K* LIST.CNACT = VALUE-DEC(0-?) is the current
 2528                          number of active messages from this queue node.         */
 2529
 2530              3 MSGCNT# UBIN WORD %INIT(0%ZERO)%CHARTEXT('/**/'),
 2531                          /*K* LIST.MSGCNT = VALUE-DEC(0-?) is the count
 2532                          of messages from this queue node which have not
 2533                          yet been read.                                          */
 2534
 2535              3 AUTORCVR# BIT(1) UNAL %INIT(AUTORCVR%ZERO)%CHARTEXT('/**/'),
 2536                          /*K* LIST.AUTORCVR = {YES|NO} selects the action
 2537                          to be taken when messages from this queue node
 2538                          are active (LATCHed) at the time of a system
 2539                          recovery.  YES requests that an UNLATCH RERUN
 2540                          be performed.  NO causes an UNLATCH HOLD to be
 2541                          performed, and also causes MXACT for the queue
 2542                          node to be set to zero.  Specifying NO permits the
 2543                          AU user to perform explicit recovery for transactions
 2544                          that are active at the time of system
 2545                          recovery.  The default is YES.                          */
 2546
 2547              3 * UBIN(35) UNAL %INIT(0%ZERO)%CHARTEXT('/**/'),
 2548              3 * UBIN WORD %INIT(0%ZERO)%CHARTEXT('/**/'),
 2549              3 * UBIN WORD %INIT(0%ZERO)%CHARTEXT('/**/'),
 2550              3 * UBIN WORD %INIT(0%ZERO)%CHARTEXT('/**/'),
 2551              3 * UBIN WORD %INIT(0%ZERO)%CHARTEXT('/**/'),
 2552              3 * UBIN WORD %INIT(0%ZERO)%CHARTEXT('/**/');
 2553      %MEND;
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           70   
 2554                          /*F* NAME:  VLP_CGCP
 2555
 2556                          The VLP_CGCP macro creates an area containing
 2557                          the control parameters for a comgroup.                  */
 2558
 2559      %MACRO VLP_CGCP (FPTN=VLP_CGCP,STCLASS=STATIC,%LVL=1,%LAST=";",
 2560               TMTYP          = ' ',
 2561               DMTYP          = ' ',
 2562               MINPG          = 2,
 2563               STAPRIO        = 1,
 2564               TYPPRIO        = 1,
 2565               MXACT          = 9999999,
 2566               MAXPG          = 10,
 2567               MAXMC          = 1024,
 2568               CARRYOSTA      (YES='1'B,NO='0'B)='0'B,
 2569               DEFERBLKS      = 20,
 2570               DATAPGS        = 50,
 2571               TRMRDSIZ       = 140,
 2572               DISKWARN       = 0,
 2573               MEMWARN        = 0,
 2574               WRITETIME      = 0,
 2575               MINRD       = 10,
 2576               MAXRD       = 20,
 2577               REDISKWARN  = 2,
 2578               XSTALGL        (YES='1'B,NO='0'B)='1'B,
 2579               TERMCONAU      (YES='1'B,NO='0'B)='1'B,
 2580               DCBCONAU       (YES='1'B,NO='0'B)='1'B,
 2581               DCBCONWA       (YES='1'B,NO='0'B)='0'B,
 2582               TERMCONNAU     (YES='1'B,NO='0'B)='1'B,
 2583               DCBCONNAU      (YES='1'B,NO='0'B)='1'B,
 2584               AUCONTERM      (NC=0,ACTIVATE=1,DEACTIVATE=2,DISCONNECT=3)=0,
 2585               AUDCONTERM     (NC=0,ACTIVATE=1,DEACTIVATE=2,DISCONNECT=3)=0,
 2586               AUCONDCB       (NC=0,ACTIVATE=1,DEACTIVATE=2,DISCONNECT=3)=0,
 2587               AUDCONDCB      (NC=0,ACTIVATE=1,DEACTIVATE=2,DISCONNECT=3)=0,
 2588               WAS            (YES='1'B,NO='0'B)='0'B,
 2589               RAS            (YES='1'B,NO='0'B)='0'B,
 2590               AUTORCVR       (YES='1'B,NO='0'B)='1'B,
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           71   
 2591               UNLAMSG        (YES='1'B,NO='0'B)='1'B,
 2592               SMD            (YES='1'B,NO='0'B)='0'B,
 2593               CONMSG         (YES='1'B,NO='0'B)='1'B,
 2594               SECURE         (YES='1'B,NO='0'B)='0'B,
 2595               INPUT          (YES='1'B,NO='0'B)='1'B,
 2596               OUTPUT         (YES='1'B,NO='0'B)='1'B,
 2597               REREAD         (YES='1'B,NO='0'B)='0'B,
 2598               BIN            (YES='1'B,NO='0'B)='0'B,
 2599               TRANS          (YES='1'B,NO='0'B)='0'B,
 2600               REDUNDANT      (YES='1'B,NO='0'B)='0'B,
 2601               TERMCONLGL     (YES='1'B,NO='0'B)='1'B,
 2602               DCBCONLGL      (YES='1'B,NO='0'B)='1'B,
 2603               XTYPLGL        (YES='1'B,NO='0'B)='1'B,
 2604               QRML           (YES='1'B,NO='0'B)='0'B,
 2605               DRML           (YES='1'B,NO='0'B)='0'B,
 2606               BIGMXT         (YES='1'B,NO='0'B)='0'B,
 2607               DSCREQ         (YES='1'B,NO='0'B)='0'B,
 2608               MEMWARNP       (YES='1'B,NO='0'B)='0'B,
 2609               JOURNAL        (YES='1'B,NO='0'B)='0'B);
 2610
 2611       %LSET LISTDIR='0'B;
 2612       %LSET LISTEXP='1'B;
 2613       %LSET LISTCOM='0'B;
 2614       %LSET LISTSUB='1'B;
 2615       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 2616       %IF (SUBSTR(STR,0,6)='STATIC') OR
 2617       (SUBSTR(STR,0,8)='CONSTANT') OR
 2618       (SUBSTR(STR,0,3)='EXT');
 2619       %LSET INIT=CHARTEXT('INIT');
 2620       %ELSE;
 2621       %LSET INIT=CHARTEXT('/*');
 2622       %ENDIF;
 2623
 2624                                    /*!* VP Y                                     */
 2625       %IF LVL=1;
 2626
 2627      DCL 1 FPTN STCLASS DALIGNED,
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           72   
 2628
 2629       %ELSE;
 2630
 2631              %LVL FPTN ALIGNED,
 2632
 2633       %ENDIF;
 2634                                    /*!* VP N                                     */
 2635
 2636            %(LVL+1) TMTYP# CHAR(8) %INIT(TMTYP)%CHARTEXT('/**/'),
 2637                          /*K* TMTYP = VALUE-CHAR(8) is the default message
 2638                          type for messages written from terminals.               */
 2639
 2640            %(LVL+1) DMTYP# CHAR(8) %INIT(DMTYP)%CHARTEXT('/**/'),
 2641                          /*K* DMTYP = VALUE-CHAR(8) is the default message
 2642                          type for messages written from DCBs.                    */
 2643
 2644            %(LVL+1) MINPG# UBIN HALF UNAL %INIT(MINPG)%CHARTEXT('/**/'),
 2645                          /*K* MINPG = VALUE-DEC(2-1000) is the minimum  of
 2646                          number of physical memory pages to maintain.  The
 2647                          default is 2.                                           */
 2648
 2649            %(LVL+1) STAPRIO# UBIN BYTE UNAL %INIT(STAPRIO)%CHARTEXT('/**/'),
 2650                          /*K* STAPRIO = VALUE-DEC(1-500) is the default value
 2651                          for the part of message priority that comes from
 2652                          the origin station.  The default is 1.                  */
 2653
 2654            %(LVL+1) TYPPRIO# UBIN BYTE UNAL %INIT(TYPPRIO)%CHARTEXT('/**/'),
 2655                          /*K* TYPPRIO = VALUE-DEC(1-500) is the default
 2656                          value for the part of message priority that comes
 2657                          from the message type.
 2658                          The default
 2659                          is 1.                                                   */
 2660
 2661            %(LVL+1) MXACT# UBIN WORD %INIT(MXACT)%CHARTEXT('/**/'),
 2662                          /*K* MXACT = VALUE-DEC(0-?) is the default value
 2663                          for the number of messages of a given Q-tree type
 2664                          that can be 'active' at one time.
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           73   
 2665                          An 'active' message is one which has
 2666                          been read from the anonymous queue by
 2667                          a DCB specifying LATCH.  The message
 2668                          becomes inactive when it is unlatched.  Note, then,
 2669                          a message directed to a station is
 2670                          never 'active' in this sense, regardless
 2671                          of its MSGTYP or origin station.
 2672                          The default is
 2673                          9999999.                                                */
 2674
 2675            %(LVL+1) MAXPG# UBIN HALF UNAL %INIT(MAXPG)%CHARTEXT('/**/'),
 2676                          /*K* MAXPG = VALUE-DEC(3-1000) is the maximum
 2677                          number of memory pages to use.  The default is 10.      */
 2678
 2679            %(LVL+1) CONMSG# BIT(1) %INIT(CONMSG)%CHARTEXT('/**/'),
 2680                          /*K* CONMSG = {YES|NO} CONMSG = YES indicates
 2681                          that the administrative user (AU) is to receive
 2682                          messages when stations connect and disconnect.
 2683
 2684                          When an AU joins a comgroup in which CONMSG is
 2685                          YES, a series of connect event messages is
 2686                          generated and sent to him, one for each station
 2687                          that is currently connected.
 2688
 2689                          Note that if CONMSG is NO, and is set to YES
 2690                          via M$CGCTL, such a series of messages is not
 2691                          generated when the M$CGCTL is issued.
 2692
 2693                          If CONMSG is NO, then DSCREQ and DCBCONWA are
 2694                          forced to NO.
 2695
 2696                          The default is YES. */
 2697
 2698            %(LVL+1) TERMCONAU# BIT(1) %INIT(TERMCONAU)%CHARTEXT('/**/'),
 2699                          /*K* TERMCONAU = {YES|NO} TERMCONAU = YES indicates
 2700                          that terminals are to be activated upon connection
 2701                          if the AU is connected.  The default is YES.            */
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           74   
 2702
 2703            %(LVL+1) DCBCONAU# BIT(1) %INIT(DCBCONAU)%CHARTEXT('/**/'),
 2704                          /*K* DCBCONAU = {YES|NO} DCBCONAU = YES indicates
 2705                          that DCBs are to be activated upon connection if
 2706                          the AU is connected.  The default is YES.               */
 2707
 2708            %(LVL+1) TERMCONNAU# BIT(1) %INIT(TERMCONNAU)%CHARTEXT('/**/'),
 2709                          /*K* TERMCONNAU = {YES|NO} TERMCONNAU = YES indicates
 2710                          that terminals are to be activated upon connection
 2711                          if the AU is not connected.  The default is YES.        */
 2712
 2713            %(LVL+1) DCBCONNAU# BIT(1) %INIT(DCBCONNAU)%CHARTEXT('/**/'),
 2714                          /*K* DCBCONNAU = {YES|NO} DCBCONNAU = YES indicates
 2715                          that DCBs are to be activated upon connection if the
 2716                          AU is not connected.  The default is YES.               */
 2717
 2718            %(LVL+1) AUCONTERM# UBIN(2) UNAL %INIT(AUCONTERM)%CHARTEXT('/**/'),
 2719                          /*K* AUCONTERM = OPTION specifies the action
 2720                          to be taken for all connected terminals when
 2721                          the AU connects.
 2722
 2723                          }ACTIVATE    Activate all connected terminals that
 2724                          }            are not already activated.
 2725                          }
 2726                          }DEACTIVATE  Deactivate all terminals that are
 2727                          }            currently activated.
 2728                          }
 2729                          }DISCONNECT  Disconnect all connected terminals.
 2730                          }
 2731                          }NC          No change  - leave in current state.
 2732
 2733                          The default is NC.                                      */
 2734
 2735            %(LVL+1) AUCONDCB# UBIN(2) UNAL %INIT(AUCONDCB)%CHARTEXT('/**/'),
 2736                          /*K* AUCONDCB = OPTION specifies the action
 2737                          to be taken for all connected DCBs when the AU
 2738                          connects.  The applicable options are NC,
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           75   
 2739                          ACTIVATE and DEACTIVATE which are described
 2740                          under AUCONTERM.  If DISCONNECT
 2741                          is specified, it is treated like DEACTIVATE.
 2742                          The default is NC.                                      */
 2743
 2744            %(LVL+1) AUDCONTERM# UBIN(2) UNAL %INIT(AUDCONTERM)%CHARTEXT('/**/'),
 2745                          /*K* AUDCONTERM = OPTION specifies the action
 2746                          to be taken for all connected terminals when the
 2747                          AU disconnects.  The applicable options are
 2748                          described under AUCONTERM.  The default is NC.          */
 2749
 2750            %(LVL+1) AUDCONDCB# UBIN(2) UNAL %INIT(AUDCONDCB)%CHARTEXT('/**/'),
 2751                          /*K* AUDCONDCB = OPTION specifies the action
 2752                          to be taken for all connected DCBs when the
 2753                          AU disconnects.  The applicable options are NC,
 2754                          ACTIVATE and DEACTIVATE which are described
 2755                          under AUCONTERM.  If DISCONNECT is
 2756                          specified, it is treated like DEACTIVATE.  The
 2757                          default is NC.                                          */
 2758
 2759            %(LVL+1) XSTALGL# BIT(1) %INIT(XSTALGL)%CHARTEXT('/**/'),
 2760                          /*K* XSTALGL = {YES|NO} indicates whether (YES)
 2761                          or not (NO) any station name is legal within
 2762                          the comgroup.  This applies to joining the
 2763                          comgroup, and writing to specific stations.
 2764                          If YES, then DCBs and TERMINALs may join the
 2765                          comgroup under any name they chose, which
 2766                          may require the comgroup to build a new node
 2767                          in the station tree when the join takes place.
 2768                          Also, stations may write to any station they
 2769                          chose, which, if the destination station is
 2770                          not already represented in the station tree,
 2771                          requires building a new node.  If XSTALGL
 2772                          is NO, then one may only join under, or write
 2773                          to, a station name which is already present
 2774                          in the tree.  XSTALGL = NO is usually used
 2775                          in conjunction with the STAFC = SETLIST option
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           76   
 2776                          of M$CGCTL, which defines the exact list of
 2777                          legal station names, and inserts them in the
 2778                          station tree.  See also PERM in VLP_CGSTAL.
 2779
 2780                          The default is YES.                                     */
 2781
 2782            %(LVL+1) WAS# BIT(1) %INIT(WAS)%CHARTEXT('/**/'),
 2783                          /*K* WAS = {YES|NO} WAS = YES specifies that writing
 2784                          to an absent or deactivated station is legal.  If
 2785                          NO, such action is an error (see SMD and SECURE,
 2786                          also).  The default is NO.                              */
 2787
 2788            %(LVL+1) RAS# BIT(1) %INIT(RAS)%CHARTEXT('/**/'),
 2789                          /*K* RAS = {YES|NO} If YES, reading from an absent
 2790                          or deactivated station is legal.  If NO, such action
 2791                          is an error.
 2792
 2793                          When RAS is NO, an M$READ which specifies
 2794                          (either in VLP_STATION or VLP_SETSTA) a
 2795                          STATION other than '?' (don't-care) will
 2796                          receive a 'station-disconnected' error if
 2797                          there is no such station currently connected
 2798                          and active.  Furthermore, if such a read
 2799                          request is pending, and the last or only
 2800                          such station disconnects or is deactivated,
 2801                          then the request will be terminated with
 2802                          that error.
 2803
 2804                          One special exception is noteworthy.  Even
 2805                          if RAS is YES, such a read request will
 2806                          be errored/terminated as described above
 2807                          if it specified a MSGTYP beginning with '*'.
 2808
 2809                          The default is NO. */
 2810
 2811            %(LVL+1) SMD# BIT(1) %INIT(SMD)%CHARTEXT('/**/'),
 2812                          /*K* SMD = {YES|NO} If YES, messages written to
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           77   
 2813                          a station will be saved when it disconnects, to
 2814                          be passed to it when it reconnects.  If NO,
 2815                          such messages are deleted upon disconnect.
 2816                          NO forces WAS to NO also (see SECURE, also).
 2817                          The default is NO.                                      */
 2818
 2819            %(LVL+1) XTYPLGL# BIT(1) %INIT(XTYPLGL)%CHARTEXT('/**/'),
 2820                          /*K* XTYPLGL = {YES|NO} indicates whether (YES)
 2821                          or not (NO) any message type is legal within
 2822                          the comgroup.  This applies to write operations,
 2823                          and also to reading with a specific message
 2824                          type.  If YES, then stations may write messages
 2825                          with any type they chose, which, if the type
 2826                          is not already represented in the message type
 2827                          tree, requires building and entering a new node.
 2828                          If XTYPLGL is NO, then one may only write a
 2829                          message with a type which is already present
 2830                          in the tree.  XTYPLGL = NO is usually used in
 2831                          conjunction with the TYPFC = SETLIST option
 2832                          of M$CGCTL, which defines the exact list of
 2833                          legal message types, and inserts them in the
 2834                          message type tree.  See also PERM in VLP_CGTYPL.
 2835
 2836                          The default is YES.                                     */
 2837
 2838            %(LVL+1) MAXMC# UBIN %INIT(MAXMC)%CHARTEXT('/**/'),
 2839                          /*K* MAXMC = VALUE-DEC(0-3840) specifies maximum
 2840                          byte count permitted for a single write into the
 2841                          comgroup.  The
 2842                          default is 1024.                                        */
 2843
 2844            %(LVL+1) DVBYTE UNAL,
 2845                          /*K* DVBYTE is a collection of bits controlling
 2846                          the manner in which TERMINALs are read.  That is,
 2847                          they supply parameters controlling the way in
 2848                          which TERMINALs supply data to the comgroup.  Each
 2849                          bit is specified separately.                            */
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           78   
 2850
 2851              %(LVL+2) * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2852
 2853              %(LVL+2) BP# BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2854
 2855              %(LVL+2) REREAD# BIT(1) UNAL %INIT(REREAD)%CHARTEXT('/**/'),
 2856                          /*K* REREAD = {YES|NO} REREAD = YES
 2857                          specifies that the previous input line is to be
 2858                          echoed and set to be the current input line.
 2859                          The FPT field name for this parameter is
 2860                          VLP_CGCP.DVBYTE.REREAD#.  The default is NO.            */
 2861
 2862              %(LVL+2) VFC# REDEF REREAD# BIT(1),
 2863
 2864              %(LVL+2) BIN# BIT(1) UNAL %INIT(BIN)%CHARTEXT('/**/'),
 2865                          /*K* BIN = {YES|NO} BIN = YES specifies that
 2866                          the data is to be read as a string of bits
 2867                          rather than one character per 9-bit byte.
 2868                          The FPT field name for this parameter is
 2869                          VLP_CGCP.DVBYTE.BIN#.  The default is NO.               */
 2870
 2871              %(LVL+2) TRANS# BIT(1) UNAL %INIT(TRANS)%CHARTEXT('/**/'),
 2872                          /*K* TRANS = {YES|NO} TRANS = YES specifies
 2873                          transparency, (i.e., that data is to be read
 2874                          without translation).  This option is useful
 2875                          primarily for devices which normally perform
 2876                          translation (for instance, asynchronous
 2877                          terminals).  The FPT field name for this parameter
 2878                          is VLP_CGCP.DVBYTE.TRANS#.  The default
 2879                          is NO.                                                  */
 2880
 2881              %(LVL+2) * BIT(3) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2882
 2883              %(LVL+2) CONT# BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 2884
 2885            %(LVL+1) DEFERBLKS# UBIN BYTE UNAL %INIT(DEFERBLKS)%CHARTEXT('/**/'),
 2886                          /*K* DEFERBLKS = VALUE-DEC(5-200) is the number
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           79   
 2887                          of defer blocks to allocate.  Defer blocks are
 2888                          required when messages not in memory are needed.
 2889                          The number of blocks required depends on the
 2890                          comgroup activity level.  Statistics available to
 2891                          the AU will reveal whether the number supplied is
 2892                          too small or too large.  The minimum number is 5,
 2893                          and the maximum is 200.  The default is 20.             */
 2894
 2895            %(LVL+1) DATAPGS# UBIN(9) UNAL %INIT(DATAPGS)%CHARTEXT('/**/'),
 2896                          /*K* DATAPGS = VALUE-DEC(1-99) is the percent of
 2897                          physical memory pages (MAXPG,MINPG) that are to be
 2898                          allocated to the data cache.
 2899                          The range of values that can be produced
 2900                          for the maximum on data pages is 2 through
 2901                          MAXPG-1.  Similarly, the range of values that can
 2902                          be produced for the minimum on data pages
 2903                          is 0 through MAXPG-1.  The default is 50.               */
 2904
 2905            %(LVL+1) WRITETIME# UBIN(9) UNAL %INIT(WRITETIME)%CHARTEXT('/**/'),
 2906                          /*K* WRITETIME = VALUE-DEC(0-511) specifies the
 2907                          time in minutes that data pages are to be allowed
 2908                          to remain in memory without being written to disk.
 2909                          The default is zero, which indicates that data
 2910                          pages are never to be written for this reason.          */
 2911
 2912            %(LVL+1) AUTORCVR# BIT(1) UNAL %INIT(AUTORCVR)%CHARTEXT('/**/'),
 2913                          /*K* AUTORCVR = {YES|NO} establishes the default
 2914                          AUTORCVR value for queue nodes not established by
 2915                          M$CGCTL.  (See LIST.AUTORCVR in VLP_CGQL.)
 2916                          The default is YES.                                     */
 2917
 2918            %(LVL+1) UNLAMSG# BIT(1) UNAL %INIT(UNLAMSG)%CHARTEXT('/**/'),
 2919                          /*K* UNLAMSG = {YES|NO} specifies whether or not
 2920                          the AU wishes to receive messages automatically
 2921                          generated by UNLATCH.  (See M$UNLATCH).  If NO,
 2922                          such messages will not be generated.  The
 2923                          default is YES.                                         */
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           80   
 2924
 2925            %(LVL+1) REDUNDANT# BIT(1) UNAL %INIT(REDUNDANT)%CHARTEXT('/**/'),
 2926                          /*K* REDUNDANT = {YES|NO} specifies whether or not
 2927                          the comgroup is to have data redundancy.  Data
 2928                          redundancy increases by about 64 bytes the amount
 2929                          of space required to store a message (either in
 2930                          memory or on disk), carries with it no penalty
 2931                          in terms of execution time, and makes it possible
 2932                          to reconstruct the comgroup from the disk overflow
 2933                          area in the event of a disastrous system failure
 2934                          (i.e., one in which files are not closed).  The
 2935                          default is NO.                                          */
 2936
 2937            %(LVL+1) QRML# BIT(1) UNAL %INIT(QRML)%CHARTEXT('/**/'),
 2938                          /*K* QRML = {YES|NO} indicates whether (YES)
 2939                          or not (NO) the anonymous queue will most
 2940                          often be read with LATCH.  The value given to
 2941                          QRML affects the way in which the comgroup
 2942                          processes read and write operations in order
 2943                          to produce minimum overhead.  Assigning the
 2944                          correct value to QRML is only important in
 2945                          a large comgroup with many simultaneous
 2946                          outstanding read requests against the anonymous
 2947                          queue.  The default is NO. */
 2948
 2949            %(LVL+1) DRML# BIT(1) UNAL %INIT(DRML)%CHARTEXT('/**/'),
 2950                          /*K* DRML = {YES|NO} indicates whether (YES)
 2951                          or not (NO) DCB stations will most often read
 2952                          their own message queues with LATCH.  The
 2953                          value given to DRML affects the way in which
 2954                          the comgroup processes read and write operations
 2955                          in order to produce minimum overhead.  Note
 2956                          that if all or most DCB stations read with
 2957                          DIRONLY = NO (see VLP_STATION), then DRML
 2958                          and QRML should be set identically.  The
 2959                          default is NO. */
 2960
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           81   
 2961            %(LVL+1) BIGMXT# BIT(1) UNAL %INIT(BIGMXT)%CHARTEXT('/**/'),
 2962                          /*K* BIGMXT = {YES|NO} indicates whether (YES)
 2963                          or not (NO), message ID extensions are to take
 2964                          the 'large' form.  BIGMXT = YES is used in
 2965                          a comgroup wherein DCB stations need to latch
 2966                          more that 62 output messages to a single input
 2967                          message, or more that 6 levels of spawning
 2968                          of input messages are required.  Refer to the
 2969                          discussion of MSGID and MSGIDXT in VLP_STATION.
 2970                          The default is NO. */
 2971
 2972
 2973            %(LVL+1) DCBCONWA# BIT(1) UNAL %INIT(DCBCONWA)%CHARTEXT('/**/'),
 2974                          /*K* DCBCONWA = {YES|NO} indicates whether (YES)
 2975                          or not (NO), DCB stations are to wait for
 2976                          activation upon joining the comgroup.
 2977
 2978                          If YES, then the M$OPEN process involves waiting
 2979                          for the AU to read the DCB connect event message
 2980                          and respond with M$ACTIVATE or M$DEACTIVATE.
 2981                          If the response is ACTIVATE, then the M$OPEN
 2982                          proceeds and the DCB station joins the comgroup.
 2983
 2984                          If the response is DEACTIVATE, then the M$OPEN
 2985                          fails with an appropriate error.  Thus from
 2986                          the point of the user the M$OPEN has failed;
 2987                          from the point of the comgroup, however, the
 2988                          DCB station joins the comgroup and then immediately
 2989                          disconnects.  This means that the AU will see
 2990                          the DCB connect, respond by deactivating the station,
 2991                          and then see the DCB disconnect.
 2992
 2993                          DCBCONWA = YES is used by an AU who wishes to
 2994                          to be able to prevent DCBs from opening to his
 2995                          comgroup.  It is also
 2996                          used to prevent user programs from opening
 2997                          to the comgroup and receiving the 'deactivated'
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           82   
 2998                          error when they read or write before the AU
 2999                          can respond to the DCB open message.
 3000
 3001                          DCBCONWA is only meaningful when DCBCONAU is NO,
 3002                          and is only acted upon when the AU is connected
 3003                          to the comgroup.  In particular, a user awaiting
 3004                          AU response as a result of DCBCONWA being YES
 3005                          will proceed with his M$OPEN if the AU disconnects
 3006                          from the comgroup.  This works as follows.  If
 3007                          AUDCONDCB is ACTIVATE or NC, the M$OPEN succeeds;
 3008                          if AUDCONDCB is DEACTIVATE, the M$OPEN fails just
 3009                          as though the AU had M$DEACTIVATEd the station.
 3010
 3011                          Note that the wait in M$OPEN
 3012                          is terminated by ANY activation or deactivation.
 3013                          In particular, then, if the comgroup becomes full,
 3014                          the automatic deactivation that results will
 3015                          terminate the M$OPEN abnormally.
 3016
 3017                          The wait in M$OPEN is bypassed under any of the
 3018                          following circumstances:
 3019
 3020                          o  The DCB is being opened by the user who
 3021                          owns the AU DCB.  In this case the joining station
 3022                          will NOT be activated (since the AU is present and
 3023                          DCBCONAU, the relevant parameter, is NO).
 3024
 3025                          o  The DCB is being opened by the system JOURNAL
 3026                          ghost job, under the station name specified
 3027                          in JRNLSTA (see FPT_CGCTL).  In this case the
 3028                          joining station will be activated unconditionally.
 3029
 3030                          DCBCONWA is forced NO if CONMSG is NO.
 3031
 3032                          The default is NO. */
 3033
 3034            %(LVL+1) DSCREQ# BIT(1) UNAL %INIT(DSCREQ)%CHARTEXT('/**/'),
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           83   
 3035                          /*K* DSCREQ = {YES|NO} indicates whether (YES)
 3036                          or not (NO), disconnecting TERMINAL stations are
 3037                          to request permission to do so from the AU.
 3038
 3039                          When DSCREQ is NO, a disconnecting TERMINAL
 3040                          simply sends the %CG_TDSC# message to the AU
 3041                          and disconnects.  Since this disconnection is
 3042                          asynchronous with respect to the disconnect
 3043                          message being delivered to the AU, another
 3044                          (or perhaps the same) TERMINAL can join the
 3045                          comgroup under the same station name before
 3046                          the AU is aware of the disconnect.  Thus,
 3047                          the AU can never be sure, for example, what
 3048                          particular incarnation of a given station
 3049                          name will be affected by, say, an M$ACTIVATE.
 3050
 3051                          If necessary, this type of problem can be
 3052                          eliminated by specifying DSCREQ as YES.
 3053                          When this is done, TERMINAL stations wishing
 3054                          to disconnect send a %CG_TDRQ (disconnect
 3055                          request) event message to the AU and then
 3056                          wait for him to respond with M$DEACTIVATE
 3057                          DSCGO.  While such a station is waiting,
 3058                          any attempt to M$ACTIVATE it will produce
 3059                          a 'disconnected' error, as will an M$DEACTIVATE
 3060                          that does not specify DSCGO.  Furthermore,
 3061                          the station is treated as absent if it is
 3062                          being written to.  When the M$DEACTIVATE DSCGO
 3063                          is done, the station disconnects and the
 3064                          normal %CG_TDSC event message is sent to
 3065                          the AU.
 3066
 3067                          If the AU disconnects from the comgroup, then
 3068                          all waiting TERMINAL stations are allowed to
 3069                          disconnect automatically.
 3070
 3071                          DSCREQ is forced NO if CONMSG is NO.
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           84   
 3072
 3073                          The default is NO.                                      */
 3074
 3075            %(LVL+1) MEMWARNP# BIT(1) UNAL %INIT(MEMWARNP)%CHARTEXT('/**/'),
 3076                          /*K* MEMWARNP = {YES|NO} indicates whether (YES)
 3077                          or not (NO), the MEMWARN parameter is to apply
 3078                          only to 'permanent' context.
 3079
 3080                          See MEMWARN.  The default is NO. */
 3081
 3082            %(LVL+1) JOURNAL# BIT(1) UNAL %INIT(JOURNAL)%CHARTEXT('/**/'),
 3083                          /*K* JOURNAL = {YES|NO} indicates whether (YES)
 3084                          or not (NO) journaling is to be performed in
 3085                          the comgroup.  If NO, then this overrides the
 3086                          presence of JRNLSTA and a JRNLFID.  If YES,
 3087                          then the comgroup must possess a JRNLSTA
 3088                          (see FPT_CGCTL).
 3089
 3090                          If the comgroup is being journaled by the
 3091                          system JOURNAL GHOST (see GHSTACS in M$DCB),
 3092                          then the ghost is informed whenever the
 3093                          value of JOURNAL is changed.
 3094
 3095                          The default is NO. */
 3096
 3097            %(LVL+1) * BIT(2) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 3098
 3099            %(LVL+1) CARRYOSTA# BIT(1) UNAL %INIT(CARRYOSTA)%CHARTEXT('/**/'),
 3100                        /*K* CARRYOSTA = {YES|NO}. YES specifies
 3101                        that the origin station of the current latched read
 3102                        be used as the origin station for all latched DCB writes
 3103                        into the anonymous queue. The contribution to priority
 3104                        by a station comes from the current latched read also.
 3105                        CARRYOSTA = NO specifies that the origin station
 3106                        name and the station's contribution to priority
 3107                        come from the current writer's station. The default
 3108                        is NO.                                                   */
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           85   
 3109
 3110            %(LVL+1) DCBCONLGL# BIT(1) UNAL %INIT(DCBCONLGL)%CHARTEXT('/**/'),
 3111                          /*K* DCBCONLGL = {YES|NO} specifies whether or not
 3112                          DCBs are allowed to open to this comgroup.  If
 3113                          NO, the AU will be exempted from this restriction.  The
 3114                          default is YES.
 3115                          */
 3116
 3117            %(LVL+1) TERMCONLGL# BIT(1) %INIT(TERMCONLGL)%CHARTEXT('/**/'),
 3118                          /*K* TERMCONLGL = {YES|NO} specifies whether or
 3119                          not terminals are allowed to connect to this
 3120                          comgroup.  If NO, this will prevent connection
 3121                          despite the system manager having authorized
 3122                          logons which specify connection to this comgroup.
 3123                          The default is YES.                                     */
 3124
 3125            %(LVL+1) INPUT# BIT(1) %INIT(INPUT)%CHARTEXT('/**/'),
 3126                          /*K* INPUT = {YES|NO} specifies whether or not
 3127                          terminals connected to this comgroup are capable
 3128                          of inputting data to the comgroup (i.e., generating
 3129                          messages).  The default is YES.                         */
 3130
 3131            %(LVL+1) OUTPUT# BIT(1) %INIT(OUTPUT)%CHARTEXT('/**/'),
 3132                          /*K* OUTPUT = {YES|NO} specifies whether or not
 3133                          terminals connected to this comgroup are capable
 3134                          of outputting data from the comgroup (i.e. receiving
 3135                          messages).  The default is YES.                         */
 3136
 3137            %(LVL+1) SECURE# BIT(1) UNAL %INIT(SECURE)%CHARTEXT('/**/'),
 3138                          /*K* SECURE = {YES|NO} specifies the mode of
 3139                          operation with respect to guarantee of message
 3140                          delivery.  If YES, the specifications for SMD
 3141                          and WAS are overridden and set to YES, and
 3142                          messages read by TERMINALs are not deleted
 3143                          until the entire message has been output.  This
 3144                          has the effect of ensuring delivery of any message
 3145                          which has been successfully written into the
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           86   
 3146                          comgroup, and is destined for a TERMINAL.  Note
 3147                          that this does not apply to messages read by
 3148                          DCBs, but that a similar mode of operation may
 3149                          be enforced by supplying a VLP_SETSTA on M$CGCTL
 3150                          that has LATCH=YES, thus forcing all DCBs to read
 3151                          with LATCH and ensuring message delivery.
 3152
 3153                          SECURE = NO permits TERMINAL-directed messages to
 3154                          be deleted after the message has been delivered
 3155                          but (possibly) before it has actually been output,
 3156                          and has no effect on SMD or WAS.
 3157
 3158                          The default is NO.                                      */
 3159
 3160            %(LVL+1) TRMRDSIZ# UBIN HALF UNAL %INIT(TRMRDSIZ)%CHARTEXT('/**/'),
 3161                          /*K* TRMRDSIZ = VALUE-DEC(1-MAXMC) specifies the
 3162                          size of the reads done to terminals by the comgroup.
 3163                          TRMRDSIZ thus specifies the largest message that
 3164                          can be input from a terminal and the point at
 3165                          which asynchronous terminals will activate on
 3166                          byte count.
 3167
 3168                          The minimum is 1; the maximum is the value specified
 3169                          for MAXMC.  The default is 140.
 3170                                                                                   */
 3171
 3172            %(LVL+1) DISKWARN# UBIN HALF HALIGNED %INIT(DISKWARN)%CHARTEXT('/**/'),
 3173                          /*K* DISKWARN = VALUE-DEC(0-18000) specifies a
 3174                          number of granules.  When the number of
 3175                          free granules left in the comgroup file equals MAXPG +
 3176                          DISKWARN, the AU will receive a warning message.
 3177                          (See CG_WARN under EQU_CG.)
 3178                          The default is 0 (no message ever).                     */
 3179
 3180            %(LVL+1) MEMWARN# UBIN HALF HALIGNED %INIT(MEMWARN)%CHARTEXT('/**/'),
 3181                          /*K* MEMWARN = VALUE-DEC (0-18000) specifies
 3182                          the level at which a warning message will be
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           87   
 3183                          issued to the AU (see CG_WARN# in EQU_CG).
 3184
 3185                          When the comgroup is acquiring more memory
 3186                          in order to meet demand, the AU may wish
 3187                          to know if the amount of memory currently
 3188                          in use is approaching the maximum possible.
 3189                          Note that this maximum is derived from the
 3190                          interaction between MAXPG and DATAPGS.
 3191
 3192                          MEMWARN establishes the value for
 3193                          maximum minus current at which the warning will
 3194                          be issued.
 3195
 3196                          If MEMWARNP is NO, then 'current' is construed
 3197                          to mean all context memory.  This includes
 3198                          station- and type-tree nodes, as well as
 3199                          MBLK storage and miscellaneous other items.
 3200                          If MEMWARNP is YES, then 'current' is construed
 3201                          to mean only 'permanent' storage, that is
 3202                          station- and type-tree nodes.
 3203
 3204                          For example, suppose MAXPG is 125 and DATAPGS
 3205                          is 20.  This means that the maximum for all
 3206                          context is 100 pages.  Suppose further that
 3207                          MEMWARN is 20 and MEMWARNP is NO.  Then the
 3208                          warning will be issued whenever the number
 3209                          of current context pages goes from 79 to 80.
 3210                          If, on the other hand, MEMWARNP is YES,
 3211                          then the warning will not be issued until
 3212                          the number of pages allocated to station-
 3213                          and type- tree nodes goes from 79 to 80.
 3214                          Note that before the warning is issued, the
 3215                          actual number of context pages may climb to
 3216                          100, due to demand for MBLK storage.  Note
 3217                          further that in this case the comgroup may
 3218                          be resorting to spilling MBLKs to disk,
 3219                          without the AU receiving any warning.
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           88   
 3220
 3221                          The setting of MEMWARNP essentially depends
 3222                          on what the AU wishes to prevent.  If the AU
 3223                          wishes to prevent MBLK spillage, then MEMWARNP
 3224                          should be specified as NO.  On the other hand,
 3225                          if MBLK spillage is deemed acceptable (or perhaps
 3226                          even desirable), then MEMWARNP should be specified
 3227                          as YES, and then the warning will only be issued
 3228                          when the amount of non-spillable context
 3229                          reaches the MEMWARN limit.
 3230
 3231                          The default for MEMWARN is zero (no warning will
 3232                          ever be issued). */
 3233
 3234           %(LVL+1) MINRD# UBIN HALF HALIGNED %INIT(MINRD)%CHARTEXT('/**/'),
 3235                          /*K* MINRD = VALUE-DEC(2-511)  specifies the minimum
 3236                          number of outstanding reads a FEP can have to a
 3237                          station attached to the comgroup.  MINRD is used
 3238                          together with the MAXRD parameter to determine how
 3239                          often the comgroup requests data from the terminal
 3240                          station.  Please see MAXRD for details.  This parameter
 3241                          affects every station attached to the comgroup,
 3242                          except ones that have been explicitly changed on
 3243                          their activation.  The default is 10. */
 3244
 3245           %(LVL+1) MAXRD# UBIN HALF HALIGNED %INIT(MAXRD)%CHARTEXT('/**/'),
 3246                          /*K* MAXRD = VALUE-DEC(3-511)  specifies the maximum
 3247                          number of outstanding reads a FEP can have to a
 3248                          station attached to the comgroup.  MAXRD is used
 3249                          together with the MINRD parameter to determine how
 3250                          often the comgroup requests data from the terminal
 3251                          stations.  The comgroup solicits data from a
 3252                          terminal station every time another (MAXRD - MINRD)
 3253                          messages have been received.  If it takes a long
 3254                          time to get messages from the terminal to the
 3255                          comgroup and back.  The default value of MAXRD
 3256                          (20) and MINRD (10) may not be enough to
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           89   
 3257                          accomplish that goal.  If it takes the same time
 3258                          to get from the terminal to the comgroup as it
 3259                          does to get back, then MINRD should be MAXRD/2,
 3260                          and MAXRD should be the number of messages the
 3261                          terminal is expected to send during a round-trip
 3262                          interval, at least.  This parameter
 3263                          affects every station attached to the comgroup,
 3264                          except ones that have been explicitly changed on
 3265                          their activation.  If MINRD is set higher than
 3266                          MAXRD, a value higher than MINRD is assumed
 3267                          instead.  The default is 20. */
 3268
 3269           %(LVL+1) REDISKWARN# UBIN HALF HALIGNED %INIT(REDISKWARN)%CHARTEXT('/**/'),
 3270                          /*K* REDISKWARN = VALUE-DEC(3-18000) specifies
 3271                           a number of granules.  Once the DISKWARN
 3272                          warning message has been sent to the AU, this value will
 3273                          represent the number of granules that must be emptied
 3274                          to reset DISKWARN, so in the event that the comgroup
 3275                          file fills up again, the AU will be warned a second
 3276                          time.  This value is present to prevent the AU from
 3277                          getting multiple diskwarn messages if the comgroup
 3278                          operates around the DISKWARN point for a long time.
 3279                          The default is a maximum of 2, or 1/20 of the
 3280                          comgroup file size.                                     */
 3281           %(LVL+1) *(0:6) UBIN %INIT(0*0)%CHARTEXT('/**/') LAST
 3282
 3283
 3284      %MEND;
 3285
 3286                          /*F* NAME:  VLP_JRNLFID
 3287
 3288                          The VLP_JRNLFID macro is used to generate
 3289                          the FID for a journal file.
 3290                          It generates a length halfword and a character
 3291                          string of fixed length.  See also VLP_JRNLFIDV.
 3292
 3293                          The maximum length of the text string is
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           90   
 3294                          2048 characters.
 3295                          */
 3296
 3297       %MACRO VLP_JRNLFID   (FPTN=VLP_JRNLFID,
 3298               JRNLFID   = '                               ',
 3299               LEN       = 0,
 3300               STCLASS   = STATIC);
 3301
 3302       %LSET LISTDIR='0'B;
 3303       %LSET LISTEXP='1'B;
 3304       %LSET LISTCOM='0'B;
 3305       %LSET LISTSUB='1'B;
 3306       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 3307       %IF (SUBSTR(STR,0,6)='STATIC') OR
 3308       (SUBSTR(STR,0,8)='CONSTANT') OR
 3309       (SUBSTR(STR,0,3)='EXT');
 3310       %LSET INIT=CHARTEXT('INIT');
 3311       %ELSE;
 3312       %LSET INIT=CHARTEXT('/*');
 3313       %ENDIF;
 3314
 3315
 3316      DCL 1 FPTN STCLASS,
 3317            2 L# UBIN HALF UNAL %INIT(SIZEC(JRNLFID))%CHARTEXT('/**/'),
 3318                          /*K* L is the length halfword.  It is set for the user to the
 3319                          length of JRNLFID, or to 31 if JRNLFID is not
 3320                          specified. */
 3321
 3322            2 JRNLFID# CHAR(LEN) UNAL %INIT(JRNLFID)%CHARTEXT('/**/');
 3323                          /*K* JRNLFID = VALUE-CHAR.  Specifies a FID.
 3324                          The length of the CHAR field
 3325                          generated is the length of JRNLFID (31 if JRNLFID is
 3326                          not specified).  The LEN parameter can be
 3327                          specified to override the length (e.g. LEN=5).
 3328                          See M$DCB for the character set for file names.
 3329                          If STCLASS=BASED is used, LEN must be specified.
 3330                          See also VLP_JRNLFIDV for a different type of based
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           91   
 3331                          structure.
 3332                          */
 3333
 3334       %MEND;
 3335
 3336                          /*K* LEN = VALUE-DEC(0-?) specifies the number of
 3337                          bytes to be provided for the FID.
 3338                          */
 3339
 3340                          /*F* NAME:  VLP_JRNLFIDV
 3341
 3342                          The VLP_JRNLFIDV macro generates a based version
 3343                          of the VLP_JRNLFID macro with the length of the
 3344                          character string being the value currently in
 3345                          the length halfword.
 3346                          */
 3347      %MACRO VLP_JRNLFIDV   (FPTN=VLP_JRNLFIDV,
 3348                          STCLASS=BASED);
 3349
 3350      %LSET LISTDIR='0'B;
 3351      %LSET LISTEXP='1'B;
 3352      %LSET LISTCOM='0'B;
 3353      %LSET LISTSUB='1'B;
 3354
 3355      DCL 1 FPTN STCLASS,
 3356            2 L# UBIN HALF UNAL,
 3357            2 JRNLFID# CHAR(FPTN.L#);
 3358
 3359      %MEND;
 3360
 3361
 3362
 3363                          /*F* NAME:  B$CGAURD
 3364
 3365                          The B$CGAURD macro may be used to generate a
 3366                          based structure to receive special event messages
 3367                          given to the administrative user (AU).  Special
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           92   
 3368                          events occurring within a comgroup are reported
 3369                          when the AU reads through the AU DCB.  Regardless
 3370                          of the qualifying parameters specified on the
 3371                          call to M$READ, the read will be satisfied
 3372                          by one of these special 'event' messages if there
 3373                          is one.  Such a message is identified by the
 3374                          message type, which is '*AUEV'.  This structure
 3375                          is used to frame the data returned into the buffer
 3376                          specified on M$READ.
 3377                          */
 3378      %MACRO B$CGAURD (FPTN=B$CGAURD,STCLASS=BASED,LAST=";",LVL=1);
 3379
 3380       %LSET LISTDIR='0'B;
 3381       %LSET LISTEXP='1'B;
 3382       %LSET LISTCOM='0'B;
 3383       %LSET LISTSUB='1'B;
 3384       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 3385       %IF (SUBSTR(STR,0,6)='STATIC') OR
 3386       (SUBSTR(STR,0,8)='CONSTANT') OR
 3387       (SUBSTR(STR,0,3)='EXT');
 3388       %LSET INIT=CHARTEXT('INIT');
 3389       %ELSE;
 3390       %LSET INIT=CHARTEXT('/*');
 3391       %ENDIF;
 3392
 3393       %IF LVL=1;
 3394      DCL 1 FPTN STCLASS ALIGNED,
 3395       %ELSE;
 3396              %LVL FPTN ALIGNED,
 3397       %ENDIF;
 3398            %(LVL+1) EVENT UBIN WORD ALIGNED %INIT(0)%CHARTEXT('/**/'),
 3399                          /*K* EVENT contains the code identifying which
 3400                          type of event this is.  See %CG_XXXX# defined
 3401                          by the macro EQU_CG.                                    */
 3402
 3403            %(LVL+1) STATION CHAR(8) UNAL %INIT(' ')%CHARTEXT('/**/'),
 3404                          /*K* STATION = VALUE-CHAR(8) is the name of
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           93   
 3405                          the station (if any) associated with this event.        */
 3406
 3407            %(LVL+1) MID REDEF STATION,
 3408                          /*K* MID is meaningful only when EVENT is
 3409                          CG_JNLD#, i.e. when the event is 'journal
 3410                          delete'.  MID contains the message ID of
 3411                          the message whose deletion is being reported. */
 3412
 3413              %(LVL+2) MSGID UBIN WORD,
 3414                          /*K* MID.MSGID = VALUE-DEC (1-?) is the
 3415                          primary part of the message ID. */
 3416
 3417              %(LVL+2) MSGIDXT UBIN WORD,
 3418                          /*K* MID.MSGIDXT = VALUE-DEC (1-?) is the
 3419                          extension part of the message ID. */
 3420
 3421            %(LVL+1) INFO UBIN WORD ALIGNED %INIT(0)%CHARTEXT('/**/') LAST
 3422                          /*K* INFO is one word of information specific to
 3423                          this event.  For example, it may contain the type
 3424                          of break (control-Y, BREAK, input ready) for the
 3425                          CG_TBRK# event.  Some events
 3426                          supply more information.  In these
 3427                          cases, the extra information follows INFO in the
 3428                          user's buffer.  The format of this information
 3429                          will be specific to the type of event.  By
 3430                          setting LAST="," and supplying appropriate
 3431                          following structure, B$CGAURD may be made to
 3432                          frame the entire buffer.
 3433
 3434                          Following is a list of the event codes and
 3435                          corresponding to each the structure which
 3436                          frames the remainder of the message:
 3437
 3438                          .FIF
 3439                          CG_TCON#             B$CGAUCI
 3440                          CG_DOPN#             B$CGAUCI
 3441                          CG_UNLR#             VLP_STATION
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           94   
 3442                          CG_UNLH#             VLP_STATION
 3443                          CG_UNLD#             VLP_STATION
 3444                                                 (for these, the VLP_STATION
 3445                                                  describes the UNLATCHed
 3446                                                  message in the same manner
 3447                                                  as the VLP_STATION in a
 3448                                                  DCB following an M$READ
 3449                                                  describes the message
 3450                                                  just read).
 3451                          CG_FWCG#             See INFORM in FPT_FWCG
 3452                          CG_FPLDTRC#          VLP_FPRG
 3453                          .FIN
 3454                                                                                  */
 3455      %MEND;
 3456                          /*F* NAME:  B$CGAUCI
 3457
 3458                          The B$CGAUCI macro may be used to generate a
 3459                          based structure to receive information regarding
 3460                          DCB and TERMINAL connects for a comgroup
 3461                          administrative user (AU) (for the CG_TCON# and
 3462                          CG_DOPN# events).  This information follows
 3463                          B$CGAURD in the buffer, and is framed by
 3464                          B$CGAUCI.                                               */
 3465
 3466      %MACRO B$CGAUCI (FPTN=B$CGAUCI,STCLASS=BASED,LAST=";",LVL=1,INFOSZ=12,AC=' ',NM=' ');
 3467
 3468       %LSET LISTDIR='0'B;
 3469       %LSET LISTEXP='1'B;
 3470       %LSET LISTCOM='0'B;
 3471       %LSET LISTSUB='1'B;
 3472       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 3473       %IF (SUBSTR(STR,0,6)='STATIC') OR
 3474       (SUBSTR(STR,0,8)='CONSTANT') OR
 3475       (SUBSTR(STR,0,3)='EXT');
 3476       %LSET INIT=CHARTEXT('INIT');
 3477       %ELSE;
 3478       %LSET INIT=CHARTEXT('/*');
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           95   
 3479       %ENDIF;
 3480
 3481       %IF LVL=1;
 3482      DCL 1 FPTN STCLASS ALIGNED,
 3483       %ELSE;
 3484              %LVL FPTN ALIGNED,
 3485       %ENDIF;
 3486            %(LVL+1) WIDTH UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
 3487                          /*K* WIDTH = VALUE-DEC(0-?) is the logical line
 3488                          width for output (TERMs only).                          */
 3489
 3490            %(LVL+1) LENGTH UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
 3491                          /*K* LENGTH = VALUE-DEC(0-?) is the logical page
 3492                          length for output (TERMs only).                         */
 3493
 3494            %(LVL+1) * BIT(72) %INIT('0'B)%CHARTEXT('/**/'),
 3495
 3496            %(LVL+1) WHO,
 3497                          /*K* WHO provides identification of the
 3498                          connecting entity.                                      */
 3499
 3500              %(LVL+2) ACCT CHAR(8) UNAL %INIT(AC)%CHARTEXT('/**/'),
 3501                          /*K* WHO.ACCT = VALUE-CHAR(8) is the logon
 3502                          ACCOUNT for DCBs and TERMS.                             */
 3503
 3504              %(LVL+2) NAME CHAR(12) UNAL %INIT(NM)%CHARTEXT('/**/'),
 3505                          /*K* WHO.NAME = VALUE-CHAR(12) is the logon
 3506                          NAME for DCBs and TERMs.                                */
 3507
 3508            %(LVL+1) FLG UNAL,
 3509                          /*K* FLG contains various flags.                        */
 3510
 3511              %(LVL+2) INPUT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 3512                          /*K* FLG.INPUT = VALUE-BIT(1) indicates
 3513                          input is legal on this device (TERMs only).             */
 3514
 3515              %(LVL+2) OUTPUT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           96   
 3516                          /*K* FLG.OUTPUT = VALUE-BIT(1) indicates output
 3517                          is legal on this device (TERMs only).                   */
 3518
 3519              %(LVL+2) * BIT(7) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 3520
 3521            %(LVL+1) ATTR BIT(18) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 3522                          /*K* ATTR is the mask of device
 3523                          attribute bits (TERMs only).                            */
 3524
 3525            %(LVL+1) SYSID REDEF ATTR UBIN HALF UNAL,
 3526                          /*K* SYSID is the SYSID of the user who owns
 3527                          the connecting DCB (DCBs only).                         */
 3528
 3529            %(LVL+1) NWINFO UBIN BYTE UNAL %INIT(INFOSZ)%CHARTEXT('/**/') LAST
 3530                          /*K* NWINFO = VALUE-DEC(0-511) is the number of
 3531                          of words of extra INFO following B$CGAUCI.
 3532                          There may also be extra words of information
 3533                          specific to the individual comgroup.
 3534                          NWINFO contains the number of words present, and
 3535                          the individual AU may attach his own structure
 3536                          to frame the information. The structure
 3537                          B$CGAUINFO may be used directly or as a
 3538                          template for such a structure.                          */
 3539      %MEND;
 3540
 3541                          /*F* NAME:  B$CGAUINFO
 3542
 3543                          The B$CGAUINFO macro may be used to generate
 3544                          a based structure to receive extra information
 3545                          passed to the administrative user (AU) of a
 3546                          comgroup when a TERMINAL connects.  The system
 3547                          manager may supply extra TERMINAL connect
 3548                          information to SUPER.  This is its default
 3549                          structure.                                              */
 3550
 3551      %MACRO B$CGAUINFO (FPTN=B$CGAUINFO,STCLASS=BASED,LVL=1);
 3552
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           97   
 3553       %LSET LISTDIR='0'B;
 3554       %LSET LISTEXP='1'B;
 3555       %LSET LISTCOM='0'B;
 3556       %LSET LISTSUB='1'B;
 3557       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 3558       %IF (SUBSTR(STR,0,6)='STATIC') OR
 3559       (SUBSTR(STR,0,8)='CONSTANT') OR
 3560       (SUBSTR(STR,0,3)='EXT');
 3561       %LSET INIT=CHARTEXT('INIT');
 3562       %ELSE;
 3563       %LSET INIT=CHARTEXT('/*');
 3564       %ENDIF;
 3565
 3566       %IF LVL=1;
 3567      DCL 1 FPTN STCLASS ALIGNED,
 3568       %ELSE;
 3569              %LVL FPTN ALIGNED,
 3570       %ENDIF;
 3571            %(LVL+1) USER1 UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 3572                          /*K* USER1 = VALUE-DEC(0-?) is a word of
 3573                          information supplied by the system manager to
 3574                          SUPER when the device is authorized.  Its value
 3575                          is meaningful only to the receiving program.            */
 3576
 3577            %(LVL+1) USER2 UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 3578                          /*K* USER2 = VALUE-DEC(0-?)  (See USER1.)               */
 3579
 3580            %(LVL+1) USER3 UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 3581                          /*K* USER3 = VALUE-DEC(0-?)  (See USER1.)               */
 3582
 3583            %(LVL+1) USER4 UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 3584                          /*K* USER4 = VALUE-DEC(0-?)  (See USER1.)               */
 3585
 3586            %(LVL+1) UCMDCNT UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 3587                          /*K* UCMDCNT = VALUE-DEC(0-80) is the length
 3588                          in bytes of a command supplied for this device
 3589                          by the system manager using SUPER.  If the
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           98   
 3590                          command is present (UCMDCNT~=0) it is only
 3591                          meaningful to the receiving program.                    */
 3592
 3593            %(LVL+1) UCMD CHAR(80) %INIT(' ')%CHARTEXT('/**/');
 3594                          /*K* CMD = VALUE-CHAR(80) is the text of
 3595                          the command described in UCMDCNT.                       */
 3596
 3597      %MEND;
 3598
 3599                          /*F* NAME:  B$CGAUCRD
 3600
 3601                          The B$CGAUCRD macro provides a complete structure
 3602                          for comgroup administrative user (AU) connect
 3603                          events.  B$CGAURD, B$CGAUCI, and B$CGAUINFO are
 3604                          invoked by this one macro.                              */
 3605
 3606      %MACRO B$CGAUCRD (FPTN=B$CGAUCRD,STCLASS=BASED);
 3607              %B$CGAURD (FPTN=FPTN,LAST=",",STCLASS=STCLASS);
 3608              %B$CGAUCI (LVL=2,FPTN=CGAUCI,STCLASS=STCLASS,LAST=",");
 3609              %B$CGAUINFO (LVL=2,FPTN=AUINFO,STCLASS=STCLASS);
 3610      %MEND;
 3611
 3612
 3613                          /*F* NAME:  EQU_CG.
 3614
 3615                          The EQU_CG macro generates EQUs which are of
 3616                          use in dealing with comgroups, particularly for
 3617                          an AU.  A list of the symbols thus defined
 3618                          follows.
 3619
 3620                          The codes beginning with simply CG_ are for
 3621                          the AU event messages generated by the comgroup.
 3622                          These codes are reported in B$CGAURD.EVENT,
 3623                          and are:
 3624
 3625                          .FIF
 3626                          CG_DOPN#                DCB open
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           99   
 3627                          CG_DCLS#                DCB close
 3628                          CG_TCON#                TERMINAL connect
 3629                          CG_TDRQ#                TERMINAL disconnect request
 3630                          CG_TDSC#                TERMINAL disconnect
 3631                          CG_TBRK#                TERMINAL BREAK
 3632                          CG_UNLR#                UNLATCH 'rerun' performed
 3633                          CG_UNLH#                UNLATCH 'hold' performed
 3634                          CG_UNLD#                UNLATCH 'delete' performed
 3635                          CG_WARN#                Comgroup is low on space
 3636                          CG_FWCG#                Message generated by M$FWCG
 3637                          CG_JNLD#                Journal delete message
 3638                          CG_FPEXIT#              FPRG issued an M$EXIT
 3639                          CG_FPABORT#             FPRG aborted
 3640                          CG_FPLDTRC#             FPRG issued an M$LDTRC successfully
 3641                          .FIN
 3642
 3643                          The codes beginning with CG_WARN_ identify
 3644                          variations of the CG_WARN event message,
 3645                          and are reported in B$CGAURD.INFO :
 3646
 3647                          .FIF
 3648                          CG_WARN_MEM#            Available memory is low
 3649                          CG_WARN_DISK#           Disk free space is low
 3650                          .FIN
 3651
 3652                          The codes beginning with CG_TBRK_ identify
 3653                          variations of the CG_TBRK event message,
 3654                          and are reported in B$CGAURD.INFO :
 3655
 3656                          .FIF
 3657                          CG_TBRK_BRK#            BREAK
 3658                          CG_TBRK_EC#             Control-Y
 3659                          CG_TBRK_RDY#            Input ready (card reader)
 3660                          .FIN
 3661
 3662                          The codes beginning with CG_UNL_ identify
 3663                          variations of the CG_UNLX event messages,
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           100  
 3664                          and are reported in B$CGAURD.INFO :
 3665
 3666                          .FIF
 3667                          CG_UNL_USER#            UNLATCH performed by user
 3668                          CG_UNL_RCVR#            UNLATCH performed by comgroup
 3669                          }                       recovery after system crash.
 3670                          .FIN
 3671
 3672
 3673                          The codes beginning with CG_CTLFC_ are the
 3674                          options for TYPFC and STAFC of M$CGCTL :
 3675
 3676                          .FIF
 3677                          CG_CTLFC_CHGATTR#       Change attributes
 3678                          CG_CTLFC_ADD#           Add
 3679                          CG_CTLFC_DELETE#        Delete
 3680                          CG_CTLFC_SETLIST#       Set list
 3681                          .FIN
 3682
 3683                          The codes beginning with CG_INFFC_ are the options
 3684                          for TYPFC and STAFC of M$CGINFO :
 3685
 3686                          .FIF
 3687                          CG_INFFC_SELECT#        Select
 3688                          CG_INFFC_DUMP#          Dump
 3689                          CG_INFFC_WILD#          Wild
 3690                          .FIN
 3691
 3692                          The codes beginning with CG_QSELECT_ are the
 3693                          options for QSELECT of M$FWCG:
 3694
 3695                          .FIF
 3696                          CG_QSELECT_ALL#              ALL
 3697                          CG_QSELECT_DIRECT#           DIRECT
 3698                          CG_QSELECT_ANONYMOUS#        ANONYMOUS
 3699                          .FIN
 3700                          */
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           101  
 3701
 3702      %MACRO EQU_CG;
 3703
 3704      /**/
 3705      /* Values for FPT fields */
 3706      /**/
 3707                                    /* FPT_ACTIVATE, VLP_CGCP                     */
 3708      %EQU ACTIVATE#=1;
 3709      %EQU DEACTIVATE#=2;
 3710      %EQU DISCONNECT#=3;
 3711
 3712
 3713
 3714      /**/
 3715      /* Codes for AU 'event' reads - reported in B$CGAURD.EVENT */
 3716      /**/
 3717      %EQU CG_DOPN#=0;              /* DCB open                                   */
 3718      %EQU CG_DCLS#=1;              /* DCB close                                  */
 3719      %EQU CG_TCON#=2;              /* Terminal connect                           */
 3720      %EQU CG_TDSC#=3;              /* Terminal disconnect                        */
 3721      %EQU CG_TBRK#=4;              /* Terminal break                             */
 3722      %EQU CG_UNLR#=6;              /* UNLATCH rerun done                         */
 3723      %EQU CG_UNLH#=7;              /* UNLATCH hold done                          */
 3724      %EQU CG_UNLD#=8;              /* UNLATCH delete done                        */
 3725      %EQU CG_WARN#=9;              /* Warning message                            */
 3726
 3727                                    /* Begin system-only codes                    */
 3728
 3729      %EQU CG_STDSC#=10;            /* Symbiont terminal disconnect               */
 3730      %EQU CG_STHLD#=11;            /* Symbiont holding                           */
 3731      %EQU CG_SFERR#=12;            /* Symbiont file error - holding              */
 3732      %EQU CG_STERR#=13;            /* Symbiont terminal error - holding          */
 3733      %EQU CG_SFEXT#=14;            /* Symbiont file extent complete              */
 3734      %EQU CG_SFSPA#=15;            /* Symbiont file spacing complete - holding   */
 3735      %EQU CG_STOKN#=16;            /* Symbiont token response                    */
 3736      %EQU CG_STACK#=17;            /* Symbiont write response                    */
 3737      %EQU CG_AUCON#=18;            /* AU connect                                 */
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           102  
 3738      %EQU CG_AUDCON#=19;           /* AU disconnect                              */
 3739
 3740                                    /* End system-only codes                      */
 3741
 3742                                    /* Resume user codes */
 3743
 3744      %EQU CG_FWCG#=20;             /* Message generated by M$FWCG                */
 3745      %EQU CG_JNLD#=21;             /* Journal delete                             */
 3746      %EQU CG_TDRQ#=22;             /* Terminal disconnect request                */
 3747      %EQU CG_FPEXIT#=24;           /* FPRG TERMINAL station at jobstep            */
 3748                                    /* resulting from an M$EXIT.                   */
 3749      %EQU CG_FPABORT#=25;          /* FPRG TERMINAL station at jobstep resulting  */
 3750                                    /* from an abort of some kind.                 */
 3751      %EQU CG_FPLDTRC#=26;          /* FPRG TERMINAL station successfully          */
 3752                                    /* issued an M$LDTRC.                          */
 3753
 3754      %EQU CG_MAX#=30;              /* MAX event number                           */
 3755
 3756
 3757
 3758      /**/
 3759      /* Subcodes for CG_WARN# - reported in B$CGAURD.INFO */
 3760      /**/
 3761      %EQU CG_WARN_MEM#=1;          /* Memory low                                 */
 3762      %EQU CG_WARN_DISK#=2;         /* Disk space low                             */
 3763
 3764
 3765
 3766      /**/
 3767      /* Subcodes for CG_TBRK# - reported in B$CGAURD.INFO */
 3768      /**/
 3769      %EQU CG_TBRK_BRK#=1;          /* BREAK                                      */
 3770      %EQU CG_TBRK_EC#=2;           /* Control-Y                                  */
 3771      %EQU CG_TBRK_RDY#=10;         /* Input ready                                */
 3772
 3773
 3774
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           103  
 3775      /**/
 3776      /* Codes for M$CGCTL TYPFC and STAFC */
 3777      /**/
 3778      %EQU CG_CTLFC_CHGATTR# =1;    /* Change attributes                          */
 3779      %EQU CG_CTLFC_ADD#     =2;    /* Add                                        */
 3780      %EQU CG_CTLFC_DELETE#  =3;    /* Delete                                     */
 3781      %EQU CG_CTLFC_SETLIST# =4;    /* Set entire list                            */
 3782
 3783
 3784
 3785      /**/
 3786      /* Codes for M$CGINFO TYPFC and STAFC */
 3787      /**/
 3788      %EQU CG_INFFC_SELECT# =1;     /* Select list                                */
 3789      %EQU CG_INFFC_DUMP#   =2;     /* Dump entire list                           */
 3790      %EQU CG_INFFC_WILD#   =3;     /* Dump all elements matching wildcard        */
 3791
 3792
 3793
 3794      /**/
 3795      /* Codes for CG_UNLR/CG_UNLH/CG_UNLD - reported in B$CGAURD.INFO */
 3796      /**/
 3797      %EQU CG_UNL_USER#=0;          /* Done by user                               */
 3798      %EQU CG_UNL_RCVR#=1;          /* Done by system recovery                    */
 3799
 3800
 3801
 3802      /**/
 3803      /* Codes for M$FWCG QSELECT */
 3804      /**/
 3805      %EQU CG_QSELECT_ALL#      =1; /* All                                        */
 3806      %EQU CG_QSELECT_DIRECT#   =2; /* Directed messages only                     */
 3807      %EQU CG_QSELECT_ANONYMOUS#=3; /* Anonymous queue only                       */
 3808      %MEND;
 3809                                    /****************************************
 3810                                     ***                                  ***
 3811                                     ***            M$CGINFO              ***
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           104  
 3812                                     ***                                  ***
 3813                                     ****************************************/
 3814
 3815
 3816                          /*F* NAME: M$CGINFO - Comgroup Information.
 3817
 3818                          The M$CGINFO service provides a comgroup administrative
 3819                          user (AU) with the capability to gather information about
 3820                          the status of his comgroup.
 3821
 3822                          The form of the call for this service is:
 3823
 3824                          CALL M$CGINFO (FPT_CGINFO) [ALTRET (label)];
 3825
 3826                          The parameters for this service are as follows:         */
 3827
 3828      %MACRO FPT_CGINFO (FPTN=FPT_CGINFO,
 3829               DCB       = NIL,
 3830               STCLASS   = STATIC,
 3831               TYPLIST   = NIL,
 3832               STALIST   = NIL,
 3833               CGCP      = NIL,
 3834               SETSTA    = NIL,
 3835               QLIST     = NIL,
 3836               STATS     = NIL,
 3837               HOLDSTA   = NIL,
 3838               JRNLSTA   = NIL,
 3839               JRNLFID   = NIL,
 3840               TYPFC     (SELECT=1,DUMP=2,WILD=3)= 1,
 3841               STAFC     (SELECT=1,DUMP=2,WILD=3)= 1);
 3842
 3843       %LSET LISTDIR='0'B;
 3844       %LSET LISTEXP='1'B;
 3845       %LSET LISTCOM='0'B;
 3846       %LSET LISTSUB='1'B;
 3847       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 3848       %IF (SUBSTR(STR,0,6)='STATIC') OR
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           105  
 3849       (SUBSTR(STR,0,8)='CONSTANT') OR
 3850       (SUBSTR(STR,0,3)='EXT');
 3851       %LSET INIT=CHARTEXT('INIT');
 3852       %ELSE;
 3853       %LSET INIT=CHARTEXT('/*');
 3854       %ENDIF;
 3855
 3856      DCL 1 FPTN STCLASS,
 3857            2 V_ BIT(72) UNAL %INIT(VECTOR(FPTN.V))%CHARTEXT('/**/'),
 3858
 3859            2 TYPLIST_ BIT(72) UNAL %INIT(VECTOR(TYPLIST))%CHARTEXT('/**/'),
 3860                          /*K* TYPLIST = VARIABLE locates a VLP_CGTYPL area
 3861                          which will receive information about the currently
 3862                          known message types.  (See TYPFC.)
 3863
 3864                          The default is NIL. */
 3865
 3866            2 STALIST_ BIT(72) UNAL %INIT(VECTOR(STALIST))%CHARTEXT('/**/'),
 3867                          /*K* STALIST = VARIABLE locates a VLP_CGSTAL area
 3868                          which will receive information about the currently
 3869                          known stations.  (See STAFC.)
 3870
 3871                          The default is NIL. */
 3872
 3873            2 CGCP_ BIT(72) UNAL %INIT(VECTOR(CGCP))%CHARTEXT('/**/'),
 3874                          /*K* CGCP = VARIABLE locates a VLP_CGCP area which
 3875                          will receive the current values of the comgroup
 3876                          control parameters.
 3877
 3878                          The default is NIL. */
 3879
 3880            2 SETSTA_ BIT(72) UNAL %INIT(VECTOR(SETSTA))%CHARTEXT('/**/'),
 3881                          /*K* SETSTA = VARIABLE  Locates a VLP_SETSTA area.
 3882                          This area will receive the current VLP_SETSTA
 3883                          established by M$CGCTL.
 3884
 3885                          The default is NIL. */
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           106  
 3886
 3887            2 STATS_ BIT(72) UNAL %INIT(VECTOR(STATS))%CHARTEXT('/**/'),
 3888                          /*K* STATS = VARIABLE locates a VLR_CGSTATS area.
 3889                          This area receives global comgroup statistics.
 3890                          (See VLR_CGSTATS.)
 3891
 3892                          The default is NIL. */
 3893
 3894            2 QLIST_ BIT(72) UNAL %INIT(VECTOR(QLIST))%CHARTEXT('/**/'),
 3895                          /*K* QLIST = VARIABLE locates a VLP_CGQL area.
 3896                          This area receives information about the comgroup
 3897                          queue nodes.  This list is parallel to the VLP_CGTYPL
 3898                          or VLP_CGSTAL list (depending upon which way the
 3899                          queue is keyed).
 3900
 3901                          The default is NIL. */
 3902
 3903            2 * BIT(72) %INIT(VECTOR(NIL)) %CHARTEXT('/**/'),
 3904                          /* Used to be FPRG_ in B03 */
 3905            2 * BIT(72) %INIT(VECTOR(NIL)) %CHARTEXT('/**/'),
 3906                          /* Used to be FPRQSTA_ in B03 */
 3907            2 HOLDSTA_ BIT(72) %INIT(VECTOR(HOLDSTA))%CHARTEXT('/**/'),
 3908                          /*K* HOLDSTA = VARIABLE locates a VLP_STATION
 3909                          area which is to receive the current value
 3910                          of the comgroup's HOLDSTA (see FPT_CGCTL).
 3911
 3912                          If the comgroup does not possess a defined
 3913                          HOLDSTA then the value returned will be
 3914                          the same as that generated by the default
 3915                          VLP_STATION (in particular the STATION
 3916                          part of the VLP_STATION will be the default
 3917                          value for STATION in VLP_STATION).
 3918
 3919                          The default is NIL. */
 3920
 3921            2 JRNLSTA_ BIT(72) %INIT(VECTOR(JRNLSTA))%CHARTEXT('/**/'),
 3922                          /*K* JRNLSTA = VARIABLE locates a VLP_STATION
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           107  
 3923                          area which is to receive the current value
 3924                          of the comgroup's JRNLSTA (see FPT_CGCTL).
 3925
 3926                          If the comgroup does not possess a defined
 3927                          JRNLSTA then the value returned will be
 3928                          the same as that generated by the default
 3929                          VLP_STATION (in particular the STATION
 3930                          part of the VLP_STATION will be the default
 3931                          value for STATION in VLP_STATION).
 3932
 3933                          The default is NIL. */
 3934
 3935            2 JRNLFID_ BIT(72) %INIT(VECTOR(JRNLFID))%CHARTEXT('/**/'),
 3936                          /*K* JRNLFID = VARIABLE locates a VLP_JRNLFID
 3937                          area which is to receive the comgroup's current
 3938                          journal FID.
 3939
 3940                          If the comgroup does not possess a journal
 3941                          FID, then the L field of the framed VLP_JRNLFID
 3942                          will be set to zero.
 3943
 3944                          The default is NIL. */
 3945
 3946            2 * (0:7) BIT(72) UNAL %INIT(VECTOR(NIL)*0)%CHARTEXT('/**/'),
 3947
 3948            2 V DALIGNED,
 3949
 3950              3 DCB# UBIN(18) UNAL %INIT(DCBNUM(DCB))%CHARTEXT('/**/'),
 3951                          /*K* DCB = DCBNAME specifies the DCB associated
 3952                          with the comgroup.                                      */
 3953
 3954
 3955              3 * BIT(12) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 3956
 3957              3 TYPFC# UBIN(3) UNAL %INIT(TYPFC)%CHARTEXT('/**/'),
 3958                          /*K* TYPFC = OPTION indicates the function of
 3959                          the message type list (if present).
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           108  
 3960
 3961                          The service will always return a list of known
 3962                          message types,  as well as parameters and statistics
 3963                          about each station.  Also, if the queue is keyed by
 3964                          message type, and QLIST is specified, then queue
 3965                          specific information about each type will be returned
 3966                          in the corresponding VLP_CGQL entries.  TYPFC selects
 3967                          how this is to be done.
 3968
 3969                          TYPFC = DUMP requests that all known message types are
 3970                          to be returned.  In this case, if the number of types
 3971                          exceeds the length of VLP_CGTYPL, then an error will
 3972                          be returned after filling all the available area.  In
 3973                          any case, VLP_CGTYPL.FOUND will be set to the number
 3974                          of types returned.
 3975
 3976                          TYPFC = SELECT indicates that VLP_CGTYPL contains
 3977                          a selected list of types, which are named in
 3978                          VLP_CGTYPL.LIST.NAME.  Only information about
 3979                          these types is to be returned.  If one of the
 3980                          selected types does not exist, an error is
 3981                          returned.
 3982
 3983
 3984                          TYPFC = WILD indicates that VLP_CGTYPL contains
 3985                          a single type, which is named VLP_CGTYPL.LIST.NAME(0).
 3986                          This NAME contains a trailing '?' character. Only
 3987                          information about types matching this wildcarded
 3988                          input type is to be returned. If the number of
 3989                          types exceeds the length of VLP_CGTYPL, then an
 3990                          error will be returned after filling all the
 3991                          available area.
 3992                          The default is SELECT.                                  */
 3993
 3994              3 STAFC# UBIN(3) UNAL %INIT(STAFC)%CHARTEXT('/**/'),
 3995                          /*K* STAFC = OPTION indicates the function of
 3996                          the station list (if present).
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           109  
 3997
 3998                          The service will always return a list of known
 3999                          stations, as well as parameters and statistics about
 4000                          each station.  Also, if the queue is keyed by station,
 4001                          and QLIST is specified, then queue specific information
 4002                          about each station will be returned in the corresponding
 4003                          VLP_CGCL entries.  STAFC selects how this is to be done.
 4004
 4005                          STAFC = DUMP requests that all known stations are
 4006                          to be returned.  In this case, if the number of
 4007                          stations exceeds the length of VLP_CGSTAL, then
 4008                          an error will be returned after filling all the
 4009                          available area.  In any case, VLP_CGSTAL.FOUND
 4010                          will be set to the number of stations returned.
 4011
 4012                          STAFC = SELECT indicates that VLP_CGSTAL contains
 4013                          a selected list of stations, which are named in
 4014                          VLP_CGSTAL.LIST.NAME.  Only information about
 4015                          these stations is to be returned.  If one of the
 4016                          selected stations does not exist, an error is
 4017                          returned.
 4018
 4019
 4020                          STAFC = WILD indicates that VLP_CGSTAL contains
 4021                          a single station, which is named VLP_CGSTAL.LIST.NAME(0).
 4022                          This NAME contains a trailing '?' character. Only
 4023                          information about stations matching this wildcarded
 4024                          input station is to be returned. If the number of
 4025                          stations exceeds the length of VLP_CGSTAL, then an
 4026                          error will be returned after filling all the
 4027                          available area.
 4028                          The default is SELECT.                                  */
 4029              3 * (0:7) UBIN WORD %INIT(0*0)%CHARTEXT('/**/');
 4030      %MEND;
 4031
 4032                          /*F* NAME:  VLR_CGSTATS
 4033
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           110  
 4034                          This macro generates an area which receives
 4035                          statistics global to the entire comgroup.               */
 4036
 4037      %MACRO VLR_CGSTATS (FPTN=VLR_CGSTATS,%LVL=1,%LAST=";",
 4038               STCLASS   = STATIC);
 4039
 4040       %LSET LISTDIR='0'B;
 4041       %LSET LISTEXP='1'B;
 4042       %LSET LISTCOM='0'B;
 4043       %LSET LISTSUB='1'B;
 4044       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 4045       %IF (SUBSTR(STR,0,6)='STATIC') OR
 4046       (SUBSTR(STR,0,8)='CONSTANT') OR
 4047       (SUBSTR(STR,0,3)='EXT');
 4048       %LSET INIT=CHARTEXT('INIT');
 4049       %ELSE;
 4050       %LSET INIT=CHARTEXT('/*');
 4051       %ENDIF;
 4052
 4053
 4054                                    /*!* VP Y                                     */
 4055       %IF LVL=1;
 4056
 4057      DCL 1 FPTN STCLASS DALIGNED,
 4058
 4059       %ELSE;
 4060
 4061              %LVL FPTN ALIGNED,
 4062
 4063       %ENDIF;
 4064                                    /*!* VP N                                     */
 4065
 4066            %(LVL+1) READS SBIN WORD %INIT(0)%CHARTEXT('/**/'),
 4067                          /*K* READS = VALUE-DEC(0-?)
 4068                          is the count of DCB READs
 4069                          since opening of the comgroup.                          */
 4070
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           111  
 4071            %(LVL+1) WRITES SBIN WORD %INIT(0)%CHARTEXT('/**/'),
 4072                          /*K* WRITES = VALUE-DEC(0-?)
 4073                          is the count of DCB
 4074                          WRITEs since opening of the comgroup.                   */
 4075
 4076            %(LVL+1) GETS SBIN WORD %INIT(0)%CHARTEXT('/**/'),
 4077                          /*K* GETS = VALUE-DEC(0-?)
 4078                          is the count of TERMINAL READs
 4079                          since opening of the comgroup.                          */
 4080
 4081            %(LVL+1) PUTS SBIN WORD %INIT(0)%CHARTEXT('/**/'),
 4082                          /*K* PUTS = VALUE-DEC(0-?)
 4083                          is the count of TERMINAL WRITEs
 4084                          since opening of the comgroup.                          */
 4085
 4086            %(LVL+1) CCMQ SBIN WORD %INIT(0)%CHARTEXT('/**/'),
 4087                          /*K* CCMQ = VALUE-DEC(0-?)
 4088                          is the current count
 4089                          of messages in the anonymous QUEUE.                     */
 4090
 4091            %(LVL+1) CCMS SBIN WORD %INIT(0)%CHARTEXT('/**/'),
 4092                          /*K* CCMS = VALUE-DEC(0-?)
 4093                          is the current count
 4094                          of messages waiting at specific stations.               */
 4095
 4096            %(LVL+1) NUMDCBS SBIN WORD %INIT(0)%CHARTEXT('/**/'),
 4097                          /*K* NUMDCBS = VALUE-DEC(0-?)
 4098                          is the number of
 4099                          DCBs open to the comgroup.                              */
 4100
 4101            %(LVL+1) NUMTERMS SBIN WORD %INIT(0)%CHARTEXT('/**/'),
 4102                          /*K* NUMTERMS = VALUE-DEC(0-?)
 4103                          is the number of
 4104                          connected terminals.                                    */
 4105
 4106            %(LVL+1) DISCRDS SBIN %INIT(0)%CHARTEXT('/**/'),
 4107                          /*K* DISCRDS = VALUE-DEC(0-?)
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           112  
 4108                          is the number of disk
 4109                          reads since open.                                       */
 4110
 4111            %(LVL+1) DISCWRS SBIN %INIT(0)%CHARTEXT('/**/'),
 4112                          /*K* DISCWRS = VALUE-DEC(0-?)
 4113                          is the number of disk
 4114                          writes since open.                                      */
 4115
 4116            %(LVL+1) PGSI UBIN %INIT(0)%CHARTEXT('/**/'),
 4117                          /*K* PGSI = VALUE-DEC(0-?)
 4118                          is the page storage
 4119                          integral which is calculated by multiplying (number
 4120                          of memory pages) times (time allocated in 10
 4121                          millisecond units), stored as a floating point number.  */
 4122
 4123            %(LVL+1) GARBCOLLS UBIN %INIT(0)%CHARTEXT('/**/'),
 4124                          /*K* GARBCOLLS = VALUE-DEC(0-?)
 4125                          is the number of times
 4126                          the memory "garbage collector" was forced to run.       */
 4127
 4128            %(LVL+1) NODFRS SBIN %INIT(0)%CHARTEXT('/**/'),
 4129                          /*K* NODFRS = VALUE-DEC(0-?)
 4130                          is the number
 4131                          of times a defer block was required, but there
 4132                          were none available. */
 4133
 4134            %(LVL+1) WRDSUSED  SBIN %INIT(0)%CHARTEXT('/**/'),
 4135                              /*K* WRDSUSED = VALUE-DEC(0-?)  is the number
 4136                               of words currently in use by the comgroup file.  */
 4137            %(LVL+1) WRDSFREE  SBIN %INIT(0)%CHARTEXT('/**/'),
 4138                              /*K* WRDSFREE = VALUE-DEC(0-?) is the number
 4139                               of words currently not in use by the comgroup file. */
 4140            %(LVL+1) * (0:2) UBIN %INIT(0*0)%CHARTEXT('/**/') LAST
 4141      %MEND;
 4142
 4143
 4144                          /*F* NAME:  VLP_STATION
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           113  
 4145
 4146                          The VLP_STATION macro generates an area used
 4147                          by reads and writes to comgroups to describe
 4148                          a message being read or written.  LASTSTA$ in the
 4149                          DCB also points to a VLP_STATION describing the last
 4150                          message read or written through that DCB.               */
 4151
 4152      %MACRO VLP_STATION (FPTN=VLP_STATION,
 4153              STATION    = ' ',
 4154              MSGTYP     = ' ',
 4155              LATCH      (YES='1'B,NO='0'B)='0'B,
 4156              EOFNONE    (YES='1'B,NO='0'B)='0'B,
 4157              EOFTIME    =0,
 4158              ALLABSENT  (YES='1'B,NO='0'B)='0'B,
 4159              ALLTRMS    (YES='1'B,NO='0'B)='0'B,
 4160              ALLDCBS    (YES='1'B,NO='0'B)='0'B,
 4161              DIRONLY    (YES='1'B,NO='0'B)='0'B,
 4162              ANYDCB     (YES='1'B,NO='0'B)='0'B,
 4163              WAS        (YES='1'B,NO='0'B)='1'B,
 4164              %LVL=1,
 4165              %LAST=";",
 4166              STCLASS    =STATIC);
 4167
 4168       %LSET LISTDIR='0'B;
 4169       %LSET LISTEXP='1'B;
 4170       %LSET LISTCOM='0'B;
 4171       %LSET LISTSUB='1'B;
 4172       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 4173       %IF (SUBSTR(STR,0,6)='STATIC') OR
 4174       (SUBSTR(STR,0,8)='CONSTANT') OR
 4175       (SUBSTR(STR,0,3)='EXT');
 4176       %LSET INIT=CHARTEXT('INIT');
 4177       %ELSE;
 4178       %LSET INIT=CHARTEXT('/*');
 4179       %ENDIF;
 4180
 4181                                    /*!* VP Y                                     */
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           114  
 4182       %IF LVL=1;
 4183      DCL 1 FPTN STCLASS ALIGNED,
 4184       %ELSE;
 4185              %LVL FPTN ALIGNED,
 4186       %ENDIF;
 4187                                    /*!* VP N                                     */
 4188
 4189            %(LVL+1) STATION# CHAR(8) %INIT(STATION)%CHARTEXT('/**/'),
 4190                          /*K* STATION = VALUE-CHAR(8) specifies the name
 4191                          of the station being addressed.  STATION may be wildcarded
 4192                          by using '?' as the last non-blank character.
 4193                          In this case, any station with the matching first
 4194                          'n' characters up to the '?' is valid.
 4195
 4196                          On M$READ,
 4197                          exactly '?' or blanks means any station is valid.
 4198
 4199                          On M$ACTIVATE and M$DEACTIVATE, wild-carding is
 4200                          permitted.  See STATION in FPT_ACTIVATE.
 4201
 4202                          On M$WRITE, STATION is ignored if ANYDCB is set,
 4203                          and otherwise specifies the station to which the
 4204                          message is to be delivered.  If STATION is wild-carded,
 4205                          then VLP_STATION.CTL.LATCH and CONTINUE (see
 4206                          FPT_WRITE) may not be set, else an error is returned.
 4207                          Note that when STATION is wild-carded, only
 4208                          stations currently extant in the comgroup may
 4209                          be addressed; new stations are never created
 4210                          by this type of write operation.  See also
 4211                          VLP_STATION.CTL.ALLTERMS and VLP_STATION.CTL.ALLDCBS.
 4212                          Specifying blanks for STATION means to use
 4213                          the DCB default.
 4214
 4215                          Unless STATION is blanks, its first character
 4216                          must be '?', or belong to the list given under
 4217                          NAME# in VLP_CGTYPL.
 4218
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           115  
 4219                          The default is blanks.                                  */
 4220
 4221            %(LVL+1) MSGTYP# CHAR(8) %INIT(MSGTYP)%CHARTEXT('/**/'),
 4222                          /*K* MSGTYP = VALUE-CHAR(8) specifies the message
 4223                          type being processed.  MSGTYP may be wild-carded as
 4224                          in STATION.
 4225
 4226                          On M$READ, MSGTYP specifies the
 4227                          legal message type(s) that may be read.  Specifying
 4228                          '?' only or blanks means that any type is legal.
 4229
 4230                          On M$WRITE, MSGTYP sets the message type of the message
 4231                          being written.  Blanks or a wild-card ('?') value
 4232                          causes the message type default from the DCB
 4233                          to be used.
 4234
 4235                          Unless MSGTYP is blanks, its first character
 4236                          must be '?' or belong to the list given under
 4237                          NAME# in VLP_CGTYPL.
 4238
 4239                          The default is blanks. */
 4240
 4241            %(LVL+1) CTL,
 4242
 4243              %(LVL+2) LOCK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 4244
 4245              %(LVL+2) LATCH# BIT(1) UNAL %INIT(LATCH)%CHARTEXT('/**/'),
 4246                          /*K* LATCH = {YES|NO} LATCH = YES specifies that the
 4247                          message read or written is to be latched.  In the case of
 4248                          a read this means that the message must be read fully
 4249                          (no errors) before another message can be read and
 4250                          output messages may be latched to it.  On writes,
 4251                          LATCH = YES specifies that the output message is to be
 4252                          latched to the input message last read by the DCB
 4253                          or, in the streamed case, the DCB to which it is streamed.
 4254                          (A limit on the number of latched writes can be
 4255                          specified by the MAXLATCH option of VLP_CGTYPL.)
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           116  
 4256                          A latched output message is not delivered until it
 4257                          is unlatched, typically when the associated input
 4258                          message is unlatched.  (See M$UNLATCH.)
 4259
 4260                          The VLP field name of this parameter is
 4261                          VLP_STATION.CTL.LATCH#.
 4262
 4263                          The default is NO.                                      */
 4264
 4265              %(LVL+2) EOFONE BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 4266
 4267              %(LVL+2) EOFNONE# BIT(1) UNAL %INIT(EOFNONE)%CHARTEXT('/**/'),
 4268                          /*K* EOFNONE = {YES|NO} EOFNONE = YES specifies that
 4269                          if a read cannot be satisfied from data currently
 4270                          in the comgroup (as opposed to messages received
 4271                          later from other stations) END-OF-FILE will be
 4272                          given on the M$READ.  NO specifies that the read
 4273                          will remain active until an appropriate message
 4274                          arrives in the comgroup.  EOFNONE has no effect
 4275                          on M$WRITE.
 4276
 4277                          The VLP field name of this parameter is
 4278                          VLP_STATION.CTL.EOFNONE#.
 4279
 4280                          The default is NO.                                      */
 4281
 4282              %(LVL+2) ALLTRMS# BIT(1) UNAL %INIT(ALLTRMS)%CHARTEXT('/**/'),
 4283                          /*K* ALLTRMS = {YES|NO} applies when STATION
 4284                          is wild-carded, and the operation is M$WRITE,
 4285                          M$ACTIVATE, or M$DEACTIVATE.  See ALLDCBS.
 4286
 4287                          The VLP field name of this parameter is
 4288                          VLP_STATION.CTL.ALLTRMS#.
 4289
 4290                          The default is NO.
 4291                                                                                  */
 4292              %(LVL+2) ALLDCBS# BIT(1) UNAL %INIT(ALLDCBS)%CHARTEXT('/**/'),
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           117  
 4293                          /*K* ALLDCBS = {YES|NO} applies when STATION
 4294                          is wild-carded, and the operation is M$WRITE,
 4295                          M$ACTIVATE, or M$DEACTIVATE.
 4296
 4297                          The parameters ALLTRMS, ALLDCBS, ALLABSENT,
 4298                          and WAS restrict (in various combinations)
 4299                          the set of stations to be affected by a
 4300                          wild-carded M$WRITE, M$ACTIVATE, or
 4301                          M$DEACTIVATE.  WAS is meaningful only
 4302                          on M$WRITE.  ALLABSENT is meaningful
 4303                          only on M$WRITE and M$DEACTIVATE.
 4304
 4305                          The possible set of stations consists of
 4306                          all stations known to the comgroup whose
 4307                          names qualify under the wild-card given
 4308                          in STATION.
 4309
 4310                          For M$ACTIVATE, the parameters interact
 4311                          as follows.  Absent stations are never
 4312                          affected.  If ALLDCBS and ALLTRMS are
 4313                          both NO, then at most one station is
 4314                          activated, it being the first station
 4315                          found to qualify under the wildcard.
 4316                          For example, if STATION is 'AB?', then
 4317                          of the stations ABC and ABZ, ABC will
 4318                          be activated, regardless of what types
 4319                          of stations (DCB or TERMINAL) the two
 4320                          happen to be.  If, on the other hand,
 4321                          ALLDCBS is YES, then all qualifying
 4322                          DCB stations will be activated, and
 4323                          similarly for all qualifying terminals
 4324                          if ALLTRMS is YES.  If both are YES
 4325                          then all qualifying connected stations
 4326                          are activated.
 4327
 4328                          For M$DEACTIVATE, a similar situation
 4329                          exists, except that absent stations
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           118  
 4330                          are processed as controlled by the
 4331                          ALLABSENT parameter.  Specifically,
 4332                          if ALLABSENT, ALLDCBS, and ALLTRMS
 4333                          are all NO, then at most one station
 4334                          is affected (selected as in M$ACTIVATE).
 4335                          Setting any or all of the three
 4336                          parameters to YES causes all qualifying
 4337                          stations of the corresponding type(s) to
 4338                          be processed.
 4339
 4340                          M$WRITE acts like M$DEACTIVATE with
 4341                          a single difference.  Absent or deactivated
 4342                          stations will be skipped if WAS is NO.  Note that
 4343                          this means that in the case where all
 4344                          of ALLABSENT, ALLDCBS, ALLTRMS, and
 4345                          WAS are NO, no message will be written
 4346                          if the first qualifying station is
 4347                          absent.
 4348
 4349                          The VLP field name of this parameter is
 4350                          VLP_STATION.CTL.ALLDCBS#.
 4351
 4352                          The default is NO.
 4353                                                                                  */
 4354              %(LVL+2) DIRONLY# BIT(1) UNAL %INIT(DIRONLY)%CHARTEXT('/**/'),
 4355                          /*K* DIRONLY = {YES|NO} DIRONLY = YES specifies that an
 4356                          M$READ will only read messages written to this
 4357                          station, not those in the anonymous queue.
 4358                          NO, the default, allows both directed
 4359                          and undirected messages to be read.
 4360                          Note that if the reader is only interested
 4361                          in directed messages, then setting DIRONLY
 4362                          to YES is more efficient (in terms of internal
 4363                          comgroup overhead), as well as safer (in the
 4364                          sense that no undirected messages will be
 4365                          received accidentally).
 4366
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           119  
 4367                          The VLP field name of this parameter is
 4368                          VLP_STATION.CTL.DIRONLY#.
 4369
 4370                          The default is NO.
 4371                                                                                  */
 4372              %(LVL+2) ANYDCB# BIT(1) UNAL %INIT(ANYDCB)%CHARTEXT('/**/'),
 4373                          /*K* ANYDCB = {YES|NO} ANYDCB = YES specifies that this
 4374                          M$WRITE is directed to any DCB station.  The message
 4375                          is treated as though it came in from a terminal
 4376                          (i.e. is placed in the anonymous queue),
 4377                          and STATION is ignored.  NO, the default, says to
 4378                          use STATION to direct the write.
 4379
 4380                          The VLP field name of this parameter is
 4381                          VLP_STATION.CTL.ANYDCB#.
 4382
 4383                                                                                  */
 4384              %(LVL+2) WAS# BIT(1) UNAL %INIT(WAS)%CHARTEXT('/**/'),
 4385                          /*K* WAS = {YES|NO} applies to M$WRITE.  WAS = YES
 4386                          requests that writing to absent or deactivated
 4387                          station be permitted if the comgroup permits it.
 4388
 4389                          WAS has no meaning for writes to the anonymous
 4390                          queue, that is, when ANYDCB is YES.
 4391                          For directed write operations, that is, when
 4392                          ANYDCB is NO, the meaning of WAS depends upon
 4393                          whether the destination is wildcarded or not.
 4394
 4395                          For single-destination write operations,
 4396                          WAS = NO requests that an error be returned if the
 4397                          addressed station is absent or deactivated.
 4398                          If the station is connected and activated then
 4399                          the write operation takes place irrespective of
 4400                          WAS.  If the station is known to the comgroup
 4401                          but not connected (or connected but not active)
 4402                          then the write operation is allowed if WAS is
 4403                          YES and the comgroup permits writing to absent
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           120  
 4404                          stations.  If the station is not known to the
 4405                          comgroup, then if the comgroup has a restricted
 4406                          station list and the specified station is not
 4407                          in the list, the write operation is disallowed.
 4408                          Otherwise, if WAS is YES and the comgroup permits
 4409                          writing to absent stations, then a new station
 4410                          is created under the specified name and the
 4411                          write operation takes place.
 4412
 4413                          For wildcarded write operations, WAS has a
 4414                          slightly different meaning.  See ALLDCBS.
 4415                          Note that writing
 4416                          to absent stations under a wildcard is always
 4417                          restricted to those stations currently known
 4418                          to the comgroup (whether connected or absent).
 4419
 4420                          The VLP field name of this parameter is
 4421                          VLP_STATION.CTL.WAS#.
 4422
 4423                          The default is YES.                                     */
 4424
 4425            %(LVL+2) ALLABSENT# BIT(1) UNAL %INIT(ALLABSENT)%CHARTEXT('/**/'),
 4426                          /*K* ALLABSENT = {YES|NO} applies when STATION
 4427                          is wild-carded, and the operation is M$WRITE
 4428                          or M$DEACTIVATE.  See ALLDCBS.
 4429
 4430                          The VLP field name of this parameter is
 4431                          VLP_STATION.CTL.ALLABSENT#.
 4432
 4433                          The default is NO.                                      */
 4434
 4435            %(LVL+1) * BIT(8) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 4436
 4437            %(LVL+1) EOFTIME# UBIN HALF HALIGNED %INIT(EOFTIME) %CHARTEXT('/**/'),
 4438                          /*K* EOFTIME = VALUE-DEC(1-?) is the number of seconds
 4439                          to leave this read pending before timing it out.
 4440
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           121  
 4441                          The VLP field name of this parameter is
 4442                          VLP_STATION.EOFTIME#.
 4443
 4444                          The default is 0 which means don't time out this read.   */
 4445
 4446            %(LVL+1) MSGID# UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 4447                          /*K* MSGID = VALUE-DEC(1-?) is the system-generated
 4448                          ID of a message.  It is ignored on M$READ, and
 4449                          M$WRITE.  The VLP_STATION pointed to by LASTSTA$
 4450                          in the DCB contains the parameters of the last
 4451                          message read or written through that DCB; in
 4452                          particular it contains the MSGID of that message.
 4453                          The VLP_STATION which is part of the no-wait I/O
 4454                          parameters passed to a user event procedure
 4455                          contains the parameters of the message whose
 4456                          read/write complete is being reported.
 4457
 4458                          With the exception of M$WRITE with LATCH
 4459                          specified, each message created in a comgroup
 4460                          is assigned a unique MSGID.  For a discussion
 4461                          of the latched write case, refer to MSGIDXT.
 4462
 4463                          Since MSGID is never supplied by a user
 4464                          in VLP_STATION, it has no default value
 4465                          and cannot be given one when this macro
 4466                          is invoked.  Generation of VLP_STATION
 4467                          in static form results in a MSGID of zero. */
 4468
 4469            %(LVL+1) MSGIDXT,
 4470                          /*K* MSGIDXT = VALUE-BIT(36)
 4471                          is the extension to MSGID.
 4472                          Unless the message was generated by
 4473                          M$WRITE with LATCH, MSGIDXT is zero.
 4474                          For messages generated by M$WRITE with
 4475                          LATCH, the MSGID of the latched output
 4476                          is the same as that of the current
 4477                          latched input message, and the MSGIDXT
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           122  
 4478                          is unique and nonzero.
 4479                          Thus, in general, a comgroup message
 4480                          is guaranteed to have a unique
 4481                          MSGID-MSGIDXT pair, but not necessarily
 4482                          a unique MSGID.
 4483
 4484                          A given comgroup can generate MSGID
 4485                          extensions in one of two forms,
 4486                          selected by the BIGMXT option in
 4487                          VLP_CGCP supplied to M$CGCTL.
 4488                          The difference between the two
 4489                          forms is that the first provides
 4490                          a unique 'ancestry trail' detailing
 4491                          the ancestry of the message, but imposes
 4492                          limitations on the number of messages
 4493                          which may be latched to a single input.
 4494                          The second form imposes no such limitation,
 4495                          but provides no ancestry information.
 4496
 4497                          The first form of extension is selected by
 4498                          BIGMXT = NO (the default).  In this form,
 4499                          the extension consists of six fields or
 4500                          levels.  When a message is written with
 4501                          LATCH, its MSGID is the same as that of
 4502                          the latched input, and its MSGIDXT is
 4503                          one level deeper.  For example, when
 4504                          the message with MSGID 7 is created
 4505                          without LATCH, its MSGIDXT is 0 (that
 4506                          is to say 0-0-0-0-0-0).  When this
 4507                          message is latched in, its first latched
 4508                          output is 7-1-0-0-0-0-0, its second,
 4509                          7-2-0-0-0-0-0, and so on.  When message
 4510                          7-1-0-0-0-0-0 is latched in, it creates
 4511                          latched outputs with message IDs of
 4512                          7-1-1-0-0-0-0, 7-1-2-0-0-0-0, 7-1-3-0-0-0-0,
 4513                          and so on.  The maximum number of latched
 4514                          outputs which may be created at any one
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           123  
 4515                          level is 62, that is to say the maximum
 4516                          value in any of the six fields is 62.
 4517                          Since there are only six fields, a given
 4518                          message may only spawn six generations of
 4519                          descendants.
 4520
 4521                          The fields of MSGIDXT are named
 4522                          MSGIDXT.MIDXT1, MSGIDXT.MIDXT2, ...., MSGIDXT.MIDXT6.
 4523
 4524                          This form of MSGIDXT has two uses.  First,
 4525                          one can tell by inspection of MSGIDXT what
 4526                          the ancestry of a message is.  Second,
 4527                          MSGIDXT may be supplied in 'wild-carded'
 4528                          form to M$FWCG, making it simple, for
 4529                          example, to find all the descendants of
 4530                          the message 7-2-3-0-0-0-0.
 4531
 4532
 4533                          The second form of MSGIDXT is selected
 4534                          by BIGMXT = YES.  In this form, each
 4535                          time a latched output message is
 4536                          created, a new message ID extension is allocated
 4537                          by the comgroup, and used for MSGIDXT.
 4538                          The comgroup maintains the next value to be used
 4539                          for these extensions, in the same way that it
 4540                          maintains the next message ID to use.
 4541
 4542                          Thus, for example, when message 7-0
 4543                          is latched in, if it creates three latched
 4544                          outputs, they might have message IDs of
 4545                          7-8, 7-13, and 7-64.
 4546                          When the message 7-13 is
 4547                          subsequently latched in, it might create
 4548                          an output 7-102; when 7-77 is latched
 4549                          in, it might create an output 7-497.
 4550                          Thus, all descendants of the original
 4551                          latched input bear its MSGID, but their
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           124  
 4552                          MSGIDXTs have no order or particular
 4553                          meaning, and are simply unique.
 4554                          In particular, there is no limit to the
 4555                          number of output messages which may be
 4556                          latched to a particular input, nor is there
 4557                          a limit to the number of generations of
 4558                          its descendants.   On the other hand,
 4559                          no ancestry information is contained in
 4560                          the MSGIDXT.
 4561
 4562                          Note that when this form of message ID
 4563                          extension is being used, it is more
 4564                          conveniently referred under its alias of MSGIDBXT
 4565                          (which is of type integer rather than
 4566                          bitstring).
 4567
 4568                          Since MSGIDXT is
 4569                          never supplied by a user in VLP_STATION,
 4570                          it has no default value and cannot be
 4571                          given one when this macro is invoked.
 4572                          Generation of VLP_STATION in static
 4573                          form results in a MSGIDXT of all zeroes. */
 4574
 4575              %(LVL+2) MIDXT1# UBIN(6) UNAL %INIT(0)%CHARTEXT('/**/'),
 4576                          /*K* MSGIDXT.MIDXT1 = VALUE-DEC(0-62).  (See MSGIDXT.)
 4577                          The VLP field name of this parameter is
 4578                          VLP_STATION.MSGIDXT.MIDXT1#.                            */
 4579
 4580              %(LVL+2) MIDXT2# UBIN(6) UNAL %INIT(0)%CHARTEXT('/**/'),
 4581                          /*K* MSGIDXT.MIDXT2 = VALUE-DEC(0-62).  (See MSGIDXT.)
 4582                          The VLP field name of this parameter is
 4583                          VLP_STATION.MSGIDXT.MIDXT2#.                            */
 4584
 4585              %(LVL+2) MIDXT3# UBIN(6) UNAL %INIT(0)%CHARTEXT('/**/'),
 4586                          /*K* MSGIDXT.MIDXT3 = VALUE-DEC(0-62). (See MSGIDXT.)
 4587                          The VLP field name of this parameter is
 4588                          VLP_STATION.MSGIDXT.MIDXT3#.                            */
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           125  
 4589
 4590              %(LVL+2) MIDXT4# UBIN(6) UNAL %INIT(0)%CHARTEXT('/**/'),
 4591                          /*K* MSGIDXT.MIDXT4 = VALUE-DEC(0-62). (See MSGIDXT.)
 4592                          The VLP field name of this parameter is
 4593                          VLP_STATION.MSGIDXT.MIDXT4#.
 4594                                                                                  */
 4595
 4596              %(LVL+2) MIDXT5# UBIN(6) UNAL %INIT(0)%CHARTEXT('/**/'),
 4597                          /*K* MSGIDXT.MIDXT5 = VALUE-DEC(0-62).  (See MSGIDXT.)
 4598                          The VLP field name of this parameter is
 4599                          VLP_STATION.MSGIDXT.MIDXT5#.
 4600                                                                                  */
 4601
 4602              %(LVL+2) MIDXT6# UBIN(6) UNAL %INIT(0)%CHARTEXT('/**/'),
 4603                          /*K* MSGIDXT.MIDXT6 = VALUE-DEC(0-62).  (See MSGIDXT.)
 4604                          The VLP field name of this parameter is
 4605                          VLP_STATION.MSGIDXT.MIDXT6#.                            */
 4606
 4607            %(LVL+1) MSGIDBXT REDEF MSGIDXT UBIN,
 4608                          /*K* MSGIDBXT = VALUE-DEC(0-?) is the alias
 4609                          of MSGIDXT, for use when message ID extensions
 4610                          take their second possible form.  See MSGIDXT. */
 4611
 4612            %(LVL+1) * UBIN %INIT(0)%CHARTEXT('/**/')LAST
 4613
 4614      %MEND;
 4615
 4616                          /*F* NAME:  VLP_SETSTA
 4617
 4618                          The VLP_SETSTA macro generates an area used to
 4619                          set the station defaults for M$OPENs to comgroups.
 4620                          SETSTA$ in comgroup DCBs points to a VLP_SETSTA
 4621                          that describes the current defaults.
 4622                                                                             */
 4623
 4624      %MACRO VLP_SETSTA (FPTN=VLP_SETSTA,
 4625              MYSTATION  = ' ',
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           126  
 4626              ISTATION   = ' ',
 4627              IMSGTYP    = ' ',
 4628              OSTATION   = ' ',
 4629              OMSGTYP    = ' ',
 4630              ILATCH     (YES='1'B,NO='0'B)='0'B,
 4631              OLATCH     (YES='1'B,NO='0'B)='0'B,
 4632              OLOCK      (YES='1'B,NO='0'B)='0'B,
 4633              ILOCK      (YES='1'B,NO='0'B)='0'B,
 4634              EOFONE     (YES='1'B,NO='0'B)='0'B,
 4635              EOFNONE    (YES='1'B,NO='0'B)='0'B,
 4636              EOFTIME    =0,
 4637              ALLABSENT  (YES='1'B,NO='0'B)='0'B,
 4638              ALLTRMS    (YES='1'B,NO='0'B)='0'B,
 4639              ALLDCBS    (YES='1'B,NO='0'B)='0'B,
 4640              DIRONLY    (YES='1'B,NO='0'B)='0'B,
 4641              ANYDCB     (YES='1'B,NO='0'B)='0'B,
 4642              WAS        (YES='1'B,NO='0'B)='0'B,
 4643              %LVL=1,
 4644              %LAST=";",
 4645              STCLASS    =STATIC);
 4646
 4647       %LSET LISTDIR='0'B;
 4648       %LSET LISTEXP='1'B;
 4649       %LSET LISTCOM='0'B;
 4650       %LSET LISTSUB='1'B;
 4651       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 4652       %IF (SUBSTR(STR,0,6)='STATIC') OR
 4653       (SUBSTR(STR,0,8)='CONSTANT') OR
 4654       (SUBSTR(STR,0,3)='EXT');
 4655       %LSET INIT=CHARTEXT('INIT');
 4656       %ELSE;
 4657       %LSET INIT=CHARTEXT('/*');
 4658       %ENDIF;
 4659
 4660                                    /*!* VP Y                                     */
 4661       %IF LVL=1;
 4662      DCL 1 FPTN STCLASS ALIGNED,
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           127  
 4663       %ELSE;
 4664              %LVL FPTN ALIGNED,
 4665       %ENDIF;
 4666
 4667            %(LVL+1) MYSTATION# CHAR(8) %INIT(MYSTATION)%CHARTEXT('/**/'),
 4668                          /*K* MYSTATION = VALUE-CHAR(8) specifies the
 4669                          station name this DCB will have on the comgroup.
 4670                          If blanks, a unique name is assigned by the system.
 4671                          This name will be different at each open, however.
 4672                          Thus MYSTATION should be specified if directed
 4673                          writes are to be performed to this DCB.  The
 4674                          default is blanks.                                      */
 4675
 4676            %(LVL+1) ISTA,
 4677                          /*K* ISTA is the area containing the options
 4678                          applicable to M$READ. */
 4679
 4680              %(LVL+2) ISTATION# CHAR(8) %INIT(ISTATION)%CHARTEXT('/**/'),
 4681                          /*K* ISTATION = VALUE-CHAR(8) specifies the
 4682                          default value for STATION on reads through this
 4683                          DCB.   (See STATION in VLP_STATION.)
 4684
 4685                          The VLP field name of this parameter is
 4686                          VLP_SETSTA.ISTA.ISTATION#.                              */
 4687
 4688              %(LVL+2) IMSGTYP# CHAR(8) %INIT(IMSGTYP)%CHARTEXT('/**/'),
 4689                          /*K* IMSGTYP = VALUE-CHAR(8) specifies the
 4690                          default value for MSGTYP on reads through this
 4691                          DCB. (See MSGTYP in VLP_STATION.)
 4692
 4693                          The VLP field name of this parameter is
 4694                          VLP_SETSTA.ISTA.IMSGTYP#.                               */
 4695
 4696              %(LVL+2) ILOCK# BIT(1) %INIT(ILOCK)%CHARTEXT('/**/'),
 4697                          /*K* ILOCK = {YES|NO} ILOCK = NO specifies that
 4698                          the values given here for IMSGTYP, ISTATION, DIRONLY,
 4699                          EOFNONE, and ILATCH are simply defaults to be
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           128  
 4700                          applied when an M$READ fails to specify their
 4701                          analogues.  ILOCK = YES specifies that these
 4702                          values are not only defaults but may not be
 4703                          overridden on M$READ.
 4704
 4705                          ILOCK = YES has the following specific
 4706                          effects.  If STATION is specified on M$READ then
 4707                          the STATION and MSGTYP therein must either be
 4708                          blank or match ISTATION and IMSGTYP respectively,
 4709                          at least up to the wild-card character (if any)
 4710                          in the latter.  Specifying blanks for ISTATION
 4711                          (respectively IMSGTYP) causes no restraint to
 4712                          be placed on STATION (respectively MSGTYP) on
 4713                          M$READ.  For the control options (EOFNONE, LATCH,
 4714                          and DIRONLY), the specifications given here
 4715                          are honored instead of those specified on M$READ
 4716                          and furthermore an M$READ is illegal if it
 4717                          attempts to specify YES for a control option
 4718                          specified as NO here.
 4719
 4720                          ILOCK = NO has the following specific effects.
 4721                          If an M$READ supplies no station parameter, then
 4722                          the values specified here are used.  If an
 4723                          M$READ specifies blanks for STATION (respectively
 4724                          MSGTYP) then the ISTATION (respectively IMSGTYP)
 4725                          specified here is used.  For the control
 4726                          options, the resultant specification is YES if
 4727                          and only if YES is specified either here or
 4728                          on M$READ.  In other words, if the control
 4729                          is specified as YES here, it is ignored on
 4730                          M$READ and treated as YES; if the control
 4731                          option is specified as NO here then the
 4732                          value specified on M$READ is honored.
 4733
 4734                          The VLP field name of this parameter is
 4735                          VLP_SETSTA.ISTA.ILOCK#.
 4736
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           129  
 4737                          The default is NO.
 4738                                                                             */
 4739              %(LVL+2) ILATCH# BIT(1) %INIT(ILATCH)%CHARTEXT('/**/'),
 4740                          /*K* ILATCH = {YES|NO} ILATCH = YES specifies the
 4741                          default value for LATCH on reads through this DCB.
 4742                          If ILATCH is set, LATCH on the M$READ is ignored.
 4743                          (See LATCH in VLP_STATION.)
 4744
 4745                          The VLP field name of this parameter is
 4746                          VLP_SETSTA.ISTA.ILATCH#.
 4747
 4748                          The default is NO. */
 4749
 4750
 4751              %(LVL+2) EOFONE# BIT(1) %INIT(EOFONE)%CHARTEXT('/**/'),
 4752                          /*K* EOFONE = {YES|NO} EOFONE = YES specifies that
 4753                          only one message can be read through this DCB.  After
 4754                          that message has been successfully read, all subsequent
 4755                          M$READs will return END-OF-FILE.  EOFONE overrides
 4756                          EOFNONE in this VLP_SETSTA or on the M$READ. It also
 4757                          overrides EOFTIME in this VLP_SETSTA or on the M$READ.
 4758
 4759                          The VLP field name of this parameter is
 4760                          VLP_SETSTA.ISTA.EOFONE#.
 4761
 4762                          The default is NO. */
 4763
 4764
 4765              %(LVL+2) EOFNONE# BIT(1) %INIT(EOFNONE)%CHARTEXT('/**/'),
 4766                          /*K* EOFNONE = {YES|NO} EOFNONE = YES specifies the
 4767                          default value for EOFNONE on reads through this DCB. If
 4768                          EOFNONE is set on the M$READ, EOFNONE is ignored here.
 4769                          EOFNONE overrides EOFTIME in this VLP_SETSTA or on
 4770                          the M$READ.
 4771                          (See EOFNONE in VLP_STATION.)
 4772
 4773                          The VLP field name of this parameter is
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           130  
 4774                          VLP_SETSTA.ISTA.EOFNONE#.
 4775
 4776                          The default is NO. */
 4777
 4778              %(LVL+2) * BIT(2) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 4779
 4780              %(LVL+2) DIRONLY# BIT(1) UNAL %INIT(DIRONLY)%CHARTEXT('/**/'),
 4781                          /*K* DIRONLY = {YES|NO} DIRONLY = YES specifies the
 4782                          default value for DIRONLY on reads through this DCB. If
 4783                          DIRONLY is set here, DIRONLY on the M$READ is ignored.
 4784                          (See DIRONLY in VLP_STATION.)
 4785
 4786                          The VLP field name of this parameter is
 4787                          VLP_SETSTA.ISTA.DIRONLY#.
 4788
 4789                          The default is NO. */
 4790
 4791              %(LVL+2) * BIT(2) %INIT('0'B)%CHARTEXT('/**/'),
 4792
 4793              %(LVL+2) * BIT(9) %INIT('0'B)%CHARTEXT('/**/'),
 4794              %(LVL+2) EOFTIME# UBIN HALF HALIGNED %INIT(EOFTIME) %CHARTEXT('/**/'),
 4795                          /*K* EOFTIME = VALUE-DEC(0-?) is the number of seconds
 4796                          to leave this read pending before timing it out with
 4797                          END-OF-FILE. If EOFTIME is set on the M$READ, EOFTIME
 4798                          is ignored here.
 4799                          (See EOFTIME in VLP_STATION.)
 4800
 4801                          The VLP field name of this parameter is
 4802                          VLP_SETSTA.ISTA.EOFTIME#.
 4803
 4804                          The default is 0. */
 4805
 4806            %(LVL+1) OSTA,
 4807                          /*K* OSTA is the area containing the options
 4808                          applicable to M$WRITE. */
 4809
 4810              %(LVL+2) OSTATION# CHAR(8) %INIT(OSTATION)%CHARTEXT('/**/'),
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           131  
 4811                          /*K* OSTATION = VALUE-CHAR(8) specifies the
 4812                          default value for STATION on writes through this
 4813                          DCB.  (See STATION in VLP_STATION.)
 4814
 4815                          The VLP field name of this parameter is
 4816                          VLP_SETSTA.OSTA.OSTATION#.
 4817
 4818                          The default is NO. */
 4819
 4820              %(LVL+2) OMSGTYP# CHAR(8) %INIT(OMSGTYP)%CHARTEXT('/**/'),
 4821                          /*K* OMSGTYP = VALUE-CHAR(8) specifies the
 4822                          default value for MSGTYP on writes through this
 4823                          DCB.  (See MSGTYP in VLP_STATION.)
 4824
 4825                          The VLP field name of this parameter is
 4826                          VLP_SETSTA.OSTA.OMSGTYP#.
 4827
 4828                          The default is NO. */
 4829
 4830              %(LVL+2) OLOCK# BIT(1) %INIT(OLOCK)%CHARTEXT('/**/'),
 4831                          /*K* OLOCK = {YES|NO} OLOCK = NO specifies that
 4832                          the values given here for OMSGTYP, OSTATION, WAS,
 4833                          ALLTRMS, ALLDCBS,
 4834                          ANYDCB, and OLATCH are simply defaults to be
 4835                          applied when an M$WRITE fails to specify their
 4836                          analogues.  OLOCK = YES specifies that these
 4837                          values are not only defaults but may not be
 4838                          overridden on M$WRITE.
 4839
 4840                          OLOCK = YES has the following specific
 4841                          effects.  If STATION is specified on M$WRITE then
 4842                          the STATION and MSGTYP therein must either be
 4843                          blank or match OSTATION and OMSGTYP respectively,
 4844                          at least up to the wild-card character (if any)
 4845                          in the latter.  Specifying blanks for OSTATION
 4846                          (respectively OMSGTYP) causes no restraint to
 4847                          be placed on STATION (respectively MSGTYP) on
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           132  
 4848                          M$WRITE.  For the control options (ANYDCB, LATCH,
 4849                          ALLTRMS, ALLDCBS,
 4850                          and WAS), the specifications given here
 4851                          are honored instead of those specified on M$WRITE
 4852                          and furthermore an M$WRITE is illegal if it
 4853                          attempts to specify YES for a control option
 4854                          specified as NO here.
 4855
 4856                          OLOCK = NO has the following specific effects.
 4857                          If an M$WRITE supplies no station parameter, then
 4858                          the values specified here are used.  If an
 4859                          M$WRITE specifies blanks for STATION (respectively
 4860                          MSGTYP) then the OSTATION (respectively OMSGTYP)
 4861                          specified here is used.  For the control
 4862                          options, the resultant specification is YES if
 4863                          and only if YES is specified either here or
 4864                          on M$WRITE.  In other words, if the control
 4865                          is specified as YES here, it is ignored on
 4866                          M$WRITE and treated as YES; if the control
 4867                          option is specified as NO here then the
 4868                          value specified on M$WRITE is honored.
 4869
 4870                          The VLP field name of this parameter is
 4871                          VLP_SETSTA.OSTA.OLOCK#.
 4872
 4873                          The default is NO.                                           */
 4874
 4875              %(LVL+2) OLATCH# BIT(1) %INIT(OLATCH)%CHARTEXT('/**/'),
 4876                          /*K* OLATCH = {YES|NO} OLATCH = YES specifies the
 4877                          default value for LATCH on writes through this DCB. If
 4878                          OLATCH is set, LATCH on the M$WRITE is ignored.
 4879                          (See LATCH in VLP_STATION.)
 4880
 4881                          The VLP field name of this parameter is
 4882                          VLP_SETSTA.OSTA.OLATCH#.
 4883
 4884                          The default is NO. */
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           133  
 4885
 4886              %(LVL+2) * BIT(2) %INIT('0'B)%CHARTEXT('/**/'),
 4887
 4888              %(LVL+2) ALLTRMS# BIT(1) %INIT(ALLTRMS)%CHARTEXT('/**/'),
 4889                          /*K* ALLTRMS = {YES|NO} ALLTRMS = YES specifies the
 4890                          default value for ALLTRMS on M$WRITEs only
 4891                          through this DCB (and has no effect on M$ACTIVATE
 4892                          and M$DEACTIVATE).
 4893
 4894                          If ALLTRMS
 4895                          is set here, ALLTRMS on the M$WRITE is ignored.
 4896                          (See ALLTRMS in VLP_STATION.)
 4897
 4898                          The VLP field name of this parameter is
 4899                          VLP_SETSTA.OSTA.ALLTRMS#.
 4900
 4901                          The default is NO. */
 4902
 4903              %(LVL+2) ALLDCBS# BIT(1) %INIT(ALLDCBS)%CHARTEXT('/**/'),
 4904                          /*K* ALLDCBS = {YES|NO} ALLDCBS = YES specifies the
 4905                          default value for ALLDCBS on M$WRITEs only
 4906                          through this DCB (and has no effect on M$ACTIVATE
 4907                          and M$DEACTIVATE).
 4908
 4909                          If ALLDCBS
 4910                          is set here, ALLDCBS on the M$WRITE is ignored.
 4911                          (See ALLDCBS in VLP_STATION.)
 4912
 4913                          The VLP field name of this parameter is
 4914                          VLP_SETSTA.OSTA.ALLDCBS#.
 4915
 4916                          The default is NO. */
 4917
 4918              %(LVL+2) * BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
 4919
 4920              %(LVL+2) ANYDCB# BIT(1) %INIT(ANYDCB)%CHARTEXT('/**/'),
 4921                          /*K* ANYDCB = {YES|NO} ANYDCB = YES specifies the
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           134  
 4922                          default value for ANYDCB on writes through this DCB. If
 4923                          ANYDCB is set here, ANYDCB on the M$WRITE is ignored.
 4924                          (See ANYDCB in VLP_STATION.)
 4925
 4926                          The VLP field name of this parameter is
 4927                          VLP_SETSTA.OSTA.ANYDCB#.
 4928
 4929                          The default is NO. */
 4930
 4931              %(LVL+2) WAS# BIT(1) UNAL %INIT(WAS)%CHARTEXT('/**/'),
 4932                          /*K* WAS = {YES|NO} WAS = YES specified the default
 4933                          value for WAS on writes through this DCB.  If
 4934                          WAS is set here, WAS on the M$WRITE is ignored.
 4935                          (See WAS in VLP_STATION).
 4936
 4937                          The VLP field name of this parameter is
 4938                          VLP_SETSTA.OSTA.WAS#.
 4939
 4940                          The default is NO. */
 4941
 4942              %(LVL+2) ALLABSENT# BIT(1) %INIT(ALLABSENT)%CHARTEXT('/**/'),
 4943                          /*K* ALLABSENT = {YES|NO} ALLABSENT = YES specifies the
 4944                          default value for ALLABSENT on M$WRITEs only
 4945                          through this DCB (and has no effect on
 4946                          M$DEACTIVATE).
 4947
 4948                          If ALLABSENT
 4949                          is set here, ALLABSENT on the M$WRITE is ignored.
 4950                          (See ALLABSENT in VLP_STATION.)
 4951
 4952                          The VLP field name of this parameter is
 4953                          VLP_SETSTA.OSTA.ALLABSENT#.
 4954
 4955                          The default is NO. */
 4956
 4957              %(LVL+2) * BIT(26) %INIT('0'B)%CHARTEXT('/**/')LAST
 4958
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           135  
 4959      %MEND;
 4960
 4961
 4962                                    /****************************************
 4963                                     ***                                  ***
 4964                                     ***            M$ACTIVATE            ***
 4965                                     ***                                  ***
 4966                                     ****************************************/
 4967
 4968
 4969                          /*F* NAME: M$ACTIVATE - Activate a Comgroup Station.
 4970
 4971                          The M$ACTIVATE service is used by the administrative user
 4972                          (AU) of a comgroup to allow other users and terminals access
 4973                          to his comgroup.  He can also set and/or change various
 4974                          parameters controlling their access to the comgroup.
 4975                          FPRG terminal stations may be created using the
 4976                          MAKEFPRG option.
 4977
 4978                          Automatic activation of a station by the comgroup,
 4979                          for example at AU connect (see AUCONDCB in VLP_CGCP),
 4980                          acts like M$ACTIVATE with the following options:
 4981                          .FIF
 4982
 4983                          ABTREAD    = NONE
 4984                          ABTET      = NO
 4985                          FLUSH      = NO
 4986
 4987                          .FIN
 4988                          except that the station's DVBYTE is not changed.
 4989
 4990                          The M$ACTIVATE procedure call is of the form:
 4991
 4992                          CALL M$ACTIVATE(FPT_ACTIVATE) [ALTRET (label)];
 4993
 4994                          The parameters for this service are explained in
 4995                          the discussion of M$DEACTIVATE.                               */
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           136  
 4996
 4997                                    /****************************************
 4998                                     ***                                  ***
 4999                                     ***          M$DEACTIVATE            ***
 5000                                     ***                                  ***
 5001                                     ****************************************/
 5002
 5003                          /*F* NAME: M$DEACTIVATE - Deactivate a Comgroup Station.
 5004
 5005                          The M$DEACTIVATE service is used by the administrative user
 5006                          (AU) of a comgroup to disconnect its attached
 5007                          terminals or FPRG terminals or to
 5008                          remove access from other users or terminals.  In the case of
 5009                          the latter, various parameters controlling their access to
 5010                          the comgroup when they are M$ACTIVATEd again may be set
 5011                          or changed.
 5012
 5013                          Automatic deactivation of a station by the comgroup,
 5014                          for example at AU connect (see AUCONDCB in VLP_CGCP),
 5015                          acts like M$DEACTIVATE with the following options:
 5016                          .FIF
 5017
 5018                          FLUSH      = NO
 5019                          DISCONNECT = NO
 5020                          DSCGO      = NO
 5021
 5022                          .FIN
 5023
 5024                          The form of the call for this service is:
 5025
 5026                          CALL M$DEACTIVATE (FPT_ACTIVATE)   [ALTRET (label)];
 5027
 5028                          The parameters are as follows:                               */
 5029
 5030
 5031       %MACRO FPT_ACTIVATE (FPTN=FPT_ACTIVATE,
 5032               DCB       = NIL,
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           137  
 5033               STATION   = NIL,
 5034               FPRGSTA   = NIL,
 5035               REREAD    (YES='1'B,NO='0'B)='0'B,
 5036               BIN       (YES='1'B,NO='0'B)='0'B,
 5037               TRANS     (YES='1'B,NO='0'B)='0'B,
 5038               ABTREAD   = '0'B,
 5039               DISCONNECT(YES='1'B,NO='0'B)='0'B,
 5040               FLUSH     (YES='1'B,NO='0'B)='0'B,
 5041               ABTET     (YES='1'B,NO='0'B)='0'B,
 5042               DSCGO     (YES='1'B,NO='0'B)='0'B,
 5043               MAKEFPRG  (YES='1'B,NO='0'B)='0'B,
 5044               CONNECTRES (YES='1'B,NO='0'B)='0'B,
 5045               USEAUACCT  (YES='1'B,NO='0'B)='0'B,
 5046             MINRD       = 0,
 5047             MAXRD       = 0,
 5048               RES = ' ',
 5049               ATTR = '0'B,
 5050               STCLASS   = STATIC);
 5051
 5052       %LSET LISTDIR='0'B;
 5053       %LSET LISTEXP='1'B;
 5054       %LSET LISTCOM='0'B;
 5055       %LSET LISTSUB='1'B;
 5056       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 5057       %IF (SUBSTR(STR,0,6)='STATIC') OR
 5058       (SUBSTR(STR,0,8)='CONSTANT') OR
 5059       (SUBSTR(STR,0,3)='EXT');
 5060       %LSET INIT=CHARTEXT('INIT');
 5061       %ELSE;
 5062       %LSET INIT=CHARTEXT('/*');
 5063       %ENDIF;
 5064
 5065
 5066      DCL 1 FPTN STCLASS,
 5067            2 V_ BIT(72) %INIT(VECTOR(FPTN.V))%CHARTEXT('/**/'),
 5068
 5069            2 STATION_ BIT(72) %INIT(VECTOR(STATION))%CHARTEXT('/**/'),
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           138  
 5070                          /*K* STATION = VARIABLE locates a VLP_STATION area
 5071                          which specifies the target station(s), and must
 5072                          be supplied.
 5073
 5074                          The station name may be wild-carded in the
 5075                          way described under STATION in VLP_STATION.
 5076                          The action(s) specified are performed on all
 5077                          stations whose names qualify under the
 5078                          wild-card, subject to the restrictions specified
 5079                          by ALLABSENT, ALLDCBS, and ALLTERMS.
 5080
 5081                          M$ACTIVATE ignores any station that is not
 5082                          connected.  M$DEACTIVATE may (subject to
 5083                          the above-mentioned control parameters) process
 5084                          absent stations, in which case no deactivation
 5085                          is performed but options such as FLUSH will
 5086                          take effect.
 5087
 5088                          If no appropriate station(s) is(are) found,
 5089                          then an error is returned.
 5090
 5091                          The default is NIL. */
 5092
 5093            2 FPRGSTA_ BIT(72) %INIT(VECTOR(FPRGSTA))%CHARTEXT('/**/'),
 5094                          /*K* FPRGSTA = VARIABLE locates a VLP_STATION
 5095                          area which supplies the station name to be given
 5096                          a pure FPRG terminal station. FPRGSTA applies
 5097                          only to MAKEFPRG=YES M$ACTIVATEs. See the
 5098                          MAKEFPRG option for additional information.
 5099
 5100                          The default is NIL. */
 5101
 5102            2 * BIT(72) %INIT(VECTOR(NIL))%CHARTEXT('/**/'),
 5103
 5104            2 V DALIGNED,
 5105
 5106              3 DCB# UBIN(18) UNAL %INIT(DCBNUM(DCB))%CHARTEXT('/**/'),
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           139  
 5107                          /*K* DCB = DCBNAME specifies the DCB associated
 5108                          with the comgroup.                                      */
 5109
 5110              3 * UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
 5111
 5112              3 DVBYTE,
 5113                          /*K* DVBYTE is a collection of bits controlling
 5114                          the manner in which TERMINALs are read.  That is,
 5115                          they supply parameters controlling the way in
 5116                          which TERMINALs supply data to the comgroup.  Each
 5117                          bit is specified separately.  DVBYTE is meaningful
 5118                          only for M$ACTIVATE directed at a TERMINAL.
 5119                          Note that when DVBYTE is meaningful, it
 5120                          always take effect, in other words it is
 5121                          not possible to M$ACTIVATE a TERMINAL station
 5122                          without setting its DVBYTE. */
 5123
 5124                4 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 5125
 5126                4 BP# BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 5127
 5128                4 REREAD# BIT(1) UNAL %INIT(REREAD)%CHARTEXT('/**/'),
 5129                          /*K* REREAD = {YES|NO} REREAD = YES
 5130                          specifies that the previous input line is to be
 5131                          echoed and set to be the current input line.
 5132                          The FPT field name for this parameter is
 5133                          FPT_ACTIVATE.V.DVBYTE.REREAD#.  The Default is NO.      */
 5134
 5135                4 VFC# REDEF REREAD# BIT(1),
 5136
 5137                4 BIN# BIT(1) UNAL %INIT(BIN)%CHARTEXT('/**/'),
 5138                          /*K* BIN = {YES|NO} BIN = YES specifies that the data
 5139                          is to be read as a string of bits rather than one
 5140                          character per 9-bit byte.  The FPT field name for
 5141                          this parameter is FPT_ACTIVATE.V.DVBYTE.BIN#.  The
 5142                          Default is NO.                                          */
 5143
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           140  
 5144                4 TRANS# BIT(1) UNAL %INIT(TRANS)%CHARTEXT('/**/'),
 5145                          /*K* TRANS = {YES|NO} TRANS = YES specifies transparency,
 5146                          (i.e., that data is to be read without translation).
 5147                          This option is useful primarily for  devices which
 5148                          normally perform translation (for instance,
 5149                          asynchronous terminals). The FPT field name for this
 5150                          parameter is FPT_ACTIVATE.V.DVBYTE.TRANS#.  The default
 5151                          is NO.                                                  */
 5152
 5153                4 * BIT(3) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 5154
 5155                4 CONT# BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 5156
 5157              3 ABTREAD# BIT(36) UNAL %INIT(ABTREAD)%CHARTEXT('/**/'),
 5158                          /*K* ABTREAD = VALUE-BIT(36) applies only
 5159                          to M$ACTIVATE when directed at a DCB.  The default
 5160                          is none.  If ABTREAD is set, then the target DCB's
 5161                          next or pending read is aborted with the TYC value
 5162                          supplied as the ABTREAD value.
 5163
 5164                          Note that if ABTREAD is not set, then M$ACTIVATE
 5165                          will clear any previous ABTREAD value which has
 5166                          not yet been honored, that is to say if a station
 5167                          is M$ACTIVATEd with ABTREAD, and has no pending
 5168                          read, then if it is M$ACTIVATEd with ABTREAD not
 5169                          set before it issues its next read, the first
 5170                          ABTREAD has no effect.
 5171                          Furthermore, M$DEACTIVATE, or automatic
 5172                          activation or deactivation by the comgroup,
 5173                          will reset the station's ABTREAD.
 5174
 5175                          See also ABTET.  The default is none. */
 5176
 5177              3 DISCONNECT# BIT(1) UNAL %INIT(DISCONNECT)%CHARTEXT('/**/'),
 5178                          /*K* DISCONNECT = {YES|NO} specifies whether (YES)
 5179                          or not (NO) M$DEACTIVATE is to disconnect the
 5180                          target station.  DISCONNECT applies only if the
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           141  
 5181                          target station is a TERMINAL. DISCONNECT is
 5182                          forced to YES for M$DEACTIVATEs of pure FPRG
 5183                          terminal stations. Deactivation of transformed
 5184                          FPRG terminal stations with DISCONNECT=NO
 5185                          causes the station to revert to a deactivated
 5186                          normal terminal station.
 5187
 5188                          The default is NO. */
 5189
 5190              3 FLUSH# BIT(1) UNAL %INIT(FLUSH)%CHARTEXT('/**/'),
 5191                          /*K* FLUSH = {YES|NO} specifies whether or not
 5192                          to flush the list of messages waiting to go to the
 5193                          target station.  Applies to M$ACTIVATE and
 5194                          M$DEACTIVATE.  Note that if the target station
 5195                          is not connected, then M$ACTIVATE will return
 5196                          an error, but M$DEACTIVATE will not.  Thus,
 5197                          messages waiting for a non-connected station may
 5198                          be FLUSHed by M$DEACTIVATE.  The default is NO.         */
 5199
 5200              3 ABTET# BIT(1) UNAL %INIT(ABTET)%CHARTEXT('/**/'),
 5201                          /*K* ABTET = {YES|NO} specifies whether (YES)
 5202                          or not (NO) the TYC value specified in ABTREAD
 5203                          is to be permanent.  If YES, then the target
 5204                          station will receive that error on every read
 5205                          until it is re-activated.  If NO, then the error
 5206                          will be passed only on the next or pending read;
 5207                          subsequent reads will receive no error.
 5208
 5209                          ABTET applies only when ABTREAD is set.  Note
 5210                          that M$DEACTIVATE, or automatic activation or
 5211                          deactivation by the comgroup, will clear the
 5212                          ABTET set by M$ACTIVATE.
 5213
 5214                          The default is NO.                                      */
 5215
 5216              3 DSCGO# BIT(1) UNAL %INIT(DSCGO)%CHARTEXT('/**/'),
 5217                          /*K* DSCGO = {YES|NO} indicates whether (YES)
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           142  
 5218                          or not (NO) disconnect permission is being
 5219                          given.  DSCGO is only meaningful for M$DEACTIVATE
 5220                          directed at a TERMINAL station, and then only
 5221                          when the station has requested permission to
 5222                          disconnect (see DSCREQ in VLP_CGCP).  DSCGO
 5223                          is only honored if DISCONNECT is NO.
 5224
 5225                          The default is NO.                                      */
 5226
 5227              3 MAKEFPRG# BIT(1) %INIT(MAKEFPRG)%CHARTEXT('/**/'),
 5228                          /*K* MAKEFPRG = {YES|NO} applies only to
 5229                          M$ACTIVATE when directed at  non-FPRG
 5230                          terminal stations. If MAKEFPRG is set, a single
 5231                          non-FPRG terminal station is specified and
 5232                          FPRGSTA specifies a non-blank station name,
 5233                          then a new pure FPRG terminal station is created
 5234                          obtaining its station name from FPRGSTA. If,
 5235                          on the other hand, MAKEFPRG is set but the rest
 5236                          of the above is not true, then every specified
 5237                          non-FPRG terminal station will be transformed
 5238                          into a transformed FPRG terminal station.
 5239
 5240                          The default is NO. */
 5241              3 CONNECTRES# BIT(1) %INIT(CONNECTRES)%CHARTEXT('/**/'),
 5242                          /*K* CONNECTRES = {YES|NO} applies only to
 5243                          M$ACTIVATE.  If CONNECTRES is set, the resource
 5244                          specified by RES and ATTR in this FPT will be
 5245                          connected to the comgroup with the station name
 5246                          specified in the VLP_STATION. Default is NO.
 5247                                     */
 5248              3 USEAUACCT# BIT(1) %INIT(USEAUACCT)%CHARTEXT('/**/'),
 5249                          /*K* USEAUACCT = {YES|NO} applies only to
 5250                          the M$ACTIVATE of FPRGs.  If USEAUACCT is set
 5251                          the FPRG will run in the AU's account on the FEP.
 5252                          If the Activate comes from a DCB with TCTL, the
 5253                          FPRG will run in that DCB's account.
 5254
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           143  
 5255                          The default is NO.*/
 5256              3 * BIT(29) %INIT('0'B)%CHARTEXT('/**/'),
 5257              3 MINRD# UBIN HALF HALIGNED %INIT(MINRD)%CHARTEXT('/**/'),
 5258                          /*K* MINRD = VALUE-DEC(2-511)  specifies the minimum
 5259                          number of outstanding reads a FEP can have to this
 5260                          station.  This parameter overrides the MINRD
 5261                          specified for the comgroup (in VLP_CGCP).  The
 5262                          only way to reset MINRD is to deactivate the
 5263                          station and then reactivate it with the changed
 5264                          value.  Setting MINRD higher than MAXRD may hamper
 5265                          the FEP's efficiency.  The default is the
 5266                          comgroup's MINRD value.  */
 5267
 5268              3 MAXRD# UBIN HALF HALIGNED %INIT(MAXRD)%CHARTEXT('/**/'),
 5269                          /*K* MAXRD = VALUE-DEC(3-511)  specifies the maximum
 5270                          number of outstanding reads a FEP can have to this
 5271                          station.  This parameter overrides the MAXRD
 5272                          specified for the comgroup (in VLP_CGCP).  The
 5273                          only way to reset MAXRD is to deactivate the
 5274                          station and then reactivate it with the changed
 5275                          value.  The default is the comgroup's MAXRD value.
 5276                          */
 5277
 5278              3 RES# CHAR(4) %INIT(RES)%CHARTEXT('/**/'),
 5279                          /*K* RES = VALUE-CHAR(4) specifies the four
 5280                          character resource name that is to be connected to
 5281                          the comgroup.  The resource had to be acquired
 5282                          previously. The default is blanks.
 5283        */
 5284              3 ATTR# BIT(18) %INIT(ATTR)%CHARTEXT('/**/'),
 5285                          /*K* ATTR = VALUE-BIT(18) is a mask of required attributes
 5286                          for the resource that is to be connected to the
 5287                          comgroup.  The default is '0'B.
 5288                           */
 5289              3 * BIT(18) %INIT('0'B)%CHARTEXT('/**/'),
 5290              3 * BIT(72) %INIT('0'B)%CHARTEXT('/**/');
 5291
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           144  
 5292       %MEND;
 5293
 5294
 5295                                    /****************************************
 5296                                     ***                                  ***
 5297                                     ***           M$UNLATCH              ***
 5298                                     ***                                  ***
 5299                                     ****************************************/
 5300
 5301
 5302                          /*F*  NAME:  M$UNLATCH - Unlatch Comgroup Messages.
 5303
 5304                          The M$UNLATCH service is used to control the status
 5305                          of latched messages read or written with LATCH=YES
 5306                          through a comgroup DCB.  The last output message
 5307                          may be deleted or sent to its destination.  An input
 5308                          message may be deleted, put back into the queue to
 5309                          be re-read, or put back in the queue in 'hold' status
 5310                          such that it is inaccessible until action by the
 5311                          administrative user.
 5312
 5313                          The form of the call for this service is:
 5314
 5315                          CALL M$UNLATCH (FPT_UNLATCH) [ALTRET (label)];
 5316
 5317                          The parameters are as follows:                          */
 5318
 5319      %MACRO FPT_UNLATCH (FPTN=FPT_UNLATCH,
 5320              DCB=NIL,
 5321              INPUT(HOLD=1,DELETE=2,RERUN=3)=0,
 5322              OUTPUT(SEND=1,DELETE=2)=2,
 5323              TELLAU(YES='1'B,NO='0'B)='01'B,
 5324              TELLOS(YES='1'B,NO='0'B)='01'B,
 5325              JOURNALED(YES='1'B,NO='0'B)='0'B,
 5326              STCLASS=STATIC);
 5327
 5328       %LSET LISTDIR='0'B;
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           145  
 5329       %LSET LISTEXP='1'B;
 5330       %LSET LISTCOM='0'B;
 5331       %LSET LISTSUB='1'B;
 5332       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 5333       %IF (SUBSTR(STR,0,6)='STATIC') OR
 5334       (SUBSTR(STR,0,8)='CONSTANT') OR
 5335       (SUBSTR(STR,0,3)='EXT');
 5336       %LSET INIT=CHARTEXT('INIT');
 5337       %ELSE;
 5338       %LSET INIT=CHARTEXT('/*');
 5339       %ENDIF;
 5340
 5341
 5342      DCL 1 FPTN STCLASS,
 5343            2 V_ BIT(72) %INIT(VECTOR(FPTN.V))%CHARTEXT('/**/'),
 5344
 5345            2 * (0:1) BIT(72) %INIT(VECTOR(NIL)*0)%CHARTEXT('/**/'),
 5346
 5347            2 V DALIGNED,
 5348
 5349              3 DCB# UBIN(18) UNAL %INIT(DCBNUM(DCB))%CHARTEXT('/**/'),
 5350                          /*K* DCB = DCBNAME specifies the DCB associated with
 5351                          the comgroup.                                           */
 5352
 5353              3 INPUT# UBIN(9) UNAL %INIT(INPUT)%CHARTEXT('/**/'),
 5354                          /*K* INPUT = OPTION specifies the action to be
 5355                          taken in respect to an input latched to this DCB.
 5356                          The options are:
 5357
 5358                          o  DELETE - Processing complete, delete it.
 5359
 5360                          o  RERUN  - Put it back in the queue to be re-read
 5361                          and re-processed.
 5362
 5363                          o  HOLD   - Some error occurred; put it back in the
 5364                          queue inactive to be examined later by
 5365                          the administrative user (AU).
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           146  
 5366
 5367                          If INPUT is not specified, the OUTPUT option operates
 5368                          only on the last message written through this DCB.
 5369                                                                                  */
 5370              3 OUTPUT# UBIN(9) UNAL %INIT(OUTPUT)%CHARTEXT('/**/'),
 5371                          /*K* OUTPUT = OPTION specifies the action to be
 5372                          taken with respect to output(s) latched to this DCB.
 5373                          If the INPUT option is specified, the OUTPUT
 5374                          option refers to all outputs latched to the
 5375                          input.  Otherwise it refers to the last message
 5376                          written through this DCB.  The options are:
 5377
 5378                          o  DELETE - An error occurred, delete the output(s).
 5379
 5380                          o  SEND   - Everything ok, send the output(s) to destination.
 5381
 5382                          The default is DELETE.
 5383                                                               */
 5384              3 TELLAU# BIT(2) UNAL %INIT(TELLAU)%CHARTEXT('/**/'),
 5385                          /*K* TELLAU = {YES|NO} specifies whether or not
 5386                          to send a special unlatch message to the administrative
 5387                          user of the comgroup.  If this option is specified
 5388                          then it is always honored.  If not specified then
 5389                          the default depends on the type of unlatch being
 5390                          performed.  For HOLD the default is YES otherwise
 5391                          the default is NO.
 5392
 5393                          NOTE:  The administrative user (AU) can choose to not
 5394                          receive any such messages by specifying UNLAMSG = NO
 5395                          in VLP_CGCP on M$CGCTL.                                 */
 5396
 5397              3 TELLOS# BIT(2) UNAL %INIT(TELLOS)%CHARTEXT('/**/'),
 5398                          /*K* TELLOS = {YES|NO} specifies whether or not
 5399                          to send a response message to the station which
 5400                          originated the message being unlatched.  This
 5401                          message will have message type '*RESPX' and
 5402                          no content. For HOLD the default is YES otherwise
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           147  
 5403                          the default is NO.                                      */
 5404              3 JOURNALED# BIT(1) UNAL %INIT(JOURNALED)%CHARTEXT('/**/'),
 5405                          /*K* JOURNALED = {YES|NO} indicates, if RERUN
 5406                          is specified, whether (YES) or not (NO), the
 5407                          input message is to be released for processing
 5408                          because it has been journaled.  If JOURNALED is
 5409                          YES then the message will go to its original
 5410                          intended destination.  If NO, the message will
 5411                          be requeued for the journal station.
 5412
 5413                          JOURNALED is only meaningful when
 5414                          M$UNLATCH is being issued by the comgroup journal
 5415                          station.
 5416
 5417                          The default is NO. */
 5418
 5419              3 * BIT(31) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 5420
 5421              3 * UBIN WORD %INIT(0)%CHARTEXT('/**/');
 5422
 5423      %MEND;
 5424
 5425
 5426                                    /****************************************
 5427                                     ***                                  ***
 5428                                     ***           M$FWCG                 ***
 5429                                     ***                                  ***
 5430                                     ****************************************/
 5431
 5432
 5433                          /*F*  NAME:  M$FWCG - Find Messages within a Comgroup.
 5434
 5435                          The M$FWCG service is used to find some subset
 5436                          of the messages within a comgroup, and then
 5437                          optionally produce a report about them as well as
 5438                          optionally deleting or changing them.
 5439                          Usage of the informational (reporting)
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           148  
 5440                          aspect of this service is restricted to
 5441                          users having AURD access to the comgroup.
 5442                          Usage of the operational (delete or change)
 5443                          aspect of this service is limited to the
 5444                          AU of the comgroup.
 5445
 5446                          The desired subset of messages is defined
 5447                          by the SCA, CRITERIA and QSELECT parameters.
 5448                          If CRITERIA is NIL then one message is
 5449                          being selected, namely the currently-latched
 5450                          input message of the service call issuer.
 5451                          In this case DELETE and REATTR are ignored,
 5452                          that is the service becomes informational only.
 5453                          Note that such latched messages may only
 5454                          be viewed via M$FWCG in this special way,
 5455                          that is to say the service call issuer
 5456                          can only 'see' his own latched input
 5457                          message by this special method, and
 5458                          can never see any other currently-latched
 5459                          messages.
 5460
 5461                          Otherwise, that is when a VLP_CGMA is
 5462                          supplied as CRITERIA, QSELECT defines
 5463                          the class(es) of messages being
 5464                          selected.  The two classes are directed
 5465                          messages (i.e. those written to a
 5466                          specific station) and anonymous
 5467                          messages (i.e. those in the anonymous
 5468                          queue).  QSELECT may be used to select
 5469                          either or both of these classes.
 5470
 5471                          The VLP_CGMA framed by CRITERIA contains
 5472                          certain specifications for the attributes
 5473                          of the desired messages.  The SCA parameter,
 5474                          framing a VLP_SCGMA, defines which of these
 5475                          attributes are to be used in defining the
 5476                          desired subset.  Thus, for example, to
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           149  
 5477                          select messages written to stations whose
 5478                          names begin with 'ABC', one specifies
 5479                          QSELECT=DIRECT, VLP_CGMA.DEST='ABC?',
 5480                          and VLP_SCGMA.DEST=YES, with all other
 5481                          options in VLP_SCGMA set to NO.
 5482                          To further qualify the subset and
 5483                          select only messages of type
 5484                          'XYZ', one would also set
 5485                          VLP_SCGMA.MSGTYP to YES, and
 5486                          VLP_CGMA.MSGTYP to 'XYZ'.
 5487                          Note that for the criteria
 5488                          MSGTYP, DEST, and ORIGIN,
 5489                          one may indicate don't-care
 5490                          (i.e. no restriction) in two
 5491                          ways, namely by setting the
 5492                          VLP_CGMA attribute to '?'
 5493                          and the VLP_SCGMA option
 5494                          to YES, or simply by setting
 5495                          the VLP_SCGMA option to NO.
 5496
 5497
 5498                          Once the desired set of messages
 5499                          has been defined as described
 5500                          above, the function of the
 5501                          service must be specified.  There
 5502                          are two aspects to this
 5503                          service: informational and operational.
 5504
 5505                          The informational function
 5506                          returns the attributes of the
 5507                          messages found.
 5508                          This function takes two forms.
 5509                          First, the ONEATTR parameter,
 5510                          if specified, frames a VLP_CGMA
 5511                          area which is to receive the
 5512                          attributes of the first message
 5513                          found.  This is most commonly
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           150  
 5514                          used when a single message is
 5515                          expected, particularly in the
 5516                          case where CRITERIA is NIL
 5517                          (see above).  The second form
 5518                          of information return, which
 5519                          may be specified in conjunction
 5520                          with ONEATTR, is INFORM.  Setting
 5521                          INFORM to YES requests that the
 5522                          service build a special message containing
 5523                          a list with one entry for each
 5524                          message found, with each entry
 5525                          consisting of the attributes of
 5526                          the corresponding message.
 5527                          This special message will be sent to
 5528                          the service call issuer at the
 5529                          conclusion of the service call,
 5530                          and may subsequently be read
 5531                          at the issuer's discretion.
 5532                          Its message ID is returned into
 5533                          MSGID in VLR_FWCG.  See the
 5534                          discussion of the INFORM option
 5535                          for the specific structure of
 5536                          this message.  Note that the
 5537                          size of the data of this special
 5538                          message depends on the number
 5539                          of messages found by the service,
 5540                          which is to say it may be very
 5541                          large.  The message may be
 5542                          read safely irrespective of
 5543                          size by specifying CONT on the
 5544                          M$READ.
 5545                          Note that INFORM requires the comgroup to
 5546                          have a value of at least 2 for the minimum
 5547                          number of data cache pages.  If the minimum
 5548                          is less than 2, then M$FWCG will return
 5549                          an error.
 5550
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           151  
 5551
 5552                          The operational function allows
 5553                          for deleting the selected messages
 5554                          or changing their attributes
 5555                          (called REATTR).
 5556                          These two choices
 5557                          are mutually exclusive.
 5558                          Specifically, the DELETE option
 5559                          is interrogated first; if
 5560                          DELETE is YES then the selected
 5561                          messages are deleted.  If
 5562                          DELETE is NO, then the
 5563                          selected messages are changed
 5564                          if REATTR is specified.
 5565                          Thus requesting the information-only
 5566                          form of this service requires
 5567                          setting DELETE to NO and
 5568                          REATTR to NIL.
 5569
 5570                          Changing the attributes
 5571                          of the selected messages
 5572                          is limited by the fact
 5573                          that only one set of
 5574                          new attributes may be
 5575                          supplied.  In other words,
 5576                          when REATTR is performed,
 5577                          all selected messages have
 5578                          their attributes changed
 5579                          in the same way.  The set of
 5580                          attributes to be changed is
 5581                          defined by SRA which frames
 5582                          a VLP_SCGMA.  The new values
 5583                          for these attributes are defined
 5584                          in REATTR which frames a
 5585                          VLP_CGMA.  Thus, for example,
 5586                          to redirect messages to a
 5587                          specific station, say 'ABC',
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           152  
 5588                          one specifies YES for
 5589                          VLP_SCGMA.DEST (in SRA),
 5590                          and 'ABC' for VLP_CGMA.DEST
 5591                          (in REATTR).
 5592
 5593                          Once the attributes of a message
 5594                          have been changed, the message may
 5595                          have to be moved as a result.
 5596                          For example, if PRIO or UTS
 5597                          is changed then the message
 5598                          will need to be moved to
 5599                          a different place in its
 5600                          original message queue.
 5601                          If DEST is changed then
 5602                          the message will have to be
 5603                          moved to a different queue.
 5604                          Note in particular that if
 5605                          a non-blank DEST is assigned
 5606                          to a message originally found
 5607                          in the anonymous queue, then
 5608                          the message leaves the anonymous
 5609                          queue and is placed in the queue
 5610                          of messages destined for the
 5611                          station whose name is in DEST.
 5612                          Note further that the REATTR
 5613                          operation is limited by the
 5614                          way in which the comgroup
 5615                          is defined.  Thus assigning
 5616                          a new DEST of, say, 'ABC'
 5617                          will cause the message to
 5618                          be deleted if station 'ABC' is
 5619                          not present and the comgroup
 5620                          does not allow writing to absent
 5621                          stations.
 5622
 5623                          AU event messages (message type '*AUEV')
 5624                          may be deleted but may not have their
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           153  
 5625                          attributes changed.  When a REATTR operation
 5626                          is being performed, the count of messages
 5627                          found and the INFORM result (if any) will
 5628                          include the AU event messages, but they
 5629                          will be passed over during the REATTR
 5630                          phase.
 5631
 5632                          Particular care must be exercised
 5633                          when changing the MSGID.  Under normal
 5634                          circumstances it is guaranteed
 5635                          that each message in the comgroup has
 5636                          a unique MSGID-MSGIDXT pair.  CP-6 file management
 5637                          makes little attempt to ensure that this
 5638                          will remain true when M$FWCG is used
 5639                          to change the MSGID of a message.
 5640                          For further information, refer to MSGID in
 5641                          VLP_SCGMA, and to the
 5642                          section on 'REBUILDING A COMGROUP'
 5643                          in the general discussion of comgroups.
 5644
 5645                          The form of the call for this service is:
 5646
 5647                          CALL M$FWCG (FPT_FWCG) [ALTRET (label)];
 5648
 5649                          The parameters are as follows:                          */
 5650
 5651      %MACRO FPT_FWCG (FPTN=FPT_FWCG,
 5652               INFORM    (YES='1'B,NO='0'B)='0'B,
 5653               DELETE    (YES='1'B,NO='0'B)='0'B,
 5654               QSELECT   (ALL=1,DIRECT=2,ANONYMOUS=3)=1,
 5655               DCB       = NIL,
 5656               CRITERIA  = NIL,
 5657               REATTR    = NIL,
 5658               SCA       = NIL,
 5659               SRA       = NIL,
 5660               RESULTS   = NIL,
 5661               ONEATTR   = NIL,
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           154  
 5662               STCLASS   = STATIC);
 5663
 5664       %LSET LISTDIR='0'B;
 5665       %LSET LISTEXP='1'B;
 5666       %LSET LISTCOM='0'B;
 5667       %LSET LISTSUB='1'B;
 5668       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 5669       %IF (SUBSTR(STR,0,6)='STATIC') OR
 5670       (SUBSTR(STR,0,8)='CONSTANT') OR
 5671       (SUBSTR(STR,0,3)='EXT');
 5672       %LSET INIT=CHARTEXT('INIT');
 5673       %ELSE;
 5674       %LSET INIT=CHARTEXT('/*');
 5675       %ENDIF;
 5676
 5677      DCL 1 FPTN STCLASS DALIGNED,
 5678            2 V_ BIT(72) UNAL %INIT(VECTOR(FPTN.V))%CHARTEXT('/**/'),
 5679
 5680            2 CRITERIA_ BIT(72) UNAL %INIT(VECTOR(CRITERIA))%CHARTEXT('/**/'),
 5681                          /*K* CRITERIA = VARIABLE locates a VLP_CGMA area
 5682                          containing the selection criteria describing the
 5683                          desired messages.
 5684                          See also SCA.
 5685
 5686                          If CRITERIA is NIL, then the service is assumed
 5687                          to be selecting one specific message, namely
 5688                          the currently-latched input message associated
 5689                          with the DCB supplied with the service call.
 5690                          In this case, QSELECT is ignored;
 5691                          furthermore, DELETE and REATTR are ignored,
 5692                          that is, the selected message is not affected
 5693                          in any way.
 5694                          Note that this is the only way in which
 5695                          such a latched message may be 'seen' via M$FWCG.
 5696
 5697                          The default is NIL. */
 5698
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           155  
 5699            2 REATTR_ BIT(72) UNAL %INIT(VECTOR(REATTR))%CHARTEXT('/**/'),
 5700                          /*K* REATTR = VARIABLE locates a VLP_CGMA area
 5701                          containing the new attributes to be given
 5702                          to the selected messages. REATTR applies only
 5703                          if DELETE is NO, and if specified, indicates
 5704                          that the REATTR function is to be performed.
 5705                          See also SRA.
 5706                          The default is NIL. */
 5707
 5708            2 SCA_ BIT(72) UNAL %INIT(VECTOR(SCA))%CHARTEXT('/**/'),
 5709                          /*K* SCA = VARIABLE locates VLP_SCGMA area
 5710                          containing a list specifying which of the
 5711                          attributes supplied in CRITERIA are
 5712                          actually to be used in selecting the desired
 5713                          messages.
 5714                          SCA must be specified if CRITERIA is specified.
 5715                          The default is NIL. */
 5716
 5717            2 SRA_ BIT(72) UNAL %INIT(VECTOR(SRA))%CHARTEXT('/**/'),
 5718                          /*K* SRA = VARIABLE locates a VLP_SCGMA area
 5719                          containing a list specifying which of the
 5720                          attributes supplied in REATTR are actually to
 5721                          to be used in changing the
 5722                          selected messages.
 5723                          SRA must be specified if REATTR is specified.
 5724                          The default is NIL. */
 5725
 5726            2 RESULTS_ BIT(72) UNAL %INIT(VECTOR(RESULTS))%CHARTEXT('/**/'),
 5727                          /*K* RESULTS = VARIABLE locates a VLR_FWCG area
 5728                          into which certain result information will be
 5729                          returned.
 5730                          The default is NIL. */
 5731
 5732            2 ONEATTR_ BIT(72) UNAL %INIT(VECTOR(ONEATTR))%CHARTEXT('/**/'),
 5733                          /*K* ONEATTR = VARIABLE locates a VLP_CGMA area
 5734                          into which the attributes of the first message
 5735                          found are to be returned.  Specification of
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           156  
 5736                          ONEATTR has no effect on the action of INFORM.
 5737                          The default is NIL. */
 5738
 5739            2 * (0:6) BIT(72) UNAL %INIT(VECTOR(NIL)*0)%CHARTEXT('/**/'),
 5740
 5741            2 V DALIGNED,
 5742
 5743              3 DCB# UBIN HALF UNAL %INIT(DCBNUM(DCB))%CHARTEXT('/**/'),
 5744                          /*K* DCB = DCBNAME specifies the DCB associated
 5745                          with the comgroup.
 5746                          */
 5747
 5748              3 * UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
 5749
 5750              3 DELETE# BIT(1) UNAL %INIT(DELETE)%CHARTEXT('/**/'),
 5751                          /*K* DELETE = {YES|NO} specifies
 5752                          whether (YES) or not (NO) the selected
 5753                          messages are to be deleted from the
 5754                          comgroup.  If NO, then the REATTR option
 5755                          is honored if it is specified.
 5756                          The default is NO. */
 5757
 5758              3 INFORM# BIT(1) UNAL %INIT(INFORM)%CHARTEXT('/**/'),
 5759                          /*K* INFORM = {YES|NO} specifies
 5760                          whether (YES) or not (NO) a report is
 5761                          to be generated concerning the selected
 5762                          messages.  If YES, then a special message
 5763                          will be created and sent to the station
 5764                          associated with the DCB supplied on the
 5765                          service call.  This message has
 5766                          message type '*AUEV', and the first portion
 5767                          of the message data is structured as are
 5768                          all such messages, that is, it is framed
 5769                          by the structure B$CGAURD.  In particular,
 5770                          the B$CGAURD.EVENT word contains the
 5771                          value CG_FWCG#.  The remainder of the
 5772                          message data consists of a series of
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           157  
 5773                          VLP_CGMA frames, one for each message
 5774                          found by the service, containing the
 5775                          attributes of those messages.  The
 5776                          MSGID of this special message is returned
 5777                          in MSGID of VLR_FWCG (see RESULTS).
 5778                          The default is NO. */
 5779
 5780              3 QSELECT# UBIN(3) UNAL %INIT(QSELECT)%CHARTEXT('/**/'),
 5781                          /*K* QSELECT = OPTION is used in addition
 5782                          to CRITERIA to restrict the set of messages
 5783                          selected.  DIRECT specifies that only those
 5784                          messages destined for specific stations are
 5785                          to be considered.  ANONYMOUS specifies that
 5786                          only messages in the anonymous queue are
 5787                          to be considered.  ALL specifies that both
 5788                          classes of messages are to be considered.
 5789
 5790                          QSELECT is only meaningful if CRITERIA is
 5791                          specified.  The default is ALL. */
 5792
 5793              3 * BIT(31) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 5794
 5795              3 * (0:11) UBIN WORD UNAL %INIT(0*0)%CHARTEXT('/**/');
 5796      %MEND;
 5797
 5798
 5799                          /*F* NAME: VLR_FWCG
 5800
 5801                          This macro generates an area which receives
 5802                          the results of M$FWCG. */
 5803
 5804      %MACRO VLR_FWCG (FPTN=VLR_FWCG,STCLASS=STATIC);
 5805
 5806       %LSET LISTDIR='0'B;
 5807       %LSET LISTEXP='1'B;
 5808       %LSET LISTCOM='0'B;
 5809       %LSET LISTSUB='1'B;
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           158  
 5810       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 5811       %IF (SUBSTR(STR,0,6)='STATIC') OR
 5812       (SUBSTR(STR,0,8)='CONSTANT') OR
 5813       (SUBSTR(STR,0,3)='EXT');
 5814       %LSET INIT=CHARTEXT('INIT');
 5815       %ELSE;
 5816       %LSET INIT=CHARTEXT('/*');
 5817       %ENDIF;
 5818
 5819      DCL 1 FPTN STCLASS DALIGNED,
 5820            2 FOUND# UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 5821                          /*K* FOUND = VALUE-DEC(0-n) is set to the
 5822                          number of messages found by the service. */
 5823
 5824            2 MSGID# UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 5825                          /*K* MSGID = VALUE-DEC(1-n) is set to the
 5826                          MSGID of the message generated when INFORM
 5827                          is specified as YES. */
 5828            2 * (0:7) UBIN WORD %INIT(0*0)%CHARTEXT('/**/');
 5829      %MEND;
 5830
 5831
 5832                          /*F* NAME: VLP_SCGMA
 5833
 5834                          This macro generates an area for use with
 5835                          M$FWCG.  It contains a list of attribute
 5836                          flags used to select a subset of the
 5837                          attributes present in a VLP_CGMA area.
 5838
 5839                          All of the flags are honored for SRA
 5840                          in M$FWCG, that is to say for REATTR.
 5841                          Only the following flags are honored
 5842                          for SCA, that is, for message selection
 5843                          criteria:
 5844                          .FIF
 5845
 5846                          MSGTYP
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           159  
 5847                          ORIGIN
 5848                          DEST
 5849                          MSGID
 5850                          MSGIDXT
 5851                          .FIN
 5852                          */
 5853
 5854      %MACRO VLP_SCGMA (FPTN=VLP_SCGMA,
 5855               MSGTYP    (YES='1'B,NO='0'B)='0'B,
 5856               ORIGIN    (YES='1'B,NO='0'B)='0'B,
 5857               DEST      (YES='1'B,NO='0'B)='0'B,
 5858               PRIO      (YES='1'B,NO='0'B)='0'B,
 5859               UTS       (YES='1'B,NO='0'B)='0'B,
 5860               MSGID     (YES='1'B,NO='0'B)='0'B,
 5861               MSGIDXT   = 0,
 5862               DVE       (YES='1'B,NO='0'B)='0'B,
 5863               MSGSIZE   (YES='1'B,NO='0'B)='0'B,
 5864               TYC       (YES='1'B,NO='0'B)='0'B,
 5865               EXMPTSTAR (YES='1'B,NO='0'B)='0'B,
 5866               STCLASS   = STATIC);
 5867
 5868       %LSET LISTDIR='0'B;
 5869       %LSET LISTEXP='1'B;
 5870       %LSET LISTCOM='0'B;
 5871       %LSET LISTSUB='1'B;
 5872       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 5873       %IF (SUBSTR(STR,0,6)='STATIC') OR
 5874       (SUBSTR(STR,0,8)='CONSTANT') OR
 5875       (SUBSTR(STR,0,3)='EXT');
 5876       %LSET INIT=CHARTEXT('INIT');
 5877       %ELSE;
 5878       %LSET INIT=CHARTEXT('/*');
 5879       %ENDIF;
 5880
 5881      DCL 1 FPTN STCLASS DALIGNED,
 5882
 5883            2 MSGTYP#  BIT(1) UNAL %INIT(MSGTYP)%CHARTEXT('/**/'),
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           160  
 5884                          /*K* MSGTYP = {YES|NO} selects (YES) or
 5885                          ignores (NO) the MSGTYP attribute in the
 5886                          corresponding VLP_CGMA. The default is
 5887                          NO. */
 5888
 5889            2 ORIGIN#  BIT(1) UNAL %INIT(ORIGIN)%CHARTEXT('/**/'),
 5890                          /*K* ORIGIN = {YES|NO} selects (YES) or
 5891                          ignores (NO) the ORIGIN attribute in the
 5892                          corresponding VLP_CGMA. The default is
 5893                          NO. */
 5894
 5895            2 DEST#  BIT(1) UNAL %INIT(DEST)%CHARTEXT('/**/'),
 5896                          /*K* DEST = {YES|NO} selects (YES) or
 5897                          ignores (NO) the DEST attribute in the
 5898                          corresponding VLP_CGMA. The default is
 5899                          NO. */
 5900
 5901            2 PRIO#  BIT(1) UNAL %INIT(PRIO)%CHARTEXT('/**/'),
 5902                          /*K* PRIO = {YES|NO} selects (YES) or
 5903                          ignores (NO) the PRIO attribute in the
 5904                          corresponding VLP_CGMA.
 5905
 5906                          Note that if PRIO is YES for a REATTR function,
 5907                          then certain limits are placed on the legal
 5908                          values.  For subject messages that are not
 5909                          AU event messages, the legal limits for PRIO
 5910                          in the VLP_CGMA are 0 to 256500.
 5911                          If the PRIO in VLP_CGMA
 5912                          is not legal, then no error will be reported;
 5913                          instead the highest possible legal value will
 5914                          be used.
 5915
 5916                          The default is NO. */
 5917
 5918            2 UTS#  BIT(1) UNAL %INIT(UTS)%CHARTEXT('/**/'),
 5919                          /*K* UTS = {YES|NO} selects (YES) or
 5920                          ignores (NO) the UTS attribute in the
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           161  
 5921                          corresponding VLP_CGMA. The default is
 5922                          NO. */
 5923
 5924            2 MSGID#  BIT(1) UNAL %INIT(MSGID)%CHARTEXT('/**/'),
 5925                          /*K* MSGID = {YES|NO} selects (YES) or
 5926                          ignores (NO) the MSGID attribute in the
 5927                          corresponding VLP_CGMA.
 5928
 5929                          Note that if MSGID is YES for a REATTR function,
 5930                          then the current comgroup message ID will be
 5931                          set to the supplied message ID plus one if it
 5932                          is not already greater.  This attempts to prevent
 5933                          duplicate message IDs in the comgroup.
 5934
 5935                          The default is NO. */
 5936
 5937            2 DVE# BIT(1) UNAL %INIT(DVE)%CHARTEXT('/**/'),
 5938                          /*K* DVE = {YES|NO} selects (YES) or
 5939                          ignores (NO) the DVE attribute in the
 5940                          corresponding VLP_CGMA. The default is
 5941                          NO. */
 5942
 5943            2 MSGSIZE# BIT(1) UNAL %INIT(MSGSIZE)%CHARTEXT('/**/'),
 5944                          /*K* MSGSIZE = {YES|NO} selects (YES) or
 5945                          ignores (NO) the MSGSIZE attribute in the
 5946                          corresponding VLP_CGMA.
 5947
 5948                          Note that if MSGSIZE is YES for a REATTR
 5949                          function, then the size of the subject message
 5950                          may only be reduced, not increased.
 5951
 5952                          The default is NO. */
 5953
 5954            2 TYC#  BIT(1) UNAL %INIT(TYC)%CHARTEXT('/**/'),
 5955                          /*K* TYC = {YES|NO} selects (YES) or
 5956                          ignores (NO) the TYC attribute in the
 5957                          corresponding VLP_CGMA. The default is
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           162  
 5958                          NO. */
 5959
 5960            2 MSGIDXT# UBIN BYTE UNAL %INIT(MSGIDXT)%CHARTEXT('/**/'),
 5961                          /*K* MSGIDXT = VALUE-DEC(0-6) selects (nonzero)
 5962                          or ignores (zero) the MSGIDXT attribute in the
 5963                          corresponding VLP_CGMA.  MSGIDXT is only meaningful
 5964                          if MSGID has been specified.
 5965
 5966                          For REATTR, that is to say in SRA, any nonzero
 5967                          value for MSGIDXT here causes the entire MSGIDXT
 5968                          in the selected message(s) to be changed to the
 5969                          MSGIDXT in the REATTR VLP_CGMA.
 5970
 5971                          For message selection, that is to say in SCA,
 5972                          the meaning of MSGIDXT is somewhat different.
 5973                          If the comgroup is using the second type of
 5974                          message ID extension (see MSGID in VLP_STATION),
 5975                          then any nonzero value for MSGIDXT has the effect
 5976                          of selecting the entire MSGIDXT in VLP_CGMA.
 5977
 5978                          On the other hand,
 5979                          if the comgroup is using the first type of
 5980                          message ID extension, namely the six-level
 5981                          structure, then the MSGIDXT in CRITERIA may
 5982                          be wild-carded by appropriate setting of
 5983                          MSGIDXT here.  When MSGIDXT is set to N,
 5984                          then the first N levels in MSGIDXT in CRITERIA
 5985                          are used for message selection.  For example,
 5986                          if the MSGID in CRITERIA is 7, and the MSGIDXT
 5987                          in CRITERIA is 2-3-4-1-0-0, then setting
 5988                          MSGIDXT to 2 here causes a search for all
 5989                          messages bearing MSGID 7 and MSGIDXT
 5990                          2-3-?-?-?-?.  VLP_CGMA permits the user to specify
 5991                          the various level values individually, as
 5992                          MIDXT1, MIDXT2, ..... , MIDXT6.
 5993
 5994                          The default is zero. */
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           163  
 5995
 5996            2 EXMPTSTAR#  BIT(1) UNAL %INIT(EXMPTSTAR)%CHARTEXT('/**/'),
 5997                          /*K* EXMPTSTAR = {YES|NO} exempts (YES) or deletes (NO)
 5998                          * messages that satisfy the CRITERIA in VLP_FWCG.  If YES
 5999                          is specified, *AUEV, *RESP and other such * messages
 6000                          will not be deleted, if they satisfy the CRITERIA
 6001                          specified in the VLP_CGMA.  If NO is specified,
 6002                          all messages satisfying the CRITERIA will
 6003                          be deleted, whether or not they are * messages.
 6004
 6005                          This parameter is only honored if DELETE=YES.
 6006                          The default is NO. */
 6007
 6008            2 * BIT(17) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 6009
 6010            2 * BIT(36) UNAL %INIT('0'B)%CHARTEXT('/**/');
 6011      %MEND;
 6012
 6013
 6014                          /*F* NAME: VLP_CGMA
 6015
 6016                          This macro generates an area for use with
 6017                          M$FWCG.  It contains the attributes of a
 6018                          comgroup message.  Those attributes which
 6019                          are honored in CRITERIA of M$FWCG are
 6020                          distinguished by the fact that they have
 6021                          default values.
 6022                          */
 6023
 6024      %MACRO VLP_CGMA (FPTN=VLP_CGMA,%LVL=1,%LAST=";",
 6025               MSGTYP    = '?',
 6026               ORIGIN    = '?',
 6027               DEST      = '?',
 6028               MSGID     = 0,
 6029               MIDXT1    = 0,
 6030               MIDXT2    = 0,
 6031               MIDXT3    = 0,
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           164  
 6032               MIDXT4    = 0,
 6033               MIDXT5    = 0,
 6034               MIDXT6    = 0,
 6035               STCLASS   = STATIC);
 6036
 6037       %LSET LISTDIR='0'B;
 6038       %LSET LISTEXP='1'B;
 6039       %LSET LISTCOM='0'B;
 6040       %LSET LISTSUB='1'B;
 6041       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 6042       %IF (SUBSTR(STR,0,6)='STATIC') OR
 6043       (SUBSTR(STR,0,8)='CONSTANT') OR
 6044       (SUBSTR(STR,0,3)='EXT');
 6045       %LSET INIT=CHARTEXT('INIT');
 6046       %ELSE;
 6047       %LSET INIT=CHARTEXT('/*');
 6048       %ENDIF;
 6049
 6050                                    /*!* VP Y                                     */
 6051       %IF LVL=1;
 6052      DCL 1 FPTN STCLASS ALIGNED,
 6053       %ELSE;
 6054              %LVL FPTN ALIGNED,
 6055       %ENDIF;
 6056                          /* This structure parallels that of an MBLK. */
 6057
 6058            %(LVL+1) * UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 6059
 6060            %(LVL+1) PRIO# UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 6061                          /*K* PRIO = VALUE-DEC(0-262143) is the message
 6062                          priority.  Priorities of normal messages
 6063                          lie in the range 1 through 256000.  However,
 6064                          some special messages (generated by the
 6065                          comgroup itself), notably the AU event
 6066                          messages, have priorities outside this
 6067                          range. */
 6068
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           165  
 6069            %(LVL+1) * UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
 6070
 6071            %(LVL+1) MSGTYP# CHAR(8) UNAL %INIT(MSGTYP)%CHARTEXT('/**/'),
 6072                          /*K* MSGTYP = VALUE-CHAR(8) is the type of
 6073                          the message.
 6074
 6075                          When supplied as part of
 6076                          CRITERIA to M$FWCG, MSGTYP may be wild-carded.
 6077                          The default is '?', meaning all types are
 6078                          desired. */
 6079
 6080            %(LVL+1) ORIGIN# CHAR(8) UNAL %INIT(ORIGIN)%CHARTEXT('/**/'),
 6081                          /*K* ORIGIN = VALUE-CHAR(8) is the name of
 6082                          the station which originated (wrote) the
 6083                          message.
 6084
 6085                          When supplied as part of CRITERIA to M$FWCG,
 6086                          ORIGIN may be wild-carded.  The default is
 6087                          '?', meaning messages with any origin are
 6088                          desired. */
 6089
 6090            %(LVL+1) * UBIN %INIT(0)%CHARTEXT('/**/'),
 6091
 6092            %(LVL+1) UTS# UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 6093                          /*K* UTS = VALUE-DEC(0-n) is the system
 6094                          time stamp (in UTS format) of the time
 6095                          at which the message was created. */
 6096
 6097            %(LVL+1) * UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
 6098
 6099            %(LVL+1) DVE# BIT(18) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 6100                          /*K* DVE is a collection of bits containing
 6101                          certain attributes of the message as a data
 6102                          record.  The contents of DVE are not
 6103                          normally of interest to the issuer of M$FWCG
 6104                          other than as something to be received
 6105                          (as part of ONEATTR or INFORM), and supplied
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           166  
 6106                          (as part of REATTR) when a message is being
 6107                          saved and reinserted. */
 6108
 6109            %(LVL+1) * UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
 6110
 6111            %(LVL+1) DEST# CHAR(8) UNAL %INIT(DEST)%CHARTEXT('/**/'),
 6112                          /*K* DEST = VALUE-CHAR(8) is the destination
 6113                          of the message.  If DEST is blanks, then
 6114                          the 'destination' of the message is the
 6115                          anonymous queue, otherwise DEST is the name
 6116                          of the specific station to which the message
 6117                          was written.
 6118
 6119                          When supplied as part of CRITERIA to M$FWCG,
 6120                          DEST may be wild-carded.  The default is
 6121                          '?', meaning that messages with any destination
 6122                          are desired. See also the QSELECT parameter
 6123                          of M$FWCG. */
 6124
 6125
 6126            %(LVL+1) TYC# BIT(36) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 6127                          /*K* TYC = VALUE-BIT(36) is a collection of
 6128                          bits to be passed as a TYC value to the
 6129                          eventual reader of the message.  See the
 6130                          discussion of TYC under M$DCB.  TYC is
 6131                          similar to DVE in that it is not normally
 6132                          of interest other than as a field to be
 6133                          received and supplied. */
 6134
 6135            %(LVL+1) MSGID# UBIN %INIT(MSGID)%CHARTEXT('/**/'),
 6136                          /*K* MSGID = VALUE-DEC(1-n) is the comgroup
 6137                          message id of the message.  Refer to the
 6138                          the discussion of MSGID under VLP_STATION.
 6139
 6140                          When supplied as part of CRITERIA to M$FWCG,
 6141                          MSGID may be specified as zero to indicate that
 6142                          all message IDs are desired.
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           167  
 6143
 6144                          The default is 0. */
 6145
 6146            %(LVL+1) MSGIDXT ALIGNED,
 6147                          /*K* MSGIDXT = VALUE-BIT(36) is the extension
 6148                          to MSGID.  Refer to the discussion of MSGID
 6149                          and MSGIDXT in VLP_STATION.
 6150
 6151                          If MSGIDXT is to be supplied when this macro
 6152                          is invoked, it must be specified in its six
 6153                          component parts: MIDXT1, ..... , MIDXT6. */
 6154
 6155              %(LVL+2) MIDXT1# UBIN(6) UNAL %INIT(MIDXT1)%CHARTEXT('/**/'),
 6156                          /*K* MSGIDXT.MIDXT1 = VALUE-DEC(1-62) (See MSGIDXT). */
 6157
 6158              %(LVL+2) MIDXT2# UBIN(6) UNAL %INIT(MIDXT2)%CHARTEXT('/**/'),
 6159                          /*K* MSGIDXT.MIDXT2 = VALUE-DEC(1-62) (See MSGIDXT). */
 6160
 6161              %(LVL+2) MIDXT3# UBIN(6) UNAL %INIT(MIDXT3)%CHARTEXT('/**/'),
 6162                          /*K* MSGIDXT.MIDXT3 = VALUE-DEC(1-62) (See MSGIDXT). */
 6163
 6164              %(LVL+2) MIDXT4# UBIN(6) UNAL %INIT(MIDXT4)%CHARTEXT('/**/'),
 6165                          /*K* MSGIDXT.MIDXT4 = VALUE-DEC(1-62) (See MSGIDXT). */
 6166
 6167              %(LVL+2) MIDXT5# UBIN(6) UNAL %INIT(MIDXT5)%CHARTEXT('/**/'),
 6168                          /*K* MSGIDXT.MIDXT5 = VALUE-DEC(1-62) (See MSGIDXT). */
 6169
 6170              %(LVL+2) MIDXT6# UBIN(6) UNAL %INIT(MIDXT6)%CHARTEXT('/**/'),
 6171                          /*K* MSGIDXT.MIDXT6 = VALUE-DEC(1-62) (See MSGIDXT). */
 6172
 6173            %(LVL+1) MSGIDBXT REDEF MSGIDXT UBIN,
 6174                          /*K* MSGIDBXT = VALUE-DEC(0-?) is the alias
 6175                          of MSGIDXT, for use when message ID extensions
 6176                          take their second possible form.  See MSGIDXT. */
 6177
 6178            %(LVL+1) MSGSIZE# UBIN UNAL %INIT(0)%CHARTEXT('/**/'),
 6179                          /*K* MSGSIZE = VALUE-DEC(0-n) is the size
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           168  
 6180                          in bytes of the message. */
 6181
 6182            %(LVL+1) * UBIN %INIT(0*0)%CHARTEXT('/**/') LAST
 6183      %MEND;
 6184
 6185
 6186                          /*F* NAME: M$ATTACH
 6187
 6188                          The M$ATTACH monitor service allows an OSI server
 6189                          application to declare that it is ready to accept
 6190                          incoming connections from OSI clients that reside
 6191                          on a node other than the server node.
 6192
 6193                          The form of the call for this service is as follows:
 6194
 6195                          CALL M$ATTACH (FPT_ATTACH) [ALTRET (label)];
 6196
 6197                          Parameters for this service are:
 6198                          */
 6199
 6200      %MACRO FPT_ATTACH (FPTN=FPT_ATTACH,
 6201            DCB=NIL,
 6202            TSAP=NIL,
 6203            STCLASS=STATIC);
 6204
 6205      %LSET LISTDIR='0'B;
 6206      %LSET LISTEXP='1'B;
 6207      %LSET LISTCOM='0'B;
 6208      %LSET LISTSUB='1'B;
 6209      %LSET S#=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
 6210      %LSET S#=2*BITBIN (S#='STA' OR S#='CON' OR S#='EXT');
 6211      %LSET INIT=CHARTEXT (SUBSTR ('/*INIT',S#,2+S#));
 6212      %LSET EINIT=CHARTEXT (SUBSTR ('*/',S#));
 6213
 6214      DCL 1 FPTN STCLASS DALIGNED,
 6215      /*!* VP Y */
 6216      %LSET FPT_LVL=1;
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           169  
 6217      /*!* VP N */
 6218      %LSET FPT_LVL = FPT_LVL+1;
 6219            2 V_ VECTOR %INIT(VECTOR(FPTN.V))%EINIT,
 6220            2 TSAP_ VECTOR %INIT(VECTOR(TSAP))%EINIT,
 6221                          /*K* TSAP = VARIABLE locates a VLP_TSAP area
 6222                          which supplies the TSAP (Transport Service Access
 6223                          Point) that identifies the OSI application.
 6224
 6225                          The default is NIL. */
 6226            2 V DALIGNED,
 6227              3 DCB# UBIN(18) UNAL %INIT(DCBNUM(DCB))%EINIT,
 6228                          /*K* DCB = DCBNAME     specifies the name of the
 6229                          DCB associated with the comgroup.  The DCB must
 6230                          be open to a comgroup in :OSICG.
 6231                          */
 6232              3 * BIT(18) UNAL %INIT('1'B)%EINIT;
 6233      %MEND;
 6234
 6235                          /*F* NAME: VLP_TSAP
 6236
 6237                          The VLP_TSAP macro is used to generate a TSAP
 6238                          (Transport Service Access Point) for an OSI
 6239                          application.  An OSI application has an address
 6240                          at each OSI layer, and VLP_TSAP defines the
 6241                          address at the OSI Transport layer.
 6242
 6243                          The macro generates a length halfword and a
 6244                          fixed-length character string to contain the
 6245                          address.
 6246
 6247                          The maximum length of the address is 32 bytes.
 6248                          */
 6249
 6250      %MACRO VLP_TSAP (FPTN=VLP_TSAP,
 6251                       L=,
 6252                       LEN=,
 6253                       TSAP='                                ',
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           170  
 6254                       STCLASS=STATIC);
 6255      %LSET LISTDIR = '0'B;
 6256      %LSET LISTEXP = '1'B;
 6257      %LSET LISTCOM = '0'B;
 6258      %LSET LISTSUB = '1'B;
 6259      %LSET LNG = CHARTEXT('');
 6260      %LSET SIZ = CHARTEXT('');
 6261      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS),'   '), 0, 3);
 6262      %IF STC = 'STA' OR STC = 'CON' OR STC = 'EXT';
 6263          %IF LENGTHC( TEXTCHAR(L)) = 0;
 6264              %LSET SIZ = LENGTHC( TSAP);
 6265              %ENDIF;
 6266          %IF LENGTHC( TEXTCHAR(LEN)) = 0;
 6267              %LSET LNG = 0;
 6268              %ENDIF;
 6269          %LSET INIT = CHARTEXT( 'INIT');
 6270      %ELSE;
 6271          %IF LENGTHC( TEXTCHAR(LEN)) = 0;
 6272              %LSET LNG = CHARTEXT( CONCAT( TEXTCHAR(FPTN), '.L#'));
 6273              %IF STC = 'AUT';
 6274                  %LSET LNG = 32;
 6275                  %ENDIF;
 6276              %ENDIF;
 6277          %LSET INIT = CHARTEXT( '/*');
 6278      %ENDIF;
 6279
 6280          DCL 1 FPTN STCLASS,
 6281               2 L# UBIN HALF %INIT( L%SIZ)%CHARTEXT('/**/') UNAL,
 6282               2 TSAP# CHAR(LEN%LNG)%INIT(TSAP)%CHARTEXT('/**/');
 6283
 6284      %MEND;
 6285
 6286      DCL M$ACTIVATE     ENTRY(1) CONV(1,4,32768) ALTRET;
 6287      DCL M$DEACTIVATE   ENTRY(1) CONV(1,4,32769) ALTRET;
 6288      DCL M$UNLATCH      ENTRY(1) CONV(1,3,32770) ALTRET;
 6289      DCL M$CGCTL        ENTRY(1) CONV(1,20,32771) ALTRET;
 6290      DCL M$CGINFO       ENTRY(1) CONV(1,20,32772) ALTRET;
07:20 JUL 29 '97 KC_CP6_C.:E05SI                                           171  
 6291      DCL M$FWCG         ENTRY(1) CONV(1,14,32773) ALTRET;
 6292      DCL M$ATTACH       ENTRY(1) CONV(1,2,32774) ALTRET;
 6293      DCL M$DETACH       ENTRY(1) CONV(1,1,32775) ALTRET;

