VERSION E05

PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:1    
        1        1        /*M*     KPM$MAIN  Piglet driver  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*F*     NAME:          KPM$MAIN
        8        8                 PURPOSE:       This is the main entry point for the PIGETTE
        9        9                                processor, it initializes, process commands,
       10       10                                and terminates.
       11       11                 DESCRIPTION:   KPM$MAIN is the main entry point for PIGETTE.
       12       12                                It starts by initializing some global
       13       13                                variables, and calling various library
       14       14                                services with initialization parameters.
       15       15
       16       16                                After initialization, this module goes into
       17       17                                a loop that calls KPP$PARSE to fetch and
       18       18                                execute commands.  The process stops when a
       19       19                                global flag (KP_IN_GOOD_GRACE) is made false.
       20       20
       21       21                                The last phase is cleanup:  DCBs are closed
       22       22                                and PIGETTE signs off.
       23       23        */
       24       24        KPM$MAIN : PROC MAIN;
       25       25        /**/
       26       26        /*  Include files  */
       27       27        /**/
       28       28        %INCLUDE XU_MACRO_C;                    /* XUR MACROS                         */
       29     3134        %INCLUDE B$JIT;
       30     3424        %INCLUDE KP_DATA_R;
       31     4676        %INCLUDE XUR_ENTRY;
       32     4708        %INCLUDE XUE_MACRO_C;
       33     5452        /**/
       34     5453        /* Entry definitions    */
       35     5454        /**/
       36     5455        %KP_ENTRIES;
       37     5561        %XUE_ENTRIES;
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:2    
       38     5585        /**/
       39     5586        /*  Local goodies  */
       40     5587        /**/
       41     5588    1   DCL 1 ERRMSG_FID STATIC,                /*   File that has error msgs         */
       42     5589    1         2 COUNT UBIN BYTE UNAL INIT( 31 ),
       43     5590    1         2 NAME CHAR(31) UNAL INIT( ':ERRMSG.:SYS' );
       44     5591    1   DCL TRUE BIT(1) CONSTANT INIT( '1'B );
       45     5592    1   DCL FALSE BIT(1) CONSTANT INIT( '0'B );
       46     5593        /**/
       47     5594        /* External declarations     */
       48     5595        /**/
       49     5596    1   DCL B$JIT$ PTR SYMREF;
       50     5597        /**/
       51     5598        /* Useful fpts and the like  */
       52     5599        /**/
       53     5600        %FPT_ERR;
       54     5615        %FPT_INT      ( FPTN = FPT_INT,
       55     5616                        UENTRY = KPB$BREAK );
       56     5630        %XUR_INIT (NAME=XUR_INIT,
       57     5631                   PREPROCESS=YES,              /* Use the command pre-processor      */
       58     5632                   SYNTAX=YES,
       59     5633                   STCLASS=CONSTANT);
       60     5732        %FPT_PRIV ( FPTN = SET_MAXMEM ,PRIV = %PR_MAXMEM#);
       61     5747        %EJECT;
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:3    
       62     5748        /**/
       63     5749        /*  Open up all the dcb's    */
       64     5750        /**/
       65     5751    1           CALL KPI$IO_SVC( %KP_IO_OPEN# );
       66     5752        /**/
       67     5753        /*  Initialize various library routines.  */
       68     5754        /**/
       69     5755    1           CALL XUR$SETERRMSG( ERRMSG_FID ) ALTRET( GOOF_UP );
       70     5756    1           CALL XUR$INIT (XUR_INIT) ALTRET (GOOF_UP);
       71     5757    1           CALL M$INT ( FPT_INT );
       72     5758        /**/
       73     5759        /*  Turn on MAXMEM in case user needs vast memory to BUILD.  */
       74     5760        /**/
       75     5761    1           CALL M$SPRIV ( SET_MAXMEM );
       76     5762        /**/
       77     5763        /*  Use M$MONINFO to find maximum allowable FEP number.  This also fills      */
       78     5764        /*  up various fields that may be used later.                                 */
       79     5765        /**/
       80     5766    1           CALL M$MONINFO (FPT_MONINFO);
       81     5767    1           MAX_FEP_NO = VLR_MONINFO.NUM_NODES;
       82     5768        /**/
       83     5769        /*  Greet the user.  */
       84     5770        /**/
       85     5771    1           CALL KPT$TERM_MSG( %T$GREETING );
       86     5772        /**/
       87     5773        /*  Create default input and output parameters.  Note that TRACK and          */
       88     5774        /*  SECTOR outputs are flagged with -1.  This allows us to detect the         */
       89     5775        /*  user's default and CARRY ALONG THE INPUT.                                 */
       90     5776        /**/
       91     5777    1           CALL KPD$DISK_TYPE (IN_DEFAULTS,%DT_RFEP#);
       92     5778    1           CALL KPD$DISK_TYPE (OUT_DEFAULTS,%DT_RFEP#);
       93     5779    1           OUT_DEFAULTS.TRACK_LO = -1;
       94     5780    1           OUT_DEFAULTS.SECTOR_LO = -1;
       95     5781    1           OUT_DEFAULTS.SIDE_LO = -1;
       96     5782        /**/
       97     5783        /*  Loop, processing commands.  */
       98     5784        /**/
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:4    
       99     5785    1           KP_INITIALIZING = FALSE;
      100     5786    2           DO WHILE( KP_IN_GOOD_GRACE = TRUE );
      101     5787    2              CALL KPP$PARSE;
      102     5788    2              END;
      103     5789        %EJECT;
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:5    
      104     5790        /**/
      105     5791        /*  Release our FPRG if there is one.  */
      106     5792        /**/
      107     5793    1           IF KP_FEP_NO > 0 THEN
      108     5794    1                CALL KPX$CLOSE (KP_FEP_NO,-1);
      109     5795        /**/
      110     5796        /*  Normal termination of PIGETTE.  */
      111     5797        /**/
      112     5798    1   END_IT: ;
      113     5799    1           CALL KPT$TERM_MSG( %T$EXITING );
      114     5800    1           CALL KPI$IO_SVC( %KP_IO_CLOSE# );
      115     5801    1           CALL M$EXIT (KP_EXIT);
      116     5802        /**/
      117     5803    1   GOOF_UP:                                /* If you get here, you blew it       */
      118     5804    1           CALL KPI$IO_SVC( %KP_IO_CLOSE# );
      119     5805    1           CALL M$ERR( FPT_ERR );
      120     5806        /**/
      121     5807    1   END KPM$MAIN;

PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:6    
--  Include file information  --

   XUE_MACRO_C.:E05TOU  is referenced.
   XUR_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPM$MAIN.

   Procedure KPM$MAIN requires 80 words for executable code.
   Procedure KPM$MAIN requires 4 words of local(AUTO) storage.

    No errors detected in file KPM$MAIN.:E05TSI    .

PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:7    

 Object Unit name= KPM$MAIN                                   File name= KPM$MAIN.:E05TOU
 UTS= JUL 30 '97 01:20:25.80 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    22     26  KPM$MAIN
    2  RoData even  UTS     42     52  KPM$MAIN
    3   Proc  even  none    80    120  KPM$MAIN
    4  RoData even  none    15     17  KPM$MAIN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Main       0  KPM$MAIN
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:8    

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          Async      0 KPB$BREAK
 yes     yes           Std       2 XTX$ADAPT
         yes           Std       1 KPT$TERM_MSG
         yes           Std       0 KPP$PARSE
 yes     yes           Std       1 KPI$IO_SVC
 yes     yes           Std       1 XUR$SETERRMSG
         yes           Std       2 KPD$DISK_TYPE
 yes     yes           Std       2 KPX$CLOSE
 yes     yes           Std       3 XUR$INIT
                       nStd      0 X66_MAUTO
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_MARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  KP_INBUF                              KP_RU_OUTBUF
     KP_INITIALIZING                       KP_FEP_NO                             KP_IN_GOOD_GRACE
     KP_RU_KEY                             KP_EXIT                               MAX_FEP_NO
     IN_DEFAULTS                           OUT_DEFAULTS                     r    FPT_MONINFO
     VLR_MONINFO                           B$JIT$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:9    


        1        1        /*M*     KPM$MAIN  Piglet driver  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*F*     NAME:          KPM$MAIN
        8        8                 PURPOSE:       This is the main entry point for the PIGETTE
        9        9                                processor, it initializes, process commands,
       10       10                                and terminates.
       11       11                 DESCRIPTION:   KPM$MAIN is the main entry point for PIGETTE.
       12       12                                It starts by initializing some global
       13       13                                variables, and calling various library
       14       14                                services with initialization parameters.
       15       15
       16       16                                After initialization, this module goes into
       17       17                                a loop that calls KPP$PARSE to fetch and
       18       18                                execute commands.  The process stops when a
       19       19                                global flag (KP_IN_GOOD_GRACE) is made false.
       20       20
       21       21                                The last phase is cleanup:  DCBs are closed
       22       22                                and PIGETTE signs off.
       23       23        */
       24       24        KPM$MAIN : PROC MAIN;

     24  3 000000   000000 700200 xent  KPM$MAIN     TSX0  ! X66_MAUTO
         3 000001   000004 000000                    ZERO    4,0

       25       25        /**/
       26       26        /*  Include files  */
       27       27        /**/
       28       28        %INCLUDE XU_MACRO_C;                    /* XUR MACROS                         */
       29     3134        %INCLUDE B$JIT;
       30     3424        %INCLUDE KP_DATA_R;
       31     4676        %INCLUDE XUR_ENTRY;
       32     4708        %INCLUDE XUE_MACRO_C;
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:10   
       33     5452        /**/
       34     5453        /* Entry definitions    */
       35     5454        /**/
       36     5455        %KP_ENTRIES;
       37     5561        %XUE_ENTRIES;
       38     5585        /**/
       39     5586        /*  Local goodies  */
       40     5587        /**/
       41     5588    1   DCL 1 ERRMSG_FID STATIC,                /*   File that has error msgs         */
       42     5589    1         2 COUNT UBIN BYTE UNAL INIT( 31 ),
       43     5590    1         2 NAME CHAR(31) UNAL INIT( ':ERRMSG.:SYS' );
       44     5591    1   DCL TRUE BIT(1) CONSTANT INIT( '1'B );
       45     5592    1   DCL FALSE BIT(1) CONSTANT INIT( '0'B );
       46     5593        /**/
       47     5594        /* External declarations     */
       48     5595        /**/
       49     5596    1   DCL B$JIT$ PTR SYMREF;
       50     5597        /**/
       51     5598        /* Useful fpts and the like  */
       52     5599        /**/
       53     5600        %FPT_ERR;
       54     5615        %FPT_INT      ( FPTN = FPT_INT,
       55     5616                        UENTRY = KPB$BREAK );
       56     5630        %XUR_INIT (NAME=XUR_INIT,
       57     5631                   PREPROCESS=YES,              /* Use the command pre-processor      */
       58     5632                   SYNTAX=YES,
       59     5633                   STCLASS=CONSTANT);
       60     5732        %FPT_PRIV ( FPTN = SET_MAXMEM ,PRIV = %PR_MAXMEM#);
       61     5747        %EJECT;
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:11   
       62     5748        /**/
       63     5749        /*  Open up all the dcb's    */
       64     5750        /**/
       65     5751    1           CALL KPI$IO_SVC( %KP_IO_OPEN# );

   5751  3 000002   000000 630400 4                  EPPR0   0
         3 000003   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000004   000000 701000 xent               TSX1    KPI$IO_SVC
         3 000005   000000 011000                    NOP     0

       66     5752        /**/
       67     5753        /*  Initialize various library routines.  */
       68     5754        /**/
       69     5755    1           CALL XUR$SETERRMSG( ERRMSG_FID ) ALTRET( GOOF_UP );

   5755  3 000006   000001 630400 4                  EPPR0   1
         3 000007   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000010   000000 701000 xent               TSX1    XUR$SETERRMSG
         3 000011   000110 702000 3                  TSX2    GOOF_UP

       70     5756    1           CALL XUR$INIT (XUR_INIT) ALTRET (GOOF_UP);

   5756  3 000012   000002 630400 4                  EPPR0   2
         3 000013   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000014   000000 701000 xent               TSX1    XUR$INIT
         3 000015   000110 702000 3                  TSX2    GOOF_UP

       71     5757    1           CALL M$INT ( FPT_INT );

   5757  3 000016   000016 630400 1                  EPPR0   FPT_INT
         3 000017   010002 713400                    CLIMB   4098
         3 000020   400000 401760                    pmme    nvectors=1

       72     5758        /**/
       73     5759        /*  Turn on MAXMEM in case user needs vast memory to BUILD.  */
       74     5760        /**/
       75     5761    1           CALL M$SPRIV ( SET_MAXMEM );
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:12   

   5761  3 000021   000022 630400 1                  EPPR0   SET_MAXMEM
         3 000022   020012 713400                    CLIMB   8202
         3 000023   400000 401760                    pmme    nvectors=1

       76     5762        /**/
       77     5763        /*  Use M$MONINFO to find maximum allowable FEP number.  This also fills      */
       78     5764        /*  up various fields that may be used later.                                 */
       79     5765        /**/
       80     5766    1           CALL M$MONINFO (FPT_MONINFO);

   5766  3 000024   000000 630400 xsym               EPPR0   FPT_MONINFO
         3 000025   020023 713400                    CLIMB   8211
         3 000026   402400 401760                    pmme    nvectors=6

       81     5767    1           MAX_FEP_NO = VLR_MONINFO.NUM_NODES;

   5767  3 000027   000014 235000 xsym               LDA     VLR_MONINFO+12
         3 000030   000000 755000 xsym               STA     MAX_FEP_NO

       82     5768        /**/
       83     5769        /*  Greet the user.  */
       84     5770        /**/
       85     5771    1           CALL KPT$TERM_MSG( %T$GREETING );

   5771  3 000031   000004 630400 4                  EPPR0   4
         3 000032   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000033   000000 701000 xent               TSX1    KPT$TERM_MSG
         3 000034   000000 011000                    NOP     0

       86     5772        /**/
       87     5773        /*  Create default input and output parameters.  Note that TRACK and          */
       88     5774        /*  SECTOR outputs are flagged with -1.  This allows us to detect the         */
       89     5775        /*  user's default and CARRY ALONG THE INPUT.                                 */
       90     5776        /**/
       91     5777    1           CALL KPD$DISK_TYPE (IN_DEFAULTS,%DT_RFEP#);

PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:13   
   5777  3 000035   000005 630400 4                  EPPR0   5
         3 000036   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000037   000000 701000 xent               TSX1    KPD$DISK_TYPE
         3 000040   000000 011000                    NOP     0

       92     5778    1           CALL KPD$DISK_TYPE (OUT_DEFAULTS,%DT_RFEP#);

   5778  3 000041   000007 630400 4                  EPPR0   7
         3 000042   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000043   000000 701000 xent               TSX1    KPD$DISK_TYPE
         3 000044   000000 011000                    NOP     0

       93     5779    1           OUT_DEFAULTS.TRACK_LO = -1;

   5779  3 000045   000001 335007                    LCA     1,DL
         3 000046   000000 755000 xsym               STA     OUT_DEFAULTS

       94     5780    1           OUT_DEFAULTS.SECTOR_LO = -1;

   5780  3 000047   000002 755000 xsym               STA     OUT_DEFAULTS+2

       95     5781    1           OUT_DEFAULTS.SIDE_LO = -1;

   5781  3 000050   000004 755000 xsym               STA     OUT_DEFAULTS+4

       96     5782        /**/
       97     5783        /*  Loop, processing commands.  */
       98     5784        /**/
       99     5785    1           KP_INITIALIZING = FALSE;

   5785  3 000051   000001 236000 2                  LDQ     FALSE
         3 000052   400000 376003                    ANQ     -131072,DU
         3 000053   000000 756000 xsym               STQ     KP_INITIALIZING

      100     5786    2           DO WHILE( KP_IN_GOOD_GRACE = TRUE );

   5786  3 000054   000000 236000 xsym               LDQ     KP_IN_GOOD_GRACE
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:14   
         3 000055   000000 676000 2                  ERQ     TRUE
         3 000056   400000 376003                    ANQ     -131072,DU
         3 000057   000067 601000 3                  TNZ     s:5793

      101     5787    2              CALL KPP$PARSE;

   5787  3 000060   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000061   000000 701000 xent               TSX1    KPP$PARSE
         3 000062   000000 011000                    NOP     0

      102     5788    2              END;

   5788  3 000063   000000 236000 xsym               LDQ     KP_IN_GOOD_GRACE
         3 000064   000000 676000 2                  ERQ     TRUE
         3 000065   400000 376003                    ANQ     -131072,DU
         3 000066   000060 600000 3                  TZE     s:5787

      103     5789        %EJECT;
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:15   
      104     5790        /**/
      105     5791        /*  Release our FPRG if there is one.  */
      106     5792        /**/
      107     5793    1           IF KP_FEP_NO > 0 THEN

   5793  3 000067   000000 235000 xsym               LDA     KP_FEP_NO
         3 000070   000075 604400 3                  TMOZ    END_IT

      108     5794    1                CALL KPX$CLOSE (KP_FEP_NO,-1);

   5794  3 000071   000011 630400 4                  EPPR0   9
         3 000072   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000073   000000 701000 xent               TSX1    KPX$CLOSE
         3 000074   000000 011000                    NOP     0

   5793  3 000075                       END_IT       null
      109     5795        /**/
      110     5796        /*  Normal termination of PIGETTE.  */
      111     5797        /**/
      112     5798    1   END_IT: ;
      113     5799    1           CALL KPT$TERM_MSG( %T$EXITING );

   5799  3 000075   000014 630400 4                  EPPR0   12
         3 000076   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000077   000000 701000 xent               TSX1    KPT$TERM_MSG
         3 000100   000000 011000                    NOP     0

      114     5800    1           CALL KPI$IO_SVC( %KP_IO_CLOSE# );

   5800  3 000101   000016 630400 4                  EPPR0   14
         3 000102   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000103   000000 701000 xent               TSX1    KPI$IO_SVC
         3 000104   000000 011000                    NOP     0

      115     5801    1           CALL M$EXIT (KP_EXIT);

   5801  3 000105   000000 630400 xsym               EPPR0   KP_EXIT
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:16   
         3 000106   000001 713400                    CLIMB   exit
         3 000107   400400 401760                    pmme    nvectors=2

      116     5802        /**/
      117     5803    1   GOOF_UP:                                /* If you get here, you blew it       */
      118     5804    1           CALL KPI$IO_SVC( %KP_IO_CLOSE# );

   5804  3 000110   000016 630400 4     GOOF_UP      EPPR0   14
         3 000111   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000112   000000 701000 xent               TSX1    KPI$IO_SVC
         3 000113   000000 011000                    NOP     0

      119     5805    1           CALL M$ERR( FPT_ERR );

   5805  3 000114   000010 630400 1                  EPPR0   FPT_ERR
         3 000115   000002 713400                    CLIMB   err
         3 000116   400400 401760                    pmme    nvectors=2

      120     5806        /**/
      121     5807    1   END KPM$MAIN;

   5807  3 000117   000000 702200 xent               TSX2  ! X66_MARET

PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:17   
--  Include file information  --

   XUE_MACRO_C.:E05TOU  is referenced.
   XUR_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KP_MACRO_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   KP_PERR_C.:E05TOU  is referenced.
   KP_SUBS.:E05TOU  is referenced.
   KP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure KPM$MAIN.
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:18   

 **** Variables and constants ****

  ****  Section 001  Data  KPM$MAIN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(288)   r     1 ERRMSG_FID                10-0-0/d STRC(216)   r     1 FPT_ERR
    16-0-0/d STRC(144)   r     1 FPT_INT                   22-0-0/d STRC(144)   r     1 SET_MAXMEM

  ****  Section 002 RoData KPM$MAIN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/b BIT         r     1 FALSE                      0-0-0/b BIT         r     1 TRUE
     2-0-0/d STRC(1404)  r     1 XUR_INIT

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/d STRC(432)   r     1 FPT_MONINFO
     0-0-0/w STRC(468)   r     1 IN_DEFAULTS                0-0-0/d STRC(216)   r     1 KP_EXIT
     0-0-0/w SBIN        r     1 KP_FEP_NO                  0-0-0/b BIT         r     1 KP_INITIALIZING
     0-0-0/b BIT         r     1 KP_IN_GOOD_GRACE           0-0-0/w UBIN        r     1 MAX_FEP_NO
     0-0-0/w STRC(468)   r     1 OUT_DEFAULTS               0-0-0/d STRC(540)   r     1 VLR_MONINFO


   Procedure KPM$MAIN requires 80 words for executable code.
   Procedure KPM$MAIN requires 4 words of local(AUTO) storage.

    No errors detected in file KPM$MAIN.:E05TSI    .
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:19   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:20   
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
      3242**DCL      3242--REDEF
B$JIT.ERR.MID
      3149**DCL      3149--REDEF
B$JIT.JRESPEAK
      3310**DCL      3311--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      3419**DCL      3419--REDEF    3420--REDEF
B$JIT.PNR
      3323**DCL      3323--REDEF
B$JIT.TSLINE
      3417**DCL      3418--REDEF
B$JIT$
      5596**DCL      3143--IMP-PTR
ERRMSG_FID
      5588**DCL      5755<>CALL
FALSE
      5592**DCL      5785>>ASSIGN
FPT_ERR
      5611**DCL      5805<>CALL
FPT_ERR.V
      5611**DCL      5611--DCLINIT
FPT_ERR.V.STEPCC#
      5612**DCL      5612--REDEF
FPT_INT
      5627**DCL      5757<>CALL
FPT_INT.V
      5627**DCL      5627--DCLINIT
FPT_MONINFO
      4635**DCL      5766<>CALL
GOOF_UP
      5804**LABEL    5755--CALLALT  5756--CALLALT
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:21   
IN_DEFAULTS
      4365**DCL      5777<>CALL
KPB$BREAK
      5457**DCL-ENT  5627--DCLINIT
KPD$DISK_TYPE
      5472**DCL-ENT  5777--CALL     5778--CALL
KPI$IO_SVC
      5490**DCL-ENT  5751--CALL     5800--CALL     5804--CALL
KPP$PARSE
      5496**DCL-ENT  5787--CALL
KPT$TERM_MSG
      5502**DCL-ENT  5771--CALL     5799--CALL
KPX$CLOSE
      5524**DCL-ENT  5794--CALL
KP_EXIT
      4346**DCL      5801<>CALL
KP_EXIT.V.STEPCC#
      4347**DCL      4347--REDEF
KP_FEP_NO
      4275**DCL      5793>>IF       5794<>CALL
KP_INBUF
      4269**DCL      4269--REDEF
KP_INITIALIZING
      4275**DCL      5785<<ASSIGN
KP_IN_GOOD_GRACE
      4276**DCL      5786>>DOWHILE
KP_RU_KEY
      4277**DCL      4278--REDEF
KP_RU_KEY.NODE
      4277**DCL      4277--REDEF
KP_RU_KEY.PAGE
      4278**DCL      4278--REDEF
KP_RU_OUTBUF
      4271**DCL      4271--REDEF
M$ERR
      4047**DCL-ENT  5805--CALL
PL6.E3A0      #001=KPM$MAIN File=KPM$MAIN.:E05TSI                                WED 07/30/97 01:20 Page:22   
M$EXIT
      4047**DCL-ENT  5801--CALL
M$INT
      4090**DCL-ENT  5757--CALL
M$MONINFO
      4103**DCL-ENT  5766--CALL
M$SPRIV
      4094**DCL-ENT  5761--CALL
MAX_FEP_NO
      4350**DCL      5767<<ASSIGN
OUT_DEFAULTS
      4398**DCL      5778<>CALL
OUT_DEFAULTS.SECTOR_LO
      4401**DCL      5780<<ASSIGN
OUT_DEFAULTS.SIDE_LO
      4403**DCL      5781<<ASSIGN
OUT_DEFAULTS.TRACK_LO
      4399**DCL      5779<<ASSIGN
SET_MAXMEM
      5743**DCL      5761<>CALL
SET_MAXMEM.V
      5743**DCL      5743--DCLINIT
TRUE
      5591**DCL      5786>>DOWHILE
VLR_MONINFO.NUM_NODES
      4673**DCL      5767>>ASSIGN
XTX$ADAPT
      5650**DCL-ENT  5729--DCLINIT
XUR$INIT
      4688**DCL-ENT  5756--CALL
XUR$SETERRMSG
      4693**DCL-ENT  5755--CALL
XUR_INIT
      5655**DCL      5756<>CALL
XUR_INIT.WORKR_
      5669**DCL      5670--REDEF
