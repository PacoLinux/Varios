

14:52 JUL 28 '97 KQM_MAC_C.:E05SI                                          1    
    1      /*M* KQM_MAC_C Macros for COMGROUP QUEUE MM */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DMC,PLM=4,IND=0,SDI=2,CTI=0,ENU=0,AND,DCI=4,CSU=2,ECU=4,THI=0,DTI=2 */
    8      /**/
    9      /********************************************************************
   10      *********************************************************************/
   11      /*D* NAME:         KQ_ACB
   12           PURPOSE:      To define the comgroup account block
   13           DESCRIPTION:  Each file management account posessing at least
   14                         one open comgroup has a comgroup account block
   15                         active.  This block is used for account-wide
   16                         information (such as memory limits).  The blocks
   17                         are allocated from the comgroup context area.
   18      */
   19      %MACRO KQ_ACB (FPTN=KQ_ACB,STCLASS=STATIC);
   20
   21       %LSET LISTDIR='0'B;
   22       %LSET LISTEXP='1'B;
   23       %LSET LISTCOM='0'B;
   24       %LSET LISTSUB='1'B;
   25       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   26       %IF (SUBSTR(STR,0,6)='STATIC') OR
   27       (SUBSTR(STR,0,8)='CONSTANT') OR
   28       (SUBSTR(STR,0,3)='EXT');
   29       %LSET INIT=CHARTEXT('INIT');
   30       %ELSE;
   31       %LSET INIT=CHARTEXT('/*');
   32       %ENDIF;
   33
   34      DCL 1 FPTN STCLASS DALIGNED,
   35            2 FLNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   36                              /* FLNK$    : fwd link in ACB chain */
   37            2 BLNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
14:52 JUL 28 '97 KQM_MAC_C.:E05SI                                          2    
   38                              /* BLNK$    : back link in ACB chain */
   39            2 CURPG SBIN WORD %INIT(0)%CHARTEXT('/**/'),
   40                              /* CURPG    : current count of pages in
   41                                            comgroups open in this acct. */
   42            2 CURPGLIM SBIN WORD %INIT(-1)%CHARTEXT('/**/'),
   43                              /* CURPGLIM : PIG-set limit for CURPG */
   44            2 USECNT UBIN HALF HALIGNED %INIT(1)%CHARTEXT('/**/'),
   45                              /* USECNT   : number of CGs in this account. */
   46            2 SETX UBIN HALF HALIGNED %INIT(0)%CHARTEXT('/**/'),
   47                              /* SETX     : SETX of account's packset. */
   48            2 ACCT CHAR(8) CALIGNED %INIT(' ')%CHARTEXT('/**/');
   49                              /* ACCT     : account. */
   50      %MEND;
   51      /********************************************************************
   52      *********************************************************************/
   53      /*D* NAME:         KQ_BAP
   54           PURPOSE:      To define the header for a memory block allocation
   55                         page.
   56           DESCRIPTION:  Each memory page used for allocation & deallocation
   57                         of core blocks has a header residing in word zero
   58                         of the page.  This structure defines the header. */
   59      %MACRO KQ_BAP (FPTN=KQ_BAP,STCLASS=STATIC);
   60
   61       %LSET LISTDIR='0'B;
   62       %LSET LISTEXP='1'B;
   63       %LSET LISTCOM='0'B;
   64       %LSET LISTSUB='1'B;
   65       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   66       %IF (SUBSTR(STR,0,6)='STATIC') OR
   67       (SUBSTR(STR,0,8)='CONSTANT') OR
   68       (SUBSTR(STR,0,3)='EXT');
   69       %LSET INIT=CHARTEXT('INIT');
   70       %ELSE;
   71       %LSET INIT=CHARTEXT('/*');
   72       %ENDIF;
   73
   74      DCL 1 FPTN STCLASS DALIGNED,
14:52 JUL 28 '97 KQM_MAC_C.:E05SI                                          3    
   75            %KQ_GRAN (FPTN=HDR,LVL=2,STCLASS=STCLASS,PTYP=%KQ_PTYP_BAP,LAST=",");
   76                              /* HDR      : granule header */
   77            2 FLNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   78                              /* FLNK$    : flink in page chain */
   79            2 BLNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   80                              /* BLNK$    : blink in page chain */
   81            2 FREESIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
   82                              /* FREESIZE : # of free words */
   83            2 ORHEAD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   84                              /* ORHEAD$  : head of address-ordered free
   85                                            blocks. */
   86            2 ORTAIL$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   87                              /* ORTAIL$  : tail of same; must follow head. */
   88            2 JUHEAD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   89                              /* JUHEAD$  : head of jumbled free blocks. */
   90            2 JUTAIL$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   91                              /* JUTAIL$  : tail of same; must follow head. */
   92            2 CG$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/');
   93                              /* CG$      : pointer to context blk of owner
   94                                            CG. */
   95      %MEND;
   96      /********************************************************************
   97      *********************************************************************/
   98      /*D* NAME:         KQ_DSB
   99           PURPOSE:      To define a comgroup descriptor segment block
  100           DESCRIPTION:  Each comgroup has a set of descriptors which frame
  101                         its in-core data pages.  These live in a DSB, which
  102                         is allocated from special pages by KQM$MM. */
  103      %MACRO KQ_DSB (FPTN=KQ_DSB,STCLASS=STATIC);
  104
  105       %LSET LISTDIR='0'B;
  106       %LSET LISTEXP='1'B;
  107       %LSET LISTCOM='0'B;
  108       %LSET LISTSUB='1'B;
  109       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  110       %IF (SUBSTR(STR,0,6)='STATIC') OR
  111       (SUBSTR(STR,0,8)='CONSTANT') OR
14:52 JUL 28 '97 KQM_MAC_C.:E05SI                                          4    
  112       (SUBSTR(STR,0,3)='EXT');
  113       %LSET INIT=CHARTEXT('INIT');
  114       %ELSE;
  115       %LSET INIT=CHARTEXT('/*');
  116       %ENDIF;
  117
  118      DCL 1 FPTN STCLASS DALIGNED,
  119                              /*!!! ASR must be word 0 - see KQX$LDASR */
  120            2 ASR,
  121                              /* ASR      : value to load into the Argument
  122                                            Stack Register; frames the array
  123                                            of descriptors. */
  124              3 BOUND UBIN(20) UNAL %INIT(0)%CHARTEXT('/**/'),
  125              3 FLG BIT(9) UNAL %INIT('110100011'B)%CHARTEXT('/**/'),
  126              3 W UBIN(3) UNAL %INIT(3)%CHARTEXT('/**/'),
  127              3 T UBIN(4) UNAL %INIT(1)%CHARTEXT('/**/'),
  128              3 BASE UBIN(36) UNAL %INIT(0)%CHARTEXT('/**/'),
  129
  130            2 CRYPT REDEF ASR,
  131                              /* CRYPT    : context used when the
  132                                            DSB is in the crypt. */
  133              3 LNK$ PTR,
  134                              /* LNK$     : link to next DSB in the
  135                                            crypt. */
  136              3 * UBIN,
  137
  138            2 DESC (0:KQM_MDPC#),
  139                              /* DESC     : array of descriptors, each framing
  140                                            from 0 to KQM_MPPD# pages. */
  141              3 BOUND UBIN(20) UNAL %INIT(%((%CGQ_CHUNK_SIZE*4096)-1)*0)%CHARTEXT('/**/'),
  142              3 FLG BIT(9) UNAL %INIT('110000010'B*0)%CHARTEXT('/**/'),
  143              3 FLGR REDEF FLG,
  144                4 * BIT(8) UNAL,
  145                4 PRESENT BIT(1) UNAL,
  146              3 W UBIN(3) UNAL %INIT(3*0)%CHARTEXT('/**/'),
  147              3 T UBIN(4) UNAL %INIT(0*0)%CHARTEXT('/**/'),
  148              3 BASE UBIN(36) UNAL %INIT(0*0)%CHARTEXT('/**/');
14:52 JUL 28 '97 KQM_MAC_C.:E05SI                                          5    
  149      %MEND;
  150      /********************************************************************
  151      *********************************************************************/
  152      /*D* NAME:         KQ_FP
  153           PURPOSE:      To define the header for a spare memory page
  154           DESCRIPTION:  Each memory page that is released onto the free
  155                         chain has this structure.
  156      */
  157      %MACRO KQ_FP (FPTN=KQ_FP,STCLASS=STATIC);
  158
  159       %LSET LISTDIR='0'B;
  160       %LSET LISTEXP='1'B;
  161       %LSET LISTCOM='0'B;
  162       %LSET LISTSUB='1'B;
  163       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  164       %IF (SUBSTR(STR,0,6)='STATIC') OR
  165       (SUBSTR(STR,0,8)='CONSTANT') OR
  166       (SUBSTR(STR,0,3)='EXT');
  167       %LSET INIT=CHARTEXT('INIT');
  168       %ELSE;
  169       %LSET INIT=CHARTEXT('/*');
  170       %ENDIF;
  171
  172      DCL 1 FPTN STCLASS DALIGNED,
  173            %KQ_GRAN (FPTN=HDR,LVL=2,STCLASS=STCLASS,LAST=",");
  174                              /* HDR      : granule header */
  175            2 LNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/');
  176                              /* LNK$     : link on free chain */
  177      %MEND;
  178      /********************************************************************
  179      *********************************************************************/
  180      /*D* NAME:         KQ_FB
  181           PURPOSE:      To define the structure of a free block within
  182                         a block allocation page.
  183           DESCRIPTION:  The free space within a block allocation page
  184                         consists of a linklist of these freeblocks. */
  185      %MACRO KQ_FB (FPTN=KQ_FB,STCLASS=STATIC);
14:52 JUL 28 '97 KQM_MAC_C.:E05SI                                          6    
  186
  187       %LSET LISTDIR='0'B;
  188       %LSET LISTEXP='1'B;
  189       %LSET LISTCOM='0'B;
  190       %LSET LISTSUB='1'B;
  191       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  192       %IF (SUBSTR(STR,0,6)='STATIC') OR
  193       (SUBSTR(STR,0,8)='CONSTANT') OR
  194       (SUBSTR(STR,0,3)='EXT');
  195       %LSET INIT=CHARTEXT('INIT');
  196       %ELSE;
  197       %LSET INIT=CHARTEXT('/*');
  198       %ENDIF;
  199
  200      DCL 1 FPTN STCLASS DALIGNED,
  201            2 FLNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  202                              /* FLNK$    : flink in free chain. */
  203            2 BLNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  204                              /* BLNK$    : blink in free chain. */
  205            2 SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/');
  206                              /* SIZE     : size in words of this block,
  207                                            including the header KQ_FB. */
  208      %MEND;
  209      /********************************************************************
  210      *********************************************************************/
  211      /*D* NAME:         KQ_MMSD
  212           PURPOSE:      To provide a structure for the static data
  213                         required for comgroup memory management.
  214           DESCRIPTION:  Contains various cells.
  215      */
  216      %MACRO KQ_MMSD (FPTN=KQ_MMSD,STCLASS=STATIC);
  217
  218       %LSET LISTDIR='0'B;
  219       %LSET LISTEXP='1'B;
  220       %LSET LISTCOM='0'B;
  221       %LSET LISTSUB='1'B;
  222       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
14:52 JUL 28 '97 KQM_MAC_C.:E05SI                                          7    
  223       %IF (SUBSTR(STR,0,6)='STATIC') OR
  224       (SUBSTR(STR,0,8)='CONSTANT') OR
  225       (SUBSTR(STR,0,3)='EXT');
  226       %LSET INIT=CHARTEXT('INIT');
  227       %ELSE;
  228       %LSET INIT=CHARTEXT('/*');
  229       %ENDIF;
  230
  231      DCL 1 FPTN STCLASS DALIGNED,
  232            2 ACBHEAD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  233                              /* ACBHEAD$ : head of chain of account blocks
  234                                            (KQ$ACB) kept in the comgroup
  235                                            context block area */
  236            2 CGHEAD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  237                              /* CGHEAD$  : head of chain of active comgroup
  238                                            context blocks. */
  239            2 CCXT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  240                              /* CCXT$    : pointer to fake comgroup context
  241                                            block for the fake comgroup from
  242                                            which real context blocks are
  243                                            allocated. */
  244            2 DCXT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  245                              /* DCXT$    : same thing but fake comgroup for
  246                                            allocating descriptor segment
  247                                            blocks. */
  248            2 CRYPT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  249                              /* CRYPT$   : head of chain of buried DSBs. */
  250            2 CRYPTCNT UBIN %INIT(0)%CHARTEXT('/**/'),
  251                              /* CRYPTCNT : count of above chain. */
  252            2 GATE BIT(72) ALIGNED %INIT('1'B)%CHARTEXT('/**/');
  253                              /* GATE     : lock for some of these items. */
  254      %MEND;
  255      /********************************************************************
  256      *********************************************************************/
  257      /*D* NAME:         KQ_FCGP
  258           PURPOSE:      To find the next page of a comgroup
  259           CALL:         FINDCGPAGE (KQ$DSB,ASNUM,PGNUM,PTR$,PPNO) ALTRET(END)
14:52 JUL 28 '97 KQM_MAC_C.:E05SI                                          8    
  260           DESCRIPTION:  This macro generates an internal procedure which
  261                         is used to find the next page owned by a comgroup.
  262                         The comgroup is represented by a KQ_DSB block,
  263                         passed as KQ$DSB.  ASNUM and PGNUM are used by the
  264                         procedure, and must be set zero before the first
  265                         call for a given comgroup.  PTR$ is the comgroup-
  266                         relative pointer returned, and PPNO is the returned
  267                         physical page number.  The routine ALTRETs if the
  268                         comgroup owns no more pages.  Thus, the routine is
  269                         called successively until it ALTRETs, in order to
  270                         obtain all the comgroup's pages.
  271
  272                         The following files must be %INCLUDEd:
  273
  274                         B$MAP M_INFO_C KQ_SUBS_C B_SEGIDS_C
  275
  276                         The identifier B$CGPT$ must be defined and must
  277                         point to the comgroup page table, (name is changeable).
  278      */
  279      %MACRO KQ_FCGP (B$CGPT$=B$CGPT$, MON(YES='1'B,NO='0'B)='1'B);
  280      /**/
  281      FINDCGPAGE: PROC (KQ$DSB,ASNUM,PGNUM,PTR$,PPNO) ALTRET;
  282      /**/
  283      %KQ_DSB (FPTN=KQ$DSB,STCLASS="");
  284      DCL ASNUM UBIN;
  285      DCL PGNUM UBIN;
  286      DCL PTR$ PTR ALIGNED;
  287      DCL 1 PTR$R REDEF PTR$ ALIGNED,
  288            2 PG# UBIN(8) UNAL,
  289            2 GORGO UBIN(16) UNAL,
  290            2 SEGID UBIN(12) UNAL;
  291      DCL PPNO UBIN;
  292      %IF MON;
  293      %INCLUDE HF_DATA_R;
  294      %ELSE;
  295      DCL S1000_FLG BIT(1) ALIGNED SYMREF;
  296      %ENDIF;
14:52 JUL 28 '97 KQM_MAC_C.:E05SI                                          9    
  297      DCL B$HALF(0:0) UBIN HALF BASED HALIGNED;
  298      DCL B$IPHYMAP$ PTR SYMREF;
  299      /**/
  300      DCL K UBIN;
  301      /**/
  302      LOOP:;
  303          IF PGNUM >= %CGQ_CHUNK_SIZE THEN
  304            DO;
  305      LOOP1:
  306            ASNUM=ASNUM+1;
  307            PGNUM=0;
  308            END;
  309          IF ASNUM > KQM_MDPC# THEN ALTRETURN;
  310          IF NOT KQ$DSB.DESC.FLGR.PRESENT(ASNUM) THEN GOTO LOOP1;
  311          K=KQ$DSB.DESC.BASE(ASNUM)/4096;
  312          PPNO=B$CGPT$->B$MAP.RPN(K+PGNUM);
  313          IF B$CGPT$->B$MAP.CTRL(K+PGNUM) & '40'O /* CPU PRESENT */ THEN
  314            DO;
  315      %IF MON;
  316            IF HW_WSQ0PT THEN
  317            %ELSE;
  318            IF S1000_FLG THEN
  319            %ENDIF;
  320            PPNO=B$IPHYMAP$->B$HALF(PPNO);
  321            PTR$R.PG#=PGNUM;
  322            PTR$R.SEGID=BITBIN(%AS0SID)+ASNUM;
  323            PTR$R.GORGO=0;
  324            PGNUM=PGNUM+1;
  325            RETURN;
  326            END;
  327          PGNUM=PGNUM+1;
  328          GOTO LOOP;
  329      END FINDCGPAGE;
  330      %MEND;

