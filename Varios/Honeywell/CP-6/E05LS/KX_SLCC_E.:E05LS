

14:58 JUL 28 '97 KX_SLCC_E.:E05SI                                          1    
    1      /*M* KX_SLCC_E equates for KXS$SLCC */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DFC */
    8      /*  CCB offsets - in bytes */
    9      %EQU K$CCB_LNK = 0;
   10      %EQU K$CCB_DATA_ADR = 4;
   11      %EQU K$CCB_RANGE = 6;                   /* Original range                     */
   12      %EQU K$CCB_R_RANGE = 8;                 /* Remaining range                    */
   13      /* Frame offsets - in bytes */
   14      %EQU K$FRAME_ADR = 0;
   15      %EQU K$FRAME_CTL_SI = 1;
   16      %EQU K$FRAME_CTL_RPF = 2;
   17      /* System area offsets */
   18      %EQU KX_L2_T1S = KX_L2_T1S#/8;
   19      %EQU KX_L2_K = KX_L2_K#/8;
   20      %EQU KX_L2_N2 = KX_L2_N2#/8;
   21      %EQU KX_L2_ADR_CMND = KX_L2_ADR_CMND#/8;
   22      %EQU KX_L2_ADR_RESP = KX_L2_ADR_RESP#/8;
   23      %EQU KX_L2_P_CCB_LNK = KX_L2_P_CCB_LNK#/8;
   24      %EQU KX_L2_P_CCB_DATA_ADR = KX_L2_P_CCB_DATA_ADR#/8;
   25      %EQU KX_L2_P_CCB_RANGE = KX_L2_P_CCB_RANGE#/8;
   26      %EQU KX_L2_P_FRAME_ADR = KX_L2_P_FRAME_ADR#/8;
   27      %EQU KX_L2_P_FRAME_CTLSI = KX_L2_P_FRAME_CTLSI#/8;
   28      %EQU KX_L2_P_FRAME_CTLRPF = KX_L2_P_FRAME_CTLRPF#/8;
   29      %EQU KX_L2_P_FRAME_FRMR_CTL = KX_L2_P_FRAME_FRMR_CTL#/8;
   30      %EQU KX_L2_P_FRAME_FRMR_VS = KX_L2_P_FRAME_FRMR_VS#/8;
   31      %EQU KX_L2_P_FRAME_FRMR_CRVR = KX_L2_P_FRAME_FRMR_CRVR#/8;
   32      %EQU KX_L2_P_FRAME_FRMR_BITS = KX_L2_P_FRAME_FRMR_BITS#/8;
   33      %EQU KX_L2_FLG = KX_L2_FLG#/8;
   34      %EQU KX_L2_FLG_BLK@M = 128**-(KX_L2_FLG_BLK#&7);
   35      %EQU KX_L2_FLG_OK@M = 128**-(KX_L2_FLG_OK#&7);
   36      %EQU KX_L2_STATES = KX_L2_STATES#/8;
   37      %EQU KX_L2_SLCCSTT = KX_L2_SLCCSTT#/8;
14:58 JUL 28 '97 KX_SLCC_E.:E05SI                                          2    
   38      %EQU KX_L2_COMBUF = KX_L2_COMBUF#/8;
   39      %EQU KX_L2_COMBUF_DATAVL@M = 128**-(KX_L2_COMBUF_DATAVL#&7);
   40      %EQU KX_L2_COMBUF_FEPRDY@M = 128**-(KX_L2_COMBUF_FEPRDY#&7);
   41      %EQU KX_L2_COMBUF_FEPBSY@M = 128**-(KX_L2_COMBUF_FEPBSY#&7);
   42      %EQU KX_L2_COMBUF_FNC@M = 255**-(KX_L2_COMBUF_FNC#&7);
   43      %EQU KX_L2_XMTCCB_LOCK = KX_L2_XMTCCB_LOCK#/8;
   44      %EQU KX_L2_XMTCCB_TAIL = KX_L2_XMTCCB_TAIL#/8;
   45      %EQU KX_L2_XMTCCB_NEXT = KX_L2_XMTCCB_NEXT#/8;
   46      %EQU KX_CCB_LNK_FEP = KX_L2_P_CCB_LNK_FEP#/8-KX_L2_P_CCB#/8;
   47      %EQU KX_CCB_LNK_SLCC = KX_L2_P_CCB_LNK_SLCC#/8-KX_L2_P_CCB#/8;
   48      /* Frame level states */
   49      %EQU Y_ST_NULL# = 0*23;
   50      %EQU Y_ST_DISC# = 1*23;
   51      %EQU Y_ST_DISC_TO# = 2*23;
   52      %EQU Y_ST_DOWN# = 3*23;
   53      %EQU Y_ST_SETUP# = 4*23;
   54      %EQU Y_ST_SETUP_TO# = 5*23;
   55      %EQU Y_ST_NORMAL# = 6*23;
   56      %EQU Y_ST_RESET# = 7*23;
   57      %EQU Y_ST_RESET_TO# = 8*23;
   58      %EQU Y_ST_FRMR# = 9*23;
   59      %EQU Y_ST_TIMER_REC# = 10*23;
   60          EJECT     INVIS
   61      /* Frame level events */
   62      /* Correspond if possible to the actual incoming control field */
   63      %EQU Y_EV_RR_F# = 0;
   64      %EQU Y_EV_RR# = 1;
   65      %EQU Y_EV_UA_F# = 2;
   66      %EQU Y_EV_UA# = 3;
   67      %EQU Y_EV_RNR_F# = 4;
   68      %EQU Y_EV_RNR# = 5;
   69      %EQU Y_EV_FRMR_F# = 6;
   70      %EQU Y_EV_FRMR# = 7;
   71      %EQU Y_EV_REJ_F# = 8;
   72      %EQU Y_EV_REJ# = 9;
   73      %EQU Y_EV_ERR# = 10;          /* Any of several non_specific "bad" frames     */
   74      %EQU Y_EV_GARBAGE# = 11;
14:58 JUL 28 '97 KX_SLCC_E.:E05SI                                          3    
   75      %EQU Y_EV_DISC# = 12;
   76      %EQU Y_EV_I# = 13;
   77      %EQU Y_EV_SABM# = 14;
   78      %EQU Y_EV_DM# = 15;
   79      %EQU Y_EV_BAD_NS# = 16;
   80      %EQU Y_EV_TO# = 17;
   81      %EQU Y_EV_TO_N2# = 18;
   82      %EQU Y_EV_NOP# = 19;
   83      /* 20 THRU 22 AVAILABLE (23*11# = 253) */
   84          EJECT     INVIS
   85      /* Frame level event response operations */
   86      %EQU Y_OP_NULL# = 0*3;
   87      %EQU Y_OP_LOG# = 1*3;
   88      %EQU Y_OP_DISC# = 2*3;
   89      %EQU Y_OP_DISC_TO# = 3*3;
   90      %EQU Y_OP_DISC_R# = 4*3;
   91      %EQU Y_OP_DISC_L# = 5*3;
   92      %EQU Y_OP_DISC_LU# = 6*3;
   93      %EQU Y_OP_DISC_NV# = 7*3;
   94      %EQU Y_OP_DISC_UNV# = 8*3;
   95      %EQU Y_OP_DOWN# = 9*3;
   96      %EQU Y_OP_SABM# = 10*3;
   97      %EQU Y_OP_SABM_TO# = 11*3;
   98      %EQU Y_OP_SABM_R# = 12*3;
   99      %EQU Y_OP_SABM_U# = 13*3;
  100      %EQU Y_OP_UP# = 14*3;
  101      %EQU Y_OP_UP_UA# = 15*3;
  102      %EQU Y_OP_FRMR# = 16*3;
  103      %EQU Y_OP_FRMR_TO# = 17*3;
  104      %EQU Y_OP_REJ# = 18*3;
  105      %EQU Y_OP_RESET# = 19*3;
  106      %EQU Y_OP_RESET_TO# = 20*3;
  107      %EQU Y_OP_BAD_I# = 21*3;
  108      %EQU Y_OP_CL_TR# = 22*3;
  109      %EQU Y_OP_CL_RESET# = 23*3;
  110      %EQU Y_OP_RR_TO# = 24*3;
  111      %EQU Y_OP_RR_R# = 25*3;
14:58 JUL 28 '97 KX_SLCC_E.:E05SI                                          4    
  112      %EQU Y_OP_RESP# = 26*3;
  113      %EQU Y_OP_UA# = 27*3;
  114      %EQU Y_OP_I# = 28*3;
  115      /* OP flags to decide what to do. */
  116      %EQU Y_OPLOG# = '01'X;                  /* Log the event                      */
  117      %EQU Y_OPSND# = '02'X;                  /* Insert a protocol frame            */
  118      %EQU Y_OPRST# = '04'X;                  /* Reset the counters                 */
  119      %EQU Y_OPCLQ# = '08'X;                  /* Abort the transmit queue           */
  120      %EQU Y_OPREQ# = '10'X;                  /* Retransmit the transmit queue      */
  121      %EQU Y_OPDSC# = '20'X;                  /* Shut down the link.                */
  122      /* 2 spares */
  123          EJECT     INVIS
  124      /*  Picture of scratchpad memory                                */
  125      /*  0 - 00    System area                                       */
  126      /*  0 - 10    System area                                       */
  127      /*  0 - 20    System area                                       */
  128      /*  0 - 30    System area                                       */
  129      /*  0 - 40    System area                                       */
  130      /*  0 - 50    System area                                       */
  131      /*  0 - 60    System area                                       */
  132      /*  0 - 70    System area                                       */
  133      /*  0 - 80    System area                                       */
  134      /*  0 - 90    System area                                       */
  135      /*  0 - A0    System area                                       */
  136      /*  0 - B0    Interrupt Registers                               */
  137      /*  0 - C0    Trap Registers - Interrupt Vectors                */
  138      /*  0 - D0    (unused)                                          */
  139      /*  0 - E0    (unused)                                          */
  140      /*  0 - F0    (unused)                                          */
  141      /*  1 - 00    RCVEOF - State-Event Registers                    */
  142      /*  1 - 10    XMTCCB Queue Registers                            */
  143      /*  1 - 20    Miscellaneous Data (non-register usage)           */
  144      /*  1 - 30    STATS                                             */
  145      /*  1 - 40    Background Registers                              */
  146      /*  1 - 50    (unused)                                          */
  147      /*  1 - 60    (unused)                                          */
  148      /*  1 - 70    (unused)                                          */
14:58 JUL 28 '97 KX_SLCC_E.:E05SI                                          5    
  149      /*  1 - 80    XEOF - NewCCB Trace Buffer                        */
  150      /*  1 - 90    XEOF - NewCCB Trace Buffer                        */
  151      /*  1 - A0    XEOF - NewCCB Trace Buffer                        */
  152      /*  1 - B0    XEOF - NewCCB Trace Buffer                        */
  153      /*  1 - C0    State-Event Trace Buffer                          */
  154      /*  1 - D0    State-Event Trace Buffer                          */
  155      /*  1 - E0    State-Event Trace Buffer                          */
  156      /*  1 - F0    State-Event Trace Buffer                          */
  157      /*  2 - 00    Frame Trace Buffer                                */
  158          EJECT     INVIS
  159      /****************************************************************/
  160      /* Registers for XMTGNF.  Located in IRA for speed. */
  161      /****************************************************************/
  162      %EQU RXPX_XGNF# = 0*64+11*4;            /* Page 0, block 11 (.B0), px=1       */
  163      /****************************************************************/
  164      %EQU R$CCB = R0;
  165      /* R2-R3 clobbered by interrupts, so they're scratch */
  166      %EQU R$AC = R4;          /* ADR and next NS to send. NS is shifted, with I=1  */
  167      %EQU P$L2_ADR_CMND = $P0+11*16+(R$AC-R0);
  168      %EQU R$NSI = R5;              /* Next NS byte to send. Shifted and with I=1   */
  169      %EQU P$L2_NSI = $P0+11*16+(R$NSI-R0);
  170      %EQU R$RK = R6;                         /* Remaining Window (k)               */
  171      %EQU P$L2_RK = $P0+11*16+(R$RK-R0);
  172      %EQU R$XFL = R7;                        /* Xmit Control flags                 */
  173      %EQU P$L2_XFL = $P0+11*16+(R$XFL-R0);
  174      %EQU P$L2_XFL_TN@M = '01'X;             /* Timer running (oN)                 */
  175      %EQU P$L2_XFL_TS@M = '02'X;             /* Set timer                          */
  176      %EQU P$L2_XFL_AK@M = '04'X;             /* ACK needed                         */
  177      %EQU P$L2_XFL_NRR@M = '20'X;            /* RNR received                       */
  178      %EQU P$L2_XFL_WF@M = '40'X;             /* Output blocked (window full)       */
  179      %EQU P$L2_XFL_IF@M = '80'X;             /* Insert protocol frame              */
  180      %EQU R$NRP = R8;              /* Next NR-P byte to send. Shifted with P set 1 */
  181      %EQU P$L2_NRP = $P0+11*16+(R$NRP-R0);
  182      %EQU R$TQ = R9;                         /* Size of the Active-Temporary Queue */
  183      %EQU P$L2_TQ = $P0+11*16+(R$TQ-R0);
  184      %EQU R$NCCB = R12;                      /* Ptr to CCB to insert               */
  185      %EQU P$L2_NCCB = $P0+11*16+(R$NCCB-R0);
14:58 JUL 28 '97 KX_SLCC_E.:E05SI                                          6    
  186      /* R14-R15 are needed by XEOF so GIVE can put P-queue head in R0-R1 */
  187      /****************************************************************/
  188      /* TRAP handler uses .C0 as regs just to save the TSA at .C0 - .C3 */
  189      %EQU RXPX_TRAP# = 0*64+12*4+1;
  190      %EQU P$L2_TRRX = $PX+207;          /* RX value for TRAP handler to load from  */
  191      /****************************************************************/
  192          EJECT     INVIS
  193      /****************************************************************/
  194      /* Registers for RCV_FRAME code */
  195      /****************************************************************/
  196      %EQU P$RF_R$CCB = $PX;
  197      %EQU RXPX_RF# = 1*64+0*4+1;
  198      /* %EQU R$CCB = R0; */
  199      /* R$CCB+1 = R1 */
  200      %EQU R$ADR = R2;
  201      %EQU P$L2_ADR = $PX+(R$ADR-R0);
  202      %EQU R$SI = R3;
  203      %EQU P$L2_SI = $PX+(R$SI-R0);
  204      %EQU R$RPF = R4;
  205      %EQU P$L2_RPF = $PX+(R$RPF-R0);
  206      %EQU R$EV = R5;
  207      %EQU P$L2_EV = $PX+(R$EV-R0);
  208      %EQU R$ST = R6;
  209      %EQU P$L2_ST = $PX+(R$ST-R0);
  210      %EQU R$NR = R7;
  211      %EQU R$B1 = R8;
  212      %EQU P$RF_B1 = $PX+(R$B1-R0);
  213      /* R$B1+1 = R9 */
  214      %EQU R$OP = R10;
  215      %EQU P$L2_OP = $PX+(R$OP-R0);
  216      %EQU R$OPF = R11;
  217      %EQU P$L2_OPF = $PX+(R$OPF-R0);
  218      %EQU R$VS = R12;
  219      %EQU P$L2_VS = $PX+(R$VS-R0);
  220      %EQU R$STT = R13;
  221      %EQU P$L2_STT = $PX+(R$STT-R0);
  222      /* Bits in STT */
14:58 JUL 28 '97 KX_SLCC_E.:E05SI                                          7    
  223      %EQU P$L2_STT_PS@M = '80'X;             /* Poll sent                          */
  224      %EQU P$L2_STT_PR@M = '40'X;             /* Poll received                      */
  225      %EQU P$L2_STT_RJR@M = '20'X;            /* REJ received                       */
  226      %EQU P$L2_STT_RJS@M = '10'X;            /* REJ sent                           */
  227      %EQU P$L2_STT_NRS@M = '08'X;            /* RNR sent                           */
  228      %EQU P$L2_STT_REQ@M = '04'X;            /* REQ needed                         */
  229      %EQU P$L2_STT_PCB@M = '02'X;            /* Protocol CCB busy                  */
  230      %EQU R$B2 = R14;
  231      %EQU P$RF_B2 = $PX+(R$B2-R0);
  232      /* R$B2+1 = R15 */
  233          EJECT     INVIS
  234      /****************************************************************/
  235      /* Registers for manipulating the XMT Quasi-P-queue */
  236      /****************************************************************/
  237      %EQU RXPX_XQ# = 1*64+1*4+1;
  238      %EQU R$HD = R0;
  239      %EQU P$L2_I_HD$ = $PX+16+(R$HD-R0);
  240      %EQU R$TL = R2;
  241      %EQU P$L2_I_TL$ = $PX+16+(R$TL-R0);
  242      %EQU R$NXQ = R4;
  243      %EQU P$L2_NXQ = $PX+16+(R$NXQ-R0);
  244      %EQU R$DED = R6;                        /* and R7                             */
  245      %EQU P$L2_I_DED = $PX+16+(R$DED-R0);
  246      /* R$B1 = R8 and R9 */
  247      %EQU R$XQ1 = R10;                       /* and R11                            */
  248      %EQU P$L2_I_XQ1$ = $PX+16+(R$XQ1-R0);
  249      %EQU R$NPR = R12;
  250      %EQU P$L2_NPR = $PX+16+(R$NPR-R0);
  251      %EQU R$NNR = R13;
  252      %EQU P$L2_NNR = $PX+16+(R$NNR-R0);
  253      /* R$B2 = R14 and R15 */
  254          EJECT     INVIS
  255      /****************************************************************/
  256      /* STATS counters - Page 1 block 3 (at 48) */
  257      /****************************************************************/
  258      %EQU P$STATS = $PX+48;
  259      %EQU P$STATS_TO = $PX+48;
14:58 JUL 28 '97 KX_SLCC_E.:E05SI                                          8    
  260      %EQU P$STATS_BADADR = $PX+48+1;
  261      %EQU P$STATS_RSS = $PX+48+2;
  262      %EQU P$STATS_BADLNG = $PX+48+3;
  263      %EQU P$STATS_LNG = $PX+48+4;
  264      %EQU P$STATS_INVNS = $PX+48+5;
  265      %EQU P$STATS_RJS = $PX+48+6;
  266      %EQU P$STATS_RJR = $PX+48+7;
  267      %EQU P$STATS_BADNR = $PX+48+8;
  268      %EQU P$STATS_BADF = $PX+48+9;
  269      %EQU P$STATS_RSR = $PX+48+10;
  270      %EQU P$STATS_DM = $PX+48+11;
  271      %EQU P$STATS_CRC = $PX+48+12;
  272      %EQU P$STATS_OR = $PX+48+13;
  273      %EQU P$STATS_GRBADR = $PX+48+14;
  274      %EQU P$STATS_GRBSHRT = $PX+48+15;
  275          EJECT     INVIS
  276      /****************************************************************/
  277      /* Basic background loop registers. */
  278      /****************************************************************/
  279      %EQU RXPX_B# = 1*64+4*4+1;              /* Page 1, block 4 (at 64), px=1      */
  280      %EQU R$EVT = R4;
  281      %EQU P$L2_EVT = $PX+4*16+(R$EVT-R0);
  282      /* Masks for EVT - 'FC'X are hardware EVENT interrupts */
  283      /* But TM0 ('80'X) never gets into EVT */
  284      %EQU P$L2_EVT_STT@M = '80'X;  /* STT buf has changed, copy to system area     */
  285      %EQU P$L2_EVT_CCB@M = '02'X;            /* Something to do for XMT CCBs       */
  286      %EQU P$L2_EVT_OK@M = '01'X;        /* OK status or state may have changed     */
  287      %EQU R$T1 = R5;
  288      %EQU R$B3 = R6;                         /* and R7                             */
  289      /* R$B1 = R8 and R9 */
  290      /* R$B2 = R14 and R15 */
  291      /****************************************************************/
  292      /* Stuff that never needs to be a register - at block 2 */
  293      /****************************************************************/
  294      %EQU P$L2_K = $PX+32;
  295      %EQU P$L2_ADR_RESP = P$L2_K+1;
  296      %EQU P$L2_N2 = P$L2_K+2;
14:58 JUL 28 '97 KX_SLCC_E.:E05SI                                          9    
  297      %EQU P$L2_RC = P$L2_K+3;
  298      %EQU P$L2_UR = P$L2_K+4;
  299      %EQU P$L2_ERR = P$L2_K+5;
  300      %EQU P$L2_FRMRSI = P$L2_K+6;
  301      %EQU P$L2_LSCLK = P$L2_K+7;             /* Line status chang timer            */
  302      /****************************************************************/
  303      /* XMTEOF trace buffer  - page 1 block 8-B (at 128) */
  304      %EQU P$L2_EOFTRC = $PX+128;
  305      %EQU P$L2_EOFTRCX = P$L2_EOFTRC-3;
  306      /* Use page 2 for the first 6 bytes of the last 40-odd incoming frames */
  307      %EQU P$L2_TRCX = P$L2_EOFTRC-2;
  308      /* Event buffer - last 64 bytes of page 1 */
  309      %EQU P$L2_EVBFX = P$L2_EOFTRC-1;
  310      %EQU P$L2_EVBF = $PX+192;

