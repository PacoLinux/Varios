VERSION E05

PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:1    
        1        1        /*M*  CPA$READCC, CPA$FLUSH, CPA$GETRES, CPA$ECHOCC, CPA$CONTINUE, CPA$PRE_PARSE, CP
                 1        A$INIT */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*    DMC,DFC   */
        8        8        /*F*   NAME:   CPA$READCC
        9        9               PURPOSE: To read control commands.
       10       10               CALL:   CALL CPA$READCC (GETCMD,CMD_SOURCE) ALTRET (xxx);
       11       11               INTERFACE: CPC$WRITEMSGE
       12       12               INPUT:  CP_BUFFULL
       13       13               OUTPUT: GETCMD.OUT$
       14       14               DESCRIPTION: CPA$READCC is called to read all IBEX control commands.
       15       15                       Commands are read utilizing the CXG$GETCMD library service.
       16       16                       All the perameters are setup in GETCMD and passed onto
       17       17                       CXG$GETCMD.  If a command was read on a previous job step,
       18       18                       as is the case for implied quits, a new command is not read.
       19       19                       Upon encountering read errors, an error message is ouput
       20       20                       and appropriate action taken.
       21       21        */
       22       22        /**********************************************************************/
       23       23        CPA$READCC:
       24       24          PROC (GETCMD,CMD_SOURCE) ALTRET;
       25       25        %INCLUDE B$JIT;
       26      315        %INCLUDE B_MACROS_C;
       27      426        %INCLUDE CP_6;
       28      507        %INCLUDE JS$CP6V_C;
       29      570        %INCLUDE CP_MACROS_C;
       30     1322        %INCLUDE CP_SUBS_C;
       31     2239        %INCLUDE XU_MACRO_C;
       32     5345        %INCLUDE CP_PERR_C;
       33     5683        %INCLUDE F_ERRORS_C;
       34     5923        %INCLUDE CP_DATA_R;
       35     8486        %INCLUDE CP_6_SUBS;
       36     9026        %INCLUDE CXG_ENTRY ;
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:2    
       37     9038    1   DCL CPC$WRITEMSGE ENTRY(6);
       38     9039    1   DCL CPA$BYE ENTRY(1) ALTRET;
       39     9040    1   DCL CPF$SET_PROMPT ENTRY(2);
       40     9041    1   DCL X66_REL_AUTO ENTRY ;
       41     9042        %XUG_GETCMD (NAME=GETCMD, STCLASS=PARAM) ;
       42     9380        %P$PCB (NAME=PCB,STCLASS="BASED(GETCMD.PCB$)");
       43     9581        %EJECT;
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:3    
       44     9582        %SEG$2;
       45     9642        %B$TCB (STCLASS="BASED(B$TCB$)");
       46     9645        %B$EXCFR;
       47     9663        %ERR_CODE (NAME=E_INPUTLD,MID#=CPA$IBEXMID,CODE#=E$INPUTLD,STCLASS=CONSTANT);
       48     9683        %F$DCB;
       49     9740        %FPT_READ (FPTN=FPT$READ,STCLASS=BASED);
       50     9779        %FPT_WRITE (FPTN=FPT$WRITE,STCLASS=BASED);
       51     9810        %FPT$YC_V (FPTN = FPTV$YC);
       52     9813    1   DCL 1 GETCMD_ERR,
       53     9814    1         2 FCG BIT(18),
       54     9815    1         2 MON BIT(1),
       55     9816    1         2 CODE UBIN(14) UNAL,
       56     9817    1         2 SEV UBIN(3) UNAL ;
       57     9818        /**/
       58     9819    1   DCL CMD_SOURCE UBIN WORD;
       59     9820    1   DCL IDTEXT CHAR(6);
       60     9821    1   DCL JOBNAME CHAR(11);
       61     9822    1   DCL DUMMY (0:%(%CPBUFFSIZE-1)) CHAR(1) BASED UNAL;
       62     9823    1   DCL     YC$BUF   CHAR(I)  BASED    UNAL;
       63     9824    1   DCL CHAR$256 CHAR(%CPBUFFSIZE) BASED UNAL;
       64     9825    1   DCL I UBIN WORD;
       65     9826        /**/
       66     9827          %ERR_CODE (NAME=E_M$YCCMD2BIG,MID#=CPA$IBEXMID,CODE#=E$M$YCCMD2BIG,STCLASS=
              9827              CONSTANT);
       67     9847        /*E*    ERROR: CPA-E$M$YCCMD2BIG-0
       68     9848                MESSAGE: M$YC CMD > 256 characters.
       69     9849                MESSAGE1: A maximum length of 256 characters allowed on M$YC commands.
       70     9850        */
       71     9851        /*E*    ERROR: CPA-E$INPUTLD-C
       72     9852                MESSAGE: Lost data on input. Record truncated to 256 chars
       73     9853        */
       74     9854        %EJECT;
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:4    
       75     9855        /*
       76     9856             ***** If the user has hit CONTROL-Y then read the terminal.
       77     9857                   Ignore anything from M$YC or in B$JIT.CCBUF ...
       78     9858        */
       79     9859    1     CMD_SOURCE = 0;
       80     9860    1     IF B$JIT.CPFLAGS1 & %CP_YC# AND NOT(SEG$2.FLAGS.USE_CCBUF_IF_YC)
       81     9861    1        THEN   /* Ignore any other stored commands */
       82     9862    1           GOTO REREAD;
       83     9863    1     SEG$2.FLAGS.USE_CCBUF_IF_YC = '0'B ;
       84     9864    1     IF B$JIT.CPFLAGS1 & %CP_BUFFULL#
       85     9865    1        THEN
       86     9866    2           DO;
       87     9867    2              GETCMD.TEXT_ = VECTOR(B$JIT.CCBUF) ;
       88     9868    2              VBOUND(GETCMD.TEXT_) = B$JIT.CCARS - 1 ;
       89     9869    2              B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 & ~%CP_BUFFULL#;
       90     9870    2              IF B$JIT.CPFLAGS1 & %CP_LNKPMME#
       91     9871    2                 THEN
       92     9872    3                    DO;
       93     9873    3                       CMD_SOURCE = M$LNKPMME;
       94     9874    3                       SEG$2.FLAGS.SKIP_ECHO = ~B$JIT.CPFLAGS1.ECHO_LINK ;
       95     9875    3                    END;
       96     9876    2              ELSE IF B$JIT.CPFLAGS1 & %CP_YCPMME#
       97     9877    2                 THEN
       98     9878    3                    DO;
       99     9879    3                       CMD_SOURCE = M$YCPMME ;
      100     9880    3                    END;
      101     9881    2              ELSE IF B$JIT.CPFLAGS1 & %CP_CFREAD#
      102     9882    2                 THEN
      103     9883    3                    DO;
      104     9884    3                       CMD_SOURCE = XEQFILE;
      105     9885    3                    END;
      106     9886    2              ELSE IF B$JIT.MODE = %M_BATCH#
      107     9887    2                 THEN
      108     9888    3                    DO;
      109     9889    3                       CMD_SOURCE = BATCHJCL;
      110     9890    3                    END;
      111     9891    2              ELSE
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:5    
      112     9892    3                 DO;
      113     9893    3                    CMD_SOURCE = CONSOLE;
      114     9894    3                 END;
      115     9895        /**/
      116     9896    2              GOTO REREAD ;
      117     9897    2           END;
      118     9898        /*
      119     9899        *****   If this is an M$YC entry, the buffer is on the parameter stack;
      120     9900        *****   it should be moved into GETCMD.
      121     9901        */
      122     9902    1     IF B$JIT.CPFLAGS1 & %CP_YCPMME#
      123     9903    1        THEN
      124     9904    2           DO;
      125     9905                                           /*   Set flags based on options on M$YC    */
      126     9906    2              SEG$2.FLAGS.SKIP_ECHO = ~(B$PS1$ -> FPTV$YC.ECHO);
      127     9907    2              SEG$2.FLAGS.SKIP_ERRS = B$PS1$ -> FPTV$YC.NOERR;
      128     9908    2              I = B$JIT.YC0SZ + 1;
      129     9909    2              IF I > %CPBUFFSIZE
      130     9910    2                 THEN
      131     9911    3                   DO;
      132     9912    3                     GETCMD.ERR# = E_M$YCCMD2BIG;
      133     9913    3                     ALTRETURN;
      134     9914    3                   END;  /* Then Do */
      135     9915    2              GETCMD.TEXT_ = VECTOR(B$PS0$ -> YC$BUF);
      136     9916    2              CMD_SOURCE = M$YCPMME;
      137     9917    2           END;
      138     9918    1   REREAD: ;
      139     9919    1     IF SEG$2.PROMPT_TYPE ~= PRMT_I
      140     9920    1        THEN
      141     9921    1           SEG$2.PROMPT_TYPE = PRMT_N;
      142     9922    1     CALL CPF$SET_PROMPT (GETCMD.PROMPT_, SEG$2.PROMPT_TYPE);
      143     9923    1     IF CMD_SOURCE=0 OR CMD_SOURCE~=XEQFILE
      144     9924    1        THEN
      145     9925    1           B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 & ~%CP_CFREAD#;
      146     9926    1     CALL X66_REL_AUTO ;
      147     9927    1     PCB.CONTINUE = %NO#;
      148     9928    1     CALL CXG$GETCMD(GETCMD) ALTRET(E_GETCMD);
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:6    
      149     9929    1     PCB.CONTINUE = %YES#;
      150     9930    1     GETCMD.ALWAYS_SET_PROMPT# = %NO#;
      151     9931        /*
      152     9932        *****   Reset any break that may have occurred with read pending.
      153     9933        */
      154     9934    1   SAVE_INFO:
      155     9935    1     GETCMD.TEXT_ = VECTOR(NIL) ;
      156     9936    1     IF CMD_SOURCE = 0
      157     9937    1        THEN
      158     9938    2           DO;
      159     9939    2              B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 & ~%CP_BRK#;
      160     9940    2              CALL SET_CMD_SOURCE ;
      161     9941    2           END;
      162     9942        /*
      163     9943             ***** PCB.NCHARS now contains the number of characters
      164     9944                   just read. The calling routine must handle any
      165     9945                   leading BANGS (!) ...
      166     9946        */
      167     9947    1     RETURN;
      168     9948        /**/
      169     9949    1   E_GETCMD:
      170     9950        /*
      171     9951            ***** If the user may not pass input (E$READ) or
      172     9952            ***** is using a read only profile (E$DI) then
      173     9953                  log the user off...
      174     9954        */
      175     9955    1     CALL SET_CMD_SOURCE ;
      176     9956    1     GETCMD.TEXT_ = VECTOR(NIL) ;
      177     9957    1     GETCMD_ERR = GETCMD.ERR# ;
      178     9958    1     IF NOT GETCMD_ERR.MON
      179     9959    1         THEN
      180     9960    1             ALTRETURN ;
      181     9961    1     IF GETCMD_ERR.CODE = %E$READ
      182     9962    1        THEN                               /* Logoff                             */
      183     9963    1           CALL CPA$BYE;
      184     9964    1     B$JIT.USRERR = GETCMD_ERR;
      185     9965    1     IF GETCMD_ERR.CODE = %E$LD
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:7    
      186     9966    1        THEN
      187     9967    2          DO ;
      188     9968    2             GETCMD.ERR# = E_INPUTLD ;
      189     9969    2             B$JIT.USRERR = '0'B ;
      190     9970    2          END ;
      191     9971    1     ALTRETURN ;
      192     9972        %EJECT ;
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:8    
      193     9973    1   SET_CMD_SOURCE: PROC ;
      194     9974
      195     9975    2     IF GETCMD.TREAD#
      196     9976    2        THEN
      197     9977    2           CMD_SOURCE = CONSOLE;
      198     9978    2     IF B$JIT.MODE = %M_BATCH#
      199     9979    2        THEN
      200     9980    2           CMD_SOURCE = BATCHJCL;
      201     9981    2     IF DCBADDR(GETCMD.INDCB#)->F$DCB.DDEV.XEQ#
      202     9982    2        THEN
      203     9983    3           DO;
      204     9984    3              CMD_SOURCE = XEQFILE;
      205     9985    3              B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 | %CP_CFREAD#;
      206     9986    3           END;
      207     9987
      208     9988    2     RETURN ;
      209     9989
      210     9990    2   END   SET_CMD_SOURCE ;
      211     9991    1   END CPA$READCC;
      212     9992        %EOD;

PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:9    
--  Include file information  --

   CXG_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   CP_PERR_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   JS$CP6V_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$READCC.

   Procedure CPA$READCC requires 218 words for executable code.
   Procedure CPA$READCC requires 16 words of local(AUTO) storage.

PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:10   

 Object Unit name= CPA$READCC                                 File name= CPA$SUBR.:E05TOU
 UTS= JUL 29 '97 11:17:26.76 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      7      7  CPA$READCC
    2   Proc  even  none   218    332  CPA$READCC
    3  RoData even  none     7      7  CPA$READCC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        2  CPA$READCC

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 CPF$SET_PROMPT
 yes     yes           Std       1 CXG$GETCMD
         yes           Std       0 X66_REL_AUTO
 yes     yes           Std       1 CPA$BYE
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:11   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    SEG2$                            r    B$PS0$
r    B$PS1$                           r    B$JIT$                           r    B$TCB$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ROSID
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:12   


        1        1        /*M* CPA$READCC, CPA$FLUSH, CPA$GETRES, CPA$ECHOCC, CPA$CONTINUE, CPA$PRE_PARSE, CP
                 1        A$INIT */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*    DMC,DFC   */
        8        8        /*F*   NAME:   CPA$READCC
        9        9               PURPOSE: To read control commands.
       10       10               CALL:   CALL CPA$READCC (GETCMD,CMD_SOURCE) ALTRET (xxx);
       11       11               INTERFACE: CPC$WRITEMSGE
       12       12               INPUT:  CP_BUFFULL
       13       13               OUTPUT: GETCMD.OUT$
       14       14               DESCRIPTION: CPA$READCC is called to read all IBEX control commands.
       15       15                       Commands are read utilizing the CXG$GETCMD library service.
       16       16                       All the perameters are setup in GETCMD and passed onto
       17       17                       CXG$GETCMD.  If a command was read on a previous job step,
       18       18                       as is the case for implied quits, a new command is not read.
       19       19                       Upon encountering read errors, an error message is ouput
       20       20                       and appropriate action taken.
       21       21        */
       22       22        /**********************************************************************/
       23       23        CPA$READCC:
       24       24          PROC (GETCMD,CMD_SOURCE) ALTRET;

     24  2 000000   000000 700200 xent  CPA$READCC   TSX0  ! X66_AUTO_2
         2 000001   000020 000002                    ZERO    16,2

       25       25        %INCLUDE B$JIT;
       26      315        %INCLUDE B_MACROS_C;
       27      426        %INCLUDE CP_6;
       28      507        %INCLUDE JS$CP6V_C;
       29      570        %INCLUDE CP_MACROS_C;
       30     1322        %INCLUDE CP_SUBS_C;
       31     2239        %INCLUDE XU_MACRO_C;
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:13   
       32     5345        %INCLUDE CP_PERR_C;
       33     5683        %INCLUDE F_ERRORS_C;
       34     5923        %INCLUDE CP_DATA_R;
       35     8486        %INCLUDE CP_6_SUBS;
       36     9026        %INCLUDE CXG_ENTRY ;
       37     9038    1   DCL CPC$WRITEMSGE ENTRY(6);
       38     9039    1   DCL CPA$BYE ENTRY(1) ALTRET;
       39     9040    1   DCL CPF$SET_PROMPT ENTRY(2);
       40     9041    1   DCL X66_REL_AUTO ENTRY ;
       41     9042        %XUG_GETCMD (NAME=GETCMD, STCLASS=PARAM) ;
       42     9380        %P$PCB (NAME=PCB,STCLASS="BASED(GETCMD.PCB$)");
       43     9581        %EJECT;
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:14   
       44     9582        %SEG$2;
       45     9642        %B$TCB (STCLASS="BASED(B$TCB$)");
       46     9645        %B$EXCFR;
       47     9663        %ERR_CODE (NAME=E_INPUTLD,MID#=CPA$IBEXMID,CODE#=E$INPUTLD,STCLASS=CONSTANT);
       48     9683        %F$DCB;
       49     9740        %FPT_READ (FPTN=FPT$READ,STCLASS=BASED);
       50     9779        %FPT_WRITE (FPTN=FPT$WRITE,STCLASS=BASED);
       51     9810        %FPT$YC_V (FPTN = FPTV$YC);
       52     9813    1   DCL 1 GETCMD_ERR,
       53     9814    1         2 FCG BIT(18),
       54     9815    1         2 MON BIT(1),
       55     9816    1         2 CODE UBIN(14) UNAL,
       56     9817    1         2 SEV UBIN(3) UNAL ;
       57     9818        /**/
       58     9819    1   DCL CMD_SOURCE UBIN WORD;
       59     9820    1   DCL IDTEXT CHAR(6);
       60     9821    1   DCL JOBNAME CHAR(11);
       61     9822    1   DCL DUMMY (0:%(%CPBUFFSIZE-1)) CHAR(1) BASED UNAL;
       62     9823    1   DCL     YC$BUF   CHAR(I)  BASED    UNAL;
       63     9824    1   DCL CHAR$256 CHAR(%CPBUFFSIZE) BASED UNAL;
       64     9825    1   DCL I UBIN WORD;
       65     9826        /**/
       66     9827          %ERR_CODE (NAME=E_M$YCCMD2BIG,MID#=CPA$IBEXMID,CODE#=E$M$YCCMD2BIG,STCLASS=
              9827              CONSTANT);
       67     9847        /*E*    ERROR: CPA-E$M$YCCMD2BIG-0
       68     9848                MESSAGE: M$YC CMD > 256 characters.
       69     9849                MESSAGE1: A maximum length of 256 characters allowed on M$YC commands.
       70     9850        */
       71     9851        /*E*    ERROR: CPA-E$INPUTLD-C
       72     9852                MESSAGE: Lost data on input. Record truncated to 256 chars
       73     9853        */
       74     9854        %EJECT;
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:15   
       75     9855        /*
       76     9856             ***** If the user has hit CONTROL-Y then read the terminal.
       77     9857                   Ignore anything from M$YC or in B$JIT.CCBUF ...
       78     9858        */
       79     9859    1     CMD_SOURCE = 0;

   9859  2 000002   200004 470500                    LDP0    @CMD_SOURCE,,AUTO
         2 000003   000000 450100                    STZ     0,,PR0

       80     9860    1     IF B$JIT.CPFLAGS1 & %CP_YC# AND NOT(SEG$2.FLAGS.USE_CCBUF_IF_YC)

   9860  2 000004   000000 471400 xsym               LDP1    B$JIT$
         2 000005   100143 236100                    LDQ     99,,PR1
         2 000006   000002 376000 1                  ANQ     E_M$YCCMD2BIG+1
         2 000007   000014 600000 2                  TZE     s:9863
         2 000010   000000 473400 xsym               LDP3    SEG2$
         2 000011   300000 236100                    LDQ     0,,PR3
         2 000012   000010 316003                    CANQ    8,DU
         2 000013   000147 600000 2                  TZE     REREAD

       81     9861    1        THEN   /* Ignore any other stored commands */
       82     9862    1           GOTO REREAD;
       83     9863    1     SEG$2.FLAGS.USE_CCBUF_IF_YC = '0'B ;

   9863  2 000014   000000 473400 xsym               LDP3    SEG2$
         2 000015   000000 236000 3                  LDQ     0
         2 000016   300000 356100                    ANSQ    0,,PR3

       84     9864    1     IF B$JIT.CPFLAGS1 & %CP_BUFFULL#

   9864  2 000017   100143 236100                    LDQ     99,,PR1
         2 000020   000003 376000 1                  ANQ     E_M$YCCMD2BIG+2
         2 000021   000105 600000 2                  TZE     s:9902

       85     9865    1        THEN
       86     9866    2           DO;

PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:16   
       87     9867    2              GETCMD.TEXT_ = VECTOR(B$JIT.CCBUF) ;

   9867  2 000022   000001 235000 3                  LDA     1
         2 000023   000000 236000 xsym               LDQ     B$JIT$
         2 000024   000033 036003                    ADLQ    27,DU
         2 000025   200003 474500                    LDP4    @GETCMD,,AUTO
         2 000026   400034 757100                    STAQ    28,,PR4

       88     9868    2              VBOUND(GETCMD.TEXT_) = B$JIT.CCARS - 1 ;

   9868  2 000027   100032 236100                    LDQ     26,,PR1
         2 000030   000022 732000                    QRS     18
         2 000031   000001 136007                    SBLQ    1,DL
         2 000032   000020 736000                    QLS     16
         2 000033   400034 676100                    ERQ     28,,PR4
         2 000034   000034 376000 xsym               ANQ     B_VECTNIL+28
         2 000035   400034 656100                    ERSQ    28,,PR4

       89     9869    2              B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 & ~%CP_BUFFULL#;

   9869  2 000036   000003 236000 1                  LDQ     E_M$YCCMD2BIG+2
         2 000037   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 000040   100143 376100                    ANQ     99,,PR1
         2 000041   100143 756100                    STQ     99,,PR1

       90     9870    2              IF B$JIT.CPFLAGS1 & %CP_LNKPMME#

   9870  2 000042   000004 376000 1                  ANQ     E_M$YCCMD2BIG+3
         2 000043   000057 600000 2                  TZE     s:9876

       91     9871    2                 THEN
       92     9872    3                    DO;

       93     9873    3                       CMD_SOURCE = M$LNKPMME;

   9873  2 000044   000005 235007                    LDA     5,DL
         2 000045   000000 755100                    STA     0,,PR0
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:17   

       94     9874    3                       SEG$2.FLAGS.SKIP_ECHO = ~B$JIT.CPFLAGS1.ECHO_LINK ;

   9874  2 000046   100143 236100                    LDQ     99,,PR1
         2 000047   000012 736000                    QLS     10
         2 000050   400000 376003                    ANQ     -131072,DU
         2 000051   400000 676003                    ERQ     -131072,DU
         2 000052   000003 772000                    QRL     3
         2 000053   300000 676100                    ERQ     0,,PR3
         2 000054   040000 376003                    ANQ     16384,DU
         2 000055   300000 656100                    ERSQ    0,,PR3

       95     9875    3                    END;

   9875  2 000056   000104 710000 2                  TRA     s:9896

       96     9876    2              ELSE IF B$JIT.CPFLAGS1 & %CP_YCPMME#

   9876  2 000057   100143 236100                    LDQ     99,,PR1
         2 000060   000005 376000 1                  ANQ     E_M$YCCMD2BIG+4
         2 000061   000065 600000 2                  TZE     s:9881

       97     9877    2                 THEN
       98     9878    3                    DO;

       99     9879    3                       CMD_SOURCE = M$YCPMME ;

   9879  2 000062   000004 235007                    LDA     4,DL
         2 000063   000000 755100                    STA     0,,PR0

      100     9880    3                    END;

   9880  2 000064   000104 710000 2                  TRA     s:9896

      101     9881    2              ELSE IF B$JIT.CPFLAGS1 & %CP_CFREAD#

   9881  2 000065   100143 236100                    LDQ     99,,PR1
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:18   
         2 000066   000006 376000 1                  ANQ     E_M$YCCMD2BIG+5
         2 000067   000073 600000 2                  TZE     s:9886

      102     9882    2                 THEN
      103     9883    3                    DO;

      104     9884    3                       CMD_SOURCE = XEQFILE;

   9884  2 000070   000003 235007                    LDA     3,DL
         2 000071   000000 755100                    STA     0,,PR0

      105     9885    3                    END;

   9885  2 000072   000104 710000 2                  TRA     s:9896

      106     9886    2              ELSE IF B$JIT.MODE = %M_BATCH#

   9886  2 000073   100000 236100                    LDQ     0,,PR1
         2 000074   740000 376003                    ANQ     -16384,DU
         2 000075   040000 116003                    CMPQ    16384,DU
         2 000076   000102 601000 2                  TNZ     s:9893

      107     9887    2                 THEN
      108     9888    3                    DO;

      109     9889    3                       CMD_SOURCE = BATCHJCL;

   9889  2 000077   000002 235007                    LDA     2,DL
         2 000100   000000 755100                    STA     0,,PR0

      110     9890    3                    END;

   9890  2 000101   000104 710000 2                  TRA     s:9896

      111     9891    2              ELSE
      112     9892    3                 DO;

PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:19   
      113     9893    3                    CMD_SOURCE = CONSOLE;

   9893  2 000102   000001 235007                    LDA     1,DL
         2 000103   000000 755100                    STA     0,,PR0

      114     9894    3                 END;

      115     9895        /**/
      116     9896    2              GOTO REREAD ;

   9896  2 000104   000147 710000 2                  TRA     REREAD

      117     9897    2           END;
      118     9898        /*
      119     9899        *****   If this is an M$YC entry, the buffer is on the parameter stack;
      120     9900        *****   it should be moved into GETCMD.
      121     9901        */
      122     9902    1     IF B$JIT.CPFLAGS1 & %CP_YCPMME#

   9902  2 000105   100143 236100                    LDQ     99,,PR1
         2 000106   000005 376000 1                  ANQ     E_M$YCCMD2BIG+4
         2 000107   000147 600000 2                  TZE     REREAD

      123     9903    1        THEN
      124     9904    2           DO;

      125     9905                                           /*   Set flags based on options on M$YC    */
      126     9906    2              SEG$2.FLAGS.SKIP_ECHO = ~(B$PS1$ -> FPTV$YC.ECHO);

   9906  2 000110   000000 474400 xsym               LDP4    B$PS1$
         2 000111   400000 236100                    LDQ     0,,PR4
         2 000112   400000 376003                    ANQ     -131072,DU
         2 000113   400000 676003                    ERQ     -131072,DU
         2 000114   000003 772000                    QRL     3
         2 000115   300000 676100                    ERQ     0,,PR3
         2 000116   040000 376003                    ANQ     16384,DU
         2 000117   300000 656100                    ERSQ    0,,PR3
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:20   

      127     9907    2              SEG$2.FLAGS.SKIP_ERRS = B$PS1$ -> FPTV$YC.NOERR;

   9907  2 000120   400000 236100                    LDQ     0,,PR4
         2 000121   000005 772000                    QRL     5
         2 000122   300000 676100                    ERQ     0,,PR3
         2 000123   004000 376003                    ANQ     2048,DU
         2 000124   300000 656100                    ERSQ    0,,PR3

      128     9908    2              I = B$JIT.YC0SZ + 1;

   9908  2 000125   100146 236100                    LDQ     102,,PR1
         2 000126   000022 772000                    QRL     18
         2 000127   000001 036007                    ADLQ    1,DL
         2 000130   200013 756100                    STQ     I,,AUTO

      129     9909    2              IF I > %CPBUFFSIZE

   9909  2 000131   000401 116007                    CMPQ    257,DL
         2 000132   000137 602000 2                  TNC     s:9915

      130     9910    2                 THEN
      131     9911    3                   DO;

      132     9912    3                     GETCMD.ERR# = E_M$YCCMD2BIG;

   9912  2 000133   000001 236000 1                  LDQ     E_M$YCCMD2BIG
         2 000134   200003 475500                    LDP5    @GETCMD,,AUTO
         2 000135   500001 756100                    STQ     1,,PR5

      133     9913    3                     ALTRETURN;

   9913  2 000136   000000 702200 xent               TSX2  ! X66_AALT

      134     9914    3                   END;  /* Then Do */
      135     9915    2              GETCMD.TEXT_ = VECTOR(B$PS0$ -> YC$BUF);

PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:21   
   9915  2 000137   200013 235100                    LDA     I,,AUTO
         2 000140   000020 735000                    ALS     16
         2 000141   000140 135007                    SBLA    96,DL
         2 000142   000000 236000 xsym               LDQ     B$PS0$
         2 000143   200003 475500                    LDP5    @GETCMD,,AUTO
         2 000144   500034 757100                    STAQ    28,,PR5

      136     9916    2              CMD_SOURCE = M$YCPMME;

   9916  2 000145   000004 235007                    LDA     4,DL
         2 000146   000000 755100                    STA     0,,PR0

      137     9917    2           END;

   9912  2 000147                       REREAD       null
      138     9918    1   REREAD: ;
      139     9919    1     IF SEG$2.PROMPT_TYPE ~= PRMT_I

   9919  2 000147   300205 235100                    LDA     133,,PR3
         2 000150   000002 115007                    CMPA    2,DL
         2 000151   000154 600000 2                  TZE     s:9922

      140     9920    1        THEN
      141     9921    1           SEG$2.PROMPT_TYPE = PRMT_N;

   9921  2 000152   000001 236007                    LDQ     1,DL
         2 000153   300205 756100                    STQ     133,,PR3

      142     9922    1     CALL CPF$SET_PROMPT (GETCMD.PROMPT_, SEG$2.PROMPT_TYPE);

   9922  2 000154   000000 236000 xsym               LDQ     SEG2$
         2 000155   000205 036003                    ADLQ    133,DU
         2 000156   200017 756100                    STQ     I+4,,AUTO
         2 000157   200003 236100                    LDQ     @GETCMD,,AUTO
         2 000160   000025 036003                    ADLQ    21,DU
         2 000161   200016 756100                    STQ     I+3,,AUTO
         2 000162   200016 630500                    EPPR0   I+3,,AUTO
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:22   
         2 000163   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000164   000000 701000 xent               TSX1    CPF$SET_PROMPT
         2 000165   000000 011000                    NOP     0

      143     9923    1     IF CMD_SOURCE=0 OR CMD_SOURCE~=XEQFILE

   9923  2 000166   200004 470500                    LDP0    @CMD_SOURCE,,AUTO
         2 000167   000000 235100                    LDA     0,,PR0
         2 000170   000173 600000 2                  TZE     s:9925
         2 000171   000003 115007                    CMPA    3,DL
         2 000172   000200 600000 2                  TZE     s:9926

      144     9924    1        THEN
      145     9925    1           B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 & ~%CP_CFREAD#;

   9925  2 000173   000006 236000 1                  LDQ     E_M$YCCMD2BIG+5
         2 000174   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 000175   000000 471400 xsym               LDP1    B$JIT$
         2 000176   100143 376100                    ANQ     99,,PR1
         2 000177   100143 756100                    STQ     99,,PR1

      146     9926    1     CALL X66_REL_AUTO ;

   9926  2 000200   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000201   000000 701000 xent               TSX1    X66_REL_AUTO
         2 000202   000000 011000                    NOP     0

      147     9927    1     PCB.CONTINUE = %NO#;

   9927  2 000203   200003 470500                    LDP0    @GETCMD,,AUTO
         2 000204   000003 471500                    LDP1    3,,PR0
         2 000205   000002 236000 3                  LDQ     2
         2 000206   100005 356100                    ANSQ    5,,PR1

      148     9928    1     CALL CXG$GETCMD(GETCMD) ALTRET(E_GETCMD);

   9928  2 000207   200003 630500                    EPPR0   @GETCMD,,AUTO
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:23   
         2 000210   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000211   000000 701000 xent               TSX1    CXG$GETCMD
         2 000212   000236 702000 2                  TSX2    E_GETCMD

      149     9929    1     PCB.CONTINUE = %YES#;

   9929  2 000213   200003 470500                    LDP0    @GETCMD,,AUTO
         2 000214   000003 471500                    LDP1    3,,PR0
         2 000215   200000 236007                    LDQ     65536,DL
         2 000216   100005 256100                    ORSQ    5,,PR1

      150     9930    1     GETCMD.ALWAYS_SET_PROMPT# = %NO#;

   9930  2 000217   000003 236000 3                  LDQ     3
         2 000220   000006 356100                    ANSQ    6,,PR0

      151     9931        /*
      152     9932        *****   Reset any break that may have occurred with read pending.
      153     9933        */
      154     9934    1   SAVE_INFO:
      155     9935    1     GETCMD.TEXT_ = VECTOR(NIL) ;

   9935  2 000221   000004 237000 3     SAVE_INFO    LDAQ    4
         2 000222   000034 757100                    STAQ    28,,PR0

      156     9936    1     IF CMD_SOURCE = 0

   9936  2 000223   200004 471500                    LDP1    @CMD_SOURCE,,AUTO
         2 000224   100000 235100                    LDA     0,,PR1
         2 000225   000235 601000 2                  TNZ     s:9947

      157     9937    1        THEN
      158     9938    2           DO;

      159     9939    2              B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 & ~%CP_BRK#;

   9939  2 000226   000006 236000 xsym               LDQ     B_VECTNIL+6
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:24   
         2 000227   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 000230   000000 473400 xsym               LDP3    B$JIT$
         2 000231   300143 376100                    ANQ     99,,PR3
         2 000232   300143 756100                    STQ     99,,PR3

      160     9940    2              CALL SET_CMD_SOURCE ;

   9940  2 000233   000273 701000 2                  TSX1    SET_CMD_SOURCE
         2 000234   000000 011000                    NOP     0

      161     9941    2           END;

      162     9942        /*
      163     9943             ***** PCB.NCHARS now contains the number of characters
      164     9944                   just read. The calling routine must handle any
      165     9945                   leading BANGS (!) ...
      166     9946        */
      167     9947    1     RETURN;

   9947  2 000235   000000 702200 xent               TSX2  ! X66_ARET

      168     9948        /**/
      169     9949    1   E_GETCMD:
      170     9950        /*
      171     9951            ***** If the user may not pass input (E$READ) or
      172     9952            ***** is using a read only profile (E$DI) then
      173     9953                  log the user off...
      174     9954        */
      175     9955    1     CALL SET_CMD_SOURCE ;

   9955  2 000236   000273 701000 2     E_GETCMD     TSX1    SET_CMD_SOURCE
         2 000237   000000 011000                    NOP     0

      176     9956    1     GETCMD.TEXT_ = VECTOR(NIL) ;

   9956  2 000240   000004 237000 3                  LDAQ    4
         2 000241   200003 470500                    LDP0    @GETCMD,,AUTO
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:25   
         2 000242   000034 757100                    STAQ    28,,PR0

      177     9957    1     GETCMD_ERR = GETCMD.ERR# ;

   9957  2 000243   000001 236100                    LDQ     1,,PR0
         2 000244   200005 756100                    STQ     GETCMD_ERR,,AUTO

      178     9958    1     IF NOT GETCMD_ERR.MON

   9958  2 000245   400000 316007                    CANQ    -131072,DL
         2 000246   000250 601000 2                  TNZ     s:9961

      179     9959    1         THEN
      180     9960    1             ALTRETURN ;

   9960  2 000247   000000 702200 xent               TSX2  ! X66_AALT

      181     9961    1     IF GETCMD_ERR.CODE = %E$READ

   9961  2 000250   200005 236100                    LDQ     GETCMD_ERR,,AUTO
         2 000251   377770 376007                    ANQ     131064,DL
         2 000252   000700 116007                    CMPQ    448,DL
         2 000253   000257 601000 2                  TNZ     s:9964

      182     9962    1        THEN                               /* Logoff                             */
      183     9963    1           CALL CPA$BYE;

   9963  2 000254   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000255   000000 701000 xent               TSX1    CPA$BYE
         2 000256   000000 011000                    NOP     0

      184     9964    1     B$JIT.USRERR = GETCMD_ERR;

   9964  2 000257   200005 236100                    LDQ     GETCMD_ERR,,AUTO
         2 000260   000000 470400 xsym               LDP0    B$JIT$
         2 000261   000144 756100                    STQ     100,,PR0

PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:26   
      185     9965    1     IF GETCMD_ERR.CODE = %E$LD

   9965  2 000262   200005 236100                    LDQ     GETCMD_ERR,,AUTO
         2 000263   377770 376007                    ANQ     131064,DL
         2 000264   000070 116007                    CMPQ    56,DL
         2 000265   000272 601000 2                  TNZ     s:9971

      186     9966    1        THEN
      187     9967    2          DO ;

      188     9968    2             GETCMD.ERR# = E_INPUTLD ;

   9968  2 000266   000000 236000 1                  LDQ     E_INPUTLD
         2 000267   200003 471500                    LDP1    @GETCMD,,AUTO
         2 000270   100001 756100                    STQ     1,,PR1

      189     9969    2             B$JIT.USRERR = '0'B ;

   9969  2 000271   000144 450100                    STZ     100,,PR0

      190     9970    2          END ;

      191     9971    1     ALTRETURN ;

   9971  2 000272   000000 702200 xent               TSX2  ! X66_AALT

      192     9972        %EJECT ;
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:27   
      193     9973    1   SET_CMD_SOURCE: PROC ;

   9973  2 000273   200014 741300       SET_CMD_SOU* STX1  ! I+1,,AUTO

      194     9974
      195     9975    2     IF GETCMD.TREAD#

   9975  2 000274   200003 470500                    LDP0    @GETCMD,,AUTO
         2 000275   000006 236100                    LDQ     6,,PR0
         2 000276   200000 316003                    CANQ    65536,DU
         2 000277   000303 600000 2                  TZE     s:9978

      196     9976    2        THEN
      197     9977    2           CMD_SOURCE = CONSOLE;

   9977  2 000300   000001 235007                    LDA     1,DL
         2 000301   200004 471500                    LDP1    @CMD_SOURCE,,AUTO
         2 000302   100000 755100                    STA     0,,PR1

      198     9978    2     IF B$JIT.MODE = %M_BATCH#

   9978  2 000303   000000 471400 xsym               LDP1    B$JIT$
         2 000304   100000 236100                    LDQ     0,,PR1
         2 000305   740000 376003                    ANQ     -16384,DU
         2 000306   040000 116003                    CMPQ    16384,DU
         2 000307   000313 601000 2                  TNZ     s:9981

      199     9979    2        THEN
      200     9980    2           CMD_SOURCE = BATCHJCL;

   9980  2 000310   000002 235007                    LDA     2,DL
         2 000311   200004 473500                    LDP3    @CMD_SOURCE,,AUTO
         2 000312   300000 755100                    STA     0,,PR3

      201     9981    2     IF DCBADDR(GETCMD.INDCB#)->F$DCB.DDEV.XEQ#

   9981  2 000313   000006 473400 3                  LDP3    6
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:28   
         2 000314   300000 474500                    LDP4    0,,PR3
         2 000315   000012 720100                    LXL0    10,,PR0
         2 000316   400000 475510                    LDP5    0,X0,PR4
         2 000317   500004 236100                    LDQ     4,,PR5
         2 000320   040000 316007                    CANQ    16384,DL
         2 000321   000330 600000 2                  TZE     s:9988

      202     9982    2        THEN
      203     9983    3           DO;

      204     9984    3              CMD_SOURCE = XEQFILE;

   9984  2 000322   000003 235007                    LDA     3,DL
         2 000323   200004 476500                    LDP6    @CMD_SOURCE,,AUTO
         2 000324   600000 755100                    STA     0,,PR6

      205     9985    3              B$JIT.CPFLAGS1 = B$JIT.CPFLAGS1 | %CP_CFREAD#;

   9985  2 000325   100143 236100                    LDQ     99,,PR1
         2 000326   000006 276000 1                  ORQ     E_M$YCCMD2BIG+5
         2 000327   100143 756100                    STQ     99,,PR1

      206     9986    3           END;

      207     9987
      208     9988    2     RETURN ;

   9988  2 000330   200014 221300                    LDX1  ! I+1,,AUTO
         2 000331   000001 702211                    TSX2  ! 1,X1
      209     9989
      210     9990    2   END   SET_CMD_SOURCE ;
      211     9991    1   END CPA$READCC;
      212     9992        %EOD;

PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:29   
--  Include file information  --

   CXG_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   CP_PERR_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   JS$CP6V_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$READCC.
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:30   

 **** Variables and constants ****

  ****  Section 001 RoData CPA$READCC

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 E_INPUTLD                  1-0-0/w STRC        r     1 E_M$YCCMD2BIG

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CMD_SOURCE                3-0-0/w PTR         r     1 @GETCMD
    *0-0-0/w UBIN        r     1 CMD_SOURCE                *0-0-0/d STRC(1512)  r     1 GETCMD
     5-0-0/b STRC        r     1 GETCMD_ERR                13-0-0/w UBIN        r     1 I

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$PS0$
     0-0-0/w PTR         r     1 B$PS1$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w PTR         r     1 SEG2$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/d STRC        r     1 FPTV$YC                    0-0-0/w STRC(504)   r     1 PCB
     0-0-0/w STRC(6264)  r     1 SEG$2                      0-0-0/c ACHR        r     1 YC$BUF

PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:31   

   Procedure CPA$READCC requires 218 words for executable code.
   Procedure CPA$READCC requires 16 words of local(AUTO) storage.
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:32   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:33   
          MINI XREF LISTING

B$EXCFR.ASL
      9646**DCL      9646--REDEF
B$EXCFR.ERR.ERR#
      9660**DCL      9660--REDEF
B$EXCFR.EVID
      9659**DCL      9659--REDEF    9660--REDEF
B$EXCFR.IR
      9647**DCL      9647--REDEF
B$EXCFR.PREVSZ
      9646**DCL      9646--REDEF
B$EXCFR.SUBC
      9658**DCL      9658--REDEF    9659--REDEF    9659--REDEF
B$JIT.CCARS
       127**DCL      9868>>ASSIGN
B$JIT.CCBUF
       127**DCL      9867--ASSIGN
B$JIT.CPFLAGS1
       128**DCL      9860>>IF       9864>>IF       9869<<ASSIGN   9869>>ASSIGN   9870>>IF       9876>>IF
      9881>>IF       9902>>IF       9925<<ASSIGN   9925>>ASSIGN   9939<<ASSIGN   9939>>ASSIGN   9985<<ASSIGN
      9985>>ASSIGN
B$JIT.CPFLAGS1.ECHO_LINK
       129**DCL      9874>>ASSIGN
B$JIT.CPFLAGS1.SLEAZE
       133**DCL       133--REDEF
B$JIT.ERR.MID
        40**DCL        40--REDEF
B$JIT.JRESPEAK
       201**DCL       202--REDEF
B$JIT.MODE
        34**DCL      9886>>IF       9978>>IF
B$JIT.ORIGINATOR_PORT.FROM_CR
       310**DCL       310--REDEF     311--REDEF
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:34   
B$JIT.PNR
       214**DCL       214--REDEF
B$JIT.TSLINE
       308**DCL       309--REDEF
B$JIT.USRERR
       175**DCL      9964<<ASSIGN   9969<<ASSIGN
B$JIT.YC0SZ
       176**DCL      9908>>ASSIGN
B$JIT$
      8419**DCL        34--IMP-PTR  9860>>IF       9864>>IF       9867>>ASSIGN   9868>>ASSIGN   9869>>ASSIGN
      9869>>ASSIGN   9870>>IF       9874>>ASSIGN   9876>>IF       9881>>IF       9886>>IF       9902>>IF
      9908>>ASSIGN   9925>>ASSIGN   9925>>ASSIGN   9939>>ASSIGN   9939>>ASSIGN   9964>>ASSIGN   9969>>ASSIGN
      9978>>IF       9985>>ASSIGN   9985>>ASSIGN
B$PS0$
      8416**DCL      9915>>ASSIGN
B$PS1$
      8417**DCL      9906>>ASSIGN   9907>>ASSIGN
B$TCB$
      8421**DCL      9643--IMP-PTR
CAMR_REC.ACSVEH_
      7458**DCL      7459--REDEF
CAMR_REC.ALTKEYS_
      7464**DCL      7465--REDEF    7465--REDEF
CAMR_REC.HDR_
      7463**DCL      7464--REDEF
CAMR_REC.TAB_
      7462**DCL      7463--REDEF
CAMR_REC.UHL_
      7456**DCL      7457--REDEF    7457--REDEF
CAMR_REC.V.FSN#
      7496**DCL      7496--REDEF    7496--REDEF
CAMR_REC.WSN_
      7462**DCL      7462--REDEF
CFPT_CLOSE.SN_
      6300**DCL      6300--REDEF
CFPT_CLOSE.UTL_
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:35   
      6301**DCL      6301--REDEF
CFPT_CLOSE.V.EXPIRE#
      6315**DCL      6315--REDEF
CFPT_CLOSE.V.TYPE#
      6313**DCL      6313--REDEF
CFPT_CLOSE.V.XTNSIZE#
      6310**DCL      6310--REDEF    6312--REDEF
CFPT_OPEN.ACSVEH_
      6235**DCL      6236--REDEF
CFPT_OPEN.ALTKEYS_
      6241**DCL      6242--REDEF    6242--REDEF
CFPT_OPEN.HDR_
      6240**DCL      6241--REDEF
CFPT_OPEN.TAB_
      6239**DCL      6240--REDEF
CFPT_OPEN.UHL_
      6233**DCL      6234--REDEF    6234--REDEF
CFPT_OPEN.V.FSN#
      6273**DCL      6273--REDEF    6273--REDEF
CFPT_OPEN.WSN_
      6239**DCL      6239--REDEF
CFPT_READ.STATION_
      6339**DCL      6340--REDEF
CFPT_READ.V.DVBYTE.REREAD#
      6351**DCL      6351--REDEF
CFPT_READ.V.INDX#
      6349**DCL      6349--REDEF
CFPT_READUC.STATION_
      6709**DCL      6710--REDEF
CFPT_READUC.V.DVBYTE.REREAD#
      6721**DCL      6721--REDEF
CFPT_READUC.V.INDX#
      6719**DCL      6719--REDEF
CFPT_TRTN.V.IR#
      6945**DCL      6946--REDEF
CFPT_WRITE.STATION_
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:36   
      6377**DCL      6377--REDEF
CFPT_WRITE.V.DVBYTE.VFC#
      6384**DCL      6384--REDEF
CFPT_WRITEUC.STATION_
      6677**DCL      6677--REDEF
CFPT_WRITEUC.V.DVBYTE.VFC#
      6684**DCL      6684--REDEF
CFPT_XXX.V.STEPCC#
      7657**DCL      7657--REDEF
CGETCMD.OUT$
      7678**DCL      7684--REDEF
CMD_SOURCE
      9819**DCL        23--PROC     9859<<ASSIGN   9873<<ASSIGN   9879<<ASSIGN   9884<<ASSIGN   9889<<ASSIGN
      9893<<ASSIGN   9916<<ASSIGN   9923>>IF       9923>>IF       9936>>IF       9977<<ASSIGN   9980<<ASSIGN
      9984<<ASSIGN
CPA$BYE
      9039**DCL-ENT  9963--CALL
CPF$SET_PROMPT
      9040**DCL-ENT  9922--CALL
CVLP_TRMCTL.BREAKCOUNT
      7269**DCL      7270--REDEF
CVLP_WINDOW.FWINDOW#
      7365**DCL      7365--REDEF    7366--REDEF
CXG$GETCMD
      9033**DCL-ENT  9928--CALL
E_GETCMD
      9955**LABEL    9928--CALLALT
E_INPUTLD
      9676**DCL      9968>>ASSIGN
E_M$YCCMD2BIG
      9840**DCL      9912>>ASSIGN
F$DCB.ACTPOS
      9716**DCL      9716--REDEF
F$DCB.ARS#
      9690**DCL      9690--REDEF
F$DCB.ATTR
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:37   
      9709**DCL      9710--REDEF
F$DCB.BORROW
      9724**DCL      9724--REDEF    9724--REDEF    9724--REDEF
F$DCB.DCBNAME.L
      9738**DCL      9738--IMP-SIZ
F$DCB.DDEV.XEQ#
      9697**DCL      9981>>IF
F$DCB.EOMCHAR#
      9694**DCL      9694--REDEF
F$DCB.FLDID
      9719**DCL      9719--REDEF
F$DCB.FORM$
      9713**DCL      9713--REDEF
F$DCB.FSECT
      9729**DCL      9729--REDEF
F$DCB.FSN#
      9706**DCL      9706--REDEF    9706--REDEF    9707--REDEF
F$DCB.HEADER$
      9712**DCL      9712--REDEF
F$DCB.IXTNSIZE#
      9710**DCL      9710--REDEF
F$DCB.LASTSTA$
      9699**DCL      9699--REDEF
F$DCB.LVL
      9725**DCL      9725--REDEF
F$DCB.NAME#.C
      9700**DCL      9700--REDEF
F$DCB.NOEOF
      9722**DCL      9722--REDEF
F$DCB.NRECS#
      9711**DCL      9711--REDEF
F$DCB.NRECX
      9730**DCL      9730--REDEF
F$DCB.OHDR
      9722**DCL      9722--REDEF
F$DCB.ORG#
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:38   
      9705**DCL      9705--REDEF
F$DCB.PRECNO
      9728**DCL      9728--REDEF
F$DCB.RCSZ
      9734**DCL      9734--REDEF
F$DCB.RES#
      9701**DCL      9701--REDEF
F$DCB.SETX
      9713**DCL      9713--REDEF
F$DCB.TAB$
      9713**DCL      9713--REDEF
F$DCB.TDA
      9727**DCL      9728--REDEF
F$DCB.WSN#
      9701**DCL      9701--REDEF
FPT$READ.STATION_
      9760**DCL      9761--REDEF
FPT$READ.V.DVBYTE.REREAD#
      9772**DCL      9772--REDEF
FPT$READ.V.INDX#
      9770**DCL      9770--REDEF
FPT$WRITE.STATION_
      9798**DCL      9798--REDEF
FPT$WRITE.V.DVBYTE.VFC#
      9805**DCL      9805--REDEF
FPTV$YC.ECHO
      9811**DCL      9906>>ASSIGN
FPTV$YC.NOERR
      9811**DCL      9907>>ASSIGN
GETCMD
      9055**DCL        23--PROC     9928<>CALL
GETCMD.ALWAYS_SET_PROMPT#
      9143**DCL      9930<<ASSIGN
GETCMD.ERR#
      9066**DCL      9912<<ASSIGN   9957>>ASSIGN   9968<<ASSIGN
GETCMD.INDCB#
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:39   
      9226**DCL      9981--IF
GETCMD.OUT$
      9060**DCL      9066--REDEF
GETCMD.PCB$
      9080**DCL      9399--IMP-PTR  9927>>ASSIGN   9929>>ASSIGN
GETCMD.PROMPT_
      9264**DCL      9922<>CALL
GETCMD.TEXT_
      9318**DCL      9867<<ASSIGN   9868<<ASSIGN   9915<<ASSIGN   9935<<ASSIGN   9956<<ASSIGN
GETCMD.TREAD#
      9104**DCL      9975>>IF
GETCMD_ERR
      9813**DCL      9957<<ASSIGN   9964>>ASSIGN
GETCMD_ERR.CODE
      9816**DCL      9961>>IF       9965>>IF
GETCMD_ERR.MON
      9815**DCL      9958>>IF
I
      9825**DCL      9823--IMP-SIZ  9908<<ASSIGN   9909>>IF       9915>>ASSIGN
PCB.CONTINUE
      9440**DCL      9927<<ASSIGN   9929<<ASSIGN
REREAD
      9912**LABEL    9862--GOTO     9896--GOTO
SEG$2.FLAGS.SKIP_ECHO
      9588**DCL      9874<<ASSIGN   9906<<ASSIGN
SEG$2.FLAGS.SKIP_ERRS
      9591**DCL      9907<<ASSIGN
SEG$2.FLAGS.USE_CCBUF_IF_YC
      9599**DCL      9860>>IF       9863<<ASSIGN
SEG$2.PROMPT_TYPE
      9639**DCL      9919>>IF       9921<<ASSIGN   9922<>CALL
SEG2$
      8412**DCL      9583--IMP-PTR  9860>>IF       9863>>ASSIGN   9874>>ASSIGN   9906>>ASSIGN   9907>>ASSIGN
      9919>>IF       9921>>ASSIGN   9922>>CALL
SET_CMD_SOURCE
      9973**PROC     9940--CALL     9955--CALL
PL6.E3A0      #001=CPA$READCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:17 Page:40   
X66_REL_AUTO
      9041**DCL-ENT  9926--CALL
YC$BUF
      9823**DCL      9915--ASSIGN

PL6.E3A0      #002=CPA$FLUSH File=CPA$SUBR.:E05TSI                               TUE 07/29/97 11:17 Page:41   
      213        1        /*T***********************************************************/
      214        2        /*T*                                                         */
      215        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      216        4        /*T*                                                         */
      217        5        /*T***********************************************************/
      218        6        /*F*    NAME:    CPA$FLUSH
      219        7                PURPOSE:    If a command stream exists, it is deleted.
      220        8        */
      221        9        CPA$FLUSH:
      222       10          PROC;
      223       11        /**/
      224       12                %INCLUDE B_MACROS_C;
      225      123                %INCLUDE CP_6;
      226      204        /**/
      227      205    1   DCL CPC$WRITEMSGE ENTRY(6);
      228      206    1   DCL B$TCB$ PTR SYMREF;
      229      207        %B$TCB (STCLASS="BASED(B$TCB$)");
      230      210        %B$EXCFR;
      231      228        /**/
      232      229    1     CALL M$XFLUSH ALTRET(E_FLUSH);
      233      230    1     RETURN;
      234      231    1   E_FLUSH:
      235      232    1     CALL CPC$WRITEMSGE (B$TCB.ALT$ -> B$EXCFR.ERR);
      236      233    1     RETURN;
      237      234    1   END     CPA$FLUSH;
      238      235        %EOD;

PL6.E3A0      #002=CPA$FLUSH File=CPA$SUBR.:E05TSI                               TUE 07/29/97 11:17 Page:42   
--  Include file information  --

   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$FLUSH.

   Procedure CPA$FLUSH requires 15 words for executable code.
   Procedure CPA$FLUSH requires 6 words of local(AUTO) storage.

PL6.E3A0      #002=CPA$FLUSH File=CPA$SUBR.:E05TSI                               TUE 07/29/97 11:17 Page:43   

 Object Unit name= CPA$FLUSH                                  File name= CPA$SUBR.:E05TOU
 UTS= JUL 29 '97 11:17:57.08 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    15     17  CPA$FLUSH

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        0  CPA$FLUSH

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       6 CPC$WRITEMSGE
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                B_VECTNIL
PL6.E3A0      #002=CPA$FLUSH File=CPA$SUBR.:E05TSI                               TUE 07/29/97 11:17 Page:44   


      213        1        /*T***********************************************************/
      214        2        /*T*                                                         */
      215        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      216        4        /*T*                                                         */
      217        5        /*T***********************************************************/
      218        6        /*F*    NAME:    CPA$FLUSH
      219        7                PURPOSE:    If a command stream exists, it is deleted.
      220        8        */
      221        9        CPA$FLUSH:
      222       10          PROC;

     10  1 000000   000000 700200 xent  CPA$FLUSH    TSX0  ! X66_AUTO_0
         1 000001   000006 000000                    ZERO    6,0

      223       11        /**/
      224       12                %INCLUDE B_MACROS_C;
      225      123                %INCLUDE CP_6;
      226      204        /**/
      227      205    1   DCL CPC$WRITEMSGE ENTRY(6);
      228      206    1   DCL B$TCB$ PTR SYMREF;
      229      207        %B$TCB (STCLASS="BASED(B$TCB$)");
      230      210        %B$EXCFR;
      231      228        /**/
      232      229    1     CALL M$XFLUSH ALTRET(E_FLUSH);

    229  1 000002   460007 713400                    CLIMB   alt,+24583
         1 000003   000000 401760                    pmme    nvectors=0
         1 000004   000006 702000 1                  TSX2    E_FLUSH

      233      230    1     RETURN;

    230  1 000005   000000 702200 xent               TSX2  ! X66_ARET

      234      231    1   E_FLUSH:
      235      232    1     CALL CPC$WRITEMSGE (B$TCB.ALT$ -> B$EXCFR.ERR);

PL6.E3A0      #002=CPA$FLUSH File=CPA$SUBR.:E05TSI                               TUE 07/29/97 11:17 Page:45   
    232  1 000006   000000 470400 xsym  E_FLUSH      LDP0    B$TCB$
         1 000007   000000 471500                    LDP1    0,,PR0
         1 000010   100102 633500                    EPPR3   66,,PR1
         1 000011   200004 453500                    STP3    4,,AUTO
         1 000012   200004 630500                    EPPR0   4,,AUTO
         1 000013   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000014   000000 701000 xent               TSX1    CPC$WRITEMSGE
         1 000015   000000 011000                    NOP     0

      236      233    1     RETURN;

    233  1 000016   000000 702200 xent               TSX2  ! X66_ARET
      237      234    1   END     CPA$FLUSH;
      238      235        %EOD;

PL6.E3A0      #002=CPA$FLUSH File=CPA$SUBR.:E05TSI                               TUE 07/29/97 11:17 Page:46   
--  Include file information  --

   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$FLUSH.
PL6.E3A0      #002=CPA$FLUSH File=CPA$SUBR.:E05TSI                               TUE 07/29/97 11:17 Page:47   

 **** Variables and constants ****

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$EXCFR                    0-0-0/w STRC(144)   r     1 B$TCB


   Procedure CPA$FLUSH requires 15 words for executable code.
   Procedure CPA$FLUSH requires 6 words of local(AUTO) storage.
PL6.E3A0      #002=CPA$FLUSH File=CPA$SUBR.:E05TSI                               TUE 07/29/97 11:17 Page:48   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=CPA$FLUSH File=CPA$SUBR.:E05TSI                               TUE 07/29/97 11:17 Page:49   
          MINI XREF LISTING

B$EXCFR.ASL
       211**DCL       211--REDEF
B$EXCFR.ERR
       225**DCL       232<>CALL
B$EXCFR.ERR.ERR#
       225**DCL       225--REDEF
B$EXCFR.EVID
       224**DCL       224--REDEF     225--REDEF
B$EXCFR.IR
       212**DCL       212--REDEF
B$EXCFR.PREVSZ
       211**DCL       211--REDEF
B$EXCFR.SUBC
       223**DCL       223--REDEF     224--REDEF     224--REDEF
B$TCB.ALT$
       208**DCL       232>>CALL
B$TCB$
       206**DCL       208--IMP-PTR   232>>CALL
CPC$WRITEMSGE
       205**DCL-ENT   232--CALL
E_FLUSH
       232**LABEL     229--CALLALT
M$XFLUSH
       141**DCL-ENT   229--CALL

PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:50   
      239        1        /*T***********************************************************/
      240        2        /*T*                                                         */
      241        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      242        4        /*T*                                                         */
      243        5        /*T***********************************************************/
      244        6        /**********************************************************************/
      245        7        /*F*    NAME:    CPA$CONTINUE
      246        8                PURPOSE: To implement continuation of lines for IBEX
      247        9                CALL:    from X$PARSE
      248       10                INTERFACE: CXG$GETCMD
      249       11                INPUT:     P_PARAM
      250       12                OUTPUT:    SEG$2.NCHARS - size of last record read.
      251       13                DESCRIPTION:
      252       14                          CPA$CONTINUE is called by X$PARSE whenever
      253       15                          a semi-colon is found. This routine calls
      254       16                          CXG$GETCMD to read the next record.
      255       17        */
      256       18        /**********************************************************************/
      257       19        CPA$CONTINUE: PROC (P_PARAM);
      258       20        /***** include files *****/
      259       21          %INCLUDE B$JIT;
      260      311          %INCLUDE CP_6;
      261      392          %INCLUDE CP_6_SUBS;
      262      932          %INCLUDE CP_MACROS_C;
      263     1684          %INCLUDE CP_PERR_C;
      264     2022          %INCLUDE CP_SUBS_C;
      265     2939          %INCLUDE XU_MACRO_C;
      266     6045          %INCLUDE CP_DATA_R;
      267     8608        /***** fpts *****/
      268     8609          %FPT_READ (FPTN=FPT$READ,STCLASS=BASED);
      269     8648          %FPT_CLOSE (FPTN=FPT$CLOSE,STCLASS=BASED);
      270     8690          %SEG$2;
      271     8750          %B$ALT;
      272     8758          %B$TCB (STCLASS="BASED(B$TCB$)");
      273     8761          %F$DCB;
      274     8818          %PARSE$PARAM (NAME=P_PARAM);
      275     8899        %PARSE$SYM (  NAME=P$S, STCLASS=BASED, SCRMODE="BIT(18)") ;
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:51   
      276     8937          %P$PCB (NAME=P$PCB,STCLASS=BASED);
      277     9138          %U$PARAM (NAME=U$PARAM,STCLASS="BASED(P_PARAM.USER$)");
      278     9154        /***** external routines *****/
      279     9155    1   DCL CPC$WRITEMSGE ENTRY (6);
      280     9156    1   DCL CPA$WR_CONTFILE ENTRY(3) ALTRET;
      281     9157    1   DCL CXP$POSTERR ENTRY(5);
      282     9158        /***** local declarations *****/
      283     9159    1   DCL CMD_SOURCE UBIN WORD;
      284     9160    1   DCL I SBIN AUTO;
      285     9161    1   DCL K9 UBIN WORD AUTO ;
      286     9162    1   DCL OFFSET UBIN WORD AUTO;
      287     9163    1   DCL NCHARS SBIN WORD AUTO;
      288     9164    1   DCL BUFF$ PTR AUTO ;
      289     9165        %CP_BLANK_PASS_INFO (STCLASS=AUTO) ;
      290     9170        /***** Based structures *****/
      291     9171    1     DCL CHAR$256 CHAR(%CPBUFFSIZE) BASED UNAL;
      292     9172    1     DCL CHAR$ONE CHAR(1) BASED UNAL;
      293     9173          %XUG_GETCMD (NAME=GET$CMD, STCLASS=BASED);
      294     9511        /***** Constants *****/
      295     9512          %ERR_CODE (NAME=E_M$YCCONT,MID#=CPA$IBEXMID,CODE#=E$M$YCCONT,STCLASS=CONSTANT);
      296     9532        /*E*    ERROR: CPA-E$M$YCCONT-0
      297     9533                MESSAGE: CONTINUATION not allowed on M$YC commands.
      298     9534        */
      299     9535          %ERR_CODE (NAME=E_M$LNKPMMECONT,MID#=CPA$IBEXMID,CODE#=E$M$LNKPMMECONT,STCLASS=
              9535              CONSTANT);
      300     9555        /*E*    ERROR: CPA-E$M$LNKPMMECONT-0
      301     9556                MESSAGE: CONTINUATION not allowed on M$LINK commands.
      302     9557        */
      303     9558          %ERR_CODE (NAME=E_BDSCAN,MID#=CPH$IBEXMID,CODE#=E$BDSCAN,STCLASS=CONSTANT);
      304     9578        /*E*    ERROR: CPH-E$BDSCAN-C
      305     9579                DESCRIPTION: Processing aborted.
      306     9580        */
      307     9581        %EJECT;
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:52   
      308     9582        /*
      309     9583             ***** If this is M$YC pmme then error and return
      310     9584                   without doing anything more ...
      311     9585        */
      312     9586    1     IF B$JIT.CPFLAGS1 & %CP_YCPMME#
      313     9587    1        THEN
      314     9588    2           DO;
      315     9589    2              CALL CXP$POSTERR (U$PARAM.ERRBUF$,P_PARAM.CHARPOS,E_M$YCCONT);
      316     9590    2              RETURN;
      317     9591    2           END;
      318     9592        /*
      319     9593             ***** If this is M$LIMK pmme then error and return
      320     9594                   without doing anything more ...
      321     9595        */
      322     9596    1     IF B$JIT.CPFLAGS1 & %CP_LNKPMME#
      323     9597    1        THEN
      324     9598    2           DO;
      325     9599    2              CALL CXP$POSTERR (U$PARAM.ERRBUF$,P_PARAM.CHARPOS,E_M$LNKPMMECONT);
      326     9600    2              RETURN;
      327     9601    2           END;
      328     9602    1     SEG$2.FLAGS.CONTINUED = %YES#;
      329     9603        /*
      330     9604             ***** If this command is a RUN UNIT we will write
      331     9605                   this record into an XEQ file. This file will
      332     9606                   be read by the run unit to process the continuation.
      333     9607                   IBEX must first make a pass to check syntax ...
      334     9608        */
      335     9609    1     IF SEG$2.FLAGS.RUNITCMD
      336     9610    1        THEN
      337     9611    2           DO ;
      338     9612    2             NCHARS = P_PARAM.CHARPOS ;
      339     9613    2             CALL CPA$WR_CONTFILE (U$PARAM.GETCMD$->GET$CMD, %YES#, NCHARS)
      340     9614    2                                   ALTRET(E_CONTINUATION);
      341     9615    2           END ; /* Then Do */
      342     9616    1     RETURN;
      343     9617        /**/
      344     9618    1   E_CONTINUATION:
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:53   
      345     9619    1     CALL CPC$WRITEMSGE (B$TCB.ALT$ -> B$ALT.ERR,,M$IBEX1_NUM);
      346     9620    1     RETURN;
      347     9621    1   END CPA$CONTINUE;
      348     9622        %EOD;

PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:54   
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_PERR_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$CONTINUE.

   Procedure CPA$CONTINUE requires 68 words for executable code.
   Procedure CPA$CONTINUE requires 16 words of local(AUTO) storage.

PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:55   

 Object Unit name= CPA$CONTINUE                               File name= CPA$SUBR.:E05TOU
 UTS= JUL 29 '97 11:18:00.08 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      5      5  CPA$CONTINUE
    2   Proc  even  none    68    104  CPA$CONTINUE
    3  RoData even  none     4      4  CPA$CONTINUE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        1  CPA$CONTINUE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       5 CXP$POSTERR
         yes           Std       6 CPC$WRITEMSGE
 yes     yes           Std       3 CPA$WR_CONTFILE
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:56   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    SEG2$                            r    B$JIT$
r    B$TCB$                                M$IBEX1_NUM                           B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:57   


      239        1        /*T***********************************************************/
      240        2        /*T*                                                         */
      241        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      242        4        /*T*                                                         */
      243        5        /*T***********************************************************/
      244        6        /**********************************************************************/
      245        7        /*F*    NAME:    CPA$CONTINUE
      246        8                PURPOSE: To implement continuation of lines for IBEX
      247        9                CALL:    from X$PARSE
      248       10                INTERFACE: CXG$GETCMD
      249       11                INPUT:     P_PARAM
      250       12                OUTPUT:    SEG$2.NCHARS - size of last record read.
      251       13                DESCRIPTION:
      252       14                          CPA$CONTINUE is called by X$PARSE whenever
      253       15                          a semi-colon is found. This routine calls
      254       16                          CXG$GETCMD to read the next record.
      255       17        */
      256       18        /**********************************************************************/
      257       19        CPA$CONTINUE: PROC (P_PARAM);

     19  2 000000   000000 700200 xent  CPA$CONTINUE TSX0  ! X66_AUTO_1
         2 000001   000020 000001                    ZERO    16,1

      258       20        /***** include files *****/
      259       21          %INCLUDE B$JIT;
      260      311          %INCLUDE CP_6;
      261      392          %INCLUDE CP_6_SUBS;
      262      932          %INCLUDE CP_MACROS_C;
      263     1684          %INCLUDE CP_PERR_C;
      264     2022          %INCLUDE CP_SUBS_C;
      265     2939          %INCLUDE XU_MACRO_C;
      266     6045          %INCLUDE CP_DATA_R;
      267     8608        /***** fpts *****/
      268     8609          %FPT_READ (FPTN=FPT$READ,STCLASS=BASED);
      269     8648          %FPT_CLOSE (FPTN=FPT$CLOSE,STCLASS=BASED);
      270     8690          %SEG$2;
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:58   
      271     8750          %B$ALT;
      272     8758          %B$TCB (STCLASS="BASED(B$TCB$)");
      273     8761          %F$DCB;
      274     8818          %PARSE$PARAM (NAME=P_PARAM);
      275     8899        %PARSE$SYM (  NAME=P$S, STCLASS=BASED, SCRMODE="BIT(18)") ;
      276     8937          %P$PCB (NAME=P$PCB,STCLASS=BASED);
      277     9138          %U$PARAM (NAME=U$PARAM,STCLASS="BASED(P_PARAM.USER$)");
      278     9154        /***** external routines *****/
      279     9155    1   DCL CPC$WRITEMSGE ENTRY (6);
      280     9156    1   DCL CPA$WR_CONTFILE ENTRY(3) ALTRET;
      281     9157    1   DCL CXP$POSTERR ENTRY(5);
      282     9158        /***** local declarations *****/
      283     9159    1   DCL CMD_SOURCE UBIN WORD;
      284     9160    1   DCL I SBIN AUTO;
      285     9161    1   DCL K9 UBIN WORD AUTO ;
      286     9162    1   DCL OFFSET UBIN WORD AUTO;
      287     9163    1   DCL NCHARS SBIN WORD AUTO;
      288     9164    1   DCL BUFF$ PTR AUTO ;
      289     9165        %CP_BLANK_PASS_INFO (STCLASS=AUTO) ;
      290     9170        /***** Based structures *****/
      291     9171    1     DCL CHAR$256 CHAR(%CPBUFFSIZE) BASED UNAL;
      292     9172    1     DCL CHAR$ONE CHAR(1) BASED UNAL;
      293     9173          %XUG_GETCMD (NAME=GET$CMD, STCLASS=BASED);
      294     9511        /***** Constants *****/
      295     9512          %ERR_CODE (NAME=E_M$YCCONT,MID#=CPA$IBEXMID,CODE#=E$M$YCCONT,STCLASS=CONSTANT);
      296     9532        /*E*    ERROR: CPA-E$M$YCCONT-0
      297     9533                MESSAGE: CONTINUATION not allowed on M$YC commands.
      298     9534        */
      299     9535          %ERR_CODE (NAME=E_M$LNKPMMECONT,MID#=CPA$IBEXMID,CODE#=E$M$LNKPMMECONT,STCLASS=
              9535              CONSTANT);
      300     9555        /*E*    ERROR: CPA-E$M$LNKPMMECONT-0
      301     9556                MESSAGE: CONTINUATION not allowed on M$LINK commands.
      302     9557        */
      303     9558          %ERR_CODE (NAME=E_BDSCAN,MID#=CPH$IBEXMID,CODE#=E$BDSCAN,STCLASS=CONSTANT);
      304     9578        /*E*    ERROR: CPH-E$BDSCAN-C
      305     9579                DESCRIPTION: Processing aborted.
      306     9580        */
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:59   
      307     9581        %EJECT;
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:60   
      308     9582        /*
      309     9583             ***** If this is M$YC pmme then error and return
      310     9584                   without doing anything more ...
      311     9585        */
      312     9586    1     IF B$JIT.CPFLAGS1 & %CP_YCPMME#

   9586  2 000002   000000 470400 xsym               LDP0    B$JIT$
         2 000003   000143 236100                    LDQ     99,,PR0
         2 000004   000003 376000 1                  ANQ     E_M$LNKPMMECONT+2
         2 000005   000023 600000 2                  TZE     s:9596

      313     9587    1        THEN
      314     9588    2           DO;

      315     9589    2              CALL CXP$POSTERR (U$PARAM.ERRBUF$,P_PARAM.CHARPOS,E_M$YCCONT);

   9589  2 000006   200003 471500                    LDP1    @P_PARAM,,AUTO
         2 000007   100006 473500                    LDP3    6,,PR1
         2 000010   000000 236000 3                  LDQ     0
         2 000011   200016 756100                    STQ     NCHARS+6,,AUTO
         2 000012   200003 236100                    LDQ     @P_PARAM,,AUTO
         2 000013   000004 036003                    ADLQ    4,DU
         2 000014   200015 756100                    STQ     NCHARS+5,,AUTO
         2 000015   200014 453500                    STP3    NCHARS+4,,AUTO
         2 000016   200014 630500                    EPPR0   NCHARS+4,,AUTO
         2 000017   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000020   000000 701000 xent               TSX1    CXP$POSTERR
         2 000021   000000 011000                    NOP     0

      316     9590    2              RETURN;

   9590  2 000022   000000 702200 xent               TSX2  ! X66_ARET

      317     9591    2           END;
      318     9592        /*
      319     9593             ***** If this is M$LIMK pmme then error and return
      320     9594                   without doing anything more ...
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:61   
      321     9595        */
      322     9596    1     IF B$JIT.CPFLAGS1 & %CP_LNKPMME#

   9596  2 000023   000143 236100                    LDQ     99,,PR0
         2 000024   000004 376000 1                  ANQ     E_M$LNKPMMECONT+3
         2 000025   000043 600000 2                  TZE     s:9602

      323     9597    1        THEN
      324     9598    2           DO;

      325     9599    2              CALL CXP$POSTERR (U$PARAM.ERRBUF$,P_PARAM.CHARPOS,E_M$LNKPMMECONT);

   9599  2 000026   200003 471500                    LDP1    @P_PARAM,,AUTO
         2 000027   100006 473500                    LDP3    6,,PR1
         2 000030   000001 236000 3                  LDQ     1
         2 000031   200016 756100                    STQ     NCHARS+6,,AUTO
         2 000032   200003 236100                    LDQ     @P_PARAM,,AUTO
         2 000033   000004 036003                    ADLQ    4,DU
         2 000034   200015 756100                    STQ     NCHARS+5,,AUTO
         2 000035   200014 453500                    STP3    NCHARS+4,,AUTO
         2 000036   200014 630500                    EPPR0   NCHARS+4,,AUTO
         2 000037   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000040   000000 701000 xent               TSX1    CXP$POSTERR
         2 000041   000000 011000                    NOP     0

      326     9600    2              RETURN;

   9600  2 000042   000000 702200 xent               TSX2  ! X66_ARET

      327     9601    2           END;
      328     9602    1     SEG$2.FLAGS.CONTINUED = %YES#;

   9602  2 000043   000000 471400 xsym               LDP1    SEG2$
         2 000044   002000 236003                    LDQ     1024,DU
         2 000045   100000 256100                    ORSQ    0,,PR1

      329     9603        /*
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:62   
      330     9604             ***** If this command is a RUN UNIT we will write
      331     9605                   this record into an XEQ file. This file will
      332     9606                   be read by the run unit to process the continuation.
      333     9607                   IBEX must first make a pass to check syntax ...
      334     9608        */
      335     9609    1     IF SEG$2.FLAGS.RUNITCMD

   9609  2 000046   100000 430100                    FSZN    0,,PR1
         2 000047   000066 605000 2                  TPL     s:9616

      336     9610    1        THEN
      337     9611    2           DO ;

      338     9612    2             NCHARS = P_PARAM.CHARPOS ;

   9612  2 000050   200003 473500                    LDP3    @P_PARAM,,AUTO
         2 000051   300004 235100                    LDA     4,,PR3
         2 000052   200010 755100                    STA     NCHARS,,AUTO

      339     9613    2             CALL CPA$WR_CONTFILE (U$PARAM.GETCMD$->GET$CMD, %YES#, NCHARS)

   9613  2 000053   300006 474500                    LDP4    6,,PR3
         2 000054   400014 475500                    LDP5    12,,PR4
         2 000055   200010 636500                    EPPR6   NCHARS,,AUTO
         2 000056   200016 456500                    STP6    NCHARS+6,,AUTO
         2 000057   000002 236000 3                  LDQ     2
         2 000060   200015 756100                    STQ     NCHARS+5,,AUTO
         2 000061   200014 455500                    STP5    NCHARS+4,,AUTO
         2 000062   200014 630500                    EPPR0   NCHARS+4,,AUTO
         2 000063   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000064   000000 701000 xent               TSX1    CPA$WR_CONTFILE
         2 000065   000067 702000 2                  TSX2    E_CONTINUATION

      340     9614    2                                   ALTRET(E_CONTINUATION);
      341     9615    2           END ; /* Then Do */

      342     9616    1     RETURN;
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:63   

   9616  2 000066   000000 702200 xent               TSX2  ! X66_ARET

      343     9617        /**/
      344     9618    1   E_CONTINUATION:
      345     9619    1     CALL CPC$WRITEMSGE (B$TCB.ALT$ -> B$ALT.ERR,,M$IBEX1_NUM);

   9619  2 000067   000000 470400 xsym  E_CONTINUAT* LDP0    B$TCB$
         2 000070   000000 471500                    LDP1    0,,PR0
         2 000071   000003 236000 3                  LDQ     3
         2 000072   200016 756100                    STQ     NCHARS+6,,AUTO
         2 000073   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000074   200015 756100                    STQ     NCHARS+5,,AUTO
         2 000075   100102 633500                    EPPR3   66,,PR1
         2 000076   200014 453500                    STP3    NCHARS+4,,AUTO
         2 000077   200014 630500                    EPPR0   NCHARS+4,,AUTO
         2 000100   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000101   000000 701000 xent               TSX1    CPC$WRITEMSGE
         2 000102   000000 011000                    NOP     0

      346     9620    1     RETURN;

   9620  2 000103   000000 702200 xent               TSX2  ! X66_ARET
      347     9621    1   END CPA$CONTINUE;
      348     9622        %EOD;

PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:64   
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_PERR_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$CONTINUE.
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:65   

 **** Variables and constants ****

  ****  Section 001 RoData CPA$CONTINUE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/w STRC        r     1 E_M$LNKPMMECONT            0-0-0/w STRC        r     1 E_M$YCCONT

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @P_PARAM                  10-0-0/w SBIN        r     1 NCHARS
    *0-0-0/w STRC(270)   r     1 P_PARAM

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w UBIN        r     1 M$IBEX1_NUM                0-0-0/w PTR         r     1 SEG2$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/d STRC(1512)  r     1 GET$CMD                    0-0-0/w ASTR(153)   r     1 P$S
     0-0-0/w STRC(6264)  r     1 SEG$2                      0-0-0/w STRC(576)   r     1 U$PARAM

PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:66   

   Procedure CPA$CONTINUE requires 68 words for executable code.
   Procedure CPA$CONTINUE requires 16 words of local(AUTO) storage.
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:67   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:68   
          MINI XREF LISTING

B$ALT.CODE
      8752**DCL      8752--REDEF    8753--REDEF    8753--REDEF
B$ALT.ERR
      8753**DCL      9619<>CALL
B$ALT.ERR.ERR#
      8754**DCL      8754--REDEF
B$ALT.EVID
      8753**DCL      8753--REDEF    8753--REDEF
B$JIT.CPFLAGS1
       124**DCL      9586>>IF       9596>>IF
B$JIT.CPFLAGS1.SLEAZE
       129**DCL       129--REDEF
B$JIT.ERR.MID
        36**DCL        36--REDEF
B$JIT.JRESPEAK
       197**DCL       198--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       306**DCL       306--REDEF     307--REDEF
B$JIT.PNR
       210**DCL       210--REDEF
B$JIT.TSLINE
       304**DCL       305--REDEF
B$JIT$
      8541**DCL        30--IMP-PTR  9586>>IF       9596>>IF
B$TCB.ALT$
      8759**DCL      9619>>CALL
B$TCB$
      8543**DCL      8759--IMP-PTR  9619>>CALL
CAMR_REC.ACSVEH_
      7580**DCL      7581--REDEF
CAMR_REC.ALTKEYS_
      7586**DCL      7587--REDEF    7587--REDEF
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:69   
CAMR_REC.HDR_
      7585**DCL      7586--REDEF
CAMR_REC.TAB_
      7584**DCL      7585--REDEF
CAMR_REC.UHL_
      7578**DCL      7579--REDEF    7579--REDEF
CAMR_REC.V.FSN#
      7618**DCL      7618--REDEF    7618--REDEF
CAMR_REC.WSN_
      7584**DCL      7584--REDEF
CFPT_CLOSE.SN_
      6422**DCL      6422--REDEF
CFPT_CLOSE.UTL_
      6423**DCL      6423--REDEF
CFPT_CLOSE.V.EXPIRE#
      6437**DCL      6437--REDEF
CFPT_CLOSE.V.TYPE#
      6435**DCL      6435--REDEF
CFPT_CLOSE.V.XTNSIZE#
      6432**DCL      6432--REDEF    6434--REDEF
CFPT_OPEN.ACSVEH_
      6357**DCL      6358--REDEF
CFPT_OPEN.ALTKEYS_
      6363**DCL      6364--REDEF    6364--REDEF
CFPT_OPEN.HDR_
      6362**DCL      6363--REDEF
CFPT_OPEN.TAB_
      6361**DCL      6362--REDEF
CFPT_OPEN.UHL_
      6355**DCL      6356--REDEF    6356--REDEF
CFPT_OPEN.V.FSN#
      6395**DCL      6395--REDEF    6395--REDEF
CFPT_OPEN.WSN_
      6361**DCL      6361--REDEF
CFPT_READ.STATION_
      6461**DCL      6462--REDEF
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:70   
CFPT_READ.V.DVBYTE.REREAD#
      6473**DCL      6473--REDEF
CFPT_READ.V.INDX#
      6471**DCL      6471--REDEF
CFPT_READUC.STATION_
      6831**DCL      6832--REDEF
CFPT_READUC.V.DVBYTE.REREAD#
      6843**DCL      6843--REDEF
CFPT_READUC.V.INDX#
      6841**DCL      6841--REDEF
CFPT_TRTN.V.IR#
      7067**DCL      7068--REDEF
CFPT_WRITE.STATION_
      6499**DCL      6499--REDEF
CFPT_WRITE.V.DVBYTE.VFC#
      6506**DCL      6506--REDEF
CFPT_WRITEUC.STATION_
      6799**DCL      6799--REDEF
CFPT_WRITEUC.V.DVBYTE.VFC#
      6806**DCL      6806--REDEF
CFPT_XXX.V.STEPCC#
      7779**DCL      7779--REDEF
CGETCMD.OUT$
      7800**DCL      7806--REDEF
CPA$WR_CONTFILE
      9156**DCL-ENT  9613--CALL
CPC$WRITEMSGE
      9155**DCL-ENT  9619--CALL
CVLP_TRMCTL.BREAKCOUNT
      7391**DCL      7392--REDEF
CVLP_WINDOW.FWINDOW#
      7487**DCL      7487--REDEF    7488--REDEF
CXP$POSTERR
      9157**DCL-ENT  9589--CALL     9599--CALL
E_CONTINUATION
      9619**LABEL    9613--CALLALT
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:71   
E_M$LNKPMMECONT
      9548**DCL      9599<>CALL
E_M$YCCONT
      9525**DCL      9589<>CALL
F$DCB.ACTPOS
      8794**DCL      8794--REDEF
F$DCB.ARS#
      8768**DCL      8768--REDEF
F$DCB.ATTR
      8787**DCL      8788--REDEF
F$DCB.BORROW
      8802**DCL      8802--REDEF    8802--REDEF    8802--REDEF
F$DCB.DCBNAME.L
      8816**DCL      8816--IMP-SIZ
F$DCB.EOMCHAR#
      8772**DCL      8772--REDEF
F$DCB.FLDID
      8797**DCL      8797--REDEF
F$DCB.FORM$
      8791**DCL      8791--REDEF
F$DCB.FSECT
      8807**DCL      8807--REDEF
F$DCB.FSN#
      8784**DCL      8784--REDEF    8784--REDEF    8785--REDEF
F$DCB.HEADER$
      8790**DCL      8790--REDEF
F$DCB.IXTNSIZE#
      8788**DCL      8788--REDEF
F$DCB.LASTSTA$
      8777**DCL      8777--REDEF
F$DCB.LVL
      8803**DCL      8803--REDEF
F$DCB.NAME#.C
      8778**DCL      8778--REDEF
F$DCB.NOEOF
      8800**DCL      8800--REDEF
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:72   
F$DCB.NRECS#
      8789**DCL      8789--REDEF
F$DCB.NRECX
      8808**DCL      8808--REDEF
F$DCB.OHDR
      8800**DCL      8800--REDEF
F$DCB.ORG#
      8783**DCL      8783--REDEF
F$DCB.PRECNO
      8806**DCL      8806--REDEF
F$DCB.RCSZ
      8812**DCL      8812--REDEF
F$DCB.RES#
      8779**DCL      8779--REDEF
F$DCB.SETX
      8791**DCL      8791--REDEF
F$DCB.TAB$
      8791**DCL      8791--REDEF
F$DCB.TDA
      8805**DCL      8806--REDEF
F$DCB.WSN#
      8779**DCL      8779--REDEF
FPT$CLOSE.SN_
      8671**DCL      8671--REDEF
FPT$CLOSE.UTL_
      8672**DCL      8672--REDEF
FPT$CLOSE.V.EXPIRE#
      8686**DCL      8686--REDEF
FPT$CLOSE.V.TYPE#
      8684**DCL      8684--REDEF
FPT$CLOSE.V.XTNSIZE#
      8681**DCL      8681--REDEF    8683--REDEF
FPT$READ.STATION_
      8629**DCL      8630--REDEF
FPT$READ.V.DVBYTE.REREAD#
      8641**DCL      8641--REDEF
PL6.E3A0      #003=CPA$CONTINUE File=CPA$SUBR.:E05TSI                            TUE 07/29/97 11:18 Page:73   
FPT$READ.V.INDX#
      8639**DCL      8639--REDEF
GET$CMD
      9186**DCL      9613<>CALL
GET$CMD.OUT$
      9191**DCL      9197--REDEF
M$IBEX1_NUM
      8547**DCL      9619<>CALL
NCHARS
      9163**DCL      9612<<ASSIGN   9613<>CALL
P$S.COUNT
      8929**DCL      8932--IMP-SIZ
P_PARAM
      8837**DCL        19--PROC
P_PARAM.CHARPOS
      8875**DCL      9589<>CALL     9599<>CALL     9612>>ASSIGN
P_PARAM.USER$
      8885**DCL      9139--IMP-PTR  9589>>CALL     9599>>CALL     9613>>CALL
SEG$2.FLAGS.CONTINUED
      8700**DCL      9602<<ASSIGN
SEG$2.FLAGS.RUNITCMD
      8701**DCL      9609>>IF
SEG2$
      8534**DCL      8691--IMP-PTR  9602>>ASSIGN   9609>>IF
U$PARAM.ERRBUF$
      9140**DCL      9589<>CALL     9599<>CALL
U$PARAM.GETCMD$
      9149**DCL      9613>>CALL

PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:74   
      349        1        /*T***********************************************************/
      350        2        /*T*                                                         */
      351        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      352        4        /*T*                                                         */
      353        5        /*T***********************************************************/
      354        6        /**********************************************************************/
      355        7        /*F*   NAME:   CPA$ECHOCC
      356        8               PURPOSE: To print the control command in CPBUFF
      357        9               INTERFACE: CPE$LISTOUT
      358       10               INPUT:  CMD_SOURCE - where the record came from
      359       11                       DIAG# - If YES then use M$DO else use M$LL
      360       12               OUTPUT: commands echoed to output device
      361       13               DESCRIPTION: Commands are echoed to the logical resource 'ME'
      362       14                       whenever commands are being read from a command file
      363       15                       and the echo mode is set or whenever the user is in batch.
      364       16                       Echoing is performed through the M$LL dcb.
      365       17                       Command file commands are preceded with a '$' instead of a
      366       18                       '!'.
      367       19        */
      368       20        /**********************************************************************/
      369       21        CPA$ECHOCC:
      370       22          PROC (CMD_SOURCE,DIAG#);
      371       23        /**/
      372       24        %INCLUDE B$JIT;
      373      314        %INCLUDE CP_6;
      374      395        %INCLUDE CP_6_SUBS;
      375      935        %INCLUDE CP_MACROS_C;
      376     1687        %INCLUDE CP_SUBS_C;
      377     2604        %INCLUDE XU_MACRO_C;
      378     5710        %INCLUDE CP_DATA_R;
      379     8273        %SEG$2;
      380     8333        %XUG_GETCMD (NAME=GET$CMD, STCLASS=BASED) ;
      381     8671        %CP$BUFF (NAME=CP$BUFF,STCLASS=BASED);
      382     8674        /**/
      383     8675        %INCLUDE CXG_ENTRY ;
      384     8687    1   DCL CPC$OPEN_DO ENTRY ;
      385     8688    1   DCL CPC$OPEN_LL ENTRY ;
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:75   
      386     8689    1   DCL CPF$SET_PROMPT ENTRY(2);
      387     8690    1   DCL CMD_SOURCE UBIN WORD;
      388     8691    1   DCL DIAG# BIT(1) ALIGNED;
      389     8692        %EJECT;
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:76   
      390     8693        /*
      391     8694             ***** If in TP mode then do not try to echo ...
      392     8695        */
      393     8696    1     IF B$JIT.MODE = %M_TP#
      394     8697    1        THEN
      395     8698    1           RETURN;
      396     8699        /*
      397     8700             ***** If SKIP_ECHO then reset and return...
      398     8701        */
      399     8702    1     IF SEG$2.FLAGS.SKIP_ECHO
      400     8703    1        THEN
      401     8704    2           DO;
      402     8705    2              SEG$2.FLAGS.SKIP_ECHO = %NO#;
      403     8706    2              RETURN;
      404     8707    2           END;
      405     8708        /*
      406     8709             ***** If there are no characters to echo,
      407     8710                   then don't bother trying ...
      408     8711        */
      409     8712    1     IF SEG$2.NCHARS = 0
      410     8713    1        THEN
      411     8714    1           RETURN;
      412     8715        /*
      413     8716             ***** Frame the buffer to be echoed...
      414     8717        */
      415     8718        /*
      416     8719             ***** Do it...
      417     8720        */
      418     8721    2     DO CASE(CMD_SOURCE) ;
      419     8722    2         CASE(CONSOLE) ;
      420     8723    2             RETURN ;
      421     8724    2         CASE(XEQFILE) ;
      422     8725    2             IF NOT(B$JIT.CPFLAGS1 & %CP_ECHO#) AND NOT DIAG#
      423     8726    2               THEN
      424     8727    2                 RETURN ;
      425     8728    2             CALL CPF$SET_PROMPT (SEG$2.GETCMD$->GET$CMD.RPROMPT_, PRMT_R);
      426     8729    2         CASE(ELSE) ;
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:77   
      427     8730    2             SEG$2.GETCMD$->GET$CMD.RPROMPT_ = VECTOR(NIL) ;
      428     8731    2     END ; /* Do Case */
      429     8732
      430     8733    1     IF DIAG#
      431     8734    1         THEN                          /* Use M$DO */
      432     8735    2           DO ;
      433     8736    2             CALL CPC$OPEN_DO ;
      434     8737    2             SEG$2.GETCMD$->GET$CMD.DCB_PARAM# = M$DO_NUM ;
      435     8738    2           END ; /* Then Do */
      436     8739    1         ELSE
      437     8740    2           DO ;
      438     8741    2             CALL CPC$OPEN_LL ;
      439     8742    2             SEG$2.GETCMD$->GET$CMD.DCB_PARAM# = SEG$2.LLDCB# ;
      440     8743    2           END ; /* Else Do */
      441     8744    1     CALL CXG$ECHO (SEG$2.GETCMD$->GET$CMD) ALTRET(ECHO_ALT) ;
      442     8745    1   ECHO_ALT:
      443     8746    1     RETURN ;
      444     8747    1   END CPA$ECHOCC;
      445     8748        %EOD;

PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:78   
--  Include file information  --

   CXG_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$ECHOCC.

   Procedure CPA$ECHOCC requires 75 words for executable code.
   Procedure CPA$ECHOCC requires 8 words of local(AUTO) storage.

PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:79   

 Object Unit name= CPA$ECHOCC                                 File name= CPA$SUBR.:E05TOU
 UTS= JUL 29 '97 11:18:27.68 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    75    113  CPA$ECHOCC
    2  RoData even  none     4      4  CPA$ECHOCC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        2  CPA$ECHOCC

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 CPF$SET_PROMPT
 yes     yes           Std       1 CXG$ECHO
         yes           Std       0 CPC$OPEN_DO
         yes           Std       0 CPC$OPEN_LL
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:80   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    SEG2$                            r    B$JIT$
     M$DO_NUM                              B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:81   


      349        1        /*T***********************************************************/
      350        2        /*T*                                                         */
      351        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      352        4        /*T*                                                         */
      353        5        /*T***********************************************************/
      354        6        /**********************************************************************/
      355        7        /*F*   NAME:   CPA$ECHOCC
      356        8               PURPOSE: To print the control command in CPBUFF
      357        9               INTERFACE: CPE$LISTOUT
      358       10               INPUT:  CMD_SOURCE - where the record came from
      359       11                       DIAG# - If YES then use M$DO else use M$LL
      360       12               OUTPUT: commands echoed to output device
      361       13               DESCRIPTION: Commands are echoed to the logical resource 'ME'
      362       14                       whenever commands are being read from a command file
      363       15                       and the echo mode is set or whenever the user is in batch.
      364       16                       Echoing is performed through the M$LL dcb.
      365       17                       Command file commands are preceded with a '$' instead of a
      366       18                       '!'.
      367       19        */
      368       20        /**********************************************************************/
      369       21        CPA$ECHOCC:
      370       22          PROC (CMD_SOURCE,DIAG#);

     22  1 000000   000000 700200 xent  CPA$ECHOCC   TSX0  ! X66_AUTO_2
         1 000001   000010 000002                    ZERO    8,2

      371       23        /**/
      372       24        %INCLUDE B$JIT;
      373      314        %INCLUDE CP_6;
      374      395        %INCLUDE CP_6_SUBS;
      375      935        %INCLUDE CP_MACROS_C;
      376     1687        %INCLUDE CP_SUBS_C;
      377     2604        %INCLUDE XU_MACRO_C;
      378     5710        %INCLUDE CP_DATA_R;
      379     8273        %SEG$2;
      380     8333        %XUG_GETCMD (NAME=GET$CMD, STCLASS=BASED) ;
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:82   
      381     8671        %CP$BUFF (NAME=CP$BUFF,STCLASS=BASED);
      382     8674        /**/
      383     8675        %INCLUDE CXG_ENTRY ;
      384     8687    1   DCL CPC$OPEN_DO ENTRY ;
      385     8688    1   DCL CPC$OPEN_LL ENTRY ;
      386     8689    1   DCL CPF$SET_PROMPT ENTRY(2);
      387     8690    1   DCL CMD_SOURCE UBIN WORD;
      388     8691    1   DCL DIAG# BIT(1) ALIGNED;
      389     8692        %EJECT;
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:83   
      390     8693        /*
      391     8694             ***** If in TP mode then do not try to echo ...
      392     8695        */
      393     8696    1     IF B$JIT.MODE = %M_TP#

   8696  1 000002   000000 470400 xsym               LDP0    B$JIT$
         1 000003   000000 236100                    LDQ     0,,PR0
         1 000004   740000 376003                    ANQ     -16384,DU
         1 000005   200000 116003                    CMPQ    65536,DU
         1 000006   000010 601000 1                  TNZ     s:8702

      394     8697    1        THEN
      395     8698    1           RETURN;

   8698  1 000007   000000 702200 xent               TSX2  ! X66_ARET

      396     8699        /*
      397     8700             ***** If SKIP_ECHO then reset and return...
      398     8701        */
      399     8702    1     IF SEG$2.FLAGS.SKIP_ECHO

   8702  1 000010   000000 471400 xsym               LDP1    SEG2$
         1 000011   100000 236100                    LDQ     0,,PR1
         1 000012   040000 316003                    CANQ    16384,DU
         1 000013   000017 600000 1                  TZE     s:8712

      400     8703    1        THEN
      401     8704    2           DO;

      402     8705    2              SEG$2.FLAGS.SKIP_ECHO = %NO#;

   8705  1 000014   000000 236000 2                  LDQ     0
         1 000015   100000 356100                    ANSQ    0,,PR1

      403     8706    2              RETURN;

   8706  1 000016   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:84   

      404     8707    2           END;
      405     8708        /*
      406     8709             ***** If there are no characters to echo,
      407     8710                   then don't bother trying ...
      408     8711        */
      409     8712    1     IF SEG$2.NCHARS = 0

   8712  1 000017   100001 220100                    LDX0    1,,PR1
         1 000020   000022 601000 1                  TNZ     s:8721

      410     8713    1        THEN
      411     8714    1           RETURN;

   8714  1 000021   000000 702200 xent               TSX2  ! X66_ARET

      412     8715        /*
      413     8716             ***** Frame the buffer to be echoed...
      414     8717        */
      415     8718        /*
      416     8719             ***** Do it...
      417     8720        */
      418     8721    2     DO CASE(CMD_SOURCE) ;

   8721  1 000022   200003 473500                    LDP3    @CMD_SOURCE,,AUTO
         1 000023   300000 235100                    LDA     0,,PR3
         1 000024   000004 115007                    CMPA    4,DL
         1 000025   000027 602005 1                  TNC     s:8721+5,AL
         1 000026   000055 710000 1                  TRA     s:8730
         1 000027   000055 710000 1                  TRA     s:8730
         1 000030   000033 710000 1                  TRA     s:8723
         1 000031   000055 710000 1                  TRA     s:8730
         1 000032   000034 710000 1                  TRA     s:8725

      419     8722    2         CASE(CONSOLE) ;

      420     8723    2             RETURN ;
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:85   

   8723  1 000033   000000 702200 xent               TSX2  ! X66_ARET

      421     8724    2         CASE(XEQFILE) ;

      422     8725    2             IF NOT(B$JIT.CPFLAGS1 & %CP_ECHO#) AND NOT DIAG#

   8725  1 000034   000143 236100                    LDQ     99,,PR0
         1 000035   000012 376000 xsym               ANQ     B_VECTNIL+10
         1 000036   000043 601000 1                  TNZ     s:8728
         1 000037   200004 474500                    LDP4    @DIAG#,,AUTO
         1 000040   400000 234100                    SZN     0,,PR4
         1 000041   000043 604000 1                  TMI     s:8728

      423     8726    2               THEN
      424     8727    2                 RETURN ;

   8727  1 000042   000000 702200 xent               TSX2  ! X66_ARET

      425     8728    2             CALL CPF$SET_PROMPT (SEG$2.GETCMD$->GET$CMD.RPROMPT_, PRMT_R);

   8728  1 000043   100173 474500                    LDP4    123,,PR1
         1 000044   000001 236000 2                  LDQ     1
         1 000045   200007 756100                    STQ     @DIAG#+3,,AUTO
         1 000046   400027 635500                    EPPR5   23,,PR4
         1 000047   200006 455500                    STP5    @DIAG#+2,,AUTO
         1 000050   200006 630500                    EPPR0   @DIAG#+2,,AUTO
         1 000051   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000052   000000 701000 xent               TSX1    CPF$SET_PROMPT
         1 000053   000000 011000                    NOP     0
         1 000054   000061 710000 1                  TRA     s:8733

      426     8729    2         CASE(ELSE) ;

      427     8730    2             SEG$2.GETCMD$->GET$CMD.RPROMPT_ = VECTOR(NIL) ;

   8730  1 000055   100173 474500                    LDP4    123,,PR1
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:86   
         1 000056   000002 237000 2                  LDAQ    2
         1 000057   400027 755100                    STA     23,,PR4
         1 000060   400030 756100                    STQ     24,,PR4

      428     8731    2     END ; /* Do Case */

      429     8732
      430     8733    1     IF DIAG#

   8733  1 000061   200004 470500                    LDP0    @DIAG#,,AUTO
         1 000062   000000 234100                    SZN     0,,PR0
         1 000063   000074 605000 1                  TPL     s:8741

      431     8734    1         THEN                          /* Use M$DO */
      432     8735    2           DO ;

      433     8736    2             CALL CPC$OPEN_DO ;

   8736  1 000064   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000065   000000 701000 xent               TSX1    CPC$OPEN_DO
         1 000066   000000 011000                    NOP     0

      434     8737    2             SEG$2.GETCMD$->GET$CMD.DCB_PARAM# = M$DO_NUM ;

   8737  1 000067   000000 470400 xsym               LDP0    SEG2$
         1 000070   000173 471500                    LDP1    123,,PR0
         1 000071   000000 235000 xsym               LDA     M$DO_NUM
         1 000072   100014 755100                    STA     12,,PR1

      435     8738    2           END ; /* Then Do */

   8738  1 000073   000104 710000 1                  TRA     s:8744

      436     8739    1         ELSE
      437     8740    2           DO ;

      438     8741    2             CALL CPC$OPEN_LL ;
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:87   

   8741  1 000074   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000075   000000 701000 xent               TSX1    CPC$OPEN_LL
         1 000076   000000 011000                    NOP     0

      439     8742    2             SEG$2.GETCMD$->GET$CMD.DCB_PARAM# = SEG$2.LLDCB# ;

   8742  1 000077   000000 470400 xsym               LDP0    SEG2$
         1 000100   000173 471500                    LDP1    123,,PR0
         1 000101   000000 236100                    LDQ     0,,PR0
         1 000102   777777 376007                    ANQ     -1,DL
         1 000103   100014 756100                    STQ     12,,PR1

      440     8743    2           END ; /* Else Do */

      441     8744    1     CALL CXG$ECHO (SEG$2.GETCMD$->GET$CMD) ALTRET(ECHO_ALT) ;

   8744  1 000104   000173 471500                    LDP1    123,,PR0
         1 000105   200006 451500                    STP1    @DIAG#+2,,AUTO
         1 000106   200006 630500                    EPPR0   @DIAG#+2,,AUTO
         1 000107   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000110   000000 701000 xent               TSX1    CXG$ECHO
         1 000111   000112 702000 1                  TSX2    ECHO_ALT

      442     8745    1   ECHO_ALT:
      443     8746    1     RETURN ;

   8746  1 000112   000000 702200 xent  ECHO_ALT     TSX2  ! X66_ARET
      444     8747    1   END CPA$ECHOCC;
      445     8748        %EOD;

PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:88   
--  Include file information  --

   CXG_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$ECHOCC.
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:89   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @CMD_SOURCE                4-0-0/w PTR         r     1 @DIAG#
    *0-0-0/w UBIN        r     1 CMD_SOURCE                *0-0-0/w BIT         r     1 DIAG#

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w UBIN        r     1 M$DO_NUM
     0-0-0/w PTR         r     1 SEG2$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/d STRC(1512)  r     1 GET$CMD
     0-0-0/w STRC(6264)  r     1 SEG$2


   Procedure CPA$ECHOCC requires 75 words for executable code.
   Procedure CPA$ECHOCC requires 8 words of local(AUTO) storage.
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:90   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:91   
          MINI XREF LISTING

B$JIT.CPFLAGS1
       127**DCL      8725>>IF
B$JIT.CPFLAGS1.SLEAZE
       132**DCL       132--REDEF
B$JIT.ERR.MID
        39**DCL        39--REDEF
B$JIT.JRESPEAK
       200**DCL       201--REDEF
B$JIT.MODE
        33**DCL      8696>>IF
B$JIT.ORIGINATOR_PORT.FROM_CR
       309**DCL       309--REDEF     310--REDEF
B$JIT.PNR
       213**DCL       213--REDEF
B$JIT.TSLINE
       307**DCL       308--REDEF
B$JIT$
      8206**DCL        33--IMP-PTR  8696>>IF       8725>>IF
CAMR_REC.ACSVEH_
      7245**DCL      7246--REDEF
CAMR_REC.ALTKEYS_
      7251**DCL      7252--REDEF    7252--REDEF
CAMR_REC.HDR_
      7250**DCL      7251--REDEF
CAMR_REC.TAB_
      7249**DCL      7250--REDEF
CAMR_REC.UHL_
      7243**DCL      7244--REDEF    7244--REDEF
CAMR_REC.V.FSN#
      7283**DCL      7283--REDEF    7283--REDEF
CAMR_REC.WSN_
      7249**DCL      7249--REDEF
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:92   
CFPT_CLOSE.SN_
      6087**DCL      6087--REDEF
CFPT_CLOSE.UTL_
      6088**DCL      6088--REDEF
CFPT_CLOSE.V.EXPIRE#
      6102**DCL      6102--REDEF
CFPT_CLOSE.V.TYPE#
      6100**DCL      6100--REDEF
CFPT_CLOSE.V.XTNSIZE#
      6097**DCL      6097--REDEF    6099--REDEF
CFPT_OPEN.ACSVEH_
      6022**DCL      6023--REDEF
CFPT_OPEN.ALTKEYS_
      6028**DCL      6029--REDEF    6029--REDEF
CFPT_OPEN.HDR_
      6027**DCL      6028--REDEF
CFPT_OPEN.TAB_
      6026**DCL      6027--REDEF
CFPT_OPEN.UHL_
      6020**DCL      6021--REDEF    6021--REDEF
CFPT_OPEN.V.FSN#
      6060**DCL      6060--REDEF    6060--REDEF
CFPT_OPEN.WSN_
      6026**DCL      6026--REDEF
CFPT_READ.STATION_
      6126**DCL      6127--REDEF
CFPT_READ.V.DVBYTE.REREAD#
      6138**DCL      6138--REDEF
CFPT_READ.V.INDX#
      6136**DCL      6136--REDEF
CFPT_READUC.STATION_
      6496**DCL      6497--REDEF
CFPT_READUC.V.DVBYTE.REREAD#
      6508**DCL      6508--REDEF
CFPT_READUC.V.INDX#
      6506**DCL      6506--REDEF
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:93   
CFPT_TRTN.V.IR#
      6732**DCL      6733--REDEF
CFPT_WRITE.STATION_
      6164**DCL      6164--REDEF
CFPT_WRITE.V.DVBYTE.VFC#
      6171**DCL      6171--REDEF
CFPT_WRITEUC.STATION_
      6464**DCL      6464--REDEF
CFPT_WRITEUC.V.DVBYTE.VFC#
      6471**DCL      6471--REDEF
CFPT_XXX.V.STEPCC#
      7444**DCL      7444--REDEF
CGETCMD.OUT$
      7465**DCL      7471--REDEF
CMD_SOURCE
      8690**DCL        21--PROC     8721>>DOCASE
CPC$OPEN_DO
      8687**DCL-ENT  8736--CALL
CPC$OPEN_LL
      8688**DCL-ENT  8741--CALL
CPF$SET_PROMPT
      8689**DCL-ENT  8728--CALL
CVLP_TRMCTL.BREAKCOUNT
      7056**DCL      7057--REDEF
CVLP_WINDOW.FWINDOW#
      7152**DCL      7152--REDEF    7153--REDEF
CXG$ECHO
      8682**DCL-ENT  8744--CALL
DIAG#
      8691**DCL        21--PROC     8725>>IF       8733>>IF
ECHO_ALT
      8746**LABEL    8744--CALLALT
GET$CMD
      8346**DCL      8744<>CALL
GET$CMD.DCB_PARAM#
      8526**DCL      8737<<ASSIGN   8742<<ASSIGN
PL6.E3A0      #004=CPA$ECHOCC File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:94   
GET$CMD.OUT$
      8351**DCL      8357--REDEF
GET$CMD.RPROMPT_
      8559**DCL      8728<>CALL     8730<<ASSIGN
M$DO_NUM
      8210**DCL      8737>>ASSIGN
SEG$2.FLAGS.SKIP_ECHO
      8279**DCL      8702>>IF       8705<<ASSIGN
SEG$2.GETCMD$
      8320**DCL      8728>>CALL     8730>>ASSIGN   8737>>ASSIGN   8742>>ASSIGN   8744>>CALL
SEG$2.LLDCB#
      8294**DCL      8742>>ASSIGN
SEG$2.NCHARS
      8295**DCL      8712>>IF
SEG2$
      8199**DCL      8274--IMP-PTR  8702>>IF       8705>>ASSIGN   8712>>IF       8728>>CALL     8730>>ASSIGN
      8737>>ASSIGN   8742>>ASSIGN   8742>>ASSIGN   8744>>CALL

PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:95   
      446        1        /*T***********************************************************/
      447        2        /*T*                                                         */
      448        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      449        4        /*T*                                                         */
      450        5        /*T***********************************************************/
      451        6        /**********************************************************************/
      452        7        /*I*    NAME: CPA$GETRES
      453        8                PUSPOSE: To get the lists of physical and pseudo resources.
      454        9                CALL: CALL CPA$GETRES ALTRET(xxx);
      455       10                INTERFACE: CPO$GET_RES
      456       11                DESCRIPTION: This routine front-ends the routine CPO$GET_RES
      457       12                             shich is shared by both IBEX and PRESCAN. It
      458       13                             is necessary for this routine to get a data page
      459       14                             stuff it's address into SEG$2.PHYS$ and call
      460       15                             CPO$GET_RES. If CPO$GET_RES altrets it may be
      461       16                             necessary to enlarge the data segment and try
      462       17                             again.
      463       18        */
      464       19        /*******************************************************************/
      465       20        /**/
      466       21        CPA$GETRES: PROC ALTRET;
      467       22        /***** Include files *****/
      468       23          %INCLUDE B_ERRORS_C;
      469     1150          %INCLUDE CP_6;
      470     1231          %INCLUDE CP_MACROS_C;
      471     1983          %INCLUDE CP_SUBS_C;
      472     2900          %INCLUDE XU_MACRO_C;
      473     6006          %INCLUDE CP_DATA_R;
      474     8569        /***** Local variables *****/
      475     8570    1     DCL PHYS_LIST_SIZE UBIN WORD AUTO;
      476     8571        /***** External routines *****/
      477     8572    1     DCL CPC$GETSEG ENTRY(2) ALTRET;
      478     8573    1     DCL CPO$GET_RES ENTRY(3) ALTRET;
      479     8574        /***** Based structures *****/
      480     8575          %SEG$2;
      481     8635          %B$TCB (STCLASS="BASED(B$TCB$)");
      482     8638          %B$ALT;
PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:96   
      483     8646          %VLP_PRES (FPTN=PHYS$LIST,STCLASS=BASED,N=9999);
      484     8662          %VLP_PSEUDO (FPTN=PSEUDO$LIST,STCLASS=BASED,N=PSEUDO_SLOTS);
      485     8678        %EJECT;
PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:97   
      486     8679        /*
      487     8680             ***** If we already have the list of PHYSICAL resources
      488     8681                   available on this system then do not get it again ...
      489     8682        */
      490     8683    1     IF SEG$2.PHYS$ ~= ADDR(NIL)
      491     8684    1        THEN
      492     8685    1           RETURN;
      493     8686        /*
      494     8687             ***** Get a data segment to store the PHYSICAL resource list ...
      495     8688        */
      496     8689    1     CALL CPC$GETSEG (SEG5$) ALTRET(E_GETSEG);
      497     8690    1     SEG$2.PHYS$ = SEG5$;
      498     8691    1     PHYS_LIST_SIZE =  1024;
      499     8692        /*
      500     8693             ***** Get the resource lists ...
      501     8694        */
      502     8695    1   GET_PHYS_LIST:
      503     8696    1     CALL CPO$GET_RES (SEG$2.PSEUDO$ -> PSEUDO$LIST, SEG$2.PHYS$,
      504     8697    1                       PHYS_LIST_SIZE) ALTRET(E_GETRES);
      505     8698    2     DO NEVER;
      506     8699    2   E_GETRES:
      507     8700    2        IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$NORMRM
      508     8701    2           THEN   /* Not enough memory */
      509     8702    3              DO;   /* Try again */
      510     8703    3                 CALL CPC$GETSEG (SEG5$) ALTRET(E_GETSEG);
      511     8704    3                 PHYS_LIST_SIZE = PHYS_LIST_SIZE + 1024;
      512     8705    3                 GOTO GET_PHYS_LIST;
      513     8706    3              END;
      514     8707    2           ELSE
      515     8708    2              ALTRETURN;
      516     8709    2     END;
      517     8710        /**/
      518     8711    1     RETURN;
      519     8712        /**/
      520     8713    1   E_GETSEG:
      521     8714    1     ALTRETURN;
      522     8715    1   END CPA$GETRES;
PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:98   
      523     8716        %EOD;

PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:99   
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$GETRES.

   Procedure CPA$GETRES requires 46 words for executable code.
   Procedure CPA$GETRES requires 8 words of local(AUTO) storage.

PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:100  

 Object Unit name= CPA$GETRES                                 File name= CPA$SUBR.:E05TOU
 UTS= JUL 29 '97 11:18:51.52 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    46     56  CPA$GETRES
    2  RoData even  none     1      1  CPA$GETRES

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        0  CPA$GETRES

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 CPC$GETSEG
 yes     yes           Std       3 CPO$GET_RES
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:101  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    SEG2$                            r    SEG5$
r    B$TCB$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:102  


      446        1        /*T***********************************************************/
      447        2        /*T*                                                         */
      448        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      449        4        /*T*                                                         */
      450        5        /*T***********************************************************/
      451        6        /**********************************************************************/
      452        7        /*I*    NAME: CPA$GETRES
      453        8                PUSPOSE: To get the lists of physical and pseudo resources.
      454        9                CALL: CALL CPA$GETRES ALTRET(xxx);
      455       10                INTERFACE: CPO$GET_RES
      456       11                DESCRIPTION: This routine front-ends the routine CPO$GET_RES
      457       12                             shich is shared by both IBEX and PRESCAN. It
      458       13                             is necessary for this routine to get a data page
      459       14                             stuff it's address into SEG$2.PHYS$ and call
      460       15                             CPO$GET_RES. If CPO$GET_RES altrets it may be
      461       16                             necessary to enlarge the data segment and try
      462       17                             again.
      463       18        */
      464       19        /*******************************************************************/
      465       20        /**/
      466       21        CPA$GETRES: PROC ALTRET;

     21  1 000000   000000 700200 xent  CPA$GETRES   TSX0  ! X66_AUTO_0
         1 000001   000010 000000                    ZERO    8,0

      467       22        /***** Include files *****/
      468       23          %INCLUDE B_ERRORS_C;
      469     1150          %INCLUDE CP_6;
      470     1231          %INCLUDE CP_MACROS_C;
      471     1983          %INCLUDE CP_SUBS_C;
      472     2900          %INCLUDE XU_MACRO_C;
      473     6006          %INCLUDE CP_DATA_R;
      474     8569        /***** Local variables *****/
      475     8570    1     DCL PHYS_LIST_SIZE UBIN WORD AUTO;
      476     8571        /***** External routines *****/
      477     8572    1     DCL CPC$GETSEG ENTRY(2) ALTRET;
PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:103  
      478     8573    1     DCL CPO$GET_RES ENTRY(3) ALTRET;
      479     8574        /***** Based structures *****/
      480     8575          %SEG$2;
      481     8635          %B$TCB (STCLASS="BASED(B$TCB$)");
      482     8638          %B$ALT;
      483     8646          %VLP_PRES (FPTN=PHYS$LIST,STCLASS=BASED,N=9999);
      484     8662          %VLP_PSEUDO (FPTN=PSEUDO$LIST,STCLASS=BASED,N=PSEUDO_SLOTS);
      485     8678        %EJECT;
PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:104  
      486     8679        /*
      487     8680             ***** If we already have the list of PHYSICAL resources
      488     8681                   available on this system then do not get it again ...
      489     8682        */
      490     8683    1     IF SEG$2.PHYS$ ~= ADDR(NIL)

   8683  1 000002   000000 470400 xsym               LDP0    SEG2$
         1 000003   000155 236100                    LDQ     109,,PR0
         1 000004   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000005   000007 600000 1                  TZE     s:8689

      491     8684    1        THEN
      492     8685    1           RETURN;

   8685  1 000006   000000 702200 xent               TSX2  ! X66_ARET

      493     8686        /*
      494     8687             ***** Get a data segment to store the PHYSICAL resource list ...
      495     8688        */
      496     8689    1     CALL CPC$GETSEG (SEG5$) ALTRET(E_GETSEG);

   8689  1 000007   000000 630400 2                  EPPR0   0
         1 000010   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000011   000000 701000 xent               TSX1    CPC$GETSEG
         1 000012   000055 702000 1                  TSX2    E_GETSEG

      497     8690    1     SEG$2.PHYS$ = SEG5$;

   8690  1 000013   000000 236000 xsym               LDQ     SEG5$
         1 000014   000000 470400 xsym               LDP0    SEG2$
         1 000015   000155 756100                    STQ     109,,PR0

      498     8691    1     PHYS_LIST_SIZE =  1024;

   8691  1 000016   002000 235007                    LDA     1024,DL
         1 000017   200003 755100                    STA     PHYS_LIST_SIZE,,AUTO

PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:105  
      499     8692        /*
      500     8693             ***** Get the resource lists ...
      501     8694        */
      502     8695    1   GET_PHYS_LIST:
      503     8696    1     CALL CPO$GET_RES (SEG$2.PSEUDO$ -> PSEUDO$LIST, SEG$2.PHYS$,

   8696  1 000020   000000 470400 xsym  GET_PHYS_LI* LDP0    SEG2$
         1 000021   000154 471500                    LDP1    108,,PR0
         1 000022   200003 633500                    EPPR3   PHYS_LIST_SIZE,,AUTO
         1 000023   200006 453500                    STP3    PHYS_LIST_SIZE+3,,AUTO
         1 000024   000000 236000 xsym               LDQ     SEG2$
         1 000025   000155 036003                    ADLQ    109,DU
         1 000026   200005 756100                    STQ     PHYS_LIST_SIZE+2,,AUTO
         1 000027   200004 451500                    STP1    PHYS_LIST_SIZE+1,,AUTO
         1 000030   200004 630500                    EPPR0   PHYS_LIST_SIZE+1,,AUTO
         1 000031   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000032   000000 701000 xent               TSX1    CPO$GET_RES
         1 000033   000035 702000 1                  TSX2    E_GETRES

      504     8697    1                       PHYS_LIST_SIZE) ALTRET(E_GETRES);
      505     8698    2     DO NEVER;

   8698  1 000034   000054 710000 1                  TRA     s:8711

      506     8699    2   E_GETRES:
      507     8700    2        IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$NORMRM

   8700  1 000035   000000 470400 xsym  E_GETRES     LDP0    B$TCB$
         1 000036   000000 471500                    LDP1    0,,PR0
         1 000037   100102 236100                    LDQ     66,,PR1
         1 000040   377770 376007                    ANQ     131064,DL
         1 000041   012330 116007                    CMPQ    5336,DL
         1 000042   000053 601000 1                  TNZ     s:8708

      508     8701    2           THEN   /* Not enough memory */
      509     8702    3              DO;   /* Try again */

PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:106  
      510     8703    3                 CALL CPC$GETSEG (SEG5$) ALTRET(E_GETSEG);

   8703  1 000043   000000 630400 2                  EPPR0   0
         1 000044   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000045   000000 701000 xent               TSX1    CPC$GETSEG
         1 000046   000055 702000 1                  TSX2    E_GETSEG

      511     8704    3                 PHYS_LIST_SIZE = PHYS_LIST_SIZE + 1024;

   8704  1 000047   200003 235100                    LDA     PHYS_LIST_SIZE,,AUTO
         1 000050   002000 035007                    ADLA    1024,DL
         1 000051   200003 755100                    STA     PHYS_LIST_SIZE,,AUTO

      512     8705    3                 GOTO GET_PHYS_LIST;

   8705  1 000052   000020 710000 1                  TRA     GET_PHYS_LIST

      513     8706    3              END;
      514     8707    2           ELSE
      515     8708    2              ALTRETURN;

   8708  1 000053   000000 702200 xent               TSX2  ! X66_AALT

      516     8709    2     END;

      517     8710        /**/
      518     8711    1     RETURN;

   8711  1 000054   000000 702200 xent               TSX2  ! X66_ARET

      519     8712        /**/
      520     8713    1   E_GETSEG:
      521     8714    1     ALTRETURN;

   8714  1 000055   000000 702200 xent  E_GETSEG     TSX2  ! X66_AALT
      522     8715    1   END CPA$GETRES;
      523     8716        %EOD;
PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:107  

PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:108  
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$GETRES.
PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:109  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w UBIN        r     1 PHYS_LIST_SIZE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w PTR         r     1 SEG2$
     0-0-0/w PTR         r     1 SEG5$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/d STRC(1116)  r     1 PSEUDO$LIST                0-0-0/w STRC(6264)  r     1 SEG$2


   Procedure CPA$GETRES requires 46 words for executable code.
   Procedure CPA$GETRES requires 8 words of local(AUTO) storage.
PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:110  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:111  
          MINI XREF LISTING

B$ALT.CODE
      8640**DCL      8640--REDEF    8641--REDEF    8641--REDEF
B$ALT.ERR.CODE
      8642**DCL      8700>>IF
B$ALT.ERR.ERR#
      8642**DCL      8642--REDEF
B$ALT.EVID
      8641**DCL      8641--REDEF    8641--REDEF
B$TCB.ALT$
      8636**DCL      8700>>IF
B$TCB$
      8504**DCL      8636--IMP-PTR  8700>>IF
CAMR_REC.ACSVEH_
      7541**DCL      7542--REDEF
CAMR_REC.ALTKEYS_
      7547**DCL      7548--REDEF    7548--REDEF
CAMR_REC.HDR_
      7546**DCL      7547--REDEF
CAMR_REC.TAB_
      7545**DCL      7546--REDEF
CAMR_REC.UHL_
      7539**DCL      7540--REDEF    7540--REDEF
CAMR_REC.V.FSN#
      7579**DCL      7579--REDEF    7579--REDEF
CAMR_REC.WSN_
      7545**DCL      7545--REDEF
CFPT_CLOSE.SN_
      6383**DCL      6383--REDEF
CFPT_CLOSE.UTL_
      6384**DCL      6384--REDEF
CFPT_CLOSE.V.EXPIRE#
      6398**DCL      6398--REDEF
PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:112  
CFPT_CLOSE.V.TYPE#
      6396**DCL      6396--REDEF
CFPT_CLOSE.V.XTNSIZE#
      6393**DCL      6393--REDEF    6395--REDEF
CFPT_OPEN.ACSVEH_
      6318**DCL      6319--REDEF
CFPT_OPEN.ALTKEYS_
      6324**DCL      6325--REDEF    6325--REDEF
CFPT_OPEN.HDR_
      6323**DCL      6324--REDEF
CFPT_OPEN.TAB_
      6322**DCL      6323--REDEF
CFPT_OPEN.UHL_
      6316**DCL      6317--REDEF    6317--REDEF
CFPT_OPEN.V.FSN#
      6356**DCL      6356--REDEF    6356--REDEF
CFPT_OPEN.WSN_
      6322**DCL      6322--REDEF
CFPT_READ.STATION_
      6422**DCL      6423--REDEF
CFPT_READ.V.DVBYTE.REREAD#
      6434**DCL      6434--REDEF
CFPT_READ.V.INDX#
      6432**DCL      6432--REDEF
CFPT_READUC.STATION_
      6792**DCL      6793--REDEF
CFPT_READUC.V.DVBYTE.REREAD#
      6804**DCL      6804--REDEF
CFPT_READUC.V.INDX#
      6802**DCL      6802--REDEF
CFPT_TRTN.V.IR#
      7028**DCL      7029--REDEF
CFPT_WRITE.STATION_
      6460**DCL      6460--REDEF
CFPT_WRITE.V.DVBYTE.VFC#
      6467**DCL      6467--REDEF
PL6.E3A0      #005=CPA$GETRES File=CPA$SUBR.:E05TSI                              TUE 07/29/97 11:18 Page:113  
CFPT_WRITEUC.STATION_
      6760**DCL      6760--REDEF
CFPT_WRITEUC.V.DVBYTE.VFC#
      6767**DCL      6767--REDEF
CFPT_XXX.V.STEPCC#
      7740**DCL      7740--REDEF
CGETCMD.OUT$
      7761**DCL      7767--REDEF
CPC$GETSEG
      8572**DCL-ENT  8689--CALL     8703--CALL
CPO$GET_RES
      8573**DCL-ENT  8696--CALL
CVLP_TRMCTL.BREAKCOUNT
      7352**DCL      7353--REDEF
CVLP_WINDOW.FWINDOW#
      7448**DCL      7448--REDEF    7449--REDEF
E_GETRES
      8700**LABEL    8696--CALLALT
E_GETSEG
      8714**LABEL    8689--CALLALT  8703--CALLALT
GET_PHYS_LIST
      8696**LABEL    8705--GOTO
PHYS$LIST.PRLIST.RNAME#
      8657**DCL      8658--REDEF
PHYS_LIST_SIZE
      8570**DCL      8691<<ASSIGN   8696<>CALL     8704<<ASSIGN   8704>>ASSIGN
PSEUDO$LIST
      8673**DCL      8696<>CALL
SEG$2.PHYS$
      8608**DCL      8683>>IF       8690<<ASSIGN   8696<>CALL
SEG$2.PSEUDO$
      8607**DCL      8696>>CALL
SEG2$
      8495**DCL      8576--IMP-PTR  8683>>IF       8690>>ASSIGN   8696>>CALL     8696>>CALL
SEG5$
      8498**DCL      8689<>CALL     8690>>ASSIGN   8703<>CALL

PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:114  
      524        1        /*T***********************************************************/
      525        2        /*T*                                                         */
      526        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      527        4        /*T*                                                         */
      528        5        /*T***********************************************************/
      529        6        /**********************************************************************/
      530        7        /*F*    NAME: CPA$INIT
      531        8                PURPOSE:    To get a data segment for SEG$2 and
      532        9                            initialize it. Also to take BREAK and
      533       10                            TRAP control. Only called when data
      534       11                            segments not kept across rundown or
      535       12                            when IBEX is first entered.
      536       13                INTERFACE:  Only called by CPA$ENTRY
      537       14        */
      538       15        /**********************************************************************/
      539       16        CPA$INIT: PROC;
      540       17        /***** include files *****/
      541       18          %INCLUDE AS_SUPER_C;
      542      453          %INCLUDE B$JIT;
      543      743          %INCLUDE CP_6;
      544      824          %INCLUDE CP_6_SUBS;
      545     1364          %INCLUDE CP_MACROS_C;
      546     2116          %INCLUDE CP_PERR_C;
      547     2454          %INCLUDE CP_SUBS_C;
      548     3371          %INCLUDE KL_SUPER_C;
      549     6273          %INCLUDE XU_MACRO_C;
      550     9379          %INCLUDE CP_DATA_R;
      551    11942        /***** Fpts *****/
      552    11943          %FPT_INT     (FPTN=FPT_INT,STCLASS=AUTO);
      553    11957          %FPT_TRAP    (FPTN=FPT_TRAP,STCLASS=AUTO);
      554    11980        /***** Based structures *****/
      555    11981          %FPT_CLOSE   (FPTN=FPT$CLOSE,STCLASS=BASED);
      556    12023          %FPT_CPEXIT  (FPTN=FPT$CPEXIT,STCLASS=BASED);
      557    12049          %FPT_FID     (FPTN=FPT$FID,STCLASS=BASED);
      558    12072          %FPT_OPEN    (FPTN=FPT$OPEN,STCLASS=BASED);
      559    12181          %FPT_READ    (FPTN=FPT$READ,STCLASS=BASED);
      560    12220          %FPT_TIME    (FPTN=FPT$TIME,STCLASS=BASED);
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:115  
      561    12239          %FPT_WRITE   (FPTN=FPT$WRITE,STCLASS=BASED);
      562    12270          %VLP_PSEUDO (FPTN=PSEUDO$LIST,STCLASS=BASED,N=PSEUDO_SLOTS);
      563    12286          %AS_USERS    (STR_NAME=AS$USERS,STCLASS=BASED);
      564    12464          %KL_DREC     (NAME=KL$DREC,STCLASS=BASED,LAST=",");
      565    12577          %KL_FEBLK    (NAME=KL_FEBLK,RCNT=31,LVL=2) ;
      566    12626          %XUG_GETCMD  (NAME=XUG$GETCMD, STCLASS=BASED) ;
      567    12964          %XUG_INIT    (NAME=XUG$INIT, STCLASS=BASED) ;
      568    13377          %WHEN_CNTL_REC (NAME=WHEN$CNTL_REC, STCLASS=BASED) ;
      569    13398          %CP_PROMPT (NAME=PROMPT, STCLASS=BASED);
      570    13418          %SEG$2;
      571    13478    1     DCL REMEM$VAR REMEMBER BASED ;
      572    13479        /***** External routines *****/
      573    13480    1     DCL CPC$BREAK ENTRY ASYNC;
      574    13481    1     DCL CPC$GETSEG ENTRY(2) ALTRET;
      575    13482    1     DCL CPC$SCREECH ENTRY(2);
      576    13483    1     DCL CPT$TRAP ENTRY ASYNC;
      577    13484        %EJECT;
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:116  
      578    13485        /*
      579    13486             ***** Get data segment for SEG$2 ...
      580    13487        */
      581    13488    1        CALL CPC$GETSEG (SEG2$,SEG2SIZE) ALTRET(E_GETSEG);
      582    13489        /*
      583    13490             ***** Initialize SEG$2 ...
      584    13491        */
      585    13492        /*   ***** Calculate fpt pointers *****/
      586    13493    1     SEG$2.FLAGS = '0'B;
      587    13494    1     SEG$2.LLDCB# = 0;
      588    13495    1     SEG$2.ACCUM_CHG = 0;
      589    13496    1     SEG$2.LASTPROMPT = 0;
      590    13497    1     SEG$2.USERS$ = PINCRW(SEG2$,SIZEW(SEG$2));
      591    13498    1     SEG$2.USERS_SZ = 0 ;
      592    13499    1     SEG$2.HLP$ = PINCRW(SEG$2.USERS$,SIZEW(AS$USERS));
      593    13500    1     SEG$2.PSEUDO$ = PINCRW(SEG$2.HLP$,SIZEW(KL$DREC));
      594    13501    1     SEG$2.PHYS$ = ADDR(NIL);
      595    13502    1     SEG$2.FPT_READUC$ = PINCRW(SEG$2.PSEUDO$,SIZEW(PSEUDO$LIST));
      596    13503    1     IF (MOD(POFFW(SEG$2.FPT_READUC$,SEG2$),2) ~= 0)
      597    13504    1        THEN   /* Double word align */
      598    13505    1           SEG$2.FPT_READUC$ = PINCRW(SEG$2.FPT_READUC$,1);
      599    13506    1     SEG$2.FPT_WRITEUC$=
      600    13507    1          PINCRW(SEG$2.FPT_READUC$,SIZEW(FPT$READ));
      601    13508    1     SEG$2.FPT_READCC$=
      602    13509    1          PINCRW(SEG$2.FPT_WRITEUC$,SIZEW(FPT$WRITE));
      603    13510    1     SEG$2.FPT_WRITECC$=
      604    13511    1          PINCRW(SEG$2.FPT_READCC$,SIZEW(FPT$READ));
      605    13512    1     SEG$2.FPT_OPEN$=
      606    13513    1          PINCRW(SEG$2.FPT_WRITECC$,SIZEW(FPT$WRITE));
      607    13514    1     SEG$2.FPT_CLOSE$=
      608    13515    1          PINCRW(SEG$2.FPT_OPEN$,SIZEW(FPT$OPEN));
      609    13516    1     SEG$2.FPT_READ$=
      610    13517    1          PINCRW(SEG$2.FPT_CLOSE$,SIZEW(FPT$CLOSE));
      611    13518    1     SEG$2.FPT_WRITE$=
      612    13519    1          PINCRW(SEG$2.FPT_READ$,SIZEW(FPT$READ));
      613    13520    1     SEG$2.FPT_CPEXIT$=
      614    13521    1          PINCRW(SEG$2.FPT_WRITE$,SIZEW(FPT$WRITE));
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:117  
      615    13522    1     SEG$2.FPT_FID$=
      616    13523    1          PINCRW(SEG$2.FPT_CPEXIT$,SIZEW(FPT$CPEXIT));
      617    13524    1     SEG$2.FPT_TIME$=
      618    13525    1          PINCRW(SEG$2.FPT_FID$,SIZEW(FPT$FID));
      619    13526    1     SEG$2.CPBUFF$ =
      620    13527    1          PINCRW(SEG$2.FPT_TIME$,SIZEW(FPT$TIME));
      621    13528    1     SEG$2.XUG_INIT$ =
      622    13529    1          PINCRW(SEG$2.CPBUFF$,%CPBUFFSIZE/4) ;
      623    13530    1     SEG$2.GETCMD$ =
      624    13531    1          PINCRW(SEG$2.XUG_INIT$,SIZEW(XUG$INIT)) ;
      625    13532    1     SEG$2.REMEM$ =
      626    13533    1          PINCRW(SEG$2.GETCMD$,SIZEW(XUG$GETCMD)) ;
      627    13534    1     SEG$2.WHEN_CNTL_REC$ =
      628    13535    1          PINCRW(SEG$2.REMEM$,1) ;
      629    13536    1     SEG$2.SPROMPT$ =
      630    13537    1          PINCRW (SEG$2.WHEN_CNTL_REC$, SIZEW(WHEN$CNTL_REC));
      631    13538    1     SEG$2.PROMPT$ =
      632    13539    1          PINCRW (SEG$2.SPROMPT$, SIZEW (PROMPT));
      633    13540        /*   ***** Initialize fpts *****/
      634    13541    1     SEG$2.FPT_READUC$->FPT$READ=CFPT_READUC;
      635    13542    1     SEG$2.FPT_WRITEUC$->FPT$WRITE=CFPT_WRITEUC;
      636    13543    1     SEG$2.FPT_READCC$->FPT$READ=CFPT_READ;
      637    13544    1     SEG$2.FPT_WRITECC$->FPT$WRITE=CFPT_WRITE;
      638    13545    1     SEG$2.FPT_OPEN$->FPT$OPEN=CFPT_OPEN;
      639    13546    1     SEG$2.FPT_CLOSE$->FPT$CLOSE=CFPT_CLOSE;
      640    13547    1     SEG$2.FPT_READ$->FPT$READ=CFPT_READ;
      641    13548    1     SEG$2.FPT_WRITE$->FPT$WRITE=CFPT_WRITE;
      642    13549    1     SEG$2.FPT_CPEXIT$->FPT$CPEXIT=CFPT_CPEXIT;
      643    13550    1     SEG$2.FPT_FID$->FPT$FID=CFPT_FID;
      644    13551    1     SEG$2.FPT_TIME$->FPT$TIME=CFPT_TIME;
      645    13552    1     SEG$2.XUG_INIT$->XUG$INIT=CXUG_INIT;
      646    13553    1     SEG$2.GETCMD$->XUG$GETCMD=CGETCMD;
      647    13554    1     SEG$2.WHEN_CNTL_REC$->WHEN$CNTL_REC='0'B;
      648    13555    1     SEG$2.SPROMPT$->PROMPT.TYPE_ = 0;
      649    13556        /*   ***** Init fpt vectors *****/
      650    13557    1     SEG$2.FPT_READUC$->FPT$READ.V_=
      651    13558    1          VECTOR(SEG$2.FPT_READUC$->FPT$READ.V);
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:118  
      652    13559    1     SEG$2.FPT_WRITEUC$->FPT$WRITE.V_=
      653    13560    1          VECTOR(SEG$2.FPT_WRITEUC$->FPT$WRITE.V);
      654    13561    1     SEG$2.FPT_READCC$->FPT$READ.V_=
      655    13562    1          VECTOR(SEG$2.FPT_READCC$->FPT$READ.V);
      656    13563    1     SEG$2.FPT_WRITECC$->FPT$WRITE.V_=
      657    13564    1          VECTOR(SEG$2.FPT_WRITECC$->FPT$WRITE.V);
      658    13565    1     SEG$2.FPT_OPEN$->FPT$OPEN.V_=
      659    13566    1          VECTOR(SEG$2.FPT_OPEN$->FPT$OPEN.V);
      660    13567    1     SEG$2.FPT_CLOSE$->FPT$CLOSE.V_=
      661    13568    1          VECTOR(SEG$2.FPT_CLOSE$->FPT$CLOSE.V);
      662    13569    1     SEG$2.FPT_READ$->FPT$READ.V_=
      663    13570    1          VECTOR(SEG$2.FPT_READ$->FPT$READ.V);
      664    13571    1     SEG$2.FPT_WRITE$->FPT$WRITE.V_=
      665    13572    1          VECTOR(SEG$2.FPT_WRITE$->FPT$WRITE.V);
      666    13573    1     SEG$2.FPT_CPEXIT$->FPT$CPEXIT.V_=
      667    13574    1          VECTOR(SEG$2.FPT_CPEXIT$->FPT$CPEXIT.V);
      668    13575    1     SEG$2.FPT_FID$->FPT$FID.V_=
      669    13576    1          VECTOR(SEG$2.FPT_FID$->FPT$FID.V);
      670    13577    1     SEG$2.FPT_TIME$->FPT$TIME.V_=
      671    13578    1          VECTOR(SEG$2.FPT_TIME$->FPT$TIME.V);
      672    13579        /*
      673    13580             ***** Get TRAP control ...
      674    13581        */
      675    13582    1        FPT_TRAP = CFPT_TRAP;
      676    13583    1        FPT_TRAP.V_ = VECTOR(FPT_TRAP.V);
      677    13584    1        FPT_TRAP.V.PMME# = ENTADDR(CPT$TRAP);
      678    13585    1        FPT_TRAP.V.ARITHMETIC# = ENTADDR(CPT$TRAP);
      679    13586    1        FPT_TRAP.V.PROGRAMMED# = ENTADDR(CPT$TRAP);
      680    13587    1        FPT_TRAP.V.ERRORS# = ENTADDR(CPT$TRAP);
      681    13588    1        CALL M$TRAP (FPT_TRAP) ALTRET(E_INT);
      682    13589        /*
      683    13590             ***** Get BREAK control ...
      684    13591        */
      685    13592    1        FPT_INT = CFPT_INT;
      686    13593    1        FPT_INT.V_ = VECTOR(FPT_INT.V);
      687    13594    1        FPT_INT.V.UENTRY# = ENTADDR(CPC$BREAK);
      688    13595    1        CALL M$INT (FPT_INT) ALTRET(E_INT);
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:119  
      689    13596
      690    13597    1     RETURN;
      691    13598        /**/
      692    13599    1   E_INT:
      693    13600    1           CALL CPC$SCREECH (E$SUABRK,CPA$IBEXMID);
      694    13601        /*E*    ERROR: CPA-E$SUABRK-0
      695    13602                MESSAGE: IBEX ABORT: Unable to take BREAK/TRAP control.  JIT.ERR follows.
      696    13603        */
      697    13604        /**/
      698    13605    1   E_GETSEG:
      699    13606    1           CALL CPC$SCREECH (E$SUASEG,CPA$IBEXMID);
      700    13607        /*E*    ERROR: CPA-E$SUASEG-0
      701    13608                MESSAGE: IBEX ABORT. Unable to get data segment. JIT.ERR follows.
      702    13609        */
      703    13610    1   END CPA$INIT;
      704    13611        %EOD;

PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:120  
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   KL_SUPER_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_PERR_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   AS_SUPER_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$INIT.

   Procedure CPA$INIT requires 242 words for executable code.
   Procedure CPA$INIT requires 20 words of local(AUTO) storage.

PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:121  

 Object Unit name= CPA$INIT                                   File name= CPA$SUBR.:E05TOU
 UTS= JUL 29 '97 11:19:21.12 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   242    362  CPA$INIT
    2  RoData even  none    14     16  CPA$INIT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        0  CPA$INIT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 CPC$GETSEG
         yes          Async      0 CPT$TRAP
         yes           Std       2 CPC$SCREECH
         yes          Async      0 CPC$BREAK
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:122  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CFPT_TIME                             CFPT_OPEN
     CFPT_CLOSE                            CFPT_READ                             CFPT_WRITE
     CFPT_CPEXIT                           CFPT_FID                              CFPT_WRITEUC
     CFPT_READUC                           CFPT_INT                              CFPT_TRAP
     CGETCMD                               CXUG_INIT                        r    SEG2$
r    B$JIT$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:123  


      524        1        /*T***********************************************************/
      525        2        /*T*                                                         */
      526        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      527        4        /*T*                                                         */
      528        5        /*T***********************************************************/
      529        6        /**********************************************************************/
      530        7        /*F*    NAME: CPA$INIT
      531        8                PURPOSE:    To get a data segment for SEG$2 and
      532        9                            initialize it. Also to take BREAK and
      533       10                            TRAP control. Only called when data
      534       11                            segments not kept across rundown or
      535       12                            when IBEX is first entered.
      536       13                INTERFACE:  Only called by CPA$ENTRY
      537       14        */
      538       15        /**********************************************************************/
      539       16        CPA$INIT: PROC;

     16  1 000000   000000 700200 xent  CPA$INIT     TSX0  ! X66_AUTO_0
         1 000001   000024 000000                    ZERO    20,0

      540       17        /***** include files *****/
      541       18          %INCLUDE AS_SUPER_C;
      542      453          %INCLUDE B$JIT;
      543      743          %INCLUDE CP_6;
      544      824          %INCLUDE CP_6_SUBS;
      545     1364          %INCLUDE CP_MACROS_C;
      546     2116          %INCLUDE CP_PERR_C;
      547     2454          %INCLUDE CP_SUBS_C;
      548     3371          %INCLUDE KL_SUPER_C;
      549     6273          %INCLUDE XU_MACRO_C;
      550     9379          %INCLUDE CP_DATA_R;
      551    11942        /***** Fpts *****/
      552    11943          %FPT_INT     (FPTN=FPT_INT,STCLASS=AUTO);
      553    11957          %FPT_TRAP    (FPTN=FPT_TRAP,STCLASS=AUTO);
      554    11980        /***** Based structures *****/
      555    11981          %FPT_CLOSE   (FPTN=FPT$CLOSE,STCLASS=BASED);
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:124  
      556    12023          %FPT_CPEXIT  (FPTN=FPT$CPEXIT,STCLASS=BASED);
      557    12049          %FPT_FID     (FPTN=FPT$FID,STCLASS=BASED);
      558    12072          %FPT_OPEN    (FPTN=FPT$OPEN,STCLASS=BASED);
      559    12181          %FPT_READ    (FPTN=FPT$READ,STCLASS=BASED);
      560    12220          %FPT_TIME    (FPTN=FPT$TIME,STCLASS=BASED);
      561    12239          %FPT_WRITE   (FPTN=FPT$WRITE,STCLASS=BASED);
      562    12270          %VLP_PSEUDO (FPTN=PSEUDO$LIST,STCLASS=BASED,N=PSEUDO_SLOTS);
      563    12286          %AS_USERS    (STR_NAME=AS$USERS,STCLASS=BASED);
      564    12464          %KL_DREC     (NAME=KL$DREC,STCLASS=BASED,LAST=",");
      565    12577          %KL_FEBLK    (NAME=KL_FEBLK,RCNT=31,LVL=2) ;
      566    12626          %XUG_GETCMD  (NAME=XUG$GETCMD, STCLASS=BASED) ;
      567    12964          %XUG_INIT    (NAME=XUG$INIT, STCLASS=BASED) ;
      568    13377          %WHEN_CNTL_REC (NAME=WHEN$CNTL_REC, STCLASS=BASED) ;
      569    13398          %CP_PROMPT (NAME=PROMPT, STCLASS=BASED);
      570    13418          %SEG$2;
      571    13478    1     DCL REMEM$VAR REMEMBER BASED ;
      572    13479        /***** External routines *****/
      573    13480    1     DCL CPC$BREAK ENTRY ASYNC;
      574    13481    1     DCL CPC$GETSEG ENTRY(2) ALTRET;
      575    13482    1     DCL CPC$SCREECH ENTRY(2);
      576    13483    1     DCL CPT$TRAP ENTRY ASYNC;
      577    13484        %EJECT;
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:125  
      578    13485        /*
      579    13486             ***** Get data segment for SEG$2 ...
      580    13487        */
      581    13488    1        CALL CPC$GETSEG (SEG2$,SEG2SIZE) ALTRET(E_GETSEG);

  13488  1 000002   000001 630400 2                  EPPR0   1
         1 000003   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000004   000000 701000 xent               TSX1    CPC$GETSEG
         1 000005   000355 702000 1                  TSX2    E_GETSEG

      582    13489        /*
      583    13490             ***** Initialize SEG$2 ...
      584    13491        */
      585    13492        /*   ***** Calculate fpt pointers *****/
      586    13493    1     SEG$2.FLAGS = '0'B;

  13493  1 000006   000000 220003                    LDX0    0,DU
         1 000007   000000 470400 xsym               LDP0    SEG2$
         1 000010   000000 740100                    STX0    0,,PR0

      587    13494    1     SEG$2.LLDCB# = 0;

  13494  1 000011   000000 221003                    LDX1    0,DU
         1 000012   000000 441100                    SXL1    0,,PR0

      588    13495    1     SEG$2.ACCUM_CHG = 0;

  13495  1 000013   000176 450100                    STZ     126,,PR0

      589    13496    1     SEG$2.LASTPROMPT = 0;

  13496  1 000014   000002 441100                    SXL1    2,,PR0

      590    13497    1     SEG$2.USERS$ = PINCRW(SEG2$,SIZEW(SEG$2));

  13497  1 000015   000000 236000 xsym               LDQ     SEG2$
         1 000016   000256 036003                    ADLQ    174,DU
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:126  
         1 000017   000152 756100                    STQ     106,,PR0

      591    13498    1     SEG$2.USERS_SZ = 0 ;

  13498  1 000020   000001 441100                    SXL1    1,,PR0

      592    13499    1     SEG$2.HLP$ = PINCRW(SEG$2.USERS$,SIZEW(AS$USERS));

  13499  1 000021   001004 036003                    ADLQ    516,DU
         1 000022   000153 756100                    STQ     107,,PR0

      593    13500    1     SEG$2.PSEUDO$ = PINCRW(SEG$2.HLP$,SIZEW(KL$DREC));

  13500  1 000023   000251 036003                    ADLQ    169,DU
         1 000024   000154 756100                    STQ     108,,PR0

      594    13501    1     SEG$2.PHYS$ = ADDR(NIL);

  13501  1 000025   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000026   000155 756100                    STQ     109,,PR0

      595    13502    1     SEG$2.FPT_READUC$ = PINCRW(SEG$2.PSEUDO$,SIZEW(PSEUDO$LIST));

  13502  1 000027   000154 236100                    LDQ     108,,PR0
         1 000030   000040 036003                    ADLQ    32,DU
         1 000031   000156 756100                    STQ     110,,PR0

      596    13503    1     IF (MOD(POFFW(SEG$2.FPT_READUC$,SEG2$),2) ~= 0)

  13503  1 000032   000000 235000 xsym               LDA     SEG2$
         1 000033   000022 771000                    ARL     18
         1 000034   200022 755100                    STA     FPT_TRAP+10,,AUTO
         1 000035   000156 236100                    LDQ     110,,PR0
         1 000036   000022 772000                    QRL     18
         1 000037   200022 136100                    SBLQ    FPT_TRAP+10,,AUTO
         1 000040   000002 506007                    DIV     2,DL
         1 000041   000044 733000                    LRS     36
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:127  
         1 000042   000000 116003                    CMPQ    0,DU
         1 000043   000047 600000 1                  TZE     s:13506

      597    13504    1        THEN   /* Double word align */
      598    13505    1           SEG$2.FPT_READUC$ = PINCRW(SEG$2.FPT_READUC$,1);

  13505  1 000044   000156 236100                    LDQ     110,,PR0
         1 000045   000001 036003                    ADLQ    1,DU
         1 000046   000156 756100                    STQ     110,,PR0

      599    13506    1     SEG$2.FPT_WRITEUC$=

  13506  1 000047   000156 236100                    LDQ     110,,PR0
         1 000050   000016 036003                    ADLQ    14,DU
         1 000051   000157 756100                    STQ     111,,PR0

      600    13507    1          PINCRW(SEG$2.FPT_READUC$,SIZEW(FPT$READ));
      601    13508    1     SEG$2.FPT_READCC$=

  13508  1 000052   000014 036003                    ADLQ    12,DU
         1 000053   000160 756100                    STQ     112,,PR0

      602    13509    1          PINCRW(SEG$2.FPT_WRITEUC$,SIZEW(FPT$WRITE));
      603    13510    1     SEG$2.FPT_WRITECC$=

  13510  1 000054   000016 036003                    ADLQ    14,DU
         1 000055   000161 756100                    STQ     113,,PR0

      604    13511    1          PINCRW(SEG$2.FPT_READCC$,SIZEW(FPT$READ));
      605    13512    1     SEG$2.FPT_OPEN$=

  13512  1 000056   000014 036003                    ADLQ    12,DU
         1 000057   000162 756100                    STQ     114,,PR0

      606    13513    1          PINCRW(SEG$2.FPT_WRITECC$,SIZEW(FPT$WRITE));
      607    13514    1     SEG$2.FPT_CLOSE$=

PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:128  
  13514  1 000060   000072 036003                    ADLQ    58,DU
         1 000061   000163 756100                    STQ     115,,PR0

      608    13515    1          PINCRW(SEG$2.FPT_OPEN$,SIZEW(FPT$OPEN));
      609    13516    1     SEG$2.FPT_READ$=

  13516  1 000062   000036 036003                    ADLQ    30,DU
         1 000063   000164 756100                    STQ     116,,PR0

      610    13517    1          PINCRW(SEG$2.FPT_CLOSE$,SIZEW(FPT$CLOSE));
      611    13518    1     SEG$2.FPT_WRITE$=

  13518  1 000064   000016 036003                    ADLQ    14,DU
         1 000065   000165 756100                    STQ     117,,PR0

      612    13519    1          PINCRW(SEG$2.FPT_READ$,SIZEW(FPT$READ));
      613    13520    1     SEG$2.FPT_CPEXIT$=

  13520  1 000066   000014 036003                    ADLQ    12,DU
         1 000067   000166 756100                    STQ     118,,PR0

      614    13521    1          PINCRW(SEG$2.FPT_WRITE$,SIZEW(FPT$WRITE));
      615    13522    1     SEG$2.FPT_FID$=

  13522  1 000070   000016 036003                    ADLQ    14,DU
         1 000071   000167 756100                    STQ     119,,PR0

      616    13523    1          PINCRW(SEG$2.FPT_CPEXIT$,SIZEW(FPT$CPEXIT));
      617    13524    1     SEG$2.FPT_TIME$=

  13524  1 000072   000030 036003                    ADLQ    24,DU
         1 000073   000170 756100                    STQ     120,,PR0

      618    13525    1          PINCRW(SEG$2.FPT_FID$,SIZEW(FPT$FID));
      619    13526    1     SEG$2.CPBUFF$ =

  13526  1 000074   000014 036003                    ADLQ    12,DU
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:129  
         1 000075   000171 756100                    STQ     121,,PR0

      620    13527    1          PINCRW(SEG$2.FPT_TIME$,SIZEW(FPT$TIME));
      621    13528    1     SEG$2.XUG_INIT$ =

  13528  1 000076   000100 036003                    ADLQ    64,DU
         1 000077   000172 756100                    STQ     122,,PR0

      622    13529    1          PINCRW(SEG$2.CPBUFF$,%CPBUFFSIZE/4) ;
      623    13530    1     SEG$2.GETCMD$ =

  13530  1 000100   000044 036003                    ADLQ    36,DU
         1 000101   000173 756100                    STQ     123,,PR0

      624    13531    1          PINCRW(SEG$2.XUG_INIT$,SIZEW(XUG$INIT)) ;
      625    13532    1     SEG$2.REMEM$ =

  13532  1 000102   000052 036003                    ADLQ    42,DU
         1 000103   000174 756100                    STQ     124,,PR0

      626    13533    1          PINCRW(SEG$2.GETCMD$,SIZEW(XUG$GETCMD)) ;
      627    13534    1     SEG$2.WHEN_CNTL_REC$ =

  13534  1 000104   000001 036003                    ADLQ    1,DU
         1 000105   000175 756100                    STQ     125,,PR0

      628    13535    1          PINCRW(SEG$2.REMEM$,1) ;
      629    13536    1     SEG$2.SPROMPT$ =

  13536  1 000106   000012 036003                    ADLQ    10,DU
         1 000107   000177 756100                    STQ     127,,PR0

      630    13537    1          PINCRW (SEG$2.WHEN_CNTL_REC$, SIZEW(WHEN$CNTL_REC));
      631    13538    1     SEG$2.PROMPT$ =

  13538  1 000110   000042 036003                    ADLQ    34,DU
         1 000111   000200 756100                    STQ     128,,PR0
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:130  

      632    13539    1          PINCRW (SEG$2.SPROMPT$, SIZEW (PROMPT));
      633    13540        /*   ***** Initialize fpts *****/
      634    13541    1     SEG$2.FPT_READUC$->FPT$READ=CFPT_READUC;

  13541  1 000112   000156 471500                    LDP1    110,,PR0
         1 000113   000100 100400                    MLR     fill='000'O
         1 000114   000000 000070 xsym               ADSC9   CFPT_READUC              cn=0,n=56
         1 000115   100000 000070                    ADSC9   0,,PR1                   cn=0,n=56

      635    13542    1     SEG$2.FPT_WRITEUC$->FPT$WRITE=CFPT_WRITEUC;

  13542  1 000116   000157 471500                    LDP1    111,,PR0
         1 000117   000100 100400                    MLR     fill='000'O
         1 000120   000000 000060 xsym               ADSC9   CFPT_WRITEUC             cn=0,n=48
         1 000121   100000 000060                    ADSC9   0,,PR1                   cn=0,n=48

      636    13543    1     SEG$2.FPT_READCC$->FPT$READ=CFPT_READ;

  13543  1 000122   000160 471500                    LDP1    112,,PR0
         1 000123   000100 100400                    MLR     fill='000'O
         1 000124   000000 000070 xsym               ADSC9   CFPT_READ                cn=0,n=56
         1 000125   100000 000070                    ADSC9   0,,PR1                   cn=0,n=56

      637    13544    1     SEG$2.FPT_WRITECC$->FPT$WRITE=CFPT_WRITE;

  13544  1 000126   000161 471500                    LDP1    113,,PR0
         1 000127   000100 100400                    MLR     fill='000'O
         1 000130   000000 000060 xsym               ADSC9   CFPT_WRITE               cn=0,n=48
         1 000131   100000 000060                    ADSC9   0,,PR1                   cn=0,n=48

      638    13545    1     SEG$2.FPT_OPEN$->FPT$OPEN=CFPT_OPEN;

  13545  1 000132   000162 471500                    LDP1    114,,PR0
         1 000133   000100 100400                    MLR     fill='000'O
         1 000134   000000 000350 xsym               ADSC9   CFPT_OPEN                cn=0,n=232
         1 000135   100000 000350                    ADSC9   0,,PR1                   cn=0,n=232
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:131  

      639    13546    1     SEG$2.FPT_CLOSE$->FPT$CLOSE=CFPT_CLOSE;

  13546  1 000136   000163 471500                    LDP1    115,,PR0
         1 000137   000100 100400                    MLR     fill='000'O
         1 000140   000000 000170 xsym               ADSC9   CFPT_CLOSE               cn=0,n=120
         1 000141   100000 000170                    ADSC9   0,,PR1                   cn=0,n=120

      640    13547    1     SEG$2.FPT_READ$->FPT$READ=CFPT_READ;

  13547  1 000142   000164 471500                    LDP1    116,,PR0
         1 000143   000100 100400                    MLR     fill='000'O
         1 000144   000000 000070 xsym               ADSC9   CFPT_READ                cn=0,n=56
         1 000145   100000 000070                    ADSC9   0,,PR1                   cn=0,n=56

      641    13548    1     SEG$2.FPT_WRITE$->FPT$WRITE=CFPT_WRITE;

  13548  1 000146   000165 471500                    LDP1    117,,PR0
         1 000147   000100 100400                    MLR     fill='000'O
         1 000150   000000 000060 xsym               ADSC9   CFPT_WRITE               cn=0,n=48
         1 000151   100000 000060                    ADSC9   0,,PR1                   cn=0,n=48

      642    13549    1     SEG$2.FPT_CPEXIT$->FPT$CPEXIT=CFPT_CPEXIT;

  13549  1 000152   000166 471500                    LDP1    118,,PR0
         1 000153   000100 100400                    MLR     fill='000'O
         1 000154   000000 000070 xsym               ADSC9   CFPT_CPEXIT              cn=0,n=56
         1 000155   100000 000070                    ADSC9   0,,PR1                   cn=0,n=56

      643    13550    1     SEG$2.FPT_FID$->FPT$FID=CFPT_FID;

  13550  1 000156   000167 471500                    LDP1    119,,PR0
         1 000157   000100 100400                    MLR     fill='000'O
         1 000160   000000 000140 xsym               ADSC9   CFPT_FID                 cn=0,n=96
         1 000161   100000 000140                    ADSC9   0,,PR1                   cn=0,n=96

      644    13551    1     SEG$2.FPT_TIME$->FPT$TIME=CFPT_TIME;
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:132  

  13551  1 000162   000170 471500                    LDP1    120,,PR0
         1 000163   000100 100400                    MLR     fill='000'O
         1 000164   000000 000060 xsym               ADSC9   CFPT_TIME                cn=0,n=48
         1 000165   100000 000060                    ADSC9   0,,PR1                   cn=0,n=48

      645    13552    1     SEG$2.XUG_INIT$->XUG$INIT=CXUG_INIT;

  13552  1 000166   000172 471500                    LDP1    122,,PR0
         1 000167   000100 100400                    MLR     fill='000'O
         1 000170   000000 000220 xsym               ADSC9   CXUG_INIT                cn=0,n=144
         1 000171   100000 000220                    ADSC9   0,,PR1                   cn=0,n=144

      646    13553    1     SEG$2.GETCMD$->XUG$GETCMD=CGETCMD;

  13553  1 000172   000173 471500                    LDP1    123,,PR0
         1 000173   000100 100400                    MLR     fill='000'O
         1 000174   000000 000250 xsym               ADSC9   CGETCMD                  cn=0,n=168
         1 000175   100000 000250                    ADSC9   0,,PR1                   cn=0,n=168

      647    13554    1     SEG$2.WHEN_CNTL_REC$->WHEN$CNTL_REC='0'B;

  13554  1 000176   000175 471500                    LDP1    125,,PR0
         1 000177   000100 100400                    MLR     fill='000'O
         1 000200   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000201   100000 000045                    ADSC9   0,,PR1                   cn=0,n=37

      648    13555    1     SEG$2.SPROMPT$->PROMPT.TYPE_ = 0;

  13555  1 000202   000177 471500                    LDP1    127,,PR0
         1 000203   100000 441100                    SXL1    0,,PR1

      649    13556        /*   ***** Init fpt vectors *****/
      650    13557    1     SEG$2.FPT_READUC$->FPT$READ.V_=

  13557  1 000204   000156 471500                    LDP1    110,,PR0
         1 000205   000003 235000 2                  LDA     3
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:133  
         1 000206   200022 451500                    STP1    FPT_TRAP+10,,AUTO
         1 000207   200022 236100                    LDQ     FPT_TRAP+10,,AUTO
         1 000210   000010 036003                    ADLQ    8,DU
         1 000211   100000 757100                    STAQ    0,,PR1

      651    13558    1          VECTOR(SEG$2.FPT_READUC$->FPT$READ.V);
      652    13559    1     SEG$2.FPT_WRITEUC$->FPT$WRITE.V_=

  13559  1 000212   000157 471500                    LDP1    111,,PR0
         1 000213   000004 235000 2                  LDA     4
         1 000214   200022 451500                    STP1    FPT_TRAP+10,,AUTO
         1 000215   200022 236100                    LDQ     FPT_TRAP+10,,AUTO
         1 000216   000010 036003                    ADLQ    8,DU
         1 000217   100000 757100                    STAQ    0,,PR1

      653    13560    1          VECTOR(SEG$2.FPT_WRITEUC$->FPT$WRITE.V);
      654    13561    1     SEG$2.FPT_READCC$->FPT$READ.V_=

  13561  1 000220   000160 471500                    LDP1    112,,PR0
         1 000221   000003 235000 2                  LDA     3
         1 000222   200022 451500                    STP1    FPT_TRAP+10,,AUTO
         1 000223   200022 236100                    LDQ     FPT_TRAP+10,,AUTO
         1 000224   000010 036003                    ADLQ    8,DU
         1 000225   100000 757100                    STAQ    0,,PR1

      655    13562    1          VECTOR(SEG$2.FPT_READCC$->FPT$READ.V);
      656    13563    1     SEG$2.FPT_WRITECC$->FPT$WRITE.V_=

  13563  1 000226   000161 471500                    LDP1    113,,PR0
         1 000227   000004 235000 2                  LDA     4
         1 000230   200022 451500                    STP1    FPT_TRAP+10,,AUTO
         1 000231   200022 236100                    LDQ     FPT_TRAP+10,,AUTO
         1 000232   000010 036003                    ADLQ    8,DU
         1 000233   100000 757100                    STAQ    0,,PR1

      657    13564    1          VECTOR(SEG$2.FPT_WRITECC$->FPT$WRITE.V);
      658    13565    1     SEG$2.FPT_OPEN$->FPT$OPEN.V_=
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:134  

  13565  1 000234   000162 471500                    LDP1    114,,PR0
         1 000235   000005 235000 2                  LDA     5
         1 000236   200022 451500                    STP1    FPT_TRAP+10,,AUTO
         1 000237   200022 236100                    LDQ     FPT_TRAP+10,,AUTO
         1 000240   000044 036003                    ADLQ    36,DU
         1 000241   100000 757100                    STAQ    0,,PR1

      659    13566    1          VECTOR(SEG$2.FPT_OPEN$->FPT$OPEN.V);
      660    13567    1     SEG$2.FPT_CLOSE$->FPT$CLOSE.V_=

  13567  1 000242   000163 471500                    LDP1    115,,PR0
         1 000243   000004 235000 2                  LDA     4
         1 000244   200022 451500                    STP1    FPT_TRAP+10,,AUTO
         1 000245   200022 236100                    LDQ     FPT_TRAP+10,,AUTO
         1 000246   000032 036003                    ADLQ    26,DU
         1 000247   100000 757100                    STAQ    0,,PR1

      661    13568    1          VECTOR(SEG$2.FPT_CLOSE$->FPT$CLOSE.V);
      662    13569    1     SEG$2.FPT_READ$->FPT$READ.V_=

  13569  1 000250   000164 471500                    LDP1    116,,PR0
         1 000251   000003 235000 2                  LDA     3
         1 000252   200022 451500                    STP1    FPT_TRAP+10,,AUTO
         1 000253   200022 236100                    LDQ     FPT_TRAP+10,,AUTO
         1 000254   000010 036003                    ADLQ    8,DU
         1 000255   100000 757100                    STAQ    0,,PR1

      663    13570    1          VECTOR(SEG$2.FPT_READ$->FPT$READ.V);
      664    13571    1     SEG$2.FPT_WRITE$->FPT$WRITE.V_=

  13571  1 000256   000165 471500                    LDP1    117,,PR0
         1 000257   000004 235000 2                  LDA     4
         1 000260   200022 451500                    STP1    FPT_TRAP+10,,AUTO
         1 000261   200022 236100                    LDQ     FPT_TRAP+10,,AUTO
         1 000262   000010 036003                    ADLQ    8,DU
         1 000263   100000 757100                    STAQ    0,,PR1
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:135  

      665    13572    1          VECTOR(SEG$2.FPT_WRITE$->FPT$WRITE.V);
      666    13573    1     SEG$2.FPT_CPEXIT$->FPT$CPEXIT.V_=

  13573  1 000264   000166 471500                    LDP1    118,,PR0
         1 000265   000006 235000 2                  LDA     6
         1 000266   200022 451500                    STP1    FPT_TRAP+10,,AUTO
         1 000267   200022 236100                    LDQ     FPT_TRAP+10,,AUTO
         1 000270   000014 036003                    ADLQ    12,DU
         1 000271   100012 757100                    STAQ    10,,PR1

      667    13574    1          VECTOR(SEG$2.FPT_CPEXIT$->FPT$CPEXIT.V);
      668    13575    1     SEG$2.FPT_FID$->FPT$FID.V_=

  13575  1 000272   000167 471500                    LDP1    119,,PR0
         1 000273   000004 235000 2                  LDA     4
         1 000274   200022 451500                    STP1    FPT_TRAP+10,,AUTO
         1 000275   200022 236100                    LDQ     FPT_TRAP+10,,AUTO
         1 000276   000024 036003                    ADLQ    20,DU
         1 000277   100000 757100                    STAQ    0,,PR1

      669    13576    1          VECTOR(SEG$2.FPT_FID$->FPT$FID.V);
      670    13577    1     SEG$2.FPT_TIME$->FPT$TIME.V_=

  13577  1 000300   000170 471500                    LDP1    120,,PR0
         1 000301   000006 235000 2                  LDA     6
         1 000302   200022 451500                    STP1    FPT_TRAP+10,,AUTO
         1 000303   200022 236100                    LDQ     FPT_TRAP+10,,AUTO
         1 000304   000012 036003                    ADLQ    10,DU
         1 000305   100000 757100                    STAQ    0,,PR1

      671    13578    1          VECTOR(SEG$2.FPT_TIME$->FPT$TIME.V);
      672    13579        /*
      673    13580             ***** Get TRAP control ...
      674    13581        */
      675    13582    1        FPT_TRAP = CFPT_TRAP;

PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:136  
  13582  1 000306   000100 100400                    MLR     fill='000'O
         1 000307   000000 000050 xsym               ADSC9   CFPT_TRAP                cn=0,n=40
         1 000310   200010 000050                    ADSC9   FPT_TRAP,,AUTO           cn=0,n=40

      676    13583    1        FPT_TRAP.V_ = VECTOR(FPT_TRAP.V);

  13583  1 000311   000003 235000 2                  LDA     3
         1 000312   200022 452500                    STP2    FPT_TRAP+10,,AUTO
         1 000313   200022 236100                    LDQ     FPT_TRAP+10,,AUTO
         1 000314   000014 036003                    ADLQ    12,DU
         1 000315   200010 757100                    STAQ    FPT_TRAP,,AUTO

      677    13584    1        FPT_TRAP.V.PMME# = ENTADDR(CPT$TRAP);

  13584  1 000316   000000 636000 xent               EAQ     CPT$TRAP
         1 000317   200014 756100                    STQ     FPT_TRAP+4,,AUTO

      678    13585    1        FPT_TRAP.V.ARITHMETIC# = ENTADDR(CPT$TRAP);

  13585  1 000320   000000 636000 xent               EAQ     CPT$TRAP
         1 000321   200015 756100                    STQ     FPT_TRAP+5,,AUTO

      679    13586    1        FPT_TRAP.V.PROGRAMMED# = ENTADDR(CPT$TRAP);

  13586  1 000322   000000 636000 xent               EAQ     CPT$TRAP
         1 000323   200016 756100                    STQ     FPT_TRAP+6,,AUTO

      680    13587    1        FPT_TRAP.V.ERRORS# = ENTADDR(CPT$TRAP);

  13587  1 000324   000000 636000 xent               EAQ     CPT$TRAP
         1 000325   200017 756100                    STQ     FPT_TRAP+7,,AUTO

      681    13588    1        CALL M$TRAP (FPT_TRAP) ALTRET(E_INT);

  13588  1 000326   200010 630500                    EPPR0   FPT_TRAP,,AUTO
         1 000327   410004 713400                    CLIMB   alt,+4100
         1 000330   400400 401760                    pmme    nvectors=2
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:137  
         1 000331   000351 702000 1                  TSX2    E_INT

      682    13589        /*
      683    13590             ***** Get BREAK control ...
      684    13591        */
      685    13592    1        FPT_INT = CFPT_INT;

  13592  1 000332   000100 100400                    MLR     fill='000'O
         1 000333   000000 000020 xsym               ADSC9   CFPT_INT                 cn=0,n=16
         1 000334   200004 000020                    ADSC9   FPT_INT,,AUTO            cn=0,n=16

      686    13593    1        FPT_INT.V_ = VECTOR(FPT_INT.V);

  13593  1 000335   000006 235000 2                  LDA     6
         1 000336   200022 452500                    STP2    FPT_TRAP+10,,AUTO
         1 000337   200022 236100                    LDQ     FPT_TRAP+10,,AUTO
         1 000340   000006 036003                    ADLQ    6,DU
         1 000341   200004 757100                    STAQ    FPT_INT,,AUTO

      687    13594    1        FPT_INT.V.UENTRY# = ENTADDR(CPC$BREAK);

  13594  1 000342   000000 636000 xent               EAQ     CPC$BREAK
         1 000343   200006 756100                    STQ     FPT_INT+2,,AUTO

      688    13595    1        CALL M$INT (FPT_INT) ALTRET(E_INT);

  13595  1 000344   200004 630500                    EPPR0   FPT_INT,,AUTO
         1 000345   410002 713400                    CLIMB   alt,+4098
         1 000346   400000 401760                    pmme    nvectors=1
         1 000347   000351 702000 1                  TSX2    E_INT

      689    13596
      690    13597    1     RETURN;

  13597  1 000350   000000 702200 xent               TSX2  ! X66_ARET

      691    13598        /**/
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:138  
      692    13599    1   E_INT:
      693    13600    1           CALL CPC$SCREECH (E$SUABRK,CPA$IBEXMID);

  13600  1 000351   000011 630400 2     E_INT        EPPR0   9
         1 000352   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000353   000000 701000 xent               TSX1    CPC$SCREECH
         1 000354   000000 011000                    NOP     0

      694    13601        /*E*    ERROR: CPA-E$SUABRK-0
      695    13602                MESSAGE: IBEX ABORT: Unable to take BREAK/TRAP control.  JIT.ERR follows.
      696    13603        */
      697    13604        /**/
      698    13605    1   E_GETSEG:
      699    13606    1           CALL CPC$SCREECH (E$SUASEG,CPA$IBEXMID);

  13606  1 000355   000014 630400 2     E_GETSEG     EPPR0   12
         1 000356   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000357   000000 701000 xent               TSX1    CPC$SCREECH
         1 000360   000000 011000                    NOP     0

      700    13607        /*E*    ERROR: CPA-E$SUASEG-0
      701    13608                MESSAGE: IBEX ABORT. Unable to get data segment. JIT.ERR follows.
      702    13609        */
      703    13610    1   END CPA$INIT;

  13610  1 000361   000000 702200 xent               TSX2  ! X66_ARET
      704    13611        %EOD;

PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:139  
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   KL_SUPER_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_PERR_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   AS_SUPER_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$INIT.
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:140  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/d STRC(144)   r     1 FPT_INT                   10-0-0/d STRC(360)   r     1 FPT_TRAP

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/d STRC(1080)  r     1 CFPT_CLOSE
     0-0-0/d STRC(504)   r     1 CFPT_CPEXIT                0-0-0/d STRC(864)   r     1 CFPT_FID
     0-0-0/d STRC(144)   r     1 CFPT_INT                   0-0-0/d STRC(2088)  r     1 CFPT_OPEN
     0-0-0/d STRC(504)   r     1 CFPT_READ                  0-0-0/d STRC(504)   r     1 CFPT_READUC
     0-0-0/d STRC(432)   r     1 CFPT_TIME                  0-0-0/d STRC(360)   r     1 CFPT_TRAP
     0-0-0/d STRC(432)   r     1 CFPT_WRITE                 0-0-0/d STRC(432)   r     1 CFPT_WRITEUC
     0-0-0/d STRC(1512)  r     1 CGETCMD                    0-0-0/d STRC(1296)  r     1 CXUG_INIT
     0-0-0/w PTR         r     1 SEG2$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(18576) r     1 AS$USERS                   0-0-0/d STRC(1080)  r     1 FPT$CLOSE
     0-0-0/d STRC(504)   r     1 FPT$CPEXIT                 0-0-0/d STRC(864)   r     1 FPT$FID
     0-0-0/d STRC(2088)  r     1 FPT$OPEN                   0-0-0/d STRC(504)   r     1 FPT$READ
     0-0-0/d STRC(432)   r     1 FPT$TIME                   0-0-0/d STRC(432)   r     1 FPT$WRITE
     0-0-0/w STRC(6084)  r     1 KL$DREC                    0-0-0/d STRC(1197)  r     1 PROMPT
     0-0-0/d STRC(1116)  r     1 PSEUDO$LIST                0-0-0/w STRC(6264)  r     1 SEG$2
     0-0-0/d STRC(333)   r     1 WHEN$CNTL_REC              0-0-0/d STRC(1512)  r     1 XUG$GETCMD
     0-0-0/d STRC(1296)  r     1 XUG$INIT

PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:141  

   Procedure CPA$INIT requires 242 words for executable code.
   Procedure CPA$INIT requires 20 words of local(AUTO) storage.
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:142  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:143  
          MINI XREF LISTING

AS$USERS
     12299**DCL     13499--ASSIGN
AS$USERS.BANNER_PERM
     12414**DCL     12415--REDEF
AS$USERS.BUDGET.MACCT
     12319**DCL     12323--REDEF
AS$USERS.BUDGET.MAX_PROJECTS
     12332**DCL     12335--REDEF
AS$USERS.BUDGET.PACCUM
     12315**DCL     12317--REDEF
AS$USERS.BUDGET.PMAXC
     12310**DCL     12312--REDEF
AS$USERS.SETUP_CHRA.TXT
     12430**DCL     12431--REDEF   12432--REDEF
B$JIT.CPFLAGS1.SLEAZE
       561**DCL       561--REDEF
B$JIT.ERR.MID
       468**DCL       468--REDEF
B$JIT.JRESPEAK
       629**DCL       630--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       738**DCL       738--REDEF     739--REDEF
B$JIT.PNR
       642**DCL       642--REDEF
B$JIT.TSLINE
       736**DCL       737--REDEF
B$JIT$
     11875**DCL       462--IMP-PTR
CAMR_REC.ACSVEH_
     10914**DCL     10915--REDEF
CAMR_REC.ALTKEYS_
     10920**DCL     10921--REDEF   10921--REDEF
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:144  
CAMR_REC.HDR_
     10919**DCL     10920--REDEF
CAMR_REC.TAB_
     10918**DCL     10919--REDEF
CAMR_REC.UHL_
     10912**DCL     10913--REDEF   10913--REDEF
CAMR_REC.V.FSN#
     10952**DCL     10952--REDEF   10952--REDEF
CAMR_REC.WSN_
     10918**DCL     10918--REDEF
CFPT_CLOSE
      9756**DCL     13546>>ASSIGN
CFPT_CLOSE.SN_
      9756**DCL      9756--REDEF
CFPT_CLOSE.UTL_
      9757**DCL      9757--REDEF
CFPT_CLOSE.V.EXPIRE#
      9771**DCL      9771--REDEF
CFPT_CLOSE.V.TYPE#
      9769**DCL      9769--REDEF
CFPT_CLOSE.V.XTNSIZE#
      9766**DCL      9766--REDEF    9768--REDEF
CFPT_CPEXIT
     10039**DCL     13549>>ASSIGN
CFPT_FID
     10063**DCL     13550>>ASSIGN
CFPT_INT
     10386**DCL     13592>>ASSIGN
CFPT_OPEN
      9689**DCL     13545>>ASSIGN
CFPT_OPEN.ACSVEH_
      9691**DCL      9692--REDEF
CFPT_OPEN.ALTKEYS_
      9697**DCL      9698--REDEF    9698--REDEF
CFPT_OPEN.HDR_
      9696**DCL      9697--REDEF
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:145  
CFPT_OPEN.TAB_
      9695**DCL      9696--REDEF
CFPT_OPEN.UHL_
      9689**DCL      9690--REDEF    9690--REDEF
CFPT_OPEN.V.FSN#
      9729**DCL      9729--REDEF    9729--REDEF
CFPT_OPEN.WSN_
      9695**DCL      9695--REDEF
CFPT_READ
      9792**DCL     13543>>ASSIGN  13547>>ASSIGN
CFPT_READ.STATION_
      9795**DCL      9796--REDEF
CFPT_READ.V.DVBYTE.REREAD#
      9807**DCL      9807--REDEF
CFPT_READ.V.INDX#
      9805**DCL      9805--REDEF
CFPT_READUC
     10162**DCL     13541>>ASSIGN
CFPT_READUC.STATION_
     10165**DCL     10166--REDEF
CFPT_READUC.V.DVBYTE.REREAD#
     10177**DCL     10177--REDEF
CFPT_READUC.V.INDX#
     10175**DCL     10175--REDEF
CFPT_TIME
      9603**DCL     13551>>ASSIGN
CFPT_TRAP
     10981**DCL     13582>>ASSIGN
CFPT_TRTN.V.IR#
     10401**DCL     10402--REDEF
CFPT_WRITE
      9831**DCL     13544>>ASSIGN  13548>>ASSIGN
CFPT_WRITE.STATION_
      9833**DCL      9833--REDEF
CFPT_WRITE.V.DVBYTE.VFC#
      9840**DCL      9840--REDEF
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:146  
CFPT_WRITEUC
     10131**DCL     13542>>ASSIGN
CFPT_WRITEUC.STATION_
     10133**DCL     10133--REDEF
CFPT_WRITEUC.V.DVBYTE.VFC#
     10140**DCL     10140--REDEF
CFPT_XXX.V.STEPCC#
     11113**DCL     11113--REDEF
CGETCMD
     11129**DCL     13553>>ASSIGN
CGETCMD.OUT$
     11134**DCL     11140--REDEF
CPC$BREAK
     13480**DCL-ENT 13594--ASSIGN
CPC$GETSEG
     13481**DCL-ENT 13488--CALL
CPC$SCREECH
     13482**DCL-ENT 13600--CALL    13606--CALL
CPT$TRAP
     13483**DCL-ENT 13584--ASSIGN  13585--ASSIGN  13586--ASSIGN  13587--ASSIGN
CVLP_TRMCTL.BREAKCOUNT
     10725**DCL     10726--REDEF
CVLP_WINDOW.FWINDOW#
     10821**DCL     10821--REDEF   10822--REDEF
CXUG_INIT
     11476**DCL     13552>>ASSIGN
E_GETSEG
     13606**LABEL   13488--CALLALT
E_INT
     13600**LABEL   13588--CALLALT 13595--CALLALT
FPT$CLOSE
     12004**DCL     13516--ASSIGN  13546<<ASSIGN
FPT$CLOSE.SN_
     12004**DCL     12004--REDEF
FPT$CLOSE.UTL_
     12005**DCL     12005--REDEF
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:147  
FPT$CLOSE.V
     12009**DCL     13567--ASSIGN
FPT$CLOSE.V.EXPIRE#
     12019**DCL     12019--REDEF
FPT$CLOSE.V.TYPE#
     12017**DCL     12017--REDEF
FPT$CLOSE.V.XTNSIZE#
     12014**DCL     12014--REDEF   12016--REDEF
FPT$CLOSE.V_
     12004**DCL     13567<<ASSIGN
FPT$CPEXIT
     12036**DCL     13522--ASSIGN  13549<<ASSIGN
FPT$CPEXIT.V
     12039**DCL     13573--ASSIGN
FPT$CPEXIT.V_
     12039**DCL     13573<<ASSIGN
FPT$FID
     12060**DCL     13524--ASSIGN  13550<<ASSIGN
FPT$FID.V
     12064**DCL     13575--ASSIGN
FPT$FID.V_
     12060**DCL     13575<<ASSIGN
FPT$OPEN
     12137**DCL     13514--ASSIGN  13545<<ASSIGN
FPT$OPEN.ACSVEH_
     12139**DCL     12140--REDEF
FPT$OPEN.ALTKEYS_
     12145**DCL     12146--REDEF   12146--REDEF
FPT$OPEN.HDR_
     12144**DCL     12145--REDEF
FPT$OPEN.TAB_
     12143**DCL     12144--REDEF
FPT$OPEN.UHL_
     12137**DCL     12138--REDEF   12138--REDEF
FPT$OPEN.V
     12146**DCL     13565--ASSIGN
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:148  
FPT$OPEN.V.FSN#
     12177**DCL     12177--REDEF   12177--REDEF
FPT$OPEN.V_
     12137**DCL     13565<<ASSIGN
FPT$OPEN.WSN_
     12143**DCL     12143--REDEF
FPT$READ
     12198**DCL     13506--ASSIGN  13510--ASSIGN  13518--ASSIGN  13541<<ASSIGN  13543<<ASSIGN  13547<<ASSIGN
FPT$READ.STATION_
     12201**DCL     12202--REDEF
FPT$READ.V
     12202**DCL     13557--ASSIGN  13561--ASSIGN  13569--ASSIGN
FPT$READ.V.DVBYTE.REREAD#
     12213**DCL     12213--REDEF
FPT$READ.V.INDX#
     12211**DCL     12211--REDEF
FPT$READ.V_
     12198**DCL     13557<<ASSIGN  13561<<ASSIGN  13569<<ASSIGN
FPT$TIME
     12231**DCL     13526--ASSIGN  13551<<ASSIGN
FPT$TIME.V
     12235**DCL     13577--ASSIGN
FPT$TIME.V_
     12231**DCL     13577<<ASSIGN
FPT$WRITE
     12256**DCL     13508--ASSIGN  13512--ASSIGN  13520--ASSIGN  13542<<ASSIGN  13544<<ASSIGN  13548<<ASSIGN
FPT$WRITE.STATION_
     12258**DCL     12258--REDEF
FPT$WRITE.V
     12259**DCL     13559--ASSIGN  13563--ASSIGN  13571--ASSIGN
FPT$WRITE.V.DVBYTE.VFC#
     12265**DCL     12265--REDEF
FPT$WRITE.V_
     12256**DCL     13559<<ASSIGN  13563<<ASSIGN  13571<<ASSIGN
FPT_INT
     11954**DCL     13592<<ASSIGN  13595<>CALL
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:149  
FPT_INT.V
     11954**DCL     13593--ASSIGN
FPT_INT.V.UENTRY#
     11954**DCL     13594<<ASSIGN
FPT_INT.V_
     11954**DCL     13593<<ASSIGN
FPT_TRAP
     11968**DCL     13582<<ASSIGN  13588<>CALL
FPT_TRAP.V
     11968**DCL     13583--ASSIGN
FPT_TRAP.V.ARITHMETIC#
     11969**DCL     13585<<ASSIGN
FPT_TRAP.V.ERRORS#
     11970**DCL     13587<<ASSIGN
FPT_TRAP.V.PMME#
     11969**DCL     13584<<ASSIGN
FPT_TRAP.V.PROGRAMMED#
     11969**DCL     13586<<ASSIGN
FPT_TRAP.V_
     11968**DCL     13583<<ASSIGN
KL$DREC
     12477**DCL     13500--ASSIGN
KL$DREC.PASSWORD
     12535**DCL     12539--REDEF
KL$DREC.RENAME
     12558**DCL     12559--REDEF
M$INT
       807**DCL-ENT 13595--CALL
M$TRAP
       806**DCL-ENT 13588--CALL
PROMPT
     13411**DCL     13538--ASSIGN
PROMPT.TYPE_
     13414**DCL     13555<<ASSIGN
PSEUDO$LIST
     12281**DCL     13502--ASSIGN
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:150  
SEG$2
     13419**DCL     13497--ASSIGN
SEG$2.ACCUM_CHG
     13468**DCL     13495<<ASSIGN
SEG$2.CPBUFF$
     13463**DCL     13526<<ASSIGN  13528>>ASSIGN
SEG$2.FLAGS
     13420**DCL     13493<<ASSIGN
SEG$2.FPT_CLOSE$
     13457**DCL     13514<<ASSIGN  13516>>ASSIGN  13546>>ASSIGN  13567>>ASSIGN  13567>>ASSIGN
SEG$2.FPT_CPEXIT$
     13460**DCL     13520<<ASSIGN  13522>>ASSIGN  13549>>ASSIGN  13573>>ASSIGN  13573>>ASSIGN
SEG$2.FPT_FID$
     13461**DCL     13522<<ASSIGN  13524>>ASSIGN  13550>>ASSIGN  13575>>ASSIGN  13575>>ASSIGN
SEG$2.FPT_OPEN$
     13456**DCL     13512<<ASSIGN  13514>>ASSIGN  13545>>ASSIGN  13565>>ASSIGN  13565>>ASSIGN
SEG$2.FPT_READ$
     13458**DCL     13516<<ASSIGN  13518>>ASSIGN  13547>>ASSIGN  13569>>ASSIGN  13569>>ASSIGN
SEG$2.FPT_READCC$
     13454**DCL     13508<<ASSIGN  13510>>ASSIGN  13543>>ASSIGN  13561>>ASSIGN  13561>>ASSIGN
SEG$2.FPT_READUC$
     13452**DCL     13502<<ASSIGN  13503>>IF      13505<<ASSIGN  13505>>ASSIGN  13506>>ASSIGN  13541>>ASSIGN
     13557>>ASSIGN  13557>>ASSIGN
SEG$2.FPT_TIME$
     13462**DCL     13524<<ASSIGN  13526>>ASSIGN  13551>>ASSIGN  13577>>ASSIGN  13577>>ASSIGN
SEG$2.FPT_WRITE$
     13459**DCL     13518<<ASSIGN  13520>>ASSIGN  13548>>ASSIGN  13571>>ASSIGN  13571>>ASSIGN
SEG$2.FPT_WRITECC$
     13455**DCL     13510<<ASSIGN  13512>>ASSIGN  13544>>ASSIGN  13563>>ASSIGN  13563>>ASSIGN
SEG$2.FPT_WRITEUC$
     13453**DCL     13506<<ASSIGN  13508>>ASSIGN  13542>>ASSIGN  13559>>ASSIGN  13559>>ASSIGN
SEG$2.GETCMD$
     13465**DCL     13530<<ASSIGN  13532>>ASSIGN  13553>>ASSIGN
SEG$2.HLP$
     13449**DCL     13499<<ASSIGN  13500>>ASSIGN
SEG$2.LASTPROMPT
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:151  
     13443**DCL     13496<<ASSIGN
SEG$2.LLDCB#
     13439**DCL     13494<<ASSIGN
SEG$2.PHYS$
     13451**DCL     13501<<ASSIGN
SEG$2.PROMPT$
     13470**DCL     13538<<ASSIGN
SEG$2.PSEUDO$
     13450**DCL     13500<<ASSIGN  13502>>ASSIGN
SEG$2.REMEM$
     13466**DCL     13532<<ASSIGN  13534>>ASSIGN
SEG$2.SPROMPT$
     13469**DCL     13536<<ASSIGN  13538>>ASSIGN  13555>>ASSIGN
SEG$2.USERS$
     13448**DCL     13497<<ASSIGN  13499>>ASSIGN
SEG$2.USERS_SZ
     13441**DCL     13498<<ASSIGN
SEG$2.WHEN_CNTL_REC$
     13467**DCL     13534<<ASSIGN  13536>>ASSIGN  13554>>ASSIGN
SEG$2.XUG_INIT$
     13464**DCL     13528<<ASSIGN  13530>>ASSIGN  13552>>ASSIGN
SEG2$
     11868**DCL     13419--IMP-PTR 13488<>CALL    13493>>ASSIGN  13494>>ASSIGN  13495>>ASSIGN  13496>>ASSIGN
     13497>>ASSIGN  13497>>ASSIGN  13498>>ASSIGN  13499>>ASSIGN  13499>>ASSIGN  13500>>ASSIGN  13500>>ASSIGN
     13501>>ASSIGN  13502>>ASSIGN  13502>>ASSIGN  13503>>IF      13503>>IF      13505>>ASSIGN  13505>>ASSIGN
     13506>>ASSIGN  13506>>ASSIGN  13508>>ASSIGN  13508>>ASSIGN  13510>>ASSIGN  13510>>ASSIGN  13512>>ASSIGN
     13512>>ASSIGN  13514>>ASSIGN  13514>>ASSIGN  13516>>ASSIGN  13516>>ASSIGN  13518>>ASSIGN  13518>>ASSIGN
     13520>>ASSIGN  13520>>ASSIGN  13522>>ASSIGN  13522>>ASSIGN  13524>>ASSIGN  13524>>ASSIGN  13526>>ASSIGN
     13526>>ASSIGN  13528>>ASSIGN  13528>>ASSIGN  13530>>ASSIGN  13530>>ASSIGN  13532>>ASSIGN  13532>>ASSIGN
     13534>>ASSIGN  13534>>ASSIGN  13536>>ASSIGN  13536>>ASSIGN  13538>>ASSIGN  13538>>ASSIGN  13541>>ASSIGN
     13542>>ASSIGN  13543>>ASSIGN  13544>>ASSIGN  13545>>ASSIGN  13546>>ASSIGN  13547>>ASSIGN  13548>>ASSIGN
     13549>>ASSIGN  13550>>ASSIGN  13551>>ASSIGN  13552>>ASSIGN  13553>>ASSIGN  13554>>ASSIGN  13555>>ASSIGN
     13557>>ASSIGN  13557>>ASSIGN  13559>>ASSIGN  13559>>ASSIGN  13561>>ASSIGN  13561>>ASSIGN  13563>>ASSIGN
     13563>>ASSIGN  13565>>ASSIGN  13565>>ASSIGN  13567>>ASSIGN  13567>>ASSIGN  13569>>ASSIGN  13569>>ASSIGN
     13571>>ASSIGN  13571>>ASSIGN  13573>>ASSIGN  13573>>ASSIGN  13575>>ASSIGN  13575>>ASSIGN  13577>>ASSIGN
     13577>>ASSIGN
PL6.E3A0      #006=CPA$INIT File=CPA$SUBR.:E05TSI                                TUE 07/29/97 11:19 Page:152  
WHEN$CNTL_REC
     13390**DCL     13536--ASSIGN  13554<<ASSIGN
XUG$GETCMD
     12639**DCL     13532--ASSIGN  13553<<ASSIGN
XUG$GETCMD.OUT$
     12644**DCL     12650--REDEF
XUG$INIT
     12986**DCL     13530--ASSIGN  13552<<ASSIGN

PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:153  
      705        1        /*T***********************************************************/
      706        2        /*T*                                                         */
      707        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      708        4        /*T*                                                         */
      709        5        /*T***********************************************************/
      710        6        CPA$WR_CONTFILE: PROC (GETCMD, SEMI_FLG, CPOS) ALTRET;
      711        7        /*P*    NAME:    CPA$WR_CONTFILE
      712        8                PURPOSE: To write records into *CONTINUATION_COMMANDS.
      713        9                DESCRIPTION: The GETCMD parameter and a flag to indicate
      714       10                             whether to append a semi-colon to the end of the
      715       11                             record. If the file is not open, then it
      716       12                             will be opened and then the record written.
      717       13        */
      718       14        /***** Include files *****/
      719       15          %INCLUDE CP_6;
      720       96          %INCLUDE CP_6_SUBS;
      721      636          %INCLUDE CP_MACROS_C;
      722     1388          %INCLUDE CP_SUBS_C;
      723     2305          %INCLUDE XU_MACRO_C;
      724     5411        %INCLUDE XUH_MACRO_C ;
      725     5495          %INCLUDE CP_DATA_R;
      726     8058        /***** Fpts *****/
      727     8059          %FPT_OPEN (STCLASS=AUTO);
      728     8168          %FPT_WRITE (STCLASS=AUTO);
      729     8199        /***** Based structures *****/
      730     8200          %F$DCB;
      731     8257    1     DCL CHAR$1 (0:0) CHAR(1) BASED UNAL;
      732     8258    1     DCL XUG$ PTR ;
      733     8259          %XUG_PARAMS ;
      734     8703          %P_PCB (NAME=P$PCB, STCLASS=BASED) ;
      735     8902          %XUG_RLT (NAME=XUG$RLT) ;
      736     8909        /***** Parameters *****/
      737     8910          %XUG_GETCMD (NAME=GETCMD, STCLASS=PARAM) ;
      738     9248    1     DCL SEMI_FLG BIT(1);
      739     9249    1     DCL CPOS UBIN WORD ;
      740     9250        /***** Auto data *****/
      741     9251    1     DCL NCHARS UBIN WORD ;
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:154  
      742     9252    1     DCL I UBIN WORD ;
      743     9253        /*
      744     9254             ***** If *CONTINUED_COMMANDS (M$IBEX1)
      745     9255                   is not open yet, then open it ...
      746     9256        */
      747     9257    1     IF DCBADDR(M$IBEX1_NUM) -> F$DCB.FCD# = %NO#
      748     9258    1        THEN
      749     9259    2           DO;   /* Open *CONTINUATION_COMMANDS */
      750     9260    2              FPT_OPEN = CFPT_OPEN;
      751     9261    2              FPT_OPEN.NAME_ = VECTOR(CONTINUATION_COMMANDS);
      752     9262    2              FPT_OPEN.V_ = VECTOR(FPT_OPEN.V);
      753     9263    2              FPT_OPEN.V.DCB# = M$IBEX1_NUM;
      754     9264    2              FPT_OPEN.V.FUN# = %CREATE#;
      755     9265    2              FPT_OPEN.V.EXIST# = %NEWFILE#;
      756     9266    2              FPT_OPEN.V.DISP# = %SAVE#;
      757     9267    2              FPT_OPEN.V.ASN# = %FILE#;
      758     9268    2              CALL M$OPEN (FPT_OPEN) ALTRET(E_PMME);
      759     9269    2           END;   /* Open *CONTINUATION_COMMANDS */
      760     9270        /*
      761     9271             ***** Write the buffer ...
      762     9272        */
      763     9273    1     FPT_WRITE = CFPT_WRITE;
      764     9274    1     FPT_WRITE.V_ = VECTOR(FPT_WRITE.V);
      765     9275    1     FPT_WRITE.V.DCB# = M$IBEX1_NUM;
      766     9276    1     XUG$ = GETCMD.WORK$ ;
      767     9277    1     IF ADDR(CPOS) = ADDR(NIL)
      768     9278    1         THEN
      769     9279    1             NCHARS = VBOUND(XUG.LAST) ;
      770     9280    1         ELSE
      771     9281    1             IF XUG.NLINES = 1
      772     9282    1               THEN
      773     9283    1                 NCHARS = CPOS ;
      774     9284    1               ELSE
      775     9285    2                 DO ;
      776     9286    2                   NCHARS = 0 ;
      777     9287    3                   DO I = 1 TO XUG.NLINES-1 ;
      778     9288    3                     NCHARS = NCHARS + VBASE(XUG.RLTVEC)->XUG$RLT(I) ;
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:155  
      779     9289    3                   END ; /* Do I */
      780     9290    2                   NCHARS = CPOS - NCHARS ;
      781     9291    2                 END ; /* Else Do */
      782     9292    1     IF SEMI_FLG
      783     9293    1       THEN
      784     9294    1         VBASE(XUG.LAST)->CHAR$1(NCHARS) = ';' ;
      785     9295    1     FPT_WRITE.BUF_ = XUG.LAST ;
      786     9296    1     FPT_WRITE.BUF_.BOUND = NCHARS ;
      787     9297    1     CALL M$WRITE (FPT_WRITE) ALTRET(E_PMME);
      788     9298    1     IF SEMI_FLG
      789     9299    1       THEN
      790     9300    1         VBASE(XUG.LAST)->CHAR$1(NCHARS) = ' ' ;
      791     9301        /**/
      792     9302    1     RETURN;
      793     9303        /**/
      794     9304    1   E_PMME:
      795     9305    1     ALTRETURN;
      796     9306    1   END CPA$WR_CONTFILE;
      797     9307        %EOD ;

PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:156  
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$WR_CONTFILE.

   Procedure CPA$WR_CONTFILE requires 121 words for executable code.
   Procedure CPA$WR_CONTFILE requires 82 words of local(AUTO) storage.

PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:157  

 Object Unit name= CPA$WR_CONTFILE                            File name= CPA$SUBR.:E05TOU
 UTS= JUL 29 '97 11:20:01.20 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   121    171  CPA$WR_CONTFILE
    2  RoData even  none     7      7  CPA$WR_CONTFILE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        3  CPA$WR_CONTFILE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CFPT_OPEN                             CFPT_WRITE
     CONTINUATION_COMMANDS                 M$IBEX1_NUM                           B_VECTNIL
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:158  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ROSID                                 ISSID
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:159  


      705        1        /*T***********************************************************/
      706        2        /*T*                                                         */
      707        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      708        4        /*T*                                                         */
      709        5        /*T***********************************************************/
      710        6        CPA$WR_CONTFILE: PROC (GETCMD, SEMI_FLG, CPOS) ALTRET;

      6  1 000000   000000 700200 xent  CPA$WR_CONT* TSX0  ! X66_AUTO_3
         1 000001   000122 000003                    ZERO    82,3

      711        7        /*P*    NAME:    CPA$WR_CONTFILE
      712        8                PURPOSE: To write records into *CONTINUATION_COMMANDS.
      713        9                DESCRIPTION: The GETCMD parameter and a flag to indicate
      714       10                             whether to append a semi-colon to the end of the
      715       11                             record. If the file is not open, then it
      716       12                             will be opened and then the record written.
      717       13        */
      718       14        /***** Include files *****/
      719       15          %INCLUDE CP_6;
      720       96          %INCLUDE CP_6_SUBS;
      721      636          %INCLUDE CP_MACROS_C;
      722     1388          %INCLUDE CP_SUBS_C;
      723     2305          %INCLUDE XU_MACRO_C;
      724     5411        %INCLUDE XUH_MACRO_C ;
      725     5495          %INCLUDE CP_DATA_R;
      726     8058        /***** Fpts *****/
      727     8059          %FPT_OPEN (STCLASS=AUTO);
      728     8168          %FPT_WRITE (STCLASS=AUTO);
      729     8199        /***** Based structures *****/
      730     8200          %F$DCB;
      731     8257    1     DCL CHAR$1 (0:0) CHAR(1) BASED UNAL;
      732     8258    1     DCL XUG$ PTR ;
      733     8259          %XUG_PARAMS ;
      734     8703          %P_PCB (NAME=P$PCB, STCLASS=BASED) ;
      735     8902          %XUG_RLT (NAME=XUG$RLT) ;
      736     8909        /***** Parameters *****/
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:160  
      737     8910          %XUG_GETCMD (NAME=GETCMD, STCLASS=PARAM) ;
      738     9248    1     DCL SEMI_FLG BIT(1);
      739     9249    1     DCL CPOS UBIN WORD ;
      740     9250        /***** Auto data *****/
      741     9251    1     DCL NCHARS UBIN WORD ;
      742     9252    1     DCL I UBIN WORD ;
      743     9253        /*
      744     9254             ***** If *CONTINUED_COMMANDS (M$IBEX1)
      745     9255                   is not open yet, then open it ...
      746     9256        */
      747     9257    1     IF DCBADDR(M$IBEX1_NUM) -> F$DCB.FCD# = %NO#

   9257  1 000002   000000 470400 2                  LDP0    0
         1 000003   000000 471500                    LDP1    0,,PR0
         1 000004   000000 720000 xsym               LXL0    M$IBEX1_NUM
         1 000005   100000 473510                    LDP3    0,X0,PR1
         1 000006   300031 236100                    LDQ     25,,PR3
         1 000007   020000 316007                    CANQ    8192,DL
         1 000010   000040 601000 1                  TNZ     s:9273

      748     9258    1        THEN
      749     9259    2           DO;   /* Open *CONTINUATION_COMMANDS */

      750     9260    2              FPT_OPEN = CFPT_OPEN;

   9260  1 000011   000100 100400                    MLR     fill='000'O
         1 000012   000000 000350 xsym               ADSC9   CFPT_OPEN                cn=0,n=232
         1 000013   200006 000350                    ADSC9   FPT_OPEN,,AUTO           cn=0,n=232

      751     9261    2              FPT_OPEN.NAME_ = VECTOR(CONTINUATION_COMMANDS);

   9261  1 000014   000002 237000 2                  LDAQ    2
         1 000015   200014 757100                    STAQ    FPT_OPEN+6,,AUTO

      752     9262    2              FPT_OPEN.V_ = VECTOR(FPT_OPEN.V);

   9262  1 000016   000004 235000 2                  LDA     4
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:161  
         1 000017   200120 452500                    STP2    I+2,,AUTO
         1 000020   200120 236100                    LDQ     I+2,,AUTO
         1 000021   000052 036003                    ADLQ    42,DU
         1 000022   200006 757100                    STAQ    FPT_OPEN,,AUTO

      753     9263    2              FPT_OPEN.V.DCB# = M$IBEX1_NUM;

   9263  1 000023   200052 740100                    STX0    FPT_OPEN+36,,AUTO

      754     9264    2              FPT_OPEN.V.FUN# = %CREATE#;

   9264  1 000024   003000 236007                    LDQ     1536,DL
         1 000025   200053 552110                    STBQ    FPT_OPEN+37,'10'O,AUTO

      755     9265    2              FPT_OPEN.V.EXIST# = %NEWFILE#;

   9265  1 000026   000600 236007                    LDQ     384,DL
         1 000027   200052 256100                    ORSQ    FPT_OPEN+36,,AUTO

      756     9266    2              FPT_OPEN.V.DISP# = %SAVE#;

   9266  1 000030   000002 236007                    LDQ     2,DL
         1 000031   200057 552104                    STBQ    FPT_OPEN+41,'04'O,AUTO

      757     9267    2              FPT_OPEN.V.ASN# = %FILE#;

   9267  1 000032   000001 236007                    LDQ     1,DL
         1 000033   200053 552104                    STBQ    FPT_OPEN+37,'04'O,AUTO

      758     9268    2              CALL M$OPEN (FPT_OPEN) ALTRET(E_PMME);

   9268  1 000034   200006 630500                    EPPR0   FPT_OPEN,,AUTO
         1 000035   450000 713400                    CLIMB   alt,open
         1 000036   410400 401760                    pmme    nvectors=18
         1 000037   000170 702000 1                  TSX2    E_PMME

      759     9269    2           END;   /* Open *CONTINUATION_COMMANDS */
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:162  

      760     9270        /*
      761     9271             ***** Write the buffer ...
      762     9272        */
      763     9273    1     FPT_WRITE = CFPT_WRITE;

   9273  1 000040   000100 100400                    MLR     fill='000'O
         1 000041   000000 000060 xsym               ADSC9   CFPT_WRITE               cn=0,n=48
         1 000042   200100 000060                    ADSC9   FPT_WRITE,,AUTO          cn=0,n=48

      764     9274    1     FPT_WRITE.V_ = VECTOR(FPT_WRITE.V);

   9274  1 000043   000005 235000 2                  LDA     5
         1 000044   200120 452500                    STP2    I+2,,AUTO
         1 000045   200120 236100                    LDQ     I+2,,AUTO
         1 000046   000110 036003                    ADLQ    72,DU
         1 000047   200100 757100                    STAQ    FPT_WRITE,,AUTO

      765     9275    1     FPT_WRITE.V.DCB# = M$IBEX1_NUM;

   9275  1 000050   000000 720000 xsym               LXL0    M$IBEX1_NUM
         1 000051   200110 740100                    STX0    FPT_WRITE+8,,AUTO

      766     9276    1     XUG$ = GETCMD.WORK$ ;

   9276  1 000052   200003 470500                    LDP0    @GETCMD,,AUTO
         1 000053   000004 236100                    LDQ     4,,PR0
         1 000054   200114 756100                    STQ     XUG$,,AUTO

      767     9277    1     IF ADDR(CPOS) = ADDR(NIL)

   9277  1 000055   200005 236100                    LDQ     @CPOS,,AUTO
         1 000056   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000057   000065 601000 1                  TNZ     s:9281

      768     9278    1         THEN
      769     9279    1             NCHARS = VBOUND(XUG.LAST) ;
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:163  

   9279  1 000060   200114 471500                    LDP1    XUG$,,AUTO
         1 000061   100004 236100                    LDQ     4,,PR1
         1 000062   000020 772000                    QRL     16
         1 000063   200115 756100                    STQ     NCHARS,,AUTO
         1 000064   000125 710000 1                  TRA     s:9292

      770     9280    1         ELSE
      771     9281    1             IF XUG.NLINES = 1

   9281  1 000065   200114 471500                    LDP1    XUG$,,AUTO
         1 000066   100106 235100                    LDA     70,,PR1
         1 000067   000001 115007                    CMPA    1,DL
         1 000070   000075 601000 1                  TNZ     s:9286

      772     9282    1               THEN
      773     9283    1                 NCHARS = CPOS ;

   9283  1 000071   200005 473500                    LDP3    @CPOS,,AUTO
         1 000072   300000 235100                    LDA     0,,PR3
         1 000073   200115 755100                    STA     NCHARS,,AUTO
         1 000074   000125 710000 1                  TRA     s:9292

      774     9284    1               ELSE
      775     9285    2                 DO ;

      776     9286    2                   NCHARS = 0 ;

   9286  1 000075   200115 450100                    STZ     NCHARS,,AUTO

      777     9287    3                   DO I = 1 TO XUG.NLINES-1 ;

   9287  1 000076   000001 235007                    LDA     1,DL
         1 000077   200116 755100                    STA     I,,AUTO
         1 000100   000114 710000 1                  TRA     s:9289+2

      778     9288    3                     NCHARS = NCHARS + VBASE(XUG.RLTVEC)->XUG$RLT(I) ;
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:164  

   9288  1 000101   200114 470500                    LDP0    XUG$,,AUTO
         1 000102   000013 471500                    LDP1    11,,PR0
         1 000103   200116 235100                    LDA     I,,AUTO
         1 000104   000100 101505                    MRL     fill='000'O
         1 000105   100000 000001                    ADSC9   0,A,PR1                  cn=0,n=1
         1 000106   200120 000004                    ADSC9   I+2,,AUTO                cn=0,n=4
         1 000107   200120 236100                    LDQ     I+2,,AUTO
         1 000110   200115 036100                    ADLQ    NCHARS,,AUTO
         1 000111   200115 756100                    STQ     NCHARS,,AUTO

      779     9289    3                   END ; /* Do I */

   9289  1 000112   000001 035007                    ADLA    1,DL
         1 000113   200116 755100                    STA     I,,AUTO
         1 000114   200114 470500                    LDP0    XUG$,,AUTO
         1 000115   200116 236100                    LDQ     I,,AUTO
         1 000116   000121 604000 1                  TMI     s:9290
         1 000117   000106 116100                    CMPQ    70,,PR0
         1 000120   000101 604000 1                  TMI     s:9288

      780     9290    2                   NCHARS = CPOS - NCHARS ;

   9290  1 000121   200005 471500                    LDP1    @CPOS,,AUTO
         1 000122   100000 236100                    LDQ     0,,PR1
         1 000123   200115 136100                    SBLQ    NCHARS,,AUTO
         1 000124   200115 756100                    STQ     NCHARS,,AUTO

      781     9291    2                 END ; /* Else Do */

      782     9292    1     IF SEMI_FLG

   9292  1 000125   200004 470500                    LDP0    @SEMI_FLG,,AUTO
         1 000126   000000 066500                    CMPB    filb='0'B
         1 000127   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
         1 000130   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         1 000131   000140 600000 1                  TZE     s:9295
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:165  

      783     9293    1       THEN
      784     9294    1         VBASE(XUG.LAST)->CHAR$1(NCHARS) = ';' ;

   9294  1 000132   200114 471500                    LDP1    XUG$,,AUTO
         1 000133   100005 473500                    LDP3    5,,PR1
         1 000134   200115 235100                    LDA     NCHARS,,AUTO
         1 000135   040105 100400                    MLR     fill='040'O
         1 000136   000006 000001 2                  ADSC9   6                        cn=0,n=1
         1 000137   300000 000001                    ADSC9   0,A,PR3                  cn=0,n=1

      785     9295    1     FPT_WRITE.BUF_ = XUG.LAST ;

   9295  1 000140   200114 471500                    LDP1    XUG$,,AUTO
         1 000141   100004 237100                    LDAQ    4,,PR1
         1 000142   200104 757100                    STAQ    FPT_WRITE+4,,AUTO

      786     9296    1     FPT_WRITE.BUF_.BOUND = NCHARS ;

   9296  1 000143   200115 236100                    LDQ     NCHARS,,AUTO
         1 000144   000020 736000                    QLS     16
         1 000145   200104 676100                    ERQ     FPT_WRITE+4,,AUTO
         1 000146   000034 376000 xsym               ANQ     B_VECTNIL+28
         1 000147   200104 656100                    ERSQ    FPT_WRITE+4,,AUTO

      787     9297    1     CALL M$WRITE (FPT_WRITE) ALTRET(E_PMME);

   9297  1 000150   200100 630500                    EPPR0   FPT_WRITE,,AUTO
         1 000151   440001 713400                    CLIMB   alt,write
         1 000152   401400 401760                    pmme    nvectors=4
         1 000153   000170 702000 1                  TSX2    E_PMME

      788     9298    1     IF SEMI_FLG

   9298  1 000154   200004 470500                    LDP0    @SEMI_FLG,,AUTO
         1 000155   000000 066500                    CMPB    filb='0'B
         1 000156   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:166  
         1 000157   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         1 000160   000167 600000 1                  TZE     s:9302

      789     9299    1       THEN
      790     9300    1         VBASE(XUG.LAST)->CHAR$1(NCHARS) = ' ' ;

   9300  1 000161   200114 471500                    LDP1    XUG$,,AUTO
         1 000162   100005 473500                    LDP3    5,,PR1
         1 000163   200115 235100                    LDA     NCHARS,,AUTO
         1 000164   040105 100400                    MLR     fill='040'O
         1 000165   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         1 000166   300000 000001                    ADSC9   0,A,PR3                  cn=0,n=1

      791     9301        /**/
      792     9302    1     RETURN;

   9302  1 000167   000000 702200 xent               TSX2  ! X66_ARET

      793     9303        /**/
      794     9304    1   E_PMME:
      795     9305    1     ALTRETURN;

   9305  1 000170   000000 702200 xent  E_PMME       TSX2  ! X66_AALT
      796     9306    1   END CPA$WR_CONTFILE;
      797     9307        %EOD ;

PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:167  
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$WR_CONTFILE.
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:168  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @CPOS                      3-0-0/w PTR         r     1 @GETCMD
     4-0-0/w PTR         r     1 @SEMI_FLG                 *0-0-0/w UBIN        r     1 CPOS
     6-0-0/d STRC(2088)  r     1 FPT_OPEN                 100-0-0/d STRC(432)   r     1 FPT_WRITE
    *0-0-0/d STRC(1512)  r     1 GETCMD                   116-0-0/w UBIN        r     1 I
   115-0-0/w UBIN        r     1 NCHARS                    *0-0-0/b BIT         r     1 SEMI_FLG
   114-0-0/w PTR         r     1 XUG$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(2088)  r     1 CFPT_OPEN                  0-0-0/d STRC(432)   r     1 CFPT_WRITE
     0-0-0/c STRC(288)   r     1 CONTINUATION_COMMANDS
     0-0-0/w UBIN        r     1 M$IBEX1_NUM

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR        r     1 CHAR$1(0:0)                0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/d STRC(9612)  r     1 XUG
     0-0-0/c UBIN(9)     r     1 XUG$RLT(0:0)


   Procedure CPA$WR_CONTFILE requires 121 words for executable code.
   Procedure CPA$WR_CONTFILE requires 82 words of local(AUTO) storage.
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:169  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:170  
          MINI XREF LISTING

CAMR_REC.ACSVEH_
      7030**DCL      7031--REDEF
CAMR_REC.ALTKEYS_
      7036**DCL      7037--REDEF    7037--REDEF
CAMR_REC.HDR_
      7035**DCL      7036--REDEF
CAMR_REC.TAB_
      7034**DCL      7035--REDEF
CAMR_REC.UHL_
      7028**DCL      7029--REDEF    7029--REDEF
CAMR_REC.V.FSN#
      7068**DCL      7068--REDEF    7068--REDEF
CAMR_REC.WSN_
      7034**DCL      7034--REDEF
CFPT_CLOSE.SN_
      5872**DCL      5872--REDEF
CFPT_CLOSE.UTL_
      5873**DCL      5873--REDEF
CFPT_CLOSE.V.EXPIRE#
      5887**DCL      5887--REDEF
CFPT_CLOSE.V.TYPE#
      5885**DCL      5885--REDEF
CFPT_CLOSE.V.XTNSIZE#
      5882**DCL      5882--REDEF    5884--REDEF
CFPT_OPEN
      5805**DCL      9260>>ASSIGN
CFPT_OPEN.ACSVEH_
      5807**DCL      5808--REDEF
CFPT_OPEN.ALTKEYS_
      5813**DCL      5814--REDEF    5814--REDEF
CFPT_OPEN.HDR_
      5812**DCL      5813--REDEF
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:171  
CFPT_OPEN.TAB_
      5811**DCL      5812--REDEF
CFPT_OPEN.UHL_
      5805**DCL      5806--REDEF    5806--REDEF
CFPT_OPEN.V.FSN#
      5845**DCL      5845--REDEF    5845--REDEF
CFPT_OPEN.WSN_
      5811**DCL      5811--REDEF
CFPT_READ.STATION_
      5911**DCL      5912--REDEF
CFPT_READ.V.DVBYTE.REREAD#
      5923**DCL      5923--REDEF
CFPT_READ.V.INDX#
      5921**DCL      5921--REDEF
CFPT_READUC.STATION_
      6281**DCL      6282--REDEF
CFPT_READUC.V.DVBYTE.REREAD#
      6293**DCL      6293--REDEF
CFPT_READUC.V.INDX#
      6291**DCL      6291--REDEF
CFPT_TRTN.V.IR#
      6517**DCL      6518--REDEF
CFPT_WRITE
      5947**DCL      9273>>ASSIGN
CFPT_WRITE.STATION_
      5949**DCL      5949--REDEF
CFPT_WRITE.V.DVBYTE.VFC#
      5956**DCL      5956--REDEF
CFPT_WRITEUC.STATION_
      6249**DCL      6249--REDEF
CFPT_WRITEUC.V.DVBYTE.VFC#
      6256**DCL      6256--REDEF
CFPT_XXX.V.STEPCC#
      7229**DCL      7229--REDEF
CGETCMD.OUT$
      7250**DCL      7256--REDEF
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:172  
CHAR$1
      8257**DCL      9294<<ASSIGN   9300<<ASSIGN
CONTINUATION_COMMANDS
      6578**DCL      9261--ASSIGN
CPOS
      9249**DCL         6--PROC     9277--IF       9283>>ASSIGN   9290>>ASSIGN
CVLP_TRMCTL.BREAKCOUNT
      6841**DCL      6842--REDEF
CVLP_WINDOW.FWINDOW#
      6937**DCL      6937--REDEF    6938--REDEF
E_PMME
      9305**LABEL    9268--CALLALT  9297--CALLALT
F$DCB.ACTPOS
      8233**DCL      8233--REDEF
F$DCB.ARS#
      8207**DCL      8207--REDEF
F$DCB.ATTR
      8226**DCL      8227--REDEF
F$DCB.BORROW
      8241**DCL      8241--REDEF    8241--REDEF    8241--REDEF
F$DCB.DCBNAME.L
      8255**DCL      8255--IMP-SIZ
F$DCB.EOMCHAR#
      8211**DCL      8211--REDEF
F$DCB.FCD#
      8220**DCL      9257>>IF
F$DCB.FLDID
      8236**DCL      8236--REDEF
F$DCB.FORM$
      8230**DCL      8230--REDEF
F$DCB.FSECT
      8246**DCL      8246--REDEF
F$DCB.FSN#
      8223**DCL      8223--REDEF    8223--REDEF    8224--REDEF
F$DCB.HEADER$
      8229**DCL      8229--REDEF
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:173  
F$DCB.IXTNSIZE#
      8227**DCL      8227--REDEF
F$DCB.LASTSTA$
      8216**DCL      8216--REDEF
F$DCB.LVL
      8242**DCL      8242--REDEF
F$DCB.NAME#.C
      8217**DCL      8217--REDEF
F$DCB.NOEOF
      8239**DCL      8239--REDEF
F$DCB.NRECS#
      8228**DCL      8228--REDEF
F$DCB.NRECX
      8247**DCL      8247--REDEF
F$DCB.OHDR
      8239**DCL      8239--REDEF
F$DCB.ORG#
      8222**DCL      8222--REDEF
F$DCB.PRECNO
      8245**DCL      8245--REDEF
F$DCB.RCSZ
      8251**DCL      8251--REDEF
F$DCB.RES#
      8218**DCL      8218--REDEF
F$DCB.SETX
      8230**DCL      8230--REDEF
F$DCB.TAB$
      8230**DCL      8230--REDEF
F$DCB.TDA
      8244**DCL      8245--REDEF
F$DCB.WSN#
      8218**DCL      8218--REDEF
FPT_OPEN
      8124**DCL      9260<<ASSIGN   9268<>CALL
FPT_OPEN.ACSVEH_
      8126**DCL      8127--REDEF
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:174  
FPT_OPEN.ALTKEYS_
      8132**DCL      8133--REDEF    8133--REDEF
FPT_OPEN.HDR_
      8131**DCL      8132--REDEF
FPT_OPEN.NAME_
      8125**DCL      9261<<ASSIGN
FPT_OPEN.TAB_
      8130**DCL      8131--REDEF
FPT_OPEN.UHL_
      8124**DCL      8125--REDEF    8125--REDEF
FPT_OPEN.V
      8133**DCL      9262--ASSIGN
FPT_OPEN.V.ASN#
      8143**DCL      9267<<ASSIGN
FPT_OPEN.V.DCB#
      8133**DCL      9263<<ASSIGN
FPT_OPEN.V.DISP#
      8149**DCL      9266<<ASSIGN
FPT_OPEN.V.EXIST#
      8137**DCL      9265<<ASSIGN
FPT_OPEN.V.FSN#
      8164**DCL      8164--REDEF    8164--REDEF
FPT_OPEN.V.FUN#
      8143**DCL      9264<<ASSIGN
FPT_OPEN.V_
      8124**DCL      9262<<ASSIGN
FPT_OPEN.WSN_
      8130**DCL      8130--REDEF
FPT_WRITE
      8185**DCL      9273<<ASSIGN   9297<>CALL
FPT_WRITE.BUF_
      8185**DCL      9295<<ASSIGN
FPT_WRITE.BUF_.BOUND
      8185**DCL      9296<<ASSIGN
FPT_WRITE.STATION_
      8187**DCL      8187--REDEF
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:175  
FPT_WRITE.V
      8188**DCL      9274--ASSIGN
FPT_WRITE.V.DCB#
      8188**DCL      9275<<ASSIGN
FPT_WRITE.V.DVBYTE.VFC#
      8194**DCL      8194--REDEF
FPT_WRITE.V_
      8185**DCL      9274<<ASSIGN
GETCMD
      8923**DCL         6--PROC
GETCMD.OUT$
      8928**DCL      8934--REDEF
GETCMD.WORK$
      8956**DCL      9276>>ASSIGN
I
      9252**DCL      9287<<DOINDEX  9288>>ASSIGN
M$IBEX1_NUM
      7997**DCL      9257--IF       9263>>ASSIGN   9275>>ASSIGN
M$OPEN
        24**DCL-ENT  9268--CALL
M$WRITE
        25**DCL-ENT  9297--CALL
NCHARS
      9251**DCL      9279<<ASSIGN   9283<<ASSIGN   9286<<ASSIGN   9288<<ASSIGN   9288>>ASSIGN   9290<<ASSIGN
      9290>>ASSIGN   9294>>ASSIGN   9296>>ASSIGN   9300>>ASSIGN
SEMI_FLG
      9248**DCL         6--PROC     9292>>IF       9298>>IF
XUG.BUF
      8698**DCL      8701--REDEF
XUG.LAST
      8270**DCL      9279>>ASSIGN   9294>>ASSIGN   9295>>ASSIGN   9300>>ASSIGN
XUG.NLINES
      8537**DCL      9281>>IF       9287>>DOINDEX
XUG.RLTVEC
      8280**DCL      9288>>ASSIGN
XUG$
PL6.E3A0      #007=CPA$WR_CONTFILE File=CPA$SUBR.:E05TSI                         TUE 07/29/97 11:20 Page:176  
      8258**DCL      8262--IMP-PTR  9276<<ASSIGN   9279>>ASSIGN   9281>>IF       9287>>DOINDEX  9288>>ASSIGN
      9294>>ASSIGN   9295>>ASSIGN   9300>>ASSIGN
XUG$RLT
      8905**DCL      9288>>ASSIGN

PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:177  
      798        1        /*T***********************************************************/
      799        2        /*T*                                                         */
      800        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      801        4        /*T*                                                         */
      802        5        /*T***********************************************************/
      803        6        /*X*  DMC,DFC   */
      804        7        /**/
      805        8        /*P*          NAME:    CPA$CHK_IF_A_DISALLOWED_CMD
      806        9                      PURPOSE:    This routine is called to see if the System manager
      807       10                                has disallowed this command. If so, this routine RETURNs
      808       11                               normally.  If not, this routine ALTRETRUNs.
      809       12        */
      810       13        CPA$CHK_IF_A_DISALLOWED_CMD: PROC ALTRET;
      811       14
      812       15        /***** Includes *****/
      813       16        %INCLUDE B$JIT;
      814      306        %INCLUDE CP_6;
      815      387        %INCLUDE CP_SUBS_C;
      816     1304        %INCLUDE F_ERRORS_C;
      817     1544        %INCLUDE CP_6_SUBS;
      818     2084        %INCLUDE CP_MACROS_C;
      819     2836        %INCLUDE XU_MACRO_C;
      820     5942        %INCLUDE CP_DATA_R;
      821     8505        /***** Constants *****/
      822     8506    1   DCL PASSWORD CHAR(0) CONSTANT INIT('PASSWORD');
      823     8507    1   DCL MESSAGE CHAR(0) CONSTANT INIT('MESSAGE');
      824     8508        /***** Symrefs *****/
      825     8509    1   DCL IBEX_PASSWORD BIT(1) SYMREF;
      826     8510    1   DCL IBEX_MESSAGE BIT(1) SYMREF;
      827     8511        /***** Auto *****/
      828     8512    1   DCL RETURN_FLG BIT(1);
      829     8513    1   DCL DCB$ PTR;
      830     8514        /***** Based *****/
      831     8515        %F$DCB;
      832     8572
      833     8573    1     RETURN_FLG=%YES#;
      834     8574    1     DCB$ = DCBADDR(B$JIT.USRDCB);
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:178  
      835     8575    1     IF DCB$ = ADDR(NIL)
      836     8576    1       THEN
      837     8577    1         RETURN_FLG=%NO#;
      838     8578    1     IF B$JIT.USRERR.CODE ~= %E$NOFILE
      839     8579    1       THEN
      840     8580    1         RETURN_FLG=%NO#;
      841     8581
      842     8582    1     IF RETURN_FLG
      843     8583    1       THEN
      844     8584    1   DO_GROUP:
      845     8585    2         DO;
      846     8586    2           RETURN_FLG=%NO#;
      847     8587    2           IF NOT IBEX_PASSWORD
      848     8588    2             THEN
      849     8589    2               IF DCB$->F$DCB.ACCT#=COLONSYS.ACCT# AND
      850     8590    2                  DCB$->F$DCB.NAME#.C=PASSWORD
      851     8591    2                 THEN
      852     8592    3                   DO;
      853     8593    3                     RETURN_FLG=%YES#;
      854     8594    3                     EXIT DO_GROUP;
      855     8595    3                   END;
      856     8596    2           IF NOT IBEX_MESSAGE
      857     8597    2             THEN
      858     8598    2               IF DCB$->F$DCB.ACCT#=COLONSYS.ACCT# AND
      859     8599    2                  DCB$->F$DCB.NAME#.C=MESSAGE
      860     8600    2                 THEN
      861     8601    2                   RETURN_FLG=%YES#;
      862     8602    2         END;      /* DO_GROUP */
      863     8603
      864     8604    1     IF RETURN_FLG
      865     8605    1       THEN
      866     8606    1         RETURN;
      867     8607
      868     8608    1     ALTRETURN;
      869     8609
      870     8610    1   END     CPA$CHK_IF_A_DISALLOWED_CMD;

PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:179  
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$CHK_IF_A_DISALLOWED_CMD.

   Procedure CPA$CHK_IF_A_DISALLOWED_CMD requires 53 words for executable code.
   Procedure CPA$CHK_IF_A_DISALLOWED_CMD requires 6 words of local(AUTO) storage.

    No errors detected in file CPA$SUBR.:E05TSI    .

PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:180  

 Object Unit name= CPA$CHK_IF_A_DISALLOWED_CMD                File name= CPA$SUBR.:E05TOU
 UTS= JUL 29 '97 11:20:27.68 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS      4      4  CPA$CHK_IF_A_DISALLOWED_CMD
    2   Proc  even  none    53     65  CPA$CHK_IF_A_DISALLOWED_CMD
    3  RoData even  none     1      1  CPA$CHK_IF_A_DISALLOWED_CMD

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        0  CPA$CHK_IF_A_DISALLOWED_CMD

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  COLONSYS                         r    B$JIT$
     IBEX_PASSWORD                         IBEX_MESSAGE                          B_VECTNIL
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:181  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ROSID
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:182  


      798        1        /*T***********************************************************/
      799        2        /*T*                                                         */
      800        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      801        4        /*T*                                                         */
      802        5        /*T***********************************************************/
      803        6        /*X*  DMC,DFC   */
      804        7        /**/
      805        8        /*P*          NAME:    CPA$CHK_IF_A_DISALLOWED_CMD
      806        9                      PURPOSE:    This routine is called to see if the System manager
      807       10                                has disallowed this command. If so, this routine RETURNs
      808       11                               normally.  If not, this routine ALTRETRUNs.
      809       12        */
      810       13        CPA$CHK_IF_A_DISALLOWED_CMD: PROC ALTRET;

     13  2 000000   000000 700200 xent  CPA$CHK_IF_* TSX0  ! X66_AUTO_0
         2 000001   000006 000000                    ZERO    6,0

      811       14
      812       15        /***** Includes *****/
      813       16        %INCLUDE B$JIT;
      814      306        %INCLUDE CP_6;
      815      387        %INCLUDE CP_SUBS_C;
      816     1304        %INCLUDE F_ERRORS_C;
      817     1544        %INCLUDE CP_6_SUBS;
      818     2084        %INCLUDE CP_MACROS_C;
      819     2836        %INCLUDE XU_MACRO_C;
      820     5942        %INCLUDE CP_DATA_R;
      821     8505        /***** Constants *****/
      822     8506    1   DCL PASSWORD CHAR(0) CONSTANT INIT('PASSWORD');
      823     8507    1   DCL MESSAGE CHAR(0) CONSTANT INIT('MESSAGE');
      824     8508        /***** Symrefs *****/
      825     8509    1   DCL IBEX_PASSWORD BIT(1) SYMREF;
      826     8510    1   DCL IBEX_MESSAGE BIT(1) SYMREF;
      827     8511        /***** Auto *****/
      828     8512    1   DCL RETURN_FLG BIT(1);
      829     8513    1   DCL DCB$ PTR;
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:183  
      830     8514        /***** Based *****/
      831     8515        %F$DCB;
      832     8572
      833     8573    1     RETURN_FLG=%YES#;

   8573  2 000002   400000 236003                    LDQ     -131072,DU
         2 000003   200003 756100                    STQ     RETURN_FLG,,AUTO

      834     8574    1     DCB$ = DCBADDR(B$JIT.USRDCB);

   8574  2 000004   000000 470400 3                  LDP0    0
         2 000005   000000 471500                    LDP1    0,,PR0
         2 000006   000000 473400 xsym               LDP3    B$JIT$
         2 000007   300153 720100                    LXL0    107,,PR3
         2 000010   000777 360003                    ANX0    511,DU
         2 000011   100000 236110                    LDQ     0,X0,PR1
         2 000012   200004 756100                    STQ     DCB$,,AUTO

      835     8575    1     IF DCB$ = ADDR(NIL)

   8575  2 000013   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000014   000016 601000 2                  TNZ     s:8578

      836     8576    1       THEN
      837     8577    1         RETURN_FLG=%NO#;

   8577  2 000015   200003 450100                    STZ     RETURN_FLG,,AUTO

      838     8578    1     IF B$JIT.USRERR.CODE ~= %E$NOFILE

   8578  2 000016   300144 236100                    LDQ     100,,PR3
         2 000017   377770 376007                    ANQ     131064,DL
         2 000020   001610 116007                    CMPQ    904,DL
         2 000021   000023 600000 2                  TZE     s:8582

      839     8579    1       THEN
      840     8580    1         RETURN_FLG=%NO#;
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:184  

   8580  2 000022   200003 450100                    STZ     RETURN_FLG,,AUTO

      841     8581
      842     8582    1     IF RETURN_FLG

   8582  2 000023   200003 234100                    SZN     RETURN_FLG,,AUTO
         2 000024   000061 605000 2                  TPL     s:8604

      843     8583    1       THEN
      844     8584    1   DO_GROUP:
      845     8585    2         DO;

   8585  2 000025                       DO_GROUP     null
      846     8586    2           RETURN_FLG=%NO#;

   8586  2 000025   200003 450100                    STZ     RETURN_FLG,,AUTO

      847     8587    2           IF NOT IBEX_PASSWORD

   8587  2 000026   000000 234000 xsym               SZN     IBEX_PASSWORD
         2 000027   000044 604000 2                  TMI     s:8596

      848     8588    2             THEN
      849     8589    2               IF DCB$->F$DCB.ACCT#=COLONSYS.ACCT# AND

   8589  2 000030   200004 474500                    LDP4    DCB$,,AUTO
         2 000031   040000 106500                    CMPC    fill='040'O
         2 000032   400020 000010                    ADSC9   16,,PR4                  cn=0,n=8
         2 000033   000000 000010 xsym               ADSC9   COLONSYS                 cn=0,n=8
         2 000034   000044 601000 2                  TNZ     s:8596
         2 000035   040000 106500                    CMPC    fill='040'O
         2 000036   400010 200037                    ADSC9   8,,PR4                   cn=1,n=31
         2 000037   000000 000010 1                  ADSC9   PASSWORD                 cn=0,n=8
         2 000040   000044 601000 2                  TNZ     s:8596

      850     8590    2                  DCB$->F$DCB.NAME#.C=PASSWORD
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:185  
      851     8591    2                 THEN
      852     8592    3                   DO;

      853     8593    3                     RETURN_FLG=%YES#;

   8593  2 000041   400000 236003                    LDQ     -131072,DU
         2 000042   200003 756100                    STQ     RETURN_FLG,,AUTO

      854     8594    3                     EXIT DO_GROUP;

   8594  2 000043   000061 710000 2                  TRA     s:8604

      855     8595    3                   END;
      856     8596    2           IF NOT IBEX_MESSAGE

   8596  2 000044   000000 234000 xsym               SZN     IBEX_MESSAGE
         2 000045   000061 604000 2                  TMI     s:8604

      857     8597    2             THEN
      858     8598    2               IF DCB$->F$DCB.ACCT#=COLONSYS.ACCT# AND

   8598  2 000046   200004 474500                    LDP4    DCB$,,AUTO
         2 000047   040000 106500                    CMPC    fill='040'O
         2 000050   400020 000010                    ADSC9   16,,PR4                  cn=0,n=8
         2 000051   000000 000010 xsym               ADSC9   COLONSYS                 cn=0,n=8
         2 000052   000061 601000 2                  TNZ     s:8604
         2 000053   040000 106500                    CMPC    fill='040'O
         2 000054   400010 200037                    ADSC9   8,,PR4                   cn=1,n=31
         2 000055   000002 000007 1                  ADSC9   MESSAGE                  cn=0,n=7
         2 000056   000061 601000 2                  TNZ     s:8604

      859     8599    2                  DCB$->F$DCB.NAME#.C=MESSAGE
      860     8600    2                 THEN
      861     8601    2                   RETURN_FLG=%YES#;

   8601  2 000057   400000 236003                    LDQ     -131072,DU
         2 000060   200003 756100                    STQ     RETURN_FLG,,AUTO
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:186  

      862     8602    2         END;      /* DO_GROUP */

      863     8603
      864     8604    1     IF RETURN_FLG

   8604  2 000061   200003 234100                    SZN     RETURN_FLG,,AUTO
         2 000062   000064 605000 2                  TPL     s:8608

      865     8605    1       THEN
      866     8606    1         RETURN;

   8606  2 000063   000000 702200 xent               TSX2  ! X66_ARET

      867     8607
      868     8608    1     ALTRETURN;

   8608  2 000064   000000 702200 xent               TSX2  ! X66_AALT
      869     8609
      870     8610    1   END     CPA$CHK_IF_A_DISALLOWED_CMD;

PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:187  
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPA$CHK_IF_A_DISALLOWED_CMD.
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:188  

 **** Variables and constants ****

  ****  Section 001 RoData CPA$CHK_IF_A_DISALLOWED_CMD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     2-0-0/c CHAR(7)     r     1 MESSAGE                    0-0-0/c CHAR(8)     r     1 PASSWORD

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 DCB$                       3-0-0/b BIT         r     1 RETURN_FLG

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/c STRC(72)    r     1 COLONSYS
     0-0-0/b BIT         r     1 IBEX_MESSAGE               0-0-0/b BIT         r     1 IBEX_PASSWORD

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/d ASTR(3528)  r     1 F$DCB


   Procedure CPA$CHK_IF_A_DISALLOWED_CMD requires 53 words for executable code.
   Procedure CPA$CHK_IF_A_DISALLOWED_CMD requires 6 words of local(AUTO) storage.
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:189  

    No errors detected in file CPA$SUBR.:E05TSI    .
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:190  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:191  
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
       124**DCL       124--REDEF
B$JIT.ERR.MID
        31**DCL        31--REDEF
B$JIT.JRESPEAK
       192**DCL       193--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       301**DCL       301--REDEF     302--REDEF
B$JIT.PNR
       205**DCL       205--REDEF
B$JIT.TSLINE
       299**DCL       300--REDEF
B$JIT.USRDCB
       179**DCL      8574--ASSIGN
B$JIT.USRERR.CODE
       166**DCL      8578>>IF
B$JIT$
      8438**DCL        25--IMP-PTR  8574>>ASSIGN   8578>>IF
CAMR_REC.ACSVEH_
      7477**DCL      7478--REDEF
CAMR_REC.ALTKEYS_
      7483**DCL      7484--REDEF    7484--REDEF
CAMR_REC.HDR_
      7482**DCL      7483--REDEF
CAMR_REC.TAB_
      7481**DCL      7482--REDEF
CAMR_REC.UHL_
      7475**DCL      7476--REDEF    7476--REDEF
CAMR_REC.V.FSN#
      7515**DCL      7515--REDEF    7515--REDEF
CAMR_REC.WSN_
      7481**DCL      7481--REDEF
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:192  
CFPT_CLOSE.SN_
      6319**DCL      6319--REDEF
CFPT_CLOSE.UTL_
      6320**DCL      6320--REDEF
CFPT_CLOSE.V.EXPIRE#
      6334**DCL      6334--REDEF
CFPT_CLOSE.V.TYPE#
      6332**DCL      6332--REDEF
CFPT_CLOSE.V.XTNSIZE#
      6329**DCL      6329--REDEF    6331--REDEF
CFPT_OPEN.ACSVEH_
      6254**DCL      6255--REDEF
CFPT_OPEN.ALTKEYS_
      6260**DCL      6261--REDEF    6261--REDEF
CFPT_OPEN.HDR_
      6259**DCL      6260--REDEF
CFPT_OPEN.TAB_
      6258**DCL      6259--REDEF
CFPT_OPEN.UHL_
      6252**DCL      6253--REDEF    6253--REDEF
CFPT_OPEN.V.FSN#
      6292**DCL      6292--REDEF    6292--REDEF
CFPT_OPEN.WSN_
      6258**DCL      6258--REDEF
CFPT_READ.STATION_
      6358**DCL      6359--REDEF
CFPT_READ.V.DVBYTE.REREAD#
      6370**DCL      6370--REDEF
CFPT_READ.V.INDX#
      6368**DCL      6368--REDEF
CFPT_READUC.STATION_
      6728**DCL      6729--REDEF
CFPT_READUC.V.DVBYTE.REREAD#
      6740**DCL      6740--REDEF
CFPT_READUC.V.INDX#
      6738**DCL      6738--REDEF
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:193  
CFPT_TRTN.V.IR#
      6964**DCL      6965--REDEF
CFPT_WRITE.STATION_
      6396**DCL      6396--REDEF
CFPT_WRITE.V.DVBYTE.VFC#
      6403**DCL      6403--REDEF
CFPT_WRITEUC.STATION_
      6696**DCL      6696--REDEF
CFPT_WRITEUC.V.DVBYTE.VFC#
      6703**DCL      6703--REDEF
CFPT_XXX.V.STEPCC#
      7676**DCL      7676--REDEF
CGETCMD.OUT$
      7697**DCL      7703--REDEF
COLONSYS.ACCT#
      7092**DCL      8589>>IF       8598>>IF
CVLP_TRMCTL.BREAKCOUNT
      7288**DCL      7289--REDEF
CVLP_WINDOW.FWINDOW#
      7384**DCL      7384--REDEF    7385--REDEF
DCB$
      8513**DCL      8574<<ASSIGN   8575>>IF       8589>>IF       8589>>IF       8598>>IF       8598>>IF
DO_GROUP
      8585**LABEL    8594--EXIT
F$DCB.ACCT#
      8532**DCL      8589>>IF       8598>>IF
F$DCB.ACTPOS
      8548**DCL      8548--REDEF
F$DCB.ARS#
      8522**DCL      8522--REDEF
F$DCB.ATTR
      8541**DCL      8542--REDEF
F$DCB.BORROW
      8556**DCL      8556--REDEF    8556--REDEF    8556--REDEF
F$DCB.DCBNAME.L
      8570**DCL      8570--IMP-SIZ
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:194  
F$DCB.EOMCHAR#
      8526**DCL      8526--REDEF
F$DCB.FLDID
      8551**DCL      8551--REDEF
F$DCB.FORM$
      8545**DCL      8545--REDEF
F$DCB.FSECT
      8561**DCL      8561--REDEF
F$DCB.FSN#
      8538**DCL      8538--REDEF    8538--REDEF    8539--REDEF
F$DCB.HEADER$
      8544**DCL      8544--REDEF
F$DCB.IXTNSIZE#
      8542**DCL      8542--REDEF
F$DCB.LASTSTA$
      8531**DCL      8531--REDEF
F$DCB.LVL
      8557**DCL      8557--REDEF
F$DCB.NAME#.C
      8532**DCL      8532--REDEF    8589>>IF       8598>>IF
F$DCB.NOEOF
      8554**DCL      8554--REDEF
F$DCB.NRECS#
      8543**DCL      8543--REDEF
F$DCB.NRECX
      8562**DCL      8562--REDEF
F$DCB.OHDR
      8554**DCL      8554--REDEF
F$DCB.ORG#
      8537**DCL      8537--REDEF
F$DCB.PRECNO
      8560**DCL      8560--REDEF
F$DCB.RCSZ
      8566**DCL      8566--REDEF
F$DCB.RES#
      8533**DCL      8533--REDEF
PL6.E3A0      #008=CPA$CHK_IF_A_DISALLOWED_CMD File=CPA$SUBR.:E05TSI             TUE 07/29/97 11:20 Page:195  
F$DCB.SETX
      8545**DCL      8545--REDEF
F$DCB.TAB$
      8545**DCL      8545--REDEF
F$DCB.TDA
      8559**DCL      8560--REDEF
F$DCB.WSN#
      8533**DCL      8533--REDEF
IBEX_MESSAGE
      8510**DCL      8596>>IF
IBEX_PASSWORD
      8509**DCL      8587>>IF
MESSAGE
      8507**DCL      8598>>IF
PASSWORD
      8506**DCL      8589>>IF
RETURN_FLG
      8512**DCL      8573<<ASSIGN   8577<<ASSIGN   8580<<ASSIGN   8582>>IF       8586<<ASSIGN   8593<<ASSIGN
      8601<<ASSIGN   8604>>IF
