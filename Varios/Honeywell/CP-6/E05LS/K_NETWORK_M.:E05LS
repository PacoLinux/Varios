

15:03 JUL 28 '97 K_NETWORK_M.:E05SI                                        1    
    1      /*M* K_NETWORK_M macros used by the osi network layer.  data and error pdus */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*P* NAME: K_NETWORK_M */
    8
    9      /**/
   10
   11      %MACRO K$NPDU_FIXED (NAME=K$NPDU_FIXED,STCLASS=BASED,LVL=1,ALGN=ALIGNED,
   12                           LEN=0,LIFE=0,SEGMENT = '0'B,ERROR= '0'B,LAST=";");
   13       %LSET LISTDIR='0'B;
   14       %LSET LISTEXP='1'B;
   15       %LSET LISTCOM='0'B;
   16       %LSET LISTSUB='1'B;
   17       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   18       %IF (SUBSTR(STR,0,6)='STATIC') OR
   19       (SUBSTR(STR,0,8)='CONSTANT') OR
   20       (SUBSTR(STR,0,3)='EXT');
   21       %LSET INIT=CHARTEXT(' INIT');
   22       %LSET ENIT=CHARTEXT(' ');
   23       %ELSE;
   24       %LSET INIT=CHARTEXT('/*');
   25       %LSET ENIT=CHARTEXT('*/');
   26       %ENDIF;
   27
   28      %IF LVL=1 ;
   29      DCL 1 NAME STCLASS ALGN,
   30      %ELSE;
   31             %(LVL) NAME ALGN,
   32      %ENDIF;
   33           %(LVL+1) PROTOCOLID UBIN BYTE UNAL %INIT(%K_PRTCL_ID)%ENIT,
   34           /* protocol id - selects connectionless mode network service */
   35
   36           %(LVL+1) LENGTH     UBIN BYTE UNAL %INIT(LEN)%ENIT,
   37           /* length - of the network header in octets.  max is 254. */
15:03 JUL 28 '97 K_NETWORK_M.:E05SI                                        2    
   38
   39           %(LVL+1) VERSION UBIN BYTE UNAL %INIT(%K_PRTCL_ID_EXT)%ENIT,
   40           /* VERSION - indicates the version of network service being selected.*/
   41
   42           %(LVL+1) LIFETIME UBIN BYTE UNAL %INIT(LIFE)%ENIT,
   43           /* LIFETIME - lifetime of pdu in 500 millisecond units */
   44
   45           %IF NOT(MODE_FEP);
   46              %(LVL+1) * UBIN(1) UNAL %INIT(0)%ENIT,
   47           %ENDIF;
   48           %(LVL+1) SP BIT(1) UNAL %INIT(SEGMENT)%ENIT,
   49           /* SP - segmentation permitted bit(1) specifies whether a receiving network
   50                   may segment the user data.  1 = segmentation permitted */
   51
   52           %(LVL+1) MS BIT(1) UNAL %INIT(0)%ENIT,
   53           /* MS - more segments.  Similar to the more bit in x25.  1 = not the
   54                   last segment in a multi-segment msg. 0 = no more segments.
   55                   not used if sp = 0  */
   56
   57           %(LVL+1) ER BIT(1) UNAL %INIT(ERROR)%ENIT,
   58           /* ER - error reporting  bit(1). 1 = Report errors if discard of pdu is
   59                   necessary.  Use rules in 6.1 to determine when an error report
   60                   is required.  0 = dont generate an error report on pdu discard.*/
   61
   62           %(LVL+1) TYPE UBIN(5) UNAL %INIT(%K_DT_PDU)%ENIT,
   63           /* TYPE - UBIN(5) Determines type of pdu.  1c = data. 01 = error*/
   64
   65           %(LVL+1) SEGLENX UBIN BYTE UNAL %INIT(0)%ENIT,
   66           /* SEGLEN UBIN(8) - Segment length.  Entire length (including header)
   67              of pdu in bytes.  if pdu is not segmented will be equal to total length field
   68              in segmentation part of header */
   69
   70           %(LVL+1) SEGLENY UBIN BYTE UNAL %INIT(0)%ENIT,
   71           /* SEGLEN UBIN(8) - Segment length.  Entire length (including header)
   72              of pdu in bytes.  if pdu is not segmented will be equal to total length field
   73              in segmentation part of header */
   74
15:03 JUL 28 '97 K_NETWORK_M.:E05SI                                        3    
   75           %(LVL+1) CHECKSUMX UBIN BYTE UNAL %INIT(0)%ENIT,
   76              /* CHECKSUM UBIN(8) - checksum for entire pdu header.  0 indicates
   77                 checksum is to be ignored. */
   78
   79           %(LVL+1) CHECKSUMY UBIN BYTE UNAL %INIT(0)%ENIT LAST
   80      %MEND;
   81      /*
   82           NAME K$NPDU_SEGMENT -- describes the segmentation header part of the
   83                    data pdu.  May not be present on those pdus where the SP bit
   84                    is set to indicate no segmentation allowed(value 0). */
   85
   86      %MACRO K$NPDU_SEGMENT (NAME=K$NPDU_SEGMENT,STCLASS=BASED,LVL=1,
   87                           LAST=";");
   88       %LSET LISTDIR='0'B;
   89       %LSET LISTEXP='1'B;
   90       %LSET LISTCOM='0'B;
   91       %LSET LISTSUB='1'B;
   92       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   93       %IF (SUBSTR(STR,0,6)='STATIC') OR
   94       (SUBSTR(STR,0,8)='CONSTANT') OR
   95       (SUBSTR(STR,0,3)='EXT');
   96       %LSET INIT=CHARTEXT(' INIT');
   97       %LSET ENIT=CHARTEXT(' ');
   98       %ELSE;
   99       %LSET INIT=CHARTEXT('/*');
  100       %LSET ENIT=CHARTEXT('*/');
  101       %ENDIF;
  102
  103      %IF LVL=1 ;
  104      DCL 1 NAME STCLASS ALIGNED,
  105      %ELSE;
  106             %(LVL) NAME CALIGNED,
  107      %ENDIF;
  108             %IF NOT(MODE_FEP);
  109                 %(LVL+1) DATAID(0:1),
  110                    %(LVL+2) * UBIN(1) UNAL %INIT(0)%ENIT,
  111                    %(LVL+2) BYT UBIN(8) UNAL %INIT(0)%ENIT,
15:03 JUL 28 '97 K_NETWORK_M.:E05SI                                        4    
  112              %ELSE;
  113                 %(LVL+1) DATAID UBIN WORD %INIT(0)%ENIT,
  114              %ENDIF;
  115              /* DATAID UBIN(18) - Identifies an initial pdu and derived pdus as
  116                       being associated.  Used for correct reassembly */
  117
  118              %IF NOT(MODE_FEP);
  119                 %(LVL+1) OFFSET(0:1),
  120                    %(LVL+2) * UBIN(1) UNAL %INIT(0)%ENIT,
  121                    %(LVL+2) BYT UBIN(8) UNAL %INIT(0)%ENIT,
  122              %ELSE;
  123                 %(LVL+1) OFFSET UBIN WORD %INIT(0)%ENIT,
  124              %ENDIF;
  125      /*   OFFSET UBIN (18) - specifies the relative position of the segment
  126                 contained in the data field of the derived pdus with respect
  127                 to the start of the data field of the initial pdu.  The offset
  128                 is in bytes(octets).  The initial pdu will have a value of 0
  129                 for this field.  All values in this field will be multiples
  130                 of 8 */
  131
  132              %IF NOT(MODE_FEP);
  133                 %(LVL+1) TOTLEN(0:1),
  134                    %(LVL+2) * UBIN(1) UNAL %INIT(0)%ENIT,
  135                    %(LVL+2) BYT UBIN(8) UNAL %INIT(0)%ENIT LAST
  136              %ELSE;
  137                 %(LVL+1) TOTLEN UBIN WORD %INIT(0)%ENIT LAST
  138              %ENDIF;
  139      /*   TOTLEN UBIN(18) Specifies entire length of the initial pdu, including
  140                 both header and data.  This field is never changed.  */
  141      %MEND;
  142      /**/
  143
  144      /*
  145           NAME: K$NFRAG - network fragment header.
  146      */
  147
  148      %MACRO K$NFRAG (NAME=K$NFRAG,STCLASS=BASED,LVL=1,ALGN=ALIGNED,LAST=";");
15:03 JUL 28 '97 K_NETWORK_M.:E05SI                                        5    
  149       %LSET LISTDIR='0'B;
  150       %LSET LISTEXP='1'B;
  151       %LSET LISTCOM='0'B;
  152       %LSET LISTSUB='1'B;
  153       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  154       %IF (SUBSTR(STR,0,6)='STATIC') OR
  155       (SUBSTR(STR,0,8)='CONSTANT') OR
  156       (SUBSTR(STR,0,3)='EXT');
  157       %LSET INIT=CHARTEXT(' INIT');
  158       %LSET ENIT=CHARTEXT(' ');
  159       %ELSE;
  160       %LSET INIT=CHARTEXT('/*');
  161       %LSET ENIT=CHARTEXT('*/');
  162       %ENDIF;
  163
  164      %IF LVL=1 ;
  165      DCL 1 NAME STCLASS ALGN,
  166      %ELSE;
  167             %(LVL) NAME ALGN,
  168      %ENDIF;
  169        %(LVL+1) BFRSIZ UBIN WORD %INIT(0)%ENIT,  /* size for buddy manager */
  170
  171        %(LVL+1) LINK$ PTR %INIT(ADDR(NIL))%ENIT,
  172      /*
  173        link$ ptr to next network fragment context block
  174      */
  175        %(LVL+1) OFFSET UBIN(%(18-2*BITBIN(MODE_FEP))) UNAL %INIT(0)%ENIT,
  176      /*
  177        offset word - octet count into npdu.
  178      */
  179        %(LVL+1) LENGTH UBIN(%(18-2*BITBIN(MODE_FEP))) UNAL %INIT(0)%ENIT LAST
  180      /*
  181        length word - length to nfrag
  182      */
  183      %MEND;
  184      /*
  185           NAME: K$NHDR - network tfrag reassembly header.
15:03 JUL 28 '97 K_NETWORK_M.:E05SI                                        6    
  186           DESCRIPTION: each set of npdus which require reassembly get a dataheader
  187              which links other pdus being simultanously reassembled.
  188      */
  189
  190      %MACRO K$NHDR (NAME=K$NHDR,STCLASS=BASED,LVL=1,ALGN=ALIGNED,LAST=";");
  191       %LSET LISTDIR='0'B;
  192       %LSET LISTEXP='1'B;
  193       %LSET LISTCOM='0'B;
  194       %LSET LISTSUB='1'B;
  195       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  196       %IF (SUBSTR(STR,0,6)='STATIC') OR
  197       (SUBSTR(STR,0,8)='CONSTANT') OR
  198       (SUBSTR(STR,0,3)='EXT');
  199       %LSET INIT=CHARTEXT(' INIT');
  200       %LSET ENIT=CHARTEXT(' ');
  201       %ELSE;
  202       %LSET INIT=CHARTEXT('/*');
  203       %LSET ENIT=CHARTEXT('*/');
  204       %ENDIF;
  205
  206      %IF LVL=1 ;
  207      DCL 1 NAME STCLASS ALGN,
  208      %ELSE;
  209             %(LVL) NAME ALGN,
  210      %ENDIF;
  211        %(LVL+1) BFRSIZ UBIN(%(18-2*BITBIN(MODE_FEP))) UNAL %INIT(0)%ENIT,
  212      /*
  213        size of buffer as allocated by buddy space manager
  214      */
  215        %(LVL+1) * UBIN(%(18-2*BITBIN(MODE_FEP))) UNAL %INIT(0)%ENIT,
  216
  217        %(LVL+1) FLINK$ PTR %INIT(ADDR(NIL))%ENIT,
  218      /*
  219        link to next nhdr
  220      */
  221        %(LVL+1) BLINK$ PTR %INIT(ADDR(NIL))%ENIT,
  222      /*
15:03 JUL 28 '97 K_NETWORK_M.:E05SI                                        7    
  223        link to previous nhdr
  224      */
  225        %(LVL+1) FRAG$ PTR %INIT(ADDR(NIL))%ENIT,
  226      /*
  227        pointer to list of frag ctxs received so far(k$nfrag).
  228      */
  229        %(LVL+1) REASSEMTIM UBIN(%(36-4*BITBIN(MODE_FEP))) %INIT(0)%ENIT,
  230      /*
  231        time allocated for reassembly of this pdu.
  232      */
  233      %LSET NXTLVL = %(LVL+1);
  234        %K$NSAP(FPTN=SOURCE,LVL=%NXTLVL,ADRTYP=NET,LAST=",");
  235        %K$NSAP(FPTN=DESTINATION,LVL=%NXTLVL,ADRTYP=NET,LAST=",");
  236
  237        %(LVL+1) HDR$ PTR %INIT(ADDR(NIL)%ENIT,
  238      /*
  239        pointer to the header portion of the npdu
  240      */
  241        %(LVL+1) DATA$ PTR %INIT(ADDR(NIL)%ENIT,
  242      /*
  243        pointer to the beginning of the data portion of the npdus
  244      */
  245        %(LVL+1) DATAOFFSET UBIN(%(18-2*BITBIN(MODE_FEP))) UNAL %INIT(0)%ENIT,
  246      /*
  247         offset, in bytes, between hdr$ and data$ saves having to
  248         redo the calculation everytime.
  249      */
  250        %(LVL+1) DATASZ UBIN(%(18-2*BITBIN(MODE_FEP))) UNAL %INIT(0)%ENIT,
  251      /*
  252        total size of data in bytes expected.
  253      */
  254        %(LVL+1) RECVSZ UBIN(%(18-2*BITBIN(MODE_FEP))) UNAL %INIT(0)%ENIT,
  255      /*
  256        size in bytes of data received thus far
  257      */
  258        %(LVL+1) DATAID UBIN(%(18-2*BITBIN(MODE_FEP))) UNAL %INIT(0)%ENIT,
  259      /*
15:03 JUL 28 '97 K_NETWORK_M.:E05SI                                        8    
  260        id for this segment
  261      */
  262        %(LVL+1) DSTNODE# UBIN BYTE UNAL %INIT(0)%ENIT,
  263      /*
  264        node# this message is destined for.  so we don't have to
  265        decode the address again.
  266      */
  267        %(LVL+1) SRCNODE# UBIN BYTE UNAL %INIT(0)%ENIT LAST
  268      %MEND;

