VERSION E05

Elsie.D00  MLC-16 X.25/HDLC Handler CCPs                                        WED JUL 30 '97 02:23 Page:1
        1                     *M*  KXM$MLC16 - X.25/HDLC Handler MLC-16 CCPs
        2                     *T***********************************************************
        3                     *T*                                                         *
        4                     *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
        5                     *T*                                                         *
        6                     *T***********************************************************
        7                     *N* Make sure we handle receive problems (e.g., abort) correctly.
        8                     *
        9                     *P*  NAME:     KXM$MLC16
       10                     *P*  PURPOSE:  This module contains the MLC-16 channel
       11                     *P*            control programs for the X.25/HDLC handler.
       12                     *
       13                     * Developer:  Paul Stendal.
       14                     *
       15     1                   TITLE    'MLC-16 X.25/HDLC Handler CCPs'
       16                     *
       17                     * System files
       18                     *
       19     2                   OUNAME   KXM$MLC16
       20     3                   BIAS     START='2000'X,END='2FFF'X
       21     4                   INCLUDE  KW_LCT_E
       22   311                   INCLUDE  KW_SLCT_E
       23   450                   INCLUDE  KX_LCT_E

Elsie.D00  MLC-16 X.25/HDLC Handler CCPs                                        WED JUL 30 '97 02:23 Page:2
       25                     *
       26                     * Receive data status; contents of LR7, passed to the receive
       27                     * CCP via LCT 11 on an IN LR7.
       28                     *
       29                     * WARNING:  Simply accessing LCT 11 doesn't give you up-to-date
       30                     * status - you need to do an IN LR7.
       31                     *
       32   566  00B          Y#RCVDATSTT      EQU 11             Receive data status LCT location
       33
       34   567  080          Y#RCVDATSTT_FCSE EQU '80'X          Receive frame check sequence error
       35   568  040          Y#RCVDATSTT_RILS EQU '40'X          Receive idle link state
       36   569  008          Y#RCVDATSTT_RO   EQU '08'X          Receive over-run
       37   570  004          Y#RCVDATSTT_RAB  EQU '04'X          Receive abort
       38   571  002          Y#RCVDATSTT_REOM EQU '02'X          Receive end-of-message
       39                     *
       40                     * Transmit data control;  contents for LR7, passed to the adapter
       41                     * (LR7) via LCT 43 on an OUT LR7.
       42                     *
       43                     * WARNING:  Simply storing into LCT 43 doesn't set the control into LR7 -
       44                     * you need to do an OUT LR7.
       45                     *
       46   572  02B          Y#TRNDATCTR      EQU 43             Transmit data control LCT location
       47
       48   573  010          Y#TRNDATCTR_TILS EQU '10'X          Transmit idle link state
       49   574  008          Y#TRNDATCTR_TFLG EQU '08'X          Transmit flag
       50   575  004          Y#TRNDATCTR_TA   EQU '04'X          Transmit abort
       51   576  002          Y#TRNDATCTR_TEOM EQU '02'X          Transmit end-of-message
       52   577  001          Y#TRNDATCTR_TSOM EQU '01'X          Transmit start-of-message
       53                     *
       54                     * EQUs for the LRs that are actually used, and unique to MLC-16
       55                     * HDLC adapters.
       56                     *
       57   578  006          LR6 EQU       6                     CRC (ECM) control
       58   579  007          LR7 EQU       7                     Data character

Elsie.D00  MLC-16 X.25/HDLC Handler CCPs                                        WED JUL 30 '97 02:23 Page:3
       60   581               KXM$LCT  LCTS
       61                     *
       62                     * Common LCT initialization
       63                     *
       64                     * Input LCT initialization
       65                     *
       66   582                   ADDR      LOC=KW#RCVCCP$,REF=Y$RCV_BGN
       67   583                   LCT       LOC=KW#RCVSCN,;
       68                                   VALUE=(KW#RCVSCN_SCNCTR@S|KW#RCVSCN_SETSTT@S)
       69   584                   LCT       LOC=KW#RCVSTTMSK_DSR,VALUE=KW#RCVSTTMSK_DSR@S
       70   585                   LCT       LOC=KX#M_RCVST,VALUE=KX#M_RCVST_NULL
       71   586                   LCT       LOC=KX#M_RCVBYTE,VALUE='FF'X
       72                     *
       73                     * Transmit LCT initialization
       74                     *
       75   587                   ADDR      LOC=KW#TRNCCP$,REF=Y$TRN_BGN
       76   588                    LCT      LOC=47,VALUE='C0'X      *SCAN MASK
       77   589                   LCT       LOC=KX#M_TRNST,VALUE=KX#M_TRNST_NULL
       78   590                   LCT       LOC=KX#M_TRNBYTE,VALUE='FF'X
       79   591                   ENDLCTS
                 000 00000000 00002064 C0000000 00000080
                 010 00000000 00000001 FF000000 00000000
                 020 00000000 000020FC 00000000 000000C0
                 030 00000000 00000000 01FF0000 00000000
                 040 00000000 00000000 00000000 00000000
                 050 00000000 00000000 00000000 00000000
                 060 00000000 00000000 00000000 00000000
                 070 00000000 00000000 00000000 00000000
                 080 00000000 00000000 00000000 00000000
                 090 00000000 00000000 00000000 00000000
                 0A0 00000000 00000000 00000000 00000000
                 0B0 00000000 00000000 00000000 00000000
                 0C0 00000000 00000000 00000000 00000000
                 0D0 00000000 00000000 00000000 00000000
                 0E0 00000000 00000000 00000000 00000000
                 0F0 00000000 00000000 00000000 00000000
Elsie.D00  MLC-16 X.25/HDLC Handler CCPs                                        WED JUL 30 '97 02:23 Page:4
       80                     *
       81                     * Reserve 100 byte patch area filled with NOPs.
       82                     *
       83   592 2000          PAT TABLE     SIZE=100,DTRANSLATE=0
       84   593               PAT ENDTABLE
                2000 00000000 00000000 00000000 00000000
                2010 00000000 00000000 00000000 00000000
                2020 00000000 00000000 00000000 00000000
                2030 00000000 00000000 00000000 00000000
                2040 00000000 00000000 00000000 00000000
                2050 00000000 00000000 00000000 00000000
                2060 00000000


Elsie.D00  MLC-16 X.25/HDLC Handler Receive CCP                                 WED JUL 30 '97 02:23 Page:5
       86   595                   TITLE     'MLC-16 X.25/HDLC Handler Receive CCP'
       87   596 2064          KXM$MLC16 CCP
       88   597 2064          Y$RCV_BGN ;
       89       2064              LABEL
       90                     *
       91                     * Check for a valid CCB
       92                     *
       93   598 2064 E705         BVB       Y$RCV_RCVIT
       94                     *
       95                     * Not valid, go to stopped
       96                     *
       97   599 2066 E6007E       JUMP      Y$RCV_OFF

Elsie.D00  MLC-16 X.25/HDLC Handler Receive CCP                                 WED JUL 30 '97 02:23 Page:6
       99   601 206A          Y$RCV_RCVIT ;
      100       206A              LABEL
      101                     *
      102                     * Valid CCB, mark the receive CCP as initializing
      103                     *
      104   602 206A 90035117     ASSIGN    KX#M_RCVST,=KX#M_RCVST_INIT
      105                     *
      106                     * Set up for CRC ECM (checking/generation of CRC) to be
      107                     * CCITT 16-bit mode, done by the adapter.
      108                     *
      109   603 206E 9000         LD        =0
      110   604 2070 36           OUT       LR6
      111                     *
      112                     * Turn on the receiver
      113                     *
      114   605 2071 90025414     SET       KW#CLACTR,=KW#CLACTR_RCVON@S
                     5114
      115   606 2077 32           OUT       LR#CLACTR

Elsie.D00  MLC-16 X.25/HDLC Handler Receive CCP                                 WED JUL 30 '97 02:23 Page:7
      117   608 2078          Y$RCV_IDL ;
      118       2078              LABEL
      119                     *
      120                     * Mark the receive CCP as idle
      121                     *
      122   609 2078 90045117     ASSIGN    KX#M_RCVST,=KX#M_RCVST_IDLE

Elsie.D00  MLC-16 X.25/HDLC Handler Receive CCP                                 WED JUL 30 '97 02:23 Page:8
      124   611 207C          Y$RCV_IDLLOP ;
      125       207C              LABEL
      126                     *
      127                     * Wait for something to happen
      128                     *
      129   612 207C 01           WAIT
      130   613 207D F5FE         BARF      Y$RCV_IDLLOP
      131                     *
      132                     * Mark the receive CCP as receiving data bytes
      133                     *
      134   614 207F 90055117     ASSIGN    KX#M_RCVST,=KX#M_RCVST_RCV
      135   615 2084          Y$RCV_GO  ;
      136       2084              LABEL
      137                     *
      138                     * Check adapter status to see if an error has occured.
      139                     * The IN LR7 also fetches any character received.
      140                     *
      141   616 2084 27           IN        LR7
      142   617 2085 F209         BNZ       Y$RCV_STT
      143                     *
      144                     * store received byte into L6 buffer
      145                     *
      146   618 2087 11           ST
      147                     *
      148                     * Check to see if that is the last character
      149                     *
      150   619 2088 00            NOP
      151   620 2089 00            NOP
      152   621 208A 00            NOP
      153   622 208B E5F8         BAR       Y$RCV_GO
      154   623 208D E0EE         B         Y$RCV_IDLLOP

Elsie.D00  MLC-16 X.25/HDLC Handler Receive CCP                                 WED JUL 30 '97 02:23 Page:9
      156   625 208F 5118     Y$RCV_STT ;
      157                         ST        KX#M_RCVBYTE          save byte received
      158                     *
      159                     * Check and see if this was the end of a frame (message)
      160                     *
      161   626 2091 500B9302     BRESET    Y#RCVDATSTT,=Y#RCVDATSTT_REOM,Y$RCV_ABORT
                     E23E
      162   627 2097 5018         LD        KX#M_RCVBYTE          restore received byte
      163                     *
      164                     * store received byte into L6 buffer
      165                     *
      166   628 2099 11           ST

Elsie.D00  MLC-16 X.25/HDLC Handler Receive CCP                                 WED JUL 30 '97 02:23 Page:10
      168   630 209A          Y$RCV_NXTCCB ;
      169       209A              LABEL
      170                     *
      171                     * Get the next CCB
      172                     *
      173   631 209A 02           GNCCB
      174                     *
      175                     * If the number of interupts is zero interupt the L6
      176                     *
      177   632 209B 504D         LD        KW#RCVDFRINTCNT  B/Already interrupts Q'd
      178   633 209D F202         BZF       Y$RCV_NO_INT
      179   634 209F 08           INT
      180                     *
      181   635 20A0          Y$RCV_NO_INT ;
      182       20A0              LABEL
      183   636 20A0 F705         BNVB      Y$RCV_USEFIFO
      184   637 20A2          Y$RCV_AGAIN ;
      185       20A2              LABEL
      186                     *
      187                     * If the adapter is still ready; go get the next frame
      188                     *
      189   638 20A2 E5E1         BAR       Y$RCV_GO
      190   639 20A4 E0D3         B         Y$RCV_IDL
      191   640 20A6          Y$RCV_USEFIFO ;
      192       20A6              LABEL
      193                     *
      194                     * Here we buy until the next frame for the fep to return a CCB
      195                     *
      196   641 20A6 01           WAIT
      197   642 20A7 E7FA         BVB      Y$RCV_AGAIN
      198                     *
      199                     * New frame has started but we still don't have a CCB.
      200                     * Buffer up the first byte and the status byte
      201                     *
      202   643 20A9 F5FC         BARF     Y$RCV_USEFIFO
      203   644 20AB 27           IN       LR7
Elsie.D00  MLC-16 X.25/HDLC Handler Receive CCP                                 WED JUL 30 '97 02:23 Page:11
      204   645 20AC F2F9         BNZ      Y$RCV_USEFIFO    Oh no, something's wrong w/ this byte
      205   646 20AE 5118         ST       KX#M_RCVBYTE     Ok, it's a clean byte
      206   647 20B0 01           WAIT
      207   648 20B1 F734         BNVB     Y$RCV_OFF        Still no CCBs.
      208   649 20B3 5018         LD       KX#M_RCVBYTE
      209   650 20B5 11           ST
      210   651 20B6 E0CD         B        Y$RCV_GO

Elsie.D00  MLC-16 X.25/HDLC Handler Receive CCP                                 WED JUL 30 '97 02:23 Page:12
      212   653 20B8          Y$RCV_LC ;
      213       20B8              LABEL
      214                     *
      215                     * Mark the receive CCP as having exhausted the receive CCB
      216                     *
      217   654 20B8 900F5117     ASSIGN    KX#M_RCVST,=KX#M_RCVST_LC
      218                     *
      219                     * Mark the CCB as a short frame, (it is not a short frame,
      220                     * the CCB exhausted bit will be set)
      221                     *
      222   655 20BC 5010         LD        KX#M_RCVCCBSTAT
      223   656 20BE 93F9         AND       ='F9'X
      224   657 20C0 9404         OR        =KX#M_RCVERR_SHORT*2        (*2 for the correct bits)
      225   658 20C2 5110         ST        KX#M_RCVCCBSTAT
      226                     *
      227                     * Read characters until EOM
      228                     *
      229   659 20C4          Y$RCV_SRCEOMLOP ;
      230       20C4              LABEL
      231                     *
      232                     * Check status, fetch input byte.
      233                     *
      234   660 20C4 E502         BAR       Y$RCV_SRCEOMLOP2
      235   661 20C6 01           WAIT
      236   662 20C7 27       Y$RCV_SRCEOMLOP2 ;
      237                         IN        LR7
      238   663 20C8 500B9302     BSET      Y#RCVDATSTT,=Y#RCVDATSTT_REOM,Y$RCV_FNDEOM
                     F203
      239   664 20CE E0F5         B         Y$RCV_SRCEOMLOP
      240                     *
      241                     * The end of the frame has been found
      242                     *
      243   665 20D0          Y$RCV_FNDEOM ;
      244       20D0              LABEL
      245                     *
      246                     * Go get next CCB
Elsie.D00  MLC-16 X.25/HDLC Handler Receive CCP                                 WED JUL 30 '97 02:23 Page:13
      247                     *
      248   666 20D0 E6FFC8       JUMP      Y$RCV_NXTCCB

Elsie.D00  MLC-16 X.25/HDLC Handler Receive CCP                                 WED JUL 30 '97 02:23 Page:14
      250   668 20D4          Y$RCV_ABORT ;
      251       20D4              LABEL
      252                     *
      253                     * Mark the receive CCP as processing an abort
      254                     *
      255   669 20D4 500B         LD        Y#RCVDATSTT
      256   670 20D6 11           ST
      257   671 20D7 900A5117     ASSIGN    KX#M_RCVST,=KX#M_RCVST_ABORT
      258                     *
      259                     * Mark the CCB as having been aborted
      260                     *
      261   672 20DB 5010         LD        KX#M_RCVCCBSTAT
      262   673 20DD 93F9         AND       ='F9'X
      263   674 20DF 9402         OR        =KX#M_RCVERR_ABORT*2        (*2 for the correct bits)
      264   675 20E1 5110         ST        KX#M_RCVCCBSTAT
      265                     *
      266                     * Go try to get the next CCB
      267                     *
      268   676 20E3 E0B6         B         Y$RCV_NXTCCB

Elsie.D00  MLC-16 X.25/HDLC Handler Receive CCP                                 WED JUL 30 '97 02:23 Page:15
      270   678 20E6          Y$RCV_OFF ;
      271       20E6              LABEL
      272                     *
      273                     * Mark the receive CCB as out of CCBs
      274                     *
      275   679 20E6 90095117     ASSIGN    KX#M_RCVST,=KX#M_RCVST_NCCB
      276                     *
      277                     * Turn off the receiver
      278                     *
      279   680 20EA 90FD5314     RESET     KW#CLACTR,=KW#CLACTR_RCVON@S
                     5114
      280   681 20F0 32           OUT       LR#CLACTR
      281                     *
      282                     * Interrupt the FEP because we have no CCBs
      283                     *
      284   682 20F1 504D         LD        KW#RCVDFRINTCNT  B/Already interrupts Q'd
      285   683 20F3 F202         BZF       Y$RCV_SKIP_INT
      286   684 20F5 08           INT
      287                     *
      288                     * Wait for something to happen
      289                     *
      290   685 20F6          Y$RCV_SKIP_INT ;
      291       20F6              LABEL
      292   686 20F6 01           WAIT
      293                     *
      294                     * Check for a valid CCB (the L6 gave us some more CCBs)
      295                     *
      296   687 20F7 F7FE         BNVB      Y$RCV_SKIP_INT
      297                     *
      298                     * We got some CCBs, go and listen
      299                     *
      300   688 20F9 E6FF6F       JUMP      Y$RCV_RCVIT

Elsie.D00  MLC-16 X.25/HDLC Handler Transmit CCP                                WED JUL 30 '97 02:23 Page:16
      301   689                   TITLE     'MLC-16 X.25/HDLC Handler Transmit CCP'
      302   690 20FC          Y$TRN_BGN ;
      303       20FC              LABEL
      304   691 20FC 90035138      ASSIGN   KX#M_TRNST,=KX#M_TRNST_INIT
      305                     *Set up CRC
      306   692 2100 9F            CLR
      307   693 2101 36            OUT LR6
      308
      309                     *Turn on RTS and DTR
      310   694 2102 90C05414 RTS_DTR_ON ;
                     5114
      311                          SET   KW#CLACTR,=KW#CLACTR_RTS@S;
      312                                          |KW#CLACTR_DTR@S
      313   695 2108 32            OUT   2
      314
      315   696 2109 25       TEST_SIGNALS ;
      316                          IN    5
      317   697 210A 93C0          AND   ='C0'X
      318   698 210C 92C0          C     ='C0'X
      319   699 210E F13A          BEF   NO_LINE_SIGNALS
      320
      321                     *Turn on TRANSMIT.
      322   700 2110 90015414 TRN_ON ;
                     5114
      323                          SET   KW#CLACTR,=KW#CLACTR_TRNON@S
      324   701 2116 32            OUT   2
      325                     *Get a CCB and transmit it.
      326   702 2117 F748     TRN_FRAME ;
      327                          BVBF  GET_CCB
      328   703 2119 E502     START_FRAME ;
      329                          BART  SEND_SOF
      330   704 211B 01            WAIT
      331
      332                     *Send first character with SOF control
      333   705 211C 90045138 SEND_SOF ;
      334                          ASSIGN   KX#M_TRNST,=KX#M_TRNST_STFR
Elsie.D00  MLC-16 X.25/HDLC Handler Transmit CCP                                WED JUL 30 '97 02:23 Page:17
      335   706 2120 9001          LD    =Y#TRNDATCTR_TSOM
      336   707 2122 512B          ST    Y#TRNDATCTR
 LC2-00096-0   WARNING: The byte specified (43) has been defined as
               being reserved for firmware use.
      337   708 2124 10            LD
      338   709 2125 37            OUT   LR7
      339   710 2126 5F2B          CLL   Y#TRNDATCTR
      340
      341                     *Transmit rest of frame.
      342   711 2128 E502     SEND_FRAME ;
      343                          BART  SEND_CHAR
      344   712 212A 01            WAIT
      345
      346   713 212B 10       SEND_CHAR ;
      347                          LD
      348   714 212C 5139          ST    KX#M_TRNBYTE
      349   715 212E E307          BLCT  LAST_CHAR
      350   716 2130 37            OUT   LR7
      351   717 2131 00            NOP
      352   718 2132 00            NOP
      353   719 2133 00            NOP
      354   720 2134 E0F3          B     SEND_FRAME
      355
      356                     *Transmit last character with EOF control.
      357   721 2136 90075138 LAST_CHAR ;
      358                          ASSIGN   KX#M_TRNST,=KX#M_TRNST_TRNLST
      359   722 213A 9002          LD    =Y#TRNDATCTR_TEOM
      360   723 213C 512B          ST    Y#TRNDATCTR
 LC2-00096-0   WARNING: The byte specified (43) has been defined as
               being reserved for firmware use.
      361   724 213E 5039          LD    KX#M_TRNBYTE
      362   725 2140 37            OUT   LR7
      363
      364                     *Check for underrun.
      365   726 2141 29            AST
      366   727 2142 9301          AND   ='01'X
Elsie.D00  MLC-16 X.25/HDLC Handler Transmit CCP                                WED JUL 30 '97 02:23 Page:18
      367   728 2144 F22C          BZF   UNDERRUN
      368
      369                     *Transmit next frame if there is one.
      370   729 2146 02            GNB
      371   730 2147 E0CF          B     TRN_FRAME
      372
      373   731 2149 90025138 NO_LINE_SIGNALS ;
      374                          ASSIGN   KX#M_TRNST,=KX#M_TRNST_WAIT
      375   732 214D 90D0          LD    ='D0'X      *Turn on scan
      376   733 214F 5128          ST    40
      377   734 2151 01       NO_LS_WAIT ;
      378                          WAIT              *Wait for line signals to come up
      379   735 2152 502E          LD    46
      380   736 2154 93C0          AND   ='C0'X
      381   737 2156 92C0          C     ='C0'X
      382   738 2158 F1F8          BEF   NO_LS_WAIT
      383
      384   739 215A 9050          LD    ='50'X         *Turn off scan
      385   740 215C 5128          ST    40
      386   741 215E E0B1          B     TRN_ON
      387
      388
      389                     *Interrupt L6 and wait for it to give us more CCBs.  Interrupt only
      390                     *once.
      391   742 2160 900C5138 GET_CCB ;
      392                          ASSIGN   KX#M_TRNST,=KX#M_TRNST_OFF
      393   743 2164 90FE5314      RESET KW#CLACTR,=KW#CLACTR_TRNON@S
                     5114
      394   744 216A 32            OUT LR#CLACTR
      395   745 216B 08       GET_CCB_INTR ;
      396                          INT
      397   746 216C 01       GET_CCB_WAIT ;
      398                          WAIT
      399   747 216D E794          BVBT  RTS_DTR_ON
      400   748 216F E0FC         B     GET_CCB_WAIT
      401
Elsie.D00  MLC-16 X.25/HDLC Handler Transmit CCP                                WED JUL 30 '97 02:23 Page:19
      402
      403                     *On underrun:  Set CCP status to underrun, Interrupt L6 and wait
      404   749 2171 900F5138 UNDERRUN ;
      405                          ASSIGN   KX#M_TRNST,=KX#M_TRNST_UNDRUN
      406   750 2175 08            INT
      407   751 2176 01            WAIT
      408   752 2177 02            GNB
      409   753 2178 E09E          B     TRN_FRAME
      410
      411   754                    END
 LC0-00001-0              No Errors in this assembly.
